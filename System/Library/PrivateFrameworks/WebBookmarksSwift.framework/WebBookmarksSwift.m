uint64_t @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTab(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  *(void *)(v0 + 48) = v1;
  return MEMORY[0x270FA2498](@objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTab(_:), v1, 0);
}

{
  void *v0;
  void (**v1)(void, void);
  void *v2;
  Class isa;
  uint64_t (*v4)(void);
  uint64_t v6;

  v1 = (void (**)(void, void))v0[3];
  v2 = (void *)v0[2];
  ParticipantPresenceStore.activeParticipantsInTab(_:)(v0[4], v0[5]);
  swift_bridgeObjectRelease();

  type metadata accessor for CKShareParticipant();
  lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CKShareParticipant and conformance NSObject, (void (*)(uint64_t))type metadata accessor for CKShareParticipant);
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(void, Class))v1)[2](v1, isa);

  _Block_release(v1);
  v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu + _sIeAgH_ytIeAgHr_TRTu);
  return v8(a1, v4, v5, v6);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu);
  return v6(a1, v4);
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v6();
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu);
  return v6(v2, v3, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:)()
{
  long long v6 = *(_OWORD *)(v0 + 48);
  long long v7 = *(_OWORD *)(v0 + 32);
  long long v5 = *(_OWORD *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(void *)(v3 + 264) = v2;
  *(_OWORD *)(v3 + 248) = v5;
  *(_OWORD *)(v3 + 232) = v6;
  *(_OWORD *)(v3 + 216) = v7;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:), 0, 0);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5(uint64_t a1, int *a2)
{
  long long v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *long long v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  long long v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *long long v5 = v4;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v7();
}

uint64_t closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:)()
{
  *(void *)(v0 + 416) = *(void *)(*(void *)(v0 + 408) + 112);
  swift_retain();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;
  uint64_t v17;

  v16 = v0;
  ParticipantPresenceStore.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:)(*(void *)(v0 + 216), *(void *)(v0 + 224), *(void *)(v0 + 232), *(void *)(v0 + 240), *(void *)(v0 + 256), *(void *)(v0 + 264), v9);
  uint64_t v1 = v9[0];
  uint64_t v2 = v9[1];
  *(void *)(v0 + 280) = v9[0];
  *(void *)(v0 + 288) = v2;
  uint64_t v3 = v10;
  uint64_t v4 = v11;
  *(void *)(v0 + 296) = v10;
  *(void *)(v0 + 304) = v4;
  long long v5 = v12;
  long long v6 = v13;
  *(void *)(v0 + 312) = v12;
  *(void *)(v0 + 320) = v6;
  uint64_t v7 = v14;
  *(void *)(v0 + 328) = v14;
  *(_OWORD *)(v0 + 336) = v15;
  *(void *)(v0 + 72) = v1;
  *(void *)(v0 + 80) = v2;
  *(void *)(v0 + 88) = v3;
  *(void *)(v0 + 96) = v4;
  *(void *)(v0 + 104) = v5;
  *(void *)(v0 + 112) = v6;
  *(void *)(v0 + 120) = v7;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t (*v3)(void);
  uint64_t (*v4)(void *);
  uint64_t v5;

  if (v0[52])
  {
    uint64_t v4 = (uint64_t (*)(void *))((char *)&async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:)
                                          + async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:));
    uint64_t v1 = (void *)swift_task_alloc();
    v0[53] = v1;
    void *v1 = v0;
    v1[1] = closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:);
    return v4(v0 + 9);
  }
  else
  {
    outlined consume of PresenceUpdateMessage.Kind(v0[35], v0[36]);
    swift_bridgeObjectRelease();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  BOOL v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)();
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  BOOL v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_log_t log;
  NSObject *loga;
  os_log_t logb;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t type;
  uint64_t v59;
  void *v60;
  uint64_t v61;

  v60 = v0;
  uint64_t v1 = v0[43];
  if (v1)
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v3 = v0[35];
    uint64_t v2 = v0[36];
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v3, v2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v3, v2);
    swift_bridgeObjectRetain();
    long long v5 = Logger.logObject.getter();
    long long v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v8 = (void *)v0[41];
      uint64_t v7 = v0[42];
      v49 = v0[39];
      v56 = v0[36];
      v51 = v0[40];
      log = (os_log_t)v0[35];
      v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      v59 = v10;
      *(_DWORD *)v9 = 136446466;
      swift_bridgeObjectRetain();
      v0[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v1, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v9 + 12) = 2082;
      v11 = CRDTGeneration.debugDescription.getter(v49, v51, v8);
      v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind((uint64_t)log, v56);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind((uint64_t)log, v56);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_261746000, v5, v6, "Will send shared connection message to leave shared tab group with identifier %{public}s, generation: %{public}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v10, -1, -1);
      MEMORY[0x263E3FE70](v9, -1, -1);
    }
    else
    {
      v30 = v0[35];
      v29 = v0[36];
      swift_bridgeObjectRelease_n();
      outlined consume of PresenceUpdateMessage.Kind(v30, v29);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v30, v29);

      swift_bridgeObjectRelease();
    }
    v31 = *(void *)(v0[31] + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
    v0[44] = v31;
    v32 = closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:);
  }
  else
  {
    v13 = v0[36];
    if (v13)
    {
      v14 = v0[38];
      v15 = one-time initialization token for tabGroup;
      swift_bridgeObjectRetain();
      v16 = v13;
      if (v15 != -1)
      {
        swift_once();
        v16 = v0[36];
      }
      v17 = v0[35];
      v18 = type metadata accessor for Logger();
      v0[47] = __swift_project_value_buffer(v18, (uint64_t)static Logger.tabGroup);
      outlined copy of PresenceUpdateMessage.Kind(v17, v16);
      swift_bridgeObjectRetain();
      outlined copy of PresenceUpdateMessage.Kind(v17, v16);
      swift_bridgeObjectRetain();
      outlined copy of PresenceUpdateMessage.Kind(v17, v16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of PresenceUpdateMessage.Kind(v17, v16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = Logger.logObject.getter();
      v20 = static os_log_type_t.info.getter();
      v21 = os_log_type_enabled(v19, v20);
      v22 = (void *)v0[41];
      if (v21)
      {
        v50 = v0[39];
        v52 = v0[40];
        v23 = v0[37];
        type = v20;
        v24 = v0[35];
        v25 = v0[36];
        loga = v19;
        v26 = swift_slowAlloc();
        v57 = swift_slowAlloc();
        *(_DWORD *)v26 = 136446722;
        v59 = v57;
        swift_bridgeObjectRetain();
        v0[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v13, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v26 + 12) = 2082;
        swift_bridgeObjectRetain();
        v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v14, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v24, v25);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v24, v25);
        swift_bridgeObjectRelease();
        *(_WORD *)(v26 + 22) = 2082;
        v27 = CRDTGeneration.debugDescription.getter(v50, v52, v22);
        v0[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v24, v25);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v24, v25);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_261746000, loga, type, "Will send shared connection message to join tab group identifier %{public}s in tab %{public}s, generation: %{public}s", (uint8_t *)v26, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x263E3FE70](v57, -1, -1);
        MEMORY[0x263E3FE70](v26, -1, -1);
      }
      else
      {
        v46 = v0[35];
        v45 = v0[36];
        swift_bridgeObjectRelease_n();
        outlined consume of PresenceUpdateMessage.Kind(v46, v45);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v46, v45);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v46, v45);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v46, v45);

        swift_bridgeObjectRelease();
      }
      v31 = *(void *)(v0[31] + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
      v0[48] = v31;
      v32 = closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:);
    }
    else
    {
      if (one-time initialization token for tabGroup != -1) {
        swift_once();
      }
      v33 = v0[35];
      v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.tabGroup);
      outlined copy of PresenceUpdateMessage.Kind(v33, 0);
      swift_bridgeObjectRetain();
      outlined copy of PresenceUpdateMessage.Kind(v33, 0);
      swift_bridgeObjectRetain();
      v35 = Logger.logObject.getter();
      v36 = static os_log_type_t.info.getter();
      v37 = os_log_type_enabled(v35, v36);
      v38 = (void *)v0[41];
      if (v37)
      {
        v39 = v0[39];
        v40 = v0[40];
        logb = (os_log_t)v0[35];
        v41 = (uint8_t *)swift_slowAlloc();
        v42 = swift_slowAlloc();
        v59 = v42;
        *(_DWORD *)v41 = 136446210;
        v43 = CRDTGeneration.debugDescription.getter(v39, v40, v38);
        v0[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind((uint64_t)logb, 0);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind((uint64_t)logb, 0);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_261746000, v35, v36, "Will send personal connection message to leave tab group, generation: %{public}s", v41, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x263E3FE70](v42, -1, -1);
        MEMORY[0x263E3FE70](v41, -1, -1);
      }
      else
      {
        v47 = v0[35];
        outlined consume of PresenceUpdateMessage.Kind(v47, 0);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v47, 0);

        swift_bridgeObjectRelease();
      }
      v31 = *(void *)(v0[31] + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
      v0[51] = v31;
      v32 = closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:);
    }
  }
  return MEMORY[0x270FA2498](v32, v31, 0);
}

{
  void *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  v18 = v0;
  uint64_t v1 = v0[28];
  if (!v1 || (uint64_t v2 = v0[30]) == 0)
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.tabGroup);
    long long v5 = Logger.logObject.getter();
    v12 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v5, v12)) {
      goto LABEL_12;
    }
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_261746000, v5, v12, "Will leave all shared tab groups", v13, 2u);
    uint64_t v10 = (uint64_t)v13;
LABEL_11:
    MEMORY[0x263E3FE70](v10, -1, -1);
LABEL_12:

    goto LABEL_13;
  }
  uint64_t v3 = one-time initialization token for tabGroup;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  long long v5 = Logger.logObject.getter();
  long long v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v16 = v0[29];
    uint64_t v7 = v0[27];
    uint64_t v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v17 = v9;
    *(_DWORD *)uint64_t v8 = 136446466;
    swift_bridgeObjectRetain();
    v0[25] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v1, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 12) = 2082;
    swift_bridgeObjectRetain();
    v0[26] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v2, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_261746000, v5, v6, "Will move to tab with identifier %{public}s in shared tab group with identifier %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v9, -1, -1);
    uint64_t v10 = v8;
    goto LABEL_11;
  }

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
LABEL_13:
  v14 = *(void *)(v0[31] + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  v0[34] = v14;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:), v14, 0);
}

{
  void *v0;
  uint64_t v2;

  v0[45] = ParticipantPresenceCoordinator.ConnectionManagerStore.sharedConnectionManager(forTabGroup:)(v0[42], v0[43]);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  long long v2;
  void *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  BOOL v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)();
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *log;
  os_log_t loga;
  uint64_t v42;
  os_log_type_t type;
  uint64_t (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v46 = v0;
  if (*(void *)(v0 + 360))
  {
    uint64_t v1 = *(void *)(v0 + 328);
    *(_OWORD *)(v0 + 16) = 0u;
    uint64_t v2 = *(_OWORD *)(v0 + 312);
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)(v0 + 48) = v2;
    *(void *)(v0 + 64) = v1;
    v44 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:)
                                          + async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:));
    swift_bridgeObjectRetain();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 368) = v3;
    *uint64_t v3 = v0;
    v3[1] = closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:);
    return v44(v0 + 16);
  }
  else
  {
    long long v5 = *(void *)(v0 + 288);
    if (v5)
    {
      long long v6 = *(void *)(v0 + 304);
      uint64_t v7 = one-time initialization token for tabGroup;
      swift_bridgeObjectRetain();
      uint64_t v8 = v5;
      if (v7 != -1)
      {
        swift_once();
        uint64_t v8 = *(void *)(v0 + 288);
      }
      v9 = *(void *)(v0 + 280);
      uint64_t v10 = type metadata accessor for Logger();
      *(void *)(v0 + 376) = __swift_project_value_buffer(v10, (uint64_t)static Logger.tabGroup);
      outlined copy of PresenceUpdateMessage.Kind(v9, v8);
      swift_bridgeObjectRetain();
      outlined copy of PresenceUpdateMessage.Kind(v9, v8);
      swift_bridgeObjectRetain();
      outlined copy of PresenceUpdateMessage.Kind(v9, v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of PresenceUpdateMessage.Kind(v9, v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11 = Logger.logObject.getter();
      v12 = static os_log_type_t.info.getter();
      v13 = os_log_type_enabled(v11, v12);
      v14 = *(void **)(v0 + 328);
      if (v13)
      {
        v38 = *(void *)(v0 + 312);
        v39 = *(void *)(v0 + 320);
        v15 = *(void *)(v0 + 296);
        type = v12;
        v16 = *(void *)(v0 + 280);
        v17 = *(void *)(v0 + 288);
        log = v11;
        v18 = swift_slowAlloc();
        v42 = swift_slowAlloc();
        *(_DWORD *)v18 = 136446722;
        v45 = v42;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v5, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v18 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v6, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v16, v17);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v16, v17);
        swift_bridgeObjectRelease();
        *(_WORD *)(v18 + 22) = 2082;
        v19 = CRDTGeneration.debugDescription.getter(v38, v39, v14);
        *(void *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v16, v17);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v16, v17);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_261746000, log, type, "Will send shared connection message to join tab group identifier %{public}s in tab %{public}s, generation: %{public}s", (uint8_t *)v18, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x263E3FE70](v42, -1, -1);
        MEMORY[0x263E3FE70](v18, -1, -1);
      }
      else
      {
        v34 = *(void *)(v0 + 280);
        v33 = *(void *)(v0 + 288);
        swift_bridgeObjectRelease_n();
        outlined consume of PresenceUpdateMessage.Kind(v34, v33);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v34, v33);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v34, v33);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v34, v33);

        swift_bridgeObjectRelease();
      }
      v35 = *(void *)(*(void *)(v0 + 248) + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
      *(void *)(v0 + 384) = v35;
      v36 = closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:);
    }
    else
    {
      if (one-time initialization token for tabGroup != -1) {
        swift_once();
      }
      v21 = *(void *)(v0 + 280);
      v22 = type metadata accessor for Logger();
      __swift_project_value_buffer(v22, (uint64_t)static Logger.tabGroup);
      outlined copy of PresenceUpdateMessage.Kind(v21, 0);
      swift_bridgeObjectRetain();
      outlined copy of PresenceUpdateMessage.Kind(v21, 0);
      swift_bridgeObjectRetain();
      v23 = Logger.logObject.getter();
      v24 = static os_log_type_t.info.getter();
      v25 = os_log_type_enabled(v23, v24);
      v26 = *(void **)(v0 + 328);
      if (v25)
      {
        v27 = *(void *)(v0 + 312);
        v28 = *(void *)(v0 + 320);
        loga = *(os_log_t *)(v0 + 280);
        v29 = (uint8_t *)swift_slowAlloc();
        v30 = swift_slowAlloc();
        v45 = v30;
        *(_DWORD *)v29 = 136446210;
        v31 = CRDTGeneration.debugDescription.getter(v27, v28, v26);
        *(void *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind((uint64_t)loga, 0);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind((uint64_t)loga, 0);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_261746000, v23, v24, "Will send personal connection message to leave tab group, generation: %{public}s", v29, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x263E3FE70](v30, -1, -1);
        MEMORY[0x263E3FE70](v29, -1, -1);
      }
      else
      {
        v37 = *(void *)(v0 + 280);
        outlined consume of PresenceUpdateMessage.Kind(v37, 0);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v37, 0);

        swift_bridgeObjectRelease();
      }
      v35 = *(void *)(*(void *)(v0 + 248) + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
      *(void *)(v0 + 408) = v35;
      v36 = closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:);
    }
    return MEMORY[0x270FA2498](v36, v35, 0);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_release();
  outlined consume of PresenceUpdateMessage.Kind(0, 0);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:), 0, 0);
}

{
  void *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  BOOL v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)();
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  NSObject *log;
  os_log_t loga;
  uint64_t v39;
  os_log_type_t type;
  uint64_t v41;
  void *v42;
  uint64_t v43;

  v42 = v0;
  uint64_t v1 = v0[36];
  if (v1)
  {
    uint64_t v2 = v0[38];
    uint64_t v3 = one-time initialization token for tabGroup;
    swift_bridgeObjectRetain();
    uint64_t v4 = v1;
    if (v3 != -1)
    {
      swift_once();
      uint64_t v4 = v0[36];
    }
    long long v5 = v0[35];
    long long v6 = type metadata accessor for Logger();
    v0[47] = __swift_project_value_buffer(v6, (uint64_t)static Logger.tabGroup);
    outlined copy of PresenceUpdateMessage.Kind(v5, v4);
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v5, v4);
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v5, v4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v5, v4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = Logger.logObject.getter();
    uint64_t v8 = static os_log_type_t.info.getter();
    v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = (void *)v0[41];
    if (v9)
    {
      v35 = v0[39];
      v36 = v0[40];
      v11 = v0[37];
      type = v8;
      v12 = v0[35];
      v13 = v0[36];
      log = v7;
      v14 = swift_slowAlloc();
      v39 = swift_slowAlloc();
      *(_DWORD *)v14 = 136446722;
      v41 = v39;
      swift_bridgeObjectRetain();
      v0[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v1, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v14 + 12) = 2082;
      swift_bridgeObjectRetain();
      v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v2, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v12, v13);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v12, v13);
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 22) = 2082;
      v15 = CRDTGeneration.debugDescription.getter(v35, v36, v10);
      v0[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v12, v13);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v12, v13);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_261746000, log, type, "Will send shared connection message to join tab group identifier %{public}s in tab %{public}s, generation: %{public}s", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v39, -1, -1);
      MEMORY[0x263E3FE70](v14, -1, -1);
    }
    else
    {
      v30 = v0[35];
      v29 = v0[36];
      swift_bridgeObjectRelease_n();
      outlined consume of PresenceUpdateMessage.Kind(v30, v29);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v30, v29);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v30, v29);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v30, v29);

      swift_bridgeObjectRelease();
    }
    v31 = *(void *)(v0[31] + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
    v0[48] = v31;
    v32 = closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:);
  }
  else
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    v17 = v0[35];
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.tabGroup);
    outlined copy of PresenceUpdateMessage.Kind(v17, 0);
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v17, 0);
    swift_bridgeObjectRetain();
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.info.getter();
    v21 = os_log_type_enabled(v19, v20);
    v22 = (void *)v0[41];
    if (v21)
    {
      v23 = v0[39];
      v24 = v0[40];
      loga = (os_log_t)v0[35];
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v41 = v26;
      *(_DWORD *)v25 = 136446210;
      v27 = CRDTGeneration.debugDescription.getter(v23, v24, v22);
      v0[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind((uint64_t)loga, 0);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind((uint64_t)loga, 0);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_261746000, v19, v20, "Will send personal connection message to leave tab group, generation: %{public}s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v26, -1, -1);
      MEMORY[0x263E3FE70](v25, -1, -1);
    }
    else
    {
      v33 = v0[35];
      outlined consume of PresenceUpdateMessage.Kind(v33, 0);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v33, 0);

      swift_bridgeObjectRelease();
    }
    v31 = *(void *)(v0[31] + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
    v0[51] = v31;
    v32 = closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:);
  }
  return MEMORY[0x270FA2498](v32, v31, 0);
}

{
  void *v0;
  uint64_t v2;

  v0[49] = ParticipantPresenceCoordinator.ConnectionManagerStore.sharedConnectionManager(forTabGroup:)(v0[35], v0[36]);
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *log;
  uint64_t (*type)(uint64_t);
  uint64_t v24;
  void *v25;
  uint64_t v26;

  v25 = v0;
  if (v0[49])
  {
    type = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:)
                                           + async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:));
    uint64_t v1 = (void *)swift_task_alloc();
    v0[50] = v1;
    void *v1 = v0;
    v1[1] = closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:);
    return type((uint64_t)(v0 + 9));
  }
  else
  {
    uint64_t v4 = v0[35];
    uint64_t v3 = v0[36];
    outlined copy of PresenceUpdateMessage.Kind(v4, v3);
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v4, v3);
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v4, v3);
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v4, v3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    long long v5 = Logger.logObject.getter();
    long long v6 = static os_log_type_t.info.getter();
    uint64_t v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = (void *)v0[41];
    if (v7)
    {
      v20 = v0[40];
      v19 = v0[39];
      log = v5;
      uint64_t v10 = v0[37];
      v9 = v0[38];
      v12 = v0[35];
      v11 = v0[36];
      v13 = swift_slowAlloc();
      v21 = swift_slowAlloc();
      v24 = v21;
      *(_DWORD *)v13 = 136446722;
      swift_bridgeObjectRetain();
      v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2082;
      swift_bridgeObjectRetain();
      v0[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v12, v11);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v12, v11);
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 22) = 2082;
      v14 = CRDTGeneration.debugDescription.getter(v19, v20, v8);
      v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v12, v11);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v12, v11);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_261746000, log, v6, "Will send personal connection message to join tab group identifier %{public}s in tab %{public}s, generation: %{public}s", (uint8_t *)v13, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v21, -1, -1);
      MEMORY[0x263E3FE70](v13, -1, -1);
    }
    else
    {
      v17 = v0[35];
      v16 = v0[36];
      swift_bridgeObjectRelease_n();
      outlined consume of PresenceUpdateMessage.Kind(v17, v16);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v17, v16);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v17, v16);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v17, v16);
      swift_bridgeObjectRelease();
    }
    v18 = *(void *)(v0[31] + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
    v0[51] = v18;
    return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:), v18, 0);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *log;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v22 = v0;
  uint64_t v2 = v0[35];
  uint64_t v1 = v0[36];
  outlined copy of PresenceUpdateMessage.Kind(v2, v1);
  swift_bridgeObjectRetain();
  outlined copy of PresenceUpdateMessage.Kind(v2, v1);
  swift_bridgeObjectRetain();
  outlined copy of PresenceUpdateMessage.Kind(v2, v1);
  swift_bridgeObjectRetain();
  outlined copy of PresenceUpdateMessage.Kind(v2, v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v16 = (void *)v0[41];
    v17 = v0[39];
    v18 = v0[40];
    log = v3;
    long long v6 = v0[37];
    long long v5 = v0[38];
    uint64_t v8 = v0[35];
    uint64_t v7 = v0[36];
    v9 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    v21 = v19;
    *(_DWORD *)v9 = 136446722;
    swift_bridgeObjectRetain();
    v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2082;
    swift_bridgeObjectRetain();
    v0[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v8, v7);
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v8, v7);
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 22) = 2082;
    uint64_t v10 = CRDTGeneration.debugDescription.getter(v17, v18, v16);
    v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v8, v7);
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v8, v7);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_261746000, log, v4, "Will send personal connection message to join tab group identifier %{public}s in tab %{public}s, generation: %{public}s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v19, -1, -1);
    MEMORY[0x263E3FE70](v9, -1, -1);
  }
  else
  {
    v13 = v0[35];
    v12 = v0[36];
    swift_bridgeObjectRelease_n();
    outlined consume of PresenceUpdateMessage.Kind(v13, v12);
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v13, v12);
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v13, v12);
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v13, v12);
    swift_bridgeObjectRelease();
  }
  v14 = *(void *)(v0[31] + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
  v0[51] = v14;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:), v14, 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v1 = *v0;
  uint64_t v4 = *v0;
  swift_task_dealloc();
  swift_release();
  outlined consume of PresenceUpdateMessage.Kind(*(void *)(v1 + 280), *(void *)(v1 + 288));
  swift_bridgeObjectRelease();
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t partial apply for @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTab(_:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *long long v5 = v1;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  long long v6 = (uint64_t (*)(int, void *, void *))((char *)&async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTab(_:)
                                                   + async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTab(_:));
  return v6(v2, v3, v4);
}

uint64_t one-time initialization function for tabGroup()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.tabGroup);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.tabGroup);
  return Logger.init(subsystem:category:)();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTab(_:)(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v3[4] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[5] = v5;
  id v6 = a3;
  return MEMORY[0x270FA2498](@objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTab(_:), 0, 0);
}

uint64_t objectdestroy_66Tm()
{
  _Block_release(*(const void **)(v0 + 24));
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t objectdestroy_70Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t objectdestroy_28Tm()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 88, 7);
}

id ParticipantPresenceCoordinator.init()()
{
  uint64_t v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  uint64_t v3 = OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore;
  type metadata accessor for ParticipantPresenceStore();
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = v0;
  swift_defaultActor_initialize();
  uint64_t v6 = MEMORY[0x263F8EE80];
  *(void *)(v4 + 112) = MEMORY[0x263F8EE80];
  *(void *)(v4 + 120) = v6;
  *(void *)(v4 + 128) = v6;
  *(void *)(v4 + 136) = v6;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(void *)(v4 + 192) = 0xE000000000000000;
  *(void *)&v1[v3] = v4;
  uint64_t v7 = OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore;
  type metadata accessor for ParticipantPresenceCoordinator.ConnectionManagerStore();
  uint64_t v8 = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v9 = MEMORY[0x263F8EE78];
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 120) = v9;
  *(void *)(v8 + 128) = 0;
  *(void *)(v8 + 136) = specialized Dictionary.init(dictionaryLiteral:)(v9);
  *(void *)(v8 + 144) = specialized Dictionary.init(dictionaryLiteral:)(v9);
  *(unsigned char *)(v8 + 152) = 1;
  *(void *)&v5[v7] = v8;

  v11.receiver = v5;
  v11.super_class = ObjectType;
  return objc_msgSendSuper2(&v11, sel_init);
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (share: CKShare, count: Int)>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = (void *)*(v4 - 1);
    uint64_t v8 = *v4;
    swift_bridgeObjectRetain();
    id v9 = v7;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v12 = v5;
    v12[1] = v6;
    v13 = (void *)(v2[7] + 16 * result);
    void *v13 = v9;
    v13[1] = v8;
    uint64_t v14 = v2[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  long long v17;
  long long v18;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    v17 = *(_OWORD *)(v4 + 3);
    v18 = *(_OWORD *)(v4 + 1);
    uint64_t v8 = v4[5];
    swift_bridgeObjectRetain();
    id v9 = (id)v18;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v12 = v5;
    v12[1] = v6;
    v13 = v2[7] + 48 * result;
    *(void *)v13 = v7;
    *(_OWORD *)(v13 + 8) = v18;
    *(_OWORD *)(v13 + 24) = v17;
    *(void *)(v13 + 40) = v8;
    uint64_t v14 = v2[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v2[2] = v16;
    v4 += 8;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  id *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ParticipantHandleMap.ParticipantKind>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (id *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    uint64_t v8 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v11 = (uint64_t *)(v2[6] + 16 * result);
    *char v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (tabGroupIdentifier: String, tabIdentifier: String)>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *(v4 - 1);
    uint64_t v6 = *v4;
    uint64_t v7 = v4[1];
    uint64_t v8 = v4[2];
    uint64_t v10 = v4[3];
    id v9 = v4[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v12) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v2[6] + 16 * result);
    void *v13 = v5;
    v13[1] = v6;
    uint64_t v14 = (uint64_t *)(v2[7] + 32 * result);
    *uint64_t v14 = v7;
    v14[1] = v8;
    v14[2] = v10;
    v14[3] = v9;
    BOOL v15 = v2[2];
    uint64_t v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v2[2] = v17;
    v4 += 6;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Set<CKShareParticipant>>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    char v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ParticipantPresenceCoordinator.ConnectionManagerStore()
{
  return self;
}

uint64_t type metadata accessor for ParticipantPresenceStore()
{
  return self;
}

uint64_t specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v11;
  void *v12;
  void *v13;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  BOOL v15 = v4;
  uint64_t v5 = v0[3];
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(v1, 1, 1, v6);
  uint64_t v8 = v7;
  id v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v3;
  v9[5] = v5;
  v9[6] = v4;
  v9[7] = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), (uint64_t)v9);
  outlined destroy of TaskPriority?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v8(v1, 1, 1, v6);
  uint64_t v10 = v8;
  char v11 = (void *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v3;
  v11[5] = v5;
  v11[6] = v15;
  v11[7] = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), (uint64_t)v11);
  outlined destroy of TaskPriority?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v10(v1, 1, 1, v6);
  v12 = (void *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = v5;
  v12[5] = v3;
  swift_retain();
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), (uint64_t)v12);
  outlined destroy of TaskPriority?(v1, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized ThrowingTaskGroup.waitForAll(isolation:)
                                                 + async function pointer to specialized ThrowingTaskGroup.waitForAll(isolation:));
  v13 = (void *)swift_task_alloc();
  v0[8] = v13;
  void *v13 = v0;
  v13[1] = specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return v16(0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v11;
  void *v12;
  void *v13;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  BOOL v15 = v4;
  uint64_t v5 = v0[3];
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(v1, 1, 1, v6);
  uint64_t v8 = v7;
  id v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v3;
  v9[5] = v5;
  v9[6] = v4;
  v9[7] = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), (uint64_t)v9);
  outlined destroy of TaskPriority?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v8(v1, 1, 1, v6);
  uint64_t v10 = v8;
  char v11 = (void *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v3;
  v11[5] = v5;
  v11[6] = v15;
  v11[7] = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), (uint64_t)v11);
  outlined destroy of TaskPriority?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v10(v1, 1, 1, v6);
  v12 = (void *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = v5;
  v12[5] = v3;
  swift_retain();
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), (uint64_t)v12);
  outlined destroy of TaskPriority?(v1, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized ThrowingTaskGroup.waitForAll(isolation:)
                                                 + async function pointer to specialized ThrowingTaskGroup.waitForAll(isolation:));
  v13 = (void *)swift_task_alloc();
  v0[8] = v13;
  void *v13 = v0;
  v13[1] = specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return v16(0, 0);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t type metadata accessor for CKShareParticipant()
{
  unint64_t result = lazy cache variable for type metadata for CKShareParticipant;
  if (!lazy cache variable for type metadata for CKShareParticipant)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t ParticipantPresenceStore.activeParticipantsInTab(_:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 136);
  uint64_t v6 = *(void *)(v5 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v8 & 1) != 0))
  {
    uint64_t v9 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
  }
  else if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v9 = v11;
  }
  else
  {
    uint64_t v9 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t ParticipantPresenceStore.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v9 = v7[18];
  uint64_t v10 = v7[22];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (!v11)
  {
    uint64_t v13 = v7[19];
    if (a4 && a2)
    {
      v7[18] = a3;
      v7[19] = a4;
      v7[20] = result;
      v7[21] = a2;
      v7[22] = v12;
      v7[23] = a5;
      v7[24] = a6;
      outlined copy of PresenceUpdateMessage.Kind(v9, v13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 10) = 0u;
      v7[22] = v12;
      v7[23] = a5;
      v7[24] = a6;
      outlined copy of PresenceUpdateMessage.Kind(v9, v13);
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    outlined consume of PresenceUpdateMessage.Kind(v9, v13);
    swift_bridgeObjectRelease();
    if (v13)
    {
      swift_bridgeObjectRetain();
      outlined consume of PresenceUpdateMessage.Kind(v9, v13);
      swift_bridgeObjectRelease();
      uint64_t v14 = v7[18];
      uint64_t v15 = v7[19];
      if (v15)
      {
        swift_bridgeObjectRetain();
        outlined copy of PresenceUpdateMessage.Kind(v14, v15);
        swift_bridgeObjectRelease();
        if (v9 == v14 && v13 == v15)
        {
          swift_bridgeObjectRelease_n();
LABEL_13:
          swift_bridgeObjectRelease();
          uint64_t v14 = v7[18];
          uint64_t v15 = v7[19];
          uint64_t v17 = v7[20];
          uint64_t v18 = v7[21];
          uint64_t v19 = v7[22];
          uint64_t v20 = v7[23];
          uint64_t v21 = v7[24];
          outlined copy of PresenceUpdateMessage.Kind(v14, v15);
          uint64_t v9 = 0;
          uint64_t v13 = 0;
LABEL_16:
          uint64_t result = swift_bridgeObjectRetain();
          *a7 = v14;
          a7[1] = v15;
          a7[2] = v17;
          a7[3] = v18;
          a7[4] = v19;
          a7[5] = v20;
          a7[6] = v21;
          a7[7] = v9;
          a7[8] = v13;
          return result;
        }
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_13;
        }
        uint64_t v14 = v7[18];
        uint64_t v15 = v7[19];
      }
      uint64_t v17 = v7[20];
      uint64_t v18 = v7[21];
      uint64_t v19 = v7[22];
      uint64_t v20 = v7[23];
      uint64_t v21 = v7[24];
      outlined copy of PresenceUpdateMessage.Kind(v14, v15);
      goto LABEL_16;
    }
    outlined consume of PresenceUpdateMessage.Kind(v9, 0);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t outlined consume of PresenceUpdateMessage.Kind(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of PresenceUpdateMessage.Kind(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t CRDTGeneration.debugDescription.getter(uint64_t a1, uint64_t a2, void *a3)
{
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8236;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = a2;
  v7._object = a3;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 15904;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  return 8252;
}

uint64_t AsyncBufferedQueue.__allocating_init(bufferingPolicy:)(uint64_t a1)
{
  swift_allocObject();
  uint64_t v2 = specialized AsyncBufferedQueue.init(bufferingPolicy:)(a1);
  uint64_t v3 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return v2;
}

uint64_t AsyncBufferedQueue.init(bufferingPolicy:)(uint64_t a1)
{
  uint64_t v2 = specialized AsyncBufferedQueue.init(bufferingPolicy:)(a1);
  uint64_t v3 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return v2;
}

uint64_t closure #1 in AsyncBufferedQueue.init(bufferingPolicy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AsyncStream.Continuation();
  uint64_t v5 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  uint64_t v8 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, a1, v4);
  Swift::String v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56);
  return v6(a2, 0, 1, v4);
}

uint64_t AsyncBufferedQueue.enqueue(_:)(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *))(v1 + 16))((char *)&v4 - v2);
  type metadata accessor for AsyncStream.Continuation();
  return AsyncStream.Continuation.yield(_:)();
}

Swift::Void __swiftcall AsyncBufferedQueue.finish()()
{
}

uint64_t AsyncBufferedQueue.makeAsyncIterator()()
{
  return AsyncStream.makeAsyncIterator()();
}

uint64_t AsyncBufferedQueue.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AsyncStream.Continuation();
  AsyncStream.Continuation.finish()();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1 + *(void *)(*(void *)v1 + 88), v2);
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 96);
  uint64_t v4 = type metadata accessor for AsyncStream();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v1;
}

uint64_t AsyncBufferedQueue.__deallocating_deinit()
{
  AsyncBufferedQueue.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncBufferedQueue<A>()
{
  AsyncBufferedQueue.makeAsyncIterator()();
  return swift_release();
}

uint64_t specialized AsyncBufferedQueue.init(bufferingPolicy:)(uint64_t a1)
{
  uint64_t v22 = a1;
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  uint64_t v20 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
  uint64_t v3 = *(void *)(v20 - 8);
  ((void (*)(void))MEMORY[0x270FA5388])();
  uint64_t v18 = (char *)&v17 - v4;
  uint64_t v21 = type metadata accessor for AsyncStream();
  uint64_t v19 = *(void *)(v21 - 8);
  ((void (*)(void))MEMORY[0x270FA5388])();
  Swift::String v6 = (char *)&v17 - v5;
  uint64_t v7 = type metadata accessor for AsyncStream.Continuation();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v17 - v13;
  uint64_t v15 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))((char *)&v17 - v13, 1, 1, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v18, v22, v20);
  uint64_t v23 = v2;
  v24 = v14;
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v1 + *(void *)(*(void *)v1 + 96), v6, v21);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v7);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v1 + *(void *)(*(void *)v1 + 88), v12, v7);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    return v1;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  char *v20;

  uint64_t v19 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation.BufferingPolicy);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>);
  Swift::String v6 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v18 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation);
  char v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v19, v2);
  uint64_t v20 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Participant>);
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v1 + *(void *)(*(void *)v1 + 96), v8, v18);
  outlined init with copy of TaskPriority?((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation?);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v19, v2);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v1 + *(void *)(*(void *)v1 + 88), v12, v15);
    outlined destroy of TaskPriority?((uint64_t)v14, &demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation?);
    return v1;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  char *v20;

  uint64_t v19 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation.BufferingPolicy);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>);
  Swift::String v6 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v18 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation);
  char v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v19, v2);
  uint64_t v20 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v1 + *(void *)(*(void *)v1 + 96), v8, v18);
  outlined init with copy of TaskPriority?((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation?);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v19, v2);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v1 + *(void *)(*(void *)v1 + 88), v12, v15);
    outlined destroy of TaskPriority?((uint64_t)v14, &demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation?);
    return v1;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;

  uint64_t v22 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation.BufferingPolicy);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>);
  Swift::String v6 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v19 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation);
  char v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v20 = v2;
  v17(v5, v22, v2);
  uint64_t v23 = v14;
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v1 + *(void *)(*(void *)v1 + 96), v8, v21);
  outlined init with copy of TaskPriority?((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation?);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v22, v20);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v1 + *(void *)(*(void *)v1 + 88), v12, v15);
    outlined destroy of TaskPriority?((uint64_t)v14, &demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation?);
    return v1;
  }
  return result;
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncBufferedQueue<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata instantiation function for AsyncBufferedQueue()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t type metadata completion function for AsyncBufferedQueue()
{
  uint64_t result = type metadata accessor for AsyncStream.Continuation();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AsyncStream();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for AsyncBufferedQueue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for AsyncBufferedQueue(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AsyncBufferedQueue);
}

uint64_t dispatch thunk of AsyncBufferedQueue.__allocating_init(bufferingPolicy:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t partial apply for closure #1 in AsyncBufferedQueue.init(bufferingPolicy:)(uint64_t a1)
{
  return closure #1 in AsyncBufferedQueue.init(bufferingPolicy:)(a1, *(void *)(v1 + 24));
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for os_unfair_lock_s()
{
  if (!lazy cache variable for type metadata for os_unfair_lock_s)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for os_unfair_lock_s);
    }
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CKShareCollaborationActivity.CodingKeys()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CKShareCollaborationActivity.CodingKeys()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CKShareCollaborationActivity.CodingKeys()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CKShareCollaborationActivity.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CKShareCollaborationActivity.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CKShareCollaborationActivity.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CKShareCollaborationActivity.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance CKShareCollaborationActivity.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CKShareCollaborationActivity.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CKShareCollaborationActivity.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CKShareCollaborationActivity@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CKShareCollaborationActivity.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CKShareCollaborationActivity(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CKShareCollaborationActivity.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t protocol witness for static GroupActivity.activityIdentifier.getter in conformance CKShareCollaborationActivity()
{
  return 0xD000000000000036;
}

uint64_t protocol witness for GroupActivity.metadata.getter in conformance CKShareCollaborationActivity()
{
  type metadata accessor for GroupActivityMetadata.ActivityType();
  swift_task_alloc();
  GroupActivityMetadata.init()();
  static GroupActivityMetadata.ActivityType.collaboration.getter();
  GroupActivityMetadata.type.setter();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return protocol witness for GroupActivity.metadata.getter in conformance CKShareCollaborationActivity(v1);
}

uint64_t protocol witness for static GroupActivity._identifiable(by:) in conformance CKShareCollaborationActivity()
{
  return MEMORY[0x270EF2FE0]();
}

uint64_t protocol witness for Identifiable.id.getter in conformance CKShareCollaborationActivity@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CKShareCollaborationActivity()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void *initializeBufferWithCopyOfBuffer for CKShareCollaborationActivity(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for CKShareCollaborationActivity()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for CKShareCollaborationActivity(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for CKShareCollaborationActivity(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CKShareCollaborationActivity(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CKShareCollaborationActivity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CKShareCollaborationActivity()
{
  return &type metadata for CKShareCollaborationActivity;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in CKShareCollaborationActivity()
{
  return MEMORY[0x263F8D320];
}

unint64_t lazy protocol witness table accessor for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity()
{
  unint64_t result = lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity;
  if (!lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity;
  if (!lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity;
  if (!lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity;
  if (!lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity);
  }
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Decodable in CKShareCollaborationActivity()
{
  return MEMORY[0x263F8D348];
}

uint64_t associated type witness table accessor for Identifiable.ID : Encodable in CKShareCollaborationActivity()
{
  return MEMORY[0x263F8D318];
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys);
  }
  return result;
}

uint64_t protocol witness for GroupActivity.metadata.getter in conformance CKShareCollaborationActivity(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t getEnumTagSinglePayload for CKShareCollaborationActivity.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for CKShareCollaborationActivity.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x26174DA7CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTag for CKShareCollaborationActivity.CodingKeys()
{
  return 0;
}

void *type metadata accessor for CKShareCollaborationActivity.CodingKeys()
{
  return &unk_270D7EE10;
}

uint64_t specialized CKShareCollaborationActivity.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t specialized CKShareCollaborationActivity.CodingKeys.stringValue.getter()
{
  return 25705;
}

void type metadata completion function for CollaborationConnectionManager()
{
  type metadata accessor for FastSyncStateMachine();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Participant?();
    if (v1 <= 0x3F) {
      swift_initClassMetadata2();
    }
  }
}

uint64_t one-time initialization function for joinLeaveSessionQueue()
{
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v0 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  int v2 = (char *)v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F8F060], v5);
  v10[1] = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  static DispatchQoS.unspecified.getter();
  uint64_t v12 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v0 + 104))(v2, *MEMORY[0x263F8F130], v11);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  joinLeaveSessionQueue = result;
  return result;
}

uint64_t CollaborationConnectionManager.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 136);
  uint64_t v2 = type metadata accessor for FastSyncStateMachine();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  outlined destroy of Participant?(v0 + *(void *)(*(void *)v0 + 160));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t CollaborationConnectionManager.__deallocating_deinit()
{
  CollaborationConnectionManager.deinit();
  return MEMORY[0x270FA2418](v0);
}

uint64_t type metadata accessor for CollaborationConnectionManager()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for Participant?()
{
  if (!lazy cache variable for type metadata for Participant?)
  {
    type metadata accessor for Participant();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Participant?);
    }
  }
}

uint64_t type metadata instantiation function for CollaborationConnectionManager.WeakContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 64);
}

uint64_t initializeBufferWithCopyOfBuffer for CollaborationConnectionManager.WeakContainer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t initializeWithCopy for CollaborationConnectionManager.WeakContainer()
{
  return MEMORY[0x270FA05E0]();
}

uint64_t assignWithCopy for CollaborationConnectionManager.WeakContainer()
{
  return MEMORY[0x270FA05D8]();
}

uint64_t initializeWithTake for CollaborationConnectionManager.WeakContainer()
{
  return MEMORY[0x270FA0608]();
}

uint64_t assignWithTake for CollaborationConnectionManager.WeakContainer()
{
  return MEMORY[0x270FA0600]();
}

uint64_t getEnumTagSinglePayload for CollaborationConnectionManager.WeakContainer(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CollaborationConnectionManager.WeakContainer(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

uint64_t type metadata accessor for CollaborationConnectionManager.WeakContainer()
{
  return swift_getGenericMetadata();
}

uint64_t CollaborationConnectionManager.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance CollaborationConnectionManager<A, B, C>()
{
  return CollaborationConnectionManager.unownedExecutor.getter();
}

uint64_t outlined destroy of Participant?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata instantiation function for FastSyncStateMachine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 40);
}

uint64_t type metadata completion function for FastSyncStateMachine()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FastSyncStateMachine(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64) + 7;
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v8 + ((v7 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  else
  {
    uint64_t v12 = *a2;
    uint64_t v13 = (void *)a2[1];
    unint64_t v14 = a2[2];
    outlined copy of FastSyncStateMachine<A, B>.State<A, B>(*a2, v13, v14);
    *a1 = v12;
    a1[1] = (uint64_t)v13;
    a1[2] = v14;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)a1 + v7 + 24) & ~v7, ((unint64_t)a2 + v7 + 24) & ~v7, v5);
    uint64_t v15 = (void *)((v8 + (((unint64_t)a2 + v7 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = v15[1];
    uint64_t v17 = (void *)((v8 + (((unint64_t)a1 + v7 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v17 = *v15;
    v17[1] = v16;
  }
  swift_retain();
  return a1;
}

void outlined copy of FastSyncStateMachine<A, B>.State<A, B>(uint64_t a1, void *a2, unint64_t a3)
{
  switch(a3 >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
      swift_unknownObjectRetain();
      goto LABEL_4;
    case 3uLL:
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
LABEL_4:
      swift_retain();
      break;
    case 4uLL:
      swift_unknownObjectRetain();
      id v4 = a2;
      break;
    default:
      return;
  }
}

uint64_t destroy for FastSyncStateMachine(uint64_t a1, uint64_t a2)
{
  outlined consume of FastSyncStateMachine<A, B>.State<A, B>(*(void *)a1, *(void **)(a1 + 8), *(void *)(a1 + 16));
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
  return swift_release();
}

void outlined consume of FastSyncStateMachine<A, B>.State<A, B>(uint64_t a1, void *a2, unint64_t a3)
{
  switch(a3 >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
      swift_unknownObjectRelease();
      goto LABEL_4;
    case 3uLL:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
LABEL_4:
      swift_release();
      break;
    case 4uLL:
      swift_unknownObjectRelease();

      break;
    default:
      return;
  }
}

uint64_t *initializeWithCopy for FastSyncStateMachine(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = (void *)a2[1];
  unint64_t v8 = a2[2];
  outlined copy of FastSyncStateMachine<A, B>.State<A, B>(*a2, v7, v8);
  *a1 = v6;
  a1[1] = (uint64_t)v7;
  a1[2] = v8;
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ((unint64_t)a1 + v11 + 24) & ~v11;
  uint64_t v13 = ((unint64_t)a2 + v11 + 24) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v12, v13);
  uint64_t v14 = *(void *)(v10 + 48) + 7;
  uint64_t v15 = (void *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for FastSyncStateMachine(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = (void *)a2[1];
  unint64_t v8 = a2[2];
  outlined copy of FastSyncStateMachine<A, B>.State<A, B>(*a2, v7, v8);
  uint64_t v9 = *a1;
  uint64_t v10 = (void *)a1[1];
  unint64_t v11 = a1[2];
  *a1 = v6;
  a1[1] = (uint64_t)v7;
  a1[2] = v8;
  outlined consume of FastSyncStateMachine<A, B>.State<A, B>(v9, v10, v11);
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v13 = v12 + 24;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = ((unint64_t)a1 + v14 + 24) & ~v14;
  uint64_t v16 = ((unint64_t)a2 + v14 + 24) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v15, v16);
  uint64_t v17 = *(void *)(v13 + 40) + 7;
  uint64_t v18 = (void *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)((v17 + v16) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for FastSyncStateMachine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 24 + a1) & ~v6;
  uint64_t v8 = (v6 + 24 + a2) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + v7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + v8) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t *assignWithTake for FastSyncStateMachine(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *a1;
  uint64_t v8 = (void *)a1[1];
  unint64_t v9 = a1[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v6;
  outlined consume of FastSyncStateMachine<A, B>.State<A, B>(v7, v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = ((unint64_t)a1 + v12 + 24) & ~v12;
  uint64_t v14 = (v12 + 24 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v13, v14);
  *(_OWORD *)((*(void *)(v11 + 24) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v11 + 24)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FastSyncStateMachine(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7;
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + ((v6 + 24) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v10 = a2 - v7;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x26174ED14);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_22:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v7 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  uint64_t v18 = ((unint64_t)a1 + v6 + 24) & ~v6;
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v18);
  }
  unint64_t v19 = *(void *)((v8 + v18) & 0xFFFFFFFFFFFFFFF8);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  return (v19 + 1);
}

void storeEnumTagSinglePayload for FastSyncStateMachine(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7;
  unint64_t v11 = ((v10 + ((v9 + 24) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v15 = 0;
    int v16 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            unint64_t v19 = (unint64_t)&a1[v9 + 24] & ~v9;
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v21 = (void *)((v10 + v19) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v22 = a2 ^ 0x80000000;
                v21[1] = 0;
              }
              else
              {
                uint64_t v22 = a2 - 1;
              }
              *uint64_t v21 = v22;
            }
            else
            {
              uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = a3 - v8;
    if (((v10 + ((v9 + 24) & ~v9)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    int v16 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((v10 + ((v9 + 24) & ~v9)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v17 = v16;
  }
  else {
    int v17 = 1;
  }
  if (((v10 + ((v9 + 24) & ~v9)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v18 = ~v8 + a2;
    bzero(a1, ((v10 + ((v9 + 24) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v11] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v17;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x26174EF2CLL);
    case 4:
      *(_DWORD *)&a1[v11] = v17;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for FastSyncStateMachine()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t FastSyncStateMachine.State.description.getter(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t result = 1701602409;
  switch(a3 >> 61)
  {
    case 1uLL:
    case 2uLL:
      swift_unknownObjectRetain();
      uint64_t v5 = 0x28746E6573657270;
      unint64_t v6 = 0xE800000000000000;
      goto LABEL_4;
    case 3uLL:
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      _StringGuts.grow(_:)(63);
      v8._object = (void *)0x8000000261797960;
      v8._countAndFlagsBits = 0xD00000000000002ALL;
      String.append(_:)(v8);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v9._countAndFlagsBits = 0x7473202020200A3BLL;
      v9._object = (void *)0xEF20676E69747261;
      String.append(_:)(v9);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v10._countAndFlagsBits = 10506;
      v10._object = (void *)0xE200000000000000;
      String.append(_:)(v10);
      swift_unknownObjectRelease();
      goto LABEL_7;
    case 4uLL:
      swift_unknownObjectRetain();
      id v11 = a2;
      _StringGuts.grow(_:)(27);
      v12._countAndFlagsBits = 0x46676E696E696F6ALL;
      v12._object = (void *)0xEE002864656C6961;
      String.append(_:)(v12);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v13._countAndFlagsBits = 0x3A726F727265202CLL;
      v13._object = (void *)0xE800000000000000;
      String.append(_:)(v13);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      _print_unlocked<A, B>(_:_:)();
      v14._countAndFlagsBits = 41;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);

      goto LABEL_7;
    case 5uLL:
      return result;
    default:
      swift_unknownObjectRetain();
      uint64_t v5 = 0x676E697472617473;
      unint64_t v6 = 0xE900000000000028;
LABEL_4:
      String.append(_:)(*(Swift::String *)&v5);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v7._countAndFlagsBits = 41;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
LABEL_7:
      swift_unknownObjectRelease();
      return 0;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FastSyncStateMachine<A, B>.State()
{
  return FastSyncStateMachine.State.description.getter(*(void *)v0, *(void **)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t type metadata instantiation function for FastSyncStateMachine.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

void destroy for FastSyncStateMachine.State(uint64_t a1)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for FastSyncStateMachine.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (void *)a2[1];
  unint64_t v5 = a2[2];
  outlined copy of FastSyncStateMachine<A, B>.State<A, B>(*a2, v4, v5);
  *a1 = v3;
  a1[1] = (uint64_t)v4;
  a1[2] = v5;
  return a1;
}

uint64_t *assignWithCopy for FastSyncStateMachine.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (void *)a2[1];
  unint64_t v5 = a2[2];
  outlined copy of FastSyncStateMachine<A, B>.State<A, B>(*a2, v4, v5);
  uint64_t v6 = *a1;
  Swift::String v7 = (void *)a1[1];
  unint64_t v8 = a1[2];
  *a1 = v3;
  a1[1] = (uint64_t)v4;
  a1[2] = v5;
  outlined consume of FastSyncStateMachine<A, B>.State<A, B>(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for FastSyncStateMachine.State(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *a1;
  uint64_t v6 = (void *)a1[1];
  unint64_t v5 = a1[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  outlined consume of FastSyncStateMachine<A, B>.State<A, B>(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for FastSyncStateMachine.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7B && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 123);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 57) >> 4) | (8
                                                           * ((*(void *)(a1 + 16) >> 57) & 8 | *(void *)(a1 + 16) & 7))) ^ 0x7F;
  if (v3 >= 0x7A) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for FastSyncStateMachine.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7A)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 123;
    if (a3 >= 0x7B) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7B) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for FastSyncStateMachine.State(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16) >> 61;
  if (v1 <= 4) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t destructiveProjectEnumData for FastSyncStateMachine.State(uint64_t result)
{
  *(void *)(result + 16) &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for FastSyncStateMachine.State(uint64_t result, uint64_t a2)
{
  if (a2 < 5)
  {
    *(void *)(result + 16) = *(void *)(result + 16) & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  }
  else
  {
    *(void *)__n128 result = (a2 - 5);
    *(_OWORD *)(result + 8) = xmmword_261796A00;
  }
  return result;
}

uint64_t type metadata accessor for FastSyncStateMachine.State()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for GroupSessionMessengerController()
{
  return swift_initClassMetadata2();
}

uint64_t GroupSessionMessengerController.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t GroupSessionMessengerController.__deallocating_deinit()
{
  GroupSessionMessengerController.deinit();
  return MEMORY[0x270FA2418](v0);
}

uint64_t type metadata accessor for GroupSessionMessengerController()
{
  return swift_getGenericMetadata();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[v9 + 4];
  if (a1 + 32 < v10 + 8 * v8 && v10 < a1 + 32 + 8 * v8) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<(), Never>);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, ParticipantHandleMap.ParticipantKind));
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  id v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  BOOL v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance ParticipantHandleMap.Errors()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance ParticipantHandleMap.Errors()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance ParticipantHandleMap.Errors()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance ParticipantHandleMap.Errors()
{
  return MEMORY[0x270F9FB30]();
}

void ParticipantHandleMap.ParticipantKind.hash(into:)(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    CKShareParticipant.participantIdentifier.getter();
    if (v2)
    {
      Hasher._combine(_:)(1u);
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
  }
  else
  {
    String.hash(into:)();
  }
}

Swift::Int ParticipantHandleMap.ParticipantKind.hashValue.getter(void *a1)
{
  Hasher.init(_seed:)();
  if (a1)
  {
    id v2 = a1;
    CKShareParticipant.participantIdentifier.getter();
    if (v3)
    {
      Hasher._combine(_:)(1u);
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
  }
  else
  {
    String.hash(into:)();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ParticipantHandleMap.ParticipantKind()
{
  return ParticipantHandleMap.ParticipantKind.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ParticipantHandleMap.ParticipantKind(uint64_t a1)
{
  ParticipantHandleMap.ParticipantKind.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParticipantHandleMap.ParticipantKind()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
  {
    id v2 = v1;
    CKShareParticipant.participantIdentifier.getter();
    if (v3)
    {
      Hasher._combine(_:)(1u);
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
  }
  else
  {
    String.hash(into:)();
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ParticipantHandleMap.ParticipantKind(void **a1, void **a2)
{
  return specialized static ParticipantHandleMap.ParticipantKind.== infix(_:_:)(*a1, *a2);
}

uint64_t CKShareParticipant.handles.getter()
{
  id v1 = objc_msgSend(v0, sel_userIdentity);
  id v2 = objc_msgSend(v1, sel_lookupInfo);

  uint64_t result = MEMORY[0x263F8EE88];
  if (v2)
  {
    uint64_t v29 = MEMORY[0x263F8EE88];
    id v4 = objc_msgSend(v2, sel_emailAddress);
    if (v4)
    {
      int64_t v5 = v4;
      id v6 = objc_msgSend(self, sel_normalizedEmailAddressHandleForValue_, v4);

      if (v6)
      {
        id v7 = objc_msgSend(v6, sel_normalizedValue);
        if (v7)
        {
          unint64_t v8 = v7;
          Swift::Int v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          Swift::Int v11 = v10;

          specialized Set._Variant.insert(_:)(&v28, v9, v11);
          swift_bridgeObjectRelease();
        }
        id v12 = objc_msgSend(v6, sel_value);
        Swift::Int v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v15 = v14;

        specialized Set._Variant.insert(_:)(&v28, v13, v15);
        swift_bridgeObjectRelease();
      }
    }
    id v16 = objc_msgSend(v2, sel_phoneNumber);
    if (v16
      && (int v17 = v16,
          id v18 = objc_msgSend(self, sel_normalizedPhoneNumberHandleForValue_isoCountryCode_, v16, 0),
          v17,
          v18))
    {
      id v19 = objc_msgSend(v18, sel_normalizedValue);
      if (v19)
      {
        uint64_t v20 = v19;
        Swift::Int v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v23 = v22;

        specialized Set._Variant.insert(_:)(&v28, v21, v23);
        swift_bridgeObjectRelease();
      }
      id v24 = objc_msgSend(v18, sel_value);
      Swift::Int v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v27 = v26;

      specialized Set._Variant.insert(_:)(&v28, v25, v27);
      swift_bridgeObjectRelease();
    }
    else
    {
    }
    return v29;
  }
  return result;
}

uint64_t ParticipantHandleMap.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return MEMORY[0x270FA2418](v0);
}

uint64_t type metadata accessor for ParticipantHandleMap()
{
  return self;
}

void **initializeBufferWithCopyOfBuffer for ParticipantHandleMap.ParticipantKind(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void destroy for ParticipantHandleMap.ParticipantKind(id *a1)
{
}

void **assignWithCopy for ParticipantHandleMap.ParticipantKind(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  id v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void **assignWithTake for ParticipantHandleMap.ParticipantKind(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for ParticipantHandleMap.ParticipantKind(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ParticipantHandleMap.ParticipantKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ParticipantHandleMap.ParticipantKind(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for ParticipantHandleMap.ParticipantKind(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ParticipantHandleMap.ParticipantKind()
{
  return &type metadata for ParticipantHandleMap.ParticipantKind;
}

unint64_t lazy protocol witness table accessor for type ParticipantHandleMap.ParticipantKind and conformance ParticipantHandleMap.ParticipantKind()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticipantHandleMap.ParticipantKind and conformance ParticipantHandleMap.ParticipantKind;
  if (!lazy protocol witness table cache variable for type ParticipantHandleMap.ParticipantKind and conformance ParticipantHandleMap.ParticipantKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantHandleMap.ParticipantKind and conformance ParticipantHandleMap.ParticipantKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticipantHandleMap.ParticipantKind and conformance ParticipantHandleMap.ParticipantKind;
  if (!lazy protocol witness table cache variable for type ParticipantHandleMap.ParticipantKind and conformance ParticipantHandleMap.ParticipantKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantHandleMap.ParticipantKind and conformance ParticipantHandleMap.ParticipantKind);
  }
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(void *a1, char a2, void *a3)
{
  uint64_t v3 = a1[2];
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  unint64_t v8 = (void *)a1[6];
  swift_bridgeObjectRetain();
  Swift::Int v9 = (void *)*a3;
  id v10 = v8;
  swift_bridgeObjectRetain();
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  uint64_t v13 = v9[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14)) {
    goto LABEL_23;
  }
  char v16 = v11;
  if (v9[3] >= v15)
  {
    if (a2)
    {
      if (v11) {
        goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v16) {
        goto LABEL_10;
      }
    }
LABEL_13:
    Swift::Int v21 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    Swift::Int v22 = (uint64_t *)(v21[6] + 16 * v12);
    *Swift::Int v22 = v7;
    v22[1] = v6;
    *(void *)(v21[7] + 8 * v12) = v8;
    uint64_t v23 = v21[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    uint64_t v26 = v3 - 1;
    if (v3 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    Swift::Int v27 = (id *)(a1 + 9);
    while (1)
    {
      uint64_t v29 = (uint64_t)*(v27 - 2);
      uint64_t v28 = (uint64_t)*(v27 - 1);
      id v30 = *v27;
      v31 = (void *)*a3;
      id v10 = *v27;
      swift_bridgeObjectRetain();
      unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
      uint64_t v34 = v31[2];
      BOOL v35 = (v33 & 1) == 0;
      BOOL v24 = __OFADD__(v34, v35);
      uint64_t v36 = v34 + v35;
      if (v24) {
        break;
      }
      char v37 = v33;
      if (v31[3] < v36)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, 1);
        unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
        if ((v37 & 1) != (v38 & 1)) {
          goto LABEL_25;
        }
      }
      if (v37) {
        goto LABEL_10;
      }
      v39 = (void *)*a3;
      *(void *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = (uint64_t *)(v39[6] + 16 * v32);
      uint64_t *v40 = v29;
      v40[1] = v28;
      *(void *)(v39[7] + 8 * v32) = v30;
      uint64_t v41 = v39[2];
      BOOL v24 = __OFADD__(v41, 1);
      uint64_t v42 = v41 + 1;
      if (v24) {
        goto LABEL_24;
      }
      v27 += 3;
      v39[2] = v42;
      if (!--v26) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v16 & 1) == (v18 & 1))
  {
    unint64_t v12 = v17;
    if ((v16 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    id v19 = (void *)swift_allocError();
    swift_willThrow();
    id v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v43._object = (void *)0x8000000261797A60;
  v43._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)();
  v44._countAndFlagsBits = 39;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  char v37;
  char v38;
  void *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;

  if (!a1[2])
  {
    swift_bridgeObjectRelease();
    return;
  }
  v45 = a1[2];
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  unint64_t v8 = (void *)a1[6];
  swift_bridgeObjectRetain();
  Swift::Int v9 = (void *)*a3;
  swift_bridgeObjectRetain();
  id v10 = v8;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  uint64_t v13 = v9[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14)) {
    goto LABEL_23;
  }
  char v16 = v11;
  if (v9[3] >= v15)
  {
    if (a2)
    {
      if (v11) {
        goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v16) {
        goto LABEL_10;
      }
    }
LABEL_13:
    Swift::Int v21 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    Swift::Int v22 = (uint64_t *)(v21[6] + 16 * v12);
    *Swift::Int v22 = v7;
    v22[1] = v6;
    *(void *)(v21[7] + 8 * v12) = v10;
    uint64_t v23 = v21[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    uint64_t v26 = v45 - 1;
    if (v45 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    Swift::Int v27 = (void **)(a1 + 9);
    while (1)
    {
      uint64_t v29 = (uint64_t)*(v27 - 2);
      uint64_t v28 = (uint64_t)*(v27 - 1);
      id v30 = *v27;
      v31 = (void *)*a3;
      swift_bridgeObjectRetain();
      id v10 = v30;
      unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
      uint64_t v34 = v31[2];
      BOOL v35 = (v33 & 1) == 0;
      BOOL v24 = __OFADD__(v34, v35);
      uint64_t v36 = v34 + v35;
      if (v24) {
        break;
      }
      char v37 = v33;
      if (v31[3] < v36)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, 1);
        unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
        if ((v37 & 1) != (v38 & 1)) {
          goto LABEL_25;
        }
      }
      if (v37) {
        goto LABEL_10;
      }
      v39 = (void *)*a3;
      *(void *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = (uint64_t *)(v39[6] + 16 * v32);
      uint64_t *v40 = v29;
      v40[1] = v28;
      *(void *)(v39[7] + 8 * v32) = v10;
      uint64_t v41 = v39[2];
      BOOL v24 = __OFADD__(v41, 1);
      uint64_t v42 = v41 + 1;
      if (v24) {
        goto LABEL_24;
      }
      v39[2] = v42;
      v27 += 3;
      if (!--v26) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v16 & 1) == (v18 & 1))
  {
    unint64_t v12 = v17;
    if ((v16 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    id v19 = (void *)swift_allocError();
    swift_willThrow();
    id v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v43._object = (void *)0x8000000261797A60;
  v43._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)();
  v44._countAndFlagsBits = 39;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  Swift::Int v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t specialized static ParticipantHandleMap.ParticipantKind.== infix(_:_:)(void *a1, void *a2)
{
  if (a1)
  {
    id v4 = a1;
    CKShareParticipant.participantIdentifier.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRelease();

    if (!v6 || !a2) {
      return 0;
    }
  }
  else if (!a2)
  {
    return 1;
  }
  id v7 = a2;
  CKShareParticipant.participantIdentifier.getter();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();

  if (v9 && a1)
  {
    id v10 = a1;
    id v11 = v7;
    id v12 = CKShareParticipant.participantIdentifier.getter();
    uint64_t v14 = v13;
    id v15 = CKShareParticipant.participantIdentifier.getter();
    uint64_t v17 = v16;
    if (v14)
    {
      if (v16)
      {
        if (v12 == v15 && v14 == v16)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return 1;
        }
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        if (v18) {
          return 1;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {

      if (!v17) {
        return 1;
      }
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

uint64_t specialized static ParticipantHandleMap.handlesToParticipantKindsForShare(_:)(void *a1)
{
  uint64_t v1 = (uint64_t)a1;
  id v2 = objc_msgSend(a1, sel_currentUserParticipant);
  if (v2)
  {

    uint64_t v1 = (uint64_t)objc_msgSend((id)v1, sel_participants);
    type metadata accessor for CKShareParticipant();
    unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v65 = MEMORY[0x263F8EE78];
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (v4) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v4)
      {
LABEL_4:
        if (v4 < 1)
        {
          __break(1u);
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
        for (uint64_t i = 0; i != v4; ++i)
        {
          if ((v3 & 0xC000000000000001) != 0) {
            id v6 = (id)MEMORY[0x263E3F5A0](i, v3);
          }
          else {
            id v6 = *(id *)(v3 + 8 * i + 32);
          }
          id v7 = v6;
          if (objc_msgSend(v6, sel_acceptanceStatus) == (id)2
            && (id v8 = objc_msgSend(v7, sel_userIdentity),
                id v9 = objc_msgSend(v8, sel_userRecordID),
                v8,
                v9))
          {

            MEMORY[0x263E3F1C0]();
            if (*(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          else
          {
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v10 = v65;
LABEL_24:
        swift_bridgeObjectRelease();
        if (v10 >> 62) {
          goto LABEL_54;
        }
        uint64_t v1 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        while (v1)
        {
          uint64_t v65 = MEMORY[0x263F8EE78];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1 & ~(v1 >> 63), 0);
          if (v1 < 0) {
            goto LABEL_66;
          }
          uint64_t v23 = 0;
          uint64_t v55 = v1;
          unint64_t v56 = v10 & 0xC000000000000001;
          uint64_t v24 = v65;
          unint64_t v53 = v10 + 32;
          unint64_t v54 = v10;
          while (v23 != v1)
          {
            if (v56) {
              id v25 = (id)MEMORY[0x263E3F5A0](v23, v10);
            }
            else {
              id v25 = *(id *)(v53 + 8 * v23);
            }
            uint64_t v26 = v25;
            uint64_t v58 = v23;
            uint64_t v59 = v24;
            if (objc_msgSend(v25, sel_isCurrentUser))
            {
              Swift::Int v27 = 0;
            }
            else
            {
              id v28 = v26;
              Swift::Int v27 = v26;
            }
            uint64_t v29 = CKShareParticipant.handles.getter();
            int64_t v30 = *(void *)(v29 + 16);
            if (v30)
            {
              v57 = v26;
              uint64_t v64 = MEMORY[0x263F8EE78];
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30, 0);
              uint64_t v31 = v64;
              int64_t v32 = specialized Set.startIndex.getter(v29);
              int v34 = v33;
              char v36 = v35 & 1;
              while ((v32 & 0x8000000000000000) == 0 && v32 < 1 << *(unsigned char *)(v29 + 32))
              {
                if (((*(void *)(v29 + 56 + (((unint64_t)v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v32) & 1) == 0) {
                  goto LABEL_51;
                }
                if (*(_DWORD *)(v29 + 36) != v34) {
                  goto LABEL_52;
                }
                char v62 = v36;
                char v37 = (uint64_t *)(*(void *)(v29 + 48) + 16 * v32);
                uint64_t v38 = v37[1];
                uint64_t v61 = *v37;
                unint64_t v10 = (unint64_t)v27;
                unint64_t v39 = *(void *)(v64 + 16);
                unint64_t v40 = *(void *)(v64 + 24);
                int64_t v63 = v39 + 1;
                swift_bridgeObjectRetain();
                id v60 = (id)v10;
                if (v39 >= v40 >> 1) {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v63, 1);
                }
                *(void *)(v64 + 16) = v63;
                uint64_t v41 = (void *)(v64 + 24 * v39);
                v41[4] = v61;
                v41[5] = v38;
                v41[6] = v10;
                int64_t v42 = specialized _NativeSet.index(after:)(v32, v34, v62 & 1, v29);
                int64_t v32 = v42;
                int v34 = v43;
                char v36 = v44 & 1;
                --v30;
                Swift::Int v27 = (void *)v10;
                if (!v30)
                {
                  outlined consume of Set<String>.Index._Variant(v42, v43, v36);

                  swift_bridgeObjectRelease();
                  unint64_t v10 = v54;
                  goto LABEL_46;
                }
              }
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
              break;
            }

            swift_bridgeObjectRelease();
            uint64_t v31 = MEMORY[0x263F8EE78];
LABEL_46:
            uint64_t v24 = v59;
            uint64_t v65 = v59;
            unint64_t v46 = *(void *)(v59 + 16);
            unint64_t v45 = *(void *)(v59 + 24);
            if (v46 >= v45 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
              uint64_t v24 = v65;
            }
            uint64_t v23 = v58 + 1;
            *(void *)(v24 + 16) = v46 + 1;
            *(void *)(v24 + 8 * v46 + 32) = v31;
            uint64_t v1 = v55;
            if (v58 + 1 == v55)
            {
              swift_bridgeObjectRelease();
              goto LABEL_56;
            }
          }
          __break(1u);
LABEL_54:
          swift_bridgeObjectRetain();
          uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v24 = MEMORY[0x263F8EE78];
LABEL_56:
        uint64_t v65 = MEMORY[0x263F8EE78];
        uint64_t v47 = *(void *)(v24 + 16);
        if (v47)
        {
          swift_bridgeObjectRetain();
          for (uint64_t j = 0; j != v47; ++j)
          {
            uint64_t v49 = swift_bridgeObjectRetain();
            specialized Array.append<A>(contentsOf:)(v49);
          }
          swift_bridgeObjectRelease_n();
          if (*(void *)(v65 + 16)) {
            goto LABEL_60;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          if (*(void *)(MEMORY[0x263F8EE78] + 16))
          {
LABEL_60:
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ParticipantHandleMap.ParticipantKind>);
            uint64_t v50 = static _DictionaryStorage.allocate(capacity:)();
            goto LABEL_63;
          }
        }
        uint64_t v50 = MEMORY[0x263F8EE80];
LABEL_63:
        uint64_t v65 = v50;
        v51 = (void *)swift_bridgeObjectRetain();
        specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v51, 1, &v65);
        if (v52)
        {
          uint64_t result = swift_unexpectedError();
          __break(1u);
        }
        else
        {
          swift_bridgeObjectRelease();
          return v65;
        }
        return result;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v10 = MEMORY[0x263F8EE78];
    goto LABEL_24;
  }
  if (one-time initialization token for tabGroup != -1) {
LABEL_67:
  }
    swift_once();
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.tabGroup);
  id v12 = (id)v1;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    id v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v65 = v16;
    *(_DWORD *)id v15 = 136315138;
    id v17 = objc_msgSend(v12, sel_recordID);
    id v18 = objc_msgSend(v17, sel_ckShortDescription);

    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v20;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_261746000, v13, v14, "Share %s does not have a currentUserParticipant", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v16, -1, -1);
    MEMORY[0x263E3FE70](v15, -1, -1);
  }
  else
  {
  }
  lazy protocol witness table accessor for type ParticipantHandleMap.Errors and conformance ParticipantHandleMap.Errors();
  swift_allocError();
  return swift_willThrow();
}

unint64_t lazy protocol witness table accessor for type ParticipantHandleMap.Errors and conformance ParticipantHandleMap.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticipantHandleMap.Errors and conformance ParticipantHandleMap.Errors;
  if (!lazy protocol witness table cache variable for type ParticipantHandleMap.Errors and conformance ParticipantHandleMap.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantHandleMap.Errors and conformance ParticipantHandleMap.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticipantHandleMap.Errors and conformance ParticipantHandleMap.Errors;
  if (!lazy protocol witness table cache variable for type ParticipantHandleMap.Errors and conformance ParticipantHandleMap.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantHandleMap.Errors and conformance ParticipantHandleMap.Errors);
  }
  return result;
}

uint64_t outlined consume of Set<String>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ParticipantHandleMap.Errors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x261750E5CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticipantHandleMap.Errors()
{
  return &type metadata for ParticipantHandleMap.Errors;
}

uint64_t specialized closure #1 in AsyncBufferedQueue.init(bufferingPolicy:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  outlined destroy of TaskPriority?(a2, a3);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v10 = *(void *)(v7 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a2, a1, v7);
  id v8 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56);
  return v8(a2, 0, 1, v7);
}

uint64_t specialized CollaborationConnectionManager.currentGroupSessionProvider.getter()
{
  swift_beginAccess();
  uint64_t v1 = v0[14];
  id v2 = (void *)v0[15];
  unint64_t v3 = v0[16];
  uint64_t result = 0;
  switch(v3 >> 61)
  {
    case 3uLL:
      swift_bridgeObjectRetain();
      swift_retain();
      outlined copy of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(v1, v2, v3);
      swift_retain();
      swift_retain();
      swift_release();
      outlined consume of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(v1, v2, v3);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t result = (uint64_t)v2;
      break;
    case 4uLL:
      swift_retain();
      id v5 = v2;

      uint64_t result = v1;
      break;
    case 5uLL:
      return result;
    default:
      uint64_t result = swift_retain();
      break;
  }
  return result;
}

uint64_t specialized CollaborationConnectionManager.participantUpdates()(uint64_t (*a1)(BOOL, uint64_t, uint64_t, unint64_t), uint64_t *a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  Swift::Int v22 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation.BufferingPolicy);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (unint64_t *)(v3 + *(void *)(*(void *)v3 + 176));
  swift_beginAccess();
  unint64_t v11 = *v10;
  uint64_t v12 = MEMORY[0x263F8EE78];
  uint64_t v26 = MEMORY[0x263F8EE78];
  uint64_t v13 = *(void *)(v11 + 16);
  swift_bridgeObjectRetain();
  if (v13)
  {
    uint64_t v23 = v7;
    uint64_t v24 = v6;
    id v25 = v9;
    unint64_t v14 = 0;
    uint64_t v15 = v11 + 32;
    while (v14 < *(void *)(v11 + 16))
    {
      outlined init with copy of TaskPriority?(v15, (uint64_t)v28, a2);
      if (swift_weakLoadStrong())
      {
        swift_release();
        outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)v28, (uint64_t)v27, a2);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          a3(0, *(void *)(v12 + 16) + 1, 1);
        }
        uint64_t v12 = v26;
        unint64_t v17 = *(void *)(v26 + 16);
        unint64_t v16 = *(void *)(v26 + 24);
        if (v17 >= v16 >> 1)
        {
          a3(v16 > 1, v17 + 1, 1);
          uint64_t v12 = v26;
        }
        *(void *)(v12 + 16) = v17 + 1;
        outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)v27, v12 + 8 * v17 + 32, a2);
      }
      else
      {
        outlined destroy of TaskPriority?((uint64_t)v28, a2);
      }
      ++v14;
      v15 += 8;
      if (v13 == v14)
      {
        id v9 = v25;
        uint64_t v12 = v26;
        uint64_t v7 = v23;
        uint64_t v6 = v24;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    *uint64_t v10 = v12;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F8F580], v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncBufferedQueue<Set<Participant>>);
    swift_allocObject();
    uint64_t v12 = specialized AsyncBufferedQueue.init(bufferingPolicy:)((uint64_t)v9);
    swift_weakInit();
    swift_beginAccess();
    unint64_t v14 = *v10;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v10 = v14;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_14;
    }
  }
  unint64_t v14 = v22(0, *(void *)(v14 + 16) + 1, 1, v14);
  *uint64_t v10 = v14;
LABEL_14:
  unint64_t v20 = *(void *)(v14 + 16);
  unint64_t v19 = *(void *)(v14 + 24);
  if (v20 >= v19 >> 1)
  {
    unint64_t v14 = v22(v19 > 1, v20 + 1, 1, v14);
    *uint64_t v10 = v14;
  }
  *(void *)(v14 + 16) = v20 + 1;
  outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)v28, v14 + 8 * v20 + 32, a2);
  swift_endAccess();
  return v12;
}

uint64_t specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:)(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation.YieldResult);
  v2[19] = v3;
  v2[20] = *(void *)(v3 - 8);
  v2[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:), v1, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  v2[17] = a1;
  v2[18] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation.YieldResult);
  v2[19] = v3;
  v2[20] = *(void *)(v3 - 8);
  v2[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:), v1, 0);
}

uint64_t specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:)()
{
  uint64_t v30 = v0;
  if (*(void *)(*(void *)(v0 + 144) + 168))
  {
    uint64_t v1 = one-time initialization token for tabGroup;
    swift_retain();
    if (v1 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.tabGroup);
    swift_retain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = *(void *)(v0 + 144);
    if (v5)
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v29 = v28;
      *(_DWORD *)uint64_t v7 = 136446210;
      swift_beginAccess();
      uint64_t v9 = *(void *)(v6 + 136);
      unint64_t v8 = *(void *)(v6 + 144);
      swift_bridgeObjectRetain();
      *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_261746000, v3, v4, "Session is active with message controller for activity %{public}s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v28, -1, -1);
      MEMORY[0x263E3FE70](v7, -1, -1);
    }
    else
    {
      swift_release();
    }

    uint64_t v20 = *(void *)(v0 + 160);
    uint64_t v19 = *(void *)(v0 + 168);
    uint64_t v21 = *(void *)(v0 + 152);
    Swift::Int v22 = *(long long **)(v0 + 136);
    long long v24 = v22[1];
    long long v23 = v22[2];
    long long v25 = *v22;
    *(void *)(v0 + 64) = *((void *)v22 + 6);
    *(_OWORD *)(v0 + 32) = v24;
    *(_OWORD *)(v0 + 48) = v23;
    *(_OWORD *)(v0 + 16) = v25;
    outlined retain of PresenceUpdateMessage((uint64_t *)v22);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation);
    AsyncStream.Continuation.yield(_:)();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    swift_release();
  }
  else
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.tabGroup);
    swift_retain();
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = *(void *)(v0 + 144);
    if (v13)
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v29 = v16;
      *(_DWORD *)uint64_t v15 = 136446210;
      swift_beginAccess();
      uint64_t v17 = *(void *)(v14 + 136);
      unint64_t v18 = *(void *)(v14 + 144);
      swift_bridgeObjectRetain();
      *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_261746000, v11, v12, "Message ignored while there are no active sessions for activity: %{public}s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v16, -1, -1);
      MEMORY[0x263E3FE70](v15, -1, -1);
    }
    else
    {
      swift_release();
    }
  }
  swift_task_dealloc();
  uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26();
}

uint64_t specialized closure #1 in CollaborationConnectionManager.startActivity()(uint64_t a1, char a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  if (a2)
  {
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    v3[5] = v7;
    void *v7 = v3;
    v7[1] = specialized closure #1 in CollaborationConnectionManager.startActivity();
    return specialized CollaborationConnectionManager.leaveGroupSessionProvider(_:)();
  }
  else
  {
    swift_retain();
    BOOL v5 = (void *)swift_task_alloc();
    v3[4] = v5;
    *BOOL v5 = v3;
    v5[1] = specialized closure #1 in CollaborationConnectionManager.startActivity();
    return specialized CollaborationConnectionManager.joinGroupSessionProvider(_:)(a1);
  }
}

{
  void *v3;
  void *v5;
  void *v7;
  uint64_t v8;

  v3[2] = a1;
  v3[3] = a3;
  if (a2)
  {
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    v3[5] = v7;
    void *v7 = v3;
    v7[1] = specialized closure #1 in CollaborationConnectionManager.startActivity();
    return specialized CollaborationConnectionManager.leaveGroupSessionProvider(_:)();
  }
  else
  {
    swift_retain();
    BOOL v5 = (void *)swift_task_alloc();
    v3[4] = v5;
    *BOOL v5 = v3;
    v5[1] = specialized closure #1 in CollaborationConnectionManager.startActivity();
    return specialized CollaborationConnectionManager.joinGroupSessionProvider(_:)(a1);
  }
}

uint64_t specialized closure #1 in CollaborationConnectionManager.startActivity()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #1 in CollaborationConnectionManager.startActivity(), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #1 in CollaborationConnectionManager.startActivity(), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #1 in CollaborationConnectionManager.startActivity(), v1, 0);
}

uint64_t specialized FastSyncStateMachine.startActivity(_:)(uint64_t a1, uint64_t a2)
{
  os_log_type_t v4 = v2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  uint64_t v11 = v2[1];
  unint64_t v12 = v2[2];
  char v13 = 0;
  switch(v12 >> 61)
  {
    case 2uLL:
      uint64_t v19 = (uint64_t (*)(uint64_t *))v2[5];
      swift_retain();
      swift_retain();
      uint64_t v20 = v19(v2 + 3);
      if (v3) {
        goto LABEL_7;
      }
      uint64_t v17 = v20;
      uint64_t v21 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v9, 1, 1, v21);
      Swift::Int v22 = (void *)swift_allocObject();
      v22[2] = 0;
      v22[3] = 0;
      v22[4] = v11;
      v22[5] = a1;
      v22[6] = a2;
      v22[7] = v17;
      swift_retain();
      swift_retain();
      uint64_t v18 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities08PersonalD15SessionProviderCy17WebBookmarksSwift0F26DeviceCoordinationActivityVG_Tgm5Tm((uint64_t)v9, (uint64_t)&async function pointer to partial apply for specialized closure #2 in FastSyncStateMachine.startActivity(_:), (uint64_t)v22, &demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>) | 0x6000000000000000;
      goto LABEL_10;
    case 3uLL:
      uint64_t v23 = v12 & 0x1FFFFFFFFFFFFFFFLL;
      long long v24 = (uint64_t (*)(uint64_t *))v2[5];
      swift_retain();
      swift_retain();
      uint64_t v25 = v24(v2 + 3);
      if (v3)
      {
LABEL_7:
        swift_release();
        swift_release();
      }
      else
      {
        uint64_t v17 = v25;
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>);
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        MEMORY[0x263E3F340](v23, v26, v27, MEMORY[0x263F8E4E0]);
        uint64_t v28 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v9, 1, 1, v28);
        uint64_t v29 = (void *)swift_allocObject();
        v29[2] = 0;
        v29[3] = 0;
        v29[4] = v23;
        v29[5] = a1;
        v29[6] = a2;
        v29[7] = v17;
        swift_retain();
        swift_retain();
        uint64_t v18 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities08PersonalD15SessionProviderCy17WebBookmarksSwift0F26DeviceCoordinationActivityVG_Tgm5Tm((uint64_t)v9, (uint64_t)&async function pointer to partial apply for specialized closure #3 in FastSyncStateMachine.startActivity(_:), (uint64_t)v29, &demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>) | 0x6000000000000000;
        uint64_t v10 = v11;
LABEL_10:
        outlined consume of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(*v4, (void *)v4[1], v4[2]);
        *os_log_type_t v4 = v10;
        v4[1] = v17;
        char v13 = 1;
        v4[2] = v18;
      }
      return v13 & 1;
    case 4uLL:
    case 5uLL:
      uint64_t v14 = ((uint64_t (*)(uint64_t *))v2[5])(v2 + 3);
      if (v3) {
        return v13 & 1;
      }
      uint64_t v10 = v14;
      uint64_t v15 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v9, 1, 1, v15);
      uint64_t v16 = (void *)swift_allocObject();
      v16[2] = 0;
      v16[3] = 0;
      v16[4] = a1;
      v16[5] = a2;
      v16[6] = v10;
      swift_retain();
      swift_retain();
      uint64_t v17 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities08PersonalD15SessionProviderCy17WebBookmarksSwift0F26DeviceCoordinationActivityVG_Tgm5Tm((uint64_t)v9, (uint64_t)&async function pointer to partial apply for specialized closure #1 in FastSyncStateMachine.startActivity(_:), (uint64_t)v16, &demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>);
      uint64_t v18 = 0;
      goto LABEL_10;
    default:
      return v13 & 1;
  }
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t *);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t *);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v31;

  os_log_type_t v4 = v2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  uint64_t v11 = v2[1];
  unint64_t v12 = v2[2];
  char v13 = 0;
  switch(v12 >> 61)
  {
    case 2uLL:
      uint64_t v19 = (uint64_t (*)(uint64_t *))v2[5];
      swift_retain();
      swift_retain();
      uint64_t v20 = v19(v2 + 3);
      if (v3) {
        goto LABEL_7;
      }
      uint64_t v17 = v20;
      uint64_t v21 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v9, 1, 1, v21);
      Swift::Int v22 = (void *)swift_allocObject();
      v22[2] = 0;
      v22[3] = 0;
      v22[4] = v11;
      v22[5] = a1;
      v22[6] = a2;
      v22[7] = v17;
      swift_retain();
      swift_retain();
      uint64_t v18 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities08PersonalD15SessionProviderCy17WebBookmarksSwift0F26DeviceCoordinationActivityVG_Tgm5Tm((uint64_t)v9, (uint64_t)&async function pointer to partial apply for specialized closure #2 in FastSyncStateMachine.startActivity(_:), (uint64_t)v22, &demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>) | 0x6000000000000000;
      goto LABEL_10;
    case 3uLL:
      uint64_t v23 = v12 & 0x1FFFFFFFFFFFFFFFLL;
      long long v24 = (uint64_t (*)(uint64_t *))v2[5];
      swift_retain();
      swift_retain();
      uint64_t v25 = v24(v2 + 3);
      if (v3)
      {
LABEL_7:
        swift_release();
        swift_release();
      }
      else
      {
        uint64_t v17 = v25;
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        MEMORY[0x263E3F340](v23, v26, v27, MEMORY[0x263F8E4E0]);
        uint64_t v28 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v9, 1, 1, v28);
        uint64_t v29 = (void *)swift_allocObject();
        v29[2] = 0;
        v29[3] = 0;
        v29[4] = v23;
        v29[5] = a1;
        v29[6] = a2;
        v29[7] = v17;
        swift_retain();
        swift_retain();
        uint64_t v18 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities08PersonalD15SessionProviderCy17WebBookmarksSwift0F26DeviceCoordinationActivityVG_Tgm5Tm((uint64_t)v9, (uint64_t)&async function pointer to partial apply for specialized closure #3 in FastSyncStateMachine.startActivity(_:), (uint64_t)v29, &demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>) | 0x6000000000000000;
        uint64_t v10 = v11;
LABEL_10:
        outlined consume of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(*v4, (void *)v4[1], v4[2]);
        *os_log_type_t v4 = v10;
        v4[1] = v17;
        char v13 = 1;
        v4[2] = v18;
      }
      return v13 & 1;
    case 4uLL:
    case 5uLL:
      uint64_t v14 = ((uint64_t (*)(uint64_t *))v2[5])(v2 + 3);
      if (v3) {
        return v13 & 1;
      }
      uint64_t v10 = v14;
      uint64_t v15 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v9, 1, 1, v15);
      uint64_t v16 = (void *)swift_allocObject();
      v16[2] = 0;
      v16[3] = 0;
      v16[4] = a1;
      v16[5] = a2;
      v16[6] = v10;
      swift_retain();
      swift_retain();
      uint64_t v17 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities08PersonalD15SessionProviderCy17WebBookmarksSwift0F26DeviceCoordinationActivityVG_Tgm5Tm((uint64_t)v9, (uint64_t)&async function pointer to partial apply for specialized closure #1 in FastSyncStateMachine.startActivity(_:), (uint64_t)v16, &demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
      uint64_t v18 = 0;
      goto LABEL_10;
    default:
      return v13 & 1;
  }
}

uint64_t specialized closure #1 in CollaborationConnectionManager.leaveActivity()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized CollaborationConnectionManager.leaveGroupSessionProvider(_:)();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized CollaborationConnectionManager.leaveGroupSessionProvider(_:)();
}

uint64_t specialized FastSyncStateMachine.leaveActivity(priority:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = *(void *)v3;
  unint64_t v12 = *(void **)(v3 + 8);
  unint64_t v13 = *(void *)(v3 + 16);
  uint64_t result = 0;
  switch(v13 >> 61)
  {
    case 1uLL:
      outlined init with copy of TaskPriority?(a1, (uint64_t)&v21 - v9, &demangling cache variable for type metadata for TaskPriority?);
      uint64_t v15 = (void *)swift_allocObject();
      v15[2] = 0;
      v15[3] = 0;
      v15[4] = v12;
      v15[5] = a2;
      v15[6] = a3;
      v15[7] = v11;
      outlined copy of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(v11, v12, v13);
      swift_retain();
      swift_retain();
      uint64_t v16 = &async function pointer to partial apply for specialized closure #2 in FastSyncStateMachine.leaveActivity(priority:_:);
      goto LABEL_5;
    case 2uLL:
      return result;
    case 3uLL:
      uint64_t v11 = *(void *)(v3 + 8);
      unint64_t v12 = (void *)(v13 & 0x1FFFFFFFFFFFFFFFLL);
      goto LABEL_4;
    case 4uLL:
      outlined consume of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(*(void *)v3, *(void **)(v3 + 8), *(void *)(v3 + 16));
      goto LABEL_7;
    case 5uLL:
LABEL_7:
      uint64_t result = 0;
      *(void *)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      unint64_t v20 = 0xA000000000000000;
      break;
    default:
LABEL_4:
      swift_retain();
      swift_retain();
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>);
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      MEMORY[0x263E3F340](v12, v17, v18, MEMORY[0x263F8E4E0]);
      outlined init with copy of TaskPriority?(a1, (uint64_t)v10, &demangling cache variable for type metadata for TaskPriority?);
      uint64_t v15 = (void *)swift_allocObject();
      v15[2] = 0;
      v15[3] = 0;
      v15[4] = v12;
      v15[5] = a2;
      v15[6] = a3;
      swift_retain();
      uint64_t v16 = &async function pointer to partial apply for specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:);
LABEL_5:
      uint64_t v19 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)v16, (uint64_t)v15);
      outlined consume of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(*(void *)v3, *(void **)(v3 + 8), *(void *)(v3 + 16));
      *(void *)uint64_t v3 = v11;
      *(void *)(v3 + 8) = v19;
      uint64_t result = 1;
      unint64_t v20 = 0x4000000000000000;
      break;
  }
  *(void *)(v3 + 16) = v20;
  return result;
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t result;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = *(void *)v3;
  unint64_t v12 = *(void **)(v3 + 8);
  unint64_t v13 = *(void *)(v3 + 16);
  uint64_t result = 0;
  switch(v13 >> 61)
  {
    case 1uLL:
      outlined init with copy of TaskPriority?(a1, (uint64_t)&v21 - v9, &demangling cache variable for type metadata for TaskPriority?);
      uint64_t v15 = (void *)swift_allocObject();
      v15[2] = 0;
      v15[3] = 0;
      v15[4] = v12;
      v15[5] = a2;
      v15[6] = a3;
      v15[7] = v11;
      outlined copy of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(v11, v12, v13);
      swift_retain();
      swift_retain();
      uint64_t v16 = &async function pointer to partial apply for specialized closure #2 in FastSyncStateMachine.leaveActivity(priority:_:);
      goto LABEL_5;
    case 2uLL:
      return result;
    case 3uLL:
      uint64_t v11 = *(void *)(v3 + 8);
      unint64_t v12 = (void *)(v13 & 0x1FFFFFFFFFFFFFFFLL);
      goto LABEL_4;
    case 4uLL:
      outlined consume of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(*(void *)v3, *(void **)(v3 + 8), *(void *)(v3 + 16));
      goto LABEL_7;
    case 5uLL:
LABEL_7:
      uint64_t result = 0;
      *(void *)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      unint64_t v20 = 0xA000000000000000;
      break;
    default:
LABEL_4:
      swift_retain();
      swift_retain();
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      MEMORY[0x263E3F340](v12, v17, v18, MEMORY[0x263F8E4E0]);
      outlined init with copy of TaskPriority?(a1, (uint64_t)v10, &demangling cache variable for type metadata for TaskPriority?);
      uint64_t v15 = (void *)swift_allocObject();
      v15[2] = 0;
      v15[3] = 0;
      v15[4] = v12;
      v15[5] = a2;
      v15[6] = a3;
      swift_retain();
      uint64_t v16 = &async function pointer to partial apply for specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:);
LABEL_5:
      uint64_t v19 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)v16, (uint64_t)v15);
      outlined consume of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(*(void *)v3, *(void **)(v3 + 8), *(void *)(v3 + 16));
      *(void *)uint64_t v3 = v11;
      *(void *)(v3 + 8) = v19;
      uint64_t result = 1;
      unint64_t v20 = 0x4000000000000000;
      break;
  }
  *(void *)(v3 + 16) = v20;
  return result;
}

uint64_t specialized CollaborationConnectionManager.joinGroupSessionProvider(_:)(uint64_t a1)
{
  v2[21] = a1;
  v2[22] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[23] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.joinGroupSessionProvider(_:), v1, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v2[21] = a1;
  v2[22] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[23] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.joinGroupSessionProvider(_:), v1, 0);
}

uint64_t specialized CollaborationConnectionManager.joinGroupSessionProvider(_:)()
{
  uint64_t v15 = v0;
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[24] = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[22];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v14 = v7;
    *(_DWORD *)uint64_t v6 = 136446210;
    swift_beginAccess();
    uint64_t v8 = *(void *)(v5 + 136);
    unint64_t v9 = *(void *)(v5 + 144);
    swift_bridgeObjectRetain();
    v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_261746000, v2, v3, "Will join groupSessionProvider for activity: %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v7, -1, -1);
    MEMORY[0x263E3FE70](v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  uint64_t v10 = (void *)swift_task_alloc();
  v0[25] = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>);
  uint64_t v12 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity> and conformance PersonalGroupSessionProvider<A>, &demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>);
  *uint64_t v10 = v0;
  v10[1] = specialized CollaborationConnectionManager.joinGroupSessionProvider(_:);
  return MEMORY[0x270EF2E58](v11, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = *(void *)(v2 + 176);
  if (v0) {
    BOOL v4 = specialized CollaborationConnectionManager.joinGroupSessionProvider(_:);
  }
  else {
    BOOL v4 = specialized CollaborationConnectionManager.joinGroupSessionProvider(_:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  void *v18;
  uint64_t v19;

  uint64_t v18 = v0;
  swift_retain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = v0[22];
    BOOL v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v17 = v5;
    *(_DWORD *)BOOL v4 = 136446210;
    swift_beginAccess();
    uint64_t v6 = *(void *)(v3 + 136);
    uint64_t v7 = *(void *)(v3 + 144);
    swift_bridgeObjectRetain();
    v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_261746000, v1, v2, "Did join groupSessionProvider for activity: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v5, -1, -1);
    MEMORY[0x263E3FE70](v4, -1, -1);
  }
  else
  {
    swift_release();
  }

  uint64_t v8 = v0[22];
  unint64_t v9 = v0[23];
  uint64_t v10 = v0[21];
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
  uint64_t v12 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage> and conformance CollaborationConnectionManager<A, B, C>, &demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>);
  unint64_t v13 = (void *)swift_allocObject();
  v13[2] = v8;
  v13[3] = v12;
  v13[4] = v8;
  v13[5] = v10;
  swift_retain_n();
  swift_retain();
  uint64_t v14 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v9, (uint64_t)&async function pointer to partial apply for specialized closure #1 in CollaborationConnectionManager.joinGroupSessionProvider(_:), (uint64_t)v13);
  swift_beginAccess();
  specialized FastSyncStateMachine.didStartActivity(sessionTask:groupSessionProvider:)(v14, v10);
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  uint64_t v15 = v0;
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[24] = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[22];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v14 = v7;
    *(_DWORD *)uint64_t v6 = 136446210;
    swift_beginAccess();
    uint64_t v8 = *(void *)(v5 + 136);
    unint64_t v9 = *(void *)(v5 + 144);
    swift_bridgeObjectRetain();
    v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_261746000, v2, v3, "Will join groupSessionProvider for activity: %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v7, -1, -1);
    MEMORY[0x263E3FE70](v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  uint64_t v10 = (void *)swift_task_alloc();
  v0[25] = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
  uint64_t v12 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>, &demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
  *uint64_t v10 = v0;
  v10[1] = specialized CollaborationConnectionManager.joinGroupSessionProvider(_:);
  return MEMORY[0x270EF2E58](v11, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = *(void *)(v2 + 176);
  if (v0) {
    BOOL v4 = specialized CollaborationConnectionManager.joinGroupSessionProvider(_:);
  }
  else {
    BOOL v4 = specialized CollaborationConnectionManager.joinGroupSessionProvider(_:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  void *v18;
  uint64_t v19;

  uint64_t v18 = v0;
  swift_retain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = v0[22];
    BOOL v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v17 = v5;
    *(_DWORD *)BOOL v4 = 136446210;
    swift_beginAccess();
    uint64_t v6 = *(void *)(v3 + 136);
    uint64_t v7 = *(void *)(v3 + 144);
    swift_bridgeObjectRetain();
    v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_261746000, v1, v2, "Did join groupSessionProvider for activity: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v5, -1, -1);
    MEMORY[0x263E3FE70](v4, -1, -1);
  }
  else
  {
    swift_release();
  }

  uint64_t v8 = v0[22];
  unint64_t v9 = v0[23];
  uint64_t v10 = v0[21];
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
  uint64_t v12 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage> and conformance CollaborationConnectionManager<A, B, C>, &demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>);
  unint64_t v13 = (void *)swift_allocObject();
  v13[2] = v8;
  v13[3] = v12;
  v13[4] = v8;
  v13[5] = v10;
  swift_retain_n();
  swift_retain();
  uint64_t v14 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v9, (uint64_t)&async function pointer to partial apply for specialized closure #1 in CollaborationConnectionManager.joinGroupSessionProvider(_:), (uint64_t)v13);
  swift_beginAccess();
  specialized FastSyncStateMachine.didStartActivity(sessionTask:groupSessionProvider:)(v14, v10);
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  uint64_t v21 = v0;
  uint64_t v1 = (void *)v0[26];
  swift_retain();
  uint64_t v2 = v1;
  swift_retain();
  os_log_type_t v3 = v1;
  BOOL v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (void *)v0[26];
    uint64_t v7 = v0[22];
    uint64_t v8 = swift_slowAlloc();
    unint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    unint64_t v20 = v19;
    *(_DWORD *)uint64_t v8 = 136446466;
    swift_beginAccess();
    uint64_t v11 = *(void *)(v7 + 136);
    uint64_t v10 = *(void *)(v7 + 144);
    swift_bridgeObjectRetain();
    v0[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v8 + 12) = 2112;
    uint64_t v12 = v6;
    unint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v0[17] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v9 = v13;

    _os_log_impl(&dword_261746000, v4, v5, "Did fail to join groupSessionProvider for activity %{public}s, error: %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v9, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v19, -1, -1);
    MEMORY[0x263E3FE70](v8, -1, -1);
  }
  else
  {
    uint64_t v14 = (void *)v0[26];
    swift_release_n();
  }
  uint64_t v15 = (void *)v0[26];
  uint64_t v16 = v0[21];
  swift_beginAccess();
  specialized FastSyncStateMachine.startActivity(_:didFailWith:)(v16, v15);
  swift_endAccess();

  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t specialized closure #1 in CollaborationConnectionManager.joinGroupSessionProvider(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  void *v7 = v5;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized CollaborationConnectionManager.waitForGroupSessions(with:)(a5);
}

{
  uint64_t v5;
  void *v7;
  uint64_t v9;

  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  void *v7 = v5;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized CollaborationConnectionManager.waitForGroupSessions(with:)(a5);
}

void specialized FastSyncStateMachine.didStartActivity(sessionTask:groupSessionProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  BOOL v4 = (void *)v2[1];
  unint64_t v5 = v2[2];
  int v6 = 1 << (v5 >> 61);
  if ((v6 & 0x26) == 0 && ((v6 & 0x11) == 0 ? (uint64_t v7 = v2[1]) : (uint64_t v7 = *v2), v7 == a2))
  {
    swift_retain();
    swift_retain();
    outlined consume of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(v3, v4, v5);
    *uint64_t v2 = a2;
    v2[1] = a1;
    v2[2] = 0x2000000000000000;
  }
  else
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.tabGroup);
    oslog = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_261746000, oslog, v10, "Ignoring didStartActivity() for a group session provider we've stopped tracking", v11, 2u);
      MEMORY[0x263E3FE70](v11, -1, -1);
    }
  }
}

void specialized FastSyncStateMachine.startActivity(_:didFailWith:)(uint64_t a1, void *a2)
{
  uint64_t v4 = *v2;
  uint64_t v3 = (void *)v2[1];
  unint64_t v5 = v2[2];
  switch(v5 >> 61)
  {
    case 1uLL:
    case 2uLL:
    case 5uLL:
      goto LABEL_7;
    case 3uLL:
      swift_retain();
      swift_retain();
      swift_release();
      uint64_t v8 = v3;
      goto LABEL_4;
    case 4uLL:
      swift_retain();
      id v10 = v3;
      swift_release();

      goto LABEL_7;
    default:
      swift_retain();
      uint64_t v8 = (void *)v4;
LABEL_4:
      swift_release();
      if (v8 == (void *)a1)
      {
        id v9 = a2;
        swift_retain();
        outlined consume of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(v4, v3, v5);
        *uint64_t v2 = a1;
        v2[1] = (uint64_t)a2;
        v2[2] = 0x8000000000000000;
      }
      else
      {
LABEL_7:
        if (one-time initialization token for tabGroup != -1) {
          swift_once();
        }
        uint64_t v11 = type metadata accessor for Logger();
        __swift_project_value_buffer(v11, (uint64_t)static Logger.tabGroup);
        id v12 = a2;
        id v13 = a2;
        oslog = Logger.logObject.getter();
        os_log_type_t v14 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(oslog, v14))
        {
          uint64_t v15 = (uint8_t *)swift_slowAlloc();
          uint64_t v16 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v15 = 138412290;
          id v17 = a2;
          uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v16 = v19;

          _os_log_impl(&dword_261746000, oslog, v14, "Ignoring startActivity(_:didFailWith:) for a group session provider we've stopped tracking %@", v15, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x263E3FE70](v16, -1, -1);
          MEMORY[0x263E3FE70](v15, -1, -1);
        }
        else
        {
        }
      }
      return;
  }
}

uint64_t specialized CollaborationConnectionManager.leaveGroupSessionProvider(_:)()
{
  *(void *)(v1 + 56) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 64) = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>);
  uint64_t v4 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity> and conformance PersonalGroupSessionProvider<A>, &demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>);
  *uint64_t v2 = v1;
  v2[1] = specialized CollaborationConnectionManager.leaveGroupSessionProvider(_:);
  return MEMORY[0x270EF2E60](v3, v4);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[9] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[7];
    return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.leaveGroupSessionProvider(_:), v3, 0);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  *(void *)(v1 + 56) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 64) = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
  uint64_t v4 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>, &demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
  *uint64_t v2 = v1;
  v2[1] = specialized CollaborationConnectionManager.leaveGroupSessionProvider(_:);
  return MEMORY[0x270EF2E60](v3, v4);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[9] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[7];
    return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.leaveGroupSessionProvider(_:), v3, 0);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  NSObject *log;
  void *v18;
  os_log_type_t type;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  Swift::Int v22 = v0;
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[9];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.tabGroup);
  swift_retain();
  uint64_t v3 = v1;
  swift_retain();
  uint64_t v4 = v1;
  unint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[9];
  id v9 = v0[7];
  if (v7)
  {
    type = v6;
    id v10 = swift_slowAlloc();
    uint64_t v18 = (void *)swift_slowAlloc();
    unint64_t v20 = swift_slowAlloc();
    uint64_t v21 = v20;
    *(_DWORD *)id v10 = 136446466;
    swift_beginAccess();
    log = v5;
    uint64_t v11 = *(void *)(v9 + 136);
    id v12 = *(void *)(v9 + 144);
    swift_bridgeObjectRetain();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 12) = 2112;
    id v13 = v8;
    os_log_type_t v14 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v18 = v14;

    _os_log_impl(&dword_261746000, log, type, "Did fail to leave groupSessionProvider for activity %{public}s, error: %@", (uint8_t *)v10, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v18, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v20, -1, -1);
    MEMORY[0x263E3FE70](v10, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t specialized CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  uint64_t v3 = type metadata accessor for CancellationError();
  v2[18] = v3;
  v2[19] = *(void *)(v3 - 8);
  v2[20] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Participant();
  v2[23] = v4;
  v2[24] = *(void *)(v4 - 8);
  v2[25] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.Sessions);
  v2[26] = v5;
  v2[27] = *(void *)(v5 - 8);
  v2[28] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.Sessions.Iterator);
  v2[29] = v6;
  v2[30] = *(void *)(v6 - 8);
  v2[31] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.waitForGroupSessions(with:), v1, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2[16] = a1;
  v2[17] = v1;
  uint64_t v3 = type metadata accessor for CancellationError();
  v2[18] = v3;
  v2[19] = *(void *)(v3 - 8);
  v2[20] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Participant();
  v2[23] = v4;
  v2[24] = *(void *)(v4 - 8);
  v2[25] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.Sessions);
  v2[26] = v5;
  v2[27] = *(void *)(v5 - 8);
  v2[28] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.Sessions.Iterator);
  v2[29] = v6;
  v2[30] = *(void *)(v6 - 8);
  v2[31] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.waitForGroupSessions(with:), v1, 0);
}

uint64_t specialized CollaborationConnectionManager.waitForGroupSessions(with:)()
{
  uint64_t v1 = v0[17];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 144);
  v0[11] = *(void *)(v1 + 136);
  v0[12] = v2;
  swift_bridgeObjectRetain();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.waitForGroupSessions(with:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = v0[27];
  uint64_t v1 = v0[28];
  uint64_t v3 = v0[26];
  uint64_t v4 = (uint64_t *)v0[17];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>);
  lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity> and conformance PersonalGroupSessionProvider<A>, &demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>);
  GroupSessionProvider.sessions.getter();
  GroupSession.Sessions.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = *v4;
  v0[32] = *(void *)(*v4 + 160);
  v0[33] = *(void *)(v5 + 168);
  uint64_t v6 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSession<PersonalDeviceCoordinationActivity>.Sessions.Iterator and conformance GroupSession<A>.Sessions.Iterator, &demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.Sessions.Iterator);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[34] = v7;
  void *v7 = v0;
  v7[1] = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  uint64_t v8 = v0[29];
  return MEMORY[0x270FA1E80](v0 + 13, v8, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  }
  else {
    uint64_t v2 = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 288) = *(void *)(v0 + 104);
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.waitForGroupSessions(with:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  id v12 = v0;
  if (v0[36])
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    v0[37] = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
    uint64_t v3 = v0[11];
    uint64_t v2 = v0[12];
    swift_bridgeObjectRetain_n();
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v11 = v7;
      *(_DWORD *)uint64_t v6 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v6 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v2, &v11);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_261746000, v4, v5, "Did begin group session for activity: %{public}s", (uint8_t *)v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v7, -1, -1);
      MEMORY[0x263E3FE70](v6, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    id v10 = v0[17];
    GroupSession.localParticipant.getter();
    return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.waitForGroupSessions(with:), v10, 0);
  }
  else
  {
    (*(void (**)(void, void))(v0[30] + 8))(v0[31], v0[29]);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v9;

  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v3 = v0[23];
  uint64_t v5 = v0[21];
  uint64_t v6 = v0[17] + v0[32];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v1, v3);
  uint64_t v7 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56);
  v0[38] = v7;
  v0[39] = (v2 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v7(v4, 0, 1, v3);
  outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v4, v5, &demangling cache variable for type metadata for Participant?);
  swift_beginAccess();
  outlined assign with take of Participant?(v5, v6);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.waitForGroupSessions(with:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v6;

  uint64_t v1 = v0[36];
  uint64_t v2 = v0[17];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[40] = v3;
  v3[2] = v2;
  v3[3] = v1;
  v3[4] = v0 + 11;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[41] = v4;
  *uint64_t v4 = v0;
  v4[1] = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  return MEMORY[0x270FA22B8]();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 336) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;

  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.waitForGroupSessions(with:), *(void *)(v0 + 136), 0);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  BOOL v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v25 = v0;
  uint64_t v1 = *(void **)(v0 + 336);
  swift_task_dealloc();
  *(void *)(v0 + 112) = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v3 = swift_dynamicCast();
  uint64_t v4 = *(void **)(v0 + 336);
  if (v3)
  {
    uint64_t v5 = *(void *)(v0 + 152);
    uint64_t v6 = *(void *)(v0 + 160);
    uint64_t v7 = *(void *)(v0 + 144);
    (*(void (**)(void, void))(*(void *)(v0 + 240) + 8))(*(void *)(v0 + 248), *(void *)(v0 + 232));
    swift_release();

    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {

    uint64_t v11 = *(void *)(v0 + 88);
    id v10 = *(void *)(v0 + 96);
    id v12 = v4;
    swift_bridgeObjectRetain();
    id v13 = v4;
    swift_bridgeObjectRetain();
    os_log_type_t v14 = Logger.logObject.getter();
    uint64_t v15 = static os_log_type_t.error.getter();
    uint64_t v16 = os_log_type_enabled(v14, v15);
    id v17 = *(void **)(v0 + 336);
    if (v16)
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      unint64_t v20 = swift_slowAlloc();
      long long v24 = v20;
      *(_DWORD *)uint64_t v18 = 136446466;
      swift_bridgeObjectRetain();
      *(void *)(v18 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v24);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 12) = 2112;
      uint64_t v21 = v17;
      Swift::Int v22 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v18 + 14) = v22;
      *uint64_t v19 = v22;

      _os_log_impl(&dword_261746000, v14, v15, "Retrying after group session for activity: %{public}s unexpectedly failed: %@", (uint8_t *)v18, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v19, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v20, -1, -1);
      MEMORY[0x263E3FE70](v18, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v23 = *(void *)(v0 + 136);
    return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.waitForGroupSessions(with:), v23, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = v3 + *(void *)(v0 + 256);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0 + 304))(v2, 1, 1, *(void *)(v0 + 184));
  swift_beginAccess();
  outlined assign with take of Participant?(v2, v4);
  swift_endAccess();
  *(void *)(v3 + v1) = MEMORY[0x263F8EE88];
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.waitForGroupSessions(with:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  swift_release();
  uint64_t v1 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSession<PersonalDeviceCoordinationActivity>.Sessions.Iterator and conformance GroupSession<A>.Sessions.Iterator, &demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.Sessions.Iterator);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v2;
  *uint64_t v2 = v0;
  v2[1] = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  uint64_t v3 = *(void *)(v0 + 232);
  return MEMORY[0x270FA1E80](v0 + 104, v3, v1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = v0[17];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 144);
  v0[11] = *(void *)(v1 + 136);
  v0[12] = v2;
  swift_bridgeObjectRetain();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.waitForGroupSessions(with:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = v0[27];
  uint64_t v1 = v0[28];
  uint64_t v3 = v0[26];
  uint64_t v4 = (uint64_t *)v0[17];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
  lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>, &demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
  GroupSessionProvider.sessions.getter();
  GroupSession.Sessions.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = *v4;
  v0[32] = *(void *)(*v4 + 160);
  v0[33] = *(void *)(v5 + 168);
  uint64_t v6 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSession<CKShareCollaborationActivity>.Sessions.Iterator and conformance GroupSession<A>.Sessions.Iterator, &demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.Sessions.Iterator);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[34] = v7;
  void *v7 = v0;
  v7[1] = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  uint64_t v8 = v0[29];
  return MEMORY[0x270FA1E80](v0 + 13, v8, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  }
  else {
    uint64_t v2 = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 288) = *(void *)(v0 + 104);
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.waitForGroupSessions(with:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  id v12 = v0;
  if (v0[36])
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    v0[37] = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
    uint64_t v3 = v0[11];
    uint64_t v2 = v0[12];
    swift_bridgeObjectRetain_n();
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v11 = v7;
      *(_DWORD *)uint64_t v6 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v6 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v2, &v11);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_261746000, v4, v5, "Did begin group session for activity: %{public}s", (uint8_t *)v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v7, -1, -1);
      MEMORY[0x263E3FE70](v6, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    id v10 = v0[17];
    GroupSession.localParticipant.getter();
    return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.waitForGroupSessions(with:), v10, 0);
  }
  else
  {
    (*(void (**)(void, void))(v0[30] + 8))(v0[31], v0[29]);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 120) = *(void *)(v0 + 280);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x263F8E628];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x263F8E658];
  return MEMORY[0x270FA0678](v2, v1, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v9;

  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v3 = v0[23];
  uint64_t v5 = v0[21];
  uint64_t v6 = v0[17] + v0[32];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v1, v3);
  uint64_t v7 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56);
  v0[38] = v7;
  v0[39] = (v2 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v7(v4, 0, 1, v3);
  outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v4, v5, &demangling cache variable for type metadata for Participant?);
  swift_beginAccess();
  outlined assign with take of Participant?(v5, v6);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.waitForGroupSessions(with:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v6;

  uint64_t v1 = v0[36];
  uint64_t v2 = v0[17];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[40] = v3;
  v3[2] = v2;
  v3[3] = v1;
  v3[4] = v0 + 11;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[41] = v4;
  *uint64_t v4 = v0;
  v4[1] = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  return MEMORY[0x270FA22B8]();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 336) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;

  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.waitForGroupSessions(with:), *(void *)(v0 + 136), 0);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  BOOL v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v25 = v0;
  uint64_t v1 = *(void **)(v0 + 336);
  swift_task_dealloc();
  *(void *)(v0 + 112) = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v3 = swift_dynamicCast();
  uint64_t v4 = *(void **)(v0 + 336);
  if (v3)
  {
    uint64_t v5 = *(void *)(v0 + 152);
    uint64_t v6 = *(void *)(v0 + 160);
    uint64_t v7 = *(void *)(v0 + 144);
    (*(void (**)(void, void))(*(void *)(v0 + 240) + 8))(*(void *)(v0 + 248), *(void *)(v0 + 232));
    swift_release();

    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {

    uint64_t v11 = *(void *)(v0 + 88);
    id v10 = *(void *)(v0 + 96);
    id v12 = v4;
    swift_bridgeObjectRetain();
    id v13 = v4;
    swift_bridgeObjectRetain();
    os_log_type_t v14 = Logger.logObject.getter();
    uint64_t v15 = static os_log_type_t.error.getter();
    uint64_t v16 = os_log_type_enabled(v14, v15);
    id v17 = *(void **)(v0 + 336);
    if (v16)
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      unint64_t v20 = swift_slowAlloc();
      long long v24 = v20;
      *(_DWORD *)uint64_t v18 = 136446466;
      swift_bridgeObjectRetain();
      *(void *)(v18 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v24);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 12) = 2112;
      uint64_t v21 = v17;
      Swift::Int v22 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v18 + 14) = v22;
      *uint64_t v19 = v22;

      _os_log_impl(&dword_261746000, v14, v15, "Retrying after group session for activity: %{public}s unexpectedly failed: %@", (uint8_t *)v18, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v19, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v20, -1, -1);
      MEMORY[0x263E3FE70](v18, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v23 = *(void *)(v0 + 136);
    return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.waitForGroupSessions(with:), v23, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = v3 + *(void *)(v0 + 256);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0 + 304))(v2, 1, 1, *(void *)(v0 + 184));
  swift_beginAccess();
  outlined assign with take of Participant?(v2, v4);
  swift_endAccess();
  *(void *)(v3 + v1) = MEMORY[0x263F8EE88];
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.waitForGroupSessions(with:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  swift_release();
  uint64_t v1 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSession<CKShareCollaborationActivity>.Sessions.Iterator and conformance GroupSession<A>.Sessions.Iterator, &demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.Sessions.Iterator);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v2;
  *uint64_t v2 = v0;
  v2[1] = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  uint64_t v3 = *(void *)(v0 + 232);
  return MEMORY[0x270FA1E80](v0 + 104, v3, v1);
}

uint64_t specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  v6[4] = a4;
  v6[2] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6[7] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), 0, 0);
}

{
  void *v6;
  uint64_t v8;

  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  v6[4] = a4;
  v6[2] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6[7] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), 0, 0);
}

uint64_t specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[4] = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.State);
  v7[7] = v8;
  v7[8] = *(void *)(v8 - 8);
  v7[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.State?);
  v7[10] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<GroupSession<PersonalDeviceCoordinationActivity>.State>.Publisher>);
  v7[11] = v9;
  v7[12] = *(void *)(v9 - 8);
  v7[13] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<GroupSession<PersonalDeviceCoordinationActivity>.State>.Publisher);
  v7[14] = v10;
  v7[15] = *(void *)(v10 - 8);
  v7[16] = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<GroupSession<PersonalDeviceCoordinationActivity>.State>.Publisher>.Iterator);
  v7[17] = v11;
  v7[18] = *(void *)(v11 - 8);
  v7[19] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), 0, 0);
}

{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v7[5] = a6;
  v7[6] = a7;
  v7[4] = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.State);
  v7[7] = v8;
  v7[8] = *(void *)(v8 - 8);
  v7[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.State?);
  v7[10] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<GroupSession<CKShareCollaborationActivity>.State>.Publisher>);
  v7[11] = v9;
  v7[12] = *(void *)(v9 - 8);
  v7[13] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<GroupSession<CKShareCollaborationActivity>.State>.Publisher);
  v7[14] = v10;
  v7[15] = *(void *)(v10 - 8);
  v7[16] = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<GroupSession<CKShareCollaborationActivity>.State>.Publisher>.Iterator);
  v7[17] = v11;
  v7[18] = *(void *)(v11 - 8);
  v7[19] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), 0, 0);
}

uint64_t specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v4 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[12];
  GroupSession.$state.getter();
  uint64_t v7 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type Published<GroupSession<PersonalDeviceCoordinationActivity>.State>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<GroupSession<PersonalDeviceCoordinationActivity>.State>.Publisher);
  MEMORY[0x263E3F0A0](v3, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  uint64_t v8 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type AsyncPublisher<Published<GroupSession<PersonalDeviceCoordinationActivity>.State>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<GroupSession<PersonalDeviceCoordinationActivity>.State>.Publisher>.Iterator);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[20] = v9;
  *uint64_t v9 = v0;
  v9[1] = specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  uint64_t v10 = v0[17];
  uint64_t v11 = v0[10];
  return MEMORY[0x270FA1E80](v11, v10, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  }
  else {
    uint64_t v2 = specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  uint64_t v25 = v0;
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[18] + 8))(v0[19], v0[17]);
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    uint64_t v6 = static os_log_type_t.info.getter();
    uint64_t v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = v0[6];
    if (v7)
    {
      uint64_t v9 = v0[5];
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      long long v24 = v11;
      *(_DWORD *)uint64_t v10 = 136446210;
      swift_bridgeObjectRetain();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_261746000, v5, v6, "Did finish observing groupSession state changes for activity: %{public}s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v11, -1, -1);
      MEMORY[0x263E3FE70](v10, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    goto LABEL_10;
  }
  id v12 = v0[21];
  uint64_t v13 = v0[9];
  os_log_type_t v14 = v0[4];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v13, v1, v2);
  specialized CollaborationConnectionManager.handleGroupSessionStateChange(_:state:)(v14, v13, &demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.State);
  if (v12)
  {
    uint64_t v16 = v0[18];
    uint64_t v15 = v0[19];
    id v17 = v0[17];
    (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
LABEL_10:
    return v18();
  }
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  unint64_t v20 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type AsyncPublisher<Published<GroupSession<PersonalDeviceCoordinationActivity>.State>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<GroupSession<PersonalDeviceCoordinationActivity>.State>.Publisher>.Iterator);
  uint64_t v21 = (void *)swift_task_alloc();
  v0[20] = v21;
  *uint64_t v21 = v0;
  v21[1] = specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  Swift::Int v22 = v0[17];
  uint64_t v23 = v0[10];
  return MEMORY[0x270FA1E80](v23, v22, v20);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v4 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[12];
  GroupSession.$state.getter();
  uint64_t v7 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type Published<GroupSession<CKShareCollaborationActivity>.State>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<GroupSession<CKShareCollaborationActivity>.State>.Publisher);
  MEMORY[0x263E3F0A0](v3, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  uint64_t v8 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type AsyncPublisher<Published<GroupSession<CKShareCollaborationActivity>.State>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<GroupSession<CKShareCollaborationActivity>.State>.Publisher>.Iterator);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[20] = v9;
  *uint64_t v9 = v0;
  v9[1] = specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  uint64_t v10 = v0[17];
  uint64_t v11 = v0[10];
  return MEMORY[0x270FA1E80](v11, v10, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  }
  else {
    uint64_t v2 = specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  uint64_t v25 = v0;
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[18] + 8))(v0[19], v0[17]);
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    uint64_t v6 = static os_log_type_t.info.getter();
    uint64_t v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = v0[6];
    if (v7)
    {
      uint64_t v9 = v0[5];
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      long long v24 = v11;
      *(_DWORD *)uint64_t v10 = 136446210;
      swift_bridgeObjectRetain();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_261746000, v5, v6, "Did finish observing groupSession state changes for activity: %{public}s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v11, -1, -1);
      MEMORY[0x263E3FE70](v10, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    goto LABEL_10;
  }
  id v12 = v0[21];
  uint64_t v13 = v0[9];
  os_log_type_t v14 = v0[4];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v13, v1, v2);
  specialized CollaborationConnectionManager.handleGroupSessionStateChange(_:state:)(v14, v13, &demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.State);
  if (v12)
  {
    uint64_t v16 = v0[18];
    uint64_t v15 = v0[19];
    id v17 = v0[17];
    (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
LABEL_10:
    return v18();
  }
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  unint64_t v20 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type AsyncPublisher<Published<GroupSession<CKShareCollaborationActivity>.State>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<GroupSession<CKShareCollaborationActivity>.State>.Publisher>.Iterator);
  uint64_t v21 = (void *)swift_task_alloc();
  v0[20] = v21;
  *uint64_t v21 = v0;
  v21[1] = specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  Swift::Int v22 = v0[17];
  uint64_t v23 = v0[10];
  return MEMORY[0x270FA1E80](v23, v22, v20);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 16) = *(void *)(v0 + 168);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x263F8E628];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x263F8E658];
  return MEMORY[0x270FA0678](v2, v1, v3);
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  uint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<Set<Participant>>.Publisher>);
  v7[12] = v8;
  v7[13] = *(void *)(v8 - 8);
  v7[14] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  v7[15] = v9;
  v7[16] = *(void *)(v9 - 8);
  v7[17] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<Set<Participant>>.Publisher>.Iterator);
  v7[18] = v10;
  v7[19] = *(void *)(v10 - 8);
  v7[20] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), 0, 0);
}

{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<Set<Participant>>.Publisher>);
  v7[12] = v8;
  v7[13] = *(void *)(v8 - 8);
  v7[14] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  v7[15] = v9;
  v7[16] = *(void *)(v9 - 8);
  v7[17] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<Set<Participant>>.Publisher>.Iterator);
  v7[18] = v10;
  v7[19] = *(void *)(v10 - 8);
  v7[20] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), 0, 0);
}

uint64_t specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v4 = v0[14];
  uint64_t v3 = v0[15];
  uint64_t v6 = v0[12];
  uint64_t v5 = v0[13];
  uint64_t v7 = (uint64_t *)v0[9];
  GroupSession.$activeParticipants.getter();
  uint64_t v8 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  MEMORY[0x263E3F0A0](v3, v8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v9 = *v7;
  v0[21] = *(void *)(*v7 + 168);
  v0[22] = *(void *)(v9 + 176);
  swift_beginAccess();
  uint64_t v10 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type AsyncPublisher<Published<Set<Participant>>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<Set<Participant>>.Publisher>.Iterator);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[23] = v11;
  *uint64_t v11 = v0;
  v11[1] = specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  uint64_t v12 = v0[18];
  return MEMORY[0x270FA1E80](v0 + 5, v12, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  }
  else {
    uint64_t v2 = specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 200) = *(void *)(v0 + 40);
  return MEMORY[0x270FA2498](specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void *v13;
  uint64_t v14;

  uint64_t v13 = v0;
  if (v0[25])
  {
    uint64_t v1 = v0[9];
    return MEMORY[0x270FA2498](specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), v1, 0);
  }
  else
  {
    (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain_n();
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.info.getter();
    uint64_t v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = v0[11];
    if (v5)
    {
      uint64_t v7 = v0[10];
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v12 = v9;
      *(_DWORD *)uint64_t v8 = 136446210;
      swift_bridgeObjectRetain();
      v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_261746000, v3, v4, "Did finish observing activeParticipants changes for activity: %{public}s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v9, -1, -1);
      MEMORY[0x263E3FE70](v8, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = v0[25];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[9];
  *(void *)(v3 + v0[21]) = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = specialized _ArrayProtocol.filter(_:)(v4, v1, &demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v3 + v2) = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type AsyncPublisher<Published<Set<Participant>>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<Set<Participant>>.Publisher>.Iterator);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[23] = v7;
  uint64_t *v7 = v0;
  v7[1] = specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  uint64_t v8 = v0[18];
  return MEMORY[0x270FA1E80](v0 + 5, v8, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;

  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v4 = v0[14];
  uint64_t v3 = v0[15];
  uint64_t v6 = v0[12];
  uint64_t v5 = v0[13];
  uint64_t v7 = (uint64_t *)v0[9];
  GroupSession.$activeParticipants.getter();
  uint64_t v8 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  MEMORY[0x263E3F0A0](v3, v8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v9 = *v7;
  v0[21] = *(void *)(*v7 + 168);
  v0[22] = *(void *)(v9 + 176);
  swift_beginAccess();
  uint64_t v10 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type AsyncPublisher<Published<Set<Participant>>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<Set<Participant>>.Publisher>.Iterator);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[23] = v11;
  *uint64_t v11 = v0;
  v11[1] = specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  uint64_t v12 = v0[18];
  return MEMORY[0x270FA1E80](v0 + 5, v12, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  }
  else {
    uint64_t v2 = specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 200) = *(void *)(v0 + 40);
  return MEMORY[0x270FA2498](specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void *v13;
  uint64_t v14;

  uint64_t v13 = v0;
  if (v0[25])
  {
    uint64_t v1 = v0[9];
    return MEMORY[0x270FA2498](specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), v1, 0);
  }
  else
  {
    (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain_n();
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.info.getter();
    uint64_t v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = v0[11];
    if (v5)
    {
      uint64_t v7 = v0[10];
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v12 = v9;
      *(_DWORD *)uint64_t v8 = 136446210;
      swift_bridgeObjectRetain();
      v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_261746000, v3, v4, "Did finish observing activeParticipants changes for activity: %{public}s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v9, -1, -1);
      MEMORY[0x263E3FE70](v8, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = v0[25];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[9];
  *(void *)(v3 + v0[21]) = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = specialized _ArrayProtocol.filter(_:)(v4, v1, &demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v3 + v2) = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type AsyncPublisher<Published<Set<Participant>>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<Set<Participant>>.Publisher>.Iterator);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[23] = v7;
  uint64_t *v7 = v0;
  v7[1] = specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  uint64_t v8 = v0[18];
  return MEMORY[0x270FA1E80](v0 + 5, v8, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 48) = *(void *)(v0 + 192);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x263F8E628];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x263F8E658];
  return MEMORY[0x270FA0678](v2, v1, v3);
}

uint64_t specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  void *v7 = v5;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized CollaborationConnectionManager.runGroupSession(_:)(a5);
}

{
  uint64_t v5;
  void *v7;
  uint64_t v9;

  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  void *v7 = v5;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized CollaborationConnectionManager.runGroupSession(_:)(a5);
}

uint64_t specialized ThrowingTaskGroup.waitForAll(isolation:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  if (a1)
  {
    swift_getObjectType();
    uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  v3[5] = v4;
  v3[6] = v6;
  return MEMORY[0x270FA2498](specialized ThrowingTaskGroup.waitForAll(isolation:), v4, v6);
}

uint64_t specialized ThrowingTaskGroup.waitForAll(isolation:)()
{
  uint64_t v1 = **(void **)(v0 + 32);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *(void *)(v0 + 56) = v2;
  if (MEMORY[0x263E3F390](v1, MEMORY[0x263F8EE60] + 8, v2, MEMORY[0x263F8E4E0]))
  {
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    *(void *)(v0 + 64) = 0;
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v5;
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(), Error>);
    *uint64_t v5 = v0;
    v5[1] = specialized ThrowingTaskGroup.waitForAll(isolation:);
    uint64_t v7 = *(void *)(v0 + 24);
    uint64_t v8 = *(void *)(v0 + 16);
    return MEMORY[0x270FA2048](v0 + 88, v8, v7, v6);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = *(void *)(v2 + 48);
    uint64_t v5 = specialized ThrowingTaskGroup.waitForAll(isolation:);
  }
  else
  {
    *(unsigned char *)(v2 + 89) = *(unsigned char *)(v2 + 88);
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = *(void *)(v2 + 48);
    uint64_t v5 = specialized ThrowingTaskGroup.waitForAll(isolation:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(unsigned char *)(v0 + 89))
  {
    uint64_t v1 = *(void *)(v0 + 64);
    if (MEMORY[0x263E3F390](**(void **)(v0 + 32), MEMORY[0x263F8EE60] + 8, *(void *)(v0 + 56), MEMORY[0x263F8E4E0]))
    {
      if (v1) {
        swift_willThrow();
      }
      uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
      return v2();
    }
    *(void *)(v0 + 64) = v1;
  }
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(), Error>);
  *uint64_t v4 = v0;
  v4[1] = specialized ThrowingTaskGroup.waitForAll(isolation:);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + 16);
  return MEMORY[0x270FA2048](v0 + 88, v7, v6, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v1 = *(void **)(v0 + 80);
  if (*(void *)(v0 + 64))
  {

    uint64_t v1 = *(void **)(v0 + 64);
  }
  if (MEMORY[0x263E3F390](**(void **)(v0 + 32), MEMORY[0x263F8EE60] + 8, *(void *)(v0 + 56), MEMORY[0x263F8E4E0]))
  {
    if (v1) {
      swift_willThrow();
    }
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    *(void *)(v0 + 64) = v1;
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v4;
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(), Error>);
    *uint64_t v4 = v0;
    v4[1] = specialized ThrowingTaskGroup.waitForAll(isolation:);
    uint64_t v6 = *(void *)(v0 + 24);
    uint64_t v7 = *(void *)(v0 + 16);
    return MEMORY[0x270FA2048](v0 + 88, v7, v6, v5);
  }
}

uint64_t specialized CollaborationConnectionManager.runGroupSession(_:)(uint64_t a1)
{
  v2[15] = a1;
  v2[16] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation.YieldResult);
  v2[17] = v3;
  v2[18] = *(void *)(v3 - 8);
  v2[19] = swift_task_alloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  v2[20] = v4;
  v2[21] = *(void *)(v4 - 8);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext)?);
  v2[25] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Iterator);
  v2[26] = v5;
  v2[27] = *(void *)(v5 - 8);
  v2[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.runGroupSession(_:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  *(void *)(*(void *)v1 + 264) = a1;
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.runGroupSession(_:), v2, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2[15] = a1;
  v2[16] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation.YieldResult);
  v2[17] = v3;
  v2[18] = *(void *)(v3 - 8);
  v2[19] = swift_task_alloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  v2[20] = v4;
  v2[21] = *(void *)(v4 - 8);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext)?);
  v2[25] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Iterator);
  v2[26] = v5;
  v2[27] = *(void *)(v5 - 8);
  v2[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.runGroupSession(_:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  *(void *)(*(void *)v1 + 264) = a1;
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.runGroupSession(_:), v2, 0);
}

uint64_t specialized CollaborationConnectionManager.runGroupSession(_:)()
{
  uint64_t v11 = v0;
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[29] = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v10 = v5;
    *(_DWORD *)uint64_t v4 = 136446210;
    GroupSession.activity.getter();
    v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0[4], v0[5], &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_261746000, v2, v3, "Will join group session for activity: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v5, -1, -1);
    MEMORY[0x263E3FE70](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  if (one-time initialization token for joinLeaveSessionQueue != -1) {
    swift_once();
  }
  uint64_t v6 = joinLeaveSessionQueue;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized GroupSession.join(on:)
                                       + async function pointer to specialized GroupSession.join(on:));
  uint64_t v7 = (void *)swift_task_alloc();
  v0[30] = v7;
  void *v7 = v0;
  v7[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  return v9(v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized CollaborationConnectionManager.runGroupSession(_:);
  }
  else {
    uint64_t v2 = specialized CollaborationConnectionManager.runGroupSession(_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  void *v10;
  uint64_t v11;

  uint64_t v10 = v0;
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v9 = v4;
    *(_DWORD *)os_log_type_t v3 = 136446210;
    GroupSession.activity.getter();
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0[6], v0[7], &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_261746000, v1, v2, "Did join group session for activity: %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v4, -1, -1);
    MEMORY[0x263E3FE70](v3, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessengerController<PersonalDeviceCoordinationActivity, PresenceUpdateMessage>);
  swift_allocObject();
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized GroupSessionMessengerController.init(groupSession:)
                                       + async function pointer to specialized GroupSessionMessengerController.init(groupSession:));
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[32] = v5;
  *uint64_t v5 = v0;
  v5[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  uint64_t v6 = v0[15];
  return v8(v6);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t (__cdecl *v15)();
  uint64_t v16;
  void *v17;
  uint64_t v18;

  id v17 = v0;
  uint64_t v1 = (void *)v0[31];
  swift_retain();
  uint64_t v2 = v1;
  swift_retain();
  os_log_type_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (void *)v0[31];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v16 = v9;
    *(_DWORD *)uint64_t v7 = 136446466;
    GroupSession.activity.getter();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0[2], v0[3], &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v7 + 12) = 2112;
    uint64_t v10 = v6;
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[11] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v11;

    _os_log_impl(&dword_261746000, v4, v5, "Failed to join group session for activity: %{public}s, error: %@", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v8, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v9, -1, -1);
    MEMORY[0x263E3FE70](v7, -1, -1);
  }
  else
  {
    uint64_t v12 = (void *)v0[31];
    swift_release_n();
  }
  uint64_t v15 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CollaborationConnectionManager.didLeaveGroupSession(_:)
                              + async function pointer to specialized CollaborationConnectionManager.didLeaveGroupSession(_:));
  uint64_t v13 = (void *)swift_task_alloc();
  v0[39] = v13;
  NSObject *v13 = v0;
  v13[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  return v15();
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(*(void *)(v0 + 128) + 168) = *(void *)(v0 + 264);
  swift_retain();
  swift_release();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.runGroupSession(_:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>);
  AsyncStream.makeAsyncIterator()();
  swift_release();
  v0[34] = v0[31];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[35] = v1;
  void *v1 = v0;
  v1[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  uint64_t v2 = v0[25];
  os_log_type_t v3 = v0[26];
  return MEMORY[0x270FA1F68](v2, 0, 0, v3);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.runGroupSession(_:), 0, 0);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t *v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = (uint64_t *)v0[25];
  uint64_t v2 = v0[20];
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v0[21] + 48))(v1, 1, v2) == 1)
  {
    os_log_type_t v3 = v0[15];
    (*(void (**)(void, void))(v0[27] + 8))(v0[28], v0[26]);
    uint64_t v4 = joinLeaveSessionQueue;
    uint64_t v5 = swift_task_alloc();
    v0[36] = v5;
    *(void *)(v5 + 16) = v4;
    *(void *)(v5 + 24) = v3;
    uint64_t v6 = (void *)swift_task_alloc();
    v0[37] = v6;
    void *v6 = v0;
    v6[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
    return MEMORY[0x270FA2318]();
  }
  else
  {
    uint64_t v7 = v0[34];
    uint64_t v8 = (uint64_t *)v0[24];
    uint64_t v9 = *(int *)(v2 + 48);
    uint64_t v10 = (char *)v1 + v9;
    uint64_t v11 = (char *)v8 + v9;
    uint64_t v12 = v1[1];
    uint64_t v13 = v1[2];
    uint64_t v14 = v1[3];
    uint64_t v16 = v1[4];
    uint64_t v15 = v1[5];
    char v36 = v1[6];
    char v37 = *v1;
    *uint64_t v8 = *v1;
    v8[1] = v12;
    char v35 = v12;
    v8[2] = v13;
    v8[3] = v14;
    v8[4] = v16;
    v8[5] = v15;
    v8[6] = v36;
    id v17 = type metadata accessor for GroupSessionMessenger.MessageContext();
    uint64_t v18 = *(void *)(v17 - 8);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v11, v10, v17);
    static Task<>.checkCancellation()();
    if (v7)
    {
      unint64_t v20 = v0[27];
      uint64_t v19 = v0[28];
      uint64_t v21 = v0[26];
      Swift::Int v22 = v0[24];
      swift_release();
      outlined destroy of TaskPriority?(v22, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v23 = (uint64_t (*)(void))v0[1];
      return v23();
    }
    else
    {
      long long v24 = (uint64_t *)v0[23];
      uint64_t v30 = v0[22];
      uint64_t v31 = v0[19];
      int64_t v32 = v0[18];
      int v33 = v0[17];
      int v34 = v0[24];
      uint64_t v25 = (char *)v24 + *(int *)(v0[20] + 48);
      char *v24 = v37;
      v24[1] = v35;
      v24[2] = v13;
      v24[3] = v14;
      v24[4] = v16;
      v24[5] = v15;
      v24[6] = v36;
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v25, v11, v17);
      outlined init with copy of TaskPriority?((uint64_t)v24, v30, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
      outlined copy of PresenceUpdateMessage.Kind(v37, v35);
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation);
      AsyncStream.Continuation.yield(_:)();
      outlined destroy of TaskPriority?((uint64_t)v24, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
      outlined destroy of TaskPriority?(v34, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
      v0[34] = 0;
      uint64_t v26 = (void *)swift_task_alloc();
      v0[35] = v26;
      *uint64_t v26 = v0;
      v26[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
      uint64_t v27 = v0[25];
      uint64_t v28 = v0[26];
      return MEMORY[0x270FA1F68](v27, 0, 0, v28);
    }
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.runGroupSession(_:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (__cdecl *v3)();
  uint64_t v4;

  os_log_type_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CollaborationConnectionManager.didLeaveGroupSession(_:)
                             + async function pointer to specialized CollaborationConnectionManager.didLeaveGroupSession(_:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v1;
  void *v1 = v0;
  v1[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  return v3();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.runGroupSession(_:), 0, 0);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.runGroupSession(_:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  void *v11;
  uint64_t v12;

  uint64_t v11 = v0;
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[29] = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v10 = v5;
    *(_DWORD *)uint64_t v4 = 136446210;
    GroupSession.activity.getter();
    v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0[4], v0[5], &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_261746000, v2, v3, "Will join group session for activity: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v5, -1, -1);
    MEMORY[0x263E3FE70](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  if (one-time initialization token for joinLeaveSessionQueue != -1) {
    swift_once();
  }
  uint64_t v6 = joinLeaveSessionQueue;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized GroupSession.join(on:)
                                       + async function pointer to specialized GroupSession.join(on:));
  uint64_t v7 = (void *)swift_task_alloc();
  v0[30] = v7;
  void *v7 = v0;
  v7[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  return v9(v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized CollaborationConnectionManager.runGroupSession(_:);
  }
  else {
    uint64_t v2 = specialized CollaborationConnectionManager.runGroupSession(_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  void *v10;
  uint64_t v11;

  uint64_t v10 = v0;
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v9 = v4;
    *(_DWORD *)os_log_type_t v3 = 136446210;
    GroupSession.activity.getter();
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0[6], v0[7], &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_261746000, v1, v2, "Did join group session for activity: %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v4, -1, -1);
    MEMORY[0x263E3FE70](v3, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessengerController<CKShareCollaborationActivity, PresenceUpdateMessage>);
  swift_allocObject();
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized GroupSessionMessengerController.init(groupSession:)
                                       + async function pointer to specialized GroupSessionMessengerController.init(groupSession:));
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[32] = v5;
  *uint64_t v5 = v0;
  v5[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  uint64_t v6 = v0[15];
  return v8(v6);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t (__cdecl *v15)();
  uint64_t v16;
  void *v17;
  uint64_t v18;

  id v17 = v0;
  uint64_t v1 = (void *)v0[31];
  swift_retain();
  uint64_t v2 = v1;
  swift_retain();
  os_log_type_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (void *)v0[31];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v16 = v9;
    *(_DWORD *)uint64_t v7 = 136446466;
    GroupSession.activity.getter();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0[2], v0[3], &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v7 + 12) = 2112;
    uint64_t v10 = v6;
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[11] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v11;

    _os_log_impl(&dword_261746000, v4, v5, "Failed to join group session for activity: %{public}s, error: %@", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v8, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v9, -1, -1);
    MEMORY[0x263E3FE70](v7, -1, -1);
  }
  else
  {
    uint64_t v12 = (void *)v0[31];
    swift_release_n();
  }
  uint64_t v15 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CollaborationConnectionManager.didLeaveGroupSession(_:)
                              + async function pointer to specialized CollaborationConnectionManager.didLeaveGroupSession(_:));
  uint64_t v13 = (void *)swift_task_alloc();
  v0[39] = v13;
  NSObject *v13 = v0;
  v13[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  return v15();
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(*(void *)(v0 + 128) + 168) = *(void *)(v0 + 264);
  swift_retain();
  swift_release();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.runGroupSession(_:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>);
  AsyncStream.makeAsyncIterator()();
  swift_release();
  v0[34] = v0[31];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[35] = v1;
  void *v1 = v0;
  v1[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  uint64_t v2 = v0[25];
  os_log_type_t v3 = v0[26];
  return MEMORY[0x270FA1F68](v2, 0, 0, v3);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.runGroupSession(_:), 0, 0);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t *v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = (uint64_t *)v0[25];
  uint64_t v2 = v0[20];
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v0[21] + 48))(v1, 1, v2) == 1)
  {
    os_log_type_t v3 = v0[15];
    (*(void (**)(void, void))(v0[27] + 8))(v0[28], v0[26]);
    uint64_t v4 = joinLeaveSessionQueue;
    uint64_t v5 = swift_task_alloc();
    v0[36] = v5;
    *(void *)(v5 + 16) = v4;
    *(void *)(v5 + 24) = v3;
    uint64_t v6 = (void *)swift_task_alloc();
    v0[37] = v6;
    void *v6 = v0;
    v6[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
    return MEMORY[0x270FA2318]();
  }
  else
  {
    uint64_t v7 = v0[34];
    uint64_t v8 = (uint64_t *)v0[24];
    uint64_t v9 = *(int *)(v2 + 48);
    uint64_t v10 = (char *)v1 + v9;
    uint64_t v11 = (char *)v8 + v9;
    uint64_t v12 = v1[1];
    uint64_t v13 = v1[2];
    uint64_t v14 = v1[3];
    uint64_t v16 = v1[4];
    uint64_t v15 = v1[5];
    char v36 = v1[6];
    char v37 = *v1;
    *uint64_t v8 = *v1;
    v8[1] = v12;
    char v35 = v12;
    v8[2] = v13;
    v8[3] = v14;
    v8[4] = v16;
    v8[5] = v15;
    v8[6] = v36;
    id v17 = type metadata accessor for GroupSessionMessenger.MessageContext();
    uint64_t v18 = *(void *)(v17 - 8);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v11, v10, v17);
    static Task<>.checkCancellation()();
    if (v7)
    {
      unint64_t v20 = v0[27];
      uint64_t v19 = v0[28];
      uint64_t v21 = v0[26];
      Swift::Int v22 = v0[24];
      swift_release();
      outlined destroy of TaskPriority?(v22, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v23 = (uint64_t (*)(void))v0[1];
      return v23();
    }
    else
    {
      long long v24 = (uint64_t *)v0[23];
      uint64_t v30 = v0[22];
      uint64_t v31 = v0[19];
      int64_t v32 = v0[18];
      int v33 = v0[17];
      int v34 = v0[24];
      uint64_t v25 = (char *)v24 + *(int *)(v0[20] + 48);
      char *v24 = v37;
      v24[1] = v35;
      v24[2] = v13;
      v24[3] = v14;
      v24[4] = v16;
      v24[5] = v15;
      v24[6] = v36;
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v25, v11, v17);
      outlined init with copy of TaskPriority?((uint64_t)v24, v30, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
      outlined copy of PresenceUpdateMessage.Kind(v37, v35);
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation);
      AsyncStream.Continuation.yield(_:)();
      outlined destroy of TaskPriority?((uint64_t)v24, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
      outlined destroy of TaskPriority?(v34, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
      v0[34] = 0;
      uint64_t v26 = (void *)swift_task_alloc();
      v0[35] = v26;
      *uint64_t v26 = v0;
      v26[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
      uint64_t v27 = v0[25];
      uint64_t v28 = v0[26];
      return MEMORY[0x270FA1F68](v27, 0, 0, v28);
    }
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.runGroupSession(_:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (__cdecl *v3)();
  uint64_t v4;

  os_log_type_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CollaborationConnectionManager.didLeaveGroupSession(_:)
                             + async function pointer to specialized CollaborationConnectionManager.didLeaveGroupSession(_:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v1;
  void *v1 = v0;
  v1[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  return v3();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.runGroupSession(_:), 0, 0);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;
  void *v8;
  uint64_t v9;

  uint64_t v8 = v0;
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v7 = v4;
    *(_DWORD *)os_log_type_t v3 = 136446210;
    GroupSession.activity.getter();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0[8], v0[9], &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_261746000, v1, v2, "Did finish running group session for activity: %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v4, -1, -1);
    MEMORY[0x263E3FE70](v3, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  static Task<>.checkCancellation()();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.runGroupSession(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized GroupSession.join(on:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.JoinState);
  v2[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized GroupSession.join(on:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.JoinState);
  v2[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized GroupSession.join(on:), 0, 0);
}

uint64_t specialized GroupSession.join(on:)()
{
  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = v0[2];
  void *v1 = v0[3];
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<GroupSession<PersonalDeviceCoordinationActivity>.JoinState, os_unfair_lock_s>);
  uint64_t v3 = swift_allocObject();
  v0[6] = v3;
  *(_DWORD *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  outlined init with copy of TaskPriority?((uint64_t)v1, v3 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v3 + 16), &demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.JoinState);
  swift_retain();
  outlined destroy of TaskPriority?((uint64_t)v1, &demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.JoinState);
  uint64_t v4 = swift_task_alloc();
  v0[7] = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[8] = v5;
  *uint64_t v5 = v0;
  v5[1] = specialized GroupSession.join(on:);
  return MEMORY[0x270FA2338]();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = specialized GroupSession.join(on:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = specialized GroupSession.join(on:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 48);
  swift_setDeallocating();
  outlined destroy of TaskPriority?((uint64_t)v1 + *(void *)(*MEMORY[0x263F8DD00] + *v1 + 16), &demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.JoinState);
  swift_deallocClassInstance();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 48);
  swift_setDeallocating();
  outlined destroy of TaskPriority?((uint64_t)v1 + *(void *)(*MEMORY[0x263F8DD00] + *v1 + 16), &demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.JoinState);
  swift_deallocClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = v0[2];
  void *v1 = v0[3];
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<GroupSession<CKShareCollaborationActivity>.JoinState, os_unfair_lock_s>);
  uint64_t v3 = swift_allocObject();
  v0[6] = v3;
  *(_DWORD *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  outlined init with copy of TaskPriority?((uint64_t)v1, v3 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v3 + 16), &demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.JoinState);
  swift_retain();
  outlined destroy of TaskPriority?((uint64_t)v1, &demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.JoinState);
  uint64_t v4 = swift_task_alloc();
  v0[7] = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[8] = v5;
  *uint64_t v5 = v0;
  v5[1] = specialized GroupSession.join(on:);
  return MEMORY[0x270FA2338]();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = specialized GroupSession.join(on:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = specialized GroupSession.join(on:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 48);
  swift_setDeallocating();
  outlined destroy of TaskPriority?((uint64_t)v1 + *(void *)(*MEMORY[0x263F8DD00] + *v1 + 16), &demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.JoinState);
  swift_deallocClassInstance();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 48);
  swift_setDeallocating();
  outlined destroy of TaskPriority?((uint64_t)v1 + *(void *)(*MEMORY[0x263F8DD00] + *v1 + 16), &demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.JoinState);
  swift_deallocClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities08PersonalD15SessionProviderCy17WebBookmarksSwift0F26DeviceCoordinationActivityVG_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, 1, v7) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  __swift_instantiateConcreteTypeFromMangledName(a4);
  return swift_task_create();
}

uint64_t specialized closure #2 in FastSyncStateMachine.leaveActivity(priority:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return MEMORY[0x270FA2498](specialized closure #2 in FastSyncStateMachine.leaveActivity(priority:_:), 0, 0);
}

{
  void *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return MEMORY[0x270FA2498](specialized closure #2 in FastSyncStateMachine.leaveActivity(priority:_:), 0, 0);
}

uint64_t specialized closure #2 in FastSyncStateMachine.leaveActivity(priority:_:)()
{
  uint64_t v1 = (int *)v0[3];
  MEMORY[0x263E3F340](v0[2], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[6] = v2;
  *uint64_t v2 = v0;
  v2[1] = specialized closure #2 in FastSyncStateMachine.leaveActivity(priority:_:);
  uint64_t v3 = v0[5];
  return v5(v3);
}

{
  void *v0;
  int *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  uint64_t v1 = (int *)v0[3];
  MEMORY[0x263E3F340](v0[2], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[6] = v2;
  *uint64_t v2 = v0;
  v2[1] = specialized closure #2 in FastSyncStateMachine.leaveActivity(priority:_:);
  uint64_t v3 = v0[5];
  return v5(v3);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  uint64_t v8 = (void *)swift_task_alloc();
  v6[5] = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *uint64_t v8 = v6;
  v8[1] = specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:);
  uint64_t v11 = MEMORY[0x263F8E4E0];
  return MEMORY[0x270FA1FA8](v6 + 2, a4, v9, v10, v11);
}

{
  void *v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6[3] = a5;
  v6[4] = a6;
  uint64_t v8 = (void *)swift_task_alloc();
  v6[5] = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *uint64_t v8 = v6;
  v8[1] = specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:);
  uint64_t v11 = MEMORY[0x263F8E4E0];
  return MEMORY[0x270FA1FA8](v6 + 2, a4, v9, v10, v11);
}

uint64_t specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:)()
{
  swift_task_dealloc();
  if (v0)
  {

    uint64_t v1 = specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:);
  }
  else
  {
    uint64_t v1 = specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:);
  }
  return MEMORY[0x270FA2498](v1, 0, 0);
}

{
  void *v0;
  int *v1;
  uint64_t v2;
  void *v3;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  uint64_t v2 = v0[2];
  uint64_t v1 = (int *)v0[3];
  v0[6] = v2;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[7] = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:);
  return v5(v2);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:), 0, 0);
}

{
  void *v0;
  uint64_t (*v1)();
  uint64_t v3;

  swift_task_dealloc();
  if (v0)
  {

    uint64_t v1 = specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:);
  }
  else
  {
    uint64_t v1 = specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:);
  }
  return MEMORY[0x270FA2498](v1, 0, 0);
}

{
  void *v0;
  int *v1;
  uint64_t v2;
  void *v3;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  uint64_t v2 = v0[2];
  uint64_t v1 = (int *)v0[3];
  v0[6] = v2;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[7] = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:);
  return v5(v2);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized GroupSessionMessengerController._makeTasks()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  GroupSession.activity.getter();
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.tabGroup);
  uint64_t v7 = v27;
  unint64_t v6 = v28;
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v26 = v11;
    *(_DWORD *)uint64_t v10 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_261746000, v8, v9, "Setting up message subscription tasks for activity %{public}s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v11, -1, -1);
    MEMORY[0x263E3FE70](v10, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v12 = type metadata accessor for TaskPriority();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v13(v4, 1, 1, v12);
  uint64_t v15 = v27;
  unint64_t v14 = v28;
  uint64_t v16 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSessionMessengerController<PersonalDeviceCoordinationActivity, PresenceUpdateMessage> and conformance GroupSessionMessengerController<A, B>, &demangling cache variable for type metadata for GroupSessionMessengerController<PersonalDeviceCoordinationActivity, PresenceUpdateMessage>);
  id v17 = (void *)swift_allocObject();
  v17[2] = v1;
  v17[3] = v16;
  v17[4] = v1;
  v17[5] = v15;
  v17[6] = v14;
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v18 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for specialized closure #1 in GroupSessionMessengerController._makeTasks(), (uint64_t)v17);
  v13(v4, 1, 1, v12);
  uint64_t v20 = v27;
  unint64_t v19 = v28;
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v1;
  v21[3] = v16;
  v21[4] = v1;
  v21[5] = v20;
  v21[6] = v19;
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v22 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for specialized closure #2 in GroupSessionMessengerController._makeTasks(), (uint64_t)v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Task<(), Never>>);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_261796D30;
  *(void *)(v23 + 32) = v18;
  *(void *)(v23 + 40) = v22;
  swift_bridgeObjectRelease();
  return v23;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  GroupSession.activity.getter();
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.tabGroup);
  uint64_t v7 = v27;
  unint64_t v6 = v28;
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v26 = v11;
    *(_DWORD *)uint64_t v10 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_261746000, v8, v9, "Setting up message subscription tasks for activity %{public}s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v11, -1, -1);
    MEMORY[0x263E3FE70](v10, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v12 = type metadata accessor for TaskPriority();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v13(v4, 1, 1, v12);
  uint64_t v15 = v27;
  unint64_t v14 = v28;
  uint64_t v16 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSessionMessengerController<CKShareCollaborationActivity, PresenceUpdateMessage> and conformance GroupSessionMessengerController<A, B>, &demangling cache variable for type metadata for GroupSessionMessengerController<CKShareCollaborationActivity, PresenceUpdateMessage>);
  id v17 = (void *)swift_allocObject();
  v17[2] = v1;
  v17[3] = v16;
  v17[4] = v1;
  v17[5] = v15;
  v17[6] = v14;
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v18 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for specialized closure #1 in GroupSessionMessengerController._makeTasks(), (uint64_t)v17);
  v13(v4, 1, 1, v12);
  uint64_t v20 = v27;
  unint64_t v19 = v28;
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v1;
  v21[3] = v16;
  v21[4] = v1;
  v21[5] = v20;
  v21[6] = v19;
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v22 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for specialized closure #2 in GroupSessionMessengerController._makeTasks(), (uint64_t)v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Task<(), Never>>);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_261796D30;
  *(void *)(v23 + 32) = v18;
  *(void *)(v23 + 40) = v22;
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t specialized closure #1 in GroupSessionMessengerController._makeTasks()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  v6[7] = v8;
  v6[8] = *(void *)(v8 - 8);
  v6[9] = swift_task_alloc();
  v6[10] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation.YieldResult);
  v6[11] = v9;
  v6[12] = *(void *)(v9 - 8);
  v6[13] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for GroupSessionMessenger.MessageContext();
  v6[14] = v10;
  v6[15] = *(void *)(v10 - 8);
  v6[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext)?);
  v6[17] = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<PresenceUpdateMessage>);
  v6[18] = v11;
  v6[19] = *(void *)(v11 - 8);
  v6[20] = swift_task_alloc();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<PresenceUpdateMessage>.Iterator);
  v6[21] = v12;
  v6[22] = *(void *)(v12 - 8);
  v6[23] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in GroupSessionMessengerController._makeTasks(), a4, 0);
}

{
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  v6[7] = v8;
  v6[8] = *(void *)(v8 - 8);
  v6[9] = swift_task_alloc();
  v6[10] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation.YieldResult);
  v6[11] = v9;
  v6[12] = *(void *)(v9 - 8);
  v6[13] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for GroupSessionMessenger.MessageContext();
  v6[14] = v10;
  v6[15] = *(void *)(v10 - 8);
  v6[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext)?);
  v6[17] = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<PresenceUpdateMessage>);
  v6[18] = v11;
  v6[19] = *(void *)(v11 - 8);
  v6[20] = swift_task_alloc();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<PresenceUpdateMessage>.Iterator);
  v6[21] = v12;
  v6[22] = *(void *)(v12 - 8);
  v6[23] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #1 in GroupSessionMessengerController._makeTasks(), a4, 0);
}

uint64_t specialized closure #1 in GroupSessionMessengerController._makeTasks()()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  GroupSessionMessenger.messages<A>(of:)();
  GroupSessionMessenger.Messages.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[24] = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSessionMessengerController<PersonalDeviceCoordinationActivity, PresenceUpdateMessage> and conformance GroupSessionMessengerController<A, B>, &demangling cache variable for type metadata for GroupSessionMessengerController<PersonalDeviceCoordinationActivity, PresenceUpdateMessage>);
  uint64_t v4 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSessionMessenger.Messages<PresenceUpdateMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator, &demangling cache variable for type metadata for GroupSessionMessenger.Messages<PresenceUpdateMessage>.Iterator);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[25] = v5;
  *uint64_t v5 = v0;
  v5[1] = specialized closure #1 in GroupSessionMessengerController._makeTasks();
  uint64_t v6 = v0[21];
  uint64_t v7 = v0[17];
  return MEMORY[0x270FA1E80](v7, v6, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_getObjectType();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v5 = v4;
    uint64_t v6 = specialized closure #1 in GroupSessionMessengerController._makeTasks();
    uint64_t v7 = v3;
    uint64_t v8 = v5;
  }
  else
  {
    uint64_t v7 = *(void *)(v2 + 32);
    uint64_t v6 = specialized closure #1 in GroupSessionMessengerController._makeTasks();
    uint64_t v8 = 0;
  }
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(uint64_t, uint64_t);
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;

  uint64_t v52 = v0;
  uint64_t v1 = (uint64_t *)v0[17];
  uint64_t v2 = v0[7];
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v0[8] + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = (uint64_t (*)(void))v0[1];
    return v27();
  }
  uint64_t v3 = (char *)v1 + *(int *)(v2 + 48);
  uint64_t v4 = v1[1];
  v48 = *v1;
  uint64_t v5 = v1[3];
  uint64_t v50 = v1[2];
  uint64_t v6 = v1[5];
  unint64_t v45 = v1[4];
  uint64_t v7 = v1[6];
  (*(void (**)(void, char *, void))(v0[15] + 32))(v0[16], v3, v0[14]);
  uint64_t v49 = v4;
  if (static Task<>.isCancelled.getter())
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain();
    uint64_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.info.getter();
    uint64_t v11 = os_log_type_enabled(v9, v10);
    uint64_t v13 = v0[22];
    uint64_t v12 = v0[23];
    uint64_t v14 = v0[21];
    uint64_t v43 = v0[14];
    unint64_t v46 = v0[16];
    uint64_t v15 = v0[6];
    uint64_t v16 = (void (**)(uint64_t, uint64_t))(v0[15] + 8);
    if (v11)
    {
      uint64_t v38 = v0[5];
      id v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      v51 = v18;
      *(_DWORD *)id v17 = 136446210;
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v15, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_261746000, v9, v10, "Did cancel receiving message subscription for activity %{public}s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v18, -1, -1);
      MEMORY[0x263E3FE70](v17, -1, -1);

      (*v16)(v46, v43);
      outlined consume of PresenceUpdateMessage.Kind(v48, v49);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    }
    else
    {

      swift_bridgeObjectRelease();
      (*v16)(v46, v43);
      outlined consume of PresenceUpdateMessage.Kind(v48, v49);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    }
    goto LABEL_13;
  }
  char v44 = v6;
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v47 = v7;
  unint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain();
  uint64_t v20 = Logger.logObject.getter();
  uint64_t v21 = static os_log_type_t.info.getter();
  uint64_t v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = v0[6];
  if (v22)
  {
    long long v24 = v0[5];
    uint64_t v25 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    v51 = v26;
    *(_DWORD *)uint64_t v25 = 136446210;
    *(void *)(v25 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, &v51);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_261746000, v20, v21, "Did receive message for activity %{public}s", (uint8_t *)v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v26, -1, -1);
    MEMORY[0x263E3FE70](v25, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v29 = v0[15];
  unint64_t v40 = v0[14];
  uint64_t v41 = v0[16];
  char v37 = v0[12];
  unint64_t v39 = v0[13];
  uint64_t v30 = (uint64_t *)v0[10];
  int64_t v42 = v0[11];
  uint64_t v31 = v0[9];
  int64_t v32 = (char *)v30 + *(int *)(v0[7] + 48);
  *uint64_t v30 = v48;
  v30[1] = v4;
  v30[2] = v50;
  v30[3] = v5;
  v30[4] = v45;
  v30[5] = v44;
  v30[6] = v47;
  (*(void (**)(char *))(v29 + 16))(v32);
  outlined init with copy of TaskPriority?((uint64_t)v30, v31, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  outlined copy of PresenceUpdateMessage.Kind(v48, v4);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  outlined destroy of TaskPriority?((uint64_t)v30, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v42);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v41, v40);
  outlined consume of PresenceUpdateMessage.Kind(v48, v4);
  swift_bridgeObjectRelease();
  int v33 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSessionMessenger.Messages<PresenceUpdateMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator, &demangling cache variable for type metadata for GroupSessionMessenger.Messages<PresenceUpdateMessage>.Iterator);
  int v34 = (void *)swift_task_alloc();
  v0[25] = v34;
  *int v34 = v0;
  v34[1] = specialized closure #1 in GroupSessionMessengerController._makeTasks();
  char v35 = v0[21];
  char v36 = v0[17];
  return MEMORY[0x270FA1E80](v36, v35, v33);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  GroupSessionMessenger.messages<A>(of:)();
  GroupSessionMessenger.Messages.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[24] = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSessionMessengerController<CKShareCollaborationActivity, PresenceUpdateMessage> and conformance GroupSessionMessengerController<A, B>, &demangling cache variable for type metadata for GroupSessionMessengerController<CKShareCollaborationActivity, PresenceUpdateMessage>);
  uint64_t v4 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSessionMessenger.Messages<PresenceUpdateMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator, &demangling cache variable for type metadata for GroupSessionMessenger.Messages<PresenceUpdateMessage>.Iterator);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[25] = v5;
  *uint64_t v5 = v0;
  v5[1] = specialized closure #1 in GroupSessionMessengerController._makeTasks();
  uint64_t v6 = v0[21];
  uint64_t v7 = v0[17];
  return MEMORY[0x270FA1E80](v7, v6, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_getObjectType();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v5 = v4;
    uint64_t v6 = specialized closure #1 in GroupSessionMessengerController._makeTasks();
    uint64_t v7 = v3;
    uint64_t v8 = v5;
  }
  else
  {
    uint64_t v7 = *(void *)(v2 + 32);
    uint64_t v6 = specialized closure #1 in GroupSessionMessengerController._makeTasks();
    uint64_t v8 = 0;
  }
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(uint64_t, uint64_t);
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;

  uint64_t v52 = v0;
  uint64_t v1 = (uint64_t *)v0[17];
  uint64_t v2 = v0[7];
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v0[8] + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = (uint64_t (*)(void))v0[1];
    return v27();
  }
  uint64_t v3 = (char *)v1 + *(int *)(v2 + 48);
  uint64_t v4 = v1[1];
  v48 = *v1;
  uint64_t v5 = v1[3];
  uint64_t v50 = v1[2];
  uint64_t v6 = v1[5];
  unint64_t v45 = v1[4];
  uint64_t v7 = v1[6];
  (*(void (**)(void, char *, void))(v0[15] + 32))(v0[16], v3, v0[14]);
  uint64_t v49 = v4;
  if (static Task<>.isCancelled.getter())
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain();
    uint64_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.info.getter();
    uint64_t v11 = os_log_type_enabled(v9, v10);
    uint64_t v13 = v0[22];
    uint64_t v12 = v0[23];
    uint64_t v14 = v0[21];
    uint64_t v43 = v0[14];
    unint64_t v46 = v0[16];
    uint64_t v15 = v0[6];
    uint64_t v16 = (void (**)(uint64_t, uint64_t))(v0[15] + 8);
    if (v11)
    {
      uint64_t v38 = v0[5];
      id v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      v51 = v18;
      *(_DWORD *)id v17 = 136446210;
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v15, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_261746000, v9, v10, "Did cancel receiving message subscription for activity %{public}s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v18, -1, -1);
      MEMORY[0x263E3FE70](v17, -1, -1);

      (*v16)(v46, v43);
      outlined consume of PresenceUpdateMessage.Kind(v48, v49);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    }
    else
    {

      swift_bridgeObjectRelease();
      (*v16)(v46, v43);
      outlined consume of PresenceUpdateMessage.Kind(v48, v49);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    }
    goto LABEL_13;
  }
  char v44 = v6;
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v47 = v7;
  unint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain();
  uint64_t v20 = Logger.logObject.getter();
  uint64_t v21 = static os_log_type_t.info.getter();
  uint64_t v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = v0[6];
  if (v22)
  {
    long long v24 = v0[5];
    uint64_t v25 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    v51 = v26;
    *(_DWORD *)uint64_t v25 = 136446210;
    *(void *)(v25 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, &v51);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_261746000, v20, v21, "Did receive message for activity %{public}s", (uint8_t *)v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v26, -1, -1);
    MEMORY[0x263E3FE70](v25, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v29 = v0[15];
  unint64_t v40 = v0[14];
  uint64_t v41 = v0[16];
  char v37 = v0[12];
  unint64_t v39 = v0[13];
  uint64_t v30 = (uint64_t *)v0[10];
  int64_t v42 = v0[11];
  uint64_t v31 = v0[9];
  int64_t v32 = (char *)v30 + *(int *)(v0[7] + 48);
  *uint64_t v30 = v48;
  v30[1] = v4;
  v30[2] = v50;
  v30[3] = v5;
  v30[4] = v45;
  v30[5] = v44;
  v30[6] = v47;
  (*(void (**)(char *))(v29 + 16))(v32);
  outlined init with copy of TaskPriority?((uint64_t)v30, v31, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  outlined copy of PresenceUpdateMessage.Kind(v48, v4);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  outlined destroy of TaskPriority?((uint64_t)v30, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v42);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v41, v40);
  outlined consume of PresenceUpdateMessage.Kind(v48, v4);
  swift_bridgeObjectRelease();
  int v33 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSessionMessenger.Messages<PresenceUpdateMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator, &demangling cache variable for type metadata for GroupSessionMessenger.Messages<PresenceUpdateMessage>.Iterator);
  int v34 = (void *)swift_task_alloc();
  v0[25] = v34;
  *int v34 = v0;
  v34[1] = specialized closure #1 in GroupSessionMessengerController._makeTasks();
  char v35 = v0[21];
  char v36 = v0[17];
  return MEMORY[0x270FA1E80](v36, v35, v33);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 16) = *(void *)(v0 + 208);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x263F8E628];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x263F8E658];
  return MEMORY[0x270FA0678](v2, v1, v3);
}

uint64_t specialized closure #2 in GroupSessionMessengerController._makeTasks()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[18] = a5;
  v6[19] = a6;
  v6[17] = a4;
  uint64_t v8 = type metadata accessor for Participants();
  v6[20] = v8;
  v6[21] = *(void *)(v8 - 8);
  v6[22] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Iterator);
  v6[23] = v9;
  v6[24] = *(void *)(v9 - 8);
  v6[25] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #2 in GroupSessionMessengerController._makeTasks(), a4, 0);
}

{
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6[18] = a5;
  v6[19] = a6;
  v6[17] = a4;
  uint64_t v8 = type metadata accessor for Participants();
  v6[20] = v8;
  v6[21] = *(void *)(v8 - 8);
  v6[22] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Iterator);
  v6[23] = v9;
  v6[24] = *(void *)(v9 - 8);
  v6[25] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #2 in GroupSessionMessengerController._makeTasks(), a4, 0);
}

uint64_t specialized closure #2 in GroupSessionMessengerController._makeTasks()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>);
  AsyncStream.makeAsyncIterator()();
  uint64_t v1 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSessionMessengerController<PersonalDeviceCoordinationActivity, PresenceUpdateMessage> and conformance GroupSessionMessengerController<A, B>, &demangling cache variable for type metadata for GroupSessionMessengerController<PersonalDeviceCoordinationActivity, PresenceUpdateMessage>);
  *(void *)(v0 + 208) = v1;
  *(_DWORD *)(v0 + 248) = *MEMORY[0x263F08F48];
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  uint64_t v4 = *(void *)(v0 + 184);
  return MEMORY[0x270FA1F68](v0 + 16, v2, v1, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #2 in GroupSessionMessengerController._makeTasks(), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  long long v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  void *v24;
  unint64_t updated;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v30 = v0;
  uint64_t v1 = *(void *)(v0 + 64);
  if (!v1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 184));
LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  uint64_t v2 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 72) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 88) = v2;
  *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 48);
  *(void *)(v0 + 120) = v1;
  if (static Task<>.isCancelled.getter())
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain();
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.info.getter();
    uint64_t v6 = os_log_type_enabled(v4, v5);
    uint64_t v8 = *(void *)(v0 + 192);
    uint64_t v7 = *(void *)(v0 + 200);
    uint64_t v9 = *(void *)(v0 + 184);
    uint64_t v10 = *(void *)(v0 + 152);
    if (v6)
    {
      uint64_t v11 = *(void *)(v0 + 144);
      unint64_t v28 = *(void *)(v0 + 200);
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v29 = v13;
      *(_DWORD *)uint64_t v12 = 136446210;
      *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_261746000, v4, v5, "Did cancel sending message subscription for activity %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v13, -1, -1);
      MEMORY[0x263E3FE70](v12, -1, -1);

      outlined consume of PresenceUpdateMessage.Kind(*(void *)(v0 + 72), *(void *)(v0 + 80));
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v28, v9);
    }
    else
    {

      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(*(void *)(v0 + 72), *(void *)(v0 + 80));
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    }
    goto LABEL_13;
  }
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  *(void *)(v0 + 224) = __swift_project_value_buffer(v14, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain();
  uint64_t v15 = Logger.logObject.getter();
  uint64_t v16 = static os_log_type_t.info.getter();
  id v17 = os_log_type_enabled(v15, v16);
  uint64_t v18 = *(void *)(v0 + 152);
  if (v17)
  {
    unint64_t v19 = *(void *)(v0 + 144);
    uint64_t v20 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v29 = v21;
    *(_DWORD *)uint64_t v20 = 136446210;
    *(void *)(v20 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, &v29);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_261746000, v15, v16, "Will send message to activity %{public}s", (uint8_t *)v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v21, -1, -1);
    MEMORY[0x263E3FE70](v20, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(void, void, void))(*(void *)(v0 + 168) + 104))(*(void *)(v0 + 176), *(unsigned int *)(v0 + 248), *(void *)(v0 + 160));
  long long v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v24;
  updated = lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  uint64_t v26 = lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  char *v24 = v0;
  v24[1] = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  uint64_t v27 = *(void *)(v0 + 176);
  return MEMORY[0x270EF2EE8](v0 + 72, v27, &type metadata for PresenceUpdateMessage, updated, v26);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 176);
  uint64_t v4 = *(void *)(*v1 + 168);
  uint64_t v5 = *(void *)(*v1 + 160);
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 136);
  if (v0) {
    uint64_t v7 = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  }
  else {
    uint64_t v7 = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  }
  return MEMORY[0x270FA2498](v7, v6, 0);
}

{
  uint64_t *v0;
  NSObject *v1;
  os_log_type_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  uint64_t v14 = v0;
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.info.getter();
  uint64_t v3 = os_log_type_enabled(v1, v2);
  uint64_t v4 = v0[19];
  if (v3)
  {
    uint64_t v5 = v0[18];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v13 = v7;
    *(_DWORD *)uint64_t v6 = 136446210;
    *(void *)(v6 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, &v13);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_261746000, v1, v2, "Did send message to activity %{public}s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v7, -1, -1);
    MEMORY[0x263E3FE70](v6, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  outlined consume of PresenceUpdateMessage.Kind(v0[9], v0[10]);
  swift_bridgeObjectRelease();
  uint64_t v8 = v0[26];
  uint64_t v9 = v0[17];
  uint64_t v10 = (void *)swift_task_alloc();
  v0[27] = (uint64_t)v10;
  *uint64_t v10 = v0;
  v10[1] = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  uint64_t v11 = v0[23];
  return MEMORY[0x270FA1F68](v0 + 2, v9, v8, v11);
}

{
  uint64_t *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  uint64_t v21 = v0;
  uint64_t v1 = (void *)v0[30];
  swift_bridgeObjectRetain();
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[30];
  uint64_t v8 = v0[19];
  if (v6)
  {
    uint64_t v9 = v0[18];
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = v12;
    *(_DWORD *)uint64_t v10 = 136446466;
    *(void *)(v10 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, &v20);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2112;
    uint64_t v13 = v7;
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v10 + 14) = v14;
    *uint64_t v11 = v14;

    _os_log_impl(&dword_261746000, v4, v5, "Failed to send message to activity %{public}s with error: %@", (uint8_t *)v10, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v11, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v12, -1, -1);
    MEMORY[0x263E3FE70](v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }

  outlined consume of PresenceUpdateMessage.Kind(v0[9], v0[10]);
  swift_bridgeObjectRelease();
  uint64_t v15 = v0[26];
  uint64_t v16 = v0[17];
  id v17 = (void *)swift_task_alloc();
  v0[27] = (uint64_t)v17;
  *id v17 = v0;
  v17[1] = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  uint64_t v18 = v0[23];
  return MEMORY[0x270FA1F68](v0 + 2, v16, v15, v18);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>);
  AsyncStream.makeAsyncIterator()();
  uint64_t v1 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSessionMessengerController<CKShareCollaborationActivity, PresenceUpdateMessage> and conformance GroupSessionMessengerController<A, B>, &demangling cache variable for type metadata for GroupSessionMessengerController<CKShareCollaborationActivity, PresenceUpdateMessage>);
  *(void *)(v0 + 208) = v1;
  *(_DWORD *)(v0 + 248) = *MEMORY[0x263F08F48];
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  uint64_t v4 = *(void *)(v0 + 184);
  return MEMORY[0x270FA1F68](v0 + 16, v2, v1, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #2 in GroupSessionMessengerController._makeTasks(), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  long long v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  void *v24;
  unint64_t updated;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v30 = v0;
  uint64_t v1 = *(void *)(v0 + 64);
  if (!v1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 184));
LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  uint64_t v2 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 72) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 88) = v2;
  *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 48);
  *(void *)(v0 + 120) = v1;
  if (static Task<>.isCancelled.getter())
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain();
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.info.getter();
    uint64_t v6 = os_log_type_enabled(v4, v5);
    uint64_t v8 = *(void *)(v0 + 192);
    uint64_t v7 = *(void *)(v0 + 200);
    uint64_t v9 = *(void *)(v0 + 184);
    uint64_t v10 = *(void *)(v0 + 152);
    if (v6)
    {
      uint64_t v11 = *(void *)(v0 + 144);
      unint64_t v28 = *(void *)(v0 + 200);
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v29 = v13;
      *(_DWORD *)uint64_t v12 = 136446210;
      *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_261746000, v4, v5, "Did cancel sending message subscription for activity %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v13, -1, -1);
      MEMORY[0x263E3FE70](v12, -1, -1);

      outlined consume of PresenceUpdateMessage.Kind(*(void *)(v0 + 72), *(void *)(v0 + 80));
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v28, v9);
    }
    else
    {

      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(*(void *)(v0 + 72), *(void *)(v0 + 80));
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    }
    goto LABEL_13;
  }
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  *(void *)(v0 + 224) = __swift_project_value_buffer(v14, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain();
  uint64_t v15 = Logger.logObject.getter();
  uint64_t v16 = static os_log_type_t.info.getter();
  id v17 = os_log_type_enabled(v15, v16);
  uint64_t v18 = *(void *)(v0 + 152);
  if (v17)
  {
    unint64_t v19 = *(void *)(v0 + 144);
    uint64_t v20 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v29 = v21;
    *(_DWORD *)uint64_t v20 = 136446210;
    *(void *)(v20 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, &v29);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_261746000, v15, v16, "Will send message to activity %{public}s", (uint8_t *)v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v21, -1, -1);
    MEMORY[0x263E3FE70](v20, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(void, void, void))(*(void *)(v0 + 168) + 104))(*(void *)(v0 + 176), *(unsigned int *)(v0 + 248), *(void *)(v0 + 160));
  long long v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v24;
  updated = lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  uint64_t v26 = lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  char *v24 = v0;
  v24[1] = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  uint64_t v27 = *(void *)(v0 + 176);
  return MEMORY[0x270EF2EE8](v0 + 72, v27, &type metadata for PresenceUpdateMessage, updated, v26);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 176);
  uint64_t v4 = *(void *)(*v1 + 168);
  uint64_t v5 = *(void *)(*v1 + 160);
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 136);
  if (v0) {
    uint64_t v7 = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  }
  else {
    uint64_t v7 = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  }
  return MEMORY[0x270FA2498](v7, v6, 0);
}

{
  uint64_t *v0;
  NSObject *v1;
  os_log_type_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  uint64_t v14 = v0;
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.info.getter();
  uint64_t v3 = os_log_type_enabled(v1, v2);
  uint64_t v4 = v0[19];
  if (v3)
  {
    uint64_t v5 = v0[18];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v13 = v7;
    *(_DWORD *)uint64_t v6 = 136446210;
    *(void *)(v6 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, &v13);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_261746000, v1, v2, "Did send message to activity %{public}s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v7, -1, -1);
    MEMORY[0x263E3FE70](v6, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  outlined consume of PresenceUpdateMessage.Kind(v0[9], v0[10]);
  swift_bridgeObjectRelease();
  uint64_t v8 = v0[26];
  uint64_t v9 = v0[17];
  uint64_t v10 = (void *)swift_task_alloc();
  v0[27] = (uint64_t)v10;
  *uint64_t v10 = v0;
  v10[1] = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  uint64_t v11 = v0[23];
  return MEMORY[0x270FA1F68](v0 + 2, v9, v8, v11);
}

{
  uint64_t *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  uint64_t v21 = v0;
  uint64_t v1 = (void *)v0[30];
  swift_bridgeObjectRetain();
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[30];
  uint64_t v8 = v0[19];
  if (v6)
  {
    uint64_t v9 = v0[18];
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = v12;
    *(_DWORD *)uint64_t v10 = 136446466;
    *(void *)(v10 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, &v20);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2112;
    uint64_t v13 = v7;
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v10 + 14) = v14;
    *uint64_t v11 = v14;

    _os_log_impl(&dword_261746000, v4, v5, "Failed to send message to activity %{public}s with error: %@", (uint8_t *)v10, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v11, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v12, -1, -1);
    MEMORY[0x263E3FE70](v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }

  outlined consume of PresenceUpdateMessage.Kind(v0[9], v0[10]);
  swift_bridgeObjectRelease();
  uint64_t v15 = v0[26];
  uint64_t v16 = v0[17];
  id v17 = (void *)swift_task_alloc();
  v0[27] = (uint64_t)v17;
  *id v17 = v0;
  v17[1] = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  uint64_t v18 = v0[23];
  return MEMORY[0x270FA1F68](v0 + 2, v16, v15, v18);
}

uint64_t specialized GroupSessionMessengerController.finish()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation);
  AsyncStream.Continuation.finish()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation);
  AsyncStream.Continuation.finish()();
  swift_beginAccess();
  uint64_t v1 = *(void *)(*(void *)(v0 + 144) + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
    uint64_t v3 = MEMORY[0x263F8EE60] + 8;
    uint64_t v4 = MEMORY[0x263F8E628];
    uint64_t v5 = MEMORY[0x263F8E658];
    do
    {
      ++v2;
      uint64_t v6 = swift_retain();
      MEMORY[0x263E3F340](v6, v3, v4, v5);
      swift_release();
    }
    while (v1 != v2);
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 144) = MEMORY[0x263F8EE78];
  return swift_bridgeObjectRelease();
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v16 = MEMORY[0x263F8EE78];
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_22:
    uint64_t v14 = *(void **)(*(void *)(a1 + 48) + 8 * v10);
    if (v14)
    {
      id v15 = v14;
      MEMORY[0x263E3F1C0]();
      if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
    }
  }
  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v11 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 2;
  if (v11 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 3;
  if (v11 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_26:
    swift_release();
    return v16;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(result, a2), (v6 & 1) != 0))
  {
    uint64_t v7 = (uint64_t *)(*(void *)(a3 + 56) + 48 * result);
    uint64_t v8 = *v7;
    unint64_t v9 = (void *)v7[1];
    uint64_t v10 = v7[2];
    uint64_t v11 = v7[3];
    uint64_t v12 = v7[4];
    uint64_t v13 = v7[5];
    id v14 = v9;
    swift_retain();
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  *a4 = v8;
  a4[1] = v9;
  a4[2] = v10;
  a4[3] = v11;
  a4[4] = v12;
  a4[5] = v13;
  return result;
}

uint64_t ParticipantPresenceCoordinator.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____WBParticipantPresenceCoordinator_delegate;
  swift_beginAccess();
  return MEMORY[0x263E3FF60](v1);
}

uint64_t ParticipantPresenceCoordinator.delegate.setter()
{
  return swift_unknownObjectRelease();
}

void (*ParticipantPresenceCoordinator.delegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____WBParticipantPresenceCoordinator_delegate;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x263E3FF60](v5);
  return ParticipantPresenceCoordinator.delegate.modify;
}

void ParticipantPresenceCoordinator.delegate.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t (*ParticipantPresenceCoordinator.ConnectionManagerStore.tabGroupIdentifiersToSharedConnections.modify())()
{
  return ParticipantPresenceCoordinator.ConnectionManagerStore.tabGroupIdentifiersToSharedConnections.modify;
}

uint64_t (*ParticipantPresenceCoordinator.ConnectionManagerStore.pausedSharedConnections.modify())()
{
  return ParticipantPresenceCoordinator.ConnectionManagerStore.pausedSharedConnections.modify;
}

uint64_t ParticipantPresenceCoordinator.ConnectionManagerStore.sharedConnectionManager(forTabGroup:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v25 = v10;
    *(_DWORD *)uint64_t v9 = 136446466;
    swift_bridgeObjectRetain();
    v24[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 1026;
    swift_beginAccess();
    uint64_t v11 = *(void *)(v3 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.getter(a1, a2, v11, v23);
    uint64_t v12 = v23[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)v23);
    swift_release();
    swift_bridgeObjectRelease();
    LODWORD(v24[0]) = v12 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_261746000, v7, v8, "Getting connection manager for tab group %{public}s, has manager: %{BOOL,public}d", (uint8_t *)v9, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v10, -1, -1);
    MEMORY[0x263E3FE70](v9, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
  }

  swift_beginAccess();
  uint64_t v13 = *(void *)(v3 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.getter(a1, a2, v13, v24);
  id v14 = (void *)v24[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)v24, (uint64_t)v22, &demangling cache variable for type metadata for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?);
  outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)v24, (uint64_t)&v25, &demangling cache variable for type metadata for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?);
  id v15 = v26;
  if (!v26) {
    return 0;
  }
  uint64_t v16 = v27;
  id v17 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();

  swift_release();
  swift_release();
  uint64_t v28 = v16;
  outlined release of [Task<(), Never>]((uint64_t)&v28);
  uint64_t v18 = v22[0];
  unint64_t v19 = (void *)v22[1];
  uint64_t v20 = v22[3];
  swift_retain();
  outlined consume of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v18, v19);
  return v20;
}

uint64_t ParticipantPresenceCoordinator.ConnectionManagerStore.updateSharedConnection(with:)(uint64_t a1)
{
  *(void *)(v2 + 240) = a1;
  *(void *)(v2 + 248) = v1;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.ConnectionManagerStore.updateSharedConnection(with:), v1, 0);
}

uint64_t ParticipantPresenceCoordinator.ConnectionManagerStore.updateSharedConnection(with:)()
{
  uint64_t v44 = v0;
  id v1 = objc_msgSend(*(id *)(v0 + 240), sel_recordID);
  id v2 = objc_msgSend(v1, sel_zoneID);

  id v3 = objc_msgSend(v2, sel_safari_tabGroupRootRecordName);
  if (!v3)
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.tabGroup);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v26, v27)) {
      goto LABEL_29;
    }
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl(&dword_261746000, v26, v27, "Trying to start a collaboration activity with a CKShare not attached to a tab group", v28, 2u);
    uint64_t v29 = v28;
    goto LABEL_28;
  }
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  *(void *)(v0 + 256) = v5;
  *(void *)(v0 + 264) = v7;
  uint64_t v8 = *(void *)(v0 + 248);
  if (*(unsigned char *)(v4 + 152) == 1)
  {
    swift_beginAccess();
    uint64_t v9 = *(void *)(v8 + 144);
    if (*(void *)(v9 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v7);
      if (v11)
      {
        uint64_t v12 = *(void **)(*(void *)(v9 + 56) + 16 * v10);
        id v13 = v12;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        id v14 = ParticipantPresenceCoordinator.ConnectionManagerStore.pausedSharedConnections.modify();
        uint64_t v16 = specialized Dictionary.subscript.modify((void *)(v0 + 144), v5, v7);
        id v17 = *v15;
        if (*v15)
        {
          uint64_t v18 = *(void **)(v0 + 240);
          *id v15 = v18;
          id v19 = v18;
        }
        ((void (*)(uint64_t, void))v16)(v0 + 144, 0);
        swift_bridgeObjectRelease();
        ((void (*)(uint64_t, void))v14)(v0 + 112, 0);
        if (one-time initialization token for tabGroup != -1) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        __swift_project_value_buffer(v20, (uint64_t)static Logger.tabGroup);
        swift_bridgeObjectRetain();
        uint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = (uint8_t *)swift_slowAlloc();
          uint64_t v24 = swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 136446210;
          uint64_t v43 = v24;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_261746000, v21, v22, "Updating paused connection share for tab group %{public}s", v23, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x263E3FE70](v24, -1, -1);
          MEMORY[0x263E3FE70](v23, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        goto LABEL_32;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v38))
    {
      unint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v43 = v40;
      *(_DWORD *)unint64_t v39 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_261746000, v26, v38, "No paused connections to update for tab group %{public}s", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v40, -1, -1);
      uint64_t v29 = v39;
      goto LABEL_28;
    }
LABEL_30:

    swift_bridgeObjectRelease_n();
    goto LABEL_31;
  }
  swift_beginAccess();
  uint64_t v30 = *(void *)(v8 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.getter(v5, v7, v30, (void *)(v0 + 64));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v0 + 64, v0 + 16, &demangling cache variable for type metadata for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?);
  uint64_t v31 = *(void *)(v0 + 24);
  *(void *)(v0 + 272) = v31;
  if (!v31)
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v26, v34)) {
      goto LABEL_30;
    }
    char v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    uint64_t v43 = v36;
    *(_DWORD *)char v35 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_261746000, v26, v34, "No active connections to update for tab group %{public}s", v35, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v36, -1, -1);
    uint64_t v29 = v35;
LABEL_28:
    MEMORY[0x263E3FE70](v29, -1, -1);
LABEL_29:

LABEL_31:
    uint64_t v12 = 0;
LABEL_32:
    uint64_t v41 = *(uint64_t (**)(void *))(v0 + 8);
    return v41(v12);
  }
  *(void *)(v0 + 280) = *(void *)(v0 + 32);
  long long v32 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v0 + 288) = v32;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.ConnectionManagerStore.updateSharedConnection(with:), v32, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  id v1 = *(void *)(v0 + 248);
  *(void *)(v0 + 304) = specialized CollaborationConnectionManager.currentGroupSessionProvider.getter();
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.ConnectionManagerStore.updateSharedConnection(with:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v11;

  id v1 = *(void *)(v0 + 304);
  if (v1)
  {
    id v2 = *(void **)(v0 + 240);
    swift_beginAccess();
    id v3 = *(void **)(v1 + 112);
    *(void *)(v1 + 112) = v2;
    uint64_t v4 = v2;

    swift_beginAccess();
    uint64_t v5 = *(void **)(v1 + 112);
    swift_retain();
    unint64_t v6 = v5;
    unint64_t v7 = CKShare.members.getter();

    *(void *)(v0 + 176) = v7;
    CurrentValueSubject.send(_:)();
    swift_release();

    swift_bridgeObjectRelease();
    swift_release();
  }
  uint64_t v8 = *(void *)(v0 + 280);
  uint64_t v9 = *(id *)(v0 + 272);
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.ConnectionManagerStore.updateSharedConnection(with:), v8, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  id v1 = specialized static ParticipantHandleMap.handlesToParticipantKindsForShare(_:)(*(void **)(v0 + 240));
  *(void *)(v0 + 312) = 0;
  id v2 = *(void *)(v0 + 248);
  *(void *)(*(void *)(v0 + 280) + 112) = v1;
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.ConnectionManagerStore.updateSharedConnection(with:), v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  long long v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;

  os_log_type_t v34 = v0;
  id v2 = v0[32];
  id v1 = v0[33];
  id v3 = v0[31];
  swift_beginAccess();
  swift_bridgeObjectRetain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v28 = *(void *)(v3 + 136);
  uint64_t v5 = v28;
  *(void *)(v3 + 136) = 0x8000000000000000;
  swift_bridgeObjectRetain();
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v1);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = (v6 & 1) == 0;
  uint64_t result = v8 + v9;
  if (__OFADD__(v8, v9))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v11 = v6;
  if (*(void *)(v5 + 24) >= result)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    }
  }
  else
  {
    id v13 = v0[32];
    uint64_t v12 = v0[33];
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, isUniquelyReferenced_nonNull_native);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
    if ((v11 & 1) != (v14 & 1))
    {
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    }
    unint64_t v7 = result;
  }
  if ((v11 & 1) == 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  uint64_t v26 = (void *)v0[34];
  os_log_type_t v27 = v0[37];
  uint64_t v16 = v0[32];
  id v15 = v0[33];
  id v17 = (void *)v0[30];
  uint64_t v18 = v0[31];
  id v19 = *(void *)(v28 + 56) + 48 * v7;
  uint64_t v20 = *(void **)(v19 + 8);
  uint64_t v21 = *(void *)(v19 + 32);
  os_log_type_t v22 = *(void *)(v19 + 40);
  uint64_t v29 = *(void *)v19;
  uint64_t v31 = *(_OWORD *)(v19 + 16);
  long long v32 = v21;
  uint64_t v33 = v22;
  uint64_t v23 = v17;

  uint64_t v30 = v23;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(&v29, 1, &v28, v7, v16, v15);
  outlined consume of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v29, v30);
  swift_bridgeObjectRelease();
  *(void *)(v18 + 136) = v28;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease_n();
  v0[28] = v27;
  outlined release of [Task<(), Never>]((uint64_t)(v0 + 28));
  uint64_t v24 = v0[34];
  uint64_t v25 = (uint64_t (*)(uint64_t))v0[1];
  return v25(v24);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  id v1 = v0[37];
  id v2 = (void *)v0[34];
  swift_release();
  swift_release();

  v0[29] = v1;
  outlined release of [Task<(), Never>]((uint64_t)(v0 + 29));
  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t ParticipantPresenceCoordinator.ConnectionManagerStore.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return MEMORY[0x270FA2418](v0);
}

uint64_t ParticipantPresenceCoordinator.currentConnectionState()()
{
  *(void *)(v1 + 72) = v0;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.currentConnectionState(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(*(void *)(v0 + 72) + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
  *(void *)(v0 + 80) = v1;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.currentConnectionState(), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = v0[10];
  id v2 = *(void *)(v1 + 112);
  v0[11] = v2;
  swift_retain();
  if (v2)
  {
    id v3 = ParticipantPresenceCoordinator.currentConnectionState();
    uint64_t v4 = v2;
  }
  else
  {
    v0[14] = MEMORY[0x263F8EE80];
    id v3 = ParticipantPresenceCoordinator.currentConnectionState();
    uint64_t v4 = v1;
  }
  return MEMORY[0x270FA2498](v3, v4, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 96) = *(void *)(*(void *)(v0 + 88) + 168);
  swift_release();
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.currentConnectionState(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;

  if (v0[12])
  {
    uint64_t v1 = v0[10];
    id v2 = ParticipantPresenceCoordinator.currentConnectionState();
  }
  else
  {
    id v3 = MEMORY[0x263F8EE80];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(-1, 0, 0xE000000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v0[14] = v3;
    uint64_t v1 = v0[10];
    id v2 = ParticipantPresenceCoordinator.currentConnectionState();
  }
  return MEMORY[0x270FA2498](v2, v1, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 104) = *(void *)(*(void *)(v0 + 80) + 128);
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.currentConnectionState(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = v0[13];
  id v2 = MEMORY[0x263F8EE80];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v1, 0, 0xE000000000000000, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v0[14] = v2;
  uint64_t v4 = v0[10];
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.currentConnectionState(), v4, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 80);
  swift_beginAccess();
  *(void *)(v0 + 120) = *(void *)(v1 + 136);
  swift_bridgeObjectRetain();
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.currentConnectionState(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t (*v16)();
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  id v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  id v3 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v0 + 224) = v3;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << v3;
  unint64_t v6 = *(void *)(v1 + 64);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  *(void *)(v0 + 128) = v2;
  unint64_t v7 = v4 & v6;
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = __clz(__rbit64(v7));
    unint64_t v10 = (v7 - 1) & v7;
LABEL_5:
    *(void *)(v0 + 136) = v8;
    *(void *)(v0 + 144) = v10;
    char v11 = (void *)(*(void *)(v1 + 48) + 16 * v9);
    *(void *)(v0 + 152) = *v11;
    *(void *)(v0 + 160) = v11[1];
    uint64_t v12 = (void *)(*(void *)(v1 + 56) + 48 * v9);
    id v13 = (void *)v12[1];
    *(void *)(v0 + 168) = v13;
    *(void *)(v0 + 176) = v12[2];
    id v14 = v12[3];
    *(void *)(v0 + 184) = v14;
    *(void *)(v0 + 192) = v12[4];
    *(void *)(v0 + 200) = v12[5];
    swift_bridgeObjectRetain();
    id v15 = v13;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v16 = ParticipantPresenceCoordinator.currentConnectionState();
    id v17 = v14;
    goto LABEL_26;
  }
  uint64_t v18 = 63 - v5;
  if (v18 > 0x7F)
  {
    id v19 = *(void *)(v1 + 72);
    if (v19)
    {
      uint64_t v8 = 1;
LABEL_9:
      unint64_t v10 = (v19 - 1) & v19;
      uint64_t v9 = __clz(__rbit64(v19)) + (v8 << 6);
      goto LABEL_5;
    }
    if (v18 >= 0xC0)
    {
      id v19 = *(void *)(v1 + 80);
      if (v19)
      {
        uint64_t v8 = 2;
        goto LABEL_9;
      }
      if (v18 >= 0x100)
      {
        id v19 = *(void *)(v1 + 88);
        if (v19)
        {
          uint64_t v8 = 3;
          goto LABEL_9;
        }
        if (v18 >= 0x140)
        {
          id v19 = *(void *)(v1 + 96);
          if (v19)
          {
            uint64_t v8 = 4;
            goto LABEL_9;
          }
          uint64_t v20 = 0;
          uint64_t v21 = v18 >> 6;
          if (v21 <= 5) {
            uint64_t v21 = 5;
          }
          os_log_type_t v22 = v21 - 5;
          while (v22 != v20)
          {
            id v19 = *(void *)(v1 + 104 + 8 * v20++);
            if (v19)
            {
              uint64_t v8 = v20 + 4;
              goto LABEL_9;
            }
          }
        }
      }
    }
  }
  uint64_t v23 = *(void *)(v0 + 80);
  swift_release();
  uint64_t v16 = ParticipantPresenceCoordinator.currentConnectionState();
  id v17 = v23;
LABEL_26:
  return MEMORY[0x270FA2498](v16, v17, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 208) = *(void *)(*(void *)(v0 + 184) + 168);
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.currentConnectionState(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t (*v12)();
  char v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  void *v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  int64_t v34;
  int64_t v35;
  char *v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;

  id v2 = *(void *)(v0 + 200);
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 152);
  id v3 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 128);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v0 + 64) = v5;
  if (!v1) {
    id v2 = -1;
  }
  uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
  unint64_t v10 = *(void *)(v5 + 16);
  char v11 = (v7 & 1) == 0;
  uint64_t v12 = (uint64_t (*)())(v10 + v11);
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_38;
  }
  id v13 = v7;
  if (*(void *)(*(void *)(v0 + 128) + 24) >= (uint64_t)v12)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v12 = (uint64_t (*)())specialized _NativeDictionary.copy()();
    }
    goto LABEL_12;
  }
  id v15 = *(void *)(v0 + 152);
  id v14 = *(void *)(v0 + 160);
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)((uint64_t)v12, isUniquelyReferenced_nonNull_native);
  uint64_t v12 = (uint64_t (*)())specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
  if ((v13 & 1) == (v7 & 1))
  {
    uint64_t v9 = (unint64_t)v12;
LABEL_12:
    id v17 = *(void **)(v0 + 64);
    if (v13)
    {
      *(void *)(v17[7] + 8 * v9) = v2;
      goto LABEL_16;
    }
    id v19 = *(void *)(v0 + 152);
    uint64_t v18 = *(void *)(v0 + 160);
    v17[(v9 >> 6) + 8] |= 1 << v9;
    uint64_t v20 = (void *)(v17[6] + 16 * v9);
    *uint64_t v20 = v19;
    v20[1] = v18;
    *(void *)(v17[7] + 8 * v9) = v2;
    uint64_t v21 = v17[2];
    os_log_type_t v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (!v22)
    {
      v17[2] = v23;
      swift_bridgeObjectRetain();
LABEL_16:
      uint64_t v24 = *(void **)(v0 + 168);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
      uint64_t v12 = (uint64_t (*)())swift_bridgeObjectRelease();
      uint64_t v25 = *(void *)(v0 + 136);
      uint64_t v26 = *(void *)(v0 + 144);
      *(void *)(v0 + 128) = v17;
      if (v26)
      {
        os_log_type_t v27 = (v26 - 1) & v26;
        uint64_t v28 = __clz(__rbit64(v26)) | (v25 << 6);
        uint64_t v12 = *(uint64_t (**)())(v0 + 120);
LABEL_18:
        *(void *)(v0 + 136) = v25;
        *(void *)(v0 + 144) = v27;
        uint64_t v29 = (void *)(*((void *)v12 + 6) + 16 * v28);
        *(void *)(v0 + 152) = *v29;
        *(void *)(v0 + 160) = v29[1];
        uint64_t v30 = (void *)(*((void *)v12 + 7) + 48 * v28);
        uint64_t v31 = (void *)v30[1];
        *(void *)(v0 + 168) = v31;
        *(void *)(v0 + 176) = v30[2];
        long long v32 = v30[3];
        *(void *)(v0 + 184) = v32;
        *(void *)(v0 + 192) = v30[4];
        *(void *)(v0 + 200) = v30[5];
        swift_bridgeObjectRetain();
        uint64_t v33 = v31;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v12 = ParticipantPresenceCoordinator.currentConnectionState();
        unint64_t v7 = v32;
        goto LABEL_34;
      }
      os_log_type_t v34 = v25 + 1;
      if (!__OFADD__(v25, 1))
      {
        char v35 = (unint64_t)((1 << *(unsigned char *)(v0 + 224)) + 63) >> 6;
        uint64_t v12 = *(uint64_t (**)())(v0 + 120);
        if (v34 >= v35) {
          goto LABEL_33;
        }
        uint64_t v36 = (char *)v12 + 64;
        uint64_t v37 = *((void *)v12 + v34 + 8);
        ++v25;
        if (v37)
        {
LABEL_22:
          os_log_type_t v27 = (v37 - 1) & v37;
          uint64_t v28 = __clz(__rbit64(v37)) + (v25 << 6);
          goto LABEL_18;
        }
        uint64_t v25 = v34 + 1;
        if (v34 + 1 >= v35) {
          goto LABEL_33;
        }
        uint64_t v37 = *(void *)&v36[8 * v25];
        if (v37) {
          goto LABEL_22;
        }
        uint64_t v25 = v34 + 2;
        if (v34 + 2 >= v35) {
          goto LABEL_33;
        }
        uint64_t v37 = *(void *)&v36[8 * v25];
        if (v37) {
          goto LABEL_22;
        }
        os_log_type_t v38 = v34 + 3;
        if (v38 >= v35)
        {
LABEL_33:
          unint64_t v39 = *(void *)(v0 + 80);
          swift_release();
          uint64_t v12 = ParticipantPresenceCoordinator.currentConnectionState();
          unint64_t v7 = v39;
LABEL_34:
          uint64_t v8 = 0;
          return MEMORY[0x270FA2498](v12, v7, v8);
        }
        uint64_t v37 = *(void *)&v36[8 * v38];
        if (v37)
        {
          uint64_t v25 = v38;
          goto LABEL_22;
        }
        while (1)
        {
          uint64_t v25 = v38 + 1;
          if (__OFADD__(v38, 1)) {
            break;
          }
          if (v25 >= v35) {
            goto LABEL_33;
          }
          uint64_t v37 = *(void *)&v36[8 * v25];
          ++v38;
          if (v37) {
            goto LABEL_22;
          }
        }
LABEL_40:
        __break(1u);
        return MEMORY[0x270FA2498](v12, v7, v8);
      }
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 80);
  swift_beginAccess();
  *(void *)(v0 + 216) = *(void *)(v1 + 144);
  swift_bridgeObjectRetain();
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.currentConnectionState(), 0, 0);
}

void ParticipantPresenceCoordinator.currentConnectionState()()
{
  int64_t v1 = 0;
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v2 + 64);
  int64_t v31 = (unint64_t)(63 - v4) >> 6;
  unint64_t v6 = *(void **)(v0 + 128);
  uint64_t v7 = v2 + 64;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v1 << 6);
      goto LABEL_22;
    }
    int64_t v10 = v1 + 1;
    if (__OFADD__(v1, 1)) {
      goto LABEL_41;
    }
    if (v10 >= v31) {
      break;
    }
    unint64_t v11 = *(void *)(v7 + 8 * v10);
    ++v1;
    if (!v11)
    {
      int64_t v1 = v10 + 1;
      if (v10 + 1 >= v31) {
        break;
      }
      unint64_t v11 = *(void *)(v7 + 8 * v1);
      if (!v11)
      {
        int64_t v1 = v10 + 2;
        if (v10 + 2 >= v31) {
          break;
        }
        unint64_t v11 = *(void *)(v7 + 8 * v1);
        if (!v11)
        {
          int64_t v12 = v10 + 3;
          if (v12 >= v31) {
            break;
          }
          unint64_t v11 = *(void *)(v7 + 8 * v12);
          if (!v11)
          {
            while (1)
            {
              int64_t v1 = v12 + 1;
              if (__OFADD__(v12, 1)) {
                goto LABEL_42;
              }
              if (v1 >= v31) {
                goto LABEL_33;
              }
              unint64_t v11 = *(void *)(v7 + 8 * v1);
              ++v12;
              if (v11) {
                goto LABEL_21;
              }
            }
          }
          int64_t v1 = v12;
        }
      }
    }
LABEL_21:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v1 << 6);
LABEL_22:
    id v13 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v9);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
    uint64_t v19 = v6[2];
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20))
    {
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return;
    }
    char v22 = v17;
    if (v6[3] >= v21)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v17) {
          goto LABEL_4;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v22) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
      unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
      if ((v22 & 1) != (v24 & 1))
      {
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        return;
      }
      unint64_t v18 = v23;
      if (v22)
      {
LABEL_4:
        *(void *)(v6[7] + 8 * v18) = -2;
        goto LABEL_5;
      }
    }
    v6[(v18 >> 6) + 8] |= 1 << v18;
    uint64_t v25 = (uint64_t *)(v6[6] + 16 * v18);
    *uint64_t v25 = v15;
    v25[1] = v14;
    *(void *)(v6[7] + 8 * v18) = -2;
    uint64_t v26 = v6[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_40;
    }
    v6[2] = v28;
    swift_bridgeObjectRetain();
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_33:
  swift_release();
  uint64_t v29 = *(void (**)(void *))(v30 + 8);
  v29(v6);
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.currentConnectionState()(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  unint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  *unint64_t v5 = v2;
  v5[1] = @objc closure #1 in ParticipantPresenceCoordinator.currentConnectionState();
  v5[9] = v4;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.currentConnectionState(), 0, 0);
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.currentConnectionState()()
{
  int64_t v1 = *(void (***)(void, void))(*v0 + 24);
  uint64_t v2 = *(void **)(*v0 + 16);
  uint64_t v6 = *v0;
  swift_task_dealloc();

  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(void, Class))v1)[2](v1, isa);

  _Block_release(v1);
  id v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

Swift::Void __swiftcall ParticipantPresenceCoordinator.beginDeviceCoordination()()
{
}

uint64_t closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation.BufferingPolicy);
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination(), 0, 0);
}

uint64_t closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination()()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 48) + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
  *(void *)(v0 + 80) = v1;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination(), v1, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 88) = *(void *)(*(void *)(v0 + 80) + 112);
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination(), 0, 0);
}

{
  void *v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (v0[11]) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  v0[12] = __swift_project_value_buffer(v2, (uint64_t)static Logger.tabGroup);
  uint64_t v3 = Logger.logObject.getter();
  id v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_261746000, v3, v4, "Starting personal device connection", v5, 2u);
    MEMORY[0x263E3FE70](v5, -1, -1);
  }
  uint64_t v7 = v0[8];
  uint64_t v6 = v0[9];
  unint64_t v8 = v0[7];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>);
  unint64_t v9 = swift_allocObject();
  v0[13] = v9;
  swift_defaultActor_initialize();
  *(void *)(v9 + 168) = 0;
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, *MEMORY[0x263F8F580], v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncBufferedQueue<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>);
  swift_allocObject();
  *(void *)(v9 + 176) = specialized AsyncBufferedQueue.init(bufferingPolicy:)(v6);
  int64_t v10 = v9 + *(void *)(*(void *)v9 + 160);
  unint64_t v11 = type metadata accessor for Participant();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *(void *)(v9 + *(void *)(*(void *)v9 + 168)) = MEMORY[0x263F8EE88];
  *(void *)(v9 + *(void *)(*(void *)v9 + 176)) = MEMORY[0x263F8EE78];
  *(void *)(v9 + 112) = 0;
  *(void *)(v9 + 120) = 0;
  *(_OWORD *)(v9 + 128) = xmmword_261796D40;
  *(void *)(v9 + 144) = 0x8000000261798080;
  *(void *)(v9 + 152) = closure #1 in closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination();
  *(void *)(v9 + 160) = 0;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination(), v9, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 104);
  swift_beginAccess();
  swift_retain();
  specialized FastSyncStateMachine.startActivity(_:)((uint64_t)&async function pointer to partial apply for specialized closure #1 in CollaborationConnectionManager.startActivity(), v1);
  *(void *)(v0 + 112) = 0;
  swift_endAccess();
  swift_release();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination(), 0, 0);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_261746000, v1, v2, "Did begin personal device connection activity", v3, 2u);
    MEMORY[0x263E3FE70](v3, -1, -1);
  }
  id v4 = v0[13];
  uint64_t v5 = v0[10];

  ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)(v4);
  v0[15] = v6;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination(), v5, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  uint64_t v1 = (void *)v0[14];
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  id v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    unint64_t v8 = v1;
    unint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[5] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    NSObject *v7 = v9;

    _os_log_impl(&dword_261746000, v4, v5, "Failed to start activity with error %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v7, -1, -1);
    MEMORY[0x263E3FE70](v6, -1, -1);
    swift_release();
  }
  else
  {
    swift_release();
  }
  swift_task_dealloc();
  int64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = v0[15];
  uint64_t v2 = v0[10];
  *(void *)(v2 + 112) = v0[13];
  swift_retain();
  swift_release();
  *(void *)(v2 + 120) = v1;
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination(), 0, 0);
}

{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:)
                                                + async function pointer to specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:));
  uint64_t v1 = *(id *)(v0 + 48);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination();
  uint64_t v3 = *(void *)(v0 + 80);
  id v4 = *(void *)(v0 + 48);
  return v6(v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();

  if (v0) {
    uint64_t v3 = closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination();
  }
  else {
    uint64_t v3 = closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination();
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  uint64_t v1 = (void *)v0[17];
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  id v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    unint64_t v8 = v1;
    unint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[5] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    NSObject *v7 = v9;

    _os_log_impl(&dword_261746000, v4, v5, "Failed to start activity with error %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v7, -1, -1);
    MEMORY[0x263E3FE70](v6, -1, -1);
    swift_release();
  }
  else
  {
    swift_release();
  }
  swift_task_dealloc();
  int64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t closure #1 in closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination()()
{
  return PersonalGroupSessionProvider.init(id:activity:)();
}

double ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  unint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = v1;
  swift_retain();
  id v9 = v1;
  uint64_t v10 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), (uint64_t)v8);
  v7(v5, 1, 1, v6);
  unint64_t v11 = (void *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = a1;
  v11[5] = v9;
  swift_retain();
  id v12 = v9;
  uint64_t v13 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Task<(), Never>>);
  uint64_t v14 = swift_allocObject();
  *(void *)&double result = 2;
  *(_OWORD *)(v14 + 16) = xmmword_261796D30;
  *(void *)(v14 + 32) = v10;
  *(void *)(v14 + 40) = v13;
  return result;
}

Swift::Void __swiftcall ParticipantPresenceCoordinator.endDeviceCoordination()()
{
}

uint64_t ParticipantPresenceCoordinator.beginDeviceCoordination()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = 0;
  v10[3] = 0;
  v10[4] = v3;
  int v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  id v12 = v3;
  if (v11 == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v7, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (v10[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v15;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
  }
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = v10;
  if (v14 | v13)
  {
    v18[0] = 0;
    v18[1] = 0;
    v18[2] = v13;
    v18[3] = v14;
  }
  swift_task_create();
  return swift_release();
}

uint64_t closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v4 + 48) = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination(), 0, 0);
}

uint64_t closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination()()
{
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[7] = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_261746000, v2, v3, "Ending personal device connection", v4, 2u);
    MEMORY[0x263E3FE70](v4, -1, -1);
  }
  uint64_t v5 = (char *)v0[5];

  uint64_t v6 = *(void *)&v5[OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore];
  v0[8] = v6;
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ParticipantPresenceCoordinator.ConnectionManagerStore.pauseSharedConnections(using:)
                                        + async function pointer to specialized ParticipantPresenceCoordinator.ConnectionManagerStore.pauseSharedConnections(using:));
  uint64_t v7 = v5;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[9] = v8;
  *uint64_t v8 = v0;
  v8[1] = closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination();
  return v10(v6);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  uint64_t v2 = *(void **)(*(void *)v0 + 40);
  swift_task_dealloc();

  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination(), v1, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 80) = *(void *)(*(void *)(v0 + 64) + 120);
  swift_bridgeObjectRetain();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    os_log_type_t v3 = v1 + 32;
    uint64_t v4 = MEMORY[0x263F8EE60] + 8;
    uint64_t v5 = MEMORY[0x263F8E628];
    uint64_t v6 = MEMORY[0x263F8E658];
    do
    {
      v3 += 8;
      uint64_t v7 = swift_retain();
      MEMORY[0x263E3F340](v7, v4, v5, v6);
      swift_release();
      --v2;
    }
    while (v2);
  }
  uint64_t v8 = *(void *)(v0 + 64);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination(), v8, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 88) = *(void *)(*(void *)(v0 + 64) + 112);
  swift_retain();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(v0 + 88);
  if (v1)
  {
    uint64_t v2 = closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination();
  }
  else
  {
    os_log_type_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_261746000, v3, v4, "Failed to leave activity", v5, 2u);
      MEMORY[0x263E3FE70](v5, -1, -1);
    }
    uint64_t v6 = *(void *)(v0 + 64);

    uint64_t v2 = closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination();
    uint64_t v1 = v6;
  }
  return MEMORY[0x270FA2498](v2, v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 48);
  os_log_type_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  swift_beginAccess();
  swift_retain();
  *(unsigned char *)(v0 + 96) = specialized FastSyncStateMachine.leaveActivity(priority:_:)(v2, (uint64_t)&async function pointer to partial apply for specialized closure #1 in CollaborationConnectionManager.leaveActivity(), v1) & 1;
  outlined destroy of TaskPriority?(v2, &demangling cache variable for type metadata for TaskPriority?);
  swift_endAccess();
  swift_release_n();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination(), 0, 0);
}

{
  uint64_t v0;
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(unsigned __int8 *)(v0 + 96);
  uint64_t v2 = Logger.logObject.getter();
  if (v1 == 1)
  {
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v2, v3)) {
      goto LABEL_7;
    }
    uint64_t v4 = "Did leave personal device connection activity";
  }
  else
  {
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v2, v3)) {
      goto LABEL_7;
    }
    uint64_t v4 = "Failed to leave activity";
  }
  uint64_t v5 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v5 = 0;
  _os_log_impl(&dword_261746000, v2, v3, v4, v5, 2u);
  MEMORY[0x263E3FE70](v5, -1, -1);
LABEL_7:
  uint64_t v6 = *(void *)(v0 + 64);

  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination(), v6, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 64);
  *(void *)(v1 + 112) = 0;
  swift_release();
  *(void *)(v1 + 120) = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext)?);
  v5[20] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Iterator);
  v5[21] = v6;
  v5[22] = *(void *)(v6 - 8);
  v5[23] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), 0, 0);
}

uint64_t closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)()
{
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[24] = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_261746000, v2, v3, "Will begin receiving messages in personal device connection", v4, 2u);
    MEMORY[0x263E3FE70](v4, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>);
  AsyncStream.makeAsyncIterator()();
  uint64_t v5 = OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore;
  v0[25] = OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore;
  v0[26] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[27] = v6;
  void *v6 = v0;
  v6[1] = closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
  uint64_t v7 = v0[20];
  uint64_t v8 = v0[21];
  return MEMORY[0x270FA1F68](v7, 0, 0, v8);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), 0, 0);
}

{
  uint64_t v0;
  long long *v1;
  uint64_t v2;
  long long v3;
  long long v4;
  long long v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t (*v11)(void);
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v1 = *(long long **)(v0 + 160);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  if ((*(unsigned int (**)(long long *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 176) + 8))(*(void *)(v0 + 184), *(void *)(v0 + 168));
LABEL_5:
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_261746000, v8, v9, "Did finnish receiving messages in personal device connection", v10, 2u);
      MEMORY[0x263E3FE70](v10, -1, -1);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  os_log_type_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  *(void *)(v0 + 64) = *((void *)v1 + 6);
  *(_OWORD *)(v0 + 32) = v4;
  *(_OWORD *)(v0 + 48) = v5;
  *(_OWORD *)(v0 + 16) = v3;
  uint64_t v6 = *(int *)(v2 + 48);
  *(_DWORD *)(v0 + 280) = v6;
  if (static Task<>.isCancelled.getter())
  {
    (*(void (**)(void, void))(*(void *)(v0 + 176) + 8))(*(void *)(v0 + 184), *(void *)(v0 + 168));
    outlined release of PresenceUpdateMessage((uint64_t *)(v0 + 16));
    uint64_t v7 = type metadata accessor for GroupSessionMessenger.MessageContext();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))((uint64_t)v1 + v6, v7);
    goto LABEL_5;
  }
  uint64_t v13 = Logger.logObject.getter();
  uint64_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_261746000, v13, v14, "Did receive message for personal device connection", v15, 2u);
    MEMORY[0x263E3FE70](v15, -1, -1);
  }
  uint64_t v16 = *(void *)(v0 + 200);
  char v17 = *(void *)(v0 + 152);

  unint64_t v18 = *(void *)(v17 + v16);
  *(void *)(v0 + 224) = v18;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), v18, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  v0[16] = ParticipantPresenceStore.handleCurrentUserPresenceUpdateMessage(_:in:)((uint64_t)(v0 + 2), 0, 0);
  v0[17] = v1;
  v0[29] = v1;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  if (*(void *)(v0 + 232))
  {
    uint64_t v1 = *(void *)(v0 + 208);
    uint64_t v2 = *(void *)(v0 + 152);
    *(void *)(v0 + 240) = *(void *)(v0 + 128);
    os_log_type_t v3 = *(void *)(v2 + v1);
    *(void *)(v0 + 248) = v3;
    return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), v3, 0);
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 160) + *(int *)(v0 + 280);
    outlined release of PresenceUpdateMessage((uint64_t *)(v0 + 16));
    uint64_t v5 = type metadata accessor for GroupSessionMessenger.MessageContext();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v6;
    void *v6 = v0;
    v6[1] = closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
    uint64_t v7 = *(void *)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 168);
    return MEMORY[0x270FA1F68](v7, 0, 0, v8);
  }
}

{
  void *v0;
  uint64_t v2;

  v0[32] = ParticipantPresenceCoordinator.ConnectionManagerStore.sharedConnectionManager(forTabGroup:)(v0[30], v0[29]);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;

  if (*(void *)(v0 + 256))
  {
    uint64_t v1 = *(void *)(v0 + 64);
    *(void *)(v0 + 264) = v1;
    *(_OWORD *)(v0 + 88) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 48);
    *(void *)(v0 + 120) = v1;
    uint64_t v9 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:)
                                         + async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:));
    swift_bridgeObjectRetain();
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 272) = v2;
    *uint64_t v2 = v0;
    v2[1] = closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
    return v9(v0 + 72);
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 160) + *(int *)(v0 + 280);
    outlined release of PresenceUpdateMessage((uint64_t *)(v0 + 16));
    uint64_t v5 = type metadata accessor for GroupSessionMessenger.MessageContext();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v6;
    void *v6 = v0;
    v6[1] = closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
    uint64_t v7 = *(void *)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 168);
    return MEMORY[0x270FA1F68](v7, 0, 0, v8);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  outlined consume of PresenceUpdateMessage.Kind(0, 0);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 160) + *(int *)(v0 + 280);
  outlined release of PresenceUpdateMessage((uint64_t *)(v0 + 16));
  uint64_t v2 = type metadata accessor for GroupSessionMessenger.MessageContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v3;
  *os_log_type_t v3 = v0;
  v3[1] = closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 168);
  return MEMORY[0x270FA1F68](v4, 0, 0, v5);
}

uint64_t closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[13] = a4;
  v5[14] = a5;
  uint64_t v6 = type metadata accessor for Participants();
  v5[15] = v6;
  v5[16] = *(void *)(v6 - 8);
  v5[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  v5[18] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Participant();
  v5[19] = v7;
  v5[20] = *(void *)(v7 - 8);
  v5[21] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Iterator);
  v5[22] = v8;
  v5[23] = *(void *)(v8 - 8);
  v5[24] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), 0, 0);
}

uint64_t closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)()
{
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 200) = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_261746000, v2, v3, "Will begin observing active participant changes in personal device connection", v4, 2u);
    MEMORY[0x263E3FE70](v4, -1, -1);
  }
  uint64_t v5 = *(void *)(v0 + 104);

  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), v5, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 208) = specialized CollaborationConnectionManager.participantUpdates()((uint64_t (*)(BOOL, uint64_t, uint64_t, unint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 104);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>);
  AsyncStream.makeAsyncIterator()();
  uint64_t v2 = OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore;
  *(void *)(v0 + 216) = *(void *)(*(void *)v1 + 160);
  *(void *)(v0 + 224) = v2;
  *(void *)(v0 + 232) = OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore;
  swift_beginAccess();
  *(_DWORD *)(v0 + 384) = *MEMORY[0x263F08F50];
  *(void *)(v0 + 240) = MEMORY[0x263F8EE88];
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v3;
  *os_log_type_t v3 = v0;
  v3[1] = closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
  uint64_t v4 = *(void *)(v0 + 176);
  return MEMORY[0x270FA1F68](v0 + 96, 0, 0, v4);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t (*v5)(void);
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = v0[12];
  v0[32] = v1;
  if (!v1)
  {
    (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
    goto LABEL_5;
  }
  if (static Task<>.isCancelled.getter())
  {
    (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_261746000, v2, v3, "Did finish observering active participant changes in personal device connection", v4, 2u);
      MEMORY[0x263E3FE70](v4, -1, -1);
    }
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  uint64_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_261746000, v7, v8, "Active participants did change in personal device connection", v9, 2u);
    MEMORY[0x263E3FE70](v9, -1, -1);
  }
  uint64_t v10 = v0[13];

  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), v10, 0);
}

{
  void *v0;
  uint64_t v2;

  outlined init with copy of TaskPriority?(v0[13] + v0[27], v0[18], &demangling cache variable for type metadata for Participant?);
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  os_log_type_t v3 = v0[18];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of TaskPriority?(v3, &demangling cache variable for type metadata for Participant?);
    uint64_t v4 = v0[32];
  }
  else
  {
    uint64_t v5 = v0[32];
    uint64_t v6 = v0[21];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v6, v3, v1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Participant>);
    uint64_t v7 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_261796D50;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 16))(v8 + v7, v6, v1);
    uint64_t v4 = specialized _NativeSet.subtracting<A>(_:)(v8, v5);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v1);
  }
  v0[33] = v4;
  uint64_t v9 = *(void *)(v0[14] + v0[28]);
  v0[34] = v9;
  v0[35] = *(void *)(v4 + 16);
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), v9, 0);
}

{
  uint64_t v0;

  *(void *)(*(void *)(v0 + 272) + 128) = *(void *)(v0 + 280);
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  uint64_t v1 = v0[33];
  uint64_t v2 = v0[30];
  if (*(void *)(v2 + 16) <= *(void *)(v1 + 16) >> 3)
  {
    uint64_t v8 = v0[33];
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v2);
    swift_bridgeObjectRelease();
    os_log_type_t v3 = v8;
  }
  else
  {
    swift_bridgeObjectRetain();
    os_log_type_t v3 = specialized _NativeSet.subtracting<A>(_:)(v2, v1);
    swift_bridgeObjectRelease();
  }
  v0[36] = v3;
  if (*(void *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v0[14] + v0[29]);
    v0[37] = v4;
    return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), v4, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    v0[30] = v0[33];
    uint64_t v5 = (void *)swift_task_alloc();
    v0[31] = v5;
    *uint64_t v5 = v0;
    v5[1] = closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
    uint64_t v6 = v0[22];
    return MEMORY[0x270FA1F68](v0 + 12, 0, 0, v6);
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = (void *)v0[37];
  uint64_t v2 = v0[13];
  os_log_type_t v3 = v1[18];
  v0[38] = v3;
  uint64_t v4 = v1[19];
  v0[39] = v4;
  v0[40] = v1[20];
  v0[41] = v1[21];
  v0[42] = v1[22];
  v0[43] = v1[23];
  v0[44] = v1[24];
  outlined copy of PresenceUpdateMessage.Kind(v3, v4);
  swift_bridgeObjectRetain();
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  long long v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = *(void *)(*(void *)(v0 + 104) + 168);
  *(void *)(v0 + 360) = v1;
  uint64_t v2 = *(void *)(v0 + 352);
  if (v1)
  {
    os_log_type_t v3 = *(_OWORD *)(v0 + 320);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 304);
    *(_OWORD *)(v0 + 32) = v3;
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 336);
    *(void *)(v0 + 64) = v2;
    swift_retain();
    return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), v1, 0);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 304);
    uint64_t v4 = *(void *)(v0 + 312);
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v5, v4);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 240) = *(void *)(v0 + 264);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v6;
    void *v6 = v0;
    v6[1] = closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
    uint64_t v7 = *(void *)(v0 + 176);
    return MEMORY[0x270FA1F68](v0 + 96, 0, 0, v7);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unint64_t updated;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 128);
  **(void **)(v0 + 136) = *(void *)(v0 + 288);
  (*(void (**)(void))(v1 + 104))();
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 368) = v2;
  updated = lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  uint64_t v4 = lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  *uint64_t v2 = v0;
  v2[1] = closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
  uint64_t v5 = *(void *)(v0 + 136);
  return MEMORY[0x270EF2EE8](v0 + 16, v5, &type metadata for PresenceUpdateMessage, updated, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = *(void *)(*(void *)v1 + 136);
  os_log_type_t v3 = *(void *)(*(void *)v1 + 128);
  uint64_t v4 = *(void *)(*(void *)v1 + 120);
  uint64_t v5 = *(void **)v1;
  v5[47] = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    uint64_t v6 = v5[45];
    return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), v6, 0);
  }
  else
  {
    uint64_t v8 = v5[38];
    uint64_t v7 = v5[39];
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of PresenceUpdateMessage.Kind(v8, v7);
    swift_bridgeObjectRelease();
    v5[30] = v5[33];
    uint64_t v9 = (void *)swift_task_alloc();
    v5[31] = v9;
    *uint64_t v9 = v5;
    v9[1] = closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
    uint64_t v10 = v5[22];
    return MEMORY[0x270FA1F68](v5 + 12, 0, 0, v10);
  }
}

{
  uint64_t v0;

  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), *(void *)(v0 + 104), 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v1 = *(void *)(v0 + 312);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of PresenceUpdateMessage.Kind(v2, v1);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), 0, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v1 = (void *)v0[47];
  uint64_t v2 = v1;
  os_log_type_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[47];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    uint64_t v10 = v7;
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v8 + 4) = v11;
    *uint64_t v9 = v11;

    _os_log_impl(&dword_261746000, v4, v5, "Failed to send message to new participants in personal device connection, error: %@", (uint8_t *)v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v9, -1, -1);
    MEMORY[0x263E3FE70](v8, -1, -1);
  }
  else
  {
  }
  v0[30] = v0[33];
  id v12 = (void *)swift_task_alloc();
  v0[31] = v12;
  void *v12 = v0;
  v12[1] = closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
  uint64_t v13 = v0[22];
  return MEMORY[0x270FA1F68](v0 + 12, 0, 0, v13);
}

Swift::Void __swiftcall ParticipantPresenceCoordinator.beginCollaborationForShare(_:)(CKShare a1)
{
}

uint64_t closure #1 in ParticipantPresenceCoordinator.beginCollaborationForShare(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.beginCollaborationForShare(_:), 0, 0);
}

uint64_t closure #1 in ParticipantPresenceCoordinator.beginCollaborationForShare(_:)()
{
  uint64_t v1 = (char *)v0[4];
  uint64_t v2 = (void *)v0[5];
  uint64_t v3 = *(void *)&v1[OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore];
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:)
                                                                   + async function pointer to specialized ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:));
  uint64_t v4 = v1;
  id v5 = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[6] = v6;
  void *v6 = v0;
  v6[1] = closure #1 in ParticipantPresenceCoordinator.beginCollaborationForShare(_:);
  uint64_t v7 = v0[4];
  uint64_t v8 = v0[5];
  return v10(v8, v3, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = *(void **)(*v1 + 40);
  uint64_t v3 = *(void **)(*v1 + 32);
  uint64_t v4 = *v1;
  *(void *)(v4 + 56) = v0;
  swift_task_dealloc();

  if (v0)
  {
    return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.beginCollaborationForShare(_:), 0, 0);
  }
  else
  {
    id v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;

  BOOL v27 = v0;
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[7];
  uint64_t v2 = (void *)v0[5];
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.tabGroup);
  uint64_t v4 = v2;
  id v5 = v1;
  uint64_t v6 = v4;
  uint64_t v7 = v1;
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.error.getter();
  uint64_t v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = (void *)v0[7];
  id v12 = (void *)v0[5];
  if (v10)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v26 = v25;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v15 = objc_msgSend(v12, sel_recordID);
    uint64_t v16 = objc_msgSend(v15, sel_zoneID);

    char v17 = objc_msgSend(v16, sel_zoneName);
    unint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    BOOL v20 = v19;

    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v13 + 12) = 2112;
    uint64_t v21 = v11;
    char v22 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v22;

    _os_log_impl(&dword_261746000, v8, v9, "Failed to start shared activity for share: %s with error %@", (uint8_t *)v13, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v14, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v25, -1, -1);
    MEMORY[0x263E3FE70](v13, -1, -1);
  }
  else
  {
  }
  unint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

Swift::Void __swiftcall ParticipantPresenceCoordinator.shareDidUpdate(_:)(CKShare a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v3 - 8);
  id v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  uint64_t v8 = (CKShare *)swift_allocObject();
  v8[2].super.super.Class isa = 0;
  v8[3].super.super.Class isa = 0;
  v8[4].super.super.Class isa = v1;
  v8[5].super.super.Class isa = a1.super.super.isa;
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  uint64_t v10 = v1;
  uint64_t v11 = a1.super.super.isa;
  if (v9 == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v5, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
    if (v8[2].super.super.isa)
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      if (v14 | v12)
      {
        v15[0] = 0;
        v15[1] = 0;
        v15[2] = v12;
        v15[3] = v14;
      }
    }
  }
  swift_task_create();
  swift_release();
}

uint64_t closure #1 in ParticipantPresenceCoordinator.shareDidUpdate(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v8;
  *uint64_t v8 = v5;
  v8[2] = a5;
  v8[3] = a4;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator._updateActivityForShare(_:), 0, 0);
}

uint64_t ParticipantPresenceCoordinator._updateActivityForShare(_:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator._updateActivityForShare(_:), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = *v2;
  *(void *)(v3 + 56) = a1;
  *(void *)(v3 + 64) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = ParticipantPresenceCoordinator._updateActivityForShare(_:);
  }
  else {
    uint64_t v4 = ParticipantPresenceCoordinator._updateActivityForShare(_:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t ParticipantPresenceCoordinator._updateActivityForShare(_:)()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_recordID);
  id v2 = objc_msgSend(v1, sel_zoneID);

  id v3 = objc_msgSend(v2, sel_safari_tabGroupRootRecordName);
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 24);
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    *(void *)(v0 + 32) = v5;
    *(void *)(v0 + 40) = v7;
    uint64_t v8 = *(void *)(v4 + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
    int v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v9;
    *int v9 = v0;
    v9[1] = ParticipantPresenceCoordinator._updateActivityForShare(_:);
    v9[30] = *(void *)(v0 + 16);
    v9[31] = v8;
    return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.ConnectionManagerStore.updateSharedConnection(with:), v8, 0);
  }
  else
  {
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  if (v0[7])
  {
    id v1 = *(void *)(v0[3] + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
    v0[9] = v1;
    return MEMORY[0x270FA2498](ParticipantPresenceCoordinator._updateActivityForShare(_:), v1, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    id v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  id v1 = ParticipantPresenceStore.replace(share:with:in:)(*(void **)(v0 + 56), *(void **)(v0 + 16), *(void **)(v0 + 32), *(void **)(v0 + 40));
  id v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 80) = v1;
  *(void *)(v0 + 88) = v3;
  *(void *)(v0 + 96) = v5;
  *(void *)(v0 + 104) = v7;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator._updateActivityForShare(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for MainActor();
  *(void *)(v0 + 112) = static MainActor.shared.getter();
  id v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator._updateActivityForShare(_:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  id v1 = *(void *)(v0 + 104);
  id v2 = *(void *)(v0 + 96);
  swift_release();
  specialized ParticipantPresenceCoordinator._notifyStoreUpdates(_:)(v2, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator._updateActivityForShare(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Void __swiftcall ParticipantPresenceCoordinator.endCollaborationForShare(_:)(CKShare a1)
{
}

uint64_t ParticipantPresenceCoordinator.beginCollaborationForShare(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = 0;
  v10[3] = 0;
  v10[4] = v3;
  v10[5] = a1;
  id v11 = v3;
  id v12 = a1;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, a3, (uint64_t)v10);
  return swift_release();
}

uint64_t closure #1 in ParticipantPresenceCoordinator.endCollaborationForShare(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.endCollaborationForShare(_:), 0, 0);
}

uint64_t closure #1 in ParticipantPresenceCoordinator.endCollaborationForShare(_:)()
{
  id v1 = (char *)v0[2];
  id v2 = (void *)v0[3];
  uint64_t v3 = *(void *)&v1[OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore];
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized ParticipantPresenceCoordinator.ConnectionManagerStore.removeSharedConnection(forShare:cleanUpIfNeeedUsing:)
                                                         + async function pointer to specialized ParticipantPresenceCoordinator.ConnectionManagerStore.removeSharedConnection(forShare:cleanUpIfNeeedUsing:));
  uint64_t v4 = v1;
  id v5 = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[4] = v6;
  void *v6 = v0;
  v6[1] = closure #1 in ParticipantPresenceCoordinator.endCollaborationForShare(_:);
  uint64_t v7 = v0[3];
  return v9(v7, v3, v7);
}

{
  uint64_t *v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;

  id v1 = *(void **)(*v0 + 24);
  id v2 = *(void **)(*v0 + 16);
  id v5 = *v0;
  swift_task_dealloc();

  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

void @objc ParticipantPresenceCoordinator.beginCollaborationForShare(_:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  id v12 = (void *)swift_allocObject();
  v12[2] = 0;
  uint64_t v12[3] = 0;
  v12[4] = a1;
  v12[5] = a3;
  id v13 = a3;
  id v14 = a1;
  id v15 = v13;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, a5, (uint64_t)v12);
  swift_release();
}

void *closure #1 in ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:)(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
  swift_allocObject();
  swift_bridgeObjectRetain_n();
  return specialized CKShareGroupSessionProvider.init(id:activity:share:)(v3, v4, v3, v4, a2);
}

uint64_t ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = objc_msgSend(a2, sel_recordID);
  id v12 = objc_msgSend(v11, sel_zoneID);

  id v13 = objc_msgSend(v12, sel_safari_tabGroupRootRecordName);
  if (v13)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    uint64_t v17 = type metadata accessor for TaskPriority();
    unint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
    v18(v10, 1, 1, v17);
    uint64_t v19 = (void *)swift_allocObject();
    v19[2] = 0;
    v19[3] = 0;
    void v19[4] = v14;
    v19[5] = v16;
    v19[6] = a1;
    v19[7] = a3;
    v19[8] = v4;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    id v20 = v4;
    uint64_t v21 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), (uint64_t)v19);
    v18(v10, 1, 1, v17);
    char v22 = (void *)swift_allocObject();
    v22[2] = 0;
    v22[3] = 0;
    void v22[4] = v14;
    v22[5] = v16;
    v22[6] = a1;
    v22[7] = v20;
    v22[8] = a3;
    swift_retain();
    swift_retain();
    id v23 = v20;
    uint64_t v24 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), (uint64_t)v22);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Task<(), Never>>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_261796D30;
    *(void *)(result + 32) = v21;
    *(void *)(result + 40) = v24;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[23] = a7;
  v8[24] = a8;
  v8[21] = a5;
  v8[22] = a6;
  v8[20] = a4;
  uint64_t v9 = type metadata accessor for Participant();
  v8[25] = v9;
  v8[26] = *(void *)(v9 - 8);
  v8[27] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for GroupSessionMessenger.MessageContext();
  v8[28] = v10;
  v8[29] = *(void *)(v10 - 8);
  v8[30] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext)?);
  v8[31] = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Iterator);
  v8[32] = v11;
  v8[33] = *(void *)(v11 - 8);
  v8[34] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), 0, 0);
}

uint64_t closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)()
{
  uint64_t v15 = v0;
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[35] = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain_n();
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[21];
  if (v4)
  {
    uint64_t v6 = v0[20];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v14 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_261746000, v2, v3, "Will begin receiving messages in shared connection for tab group %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v8, -1, -1);
    MEMORY[0x263E3FE70](v7, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>);
  AsyncStream.makeAsyncIterator()();
  uint64_t v9 = OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore;
  v0[36] = OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore;
  v0[37] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[38] = v10;
  *uint64_t v10 = v0;
  v10[1] = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  uint64_t v11 = v0[31];
  uint64_t v12 = v0[32];
  return MEMORY[0x270FA1F68](v11, 0, 0, v12);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), 0, 0);
}

{
  uint64_t v0;
  long long *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v30 = v0;
  uint64_t v1 = *(long long **)(v0 + 248);
  id v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  if ((*(unsigned int (**)(long long *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
LABEL_4:
    (*(void (**)(void, void))(*(void *)(v0 + 264) + 8))(*(void *)(v0 + 272), *(void *)(v0 + 256));
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.info.getter();
    uint64_t v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = *(void *)(v0 + 168);
    if (v14)
    {
      uint64_t v16 = *(void *)(v0 + 160);
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      unint64_t v18 = swift_slowAlloc();
      uint64_t v29 = v18;
      *(_DWORD *)uint64_t v17 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_261746000, v12, v13, "Did finish receiving messages in shared connection for tab group %{public}s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v18, -1, -1);
      MEMORY[0x263E3FE70](v17, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
  BOOL v4 = *(void *)(v0 + 232);
  os_log_type_t v3 = *(void *)(v0 + 240);
  unint64_t v5 = *(void *)(v0 + 224);
  uint64_t v7 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v8 = *v1;
  *(void *)(v0 + 64) = *((void *)v1 + 6);
  *(_OWORD *)(v0 + 32) = v7;
  *(_OWORD *)(v0 + 48) = v6;
  *(_OWORD *)(v0 + 16) = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v3, (uint64_t)v1 + *(int *)(v2 + 48), v5);
  if (static Task<>.isCancelled.getter())
  {
    uint64_t v10 = *(void *)(v0 + 232);
    uint64_t v9 = *(void *)(v0 + 240);
    uint64_t v11 = *(void *)(v0 + 224);
    outlined release of PresenceUpdateMessage((uint64_t *)(v0 + 16));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    goto LABEL_4;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v21 = Logger.logObject.getter();
  char v22 = static os_log_type_t.info.getter();
  id v23 = os_log_type_enabled(v21, v22);
  uint64_t v24 = *(void *)(v0 + 168);
  if (v23)
  {
    uint64_t v25 = *(void *)(v0 + 160);
    uint64_t v26 = swift_slowAlloc();
    BOOL v27 = swift_slowAlloc();
    uint64_t v29 = v27;
    *(_DWORD *)uint64_t v26 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v26 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, &v29);
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_261746000, v21, v22, "Did receive message in shared connection for tab group %{public}s", (uint8_t *)v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v27, -1, -1);
    MEMORY[0x263E3FE70](v26, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v28 = *(void *)(v0 + 184);
  GroupSessionMessenger.MessageContext.source.getter();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), v28, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  id v13;
  uint64_t (*v14)();
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  uint64_t v1 = v0[23];
  id v2 = Participant.handle.getter();
  BOOL v4 = v3;
  unint64_t v5 = *(void *)(v1 + 112);
  if (*(void *)(v5 + 16))
  {
    uint64_t v6 = v2;
    swift_bridgeObjectRetain();
    uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v4);
    uint64_t v9 = v0[26];
    uint64_t v8 = v0[27];
    uint64_t v10 = v0[25];
    if (v11)
    {
      uint64_t v12 = *(void **)(*(void *)(v5 + 56) + 8 * v7);
      v0[39] = v12;
      uint64_t v13 = v12;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      uint64_t v14 = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      uint64_t v14 = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
    }
  }
  else
  {
    uint64_t v16 = v0[26];
    uint64_t v15 = v0[27];
    uint64_t v17 = v0[25];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    uint64_t v14 = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  }
  return MEMORY[0x270FA2498](v14, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v1 = v0[39];
  id v2 = *(void *)(v0[24] + v0[36]);
  v0[40] = v2;
  if (v1) {
    os_log_type_t v3 = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  }
  else {
    os_log_type_t v3 = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  }
  return MEMORY[0x270FA2498](v3, v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 328) = ParticipantPresenceStore.handleSharedPresenceUpdateMessage(_:from:)((uint64_t *)(v0 + 16), *(void **)(v0 + 312));
  *(void *)(v0 + 336) = v1;
  *(void *)(v0 + 344) = v2;
  *(void *)(v0 + 352) = v3;
  outlined release of PresenceUpdateMessage((uint64_t *)(v0 + 16));
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for MainActor();
  *(void *)(v0 + 360) = static MainActor.shared.getter();
  id v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 352);
  id v2 = *(void *)(v0 + 344);
  swift_release();
  specialized ParticipantPresenceCoordinator._notifyStoreUpdates(_:)(v2, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  (*(void (**)(void, void))(*(void *)(v0 + 232) + 8))(*(void *)(v0 + 240), *(void *)(v0 + 224));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v1;
  char *v1 = v0;
  v1[1] = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  id v2 = *(void *)(v0 + 248);
  os_log_type_t v3 = *(void *)(v0 + 256);
  return MEMORY[0x270FA1F68](v2, 0, 0, v3);
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v0[29] + 8))(v0[30], v0[28]);
  outlined release of PresenceUpdateMessage(v0 + 2);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[38] = (uint64_t)v1;
  char *v1 = v0;
  v1[1] = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  id v2 = v0[31];
  os_log_type_t v3 = v0[32];
  return MEMORY[0x270FA1F68](v2, 0, 0, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  v0[16] = ParticipantPresenceStore.handleCurrentUserPresenceUpdateMessage(_:in:)((uint64_t)(v0 + 2), v0[20], v0[21]);
  v0[17] = v1;
  v0[46] = v1;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), 0, 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if (v0[46])
  {
    uint64_t v1 = v0[37];
    id v2 = v0[24];
    v0[47] = v0[16];
    os_log_type_t v3 = *(void *)(v2 + v1);
    v0[48] = v3;
    return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), v3, 0);
  }
  else
  {
    outlined release of PresenceUpdateMessage(v0 + 2);
    (*(void (**)(uint64_t, uint64_t))(v0[29] + 8))(v0[30], v0[28]);
    BOOL v4 = (void *)swift_task_alloc();
    v0[38] = (uint64_t)v4;
    *BOOL v4 = v0;
    v4[1] = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
    unint64_t v5 = v0[31];
    uint64_t v6 = v0[32];
    return MEMORY[0x270FA1F68](v5, 0, 0, v6);
  }
}

{
  void *v0;
  uint64_t v2;

  v0[49] = ParticipantPresenceCoordinator.ConnectionManagerStore.sharedConnectionManager(forTabGroup:)(v0[47], v0[46]);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;

  if (*(void *)(v0 + 392))
  {
    uint64_t v1 = *(void *)(v0 + 64);
    *(void *)(v0 + 400) = v1;
    *(_OWORD *)(v0 + 88) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 48);
    *(void *)(v0 + 120) = v1;
    uint64_t v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:)
                                         + async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:));
    swift_bridgeObjectRetain();
    id v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 408) = v2;
    *id v2 = v0;
    v2[1] = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
    return v7(v0 + 72);
  }
  else
  {
    outlined release of PresenceUpdateMessage((uint64_t *)(v0 + 16));
    (*(void (**)(void, void))(*(void *)(v0 + 232) + 8))(*(void *)(v0 + 240), *(void *)(v0 + 224));
    BOOL v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v4;
    *BOOL v4 = v0;
    v4[1] = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
    unint64_t v5 = *(void *)(v0 + 248);
    uint64_t v6 = *(void *)(v0 + 256);
    return MEMORY[0x270FA1F68](v5, 0, 0, v6);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  outlined consume of PresenceUpdateMessage.Kind(0, 0);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), 0, 0);
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_release();
  outlined release of PresenceUpdateMessage(v0 + 2);
  (*(void (**)(uint64_t, uint64_t))(v0[29] + 8))(v0[30], v0[28]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[38] = (uint64_t)v1;
  char *v1 = v0;
  v1[1] = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  id v2 = v0[31];
  os_log_type_t v3 = v0[32];
  return MEMORY[0x270FA1F68](v2, 0, 0, v3);
}

uint64_t closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[28] = a7;
  v8[29] = a8;
  v8[26] = a5;
  v8[27] = a6;
  v8[25] = a4;
  uint64_t v9 = type metadata accessor for Participants();
  v8[30] = v9;
  v8[31] = *(void *)(v9 - 8);
  v8[32] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  v8[33] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Participant();
  v8[34] = v10;
  v8[35] = *(void *)(v10 - 8);
  v8[36] = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Iterator);
  v8[37] = v11;
  v8[38] = *(void *)(v11 - 8);
  v8[39] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), 0, 0);
}

uint64_t closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)()
{
  uint64_t v12 = v0;
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[40] = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain_n();
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[26];
  if (v4)
  {
    uint64_t v6 = v0[25];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v11 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_261746000, v2, v3, "Will begin observing active participant changes in shared connection for tab group %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v8, -1, -1);
    MEMORY[0x263E3FE70](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = v0[27];
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), v9, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 328) = specialized CollaborationConnectionManager.participantUpdates()((uint64_t (*)(BOOL, uint64_t, uint64_t, unint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 216);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>);
  AsyncStream.makeAsyncIterator()();
  id v2 = OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore;
  *(void *)(v0 + 336) = *(void *)(*(void *)v1 + 160);
  *(void *)(v0 + 344) = v2;
  *(void *)(v0 + 352) = OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore;
  swift_beginAccess();
  *(_DWORD *)(v0 + 608) = *MEMORY[0x263F08F50];
  os_log_type_t v3 = MEMORY[0x263F8EE88];
  *(void *)(v0 + 368) = MEMORY[0x263F8EE88];
  *(void *)(v0 + 376) = v3;
  *(void *)(v0 + 360) = 0;
  BOOL v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v4;
  *BOOL v4 = v0;
  v4[1] = closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  unint64_t v5 = *(void *)(v0 + 296);
  return MEMORY[0x270FA1F68](v0 + 168, 0, 0, v5);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void *v13;
  uint64_t v14;

  uint64_t v13 = v0;
  uint64_t v1 = v0[21];
  v0[49] = v1;
  if (!v1)
  {
LABEL_4:
    (*(void (**)(void, void))(v0[38] + 8))(v0[39], v0[37]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    id v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.info.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    unint64_t v5 = v0[26];
    if (v4)
    {
      uint64_t v6 = v0[25];
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v12 = v8;
      *(_DWORD *)uint64_t v7 = 136446210;
      swift_bridgeObjectRetain();
      v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_261746000, v2, v3, "Did finish observing active participant changes in shared connection for tab group %{public}s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v8, -1, -1);
      MEMORY[0x263E3FE70](v7, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  if (static Task<>.isCancelled.getter())
  {
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  uint64_t v9 = v0[27];
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), v9, 0);
}

{
  void *v0;
  uint64_t v2;

  outlined init with copy of TaskPriority?(v0[27] + v0[42], v0[33], &demangling cache variable for type metadata for Participant?);
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v1 = v0[34];
  id v2 = v0[35];
  os_log_type_t v3 = v0[33];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of TaskPriority?(v3, &demangling cache variable for type metadata for Participant?);
    BOOL v4 = v0[49];
  }
  else
  {
    unint64_t v5 = v0[49];
    uint64_t v6 = v0[36];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v6, v3, v1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Participant>);
    uint64_t v7 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_261796D50;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 16))(v8 + v7, v6, v1);
    BOOL v4 = specialized _NativeSet.subtracting<A>(_:)(v8, v5);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v1);
  }
  v0[50] = v4;
  uint64_t v9 = *(void *)(v0[28] + v0[43]);
  v0[51] = v9;
  v0[52] = *(void *)(v4 + 16);
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), v9, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v8;

  id v2 = v0[25];
  uint64_t v1 = v0[26];
  swift_bridgeObjectRetain();
  os_log_type_t v3 = ParticipantPresenceCoordinator.ConnectionManagerStore.tabGroupIdentifiersToSharedConnections.modify();
  unint64_t v5 = specialized Dictionary.subscript.modify(v0 + 9, v2, v1);
  if (*(void *)(v4 + 8)) {
    *(void *)(v4 + 40) = v0[52];
  }
  ((void (*)(void *, void))v5)(v0 + 9, 0);
  swift_bridgeObjectRelease();
  ((void (*)(void *, void))v3)(v0 + 13, 0);
  uint64_t v6 = v0[29];
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), v6, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = v0[50];
  id v2 = v0[45];
  os_log_type_t v3 = v0[29];
  swift_retain();
  BOOL v4 = specialized Sequence.compactMap<A>(_:)(v1, v3);
  v0[53] = v2;
  swift_release();
  v0[54] = specialized Set.init<A>(_:)(v4);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v1 = v0[50];
  id v2 = v0[47];
  if (*(void *)(v2 + 16) <= *(void *)(v1 + 16) >> 3)
  {
    uint64_t v17 = v0[50];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v2);
    swift_bridgeObjectRelease();
    BOOL v4 = v17;
  }
  else
  {
    swift_bridgeObjectRetain();
    os_log_type_t v3 = swift_bridgeObjectRetain();
    BOOL v4 = specialized _NativeSet.subtracting<A>(_:)(v3, v1);
    swift_bridgeObjectRelease();
  }
  v0[55] = v4;
  if (*(void *)(v4 + 16))
  {
    unint64_t v5 = *(void *)(v0[28] + v0[44]);
    v0[56] = v5;
    uint64_t v6 = closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
LABEL_9:
    return MEMORY[0x270FA2498](v6, v5, 0);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = v0[53];
  uint64_t v7 = v0[54];
  uint64_t v9 = v0[46];
  if (*(void *)(v7 + 16) <= *(void *)(v9 + 16) >> 3)
  {
    unint64_t v18 = v0[46];
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v7);
    uint64_t v10 = v18;
    if (*(void *)(v18 + 16)) {
      goto LABEL_8;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = specialized _NativeSet.subtracting<A>(_:)(v7, v9);
    if (*(void *)(v10 + 16))
    {
LABEL_8:
      uint64_t v11 = *(void *)(v0[28] + v0[44]);
      v0[68] = v11;
      uint64_t v12 = specialized Sequence.compactMap<A>(_:)(v10);
      v0[69] = v8;
      swift_bridgeObjectRelease();
      v0[70] = specialized Set.init<A>(_:)(v12);
      swift_bridgeObjectRelease();
      uint64_t v6 = closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
      unint64_t v5 = v11;
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = v0[50];
  v0[46] = v0[54];
  v0[47] = v13;
  v0[45] = v8;
  uint64_t v14 = (void *)swift_task_alloc();
  v0[48] = v14;
  *uint64_t v14 = v0;
  v14[1] = closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  uint64_t v15 = v0[37];
  return MEMORY[0x270FA1F68](v0 + 21, 0, 0, v15);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = (void *)v0[56];
  id v2 = v0[27];
  os_log_type_t v3 = v1[18];
  v0[57] = v3;
  BOOL v4 = v1[19];
  v0[58] = v4;
  v0[59] = v1[20];
  v0[60] = v1[21];
  v0[61] = v1[22];
  v0[62] = v1[23];
  v0[63] = v1[24];
  outlined copy of PresenceUpdateMessage.Kind(v3, v4);
  swift_bridgeObjectRetain();
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  long long v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = *(void *)(*(void *)(v0 + 216) + 168);
  *(void *)(v0 + 512) = v1;
  if (v1)
  {
    id v2 = *(void *)(v0 + 504);
    os_log_type_t v3 = *(_OWORD *)(v0 + 472);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 456);
    *(_OWORD *)(v0 + 32) = v3;
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 488);
    *(void *)(v0 + 64) = v2;
    swift_retain();
    BOOL v4 = closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
    unint64_t v5 = v1;
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 456);
    uint64_t v6 = *(void *)(v0 + 464);
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v7, v6);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 536) = *(void *)(v0 + 424);
    BOOL v4 = closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
    unint64_t v5 = 0;
  }
  return MEMORY[0x270FA2498](v4, v5, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unint64_t updated;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 248);
  **(void **)(v0 + 256) = *(void *)(v0 + 440);
  (*(void (**)(void))(v1 + 104))();
  swift_bridgeObjectRetain();
  id v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 520) = v2;
  updated = lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  BOOL v4 = lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  *id v2 = v0;
  v2[1] = closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  unint64_t v5 = *(void *)(v0 + 256);
  return MEMORY[0x270EF2EE8](v0 + 16, v5, &type metadata for PresenceUpdateMessage, updated, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  id v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 528) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2[31] + 8))(v2[32], v2[30]);
    os_log_type_t v3 = v2[64];
    BOOL v4 = closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  }
  else
  {
    uint64_t v6 = v2[57];
    unint64_t v5 = v2[58];
    (*(void (**)(void, void))(v2[31] + 8))(v2[32], v2[30]);
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v6, v5);
    swift_bridgeObjectRelease();
    v2[67] = 0;
    BOOL v4 = closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
    os_log_type_t v3 = 0;
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  uint64_t v1 = v0[67];
  id v2 = v0[54];
  os_log_type_t v3 = v0[46];
  if (*(void *)(v2 + 16) <= *(void *)(v3 + 16) >> 3)
  {
    uint64_t v11 = v0[46];
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v2);
    BOOL v4 = v11;
    if (*(void *)(v11 + 16)) {
      goto LABEL_3;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    BOOL v4 = specialized _NativeSet.subtracting<A>(_:)(v2, v3);
    if (*(void *)(v4 + 16))
    {
LABEL_3:
      unint64_t v5 = *(void *)(v0[28] + v0[44]);
      v0[68] = v5;
      uint64_t v6 = specialized Sequence.compactMap<A>(_:)(v4);
      v0[69] = v1;
      swift_bridgeObjectRelease();
      v0[70] = specialized Set.init<A>(_:)(v6);
      swift_bridgeObjectRelease();
      return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), v5, 0);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v0[50];
  v0[46] = v0[54];
  v0[47] = v7;
  v0[45] = v1;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[48] = v8;
  *uint64_t v8 = v0;
  v8[1] = closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  uint64_t v9 = v0[37];
  return MEMORY[0x270FA1F68](v0 + 21, 0, 0, v9);
}

{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = ParticipantPresenceStore.participants(_:didLeaveTabGroup:)(v0[70], v0[25], v0[26]);
  os_log_type_t v3 = v2;
  unint64_t v5 = v4;
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  v0[71] = v1;
  v0[72] = v3;
  v0[73] = v5;
  v0[74] = v7;
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for MainActor();
  *(void *)(v0 + 600) = static MainActor.shared.getter();
  id v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 592);
  id v2 = *(void *)(v0 + 584);
  swift_release();
  specialized ParticipantPresenceCoordinator._notifyStoreUpdates(_:)(v2, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = v0[69];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v2 = v0[50];
  v0[46] = v0[54];
  v0[47] = v2;
  v0[45] = v1;
  os_log_type_t v3 = (void *)swift_task_alloc();
  v0[48] = v3;
  *os_log_type_t v3 = v0;
  v3[1] = closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  BOOL v4 = v0[37];
  return MEMORY[0x270FA1F68](v0 + 21, 0, 0, v4);
}

{
  uint64_t v0;

  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), *(void *)(v0 + 216), 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  id v2 = *(void *)(v0 + 456);
  uint64_t v1 = *(void *)(v0 + 464);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of PresenceUpdateMessage.Kind(v2, v1);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), 0, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  uint64_t v25 = v0;
  uint64_t v1 = (void *)v0[66];
  swift_bridgeObjectRetain();
  id v2 = v1;
  swift_bridgeObjectRetain();
  os_log_type_t v3 = v1;
  BOOL v4 = Logger.logObject.getter();
  unint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (void *)v0[66];
    uint64_t v8 = v0[25];
    uint64_t v7 = v0[26];
    uint64_t v9 = swift_slowAlloc();
    char v22 = (void *)swift_slowAlloc();
    id v23 = swift_slowAlloc();
    uint64_t v24 = v23;
    *(_DWORD *)uint64_t v9 = 136446466;
    swift_bridgeObjectRetain();
    v0[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2112;
    uint64_t v10 = v6;
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[23] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v22 = v11;

    _os_log_impl(&dword_261746000, v4, v5, "Failed to send message to new participants in shared connection for tab group %{public}s, error: %@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v22, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v23, -1, -1);
    MEMORY[0x263E3FE70](v9, -1, -1);
  }
  else
  {
    uint64_t v12 = (void *)v0[66];

    swift_bridgeObjectRelease_n();
  }
  uint64_t v13 = v0[54];
  uint64_t v14 = v0[46];
  if (*(void *)(v13 + 16) <= *(void *)(v14 + 16) >> 3)
  {
    uint64_t v24 = v0[46];
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v13);
    uint64_t v15 = v24;
    if (*(void *)(v24 + 16)) {
      goto LABEL_6;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = specialized _NativeSet.subtracting<A>(_:)(v13, v14);
    if (*(void *)(v15 + 16))
    {
LABEL_6:
      uint64_t v16 = *(void *)(v0[28] + v0[44]);
      v0[68] = v16;
      uint64_t v17 = specialized Sequence.compactMap<A>(_:)(v15);
      v0[69] = 0;
      swift_bridgeObjectRelease();
      v0[70] = specialized Set.init<A>(_:)(v17);
      swift_bridgeObjectRelease();
      return MEMORY[0x270FA2498](closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), v16, 0);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v18 = v0[50];
  v0[46] = v0[54];
  v0[47] = v18;
  v0[45] = 0;
  uint64_t v19 = (void *)swift_task_alloc();
  v0[48] = v19;
  *uint64_t v19 = v0;
  v19[1] = closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  id v20 = v0[37];
  return MEMORY[0x270FA1F68](v0 + 21, 0, 0, v20);
}

Swift::Void __swiftcall ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:)(Swift::String_optional toTab, Swift::String_optional inTabGroup, Swift::String withDeviceIdentifier)
{
  object = withDeviceIdentifier._object;
  uint64_t countAndFlagsBits = withDeviceIdentifier._countAndFlagsBits;
  uint64_t v6 = inTabGroup.value._object;
  uint64_t v7 = inTabGroup.value._countAndFlagsBits;
  uint64_t v8 = toTab.value._object;
  uint64_t v9 = toTab.value._countAndFlagsBits;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v9;
  v14[5] = v8;
  v14[6] = v7;
  v14[7] = v6;
  v14[8] = v3;
  v14[9] = countAndFlagsBits;
  v14[10] = object;
  swift_bridgeObjectRetain();
  id v15 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:), (uint64_t)v14);
  swift_release();
}

uint64_t closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[32] = v10;
  v8[33] = v11;
  v8[30] = a7;
  v8[31] = a8;
  v8[28] = a5;
  v8[29] = a6;
  v8[27] = a4;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:), 0, 0);
}

Swift::Void __swiftcall ParticipantPresenceCoordinator.removeTabGroup(_:)(Swift::String a1)
{
}

uint64_t closure #1 in ParticipantPresenceCoordinator.removeTabGroup(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.removeTabGroup(_:), 0, 0);
}

uint64_t closure #1 in ParticipantPresenceCoordinator.removeTabGroup(_:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  *(void *)(v0 + 40) = v1;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.removeTabGroup(_:), v1, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  ParticipantPresenceStore.removeTabGroup(_:)(v0[3], v0[4]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

Swift::Void __swiftcall ParticipantPresenceCoordinator.removeTab(_:)(Swift::String a1)
{
}

uint64_t ParticipantPresenceCoordinator.removeTabGroup(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  uint64_t v12[3] = 0;
  v12[4] = v4;
  v12[5] = a1;
  v12[6] = a2;
  id v13 = v4;
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, a4, (uint64_t)v12);
  return swift_release();
}

uint64_t closure #1 in ParticipantPresenceCoordinator.removeTab(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.removeTab(_:), 0, 0);
}

uint64_t closure #1 in ParticipantPresenceCoordinator.removeTab(_:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  *(void *)(v0 + 40) = v1;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.removeTab(_:), v1, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  ParticipantPresenceStore.removeTab(_:)(v0[3], v0[4]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void @objc ParticipantPresenceCoordinator.removeTabGroup(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v9, 1, 1, v13);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = a1;
  v14[5] = v10;
  v14[6] = v12;
  id v15 = a1;
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, a5, (uint64_t)v14);
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t ParticipantPresenceCoordinator.tabGroupIdentifierForParticipant(_:)(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.tabGroupIdentifierForParticipant(_:), 0, 0);
}

uint64_t ParticipantPresenceCoordinator.tabGroupIdentifierForParticipant(_:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  *(void *)(v0 + 64) = v1;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.tabGroupIdentifierForParticipant(_:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v12;

  uint64_t v1 = v0[8];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 120);
  if (*(void *)(v2 + 16))
  {
    os_log_type_t v3 = v0[5];
    BOOL v4 = v0[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v4);
    if (v6)
    {
      uint64_t v7 = (uint64_t *)(*(void *)(v2 + 56) + 56 * v5);
      uint64_t v9 = *v7;
      uint64_t v8 = v7[1];
      outlined copy of PresenceUpdateMessage.Kind(*v7, v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v8)
      {
        swift_bridgeObjectRetain();
        outlined consume of PresenceUpdateMessage.Kind(v9, v8);
      }
      else
      {
        outlined consume of PresenceUpdateMessage.Kind(v9, 0);
        uint64_t v9 = 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = 0;
      uint64_t v8 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v10(v9, v8);
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.tabGroupIdentifierForParticipant(_:)(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  id v8 = a3;
  uint64_t v9 = (void *)swift_task_alloc();
  v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = @objc closure #1 in ParticipantPresenceCoordinator.tabGroupIdentifierForParticipant(_:);
  v9[6] = v7;
  v9[7] = v8;
  v9[5] = v5;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.tabGroupIdentifierForParticipant(_:), 0, 0);
}

uint64_t ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:)(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:), 0, 0);
}

uint64_t ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  *(void *)(v0 + 64) = v1;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v14;

  uint64_t v1 = v0[8];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 120);
  if (*(void *)(v2 + 16))
  {
    os_log_type_t v3 = v0[5];
    BOOL v4 = v0[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v4);
    if (v6)
    {
      uint64_t v7 = (uint64_t *)(*(void *)(v2 + 56) + 56 * v5);
      id v8 = *v7;
      uint64_t v9 = v7[1];
      uint64_t v11 = v7[2];
      uint64_t v10 = v7[3];
      outlined copy of PresenceUpdateMessage.Kind(*v7, v9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v9)
      {
        swift_bridgeObjectRetain();
        outlined consume of PresenceUpdateMessage.Kind(v8, v9);
      }
      else
      {
        outlined consume of PresenceUpdateMessage.Kind(v8, 0);
        uint64_t v11 = 0;
        uint64_t v10 = 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v11 = 0;
      uint64_t v10 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v12(v11, v10);
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:)(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  id v8 = a3;
  uint64_t v9 = (void *)swift_task_alloc();
  v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = @objc closure #1 in ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:);
  v9[6] = v7;
  v9[7] = v8;
  v9[5] = v5;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:), 0, 0);
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v7 = *v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  if (a2)
  {
    id v8 = (void *)MEMORY[0x263E3F170](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v8 = 0;
  }
  uint64_t v9 = *(void (***)(void, void))(v5 + 24);
  ((void (**)(void, void *))v9)[2](v9, v8);

  _Block_release(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t ParticipantPresenceCoordinator.currentLocationIdentifiersForParticipant(_:)(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.currentLocationIdentifiersForParticipant(_:), 0, 0);
}

uint64_t ParticipantPresenceCoordinator.currentLocationIdentifiersForParticipant(_:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  *(void *)(v0 + 64) = v1;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.currentLocationIdentifiersForParticipant(_:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  uint64_t v1 = v0[8];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 120);
  if (*(void *)(v2 + 16))
  {
    os_log_type_t v3 = v0[5];
    BOOL v4 = v0[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v4);
    if (v6)
    {
      uint64_t v7 = (uint64_t *)(*(void *)(v2 + 56) + 56 * v5);
      id v8 = *v7;
      uint64_t v9 = v7[1];
      uint64_t v10 = v7[2];
      uint64_t v11 = v7[3];
      outlined copy of PresenceUpdateMessage.Kind(*v7, v9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v9)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined consume of PresenceUpdateMessage.Kind(v8, v9);
      }
      else
      {
        outlined consume of PresenceUpdateMessage.Kind(v8, 0);
        id v8 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      id v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    id v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[1];
  return v12(v8, v9, v10, v11);
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.currentLocationIdentifiersForParticipant(_:)(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v3[4] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[5] = v5;
  id v6 = a3;
  return MEMORY[0x270FA2498](@objc closure #1 in ParticipantPresenceCoordinator.currentLocationIdentifiersForParticipant(_:), 0, 0);
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.currentLocationIdentifiersForParticipant(_:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  *(void *)(v0 + 48) = v1;
  return MEMORY[0x270FA2498](@objc closure #1 in ParticipantPresenceCoordinator.currentLocationIdentifiersForParticipant(_:), v1, 0);
}

{
  Swift::String *v0;
  void *countAndFlagsBits;
  uint64_t v2;
  void *object;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void (**v8)(void, void, void);
  uint64_t (*v9)(void);
  uint64_t v11;
  Swift::tuple_tabGroupIdentifier_String_optional_tabIdentifier_String_optional v12;

  uint64_t countAndFlagsBits = (void *)v0[1]._countAndFlagsBits;
  uint64_t v12 = ParticipantPresenceStore.locationIdentifiersForParticipant(_:)(v0[2]);
  uint64_t v2 = v12.tabGroupIdentifier.value._countAndFlagsBits;
  object = v12.tabGroupIdentifier.value._object;
  BOOL v4 = v12.tabIdentifier.value._countAndFlagsBits;
  uint64_t v5 = v12.tabIdentifier.value._object;
  swift_bridgeObjectRelease();

  if (object)
  {
    id v6 = (void *)MEMORY[0x263E3F170](v2, object);
    if (v5)
    {
LABEL_3:
      uint64_t v7 = (void *)MEMORY[0x263E3F170](v4, v5);
      goto LABEL_6;
    }
  }
  else
  {
    id v6 = 0;
    if (v5) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  uint64_t v8 = (void (**)(void, void, void))v0[1]._object;
  ((void (**)(void, void *, void *))v8)[2](v8, v6, v7);

  _Block_release(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t (*)(void))v0->_object;
  return v9();
}

uint64_t ParticipantPresenceCoordinator.activeParticipantsInTabGroup(_:)(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.activeParticipantsInTabGroup(_:), 0, 0);
}

uint64_t ParticipantPresenceCoordinator.activeParticipantsInTabGroup(_:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  *(void *)(v0 + 64) = v1;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.activeParticipantsInTabGroup(_:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  uint64_t v1 = v0[8];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 128);
  os_log_type_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v3 && (BOOL v4 = specialized __RawDictionaryStorage.find<A>(_:)(v0[5], v0[6]), (v5 & 1) != 0))
  {
    id v6 = *(void *)(*(void *)(v2 + 56) + 8 * v4);
    swift_bridgeObjectRetain();
  }
  else if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
    id v6 = v9;
  }
  else
  {
    id v6 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
  return v7(v6);
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTabGroup(_:)(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v3[4] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[5] = v5;
  id v6 = a3;
  return MEMORY[0x270FA2498](@objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTabGroup(_:), 0, 0);
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTabGroup(_:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  *(void *)(v0 + 48) = v1;
  return MEMORY[0x270FA2498](@objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTabGroup(_:), v1, 0);
}

{
  void *v0;
  void (**v1)(void, void);
  void *v2;
  Class isa;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void (**)(void, void))v0[3];
  uint64_t v2 = (void *)v0[2];
  ParticipantPresenceStore.activeParticipantsInTabGroup(_:)(v0[4], v0[5]);
  swift_bridgeObjectRelease();

  type metadata accessor for CKShareParticipant();
  lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CKShareParticipant and conformance NSObject, (void (*)(uint64_t))type metadata accessor for CKShareParticipant);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(void, Class))v1)[2](v1, isa);

  _Block_release(v1);
  BOOL v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t ParticipantPresenceCoordinator.activeParticipantsInTab(_:)(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.activeParticipantsInTab(_:), 0, 0);
}

uint64_t ParticipantPresenceCoordinator.activeParticipantsInTab(_:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  *(void *)(v0 + 64) = v1;
  return MEMORY[0x270FA2498](ParticipantPresenceCoordinator.activeParticipantsInTab(_:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  uint64_t v1 = v0[8];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 136);
  os_log_type_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v3 && (BOOL v4 = specialized __RawDictionaryStorage.find<A>(_:)(v0[5], v0[6]), (v5 & 1) != 0))
  {
    id v6 = *(void *)(*(void *)(v2 + 56) + 8 * v4);
    swift_bridgeObjectRetain();
  }
  else if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
    id v6 = v9;
  }
  else
  {
    id v6 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
  return v7(v6);
}

id ParticipantPresenceCoordinator.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id ParticipantPresenceCoordinator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void *specialized CKShareGroupSessionProvider.init(id:activity:share:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6 = v5;
  uint64_t v12 = type metadata accessor for PresenceSessionInfo();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v13 = type metadata accessor for GroupSessionProviderState();
  MEMORY[0x270FA5388](v13);
  (*(void (**)(char *, void))(v15 + 104))((char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F08EB8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<GroupSessionProviderState, Never>);
  swift_allocObject();
  v5[4] = CurrentValueSubject.init(_:)();
  static PresenceSessionInfo.default.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PresenceSessionInfo, Never>);
  swift_allocObject();
  v5[5] = CurrentValueSubject.init(_:)();
  v5[2] = a1;
  v5[3] = a2;
  v5[7] = a3;
  v5[8] = a4;
  v5[14] = a5;
  swift_bridgeObjectRetain();
  id v16 = a5;
  v36[0] = CKShare.members.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
  swift_allocObject();
  v5[6] = CurrentValueSubject.init(_:)();
  id v17 = objc_msgSend(v16, sel_currentUserParticipant);
  if (v17 && (unint64_t v18 = v17, v19 = CKShareParticipant.handle.getter(), v18, v19))
  {
    id v20 = objc_msgSend(v19, sel_normalizedValue);
    if (!v20) {
      id v20 = objc_msgSend(v19, sel_value);
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v36[3] = type metadata accessor for AddressableMember();
    v36[4] = lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x263F08F70]);
    __swift_allocate_boxed_opaque_existential_1(v36);
    AddressableMember.init(handle:)();
    swift_bridgeObjectRelease();

    outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)v36, (uint64_t)(v6 + 9), &demangling cache variable for type metadata for Member?);
  }
  else
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v35 = a4;
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.tabGroup);
    id v22 = v16;
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      v36[0] = v34;
      *(_DWORD *)uint64_t v25 = 136315138;
      id v26 = objc_msgSend(v22, sel_recordID, v25 + 4);
      id v27 = objc_msgSend(v26, sel_ckShortDescription);

      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v30 = v29;

      v36[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_261746000, v23, v24, "Share %s does not have a currentUserParticipant", v25, 0xCu);
      uint64_t v31 = v34;
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v31, -1, -1);
      MEMORY[0x263E3FE70](v25, -1, -1);
    }
    else
    {
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>.Errors);
    lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type CKShareGroupSessionProvider<CKShareCollaborationActivity>.Errors and conformance CKShareGroupSessionProvider<A>.Errors, &demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>.Errors);
    swift_allocError();
    swift_willThrow();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
    swift_deallocPartialClassInstance();
  }
  return v6;
}

uint64_t specialized GroupSession.JoinState.join(resuming:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v37 = a3;
  uint64_t v43 = a1;
  uint64_t v40 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x270FA5388](v40);
  uint64_t v41 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v9 = *(void *)(v42 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v42);
  uint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (void *)((char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v13);
  id v17 = (void *)((char *)v31 - v16);
  uint64_t v35 = v5;
  uint64_t v36 = a2;
  outlined init with copy of TaskPriority?(v5, (uint64_t)v31 - v16, a2);
  uint64_t v34 = v12;
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result)
  {
    if (result == 2)
    {
      uint64_t v19 = type metadata accessor for CancellationError();
      lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x263F8F488]);
      swift_allocError();
      CancellationError.init()();
      swift_willThrow();
      return v19;
    }
    __break(1u);
    goto LABEL_9;
  }
  v31[1] = v6;
  uint64_t v20 = *v17;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = 0;
  id v22 = (uint64_t *)(v21 + 16);
  uint64_t v23 = v42;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v33 = v9 + 16;
  v32((char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v43, v42);
  unint64_t v24 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v21;
  *(void *)(v25 + 24) = v20;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v25 + v24, v11, v23);
  aBlock[4] = v38;
  aBlock[5] = v25;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v39;
  _Block_copy(aBlock);
  aBlock[7] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v26 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_beginAccess();
  *(void *)(v21 + 16) = v26;
  uint64_t result = swift_release();
  uint64_t v27 = *(void *)(v21 + 16);
  if (!v27)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v28 = (char *)v15
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DispatchWorkItem, CheckedContinuation<(), Error>))
               + 48);
  swift_retain();
  uint64_t v30 = v35;
  unint64_t v29 = v36;
  outlined destroy of TaskPriority?(v35, v36);
  *uint64_t v15 = v27;
  v32(v28, v43, v42);
  swift_storeEnumTagMultiPayload();
  uint64_t result = outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)v15, v30, v29);
  uint64_t v19 = *v22;
  if (*v22)
  {
    swift_retain();
    swift_release();
    swift_release();
    return v19;
  }
LABEL_10:
  __break(1u);
  return result;
}

void specialized closure #1 in GroupSession.JoinState.join(resuming:)(uint64_t a1)
{
  objc_super v2 = (void *)(a1 + 16);
  swift_beginAccess();
  if (!*(void *)(a1 + 16))
  {
    __break(1u);
    goto LABEL_9;
  }
  swift_retain();
  char v3 = dispatch thunk of DispatchWorkItem.isCancelled.getter();
  swift_release();
  if (v3) {
    return;
  }
  GroupSession.join()();
  swift_beginAccess();
  if (!*v2)
  {
LABEL_9:
    __break(1u);
    return;
  }
  swift_retain();
  char v4 = dispatch thunk of DispatchWorkItem.isCancelled.getter();
  swift_release();
  if (v4)
  {
    GroupSession.leave()();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    CheckedContinuation.resume(returning:)();
  }
}

uint64_t specialized closure #1 in GroupSession.join(on:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return MEMORY[0x270FA2498](specialized closure #1 in GroupSession.join(on:), 0, 0);
}

{
  void *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return MEMORY[0x270FA2498](specialized closure #1 in GroupSession.join(on:), 0, 0);
}

uint64_t specialized closure #1 in GroupSession.join(on:)()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  objc_super v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *objc_super v2 = v0;
  v2[1] = specialized closure #1 in GroupSession.join(on:);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = MEMORY[0x263F8EE60] + 8;
  return MEMORY[0x270FA2360](v3, 0, 0, 0x3A6E6F286E696F6ALL, 0xE900000000000029, partial apply for specialized closure #1 in closure #1 in GroupSession.join(on:), v1, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  objc_super v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](specialized closure #1 in GroupSession.join(on:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  objc_super v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *objc_super v2 = v0;
  v2[1] = specialized closure #1 in GroupSession.join(on:);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = MEMORY[0x263F8EE60] + 8;
  return MEMORY[0x270FA2360](v3, 0, 0, 0x3A6E6F286E696F6ALL, 0xE900000000000029, partial apply for specialized closure #1 in closure #1 in GroupSession.join(on:), v1, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  objc_super v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](specialized closure #1 in GroupSession.join(on:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized closure #1 in closure #1 in GroupSession.join(on:)(uint64_t a1, uint64_t a2)
{
  objc_super v2 = (os_unfair_lock_s *)(a2 + ((*(unsigned int *)(*(void *)a2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v2);
  partial apply for specialized closure #1 in closure #1 in closure #1 in GroupSession.join(on:)(&v4);
  os_unfair_lock_unlock(v2);
  swift_retain();
  OS_dispatch_queue.async(execute:)();
  return swift_release_n();
}

{
  os_unfair_lock_s *v2;
  uint64_t v4;

  objc_super v2 = (os_unfair_lock_s *)(a2 + ((*(unsigned int *)(*(void *)a2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v2);
  partial apply for specialized closure #1 in closure #1 in closure #1 in GroupSession.join(on:)(&v4);
  os_unfair_lock_unlock(v2);
  swift_retain();
  OS_dispatch_queue.async(execute:)();
  return swift_release_n();
}

void specialized closure #2 in GroupSession.join(on:)(uint64_t a1)
{
  uint64_t v1 = a1 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)a1 + 16);
  objc_super v2 = (os_unfair_lock_s *)(a1 + ((*(unsigned int *)(*(void *)a1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v2);
  specialized closure #1 in closure #2 in GroupSession.join(on:)(v1);
  os_unfair_lock_unlock(v2);
}

{
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t vars8;

  uint64_t v1 = a1 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)a1 + 16);
  objc_super v2 = (os_unfair_lock_s *)(a1 + ((*(unsigned int *)(*(void *)a1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v2);
  specialized closure #1 in closure #2 in GroupSession.join(on:)(v1);
  os_unfair_lock_unlock(v2);
}

uint64_t specialized closure #1 in closure #2 in GroupSession.join(on:)(uint64_t a1)
{
  return specialized closure #1 in closure #2 in GroupSession.join(on:)(a1, &demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.JoinState);
}

{
  return specialized closure #1 in closure #2 in GroupSession.join(on:)(a1, &demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.JoinState);
}

uint64_t specialized closure #1 in closure #2 in GroupSession.join(on:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(a1, (uint64_t)v6, a2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DispatchWorkItem, CheckedContinuation<(), Error>));
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, &v6[*(int *)(v11 + 48)], v7);
    dispatch thunk of DispatchWorkItem.cancel()();
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x263F8F488]);
    uint64_t v12 = swift_allocError();
    CancellationError.init()();
    v14[1] = v12;
    CheckedContinuation.resume(throwing:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    outlined destroy of TaskPriority?((uint64_t)v6, a2);
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t specialized closure #1 in GroupSession.leave(on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  v22[1] = a4;
  uint64_t v27 = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x270FA5388](v14);
  id v17 = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  unint64_t v18 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v19 + v18, v17, v14);
  aBlock[4] = v23;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v24;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v28 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x263E3F430](0, v13, v10, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v25);
  return swift_release();
}

uint64_t specialized closure #1 in closure #1 in GroupSession.leave(on:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ParticipantHandleMap.ParticipantKind>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    id v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void **)(*(void *)(v2 + 56) + v20);
    id v22 = (void *)(*(void *)(v4 + 48) + v16);
    *id v22 = v18;
    v22[1] = v19;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    id v23 = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  long long v31;
  long long v32;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v2 + 16);
  if (!v5)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  unint64_t v7 = v2 + 64;
  int64_t v8 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v8)
  {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v8);
    uint64_t v5 = *(void *)(v2 + 16);
  }
  uint64_t v10 = 0;
  *(void *)(v4 + 16) = v5;
  uint64_t v11 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v2 + 64);
  unint64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    uint64_t v28 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v14) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v7 + 8 * v28);
    ++v10;
    if (!v29)
    {
      uint64_t v10 = v28 + 1;
      if (v28 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v7 + 8 * v10);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    int64_t v13 = (v29 - 1) & v29;
    uint64_t v16 = __clz(__rbit64(v29)) + (v10 << 6);
LABEL_12:
    id v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v16);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = 48 * v16;
    id v22 = *(void *)(v2 + 56) + v21;
    id v23 = *(void *)v22;
    int64_t v24 = *(void *)(v22 + 40);
    unint64_t v25 = (void *)(*(void *)(v4 + 48) + v17);
    uint64_t v31 = *(_OWORD *)(v22 + 8);
    uint64_t v32 = *(_OWORD *)(v22 + 24);
    *unint64_t v25 = v20;
    v25[1] = v19;
    int64_t v26 = *(void *)(v4 + 56) + v21;
    *(void *)int64_t v26 = v23;
    *(_OWORD *)(v26 + 8) = v31;
    *(_OWORD *)(v26 + 24) = v32;
    *(void *)(v26 + 40) = v24;
    swift_bridgeObjectRetain();
    uint64_t v27 = (id)v31;
    swift_retain();
    swift_retain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v30 = v28 + 2;
  if (v30 >= v14) {
    goto LABEL_26;
  }
  unint64_t v29 = *(void *)(v7 + 8 * v30);
  if (v29)
  {
    uint64_t v10 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v10 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v7 + 8 * v10);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    id v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    id v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    id v22 = (void *)(*(void *)(v4 + 48) + v16);
    *id v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  int64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Set<CKShareParticipant>>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    id v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    id v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      id v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    id v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  id v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  long long v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PresenceUpdateMessage>);
  uint64_t v32 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v32 = v3;
    return result;
  }
  uint64_t result = (void *)(v2 + 64);
  uint64_t v5 = v1 + 64;
  uint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6) {
    uint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v6);
  }
  int64_t v8 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  int64_t v9 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  uint64_t v11 = v10 & *(void *)(v1 + 64);
  unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      int64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    unint64_t v29 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v12) {
      goto LABEL_26;
    }
    uint64_t v30 = *(void *)(v5 + 8 * v29);
    ++v8;
    if (!v30)
    {
      int64_t v8 = v29 + 1;
      if (v29 + 1 >= v12) {
        goto LABEL_26;
      }
      uint64_t v30 = *(void *)(v5 + 8 * v8);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    uint64_t v11 = (v30 - 1) & v30;
    unint64_t v14 = __clz(__rbit64(v30)) + (v8 << 6);
LABEL_12:
    unint64_t v15 = 16 * v14;
    uint64_t v16 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v14);
    uint64_t v18 = *v16;
    id v17 = v16[1];
    uint64_t v19 = 56 * v14;
    uint64_t v20 = *(void *)(v1 + 56) + v19;
    uint64_t v21 = *(void *)v20;
    id v22 = *(void *)(v20 + 8);
    id v23 = *(void *)(v20 + 16);
    int64_t v24 = *(void *)(v20 + 40);
    unint64_t v25 = *(void *)(v20 + 48);
    int64_t v26 = (void *)(*(void *)(v3 + 48) + v15);
    uint64_t v27 = *(_OWORD *)(v20 + 24);
    *int64_t v26 = v18;
    v26[1] = v17;
    uint64_t v28 = *(void *)(v3 + 56) + v19;
    *(void *)uint64_t v28 = v21;
    *(void *)(v28 + 8) = v22;
    *(void *)(v28 + 16) = v23;
    *(_OWORD *)(v28 + 24) = v27;
    *(void *)(v28 + 40) = v24;
    *(void *)(v28 + 48) = v25;
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v21, v22);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v31 = v29 + 2;
  if (v31 >= v12) {
    goto LABEL_26;
  }
  uint64_t v30 = *(void *)(v5 + 8 * v31);
  if (v30)
  {
    int64_t v8 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v8 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_26;
    }
    uint64_t v30 = *(void *)(v5 + 8 * v8);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (share: CKShare, count: Int)>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    id v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = *(void *)(v2 + 56) + v16;
    id v22 = *(void **)v20;
    uint64_t v21 = *(void *)(v20 + 8);
    id v23 = (void *)(*(void *)(v4 + 48) + v16);
    *id v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    void *v24 = v22;
    v24[1] = v21;
    swift_bridgeObjectRetain();
    id result = v22;
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CKShareParticipant>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    id v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    id v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      id v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    id v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  id v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ParticipantHandleMap.ParticipantKind>);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    id v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      id v33 = v32;
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  id v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *id v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  char v41;
  long long v42;
  long long v43;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection>);
  uint64_t v41 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v40 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v38 = v2;
  uint64_t v39 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    id v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v39) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    int64_t v24 = *(void *)(v40 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v39) {
        goto LABEL_33;
      }
      int64_t v24 = *(void *)(v40 + 8 * v13);
      if (!v24)
      {
        char v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v38;
          if ((v41 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v24 = *(void *)(v40 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v39) {
              goto LABEL_33;
            }
            int64_t v24 = *(void *)(v40 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    int64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    id v33 = *(void *)(v5 + 56) + 48 * v21;
    uint64_t v34 = *(void *)v33;
    uint64_t v42 = *(_OWORD *)(v33 + 24);
    uint64_t v43 = *(_OWORD *)(v33 + 8);
    uint64_t v35 = *(void *)(v33 + 40);
    if ((v41 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      int64_t v36 = (id)v43;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      BOOL v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        unint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v32;
    v18[1] = v31;
    unint64_t v19 = *(void *)(v7 + 56) + 48 * v17;
    *(void *)unint64_t v19 = v34;
    *(_OWORD *)(v19 + 8) = v43;
    *(_OWORD *)(v19 + 24) = v42;
    *(void *)(v19 + 40) = v35;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v38;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v41 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v37;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (share: CKShare, count: Int)>);
  uint64_t v43 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v42 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v40 = v2;
  uint64_t v41 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      id v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v41) {
      break;
    }
    int64_t v24 = (void *)(v5 + 64);
    char v25 = *(void *)(v42 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v41) {
        goto LABEL_33;
      }
      char v25 = *(void *)(v42 + 8 * v13);
      if (!v25)
      {
        unint64_t v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        char v25 = *(void *)(v42 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v41) {
              goto LABEL_33;
            }
            char v25 = *(void *)(v42 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    id v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    id v33 = v32[1];
    uint64_t v35 = *(void *)(v5 + 56) + v31;
    uint64_t v37 = *(void **)v35;
    int64_t v36 = *(void *)(v35 + 8);
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      char v38 = v37;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *unint64_t v20 = v37;
    v20[1] = v36;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  int64_t v24 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v39 = 1 << *(unsigned char *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v24 = -1 << v39;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  uint64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    id v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  id v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  id v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *id v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CKShareParticipant>);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    id v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  id v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *id v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Set<CKShareParticipant>>);
  int64_t v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    id v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  id v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *id v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  void *v41;
  uint64_t i;
  char v43;
  int64_t v44;
  uint64_t v45;
  long long v46;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PresenceUpdateMessage>);
  uint64_t v43 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v41 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v40 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v44 = v13;
        int64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        id v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v40) {
          goto LABEL_33;
        }
        unint64_t v23 = v41[v22];
        int64_t v24 = v13 + 1;
        if (!v23)
        {
          int64_t v24 = v13 + 2;
          if (v13 + 2 >= v40) {
            goto LABEL_33;
          }
          unint64_t v23 = v41[v24];
          if (!v23)
          {
            char v25 = v13 + 3;
            if (v13 + 3 >= v40)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v43)
              {
                uint64_t v39 = 1 << *(unsigned char *)(v5 + 32);
                if (v39 >= 64) {
                  bzero(v41, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v41 = -1 << v39;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v41[v25];
            if (!v23)
            {
              while (1)
              {
                int64_t v24 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v24 >= v40) {
                  goto LABEL_33;
                }
                unint64_t v23 = v41[v24];
                ++v25;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v24 = v13 + 3;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        uint64_t v44 = v24;
        int64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
      }
      uint64_t v30 = *(void *)(v5 + 56);
      uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      id v33 = *v31;
      uint64_t v32 = v31[1];
      uint64_t v34 = v30 + 56 * v21;
      int64_t v36 = *(void *)v34;
      uint64_t v35 = *(void *)(v34 + 8);
      uint64_t v37 = *(void *)(v34 + 16);
      unint64_t v46 = *(_OWORD *)(v34 + 24);
      char v38 = *(void *)(v34 + 48);
      uint64_t v45 = *(void *)(v34 + 40);
      if ((v43 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of PresenceUpdateMessage.Kind(v36, v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v26 = 0;
        BOOL v27 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v28 = v16 == v27;
          if (v16 == v27) {
            unint64_t v16 = 0;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v11 + 8 * v16);
        }
        while (v29 == -1);
        unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *uint64_t v18 = v33;
      v18[1] = v32;
      unint64_t v19 = *(void *)(v7 + 56) + 56 * v17;
      *(void *)unint64_t v19 = v36;
      *(void *)(v19 + 8) = v35;
      *(void *)(v19 + 16) = v37;
      *(_OWORD *)(v19 + 24) = v46;
      int64_t v13 = v44;
      *(void *)(v19 + 40) = v45;
      *(void *)(v19 + 48) = v38;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  uint64_t v6 = (_OWORD *)(a5[7] + 48 * result);
  long long v7 = a4[1];
  _OWORD *v6 = *a4;
  v6[1] = v7;
  v6[2] = a4[2];
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  void *v6 = a2;
  v6[1] = a3;
  long long v7 = (void *)(a6[7] + 16 * result);
  void *v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

{
  void *v5;
  uint64_t v6;
  long long v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  uint64_t v6 = a5[7] + 56 * result;
  BOOL v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a4;
  *(_OWORD *)(v6 + 16) = v7;
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a4 + 32);
  *(void *)(v6 + 48) = *(void *)(a4 + 48);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 48 * v12;

      swift_release();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      long long v21 = a1[1];
      *(_OWORD *)uint64_t v19 = *a1;
      *(_OWORD *)(v19 + 16) = v21;
      *(_OWORD *)(v19 + 32) = a1[2];
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  int64_t v24 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v24 = a2;
  v24[1] = a3;
  char v25 = (_OWORD *)(v18[7] + 48 * v12);
  long long v26 = a1[1];
  *char v25 = *a1;
  v25[1] = v26;
  v25[2] = a1[2];
  uint64_t v27 = v18[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v29;
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v20 = a2;
  v20[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v23;
  return swift_bridgeObjectRetain();
}

{
  void *v4;
  void *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t vars8;

  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      char v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  int64_t v24 = v18[2];
  char v25 = __OFADD__(v24, 1);
  long long v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;
  return swift_bridgeObjectRetain();
}

{
  void *v4;
  void *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t vars8;

  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_18;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      char v19 = v18[7] + 56 * v12;
      return outlined assign with take of PresenceUpdateMessage(a1, v19);
    }
    goto LABEL_13;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_19:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_13:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v23 = a2;
  v23[1] = a3;
  int64_t v24 = v18[7] + 56 * v12;
  char v25 = *(_OWORD *)a1;
  long long v26 = *(_OWORD *)(a1 + 16);
  uint64_t v27 = *(_OWORD *)(a1 + 32);
  *(void *)(v24 + 48) = *(void *)(a1 + 48);
  *(_OWORD *)(v24 + 16) = v26;
  *(_OWORD *)(v24 + 32) = v27;
  *(_OWORD *)int64_t v24 = v25;
  BOOL v28 = v18[2];
  uint64_t v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (v29)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v18[2] = v30;
  return swift_bridgeObjectRetain();
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  BOOL v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination()(a1, v4, v5, v6);
}

uint64_t objectdestroyTm()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  BOOL v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination()(a1, v4, v5, v6);
}

uint64_t sub_261775310()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator.beginCollaborationForShare(_:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 32) = v3;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.beginCollaborationForShare(_:), 0, 0);
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator.shareDidUpdate(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in ParticipantPresenceCoordinator.shareDidUpdate(_:)(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator.endCollaborationForShare(_:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 16) = v3;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.endCollaborationForShare(_:), 0, 0);
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator.removeTabGroup(_:)()
{
  long long v5 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v5;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.removeTabGroup(_:), 0, 0);
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator.removeTab(_:)()
{
  long long v5 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v5;
  return MEMORY[0x270FA2498](closure #1 in ParticipantPresenceCoordinator.removeTab(_:), 0, 0);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  long long v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  BOOL v22 = (uint64_t *)(v18[6] + 16 * v12);
  *BOOL v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v25;
  swift_bridgeObjectRetain();
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Participant();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  char v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v59 = (char *)&v49 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = ~v13;
  uint64_t v15 = a1 + 56;
  uint64_t v16 = -v13;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & *(void *)(a1 + 56);
  uint64_t v60 = a1;
  uint64_t v61 = a1 + 56;
  unint64_t v54 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v55 = v6;
  uint64_t v62 = v14;
  uint64_t v63 = 0;
  unint64_t v64 = v18;
  unint64_t v53 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  v51 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v57 = v8 + 16;
  uint64_t v58 = (char *)(a2 + 56);
  uint64_t v19 = (void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v56 = v8;
  uint64_t v52 = a2;
  uint64_t v50 = 0;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v21 = (v18 - 1) & v18;
  unint64_t v22 = __clz(__rbit64(v18)) | (v20 << 6);
  int64_t v23 = v20;
LABEL_7:
  unint64_t v24 = *(void *)(a1 + 48) + *(void *)(v8 + 72) * v22;
  uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v26 = (uint64_t)v55;
  v25(v55, v24, v7);
  uint64_t v27 = 0;
  while (1)
  {
    (*v54)(v26, v27, 1, v7);
    uint64_t v60 = a1;
    uint64_t v61 = v15;
    uint64_t v62 = v14;
    uint64_t v63 = v23;
    unint64_t v64 = v21;
    if ((*v53)(v26, 1, v7) == 1)
    {
      outlined consume of Set<Participant>.Iterator._Variant();
      outlined destroy of TaskPriority?(v26, &demangling cache variable for type metadata for Participant?);
      return v52;
    }
    (*v51)(v59, v26, v7);
    uint64_t v31 = v52;
    lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x263F08F20]);
    uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
    unint64_t v34 = v32 & ~v33;
    if ((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34)) {
      break;
    }
    uint64_t v40 = *v19;
    uint64_t v8 = v56;
LABEL_35:
    v40(v59, v7);
    int64_t v20 = v63;
    unint64_t v18 = v64;
    a1 = v60;
    uint64_t v15 = v61;
    uint64_t v14 = v62;
    uint64_t v50 = v63;
    if (v64) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      __break(1u);
    }
    int64_t v28 = (unint64_t)(v14 + 64) >> 6;
    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v23);
    if (v29) {
      goto LABEL_11;
    }
    v20 += 2;
    if (v23 + 1 >= v28) {
      goto LABEL_37;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v20);
    if (v29) {
      goto LABEL_14;
    }
    if (v23 + 2 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * (v23 + 2));
    if (v29)
    {
      v23 += 2;
      goto LABEL_11;
    }
    int64_t v20 = v23 + 3;
    if (v23 + 3 < v28)
    {
      unint64_t v29 = *(void *)(v15 + 8 * v20);
      if (v29)
      {
LABEL_14:
        int64_t v23 = v20;
LABEL_11:
        uint64_t v21 = (v29 - 1) & v29;
        unint64_t v22 = __clz(__rbit64(v29)) + (v23 << 6);
        goto LABEL_7;
      }
      v23 += 4;
      if (v23 >= v28)
      {
LABEL_26:
        uint64_t v21 = 0;
        uint64_t v27 = 1;
        int64_t v23 = v20;
        goto LABEL_27;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v23);
      if (v29) {
        goto LABEL_11;
      }
      int64_t v23 = v28 - 1;
      uint64_t v30 = v50 + 6;
      while (v28 != v30)
      {
        unint64_t v29 = *(void *)(v15 + 8 * v30++);
        if (v29)
        {
          int64_t v23 = v30 - 1;
          goto LABEL_11;
        }
      }
LABEL_37:
      uint64_t v21 = 0;
      uint64_t v27 = 1;
      goto LABEL_27;
    }
    uint64_t v21 = 0;
    uint64_t v27 = 1;
    v23 += 2;
LABEL_27:
    uint64_t v26 = (uint64_t)v55;
  }
  uint64_t v50 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v35 = v31;
  uint64_t v36 = ~v33;
  uint64_t v37 = *(void *)(v56 + 72);
  char v38 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  while (1)
  {
    v38(v11, *(void *)(v35 + 48) + v37 * v34, v7);
    lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x263F08F20]);
    char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v40 = *v19;
    (*v19)(v11, v7);
    if (v39) {
      break;
    }
    unint64_t v34 = (v34 + 1) & v36;
    if (((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34) & 1) == 0)
    {
      uint64_t v8 = v56;
      goto LABEL_35;
    }
  }
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v40)(v59, v7);
  char v42 = *(unsigned char *)(v35 + 32);
  unint64_t v43 = (unint64_t)((1 << v42) + 63) >> 6;
  size_t v44 = 8 * v43;
  if ((v42 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    memcpy((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0), v58, v44);
    uint64_t v45 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0)), v43, v35, v34, &v60);
    swift_release();
    outlined consume of Set<Participant>.Iterator._Variant();
    return v45;
  }
  else
  {
    uint64_t v47 = (void *)swift_slowAlloc();
    memcpy(v47, v58, v44);
    uint64_t v48 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v47, v43, v35, v34, &v60);
    swift_release();
    outlined consume of Set<Participant>.Iterator._Variant();
    MEMORY[0x263E3FE70](v47, -1, -1);
    return v48;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (**v12)(char *, uint64_t);
  uint64_t v13;
  unint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  char v38 = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for Participant();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v35 = (char *)&v30 - v9;
  if (*(void *)(a2 + 16))
  {
    uint64_t v36 = a1;
    uint64_t v10 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    if (v10)
    {
      char v11 = 0;
      uint64_t v33 = v5 + 16;
      unint64_t v34 = (char *)(a2 + 56);
      uint64_t v12 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v31 = v5;
      uint64_t v32 = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      while (1)
      {
        if (v11 >= v10) {
          __break(1u);
        }
        uint64_t v13 = *(void *)(v5 + 72);
        uint64_t v14 = a1
            + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
            + v13 * v11;
        uint64_t v37 = v11 + 1;
        uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
        v15(v35, v14, v4);
        lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x263F08F20]);
        uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v17 = -1 << *(unsigned char *)(a2 + 32);
        unint64_t v18 = v16 & ~v17;
        if ((*(void *)&v34[(v18 >> 3) & 0xFFFFFFFFFFFFFF8] >> v18)) {
          break;
        }
        unint64_t v22 = *v12;
LABEL_11:
        v22(v35, v4);
        a1 = v36;
        char v11 = v37;
        uint64_t v10 = *(void *)(v36 + 16);
        if (v37 == v10) {
          goto LABEL_12;
        }
      }
      uint64_t v19 = a2;
      int64_t v20 = ~v17;
      while (1)
      {
        v15(v8, *(void *)(v19 + 48) + v18 * v13, v4);
        lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x263F08F20]);
        uint64_t v21 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v22 = *v12;
        (*v12)(v8, v4);
        if (v21) {
          break;
        }
        unint64_t v18 = (v18 + 1) & v20;
        if (((*(void *)&v34[(v18 >> 3) & 0xFFFFFFFFFFFFFF8] >> v18) & 1) == 0)
        {
          a2 = v19;
          uint64_t v5 = v31;
          goto LABEL_11;
        }
      }
      uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v22)(v35, v4);
      unint64_t v24 = *(unsigned char *)(v19 + 32);
      uint64_t v25 = (unint64_t)((1 << v24) + 63) >> 6;
      uint64_t v26 = 8 * v25;
      if ((v24 & 0x3Fu) <= 0xD
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
      {
        MEMORY[0x270FA5388](isStackAllocationSafe);
        memcpy((char *)&v30 - ((v26 + 15) & 0x3FFFFFFFFFFFFFF0), v34, v26);
        uint64_t v27 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v30 - ((v26 + 15) & 0x3FFFFFFFFFFFFFF0)), v25, v19, v18, &v36);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        int64_t v28 = (void *)swift_slowAlloc();
        memcpy(v28, v34, v26);
        uint64_t v27 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v28, v25, v19, v18, &v36);
        swift_release();
        swift_bridgeObjectRelease();
        MEMORY[0x263E3FE70](v28, -1, -1);
      }
      return v27;
    }
    else
    {
LABEL_12:
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  return a2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  Swift::Int isStackAllocationSafe;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  const char *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  void *v50;
  id v51;
  char v52;
  id v53;
  char v54;
  unint64_t v55;
  size_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  int64_t v68;
  unint64_t v69;
  id v70;
  void v71[7];

  uint64_t v2 = a2;
  v71[5] = *MEMORY[0x263EF8340];
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v65 = a1 + 56;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v63 = ~v4;
  if (-v4 < 64) {
    uint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v5 = -1;
  }
  uint64_t v6 = v5 & v3;
  unint64_t v64 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = (char *)(a2 + 56);
  uint64_t v8 = swift_bridgeObjectRetain();
  v67 = v7;
  v68 = 0;
  uint64_t v9 = (const char *)&off_265585000;
  v66 = v8;
  while (1)
  {
    if (v6)
    {
      uint64_t v10 = __clz(__rbit64(v6));
      char v11 = (v6 - 1) & v6;
      uint64_t v12 = v10 | (v68 << 6);
    }
    else
    {
      uint64_t v13 = v68 + 1;
      if (__OFADD__(v68, 1))
      {
        __break(1u);
        goto LABEL_77;
      }
      if (v13 >= v64) {
        goto LABEL_66;
      }
      uint64_t v14 = *(void *)(v65 + 8 * v13);
      uint64_t v15 = v68 + 1;
      if (!v14)
      {
        uint64_t v15 = v68 + 2;
        if (v68 + 2 >= v64) {
          goto LABEL_66;
        }
        uint64_t v14 = *(void *)(v65 + 8 * v15);
        if (!v14)
        {
          uint64_t v15 = v68 + 3;
          if (v68 + 3 >= v64) {
            goto LABEL_66;
          }
          uint64_t v14 = *(void *)(v65 + 8 * v15);
          if (!v14)
          {
            uint64_t v15 = v68 + 4;
            if (v68 + 4 >= v64) {
              goto LABEL_66;
            }
            uint64_t v14 = *(void *)(v65 + 8 * v15);
            if (!v14)
            {
              uint64_t v16 = v68 + 5;
              if (v68 + 5 >= v64)
              {
LABEL_66:
                outlined consume of Set<Participant>.Iterator._Variant();
                return v2;
              }
              uint64_t v14 = *(void *)(v65 + 8 * v16);
              if (!v14)
              {
                while (1)
                {
                  uint64_t v15 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    break;
                  }
                  if (v15 >= v64) {
                    goto LABEL_66;
                  }
                  uint64_t v14 = *(void *)(v65 + 8 * v15);
                  ++v16;
                  if (v14) {
                    goto LABEL_24;
                  }
                }
LABEL_77:
                __break(1u);
              }
              uint64_t v15 = v68 + 5;
            }
          }
        }
      }
LABEL_24:
      char v11 = (v14 - 1) & v14;
      uint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
      v68 = v15;
    }
    uint64_t v17 = *(void **)(*(void *)(v8 + 48) + 8 * v12);
    Hasher.init(_seed:)();
    v69 = v11;
    if (v17)
    {
      unint64_t v18 = v17;
      if ([v18 *((SEL *)v9 + 169)] == (id)2
        && (uint64_t v19 = objc_msgSend(v18, sel_userIdentity),
            int64_t v20 = objc_msgSend(v19, sel_userRecordID),
            v19,
            v20))
      {
        uint64_t v21 = objc_msgSend(v20, sel_recordName);

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher._combine(_:)(1u);
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
    }
    else
    {
      String.hash(into:)();
    }
    uint64_t isStackAllocationSafe = Hasher._finalize()();
    int64_t v23 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v24 = isStackAllocationSafe & ~v23;
    if ((*(void *)&v7[(v24 >> 3) & 0xFFFFFFFFFFFFFF8] >> v24)) {
      break;
    }
LABEL_6:

    uint64_t v8 = v66;
    uint64_t v6 = v69;
  }
  uint64_t v25 = ~v23;
  while (1)
  {
    uint64_t v26 = *(void **)(*(void *)(v2 + 48) + 8 * v24);
    if (v26)
    {
      uint64_t v27 = v26;
      if ([v27 *((SEL *)v9 + 169)] != (id)2
        || (int64_t v28 = objc_msgSend(v27, sel_userIdentity),
            unint64_t v29 = objc_msgSend(v28, sel_userRecordID),
            v28,
            !v29))
      {

LABEL_41:
        goto LABEL_34;
      }
      uint64_t v30 = objc_msgSend(v29, sel_recordName);

      if (!v17) {
        goto LABEL_41;
      }
    }
    else if (!v17)
    {
      goto LABEL_70;
    }
    uint64_t v31 = v17;
    if ([v31 *((SEL *)v9 + 169)] != (id)2
      || (uint64_t v32 = objc_msgSend(v31, sel_userIdentity),
          uint64_t v33 = objc_msgSend(v32, sel_userRecordID),
          v32,
          !v33))
    {

      goto LABEL_34;
    }
    unint64_t v34 = objc_msgSend(v33, sel_recordName);

    if (!v26) {
      goto LABEL_34;
    }
    uint64_t v35 = v31;
    uint64_t v36 = v26;
    uint64_t v37 = v9;
    char v38 = v36;
    if ([v36 v37 + 1058] == (id)2
      && (char v39 = objc_msgSend(v38, sel_userIdentity),
          uint64_t v40 = objc_msgSend(v39, sel_userRecordID),
          v39,
          v40))
    {
      uint64_t v41 = v35;
      char v42 = objc_msgSend(v40, sel_recordName);

      unint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v45 = v44;

      uint64_t v35 = v41;
    }
    else
    {
      unint64_t v43 = 0;
      uint64_t v45 = 0;
    }
    v70 = v35;
    if (objc_msgSend(v35, sel_acceptanceStatus) == (id)2)
    {
      unint64_t v46 = objc_msgSend(v35, sel_userIdentity);
      uint64_t v47 = objc_msgSend(v46, sel_userRecordID);

      if (v47)
      {
        uint64_t v48 = objc_msgSend(v47, sel_recordName);

        uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v47 = v50;

        if (!v45) {
          goto LABEL_53;
        }
      }
      else
      {
        uint64_t v49 = 0;
        if (!v45)
        {
LABEL_53:

          v51 = v70;
          if (!v47) {
            goto LABEL_68;
          }

          uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
          goto LABEL_62;
        }
      }
    }
    else
    {
      uint64_t v49 = 0;
      uint64_t v47 = 0;
      if (!v45) {
        goto LABEL_53;
      }
    }
    if (!v47)
    {
      swift_bridgeObjectRelease();

LABEL_62:
      uint64_t v7 = v67;
      uint64_t v9 = (const char *)&off_265585000;
      goto LABEL_34;
    }
    if (v43 == v49 && v45 == v47) {
      break;
    }
    uint64_t v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    unint64_t v53 = v70;
    uint64_t v7 = v67;
    uint64_t v9 = (const char *)&off_265585000;
    if (v52) {
      goto LABEL_69;
    }
LABEL_34:
    unint64_t v24 = (v24 + 1) & v25;
    if (((*(void *)&v7[(v24 >> 3) & 0xFFFFFFFFFFFFFF8] >> v24) & 1) == 0) {
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v51 = v70;
  char v38 = v70;
LABEL_68:
  uint64_t v7 = v67;

  unint64_t v53 = v38;
LABEL_69:

LABEL_70:
  v71[0] = v66;
  v71[1] = v65;
  v71[2] = v63;
  v71[3] = v68;
  v71[4] = v69;
  unint64_t v54 = *(unsigned char *)(v2 + 32);
  uint64_t v55 = (unint64_t)((1 << v54) + 63) >> 6;
  uint64_t v56 = 8 * v55;
  if ((v54 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    memcpy((char *)&v62 - ((v56 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v56);
    specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v62 - ((v56 + 15) & 0x3FFFFFFFFFFFFFF0)), v55, v2, v24, v71);
    uint64_t v58 = v57;
    swift_release();
    outlined consume of Set<Participant>.Iterator._Variant();
  }
  else
  {
    uint64_t v59 = (void *)swift_slowAlloc();
    memcpy(v59, v7, v56);
    specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v59, v55, v2, v24, v71);
    uint64_t v58 = v60;
    swift_release();
    outlined consume of Set<Participant>.Iterator._Variant();
    MEMORY[0x263E3FE70](v59, -1, -1);
  }
  return v58;
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Participant();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v25 - v12;
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v25 = a1 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v28 = v7 + 16;
  int64_t v26 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v27 = v7 + 32;
  uint64_t v18 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  while (1)
  {
    if (v17)
    {
      unint64_t v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v21 = v20 | (v19 << 6);
      goto LABEL_6;
    }
    int64_t v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v26) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v25 + 8 * v22);
    ++v19;
    if (!v23)
    {
      int64_t v19 = v22 + 1;
      if (v22 + 1 >= v26) {
        return swift_release();
      }
      unint64_t v23 = *(void *)(v25 + 8 * v19);
      if (!v23)
      {
        int64_t v19 = v22 + 2;
        if (v22 + 2 >= v26) {
          return swift_release();
        }
        unint64_t v23 = *(void *)(v25 + 8 * v19);
        if (!v23)
        {
          int64_t v19 = v22 + 3;
          if (v22 + 3 >= v26) {
            return swift_release();
          }
          unint64_t v23 = *(void *)(v25 + 8 * v19);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v13, *(void *)(v18 + 48) + *(void *)(v7 + 72) * v21, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v13, v6);
    specialized Set._Variant.remove(_:)((uint64_t)v10, (uint64_t)v5);
    outlined destroy of TaskPriority?((uint64_t)v5, &demangling cache variable for type metadata for Participant?);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23)
  {
    int64_t v19 = v24;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v19 >= v26) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v25 + 8 * v19);
    ++v24;
    if (v23) {
      goto LABEL_23;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void specialized Set._subtract<A>(_:)(uint64_t a1)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return;
  }
  uint64_t v3 = a1 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return;
    }
    if (v14 >= v7) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v15 = *(void *)(v3 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    char v11 = *(void **)(*(void *)(a1 + 48) + 8 * v10);
    id v12 = v11;
    uint64_t v13 = (void *)specialized Set._Variant.remove(_:)(v11);
    outlined consume of ParticipantHandleMap.ParticipantKind?(v13);
  }
  int64_t v16 = v14 + 4;
  if (v16 < v7)
  {
    unint64_t v15 = *(void *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v8 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        ++v16;
        if (v15) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v16;
    goto LABEL_23;
  }
LABEL_24:
  swift_release();
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v52 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x270FA5388](v9 - 8);
  char v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Participant();
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  unint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v13);
  uint64_t v65 = (char *)&v52 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v20 = *(unint64_t *)((char *)a1 + v19);
  unint64_t v54 = a1;
  uint64_t v55 = v11;
  *(unint64_t *)((char *)a1 + v19) = v20 & ((-1 << a4) - 1);
  uint64_t v22 = v21;
  uint64_t v23 = v18 - 1;
  uint64_t v63 = v21 + 16;
  uint64_t v64 = a3;
  uint64_t v58 = (unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v59 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  uint64_t v56 = a5;
  uint64_t v57 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v62 = a3 + 56;
  int64_t v24 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v60 = v21;
  while (2)
  {
    uint64_t v53 = v23;
    do
    {
      while (1)
      {
        uint64_t v26 = *a5;
        uint64_t v27 = a5[1];
        uint64_t v29 = a5[2];
        int64_t v28 = a5[3];
        unint64_t v30 = a5[4];
        if (v30)
        {
          uint64_t v61 = (v30 - 1) & v30;
          unint64_t v31 = __clz(__rbit64(v30)) | (v28 << 6);
LABEL_7:
          unint64_t v32 = *(void *)(v26 + 48) + *(void *)(v22 + 72) * v31;
          uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
          uint64_t v34 = v26;
          v33(v11, v32, v12);
          uint64_t v35 = 0;
          goto LABEL_8;
        }
        int64_t v44 = v28 + 1;
        if (__OFADD__(v28, 1))
        {
          __break(1u);
          goto LABEL_44;
        }
        int64_t v45 = (unint64_t)(v29 + 64) >> 6;
        if (v44 >= v45)
        {
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v44);
        if (v46) {
          goto LABEL_17;
        }
        int64_t v49 = v28 + 2;
        if (v28 + 2 >= v45) {
          goto LABEL_35;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v49);
        if (v46) {
          goto LABEL_23;
        }
        if (v28 + 3 >= v45) {
          goto LABEL_36;
        }
        unint64_t v46 = *(void *)(v27 + 8 * (v28 + 3));
        if (v46)
        {
          int64_t v44 = v28 + 3;
          goto LABEL_17;
        }
        int64_t v49 = v28 + 4;
        if (v28 + 4 < v45)
        {
          unint64_t v46 = *(void *)(v27 + 8 * v49);
          if (v46)
          {
LABEL_23:
            int64_t v44 = v49;
LABEL_17:
            uint64_t v61 = (v46 - 1) & v46;
            unint64_t v31 = __clz(__rbit64(v46)) + (v44 << 6);
            int64_t v28 = v44;
            goto LABEL_7;
          }
          int64_t v44 = v28 + 5;
          if (v28 + 5 < v45)
          {
            unint64_t v46 = *(void *)(v27 + 8 * v44);
            if (v46) {
              goto LABEL_17;
            }
            int64_t v44 = v45 - 1;
            int64_t v50 = v28 + 6;
            while (v45 != v50)
            {
              unint64_t v46 = *(void *)(v27 + 8 * v50++);
              if (v46)
              {
                int64_t v44 = v50 - 1;
                goto LABEL_17;
              }
            }
LABEL_35:
            uint64_t v61 = 0;
            uint64_t v35 = 1;
            int64_t v28 = v44;
            uint64_t v34 = v26;
            goto LABEL_8;
          }
LABEL_36:
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          int64_t v28 = v49;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        uint64_t v61 = 0;
        uint64_t v35 = 1;
        v28 += 3;
        uint64_t v34 = v26;
LABEL_8:
        (*v59)(v11, v35, 1, v12);
        *a5 = v34;
        a5[1] = v27;
        a5[2] = v29;
        a5[3] = v28;
        a5[4] = v61;
        if ((*v58)(v11, 1, v12) == 1)
        {
          outlined destroy of TaskPriority?((uint64_t)v11, &demangling cache variable for type metadata for Participant?);
          uint64_t v51 = v64;
          swift_retain();
          return specialized _NativeSet.extractSubset(using:count:)(v54, v52, v53, v51);
        }
        (*v57)(v65, v11, v12);
        uint64_t v36 = v64;
        lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x263F08F20]);
        uint64_t v37 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v38 = -1 << *(unsigned char *)(v36 + 32);
        unint64_t v39 = v37 & ~v38;
        if ((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39)) {
          break;
        }
        uint64_t v25 = *v24;
        uint64_t v22 = v60;
LABEL_4:
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v65, v12);
      }
      uint64_t v61 = (unint64_t)v24 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v40 = ~v38;
      uint64_t v41 = *(void *)(v60 + 72);
      char v42 = *(void (**)(char *, unint64_t, uint64_t))(v60 + 16);
      while (1)
      {
        v42(v15, *(void *)(v64 + 48) + v41 * v39, v12);
        lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x263F08F20]);
        char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v25 = *v24;
        (*v24)(v15, v12);
        if (v43) {
          break;
        }
        unint64_t v39 = (v39 + 1) & v40;
        if (((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
        {
          char v11 = v55;
          a5 = v56;
          uint64_t v22 = v60;
          goto LABEL_4;
        }
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v65, v12);
      uint64_t v47 = (v39 >> 3) & 0x1FFFFFFFFFFFFFF8;
      char v11 = v55;
      uint64_t v48 = *(unint64_t *)((char *)v54 + v47);
      *(unint64_t *)((char *)v54 + v47) = v48 & ~(1 << v39);
      a5 = v56;
      uint64_t v22 = v60;
    }
    while ((v48 & (1 << v39)) == 0);
    uint64_t v23 = v53 - 1;
    if (__OFSUB__(v53, 1))
    {
LABEL_44:
      __break(1u);
      return result;
    }
    if (v53 != 1) {
      continue;
    }
    return MEMORY[0x263F8EE88];
  }
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (**v28)(char *, uint64_t);
  void *v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, unint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;

  uint64_t v10 = type metadata accessor for Participant();
  char v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t result = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v44 - v18;
  uint64_t v20 = *(void *)(a3 + 16);
  uint64_t v21 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v22 = *(unint64_t *)((char *)a1 + v21);
  int64_t v45 = a1;
  *(unint64_t *)((char *)a1 + v21) = v22 & ((-1 << a4) - 1);
  uint64_t v23 = v20 - 1;
  int64_t v24 = *a5;
  uint64_t v25 = a5[1];
  uint64_t v26 = *(void *)(*a5 + 16);
  int64_t v44 = a2;
  unint64_t v46 = v23;
  if (v25 == v26)
  {
    uint64_t v27 = a3;
LABEL_3:
    swift_retain();
    return specialized _NativeSet.extractSubset(using:count:)(v45, v44, v46, v27);
  }
  else
  {
    uint64_t v55 = v19;
    unint64_t v54 = v16 + 16;
    int64_t v49 = v16 + 32;
    int64_t v50 = v17;
    uint64_t v51 = v16;
    uint64_t v52 = a3 + 56;
    int64_t v28 = (void (**)(char *, uint64_t))(v16 + 8);
    uint64_t v27 = a3;
    uint64_t v29 = a5;
    uint64_t v47 = a5;
    while (v25 < v26)
    {
      unint64_t v32 = v50;
      unint64_t v31 = v51;
      uint64_t v33 = *(unsigned __int8 *)(v51 + 80);
      uint64_t v53 = *(void *)(v51 + 72);
      uint64_t v34 = *(void (**)(uint64_t, unint64_t, uint64_t))(v51 + 16);
      v34(v50, v24 + ((v33 + 32) & ~v33) + v53 * v25, v10);
      v29[1] = v25 + 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v55, v32, v10);
      lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x263F08F20]);
      uint64_t v35 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v36 = -1 << *(unsigned char *)(v27 + 32);
      uint64_t v37 = v35 & ~v36;
      if ((*(void *)(v52 + ((v37 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v37))
      {
        uint64_t v48 = (unint64_t)v28 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        uint64_t v38 = v27;
        unint64_t v39 = ~v36;
        while (1)
        {
          v34((uint64_t)v13, *(void *)(v38 + 48) + v37 * v53, v10);
          lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x263F08F20]);
          uint64_t v40 = dispatch thunk of static Equatable.== infix(_:_:)();
          unint64_t v30 = *v28;
          (*v28)(v13, v10);
          if (v40) {
            break;
          }
          uint64_t v37 = (v37 + 1) & v39;
          if (((*(void *)(v52 + ((v37 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
          {
            uint64_t v27 = v38;
            uint64_t v29 = v47;
            goto LABEL_7;
          }
        }
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v30)(v55, v10);
        uint64_t v41 = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8;
        char v42 = *(unint64_t *)((char *)v45 + v41);
        *(unint64_t *)((char *)v45 + v41) = v42 & ~(1 << v37);
        if ((v42 & (1 << v37)) != 0)
        {
          char v43 = v46 - 1;
          if (__OFSUB__(v46, 1)) {
            goto LABEL_21;
          }
          uint64_t v27 = v38;
          uint64_t v29 = v47;
          --v46;
          if (!v43) {
            return MEMORY[0x263F8EE88];
          }
        }
        else
        {
          uint64_t v27 = v38;
          uint64_t v29 = v47;
        }
      }
      else
      {
        unint64_t v30 = *v28;
LABEL_7:
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v30)(v55, v10);
      }
      int64_t v24 = *v29;
      uint64_t v25 = v29[1];
      uint64_t v26 = *(void *)(*v29 + 16);
      if (v25 == v26) {
        goto LABEL_3;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  return result;
}

void specialized closure #1 in _NativeSet.subtracting<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v53 = a2;
  uint64_t v5 = a3;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v56 = a5;
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v7 = v6 - 1;
  uint64_t v8 = a3 + 56;
  uint64_t v58 = a3 + 56;
  do
  {
    uint64_t v54 = v7;
    do
    {
      while (1)
      {
        int64_t v10 = a5[3];
        unint64_t v9 = a5[4];
        if (v9)
        {
          uint64_t v11 = (v9 - 1) & v9;
          unint64_t v12 = __clz(__rbit64(v9)) | (v10 << 6);
          goto LABEL_16;
        }
        int64_t v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_79:
          __break(1u);
          return;
        }
        int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
        if (v13 >= v14)
        {
          int64_t v13 = a5[3];
LABEL_75:
          a5[3] = v13;
          a5[4] = 0;
          swift_retain();
          specialized _NativeSet.extractSubset(using:count:)(a1, v53, v54, v5);
          return;
        }
        uint64_t v15 = a5[1];
        unint64_t v16 = *(void *)(v15 + 8 * v13);
        if (!v16)
        {
          int64_t v17 = v10 + 2;
          if (v10 + 2 >= v14) {
            goto LABEL_75;
          }
          unint64_t v16 = *(void *)(v15 + 8 * v17);
          if (!v16)
          {
            if (v10 + 3 >= v14) {
              goto LABEL_76;
            }
            unint64_t v16 = *(void *)(v15 + 8 * (v10 + 3));
            if (v16)
            {
              int64_t v13 = v10 + 3;
              goto LABEL_15;
            }
            int64_t v17 = v10 + 4;
            if (v10 + 4 >= v14)
            {
              int64_t v13 = v10 + 3;
              goto LABEL_75;
            }
            unint64_t v16 = *(void *)(v15 + 8 * v17);
            if (!v16)
            {
              int64_t v13 = v10 + 5;
              if (v10 + 5 >= v14)
              {
LABEL_76:
                int64_t v13 = v17;
                goto LABEL_75;
              }
              unint64_t v16 = *(void *)(v15 + 8 * v13);
              if (!v16)
              {
                int64_t v13 = v14 - 1;
                int64_t v49 = v10 + 6;
                do
                {
                  if (v14 == v49) {
                    goto LABEL_75;
                  }
                  unint64_t v16 = *(void *)(v15 + 8 * v49++);
                }
                while (!v16);
                int64_t v13 = v49 - 1;
              }
              goto LABEL_15;
            }
          }
          int64_t v13 = v17;
        }
LABEL_15:
        uint64_t v11 = (v16 - 1) & v16;
        unint64_t v12 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v10 = v13;
LABEL_16:
        uint64_t v18 = *(void **)(*(void *)(*a5 + 48) + 8 * v12);
        a5[3] = v10;
        a5[4] = v11;
        Hasher.init(_seed:)();
        if (v18)
        {
          id v19 = v18;
          if (objc_msgSend(v19, sel_acceptanceStatus, v53) == (id)2
            && (id v20 = objc_msgSend(v19, sel_userIdentity),
                id v21 = objc_msgSend(v20, sel_userRecordID),
                v20,
                v21))
          {
            id v22 = objc_msgSend(v21, sel_recordName);

            static String._unconditionallyBridgeFromObjectiveC(_:)();
            Hasher._combine(_:)(1u);
            uint64_t v8 = v58;
            String.hash(into:)();
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
        }
        else
        {
          String.hash(into:)();
        }
        Swift::Int v23 = Hasher._finalize()();
        uint64_t v24 = -1 << *(unsigned char *)(v5 + 32);
        unint64_t v25 = v23 & ~v24;
        if ((*(void *)(v8 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25)) {
          break;
        }
LABEL_3:

        a5 = v56;
      }
      uint64_t v26 = ~v24;
      while (1)
      {
        uint64_t v27 = *(void **)(*(void *)(v5 + 48) + 8 * v25);
        if (v27)
        {
          id v28 = v27;
          if (objc_msgSend(v28, sel_acceptanceStatus) != (id)2
            || (id v29 = objc_msgSend(v28, sel_userIdentity),
                id v30 = objc_msgSend(v29, sel_userRecordID),
                v29,
                !v30))
          {

LABEL_33:
            goto LABEL_26;
          }
          id v31 = objc_msgSend(v30, sel_recordName);

          if (!v18) {
            goto LABEL_33;
          }
        }
        else if (!v18)
        {
          goto LABEL_70;
        }
        id v32 = v18;
        if (objc_msgSend(v32, sel_acceptanceStatus) != (id)2
          || (id v33 = objc_msgSend(v32, sel_userIdentity),
              id v34 = objc_msgSend(v33, sel_userRecordID),
              v33,
              !v34))
        {

          goto LABEL_26;
        }
        id v35 = objc_msgSend(v34, sel_recordName);

        if (!v27) {
          goto LABEL_26;
        }
        id v36 = v32;
        id v37 = v27;
        if (objc_msgSend(v37, sel_acceptanceStatus) == (id)2)
        {
          id v38 = objc_msgSend(v37, sel_userIdentity);
          id v39 = objc_msgSend(v38, sel_userRecordID);

          if (v39)
          {
            id v40 = objc_msgSend(v39, sel_recordName);

            id v39 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
            id v42 = v41;

            goto LABEL_43;
          }
        }
        else
        {
          id v39 = 0;
        }
        id v42 = 0;
LABEL_43:
        uint64_t v59 = v36;
        if (objc_msgSend(v36, sel_acceptanceStatus, v53) != (id)2)
        {
          uint64_t v46 = 0;
          id v44 = 0;
          if (!v42) {
            break;
          }
          goto LABEL_49;
        }
        id v43 = objc_msgSend(v36, sel_userIdentity);
        id v44 = objc_msgSend(v43, sel_userRecordID);

        if (v44)
        {
          id v45 = objc_msgSend(v44, sel_recordName);

          uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v44 = v47;

          if (!v42) {
            break;
          }
          goto LABEL_49;
        }
        uint64_t v46 = 0;
        if (!v42) {
          break;
        }
LABEL_49:
        if (!v44)
        {
          swift_bridgeObjectRelease();

          goto LABEL_55;
        }
        if (v39 == (id)v46 && v42 == v44)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          int64_t v50 = v59;
          id v37 = v59;
          uint64_t v5 = a3;
          goto LABEL_68;
        }
        char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        id v37 = v59;
        uint64_t v5 = a3;
        uint64_t v8 = v58;
        if (v48) {
          goto LABEL_69;
        }
LABEL_26:
        unint64_t v25 = (v25 + 1) & v26;
        if (((*(void *)(v8 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0) {
          goto LABEL_3;
        }
      }

      if (v44)
      {

        swift_bridgeObjectRelease();
LABEL_55:
        uint64_t v5 = a3;
        uint64_t v8 = v58;
        goto LABEL_26;
      }
      uint64_t v5 = a3;
      int64_t v50 = v59;
LABEL_68:
      uint64_t v8 = v58;

LABEL_69:
LABEL_70:
      uint64_t v51 = (v25 >> 3) & 0x1FFFFFFFFFFFFFF8;
      a5 = v56;
      uint64_t v52 = *(unint64_t *)((char *)a1 + v51);
      *(unint64_t *)((char *)a1 + v51) = v52 & ~(1 << v25);
    }
    while ((v52 & (1 << v25)) == 0);
    uint64_t v7 = v54 - 1;
    if (__OFSUB__(v54, 1)) {
      goto LABEL_79;
    }
  }
  while (v54 != 1);
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v34 = a1;
  uint64_t v7 = type metadata accessor for Participant();
  uint64_t v37 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Participant>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  id v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x263F08F20]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;

  uint64_t v4 = a4;
  if (!a3)
  {
    unint64_t v9 = MEMORY[0x263F8EE88];
LABEL_43:
    swift_release();
    return v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ParticipantHandleMap.ParticipantKind>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  unint64_t v9 = result;
  id v34 = a1;
  if (a2 < 1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  unint64_t v12 = result + 56;
  uint64_t v32 = a2;
  uint64_t v33 = v4;
  while (1)
  {
    if (v10)
    {
      uint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_46;
    }
    if (v15 >= a2) {
      goto LABEL_43;
    }
    unint64_t v16 = v34[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_43;
      }
      unint64_t v16 = v34[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_43;
        }
        unint64_t v16 = v34[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v10 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    unint64_t v18 = *(void **)(*(void *)(v4 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    if (v18)
    {
      id v35 = v11;
      uint64_t v19 = v18;
      if (objc_msgSend(v19, sel_acceptanceStatus) == (id)2
        && (uint64_t v20 = objc_msgSend(v19, sel_userIdentity),
            uint64_t v21 = objc_msgSend(v20, sel_userRecordID),
            v20,
            v21))
      {
        uint64_t v22 = objc_msgSend(v21, sel_recordName);

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher._combine(_:)(1u);
        uint64_t v4 = v33;
        String.hash(into:)();
        a2 = v32;
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }

      uint64_t v11 = v35;
    }
    else
    {
      String.hash(into:)();
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v12 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    *(void *)(*(void *)(v9 + 48) + 8 * v26) = v18;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (!v5) {
      goto LABEL_43;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_43;
  }
  unint64_t v16 = v34[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_43;
    }
    unint64_t v16 = v34[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in FastSyncStateMachine.startActivity(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  return MEMORY[0x270FA2498](specialized closure #1 in FastSyncStateMachine.startActivity(_:), 0, 0);
}

uint64_t specialized closure #1 in FastSyncStateMachine.startActivity(_:)()
{
  static Task<>.checkCancellation()();
  uint64_t v1 = v0[5];
  uint64_t v4 = (uint64_t (*)(uint64_t, void))(v0[3] + *(int *)v0[3]);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[6] = v2;
  *uint64_t v2 = v0;
  v2[1] = specialized closure #1 in FastSyncStateMachine.startActivity(_:);
  return v4(v1, 0);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #1 in FastSyncStateMachine.startActivity(_:), 0, 0);
}

uint64_t specialized closure #2 in FastSyncStateMachine.startActivity(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a1;
  v7[3] = a5;
  uint64_t v8 = (void *)swift_task_alloc();
  v7[6] = v8;
  *uint64_t v8 = v7;
  v8[1] = specialized closure #2 in FastSyncStateMachine.startActivity(_:);
  return MEMORY[0x270FA1FD0]();
}

{
  void *v7;
  void *v8;
  uint64_t v10;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a1;
  v7[3] = a5;
  uint64_t v8 = (void *)swift_task_alloc();
  v7[6] = v8;
  *uint64_t v8 = v7;
  v8[1] = specialized closure #2 in FastSyncStateMachine.startActivity(_:);
  return MEMORY[0x270FA1FD0]();
}

uint64_t specialized closure #2 in FastSyncStateMachine.startActivity(_:)()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #2 in FastSyncStateMachine.startActivity(_:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v4)(uint64_t, void);
  uint64_t v5;

  static Task<>.checkCancellation()();
  uint64_t v1 = v0[5];
  uint64_t v4 = (uint64_t (*)(uint64_t, void))(v0[3] + *(int *)v0[3]);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[7] = v2;
  *uint64_t v2 = v0;
  v2[1] = specialized closure #2 in FastSyncStateMachine.startActivity(_:);
  return v4(v1, 0);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #1 in FastSyncStateMachine.startActivity(_:), 0, 0);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #2 in FastSyncStateMachine.startActivity(_:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v4)(uint64_t, void);
  uint64_t v5;

  static Task<>.checkCancellation()();
  uint64_t v1 = v0[5];
  uint64_t v4 = (uint64_t (*)(uint64_t, void))(v0[3] + *(int *)v0[3]);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[7] = v2;
  *uint64_t v2 = v0;
  v2[1] = specialized closure #2 in FastSyncStateMachine.startActivity(_:);
  return v4(v1, 0);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #2 in FastSyncStateMachine.startActivity(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  uint64_t v3;

  **(void **)(v0 + 16) = *(void *)(v0 + 40);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  swift_retain();
  return v2();
}

uint64_t specialized closure #3 in FastSyncStateMachine.startActivity(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 16) = a1;
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v12;
  void *v12 = v7;
  v12[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  return specialized closure #3 in FastSyncStateMachine.startActivity(_:)(a4, a5, a6, a7);
}

{
  uint64_t v7;
  void *v12;
  uint64_t v14;

  *(void *)(v7 + 16) = a1;
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v12;
  void *v12 = v7;
  v12[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  return specialized closure #3 in FastSyncStateMachine.startActivity(_:)(a4, a5, a6, a7);
}

uint64_t specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = *a5;
  uint64_t v11 = a5[1];
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v12;
  void *v12 = v5;
  v12[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(a1, a2, a3, a4, v10, v11);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  uint64_t v10 = *a5;
  uint64_t v11 = a5[1];
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v12;
  void *v12 = v5;
  v12[1] = specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(a1, a2, a3, a4, v10, v11);
}

uint64_t specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12 = *a6;
  uint64_t v13 = a6[1];
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v14;
  *uint64_t v14 = v6;
  v14[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(a1, a2, a3, a4, a5, v12, v13);
}

{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  uint64_t v12 = *a6;
  uint64_t v13 = a6[1];
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v14;
  *uint64_t v14 = v6;
  v14[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(a1, a2, a3, a4, a5, v12, v13);
}

uint64_t specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12 = *a6;
  uint64_t v13 = a6[1];
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v14;
  *uint64_t v14 = v6;
  v14[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(a1, a2, a3, a4, a5, v12, v13);
}

{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  uint64_t v12 = *a6;
  uint64_t v13 = a6[1];
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v14;
  *uint64_t v14 = v6;
  v14[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(a1, a2, a3, a4, a5, v12, v13);
}

uint64_t specialized closure #1 in GroupSessionMessengerController._makeTasks()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = *a5;
  uint64_t v11 = a5[1];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v12;
  void *v12 = v5;
  v12[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #1 in GroupSessionMessengerController._makeTasks()(a1, a2, a3, a4, v10, v11);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  uint64_t v10 = *a5;
  uint64_t v11 = a5[1];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v12;
  void *v12 = v5;
  v12[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #1 in GroupSessionMessengerController._makeTasks()(a1, a2, a3, a4, v10, v11);
}

uint64_t specialized closure #2 in GroupSessionMessengerController._makeTasks()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = *a5;
  uint64_t v11 = a5[1];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v12;
  void *v12 = v5;
  v12[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #2 in GroupSessionMessengerController._makeTasks()(a1, a2, a3, a4, v10, v11);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  uint64_t v10 = *a5;
  uint64_t v11 = a5[1];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v12;
  void *v12 = v5;
  v12[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #2 in GroupSessionMessengerController._makeTasks()(a1, a2, a3, a4, v10, v11);
}

uint64_t specialized closure #3 in FastSyncStateMachine.startActivity(_:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    **(void **)(v4 + 16) = a1;
    uint64_t v8 = *(uint64_t (**)(void))(v5 + 8);
    swift_retain();
    return v8();
  }
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(BOOL, uint64_t, uint64_t))
{
  unint64_t v18 = a4;
  uint64_t v20 = a2;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation.YieldResult);
  MEMORY[0x270FA5388](v19);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v23 = MEMORY[0x263F8EE78];
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v17 = v4;
    uint64_t v12 = a1 + 32;
    uint64_t v13 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v14 = MEMORY[0x263F8EE78];
    do
    {
      outlined init with copy of TaskPriority?(v12, (uint64_t)v22, a3);
      if (swift_weakLoadStrong())
      {
        uint64_t v21 = v20;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation);
        AsyncStream.Continuation.yield(_:)();
        swift_release();
        (*v13)(v9, v19);
        outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)v22, (uint64_t)&v21, a3);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v18(0, *(void *)(v14 + 16) + 1, 1);
        }
        uint64_t v14 = v23;
        unint64_t v16 = *(void *)(v23 + 16);
        unint64_t v15 = *(void *)(v23 + 24);
        if (v16 >= v15 >> 1)
        {
          v18(v15 > 1, v16 + 1, 1);
          uint64_t v14 = v23;
        }
        *(void *)(v14 + 16) = v16 + 1;
        outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)&v21, v14 + 8 * v16 + 32, a3);
      }
      else
      {
        outlined destroy of TaskPriority?((uint64_t)v22, a3);
      }
      v12 += 8;
      --v11;
    }
    while (v11);
    return v23;
  }
  return result;
}

uint64_t specialized CollaborationConnectionManager.didLeaveGroupSession(_:)()
{
  *(void *)(v1 + 48) = v0;
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.didLeaveGroupSession(_:), v0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = (void *)v0[6];
  uint64_t v2 = v1[21];
  v0[7] = v2;
  if (v2)
  {
    swift_retain();
    return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.didLeaveGroupSession(_:), v2, 0);
  }
  else
  {
    v1[21] = 0;
    uint64_t v3 = (char *)v1 + *(void *)(*v1 + 176);
    swift_beginAccess();
    uint64_t v4 = *(void *)(*(void *)v3 + 16);
    if (v4)
    {
      uint64_t v5 = *(void *)v3 + 32;
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of TaskPriority?(v5, (uint64_t)(v0 + 5), &demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
        if (swift_weakLoadStrong())
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation);
          AsyncStream.Continuation.finish()();
          swift_release();
        }
        outlined destroy of TaskPriority?((uint64_t)(v0 + 5), &demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
        v5 += 8;
        --v4;
      }
      while (v4);
      swift_bridgeObjectRelease();
    }
    *(void *)uint64_t v3 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 48);
  specialized GroupSessionMessengerController.finish()();
  swift_release();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.didLeaveGroupSession(_:), v1, 0);
}

{
  uint64_t v0;
  void *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void **)(v0 + 48);
  v1[21] = 0;
  swift_release();
  uint64_t v2 = (char *)v1 + *(void *)(*v1 + 176);
  swift_beginAccess();
  uint64_t v3 = *(void *)(*(void *)v2 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)v2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of TaskPriority?(v4, v0 + 40, &demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
      if (swift_weakLoadStrong())
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation);
        AsyncStream.Continuation.finish()();
        swift_release();
      }
      outlined destroy of TaskPriority?(v0 + 40, &demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
      v4 += 8;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  *(void *)uint64_t v2 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 48) = v0;
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.didLeaveGroupSession(_:), v0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = (void *)v0[6];
  uint64_t v2 = v1[21];
  v0[7] = v2;
  if (v2)
  {
    swift_retain();
    return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.didLeaveGroupSession(_:), v2, 0);
  }
  else
  {
    v1[21] = 0;
    uint64_t v3 = (char *)v1 + *(void *)(*v1 + 176);
    swift_beginAccess();
    uint64_t v4 = *(void *)(*(void *)v3 + 16);
    if (v4)
    {
      uint64_t v5 = *(void *)v3 + 32;
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of TaskPriority?(v5, (uint64_t)(v0 + 5), &demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
        if (swift_weakLoadStrong())
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation);
          AsyncStream.Continuation.finish()();
          swift_release();
        }
        outlined destroy of TaskPriority?((uint64_t)(v0 + 5), &demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
        v5 += 8;
        --v4;
      }
      while (v4);
      swift_bridgeObjectRelease();
    }
    *(void *)uint64_t v3 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 48);
  specialized GroupSessionMessengerController.finish()();
  swift_release();
  return MEMORY[0x270FA2498](specialized CollaborationConnectionManager.didLeaveGroupSession(_:), v1, 0);
}

{
  uint64_t v0;
  void *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void **)(v0 + 48);
  v1[21] = 0;
  swift_release();
  uint64_t v2 = (char *)v1 + *(void *)(*v1 + 176);
  swift_beginAccess();
  uint64_t v3 = *(void *)(*(void *)v2 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)v2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of TaskPriority?(v4, v0 + 40, &demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
      if (swift_weakLoadStrong())
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation);
        AsyncStream.Continuation.finish()();
        swift_release();
      }
      outlined destroy of TaskPriority?(v0 + 40, &demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
      v4 += 8;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  *(void *)uint64_t v2 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

void specialized CollaborationConnectionManager.handleGroupSessionStateChange(_:state:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (void **)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  GroupSession.activity.getter();
  (*(void (**)(void **, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  int v8 = (*(uint64_t (**)(void **, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == *MEMORY[0x263F08EE8])
  {
    (*(void (**)(void **, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = *v7;
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.tabGroup);
    uint64_t v12 = v35;
    unint64_t v11 = v36;
    swift_bridgeObjectRetain();
    id v13 = v9;
    swift_bridgeObjectRetain();
    id v14 = v9;
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      unint64_t v18 = (void *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v37 = v19;
      *(_DWORD *)uint64_t v17 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v17 + 12) = 2112;
      id v20 = v9;
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v34 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v18 = v21;

      _os_log_impl(&dword_261746000, v15, v16, "Changed state to invalidated in groupSession for activity %{public}s with error: %@", (uint8_t *)v17, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v18, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v19, -1, -1);
      MEMORY[0x263E3FE70](v17, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    swift_willThrow();
    goto LABEL_19;
  }
  if (v8 == *MEMORY[0x263F08EF8])
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.tabGroup);
    uint64_t v24 = v35;
    unint64_t v23 = v36;
    swift_bridgeObjectRetain_n();
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      char v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v37 = v28;
      *(_DWORD *)char v27 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      BOOL v29 = "Changed state to waiting in groupSession for activity %{public}s";
LABEL_18:
      _os_log_impl(&dword_261746000, v25, v26, v29, v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v28, -1, -1);
      MEMORY[0x263E3FE70](v27, -1, -1);

LABEL_19:
      swift_bridgeObjectRelease();
      return;
    }
LABEL_20:
    swift_bridgeObjectRelease_n();

    return;
  }
  if (v8 == *MEMORY[0x263F08EF0])
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.tabGroup);
    uint64_t v32 = v35;
    unint64_t v31 = v36;
    swift_bridgeObjectRetain_n();
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      char v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v37 = v28;
      *(_DWORD *)char v27 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v31, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      BOOL v29 = "Changed state to joined in groupSession for activity %{public}s";
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(void **, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t specialized GroupSessionMessengerController.init(groupSession:)(uint64_t a1)
{
  uint64_t v3 = v1;
  v2[5] = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation.BufferingPolicy);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = swift_task_alloc();
  v2[6] = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation.BufferingPolicy);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = swift_task_alloc();
  v2[7] = v10;
  swift_defaultActor_initialize();
  uint64_t v11 = *MEMORY[0x263F8F580];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104))(v10, v11, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncBufferedQueue<PresenceUpdateMessage>);
  swift_allocObject();
  v3[15] = specialized AsyncBufferedQueue.init(bufferingPolicy:)(v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v7, v11, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncBufferedQueue<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>);
  swift_allocObject();
  v3[16] = specialized AsyncBufferedQueue.init(bufferingPolicy:)(v7);
  v3[18] = MEMORY[0x263F8EE78];
  v3[14] = a1;
  type metadata accessor for GroupSessionMessenger();
  swift_allocObject();
  swift_retain_n();
  v3[17] = GroupSessionMessenger.init<A>(session:)();
  return MEMORY[0x270FA2498](specialized GroupSessionMessengerController.init(groupSession:), v3, 0);
}

{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  uint64_t v3 = v1;
  v2[5] = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation.BufferingPolicy);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = swift_task_alloc();
  v2[6] = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation.BufferingPolicy);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = swift_task_alloc();
  v2[7] = v10;
  swift_defaultActor_initialize();
  uint64_t v11 = *MEMORY[0x263F8F580];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104))(v10, v11, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncBufferedQueue<PresenceUpdateMessage>);
  swift_allocObject();
  v3[15] = specialized AsyncBufferedQueue.init(bufferingPolicy:)(v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v7, v11, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncBufferedQueue<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>);
  swift_allocObject();
  v3[16] = specialized AsyncBufferedQueue.init(bufferingPolicy:)(v7);
  v3[18] = MEMORY[0x263F8EE78];
  v3[14] = a1;
  type metadata accessor for GroupSessionMessenger();
  swift_allocObject();
  swift_retain_n();
  v3[17] = GroupSessionMessenger.init<A>(session:)();
  return MEMORY[0x270FA2498](specialized GroupSessionMessengerController.init(groupSession:), v3, 0);
}

uint64_t specialized GroupSessionMessengerController.init(groupSession:)()
{
  uint64_t v1 = specialized GroupSessionMessengerController._makeTasks()();
  swift_beginAccess();
  specialized Array.append<A>(contentsOf:)(v1);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 40);
  return v2(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = specialized GroupSessionMessengerController._makeTasks()();
  swift_beginAccess();
  specialized Array.append<A>(contentsOf:)(v1);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 40);
  return v2(v3);
}

uint64_t specialized closure #3 in FastSyncStateMachine.startActivity(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  uint64_t v6 = (void *)swift_task_alloc();
  v4[6] = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  void *v6 = v4;
  v6[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  uint64_t v9 = MEMORY[0x263F8E4E0];
  return MEMORY[0x270FA1FA8](v4 + 2, a1, v7, v8, v9);
}

{
  void *v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  uint64_t v6 = (void *)swift_task_alloc();
  v4[6] = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  void *v6 = v4;
  v6[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  uint64_t v9 = MEMORY[0x263F8E4E0];
  return MEMORY[0x270FA1FA8](v4 + 2, a1, v7, v8, v9);
}

uint64_t specialized closure #3 in FastSyncStateMachine.startActivity(_:)()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {

    uint64_t v2 = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  }
  else
  {
    uint64_t v2 = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  int *v1;
  uint64_t v2;
  void *v3;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  uint64_t v2 = v0[2];
  uint64_t v1 = (int *)v0[3];
  v0[8] = v2;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)v1 + *v1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[9] = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  return v5(v2, 1);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](specialized closure #3 in FastSyncStateMachine.startActivity(_:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(uint64_t, void);
  uint64_t v7;

  swift_release();
  uint64_t v1 = v0[7];
  static Task<>.checkCancellation()();
  if (v1)
  {
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    uint64_t v4 = v0[5];
    uint64_t v6 = (uint64_t (*)(uint64_t, void))(v0[3] + *(int *)v0[3]);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[10] = v5;
    *uint64_t v5 = v0;
    v5[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
    return v6(v4, 0);
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v4)(uint64_t, void);
  uint64_t v5;

  static Task<>.checkCancellation()();
  uint64_t v1 = v0[5];
  uint64_t v4 = (uint64_t (*)(uint64_t, void))(v0[3] + *(int *)v0[3]);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[10] = v2;
  *uint64_t v2 = v0;
  v2[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  return v4(v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {

    uint64_t v2 = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  }
  else
  {
    uint64_t v2 = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  int *v1;
  uint64_t v2;
  void *v3;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  uint64_t v2 = v0[2];
  uint64_t v1 = (int *)v0[3];
  v0[8] = v2;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)v1 + *v1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[9] = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  return v5(v2, 1);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](specialized closure #3 in FastSyncStateMachine.startActivity(_:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(uint64_t, void);
  uint64_t v7;

  swift_release();
  uint64_t v1 = v0[7];
  static Task<>.checkCancellation()();
  if (v1)
  {
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    uint64_t v4 = v0[5];
    uint64_t v6 = (uint64_t (*)(uint64_t, void))(v0[3] + *(int *)v0[3]);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[10] = v5;
    *uint64_t v5 = v0;
    v5[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
    return v6(v4, 0);
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v4)(uint64_t, void);
  uint64_t v5;

  static Task<>.checkCancellation()();
  uint64_t v1 = v0[5];
  uint64_t v4 = (uint64_t (*)(uint64_t, void))(v0[3] + *(int *)v0[3]);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[10] = v2;
  *uint64_t v2 = v0;
  v2[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  return v4(v1, 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = *v0;
  uint64_t v5 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v5 + 8);
  uint64_t v3 = *(void *)(v1 + 40);
  return v2(v3);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a2;
  uint64_t v3 = type metadata accessor for Participant();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  id v40 = (char *)&v34 - v8;
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v36 = a1 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  uint64_t v39 = v4 + 16;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v4 + 32;
  uint64_t v13 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v42 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v15 = 0;
  uint64_t v35 = (void *)MEMORY[0x263F8EE78];
  if (v12) {
    goto LABEL_7;
  }
LABEL_8:
  while (2)
  {
    int64_t v18 = v15 + 1;
    if (!__OFADD__(v15, 1))
    {
      if (v18 < v37)
      {
        unint64_t v19 = *(void *)(v36 + 8 * v18);
        ++v15;
        if (v19) {
          goto LABEL_23;
        }
        int64_t v15 = v18 + 1;
        if (v18 + 1 >= v37) {
          goto LABEL_34;
        }
        unint64_t v19 = *(void *)(v36 + 8 * v15);
        if (v19) {
          goto LABEL_23;
        }
        int64_t v15 = v18 + 2;
        if (v18 + 2 >= v37) {
          goto LABEL_34;
        }
        unint64_t v19 = *(void *)(v36 + 8 * v15);
        if (v19) {
          goto LABEL_23;
        }
        int64_t v15 = v18 + 3;
        if (v18 + 3 >= v37) {
          goto LABEL_34;
        }
        unint64_t v19 = *(void *)(v36 + 8 * v15);
        if (v19)
        {
LABEL_23:
          unint64_t v12 = (v19 - 1) & v19;
          for (unint64_t i = __clz(__rbit64(v19)) + (v15 << 6); ; unint64_t i = v16 | (v15 << 6))
          {
            uint64_t v21 = v40;
            (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v40, *(void *)(v42 + 48) + *(void *)(v4 + 72) * i, v3);
            (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v21, v3);
            uint64_t v22 = Participant.handle.getter();
            uint64_t v24 = v23;
            uint64_t v25 = *(void *)(v41 + 112);
            if (!*(void *)(v25 + 16)) {
              goto LABEL_5;
            }
            uint64_t v26 = v22;
            swift_bridgeObjectRetain();
            unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v24);
            if ((v28 & 1) == 0) {
              break;
            }
            BOOL v29 = *(void **)(*(void *)(v25 + 56) + 8 * v27);
            id v30 = v29;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (!v29) {
              goto LABEL_6;
            }
            (*v13)(v7, v3);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
              uint64_t v35 = (void *)result;
            }
            unint64_t v32 = v35[2];
            unint64_t v31 = v35[3];
            if (v32 >= v31 >> 1)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v35);
              uint64_t v35 = (void *)result;
            }
            uint64_t v33 = v35;
            v35[2] = v32 + 1;
            v33[v32 + 4] = v29;
            if (!v12) {
              goto LABEL_8;
            }
LABEL_7:
            unint64_t v16 = __clz(__rbit64(v12));
            v12 &= v12 - 1;
          }
          swift_bridgeObjectRelease();
LABEL_5:
          swift_bridgeObjectRelease();
LABEL_6:
          uint64_t result = ((uint64_t (*)(char *, uint64_t))*v13)(v7, v3);
          if (!v12) {
            continue;
          }
          goto LABEL_7;
        }
        int64_t v20 = v18 + 4;
        if (v20 < v37)
        {
          unint64_t v19 = *(void *)(v36 + 8 * v20);
          if (v19)
          {
            int64_t v15 = v20;
            goto LABEL_23;
          }
          while (1)
          {
            int64_t v15 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_36;
            }
            if (v15 >= v37) {
              break;
            }
            unint64_t v19 = *(void *)(v36 + 8 * v15);
            ++v20;
            if (v19) {
              goto LABEL_23;
            }
          }
        }
      }
LABEL_34:
      swift_release();
      return (uint64_t)v35;
    }
    break;
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:)(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation.BufferingPolicy);
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:), 0, 0);
}

uint64_t specialized ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:)()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  uint64_t v4 = (void *)v0[5];
  id v5 = objc_msgSend(v4, sel_recordID);
  id v6 = objc_msgSend(v5, sel_zoneID);

  id v7 = objc_msgSend(v6, sel_zoneName);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>);
  unint64_t v12 = (void *)swift_allocObject();
  v0[10] = v12;
  id v13 = v4;
  swift_defaultActor_initialize();
  v12[21] = 0;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, *MEMORY[0x263F8F580], v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncBufferedQueue<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>);
  swift_allocObject();
  v12[22] = specialized AsyncBufferedQueue.init(bufferingPolicy:)(v1);
  id v14 = (char *)v12 + *(void *)(*v12 + 160);
  uint64_t v15 = type metadata accessor for Participant();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  *(void *)((char *)v12 + *(void *)(*v12 + 168)) = MEMORY[0x263F8EE88];
  *(void *)((char *)v12 + *(void *)(*v12 + 176)) = MEMORY[0x263F8EE78];
  v12[14] = 0;
  v12[15] = 0;
  v12[16] = 0xA000000000000000;
  v12[17] = v8;
  v12[18] = v10;
  v12[19] = partial apply for closure #1 in ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:);
  v12[20] = v11;
  return MEMORY[0x270FA2498](specialized ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:), v12, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 80);
  swift_beginAccess();
  swift_retain();
  specialized FastSyncStateMachine.startActivity(_:)((uint64_t)&async function pointer to partial apply for specialized closure #1 in CollaborationConnectionManager.startActivity(), v1);
  *(void *)(v0 + 88) = 0;
  swift_endAccess();
  swift_release();
  return MEMORY[0x270FA2498](specialized ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  uint64_t v1 = v0[11];
  uint64_t v2 = (void *)v0[5];
  type metadata accessor for ParticipantHandleMap();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = v2;
  swift_defaultActor_initialize();
  *(void *)(v3 + 112) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  id v5 = specialized static ParticipantHandleMap.handlesToParticipantKindsForShare(_:)(v4);
  id v6 = v0[10];
  if (v1)
  {
    id v7 = (void *)v0[5];
    swift_release();
    swift_release();

    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    uint64_t v10 = v5;
    uint64_t v11 = (void *)v0[5];

    *(void *)(v3 + 112) = v10;
    swift_bridgeObjectRelease();
    unint64_t v12 = ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)(v6, v11, v3);
    swift_task_dealloc();
    id v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
    id v14 = v0[10];
    return v13(v3, v14, v12);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[41] = a3;
  v4[42] = a4;
  v4[39] = a1;
  v4[40] = a2;
  return MEMORY[0x270FA2498](specialized ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:), a2, 0);
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:)()
{
  uint64_t v91 = v0;
  id v2 = objc_msgSend(*(id *)(v0 + 312), sel_recordID);
  id v3 = objc_msgSend(v2, sel_zoneID);

  id v4 = objc_msgSend(v3, sel_safari_tabGroupRootRecordName);
  if (!v4)
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.tabGroup);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_261746000, v22, v23, "Trying to start a collaboration activity with a CKShare not attached to a tab group", v24, 2u);
      MEMORY[0x263E3FE70](v24, -1, -1);
    }

    goto LABEL_54;
  }
  id v5 = (uint8_t *)(v0 + 296);
  uint64_t v6 = *(void *)(v0 + 320);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  uint64_t v85 = v7;
  *(void *)(v0 + 344) = v7;
  *(void *)(v0 + 352) = v9;
  uint64_t v10 = *(void *)(v0 + 320);
  if (*(unsigned char *)(v6 + 152))
  {
    unint64_t v11 = v0 + 312;
    unint64_t v12 = (uint64_t *)(v10 + 144);
    swift_beginAccess();
    if (!*(void *)(*(void *)(v10 + 144) + 16)
      || (swift_bridgeObjectRetain(),
          swift_bridgeObjectRetain(),
          specialized __RawDictionaryStorage.find<A>(_:)(v7, v9),
          char v14 = v13,
          swift_bridgeObjectRelease(),
          swift_bridgeObjectRelease(),
          (v14 & 1) == 0))
    {
      if (one-time initialization token for tabGroup != -1) {
        goto LABEL_59;
      }
      goto LABEL_20;
    }
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain_n();
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    id v5 = (uint8_t *)v17;
    if (!os_log_type_enabled(v16, v17)) {
      goto LABEL_23;
    }
    int64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v87 = v19;
    *(_DWORD *)int64_t v18 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v87);
    unint64_t v11 = v0 + 312;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_261746000, v16, (os_log_type_t)v5, "Incrementing retain count for paused tab group connection %{public}s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v19, -1, -1);
    int64_t v20 = v18;
LABEL_22:
    MEMORY[0x263E3FE70](v20, -1, -1);

    while (1)
    {
      int64_t v37 = *(void **)v11;
      uint64_t v38 = swift_allocObject();
      *(void *)(v38 + 16) = v37;
      swift_beginAccess();
      uint64_t v1 = swift_allocObject();
      *(void *)(v1 + 16) = partial apply for implicit closure #3 in ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:);
      *(void *)(v1 + 24) = v38;
      swift_bridgeObjectRetain();
      id v39 = v37;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v87 = *v12;
      uint64_t v41 = v87;
      uint64_t *v12 = 0x8000000000000000;
      unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v9);
      uint64_t v43 = *(void *)(v41 + 16);
      BOOL v44 = (v42 & 1) == 0;
      uint64_t v45 = v43 + v44;
      if (__OFADD__(v43, v44))
      {
        __break(1u);
      }
      else
      {
        id v5 = v42;
        if (*(void *)(v41 + 24) >= v45)
        {
          if (!isUniquelyReferenced_nonNull_native)
          {
LABEL_61:
            specialized _NativeDictionary.copy()();
            uint64_t v41 = v87;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, isUniquelyReferenced_nonNull_native);
          uint64_t v41 = v87;
          unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v9);
          if ((v5 & 1) != (v47 & 1)) {
            goto LABEL_41;
          }
          unint64_t v11 = v46;
        }
        uint64_t *v12 = v41;
        swift_bridgeObjectRelease();
        unint64_t v12 = (uint64_t *)*v12;
        uint64_t v48 = swift_bridgeObjectRetain();
        if ((v5 & 1) == 0)
        {
          uint64_t v49 = (*(uint64_t (**)(uint64_t))(v1 + 16))(v48);
          v12[(v11 >> 6) + 8] |= 1 << v11;
          int64_t v50 = (uint64_t *)(v12[6] + 16 * v11);
          *int64_t v50 = v85;
          v50[1] = v9;
          uint64_t v51 = (uint64_t *)(v12[7] + 16 * v11);
          uint64_t *v51 = v49;
          v51[1] = v52;
          uint64_t v53 = v12[2];
          BOOL v54 = __OFADD__(v53, 1);
          uint64_t v55 = v53 + 1;
          if (v54) {
            goto LABEL_64;
          }
          v12[2] = v55;
          swift_bridgeObjectRetain();
        }
        uint64_t v56 = v12[7] + 16 * v11;
        uint64_t v58 = *(void *)(v56 + 8);
        uint64_t v57 = (void *)(v56 + 8);
        uint64_t v59 = v58 + 1;
        if (!__OFADD__(v58, 1))
        {
          void *v57 = v59;
          swift_endAccess();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          goto LABEL_54;
        }
      }
      __break(1u);
LABEL_59:
      swift_once();
LABEL_20:
      uint64_t v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.tabGroup);
      swift_bridgeObjectRetain_n();
      unint64_t v16 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v16, v33))
      {
        unint64_t v84 = v11;
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = swift_slowAlloc();
        uint64_t v87 = v35;
        uint64_t v36 = (uint64_t *)v5;
        *(_DWORD *)uint64_t v34 = 136446210;
        id v5 = v34 + 12;
        swift_bridgeObjectRetain();
        *uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v9, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_261746000, v16, v33, "Adding paused connection for tab group %{public}s", v34, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x263E3FE70](v35, -1, -1);
        int64_t v20 = v34;
        unint64_t v11 = v84;
        goto LABEL_22;
      }
LABEL_23:

      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v25 = (uint64_t *)(v10 + 136);
  swift_beginAccess();
  uint64_t v26 = *(void *)(v10 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.getter(v7, v9, v26, (void *)(v0 + 112));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v0 + 112);
  outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v0 + 112, v0 + 64, &demangling cache variable for type metadata for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?);
  if (!*(void *)(v0 + 72))
  {
    if (one-time initialization token for tabGroup == -1)
    {
LABEL_35:
      uint64_t v60 = type metadata accessor for Logger();
      __swift_project_value_buffer(v60, (uint64_t)static Logger.tabGroup);
      swift_bridgeObjectRetain_n();
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        uint64_t v64 = swift_slowAlloc();
        uint64_t v87 = v64;
        *(_DWORD *)uint64_t v63 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 280) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v9, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_261746000, v61, v62, "Opening new connection for tab group %{public}s", v63, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x263E3FE70](v64, -1, -1);
        MEMORY[0x263E3FE70](v63, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v76 = (void *)swift_task_alloc();
      *(void *)(v0 + 360) = v76;
      void *v76 = v0;
      v76[1] = specialized ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:);
      uint64_t v77 = *(void *)(v0 + 336);
      return specialized ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:)(v77);
    }
LABEL_65:
    swift_once();
    goto LABEL_35;
  }
  unint64_t v12 = (uint64_t *)(v0 + 208);
  if (one-time initialization token for tabGroup != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain_n();
  char v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  id v5 = (uint8_t *)v29;
  if (os_log_type_enabled(v28, v29))
  {
    id v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v1 = swift_slowAlloc();
    uint64_t v87 = v1;
    *(_DWORD *)id v30 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_261746000, v28, (os_log_type_t)v5, "Incrementing retain count for tab group connection %{public}s", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v1, -1, -1);
    unint64_t v31 = v30;
    unint64_t v12 = (uint64_t *)(v0 + 208);
    MEMORY[0x263E3FE70](v31, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v11 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v86 = *v25;
  uint64_t v65 = v86;
  *uint64_t v25 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  unint64_t v67 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  uint64_t v68 = *(void *)(v65 + 16);
  BOOL v69 = (v66 & 1) == 0;
  uint64_t v70 = v68 + v69;
  if (__OFADD__(v68, v69))
  {
    __break(1u);
    goto LABEL_61;
  }
  char v71 = v66;
  if (*(void *)(v65 + 24) >= v70)
  {
    if ((v11 & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
    goto LABEL_51;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v70, v11);
  unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v71 & 1) == (v73 & 1))
  {
    unint64_t v67 = v72;
LABEL_51:
    if (v71)
    {
      uint64_t v78 = v86;
      uint64_t v79 = *(void *)(v86 + 56) + 48 * v67;
      uint64_t v80 = *(void *)v79;
      uint64_t v81 = *(void *)(v79 + 40);
      long long v82 = *(_OWORD *)(v79 + 24);
      long long v88 = *(_OWORD *)(v79 + 8);
      long long v89 = v82;
      uint64_t v90 = v81;
      if (!__OFADD__(v80, 1))
      {
        uint64_t v87 = v80 + 1;
        specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(&v87, 1, &v86, v67, v7, v9);
        outlined consume of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v87, (void *)v88);
        swift_bridgeObjectRelease();
        *uint64_t v25 = v78;
        swift_endAccess();
        swift_bridgeObjectRelease_n();
LABEL_54:
        v83 = *(uint64_t (**)(void))(v0 + 8);
        return v83();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
LABEL_41:
  v74 = *(void **)(v0 + 328);

  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;

  id v2 = *(void *)(v0 + 384);
  uint64_t v1 = *(void *)(v0 + 392);
  id v3 = *(void *)(v0 + 376);
  id v5 = *(void *)(v0 + 344);
  id v4 = *(void *)(v0 + 352);
  uint64_t v6 = *(void **)(v0 + 312);
  uint64_t v7 = *(void *)(v0 + 320);
  *(void *)(v0 + 16) = 1;
  *(void *)(v0 + 24) = v6;
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v2;
  *(void *)(v0 + 48) = v3;
  *(void *)(v0 + 56) = 0;
  swift_beginAccess();
  unint64_t v8 = v6;
  swift_retain();
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v12 = *(void *)(v7 + 136);
  *(void *)(v7 + 136) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((_OWORD *)(v0 + 16), v5, v4, isUniquelyReferenced_nonNull_native);
  *(void *)(v7 + 136) = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = (void *)*v4;
  v8[46] = v3;
  swift_task_dealloc();
  uint64_t v9 = v8[40];
  if (v3)
  {
    uint64_t v10 = specialized ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:);
  }
  else
  {
    v8[47] = a3;
    v8[48] = a2;
    v8[49] = a1;
    uint64_t v10 = specialized ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:);
  }
  return MEMORY[0x270FA2498](v10, v9, 0);
}

uint64_t specialized ParticipantPresenceCoordinator._stopActivityForShare(_:connectionManager:subscriptionTasks:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized ParticipantPresenceCoordinator._stopActivityForShare(_:connectionManager:subscriptionTasks:), 0, 0);
}

uint64_t specialized ParticipantPresenceCoordinator._stopActivityForShare(_:connectionManager:subscriptionTasks:)()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v4 = MEMORY[0x263F8EE60] + 8;
    uint64_t v5 = MEMORY[0x263F8E628];
    uint64_t v6 = MEMORY[0x263F8E658];
    do
    {
      v3 += 8;
      uint64_t v7 = swift_retain();
      MEMORY[0x263E3F340](v7, v4, v5, v6);
      swift_release();
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = *(void *)(v0 + 56);
  return MEMORY[0x270FA2498](specialized ParticipantPresenceCoordinator._stopActivityForShare(_:connectionManager:subscriptionTasks:), v8, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  swift_beginAccess();
  swift_retain();
  *(unsigned char *)(v0 + 80) = specialized FastSyncStateMachine.leaveActivity(priority:_:)(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in CollaborationConnectionManager.leaveActivity(), v2) & 1;
  outlined destroy of TaskPriority?(v1, &demangling cache variable for type metadata for TaskPriority?);
  swift_endAccess();
  swift_release();
  return MEMORY[0x270FA2498](specialized ParticipantPresenceCoordinator._stopActivityForShare(_:connectionManager:subscriptionTasks:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  uint8_t *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v19 = v0;
  if ((*(unsigned char *)(v0 + 80) & 1) == 0)
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v1 = *(void **)(v0 + 48);
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.tabGroup);
    uint64_t v3 = v1;
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.error.getter();
    uint64_t v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = *(void **)(v0 + 48);
    if (v6)
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v17 = swift_slowAlloc();
      int64_t v18 = v17;
      *(_DWORD *)uint64_t v8 = 136315138;
      uint64_t v9 = objc_msgSend(v7, sel_recordID);
      uint64_t v10 = objc_msgSend(v9, sel_zoneID);

      unint64_t v11 = objc_msgSend(v10, sel_zoneName);
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      char v14 = v13;

      *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_261746000, v4, v5, "Failed to leave activity for share %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v17, -1, -1);
      MEMORY[0x263E3FE70](v8, -1, -1);
    }
    else
    {
    }
  }
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.removeSharedConnection(forShare:cleanUpIfNeeedUsing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[54] = a2;
  v3[55] = a3;
  v3[53] = a1;
  return MEMORY[0x270FA2498](specialized ParticipantPresenceCoordinator.ConnectionManagerStore.removeSharedConnection(forShare:cleanUpIfNeeedUsing:), a2, 0);
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.removeSharedConnection(forShare:cleanUpIfNeeedUsing:)()
{
  uint64_t v57 = v0;
  id v2 = objc_msgSend(*(id *)(v0 + 424), sel_recordID);
  id v3 = objc_msgSend(v2, sel_zoneID);

  id v4 = objc_msgSend(v3, sel_safari_tabGroupRootRecordName);
  if (!v4)
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.tabGroup);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v22, v28)) {
      goto LABEL_36;
    }
    os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v29 = 0;
    _os_log_impl(&dword_261746000, v22, v28, "Trying to start a collaboration activity with a CKShare not attached to a tab group", v29, 2u);
    uint64_t v26 = v29;
    goto LABEL_27;
  }
  uint64_t v5 = *(void *)(v0 + 432);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  *(void *)(v0 + 448) = v6;
  *(void *)(v0 + 456) = v8;
  LOBYTE(v5) = *(unsigned char *)(v5 + 152);
  swift_bridgeObjectRetain();
  if (v5)
  {
    uint64_t v9 = v0 + 224;
    uint64_t v10 = ParticipantPresenceCoordinator.ConnectionManagerStore.pausedSharedConnections.modify();
    uint64_t v12 = specialized Dictionary.subscript.modify((void *)(v0 + 256), v6, v8);
    if (!*v11) {
      goto LABEL_6;
    }
    uint64_t v13 = v11[1];
    BOOL v14 = __OFSUB__(v13, 1);
    uint64_t v15 = v13 - 1;
    if (!v14)
    {
      v11[1] = v15;
LABEL_6:
      ((void (*)(uint64_t, void))v12)(v0 + 256, 0);
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, void))v10)(v0 + 224, 0);
      uint64_t v16 = *(void *)(v0 + 432) + 144;
      swift_beginAccess();
      uint64_t v17 = *(void *)v16;
      if (*(void *)(*(void *)v16 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v8);
        if (v19)
        {
          uint64_t v20 = *(void *)(*(void *)(v17 + 56) + 16 * v18 + 8);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v20 > 0)
          {
            if (one-time initialization token for tabGroup != -1) {
              swift_once();
            }
            uint64_t v21 = type metadata accessor for Logger();
            __swift_project_value_buffer(v21, (uint64_t)static Logger.tabGroup);
            swift_bridgeObjectRetain();
            uint64_t v22 = Logger.logObject.getter();
            os_log_type_t v23 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v22, v23))
            {
              uint64_t v24 = (uint8_t *)swift_slowAlloc();
              uint64_t v25 = swift_slowAlloc();
              uint64_t v56 = v25;
              *(_DWORD *)uint64_t v24 = 136446210;
              swift_bridgeObjectRetain();
              *(void *)(v0 + 416) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v56);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_261746000, v22, v23, "Decrementing retain count for paused tab group connection %{public}s", v24, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x263E3FE70](v25, -1, -1);
              uint64_t v26 = v24;
LABEL_27:
              MEMORY[0x263E3FE70](v26, -1, -1);
LABEL_36:

              goto LABEL_37;
            }
            goto LABEL_28;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      if (one-time initialization token for tabGroup != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      __swift_project_value_buffer(v41, (uint64_t)static Logger.tabGroup);
      swift_bridgeObjectRetain_n();
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v42, v43))
      {
        BOOL v44 = (uint8_t *)swift_slowAlloc();
        uint64_t v45 = swift_slowAlloc();
        uint64_t v56 = v45;
        *(_DWORD *)BOOL v44 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v46 = v6;
        *(void *)(v0 + 408) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_261746000, v42, v43, "Removing last instance of paused connection for tab group %{public}s", v44, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x263E3FE70](v45, -1, -1);
        MEMORY[0x263E3FE70](v44, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v46 = v6;
      }
      swift_beginAccess();
      uint64_t v22 = specialized Dictionary._Variant.removeValue(forKey:)(v46, v8);
      swift_endAccess();
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v9 = v0 + 160;
  uint64_t v1 = v0 + 192;
  id v30 = ParticipantPresenceCoordinator.ConnectionManagerStore.tabGroupIdentifiersToSharedConnections.modify();
  uint64_t v32 = specialized Dictionary.subscript.modify((void *)(v0 + 160), v6, v8);
  if (v31[1])
  {
    if (__OFSUB__(*v31, 1))
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    --*v31;
  }
  ((void (*)(uint64_t, void))v32)(v0 + 160, 0);
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, void))v30)(v0 + 192, 0);
  uint64_t v33 = *(void *)(v0 + 432);
  swift_beginAccess();
  uint64_t v34 = *(void *)(v33 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.getter(v6, v8, v34, (void *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v0 + 16, v0 + 64, &demangling cache variable for type metadata for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?);
  uint64_t v35 = *(void **)(v0 + 72);
  *(void *)(v0 + 464) = v35;
  if (!v35)
  {
LABEL_23:
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v38))
    {
      id v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v56 = v40;
      *(_DWORD *)id v39 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 400) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_261746000, v22, v38, "Decrementing retain count for tab group connection %{public}s", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v40, -1, -1);
      uint64_t v26 = v39;
      goto LABEL_27;
    }
LABEL_28:

    swift_bridgeObjectRelease_n();
LABEL_37:
    char v47 = *(uint64_t (**)(void))(v0 + 8);
    return v47();
  }
  uint64_t v36 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 88);
  *(void *)(v0 + 472) = *(void *)(v0 + 80);
  *(void *)(v0 + 480) = v9;
  uint64_t v1 = *(void *)(v0 + 96);
  *(void *)(v0 + 488) = v1;
  if (v36 >= 1)
  {
    swift_release();
    swift_release();

    *(void *)(v0 + 392) = v1;
    outlined release of [Task<(), Never>](v0 + 392);
    goto LABEL_23;
  }
  if (one-time initialization token for tabGroup != -1) {
LABEL_49:
  }
    swift_once();
  uint64_t v49 = type metadata accessor for Logger();
  __swift_project_value_buffer(v49, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain_n();
  int64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = (uint8_t *)swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    uint64_t v56 = v55;
    *(_DWORD *)uint64_t v52 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 384) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_261746000, v50, v51, "Removing last instance of active connection for tab group %{public}s", v52, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x263E3FE70](v55, -1, -1);
    MEMORY[0x263E3FE70](v52, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v53 = (void *)swift_task_alloc();
  *(void *)(v0 + 496) = v53;
  *uint64_t v53 = v0;
  v53[1] = specialized ParticipantPresenceCoordinator.ConnectionManagerStore.removeSharedConnection(forShare:cleanUpIfNeeedUsing:);
  uint64_t v54 = *(void *)(v0 + 440);
  return specialized ParticipantPresenceCoordinator._stopActivityForShare(_:connectionManager:subscriptionTasks:)(v54, v9, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 432);
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized ParticipantPresenceCoordinator.ConnectionManagerStore.removeSharedConnection(forShare:cleanUpIfNeeedUsing:), v1, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void *)v0[58];
  id v2 = v0[56];
  id v3 = v0[57];
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(v2, v3, (uint64_t)(v0 + 14));
  swift_endAccess();
  swift_bridgeObjectRelease();
  outlined release of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)(v0 + 14));

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  id v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.pauseSharedConnections(using:)(uint64_t a1)
{
  *(void *)(v1 + 96) = a1;
  return MEMORY[0x270FA2498](specialized ParticipantPresenceCoordinator.ConnectionManagerStore.pauseSharedConnections(using:), a1, 0);
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.pauseSharedConnections(using:)()
{
  uint64_t v44 = v0;
  if (*(unsigned char *)(*(void *)(v0 + 96) + 152))
  {
    __break(1u);
  }
  else if (one-time initialization token for tabGroup == -1)
  {
    goto LABEL_3;
  }
  swift_once();
LABEL_3:
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 104) = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v4 = 0;
    _os_log_impl(&dword_261746000, v2, v3, "Pausing shared connections", v4, 2u);
    MEMORY[0x263E3FE70](v4, -1, -1);
  }
  uint64_t v5 = *(void *)(v0 + 96);

  unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_beginAccess();
  *(void *)(v5 + 144) = v6;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v7 = *(void *)(v5 + 136);
  *(void *)(v0 + 112) = v7;
  char v8 = *(unsigned char *)(v7 + 32);
  *(unsigned char *)(v0 + 200) = v8;
  uint64_t v9 = -1;
  uint64_t v10 = -1 << v8;
  if (-(-1 << v8) < 64) {
    uint64_t v9 = ~(-1 << -(char)v10);
  }
  unint64_t v11 = v9 & *(void *)(v7 + 64);
  uint64_t v12 = (void *)swift_bridgeObjectRetain();
  if (v11)
  {
    uint64_t v13 = 0;
    unint64_t v14 = __clz(__rbit64(v11));
    uint64_t v15 = (v11 - 1) & v11;
LABEL_9:
    *(void *)(v0 + 120) = v13;
    *(void *)(v0 + 128) = v15;
    uint64_t v16 = (uint64_t *)(v12[6] + 16 * v14);
    uint64_t v17 = *v16;
    *(void *)(v0 + 136) = *v16;
    unint64_t v18 = v16[1];
    *(void *)(v0 + 144) = v18;
    char v19 = (uint64_t *)(v12[7] + 48 * v14);
    uint64_t v20 = *v19;
    *(void *)(v0 + 152) = *v19;
    uint64_t v21 = (void *)v19[1];
    *(void *)(v0 + 160) = v21;
    *(void *)(v0 + 168) = v19[2];
    uint64_t v22 = v19[3];
    *(void *)(v0 + 176) = v22;
    uint64_t v23 = v19[4];
    *(void *)(v0 + 184) = v23;
    swift_bridgeObjectRetain_n();
    id v24 = v21;
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    id v25 = v24;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v42 = v25;
      uint64_t v28 = v17;
      uint64_t v29 = swift_slowAlloc();
      uint64_t v41 = v20;
      uint64_t v30 = swift_slowAlloc();
      uint64_t v43 = v30;
      *(_DWORD *)uint64_t v29 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v31 = v28;
      id v25 = v42;
      *(void *)(v29 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v18, &v43);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v29 + 12) = 2050;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      *(void *)(v29 + 14) = v41;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      _os_log_impl(&dword_261746000, v26, v27, "Pausing connection for tab group %{public}s with retain count %{public}ld", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v30, -1, -1);
      MEMORY[0x263E3FE70](v29, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();
    }
    uint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v32;
    *uint64_t v32 = v0;
    v32[1] = specialized ParticipantPresenceCoordinator.ConnectionManagerStore.pauseSharedConnections(using:);
    return specialized ParticipantPresenceCoordinator._stopActivityForShare(_:connectionManager:subscriptionTasks:)((uint64_t)v25, v22, v23);
  }
  unint64_t v34 = 63 - v10;
  if ((unint64_t)(63 - v10) > 0x7F)
  {
    unint64_t v35 = v12[9];
    if (v35)
    {
      uint64_t v13 = 1;
LABEL_18:
      uint64_t v15 = (v35 - 1) & v35;
      unint64_t v14 = __clz(__rbit64(v35)) + (v13 << 6);
      goto LABEL_9;
    }
    if (v34 >= 0xC0)
    {
      unint64_t v35 = v12[10];
      if (v35)
      {
        uint64_t v13 = 2;
        goto LABEL_18;
      }
      if (v34 >= 0x100)
      {
        unint64_t v35 = v12[11];
        if (v35)
        {
          uint64_t v13 = 3;
          goto LABEL_18;
        }
        if (v34 >= 0x140)
        {
          unint64_t v35 = v12[12];
          if (v35)
          {
            uint64_t v13 = 4;
            goto LABEL_18;
          }
          uint64_t v36 = 0;
          uint64_t v37 = v34 >> 6;
          if (v37 <= 5) {
            uint64_t v37 = 5;
          }
          uint64_t v38 = v37 - 5;
          while (v38 != v36)
          {
            unint64_t v35 = v12[v36++ + 13];
            if (v35)
            {
              uint64_t v13 = v36 + 4;
              goto LABEL_18;
            }
          }
        }
      }
    }
  }
  uint64_t v39 = *(void *)(v0 + 96);
  swift_release();
  *(void *)(v39 + 136) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v39 + 152) = 1;
  uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
  return v40();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized ParticipantPresenceCoordinator.ConnectionManagerStore.pauseSharedConnections(using:), v1, 0);
}

void specialized ParticipantPresenceCoordinator.ConnectionManagerStore.pauseSharedConnections(using:)()
{
  uint64_t v62 = v0;
  uint64_t v1 = *(void **)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 96);
  swift_beginAccess();
  id v5 = v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *(void *)(v4 + 144);
  *(void *)(v0 + 88) = v7;
  *(void *)(v4 + 144) = 0x8000000000000000;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_40;
  }
  char v13 = v8;
  if (*(void *)(v7 + 24) >= v12)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 136);
    uint64_t v14 = *(void *)(v0 + 144);
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, isUniquelyReferenced_nonNull_native);
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
    if ((v13 & 1) != (v17 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      return;
    }
    unint64_t v9 = v16;
  }
  unint64_t v18 = *(void **)(v0 + 88);
  uint64_t v19 = *(void *)(v0 + 152);
  uint64_t v20 = *(void *)(v0 + 160);
  if (v13)
  {
    uint64_t v21 = v18[7] + 16 * v9;

    *(void *)uint64_t v21 = v20;
    *(void *)(v21 + 8) = v19;
    goto LABEL_14;
  }
  uint64_t v23 = *(void *)(v0 + 136);
  uint64_t v22 = *(void *)(v0 + 144);
  v18[(v9 >> 6) + 8] |= 1 << v9;
  id v24 = (void *)(v18[6] + 16 * v9);
  void *v24 = v23;
  v24[1] = v22;
  id v25 = (void *)(v18[7] + 16 * v9);
  *id v25 = v20;
  v25[1] = v19;
  uint64_t v26 = v18[2];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v18[2] = v28;
  swift_bridgeObjectRetain();
LABEL_14:
  uint64_t v29 = *(void **)(v0 + 160);
  *(void *)(*(void *)(v0 + 96) + 144) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  int64_t v30 = *(void *)(v0 + 120);
  unint64_t v31 = *(void *)(v0 + 128);
  if (v31)
  {
    uint64_t v32 = (v31 - 1) & v31;
    unint64_t v33 = __clz(__rbit64(v31)) | (v30 << 6);
    uint64_t v34 = *(void *)(v0 + 112);
LABEL_16:
    *(void *)(v0 + 120) = v30;
    *(void *)(v0 + 128) = v32;
    unint64_t v35 = (uint64_t *)(*(void *)(v34 + 48) + 16 * v33);
    uint64_t v36 = *v35;
    *(void *)(v0 + 136) = *v35;
    unint64_t v37 = v35[1];
    *(void *)(v0 + 144) = v37;
    uint64_t v38 = (uint64_t *)(*(void *)(v34 + 56) + 48 * v33);
    uint64_t v39 = *v38;
    *(void *)(v0 + 152) = *v38;
    uint64_t v40 = (void *)v38[1];
    *(void *)(v0 + 160) = v40;
    *(void *)(v0 + 168) = v38[2];
    uint64_t v41 = v38[3];
    *(void *)(v0 + 176) = v41;
    uint64_t v42 = v38[4];
    *(void *)(v0 + 184) = v42;
    swift_bridgeObjectRetain_n();
    id v43 = v40;
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    id v44 = v43;
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v60 = v44;
      uint64_t v47 = v36;
      uint64_t v48 = swift_slowAlloc();
      uint64_t v59 = v39;
      uint64_t v49 = swift_slowAlloc();
      uint64_t v61 = v49;
      *(_DWORD *)uint64_t v48 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v50 = v47;
      id v44 = v60;
      *(void *)(v48 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v37, &v61);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v48 + 12) = 2050;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      *(void *)(v48 + 14) = v59;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      _os_log_impl(&dword_261746000, v45, v46, "Pausing connection for tab group %{public}s with retain count %{public}ld", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v49, -1, -1);
      MEMORY[0x263E3FE70](v48, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();
    }
    os_log_type_t v51 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v51;
    void *v51 = v0;
    v51[1] = specialized ParticipantPresenceCoordinator.ConnectionManagerStore.pauseSharedConnections(using:);
    specialized ParticipantPresenceCoordinator._stopActivityForShare(_:connectionManager:subscriptionTasks:)((uint64_t)v44, v41, v42);
    return;
  }
  int64_t v52 = v30 + 1;
  if (__OFADD__(v30, 1)) {
    goto LABEL_41;
  }
  int64_t v53 = (unint64_t)((1 << *(unsigned char *)(v0 + 200)) + 63) >> 6;
  uint64_t v34 = *(void *)(v0 + 112);
  if (v52 < v53)
  {
    uint64_t v54 = v34 + 64;
    unint64_t v55 = *(void *)(v34 + 64 + 8 * v52);
    ++v30;
    if (v55)
    {
LABEL_25:
      uint64_t v32 = (v55 - 1) & v55;
      unint64_t v33 = __clz(__rbit64(v55)) + (v30 << 6);
      goto LABEL_16;
    }
    int64_t v30 = v52 + 1;
    if (v52 + 1 < v53)
    {
      unint64_t v55 = *(void *)(v54 + 8 * v30);
      if (v55) {
        goto LABEL_25;
      }
      int64_t v30 = v52 + 2;
      if (v52 + 2 < v53)
      {
        unint64_t v55 = *(void *)(v54 + 8 * v30);
        if (v55) {
          goto LABEL_25;
        }
        int64_t v56 = v52 + 3;
        if (v56 < v53)
        {
          unint64_t v55 = *(void *)(v54 + 8 * v56);
          if (v55)
          {
            int64_t v30 = v56;
            goto LABEL_25;
          }
          while (1)
          {
            int64_t v30 = v56 + 1;
            if (__OFADD__(v56, 1)) {
              break;
            }
            if (v30 >= v53) {
              goto LABEL_36;
            }
            unint64_t v55 = *(void *)(v54 + 8 * v30);
            ++v56;
            if (v55) {
              goto LABEL_25;
            }
          }
LABEL_42:
          __break(1u);
          return;
        }
      }
    }
  }
LABEL_36:
  uint64_t v57 = *(void *)(v0 + 96);
  swift_release();
  *(void *)(v57 + 136) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v57 + 152) = 1;
  uint64_t v58 = *(void (**)(void))(v0 + 8);
  v58();
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  return MEMORY[0x270FA2498](specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:), a1, 0);
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:)()
{
  uint64_t v38 = v0;
  if (*(unsigned char *)(*(void *)(v0 + 96) + 152) == 1)
  {
    if (one-time initialization token for tabGroup == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 112) = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_261746000, v2, v3, "Unpausing shared connections", v4, 2u);
    MEMORY[0x263E3FE70](v4, -1, -1);
  }
  uint64_t v5 = *(void *)(v0 + 96);

  unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_beginAccess();
  *(void *)(v5 + 136) = v6;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v7 = *(void *)(v5 + 144);
  *(void *)(v0 + 120) = v7;
  char v8 = *(unsigned char *)(v7 + 32);
  *(unsigned char *)(v0 + 216) = v8;
  uint64_t v9 = -1;
  uint64_t v10 = -1 << v8;
  if (-(-1 << v8) < 64) {
    uint64_t v9 = ~(-1 << -(char)v10);
  }
  unint64_t v11 = v9 & *(void *)(v7 + 64);
  uint64_t v12 = (void *)swift_bridgeObjectRetain();
  if (v11)
  {
    uint64_t v13 = 0;
    unint64_t v14 = __clz(__rbit64(v11));
    uint64_t v15 = (v11 - 1) & v11;
LABEL_9:
    *(void *)(v0 + 128) = v13;
    *(void *)(v0 + 136) = v15;
    uint64_t v16 = 16 * v14;
    char v17 = (uint64_t *)(v12[6] + v16);
    uint64_t v18 = *v17;
    *(void *)(v0 + 144) = *v17;
    unint64_t v19 = v17[1];
    *(void *)(v0 + 152) = v19;
    uint64_t v20 = v12[7] + v16;
    uint64_t v21 = *(void **)v20;
    *(void *)(v0 + 160) = *(void *)v20;
    uint64_t v22 = *(void *)(v20 + 8);
    *(void *)(v0 + 168) = v22;
    swift_bridgeObjectRetain_n();
    id v23 = v21;
    id v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v37 = v27;
      *(_DWORD *)uint64_t v26 = 136446466;
      swift_bridgeObjectRetain();
      *(void *)(v26 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v37);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v26 + 12) = 2050;
      *(void *)(v26 + 14) = v22;
      _os_log_impl(&dword_261746000, v24, v25, "Unpausing connection for tab group %{public}s with retain count %{public}ld", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v27, -1, -1);
      MEMORY[0x263E3FE70](v26, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v28 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v28;
    *uint64_t v28 = v0;
    v28[1] = specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:);
    return specialized ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:)((uint64_t)v23);
  }
  unint64_t v30 = 63 - v10;
  if ((unint64_t)(63 - v10) > 0x7F)
  {
    unint64_t v31 = v12[9];
    if (v31)
    {
      uint64_t v13 = 1;
LABEL_18:
      uint64_t v15 = (v31 - 1) & v31;
      unint64_t v14 = __clz(__rbit64(v31)) + (v13 << 6);
      goto LABEL_9;
    }
    if (v30 >= 0xC0)
    {
      unint64_t v31 = v12[10];
      if (v31)
      {
        uint64_t v13 = 2;
        goto LABEL_18;
      }
      if (v30 >= 0x100)
      {
        unint64_t v31 = v12[11];
        if (v31)
        {
          uint64_t v13 = 3;
          goto LABEL_18;
        }
        if (v30 >= 0x140)
        {
          unint64_t v31 = v12[12];
          if (v31)
          {
            uint64_t v13 = 4;
            goto LABEL_18;
          }
          uint64_t v32 = 0;
          uint64_t v33 = v30 >> 6;
          if (v33 <= 5) {
            uint64_t v33 = 5;
          }
          uint64_t v34 = v33 - 5;
          while (v34 != v32)
          {
            unint64_t v31 = v12[v32++ + 13];
            if (v31)
            {
              uint64_t v13 = v32 + 4;
              goto LABEL_18;
            }
          }
        }
      }
    }
  }
  uint64_t v35 = *(void *)(v0 + 96);
  swift_release();
  *(void *)(v35 + 144) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v35 + 152) = 0;
  uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
  return v36();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[23] = a1;
  v5[24] = a2;
  v5[25] = a3;
  v5[26] = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v6 = v5[12];
    swift_bridgeObjectRelease();
    uint64_t v7 = specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:);
    uint64_t v8 = v6;
  }
  else
  {
    uint64_t v8 = v5[12];
    uint64_t v7 = specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:);
  }
  return MEMORY[0x270FA2498](v7, v8, 0);
}

void specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:)()
{
  uint64_t v60 = v0;
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v1 = *(void **)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 96);
  swift_beginAccess();
  id v5 = v1;
  swift_retain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *(void *)(v4 + 136);
  *(void *)(v0 + 88) = v7;
  *(void *)(v4 + 136) = 0x8000000000000000;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_40;
  }
  char v13 = v8;
  if (*(void *)(v7 + 24) >= v12)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 144);
    uint64_t v14 = *(void *)(v0 + 152);
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, isUniquelyReferenced_nonNull_native);
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
    if ((v13 & 1) != (v17 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      return;
    }
    unint64_t v9 = v16;
  }
  uint64_t v18 = *(void **)(v0 + 88);
  uint64_t v20 = *(void *)(v0 + 192);
  uint64_t v19 = *(void *)(v0 + 200);
  uint64_t v21 = *(void *)(v0 + 184);
  uint64_t v23 = *(void *)(v0 + 160);
  uint64_t v22 = *(void *)(v0 + 168);
  if (v13)
  {
    id v24 = (void *)(v18[7] + 48 * v9);
    uint64_t v58 = (void *)v24[1];
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    void *v24 = v22;
    v24[1] = v23;
    void v24[2] = v21;
    v24[3] = v20;
    v24[4] = v19;
    v24[5] = 0;
    goto LABEL_14;
  }
  uint64_t v26 = *(void *)(v0 + 144);
  uint64_t v25 = *(void *)(v0 + 152);
  v18[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v27 = (void *)(v18[6] + 16 * v9);
  *uint64_t v27 = v26;
  v27[1] = v25;
  uint64_t v28 = (void *)(v18[7] + 48 * v9);
  *uint64_t v28 = v22;
  v28[1] = v23;
  v28[2] = v21;
  v28[3] = v20;
  v28[4] = v19;
  v28[5] = 0;
  uint64_t v29 = v18[2];
  BOOL v30 = __OFADD__(v29, 1);
  uint64_t v31 = v29 + 1;
  if (v30)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v18[2] = v31;
  swift_bridgeObjectRetain();
LABEL_14:
  uint64_t v32 = *(void **)(v0 + 160);
  *(void *)(*(void *)(v0 + 96) + 136) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  swift_release();

  int64_t v33 = *(void *)(v0 + 128);
  unint64_t v34 = *(void *)(v0 + 136);
  if (v34)
  {
    uint64_t v35 = (v34 - 1) & v34;
    unint64_t v36 = __clz(__rbit64(v34)) | (v33 << 6);
    uint64_t v37 = *(void *)(v0 + 120);
LABEL_16:
    *(void *)(v0 + 128) = v33;
    *(void *)(v0 + 136) = v35;
    uint64_t v38 = 16 * v36;
    uint64_t v39 = (uint64_t *)(*(void *)(v37 + 48) + v38);
    uint64_t v40 = *v39;
    *(void *)(v0 + 144) = *v39;
    unint64_t v41 = v39[1];
    *(void *)(v0 + 152) = v41;
    uint64_t v42 = *(void *)(v37 + 56) + v38;
    id v43 = *(void **)v42;
    *(void *)(v0 + 160) = *(void *)v42;
    uint64_t v44 = *(void *)(v42 + 8);
    *(void *)(v0 + 168) = v44;
    swift_bridgeObjectRetain_n();
    id v45 = v43;
    os_log_type_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      uint64_t v59 = v49;
      *(_DWORD *)uint64_t v48 = 136446466;
      swift_bridgeObjectRetain();
      *(void *)(v48 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v59);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v48 + 12) = 2050;
      *(void *)(v48 + 14) = v44;
      _os_log_impl(&dword_261746000, v46, v47, "Unpausing connection for tab group %{public}s with retain count %{public}ld", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v49, -1, -1);
      MEMORY[0x263E3FE70](v48, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v50 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v50;
    *uint64_t v50 = v0;
    v50[1] = specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:);
    specialized ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:)((uint64_t)v45);
    return;
  }
  int64_t v51 = v33 + 1;
  if (__OFADD__(v33, 1)) {
    goto LABEL_41;
  }
  int64_t v52 = (unint64_t)((1 << *(unsigned char *)(v0 + 216)) + 63) >> 6;
  uint64_t v37 = *(void *)(v0 + 120);
  if (v51 < v52)
  {
    uint64_t v53 = v37 + 64;
    unint64_t v54 = *(void *)(v37 + 64 + 8 * v51);
    ++v33;
    if (v54)
    {
LABEL_25:
      uint64_t v35 = (v54 - 1) & v54;
      unint64_t v36 = __clz(__rbit64(v54)) + (v33 << 6);
      goto LABEL_16;
    }
    int64_t v33 = v51 + 1;
    if (v51 + 1 < v52)
    {
      unint64_t v54 = *(void *)(v53 + 8 * v33);
      if (v54) {
        goto LABEL_25;
      }
      int64_t v33 = v51 + 2;
      if (v51 + 2 < v52)
      {
        unint64_t v54 = *(void *)(v53 + 8 * v33);
        if (v54) {
          goto LABEL_25;
        }
        int64_t v55 = v51 + 3;
        if (v55 < v52)
        {
          unint64_t v54 = *(void *)(v53 + 8 * v55);
          if (v54)
          {
            int64_t v33 = v55;
            goto LABEL_25;
          }
          while (1)
          {
            int64_t v33 = v55 + 1;
            if (__OFADD__(v55, 1)) {
              break;
            }
            if (v33 >= v52) {
              goto LABEL_36;
            }
            unint64_t v54 = *(void *)(v53 + 8 * v33);
            ++v55;
            if (v54) {
              goto LABEL_25;
            }
          }
LABEL_42:
          __break(1u);
          return;
        }
      }
    }
  }
LABEL_36:
  uint64_t v56 = *(void *)(v0 + 96);
  swift_release();
  *(void *)(v56 + 144) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v56 + 152) = 0;
  uint64_t v57 = *(void (**)(void))(v0 + 8);
  v57();
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1)
{
  unint64_t v1 = a1;
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CKShareParticipant>);
      uint64_t v3 = static _SetStorage.allocate(capacity:)();
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = MEMORY[0x263F8EE88];
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return;
  }
LABEL_9:
  uint64_t v7 = v3 + 56;
  uint64_t v43 = v5;
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    unint64_t v41 = v1;
    while (1)
    {
      uint64_t v9 = MEMORY[0x263E3F5A0](v8, v1);
      BOOL v10 = __OFADD__(v8++, 1);
      if (v10)
      {
        __break(1u);
        goto LABEL_37;
      }
      uint64_t v11 = v9;
      Swift::Int v12 = NSObject._rawHashValue(seed:)(*(void *)(v3 + 40));
      uint64_t v13 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v14 = v12 & ~v13;
      unint64_t v15 = v14 >> 6;
      uint64_t v16 = *(void *)(v7 + 8 * (v14 >> 6));
      uint64_t v17 = 1 << v14;
      if (((1 << v14) & v16) != 0)
      {
        type metadata accessor for CKShareParticipant();
        id v18 = *(id *)(*(void *)(v3 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19)
        {
LABEL_11:
          swift_unknownObjectRelease();
          unint64_t v1 = v41;
          goto LABEL_12;
        }
        uint64_t v20 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v20;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)(v7 + 8 * (v14 >> 6));
          uint64_t v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0) {
            break;
          }
          id v21 = *(id *)(*(void *)(v3 + 48) + 8 * v14);
          char v22 = static NSObject.== infix(_:_:)();

          if (v22) {
            goto LABEL_11;
          }
        }
        unint64_t v1 = v41;
      }
      *(void *)(v7 + 8 * v15) = v17 | v16;
      *(void *)(*(void *)(v3 + 48) + 8 * v14) = v11;
      uint64_t v23 = *(void *)(v3 + 16);
      BOOL v10 = __OFADD__(v23, 1);
      uint64_t v24 = v23 + 1;
      if (v10) {
        goto LABEL_38;
      }
      *(void *)(v3 + 16) = v24;
LABEL_12:
      if (v8 == v43) {
        return;
      }
    }
  }
  uint64_t v25 = 0;
  uint64_t v42 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v25 != v42)
  {
    Swift::Int v26 = *(void *)(v3 + 40);
    id v27 = *(id *)(v1 + 32 + 8 * v25);
    Swift::Int v28 = NSObject._rawHashValue(seed:)(v26);
    uint64_t v29 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v30 = v28 & ~v29;
    unint64_t v31 = v30 >> 6;
    uint64_t v32 = *(void *)(v7 + 8 * (v30 >> 6));
    uint64_t v33 = 1 << v30;
    if (((1 << v30) & v32) != 0)
    {
      type metadata accessor for CKShareParticipant();
      id v34 = *(id *)(*(void *)(v3 + 48) + 8 * v30);
      char v35 = static NSObject.== infix(_:_:)();

      if (v35) {
        goto LABEL_24;
      }
      uint64_t v36 = ~v29;
      unint64_t v30 = (v30 + 1) & v36;
      unint64_t v31 = v30 >> 6;
      uint64_t v32 = *(void *)(v7 + 8 * (v30 >> 6));
      uint64_t v33 = 1 << v30;
      if ((v32 & (1 << v30)) != 0)
      {
        while (1)
        {
          id v37 = *(id *)(*(void *)(v3 + 48) + 8 * v30);
          char v38 = static NSObject.== infix(_:_:)();

          if (v38) {
            break;
          }
          unint64_t v30 = (v30 + 1) & v36;
          unint64_t v31 = v30 >> 6;
          uint64_t v32 = *(void *)(v7 + 8 * (v30 >> 6));
          uint64_t v33 = 1 << v30;
          if ((v32 & (1 << v30)) == 0) {
            goto LABEL_32;
          }
        }
LABEL_24:

        uint64_t v5 = v43;
        goto LABEL_25;
      }
LABEL_32:
      uint64_t v5 = v43;
    }
    *(void *)(v7 + 8 * v31) = v33 | v32;
    *(void *)(*(void *)(v3 + 48) + 8 * v30) = v27;
    uint64_t v39 = *(void *)(v3 + 16);
    BOOL v10 = __OFADD__(v39, 1);
    uint64_t v40 = v39 + 1;
    if (v10) {
      goto LABEL_39;
    }
    *(void *)(v3 + 16) = v40;
LABEL_25:
    if (++v25 == v5) {
      return;
    }
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

uint64_t instantiation function for generic protocol witness table for PersonalGroupSessionProvider<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for CKShareGroupSessionProvider<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2617808F4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____WBParticipantPresenceCoordinator_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x263E3FF60](v3);
  *a2 = result;
  return result;
}

uint64_t sub_26178094C()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for ParticipantPresenceCoordinator()
{
  return self;
}

uint64_t destroy for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection(uint64_t a1)
{
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  id v6 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = (void *)a2[1];
  uint64_t v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection()
{
  return &type metadata for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection;
}

void specialized ParticipantPresenceCoordinator._notifyStoreUpdates(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____WBParticipantPresenceCoordinator_delegate;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x263E3FF60](v5);
  if (!v6) {
    return;
  }
  uint64_t v7 = (void *)v6;
  uint64_t v37 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 64);
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_6;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v19 >= v38) {
      goto LABEL_22;
    }
    unint64_t v20 = *(void *)(v37 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v38) {
        goto LABEL_22;
      }
      unint64_t v20 = *(void *)(v37 + 8 * v11);
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v38) {
          goto LABEL_22;
        }
        unint64_t v20 = *(void *)(v37 + 8 * v11);
        if (!v20) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v13 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_6:
    unint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    type metadata accessor for CKShareParticipant();
    lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CKShareParticipant and conformance NSObject, (void (*)(uint64_t))type metadata accessor for CKShareParticipant);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v18 = (void *)MEMORY[0x263E3F170](v15, v16);
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_participantPresenceCoordinator_didUpdateActiveParticipants_inTabGroupWithIdentifier_, v40, isa, v18);
  }
  int64_t v21 = v19 + 3;
  if (v21 < v38)
  {
    unint64_t v20 = *(void *)(v37 + 8 * v21);
    if (!v20)
    {
      while (1)
      {
        int64_t v11 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          break;
        }
        if (v11 >= v38) {
          goto LABEL_22;
        }
        unint64_t v20 = *(void *)(v37 + 8 * v11);
        ++v21;
        if (v20) {
          goto LABEL_21;
        }
      }
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    int64_t v11 = v21;
    goto LABEL_21;
  }
LABEL_22:
  swift_release();
  uint64_t v39 = a2 + 64;
  uint64_t v22 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & *(void *)(a2 + 64);
  int64_t v25 = (unint64_t)(v22 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v26 = 0;
  while (2)
  {
    if (v24)
    {
      unint64_t v27 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v28 = v27 | (v26 << 6);
LABEL_26:
      uint64_t v29 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v28);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      type metadata accessor for CKShareParticipant();
      lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CKShareParticipant and conformance NSObject, (void (*)(uint64_t))type metadata accessor for CKShareParticipant);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      Class v32 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v33 = (void *)MEMORY[0x263E3F170](v30, v31);
      swift_bridgeObjectRelease();
      objc_msgSend(v7, sel_participantPresenceCoordinator_didUpdateActiveParticipants_inTabWithIdentifier_, v40, v32, v33);

      continue;
    }
    break;
  }
  int64_t v34 = v26 + 1;
  if (__OFADD__(v26, 1)) {
    goto LABEL_45;
  }
  if (v34 >= v25)
  {
LABEL_42:
    swift_unknownObjectRelease();
    swift_release();
    return;
  }
  unint64_t v35 = *(void *)(v39 + 8 * v34);
  ++v26;
  if (v35) {
    goto LABEL_41;
  }
  int64_t v26 = v34 + 1;
  if (v34 + 1 >= v25) {
    goto LABEL_42;
  }
  unint64_t v35 = *(void *)(v39 + 8 * v26);
  if (v35) {
    goto LABEL_41;
  }
  int64_t v26 = v34 + 2;
  if (v34 + 2 >= v25) {
    goto LABEL_42;
  }
  unint64_t v35 = *(void *)(v39 + 8 * v26);
  if (v35)
  {
LABEL_41:
    unint64_t v24 = (v35 - 1) & v35;
    unint64_t v28 = __clz(__rbit64(v35)) + (v26 << 6);
    goto LABEL_26;
  }
  int64_t v36 = v34 + 3;
  if (v36 >= v25) {
    goto LABEL_42;
  }
  unint64_t v35 = *(void *)(v39 + 8 * v36);
  if (v35)
  {
    int64_t v26 = v36;
    goto LABEL_41;
  }
  while (1)
  {
    int64_t v26 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v26 >= v25) {
      goto LABEL_42;
    }
    unint64_t v35 = *(void *)(v39 + 8 * v26);
    ++v36;
    if (v35) {
      goto LABEL_41;
    }
  }
LABEL_47:
  __break(1u);
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          int64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      int64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *int64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

uint64_t outlined assign with take of PresenceUpdateMessage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined consume of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(uint64_t a1, void *a2)
{
  if (a2)
  {

    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTabGroup(_:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTabGroup(_:)
                                                   + async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTabGroup(_:));
  return v6(v2, v3, v4);
}

uint64_t partial apply for @objc closure #1 in ParticipantPresenceCoordinator.currentLocationIdentifiersForParticipant(_:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.currentLocationIdentifiersForParticipant(_:)
                                                   + async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.currentLocationIdentifiersForParticipant(_:));
  return v6(v2, v3, v4);
}

uint64_t partial apply for @objc closure #1 in ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:)
                                                   + async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:));
  return v6(v2, v3, v4);
}

uint64_t partial apply for @objc closure #1 in ParticipantPresenceCoordinator.tabGroupIdentifierForParticipant(_:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.tabGroupIdentifierForParticipant(_:)
                                                   + async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.tabGroupIdentifierForParticipant(_:));
  return v6(v2, v3, v4);
}

uint64_t objectdestroy_32Tm()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t objectdestroy_16Tm()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_2617816E0()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for @objc closure #1 in ParticipantPresenceCoordinator.currentConnectionState()()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.currentConnectionState()
                                                    + async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.currentConnectionState());
  return v5(v2, v3);
}

uint64_t outlined destroy of weak ParticipantPresenceCoordinatorDelegate?(uint64_t a1)
{
  return a1;
}

uint64_t *outlined retain of PresenceUpdateMessage(uint64_t *a1)
{
  return a1;
}

uint64_t partial apply for specialized closure #1 in CollaborationConnectionManager.leaveActivity()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #1 in CollaborationConnectionManager.leaveActivity()();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #1 in CollaborationConnectionManager.leaveActivity()();
}

uint64_t partial apply for specialized closure #2 in FastSyncStateMachine.leaveActivity(priority:_:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return MEMORY[0x270FA2498](specialized closure #2 in FastSyncStateMachine.leaveActivity(priority:_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  long long v3;
  long long v4;
  uint64_t v6;

  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return MEMORY[0x270FA2498](specialized closure #2 in FastSyncStateMachine.leaveActivity(priority:_:), 0, 0);
}

uint64_t sub_261781984()
{
  return objectdestroy_193Tm(MEMORY[0x263F8EED8]);
}

uint64_t partial apply for specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:)(a1, v4, v5, v6, v7, v8);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_261781A64()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void *partial apply for implicit closure #3 in ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

uint64_t sub_261781AC8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void *partial apply for closure #1 in ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:)(uint64_t *a1)
{
  return closure #1 in ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:)(a1, *(void **)(v1 + 16));
}

uint64_t partial apply for specialized closure #1 in CollaborationConnectionManager.startActivity()(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  void *v6 = v3;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #1 in CollaborationConnectionManager.startActivity()(a1, v5, v2);
}

{
  uint64_t v2;
  uint64_t v3;
  char v5;
  void *v6;
  uint64_t v8;

  char v5 = a2 & 1;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  void *v6 = v3;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized closure #1 in CollaborationConnectionManager.startActivity()(a1, v5, v2);
}

uint64_t sub_261781B9C()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_261781CD0()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

unint64_t lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage()
{
  unint64_t result = lazy protocol witness table cache variable for type PresenceUpdateMessage and conformance PresenceUpdateMessage;
  if (!lazy protocol witness table cache variable for type PresenceUpdateMessage and conformance PresenceUpdateMessage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceUpdateMessage and conformance PresenceUpdateMessage);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresenceUpdateMessage and conformance PresenceUpdateMessage;
  if (!lazy protocol witness table cache variable for type PresenceUpdateMessage and conformance PresenceUpdateMessage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceUpdateMessage and conformance PresenceUpdateMessage);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresenceUpdateMessage and conformance PresenceUpdateMessage;
  if (!lazy protocol witness table cache variable for type PresenceUpdateMessage and conformance PresenceUpdateMessage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceUpdateMessage and conformance PresenceUpdateMessage);
  }
  return result;
}

uint64_t outlined consume of Set<Participant>.Iterator._Variant()
{
  return swift_release();
}

void outlined consume of ParticipantHandleMap.ParticipantKind?(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t partial apply for specialized closure #1 in AsyncBufferedQueue.init(bufferingPolicy:)(uint64_t a1)
{
  return specialized closure #1 in AsyncBufferedQueue.init(bufferingPolicy:)(a1, *(void *)(v1 + 16), &demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation?, &demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation);
}

{
  uint64_t v1;

  return specialized closure #1 in AsyncBufferedQueue.init(bufferingPolicy:)(a1, *(void *)(v1 + 16), &demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation?, &demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation);
}

{
  uint64_t v1;

  return specialized closure #1 in AsyncBufferedQueue.init(bufferingPolicy:)(a1, *(void *)(v1 + 16), &demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation?, &demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation);
}

uint64_t *outlined release of PresenceUpdateMessage(uint64_t *a1)
{
  return a1;
}

uint64_t partial apply for specialized closure #3 in FastSyncStateMachine.startActivity(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #3 in FastSyncStateMachine.startActivity(_:)
                                                                                              + async function pointer to specialized closure #3 in FastSyncStateMachine.startActivity(_:));
  return v11(a1, v4, v5, v6, v7, v9, v8);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #3 in FastSyncStateMachine.startActivity(_:)
                                                                                              + async function pointer to specialized closure #3 in FastSyncStateMachine.startActivity(_:));
  return v11(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t partial apply for specialized closure #2 in FastSyncStateMachine.startActivity(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #2 in FastSyncStateMachine.startActivity(_:)
                                                                                              + async function pointer to specialized closure #2 in FastSyncStateMachine.startActivity(_:));
  return v11(a1, v4, v5, v6, v7, v9, v8);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #2 in FastSyncStateMachine.startActivity(_:)
                                                                                              + async function pointer to specialized closure #2 in FastSyncStateMachine.startActivity(_:));
  return v11(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t partial apply for specialized closure #1 in FastSyncStateMachine.startActivity(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in FastSyncStateMachine.startActivity(_:)
                                                                                     + async function pointer to specialized closure #1 in FastSyncStateMachine.startActivity(_:));
  return v10(a1, v4, v5, v6, v7, v8);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in FastSyncStateMachine.startActivity(_:)
                                                                                     + async function pointer to specialized closure #1 in FastSyncStateMachine.startActivity(_:));
  return v10(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for specialized closure #1 in CollaborationConnectionManager.joinGroupSessionProvider(_:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized CollaborationConnectionManager.waitForGroupSessions(with:)(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v6;

  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized CollaborationConnectionManager.waitForGroupSessions(with:)(v2);
}

uint64_t outlined assign with take of Participant?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = (uint64_t *)v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)
                                                                              + async function pointer to specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:));
  return v10(a1, a2, v6, v7, v8);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v12;

  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = (uint64_t *)v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)
                                                                              + async function pointer to specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:));
  return v10(a1, a2, v6, v7, v8);
}

uint64_t partial apply for specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)
                                                                                      + async function pointer to specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:));
  return v9(a1, v4, v5, v6, v7, v1 + 6);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v11;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)
                                                                                      + async function pointer to specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:));
  return v9(a1, v4, v5, v6, v7, v1 + 6);
}

uint64_t partial apply for specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)
                                                                                      + async function pointer to specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:));
  return v9(a1, v4, v5, v6, v7, v1 + 6);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v11;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)
                                                                                      + async function pointer to specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:));
  return v9(a1, v4, v5, v6, v7, v1 + 6);
}

uint64_t partial apply for specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized CollaborationConnectionManager.runGroupSession(_:)(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v6;

  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return specialized CollaborationConnectionManager.runGroupSession(_:)(v2);
}

uint64_t partial apply for specialized closure #1 in GroupSession.leave(on:)(uint64_t a1)
{
  return specialized closure #1 in GroupSession.leave(on:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)&unk_270D7FA10, (uint64_t)partial apply for specialized closure #1 in closure #1 in GroupSession.leave(on:), (uint64_t)&block_descriptor);
}

{
  uint64_t v1;

  return specialized closure #1 in GroupSession.leave(on:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)&unk_270D7FCE0, (uint64_t)partial apply for specialized closure #1 in closure #1 in GroupSession.leave(on:), (uint64_t)&block_descriptor_426);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_261782700()
{
  return objectdestroy_193Tm(MEMORY[0x263F8EEA0]);
}

uint64_t partial apply for specialized closure #1 in GroupSessionMessengerController._makeTasks()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #1 in GroupSessionMessengerController._makeTasks()
                                                                             + async function pointer to specialized closure #1 in GroupSessionMessengerController._makeTasks());
  return v8(a1, v4, v5, v6, v1 + 5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v10;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #1 in GroupSessionMessengerController._makeTasks()
                                                                             + async function pointer to specialized closure #1 in GroupSessionMessengerController._makeTasks());
  return v8(a1, v4, v5, v6, v1 + 5);
}

uint64_t sub_2617827E8()
{
  return objectdestroy_193Tm(MEMORY[0x263F8EEA0]);
}

uint64_t partial apply for specialized closure #2 in GroupSessionMessengerController._makeTasks()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #2 in GroupSessionMessengerController._makeTasks()
                                                                             + async function pointer to specialized closure #2 in GroupSessionMessengerController._makeTasks());
  return v8(a1, v4, v5, v6, v1 + 5);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v10;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #2 in GroupSessionMessengerController._makeTasks()
                                                                             + async function pointer to specialized closure #2 in GroupSessionMessengerController._makeTasks());
  return v8(a1, v4, v5, v6, v1 + 5);
}

uint64_t partial apply for specialized closure #1 in GroupSession.join(on:)(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 16) = a1;
  return MEMORY[0x270FA2498](specialized closure #1 in GroupSession.join(on:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  long long v5;
  uint64_t v7;

  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 16) = a1;
  return MEMORY[0x270FA2498](specialized closure #1 in GroupSession.join(on:), 0, 0);
}

void partial apply for specialized closure #2 in GroupSession.join(on:)()
{
  specialized closure #2 in GroupSession.join(on:)(v0);
}

{
  uint64_t v0;

  specialized closure #2 in GroupSession.join(on:)(v0);
}

uint64_t partial apply for specialized closure #1 in closure #1 in GroupSession.join(on:)(uint64_t a1)
{
  return specialized closure #1 in closure #1 in GroupSession.join(on:)(a1, *(void *)(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in closure #1 in GroupSession.join(on:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for specialized closure #1 in closure #1 in closure #1 in GroupSession.join(on:)@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for specialized closure #1 in closure #1 in closure #1 in GroupSession.join(on:)(&demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.JoinState, (uint64_t)&unk_270D7FAD8, (uint64_t)partial apply for specialized closure #1 in GroupSession.JoinState.join(resuming:), (uint64_t)&block_descriptor_321, a1);
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #1 in GroupSession.join(on:)(&demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.JoinState, (uint64_t)&unk_270D7FD80, (uint64_t)partial apply for specialized closure #1 in GroupSession.JoinState.join(resuming:), (uint64_t)&block_descriptor_451, a1);
}

uint64_t sub_261782A04()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void outlined copy of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(uint64_t a1, void *a2, unint64_t a3)
{
  switch(a3 >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
      swift_retain();
      goto LABEL_4;
    case 3uLL:
      swift_retain();
      swift_retain();
LABEL_4:
      swift_retain();
      break;
    case 4uLL:
      swift_retain();
      id v4 = a2;
      break;
    default:
      return;
  }
}

void outlined consume of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(uint64_t a1, void *a2, unint64_t a3)
{
  switch(a3 >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
      swift_release();
      goto LABEL_4;
    case 3uLL:
      swift_release();
      swift_release();
LABEL_4:
      swift_release();
      break;
    case 4uLL:
      swift_release();

      break;
    default:
      return;
  }
}

uint64_t sub_261782D9C()
{
  return objectdestroy_193Tm(MEMORY[0x263F8EED8]);
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)(a1, v4, v5, v7, v6);
}

uint64_t objectdestroy_351Tm()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)(a1, v4, v5, v7, v6);
}

uint64_t objectdestroy_189Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t objectdestroy_240Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t objectdestroy_268Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t objectdestroy_258Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t objectdestroy_293Tm()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for specialized closure #1 in closure #1 in GroupSession.leave(on:)()
{
  return specialized closure #1 in closure #1 in GroupSession.leave(on:)();
}

uint64_t sub_261783A9C()
{
  return objectdestroy_193Tm(MEMORY[0x263F8EEA0]);
}

uint64_t sub_261783B84()
{
  return objectdestroy_193Tm(MEMORY[0x263F8EEA0]);
}

uint64_t objectdestroy_193Tm(void (*a1)(void))
{
  swift_unknownObjectRelease();
  swift_release();
  a1(*(void *)(v1 + 48));
  return MEMORY[0x270FA0238](v1, 56, 7);
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for specialized closure #1 in closure #1 in closure #1 in GroupSession.join(on:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t result = specialized GroupSession.JoinState.join(resuming:)(*(void *)(v5 + 16), a1, a2, a3, a4);
  if (!v6) {
    *a5 = result;
  }
  return result;
}

uint64_t objectdestroy_317Tm()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

void partial apply for specialized closure #1 in GroupSession.JoinState.join(resuming:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  specialized closure #1 in GroupSession.JoinState.join(resuming:)(*(void *)(v0 + 16));
}

uint64_t lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id CKShareParticipant.participantIdentifier.getter()
{
  if (objc_msgSend(v0, sel_acceptanceStatus) != (id)2) {
    return 0;
  }
  id v1 = objc_msgSend(v0, sel_userIdentity);
  id v2 = objc_msgSend(v1, sel_userRecordID);

  if (v2)
  {
    id v3 = objc_msgSend(v2, sel_recordName);

    id v2 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return v2;
}

uint64_t (*specialized Dictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = specialized Dictionary._Variant.subscript.modify(v6, a2, a3);
  return Dictionary.subscript.modifyspecialized ;
}

{
  void *v6;

  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = specialized Dictionary._Variant.subscript.modify(v6, a2, a3);
  return Dictionary.subscript.modifyspecialized ;
}

{
  void *v6;

  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = specialized Dictionary._Variant.subscript.modify(v6, a2, a3);
  return Dictionary.subscript.modifyspecialized ;
}

void Dictionary.subscript.modifyspecialized (void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t (*ParticipantPresenceStore._tabGroupIdentifiersToParticipants.modify())()
{
  return ParticipantPresenceCoordinator.ConnectionManagerStore.tabGroupIdentifiersToSharedConnections.modify;
}

uint64_t (*ParticipantPresenceStore._tabIdentifiersToParticipants.modify())()
{
  return ParticipantPresenceCoordinator.ConnectionManagerStore.pausedSharedConnections.modify;
}

uint64_t ParticipantPresenceStore.handleCurrentUserPresenceUpdateMessage(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (_OWORD *)(v3 + 144);
  uint64_t v8 = *(void *)(v3 + 176);
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9 != v8)
  {
    if (v9 < v8) {
      return 0;
    }
    if (v8 < v9) {
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  if (*(void *)(a1 + 40) == *(void *)(v3 + 184) && *(void *)(a1 + 48) == *(void *)(v3 + 192)) {
    goto LABEL_16;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
LABEL_16:
    uint64_t v14 = *(void *)(v3 + 152);
    outlined init with take of PresenceUpdateMessage.Kind(a1, (uint64_t)v19);
    if (v14)
    {
      outlined init with take of PresenceUpdateMessage.Kind((uint64_t)v19, (uint64_t)&v20);
    }
    else
    {
      outlined init with take of PresenceUpdateMessage.Kind((uint64_t)v19, (uint64_t)&v20);
      if (v21)
      {
        uint64_t v15 = *(void *)(v3 + 144);
        uint64_t v16 = *(void *)(v3 + 152);
        long long v17 = *(_OWORD *)(a1 + 16);
        _OWORD *v7 = *(_OWORD *)a1;
        *(_OWORD *)(v3 + 160) = v17;
        *(_OWORD *)(v3 + 176) = *(_OWORD *)(a1 + 32);
        *(void *)(v3 + 192) = *(void *)(a1 + 48);
        outlined retain of PresenceUpdateMessage((uint64_t *)a1);
        outlined consume of PresenceUpdateMessage.Kind(v15, v16);
LABEL_25:
        swift_bridgeObjectRelease();
      }
    }
    return 0;
  }
LABEL_11:
  uint64_t v11 = *(void *)(v3 + 144);
  uint64_t v12 = *(void *)(v3 + 152);
  long long v13 = *(_OWORD *)(a1 + 16);
  _OWORD *v7 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 160) = v13;
  *(_OWORD *)(v3 + 176) = *(_OWORD *)(a1 + 32);
  *(void *)(v3 + 192) = *(void *)(a1 + 48);
  outlined copy of PresenceUpdateMessage.Kind(v11, v12);
  outlined retain of PresenceUpdateMessage((uint64_t *)a1);
  outlined consume of PresenceUpdateMessage.Kind(v11, v12);
  swift_bridgeObjectRelease();
  if (!v12) {
    return 0;
  }
  outlined init with take of PresenceUpdateMessage.Kind(a1, (uint64_t)v19);
  swift_bridgeObjectRelease();
  outlined init with take of PresenceUpdateMessage.Kind((uint64_t)v19, (uint64_t)&v20);
  if (v21)
  {
    if (v11 == v20 && v12 == v21) {
      goto LABEL_25;
    }
  }
  else
  {
    if (!a3) {
      return v11;
    }
    if (v11 == a2 && v12 == a3) {
      goto LABEL_25;
    }
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_25;
  }
  return v11;
}

uint64_t ParticipantPresenceStore.handleSharedPresenceUpdateMessage(_:from:)(uint64_t *a1, void *a2)
{
  uint64_t v3 = v2;
  id v6 = CKShareParticipant.participantIdentifier.getter();
  if (!v7) {
    goto LABEL_30;
  }
  uint64_t v8 = (uint64_t)v6;
  uint64_t v9 = v7;
  uint64_t v10 = v2 + 15;
  swift_beginAccess();
  uint64_t v11 = v2[15];
  if (!*(void *)(v11 + 16))
  {
LABEL_20:
    swift_beginAccess();
    swift_bridgeObjectRetain();
    outlined retain of PresenceUpdateMessage(a1);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v131 = *v10;
    *uint64_t v10 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)a1, v8, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v10 = v131;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    int64_t v36 = (void *)a1[1];
    if (!v36) {
      goto LABEL_29;
    }
    uint64_t v37 = (void *)*a1;
    uint64_t v39 = a1[2];
    uint64_t v38 = a1[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ParticipantPresenceStore._addParticipant(_:to:in:)(a2, v39, v38, v37, v36);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, (tabGroupIdentifier: String, tabIdentifier: String))>);
    uint64_t inited = swift_initStackObject();
    uint64_t v130 = 1;
    *(_OWORD *)(inited + 16) = xmmword_261796D50;
    *(void *)(inited + 32) = v8;
    *(void *)(inited + 40) = v9;
    *(void *)(inited + 48) = v37;
    *(void *)(inited + 56) = v36;
    *(void *)(inited + 64) = v39;
    *(void *)(inited + 72) = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Set<CKShareParticipant>)>);
    uint64_t v25 = swift_initStackObject();
    *(_OWORD *)(v25 + 16) = xmmword_261796D50;
    *(void *)(v25 + 32) = v37;
    *(void *)(v25 + 40) = v36;
    swift_beginAccess();
    uint64_t v42 = v3[16];
    if (*(void *)(v42 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37, (uint64_t)v36);
      if ((v44 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __break(1u);
        goto LABEL_110;
      }
      uint64_t v45 = *(void *)(*(void *)(v42 + 56) + 8 * v43);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v25 + 48) = v45;
      specialized Dictionary.init(dictionaryLiteral:)(v25);
      uint64_t v41 = swift_initStackObject();
      *(_OWORD *)(v41 + 16) = xmmword_261796D50;
      *(void *)(v41 + 32) = v39;
      *(void *)(v41 + 40) = v38;
      swift_beginAccess();
      uint64_t v46 = v3[17];
      if (*(void *)(v46 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v38);
        if (v48)
        {
          uint64_t v49 = *(void *)(*(void *)(v46 + 56) + 8 * v47);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)(v41 + 48) = v49;
          uint64_t v50 = v41;
LABEL_31:
          specialized Dictionary.init(dictionaryLiteral:)(v50);
          return v34;
        }
LABEL_110:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __break(1u);
        goto LABEL_111;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v124 = v8;
  v125 = v2;
  uint64_t v14 = (uint64_t *)(*(void *)(v11 + 56) + 56 * v12);
  uint64_t v16 = v14[4];
  uint64_t v15 = v14[5];
  uint64_t v17 = v14[6];
  uint64_t v126 = v14[3];
  uint64_t v127 = *v14;
  uint64_t v128 = v14[2];
  uint64_t v130 = v14[1];
  outlined copy of PresenceUpdateMessage.Kind(*v14, v130);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = a1[4];
  uint64_t v19 = a1[5];
  uint64_t v20 = a1[6];
  if (v18 != v16)
  {
    uint64_t v22 = v15;
    if (v18 >= v16) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
  BOOL v21 = v19 == v15 && v20 == v17;
  uint64_t v22 = v15;
  if (!v21)
  {
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v22 = v15;
    if (v23)
    {
LABEL_28:
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v127, v130);
LABEL_29:
      swift_bridgeObjectRelease();
LABEL_30:
      uint64_t v51 = MEMORY[0x263F8EE78];
      unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      specialized Dictionary.init(dictionaryLiteral:)(v51);
      uint64_t v50 = v51;
      goto LABEL_31;
    }
  }
LABEL_10:
  uint64_t v25 = *a1;
  uint64_t v24 = a1[1];
  uint64_t v26 = a1[2];
  uint64_t v27 = a1[3];
  if (v130)
  {
    if (!v24)
    {
      if (v18 != v16
        || (v22 == v19 ? (BOOL v77 = v17 == v20) : (BOOL v77 = 0), !v77
                                                      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
      {
        swift_bridgeObjectRetain();
        uint64_t v88 = v126;
        swift_bridgeObjectRetain();
        ParticipantPresenceStore._removeParticipant(_:from:in:)(v124, v9, v128, v126, v127, v130);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v89 = swift_initStackObject();
        *(_OWORD *)(v89 + 16) = xmmword_261796D50;
        *(void *)(v89 + 32) = v124;
        *(void *)(v89 + 40) = v9;
        specialized Set.init(_nonEmptyArrayLiteral:)(v89);
        swift_setDeallocating();
        swift_arrayDestroy();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Set<CKShareParticipant>)>);
        uint64_t v90 = swift_initStackObject();
        *(_OWORD *)(v90 + 16) = xmmword_261796D50;
        *(void *)(v90 + 32) = v127;
        *(void *)(v90 + 40) = v130;
        swift_beginAccess();
        uint64_t v91 = v125[16];
        uint64_t v92 = *(void *)(v91 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v92 && (unint64_t v93 = specialized __RawDictionaryStorage.find<A>(_:)(v127, v130), (v94 & 1) != 0))
        {
          uint64_t v95 = *(void *)(*(void *)(v91 + 56) + 8 * v93);
          swift_bridgeObjectRetain();
        }
        else if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0)
        {
          if (_CocoaArrayWrapper.endIndex.getter())
          {
            specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
            uint64_t v95 = v117;
          }
          else
          {
            uint64_t v95 = MEMORY[0x263F8EE88];
          }
          uint64_t v88 = v126;
        }
        else
        {
          uint64_t v95 = MEMORY[0x263F8EE88];
        }
        swift_bridgeObjectRelease();
        *(void *)(v90 + 48) = v95;
        swift_bridgeObjectRelease();
        specialized Dictionary.init(dictionaryLiteral:)(v90);
        uint64_t v99 = swift_initStackObject();
        *(_OWORD *)(v99 + 16) = xmmword_261796D50;
        *(void *)(v99 + 32) = v128;
        *(void *)(v99 + 40) = v88;
        swift_beginAccess();
        uint64_t v100 = v125[17];
        uint64_t v101 = *(void *)(v100 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v101 && (unint64_t v102 = specialized __RawDictionaryStorage.find<A>(_:)(v128, v88), (v103 & 1) != 0))
        {
          uint64_t v104 = *(void *)(*(void *)(v100 + 56) + 8 * v102);
          swift_bridgeObjectRetain();
        }
        else if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0)
        {
          if (_CocoaArrayWrapper.endIndex.getter())
          {
            specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
            uint64_t v104 = v118;
          }
          else
          {
            uint64_t v104 = MEMORY[0x263F8EE88];
          }
        }
        else
        {
          uint64_t v104 = MEMORY[0x263F8EE88];
        }
        swift_bridgeObjectRelease();
        *(void *)(v99 + 48) = v104;
        swift_bridgeObjectRelease();
        specialized Dictionary.init(dictionaryLiteral:)(v99);
        unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        outlined consume of PresenceUpdateMessage.Kind(v127, v130);
        swift_bridgeObjectRelease();
        return v34;
      }
      swift_bridgeObjectRelease();
      uint64_t v78 = MEMORY[0x263F8EE78];
      unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      specialized Dictionary.init(dictionaryLiteral:)(v78);
      specialized Dictionary.init(dictionaryLiteral:)(v78);
      outlined consume of PresenceUpdateMessage.Kind(v127, v130);
      goto LABEL_65;
    }
    if (v18 == v16)
    {
      BOOL v28 = v22 == v19 && v17 == v20;
      if (v28
        || (uint64_t v29 = a1[2],
            uint64_t v30 = a1[3],
            uint64_t v31 = a1[1],
            char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(),
            uint64_t v24 = v31,
            uint64_t v26 = v29,
            uint64_t v27 = v30,
            (v32 & 1) != 0))
      {
        outlined copy of PresenceUpdateMessage.Kind(v25, v24);
        outlined copy of PresenceUpdateMessage.Kind(v127, v130);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v33 = MEMORY[0x263F8EE78];
        unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        specialized Dictionary.init(dictionaryLiteral:)(v33);
        specialized Dictionary.init(dictionaryLiteral:)(v33);
        outlined consume of PresenceUpdateMessage.Kind(v127, v130);
LABEL_65:
        swift_bridgeObjectRelease();
        return v34;
      }
    }
    uint64_t v121 = v25;
    v122 = (void *)v24;
    uint64_t v123 = v26;
    uint64_t v68 = v27;
    outlined copy of PresenceUpdateMessage.Kind(v25, v24);
    outlined copy of PresenceUpdateMessage.Kind(v127, v130);
    ParticipantPresenceStore._removeParticipant(_:from:in:)(v124, v9, v128, v126, v127, v130);
    ParticipantPresenceStore._addParticipant(_:to:in:)(a2, v123, v68, (void *)v25, v122);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    outlined retain of PresenceUpdateMessage(a1);
    char v69 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v133 = v125[15];
    v125[15] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)a1, v124, v9, v69);
    v125[15] = v133;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, (tabGroupIdentifier: String, tabIdentifier: String))>);
    uint64_t v70 = swift_initStackObject();
    long long v120 = xmmword_261796D50;
    *(_OWORD *)(v70 + 16) = xmmword_261796D50;
    *(void *)(v70 + 32) = v124;
    *(void *)(v70 + 40) = v9;
    *(void *)(v70 + 48) = v25;
    *(void *)(v70 + 56) = v122;
    *(void *)(v70 + 64) = v123;
    *(void *)(v70 + 72) = v68;
    swift_bridgeObjectRetain();
    uint64_t v124 = v68;
    swift_bridgeObjectRetain();
    unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(v70);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Set<CKShareParticipant>)>);
    uint64_t v25 = swift_initStackObject();
    *(_OWORD *)(v25 + 16) = xmmword_261796D50;
    *(void *)(v25 + 32) = v127;
    *(void *)(v25 + 40) = v130;
    v119 = v125 + 16;
    swift_beginAccess();
    uint64_t v71 = v125[16];
    uint64_t v72 = *(void *)(v71 + 16);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v73 = MEMORY[0x263F8EE78];
    if (v72)
    {
      unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)(v127, v130);
      if (v75)
      {
        uint64_t v41 = v73;
        uint64_t v76 = *(void *)(*(void *)(v71 + 56) + 8 * v74);
        swift_bridgeObjectRetain();
LABEL_51:
        uint64_t v79 = v126;
        swift_bridgeObjectRelease();
        *(void *)(v25 + 48) = v76;
        swift_bridgeObjectRelease();
        specialized Dictionary.init(dictionaryLiteral:)(v25);
        uint64_t v80 = swift_initStackObject();
        *(_OWORD *)(v80 + 16) = v120;
        *(void *)(v80 + 32) = v128;
        *(void *)(v80 + 40) = v126;
        uint64_t v81 = v125 + 17;
        swift_beginAccess();
        uint64_t v82 = v125[17];
        uint64_t v83 = *(void *)(v82 + 16);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        if (v83 && (unint64_t v84 = specialized __RawDictionaryStorage.find<A>(_:)(v128, v126), (v85 & 1) != 0))
        {
          uint64_t v86 = *(void *)(*(void *)(v82 + 56) + 8 * v84);
          swift_bridgeObjectRetain();
          uint64_t v87 = v128;
        }
        else
        {
          if ((v41 & 0xC000000000000000) != 0)
          {
            if (_CocoaArrayWrapper.endIndex.getter())
            {
              specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
              uint64_t v86 = v116;
            }
            else
            {
              uint64_t v86 = MEMORY[0x263F8EE88];
            }
            uint64_t v79 = v126;
          }
          else
          {
            uint64_t v86 = MEMORY[0x263F8EE88];
          }
          uint64_t v87 = v128;
        }
        swift_bridgeObjectRelease();
        *(void *)(v80 + 48) = v86;
        swift_bridgeObjectRelease();
        specialized Dictionary.init(dictionaryLiteral:)(v80);
        if (v127 == v121 && (void *)v130 == v122)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_82:
          if (v87 == v123 && v79 == v124)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            char v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v109 & 1) == 0)
            {
              uint64_t v110 = *v81;
              if (*(void *)(*v81 + 16))
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                unint64_t v111 = specialized __RawDictionaryStorage.find<A>(_:)(v123, v124);
                if (v112)
                {
                  uint64_t v113 = *(void *)(*(void *)(v110 + 56) + 8 * v111);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  char v114 = swift_isUniquelyReferenced_nonNull_native();
                  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v113, v123, v124, v114);
                  swift_bridgeObjectRelease();
                  goto LABEL_89;
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              specialized Dictionary._Variant.removeValue(forKey:)(v123, v124);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of PresenceUpdateMessage.Kind(v127, v130);
              swift_bridgeObjectRelease();
              return v34;
            }
          }
LABEL_89:
          swift_bridgeObjectRelease();
          outlined consume of PresenceUpdateMessage.Kind(v127, v130);
          swift_bridgeObjectRelease();
          return v34;
        }
        char v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v98)
        {
LABEL_81:
          swift_bridgeObjectRelease();
          uint64_t v79 = v126;
          goto LABEL_82;
        }
        uint64_t v105 = *v119;
        if (*(void *)(*v119 + 16))
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v106 = specialized __RawDictionaryStorage.find<A>(_:)(v121, (uint64_t)v122);
          if (v107)
          {
            uint64_t v129 = *(void *)(*(void *)(v105 + 56) + 8 * v106);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            char v108 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v129, v121, (uint64_t)v122, v108);
            swift_bridgeObjectRelease();
            goto LABEL_81;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        specialized Dictionary._Variant.removeValue(forKey:)(v121, (uint64_t)v122);
        swift_bridgeObjectRelease();
        goto LABEL_81;
      }
    }
    uint64_t v41 = v73;
    if ((v73 & 0xC000000000000000) == 0)
    {
LABEL_50:
      uint64_t v76 = MEMORY[0x263F8EE88];
      goto LABEL_51;
    }
LABEL_96:
    if (_CocoaArrayWrapper.endIndex.getter())
    {
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
      uint64_t v76 = v115;
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  if (!v24)
  {
    swift_beginAccess();
    outlined retain of PresenceUpdateMessage(a1);
    char v96 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v134 = *v10;
    *uint64_t v10 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)a1, v124, v9, v96);
    *uint64_t v10 = v134;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v97 = MEMORY[0x263F8EE78];
    unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    specialized Dictionary.init(dictionaryLiteral:)(v97);
    specialized Dictionary.init(dictionaryLiteral:)(v97);
    uint64_t v67 = v127;
    goto LABEL_64;
  }
  uint64_t v53 = a1[3];
  uint64_t v54 = a1[2];
  int64_t v55 = (void *)a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ParticipantPresenceStore._addParticipant(_:to:in:)(a2, v54, v53, (void *)v25, v55);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  outlined retain of PresenceUpdateMessage(a1);
  char v56 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v132 = v125[15];
  v125[15] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)a1, v124, v9, v56);
  v125[15] = v132;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, (tabGroupIdentifier: String, tabIdentifier: String))>);
  uint64_t v57 = swift_initStackObject();
  uint64_t v130 = 1;
  *(_OWORD *)(v57 + 16) = xmmword_261796D50;
  *(void *)(v57 + 32) = v124;
  *(void *)(v57 + 40) = v9;
  *(void *)(v57 + 48) = v25;
  *(void *)(v57 + 56) = v55;
  uint64_t v123 = v54;
  *(void *)(v57 + 64) = v54;
  *(void *)(v57 + 72) = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(v57);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Set<CKShareParticipant>)>);
  uint64_t v58 = swift_initStackObject();
  *(_OWORD *)(v58 + 16) = xmmword_261796D50;
  *(void *)(v58 + 32) = v25;
  *(void *)(v58 + 40) = v55;
  swift_beginAccess();
  uint64_t v59 = v125[16];
  if (!*(void *)(v59 + 16)) {
    goto LABEL_94;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v25, (uint64_t)v55);
  if ((v61 & 1) == 0)
  {
LABEL_111:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_112;
  }
  uint64_t v62 = *(void *)(*(void *)(v59 + 56) + 8 * v60);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v58 + 48) = v62;
  specialized Dictionary.init(dictionaryLiteral:)(v58);
  uint64_t v41 = swift_initStackObject();
  *(_OWORD *)(v41 + 16) = xmmword_261796D50;
  uint64_t v25 = v54;
  *(void *)(v41 + 32) = v54;
  *(void *)(v41 + 40) = v53;
  swift_beginAccess();
  uint64_t v63 = v125[17];
  if (!*(void *)(v63 + 16))
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v53);
  if (v65)
  {
    uint64_t v66 = *(void *)(*(void *)(v63 + 56) + 8 * v64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v41 + 48) = v66;
    specialized Dictionary.init(dictionaryLiteral:)(v41);
    uint64_t v67 = v127;
LABEL_64:
    outlined consume of PresenceUpdateMessage.Kind(v67, 0);
    goto LABEL_65;
  }
LABEL_112:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

void specialized thunk for @callee_guaranteed () -> (@owned Set<CKShareParticipant>)(void *a1@<X8>)
{
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    uint64_t v2 = MEMORY[0x263F8EE88];
  }
  *a1 = v2;
}

unint64_t ParticipantPresenceStore.replace(share:with:in:)(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v5 = v4;
  type metadata accessor for CKShareParticipant(0, &lazy cache variable for type metadata for NSObject);
  id v8 = objc_msgSend(a1, sel_recordID);
  id v9 = objc_msgSend(a2, sel_recordID);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t valid = CKShare.identifiersToValidParticipants.getter();
  uint64_t v11 = MEMORY[0x263F8EE78];
  unint64_t v58 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  specialized Dictionary.init(dictionaryLiteral:)(v11);
  unint64_t v59 = specialized Dictionary.init(dictionaryLiteral:)(v11);
  uint64_t v71 = MEMORY[0x263F8EE88];
  uint64_t v12 = CKShare.identifiersToValidParticipants.getter();
  uint64_t v65 = v12 + 64;
  uint64_t v68 = v12;
  uint64_t v13 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v12 + 64);
  uint64_t v60 = v5;
  uint64_t v67 = (uint64_t *)(v5 + 120);
  swift_beginAccess();
  swift_beginAccess();
  int64_t v16 = 0;
  int64_t v66 = (unint64_t)(v13 + 63) >> 6;
  while (v15)
  {
    unint64_t v17 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    int64_t v69 = v16;
    unint64_t v18 = v17 | (v16 << 6);
LABEL_21:
    char v23 = (uint64_t *)(*(void *)(v68 + 48) + 16 * v18);
    uint64_t v25 = *v23;
    uint64_t v24 = v23[1];
    uint64_t v26 = *v67;
    uint64_t v27 = *(void *)(*v67 + 16);
    swift_bridgeObjectRetain();
    if (!v27) {
      goto LABEL_33;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v24);
    if ((v29 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_32:
      swift_bridgeObjectRelease();
      goto LABEL_33;
    }
    uint64_t v30 = (uint64_t *)(*(void *)(v26 + 56) + 56 * v28);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = v30[2];
    uint64_t v34 = v30[3];
    uint64_t v35 = v30[5];
    uint64_t v64 = v30[4];
    uint64_t v36 = v30[6];
    outlined copy of PresenceUpdateMessage.Kind(*v30, v31);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v36
      && (outlined copy of PresenceUpdateMessage.Kind(v32, v31),
          outlined consume of PresenceUpdateMessage?(v32, v31, v33, v34, v64, v35, v36),
          v31))
    {
      uint64_t v37 = v33;
      if ((void *)v32 == a3 && v31 == (void)a4)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v39 & 1) == 0) {
          goto LABEL_32;
        }
      }
      if (!*(void *)(valid + 16)) {
        goto LABEL_39;
      }
      swift_bridgeObjectRetain();
      unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v24);
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_39:
        ParticipantPresenceStore._removeParticipant(_:from:in:)(v25, v24, v37, v34, (uint64_t)a3, (uint64_t)a4);
        specialized Set._Variant.insert(_:)((Swift::Int *)&v70, v25, v24);
        swift_bridgeObjectRelease();
        uint64_t v43 = *(void *)(v60 + 136);
        uint64_t v44 = *(void *)(v43 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v44 && (unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v34), (v46 & 1) != 0))
        {
          uint64_t v47 = *(void *)(*(void *)(v43 + 56) + 8 * v45);
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v47 = MEMORY[0x263F8EE88];
          if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0)
          {
            if (_CocoaArrayWrapper.endIndex.getter())
            {
              specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
              uint64_t v47 = v49;
            }
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v70 = v59;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v47, v37, v34, isUniquelyReferenced_nonNull_native);
        unint64_t v59 = v70;
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
      id v42 = *(id *)(*(void *)(valid + 56) + 8 * v40);
      swift_bridgeObjectRelease();
      ParticipantPresenceStore._removeParticipant(_:from:in:)(v25, v24, v37, v34, (uint64_t)a3, (uint64_t)a4);
      swift_bridgeObjectRelease();
      ParticipantPresenceStore._addParticipant(_:to:in:)(v42, v37, v34, a3, a4);
      swift_bridgeObjectRelease();

      int64_t v16 = v69;
    }
    else
    {
LABEL_33:
      swift_bridgeObjectRelease();
      int64_t v16 = v69;
    }
  }
  int64_t v19 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (v19 >= v66) {
    goto LABEL_46;
  }
  unint64_t v20 = *(void *)(v65 + 8 * v19);
  int64_t v21 = v16 + 1;
  if (v20) {
    goto LABEL_20;
  }
  int64_t v21 = v16 + 2;
  if (v16 + 2 >= v66) {
    goto LABEL_46;
  }
  unint64_t v20 = *(void *)(v65 + 8 * v21);
  if (v20) {
    goto LABEL_20;
  }
  int64_t v21 = v16 + 3;
  if (v16 + 3 >= v66) {
    goto LABEL_46;
  }
  unint64_t v20 = *(void *)(v65 + 8 * v21);
  if (v20)
  {
LABEL_20:
    unint64_t v15 = (v20 - 1) & v20;
    int64_t v69 = v21;
    unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
    goto LABEL_21;
  }
  uint64_t v22 = v16 + 4;
  if (v16 + 4 < v66)
  {
    unint64_t v20 = *(void *)(v65 + 8 * v22);
    if (!v20)
    {
      while (1)
      {
        int64_t v21 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          goto LABEL_55;
        }
        if (v21 >= v66) {
          goto LABEL_46;
        }
        unint64_t v20 = *(void *)(v65 + 8 * v21);
        ++v22;
        if (v20) {
          goto LABEL_20;
        }
      }
    }
    int64_t v21 = v16 + 4;
    goto LABEL_20;
  }
LABEL_46:
  swift_bridgeObjectRelease();
  swift_release();
  if (!*(void *)(v71 + 16)) {
    return v58;
  }
  swift_beginAccess();
  uint64_t v50 = *(void *)(v60 + 128);
  uint64_t v51 = *(void *)(v50 + 16);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  if (v51)
  {
    unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a3, (uint64_t)a4);
    if (v53)
    {
      uint64_t v54 = *(void *)(*(void *)(v50 + 56) + 8 * v52);
      swift_bridgeObjectRetain();
      goto LABEL_52;
    }
  }
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) == 0)
  {
LABEL_51:
    uint64_t v54 = MEMORY[0x263F8EE88];
    goto LABEL_52;
  }
LABEL_57:
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_51;
  }
  specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v54 = v57;
LABEL_52:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v55 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v54, (uint64_t)a3, (uint64_t)a4, v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v58;
}

uint64_t CKShare.identifiersToValidParticipants.getter()
{
  id v1 = objc_msgSend(v0, sel_participants);
  type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_18;
  }
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  uint64_t v4 = 0;
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  unint64_t v6 = v2 & 0xC000000000000001;
  uint64_t v7 = &off_265585000;
  uint64_t v25 = v3;
  do
  {
    if (v6) {
      id v8 = (id)MEMORY[0x263E3F5A0](v4, v2);
    }
    else {
      id v8 = *(id *)(v2 + 8 * v4 + 32);
    }
    id v9 = v8;
    if ([v8 (SEL)v7[169]] == (id)2
      && (id v10 = objc_msgSend(v9, sel_userIdentity),
          id v11 = objc_msgSend(v10, sel_userRecordID),
          v10,
          v11))
    {
      unint64_t v12 = v2;
      unint64_t v13 = v6;
      uint64_t v14 = v7;
      id v15 = objc_msgSend(v11, sel_recordName);

      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v20 = v5[2];
      unint64_t v19 = v5[3];
      if (v20 >= v19 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v5);
      }
      v5[2] = v20 + 1;
      int64_t v21 = &v5[3 * v20];
      v21[4] = v16;
      v21[5] = v18;
      v21[6] = v9;
      uint64_t v7 = v14;
      unint64_t v6 = v13;
      unint64_t v2 = v12;
      uint64_t v3 = v25;
    }
    else
    {
    }
    ++v4;
  }
  while (v3 != v4);
LABEL_19:
  swift_bridgeObjectRelease_n();
  if (v5[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CKShareParticipant>);
    uint64_t v22 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v22 = MEMORY[0x263F8EE80];
  }
  uint64_t v26 = v22;
  char v23 = (void *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v23, 1, &v26);
  swift_bridgeObjectRelease();
  return v26;
}

unint64_t ParticipantPresenceStore.participants(_:didLeaveTabGroup:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = MEMORY[0x263F8EE78];
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  specialized Dictionary.init(dictionaryLiteral:)(v4);
  unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(v4);
  uint64_t v90 = MEMORY[0x263F8EE88];
  unint64_t v74 = v5;
  Swift::Int v75 = v6;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
    lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    a1 = v91;
    uint64_t v85 = v92;
    uint64_t v7 = v93;
    uint64_t v8 = v94;
    unint64_t v9 = v95;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v85 = a1 + 56;
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v9 = v12 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
  }
  int64_t v84 = (unint64_t)(v7 + 64) >> 6;
  unint64_t v13 = v77 + 15;
  uint64_t v72 = v77 + 17;
  uint64_t v14 = &off_265585000;
  uint64_t v83 = v77 + 15;
  uint64_t v82 = a1;
  while (1)
  {
    uint64_t v15 = v8;
    if (a1 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_63;
      }
      type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v18 = (id)v89;
      swift_unknownObjectRelease();
      if (!v18) {
        goto LABEL_63;
      }
      goto LABEL_33;
    }
    if (v9)
    {
      unint64_t v16 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v17 = v16 | (v8 << 6);
      goto LABEL_32;
    }
    int64_t v19 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_73;
    }
    if (v19 >= v84) {
      goto LABEL_63;
    }
    unint64_t v20 = *(void *)(v85 + 8 * v19);
    ++v8;
    if (!v20)
    {
      uint64_t v8 = v15 + 2;
      if (v15 + 2 >= v84) {
        goto LABEL_63;
      }
      unint64_t v20 = *(void *)(v85 + 8 * v8);
      if (!v20)
      {
        uint64_t v8 = v15 + 3;
        if (v15 + 3 >= v84) {
          goto LABEL_63;
        }
        unint64_t v20 = *(void *)(v85 + 8 * v8);
        if (!v20)
        {
          uint64_t v8 = v15 + 4;
          if (v15 + 4 >= v84) {
            goto LABEL_63;
          }
          unint64_t v20 = *(void *)(v85 + 8 * v8);
          if (!v20) {
            break;
          }
        }
      }
    }
LABEL_31:
    unint64_t v9 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v8 << 6);
LABEL_32:
    id v18 = *(id *)(*(void *)(a1 + 48) + 8 * v17);
    if (!v18) {
      goto LABEL_63;
    }
LABEL_33:
    if ([v18 (SEL)v14[169]] == (id)2
      && (id v22 = objc_msgSend(v18, sel_userIdentity),
          id v23 = objc_msgSend(v22, sel_userRecordID),
          v22,
          v23))
    {
      unint64_t v86 = v9;
      id v24 = objc_msgSend(v23, sel_recordName);

      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v26;

      swift_beginAccess();
      uint64_t v28 = *v13;
      if (!*(void *)(*v13 + 16)) {
        goto LABEL_9;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v27);
      if ((v30 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_9:
        swift_bridgeObjectRelease();
        a1 = v82;
        unint64_t v13 = v77 + 15;
LABEL_10:
        uint64_t v14 = &off_265585000;
        unint64_t v9 = v86;
        goto LABEL_11;
      }
      uint64_t v31 = (uint64_t *)(*(void *)(v28 + 56) + 56 * v29);
      uint64_t v32 = *v31;
      uint64_t v33 = v31[1];
      uint64_t v34 = v25;
      uint64_t v36 = v31[2];
      uint64_t v35 = v31[3];
      uint64_t v37 = v31[6];
      uint64_t v78 = v31[5];
      uint64_t v79 = v31[4];
      outlined copy of PresenceUpdateMessage.Kind(*v31, v33);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v37) {
        goto LABEL_9;
      }
      outlined copy of PresenceUpdateMessage.Kind(v32, v33);
      uint64_t v73 = v36;
      outlined consume of PresenceUpdateMessage?(v32, v33, v36, v35, v79, v78, v37);
      if (!v33)
      {
        unint64_t v13 = v77 + 15;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v27);
        char v43 = v42;
        swift_bridgeObjectRelease();
        if (v43)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v45 = *v83;
          uint64_t v87 = *v83;
          *uint64_t v83 = 0x8000000000000000;
          a1 = v82;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            uint64_t v45 = v87;
          }
          swift_bridgeObjectRelease();
          char v46 = (uint64_t *)(*(void *)(v45 + 56) + 56 * v41);
          uint64_t v47 = *v46;
          uint64_t v48 = v46[1];
          specialized _NativeDictionary._delete(at:)(v41, v45);
          *uint64_t v83 = v45;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of PresenceUpdateMessage.Kind(v47, v48);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          a1 = v82;
        }
        swift_endAccess();
        goto LABEL_10;
      }
      uint64_t v38 = v35;
      if (v32 == a2 && v33 == a3)
      {
        swift_bridgeObjectRelease();
        uint64_t v40 = v36;
        a1 = v82;
      }
      else
      {
        char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v40 = v36;
        a1 = v82;
        if ((v39 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v13 = v77 + 15;
          goto LABEL_10;
        }
      }
      uint64_t v80 = v38;
      ParticipantPresenceStore._removeParticipant(_:from:in:)(v34, v27, v40, v38, a2, a3);
      unint64_t v13 = v77 + 15;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v27);
      char v51 = v50;
      swift_bridgeObjectRelease();
      if (v51)
      {
        char v52 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v53 = *v83;
        uint64_t v88 = *v83;
        *uint64_t v83 = 0x8000000000000000;
        if ((v52 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v53 = v88;
        }
        swift_bridgeObjectRelease();
        uint64_t v54 = (uint64_t *)(*(void *)(v53 + 56) + 56 * v49);
        uint64_t v55 = *v54;
        uint64_t v56 = v54[1];
        specialized _NativeDictionary._delete(at:)(v49, v53);
        *uint64_t v83 = v53;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v55, v56);
        swift_bridgeObjectRelease();
        uint64_t v40 = v73;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      specialized Set._Variant.insert(_:)(&v89, v34, v27);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v57 = *v72;
      uint64_t v58 = *(void *)(*v72 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v14 = &off_265585000;
      if (v58 && (unint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v80), (v60 & 1) != 0))
      {
        uint64_t v61 = *(void *)(*(void *)(v57 + 56) + 8 * v59);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v61 = MEMORY[0x263F8EE88];
        if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0)
        {
          if (_CocoaArrayWrapper.endIndex.getter())
          {
            specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
            uint64_t v61 = v63;
          }
          a1 = v82;
          unint64_t v13 = v77 + 15;
          uint64_t v40 = v73;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v62 = swift_isUniquelyReferenced_nonNull_native();
      Swift::Int v89 = v75;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v61, v40, v80, v62);
      Swift::Int v75 = v89;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v9 = v86;
    }
    else
    {
LABEL_11:
    }
  }
  uint64_t v21 = v15 + 5;
  while (v84 != v21)
  {
    unint64_t v20 = *(void *)(v85 + 8 * v21++);
    if (v20)
    {
      uint64_t v8 = v21 - 1;
      goto LABEL_31;
    }
  }
LABEL_63:
  outlined consume of Set<Participant>.Iterator._Variant();
  if (*(void *)(v90 + 16))
  {
    swift_beginAccess();
    uint64_t v64 = v77[16];
    uint64_t v65 = *(void *)(v64 + 16);
    uint64_t v14 = (_UNKNOWN **)a3;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v9 = v74;
    if (v65)
    {
      unint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if (v67)
      {
        uint64_t v68 = *(void *)(*(void *)(v64 + 56) + 8 * v66);
        swift_bridgeObjectRetain();
LABEL_69:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v69 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v68, a2, (uint64_t)v14, v69);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    if ((MEMORY[0x263F8EE78] & 0xC000000000000000) == 0)
    {
LABEL_68:
      uint64_t v68 = MEMORY[0x263F8EE88];
      goto LABEL_69;
    }
LABEL_73:
    if (_CocoaArrayWrapper.endIndex.getter())
    {
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
      uint64_t v68 = v71;
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  return v74;
}

uint64_t ParticipantPresenceStore.removeTabGroup(_:)(uint64_t a1, uint64_t isUniquelyReferenced_nonNull_native)
{
  unint64_t v5 = MEMORY[0x263F8EE78];
  unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v61 = specialized Dictionary.init(dictionaryLiteral:)(v5);
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(v5);
  uint64_t v79 = MEMORY[0x263F8EE88];
  swift_beginAccess();
  uint64_t v67 = v2;
  uint64_t v8 = *(void *)(v2 + 128);
  uint64_t v9 = *(void *)(v8 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v66 = a1;
  if (v9)
  {
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, isUniquelyReferenced_nonNull_native);
    if (v11)
    {
      uint64_t v12 = *(void *)(*(void *)(v8 + 56) + 8 * v10);
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
  }
  if ((v5 & 0xC000000000000000) != 0) {
    goto LABEL_63;
  }
LABEL_5:
  uint64_t v12 = MEMORY[0x263F8EE88];
LABEL_6:
  unint64_t v62 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v12 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
    lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t v12 = v80;
    uint64_t v64 = v81;
    uint64_t v13 = v82;
    unint64_t v6 = v83;
    unint64_t v14 = v84;
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v15 = -1 << *(unsigned char *)(v12 + 32);
    uint64_t v64 = v12 + 56;
    uint64_t v16 = ~v15;
    uint64_t v17 = -v15;
    if (v17 < 64) {
      uint64_t v18 = ~(-1 << v17);
    }
    else {
      uint64_t v18 = -1;
    }
    unint64_t v14 = v18 & *(void *)(v12 + 56);
    uint64_t v13 = v16;
  }
  int64_t v63 = (unint64_t)(v13 + 64) >> 6;
  uint64_t v73 = (uint64_t *)(v67 + 120);
  uint64_t v65 = v12;
  if ((v12 & 0x8000000000000000) == 0)
  {
    while (1)
    {
      if (v14)
      {
        uint64_t v22 = (v14 - 1) & v14;
        unint64_t v23 = __clz(__rbit64(v14)) | (v6 << 6);
        unint64_t v21 = v6;
      }
      else
      {
        int64_t v24 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          goto LABEL_62;
        }
        if (v24 >= v63) {
          goto LABEL_56;
        }
        unint64_t v25 = *(void *)(v64 + 8 * v24);
        unint64_t v21 = v6 + 1;
        if (!v25)
        {
          unint64_t v21 = v6 + 2;
          if ((uint64_t)(v6 + 2) >= v63) {
            goto LABEL_56;
          }
          unint64_t v25 = *(void *)(v64 + 8 * v21);
          if (!v25)
          {
            unint64_t v21 = v6 + 3;
            if ((uint64_t)(v6 + 3) >= v63) {
              goto LABEL_56;
            }
            unint64_t v25 = *(void *)(v64 + 8 * v21);
            if (!v25)
            {
              unint64_t v21 = v6 + 4;
              if ((uint64_t)(v6 + 4) >= v63) {
                goto LABEL_56;
              }
              unint64_t v25 = *(void *)(v64 + 8 * v21);
              if (!v25)
              {
                unint64_t v26 = v6 + 5;
                while (v63 != v26)
                {
                  unint64_t v25 = *(void *)(v64 + 8 * v26++);
                  if (v25)
                  {
                    unint64_t v21 = v26 - 1;
                    goto LABEL_31;
                  }
                }
                goto LABEL_56;
              }
            }
          }
        }
LABEL_31:
        uint64_t v22 = (v25 - 1) & v25;
        unint64_t v23 = __clz(__rbit64(v25)) + (v21 << 6);
      }
      id v20 = *(id *)(*(void *)(v12 + 48) + 8 * v23);
      if (!v20) {
        goto LABEL_56;
      }
LABEL_33:
      unint64_t v69 = v22;
      if (objc_msgSend(v20, sel_acceptanceStatus) != (id)2) {
        goto LABEL_72;
      }
      id v27 = objc_msgSend(v20, sel_userIdentity);
      id v28 = objc_msgSend(v27, sel_userRecordID);

      if (!v28) {
        goto LABEL_72;
      }
      uint64_t v68 = v20;
      id v29 = objc_msgSend(v28, sel_recordName);

      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v31;

      swift_beginAccess();
      uint64_t v33 = *v73;
      if (!*(void *)(*v73 + 16)) {
        goto LABEL_71;
      }
      unint64_t v70 = v21;
      unint64_t v71 = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v32);
      if ((v35 & 1) == 0) {
        break;
      }
      uint64_t v36 = (uint64_t *)(*(void *)(v33 + 56) + 56 * v34);
      uint64_t v37 = *v36;
      unint64_t v5 = v36[1];
      uint64_t v38 = v36[2];
      uint64_t v39 = v36[3];
      outlined copy of PresenceUpdateMessage.Kind(*v36, v5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v5)
      {
        outlined consume of PresenceUpdateMessage.Kind(v37, 0);
        swift_bridgeObjectRelease();
        goto LABEL_71;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v72 = v38;
      outlined consume of PresenceUpdateMessage.Kind(v37, v5);
      swift_bridgeObjectRelease();
      if ((v37 != v66 || v5 != isUniquelyReferenced_nonNull_native)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_71;
      }
      unint64_t v6 = isUniquelyReferenced_nonNull_native;
      swift_beginAccess();
      swift_bridgeObjectRetain_n();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v78[0] = *v73;
      uint64_t v40 = v78[0];
      *uint64_t v73 = 0x8000000000000000;
      swift_bridgeObjectRetain();
      unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v32);
      uint64_t v42 = *(void *)(v40 + 16);
      BOOL v43 = (v41 & 1) == 0;
      uint64_t v44 = v42 + v43;
      if (__OFADD__(v42, v43))
      {
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        if (_CocoaArrayWrapper.endIndex.getter())
        {
          specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
          uint64_t v12 = v59;
          goto LABEL_6;
        }
        goto LABEL_5;
      }
      char v45 = v41;
      if (*(void *)(v40 + 24) >= v44)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          char isUniquelyReferenced_nonNull_native = v6;
          if ((v41 & 1) == 0) {
            goto LABEL_55;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          char isUniquelyReferenced_nonNull_native = v6;
          if ((v45 & 1) == 0) {
            goto LABEL_55;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, isUniquelyReferenced_nonNull_native);
        unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v32);
        if ((v45 & 1) != (v47 & 1)) {
          goto LABEL_73;
        }
        unint64_t v7 = v46;
        char isUniquelyReferenced_nonNull_native = v6;
        if ((v45 & 1) == 0)
        {
LABEL_55:
          __break(1u);
          goto LABEL_56;
        }
      }
      uint64_t v48 = *(void *)(v78[0] + 56) + 56 * v7;
      uint64_t v49 = *(void *)v48;
      uint64_t v50 = *(void *)(v48 + 8);
      uint64_t v51 = *(void *)(v48 + 48);
      long long v76 = *(_OWORD *)(v48 + 32);
      uint64_t v77 = v51;
      outlined consume of PresenceUpdateMessage.Kind(v49, v50);
      long long v74 = 0u;
      long long v75 = 0u;
      specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify((uint64_t *)&v74, 1, v78, v7, v30, v32);
      outlined consume of PresenceUpdateMessage?(v74, *((uint64_t *)&v74 + 1), v75, *((uint64_t *)&v75 + 1), v76, *((uint64_t *)&v76 + 1), v77);
      swift_bridgeObjectRelease();
      *(void *)(v67 + 120) = v78[0];
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_bridgeObjectRelease();
      uint64_t v52 = v72;
      ParticipantPresenceStore._removeParticipant(_:from:in:)(v30, v32, v72, v39, v37, v5);
      swift_bridgeObjectRelease();
      specialized Set._Variant.insert(_:)((Swift::Int *)&v74, v30, v32);
      swift_bridgeObjectRelease();
      uint64_t v53 = MEMORY[0x263F8EE88];
      unint64_t v5 = MEMORY[0x263F8EE78];
      unint64_t v6 = v70;
      if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0)
      {
        if (_CocoaArrayWrapper.endIndex.getter())
        {
          specialized Set.init(_nonEmptyArrayLiteral:)(v5);
          uint64_t v53 = v55;
        }
        uint64_t v52 = v72;
      }
      char v54 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v74 = v71;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v53, v52, v39, v54);
      unint64_t v7 = v74;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = v69;
      uint64_t v12 = v65;
      if (v65 < 0) {
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_71:
    swift_bridgeObjectRelease();
LABEL_72:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_73:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_13:
  uint64_t v19 = __CocoaSet.Iterator.next()();
  if (v19)
  {
    v78[1] = v19;
    type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v20 = (id)v74;
    swift_unknownObjectRelease();
    unint64_t v21 = v6;
    uint64_t v22 = v14;
    if (v20) {
      goto LABEL_33;
    }
  }
LABEL_56:
  outlined consume of Set<Participant>.Iterator._Variant();
  if (!*(void *)(v79 + 16)) {
    return v62;
  }
  swift_bridgeObjectRetain();
  if ((v5 & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v56 = v60;
  }
  else
  {
    uint64_t v56 = MEMORY[0x263F8EE88];
  }
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v74 = v61;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v56, v66, isUniquelyReferenced_nonNull_native, v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v62;
}

uint64_t ParticipantPresenceStore.removeTab(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = MEMORY[0x263F8EE78];
  unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(v5);
  unint64_t v65 = specialized Dictionary.init(dictionaryLiteral:)(v5);
  uint64_t v82 = MEMORY[0x263F8EE88];
  swift_beginAccess();
  uint64_t v72 = v2;
  uint64_t v8 = *(void *)(v2 + 136);
  uint64_t v9 = *(void *)(v8 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v71 = a1;
  if (v9 && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v11 & 1) != 0))
  {
    uint64_t v12 = *(void *)(*(void *)(v8 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
  }
  else
  {
    if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0)
    {
LABEL_67:
      if (_CocoaArrayWrapper.endIndex.getter())
      {
        specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v12 = v63;
        goto LABEL_6;
      }
    }
    uint64_t v12 = MEMORY[0x263F8EE88];
  }
LABEL_6:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v66 = v6;
  if ((v12 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
    lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t v12 = v83;
    uint64_t v68 = v84;
    uint64_t v13 = v85;
    unint64_t v6 = v86;
    unint64_t v14 = v87;
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v15 = -1 << *(unsigned char *)(v12 + 32);
    uint64_t v68 = v12 + 56;
    uint64_t v13 = ~v15;
    uint64_t v16 = -v15;
    if (v16 < 64) {
      uint64_t v17 = ~(-1 << v16);
    }
    else {
      uint64_t v17 = -1;
    }
    unint64_t v14 = v17 & *(void *)(v12 + 56);
  }
  uint64_t v73 = a2;
  int64_t v67 = (unint64_t)(v13 + 64) >> 6;
  uint64_t v76 = v72 + 120;
  uint64_t v69 = v72 + 128;
  uint64_t v70 = v12;
  while (v12 < 0)
  {
    uint64_t v22 = __CocoaSet.Iterator.next()();
    if (!v22) {
      goto LABEL_59;
    }
    v81[1] = v22;
    type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v23 = (id)v77;
    swift_unknownObjectRelease();
    unint64_t v21 = v6;
    uint64_t v19 = v14;
    if (!v23) {
      goto LABEL_59;
    }
LABEL_36:
    if (objc_msgSend(v23, sel_acceptanceStatus) != (id)2) {
      goto LABEL_76;
    }
    id v27 = objc_msgSend(v23, sel_userIdentity);
    id v28 = objc_msgSend(v27, sel_userRecordID);

    if (!v28) {
      goto LABEL_76;
    }
    id v29 = objc_msgSend(v28, sel_recordName);

    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v31;

    swift_beginAccess();
    uint64_t v33 = *(void *)v76;
    if (!*(void *)(*(void *)v76 + 16)) {
      goto LABEL_75;
    }
    unint64_t v74 = v19;
    unint64_t v75 = v21;
    unint64_t v34 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v32);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_75;
    }
    uint64_t v37 = (uint64_t *)(*(void *)(v33 + 56) + 56 * v35);
    unint64_t v6 = *v37;
    uint64_t v38 = v37[1];
    uint64_t v39 = v37[2];
    uint64_t v40 = v37[3];
    outlined copy of PresenceUpdateMessage.Kind(*v37, v38);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v38)
    {
      outlined consume of PresenceUpdateMessage.Kind(v6, 0);
      swift_bridgeObjectRelease();
      goto LABEL_75;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined consume of PresenceUpdateMessage.Kind(v6, v38);
    swift_bridgeObjectRelease();
    if ((v39 != v71 || v40 != v73) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_75:
      swift_bridgeObjectRelease();
LABEL_76:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_77:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    uint64_t v41 = v39;
    a2 = v72;
    ParticipantPresenceStore._removeParticipant(_:from:in:)(v30, v32, v41, v40, v6, v38);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v81[0] = *(void *)(v72 + 120);
    uint64_t v43 = v81[0];
    *(void *)(v72 + 120) = 0x8000000000000000;
    swift_bridgeObjectRetain();
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v32);
    uint64_t v45 = *(void *)(v43 + 16);
    BOOL v46 = (v44 & 1) == 0;
    uint64_t v47 = v45 + v46;
    if (__OFADD__(v45, v46))
    {
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    a2 = v44;
    if (*(void *)(v43 + 24) >= v47)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if ((v44 & 1) == 0) {
          goto LABEL_65;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((a2 & 1) == 0) {
          goto LABEL_65;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, isUniquelyReferenced_nonNull_native);
      unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v32);
      if ((a2 & 1) != (v49 & 1)) {
        goto LABEL_77;
      }
      unint64_t v7 = v48;
      if ((a2 & 1) == 0) {
        goto LABEL_65;
      }
    }
    uint64_t v50 = *(void *)(v81[0] + 56) + 56 * v7;
    uint64_t v51 = *(void *)v50;
    uint64_t v52 = *(void *)(v50 + 8);
    uint64_t v53 = *(void *)(v50 + 48);
    long long v79 = *(_OWORD *)(v50 + 32);
    uint64_t v80 = v53;
    outlined consume of PresenceUpdateMessage.Kind(v51, v52);
    long long v77 = 0u;
    long long v78 = 0u;
    specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify((uint64_t *)&v77, 1, v81, v7, v30, v32);
    outlined consume of PresenceUpdateMessage?(v77, *((uint64_t *)&v77 + 1), v78, *((uint64_t *)&v78 + 1), v79, *((uint64_t *)&v79 + 1), v80);
    swift_bridgeObjectRelease();
    *(void *)uint64_t v76 = v81[0];
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_bridgeObjectRelease();
    specialized Set._Variant.insert(_:)((Swift::Int *)&v77, v30, v32);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v54 = *(void *)v69;
    uint64_t v55 = *(void *)(*(void *)v69 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v55 && (unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v38), (v57 & 1) != 0))
    {
      a2 = *(void *)(*(void *)(v54 + 56) + 8 * v56);
      swift_bridgeObjectRetain();
    }
    else
    {
      a2 = MEMORY[0x263F8EE88];
      if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0)
      {
        unint64_t v58 = MEMORY[0x263F8EE78];
        if (_CocoaArrayWrapper.endIndex.getter())
        {
          specialized Set.init(_nonEmptyArrayLiteral:)(v58);
          a2 = v59;
        }
        else
        {
          a2 = MEMORY[0x263F8EE88];
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v77 = v34;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, v6, v38, v18);
    unint64_t v7 = v77;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = v70;
    unint64_t v14 = v74;
    unint64_t v6 = v75;
  }
  if (v14)
  {
    uint64_t v19 = (v14 - 1) & v14;
    unint64_t v20 = __clz(__rbit64(v14)) | (v6 << 6);
    unint64_t v21 = v6;
    goto LABEL_35;
  }
  int64_t v24 = v6 + 1;
  if (__OFADD__(v6, 1)) {
    goto LABEL_66;
  }
  if (v24 >= v67) {
    goto LABEL_59;
  }
  unint64_t v25 = *(void *)(v68 + 8 * v24);
  unint64_t v21 = v6 + 1;
  if (v25) {
    goto LABEL_34;
  }
  unint64_t v21 = v6 + 2;
  if ((uint64_t)(v6 + 2) >= v67) {
    goto LABEL_59;
  }
  unint64_t v25 = *(void *)(v68 + 8 * v21);
  if (v25) {
    goto LABEL_34;
  }
  unint64_t v21 = v6 + 3;
  if ((uint64_t)(v6 + 3) >= v67) {
    goto LABEL_59;
  }
  unint64_t v25 = *(void *)(v68 + 8 * v21);
  if (v25) {
    goto LABEL_34;
  }
  unint64_t v21 = v6 + 4;
  if ((uint64_t)(v6 + 4) >= v67) {
    goto LABEL_59;
  }
  unint64_t v25 = *(void *)(v68 + 8 * v21);
  if (v25)
  {
LABEL_34:
    uint64_t v19 = (v25 - 1) & v25;
    unint64_t v20 = __clz(__rbit64(v25)) + (v21 << 6);
LABEL_35:
    id v23 = *(id *)(*(void *)(v12 + 48) + 8 * v20);
    if (!v23) {
      goto LABEL_59;
    }
    goto LABEL_36;
  }
  unint64_t v26 = v6 + 5;
  while (v67 != v26)
  {
    unint64_t v25 = *(void *)(v68 + 8 * v26++);
    if (v25)
    {
      unint64_t v21 = v26 - 1;
      goto LABEL_34;
    }
  }
LABEL_59:
  outlined consume of Set<Participant>.Iterator._Variant();
  if (!*(void *)(v82 + 16)) {
    return v66;
  }
  swift_bridgeObjectRetain();
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v60 = v64;
  }
  else
  {
    uint64_t v60 = MEMORY[0x263F8EE88];
  }
  char v61 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v77 = v65;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v60, v71, v73, v61);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v66;
}

Swift::tuple_tabGroupIdentifier_String_optional_tabIdentifier_String_optional __swiftcall ParticipantPresenceStore.locationIdentifiersForParticipant(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 120);
  if (!*(void *)(v4 + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_6:
    uint64_t v8 = 0;
    uint64_t v9 = 0;
LABEL_7:
    uint64_t v10 = 0;
    char v11 = 0;
    goto LABEL_8;
  }
  unint64_t v7 = (uint64_t *)(*(void *)(v4 + 56) + 56 * v5);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = v7[2];
  char v11 = (void *)v7[3];
  outlined copy of PresenceUpdateMessage.Kind(*v7, v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v9)
  {
    outlined consume of PresenceUpdateMessage.Kind(v8, 0);
    swift_bridgeObjectRelease();
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of PresenceUpdateMessage.Kind(v8, v9);
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v12 = v8;
  uint64_t v13 = (void *)v9;
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  result.tabIdentifier.value._object = v15;
  result.tabIdentifier.value._uint64_t countAndFlagsBits = v14;
  result.tabGroupIdentifier.value._object = v13;
  result.tabGroupIdentifier.value._uint64_t countAndFlagsBits = v12;
  return result;
}

uint64_t ParticipantPresenceStore.activeParticipantsInTabGroup(_:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 128);
  uint64_t v6 = *(void *)(v5 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v8 & 1) != 0))
  {
    uint64_t v9 = *(void *)(*(void *)(v5 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
  }
  else if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v9 = v11;
  }
  else
  {
    uint64_t v9 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t ParticipantPresenceStore._addParticipant(_:to:in:)(void *a1, uint64_t a2, uint64_t a3, void *a4, id a5)
{
  unint64_t v7 = v5;
  id v38 = CKShareParticipant.participantIdentifier.getter();
  uint64_t v39 = v12;
  if (!v12)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v13 = v7 + 16;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v14 = a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v41 = (void *)v7[16];
  uint64_t v16 = v41;
  v7[16] = 0x8000000000000000;
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a4, (uint64_t)a5);
  uint64_t v19 = v16[2];
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_19;
  }
  char v6 = v17;
  if (v16[3] >= v21)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_20;
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
    uint64_t v16 = v41;
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a4, (uint64_t)a5);
    if ((v6 & 1) != (v23 & 1)) {
      goto LABEL_22;
    }
    unint64_t v18 = v22;
  }
  while (1)
  {
    void *v13 = v16;
    swift_bridgeObjectRelease();
    int64_t v24 = (void *)*v13;
    if ((v6 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      specialized thunk for @callee_guaranteed () -> (@owned Set<CKShareParticipant>)(&v41);
      specialized _NativeDictionary._insert(at:key:value:)(v18, (uint64_t)a4, (uint64_t)a5, (uint64_t)v41, v24);
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    specialized Set._Variant.insert(_:)(&v41, v14);
    swift_endAccess();
    swift_bridgeObjectRelease();

    a4 = v7 + 17;
    swift_beginAccess();
    a5 = v14;
    swift_bridgeObjectRetain();
    char v25 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v41 = (void *)v7[17];
    unint64_t v26 = v41;
    v7[17] = 0x8000000000000000;
    char v6 = a2;
    id v14 = (id)specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    uint64_t v28 = v26[2];
    BOOL v29 = (v27 & 1) == 0;
    uint64_t v30 = v28 + v29;
    if (!__OFADD__(v28, v29)) {
      break;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    specialized _NativeDictionary.copy()();
    uint64_t v16 = v41;
  }
  char v31 = v27;
  if (v26[3] >= v30)
  {
    if ((v25 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      unint64_t v26 = v41;
    }
    goto LABEL_15;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, v25);
  unint64_t v26 = v41;
  unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v31 & 1) != (v33 & 1))
  {
LABEL_22:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  id v14 = (id)v32;
LABEL_15:
  *a4 = v26;
  swift_bridgeObjectRelease();
  unint64_t v34 = (void *)*a4;
  if ((v31 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    specialized thunk for @callee_guaranteed () -> (@owned Set<CKShareParticipant>)(&v41);
    specialized _NativeDictionary._insert(at:key:value:)((unint64_t)v14, a2, a3, (uint64_t)v41, v34);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  specialized Set._Variant.insert(_:)(&v41, a5);
  swift_endAccess();
  swift_bridgeObjectRelease();

  swift_beginAccess();
  id v35 = a5;
  char v36 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v41 = (void *)v7[14];
  v7[14] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v35, (uint64_t)v38, v39, v36);
  v7[14] = v41;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

void ParticipantPresenceStore._removeParticipant(_:from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  swift_beginAccess();
  uint64_t v14 = *(void *)(v6 + 112);
  if (*(void *)(v14 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v16 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v38 = a3;
    id v17 = *(id *)(*(void *)(v14 + 56) + 8 * v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v18 = ParticipantPresenceStore._tabGroupIdentifiersToParticipants.modify();
    uint64_t v19 = specialized Dictionary.subscript.modify(v39, a5, a6);
    if (*v20)
    {
      uint64_t v21 = (void *)specialized Set._Variant.remove(_:)(v17);
      ((void (*)(void *, void))v19)(v39, 0);
      swift_bridgeObjectRelease();
      ((void (*)(unsigned char *, void))v18)(v40, 0);
    }
    else
    {
      ((void (*)(void *, void))v19)(v39, 0);
      swift_bridgeObjectRelease();
      ((void (*)(unsigned char *, void))v18)(v40, 0);
    }
    swift_beginAccess();
    uint64_t v22 = *(void *)(v7 + 128);
    if (*(void *)(v22 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a5, a6);
      if ((v24 & 1) == 0)
      {
LABEL_14:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      uint64_t v25 = *(void *)(*(void *)(v22 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v25 & 0xC000000000000001) != 0) {
        uint64_t v26 = __CocoaSet.count.getter();
      }
      else {
        uint64_t v26 = *(void *)(v25 + 16);
      }
      swift_bridgeObjectRelease();
      if (!v26)
      {
        swift_beginAccess();
        swift_bridgeObjectRetain();
        specialized Dictionary._Variant.removeValue(forKey:)(a5, a6);
        swift_endAccess();
        goto LABEL_14;
      }
    }
LABEL_15:
    swift_bridgeObjectRetain();
    char v27 = ParticipantPresenceStore._tabIdentifiersToParticipants.modify();
    uint64_t v28 = specialized Dictionary.subscript.modify(v39, v38, a4);
    if (*v29)
    {
      uint64_t v30 = v17;
      char v31 = (void *)specialized Set._Variant.remove(_:)(v17);
      ((void (*)(void *, void))v28)(v39, 0);
      swift_bridgeObjectRelease();
      ((void (*)(unsigned char *, void))v27)(v40, 0);
    }
    else
    {
      ((void (*)(void *, void))v28)(v39, 0);
      swift_bridgeObjectRelease();
      ((void (*)(unsigned char *, void))v27)(v40, 0);
      uint64_t v30 = v17;
    }
    swift_beginAccess();
    uint64_t v32 = *(void *)(v7 + 136);
    if (!*(void *)(v32 + 16)) {
      goto LABEL_26;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v38, a4);
    if (v34)
    {
      uint64_t v35 = *(void *)(*(void *)(v32 + 56) + 8 * v33);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v35 & 0xC000000000000001) != 0) {
        uint64_t v36 = __CocoaSet.count.getter();
      }
      else {
        uint64_t v36 = *(void *)(v35 + 16);
      }
      swift_bridgeObjectRelease();
      if (v36) {
        goto LABEL_26;
      }
      swift_beginAccess();
      swift_bridgeObjectRetain();
      specialized Dictionary._Variant.removeValue(forKey:)(v38, a4);
      swift_endAccess();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_26:
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v37 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(a1, a2);
    swift_endAccess();

    swift_bridgeObjectRelease();
  }
}

uint64_t ParticipantPresenceStore.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PresenceUpdateMessage.Kind(*(void *)(v0 + 144), *(void *)(v0 + 152));
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return MEMORY[0x270FA2418](v0);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Task<(), Never>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, ParticipantHandleMap.ParticipantKind)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ParticipantHandleMap.ParticipantKind>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CKShareParticipant)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>>, &demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>>, &demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = *(void *)(a4 + 16);
    if (v10 <= v11) {
      uint64_t v12 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      unint64_t v16 = (unint64_t)(v13 + 4);
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      unint64_t v16 = MEMORY[0x263F8EE78] + 32;
      if (result)
      {
LABEL_15:
        if ((unint64_t)v13 < a4 || v16 >= a4 + 32 + 8 * v11)
        {
          __swift_instantiateConcreteTypeFromMangledName(a6);
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v13 != (void *)a4)
        {
          __swift_instantiateConcreteTypeFromMangledName(a6);
          swift_arrayInitWithTakeBackToFront();
        }
        *(void *)(a4 + 16) = 0;
        goto LABEL_26;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v16, a4, a6);
LABEL_26:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      unint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  uint64_t v43 = v2;
  uint64_t v44 = a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    id v6 = a2;
    CKShareParticipant.participantIdentifier.getter();
    if (v7)
    {
      Hasher._combine(_:)(1u);
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
  }
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v46 = *v43;
    *uint64_t v43 = 0x8000000000000000;
    id v38 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v43 = v46;
    swift_bridgeObjectRelease();
    *uint64_t v44 = a2;
    return 1;
  }
  uint64_t v11 = ~v9;
  uint64_t v12 = &off_265585000;
  uint64_t v42 = ~v9;
  while (1)
  {
    BOOL v13 = *(void **)(*(void *)(v5 + 48) + 8 * v10);
    if (v13)
    {
      id v14 = v13;
      if ([v14 (SEL)v12[169]] != (id)2
        || (id v15 = objc_msgSend(v14, sel_userIdentity),
            id v16 = objc_msgSend(v15, sel_userRecordID),
            v15,
            !v16))
      {

LABEL_17:
        goto LABEL_10;
      }
      id v17 = objc_msgSend(v16, sel_recordName);

      if (!a2) {
        goto LABEL_17;
      }
    }
    else if (!a2)
    {
      goto LABEL_45;
    }
    id v18 = a2;
    if ([v18 (SEL)v12[169]] != (id)2
      || (id v19 = objc_msgSend(v18, sel_userIdentity),
          id v20 = objc_msgSend(v19, sel_userRecordID),
          v19,
          !v20))
    {

      goto LABEL_10;
    }
    id v21 = objc_msgSend(v20, sel_recordName);

    if (!v13) {
      goto LABEL_10;
    }
    id v22 = v18;
    id v23 = v13;
    if ([v23 (SEL)v12[169]] == (id)2
      && (id v24 = objc_msgSend(v23, sel_userIdentity),
          id v25 = objc_msgSend(v24, sel_userRecordID),
          v24,
          v25))
    {
      uint64_t v26 = v12;
      id v27 = objc_msgSend(v25, sel_recordName);

      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = v28;

      uint64_t v12 = v26;
    }
    else
    {
      uint64_t v45 = 0;
      uint64_t v29 = 0;
    }
    uint64_t v30 = v22;
    if ([v22 (SEL)v12[169]] == (id)2)
    {
      id v31 = objc_msgSend(v22, sel_userIdentity);
      id v32 = objc_msgSend(v31, sel_userRecordID);

      if (v32)
      {
        id v33 = objc_msgSend(v32, sel_recordName);

        id v32 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v35 = v34;

        uint64_t v30 = v22;
        if (!v29) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v35 = 0;
        if (!v29)
        {
LABEL_29:

          if (!v35)
          {

            swift_bridgeObjectRelease();
            goto LABEL_46;
          }

          swift_bridgeObjectRelease();
          goto LABEL_38;
        }
      }
    }
    else
    {
      id v32 = 0;
      uint64_t v35 = 0;
      if (!v29) {
        goto LABEL_29;
      }
    }
    if (!v35)
    {
      swift_bridgeObjectRelease();

LABEL_38:
      uint64_t v11 = v42;
      uint64_t v12 = &off_265585000;
      goto LABEL_10;
    }
    if ((id)v45 == v32 && v29 == v35) {
      break;
    }
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v11 = v42;
    uint64_t v12 = &off_265585000;
    if (v36) {
      goto LABEL_44;
    }
LABEL_10:
    unint64_t v10 = (v10 + 1) & v11;
    if (((*(void *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      goto LABEL_41;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_44:
LABEL_45:
  swift_bridgeObjectRelease();
LABEL_46:
  uint64_t v40 = *(void **)(*(void *)(*v43 + 48) + 8 * v10);
  *uint64_t v44 = v40;
  id v41 = v40;
  return 0;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  Swift::Int v22;
  void *v23;
  id v24;
  char isUniquelyReferenced_nonNull_native;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;

  uint64_t v3 = v2;
  id v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    Swift::Int v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    id v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    uint64_t v28 = (void *)v22;
    if (*(void *)(v22 + 24) <= *(void *)(v22 + 16))
    {
      uint64_t v26 = v8;
      specialized _NativeSet.resize(capacity:)();
      id v23 = v28;
    }
    else
    {
      id v23 = (void *)v22;
      id v24 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v23);
    *uint64_t v3 = (uint64_t)v23;
  }
  else
  {
    uint64_t v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    uint64_t v12 = NSObject._rawHashValue(seed:)(v11);
    BOOL v13 = -1 << *(unsigned char *)(v6 + 32);
    id v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      id v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        id v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      id v17 = ~v13;
      while (1)
      {
        id v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        id v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    Swift::Int v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for AddressableMember();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x263F08F70]);
  swift_bridgeObjectRetain();
  id v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    id v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    id v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    id v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      id v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x263F08F70]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      id v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      id v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CKShareParticipant>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v14;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v2;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  int64_t v33;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ParticipantHandleMap.ParticipantKind>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v31 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      unint64_t v7 = ~(-1 << v5);
    }
    else {
      unint64_t v7 = -1;
    }
    int64_t v8 = v7 & *(void *)(v2 + 56);
    uint64_t v32 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v8)
      {
        uint64_t v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v14 = v13 | (v11 << 6);
      }
      else
      {
        unint64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        if (v15 >= v32) {
          goto LABEL_40;
        }
        int64_t v16 = v6[v15];
        ++v11;
        if (!v16)
        {
          int64_t v11 = v15 + 1;
          if (v15 + 1 >= v32) {
            goto LABEL_40;
          }
          int64_t v16 = v6[v11];
          if (!v16)
          {
            int64_t v11 = v15 + 2;
            if (v15 + 2 >= v32) {
              goto LABEL_40;
            }
            int64_t v16 = v6[v11];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v32)
              {
LABEL_40:
                swift_release();
                uint64_t v1 = v31;
                uint64_t v30 = 1 << *(unsigned char *)(v2 + 32);
                if (v30 > 63) {
                  bzero(v6, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v6 = -1 << v30;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v11 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_46;
                  }
                  if (v11 >= v32) {
                    goto LABEL_40;
                  }
                  int64_t v16 = v6[v11];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v17;
            }
          }
        }
LABEL_23:
        int64_t v8 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      int64_t v18 = *(void **)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      if (v18)
      {
        id v33 = v11;
        unint64_t v19 = v18;
        if (objc_msgSend(v19, sel_acceptanceStatus) == (id)2
          && (uint64_t v20 = objc_msgSend(v19, sel_userIdentity),
              uint64_t v21 = objc_msgSend(v20, sel_userRecordID),
              v20,
              v21))
        {
          uint64_t v22 = objc_msgSend(v21, sel_recordName);

          static String._unconditionallyBridgeFromObjectiveC(_:)();
          Hasher._combine(_:)(1u);
          String.hash(into:)();
          uint64_t v6 = (void *)(v2 + 56);
          swift_bridgeObjectRelease();
        }
        else
        {
          Hasher._combine(_:)(0);
        }

        int64_t v11 = v33;
      }
      else
      {
        String.hash(into:)();
      }
      uint64_t result = Hasher._finalize()();
      unint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v24 = result & ~v23;
      char v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v26 = 0;
        BOOL v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          uint64_t v28 = v25 == v27;
          if (v25 == v27) {
            char v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v9 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v12 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for AddressableMember();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  id v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    unint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    int64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    char v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    int64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    id v38 = v6;
    unint64_t v14 = v41;
    unint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v40 = v13;
        int64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        unint64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        uint64_t v20 = v37[v19];
        uint64_t v21 = v13 + 1;
        if (!v20)
        {
          uint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          uint64_t v20 = v37[v21];
          if (!v20)
          {
            uint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            uint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              uint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  uint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  uint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        uint64_t v40 = v21;
        int64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      unint64_t v23 = v4;
      unint64_t v24 = *(void *)(v4 + 48);
      char v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x263F08F70]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      BOOL v27 = -1 << *(unsigned char *)(v6 + 32);
      uint64_t v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        int64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0;
          }
          v30 |= v32;
          id v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        int64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      uint64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CKShareParticipant>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      unint64_t v7 = ~(-1 << v5);
    }
    else {
      unint64_t v7 = -1;
    }
    int64_t v8 = v7 & *(void *)(v2 + 56);
    uint64_t v9 = (unint64_t)(v5 + 63) >> 6;
    unint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          unint64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            unint64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v28;
                BOOL v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  unint64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v12 = v18;
            }
          }
        }
LABEL_23:
        int64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      unint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v21 = result & ~v20;
      uint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          char v25 = v22 == v24;
          if (v22 == v24) {
            uint64_t v22 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        uint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(void *a1, unint64_t a2, char a3)
{
  uint64_t v5 = v3;
  unint64_t v8 = *(void *)(*(void *)v3 + 16);
  unint64_t v9 = *(void *)(*(void *)v3 + 24);
  if (v9 <= v8 || (a3 & 1) == 0)
  {
    if (a3)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v9 > v8)
      {
        specialized _NativeSet.copy()();
        goto LABEL_48;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v10 = *(void *)v3;
    Hasher.init(_seed:)();
    if (a1)
    {
      id v11 = a1;
      CKShareParticipant.participantIdentifier.getter();
      if (v12)
      {
        id v4 = v12;
        Hasher._combine(_:)(1u);
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
    }
    else
    {
      String.hash(into:)();
    }
    uint64_t v3 = &v41;
    Swift::Int v13 = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v10 + 32);
    a2 = v13 & ~v14;
    uint64_t v15 = v10 + 56;
    if ((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v39 = v10;
      uint64_t v40 = ~v14;
      do
      {
        BOOL v16 = *(void **)(*(void *)(v10 + 48) + 8 * a2);
        if (v16)
        {
          uint64_t v3 = v16;
          if (objc_msgSend(v3, sel_acceptanceStatus) != (id)2
            || (id v17 = objc_msgSend(v3, sel_userIdentity),
                id v4 = objc_msgSend(v17, sel_userRecordID),
                v17,
                !v4))
          {

LABEL_24:
            goto LABEL_17;
          }
          id v18 = objc_msgSend(v4, sel_recordName);

          if (!a1) {
            goto LABEL_24;
          }
        }
        else if (!a1)
        {
          goto LABEL_52;
        }
        uint64_t v3 = a1;
        if (objc_msgSend(v3, sel_acceptanceStatus) != (id)2
          || (id v19 = objc_msgSend(v3, sel_userIdentity),
              id v4 = objc_msgSend(v19, sel_userRecordID),
              v19,
              !v4))
        {

          goto LABEL_17;
        }
        id v20 = objc_msgSend(v4, sel_recordName);

        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v3 = v3;
        id v4 = v16;
        if (objc_msgSend(v4, sel_acceptanceStatus) == (id)2)
        {
          id v21 = objc_msgSend(v4, sel_userIdentity);
          id v22 = objc_msgSend(v21, sel_userRecordID);

          if (v22)
          {
            id v23 = objc_msgSend(v22, sel_recordName);

            uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            id v22 = v25;
          }
          else
          {
            uint64_t v24 = 0;
          }
        }
        else
        {
          uint64_t v24 = 0;
          id v22 = 0;
        }
        if (objc_msgSend(v3, sel_acceptanceStatus, v38) == (id)2)
        {
          id v26 = objc_msgSend(v3, sel_userIdentity);
          id v27 = objc_msgSend(v26, sel_userRecordID);

          if (v27)
          {
            id v38 = v3;
            uint64_t v28 = v24;
            uint64_t v29 = v5;
            id v30 = objc_msgSend(v27, sel_recordName);

            uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            id v27 = v32;

            uint64_t v5 = v29;
            uint64_t v24 = v28;
            uint64_t v3 = v38;
            if (!v22) {
              goto LABEL_37;
            }
          }
          else
          {
            uint64_t v31 = 0;
            if (!v22)
            {
LABEL_37:

              uint64_t v10 = v39;
              if (!v27) {
                goto LABEL_52;
              }
              swift_bridgeObjectRelease();
              goto LABEL_17;
            }
          }
        }
        else
        {
          uint64_t v31 = 0;
          id v27 = 0;
          if (!v22) {
            goto LABEL_37;
          }
        }
        if (v27)
        {
          if (v24 == v31 && v22 == v27) {
            goto LABEL_51;
          }
          char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v10 = v39;
          if (v33) {
            goto LABEL_52;
          }
        }
        else
        {
          swift_bridgeObjectRelease();

          uint64_t v10 = v39;
        }
LABEL_17:
        a2 = (a2 + 1) & v40;
      }
      while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_48:
  uint64_t v34 = *(void *)v5;
  *(void *)(*(void *)v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v34 + 48) + 8 * a2) = a1;
  uint64_t v35 = *(void *)(v34 + 16);
  BOOL v36 = __OFADD__(v35, 1);
  uint64_t v37 = v35 + 1;
  if (v36)
  {
    __break(1u);
LABEL_51:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_52:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v34 + 16) = v37;
  }
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for AddressableMember();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()(MEMORY[0x263F08F70], &demangling cache variable for type metadata for _SetStorage<AddressableMember>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x263F08F70]);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    id v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    id v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x263F08F70]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ParticipantHandleMap.ParticipantKind>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CKShareParticipant>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v25 - v7;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release();
LABEL_30:
    *uint64_t v4 = v11;
    return result;
  }
  id result = (void *)(v10 + 56);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  BOOL v26 = v4;
  uint64_t v27 = (const void *)(v9 + 56);
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v13) {
    id result = memmove(result, v27, 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 56);
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v22);
    ++v15;
    if (!v23)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v23 = *((void *)v27 + v15);
      if (!v23)
      {
        int64_t v15 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_28;
        }
        unint64_t v23 = *((void *)v27 + v15);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v28)
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_30;
  }
  unint64_t v23 = *((void *)v27 + v24);
  if (v23)
  {
    int64_t v15 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v15);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  int64_t v31;
  int64_t v32;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ParticipantHandleMap.ParticipantKind>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_42:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v30 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v31 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v15 >= v31) {
      goto LABEL_40;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v31) {
        goto LABEL_40;
      }
      int64_t v16 = *(void *)(v6 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v31) {
          goto LABEL_40;
        }
        int64_t v16 = *(void *)(v6 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    int64_t v18 = *(void **)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    if (v18)
    {
      uint64_t v32 = v11;
      unint64_t v19 = v18;
      if (objc_msgSend(v19, sel_acceptanceStatus) == (id)2
        && (uint64_t v20 = objc_msgSend(v19, sel_userIdentity),
            uint64_t v21 = objc_msgSend(v20, sel_userRecordID),
            v20,
            v21))
      {
        uint64_t v22 = objc_msgSend(v21, sel_recordName);

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher._combine(_:)(1u);
        uint64_t v6 = v2 + 56;
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }

      int64_t v11 = v32;
    }
    else
    {
      String.hash(into:)();
    }
    uint64_t result = Hasher._finalize()();
    unint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v24 = result & ~v23;
    char v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      BOOL v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        uint64_t v28 = v25 == v27;
        if (v25 == v27) {
          char v25 = 0;
        }
        v26 |= v28;
        int64_t v29 = *(void *)(v9 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v12 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v31)
  {
LABEL_40:
    uint64_t result = swift_release_n();
    uint64_t v1 = v30;
    goto LABEL_42;
  }
  int64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v31) {
      goto LABEL_40;
    }
    int64_t v16 = *(void *)(v6 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AddressableMember();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    int64_t v11 = ~(-1 << v9);
  }
  else {
    int64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  BOOL v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  id v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      int64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    uint64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    uint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      uint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        uint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    unint64_t v23 = v6;
    unint64_t v24 = *(void *)(v6 + 48);
    char v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x263F08F70]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    BOOL v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          uint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  uint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    uint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CKShareParticipant>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  unint64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      unint64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        unint64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    unint64_t v19 = *(void *)(v4 + 40);
    uint64_t v20 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v24 = 0;
      char v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        BOOL v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    unint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(void *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = specialized Dictionary._Variant.asNative.modify(v6);
  v6[10] = specialized _NativeDictionary.subscript.modify(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

{
  void *v6;
  char isUniquelyReferenced_nonNull_native;

  uint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = specialized Dictionary._Variant.asNative.modify(v6);
  v6[10] = specialized _NativeDictionary.subscript.modify(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

{
  void *v6;
  char isUniquelyReferenced_nonNull_native;

  uint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = specialized Dictionary._Variant.asNative.modify(v6);
  v6[10] = specialized _NativeDictionary.subscript.modify(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 80))();
  swift_bridgeObjectRelease();
  v2(v1, 0);
  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  uint64_t v10 = (char *)malloc(0x58uLL);
  *a1 = v10;
  *((void *)v10 + 7) = a3;
  *((void *)v10 + 8) = v4;
  *((void *)v10 + 6) = a2;
  uint64_t v11 = *v4;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v10[80] = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      *((void *)v10 + 9) = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*v5 + 56) + 48 * v13;
        uint64_t v20 = *(void *)v19;
        long long v21 = *(_OWORD *)(v19 + 8);
        long long v22 = *(_OWORD *)(v19 + 24);
        uint64_t v23 = *(void *)(v19 + 40);
LABEL_12:
        *(void *)uint64_t v10 = v20;
        *(_OWORD *)(v10 + 8) = v21;
        *(_OWORD *)(v10 + 24) = v22;
        *((void *)v10 + 5) = v23;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      uint64_t v20 = 0;
      uint64_t v23 = 0;
      long long v21 = 0uLL;
      long long v22 = 0uLL;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v17 & 1) == (v25 & 1))
    {
      unint64_t v13 = v24;
      *((void *)v10 + 9) = v24;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  void *v4;
  void *v5;
  void *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **);

  uint64_t v5 = v4;
  uint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  void v10[2] = a3;
  v10[3] = v4;
  v10[1] = a2;
  uint64_t v11 = *v4;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  *((unsigned char *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *uint64_t v10 = v19;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      uint64_t v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
    uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      unint64_t v13 = v20;
      v10[4] = v20;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t **a1)
{
  uint64_t v1 = *a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *((unsigned char *)*a1 + 80), (uint64_t *)(*a1)[8], (*a1)[9], (*a1)[6], (*a1)[7]);
  outlined consume of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(*v1, (void *)v1[1]);
  free(v1);
}

{
  uint64_t *v1;
  uint64_t vars8;

  uint64_t v1 = *a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *((unsigned char *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease();
  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t *a1)
{
  uint64_t v5 = v4;
  uint64_t v10 = malloc(0x38uLL);
  *a1 = v10;
  v10[3] = a3;
  v10[4] = v4;
  void v10[2] = a2;
  uint64_t v11 = *v4;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  *((unsigned char *)v10 + 48) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[5] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = (uint64_t *)(*(void *)(*v5 + 56) + 16 * v13);
        uint64_t v20 = *v19;
        uint64_t v21 = v19[1];
LABEL_12:
        *uint64_t v10 = v20;
        v10[1] = v21;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v17 & 1) == (v23 & 1))
    {
      unint64_t v13 = v22;
      v10[5] = v22;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t *))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t *a1)
{
  uint64_t v1 = (id *)*a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *(unsigned char *)(*a1 + 48), *(uint64_t **)(*a1 + 32), *(void *)(*a1 + 40), *(void *)(*a1 + 16), *(void *)(*a1 + 24));

  free(v1);
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(void *a1))()
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *a1;
  unint64_t v8 = (void *)a1[1];
  uint64_t v10 = a1[2];
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  uint64_t v13 = a1[5];
  if (v8)
  {
    *(void *)&long long v17 = *a1;
    *((void *)&v17 + 1) = v8;
    *(void *)&long long v18 = v10;
    *((void *)&v18 + 1) = v11;
    *(void *)&long long v19 = v12;
    *((void *)&v19 + 1) = v13;
    if (a2)
    {
      uint64_t v14 = (_OWORD *)(*(void *)(*a3 + 56) + 48 * a4);
      long long v15 = v18;
      *uint64_t v14 = v17;
      v14[1] = v15;
      void v14[2] = v19;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(a4, a5, a6, &v17, (void *)*a3);
      swift_bridgeObjectRetain();
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return outlined copy of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v9, v8);
}

{
  uint64_t v8;
  uint64_t vars8;

  unint64_t v8 = *a1;
  if (*a1)
  {
    if (a2)
    {
      *(void *)(*(void *)(*a3 + 56) + 8 * a4) = v8;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(a4, a5, a6, v8, (void *)*a3);
      swift_bridgeObjectRetain();
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  long long v18;
  long long v19;
  long long v20;
  uint64_t v21;
  uint64_t vars8;

  unint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  uint64_t v13 = a1[5];
  uint64_t v14 = a1[6];
  if (v14)
  {
    *(void *)&long long v18 = *a1;
    *((void *)&v18 + 1) = v9;
    *(void *)&long long v19 = v10;
    *((void *)&v19 + 1) = v11;
    *(void *)&uint64_t v20 = v12;
    *((void *)&v20 + 1) = v13;
    uint64_t v21 = v14;
    if (a2)
    {
      long long v15 = *(void *)(*a3 + 56) + 56 * a4;
      uint64_t v16 = v19;
      *(_OWORD *)long long v15 = v18;
      *(_OWORD *)(v15 + 16) = v16;
      *(_OWORD *)(v15 + 32) = v20;
      *(void *)(v15 + 48) = v21;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(a4, a5, a6, (uint64_t)&v18, (void *)*a3);
      swift_bridgeObjectRetain();
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return outlined copy of PresenceUpdateMessage?(v8, v9, v10, v11, v12, v13, v14);
}

id specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8 = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = (void *)*a3;
    if (a2)
    {
      uint64_t v12 = (void *)(v11[7] + 16 * a4);
      void *v12 = v8;
      v12[1] = v10;
      goto LABEL_8;
    }
    uint64_t v14 = *(void **)a1;
    specialized _NativeDictionary._insert(at:key:value:)(a4, a5, a6, (uint64_t)v8, v10, v11);
    swift_bridgeObjectRetain();
  }
  else
  {
    if ((a2 & 1) == 0) {
      goto LABEL_8;
    }
    uint64_t v14 = 0;
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  unint64_t v8 = v14;
LABEL_8:
  return v8;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          long long v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *uint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          long long v17 = (long long *)(v16 + 48 * v3);
          long long v18 = (long long *)(v16 + 48 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 3))
          {
            long long v9 = *v18;
            long long v10 = v18[2];
            v17[1] = v18[1];
            v17[2] = v10;
            *long long v17 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    long long v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    long long v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *long long v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        long long v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          Swift::Int v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            void *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          long long v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *long long v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    long long v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    long long v18 = *v17;
    long long v19 = (-1 << v3) - 1;
  }
  else
  {
    long long v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    long long v19 = *v17;
    long long v18 = (-1 << result) - 1;
  }
  *long long v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        long long v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          Swift::Int v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            void *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          long long v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *long long v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    long long v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    long long v18 = *v17;
    long long v19 = (-1 << v3) - 1;
  }
  else
  {
    long long v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    long long v19 = *v17;
    long long v18 = (-1 << result) - 1;
  }
  *long long v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  long long v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  unint64_t v18;
  long long *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        unint64_t v12 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          long long v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *long long v15 = *v16;
          }
          long long v17 = *(void *)(a2 + 56);
          long long v18 = v17 + 56 * v3;
          long long v19 = (long long *)(v17 + 56 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= (unint64_t)v19 + 56))
          {
            long long v9 = *v19;
            long long v10 = v19[1];
            Swift::Int v11 = v19[2];
            *(void *)(v18 + 48) = *((void *)v19 + 6);
            *(_OWORD *)(v18 + 16) = v10;
            *(_OWORD *)(v18 + 32) = v11;
            *(_OWORD *)long long v18 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  BOOL v23 = *(void *)(a2 + 16);
  uint64_t v24 = __OFSUB__(v23, 1);
  char v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  uint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v4;
    uint64_t v20 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v12 = v20;
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(v12 + 56) + 48 * v8;
    uint64_t v14 = *(void *)v13;
    long long v18 = *(_OWORD *)(v13 + 24);
    long long v19 = *(_OWORD *)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 40);
    specialized _NativeDictionary._delete(at:)(v8, v12);
    *uint64_t v4 = v12;
    uint64_t result = swift_bridgeObjectRelease();
    long long v17 = v18;
    long long v16 = v19;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
  }
  *(void *)a3 = v14;
  *(_OWORD *)(a3 + 8) = v16;
  *(_OWORD *)(a3 + 24) = v17;
  *(void *)(a3 + 40) = v15;
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  int64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *int64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *int64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  int64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *int64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *int64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  int64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *int64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *int64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Participant();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x263F08F20]);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    unint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    long long v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x263F08F20]);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *uint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()(MEMORY[0x263F08F20], &demangling cache variable for type metadata for _SetStorage<Participant>);
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    specialized _NativeSet._delete(at:)(v12);
    *uint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t specialized Set._Variant.remove(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v5 = a1;
    char v6 = __CocoaSet.contains(_:)();

    if (v6)
    {
      uint64_t v7 = specialized Set._Variant._migrateToNative(_:removing:)();
      swift_bridgeObjectRelease();
      return v7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  Swift::Int v8 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v9 = NSObject._rawHashValue(seed:)(v8);
  uint64_t v10 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    goto LABEL_12;
  }
  type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
  id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
  char v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    uint64_t v14 = ~v10;
    do
    {
      unint64_t v11 = (v11 + 1) & v14;
      if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        goto LABEL_12;
      }
      id v15 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
      char v16 = static NSObject.== infix(_:_:)();
    }
    while ((v16 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *v2;
  uint64_t v20 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v18 = v20;
  }
  uint64_t v7 = *(void *)(*(void *)(v18 + 48) + 8 * v11);
  specialized _NativeSet._delete(at:)(v11);
  *uint64_t v2 = v20;
  swift_bridgeObjectRelease();
  return v7;
}

{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _UNKNOWN **v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  _UNKNOWN **v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;

  int64_t v3 = *v1;
  Hasher.init(_seed:)();
  if (a1)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = a1;
    CKShareParticipant.participantIdentifier.getter();
    if (v5)
    {
      Hasher._combine(_:)(1u);
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
  }
  char v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v3 + 32);
  Swift::Int v8 = v6 & ~v7;
  if (((*(void *)(v3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    return 1;
  }
  Swift::Int v9 = ~v7;
  uint64_t v10 = &off_265585000;
  uint64_t v40 = a1;
  id v38 = v1;
  uint64_t v39 = ~v7;
  while (1)
  {
    unint64_t v11 = *(void **)(*(void *)(v3 + 48) + 8 * v8);
    if (v11)
    {
      id v12 = v11;
      if ([v12 (SEL)v10[169]] != (id)2
        || (char v13 = objc_msgSend(v12, sel_userIdentity),
            uint64_t v14 = objc_msgSend(v13, sel_userRecordID),
            v13,
            !v14))
      {

LABEL_17:
        goto LABEL_10;
      }
      id v15 = objc_msgSend(v14, sel_recordName);

      if (!a1) {
        goto LABEL_17;
      }
    }
    else if (!a1)
    {
      goto LABEL_43;
    }
    char v16 = a1;
    if ([v16 (SEL)v10[169]] != (id)2
      || (uint64_t v17 = objc_msgSend(v16, sel_userIdentity),
          uint64_t v18 = objc_msgSend(v17, sel_userRecordID),
          v17,
          !v18))
    {

      goto LABEL_10;
    }
    char v19 = objc_msgSend(v18, sel_recordName);

    if (!v11) {
      goto LABEL_10;
    }
    uint64_t v20 = v16;
    uint64_t v21 = v11;
    if ([v21 (SEL)v10[169]] == (id)2)
    {
      uint64_t v22 = objc_msgSend(v21, sel_userIdentity);
      uint64_t v23 = objc_msgSend(v22, sel_userRecordID);

      if (v23)
      {
        uint64_t v24 = v10;
        uint64_t v25 = objc_msgSend(v23, sel_recordName);

        unint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v23 = v27;

        uint64_t v10 = v24;
      }
      else
      {
        unint64_t v26 = 0;
      }
    }
    else
    {
      unint64_t v26 = 0;
      uint64_t v23 = 0;
    }
    if (objc_msgSend(v20, (SEL)v10[169], v38) != (id)2)
    {
      uint64_t v31 = 0;
      uint64_t v29 = 0;
      if (!v23) {
        break;
      }
      goto LABEL_33;
    }
    uint64_t v28 = objc_msgSend(v20, sel_userIdentity);
    uint64_t v29 = objc_msgSend(v28, sel_userRecordID);

    if (v29)
    {
      uint64_t v30 = objc_msgSend(v29, sel_recordName);

      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = v32;

      if (!v23) {
        break;
      }
      goto LABEL_33;
    }
    uint64_t v31 = 0;
    if (!v23) {
      break;
    }
LABEL_33:
    if (v29)
    {
      if (v26 == v31 && v23 == v29)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

LABEL_43:
        swift_bridgeObjectRelease();
        goto LABEL_44;
      }
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      Swift::Int v9 = v39;
      a1 = v40;
      uint64_t v10 = &off_265585000;
      if (v33) {
        goto LABEL_43;
      }
    }
    else
    {
      swift_bridgeObjectRelease();

      Swift::Int v9 = v39;
      a1 = v40;
      uint64_t v10 = &off_265585000;
    }
LABEL_10:
    Swift::Int v8 = (v8 + 1) & v9;
    if (((*(void *)(v3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
      goto LABEL_41;
    }
  }

  Swift::Int v9 = v39;
  a1 = v40;
  if (v29)
  {

    swift_bridgeObjectRelease();
    uint64_t v10 = &off_265585000;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();

LABEL_44:
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  BOOL v36 = *v38;
  char v41 = *v38;
  *id v38 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _NativeSet.copy()();
    BOOL v36 = v41;
  }
  uint64_t v34 = *(void *)(*(void *)(v36 + 48) + 8 * v8);
  specialized _NativeSet._delete(at:)(v8);
  *id v38 = v41;
  swift_bridgeObjectRelease();
  return v34;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t v2 = __CocoaSet.count.getter();
  uint64_t v3 = swift_unknownObjectRetain();
  Swift::Int v4 = specialized _NativeSet.init(_:capacity:)(v3, v2);
  Swift::Int v16 = v4;
  Swift::Int v5 = *(void *)(v4 + 40);
  swift_retain();
  Swift::Int v6 = NSObject._rawHashValue(seed:)(v5);
  uint64_t v7 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v8 = v6 & ~v7;
  if ((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
    id v9 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
    char v10 = static NSObject.== infix(_:_:)();

    if (v10)
    {
LABEL_6:
      swift_release();
      uint64_t v14 = *(void *)(*(void *)(v4 + 48) + 8 * v8);
      specialized _NativeSet._delete(at:)(v8);
      if (static NSObject.== infix(_:_:)())
      {
        Swift::Int *v1 = v16;
        return v14;
      }
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v7;
      while (1)
      {
        unint64_t v8 = (v8 + 1) & v11;
        if (((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          break;
        }
        id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
        char v13 = static NSObject.== infix(_:_:)();

        if (v13) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet._delete(at:)(int64_t a1)
{
  uint64_t v3 = type metadata accessor for Participant();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  Swift::Int v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v31 = v1;
    uint64_t v11 = ~v9;
    uint64_t v35 = result;
    swift_retain();
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v33 = (v12 + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
      uint64_t v13 = v4 + 16;
      uint64_t v32 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v34 = v13;
      Swift::Int v16 = (void (**)(char *, uint64_t))(v13 - 8);
      uint64_t v17 = v35;
      do
      {
        uint64_t v18 = v8;
        uint64_t v19 = v15;
        int64_t v20 = v15 * v10;
        v32(v6, *(void *)(v17 + 48) + v15 * v10, v3);
        lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x263F08F20]);
        uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v16)(v6, v3);
        unint64_t v22 = v21 & v11;
        if (a1 >= (uint64_t)v33)
        {
          if (v22 < v33 || a1 < (uint64_t)v22)
          {
LABEL_4:
            uint64_t v8 = v18;
            uint64_t v15 = v19;
            uint64_t v17 = v35;
            goto LABEL_5;
          }
        }
        else if (v22 < v33 && a1 < (uint64_t)v22)
        {
          goto LABEL_4;
        }
        uint64_t v17 = v35;
        int64_t v25 = v19 * a1;
        uint64_t v8 = v18;
        if (v19 * a1 < v20
          || (uint64_t v15 = v19, *(void *)(v35 + 48) + v19 * a1 >= (unint64_t)(*(void *)(v35 + 48) + v20 + v19)))
        {
          swift_arrayInitWithTakeFrontToBack();
          goto LABEL_21;
        }
        a1 = v10;
        if (v25 != v20)
        {
          swift_arrayInitWithTakeBackToFront();
LABEL_21:
          uint64_t v17 = v35;
          uint64_t v15 = v19;
          a1 = v10;
        }
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v31;
  }
  else
  {
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v26 = *v1;
  uint64_t v27 = *(void *)(*v1 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v26 + 16) = v29;
    ++*(_DWORD *)(v26 + 36);
  }
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(v3 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v2);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              *uint64_t v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _UNKNOWN **v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  Swift::Int v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;

  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      Swift::Int v10 = &off_265585000;
      uint64_t v24 = v9;
      do
      {
        id v11 = *(void **)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        if (v11)
        {
          Swift::Int v12 = v11;
          if ([v12 (SEL)v10[169]] == (id)2
            && (Swift::Int v13 = objc_msgSend(v12, sel_userIdentity),
                uint64_t v14 = objc_msgSend(v13, sel_userRecordID),
                v13,
                v14))
          {
            uint64_t v15 = objc_msgSend(v14, sel_recordName);

            static String._unconditionallyBridgeFromObjectiveC(_:)();
            Hasher._combine(_:)(1u);
            unint64_t v9 = v24;
            String.hash(into:)();
            Swift::Int v10 = &off_265585000;
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
        }
        else
        {
          String.hash(into:)();
          Swift::Int v12 = 0;
        }
        uint64_t v16 = Hasher._finalize()();

        uint64_t v17 = v16 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v17 < v9) {
            goto LABEL_5;
          }
        }
        else if (v17 >= v9)
        {
          goto LABEL_17;
        }
        if (v2 >= (uint64_t)v17)
        {
LABEL_17:
          uint64_t v18 = *(void *)(v3 + 48);
          uint64_t v19 = (void *)(v18 + 8 * v2);
          BOOL v20 = (void *)(v18 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v19 >= v20 + 1))
          {
            *uint64_t v19 = *v20;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v21 = *(void *)(v3 + 16);
  unint64_t v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v23;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<(), Never>);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, ParticipantHandleMap.ParticipantKind));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CKShareParticipant));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type CKShareParticipant and conformance NSObject;
  if (!lazy protocol witness table cache variable for type CKShareParticipant and conformance NSObject)
  {
    type metadata accessor for CKShareParticipant(255, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKShareParticipant and conformance NSObject);
  }
  return result;
}

uint64_t outlined consume of PresenceUpdateMessage?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7)
  {
    outlined consume of PresenceUpdateMessage.Kind(result, a2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of PresenceUpdateMessage?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7)
  {
    outlined copy of PresenceUpdateMessage.Kind(result, a2);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t type metadata accessor for CKShareParticipant(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t outlined init with take of PresenceUpdateMessage.Kind(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t lazy protocol witness table accessor for type Participant and conformance Participant(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined copy of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v2 = a2;
    swift_retain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *CKShareGroupSessionProvider.__allocating_init(id:activity:share:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  swift_allocObject();
  Swift::Int v10 = specialized CKShareGroupSessionProvider.init(id:activity:share:)(a1, a2, a3, a4);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v5 + 80) - 8) + 8))(a3);
  return v10;
}

uint64_t CKShareGroupSessionProvider.id.getter()
{
  uint64_t v0 = specialized CKShareGroupSessionProvider.id.getter();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CKShareGroupSessionProvider.id.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*CKShareGroupSessionProvider.id.modify())()
{
  return ParticipantPresenceCoordinator.ConnectionManagerStore.tabGroupIdentifiersToSharedConnections.modify;
}

uint64_t CKShareGroupSessionProvider.state.getter()
{
  specialized CKShareGroupSessionProvider.state.getter();
  return swift_retain();
}

uint64_t CKShareGroupSessionProvider.state.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t (*CKShareGroupSessionProvider.state.modify())()
{
  return ParticipantPresenceCoordinator.ConnectionManagerStore.tabGroupIdentifiersToSharedConnections.modify;
}

uint64_t CKShareGroupSessionProvider.presenceInfo.getter()
{
  specialized CKShareGroupSessionProvider.presenceInfo.getter();
  return swift_retain();
}

uint64_t CKShareGroupSessionProvider.presenceInfo.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 40) = a1;
  return swift_release();
}

uint64_t (*CKShareGroupSessionProvider.presenceInfo.modify())()
{
  return ParticipantPresenceCoordinator.ConnectionManagerStore.pausedSharedConnections.modify;
}

uint64_t CKShareGroupSessionProvider.members.getter()
{
  specialized CKShareGroupSessionProvider.members.getter();
  return swift_retain();
}

uint64_t CKShareGroupSessionProvider.members.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 48) = a1;
  return swift_release();
}

uint64_t (*CKShareGroupSessionProvider.members.modify())()
{
  return ParticipantPresenceCoordinator.ConnectionManagerStore.tabGroupIdentifiersToSharedConnections.modify;
}

uint64_t CKShareGroupSessionProvider.activity.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 128));
}

uint64_t CKShareGroupSessionProvider.localMember.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Member?(v1 + *(void *)(*(void *)v1 + 136), a1);
}

uint64_t CKShareGroupSessionProvider.share.didset()
{
  swift_beginAccess();
  uint64_t v1 = (void **)(v0 + *(void *)(*(void *)v0 + 144));
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_retain();
  id v3 = v2;
  CKShare.members.getter();

  CurrentValueSubject.send(_:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t CKShare.members.getter()
{
  uint64_t v1 = type metadata accessor for AddressableMember();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v43 = v1;
  uint64_t v44 = v2;
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = objc_msgSend(v0, sel_participants);
  type metadata accessor for CKShareParticipant();
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v7 = MEMORY[0x263F8EE78];
  uint64_t v45 = MEMORY[0x263F8EE78];
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v8 = result;
    uint64_t v42 = v4;
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v42 = v4;
    if (v8)
    {
LABEL_3:
      if (v8 >= 1)
      {
        uint64_t v10 = 0;
        while (1)
        {
          if ((v6 & 0xC000000000000001) != 0) {
            id v11 = (id)MEMORY[0x263E3F5A0](v10, v6);
          }
          else {
            id v11 = *(id *)(v6 + 8 * v10 + 32);
          }
          Swift::Int v12 = v11;
          if (objc_msgSend(v11, sel_acceptanceStatus, v42) == (id)2
            && (id v13 = objc_msgSend(v12, sel_userIdentity),
                id v14 = objc_msgSend(v13, sel_lookupInfo),
                v13,
                v14))
          {
            id v15 = objc_msgSend(v14, sel_emailAddress);
            if (v15)
            {
              uint64_t v16 = v15;
              uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v19 = v18;

              BOOL v20 = self;
              uint64_t v21 = (void *)MEMORY[0x263E3F170](v17, v19);
              swift_bridgeObjectRelease();
              id v22 = objc_msgSend(v20, sel_normalizedEmailAddressHandleForValue_, v21);

              if (v22) {
                goto LABEL_17;
              }
            }
            else
            {
              id v23 = objc_msgSend(v14, sel_phoneNumber);
              if (v23)
              {
                uint64_t v24 = v23;
                uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v27 = v26;

                BOOL v28 = self;
                uint64_t v29 = (void *)MEMORY[0x263E3F170](v25, v27);
                swift_bridgeObjectRelease();
                id v30 = objc_msgSend(v28, sel_normalizedPhoneNumberHandleForValue_isoCountryCode_, v29, 0);

                if (v30)
                {
LABEL_17:
                  MEMORY[0x263E3F1C0]();
                  if (*(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  }
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();
                }
              }
              else
              {
              }
            }
          }
          else
          {
          }
          if (v8 == ++v10)
          {
            swift_bridgeObjectRelease();
            unint64_t v31 = v45;
            uint64_t v7 = MEMORY[0x263F8EE78];
            goto LABEL_24;
          }
        }
      }
      __break(1u);
      goto LABEL_41;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v31 = MEMORY[0x263F8EE78];
LABEL_24:
  swift_bridgeObjectRelease();
  if (!(v31 >> 62))
  {
    uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v32) {
      goto LABEL_26;
    }
LABEL_38:
    swift_bridgeObjectRelease();
    uint64_t v34 = MEMORY[0x263F8EE78];
LABEL_39:
    uint64_t v41 = specialized Set.init<A>(_:)(v34);
    swift_bridgeObjectRelease();
    return v41;
  }
  swift_bridgeObjectRetain();
  uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v32) {
    goto LABEL_38;
  }
LABEL_26:
  uint64_t v45 = v7;
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32 & ~(v32 >> 63), 0);
  if ((v32 & 0x8000000000000000) == 0)
  {
    uint64_t v33 = 0;
    uint64_t v34 = v45;
    do
    {
      if ((v31 & 0xC000000000000001) != 0) {
        id v35 = (id)MEMORY[0x263E3F5A0](v33, v31);
      }
      else {
        id v35 = *(id *)(v31 + 8 * v33 + 32);
      }
      BOOL v36 = v35;
      id v37 = objc_msgSend(v35, sel_normalizedValue, v42);
      if (!v37) {
        id v37 = objc_msgSend(v36, sel_value);
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v38 = v42;
      AddressableMember.init(handle:)();

      uint64_t v45 = v34;
      unint64_t v40 = *(void *)(v34 + 16);
      unint64_t v39 = *(void *)(v34 + 24);
      if (v40 >= v39 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
        uint64_t v34 = v45;
      }
      ++v33;
      *(void *)(v34 + 16) = v40 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v44 + 32))(v34+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(void *)(v44 + 72) * v40, v38, v43);
    }
    while (v32 != v33);
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
LABEL_41:
  __break(1u);
  return result;
}

id CKShareGroupSessionProvider.share.getter()
{
  uint64_t v0 = (void *)specialized CKShareGroupSessionProvider.share.getter();
  return v0;
}

void CKShareGroupSessionProvider.share.setter(void *a1)
{
  specialized CKShareGroupSessionProvider.share.setter(a1);
}

uint64_t (*CKShareGroupSessionProvider.share.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return CKShareGroupSessionProvider.share.modify;
}

uint64_t CKShareGroupSessionProvider.share.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return CKShareGroupSessionProvider.share.didset();
  }
  return result;
}

void *CKShareGroupSessionProvider.init(id:activity:share:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *v4;
  uint64_t v7 = specialized CKShareGroupSessionProvider.init(id:activity:share:)(a1, a2, a3, a4);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v6 + 80) - 8) + 8))(a3);
  return v7;
}

id CKShareParticipant.handle.getter()
{
  id v1 = objc_msgSend(v0, sel_userIdentity);
  id v2 = objc_msgSend(v1, sel_lookupInfo);

  if (!v2) {
    return 0;
  }
  id v3 = objc_msgSend(v2, sel_emailAddress);
  if (!v3)
  {
    id v6 = objc_msgSend(v2, sel_phoneNumber);
    if (v6)
    {
      uint64_t v4 = v6;
      id v5 = objc_msgSend(self, sel_normalizedPhoneNumberHandleForValue_isoCountryCode_, v6, 0);
      goto LABEL_6;
    }

    return 0;
  }
  uint64_t v4 = v3;
  id v5 = objc_msgSend(self, sel_normalizedEmailAddressHandleForValue_, v3);
LABEL_6:
  id v7 = v5;

  return v7;
}

uint64_t *CKShareGroupSessionProvider.deinit()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 128));
  outlined destroy of Member?((uint64_t)v0 + *(void *)(*v0 + 136));

  return v0;
}

uint64_t CKShareGroupSessionProvider.__deallocating_deinit()
{
  CKShareGroupSessionProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static GroupSessionProvider.providerIdentifier.getter in conformance CKShareGroupSessionProvider<A1>()
{
  return MEMORY[0x270EF2E50]();
}

uint64_t protocol witness for GroupSessionProvider.isCrossAccount.getter in conformance CKShareGroupSessionProvider<A1>()
{
  return MEMORY[0x270EF2E48]();
}

uint64_t protocol witness for Identifiable.id.getter in conformance CKShareGroupSessionProvider<A>@<X0>(uint64_t *a1@<X8>)
{
  *a1 = specialized CKShareGroupSessionProvider.id.getter();
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *id v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *id v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *id v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>>, &demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
  *id v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>>, &demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
  *id v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[(String, ParticipantHandleMap.ParticipantKind)]>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(String, ParticipantHandleMap.ParticipantKind)]);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, ParticipantHandleMap.ParticipantKind)>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, ParticipantHandleMap.ParticipantKind));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AddressableMember>);
  uint64_t v10 = *(void *)(type metadata accessor for AddressableMember() - 8);
  int64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  unint64_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for AddressableMember() - 8);
  uint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  BOOL v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  id v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_34;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    unint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 < a4 || v16 >= v17 + 8 * v11)
    {
      __swift_instantiateConcreteTypeFromMangledName(a6);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      __swift_instantiateConcreteTypeFromMangledName(a6);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_34:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type ParticipantHandleMap.ParticipantKind and conformance ParticipantHandleMap.ParticipantKind();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      id v5 = *v4++;
      id v6 = v5;
      specialized Set._Variant.insert(_:)(&v7, v5);

      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v2 = type metadata accessor for AddressableMember();
  id v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  id v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  unint64_t v9 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x263F08F70]);
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v17 = result;
  if (v9)
  {
    unint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v12 = v13;
    int64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v6, v14, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CKShareParticipant();
  lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember((unint64_t *)&lazy protocol witness table cache variable for type CKShareParticipant and conformance NSObject, (void (*)(uint64_t))type metadata accessor for CKShareParticipant);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        id v6 = (void *)MEMORY[0x263E3F5A0](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);
      }
    }
    else
    {
      id v7 = (void **)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

void *specialized CKShareGroupSessionProvider.init(id:activity:share:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = v4;
  uint64_t v46 = *v4;
  uint64_t v10 = v46;
  uint64_t v11 = type metadata accessor for PresenceSessionInfo();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v12 = type metadata accessor for GroupSessionProviderState();
  MEMORY[0x270FA5388](v12);
  (*(void (**)(char *, void))(v14 + 104))((char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F08EB8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<GroupSessionProviderState, Never>);
  swift_allocObject();
  v4[4] = CurrentValueSubject.init(_:)();
  static PresenceSessionInfo.default.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PresenceSessionInfo, Never>);
  swift_allocObject();
  v4[5] = CurrentValueSubject.init(_:)();
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v15 = (char *)v5 + *(void *)(*v5 + 128);
  uint64_t v16 = *(void *)(v10 + 80);
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v15, a3, v16);
  *(void *)((char *)v4 + *(void *)(*v4 + 144)) = a4;
  id v18 = a4;
  v47[0] = CKShare.members.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
  swift_allocObject();
  v4[6] = CurrentValueSubject.init(_:)();
  id v19 = objc_msgSend(v18, sel_currentUserParticipant);
  if (v19 && (BOOL v20 = v19, v21 = CKShareParticipant.handle.getter(), v20, v21))
  {
    id v22 = objc_msgSend(v21, sel_normalizedValue);
    if (!v22) {
      id v22 = objc_msgSend(v21, sel_value);
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v47[3] = type metadata accessor for AddressableMember();
    v47[4] = lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x263F08F70]);
    __swift_allocate_boxed_opaque_existential_1(v47);
    AddressableMember.init(handle:)();

    outlined init with take of Member?((uint64_t)v47, (uint64_t)v5 + *(void *)(*v5 + 136));
  }
  else
  {
    if (one-time initialization token for tabGroup != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.tabGroup);
    id v24 = v18;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    int v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v28 = swift_slowAlloc();
      int v43 = v27;
      uint64_t v29 = (uint8_t *)v28;
      uint64_t v44 = swift_slowAlloc();
      v47[0] = v44;
      uint64_t v42 = v29;
      *(_DWORD *)uint64_t v29 = 136315138;
      v41[1] = v29 + 4;
      id v30 = objc_msgSend(v24, sel_recordID);
      uint64_t v45 = v15;
      id v31 = v30;
      uint64_t v32 = v17;
      id v33 = objc_msgSend(v30, sel_ckShortDescription);

      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v36 = v35;

      uint64_t v17 = v32;
      uint64_t v37 = v34;
      uint64_t v15 = v45;
      v47[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v36, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      id v38 = v42;
      _os_log_impl(&dword_261746000, v25, (os_log_type_t)v43, "Share %s does not have a currentUserParticipant", v42, 0xCu);
      uint64_t v39 = v44;
      swift_arrayDestroy();
      MEMORY[0x263E3FE70](v39, -1, -1);
      MEMORY[0x263E3FE70](v38, -1, -1);
    }
    else
    {
    }
    type metadata accessor for CKShareGroupSessionProvider.Errors();
    swift_getWitnessTable();
    swift_allocError();
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);

    type metadata accessor for CKShareGroupSessionProvider();
    swift_deallocPartialClassInstance();
  }
  return v5;
}

uint64_t specialized CKShareGroupSessionProvider.id.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t specialized CKShareGroupSessionProvider.state.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 32);
}

uint64_t specialized CKShareGroupSessionProvider.presenceInfo.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 40);
}

uint64_t specialized CKShareGroupSessionProvider.members.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 48);
}

uint64_t outlined init with copy of Member?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized CKShareGroupSessionProvider.share.getter()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 144);
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t specialized CKShareGroupSessionProvider.share.setter(void *a1)
{
  id v3 = (void **)(v1 + *(void *)(*(void *)v1 + 144));
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
  id v5 = a1;

  return CKShareGroupSessionProvider.share.didset();
}

uint64_t outlined destroy of Member?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t base witness table accessor for Identifiable in CKShareGroupSessionProvider<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for GroupSessionProvider.ActivityType : IdentifiableGroupActivity in CKShareGroupSessionProvider<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 88);
}

uint64_t base witness table accessor for GroupSessionProvider in CKShareGroupSessionProvider<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_261791EC0@<X0>(uint64_t *a1@<X8>)
{
  *a1 = specialized CKShareGroupSessionProvider.id.getter();
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_261791F00(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return CKShareGroupSessionProvider.id.setter(v1, v2);
}

uint64_t sub_261791F40()
{
  return 16;
}

__n128 sub_261791F4C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_261791F58@<X0>(void *a1@<X8>)
{
  return keypath_get_1Tm(specialized CKShareGroupSessionProvider.state.getter, a1);
}

uint64_t sub_261791F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_2Tm(a1, a2, a3, a4, CKShareGroupSessionProvider.state.setter);
}

uint64_t sub_261791F88()
{
  return 16;
}

__n128 sub_261791F94(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_261791FA0@<X0>(void *a1@<X8>)
{
  return keypath_get_1Tm(specialized CKShareGroupSessionProvider.presenceInfo.getter, a1);
}

uint64_t sub_261791FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_2Tm(a1, a2, a3, a4, CKShareGroupSessionProvider.presenceInfo.setter);
}

uint64_t sub_261791FD0()
{
  return 16;
}

__n128 sub_261791FDC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_261791FE8@<X0>(void *a1@<X8>)
{
  return keypath_get_1Tm(specialized CKShareGroupSessionProvider.members.getter, a1);
}

uint64_t keypath_get_1Tm@<X0>(uint64_t (*a1)(void)@<X3>, void *a2@<X8>)
{
  *a2 = a1();
  return swift_retain();
}

uint64_t sub_261792040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_2Tm(a1, a2, a3, a4, CKShareGroupSessionProvider.members.setter);
}

uint64_t keypath_set_2Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = swift_retain();
  return a5(v6);
}

uint64_t sub_26179208C()
{
  return 16;
}

__n128 sub_261792098(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

id sub_2617920A4@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (void *)specialized CKShareGroupSessionProvider.share.getter();
  *a1 = v2;
  return v2;
}

void sub_2617920E0(id *a1)
{
  id v1 = *a1;
  specialized CKShareGroupSessionProvider.share.setter(v1);
}

uint64_t sub_26179212C()
{
  return 16;
}

__n128 sub_261792138(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for CKShareGroupSessionProvider()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for CKShareGroupSessionProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for CKShareGroupSessionProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CKShareGroupSessionProvider);
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.id.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.id.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.id.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.state.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.state.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.presenceInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.presenceInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.presenceInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.members.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.members.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.members.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.share.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.share.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.share.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.__allocating_init(id:activity:share:)()
{
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t type metadata accessor for CKShareGroupSessionProvider.Errors()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with take of Member?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata instantiation function for CKShareGroupSessionProvider.Errors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

unsigned char *storeEnumTagSinglePayload for CKShareGroupSessionProvider.Errors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x261792650);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in CKShareGroupSessionProvider<A>.Errors()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for PersonalDeviceCoordinationActivity()
{
  return &type metadata for PersonalDeviceCoordinationActivity;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PersonalDeviceCoordinationActivity.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PersonalDeviceCoordinationActivity.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PersonalDeviceCoordinationActivity@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PersonalDeviceCoordinationActivity.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PersonalDeviceCoordinationActivity(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PersonalDeviceCoordinationActivity.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for static GroupActivity.activityIdentifier.getter in conformance PersonalDeviceCoordinationActivity()
{
  return MEMORY[0x270EF2FE8]();
}

unint64_t lazy protocol witness table accessor for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity;
  if (!lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity;
  if (!lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity;
  if (!lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity;
  if (!lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PersonalDeviceCoordinationActivity.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x261792C20);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for PersonalDeviceCoordinationActivity.CodingKeys()
{
  return &unk_270D80010;
}

uint64_t destroy for PresenceUpdateMessage(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PresenceUpdateMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PresenceUpdateMessage(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of (tabGroupIdentifier: String, tabIdentifier: String)((uint64_t)a1);
      long long v5 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v5;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    a1[3] = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v6;
  }
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of (tabGroupIdentifier: String, tabIdentifier: String)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tabGroupIdentifier: String, tabIdentifier: String));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PresenceUpdateMessage(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    outlined destroy of (tabGroupIdentifier: String, tabIdentifier: String)(a1);
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PresenceUpdateMessage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresenceUpdateMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresenceUpdateMessage()
{
  return &type metadata for PresenceUpdateMessage;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  unint64_t v3 = 0xE100000000000000;
  uint64_t v4 = 107;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v4 = 6907764;
      break;
    case 2:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 26484;
      break;
    case 3:
      uint64_t v4 = 103;
      break;
    case 4:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 26980;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE100000000000000;
  uint64_t v6 = 107;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE300000000000000;
      if (v4 == 6907764) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v5 = 0xE200000000000000;
      if (v4 != 26484) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      uint64_t v6 = 103;
      goto LABEL_12;
    case 4:
      unint64_t v5 = 0xE200000000000000;
      if (v4 != 26980) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v4 != v6) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance CRDTGeneration(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return *a1 < *a2;
  }
  if (a1[1] == a2[1] && a1[2] == a2[2]) {
    return 0;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance CRDTGeneration(void *a1, void *a2)
{
  if (*a2 == *a1)
  {
    uint64_t v2 = a1[1];
    uint64_t v3 = a1[2];
    uint64_t v4 = a2[1];
    uint64_t v5 = a2[2];
    if (v4 == v2 && v5 == v3) {
      char v7 = 0;
    }
    else {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  else
  {
    char v7 = *a2 < *a1;
  }
  return (v7 & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance CRDTGeneration(void *a1, void *a2)
{
  if (*a1 == *a2)
  {
    if (a1[1] == a2[1] && a1[2] == a2[2]) {
      char v3 = 0;
    }
    else {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  else
  {
    char v3 = *a1 < *a2;
  }
  return (v3 & 1) == 0;
}

uint64_t PresenceUpdateMessage.CodingKeys.rawValue.getter(char a1)
{
  uint64_t result = 107;
  switch(a1)
  {
    case 1:
      uint64_t result = 6907764;
      break;
    case 2:
      uint64_t result = 26484;
      break;
    case 3:
      uint64_t result = 103;
      break;
    case 4:
      uint64_t result = 26980;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t PresenceUpdateMessage.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 107;
  switch(a1)
  {
    case 1:
      uint64_t result = 6907764;
      break;
    case 2:
      uint64_t result = 26484;
      break;
    case 3:
      uint64_t result = 103;
      break;
    case 4:
      uint64_t result = 26980;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance CRDTGeneration(void *a1, void *a2)
{
  if (*a2 != *a1) {
    return *a2 < *a1;
  }
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  if (v4 == v2 && v5 == v3) {
    return 0;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CRDTGeneration(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  if (a1[1] == a2[1] && a1[2] == a2[2]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CRDTGeneration()
{
  return CRDTGeneration.debugDescription.getter(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PresenceUpdateMessage.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PresenceUpdateMessage.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PresenceUpdateMessage.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PresenceUpdateMessage.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PresenceUpdateMessage.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized PresenceUpdateMessage.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PresenceUpdateMessage.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PresenceUpdateMessage.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PresenceUpdateMessage.CodingKeys()
{
  return PresenceUpdateMessage.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance PresenceUpdateMessage.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized PresenceUpdateMessage.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PresenceUpdateMessage.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresenceUpdateMessage.CodingKeys(uint64_t a1)
{
  unint64_t updated = lazy protocol witness table accessor for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys();
  return MEMORY[0x270FA00B0](a1, updated);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PresenceUpdateMessage.CodingKeys(uint64_t a1)
{
  unint64_t updated = lazy protocol witness table accessor for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys();
  return MEMORY[0x270FA00B8](a1, updated);
}

uint64_t PresenceUpdateMessage.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PresenceUpdateMessage.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v12 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    outlined init with take of PresenceUpdateMessage.Kind(v3, (uint64_t)v10);
    outlined init with take of PresenceUpdateMessage.Kind((uint64_t)v10, (uint64_t)v11);
    if (v11[1])
    {
      char v12 = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      char v12 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
      char v12 = 2;
    }
    else
    {
      char v12 = 0;
    }
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PresenceUpdateMessage.description.getter()
{
  outlined init with take of PresenceUpdateMessage.Kind(v0, (uint64_t)v13);
  outlined init with take of PresenceUpdateMessage.Kind((uint64_t)v13, (uint64_t)&v14);
  uint64_t v1 = v15;
  if (v15)
  {
    uint64_t v2 = v14;
    uint64_t v3 = v16;
    uint64_t v4 = v17;
    _StringGuts.grow(_:)(94);
    v5._uint64_t countAndFlagsBits = 0xD000000000000038;
    v5._object = (void *)0x8000000261798340;
    String.append(_:)(v5);
    v6._uint64_t countAndFlagsBits = v2;
    v6._object = v1;
    String.append(_:)(v6);
    v7._object = (void *)0x8000000261798380;
    v7._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = v3;
    v8._object = v4;
    String.append(_:)(v8);
    unint64_t v9 = 0x6172656E6567203BLL;
    unint64_t v10 = 0xEE00203A6E6F6974;
  }
  else
  {
    _StringGuts.grow(_:)(52);
    unint64_t v9 = 0xD000000000000031;
    unint64_t v10 = 0x80000002617983A0;
  }
  String.append(_:)(*(Swift::String *)&v9);
  _print_unlocked<A, B>(_:_:)();
  v11._uint64_t countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return 0;
}

double protocol witness for Decodable.init(from:) in conformance PresenceUpdateMessage@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized PresenceUpdateMessage.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PresenceUpdateMessage(void *a1)
{
  return PresenceUpdateMessage.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresenceUpdateMessage()
{
  return PresenceUpdateMessage.description.getter();
}

unint64_t instantiation function for generic protocol witness table for PresenceUpdateMessage(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  a1[2] = lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  unint64_t result = lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  a1[3] = result;
  return result;
}

unint64_t specialized PresenceUpdateMessage.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PresenceUpdateMessage.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t specialized PresenceUpdateMessage.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PresenceUpdateMessage.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    goto LABEL_3;
  }
  char v35 = 3;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v34 = 4;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v13 = v12;
  uint64_t v30 = v10;
  char v33 = 0;
  swift_bridgeObjectRetain();
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v16 = v15;
  v17._uint64_t countAndFlagsBits = v14;
  v17._object = v16;
  Swift::Int v29 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PresenceUpdateMessage.KindCodingValue.init(rawValue:), v17);
  swift_bridgeObjectRelease();
  if (v29 == 1)
  {
    char v32 = 1;
    uint64_t v28 = KeyedDecodingContainer.decode(_:forKey:)();
    Swift::Int v29 = v23;
    char v31 = 2;
    uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v21 = v25;
    os_log_type_t v26 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v27 = v24;
    v26(v8, v5);
    uint64_t v18 = v28;
    uint64_t v19 = v29;
    uint64_t v20 = v27;
    goto LABEL_7;
  }
  if (v29)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type PresenceUpdateMessageError and conformance PresenceUpdateMessageError();
    swift_allocError();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_3:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined consume of PresenceUpdateMessage.Kind(0, 0);
    return swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
LABEL_7:
  outlined consume of PresenceUpdateMessage.Kind(0, 0);
  outlined copy of PresenceUpdateMessage.Kind(v18, v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  outlined consume of PresenceUpdateMessage.Kind(v18, v19);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v18;
  a2[1] = v19;
  a2[2] = v20;
  a2[3] = v21;
  uint64_t v22 = v30;
  a2[4] = v9;
  a2[5] = v22;
  a2[6] = v13;
  return result;
}

unint64_t lazy protocol witness table accessor for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresenceUpdateMessageError and conformance PresenceUpdateMessageError()
{
  unint64_t result = lazy protocol witness table cache variable for type PresenceUpdateMessageError and conformance PresenceUpdateMessageError;
  if (!lazy protocol witness table cache variable for type PresenceUpdateMessageError and conformance PresenceUpdateMessageError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceUpdateMessageError and conformance PresenceUpdateMessageError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresenceUpdateMessageError and conformance PresenceUpdateMessageError;
  if (!lazy protocol witness table cache variable for type PresenceUpdateMessageError and conformance PresenceUpdateMessageError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceUpdateMessageError and conformance PresenceUpdateMessageError);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PresenceUpdateMessageError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x26179422CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresenceUpdateMessageError()
{
  return &type metadata for PresenceUpdateMessageError;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PresenceUpdateMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PresenceUpdateMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2617943CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for PresenceUpdateMessage.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for PresenceUpdateMessage.CodingKeys(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

void *type metadata accessor for PresenceUpdateMessage.CodingKeys()
{
  return &unk_270D801D0;
}

uint64_t initializeBufferWithCopyOfBuffer for CRDTGeneration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for CRDTGeneration()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for CRDTGeneration(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CRDTGeneration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CRDTGeneration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CRDTGeneration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRDTGeneration()
{
  return &type metadata for CRDTGeneration;
}

unint64_t destroy for PresenceUpdateMessage.Kind(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for PresenceUpdateMessage.Kind(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for PresenceUpdateMessage.Kind(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for PresenceUpdateMessage.Kind(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PresenceUpdateMessage.Kind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PresenceUpdateMessage.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for PresenceUpdateMessage.Kind(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for PresenceUpdateMessage.Kind(void *result, int a2)
{
  if (a2 < 0)
  {
    result[2] = 0;
    result[3] = 0;
    *__n128 result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PresenceUpdateMessage.Kind()
{
  return &type metadata for PresenceUpdateMessage.Kind;
}

unint64_t lazy protocol witness table accessor for type CRDTGeneration and conformance CRDTGeneration()
{
  unint64_t result = lazy protocol witness table cache variable for type CRDTGeneration and conformance CRDTGeneration;
  if (!lazy protocol witness table cache variable for type CRDTGeneration and conformance CRDTGeneration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRDTGeneration and conformance CRDTGeneration);
  }
  return result;
}

void type metadata completion function for GroupSession.JoinState()
{
  v1[4] = MEMORY[0x263F8CF88] + 64;
  type metadata accessor for CheckedContinuation<(), Error>();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v1[5] = v1;
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupSession.JoinState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_retain();
      uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DispatchWorkItem, CheckedContinuation<(), Error>))
                  + 48);
      uint64_t v10 = (char *)a1 + v9;
      Swift::String v11 = (char *)a2 + v9;
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for GroupSession.JoinState(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    swift_release();
    uint64_t v3 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DispatchWorkItem, CheckedContinuation<(), Error>))
                + 48);
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(v3, v4);
  }
  else if (!result)
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for GroupSession.JoinState(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    swift_retain();
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DispatchWorkItem, CheckedContinuation<(), Error>))
                + 48);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for GroupSession.JoinState(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 - 8);
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_retain();
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DispatchWorkItem, CheckedContinuation<(), Error>))
                  + 48);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for GroupSession.JoinState(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DispatchWorkItem, CheckedContinuation<(), Error>))
                + 48);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for GroupSession.JoinState(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 - 8);
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DispatchWorkItem, CheckedContinuation<(), Error>))
                  + 48);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSession.JoinState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for GroupSession.JoinState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for GroupSession.JoinState()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for GroupSession.JoinState()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for CheckedContinuation<(), Error>()
{
  if (!lazy cache variable for type metadata for CheckedContinuation<(), Error>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    unint64_t v0 = type metadata accessor for CheckedContinuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<(), Error>);
    }
  }
}

uint64_t PersonalGroupSessionProvider.init(id:activity:)()
{
  return MEMORY[0x270EF2DF0]();
}

uint64_t GroupSessionProvider.sessions.getter()
{
  return MEMORY[0x270EF2E68]();
}

uint64_t static GroupActivityMetadata.ActivityType.collaboration.getter()
{
  return MEMORY[0x270EF2E70]();
}

uint64_t type metadata accessor for GroupActivityMetadata.ActivityType()
{
  return MEMORY[0x270EF2E80]();
}

uint64_t GroupActivityMetadata.type.setter()
{
  return MEMORY[0x270EF2EA8]();
}

uint64_t GroupActivityMetadata.init()()
{
  return MEMORY[0x270EF2EC0]();
}

uint64_t GroupSessionMessenger.MessageContext.source.getter()
{
  return MEMORY[0x270EF2ED0]();
}

uint64_t type metadata accessor for GroupSessionMessenger.MessageContext()
{
  return MEMORY[0x270EF2ED8]();
}

uint64_t GroupSessionMessenger.init<A>(session:)()
{
  return MEMORY[0x270EF2F00]();
}

uint64_t GroupSessionMessenger.Messages.makeAsyncIterator()()
{
  return MEMORY[0x270EF2F08]();
}

uint64_t GroupSessionMessenger.messages<A>(of:)()
{
  return MEMORY[0x270EF2F10]();
}

uint64_t type metadata accessor for GroupSessionMessenger()
{
  return MEMORY[0x270EF2F18]();
}

uint64_t type metadata accessor for GroupSessionProviderState()
{
  return MEMORY[0x270EF2F20]();
}

uint64_t GroupSession.localParticipant.getter()
{
  return MEMORY[0x270EF2F60]();
}

uint64_t GroupSession.$activeParticipants.getter()
{
  return MEMORY[0x270EF2F78]();
}

Swift::Void __swiftcall GroupSession.join()()
{
}

Swift::Void __swiftcall GroupSession.leave()()
{
}

uint64_t GroupSession.$state.getter()
{
  return MEMORY[0x270EF2FB0]();
}

uint64_t GroupSession.Sessions.makeAsyncIterator()()
{
  return MEMORY[0x270EF2FB8]();
}

uint64_t GroupSession.activity.getter()
{
  return MEMORY[0x270EF2FC0]();
}

uint64_t Participant.handle.getter()
{
  return MEMORY[0x270EF3010]();
}

uint64_t type metadata accessor for Participant()
{
  return MEMORY[0x270EF3018]();
}

uint64_t type metadata accessor for Participants()
{
  return MEMORY[0x270EF3040]();
}

uint64_t AddressableMember.init(handle:)()
{
  return MEMORY[0x270EF3058]();
}

uint64_t type metadata accessor for AddressableMember()
{
  return MEMORY[0x270EF3060]();
}

uint64_t static PresenceSessionInfo.default.getter()
{
  return MEMORY[0x270EF3080]();
}

uint64_t type metadata accessor for PresenceSessionInfo()
{
  return MEMORY[0x270EF3088]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t AsyncPublisher.makeAsyncIterator()()
{
  return MEMORY[0x270EE3BD0]();
}

uint64_t CurrentValueSubject.send(_:)()
{
  return MEMORY[0x270EE3C88]();
}

uint64_t CurrentValueSubject.init(_:)()
{
  return MEMORY[0x270EE3CB8]();
}

uint64_t Publisher<>.values.getter()
{
  return MEMORY[0x270EE4020]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x270FA09A8]();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return MEMORY[0x270FA09D0]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x270FA09E8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t dispatch thunk of DispatchWorkItem.isCancelled.getter()
{
  return MEMORY[0x270FA0B30]();
}

uint64_t DispatchWorkItem.init(flags:block:)()
{
  return MEMORY[0x270FA0B60]();
}

uint64_t dispatch thunk of DispatchWorkItem.cancel()()
{
  return MEMORY[0x270FA0B70]();
}

uint64_t type metadata accessor for DispatchWorkItem()
{
  return MEMORY[0x270FA0B98]();
}

uint64_t CancellationError.init()()
{
  return MEMORY[0x270FA1DF0]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x270EF1818]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x270F9D318]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x270F9D598]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x270EF19B0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x270F9D708]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9DBA0]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x270FA1DF8]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x270FA1E18]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x270FA1E20]();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return MEMORY[0x270FA1E28]();
}

uint64_t type metadata accessor for CancellationError()
{
  return MEMORY[0x270FA1E30]();
}

uint64_t static MainActor.shared.getter()
{
  return MEMORY[0x270FA1EA0]();
}

uint64_t type metadata accessor for MainActor()
{
  return MEMORY[0x270FA1EA8]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x270FA1F08]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x270FA1F10]();
}

uint64_t type metadata accessor for AsyncStream.Continuation.BufferingPolicy()
{
  return MEMORY[0x270FA1F38]();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return MEMORY[0x270FA1F48]();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
}

uint64_t type metadata accessor for AsyncStream.Continuation()
{
  return MEMORY[0x270FA1F58]();
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return MEMORY[0x270FA1F60]();
}

uint64_t type metadata accessor for AsyncStream()
{
  return MEMORY[0x270FA1F88]();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return MEMORY[0x270FA1F90]();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.isCancelled.getter()
{
  return MEMORY[0x270FA1FD8]();
}

uint64_t static Task<>.checkCancellation()()
{
  return MEMORY[0x270FA1FE8]();
}

uint64_t ThrowingTaskGroup.isEmpty.getter()
{
  return MEMORY[0x270FA2050]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x270EF1C98]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x270F9DF80]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x270FA2E70]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x270FA2E80]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x270FA0C50]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x270FA0D50]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x270FA0DA0]();
}

uint64_t OS_dispatch_queue.async(execute:)()
{
  return MEMORY[0x270FA0DB0]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x270FA0DB8]();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return MEMORY[0x270FA0DD0]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x270FA1170](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x270FA1180]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x270F9E530]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x270F9E560]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x270F9E800]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x270F9E818]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x270F9E848]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x270F9E858]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x270F9E870]();
}

uint64_t __CocoaSet.contains(_:)()
{
  return MEMORY[0x270F9E878]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x270F9E958]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9E960]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x270F9E968]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9E970]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9EFE8]();
}

{
  return MEMORY[0x270F9EFF0]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x270F9F080]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x270F9F098]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9F0C0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x270F9F230](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x270F9F2E8]();
}

{
  return MEMORY[0x270F9F308]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x270F9F428]();
}

{
  return MEMORY[0x270F9F448]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x270F9F770]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x270F9FC48]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD98]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

void objc_destroyWeak(id *location)
{
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x270F9A6B0](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x270F9A9F8](location, obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x270FA0228]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x270FA0240]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x270FA2420]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x270FA2428]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x270FA0410]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x270FA0568]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x270FA2458]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x270FA0588]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x270FA05D0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x270FA05E8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x270FA05F0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x270FA05F8]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x270FA0650]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x270FA0658]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}