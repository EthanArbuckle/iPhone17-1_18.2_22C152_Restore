uint64_t browser_setMode(uint64_t a1)
{
  return browser_setModeInternal(*(void **)a1, *(unsigned __int16 *)(a1 + 8));
}

uint64_t __APBrowserRapportManagerSetMode_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 40);
  if (*(unsigned char *)(v2 + 51))
  {
    int v4 = -72284;
    goto LABEL_18;
  }
  int v3 = *(unsigned __int16 *)(result + 48);
  if (*(unsigned __int16 *)(v2 + 48) == v3)
  {
    int v4 = 0;
    goto LABEL_18;
  }
  if (v3 == 1)
  {
    int v5 = APBrowserRapportManager_ensurePreferencesUpdated(*(unsigned char **)(result + 40), 0);
    if (v5)
    {
      int v4 = v5;
    }
    else
    {
      if (gLogCategory_APBrowserRapportManager <= 40
        && (gLogCategory_APBrowserRapportManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_WORD *)(v2 + 48) = 1;
      result = APBrowserRapportManager_update(v2);
      int v4 = result;
      if (!result) {
        goto LABEL_18;
      }
    }
    APSLogErrorAt();
LABEL_23:
    result = APSLogErrorAt();
    goto LABEL_18;
  }
  if (*(_WORD *)(result + 48))
  {
    if (gLogCategory_APBrowserRapportManager <= 90)
    {
      if (gLogCategory_APBrowserRapportManager != -1 || (result = _LogCategory_Initialize(), result)) {
        result = LogPrintF();
      }
    }
    int v4 = -6705;
  }
  else
  {
    result = APBrowserRapportManager_stop(*(void *)(result + 40));
    int v4 = result;
    if (result) {
      goto LABEL_23;
    }
  }
LABEL_18:
  *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = v4;
  return result;
}

uint64_t APBrowserRapportManager_update(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 50) && *(_WORD *)(a1 + 48))
  {
    if (!*(void *)(a1 + 72))
    {
      if (gLogCategory_APBrowserRapportManager <= 40
        && (gLogCategory_APBrowserRapportManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      id v2 = objc_alloc_init(MEMORY[0x1E4F946E0]);
      if (!v2)
      {
        uint64_t v5 = 4294895016;
        APSLogErrorAt();
        APSLogErrorAt();
        return v5;
      }
      int v3 = v2;
      [v2 setDispatchQueue:*(void *)(a1 + 32)];
      [v3 setServiceType:@"com.apple.airplay.discovery.service"];
      objc_msgSend(v3, "setControlFlags:", objc_msgSend(v3, "controlFlags") | 2);
      uint64_t v4 = *(void *)(a1 + 40);
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      v9[2] = __APBrowserRapportManager_ensureScanningStarted_block_invoke;
      v9[3] = &__block_descriptor_40_e31_v16__0__RPCompanionLinkDevice_8l;
      v9[4] = v4;
      [v3 setDeviceFoundHandler:v9];
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      v8[2] = __APBrowserRapportManager_ensureScanningStarted_block_invoke_3;
      v8[3] = &__block_descriptor_40_e31_v16__0__RPCompanionLinkDevice_8l;
      v8[4] = v4;
      [v3 setDeviceLostHandler:v8];
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 3221225472;
      v7[2] = __APBrowserRapportManager_ensureScanningStarted_block_invoke_5;
      v7[3] = &__block_descriptor_40_e17_v16__0__NSError_8l;
      v7[4] = v4;
      [v3 activateWithCompletion:v7];
      *(void *)(a1 + 72) = v3;
    }
  }
  else if (*(void *)(a1 + 72))
  {
    if (gLogCategory_APBrowserRapportManager <= 40
      && (gLogCategory_APBrowserRapportManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    [*(id *)(a1 + 72) invalidate];

    *(void *)(a1 + 72) = 0;
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 80));
  }
  return 0;
}

uint64_t APBrowserRapportManager_ensurePreferencesUpdated(unsigned char *a1, int a2)
{
  if (a1[51]) {
    return 4294895012;
  }
  if (!a2 && a1[52]) {
    return 0;
  }
  a1[50] = 1;
  uint64_t v3 = APBrowserRapportManager_update((uint64_t)a1);
  if (v3) {
    APSLogErrorAt();
  }
  else {
    a1[52] = 1;
  }
  return v3;
}

void APBrowserRapportManager_runOnQueue(uint64_t a1, uint64_t a2)
{
  if (_APBrowserRapportManager_getActiveManagers_once != -1) {
    dispatch_once(&_APBrowserRapportManager_getActiveManagers_once, &__block_literal_global_20);
  }
  uint64_t v3 = FigCFWeakReferenceTableCopyValue();
  if (v3)
  {
    uint64_t v4 = (const void *)v3;
    uint64_t v5 = *(NSObject **)(v3 + 16);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __APBrowserRapportManager_runOnQueue_block_invoke;
    v6[3] = &unk_1E688BE20;
    v6[4] = a2;
    v6[5] = v4;
    dispatch_sync(v5, v6);
    CFRelease(v4);
  }
}

uint64_t __APBrowserBTLEManagerSetMode_block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) setBTLEMode:*(unsigned __int16 *)(a1 + 48)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t APBrokerManagerSetBrowseMode(uint64_t a1, int a2)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  if (*(unsigned __int16 *)(a1 + 130) == a2)
  {
    uint64_t updated = 0;
  }
  else
  {
    *(_WORD *)(a1 + 130) = a2;
    global_queue = dispatch_get_global_queue(17, 0);
    dispatch_async(global_queue, &__block_literal_global_0);
    if (gLogCategory_APBrokerManager <= 30
      && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t updated = _APBrokerManagerUpdateBrowsing(a1);
    if (updated) {
      APSLogErrorAt();
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
  return updated;
}

uint64_t browser_setModeInternal(void *a1, unsigned int a2)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 229)) {
    return -6723;
  }
  uint64_t v5 = (int **)DerivedStorage;
  if (*(unsigned __int16 *)(DerivedStorage + 24) == a2) {
    return 0;
  }
  v6 = *(int **)DerivedStorage;
  int v7 = **(_DWORD **)DerivedStorage;
  if (v7 > 50) {
    goto LABEL_7;
  }
  if (v7 == -1)
  {
    if (!_LogCategory_Initialize()) {
      goto LABEL_7;
    }
    v6 = *v5;
  }
  browser_getStringForMode(a2, v6);
  browser_getStringForMode(*((unsigned __int16 *)v5 + 12), *v5);
  LogPrintF();
LABEL_7:
  v8 = (const void *)CFStringCreateF();
  v9 = v5[4];
  if (v8) {
    CFRetain(v8);
  }
  v5[4] = (int *)v8;
  if (v9) {
    CFRelease(v9);
  }
  unsigned int v10 = *((unsigned __int16 *)v5 + 12);
  *((_WORD *)v5 + 12) = a2;
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  if (IsAppleInternalBuild() && APSSettingsGetInt64() && !IsAppleTV())
  {
    v12 = *(NSObject **)(v11 + 48);
    if ((a2 & 0xFFFE) == 2)
    {
      if (!v12)
      {
        dispatch_source_t v13 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v11 + 8));
        *(void *)(v11 + 48) = v13;
        if (v13)
        {
          CFTypeRef v14 = CFRetain(a1);
          v15 = *(NSObject **)(v11 + 48);
          uint64_t handler = MEMORY[0x1E4F143A8];
          uint64_t v102 = 3221225472;
          v103 = __browser_updateDetailedDiscoveryThresholdTimer_block_invoke;
          v104 = &__block_descriptor_40_e5_v8__0l;
          CFTypeRef v105 = v14;
          dispatch_source_set_event_handler(v15, &handler);
          v16 = *(NSObject **)(v11 + 48);
          uint64_t v106 = MEMORY[0x1E4F143A8];
          uint64_t v107 = 3221225472;
          v108 = __browser_updateDetailedDiscoveryThresholdTimer_block_invoke_2;
          v109 = &__block_descriptor_48_e5_v8__0l;
          uint64_t v110 = v11;
          CFTypeRef v111 = v14;
          dispatch_source_set_cancel_handler(v16, &v106);
          v17 = *(NSObject **)(v11 + 48);
          dispatch_time_t v18 = dispatch_time(0, 3600000000000);
          dispatch_source_set_timer(v17, v18, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
          dispatch_resume(*(dispatch_object_t *)(v11 + 48));
        }
        else
        {
          APSLogErrorAt();
        }
      }
    }
    else if (v12)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(v11 + 48));
      dispatch_release(v12);
      *(void *)(v11 + 48) = 0;
    }
  }
  unsigned int v19 = *((unsigned __int16 *)v5 + 12);
  uint64_t v20 = CMBaseObjectGetDerivedStorage();
  double Current = CFAbsoluteTimeGetCurrent();
  if (v10 == v19)
  {
    APSLogErrorAt();
    unsigned int v100 = -6705;
LABEL_155:
    APSLogErrorAt();
    if (!v8) {
      return v100;
    }
LABEL_146:
    CFRelease(v8);
    return v100;
  }
  double v22 = Current;
  if (v10 >= 2 && v19 <= 1) {
    browser_ensureDetailedForeverTimerStopped();
  }
  uint64_t v23 = CMBaseObjectGetDerivedStorage();
  v24 = (double *)(v23 + 384);
  if (v10) {
    v24 = 0;
  }
  if (v10 == 1) {
    v24 = (double *)(v23 + 392);
  }
  if (v10 == 2) {
    v24 = (double *)(v23 + 400);
  }
  if (v10 == 3) {
    v24 = (double *)(v23 + 408);
  }
  double *v24 = *v24 + v22 - *(double *)(v23 + 416);
  *(double *)(v23 + 416) = v22;
  switch(v19)
  {
    case 0u:
      int v25 = **(_DWORD **)v20;
      if (v25 <= 30 && (v25 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      browser_batchAndSendDiscoveredDeviceRTCMetrics();
      int v36 = **(_DWORD **)CMBaseObjectGetDerivedStorage();
      if (v36 <= 30 && (v36 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      APSEventRecorderResetEvent();
      APSEventRecorderResetEvent();
      APSEventRecorderResetEvent();
      APSEventRecorderResetEvent();
      browser_ensureDiscoverySessionThresholdTimerStopped();
      *(_WORD *)(v20 + 424) = 0;
      *(_DWORD *)(v20 + 428) = 0;
      goto LABEL_71;
    case 1u:
      goto LABEL_41;
    case 2u:
      goto LABEL_37;
    case 3u:
      APSEventRecorderRecordEventWithFlagsAtTime();
LABEL_37:
      APSEventRecorderRecordEventWithFlagsAtTime();
      uint64_t v26 = CMBaseObjectGetDerivedStorage();
      if (IsAppleInternalBuild() || *(void *)(v26 + 360)) {
        goto LABEL_41;
      }
      v27 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v26 + 8));
      *(void *)(v26 + 360) = v27;
      if (v27)
      {
        uint64_t v106 = MEMORY[0x1E4F143A8];
        uint64_t v107 = 3221225472;
        v108 = __browser_ensureDetailedForeverTimerStarted_block_invoke;
        v109 = &__block_descriptor_40_e5_v8__0l;
        uint64_t v110 = (uint64_t)a1;
        dispatch_source_set_event_handler(v27, &v106);
        CFRetain(a1);
        v28 = *(NSObject **)(v26 + 360);
        uint64_t handler = MEMORY[0x1E4F143A8];
        uint64_t v102 = 3221225472;
        v103 = __browser_ensureDetailedForeverTimerStarted_block_invoke_2;
        v104 = &__block_descriptor_40_e5_v8__0l;
        CFTypeRef v105 = a1;
        dispatch_source_set_cancel_handler(v28, &handler);
        v29 = *(NSObject **)(v26 + 360);
        dispatch_time_t v30 = dispatch_time(0, 600000000000);
        dispatch_source_set_timer(v29, v30, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        dispatch_resume(*(dispatch_object_t *)(v26 + 360));
LABEL_41:
        int v31 = 0;
      }
      else
      {
        APSLogErrorAt();
        browser_ensureDetailedForeverTimerStopped();
        int v31 = -6728;
      }
      APSEventRecorderRecordEventWithFlagsAtTime();
      if (*(unsigned __int16 *)(v20 + 424) >= v19) {
        goto LABEL_68;
      }
      int v32 = **(_DWORD **)v20;
      if (v32 <= 30 && (v32 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      *(_WORD *)(v20 + 424) = v19;
      v33 = (int **)CMBaseObjectGetDerivedStorage();
      APSEventRecorderGetEventTimeRecursive();
      if (v34 != 0.0)
      {
        int v98 = **v33;
        if (v98 <= 50 && (v98 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        goto LABEL_67;
      }
      int v35 = **v33;
      if (v33[54])
      {
        if (v35 <= 50 && (v35 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        goto LABEL_66;
      }
      if (v35 <= 50 && (v35 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      dispatch_source_t v37 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, (dispatch_queue_t)v33[1]);
      v33[54] = (int *)v37;
      if (v37)
      {
        CFRetain(a1);
        v38 = v33[54];
        uint64_t v106 = MEMORY[0x1E4F143A8];
        uint64_t v107 = 3221225472;
        v108 = __browser_startOrExtendDiscoverySessionThresholdTimer_block_invoke;
        v109 = &__block_descriptor_40_e5_v8__0l;
        uint64_t v110 = (uint64_t)a1;
        dispatch_source_set_event_handler(v38, &v106);
        v39 = v33[54];
        uint64_t handler = MEMORY[0x1E4F143A8];
        uint64_t v102 = 3221225472;
        v103 = __browser_startOrExtendDiscoverySessionThresholdTimer_block_invoke_2;
        v104 = &__block_descriptor_40_e5_v8__0l;
        CFTypeRef v105 = a1;
        dispatch_source_set_cancel_handler(v39, &handler);
        dispatch_resume((dispatch_object_t)v33[54]);
LABEL_66:
        v40 = v33[54];
        dispatch_time_t v41 = dispatch_time(0, 300000000000);
        dispatch_source_set_timer(v40, v41, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
LABEL_67:
        int v31 = 0;
        goto LABEL_68;
      }
      APSLogErrorAt();
      browser_ensureDiscoverySessionThresholdTimerStopped();
      int v31 = -6728;
LABEL_68:
      if (v19 > v10) {
        ++*(_DWORD *)(v20 + 376);
      }
      unsigned int v100 = v31;
      if (v31) {
        goto LABEL_155;
      }
LABEL_71:
      switch(a2)
      {
        case 0u:
          uint64_t v42 = CMBaseObjectGetDerivedStorage();
          v43 = *(const void **)(v42 + 40);
          if (v43)
          {
            CFRelease(v43);
            *(void *)(v42 + 40) = 0;
          }
          unsigned int updated = browser_updateBTLEBrowsing((CFStringRef (__cdecl *)(const void *))a1);
          if (updated)
          {
            unsigned int v99 = updated;
          }
          else
          {
            unsigned int v45 = browser_updateRapportBrowsing();
            if (v45)
            {
              unsigned int v99 = v45;
            }
            else
            {
              unsigned int v46 = browser_updateBrokerBrowsing(a1);
              if (v46)
              {
                unsigned int v99 = v46;
              }
              else
              {
                unsigned int v47 = browser_updateBonjourBrowsing(a1);
                if (v47)
                {
                  unsigned int v99 = v47;
                }
                else
                {
                  browser_stopNI();
                  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v42 + 200));
                  *(_DWORD *)(v42 + 224) = 0;
                  unsigned int v48 = browser_dispatchEvent(a1, 7, 0);
                  if (!v48)
                  {
                    unsigned int v100 = 0;
                    goto LABEL_140;
                  }
                  unsigned int v99 = v48;
                }
              }
            }
          }
          APSLogErrorAt();
          unsigned int v100 = v99;
          goto LABEL_155;
        case 1u:
          CMBaseObjectGetDerivedStorage();
          int v50 = browser_ensureWiFiPowerChangedListeningStarted(a1);
          if (v50)
          {
            int v96 = v50;
            goto LABEL_154;
          }
          int v51 = browser_ensureAWDLSoloSupportedListeningStarted(a1);
          if (v51)
          {
            int v96 = v51;
            goto LABEL_154;
          }
          int v52 = browser_updateBTLEBrowsing((CFStringRef (__cdecl *)(const void *))a1);
          if (v52)
          {
            int v96 = v52;
            goto LABEL_154;
          }
          int v53 = browser_updateRapportBrowsing();
          if (v53)
          {
            int v96 = v53;
            goto LABEL_154;
          }
          int v54 = browser_updateBrokerBrowsing(a1);
          if (v54)
          {
            int v96 = v54;
            goto LABEL_154;
          }
          int v55 = browser_updateBonjourBrowsing(a1);
          if (v55)
          {
            int v96 = v55;
            goto LABEL_154;
          }
          browser_stopNI();
          int v56 = browser_removeAirPlayP2PServiceForNearbyDevices();
          if (v56)
          {
            int v96 = v56;
            goto LABEL_154;
          }
          CMBaseObjectGetDerivedStorage();
          CFArrayRef v57 = (const __CFArray *)CFDictionaryCopyKeys();
          if (!v57)
          {
            unsigned int v100 = 0;
            goto LABEL_138;
          }
          CFArrayRef v58 = v57;
          CFIndex Count = CFArrayGetCount(v57);
          if (Count < 1)
          {
LABEL_96:
            CFRelease(v58);
            goto LABEL_137;
          }
          CFIndex v60 = Count;
          CFIndex v61 = 0;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v58, v61);
            if (!ValueAtIndex) {
              goto LABEL_151;
            }
            int v63 = browser_updateEventInfoForDevice(a1, ValueAtIndex);
            if (v63) {
              goto LABEL_152;
            }
            if (v60 == ++v61) {
              goto LABEL_96;
            }
          }
        case 2u:
          unsigned int v100 = browser_removeAirPlayP2PServiceForNearbyDevices();
          if (v100) {
            goto LABEL_155;
          }
          goto LABEL_98;
        case 3u:
LABEL_98:
          CMBaseObjectGetDerivedStorage();
          uint64_t v64 = CMBaseObjectGetDerivedStorage();
          v65 = *(const void **)(v64 + 40);
          if (v65)
          {
            CFRelease(v65);
            *(void *)(v64 + 40) = 0;
          }
          CFAllocatorRef v66 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFUUIDRef v67 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
          *(void *)(v64 + 40) = v67;
          if (!v67 || (CFStringRef v68 = CFUUIDCreateString(v66, v67)) == 0)
          {
            APSLogErrorAt();
            int v96 = -6728;
            goto LABEL_154;
          }
          CFStringRef v69 = v68;
          int v70 = **(_DWORD **)v64;
          if (v70 <= 40 && (v70 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          CFRelease(v69);
          uint64_t v71 = CMBaseObjectGetDerivedStorage();
          CFArrayRef v72 = (const __CFArray *)CFDictionaryCopyKeys();
          if (!v72) {
            goto LABEL_115;
          }
          CFArrayRef v58 = v72;
          CFIndex v73 = CFArrayGetCount(v72);
          if (v73 < 1) {
            goto LABEL_114;
          }
          CFIndex v74 = v73;
          CFIndex v75 = 0;
          break;
        default:
          int v49 = **v5;
          if (v49 <= 90 && (v49 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          unsigned int v100 = -6727;
          if (v8) {
            goto LABEL_146;
          }
          return v100;
      }
      break;
    default:
      goto LABEL_71;
  }
  do
  {
    v76 = CFArrayGetValueAtIndex(v58, v75);
    if (!v76)
    {
LABEL_151:
      APSLogErrorAt();
      int v96 = -6762;
      goto LABEL_153;
    }
    v77 = v76;
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v71 + 200), v76);
    if (!Value)
    {
      APSLogErrorAt();
      int v96 = -6727;
      goto LABEL_153;
    }
    v79 = Value;
    if (CFDictionaryGetInt64())
    {
      int v63 = browser_updateDevice(a1, v77, v79);
      if (v63)
      {
LABEL_152:
        int v96 = v63;
        APSLogErrorAt();
LABEL_153:
        CFRelease(v58);
        goto LABEL_154;
      }
    }
    ++v75;
  }
  while (v74 != v75);
LABEL_114:
  CFRelease(v58);
LABEL_115:
  int v80 = browser_ensureWiFiPowerChangedListeningStarted(a1);
  if (v80)
  {
    int v96 = v80;
LABEL_154:
    APSLogErrorAt();
    unsigned int v100 = v96;
    goto LABEL_155;
  }
  int v81 = browser_ensureAWDLSoloSupportedListeningStarted(a1);
  if (v81)
  {
    int v96 = v81;
    goto LABEL_154;
  }
  int v82 = browser_updateBTLEBrowsing((CFStringRef (__cdecl *)(const void *))a1);
  if (v82)
  {
    int v96 = v82;
    goto LABEL_154;
  }
  int v83 = browser_updateRapportBrowsing();
  if (v83)
  {
    int v96 = v83;
    goto LABEL_154;
  }
  int v84 = browser_updateBrokerBrowsing(a1);
  if (v84)
  {
    int v96 = v84;
    goto LABEL_154;
  }
  int v85 = browser_updateBonjourBrowsing(a1);
  if (v85)
  {
    int v96 = v85;
    goto LABEL_154;
  }
  v86 = (int **)CMBaseObjectGetDerivedStorage();
  if (APSIsProximitySenderEnabled())
  {
    uint64_t v87 = CMBaseObjectGetDerivedStorage();
    if (*(void *)(v87 + 256)) {
      goto LABEL_130;
    }
    uint64_t v88 = v87;
    int v89 = **(_DWORD **)v87;
    if (v89 <= 50 && (v89 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    v90 = [[BrowserNIDelegate alloc] initWithBrowser:a1];
    *(void *)(v88 + 264) = v90;
    if (v90)
    {
      getNISessionClass();
      v91 = objc_opt_new();
      *(void *)(v88 + 256) = v91;
      if (v91)
      {
        [v91 setDelegate:*(void *)(v88 + 264)];
        [*(id *)(v88 + 256) setDelegateQueue:*(void *)(v88 + 8)];
        if (!APSRotatingKeyMapperInitialize())
        {
LABEL_130:
          int v92 = **v86;
          if (v92 <= 50 && (v92 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          getNISpatialBrowsingConfigurationClass();
          v93 = objc_opt_new();
          if (v93) {
            [v86[32] runWithConfiguration:v93];
          }
          else {
            APSLogErrorAt();
          }
          goto LABEL_136;
        }
      }
    }
    APSLogErrorAt();
    browser_cleanupNI();
    APSLogErrorAt();
  }
  else
  {
    int v97 = **v86;
    if (v97 <= 30)
    {
      if (v97 != -1 || _LogCategory_Initialize()) {
        LogPrintF();
      }
      v93 = 0;
      goto LABEL_136;
    }
  }
  v93 = 0;
LABEL_136:

LABEL_137:
  unsigned int v100 = 0;
  if (a2)
  {
LABEL_138:
    if (!v5[44])
    {
      SNPrintF();
      v5[44] = (int *)os_transaction_create();
    }
  }
  else
  {
LABEL_140:
    v94 = v5[44];
    if (v94)
    {

      v5[44] = 0;
    }
  }
  browser_sendPowerLogDiscoveryModeEvent();
  if (v8) {
    goto LABEL_146;
  }
  return v100;
}

const char *browser_getStringForMode(unsigned int a1, int *a2)
{
  if (a1 < 4) {
    return off_1E688DE00[(__int16)a1];
  }
  if (*a2 <= 60 && (*a2 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  return "Unrecognized";
}

uint64_t browser_ensureAWDLSoloSupportedListeningStarted(const void *a1)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 131)) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 130)) {
    return 0;
  }
  if (!APSIsVirtualMachine())
  {
    uint64_t v5 = APConnectivityHelperRegisterForEvent(*(void *)(v3 + 184), (uint64_t)a1, 8);
    if (!v5)
    {
      *(unsigned char *)(v3 + 131) = 1;
      return v5;
    }
LABEL_13:
    APSLogErrorAt();
    return v5;
  }
  int v4 = **(_DWORD **)v3;
  if (v4 <= 40 && (v4 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  *(unsigned char *)(v3 + 131) = 1;
  int v7 = @"isAWDLSoloSupported";
  v8[0] = MEMORY[0x1E4F1CC28];
  uint64_t v5 = browser_handleConnectivityHelperEventInternal(a1, 8, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:&v7 count:1]);
  if (v5) {
    goto LABEL_13;
  }
  return v5;
}

uint64_t browser_updateRapportBrowsing()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(v1 + 248) && (unsigned int v2 = *(unsigned __int16 *)(v1 + 24), v2 >= 2))
  {
    if (v2 - 2 >= 2)
    {
      int v10 = **(_DWORD **)v1;
      if (v10 <= 60 && (v10 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      uint64_t v3 = 4294960534;
      goto LABEL_18;
    }
    uint64_t v3 = APBrowserRapportManagerSetMode(*(void *)(DerivedStorage + 144), 1);
    if (v3) {
LABEL_18:
    }
      APSLogErrorAt();
  }
  else
  {
    uint64_t v4 = APBrowserRapportManagerSetMode(*(void *)(DerivedStorage + 144), 0);
    if (v4)
    {
      uint64_t v3 = v4;
      goto LABEL_18;
    }
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
      APSLogErrorAt();
      uint64_t v3 = 4294960568;
      goto LABEL_18;
    }
    CFMutableDictionaryRef v7 = Mutable;
    CFTypeRef v8 = CFRetain(*(CFTypeRef *)(v5 + 160));
    v9 = *(const void **)(v5 + 160);
    *(void *)(v5 + 160) = v7;
    CFRetain(v7);
    if (v9) {
      CFRelease(v9);
    }
    CFDictionaryApplyBlock();
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v5 + 152));
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v5 + 168));
    if (v8) {
      CFRelease(v8);
    }
    CFRelease(v7);
    return 0;
  }
  return v3;
}

uint64_t browser_updateBrokerBrowsing(const void *a1)
{
  int v2 = *(unsigned __int16 *)(CMBaseObjectGetDerivedStorage() + 24);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (v2)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    uint64_t v5 = *(void *)(DerivedStorage + 328);
    if (v5)
    {
      if (!*(unsigned char *)(v4 + 336))
      {
        *(void *)&long long v13 = browser_handleBrokerGroupAddOrUpdate;
        *((void *)&v13 + 1) = browser_handleBrokerGroupAddOrUpdate;
        *(void *)&long long v14 = browser_handleBrokerGroupRemove;
        *((void *)&v14 + 1) = browser_handleBrokeredReceiverAddOrUpdate;
        *(void *)&long long v15 = browser_handleBrokeredReceiverAddOrUpdate;
        *((void *)&v15 + 1) = browser_handleBrokeredReceiverRemoved;
        uint64_t v6 = APBrokerManagerSetDelegate(v5, a1, &v13);
        if (v6)
        {
          uint64_t v8 = v6;
          goto LABEL_19;
        }
        *(unsigned char *)(v4 + 336) = 1;
        uint64_t v5 = *(void *)(v4 + 328);
      }
      uint64_t v7 = APBrokerManagerSetBrowseMode(v5, v2);
      if (v7)
      {
        uint64_t v8 = v7;
LABEL_19:
        APSLogErrorAt();
        APSLogErrorAt();
        return v8;
      }
    }
  }
  else
  {
    uint64_t v9 = *(void *)(DerivedStorage + 328);
    if (v9)
    {
      APBrokerManagerSetDelegate(v9, 0, 0);
      *(unsigned char *)(v4 + 336) = 0;
      APBrokerManagerSetBrowseMode(*(void *)(v4 + 328), 0);
    }
    uint64_t v10 = CMBaseObjectGetDerivedStorage();
    if (CFDictionaryGetCount(*(CFDictionaryRef *)(v10 + 344)) >= 1)
    {
      int v11 = **(_DWORD **)v10;
      if (v11 <= 50 && (v11 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      *(void *)&long long v13 = MEMORY[0x1E4F143A8];
      *((void *)&v13 + 1) = 3221225472;
      *(void *)&long long v14 = __browser_flushAllBrokerResults_block_invoke;
      *((void *)&v14 + 1) = &__block_descriptor_48_e15_v24__0r_v8r_v16l;
      *(void *)&long long v15 = v10;
      *((void *)&v15 + 1) = a1;
      CFDictionaryApplyBlock();
      CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v10 + 344));
    }
  }
  return 0;
}

uint64_t browser_updateBonjourBrowsing(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  browser_ensureWiFiAvailableListeningStarted(a1);
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(v3 + 195)) {
    goto LABEL_11;
  }
  uint64_t v4 = v3;
  if (*(unsigned char *)(v3 + 193)) {
    goto LABEL_11;
  }
  if (!APSIsVirtualMachine())
  {
    if (!APConnectivityHelperRegisterForEvent(*(void *)(v4 + 184), (uint64_t)a1, 7))
    {
      *(unsigned char *)(v4 + 195) = 1;
      goto LABEL_11;
    }
    goto LABEL_21;
  }
  int v5 = **(_DWORD **)v4;
  if (v5 <= 40 && (v5 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  *(unsigned char *)(v4 + 195) = 1;
  if (browser_handleConnectivityHelperEventInternal(a1, 7, 0)) {
LABEL_21:
  }
    APSLogErrorAt();
LABEL_11:
  browser_ensureAWDLSoloSupportedListeningStarted(a1);
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  unint64_t v7 = *(unsigned __int16 *)(v6 + 24);
  if (v7 >= 4)
  {
    int v9 = **(_DWORD **)v6;
    if (v9 <= 60 && (v9 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v8 = 4294960534;
    goto LABEL_19;
  }
  uint64_t v8 = APBonjourBrowserSetMode(*(void *)(DerivedStorage + 80), (0x2000300010000uLL >> (16 * v7)) & 3);
  if (v8) {
LABEL_19:
  }
    APSLogErrorAt();
  return v8;
}

uint64_t browser_updateBTLEBrowsing(CFStringRef (__cdecl *a1)(const void *))
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  unint64_t v4 = *(unsigned __int16 *)(v3 + 24);
  if (v4 >= 4)
  {
    int v12 = **(_DWORD **)v3;
    if (v12 <= 60 && (v12 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v13 = 4294960534;
    goto LABEL_44;
  }
  unint64_t v5 = 0x2000100010000uLL >> (16 * v4);
  uint64_t v6 = APBrowserBTLEManagerSetMode(*(void *)(DerivedStorage + 96), v5 & 3);
  if (v6)
  {
    uint64_t v13 = v6;
    goto LABEL_44;
  }
  if ((unsigned __int16)v5 == 2)
  {
    uint64_t v14 = CMBaseObjectGetDerivedStorage();
    uint64_t v15 = v14;
    if (!*(void *)(v14 + 120))
    {
      v16 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v14 + 8));
      *(void *)(v15 + 120) = v16;
      if (!v16)
      {
        APSLogErrorAt();
        browser_ensureConnectivityCheckTimerStopped();
        uint64_t v13 = 4294960568;
        goto LABEL_44;
      }
      handler.version = MEMORY[0x1E4F143A8];
      handler.info = (void *)3221225472;
      handler.retain = (const void *(__cdecl *)(const void *))__browser_ensureConnectivityCheckTimerStarted_block_invoke;
      handler.release = (void (__cdecl *)(const void *))&__block_descriptor_40_e5_v8__0l;
      handler.copyDescription = a1;
      dispatch_source_set_event_handler(v16, &handler);
      CFRetain(a1);
      v17 = *(NSObject **)(v15 + 120);
      v38[0] = MEMORY[0x1E4F143A8];
      v38[1] = 3221225472;
      v38[2] = __browser_ensureConnectivityCheckTimerStarted_block_invoke_2;
      v38[3] = &__block_descriptor_40_e5_v8__0l;
      v38[4] = a1;
      dispatch_source_set_cancel_handler(v17, v38);
      dispatch_time_t v18 = *(NSObject **)(v15 + 120);
      dispatch_time_t v19 = dispatch_time(0, 10000000000);
      dispatch_source_set_timer(v18, v19, 0x2540BE400uLL, 0x3B9ACA00uLL);
      dispatch_resume(*(dispatch_object_t *)(v15 + 120));
    }
    *(unsigned char *)(v15 + 128) = 1;
    uint64_t v20 = CMBaseObjectGetDerivedStorage();
    handler.version = 0;
    memset(&handler.retain, 0, 24);
    handler.info = a1;
    if (*(void *)(v20 + 136)) {
      return 0;
    }
    uint64_t v21 = v20;
    CFAllocatorRef v22 = CFGetAllocator(a1);
    SCDynamicStoreRef v23 = SCDynamicStoreCreate(v22, @"APBrowser:IPv4Listener", (SCDynamicStoreCallBack)browser_handleIPv4EventInternal, &handler);
    if (!v23)
    {
      if (SCError())
      {
        uint64_t v24 = SCError();
        if (!v24) {
          goto LABEL_27;
        }
        uint64_t v13 = v24;
      }
      else
      {
        uint64_t v13 = 4294960596;
      }
      APSLogErrorAt();
      goto LABEL_44;
    }
LABEL_27:
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (!Mutable)
    {
      APSLogErrorAt();
      uint64_t v13 = 4294960568;
      if (!v23)
      {
LABEL_59:
        if (!v13) {
          return v13;
        }
        goto LABEL_44;
      }
LABEL_58:
      CFRelease(v23);
      goto LABEL_59;
    }
    uint64_t v26 = Mutable;
    CFStringRef v27 = (const __CFString *)*MEMORY[0x1E4F41AC8];
    CFStringRef v28 = (const __CFString *)*MEMORY[0x1E4F41AB8];
    CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, (CFStringRef)*MEMORY[0x1E4F41AC8], (CFStringRef)*MEMORY[0x1E4F41AB8], (CFStringRef)*MEMORY[0x1E4F41B10]);
    if (!NetworkInterfaceEntity
      || (CFStringRef v30 = NetworkInterfaceEntity,
          CFArrayAppendValue(v26, NetworkInterfaceEntity),
          CFRelease(v30),
          (CFStringRef v31 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, v27, v28, (CFStringRef)*MEMORY[0x1E4F41B30])) == 0))
    {
      APSLogErrorAt();
      uint64_t v13 = 4294960568;
      goto LABEL_57;
    }
    CFStringRef v32 = v31;
    CFArrayAppendValue(v26, v31);
    CFRelease(v32);
    if (!SCDynamicStoreSetNotificationKeys(v23, 0, v26))
    {
      if (!SCError())
      {
        uint64_t v13 = 4294960596;
        goto LABEL_56;
      }
      uint64_t v33 = SCError();
      if (v33)
      {
        uint64_t v13 = v33;
        goto LABEL_56;
      }
    }
    if (SCDynamicStoreSetDispatchQueue(v23, *(dispatch_queue_t *)(v21 + 8))) {
      goto LABEL_36;
    }
    if (SCError())
    {
      uint64_t v34 = SCError();
      if (!v34)
      {
LABEL_36:
        *(void *)(v21 + 136) = v23;
        CFRetain(a1);
        int v35 = **(_DWORD **)v21;
        if (v35 <= 40 && (v35 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        uint64_t v13 = 0;
        SCDynamicStoreRef v23 = 0;
LABEL_57:
        CFRelease(v26);
        if (!v23) {
          goto LABEL_59;
        }
        goto LABEL_58;
      }
      uint64_t v13 = v34;
    }
    else
    {
      uint64_t v13 = 4294960596;
    }
LABEL_56:
    APSLogErrorAt();
    goto LABEL_57;
  }
  if ((unsigned __int16)v5 == 1)
  {
    browser_ensureConnectivityCheckTimerStopped();
    return 0;
  }
  if (!(_WORD)v5)
  {
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 112))
    {
      handler.version = MEMORY[0x1E4F143A8];
      handler.info = (void *)3221225472;
      handler.retain = (const void *(__cdecl *)(const void *))__browser_flushAllBTLEDevices_block_invoke;
      handler.release = (void (__cdecl *)(const void *))&__block_descriptor_40_e15_v24__0r_v8r_v16l;
      handler.copyDescription = a1;
      CFDictionaryApplyBlock();
    }
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 112));
    uint64_t updated = browser_updateAVDevicePresent(a1);
    if (!updated)
    {
      browser_ensureConnectivityCheckTimerStopped();
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      int v9 = *(const __SCDynamicStore **)(v8 + 136);
      if (v9)
      {
        SCDynamicStoreSetDispatchQueue(v9, 0);
        uint64_t v10 = *(const void **)(v8 + 136);
        if (v10)
        {
          CFRelease(v10);
          *(void *)(v8 + 136) = 0;
        }
        CFRelease(a1);
        int v11 = **(_DWORD **)v8;
        if (v11 <= 40 && (v11 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
      }
      return 0;
    }
    uint64_t v13 = updated;
LABEL_44:
    APSLogErrorAt();
    return v13;
  }
  int v36 = **(_DWORD **)DerivedStorage;
  if (v36 <= 60 && (v36 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  return 4294960534;
}

void browser_sendPowerLogDiscoveryModeEvent()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(__CFString **)(DerivedStorage + 64) == @"AirPlay")
  {
    if (APBrowserGetModeString(*(unsigned __int16 *)(DerivedStorage + 24))
      && (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
    {
      CFMutableDictionaryRef v2 = Mutable;
      CFDictionarySetCString();
      PLLogRegisteredEvent();
      CFRelease(v2);
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

uint64_t browser_removeAirPlayP2PServiceForNearbyDevices()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v1 = (const __CFArray *)CFDictionaryCopyKeys();
  if (!v1) {
    return 0;
  }
  CFArrayRef v2 = v1;
  CFIndex Count = CFArrayGetCount(v1);
  if (Count >= 1)
  {
    CFIndex v6 = Count;
    CFIndex v7 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, v7);
      if (!ValueAtIndex)
      {
        uint64_t v4 = 4294960534;
        goto LABEL_20;
      }
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 200), ValueAtIndex);
      if (!Value) {
        break;
      }
      uint64_t v10 = Value;
      CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"AirPlayP2PBonjourInfo");
      if (v11)
      {
        CFDictionaryGetValue(v11, @"name");
        int v12 = **(_DWORD **)DerivedStorage;
        if (v12 <= 40 && (v12 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        CFDictionaryRemoveValue(v10, @"AirPlayP2PBonjourInfo");
      }
      if (v6 == ++v7) {
        goto LABEL_3;
      }
    }
    uint64_t v4 = 4294960569;
LABEL_20:
    APSLogErrorAt();
  }
  else
  {
LABEL_3:
    uint64_t v4 = 0;
  }
  CFRelease(v2);
  return v4;
}

uint64_t browser_ensureWiFiPowerChangedListeningStarted(const void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[196] || DerivedStorage[197]) {
    return 0;
  }
  if (DerivedStorage[192])
  {
    uint64_t started = browser_startWiFiPowerChangedListener((uint64_t)a1);
    if (started) {
      goto LABEL_9;
    }
  }
  else
  {
    DerivedStorage[197] = 1;
    uint64_t started = browser_ensureWiFiAvailableListeningStarted(a1);
    if (started) {
LABEL_9:
    }
      APSLogErrorAt();
  }
  return started;
}

uint64_t browser_ensureWiFiAvailableListeningStarted(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 194)) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 192)) {
    return 0;
  }
  if (!APSIsVirtualMachine())
  {
    uint64_t v5 = APConnectivityHelperRegisterForEvent(*(void *)(v3 + 184), (uint64_t)a1, 1);
    if (!v5)
    {
      *(unsigned char *)(v3 + 194) = 1;
      return v5;
    }
LABEL_13:
    APSLogErrorAt();
    return v5;
  }
  int v4 = **(_DWORD **)v3;
  if (v4 <= 40 && (v4 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  *(unsigned char *)(v3 + 194) = 1;
  uint64_t v5 = browser_handleConnectivityHelperEventInternal(a1, 1, 0);
  if (v5) {
    goto LABEL_13;
  }
  return v5;
}

void browser_ensureConnectivityCheckTimerStopped()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  CFArrayRef v2 = *(NSObject **)(DerivedStorage + 120);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 120));
    dispatch_release(v2);
    *(void *)(v1 + 120) = 0;
  }
  *(unsigned char *)(v1 + 128) = 0;
}

uint64_t _APBrokerManagerUpdateBrowsing(uint64_t a1)
{
  FigSimpleMutexCheckIsLockedOnThisThread();
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (!*(unsigned char *)(a1 + 280))
  {
    *(unsigned char *)(a1 + 280) = 1;
    CFRetain((CFTypeRef)a1);
    CFArrayRef v2 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___APBrokerManagerEnsureKnownNetworkProfileMonitoringStarted_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = a1;
    dispatch_async(v2, block);
  }
  FigSimpleMutexCheckIsLockedOnThisThread();
  int v3 = *(unsigned __int16 *)(a1 + 130);
  if ((v3 - 2) < 2)
  {
LABEL_14:
    int v3 = 2;
    goto LABEL_19;
  }
  if (*(_WORD *)(a1 + 130))
  {
    if (v3 == 1)
    {
      if (APSSettingsGetInt64())
      {
        if (gLogCategory_APBrokerManager > 50
          || gLogCategory_APBrokerManager == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_18;
        }
        goto LABEL_12;
      }
      if (*(unsigned char *)(a1 + 281)) {
        goto LABEL_14;
      }
      if (gLogCategory_APBrokerManager > 30
        || gLogCategory_APBrokerManager == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_18;
      }
    }
    else if (gLogCategory_APBrokerManager > 60 {
           || gLogCategory_APBrokerManager == -1 && !_LogCategory_Initialize())
    }
    {
      goto LABEL_18;
    }
LABEL_12:
    LogPrintF();
LABEL_18:
    int v3 = 0;
  }
LABEL_19:
  if (v3 != *(unsigned __int16 *)(a1 + 128))
  {
    *(_WORD *)(a1 + 128) = v3;
    if (gLogCategory_APBrokerManager <= 30)
    {
      if (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()) {
        LogPrintF();
      }
      int v3 = *(unsigned __int16 *)(a1 + 128);
    }
  }
  if (v3 == 2)
  {
    FigSimpleMutexCheckIsLockedOnThisThread();
    if (!*(unsigned char *)(a1 + 137))
    {
      CFDictionaryApplyBlock();
      if (gLogCategory_APBrokerManager <= 50
        && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(unsigned char *)(a1 + 137) = 1;
    }
  }
  else
  {
    if (v3 != 1) {
      int v3 = 0;
    }
    if (*(_DWORD *)(a1 + 132)) {
      int v4 = 1;
    }
    else {
      int v4 = v3;
    }
    FigSimpleMutexCheckIsLockedOnThisThread();
    if (*(unsigned char *)(a1 + 137))
    {
      CFDictionaryApplyBlock();
      if (gLogCategory_APBrokerManager <= 50
        && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    *(unsigned char *)(a1 + 137) = 0;
    if (!v4)
    {
      FigSimpleMutexCheckIsLockedOnThisThread();
      if (*(unsigned char *)(a1 + 136))
      {
        _APBrokerManagerDiscoveryDelegateStop(a1);
        _APBrokerManagerRemoveAllBrokerGroups(a1);
        if (gLogCategory_APBrokerManager <= 50
          && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v6 = 0;
        *(unsigned char *)(a1 + 136) = 0;
        return v6;
      }
      return 0;
    }
  }
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (*(unsigned char *)(a1 + 136)) {
    return 0;
  }
  LODWORD(block[0]) = 0;
  if (*(void *)(a1 + 48))
  {
    uint64_t v5 = (const void *)_APBrokerManagerCopyReferencedObjectIfNecessary(*(void *)(a1 + 72), (int *)block);
    if (LODWORD(block[0])
      || (LODWORD(block[0]) = (*(uint64_t (**)(const void *, void))(a1 + 48))(v5, *(void *)(a1 + 80))) != 0)
    {
      APSLogErrorAt();
      if (!v5)
      {
LABEL_53:
        uint64_t v6 = LODWORD(block[0]);
        if (LODWORD(block[0]))
        {
          APSLogErrorAt();
          APSLogErrorAt();
          return v6;
        }
        goto LABEL_54;
      }
    }
    else if (!v5)
    {
      goto LABEL_53;
    }
    CFRelease(v5);
    goto LABEL_53;
  }
LABEL_54:
  if (gLogCategory_APBrokerManager <= 50
    && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v6 = 0;
  *(unsigned char *)(a1 + 136) = 1;
  return v6;
}

uint64_t _APBrokerManagerCopyReferencedObjectIfNecessary(uint64_t result, int *a2)
{
  if (a2)
  {
    if (result && (uint64_t result = FigCFWeakReferenceHolderCopyReferencedObject()) == 0)
    {
      APSLogErrorAt();
      uint64_t result = 0;
      int v3 = -6723;
    }
    else
    {
      int v3 = 0;
    }
    *a2 = v3;
  }
  else
  {
    APSLogErrorAt();
    return 0;
  }
  return result;
}

uint64_t BonjourDiscoveryDelegateStart()
{
  uint64_t v0 = BonjourBrowser_Start();
  if (v0) {
    APSLogErrorAt();
  }
  return v0;
}

uint64_t APBrowserRapportManagerSetMode(uint64_t a1, __int16 a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  int v10 = 0;
  CFArrayRef v2 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APBrowserRapportManagerSetMode_block_invoke;
  block[3] = &unk_1E688BD40;
  block[4] = &v7;
  void block[5] = a1;
  __int16 v6 = a2;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

const char *APBrowserGetModeString(unsigned int a1)
{
  if (a1 > 3) {
    return "Unknown";
  }
  else {
    return off_1E688B740[(__int16)a1];
  }
}

uint64_t APBrowserBTLEManagerSetMode(uint64_t a1, __int16 a2)
{
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x2020000000;
  int v12 = 0;
  uint64_t v3 = *(void **)(a1 + 16);
  int v4 = [v3 queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APBrowserBTLEManagerSetMode_block_invoke;
  block[3] = &unk_1E688ABD0;
  block[4] = v3;
  void block[5] = &v9;
  __int16 v8 = a2;
  dispatch_sync(v4, block);
  uint64_t v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1D0884F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t APBrokerManagerSetDelegate(uint64_t a1, const void *a2, long long *a3)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  __int16 v6 = *(const void **)(a1 + 192);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 192) = 0;
  }
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  ++*(_DWORD *)(a1 + 200);
  if (a3)
  {
    if (a2) {
      CFTypeRef v7 = CFRetain(a2);
    }
    else {
      CFTypeRef v7 = 0;
    }
    *(void *)(a1 + 192) = v7;
    long long v8 = *a3;
    long long v9 = a3[2];
    *(_OWORD *)(a1 + 160) = a3[1];
    *(_OWORD *)(a1 + 176) = v9;
    *(_OWORD *)(a1 + 144) = v8;
    FigSimpleMutexCheckIsLockedOnThisThread();
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
  return 0;
}

uint64_t APBonjourBrowserSetMode(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v3, (dispatch_function_t)_APBonjourBrowserSetMode);
  return HIDWORD(v4);
}

uint64_t browser_SetMode()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = APSDispatchSyncTask();
  if (v0) {
    APSLogErrorAt();
  }
  return v0;
}

void APBrokerKeychainUtilsRemoveExpiredAuthTokens()
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = 0;
  uint64_t v0 = objc_opt_new();
  if (!v0)
  {
    APSLogErrorAt();
    uint64_t v14 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-6728 userInfo:0];
    uint64_t v4 = 0;
    uint64_t v1 = 0;
LABEL_29:
    uint64_t v22 = v14;
    goto LABEL_26;
  }
  uint64_t v1 = objc_opt_new();
  if (!v1)
  {
    APSLogErrorAt();
    uint64_t v14 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-6728 userInfo:0];
    uint64_t v4 = 0;
    goto LABEL_29;
  }
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9C8], "date"), "timeIntervalSinceReferenceDate");
  double v3 = v2;
  uint64_t v4 = _CopyAllAuthTokenKeychainItems(v0, &v22);
  if (!NSErrorToOSStatus())
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v5 = [v4 countByEnumeratingWithState:&v18 objects:v23 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v19;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v19 != v7) {
            objc_enumerationMutation(v4);
          }
          long long v9 = *(void **)(*((void *)&v18 + 1) + 8 * v8);
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v9, "metadata", v15, v16), "objectForKeyedSubscript:", @"authTokenTTL"), "doubleValue");
          double v11 = v10;
          id v17 = 0;
          objc_msgSend((id)objc_msgSend(v9, "dateModified"), "timeIntervalSinceReferenceDate");
          if (v3 - v12 >= v11)
          {
            [v0 removeItemMatchingItem:v9 error:&v22];
            if (v22)
            {
              if (gLogCategory_APBrokerKeychainUtils <= 90
                && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
              {
                uint64_t v15 = [v9 identifier];
                uint64_t v16 = v22;
                LogPrintF();
              }
              uint64_t v22 = 0;
            }
            else if (gLogCategory_APBrokerKeychainUtils <= 30 {
                   && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
            }
            {
              uint64_t v15 = [v9 identifier];
              LogPrintF();
            }
            if (APSIsPairingGroupEnabled())
            {
              APBrokerKeychainUtilsCopyInfoFromKeychainItemID((CFStringRef)[v9 identifier], 0, &v17);
              objc_msgSend(v1, "updatePairedPeersWithGroupID:groupInfo:options:completion:");
            }
          }

          ++v8;
        }
        while (v6 != v8);
        uint64_t v13 = [v4 countByEnumeratingWithState:&v18 objects:v23 count:16];
        uint64_t v6 = v13;
      }
      while (v13);
    }
  }
LABEL_26:
}

void *_CopyAllAuthTokenKeychainItems(void *a1, void *a2)
{
  double v3 = a1;
  uint64_t v7 = 0;
  if (a1)
  {
    uint64_t v4 = objc_opt_new();
    uint64_t v5 = v4;
    if (v4)
    {
      [v4 setAccessGroup:@"com.apple.airplay"];
      [v5 setType:@"APBroker"];
      double v3 = (void *)[v3 copyItemsMatchingItem:v5 flags:0 error:&v7];
    }
    else
    {
      APSLogErrorAt();
      double v3 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v5 = 0;
  }
  if (a2) {
    *a2 = v7;
  }

  return v3;
}

void _APBonjourBrowserSetMode(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 8);
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  if (!v4)
  {
    if (!*(unsigned char *)(v2 + 211)) {
      goto LABEL_8;
    }
LABEL_4:
    int v6 = 0;
LABEL_19:
    uint64_t v8 = 0;
    goto LABEL_20;
  }
  do
  {
    uint64_t v5 = (_WORD *)v4;
    uint64_t v4 = *(void *)(v4 + 24);
  }
  while (v4);
  if (*(unsigned char *)(v2 + 211) || *v5 == 2) {
    goto LABEL_4;
  }
LABEL_8:
  if (!*(void *)(v2 + 216))
  {
    int v6 = -72211;
LABEL_18:
    APSLogErrorAt();
    goto LABEL_19;
  }
  if (v3 >= 4)
  {
    if (gLogCategory_APBonjourBrowser <= 90
      && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    int v6 = -72211;
    goto LABEL_18;
  }
  uint64_t v7 = malloc_type_calloc(1uLL, 0x20uLL, 0x10620408E24C83AuLL);
  uint64_t v8 = v7;
  if (!v7)
  {
    APSLogErrorAt();
    int v6 = -72210;
    goto LABEL_20;
  }
  *uint64_t v7 = 0;
  v7[4] = v3;
  int v6 = _APBonjourBrowserEnqueueOperation(v2, (uint64_t)v7);
  if (!v6) {
    goto LABEL_19;
  }
  APSLogErrorAt();
LABEL_20:
  _APBonjourBrowserOperationDisposeNullSafe(v8);
  *(_DWORD *)(a1 + 12) = v6;
}

uint64_t _APBonjourBrowserEnqueueOperation(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    do
    {
      uint64_t v5 = (_WORD *)v4;
      uint64_t v4 = *(void *)(v4 + 24);
    }
    while (v4);
    if (!*(unsigned char *)(a1 + 211) && *v5 != 2)
    {
      do
      {
        uint64_t v7 = v2;
        uint64_t v2 = *(void *)(v2 + 24);
      }
      while (v2);
      unsigned int v3 = (void *)(v7 + 24);
      goto LABEL_11;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 211)) {
    return 0;
  }
LABEL_11:
  *unsigned int v3 = a2;
  *(void *)(a2 + 24) = 0;
  uint64_t v6 = _APBonjourBrowserProcessOperationQueue((char *)a1);
  if (v6) {
    APSLogErrorAt();
  }
  return v6;
}

uint64_t _APBonjourBrowserProcessOperationQueue(char *cf)
{
  uint64_t v1 = (unsigned __int16 *)*((void *)cf + 4);
  if (v1)
  {
    unsigned int v3 = cf + 40;
    while (1)
    {
      uint64_t v4 = (char *)*v1;
      switch(*v1)
      {
        case 0u:
        case 3u:
        case 4u:
          if (gLogCategory_APBonjourBrowser <= 30
            && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
          {
            StringForMode = _APBonjourBrowserGetStringForMode(*((unsigned __int16 *)cf + 20));
            if (cf[56]) {
              uint64_t v6 = "yes";
            }
            else {
              uint64_t v6 = "no";
            }
            if (cf[57]) {
              uint64_t v7 = "yes";
            }
            else {
              uint64_t v7 = "no";
            }
            int v35 = v6;
            int v36 = v7;
            uint64_t v33 = cf;
            uint64_t v34 = StringForMode;
            LogPrintF();
          }
          double v11 = v1 + 4;
          double v12 = (const char *)*v1;
          if (*v1) {
            double v11 = (unsigned __int16 *)v3;
          }
          unsigned int v13 = *v11;
          if (v12 == 3)
          {
            int v14 = 1;
          }
          else
          {
            int v14 = cf[56];
            if (v12 == 4)
            {
              int v15 = 1;
              goto LABEL_30;
            }
          }
          int v15 = cf[57];
LABEL_30:
          if (*((unsigned char *)v1 + 16))
          {
            if (gLogCategory_APBonjourBrowser <= 30)
            {
              if (gLogCategory_APBonjourBrowser != -1) {
                goto LABEL_33;
              }
              if (_LogCategory_Initialize())
              {
                double v12 = (const char *)*v1;
LABEL_33:
                uint64_t v16 = _APBonjourBrowserGetStringForMode(v13);
                if (v14) {
                  id v17 = "yes";
                }
                else {
                  id v17 = "no";
                }
                if (v15) {
                  long long v18 = "yes";
                }
                else {
                  long long v18 = "no";
                }
                int v36 = v17;
                dispatch_source_t v37 = v18;
                uint64_t v34 = v12;
                int v35 = v16;
                uint64_t v33 = cf;
                LogPrintF();
              }
            }
            uint64_t v10 = 0;
            goto LABEL_57;
          }
          if (gLogCategory_APBonjourBrowser > 30) {
            goto LABEL_56;
          }
          if (gLogCategory_APBonjourBrowser != -1) {
            goto LABEL_42;
          }
          if (_LogCategory_Initialize())
          {
            double v12 = (const char *)*v1;
LABEL_42:
            long long v19 = _APBonjourBrowserGetStringForMode(v13);
            if (v14) {
              long long v20 = "yes";
            }
            else {
              long long v20 = "no";
            }
            if (v15) {
              long long v21 = "yes";
            }
            else {
              long long v21 = "no";
            }
            int v36 = v20;
            dispatch_source_t v37 = v21;
            uint64_t v34 = v12;
            int v35 = v19;
            uint64_t v33 = cf;
            LogPrintF();
          }
LABEL_56:
          uint64_t v10 = _APBonjourBrowserSetModeInternal((uint64_t)cf, v13, v14, v15, (_DWORD *)v1 + 5);
LABEL_57:
          int v22 = *((_DWORD *)v1 + 5);
          *((unsigned char *)v1 + 16) = v22 != 0;
          if (!v22)
          {
            if (gLogCategory_APBonjourBrowser <= 30
              && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
            {
              SCDynamicStoreRef v23 = (const char *)*v1;
              uint64_t v24 = _APBonjourBrowserGetStringForMode(v13);
              if (v14) {
                int v25 = "yes";
              }
              else {
                int v25 = "no";
              }
              if (v15) {
                uint64_t v26 = "yes";
              }
              else {
                uint64_t v26 = "no";
              }
              int v36 = v25;
              dispatch_source_t v37 = v26;
              uint64_t v34 = v23;
              int v35 = v24;
              uint64_t v33 = cf;
              LogPrintF();
            }
            _APBonjourBrowserHandleModeChangeCompleteInternal((uint64_t)cf, v13);
            if (gLogCategory_APBonjourBrowser <= 30
              && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
            {
              CFStringRef v27 = _APBonjourBrowserGetStringForMode(*((unsigned __int16 *)cf + 20));
              if (cf[56]) {
                CFStringRef v28 = "yes";
              }
              else {
                CFStringRef v28 = "no";
              }
              if (cf[57]) {
                v29 = "yes";
              }
              else {
                v29 = "no";
              }
              int v35 = v28;
              int v36 = v29;
              uint64_t v33 = cf;
              uint64_t v34 = v27;
              goto LABEL_77;
            }
            goto LABEL_81;
          }
LABEL_82:
          if (*((unsigned char *)v1 + 16)) {
            return v10;
          }
          uint64_t v30 = *((void *)cf + 4);
          if (!v30)
          {
            uint64_t v10 = 4294895083;
            APSLogErrorAt();
            APSLogErrorAt();
            return v10;
          }
          *((void *)cf + 4) = *(void *)(v30 + 24);
          _APBonjourBrowserOperationDisposeNullSafe(v1);
          uint64_t v1 = (unsigned __int16 *)*((void *)cf + 4);
          if (!v1) {
            return 0;
          }
          break;
        case 1u:
          uint64_t v8 = *((void *)v1 + 1);
          long long v9 = (const void *)*((void *)cf + 6);
          if (v8) {
            CFRetain(*((CFTypeRef *)v1 + 1));
          }
          *((void *)cf + 6) = v8;
          if (v9) {
            CFRelease(v9);
          }
          goto LABEL_81;
        case 2u:
          if (*((unsigned char *)v1 + 16))
          {
            uint64_t v10 = 0;
          }
          else
          {
            uint64_t v10 = _APBonjourBrowserSetModeInternal((uint64_t)cf, 0, 0, 0, (_DWORD *)v1 + 5);
            if (*((void *)cf + 29))
            {
              if (gLogCategory_APBonjourBrowser <= 50
                && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
              {
                uint64_t v33 = (char *)*((void *)cf + 10);
                LogPrintF();
              }
              objc_msgSend(*((id *)cf + 29), "invalidate", v33, v34, v35, v36, v37);

              *((void *)cf + 29) = 0;
            }
          }
          int v31 = *((_DWORD *)v1 + 5);
          *((unsigned char *)v1 + 16) = v31 != 0;
          if (!v31)
          {
            _APBonjourBrowserHandleModeChangeCompleteInternal((uint64_t)cf, 0);
            _APBonjourBrowserDispatchEvent((uint64_t)cf, 3, 0);
            uint64_t v10 = 0;
            cf[211] = 1;
          }
          goto LABEL_82;
        default:
          if (gLogCategory_APBonjourBrowser > 90) {
            goto LABEL_81;
          }
          if (gLogCategory_APBonjourBrowser != -1) {
            goto LABEL_15;
          }
          if (_LogCategory_Initialize())
          {
            uint64_t v4 = (char *)*v1;
LABEL_15:
            uint64_t v33 = v4;
LABEL_77:
            LogPrintF();
          }
LABEL_81:
          uint64_t v10 = 0;
          goto LABEL_82;
      }
    }
  }
  return 0;
}

void _APBonjourBrowserOperationDisposeNullSafe(void *a1)
{
  if (a1)
  {
    int v2 = *(unsigned __int16 *)a1;
    if ((v2 - 2) >= 3 && v2 != 0)
    {
      if (v2 == 1)
      {
        uint64_t v4 = (const void *)a1[1];
        if (v4) {
          CFRelease(v4);
        }
      }
      else if (gLogCategory_APBonjourBrowser <= 60 {
             && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
      }
      {
        LogPrintF();
      }
    }
    free(a1);
  }
}

uint64_t _APBonjourBrowserSetModeInternal(uint64_t a1, unsigned int a2, int a3, int a4, _DWORD *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v28 = 0;
  if (*(unsigned __int16 *)(a1 + 40) == a2
    && *(unsigned __int8 *)(a1 + 56) == a3
    && *(unsigned __int8 *)(a1 + 57) == a4)
  {
    goto LABEL_99;
  }
  if (a3)
  {
    if (!*(unsigned char *)(a1 + 56))
    {
      *(unsigned char *)(a1 + 56) = 1;
      if (gLogCategory_APBonjourBrowser <= 50
        && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
  }
  if (*(unsigned __int8 *)(a1 + 57) != a4)
  {
    *(unsigned char *)(a1 + 57) = 1;
    if (gLogCategory_APBonjourBrowser <= 50
      && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  if (!a2)
  {
    _APBonjourBrowserStopBrowsing(a1, &v28);
    _APBonjourBrowserStopBrowsingForP2PInfra(a1, &v28);
    _APBonjourBrowserStopBrowsingNANPartial(a1, &v28);
LABEL_98:
    _APBonjourBrowserStopBrowsingNANFull(a1, &v28);
    goto LABEL_99;
  }
  *(void *)buffer = 0;
  uint64_t v30 = 0;
  char v31 = 0;
  uint64_t v9 = *(void *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 88);
  if (APSIsDemoModeEnabled()) {
    uint64_t v11 = v10 | 0x30000000000000;
  }
  else {
    uint64_t v11 = v10;
  }
  if (*(unsigned char *)(a1 + 208))
  {
    if (*(unsigned char *)(a1 + 57) && a2 == 2) {
      v11 |= 0x400000000000000uLL;
    }
  }
  LOBYTE(v32) = 0;
  if (IsAppleTV() || APSIsAPMSpeaker()) {
    LOBYTE(v32) = 1;
  }
  char v13 = 30;
  if (IsAppleInternalBuild())
  {
    if (APSSettingsGetBooleanIfPresent()) {
      char v13 = 50;
    }
    else {
      char v13 = 30;
    }
  }
  if ((v13 & 0x3E) >= gLogCategory_APBonjourBrowser
    && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if ((_BYTE)v32) {
    uint64_t v14 = v11 | 0x43000000000000;
  }
  else {
    uint64_t v14 = v11;
  }
  if (a2 == 1) {
    v14 |= 0x4000000000000000uLL;
  }
  if (*(unsigned char *)(a1 + 209)) {
    uint64_t v15 = v14 | 0x3000000000000000;
  }
  else {
    uint64_t v15 = v14;
  }
  if (gLogCategory_APBonjourBrowser <= 40
    && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
  {
    _APBonjourBrowserGetStringForMode(a2);
    LogPrintF();
  }
  buffer[0] = 0;
  CFStringRef v16 = *(const __CFString **)(a1 + 48);
  if (v16 && !CFStringGetCString(v16, buffer, 17, 0x8000100u))
  {
    APSLogErrorAt();
    uint64_t v24 = 4294895084;
LABEL_116:
    _APBonjourBrowserStopBrowsing(a1, &v28);
    APSLogErrorAt();
    goto LABEL_100;
  }
  if (*(unsigned char *)(a1 + 129))
  {
    uint64_t started = _APBonjourBrowserStartBonjourBrowser((const void *)a1, *(void *)(a1 + 136), *(void *)(a1 + 64), v9, (uint64_t)"-1", v15 & 0xFBFFFFFFFFFFFFFFLL, (uint64_t)"local browsing", (unsigned char *)(a1 + 130));
    if (started)
    {
      uint64_t v24 = started;
      goto LABEL_115;
    }
  }
  if (*(unsigned char *)(a1 + 56))
  {
    long long v18 = *(void **)(a1 + 232);
    if (v18) {
      [v18 forceReportCachedDevices];
    }
  }
  uint64_t v19 = _APBonjourBrowserStartBonjourBrowser((const void *)a1, *(void *)(a1 + 96), *(void *)(a1 + 64), v9, (uint64_t)buffer, v15, (uint64_t)"general browsing", (unsigned char *)(a1 + 113));
  if (v19)
  {
    uint64_t v24 = v19;
    goto LABEL_115;
  }
  uint64_t v20 = *(void *)(a1 + 104);
  if (v20)
  {
    uint64_t v21 = _APBonjourBrowserStartBonjourBrowser((const void *)a1, v20, (uint64_t)"_airplay-alt._tcp.", v9, (uint64_t)buffer, v15, (uint64_t)"browsing", (unsigned char *)(a1 + 112));
    if (v21)
    {
      uint64_t v24 = v21;
      goto LABEL_115;
    }
  }
  if (*(unsigned char *)(a1 + 114))
  {
    if (*(unsigned char *)(a1 + 129))
    {
      uint64_t v22 = _APBonjourBrowserStartBonjourBrowser((const void *)a1, *(void *)(a1 + 152), (uint64_t)"_raop._tcp.", v9, (uint64_t)"-1", v15 & 0xFBFFFFFFFFFFFFFFLL, (uint64_t)"local browsing", (unsigned char *)(a1 + 144));
      if (v22)
      {
        uint64_t v24 = v22;
        goto LABEL_115;
      }
    }
    uint64_t v23 = _APBonjourBrowserStartBonjourBrowser((const void *)a1, *(void *)(a1 + 120), (uint64_t)"_raop._tcp.", v9, (uint64_t)buffer, v15, (uint64_t)"general browsing", (unsigned char *)(a1 + 128));
    if (v23)
    {
      uint64_t v24 = v23;
      goto LABEL_115;
    }
  }
  if (!*(unsigned char *)(a1 + 160) || a2 != 2 || !*(unsigned char *)(a1 + 57)) {
    goto LABEL_80;
  }
  char v33 = 0;
  long long v32 = *(_OWORD *)"awdl0";
  if (*(unsigned char *)(a1 + 161)) {
    goto LABEL_81;
  }
  if (BonjourBrowser_Start())
  {
    APSLogErrorAt();
LABEL_80:
    _APBonjourBrowserStopBrowsingForP2PInfra(a1, &v28);
    goto LABEL_81;
  }
  CFRetain((CFTypeRef)a1);
  *(unsigned char *)(a1 + 161) = 1;
  if (gLogCategory_APBonjourBrowser <= 40
    && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_81:
  if (!*(unsigned char *)(a1 + 176) || a2 != 2 || !*(unsigned char *)(a1 + 56))
  {
    _APBonjourBrowserStopBrowsingNANPartial(a1, &v28);
    goto LABEL_90;
  }
  char v33 = 0;
  long long v32 = *(_OWORD *)"nan0";
  if (!*(unsigned char *)(a1 + 177))
  {
    uint64_t v25 = BonjourBrowser_Start();
    if (!v25)
    {
      CFRetain((CFTypeRef)a1);
      *(unsigned char *)(a1 + 177) = 1;
      if (gLogCategory_APBonjourBrowser <= 50
        && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_90;
    }
    uint64_t v24 = v25;
    APSLogErrorAt();
    if (gLogCategory_APBonjourBrowser <= 90
      && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    _APBonjourBrowserStopBrowsingNANPartial(a1, &v28);
LABEL_115:
    APSLogErrorAt();
    goto LABEL_116;
  }
LABEL_90:
  if (!*(unsigned char *)(a1 + 192) || a2 != 2 || !*(unsigned char *)(a1 + 56)) {
    goto LABEL_98;
  }
  char v33 = 0;
  long long v32 = *(_OWORD *)"nan0";
  if (!*(unsigned char *)(a1 + 193))
  {
    uint64_t v26 = BonjourBrowser_Start();
    if (!v26)
    {
      CFRetain((CFTypeRef)a1);
      *(unsigned char *)(a1 + 193) = 1;
      if (gLogCategory_APBonjourBrowser <= 50
        && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_99;
    }
    uint64_t v24 = v26;
    APSLogErrorAt();
    if (gLogCategory_APBonjourBrowser <= 90
      && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    _APBonjourBrowserStopBrowsingNANFull(a1, &v28);
    goto LABEL_115;
  }
LABEL_99:
  uint64_t v24 = 0;
LABEL_100:
  *a5 = v28;
  return v24;
}

uint64_t _APBonjourBrowserStartBonjourBrowser(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned char *a8)
{
  if (a2)
  {
    uint64_t v10 = BonjourBrowser_Start();
    if (v10)
    {
      uint64_t v11 = v10;
      APSLogErrorAt();
      return v11;
    }
    if (!*a8)
    {
      CFRetain(a1);
      *a8 = 1;
    }
    if (gLogCategory_APBonjourBrowser <= 40
      && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  return 0;
}

uint64_t _APBonjourBrowserStopBrowsingNANPartial(uint64_t result, _DWORD *a2)
{
  int v3 = *(unsigned __int8 *)(result + 177);
  if (*(unsigned char *)(result + 177))
  {
    *(unsigned char *)(result + 177) = 0;
    uint64_t result = BonjourBrowser_Stop();
    if (gLogCategory_APBonjourBrowser <= 50)
    {
      if (gLogCategory_APBonjourBrowser != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
        uint64_t result = LogPrintF();
      }
    }
    int v3 = 1;
  }
  if (a2) {
    *a2 += v3;
  }
  return result;
}

uint64_t _APBonjourBrowserStopBrowsingNANFull(uint64_t result, _DWORD *a2)
{
  int v3 = *(unsigned __int8 *)(result + 193);
  if (*(unsigned char *)(result + 193))
  {
    *(unsigned char *)(result + 193) = 0;
    uint64_t result = BonjourBrowser_Stop();
    if (gLogCategory_APBonjourBrowser <= 50)
    {
      if (gLogCategory_APBonjourBrowser != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
        uint64_t result = LogPrintF();
      }
    }
    int v3 = 1;
  }
  if (a2) {
    *a2 += v3;
  }
  return result;
}

uint64_t _APBonjourBrowserStopBrowsingForP2PInfra(uint64_t result, _DWORD *a2)
{
  int v3 = *(unsigned __int8 *)(result + 161);
  if (*(unsigned char *)(result + 161))
  {
    *(unsigned char *)(result + 161) = 0;
    uint64_t result = BonjourBrowser_Stop();
    if (gLogCategory_APBonjourBrowser <= 40)
    {
      if (gLogCategory_APBonjourBrowser != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
        uint64_t result = LogPrintF();
      }
    }
    int v3 = 1;
  }
  if (a2) {
    *a2 += v3;
  }
  return result;
}

uint64_t _APBonjourBrowserHandleModeChangeCompleteInternal(uint64_t cf, unsigned int a2)
{
  if (*(unsigned __int16 *)(cf + 40) == a2) {
    return cf;
  }
  uint64_t v3 = cf;
  *(_WORD *)(cf + 40) = a2;
  if (gLogCategory_APBonjourBrowser <= 30)
  {
    unsigned int v4 = a2;
    if (gLogCategory_APBonjourBrowser != -1)
    {
LABEL_4:
      _APBonjourBrowserGetStringForMode(v4);
      cf = LogPrintF();
      goto LABEL_6;
    }
    cf = _LogCategory_Initialize();
    if (cf)
    {
      unsigned int v4 = *(unsigned __int16 *)(v3 + 40);
      goto LABEL_4;
    }
  }
LABEL_6:
  if (!a2)
  {
    return _APBonjourBrowserDispatchEvent(v3, 2, 0);
  }
  return cf;
}

const char *_APBonjourBrowserGetStringForMode(unsigned int a1)
{
  if (a1 < 4) {
    return off_1E688B3D8[(__int16)a1];
  }
  if (gLogCategory_APBonjourBrowser <= 60
    && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return "Unrecognized";
}

uint64_t APTPackageRTPBufferedCreate(const __CFAllocator *a1, void *a2)
{
  return APTPackageRTPBufferedCreateWithBBuf(a1, 0, a2);
}

uint64_t APTPackageRTPBufferedCreateWithBBuf(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, void *a3)
{
  memset(dataLength, 0, sizeof(dataLength));
  CMBlockBufferRef blockBufferOut = 0;
  APTransportPackageGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6)
  {
    uint64_t v13 = v6;
    goto LABEL_30;
  }
  uint64_t DerivedStorage = (CFAllocatorRef **)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = APTransportParcelMake(3uLL, 0, DerivedStorage);
  if (v8)
  {
    uint64_t v13 = v8;
    goto LABEL_30;
  }
  if (a2)
  {
    size_t v9 = CMBlockBufferGetDataLength(a2);
    if (v9 <= 2)
    {
      uint64_t v13 = 4294894936;
      goto LABEL_30;
    }
    size_t v10 = v9;
    uint64_t PayloadSize = APTPackageRTPBufferedGetPayloadSize(a2, dataLength);
    if (PayloadSize)
    {
      uint64_t v13 = PayloadSize;
      goto LABEL_30;
    }
    if (v10 != dataLength[0] + 3)
    {
      uint64_t v13 = 4294894936;
      goto LABEL_30;
    }
    if (dataLength[0])
    {
      uint64_t v12 = CMBlockBufferCreateWithBufferReference(a1, a2, 3uLL, dataLength[0], 0, &blockBufferOut);
      if (v12)
      {
        uint64_t v13 = v12;
LABEL_30:
        APSLogErrorAt();
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v14 = CMBlockBufferCreateEmpty(a1, 0, 0, &blockBufferOut);
      if (v14)
      {
        uint64_t v13 = v14;
        goto LABEL_30;
      }
    }
    uint64_t v15 = APTransportParcelSetMessageData(*DerivedStorage, blockBufferOut);
    if (v15)
    {
      uint64_t v13 = v15;
      goto LABEL_30;
    }
    APTransportParcelSetMessageType((uint64_t)*DerivedStorage, 1651861089);
  }
  if (gLogCategory_APTPackageRTPBuffered <= 30
    && (gLogCategory_APTPackageRTPBuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v13 = 0;
  *a3 = *(void *)&dataLength[1];
  *(void *)&dataLength[1] = 0;
LABEL_18:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (*(void *)&dataLength[1]) {
    CFRelease(*(CFTypeRef *)&dataLength[1]);
  }
  return v13;
}

uint64_t APTPackageRTPBufferedGetPayloadSize(OpaqueCMBlockBuffer *a1, _DWORD *a2)
{
  unsigned __int8 v9 = 0;
  unsigned __int16 destination = 0;
  if (!a1)
  {
    uint64_t v6 = 4294894936;
LABEL_15:
    APSLogErrorAt();
    return v6;
  }
  if (!a2)
  {
    uint64_t v6 = 4294894936;
    goto LABEL_15;
  }
  if (CMBlockBufferGetDataLength(a1) <= 2)
  {
    uint64_t v6 = 4294894936;
    goto LABEL_15;
  }
  uint64_t v4 = CMBlockBufferCopyDataBytes(a1, 0, 3uLL, &destination);
  if (v4)
  {
    uint64_t v6 = v4;
    goto LABEL_15;
  }
  if (v9 != 128)
  {
    uint64_t v6 = 4294894936;
    goto LABEL_15;
  }
  unsigned int v5 = bswap32(destination) >> 16;
  if (v5 <= 2)
  {
    uint64_t v6 = 4294894936;
    goto LABEL_15;
  }
  uint64_t v6 = 0;
  *a2 = v5 - 3;
  return v6;
}

uint64_t APTPackageRTPBufferedGetHeaderSize(_DWORD *a1)
{
  if (a1)
  {
    uint64_t result = 0;
    *a1 = 3;
  }
  else
  {
    APSLogErrorAt();
    return 4294894936;
  }
  return result;
}

uint64_t APTPackageRTPBufferedGetMaxPayloadSize(void *a1)
{
  if (a1) {
    *a1 = 65534;
  }
  else {
    APSLogErrorAt();
  }
  return 0;
}

void rtpbufpackage_Finalize()
{
  uint64_t DerivedStorage = (void **)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTPackageRTPBuffered <= 30
    && (gLogCategory_APTPackageRTPBuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APTransportParcelFree(*DerivedStorage);
  *uint64_t DerivedStorage = 0;
}

__CFString *rtpbufpackage_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTPackageRTPBuffered %p>", a1);
  return Mutable;
}

const void *rtpbufpackage_CopyMessageData()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MessageData = (const void *)APTransportParcelGetMessageData(*DerivedStorage);
  int v2 = MessageData;
  if (MessageData) {
    CFRetain(MessageData);
  }
  return v2;
}

uint64_t rtpbufpackage_SetMessageData(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  uint64_t v3 = *(void **)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageData(v3, a2);
}

uint64_t rtpbufpackage_GetMessageType()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelGetMessageType(v0);
}

uint64_t rtpbufpackage_SetMessageType(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageType(v3, a2);
}

CMBlockBufferRef rtpbufpackage_CreateBBufRepresentation()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef v3 = 0;
  MessageData = (OpaqueCMBlockBuffer *)APTransportParcelGetMessageData(*DerivedStorage);
  __int16 v4 = bswap32(CMBlockBufferGetDataLength(MessageData) + 3) >> 16;
  char v5 = 0x80;
  APTransportParcelCreateBBufRepresentation(*DerivedStorage, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], &v4, &v3);
  return v3;
}

BOOL rtpbufpackage_IsEndOfBurst()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelGetMessageType(*DerivedStorage) == 1650814818;
}

uint64_t APBrowserBTLEManagerGetTypeID()
{
  if (gAPBrowserBTLEManagerInitOnce != -1) {
    dispatch_once(&gAPBrowserBTLEManagerInitOnce, &__block_literal_global);
  }
  return gAPBrowserBTLEManagerTypeID;
}

uint64_t __APBrowserBTLEManagerGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPBrowserBTLEManagerTypeID = result;
  return result;
}

uint64_t APBrowserBTLEManagerCreate(uint64_t a1, id **a2)
{
  if (gAPBrowserBTLEManagerInitOnce != -1) {
    dispatch_once(&gAPBrowserBTLEManagerInitOnce, &__block_literal_global);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    char v5 = (id *)Instance;
    *(void *)(Instance + 16) = 0;
    uint64_t v6 = [[APBrowserBTLEManager alloc] initWithEventContext:Instance];
    v5[2] = v6;
    if (v6)
    {
      if (a1) {
        [v5[2] setBrowseForAltReceiver:CFDictionaryGetInt64() != 0];
      }
      uint64_t v7 = 0;
      *a2 = v5;
    }
    else
    {
      uint64_t v7 = 4294895076;
      APSLogErrorAt();
      CFRelease(v5);
    }
  }
  else
  {
    uint64_t v7 = 4294895076;
    APSLogErrorAt();
  }
  return v7;
}

uint64_t APBrowserBTLEManagerInvalidate(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  uint64_t v1 = *(void **)(a1 + 16);
  int v2 = [v1 queue];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __APBrowserBTLEManagerInvalidate_block_invoke;
  v5[3] = &unk_1E688ABA8;
  v5[4] = v1;
  v5[5] = &v6;
  dispatch_sync(v2, v5);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1D0887888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __APBrowserBTLEManagerInvalidate_block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) invalidate];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t APBrowserBTLEManagerGetMode(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  uint64_t v3 = *(void **)(a1 + 16);
  __int16 v4 = [v3 queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APBrowserBTLEManagerGetMode_block_invoke;
  block[3] = &unk_1E688ABF8;
  block[4] = v3;
  void block[5] = &v8;
  void block[6] = a2;
  dispatch_sync(v4, block);
  uint64_t v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1D0887994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __APBrowserBTLEManagerGetMode_block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) getBTLEMode:*(void *)(a1 + 48)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t APBrowserBTLEManagerSetEventHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  int v14 = 0;
  uint64_t v6 = *(void **)(a1 + 16);
  uint64_t v7 = [v6 queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APBrowserBTLEManagerSetEventHandler_block_invoke;
  block[3] = &unk_1E688AC20;
  block[4] = v6;
  void block[5] = &v11;
  void block[6] = a2;
  void block[7] = a3;
  block[8] = a1;
  dispatch_sync(v7, block);
  uint64_t v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1D0887AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __APBrowserBTLEManagerSetEventHandler_block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) setEventHandler:*(void *)(a1 + 48) context:*(void *)(a1 + 56) managerRef:*(void *)(a1 + 64)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t APBrowserBTLEManagerCopyShowInfo(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  int v14 = 0;
  uint64_t v5 = *(void **)(a1 + 16);
  uint64_t v6 = [v5 queue];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __APBrowserBTLEManagerCopyShowInfo_block_invoke;
  v9[3] = &unk_1E688AC48;
  v9[4] = v5;
  void v9[5] = &v11;
  v9[6] = a3;
  int v10 = a2;
  dispatch_sync(v6, v9);
  uint64_t v7 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1D0887BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __APBrowserBTLEManagerCopyShowInfo_block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) copyShowInfo:*(void *)(a1 + 48) verbose:*(_DWORD *)(a1 + 56) != 0];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t APBrowserBTLEManagerUpdatePreferences(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  uint64_t v1 = *(void **)(a1 + 16);
  int v2 = [v1 queue];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __APBrowserBTLEManagerUpdatePreferences_block_invoke;
  v5[3] = &unk_1E688ABA8;
  v5[4] = v1;
  v5[5] = &v6;
  dispatch_sync(v2, v5);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1D0887CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __APBrowserBTLEManagerUpdatePreferences_block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) ensurePreferencesUpdatedWithShouldForce:1];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t APBrowserBTLEManagerSetLocalDeviceSupportsSolo(uint64_t a1, char a2)
{
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x2020000000;
  int v12 = 0;
  uint64_t v3 = *(void **)(a1 + 16);
  __int16 v4 = [v3 queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APBrowserBTLEManagerSetLocalDeviceSupportsSolo_block_invoke;
  block[3] = &unk_1E688AC70;
  block[4] = v3;
  void block[5] = &v9;
  char v8 = a2;
  dispatch_sync(v4, block);
  uint64_t v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1D0887DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __APBrowserBTLEManagerSetLocalDeviceSupportsSolo_block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) setSupportsSolo:*(unsigned char *)(a1 + 48) != 0];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1D0888C0C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t APBrowserBTLEManagerTestCreateEventDictionaryFromFile()
{
  return 4294895074;
}

uint64_t APBrowserBTLEManagerTestCreateEventDictionary()
{
  return 4294895074;
}

void _APBrowserBTLEManagerFinalize(uint64_t a1)
{
}

uint64_t APTransportSessionCreate(const __CFAllocator *a1, int a2, const void *a3, const void *a4, const __CFDictionary *a5, void *a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  FigTransportSessionGetClassID();
  unsigned int v30 = CMDerivedObjectCreate();
  if (v30) {
    goto LABEL_60;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 32) = a3;
  if (a3) {
    CFRetain(a3);
  }
  UUIDGet();
  *(void *)&v34.byte0 = 0;
  *(void *)&v34.byte8 = 0;
  CFUUIDRef v13 = CFUUIDCreateFromUUIDBytes(a1, v34);
  *(void *)(DerivedStorage + 40) = v13;
  if (!v13
    || (SNPrintF(), dispatch_queue_t v14 = dispatch_queue_create(label, 0), (*(void *)(DerivedStorage + 8) = v14) == 0)
    || (dispatch_queue_t v15 = dispatch_queue_create("APTransportSession.notifications", 0),
        (*(void *)(DerivedStorage + 16) = v15) == 0))
  {
    APSLogErrorAt();
    return -16601;
  }
  *(_DWORD *)(DerivedStorage + 24) = a2;
  unsigned int v30 = FigCFWeakReferenceTableCreate();
  if (v30 || (unsigned int v30 = FigCFWeakReferenceTableCreate()) != 0)
  {
LABEL_60:
    APSLogErrorAt();
    return v30;
  }
  *(_DWORD *)(DerivedStorage + 120) = 0;
  uint64_t v16 = MEMORY[0x1E4F1F9F8];
  *(_DWORD *)(DerivedStorage + 92) = -1;
  *(_OWORD *)(DerivedStorage + 216) = *(_OWORD *)v16;
  *(void *)(DerivedStorage + 232) = *(void *)(v16 + 16);
  if (a5)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(a5, @"OwningService");
    if (Value) {
      CFDictionaryRef Value = CFRetain(Value);
    }
    *(void *)(DerivedStorage + 152) = Value;
    *(_DWORD *)(DerivedStorage + 92) = CFDictionaryGetInt64();
    long long v18 = CFDictionaryGetValue(a5, @"TransportTester_RemoteNetworkAddress");
    if (v18) {
      long long v18 = CFRetain(v18);
    }
    *(void *)(DerivedStorage + 96) = v18;
    *(_DWORD *)(DerivedStorage + 120) = CFDictionaryGetInt64();
    if (gLogCategory_APTransportSession <= 40
      && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_DWORD *)(DerivedStorage + 124) = CFDictionaryGetInt64();
    if (gLogCategory_APTransportSession <= 40
      && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (FigCFDictionaryGetCMTimeIfPresent()
      && gLogCategory_APTransportSession <= 40
      && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
    {
      CMTime time = *(CMTime *)(DerivedStorage + 216);
      CMTimeGetSeconds(&time);
      LogPrintF();
    }
    *(unsigned char *)(DerivedStorage + 129) = CFDictionaryGetInt64() != 0;
    *(unsigned char *)(DerivedStorage + 128) = CFDictionaryGetInt64() != 0;
    uint64_t v19 = CMBaseObjectGetDerivedStorage();
    if (CFDictionaryGetValue(a5, @"EventRecorder"))
    {
      uint64_t v22 = *(const void **)(v19 + 240);
      uint64_t v21 = (void *)(v19 + 240);
      uint64_t v20 = v22;
      if (v22)
      {
        CFRelease(v20);
        *uint64_t v21 = 0;
      }
      APSEventRecorderCopyChildEventRecorderOfType();
      if (!*v21)
      {
        SNPrintF();
        CFStringRef v23 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)&time, 0x8000100u);
        if (APSEventRecorderCreate()
          && gLogCategory_APTransportSession <= 60
          && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        APSEventRecorderAddSignPostForEvent();
        if (v23) {
          CFRelease(v23);
        }
      }
    }
    unsigned int v30 = 0;
  }
  *(_DWORD *)(DerivedStorage + 184) = 0;
  if (a4) {
    CFTypeRef v24 = CFRetain(a4);
  }
  else {
    CFTypeRef v24 = 0;
  }
  *(void *)(DerivedStorage + 64) = v24;
  uint64_t v25 = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(v25 + 208))
  {
    uint64_t v26 = v25;
    SharedHelper = (const void *)APConnectivityHelperGetSharedHelper();
    if (SharedHelper)
    {
      CFTypeRef v28 = CFRetain(SharedHelper);
      *(void *)(v26 + 208) = v28;
      if (v28
        && !APConnectivityHelperRegisterEventHandler((uint64_t)v28, 0, (uint64_t)session_handleConnectivityHelperEvents)&& !APConnectivityHelperRegisterForEvent(*(void *)(v26 + 208), 0, 1)&& (!*(unsigned char *)(v26 + 129) || !APConnectivityHelperRegisterForEvent(*(void *)(v26 + 208), 0, 4)))
      {
        goto LABEL_52;
      }
    }
    else
    {
      *(void *)(v26 + 208) = 0;
    }
    APSLogErrorAt();
  }
LABEL_52:
  if (gLogCategory_APTransportSession <= 40
    && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APSIntrospectorAddCommand();
  *a6 = 0;
  return v30;
}

uint64_t session_introspectReportNetworkStatus(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  if (result)
  {
    if (a3 <= 1)
    {
      APSLogErrorAt();
      return MEMORY[0x1F4116358](a2, "No network status provided\n");
    }
    else
    {
      __int16 v4 = (const void *)result;
      strtol(*(const char **)(a4 + 8), 0, 10);
      return session_reportNetworkStatus(v4);
    }
  }
  return result;
}

uint64_t APTransportSessionUnregisterStream(const void *a1)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    return 4294954511;
  }
  CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

void session_unregisterStreamInternal(uint64_t a1)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    APSLogErrorAt();
  }
  else
  {
    APTransportStreamIDGetToken(*(void *)(a1 + 8));
    FigCFWeakReferenceTableRemoveValue();
  }
  int v2 = *(const void **)a1;
  if (*(void *)a1)
  {
    CFRelease(v2);
  }
}

uint64_t APTransportSessionHandleStreamEvent(const void *a1, const void *a2, int a3, const void *a4)
{
  unsigned int v13 = 0;
  if (a3)
  {
    return APSSignalErrorAt();
  }
  else
  {
    uint64_t v7 = APSGetFBOPropertyInt64();
    if (v7 == 1702260340 || v7 == 1668575852)
    {
      unsigned int v12 = 0;
      if (a4)
      {
        CFTypeID v9 = CFGetTypeID(a4);
        if (v9 != CFNumberGetTypeID())
        {
          APSLogErrorAt();
          unsigned int v13 = -16600;
          APSSignalErrorAt();
          return v13;
        }
        CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, &v12);
        unsigned int v10 = v12;
      }
      else
      {
        unsigned int v10 = 0;
      }
      CMBaseObjectGetDerivedStorage();
      dispatch_queue_t v15 = a2;
      dispatch_queue_t v14 = a1;
      uint64_t v16 = v10;
      CFRetain(a1);
      CFRetain(a2);
      APSDispatchAsyncFHelper();
    }
  }
  return v13;
}

uint64_t session_Invalidate()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    return 0;
  }
  uint64_t v1 = DerivedStorage;
  uint64_t v2 = APSDispatchSyncTask();
  if (v1[18])
  {
    uint64_t SharedTransport = APTransportGetSharedTransport();
    APTransportUnregisterSession(SharedTransport, v1[18]);
  }
  else if (v1[20])
  {
    uint64_t v5 = (const void *)v1[19];
    if (v5)
    {
      APTransportServiceUnregisterSession(v5);
      uint64_t v6 = (const void *)v1[19];
      if (v6) {
        CFRelease(v6);
      }
    }
    else
    {
      APSLogErrorAt();
    }
  }
  return v2;
}

void session_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  session_invalidateInternal(a1);
  if (gLogCategory_APTransportSession <= 50
    && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v3 = (const void *)DerivedStorage[30];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[30] = 0;
  }
  __int16 v4 = (const void *)DerivedStorage[4];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[4] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[5];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[5] = 0;
  }
  uint64_t v6 = (const void *)DerivedStorage[26];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[26] = 0;
  }
  uint64_t v7 = DerivedStorage[1];
  if (v7)
  {
    dispatch_release(v7);
    DerivedStorage[1] = 0;
  }
  char v8 = DerivedStorage[2];
  if (v8)
  {
    dispatch_release(v8);
    DerivedStorage[2] = 0;
  }
}

__CFString *session_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTransportSession %p '%@'>", a1, *(void *)(DerivedStorage + 32));
  return Mutable;
}

uint64_t session_CopyProperty()
{
  CMBaseObjectGetDerivedStorage();
  return FigDispatchSyncCopyPropertyImplementation();
}

uint64_t session_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294954511;
  }
  else if (a2)
  {
    uint64_t v7 = *(void *)(DerivedStorage + 8);
    return MEMORY[0x1F40DD378](v7, session_setPropertyInternal, a1, a2, a3);
  }
  else
  {
    APSLogErrorAt();
    return 4294950696;
  }
}

uint64_t session_invalidateInternal(uint64_t a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    uint64_t v3 = (uint64_t)DerivedStorage;
    if (gLogCategory_APTransportSession <= 50
      && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(unsigned char *)uint64_t v3 = 1;
    APSIntrospectorSetCommandContext();
    if (*(_DWORD *)(v3 + 24) == 1) {
      session_performWifiManagerRegistration(v3, 0);
    }
    uint64_t v4 = *(void *)(v3 + 208);
    if (v4) {
      APConnectivityHelperRemoveAllRegistrations(v4, a1);
    }
    session_suspendKeepAliveInternal(a1);
    uint64_t v5 = *(void *)(v3 + 72);
    if (v5)
    {
      if (gLogCategory_APTransportSession <= 50)
      {
        if (gLogCategory_APTransportSession != -1 || (v6 = _LogCategory_Initialize(), uint64_t v5 = *(void *)(v3 + 72), v6))
        {
          LogPrintF();
          uint64_t v5 = *(void *)(v3 + 72);
        }
      }
      session_updateNANDSNotificationRegistry(a1, v5, 0);
      APTNANDataSessionReleaseActivation(*(void *)(v3 + 72));
    }
    uint64_t v7 = *(void *)(v3 + 80);
    if (v7)
    {
      if (gLogCategory_APTransportSession <= 50)
      {
        if (gLogCategory_APTransportSession != -1 || (v8 = _LogCategory_Initialize(), uint64_t v7 = *(void *)(v3 + 80), v8))
        {
          LogPrintF();
          uint64_t v7 = *(void *)(v3 + 80);
        }
      }
      session_updateNANDSNotificationRegistry(a1, v7, 0);
      APTNANDataSessionReleaseActivation(*(void *)(v3 + 80));
    }
    CFTypeID v9 = *(const void **)(v3 + 48);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(v3 + 48) = 0;
    }
    unsigned int v10 = *(const void **)(v3 + 56);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(v3 + 56) = 0;
    }
    uint64_t v11 = *(const void **)(v3 + 80);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(v3 + 80) = 0;
    }
    unsigned int v12 = *(const void **)(v3 + 72);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(v3 + 72) = 0;
    }
    unsigned int v13 = *(const void **)(v3 + 64);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(v3 + 64) = 0;
    }
    dispatch_queue_t v14 = *(const void **)(v3 + 96);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(v3 + 96) = 0;
    }
    dispatch_queue_t v15 = *(const void **)(v3 + 192);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(v3 + 192) = 0;
    }
    uint64_t v16 = *(const void **)(v3 + 248);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(v3 + 248) = 0;
    }
    id v17 = *(const void **)(v3 + 200);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(v3 + 200) = 0;
    }
  }
  return 0;
}

void session_performWifiManagerRegistration(uint64_t a1, int a2)
{
  CFTypeRef cf = 0;
  APTransportGetSharedTransport();
  uint64_t CMBaseObject = FigTransportGetCMBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
  if (v7 && !v7(CMBaseObject, @"WifiManagerClient", *MEMORY[0x1E4F1CF80], &cf))
  {
    if (a2)
    {
      if (a2 != 1 || *(unsigned char *)(a1 + 136)) {
        goto LABEL_12;
      }
      if (!APTransportWifiManagerClientRegister((uint64_t)cf))
      {
        *(unsigned char *)(a1 + 136) = 1;
        goto LABEL_12;
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 136)) {
        goto LABEL_12;
      }
      int v8 = APTransportWifiManagerClientUnregister((uint64_t)cf);
      *(unsigned char *)(a1 + 136) = 0;
      if (!v8) {
        goto LABEL_12;
      }
    }
  }
  APSLogErrorAt();
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t session_suspendKeepAliveInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = 0;
  uint64_t KeepAliveController = session_getKeepAliveController(a1, &v17);
  if (KeepAliveController)
  {
    APSLogErrorAt();
  }
  else
  {
    uint64_t v4 = v17;
    if (v17)
    {
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(void (**)(uint64_t))(v6 + 16);
      if (v7) {
        v7(v4);
      }
      *(unsigned char *)(DerivedStorage + 169) = 0;
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      uint64_t CMBaseObject = APTransportKeepAliveControllerGetCMBaseObject(v17);
      CFTypeID v9 = *(void **)(CMBaseObjectGetVTable() + 8);
      if (v9) {
        unsigned int v10 = v9;
      }
      else {
        unsigned int v10 = 0;
      }
      if (*v10 >= 2uLL)
      {
        uint64_t v11 = (void (*)(uint64_t))v10[8];
        if (v11) {
          v11(CMBaseObject);
        }
      }
      unsigned int v12 = *(const void **)(DerivedStorage + 200);
      if (v12)
      {
        CFRelease(v12);
        if (*(void *)(DerivedStorage + 200))
        {
          APTransportStreamIDGetToken(1802529910);
          unsigned int v13 = (const void *)FigCFWeakReferenceTableCopyValue();
          if (v13) {
            CFRelease(v13);
          }
        }
      }
      *(void *)(DerivedStorage + 200) = 0;
      dispatch_queue_t v14 = *(const void **)(DerivedStorage + 192);
      if (v14)
      {
        CFRelease(v14);
        if (*(void *)(DerivedStorage + 192))
        {
          APTransportStreamIDGetToken(1668575852);
          dispatch_queue_t v15 = (const void *)FigCFWeakReferenceTableCopyValue();
          if (v15) {
            CFRelease(v15);
          }
        }
      }
      *(void *)(DerivedStorage + 192) = 0;
    }
  }
  return KeepAliveController;
}

uint64_t session_updateNANDSNotificationRegistry(uint64_t result, uint64_t a2, int a3)
{
  if (result && a2)
  {
    uint64_t v5 = result;
    uint64_t DefaultLocalCenter = CMNotificationCenterGetDefaultLocalCenter();
    if (a3)
    {
      return MEMORY[0x1F40DDD90](DefaultLocalCenter, v5, session_handleNANDataSessionDisconnected, @"APTNANDataSessionNotification_Disconnected", a2, 0, 0);
    }
    else
    {
      return MEMORY[0x1F40DDDB0](DefaultLocalCenter, v5, session_handleNANDataSessionDisconnected, @"APTNANDataSessionNotification_Disconnected", a2);
    }
  }
  return result;
}

uint64_t session_getKeepAliveController(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = DerivedStorage;
    int v5 = *(_DWORD *)(DerivedStorage + 184);
    if ((v5 - 1) < 2)
    {
      uint64_t result = 0;
      uint64_t v7 = *(void *)(v4 + 192);
    }
    else
    {
      if (v5 != 4)
      {
        if (v5) {
          return 4294950696;
        }
        uint64_t result = 0;
        *a2 = 0;
        return result;
      }
      uint64_t result = 0;
      uint64_t v7 = *(void *)(v4 + 200);
    }
    *a2 = v7;
    return result;
  }
  APSLogErrorAt();
  return APSSignalErrorAt();
}

uint64_t session_handleKeepAliveStallStateChanged(uint64_t a1, const void *a2, const void *a3, uint64_t a4, const void *a5)
{
  CMTime v14 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    CFTypeID v9 = CFGetTypeID(a5);
    if (v9 == CFDictionaryGetTypeID())
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a5, @"StallDuration");
      CMTimeMakeFromDictionary(&v14, Value);
      if (CFEqual(a3, @"APTransportKeepAliveControllerNotification_Stalled"))
      {
        if (gLogCategory_APTransportSession <= 90
          && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
        {
          CMTime time = v14;
          CMTimeGetSeconds(&time);
          LogPrintF();
        }
        char v11 = 1;
      }
      else
      {
        if (!CFEqual(a3, @"APTransportKeepAliveControllerNotification_NotStalled")) {
          return session_reportNetworkStatus(a2);
        }
        if (gLogCategory_APTransportSession <= 50
          && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
        {
          CMTime time = v14;
          CMTimeGetSeconds(&time);
          LogPrintF();
        }
        char v11 = 0;
      }
      *(unsigned char *)(DerivedStorage + 168) = v11;
      return session_reportNetworkStatus(a2);
    }
  }
  uint64_t result = APSLogErrorAt();
  if (gLogCategory_APTransportSession <= 90)
  {
    if (gLogCategory_APTransportSession != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t session_handleKeepAliveFailed(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5 && (CFTypeID v8 = CFGetTypeID(a5), v8 == CFDictionaryGetTypeID()))
  {
    CFDictionaryGetInt64();
    uint64_t result = 0;
    if (gLogCategory_APTransportSession <= 90)
    {
      if (gLogCategory_APTransportSession != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
        uint64_t result = LogPrintF();
      }
    }
    if (*(unsigned char *)(DerivedStorage + 168)) {
      return session_reportNetworkStatus(a2);
    }
  }
  else
  {
    uint64_t result = APSLogErrorAt();
    if (gLogCategory_APTransportSession <= 90)
    {
      if (gLogCategory_APTransportSession != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

uint64_t session_handleKeepAliveResponse()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

uint64_t session_reportNetworkStatus(const void *a1)
{
  if (a1) {
    CFRetain(a1);
  }
  return APSDispatchAsyncFHelper();
}

void session_reportNetworkStatusInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v19 = 0;
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFTypeRef v18 = 0;
  uint64_t v4 = (void *)(v3 + 248);
  if (*(void *)(v3 + 248))
  {
    uint64_t v7 = 0;
    goto LABEL_22;
  }
  uint64_t v5 = v3;
  uint64_t v6 = FigCFWeakReferenceTableCopyValue();
  uint64_t v7 = (const void *)v6;
  if (!v6)
  {
    APSLogErrorAt();
    int v19 = -16600;
    goto LABEL_20;
  }
  uint64_t CMBaseObject = APTransportConnectionGetCMBaseObject(v6);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  char v11 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v10 + 48);
  if (!v11)
  {
    int v19 = -12782;
    goto LABEL_19;
  }
  int v19 = v11(CMBaseObject, @"LocalInterfaceName", 0, &v18);
  if (v19)
  {
LABEL_19:
    APSLogErrorAt();
    goto LABEL_20;
  }
  uint64_t v12 = APTransportConnectionGetCMBaseObject(v7);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  dispatch_queue_t v15 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v14 + 48);
  if (!v15)
  {
    int v19 = -12782;
    goto LABEL_19;
  }
  int v19 = v15(v12, @"RemoteNetworkIPAddress", 0, &cf);
  if (v19) {
    goto LABEL_19;
  }
  unsigned __int16 v16 = APSGetFBOPropertyInt64();
  if (v19) {
    goto LABEL_19;
  }
  int v19 = APTSessionHealthReporterCreate(0, (const __CFString *)v18, *(const void **)(v5 + 32), (uint64_t)cf, v16, v4);
  if (v19) {
    goto LABEL_19;
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
LABEL_22:
  if (v18) {
    CFRelease(v18);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v19
    || APTSessionHealthReporterReportNetworkStatus(*(void *)(DerivedStorage + 248), *(_DWORD *)(a1 + 8)))
  {
    APSLogErrorAt();
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
}

uint64_t APTransportConnectionCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject = APTransportConnectionGetCMBaseObject(a1);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }
  return v10(CMBaseObject, a2, a3, a4);
}

void session_handleNANDataSessionDisconnected(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFMutableDictionaryRef Mutable)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage && (*(void *)(DerivedStorage + 72) == a4 || *(void *)(DerivedStorage + 80) == a4))
  {
    if (Mutable)
    {
      CFTypeID v8 = CFGetTypeID(Mutable);
      if (v8 == CFDictionaryGetTypeID()
        && CFDictionaryContainsKey(Mutable, @"APTNANDataSessionNotificationKey_DisconnectedReason"))
      {
        int Int64 = CFDictionaryGetInt64();
        if (Int64 == -72400 || Int64 == -72401 || (Int64 + 72101) <= 1)
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (Mutable) {
            CFDictionarySetInt64();
          }
          else {
            APSSignalErrorAt();
          }
        }
        else
        {
          CFMutableDictionaryRef Mutable = 0;
        }
      }
      else
      {
        CFMutableDictionaryRef Mutable = 0;
      }
    }
    if (gLogCategory_APTransportSession <= 90
      && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (Mutable)
    {
      CFRelease(Mutable);
    }
  }
}

uint64_t session_copyPropertyInternal(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    APSLogErrorAt();
    return 4294954511;
  }
  uint64_t v9 = DerivedStorage;
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F22020]))
  {
    if (CFEqual(a2, @"ConnectedOnPeerToPeerInterface"))
    {
      if ((*((_DWORD *)v9 + 30) - 3) >= 0xFFFFFFFE) {
        uint64_t v12 = (const void **)MEMORY[0x1E4F1CFD0];
      }
      else {
        uint64_t v12 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      uint64_t v13 = *v12;
      *a4 = *v12;
      CFRetain(v13);
      return 0;
    }
    if (CFEqual(a2, @"InterfaceType"))
    {
      CFNumberRef v14 = CFNumberCreate(a3, kCFNumberIntType, v9 + 15);
      *a4 = v14;
      if (!v14) {
        goto LABEL_30;
      }
      return 0;
    }
    if (CFEqual(a2, @"TransportType"))
    {
      int valuePtr = 0;
      uint64_t SessionTransportType = session_getSessionTransportType(a1, &valuePtr);
      if (SessionTransportType)
      {
        uint64_t v11 = SessionTransportType;
        APSLogErrorAt();
        return v11;
      }
      CFNumberRef v16 = CFNumberCreate(a3, kCFNumberIntType, &valuePtr);
      *a4 = v16;
      if (v16) {
        return 0;
      }
    }
    else
    {
      if (CFEqual(a2, @"ShowInfo"))
      {
        uint64_t v10 = session_copyShowInfo();
        goto LABEL_5;
      }
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F22018]))
      {
        if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F22010])) {
          return 4294954512;
        }
        uint64_t v10 = (const void *)v9[22];
        if (!v10) {
          goto LABEL_5;
        }
        goto LABEL_4;
      }
      CFNumberRef v18 = CFNumberCreate(a3, kCFNumberIntType, v9 + 23);
      *a4 = v18;
      if (v18) {
        return 0;
      }
    }
LABEL_30:
    APSLogErrorAt();
    return 4294950695;
  }
  uint64_t v10 = (const void *)v9[5];
LABEL_4:
  uint64_t v10 = CFRetain(v10);
LABEL_5:
  uint64_t v11 = 0;
  *a4 = v10;
  return v11;
}

uint64_t session_getSessionTransportType(uint64_t a1, int *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFNumberRef number = 0;
  int valuePtr = 0;
  uint64_t v3 = FigCFWeakReferenceTableCopyValue();
  uint64_t v4 = (const void *)v3;
  if (!v3) {
    goto LABEL_31;
  }
  uint64_t CMBaseObject = APTransportConnectionGetCMBaseObject(v3);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeID v8 = *(uint64_t (**)(uint64_t, __CFString *, void, CFNumberRef *))(v7 + 48);
  if (!v8)
  {
    uint64_t v11 = 4294954514;
    goto LABEL_11;
  }
  uint64_t v9 = v8(CMBaseObject, @"NetTransportType", *MEMORY[0x1E4F1CF80], &number);
  if (!v9)
  {
    CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
    int v10 = valuePtr;
    if (valuePtr <= 15)
    {
      switch(valuePtr)
      {
        case 1:
          goto LABEL_24;
        case 2:
          int v10 = 2;
          break;
        case 4:
          int v10 = 3;
          break;
        case 8:
          int v10 = 4;
          break;
        default:
          goto LABEL_23;
      }
      goto LABEL_24;
    }
    if (valuePtr > 63)
    {
      if (valuePtr == 64)
      {
        int v10 = 7;
        goto LABEL_24;
      }
      if (valuePtr == 128)
      {
        int v10 = 8;
        goto LABEL_24;
      }
    }
    else
    {
      if (valuePtr == 16)
      {
        int v10 = 5;
        goto LABEL_24;
      }
      if (valuePtr == 32)
      {
        int v10 = 6;
LABEL_24:
        uint64_t v11 = 0;
        *a2 = v10;
        goto LABEL_25;
      }
    }
LABEL_23:
    int v10 = 0;
    goto LABEL_24;
  }
  uint64_t v11 = v9;
  if (v9 != -72320)
  {
LABEL_11:
    APSLogErrorAt();
    goto LABEL_25;
  }
LABEL_31:
  uint64_t v11 = 4294950688;
LABEL_25:
  if (number) {
    CFRelease(number);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v11;
}

__CFDictionary *session_copyShowInfo()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    APSLogErrorAt();
    return Mutable;
  }
  uint64_t v15 = 0;
  CFTypeRef cf = 0;
  uint64_t v2 = FigCFWeakReferenceTableCopyValue();
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    uint64_t CMBaseObject = APTransportConnectionGetCMBaseObject(v2);
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v6 + 48);
    if (v7)
    {
      int v8 = v7(CMBaseObject, @"RemoteNetworkIPAddress", v0, &cf);
      if (v8)
      {
LABEL_14:
        int v13 = v8;
LABEL_16:
        CFRelease(v3);
        if (cf) {
          CFRelease(cf);
        }
        if (!v13) {
          CFDictionarySetValue(Mutable, @"PeerIPPort", 0);
        }
        return Mutable;
      }
      uint64_t v9 = APTransportConnectionGetCMBaseObject(v3);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v11 + 48);
      if (v12)
      {
        int v8 = v12(v9, @"RemoteNetworkPort", v0, &v15);
        if (!v8)
        {
          CFGetInt64Ranged();
          APSNetworkAddressSetPort();
          int v8 = APSNetworkAddressCopyStringRepresentation();
        }
        goto LABEL_14;
      }
    }
    int v13 = -12782;
    goto LABEL_16;
  }
  return Mutable;
}

uint64_t session_setPropertyInternal(uint64_t a1, const void *a2, const void *a3)
{
  unsigned int v14 = 0;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    APSLogErrorAt();
    return -12785;
  }
  uint64_t v6 = DerivedStorage;
  if (CFEqual(a2, @"TransportRegistrationToken"))
  {
    *((void *)v6 + 18) = CFGetInt64();
    if (v14) {
      goto LABEL_27;
    }
    return v14;
  }
  if (CFEqual(a2, @"ServiceRegistrationToken"))
  {
    *((void *)v6 + 20) = CFGetInt64();
    if (v14) {
      goto LABEL_27;
    }
    return v14;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F22018]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F22010]))
    {
      if (v6[169])
      {
        APSLogErrorAt();
        return APSSignalErrorAt();
      }
      if (a3)
      {
        CFTypeID v9 = CFGetTypeID(a3);
        if (v9 == CFNumberGetTypeID())
        {
          uint64_t v10 = (const void *)*((void *)v6 + 22);
          *((void *)v6 + 22) = a3;
          CFRetain(a3);
          if (v10) {
            CFRelease(v10);
          }
          return v14;
        }
      }
      APSLogErrorAt();
      return -16600;
    }
    else
    {
      return -12784;
    }
  }
  unsigned int valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &valuePtr))
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  unsigned int v7 = valuePtr;
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(v8 + 169))
  {
    APSLogErrorAt();
  }
  else if (v7 <= 4 && v7 != 3)
  {
    *(_DWORD *)(v8 + 184) = v7;
    return 0;
  }
  unsigned int v14 = APSSignalErrorAt();
  if (v14) {
LABEL_27:
  }
    APSLogErrorAt();
  return v14;
}

uint64_t session_DumpHierarchy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, a3, "TransportSession:[%{ptr}] %''@ Parent:[%{ptr}]\n", a1, *(void *)(DerivedStorage + 32), a2);
  if (v10)
  {
    uint64_t v23 = v10;
    APSLogErrorAt();
  }
  else
  {
    uint64_t v11 = FigCFWeakReferenceTableCopyValues();
    if (!v11)
    {
      CFArrayRef v12 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
      CFArrayRef v13 = v12;
      if (!v12 || (CFIndex Count = CFArrayGetCount(v12), Count < 1))
      {
LABEL_20:
        uint64_t v23 = 0;
        goto LABEL_21;
      }
      CFIndex v15 = Count;
      CFIndex v16 = 0;
      uint64_t v17 = a3 + 1;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v13, v16);
        APSHierarchyReporterProtocolGetProtocolID();
        uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
        if (!ProtocolVTable) {
          break;
        }
        uint64_t v20 = *(void *)(ProtocolVTable + 16);
        if (!v20) {
          break;
        }
        uint64_t v21 = *(uint64_t (**)(const void *, uint64_t, uint64_t, void, uint64_t))(v20 + 8);
        if (!v21)
        {
          uint64_t v23 = 4294954514;
          goto LABEL_15;
        }
        uint64_t v22 = v21(ValueAtIndex, a1, v17, 0, a5);
        uint64_t v23 = v22;
        if (v22 == -12782 || v22 == -12788) {
          goto LABEL_15;
        }
LABEL_16:
        if (v23)
        {
          APSLogErrorAt();
          goto LABEL_21;
        }
        if (v15 == ++v16) {
          goto LABEL_20;
        }
      }
      uint64_t v23 = 4294954508;
LABEL_15:
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, v17, "[Error] Object:[%{ptr}]%?s%?''@ cannot be dumped (error %#m) Parent:[%{ptr}]\n", ValueAtIndex, 0, " ", 0, 0, v23, a1);
      goto LABEL_16;
    }
    uint64_t v23 = v11;
  }
  CFArrayRef v13 = 0;
LABEL_21:
  if (v13) {
    CFRelease(v13);
  }
  return v23;
}

uint64_t session_SetEventCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[7] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3;
  v6[0] = a2;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6[1] = DerivedStorage + 104;
  v6[2] = &v5;
  v6[3] = 8;
  v6[4] = DerivedStorage + 112;
  v6[5] = v6;
  void v6[6] = 8;
  APSDispatchSyncBatchAssignment();
  return 0;
}

uint64_t session_Resume(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v4 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 8), &v3, (dispatch_function_t)session_resumeInternal);
  return v4;
}

uint64_t session_CreateStream(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    goto LABEL_12;
  }
  int Int64Ranged = CFDictionaryGetInt64Ranged();
  uint64_t v5 = 1;
  if (Int64Ranged <= 1702260339)
  {
    if (Int64Ranged == 1668575852) {
      goto LABEL_13;
    }
LABEL_12:
    uint64_t v5 = 2;
    goto LABEL_13;
  }
  if (Int64Ranged != 1702260340 && Int64Ranged != 1869570660 && Int64Ranged != 1919120492) {
    goto LABEL_12;
  }
LABEL_13:
  unsigned int v8 = *(_DWORD *)(DerivedStorage + 132) + 1;
  *(_DWORD *)(DerivedStorage + 132) = v8;
  APTransportStreamIDMake(0, v5, v8);
  return APSDispatchSyncTask();
}

uint64_t session_CreateStreamWithID(uint64_t a1, unint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (APTransportStreamIDGetStreamCategory(a2))
  {
    unint64_t v4 = APTransportStreamIDInsertStreamCategory(a2, 3);
    if (!APTransportKeepAliveControllerGetCMBaseObject(v4))
    {
      unsigned int v5 = *(_DWORD *)(DerivedStorage + 132) + 1;
      *(_DWORD *)(DerivedStorage + 132) = v5;
      APTransportStreamIDInsertIdentifier(v4, v5);
    }
  }
  return APSDispatchSyncTask();
}

uint64_t session_CopyStreamWithID()
{
  return APSDispatchSyncTask();
}

uint64_t session_ResumeKeepAlive()
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  else
  {
    return APSDispatchSyncTask();
  }
}

uint64_t session_SuspendKeepAlive()
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  else
  {
    return APSDispatchSyncTask();
  }
}

void session_resumeInternal(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v4 = *(_DWORD *)(DerivedStorage + 24);
  if (!v4)
  {
    uint64_t v12 = DerivedStorage;
    if (*(_DWORD *)(DerivedStorage + 92) != -1 && *(void *)(DerivedStorage + 112))
    {
      if (v2) {
        CFRetain(v2);
      }
      dispatch_async_f(*(dispatch_queue_t *)(v12 + 16), v2, (dispatch_function_t)session_sendEventRemoteWantsNewStreamCallback);
    }
    goto LABEL_40;
  }
  if (v4 != 1)
  {
LABEL_40:
    int v9 = 0;
    goto LABEL_41;
  }
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(v5 + 120) == 3)
  {
    uint64_t v6 = (uint64_t *)v5;
    if (*(void *)(v5 + 64))
    {
      unsigned int v7 = (uint64_t *)(v5 + 72);
      if (*(void *)(v5 + 72) || (unsigned int v8 = (uint64_t *)(v5 + 80), *(void *)(v5 + 80)))
      {
        APSLogErrorAt();
        int v9 = -6709;
      }
      else
      {
        int v9 = -72101;
        int IntWithDefault = APSSettingsGetIntWithDefault();
        if (IntWithDefault == 1)
        {
          int v9 = -72100;
        }
        else if (IntWithDefault != 2)
        {
          if (!APSIsAPMSpeaker())
          {
            int v13 = APTransportDeviceCopyNANDataSession(v6[8], 2, v6 + 10);
            if (v13)
            {
              int v9 = v13;
              APSLogErrorAt();
              goto LABEL_20;
            }
            if (gLogCategory_APTransportSession <= 50
              && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            session_updateNANDSNotificationRegistry((uint64_t)v2, *v8, 1);
            int v20 = APTNANDataSessionRetainActivation(*v8);
            if (v20)
            {
              if (v20 == -72400)
              {
                int v9 = -72100;
              }
              else if (v20 != -72401)
              {
                int v9 = v20;
              }
              APSLogErrorAt();
              session_updateNANDSNotificationRegistry((uint64_t)v2, *v8, 0);
              CFIndex v15 = (const void *)*v8;
              if (!*v8) {
                goto LABEL_20;
              }
LABEL_32:
              CFRelease(v15);
              uint64_t *v8 = 0;
              goto LABEL_20;
            }
          }
          int v11 = APTransportDeviceCopyNANDataSession(v6[8], 1, v6 + 9);
          if (!v11)
          {
            if (gLogCategory_APTransportSession <= 50
              && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            session_updateNANDSNotificationRegistry((uint64_t)v2, *v7, 1);
            int v14 = APTNANDataSessionRetainActivation(*v7);
            if (v14)
            {
              if (v14 == -72400)
              {
                int v9 = -72100;
              }
              else if (v14 != -72401)
              {
                int v9 = v14;
              }
              APSLogErrorAt();
              session_updateNANDSNotificationRegistry((uint64_t)v2, *v8, 0);
              CFIndex v15 = (const void *)*v7;
              unsigned int v8 = v6 + 9;
              if (!*v7) {
                goto LABEL_20;
              }
              goto LABEL_32;
            }
            goto LABEL_34;
          }
          int v21 = v11;
          APSLogErrorAt();
          int v9 = v21;
        }
      }
    }
    else
    {
      APSLogErrorAt();
      int v9 = -16600;
    }
LABEL_20:
    APSLogErrorAt();
    goto LABEL_41;
  }
LABEL_34:
  uint64_t v16 = CMBaseObjectGetDerivedStorage();
  bzero(v22, 0x400uLL);
  int v17 = *(_DWORD *)(v16 + 120);
  uint64_t v18 = *(void *)(v16 + 64);
  if (v18)
  {
    if ((v17 - 3) >= 0xFFFFFFFE) {
      int v19 = 1;
    }
    else {
      int v19 = 2 * (v17 == 3);
    }
    if (APTransportDeviceGetAddress(v18, v19, 0, v22, 1024, 0, 0))
    {
      APSLogErrorAt();
    }
    else if (v22[0])
    {
      goto LABEL_40;
    }
  }
  else if (*(void *)(v16 + 96))
  {
    goto LABEL_40;
  }
  if (gLogCategory_APTransportSession <= 40
    && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  int v9 = -16603;
LABEL_41:
  *(_DWORD *)(a1 + 8) = v9;
}

void session_sendEventRemoteWantsNewStreamCallback(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t valuePtr = 1668575852;
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
  (*(void (**)(void, CFNumberRef, void))(DerivedStorage + 112))(0, v3, *(void *)(DerivedStorage + 104));
  if (v3) {
    CFRelease(v3);
  }
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t session_createStreamWithIDInternal(uint64_t a1)
{
  unsigned int StreamName = 0;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v41 = 0;
  CFTypeRef v42 = 0;
  CFTypeRef v40 = 0;
  if (*DerivedStorage)
  {
    APSLogErrorAt();
    CFTypeRef v15 = 0;
    int v35 = 0;
    int v37 = -12785;
LABEL_77:
    unsigned int StreamName = v37;
    goto LABEL_63;
  }
  CFNumberRef v3 = DerivedStorage;
  if (DerivedStorage[88])
  {
    APSLogErrorAt();
    CFTypeRef v15 = 0;
    int v35 = 0;
    unsigned int StreamName = APSSignalErrorAt();
    goto LABEL_63;
  }
  APTransportStreamIDGetToken(*(void *)(a1 + 8));
  uint64_t v4 = FigCFWeakReferenceTableCopyValue();
  if (v4)
  {
    int v35 = (const void *)v4;
    APSLogErrorAt();
    CFTypeRef v15 = 0;
    int v37 = -6719;
    goto LABEL_77;
  }
  unsigned int StreamName = session_createStreamName(*(void *)a1, *(void *)(a1 + 8), (__CFString **)&v42);
  if (StreamName) {
    goto LABEL_78;
  }
  uint64_t Int64 = CFDictionaryGetInt64();
  if (StreamName)
  {
    uint64_t v6 = 0;
    unsigned int StreamName = 0;
  }
  else
  {
    uint64_t v6 = Int64;
  }
  if (gLogCategory_APTransportSession <= 30
    && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  unsigned int StreamName = session_createConnectionForStream(*(const void **)a1, *(void *)(a1 + 8), (uint64_t)v42, *((_DWORD *)v3 + 30), *((_DWORD *)v3 + 31), v6, *(const __CFDictionary **)(a1 + 16), &v41);
  if (StreamName)
  {
LABEL_78:
    APSLogErrorAt();
    CFTypeRef v15 = 0;
LABEL_83:
    int v35 = 0;
    goto LABEL_63;
  }
  unsigned int v7 = *(const void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  int v9 = *(const void **)(a1 + 16);
  CFTypeRef v45 = 0;
  CFTypeRef cf = 0;
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  int v39 = v6;
  if (v9)
  {
    uint64_t v11 = CFDictionaryGetInt64();
    if (v8 == 1668575852)
    {
      uint64_t v8 = 1919120492;
      CFDictionaryRef MutableCopy = (const __CFDictionary *)CFRetain(v9);
    }
    else
    {
      if (v11 != 1668575852)
      {
        CFTypeRef v15 = 0;
        CFDictionaryRef MutableCopy = 0;
        goto LABEL_25;
      }
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 3, (CFDictionaryRef)v9);
      CFDictionarySetInt64();
    }
  }
  else
  {
    CFDictionaryRef MutableCopy = 0;
    if (v8 != 1668575852)
    {
      CFTypeRef v15 = 0;
      goto LABEL_25;
    }
    uint64_t v8 = 1919120492;
  }
  unsigned int v13 = session_createStreamName((uint64_t)v7, v8, (__CFString **)&cf);
  if (v13)
  {
    unsigned int v16 = v13;
    APSLogErrorAt();
  }
  else
  {
    unsigned int v14 = session_createConnectionForStream(v7, v8, (uint64_t)cf, *(_DWORD *)(v10 + 120), *(_DWORD *)(v10 + 124), v6, MutableCopy, &v45);
    if (!v14)
    {
      CFTypeRef v15 = v45;
LABEL_25:
      unsigned int v16 = 0;
      CFTypeRef v45 = 0;
      goto LABEL_26;
    }
    unsigned int v16 = v14;
    APSLogErrorAt();
    if (v45) {
      CFRelease(v45);
    }
  }
  CFTypeRef v15 = 0;
LABEL_26:
  if (cf) {
    CFRelease(cf);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  unsigned int StreamName = v16;
  if (v16) {
    goto LABEL_82;
  }
  CFTypeRef v17 = v42;
  CFTypeRef v38 = v41;
  uint64_t v18 = *(const void **)a1;
  uint64_t v19 = *(void *)(a1 + 8);
  CFDictionaryRef v20 = *(const __CFDictionary **)(a1 + 16);
  uint64_t v21 = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v23 = Mutable;
    if (v15)
    {
      CFTypeRef v24 = kAPTransportStreamOption_ReceiveConnection;
      if (*(_DWORD *)(v21 + 24) != 1) {
        CFTypeRef v24 = kAPTransportStreamOption_SendConnection;
      }
      CFDictionaryAddValue(Mutable, *v24, v15);
    }
    if (*(_DWORD *)(v21 + 120) == 3)
    {
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
    }
    uint64_t v25 = *(const void **)(v21 + 240);
    if (v25) {
      CFDictionaryAddValue(v23, @"EventRecorder", v25);
    }
    if (v20)
    {
      uint64_t v26 = CFDictionaryGetInt64();
      int Int64Ranged = CFDictionaryGetInt64Ranged();
      CFDictionaryRef Value = CFDictionaryGetValue(v20, @"SendBackingProvider");
      if (Value) {
        CFDictionaryAddValue(v23, @"SendBackingProvider", Value);
      }
    }
    else
    {
      uint64_t v26 = 0;
      int Int64Ranged = 0;
    }
    unint64_t v29 = 0x1EBD13000uLL;
    if (*(_DWORD *)(v21 + 24) == 1
      && (v19 == 1935897198 || Int64Ranged == 1634754914 || Int64Ranged == 1935897198 || Int64Ranged == 1651861089))
    {
      CFAllocatorRef v30 = CFGetAllocator(v18);
      int v31 = APTransportStreamUnbufferedCreate((uint64_t)v30, v18, v19, v17, v38, v23, &v40);
    }
    else
    {
      CFAllocatorRef v32 = CFGetAllocator(v18);
      int v31 = APTransportStreamCreate(v32, v18, v19, v17, v39, v38, v26, v23, &v40);
    }
    int v33 = v31;
    if (v31)
    {
      APSLogErrorAt();
    }
    else if (gLogCategory_APTransportSession <= 50 {
           && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
    }
    {
      LogPrintF();
    }
    CFRelease(v23);
  }
  else
  {
    APSLogErrorAt();
    int v33 = -16601;
    unint64_t v29 = 0x1EBD13000;
  }
  unsigned int StreamName = v33;
  unsigned int StreamName = FigCFWeakReferenceTableAddValueAssociatedWithKey();
  if (StreamName)
  {
LABEL_82:
    APSLogErrorAt();
    goto LABEL_83;
  }
  int v34 = *(_DWORD *)(v29 + 3736);
  if (v34 <= 30 && (v34 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  int v35 = 0;
  **(void **)(a1 + 24) = v40;
  CFTypeRef v40 = 0;
LABEL_63:
  if (v42) {
    CFRelease(v42);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (v35) {
    CFRelease(v35);
  }
  return StreamName;
}

uint64_t session_createStreamName(uint64_t a1, uint64_t a2, __CFString **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFStringRef *)(DerivedStorage + 32));
    if (MutableCopy)
    {
      uint64_t v6 = MutableCopy;
      CFStringRef v7 = APTransportStreamIDCreateStringRepresentation();
      if (v7)
      {
        CFStringRef v8 = v7;
        CFStringAppendFormat(v6, 0, @"-%@", v7);
        *a3 = v6;
        CFRelease(v8);
        return 0;
      }
      APSLogErrorAt();
      CFRelease(v6);
    }
    else
    {
      APSLogErrorAt();
    }
    return 4294950695;
  }
  else
  {
    APSLogErrorAt();
    return 4294950696;
  }
}

uint64_t session_createConnectionForStream(const void *a1, int64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, const __CFDictionary *a7, void *a8)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  unsigned int Address = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf1 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v111 = 0;
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeRef v17 = Mutable;
  if (!Mutable)
  {
    APSLogErrorAt();
    CFTypeRef v24 = 0;
    CFStringRef v64 = 0;
    CFMutableStringRef MutableCopy = 0;
    int v105 = -16601;
    goto LABEL_308;
  }
  CFAllocatorRef alloc = v15;
  uint64_t v18 = DerivedStorage;
  uint64_t v19 = Mutable;
  if (a7)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(a7, @"QualityOfService");
    if (Value) {
      CFDictionarySetValue(v19, @"QualityOfService", Value);
    }
    uint64_t v21 = CFDictionaryGetValue(a7, (const void *)*MEMORY[0x1E4F22028]);
    if (v21) {
      CFDictionarySetValue(v19, @"DelegatedID", v21);
    }
    CFDictionaryGetTypeID();
    TypedCFDictionaryRef Value = (const void *)CFDictionaryGetTypedValue();
    if (TypedValue) {
      CFDictionarySetValue(v19, @"TrafficRegistrationOptions", TypedValue);
    }
  }
  if (a2 > 1819042675)
  {
    CFTypeRef v17 = v19;
    if (a2 <= 1869575778)
    {
      if (a2 <= 1835626095)
      {
        if (a2 != 1819042676)
        {
          uint64_t v23 = 1835100526;
LABEL_18:
          if (a2 != v23)
          {
LABEL_103:
            if (a7)
            {
              int Int64Ranged = CFDictionaryGetInt64Ranged();
              if (APTransportStreamIDGetStreamCategory(a2) == 1)
              {
                if (Int64Ranged)
                {
                  int v53 = (const void *)FigCFWeakReferenceTableCopyValue();
                  CFTypeRef cf = v53;
                  if (v53)
                  {
                    CFTypeRef v26 = v53;
                    if (gLogCategory_APTransportSession > 40
                      || gLogCategory_APTransportSession == -1 && !_LogCategory_Initialize())
                    {
                      goto LABEL_235;
                    }
                    goto LABEL_127;
                  }
                  APSLogErrorAt();
                  CFTypeRef v24 = 0;
                  goto LABEL_307;
                }
LABEL_148:
                APSLogErrorAt();
                CFTypeRef v24 = 0;
                CFStringRef v64 = 0;
                CFMutableStringRef MutableCopy = 0;
                unsigned int Address = APSSignalErrorAt();
                goto LABEL_239;
              }
            }
            else
            {
              if (APTransportStreamIDGetStreamCategory(a2) == 1) {
                goto LABEL_148;
              }
              int Int64Ranged = 0;
            }
            CMBaseObjectGetDerivedStorage();
            *(void *)cStr = 0;
            __int16 v115 = 0;
            FigCFDictionaryGetBooleanIfPresent();
            CFArrayRef v72 = (const void *)*MEMORY[0x1E4F1CFD0];
            CFIndex v73 = (const void *)*MEMORY[0x1E4F1CFC8];
            CFDictionarySetValue(v17, @"AllowPackageAggregation", (const void *)*MEMORY[0x1E4F1CFC8]);
            FigCFDictionaryGetBooleanIfPresent();
            if (APTransportStreamIDGetStreamCategory(a2) != 3)
            {
              CFDictionarySetValue(v17, @"IsListener", v72);
              CFAllocatorRef v77 = CFGetAllocator(a1);
              int Connection = session_createConnection((uint64_t)v77, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionTCPCreate, a3, a4, a5, a6, 0, 0, -1, 0, (uint64_t)v17, (CFTypeRef *)cStr);
              v79 = 0;
              if (Connection)
              {
                int v80 = Connection;
                APSLogErrorAt();
                v79 = 0;
                goto LABEL_285;
              }
              goto LABEL_270;
            }
            if (Int64Ranged != 1634754914)
            {
              if (Int64Ranged == 1935897198) {
                goto LABEL_265;
              }
              CFIndex v74 = (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionTCPCreate;
              if (Int64Ranged != 1651861089) {
                goto LABEL_267;
              }
            }
            if (APSSettingsIsFeatureEnabled()
              || APSSettingsIsFeatureEnabled()
              || APSSettingsIsFeatureEnabled() | v115)
            {
              FigCFDictionarySetInt();
              if (APSSettingsIsFeatureEnabled()) {
                CFIndex v75 = v72;
              }
              else {
                CFIndex v75 = v73;
              }
              CFDictionarySetValue(v17, @"IsPackageDeliveryTrackingEnabled", v75);
              CFDictionarySetValue(v17, @"UseQUIC", v73);
              v76 = (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionTCPUnbufferedNWCreate;
              goto LABEL_266;
            }
            if (session_getBufferedAudioTransportQueuePool_sBufferedAudioTransportQueuePoolOnce != -1) {
              dispatch_once_f(&session_getBufferedAudioTransportQueuePool_sBufferedAudioTransportQueuePoolOnce, &session_getBufferedAudioTransportQueuePool_sBufferedAudioTransportQueuePool, (dispatch_function_t)session_initBufferedAudioTransportQueuePool);
            }
            FigCFDictionarySetValue();
            FigCFDictionarySetValue();
LABEL_265:
            v76 = (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionTCPUnbufferedCreate;
LABEL_266:
            CFIndex v74 = v76;
LABEL_267:
            CFDictionarySetValue(v17, @"IsListener", v73);
            v79 = (const void *)FigCFWeakReferenceTableCopyValue();
            if (!v79)
            {
              APSLogErrorAt();
              int v80 = -16613;
LABEL_285:
              if (*(void *)cStr) {
                CFRelease(*(CFTypeRef *)cStr);
              }
LABEL_287:
              if (v79) {
                CFRelease(v79);
              }
              unsigned int Address = v80;
              if (!v80)
              {
                CFTypeRef v24 = 0;
                CFStringRef v64 = 0;
                CFMutableStringRef MutableCopy = 0;
                CFTypeRef v26 = cf;
                goto LABEL_238;
              }
              goto LABEL_334;
            }
            CFAllocatorRef v95 = CFGetAllocator(a1);
            int v96 = session_createConnection((uint64_t)v95, v74, a3, a4, a5, a6, 0, 0, -1, (uint64_t)v79, (uint64_t)v17, (CFTypeRef *)cStr);
            if (v96)
            {
              int v80 = v96;
            }
            else
            {
              APTransportStreamIDGetPort(a2);
              int v97 = APSSetFBOPropertyInt64();
              if (!v97)
              {
LABEL_270:
                switch(Int64Ranged)
                {
                  case 1634754914:
                    int v98 = kAPTransportConnectionPackageType_BufferedAPAP;
                    break;
                  case 1651861089:
                    int v98 = kAPTransportConnectionPackageType_RTPBuffered;
                    break;
                  case 1935897198:
                    int v98 = kAPTransportConnectionPackageType_Screen;
                    break;
                  default:
                    int v98 = kAPTransportConnectionPackageType_GenericTCP;
                    break;
                }
                unsigned int v99 = *v98;
                unsigned int v100 = *(const void **)cStr;
                uint64_t CMBaseObject = APTransportConnectionGetCMBaseObject(*(void *)cStr);
                uint64_t v102 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v102) {
                  uint64_t v103 = v102;
                }
                else {
                  uint64_t v103 = 0;
                }
                v104 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *))(v103 + 56);
                if (v104)
                {
                  int v80 = v104(CMBaseObject, @"PackageType", v99);
                  if (!v80)
                  {
                    CFTypeRef cf = v100;
                    *(void *)cStr = 0;
                    goto LABEL_287;
                  }
                }
                else
                {
                  int v80 = -12782;
                }
                goto LABEL_284;
              }
              int v80 = v97;
            }
LABEL_284:
            APSLogErrorAt();
            goto LABEL_285;
          }
          goto LABEL_33;
        }
LABEL_23:
        if (*(_DWORD *)(v18 + 24) == 1)
        {
          CFDictionarySetValue(v17, @"IsListener", (const void *)*MEMORY[0x1E4F1CFD0]);
          CFTypeRef v24 = (const void *)FigCFWeakReferenceTableCopyValue();
          if (!v24) {
            goto LABEL_306;
          }
          CFAllocatorRef v25 = CFGetAllocator(a1);
          unsigned int Address = session_createConnection((uint64_t)v25, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionUDPCreate, a3, a4, a5, a6, 0, 0, -1, (uint64_t)v24, (uint64_t)v17, &cf);
          if (Address) {
            goto LABEL_161;
          }
          CFTypeRef v26 = cf;
        }
        else
        {
          CFTypeRef v26 = 0;
          CFTypeRef v24 = 0;
        }
        uint64_t v44 = APTransportConnectionGetCMBaseObject(v26);
        uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v45) {
          uint64_t v46 = v45;
        }
        else {
          uint64_t v46 = 0;
        }
        CFArrayRef v57 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *))(v46 + 56);
        if (!v57)
        {
          unsigned int Address = -12782;
          goto LABEL_161;
        }
        unsigned int Address = v57(v44, @"PackageType", @"RTCP");
        if (Address) {
          goto LABEL_161;
        }
LABEL_157:
        if (gLogCategory_APTransportSession > 30
          || gLogCategory_APTransportSession == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_236;
        }
        goto LABEL_159;
      }
      uint64_t v27 = v18;
      if (a2 != 1835626096)
      {
        if (a2 != 1869570660) {
          goto LABEL_103;
        }
        if (*(_DWORD *)(v18 + 24) == 1)
        {
          CFDictionarySetValue(v19, @"IsListener", (const void *)*MEMORY[0x1E4F1CFC8]);
          CFTypeRef v24 = (const void *)FigCFWeakReferenceTableCopyValue();
          if (!v24) {
            goto LABEL_306;
          }
          CFAllocatorRef v33 = CFGetAllocator(a1);
          unsigned int Address = session_createConnection((uint64_t)v33, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionTCPCreate, a3, a4, a5, a6, 0, 0, -1, (uint64_t)v24, (uint64_t)v19, &cf);
          if (Address) {
            goto LABEL_161;
          }
          FigCFWeakReferenceTableRemoveValue();
          CFTypeRef v26 = cf;
          FigCFWeakReferenceTableAddValueAssociatedWithKey();
          if (gLogCategory_APTransportSession > 30
            || gLogCategory_APTransportSession == -1 && !_LogCategory_Initialize())
          {
            goto LABEL_236;
          }
          goto LABEL_159;
        }
        APSLogErrorAt();
        CFTypeRef v24 = 0;
        CFStringRef v64 = 0;
        CFMutableStringRef MutableCopy = 0;
        int v105 = -16600;
LABEL_308:
        unsigned int Address = v105;
        goto LABEL_239;
      }
LABEL_76:
      if (*(_DWORD *)(v27 + 24) == 1)
      {
        CFDictionarySetValue(v19, @"IsListener", (const void *)*MEMORY[0x1E4F1CFD0]);
        CFTypeRef v24 = (const void *)FigCFWeakReferenceTableCopyValue();
        if (!v24) {
          goto LABEL_306;
        }
        CFAllocatorRef v43 = CFGetAllocator(a1);
        unsigned int Address = session_createConnection((uint64_t)v43, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionUDPCreate, a3, a4, a5, a6, 0, 0, -1, (uint64_t)v24, (uint64_t)v19, &cf);
        if (Address) {
          goto LABEL_161;
        }
        CFTypeRef v26 = cf;
      }
      else
      {
        CFTypeRef v26 = 0;
        CFTypeRef v24 = 0;
      }
      uint64_t v54 = APTransportConnectionGetCMBaseObject(v26);
      uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v55) {
        uint64_t v56 = v55;
      }
      else {
        uint64_t v56 = 0;
      }
      CFArrayRef v58 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *))(v56 + 56);
      if (!v58)
      {
        unsigned int Address = -12782;
        goto LABEL_161;
      }
      unsigned int Address = v58(v54, @"PackageType", @"RTP");
      if (Address) {
        goto LABEL_161;
      }
      goto LABEL_157;
    }
    uint64_t v27 = v18;
    if (a2 <= 1935897197)
    {
      if (a2 != 1869575779)
      {
        if (a2 != 1919120492) {
          goto LABEL_103;
        }
        if (*(_DWORD *)(v18 + 24) == 1)
        {
          CFDictionarySetValue(v19, @"IsListener", (const void *)*MEMORY[0x1E4F1CFC8]);
          CFDictionarySetValue(v19, @"IsServer", (const void *)*MEMORY[0x1E4F1CFD0]);
          CFAllocatorRef v28 = CFGetAllocator(a1);
          unsigned int Address = session_createConnection((uint64_t)v28, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionHTTPCreate, a3, a4, a5, a6, 0, 0, -1, 0, (uint64_t)v19, &cf);
          if (Address) {
            goto LABEL_334;
          }
          CFTypeRef v26 = cf;
        }
        else
        {
          CFDictionarySetValue(v19, @"IsListener", (const void *)*MEMORY[0x1E4F1CFD0]);
          CFDictionarySetValue(v19, @"IsServer", (const void *)*MEMORY[0x1E4F1CFC8]);
          CFAllocatorRef v59 = CFGetAllocator(a1);
          unsigned int Address = session_createConnection((uint64_t)v59, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionHTTPCreate, a3, a4, a5, a6, *(void *)(v18 + 64), 0, -1, 0, (uint64_t)v19, &cf);
          if (Address) {
            goto LABEL_334;
          }
          CFTypeRef v26 = cf;
          unsigned int Address = APTransportConnectionSetProperty((uint64_t)cf, @"SessionUUID", *(void *)(v18 + 40));
          if (Address) {
            goto LABEL_334;
          }
        }
        FigCFWeakReferenceTableRemoveValue();
        FigCFWeakReferenceTableAddValueAssociatedWithKey();
        if (gLogCategory_APTransportSession > 30
          || gLogCategory_APTransportSession == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_235;
        }
LABEL_127:
        LogPrintF();
LABEL_235:
        CFTypeRef v24 = 0;
        goto LABEL_236;
      }
      goto LABEL_76;
    }
    if (a2 == 1935897198)
    {
      if (*(_DWORD *)(v18 + 24) == 1)
      {
        CFDictionarySetValue(v19, @"IsListener", (const void *)*MEMORY[0x1E4F1CFC8]);
        CFTypeRef v24 = (const void *)FigCFWeakReferenceTableCopyValue();
        if (!v24) {
          goto LABEL_306;
        }
        CFAllocatorRef v51 = CFGetAllocator(a1);
        unsigned int Address = session_createConnection((uint64_t)v51, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionTCPUnbufferedCreate, a3, a4, a5, a6, 0, 0, -1, (uint64_t)v24, (uint64_t)v19, &cf);
        if (Address) {
          goto LABEL_161;
        }
        CFTypeRef v26 = cf;
        unsigned int Address = APTransportConnectionSetProperty((uint64_t)cf, @"PackageType", @"Screen");
        if (Address) {
          goto LABEL_161;
        }
      }
      else
      {
        CFTypeRef v26 = 0;
        CFTypeRef v24 = 0;
      }
      if (gLogCategory_APTransportSession > 30
        || gLogCategory_APTransportSession == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_236;
      }
      goto LABEL_159;
    }
    if (a2 != 1935897205) {
      goto LABEL_103;
    }
    if (*(_DWORD *)(v18 + 24) != 1)
    {
      CFTypeRef v26 = 0;
      CFTypeRef v24 = 0;
LABEL_136:
      if (gLogCategory_APTransportSession > 30
        || gLogCategory_APTransportSession == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_236;
      }
      goto LABEL_159;
    }
    CFDictionarySetValue(v19, @"IsListener", (const void *)*MEMORY[0x1E4F1CFD0]);
    uint64_t v39 = FigCFWeakReferenceTableCopyValue();
    CFTypeRef v24 = (const void *)v39;
    if (!v39) {
      goto LABEL_306;
    }
    uint64_t v40 = APTransportConnectionGetCMBaseObject(v39);
    uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v41) {
      uint64_t v42 = v41;
    }
    else {
      uint64_t v42 = 0;
    }
    int v82 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v42 + 48);
    if (!v82)
    {
      unsigned int Address = -12782;
      goto LABEL_161;
    }
    unsigned int Address = v82(v40, @"RemoteNetworkIPAddress", alloc, &v111);
    if (Address)
    {
LABEL_161:
      APSLogErrorAt();
LABEL_162:
      CFStringRef v64 = 0;
      goto LABEL_163;
    }
    APSNetworkAddressCopyInterfaceName();
    if (cf1)
    {
      if (CFEqual(cf1, @"awdl0"))
      {
        int v83 = @"llw0";
      }
      else
      {
        if (!cf1 || !CFEqual(cf1, @"nan0")) {
          goto LABEL_257;
        }
        int v83 = @"llw1";
      }
      APSNetworkAddressSetInterfaceName();
      CFTypeRef v84 = cf1;
      CFTypeRef cf1 = v83;
      CFRetain(v83);
      if (v84) {
        CFRelease(v84);
      }
    }
LABEL_257:
    CFAllocatorRef v94 = CFGetAllocator(a1);
    unsigned int Address = session_createConnection((uint64_t)v94, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionUDPNWCreate, a3, a4, a5, a6, 0, (uint64_t)v111, -1, 0, (uint64_t)v19, &cf);
    if (Address) {
      goto LABEL_161;
    }
    CFTypeRef v26 = cf;
    unsigned int Address = APTransportConnectionSetProperty((uint64_t)cf, @"PackageType", @"Screen");
    if (Address) {
      goto LABEL_161;
    }
    if (cf1)
    {
      unsigned int Address = APTransportConnectionSetProperty((uint64_t)v26, @"LocalInterfaceName", (uint64_t)cf1);
      if (Address) {
        goto LABEL_161;
      }
    }
    goto LABEL_136;
  }
  CFTypeRef v17 = v19;
  if (a2 > 1734700575)
  {
    if (a2 <= 1802529909)
    {
      if (a2 == 1734700576) {
        goto LABEL_33;
      }
      if (a2 != 1735287668) {
        goto LABEL_103;
      }
      goto LABEL_23;
    }
    if (a2 != 1802529910)
    {
      if (a2 != 1819042165) {
        goto LABEL_103;
      }
      if (*(_DWORD *)(v18 + 24) == 1)
      {
        int v34 = (const void *)*MEMORY[0x1E4F1CFC8];
        CFDictionarySetValue(v19, @"IsListener", (const void *)*MEMORY[0x1E4F1CFC8]);
        CFTypeRef v24 = (const void *)FigCFWeakReferenceTableCopyValue();
        if (!v24) {
          goto LABEL_306;
        }
        if (CFDictionaryGetInt64())
        {
          uint64_t v107 = a8;
          APSSettingsGetIntWithDefault();
          CFDictionarySetInt64();
          CFDictionarySetInt64();
          APSSettingsGetIntWithDefault();
          CFDictionarySetInt64();
          APSIsPersistentGroupSDBCapable();
          APSSettingsGetIntWithDefault();
          CFDictionarySetInt64();
          APSSettingsGetIntWithDefault();
          CFDictionarySetInt64();
          APSSettingsGetIntWithDefault();
          CFDictionarySetInt64();
          int IntWithDefault = APSSettingsGetIntWithDefault();
          int v36 = (const void *)*MEMORY[0x1E4F1CFD0];
          if (IntWithDefault) {
            int v37 = (const void *)*MEMORY[0x1E4F1CFD0];
          }
          else {
            int v37 = v34;
          }
          CFDictionarySetValue(v19, @"DisablePacketExpiryDrop", v37);
          if (*(unsigned char *)(v18 + 128)) {
            CFTypeRef v38 = v36;
          }
          else {
            CFTypeRef v38 = v34;
          }
          CFDictionarySetValue(v19, @"ForceLowLatencyConnection", v38);
          if (gLogCategory_APTransportSession <= 50
            && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          int v81 = (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionUDPNWCreate;
          a8 = v107;
        }
        else
        {
          int v81 = (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionUDPCreate;
        }
        if (a4 == 3)
        {
          long long v122 = 0u;
          long long v123 = 0u;
          long long v120 = 0u;
          long long v121 = 0u;
          long long v118 = 0u;
          long long v119 = 0u;
          *(_OWORD *)cStr = 0u;
          long long v117 = 0u;
          uint64_t v85 = *(void *)(v18 + 64);
          if (v85)
          {
            int v86 = a5;
            unsigned int Address = APTransportDeviceGetAddress(v85, 3, 1, cStr, 128, 0, 0);
            if (Address)
            {
              APSLogErrorAt();
              CFStringRef v64 = 0;
              goto LABEL_331;
            }
            CFStringRef v64 = CFStringCreateWithCString(alloc, cStr, 0x8000100u);
            if (v64)
            {
              unsigned int Address = APSNetworkAddressCreateWithString();
              if (!Address)
              {
                unsigned int Address = APSNetworkAddressCopyInterfaceName();
                if (!Address)
                {
                  CFAllocatorRef v87 = CFGetAllocator(a1);
                  unsigned int Address = session_createConnection((uint64_t)v87, v81, a3, 3, v86, a6, 0, (uint64_t)v111, -1, 0, (uint64_t)v19, &cf);
                  if (!Address)
                  {
LABEL_222:
                    CFTypeRef v26 = cf;
                    uint64_t v89 = APTransportConnectionGetCMBaseObject(cf);
                    uint64_t v90 = *(void *)(CMBaseObjectGetVTable() + 8);
                    if (v90) {
                      uint64_t v91 = v90;
                    }
                    else {
                      uint64_t v91 = 0;
                    }
                    int v92 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *))(v91 + 56);
                    if (v92)
                    {
                      unsigned int Address = v92(v89, @"PackageType", @"RTP");
                      if (!Address)
                      {
                        if (gLogCategory_APTransportSession <= 30
                          && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
                        {
                          LogPrintF();
                        }
                        goto LABEL_237;
                      }
                    }
                    else
                    {
                      unsigned int Address = -12782;
                    }
                    APSLogErrorAt();
LABEL_163:
                    CFMutableStringRef MutableCopy = 0;
                    goto LABEL_239;
                  }
                }
              }
              APSLogErrorAt();
LABEL_331:
              CFMutableStringRef MutableCopy = 0;
              CFTypeRef v17 = v19;
              goto LABEL_239;
            }
            APSLogErrorAt();
            int v106 = -16601;
          }
          else
          {
            APSLogErrorAt();
            CFStringRef v64 = 0;
            int v106 = -16602;
          }
          unsigned int Address = v106;
          goto LABEL_331;
        }
        CFAllocatorRef v88 = CFGetAllocator(a1);
        unsigned int Address = session_createConnection((uint64_t)v88, v81, a3, a4, a5, a6, 0, 0, -1, (uint64_t)v24, (uint64_t)v19, &cf);
        if (Address) {
          goto LABEL_161;
        }
      }
      else
      {
        CFTypeRef v24 = 0;
      }
      CFStringRef v64 = 0;
      goto LABEL_222;
    }
    if (*(_DWORD *)(v18 + 24) != 1)
    {
      CFTypeRef v26 = 0;
      CFTypeRef v24 = 0;
      CFStringRef v64 = 0;
      CFMutableStringRef MutableCopy = 0;
      unsigned int Address = APSSignalErrorAt();
LABEL_238:
      *a8 = v26;
      CFTypeRef cf = 0;
      goto LABEL_239;
    }
    CFTypeRef v24 = (const void *)FigCFWeakReferenceTableCopyValue();
    if (!v24) {
      goto LABEL_306;
    }
    CFAllocatorRef v50 = CFGetAllocator(a1);
    unsigned int Address = session_createConnection((uint64_t)v50, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionUDPCreate, a3, a4, a5, a6, 0, 0, -1, (uint64_t)v24, (uint64_t)v19, &cf);
    if (Address) {
      goto LABEL_161;
    }
    CFTypeRef v26 = cf;
    unsigned int Address = APTransportConnectionSetProperty((uint64_t)cf, @"PackageType", @"LowPowerKeepAlive");
    if (Address) {
      goto LABEL_161;
    }
    if (gLogCategory_APTransportSession > 30
      || gLogCategory_APTransportSession == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_236;
    }
LABEL_159:
    LogPrintF();
LABEL_236:
    CFStringRef v64 = 0;
LABEL_237:
    CFMutableStringRef MutableCopy = 0;
    goto LABEL_238;
  }
  if (a2 <= 1668575851)
  {
    if (a2 != 1634497568)
    {
      uint64_t v23 = 1635088495;
      goto LABEL_18;
    }
LABEL_33:
    if (*(_DWORD *)(v18 + 24) != 1)
    {
      CFTypeRef v26 = 0;
      CFTypeRef v24 = 0;
LABEL_152:
      uint64_t v68 = APTransportConnectionGetCMBaseObject(v26);
      uint64_t v69 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v69) {
        uint64_t v70 = v69;
      }
      else {
        uint64_t v70 = 0;
      }
      uint64_t v71 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *))(v70 + 56);
      if (v71)
      {
        unsigned int Address = v71(v68, @"PackageType", @"RTP");
        if (!Address) {
          goto LABEL_157;
        }
      }
      else
      {
        unsigned int Address = -12782;
      }
      goto LABEL_161;
    }
    CFDictionarySetValue(v17, @"IsListener", (const void *)*MEMORY[0x1E4F1CFC8]);
    CFTypeRef v24 = (const void *)FigCFWeakReferenceTableCopyValue();
    if (v24)
    {
      uint64_t Int64 = CFDictionaryGetInt64();
      CFAllocatorRef v30 = (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionUDPCreate;
      if (Int64)
      {
        CFAllocatorRef v30 = (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionUDPNWCreate;
        if (gLogCategory_APTransportSession <= 50)
        {
          if (gLogCategory_APTransportSession != -1
            || (int v65 = _LogCategory_Initialize(),
                CFAllocatorRef v30 = (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionUDPNWCreate,
                v65))
          {
            LogPrintF();
            CFAllocatorRef v30 = (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionUDPNWCreate;
          }
        }
      }
      CFAllocatorRef v66 = v30;
      CFAllocatorRef v67 = CFGetAllocator(a1);
      unsigned int Address = session_createConnection((uint64_t)v67, v66, a3, a4, a5, a6, 0, 0, -1, (uint64_t)v24, (uint64_t)v17, &cf);
      if (Address) {
        goto LABEL_161;
      }
      CFTypeRef v26 = cf;
      goto LABEL_152;
    }
LABEL_306:
    APSLogErrorAt();
LABEL_307:
    CFStringRef v64 = 0;
    CFMutableStringRef MutableCopy = 0;
    int v105 = -16613;
    goto LABEL_308;
  }
  if (a2 != 1668575852)
  {
    if (a2 != 1702260340) {
      goto LABEL_103;
    }
    if (*(_DWORD *)(v18 + 24) == 1)
    {
      CFDictionarySetValue(v19, @"IsListener", (const void *)*MEMORY[0x1E4F1CFC8]);
      int v31 = (const void *)*MEMORY[0x1E4F1CFD0];
      CFDictionarySetValue(v19, @"IsServer", (const void *)*MEMORY[0x1E4F1CFD0]);
      if (CFDictionaryGetInt64()) {
        CFDictionarySetValue(v19, @"AssertPowerDuringEventHandling", v31);
      }
      CFTypeRef v24 = (const void *)FigCFWeakReferenceTableCopyValue();
      if (!v24) {
        goto LABEL_306;
      }
      CFAllocatorRef v32 = CFGetAllocator(a1);
      unsigned int Address = session_createConnection((uint64_t)v32, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionHTTPCreate, a3, a4, a5, a6, 0, 0, -1, (uint64_t)v24, (uint64_t)v19, &cf);
      if (Address) {
        goto LABEL_161;
      }
      CFTypeRef v26 = cf;
      goto LABEL_131;
    }
    CFDictionarySetValue(v19, @"IsListener", (const void *)*MEMORY[0x1E4F1CFD0]);
    CFDictionarySetValue(v19, @"IsServer", (const void *)*MEMORY[0x1E4F1CFC8]);
    CFAllocatorRef v60 = CFGetAllocator(a1);
    unsigned int Address = session_createConnection((uint64_t)v60, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionHTTPCreate, a3, a4, a5, a6, *(void *)(v18 + 64), 0, -1, 0, (uint64_t)v19, &cf);
    if (!Address)
    {
      CFTypeRef v26 = cf;
      unsigned int Address = APTransportConnectionSetProperty((uint64_t)cf, @"SessionUUID", *(void *)(v18 + 40));
      if (!Address)
      {
        CFTypeRef v24 = 0;
LABEL_131:
        FigCFWeakReferenceTableRemoveValue();
        FigCFWeakReferenceTableAddValueAssociatedWithKey();
        if (gLogCategory_APTransportSession > 30
          || gLogCategory_APTransportSession == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_236;
        }
        goto LABEL_159;
      }
    }
LABEL_334:
    APSLogErrorAt();
    CFTypeRef v24 = 0;
    goto LABEL_162;
  }
  uint64_t v47 = v18;
  if (*(_DWORD *)(v18 + 24) == 1)
  {
    unsigned int v48 = (const void *)*MEMORY[0x1E4F1CFC8];
    CFDictionarySetValue(v17, @"IsListener", (const void *)*MEMORY[0x1E4F1CFC8]);
    CFDictionarySetValue(v17, @"IsServer", v48);
    if (*(unsigned char *)(v47 + 228))
    {
      *(_OWORD *)cStr = *(_OWORD *)(v47 + 216);
      *(void *)&long long v117 = *(void *)(v47 + 232);
      FigCFDictionarySetCMTime();
    }
    CFAllocatorRef v49 = CFGetAllocator(a1);
    unsigned int Address = session_createConnection((uint64_t)v49, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionHTTPCreate, a3, a4, a5, a6, *(void *)(v47 + 64), *(void *)(v47 + 96), -1, 0, (uint64_t)v17, &cf);
    if (Address) {
      goto LABEL_334;
    }
    CFTypeRef v26 = cf;
    unsigned int Address = APTransportConnectionSetProperty((uint64_t)cf, @"SessionUUID", *(void *)(v47 + 40));
    if (Address) {
      goto LABEL_334;
    }
    if (*(void *)(v47 + 96))
    {
      APSNetworkAddressGetPort();
      unsigned int Address = APSSetFBOPropertyInt64();
      if (Address) {
        goto LABEL_334;
      }
    }
    else
    {
      unsigned int Address = APSSetFBOPropertyInt64();
      if (Address) {
        goto LABEL_334;
      }
    }
    session_performWifiManagerRegistration(v47, 1);
    CFMutableStringRef MutableCopy = 0;
LABEL_197:
    FigCFWeakReferenceTableRemoveValue();
    FigCFWeakReferenceTableAddValueAssociatedWithKey();
    if (gLogCategory_APTransportSession <= 30
      && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFTypeRef v24 = 0;
    CFStringRef v64 = 0;
    goto LABEL_238;
  }
  CFIndex v61 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFDictionarySetValue(v17, @"IsListener", (const void *)*MEMORY[0x1E4F1CFD0]);
  CFDictionarySetValue(v17, @"IsServer", v61);
  CFMutableStringRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFDictionarySetValue(MutableCopy, @"PerformInitialTrafficRegistration", v61);
  CFDictionaryReplaceValue(v17, @"TrafficRegistrationOptions", MutableCopy);
  CFAllocatorRef v63 = CFGetAllocator(a1);
  unsigned int Address = session_createConnection((uint64_t)v63, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionHTTPCreate, a3, a4, a5, a6, *(void *)(v47 + 64), 0, *(_DWORD *)(v47 + 92), 0, (uint64_t)v17, &cf);
  if (!Address)
  {
    CFTypeRef v26 = cf;
    unsigned int Address = APTransportConnectionSetProperty((uint64_t)cf, @"SessionUUID", *(void *)(v47 + 40));
    if (!Address) {
      goto LABEL_197;
    }
  }
  APSLogErrorAt();
  CFTypeRef v24 = 0;
  CFStringRef v64 = 0;
LABEL_239:
  if (cf1) {
    CFRelease(cf1);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v64) {
    CFRelease(v64);
  }
  if (v111) {
    CFRelease(v111);
  }
  return Address;
}

uint64_t session_createConnection(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, void, uint64_t, uint64_t, CFTypeRef *), uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, CFTypeRef *a12)
{
  CFTypeRef v46 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v44 = 0;
  CFTypeRef v45 = 0;
  CFTypeRef v43 = 0;
  if ((a4 - 1) > 2) {
    unsigned int v14 = 0;
  }
  else {
    unsigned int v14 = dword_1D093C3D8[a4 - 1];
  }
  uint64_t v15 = a2(a1, a3, (8 * a5) & 0x10 | (4 * (a5 & 1)) | v14, a6, a11, &cf);
  if (v15)
  {
    uint64_t v24 = v15;
    goto LABEL_43;
  }
  if (a7)
  {
    uint64_t CMBaseObject = APTransportConnectionGetCMBaseObject(cf);
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v22 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v18 + 56);
    if (!v22)
    {
      uint64_t v24 = 4294954514;
      goto LABEL_43;
    }
    uint64_t v23 = v22(CMBaseObject, @"TransportDevice", a7);
    if (v23)
    {
      uint64_t v24 = v23;
LABEL_43:
      APSLogErrorAt();
      goto LABEL_44;
    }
LABEL_41:
    uint64_t v24 = 0;
    *a12 = cf;
    CFTypeRef cf = 0;
    goto LABEL_46;
  }
  if (a8)
  {
    uint64_t v19 = APTransportConnectionGetCMBaseObject(cf);
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    CFAllocatorRef v28 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v21 + 56);
    if (!v28)
    {
      uint64_t v24 = 4294954514;
      goto LABEL_43;
    }
    uint64_t v29 = v28(v19, @"RemoteNetworkIPAddress", a8);
    if (v29)
    {
      uint64_t v24 = v29;
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  if (a10)
  {
    uint64_t v25 = APTransportConnectionGetCMBaseObject(a10);
    uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v26) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    int v31 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v27 + 48);
    if (!v31)
    {
      uint64_t v24 = 4294954514;
      goto LABEL_43;
    }
    uint64_t v32 = *MEMORY[0x1E4F1CF80];
    uint64_t v33 = v31(v25, @"RemoteNetworkIPAddress", *MEMORY[0x1E4F1CF80], &v46);
    if (v33)
    {
      uint64_t v24 = v33;
      goto LABEL_43;
    }
    CFTypeRef v34 = v46;
    uint64_t v35 = APTransportConnectionGetCMBaseObject(cf);
    uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = 0;
    }
    CFTypeRef v38 = *(uint64_t (**)(uint64_t, __CFString *, CFTypeRef))(v37 + 56);
    if (!v38)
    {
      uint64_t v24 = 4294954514;
      goto LABEL_43;
    }
    uint64_t v39 = v38(v35, @"RemoteNetworkIPAddress", v34);
    if (v39)
    {
      uint64_t v24 = v39;
      goto LABEL_43;
    }
    uint64_t v40 = APTransportConnectionCopyProperty(a10, @"BoundInterfaceIndex", v32, (uint64_t)&v45);
    if (v40)
    {
      uint64_t v24 = v40;
      goto LABEL_43;
    }
    uint64_t v41 = APTransportConnectionSetProperty((uint64_t)cf, @"BoundInterfaceIndex", (uint64_t)v45);
    if (v41)
    {
      uint64_t v24 = v41;
      goto LABEL_43;
    }
    APTransportConnectionCopyProperty(a10, @"LocalInterfaceName", v32, (uint64_t)&v44);
    if (v44) {
      APTransportConnectionSetProperty((uint64_t)cf, @"LocalInterfaceName", (uint64_t)v44);
    }
    goto LABEL_41;
  }
  if (a9 < 0) {
    goto LABEL_41;
  }
  APTransportSocketCreate(*MEMORY[0x1E4F1CF80], a9, (uint64_t *)&v43);
  if (v43)
  {
    uint64_t v30 = APTransportConnectionSetProperty((uint64_t)cf, @"ConnectedSocket", (uint64_t)v43);
    if (v30)
    {
      uint64_t v24 = v30;
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  APSLogErrorAt();
  uint64_t v24 = 4294950695;
LABEL_44:
  if (cf) {
    CFRelease(cf);
  }
LABEL_46:
  if (v46) {
    CFRelease(v46);
  }
  if (v45) {
    CFRelease(v45);
  }
  if (v44) {
    CFRelease(v44);
  }
  if (v43) {
    CFRelease(v43);
  }
  return v24;
}

uint64_t APTransportConnectionSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject = APTransportConnectionGetCMBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFStringRef v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }
  return v8(CMBaseObject, a2, a3);
}

uint64_t session_initBufferedAudioTransportQueuePool(void *a1)
{
  uint64_t result = APSSettingsGetIntWithDefault();
  if (result)
  {
    if (gLogCategory_APTransportSession <= 50
      && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t result = APSPriorityDispatchQueuePoolCreate();
    if (result) {
      uint64_t result = APSLogErrorAt();
    }
  }
  *a1 = 0;
  return result;
}

uint64_t session_copyStreamWithIDInternal(uint64_t a1)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    APSLogErrorAt();
    return 4294954511;
  }
  else
  {
    APTransportStreamIDGetToken(*(void *)(a1 + 8));
    uint64_t v2 = FigCFWeakReferenceTableCopyValue();
    if (v2)
    {
      uint64_t v3 = v2;
      if (gLogCategory_APTransportSession <= 30
        && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t result = 0;
      **(void **)(a1 + 16) = v3;
    }
    else
    {
      APSLogErrorAt();
      return 4294960578;
    }
  }
  return result;
}

uint64_t session_ensureKeepAliveControllerCreatedAndResumed(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v22 = 0;
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = 4294950696;
  uint64_t v5 = v3;
  uint64_t v6 = 0;
  switch(*(_DWORD *)(v3 + 184))
  {
    case 0:
      goto LABEL_19;
    case 1:
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!Mutable) {
        goto LABEL_43;
      }
      uint64_t v6 = Mutable;
      CFDictionarySetValue(Mutable, @"UseLegacyProtocol", (const void *)*MEMORY[0x1E4F1CFD0]);
LABEL_4:
      if (*(void *)(v5 + 192))
      {
        uint64_t v4 = 0;
        CFStringRef v8 = 0;
      }
      else
      {
        APTransportStreamIDGetToken(1668575852);
        CFStringRef v8 = (const void *)FigCFWeakReferenceTableCopyValue();
        if (v8)
        {
          uint64_t v4 = APTransportKeepAliveControllerStandardCreate(0, v6, v8, (void *)(v5 + 192));
          if (v4) {
            APSLogErrorAt();
          }
        }
        else
        {
          APSLogErrorAt();
          uint64_t v4 = APSSignalErrorAt();
        }
      }
      if (v6) {
        goto LABEL_15;
      }
      goto LABEL_16;
    case 2:
      goto LABEL_4;
    case 4:
      if (*(void *)(v3 + 200)) {
        goto LABEL_19;
      }
      APTransportStreamIDGetToken(1802529910);
      uint64_t v9 = FigCFWeakReferenceTableCopyValue();
      if (v9)
      {
        CFStringRef v8 = (const void *)v9;
        uint64_t v10 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (v10)
        {
          uint64_t v6 = v10;
          CFDictionarySetValue(v10, @"SessionUUID", *(const void **)(v5 + 40));
          uint64_t v4 = APTKeepAliveControllerLowPowerCreate(*MEMORY[0x1E4F1CF80], v6, v8, (void *)(v5 + 200));
          if (v4) {
            APSLogErrorAt();
          }
LABEL_15:
          CFRelease(v6);
LABEL_16:
          if (!v8)
          {
LABEL_18:
            if (v4) {
              goto LABEL_44;
            }
            goto LABEL_19;
          }
        }
        else
        {
          APSLogErrorAt();
          uint64_t v4 = APSSignalErrorAt();
        }
        CFRelease(v8);
        goto LABEL_18;
      }
LABEL_43:
      APSLogErrorAt();
      uint64_t v4 = APSSignalErrorAt();
      if (v4) {
        goto LABEL_44;
      }
LABEL_19:
      uint64_t KeepAliveController = session_getKeepAliveController(a1, &v22);
      if (KeepAliveController)
      {
        uint64_t v4 = KeepAliveController;
      }
      else
      {
        if (!v22) {
          return 0;
        }
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        uint64_t v12 = *(void *)(DerivedStorage + 176);
        if (v12)
        {
          uint64_t CMBaseObject = APTransportKeepAliveControllerGetCMBaseObject(v22);
          uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v15 = v14 ? v14 : 0;
          unsigned int v16 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t))(v15 + 56);
          if ((!v16 || v16(CMBaseObject, @"KeepAliveInterval", v12))
            && gLogCategory_APTransportSession <= 60
            && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        uint64_t v17 = v22;
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = *(uint64_t (**)(uint64_t))(v19 + 8);
        if (v20)
        {
          uint64_t v4 = v20(v17);
          if (!v4)
          {
            *(unsigned char *)(DerivedStorage + 169) = 1;
            return v4;
          }
        }
        else
        {
          uint64_t v4 = 4294954514;
        }
      }
LABEL_44:
      APSLogErrorAt();
      return v4;
    default:
      goto LABEL_44;
  }
}

void session_dispatchConnectionDroppedInternal(uint64_t *a1)
{
  session_handleConnectionDroppedInternal(*a1, a1[1]);
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  uint64_t v2 = (const void *)a1[1];
  if (v2)
  {
    CFRelease(v2);
  }
}

void session_handleConnectionDroppedInternal(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage || DerivedStorage[88]) {
    return;
  }
  DerivedStorage[88] = 1;
  if (a2)
  {
    APSGetFBOPropertyInt64();
    if (gLogCategory_APTransportSession <= 90
      && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
    {
LABEL_6:
      LogPrintF();
    }
  }
  else if (gLogCategory_APTransportSession <= 90 {
         && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
  }
  {
    goto LABEL_6;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v5 = Mutable;
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v5);
  }
  else
  {
    APSLogErrorAt();
    APSSignalErrorAt();
  }
}

uint64_t session_handleConnectivityHelperEvents(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  if (a3) {
    CFRetain(a3);
  }
  return APSDispatchAsyncFHelper();
}

void session_handleConnectivityHelperEventsInternal(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportSession <= 40
    && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
  {
    APConnectivityHelperGetEventString(*(_DWORD *)(a1 + 8));
    LogPrintF();
  }
  int v2 = *(_DWORD *)(a1 + 8);
  switch(v2)
  {
    case 4:
      CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      int v16 = 0;
      if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 88)) {
        break;
      }
      if (!v6) {
        goto LABEL_55;
      }
      CFDictionaryGetValue(v6, @"networkInterfaceName");
      uint64_t Int64 = CFDictionaryGetInt64();
      if (gLogCategory_APTransportSession <= 40
        && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (Int64) {
        break;
      }
      int SessionTransportType = session_getSessionTransportType(v5, &v16);
      if (SessionTransportType)
      {
        if (SessionTransportType == -16608) {
          break;
        }
        goto LABEL_55;
      }
      if ((v16 & 0xFFFFFFFE) != 4) {
        break;
      }
LABEL_37:
      session_handleConnectionDroppedInternal(v5, 0);
      break;
    case 2:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      char v14 = 0;
      if (gLogCategory_APTransportSession <= 40
        && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (*(unsigned char *)(DerivedStorage + 88)) {
        break;
      }
      CMBaseObjectGetDerivedStorage();
      unsigned int v15 = 0;
      int v9 = session_getSessionTransportType(v5, (int *)&v15);
      if (v9)
      {
        if (v9 == -16608) {
          break;
        }
        APSLogErrorAt();
        goto LABEL_55;
      }
      unsigned int v10 = (v15 < 8) & (0x8Cu >> v15);
      if (gLogCategory_APTransportSession <= 40
        && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (!v10) {
        break;
      }
      if (APConnectivityHelperQueryWiFiPower(*(void *)(DerivedStorage + 208), (uint64_t)&v14))
      {
LABEL_55:
        APSLogErrorAt();
        break;
      }
      if (v14) {
        break;
      }
      if (gLogCategory_APTransportSession <= 60
        && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_37;
    case 1:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v4 = CMBaseObjectGetDerivedStorage();
      if (gLogCategory_APTransportSession <= 40
        && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (APConnectivityHelperRegisterForEvent(*(void *)(v4 + 208), v3, 2)) {
        goto LABEL_55;
      }
      if (gLogCategory_APTransportSession <= 40
        && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (APConnectivityHelperDeregisterForEvent(*(void *)(v4 + 208), v3, 1)) {
        goto LABEL_55;
      }
      break;
  }
  uint64_t v12 = *(const void **)(a1 + 24);
  if (v12) {
    CFRelease(v12);
  }
  unsigned int v13 = *(const void **)(a1 + 16);
  if (v13) {
    CFRelease(v13);
  }
}

uint64_t APTDiagnosticMulticastDataToAllHosts(uint64_t a1, int a2, uint64_t a3, const __CFData *a4)
{
  memset(v22, 0, sizeof(v22));
  int v23 = 0;
  memset(v20, 0, sizeof(v20));
  int v21 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  uint64_t v6 = StringToSockAddr();
  if (v6 || (SockAddrSetPort(), uint64_t v6 = StringToSockAddr(), v6))
  {
    uint64_t v7 = v6;
    goto LABEL_4;
  }
  SockAddrSetPort();
  if (!getifaddrs(&v17)) {
    goto LABEL_15;
  }
  if (*__error())
  {
    uint64_t v7 = *__error();
    if (!v7)
    {
LABEL_15:
      unsigned int v10 = v17;
      if (!v17) {
        return 0;
      }
      uint64_t v7 = 0;
      if (a2 == 2) {
        uint64_t v11 = (const sockaddr *)v20;
      }
      else {
        uint64_t v11 = (const sockaddr *)v22;
      }
      int v8 = -1;
      while (1)
      {
        if (v10->ifa_flags)
        {
          if (v10->ifa_addr)
          {
            if (v10->ifa_name)
            {
              strlen(v10->ifa_name);
              if (!strncmpx() && (v10->ifa_flags & 0x8018) == 0x8000)
              {
                if (if_nametoindex(v10->ifa_name))
                {
                  p_sa_len = &v10->ifa_addr->sa_len;
                  if (p_sa_len[1] == a2 && (a2 != 30 || p_sa_len[8] == 254 && (p_sa_len[9] & 0xC0) == 0x80))
                  {
                    if ((v8 & 0x80000000) == 0 && close(v8) && *__error()) {
                      __error();
                    }
                    int v8 = socket(a2, 2, 17);
                    if ((v8 & 0x80000000) == 0)
                    {
LABEL_35:
                      uint64_t v13 = SocketSetMulticastInterface();
                      if (v13)
                      {
                        uint64_t v7 = v13;
                      }
                      else
                      {
                        BytePtr = CFDataGetBytePtr(a4);
                        size_t Length = CFDataGetLength(a4);
                        int v16 = (socklen_t *)&v18;
                        if (a2 == 2) {
                          int v16 = (socklen_t *)&v19;
                        }
                        sendto(v8, BytePtr, Length, 0, v11, *v16);
                        uint64_t v7 = 0;
                      }
                      goto LABEL_44;
                    }
                    if (*__error())
                    {
                      uint64_t v7 = *__error();
                      if (!v7) {
                        goto LABEL_35;
                      }
                    }
                    else
                    {
                      uint64_t v7 = 4294960596;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_44:
        unsigned int v10 = v10->ifa_next;
        if (!v10) {
          goto LABEL_5;
        }
      }
    }
  }
  else
  {
    uint64_t v7 = 4294960596;
  }
LABEL_4:
  int v8 = -1;
LABEL_5:
  if (v17) {
    MEMORY[0x1D25E6B30]();
  }
  if ((v8 & 0x80000000) == 0 && close(v8) && *__error()) {
    __error();
  }
  return v7;
}

uint64_t APTransportStreamSendPlistMessage(uint64_t a1, uint64_t a2, CFPropertyListRef propertyList)
{
  if (propertyList)
  {
    CFDataRef Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], propertyList, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (!Data)
    {
      APSLogErrorAt();
      return 4294950685;
    }
    CFDataRef v6 = Data;
    uint64_t BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
    if (BlockBufferWithCFDataNoCopy)
    {
      uint64_t v11 = BlockBufferWithCFDataNoCopy;
      APSLogErrorAt();
      goto LABEL_15;
    }
  }
  else
  {
    CFDataRef v6 = 0;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, void))(v9 + 48);
  if (v10)
  {
    uint64_t v11 = v10(a1, a2, 0);
    if (!v11)
    {
      if (!v6) {
        return v11;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v11 = 4294954514;
  }
  APSLogErrorAt();
  if (v6) {
LABEL_15:
  }
    CFRelease(v6);
  return v11;
}

uint64_t APTransportStreamSendPlistMessageCreatingReply(uint64_t a1, uint64_t a2, CFPropertyListRef propertyList, uint64_t a4)
{
  if (propertyList)
  {
    CFDataRef Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], propertyList, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (!Data)
    {
      APSLogErrorAt();
      return 4294950685;
    }
    CFDataRef v8 = Data;
    uint64_t BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
    if (BlockBufferWithCFDataNoCopy)
    {
      uint64_t v13 = BlockBufferWithCFDataNoCopy;
      APSLogErrorAt();
      goto LABEL_15;
    }
  }
  else
  {
    CFDataRef v8 = 0;
  }
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v11 + 56);
  if (v12)
  {
    uint64_t v13 = v12(a1, a2, 0, a4);
    if (!v13)
    {
      if (!v8) {
        return v13;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v13 = 4294954514;
  }
  APSLogErrorAt();
  if (v8) {
LABEL_15:
  }
    CFRelease(v8);
  return v13;
}

uint64_t APTransportStreamSendPlistMessageCreatingPlistReply(uint64_t a1, uint64_t a2, CFPropertyListRef propertyList, void *a4)
{
  CFTypeRef v21 = 0;
  CFTypeRef cf = 0;
  if (propertyList)
  {
    CFDataRef Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], propertyList, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (!Data)
    {
      APSLogErrorAt();
      unsigned int v15 = 0;
      uint64_t v14 = 4294950685;
      goto LABEL_22;
    }
    CFDataRef v8 = Data;
    uint64_t BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
    if (BlockBufferWithCFDataNoCopy)
    {
      uint64_t v14 = BlockBufferWithCFDataNoCopy;
      APSLogErrorAt();
      unsigned int v15 = 0;
      goto LABEL_21;
    }
    CFTypeRef v10 = cf;
  }
  else
  {
    CFTypeRef v10 = 0;
    CFDataRef v8 = 0;
  }
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *))(v12 + 56);
  if (!v13)
  {
    uint64_t v14 = 4294954514;
    goto LABEL_18;
  }
  uint64_t v14 = v13(a1, a2, v10, &v21);
  if (v14)
  {
LABEL_18:
    APSLogErrorAt();
    goto LABEL_19;
  }
  unsigned int v15 = 0;
  if (!a4 || !v21)
  {
LABEL_20:
    if (!v8) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
  if (CFDataWithBlockBufferNoCopy)
  {
    uint64_t v14 = CFDataWithBlockBufferNoCopy;
    goto LABEL_18;
  }
  CFPropertyListRef v18 = CFPropertyListCreateWithData(v16, 0, 0, 0, 0);
  unsigned int v15 = v18;
  if (v18)
  {
    CFTypeID v19 = CFGetTypeID(v18);
    if (v19 == CFDictionaryGetTypeID())
    {
      uint64_t v14 = 0;
      *a4 = v15;
LABEL_19:
      unsigned int v15 = 0;
      goto LABEL_20;
    }
  }
  APSLogErrorAt();
  uint64_t v14 = 4294950686;
  if (v8) {
LABEL_21:
  }
    CFRelease(v8);
LABEL_22:
  if (cf) {
    CFRelease(cf);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v14;
}

uint64_t APTransportStreamSendData(uint64_t a1, uint64_t a2)
{
  uint64_t BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
  if (BlockBufferWithCFDataNoCopy)
  {
    uint64_t v8 = BlockBufferWithCFDataNoCopy;
    goto LABEL_9;
  }
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, void))(v6 + 48);
  if (!v7)
  {
    uint64_t v8 = 4294954514;
LABEL_9:
    APSLogErrorAt();
    return v8;
  }
  uint64_t v8 = v7(a1, a2, 0);
  if (v8) {
    goto LABEL_9;
  }
  return v8;
}

uint64_t APTransportStreamSendDataCreatingReplyData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef v13 = 0;
  CFTypeRef cf = 0;
  uint64_t BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
  if (BlockBufferWithCFDataNoCopy)
  {
    uint64_t CFDataWithBlockBufferNoCopy = BlockBufferWithCFDataNoCopy;
    goto LABEL_12;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFTypeRef v10 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *))(v9 + 56);
  if (!v10)
  {
    uint64_t CFDataWithBlockBufferNoCopy = 4294954514;
LABEL_12:
    APSLogErrorAt();
    goto LABEL_13;
  }
  uint64_t CFDataWithBlockBufferNoCopy = v10(a1, a2, cf, &v13);
  if (CFDataWithBlockBufferNoCopy) {
    goto LABEL_12;
  }
  if (a4)
  {
    if (v13)
    {
      uint64_t CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
      if (CFDataWithBlockBufferNoCopy) {
        goto LABEL_12;
      }
    }
  }
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
  return CFDataWithBlockBufferNoCopy;
}

uint64_t APBrokerManagerGetTypeID()
{
  if (gAPBrokerManagerInitOnce != -1) {
    dispatch_once_f(&gAPBrokerManagerInitOnce, 0, (dispatch_function_t)_APBrokerManagerGetTypeID);
  }
  return gAPBrokerManagerTypeID;
}

uint64_t _APBrokerManagerGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPBrokerManagerTypeID = result;
  return result;
}

uint64_t APBrokerManagerCreateWithDiscoveryDelegate(long long *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v23 = 0u;
  long long v24 = 0u;
  *(_OWORD *)label = 0u;
  long long v22 = 0u;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  if (gAPBrokerManagerInitOnce != -1) {
    dispatch_once_f(&gAPBrokerManagerInitOnce, 0, (dispatch_function_t)_APBrokerManagerGetTypeID);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  uint64_t v5 = Instance;
  Instance[1] = 0u;
  uint64_t v6 = Instance + 1;
  Instance[16] = 0u;
  Instance[17] = 0u;
  Instance[14] = 0u;
  Instance[15] = 0u;
  Instance[12] = 0u;
  Instance[13] = 0u;
  Instance[10] = 0u;
  Instance[11] = 0u;
  Instance[8] = 0u;
  Instance[9] = 0u;
  Instance[6] = 0u;
  Instance[7] = 0u;
  Instance[4] = 0u;
  Instance[5] = 0u;
  Instance[2] = 0u;
  Instance[3] = 0u;
  uint64_t v7 = FigSimpleMutexCreate();
  v6[10] = v7;
  if (!v7) {
    goto LABEL_32;
  }
  SNPrintF();
  dispatch_queue_t v8 = dispatch_queue_create(label, 0);
  *((void *)v5 + 11) = v8;
  if (!v8) {
    goto LABEL_32;
  }
  SNPrintF();
  dispatch_queue_t v9 = dispatch_queue_create(label, 0);
  *((void *)v5 + 3) = v9;
  if (!v9) {
    goto LABEL_32;
  }
  *((_WORD *)v5 + 64) = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *((void *)v5 + 14) = Mutable;
  if (!Mutable) {
    goto LABEL_32;
  }
  CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *((void *)v5 + 15) = v11;
  if (!v11) {
    goto LABEL_32;
  }
  uint64_t v12 = v5 + 2;
  if (a1)
  {
    long long v14 = *a1;
    long long v13 = a1[1];
    *((void *)v5 + 8) = *((void *)a1 + 4);
    _OWORD *v12 = v14;
    v5[3] = v13;
    if (*(void *)v12)
    {
      uint64_t v15 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *((void *)v5 + 9) = v15;
      if (!v15) {
        goto LABEL_32;
      }
    }
  }
  else
  {
    *((void *)v5 + 8) = 0;
    _OWORD *v12 = 0u;
    v5[3] = 0u;
    *((void *)v5 + 5) = BonjourDiscoveryDelegateSetup;
    *((void *)v5 + 6) = BonjourDiscoveryDelegateStart;
    *((void *)v5 + 7) = BonjourDiscoveryDelegateStop;
    *((void *)v5 + 8) = BonjourDiscoveryDelegateCleanup;
  }
  unsigned int v20 = 0;
  if (*((void *)v5 + 5))
  {
    CFAllocatorRef v16 = (const void *)_APBrokerManagerCopyReferencedObjectIfNecessary(*((void *)v5 + 9), (int *)&v20);
    if (v20
      || (*((void *)v5 + 10) = (*((uint64_t (**)(const void *, void (*)(int, const void *, uint64_t), _OWORD *, unsigned int *))v5
                                  + 5))(v16, _APBrokerManagerHandleBonjourEvent, v5, &v20), v20))
    {
      APSLogErrorAt();
      if (!v16)
      {
LABEL_20:
        uint64_t v17 = v20;
        if (v20)
        {
          APSLogErrorAt();
          goto LABEL_33;
        }
        goto LABEL_21;
      }
    }
    else if (!v16)
    {
      goto LABEL_20;
    }
    CFRelease(v16);
    goto LABEL_20;
  }
LABEL_21:
  CFPropertyListRef v18 = objc_msgSend(objc_alloc(MEMORY[0x1E4F5E318]), "initWithServiceType:", 2, v5);
  void *v6 = v18;
  if (!v18)
  {
LABEL_32:
    APSLogErrorAt();
    uint64_t v17 = 4294960568;
LABEL_33:
    CFRelease(v5);
    return v17;
  }
  [v18 activate];
  uint64_t v17 = 0;
  *a2 = v5;
  return v17;
}

uint64_t APBrokerManagerCreate(void *a1)
{
  return APBrokerManagerCreateWithDiscoveryDelegate(0, a1);
}

uint64_t APBrokerManagerInvalidate(uint64_t a1)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  ++*(_DWORD *)(a1 + 200);
  *(_WORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  _APBrokerManagerUpdateBrowsing(a1);
  _APBrokerManagerClearAuthCallbackState(a1);
  _APBrokerManagerDiscoveryDelegateStop(a1);
  [*(id *)(a1 + 16) invalidate];
  *(unsigned char *)(a1 + 104) = 1;
  int v2 = *(pthread_mutex_t **)(a1 + 96);
  return pthread_mutex_unlock(v2);
}

void _APBrokerManagerClearAuthCallbackState(uint64_t a1)
{
  FigSimpleMutexCheckIsLockedOnThisThread();
  int v2 = *(const void **)(a1 + 208);
  if (v2)
  {
    _Block_release(v2);
    *(void *)(a1 + 208) = 0;
  }
  *(_DWORD *)(a1 + 216) = 0;
  uint64_t v3 = *(const void **)(a1 + 224);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 224) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 232);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 232) = 0;
  }
  uint64_t v5 = *(NSObject **)(a1 + 240);
  if (v5)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 240));
    dispatch_release(v5);
    *(void *)(a1 + 240) = 0;
  }
}

void _APBrokerManagerDiscoveryDelegateStop(uint64_t a1)
{
  int v3 = 0;
  if (*(void *)(a1 + 56))
  {
    int v2 = (const void *)_APBrokerManagerCopyReferencedObjectIfNecessary(*(void *)(a1 + 72), &v3);
    if (v3)
    {
      APSLogErrorAt();
      if (!v2) {
        return;
      }
    }
    else
    {
      (*(void (**)(const void *, void))(a1 + 56))(v2, *(void *)(a1 + 80));
      if (!v2) {
        return;
      }
    }
    CFRelease(v2);
  }
}

uint64_t APBrokerManagerAuthenticateBrokerGroup(uint64_t a1, const void *a2, const void *a3, void *a4)
{
  if (!a3)
  {
    APSLogErrorAt();
    uint64_t v14 = 4294960591;
    goto LABEL_21;
  }
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  if (!*(unsigned char *)(a1 + 104))
  {
    if (gLogCategory_APBrokerManager <= 50
      && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
    {
      if (a2) {
        IsAppleInternalBuild();
      }
      IsAppleInternalBuild();
      LogPrintF();
    }
    if (*(void *)(a1 + 240))
    {
      uint64_t v14 = 4294960575;
    }
    else
    {
      dispatch_source_t v8 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, 0);
      *(void *)(a1 + 240) = v8;
      if (v8)
      {
        *(void *)(a1 + 208) = _Block_copy(a4);
        _APBrokerManagerRequestBrokerDiscovery(a1);
        CFRetain((CFTypeRef)a1);
        dispatch_queue_t v9 = *(NSObject **)(a1 + 240);
        handler[0] = MEMORY[0x1E4F143A8];
        handler[1] = 3221225472;
        handler[2] = __APBrokerManagerAuthenticateBrokerGroup_block_invoke;
        handler[3] = &__block_descriptor_40_e5_v8__0l;
        handler[4] = a1;
        dispatch_source_set_event_handler(v9, handler);
        CFTypeRef v10 = *(NSObject **)(a1 + 240);
        v16[0] = MEMORY[0x1E4F143A8];
        v16[1] = 3221225472;
        v16[2] = __APBrokerManagerAuthenticateBrokerGroup_block_invoke_2;
        v16[3] = &__block_descriptor_40_e5_v8__0l;
        v16[4] = a1;
        dispatch_source_set_cancel_handler(v10, v16);
        CFMutableDictionaryRef v11 = *(NSObject **)(a1 + 240);
        dispatch_time_t v12 = dispatch_time(0, 24000000000);
        dispatch_source_set_timer(v11, v12, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        dispatch_resume(*(dispatch_object_t *)(a1 + 240));
        *(void *)(a1 + 224) = CFRetain(a3);
        if (a2)
        {
          *(void *)(a1 + 232) = CFRetain(a2);
          FigSimpleMutexCheckIsLockedOnThisThread();
          CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), a2);
          if (Value) {
            _APBrokerManagerAuthenticateBrokerGroup((const void *)a1, (uint64_t)Value, a3);
          }
        }
        else
        {
          *(void *)(a1 + 232) = 0;
          CFDictionaryApplyBlock();
        }
        goto LABEL_15;
      }
      uint64_t v14 = 4294960568;
    }
    APSLogErrorAt();
    _APBrokerManagerClearAuthCallbackState(a1);
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
LABEL_21:
    _APBrokerManagerCallAuthenticationCallback(a1, v14, 0, a4);
    return v14;
  }
LABEL_15:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
  return 0;
}

uint64_t _APBrokerManagerRequestBrokerDiscovery(uint64_t a1)
{
  FigSimpleMutexCheckIsLockedOnThisThread();
  ++*(_DWORD *)(a1 + 132);
  if (gLogCategory_APBrokerManager <= 30
    && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return _APBrokerManagerUpdateBrowsing(a1);
}

uint64_t __APBrokerManagerAuthenticateBrokerGroup_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 96));
  int v2 = *(_DWORD *)(v1 + 216);
  if (!v2)
  {
    int v2 = -6722;
    *(_DWORD *)(v1 + 216) = -6722;
  }
  if (gLogCategory_APBrokerManager <= 90)
  {
    if (gLogCategory_APBrokerManager != -1 || (v3 = _LogCategory_Initialize(), int v2 = *(_DWORD *)(v1 + 216), v3))
    {
      LogPrintF();
      int v2 = *(_DWORD *)(v1 + 216);
    }
  }
  _APBrokerManagerCallAuthenticationCallback(v1, v2, 0, *(void **)(v1 + 208));
  _APBrokerManagerClearAuthCallbackState(v1);
  uint64_t v4 = *(pthread_mutex_t **)(v1 + 96);
  return pthread_mutex_unlock(v4);
}

void __APBrokerManagerAuthenticateBrokerGroup_block_invoke_2(uint64_t a1)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(*(void *)(a1 + 32) + 96));
  _APBrokerManagerReleaseBrokerDiscovery(*(void *)(a1 + 32));
  pthread_mutex_unlock(*(pthread_mutex_t **)(*(void *)(a1 + 32) + 96));
  int v2 = *(const void **)(a1 + 32);
  CFRelease(v2);
}

uint64_t _APBrokerManagerReleaseBrokerDiscovery(uint64_t a1)
{
  FigSimpleMutexCheckIsLockedOnThisThread();
  int v2 = *(_DWORD *)(a1 + 132);
  if (v2)
  {
    *(_DWORD *)(a1 + 132) = v2 - 1;
    if (gLogCategory_APBrokerManager <= 30
      && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return _APBrokerManagerUpdateBrowsing(a1);
  }
  else
  {
    return APSLogErrorAt();
  }
}

void _APBrokerManagerAuthenticateBrokerGroup(const void *a1, uint64_t a2, const void *a3)
{
  CFRetain(a1);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___APBrokerManagerAuthenticateBrokerGroup_block_invoke;
  aBlock[3] = &__block_descriptor_40_e44_v28__0i8____CFString__12____CFDictionary__20l;
  aBlock[4] = a1;
  APBrokerGroupAuthenticate(a2, a3, aBlock);
}

void __APBrokerManagerAuthenticateBrokerGroup_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void _APBrokerManagerCallAuthenticationCallback(uint64_t a1, int a2, const void *a3, void *aBlock)
{
  if (aBlock)
  {
    uint64_t v7 = _Block_copy(aBlock);
    if (a3) {
      CFRetain(a3);
    }
    dispatch_source_t v8 = *(NSObject **)(a1 + 88);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___APBrokerManagerCallAuthenticationCallback_block_invoke;
    block[3] = &unk_1E688AFA0;
    int v10 = a2;
    block[4] = v7;
    void block[5] = a3;
    dispatch_async(v8, block);
  }
}

uint64_t APBrokerManagerGetInfoFromBrokerGroup(uint64_t a1, const void *a2, const void *a3)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  if (!*(unsigned char *)(a1 + 104))
  {
    if (gLogCategory_APBrokerManager <= 50
      && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
    {
      if (a2) {
        IsAppleInternalBuild();
      }
      LogPrintF();
    }
    if (*(void *)(a1 + 272))
    {
      uint64_t v12 = 4294960575;
    }
    else
    {
      dispatch_source_t v6 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, 0);
      *(void *)(a1 + 272) = v6;
      if (v6)
      {
        *(void *)(a1 + 248) = _Block_copy(a3);
        _APBrokerManagerRequestBrokerDiscovery(a1);
        CFRetain((CFTypeRef)a1);
        uint64_t v7 = *(NSObject **)(a1 + 272);
        handler[0] = MEMORY[0x1E4F143A8];
        handler[1] = 3221225472;
        handler[2] = __APBrokerManagerGetInfoFromBrokerGroup_block_invoke;
        handler[3] = &__block_descriptor_40_e5_v8__0l;
        handler[4] = a1;
        dispatch_source_set_event_handler(v7, handler);
        dispatch_source_t v8 = *(NSObject **)(a1 + 272);
        v14[0] = MEMORY[0x1E4F143A8];
        v14[1] = 3221225472;
        v14[2] = __APBrokerManagerGetInfoFromBrokerGroup_block_invoke_2;
        v14[3] = &__block_descriptor_40_e5_v8__0l;
        v14[4] = a1;
        dispatch_source_set_cancel_handler(v8, v14);
        dispatch_queue_t v9 = *(NSObject **)(a1 + 272);
        dispatch_time_t v10 = dispatch_time(0, 3000000000);
        dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        dispatch_resume(*(dispatch_object_t *)(a1 + 272));
        if (a2)
        {
          *(void *)(a1 + 256) = CFRetain(a2);
          FigSimpleMutexCheckIsLockedOnThisThread();
          CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), a2);
          if (Value) {
            _APBrokerManagerGetInfoFromBrokerGroup((const void *)a1, (uint64_t)Value);
          }
        }
        else
        {
          *(void *)(a1 + 256) = 0;
          CFDictionaryApplyBlock();
        }
        goto LABEL_14;
      }
      uint64_t v12 = 4294960568;
    }
    APSLogErrorAt();
    _APBrokerManagerClearGetInfoCallbackState(a1);
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
    _APBrokerManagerCallGetInfoCallback(a1, v12, 0, a3);
    return v12;
  }
LABEL_14:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
  return 0;
}

uint64_t __APBrokerManagerGetInfoFromBrokerGroup_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 96));
  if (*(void *)(v1 + 264))
  {
    if (gLogCategory_APBrokerManager <= 50
      && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    int v2 = 0;
  }
  else if (gLogCategory_APBrokerManager <= 60 {
         && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
  }
  {
    int v2 = -6722;
    LogPrintF();
  }
  else
  {
    int v2 = -6722;
  }
  _APBrokerManagerCallGetInfoCallback(v1, v2, *(void *)(v1 + 264), *(const void **)(v1 + 248));
  _APBrokerManagerClearGetInfoCallbackState(v1);
  int v3 = *(pthread_mutex_t **)(v1 + 96);
  return pthread_mutex_unlock(v3);
}

void __APBrokerManagerGetInfoFromBrokerGroup_block_invoke_2(uint64_t a1)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(*(void *)(a1 + 32) + 96));
  _APBrokerManagerReleaseBrokerDiscovery(*(void *)(a1 + 32));
  pthread_mutex_unlock(*(pthread_mutex_t **)(*(void *)(a1 + 32) + 96));
  int v2 = *(const void **)(a1 + 32);
  CFRelease(v2);
}

void _APBrokerManagerGetInfoFromBrokerGroup(const void *a1, uint64_t a2)
{
  CFRetain(a1);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___APBrokerManagerGetInfoFromBrokerGroup_block_invoke;
  aBlock[3] = &__block_descriptor_40_e44_v28__0i8____CFString__12____CFDictionary__20l;
  aBlock[4] = a1;
  APBrokerGroupGetInfo(a2, aBlock);
}

void __APBrokerManagerGetInfoFromBrokerGroup_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void _APBrokerManagerClearGetInfoCallbackState(uint64_t a1)
{
  FigSimpleMutexCheckIsLockedOnThisThread();
  int v2 = *(const void **)(a1 + 248);
  if (v2)
  {
    _Block_release(v2);
    *(void *)(a1 + 248) = 0;
  }
  int v3 = *(const void **)(a1 + 264);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 264) = 0;
  }
  uint64_t v4 = *(NSObject **)(a1 + 272);
  if (v4)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 272));
    dispatch_release(v4);
    *(void *)(a1 + 272) = 0;
  }
}

void _APBrokerManagerCallGetInfoCallback(uint64_t a1, int a2, uint64_t a3, const void *a4)
{
  if (a4)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      FigCFDictionarySetValue();
      dispatch_source_t v8 = _Block_copy(a4);
      CFRetain(Mutable);
    }
    else
    {
      APSLogErrorAt();
      dispatch_source_t v8 = _Block_copy(a4);
      a2 = -6728;
    }
    dispatch_queue_t v9 = *(NSObject **)(a1 + 88);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___APBrokerManagerCallGetInfoCallback_block_invoke;
    block[3] = &unk_1E688AFA0;
    int v11 = a2;
    block[4] = v8;
    void block[5] = Mutable;
    dispatch_async(v9, block);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
}

void APBrokerManagerResolveBrokeredReceiverDNSName(uint64_t a1, CFStringRef theString, void *a3)
{
  CFTypeRef v13 = 0;
  CFTypeRef v14 = 0;
  if (gLogCategory_APBrokerManager <= 50
    && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!theString) {
    goto LABEL_26;
  }
  if (!a3)
  {
    APSLogErrorAt();
    goto LABEL_19;
  }
  APBrokeredReceiverCopyInfoFromDNSName(theString, &v14, &v13);
  if (v14 && v13)
  {
    if (gLogCategory_APBrokerManager <= 50
      && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_11;
    }
    while (1)
    {
      FigSimpleMutexCheckIsNotLockedOnThisThread();
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
      CFTypeRef v6 = v14;
      FigSimpleMutexCheckIsLockedOnThisThread();
      CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), v6);
      if (Value)
      {
        APBrokerGroupResolveReceiverDNSName((uint64_t)Value, v13, a3);
        int v8 = 0;
      }
      else
      {
        APSLogErrorAt();
        int v8 = -6705;
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
LABEL_16:
      if (!v8) {
        break;
      }
      dispatch_queue_t v9 = _Block_copy(a3);
      if (v9)
      {
        dispatch_time_t v10 = *(NSObject **)(a1 + 88);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __APBrokerManagerResolveBrokeredReceiverDNSName_block_invoke;
        block[3] = &unk_1E688AED8;
        block[4] = v9;
        int v12 = v8;
        dispatch_async(v10, block);
        break;
      }
      FatalErrorF();
LABEL_11:
      LogPrintF();
    }
  }
  else
  {
LABEL_26:
    APSLogErrorAt();
    int v8 = -6705;
    if (a3) {
      goto LABEL_16;
    }
  }
LABEL_19:
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
}

void __APBrokerManagerResolveBrokeredReceiverDNSName_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  int v2 = *(const void **)(a1 + 32);
  _Block_release(v2);
}

uint64_t _APBrokerManagerFinalize(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104))
  {
    int v10 = 0;
    if (!*(void *)(a1 + 64)) {
      goto LABEL_6;
    }
    uint64_t v1 = (const void *)_APBrokerManagerCopyReferencedObjectIfNecessary(*(void *)(a1 + 72), &v10);
    if (!v10)
    {
      (*(void (**)(const void *, void))(a1 + 64))(v1, *(void *)(a1 + 80));
      *(void *)(a1 + 80) = 0;
      if (!v1) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else
  {
    FatalErrorF();
  }
  APSLogErrorAt();
  if (v1) {
LABEL_5:
  }
    CFRelease(v1);
LABEL_6:
  int v3 = *(const void **)(a1 + 192);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 192) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 72);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 112);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 112) = 0;
  }
  CFTypeRef v6 = *(const void **)(a1 + 120);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 120) = 0;
  }

  *(void *)(a1 + 16) = 0;
  uint64_t v7 = *(NSObject **)(a1 + 88);
  if (v7)
  {
    dispatch_release(v7);
    *(void *)(a1 + 88) = 0;
  }
  int v8 = *(NSObject **)(a1 + 24);
  if (v8)
  {
    dispatch_release(v8);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t result = *(void *)(a1 + 96);
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    *(void *)(a1 + 96) = 0;
  }
  return result;
}

void _APBrokerManagerHandleBonjourEvent(int a1, const void *a2, uint64_t a3)
{
  if (gLogCategory_APBrokerManager <= 30
    && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if ((a1 - 3) >= 2)
  {
    if (a1 == 2)
    {
      CFTypeRef cf1 = 0;
      FigSimpleMutexCheckIsNotLockedOnThisThread();
      pthread_mutex_lock(*(pthread_mutex_t **)(a3 + 96));
      if (*(unsigned char *)(a3 + 136))
      {
        if (APBrokerCopyBrokerInfoFromBonjourInfo((uint64_t)a2, 0, &cf1))
        {
          APSLogErrorAt();
        }
        else
        {
          CFTypeRef v10 = cf1;
          FigSimpleMutexCheckIsLockedOnThisThread();
          CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 112), v10);
          if (Value)
          {
            int v12 = Value;
            CFRetain(Value);
            if (APBrokerGroupRemoveBroker((uint64_t)v12, (uint64_t)a2))
            {
              APSLogErrorAt();
            }
            else if (APBrokerGroupIsEmpty((uint64_t)v12))
            {
              CFTypeRef v13 = *(__CFDictionary **)(a3 + 112);
              GroupID = (const void *)APBrokerGroupGetGroupID((uint64_t)v12);
              CFDictionaryRemoveValue(v13, GroupID);
              _APBrokerManagerCleanupBrokerGroup(a3, v12);
            }
            pthread_mutex_unlock(*(pthread_mutex_t **)(a3 + 96));
            CFTypeRef v15 = v12;
LABEL_49:
            CFRelease(v15);
            goto LABEL_50;
          }
        }
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(a3 + 96));
LABEL_50:
      if (cf1) {
        CFRelease(cf1);
      }
      return;
    }
    if (a1 != 1) {
      return;
    }
    CFTypeRef cf = 0;
    CFTypeRef cf1 = 0;
    FigSimpleMutexCheckIsNotLockedOnThisThread();
    pthread_mutex_lock(*(pthread_mutex_t **)(a3 + 96));
    if (!*(unsigned char *)(a3 + 136)) {
      goto LABEL_48;
    }
    if (APBrokerCopyBrokerInfoFromBonjourInfo((uint64_t)a2, 0, &cf1))
    {
LABEL_57:
      APSLogErrorAt();
      goto LABEL_48;
    }
    CFTypeRef v6 = cf1;
    FigSimpleMutexCheckIsLockedOnThisThread();
    uint64_t v7 = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 112), v6);
    CFTypeRef cf = v7;
    if (v7)
    {
      int v8 = v7;
      CFRetain(v7);
      FigSimpleMutexCheckIsLockedOnThisThread();
      if (gLogCategory_APBrokerManager <= 30
        && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      _APBrokerManagerFireBrokerGroupEvent(a3, v8, *(void *)(a3 + 152));
      if (APBrokerGroupAddOrUpdateBroker((uint64_t)v8, a2)) {
        goto LABEL_57;
      }
LABEL_48:
      pthread_mutex_unlock(*(pthread_mutex_t **)(a3 + 96));
      CFTypeRef v15 = cf;
      if (!cf) {
        goto LABEL_50;
      }
      goto LABEL_49;
    }
    if (APBrokerGroupCreate(cf1, &cf)) {
      goto LABEL_57;
    }
    unsigned int v20 = _APBrokerManagerHandleBrokeredReceiversChanged;
    if (APBrokerGroupSetDelegate((uint64_t)cf, (const void *)a3, &v20)) {
      goto LABEL_57;
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 112), cf1, cf);
    CFTypeRef v16 = cf;
    FigSimpleMutexCheckIsLockedOnThisThread();
    if (gLogCategory_APBrokerManager <= 30
      && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    _APBrokerManagerFireBrokerGroupEvent(a3, v16, *(void *)(a3 + 144));
    if (APBrokerGroupAddOrUpdateBroker((uint64_t)cf, a2)) {
      goto LABEL_57;
    }
    uint64_t v17 = *(const void **)(a3 + 224);
    if (v17)
    {
      CFPropertyListRef v18 = *(const void **)(a3 + 232);
      if (v18)
      {
        if (!CFEqual(cf1, v18)) {
          goto LABEL_42;
        }
        uint64_t v17 = *(const void **)(a3 + 224);
      }
      _APBrokerManagerAuthenticateBrokerGroup((const void *)a3, (uint64_t)cf, v17);
    }
LABEL_42:
    if (*(void *)(a3 + 272))
    {
      CFTypeID v19 = *(const void **)(a3 + 256);
      if (!v19 || CFEqual(cf1, v19)) {
        _APBrokerManagerGetInfoFromBrokerGroup((const void *)a3, (uint64_t)cf);
      }
    }
    if (*(unsigned char *)(a3 + 137)) {
      APBrokerGroupStartReceiverPolling((uint64_t)cf);
    }
    goto LABEL_48;
  }
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a3 + 96));
  if (*(unsigned char *)(a3 + 136) && _APBrokerManagerRemoveAllBrokerGroups(a3)) {
    APSLogErrorAt();
  }
  dispatch_queue_t v9 = *(pthread_mutex_t **)(a3 + 96);
  pthread_mutex_unlock(v9);
}

uint64_t _APBrokerManagerHandleBrokeredReceiversChanged(uint64_t a1, uint64_t a2)
{
  GroupID = (const void *)APBrokerGroupGetGroupID(a1);
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a2 + 96));
  CFRetain((CFTypeRef)a2);
  CFRetain(GroupID);
  uint64_t v4 = *(NSObject **)(a2 + 88);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___APBrokerManagerHandleBrokeredReceiversChanged_block_invoke;
  v6[3] = &__block_descriptor_48_e5_v8__0l;
  v6[4] = a2;
  v6[5] = GroupID;
  dispatch_async(v4, v6);
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 96));
}

void _APBrokerManagerUpdateBrokerGroupReceiversWithList(uint64_t a1, const void *a2, uint64_t a3)
{
  FigSimpleMutexCheckIsLockedOnThisThread();
  CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 120), a2);
  if (Value)
  {
    uint64_t v7 = (__CFDictionary *)CFRetain(Value);
    if (v7)
    {
      CFMutableDictionaryRef v8 = v7;
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
LABEL_6:
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        CFMutableDictionaryRef v12 = Mutable;
        CFDictionaryApplyBlock();
        CFDictionaryApplyBlock();
        if (a3) {
          CFDictionaryApplyBlock();
        }
        CFRelease(v12);
      }
      else
      {
        APSLogErrorAt();
      }
      CFRelease(v8);
      return;
    }
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef v10 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v10)
  {
    CFMutableDictionaryRef v8 = v10;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 120), a2, v10);
    goto LABEL_6;
  }
  APSLogErrorAt();
}

void _APBrokerManagerFireBrokeredReceiverEvent(uint64_t a1, const void *a2, uint64_t a3)
{
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (a3)
  {
    int v6 = *(_DWORD *)(a1 + 200);
    uint64_t v7 = *(const void **)(a1 + 192);
    if (v7) {
      CFTypeRef v8 = CFRetain(v7);
    }
    else {
      CFTypeRef v8 = 0;
    }
    CFRetain((CFTypeRef)a1);
    CFRetain(a2);
    CFAllocatorRef v9 = *(NSObject **)(a1 + 88);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___APBrokerManagerFireBrokeredReceiverEvent_block_invoke;
    block[3] = &__block_descriptor_68_e5_v8__0l;
    int v11 = v6;
    block[4] = a1;
    void block[5] = a3;
    void block[6] = a2;
    void block[7] = v8;
    dispatch_async(v9, block);
  }
}

void _APBrokerManagerFireBrokerGroupEvent(uint64_t a1, const void *a2, uint64_t a3)
{
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (a3)
  {
    int v6 = *(_DWORD *)(a1 + 200);
    uint64_t v7 = *(const void **)(a1 + 192);
    if (v7) {
      CFTypeRef v8 = CFRetain(v7);
    }
    else {
      CFTypeRef v8 = 0;
    }
    CFRetain((CFTypeRef)a1);
    CFRetain(a2);
    CFAllocatorRef v9 = *(NSObject **)(a1 + 88);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___APBrokerManagerFireBrokerGroupEvent_block_invoke;
    block[3] = &__block_descriptor_68_e5_v8__0l;
    int v11 = v6;
    block[4] = a1;
    void block[5] = a3;
    void block[6] = a2;
    void block[7] = v8;
    dispatch_async(v9, block);
  }
}

void _APBrokerManagerCleanupBrokerGroup(uint64_t a1, const void *a2)
{
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (*(unsigned char *)(a1 + 137)) {
    APBrokerGroupStopReceiverPolling((uint64_t)a2);
  }
  GroupID = (const void *)APBrokerGroupGetGroupID((uint64_t)a2);
  _APBrokerManagerUpdateBrokerGroupReceiversWithList(a1, GroupID, 0);
  APBrokerGroupInvalidate((uint64_t)a2);
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (gLogCategory_APBrokerManager <= 30
    && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v5 = *(void *)(a1 + 160);
  _APBrokerManagerFireBrokerGroupEvent(a1, a2, v5);
}

uint64_t _APBrokerManagerRemoveAllBrokerGroups(uint64_t a1)
{
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 112)) >= 1)
  {
    CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFDictionaryRef *)(a1 + 112));
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 112));
    if (!Copy)
    {
      APSLogErrorAt();
      return 4294960568;
    }
    CFDictionaryApplyBlock();
    CFRelease(Copy);
  }
  return 0;
}

CFTypeRef *BonjourDiscoveryDelegateSetup(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v5 = (CFTypeRef *)malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (v5)
  {
    int v6 = BonjourBrowser_CreateEx();
    if (v6)
    {
      APSLogErrorAt();
      if (*v5)
      {
        BonjourBrowser_Stop();
        CFRelease(*v5);
      }
      free(v5);
      uint64_t v5 = 0;
    }
    else
    {
      BonjourBrowser_SetEventHandler();
    }
  }
  else
  {
    APSLogErrorAt();
    int v6 = -6728;
  }
  if (a4) {
    *a4 = v6;
  }
  return v5;
}

uint64_t BonjourDiscoveryDelegateStop()
{
  return BonjourBrowser_Stop();
}

void BonjourDiscoveryDelegateCleanup(int a1, CFTypeRef *a2)
{
  if (a2)
  {
    if (*a2)
    {
      BonjourBrowser_Stop();
      CFRelease(*a2);
    }
    free(a2);
  }
}

uint64_t healthReporter_getTypeID(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APTSessionHealthReporterCreate(const __CFAllocator *a1, const __CFString *a2, const void *a3, uint64_t a4, unsigned int a5, void *a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a6)
  {
    uint64_t v17 = 4294895125;
    APSLogErrorAt();
    return v17;
  }
  if (APTSessionHealthReporterGetTypeID_sInitOnce != -1) {
    dispatch_once_f(&APTSessionHealthReporterGetTypeID_sInitOnce, &APTSessionHealthReporterGetTypeID_sTypeID, (dispatch_function_t)healthReporter_getTypeID);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt();
    return 4294895126;
  }
  CFTypeRef v13 = Instance;
  Instance[1] = 0u;
  CFTypeRef v14 = Instance + 1;
  Instance[4] = 0u;
  Instance[5] = 0u;
  Instance[2] = 0u;
  Instance[3] = 0u;
  if (gLogCategory_APTSessionHealthReporter <= 30
    && (gLogCategory_APTSessionHealthReporter != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  arc4random_buf(v14, 8uLL);
  if (!a2
    || CFStringGetCString(a2, (char *)v13 + 76, 17, 0x8000100u)
    && (unsigned int v15 = if_nametoindex((const char *)v13 + 76), (*((_DWORD *)v13 + 18) = v15) != 0))
  {
    if (a4)
    {
      APSNetworkAddressGetSocketAddr();
      long long v16 = *(_OWORD *)((char *)v20 + 12);
      *(_OWORD *)((char *)v13 + 24) = v20[0];
      *(_OWORD *)((char *)v13 + 36) = v16;
      SockAddrToString();
      *((void *)v13 + 7) = CFStringCreateWithFormat(a1, 0, @"rtsp://%s:%d/", v20, a5);
    }
    *((void *)v13 + 8) = a3;
    if (a3) {
      CFRetain(a3);
    }
    uint64_t v17 = 0;
    *a6 = v13;
    return v17;
  }
  APSLogErrorAt();
  uint64_t v19 = APSSignalErrorAt();
  CFRelease(v13);
  return v19;
}

uint64_t APTSessionHealthReporterReportNetworkStatus(uint64_t a1, int a2)
{
  if (a2 != 1 && a2 != 2) {
    return 0;
  }
  if (!*(void *)(a1 + 56) || !*(void *)(a1 + 64))
  {
    APSLogErrorAt();
    uint64_t v6 = 4294895122;
LABEL_42:
    APSLogErrorAt();
    return v6;
  }
  if (healthReporter_getSymptomReporter_onceToken != -1) {
    dispatch_once(&healthReporter_getSymptomReporter_onceToken, &__block_literal_global_1);
  }
  if (!healthReporter_getSymptomReporter_symptomReporter)
  {
    APSLogErrorAt();
    uint64_t v8 = APSSignalErrorAt();
    if (v8)
    {
      uint64_t v6 = v8;
LABEL_41:
      APSLogErrorAt();
      goto LABEL_42;
    }
  }
  if (symptom_new()
    && !symptom_set_qualifier()
    && !symptom_set_qualifier()
    && !symptom_set_additional_qualifier())
  {
    uint64_t v3 = healthReporter_setStringSymptomQualifier();
    if (v3)
    {
      uint64_t v6 = v3;
      goto LABEL_41;
    }
    uint64_t v4 = healthReporter_setStringSymptomQualifier();
    if (v4)
    {
      uint64_t v6 = v4;
      goto LABEL_41;
    }
    if (!strcmp((const char *)(a1 + 76), "awdl0"))
    {
      PeerMACunsigned int Address = GetPeerMACAddress();
      if (PeerMACAddress)
      {
        uint64_t v6 = PeerMACAddress;
        APSLogErrorAt();
        if (gLogCategory_APTSessionHealthReporter <= 60
          && (gLogCategory_APTSessionHealthReporter != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_41;
      }
      if (symptom_set_additional_qualifier())
      {
        APSLogErrorAt();
        uint64_t v9 = APSSignalErrorAt();
        if (v9)
        {
          uint64_t v6 = v9;
          goto LABEL_41;
        }
      }
    }
    if (!symptom_send())
    {
      if (gLogCategory_APTSessionHealthReporter <= 50
        && (gLogCategory_APTSessionHealthReporter != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return 0;
    }
  }
  APSLogErrorAt();
  uint64_t v6 = APSSignalErrorAt();
  if (v6) {
    goto LABEL_42;
  }
  return v6;
}

void healthReporter_Finalize(uint64_t a1)
{
  if (gLogCategory_APTSessionHealthReporter <= 30
    && (gLogCategory_APTSessionHealthReporter != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  int v2 = *(const void **)(a1 + 56);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 56) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 64) = 0;
  }
}

uint64_t healthReporter_setStringSymptomQualifier()
{
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  if (!CStringPtrAndBufferToFree
    || (strlen(CStringPtrAndBufferToFree), symptom_set_additional_qualifier()))
  {
    APSLogErrorAt();
    uint64_t v1 = APSSignalErrorAt();
  }
  else
  {
    uint64_t v1 = 0;
  }
  free(0);
  return v1;
}

uint64_t __healthReporter_getSymptomReporter_block_invoke()
{
  uint64_t result = symptom_framework_init();
  healthReporter_getSymptomReporter_symptomReporter = result;
  return result;
}

uint64_t APBrokerKeychainUtilsStoreAuthToken(__CFString *a1, __CFString *a2, uint64_t a3, uint64_t a4)
{
  v25[2] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t v23 = 0;
  if (!a1 || !a2 || !a3 || !a4)
  {
    APSLogErrorAt();
    CFTypeRef v13 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v14 = *MEMORY[0x1E4F28760];
    uint64_t v15 = -6705;
LABEL_23:
    uint64_t v16 = objc_msgSend(v13, "errorWithDomain:code:userInfo:", v14, v15, 0, v18, v19, v20, v21);
    uint64_t v9 = 0;
LABEL_24:
    int v11 = 0;
LABEL_25:
    uint64_t v23 = v16;
    goto LABEL_14;
  }
  if (gLogCategory_APBrokerKeychainUtils <= 30
    && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
  {
    unsigned int v20 = a1;
    uint64_t v21 = a2;
    uint64_t v18 = a3;
    uint64_t v19 = a4;
    LogPrintF();
  }
  int KeychainItemID = APBrokerKeychainUtilsCreateKeychainItemID(a1, a2, (uint64_t *)&cf);
  if (KeychainItemID)
  {
    int v17 = KeychainItemID;
    APSLogErrorAt();
    CFTypeRef v13 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v14 = *MEMORY[0x1E4F28760];
    uint64_t v15 = v17;
    goto LABEL_23;
  }
  uint64_t v9 = objc_opt_new();
  if (!v9)
  {
    APSLogErrorAt();
    uint64_t v16 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-6728 userInfo:0];
    goto LABEL_24;
  }
  CFMutableDictionaryRef v10 = objc_opt_new();
  int v11 = v10;
  if (!v10)
  {
    APSLogErrorAt();
    uint64_t v16 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-6728 userInfo:0];
    goto LABEL_25;
  }
  [v10 setAccessGroup:@"com.apple.airplay"];
  [v11 setAccessibleType:2];
  [v11 setIdentifier:cf];
  v24[0] = @"authToken";
  v24[1] = @"authTokenTTL";
  v25[0] = a3;
  v25[1] = a4;
  objc_msgSend(v11, "setMetadata:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v25, v24, 2));
  [v11 setType:@"APBroker"];
  [v9 addOrUpdateOrReAddItem:v11 flags:0 logCategory:&gLogCategory_APBrokerKeychainUtils logLabel:@"Broker auth token" error:&v23];
  if (NSErrorToOSStatus()) {
    APSLogErrorAt();
  }
LABEL_14:

  if (cf) {
    CFRelease(cf);
  }
  if (v23
    && gLogCategory_APBrokerKeychainUtils <= 30
    && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return NSErrorToOSStatus();
}

uint64_t APBrokerKeychainUtilsCreateKeychainItemID(__CFString *a1, __CFString *a2, uint64_t *a3)
{
  unsigned int v6 = 0;
  if (_IsValidKeychainItemIDComponent(a1) && _IsValidKeychainItemIDComponent(a2))
  {
    *a3 = CFStringCreateF();
  }
  else
  {
    APSLogErrorAt();
    return -6705;
  }
  return v6;
}

uint64_t APBrokerKeychainUtilsCopyAuthToken(__CFString *a1, __CFString *a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  uint64_t v21 = 0;
  if (gLogCategory_APBrokerKeychainUtils <= 30
    && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
  {
    uint64_t v18 = a1;
    uint64_t v19 = a2;
    LogPrintF();
  }
  if (!a1)
  {
    APSLogErrorAt();
    CFTypeRef v13 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v14 = *MEMORY[0x1E4F28760];
    uint64_t v15 = -6705;
LABEL_25:
    uint64_t v17 = objc_msgSend(v13, "errorWithDomain:code:userInfo:", v14, v15, 0, v18, v19);
    uint64_t v7 = 0;
LABEL_27:
    uint64_t v9 = 0;
LABEL_29:
    CFMutableDictionaryRef v10 = 0;
    uint64_t v21 = v17;
    goto LABEL_15;
  }
  int KeychainItemID = APBrokerKeychainUtilsCreateKeychainItemID(a1, a2, (uint64_t *)&cf);
  if (KeychainItemID)
  {
    int v16 = KeychainItemID;
    APSLogErrorAt();
    CFTypeRef v13 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v14 = *MEMORY[0x1E4F28760];
    uint64_t v15 = v16;
    goto LABEL_25;
  }
  uint64_t v7 = objc_opt_new();
  if (!v7)
  {
    APSLogErrorAt();
    uint64_t v17 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-6728 userInfo:0];
    goto LABEL_27;
  }
  uint64_t v8 = objc_opt_new();
  uint64_t v9 = v8;
  if (!v8)
  {
    APSLogErrorAt();
    uint64_t v17 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-6728 userInfo:0];
    goto LABEL_29;
  }
  [v8 setAccessGroup:@"com.apple.airplay"];
  [v9 setIdentifier:cf];
  [v9 setType:@"APBroker"];
  CFMutableDictionaryRef v10 = (void *)[v7 copyItemMatchingItem:v9 flags:0 error:&v21];
  if (!NSErrorToOSStatus())
  {
    int v11 = (const void *)objc_msgSend((id)objc_msgSend(v10, "metadata"), "objectForKeyedSubscript:", @"authToken");
    if (gLogCategory_APBrokerKeychainUtils <= 30
      && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *a3 = CFRetain(v11);
  }
LABEL_15:

  if (cf) {
    CFRelease(cf);
  }
  if (v21
    && gLogCategory_APBrokerKeychainUtils <= 30
    && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return NSErrorToOSStatus();
}

uint64_t APBrokerKeychainUtilsCopyAllAuthTokens(CFTypeRef a1, __CFArray **a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = 0;
  if (gLogCategory_APBrokerKeychainUtils <= 30
    && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
  {
    CFTypeRef v19 = a1;
    LogPrintF();
  }
  if (!a1 || !a2)
  {
    APSLogErrorAt();
    uint64_t v18 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-6705 userInfo:0];
    CFMutableDictionaryRef Mutable = 0;
LABEL_39:
    uint64_t v8 = 0;
    uint64_t v5 = 0;
LABEL_41:
    uint64_t v25 = v18;
    goto LABEL_29;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    APSLogErrorAt();
    uint64_t v18 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-6728 userInfo:0];
    goto LABEL_39;
  }
  uint64_t v5 = objc_opt_new();
  if (!v5)
  {
    APSLogErrorAt();
    uint64_t v18 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-6728 userInfo:0];
    uint64_t v8 = 0;
    goto LABEL_41;
  }
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9C8], "date"), "timeIntervalSinceReferenceDate");
  double v7 = v6;
  uint64_t v8 = _CopyAllAuthTokenKeychainItems(v5, &v25);
  if (!NSErrorToOSStatus())
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v21 objects:v26 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v22;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v22 != v11) {
            objc_enumerationMutation(v8);
          }
          CFTypeRef v13 = *(void **)(*((void *)&v21 + 1) + 8 * i);
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v13, "metadata", v19), "objectForKeyedSubscript:", @"authTokenTTL"), "doubleValue");
          double v15 = v14;
          objc_msgSend((id)objc_msgSend(v13, "dateModified"), "timeIntervalSinceReferenceDate");
          CFTypeRef cf2 = 0;
          if (v7 - v16 < v15)
          {
            APBrokerKeychainUtilsCopyInfoFromKeychainItemID((CFStringRef)[v13 identifier], &cf2, 0);
            if (cf2 == a1) {
              goto LABEL_19;
            }
            if (!cf2) {
              continue;
            }
            if (CFEqual(a1, cf2)) {
LABEL_19:
            }
              CFArrayAppendValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v13, "metadata"), "objectForKeyedSubscript:", @"authToken"));
            if (cf2) {
              CFRelease(cf2);
            }
          }
        }
        uint64_t v10 = [v8 countByEnumeratingWithState:&v21 objects:v26 count:16];
      }
      while (v10);
    }
    if (gLogCategory_APBrokerKeychainUtils <= 30
      && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *a2 = Mutable;
    CFMutableDictionaryRef Mutable = 0;
  }
LABEL_29:

  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v25
    && gLogCategory_APBrokerKeychainUtils <= 30
    && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return NSErrorToOSStatus();
}

void APBrokerKeychainUtilsCopyInfoFromKeychainItemID(CFStringRef theString, void *a2, void *a3)
{
  if (theString)
  {
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString, @"\x1C");
    CFArrayRef v6 = ArrayBySeparatingStrings;
    if (ArrayBySeparatingStrings
      && CFArrayGetCount(ArrayBySeparatingStrings) == 2
      && (double v7 = (__CFString *)CFArrayGetValueAtIndex(v6, 0), _IsValidKeychainItemIDComponent(v7))
      && (uint64_t v8 = (__CFString *)CFArrayGetValueAtIndex(v6, 1), _IsValidKeychainItemIDComponent(v8)))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, 0);
      uint64_t v10 = CFArrayGetValueAtIndex(v6, 1);
    }
    else
    {
      APSLogErrorAt();
      ValueAtIndex = 0;
      uint64_t v10 = 0;
    }
  }
  else
  {
    ValueAtIndex = 0;
    uint64_t v10 = 0;
    CFArrayRef v6 = 0;
  }
  if (a2)
  {
    if (ValueAtIndex) {
      CFTypeRef v11 = CFRetain(ValueAtIndex);
    }
    else {
      CFTypeRef v11 = 0;
    }
    *a2 = v11;
  }
  if (a3)
  {
    if (v10) {
      CFTypeRef v12 = CFRetain(v10);
    }
    else {
      CFTypeRef v12 = 0;
    }
    *a3 = v12;
  }
  if (v6)
  {
    CFRelease(v6);
  }
}

uint64_t __APBrokerKeychainUtilsRemoveExpiredAuthTokens_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (gLogCategory_APBrokerKeychainUtils <= 90)
    {
      if (gLogCategory_APBrokerKeychainUtils != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  else if (gLogCategory_APBrokerKeychainUtils <= 50)
  {
    if (gLogCategory_APBrokerKeychainUtils != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t _IsValidKeychainItemIDComponent(__CFString *a1)
{
  if (a1
    && CFStringGetLength(a1) >= 1
    && ![(__CFString *)a1 containsString:@"\x1C"])
  {
    return 1;
  }
  APSLogErrorAt();
  return 0;
}

uint64_t APTransportConnectionHTTPCreate(uint64_t a1, const void *a2, int a3, int a4, uint64_t a5, CFTypeRef *a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unsigned int v29 = 0;
  CFTypeRef cf = 0;
  if (!a6)
  {
    APSLogErrorAt();
    unsigned int v29 = -12780;
    goto LABEL_60;
  }
  APTransportConnectionGetClassID();
  unsigned int v29 = CMDerivedObjectCreate();
  if (v29)
  {
    APSLogErrorAt();
    goto LABEL_60;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t Int64 = CFDictionaryGetInt64();
  *(unsigned char *)(DerivedStorage + 224) = Int64 != 0;
  if (v29)
  {
    *(unsigned char *)(DerivedStorage + 224) = 0;
    unsigned int v29 = 0;
  }
  else if (Int64)
  {
    *(void *)(DerivedStorage + 240) = 0;
    *(_DWORD *)(DerivedStorage + 248) = -1;
  }
  *(unsigned char *)(DerivedStorage + 256) = CFDictionaryGetInt64() != 0;
  if (v29)
  {
    *(unsigned char *)(DerivedStorage + 256) = 0;
    unsigned int v29 = 0;
  }
  CFDictionaryGetTypeID();
  if (!CFDictionaryGetTypedValue()
    || (*(unsigned char *)(DerivedStorage + 56) = CFDictionaryGetInt64() != 0,
        uint64_t v12 = CFDictionaryGetInt64(),
        *(unsigned char *)(DerivedStorage + 57) = v12 != 0,
        !v12))
  {
LABEL_13:
    if (IsAppleInternalBuild()
      && APSSettingsGetBooleanIfPresent()
      && gLogCategory_APTransportConnectionHTTP <= 50
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    double v15 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (*(unsigned char *)(DerivedStorage + 256) && CFDictionaryGetInt64())
    {
      CFStringRef v16 = CFStringCreateWithFormat(*v15, 0, @"%@.%@(%p)", @"com.apple.APTransportConnectionHTTP", a2, cf);
      uint64_t v17 = APSPowerAssertionCreate();
      *(void *)(DerivedStorage + 232) = v17;
      if (!v17) {
        goto LABEL_70;
      }
    }
    else
    {
      CFStringRef v16 = 0;
    }
    *(_DWORD *)(DerivedStorage + 200) = CFDictionaryGetInt64();
    if (v29)
    {
      *(_DWORD *)(DerivedStorage + 200) = 0;
      unsigned int v29 = 0;
    }
    CFUUIDGetTypeID();
    TypedCFDictionaryRef Value = (const void *)CFDictionaryGetTypedValue();
    *(void *)(DerivedStorage + 208) = TypedValue;
    if (TypedValue) {
      CFRetain(TypedValue);
    }
    CMTimeMakeWithSeconds(&time, 30.0, 1000);
    *(CMTime *)(DerivedStorage + 440) = time;
    if (FigCFDictionaryGetCMTimeIfPresent()
      && gLogCategory_APTransportConnectionHTTP <= 40
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      CMTime time = *(CMTime *)(DerivedStorage + 440);
      CMTimeGetSeconds(&time);
      LogPrintF();
    }
    *(void *)(DerivedStorage + 24) = a2;
    if (a2) {
      CFRetain(a2);
    }
    *(_DWORD *)(DerivedStorage + 48) = a3;
    SNPrintF();
    if (a4) {
      uint64_t v19 = FigDispatchQueueCreateWithPriority();
    }
    else {
      uint64_t v19 = (uint64_t)dispatch_queue_create((const char *)&time, 0);
    }
    *(void *)(DerivedStorage + 8) = v19;
    if (!v19
      || ((SNPrintF(), !a4)
        ? (uint64_t v20 = (uint64_t)dispatch_queue_create((const char *)&time, 0))
        : (uint64_t v20 = FigDispatchQueueCreateWithPriority()),
          (*(void *)(DerivedStorage + 16) = v20) == 0
       || (SNPrintF(),
           dispatch_queue_t v21 = dispatch_queue_create((const char *)&time, 0),
           (*(void *)(DerivedStorage + 80) = v21) == 0)))
    {
      APSLogErrorAt();
      unsigned int v29 = -72323;
      APSSignalErrorAt();
      goto LABEL_58;
    }
    SNPrintF();
    dispatch_queue_t v22 = dispatch_queue_create((const char *)&time, 0);
    *(void *)(DerivedStorage + 40) = v22;
    if (!v22
      || *(unsigned char *)(DerivedStorage + 256)
      && (uint64_t v23 = FigSimpleMutexCreate(), (*(void *)(DerivedStorage + 272) = v23) == 0)
      || (uint64_t v24 = FigCFWeakReferenceHolderCreateWithReferencedObject(), (*(void *)(DerivedStorage + 216) = v24) == 0))
    {
      APSLogErrorAt();
      unsigned int v29 = APSSignalErrorAt();
LABEL_58:
      if (v16) {
        CFRelease(v16);
      }
      goto LABEL_60;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*v15, 0, 0, MEMORY[0x1E4F1D540]);
    *(void *)(DerivedStorage + 96) = Mutable;
    if (Mutable)
    {
      *(_DWORD *)(DerivedStorage + 108) = 0;
      CMTimeMake(&v27, 2000, 1000);
      *(CMTime *)(DerivedStorage + 400) = v27;
      if (gLogCategory_APTransportConnectionHTTP <= 50
        && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      APTTrafficMetricsCreate(&gLogCategory_APTransportConnectionHTTP, (int *)cf, (uint64_t *)(DerivedStorage + 496), 3);
      *a6 = cf;
      CFTypeRef cf = 0;
      goto LABEL_58;
    }
LABEL_70:
    APSLogErrorAt();
    unsigned int v29 = -72323;
    goto LABEL_58;
  }
  CFStringGetTypeID();
  CFTypeRef v13 = (const void *)CFDictionaryGetTypedValue();
  if (v13)
  {
    CFTypeRef v14 = CFRetain(v13);
    *(void *)(DerivedStorage + 64) = v14;
    if (v14) {
      goto LABEL_13;
    }
  }
  else
  {
    *(void *)(DerivedStorage + 64) = 0;
  }
  APSLogErrorAt();
  unsigned int v29 = -72322;
  if (gLogCategory_APTransportConnectionHTTP <= 90
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_60:
  if (cf) {
    CFRelease(cf);
  }
  return v29;
}

uint64_t httpconnection_Invalidate(uint64_t a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  context[0] = a1;
  context[1] = 1;
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    if (gLogCategory_APTransportConnectionHTTP <= 30
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    dispatch_sync_f(v3[1], context, (dispatch_function_t)httpconnection_deferInvalidate);
  }
  return 0;
}

void httpconnection_Finalize(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportConnectionHTTP <= 50
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  httpconnection_invalidateInternal(a1, 0);
  uint64_t v3 = *(NSObject **)(DerivedStorage + 8);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v4 = *(NSObject **)(DerivedStorage + 16);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v5 = *(NSObject **)(DerivedStorage + 40);
  if (v5)
  {
    dispatch_release(v5);
    *(void *)(DerivedStorage + 40) = 0;
  }
  CFArrayRef v6 = *(const void **)(DerivedStorage + 232);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 232) = 0;
  }
  double v7 = *(const void **)(DerivedStorage + 24);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 208);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 208) = 0;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 96);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 96) = 0;
  }
  uint64_t v10 = *(NSObject **)(DerivedStorage + 80);
  if (v10)
  {
    dispatch_release(v10);
    *(void *)(DerivedStorage + 80) = 0;
  }
  CFTypeRef v11 = *(const void **)(DerivedStorage + 216);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 216) = 0;
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 496);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 496) = 0;
  }
  CFTypeRef v13 = *(const void **)(DerivedStorage + 64);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 64) = 0;
  }
  CFTypeRef v14 = *(const void **)(DerivedStorage + 72);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(DerivedStorage + 72) = 0;
  }
  if (*(unsigned char *)(DerivedStorage + 256))
  {
    if (*(void *)(DerivedStorage + 272))
    {
      FigSimpleMutexDestroy();
      *(void *)(DerivedStorage + 272) = 0;
    }
  }
}

__CFString *httpconnection_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTransportConnectionHTTP %p '%@'>", a1, *(void *)(DerivedStorage + 24));
  return Mutable;
}

uint64_t httpconnection_CopyProperty()
{
  CMBaseObjectGetDerivedStorage();
  return FigDispatchSyncCopyPropertyImplementation();
}

uint64_t httpconnection_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2000000000;
  int v10 = 0;
  CFArrayRef v6 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  void v8[2] = __httpconnection_SetProperty_block_invoke;
  v8[3] = &unk_1E688B030;
  v8[4] = v9;
  void v8[5] = a1;
  v8[6] = a2;
  v8[7] = a3;
  dispatch_sync(v6, v8);
  _Block_object_dispose(v9, 8);
  return 0;
}

void httpconnection_deferInvalidate(uint64_t a1)
{
}

void httpconnection_invalidateInternal(void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportConnectionHTTP <= 50
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(unsigned char *)uint64_t DerivedStorage = 1;
  *(_DWORD *)(DerivedStorage + 108) = 0;
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = v5;
  double v7 = (uint64_t *)(v5 + 240);
  if (*(unsigned char *)(v5 + 224))
  {
    int v8 = *(_DWORD *)(v5 + 248);
    if ((v8 & 0x80000000) == 0)
    {
      if (close(v8) && *__error()) {
        __error();
      }
      *(_DWORD *)(v6 + 248) = -1;
    }
    if (*v7)
    {
      APTConnectionListenerInvalidate(*v7);
      uint64_t v9 = (const void *)*v7;
      if (*v7)
      {
LABEL_13:
        CFRelease(v9);
        *double v7 = 0;
      }
    }
  }
  else
  {
    if (*v7)
    {
      AsyncConnection_Release();
      *double v7 = 0;
    }
    double v7 = (uint64_t *)(v6 + 248);
    uint64_t v9 = *(const void **)(v6 + 248);
    if (v9) {
      goto LABEL_13;
    }
  }
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (!*(void *)(v10 + 72)) {
    goto LABEL_32;
  }
  uint64_t v11 = v10;
  APTransportGetSharedTransport();
  uint64_t CMBaseObject = FigTransportGetCMBaseObject();
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  double v15 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v14 + 48);
  if (!v15)
  {
    int v17 = -12782;
LABEL_28:
    APSLogErrorAt();
    goto LABEL_33;
  }
  int v16 = v15(CMBaseObject, @"TrafficRegistrar", *MEMORY[0x1E4F1CF80], &cf);
  if (v16)
  {
    int v17 = v16;
    goto LABEL_28;
  }
  if (gLogCategory_APTransportConnectionHTTP <= 50
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v18 = *(const void **)(v11 + 72);
  if (v18)
  {
    CFRelease(v18);
    int v17 = 0;
    *(void *)(v11 + 72) = 0;
    goto LABEL_33;
  }
LABEL_32:
  int v17 = 0;
LABEL_33:
  if (cf) {
    CFRelease(cf);
  }
  if (v17
    && gLogCategory_APTransportConnectionHTTP <= 90
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v19 = *(void *)(v6 + 264);
  if (*(unsigned char *)(v6 + 256))
  {
    if (v19)
    {
      HTTPConnectionStopAsync();
      uint64_t v20 = *(const void **)(v6 + 264);
      if (v20)
      {
        CFRelease(v20);
        *(void *)(v6 + 264) = 0;
      }
    }
    pthread_mutex_lock(*(pthread_mutex_t **)(v6 + 272));
    dispatch_queue_t v21 = *(NSObject **)(v6 + 280);
    if (v21)
    {
      dispatch_release(v21);
      *(void *)(v6 + 280) = 0;
    }
    dispatch_queue_t v22 = *(const void **)(v6 + 288);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(v6 + 288) = 0;
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 272));
  }
  else
  {
    if (v19)
    {
      HTTPClientInvalidate();
      CFRelease(*(CFTypeRef *)(v6 + 264));
      *(void *)(v6 + 264) = 0;
    }
    uint64_t v23 = *(const void **)(v6 + 280);
    if (v23)
    {
      CFRelease(v23);
      *(void *)(v6 + 280) = 0;
    }
  }
  if (a2) {
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 80), a1, (dispatch_function_t)httpconnection_clearCallbackState);
  }
  else {
    httpconnection_clearCallbackState(a1);
  }
  uint64_t v24 = *(const void **)(DerivedStorage + 128);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(DerivedStorage + 128) = 0;
  }
  uint64_t v25 = *(const void **)(DerivedStorage + 352);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(DerivedStorage + 352) = 0;
  }
  uint64_t v26 = *(const void **)(DerivedStorage + 360);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(DerivedStorage + 360) = 0;
  }
  CMTime v27 = *(void **)(DerivedStorage + 32);
  if (v27)
  {
    free(v27);
    *(void *)(DerivedStorage + 32) = 0;
  }
  CFAllocatorRef v28 = *(const void **)(DerivedStorage + 112);
  if (v28)
  {
    CFRelease(v28);
    *(void *)(DerivedStorage + 112) = 0;
  }
  unsigned int v29 = *(const void **)(DerivedStorage + 120);
  if (v29)
  {
    CFRelease(v29);
    *(void *)(DerivedStorage + 120) = 0;
  }
  uint64_t v30 = *(NSObject **)(DerivedStorage + 424);
  if (v30)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 424));
    dispatch_release(v30);
    *(void *)(DerivedStorage + 424) = 0;
  }
}

void httpconnection_clearCallbackState(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v3 = *(const __CFDictionary **)(DerivedStorage + 96);
  if (v3)
  {
    CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)httpconnection_releaseCallbackQueues, a1);
    uint64_t v4 = *(__CFDictionary **)(DerivedStorage + 96);
    CFDictionaryRemoveAllValues(v4);
  }
}

void httpconnection_releaseCallbackQueues(int a1, CFArrayRef theArray)
{
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, 2);
  dispatch_release(ValueAtIndex);
}

uint64_t httpconnection_copyPropertyInternal(uint64_t a1, const void *a2, const __CFAllocator *a3, uint64_t *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"LocalInterfaceName"))
  {
    if (*(_DWORD *)(DerivedStorage + 108) != 5)
    {
      APSLogErrorAt();
      APSSignalErrorAt();
      return 0;
    }
    uint64_t Int64 = (uint64_t)CFStringCreateWithCString(a3, (const char *)(DerivedStorage + 310), 0x8000100u);
    if (!Int64)
    {
      uint64_t v9 = 4294894973;
LABEL_45:
      APSLogErrorAt();
      return v9;
    }
    goto LABEL_16;
  }
  if (CFEqual(a2, @"LocalMACAddress"))
  {
    uint64_t Int64 = (uint64_t)CFDataCreate(a3, (const UInt8 *)(DerivedStorage + 304), 6);
    if (!Int64)
    {
      uint64_t v9 = 4294894973;
      goto LABEL_45;
    }
    goto LABEL_16;
  }
  if (CFEqual(a2, @"LocalNetworkIPAddress"))
  {
    uint64_t Int64 = (uint64_t)CFDataCreate(a3, (const UInt8 *)(DerivedStorage + 136), 28);
    if (!Int64)
    {
      uint64_t v9 = 4294894973;
      goto LABEL_45;
    }
    goto LABEL_16;
  }
  if (!CFEqual(a2, @"LocalNetworkPort"))
  {
    if (CFEqual(a2, @"RemoteNetworkIPAddress"))
    {
      uint64_t v14 = 0;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)(DerivedStorage + 164);
      *(_OWORD *)&v13[12] = *(_OWORD *)(DerivedStorage + 176);
      uint64_t v9 = APSNetworkAddressCreateWithSocketAddr();
      if (v9) {
        goto LABEL_45;
      }
      APSNetworkAddressSetPort();
      *a4 = v14;
      return v9;
    }
    if (CFEqual(a2, @"BoundInterfaceIndex"))
    {
      uint64_t Int64 = CFNumberCreateInt64();
      if (!Int64)
      {
        uint64_t v9 = 4294894973;
        goto LABEL_45;
      }
    }
    else if (CFEqual(a2, @"RemoteNetworkPort"))
    {
      uint64_t Int64 = CFNumberCreateInt64();
      if (!Int64)
      {
        uint64_t v9 = 4294894973;
        goto LABEL_45;
      }
    }
    else if (CFEqual(a2, @"NetTransportType"))
    {
      uint64_t v9 = 4294894973;
      if (*(_DWORD *)(DerivedStorage + 108) != 5) {
        return 4294894976;
      }
      uint64_t Int64 = (uint64_t)CFNumberCreate(a3, kCFNumberIntType, (const void *)(DerivedStorage + 436));
      if (!Int64) {
        goto LABEL_45;
      }
    }
    else if (CFEqual(a2, @"AllMsgsRoundTripTotalTimeMs"))
    {
      uint64_t Int64 = FigCFNumberCreateUInt64();
      if (!Int64)
      {
        uint64_t v9 = 4294894973;
        goto LABEL_45;
      }
    }
    else
    {
      if (!CFEqual(a2, @"AllMsgsRecProcessingTotalTimeMs")) {
        return 4294954512;
      }
      uint64_t Int64 = FigCFNumberCreateUInt64();
      if (!Int64)
      {
        uint64_t v9 = 4294894973;
        goto LABEL_45;
      }
    }
LABEL_16:
    uint64_t v9 = 0;
    *a4 = Int64;
    return v9;
  }
  if (!*(unsigned char *)(DerivedStorage + 224))
  {
    APSLogErrorAt();
    return 4294894975;
  }
  uint64_t v10 = *(void *)(DerivedStorage + 240);
  if (v10)
  {
    *(_DWORD *)uint64_t v13 = -1;
    uint64_t ListeningPort = APTConnectionListenerGetListeningPort(v10, v13);
    if (ListeningPort)
    {
      uint64_t v9 = ListeningPort;
      goto LABEL_45;
    }
    uint64_t Int64 = (uint64_t)CFNumberCreate(a3, kCFNumberIntType, v13);
    if (!Int64)
    {
      uint64_t v9 = 4294894973;
      goto LABEL_45;
    }
    goto LABEL_16;
  }
  APSLogErrorAt();
  return APSSignalErrorAt();
}

uint64_t httpconnection_DumpHierarchy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 108) != 5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, const char *))(a5 + 16))(a5, a3, "Connection:[%{ptr}] (HTTP) %''@ (Not Connected) Parent:[%{ptr}]\n");
  }
  HTTPClientGetClientID();
  return (*(uint64_t (**)(uint64_t, uint64_t, const char *))(a5 + 16))(a5, a3, "Connection:[%{ptr}] (HTTP) %''@ Ports:%##a -> %##a CID:0x%08X Parent:[%{ptr}]\n");
}

uint64_t httpconnection_Resume(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)httpconnection_resumeInternal);
  return 0;
}

uint64_t httpconnection_AddEventCallback(const void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  if (a2 && a3 && a4)
  {
    if (a1) {
      CFRetain(a1);
    }
    dispatch_retain(a4);
    APSDispatchAsyncFHelper();
  }
  else
  {
    APSLogErrorAt();
  }
  return 0;
}

uint64_t httpconnection_RemoveEventCallback(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6[0] = a1;
  v6[1] = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 80), v6, (dispatch_function_t)httpconnection_removeEventCallbackInternal);
  return 0;
}

uint64_t httpconnection_AcquirePackage(const void *a1, void *a2)
{
  CFAllocatorRef v3 = CFGetAllocator(a1);
  uint64_t v4 = APTransportPackageHTTPCreate((uint64_t)v3, a2);
  if (v4)
  {
    APSLogErrorAt();
  }
  else if (gLogCategory_APTransportConnectionHTTP <= 30 {
         && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  }
  {
    LogPrintF();
  }
  return v4;
}

uint64_t httpconnection_RelinquishPackage(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

uint64_t httpconnection_SendPackage(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  double v7 = *(unsigned int (**)(const void *))(v6 + 96);
  if (v7 && v7(a2) == 1919970425)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(const void *))(v9 + 168);
    if (v11) {
      int v12 = v11(a2);
    }
    else {
      int v12 = 0;
    }
    pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 272));
    uint64_t v13 = *(NSObject **)(DerivedStorage + 280);
    if (v13 && *(_DWORD *)(DerivedStorage + 296) == v12)
    {
      if (a2)
      {
        CFTypeRef v14 = CFRetain(a2);
        uint64_t v13 = *(NSObject **)(DerivedStorage + 280);
      }
      else
      {
        CFTypeRef v14 = 0;
      }
      *(void *)(DerivedStorage + 288) = v14;
      dispatch_semaphore_signal(v13);
    }
    else if (gLogCategory_APTransportConnectionHTTP <= 50 {
           && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    }
    {
      LogPrintF();
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 272));
  }
  else
  {
    CFRetain(a1);
    CFRetain(a2);
    APSDispatchAsyncFHelper();
  }
  return 0;
}

uint64_t httpconnection_ConfigureEncryption(const void *a1, const void *a2, const void *a3)
{
  CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    uint64_t v6 = 4294894974;
LABEL_7:
    APSLogErrorAt();
    return v6;
  }
  if (!a3)
  {
    uint64_t v6 = 4294894974;
    goto LABEL_7;
  }
  CFRetain(a1);
  CFRetain(a2);
  CFRetain(a3);
  APSDispatchAsyncFHelper();
  return 0;
}

void httpconnection_resumeInternal(const void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportConnectionHTTP <= 30
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(unsigned char *)(DerivedStorage + 104))
  {
    if (gLogCategory_APTransportConnectionHTTP <= 30
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_44;
  }
  *(unsigned char *)(DerivedStorage + 104) = 1;
  *(_DWORD *)(DerivedStorage + 108) = 0;
  if (!*(unsigned char *)(DerivedStorage + 224))
  {
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    uint64_t v9 = v8;
    char v27 = 0;
    cStr[0] = 0;
    if (*(unsigned char *)(v8 + 165) && *(_DWORD *)(v8 + 192))
    {
      SockAddrSetPort();
      int v10 = SockAddrToString();
      if (!v10)
      {
        if (gLogCategory_APTransportConnectionHTTP <= 40
          && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
        {
LABEL_35:
          LogPrintF();
        }
LABEL_58:
        APSLogErrorAt();
        int v23 = APSSignalErrorAt();
        int v7 = v23;
        if (!v23) {
          goto LABEL_44;
        }
        goto LABEL_65;
      }
      int v7 = v10;
    }
    else
    {
      if (!*(void *)(v8 + 248))
      {
        if (gLogCategory_APTransportConnectionHTTP <= 90
          && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
        {
          goto LABEL_35;
        }
        goto LABEL_58;
      }
      unsigned __int8 v26 = 0;
      unsigned int v16 = *(_DWORD *)(v8 + 48);
      if ((v16 & 3) != 0) {
        int v17 = 1;
      }
      else {
        int v17 = (v16 >> 2) & 2;
      }
      if (CFPrefs_GetInt64()) {
        uint64_t v18 = &v27;
      }
      else {
        uint64_t v18 = 0;
      }
      int Address = APTransportDeviceGetAddress(*(void *)(v9 + 248), v17, 0, cStr, 256, (char *)&v26, (uint64_t)v18);
      if (!Address)
      {
        if (gLogCategory_APTransportConnectionHTTP <= 40
          && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFStringRef v20 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x8000100u);
        if (v20)
        {
          CFStringRef v21 = v20;
          uint64_t v22 = *(void *)(v9 + 248);
          v24[0] = MEMORY[0x1E4F143A8];
          v24[1] = 0x40000000;
          void v24[2] = __httpconnection_startConnecting_block_invoke;
          v24[3] = &__block_descriptor_tmp_72;
          v24[4] = v9;
          char v25 = v27;
          APTransportDeviceResolveAddress(v22, (uint64_t)v21, v26, (uint64_t)a1, (uint64_t)v24);
          CFRelease(v21);
          goto LABEL_44;
        }
        APSLogErrorAt();
        int v7 = -6728;
        goto LABEL_65;
      }
      int v7 = Address;
    }
    APSLogErrorAt();
    goto LABEL_65;
  }
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  int v4 = *(_DWORD *)(v3 + 248);
  if (v4 != -1)
  {
    uint64_t v5 = v3;
    int v6 = httpconnection_handleConnectionEstablished((uint64_t)a1, v4);
    *(_DWORD *)(v5 + 248) = -1;
    if (!v6) {
      goto LABEL_44;
    }
    int v7 = v6;
    goto LABEL_57;
  }
  uint64_t v11 = (uint64_t *)CMBaseObjectGetDerivedStorage();
  *(void *)cStr = 0;
  if (v11[30])
  {
    int v7 = 0;
  }
  else
  {
    int v12 = v11;
    uint64_t v13 = (const void *)v11[27];
    int v14 = APTConnectionListenerCreate(0, -1, (uint64_t)httpconnection_handleListenerConnected, (uint64_t)v13, (uint64_t)httpconnection_handleListenerInvalidated, (uint64_t)v13, v11[1], cStr);
    if (v14)
    {
      int v7 = v14;
    }
    else
    {
      int v15 = APTConnectionListenerResume(*(uint64_t *)cStr);
      if (!v15)
      {
        if (v13) {
          CFRetain(v13);
        }
        v12[30] = *(void *)cStr;
        goto LABEL_44;
      }
      int v7 = v15;
    }
    APSLogErrorAt();
  }
  if (*(void *)cStr) {
    CFRelease(*(CFTypeRef *)cStr);
  }
  if (v7)
  {
LABEL_57:
    APSLogErrorAt();
LABEL_65:
    APSLogErrorAt();
    httpconnection_handleConnectionFailure(a1, v7);
  }
LABEL_44:
  if (a1) {
    CFRelease(a1);
  }
}

void httpconnection_handleConnectionFailure(const void *a1, int a2)
{
  int valuePtr = a2;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = a2 == 0;
  }
  if (!v5)
  {
    *(_DWORD *)(DerivedStorage + 108) = 4;
    CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    httpconnection_callEventCallbacks(a1, 4, v6, 0);
    if (v6) {
      CFRelease(v6);
    }
  }
}

void __httpconnection_startConnecting_block_invoke(uint64_t a1, const void *a2, int a3, int a4, CFTypeRef cf, int a6)
{
  if (a6)
  {
    if (gLogCategory_APTransportConnectionHTTP <= 90
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
LABEL_7:
      LogPrintF();
    }
  }
  else if (gLogCategory_APTransportConnectionHTTP <= 50 {
         && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  }
  {
    goto LABEL_7;
  }
  CFRetain(cf);
  if (a2) {
    CFRetain(a2);
  }
  uint64_t v11 = *(void *)(a1 + 32);
  int v12 = *(NSObject **)(v11 + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __httpconnection_startConnecting_block_invoke_2;
  block[3] = &__block_descriptor_tmp_70;
  block[4] = a2;
  void block[5] = v11;
  void block[6] = cf;
  int v14 = a4;
  int v15 = a3;
  char v16 = *(unsigned char *)(a1 + 40);
  dispatch_async(v12, block);
}

void __httpconnection_startConnecting_block_invoke_2(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 56);
  if (*(void *)(a1 + 32))
  {
    CStringPtrAndBufferToFree = (unsigned char *)FigCFStringGetCStringPtrAndBufferToFree();
    if (!v2) {
      unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 40) + 192);
    }
  }
  else
  {
    CStringPtrAndBufferToFree = 0;
  }
  int v4 = httpconnection_connect(*(void *)(a1 + 48), CStringPtrAndBufferToFree, *(_DWORD *)(a1 + 60), v2, *(unsigned __int8 *)(a1 + 64));
  if (v4)
  {
    int v6 = v4;
    APSLogErrorAt();
    httpconnection_handleConnectionFailure(*(const void **)(a1 + 48), v6);
  }
  free(0);
  BOOL v5 = *(const void **)(a1 + 32);
  if (v5) {
    CFRelease(v5);
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

uint64_t httpconnection_connect(uint64_t a1, unsigned char *a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = DerivedStorage;
  uint64_t v29 = 0;
  memset(v28, 0, sizeof(v28));
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  if (!a3) {
    a3 = *(_DWORD *)(DerivedStorage + 196);
  }
  if (*(unsigned char *)DerivedStorage) {
    return 0;
  }
  if (!a2 || !*a2)
  {
    APSLogErrorAt();
    uint64_t v18 = APSSignalErrorAt();
    if (!v18) {
      return v18;
    }
    goto LABEL_34;
  }
  CMTime time = *(CMTime *)(DerivedStorage + 440);
  double Seconds = CMTimeGetSeconds(&time);
  int v12 = *(_DWORD *)(v10 + 48);
  if (v12 & 4 | a3) {
    int v13 = ((v12 & 0xB) != 0) | 8;
  }
  else {
    int v13 = (v12 & 0xB) != 0;
  }
  if ((v12 & 0x10) != 0)
  {
    if (gLogCategory_APTransportConnectionHTTP <= 30
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v13 |= 0x10u;
  }
  if (a5)
  {
    v13 |= 0x8Cu;
    if (gLogCategory_APTransportConnectionHTTP <= 60
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  if (*(unsigned char *)(v10 + 340)) {
    int v14 = v13 | 0x1000;
  }
  else {
    int v14 = v13;
  }
  int v15 = v14 | 0x400;
  if (gLogCategory_APTransportConnectionHTTP <= 50
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFTypeRef v16 = CFRetain(*(CFTypeRef *)(v10 + 216));
  uint64_t v17 = *(void *)(v10 + 8);
  memset(v28, 0, sizeof(v28));
  *(void *)&long long v26 = 0;
  long long v27 = 0u;
  *((void *)&v26 + 1) = 152;
  *(void *)&long long v21 = a2;
  uint64_t v29 = a3;
  *((void *)&v21 + 1) = __PAIR64__(v15, a4);
  *(void *)&long long v22 = 1000000000 * (unint64_t)Seconds;
  *((void *)&v22 + 1) = -1;
  *(void *)&long long v23 = httpconnection_asyncConnectionProgressed;
  *((void *)&v23 + 1) = v16;
  *(void *)&long long v24 = httpconnection_asyncConnectionConnected;
  *((void *)&v24 + 1) = v16;
  *(void *)&long long v25 = v17;
  *((void *)&v25 + 1) = &gLogCategory_AsyncCnxAirPlayHTTP;
  *(void *)((char *)v28 + 12) = 0x10000007D0;
  uint64_t v18 = AsyncConnection_ConnectEx();
  if (v18)
  {
    APSLogErrorAt();
    if (v16) {
      CFRelease(v16);
    }
LABEL_34:
    if (gLogCategory_APTransportConnectionHTTP <= 90
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*(void *)(v10 + 240))
    {
      AsyncConnection_Release();
      *(void *)(v10 + 240) = 0;
    }
  }
  return v18;
}

void httpconnection_asyncConnectionProgressed(uint64_t a1, const char *a2)
{
  uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v4) {
    return;
  }
  BOOL v5 = (const void *)v4;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  switch((int)a1)
  {
    case 1:
      if (gLogCategory_APTransportConnectionHTTP > 40
        || gLogCategory_APTransportConnectionHTTP == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_29;
      }
      goto LABEL_14;
    case 2:
      if (gLogCategory_APTransportConnectionHTTP <= 40
        && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
      {
LABEL_14:
        LogPrintF();
      }
LABEL_29:
      int v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
      goto LABEL_30;
    case 3:
      uint64_t v7 = DerivedStorage;
      if (gLogCategory_APTransportConnectionHTTP <= 50
        && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      int v9 = *(_DWORD *)(v8 + 48);
      __int16 v29 = 0;
      int v28 = 0;
      CFTypeRef v27 = 0;
      if (!*(unsigned char *)(v8 + 56))
      {
        if (gLogCategory_APTransportConnectionHTTP > 30
          || gLogCategory_APTransportConnectionHTTP == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_71;
        }
        goto LABEL_70;
      }
      uint64_t v10 = (CFTypeRef *)(v8 + 72);
      if (*(void *)(v8 + 72)) {
        goto LABEL_71;
      }
      if (*a2)
      {
        if ((v9 & 3) == 0)
        {
          uint64_t v11 = *MEMORY[0x1E4F1CF80];
          goto LABEL_50;
        }
        if (gLogCategory_APTransportConnectionHTTP <= 30
          && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        PeerMACint Address = GetPeerMACAddress();
        if (!PeerMACAddress)
        {
          if (gLogCategory_APTransportConnectionHTTP <= 50
            && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          uint64_t v30 = 0;
          CFTypeRef cf = 0;
          APTransportGetSharedTransport();
          uint64_t v11 = *MEMORY[0x1E4F1CF80];
          uint64_t CMBaseObject = FigTransportGetCMBaseObject();
          uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v16) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v18 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v17 + 48);
          if (!v18
            || v18(CMBaseObject, @"WifiManagerClient", v11, &cf)
            || APTransportWifiManagerClientGetPeerRSSI((uint64_t)cf, (uint64_t)&v28, (uint64_t)&v30))
          {
            APSLogErrorAt();
          }
          else if (gLogCategory_APTransportConnectionHTTP <= 50 {
                 && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
          }
          {
            LogPrintF();
          }
          if (cf) {
            CFRelease(cf);
          }
LABEL_50:
          APTransportGetSharedTransport();
          uint64_t v19 = FigTransportGetCMBaseObject();
          uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v20) {
            uint64_t v21 = v20;
          }
          else {
            uint64_t v21 = 0;
          }
          long long v22 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v21 + 48);
          if (!v22)
          {
            int v25 = -12782;
            goto LABEL_59;
          }
          int v23 = v22(v19, @"TrafficRegistrar", v11, &v27);
          if (v23)
          {
            int v25 = v23;
            goto LABEL_59;
          }
          if ((v9 & 3) != 0)
          {
            int v24 = APTransportTrafficRegistrarAWDLTrafficRegistrationCreateEx(v27, (uint64_t)&v28, 1, v9 & 2, v10);
            if (v24)
            {
              int v25 = v24;
LABEL_59:
              APSLogErrorAt();
LABEL_60:
              if (gLogCategory_APTransportConnectionHTTP <= 90
                && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              goto LABEL_72;
            }
          }
          else
          {
            int v26 = APTransportTrafficRegistrarInfraTransactionCreate(v27, v10);
            if (v26)
            {
              int v25 = v26;
              goto LABEL_59;
            }
          }
          if (gLogCategory_APTransportConnectionHTTP <= 50
            && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
          {
LABEL_70:
            LogPrintF();
          }
LABEL_71:
          int v25 = 0;
          goto LABEL_72;
        }
        int v25 = PeerMACAddress;
        APSLogErrorAt();
        if (gLogCategory_APTransportConnectionHTTP <= 90)
        {
          if (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()) {
            LogPrintF();
          }
          goto LABEL_60;
        }
      }
      else
      {
        APSLogErrorAt();
        int v25 = APSSignalErrorAt();
        if (v25) {
          goto LABEL_60;
        }
      }
LABEL_72:
      if (v27) {
        CFRelease(v27);
      }
      if (v25)
      {
        if (gLogCategory_APTransportConnectionHTTP <= 90
          && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        *(_DWORD *)(v7 + 488) = v25;
        if (*(void *)(v7 + 240))
        {
          AsyncConnection_Release();
          *(void *)(v7 + 240) = 0;
        }
      }
      else
      {
        int v12 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)a2, 28);
LABEL_30:
        int v13 = v12;
        if (v12)
        {
          httpconnection_callEventCallbacks(v5, a1, v12, 0);
          CFRelease(v13);
        }
      }
LABEL_82:
      CFRelease(v5);
      return;
    case 4:
      if (gLogCategory_APTransportConnectionHTTP <= 50
        && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_82;
    default:
      goto LABEL_82;
  }
}

void httpconnection_asyncConnectionConnected(int a1, int a2, const void *a3)
{
  *(void *)&v14.sa_len = 0;
  *(void *)&v14.sa_data[6] = 0;
  int v16 = 0;
  uint64_t v15 = 0;
  socklen_t v13 = 0;
  int v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v6)
  {
    CFDataRef v10 = 0;
    if (a1 < 0) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = DerivedStorage;
  if (!a2 || (int v9 = *(_DWORD *)(DerivedStorage + 488)) == 0) {
    int v9 = a2;
  }
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_45;
  }
  if (v9)
  {
    APSLogErrorAt();
LABEL_45:
    CFDataRef v10 = 0;
    goto LABEL_13;
  }
  socklen_t v13 = 28;
  if (getpeername(a1, &v14, &v13)) {
    CFDataRef v10 = 0;
  }
  else {
    CFDataRef v10 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &v14.sa_len, 28);
  }
  int v9 = httpconnection_handleConnectionEstablished((uint64_t)v6, a1);
  if (v9)
  {
    APSLogErrorAt();
  }
  else
  {
    *(_DWORD *)(v8 + 108) = 5;
    httpconnection_callEventCallbacks(v6, 5, v10, 0);
  }
  a1 = -1;
LABEL_13:
  if (*(void *)(v8 + 240))
  {
    AsyncConnection_Release();
    *(void *)(v8 + 240) = 0;
  }
  a2 = v9;
  if ((a1 & 0x80000000) == 0)
  {
LABEL_16:
    if (close(a1) && *__error()) {
      __error();
    }
  }
LABEL_19:
  if (a2)
  {
    if (gLogCategory_APTransportConnectionHTTP <= 90
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v6)
    {
      if (a2 == 97) {
        int v11 = -71882;
      }
      else {
        int v11 = a2;
      }
      if (a2 == 13) {
        int v12 = -71880;
      }
      else {
        int v12 = v11;
      }
      httpconnection_handleConnectionFailure(v6, v12);
    }
  }
  else if (gLogCategory_APTransportConnectionHTTP <= 50 {
         && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  }
  {
    LogPrintF();
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v6) {
    CFRelease(v6);
  }
  CFRelease(a3);
}

unsigned char *httpconnection_callEventCallbacks(const void *a1, uint64_t a2, const void *a3, NSObject *a4)
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    if (a3) {
      CFRetain(a3);
    }
    if (a1) {
      CFRetain(a1);
    }
    if (a4) {
      dispatch_retain(a4);
    }
    return (unsigned char *)APSDispatchAsyncFHelper();
  }
  return result;
}

void httpconnection_deferCallEventCallbackForGroupID(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v7 = 0;
  context[0] = a1;
  context[1] = &v7;
  if (*(unsigned char *)(a1 + 32))
  {
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 96), (CFDictionaryApplierFunction)httpconnection_iterateOnEventCallbacks, context);
  }
  else
  {
    CFArrayGetTypeID();
    TypedCFDictionaryRef Value = (const __CFArray *)CFDictionaryGetTypedValue();
    if (TypedValue) {
      httpconnection_iterateOnEventCallbacks((int)TypedValue, TypedValue, (uint64_t)context);
    }
  }
  if (!v7 && *(void *)(a1 + 24))
  {
    if (gLogCategory_APTransportConnectionHTTP <= 50
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 24));
  }
  uint64_t v4 = *(const void **)(a1 + 16);
  if (v4) {
    CFRelease(v4);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  BOOL v5 = *(NSObject **)(a1 + 24);
  if (v5) {
    dispatch_release(v5);
  }
}

uint64_t httpconnection_iterateOnEventCallbacks(int a1, CFArrayRef theArray, uint64_t a3)
{
  CFArrayGetValueAtIndex(theArray, 2);
  CFArrayGetValueAtIndex(theArray, 1);
  CFArrayGetValueAtIndex(theArray, 0);
  uint64_t result = APSDispatchSyncTask();
  if (!result) {
    **(unsigned char **)(a3 + 8) = 1;
  }
  return result;
}

uint64_t httpconnection_callEventCallback(unsigned int *a1)
{
  return (*((uint64_t (**)(void, void, void))a1 + 2))(*a1, *((void *)a1 + 1), *((void *)a1 + 3));
}

uint64_t httpconnection_handleConnectionEstablished(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  *(void *)int v26 = 0;
  if (*DerivedStorage)
  {
    uint64_t v8 = 0;
    goto LABEL_42;
  }
  BOOL v5 = DerivedStorage;
  if (gLogCategory_APTransportConnectionHTTP <= 30
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t InterfaceInfo = SocketGetInterfaceInfo();
  if (InterfaceInfo)
  {
    uint64_t v8 = InterfaceInfo;
LABEL_65:
    APSLogErrorAt();
    goto LABEL_42;
  }
  int v7 = *((_DWORD *)v5 + 12);
  if ((v7 & 1) != 0 || (v7 & 2) != 0)
  {
    uint64_t v8 = 4294894976;
    if (gLogCategory_APTransportConnectionHTTP <= 90
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
LABEL_15:
      LogPrintF();
    }
LABEL_42:
    if ((a2 & 0x80000000) == 0 && close(a2) && *__error()) {
      __error();
    }
    return v8;
  }
  if ((v7 & 8) != 0)
  {
    uint64_t v8 = 4294894976;
    if (gLogCategory_APTransportConnectionHTTP <= 90
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
  *((_DWORD *)v5 + 109) = v26[1];
  SocketSetQoS();
  CFUUIDRef v9 = (const __CFUUID *)*((void *)v5 + 26);
  if (v9)
  {
    CFUUIDBytes v27 = (CFUUIDBytes)0;
    CFUUIDBytes v27 = CFUUIDGetUUIDBytes(v9);
    setsockopt(a2, 0xFFFF, 4360, &v27, 0x10u);
  }
  v26[0] = 28;
  uint64_t v10 = getsockname(a2, (sockaddr *)(v5 + 136), v26);
  if (v10)
  {
    uint64_t v8 = v10;
    goto LABEL_65;
  }
  v26[0] = 28;
  uint64_t v11 = getpeername(a2, (sockaddr *)(v5 + 164), v26);
  if (v11)
  {
    uint64_t v8 = v11;
    goto LABEL_65;
  }
  *((_DWORD *)v5 + 48) = SockAddrGetPort();
  int v12 = v5[165];
  if (v12 == 30)
  {
    v26[0] = 4;
    socklen_t v13 = v5 + 196;
    int v14 = a2;
    int v15 = 41;
    int v16 = 125;
LABEL_24:
    if (!getsockopt(v14, v15, v16, v13, v26)) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v12 == 2)
  {
    v26[0] = 4;
    socklen_t v13 = v5 + 196;
    int v14 = a2;
    int v15 = 0;
    int v16 = 25;
    goto LABEL_24;
  }
LABEL_25:
  *((_DWORD *)v5 + 49) = 0;
LABEL_26:
  if (!v5[256])
  {
    uint64_t v8 = httpConnection_setupHTTPClient(a1, a2);
    if (!v8) {
      return v8;
    }
    goto LABEL_77;
  }
  uint64_t v17 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  CFUUIDBytes v27 = (CFUUIDBytes)0;
  if (*v17)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v18 = v17;
    *(void *)&long long v28 = "RTSP/1.0";
    *((void *)&v30 + 1) = httpconnection_handleEvent;
    *((void *)&v29 + 1) = httpconnection_handleConnectionClosed;
    uint64_t v19 = v17 + 264;
    uint64_t v20 = HTTPConnectionCreate();
    if (!v20)
    {
      CFTypeRef v21 = (CFTypeRef)*((void *)v18 + 27);
      if (v21) {
        CFTypeRef v21 = CFRetain(v21);
      }
      *(void *)(*(void *)v19 + 384) = v21;
      if (*(void *)(*(void *)v19 + 384))
      {
        HTTPConnectionSetDispatchQueue();
        if (!*((void *)v18 + 14) || !*((void *)v18 + 15)) {
          goto LABEL_80;
        }
        if (gLogCategory_APTransportConnectionHTTP <= 30
          && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v8 = httpconnection_configureEncryptionInternal(a1, *((void *)v18 + 14), *((void *)v18 + 15));
        long long v22 = (const void *)*((void *)v18 + 14);
        if (v22)
        {
          CFRelease(v22);
          *((void *)v18 + 14) = 0;
        }
        int v23 = (const void *)*((void *)v18 + 15);
        if (v23)
        {
          CFRelease(v23);
          *((void *)v18 + 15) = 0;
        }
        if (!v8)
        {
LABEL_80:
          if (*((_DWORD *)v18 + 86)) {
            HTTPConnectionSetTimeout();
          }
          uint64_t v24 = HTTPConnectionStart();
          if (!v24)
          {
            if (gLogCategory_APTransportConnectionHTTP <= 50
              && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            return 0;
          }
          uint64_t v8 = v24;
        }
        APSLogErrorAt();
      }
      else
      {
        APSLogErrorAt();
        uint64_t v8 = 4294894973;
      }
LABEL_77:
      APSLogErrorAt();
      return v8;
    }
    uint64_t v8 = v20;
    APSLogErrorAt();
  }
  if ((a2 & 0x80000000) == 0 && close(a2) && *__error()) {
    __error();
  }
  if (v8) {
    goto LABEL_77;
  }
  return v8;
}

uint64_t httpConnection_setupHTTPClient(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = SockAddrToString();
  if (v4)
  {
    uint64_t v6 = v4;
    APSLogErrorAt();
  }
  else
  {
    bswap64(*(_OWORD *)&CFUUIDGetUUIDBytes((CFUUIDRef)*(void *)(DerivedStorage + 128)));
    ASPrintF();
    APSLogErrorAt();
    uint64_t v6 = 4294960596;
  }
  if ((a2 & 0x80000000) == 0 && close(a2) && *__error()) {
    __error();
  }
  return v6;
}

uint64_t httpconnection_handleEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 384);
  dataPointerOut = 0;
  v47[0] = 0;
  if (!v3)
  {
    APSLogErrorAt();
    int v25 = 0;
    long long v22 = 0;
    int v43 = 0;
    uint64_t v8 = 0;
    BOOL v5 = 0;
LABEL_80:
    int v26 = 0;
    Datasize_t Length = 0;
    long long v28 = 0;
    uint64_t v44 = 400;
    goto LABEL_31;
  }
  BOOL v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5)
  {
    int v25 = 0;
    long long v22 = 0;
    int v43 = 0;
    uint64_t v8 = 0;
    goto LABEL_80;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 232))
  {
    APSPowerAssertionRaise();
    int v7 = 1;
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v8 = dispatch_semaphore_create(0);
  if (!v8)
  {
    APSLogErrorAt();
    LODWORD(v9) = 0;
LABEL_83:
    uint64_t v44 = 400;
    goto LABEL_25;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 272));
  uint64_t v9 = (*(_DWORD *)(DerivedStorage + 296) + 1);
  *(_DWORD *)(DerivedStorage + 296) = v9;
  *(void *)(DerivedStorage + 280) = v8;
  dispatch_retain(v8);
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 272));
  if (gLogCategory_APTransportConnectionHTTP <= 50
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (APTransportPackageHTTPCreateWithHTTPMessage(*MEMORY[0x1E4F1CF80], a2, v47))
  {
    APSLogErrorAt();
    goto LABEL_83;
  }
  CFTypeRef v10 = v47[0];
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  socklen_t v13 = *(void (**)(CFTypeRef, uint64_t))(v12 + 88);
  if (v13) {
    v13(v10, 1937337955);
  }
  CFTypeRef v14 = v47[0];
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(void (**)(CFTypeRef, uint64_t))(v16 + 160);
  if (v17) {
    v17(v14, v9);
  }
  uint64_t v18 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __httpconnection_handleEvent_block_invoke;
  block[3] = &__block_descriptor_tmp_105;
  block[4] = v5;
  void block[5] = v47[0];
  void block[6] = v8;
  dispatch_sync(v18, block);
  dispatch_time_t v19 = dispatch_time(0, 5000000000);
  if (dispatch_semaphore_wait(v8, v19))
  {
    APSLogErrorAt();
    uint64_t v20 = 408;
  }
  else
  {
    uint64_t v20 = 400;
  }
  uint64_t v44 = v20;
LABEL_25:
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 272));
  CFTypeRef v21 = *(NSObject **)(DerivedStorage + 280);
  long long v22 = *(const void **)(DerivedStorage + 288);
  *(void *)(DerivedStorage + 288) = 0;
  if (v21)
  {
    dispatch_release(v21);
    *(void *)(DerivedStorage + 280) = 0;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 272));
  int v43 = v7;
  if (!v22)
  {
    int v25 = 0;
    int v26 = 0;
    Datasize_t Length = 0;
    long long v28 = 0;
LABEL_31:
    char v29 = 1;
    goto LABEL_57;
  }
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  long long v30 = *(uint64_t (**)(const void *))(v24 + 112);
  if (v30) {
    int v31 = v30(v22);
  }
  else {
    int v31 = 0;
  }
  uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v32) {
    uint64_t v33 = v32;
  }
  else {
    uint64_t v33 = 0;
  }
  CFTypeRef v34 = *(uint64_t (**)(const void *))(v33 + 8);
  if (v34) {
    int v26 = (OpaqueCMBlockBuffer *)v34(v22);
  }
  else {
    int v26 = 0;
  }
  uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v35) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = 0;
  }
  uint64_t v37 = *(uint64_t (**)(const void *))(v36 + 168);
  if (v37) {
    int v38 = v37(v22);
  }
  else {
    int v38 = 0;
  }
  if (v38 == v9 && (v31 ? (uint64_t v39 = v44) : (uint64_t v39 = 200), v44 = v39, v26))
  {
    Datasize_t Length = CMBlockBufferGetDataLength(v26);
    if (DataLength)
    {
      CMBlockBufferGetDataPointer(v26, 0, 0, 0, &dataPointerOut);
      char v29 = 0;
      long long v28 = "application/x-apple-binary-plist";
      int v25 = dataPointerOut;
      goto LABEL_57;
    }
    int v25 = 0;
    char v29 = 0;
  }
  else
  {
    int v25 = 0;
    char v29 = 0;
    Datasize_t Length = 0;
  }
  long long v28 = 0;
LABEL_57:
  uint64_t v40 = MEMORY[0x1D25E6130](a1, v44, 0, v28, v25, DataLength);
  if (v40) {
    int v41 = 90;
  }
  else {
    int v41 = 50;
  }
  if (v41 >= gLogCategory_APTransportConnectionHTTP
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v43) {
    APSPowerAssertionRelease();
  }
  if (v8) {
    dispatch_release(v8);
  }
  if (v26) {
    CFRelease(v26);
  }
  if ((v29 & 1) == 0) {
    CFRelease(v22);
  }
  if (v47[0]) {
    CFRelease(v47[0]);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v40;
}

void httpconnection_handleConnectionClosed(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 384);
  int valuePtr = -72320;
  if (v2)
  {
    uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v3)
    {
      uint64_t v4 = (const void *)v3;
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!*(unsigned char *)DerivedStorage)
      {
        uint64_t v6 = DerivedStorage;
        if (*(_DWORD *)(DerivedStorage + 108) == 5)
        {
          if (gLogCategory_APTransportConnectionHTTP <= 90
            && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          *(_DWORD *)(v6 + 108) = 6;
          CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
          httpconnection_callEventCallbacks(v4, 6, v7, 0);
          if (v7) {
            CFRelease(v7);
          }
        }
      }
      CFRelease(v4);
    }
  }
  else
  {
    APSLogErrorAt();
  }
  uint64_t v8 = *(const void **)(a1 + 384);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 384) = 0;
  }
}

uint64_t httpconnection_configureEncryptionInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  CFDataRef v13 = 0;
  theCFDataRef Data = 0;
  if (gLogCategory_APTransportConnectionHTTP <= 30
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void, CFDataRef *, void, CFDataRef *))(v7 + 64);
  if (!v8)
  {
    uint64_t v11 = 4294954514;
    goto LABEL_17;
  }
  uint64_t v9 = v8(a2, a3, 0, &theData, 0, &v13);
  if (v9)
  {
    uint64_t v11 = v9;
    goto LABEL_17;
  }
  if (CFDataGetLength(theData) <= 31)
  {
    uint64_t v11 = 4294894974;
    goto LABEL_17;
  }
  if (CFDataGetLength(v13) <= 31)
  {
    uint64_t v11 = 4294894974;
    goto LABEL_17;
  }
  uint64_t v10 = *(void *)(DerivedStorage + 264);
  if (*(unsigned char *)(DerivedStorage + 256))
  {
    if (v10)
    {
      CFDataGetBytePtr(v13);
      CFDataGetBytePtr(theData);
      uint64_t v11 = NetTransportChaCha20Poly1305Configure();
      if (!v11)
      {
        HTTPConnectionSetTransportDelegate();
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    goto LABEL_30;
  }
  if (v10)
  {
    CFDataGetBytePtr(theData);
    CFDataGetBytePtr(v13);
    uint64_t v11 = NetTransportChaCha20Poly1305Configure();
    if (!v11)
    {
      HTTPClientSetTransportDelegate();
      goto LABEL_18;
    }
LABEL_17:
    APSLogErrorAt();
    goto LABEL_18;
  }
LABEL_30:
  APSLogErrorAt();
  uint64_t v11 = 4294894975;
LABEL_18:
  if (theData) {
    CFRelease(theData);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v11;
}

unsigned char *__httpconnection_handleEvent_block_invoke(void *a1)
{
  uint64_t v2 = (const void *)a1[4];
  uint64_t v1 = (const void *)a1[5];
  uint64_t v3 = a1[6];
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(const void *))(v5 + 80);
  if (v6) {
    v6(v1);
  }
  return httpconnection_callEventCallbacks(v2, 7, v1, v3);
}

void httpconnection_httpClientInvalidated(int a1, const void *a2)
{
  int valuePtr = a1;
  if (a2)
  {
    uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v4)
    {
      uint64_t v5 = (const void *)v4;
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!*(unsigned char *)DerivedStorage)
      {
        uint64_t v7 = DerivedStorage;
        if (*(_DWORD *)(DerivedStorage + 108) == 5)
        {
          if (gLogCategory_APTransportConnectionHTTP <= 90
            && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          if (a1 == -6722) {
            int valuePtr = -71881;
          }
          *(_DWORD *)(v7 + 108) = 6;
          APTTrafficMetricsConnectionClosed(*(void *)(v7 + 496));
          CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
          httpconnection_callEventCallbacks(v5, 6, v8, 0);
          if (v8) {
            CFRelease(v8);
          }
        }
      }
      CFRelease(v5);
    }
    CFRelease(a2);
  }
  else
  {
    APSLogErrorAt();
  }
}

void httpconnection_handleListenerConnected(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v4 || (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(), *(unsigned char *)DerivedStorage))
    {
LABEL_8:
      if (gLogCategory_APTransportConnectionHTTP <= 50
        && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
        if (a3 < 0) {
          goto LABEL_17;
        }
      }
      else if (a3 < 0)
      {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    uint64_t v6 = DerivedStorage;
    APTConnectionListenerInvalidate(*(void *)(DerivedStorage + 240));
    uint64_t v7 = *(const void **)(v6 + 240);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(v6 + 240) = 0;
    }
    int v8 = httpconnection_handleConnectionEstablished((uint64_t)v4, a3);
    if (!v8)
    {
      *(_DWORD *)(v6 + 108) = 5;
      httpconnection_callEventCallbacks(v4, 5, 0, 0);
      a3 = -1;
      goto LABEL_8;
    }
    int v9 = v8;
    APSLogErrorAt();
    a3 = -1;
  }
  else
  {
    int v9 = -72322;
    APSLogErrorAt();
    APSSignalErrorAt();
    uint64_t v4 = 0;
  }
  if (gLogCategory_APTransportConnectionHTTP <= 90
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  httpconnection_handleConnectionFailure(v4, v9);
  if ((a3 & 0x80000000) == 0)
  {
LABEL_14:
    if (close(a3) && *__error()) {
      __error();
    }
  }
LABEL_17:
  if (v4)
  {
    CFRelease(v4);
  }
}

void httpconnection_handleListenerInvalidated(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void httpconnection_addEventCallbackInternal(CFTypeRef *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 96), a1[4])
    || (CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0)) == 0)
  {
    APSLogErrorAt();
    APSSignalErrorAt();
  }
  else
  {
    uint64_t v4 = Mutable;
    CFArrayAppendValue(Mutable, a1[1]);
    CFArrayAppendValue(v4, a1[2]);
    CFArrayAppendValue(v4, a1[3]);
    dispatch_retain((dispatch_object_t)a1[3]);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 96), a1[4], v4);
    if (APSDispatchSyncTask()) {
      APSLogErrorAt();
    }
    CFRelease(v4);
  }
  if (*a1) {
    CFRelease(*a1);
  }
  dispatch_release((dispatch_object_t)a1[3]);
}

void httpconnection_removeEventCallbackInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayGetTypeID();
  TypedCFDictionaryRef Value = (const __CFArray *)CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(TypedValue, 2);
    dispatch_release(ValueAtIndex);
    uint64_t v5 = *(__CFDictionary **)(DerivedStorage + 96);
    uint64_t v6 = *(const void **)(a1 + 8);
    CFDictionaryRemoveValue(v5, v6);
  }
}

void httpconnection_sendPackageInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 108) == 5)
  {
    uint64_t v3 = DerivedStorage;
    if (*(void *)(DerivedStorage + 264))
    {
      if (*(void *)(DerivedStorage + 360)) {
        CFObjectSetValue();
      }
      APTransportPackageHTTPSetURL(*(void *)(a1 + 8), *(const void **)(v3 + 280));
      uint64_t v4 = APTransportPackageHTTPGetHTTPMessage(*(void **)(a1 + 8));
      if (v4)
      {
        uint64_t v5 = (void *)v4;
        ++*(_DWORD *)(v3 + 272);
        HTTPHeader_SetField();
        if (*(_DWORD *)(v3 + 336))
        {
          HTTPHeader_SetField();
          HTTPHeader_SetField();
        }
        if (*(void *)(v3 + 32)) {
          HTTPHeader_SetField();
        }
        v5[1209] = CFRetain(*(CFTypeRef *)(v3 + 216));
        uint64_t v6 = *(const void **)(a1 + 8);
        v5[1212] = v6;
        if (v6) {
          CFRetain(v6);
        }
        v5[1214] = httpconnection_httpResponseReceived;
        if (gLogCategory_APTransportConnectionHTTP <= 30)
        {
          if (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize())
          {
            uint64_t v7 = *(void *)(a1 + 8);
            uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v8) {
              uint64_t v9 = v8;
            }
            else {
              uint64_t v9 = 0;
            }
            uint64_t v10 = *(void (**)(uint64_t))(v9 + 80);
            if (v10) {
              v10(v7);
            }
            LogPrintF();
          }
          if (gLogCategory_APTransportConnectionHTTP <= 10
            && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
          {
            LogHTTP();
          }
        }
        APTTrafficMetricsSendStarted(*(void *)(v3 + 496));
        int v11 = HTTPClientSendMessage();
        APTTrafficMetricsSendFinished(*(void *)(v3 + 496));
        *(void *)(v3 + 480) = mach_absolute_time();
        if (!v11)
        {
          uint64_t v12 = CMBaseObjectGetDerivedStorage();
          if (!*(_DWORD *)(v12 + 372))
          {
            HostTimeClock = CMClockGetHostTimeClock();
            CMClockGetTime(&v24, HostTimeClock);
            *(CMTime *)(v12 + 376) = v24;
            uint64_t v14 = CMBaseObjectGetDerivedStorage();
            long long v15 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
            if (!*(void *)(v14 + 424))
            {
              long long v16 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v14 + 8));
              *(void *)(v14 + 424) = v16;
              if (v16)
              {
                dispatch_set_context(v16, v15);
                dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v14 + 424), (dispatch_function_t)httpconnection_checkIfNetworkStalled);
                dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v14 + 424), (dispatch_function_t)httpconnection_stallMonitorCancelledCallback);
                uint64_t v17 = *(NSObject **)(v14 + 424);
                dispatch_time_t v18 = dispatch_time(0, 2000000000);
                dispatch_source_set_timer(v17, v18, 0x77359400uLL, 0x174876E800uLL);
                dispatch_resume(*(dispatch_object_t *)(v14 + 424));
                goto LABEL_31;
              }
              APSLogErrorAt();
            }
            if (v15) {
              CFRelease(v15);
            }
          }
LABEL_31:
          ++*(_DWORD *)(v12 + 372);
          goto LABEL_32;
        }
      }
    }
    APSLogErrorAt();
  }
  CFTypeRef v20 = *(CFTypeRef *)a1;
  dispatch_time_t v19 = *(const void **)(a1 + 8);
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *(void (**)(const void *))(v22 + 80);
  if (v23) {
    v23(v19);
  }
  httpconnection_callEventCallbacks(v20, 8, v19, 0);
LABEL_32:
  CFRelease(*(CFTypeRef *)(a1 + 8));
  CFRelease(*(CFTypeRef *)a1);
}

void httpconnection_httpResponseReceived(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 9672);
  uint64_t v3 = *(const void **)(a1 + 9696);
  CFTypeRef cf = 0;
  mach_absolute_time();
  uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    uint64_t v5 = (const void *)v4;
    uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (!*DerivedStorage)
    {
      uint64_t v7 = DerivedStorage;
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(void (**)(const void *))(v9 + 80);
      if (v10) {
        v10(v3);
      }
      if (!HTTPMessageGetHeaderField()) {
        SNScanF();
      }
      uint64_t v11 = UpTicksToMilliseconds();
      uint64_t v12 = v7[59];
      v7[58] += v11;
      v7[59] = v12;
      if ((*(_DWORD *)(a1 + 8456) - 100) > 0x1F3)
      {
        httpconnection_callEventCallbacks(v5, 8, v3, 0);
      }
      else
      {
        if (gLogCategory_APTransportConnectionHTTP <= 30)
        {
          if (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()) {
            LogPrintF();
          }
          if (gLogCategory_APTransportConnectionHTTP <= 10
            && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
          {
            LogHTTP();
          }
        }
        APTTrafficMetricsResponseReceived(v7[62]);
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        long long v15 = *(unsigned int (**)(const void *))(v14 + 96);
        if (!v15 || v15(v3) != 1937337955) {
          goto LABEL_43;
        }
        if (!APTransportPackageHTTPCreateWithHTTPMessage(*MEMORY[0x1E4F1CF80], a1, &cf))
        {
          CFTypeRef v16 = cf;
          uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v17) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = 0;
          }
          dispatch_time_t v19 = *(void (**)(CFTypeRef, uint64_t))(v18 + 88);
          if (v19) {
            v19(v16, 1919970425);
          }
          CFTypeRef v20 = cf;
          uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v21) {
            uint64_t v22 = v21;
          }
          else {
            uint64_t v22 = 0;
          }
          uint64_t v23 = *(uint64_t (**)(const void *))(v22 + 80);
          if (v23) {
            uint64_t v24 = v23(v3);
          }
          else {
            uint64_t v24 = 0;
          }
          uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v25) {
            uint64_t v26 = v25;
          }
          else {
            uint64_t v26 = 0;
          }
          CFUUIDBytes v27 = *(void (**)(CFTypeRef, uint64_t))(v26 + 72);
          if (v27) {
            v27(v20, v24);
          }
          httpconnection_callEventCallbacks(v5, 7, cf, 0);
LABEL_43:
          uint64_t v28 = CMBaseObjectGetDerivedStorage();
          HostTimeClock = CMClockGetHostTimeClock();
          CMClockGetTime(&v33, HostTimeClock);
          *(CMTime *)(v28 + 376) = v33;
          int v30 = *(_DWORD *)(v28 + 372) - 1;
          *(_DWORD *)(v28 + 372) = v30;
          if (!v30)
          {
            int v31 = *(NSObject **)(v28 + 424);
            if (v31)
            {
              dispatch_source_cancel(*(dispatch_source_t *)(v28 + 424));
              dispatch_release(v31);
              *(void *)(v28 + 424) = 0;
            }
          }
          goto LABEL_46;
        }
        APSLogErrorAt();
      }
    }
LABEL_46:
    CFRelease(v5);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void httpconnection_checkIfNetworkStalled()
{
  memset(&v14, 0, sizeof(v14));
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v14, HostTimeClock);
  CMTime v13 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  uint64_t v1 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v1)
  {
    uint64_t v2 = (const void *)v1;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CMTime lhs = v14;
    CMTime rhs = *(CMTime *)(DerivedStorage + 376);
    CMTimeSubtract(&v13, &lhs, &rhs);
    int v4 = *(_DWORD *)(DerivedStorage + 432);
    if (v4 == 1)
    {
      if (*(_DWORD *)(DerivedStorage + 372))
      {
        CMTime lhs = v13;
        CMTime rhs = *(CMTime *)(DerivedStorage + 400);
        if (CMTimeCompare(&lhs, &rhs) > 0) {
          goto LABEL_29;
        }
      }
      *(_DWORD *)(DerivedStorage + 432) = 0;
      if (gLogCategory_APTransportConnectionHTTP > 50
        || gLogCategory_APTransportConnectionHTTP == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_22;
      }
    }
    else
    {
      if (v4)
      {
        if (gLogCategory_APTransportConnectionHTTP <= 90
          && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_29;
      }
      if (!*(_DWORD *)(DerivedStorage + 372)
        || (lhs = v13, CMTime rhs = *(CMTime *)(DerivedStorage + 400), CMTimeCompare(&lhs, &rhs) < 1))
      {
LABEL_29:
        CFRelease(v2);
        return;
      }
      *(_DWORD *)(DerivedStorage + 432) = 1;
      if (gLogCategory_APTransportConnectionHTTP > 50
        || gLogCategory_APTransportConnectionHTTP == -1 && !_LogCategory_Initialize())
      {
LABEL_22:
        CFAllocatorRef v5 = CFGetAllocator(v2);
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          uint64_t v7 = Mutable;
          StallStateString = APTransportConnectionGetStallStateString(*(_DWORD *)(DerivedStorage + 432));
          CFDictionarySetValue(v7, @"StallState", StallStateString);
          if (*(_DWORD *)(DerivedStorage + 432) == 1)
          {
            CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CMTime lhs = v13;
            CFDictionaryRef v10 = CMTimeCopyAsDictionary(&lhs, v9);
            if (!v10)
            {
              APSLogErrorAt();
              APSSignalErrorAt();
LABEL_28:
              CFRelease(v2);
              CFRelease(v7);
              uint64_t v2 = v10;
              if (!v10) {
                return;
              }
              goto LABEL_29;
            }
            CFDictionarySetValue(v7, @"StallDuration", v10);
          }
          else
          {
            CFDictionaryRef v10 = 0;
          }
          CMNotificationCenterGetDefaultLocalCenter();
          FigDispatchAsyncPostNotification();
          goto LABEL_28;
        }
        APSLogErrorAt();
        APSSignalErrorAt();
        goto LABEL_29;
      }
      CMTime lhs = v13;
      CMTimeGetSeconds(&lhs);
    }
    LogPrintF();
    goto LABEL_22;
  }
}

void httpconnection_stallMonitorCancelledCallback(const void *a1)
{
  httpconnection_checkIfNetworkStalled();
  CFRelease(a1);
}

void httpconnection_deferConfigureEncryption(uint64_t *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 108) == 5)
  {
    httpconnection_configureEncryptionInternal(*a1, a1[1], a1[2]);
  }
  else
  {
    uint64_t v3 = DerivedStorage;
    CFTypeRef v4 = (CFTypeRef)a1[1];
    if (v4) {
      CFTypeRef v4 = CFRetain(v4);
    }
    *(void *)(v3 + 112) = v4;
    CFTypeRef v5 = (CFTypeRef)a1[2];
    if (v5) {
      CFTypeRef v5 = CFRetain(v5);
    }
    *(void *)(v3 + 120) = v5;
  }
  CFRelease((CFTypeRef)*a1);
  CFRelease((CFTypeRef)a1[1]);
  uint64_t v6 = (const void *)a1[2];
  CFRelease(v6);
}

uint64_t APTPackageLowPowerKeepAliveCreate(uint64_t a1, void *a2)
{
  uint64_t v2 = APTPackageLowPowerKeepAliveCreateWithBBuf(a1, 0, a2);
  if (v2) {
    APSLogErrorAt();
  }
  return v2;
}

uint64_t APTPackageLowPowerKeepAliveCreateWithBBuf(uint64_t a1, OpaqueCMBlockBuffer *a2, void *a3)
{
  APTransportPackageGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5)
  {
    uint64_t v9 = v5;
    goto LABEL_19;
  }
  uint64_t DerivedStorage = (_WORD *)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = DerivedStorage;
  if (a2)
  {
    if (CMBlockBufferGetDataLength(a2) != 4)
    {
      uint64_t v9 = 4294894936;
      goto LABEL_19;
    }
    uint64_t v8 = CMBlockBufferCopyDataBytes(a2, 0, 4uLL, v7);
    if (v8)
    {
      uint64_t v9 = v8;
      goto LABEL_19;
    }
    if (v7[1] != 4)
    {
      uint64_t v9 = 4294894936;
      goto LABEL_19;
    }
    if ((*v7 & 0xDF) != 0)
    {
      uint64_t v9 = 4294894936;
LABEL_19:
      APSLogErrorAt();
      return v9;
    }
  }
  else
  {
    *uint64_t DerivedStorage = 1024;
  }
  if (gLogCategory_APTPackageLowPowerKeepAlive <= 30
    && (gLogCategory_APTPackageLowPowerKeepAlive != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v9 = 0;
  *a3 = 0;
  return v9;
}

uint64_t lowPowerKeepAlivePackage_Finalize()
{
  if (gLogCategory_APTPackageLowPowerKeepAlive <= 30)
  {
    if (gLogCategory_APTPackageLowPowerKeepAlive != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

__CFString *lowPowerKeepAlivePackage_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTPackageLowPowerKeepAlive %p>", a1);
  return Mutable;
}

uint64_t lowPowerKeepAlivePackage_SetMessageData(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2
    && (uint64_t v5 = DerivedStorage, v6 = CFGetTypeID(a2), v6 == CMBlockBufferGetTypeID())
    && CMBlockBufferGetDataLength((CMBlockBufferRef)a2) == 2
    && (v7 = (_WORD *)(v5 + 2), uint64_t result = CMBlockBufferCopyDataBytes((CMBlockBufferRef)a2, 0, 2uLL, v7),
                                !result))
  {
    *uint64_t v7 = bswap32((unsigned __int16)*v7) >> 16;
  }
  else
  {
    return APSLogErrorAt();
  }
  return result;
}

uint64_t lowPowerKeepAlivePackage_GetMessageType()
{
  if ((*(unsigned char *)CMBaseObjectGetDerivedStorage() & 0x20) != 0) {
    return 1819308912;
  }
  else {
    return 1819309931;
  }
}

unsigned char *lowPowerKeepAlivePackage_SetMessageType(uint64_t a1, int a2)
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (a2 == 1819308912 || a2 == 1819309931)
  {
    *uint64_t result = 32 * (a2 == 1819308912);
  }
  else
  {
    return (unsigned char *)APSLogErrorAt();
  }
  return result;
}

CMBlockBufferRef lowPowerKeepAlivePackage_CreateBBufRepresentation()
{
  CMBlockBufferRef destinationBuffer = 0;
  uint64_t DerivedStorage = (const void *)CMBaseObjectGetDerivedStorage();
  if (CMBlockBufferCreateWithMemoryBlock(0, 0, 4uLL, 0, 0, 0, 4uLL, 1u, &destinationBuffer)
    || CMBlockBufferReplaceDataBytes(DerivedStorage, destinationBuffer, 0, 4uLL))
  {
    APSLogErrorAt();
  }
  return destinationBuffer;
}

uint64_t APTransportConnectionTCPCreate(uint64_t a1, const void *a2, int a3, int a4, uint64_t a5, void *a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a6)
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  APTransportConnectionGetClassID();
  unsigned int v17 = CMDerivedObjectCreate();
  if (v17)
  {
    APSLogErrorAt();
    return v17;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 56) = CFDictionaryGetInt64() != 0;
  if (a2) {
    CFTypeRef v11 = CFRetain(a2);
  }
  else {
    CFTypeRef v11 = 0;
  }
  *(void *)(DerivedStorage + 16) = v11;
  *(_DWORD *)(DerivedStorage + 60) = a3;
  *(_DWORD *)(DerivedStorage + 128) = CFDictionaryGetInt64();
  CFUUIDGetTypeID();
  TypedCFDictionaryRef Value = (const void *)CFDictionaryGetTypedValue();
  *(void *)(DerivedStorage + 136) = TypedValue;
  if (TypedValue) {
    CFRetain(TypedValue);
  }
  SNPrintF();
  if (a4) {
    uint64_t v13 = FigDispatchQueueCreateWithPriority();
  }
  else {
    uint64_t v13 = (uint64_t)dispatch_queue_create(label, 0);
  }
  *(void *)(DerivedStorage + 8) = v13;
  if (!v13 || (SNPrintF(), dispatch_queue_t v14 = dispatch_queue_create(label, 0), (*(void *)(DerivedStorage + 24) = v14) == 0))
  {
    APSLogErrorAt();
    unsigned int v17 = -72323;
    APSSignalErrorAt();
    return v17;
  }
  uint64_t v15 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(void *)(DerivedStorage + 144) = v15;
  if (!v15)
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  if (gLogCategory_APTransportConnectionTCP <= 50
    && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APTTrafficMetricsCreate(&gLogCategory_APTransportConnectionTCP, 0, (uint64_t *)(DerivedStorage + 240), 0);
  *a6 = 0;
  return v17;
}

uint64_t tcpconnection_Invalidate(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4[0] = a1;
  v4[1] = 1;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 8), v4, (dispatch_function_t)tcpconnection_invalidateInternal);
  return 0;
}

void tcpconnection_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  v12[0] = a1;
  v12[1] = 0;
  tcpconnection_invalidateInternal((uint64_t)v12);
  uint64_t v3 = (const void *)DerivedStorage[30];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[30] = 0;
  }
  CFTypeRef v4 = (const void *)DerivedStorage[2];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[2] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[17];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[17] = 0;
  }
  CFTypeID v6 = DerivedStorage[3];
  if (v6)
  {
    dispatch_release(v6);
    DerivedStorage[3] = 0;
  }
  uint64_t v7 = DerivedStorage[6];
  if (v7)
  {
    dispatch_release(v7);
    DerivedStorage[6] = 0;
  }
  uint64_t v8 = DerivedStorage[1];
  if (v8)
  {
    dispatch_release(v8);
    DerivedStorage[1] = 0;
  }
  uint64_t v9 = (const void *)DerivedStorage[18];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[18] = 0;
  }
  CFDictionaryRef v10 = (const void *)DerivedStorage[23];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[23] = 0;
  }
  CFTypeRef v11 = (const void *)DerivedStorage[24];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[24] = 0;
  }
  if (gLogCategory_APTransportConnectionTCP <= 50
    && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

__CFString *tcpconnection_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTransportConnectionTCP %p '%@'>", a1, *(void *)(DerivedStorage + 16));
  return Mutable;
}

uint64_t tcpconnection_CopyProperty()
{
  CMBaseObjectGetDerivedStorage();
  return FigDispatchSyncCopyPropertyImplementation();
}

uint64_t tcpconnection_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  CFTypeRef v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  CFTypeID v6 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = __tcpconnection_SetProperty_block_invoke;
  void v9[3] = &unk_1E688B0B8;
  v9[4] = &v10;
  void v9[5] = a1;
  v9[6] = a2;
  void v9[7] = a3;
  dispatch_sync(v6, v9);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void tcpconnection_invalidateInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    APTTrafficMetricsConnectionClosed(*(void *)(DerivedStorage + 240));
    if (gLogCategory_APTransportConnectionTCP <= 30
      && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(unsigned char *)uint64_t v3 = 1;
    tcpconnection_cleanUp();
    if (*(unsigned char *)(a1 + 8))
    {
      CFTypeRef v4 = *(NSObject **)(v3 + 24);
      uint64_t v5 = *(void **)a1;
      dispatch_sync_f(v4, v5, (dispatch_function_t)tcpconnection_clearCallbackState);
    }
    else
    {
      tcpconnection_clearCallbackState();
    }
  }
}

void tcpconnection_cleanUp()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 56))
  {
    uint64_t v2 = *(void *)(DerivedStorage + 168);
    if (v2)
    {
      APTConnectionListenerInvalidate(v2);
      uint64_t v3 = *(const void **)(v1 + 168);
      if (v3)
      {
        CFRelease(v3);
        *(void *)(v1 + 168) = 0;
      }
    }
  }
  CFTypeRef v4 = *(NSObject **)(v1 + 160);
  if (v4)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(v1 + 160));
    dispatch_release(v4);
    *(void *)(v1 + 160) = 0;
  }
  *(_DWORD *)(v1 + 176) = 6;
  *(void *)(v1 + 152) = 0;
}

void tcpconnection_clearCallbackState()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[4] = 0;
  DerivedStorage[5] = 0;
  uint64_t v1 = DerivedStorage[6];
  if (v1)
  {
    dispatch_release(v1);
    DerivedStorage[6] = 0;
  }
}

uint64_t tcpconnection_copyPropertyInternal(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    APSLogErrorAt();
    uint64_t v10 = 4294954511;
    APSSignalErrorAt();
    return v10;
  }
  uint64_t v8 = DerivedStorage;
  if (CFEqual(a2, @"LocalInterfaceName"))
  {
    if (*((_DWORD *)v8 + 44) == 5)
    {
      SocketGetInterfaceInfo();
      uint64_t v9 = (void *)CFStringCreateWithCString(a3, cStr, 0x8000100u);
      if (!v9)
      {
        uint64_t v10 = 4294894973;
LABEL_33:
        APSLogErrorAt();
        return v10;
      }
      goto LABEL_15;
    }
LABEL_26:
    APSLogErrorAt();
    APSSignalErrorAt();
    return 0;
  }
  if (CFEqual(a2, @"LocalNetworkIPAddress"))
  {
    if (*((_DWORD *)v8 + 44) == 5)
    {
      uint64_t v9 = CFDataCreate(a3, v8 + 64, 28);
      if (!v9)
      {
        uint64_t v10 = 4294894973;
        goto LABEL_33;
      }
      goto LABEL_15;
    }
    goto LABEL_26;
  }
  if (CFEqual(a2, @"LocalNetworkPort"))
  {
    uint64_t v11 = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)(v11 + 56))
    {
      APSLogErrorAt();
      uint64_t v10 = 4294894975;
      goto LABEL_33;
    }
    uint64_t v12 = *(void *)(v11 + 168);
    if (v12)
    {
      *(_DWORD *)cStr = -1;
      uint64_t ListeningPort = APTConnectionListenerGetListeningPort(v12, cStr);
      if (ListeningPort)
      {
        uint64_t v10 = ListeningPort;
      }
      else
      {
        uint64_t v9 = CFNumberCreate(a3, kCFNumberIntType, cStr);
        if (v9)
        {
LABEL_15:
          uint64_t v10 = 0;
          *a4 = v9;
          return v10;
        }
        uint64_t v10 = 4294894973;
      }
      APSLogErrorAt();
      goto LABEL_33;
    }
    APSLogErrorAt();
    uint64_t v15 = APSSignalErrorAt();
    uint64_t v10 = 0;
    if (v15)
    {
      uint64_t v10 = v15;
      goto LABEL_33;
    }
  }
  else if (CFEqual(a2, @"RemoteNetworkIPAddress"))
  {
    *(_OWORD *)cStr = *(_OWORD *)(v8 + 92);
    *(_OWORD *)&cStr[12] = *(_OWORD *)(v8 + 104);
    uint64_t v10 = APSNetworkAddressCreateWithSocketAddr();
    if (v10) {
      goto LABEL_33;
    }
    APSNetworkAddressSetPort();
    *a4 = 0;
  }
  else
  {
    if (gLogCategory_APTransportConnectionTCP <= 30
      && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 4294954512;
  }
  return v10;
}

uint64_t tcpconnection_DumpHierarchy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 176) == 5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, a3, "Connection:[%{ptr}] (TCP) %''@ Ports:%##a -> %##a%?s%?lu Parent:[%{ptr}]\n", a1, a4, DerivedStorage + 64, DerivedStorage + 92, *(_DWORD *)(DerivedStorage + 124) != 0, " IDX:", *(_DWORD *)(DerivedStorage + 124) != 0, *(unsigned int *)(DerivedStorage + 124), a2);
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, a3, "Connection:[%{ptr}] (TCP) %''@ (Not Connected) Parent:[%{ptr}]\n", a1, a4, a2);
  }
}

uint64_t tcpconnection_Resume(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)tcpconnection_resumeInternal);
  return 0;
}

uint64_t tcpconnection_AddEventCallback(const void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    uint64_t v7 = 4294894974;
LABEL_9:
    APSLogErrorAt();
    return v7;
  }
  if (!a4)
  {
    uint64_t v7 = 4294894974;
    goto LABEL_9;
  }
  dispatch_retain(a4);
  if (a1) {
    CFRetain(a1);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t tcpconnection_RemoveEventCallback()
{
  return APSDispatchSyncTask();
}

uint64_t tcpconnection_AcquirePackage()
{
  return APSDispatchSyncTask();
}

uint64_t tcpconnection_AcquirePackageWithMessageSize()
{
  return APSDispatchSyncTask();
}

uint64_t tcpconnection_RelinquishPackage(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

uint64_t tcpconnection_SendPackage(const void *a1, const void *a2)
{
  return 0;
}

uint64_t tcpconnection_ConfigureEncryption(const void *a1, const void *a2, const void *a3)
{
  CMBaseObjectGetDerivedStorage();
  if (!a2 || (CFTypeID v6 = CFGetTypeID(a2), v6 != APSKeyHolderGetTypeID()))
  {
    uint64_t v7 = 4294894974;
LABEL_8:
    APSLogErrorAt();
    return v7;
  }
  if (!a3)
  {
    uint64_t v7 = 4294894974;
    goto LABEL_8;
  }
  CFRetain(a1);
  CFRetain(a2);
  CFRetain(a3);
  APSDispatchAsyncFHelper();
  return 0;
}

void tcpconnection_resumeInternal(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    APSLogErrorAt();
    APSSignalErrorAt();
    goto LABEL_9;
  }
  if (!*(unsigned char *)(DerivedStorage + 56))
  {
    if (!*(unsigned char *)(DerivedStorage + 93) || !*(_DWORD *)(DerivedStorage + 120))
    {
      if (gLogCategory_APTransportConnectionTCP <= 90
        && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_9;
    }
    int valuePtr = 0;
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    uint64_t v9 = v8;
    socklen_t v27 = 0;
    int v28 = 0;
    if (*(void *)(v8 + 152)) {
      goto LABEL_68;
    }
    int v10 = socket(*(unsigned __int8 *)(v8 + 93), 1, 6);
    if (v10 < 0)
    {
      if (!*__error())
      {
        int valuePtr = -6700;
        goto LABEL_37;
      }
      int valuePtr = *__error();
      if (valuePtr)
      {
LABEL_37:
        APSLogErrorAt();
LABEL_62:
        *(_DWORD *)(v9 + 176) = 4;
        CFNumberRef v23 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
        tcpconnection_callEventCallback(a1, 4, v23);
        if (v23) {
          CFRelease(v23);
        }
        if ((v10 & 0x80000000) == 0 && close(v10) && *__error()) {
          __error();
        }
LABEL_69:
        if (!valuePtr) {
          goto LABEL_9;
        }
        goto LABEL_81;
      }
    }
    int valuePtr = SocketSetNonBlocking();
    if (valuePtr) {
      goto LABEL_37;
    }
    if (*(_DWORD *)(v9 + 124))
    {
      int v11 = *(unsigned __int8 *)(v9 + 93);
      if (v11 == 2)
      {
        int v12 = v10;
        int v13 = 0;
        int v14 = 25;
LABEL_29:
        int valuePtr = setsockopt(v12, v13, v14, (const void *)(v9 + 124), 4u);
        if (valuePtr) {
          goto LABEL_37;
        }
        goto LABEL_30;
      }
      if (v11 == 30)
      {
        int v12 = v10;
        int v13 = 41;
        int v14 = 125;
        goto LABEL_29;
      }
    }
LABEL_30:
    int v15 = *(_DWORD *)(v9 + 60);
    if ((v15 & 0xB) != 0)
    {
      SocketSetP2P();
      int v15 = *(_DWORD *)(v9 + 60);
    }
    if ((v15 & 0x10) != 0)
    {
      if (gLogCategory_APTransportConnectionTCP <= 30
        && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_DWORD *)&cf.byte0 = 4;
      setsockopt(v10, 0xFFFF, 4225, &cf, 4u);
    }
    SocketSetQoS();
    int v26 = 1;
    setsockopt(v10, 0xFFFF, 4130, &v26, 4u);
    int v28 = 1;
    setsockopt(v10, 6, 1, &v28, 4u);
    SocketSetBufferSize();
    if (gLogCategory_APTransportConnectionTCP <= 40
      && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFUUIDRef v16 = *(const __CFUUID **)(v9 + 136);
    if (v16)
    {
      CFUUIDBytes cf = CFUUIDGetUUIDBytes(v16);
      setsockopt(v10, 0xFFFF, 4360, &cf, 0x10u);
    }
    int valuePtr = SocketConnect();
    if (!valuePtr)
    {
      int valuePtr = NetSocket_CreateWithNative();
      if (!valuePtr)
      {
        uint64_t v17 = *(void *)(v9 + 184);
        if (!v17) {
          goto LABEL_55;
        }
        uint64_t v18 = *(void *)(v9 + 192);
        if (!v18) {
          goto LABEL_55;
        }
        int v19 = tcpconnection_configureEncryptionInternal((uint64_t)a1, v17, v18);
        int valuePtr = v19;
        CFTypeRef v20 = *(const void **)(v9 + 184);
        if (v20)
        {
          CFRelease(v20);
          *(void *)(v9 + 184) = 0;
        }
        uint64_t v21 = *(const void **)(v9 + 192);
        if (v21)
        {
          CFRelease(v21);
          *(void *)(v9 + 192) = 0;
        }
        if (!v19)
        {
LABEL_55:
          int valuePtr = tcpconnection_setupDataSocketReadSource();
          if (!valuePtr)
          {
            socklen_t v27 = 28;
            int v22 = getsockname(v10, (sockaddr *)(v9 + 64), &v27);
            int valuePtr = v22;
            if (gLogCategory_APTransportConnectionTCP <= 50
              && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            APTTrafficMetricsConnectionFormed(*(void *)(v9 + 240));
            if (v22)
            {
              int v10 = -1;
              goto LABEL_62;
            }
LABEL_68:
            *(_DWORD *)(v9 + 176) = 5;
            tcpconnection_callEventCallback(a1, 5, 0);
            goto LABEL_69;
          }
        }
      }
    }
    goto LABEL_37;
  }
  uint64_t v3 = (uint64_t *)CMBaseObjectGetDerivedStorage();
  *(void *)&cf.byte0 = 0;
  CFTypeRef v4 = (const void *)v3[18];
  if (v3[21])
  {
    int v24 = 0;
  }
  else
  {
    uint64_t v5 = v3;
    int v6 = APTConnectionListenerCreate(0, -1, (uint64_t)tcpconnection_handleListenerConnected, (uint64_t)v4, (uint64_t)tcpconnection_handleListenerInvalidated, (uint64_t)v4, v3[1], &cf);
    if (v6)
    {
      int v24 = v6;
    }
    else
    {
      int v7 = APTConnectionListenerResume(*(uint64_t *)&cf.byte0);
      if (!v7)
      {
        if (v4) {
          CFRetain(v4);
        }
        v5[21] = *(void *)&cf.byte0;
        goto LABEL_9;
      }
      int v24 = v7;
    }
    APSLogErrorAt();
  }
  if (*(void *)&cf.byte0) {
    CFRelease(*(CFTypeRef *)&cf.byte0);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v24) {
LABEL_81:
  }
    APSLogErrorAt();
LABEL_9:
  if (a1) {
    CFRelease(a1);
  }
}

void tcpconnection_handleListenerConnected(uint64_t a1, uint64_t a2, int a3)
{
  int valuePtr = 0;
  if (!a2)
  {
    APSLogErrorAt();
    int valuePtr = -72322;
    APSSignalErrorAt();
    int v15 = 0;
    CFTypeRef v4 = 0;
    uint64_t DerivedStorage = 0;
LABEL_32:
    if ((a3 & 0x80000000) == 0 && close(a3) && *__error()) {
      __error();
    }
    if (DerivedStorage)
    {
      if (v15) {
        goto LABEL_17;
      }
      uint64_t v14 = 4;
      *(_DWORD *)(DerivedStorage + 176) = 4;
      CFNumberRef v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    }
    else
    {
      uint64_t v14 = 0;
      CFNumberRef v13 = 0;
    }
    if (!v4) {
      goto LABEL_23;
    }
    goto LABEL_18;
  }
  CFTypeRef v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v4)
  {
    uint64_t DerivedStorage = 0;
    goto LABEL_30;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
LABEL_30:
    int v15 = 1;
    goto LABEL_32;
  }
  SocketSetQoS();
  CFUUIDRef v6 = *(const __CFUUID **)(DerivedStorage + 136);
  if (v6)
  {
    *(CFUUIDBytes *)CFUUIDRef v16 = CFUUIDGetUUIDBytes(v6);
    setsockopt(a3, 0xFFFF, 4360, v16, 0x10u);
  }
  int valuePtr = NetSocket_CreateWithNative();
  if (valuePtr) {
    goto LABEL_31;
  }
  uint64_t v7 = *(void *)(DerivedStorage + 184);
  if (v7)
  {
    uint64_t v8 = *(void *)(DerivedStorage + 192);
    if (v8)
    {
      int v9 = tcpconnection_configureEncryptionInternal((uint64_t)v4, v7, v8);
      int valuePtr = v9;
      int v10 = *(const void **)(DerivedStorage + 184);
      if (v10)
      {
        CFRelease(v10);
        *(void *)(DerivedStorage + 184) = 0;
      }
      int v11 = *(const void **)(DerivedStorage + 192);
      if (v11)
      {
        CFRelease(v11);
        *(void *)(DerivedStorage + 192) = 0;
      }
      if (v9) {
        goto LABEL_31;
      }
    }
  }
  int valuePtr = tcpconnection_setupDataSocketReadSource();
  if (valuePtr)
  {
LABEL_31:
    APSLogErrorAt();
    int v15 = 0;
    goto LABEL_32;
  }
  APSNetworkAddressGetSocketAddr();
  *(_OWORD *)(DerivedStorage + 92) = *(_OWORD *)v16;
  *(_OWORD *)(DerivedStorage + 104) = *(_OWORD *)&v16[12];
  APTConnectionListenerInvalidate(*(void *)(DerivedStorage + 168));
  int v12 = *(const void **)(DerivedStorage + 168);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 168) = 0;
  }
LABEL_17:
  CFNumberRef v13 = 0;
  uint64_t v14 = 5;
  *(_DWORD *)(DerivedStorage + 176) = 5;
  if (!v4) {
    goto LABEL_23;
  }
LABEL_18:
  if (gLogCategory_APTransportConnectionTCP <= 50
    && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  tcpconnection_callEventCallback(v4, v14, v13);
LABEL_23:
  if (v13) {
    CFRelease(v13);
  }
  if (v4) {
    CFRelease(v4);
  }
}

void tcpconnection_handleListenerInvalidated(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t tcpconnection_configureEncryptionInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDataRef v12 = 0;
  theCFDataRef Data = 0;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void, CFDataRef *, void, CFDataRef *))(v7 + 64);
  if (!v8)
  {
    uint64_t v10 = 4294954514;
    goto LABEL_12;
  }
  uint64_t v9 = v8(a2, a3, 0, &theData, 0, &v12);
  if (v9)
  {
    uint64_t v10 = v9;
    goto LABEL_12;
  }
  if (CFDataGetLength(theData) <= 31)
  {
    uint64_t v10 = 4294894974;
    goto LABEL_12;
  }
  if (CFDataGetLength(v12) <= 31)
  {
    uint64_t v10 = 4294894974;
    goto LABEL_12;
  }
  if (*(unsigned char *)(DerivedStorage + 56))
  {
    CFDataGetBytePtr(v12);
    CFDataGetBytePtr(theData);
    uint64_t v10 = NetSocketChaCha20Poly1305Configure();
    if (!v10) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  CFDataGetBytePtr(theData);
  CFDataGetBytePtr(v12);
  uint64_t v10 = NetSocketChaCha20Poly1305Configure();
  if (v10) {
LABEL_12:
  }
    APSLogErrorAt();
LABEL_13:
  if (theData) {
    CFRelease(theData);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v10;
}

uint64_t tcpconnection_setupDataSocketReadSource()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uintptr_t v1 = *(unsigned int *)(*(void *)(DerivedStorage + 152) + 4);
  if ((v1 & 0x80000000) != 0)
  {
    APSLogErrorAt();
    uint64_t v9 = 4294894972;
LABEL_10:
    APSSignalErrorAt();
    return v9;
  }
  uint64_t v2 = DerivedStorage;
  dispatch_source_t v3 = dispatch_source_create(MEMORY[0x1E4F14478], v1, 0, *(dispatch_queue_t *)(DerivedStorage + 8));
  *(void *)(v2 + 160) = v3;
  if (!v3 || (CFTypeRef v4 = malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL)) == 0)
  {
    uint64_t v9 = 4294894973;
    APSLogErrorAt();
    goto LABEL_10;
  }
  uint64_t v5 = v4;
  CFTypeRef v6 = *(CFTypeRef *)(v2 + 144);
  if (v6) {
    CFTypeRef v6 = CFRetain(v6);
  }
  uint64_t v8 = *(void *)(v2 + 152);
  uint64_t v7 = *(NSObject **)(v2 + 160);
  *uint64_t v5 = v6;
  v5[1] = v8;
  dispatch_source_set_event_handler_f(v7, (dispatch_function_t)tcpconnection_receivedData);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v2 + 160), (dispatch_function_t)tcpconnection_readSourceCancelledCallback);
  dispatch_set_context(*(dispatch_object_t *)(v2 + 160), v5);
  dispatch_resume(*(dispatch_object_t *)(v2 + 160));
  return 0;
}

unsigned char *tcpconnection_callEventCallback(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    if (a3) {
      CFRetain(a3);
    }
    if (a1) {
      CFRetain(a1);
    }
    return (unsigned char *)APSDispatchAsyncFHelper();
  }
  return result;
}

void tcpconnection_receivedData(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t valuePtr = 0;
  CMBlockBufferRef targetBBuf = 0;
  uint64_t v14 = 0;
  CMBlockBufferRef theBuffer = 0;
  dataPointerOut = 0;
  CFTypeRef cf = 0;
  if (v1)
  {
    uint64_t v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v2) {
      goto LABEL_18;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)DerivedStorage)
    {
      uint64_t v4 = DerivedStorage;
      if (*(_DWORD *)(DerivedStorage + 176) == 5)
      {
        CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF90];
        HIDWORD(valuePtr) = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(unsigned int *)(DerivedStorage + 200), (CFAllocatorRef)*MEMORY[0x1E4F1CF90], 0, 0, *(unsigned int *)(DerivedStorage + 200), 1u, &theBuffer);
        if (HIDWORD(valuePtr)) {
          goto LABEL_33;
        }
        HIDWORD(valuePtr) = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut);
        if (HIDWORD(valuePtr)) {
          goto LABEL_33;
        }
        int v7 = (*(uint64_t (**)(void))(*(void *)(v4 + 152) + 24))();
        HIDWORD(valuePtr) = v7;
        if (v7)
        {
          if (v7 != -6723) {
            APSLogErrorAt();
          }
          uint64_t v8 = CMBaseObjectGetDerivedStorage();
          if (!*(unsigned char *)v8)
          {
            APTTrafficMetricsConnectionClosed(*(void *)(v8 + 240));
            tcpconnection_cleanUp();
          }
          CFNumberRef v9 = CFNumberCreate(v5, kCFNumberSInt32Type, (char *)&valuePtr + 4);
          tcpconnection_callEventCallback(v2, 6, v9);
          if (v9) {
            CFRelease(v9);
          }
          goto LABEL_16;
        }
        if ((HIDWORD(valuePtr) = (*(uint64_t (**)(CMBlockBufferRef, uint64_t *))(v4 + 208))(theBuffer, &valuePtr)) != 0|| valuePtr&& ((HIDWORD(valuePtr) = CMBlockBufferCreateWithMemoryBlock(v5, 0, valuePtr, v6, 0, 0, valuePtr, 1u, &targetBBuf)) != 0|| (HIDWORD(valuePtr) = CMBlockBufferGetDataPointer(targetBBuf, 0, 0, 0, &v14)) != 0|| (HIDWORD(valuePtr) = (*(uint64_t (**)(void))(*(void *)(v4 + 152) + 24))()) != 0|| (HIDWORD(valuePtr) = CMBlockBufferAppendBufferReference(theBuffer, targetBBuf, 0, 0, 0)) != 0)|| (HIDWORD(valuePtr) = (*(uint64_t (**)(const __CFAllocator *, CMBlockBufferRef, CFTypeRef *))(v4 + 216))(v5, theBuffer,
                                    &cf)) != 0)
        {
LABEL_33:
          APSLogErrorAt();
        }
        else
        {
          tcpconnection_callEventCallback(v2, 7, cf);
        }
      }
      else
      {
        HIDWORD(valuePtr) = -72320;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    HIDWORD(valuePtr) = -72322;
    APSSignalErrorAt();
    uint64_t v2 = 0;
  }
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
LABEL_18:
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (targetBBuf) {
    CFRelease(targetBBuf);
  }
  if (v2) {
    CFRelease(v2);
  }
}

void tcpconnection_readSourceCancelledCallback(CFTypeRef *a1)
{
  NetSocket_Delete();
  if (*a1) {
    CFRelease(*a1);
  }
  free(a1);
}

void tcpconnection_deferCallEventCallback(const void **a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 40)) {
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), a1, (dispatch_function_t)tcpconnection_callEventCallbackOnEventQueue);
  }
  dispatch_source_t v3 = a1[2];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    CFRelease(v4);
  }
}

uint64_t tcpconnection_callEventCallbackOnEventQueue(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(DerivedStorage + 32);
  CFAllocatorRef v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(DerivedStorage + 40);
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  return v5(v6, v3, v4);
}

void tcpconnection_addEventCallbackInternal(uint64_t a1)
{
  tcpconnection_setEventCallback(a1);
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (v2)
  {
    dispatch_release(v2);
  }
}

uint64_t tcpconnection_setEventCallback(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)(DerivedStorage + 32) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(NSObject **)(DerivedStorage + 48);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(DerivedStorage + 48) = 0;
  }
  uint64_t v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    *(void *)(DerivedStorage + 48) = v4;
    dispatch_retain(v4);
  }
  return 0;
}

uint64_t tcpconnection_acquirePackageInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    APSLogErrorAt();
    uint64_t v6 = 4294954511;
    APSSignalErrorAt();
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(CFAllocatorRef, void))(DerivedStorage + 224);
    CFAllocatorRef v4 = CFGetAllocator(*(CFTypeRef *)a1);
    uint64_t v5 = v3(v4, *(void *)(a1 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      APSLogErrorAt();
    }
    else
    {
      if (gLogCategory_APTransportConnectionTCP <= 30
        && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return 0;
    }
  }
  return v6;
}

uint64_t tcpconnection_acquirePackageWithMessageSizeInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    APSLogErrorAt();
    uint64_t v6 = 4294954511;
    APSSignalErrorAt();
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(CFAllocatorRef, void, void))(DerivedStorage + 232);
    CFAllocatorRef v4 = CFGetAllocator(*(CFTypeRef *)a1);
    uint64_t v5 = v3(v4, *(void *)(a1 + 8), *(void *)(a1 + 16));
    if (v5)
    {
      uint64_t v6 = v5;
      APSLogErrorAt();
    }
    else
    {
      if (gLogCategory_APTransportConnectionTCP <= 30
        && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return 0;
    }
  }
  return v6;
}

void tcpconnection_sendPackageInternal(const void **a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_14;
  }
  uint64_t v3 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 176) != 5)
  {
    APSLogErrorAt();
    goto LABEL_15;
  }
  CFAllocatorRef v4 = a1[1];
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v6 = v5 ? v5 : 0;
  int v7 = *(uint64_t (**)(const void *))(v6 + 64);
  if (!v7 || (uint64_t v8 = v7(v4)) == 0)
  {
LABEL_14:
    APSLogErrorAt();
    APSSignalErrorAt();
LABEL_15:
    CFNumberRef v9 = 0;
    goto LABEL_16;
  }
  CFNumberRef v9 = (OpaqueCMBlockBuffer *)v8;
  if (!FigMakeIOVecArrayWithBlockBuffer())
  {
    CMBlockBufferGetDataLength(v9);
    APTTrafficMetricsSendStarted(*(void *)(v3 + 240));
    if (!(*(unsigned int (**)(void))(*(void *)(v3 + 152) + 40))())
    {
      if (gLogCategory_APTransportConnectionTCP <= 10
        && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
      {
        uint64_t v10 = a1[1];
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        CFNumberRef v13 = *(void (**)(const void *))(v12 + 24);
        if (v13) {
          v13(v10);
        }
        LogPrintF();
      }
      APTTrafficMetricsSendFinished(*(void *)(v3 + 240));
      goto LABEL_25;
    }
  }
  APSLogErrorAt();
LABEL_16:
  tcpconnection_callEventCallback(*a1, 8, a1[1]);
  if (v9) {
LABEL_25:
  }
    CFRelease(v9);
  uint64_t v14 = a1[1];
  if (v14) {
    CFRelease(v14);
  }
  if (*a1) {
    CFRelease(*a1);
  }
}

void tcpconnection_deferConfigureEncryption(uint64_t *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 176) == 5)
  {
    tcpconnection_configureEncryptionInternal(*a1, a1[1], a1[2]);
  }
  else
  {
    uint64_t v3 = DerivedStorage;
    CFAllocatorRef v4 = *(const void **)(DerivedStorage + 184);
    uint64_t v5 = (const void *)a1[1];
    *(void *)(v3 + 184) = v5;
    if (v5) {
      CFRetain(v5);
    }
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v6 = *(const void **)(v3 + 192);
    int v7 = (const void *)a1[2];
    *(void *)(v3 + 192) = v7;
    if (v7) {
      CFRetain(v7);
    }
    if (v6) {
      CFRelease(v6);
    }
  }
  CFRelease((CFTypeRef)*a1);
  CFRelease((CFTypeRef)a1[1]);
  uint64_t v8 = (const void *)a1[2];
  CFRelease(v8);
}

uint64_t APBrowserDeviceQueryManagerGetInfoCreate(void *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  APBrowserDeviceQueryManagerGetClassID();
  uint64_t v3 = CMDerivedObjectCreate();
  if (v3)
  {
    uint64_t v8 = v3;
LABEL_11:
    APSLogErrorAt();
    return v8;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  dispatch_queue_t v5 = dispatch_queue_create("APBrowserDeviceQueryManagerGetInfo.queue", 0);
  DerivedStorage[1] = v5;
  if (!v5)
  {
    uint64_t v8 = 4294895066;
    goto LABEL_11;
  }
  dispatch_queue_t v6 = dispatch_queue_create("APBrowserDeviceQueryManagerGetInfo.eventQueue", 0);
  *uint64_t DerivedStorage = v6;
  if (!v6)
  {
    uint64_t v8 = 4294895066;
    goto LABEL_11;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  DerivedStorage[3] = Mutable;
  if (!Mutable)
  {
    uint64_t v8 = 4294895066;
    goto LABEL_11;
  }
  uint64_t v8 = 0;
  *a1 = 0;
  return v8;
}

uint64_t queryManagerGetInfo_Invalidate(uint64_t a1)
{
  uint64_t v6 = 0;
  int v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  CFAllocatorRef v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = __queryManagerGetInfo_Invalidate_block_invoke;
  v5[3] = &unk_1E688B0E0;
  v5[4] = &v6;
  v5[5] = a1;
  dispatch_sync(v2, v5);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void queryManagerGetInfo_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 24) = 0;
  }
  CFAllocatorRef v2 = *(NSObject **)(DerivedStorage + 8);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(DerivedStorage + 8) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

uint64_t __queryManagerGetInfo_invalidateInternal_block_invoke()
{
  return HTTPClientInvalidate();
}

uint64_t queryManagerGetInfo_QueryDevice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2000000000;
  int v19 = 0;
  uint64_t v12 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __queryManagerGetInfo_QueryDevice_block_invoke;
  block[3] = &unk_1E688B128;
  block[4] = &v16;
  void block[5] = a1;
  void block[6] = a2;
  void block[7] = a3;
  void block[8] = a4;
  void block[9] = a5;
  block[10] = a6;
  dispatch_sync(v12, block);
  uint64_t v13 = *((unsigned int *)v17 + 6);
  _Block_object_dispose(&v16, 8);
  return v13;
}

void __queryManagerGetInfo_queryDeviceInternal_block_invoke(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 9648) && (*(_DWORD *)(a2 + 8456) - 200) <= 0x63)
  {
    if (HTTPClientGetSelfAddress())
    {
      if (gLogCategory_APBrowserDeviceQueryManagerGetInfo <= 60
        && (gLogCategory_APBrowserDeviceQueryManagerGetInfo != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      SockAddrToString();
    }
  }
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  int v7 = *(const void **)(a1 + 56);
  uint64_t v6 = *(const void **)(a1 + 64);
  int v9 = *(void (**)(uint64_t, uint64_t, __CFDictionary *, uint64_t, uint64_t))(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APBrowserDeviceQueryManagerGetInfo <= 40
    && (gLogCategory_APBrowserDeviceQueryManagerGetInfo != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v10 = *(unsigned int *)(a2 + 9648);
  if (v10)
  {
    uint64_t v11 = 0;
    if (!v9) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  int v12 = *(_DWORD *)(a2 + 8456);
  if ((v12 - 200) > 0x63)
  {
    uint64_t v11 = 0;
    uint64_t v10 = (v12 + 200000);
    if (!v9) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  CFDictionaryGetTypeID();
  uint64_t v11 = (__CFDictionary *)CFCreateWithPlistBytes();
  CFDictionarySetValue(v11, @"address", v7);
  CFDictionarySetValue(v11, @"controlPort", v6);
  uint64_t v10 = 0;
  if (v9) {
LABEL_20:
  }
    v9(v4, v5, v11, v8, v10);
LABEL_21:
  if (v11) {
    CFRelease(v11);
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 88) + 24), *(const void **)(a1 + 48));
  HTTPClientInvalidate();
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 56));
  CFRelease(*(CFTypeRef *)(a1 + 64));
  CFRelease(*(CFTypeRef *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t APAdvertiserInfoGetTypeID()
{
  if (APAdvertiserInfoGetTypeID_initOnce != -1) {
    dispatch_once_f(&APAdvertiserInfoGetTypeID_initOnce, &APAdvertiserInfoGetTypeID_typeID, (dispatch_function_t)_APAdvertiserInfoClassRegister);
  }
  return APAdvertiserInfoGetTypeID_typeID;
}

uint64_t _APAdvertiserInfoClassRegister(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APAdvertiserInfoCreate(uint64_t a1, void *a2)
{
  if (APAdvertiserInfoGetTypeID_initOnce != -1) {
    dispatch_once_f(&APAdvertiserInfoGetTypeID_initOnce, &APAdvertiserInfoGetTypeID_typeID, (dispatch_function_t)_APAdvertiserInfoClassRegister);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v4 = (const void *)Instance;
    *(_OWORD *)(Instance + 16) = 0u;
    uint64_t v5 = (pthread_mutex_t *)(Instance + 16);
    *(void *)(Instance + 80) = 0;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(void *)(Instance + 80) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v6 = pthread_mutex_init(v5, 0);
    if (v6)
    {
      APSLogErrorAt();
      CFRelease(v4);
    }
    else
    {
      *a2 = v4;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960568;
  }
  return v6;
}

uint64_t APAdvertiserInfoCreateWithData(const __CFAllocator *a1, const __CFData *a2, void *a3)
{
  CFDataRef v3 = a2;
  uint64_t v11 = 0;
  CFTypeRef cf = 0;
  if (!a2)
  {
    APSLogErrorAt();
LABEL_13:
    uint64_t v9 = 4294960591;
    goto LABEL_17;
  }
  if (!a3)
  {
    APSLogErrorAt();
    CFDataRef v3 = 0;
    goto LABEL_13;
  }
  uint64_t v6 = APAdvertiserInfoCreate((uint64_t)a1, &cf);
  if (v6)
  {
    uint64_t v9 = v6;
    APSLogErrorAt();
    CFDataRef v3 = 0;
  }
  else
  {
    CFDataRef v3 = (const __CFData *)CFPropertyListCreateWithData(a1, v3, 2uLL, (CFPropertyListFormat *)&v11, 0);
    if (v3)
    {
      if (v11 == 200)
      {
        int v7 = cf;
        uint64_t v8 = (const void *)*((void *)cf + 10);
        if (v8) {
          CFRelease(v8);
        }
        uint64_t v9 = 0;
        v7[10] = CFRetain(v3);
        *a3 = v7;
        CFTypeRef cf = 0;
LABEL_9:
        CFRelease(v3);
        return v9;
      }
      APSLogErrorAt();
      uint64_t v9 = 4294960579;
    }
    else
    {
      APSLogErrorAt();
      uint64_t v9 = 4294960534;
    }
  }
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  if (v3) {
    goto LABEL_9;
  }
  return v9;
}

const void *APAdvertiserInfoCopyProperty(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, int *a5)
{
  uint64_t v6 = a3;
  if (!a3)
  {
    APSLogErrorAt();
    int v10 = -6705;
    if (!a5) {
      return v6;
    }
    goto LABEL_6;
  }
  uint64_t v8 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), v6);
  uint64_t v6 = Value;
  if (Value)
  {
    CFRetain(Value);
    pthread_mutex_unlock(v8);
    int v10 = 0;
    if (!a5) {
      return v6;
    }
    goto LABEL_6;
  }
  pthread_mutex_unlock(v8);
  int v10 = -6727;
  if (a5) {
LABEL_6:
  }
    *a5 = v10;
  return v6;
}

uint64_t APAdvertiserInfoSetProperty(uint64_t a1, uint64_t a2, __CFString *a3, uint64_t a4, const void *a5)
{
  if (!a3 || !a5)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  uint64_t v8 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (CFEqual(a3, @"featuresEx"))
  {
    uint64_t v9 = _APAdvertiserInfoSetFeaturesEx(*(__CFDictionary **)(a1 + 80), a5);
  }
  else
  {
    if (!CFEqual(a3, @"features"))
    {
      if (CFEqual(a3, @"requiredSenderFeatures")) {
        uint64_t v14 = @"requiredSenderFeatures";
      }
      else {
        uint64_t v14 = a3;
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 80), v14, a5);
      uint64_t v12 = 0;
      goto LABEL_9;
    }
    CFDictionaryRef v10 = *(const __CFDictionary **)(a1 + 80);
    uint64_t valuePtr = 0;
    CFTypeID v11 = CFGetTypeID(a5);
    if (v11 != CFNumberGetTypeID())
    {
      APSLogErrorAt();
      uint64_t v12 = 4294960591;
      goto LABEL_9;
    }
    CFNumberGetValue((CFNumberRef)a5, kCFNumberSInt64Type, &valuePtr);
    uint64_t v9 = _APAdvertiserInfoSetLegacyFeatures(v10);
  }
  uint64_t v12 = v9;
LABEL_9:
  pthread_mutex_unlock(v8);
  return v12;
}

uint64_t _APAdvertiserInfoSetFeaturesEx(__CFDictionary *a1, CFTypeRef cf)
{
  unsigned int v6 = 0;
  if (cf && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFDataGetTypeID()))
  {
    CFDictionarySetValue(a1, @"featuresEx", cf);
    APSFeaturesGetLegacyFlags();
    CFDictionarySetInt64();
  }
  else
  {
    APSLogErrorAt();
    return -6705;
  }
  return v6;
}

uint64_t APAdvertiserInfoCreateData(uint64_t a1, CFDataRef *a2)
{
  CFTypeID v4 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (a2)
  {
    CFAllocatorRef v5 = CFGetAllocator((CFTypeRef)a1);
    CFDataRef Data = CFPropertyListCreateData(v5, *(CFPropertyListRef *)(a1 + 80), kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (Data)
    {
      uint64_t v7 = 0;
      *a2 = Data;
    }
    else
    {
      APSLogErrorAt();
      uint64_t v7 = 4294960534;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v7 = 4294960591;
  }
  pthread_mutex_unlock(v4);
  return v7;
}

uint64_t APAdvertiserInfoCreateWithRAOPAndAirPlayDataAndDeviceName(uint64_t a1, const __CFData *a2, unint64_t a3, const __CFString *a4, CFMutableDictionaryRef **a5)
{
  CFTypeRef cf = 0;
  v101 = 0;
  if (!a4)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  if (!((unint64_t)a2 | a3))
  {
    APSLogErrorAt();
    uint64_t v13 = 4294960591;
    goto LABEL_287;
  }
  APAdvertiserInfoCreate(a1, &v101);
  uint64_t v9 = v101;
  if (!v101)
  {
    APSLogErrorAt();
    uint64_t v13 = 4294960568;
    goto LABEL_287;
  }
  _APAdvertiserInfoCopyAndRemoveMDNSLabelSuffix(a4, (__CFString **)&cf);
  if (cf) {
    CFTypeRef v10 = cf;
  }
  else {
    CFTypeRef v10 = a4;
  }
  CFDictionarySetValue(v9[10], @"deviceName", v10);
  if (!a2) {
    goto LABEL_73;
  }
  BOOL v104 = 0;
  value = 0;
  uint64_t v103 = 0;
  LODWORD(v102) = 0;
  uint64_t BitListValueFromTXTRecord = APAdvertiserInfoGetBitListValueFromTXTRecord(@"cn", a2, &v102);
  if (BitListValueFromTXTRecord)
  {
    uint64_t v13 = BitListValueFromTXTRecord;
    APSLogErrorAt();
    if (gLogCategory_APAdvertiserInfo > 40
      || gLogCategory_APAdvertiserInfo == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_70;
    }
LABEL_191:
    LogPrintF();
    goto LABEL_70;
  }
  CFDictionarySetInt64();
  uint64_t BooleanFromTXTRecord = APAdvertiserInfoGetBooleanFromTXTRecord(@"da", a2, &v104);
  if (BooleanFromTXTRecord != -6727)
  {
    uint64_t v13 = BooleanFromTXTRecord;
    if (BooleanFromTXTRecord) {
      goto LABEL_69;
    }
    uint64_t v14 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!v104) {
      uint64_t v14 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(v9[10], @"rfc2617DigestAuthKey", *v14);
  }
  uint64_t v15 = APAdvertiserInfoGetBitListValueFromTXTRecord(@"et", a2, &v102);
  if (v15)
  {
    uint64_t v13 = v15;
    APSLogErrorAt();
    if (gLogCategory_APAdvertiserInfo > 40
      || gLogCategory_APAdvertiserInfo == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_70;
    }
    goto LABEL_191;
  }
  CFDictionarySetInt64();
  uint64_t Int64FromTXTRecord = APAdvertiserInfoGetInt64FromTXTRecord(@"ft", a2, &v103);
  if (Int64FromTXTRecord != -6727)
  {
    uint64_t v13 = Int64FromTXTRecord;
    if (Int64FromTXTRecord) {
      goto LABEL_69;
    }
    uint64_t v17 = _APAdvertiserInfoSetLegacyFeatures(v9[10]);
    if (v17)
    {
      uint64_t v13 = v17;
      goto LABEL_69;
    }
  }
  uint64_t v18 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"fv", a2, (CFStringRef *)&value);
  if (v18 != -6727)
  {
    uint64_t v13 = v18;
    if (v18) {
      goto LABEL_69;
    }
    int v19 = value;
    CFDictionarySetValue(v9[10], @"firmwareVersion", value);
    if (v19)
    {
      CFRelease(v19);
      value = 0;
    }
  }
  uint64_t v20 = APAdvertiserInfoGetInt64FromTXTRecord(@"sf", a2, &v103);
  if (v20 != -6727)
  {
    uint64_t v13 = v20;
    if (v20) {
      goto LABEL_69;
    }
    CFDictionarySetInt64();
  }
  uint64_t v21 = APAdvertiserInfoGetBitListValueFromTXTRecord(@"md", a2, &v102);
  if (v21 != -6727)
  {
    uint64_t v13 = v21;
    if (v21) {
      goto LABEL_69;
    }
    CFDictionarySetInt64();
  }
  uint64_t v22 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"am", a2, (CFStringRef *)&value);
  if (v22 != -6727)
  {
    uint64_t v13 = v22;
    if (v22) {
      goto LABEL_69;
    }
    CFNumberRef v23 = value;
    CFDictionarySetValue(v9[10], @"deviceModel", value);
    if (v23)
    {
      CFRelease(v23);
      value = 0;
    }
  }
  uint64_t v24 = APAdvertiserInfoGetBooleanFromTXTRecord(@"pw", a2, &v104);
  if (v24 != -6727)
  {
    uint64_t v13 = v24;
    if (v24) {
      goto LABEL_69;
    }
    uint64_t v25 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!v104) {
      uint64_t v25 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(v9[10], @"password", *v25);
  }
  uint64_t v26 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"pk", a2, (CFStringRef *)&value);
  if (v26 != -6727)
  {
    uint64_t v13 = v26;
    if (v26) {
      goto LABEL_69;
    }
    socklen_t v27 = value;
    CFDictionarySetValue(v9[10], @"publicKey", value);
    if (v27)
    {
      CFRelease(v27);
      value = 0;
    }
  }
  uint64_t v28 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"tp", a2, (CFStringRef *)&value);
  if (v28)
  {
    uint64_t v13 = v28;
    APSLogErrorAt();
    if (gLogCategory_APAdvertiserInfo > 40
      || gLogCategory_APAdvertiserInfo == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_70;
    }
    goto LABEL_191;
  }
  char v29 = value;
  CFDictionarySetValue(v9[10], @"transportTypes", value);
  if (v29)
  {
    CFRelease(v29);
    value = 0;
  }
  uint64_t v30 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"vn", a2, (CFStringRef *)&value);
  if (!v30)
  {
    int v31 = value;
    CFDictionarySetValue(v9[10], @"airTunesProtocolVersion", value);
    if (v31)
    {
      CFRelease(v31);
      value = 0;
    }
    uint64_t v32 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"vs", a2, (CFStringRef *)&value);
    if (v32 != -6727)
    {
      uint64_t v13 = v32;
      if (v32) {
        goto LABEL_69;
      }
      CMTime v33 = value;
      CFDictionarySetValue(v9[10], @"airPlayVersion", value);
      if (v33)
      {
        CFRelease(v33);
        value = 0;
      }
    }
    uint64_t v34 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"ov", a2, (CFStringRef *)&value);
    if (v34 == -6727)
    {
LABEL_55:
      uint64_t v36 = APAdvertiserInfoGetInt64FromTXTRecord(@"vv", a2, &v103);
      if (v36 == -6727)
      {
        uint64_t v13 = 0;
        goto LABEL_70;
      }
      uint64_t v13 = v36;
      if (!v36)
      {
        CFDictionarySetInt64();
        goto LABEL_70;
      }
      goto LABEL_69;
    }
    uint64_t v13 = v34;
    if (!v34)
    {
      uint64_t v35 = value;
      CFDictionarySetValue(v9[10], @"OSVersion", value);
      if (v35)
      {
        CFRelease(v35);
        value = 0;
      }
      goto LABEL_55;
    }
LABEL_69:
    APSLogErrorAt();
    goto LABEL_70;
  }
  uint64_t v13 = v30;
  APSLogErrorAt();
  if (gLogCategory_APAdvertiserInfo <= 40
    && (gLogCategory_APAdvertiserInfo != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_191;
  }
LABEL_70:
  if (value) {
    CFRelease(value);
  }
  if (v13)
  {
    APSLogErrorAt();
LABEL_291:
    CFRelease(v9);
    goto LABEL_287;
  }
LABEL_73:
  if (!a3)
  {
LABEL_286:
    uint64_t v13 = 0;
    *a5 = v9;
    goto LABEL_287;
  }
  value = 0;
  BOOL v104 = 0;
  CFTypeRef v102 = 0;
  uint64_t v103 = 0;
  uint64_t v37 = APAdvertiserInfoGetInt64FromTXTRecord(@"act", (const void *)a3, &v103);
  if (v37 != -6727)
  {
    uint64_t v13 = v37;
    if (v37) {
      goto LABEL_281;
    }
    CFDictionarySetInt64();
  }
  uint64_t v38 = APAdvertiserInfoGetInt64FromTXTRecord(@"acl", (const void *)a3, &v103);
  if (v38 != -6727)
  {
    uint64_t v13 = v38;
    if (v38) {
      goto LABEL_281;
    }
    CFDictionarySetInt64();
  }
  uint64_t v39 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"btaddr", (CFDataRef)a3, (CFStringRef *)&value);
  if (v39 == -6727)
  {
    uint64_t v40 = value;
    if (!value) {
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  uint64_t v13 = v39;
  if (v39) {
    goto LABEL_281;
  }
  uint64_t v40 = value;
  CFDictionarySetValue(v9[10], @"bluetoothAddress", value);
  if (v40)
  {
LABEL_87:
    CFRelease(v40);
    value = 0;
  }
LABEL_88:
  uint64_t v41 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"deviceid", (CFDataRef)a3, (CFStringRef *)&value);
  if (!v41)
  {
    uint64_t v42 = value;
    CFDictionarySetValue(v9[10], @"deviceID", value);
    if (v42)
    {
      CFRelease(v42);
      value = 0;
    }
    uint64_t v43 = APAdvertiserInfoCreateAPSFeaturesFromTXTRecordEx((CFDataRef)a3, @"fex", @"features", &v102);
    if (v43 != -6727)
    {
      uint64_t v13 = v43;
      if (v43) {
        goto LABEL_281;
      }
      CFTypeRef v44 = v102;
      _APAdvertiserInfoSetFeaturesEx(v9[10], v102);
      if (v44)
      {
        CFRelease(v44);
        CFTypeRef v102 = 0;
      }
    }
    uint64_t v45 = APAdvertiserInfoGetInt64FromTXTRecord(@"rsf", (const void *)a3, &v103);
    if (v45 != -6727)
    {
      uint64_t v13 = v45;
      if (v45) {
        goto LABEL_281;
      }
      CFDictionarySetInt64();
    }
    uint64_t v46 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"fv", (CFDataRef)a3, (CFStringRef *)&value);
    if (v46 != -6727)
    {
      uint64_t v13 = v46;
      if (v46) {
        goto LABEL_281;
      }
      uint64_t v47 = value;
      CFDictionarySetValue(v9[10], @"firmwareVersion", value);
      if (v47)
      {
        CFRelease(v47);
        value = 0;
      }
    }
    uint64_t v48 = APAdvertiserInfoGetInt64FromTXTRecord(@"flags", (const void *)a3, &v103);
    if (v48 != -6727)
    {
      uint64_t v13 = v48;
      if (v48) {
        goto LABEL_281;
      }
      CFDictionarySetInt64();
    }
    uint64_t v49 = APAdvertiserInfoGetBooleanFromTXTRecord(@"gcgl", (const void *)a3, &v104);
    if (v49 != -6727)
    {
      uint64_t v13 = v49;
      if (v49) {
        goto LABEL_281;
      }
      CFAllocatorRef v50 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!v104) {
        CFAllocatorRef v50 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(v9[10], @"groupContainsDiscoverableLeader", *v50);
    }
    uint64_t v51 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"gid", (CFDataRef)a3, (CFStringRef *)&value);
    if (v51 != -6727)
    {
      uint64_t v13 = v51;
      if (v51) {
        goto LABEL_281;
      }
      int v52 = value;
      CFDictionarySetValue(v9[10], @"groupID", value);
      if (v52)
      {
        CFRelease(v52);
        value = 0;
      }
    }
    uint64_t v53 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"gpn", (CFDataRef)a3, (CFStringRef *)&value);
    if (v53 != -6727)
    {
      uint64_t v13 = v53;
      if (v53) {
        goto LABEL_281;
      }
      uint64_t v54 = value;
      CFDictionarySetValue(v9[10], @"groupPublicName", value);
      if (v54)
      {
        CFRelease(v54);
        value = 0;
      }
    }
    uint64_t v55 = APAdvertiserInfoGetBooleanFromTXTRecord(@"igl", (const void *)a3, &v104);
    if (v55 != -6727)
    {
      uint64_t v13 = v55;
      if (v55) {
        goto LABEL_281;
      }
      uint64_t v56 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!v104) {
        uint64_t v56 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(v9[10], @"isGroupLeader", *v56);
    }
    uint64_t v57 = APAdvertiserInfoGetInt64FromTXTRecord(@"psgsz", (const void *)a3, &v103);
    if (v57 != -6727)
    {
      uint64_t v13 = v57;
      if (v57) {
        goto LABEL_281;
      }
      CFDictionarySetInt64();
    }
    uint64_t v58 = APAdvertiserInfoGetInt64FromTXTRecord(@"psgtp", (const void *)a3, &v103);
    if (v58 != -6727)
    {
      uint64_t v13 = v58;
      if (v58) {
        goto LABEL_281;
      }
      CFDictionarySetInt64();
    }
    uint64_t v59 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"psgid", (CFDataRef)a3, (CFStringRef *)&value);
    if (v59 != -6727)
    {
      uint64_t v13 = v59;
      if (v59) {
        goto LABEL_281;
      }
      CFAllocatorRef v60 = value;
      CFDictionarySetValue(v9[10], @"persistentGroupUUID", value);
      if (v60)
      {
        CFRelease(v60);
        value = 0;
      }
    }
    uint64_t v61 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"pgm", (CFDataRef)a3, (CFStringRef *)&value);
    if (v61 != -6727)
    {
      uint64_t v13 = v61;
      if (v61) {
        goto LABEL_281;
      }
      v62 = value;
      CFDictionarySetValue(v9[10], @"persistentGroupModel", value);
      if (v62)
      {
        CFRelease(v62);
        value = 0;
      }
    }
    uint64_t v63 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"pgmid", (CFDataRef)a3, (CFStringRef *)&value);
    if (v63 != -6727)
    {
      uint64_t v13 = v63;
      if (v63) {
        goto LABEL_281;
      }
      CFStringRef v64 = value;
      CFDictionarySetValue(v9[10], @"persistentGroupMemberID", value);
      if (v64)
      {
        CFRelease(v64);
        value = 0;
      }
    }
    uint64_t v65 = APAdvertiserInfoGetBooleanFromTXTRecord(@"pgcgl", (const void *)a3, &v104);
    if (v65 != -6727)
    {
      uint64_t v13 = v65;
      if (v65) {
        goto LABEL_281;
      }
      CFAllocatorRef v66 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!v104) {
        CFAllocatorRef v66 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(v9[10], @"parentGroupContainsDiscoverableLeader", *v66);
    }
    uint64_t v67 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"pgid", (CFDataRef)a3, (CFStringRef *)&value);
    if (v67 != -6727)
    {
      uint64_t v13 = v67;
      if (v67) {
        goto LABEL_281;
      }
      uint64_t v68 = value;
      CFDictionarySetValue(v9[10], @"parentGroupID", value);
      if (v68)
      {
        CFRelease(v68);
        value = 0;
      }
    }
    uint64_t v69 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"tsid", (CFDataRef)a3, (CFStringRef *)&value);
    if (v69 != -6727)
    {
      uint64_t v13 = v69;
      if (v69) {
        goto LABEL_281;
      }
      uint64_t v70 = value;
      CFDictionarySetValue(v9[10], @"tightSyncUUID", value);
      if (v70)
      {
        CFRelease(v70);
        value = 0;
      }
    }
    uint64_t v71 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"tsm", (CFDataRef)a3, (CFStringRef *)&value);
    if (v71 != -6727)
    {
      uint64_t v13 = v71;
      if (v71) {
        goto LABEL_281;
      }
      CFArrayRef v72 = value;
      CFDictionarySetValue(v9[10], @"tightSyncGroupModel", value);
      if (v72)
      {
        CFRelease(v72);
        value = 0;
      }
    }
    uint64_t v73 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"model", (CFDataRef)a3, (CFStringRef *)&value);
    if (v73 != -6727)
    {
      uint64_t v13 = v73;
      if (v73) {
        goto LABEL_281;
      }
      CFIndex v74 = value;
      CFDictionarySetValue(v9[10], @"deviceModel", value);
      if (v74)
      {
        CFRelease(v74);
        value = 0;
      }
    }
    uint64_t v75 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"c", (CFDataRef)a3, (CFStringRef *)&value);
    if (v75 != -6727)
    {
      uint64_t v13 = v75;
      if (v75) {
        goto LABEL_281;
      }
      v76 = value;
      if (APSIsValidDeviceEnclosureColorString())
      {
        CFDictionarySetValue(v9[10], @"deviceEnclosureColor", v76);
      }
      else if (gLogCategory_APAdvertiserInfo <= 60 {
             && (gLogCategory_APAdvertiserInfo != -1 || _LogCategory_Initialize()))
      }
      {
        LogPrintF();
      }
      if (v76)
      {
        CFRelease(v76);
        value = 0;
      }
    }
    uint64_t v77 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"manufacturer", (CFDataRef)a3, (CFStringRef *)&value);
    if (v77 != -6727)
    {
      uint64_t v13 = v77;
      if (v77) {
        goto LABEL_281;
      }
      v78 = value;
      CFDictionarySetValue(v9[10], @"manufacturer", value);
      if (v78)
      {
        CFRelease(v78);
        value = 0;
      }
    }
    uint64_t v79 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"company", (CFDataRef)a3, (CFStringRef *)&value);
    if (v79 != -6727)
    {
      uint64_t v13 = v79;
      if (v79) {
        goto LABEL_281;
      }
      int v80 = value;
      CFDictionarySetValue(v9[10], @"company", value);
      if (v80)
      {
        CFRelease(v80);
        value = 0;
      }
    }
    uint64_t v81 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"serialNumber", (CFDataRef)a3, (CFStringRef *)&value);
    if (v81 != -6727)
    {
      uint64_t v13 = v81;
      if (v81) {
        goto LABEL_281;
      }
      int v82 = value;
      CFDictionarySetValue(v9[10], @"serialNumber", value);
      if (v82)
      {
        CFRelease(v82);
        value = 0;
      }
    }
    uint64_t v83 = APAdvertiserInfoGetInt64FromTXTRecord(@"at", (const void *)a3, &v103);
    if (v83 != -6727)
    {
      uint64_t v13 = v83;
      if (v83) {
        goto LABEL_281;
      }
      CFDictionarySetInt64();
    }
    uint64_t v84 = APAdvertiserInfoGetBooleanFromTXTRecord(@"pw", (const void *)a3, &v104);
    if (v84 != -6727)
    {
      uint64_t v13 = v84;
      if (v84) {
        goto LABEL_281;
      }
      uint64_t v85 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!v104) {
        uint64_t v85 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(v9[10], @"password", *v85);
    }
    uint64_t v86 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"protovers", (CFDataRef)a3, (CFStringRef *)&value);
    if (v86 != -6727)
    {
      uint64_t v13 = v86;
      if (v86) {
        goto LABEL_281;
      }
      CFAllocatorRef v87 = value;
      CFDictionarySetValue(v9[10], @"protocolVersion", value);
      if (v87)
      {
        CFRelease(v87);
        value = 0;
      }
    }
    uint64_t v88 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"pi", (CFDataRef)a3, (CFStringRef *)&value);
    if (v88 != -6727)
    {
      uint64_t v13 = v88;
      if (v88) {
        goto LABEL_281;
      }
      uint64_t v89 = value;
      CFDictionarySetValue(v9[10], @"publicCUAirPlayPairingIdentity", value);
      if (v89)
      {
        CFRelease(v89);
        value = 0;
      }
    }
    uint64_t v90 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"psi", (CFDataRef)a3, (CFStringRef *)&value);
    if (v90 != -6727)
    {
      uint64_t v13 = v90;
      if (v90) {
        goto LABEL_281;
      }
      uint64_t v91 = value;
      CFDictionarySetValue(v9[10], @"publicCUSystemPairingIdentity", value);
      if (v91)
      {
        CFRelease(v91);
        value = 0;
      }
    }
    uint64_t v92 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"pk", (CFDataRef)a3, (CFStringRef *)&value);
    if (v92 != -6727)
    {
      uint64_t v13 = v92;
      if (v92) {
        goto LABEL_281;
      }
      v93 = value;
      CFDictionarySetValue(v9[10], @"publicKey", value);
      if (v93)
      {
        CFRelease(v93);
        value = 0;
      }
    }
    uint64_t v94 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"srcvers", (CFDataRef)a3, (CFStringRef *)&value);
    if (v94 != -6727)
    {
      uint64_t v13 = v94;
      if (v94) {
        goto LABEL_281;
      }
      CFAllocatorRef v95 = value;
      CFDictionarySetValue(v9[10], @"airPlayVersion", value);
      if (v95)
      {
        CFRelease(v95);
        value = 0;
      }
    }
    uint64_t v96 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"osvers", (CFDataRef)a3, (CFStringRef *)&value);
    if (v96 == -6727)
    {
LABEL_262:
      uint64_t v98 = APAdvertiserInfoGetInt64FromTXTRecord(@"vv", (const void *)a3, &v103);
      if (v98 == -6727)
      {
        uint64_t v13 = 0;
        goto LABEL_282;
      }
      uint64_t v13 = v98;
      if (!v98)
      {
        CFDictionarySetInt64();
        goto LABEL_282;
      }
      goto LABEL_281;
    }
    uint64_t v13 = v96;
    if (!v96)
    {
      int v97 = value;
      CFDictionarySetValue(v9[10], @"OSVersion", value);
      if (v97)
      {
        CFRelease(v97);
        value = 0;
      }
      goto LABEL_262;
    }
LABEL_281:
    APSLogErrorAt();
    goto LABEL_282;
  }
  uint64_t v13 = v41;
  APSLogErrorAt();
  if (gLogCategory_APAdvertiserInfo <= 40
    && (gLogCategory_APAdvertiserInfo != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_282:
  if (value) {
    CFRelease(value);
  }
  if (!v13)
  {
    uint64_t v9 = v101;
    goto LABEL_286;
  }
  APSLogErrorAt();
  uint64_t v9 = v101;
  if (v101) {
    goto LABEL_291;
  }
LABEL_287:
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

void _APAdvertiserInfoCopyAndRemoveMDNSLabelSuffix(const __CFString *a1, __CFString **a2)
{
  if (a1)
  {
    if (CFStringHasSuffix(a1, @"")))
    {
      result.location = 0;
      result.length = 0;
      CFIndex Length = CFStringGetLength(a1);
      v19.location = 0;
      v19.length = Length;
      if (CFStringFindWithOptions(a1, @" ("), v19, 4uLL, &result)
      {
        uint64_t v6 = Length - result.location;
        result.length = Length - result.location;
        if (result.location)
        {
          if (v6 >= 4)
          {
            v20.location = result.location + 2;
            v20.length = v6 - 3;
            CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFStringRef v8 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, v20);
            v17.location = 0;
            v17.length = CFStringGetLength(v8);
            uint64_t v9 = CFNumberFormatterCreate(v7, 0, kCFNumberFormatterNoStyle);
            if (v9)
            {
              CFNumberRef v10 = CFNumberFormatterCreateNumberFromString(v7, v9, v8, &v17, 1uLL);
              if (v10)
              {
                CFIndex v11 = v17.length;
                if (v11 == CFStringGetLength(v8))
                {
                  CFStringRef v12 = CFStringCreateWithSubstring(v7, a1, result);
                  if (v12)
                  {
                    CFStringRef v13 = v12;
                    CFIndex v14 = CFStringGetLength(a1);
                    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v7, v14, a1);
                    if (MutableCopy)
                    {
                      uint64_t v16 = MutableCopy;
                      CFStringTrim(MutableCopy, v13);
                      *a2 = v16;
                    }
                    else
                    {
                      APSLogErrorAt();
                    }
                    CFRelease(v13);
                  }
                  else
                  {
                    APSLogErrorAt();
                  }
                }
              }
            }
            else
            {
              APSLogErrorAt();
              CFNumberRef v10 = 0;
            }
            if (v8) {
              CFRelease(v8);
            }
            if (v9) {
              CFRelease(v9);
            }
            if (v10) {
              CFRelease(v10);
            }
          }
        }
      }
    }
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t APAdvertiserInfoCreateWithSidePlayDataAndDeviceName(uint64_t a1, const __CFData *a2, const __CFString *a3, CFMutableDictionaryRef **a4)
{
  CFNumberRef v23 = 0;
  uint64_t v24 = 0;
  if (!a3 || !a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  CFStringRef v6 = a3;
  APAdvertiserInfoCreate(a1, &v24);
  CFAllocatorRef v7 = v24;
  if (!v24)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  _APAdvertiserInfoCopyAndRemoveMDNSLabelSuffix(v6, &v23);
  CFStringRef v8 = v23;
  if (v23) {
    CFStringRef v6 = v23;
  }
  CFDictionarySetValue(v7[10], @"deviceName", v6);
  CFTypeRef cf = 0;
  value = 0;
  uint64_t v9 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"id", a2, (CFStringRef *)&value);
  if (v9)
  {
    uint64_t v12 = v9;
    APSLogErrorAt();
    if (gLogCategory_APAdvertiserInfo <= 40
      && (gLogCategory_APAdvertiserInfo != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
LABEL_37:
    uint64_t v21 = value;
    if (!value) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  CFNumberRef v10 = value;
  CFDictionarySetValue(v7[10], @"deviceID", value);
  if (v10)
  {
    CFRelease(v10);
    value = 0;
  }
  uint64_t v11 = APAdvertiserInfoCreateAPSFeaturesFromTXTRecordEx(a2, @"f", 0, &cf);
  if (v11 == -6727)
  {
    CFStringRef v13 = (const void *)APSFeaturesCreateFromLegacyFlags();
  }
  else
  {
    uint64_t v12 = v11;
    if (v11) {
      goto LABEL_36;
    }
    CFStringRef v13 = cf;
  }
  _APAdvertiserInfoSetFeaturesEx(v7[10], v13);
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"mfg", a2, (CFStringRef *)&value);
  if (v14 != -6727)
  {
    uint64_t v12 = v14;
    if (v14) {
      goto LABEL_36;
    }
    uint64_t v15 = value;
    CFDictionarySetValue(v7[10], @"manufacturer", value);
    if (v15)
    {
      CFRelease(v15);
      value = 0;
    }
  }
  uint64_t v16 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"mdl", a2, (CFStringRef *)&value);
  if (v16 != -6727)
  {
    uint64_t v12 = v16;
    if (v16) {
      goto LABEL_36;
    }
    CFRange v17 = value;
    CFDictionarySetValue(v7[10], @"deviceModel", value);
    if (v17)
    {
      CFRelease(v17);
      value = 0;
    }
  }
  uint64_t v18 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"sn", a2, (CFStringRef *)&value);
  if (v18 == -6727) {
    goto LABEL_27;
  }
  uint64_t v12 = v18;
  if (v18)
  {
LABEL_36:
    APSLogErrorAt();
    goto LABEL_37;
  }
  CFRange v19 = value;
  CFDictionarySetValue(v7[10], @"serialNumber", value);
  if (v19)
  {
    CFRelease(v19);
    value = 0;
  }
LABEL_27:
  uint64_t v20 = APAdvertiserInfoCopyCFStringFromTXTRecord(@"v", a2, (CFStringRef *)&value);
  if (v20 == -6727)
  {
    uint64_t v12 = 0;
    goto LABEL_37;
  }
  uint64_t v12 = v20;
  if (v20) {
    goto LABEL_36;
  }
  uint64_t v21 = value;
  CFDictionarySetValue(v7[10], @"airPlayVersion", value);
  if (!v21) {
    goto LABEL_40;
  }
  uint64_t v12 = 0;
LABEL_38:
  CFRelease(v21);
LABEL_39:
  if (v12)
  {
    APSLogErrorAt();
    CFRelease(v7);
    if (!v8) {
      return v12;
    }
    goto LABEL_45;
  }
LABEL_40:
  if (gLogCategory_APAdvertiserInfo <= 30
    && (gLogCategory_APAdvertiserInfo != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v12 = 0;
  *a4 = v7;
  if (v8) {
LABEL_45:
  }
    CFRelease(v8);
  return v12;
}

uint64_t APAdvertiserInfoCopy(uint64_t a1, uint64_t a2, void *a3)
{
  CFTypeRef cf = 0;
  if (a2 && *(void *)(a2 + 80) && a3)
  {
    uint64_t v5 = APAdvertiserInfoCreate(a1, &cf);
    if (v5)
    {
      uint64_t v7 = v5;
      APSLogErrorAt();
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      CFStringRef v6 = cf;
      CFRelease(*((CFTypeRef *)cf + 10));
      pthread_mutex_lock((pthread_mutex_t *)(a2 + 16));
      v6[10] = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFDictionaryRef *)(a2 + 80));
      pthread_mutex_unlock((pthread_mutex_t *)(a2 + 16));
      uint64_t v7 = 0;
      *a3 = v6;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v7;
}

uint64_t APAdvertiserInfoCopyAirPlayData(uint64_t a1, CFDataRef *a2)
{
  return APAdvertiserInfoCopyAirPlayDataWithNANServiceType(a1, 0, a2);
}

uint64_t APAdvertiserInfoCopyAirPlayDataWithNANServiceType(uint64_t a1, unsigned int a2, CFDataRef *a3)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  TXTRecordRef txtRecord = 0uLL;
  CFStringRef v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  TXTRecordCreate(&txtRecord, 0x100u, buffer);
  if (!a3) {
    goto LABEL_104;
  }
  int Int64Ranged = CFDictionaryGetInt64Ranged();
  if (Int64Ranged)
  {
    uint8_t v8 = snprintf(__str, 0x100uLL, "%u", Int64Ranged);
    unsigned int v78 = TXTRecordSetValue(&txtRecord, "act", v8, __str);
    if (v78) {
      goto LABEL_134;
    }
  }
  int v9 = CFDictionaryGetInt64Ranged();
  uint8_t v10 = snprintf(__str, 0x100uLL, "%u", v9);
  unsigned int v78 = TXTRecordSetValue(&txtRecord, "acl", v10, __str);
  if (v78) {
    goto LABEL_134;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"bluetoothAddress");
  CFStringRef cf = Value;
  if (Value)
  {
    if (CFStringGetLength(Value))
    {
      unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cf, &txtRecord, "btaddr");
      if (v78) {
        goto LABEL_134;
      }
    }
  }
  CFStringRef v12 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"deviceID");
  unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(v12, &txtRecord, "deviceid");
  if (!v78)
  {
    CFStringGetTypeID();
    TypedCFStringRef Value = (const __CFString *)CFDictionaryGetTypedValue();
    CFStringRef cfa = TypedValue;
    if (TypedValue)
    {
      if (CFStringGetLength(TypedValue))
      {
        unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfa, &txtRecord, "c");
        if (v78) {
          goto LABEL_134;
        }
      }
    }
    if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"featuresEx"))
    {
      unsigned int v78 = APSFeaturesCopyStringRepresentation();
      if (v78) {
        goto LABEL_134;
      }
      unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfa, &txtRecord, "fex");
      CFRelease(cfa);
      if (v78) {
        goto LABEL_134;
      }
      uint64_t LegacyFlags = APSFeaturesGetLegacyFlags();
      uint8_t TXTRecordNumberCString = _APAdvertiserInfoGetTXTRecordNumberCString(LegacyFlags, __str);
      unsigned int v78 = TXTRecordSetValue(&txtRecord, "features", TXTRecordNumberCString, __str);
      if (v78) {
        goto LABEL_134;
      }
    }
    uint64_t Int64 = CFDictionaryGetInt64();
    if (Int64)
    {
      uint8_t v17 = _APAdvertiserInfoGetTXTRecordNumberCString(Int64, __str);
      unsigned int v78 = TXTRecordSetValue(&txtRecord, "rsf", v17, __str);
      if (v78) {
        goto LABEL_134;
      }
    }
    CFStringRef v18 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"firmwareVersion");
    CFStringRef cfb = v18;
    if (v18)
    {
      if (CFStringGetLength(v18))
      {
        unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfb, &txtRecord, "fv");
        if (v78) {
          goto LABEL_134;
        }
      }
    }
    int v19 = CFDictionaryGetInt64Ranged();
    if (v19)
    {
      uint8_t v20 = snprintf(__str, 0x100uLL, "0x%x", v19);
      unsigned int v78 = TXTRecordSetValue(&txtRecord, "flags", v20, __str);
      if (v78) {
        goto LABEL_134;
      }
    }
    CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"groupID");
    CFStringRef cfc = v21;
    if (v21)
    {
      if (CFStringGetLength(v21))
      {
        unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfc, &txtRecord, "gid");
        if (v78) {
          goto LABEL_134;
        }
        uint64_t v22 = CFDictionaryGetInt64();
        uint8_t v23 = snprintf(__str, 0x100uLL, "%u", v22 != 0);
        unsigned int v78 = TXTRecordSetValue(&txtRecord, "igl", v23, __str);
        if (v78) {
          goto LABEL_134;
        }
        uint64_t v24 = CFDictionaryGetInt64();
        uint8_t v25 = snprintf(__str, 0x100uLL, "%u", v24 != 0);
        unsigned int v78 = TXTRecordSetValue(&txtRecord, "gcgl", v25, __str);
        if (v78) {
          goto LABEL_134;
        }
        CFStringRef v26 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"groupPublicName");
        CFStringRef cfd = v26;
        if (v26)
        {
          if (CFStringGetLength(v26))
          {
            unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfd, &txtRecord, "gpn");
            if (v78) {
              goto LABEL_134;
            }
          }
        }
      }
    }
    if (a2 < 2)
    {
LABEL_34:
      int v28 = CFDictionaryGetInt64Ranged();
      uint8_t v29 = snprintf(__str, 0x100uLL, "%u", v28);
      unsigned int v78 = TXTRecordSetValue(&txtRecord, "psgsz", v29, __str);
      if (!v78)
      {
        int v30 = CFDictionaryGetInt64Ranged();
        uint8_t v31 = snprintf(__str, 0x100uLL, "%u", v30);
        unsigned int v78 = TXTRecordSetValue(&txtRecord, "psgtp", v31, __str);
        if (!v78)
        {
          CFStringRef v32 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"persistentGroupUUID");
          CFStringRef cfe = v32;
          if (!v32
            || !CFStringGetLength(v32)
            || (unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfe, &txtRecord, "psgid")) == 0)
          {
            CFStringRef v33 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"persistentGroupModel");
            CFStringRef cff = v33;
            if (!v33
              || !CFStringGetLength(v33)
              || (unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cff, &txtRecord, "pgm")) == 0)
            {
              CFStringRef v34 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"persistentGroupMemberID");
              CFStringRef cfg = v34;
              if (!v34
                || !CFStringGetLength(v34)
                || (unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfg, &txtRecord, "pgmid")) == 0)
              {
                CFStringRef v35 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"parentGroupID");
                CFStringRef cfh = v35;
                if (!v35
                  || !CFStringGetLength(v35)
                  || (unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfh, &txtRecord, "pgid")) == 0
                  && (uint64_t v36 = CFDictionaryGetInt64(),
                      uint8_t v37 = snprintf(__str, 0x100uLL, "%u", v36 != 0),
                      (unsigned int v78 = TXTRecordSetValue(&txtRecord, "pgcgl", v37, __str)) == 0))
                {
                  CFStringRef v38 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"tightSyncUUID");
                  cfuint64_t i = v38;
                  if (!v38
                    || !CFStringGetLength(v38)
                    || (unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfi, &txtRecord, "tsid")) == 0)
                  {
                    CFStringRef v39 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"tightSyncGroupModel");
                    CFStringRef cfj = v39;
                    if (!v39
                      || !CFStringGetLength(v39)
                      || (unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfj, &txtRecord, "tsm")) == 0)
                    {
                      CFStringRef v40 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"deviceModel");
                      CFStringRef cfk = v40;
                      if (!v40
                        || !CFStringGetLength(v40)
                        || (unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfk, &txtRecord, "model")) == 0)
                      {
                        CFStringRef v41 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"manufacturer");
                        CFStringRef cfl = v41;
                        if (!v41
                          || !CFStringGetLength(v41)
                          || (unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfl, &txtRecord, "manufacturer")) == 0)
                        {
                          CFStringRef v42 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"serialNumber");
                          CFStringRef cfm = v42;
                          if (!v42
                            || !CFStringGetLength(v42)
                            || (unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfm, &txtRecord, "serialNumber")) == 0)
                          {
                            int v43 = CFDictionaryGetInt64Ranged();
                            uint8_t v44 = snprintf(__str, 0x100uLL, "%u", v43);
                            unsigned int v78 = TXTRecordSetValue(&txtRecord, "at", v44, __str);
                            if (!v78)
                            {
                              unsigned int v78 = 0;
                              if (!CFDictionaryGetInt64() || (unsigned int v78 = TXTRecordSetValue(&txtRecord, "pw", 1u, "1")) == 0)
                              {
                                CFStringRef v45 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"protocolVersion");
                                CFStringRef cfn = v45;
                                if (!v45
                                  || !CFStringGetLength(v45)
                                  || (unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfn, &txtRecord, "protovers")) == 0)
                                {
                                  CFStringRef v46 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"publicCUAirPlayPairingIdentity");
                                  CFStringRef cfo = v46;
                                  if (!v46
                                    || !CFStringGetLength(v46)
                                    || (unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfo, &txtRecord, "pi")) == 0)
                                  {
                                    CFStringRef v47 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"publicCUSystemPairingIdentity");
                                    CFStringRef cfp = v47;
                                    if (!v47
                                      || !CFStringGetLength(v47)
                                      || (unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfp, &txtRecord, "psi")) == 0)
                                    {
                                      CFStringRef v48 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"publicKey");
                                      CFStringRef cfq = v48;
                                      if (!v48
                                        || !CFStringGetLength(v48)
                                        || (unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfq, &txtRecord, "pk")) == 0)
                                      {
                                        CFStringRef v49 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"airPlayVersion");
                                        CFStringRef cfr = v49;
                                        if (!v49
                                          || !CFStringGetLength(v49)
                                          || (unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfr, &txtRecord, "srcvers")) == 0)
                                        {
                                          CFStringRef v50 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"OSVersion");
                                          CFStringRef cfs = v50;
                                          if (!v50
                                            || !CFStringGetLength(v50)
                                            || (unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(cfs, &txtRecord, "osvers")) == 0)
                                          {
                                            int v51 = CFDictionaryGetInt64Ranged();
                                            if (!v51
                                              || (uint8_t v52 = snprintf(__str, 0x100uLL, "%u", v51),
                                                  (unsigned int v78 = TXTRecordSetValue(&txtRecord, "vv", v52, __str)) == 0))
                                            {
                                              BytesPtr = (const UInt8 *)TXTRecordGetBytesPtr(&txtRecord);
                                              unsigned int Length = TXTRecordGetLength(&txtRecord);
                                              CFDataRef v55 = CFDataCreate(0, BytesPtr, Length);
                                              if (v55)
                                              {
                                                *a3 = v55;
                                                goto LABEL_89;
                                              }
                                              APSLogErrorAt();
                                              int v57 = -6728;
LABEL_105:
                                              unsigned int v78 = v57;
                                              goto LABEL_89;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_134:
      APSLogErrorAt();
      goto LABEL_89;
    }
    CFStringRef TXTString = (const __CFString *)APSNANServiceTypeGetTXTString();
    if (TXTString)
    {
      unsigned int v78 = _APAdvertiserInfoAddStringToTXTRecord(TXTString, &txtRecord, "nanST");
      if (v78) {
        goto LABEL_134;
      }
      goto LABEL_34;
    }
LABEL_104:
    APSLogErrorAt();
    int v57 = -6705;
    goto LABEL_105;
  }
  APSLogErrorAt();
  if (gLogCategory_APAdvertiserInfo <= 40
    && (gLogCategory_APAdvertiserInfo != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_89:
  TXTRecordDeallocate(&txtRecord);
  pthread_mutex_unlock(v6);
  return v78;
}

uint64_t _APAdvertiserInfoAddStringToTXTRecord(const __CFString *a1, TXTRecordRef *a2, const char *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1 && CFStringGetLength(a1))
  {
    buffer[0] = 0;
    if (CFStringGetCString(a1, buffer, 256, 0x8000100u))
    {
      uint8_t v6 = strlen(buffer);
      uint64_t v7 = TXTRecordSetValue(a2, a3, v6, buffer);
      if (v7) {
        APSLogErrorAt();
      }
    }
    else
    {
      APSLogErrorAt();
      return 4294960559;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v7;
}

uint64_t _APAdvertiserInfoGetTXTRecordNumberCString(uint64_t a1, char *__str)
{
  if (HIDWORD(a1)) {
    return snprintf(__str, 0x100uLL, "0x%X,0x%X");
  }
  else {
    return snprintf(__str, 0x100uLL, "0x%X");
  }
}

uint64_t APAdvertiserInfoCopyClusterCompatibleAirPlayData(uint64_t a1, int a2, CFDataRef *a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  TXTRecordRef txtRecord = 0uLL;
  uint8_t v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  TXTRecordCreate(&txtRecord, 0x100u, buffer);
  if (!a3)
  {
    APSLogErrorAt();
    int v47 = -6705;
LABEL_75:
    unsigned int v60 = v47;
    goto LABEL_68;
  }
  int Int64Ranged = CFDictionaryGetInt64Ranged();
  uint8_t v8 = snprintf(__str, 0x100uLL, "%u", Int64Ranged);
  unsigned int v60 = TXTRecordSetValue(&txtRecord, "acl", v8, __str);
  if (v60)
  {
    APSLogErrorAt();
    goto LABEL_68;
  }
  if (!CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"featuresEx"))
  {
    uint64_t v10 = 0;
    goto LABEL_12;
  }
  uint64_t MutableCopy = APSFeaturesCreateMutableCopy();
  if (!MutableCopy)
  {
    APSLogErrorAt();
    int v47 = -6728;
    goto LABEL_75;
  }
  uint64_t v10 = (const void *)MutableCopy;
  if (a2 == 2)
  {
    APSFeaturesSetFeature();
    APSFeaturesSetFeature();
    APSFeaturesSetFeature();
    APSFeaturesSetFeature();
  }
  unsigned int v60 = APSFeaturesCopyStringRepresentation();
  if (v60
    || (unsigned int v60 = _APAdvertiserInfoAddStringToTXTRecord(0, &txtRecord, "fex"), CFRelease(0), v60)
    || (uint64_t LegacyFlags = APSFeaturesGetLegacyFlags(),
        uint8_t TXTRecordNumberCString = _APAdvertiserInfoGetTXTRecordNumberCString(LegacyFlags, __str),
        (unsigned int v60 = TXTRecordSetValue(&txtRecord, "features", TXTRecordNumberCString, __str)) != 0))
  {
    APSLogErrorAt();
    goto LABEL_67;
  }
LABEL_12:
  uint64_t Int64 = CFDictionaryGetInt64();
  if (Int64)
  {
    uint8_t v14 = _APAdvertiserInfoGetTXTRecordNumberCString(Int64, __str);
    unsigned int v60 = TXTRecordSetValue(&txtRecord, "rsf", v14, __str);
    if (v60) {
      goto LABEL_77;
    }
  }
  int v15 = CFDictionaryGetInt64Ranged();
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"tightSyncUUID")
    && !CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"persistentGroupUUID"))
  {
    int v16 = 0x2000;
  }
  else
  {
    int v16 = -8969;
  }
  int v17 = v16 & v15;
  if (v17)
  {
    uint8_t v18 = snprintf(__str, 0x100uLL, "0x%x", v17);
    unsigned int v60 = TXTRecordSetValue(&txtRecord, "flags", v18, __str);
    if (v60) {
      goto LABEL_77;
    }
  }
  CFDictionaryRef v19 = *(const __CFDictionary **)(a1 + 80);
  if (a2 != 1)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v19, @"persistentGroupUUID");
    CFStringRef cfb = Value;
    if (Value && CFStringGetLength(Value))
    {
      unsigned int v60 = _APAdvertiserInfoAddStringToTXTRecord(cfb, &txtRecord, "psgid");
      if (v60) {
        goto LABEL_77;
      }
      int v23 = CFDictionaryGetInt64Ranged();
      uint8_t v24 = snprintf(__str, 0x100uLL, "%u", v23);
      unsigned int v60 = TXTRecordSetValue(&txtRecord, "psgsz", v24, __str);
      if (v60) {
        goto LABEL_77;
      }
      int v25 = CFDictionaryGetInt64Ranged();
      uint8_t v26 = snprintf(__str, 0x100uLL, "%u", v25);
      unsigned int v60 = TXTRecordSetValue(&txtRecord, "psgtp", v26, __str);
      if (v60) {
        goto LABEL_77;
      }
      CFStringRef v27 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"persistentGroupModel");
      CFStringRef cfc = v27;
      if (v27)
      {
        if (CFStringGetLength(v27))
        {
          unsigned int v60 = _APAdvertiserInfoAddStringToTXTRecord(cfc, &txtRecord, "pgm");
          if (v60) {
            goto LABEL_77;
          }
        }
      }
      goto LABEL_38;
    }
LABEL_71:
    APSLogErrorAt();
    int v48 = -6705;
    goto LABEL_73;
  }
  CFStringRef v20 = (const __CFString *)CFDictionaryGetValue(v19, @"tightSyncUUID");
  CFStringRef cf = v20;
  if (!v20 || !CFStringGetLength(v20)) {
    goto LABEL_71;
  }
  unsigned int v60 = _APAdvertiserInfoAddStringToTXTRecord(cf, &txtRecord, "tsid");
  if (!v60)
  {
    CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"tightSyncGroupModel");
    CFStringRef cfa = v21;
    if (!v21 || !CFStringGetLength(v21) || (unsigned int v60 = _APAdvertiserInfoAddStringToTXTRecord(cfa, &txtRecord, "tsm")) == 0)
    {
LABEL_38:
      CFStringRef v28 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"groupID");
      CFStringRef cfd = v28;
      if (v28)
      {
        if (CFStringGetLength(v28))
        {
          unsigned int v60 = _APAdvertiserInfoAddStringToTXTRecord(cfd, &txtRecord, "gid");
          if (v60) {
            goto LABEL_77;
          }
          uint64_t v29 = CFDictionaryGetInt64();
          uint8_t v30 = snprintf(__str, 0x100uLL, "%u", v29 != 0);
          unsigned int v60 = TXTRecordSetValue(&txtRecord, "igl", v30, __str);
          if (v60) {
            goto LABEL_77;
          }
          uint64_t v31 = CFDictionaryGetInt64();
          uint8_t v32 = snprintf(__str, 0x100uLL, "%u", v31 != 0);
          unsigned int v60 = TXTRecordSetValue(&txtRecord, "gcgl", v32, __str);
          if (v60) {
            goto LABEL_77;
          }
          CFStringRef v33 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"groupPublicName");
          CFStringRef cfe = v33;
          if (v33)
          {
            if (CFStringGetLength(v33))
            {
              unsigned int v60 = _APAdvertiserInfoAddStringToTXTRecord(cfe, &txtRecord, "gpn");
              if (v60) {
                goto LABEL_77;
              }
            }
          }
        }
      }
      CFStringRef v34 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"parentGroupID");
      CFStringRef cff = v34;
      if (v34)
      {
        if (CFStringGetLength(v34))
        {
          unsigned int v60 = _APAdvertiserInfoAddStringToTXTRecord(cff, &txtRecord, "pgid");
          if (v60) {
            goto LABEL_77;
          }
          uint64_t v35 = CFDictionaryGetInt64();
          uint8_t v36 = snprintf(__str, 0x100uLL, "%u", v35 != 0);
          unsigned int v60 = TXTRecordSetValue(&txtRecord, "pgcgl", v36, __str);
          if (v60) {
            goto LABEL_77;
          }
        }
      }
      CFStringRef v37 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"deviceModel");
      CFStringRef cfg = v37;
      if (v37)
      {
        if (CFStringGetLength(v37))
        {
          unsigned int v60 = _APAdvertiserInfoAddStringToTXTRecord(cfg, &txtRecord, "model");
          if (v60) {
            goto LABEL_77;
          }
        }
      }
      CFStringRef v38 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"protocolVersion");
      CFStringRef cfh = v38;
      if (v38)
      {
        if (CFStringGetLength(v38))
        {
          unsigned int v60 = _APAdvertiserInfoAddStringToTXTRecord(cfh, &txtRecord, "protovers");
          if (v60) {
            goto LABEL_77;
          }
        }
      }
      CFStringRef v39 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"airPlayVersion");
      cfuint64_t i = v39;
      if (v39)
      {
        if (CFStringGetLength(v39))
        {
          unsigned int v60 = _APAdvertiserInfoAddStringToTXTRecord(cfi, &txtRecord, "srcvers");
          if (v60) {
            goto LABEL_77;
          }
        }
      }
      CFStringRef v40 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"OSVersion");
      CFStringRef cfj = v40;
      if (v40)
      {
        if (CFStringGetLength(v40))
        {
          unsigned int v60 = _APAdvertiserInfoAddStringToTXTRecord(cfj, &txtRecord, "osvers");
          if (v60) {
            goto LABEL_77;
          }
        }
      }
      int v41 = CFDictionaryGetInt64Ranged();
      if (v41)
      {
        uint8_t v42 = snprintf(__str, 0x100uLL, "%u", v41);
        unsigned int v60 = TXTRecordSetValue(&txtRecord, "vv", v42, __str);
        if (v60) {
          goto LABEL_77;
        }
      }
      BytesPtr = (const UInt8 *)TXTRecordGetBytesPtr(&txtRecord);
      unsigned int Length = TXTRecordGetLength(&txtRecord);
      CFDataRef v45 = CFDataCreate(0, BytesPtr, Length);
      if (v45)
      {
        *a3 = v45;
        goto LABEL_66;
      }
      APSLogErrorAt();
      int v48 = -6728;
LABEL_73:
      unsigned int v60 = v48;
      goto LABEL_66;
    }
  }
LABEL_77:
  APSLogErrorAt();
LABEL_66:
  if (v10) {
LABEL_67:
  }
    CFRelease(v10);
LABEL_68:
  TXTRecordDeallocate(&txtRecord);
  pthread_mutex_unlock(v6);
  return v60;
}

uint64_t APAdvertiserInfoCopyAirPlayP2PData(uint64_t a1, CFDataRef *a2)
{
  return APAdvertiserInfoCopyAirPlayP2PDataWithNANServiceType(a1, 0, a2);
}

uint64_t APAdvertiserInfoCopyAirPlayP2PDataWithNANServiceType(uint64_t a1, int a2, CFDataRef *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  TXTRecordRef txtRecord = 0uLL;
  uint8_t v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  TXTRecordCreate(&txtRecord, 0x100u, buffer);
  if (!a3) {
    goto LABEL_14;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"deviceID");
  uint64_t v8 = _APAdvertiserInfoAddStringToTXTRecord(Value, &txtRecord, "deviceid");
  if (!v8)
  {
    if (!a2)
    {
LABEL_6:
      BytesPtr = (const UInt8 *)TXTRecordGetBytesPtr(&txtRecord);
      unsigned int Length = TXTRecordGetLength(&txtRecord);
      CFDataRef v13 = CFDataCreate(0, BytesPtr, Length);
      if (v13)
      {
        uint64_t v14 = 0;
        *a3 = v13;
      }
      else
      {
        APSLogErrorAt();
        uint64_t v14 = 4294960568;
      }
      goto LABEL_8;
    }
    CFStringRef TXTString = (const __CFString *)APSNANServiceTypeGetTXTString();
    if (TXTString)
    {
      uint64_t v10 = _APAdvertiserInfoAddStringToTXTRecord(TXTString, &txtRecord, "nanST");
      if (v10)
      {
        uint64_t v14 = v10;
        APSLogErrorAt();
        goto LABEL_8;
      }
      goto LABEL_6;
    }
LABEL_14:
    APSLogErrorAt();
    uint64_t v14 = 4294960591;
    goto LABEL_8;
  }
  uint64_t v14 = v8;
  APSLogErrorAt();
  if (gLogCategory_APAdvertiserInfo <= 40
    && (gLogCategory_APAdvertiserInfo != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_8:
  TXTRecordDeallocate(&txtRecord);
  pthread_mutex_unlock(v6);
  return v14;
}

uint64_t APAdvertiserInfoCreateAirPlayServiceName(uint64_t a1, void *a2)
{
  if (!a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  if (!a1) {
    return 4294960591;
  }
  CFTypeID v4 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"deviceName");
  uint8_t v6 = Value;
  if (Value) {
    CFRetain(Value);
  }
  pthread_mutex_unlock(v4);
  uint64_t result = 0;
  *a2 = v6;
  return result;
}

uint64_t APAdvertiserInfoCopyRAOPData(uint64_t a1, CFDataRef *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  TXTRecordRef txtRecord = 0uLL;
  CFTypeID v4 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  TXTRecordCreate(&txtRecord, 0x100u, buffer);
  if (!a2)
  {
    APSLogErrorAt();
    int v27 = -6705;
    goto LABEL_46;
  }
  CFDictionaryGetInt64Ranged();
  BitListString_Make();
  unsigned int v28 = TXTRecordSetValue(&txtRecord, "cn", 0, value);
  if (v28) {
    goto LABEL_47;
  }
  if (CFDictionaryGetInt64())
  {
    unsigned int v28 = TXTRecordSetValue(&txtRecord, "da", 4u, "true");
    if (v28) {
      goto LABEL_47;
    }
  }
  CFDictionaryGetInt64Ranged();
  BitListString_Make();
  unsigned int v28 = TXTRecordSetValue(&txtRecord, "et", 0, value);
  if (v28) {
    goto LABEL_47;
  }
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"featuresEx"))
  {
    uint64_t LegacyFlags = APSFeaturesGetLegacyFlags();
    uint8_t TXTRecordNumberCString = _APAdvertiserInfoGetTXTRecordNumberCString(LegacyFlags, value);
    TXTRecordSetValue(&txtRecord, "ft", TXTRecordNumberCString, value);
  }
  CFStringRef v7 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"firmwareVersion");
  if (v7)
  {
    CFStringRef v8 = v7;
    if (CFStringGetLength(v7))
    {
      unsigned int v28 = _APAdvertiserInfoAddStringToTXTRecord(v8, &txtRecord, "fv");
      if (v28) {
        goto LABEL_47;
      }
    }
  }
  int Int64Ranged = CFDictionaryGetInt64Ranged();
  if (Int64Ranged)
  {
    uint8_t v10 = snprintf(value, 0x100uLL, "0x%x", Int64Ranged);
    unsigned int v28 = TXTRecordSetValue(&txtRecord, "sf", v10, value);
    if (v28) {
      goto LABEL_47;
    }
  }
  if (CFDictionaryGetInt64Ranged())
  {
    BitListString_Make();
    unsigned int v28 = TXTRecordSetValue(&txtRecord, "md", 0, value);
    if (v28) {
      goto LABEL_47;
    }
  }
  if ((CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"deviceModel")) != 0
    && (CFStringRef v12 = v11, CFStringGetLength(v11))
    && (unsigned int v28 = _APAdvertiserInfoAddStringToTXTRecord(v12, &txtRecord, "am")) != 0
    || CFDictionaryGetInt64() && (unsigned int v28 = TXTRecordSetValue(&txtRecord, "pw", 4u, "true")) != 0
    || (CFStringRef v13 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"publicKey")) != 0
    && (CFStringRef v14 = v13, CFStringGetLength(v13))
    && (unsigned int v28 = _APAdvertiserInfoAddStringToTXTRecord(v14, &txtRecord, "pk")) != 0)
  {
LABEL_47:
    APSLogErrorAt();
    goto LABEL_34;
  }
  CFStringRef v15 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"transportTypes");
  unsigned int v28 = _APAdvertiserInfoAddStringToTXTRecord(v15, &txtRecord, "tp");
  if (v28)
  {
    APSLogErrorAt();
    if (gLogCategory_APAdvertiserInfo <= 40
      && (gLogCategory_APAdvertiserInfo != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_43;
    }
  }
  else
  {
    CFStringRef v16 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"airTunesProtocolVersion");
    unsigned int v28 = _APAdvertiserInfoAddStringToTXTRecord(v16, &txtRecord, "vn");
    if (!v28)
    {
      CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"airPlayVersion");
      if (!v17
        || (CFStringRef v18 = v17, !CFStringGetLength(v17))
        || (unsigned int v28 = _APAdvertiserInfoAddStringToTXTRecord(v18, &txtRecord, "vs")) == 0)
      {
        CFStringRef v19 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"OSVersion");
        if (!v19
          || (CFStringRef v20 = v19, !CFStringGetLength(v19))
          || (unsigned int v28 = _APAdvertiserInfoAddStringToTXTRecord(v20, &txtRecord, "ov")) == 0)
        {
          int v21 = CFDictionaryGetInt64Ranged();
          uint8_t v22 = snprintf(value, 0x100uLL, "%u", v21);
          unsigned int v28 = TXTRecordSetValue(&txtRecord, "vv", v22, value);
          if (!v28)
          {
            BytesPtr = (const UInt8 *)TXTRecordGetBytesPtr(&txtRecord);
            unsigned int Length = TXTRecordGetLength(&txtRecord);
            CFDataRef v25 = CFDataCreate(0, BytesPtr, Length);
            if (v25)
            {
              *a2 = v25;
              goto LABEL_34;
            }
            APSLogErrorAt();
            int v27 = -6728;
LABEL_46:
            unsigned int v28 = v27;
            goto LABEL_34;
          }
        }
      }
      goto LABEL_47;
    }
    APSLogErrorAt();
    if (gLogCategory_APAdvertiserInfo <= 40
      && (gLogCategory_APAdvertiserInfo != -1 || _LogCategory_Initialize()))
    {
LABEL_43:
      LogPrintF();
    }
  }
LABEL_34:
  TXTRecordDeallocate(&txtRecord);
  pthread_mutex_unlock(v4);
  return v28;
}

uint64_t APAdvertiserInfoCreateRAOPServiceName(uint64_t a1, __CFString **a2)
{
  CFTypeID v4 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"deviceID");
  CFStringRef v6 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), @"deviceName");
  if (Value) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    APSLogErrorAt();
LABEL_12:
    uint64_t v12 = 4294960534;
    goto LABEL_8;
  }
  CFStringRef v8 = v6;
  CFIndex Length = CFStringGetLength(Value);
  CFStringRef MutableCopy = CFStringCreateMutableCopy(0, Length, Value);
  if (!MutableCopy)
  {
    APSLogErrorAt();
    uint64_t v12 = 4294960568;
    goto LABEL_8;
  }
  CFStringRef v11 = (__CFString *)MutableCopy;
  v14.length = CFStringGetLength(MutableCopy);
  v14.location = 0;
  if (CFStringFindAndReplace(v11, @":", &stru_1F26C6780, v14, 0) != 5)
  {
    APSLogErrorAt();
    CFRelease(v11);
    goto LABEL_12;
  }
  CFStringAppend(v11, @"@");
  CFStringAppend(v11, v8);
  uint64_t v12 = 0;
  *a2 = v11;
LABEL_8:
  pthread_mutex_unlock(v4);
  return v12;
}

uint64_t APAdvertiserInfoDebugShow(uint64_t a1, int a2, uint64_t a3)
{
  if (a3 && a1)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
    DataBuffer_AppendF();
    uint64_t v5 = *(const void **)(a1 + 80);
    if (a2)
    {
      CFStringRef v6 = CFCopyDescription(v5);
      DataBuffer_AppendF();
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
      if (v6) {
        CFRelease(v6);
      }
    }
    else
    {
      CFDictionaryGetValue((CFDictionaryRef)v5, @"deviceName");
      DataBuffer_AppendF();
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
    }
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

__CFDictionary *APAdvertiserInfoCreateTestInfoDictionary()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (IsAppleInternalBuild())
  {
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    CFDictionarySetValue(Mutable, @"bluetoothAddress", @"AA:BB:CC:DD:EE:FF");
    CFDictionarySetValue(Mutable, @"deviceName", @"Name me, please");
    CFDictionarySetValue(Mutable, @"deviceID", @"FF:FF:FF:FF:FF:FF");
    _APAdvertiserInfoSetLegacyFeatures(Mutable);
    CFDictionarySetInt64();
    CFDictionarySetValue(Mutable, @"deviceModel", @"AppleTV5,3");
    CFDictionarySetValue(Mutable, @"deviceEnclosureColor", @"1");
    CFDictionarySetValue(Mutable, @"manufacturer", @"Apple");
    CFDictionarySetValue(Mutable, @"serialNumber", @"ABCD7890WXYZ");
    CFDictionarySetValue(Mutable, @"password", (const void *)*MEMORY[0x1E4F1CFC8]);
    APSVersionUtilsGetShortVersionLength();
    CFDictionarySetCString();
    CFDictionarySetValue(Mutable, @"OSVersion", @"7.2");
    CFStringRef v2 = CFStringCreateWithFormat(v0, 0, @"%u", 65537);
    CFDictionarySetValue(Mutable, @"airTunesProtocolVersion", v2);
    CFRelease(v2);
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    CFDictionarySetValue(Mutable, @"rfc2617DigestAuthKey", (const void *)*MEMORY[0x1E4F1CFD0]);
    CFDictionarySetValue(Mutable, @"transportTypes", @"UDP");
  }
  else
  {
    APSLogErrorAt();
  }
  return Mutable;
}

uint64_t _APAdvertiserInfoSetLegacyFeatures(const __CFDictionary *a1)
{
  CFDictionarySetInt64();
  if (CFDictionaryGetValue(a1, @"featuresEx")) {
    uint64_t MutableCopy = APSFeaturesCreateMutableCopy();
  }
  else {
    uint64_t MutableCopy = APSFeaturesCreateMutable();
  }
  CFDataRef v3 = (const void *)MutableCopy;
  if (MutableCopy)
  {
    APSFeaturesSetLegacyFlags();
    CFDictionarySetValue(a1, @"featuresEx", v3);
    CFRelease(v3);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960568;
  }
}

uint64_t APAdvertiserInfoFinalize(uint64_t a1)
{
  CFStringRef v2 = *(const void **)(a1 + 80);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 80) = 0;
  }
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 16));
}

uint64_t _APAdvertiserInfoCompare(uint64_t a1, uint64_t a2)
{
  if (a1 | a2)
  {
    if (a1 && a2)
    {
      CFStringRef v2 = *(const void **)(a1 + 80);
      CFDataRef v3 = *(const void **)(a2 + 80);
      return CFEqual(v2, v3);
    }
    else
    {
      APSLogErrorAt();
      return 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 1;
  }
}

CFStringRef APAdvertiserInfoCopyDescription(uint64_t a1)
{
  CFStringRef v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  CFStringRef v3 = CFCopyDescription(*(CFTypeRef *)(a1 + 80));
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t APAdvertiserInfoGetInt64FromTXTRecord(const __CFString *a1, const void *a2, uint64_t *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      BOOL v7 = Mutable;
      CFDictionarySetValue(Mutable, @"txt", a2);
      buffer[0] = 0;
      CFStringGetCString(a1, buffer, 256, 0x8000100u);
      *a3 = BonjourDevice_GetInt64();
      CFRelease(v7);
      return 0;
    }
    else
    {
      APSLogErrorAt();
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

uint64_t APAdvertiserInfoCopyCFStringFromTXTRecord(const __CFString *a1, CFDataRef theData, CFStringRef *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1 && theData)
  {
    uint8_t valueLen = 0;
    BytePtr = CFDataGetBytePtr(theData);
    uint16_t Length = CFDataGetLength(theData);
    buffer[0] = 0;
    CFStringGetCString(a1, buffer, 256, 0x8000100u);
    ValuePtr = (const char *)TXTRecordGetValuePtr(Length, BytePtr, buffer, &valueLen);
    if (ValuePtr)
    {
      int v9 = (const UInt8 *)ValuePtr;
      uint8_t valueLen = strnlen(ValuePtr, valueLen);
      CFStringRef v10 = CFStringCreateWithBytes(0, v9, valueLen, 0x8000100u, 0);
      if (v10)
      {
        CFStringRef v11 = v10;
        uint64_t result = 0;
        *a3 = v11;
      }
      else
      {
        APSLogErrorAt();
        return 4294960554;
      }
    }
    else
    {
      return 4294960569;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return result;
}

uint64_t APAdvertiserInfoGetBooleanFromTXTRecord(const __CFString *a1, const void *a2, BOOL *a3)
{
  uint64_t v7 = 0;
  uint64_t Int64FromTXTRecord = APAdvertiserInfoGetInt64FromTXTRecord(a1, a2, &v7);
  uint64_t v5 = Int64FromTXTRecord;
  if (Int64FromTXTRecord != -6727)
  {
    if (Int64FromTXTRecord) {
      APSLogErrorAt();
    }
    else {
      *a3 = v7 != 0;
    }
  }
  return v5;
}

uint64_t APAdvertiserInfoCreateAPSFeaturesFromTXTRecordEx(CFDataRef theData, const __CFString *a2, const __CFString *a3, void *a4)
{
  CFTypeRef cf = 0;
  uint64_t v11 = 0;
  unsigned int v7 = APAdvertiserInfoCopyCFStringFromTXTRecord(a2, theData, (CFStringRef *)&cf);
  unsigned int Int64FromTXTRecord = v7;
  if (v7 == -6727)
  {
    if (!a3) {
      goto LABEL_11;
    }
    unsigned int Int64FromTXTRecord = APAdvertiserInfoGetInt64FromTXTRecord(a3, theData, &v11);
    if (!Int64FromTXTRecord)
    {
      CFStringRef v8 = (const void *)APSFeaturesCreateFromLegacyFlags();
      if (!v8)
      {
        APSLogErrorAt();
        unsigned int Int64FromTXTRecord = -6728;
        goto LABEL_11;
      }
LABEL_9:
      *a4 = v8;
      goto LABEL_11;
    }
LABEL_10:
    APSLogErrorAt();
    goto LABEL_11;
  }
  if (v7) {
    goto LABEL_10;
  }
  CFStringRef v8 = (const void *)APSFeaturesCreateFromStringRepresentation();
  if (!Int64FromTXTRecord) {
    goto LABEL_9;
  }
  APSLogErrorAt();
  if (v8) {
    CFRelease(v8);
  }
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  return Int64FromTXTRecord;
}

uint64_t APAdvertiserInfoGetBitListValueFromTXTRecord(const __CFString *a1, CFDataRef theData, _DWORD *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFDataRef v4 = theData;
    int v10 = 0;
    uint8_t valueLen = 0;
    BytePtr = CFDataGetBytePtr(theData);
    LOWORD(v4) = CFDataGetLength(v4);
    buffer[0] = 0;
    CFStringGetCString(a1, buffer, 256, 0x8000100u);
    if (TXTRecordGetValuePtr((uint16_t)v4, BytePtr, buffer, &valueLen))
    {
      uint64_t v7 = BitListString_Parse();
      if (v7) {
        APSLogErrorAt();
      }
      else {
        *a3 = v10;
      }
    }
    else
    {
      return 4294960569;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v7;
}

uint64_t APBonjourBrowserGetTypeID()
{
  if (gAPBonjourBrowserInitOnce != -1) {
    dispatch_once_f(&gAPBonjourBrowserInitOnce, 0, (dispatch_function_t)_APBonjourBrowserGetTypeID);
  }
  return gAPBonjourBrowserTypeID;
}

uint64_t _APBonjourBrowserGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPBonjourBrowserTypeID = result;
  return result;
}

uint64_t APBonjourBrowserCreate(uint64_t a1, uint64_t a2, void *a3)
{
  if (gAPBonjourBrowserInitOnce != -1) {
    dispatch_once_f(&gAPBonjourBrowserInitOnce, 0, (dispatch_function_t)_APBonjourBrowserGetTypeID);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    uint64_t v23 = 4294895086;
    APSLogErrorAt();
    return v23;
  }
  CFStringRef v6 = Instance;
  Instance[13] = 0u;
  Instance[14] = 0u;
  Instance[11] = 0u;
  Instance[12] = 0u;
  Instance[9] = 0u;
  Instance[10] = 0u;
  Instance[7] = 0u;
  Instance[8] = 0u;
  Instance[5] = 0u;
  Instance[6] = 0u;
  Instance[3] = 0u;
  Instance[4] = 0u;
  Instance[1] = 0u;
  Instance[2] = 0u;
  dispatch_queue_t v7 = dispatch_queue_create("APBonjourBrowserInternalQueue", 0);
  *((void *)v6 + 2) = v7;
  if (!v7)
  {
    uint64_t v23 = 4294895086;
    goto LABEL_65;
  }
  dispatch_queue_t v8 = dispatch_queue_create("APBonjourBrowserEventQueue", 0);
  *((void *)v6 + 3) = v8;
  if (!v8)
  {
    uint64_t v23 = 4294895086;
    goto LABEL_65;
  }
  if (a2)
  {
    __int16 Int64 = CFDictionaryGetInt64();
    *((unsigned char *)v6 + 114) = CFDictionaryGetInt64() != 0;
    *((unsigned char *)v6 + 129) = CFDictionaryGetInt64() != 0;
    *((unsigned char *)v6 + 160) = CFDictionaryGetInt64() != 0;
    *((unsigned char *)v6 + 208) = CFDictionaryGetInt64() != 0;
    *((unsigned char *)v6 + 176) = CFDictionaryGetInt64() != 0;
    *((unsigned char *)v6 + 192) = CFDictionaryGetInt64() != 0;
    BOOL v10 = CFDictionaryGetInt64() != 0;
    *((unsigned char *)v6 + 210) = CFDictionaryGetInt64() != 0;
  }
  else
  {
    __int16 Int64 = 0;
    BOOL v10 = 0;
  }
  if (gLogCategory_APBonjourBrowser <= 50
    && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v11 = 0x800000000000000;
  uint64_t v12 = @"SidePlay";
  CFStringRef v13 = "_airplay._tcp.";
  if (Int64 == 1) {
    CFStringRef v13 = "_sideplay._tcp.";
  }
  else {
    uint64_t v12 = @"AirPlay";
  }
  if (Int64 != 1) {
    uint64_t v11 = 0;
  }
  *((void *)v6 + 8) = v13;
  *((void *)v6 + 9) = "local.";
  *((void *)v6 + 10) = v12;
  *((void *)v6 + 11) = v11;
  uint64_t v14 = BonjourBrowser_CreateEx();
  if (v14)
  {
    uint64_t v23 = v14;
    goto LABEL_65;
  }
  BonjourBrowser_SetDispatchQueue();
  BonjourBrowser_SetEventHandler();
  if (v10)
  {
    uint64_t v15 = BonjourBrowser_CreateEx();
    if (v15)
    {
      uint64_t v23 = v15;
      goto LABEL_65;
    }
    BonjourBrowser_SetDispatchQueue();
    BonjourBrowser_SetEventHandler();
  }
  if (*((unsigned char *)v6 + 129))
  {
    uint64_t v16 = BonjourBrowser_CreateEx();
    if (v16)
    {
      uint64_t v23 = v16;
      goto LABEL_65;
    }
    BonjourBrowser_SetDispatchQueue();
    BonjourBrowser_SetEventHandler();
  }
  if (*((unsigned char *)v6 + 114))
  {
    uint64_t v17 = BonjourBrowser_CreateEx();
    if (v17)
    {
      uint64_t v23 = v17;
      goto LABEL_65;
    }
    BonjourBrowser_SetDispatchQueue();
    BonjourBrowser_SetEventHandler();
    if (*((unsigned char *)v6 + 129))
    {
      uint64_t v18 = BonjourBrowser_CreateEx();
      if (v18)
      {
        uint64_t v23 = v18;
        goto LABEL_65;
      }
      BonjourBrowser_SetDispatchQueue();
      BonjourBrowser_SetEventHandler();
    }
  }
  if (*((unsigned char *)v6 + 160))
  {
    uint64_t v19 = BonjourBrowser_CreateEx();
    if (v19)
    {
      uint64_t v23 = v19;
      goto LABEL_65;
    }
    BonjourBrowser_SetDispatchQueue();
    BonjourBrowser_SetEventHandler();
  }
  if (*((unsigned char *)v6 + 176))
  {
    uint64_t v20 = BonjourBrowser_CreateEx();
    if (v20)
    {
      uint64_t v23 = v20;
      goto LABEL_65;
    }
    BonjourBrowser_SetDispatchQueue();
    BonjourBrowser_SetEventHandler();
  }
  if (*((unsigned char *)v6 + 192))
  {
    uint64_t v21 = BonjourBrowser_CreateEx();
    if (!v21)
    {
      BonjourBrowser_SetDispatchQueue();
      BonjourBrowser_SetEventHandler();
      BonjourBrowser_SetNANControlFlags();
      goto LABEL_39;
    }
    uint64_t v23 = v21;
LABEL_65:
    APSLogErrorAt();
    CFRelease(v6);
    return v23;
  }
LABEL_39:
  *((unsigned char *)v6 + 209) = 1;
  char v25 = *((unsigned char *)v6 + 210);
  if (IsAppleInternalBuild()) {
    APSSettingsGetBooleanIfPresent();
  }
  if (gLogCategory_APBonjourBrowser <= 30
    && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v25 && !*((void *)v6 + 29))
  {
    if (gLogCategory_APBonjourBrowser <= 50
      && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint8_t v22 = objc_alloc_init(APBonjourCacheManager);
    *((void *)v6 + 29) = v22;
    [(APBonjourCacheManager *)v22 setDispatchQueue:*((void *)v6 + 2)];
    [(APBonjourCacheManager *)v22 setServiceType:*((void *)v6 + 10)];
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    _OWORD v28[2] = ___APBonjourBrowserCacheEnsureStarted_block_invoke;
    v28[3] = &unk_1E688B378;
    v28[4] = v22;
    v28[5] = v6;
    [(APBonjourCacheManager *)v22 setReportDeviceFoundHandler:v28];
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___APBonjourBrowserCacheEnsureStarted_block_invoke_2;
    v27[3] = &unk_1E688B378;
    v27[4] = v22;
    v27[5] = v6;
    [(APBonjourCacheManager *)v22 setReportDeviceLostHandler:v27];
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    socklen_t v26[2] = ___APBonjourBrowserCacheEnsureStarted_block_invoke_3;
    v26[3] = &unk_1E688B3A0;
    v26[4] = v22;
    v26[5] = v6;
    [(APBonjourCacheManager *)v22 activateWithCompletion:v26];
  }
  uint64_t v23 = 0;
  *a3 = v6;
  return v23;
}

void _APBonjourBrowserHandleAirPlayEvent(int a1, CFDictionaryRef theDict, uint64_t a3)
{
  if (a3)
  {
    if (gLogCategory_APBonjourBrowser <= 30
      && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    switch(a1)
    {
      case 1:
        if (!*(_WORD *)(a3 + 40)) {
          return;
        }
        if (theDict && *(void *)(a3 + 232))
        {
          CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
          if (MutableCopy)
          {
            [*(id *)(a3 + 232) deviceFound:MutableCopy];
            theDict = MutableCopy;
          }
        }
        else
        {
          CFDictionaryRef MutableCopy = 0;
        }
        if (_APBonjourBrowserHandleDeviceEvent((const void *)a3, 0, theDict, *(const void **)(a3 + 80)))
        {
          APSLogErrorAt();
          if (MutableCopy) {
            goto LABEL_30;
          }
        }
        else if (MutableCopy)
        {
LABEL_30:
          dispatch_queue_t v8 = MutableCopy;
          goto LABEL_36;
        }
        break;
      case 2:
        if (*(_WORD *)(a3 + 40))
        {
          if (!theDict || (dispatch_queue_t v7 = *(void **)(a3 + 232)) == 0 || ([v7 deviceLost:theDict] & 1) == 0)
          {
            if (_APBonjourBrowserHandleDeviceEvent((const void *)a3, 1, theDict, *(const void **)(a3 + 80)))goto LABEL_42; {
          }
            }
        }
        return;
      case 3:
        if (gLogCategory_APBonjourBrowser <= 40
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (_APBonjourBrowserHandleStopEvent(a3)) {
          goto LABEL_42;
        }
        dispatch_queue_t v8 = (const void *)a3;
LABEL_36:
        CFRelease(v8);
        return;
      case 4:
        if (gLogCategory_APBonjourBrowser <= 60
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (_APBonjourBrowserHandleRestartedEvent((const void *)a3, *(const void **)(a3 + 80))) {
          goto LABEL_42;
        }
        return;
      default:
        if (gLogCategory_APBonjourBrowser <= 90
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        return;
    }
  }
  else
  {
LABEL_42:
    APSLogErrorAt();
  }
}

void _APBonjourBrowserHandleRAOPEvent(int a1, const __CFDictionary *a2, _WORD *a3)
{
  if (a3)
  {
    switch(a1)
    {
      case 1:
        if (a3[20] && _APBonjourBrowserHandleDeviceEvent(a3, 0, a2, @"RAOP")) {
          goto LABEL_28;
        }
        break;
      case 2:
        if (a3[20] && _APBonjourBrowserHandleDeviceEvent(a3, 1, a2, @"RAOP")) {
          goto LABEL_28;
        }
        break;
      case 3:
        if (gLogCategory_APBonjourBrowser <= 40
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (_APBonjourBrowserHandleStopEvent((uint64_t)a3)) {
          goto LABEL_28;
        }
        CFRelease(a3);
        break;
      case 4:
        if (gLogCategory_APBonjourBrowser <= 60
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (_APBonjourBrowserHandleRestartedEvent(a3, @"RAOP")) {
          goto LABEL_28;
        }
        break;
      default:
        if (gLogCategory_APBonjourBrowser <= 90
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        break;
    }
  }
  else
  {
LABEL_28:
    APSLogErrorAt();
  }
}

void _APBonjourBrowserHandleAirPlayPartialEvent(int a1, const __CFDictionary *a2, _WORD *a3)
{
  if (a3)
  {
    switch(a1)
    {
      case 1:
        if (a3[20] && _APBonjourBrowserHandleDeviceEvent(a3, 0, a2, @"AirPlayPartial")) {
          goto LABEL_28;
        }
        break;
      case 2:
        if (a3[20] && _APBonjourBrowserHandleDeviceEvent(a3, 1, a2, @"AirPlayPartial")) {
          goto LABEL_28;
        }
        break;
      case 3:
        if (gLogCategory_APBonjourBrowser <= 40
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (_APBonjourBrowserHandleStopEvent((uint64_t)a3)) {
          goto LABEL_28;
        }
        CFRelease(a3);
        break;
      case 4:
        if (gLogCategory_APBonjourBrowser <= 60
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (_APBonjourBrowserHandleRestartedEvent(a3, @"AirPlayPartial")) {
          goto LABEL_28;
        }
        break;
      default:
        if (gLogCategory_APBonjourBrowser <= 90
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        break;
    }
  }
  else
  {
LABEL_28:
    APSLogErrorAt();
  }
}

void _APBonjourBrowserHandleAirPlayEventOverNAN(int a1, CFDictionaryRef theDict, uint64_t a3)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if ((a1 - 1) > 1
      || (CFArrayGetTypeID(),
          TypedCFStringRef Value = (const __CFArray *)CFDictionaryGetTypedValue(),
          CFArrayGetTypeID(),
          (uint64_t v6 = CFDictionaryGetTypedValue()) != 0)
      && !TypedValue)
    {
      _APBonjourBrowserHandleAirPlayEvent(a1, theDict, a3);
      return;
    }
    uint64_t v35 = v6;
    if (gLogCategory_APBonjourBrowser <= 30
      && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (TypedValue)
    {
      CFIndex Count = CFArrayGetCount(TypedValue);
      if (Count >= 1)
      {
        CFIndex v7 = 0;
        CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFAllocatorRef v36 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(TypedValue, v7);
          if (!IsAppleInternalBuild()) {
            goto LABEL_36;
          }
          unsigned int v41 = 0;
          bzero(v74, 0x400uLL);
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          long long v62 = 0u;
          long long v63 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v49 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          *(_OWORD *)bytes = 0u;
          CFIndex length = 0;
          if (!IsAppleInternalBuild()) {
            goto LABEL_99;
          }
          uint64_t DeviceID = BonjourDevice_GetDeviceID();
          if (!DeviceID) {
            goto LABEL_99;
          }
          if (DeviceID != APSSettingsGetInt64() || !APSSettingsGetCString()) {
            goto LABEL_36;
          }
          if (gLogCategory_APBonjourBrowser <= 30
            && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
          {
            uint64_t v31 = v74;
            LogPrintF();
          }
          unsigned int v41 = HexToData();
          if (v41) {
            break;
          }
          if (gLogCategory_APBonjourBrowser <= 30
            && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
          {
            CFIndex v33 = length;
            CFIndex v34 = length;
            uint64_t v31 = (unsigned char *)length;
            uint64_t v32 = bytes;
            LogPrintF();
          }
          CFDataRef v11 = CFDataCreate(v8, bytes, length);
          if (!v11)
          {
LABEL_99:
            APSLogErrorAt();
            goto LABEL_36;
          }
          uint64_t v12 = v11;
          if (gLogCategory_APBonjourBrowser <= 30
            && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
          {
            uint64_t v31 = v12;
            LogPrintF();
          }
          if (v41)
          {
            CFRelease(v12);
            goto LABEL_36;
          }
          if (gLogCategory_APBonjourBrowser > 30) {
            goto LABEL_58;
          }
          if (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()) {
            LogPrintF();
          }
LABEL_54:
          if (gLogCategory_APBonjourBrowser <= 30
            && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
LABEL_58:
          TXTRecordFromBinaryTXTRecord = (const void *)CreateTXTRecordFromBinaryTXTRecord();
          if (gLogCategory_APBonjourBrowser <= 30
            && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          *(void *)bytes = ValueAtIndex;
          LOBYTE(length) = 0;
          memset(v74, 0, 256);
          CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v8, 0, theDict);
          if (MutableCopy)
          {
            CFArrayRef v19 = CFArrayCreate(v8, (const void **)bytes, 1, MEMORY[0x1E4F1D510]);
            if (v19)
            {
              CFArrayRef v20 = v19;
              CFStringRef v39 = v12;
              CFIndex v21 = v7;
              CFDictionaryRef v22 = theDict;
              CFArrayRef v23 = TypedValue;
              CFDictionarySetValue(MutableCopy, @"services", v19);
              CFDictionaryRemoveValue(MutableCopy, @"removedServices");
              CFDictionarySetValue(MutableCopy, @"serviceType", @"_airplay._tcp.");
              CFDictionarySetValue(MutableCopy, @"txt", TXTRecordFromBinaryTXTRecord);
              CFDictionaryGetCString();
              uint16_t v24 = CFDataGetLength((CFDataRef)TXTRecordFromBinaryTXTRecord);
              BytePtr = CFDataGetBytePtr((CFDataRef)TXTRecordFromBinaryTXTRecord);
              ValuePtr = TXTRecordGetValuePtr(v24, BytePtr, "deviceid", (uint8_t *)&length);
              if (ValuePtr)
              {
                CFIndex v27 = (CFIndex)ValuePtr;
                if (strncmpx())
                {
                  if (gLogCategory_APBonjourBrowser <= 30
                    && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
                  {
                    uint64_t v32 = (UInt8 *)length;
                    CFIndex v33 = v27;
                    uint64_t v31 = v74;
                    LogPrintF();
                  }
                  CFDictionarySetCString();
                }
                if (gLogCategory_APBonjourBrowser <= 30
                  && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
                {
                  uint64_t v31 = MutableCopy;
                  LogPrintF();
                }
                CFRelease(v20);
                TypedCFStringRef Value = v23;
                theDict = v22;
                CFIndex v7 = v21;
                CFAllocatorRef v8 = v36;
                uint64_t v12 = v39;
                goto LABEL_76;
              }
              APSLogErrorAt();
              CFRelease(v20);
              TypedCFStringRef Value = v23;
              theDict = v22;
              CFIndex v7 = v21;
              uint64_t v12 = v39;
            }
            else
            {
              APSLogErrorAt();
            }
            CFRelease(MutableCopy);
            CFDictionaryRef MutableCopy = 0;
            CFAllocatorRef v8 = v36;
          }
          else
          {
            APSLogErrorAt();
          }
LABEL_76:
          if (gLogCategory_APBonjourBrowser <= 30
            && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          _APBonjourBrowserHandleAirPlayEvent(1, MutableCopy, a3);
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
          if (TXTRecordFromBinaryTXTRecord) {
            CFRelease(TXTRecordFromBinaryTXTRecord);
          }
          CFRelease(v12);
LABEL_85:
          if (Count == ++v7) {
            goto LABEL_102;
          }
        }
        unsigned int v41 = -6705;
        if (gLogCategory_APBonjourBrowser <= 90)
        {
          if (gLogCategory_APBonjourBrowser == -1)
          {
            if (!_LogCategory_Initialize()) {
              goto LABEL_36;
            }
            uint64_t v28 = v41;
          }
          else
          {
            uint64_t v28 = 4294960591;
          }
          uint64_t v31 = (unsigned char *)v28;
          LogPrintF();
        }
LABEL_36:
        if (gLogCategory_APBonjourBrowser <= 30
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFStringRef Value = (void *)CFDictionaryGetValue(ValueAtIndex, @"nanEP");
        if (!Value) {
          goto LABEL_85;
        }
        uint64_t v14 = Value;
        if (gLogCategory_APBonjourBrowser <= 30
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v15 = objc_msgSend(v14, "customData", v31, v32, v33, v34);
        if (!v15) {
          goto LABEL_85;
        }
        uint64_t v16 = (const void *)v15;
        if (gLogCategory_APBonjourBrowser <= 30
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v12 = CFRetain(v16);
        if (!v12) {
          goto LABEL_85;
        }
        goto LABEL_54;
      }
    }
LABEL_102:
    if (v35)
    {
      uint64_t v29 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
      if (!v29)
      {
        APSLogErrorAt();
        return;
      }
      CFDictionaryRef v30 = v29;
      CFDictionaryRemoveValue(v29, @"services");
      _APBonjourBrowserHandleAirPlayEvent(a1, v30, a3);
    }
    else
    {
      CFDictionaryRef v30 = 0;
    }
    if (gLogCategory_APBonjourBrowser <= 30
      && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v30) {
      CFRelease(v30);
    }
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t APBonjourBrowserInvalidate(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v2, (dispatch_function_t)_APBonjourBrowserInvalidate);
  return v3;
}

void _APBonjourBrowserInvalidate(_DWORD *a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  if (v3)
  {
    do
    {
      CFDataRef v4 = (_WORD *)v3;
      uint64_t v3 = *(void *)(v3 + 24);
    }
    while (v3);
    if (!*(unsigned char *)(v2 + 211) && *v4 != 2) {
      goto LABEL_8;
    }
LABEL_4:
    int v5 = 0;
    goto LABEL_10;
  }
  if (*(unsigned char *)(v2 + 211)) {
    goto LABEL_4;
  }
LABEL_8:
  uint64_t v6 = malloc_type_calloc(1uLL, 0x20uLL, 0x10620408E24C83AuLL);
  CFIndex v7 = v6;
  if (!v6)
  {
    APSLogErrorAt();
    int v5 = -72210;
    goto LABEL_11;
  }
  _WORD *v6 = 2;
  int v5 = _APBonjourBrowserEnqueueOperation(v2, (uint64_t)v6);
  if (v5)
  {
    APSLogErrorAt();
    goto LABEL_11;
  }
LABEL_10:
  CFIndex v7 = 0;
LABEL_11:
  _APBonjourBrowserOperationDisposeNullSafe(v7);
  a1[2] = v5;
}

uint64_t APBonjourBrowserGetMode(uint64_t a1, _WORD *a2)
{
  uint64_t v4 = a1;
  uint64_t v5 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v4, (dispatch_function_t)_APBonjourBrowserGetMode);
  *a2 = v5;
  return HIDWORD(v5);
}

uint64_t *_APBonjourBrowserGetMode(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = *(void *)(*result + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(*result + 32);
    do
    {
      uint64_t v4 = (_WORD *)v3;
      uint64_t v3 = *(void *)(v3 + 24);
    }
    while (v3);
    if (!*(unsigned char *)(v1 + 211) && *v4 != 2)
    {
      *((_WORD *)result + 4) = *(_WORD *)(v1 + 40);
      do
      {
        if (!*(_WORD *)v2) {
          *((_WORD *)result + 4) = *(_WORD *)(v2 + 8);
        }
        uint64_t v2 = *(void *)(v2 + 24);
      }
      while (v2);
    }
  }
  else if (!*(unsigned char *)(v1 + 211))
  {
    *((_WORD *)result + 4) = *(_WORD *)(v1 + 40);
  }
  *((_DWORD *)result + 3) = 0;
  return result;
}

uint64_t APBonjourBrowserSetWiFiSystemReady(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = __APBonjourBrowserSetWiFiSystemReady_block_invoke;
  v4[3] = &unk_1E688B350;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void __APBonjourBrowserSetWiFiSystemReady_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 32);
  if (v3)
  {
    do
    {
      uint64_t v4 = (_WORD *)v3;
      uint64_t v3 = *(void *)(v3 + 24);
    }
    while (v3);
    if (*(unsigned char *)(v2 + 211) || *v4 == 2) {
      goto LABEL_14;
    }
  }
  else if (*(unsigned char *)(v2 + 211))
  {
LABEL_14:
    uint64_t v6 = 0;
    goto LABEL_15;
  }
  if (!*(void *)(v2 + 216))
  {
    APSLogErrorAt();
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    int v8 = -72211;
LABEL_20:
    *(_DWORD *)(v7 + 24) = v8;
    goto LABEL_15;
  }
  uint64_t v5 = malloc_type_calloc(1uLL, 0x20uLL, 0x10620408E24C83AuLL);
  uint64_t v6 = v5;
  if (!v5)
  {
    APSLogErrorAt();
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    int v8 = -72210;
    goto LABEL_20;
  }
  *uint64_t v5 = 3;
  if (gLogCategory_APBonjourBrowser <= 30
    && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = _APBonjourBrowserEnqueueOperation(*(void *)(a1 + 40), (uint64_t)v6);
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    goto LABEL_14;
  }
  APSLogErrorAt();
LABEL_15:
  _APBonjourBrowserOperationDisposeNullSafe(v6);
}

uint64_t APBonjourBrowserSetAWDLSystemReady(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = __APBonjourBrowserSetAWDLSystemReady_block_invoke;
  v4[3] = &unk_1E688B350;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void __APBonjourBrowserSetAWDLSystemReady_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 32);
  if (v3)
  {
    do
    {
      uint64_t v4 = (_WORD *)v3;
      uint64_t v3 = *(void *)(v3 + 24);
    }
    while (v3);
    if (*(unsigned char *)(v2 + 211) || *v4 == 2) {
      goto LABEL_14;
    }
  }
  else if (*(unsigned char *)(v2 + 211))
  {
LABEL_14:
    uint64_t v6 = 0;
    goto LABEL_15;
  }
  if (!*(void *)(v2 + 216))
  {
    APSLogErrorAt();
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    int v8 = -72211;
LABEL_20:
    *(_DWORD *)(v7 + 24) = v8;
    goto LABEL_15;
  }
  uint64_t v5 = malloc_type_calloc(1uLL, 0x20uLL, 0x10620408E24C83AuLL);
  uint64_t v6 = v5;
  if (!v5)
  {
    APSLogErrorAt();
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    int v8 = -72210;
    goto LABEL_20;
  }
  *uint64_t v5 = 4;
  if (gLogCategory_APBonjourBrowser <= 30
    && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = _APBonjourBrowserEnqueueOperation(*(void *)(a1 + 40), (uint64_t)v6);
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    goto LABEL_14;
  }
  APSLogErrorAt();
LABEL_15:
  _APBonjourBrowserOperationDisposeNullSafe(v6);
}

uint64_t APBonjourBrowserSetEventHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a1;
  v4[1] = a2;
  void v4[2] = a3;
  uint64_t v5 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v4, (dispatch_function_t)_APBonjourBrowserSetEventHandler);
  return v5;
}

uint64_t _APBonjourBrowserSetEventHandler(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)result;
  long long v3 = *(_OWORD *)(result + 8);
  uint64_t v4 = *(void *)(*(void *)result + 32);
  if (v4)
  {
    do
    {
      uint64_t v5 = (_WORD *)v4;
      uint64_t v4 = *(void *)(v4 + 24);
    }
    while (v4);
    if (!*(unsigned char *)(v2 + 211) && *v5 != 2) {
      goto LABEL_8;
    }
LABEL_4:
    int v6 = 0;
    goto LABEL_14;
  }
  if (*(unsigned char *)(v2 + 211)) {
    goto LABEL_4;
  }
LABEL_8:
  uint64_t v7 = *(void *)(v2 + 216);
  if (v7) {
    BOOL v8 = v7 == (void)v3;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    int v6 = 0;
    *(_OWORD *)(v2 + 216) = v3;
  }
  else
  {
    uint64_t result = APSLogErrorAt();
    int v6 = -72211;
  }
LABEL_14:
  *(_DWORD *)(v1 + 24) = v6;
  return result;
}

uint64_t APBonjourBrowserReconfirmDevice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  context[3] = a4;
  uint64_t v6 = 0;
  context[0] = a1;
  context[1] = a2;
  void context[2] = a3;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), context, (dispatch_function_t)_APBonjourBrowserReconfirmDevice);
  return v6;
}

uint64_t _APBonjourBrowserReconfirmDevice(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)result;
  long long v3 = *(const void **)(result + 16);
  uint64_t v4 = *(void *)(*(void *)result + 32);
  if (v4)
  {
    do
    {
      uint64_t v5 = (_WORD *)v4;
      uint64_t v4 = *(void *)(v4 + 24);
    }
    while (v4);
    if (*(unsigned char *)(v2 + 211) || *v5 == 2) {
      goto LABEL_28;
    }
  }
  else if (*(unsigned char *)(v2 + 211))
  {
    goto LABEL_28;
  }
  if (!*(void *)(result + 8))
  {
    int v6 = -72211;
    goto LABEL_35;
  }
  if (!v3)
  {
    int v6 = -72211;
    goto LABEL_35;
  }
  if (!*(_WORD *)(v2 + 40))
  {
    uint64_t result = APSLogErrorAt();
    int v6 = -72213;
    goto LABEL_29;
  }
  if (!CFDictionaryGetValue(*(CFDictionaryRef *)(result + 8), @"name"))
  {
    uint64_t result = APSLogErrorAt();
    int v6 = -72212;
    goto LABEL_29;
  }
  if (CFEqual(v3, *(CFTypeRef *)(v2 + 80)))
  {
    BonjourBrowser_ReconfirmDeviceEx();
    if (gLogCategory_APBonjourBrowser <= 40
      && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t result = *(void *)(v2 + 104);
    if (!result) {
      goto LABEL_28;
    }
    uint64_t result = BonjourBrowser_ReconfirmDeviceEx();
    if (gLogCategory_APBonjourBrowser > 40) {
      goto LABEL_28;
    }
    if (gLogCategory_APBonjourBrowser == -1)
    {
      uint64_t result = _LogCategory_Initialize();
      if (!result) {
        goto LABEL_28;
      }
    }
LABEL_24:
    uint64_t result = LogPrintF();
    goto LABEL_28;
  }
  uint64_t result = CFEqual(v3, @"RAOP");
  if (result)
  {
    if (*(unsigned char *)(v2 + 114))
    {
      uint64_t result = BonjourBrowser_ReconfirmDeviceEx();
      if (gLogCategory_APBonjourBrowser > 40) {
        goto LABEL_28;
      }
      if (gLogCategory_APBonjourBrowser == -1)
      {
        uint64_t result = _LogCategory_Initialize();
        if (!result) {
          goto LABEL_28;
        }
      }
      goto LABEL_24;
    }
    int v6 = -72211;
LABEL_35:
    uint64_t result = APSLogErrorAt();
    goto LABEL_29;
  }
LABEL_28:
  int v6 = 0;
LABEL_29:
  *(_DWORD *)(v1 + 32) = v6;
  return result;
}

uint64_t APBonjourBrowserTriggerWoLCachingIfNeeded(const void *a1, const void *a2, const void *a3)
{
  if (a2) {
    CFRetain(a2);
  }
  if (a3) {
    CFRetain(a3);
  }
  return APSDispatchAsyncFHelper();
}

void _APBonjourBrowserTriggerWoLCachingIfNeeded(void *a1)
{
  uint64_t v2 = *a1;
  long long v3 = *(void **)(*a1 + 232);
  if (!v3) {
    return;
  }
  uint64_t v5 = (const void *)a1[1];
  uint64_t v4 = (const void *)a1[2];
  uint64_t v6 = *(void *)(v2 + 32);
  if (v6)
  {
    do
    {
      uint64_t v7 = (_WORD *)v6;
      uint64_t v6 = *(void *)(v6 + 24);
    }
    while (v6);
    if (!*(unsigned char *)(v2 + 211) && *v7 != 2)
    {
LABEL_13:
      if (v5)
      {
        if (v4 && *(_WORD *)(v2 + 40)) {
          [v3 cacheHKPeerIfNeeded:v5 pairedPeerInfo:v4];
        }
        else {
          APSLogErrorAt();
        }
        CFRelease((CFTypeRef)v2);
      }
      else
      {
        APSLogErrorAt();
        uint64_t v5 = (const void *)v2;
      }
LABEL_18:
      CFRelease(v5);
      if (!v4) {
        return;
      }
      goto LABEL_7;
    }
  }
  else if (!*(unsigned char *)(v2 + 211))
  {
    goto LABEL_13;
  }
  CFRelease((CFTypeRef)v2);
  if (v5) {
    goto LABEL_18;
  }
  if (!v4) {
    return;
  }
LABEL_7:
  CFRelease(v4);
}

uint64_t APBonjourBrowserTickleDetailedMode(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v2, (dispatch_function_t)_APBonjourBrowserTickleDetailedMode);
  return v3;
}

uint64_t _APBonjourBrowserTickleDetailedMode(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *(void *)(*(void *)result + 32);
  if (!v3)
  {
    if (!*(unsigned char *)(v2 + 211)) {
      goto LABEL_8;
    }
LABEL_4:
    int v5 = 0;
    goto LABEL_37;
  }
  do
  {
    uint64_t v4 = (_WORD *)v3;
    uint64_t v3 = *(void *)(v3 + 24);
  }
  while (v3);
  if (*(unsigned char *)(v2 + 211) || *v4 == 2) {
    goto LABEL_4;
  }
LABEL_8:
  if (*(_WORD *)(v2 + 40) != 2)
  {
    uint64_t result = APSLogErrorAt();
    int v5 = -72213;
    goto LABEL_37;
  }
  uint64_t result = APSIsAPMSpeaker();
  if (result || !*(unsigned char *)(v2 + 57)) {
    goto LABEL_4;
  }
  *(void *)&v10.sa_len = 0;
  *(void *)&v10.sa_data[6] = 0;
  int v12 = 0;
  uint64_t v11 = 0;
  int v6 = socket(30, 2, 0);
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  if (!*__error())
  {
    int v5 = -6700;
    goto LABEL_28;
  }
  int v5 = *__error();
  if (v5)
  {
LABEL_28:
    APSLogErrorAt();
LABEL_29:
    uint64_t result = APSLogErrorAt();
    goto LABEL_37;
  }
LABEL_14:
  unsigned int v13 = if_nametoindex("awdl0");
  if (!v13)
  {
    uint64_t result = APSLogErrorAt();
    int v5 = -72214;
    goto LABEL_32;
  }
  int v7 = StringToSockAddr();
  if (v7)
  {
    int v5 = v7;
LABEL_45:
    uint64_t result = APSLogErrorAt();
    goto LABEL_32;
  }
  int v8 = setsockopt(v6, 41, 125, &v13, 4u);
  if (v8)
  {
    int v5 = v8;
    goto LABEL_45;
  }
  SocketSetP2P();
  int v9 = SocketSetNonBlocking();
  if (v9)
  {
    int v5 = v9;
    goto LABEL_45;
  }
  uint64_t result = sendto(v6, "dummy", 6uLL, 0, &v10, 0x1Cu);
  if (result == 6 || *__error() && (uint64_t result = *__error(), !result))
  {
    if (gLogCategory_APBonjourBrowser <= 40)
    {
      if (gLogCategory_APBonjourBrowser != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
        uint64_t result = LogPrintF();
      }
    }
    int v5 = 0;
  }
  else
  {
    int v5 = -72215;
    uint64_t result = APSLogErrorAt();
    if (gLogCategory_APBonjourBrowser <= 90)
    {
      if (gLogCategory_APBonjourBrowser != -1 || (uint64_t result = _LogCategory_Initialize(), result))
      {
        __error();
        uint64_t result = LogPrintF();
      }
    }
  }
LABEL_32:
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t result = close(v6);
    if (result)
    {
      uint64_t result = (uint64_t)__error();
      if (*(_DWORD *)result) {
        uint64_t result = (uint64_t)__error();
      }
    }
  }
  if (v5) {
    goto LABEL_29;
  }
LABEL_37:
  *(_DWORD *)(v1 + 8) = v5;
  return result;
}

uint64_t APBonjourBrowserCopyInterfaceName(uint64_t a1, uint64_t a2)
{
  context[1] = a2;
  uint64_t v4 = 0;
  context[0] = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), context, (dispatch_function_t)_APBonjourBrowserCopyInterfaceName);
  return v4;
}

void **_APBonjourBrowserCopyInterfaceName(void **result)
{
  uint64_t v1 = result;
  uint64_t v2 = *result;
  uint64_t v3 = (*result)[4];
  if (v3)
  {
    uint64_t v4 = (*result)[4];
    do
    {
      int v5 = (_WORD *)v4;
      uint64_t v4 = *(void *)(v4 + 24);
    }
    while (v4);
    if (!*((unsigned char *)v2 + 211) && *v5 != 2)
    {
      CFStringRef v6 = (const __CFString *)v2[6];
      do
      {
        if (*(_WORD *)v3 == 1) {
          CFStringRef v6 = *(const __CFString **)(v3 + 8);
        }
        uint64_t v3 = *(void *)(v3 + 24);
      }
      while (v3);
      if (v6)
      {
LABEL_11:
        uint64_t result = (void **)CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6);
        *v1[1] = result;
        if (!*v1[1])
        {
          uint64_t result = (void **)APSLogErrorAt();
          int v7 = -72210;
          goto LABEL_16;
        }
        goto LABEL_12;
      }
LABEL_15:
      int v7 = 0;
      *result[1] = 0;
      goto LABEL_16;
    }
  }
  else if (!*((unsigned char *)v2 + 211))
  {
    CFStringRef v6 = (const __CFString *)v2[6];
    if (v6) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
LABEL_12:
  int v7 = 0;
LABEL_16:
  *((_DWORD *)v1 + 4) = v7;
  return result;
}

uint64_t APBonjourBrowserSetInterfaceName(uint64_t a1, uint64_t a2)
{
  context[1] = a2;
  uint64_t v4 = 0;
  context[0] = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), context, (dispatch_function_t)_APBonjourBrowserSetInterfaceName);
  return v4;
}

void _APBonjourBrowserSetInterfaceName(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  CFStringRef v2 = *(const __CFString **)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 32);
  if (v4)
  {
    do
    {
      int v5 = (_WORD *)v4;
      uint64_t v4 = *(void *)(v4 + 24);
    }
    while (v4);
    if (!*(unsigned char *)(v3 + 211) && *v5 != 2) {
      goto LABEL_8;
    }
LABEL_4:
    CFStringRef v6 = 0;
    int v7 = 0;
    goto LABEL_16;
  }
  if (*(unsigned char *)(v3 + 211)) {
    goto LABEL_4;
  }
LABEL_8:
  if (v2)
  {
    if (!CFStringGetLength(v2))
    {
      APSLogErrorAt();
      CFStringRef v6 = 0;
      int v7 = -72211;
      goto LABEL_16;
    }
    CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFStringRef *)(a1 + 8));
    if (!Copy)
    {
      int v7 = -72210;
      APSLogErrorAt();
LABEL_15:
      CFStringRef v6 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    CFStringRef Copy = 0;
  }
  int v9 = malloc_type_calloc(1uLL, 0x20uLL, 0x10620408E24C83AuLL);
  CFStringRef v6 = v9;
  if (v9)
  {
    *(_WORD *)int v9 = 1;
    v9[1] = Copy;
    int v7 = _APBonjourBrowserEnqueueOperation(v3, (uint64_t)v9);
    if (!v7) {
      goto LABEL_15;
    }
  }
  else
  {
    int v7 = -72210;
  }
  APSLogErrorAt();
  if (Copy) {
    CFRetain(Copy);
  }
LABEL_16:
  _APBonjourBrowserOperationDisposeNullSafe(v6);
  *(_DWORD *)(a1 + 16) = v7;
}

uint64_t _APBonjourBrowserStopBrowsing(uint64_t a1, _DWORD *a2)
{
  int v5 = 0;
  _APBonjourBrowserStopBonjourBrowser(a1, *(void *)(a1 + 136), *(void *)(a1 + 64), (uint64_t)"local browsing", (unsigned char *)(a1 + 130), &v5);
  _APBonjourBrowserStopBonjourBrowser(a1, *(void *)(a1 + 96), *(void *)(a1 + 64), (uint64_t)"general browsing", (unsigned char *)(a1 + 113), &v5);
  _APBonjourBrowserStopBonjourBrowser(a1, *(void *)(a1 + 104), (uint64_t)"_airplay-alt._tcp.", (uint64_t)"browsing", (unsigned char *)(a1 + 112), &v5);
  _APBonjourBrowserStopBonjourBrowser(a1, *(void *)(a1 + 152), (uint64_t)"_raop._tcp.", (uint64_t)"local browsing", (unsigned char *)(a1 + 144), &v5);
  uint64_t result = _APBonjourBrowserStopBonjourBrowser(a1, *(void *)(a1 + 120), (uint64_t)"_raop._tcp.", (uint64_t)"general browsing", (unsigned char *)(a1 + 128), &v5);
  if (a2) {
    *a2 += v5;
  }
  return result;
}

uint64_t _APBonjourBrowserStopBonjourBrowser(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, _DWORD *a6)
{
  if (*a5)
  {
    *a5 = 0;
    uint64_t result = BonjourBrowser_Stop();
    ++*a6;
    if (gLogCategory_APBonjourBrowser <= 40)
    {
      if (gLogCategory_APBonjourBrowser != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

uint64_t _APBonjourBrowserDispatchEvent(uint64_t cf, uint64_t a2, const void *a3)
{
  if (*(void *)(cf + 216) && !*(unsigned char *)(cf + 211))
  {
    CFRetain((CFTypeRef)cf);
    if (a3) {
      CFRetain(a3);
    }
    return APSDispatchAsyncFHelper();
  }
  return cf;
}

void _APBonjourBrowserDispatchEventCallback(uint64_t a1)
{
  (*(void (**)(void, void, void, void))(a1 + 24))(*(void *)a1, *(unsigned int *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 32));
  CFStringRef v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)a1;
  CFRelease(v3);
}

uint64_t _APBonjourBrowserHandleDeviceEvent(const void *a1, uint64_t a2, const __CFDictionary *a3, const void *a4)
{
  unsigned int v15 = 0;
  uint64_t v14 = 0;
  BonjourDevice_GetDeviceID();
  if (!CFDictionaryGetValue(a3, @"name"))
  {
    APSLogErrorAt();
    return -72212;
  }
  int v8 = gLogCategory_APBonjourBrowser;
  if (gLogCategory_APBonjourBrowser <= 20)
  {
    if (gLogCategory_APBonjourBrowser == -1)
    {
      if (!_LogCategory_Initialize()) {
        goto LABEL_10;
      }
      int v8 = gLogCategory_APBonjourBrowser;
    }
    if (v8 == -1) {
      _LogCategory_Initialize();
    }
    LogPrintF();
  }
LABEL_10:
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a3, @"txt");
  if (gLogCategory_APBonjourBrowser <= 10)
  {
    CFDataRef v10 = Value;
    if (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize())
    {
      CFDataGetBytePtr(v10);
      CFDataGetLength(v10);
      LogPrintF();
    }
  }
  CFAllocatorRef v11 = CFGetAllocator(a1);
  unsigned int v15 = _APBonjourBrowserCreateEventInfoDictionary(v11, a3, a4, &v14);
  if (v15)
  {
    APSLogErrorAt();
    int v12 = v14;
    if (!v14) {
      return v15;
    }
    goto LABEL_16;
  }
  int v12 = v14;
  _APBonjourBrowserDispatchEvent((uint64_t)a1, a2, v14);
  unsigned int v15 = 0;
  if (v12) {
LABEL_16:
  }
    CFRelease(v12);
  return v15;
}

uint64_t _APBonjourBrowserHandleStopEvent(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 **)(a1 + 32);
  if (v1 && ((unsigned int v2 = *v1, v2 <= 4) ? (v3 = v2 == 1) : (v3 = 1), !v3 && (v4 = *((_DWORD *)v1 + 5)) != 0))
  {
    *((_DWORD *)v1 + 5) = v4 - 1;
    return _APBonjourBrowserProcessOperationQueue((char *)a1);
  }
  else
  {
    APSLogErrorAt();
    return 4294895084;
  }
}

uint64_t _APBonjourBrowserHandleRestartedEvent(const void *a1, const void *a2)
{
  int v8 = 0;
  CFAllocatorRef v4 = CFGetAllocator(a1);
  uint64_t v5 = _APBonjourBrowserCreateEventInfoDictionary(v4, 0, a2, &v8);
  if (v5)
  {
    APSLogErrorAt();
    CFStringRef v6 = v8;
    if (!v8) {
      return v5;
    }
    goto LABEL_3;
  }
  CFStringRef v6 = v8;
  _APBonjourBrowserDispatchEvent((uint64_t)a1, 4, v8);
  if (v6) {
LABEL_3:
  }
    CFRelease(v6);
  return v5;
}

uint64_t _APBonjourBrowserCreateEventInfoDictionary(const __CFAllocator *a1, const void *a2, const void *a3, __CFDictionary **a4)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    int v8 = Mutable;
    if (a2) {
      CFDictionarySetValue(Mutable, @"deviceInfo", a2);
    }
    CFDictionarySetValue(v8, @"serviceType", a3);
    uint64_t result = 0;
    *a4 = v8;
  }
  else
  {
    APSLogErrorAt();
    return 4294895086;
  }
  return result;
}

void _APBonjourBrowserFinalize(uint64_t a1)
{
  unsigned int v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 48) = 0;
  }
  if (*(void *)(a1 + 96))
  {
    BonjourBrowser_Stop();
    CFRelease(*(CFTypeRef *)(a1 + 96));
    *(void *)(a1 + 96) = 0;
  }
  if (*(void *)(a1 + 104))
  {
    BonjourBrowser_Stop();
    CFRelease(*(CFTypeRef *)(a1 + 104));
    *(void *)(a1 + 104) = 0;
  }
  if (*(void *)(a1 + 136))
  {
    BonjourBrowser_Stop();
    CFRelease(*(CFTypeRef *)(a1 + 136));
    *(void *)(a1 + 136) = 0;
  }
  if (*(void *)(a1 + 120))
  {
    BonjourBrowser_Stop();
    CFRelease(*(CFTypeRef *)(a1 + 120));
    *(void *)(a1 + 120) = 0;
  }
  if (*(void *)(a1 + 152))
  {
    BonjourBrowser_Stop();
    CFRelease(*(CFTypeRef *)(a1 + 152));
    *(void *)(a1 + 152) = 0;
  }
  if (*(void *)(a1 + 168))
  {
    BonjourBrowser_Stop();
    CFRelease(*(CFTypeRef *)(a1 + 168));
    *(void *)(a1 + 168) = 0;
  }
  if (*(void *)(a1 + 184))
  {
    BonjourBrowser_Stop();
    CFRelease(*(CFTypeRef *)(a1 + 184));
    *(void *)(a1 + 184) = 0;
  }
  if (*(void *)(a1 + 200))
  {
    BonjourBrowser_Stop();
    CFRelease(*(CFTypeRef *)(a1 + 200));
    *(void *)(a1 + 200) = 0;
  }
  BOOL v3 = *(NSObject **)(a1 + 16);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 16) = 0;
  }
  CFAllocatorRef v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t APTransportConnectionUDPNWCreate(uint64_t a1, const void *a2, int a3, int a4, const __CFDictionary *a5, void *a6)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (!a6) {
    goto LABEL_56;
  }
  APTransportConnectionGetClassID();
  unsigned int v27 = CMDerivedObjectCreate();
  if (v27)
  {
LABEL_70:
    APSLogErrorAt();
    return v27;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a5);
    *(void *)(DerivedStorage + 24) = Copy;
    if (!Copy)
    {
LABEL_69:
      APSLogErrorAt();
      return -72323;
    }
  }
  else
  {
    Empty = (const void *)CFDictionaryGetEmpty();
    *(void *)(DerivedStorage + 24) = CFRetain(Empty);
  }
  *(unsigned char *)(DerivedStorage + 176) = CFDictionaryGetInt64() != 0;
  *(_DWORD *)(DerivedStorage + 184) = a4;
  *(_DWORD *)(DerivedStorage + 188) = CFDictionaryGetInt64();
  *(_DWORD *)(DerivedStorage + 192) = CFDictionaryGetInt64Ranged();
  *(_DWORD *)(DerivedStorage + 196) = CFDictionaryGetInt64Ranged();
  CFUUIDGetTypeID();
  TypedCFDataRef Value = (const void *)CFDictionaryGetTypedValue();
  *(void *)(DerivedStorage + 200) = TypedValue;
  if (TypedValue) {
    CFRetain(TypedValue);
  }
  APSRealTimeReadableRingBufferGetTypeID();
  unsigned int v15 = (const void *)CFDictionaryGetTypedValue();
  *(void *)(DerivedStorage + 392) = v15;
  if (v15) {
    CFRetain(v15);
  }
  *(void *)(DerivedStorage + 16) = a2;
  if (a2) {
    CFRetain(a2);
  }
  *(_DWORD *)(DerivedStorage + 180) = a3;
  uint64_t v16 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 8) = v16;
  if (!v16) {
    goto LABEL_69;
  }
  uint64_t v17 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(void *)(DerivedStorage + 208) = v17;
  if (!v17) {
    goto LABEL_56;
  }
  uint64_t v18 = APTransportConnectionCopyNWContextForType(*(_DWORD *)(DerivedStorage + 192));
  *(void *)(DerivedStorage + 32) = v18;
  if (!v18) {
    goto LABEL_56;
  }
  SNPrintF();
  if (*(_DWORD *)(DerivedStorage + 192) != 3)
  {
    initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
    dispatch_queue_t v22 = dispatch_queue_create(label, initially_inactive);
    *(void *)(DerivedStorage + 40) = v22;
    if (!v22) {
      goto LABEL_67;
    }
    nw_queue_context_target_dispatch_queue();
    dispatch_activate(*(dispatch_object_t *)(DerivedStorage + 40));
    unsigned int v27 = APSRealTimeDispatcherCreate();
    if (!v27)
    {
      SNPrintF();
      uint64_t v24 = FigDispatchQueueCreateWithPriority();
      *(void *)(DerivedStorage + 112) = v24;
      if (!v24) {
        goto LABEL_67;
      }
      *(_DWORD *)(DerivedStorage + 144) = 0;
      *(void *)(DerivedStorage + 328) = CFDictionaryGetInt64();
      *(void *)(DerivedStorage + 336) = CFDictionaryGetInt64();
      *(void *)(DerivedStorage + 344) = CFDictionaryGetInt64();
      *(void *)(DerivedStorage + 352) = CFDictionaryGetInt64();
      *(void *)(DerivedStorage + 360) = 0;
      *(unsigned char *)(DerivedStorage + 368) = CFDictionaryGetInt64() != 0;
      uint64_t Int64 = APSSettingsGetInt64();
      *(void *)(DerivedStorage + 376) = Int64;
      if (Int64
        && gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(unsigned char *)(DerivedStorage + 400) = CFDictionaryGetInt64() != 0;
      unsigned int v27 = APSAtomicMessageQueueCreate();
      if (!v27)
      {
        CFRetain(*(CFTypeRef *)(DerivedStorage + 88));
        unsigned int v27 = APSRealTimeSignalCreate();
        if (!v27)
        {
          unsigned int v27 = APSRecycleBinCreate();
          if (!v27)
          {
            if (gLogCategory_APTransportConnectionUDPNW <= 50
              && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            unsigned int v27 = APSRealTimePTPClockCreate();
            if (v27)
            {
              if (gLogCategory_APTransportConnectionUDPNW <= 90
                && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              unsigned int v27 = 0;
            }
            APTTrafficMetricsCreate(&gLogCategory_APTransportConnectionUDPNW, 0, (uint64_t *)(DerivedStorage + 408), 4 * (*(unsigned char *)(DerivedStorage + 176) != 0));
            *a6 = 0;
            return v27;
          }
        }
      }
    }
    goto LABEL_70;
  }
  if (!FigSimpleMutexCreate())
  {
LABEL_56:
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  unsigned int v27 = APSWrapperCreate();
  if (v27)
  {
    APSLogErrorAt();
    FigSimpleMutexDestroy();
  }
  else
  {
    CFArrayRef v19 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
    if (!v19) {
      goto LABEL_69;
    }
    CFArrayRef v20 = v19;
    *CFArrayRef v19 = 0;
    unsigned int v27 = APSWrapperCreate();
    if (!v27)
    {
      if (CFDictionaryGetInt64())
      {
        if (gLogCategory_APTransportConnectionUDPNW <= 50
          && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        atomic_fetch_or_explicit((atomic_uint *volatile)APSWrapperGetValue(), 2u, memory_order_relaxed);
      }
      uint64_t v23 = FigDispatchQueueCreateWithPriority();
      *(void *)(DerivedStorage + 40) = v23;
      if (v23)
      {
        CMBaseObjectGetDerivedStorage();
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        APSLogErrorAt();
        APSLogErrorAt();
        return APSSignalErrorAt();
      }
LABEL_67:
      APSLogErrorAt();
      return APSSignalErrorAt();
    }
    APSLogErrorAt();
    free(v20);
  }
  return v27;
}

uint64_t udpconnection_runOffline(uint64_t a1)
{
  CFDataRef Value = (pthread_mutex_t *)APSWrapperGetValue();
  uint64_t v3 = *(void *)(a1 + 8);
  return udpconnection_runInlineInternal(Value, v3, 0);
}

void udpconnection_offlineContextFinalizer(const void **a1)
{
  if (a1)
  {
    unsigned int v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
    uint64_t v3 = (void *)a1[1];
    if (v3) {
      nw_release(v3);
    }
    free(a1);
  }
}

uint64_t udpconnection_serviceSendMessageQueue()
{
  do
    uint64_t result = APSAtomicMessageQueueReadMessage();
  while (result);
  return result;
}

uint64_t udpconnection_createContentContextItem(uint64_t a1, nw_content_context_t *a2)
{
  nw_content_context_t v3 = nw_content_context_create("APTConnectionUDPNW");
  if (v3)
  {
    nw_content_context_t v4 = v3;
    uint64_t result = 0;
    *a2 = v4;
  }
  else
  {
    APSLogErrorAt();
    return 4294894973;
  }
  return result;
}

uint64_t udpconnection_Invalidate(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 8));
  udpconnection_invalidateInternal(a1, 1);
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 8));
  return 0;
}

void udpconnection_Finalize(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportConnectionUDPNW <= 50
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  udpconnection_invalidateInternal(a1, 0);
  nw_content_context_t v3 = *(void **)(DerivedStorage + 312);
  if (v3) {
    nw_release(v3);
  }
  nw_release(*(void **)(DerivedStorage + 296));
  nw_release(*(void **)(DerivedStorage + 320));
  nw_content_context_t v4 = *(const void **)(DerivedStorage + 408);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 408) = 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 24);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 24) = 0;
  }
  CFStringRef v6 = *(const void **)(DerivedStorage + 16);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 16) = 0;
  }
  int v7 = *(const void **)(DerivedStorage + 200);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 200) = 0;
  }
  int v8 = *(const void **)(DerivedStorage + 392);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 392) = 0;
  }
  int v9 = *(NSObject **)(DerivedStorage + 112);
  if (v9)
  {
    dispatch_release(v9);
    *(void *)(DerivedStorage + 112) = 0;
  }
  CFDataRef v10 = *(NSObject **)(DerivedStorage + 136);
  if (v10)
  {
    dispatch_release(v10);
    *(void *)(DerivedStorage + 136) = 0;
  }
  FigSimpleMutexDestroy();
  *(void *)(DerivedStorage + 8) = 0;
  CFAllocatorRef v11 = *(NSObject **)(DerivedStorage + 40);
  if (v11)
  {
    dispatch_release(v11);
    *(void *)(DerivedStorage + 40) = 0;
  }
  int v12 = *(const void **)(DerivedStorage + 48);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 48) = 0;
  }
  unsigned int v13 = *(const void **)(DerivedStorage + 384);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 384) = 0;
  }
  uint64_t v14 = *(const void **)(DerivedStorage + 208);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(DerivedStorage + 208) = 0;
  }
  nw_release(*(void **)(DerivedStorage + 32));
  unsigned int v15 = *(const void **)(DerivedStorage + 56);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(DerivedStorage + 56) = 0;
  }
  uint64_t v16 = *(const void **)(DerivedStorage + 64);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(DerivedStorage + 64) = 0;
  }
  uint64_t v17 = *(const void **)(DerivedStorage + 72);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(DerivedStorage + 72) = 0;
  }
  uint64_t v18 = *(const void **)(DerivedStorage + 80);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(DerivedStorage + 80) = 0;
  }
  CFArrayRef v19 = *(const void **)(DerivedStorage + 88);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(DerivedStorage + 88) = 0;
  }
  CFArrayRef v20 = *(const void **)(DerivedStorage + 96);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(DerivedStorage + 96) = 0;
  }
  CFIndex v21 = *(const void **)(DerivedStorage + 104);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(DerivedStorage + 104) = 0;
  }
}

__CFString *udpconnection_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTransportConnectionUDPNW %p '%@'>", a1, *(void *)(DerivedStorage + 16));
  return Mutable;
}

uint64_t udpconnection_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 8));
  int v9 = (CFDataRef *)CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)v9) {
    goto LABEL_67;
  }
  CFDataRef v10 = v9;
  if (CFEqual(a2, @"LocalNetworkPort"))
  {
    CFAllocatorRef v11 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (*v11 || !v11[176])
    {
      APSLogErrorAt();
      uint64_t v13 = APSSignalErrorAt();
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_85;
    }
    CFNumberRef v12 = CFNumberCreate(a3, kCFNumberIntType, v11 + 224);
    *a4 = v12;
    if (!v12)
    {
      uint64_t v13 = 4294894973;
      APSLogErrorAt();
LABEL_85:
      APSLogErrorAt();
      goto LABEL_55;
    }
    goto LABEL_27;
  }
  if (CFEqual(a2, @"LocalNetworkInfo"))
  {
    uint64_t v14 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    memset(parameters, 0, sizeof(parameters));
    int v44 = 0;
    __int16 v42 = 0;
    *(_DWORD *)bytes = 0;
    cStr[0] = 0;
    if (*v14
      || (v15 = v14, (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0))
    {
      APSLogErrorAt();
      uint64_t v13 = APSSignalErrorAt();
      goto LABEL_84;
    }
    CFMutableDictionaryRef v17 = Mutable;
    if (v15[176]) {
      CFDictionarySetInt64();
    }
    CFStringRef v18 = (const __CFString *)*((void *)v15 + 27);
    if (v18 && CFStringHasPrefix(v18, @"llw") || v15[400])
    {
      if (!CFStringGetCString(*((CFStringRef *)v15 + 27), buffer, 16, 0x8000100u))
      {
        APSLogErrorAt();
        if (gLogCategory_APTransportConnectionUDPNW <= 90
          && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v13 = 4294894974;
        goto LABEL_83;
      }
      uint64_t v19 = CUGetInterfaceAddresses();
      if (v19)
      {
        uint64_t v13 = v19;
        APSLogErrorAt();
        if (gLogCategory_APTransportConnectionUDPNW <= 90
          && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_83;
      }
      CFArrayRef v20 = *((void *)v15 + 29);
      if (v20 && !nw_endpoint_get_address(v20))
      {
        APSLogErrorAt();
LABEL_79:
        uint64_t v13 = APSSignalErrorAt();
LABEL_83:
        CFRelease(v17);
LABEL_84:
        if (!v13) {
          goto LABEL_28;
        }
        goto LABEL_85;
      }
      SockAddrToString();
      CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFStringRef v23 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x8000100u);
      if (!v23)
      {
        APSLogErrorAt();
        goto LABEL_79;
      }
      CFStringRef v24 = v23;
      CFDictionarySetValue(v17, @"IPAddress", v23);
      CFDataRef v25 = CFDataCreate(v22, bytes, 6);
      if (!v25)
      {
        APSLogErrorAt();
        uint64_t v13 = APSSignalErrorAt();
        CFRelease(v24);
        goto LABEL_83;
      }
      CFDataRef v26 = v25;
      CFDictionarySetValue(v17, @"MACAddress", v25);
      *a4 = v17;
      CFRelease(v24);
      CFRelease(v26);
    }
    else
    {
      *a4 = v17;
    }
LABEL_27:
    uint64_t v13 = 0;
    goto LABEL_28;
  }
  if (CFEqual(a2, @"RemoteNetworkMACAddress"))
  {
    CFDataRef Copy = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v10[34]);
    *a4 = Copy;
    if (!Copy)
    {
      uint64_t v13 = 4294894973;
      goto LABEL_85;
    }
    goto LABEL_27;
  }
  if (CFEqual(a2, @"NWConnectionUUID"))
  {
    uint64_t v28 = CMBaseObjectGetDerivedStorage();
    *(void *)cStr = 0;
    uint64_t v46 = 0;
    parameters[0] = 0;
    __int16 v48 = 0;
    *(_DWORD *)buffer = 0;
    if (!*(unsigned char *)v28 && (uint64_t v29 = v28, *(unsigned char *)(v28 + 176)) && *(unsigned char *)(v28 + 240) && *(void *)(v28 + 288))
    {
      if (*(void *)(v28 + 312))
      {
        long long v30 = 0;
        goto LABEL_62;
      }
      uint64_t UDPParameters = udpconnection_createUDPParameters(a1, *(const __CFString **)(v28 + 216), parameters);
      if (!UDPParameters)
      {
        nw_parameters_set_delegated_unique_pid();
        CFStringRef v33 = *(const __CFString **)(v29 + 216);
        if (v33 && CFStringHasPrefix(v33, @"llw"))
        {
          CFDataRef v34 = *(const __CFData **)(v29 + 272);
          if (!v34)
          {
            APSLogErrorAt();
            long long v30 = 0;
            uint64_t v13 = 4294894967;
LABEL_65:
            nw_release(v30);
            nw_release(parameters[0]);
            if (!v13) {
              goto LABEL_28;
            }
            goto LABEL_85;
          }
          v50.location = 0;
          v50.CFIndex length = 6;
          CFDataGetBytes(v34, v50, (UInt8 *)buffer);
          uint64_t address_with_ethernet = nw_endpoint_create_address_with_ethernet();
        }
        else
        {
          uint64_t address_with_ethernet = (uint64_t)nw_endpoint_create_address((const sockaddr *)(v29 + 240));
        }
        long long v30 = address_with_ethernet;
        if (!address_with_ethernet) {
          goto LABEL_94;
        }
        nw_parameters_set_reuse_local_address(parameters[0], 1);
        nw_parameters_set_include_peer_to_peer(parameters[0], 1);
        nw_parameters_set_local_endpoint(parameters[0], *(nw_endpoint_t *)(v29 + 232));
        long long v36 = nw_endpoint_copy_address_string(*(nw_endpoint_t *)(v29 + 232));
        uint64_t v37 = nw_endpoint_copy_address_string(v30);
        if (gLogCategory_APTransportConnectionUDPNW <= 30
          && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
        {
          nw_endpoint_get_port(*(nw_endpoint_t *)(v29 + 232));
          nw_endpoint_get_port(v30);
          LogPrintF();
        }
        if (v36) {
          free(v36);
        }
        if (v37) {
          free(v37);
        }
        uint64_t evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint();
        *(void *)(v29 + 312) = evaluator_for_endpoint;
        if (!evaluator_for_endpoint)
        {
LABEL_94:
          APSLogErrorAt();
          uint64_t v13 = APSSignalErrorAt();
          goto LABEL_65;
        }
LABEL_62:
        if (nw_path_evaluator_get_client_id())
        {
          CFDataRef v40 = CFDataCreate(a3, (const UInt8 *)cStr, 16);
          if (v40)
          {
            uint64_t v13 = 0;
            *a4 = v40;
            goto LABEL_65;
          }
        }
        goto LABEL_94;
      }
      uint64_t v13 = UDPParameters;
      APSLogErrorAt();
    }
    else
    {
      APSLogErrorAt();
      uint64_t v13 = APSSignalErrorAt();
    }
    long long v30 = 0;
    goto LABEL_65;
  }
  if (!CFEqual(a2, @"LocalInterfaceName"))
  {
    if (!CFEqual(a2, @"PrimaryPacketDropCount"))
    {
      uint64_t v13 = 4294954512;
LABEL_55:
      APSLogErrorAt();
      goto LABEL_28;
    }
    uint64_t Int64 = CFNumberCreateInt64();
    *a4 = Int64;
    if (!Int64)
    {
      uint64_t v13 = 4294894973;
      goto LABEL_85;
    }
    goto LABEL_27;
  }
  if (*((_DWORD *)v10 + 36) != 5)
  {
LABEL_67:
    APSLogErrorAt();
    uint64_t v13 = APSSignalErrorAt();
    if (!v13) {
      goto LABEL_28;
    }
    goto LABEL_55;
  }
  CFDataRef v31 = v10[27];
  if (v31) {
    CFDataRef v31 = (CFDataRef)CFRetain(v31);
  }
  uint64_t v13 = 0;
  *a4 = v31;
LABEL_28:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 8));
  return v13;
}

uint64_t udpconnection_SetProperty(uint64_t a1, const void *a2, __CFString *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 8));
  CFStringRef v6 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*v6) {
    goto LABEL_60;
  }
  int v7 = v6;
  if (!CFEqual(a2, @"PackageType"))
  {
    if (CFEqual(a2, @"RemoteNetworkInfo"))
    {
      if (a3)
      {
        CFTypeID v9 = CFGetTypeID(a3);
        if (v9 == CFDictionaryGetTypeID())
        {
          uint64_t v10 = CMBaseObjectGetDerivedStorage();
          CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a3, @"IPAddress");
          if (Value)
          {
            CFStringGetCString(Value, buffer, 128, 0x8000100u);
            StringToSockAddr();
          }
          int Int64Ranged = (unsigned __int16)CFDictionaryGetInt64Ranged();
          if (Int64Ranged) {
            *(_DWORD *)(v10 + 280) = Int64Ranged;
          }
          SockAddrSetPort();
          unsigned int v15 = CFDictionaryGetValue((CFDictionaryRef)a3, @"MACAddress");
          if (v15)
          {
            uint64_t v16 = *(const void **)(v10 + 272);
            *(void *)(v10 + 272) = v15;
            CFRetain(v15);
            if (v16) {
              CFRelease(v16);
            }
          }
          goto LABEL_33;
        }
      }
    }
    else
    {
      if (CFEqual(a2, @"RemoteNetworkIPAddress"))
      {
        if (a3)
        {
          CFTypeID v14 = CFGetTypeID(a3);
          if (v14 == APSNetworkAddressGetTypeID())
          {
            APSNetworkAddressGetSocketAddr();
            *((_OWORD *)v7 + 15) = *(_OWORD *)buffer;
            *(_OWORD *)(v7 + 252) = *(_OWORD *)&buffer[12];
            SockAddrSetPort();
            v7[268] = APSNetworkAddressIsIPv6() == 0;
            goto LABEL_25;
          }
        }
        goto LABEL_60;
      }
      if (!CFEqual(a2, @"RemoteNetworkMACAddress"))
      {
        if (CFEqual(a2, @"RemoteNetworkPort"))
        {
          *((_DWORD *)v7 + 70) = CFGetInt64();
          SockAddrSetPort();
          goto LABEL_25;
        }
        if (CFEqual(a2, @"BoundInterfaceIndex"))
        {
          *((_DWORD *)v7 + 71) = CFGetInt64();
        }
        else
        {
          if (CFEqual(a2, @"LocalInterfaceName"))
          {
            if (a3)
            {
              CFTypeID v21 = CFGetTypeID(a3);
              if (v21 == CFStringGetTypeID())
              {
                *((void *)v7 + 27) = CFRetain(a3);
                goto LABEL_25;
              }
            }
            goto LABEL_60;
          }
          if (!CFEqual(a2, @"ClientUPID"))
          {
            uint64_t v13 = 4294954512;
            goto LABEL_49;
          }
          *((void *)v7 + 36) = CFGetInt64();
        }
LABEL_33:
        uint64_t v13 = 0;
        goto LABEL_34;
      }
      if (a3)
      {
        CFTypeID v18 = CFGetTypeID(a3);
        if (v18 == CFDataGetTypeID())
        {
          uint64_t v19 = (const void *)*((void *)v7 + 34);
          if (v19) {
            CFRelease(v19);
          }
          CFDataRef Copy = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFDataRef)a3);
          *((void *)v7 + 34) = Copy;
          if (CFDataGetLength(Copy) == 6) {
            goto LABEL_25;
          }
        }
      }
    }
LABEL_60:
    APSLogErrorAt();
    uint64_t v13 = APSSignalErrorAt();
    if (!v13) {
      goto LABEL_34;
    }
    goto LABEL_49;
  }
  if (@"RTCP" != a3 && (!a3 || !@"RTCP" || !CFEqual(a3, @"RTCP")))
  {
    if (@"RTP" == a3
      || a3 && @"RTP" && CFEqual(a3, @"RTP")
      || @"Screen" == a3
      || a3 && @"Screen" && CFEqual(a3, @"Screen"))
    {
      *((void *)v7 + 19) = APTransportPackageRTPCreateWithBBuf;
      *((void *)v7 + 20) = APTransportPackageRTPCreate;
      int v8 = APTransportPackageRTPCreateWithMessageSize;
      goto LABEL_24;
    }
    if (gLogCategory_APTransportConnectionUDPNW <= 90
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v13 = 4294954516;
LABEL_49:
    APSLogErrorAt();
    goto LABEL_34;
  }
  *((void *)v7 + 19) = APTransportPackageRTCPCreateWithBBuf;
  *((void *)v7 + 20) = APTransportPackageRTCPCreate;
  int v8 = APTransportPackageRTCPCreateWithMessageSize;
LABEL_24:
  *((void *)v7 + 21) = v8;
LABEL_25:
  uint64_t v13 = 0;
LABEL_34:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 8));
  return v13;
}

void udpconnection_invalidateInternal(void *a1, int a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    uint64_t v5 = DerivedStorage;
    if (gLogCategory_APTransportConnectionUDPNW <= 50
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *uint64_t v5 = 1;
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    if (*(void *)(v6 + 64)) {
      atomic_fetch_and_explicit((atomic_uint *volatile)APSWrapperGetValue(), 0xFFFFFFFE, memory_order_relaxed);
    }
    *(_DWORD *)(v6 + 144) = 6;
    if (*(unsigned char *)(v6 + 176) && *(void *)(v6 + 304))
    {
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 0x40000000;
      v11[2] = __udpconnection_cleanUp_block_invoke;
      v11[3] = &__block_descriptor_tmp_3;
      v11[4] = v6;
      udpconnection_runLockedInlineIfNecessary((uint64_t)a1, (uint64_t)v11);
      *(void *)(v6 + 304) = 0;
    }
    if (*(void *)(v6 + 296))
    {
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 0x40000000;
      v10[2] = __udpconnection_cleanUp_block_invoke_2;
      v10[3] = &__block_descriptor_tmp_47;
      v10[4] = v6;
      udpconnection_runLockedInlineIfNecessary((uint64_t)a1, (uint64_t)v10);
    }
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7)
    {
      __swp(v7 + 17, (unsigned int *)(v7 + 17));
      if (((v7 + 17) & 1) == 0
        && gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    int v8 = *(const void **)(v6 + 272);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(v6 + 272) = 0;
    }
    CFTypeID v9 = *(const void **)(v6 + 216);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(v6 + 216) = 0;
    }
    nw_release(*(void **)(v6 + 232));
    if (a2) {
      dispatch_sync_f(*((dispatch_queue_t *)v5 + 14), a1, (dispatch_function_t)udpconnection_clearCallbackState);
    }
    else {
      udpconnection_clearCallbackState();
    }
  }
}

void udpconnection_clearCallbackState()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[15] = 0;
  DerivedStorage[16] = 0;
  uint64_t v1 = DerivedStorage[17];
  if (v1)
  {
    dispatch_release(v1);
    DerivedStorage[17] = 0;
  }
}

uint64_t udpconnection_runLockedInlineIfNecessary(uint64_t a1, uint64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  CFStringRef Value = (pthread_mutex_t *)APSWrapperGetValue();
  if (Value)
  {
    nw_content_context_t v4 = Value;
    pthread_mutex_lock(Value);
    (*(void (**)(uint64_t))(a2 + 16))(a2);
    return pthread_mutex_unlock(v4);
  }
  else
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t))(a2 + 16);
    return v6(a2);
  }
}

void __udpconnection_cleanUp_block_invoke(uint64_t a1)
{
}

void __udpconnection_cleanUp_block_invoke_2(uint64_t a1)
{
}

uint64_t udpconnection_createUDPParameters(uint64_t a1, const __CFString *a2, NSObject **a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)&address.sa_len = 0;
  *(void *)&address.sa_data[6] = 0;
  int v21 = 0;
  uint64_t v20 = 0;
  if (!a3
    || (uint64_t v6 = DerivedStorage,
        (secure_udp = nw_parameters_create_secure_udp((nw_parameters_configure_protocol_block_t)*MEMORY[0x1E4F38C90], (nw_parameters_configure_protocol_block_t)*MEMORY[0x1E4F38C88])) == 0))
  {
    APSLogErrorAt();
    uint64_t v16 = APSSignalErrorAt();
    uint64_t v13 = 0;
    int v8 = 0;
LABEL_33:
    nw_protocol_stack_t v10 = 0;
LABEL_34:
    options = 0;
    goto LABEL_30;
  }
  int v8 = secure_udp;
  nw_protocol_stack_t v9 = nw_parameters_copy_default_protocol_stack(secure_udp);
  if (!v9)
  {
    APSLogErrorAt();
    uint64_t v16 = APSSignalErrorAt();
    uint64_t v13 = 0;
    goto LABEL_33;
  }
  nw_protocol_stack_t v10 = v9;
  APTransportConnectionGetTrafficClassForSocketQoS(*(_DWORD *)(v6 + 188));
  nw_parameters_set_traffic_class();
  if (*(void *)(v6 + 288)) {
    nw_parameters_set_disable_listener_datapath();
  }
  nw_parameters_set_context();
  if (!a2)
  {
    uint64_t v13 = 0;
    options = 0;
LABEL_23:
    if ((*(unsigned char *)(v6 + 180) & 0x10) != 0)
    {
      if (gLogCategory_APTransportConnectionUDPNW <= 30
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      nw_parameters_prohibit_interface_type(v8, nw_interface_type_cellular);
    }
    uint64_t v16 = 0;
    *a3 = v8;
    int v8 = 0;
    goto LABEL_30;
  }
  if (CFStringGetCString(a2, buffer, 16, 0x8000100u))
  {
    if (!CFStringHasPrefix(a2, @"llw") && !*(unsigned char *)(v6 + 400)) {
      goto LABEL_18;
    }
    if (*(unsigned char *)(v6 + 176))
    {
      CFAllocatorRef v11 = *(void **)(v6 + 232);
      if (v11)
      {
        CFNumberRef v12 = nw_retain(v11);
        goto LABEL_17;
      }
    }
    __int16 v23 = 0;
    int v22 = 0;
    address.sa_family = 0;
    uint64_t v15 = CUGetInterfaceAddresses();
    if (v15)
    {
      uint64_t v16 = v15;
      APSLogErrorAt();
      if (gLogCategory_APTransportConnectionUDPNW <= 90
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      if (address.sa_family == 30 || (APSLogErrorAt(), uint64_t v18 = APSSignalErrorAt(), !v18))
      {
        CFNumberRef v12 = nw_endpoint_create_address(&address);
        if (v12)
        {
LABEL_17:
          nw_parameters_set_local_endpoint(v8, v12);
          nw_release(v12);
          if (!*(unsigned char *)(v6 + 176))
          {
            options = (void *)nw_replicate_create_options();
            if (!options)
            {
              APSLogErrorAt();
              uint64_t v16 = APSSignalErrorAt();
              uint64_t v13 = 0;
              goto LABEL_30;
            }
            nw_protocol_stack_append_application_protocol();
            goto LABEL_21;
          }
LABEL_18:
          options = 0;
LABEL_21:
          uint64_t v13 = nw_interface_create_with_name();
          if (!v13)
          {
            APSLogErrorAt();
            uint64_t v16 = APSSignalErrorAt();
            goto LABEL_30;
          }
          nw_parameters_require_interface(v8, v13);
          goto LABEL_23;
        }
        APSLogErrorAt();
        uint64_t v16 = APSSignalErrorAt();
        goto LABEL_50;
      }
      uint64_t v16 = v18;
    }
    APSLogErrorAt();
LABEL_50:
    uint64_t v13 = 0;
    goto LABEL_34;
  }
  APSLogErrorAt();
  if (gLogCategory_APTransportConnectionUDPNW <= 50
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v13 = 0;
  options = 0;
  uint64_t v16 = 4294894974;
LABEL_30:
  nw_release(v13);
  nw_release(v8);
  nw_release(v10);
  nw_release(0);
  nw_release(options);
  return v16;
}

uint64_t udpconnectionAggregate_CopyDebugDescription()
{
  return CFStringCreateF();
}

uint64_t udpconnectionAggregate_Clone(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (!a1)
  {
    uint64_t v15 = 4294894974;
LABEL_18:
    APSLogErrorAt();
    return v15;
  }
  if (!a3)
  {
    uint64_t v15 = 4294894974;
    goto LABEL_18;
  }
  uint64_t v7 = DerivedStorage;
  if (*(unsigned char *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294894970;
  }
  else if (*(unsigned char *)(DerivedStorage + 176))
  {
    APSLogErrorAt();
    return 4294894975;
  }
  else
  {
    uint64_t v8 = APTransportConnectionUDPNWCreate(*MEMORY[0x1E4F1CF80], a2, *(_DWORD *)(DerivedStorage + 180), *(_DWORD *)(DerivedStorage + 184), *(const __CFDictionary **)(DerivedStorage + 24), &cf);
    if (v8)
    {
      uint64_t v15 = v8;
      APSLogErrorAt();
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      uint64_t v9 = CMBaseObjectGetDerivedStorage();
      long long v10 = *(_OWORD *)(v7 + 240);
      *(_OWORD *)(v9 + 252) = *(_OWORD *)(v7 + 252);
      *(_OWORD *)(v9 + 240) = v10;
      *(_DWORD *)(v9 + 280) = *(_DWORD *)(v7 + 280);
      CFAllocatorRef v11 = *(const void **)(v9 + 216);
      CFNumberRef v12 = *(const void **)(v7 + 216);
      *(void *)(v9 + 216) = v12;
      if (v12) {
        CFRetain(v12);
      }
      if (v11) {
        CFRelease(v11);
      }
      uint64_t v13 = *(const void **)(v9 + 272);
      CFTypeID v14 = *(const void **)(v7 + 272);
      *(void *)(v9 + 272) = v14;
      if (v14) {
        CFRetain(v14);
      }
      if (v13) {
        CFRelease(v13);
      }
      uint64_t v15 = 0;
      *a3 = cf;
    }
  }
  return v15;
}

uint64_t udpconnectionAggregate_AddSubConnection(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v10 = 0;
  if (!a2)
  {
    uint64_t RemoteEndpoint = 4294894974;
LABEL_15:
    APSLogErrorAt();
    uint64_t v7 = 0;
    goto LABEL_12;
  }
  uint64_t v5 = DerivedStorage;
  if ((_UNKNOWN *)CMBaseObjectGetVTable() != &kAPTransportConnectionUDPVTable)
  {
    uint64_t RemoteEndpoint = 4294894974;
    goto LABEL_15;
  }
  if (*(unsigned char *)v5)
  {
    APSLogErrorAt();
    uint64_t v7 = 0;
    uint64_t RemoteEndpoint = 4294894970;
  }
  else if (*(unsigned char *)(v5 + 176))
  {
    APSLogErrorAt();
    uint64_t v7 = 0;
    uint64_t RemoteEndpoint = 4294894975;
  }
  else if (*(void *)(v5 + 320))
  {
    if (gLogCategory_APTransportConnectionUDPNW <= 50
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t RemoteEndpoint = udpconnection_createRemoteEndpoint(a2, (uint64_t *)&v10);
    if (RemoteEndpoint)
    {
      APSLogErrorAt();
      uint64_t v7 = v10;
    }
    else
    {
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 0x40000000;
      v9[2] = __udpconnectionAggregate_AddSubConnection_block_invoke;
      void v9[3] = &__block_descriptor_tmp_101;
      uint64_t v7 = v10;
      v9[4] = v5;
      void v9[5] = v10;
      udpconnection_runLockedInlineIfNecessary(a1, (uint64_t)v9);
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v7 = 0;
    uint64_t RemoteEndpoint = 4294894968;
  }
LABEL_12:
  nw_release(v7);
  return RemoteEndpoint;
}

uint64_t udpconnectionAggregate_RemoveSubConnection(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v10 = 0;
  if (!a2)
  {
    uint64_t RemoteEndpoint = 4294894974;
LABEL_15:
    APSLogErrorAt();
    uint64_t v7 = 0;
    goto LABEL_12;
  }
  uint64_t v5 = DerivedStorage;
  if ((_UNKNOWN *)CMBaseObjectGetVTable() != &kAPTransportConnectionUDPVTable)
  {
    uint64_t RemoteEndpoint = 4294894974;
    goto LABEL_15;
  }
  if (*(unsigned char *)v5)
  {
    APSLogErrorAt();
    uint64_t v7 = 0;
    uint64_t RemoteEndpoint = 4294894970;
  }
  else if (*(unsigned char *)(v5 + 176))
  {
    APSLogErrorAt();
    uint64_t v7 = 0;
    uint64_t RemoteEndpoint = 4294894975;
  }
  else if (*(void *)(v5 + 320))
  {
    if (gLogCategory_APTransportConnectionUDPNW <= 50
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t RemoteEndpoint = udpconnection_createRemoteEndpoint(a2, (uint64_t *)&v10);
    if (RemoteEndpoint)
    {
      APSLogErrorAt();
      uint64_t v7 = v10;
    }
    else
    {
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 0x40000000;
      v9[2] = __udpconnectionAggregate_RemoveSubConnection_block_invoke;
      void v9[3] = &__block_descriptor_tmp_104;
      uint64_t v7 = v10;
      v9[4] = v5;
      void v9[5] = v10;
      udpconnection_runLockedInlineIfNecessary(a1, (uint64_t)v9);
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v7 = 0;
    uint64_t RemoteEndpoint = 4294894968;
  }
LABEL_12:
  nw_release(v7);
  return RemoteEndpoint;
}

uint64_t udpconnection_createRemoteEndpoint(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  __int16 v10 = 0;
  *(_DWORD *)buffer = 0;
  CFStringRef v4 = *(const __CFString **)(DerivedStorage + 216);
  if (v4 && CFStringHasPrefix(v4, @"llw") && !*(void *)(DerivedStorage + 272))
  {
    uint64_t v7 = 4294894967;
    APSLogErrorAt();
    goto LABEL_7;
  }
  CFDataRef v5 = *(const __CFData **)(DerivedStorage + 272);
  if (!v5)
  {
    uint64_t address = (uint64_t)nw_endpoint_create_address((const sockaddr *)(DerivedStorage + 240));
    if (address) {
      goto LABEL_6;
    }
LABEL_9:
    APSLogErrorAt();
    uint64_t v7 = APSSignalErrorAt();
    goto LABEL_7;
  }
  v11.location = 0;
  v11.CFIndex length = 6;
  CFDataGetBytes(v5, v11, buffer);
  uint64_t address = nw_endpoint_create_address_with_ethernet();
  if (!address) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v7 = 0;
  *a2 = address;
LABEL_7:
  nw_release(0);
  return v7;
}

uint64_t udpconnection_DumpHierarchy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 144) == 5)
  {
    uint64_t v11 = DerivedStorage;
    CFNumberRef v12 = nw_connection_copy_connected_path();
    uint64_t v13 = nw_path_copy_effective_local_endpoint(v12);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, a3, "Connection:[%{ptr}] (UDPNW) %''@ Remote:%##a%?s%?lu Parent:[%{ptr}]\n", a1, a4, v11 + 240, *(_DWORD *)(v11 + 284) != 0, " IDX:", *(_DWORD *)(v11 + 284) != 0, *(unsigned int *)(v11 + 284), a2);
    if (v14)
    {
      uint64_t v16 = v14;
LABEL_10:
      APSLogErrorAt();
      goto LABEL_8;
    }
    uint64_t address = nw_endpoint_get_address(v13);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, a3 + 1, "Listener Local:%##a Parent:[%{ptr}]\n", address, a1);
    if (v16) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, a3, "Connection:[%{ptr}] (UDPNW) %''@ (Not Connected) Parent:[%{ptr}]\n", a1, a4, a2);
    if (v16) {
      APSLogErrorAt();
    }
    CFNumberRef v12 = 0;
    uint64_t v13 = 0;
  }
LABEL_8:
  nw_release(v12);
  nw_release(v13);
  return v16;
}

uint64_t udpconnection_Resume(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 8));
  int valuePtr = 0;
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportConnectionUDPNW <= 30
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(void *)(v3 + 152) || !*(void *)(v3 + 160))
  {
    APSLogErrorAt();
    int v23 = -72327;
    goto LABEL_53;
  }
  if (*(_DWORD *)(v3 + 192) != 3)
  {
LABEL_15:
    if (*(unsigned char *)(v3 + 176))
    {
      if (gLogCategory_APTransportConnectionUDPNW <= 30
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v7 = CMBaseObjectGetDerivedStorage();
      CFStringRef v33 = 0;
      uint64_t v29 = 0;
      long long v30 = &v29;
      uint64_t v31 = 0x2000000000;
      int v32 = 0;
      dispatch_semaphore_t v8 = dispatch_semaphore_create(0);
      if (!v8)
      {
        APSLogErrorAt();
        int v19 = APSSignalErrorAt();
LABEL_40:
        nw_release(v33);
        _Block_object_dispose(&v29, 8);
        int valuePtr = v19;
        if (!v19) {
          goto LABEL_41;
        }
        goto LABEL_71;
      }
      uint64_t v9 = v8;
      int v10 = udpconnection_createUDPParameters((uint64_t)a1, *(const __CFString **)(v7 + 216), &v33);
      if (v10)
      {
        int v19 = v10;
        APSLogErrorAt();
      }
      else
      {
        nw_listener_t v11 = nw_listener_create(v33);
        *(void *)(v7 + 304) = v11;
        if (v11 && (v12 = v11, (uint64_t v13 = FigDispatchQueueCreateWithPriority()) != 0))
        {
          uint64_t v14 = v13;
          nw_listener_set_queue(*(nw_listener_t *)(v7 + 304), v13);
          uint64_t v15 = *(NSObject **)(v7 + 304);
          handler[0] = MEMORY[0x1E4F143A8];
          handler[1] = 0x40000000;
          handler[2] = __udpconnection_setupListenerNW_block_invoke;
          handler[3] = &__block_descriptor_tmp_122;
          handler[4] = v7;
          void handler[5] = a1;
          nw_listener_set_new_connection_handler(v15, handler);
          dispatch_retain(v9);
          uint64_t v16 = *(void *)(v7 + 304);
          v27[0] = MEMORY[0x1E4F143A8];
          v27[1] = 0x40000000;
          v27[2] = __udpconnection_setupListenerNW_block_invoke_2;
          v27[3] = &unk_1E688B4E8;
          v27[4] = &v29;
          v27[5] = v9;
          void v27[6] = v12;
          v27[7] = v14;
          MEMORY[0x1D25E6F70](v16, v27);
          if (gLogCategory_APTransportConnectionUDPNW <= 30
            && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v26[0] = MEMORY[0x1E4F143A8];
          v26[1] = 0x40000000;
          socklen_t v26[2] = __udpconnection_setupListenerNW_block_invoke_3;
          v26[3] = &__block_descriptor_tmp_131;
          v26[4] = v7;
          udpconnection_runLockedInlineIfNecessary((uint64_t)a1, (uint64_t)v26);
          dispatch_time_t v17 = dispatch_time(0, 10000000000);
          if (dispatch_semaphore_wait(v9, v17))
          {
            APSLogErrorAt();
            if (gLogCategory_APTransportConnectionUDPNW <= 90
              && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            int v19 = -6722;
            goto LABEL_39;
          }
          if (*((_DWORD *)v30 + 6))
          {
            APSLogErrorAt();
            int v19 = 0;
            if (gLogCategory_APTransportConnectionUDPNW > 90) {
              goto LABEL_39;
            }
            if (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()) {
              LogPrintF();
            }
          }
          else
          {
            uint64_t v18 = CMBaseObjectGetDerivedStorage();
            uint64_t v34 = MEMORY[0x1E4F143A8];
            uint64_t v35 = 0x40000000;
            long long v36 = __udpconnection_setLocalNetworkInfo_block_invoke;
            uint64_t v37 = &__block_descriptor_tmp_136;
            uint64_t v38 = v18;
            udpconnection_runLockedInlineIfNecessary((uint64_t)a1, (uint64_t)&v34);
            if (!*(unsigned char *)(v7 + 400))
            {
              if (!*(void *)(v7 + 288))
              {
                int v21 = udpconnection_setupNWConnection((uint64_t)a1, 0);
                if (v21)
                {
                  int v19 = v21;
                  APSLogErrorAt();
                  if (gLogCategory_APTransportConnectionUDPNW <= 90
                    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
                  {
                    LogPrintF();
                  }
                  goto LABEL_39;
                }
              }
              CFStringRef v22 = *(const __CFString **)(v7 + 216);
              if (v22)
              {
                if (CFStringHasPrefix(v22, @"llw") && *(_DWORD *)(v7 + 192) == 3)
                {
                  if (gLogCategory_APTransportConnectionUDPNW <= 50
                    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
                  {
                    LogPrintF();
                  }
                  uint64_t v34 = MEMORY[0x1E4F143A8];
                  uint64_t v35 = 0x40000000;
                  long long v36 = __udpconnection_setupListenerNW_block_invoke_4;
                  uint64_t v37 = &__block_descriptor_tmp_135;
                  uint64_t v38 = v7;
                  udpconnection_runLockedInlineIfNecessary((uint64_t)a1, (uint64_t)&v34);
                  int v19 = 0;
                  *(void *)(v7 + 304) = 0;
                  goto LABEL_39;
                }
              }
            }
          }
          int v19 = 0;
        }
        else
        {
          APSLogErrorAt();
          int v19 = APSSignalErrorAt();
        }
      }
LABEL_39:
      dispatch_release(v9);
      goto LABEL_40;
    }
    if (*(unsigned char *)(v3 + 241) && *(_DWORD *)(v3 + 280))
    {
      int valuePtr = udpconnection_setupNWConnection((uint64_t)a1, 0);
      if (!valuePtr)
      {
LABEL_41:
        udpconnection_callEventCallback(a1, 0, 0);
        goto LABEL_42;
      }
      goto LABEL_71;
    }
    if (gLogCategory_APTransportConnectionUDPNW <= 90
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    int v23 = -72320;
LABEL_53:
    int valuePtr = v23;
    goto LABEL_54;
  }
  uint64_t v4 = *(void *)(v3 + 72);
  if (v4)
  {
    __swp(v4 + 16, (unsigned int *)(v4 + 16));
    if (((v4 + 16) & 1) == 0)
    {
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFDataRef v5 = *(NSObject **)(v4 + 40);
      uint64_t v6 = (void *)CFRetain((CFTypeRef)v4);
      dispatch_async_f(v5, v6, (dispatch_function_t)udpconnectionInlineInactivityMonitor_fire);
    }
    goto LABEL_15;
  }
  APSLogErrorAt();
  int valuePtr = -72322;
LABEL_71:
  APSLogErrorAt();
LABEL_54:
  *(_DWORD *)(v3 + 144) = 4;
  CFNumberRef v24 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  udpconnection_callEventCallback(a1, 4, v24);
  if (v24) {
    CFRelease(v24);
  }
LABEL_42:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 8));
  return 0;
}

uint64_t udpconnection_AddEventCallback(const void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    uint64_t v8 = 4294894974;
LABEL_11:
    APSLogErrorAt();
    return v8;
  }
  if (!a3)
  {
    uint64_t v8 = 4294894974;
    goto LABEL_11;
  }
  if (!a4)
  {
    uint64_t v8 = 4294894974;
    goto LABEL_11;
  }
  dispatch_retain(a4);
  if (a1) {
    CFRetain(a1);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t udpconnection_RemoveEventCallback()
{
  return APSDispatchSyncTask();
}

uint64_t udpconnection_AcquirePackage(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 8));
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)v5)
  {
    APSLogErrorAt();
    uint64_t v11 = APSSignalErrorAt();
    uint64_t v9 = 0;
    if (!v11) {
      goto LABEL_8;
    }
    uint64_t v9 = v11;
LABEL_12:
    APSLogErrorAt();
    goto LABEL_8;
  }
  uint64_t v6 = *(uint64_t (**)(CFAllocatorRef, uint64_t))(v5 + 160);
  CFAllocatorRef v7 = CFGetAllocator(a1);
  uint64_t v8 = v6(v7, a2);
  if (v8)
  {
    uint64_t v9 = v8;
    APSLogErrorAt();
    goto LABEL_12;
  }
  if (gLogCategory_APTransportConnectionUDPNW <= 30
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v9 = 0;
LABEL_8:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 8));
  return v9;
}

uint64_t udpconnection_AcquirePackageWithMessageSize(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 8));
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)v7)
  {
    APSLogErrorAt();
    uint64_t v13 = APSSignalErrorAt();
    uint64_t v11 = 0;
    if (!v13) {
      goto LABEL_9;
    }
    uint64_t v11 = v13;
LABEL_14:
    APSLogErrorAt();
    goto LABEL_9;
  }
  uint64_t v8 = *(uint64_t (**)(CFAllocatorRef, uint64_t, uint64_t))(v7 + 168);
  if (!v8)
  {
    APSLogErrorAt();
    uint64_t v11 = 4294894969;
    goto LABEL_14;
  }
  CFAllocatorRef v9 = CFGetAllocator(a1);
  uint64_t v10 = v8(v9, a2, a3);
  if (v10)
  {
    uint64_t v11 = v10;
    APSLogErrorAt();
    goto LABEL_14;
  }
  if (gLogCategory_APTransportConnectionUDPNW <= 30
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v11 = 0;
LABEL_9:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 8));
  return v11;
}

uint64_t udpconnection_RelinquishPackage(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

uint64_t udpconnection_SendPackage(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
  {
    uint64_t v10 = 4294894974;
LABEL_18:
    APSLogErrorAt();
    return v10;
  }
  if (!a2)
  {
    uint64_t v10 = 4294894974;
    goto LABEL_18;
  }
  if (*(unsigned char *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294894970;
  }
  else
  {
    int v5 = *(_DWORD *)(DerivedStorage + 192);
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    uint64_t v7 = v6;
    if (v5 == 3)
    {
      if (*(_DWORD *)(v6 + 144) == 5)
      {
        uint64_t v8 = *(void *)(v6 + 72);
        *(void *)(v8 + 72) = mach_absolute_time();
        APSWrapperGetValue();
        if (FigSimpleMutexTryLock())
        {
          udpconnection_sendPackageInternal(a1, a2, *(_DWORD *)(v7 + 196) != 0);
          CFStringRef Value = (pthread_mutex_t *)APSWrapperGetValue();
          pthread_mutex_unlock(Value);
        }
        else if (gLogCategory_APTransportConnectionUDPNW <= 30 {
               && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
        }
        {
          LogPrintF();
        }
      }
      return 0;
    }
    else
    {
      CFTypeRef cf = CFRetain(a1);
      CFTypeRef v13 = CFRetain(a2);
      if (APSAtomicMessageQueueSendMessage())
      {
        CFTypeRef cf = 0;
        CFTypeRef v13 = 0;
        APSRealTimeSignalRaise();
        uint64_t v10 = 0;
      }
      else
      {
        APSLogErrorAt();
        uint64_t v10 = 4294960549;
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v13) {
        CFRelease(v13);
      }
    }
  }
  return v10;
}

uint64_t udpconnection_SendBatch(const void *a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!a1)
  {
    uint64_t v10 = 4294894974;
LABEL_19:
    APSLogErrorAt();
    return v10;
  }
  if (!a2)
  {
    uint64_t v10 = 4294894974;
    goto LABEL_19;
  }
  int v5 = DerivedStorage;
  if (*DerivedStorage)
  {
    APSLogErrorAt();
    return 4294894970;
  }
  if (CFArrayGetCount(a2) < 1) {
    return 0;
  }
  int v6 = *((_DWORD *)v5 + 48);
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  if (v6 == 3)
  {
    if (*(_DWORD *)(v7 + 144) == 5)
    {
      uint64_t v8 = *(void *)(v7 + 72);
      *(void *)(v8 + 72) = mach_absolute_time();
      APSWrapperGetValue();
      if (FigSimpleMutexTryLock())
      {
        udpconnection_sendBatchInternal((uint64_t)a1, a2);
        CFStringRef Value = (pthread_mutex_t *)APSWrapperGetValue();
        pthread_mutex_unlock(Value);
      }
      else if (gLogCategory_APTransportConnectionUDPNW <= 30 {
             && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      }
      {
        LogPrintF();
      }
    }
    return 0;
  }
  CFTypeRef cf = CFRetain(a1);
  CFTypeRef v13 = CFRetain(a2);
  if (APSAtomicMessageQueueSendMessage())
  {
    CFTypeRef cf = 0;
    CFTypeRef v13 = 0;
    APSRealTimeSignalRaise();
    uint64_t v10 = 0;
  }
  else
  {
    APSLogErrorAt();
    uint64_t v10 = 4294960549;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v10;
}

uint64_t udpconnection_RunInline()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 192) != 3) {
    return 4294894975;
  }
  uint64_t v1 = DerivedStorage;
  uint64_t v2 = *(void *)(DerivedStorage + 72);
  *(void *)(v2 + 72) = mach_absolute_time();
  if ((atomic_fetch_or_explicit((atomic_uint *volatile)APSWrapperGetValue(), 0, memory_order_relaxed) & 3) != 1)
  {
    APSRealTimeSignalRaise();
    return 0;
  }
  CFStringRef Value = (pthread_mutex_t *)APSWrapperGetValue();
  if (udpconnection_runInlineInternal(Value, *(void *)(v1 + 32), 0)
    || gLogCategory_APTransportConnectionUDPNW > 30)
  {
    return 0;
  }
  if (gLogCategory_APTransportConnectionUDPNW != -1 || (uint64_t result = _LogCategory_Initialize(), result))
  {
    LogPrintF();
    return 0;
  }
  return result;
}

uint64_t udpconnection_setupNWConnection(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  nw_endpoint_t v19 = 0;
  uint64_t v20 = 0;
  if (DerivedStorage[37])
  {
    APSLogErrorAt();
    if (gLogCategory_APTransportConnectionUDPNW <= 90
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    nw_endpoint_t v10 = 0;
    uint64_t v15 = 0;
    CFAllocatorRef v9 = 0;
    uint64_t v14 = 0;
    goto LABEL_20;
  }
  int v5 = DerivedStorage;
  int v6 = (const void *)DerivedStorage[26];
  uint64_t v7 = (const void *)DerivedStorage[6];
  uint64_t v8 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (!v8)
  {
    uint64_t v15 = 4294894973;
    APSLogErrorAt();
LABEL_28:
    nw_endpoint_t v10 = 0;
    CFAllocatorRef v9 = 0;
    goto LABEL_34;
  }
  if (a2)
  {
    CFAllocatorRef v9 = nw_retain(a2);
    nw_endpoint_t v10 = 0;
    goto LABEL_8;
  }
  uint64_t v11 = udpconnection_createUDPParameters(a1, (const __CFString *)v5[27], &v20);
  if (v11)
  {
    uint64_t v15 = v11;
    APSLogErrorAt();
    if (gLogCategory_APTransportConnectionUDPNW <= 90
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_28;
  }
  uint64_t RemoteEndpoint = udpconnection_createRemoteEndpoint(a1, (uint64_t *)&v19);
  if (RemoteEndpoint)
  {
    uint64_t v15 = RemoteEndpoint;
    APSLogErrorAt();
    CFAllocatorRef v9 = 0;
    uint64_t v14 = 0;
    nw_endpoint_t v10 = v19;
    goto LABEL_21;
  }
  nw_endpoint_t v10 = v19;
  CFAllocatorRef v9 = nw_connection_create(v19, v20);
  if (v9)
  {
LABEL_8:
    CFTypeRef v13 = nw_retain(v9);
    v5[37] = v13;
    uint64_t v14 = nw_connection_copy_description(v13);
    if (v14
      && gLogCategory_APTransportConnectionUDPNW <= 50
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*((_DWORD *)v5 + 48) != 3) {
      nw_connection_set_queue(v9, (dispatch_queue_t)v5[5]);
    }
    if (v6) {
      CFRetain(v6);
    }
    if (v7) {
      CFRetain(v7);
    }
    nw_retain(v9);
    nw_retain(v10);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = __udpconnection_setupNWConnection_block_invoke;
    handler[3] = &__block_descriptor_tmp_143;
    handler[4] = a1;
    void handler[5] = v6;
    void handler[6] = v7;
    handler[7] = v8;
    handler[8] = v9;
    handler[9] = v10;
    nw_connection_set_state_changed_handler(v9, handler);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 0x40000000;
    v17[2] = __udpconnection_setupNWConnection_block_invoke_2;
    v17[3] = &__block_descriptor_tmp_144;
    v17[4] = v9;
    udpconnection_runLockedInlineIfNecessary(a1, (uint64_t)v17);
    uint64_t v15 = 0;
LABEL_20:
    uint64_t v8 = 0;
    goto LABEL_21;
  }
  APSLogErrorAt();
  uint64_t v15 = APSSignalErrorAt();
LABEL_34:
  uint64_t v14 = 0;
LABEL_21:
  free(v14);
  nw_release(v10);
  nw_release(v20);
  nw_release(v9);
  if (v8) {
    free(v8);
  }
  return v15;
}

unsigned char *udpconnection_callEventCallback(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    if (a3) {
      CFRetain(a3);
    }
    if (a1) {
      CFRetain(a1);
    }
    return (unsigned char *)APSDispatchAsyncFHelper();
  }
  return result;
}

void udpconnectionInlineInactivityMonitor_fire(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  char v13 = 0;
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 72);
    if (MillisecondsToUpTicks() + v3 > v2)
    {
      if (*(unsigned char *)(a1 + 64))
      {
        if (gLogCategory_APTransportConnectionUDPNW <= 50
          && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        *(unsigned char *)(a1 + 64) = 0;
      }
      int64_t v4 = UpTicksToNanoseconds();
      dispatch_time_t v5 = dispatch_time(0, v4);
      int v6 = *(NSObject **)(a1 + 40);
      uint64_t v7 = (void *)CFRetain((CFTypeRef)a1);
      dispatch_after_f(v5, v6, v7, (dispatch_function_t)udpconnectionInlineInactivityMonitor_fire);
      goto LABEL_20;
    }
    if (!*(unsigned char *)(a1 + 64))
    {
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(unsigned char *)(a1 + 64) = 1;
    }
    uint64_t v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    CFStringRef Value = (pthread_mutex_t *)APSWrapperGetValue();
    udpconnection_runInlineInternal(Value, *(void *)(a1 + 48), &v13);
    if (v13 && (*(unsigned char *)(a1 + 17) & 1) != 0)
    {
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      nw_context_cancel();
      if (!v8) {
        goto LABEL_20;
      }
    }
    else
    {
      dispatch_time_t v10 = dispatch_time(0, 20000000);
      uint64_t v11 = *(NSObject **)(a1 + 40);
      nw_listener_t v12 = (void *)CFRetain((CFTypeRef)a1);
      dispatch_after_f(v10, v11, v12, (dispatch_function_t)udpconnectionInlineInactivityMonitor_fire);
      if (!v8)
      {
LABEL_20:
        CFRelease((CFTypeRef)a1);
        return;
      }
    }
    CFRelease(v8);
    goto LABEL_20;
  }
}

uint64_t udpconnection_runInlineInternal(pthread_mutex_t *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = FigSimpleMutexTryLock();
  if (v5)
  {
    kdebug_trace();
    char v6 = nw_context_run_queued_blocks_inline();
    kdebug_trace();
    pthread_mutex_unlock(a1);
    if (a3) {
      *a3 = v6 ^ 1;
    }
  }
  return v5;
}

void __udpconnection_setupListenerNW_block_invoke(uint64_t a1, nw_connection_t connection)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v3 + 400) && !*(void *)(v3 + 296))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    udpconnection_setupNWConnection(v4, connection);
  }
  else
  {
    if (gLogCategory_APTransportConnectionUDPNW <= 90
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    nw_connection_cancel(connection);
  }
}

void __udpconnection_setupListenerNW_block_invoke_2(uint64_t a1, int a2, nw_error_t error)
{
  if (error) {
    int error_code = nw_error_get_error_code(error);
  }
  else {
    int error_code = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = error_code;
  if (gLogCategory_APTransportConnectionUDPNW <= 30
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2 == 3 || error)
  {
    if (gLogCategory_APTransportConnectionUDPNW > 90
      || gLogCategory_APTransportConnectionUDPNW == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  if (a2 != 4)
  {
    if (a2 != 2)
    {
      if (a2 == 1
        && gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        nw_listener_get_port(*(nw_listener_t *)(a1 + 48));
        LogPrintF();
      }
      return;
    }
    if (gLogCategory_APTransportConnectionUDPNW > 50
      || gLogCategory_APTransportConnectionUDPNW == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_27;
    }
    nw_listener_get_port(*(nw_listener_t *)(a1 + 48));
LABEL_25:
    LogPrintF();
LABEL_27:
    uint64_t v7 = *(NSObject **)(a1 + 40);
    dispatch_semaphore_signal(v7);
    return;
  }
  if (gLogCategory_APTransportConnectionUDPNW <= 50
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  nw_release(*(void **)(a1 + 48));
  dispatch_release(*(dispatch_object_t *)(a1 + 56));
  uint64_t v8 = *(NSObject **)(a1 + 40);
  dispatch_release(v8);
}

void __udpconnection_setupListenerNW_block_invoke_3(uint64_t a1)
{
}

void __udpconnection_setupListenerNW_block_invoke_4(uint64_t a1)
{
}

uint64_t __udpconnection_setLocalNetworkInfo_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  nw_release(*(void **)(*(void *)(a1 + 32) + 232));
  *(void *)(*(void *)(a1 + 32) + 232) = 0;
  unsigned int port = nw_listener_get_port(*(nw_listener_t *)(*(void *)(a1 + 32) + 304));
  uint64_t v3 = *(void *)(a1 + 32);
  *(_DWORD *)(v3 + 224) = port;
  if (*(unsigned char *)(v3 + 268))
  {
    *(_DWORD *)&address.sa_data[10] = 0;
    *(void *)&address.sa_data[2] = 0;
    *(_WORD *)&address.sa_len = 528;
    *(_WORD *)address.sa_data = __rev16(port);
    uint64_t result = (uint64_t)nw_endpoint_create_address(&address);
  }
  else
  {
    uint64_t result = nw_listener_copy_local_endpoint();
  }
  *(void *)(*(void *)(a1 + 32) + 232) = result;
  return result;
}

uint64_t __udpconnection_setupNWConnection_block_invoke(void *a1, int a2, void *a3)
{
  uint64_t v6 = APSRealTimeAllocatorAllocate();
  *(void *)uint64_t v6 = a1[4];
  *(void *)(v6 + 8) = a1[5];
  *(void *)(v6 + 16) = a1[6];
  *(void *)(v6 + 24) = a1[7];
  *(void *)(v6 + 32) = a1[8];
  *(void *)(v6 + 40) = a1[9];
  *(_DWORD *)(v6 + 48) = a2;
  *(void *)(v6 + 56) = nw_retain(a3);
  uint64_t v7 = a1[6];
  return MEMORY[0x1F4107C68](v7, udpconnection_handleNWConnectionStateChange, v6);
}

void udpconnection_handleNWConnectionStateChange(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2) {
    LODWORD(v2) = nw_error_get_error_code(v2);
  }
  int valuePtr = (int)v2;
  uint64_t v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v39 = 0;
  CFDataRef v40 = &v39;
  uint64_t v41 = 0x2000000000;
  uint64_t v42 = 0;
  uint64_t v35 = 0;
  long long v36 = &v35;
  uint64_t v37 = 0x2000000000;
  uint64_t v38 = 0;
  nw_endpoint_get_port(*(nw_endpoint_t *)(a1 + 40));
  CFNumberRef v5 = 0;
  nw_endpoint_get_hostname(*(nw_endpoint_t *)(a1 + 40));
  switch(*(_DWORD *)(a1 + 48))
  {
    case 1:
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFNumberRef v5 = 0;
      goto LABEL_41;
    case 3:
      if (!v3) {
        goto LABEL_26;
      }
      v34[0] = MEMORY[0x1E4F143A8];
      v34[1] = 0x40000000;
      v34[2] = __udpconnection_handleNWConnectionStateChange_block_invoke;
      v34[3] = &unk_1E688B5B0;
      v34[4] = &v35;
      v34[5] = a1;
      udpconnection_runLockedInlineIfNecessary((uint64_t)v3, (uint64_t)v34);
      uint64_t v6 = v36[3];
      if (v6)
      {
        uint64_t v7 = nw_parameters_copy_local_endpoint(v6);
        uint64_t v8 = v7;
        if (v7)
        {
          nw_endpoint_get_port(v7);
          nw_endpoint_get_hostname(v8);
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      APTTrafficMetricsConnectionFormed(*(void *)(DerivedStorage + 408));
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 8));
      CFStringRef v16 = *(const __CFString **)(DerivedStorage + 216);
      if (v16 && CFStringHasPrefix(v16, @"llw") && !*(unsigned char *)(DerivedStorage + 176))
      {
        dispatch_time_t v17 = (void *)nw_protocol_copy_replicate_definition();
        v33[0] = MEMORY[0x1E4F143A8];
        v33[1] = 0x40000000;
        v33[2] = __udpconnection_handleNWConnectionStateChange_block_invoke_2;
        v33[3] = &unk_1E688B5D8;
        v33[4] = &v39;
        v33[5] = a1;
        v33[6] = v17;
        udpconnection_runLockedInlineIfNecessary((uint64_t)v3, (uint64_t)v33);
        uint64_t v18 = v40[3];
        if (!v18)
        {
          APSSignalErrorAt();
          uint64_t v18 = v40[3];
        }
        *(void *)(DerivedStorage + 320) = v18;
        nw_release(v17);
      }
      *(_DWORD *)(DerivedStorage + 144) = 5;
      udpconnection_callEventCallback(v3, 5, 0);
      if (!*(unsigned char *)(DerivedStorage + 176)) {
        goto LABEL_92;
      }
      nw_endpoint_t v19 = *(unsigned char ***)(a1 + 24);
      uint64_t v20 = *v19;
      if (*v19)
      {
        if (v20[16]
          || (udpconnectionReceiveLoopContext_invalidateInternal((uint64_t)v20),
              int v21 = *(unsigned char ***)(a1 + 24),
              (uint64_t v20 = *v21) != 0))
        {
          CFRelease(v20);
          int v21 = *(unsigned char ***)(a1 + 24);
        }
        *int v21 = 0;
        nw_endpoint_t v19 = *(unsigned char ***)(a1 + 24);
        CFStringRef v22 = (void *)CMBaseObjectGetDerivedStorage();
        if (!v19) {
          goto LABEL_95;
        }
      }
      else
      {
        CFStringRef v22 = (void *)CMBaseObjectGetDerivedStorage();
      }
      int v23 = v22;
      if (!v22[26] || !v22[37] || !v22[5]) {
        goto LABEL_95;
      }
      if (gAPTransportConnectionUDPNWReceiveLoopContextInitOnce != -1) {
        dispatch_once_f(&gAPTransportConnectionUDPNWReceiveLoopContextInitOnce, 0, (dispatch_function_t)_APTransportConnectionUDPNWReceiveLoopContextGetTypeID);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      if (!Instance)
      {
LABEL_95:
        APSLogErrorAt();
        goto LABEL_86;
      }
      uint64_t v25 = (void *)Instance;
      *(void *)(Instance + 96) = 0;
      *(_OWORD *)(Instance + 64) = 0u;
      *(_OWORD *)(Instance + 80) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      *(_OWORD *)(Instance + 48) = 0u;
      *(_OWORD *)(Instance + 16) = 0u;
      *(void *)(Instance + 24) = v3;
      CFTypeRef v26 = (CFTypeRef)v23[26];
      if (v26) {
        CFTypeRef v26 = CFRetain(v26);
      }
      v25[4] = v26;
      v25[5] = nw_retain((void *)v23[37]);
      dispatch_retain((dispatch_object_t)v23[5]);
      v25[6] = v23[5];
      CFTypeRef v27 = (CFTypeRef)v23[7];
      if (v27) {
        CFTypeRef v27 = CFRetain(v27);
      }
      v25[7] = v27;
      CFTypeRef v28 = (CFTypeRef)v23[8];
      if (v28) {
        CFTypeRef v28 = CFRetain(v28);
      }
      v25[8] = v28;
      v25[9] = v23[19];
      CFTypeRef v29 = (CFTypeRef)v23[49];
      if (v29) {
        CFTypeRef v29 = CFRetain(v29);
      }
      v25[10] = v29;
      CFTypeRef v30 = (CFTypeRef)v23[51];
      if (v30) {
        CFTypeRef v30 = CFRetain(v30);
      }
      v25[11] = v30;
      CFTypeRef v31 = (CFTypeRef)v23[48];
      if (v31) {
        CFTypeRef v31 = CFRetain(v31);
      }
      v25[12] = v31;
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *nw_endpoint_t v19 = v25;
LABEL_86:
      uint64_t v32 = **(void **)(a1 + 24);
      if (v32)
      {
        udpconnection_receiveDataLoop(v32);
      }
      else if (gLogCategory_APTransportConnectionUDPNW <= 90 {
             && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      }
      {
        LogPrintF();
      }
LABEL_92:
      pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 8));
      CFNumberRef v5 = 0;
      if (*(void *)(DerivedStorage + 64)) {
        atomic_fetch_or_explicit((atomic_uint *volatile)APSWrapperGetValue(), 1u, memory_order_relaxed);
      }
LABEL_42:
      CFRelease(v3);
      CFAllocatorRef v9 = v8;
LABEL_43:
      if (v5) {
        CFRelease(v5);
      }
LABEL_45:
      nw_release((void *)v36[3]);
      nw_release(v9);
      uint64_t v15 = *(void **)(a1 + 56);
      if (v15) {
        nw_release(v15);
      }
      APSRealTimeAllocatorDeallocate();
      _Block_object_dispose(&v35, 8);
      _Block_object_dispose(&v39, 8);
      return;
    case 4:
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v3)
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 8));
        *(_DWORD *)(DerivedStorage + 144) = 4;
        CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
        udpconnection_callEventCallback(v3, *(unsigned int *)(DerivedStorage + 144), v5);
        pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 8));
        uint64_t v8 = 0;
        goto LABEL_42;
      }
LABEL_26:
      CFAllocatorRef v9 = 0;
      goto LABEL_45;
    case 5:
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v3)
      {
        APTTrafficMetricsConnectionClosed(*(void *)(DerivedStorage + 408));
        pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 8));
        *(_DWORD *)(DerivedStorage + 144) = 6;
        CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
        udpconnection_callEventCallback(v3, *(unsigned int *)(DerivedStorage + 144), v5);
        pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 8));
      }
      else
      {
        CFNumberRef v5 = 0;
      }
      dispatch_time_t v10 = *(unsigned char ***)(a1 + 24);
      uint64_t v11 = *v10;
      if (*v10)
      {
        if (v11[16]
          || (udpconnectionReceiveLoopContext_invalidateInternal((uint64_t)v11),
              nw_listener_t v12 = *(unsigned char ***)(a1 + 24),
              (uint64_t v11 = *v12) != 0))
        {
          CFRelease(v11);
          nw_listener_t v12 = *(unsigned char ***)(a1 + 24);
        }
        void *v12 = 0;
        dispatch_time_t v10 = *(unsigned char ***)(a1 + 24);
      }
      free(v10);
      char v13 = *(const void **)(a1 + 8);
      if (v13) {
        CFRelease(v13);
      }
      uint64_t v14 = *(const void **)(a1 + 16);
      if (v14) {
        CFRelease(v14);
      }
      nw_release(*(void **)(a1 + 32));
      nw_release(*(void **)(a1 + 40));
      goto LABEL_41;
    default:
LABEL_41:
      uint64_t v8 = 0;
      CFAllocatorRef v9 = 0;
      if (v3) {
        goto LABEL_42;
      }
      goto LABEL_43;
  }
}

void __udpconnection_setupNWConnection_block_invoke_2(uint64_t a1)
{
}

nw_parameters_t __udpconnection_handleNWConnectionStateChange_block_invoke(uint64_t a1)
{
  nw_parameters_t result = nw_connection_copy_parameters(*(nw_connection_t *)(*(void *)(a1 + 40) + 32));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

nw_protocol_metadata_t __udpconnection_handleNWConnectionStateChange_block_invoke_2(uint64_t a1)
{
  nw_protocol_metadata_t result = nw_connection_copy_protocol_metadata(*(nw_connection_t *)(*(void *)(a1 + 40) + 32), *(nw_protocol_definition_t *)(a1 + 48));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t udpconnection_receiveDataLoop(uint64_t result)
{
  if (!*(unsigned char *)(result + 16))
  {
    uint64_t v1 = (const void *)result;
    APTTrafficMetricsMessageReadStarted(*(void *)(result + 88));
    CFRetain(v1);
    return nw_connection_receive_multiple();
  }
  return result;
}

void udpconnectionReceiveLoopContext_invalidateInternal(uint64_t a1)
{
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {
    nw_release(v3);
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v4 = *(NSObject **)(a1 + 48);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(a1 + 48) = 0;
  }
  CFNumberRef v5 = *(const void **)(a1 + 56);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 56) = 0;
  }
  uint64_t v6 = *(const void **)(a1 + 64);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 64) = 0;
  }
  *(void *)(a1 + 72) = 0;
  uint64_t v7 = *(const void **)(a1 + 80);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 80) = 0;
  }
  uint64_t v8 = *(const void **)(a1 + 88);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 88) = 0;
  }
  CFAllocatorRef v9 = *(const void **)(a1 + 96);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 96) = 0;
  }
}

uint64_t _APTransportConnectionUDPNWReceiveLoopContextGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPTransportConnectionUDPNWReceiveLoopContextTypeID = result;
  return result;
}

void _APTransportConnectionUDPNWReceiveLoopContextFinalize(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16))
  {
    if (gLogCategory_APTransportConnectionUDPNW <= 90
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    udpconnectionReceiveLoopContext_invalidateInternal(a1);
  }
  if (gLogCategory_APTransportConnectionUDPNW <= 50
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void __udpconnection_receiveDataLoop_block_invoke(uint64_t a1, dispatch_data_t data, uint64_t a3, int a4, NSObject *a5)
{
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 88);
  if (data)
  {
    dispatch_data_get_size(data);
    if (!a5) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  if (a5) {
LABEL_3:
  }
    nw_error_get_error_code(a5);
LABEL_5:
  APTTrafficMetricsMessageReadFinished(v9);
  uint64_t v10 = *(void *)(a1 + 32);
  CFTypeRef cf = 0;
  CFTypeRef v22 = 0;
  if (*(unsigned char *)(v10 + 16))
  {
    int v13 = 0;
    nw_listener_t v12 = 0;
    goto LABEL_35;
  }
  if (!a5)
  {
    if (!data)
    {
      APSLogErrorAt();
      if (gLogCategory_APTransportConnectionUDPNW <= 90
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_31;
    }
    if (*(void *)(v10 + 80))
    {
      if (APSRealTimeReadableRingBufferWrite())
      {
        APSLogErrorAt();
        goto LABEL_31;
      }
      uint64_t v14 = *(void *)(v10 + 96);
      uint64_t v15 = *(uint64_t (**)(const __CFAllocator *, OpaqueCMBlockBuffer *, CFTypeRef *))(v10 + 72);
      int v24 = 0;
      uint64_t v23 = 0;
      if (v15 == APTransportPackageRTPCreateWithBBuf && APSDispatchDataCopyBytes()) {
        APSLogErrorAt();
      }
      udpconnection_markSignPostExplicit(v14);
      nw_listener_t v12 = 0;
    }
    else
    {
      nw_listener_t v12 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      if (!v12) {
        goto LABEL_32;
      }
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      APSRealTimeAllocatorGetDefault();
      if (APSCMBlockBufferCreateWithDispatchData())
      {
        APSLogErrorAt();
        APSSignalErrorAt();
        goto LABEL_32;
      }
      dispatch_time_t v17 = *(unsigned int (**)(uint64_t, CFTypeRef, CFTypeRef *))(DerivedStorage + 152);
      uint64_t Default = APSRealTimeAllocatorGetDefault();
      if (v17(Default, v22, &cf))
      {
        APSLogErrorAt();
        goto LABEL_32;
      }
      udpconnection_getSequenceNumberForPackage((uint64_t)cf);
      uint64_t v19 = CMBaseObjectGetDerivedStorage();
      udpconnection_markSignPostExplicit(*(void *)(v19 + 384));
      udpconnection_callEventCallback(v12, 7, cf);
    }
    if (*(void *)(v10 + 64)
      && (atomic_fetch_and_explicit((atomic_uint *volatile)APSWrapperGetValue(), 0xFFFFFFFD, memory_order_relaxed) & 2) != 0
      && gLogCategory_APTransportConnectionUDPNW <= 50
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_32;
  }
  int error_code = nw_error_get_error_code(a5);
  if (nw_error_get_error_domain(a5) == nw_error_domain_posix && error_code == 89)
  {
    nw_listener_t v12 = 0;
    int v13 = 1;
    goto LABEL_33;
  }
  nw_listener_t v12 = nw_error_copy_cf_error(a5);
  if (gLogCategory_APTransportConnectionUDPNW <= 90
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v12)
  {
    CFRelease(v12);
LABEL_31:
    nw_listener_t v12 = 0;
  }
LABEL_32:
  int v13 = 0;
LABEL_33:
  if (cf) {
    CFRelease(cf);
  }
LABEL_35:
  if (v22) {
    CFRelease(v22);
  }
  if (v12) {
    CFRelease(v12);
  }
  APTTrafficMetricsMessageProcessed(*(void *)(*(void *)(a1 + 32) + 88));
  if (v13 || a4)
  {
    if (!v13) {
      udpconnection_receiveDataLoop(*(void *)(a1 + 32));
    }
    uint64_t v20 = *(const void **)(a1 + 32);
    if (v20) {
      CFRelease(v20);
    }
  }
  else
  {
    APTTrafficMetricsMessageReadStarted(*(void *)(*(void *)(a1 + 32) + 88));
  }
}

uint64_t udpconnection_markSignPostExplicit(uint64_t a1)
{
  CMTime v7 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v6 = v7;
  uint64_t v5 = 0;
  uint64_t v2 = mach_absolute_time();
  CMClockMakeHostTimeFromSystemUnits(&v7, v2);
  if (a1)
  {
    CMTime v4 = v7;
    APSRealTimePTPClockGetEstimatedPTPTimeForHostTime();
  }
  CMTime v4 = v7;
  CMTimeGetSeconds(&v4);
  CMTime v4 = v6;
  CMTimeGetSeconds(&v4);
  return kdebug_trace();
}

uint64_t udpconnection_getSequenceNumberForPackage(uint64_t a1)
{
  if (!a1) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CMTime v4 = *(uint64_t (**)(uint64_t))(v3 + 24);
  if (!v4) {
    return 0;
  }
  int v5 = v4(a1);
  if (v5 != 1735550308 && v5 != 1734700576) {
    return 0;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v7 = v6 ? v6 : 0;
  uint64_t v8 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v8 || (uint64_t v9 = v8(a1)) == 0)
  {
LABEL_16:
    APSLogErrorAt();
    return 0;
  }
  uint64_t v10 = (const void *)v9;
  if (APSTransportMessageGetAudioDataHeader()) {
    APSLogErrorAt();
  }
  CFRelease(v10);
  return 0;
}

void udpconnection_deferCallEventCallback(const void **a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 128)) {
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 136), a1, (dispatch_function_t)udpconnection_callEventCallbackOnEventQueue);
  }
  uint64_t v3 = a1[2];
  if (v3) {
    CFRelease(v3);
  }
  CMTime v4 = *a1;
  if (*a1)
  {
    CFRelease(v4);
  }
}

uint64_t udpconnection_callEventCallbackOnEventQueue(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(DerivedStorage + 120);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(DerivedStorage + 128);
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  return v5(v6, v3, v4);
}

void udpconnection_addEventCallbackInternal(const void **a1)
{
  udpconnection_setEventCallback((uint64_t)a1);
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *a1;
  if (*a1)
  {
    CFRelease(v3);
  }
}

uint64_t udpconnection_setEventCallback(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)(DerivedStorage + 120) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(NSObject **)(DerivedStorage + 136);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(DerivedStorage + 136) = 0;
  }
  uint64_t v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    *(void *)(DerivedStorage + 136) = v4;
    dispatch_retain(v4);
  }
  return 0;
}

void udpconnection_sendPackageInternal(const void *a1, const void *a2, int a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_data_t v39 = 0;
  uint64_t v7 = mach_absolute_time();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(const void *))(v9 + 152);
  if (v10) {
    unint64_t v11 = v10(a2);
  }
  else {
    unint64_t v11 = 0;
  }
  __int16 SequenceNumberForPackage = udpconnection_getSequenceNumberForPackage((uint64_t)a2);
  memset(dst, 0, sizeof(dst));
  uint64_t v38 = 0;
  if (*(unsigned char *)DerivedStorage)
  {
    APSLogErrorAt();
    goto LABEL_18;
  }
  if (*(_DWORD *)(DerivedStorage + 144) != 5)
  {
LABEL_19:
    uint64_t v18 = 0;
    goto LABEL_63;
  }
  __int16 v13 = SequenceNumberForPackage;
  *(void *)src = 1;
  uint64_t v37 = 0;
  *(_WORD *)&src[2] = SequenceNumberForPackage;
  uuid_copy(dst, src);
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  CFStringRef v16 = *(uint64_t (**)(const void *))(v15 + 64);
  if (!v16 || (uint64_t v17 = v16(a2)) == 0)
  {
    APSLogErrorAt();
LABEL_18:
    APSSignalErrorAt();
    goto LABEL_19;
  }
  uint64_t v18 = (OpaqueCMBlockBuffer *)v17;
  uint64_t v19 = CMBaseObjectGetDerivedStorage();
  udpconnection_markSignPostExplicit(*(void *)(v19 + 384));
  if (APSDispatchDataCreateWithBlockBuffer()) {
    goto LABEL_74;
  }
  if (!v11)
  {
    uint64_t v20 = 0;
    goto LABEL_33;
  }
  if (v11 >= v7) {
    uint64_t v20 = UpTicksToMilliseconds();
  }
  else {
    uint64_t v20 = -UpTicksToMilliseconds();
  }
  if (v20 > *(void *)(DerivedStorage + 328))
  {
LABEL_33:
    unint64_t v21 = *(void *)(DerivedStorage + 336);
    if (v20 >= v21) {
      uint64_t v22 = *(void *)(DerivedStorage + 336);
    }
    else {
      uint64_t v22 = v20;
    }
    if (v21) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = v20;
    }
    if (*(_DWORD *)(DerivedStorage + 196))
    {
      uint64_t v24 = a3 ? *(void *)(DerivedStorage + 344) : *(void *)(DerivedStorage + 352);
      if (v24) {
        uint64_t v23 = v24;
      }
    }
    if (gLogCategory_APTransportConnectionUDPNW <= 30
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v25 = *(void *)(DerivedStorage + 376);
    if (v25)
    {
      if (gLogCategory_APTransportConnectionUDPNW <= 30)
      {
        if (gLogCategory_APTransportConnectionUDPNW != -1
          || (v26 = _LogCategory_Initialize(), uint64_t v25 = *(void *)(DerivedStorage + 376), v26))
        {
          LogPrintF();
          uint64_t v25 = *(void *)(DerivedStorage + 376);
        }
      }
      if (v25 == -1) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v25;
      }
    }
    if (!APSRecycleBinTakeItem())
    {
      uint64_t v27 = CMBaseObjectGetDerivedStorage();
      udpconnection_markSignPostExplicit(*(void *)(v27 + 384));
      nw_content_context_set_expiration_milliseconds(v38, v23);
      nw_content_context_set_packet_id();
      Datauint16_t Length = CMBlockBufferGetDataLength(v18);
      APTTrafficMetricsSendStarted(*(void *)(DerivedStorage + 408));
      if (a1) {
        CFRetain(a1);
      }
      if (a2) {
        CFRetain(a2);
      }
      nw_retain(v38);
      CFTypeRef v29 = *(NSObject **)(DerivedStorage + 296);
      completion[0] = MEMORY[0x1E4F143A8];
      completion[1] = 0x40000000;
      completion[2] = __udpconnection_sendPackageInternal_block_invoke;
      completion[3] = &__block_descriptor_tmp_175;
      __int16 v31 = v13;
      completion[4] = a1;
      completion[5] = a2;
      completion[6] = DerivedStorage;
      completion[7] = v38;
      completion[8] = DataLength;
      nw_connection_send(v29, v39, v38, 1, completion);
      goto LABEL_63;
    }
LABEL_74:
    APSLogErrorAt();
    goto LABEL_63;
  }
  if (*(unsigned char *)(DerivedStorage + 368))
  {
    if (gLogCategory_APTransportConnectionUDPNW <= 30
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v20 = *(void *)(DerivedStorage + 328) + 1;
    goto LABEL_33;
  }
  if (gLogCategory_APTransportConnectionUDPNW <= 30
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a3)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(DerivedStorage + 360), 1uLL, memory_order_relaxed);
    APSAsyncLoggerGetSharedLogger();
    uint64_t v32 = a1;
    __int16 v33 = v13;
    uint64_t v34 = v20;
    uint64_t v35 = 0;
    APSAsyncLoggerLogMessage();
  }
LABEL_63:
  if (v38)
  {
    nw_release(v38);
    uint64_t v38 = 0;
  }
  if (v39) {
    dispatch_release(v39);
  }
  if (v18) {
    CFRelease(v18);
  }
}

uint64_t udpconnection_primaryDropLogger()
{
  if (gLogCategory_APTransportConnectionUDPNW <= 90)
  {
    if (gLogCategory_APTransportConnectionUDPNW != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

void __udpconnection_sendPackageInternal_block_invoke(uint64_t a1, nw_error_t error)
{
  if (error) {
    int error_code = nw_error_get_error_code(error);
  }
  else {
    int error_code = 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  udpconnection_markSignPostExplicit(*(void *)(DerivedStorage + 384));
  if (error_code)
  {
    udpconnection_callEventCallback(*(const void **)(a1 + 32), 8, *(const void **)(a1 + 40));
    if (gLogCategory_APTransportConnectionUDPNW <= 50
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  APSRecycleBinAddItem();
  APTTrafficMetricsSendFinished(*(void *)(*(void *)(a1 + 48) + 408));
  int v5 = *(const void **)(a1 + 32);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 40);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(void **)(a1 + 56);
  nw_release(v7);
}

void udpconnection_sendBatchInternal(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex Count = CFArrayGetCount(a2);
  if (*(unsigned char *)DerivedStorage)
  {
    APSLogErrorAt();
    APSSignalErrorAt();
  }
  else if (*(_DWORD *)(DerivedStorage + 144) == 5)
  {
    CFIndex v6 = Count;
    CFIndex v7 = Count - 1;
    if (Count < 1)
    {
LABEL_8:
      int v11 = *(_DWORD *)(DerivedStorage + 196);
      uint64_t v12 = -1;
      if (v11 == 1718776692) {
        uint64_t v12 = 0;
      }
      __int16 v13 = *(NSObject **)(DerivedStorage + 296);
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 0x40000000;
      v15[2] = __udpconnection_sendBatchInternal_block_invoke;
      v15[3] = &__block_descriptor_tmp_178;
      if (v11 == 1818325876) {
        uint64_t v14 = v7;
      }
      else {
        uint64_t v14 = v12;
      }
      v15[4] = v6;
      v15[5] = a1;
      v15[6] = a2;
      v15[7] = v14;
      nw_connection_batch(v13, v15);
    }
    else
    {
      CFIndex v8 = 0;
      while (CFArrayGetValueAtIndex(a2, v8))
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v8);
        CFTypeID v10 = CFGetTypeID(ValueAtIndex);
        if (v10 != APTransportPackageGetTypeID()) {
          break;
        }
        if (v6 == ++v8) {
          goto LABEL_8;
        }
      }
      APSLogErrorAt();
    }
  }
}

void __udpconnection_sendBatchInternal_block_invoke(uint64_t a1)
{
  if (*(uint64_t *)(a1 + 32) >= 1)
  {
    CFIndex v2 = 0;
    do
    {
      uint64_t v3 = *(const void **)(a1 + 40);
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), v2);
      udpconnection_sendPackageInternal(v3, ValueAtIndex, v2++ == *(void *)(a1 + 56));
    }
    while (v2 < *(void *)(a1 + 32));
  }
}

uint64_t _APTransportConnectionUDPNWInlineInactivityMonitorGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPTransportConnectionUDPNWInlineInactivityMonitorTypeID = result;
  return result;
}

void _APTransportConnectionUDPNWInlineInactivityMonitorFinalize(void *a1)
{
  CFIndex v2 = a1[5];
  if (v2)
  {
    dispatch_release(v2);
    a1[5] = 0;
  }
  uint64_t v3 = (void *)a1[6];
  if (v3)
  {
    nw_release(v3);
    a1[6] = 0;
  }
  uint64_t v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
  int v5 = (const void *)a1[4];
  if (v5)
  {
    CFRelease(v5);
    a1[4] = 0;
  }
  if (gLogCategory_APTransportConnectionUDPNW <= 50
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

const char *APBrowserGetEventString(int a1)
{
  if ((a1 - 1) > 7) {
    return "Unknown";
  }
  else {
    return off_1E688B700[a1 - 1];
  }
}

uint64_t APBrowserGetClassID()
{
  if (APBrowserGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&APBrowserGetClassID_sRegisterOnce, &APBrowserGetClassID_sClassID, (dispatch_function_t)browser_getClassID);
  }
  return APBrowserGetClassID_sClassID;
}

uint64_t browser_getClassID(uint64_t a1)
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&browser_getClassID_sClassDesc, ClassID, 1, a1);
}

uint64_t APBrowserGetTypeID()
{
  if (APBrowserGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&APBrowserGetClassID_sRegisterOnce, &APBrowserGetClassID_sClassID, (dispatch_function_t)browser_getClassID);
  }
  uint64_t v0 = APBrowserGetClassID_sClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

CFStringRef browser_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[APBrowser %p]", a1);
}

uint64_t APTransportPackageGetClassID()
{
  if (APTransportPackageGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&APTransportPackageGetClassID_sRegisterOnce, &APTransportPackageGetClassID_sClassID, (dispatch_function_t)package_getClassID);
  }
  return APTransportPackageGetClassID_sClassID;
}

uint64_t package_getClassID(uint64_t a1)
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&package_getClassID_sClassDesc, ClassID, 1, a1);
}

uint64_t APTransportPackageGetTypeID()
{
  if (APTransportPackageGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&APTransportPackageGetClassID_sRegisterOnce, &APTransportPackageGetClassID_sClassID, (dispatch_function_t)package_getClassID);
  }
  uint64_t v0 = APTransportPackageGetClassID_sClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

uint64_t APTransportParcelMakeWithAllocators(const __CFAllocator *a1, const __CFAllocator *a2, size_t a3, size_t a4, CFAllocatorRef **a5)
{
  if (!a3 || !a5)
  {
    APSLogErrorAt();
    int v11 = 0;
    uint64_t v15 = 4294954516;
    goto LABEL_11;
  }
  CFTypeID v10 = (CFAllocatorRef *)CFAllocatorAllocate(a1, 56, 0);
  int v11 = v10;
  if (!v10) {
    goto LABEL_13;
  }
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)CFTypeID v10 = 0u;
  v10[6] = a1;
  *CFTypeID v10 = (CFAllocatorRef)a3;
  if (a1) {
    CFRetain(a1);
  }
  if (a4)
  {
    uint64_t v12 = CFAllocatorAllocate(a2, a4 + a3, 0);
    if (v12)
    {
      __int16 v13 = v12;
      uint64_t v14 = CMBlockBufferCreateWithMemoryBlock(v11[6], v12, a4 + a3, a2, 0, a3, a4, 0, v11 + 4);
      if (v14)
      {
        uint64_t v15 = v14;
        APSLogErrorAt();
        CFAllocatorDeallocate(a2, v13);
        goto LABEL_11;
      }
      void v11[5] = (CFAllocatorRef)v13;
      goto LABEL_10;
    }
LABEL_13:
    APSLogErrorAt();
    uint64_t v15 = 4294954510;
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v15 = 0;
  *a5 = v11;
  int v11 = 0;
LABEL_11:
  APTransportParcelFree(v11);
  return v15;
}

void APTransportParcelFree(void *ptr)
{
  if (ptr)
  {
    CFIndex v2 = (const void *)*((void *)ptr + 6);
    *((void *)ptr + 5) = 0;
    uint64_t v3 = (const void *)*((void *)ptr + 2);
    if (v3)
    {
      CFRelease(v3);
      *((void *)ptr + 2) = 0;
    }
    uint64_t v4 = (const void *)*((void *)ptr + 4);
    if (v4)
    {
      CFRelease(v4);
      *((void *)ptr + 4) = 0;
    }
    CFAllocatorDeallocate(*((CFAllocatorRef *)ptr + 6), ptr);
    if (v2)
    {
      CFRelease(v2);
    }
  }
}

uint64_t APTransportParcelMake(size_t a1, size_t a2, CFAllocatorRef **a3)
{
  return APTransportParcelMakeWithAllocators((const __CFAllocator *)*MEMORY[0x1E4F1CF80], (const __CFAllocator *)*MEMORY[0x1E4F1CF90], a1, a2, a3);
}

uint64_t APTransportParcelGetBytes(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t APTransportParcelGetMessageData(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t APTransportParcelSetMessageData(void *a1, CMBlockBufferRef theBuffer)
{
  CFIndex v2 = (OpaqueCMBlockBuffer *)a1[4];
  if (v2 == theBuffer) {
    return 0;
  }
  if (!a1[5])
  {
LABEL_5:
    a1[4] = theBuffer;
    if (theBuffer) {
      CFRetain(theBuffer);
    }
    if (v2) {
      CFRelease(v2);
    }
    return 0;
  }
  long long lengthAtOffsetOut = 0uLL;
  size_t totalLengthOut = 0;
  CMBlockBufferGetDataPointer(theBuffer, 0, (size_t *)&lengthAtOffsetOut, &totalLengthOut, (char **)&lengthAtOffsetOut + 1);
  if (lengthAtOffsetOut == __PAIR128__(a1[5] + *a1, totalLengthOut))
  {
    CFIndex v2 = (OpaqueCMBlockBuffer *)a1[4];
    goto LABEL_5;
  }
  APSLogErrorAt();
  return 4294954516;
}

uint64_t APTransportParcelGetMessageType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t APTransportParcelSetMessageType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t APTransportParcelCreateBBufRepresentation(uint64_t a1, const __CFAllocator *a2, const void *a3, CMBlockBufferRef *a4)
{
  CMBlockBufferRef blockBufferOut = 0;
  if (!*(void *)(a1 + 40))
  {
    if (a3)
    {
      uint64_t BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
      if (BlockBufferCopyingMemoryBlock)
      {
        uint64_t v11 = BlockBufferCopyingMemoryBlock;
LABEL_20:
        APSLogErrorAt();
        goto LABEL_22;
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 8)) {
        goto LABEL_21;
      }
      uint64_t v14 = *(void **)(a1 + 16);
      if (v14) {
        uint64_t v14 = (void *)CFRetain(v14);
      }
      CMBlockBufferRef blockBufferOut = (CMBlockBufferRef)v14;
    }
    uint64_t v15 = *(OpaqueCMBlockBuffer **)(a1 + 32);
    if (!v15) {
      goto LABEL_9;
    }
    if (CMBlockBufferIsEmpty(v15)) {
      goto LABEL_9;
    }
    CFStringRef v16 = *(OpaqueCMBlockBuffer **)(a1 + 32);
    Datauint16_t Length = CMBlockBufferGetDataLength(v16);
    uint64_t appended = CMBlockBufferAppendBufferReference(blockBufferOut, v16, 0, DataLength, 0);
    if (!appended) {
      goto LABEL_9;
    }
    uint64_t v11 = appended;
    goto LABEL_20;
  }
  size_t v8 = *(void *)a1;
  size_t v9 = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 32));
  if (a3)
  {
    memcpy(*(void **)(a1 + 40), a3, *(void *)a1);
LABEL_8:
    customBlockSource.version = 0;
    customBlockSource.AllocateBlock = 0;
    customBlockSource.FreeBlock = (void (__cdecl *)(void *, void *, size_t))parcel_bbufFree;
    customBlockSource.refCon = (void *)CFRetain(*(CFTypeRef *)(a1 + 32));
    uint64_t v12 = CMBlockBufferCreateWithMemoryBlock(a2, *(void **)(a1 + 40), v9 + v8, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0], &customBlockSource, 0, v9 + v8, 0, &blockBufferOut);
    if (!v12)
    {
LABEL_9:
      uint64_t v11 = 0;
      *a4 = blockBufferOut;
      return v11;
    }
    uint64_t v11 = v12;
    goto LABEL_20;
  }
  if (*(unsigned char *)(a1 + 8)) {
    goto LABEL_8;
  }
LABEL_21:
  APSLogErrorAt();
  uint64_t v11 = 4294954516;
LABEL_22:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v11;
}

uint64_t APTransportParcelSetHeader(uint64_t a1, const void *a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    if (v3)
    {
      memcpy(v3, a2, *(void *)a1);
    }
    else
    {
      uint64_t BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
      if (BlockBufferCopyingMemoryBlock)
      {
        uint64_t v5 = BlockBufferCopyingMemoryBlock;
        APSLogErrorAt();
        return v5;
      }
    }
    uint64_t v5 = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    APSLogErrorAt();
    return 4294954516;
  }
  return v5;
}

uint64_t APTransportParcelIsHeaderSet(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

CFStringRef package_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[APTransportPackage %p]", a1);
}

uint64_t APBrowserDeviceQueryManagerGetClassID()
{
  if (APBrowserDeviceQueryManagerGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&APBrowserDeviceQueryManagerGetClassID_sRegisterOnce, &APBrowserDeviceQueryManagerGetClassID_sClassID, (dispatch_function_t)deviceQueryManager_getClassID);
  }
  return APBrowserDeviceQueryManagerGetClassID_sClassID;
}

uint64_t deviceQueryManager_getClassID(uint64_t a1)
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&deviceQueryManager_getClassID_sClassDesc, ClassID, 1, a1);
}

uint64_t APBrowserDeviceQueryManagerGetTypeID()
{
  if (APBrowserDeviceQueryManagerGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&APBrowserDeviceQueryManagerGetClassID_sRegisterOnce, &APBrowserDeviceQueryManagerGetClassID_sClassID, (dispatch_function_t)deviceQueryManager_getClassID);
  }
  uint64_t v0 = APBrowserDeviceQueryManagerGetClassID_sClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

CFStringRef deviceQueryManager_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[APBrowserDeviceQueryManager %p]", a1);
}

uint64_t APBrowserCarBonjourCreate(const __CFAllocator *a1, const void *a2, const void *a3, const __CFDictionary *a4, void *a5)
{
  CFTypeRef cf = 0;
  if (!a2) {
    APBrowserCarBonjourCreate_cold_1();
  }
  if (!a5) {
    APBrowserCarBonjourCreate_cold_2();
  }
  APBrowserGetClassID();
  if (CMDerivedObjectCreate()) {
    APBrowserCarBonjourCreate_cold_3();
  }
  CFTypeRef v10 = cf;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_queue_t v12 = dispatch_queue_create("APBrowserCarBonjourInternalQueue", 0);
  *(void *)(DerivedStorage + 24) = v12;
  if (v12)
  {
    dispatch_queue_t v13 = dispatch_queue_create("APBrowserCarBonjourEventQueue", 0);
    *(void *)(DerivedStorage + 120) = v13;
    if (v13)
    {
      CFTypeRef v14 = a3 ? CFRetain(a3) : 0;
      *(void *)(DerivedStorage + 56) = v14;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        CFStringRef v16 = Mutable;
        CFDictionarySetValue(Mutable, @"enableSessionEvents", (const void *)*MEMORY[0x1E4F1CFC8]);
        if (a4)
        {
          CFStringRef Value = CFDictionaryGetValue(a4, @"PowerAssertion");
          *(void *)(DerivedStorage + 48) = Value;
          if (Value)
          {
            CFRetain(Value);
            CFDictionarySetValue(v16, @"powerAssertion", *(const void **)(DerivedStorage + 48));
          }
          uint64_t v18 = CFDictionaryGetValue(a4, @"EventRecorder");
          *(void *)(DerivedStorage + 40) = v18;
          if (v18)
          {
            CFRetain(v18);
            CFDictionarySetValue(v16, @"eventRecorder", *(const void **)(DerivedStorage + 40));
          }
          LODWORD(a4) = CFDictionaryGetInt64() != 0;
        }
        if (CFEqual(a2, @"USB"))
        {
          *(void *)(DerivedStorage + 16) = CFRetain(@"USB");
          CFDictionarySetInt64();
          uint64_t v19 = (void *)(DerivedStorage + 96);
          if (a4) {
            uint64_t v20 = APCarPlayHelperSessionCreate(a1, (uint64_t)carBonjourBrowser_handleCarPlayHelperEvent, (uint64_t)cf, v16, v19);
          }
          else {
            uint64_t v20 = APCarPlayHelperUSBCreate((uint64_t)a1, (uint64_t)carBonjourBrowser_handleCarPlayHelperEvent, (uint64_t)cf, v16, v19);
          }
          uint64_t v23 = v20;
          if (v20) {
            goto LABEL_58;
          }
        }
        else
        {
          if (!CFEqual(a2, @"WiFi"))
          {
            uint64_t v23 = 4294954516;
            APSLogErrorAt();
            if (gLogCategory_APBrowserCarBonjour <= 90)
            {
              if (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()) {
                LogPrintF();
              }
              uint64_t v23 = 4294954516;
            }
            goto LABEL_36;
          }
          *(void *)(DerivedStorage + 16) = CFRetain(@"WiFi");
          CFDictionarySetInt64();
          unint64_t v21 = (void *)(DerivedStorage + 96);
          if (a4) {
            uint64_t v22 = APCarPlayHelperSessionCreate(a1, (uint64_t)carBonjourBrowser_handleCarPlayHelperEvent, (uint64_t)cf, v16, v21);
          }
          else {
            uint64_t v22 = APCarPlayHelperWiFiCreate((uint64_t)a1, (uint64_t)carBonjourBrowser_handleCarPlayHelperEvent, (uint64_t)cf, v16, v21);
          }
          uint64_t v23 = v22;
          if (v22) {
            goto LABEL_58;
          }
        }
        dispatch_semaphore_t v24 = dispatch_semaphore_create(0);
        *(void *)(DerivedStorage + 8) = v24;
        if (!v24) {
          goto LABEL_57;
        }
        uint64_t v25 = dispatch_group_create();
        *(void *)uint64_t DerivedStorage = v25;
        if (!v25) {
          goto LABEL_57;
        }
        dispatch_group_enter(v25);
        uint64_t v26 = APBonjourBrowserCreate((uint64_t)a1, 0, (void *)(DerivedStorage + 64));
        if (v26)
        {
          uint64_t v23 = v26;
        }
        else
        {
          uint64_t v27 = APBonjourBrowserSetEventHandler(*(void *)(DerivedStorage + 64), (uint64_t)carBonjourBrowser_handleBonjourEvent, (uint64_t)cf);
          if (!v27)
          {
            dispatch_group_enter(*(dispatch_group_t *)DerivedStorage);
            CFMutableDictionaryRef v28 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            *(void *)(DerivedStorage + 80) = v28;
            if (v28)
            {
              uint64_t v23 = 0;
              *a5 = v10;
LABEL_36:
              CFRelease(v16);
              goto LABEL_37;
            }
LABEL_57:
            APSLogErrorAt();
            uint64_t v23 = 4294954510;
            goto LABEL_36;
          }
          uint64_t v23 = v27;
        }
LABEL_58:
        APSLogErrorAt();
        goto LABEL_36;
      }
    }
  }
  APSLogErrorAt();
  uint64_t v23 = 4294954510;
LABEL_37:
  CFTypeRef v29 = *(NSObject **)DerivedStorage;
  if (*(void *)DerivedStorage)
  {
    CFTypeRef v30 = *(NSObject **)(DerivedStorage + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __APBrowserCarBonjourCreate_block_invoke;
    block[3] = &__block_descriptor_tmp_4;
    block[4] = cf;
    void block[5] = DerivedStorage;
    dispatch_group_notify(v29, v30, block);
  }
  if (v23)
  {
    if (gLogCategory_APBrowserCarBonjour <= 90
      && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return v23;
}

void carBonjourBrowser_handleCarPlayHelperEvent(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4) {
    CFRetain(a4);
  }
  if (a3) {
    CFRetain(a3);
  }
  size_t v8 = *(NSObject **)(DerivedStorage + 24);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = __carBonjourBrowser_handleCarPlayHelperEvent_block_invoke;
  void v9[3] = &__block_descriptor_tmp_51;
  int v10 = a2;
  v9[4] = DerivedStorage;
  void v9[5] = a4;
  void v9[6] = a3;
  dispatch_async(v8, v9);
}

void carBonjourBrowser_handleBonjourEvent(const void *a1, int a2, const void *a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  if (a3) {
    CFRetain(a3);
  }
  size_t v9 = *(NSObject **)(DerivedStorage + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carBonjourBrowser_handleBonjourEvent_block_invoke;
  block[3] = &__block_descriptor_tmp_64;
  int v11 = a2;
  block[4] = a3;
  void block[5] = DerivedStorage;
  void block[6] = a4;
  void block[7] = a1;
  dispatch_async(v9, block);
}

NSObject *__APBrowserCarBonjourCreate_block_invoke(uint64_t a1)
{
  carBonjourBrowser_dispatchEvent(*(const void **)(a1 + 32), 8, 0);
  uint64_t result = *(NSObject **)(*(void *)(a1 + 40) + 8);
  if (result)
  {
    return dispatch_semaphore_signal(result);
  }
  return result;
}

void carBonjourBrowser_dispatchEvent(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = *(void *)(DerivedStorage + 128);
  if (v7)
  {
    uint64_t v8 = DerivedStorage;
    uint64_t v9 = *(void *)(DerivedStorage + 136);
    if (gLogCategory_APBrowserCarBonjour <= 20
      && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
    {
      APBrowserGetEventString(a2);
      LogPrintF();
    }
    if (a1) {
      CFRetain(a1);
    }
    if (a3) {
      CFRetain(a3);
    }
    int v10 = *(NSObject **)(v8 + 120);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __carBonjourBrowser_dispatchEvent_block_invoke;
    block[3] = &__block_descriptor_tmp_82;
    block[4] = v7;
    void block[5] = a1;
    int v12 = a2;
    void block[6] = a3;
    void block[7] = v9;
    dispatch_async(v10, block);
  }
}

uint64_t carBonjourBrowser_invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 24);
  if (v1)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __carBonjourBrowser_invalidate_block_invoke;
    block[3] = &__block_descriptor_tmp_17;
    block[4] = DerivedStorage;
    dispatch_sync(v1, block);
  }
  return 0;
}

void carBonjourBrowser_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 24);
  if (v1)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __carBonjourBrowser_finalize_block_invoke;
    block[3] = &__block_descriptor_tmp_18;
    block[4] = DerivedStorage;
    dispatch_sync(v1, block);
    carBonjourBrowser_invalidate();
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(DerivedStorage + 8), 0xFFFFFFFFFFFFFFFFLL);
    dispatch_sync(*(dispatch_queue_t *)(DerivedStorage + 24), &__block_literal_global_3);
    CFIndex v2 = *(NSObject **)(DerivedStorage + 24);
    if (v2)
    {
      dispatch_release(v2);
      *(void *)(DerivedStorage + 24) = 0;
    }
  }
  uint64_t v3 = *(NSObject **)(DerivedStorage + 120);
  if (v3)
  {
    dispatch_sync(v3, &__block_literal_global_22);
    uint64_t v4 = *(NSObject **)(DerivedStorage + 120);
    if (v4)
    {
      dispatch_release(v4);
      *(void *)(DerivedStorage + 120) = 0;
    }
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 40);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 40) = 0;
  }
  CFIndex v6 = *(const void **)(DerivedStorage + 48);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 48) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 56);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 56) = 0;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 64);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 64) = 0;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 80);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 80) = 0;
  }
  int v10 = *(const void **)(DerivedStorage + 88);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 88) = 0;
  }
  int v11 = *(const void **)(DerivedStorage + 96);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 96) = 0;
  }
  int v12 = *(void **)(DerivedStorage + 112);
  if (v12)
  {
    os_release(v12);
    *(void *)(DerivedStorage + 112) = 0;
  }
  dispatch_queue_t v13 = *(const void **)(DerivedStorage + 16);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 16) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  CFTypeRef v14 = *(NSObject **)(DerivedStorage + 8);
  if (v14)
  {
    dispatch_release(v14);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

uint64_t __carBonjourBrowser_invalidate_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (!*(unsigned char *)(v1 + 32))
  {
    uint64_t v2 = result;
    uint64_t result = *(void *)(v1 + 96);
    if (result)
    {
      uint64_t result = APTransportKeepAliveControllerGetCMBaseObject(result);
      if (result)
      {
        uint64_t v3 = result;
        uint64_t VTable = CMBaseObjectGetVTable();
        uint64_t v6 = *(void *)(VTable + 8);
        uint64_t result = VTable + 8;
        uint64_t v5 = v6;
        if (v6) {
          uint64_t v7 = v5;
        }
        else {
          uint64_t v7 = 0;
        }
        uint64_t v8 = *(uint64_t (**)(uint64_t))(v7 + 24);
        if (v8) {
          uint64_t result = v8(v3);
        }
      }
    }
    *(unsigned char *)(*(void *)(v2 + 32) + 32) = 1;
  }
  return result;
}

uint64_t __carBonjourBrowser_finalize_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 128) = 0;
  *(void *)(*(void *)(result + 32) + 136) = 0;
  return result;
}

uint64_t carBonjourBrowser_getMode(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  int v11 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = *(NSObject **)(DerivedStorage + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __carBonjourBrowser_getMode_block_invoke;
    block[3] = &unk_1E688B820;
    block[4] = &v8;
    void block[5] = DerivedStorage;
    void block[6] = a2;
    dispatch_sync(v4, block);
    uint64_t v5 = *((unsigned int *)v9 + 6);
  }
  else
  {
    uint64_t v5 = 4294954516;
    *((_DWORD *)v9 + 6) = -12780;
  }
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t carBonjourBrowser_setMode(uint64_t a1, int a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  int v12 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 == 1)
  {
    uint64_t v5 = 4294895234;
    APSLogErrorAt();
    *((_DWORD *)v10 + 6) = -72062;
  }
  else
  {
    uint64_t v4 = *(NSObject **)(DerivedStorage + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __carBonjourBrowser_setMode_block_invoke;
    block[3] = &unk_1E688B848;
    block[4] = &v9;
    void block[5] = DerivedStorage;
    __int16 v8 = a2;
    dispatch_sync(v4, block);
    uint64_t v5 = *((unsigned int *)v10 + 6);
  }
  _Block_object_dispose(&v9, 8);
  return v5;
}

uint64_t carBonjourBrowser_setEventHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(NSObject **)(DerivedStorage + 24);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = __carBonjourBrowser_setEventHandler_block_invoke;
  void v9[3] = &unk_1E688B870;
  v9[4] = &v10;
  void v9[5] = DerivedStorage;
  void v9[6] = a2;
  void v9[7] = a3;
  dispatch_sync(v6, v9);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

uint64_t carBonjourBrowser_getDNSForDeviceID(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  int v21 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 || !a6)
  {
    APSLogErrorAt();
    uint64_t v15 = 4294954516;
    *((_DWORD *)v19 + 6) = -12780;
  }
  else
  {
    CFTypeRef v14 = *(NSObject **)(DerivedStorage + 24);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 0x40000000;
    v17[2] = __carBonjourBrowser_getDNSForDeviceID_block_invoke;
    v17[3] = &unk_1E688B898;
    v17[4] = &v18;
    void v17[5] = DerivedStorage;
    v17[6] = a2;
    v17[7] = a6;
    v17[8] = a7;
    v17[9] = a8;
    dispatch_sync(v14, v17);
    uint64_t v15 = *((unsigned int *)v19 + 6);
  }
  _Block_object_dispose(&v18, 8);
  return v15;
}

uint64_t carBonjourBrowser_reconfirmDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(NSObject **)(DerivedStorage + 24);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = __carBonjourBrowser_reconfirmDevice_block_invoke;
  void v9[3] = &unk_1E688B8C0;
  v9[4] = &v10;
  void v9[5] = DerivedStorage;
  void v9[6] = a2;
  void v9[7] = a3;
  dispatch_sync(v6, v9);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

uint64_t __carBonjourBrowser_getMode_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 40);
  if (*(unsigned char *)(v2 + 32))
  {
    uint64_t result = APSLogErrorAt();
    *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = -12785;
  }
  else
  {
    if (*(unsigned char *)(v2 + 104)) {
      __int16 v3 = 3;
    }
    else {
      __int16 v3 = 0;
    }
    **(_WORD **)(result + 48) = v3;
  }
  return result;
}

uint64_t __carBonjourBrowser_setMode_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 40);
  if (*(unsigned char *)(v2 + 32))
  {
    uint64_t result = APSLogErrorAt();
    uint64_t v18 = *(void *)(*(void *)(v1 + 32) + 8);
    int v19 = -12785;
LABEL_39:
    *(_DWORD *)(v18 + 24) = v19;
    return result;
  }
  if (!*(void *)(v2 + 128))
  {
    uint64_t result = APSLogErrorAt();
    uint64_t v18 = *(void *)(*(void *)(v1 + 32) + 8);
    int v19 = -72060;
    goto LABEL_39;
  }
  if (*(_WORD *)(result + 48))
  {
    if (*(_WORD *)(result + 48) == 3)
    {
      if (!*(unsigned char *)(v2 + 104))
      {
        if (gLogCategory_APBrowserCarBonjour <= 50)
        {
          if (gLogCategory_APBrowserCarBonjour != -1 || (v3 = _LogCategory_Initialize(), uint64_t v2 = *(void *)(v1 + 40), v3))
          {
            LogPrintF();
            uint64_t v2 = *(void *)(v1 + 40);
          }
        }
        if (*(void *)(v2 + 48))
        {
          APSPowerAssertionRaiseTemporary();
          uint64_t v2 = *(void *)(v1 + 40);
        }
        uint64_t v4 = *(void *)(v2 + 96);
        uint64_t VTable = CMBaseObjectGetVTable();
        uint64_t v7 = *(void *)(VTable + 16);
        uint64_t result = VTable + 16;
        uint64_t v6 = v7;
        if (v7) {
          uint64_t v8 = v6;
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
        if (v9) {
          uint64_t result = v9(v4, 1);
        }
        *(unsigned char *)(*(void *)(v1 + 40) + 104) = 1;
      }
    }
    else
    {
      if (gLogCategory_APBrowserCarBonjour <= 60
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = -72062;
      return APSLogErrorAt();
    }
  }
  else if (*(unsigned char *)(v2 + 104))
  {
    if (gLogCategory_APBrowserCarBonjour <= 50)
    {
      if (gLogCategory_APBrowserCarBonjour != -1 || (v10 = _LogCategory_Initialize(), uint64_t v2 = *(void *)(v1 + 40), v10))
      {
        LogPrintF();
        uint64_t v2 = *(void *)(v1 + 40);
      }
    }
    uint64_t v11 = *(void *)(v2 + 96);
    uint64_t v12 = CMBaseObjectGetVTable();
    uint64_t v14 = *(void *)(v12 + 16);
    uint64_t result = v12 + 16;
    uint64_t v13 = v14;
    if (v14) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = 0;
    }
    CFStringRef v16 = *(uint64_t (**)(uint64_t, void))(v15 + 8);
    if (v16) {
      uint64_t result = v16(v11, 0);
    }
    uint64_t v17 = *(void *)(v1 + 40);
    ++*(_DWORD *)(v17 + 108);
    *(unsigned char *)(v17 + 104) = 0;
  }
  return result;
}

void *__carBonjourBrowser_setEventHandler_block_invoke(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[5];
  if (*(unsigned char *)(v2 + 32))
  {
    uint64_t result = (void *)APSLogErrorAt();
    uint64_t v3 = *(void *)(v1[4] + 8);
    int v4 = -12785;
  }
  else
  {
    if (!*(unsigned char *)(v2 + 104) && !*(_DWORD *)(v2 + 108))
    {
      *(void *)(v2 + 128) = result[6];
      *(void *)(result[5] + 136) = result[7];
      return result;
    }
    uint64_t result = (void *)APSLogErrorAt();
    uint64_t v3 = *(void *)(v1[4] + 8);
    int v4 = -72061;
  }
  *(_DWORD *)(v3 + 24) = v4;
  return result;
}

void __carBonjourBrowser_getDNSForDeviceID_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v2 + 32))
  {
    APSLogErrorAt();
    uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
    int v16 = -12785;
LABEL_32:
    *(_DWORD *)(v15 + 24) = v16;
    return;
  }
  if (*(_DWORD *)(v2 + 108) || !*(unsigned char *)(v2 + 104))
  {
    APSLogErrorAt();
    uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
    int v16 = -72061;
    goto LABEL_32;
  }
  CFStringRef Int64 = (const __CFString *)CFNumberCreateInt64();
  if (!Int64)
  {
    APSLogErrorAt();
    uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
    int v16 = -12786;
    goto LABEL_32;
  }
  CFStringRef v4 = Int64;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 40) + 80), Int64);
  if (!Value)
  {
    uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8);
    int v18 = -72063;
LABEL_37:
    *(_DWORD *)(v17 + 24) = v18;
    goto LABEL_25;
  }
  if (!CFDictionaryGetValue(Value, @"AirPlayBonjourInfo"))
  {
    APSLogErrorAt();
    uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8);
    int v18 = -6762;
    goto LABEL_37;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = BonjourDevice_GetDNSName();
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    if (!*(void *)(a1 + 72))
    {
      if (gLogCategory_APBrowserCarBonjour <= 50
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_25;
    }
    CFStringRef v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(const char **)(a1 + 56), 0x8000100u);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFArrayGetTypeID();
      TypedCFDictionaryRef Value = (const __CFArray *)CFDictionaryGetTypedValue();
      CFIndex Count = CFArrayGetCount(TypedValue);
      CFIndex v10 = Count - 1;
      if (Count >= 1)
      {
        uint64_t v11 = 0;
        do
        {
          CFDictionaryGetTypeID();
          CFArrayGetTypedValueAtIndex();
          CFStringGetTypeID();
          uint64_t v12 = (const void *)CFDictionaryGetTypedValue();
          if (CFEqual(v12, v7)) {
            break;
          }
        }
        while (v10 != v11++);
      }
      **(unsigned char **)(a1 + 72) = CFDictionaryGetInt64() != 0;
      if (gLogCategory_APBrowserCarBonjour <= 50
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFRelease(v4);
      CFStringRef v14 = v7;
      goto LABEL_26;
    }
    APSLogErrorAt();
    uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8);
    int v18 = -12786;
    goto LABEL_37;
  }
  APSLogErrorAt();
LABEL_25:
  CFStringRef v14 = v4;
LABEL_26:
  CFRelease(v14);
}

void __carBonjourBrowser_reconfirmDevice_block_invoke(void *a1)
{
  uint64_t v2 = a1[5];
  if (*(unsigned char *)(v2 + 32))
  {
    APSLogErrorAt();
    uint64_t v8 = *(void *)(a1[4] + 8);
    int v9 = -12785;
LABEL_14:
    *(_DWORD *)(v8 + 24) = v9;
    return;
  }
  if (*(_DWORD *)(v2 + 108) || !*(unsigned char *)(v2 + 104))
  {
    APSLogErrorAt();
    uint64_t v8 = *(void *)(a1[4] + 8);
    int v9 = -72061;
    goto LABEL_14;
  }
  CFStringRef Int64 = (const void *)CFNumberCreateInt64();
  if (!Int64)
  {
    APSLogErrorAt();
    uint64_t v8 = *(void *)(a1[4] + 8);
    int v9 = -12786;
    goto LABEL_14;
  }
  CFStringRef v4 = Int64;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1[5] + 80), Int64);
  if (Value)
  {
    CFStringRef v6 = CFDictionaryGetValue(Value, @"AirPlayBonjourInfo");
    if (v6)
    {
      int v7 = APBonjourBrowserReconfirmDevice(*(void *)(a1[5] + 64), (uint64_t)v6, @"AirPlay", a1[7]);
    }
    else
    {
      APSLogErrorAt();
      int v7 = -6762;
    }
  }
  else
  {
    int v7 = -72063;
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v7;
  CFRelease(v4);
}

void __carBonjourBrowser_handleCarPlayHelperEvent_block_invoke(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 56);
  if (v2 == 3)
  {
    if (gLogCategory_APBrowserCarBonjour <= 30
      && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v4 = *(void *)(DerivedStorage + 64);
    if (v4) {
      APBonjourBrowserInvalidate(v4);
    }
    dispatch_group_leave(*(dispatch_group_t *)DerivedStorage);
  }
  else if (v2 == 2)
  {
    if (gLogCategory_APBrowserCarBonjour <= 30
      && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v5 = *(const void **)(a1 + 40);
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    carBonjourBrowser_networkInterfaceChanged((uint64_t)v5, 0);
    carBonjourBrowser_dispatchEvent(v5, 7, 0);
    --*(_DWORD *)(v6 + 108);
  }
  else
  {
    if (v2)
    {
      if (gLogCategory_APBrowserCarBonjour <= 90
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_26;
    }
    if (gLogCategory_APBrowserCarBonjour <= 30
      && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (carBonjourBrowser_networkInterfaceChanged(*(void *)(a1 + 40), *(const __CFDictionary **)(a1 + 48)))LABEL_26:APSLogErrorAt(); {
  }
    }
  int v7 = *(const void **)(a1 + 40);
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(const void **)(a1 + 48);
  if (v8)
  {
    CFRelease(v8);
  }
}

uint64_t carBonjourBrowser_networkInterfaceChanged(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(a2, @"interfaceName");
    BOOL v5 = CFDictionaryGetInt64() != 0;
  }
  else
  {
    CFDictionaryRef Value = 0;
    BOOL v5 = 0;
  }
  if (FigCFEqual()) {
    return 0;
  }
  if (gLogCategory_APBrowserCarBonjour <= 50
    && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(void *)(DerivedStorage + 88))
  {
    if (!Value && *(void *)(DerivedStorage + 112))
    {
      CFIndex v10 = (void *)os_transaction_copy_description();
      if (gLogCategory_APBrowserCarBonjour <= 50
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      free(v10);
      uint64_t v26 = *(void **)(DerivedStorage + 112);
      if (v26)
      {
        os_release(v26);
        *(void *)(DerivedStorage + 112) = 0;
      }
    }
    uint64_t v8 = carBonjourBrowser_stopBonjourBrowsing();
    if (v8)
    {
      uint64_t v6 = v8;
LABEL_72:
      APSLogErrorAt();
      return v6;
    }
    int v9 = *(const void **)(DerivedStorage + 88);
  }
  else
  {
    int v9 = 0;
  }
  *(void *)(DerivedStorage + 88) = Value;
  if (Value) {
    CFRetain(Value);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (!*(void *)(DerivedStorage + 88)) {
    return 0;
  }
  if (!*(void *)(DerivedStorage + 112) && v5)
  {
    FigCFStringGetCStringPtrAndBufferToFree();
    SNPrintF();
    if (gLogCategory_APBrowserCarBonjour <= 50
      && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(void *)(DerivedStorage + 112) = os_transaction_create();
  }
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(v11 + 88))
  {
    APSLogErrorAt();
    uint64_t v6 = 4294960534;
LABEL_71:
    carBonjourBrowser_stopBonjourBrowsing();
    goto LABEL_72;
  }
  uint64_t v12 = (void *)v11;
  if (gLogCategory_APBrowserCarBonjour <= 50
    && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v12[6]) {
    APSPowerAssertionRaiseTemporary();
  }
  uint64_t v13 = APBonjourBrowserSetInterfaceName(v12[8], v12[11]);
  if (v13)
  {
    uint64_t v6 = v13;
LABEL_70:
    APSLogErrorAt();
    goto LABEL_71;
  }
  uint64_t v14 = v12[7];
  if (v14)
  {
    uint64_t v15 = APCarPlayControlServerAddInterface(v14, (CFStringRef)v12[11]);
    if (v15)
    {
      uint64_t v6 = v15;
      goto LABEL_70;
    }
  }
  uint64_t v16 = APBonjourBrowserSetMode(v12[8], 2u);
  if (v16)
  {
    uint64_t v6 = v16;
    goto LABEL_70;
  }
  uint64_t v17 = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    if (*(void *)(v17 + 40)) {
      APSEventRecorderRecordEvent();
    }
    uint64_t v18 = LogCategoryCopyOSLogHandle();
    int v19 = (void *)v18;
    if (v18) {
      uint64_t v20 = v18;
    }
    else {
      uint64_t v20 = MEMORY[0x1E4F14500];
    }
    if (!os_signpost_enabled(v20)) {
      goto LABEL_60;
    }
    *(_WORD *)buf = 0;
    os_signpost_id_t v21 = 730662892;
    uint64_t v22 = "AP_SIGNPOST_CAR_STARTEDBROWSE_USB";
    uint64_t v23 = v20;
LABEL_59:
    _os_signpost_emit_with_name_impl(&dword_1D087F000, v23, OS_SIGNPOST_EVENT, v21, v22, "", buf, 2u);
LABEL_60:
    if (v19) {
      os_release(v19);
    }
    return 0;
  }
  if (FigCFEqual())
  {
    if (*(void *)(v17 + 40)) {
      APSEventRecorderRecordEvent();
    }
    uint64_t v24 = LogCategoryCopyOSLogHandle();
    int v19 = (void *)v24;
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = MEMORY[0x1E4F14500];
    }
    if (!os_signpost_enabled(v25)) {
      goto LABEL_60;
    }
    *(_WORD *)buf = 0;
    uint64_t v22 = "AP_SIGNPOST_CAR_STARTEDBROWSE_WIFI";
    uint64_t v23 = v25;
    os_signpost_id_t v21 = 730662868;
    goto LABEL_59;
  }
  return 0;
}

uint64_t carBonjourBrowser_stopBonjourBrowsing()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (gLogCategory_APBrowserCarBonjour <= 50
    && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(void *)(DerivedStorage + 56))
  {
    uint64_t v1 = APBonjourBrowserCopyInterfaceName(*(void *)(DerivedStorage + 64), (uint64_t)&cf);
    if (v1)
    {
      uint64_t v5 = v1;
      goto LABEL_19;
    }
    if (cf)
    {
      uint64_t v2 = APCarPlayControlServerRemoveInterface(*(void *)(DerivedStorage + 56), cf);
      if (v2)
      {
        uint64_t v5 = v2;
        goto LABEL_19;
      }
    }
  }
  uint64_t v3 = APBonjourBrowserSetMode(*(void *)(DerivedStorage + 64), 0);
  if (v3)
  {
    uint64_t v5 = v3;
  }
  else
  {
    ++*(_DWORD *)(DerivedStorage + 72);
    uint64_t v4 = APBonjourBrowserSetInterfaceName(*(void *)(DerivedStorage + 64), 0);
    if (!v4)
    {
      APSEventRecorderResetEvent();
      APSEventRecorderResetEvent();
      uint64_t v5 = 0;
      goto LABEL_12;
    }
    uint64_t v5 = v4;
  }
LABEL_19:
  APSLogErrorAt();
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

void __carBonjourBrowser_handleBonjourEvent_block_invoke(uint64_t a1)
{
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 32);
  if (v2)
  {
    CFDictionaryRef v3 = (const __CFDictionary *)CFDictionaryGetValue(v2, @"deviceInfo");
    if (!v3)
    {
LABEL_55:
      APSLogErrorAt();
      goto LABEL_107;
    }
  }
  else
  {
    CFDictionaryRef v3 = 0;
  }
  switch(*(_DWORD *)(a1 + 64))
  {
    case 0:
      if (gLogCategory_APBrowserCarBonjour <= 50
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v4 = *(const void **)(a1 + 48);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFAllocatorRef v6 = CFGetAllocator(v4);
      CFTypeRef cf = 0;
      value = 0;
      if (!v3)
      {
        APSLogErrorAt();
        CFDictionaryRef v17 = 0;
        uint64_t v13 = 0;
        int v19 = 0;
        int v34 = -12780;
        goto LABEL_96;
      }
      CFAllocatorRef v7 = v6;
      int v8 = APBrowserCreateAdvertiserInfoForDevice((uint64_t)v6, v3, 0, &cf);
      if (v8)
      {
        int v34 = v8;
LABEL_128:
        APSLogErrorAt();
LABEL_135:
        CFDictionaryRef v17 = 0;
        uint64_t v13 = 0;
        int v19 = 0;
        goto LABEL_96;
      }
      int v9 = APAdvertiserInfoCopyProperty((uint64_t)cf, 0, @"featuresEx", 0, 0);
      int HasFeature = APSFeaturesHasFeature();
      if (v9) {
        CFRelease(v9);
      }
      if (!HasFeature)
      {
        if (gLogCategory_APBrowserCarBonjour <= 50
          && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        int v34 = 0;
        goto LABEL_135;
      }
      int v11 = APBrowserCopyDeviceIDFromBonjourInfo(v7, (uint64_t)v3, (CFNumberRef *)&value);
      if (v11)
      {
        int v34 = v11;
        goto LABEL_128;
      }
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v13 = Mutable;
      if (Mutable)
      {
        CFDictionarySetValue(Mutable, @"deviceID", value);
        CFDictionarySetValue(v13, @"deviceInfo", cf);
        int v14 = FigCFEqual();
        uint64_t v15 = (const void **)MEMORY[0x1E4F1CFD0];
        if (!v14) {
          uint64_t v15 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue(v13, @"IsConnectedOverUSB", *v15);
        CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 80), value);
        if (v16)
        {
          CFDictionaryRef v17 = v16;
          CFRetain(v16);
          uint64_t v18 = CFDictionaryGetValue(v17, @"LastEventInfo");
          if (v18)
          {
            int v19 = v18;
            CFRetain(v18);
            if (!*(_DWORD *)(DerivedStorage + 72))
            {
              if (FigCFEqual()) {
                goto LABEL_76;
              }
              int v20 = gLogCategory_APBrowserCarBonjour;
              if (gLogCategory_APBrowserCarBonjour > 30) {
                goto LABEL_119;
              }
              if (gLogCategory_APBrowserCarBonjour == -1)
              {
                if (!_LogCategory_Initialize())
                {
LABEL_119:
                  carBonjourBrowser_dispatchEvent(v4, 4, v13);
                  goto LABEL_76;
                }
                int v20 = gLogCategory_APBrowserCarBonjour;
              }
              if (v20 <= 20)
              {
                if (v20 != -1
                  || (_LogCategory_Initialize(),
                      int v20 = gLogCategory_APBrowserCarBonjour,
                      gLogCategory_APBrowserCarBonjour <= 20))
                {
                  if (v20 == -1) {
                    _LogCategory_Initialize();
                  }
                }
              }
              LogPrintF();
              goto LABEL_119;
            }
LABEL_46:
            if (gLogCategory_APBrowserCarBonjour <= 20
              && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
LABEL_76:
            CFDictionarySetValue(v17, @"AdvertiserInfo", cf);
            CFDictionarySetValue(v17, @"AirPlayBonjourInfo", v3);
            CFDictionarySetValue(v17, @"LastEventInfo", v13);
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 80), value, v17);
            uint64_t v25 = CMBaseObjectGetDerivedStorage();
            if (FigCFEqual())
            {
              if (*(void *)(v25 + 40)) {
                APSEventRecorderRecordEventWithFlags();
              }
              uint64_t v26 = LogCategoryCopyOSLogHandle();
              uint64_t v27 = (void *)v26;
              if (v26) {
                uint64_t v28 = v26;
              }
              else {
                uint64_t v28 = MEMORY[0x1E4F14500];
              }
              if (!os_signpost_enabled(v28)) {
                goto LABEL_93;
              }
              *(_WORD *)buf = 0;
              CFTypeRef v29 = "AP_SIGNPOST_ENDPOINTADDED_USB";
              CFTypeRef v30 = v28;
              os_signpost_id_t v31 = 730662900;
            }
            else
            {
              if (!FigCFEqual())
              {
LABEL_95:
                int v34 = 0;
                goto LABEL_96;
              }
              if (*(void *)(v25 + 40)) {
                APSEventRecorderRecordEventWithFlags();
              }
              uint64_t v32 = LogCategoryCopyOSLogHandle();
              uint64_t v27 = (void *)v32;
              if (v32) {
                __int16 v33 = v32;
              }
              else {
                __int16 v33 = MEMORY[0x1E4F14500];
              }
              if (!os_signpost_enabled(v33))
              {
LABEL_93:
                if (v27) {
                  os_release(v27);
                }
                goto LABEL_95;
              }
              *(_WORD *)buf = 0;
              CFTypeRef v29 = "AP_SIGNPOST_ENDPOINTADDED_WIFI";
              CFTypeRef v30 = v33;
              os_signpost_id_t v31 = 722862484;
            }
            _os_signpost_emit_with_name_impl(&dword_1D087F000, v30, OS_SIGNPOST_EVENT, v31, v29, "", buf, 2u);
            goto LABEL_93;
          }
LABEL_44:
          if (*(_DWORD *)(DerivedStorage + 72))
          {
            int v19 = 0;
            goto LABEL_46;
          }
          int v21 = gLogCategory_APBrowserCarBonjour;
          if (gLogCategory_APBrowserCarBonjour <= 30)
          {
            if (gLogCategory_APBrowserCarBonjour != -1)
            {
LABEL_51:
              if (v21 <= 20)
              {
                if (v21 != -1
                  || (_LogCategory_Initialize(),
                      int v21 = gLogCategory_APBrowserCarBonjour,
                      gLogCategory_APBrowserCarBonjour <= 20))
                {
                  if (v21 == -1) {
                    _LogCategory_Initialize();
                  }
                }
              }
              LogPrintF();
              goto LABEL_75;
            }
            if (_LogCategory_Initialize())
            {
              int v21 = gLogCategory_APBrowserCarBonjour;
              goto LABEL_51;
            }
          }
LABEL_75:
          carBonjourBrowser_dispatchEvent(v4, 3, v13);
          int v19 = 0;
          goto LABEL_76;
        }
        CFDictionaryRef v17 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (v17) {
          goto LABEL_44;
        }
        APSLogErrorAt();
      }
      else
      {
        APSLogErrorAt();
        CFDictionaryRef v17 = 0;
      }
      int v19 = 0;
      int v34 = -12786;
LABEL_96:
      if (value) {
        CFRelease(value);
      }
      if (v17) {
        CFRelease(v17);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v13) {
        CFRelease(v13);
      }
      if (v19) {
        CFRelease(v19);
      }
      if (v34) {
        goto LABEL_55;
      }
LABEL_107:
      uint64_t v35 = *(const void **)(a1 + 56);
      if (v35) {
        CFRelease(v35);
      }
      long long v36 = *(const void **)(a1 + 32);
      if (v36) {
        CFRelease(v36);
      }
      return;
    case 1:
      if (gLogCategory_APBrowserCarBonjour <= 50
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_107;
    case 2:
      if (gLogCategory_APBrowserCarBonjour <= 30
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v22 = *(const void **)(a1 + 48);
      uint64_t v23 = CMBaseObjectGetDerivedStorage();
      if (!carBonjourBrowser_removeAllDevices(v22, 1))
      {
        --*(_DWORD *)(v23 + 72);
        goto LABEL_107;
      }
      APSLogErrorAt();
      --*(_DWORD *)(v23 + 72);
      goto LABEL_55;
    case 3:
      if (gLogCategory_APBrowserCarBonjour <= 30
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v24 = (dispatch_group_t *)CMBaseObjectGetDerivedStorage();
      dispatch_group_leave(*v24);
      goto LABEL_107;
    case 4:
      if (gLogCategory_APBrowserCarBonjour <= 90
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (carBonjourBrowser_removeAllDevices(*(const void **)(a1 + 48), 0)) {
        goto LABEL_55;
      }
      goto LABEL_107;
    default:
      if (gLogCategory_APBrowserCarBonjour <= 90
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_55;
  }
}

uint64_t carBonjourBrowser_removeAllDevices(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APBrowserCarBonjour <= 30
    && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFAllocatorRef v5 = CFGetAllocator(a1);
  CFDictionaryRef Copy = CFDictionaryCreateCopy(v5, *(CFDictionaryRef *)(DerivedStorage + 80));
  if (Copy)
  {
    CFDictionaryApplyBlock();
    if (!a2) {
      goto LABEL_14;
    }
    carBonjourBrowser_dispatchEvent(a1, 6, 0);
    if (!*(void *)(DerivedStorage + 112)) {
      goto LABEL_14;
    }
    CFAllocatorRef v7 = (void *)os_transaction_copy_description();
    if (gLogCategory_APBrowserCarBonjour <= 50
      && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    free(v7);
    int v8 = *(void **)(DerivedStorage + 112);
    if (v8)
    {
      os_release(v8);
      uint64_t v9 = 0;
      *(void *)(DerivedStorage + 112) = 0;
    }
    else
    {
LABEL_14:
      uint64_t v9 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v9 = 4294954510;
  }
  CFRelease(Copy);
  return v9;
}

void __carBonjourBrowser_removeAllDevices_block_invoke(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  uint64_t v4 = CFDictionaryGetValue(theDict, @"AirPlayBonjourInfo");
  CFTypeRef cf = v4;
  if (v4)
  {
    CFRetain(v4);
    BonjourDevice_RemoveInterfaceInfo();
    CFAllocatorRef v5 = *(const void **)(a1 + 32);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    value = 0;
    CFAllocatorRef v7 = CFGetAllocator(v5);
    int v8 = APBrowserCopyDeviceIDFromBonjourInfo(v7, (uint64_t)cf, (CFNumberRef *)&value);
    if (v8)
    {
      int v11 = v8;
      APSLogErrorAt();
      CFIndex v10 = 0;
    }
    else
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFIndex v10 = Mutable;
      if (Mutable)
      {
        CFDictionarySetValue(Mutable, @"deviceID", value);
        if (CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 80), value))
        {
          if (gLogCategory_APBrowserCarBonjour <= 30
            && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          carBonjourBrowser_dispatchEvent(v5, 5, v10);
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 80), value);
        }
        int v11 = 0;
      }
      else
      {
        APSLogErrorAt();
        int v11 = -12786;
      }
    }
    if (value) {
      CFRelease(value);
    }
    if (v10) {
      CFRelease(v10);
    }
    if (v11) {
      APSLogErrorAt();
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    APSLogErrorAt();
  }
}

void __carBonjourBrowser_dispatchEvent_block_invoke(uint64_t a1)
{
  (*(void (**)(void, void, void, void))(a1 + 32))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 64), *(void *)(a1 + 48), *(void *)(a1 + 56));
  CFDictionaryRef v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  CFDictionaryRef v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t APTransportPackageRTPCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  uint64_t v2 = APTransportPackageRTPCreateWithBBuf(a1, 0, a2);
  if (v2) {
    APSLogErrorAt();
  }
  return v2;
}

uint64_t APTransportPackageRTPCreateWithBBuf(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, CFTypeRef *a3)
{
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef cf = 0;
  APTransportPackageGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6)
  {
    uint64_t v15 = v6;
LABEL_33:
    APSLogErrorAt();
    goto LABEL_21;
  }
  uint64_t DerivedStorage = (CFAllocatorRef **)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = 0;
  uint64_t v8 = APTransportParcelMakeWithAllocators(a1, (const __CFAllocator *)*MEMORY[0x1E4F1CF90], 2uLL, 0, DerivedStorage);
  if (v8)
  {
    uint64_t v15 = v8;
    goto LABEL_33;
  }
  if (!a2) {
    goto LABEL_14;
  }
  size_t lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  uint64_t DataPointer = CMBlockBufferGetDataPointer(a2, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
  if (DataPointer)
  {
    uint64_t v15 = DataPointer;
    goto LABEL_33;
  }
  if (lengthAtOffsetOut <= 1)
  {
    APSLogErrorAt();
LABEL_20:
    uint64_t v15 = 4294960591;
    goto LABEL_21;
  }
  if ((*dataPointerOut & 0xC0) != 0x80)
  {
    APSLogErrorAt();
    uint64_t v15 = 4294960581;
    goto LABEL_21;
  }
  uint64_t v10 = dataPointerOut[1] & 0x7F;
  uint64_t v11 = v10 - 96;
  if ((v10 - 96) >= 0xE || ((0x3D13u >> v11) & 1) == 0)
  {
    if (gLogCategory_APTransportPackageRTP <= 90
      && (gLogCategory_APTransportPackageRTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_20;
  }
  APTransportParcelSetMessageType((uint64_t)*DerivedStorage, dword_1D093C468[v11]);
  Datauint16_t Length = CMBlockBufferGetDataLength(a2);
  uint64_t v13 = CMBlockBufferCreateWithBufferReference(a1, a2, 2uLL, DataLength - 2, 0, &blockBufferOut);
  if (v13)
  {
    uint64_t v15 = v13;
    goto LABEL_33;
  }
  uint64_t v14 = APTransportParcelSetMessageData(*DerivedStorage, blockBufferOut);
  if (v14)
  {
    uint64_t v15 = v14;
    goto LABEL_33;
  }
LABEL_14:
  if (gLogCategory_APTransportPackageRTP <= 30
    && (gLogCategory_APTransportPackageRTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v15 = 0;
  *a3 = cf;
  CFTypeRef cf = 0;
LABEL_21:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v15;
}

uint64_t APTransportPackageRTPCreateWithMessageSize(uint64_t a1, size_t a2, void *a3)
{
  uint64_t v3 = rtppackage_createWithMessageSize(a1, a2, a3);
  if (v3) {
    APSLogErrorAt();
  }
  return v3;
}

uint64_t rtppackage_createWithMessageSize(uint64_t a1, size_t a2, void *a3)
{
  APTransportPackageGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5)
  {
    uint64_t v9 = v5;
LABEL_14:
    APSLogErrorAt();
    return v9;
  }
  if (a2) {
    size_t v6 = a2;
  }
  else {
    size_t v6 = 1450;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 8) = 0;
  uint64_t v8 = APTransportParcelMake(2uLL, v6, (CFAllocatorRef **)DerivedStorage);
  if (v8)
  {
    uint64_t v9 = v8;
    goto LABEL_14;
  }
  if (gLogCategory_APTransportPackageRTP <= 30
    && (gLogCategory_APTransportPackageRTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v9 = 0;
  *a3 = 0;
  return v9;
}

uint64_t APTransportPackageRTPCreateWithMessageSizeAndType(uint64_t a1, size_t a2, int a3, void *a4)
{
  uint64_t v5 = rtppackage_createWithMessageSize(a1, a2, a4);
  if (v5)
  {
    APSLogErrorAt();
  }
  else
  {
    uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
    APTransportParcelSetMessageType(*DerivedStorage, a3);
    rtppackage_ensureHeaderIsSet();
  }
  return v5;
}

uint64_t rtppackage_ensureHeaderIsSet()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  int MessageType = APTransportParcelGetMessageType(*DerivedStorage);
  uint64_t result = APTransportParcelIsHeaderSet(*DerivedStorage);
  if (!result)
  {
    __int16 v4 = 0;
    if (MessageType > 1735550307)
    {
      if (MessageType <= 1836213603)
      {
        if (MessageType == 1735550308)
        {
          __int16 v3 = 24960;
          goto LABEL_25;
        }
        if (MessageType == 1835100526)
        {
          __int16 v3 = 25728;
          goto LABEL_25;
        }
      }
      else
      {
        switch(MessageType)
        {
          case 1836213604:
            __int16 v3 = 26752;
            goto LABEL_25;
          case 1869575779:
            __int16 v3 = 27520;
            goto LABEL_25;
          case 1870033508:
            __int16 v3 = 28032;
            goto LABEL_25;
        }
      }
    }
    else if (MessageType <= 1635088494)
    {
      if (MessageType == 1634497568)
      {
        __int16 v3 = 25984;
        goto LABEL_25;
      }
      if (MessageType == 1634887012)
      {
        __int16 v3 = 27008;
        goto LABEL_25;
      }
    }
    else
    {
      switch(MessageType)
      {
        case 1635088495:
          __int16 v3 = 27264;
          goto LABEL_25;
        case 1635283556:
          __int16 v3 = 27776;
          goto LABEL_25;
        case 1734700576:
          __int16 v3 = 24704;
LABEL_25:
          __int16 v4 = v3;
          return APTransportParcelSetHeader(*DerivedStorage, &v4);
      }
    }
    if (gLogCategory_APTransportPackageRTP <= 90
      && (gLogCategory_APTransportPackageRTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return APTransportParcelSetHeader(*DerivedStorage, &v4);
  }
  return result;
}

void rtppackage_Finalize()
{
  uint64_t DerivedStorage = (void **)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportPackageRTP <= 30
    && (gLogCategory_APTransportPackageRTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APTransportParcelFree(*DerivedStorage);
  *uint64_t DerivedStorage = 0;
}

__CFString *rtppackage_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTransportPackageRTP %p>", a1);
  return Mutable;
}

const void *rtppackage_CopyMessageData()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MessageCFDataRef Data = (const void *)APTransportParcelGetMessageData(*DerivedStorage);
  uint64_t v2 = MessageData;
  if (MessageData) {
    CFRetain(MessageData);
  }
  return v2;
}

uint64_t rtppackage_SetMessageData(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  __int16 v3 = *(void **)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageData(v3, a2);
}

uint64_t rtppackage_GetMessageType()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelGetMessageType(v0);
}

uint64_t rtppackage_SetMessageType(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageType(v3, a2);
}

CMBlockBufferRef rtppackage_CreateBBufRepresentation()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef v2 = 0;
  rtppackage_ensureHeaderIsSet();
  APTransportParcelCreateBBufRepresentation(*DerivedStorage, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0, &v2);
  return v2;
}

uint64_t rtppackage_SetArrivalDeadlineTicks(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t rtppackage_GetArrivalDeadlineTicks()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 8);
}

CFStringRef carPlayHelperWiFi_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[APCarPlayHelperWiFi %p]", a1);
}

uint64_t __APCarPlayHelperWiFiGetClassID_block_invoke()
{
  uint64_t ClassID = APCarPlayHelperGetClassID();
  return MEMORY[0x1F40DC658](&APCarPlayHelperWiFiGetClassID_sClassDesc, ClassID, 0, &APCarPlayHelperWiFiGetClassID_sClassID);
}

uint64_t APCarPlayHelperWiFiCreate(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, void *a5)
{
  if (APCarPlayHelperWiFiGetClassID_sRegisterOnce != -1) {
    dispatch_once(&APCarPlayHelperWiFiGetClassID_sRegisterOnce, &__block_literal_global_4);
  }
  uint64_t v9 = CMDerivedObjectCreate();
  if (v9)
  {
    uint64_t v20 = v9;
LABEL_28:
    APSLogErrorAt();
    return v20;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 40) = -1;
  dispatch_semaphore_t v11 = dispatch_semaphore_create(0);
  *(void *)(DerivedStorage + 8) = v11;
  if (!v11) {
    goto LABEL_26;
  }
  dispatch_queue_t v12 = dispatch_queue_create("APCarPlayHelperWiFiInternalQueue", 0);
  *(void *)(DerivedStorage + 16) = v12;
  if (!v12) {
    goto LABEL_19;
  }
  dispatch_queue_t v13 = dispatch_queue_create("APCarPlayHelperWiFiEventQueue", 0);
  *(void *)(DerivedStorage + 24) = v13;
  if (!v13) {
    goto LABEL_19;
  }
  *(void *)(DerivedStorage + 104) = a2;
  *(void *)(DerivedStorage + 112) = a3;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294954516;
  }
  dispatch_semaphore_t v14 = dispatch_semaphore_create(0);
  *(void *)(DerivedStorage + 56) = v14;
  if (!v14)
  {
LABEL_26:
    APSLogErrorAt();
    return 4294954510;
  }
  SharedHelper = (const void *)APConnectivityHelperGetSharedHelper();
  if (!SharedHelper)
  {
    *(void *)(DerivedStorage + 72) = 0;
    goto LABEL_19;
  }
  CFTypeRef v16 = CFRetain(SharedHelper);
  *(void *)(DerivedStorage + 72) = v16;
  if (!v16)
  {
LABEL_19:
    APSLogErrorAt();
    return 4294960568;
  }
  uint64_t v17 = APConnectivityHelperRegisterEventHandler((uint64_t)v16, 0, (uint64_t)carPlayHelperWiFi_handleConnectivityHelperEvent);
  if (v17)
  {
    uint64_t v20 = v17;
    goto LABEL_28;
  }
  if (a4)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(a4, @"powerAssertion");
    *(void *)(DerivedStorage + 32) = Value;
    if (Value) {
      CFRetain(Value);
    }
    int v19 = CFDictionaryGetValue(a4, @"eventRecorder");
    *(void *)(DerivedStorage + 128) = v19;
    if (v19) {
      CFRetain(v19);
    }
  }
  uint64_t v20 = 0;
  *a5 = 0;
  return v20;
}

void carPlayHelperWiFi_handleConnectivityHelperEvent(uint64_t a1, int a2, const void *a3, const void *a4)
{
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2020000000;
  int v12 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4) {
    CFRetain(a4);
  }
  if (a3) {
    CFRetain(a3);
  }
  uint64_t v8 = *(NSObject **)(DerivedStorage + 16);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __carPlayHelperWiFi_handleConnectivityHelperEvent_block_invoke;
  void v9[3] = &unk_1E688BA10;
  int v10 = a2;
  v9[4] = v11;
  void v9[5] = a4;
  void v9[6] = a3;
  dispatch_async(v8, v9);
  _Block_object_dispose(v11, 8);
}

void sub_1D08B49A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void FigCFRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t carPlayHelperWiFi_invalidate(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(NSObject **)(DerivedStorage + 16);
  if (v3)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __carPlayHelperWiFi_invalidate_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = DerivedStorage;
    void block[5] = a1;
    void block[6] = a1;
    dispatch_sync(v3, block);
  }
  return 0;
}

void carPlayHelperWiFi_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage[2];
  if (v3)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __carPlayHelperWiFi_finalize_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = DerivedStorage;
    dispatch_sync(v3, block);
  }
  carPlayHelperWiFi_invalidate(a1);
  __int16 v4 = DerivedStorage[1];
  if (v4)
  {
    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v5 = DerivedStorage[1];
    if (v5)
    {
      dispatch_release(v5);
      DerivedStorage[1] = 0;
    }
  }
  size_t v6 = DerivedStorage[2];
  if (v6)
  {
    dispatch_sync(v6, &__block_literal_global_12);
    CFAllocatorRef v7 = DerivedStorage[2];
    if (v7)
    {
      dispatch_release(v7);
      DerivedStorage[2] = 0;
    }
  }
  uint64_t v8 = DerivedStorage[3];
  if (v8)
  {
    dispatch_sync(v8, &__block_literal_global_14);
    uint64_t v9 = DerivedStorage[3];
    if (v9)
    {
      dispatch_release(v9);
      DerivedStorage[3] = 0;
    }
  }
  int v10 = (const void *)DerivedStorage[16];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[16] = 0;
  }
  dispatch_semaphore_t v11 = (const void *)DerivedStorage[4];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[4] = 0;
  }
  int v12 = (const void *)DerivedStorage[12];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[12] = 0;
  }
  dispatch_queue_t v13 = (const void *)DerivedStorage[11];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[11] = 0;
  }
  dispatch_semaphore_t v14 = (const void *)DerivedStorage[9];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[9] = 0;
  }
  uint64_t v15 = (const void *)DerivedStorage[8];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[8] = 0;
  }
  CFTypeRef v16 = DerivedStorage[7];
  if (v16)
  {
    dispatch_release(v16);
    DerivedStorage[7] = 0;
  }
}

NSObject *__carPlayHelperWiFi_invalidate_block_invoke(NSObject *result)
{
  Class isa = result[4].isa;
  if (!*(unsigned char *)isa)
  {
    CMBlockBufferRef v2 = result;
    uint64_t v3 = *((void *)isa + 9);
    if (v3) {
      APConnectivityHelperRemoveAllRegistrations(v3, (uint64_t)v2[5].isa);
    }
    Class v4 = v2[6].isa;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    carPlayHelperWiFi_dispatchEvent(v4, 3, 0);
    uint64_t result = *(NSObject **)(DerivedStorage + 8);
    if (result) {
      uint64_t result = dispatch_semaphore_signal(result);
    }
    *(unsigned char *)v2[4].Class isa = 1;
  }
  return result;
}

void carPlayHelperWiFi_dispatchEvent(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = *(void *)(DerivedStorage + 104);
  if (v7)
  {
    uint64_t v8 = DerivedStorage;
    uint64_t v9 = *(void *)(DerivedStorage + 112);
    if (gLogCategory_APBrowserCarWiFiHelper <= 20
      && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (a1) {
      CFRetain(a1);
    }
    if (a3) {
      CFRetain(a3);
    }
    int v10 = *(NSObject **)(v8 + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __carPlayHelperWiFi_dispatchEvent_block_invoke;
    block[3] = &__block_descriptor_68_e5_v8__0l;
    block[4] = v7;
    void block[5] = a1;
    int v12 = a2;
    void block[6] = a3;
    void block[7] = v9;
    dispatch_async(v10, block);
  }
}

void __carPlayHelperWiFi_dispatchEvent_block_invoke(uint64_t a1)
{
  (*(void (**)(void, void, void, void))(a1 + 32))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 64), *(void *)(a1 + 48), *(void *)(a1 + 56));
  CMBlockBufferRef v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t __carPlayHelperWiFi_finalize_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 104) = 0;
  *(void *)(*(void *)(result + 32) + 112) = 0;
  return result;
}

void carPlayHelperWiFi_setInterfaceWatchingEnabled(const void *a1, char a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 16))
  {
    uint64_t v5 = DerivedStorage;
    CFRetain(a1);
    size_t v6 = *(NSObject **)(v5 + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __carPlayHelperWiFi_setInterfaceWatchingEnabled_block_invoke;
    block[3] = &__block_descriptor_49_e5_v8__0l;
    char v8 = a2;
    block[4] = v5;
    void block[5] = a1;
    dispatch_async(v6, block);
  }
}

void __carPlayHelperWiFi_setInterfaceWatchingEnabled_block_invoke(uint64_t a1)
{
  CMBlockBufferRef v2 = (void *)[MEMORY[0x1E4F28C40] defaultCenter];
  uint64_t v3 = *(void *)(a1 + 32);
  if (!*(unsigned char *)v3)
  {
    if (*(unsigned __int8 *)(v3 + 80) == *(unsigned __int8 *)(a1 + 48)) {
      goto LABEL_12;
    }
    if (*(unsigned char *)(a1 + 48))
    {
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      void v8[2] = __carPlayHelperWiFi_setInterfaceWatchingEnabled_block_invoke_2;
      v8[3] = &__block_descriptor_48_e24_v16__0__NSNotification_8l;
      uint64_t v4 = *(void *)(a1 + 40);
      v8[4] = v3;
      void v8[5] = v4;
      uint64_t v5 = [v2 addObserverForName:@"CRPairedVehiclesDidChangeNotification" object:0 queue:0 usingBlock:v8];
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      *(void *)(v7 + 48) = v5;
      if (APConnectivityHelperRegisterForEvent(*(void *)(v7 + 72), v6, 3)
        || APConnectivityHelperRegisterForEvent(*(void *)(*(void *)(a1 + 32) + 72), *(void *)(a1 + 40), 9))
      {
LABEL_14:
        APSLogErrorAt();
        goto LABEL_15;
      }
    }
    else
    {
      if (*(void *)(v3 + 48))
      {
        objc_msgSend(v2, "removeObserver:");
        uint64_t v3 = *(void *)(a1 + 32);
        *(void *)(v3 + 48) = 0;
      }
      if (APConnectivityHelperDeregisterForEvent(*(void *)(v3 + 72), *(void *)(a1 + 40), 3)
        || APConnectivityHelperDeregisterForEvent(*(void *)(*(void *)(a1 + 32) + 72), *(void *)(a1 + 40), 9))
      {
        goto LABEL_14;
      }
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 80) = *(unsigned char *)(a1 + 48);
    goto LABEL_12;
  }
LABEL_15:
  if (gLogCategory_APBrowserCarWiFiHelper <= 90
    && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_12:
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __carPlayHelperWiFi_setInterfaceWatchingEnabled_block_invoke_2(uint64_t a1)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  long long v3 = *(_OWORD *)(a1 + 32);
  uint64_t v1 = *(NSObject **)(v3 + 16);
  v2[2] = __carPlayHelperWiFi_setInterfaceWatchingEnabled_block_invoke_3;
  v2[3] = &__block_descriptor_48_e5_v8__0l;
  dispatch_async(v1, v2);
}

uint64_t __carPlayHelperWiFi_setInterfaceWatchingEnabled_block_invoke_3(uint64_t result)
{
  uint64_t v1 = *(unsigned char **)(result + 32);
  if (!*v1)
  {
    if (v1[80]) {
      return carPlayHelperWiFi_updateCarKitInCarStatus(*(const void **)(result + 40));
    }
  }
  return result;
}

uint64_t carPlayHelperWiFi_updateCarKitInCarStatus(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  if (*(void *)(DerivedStorage + 32)) {
    APSPowerAssertionRaiseTemporary();
  }
  uint64_t v4 = *(const void **)(v3 + 64);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(v3 + 64) = 0;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __carPlayHelperWiFi_updateCarKitInCarStatus_block_invoke;
  v6[3] = &__block_descriptor_48_e33_v28__0B8__NSString_12__NSError_20l;
  v6[4] = v3;
  v6[5] = a1;
  ((void (*)(uint64_t))softLinkCRBluetoothIndicatesInCar[0])((uint64_t)v6);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v3 + 56), 0xFFFFFFFFFFFFFFFFLL);
  return carPlayHelperWiFi_updateCarKitNetworkStatus(a1);
}

intptr_t __carPlayHelperWiFi_updateCarKitInCarStatus_block_invoke(uint64_t a1, int a2, const __CFString *a3, void *a4)
{
  if (a3) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if (gLogCategory_APBrowserCarWiFiHelper <= 50
    && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a4)
  {
    if ([a4 code]) {
      char v8 = 0;
    }
    else {
      char v8 = v7;
    }
    if ((v8 & 1) == 0) {
      return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 56));
    }
  }
  else if (!v7)
  {
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 56));
  }
  CFAllocatorRef v9 = CFGetAllocator(*(CFTypeRef *)(a1 + 40));
  *(void *)(*(void *)(a1 + 32) + 64) = CFStringCreateCopy(v9, a3);
  uint64_t v10 = *(void *)(a1 + 32);
  *(unsigned char *)(v10 + 120) = 1;
  if (*(void *)(v10 + 128)) {
    APSEventRecorderRecordEvent();
  }
  uint64_t v11 = LogCategoryCopyOSLogHandle();
  int v12 = (void *)v11;
  if (v11) {
    dispatch_queue_t v13 = v11;
  }
  else {
    dispatch_queue_t v13 = MEMORY[0x1E4F14500];
  }
  if (os_signpost_enabled(v13))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D087F000, v13, OS_SIGNPOST_EVENT, 0x2B8D07D0uLL, "AP_SIGNPOST_CAR_CARENTERED", "", buf, 2u);
  }
  if (v12) {

  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 56));
}

uint64_t carPlayHelperWiFi_updateCarKitNetworkStatus(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v19 = 0;
  uint64_t v15 = 0;
  CFTypeRef v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 0;
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v4 = 0;
LABEL_38:
    int v12 = 0;
    goto LABEL_31;
  }
  uint64_t v3 = DerivedStorage;
  uint64_t v4 = APConnectivityHelperCopyCurrentWiFiNetworkInfo(*(dispatch_queue_t **)(DerivedStorage + 72), (CFTypeRef *)&v19);
  if (v4)
  {
    APSLogErrorAt();
    goto LABEL_38;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(v19, @"wifiNetworkCarPlayUUID");
  uint64_t v6 = Value;
  if (!Value)
  {
    if (!*((unsigned char *)v16 + 24)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __carPlayHelperWiFi_updateCarKitNetworkStatus_block_invoke;
  v14[3] = &unk_1E688B9E8;
  v14[4] = &v15;
  void v14[5] = Value;
  v14[6] = v3;
  softLinkCRAllowsConnectionsForWiFiUUID((uint64_t)Value, (uint64_t)v14);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v3 + 56), 0xFFFFFFFFFFFFFFFFLL);
  if (!*((unsigned char *)v16 + 24)) {
    goto LABEL_9;
  }
  if (!FigCFEqual())
  {
LABEL_8:
    if (!*(void *)(v3 + 64) && FigCFEqual()) {
      goto LABEL_13;
    }
LABEL_9:
    if (gLogCategory_APBrowserCarWiFiHelper <= 50
      && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    int v7 = *(const void **)(v3 + 96);
    if (v7)
    {
      CFRelease(v7);
      char v8 = 0;
      *(void *)(v3 + 96) = 0;
    }
    else
    {
      char v8 = 0;
    }
    goto LABEL_26;
  }
LABEL_13:
  if (gLogCategory_APBrowserCarWiFiHelper <= 50
    && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
  {
    FigCFEqual();
    LogPrintF();
  }
  CFAllocatorRef v9 = *(const void **)(v3 + 96);
  *(void *)(v3 + 96) = v6;
  if (v6) {
    CFRetain(v6);
  }
  if (v9) {
    CFRelease(v9);
  }
  char v8 = *(const void **)(v3 + 88);
LABEL_26:
  CFAllocatorRef v10 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v12 = Mutable;
  if (Mutable)
  {
    if (v8)
    {
      CFDictionarySetValue(Mutable, @"interfaceName", v8);
      if (*(unsigned char *)(v3 + 120))
      {
        CFDictionarySetValue(v12, @"setUpForOSTransaction", (const void *)*MEMORY[0x1E4F1CFD0]);
        *(unsigned char *)(v3 + 120) = 0;
      }
    }
    carPlayHelperWiFi_dispatchEvent(a1, 0, v12);
    uint64_t v4 = 0;
  }
  else
  {
    APSLogErrorAt();
    int v12 = 0;
    uint64_t v4 = 4294954510;
  }
LABEL_31:
  if (v19) {
    CFRelease(v19);
  }
  if (v12) {
    CFRelease(v12);
  }
  _Block_object_dispose(&v15, 8);
  return v4;
}

void sub_1D08B56F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t initCRBluetoothIndicatesInCar(uint64_t a1)
{
  if (CarKitLibrary_sOnce != -1) {
    dispatch_once(&CarKitLibrary_sOnce, &__block_literal_global_32);
  }
  CMBlockBufferRef v2 = (uint64_t (*)())dlsym((void *)CarKitLibrary_sLib, "CRBluetoothIndicatesInCar");
  softLinkCRBluetoothIndicatesInCar[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void *__CarKitLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/CarKit.framework/CarKit", 2);
  CarKitLibrary_sLib = (uint64_t)result;
  return result;
}

intptr_t __carPlayHelperWiFi_updateCarKitNetworkStatus_block_invoke(uint64_t a1, char a2, void *a3)
{
  if (gLogCategory_APBrowserCarWiFiHelper <= 30
    && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a3 || ![a3 code]) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  }
  uint64_t v6 = *(NSObject **)(*(void *)(a1 + 48) + 56);
  return dispatch_semaphore_signal(v6);
}

uint64_t initCRAllowsConnectionsForWiFiUUID(uint64_t a1, uint64_t a2)
{
  if (CarKitLibrary_sOnce != -1) {
    dispatch_once(&CarKitLibrary_sOnce, &__block_literal_global_32);
  }
  uint64_t v4 = (uint64_t (*)())dlsym((void *)CarKitLibrary_sLib, "CRAllowsConnectionsForWiFiUUID");
  softLinkCRAllowsConnectionsForWiFiUUID = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

void __carPlayHelperWiFi_handleConnectivityHelperEvent_block_invoke(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 56);
  switch(v2)
  {
    case 3:
LABEL_4:
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = carPlayHelperWiFi_networkChanged(*(void **)(a1 + 40), *(void *)(a1 + 48));
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        APSLogErrorAt();
      }
      break;
    case 103:
      if (gLogCategory_APBrowserCarWiFiHelper <= 30
        && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v3 = *(void **)(a1 + 40);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v5 = *(const void **)(DerivedStorage + 88);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(DerivedStorage + 88) = 0;
        carPlayHelperWiFi_networkChanged(v3, 0);
      }
      carPlayHelperWiFi_dispatchEvent(v3, 2, 0);
      break;
    case 9:
      goto LABEL_4;
    default:
      if (gLogCategory_APBrowserCarWiFiHelper <= 30
        && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      break;
  }
  uint64_t v6 = *(const void **)(a1 + 40);
  if (v6) {
    CFRelease(v6);
  }
  int v7 = *(const void **)(a1 + 48);
  if (v7)
  {
    CFRelease(v7);
  }
}

uint64_t carPlayHelperWiFi_networkChanged(void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage) {
    return 0;
  }
  uint64_t v5 = DerivedStorage;
  if (a2)
  {
    CFStringGetTypeID();
    TypedCFDictionaryRef Value = (const void *)CFDictionaryGetTypedValue();
    CFStringGetTypeID();
    CFDictionaryGetTypedValue();
    CFStringGetTypeID();
    CFDictionaryGetTypedValue();
    LODWORD(a2) = CFDictionaryGetInt64() != 0;
  }
  else
  {
    TypedCFDictionaryRef Value = 0;
  }
  if (gLogCategory_APBrowserCarWiFiHelper <= 50
    && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    if (v5[4]) {
      APSPowerAssertionRaiseTemporary();
    }
    int v7 = (const void *)v5[11];
    v5[11] = TypedValue;
    if (TypedValue) {
      CFRetain(TypedValue);
    }
    if (v7) {
      CFRelease(v7);
    }
    if (v5[16]) {
      APSEventRecorderRecordEvent();
    }
    uint64_t v8 = LogCategoryCopyOSLogHandle();
    CFAllocatorRef v9 = (void *)v8;
    if (v8) {
      CFAllocatorRef v10 = v8;
    }
    else {
      CFAllocatorRef v10 = MEMORY[0x1E4F14500];
    }
    if (os_signpost_enabled(v10))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1D087F000, v10, OS_SIGNPOST_EVENT, 0x2B8D07E4uLL, "AP_SIGNPOST_CAR_WIFI_LINKUP", "", buf, 2u);
    }
    if (v9) {

    }
    uint64_t v30 = 0;
    os_signpost_id_t v31 = &v30;
    uint64_t v32 = 0x2020000000;
    int v33 = 0;
    uint64_t v11 = CMBaseObjectGetDerivedStorage();
    uint64_t v12 = v11;
    if (!*(unsigned char *)v11 && !notify_is_valid_token(*(_DWORD *)(v11 + 40)))
    {
      dispatch_queue_t v13 = dispatch_queue_create("APCarPlayHelperWiFiCarKitNotifyQueue", 0);
      if (v13)
      {
        dispatch_semaphore_t v14 = v13;
        if (a1) {
          CFRetain(a1);
        }
        dispatch_set_context(v14, a1);
        dispatch_set_finalizer_f(v14, (dispatch_function_t)FigCFRelease);
        *(void *)buf = MEMORY[0x1E4F143A8];
        uint64_t v24 = 3221225472;
        uint64_t v25 = __carPlayHelperWiFi_registerForCarKitInCarNotification_block_invoke;
        uint64_t v26 = &unk_1E688BA38;
        uint64_t v28 = a1;
        uint64_t v29 = v12;
        uint64_t v27 = &v30;
        uint32_t v15 = notify_register_dispatch("com.apple.carplay.in-car", (int *)(v12 + 40), v14, buf);
        *((_DWORD *)v31 + 6) = v15;
        if (v15 || (int updated = carPlayHelperWiFi_updateCarKitInCarStatus(a1), (*((_DWORD *)v31 + 6) = updated) != 0)) {
          APSLogErrorAt();
        }
        dispatch_release(v14);
      }
      else
      {
        APSLogErrorAt();
        *((_DWORD *)v31 + 6) = -6728;
      }
    }
    uint64_t v17 = *((unsigned int *)v31 + 6);
    _Block_object_dispose(&v30, 8);
    if (!v17)
    {
      APConnectivityHelperRegisterActivity(v5[9], (uint64_t)a1, 0);
      return v17;
    }
LABEL_46:
    APSLogErrorAt();
    return v17;
  }
  char v18 = (const void *)v5[11];
  if (v18)
  {
    CFRelease(v18);
    v5[11] = 0;
  }
  APConnectivityHelperDeregisterActivity(v5[9], (uint64_t)a1, 0);
  uint64_t v19 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)v19) {
    return 0;
  }
  uint64_t v20 = v19;
  if (!notify_is_valid_token(*(_DWORD *)(v19 + 40))) {
    return 0;
  }
  notify_cancel(*(_DWORD *)(v20 + 40));
  *(_DWORD *)(v20 + 40) = -1;
  int v21 = *(const void **)(v20 + 64);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(v20 + 64) = 0;
  }
  uint64_t v17 = carPlayHelperWiFi_updateCarKitNetworkStatus(a1);
  if (v17)
  {
    APSLogErrorAt();
    goto LABEL_46;
  }
  return v17;
}

void sub_1D08B5F60(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void __carPlayHelperWiFi_registerForCarKitInCarNotification_block_invoke(void *a1, int a2)
{
  uint64_t v4 = (const void *)a1[5];
  if (v4)
  {
    CFRetain(v4);
    uint64_t v5 = a1[5];
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = a1[6];
  int v7 = *(NSObject **)(v6 + 16);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __carPlayHelperWiFi_registerForCarKitInCarNotification_block_invoke_2;
  v8[3] = &unk_1E688BA10;
  int v9 = a2;
  v8[4] = a1[4];
  void v8[5] = v6;
  void v8[6] = v5;
  dispatch_async(v7, v8);
}

void __carPlayHelperWiFi_registerForCarKitInCarNotification_block_invoke_2(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 56) == *(_DWORD *)(*(void *)(a1 + 40) + 40))
  {
    if (gLogCategory_APBrowserCarWiFiHelper <= 30
      && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = carPlayHelperWiFi_updateCarKitInCarStatus(*(const void **)(a1 + 48));
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      APSLogErrorAt();
    }
  }
  int v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t APTransportStreamUnbufferedCreate(uint64_t a1, const void *a2, uint64_t a3, const void *a4, const void *a5, const __CFDictionary *a6, void *a7)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    FigTransportStreamGetClassID();
    uint64_t v13 = CMDerivedObjectCreate();
    if (v13)
    {
      uint64_t v20 = v13;
      APSLogErrorAt();
    }
    else
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      if (a2) {
        CFTypeRef v15 = CFRetain(a2);
      }
      else {
        CFTypeRef v15 = 0;
      }
      DerivedStorage[4] = v15;
      *uint64_t DerivedStorage = a3;
      DerivedStorage[1] = a4;
      if (a4) {
        CFRetain(a4);
      }
      DerivedStorage[5] = CFRetain(a5);
      SNPrintF();
      dispatch_queue_t v16 = dispatch_queue_create(label, 0);
      DerivedStorage[2] = v16;
      if (v16
        && (SNPrintF(), dispatch_queue_t v17 = dispatch_queue_create(label, 0), (DerivedStorage[13] = v17) != 0)
        && (SNPrintF(), dispatch_queue_t v18 = dispatch_queue_create(label, 0), (DerivedStorage[8] = v18) != 0))
      {
        if (a6)
        {
          CFDictionaryRef Value = CFDictionaryGetValue(a6, @"EventRecorder");
          DerivedStorage[7] = Value;
          if (Value) {
            CFRetain(Value);
          }
        }
        if (gLogCategory_APTransportStreamUnbuffered <= 50
          && (gLogCategory_APTransportStreamUnbuffered != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v20 = 0;
        *a7 = 0;
      }
      else
      {
        APSLogErrorAt();
        return 4294950685;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v20;
}

uint64_t stream_Invalidate()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

void stream_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportStreamUnbuffered <= 50
    && (gLogCategory_APTransportStreamUnbuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(unsigned char *)(DerivedStorage + 24))
  {
    uint64_t v1 = *(const void **)(DerivedStorage + 56);
    if (v1)
    {
      CFRelease(v1);
      *(void *)(DerivedStorage + 56) = 0;
    }
    int v2 = *(const void **)(DerivedStorage + 8);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(DerivedStorage + 8) = 0;
    }
    uint64_t v3 = *(const void **)(DerivedStorage + 32);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(DerivedStorage + 32) = 0;
    }
    uint64_t v4 = *(NSObject **)(DerivedStorage + 64);
    if (v4)
    {
      dispatch_release(v4);
      *(void *)(DerivedStorage + 64) = 0;
    }
    uint64_t v5 = *(NSObject **)(DerivedStorage + 104);
    if (v5)
    {
      dispatch_release(v5);
      *(void *)(DerivedStorage + 104) = 0;
    }
    uint64_t v6 = *(NSObject **)(DerivedStorage + 16);
    if (v6)
    {
      dispatch_release(v6);
      *(void *)(DerivedStorage + 16) = 0;
    }
  }
  else
  {
    if (gLogCategory_APTransportStreamUnbuffered <= 100) {
      stream_Finalize_cold_1(gLogCategory_APTransportStreamUnbuffered);
    }
    __break(1u);
  }
}

__CFString *stream_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTransportStreamUnbuffered %p '%@'>", a1, *(void *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t stream_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFNumberRef *a4)
{
  uint64_t v17 = 0;
  dispatch_queue_t v18 = &v17;
  uint64_t v19 = 0x2000000000;
  int v20 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 24))
  {
    APSLogErrorAt();
    uint64_t v11 = v18;
    int v12 = -16617;
    goto LABEL_8;
  }
  int v9 = (void *)DerivedStorage;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F22048]))
  {
    CFNumberRef v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, v9);
    *a4 = v10;
    if (!v10)
    {
      APSLogErrorAt();
      uint64_t v11 = v18;
      int v12 = -16611;
LABEL_8:
      *((_DWORD *)v11 + 6) = v12;
    }
  }
  else
  {
    uint64_t v13 = v9[2];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __stream_CopyProperty_block_invoke;
    block[3] = &unk_1E688BA80;
    block[4] = &v17;
    void block[5] = a1;
    void block[6] = a2;
    void block[7] = a3;
    void block[8] = a4;
    dispatch_sync(v13, block);
  }
  uint64_t v14 = *((unsigned int *)v18 + 6);
  _Block_object_dispose(&v17, 8);
  return v14;
}

uint64_t stream_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  uint64_t v6 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 16);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = __stream_SetProperty_block_invoke;
  void v9[3] = &unk_1E688BAA8;
  v9[4] = &v10;
  void v9[5] = a1;
  void v9[6] = a2;
  void v9[7] = a3;
  dispatch_sync(v6, v9);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

uint64_t stream_invalidateInternal()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 24))
  {
    uint64_t v1 = (void *)DerivedStorage;
    *(unsigned char *)(DerivedStorage + 24) = 1;
    uint64_t v2 = *(void *)(DerivedStorage + 40);
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void (**)(uint64_t, void))(v4 + 24);
    if (v5) {
      v5(v2, 0);
    }
    uint64_t v6 = (const void *)v1[4];
    if (v6) {
      APTransportSessionUnregisterStream(v6);
    }
    uint64_t v7 = v1[13];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __stream_invalidateInternal_block_invoke;
    block[3] = &__block_descriptor_tmp_5;
    block[4] = v1;
    dispatch_sync(v7, block);
    uint64_t v8 = (const void *)v1[5];
    if (v8) {
      CFRelease(v8);
    }
    if (gLogCategory_APTransportStreamUnbuffered <= 50
      && (gLogCategory_APTransportStreamUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v1[5] = 0;
  }
  return 0;
}

uint64_t __stream_invalidateInternal_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 112) = 0;
  *(void *)(*(void *)(result + 32) + 120) = 0;
  return result;
}

uint64_t stream_DumpHierarchy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = *(void *)(DerivedStorage + 40);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, a3, "Stream:[%{ptr}] (Unbuffered) %''@ Parent:[%{ptr}]\n", a1, *(void *)(DerivedStorage + 8), a2);
  if (v11)
  {
    uint64_t v17 = v11;
    goto LABEL_16;
  }
  uint64_t v12 = a3 + 1;
  APSHierarchyReporterProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (uint64_t v14 = *(void *)(ProtocolVTable + 16)) == 0)
  {
    uint64_t v17 = 4294954508;
LABEL_11:
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, v12, "[Error] Object:[%{ptr}]%?s%?''@ cannot be dumped (error %#m) Parent:[%{ptr}]\n", v10, @"send", " ", @"send", @"send", v17, a1);
    goto LABEL_12;
  }
  CFTypeRef v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __CFString *, uint64_t))(v14 + 8);
  if (!v15)
  {
    uint64_t v17 = 4294954514;
    goto LABEL_11;
  }
  uint64_t v16 = v15(v10, a1, v12, @"send", a5);
  uint64_t v17 = v16;
  if (v16 == -12782 || v16 == -12788) {
    goto LABEL_11;
  }
LABEL_12:
  if (v17) {
LABEL_16:
  }
    APSLogErrorAt();
  return v17;
}

uint64_t stream_Resume(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  uint64_t v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 16);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = __stream_Resume_block_invoke;
  v5[3] = &unk_1E688BAD0;
  v5[4] = &v6;
  v5[5] = a1;
  dispatch_sync(v2, v5);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t stream_SetMessageCallbacks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v9 = *(NSObject **)(DerivedStorage + 104);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __stream_SetMessageCallbacks_block_invoke;
  block[3] = &__block_descriptor_tmp_38;
  block[4] = DerivedStorage;
  void block[5] = a4;
  void block[6] = a2;
  void block[7] = a3;
  void block[8] = a1;
  dispatch_sync(v9, block);
  return 0;
}

uint64_t stream_SetReadyToSendCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = 0;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x2000000000;
  int v30 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2000000000;
  uint64_t v26 = 0;
  uint64_t v7 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __stream_SetReadyToSendCallback_block_invoke;
  block[3] = &unk_1E688BBB8;
  void block[5] = &v23;
  void block[6] = DerivedStorage;
  block[4] = &v27;
  dispatch_sync(v7, block);
  if (!v24[3]) {
    goto LABEL_17;
  }
  uint64_t v8 = *(NSObject **)(DerivedStorage + 64);
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 0x40000000;
  v21[2] = __stream_SetReadyToSendCallback_block_invoke_2;
  v21[3] = &__block_descriptor_tmp_40;
  v21[4] = a2;
  v21[5] = DerivedStorage;
  v21[6] = a3;
  dispatch_sync(v8, v21);
  uint64_t v9 = v24[3];
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (a2)
  {
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    int v13 = *(uint64_t (**)(uint64_t, void, uint64_t))(v11 + 64);
    if (v13)
    {
      uint64_t v14 = stream_readyToSendCallback;
      uint64_t v15 = v9;
      uint64_t v16 = a1;
LABEL_13:
      int v17 = v13(v15, v14, v16);
      goto LABEL_15;
    }
  }
  else
  {
    if (v10) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 0;
    }
    int v13 = *(uint64_t (**)(uint64_t, void, uint64_t))(v12 + 64);
    if (v13)
    {
      uint64_t v15 = v9;
      uint64_t v14 = 0;
      uint64_t v16 = 0;
      goto LABEL_13;
    }
  }
  int v17 = -12782;
LABEL_15:
  *((_DWORD *)v28 + 6) = v17;
  if (v17) {
    APSLogErrorAt();
  }
LABEL_17:
  dispatch_queue_t v18 = (const void *)v24[3];
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v19 = *((unsigned int *)v28 + 6);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  return v19;
}

uint64_t stream_SignalDataAvailable()
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 16);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = __stream_SignalDataAvailable_block_invoke;
  void v4[3] = &unk_1E688BC28;
  v4[4] = &v5;
  v4[5] = DerivedStorage;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t stream_WaitUntilConnectedEx()
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 16);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = __stream_WaitUntilConnectedEx_block_invoke;
  void v4[3] = &unk_1E688BC50;
  v4[4] = &v5;
  v4[5] = DerivedStorage;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t stream_SetReadyToSendBatchCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = 0;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x2000000000;
  int v30 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2000000000;
  uint64_t v26 = 0;
  uint64_t v7 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __stream_SetReadyToSendBatchCallback_block_invoke;
  block[3] = &unk_1E688BC78;
  void block[5] = &v23;
  void block[6] = DerivedStorage;
  block[4] = &v27;
  dispatch_sync(v7, block);
  if (!v24[3]) {
    goto LABEL_17;
  }
  int v8 = *(NSObject **)(DerivedStorage + 64);
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 0x40000000;
  v21[2] = __stream_SetReadyToSendBatchCallback_block_invoke_2;
  v21[3] = &__block_descriptor_tmp_46_0;
  v21[4] = a2;
  v21[5] = DerivedStorage;
  v21[6] = a3;
  dispatch_sync(v8, v21);
  uint64_t v9 = v24[3];
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (a2)
  {
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    int v13 = *(uint64_t (**)(uint64_t, void (*)(uint64_t, int, uint64_t (*)(uint64_t, void **), void *), uint64_t))(v11 + 104);
    if (v13)
    {
      uint64_t v14 = stream_readyToSendBatchCallback;
      uint64_t v15 = v9;
      uint64_t v16 = a1;
LABEL_13:
      int v17 = v13(v15, v14, v16);
      goto LABEL_15;
    }
  }
  else
  {
    if (v10) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 0;
    }
    int v13 = *(uint64_t (**)(uint64_t, void (*)(uint64_t, int, uint64_t (*)(uint64_t, void **), void *), uint64_t))(v12 + 104);
    if (v13)
    {
      uint64_t v15 = v9;
      uint64_t v14 = 0;
      uint64_t v16 = 0;
      goto LABEL_13;
    }
  }
  int v17 = -12782;
LABEL_15:
  *((_DWORD *)v28 + 6) = v17;
  if (v17) {
    APSLogErrorAt();
  }
LABEL_17:
  dispatch_queue_t v18 = (const void *)v24[3];
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v19 = *((unsigned int *)v28 + 6);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  return v19;
}

uint64_t stream_handleEventFromSendConnection(int a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a3);
  if (a2) {
    CFRetain(a2);
  }
  uint64_t v7 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __stream_handleEventFromSendConnection_block_invoke;
  block[3] = &__block_descriptor_tmp_21;
  int v10 = a1;
  block[4] = a3;
  void block[5] = a2;
  dispatch_async(v7, block);
  return 0;
}

void __stream_handleEventFromSendConnection_block_invoke(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 48);
  uint64_t v3 = *(const void **)(a1 + 32);
  uint64_t v4 = *(const void **)(a1 + 40);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v19 = 0;
  if (*(unsigned char *)(DerivedStorage + 24))
  {
    APSLogErrorAt();
    goto LABEL_34;
  }
  uint64_t v6 = DerivedStorage;
  if (gLogCategory_APTransportStreamUnbuffered <= 50
    && (gLogCategory_APTransportStreamUnbuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(unsigned char *)(v6 + 25))
  {
    if ((v2 - 4) <= 2) {
      *(_DWORD *)(v6 + 28) = v2;
    }
    goto LABEL_32;
  }
  if (v2 == 4)
  {
    *(_DWORD *)(v6 + 28) = 0;
    if (gLogCategory_APTransportStreamUnbuffered <= 90
      && (gLogCategory_APTransportStreamUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v4)
    {
      CFTypeID v12 = CFGetTypeID(v4);
      if (v12 == CFNumberGetTypeID())
      {
        int valuePtr = 0;
        CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr);
        FigCreateBlockBufferCopyingMemoryBlock();
      }
    }
    CFRetain(v3);
    if (v19)
    {
      CFRetain(v19);
      CFTypeRef v13 = v19;
    }
    else
    {
      CFTypeRef v13 = 0;
    }
    int v10 = *(NSObject **)(v6 + 104);
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 0x40000000;
    v16[2] = __stream_eventReceived_block_invoke_2;
    v16[3] = &__block_descriptor_tmp_34;
    v16[4] = v6;
    void v16[5] = v3;
    v16[6] = v13;
    uint64_t v11 = v16;
  }
  else
  {
    if (v2 != 6)
    {
      if (v2 == 5)
      {
        *(_DWORD *)(v6 + 28) = 0;
        CFRetain(v3);
        uint64_t v7 = *(NSObject **)(v6 + 104);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = __stream_eventReceived_block_invoke;
        block[3] = &__block_descriptor_tmp_32;
        block[4] = v6;
        void block[5] = v3;
        dispatch_async(v7, block);
      }
      goto LABEL_32;
    }
    if (v4)
    {
      CFTypeID v8 = CFGetTypeID(v4);
      if (v8 == CFNumberGetTypeID())
      {
        int valuePtr = 0;
        CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr);
        FigCreateBlockBufferCopyingMemoryBlock();
      }
    }
    CFRetain(v3);
    if (v19)
    {
      CFRetain(v19);
      CFTypeRef v9 = v19;
    }
    else
    {
      CFTypeRef v9 = 0;
    }
    int v10 = *(NSObject **)(v6 + 104);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 0x40000000;
    v15[2] = __stream_eventReceived_block_invoke_3;
    v15[3] = &__block_descriptor_tmp_35;
    v15[4] = v6;
    v15[5] = v3;
    v15[6] = v9;
    uint64_t v11 = v15;
  }
  dispatch_async(v10, v11);
  APTransportSessionHandleStreamEvent(*(const void **)(v6 + 32), v3, 0, v4);
LABEL_32:
  if (v19) {
    CFRelease(v19);
  }
LABEL_34:
  uint64_t v14 = *(const void **)(a1 + 40);
  if (v14) {
    CFRelease(v14);
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void __stream_eventReceived_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void (**)(void, uint64_t, void, void))(v2 + 120);
  if (v3) {
    v3(*(void *)(a1 + 40), 1651470958, 0, *(void *)(v2 + 112));
  }
  uint64_t v4 = *(const void **)(a1 + 40);
  CFRelease(v4);
}

void __stream_eventReceived_block_invoke_2(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void (**)(void, uint64_t, void, void))(v2 + 120);
  if (v3) {
    v3(a1[5], 1668179564, a1[6], *(void *)(v2 + 112));
  }
  uint64_t v4 = (const void *)a1[6];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[5];
  CFRelease(v5);
}

void __stream_eventReceived_block_invoke_3(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void (**)(void, uint64_t, void, void))(v2 + 120);
  if (v3) {
    v3(a1[5], 1684628836, a1[6], *(void *)(v2 + 112));
  }
  uint64_t v4 = (const void *)a1[6];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[5];
  CFRelease(v5);
}

void __stream_postCachedConnectionEvent_block_invoke(uint64_t a1)
{
  stream_handleEventFromSendConnection(*(_DWORD *)(a1 + 40), 0, *(const void **)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 32);
  CFRelease(v2);
}

void stream_readyToSendCallback(uint64_t a1, CFTypeRef *a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x2000000000;
  uint64_t v27 = 0;
  uint64_t v20 = 0;
  int v21 = &v20;
  uint64_t v22 = 0x2000000000;
  int v23 = 0;
  if (a2)
  {
    uint64_t v6 = *(NSObject **)(DerivedStorage + 64);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __stream_readyToSendCallback_block_invoke;
    block[3] = &unk_1E688BC00;
    void block[6] = DerivedStorage;
    void block[7] = a2;
    int v19 = a3;
    block[4] = &v24;
    void block[5] = &v20;
    dispatch_sync(v6, block);
    uint64_t v7 = v25[3];
    CFTypeRef v8 = *a2;
    if (v7)
    {
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = *(void (**)(CFTypeRef, uint64_t))(v10 + 16);
      if (v11) {
        v11(v8, v7);
      }
      CFTypeRef v12 = *a2;
      uint64_t v13 = *((unsigned int *)v21 + 6);
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(void (**)(CFTypeRef, uint64_t))(v15 + 32);
      if (v16) {
        v16(v12, v13);
      }
    }
    else if (v8)
    {
      CFRelease(*a2);
      *a2 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    APSSignalErrorAt();
  }
  int v17 = (const void *)v25[3];
  if (v17) {
    CFRelease(v17);
  }
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);
}

void __stream_readyToSendCallback_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (*(unsigned char *)(v1 + 24))
  {
    APSLogErrorAt();
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void, void, uint64_t))(v1 + 72);
    if (v3)
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3(*(void *)(v1 + 80), *(unsigned int *)(a1 + 64), *(void *)(*(void *)(a1 + 40) + 8) + 24);
    }
    else
    {
      uint64_t v4 = **(const void ***)(a1 + 56);
      if (v4)
      {
        CFRelease(v4);
        **(void **)(a1 + 56) = 0;
      }
    }
  }
}

void stream_readyToSendBatchCallback(uint64_t a1, int a2, uint64_t (*a3)(uint64_t, void **), void *a4)
{
  uint64_t v48 = 0;
  uint64_t v49 = &v48;
  uint64_t v50 = 0x2000000000;
  int v51 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v44 = 0;
  long long v45 = &v44;
  uint64_t v46 = 0x2000000000;
  uint64_t v47 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = &v40;
  uint64_t v42 = 0x2000000000;
  uint64_t v43 = 0;
  value = 0;
  if (!a3)
  {
    APSLogErrorAt();
    uint64_t v15 = 0;
    *((_DWORD *)v49 + 6) = APSSignalErrorAt();
    if (!a4) {
      goto LABEL_46;
    }
    goto LABEL_39;
  }
  if (!a4)
  {
    APSLogErrorAt();
    uint64_t v15 = 0;
    *((_DWORD *)v49 + 6) = APSSignalErrorAt();
    goto LABEL_46;
  }
  CFTypeRef v8 = *(NSObject **)(DerivedStorage + 64);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __stream_readyToSendBatchCallback_block_invoke;
  block[3] = &unk_1E688BCC0;
  block[4] = &v48;
  void block[5] = &v44;
  int v38 = a2;
  void block[6] = &v40;
  void block[7] = DerivedStorage;
  dispatch_sync(v8, block);
  if (!*((_DWORD *)v49 + 6))
  {
    CFArrayRef v9 = (const __CFArray *)v45[3];
    if (v9)
    {
      CFIndex Count = CFArrayGetCount(v9);
      CFIndex v11 = Count - 1;
      if (Count >= 1)
      {
        CFIndex v12 = Count;
        CFArrayRef v13 = (const __CFArray *)v41[3];
        if (v13)
        {
          CFIndex v14 = CFArrayGetCount(v13);
          if ((v14 | 2) == 3) {
            goto LABEL_13;
          }
        }
        else
        {
          CFIndex v14 = 0;
        }
        BOOL v32 = v14 == v12;
        CFIndex v14 = v12;
        if (!v32)
        {
LABEL_59:
          APSLogErrorAt();
          uint64_t v15 = 0;
          *((_DWORD *)v49 + 6) = APSSignalErrorAt();
          goto LABEL_39;
        }
LABEL_13:
        uint64_t v16 = *MEMORY[0x1E4F1CF80];
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12, MEMORY[0x1E4F1D510]);
        if (Mutable)
        {
          uint64_t v15 = Mutable;
          long long v36 = a4;
          uint64_t v18 = 0;
          while (1)
          {
            CMBlockBufferGetTypeID();
            TypedCFDictionaryRef ValueAtIndex = CFArrayGetTypedValueAtIndex();
            if (*((_DWORD *)v49 + 6)) {
              break;
            }
            uint64_t v20 = v18 != 0;
            if (v11 == v18) {
              uint64_t v20 = 2;
            }
            if (v14 != 3) {
              uint64_t v20 = v18;
            }
            CFIndex v21 = v14 == 1 ? 0 : v20;
            CFArrayGetValueAtIndex((CFArrayRef)v41[3], v21);
            uint64_t v22 = CFGetInt64Ranged();
            if (*((_DWORD *)v49 + 6)) {
              break;
            }
            int v23 = a3(v16, &value);
            *((_DWORD *)v49 + 6) = v23;
            if (v23) {
              break;
            }
            uint64_t v24 = value;
            uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v25) {
              uint64_t v26 = v25;
            }
            else {
              uint64_t v26 = 0;
            }
            uint64_t v27 = *(void (**)(void *, uint64_t))(v26 + 16);
            if (v27) {
              v27(v24, TypedValueAtIndex);
            }
            uint64_t v28 = value;
            uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v29) {
              uint64_t v30 = v29;
            }
            else {
              uint64_t v30 = 0;
            }
            os_signpost_id_t v31 = *(void (**)(void *, uint64_t))(v30 + 32);
            if (v31) {
              v31(v28, v22);
            }
            CFArrayAppendValue(v15, value);
            if (value)
            {
              CFRelease(value);
              value = 0;
            }
            if (v12 == ++v18) {
              goto LABEL_38;
            }
          }
          APSLogErrorAt();
LABEL_38:
          a4 = v36;
          goto LABEL_39;
        }
        goto LABEL_59;
      }
    }
  }
  uint64_t v15 = 0;
LABEL_39:
  if (*((_DWORD *)v49 + 6)) {
    BOOL v32 = 1;
  }
  else {
    BOOL v32 = v15 == 0;
  }
  if (v32) {
    CFTypeRef v33 = 0;
  }
  else {
    CFTypeRef v33 = CFRetain(v15);
  }
  *a4 = v33;
LABEL_46:
  int v34 = (const void *)v45[3];
  if (v34) {
    CFRelease(v34);
  }
  uint64_t v35 = (const void *)v41[3];
  if (v35) {
    CFRelease(v35);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (value) {
    CFRelease(value);
  }
  _Block_object_dispose(&v40, 8);
  _Block_object_dispose(&v44, 8);
  _Block_object_dispose(&v48, 8);
}

uint64_t __stream_readyToSendBatchCallback_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 56);
  if (*(unsigned char *)(v2 + 24))
  {
    uint64_t result = APSLogErrorAt();
    uint64_t v4 = *(void *)(*(void *)(v1 + 32) + 8);
    int v5 = -16617;
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void, void, uint64_t))(v2 + 88);
    if (v3)
    {
      uint64_t result = v3(*(void *)(v2 + 96), *(unsigned int *)(result + 64), *(void *)(*(void *)(result + 48) + 8) + 24);
      *(void *)(*(void *)(*(void *)(v1 + 40) + 8) + 24) = result;
      return result;
    }
    uint64_t v4 = *(void *)(*(void *)(result + 32) + 8);
    int v5 = -6709;
  }
  *(_DWORD *)(v4 + 24) = v5;
  return result;
}

uint64_t APBrowserRapportManagerGetTypeID()
{
  if (gAPBrowserRapportManagerInitOnce != -1) {
    dispatch_once(&gAPBrowserRapportManagerInitOnce, &__block_literal_global_5);
  }
  return gAPBrowserRapportManagerTypeID;
}

uint64_t __APBrowserRapportManagerGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPBrowserRapportManagerTypeID = result;
  return result;
}

uint64_t APBrowserRapportManagerCreate()
{
  if (gAPBrowserRapportManagerInitOnce != -1) {
    dispatch_once(&gAPBrowserRapportManagerInitOnce, &__block_literal_global_5);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v1 = (void *)Instance;
    *(_OWORD *)(Instance + 16) = 0u;
    *(void *)(Instance + 80) = 0;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    if (gLogCategory_APBrowserRapportManager <= 50
      && (gLogCategory_APBrowserRapportManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (_APBrowserRapportManager_getActiveManagers_once != -1) {
      dispatch_once(&_APBrowserRapportManager_getActiveManagers_once, &__block_literal_global_20);
    }
    if (FigCFWeakReferenceTableAddValueAndGetKey()) {
      APSLogErrorAt();
    }
    v1[5] = 0;
    APSLogErrorAt();
    CFRelease(v1);
  }
  else
  {
    APSLogErrorAt();
  }
  return 4294895016;
}

uint64_t APBrowserRapportManagerInvalidate(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  if (gLogCategory_APBrowserRapportManager <= 50
    && (gLogCategory_APBrowserRapportManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v2 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APBrowserRapportManagerInvalidate_block_invoke;
  block[3] = &unk_1E688B350;
  block[4] = &v6;
  void block[5] = a1;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1D08B8F84(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void __APBrowserRapportManagerInvalidate_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v2 + 51))
  {
    int v3 = -72284;
  }
  else
  {
    APBrowserRapportManager_stop(*(void *)(a1 + 40));
    APBrowserRapportManager_dispatchEvent((void *)v2, 4, 0);
    *(unsigned char *)(v2 + 51) = 1;
    if (*(void *)(v2 + 40))
    {
      if (_APBrowserRapportManager_getActiveManagers_once != -1) {
        dispatch_once(&_APBrowserRapportManager_getActiveManagers_once, &__block_literal_global_20);
      }
      FigCFWeakReferenceTableRemoveValue();
      int v3 = 0;
      *(void *)(v2 + 40) = 0;
    }
    else
    {
      int v3 = 0;
    }
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
}

uint64_t APBrowserRapportManagerGetMode(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APBrowserRapportManagerGetMode_block_invoke;
  block[3] = &unk_1E688BD68;
  block[4] = &v6;
  void block[5] = a1;
  void block[6] = a2;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t __APBrowserRapportManagerGetMode_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  int v2 = *(unsigned __int8 *)(v1 + 51);
  if (*(unsigned char *)(v1 + 51)) {
    int v2 = -72284;
  }
  else {
    **(_WORD **)(result + 48) = *(_WORD *)(v1 + 48);
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2;
  return result;
}

uint64_t APBrowserRapportManagerSetEventHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  int v10 = 0;
  uint64_t v3 = *(NSObject **)(a1 + 16);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __APBrowserRapportManagerSetEventHandler_block_invoke;
  v6[3] = &unk_1E688BD90;
  v6[4] = &v7;
  v6[5] = a1;
  void v6[6] = a2;
  v6[7] = a3;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t __APBrowserRapportManagerSetEventHandler_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = -72284;
  uint64_t v3 = *(void *)(result + 40);
  if (!*(unsigned char *)(v3 + 51))
  {
    if (*(_WORD *)(v3 + 48))
    {
      uint64_t result = APSLogErrorAt();
      int v2 = -72283;
    }
    else
    {
      int v2 = 0;
      *(_OWORD *)(v3 + 56) = *(_OWORD *)(result + 48);
    }
  }
  *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = v2;
  return result;
}

uint64_t APBrowserRapportManagerCopyShowInfo(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  uint64_t v3 = *(NSObject **)(a1 + 16);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __APBrowserRapportManagerCopyShowInfo_block_invoke;
  v6[3] = &unk_1E688BA10;
  v6[4] = &v8;
  v6[5] = a1;
  int v7 = a2;
  void v6[6] = a3;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

uint64_t __APBrowserRapportManagerCopyShowInfo_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = -72284;
  uint64_t v3 = *(void *)(result + 40);
  if (!*(unsigned char *)(v3 + 51))
  {
    uint64_t v4 = *(CFMutableStringRef **)(result + 48);
    int v5 = APBrowserRapportManager_ensurePreferencesUpdated(*(unsigned char **)(result + 40), 0);
    if (v5)
    {
      int v8 = v5;
      uint64_t result = APSLogErrorAt();
      int v2 = v8;
    }
    else
    {
      CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      if (Mutable)
      {
        CFMutableStringRef v7 = Mutable;
        CFStringAppendF();
        CFStringAppendF();
        CFStringAppendF();
        if (*(_WORD *)(v3 + 48)
          && *(_WORD *)(v3 + 48) != 1
          && gLogCategory_APBrowserRapportManager <= 60
          && (gLogCategory_APBrowserRapportManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFStringAppendF();
        CFStringAppendF();
        CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v3 + 80));
        CFStringAppendF();
        uint64_t result = CFStringAppendF();
        if (Count)
        {
          CFStringAppendF();
          uint64_t result = CFDictionaryApplyBlock();
        }
        int v2 = 0;
        *uint64_t v4 = v7;
      }
      else
      {
        uint64_t result = APSLogErrorAt();
        int v2 = -72280;
      }
    }
  }
  *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = v2;
  return result;
}

uint64_t APBrowserRapportManagerUpdatePreferences(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = __APBrowserRapportManagerUpdatePreferences_block_invoke;
  void v4[3] = &unk_1E688B350;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t __APBrowserRapportManagerUpdatePreferences_block_invoke(uint64_t a1)
{
  uint64_t result = APBrowserRapportManager_ensurePreferencesUpdated(*(unsigned char **)(a1 + 40), 1);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void _APBrowserRapportManagerFinalize(void *a1)
{
  if (gLogCategory_APBrowserRapportManager <= 50
    && (gLogCategory_APBrowserRapportManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v2 = (const void *)a1[10];
  if (v2)
  {
    CFRelease(v2);
    a1[10] = 0;
  }
  uint64_t v3 = a1[2];
  if (v3)
  {
    dispatch_release(v3);
    a1[2] = 0;
  }
  uint64_t v4 = a1[3];
  if (v4)
  {
    dispatch_release(v4);
    a1[3] = 0;
  }
  uint64_t v5 = a1[4];
  if (v5)
  {
    dispatch_release(v5);
    a1[4] = 0;
  }
}

uint64_t APBrowserRapportManager_stop(uint64_t a1)
{
  if (!*(_WORD *)(a1 + 48)) {
    return 0;
  }
  if (gLogCategory_APBrowserRapportManager <= 40
    && (gLogCategory_APBrowserRapportManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_WORD *)(a1 + 48) = 0;
  uint64_t v2 = APBrowserRapportManager_update(a1);
  if (v2) {
    APSLogErrorAt();
  }
  else {
    APBrowserRapportManager_dispatchEvent((void *)a1, 3, 0);
  }
  return v2;
}

void APBrowserRapportManager_dispatchEvent(void *cf, int a2, const void *a3)
{
  uint64_t v3 = cf[7];
  if (v3 && !*((unsigned char *)cf + 51))
  {
    uint64_t v7 = cf[8];
    CFRetain(cf);
    if (a3) {
      CFRetain(a3);
    }
    int v8 = cf[3];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __APBrowserRapportManager_dispatchEvent_block_invoke;
    block[3] = &__block_descriptor_68_e5_v8__0l;
    block[4] = v3;
    void block[5] = cf;
    int v10 = a2;
    void block[6] = a3;
    void block[7] = v7;
    dispatch_async(v8, block);
  }
}

uint64_t APBrowserRapportManager_sendDeviceEvent(void *a1, uint64_t a2)
{
  uint64_t v2 = 4294895013;
  if (!a2)
  {
    uint64_t v2 = 4294895015;
LABEL_13:
    APSLogErrorAt();
    APSLogErrorAt();
    return v2;
  }
  CFStringGetTypeID();
  TypedCFDictionaryRef Value = CFDictionaryGetTypedValue();
  if (!TypedValue) {
    goto LABEL_13;
  }
  uint64_t v5 = (const void *)TypedValue;
  CFStringGetTypeID();
  uint64_t v6 = CFDictionaryGetTypedValue();
  CFStringGetTypeID();
  if (!(v6 | CFDictionaryGetTypedValue())) {
    goto LABEL_13;
  }
  CFNumberGetTypeID();
  uint64_t v7 = CFDictionaryGetTypedValue();
  if (!v7) {
    goto LABEL_13;
  }
  int v8 = (const void *)v7;
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v2 = 4294895016;
    goto LABEL_13;
  }
  int v10 = Mutable;
  CFDictionarySetValue(Mutable, @"rapportDeviceID", v5);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  CFDictionarySetValue(v10, @"deviceRelationship", v8);
  APBrowserRapportManager_dispatchEvent(a1, 0, v10);
  CFRelease(v10);
  return 0;
}

uint64_t APBrowserRapportManager_sendGetInfo(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  value = 0;
  if (gLogCategory_APBrowserRapportManager <= 30
    && (gLogCategory_APBrowserRapportManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFDictionaryGetTypeID();
  TypedCFDictionaryRef Value = CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    uint64_t v9 = (__CFDictionary *)TypedValue;
    id v10 = objc_alloc_init(MEMORY[0x1E4F946E0]);
    int v11 = v10;
    if (v10)
    {
      [v10 setDispatchQueue:*(void *)(a1 + 32)];
      id v12 = v11;
      uint64_t v13 = APSWrapperCreate();
      if (v13)
      {
        uint64_t v16 = v13;
        APSLogErrorAt();
      }
      else
      {
        CFDictionarySetValue(v9, @"directClient", value);
        [v11 setServiceType:@"com.apple.airplay.discovery.service"];
        objc_msgSend(v11, "setControlFlags:", objc_msgSend(v11, "controlFlags") | 2);
        [v11 setDestinationDevice:a2];
        CFSetGetTypeID();
        CFIndex v14 = (__CFSet *)CFDictionaryGetTypedValue();
        if (v14)
        {
          CFSetAddValue(v14, a4);
          uint64_t v15 = *(void *)(a1 + 40);
          CFRetain(a3);
          CFRetain(a4);
          v18[0] = MEMORY[0x1E4F143A8];
          v18[1] = 3221225472;
          v18[2] = __APBrowserRapportManager_sendGetInfo_block_invoke;
          v18[3] = &__block_descriptor_56_e17_v16__0__NSError_8l;
          v18[4] = v15;
          v18[5] = a3;
          v18[6] = a4;
          [v11 activateWithCompletion:v18];
          uint64_t v16 = 0;
          goto LABEL_10;
        }
        uint64_t v16 = 4294895014;
        APSLogErrorAt();
      }
    }
    else
    {
      APSLogErrorAt();
      uint64_t v16 = 4294895016;
    }
    CFDictionaryRemoveValue(v9, @"directClient");
  }
  else
  {
    APSLogErrorAt();
    int v11 = 0;
    uint64_t v16 = 4294895015;
  }
LABEL_10:

  if (value) {
    CFRelease(value);
  }
  return v16;
}

void APSBrowserRapportManager_invalidateAndReleaseClient(void *a1)
{
  [a1 invalidate];
}

uint64_t APBrowserRapportManager_tryNextEffectiveID(uint64_t result, const void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    goto LABEL_22;
  }
  uint64_t v2 = result;
  if (!*(_WORD *)(result + 48)) {
    return result;
  }
  CFDictionaryGetTypeID();
  if (CFDictionaryGetTypedValue() && (CFSetGetTypeID(), (TypedCFDictionaryRef Value = CFDictionaryGetTypedValue()) != 0))
  {
    CFSetRef v5 = (const __CFSet *)TypedValue;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v6 = (void *)[*(id *)(v2 + 72) activeDevices];
    uint64_t result = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (result)
    {
      uint64_t v7 = result;
      uint64_t v8 = *(void *)v15;
LABEL_7:
      uint64_t v9 = 0;
      while (1)
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v6);
        }
        id v10 = *(void **)(*((void *)&v14 + 1) + 8 * v9);
        if ((const void *)objc_msgSend(v10, "idsDeviceIdentifier", v12, v13) == a2
          || [v10 idsDeviceIdentifier]
          && CFEqual(a2, (CFTypeRef)[v10 idsDeviceIdentifier]))
        {
          int v11 = (const void *)[v10 effectiveIdentifier];
          if (!CFSetContainsValue(v5, v11))
          {
            if (gLogCategory_APBrowserRapportManager <= 40
              && (gLogCategory_APBrowserRapportManager != -1 || _LogCategory_Initialize()))
            {
              id v12 = a2;
              uint64_t v13 = v11;
              LogPrintF();
            }
            uint64_t result = APBrowserRapportManager_sendGetInfo(v2, v10, a2, v11);
            if (!result) {
              break;
            }
          }
        }
        if (v7 == ++v9)
        {
          uint64_t result = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
          uint64_t v7 = result;
          if (result) {
            goto LABEL_7;
          }
          return result;
        }
      }
    }
  }
  else
  {
LABEL_22:
    return APSLogErrorAt();
  }
  return result;
}

uint64_t APConnectivityHelperGetTypeID()
{
  if (gAPConnectivityHelperInitOnce != -1) {
    dispatch_once(&gAPConnectivityHelperInitOnce, &__block_literal_global_6);
  }
  return gAPConnectivityHelperTypeID;
}

uint64_t __APConnectivityHelperGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPConnectivityHelperTypeID = result;
  return result;
}

uint64_t APConnectivityHelperGetSharedHelper()
{
  objc_opt_class();
  return APConnectivityHelperGetSharedHelperWithWiFiInterfaceClass();
}

uint64_t APConnectivityHelperGetSharedHelperWithWiFiInterfaceClass()
{
  if (APConnectivityHelperGetSharedHelperWithWiFiInterfaceClass_sMutexInitOnce != -1) {
    dispatch_once(&APConnectivityHelperGetSharedHelperWithWiFiInterfaceClass_sMutexInitOnce, &__block_literal_global_35);
  }
  pthread_mutex_lock((pthread_mutex_t *)APConnectivityHelperGetSharedHelperWithWiFiInterfaceClass_sMutex);
  if (!APConnectivityHelperGetSharedHelperWithWiFiInterfaceClass_sHelper) {
    APConnectivityHelperCreateWithWiFiInterfaceClass();
  }
  pthread_mutex_unlock((pthread_mutex_t *)APConnectivityHelperGetSharedHelperWithWiFiInterfaceClass_sMutex);
  return APConnectivityHelperGetSharedHelperWithWiFiInterfaceClass_sHelper;
}

uint64_t __APConnectivityHelperGetSharedHelperWithWiFiInterfaceClass_block_invoke()
{
  uint64_t result = FigSimpleMutexCreate();
  APConnectivityHelperGetSharedHelperWithWiFiInterfaceClass_sMutex = result;
  return result;
}

uint64_t APConnectivityHelperCreateWithWiFiInterfaceClass()
{
  if (gAPConnectivityHelperInitOnce != -1) {
    dispatch_once(&gAPConnectivityHelperInitOnce, &__block_literal_global_6);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  uint64_t v1 = Instance;
  if (Instance)
  {
    Instance[13] = 0u;
    Instance[14] = 0u;
    Instance[11] = 0u;
    Instance[12] = 0u;
    Instance[9] = 0u;
    Instance[10] = 0u;
    Instance[7] = 0u;
    Instance[8] = 0u;
    Instance[5] = 0u;
    Instance[6] = 0u;
    Instance[3] = 0u;
    Instance[4] = 0u;
    Instance[1] = 0u;
    Instance[2] = 0u;
    uint64_t v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
    dispatch_queue_t v3 = dispatch_queue_create("APConnectivityHelperInternalQueue", v2);
    v1[2] = v3;
    if (v3)
    {
      dispatch_queue_t v4 = dispatch_queue_create("APConnectivityHelperEventQueue", 0);
      v1[3] = v4;
      if (v4)
      {
        if (_APConnectivityHelper_getActiveHelpers_once != -1) {
          dispatch_once(&_APConnectivityHelper_getActiveHelpers_once, &__block_literal_global_79);
        }
        if (FigCFWeakReferenceTableAddValueAndGetKey()) {
          APSLogErrorAt();
        }
        v1[4] = 0;
      }
    }
  }
  APSLogErrorAt();
  objc_msgSend(0, "invalidate", v6);
  if (v1) {
    CFRelease(v1);
  }
  return 4294895096;
}

uint64_t APConnectivityHelperCreate()
{
  objc_opt_class();
  return APConnectivityHelperCreateWithWiFiInterfaceClass();
}

void __APConnectivityHelperCreateWithWiFiInterfaceClass_block_invoke(uint64_t a1, void *a2)
{
  if (_APConnectivityHelper_getActiveHelpers_once != -1) {
    dispatch_once(&_APConnectivityHelper_getActiveHelpers_once, &__block_literal_global_79);
  }
  dispatch_queue_t v3 = (void *)FigCFWeakReferenceTableCopyValue();
  if (v3)
  {
    dispatch_queue_t v4 = v3;
    CFRetain(v3);
    id v5 = a2;
    uint64_t v6 = v4[2];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = ___APConnectivityHelperHandleCWFEventExternal_block_invoke;
    v7[3] = &unk_1E688BFA0;
    v7[4] = a2;
    void v7[5] = v4;
    dispatch_async(v6, v7);
    CFRelease(v4);
  }
}

uint64_t APConnectivityHelperCopyProperty(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APConnectivityHelperCopyProperty_block_invoke;
  block[3] = &unk_1E688BF30;
  block[4] = &v5;
  dispatch_sync(v1, block);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t __APConnectivityHelperCopyProperty_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = -6727;
  return result;
}

uint64_t APConnectivityHelperSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a1;
  v4[1] = a2;
  void v4[2] = a3;
  uint64_t v5 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v4, (dispatch_function_t)_APConnectivityHelperSetProperty);
  return v5;
}

uint64_t _APConnectivityHelperSetProperty(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)(result + 8))
  {
    int v2 = -12784;
  }
  else
  {
    uint64_t result = APSLogErrorAt();
    int v2 = -72201;
  }
  *(_DWORD *)(v1 + 24) = v2;
  return result;
}

uint64_t APConnectivityHelperQueryWiFiPower(uint64_t a1, uint64_t a2)
{
  context[1] = a2;
  uint64_t v4 = 0;
  context[0] = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), context, (dispatch_function_t)_APConnectivityHelperQueryWiFiPower);
  return v4;
}

uint64_t _APConnectivityHelperQueryWiFiPower(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  if (*(unsigned char *)(*(void *)a1 + 200))
  {
    uint64_t result = APSLogErrorAt();
    int v7 = -72203;
  }
  else
  {
    dispatch_queue_t v3 = *(unsigned char **)(a1 + 8);
    int v4 = _APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStarted(*(void *)a1);
    if (v4)
    {
      int v7 = v4;
      uint64_t result = APSLogErrorAt();
    }
    else
    {
      uint64_t result = [*(id *)(v2 + 40) powerOn];
      char v6 = result;
      if (gLogCategory_APConnectivityHelper <= 40)
      {
        if (gLogCategory_APConnectivityHelper != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
          uint64_t result = LogPrintF();
        }
      }
      int v7 = 0;
      *dispatch_queue_t v3 = v6;
    }
  }
  *(_DWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t APConnectivityHelperSetWiFiPower(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v3, (dispatch_function_t)_APConnectivityHelperSetWiFiPower);
  return HIDWORD(v4);
}

uint64_t _APConnectivityHelperSetWiFiPower(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((unsigned __int8 *)a1 + 8);
  uint64_t v9 = 0;
  if (*(unsigned char *)(v2 + 200))
  {
    uint64_t result = APSLogErrorAt();
    int v6 = -72203;
  }
  else
  {
    if (gLogCategory_APConnectivityHelper <= 40
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      uint64_t v4 = "ON";
      if (!v3) {
        uint64_t v4 = "OFF";
      }
      uint64_t v7 = v2;
      int v8 = v4;
      LogPrintF();
    }
    objc_msgSend(*(id *)(v2 + 40), "setPower:error:", v3 != 0, &v9, v7, v8);
    uint64_t result = NSErrorToOSStatus();
    int v6 = result;
    if (result) {
      uint64_t result = APSLogErrorAt();
    }
  }
  *((_DWORD *)a1 + 3) = v6;
  return result;
}

uint64_t APConnectivityHelperUpdateTrafficRegistration()
{
  return APSDispatchSyncTask();
}

uint64_t _APConnectivityHelperUpdateTrafficRegistration(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v12 = 0;
  if (APSIsVirtualMachine())
  {
    if (gLogCategory_APConnectivityHelper <= 50
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v9 = 0;
    id v3 = 0;
    goto LABEL_32;
  }
  if (*(unsigned char *)(v2 + 200))
  {
    APSLogErrorAt();
    id v3 = 0;
    uint64_t v7 = 0;
    uint64_t v9 = 4294960573;
    goto LABEL_20;
  }
  id v3 = objc_alloc_init(MEMORY[0x1E4F5E2F8]);
  if (!v3)
  {
    uint64_t v9 = 4294895096;
LABEL_27:
    APSLogErrorAt();
LABEL_32:
    uint64_t v7 = 0;
    goto LABEL_20;
  }
  BOOL v4 = *((unsigned char *)a1 + 22) != 0;
  uint64_t v5 = CUPrintAddress();
  if (!v5)
  {
    uint64_t v9 = 4294895096;
    goto LABEL_27;
  }
  uint64_t v6 = [MEMORY[0x1E4F5E2F0] AWDLPeerContextWithMACAddress:v5 interfaceName:0];
  if (v6)
  {
    uint64_t v7 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", v6, 0);
    if (v7)
    {
      [v3 setServiceName:a1[1]];
      [v3 setActive:*((unsigned char *)a1 + 22) != 0];
      [v3 setSessionFlags:v4];
      [v3 setPeerContextList:v7];
      char v8 = [*(id *)(v2 + 40) setAWDLPeerTrafficRegistration:v3 error:&v12];
      if (gLogCategory_APConnectivityHelper <= 30
        && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
      {
        [*(id *)(v2 + 40) interfaceName];
        objc_msgSend((id)objc_msgSend(*(id *)(v2 + 40), "AWDL"), "interfaceName");
        objc_msgSend((id)objc_msgSend(*(id *)(v2 + 40), "requestParameters"), "interfaceName");
        LogPrintF();
      }
      if (v8)
      {
        uint64_t v9 = 0;
      }
      else
      {
        unsigned int v10 = NSErrorToOSStatus();
        if (v10) {
          uint64_t v9 = v10;
        }
        else {
          uint64_t v9 = 4294895094;
        }
        if (gLogCategory_APConnectivityHelper <= 90
          && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
    }
    else
    {
      uint64_t v9 = 4294895096;
      APSLogErrorAt();
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v7 = 0;
    uint64_t v9 = 4294895094;
  }
LABEL_20:

  return v9;
}

uint64_t APConnectivityHelperStartListeningToEvent(uint64_t a1, int a2)
{
  uint64_t v3 = a1;
  int v4 = a2;
  unsigned int v5 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v3, (dispatch_function_t)_APConnectivityHelperStartListeningToEvent);
  return v5;
}

_DWORD *_APConnectivityHelperStartListeningToEvent(_DWORD *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)result;
  if (*(unsigned char *)(*(void *)result + 200))
  {
    uint64_t result = (_DWORD *)APSLogErrorAt();
    int v4 = -72203;
  }
  else
  {
    int v3 = result[2];
    if (v3)
    {
      if (gLogCategory_APConnectivityHelper <= 50)
      {
        if (gLogCategory_APConnectivityHelper != -1 || (uint64_t result = (_DWORD *)_LogCategory_Initialize(), result))
        {
          APConnectivityHelperGetEventString(v3);
          uint64_t result = (_DWORD *)LogPrintF();
        }
      }
      switch(v3)
      {
        case 1:
          *(unsigned char *)(v2 + 79) = 1;
          uint64_t result = (_DWORD *)_APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStarted(v2);
          int v4 = (int)result;
          if (result)
          {
            uint64_t result = (_DWORD *)APSLogErrorAt();
            *(unsigned char *)(v2 + 79) = 0;
          }
          break;
        case 2:
          if (*(unsigned char *)(v2 + 77) || *(unsigned char *)(v2 + 78)) {
            goto LABEL_72;
          }
          if (*(void *)(v2 + 48))
          {
            uint64_t result = (_DWORD *)_APConnectivityHelperStartWiFiPowerListener(v2);
            int v4 = (int)result;
            if (result) {
              goto LABEL_62;
            }
          }
          else
          {
            *(unsigned char *)(v2 + 78) = 1;
            uint64_t result = (_DWORD *)_APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStarted(v2);
            int v4 = (int)result;
            if (result) {
              goto LABEL_62;
            }
          }
          break;
        case 3:
          if (*(unsigned char *)(v2 + 73) || *(unsigned char *)(v2 + 74)) {
            goto LABEL_72;
          }
          if (*(void *)(v2 + 48))
          {
            uint64_t result = (_DWORD *)_APConnectivityHelperStartWiFiNetworkListener(v2);
            int v4 = (int)result;
            if (result) {
              goto LABEL_62;
            }
          }
          else
          {
            *(unsigned char *)(v2 + 74) = 1;
            uint64_t result = (_DWORD *)_APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStarted(v2);
            int v4 = (int)result;
            if (result) {
              goto LABEL_62;
            }
          }
          break;
        case 4:
          if (*(unsigned char *)(v2 + 112)) {
            goto LABEL_72;
          }
          *(unsigned char *)(v2 + 112) = 1;
          uint64_t result = (_DWORD *)_APConnectivityHelperStartListeningToDynamicStoreNetworkEntity(v2, (CFStringRef)*MEMORY[0x1E4F41B28], _APConnectivityHelperHandleUSBNetworkChangedEvent);
          if (result)
          {
            int v4 = (int)result;
            APSLogErrorAt();
            *(unsigned char *)(v2 + 112) = 0;
            _APConnectivityHelperStopUSBInterfaceListener(v2);
            APSLogErrorAt();
            goto LABEL_76;
          }
          if (gLogCategory_APConnectivityHelper > 40) {
            goto LABEL_72;
          }
          if (gLogCategory_APConnectivityHelper == -1)
          {
            uint64_t result = (_DWORD *)_LogCategory_Initialize();
            if (!result) {
              goto LABEL_72;
            }
          }
          goto LABEL_42;
        case 5:
          goto LABEL_20;
        case 6:
          if (*(unsigned char *)(v2 + 160)) {
            goto LABEL_72;
          }
          *(unsigned char *)(v2 + 160) = 1;
          uint64_t result = (_DWORD *)_APConnectivityHelperStartListeningToDynamicStoreNetworkEntity(v2, (CFStringRef)*MEMORY[0x1E4F41B18], _APConnectivityHelperHandleIPv6ChangedEvent);
          if (result)
          {
            int v4 = (int)result;
            APSLogErrorAt();
            *(unsigned char *)(v2 + 160) = 0;
            _APConnectivityHelperStopIPv6AddressListener(v2);
            APSLogErrorAt();
            goto LABEL_76;
          }
          if (gLogCategory_APConnectivityHelper <= 40)
          {
            if (gLogCategory_APConnectivityHelper != -1
              || (uint64_t result = (_DWORD *)_LogCategory_Initialize(), result))
            {
LABEL_42:
              uint64_t result = (_DWORD *)LogPrintF();
            }
          }
          goto LABEL_72;
        case 7:
          *(unsigned char *)(v2 + 176) = 1;
          uint64_t result = (_DWORD *)_APConnectivityHelperEnsureAWDLDevicePresentListenerStarted(v2);
          int v4 = (int)result;
          if (result)
          {
            uint64_t result = (_DWORD *)APSLogErrorAt();
            *(unsigned char *)(v2 + 176) = 0;
          }
          break;
        case 8:
          if (!*(unsigned char *)(v2 + 137))
          {
            if (!*(unsigned char *)(v2 + 138))
            {
              if (gLogCategory_APConnectivityHelper <= 40
                && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              uint64_t v6 = objc_opt_new();
              *(void *)(v2 + 128) = v6;
              if (v6)
              {
                v7[0] = MEMORY[0x1E4F143A8];
                v7[1] = 3221225472;
                v7[2] = ___APConnectivityHelperStartAWDLSoloSupportListener_block_invoke;
                v7[3] = &unk_1E688C028;
                v7[4] = v2;
                [v6 setStateUpdatedHandler:v7];
                uint64_t result = (_DWORD *)[*(id *)(v2 + 128) beginMonitoring];
                *(unsigned char *)(v2 + 138) = 1;
              }
              else
              {
                uint64_t result = (_DWORD *)APSLogErrorAt();
              }
            }
LABEL_72:
            int v4 = 0;
            break;
          }
          uint64_t result = (_DWORD *)_APConnectivityHelperSendAWDLSoloSupportEvent(v2);
          int v4 = (int)result;
          if (!result) {
            break;
          }
          goto LABEL_76;
        case 9:
          if (*(unsigned char *)(v2 + 75) || *(unsigned char *)(v2 + 76)) {
            goto LABEL_72;
          }
          if (*(void *)(v2 + 48))
          {
            uint64_t result = (_DWORD *)_APConnectivityHelperStartLinkDebounceFailedListener(v2);
            int v4 = (int)result;
            if (!result) {
              break;
            }
          }
          else
          {
            *(unsigned char *)(v2 + 76) = 1;
            uint64_t result = (_DWORD *)_APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStarted(v2);
            int v4 = (int)result;
            if (!result) {
              break;
            }
          }
LABEL_62:
          APSLogErrorAt();
          goto LABEL_76;
        default:
          if ((v3 - 100) > 9 || ((1 << (v3 - 100)) & 0x39F) == 0)
          {
LABEL_20:
            int v4 = -72201;
            if (gLogCategory_APConnectivityHelper <= 60)
            {
              if (gLogCategory_APConnectivityHelper != -1) {
                goto LABEL_17;
              }
              uint64_t result = (_DWORD *)_LogCategory_Initialize();
              if (result) {
                goto LABEL_17;
              }
            }
          }
          else
          {
            int v4 = -72201;
            if (gLogCategory_APConnectivityHelper <= 60)
            {
              if (gLogCategory_APConnectivityHelper != -1
                || (uint64_t result = (_DWORD *)_LogCategory_Initialize(), result))
              {
                APConnectivityHelperGetEventString(v3);
LABEL_17:
                uint64_t result = (_DWORD *)LogPrintF();
                break;
              }
            }
          }
          break;
      }
    }
    else
    {
      int v4 = -72201;
LABEL_76:
      uint64_t result = (_DWORD *)APSLogErrorAt();
    }
  }
  v1[3] = v4;
  return result;
}

uint64_t APConnectivityHelperStopListeningToEvent(uint64_t a1, int a2)
{
  uint64_t v3 = a1;
  int v4 = a2;
  unsigned int v5 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v3, (dispatch_function_t)_APConnectivityHelperStopListeningToEvent);
  return v5;
}

void _APConnectivityHelperStopListeningToEvent(unsigned int *a1)
{
  uint64_t v2 = *(void *)a1;
  if (*(unsigned char *)(*(void *)a1 + 200))
  {
    APSLogErrorAt();
    int v5 = -72203;
  }
  else
  {
    uint64_t v3 = (const void *)a1[2];
    if (v3)
    {
      if (gLogCategory_APConnectivityHelper <= 50
        && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
      {
        APConnectivityHelperGetEventString((int)v3);
        LogPrintF();
      }
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v2 + 232), v3);
      switch((int)v3)
      {
        case 1:
          *(unsigned char *)(v2 + 79) = 0;
          int v4 = _APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStopped(v2);
          int v5 = 0;
          if (v4)
          {
            int v6 = v4;
            goto LABEL_31;
          }
          break;
        case 2:
          int v5 = _APConnectivityHelperEnsureWiFiPowerListenerStopped(v2);
          if (v5) {
            goto LABEL_40;
          }
          break;
        case 3:
          int v5 = _APConnectivityHelperEnsureWiFiNetworkListenerStopped(v2);
          if (v5) {
            goto LABEL_40;
          }
          break;
        case 4:
          int v5 = _APConnectivityHelperEnsureUSBInterfaceListenerStopped(v2);
          if (v5) {
            goto LABEL_40;
          }
          break;
        case 5:
          goto LABEL_18;
        case 6:
          int v5 = _APConnectivityHelperEnsureIPv6AddressesListenerStopped(v2);
          if (v5) {
            goto LABEL_40;
          }
          break;
        case 7:
          *(unsigned char *)(v2 + 176) = 0;
          int v7 = _APConnectivityHelperEnsureAWDLDevicePresentListenerStopped(v2);
          int v5 = 0;
          if (v7)
          {
            int v6 = v7;
LABEL_31:
            APSLogErrorAt();
            int v5 = v6;
          }
          break;
        case 8:
          int v5 = _APConnectivityHelperEnsureAWDLSoloSupportListenerStopped(v2);
          if (v5) {
            goto LABEL_40;
          }
          break;
        case 9:
          int v5 = _APConnectivityHelperStopLinkDebounceFailedListener(v2);
          if (!v5) {
            break;
          }
          APSLogErrorAt();
          goto LABEL_40;
        default:
          if ((v3 - 100) <= 9 && ((1 << ((_BYTE)v3 - 100)) & 0x39F) != 0)
          {
            int v5 = -72201;
            if (gLogCategory_APConnectivityHelper <= 60
              && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
            {
              APConnectivityHelperGetEventString((int)v3);
LABEL_15:
              LogPrintF();
              break;
            }
          }
          else
          {
LABEL_18:
            int v5 = -72201;
            if (gLogCategory_APConnectivityHelper <= 60
              && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
            {
              goto LABEL_15;
            }
          }
          break;
      }
    }
    else
    {
      int v5 = -72201;
LABEL_40:
      APSLogErrorAt();
    }
  }
  a1[3] = v5;
}

uint64_t APConnectivityHelperRegisterForEvent(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  if (a2)
  {
    uint64_t v3 = *(NSObject **)(a1 + 16);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = __APConnectivityHelperRegisterForEvent_block_invoke;
    v6[3] = &unk_1E688BA10;
    int v7 = a3;
    v6[5] = a1;
    void v6[6] = a2;
    v6[4] = &v8;
    dispatch_sync(v3, v6);
    uint64_t v4 = *((unsigned int *)v9 + 6);
  }
  else
  {
    APSLogErrorAt();
    uint64_t v4 = 4294960591;
    *((_DWORD *)v9 + 6) = -6705;
  }
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1D08BCD4C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void __APConnectivityHelperRegisterForEvent_block_invoke(uint64_t a1)
{
  uint64_t v16 = *(void *)(a1 + 40);
  unsigned int v17 = *(_DWORD *)(a1 + 56);
  int v18 = 0;
  CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v16 + 216), (const void *)v17);
  uint64_t v3 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (Value)
  {
    CFSetRef v4 = (const __CFSet *)CFRetain(Value);
    if (v4)
    {
      int v5 = v4;
      if (CFSetContainsValue(v4, *(const void **)(a1 + 48))) {
        goto LABEL_25;
      }
LABEL_7:
      CFSetAddValue(v5, *(const void **)(a1 + 48));
      if (gLogCategory_APConnectivityHelper <= 50
        && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
      {
        APConnectivityHelperGetEventString(*(_DWORD *)(a1 + 56));
        CFSetGetCount(v5);
        LogPrintF();
      }
      if (CFSetGetCount(v5) == 1)
      {
        _APConnectivityHelperStartListeningToEvent(&v16);
        int v7 = v18;
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v18;
        if (v7) {
LABEL_40:
        }
          APSLogErrorAt();
LABEL_25:
        if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
        {
LABEL_36:
          CFRelease(v5);
          return;
        }
        CFSetRemoveValue(v5, *(const void **)(a1 + 48));
        char v15 = 0;
        goto LABEL_27;
      }
      uint64_t v8 = (const void *)*(unsigned int *)(a1 + 56);
      if (v8 > 8 || ((1 << (char)v8) & 0x1DA) == 0) {
        goto LABEL_25;
      }
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v9 = *(const void **)(a1 + 48);
      CFMutableArrayRef Mutable = CFArrayCreateMutable(*v3, 0, MEMORY[0x1E4F1D510]);
      if (!Mutable) {
        goto LABEL_40;
      }
      CFMutableArrayRef v12 = Mutable;
      if (v8 == 6)
      {
        uint64_t v19 = MEMORY[0x1E4F143A8];
        uint64_t v20 = 3221225472;
        CFIndex v21 = ___APConnectivityHelperReplayEvents_block_invoke;
        uint64_t v22 = &__block_descriptor_52_e15_v24__0r_v8r_v16l;
        uint64_t v23 = v10;
        uint64_t v24 = v9;
        int v13 = 6;
      }
      else
      {
        if (v8 != 4)
        {
          long long v14 = CFDictionaryGetValue(*(CFDictionaryRef *)(v10 + 232), v8);
          if (v14) {
            _APConnectivityHelperReplayEvent(v10, v9, (int)v8, v14);
          }
          goto LABEL_24;
        }
        uint64_t v19 = MEMORY[0x1E4F143A8];
        uint64_t v20 = 3221225472;
        CFIndex v21 = ___APConnectivityHelperReplayEvents_block_invoke;
        uint64_t v22 = &__block_descriptor_52_e15_v24__0r_v8r_v16l;
        uint64_t v23 = v10;
        uint64_t v24 = v9;
        int v13 = 4;
      }
      int v25 = v13;
      CFDictionaryApplyBlock();
LABEL_24:
      CFRelease(v12);
      goto LABEL_25;
    }
  }
  CFMutableSetRef v6 = CFSetCreateMutable(*v3, 0, MEMORY[0x1E4F1D548]);
  if (v6)
  {
    int v5 = v6;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 40) + 216), (const void *)*(unsigned int *)(a1 + 56), v6);
    goto LABEL_7;
  }
  APSLogErrorAt();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -6728;
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    return;
  }
  int v5 = 0;
  char v15 = 1;
LABEL_27:
  if (gLogCategory_APConnectivityHelper <= 90
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    APConnectivityHelperGetEventString(*(_DWORD *)(a1 + 56));
    if ((v15 & 1) == 0) {
      CFSetGetCount(v5);
    }
    LogPrintF();
  }
  if (v5) {
    goto LABEL_36;
  }
}

const char *APConnectivityHelperGetEventString(int a1)
{
  switch(a1)
  {
    case 'd':
      uint64_t result = "Invalidated";
      break;
    case 'e':
      uint64_t result = "WiFi Available Listening Stopped";
      break;
    case 'f':
      uint64_t result = "WiFi Power Changed Listening Stopped";
      break;
    case 'g':
      uint64_t result = "WiFi Network Changed Listening Stopped";
      break;
    case 'h':
      uint64_t result = "USB Interface Changed Listening Stopped";
      break;
    case 'i':
LABEL_15:
      uint64_t result = "Unknown";
      break;
    case 'j':
      uint64_t result = "IPv6 Addresses Changed Listening Stopped";
      break;
    case 'k':
      uint64_t result = "AWDL Available Listening Stopped";
      break;
    case 'l':
      uint64_t result = "AWDL Solo Support Listening Stopped";
      break;
    case 'm':
      uint64_t result = "Link Debounce Failed Listening Stopped";
      break;
    default:
      int v2 = a1 - 1;
      uint64_t result = "WiFi Available";
      switch(v2)
      {
        case 0:
          return result;
        case 1:
          uint64_t result = "WiFi Power Changed";
          break;
        case 2:
          uint64_t result = "WiFi Network Changed";
          break;
        case 3:
          uint64_t result = "USB Interface Changed";
          break;
        case 5:
          uint64_t result = "IPv6 Addresses Changed";
          break;
        case 6:
          uint64_t result = "AWDL Available";
          break;
        case 7:
          uint64_t result = "AWDL Solo Support";
          break;
        case 8:
          uint64_t result = "Link Debounce Failed";
          break;
        default:
          goto LABEL_15;
      }
      break;
  }
  return result;
}

uint64_t APConnectivityHelperDeregisterForEvent(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  if (a2)
  {
    uint64_t v3 = *(NSObject **)(a1 + 16);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = __APConnectivityHelperDeregisterForEvent_block_invoke;
    v6[3] = &unk_1E688BA10;
    v6[4] = &v8;
    v6[5] = a1;
    void v6[6] = a2;
    int v7 = a3;
    dispatch_sync(v3, v6);
    if (*((_DWORD *)v9 + 6))
    {
      APSLogErrorAt();
      uint64_t v4 = *((unsigned int *)v9 + 6);
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v4 = 4294960591;
    *((_DWORD *)v9 + 6) = -6705;
  }
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1D08BD388(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __APConnectivityHelperDeregisterForEvent_block_invoke(uint64_t a1)
{
  uint64_t result = _APConnectivityHelperDeregisterForEvent(*(void *)(a1 + 40), *(const void **)(a1 + 48), (void *)*(unsigned int *)(a1 + 56));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _APConnectivityHelperDeregisterForEvent(uint64_t a1, const void *a2, void *key)
{
  uint64_t v13 = a1;
  int v14 = (int)key;
  unsigned int v15 = 0;
  if (a2)
  {
    int v3 = (int)key;
    unint64_t v6 = key;
    CFSetRef Value = (const __CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 216), (const void *)key);
    if (!Value) {
      return 0;
    }
    uint64_t v8 = Value;
    if (!CFSetContainsValue(Value, a2)) {
      return 0;
    }
    CFSetRemoveValue(v8, a2);
    if (gLogCategory_APConnectivityHelper <= 50
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      APConnectivityHelperGetEventString(v3);
      CFSetGetCount(v8);
      LogPrintF();
    }
    int v9 = v3 - 1;
    if (v3 - 1) <= 8 && ((0x1EFu >> v9))
    {
      int v10 = dword_1D093C4B0[v9];
      if (gLogCategory_APConnectivityHelper <= 30
        && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
      {
        APConnectivityHelperGetEventString(v10);
        LogPrintF();
      }
      _APConnectivityHelperDispatchEventToClient(a1, a2, v10, 0);
    }
    if (!CFSetGetCount(v8))
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 216), (const void *)v6);
      _APConnectivityHelperStopListeningToEvent((unsigned int *)&v13);
      uint64_t v11 = v15;
      if (v15) {
        APSLogErrorAt();
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v11;
}

uint64_t APConnectivityHelperRegisterActivity(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  if (a2)
  {
    int v3 = *(NSObject **)(a1 + 16);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = __APConnectivityHelperRegisterActivity_block_invoke;
    v6[3] = &unk_1E688BA10;
    int v7 = a3;
    v6[5] = a1;
    void v6[6] = a2;
    v6[4] = &v8;
    dispatch_sync(v3, v6);
    uint64_t v4 = *((unsigned int *)v9 + 6);
  }
  else
  {
    APSLogErrorAt();
    uint64_t v4 = 4294960591;
    *((_DWORD *)v9 + 6) = -6705;
  }
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1D08BD6C4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void __APConnectivityHelperRegisterActivity_block_invoke(uint64_t a1)
{
  CFSetRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 40) + 224), (const void *)*(unsigned int *)(a1 + 56));
  if (Value && (CFSetRef v3 = (const __CFSet *)CFRetain(Value)) != 0)
  {
    CFMutableSetRef Mutable = v3;
    if (CFSetContainsValue(v3, *(const void **)(a1 + 48))) {
      goto LABEL_24;
    }
  }
  else
  {
    CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
    if (!Mutable)
    {
      APSLogErrorAt();
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -6728;
      goto LABEL_24;
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 40) + 224), (const void *)*(unsigned int *)(a1 + 56), Mutable);
  }
  if (gLogCategory_APConnectivityHelper <= 50
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    CFSetGetCount(Mutable);
    LogPrintF();
  }
  if (!CFSetGetCount(Mutable))
  {
    if (*(_DWORD *)(a1 + 56))
    {
      int v5 = -6735;
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v11 = 0;
      if (*(void *)(v6 + 64))
      {
        int v5 = 0;
LABEL_22:
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;
        if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
        {
          APSLogErrorAt();
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      uint64_t v7 = [MEMORY[0x1E4F5E308] activityWithType:4 reason:0];
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        if ([*(id *)(v6 + 40) beginActivity:v7 error:&v11])
        {
          id v9 = v8;
          int v5 = 0;
          *(void *)(v6 + 64) = v9;
          goto LABEL_22;
        }
        int v10 = NSErrorToOSStatus();
        if (v10) {
          int v5 = v10;
        }
        else {
          int v5 = -72202;
        }
      }
      else
      {
        int v5 = -72202;
      }
    }
    APSLogErrorAt();
    goto LABEL_22;
  }
LABEL_23:
  CFSetAddValue(Mutable, *(const void **)(a1 + 48));
LABEL_24:
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
    && gLogCategory_APConnectivityHelper <= 90
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    if (Mutable) {
      CFSetGetCount(Mutable);
    }
    LogPrintF();
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

const char *APConnectivityHelperGetActivityString(int a1)
{
  if (a1) {
    return "Unknown";
  }
  else {
    return "Wake on Wireless";
  }
}

uint64_t APConnectivityHelperDeregisterActivity(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = 0;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  if (a2)
  {
    CFSetRef v3 = *(NSObject **)(a1 + 16);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = __APConnectivityHelperDeregisterActivity_block_invoke;
    v6[3] = &unk_1E688BA10;
    v6[4] = &v8;
    v6[5] = a1;
    void v6[6] = a2;
    int v7 = a3;
    dispatch_sync(v3, v6);
    if (*((_DWORD *)v9 + 6))
    {
      APSLogErrorAt();
      uint64_t v4 = *((unsigned int *)v9 + 6);
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v4 = 4294960591;
    *((_DWORD *)v9 + 6) = -6705;
  }
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1D08BDB08(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __APConnectivityHelperDeregisterActivity_block_invoke(uint64_t a1)
{
  uint64_t result = _APConnectivityHelperDeregisterActivity(*(void *)(a1 + 40), *(const void **)(a1 + 48), (void *)*(unsigned int *)(a1 + 56));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _APConnectivityHelperDeregisterActivity(uint64_t a1, const void *a2, void *key)
{
  if (!a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  int v3 = (int)key;
  unint64_t v6 = key;
  CFSetRef Value = (const __CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 224), (const void *)key);
  if (Value)
  {
    uint64_t v8 = Value;
    if (CFSetContainsValue(Value, a2))
    {
      CFSetRemoveValue(v8, a2);
      if (gLogCategory_APConnectivityHelper <= 50
        && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
      {
        CFSetGetCount(v8);
        LogPrintF();
      }
      if (!CFSetGetCount(v8))
      {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 224), (const void *)v6);
        if (v3)
        {
          uint64_t v9 = 4294960561;
          APSLogErrorAt();
          APSLogErrorAt();
          return v9;
        }
        _APConnectivityHelperStopWakeOnWireless(a1);
      }
    }
  }
  return 0;
}

uint64_t APConnectivityHelperRemoveAllRegistrations(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  int v12 = 0;
  if (a2)
  {
    if (gLogCategory_APConnectivityHelper <= 50
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v4 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __APConnectivityHelperRemoveAllRegistrations_block_invoke;
    block[3] = &unk_1E688BD68;
    block[4] = &v9;
    void block[5] = a1;
    void block[6] = a2;
    dispatch_sync(v4, block);
    if (gLogCategory_APConnectivityHelper <= 30
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    int v5 = *(NSObject **)(a1 + 16);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __APConnectivityHelperDeregisterEventHandler_block_invoke;
    v13[3] = &__block_descriptor_48_e5_v8__0l;
    v13[4] = a1;
    v13[5] = a2;
    dispatch_sync(v5, v13);
    uint64_t v6 = *((unsigned int *)v10 + 6);
  }
  else
  {
    APSLogErrorAt();
    uint64_t v6 = 4294960591;
    *((_DWORD *)v10 + 6) = -6705;
  }
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_1D08BDED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __APConnectivityHelperRemoveAllRegistrations_block_invoke(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  if (Mutable)
  {
    CFSetRef v4 = Mutable;
    CFMutableSetRef v5 = CFSetCreateMutable(v2, 0, 0);
    if (v5)
    {
      CFSetRef v6 = v5;
      CFDictionaryApplyBlock();
      CFDictionaryApplyBlock();
      if (gLogCategory_APConnectivityHelper <= 30
        && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
      {
        CFSetGetCount(v4);
        LogPrintF();
      }
      CFSetApplyBlock();
      if (gLogCategory_APConnectivityHelper <= 30
        && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
      {
        CFSetGetCount(v6);
        LogPrintF();
      }
      CFSetApplyBlock();
      CFRelease(v6);
    }
    else
    {
      APSLogErrorAt();
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -6728;
    }
    CFRelease(v4);
  }
  else
  {
    APSLogErrorAt();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -6728;
  }
}

void __APConnectivityHelperRemoveAllRegistrations_block_invoke_2(uint64_t a1, const void *a2, CFSetRef theSet)
{
  if (CFSetContainsValue(theSet, *(const void **)(a1 + 32)))
  {
    CFMutableSetRef v5 = *(__CFSet **)(a1 + 40);
    CFSetAddValue(v5, a2);
  }
}

void __APConnectivityHelperRemoveAllRegistrations_block_invoke_3(uint64_t a1, const void *a2, CFSetRef theSet)
{
  if (CFSetContainsValue(theSet, *(const void **)(a1 + 32)))
  {
    CFMutableSetRef v5 = *(__CFSet **)(a1 + 40);
    CFSetAddValue(v5, a2);
  }
}

uint64_t __APConnectivityHelperRemoveAllRegistrations_block_invoke_4(uint64_t a1, void *key)
{
  uint64_t result = _APConnectivityHelperDeregisterActivity(*(void *)(a1 + 40), *(const void **)(a1 + 48), key);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  return result;
}

uint64_t __APConnectivityHelperRemoveAllRegistrations_block_invoke_5(uint64_t a1, void *key)
{
  uint64_t result = _APConnectivityHelperDeregisterForEvent(*(void *)(a1 + 40), *(const void **)(a1 + 48), key);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  return result;
}

void APConnectivityHelperDeregisterEventHandler(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v3 = *(NSObject **)(a1 + 16);
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    void v4[2] = __APConnectivityHelperDeregisterEventHandler_block_invoke;
    void v4[3] = &__block_descriptor_48_e5_v8__0l;
    v4[4] = a1;
    v4[5] = a2;
    dispatch_sync(v3, v4);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t APConnectivityHelperSetEventHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a1;
  v4[1] = a2;
  void v4[2] = a3;
  uint64_t v5 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v4, (dispatch_function_t)_APConnectivityHelperSetEventHandler);
  return v5;
}

uint64_t _APConnectivityHelperSetEventHandler(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)result;
  if (*(unsigned char *)(*(void *)result + 200))
  {
    uint64_t result = APSLogErrorAt();
    int v3 = -72203;
    goto LABEL_5;
  }
  if (*(unsigned char *)(v2 + 80))
  {
    int v3 = -72204;
LABEL_9:
    uint64_t result = APSLogErrorAt();
    goto LABEL_5;
  }
  if (*(unsigned char *)(v2 + 77))
  {
    int v3 = -72204;
    goto LABEL_9;
  }
  int v3 = 0;
  *(_OWORD *)(v2 + 184) = *(_OWORD *)(result + 8);
LABEL_5:
  *(_DWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t APConnectivityHelperRegisterEventHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a3)
  {
    int v3 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __APConnectivityHelperRegisterEventHandler_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = a1;
    void block[5] = a2;
    void block[6] = a3;
    dispatch_sync(v3, block);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

void __APConnectivityHelperRegisterEventHandler_block_invoke(void *a1)
{
  if (gLogCategory_APConnectivityHelper <= 50
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v2 = (const void *)a1[5];
  int v3 = *(__CFDictionary **)(a1[4] + 208);
  CFSetRef v4 = (const void *)a1[6];
  CFDictionarySetValue(v3, v2, v4);
}

void __APConnectivityHelperDeregisterEventHandler_block_invoke(uint64_t a1)
{
  if (gLogCategory_APConnectivityHelper <= 50
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v2 = *(const void **)(a1 + 40);
  int v3 = *(__CFDictionary **)(*(void *)(a1 + 32) + 208);
  CFDictionaryRemoveValue(v3, v2);
}

uint64_t APConnectivityHelperCopyCurrentWiFiNetworkInfo(dispatch_queue_t *a1, CFTypeRef *a2)
{
  uint64_t v8 = 0;
  context = a1;
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFTypeRef cf = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  dispatch_sync_f(a1[2], &context, (dispatch_function_t)_APConnectivityHelperPopulateCurrentWiFiNetworkInfo);
  if (v8)
  {
    APSLogErrorAt();
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a2 = cf;
  }
  return v8;
}

void _APConnectivityHelperPopulateCurrentWiFiNetworkInfo(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*(unsigned char *)(*a1 + 200))
  {
    APSLogErrorAt();
    LODWORD(v6) = -72203;
  }
  else
  {
    int v3 = *(const void **)(v2 + 48);
    if (v3)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)a1[1], @"networkInterfaceName", v3);
      CFAllocatorRef v4 = (const void *)[*(id *)(v2 + 40) networkName];
      if (v4) {
        CFDictionarySetValue((CFMutableDictionaryRef)a1[1], @"wifiNetworkSSID", v4);
      }
      uint64_t v5 = (void *)[*(id *)(v2 + 40) currentKnownNetworkProfile];
      CFSetRef v6 = v5;
      if (v5)
      {
        int v7 = [v5 isCarPlay];
        uint64_t v8 = (const void **)MEMORY[0x1E4F1CFD0];
        if (!v7) {
          uint64_t v8 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue((CFMutableDictionaryRef)a1[1], @"wifiNetworkIsCarPlay", *v8);
        CFSetRef v6 = (void *)[v6 carplayUUID];
        if (v6)
        {
          if (gLogCategory_APConnectivityHelper <= 50
            && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          CFDictionarySetValue((CFMutableDictionaryRef)a1[1], @"wifiNetworkCarPlayUUID", v6);
          LODWORD(v6) = 0;
        }
      }
    }
    else
    {
      LODWORD(v6) = -72205;
      APSLogErrorAt();
    }
  }
  *((_DWORD *)a1 + 4) = v6;
}

uint64_t APConnectivityHelperInvalidate(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v4 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v3, (dispatch_function_t)_APConnectivityHelperInvalidate);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 16), &__block_literal_global_57);
  return v4;
}

uint64_t _APConnectivityHelperInvalidate(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  if (*(unsigned char *)(*(void *)a1 + 200))
  {
    uint64_t result = 4294895093;
  }
  else
  {
    _APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStopped(*(void *)a1);
    _APConnectivityHelperEnsureWiFiPowerListenerStopped(v2);
    _APConnectivityHelperEnsureWiFiNetworkListenerStopped(v2);
    _APConnectivityHelperEnsureUSBInterfaceListenerStopped(v2);
    _APConnectivityHelperEnsureIPv6AddressesListenerStopped(v2);
    _APConnectivityHelperEnsureAWDLDevicePresentListenerStopped(v2);
    _APConnectivityHelperEnsureAWDLSoloSupportListenerStopped(v2);
    _APConnectivityHelperStopWakeOnWireless(v2);
    if (*(void *)(v2 + 32))
    {
      if (_APConnectivityHelper_getActiveHelpers_once != -1) {
        dispatch_once(&_APConnectivityHelper_getActiveHelpers_once, &__block_literal_global_79);
      }
      FigCFWeakReferenceTableRemoveValue();
      *(void *)(v2 + 32) = 0;
    }
    [*(id *)(v2 + 40) invalidate];
    uint64_t result = _APConnectivityHelperDispatchEvent(v2, (void *)0x64, 0);
    *(unsigned char *)(v2 + 200) = 1;
  }
  *(_DWORD *)(a1 + 8) = result;
  return result;
}

void _APConnectivityHelperFinalize(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 200))
  {

    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 40) = 0;

    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    uint64_t v2 = *(const void **)(a1 + 104);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 104) = 0;
    }
    uint64_t v3 = *(const void **)(a1 + 120);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 120) = 0;
    }
    uint64_t v4 = *(const void **)(a1 + 208);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 208) = 0;
    }
    uint64_t v5 = *(const void **)(a1 + 216);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 216) = 0;
    }
    CFSetRef v6 = *(const void **)(a1 + 224);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 224) = 0;
    }
    int v7 = *(const void **)(a1 + 232);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 232) = 0;
    }
    uint64_t v8 = *(const void **)(a1 + 144);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 144) = 0;
    }
    uint64_t v9 = *(const void **)(a1 + 152);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 152) = 0;
    }
    uint64_t v10 = *(NSObject **)(a1 + 16);
    if (v10)
    {
      dispatch_release(v10);
      *(void *)(a1 + 16) = 0;
    }
    uint64_t v11 = *(NSObject **)(a1 + 24);
    if (v11)
    {
      dispatch_release(v11);
      *(void *)(a1 + 24) = 0;
    }
  }
  else
  {
    if (gLogCategory_APConnectivityHelper <= 100) {
      _APConnectivityHelperFinalize_cold_1(gLogCategory_APConnectivityHelper);
    }
    __break(1u);
  }
}

void _APConnectivityHelperReplayEvent(uint64_t a1, const void *a2, int a3, const void *a4)
{
  if (gLogCategory_APConnectivityHelper <= 30
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    APConnectivityHelperGetEventString(a3);
    LogPrintF();
  }
  if ((const void *)*MEMORY[0x1E4F1D260] == a4) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = a4;
  }
  _APConnectivityHelperDispatchEventToClient(a1, a2, a3, v8);
}

void _APConnectivityHelperDispatchEventToClient(uint64_t a1, const void *a2, int a3, const void *a4)
{
  CFSetRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 208), a2);
  if (Value)
  {
    uint64_t v9 = Value;
    if (gLogCategory_APConnectivityHelper <= 30
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      APConnectivityHelperGetEventString(a3);
      LogPrintF();
    }
    CFRetain((CFTypeRef)a1);
    CFRetain(a2);
    if (a4) {
      CFRetain(a4);
    }
    uint64_t v10 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___APConnectivityHelperDispatchEventToClient_block_invoke;
    block[3] = &__block_descriptor_68_e5_v8__0l;
    block[4] = v9;
    void block[5] = a1;
    int v12 = a3;
    void block[6] = a4;
    void block[7] = a2;
    dispatch_async(v10, block);
  }
  else if (gLogCategory_APConnectivityHelper <= 90 {
         && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  }
  {
    APConnectivityHelperGetEventString(a3);
    LogPrintF();
  }
}

void _APConnectivityHelperStopWakeOnWireless(uint64_t a1)
{
  if (*(void *)(a1 + 64))
  {
    objc_msgSend(*(id *)(a1 + 40), "endActivity:");

    *(void *)(a1 + 64) = 0;
  }
}

uint64_t _APConnectivityHelperHandleWiFiLinkChangedInternal(unsigned char *cf, void *a2)
{
  uint64_t v9 = cf;
  if (!cf[73]) {
    return 0;
  }
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFAllocatorRef v4 = CFGetAllocator(cf);
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (theDict)
  {
    uint64_t v11 = 0;
    _APConnectivityHelperPopulateCurrentWiFiNetworkInfo((uint64_t *)&v9);
    if (v11)
    {
      APSLogErrorAt();
      uint64_t v7 = 0;
      CFMutableDictionaryRef v6 = theDict;
    }
    else
    {
      if (a2)
      {
        uint64_t v5 = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F5E2C8]];
        if (v5)
        {
          if ([v5 isLinkDownDebounceInProgress]) {
            CFDictionarySetValue(theDict, @"wifiNetworkIsLinkDownDebounceInProgress", (const void *)*MEMORY[0x1E4F1CFD0]);
          }
        }
      }
      CFMutableDictionaryRef v6 = theDict;
      uint64_t v7 = _APConnectivityHelperDispatchEvent((uint64_t)cf, (void *)3, theDict);
      if (v7) {
        APSLogErrorAt();
      }
    }
    if (v6) {
      CFRelease(v6);
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294895096;
  }
  return v7;
}

void *_APConnectivityHelperTrySettingWiFiDevice(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
LABEL_2:
    if (gLogCategory_APConnectivityHelper <= 30
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_10;
  }
  uint64_t result = (void *)[*(id *)(a1 + 40) interfaceName];
  if (!result) {
    return result;
  }
  *(void *)(a1 + 48) = result;
  if (gLogCategory_APConnectivityHelper <= 40)
  {
    if (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()) {
      LogPrintF();
    }
    goto LABEL_2;
  }
LABEL_10:
  if (*(unsigned char *)(a1 + 79))
  {
    if (_APConnectivityHelperDispatchEvent(a1, (void *)1, 0)) {
      goto LABEL_30;
    }
    *(unsigned char *)(a1 + 79) = 0;
  }
  if (*(unsigned char *)(a1 + 78))
  {
    if (_APConnectivityHelperStartWiFiPowerListener(a1)) {
      goto LABEL_30;
    }
    *(unsigned char *)(a1 + 78) = 0;
  }
  if (*(unsigned char *)(a1 + 74))
  {
    if (_APConnectivityHelperStartWiFiNetworkListener(a1)) {
      goto LABEL_30;
    }
    *(unsigned char *)(a1 + 74) = 0;
  }
  if (*(unsigned char *)(a1 + 76))
  {
    if (_APConnectivityHelperStartLinkDebounceFailedListener(a1)) {
      goto LABEL_30;
    }
    *(unsigned char *)(a1 + 76) = 0;
  }
  if (!*(unsigned char *)(a1 + 178))
  {
LABEL_25:
    return (void *)_APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStopped(a1);
  }
  if (!_APConnectivityHelperEnsureAWDLDevicePresentListenerStarted(a1))
  {
    *(unsigned char *)(a1 + 178) = 0;
    goto LABEL_25;
  }
LABEL_30:
  APSLogErrorAt();
  _APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStopped(a1);
  return (void *)APSLogErrorAt();
}

id _APConnectivityHelperTrySettingAWDLDevice(uint64_t a1)
{
  if (*(void *)(a1 + 56)) {
    goto LABEL_26;
  }
  id result = (id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "AWDL"), "interfaceName");
  if (result)
  {
    id result = result;
    *(void *)(a1 + 56) = result;
    if (gLogCategory_APConnectivityHelper <= 40)
    {
      if (gLogCategory_APConnectivityHelper != -1 || (int v3 = _LogCategory_Initialize(), result = *(id *)(a1 + 56), v3))
      {
        LogPrintF();
        id result = *(id *)(a1 + 56);
      }
    }
    if (result)
    {
LABEL_26:
      if (gLogCategory_APConnectivityHelper <= 30
        && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (*(unsigned char *)(a1 + 176))
      {
        if (gLogCategory_APConnectivityHelper <= 30
          && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (_APConnectivityHelperDispatchEvent(a1, (void *)7, 0)) {
          APSLogErrorAt();
        }
        else {
          *(unsigned char *)(a1 + 176) = 0;
        }
      }
      return (id)_APConnectivityHelperEnsureAWDLDevicePresentListenerStopped(a1);
    }
  }
  return result;
}

uint64_t _APConnectivityHelperDispatchEvent(uint64_t a1, void *key, const void *a3)
{
  if (*(unsigned char *)(a1 + 200)) {
    return 0;
  }
  unsigned int v4 = key;
  if (!*(void *)(a1 + 184))
  {
    if (key > 0x62)
    {
      CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
      if (!Mutable)
      {
        APSLogErrorAt();
        return 4294960568;
      }
      CFSetRef v10 = Mutable;
      CFDictionaryApplyBlock();
    }
    else
    {
      CFSetRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 216), (const void *)key);
      if (Value) {
        CFSetRef v10 = (const __CFSet *)CFRetain(Value);
      }
      else {
        CFSetRef v10 = 0;
      }
    }
    if (gLogCategory_APConnectivityHelper <= 50
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      APConnectivityHelperGetEventString(v4);
      if (v10) {
        CFSetGetCount(v10);
      }
      LogPrintF();
    }
    if (v10) {
      CFSetApplyBlock();
    }
    if (v4 <= 8 && ((1 << v4) & 0x1DA) != 0)
    {
      if (a3) {
        int v12 = a3;
      }
      else {
        int v12 = (const void *)*MEMORY[0x1E4F1D260];
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 232), (const void *)v4, v12);
    }
    if (v10) {
      CFRelease(v10);
    }
    return 0;
  }
  CFMutableDictionaryRef v6 = malloc_type_calloc(1uLL, 0x28uLL, 0x10E00404FF7FCA9uLL);
  if (v6)
  {
    uint64_t v7 = v6;
    CFRetain((CFTypeRef)a1);
    if (a3) {
      CFRetain(a3);
    }
    uint64_t v8 = *(void *)(a1 + 192);
    *uint64_t v7 = *(void *)(a1 + 184);
    v7[1] = a1;
    *((_DWORD *)v7 + 4) = v4;
    v7[3] = a3;
    v7[4] = v8;
    if (gLogCategory_APConnectivityHelper <= 20
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      APConnectivityHelperGetEventString(v4);
      LogPrintF();
    }
    dispatch_async_f(*(dispatch_queue_t *)(a1 + 24), v7, (dispatch_function_t)_APConnectivityHelperDispatchEventExternal);
    return 0;
  }
  APSLogErrorAt();
  return 4294895096;
}

uint64_t _APConnectivityHelperStartWiFiPowerListener(uint64_t a1)
{
  uint64_t v6 = 0;
  if (*(unsigned char *)(a1 + 77)) {
    return 0;
  }
  if (!*(void *)(a1 + 48))
  {
    uint64_t v2 = 4294895091;
LABEL_13:
    APSLogErrorAt();
    return v2;
  }
  if (APSIsVirtualMachine())
  {
    if (gLogCategory_APConnectivityHelper <= 50
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 0;
  }
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    uint64_t v5 = a1;
    LogPrintF();
  }
  if ((objc_msgSend(*(id *)(a1 + 40), "startMonitoringEventType:error:", 1, &v6, v5) & 1) == 0)
  {
    unsigned int v3 = NSErrorToOSStatus();
    if (v3) {
      uint64_t v2 = v3;
    }
    else {
      uint64_t v2 = 4294895094;
    }
    goto LABEL_13;
  }
  uint64_t v2 = 0;
  *(unsigned char *)(a1 + 77) = 1;
  return v2;
}

uint64_t _APConnectivityHelperStartWiFiNetworkListener(uint64_t a1)
{
  uint64_t v6 = 0;
  if (*(unsigned char *)(a1 + 73)) {
    return 0;
  }
  if (!*(void *)(a1 + 48))
  {
    uint64_t v2 = 4294895091;
    goto LABEL_14;
  }
  if (APSIsVirtualMachine())
  {
    if (gLogCategory_APConnectivityHelper <= 50
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 0;
  }
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    uint64_t v5 = a1;
    LogPrintF();
  }
  if ((objc_msgSend(*(id *)(a1 + 40), "startMonitoringEventType:error:", 6, &v6, v5) & 1) == 0)
  {
    unsigned int v3 = NSErrorToOSStatus();
    if (v3) {
      uint64_t v2 = v3;
    }
    else {
      uint64_t v2 = 4294895094;
    }
    goto LABEL_14;
  }
  *(unsigned char *)(a1 + 73) = 1;
  uint64_t v2 = _APConnectivityHelperHandleWiFiLinkChangedInternal((unsigned char *)a1, 0);
  if (v2)
  {
LABEL_14:
    APSLogErrorAt();
    _APConnectivityHelperStopWiFiNetworkListener(a1);
  }
  return v2;
}

uint64_t _APConnectivityHelperStartLinkDebounceFailedListener(uint64_t a1)
{
  uint64_t v6 = 0;
  if (*(unsigned char *)(a1 + 75)) {
    return 0;
  }
  if (!*(void *)(a1 + 48))
  {
    uint64_t v2 = 4294895091;
    APSLogErrorAt();
LABEL_17:
    _APConnectivityHelperStopLinkDebounceFailedListener(a1);
    return v2;
  }
  if (APSIsVirtualMachine())
  {
    if (gLogCategory_APConnectivityHelper <= 50
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 0;
  }
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    uint64_t v5 = a1;
    LogPrintF();
  }
  if ((objc_msgSend(*(id *)(a1 + 40), "startMonitoringEventType:error:", 29, &v6, v5) & 1) == 0)
  {
    unsigned int v3 = NSErrorToOSStatus();
    if (v3) {
      uint64_t v2 = v3;
    }
    else {
      uint64_t v2 = 4294895094;
    }
    if (gLogCategory_APConnectivityHelper <= 90
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_17;
  }
  uint64_t v2 = 0;
  *(unsigned char *)(a1 + 75) = 1;
  return v2;
}

uint64_t _APConnectivityHelperEnsureAWDLDevicePresentListenerStarted(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    if (*(unsigned char *)(a1 + 177) || *(void *)(a1 + 56)) {
      goto LABEL_11;
    }
    if (gLogCategory_APConnectivityHelper <= 40
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(unsigned char *)(a1 + 177) = 1;
    uint64_t updated = _APConnectivityHelperUpdateInterfaceAddedListener(a1);
    if (!updated)
    {
LABEL_11:
      _APConnectivityHelperTrySettingAWDLDevice(a1);
      return 0;
    }
    uint64_t v2 = updated;
    APSLogErrorAt();
    _APConnectivityHelperEnsureAWDLDevicePresentListenerStopped(a1);
LABEL_14:
    APSLogErrorAt();
    return v2;
  }
  *(unsigned char *)(a1 + 178) = 1;
  uint64_t v2 = _APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStarted(a1);
  if (v2) {
    goto LABEL_14;
  }
  return v2;
}

uint64_t _APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStopped(uint64_t a1)
{
  uint64_t v1 = _APConnectivityHelperStopWiFiDeviceAttachmentListener(a1);
  if (v1) {
    APSLogErrorAt();
  }
  return v1;
}

void _APConnectivityHelperDispatchEventExternal(void *a1)
{
  uint64_t v2 = (const void *)a1[1];
  unsigned int v3 = (const void *)a1[3];
  ((void (*)(const void *, void, const void *, void))*a1)(v2, *((unsigned int *)a1 + 4), v3, a1[4]);
  if (v3) {
    CFRelease(v3);
  }
  CFRelease(v2);
  free(a1);
}

uint64_t _APConnectivityHelperStopWiFiNetworkListener(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 74);
  if (*(unsigned char *)(a1 + 74))
  {
    *(unsigned char *)(a1 + 74) = 0;
    int v2 = 1;
  }
  if (*(unsigned char *)(a1 + 73))
  {
    if (gLogCategory_APConnectivityHelper <= 40
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      uint64_t v5 = a1;
      LogPrintF();
    }
    objc_msgSend(*(id *)(a1 + 40), "stopMonitoringEventType:", 6, v5);
    *(unsigned char *)(a1 + 73) = 0;
    int v2 = 1;
  }
  uint64_t v3 = 0;
  if (v2)
  {
    if (*(void *)(a1 + 184))
    {
      uint64_t v3 = _APConnectivityHelperDispatchEvent(a1, (void *)0x67, 0);
      if (v3) {
        APSLogErrorAt();
      }
    }
  }
  return v3;
}

uint64_t _APConnectivityHelperStopLinkDebounceFailedListener(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 76);
  if (*(unsigned char *)(a1 + 76))
  {
    *(unsigned char *)(a1 + 76) = 0;
    int v2 = 1;
  }
  if (*(unsigned char *)(a1 + 75))
  {
    if (gLogCategory_APConnectivityHelper <= 40
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      uint64_t v5 = a1;
      LogPrintF();
    }
    objc_msgSend(*(id *)(a1 + 40), "stopMonitoringEventType:", 29, v5);
    *(unsigned char *)(a1 + 75) = 0;
    int v2 = 1;
  }
  uint64_t v3 = 0;
  if (v2)
  {
    if (*(void *)(a1 + 184))
    {
      uint64_t v3 = _APConnectivityHelperDispatchEvent(a1, (void *)0x6D, 0);
      if (v3) {
        APSLogErrorAt();
      }
    }
  }
  return v3;
}

uint64_t _APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStarted(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 80) && !*(void *)(a1 + 48))
  {
    if (gLogCategory_APConnectivityHelper <= 40
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(unsigned char *)(a1 + 80) = 1;
    uint64_t updated = _APConnectivityHelperUpdateInterfaceAddedListener(a1);
    if (updated)
    {
      uint64_t v5 = updated;
      APSLogErrorAt();
      _APConnectivityHelperStopWiFiDeviceAttachmentListener(a1);
      APSLogErrorAt();
      _APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStopped(a1);
      return v5;
    }
    if (CFPrefs_GetInt64())
    {
      CFGetAllocator((CFTypeRef)a1);
      uint64_t v3 = WiFiManagerClientCreate();
      if (v3)
      {
        unsigned int v4 = (const void *)v3;
        WiFiManagerClientSetProperty();
        CFRelease(v4);
      }
      else if (gLogCategory_APConnectivityHelper <= 90 {
             && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
      }
      {
        LogPrintF();
      }
    }
  }
  _APConnectivityHelperTrySettingWiFiDevice(a1);
  return 0;
}

uint64_t _APConnectivityHelperUpdateInterfaceAddedListener(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 80) && !*(unsigned char *)(a1 + 177))
  {
    if (*(unsigned char *)(a1 + 96))
    {
      *(unsigned char *)(a1 + 96) = 0;
      if (gLogCategory_APConnectivityHelper <= 40
        && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      _APConnectivityHelperStopInterfaceAddedRetryTimer(a1);
      [*(id *)(a1 + 40) stopMonitoringEventType:10];
    }
    return 0;
  }
  uint64_t v11 = 0;
  if (APSIsVirtualMachine())
  {
    if (gLogCategory_APConnectivityHelper <= 50
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 96)) {
    return 0;
  }
  *(unsigned char *)(a1 + 96) = 1;
  if (gLogCategory_APConnectivityHelper <= 30
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    uint64_t v10 = a1;
    LogPrintF();
  }
  if (!*(void *)(a1 + 88))
  {
    if (gLogCategory_APConnectivityHelper <= 30
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      uint64_t v10 = a1;
      LogPrintF();
    }
    dispatch_source_t v2 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(a1 + 16));
    *(void *)(a1 + 88) = v2;
    if (v2)
    {
      CFRetain((CFTypeRef)a1);
      uint64_t v3 = *(NSObject **)(a1 + 88);
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 3221225472;
      handler[2] = ___APConnectivityHelperStartInterfaceAddedRetryTimer_block_invoke;
      handler[3] = &__block_descriptor_40_e5_v8__0l;
      handler[4] = a1;
      dispatch_source_set_event_handler(v3, handler);
      unsigned int v4 = *(NSObject **)(a1 + 88);
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      void v12[2] = ___APConnectivityHelperStartInterfaceAddedRetryTimer_block_invoke_2;
      v12[3] = &__block_descriptor_40_e5_v8__0l;
      v12[4] = a1;
      dispatch_source_set_cancel_handler(v4, v12);
      uint64_t v5 = *(NSObject **)(a1 + 88);
      dispatch_time_t v6 = dispatch_time(0, 5000000000);
      dispatch_source_set_timer(v5, v6, 0x77359400uLL, 0x3B9ACA00uLL);
      dispatch_resume(*(dispatch_object_t *)(a1 + 88));
    }
    else
    {
      APSLogErrorAt();
    }
  }
  if (objc_msgSend(*(id *)(a1 + 40), "startMonitoringEventType:error:", 10, &v11, v10)) {
    return 0;
  }
  if (gLogCategory_APConnectivityHelper <= 90
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  _APConnectivityHelperStopInterfaceAddedRetryTimer(a1);
  unsigned int v7 = NSErrorToOSStatus();
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 4294895094;
  }
  APSLogErrorAt();
  return v8;
}

uint64_t _APConnectivityHelperEnsureAWDLDevicePresentListenerStopped(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 177) && !*(unsigned char *)(a1 + 178)) {
    return 0;
  }
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_WORD *)(a1 + 177) = 0;
  _APConnectivityHelperUpdateInterfaceAddedListener(a1);
  if (!*(void *)(a1 + 184)) {
    return 0;
  }
  uint64_t v2 = _APConnectivityHelperDispatchEvent(a1, (void *)0x6B, 0);
  if (v2)
  {
    APSLogErrorAt();
    APSLogErrorAt();
  }
  return v2;
}

void _APConnectivityHelperStopInterfaceAddedRetryTimer(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 88);
  if (v1)
  {
    if (gLogCategory_APConnectivityHelper > 30) {
      goto LABEL_7;
    }
    if (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()) {
      LogPrintF();
    }
    uint64_t v1 = *(NSObject **)(a1 + 88);
    if (v1)
    {
LABEL_7:
      dispatch_source_cancel(v1);
      dispatch_release(v1);
      *(void *)(a1 + 88) = 0;
    }
  }
}

uint64_t _APConnectivityHelperStopWiFiDeviceAttachmentListener(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 80)) {
    return 0;
  }
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(unsigned char *)(a1 + 80) = 0;
  _APConnectivityHelperUpdateInterfaceAddedListener(a1);
  if (!*(void *)(a1 + 184)) {
    return 0;
  }
  uint64_t v2 = _APConnectivityHelperDispatchEvent(a1, (void *)0x65, 0);
  if (v2) {
    APSLogErrorAt();
  }
  return v2;
}

uint64_t _APConnectivityHelperEnsureWiFiPowerListenerStopped(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 78))
  {
    *(unsigned char *)(a1 + 78) = 0;
    int v2 = 1;
  }
  else
  {
    int v2 = 0;
  }
  if (*(unsigned char *)(a1 + 77))
  {
    if (gLogCategory_APConnectivityHelper <= 40
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      uint64_t v5 = a1;
      LogPrintF();
    }
    int v2 = 1;
    objc_msgSend(*(id *)(a1 + 40), "stopMonitoringEventType:", 1, v5);
    *(unsigned char *)(a1 + 77) = 0;
  }
  uint64_t v3 = 0;
  if (v2)
  {
    if (*(void *)(a1 + 184))
    {
      uint64_t v3 = _APConnectivityHelperDispatchEvent(a1, (void *)0x66, 0);
      if (v3)
      {
        APSLogErrorAt();
        APSLogErrorAt();
      }
    }
  }
  return v3;
}

uint64_t _APConnectivityHelperEnsureWiFiNetworkListenerStopped(uint64_t a1)
{
  uint64_t v1 = _APConnectivityHelperStopWiFiNetworkListener(a1);
  if (v1) {
    APSLogErrorAt();
  }
  return v1;
}

uint64_t _APConnectivityHelperEnsureUSBInterfaceListenerStopped(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 112)) {
    return 0;
  }
  uint64_t v1 = _APConnectivityHelperStopUSBInterfaceListener(a1);
  if (v1) {
    APSLogErrorAt();
  }
  return v1;
}

uint64_t _APConnectivityHelperEnsureIPv6AddressesListenerStopped(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 160)) {
    return 0;
  }
  uint64_t v1 = _APConnectivityHelperStopIPv6AddressListener(a1);
  if (v1) {
    APSLogErrorAt();
  }
  return v1;
}

uint64_t _APConnectivityHelperEnsureAWDLSoloSupportListenerStopped(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 138)) {
    return 0;
  }
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    uint64_t v4 = a1;
    LogPrintF();
  }
  objc_msgSend(*(id *)(a1 + 128), "endMonitoring", v4);

  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 138) = 0;
  if (!*(void *)(a1 + 184)) {
    return 0;
  }
  uint64_t v2 = _APConnectivityHelperDispatchEvent(a1, (void *)0x6C, 0);
  if (v2)
  {
    APSLogErrorAt();
    APSLogErrorAt();
  }
  return v2;
}

uint64_t _APConnectivityHelperStopUSBInterfaceListener(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 112)) {
    return 0;
  }
  _APConnectivityHelperStopListeningToDynamicStoreNetworkEntity(a1, (CFStringRef)*MEMORY[0x1E4F41B28]);
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 104));
  *(unsigned char *)(a1 + 112) = 0;
  if (!*(void *)(a1 + 184)) {
    return 0;
  }
  uint64_t v2 = _APConnectivityHelperDispatchEvent(a1, (void *)0x68, 0);
  if (v2) {
    APSLogErrorAt();
  }
  return v2;
}

void _APConnectivityHelperStopListeningToDynamicStoreNetworkEntity(uint64_t a1, CFStringRef entity)
{
  if (*(void *)(a1 + 152))
  {
    CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, (CFStringRef)*MEMORY[0x1E4F41AC8], (CFStringRef)*MEMORY[0x1E4F41AB8], entity);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 152), NetworkInterfaceEntity);
    if (!*(void *)(a1 + 144)) {
      goto LABEL_11;
    }
    if (CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 152)) || *(unsigned char *)(a1 + 72))
    {
      CFArrayRef v4 = (const __CFArray *)CFDictionaryCopyKeys();
      if (!SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 144), 0, v4) && SCError()) {
        SCError();
      }
      if (!NetworkInterfaceEntity) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
    SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(a1 + 144), 0);
    uint64_t v5 = *(const void **)(a1 + 144);
    if (v5)
    {
      CFRelease(v5);
      CFArrayRef v4 = 0;
      *(void *)(a1 + 144) = 0;
      if (!NetworkInterfaceEntity) {
        goto LABEL_15;
      }
    }
    else
    {
LABEL_11:
      CFArrayRef v4 = 0;
      if (!NetworkInterfaceEntity)
      {
LABEL_15:
        if (v4) {
          CFRelease(v4);
        }
        return;
      }
    }
LABEL_14:
    CFRelease(NetworkInterfaceEntity);
    goto LABEL_15;
  }
}

uint64_t _APConnectivityHelperStopIPv6AddressListener(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 160)) {
    return 0;
  }
  _APConnectivityHelperStopListeningToDynamicStoreNetworkEntity(a1, (CFStringRef)*MEMORY[0x1E4F41B18]);
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 120));
  *(unsigned char *)(a1 + 160) = 0;
  if (!*(void *)(a1 + 184)) {
    return 0;
  }
  uint64_t v2 = _APConnectivityHelperDispatchEvent(a1, (void *)0x6A, 0);
  if (v2) {
    APSLogErrorAt();
  }
  return v2;
}

uint64_t _APConnectivityHelperSendAWDLSoloSupportEvent(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 137))
  {
    if (gLogCategory_APConnectivityHelper <= 30
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    int v2 = *(unsigned __int8 *)(a1 + 136);
    CFMutableSetRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFArrayRef v4 = Mutable;
      uint64_t v5 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!v2) {
        uint64_t v5 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(Mutable, @"isAWDLSoloSupported", *v5);
      uint64_t v6 = _APConnectivityHelperDispatchEvent(a1, (void *)8, v4);
      if (v6) {
        APSLogErrorAt();
      }
      CFRelease(v4);
    }
    else
    {
      uint64_t v6 = 4294895096;
      APSLogErrorAt();
      APSLogErrorAt();
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294895095;
  }
  return v6;
}

uint64_t _APConnectivityHelperStartListeningToDynamicStoreNetworkEntity(uint64_t a1, CFStringRef entity, const void *a3)
{
  unsigned int v16 = 0;
  context.version = 0;
  memset(&context.retain, 0, 24);
  context.info = (void *)a1;
  values = 0;
  if (!*(void *)(a1 + 144))
  {
    uint64_t v6 = SCDynamicStoreCreate(0, @"APConnectivityHelper: Network Listener", (SCDynamicStoreCallBack)_APConnectivityHelperHandleDynamicStoreNetworkEntityValueChange, &context);
    *(void *)(a1 + 144) = v6;
    if (!v6)
    {
      if (!SCError())
      {
        unsigned int v16 = -6700;
        goto LABEL_34;
      }
      unsigned int v16 = SCError();
      if (v16) {
        goto LABEL_34;
      }
      uint64_t v6 = *(const __SCDynamicStore **)(a1 + 144);
    }
    if (SCDynamicStoreSetDispatchQueue(v6, *(dispatch_queue_t *)(a1 + 16)))
    {
      unsigned int v16 = 0;
    }
    else
    {
      if (!SCError())
      {
        unsigned int v16 = -6700;
        goto LABEL_34;
      }
      unsigned int v16 = SCError();
      if (v16)
      {
LABEL_34:
        APSLogErrorAt();
        CFArrayRef v9 = 0;
LABEL_35:
        CFArrayRef v12 = 0;
        CFDictionaryRef v11 = 0;
        goto LABEL_36;
      }
    }
  }
  if (!*(void *)(a1 + 152)
    && (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], 0), (*(void *)(a1 + 152) = Mutable) == 0)
    || (CFStringRef NetworkInterfaceEntity = (__CFString *)SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, (CFStringRef)*MEMORY[0x1E4F41AC8], (CFStringRef)*MEMORY[0x1E4F41AB8], entity), (values = NetworkInterfaceEntity) == 0))
  {
    APSLogErrorAt();
    CFArrayRef v9 = 0;
    goto LABEL_49;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 152), NetworkInterfaceEntity, a3);
  CFArrayRef v9 = (const __CFArray *)CFDictionaryCopyKeys();
  if (v16)
  {
    APSLogErrorAt();
    goto LABEL_35;
  }
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  int v10 = SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 144), 0, v9);
  if (v9) {
    CFRelease(v9);
  }
  if (v10)
  {
    unsigned int v16 = 0;
    goto LABEL_24;
  }
  if (!SCError())
  {
    unsigned int v16 = -6700;
    goto LABEL_34;
  }
  unsigned int v16 = SCError();
  if (v16) {
    goto LABEL_34;
  }
LABEL_24:
  CFArrayRef v9 = CFArrayCreate(0, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  if (!v9)
  {
    APSLogErrorAt();
LABEL_49:
    CFArrayRef v12 = 0;
    CFDictionaryRef v11 = 0;
    unsigned int v16 = -72200;
    goto LABEL_36;
  }
  CFDictionaryRef v11 = SCDynamicStoreCopyMultiple(*(SCDynamicStoreRef *)(a1 + 144), 0, v9);
  if (v11)
  {
    CFArrayRef v12 = (const __CFArray *)CFDictionaryCopyKeys();
    if (v12) {
      _APConnectivityHelperHandleDynamicStoreNetworkEntityValueChange(*(void *)(a1 + 144), v12, a1);
    }
  }
  else
  {
    CFArrayRef v12 = 0;
  }
LABEL_36:
  if (values)
  {
    CFRelease(values);
    values = 0;
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v16;
}

uint64_t _APConnectivityHelperHandleUSBNetworkChangedEvent(uint64_t result, const __CFString *a2, CFStringRef theString, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a4 + 112)) {
    return result;
  }
  unsigned int v7 = (const __SCDynamicStore *)result;
  *(void *)buffer = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  if (*(unsigned char *)(a4 + 72) && CFStringHasPrefix(theString, @"APCHTestInterface"))
  {
    if (CFStringHasSuffix(theString, @"USB"))
    {
      uint64_t v8 = 8;
    }
    else if (CFStringHasSuffix(theString, @"DirectLink"))
    {
      uint64_t v8 = 16;
    }
    else
    {
      uint64_t v8 = 2 * (CFStringHasSuffix(theString, @"WiFi") != 0);
    }
  }
  else
  {
    CFStringGetCString(theString, buffer, 17, 0x8000100u);
    uint64_t v8 = 0;
    SocketGetInterfaceInfo();
  }
  CFPropertyListRef v9 = SCDynamicStoreCopyValue(v7, a2);
  if (v9)
  {
    int v10 = v9;
    BOOL v11 = CFDictionaryGetInt64() != 0;
    CFRelease(v10);
  }
  else
  {
    int v12 = SCError();
    if (v12 != 1004)
    {
      if (gLogCategory_APConnectivityHelper > 90)
      {
        BOOL v11 = 0;
        goto LABEL_23;
      }
      int v13 = v12;
      if (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize())
      {
        SCErrorString(v13);
        LogPrintF();
      }
    }
    BOOL v11 = 0;
  }
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_23:
  id result = CFDictionaryContainsKey(*(CFDictionaryRef *)(a4 + 104), theString);
  BOOL v15 = (v8 & 0x18) == 0 || !v11;
  if (result)
  {
    if (v15)
    {
      id result = _APConnectivityHelperHandleUSBInterfaceChange(a4, theString, v8, 0);
      if (result) {
        return APSLogErrorAt();
      }
    }
  }
  else if (!v15)
  {
    id result = _APConnectivityHelperHandleUSBInterfaceChange(a4, theString, v8, 1);
    if (result) {
      return APSLogErrorAt();
    }
  }
  return result;
}

uint64_t _APConnectivityHelperHandleDynamicStoreNetworkEntityValueChange(int a1, CFArrayRef theArray, uint64_t a3)
{
  if (theArray && !*(unsigned char *)(a3 + 200))
  {
    if (*(void *)(a3 + 152))
    {
      CFArrayGetCount(theArray);
      return CFArrayApplyBlock();
    }
  }
  return result;
}

uint64_t _APConnectivityHelperHandleUSBInterfaceChange(uint64_t a1, const void *a2, uint64_t a3, int a4)
{
  uint64_t v4 = 4294895095;
  if (!a2) {
    goto LABEL_18;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v4 = 4294895096;
LABEL_18:
    APSLogErrorAt();
    APSLogErrorAt();
    return v4;
  }
  CFPropertyListRef v9 = Mutable;
  CFDictionarySetValue(Mutable, @"networkInterfaceName", a2);
  CFDictionarySetInt64();
  int v10 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!a4) {
    int v10 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(v9, @"isAddEvent", *v10);
  if (gLogCategory_APConnectivityHelper <= 50
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  BOOL v11 = *(__CFDictionary **)(a1 + 104);
  if (a4) {
    CFDictionarySetValue(v11, a2, v9);
  }
  else {
    CFDictionaryRemoveValue(v11, a2);
  }
  uint64_t v4 = _APConnectivityHelperDispatchEvent(a1, (void *)4, v9);
  if (v4) {
    APSLogErrorAt();
  }
  CFRelease(v9);
  return v4;
}

void _APConnectivityHelperHandleIPv6ChangedEvent(const __SCDynamicStore *a1, const __CFString *a2, const void *a3, uint64_t a4)
{
  CFDictionaryRef v6 = (const __CFDictionary *)SCDynamicStoreCopyValue(a1, a2);
  CFDictionaryRef v7 = v6;
  if (!v6)
  {
    CFArrayRef v9 = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D510]);
    if (v9) {
      goto LABEL_5;
    }
LABEL_9:
    APSLogErrorAt();
    if (!v7) {
      return;
    }
    goto LABEL_20;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v6, @"Addresses");
  if (!Value) {
    goto LABEL_9;
  }
  CFArrayRef v9 = Value;
  CFRetain(Value);
LABEL_5:
  CFTypeID v10 = CFGetTypeID(v9);
  if (v10 != CFArrayGetTypeID()) {
    goto LABEL_23;
  }
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    int v12 = Mutable;
    CFDictionarySetValue(Mutable, @"networkInterfaceName", a3);
    CFDictionarySetValue(v12, @"IPv6Addresses", v9);
    CFIndex Count = CFArrayGetCount(v9);
    int v14 = *(__CFDictionary **)(a4 + 120);
    if (Count) {
      CFDictionarySetValue(v14, a3, v12);
    }
    else {
      CFDictionaryRemoveValue(v14, a3);
    }
    if (_APConnectivityHelperDispatchEvent(a4, (void *)6, v12)) {
      APSLogErrorAt();
    }
    CFRelease(v12);
  }
  else
  {
LABEL_23:
    APSLogErrorAt();
  }
  CFRelease(v9);
  if (v7)
  {
LABEL_20:
    CFRelease(v7);
  }
}

uint64_t APTransportConnectionAggregateProtocolGetProtocolID()
{
  return sAPTransportConnectionAggregateProtocolID;
}

uint64_t registerAPTransportConnectionAggregateProtocolType()
{
  return MEMORY[0x1F40DC660](&kAPTransportConnectionAggregateProtocolDesc, 0, &sAPTransportConnectionAggregateProtocolID);
}

uint64_t APTNANDataSessionIssueReportCreate(const void *a1, const void *a2, CFTypeRef *a3)
{
  if (a1)
  {
    CFTypeID v6 = CFGetTypeID(a1);
    CFTypeID TypeID = CFNumberGetTypeID();
    uint64_t v8 = 0;
    uint64_t v9 = 4294960591;
    if (a2 && v6 == TypeID)
    {
      CFTypeID v10 = CFGetTypeID(a2);
      if (v10 == CFNumberGetTypeID())
      {
        id v11 = objc_alloc_init(MEMORY[0x1E4FB6FB8]);
        uint64_t v8 = v11;
        if (v11)
        {
          [v11 setRtpSequenceNumber:a1];
          [v8 setRtpStartTime:a2];
          uint64_t v9 = 0;
          *a3 = CFRetain(v8);
        }
        else
        {
          uint64_t v9 = 4294960568;
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 4294960591;
  }

  return v9;
}

uint64_t APTransportPackageTCPCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  uint64_t v2 = APTransportPackageTCPCreateWithBBuf(a1, 0, a2);
  if (v2) {
    APSLogErrorAt();
  }
  return v2;
}

uint64_t APTransportPackageTCPCreateWithBBuf(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, CFTypeRef *a3)
{
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef cf = 0;
  APTransportPackageGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6)
  {
    uint64_t v13 = v6;
LABEL_23:
    APSLogErrorAt();
    goto LABEL_13;
  }
  uint64_t DerivedStorage = (CFAllocatorRef **)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = APTransportParcelMake(0x20uLL, 0, DerivedStorage);
  if (v8)
  {
    uint64_t v13 = v8;
    goto LABEL_23;
  }
  if (!a2) {
    goto LABEL_8;
  }
  long long destination = 0u;
  long long v16 = 0u;
  uint64_t v9 = CMBlockBufferCopyDataBytes(a2, 0, 0x20uLL, &destination);
  if (v9)
  {
    uint64_t v13 = v9;
    goto LABEL_23;
  }
  APTransportParcelSetMessageType((uint64_t)*DerivedStorage, bswap32(v16));
  DerivedStorage[1] = (CFAllocatorRef *)bswap64(*((unint64_t *)&destination + 1));
  *((_DWORD *)DerivedStorage + 4) = bswap32(DWORD1(destination));
  DerivedStorage[3] = (CFAllocatorRef *)bswap64(*(unint64_t *)((char *)&v16 + 4));
  *((_DWORD *)DerivedStorage + 8) = bswap32(HIDWORD(v16));
  if (CMBlockBufferGetDataLength(a2) < 0x21) {
    goto LABEL_8;
  }
  Datauint16_t Length = CMBlockBufferGetDataLength(a2);
  uint64_t v11 = CMBlockBufferCreateWithBufferReference(a1, a2, 0x20uLL, DataLength - 32, 0, &blockBufferOut);
  if (v11)
  {
    uint64_t v13 = v11;
    goto LABEL_23;
  }
  uint64_t v12 = APTransportParcelSetMessageData(*DerivedStorage, blockBufferOut);
  if (v12)
  {
    uint64_t v13 = v12;
    goto LABEL_23;
  }
LABEL_8:
  if (gLogCategory_APTransportPackageTCP <= 30
    && (gLogCategory_APTransportPackageTCP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v13 = 0;
  *a3 = cf;
  CFTypeRef cf = 0;
LABEL_13:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

uint64_t APTransportPackageTCPCreateWithMessageSize(uint64_t a1, size_t a2, void *a3)
{
  if (!a2)
  {
    APSLogErrorAt();
    return 4294894936;
  }
  APTransportPackageGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5)
  {
    uint64_t v8 = v5;
LABEL_13:
    APSLogErrorAt();
    return v8;
  }
  uint64_t DerivedStorage = (CFAllocatorRef **)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = APTransportParcelMake(0x20uLL, a2, DerivedStorage);
  if (v7)
  {
    uint64_t v8 = v7;
    goto LABEL_13;
  }
  if (gLogCategory_APTransportPackageTCP <= 30
    && (gLogCategory_APTransportPackageTCP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v8 = 0;
  *a3 = 0;
  return v8;
}

uint64_t APTransportPackageTCPGetHeaderSize(_DWORD *a1)
{
  if (a1)
  {
    *a1 = 32;
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

uint64_t APTransportPackageTCPGetPayloadSize(OpaqueCMBlockBuffer *a1, _DWORD *a2)
{
  size_t v6 = 0;
  dataPointerOut = 0;
  if (a2 && a1)
  {
    uint64_t DataPointer = CMBlockBufferGetDataPointer(a1, 0, &v6, 0, &dataPointerOut);
    if (DataPointer)
    {
      uint64_t v4 = DataPointer;
    }
    else
    {
      if (v6 == 32)
      {
        uint64_t v4 = 0;
        *a2 = bswap32(*(_DWORD *)dataPointerOut) - 32;
        return v4;
      }
      uint64_t v4 = 4294894936;
    }
    APSLogErrorAt();
    return v4;
  }
  APSLogErrorAt();
  return APSSignalErrorAt();
}

void tcppackage_Finalize()
{
  uint64_t DerivedStorage = (void **)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportPackageTCP <= 30
    && (gLogCategory_APTransportPackageTCP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APTransportParcelFree(*DerivedStorage);
  *uint64_t DerivedStorage = 0;
}

__CFString *tcppackage_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTransportPackageTCP %p>", a1);
  return Mutable;
}

const void *tcppackage_CopyMessageData()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MessageCFDataRef Data = (const void *)APTransportParcelGetMessageData(*DerivedStorage);
  uint64_t v2 = MessageData;
  if (MessageData) {
    CFRetain(MessageData);
  }
  return v2;
}

uint64_t tcppackage_SetMessageData(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  uint64_t v3 = *(void **)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageData(v3, a2);
}

uint64_t tcppackage_GetMessageType()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelGetMessageType(v0);
}

uint64_t tcppackage_SetMessageType(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageType(v3, a2);
}

uint64_t tcppackage_GetReplyToken()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 24);
}

uint64_t tcppackage_SetReplyToken(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(void *)(result + 24) = a2;
  return result;
}

CMBlockBufferRef tcppackage_CreateBBufRepresentation()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef v6 = 0;
  unsigned int MessageType = APTransportParcelGetMessageType(*(void *)DerivedStorage);
  MessageCFDataRef Data = (OpaqueCMBlockBuffer *)APTransportParcelGetMessageData(*(void *)DerivedStorage);
  Datauint16_t Length = CMBlockBufferGetDataLength(MessageData);
  unsigned int v4 = bswap32(*(_DWORD *)(DerivedStorage + 16));
  v7[0] = bswap32(DataLength + 32);
  v7[1] = v4;
  unint64_t v8 = bswap64(*(void *)(DerivedStorage + 8));
  unsigned int v9 = bswap32(MessageType);
  unint64_t v10 = bswap64(*(void *)(DerivedStorage + 24));
  unsigned int v11 = bswap32(*(_DWORD *)(DerivedStorage + 32));
  APTransportParcelCreateBBufRepresentation(*(void *)DerivedStorage, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], v7, &v6);
  return v6;
}

uint64_t tcppackage_SetGroupID(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t tcppackage_GetGroupID()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t tcppackage_SetPackageType(uint64_t a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t tcppackage_GetPackageType()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 16);
}

uint64_t tcppackage_SetReplyStatus(uint64_t a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t tcppackage_GetReplyStatus()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 32);
}

uint64_t APTConnectionListenerGetTypeID()
{
  if (APTConnectionListenerGetTypeID_gAPTConnectionListenerInitOnce != -1) {
    dispatch_once_f(&APTConnectionListenerGetTypeID_gAPTConnectionListenerInitOnce, &APTConnectionListenerGetTypeID_gAPTConnectionListenerTypeID, (dispatch_function_t)connectionlistener_getTypeID);
  }
  return APTConnectionListenerGetTypeID_gAPTConnectionListenerTypeID;
}

uint64_t connectionlistener_getTypeID(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APTConnectionListenerCreate(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a8 && a3 && a7)
  {
    if (APTConnectionListenerGetTypeID_gAPTConnectionListenerInitOnce != -1) {
      dispatch_once_f(&APTConnectionListenerGetTypeID_gAPTConnectionListenerInitOnce, &APTConnectionListenerGetTypeID_gAPTConnectionListenerTypeID, (dispatch_function_t)connectionlistener_getTypeID);
    }
    uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v17 = Instance;
      Instance[4] = 0u;
      Instance[5] = 0u;
      Instance[2] = 0u;
      Instance[3] = 0u;
      Instance[1] = 0u;
      SNPrintF();
      dispatch_queue_t v18 = dispatch_queue_create(label, 0);
      *((void *)v17 + 2) = v18;
      if (v18)
      {
        uint64_t v19 = 0;
        *((_DWORD *)v17 + 6) = a1;
        *((_DWORD *)v17 + 7) = a2;
        *((void *)v17 + 4) = a3;
        *((void *)v17 + 5) = a4;
        *((void *)v17 + 6) = a5;
        *((void *)v17 + 7) = a6;
        *((void *)v17 + 8) = a7;
        *a8 = v17;
      }
      else
      {
        APSLogErrorAt();
        uint64_t v19 = APSSignalErrorAt();
        CFRelease(v17);
      }
    }
    else
    {
      APSLogErrorAt();
      return 4294895436;
    }
    return v19;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

uint64_t APTConnectionListenerResume(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v2, (dispatch_function_t)connectionlistener_resumeInternal);
  return v3;
}

void connectionlistener_resumeInternal(_DWORD *a1)
{
  uint64_t v2 = *(void *)a1;
  if (*(unsigned char *)(*(void *)a1 + 89))
  {
    int v4 = -71862;
  }
  else if (*(unsigned char *)(v2 + 88))
  {
    int v4 = 0;
  }
  else
  {
    int v3 = ServerSocketPairOpen();
    if (v3)
    {
      int v5 = v3;
      APSLogErrorAt();
      int v4 = v5;
    }
    else
    {
      if (gLogCategory_APTConnectionListener <= 50
        && (gLogCategory_APTConnectionListener != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      int v4 = 0;
    }
    free(0);
    free(0);
    if (v4) {
      APSLogErrorAt();
    }
    else {
      *(unsigned char *)(v2 + 88) = 1;
    }
  }
  a1[2] = v4;
}

uint64_t APTConnectionListenerGetListeningPort(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1;
  uint64_t v5 = 0xFFFFFFFFLL;
  if (a2)
  {
    dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v4, (dispatch_function_t)connectionlistener_getListeningPortInternal);
    uint64_t result = HIDWORD(v5);
    if (HIDWORD(v5))
    {
      APSLogErrorAt();
      return HIDWORD(v5);
    }
    else
    {
      *a2 = v5;
    }
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  return result;
}

_DWORD *connectionlistener_getListeningPortInternal(_DWORD *result)
{
  uint64_t v1 = result;
  int v2 = -71863;
  uint64_t v3 = *(void *)result;
  if (*(unsigned char *)(*(void *)result + 89))
  {
    int v2 = -71862;
  }
  else if (*(unsigned char *)(v3 + 88))
  {
    int v2 = 0;
    result[2] = *(_DWORD *)(v3 + 24);
  }
  else
  {
    uint64_t result = (_DWORD *)APSLogErrorAt();
  }
  v1[3] = v2;
  return result;
}

uint64_t APTConnectionListenerInvalidate(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v2, (dispatch_function_t)connectionlistener_invalidateInternal);
  return v3;
}

void connectionlistener_invalidateInternal(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  if (*(unsigned char *)(*(void *)a1 + 89))
  {
    int v3 = -71862;
  }
  else
  {
    connectionlistener_cleanUp(*(void *)a1);
    *(unsigned char *)(v2 + 89) = 1;
    if (*(void *)(v2 + 48))
    {
      CFRetain((CFTypeRef)v2);
      APSDispatchAsyncFHelper();
    }
    int v3 = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
}

void connectionlistener_Finalize(uint64_t a1)
{
  connectionlistener_cleanUp(a1);
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 16) = 0;
  }
}

void connectionlistener_cleanUp(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 72));
    dispatch_release(v2);
    *(void *)(a1 + 72) = 0;
  }
  int v3 = *(NSObject **)(a1 + 80);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 80));
    dispatch_release(v3);
    *(void *)(a1 + 80) = 0;
  }
}

void connectionlistener_listenerSocketEventHandler(uint64_t a1)
{
  uint64_t v1 = *(const void **)a1;
  if (!*(unsigned char *)(*(void *)a1 + 89))
  {
    if (SocketAccept())
    {
      APSLogErrorAt();
      if (gLogCategory_APTConnectionListener <= 90
        && (gLogCategory_APTConnectionListener != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      if (gLogCategory_APTConnectionListener <= 40
        && (gLogCategory_APTConnectionListener != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      int v2 = APSNetworkAddressCreateWithSocketAddr();
      if (v2)
      {
        APSLogErrorAt();
      }
      else
      {
        CFRetain(v1);
        CFRetain(0);
        APSDispatchAsyncFHelper();
      }
      if (v2) {
        APSLogErrorAt();
      }
    }
  }
}

void connectionlistener_listenerSocketCancelHandler(_DWORD *a1)
{
  int v2 = a1[2];
  if ((v2 & 0x80000000) == 0 && close(v2) && *__error()) {
    __error();
  }
  free(a1);
}

void connectionlistener_deferCallConnectedCallback(uint64_t a1)
{
  (*(void (**)(void, void, void, void))(a1 + 24))(*(void *)a1, *(void *)(a1 + 32), *(unsigned int *)(a1 + 8), *(void *)(a1 + 16));
  CFRelease(*(CFTypeRef *)(a1 + 16));
  int v2 = *(const void **)a1;
  CFRelease(v2);
}

void connectionlistener_deferCallInvalidatedCallback(uint64_t a1)
{
  (*(void (**)(void, void))(a1 + 8))(*(void *)a1, *(void *)(a1 + 16));
  int v2 = *(const void **)a1;
  CFRelease(v2);
}

uint64_t APTransportKeepAliveControllerGetClassID()
{
  if (APTransportKeepAliveControllerGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&APTransportKeepAliveControllerGetClassID_sRegisterOnce, &APTransportKeepAliveControllerGetClassID_sClassID, (dispatch_function_t)APTransportKeepAliveControllerGetClassIDCallback);
  }
  return APTransportKeepAliveControllerGetClassID_sClassID;
}

uint64_t APTransportKeepAliveControllerGetClassIDCallback(uint64_t a1)
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&APTransportKeepAliveControllerGetClassIDCallback_sClassDesc, ClassID, 1, a1);
}

CFStringRef keepAliveController_copyFormattingDesc()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[APTransportKeepAliveController]");
}

uint64_t APTransportConnectionTCPUnbufferedNWCreate(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a6)
  {
    APSLogErrorAt();
    return 4294894974;
  }
  APTransportConnectionGetClassID();
  uint64_t v9 = CMDerivedObjectCreate();
  if (v9)
  {
    uint64_t v19 = v9;
    APSLogErrorAt();
    uint64_t v17 = 0;
    goto LABEL_40;
  }
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (gAPTransportConnectionTCPUnbufferedNWGutsInitOnce != -1) {
    dispatch_once_f(&gAPTransportConnectionTCPUnbufferedNWGutsInitOnce, 0, (dispatch_function_t)_APTransportConnectionTCPUnbufferedNWGutsGetTypeID);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  *uint64_t DerivedStorage = (uint64_t)Instance;
  if (!Instance)
  {
    APSLogErrorAt();
    uint64_t v17 = 0;
    uint64_t v19 = 4294960568;
    goto LABEL_40;
  }
  Instance[21] = 0u;
  Instance[22] = 0u;
  Instance[19] = 0u;
  Instance[20] = 0u;
  Instance[17] = 0u;
  Instance[18] = 0u;
  Instance[15] = 0u;
  Instance[16] = 0u;
  Instance[13] = 0u;
  Instance[14] = 0u;
  Instance[11] = 0u;
  Instance[12] = 0u;
  Instance[9] = 0u;
  Instance[10] = 0u;
  Instance[7] = 0u;
  Instance[8] = 0u;
  Instance[5] = 0u;
  Instance[6] = 0u;
  Instance[3] = 0u;
  Instance[4] = 0u;
  Instance[1] = 0u;
  Instance[2] = 0u;
  uint64_t v12 = *DerivedStorage;
  *(void *)(v12 + 16) = 0;
  *(_DWORD *)(v12 + 24) = a3;
  *(unsigned char *)(v12 + 28) = 0;
  if (a5)
  {
    int Int64Ranged = CFDictionaryGetInt64Ranged();
    uint64_t Int64 = CFDictionaryGetInt64();
    *(unsigned char *)(v12 + 29) = Int64 != 0;
    if (Int64
      && gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
      && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(unsigned char *)(v12 + 30) = CFDictionaryGetInt64() != 0;
    if (CFDictionaryGetInt64()) {
      BOOL v15 = *(unsigned char *)(v12 + 29) == 0;
    }
    else {
      BOOL v15 = 0;
    }
    *(unsigned char *)(v12 + 31) = v15;
    if (CFDictionaryGetInt64()) {
      BOOL v16 = *(unsigned char *)(v12 + 29) == 0;
    }
    else {
      BOOL v16 = 0;
    }
    *(unsigned char *)(v12 + 32) = v16;
  }
  else
  {
    int Int64Ranged = 0;
  }
  if (!IsAppleInternalBuild())
  {
    uint64_t v17 = 0;
    goto LABEL_25;
  }
  uint64_t v17 = (const void *)CFStringCreateF();
  if (!v17)
  {
    uint64_t v19 = 4294894973;
    goto LABEL_53;
  }
  uint64_t v18 = APSStallMonitorActivityCreate();
  if (!v18)
  {
LABEL_25:
    uint64_t v20 = FigSimpleMutexCreate();
    *(void *)(v12 + 48) = v20;
    if (v20)
    {
      uint64_t v21 = FigSimpleMutexCreate();
      *(void *)(v12 + 248) = v21;
      if (v21)
      {
        uint64_t v22 = APTransportConnectionCopyNWContextForType(Int64Ranged);
        *(void *)(v12 + 320) = v22;
        if (v22)
        {
          SNPrintF();
          initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
          dispatch_queue_t v24 = dispatch_queue_create(label, initially_inactive);
          *(void *)(v12 + 328) = v24;
          if (v24)
          {
            nw_queue_context_target_dispatch_queue();
            dispatch_activate(*(dispatch_object_t *)(v12 + 328));
            *(unsigned char *)(v12 + 356) = 1;
            uint64_t v25 = APSFlatQueueCreate();
            if (v25)
            {
              uint64_t v19 = v25;
            }
            else
            {
              if (!*(unsigned char *)(v12 + 32) || (uint64_t v26 = APSFlatQueueCreate(), !v26))
              {
                if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
                  && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
                {
                  LogPrintF();
                }
                if (*(unsigned char *)(v12 + 30)) {
                  int v27 = 4;
                }
                else {
                  int v27 = 2;
                }
                APTTrafficMetricsCreate(&gLogCategory_APTransportConnectionTCPUnbufferedNW, 0, (uint64_t *)(v12 + 360), v27);
                uint64_t v19 = 0;
                *a6 = 0;
                goto LABEL_40;
              }
              uint64_t v19 = v26;
            }
          }
          else
          {
            uint64_t v19 = 4294894973;
          }
        }
        else
        {
          uint64_t v19 = 4294894973;
        }
      }
      else
      {
        uint64_t v19 = 4294894973;
      }
    }
    else
    {
      uint64_t v19 = 4294894973;
    }
    goto LABEL_53;
  }
  uint64_t v19 = v18;
LABEL_53:
  APSLogErrorAt();
LABEL_40:
  if (v17) {
    CFRelease(v17);
  }
  return v19;
}

uint64_t tcpunbufnwTrackingWindowItem_Copy(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5 = *(const void **)(a2 + 8);
  if (v5) {
    CFRetain(v5);
  }
  *a3 = *(_OWORD *)a2;
  return 0;
}

uint64_t tcpunbufnwTrackingWindowItem_Free(uint64_t a1, uint64_t a2)
{
  int v2 = *(const void **)(a2 + 8);
  if (v2) {
    CFRelease(v2);
  }
  return 0;
}

uint64_t tcpunbufnw_Invalidate()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  tcpunbufnwGuts_invalidate(*DerivedStorage);
  return 0;
}

void tcpunbufnw_Finalize()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    tcpunbufnwGuts_invalidate(*DerivedStorage);
    CFRelease((CFTypeRef)*DerivedStorage);
    *uint64_t DerivedStorage = 0;
  }
}

uint64_t tcpunbufnw_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = *(void *)DerivedStorage;
  pthread_mutex_lock(*(pthread_mutex_t **)(*(void *)DerivedStorage + 48));
  if (CFEqual(a2, @"LastDeliveredPackage"))
  {
    if (*(unsigned char *)(v7 + 32))
    {
      tcpunbufnwGuts_updatePackageTrackingInternal(v7, 0, 0);
      CFTypeRef v8 = *(CFTypeRef *)(v7 + 232);
      if (v8) {
        CFTypeRef v8 = CFRetain(v8);
      }
      uint64_t v9 = 0;
      *a4 = (uint64_t)v8;
    }
    else
    {
      uint64_t v9 = 4294954509;
    }
    goto LABEL_16;
  }
  if (CFEqual(a2, @"MaxPackageSize"))
  {
    uint64_t v16 = 0;
    unint64_t v10 = *(uint64_t (**)(uint64_t *))(v7 + 144);
    if (!v10)
    {
      APSLogErrorAt();
      uint64_t v9 = 4294894969;
      goto LABEL_16;
    }
    uint64_t v11 = v10(&v16);
    if (v11)
    {
      uint64_t v9 = v11;
      goto LABEL_28;
    }
    uint64_t Int64 = CFNumberCreateInt64();
    *a4 = Int64;
    if (!Int64)
    {
      uint64_t v9 = 4294894973;
LABEL_28:
      APSLogErrorAt();
      goto LABEL_16;
    }
LABEL_15:
    uint64_t v9 = 0;
    goto LABEL_16;
  }
  if (CFEqual(a2, @"LocalNetworkPort"))
  {
    if (!*(unsigned char *)(v7 + 30))
    {
      APSLogErrorAt();
      uint64_t v9 = 4294894975;
      goto LABEL_16;
    }
    uint64_t v13 = *(NSObject **)(v7 + 168);
    if (!v13)
    {
      APSLogErrorAt();
      uint64_t v9 = 4294894968;
      goto LABEL_16;
    }
    nw_listener_get_port(v13);
    uint64_t v14 = CFNumberCreateInt64();
    *a4 = v14;
    if (!v14)
    {
      uint64_t v9 = 4294894973;
      goto LABEL_28;
    }
    goto LABEL_15;
  }
  if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 30
    && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v9 = 4294954512;
LABEL_16:
  pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 48));
  return v9;
}

uint64_t tcpunbufnw_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  unsigned int v33 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(void *)DerivedStorage;
  pthread_mutex_lock(*(pthread_mutex_t **)(*(void *)DerivedStorage + 48));
  if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 30
    && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!CFEqual(a2, @"PackageType"))
  {
    if (CFEqual(a2, @"RemoteNetworkIPAddress"))
    {
      if (*(unsigned char *)(v6 + 56)) {
        goto LABEL_83;
      }
      if (a3)
      {
        CFTypeID v13 = CFGetTypeID(a3);
        if (v13 == APSNetworkAddressGetTypeID())
        {
          APSNetworkAddressGetSocketAddr();
          *(_OWORD *)(v6 + 64) = v31[0];
          *(_OWORD *)(v6 + 76) = *(_OWORD *)((char *)v31 + 12);
LABEL_27:
          SockAddrSetPort();
          goto LABEL_64;
        }
      }
    }
    else if (CFEqual(a2, @"RemoteNetworkPort"))
    {
      if (*(unsigned char *)(v6 + 56)) {
        goto LABEL_83;
      }
      if (a3)
      {
        CFTypeID v17 = CFGetTypeID(a3);
        if (v17 == CFNumberGetTypeID())
        {
          *(_DWORD *)(v6 + 92) = CFGetInt64Ranged();
          goto LABEL_27;
        }
      }
    }
    else if (CFEqual(a2, @"BoundInterfaceIndex"))
    {
      if (*(unsigned char *)(v6 + 56)) {
        goto LABEL_83;
      }
      if (a3)
      {
        CFTypeID v18 = CFGetTypeID(a3);
        if (v18 == CFNumberGetTypeID())
        {
          *(_DWORD *)(v6 + 96) = CFGetInt64Ranged();
          goto LABEL_64;
        }
      }
    }
    else if (CFEqual(a2, @"BoundLocalNetworkPort"))
    {
      if (*(unsigned char *)(v6 + 30))
      {
        if (*(unsigned char *)(v6 + 56))
        {
LABEL_83:
          APSLogErrorAt();
          int v29 = -72342;
LABEL_88:
          unsigned int v33 = v29;
          goto LABEL_64;
        }
        if (a3)
        {
          CFTypeID v19 = CFGetTypeID(a3);
          if (v19 == CFNumberGetTypeID())
          {
            *(_WORD *)(v6 + 100) = CFGetInt64Ranged();
            goto LABEL_64;
          }
        }
      }
    }
    else if (CFEqual(a2, @"QualityOfService"))
    {
      if (a3)
      {
        CFTypeID v20 = CFGetTypeID(a3);
        if (v20 == CFNumberGetTypeID())
        {
          int v21 = CFGetInt64Ranged();
          if (*(_DWORD *)(v6 + 208) != v21)
          {
            *(_DWORD *)(v6 + 208) = v21;
            int TrafficClassForSocketQoS = APTransportConnectionGetTrafficClassForSocketQoS(v21);
            if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
              && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            if (TrafficClassForSocketQoS != *(_DWORD *)(v6 + 212))
            {
              *(_DWORD *)(v6 + 212) = TrafficClassForSocketQoS;
              if (*(void *)(v6 + 184)) {
                nw_connection_reset_traffic_class();
              }
            }
          }
          goto LABEL_64;
        }
      }
    }
    else if (CFEqual(a2, @"BBufBackingAllocator"))
    {
      if (a3)
      {
        CFTypeID v23 = CFGetTypeID(a3);
        if (v23 == CFAllocatorGetTypeID())
        {
          if (!*(unsigned char *)(v6 + 56))
          {
            dispatch_queue_t v24 = *(const void **)(v6 + 152);
            *(void *)(v6 + 152) = a3;
            CFRetain(a3);
            if (v24) {
              CFRelease(v24);
            }
            goto LABEL_64;
          }
          goto LABEL_83;
        }
      }
    }
    else
    {
      if (!CFEqual(a2, @"ShouldReceivePackages"))
      {
        if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 30
          && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_64;
      }
      if (a3)
      {
        CFTypeID v25 = CFGetTypeID(a3);
        if (v25 == CFBooleanGetTypeID())
        {
          int Value = CFBooleanGetValue((CFBooleanRef)a3);
          if (!atomic_exchange((atomic_uchar *volatile)(v6 + 356), Value) && Value)
          {
            CFRetain((CFTypeRef)v6);
            int v27 = *(NSObject **)(v6 + 328);
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 0x40000000;
            block[2] = __tcpunbufnw_SetProperty_block_invoke;
            block[3] = &__block_descriptor_tmp_17_0;
            block[4] = v6;
            dispatch_async(v27, block);
          }
          goto LABEL_64;
        }
      }
    }
    APSLogErrorAt();
    int v29 = -72322;
    goto LABEL_88;
  }
  BOOL v32 = 0;
  memset(v31, 0, sizeof(v31));
  if (*(unsigned char *)(v6 + 56)) {
    goto LABEL_83;
  }
  if (!a3)
  {
    int v12 = -72322;
    goto LABEL_77;
  }
  if (CFEqual(a3, @"RTPBuffered"))
  {
    int HeaderSize = APTPackageRTPBufferedGetHeaderSize(v31);
    CFTypeRef v8 = APTPackageRTPBufferedGetMaxPayloadSize;
    uint64_t v9 = APTPackageRTPBufferedGetPayloadSize;
    unint64_t v10 = APTPackageRTPBufferedCreateWithBBuf;
    uint64_t v11 = APTPackageRTPBufferedCreate;
    if (HeaderSize)
    {
      int v12 = HeaderSize;
LABEL_77:
      APSLogErrorAt();
      goto LABEL_29;
    }
  }
  else
  {
    if (!CFEqual(a3, @"BufferedAPAP"))
    {
      int v12 = -72322;
LABEL_29:
      unsigned int v33 = v12;
      APSLogErrorAt();
      goto LABEL_64;
    }
    int v14 = APTransportPackageBufferedAPAPGetHeaderSize(v31);
    CFTypeRef v8 = APTransportPackageBufferedAPAPGetMaxPayloadSize;
    uint64_t v9 = APTransportPackageBufferedAPAPGetPayloadSize;
    unint64_t v10 = APTransportPackageBufferedAPAPCreateWithBBuf;
    uint64_t v11 = APTransportPackageBufferedAPAPCreate;
    if (v14)
    {
      int v12 = v14;
      goto LABEL_77;
    }
  }
  *((void *)&v31[0] + 1) = v11;
  *(void *)&v31[1] = v10;
  *((void *)&v31[1] + 1) = v9;
  BOOL v32 = v8;
  if (!LODWORD(v31[0]))
  {
    int v12 = -72322;
    goto LABEL_77;
  }
  unsigned int v33 = 0;
  BOOL v15 = *(const void **)(v6 + 104);
  *(void *)(v6 + 104) = a3;
  CFRetain(a3);
  if (v15) {
    CFRelease(v15);
  }
  long long v16 = v31[1];
  *(_OWORD *)(v6 + 112) = v31[0];
  *(_OWORD *)(v6 + 128) = v16;
  *(void *)(v6 + 144) = v32;
LABEL_64:
  pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 48));
  return v33;
}

uint64_t tcpunbufnwGuts_invalidate(uint64_t a1)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 248));
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
  tcpunbufnwGuts_invalidateInternal(a1);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
  int v2 = *(pthread_mutex_t **)(a1 + 248);
  return pthread_mutex_unlock(v2);
}

void tcpunbufnwGuts_invalidateInternal(uint64_t a1)
{
  if (!atomic_exchange((atomic_uchar *volatile)(a1 + 28), 1u))
  {
    if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
      && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if ((*(_DWORD *)(a1 + 240) | 2) != 6)
    {
      tcpunbufnwGuts_updateStatusInternal(a1, 6, 0);
    }
  }
}

void tcpunbufnwGuts_updateStatusInternal(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v4 = *(_DWORD *)(a1 + 240);
  if (v4 == a2) {
    return;
  }
  if (v4 == 4 || v4 == 6)
  {
    APSLogErrorAt();
    return;
  }
  if (a3) {
    int v7 = 90;
  }
  else {
    int v7 = 50;
  }
  if (v7 >= gLogCategory_APTransportConnectionTCPUnbufferedNW)
  {
    if (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1)
    {
LABEL_9:
      APTransportConnectionGetStatusString(v4);
      APTransportConnectionGetStatusString(a2);
      LogPrintF();
      goto LABEL_11;
    }
    if (_LogCategory_Initialize())
    {
      unsigned int v4 = *(_DWORD *)(a1 + 240);
      goto LABEL_9;
    }
  }
LABEL_11:
  *(_DWORD *)(a1 + 240) = a2;
  if (a2 == 5) {
    goto LABEL_20;
  }
  CFTypeRef v8 = *(NSObject **)(a1 + 184);
  if (v8)
  {
    nw_connection_cancel(v8);
  }
  else
  {
    uint64_t v9 = *(NSObject **)(a1 + 176);
    if (v9) {
      nw_connection_group_cancel(v9);
    }
    unint64_t v10 = *(NSObject **)(a1 + 168);
    if (v10) {
      nw_listener_cancel(v10);
    }
  }
  if (!a3) {
LABEL_20:
  }
    uint64_t Int64 = 0;
  else {
    uint64_t Int64 = (void *)CFNumberCreateInt64();
  }
  if (tcpunbufnwGuts_callEventCallbackInternal(a1, a2, Int64))
  {
    APSLogErrorAt();
    if (!Int64) {
      return;
    }
  }
  else if (!Int64)
  {
    return;
  }
  CFRelease(Int64);
}

uint64_t tcpunbufnwGuts_callEventCallbackInternal(uint64_t a1, uint64_t a2, void *a3)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  int v3 = atomic_load((unsigned __int8 *)(a1 + 28));
  if (v3 || !*(void *)(a1 + 288)) {
    return 0;
  }
  uint64_t Int64 = CFNumberCreateInt64();
  if (Int64)
  {
    int v7 = (void *)Int64;
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    values[0] = v7;
    values[1] = a3;
    if (a3) {
      CFIndex v9 = 2;
    }
    else {
      CFIndex v9 = 1;
    }
    CFArrayRef v10 = CFArrayCreate(v8, (const void **)values, v9, MEMORY[0x1E4F1D510]);
    if (v10)
    {
      CFArrayRef v11 = v10;
      uint64_t v12 = CFArrayEnsureCreatedAndAppend();
      if (v12) {
        APSLogErrorAt();
      }
      else {
        tcpunbufnwGuts_drainEventQueueAsyncOnCallbackQueue((const void *)a1, *(NSObject **)(a1 + 304));
      }
      CFRelease(v7);
      CFArrayRef v13 = v11;
    }
    else
    {
      uint64_t v12 = 4294894973;
      APSLogErrorAt();
      CFArrayRef v13 = (CFArrayRef)v7;
    }
    CFRelease(v13);
  }
  else
  {
    uint64_t v12 = 4294894973;
    APSLogErrorAt();
  }
  return v12;
}

void tcpunbufnwGuts_drainEventQueueAsyncOnCallbackQueue(const void *a1, NSObject *a2)
{
  CFRetain(a1);
  dispatch_retain(a2);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = __tcpunbufnwGuts_drainEventQueueAsyncOnCallbackQueue_block_invoke;
  void v4[3] = &__block_descriptor_tmp_10;
  v4[4] = a1;
  v4[5] = a2;
  dispatch_async(a2, v4);
}

void __tcpunbufnwGuts_drainEventQueueAsyncOnCallbackQueue_block_invoke(uint64_t a1)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(*(void *)(a1 + 32) + 248));
  int v2 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 28));
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v2)
  {
    if (*(void *)(v3 + 312))
    {
      if (*(void *)(v3 + 304) == *(void *)(a1 + 40))
      {
        CFArrayGetCount(*(CFArrayRef *)(v3 + 312));
        CFArrayApplyBlock();
        uint64_t v3 = *(void *)(a1 + 32);
        unsigned int v4 = *(const void **)(v3 + 312);
        if (v4)
        {
          CFRelease(v4);
          *(void *)(*(void *)(a1 + 32) + 312) = 0;
          uint64_t v3 = *(void *)(a1 + 32);
        }
      }
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 248));
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t __tcpunbufnwGuts_drainEventQueueAsyncOnCallbackQueue_block_invoke_2(uint64_t a1, CFArrayRef theArray)
{
  CFArrayGetValueAtIndex(theArray, 0);
  uint64_t v3 = CFGetInt64();
  uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
  uint64_t v5 = *(void *)(a1 + 32);
  int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 288);
  uint64_t v6 = *(void *)(v5 + 296);
  return v7(v3, ValueAtIndex, v6);
}

uint64_t tcpunbufnwGuts_updatePackageTrackingInternal(uint64_t result, uint64_t a2, int a3)
{
  if (!atomic_load((unsigned __int8 *)(result + 28)))
  {
    uint64_t v4 = result;
    if (*(_DWORD *)(result + 240) == 5)
    {
      if (a2)
      {
        APSFlatQueueEnqueue();
        *(_DWORD *)(v4 + 224) += a3;
      }
      uint64_t result = APSFlatQueueIsEmpty();
      if (!result)
      {
        nw_tcp_get_available_send_buffer(*(nw_protocol_metadata_t *)(v4 + 200));
        if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 30
          && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        return APSFlatQueueDequeueWhileB();
      }
    }
  }
  return result;
}

uint64_t __tcpunbufnwGuts_updatePackageTrackingInternal_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 - *(_DWORD *)(a1 + 40) > 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(const void **)(v2 + 232);
  uint64_t v4 = *(const void **)(a2 + 8);
  *(void *)(v2 + 232) = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (v3) {
    CFRelease(v3);
  }
  return 1;
}

void tcpunbufnwGuts_connectionReceivePackages(CFTypeRef cf)
{
  if (!atomic_load((unsigned __int8 *)cf + 28) && *((_DWORD *)cf + 84) == 3)
  {
    if (atomic_load((unsigned __int8 *)cf + 356))
    {
      if (!*((unsigned char *)cf + 357))
      {
        *((unsigned char *)cf + 357) = 1;
        CFRetain(cf);
        APTTrafficMetricsMessageReadStarted(*((void *)cf + 45));
        uint64_t v4 = *((void *)cf + 23);
        uint32_t v5 = *((_DWORD *)cf + 28);
        completion[0] = MEMORY[0x1E4F143A8];
        completion[1] = 0x40000000;
        completion[2] = __tcpunbufnwGuts_connectionReceivePackages_block_invoke;
        completion[3] = &__block_descriptor_tmp_20_0;
        completion[4] = cf;
        nw_connection_receive(v4, v5, v5, completion);
      }
    }
  }
}

void __tcpunbufnwGuts_connectionReceivePackages_block_invoke(uint64_t a1, int a2, NSObject *a3, int a4, nw_error_t error)
{
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 360);
  if (error) {
    nw_error_get_error_code(error);
  }
  APTTrafficMetricsMessageReadFinished(v9);
  uint64_t v10 = *(void *)(a1 + 32);
  dataPointerOut = 0;
  maximum_CFIndex length = 0;
  if (tcpunbufnwGuts_connectionHandlePotentialDisconnect(v10, a3, a4, error))
  {
    APTTrafficMetricsMessageProcessed(*(void *)(v10 + 360));
    goto LABEL_10;
  }
  OSStatus DataPointer = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(v10 + 192), 0, 0, 0, &dataPointerOut);
  if (DataPointer)
  {
    int v15 = DataPointer;
LABEL_15:
    APSLogErrorAt();
    APTTrafficMetricsMessageProcessed(*(void *)(v10 + 360));
    tcpunbufnwGuts_updateStatus(v10, v15);
    goto LABEL_10;
  }
  int v12 = APSDispatchDataCopyBytes();
  if (v12)
  {
    int v15 = v12;
    goto LABEL_15;
  }
  int v13 = (*(uint64_t (**)(void, uint32_t *))(v10 + 136))(*(void *)(v10 + 192), &maximum_length);
  if (v13)
  {
    int v15 = v13;
    goto LABEL_15;
  }
  if (maximum_length)
  {
    CFRetain((CFTypeRef)v10);
    APTTrafficMetricsMessageReadStarted(*(void *)(v10 + 360));
    int v14 = *(NSObject **)(v10 + 184);
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 0x40000000;
    v16[2] = __tcpunbufnwGuts_connectionHandlePackageHeader_block_invoke;
    v16[3] = &__block_descriptor_tmp_21_0;
    v16[4] = v10;
    void v16[5] = error;
    nw_connection_receive(v14, maximum_length, maximum_length, v16);
  }
  else
  {
    tcpunbufnwGuts_connectionHandlePackagePayload(v10, MEMORY[0x1E4F14410], 0, 1, 0);
  }
LABEL_10:
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

BOOL tcpunbufnwGuts_connectionHandlePotentialDisconnect(uint64_t a1, nw_content_context_t context, int a3, nw_error_t error)
{
  int v4 = atomic_load((unsigned __int8 *)(a1 + 28));
  if (v4 || *(_DWORD *)(a1 + 336) != 3) {
    return 1;
  }
  if (error)
  {
    int error_code = nw_error_get_error_code(error);
    CFErrorRef v8 = nw_error_copy_cf_error(error);
    if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 90
      && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    tcpunbufnwGuts_updateStatus(a1, error_code);
    if (v8) {
      CFRelease(v8);
    }
    return 1;
  }
  BOOL result = 0;
  if (context)
  {
    if (a3)
    {
      BOOL result = nw_content_context_get_is_final(context);
      if (result)
      {
        if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
          && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        tcpunbufnwGuts_updateStatus(a1, 0);
        return 1;
      }
    }
  }
  return result;
}

void __tcpunbufnwGuts_connectionHandlePackageHeader_block_invoke(uint64_t a1, dispatch_data_t data, NSObject *a3, int a4, NSObject *a5)
{
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 360);
  if (data) {
    dispatch_data_get_size(data);
  }
  CFArrayRef v11 = *(NSObject **)(a1 + 40);
  if (v11) {
    nw_error_get_error_code(v11);
  }
  APTTrafficMetricsMessageReadFinished(v10);
  tcpunbufnwGuts_connectionHandlePackagePayload(*(void *)(a1 + 32), data, a3, a4, a5);
  int v12 = *(const void **)(a1 + 32);
  CFRelease(v12);
}

void tcpunbufnwGuts_connectionHandlePackagePayload(uint64_t a1, dispatch_data_t data, NSObject *a3, int a4, NSObject *a5)
{
  CFTypeRef cf = 0;
  CMBlockBufferRef blockBufferOut = 0;
  if (data) {
    size_t size = dispatch_data_get_size(data);
  }
  else {
    size_t size = 0;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 112);
  if (!tcpunbufnwGuts_connectionHandlePotentialDisconnect(a1, a3, a4, a5))
  {
    CFArrayRef v11 = CFAllocatorAllocate(*(CFAllocatorRef *)(a1 + 152), size + v10, 0);
    if (v11)
    {
      int v12 = v11;
      OSStatus v13 = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 192), 0, *(unsigned int *)(a1 + 112), v11);
      if (v13)
      {
        int v21 = v13;
      }
      else
      {
        int v14 = APSDispatchDataCopyBytes();
        if (v14)
        {
          int v21 = v14;
        }
        else
        {
          uint64_t v15 = *MEMORY[0x1E4F1CF80];
          OSStatus v16 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12, size + v10, *(CFAllocatorRef *)(a1 + 152), 0, 0, size + v10, 0, &blockBufferOut);
          if (!v16)
          {
            int v17 = (*(uint64_t (**)(uint64_t, CMBlockBufferRef, CFTypeRef *))(a1 + 128))(v15, blockBufferOut, &cf);
            if (!v17)
            {
              CFTypeID v18 = (void *)cf;
              pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 248));
              tcpunbufnwGuts_callEventCallbackInternal(a1, 7, v18);
              pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 248));
              APTTrafficMetricsMessageProcessed(*(void *)(a1 + 360));
              CFRetain((CFTypeRef)a1);
              CFTypeID v19 = *(NSObject **)(a1 + 328);
              block[0] = MEMORY[0x1E4F143A8];
              block[1] = 0x40000000;
              block[2] = __tcpunbufnwGuts_connectionHandlePackagePayload_block_invoke;
              block[3] = &__block_descriptor_tmp_24;
              block[4] = a1;
              dispatch_async(v19, block);
              goto LABEL_11;
            }
            int v20 = v17;
            APSLogErrorAt();
            goto LABEL_22;
          }
          int v21 = v16;
        }
      }
      APSLogErrorAt();
      tcpunbufnwGuts_updateStatus(a1, v21);
      CFAllocatorDeallocate(*(CFAllocatorRef *)(a1 + 152), v12);
      goto LABEL_11;
    }
    APSLogErrorAt();
    int v20 = -72323;
LABEL_22:
    tcpunbufnwGuts_updateStatus(a1, v20);
  }
LABEL_11:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t tcpunbufnwGuts_updateStatus(uint64_t a1, int a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 248));
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
  tcpunbufnwGuts_updateStatusInternal(a1, 6, a2);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
  int v4 = *(pthread_mutex_t **)(a1 + 248);
  return pthread_mutex_unlock(v4);
}

void __tcpunbufnwGuts_connectionHandlePackagePayload_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  v2[357] = 0;
  tcpunbufnwGuts_connectionReceivePackages(v2);
  uint64_t v3 = *(const void **)(a1 + 32);
  CFRelease(v3);
}

uint64_t tcpunbufnw_DumpHierarchy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(*(void *)CMBaseObjectGetDerivedStorage() + 240) == 5)
  {
    uint64_t v10 = nw_connection_copy_connected_path();
    CFArrayRef v11 = nw_path_copy_effective_local_endpoint(v10);
    int v12 = nw_path_copy_effective_remote_endpoint(v10);
    sockaddr address = nw_endpoint_get_address(v11);
    int v14 = nw_endpoint_get_address(v12);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, a3, "Connection:[%{ptr}] (TCPUnbufferedNW) %''@ Ports:%##a -> %##a Parent:[%{ptr}]\n", a1, a4, address, v14, a2);
  }
  else
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, a3, "Connection:[%{ptr}] (TCPUnbufferedNW) %''@ (Not Connected) Parent:[%{ptr}]\n", a1, a4, a2);
    uint64_t v10 = 0;
    CFArrayRef v11 = 0;
    int v12 = 0;
  }
  nw_release(v10);
  nw_release(v11);
  nw_release(v12);
  return v15;
}

uint64_t tcpunbufnw_Resume()
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v36 = 0;
  uint64_t v37 = &v36;
  uint64_t v38 = 0x2000000000;
  int v39 = 0;
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v30 = 0;
  os_signpost_id_t v31 = &v30;
  uint64_t v32 = 0x3000000000;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  pthread_mutex_lock(*(pthread_mutex_t **)(v0 + 248));
  pthread_mutex_lock(*(pthread_mutex_t **)(v0 + 48));
  if (*(unsigned char *)(v0 + 56)) {
    goto LABEL_60;
  }
  if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
    && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (atomic_load((unsigned __int8 *)(v0 + 28)))
  {
    APSLogErrorAt();
    secure_tcp = 0;
    uint32_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v3 = 0;
    uint64_t v10 = 0;
    CFTypeID v23 = v37;
    int v24 = -72326;
    goto LABEL_78;
  }
  if (!*(void *)(v0 + 104))
  {
    APSLogErrorAt();
    secure_tcp = 0;
    uint32_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v3 = 0;
    uint64_t v10 = 0;
    CFTypeID v23 = v37;
    int v24 = -72327;
    goto LABEL_78;
  }
  OSStatus v2 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(unsigned int *)(v0 + 112), (CFAllocatorRef)*MEMORY[0x1E4F1CF90], 0, 0, *(unsigned int *)(v0 + 112), 1u, (CMBlockBufferRef *)(v0 + 192));
  *((_DWORD *)v37 + 6) = v2;
  if (v2)
  {
    APSLogErrorAt();
LABEL_60:
    secure_tcp = 0;
    uint32_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v3 = 0;
    goto LABEL_65;
  }
  if (*(_DWORD *)(v0 + 96))
  {
    uint64_t v3 = nw_interface_create_with_index();
    if (!v3)
    {
      APSLogErrorAt();
      secure_tcp = 0;
LABEL_70:
      uint32_t v5 = 0;
      uint64_t v6 = 0;
LABEL_76:
      uint64_t v10 = 0;
      goto LABEL_77;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (!*(unsigned char *)(v0 + 29))
  {
    secure_tcp = nw_parameters_create_secure_tcp((nw_parameters_configure_protocol_block_t)*MEMORY[0x1E4F38C90], &__block_literal_global_7);
    if (secure_tcp) {
      goto LABEL_18;
    }
LABEL_69:
    APSLogErrorAt();
    goto LABEL_70;
  }
  configure_quic[0] = MEMORY[0x1E4F143A8];
  configure_quic[1] = 0x40000000;
  configure_quic[2] = __tcpunbufnw_Resume_block_invoke;
  configure_quic[3] = &unk_1E688C190;
  configure_quic[4] = &v36;
  configure_quic[5] = v0;
  secure_tcp = nw_parameters_create_quic(configure_quic);
  if (!secure_tcp) {
    goto LABEL_69;
  }
  if (*((_DWORD *)v37 + 6))
  {
    APSLogErrorAt();
    uint32_t v5 = 0;
    uint64_t v6 = 0;
LABEL_65:
    uint64_t v10 = 0;
    goto LABEL_46;
  }
LABEL_18:
  nw_parameters_set_context();
  nw_parameters_set_use_p2p();
  nw_parameters_require_interface(secure_tcp, v3);
  if ((*(unsigned char *)(v0 + 24) & 0x10) != 0)
  {
    if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 30
      && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    nw_parameters_prohibit_interface_type(secure_tcp, nw_interface_type_cellular);
  }
  if (!*(unsigned char *)(v0 + 30))
  {
    sockaddr address = nw_endpoint_create_address((const sockaddr *)(v0 + 64));
    uint64_t v10 = address;
    if (address)
    {
      uint32_t v5 = nw_connection_create(address, secure_tcp);
      if (v5)
      {
        int v11 = tcpunbufnwGuts_handleNewConnectionInternal(v0, v5);
        *((_DWORD *)v37 + 6) = v11;
        if (v11)
        {
          APSLogErrorAt();
          uint64_t v6 = 0;
          goto LABEL_46;
        }
        uint64_t v6 = 0;
        goto LABEL_45;
      }
      APSLogErrorAt();
    }
    else
    {
      APSLogErrorAt();
      uint32_t v5 = 0;
    }
    uint64_t v6 = 0;
LABEL_77:
    CFTypeID v23 = v37;
    int v24 = -72323;
    goto LABEL_78;
  }
  int v7 = *(unsigned __int16 *)(v0 + 100);
  if (*(_WORD *)(v0 + 100))
  {
    *(void *)__str = 0;
    if (snprintf(__str, 8uLL, "%u", v7) < 1)
    {
      int v25 = -6762;
    }
    else
    {
      nw_listener_t v8 = nw_listener_create_with_port(__str, secure_tcp);
      if (v8)
      {
        uint64_t v6 = v8;
        goto LABEL_34;
      }
      int v25 = -72323;
    }
    APSLogErrorAt();
    uint32_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v10 = 0;
    *((_DWORD *)v37 + 6) = v25;
    goto LABEL_46;
  }
  uint64_t v6 = nw_listener_create(secure_tcp);
  if (!v6)
  {
LABEL_75:
    APSLogErrorAt();
    uint32_t v5 = 0;
    goto LABEL_76;
  }
LABEL_34:
  CFTypeRef v12 = CFRetain((CFTypeRef)v0);
  v31[3] = (uint64_t)v12;
  dispatch_semaphore_t v13 = dispatch_semaphore_create(0);
  int v14 = v31;
  v31[5] = (uint64_t)v13;
  if (!v13) {
    goto LABEL_75;
  }
  CFRetain((CFTypeRef)v14[3]);
  dispatch_retain((dispatch_object_t)v31[5]);
  nw_listener_set_queue(v6, *(dispatch_queue_t *)(v0 + 328));
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 0x40000000;
  _OWORD v28[2] = __tcpunbufnw_Resume_block_invoke_3;
  v28[3] = &unk_1E688C1D8;
  v28[4] = &v30;
  MEMORY[0x1D25E6F70](v6, v28);
  nw_listener_set_new_connection_limit(v6, 0);
  if (*(unsigned char *)(v0 + 29))
  {
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = __tcpunbufnw_Resume_block_invoke_4;
    handler[3] = &__block_descriptor_tmp_37;
    handler[4] = v0;
    nw_listener_set_new_connection_group_handler(v6, handler);
  }
  else
  {
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 0x40000000;
    socklen_t v26[2] = __tcpunbufnw_Resume_block_invoke_5;
    v26[3] = &__block_descriptor_tmp_39_0;
    v26[4] = v0;
    nw_listener_set_new_connection_handler(v6, v26);
  }
  nw_listener_start(v6);
  uint64_t v15 = v31[5];
  dispatch_time_t v16 = dispatch_time(0, 10000000000);
  if (!dispatch_semaphore_wait(v15, v16))
  {
    int v17 = *((_DWORD *)v31 + 9);
    *((_DWORD *)v37 + 6) = v17;
    if (v17)
    {
      APSLogErrorAt();
      nw_listener_cancel(v6);
      uint32_t v5 = 0;
      goto LABEL_65;
    }
    if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
      && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
    {
      nw_listener_get_port(v6);
      LogPrintF();
    }
    *(void *)(v0 + 168) = nw_retain(v6);
    nw_listener_set_new_connection_limit(v6, 1u);
    uint32_t v5 = 0;
    uint64_t v10 = 0;
LABEL_45:
    *(unsigned char *)(v0 + 56) = 1;
    goto LABEL_46;
  }
  APSLogErrorAt();
  nw_listener_cancel(v6);
  uint32_t v5 = 0;
  uint64_t v10 = 0;
  CFTypeID v23 = v37;
  int v24 = -6722;
LABEL_78:
  *((_DWORD *)v23 + 6) = v24;
LABEL_46:
  if (*((_DWORD *)v37 + 6))
  {
    if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 90
      && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    tcpunbufnwGuts_invalidateInternal(v0);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(v0 + 48));
  pthread_mutex_unlock(*(pthread_mutex_t **)(v0 + 248));
  nw_release(v10);
  nw_release(v3);
  nw_release(secure_tcp);
  nw_release(v5);
  nw_release(v6);
  CFTypeID v18 = v31;
  CFTypeID v19 = (const void *)v31[3];
  if (v19)
  {
    CFRelease(v19);
    CFTypeID v18 = v31;
  }
  int v20 = v18[5];
  if (v20) {
    dispatch_release(v20);
  }
  uint64_t v21 = *((unsigned int *)v37 + 6);
  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v36, 8);
  return v21;
}

uint64_t tcpunbufnw_AddEventCallback(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    uint64_t v11 = 4294894974;
LABEL_9:
    APSLogErrorAt();
    return v11;
  }
  if (a5)
  {
    uint64_t v11 = 4294894974;
    goto LABEL_9;
  }
  uint64_t v10 = *DerivedStorage;
  if (!a4) {
    a4 = *(NSObject **)(v10 + 328);
  }
  tcpunbufnwGuts_setEventCallback(v10, a2, a3, a4);
  return 0;
}

uint64_t tcpunbufnw_RemoveEventCallback(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    APSLogErrorAt();
    return 4294894974;
  }
  else
  {
    tcpunbufnwGuts_setEventCallback(*DerivedStorage, 0, 0, 0);
    return 0;
  }
}

uint64_t tcpunbufnw_SetReadyToSendCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(void *)DerivedStorage;
  pthread_mutex_lock(*(pthread_mutex_t **)(*(void *)DerivedStorage + 248));
  *(void *)(v6 + 256) = a2;
  *(void *)(v6 + 264) = a3;
  if (a2) {
    int v7 = tcpunbufnwGuts_readyToSendBatchSlow;
  }
  else {
    int v7 = 0;
  }
  *(void *)(v6 + 272) = v7;
  *(void *)(v6 + 280) = v6;
  pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 248));
  return 0;
}

uint64_t tcpunbufnw_SignalDataAvailable()
{
  uint64_t v0 = *(void **)CMBaseObjectGetDerivedStorage();
  CFRetain(v0);
  uint64_t v1 = v0[41];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __tcpunbufnw_SignalDataAvailable_block_invoke;
  block[3] = &__block_descriptor_tmp_71;
  block[4] = v0;
  dispatch_async(v1, block);
  return 0;
}

uint64_t tcpunbufnw_SetReadyToSendBatchCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(void *)DerivedStorage;
  pthread_mutex_lock(*(pthread_mutex_t **)(*(void *)DerivedStorage + 248));
  *(void *)(v6 + 256) = 0;
  *(void *)(v6 + 264) = 0;
  *(void *)(v6 + 272) = a2;
  *(void *)(v6 + 280) = a3;
  pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 248));
  return 0;
}

uint64_t tcpunbufnwGuts_handleNewConnectionInternal(uint64_t a1, NSObject *obj)
{
  if (*(void *)(a1 + 184))
  {
    APSLogErrorAt();
    nw_connection_force_cancel(obj);
    int v4 = 0;
    uint32_t v5 = 0;
    uint64_t v6 = 0;
    int v7 = 0;
    uint64_t v10 = 4294894954;
  }
  else
  {
    *(void *)(a1 + 184) = nw_retain(obj);
    int v4 = nw_connection_copy_parameters(obj);
    uint32_t v5 = nw_parameters_copy_required_interface(v4);
    uint64_t v6 = nw_connection_copy_endpoint(obj);
    if (!v5) {
      uint32_t v5 = nw_endpoint_copy_interface();
    }
    int v7 = nw_connection_copy_description(obj);
    if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
      && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
    {
      nw_endpoint_get_address(v6);
      if (v5) {
        nw_interface_get_name(v5);
      }
      LogPrintF();
    }
    CFRetain((CFTypeRef)a1);
    nw_connection_set_queue(obj, *(dispatch_queue_t *)(a1 + 328));
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = __tcpunbufnwGuts_handleNewConnectionInternal_block_invoke;
    handler[3] = &__block_descriptor_tmp_56;
    handler[4] = a1;
    nw_connection_set_state_changed_handler(obj, handler);
    *(void *)(a1 + 160) = mach_absolute_time();
    nw_connection_start(obj);
    nw_listener_t v8 = *(NSObject **)(a1 + 176);
    if (v8) {
      nw_connection_group_cancel(v8);
    }
    uint64_t v9 = *(NSObject **)(a1 + 168);
    if (v9) {
      nw_listener_cancel(v9);
    }
    uint64_t v10 = 0;
  }
  free(v7);
  nw_release(v4);
  nw_release(v5);
  nw_release(v6);
  return v10;
}

void __tcpunbufnwGuts_handleNewConnectionGroupInternal_block_invoke(uint64_t a1, int a2)
{
  if (a2 == 4) {
    CFRelease(*(CFTypeRef *)(a1 + 32));
  }
}

uint64_t __tcpunbufnwGuts_handleNewConnectionGroupInternal_block_invoke_2(uint64_t a1, NSObject *a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(*(void *)(a1 + 32) + 48));
  tcpunbufnwGuts_handleNewConnectionInternal(*(void *)(a1 + 32), a2);
  int v4 = *(pthread_mutex_t **)(*(void *)(a1 + 32) + 48);
  return pthread_mutex_unlock(v4);
}

void __tcpunbufnwGuts_handleNewConnectionInternal_block_invoke(uint64_t a1, int a2, nw_error_t error)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (error) {
    int error_code = nw_error_get_error_code(error);
  }
  else {
    int error_code = 0;
  }
  uint64_t v19 = 0;
  int v20 = &v19;
  uint64_t v21 = 0x2000000000;
  uint64_t v22 = 0;
  *(_DWORD *)(v4 + 336) = a2;
  if (error_code) {
    int v6 = 90;
  }
  else {
    int v6 = 50;
  }
  if (v6 >= gLogCategory_APTransportConnectionTCPUnbufferedNW
    && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
  {
    nw_connection_state_to_string();
    LogPrintF();
  }
  int v7 = 0;
  int v8 = a2 - 1;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  switch(v8)
  {
    case 0:
      if (!error_code) {
        goto LABEL_26;
      }
      goto LABEL_13;
    case 2:
      if (atomic_load((unsigned __int8 *)(v4 + 28))) {
        goto LABEL_26;
      }
      APTTrafficMetricsConnectionFormed(*(void *)(v4 + 360));
      pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 248));
      pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 48));
      if (*(unsigned char *)(v4 + 29))
      {
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v11 = nw_protocol_copy_tcp_definition();
        *(void *)(v4 + 200) = nw_connection_copy_protocol_metadata(*(nw_connection_t *)(v4 + 184), v11);
      }
      nw_connection_reset_traffic_class();
      uint64_t v10 = nw_connection_copy_connected_path();
      uint64_t v9 = nw_path_copy_effective_local_endpoint(v10);
      int v7 = nw_path_copy_effective_remote_endpoint(v10);
      enumerate_block[0] = MEMORY[0x1E4F143A8];
      enumerate_block[1] = 0x40000000;
      enumerate_block[2] = __tcpunbufnwGuts_connectionStateChangedHandler_block_invoke;
      enumerate_block[3] = &unk_1E688C2A0;
      enumerate_block[4] = &v19;
      nw_path_enumerate_interfaces(v10, enumerate_block);
      if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
        && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
      {
        nw_endpoint_get_address(v7);
        nw_endpoint_get_address(v9);
        dispatch_time_t v16 = v20[3];
        if (v16) {
          nw_interface_get_name(v16);
        }
        mach_absolute_time();
        UpTicksToSecondsF();
        LogPrintF();
      }
      tcpunbufnwGuts_updateStatusInternal(v4, 5, 0);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 48));
      pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 248));
      tcpunbufnwGuts_connectionSendPackages(v4);
      tcpunbufnwGuts_connectionReceivePackages((CFTypeRef)v4);
      break;
    case 3:
LABEL_13:
      if (atomic_load((unsigned __int8 *)(v4 + 28))) {
        goto LABEL_26;
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 248));
      pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 48));
      int v13 = *(_DWORD *)(v4 + 240);
      if (v13 == 5 || v13 == 0)
      {
        int v7 = nw_connection_copy_endpoint(*(nw_connection_t *)(v4 + 184));
        if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 90
          && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
        {
          nw_endpoint_get_address(v7);
          LogPrintF();
        }
        if (*(_DWORD *)(v4 + 240)) {
          uint64_t v17 = 6;
        }
        else {
          uint64_t v17 = 4;
        }
        tcpunbufnwGuts_updateStatusInternal(v4, v17, error_code);
      }
      else
      {
        int v7 = 0;
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 48));
      pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 248));
      goto LABEL_38;
    case 4:
      APTTrafficMetricsConnectionClosed(*(void *)(v4 + 360));
      CFRelease((CFTypeRef)v4);
LABEL_26:
      int v7 = 0;
LABEL_38:
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      break;
    default:
      break;
  }
  nw_release(v11);
  nw_release(v10);
  nw_release(v9);
  nw_release(v7);
  nw_release((void *)v20[3]);
  _Block_object_dispose(&v19, 8);
}

uint64_t __tcpunbufnwGuts_connectionStateChangedHandler_block_invoke(uint64_t a1, void *obj)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = nw_retain(obj);
  return 0;
}

void tcpunbufnwGuts_connectionSendPackages(uint64_t a1)
{
  uint64_t v15 = 0;
  dispatch_time_t v16 = &v15;
  uint64_t v17 = 0x2000000000;
  int v18 = 0;
  uint64_t v11 = 0;
  CFTypeRef v12 = &v11;
  uint64_t v13 = 0x2000000000;
  uint64_t v14 = 0;
  int v2 = atomic_load((unsigned __int8 *)(a1 + 28));
  if (v2 || !APSFlatQueueIsEmpty() || *(_DWORD *)(a1 + 336) != 3 || !*(unsigned char *)(a1 + 340))
  {
    char v5 = 0;
    goto LABEL_13;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 248));
  if (atomic_load((unsigned __int8 *)(a1 + 28))) {
    goto LABEL_9;
  }
  if (!*(void *)(a1 + 272))
  {
LABEL_11:
    char v5 = 1;
    goto LABEL_12;
  }
  uint64_t v4 = *(NSObject **)(a1 + 184);
  batch_block[0] = MEMORY[0x1E4F143A8];
  batch_block[1] = 0x40000000;
  batch_block[2] = __tcpunbufnwGuts_connectionSendPackages_block_invoke;
  batch_block[3] = &unk_1E688C2E8;
  batch_block[4] = &v11;
  batch_void block[5] = &v15;
  batch_void block[6] = a1;
  nw_connection_batch(v4, batch_block);
  if (*((_DWORD *)v16 + 6))
  {
    APSLogErrorAt();
    goto LABEL_9;
  }
  if (!v12[3])
  {
    APTTrafficMetricsConsumedAllData(*(void *)(a1 + 360));
    goto LABEL_11;
  }
LABEL_9:
  char v5 = 0;
LABEL_12:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 248));
LABEL_13:
  int v6 = v16;
  int v7 = *((_DWORD *)v16 + 6);
  if ((v5 & 1) != 0 || v7)
  {
    if (v7) {
      int v8 = 90;
    }
    else {
      int v8 = 30;
    }
    if (v8 >= gLogCategory_APTransportConnectionTCPUnbufferedNW)
    {
      if (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || (v9 = _LogCategory_Initialize(), int v6 = v16, v9))
      {
        LogPrintF();
        int v6 = v16;
      }
    }
    *(unsigned char *)(a1 + 340) = 0;
    int v7 = *((_DWORD *)v6 + 6);
  }
  *(_DWORD *)(a1 + 352) = v7;
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
}

void __tcpunbufnwGuts_connectionSendPackages_block_invoke(void *a1)
{
  dispatch_data_t content = 0;
  CFArrayRef theArray = 0;
  APTTrafficMetricsRequestDataStarted(*(void *)(a1[6] + 360));
  APSStallMonitorActivityBegin();
  (*(void (**)(void, void, void, CFArrayRef *))(a1[6] + 272))(*(void *)(a1[6] + 280), *(unsigned int *)(a1[6] + 352), *(void *)(a1[6] + 120), &theArray);
  APSStallMonitorActivityEnd();
  APTTrafficMetricsRequestDataFinished(*(void *)(a1[6] + 360));
  CFIndex Count = (CFIndex)theArray;
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  *(void *)(*(void *)(a1[4] + 8) + 24) = Count;
  if (*(uint64_t *)(*(void *)(a1[4] + 8) + 24) < 1)
  {
LABEL_33:
    uint64_t v10 = 0;
  }
  else
  {
    CFIndex v3 = 0;
    uint64_t v4 = *MEMORY[0x1E4F38C58];
    while (1)
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(theArray, v3);
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      int v8 = *(uint64_t (**)(const void *))(v7 + 64);
      if (!v8 || (uint64_t v9 = v8(ValueAtIndex)) == 0)
      {
        APSLogErrorAt();
        uint64_t v10 = 0;
        uint64_t v21 = *(void *)(a1[5] + 8);
        int v22 = -72323;
LABEL_35:
        *(_DWORD *)(v21 + 24) = v22;
        goto LABEL_36;
      }
      uint64_t v10 = (OpaqueCMBlockBuffer *)v9;
      *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = APSDispatchDataCreateWithBlockBuffer();
      if (*(_DWORD *)(*(void *)(a1[5] + 8) + 24)) {
        break;
      }
      Datauint16_t Length = CMBlockBufferGetDataLength(v10);
      if (HIDWORD(DataLength))
      {
        APSLogErrorAt();
        uint64_t v21 = *(void *)(a1[5] + 8);
        int v22 = -72322;
        goto LABEL_35;
      }
      size_t v12 = DataLength;
      int v24 = DataLength;
      *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = APSFlatQueueEnqueue();
      if (*(_DWORD *)(*(void *)(a1[5] + 8) + 24)) {
        break;
      }
      uint64_t v13 = a1[6];
      if (*(unsigned char *)(v13 + 31))
      {
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v17 = *(uint64_t (**)(const void *))(v15 + 136);
        if (v17) {
          int v18 = v17(ValueAtIndex);
        }
        else {
          int v18 = 0;
        }
        int v16 = v18 == 0;
        uint64_t v13 = a1[6];
      }
      else
      {
        int v16 = 0;
      }
      if (*(unsigned __int8 *)(v13 + 341) != v16)
      {
        if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
          && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        nw_tcp_set_no_push();
        uint64_t v13 = a1[6];
        *(unsigned char *)(v13 + 341) = v16;
      }
      if (!v3)
      {
        APTTrafficMetricsSendStarted(*(void *)(v13 + 360));
        uint64_t v13 = a1[6];
      }
      CFRetain((CFTypeRef)v13);
      CFRetain(ValueAtIndex);
      uint64_t v19 = a1[6];
      int v20 = *(NSObject **)(v19 + 184);
      completion[0] = MEMORY[0x1E4F143A8];
      completion[1] = 0x40000000;
      completion[2] = __tcpunbufnwGuts_connectionSendPackages_block_invoke_2;
      completion[3] = &__block_descriptor_tmp_67;
      completion[4] = v19;
      void completion[5] = ValueAtIndex;
      completion[6] = v12;
      nw_connection_send(v20, content, v4, 1, completion);
      CFRelease(v10);
      if (content)
      {
        dispatch_release(content);
        dispatch_data_t content = 0;
      }
      if (++v3 >= *(void *)(*(void *)(a1[4] + 8) + 24)) {
        goto LABEL_33;
      }
    }
    APSLogErrorAt();
  }
LABEL_36:
  if (theArray) {
    CFRelease(theArray);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (content) {
    dispatch_release(content);
  }
}

void __tcpunbufnwGuts_connectionSendPackages_block_invoke_2(uint64_t *a1, nw_error_t error)
{
  if (!atomic_load((unsigned __int8 *)(a1[4] + 28)))
  {
    uint64_t v4 = a1[4];
    if (*(_DWORD *)(v4 + 336) == 3)
    {
      if (error)
      {
        int error_code = nw_error_get_error_code(error);
        uint64_t v4 = a1[4];
      }
      else
      {
        int error_code = 0;
      }
      *(_DWORD *)(v4 + 352) = error_code;
      APSFlatQueueDequeue();
      uint64_t v6 = a1[4];
      if (*(_DWORD *)(v6 + 352))
      {
        if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 90
          && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      else if (*(unsigned char *)(v6 + 32))
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(v6 + 48));
        tcpunbufnwGuts_updatePackageTrackingInternal(a1[4], a1[5], a1[6]);
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1[4] + 48));
      }
      APTTrafficMetricsSendFinished(*(void *)(a1[4] + 360));
      if (APSFlatQueueIsEmpty())
      {
        tcpunbufnwGuts_connectionSendPackages(a1[4]);
      }
      else
      {
        APSFlatQueuePeek();
        APTTrafficMetricsSendStarted(*(void *)(a1[4] + 360));
      }
    }
  }
  CFRelease((CFTypeRef)a1[4]);
  CFRelease((CFTypeRef)a1[5]);
}

uint64_t tcpunbufnwGuts_setEventCallback(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 248));
  if (a3)
  {
    if (a4)
    {
      if (*(NSObject **)(a1 + 304) != a4)
      {
        CFArrayRef v8 = *(const __CFArray **)(a1 + 312);
        if (v8)
        {
          if (CFArrayGetCount(v8) >= 1) {
            tcpunbufnwGuts_drainEventQueueAsyncOnCallbackQueue((const void *)a1, a4);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v9 = *(const void **)(a1 + 312);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 312) = 0;
    }
  }
  uint64_t v10 = *(NSObject **)(a1 + 304);
  if (v10) {
    dispatch_release(v10);
  }
  if (a4) {
    dispatch_retain(a4);
  }
  *(void *)(a1 + 288) = a3;
  *(void *)(a1 + 296) = a2;
  *(void *)(a1 + 304) = a4;
  uint64_t v11 = *(pthread_mutex_t **)(a1 + 248);
  return pthread_mutex_unlock(v11);
}

void tcpunbufnwGuts_readyToSendBatchSlow(uint64_t a1, uint64_t a2, unsigned int (*a3)(void, CFTypeRef *), CFArrayRef *a4)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  *a4 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a3(*MEMORY[0x1E4F1CF80], &cf)) {
    goto LABEL_7;
  }
  (*(void (**)(void, CFTypeRef *, uint64_t))(a1 + 256))(*(void *)(a1 + 264), &cf, a2);
  if (!cf) {
    return;
  }
  values[0] = (void *)cf;
  CFArrayRef v8 = CFArrayCreate(v7, (const void **)values, 1, MEMORY[0x1E4F1D510]);
  *a4 = v8;
  if (!v8) {
LABEL_7:
  }
    APSLogErrorAt();
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t _APTransportConnectionTCPUnbufferedNWGutsGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPTransportConnectionTCPUnbufferedNWGutsCFTypeID TypeID = result;
  return result;
}

void _APTransportConnectionTCPUnbufferedNWGutsFinalize(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 360);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 360) = 0;
  }
  FigSimpleMutexDestroy();
  CFIndex v3 = *(const void **)(a1 + 104);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 152);
  if (v4) {
    CFRelease(v4);
  }
  char v5 = *(const void **)(a1 + 216);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 232);
  if (v6) {
    CFRelease(v6);
  }
  nw_release(*(void **)(a1 + 168));
  nw_release(*(void **)(a1 + 176));
  nw_release(*(void **)(a1 + 184));
  CFAllocatorRef v7 = *(const void **)(a1 + 192);
  if (v7) {
    CFRelease(v7);
  }
  nw_release(*(void **)(a1 + 200));
  FigSimpleMutexDestroy();
  CFArrayRef v8 = *(NSObject **)(a1 + 304);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = *(const void **)(a1 + 312);
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *(NSObject **)(a1 + 328);
  if (v10) {
    dispatch_release(v10);
  }
  nw_release(*(void **)(a1 + 320));
  uint64_t v11 = *(const void **)(a1 + 344);
  if (v11) {
    CFRelease(v11);
  }
  size_t v12 = *(const void **)(a1 + 40);
  if (v12) {
    CFRelease(v12);
  }
  if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
    && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

uint64_t APBrokerGroupGetTypeID()
{
  if (gAPBrokerGroupInitOnce != -1) {
    dispatch_once_f(&gAPBrokerGroupInitOnce, 0, (dispatch_function_t)_APBrokerGroupGetTypeID);
  }
  return gAPBrokerGroupTypeID;
}

uint64_t _APBrokerGroupGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPBrokerGroupCFTypeID TypeID = result;
  return result;
}

uint64_t APBrokerGroupCreate(const void *a1, CFTypeRef *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)label = 0u;
  long long v15 = 0u;
  if (a2 && a1)
  {
    if (gAPBrokerGroupInitOnce != -1) {
      dispatch_once_f(&gAPBrokerGroupInitOnce, 0, (dispatch_function_t)_APBrokerGroupGetTypeID);
    }
    uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
    if (Instance)
    {
      char v5 = Instance;
      Instance[6] = 0u;
      Instance[7] = 0u;
      Instance[4] = 0u;
      Instance[5] = 0u;
      Instance[2] = 0u;
      Instance[3] = 0u;
      Instance[1] = 0u;
      *((void *)Instance + 2) = CFRetain(a1);
      uint64_t v6 = FigSimpleMutexCreate();
      v5[3] = v6;
      if (!v6) {
        goto LABEL_20;
      }
      SNPrintF();
      dispatch_queue_t v7 = dispatch_queue_create(label, 0);
      v5[12] = v7;
      if (!v7) {
        goto LABEL_20;
      }
      SNPrintF();
      dispatch_queue_t v8 = dispatch_queue_create(label, 0);
      v5[13] = v8;
      if (!v8) {
        goto LABEL_20;
      }
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      v5[5] = Mutable;
      if (Mutable
        && (CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (v5[7] = v11) != 0))
      {
        *a2 = CFRetain(v5);
        if (gLogCategory_APBrokerGroup <= 50
          && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v12 = 0;
      }
      else
      {
LABEL_20:
        APSLogErrorAt();
        uint64_t v12 = 4294960568;
      }
      CFRelease(v5);
    }
    else
    {
      APSLogErrorAt();
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v12;
}

uint64_t APBrokerGroupInvalidate(uint64_t a1)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  _APBrokerGroupSetDelegateInternal(a1, 0, 0);
  int v2 = *(NSObject **)(a1 + 104);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___APBrokerGroupStopReceiverPollingInternal_block_invoke;
  block[3] = &__block_descriptor_tmp_67_0;
  block[4] = a1;
  dispatch_sync(v2, block);
  *(unsigned char *)(a1 + 32) = 1;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
}

void _APBrokerGroupSetDelegateInternal(uint64_t a1, CFTypeRef cf, void *a3)
{
  uint64_t v6 = *(const void **)(a1 + 80);
  if (v6) {
    CFRelease(v6);
  }
  *(void *)(a1 + 80) = 0;
  ++*(_DWORD *)(a1 + 88);
  if (a3)
  {
    if (cf) {
      CFTypeRef v7 = CFRetain(cf);
    }
    else {
      CFTypeRef v7 = 0;
    }
    *(void *)(a1 + 80) = v7;
    *(void *)(a1 + 72) = *a3;
  }
}

uint64_t APBrokerGroupGetGroupID(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

CFDictionaryRef APBrokerGroupCopyReceivers(uint64_t a1, int *a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFDictionaryRef *)(a1 + 56));
  if (Copy)
  {
    int v5 = 0;
  }
  else
  {
    APSLogErrorAt();
    int v5 = -6728;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  if (a2) {
    *a2 = v5;
  }
  return Copy;
}

BOOL APBrokerGroupIsEmpty(uint64_t a1)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  BOOL v2 = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 40)) == 0;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  return v2;
}

uint64_t APBrokerGroupSetDelegate(uint64_t a1, const void *a2, void *a3)
{
  return 0;
}

uint64_t APBrokerGroupAddOrUpdateBroker(uint64_t a1, const void *a2)
{
  CFTypeRef cf1 = 0;
  key = 0;
  value = 0;
  uint64_t v4 = APBrokerCopyBrokerInfoFromBonjourInfo((uint64_t)a2, &key, &cf1);
  if (v4)
  {
    uint64_t v8 = v4;
    APSLogErrorAt();
    goto LABEL_24;
  }
  CFTypeRef v5 = *(CFTypeRef *)(a1 + 16);
  if (cf1 != v5 && (!cf1 || !v5 || !CFEqual(cf1, v5)))
  {
    APSLogErrorAt();
    uint64_t v8 = 4294960591;
    goto LABEL_24;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  uint64_t v6 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), key);
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    if (gLogCategory_APBrokerGroup <= 30
      && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v8 = APBrokerUpdate(v7, a2);
    if (v8)
    {
      APSLogErrorAt();
      goto LABEL_22;
    }
LABEL_20:
    if (!*(void *)(a1 + 48))
    {
      *(void *)(a1 + 48) = CFRetain(key);
      _APBrokerDoReceiverPollingIfNecessary(a1, 5);
    }
    goto LABEL_22;
  }
  uint64_t v9 = APBrokerCreate(a2, (CFTypeRef *)&value);
  uint64_t v10 = value;
  if (value)
  {
    uint64_t v8 = v9;
    if (gLogCategory_APBrokerGroup <= 30)
    {
      if (gLogCategory_APBrokerGroup != -1 || (v11 = _LogCategory_Initialize(), uint64_t v10 = value, v11))
      {
        LogPrintF();
        uint64_t v10 = value;
      }
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), key, v10);
    goto LABEL_20;
  }
  APSLogErrorAt();
  uint64_t v8 = 4294960568;
LABEL_22:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  if (value) {
    CFRelease(value);
  }
LABEL_24:
  if (cf1) {
    CFRelease(cf1);
  }
  if (key) {
    CFRelease(key);
  }
  return v8;
}

void _APBrokerDoReceiverPollingIfNecessary(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    BOOL v2 = *(NSObject **)(a1 + 104);
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 0x40000000;
    v3[2] = ___APBrokerDoReceiverPollingIfNecessary_block_invoke;
    v3[3] = &__block_descriptor_tmp_69;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_sync(v2, v3);
  }
}

uint64_t APBrokerGroupRemoveBroker(uint64_t a1, uint64_t a2)
{
  CFTypeRef v11 = 0;
  uint64_t v12 = 0;
  uint64_t v3 = APBrokerCopyBrokerInfoFromBonjourInfo(a2, &v12, &v11);
  if (!v3)
  {
    CFTypeRef v4 = *(CFTypeRef *)(a1 + 16);
    if (v11 != v4 && (!v11 || !v4 || !CFEqual(v11, v4)))
    {
      APSLogErrorAt();
      uint64_t v7 = 4294960591;
      goto LABEL_27;
    }
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
    int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v12);
    if (!Value) {
      goto LABEL_26;
    }
    uint64_t v6 = Value;
    if (gLogCategory_APBrokerGroup <= 30
      && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFTypeRef v8 = v11;
    CFTypeRef v9 = *(CFTypeRef *)(a1 + 48);
    if (v11 != v9)
    {
      if (!v11 || !v9 || !CFEqual(v11, v9))
      {
LABEL_19:
        APBrokerInvalidate(v6);
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), v12);
        if (!*(void *)(a1 + 48))
        {
          CFDictionaryApplyBlock();
          if (!*(void *)(a1 + 48))
          {
            if (gLogCategory_APBrokerGroup <= 30
              && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            _APBrokerGroupRemoveAllReceivers(a1);
          }
        }
LABEL_26:
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
        uint64_t v7 = 0;
        goto LABEL_27;
      }
      CFTypeRef v8 = *(CFTypeRef *)(a1 + 48);
    }
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 48) = 0;
    }
    goto LABEL_19;
  }
  uint64_t v7 = v3;
  APSLogErrorAt();
LABEL_27:
  if (v11) {
    CFRelease(v11);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v7;
}

void *__APBrokerGroupRemoveBroker_block_invoke(void *result, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(result[4] + 48))
  {
    uint64_t v3 = result;
    GroupID = (const void *)APBrokerGroupGetGroupID(a3);
    uint64_t result = CFRetain(GroupID);
    *(void *)(v3[4] + 48) = result;
  }
  return result;
}

void _APBrokerGroupRemoveAllReceivers(uint64_t a1)
{
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 56)) >= 1)
  {
    if (gLogCategory_APBrokerGroup <= 30
      && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 56));
    _APBrokerGroupFireReceiversChanged(a1);
  }
}

void APBrokerGroupAuthenticate(uint64_t a1, const void *a2, void *aBlock)
{
  int v6 = gLogCategory_APBrokerGroup;
  if (gLogCategory_APBrokerGroup <= 50)
  {
    if (gLogCategory_APBrokerGroup == -1)
    {
      if (!_LogCategory_Initialize()) {
        goto LABEL_9;
      }
      int v6 = gLogCategory_APBrokerGroup;
    }
    if (v6 == -1) {
      _LogCategory_Initialize();
    }
    LogPrintF();
  }
LABEL_9:
  uint64_t v7 = _Block_copy(aBlock);
  CFTypeRef v8 = *(NSObject **)(a1 + 96);
  dispatch_retain(v8);
  CFTypeRef v9 = CFRetain(*(CFTypeRef *)(a1 + 16));
  if (a2) {
    CFRetain(a2);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  v11[2] = __APBrokerGroupAuthenticate_block_invoke;
  void v11[3] = &__block_descriptor_tmp_12_1;
  v11[4] = a1;
  void v11[5] = a2;
  v10[0] = (void (*)(void, void, void, void))MEMORY[0x1E4F143A8];
  v10[1] = (void (*)(void, void, void, void))0x40000000;
  v10[2] = (void (*)(void, void, void, void))__APBrokerGroupAuthenticate_block_invoke_2;
  v10[3] = (void (*)(void, void, void, void))&unk_1E688C3C0;
  v10[4] = (void (*)(void, void, void, void))v7;
  void v10[5] = (void (*)(void, void, void, void))v8;
  v10[6] = (void (*)(void, void, void, void))v9;
  v10[7] = (void (*)(void, void, void, void))a2;
  _APBrokerGroupCallAllBrokers(a1, v11, v10);
}

void _APBrokerGroupCallAllBrokers(uint64_t a1, const void *a2, void (**a3)(void, void, void, void))
{
  int v6 = malloc_type_calloc(1uLL, 0x38uLL, 0x10E0040425D96D4uLL);
  if (v6)
  {
    uint64_t v7 = v6;
    void *v6 = a1;
    if (gLogCategory_APBrokerGroup <= 30
      && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v8 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    v7[1] = v8;
    if (v8
      && (CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]),
          (v7[4] = Mutable) != 0)
      && (uint64_t v10 = _Block_copy(a2), (v7[2] = v10) != 0)
      && (CFTypeRef v11 = _Block_copy(a3), (v7[3] = v11) != 0))
    {
      _APBrokerGroupCallNextBroker(a1, (uint64_t)v7);
    }
    else
    {
      APSLogErrorAt();
      a3[2](a3, a1, 4294960568, 0);
      _APBrokerGroupFreeOperationData(v7);
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v12 = a3[2];
    v12(a3, a1, 4294960568, 0);
  }
}

void __APBrokerGroupAuthenticate_block_invoke(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *aBlock)
{
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v7 = *(const void **)(a1 + 40);
  CFTypeRef v9 = _Block_copy(aBlock);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = ___APBrokerGroupAuthenticateWithOneBroker_block_invoke;
  v10[3] = &unk_1E688C5B8;
  v10[6] = a4;
  v10[7] = a3;
  v10[4] = v9;
  void v10[5] = v8;
  APBrokerAuthenticate(a3, v7, v10);
}

void __APBrokerGroupAuthenticate_block_invoke_2(uint64_t a1, uint64_t a2, int a3, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  void v12[2] = __APBrokerGroupAuthenticate_block_invoke_3;
  v12[3] = &unk_1E688C398;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(a1 + 40);
  int v13 = a3;
  uint64_t v10 = *(void *)(a1 + 48);
  v12[4] = v9;
  void v12[5] = v10;
  v12[6] = cf;
  dispatch_async(v8, v12);
  CFTypeRef v11 = *(const void **)(a1 + 56);
  if (v11) {
    CFRelease(v11);
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  _APBrokerDoReceiverPollingIfNecessary(a2, 0);
}

void __APBrokerGroupAuthenticate_block_invoke_3(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  BOOL v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
  uint64_t v3 = *(const void **)(a1 + 32);
  _Block_release(v3);
}

void APBrokerGroupGetInfo(uint64_t a1, void *aBlock)
{
  if (gLogCategory_APBrokerGroup <= 50 && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  CFTypeRef v4 = _Block_copy(aBlock);
  CFTypeRef v5 = *(NSObject **)(a1 + 96);
  dispatch_retain(v5);
  CFTypeRef v6 = CFRetain(*(CFTypeRef *)(a1 + 16));
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  void v8[2] = __APBrokerGroupGetInfo_block_invoke;
  v8[3] = &__block_descriptor_tmp_18_0;
  v8[4] = a1;
  v7[0] = (void (*)(void, void, void, void))MEMORY[0x1E4F143A8];
  v7[1] = (void (*)(void, void, void, void))0x40000000;
  _DWORD v7[2] = (void (*)(void, void, void, void))__APBrokerGroupGetInfo_block_invoke_2;
  v7[3] = (void (*)(void, void, void, void))&unk_1E688C430;
  v7[4] = (void (*)(void, void, void, void))v4;
  void v7[5] = (void (*)(void, void, void, void))v5;
  void v7[6] = (void (*)(void, void, void, void))v6;
  _APBrokerGroupCallAllBrokers(a1, v8, v7);
}

void __APBrokerGroupGetInfo_block_invoke(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *aBlock)
{
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = _Block_copy(aBlock);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___APBrokerGroupGetInfoWithOneBroker_block_invoke;
  void v9[3] = &unk_1E688C5E0;
  void v9[6] = a4;
  void v9[7] = a3;
  v9[4] = v8;
  void v9[5] = v7;
  APBrokerGetInfo(a3, v9);
}

void __APBrokerGroupGetInfo_block_invoke_2(uint64_t a1, int a2, int a3, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = __APBrokerGroupGetInfo_block_invoke_3;
  v10[3] = &unk_1E688C408;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v7 = *(NSObject **)(a1 + 40);
  int v11 = a3;
  uint64_t v9 = *(void *)(a1 + 48);
  v10[4] = v8;
  void v10[5] = v9;
  v10[6] = cf;
  dispatch_async(v7, v10);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

void __APBrokerGroupGetInfo_block_invoke_3(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  BOOL v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
  uint64_t v3 = *(const void **)(a1 + 32);
  _Block_release(v3);
}

void APBrokerGroupResolveReceiverDNSName(uint64_t a1, const void *a2, void *a3)
{
  if (gLogCategory_APBrokerGroup <= 50 && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
  {
    if (a2) {
      IsAppleInternalBuild();
    }
    LogPrintF();
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), a2);
  if (Value)
  {
    CFTypeRef v7 = CFRetain(Value);
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
    if (v7)
    {
      uint64_t ReceiverGroupUUID = APBrokeredReceiverGetReceiverGroupUUID((uint64_t)v7);
      if (ReceiverGroupUUID)
      {
        uint64_t v9 = (const void *)ReceiverGroupUUID;
        if (gLogCategory_APBrokerGroup <= 30
          && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v12 = _Block_copy(a3);
        if (v12)
        {
          int v13 = (void (*)(void, void, void, void))v12;
          uint64_t v14 = *(NSObject **)(a1 + 96);
          dispatch_retain(v14);
          if (a2) {
            CFRetain(a2);
          }
          CFRetain(v9);
          v16[0] = MEMORY[0x1E4F143A8];
          v16[1] = 0x40000000;
          v16[2] = __APBrokerGroupResolveReceiverDNSName_block_invoke;
          v16[3] = &__block_descriptor_tmp_24_0;
          v16[4] = a1;
          void v16[5] = v9;
          void v16[6] = a2;
          v15[0] = (void (*)(void, void, void, void))MEMORY[0x1E4F143A8];
          v15[1] = (void (*)(void, void, void, void))0x40000000;
          v15[2] = (void (*)(void, void, void, void))__APBrokerGroupResolveReceiverDNSName_block_invoke_2;
          v15[3] = (void (*)(void, void, void, void))&unk_1E688C4A0;
          v15[4] = v13;
          v15[5] = (void (*)(void, void, void, void))v14;
          v15[6] = (void (*)(void, void, void, void))a2;
          void v15[7] = (void (*)(void, void, void, void))v9;
          _APBrokerGroupCallAllBrokers(a1, v16, v15);
          CFRelease(v7);
          return;
        }
        uint64_t v10 = 4294960568;
      }
      else
      {
        uint64_t v10 = 4294960587;
      }
      APSLogErrorAt();
      if (a2) {
        CFRelease(a2);
      }
      a2 = v7;
      goto LABEL_15;
    }
  }
  else
  {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  }
  APSLogErrorAt();
  uint64_t v10 = 4294960587;
  if (a2) {
LABEL_15:
  }
    CFRelease(a2);
  int v11 = (void (*)(void *, uint64_t, void, void, void))a3[2];
  v11(a3, v10, 0, 0, 0);
}

void __APBrokerGroupResolveReceiverDNSName_block_invoke(void *a1, int a2, uint64_t a3, uint64_t a4, void *aBlock)
{
  uint64_t v8 = a1[4];
  CFTypeRef v7 = (__CFString *)a1[5];
  uint64_t v9 = (const void *)a1[6];
  uint64_t v10 = _Block_copy(aBlock);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  v11[2] = ___APBrokerGroupResolveReceiverDNSNameWithOneBroker_block_invoke;
  void v11[3] = &unk_1E688C608;
  void v11[6] = a4;
  v11[7] = a3;
  v11[4] = v10;
  void v11[5] = v8;
  APBrokerGetReceiverConnectivityInfo(a3, v7, v9, v11);
}

void __APBrokerGroupResolveReceiverDNSName_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
  {
    int v8 = a3;
    APSLogErrorAt();
    int v5 = 0;
    __int16 Int64Ranged = 0;
    Typedint Value = 0;
  }
  else
  {
    int v5 = a4;
    if (a4)
    {
      CFArrayGetTypeID();
      Typedint Value = (const void *)CFDictionaryGetTypedValue();
      if (TypedValue)
      {
        __int16 Int64Ranged = CFDictionaryGetInt64Ranged();
        if (Int64Ranged)
        {
          int v8 = 0;
          int v5 = (unsigned __int16)CFDictionaryGetInt64Ranged();
        }
        else
        {
          APSLogErrorAt();
          int v5 = 0;
          int v8 = -6705;
        }
        CFRetain(TypedValue);
        goto LABEL_7;
      }
      APSLogErrorAt();
      int v5 = 0;
      __int16 Int64Ranged = 0;
    }
    else
    {
      APSLogErrorAt();
      __int16 Int64Ranged = 0;
      Typedint Value = 0;
    }
    int v8 = -6705;
  }
LABEL_7:
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  v11[2] = __APBrokerGroupResolveReceiverDNSName_block_invoke_3;
  void v11[3] = &unk_1E688C478;
  uint64_t v9 = *(NSObject **)(a1 + 40);
  v11[4] = *(void *)(a1 + 32);
  void v11[5] = TypedValue;
  int v12 = v8;
  int v13 = v5;
  __int16 v14 = Int64Ranged;
  dispatch_async(v9, v11);
  uint64_t v10 = *(const void **)(a1 + 48);
  if (v10) {
    CFRelease(v10);
  }
  CFRelease(*(CFTypeRef *)(a1 + 56));
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

void __APBrokerGroupResolveReceiverDNSName_block_invoke_3(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  BOOL v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  _Block_release(v3);
}

uint64_t APBrokerGroupStartReceiverPolling(uint64_t a1)
{
  uint64_t v7 = 0;
  int v8 = &v7;
  uint64_t v9 = 0x2000000000;
  int v10 = 0;
  BOOL v2 = *(NSObject **)(a1 + 104);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __APBrokerGroupStartReceiverPolling_block_invoke;
  block[3] = &unk_1E688C528;
  block[4] = &v7;
  void block[5] = a1;
  dispatch_sync(v2, block);
  if (*((_DWORD *)v8 + 6))
  {
    uint64_t v3 = *(NSObject **)(a1 + 104);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = ___APBrokerGroupStopReceiverPollingInternal_block_invoke;
    void v11[3] = &__block_descriptor_tmp_67_0;
    v11[4] = a1;
    dispatch_sync(v3, v11);
    uint64_t v4 = *((unsigned int *)v8 + 6);
  }
  else
  {
    uint64_t v4 = 0;
  }
  _Block_object_dispose(&v7, 8);
  return v4;
}

void __APBrokerGroupStartReceiverPolling_block_invoke(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 40) + 112))
  {
    uint64_t v2 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    if (v2)
    {
      uint64_t v3 = (const void *)v2;
      uint64_t v4 = *(void *)(a1 + 40);
      *(unsigned char *)(v4 + 112) = 1;
      if (gLogCategory_APBrokerGroup <= 50)
      {
        if (gLogCategory_APBrokerGroup != -1 || (v5 = _LogCategory_Initialize(), uint64_t v4 = *(void *)(a1 + 40), v5))
        {
          LogPrintF();
          uint64_t v4 = *(void *)(a1 + 40);
        }
      }
      *(void *)(*(void *)(a1 + 40) + 120) = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v4 + 104));
      CFTypeRef v6 = *(NSObject **)(*(void *)(a1 + 40) + 120);
      if (v6)
      {
        handler[0] = MEMORY[0x1E4F143A8];
        handler[1] = 0x40000000;
        handler[2] = __APBrokerGroupStartReceiverPolling_block_invoke_2;
        handler[3] = &__block_descriptor_tmp_29;
        handler[4] = v3;
        dispatch_source_set_event_handler(v6, handler);
        uint64_t v7 = *(NSObject **)(*(void *)(a1 + 40) + 120);
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 0x40000000;
        v10[2] = __APBrokerGroupStartReceiverPolling_block_invoke_4;
        v10[3] = &__block_descriptor_tmp_30_0;
        v10[4] = v3;
        dispatch_source_set_cancel_handler(v7, v10);
        int v8 = *(NSObject **)(*(void *)(a1 + 40) + 120);
        dispatch_time_t v9 = dispatch_time(0, 0);
        dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0);
        dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 40) + 120));
      }
      else
      {
        APSLogErrorAt();
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -6728;
        CFRelease(v3);
      }
    }
    else
    {
      APSLogErrorAt();
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -6728;
    }
  }
}

void __APBrokerGroupStartReceiverPolling_block_invoke_2()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = *(NSObject **)(v0 + 96);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __APBrokerGroupStartReceiverPolling_block_invoke_3;
    block[3] = &__block_descriptor_tmp_28_0;
    block[4] = v0;
    dispatch_async(v1, block);
  }
}

void __APBrokerGroupStartReceiverPolling_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (gLogCategory_APBrokerGroup <= 50 && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  _APBrokerGroupCallAllBrokers(v2, &__block_literal_global_8, __block_literal_global_62);
  uint64_t v3 = *(const void **)(a1 + 32);
  CFRelease(v3);
}

void __APBrokerGroupStartReceiverPolling_block_invoke_4(uint64_t a1)
{
}

uint64_t APBrokerGroupStopReceiverPolling(uint64_t a1)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  uint64_t v2 = *(NSObject **)(a1 + 104);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___APBrokerGroupStopReceiverPollingInternal_block_invoke;
  block[3] = &__block_descriptor_tmp_67_0;
  block[4] = a1;
  dispatch_sync(v2, block);
  _APBrokerGroupRemoveAllReceivers(a1);
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
}

void _APBrokerGroupFinalize(uint64_t a1)
{
  if (gLogCategory_APBrokerGroup <= 50 && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = *(NSObject **)(a1 + 120);
    if (v2)
    {
      dispatch_release(v2);
      *(void *)(a1 + 120) = 0;
    }
    uint64_t v3 = *(const void **)(a1 + 80);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 80) = 0;
    }
    uint64_t v4 = *(NSObject **)(a1 + 104);
    if (v4)
    {
      dispatch_release(v4);
      *(void *)(a1 + 104) = 0;
    }
    int v5 = *(NSObject **)(a1 + 96);
    if (v5)
    {
      dispatch_release(v5);
      *(void *)(a1 + 96) = 0;
    }
    CFTypeRef v6 = *(const void **)(a1 + 56);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 56) = 0;
    }
    uint64_t v7 = *(const void **)(a1 + 48);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 48) = 0;
    }
    int v8 = *(const void **)(a1 + 40);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 40) = 0;
    }
    if (*(void *)(a1 + 24))
    {
      FigSimpleMutexDestroy();
      *(void *)(a1 + 24) = 0;
    }
    dispatch_time_t v9 = *(const void **)(a1 + 16);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 16) = 0;
    }
  }
  else
  {
    uint64_t v10 = FatalErrorF();
    _APBrokerGroupFireReceiversChanged(v10);
  }
}

void _APBrokerGroupFireReceiversChanged(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    int v3 = *(_DWORD *)(a1 + 88);
    uint64_t v4 = *(const void **)(a1 + 80);
    if (v4) {
      CFTypeRef v5 = CFRetain(v4);
    }
    else {
      CFTypeRef v5 = 0;
    }
    CFRetain((CFTypeRef)a1);
    CFTypeRef v6 = *(NSObject **)(a1 + 96);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 0x40000000;
    _DWORD v7[2] = ___APBrokerGroupFireReceiversChanged_block_invoke;
    v7[3] = &__block_descriptor_tmp_36_0;
    int v8 = v3;
    v7[4] = a1;
    void v7[5] = v1;
    void v7[6] = v5;
    dispatch_async(v6, v7);
  }
}

void _APBrokerGroupCallNextBroker(uint64_t a1, uint64_t a2)
{
  if (gLogCategory_APBrokerGroup <= 30 && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  CFSetRef v4 = *(const __CFSet **)(a2 + 32);
  uint64_t v15 = 0;
  long long v16 = &v15;
  uint64_t v17 = 0x2000000000;
  uint64_t v18 = 0;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  CFTypeRef v5 = *(const void **)(a1 + 48);
  if (v5)
  {
    int v6 = CFSetContainsValue(v4, v5);
    uint64_t v7 = v16;
    if (!v6) {
      v16[3] = *(void *)(a1 + 48);
    }
  }
  else
  {
    uint64_t v7 = v16;
  }
  int v8 = (const void *)v7[3];
  if (v8) {
    goto LABEL_11;
  }
  v14[6] = MEMORY[0x1E4F143A8];
  void v14[7] = 0x40000000;
  v14[8] = ___APBrokerGroupCopyNextBroker_block_invoke;
  v14[9] = &unk_1E688C590;
  v14[10] = &v15;
  v14[11] = v4;
  CFDictionaryApplyBlock();
  int v8 = (const void *)v16[3];
  if (v8)
  {
LABEL_11:
    int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v8);
    if (Value)
    {
      CFTypeRef v10 = CFRetain(Value);
      if (v10)
      {
        int v11 = v10;
        CFSetAddValue(v4, (const void *)v16[3]);
        goto LABEL_16;
      }
    }
    APSLogErrorAt();
  }
  int v11 = 0;
LABEL_16:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  _Block_object_dispose(&v15, 8);
  if (v11)
  {
    if (gLogCategory_APBrokerGroup <= 30
      && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v12 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 16);
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 0x40000000;
      v14[2] = ___APBrokerGroupCallNextBroker_block_invoke;
      v14[3] = &__block_descriptor_tmp_41;
      v14[4] = v12;
      void v14[5] = a2;
      (*(void (**)(uint64_t, uint64_t, const void *, uint64_t, void *))(v13 + 16))(v13, a1, v11, a2 + 40, v14);
    }
    else
    {
      APSLogErrorAt();
      *(_DWORD *)(a2 + 44) = -6728;
      _APBrokerGroupDoneCallingBrokers(a1, a2);
    }
    CFRelease(v11);
  }
  else
  {
    if (gLogCategory_APBrokerGroup <= 30
      && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    _APBrokerGroupDoneCallingBrokers(a1, a2);
  }
}

void _APBrokerGroupFreeOperationData(void *a1)
{
  uint64_t v2 = (const void *)a1[1];
  if (v2)
  {
    CFRelease(v2);
    a1[1] = 0;
  }
  int v3 = (const void *)a1[2];
  if (v3)
  {
    _Block_release(v3);
    a1[2] = 0;
  }
  CFSetRef v4 = (const void *)a1[3];
  if (v4)
  {
    _Block_release(v4);
    a1[3] = 0;
  }
  CFTypeRef v5 = (const void *)a1[4];
  if (v5)
  {
    CFRelease(v5);
    a1[4] = 0;
  }
  int v6 = (const void *)a1[6];
  if (v6) {
    CFRelease(v6);
  }
  free(a1);
}

void _APBrokerGroupDoneCallingBrokers(uint64_t a1, uint64_t a2)
{
  if (!CFSetGetCount(*(CFSetRef *)(a2 + 32)))
  {
LABEL_12:
    uint64_t v4 = 4294960587;
    goto LABEL_13;
  }
  uint64_t v4 = *(unsigned int *)(a2 + 44);
  if (*(unsigned char *)(a2 + 40)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (v5)
  {
    if (gLogCategory_APBrokerGroup > 60)
    {
      uint64_t v4 = 4294960587;
      goto LABEL_17;
    }
    if (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()) {
      LogPrintF();
    }
    goto LABEL_12;
  }
LABEL_13:
  if (gLogCategory_APBrokerGroup <= 30 && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
  {
    CFSetGetCount(*(CFSetRef *)(a2 + 32));
    LogPrintF();
  }
LABEL_17:
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(a2 + 24) + 16))(*(void *)(a2 + 24), a1, v4, *(void *)(a2 + 48));
  _APBrokerGroupFreeOperationData((void *)a2);
}

uint64_t APTransportConnectionTCPUnbufferedCreate(uint64_t a1, const void *a2, int a3, int a4, const __CFDictionary *a5, void *a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a6)
  {
    APTransportConnectionGetClassID();
    uint64_t v11 = CMDerivedObjectCreate();
    if (v11)
    {
      uint64_t v21 = v11;
      APSLogErrorAt();
    }
    else
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (a2) {
        CFTypeRef v13 = CFRetain(a2);
      }
      else {
        CFTypeRef v13 = 0;
      }
      *(void *)(DerivedStorage + 16) = v13;
      *(_DWORD *)(DerivedStorage + 56) = a3;
      *(_DWORD *)(DerivedStorage + 60) = 5;
      int Value = CFDictionaryGetValue(a5, @"ReadyToSendCallbackQueuePool");
      if (Value) {
        int Value = CFRetain(Value);
      }
      *(void *)(DerivedStorage + 64) = Value;
      *(unsigned char *)(DerivedStorage + 72) = CFDictionaryGetInt64() != 0;
      *(unsigned char *)(DerivedStorage + 72) = APSSettingsGetIntWithDefault() != 0;
      CFUUIDGetTypeID();
      Typedint Value = (const void *)CFDictionaryGetTypedValue();
      *(void *)(DerivedStorage + 144) = TypedValue;
      if (TypedValue) {
        CFRetain(TypedValue);
      }
      SNPrintF();
      if (a4) {
        uint64_t v16 = FigDispatchQueueCreateWithPriority();
      }
      else {
        uint64_t v16 = (uint64_t)dispatch_queue_create(label, 0);
      }
      *(void *)(DerivedStorage + 8) = v16;
      SNPrintF();
      dispatch_queue_t v17 = dispatch_queue_create(label, 0);
      *(void *)(DerivedStorage + 24) = v17;
      if (v17)
      {
        SNPrintF();
        dispatch_queue_t v18 = dispatch_queue_create(label, 0);
        *(void *)(DerivedStorage + 352) = v18;
        if (v18 && (uint64_t v19 = FigSimpleMutexCreate(), (*(void *)(DerivedStorage + 200) = v19) != 0))
        {
          *(void *)(DerivedStorage + 324) = 0x1E0000000ALL;
          CMTimeMake(&v23, 2000, 1000);
          *(CMTime *)(DerivedStorage + 360) = v23;
          *(_DWORD *)(DerivedStorage + 332) = 4000;
          *(_WORD *)(DerivedStorage + 340) = 1;
          *(unsigned char *)(DerivedStorage + 340) = FigGetCFPreferenceNumberWithDefault();
          if (gLogCategory_APTransportConnectionTCPUnbuffered <= 40
            && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          *(_DWORD *)(DerivedStorage + 336) = CFDictionaryGetInt64();
          *(unsigned char *)(DerivedStorage + 342) = 0;
          FigCFDictionaryGetBooleanIfPresent();
          *(void *)(DerivedStorage + 232) = dispatch_queue_create("APTransportConnectionTCP.netinfo", 0);
          *(_OWORD *)(DerivedStorage + 240) = xmmword_1D093C4F0;
          *(unsigned char *)(DerivedStorage + 256) = 1;
          *(void *)(DerivedStorage + 264) = 0x3FE0000000000000;
          *(void *)(DerivedStorage + 272) = 0;
          *(unsigned char *)(DerivedStorage + 280) = 0;
          *(_DWORD *)(DerivedStorage + 288) = 20;
          if (gLogCategory_APTransportConnectionTCPUnbuffered <= 50
            && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          if (*(unsigned char *)(DerivedStorage + 340)) {
            int v20 = 1;
          }
          else {
            int v20 = 2;
          }
          APTTrafficMetricsCreate(&gLogCategory_APTransportConnectionTCPUnbuffered, 0, (uint64_t *)(DerivedStorage + 552), v20);
          *a6 = 0;
          return 0;
        }
        else
        {
          APSLogErrorAt();
          return APSSignalErrorAt();
        }
      }
      else
      {
        uint64_t v21 = 4294894973;
        APSLogErrorAt();
        APSSignalErrorAt();
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294894974;
  }
  return v21;
}

uint64_t tcpunbuf_Invalidate(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)tcpunbuf_invalidateInternal);
  return 0;
}

uint64_t tcpunbuf_Finalize(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)tcpunbuf_invalidateInternal);
  APSDispatchSyncFlush();
  if (*(void *)(DerivedStorage + 64)) {
    APSPriorityDispatchQueuePoolSyncFlush();
  }
  APSDispatchSyncFlush();
  int v3 = *(const void **)(DerivedStorage + 552);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 552) = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 152);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 152) = 0;
  }
  BOOL v5 = *(const void **)(DerivedStorage + 16);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 16) = 0;
  }
  int v6 = *(const void **)(DerivedStorage + 144);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 144) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 64);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 64) = 0;
  }
  int v8 = *(const void **)(DerivedStorage + 544);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 544) = 0;
  }
  dispatch_time_t v9 = *(NSObject **)(DerivedStorage + 24);
  if (v9)
  {
    dispatch_release(v9);
    *(void *)(DerivedStorage + 24) = 0;
  }
  CFTypeRef v10 = *(NSObject **)(DerivedStorage + 48);
  if (v10)
  {
    dispatch_release(v10);
    *(void *)(DerivedStorage + 48) = 0;
  }
  uint64_t v11 = *(NSObject **)(DerivedStorage + 8);
  if (v11)
  {
    dispatch_release(v11);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v12 = *(NSObject **)(DerivedStorage + 352);
  if (v12)
  {
    dispatch_release(v12);
    *(void *)(DerivedStorage + 352) = 0;
  }
  CFTypeRef v13 = *(NSObject **)(DerivedStorage + 232);
  if (v13)
  {
    dispatch_release(v13);
    *(void *)(DerivedStorage + 232) = 0;
  }
  uint64_t result = FigSimpleMutexDestroy();
  *(void *)(DerivedStorage + 200) = 0;
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 50)
  {
    if (gLogCategory_APTransportConnectionTCPUnbuffered != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

__CFString *tcpunbuf_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableSetRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTransportConnectionTCPUnbuffered %p '%@'>", a1, *(void *)(DerivedStorage + 16));
  return Mutable;
}

uint64_t tcpunbuf_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, @"NetworkInfo"))
  {
    if (CFEqual(a2, @"MaxPackageSize"))
    {
      block[0] = 0;
      CFTypeRef v10 = *(uint64_t (**)(void *))(DerivedStorage + 192);
      if (v10)
      {
        uint64_t v11 = v10(block);
        if (v11)
        {
          uint64_t v13 = v11;
          APSLogErrorAt();
          return v13;
        }
        CFNumberRef v12 = CFNumberCreate(a3, kCFNumberIntType, block);
        *a4 = v12;
        if (!v12)
        {
          APSLogErrorAt();
          return 4294894973;
        }
        return 0;
      }
      APSLogErrorAt();
    }
    else if (gLogCategory_APTransportConnectionTCPUnbuffered <= 30 {
           && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
    }
    {
      LogPrintF();
    }
    return 4294954512;
  }
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x2000000000;
  v19[3] = 0;
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x2000000000;
  v18[3] = 0;
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2000000000;
  int v17 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  dispatch_time_t v9 = *(NSObject **)(DerivedStorage + 232);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __tcpunbuf_networkInfoCopy_block_invoke;
  block[3] = &unk_1E688C6E8;
  block[4] = v19;
  void block[5] = v18;
  void block[6] = v16;
  void block[7] = DerivedStorage;
  dispatch_sync(v9, block);
  FigCFDictionarySetDouble();
  FigCFDictionarySetDouble();
  FigCFDictionarySetInt32();
  *a4 = Mutable;
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), (void *)DerivedStorage, (dispatch_function_t)tcpunbuf_networkInfoUpdate);
  _Block_object_dispose(v16, 8);
  _Block_object_dispose(v18, 8);
  _Block_object_dispose(v19, 8);
  return 0;
}

uint64_t tcpunbuf_SetProperty()
{
  return APSDispatchSyncTask();
}

void tcpunbuf_invalidateInternal(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    APTTrafficMetricsConnectionClosed(*(void *)(DerivedStorage + 552));
    if (gLogCategory_APTransportConnectionTCPUnbuffered <= 50
      && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(unsigned char *)uint64_t v3 = 1;
    uint64_t v4 = *(NSObject **)(v3 + 384);
    if (v4)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(v3 + 384));
      dispatch_release(v4);
      *(void *)(v3 + 384) = 0;
    }
    tcpunbuf_cleanUp();
    BOOL v5 = *(NSObject **)(v3 + 24);
    dispatch_sync_f(v5, a1, (dispatch_function_t)tcpunbuf_clearCallbackState);
  }
}

void tcpunbuf_cleanUp()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 168))
  {
    if (!*(unsigned char *)(DerivedStorage + 176)
      || (APSPriorityDispatchSourceResume(), *(unsigned char *)(DerivedStorage + 176) = 0, *(void *)(DerivedStorage + 168)))
    {
      APSPriorityDispatchSourceCancel();
      CFRelease(*(CFTypeRef *)(DerivedStorage + 168));
      *(void *)(DerivedStorage + 168) = 0;
    }
  }
  uint64_t v1 = *(NSObject **)(DerivedStorage + 160);
  if (v1)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 160));
    dispatch_release(v1);
    *(void *)(DerivedStorage + 160) = 0;
  }
  *(_DWORD *)(DerivedStorage + 180) = 6;
  uint64_t v2 = *(const void **)(DerivedStorage + 152);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 152) = 0;
  }
}

void tcpunbuf_clearCallbackState()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[4] = 0;
  DerivedStorage[5] = 0;
  uint64_t v1 = DerivedStorage[6];
  if (v1)
  {
    dispatch_release(v1);
    DerivedStorage[6] = 0;
  }
}

double __tcpunbuf_networkInfoCopy_block_invoke(void *a1)
{
  uint64_t v1 = a1[7];
  *(void *)(*(void *)(a1[4] + 8) + 24) = *(void *)(v1 + 248);
  double result = *(double *)(v1 + 272);
  *(double *)(*(void *)(a1[5] + 8) + 24) = result;
  *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = *(_DWORD *)(v1 + 288);
  return result;
}

void tcpunbuf_networkInfoUpdate(uint64_t a1)
{
  socklen_t v15 = 408;
  mach_absolute_time();
  uint64_t v2 = UpTicksToNanoseconds();
  if (*(_DWORD *)(a1 + 180) == 5)
  {
    uint64_t v3 = v2;
    uint64_t Value = APSWrapperGetValue();
    if (Value)
    {
      if ((unint64_t)(v3 - *(void *)(a1 + 296)) >= 0x2FAF081)
      {
        memset(__src, 0, 408);
        if (getsockopt(*(_DWORD *)(Value + 4), 6, 512, __src, &v15))
        {
          APSLogErrorAt();
          if (gLogCategory_APTransportConnectionTCPUnbuffered <= 50
            && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        else
        {
          uint64_t v5 = *(void *)((char *)&__src[9] + 4);
          uint64_t v6 = *(void *)((char *)&__src[10] + 4);
          uint64_t v8 = *(void *)(a1 + 304);
          uint64_t v7 = *(void *)(a1 + 312);
          *(void *)(a1 + 304) = *(void *)((char *)&__src[9] + 4);
          *(void *)(a1 + 312) = v6;
          double v9 = 0.0;
          unint64_t v10 = v5 - v8;
          if (v10) {
            double v9 = (double)(unint64_t)(v6 - v7) / (double)v10;
          }
          if (*(unsigned char *)(a1 + 320)) {
            double v11 = (double)*(void *)((char *)&__src[16] + 4);
          }
          else {
            double v11 = 8000000.0;
          }
          CFNumberRef v12 = *(NSObject **)(a1 + 232);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 0x40000000;
          block[2] = __tcpunbuf_networkInfoUpdate_block_invoke;
          block[3] = &__block_descriptor_tmp_29_0;
          *(double *)&block[4] = v11;
          void block[5] = a1;
          *(double *)&void block[6] = v9;
          memcpy(v14, __src, sizeof(v14));
          dispatch_sync(v12, block);
          if (gLogCategory_APTransportConnectionTCPUnbuffered <= 20
            && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          *(void *)(a1 + 296) = v3;
        }
      }
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

uint64_t __tcpunbuf_networkInfoUpdate_block_invoke(uint64_t result)
{
  double v1 = *(double *)(result + 32);
  uint64_t v2 = *(void *)(result + 40);
  if (v1 > 0.0)
  {
    if (*(unsigned char *)(v2 + 256))
    {
      *(double *)(v2 + 248) = *(double *)(v2 + 248) + *(double *)(v2 + 240) * (v1 - *(double *)(v2 + 248));
    }
    else
    {
      *(double *)(v2 + 248) = v1;
      *(unsigned char *)(v2 + 256) = 1;
    }
  }
  if (*(unsigned char *)(v2 + 280))
  {
    *(double *)(v2 + 272) = *(double *)(v2 + 272)
                          + *(double *)(v2 + 264) * (*(double *)(result + 48) - *(double *)(v2 + 272));
  }
  else
  {
    *(void *)(v2 + 272) = *(void *)(result + 48);
    *(unsigned char *)(v2 + 280) = 1;
  }
  *(_DWORD *)(v2 + 288) = *(_DWORD *)(result + 80);
  return result;
}

uint64_t tcpunbuf_setPropertyInternal(uint64_t a1)
{
  unsigned int v19 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t Value = APSWrapperGetValue();
  if (CFEqual(*(CFTypeRef *)(a1 + 8), @"PackageType"))
  {
    if (FigCFEqual())
    {
      *(void *)(DerivedStorage + 184) = APTPackageRTPBufferedCreate;
      uint64_t v4 = APTPackageRTPBufferedGetMaxPayloadSize;
LABEL_11:
      *(void *)(DerivedStorage + 192) = v4;
      return v19;
    }
    if (FigCFEqual())
    {
      *(void *)(DerivedStorage + 184) = APTransportPackageBufferedAPAPCreate;
      uint64_t v4 = APTransportPackageBufferedAPAPGetMaxPayloadSize;
      goto LABEL_11;
    }
    if (FigCFEqual())
    {
      *(void *)(DerivedStorage + 184) = APTransportPackageScreenCreate;
      return v19;
    }
    if (gLogCategory_APTransportConnectionTCPUnbuffered <= 90
      && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return -12780;
  }
  if (CFEqual(*(CFTypeRef *)(a1 + 8), @"RemoteNetworkIPAddress"))
  {
    if (!Value)
    {
      uint64_t v5 = *(const void **)(a1 + 16);
      if (v5)
      {
        CFTypeID v6 = CFGetTypeID(v5);
        if (v6 == APSNetworkAddressGetTypeID())
        {
          APSNetworkAddressGetSocketAddr();
          *(_OWORD *)(DerivedStorage + 104) = *(_OWORD *)v18;
          *(_OWORD *)(DerivedStorage + 116) = *(_OWORD *)&v18[12];
LABEL_17:
          SockAddrSetPort();
          return v19;
        }
      }
    }
    goto LABEL_75;
  }
  if (CFEqual(*(CFTypeRef *)(a1 + 8), @"RemoteNetworkPort"))
  {
    if (!Value)
    {
      uint64_t v7 = *(const void **)(a1 + 16);
      if (v7)
      {
        CFTypeID v8 = CFGetTypeID(v7);
        if (v8 == CFNumberGetTypeID())
        {
          *(_DWORD *)(DerivedStorage + 132) = CFGetInt64();
          goto LABEL_17;
        }
      }
    }
LABEL_75:
    APSLogErrorAt();
    return -72322;
  }
  if (CFEqual(*(CFTypeRef *)(a1 + 8), @"BoundInterfaceIndex"))
  {
    if (!Value)
    {
      *(_DWORD *)(DerivedStorage + 136) = CFGetInt64();
      return v19;
    }
    goto LABEL_75;
  }
  if (!CFEqual(*(CFTypeRef *)(a1 + 8), @"PackageSendTimeout"))
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 8), @"ReadyToSendThreshold"))
    {
      double v11 = *(const void **)(a1 + 16);
      if (!v11) {
        goto LABEL_75;
      }
      CFTypeID v12 = CFGetTypeID(v11);
      if (v12 != CFNumberGetTypeID()) {
        goto LABEL_75;
      }
      *(_DWORD *)(DerivedStorage + 332) = CFGetInt64();
      if (gLogCategory_APTransportConnectionTCPUnbuffered > 40
        || gLogCategory_APTransportConnectionTCPUnbuffered == -1 && !_LogCategory_Initialize())
      {
        return v19;
      }
LABEL_39:
      LogPrintF();
      return v19;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 8), @"QualityOfService"))
    {
      __int16 v14 = *(const void **)(a1 + 16);
      if (!v14) {
        goto LABEL_75;
      }
      CFTypeID v15 = CFGetTypeID(v14);
      if (v15 != CFNumberGetTypeID()) {
        goto LABEL_75;
      }
      int v16 = CFGetInt64();
      if (*(unsigned char *)(DerivedStorage + 341) || !Value || (unsigned int v19 = SocketSetQoS()) == 0)
      {
        *(_DWORD *)(DerivedStorage + 336) = v16;
        if (gLogCategory_APTransportConnectionTCPUnbuffered > 50
          || gLogCategory_APTransportConnectionTCPUnbuffered == -1 && !_LogCategory_Initialize())
        {
          return v19;
        }
        goto LABEL_39;
      }
    }
    else
    {
      if (!CFEqual(*(CFTypeRef *)(a1 + 8), @"ReadyToSendCallbackPriority"))
      {
        if (gLogCategory_APTransportConnectionTCPUnbuffered > 30
          || gLogCategory_APTransportConnectionTCPUnbuffered == -1 && !_LogCategory_Initialize())
        {
          return v19;
        }
        goto LABEL_39;
      }
      int v17 = CFGetInt64Ranged();
      if (!*(void *)(DerivedStorage + 64) && v17 != 5)
      {
        APSLogErrorAt();
        return -72321;
      }
      if (!*(void *)(DerivedStorage + 168) || (unsigned int v19 = APSPriorityDispatchSourceSetPriority()) == 0)
      {
        *(_DWORD *)(DerivedStorage + 60) = v17;
        return v19;
      }
    }
    APSLogErrorAt();
    return v19;
  }
  int v10 = CFGetInt64Ranged();
  *(_DWORD *)(DerivedStorage + 328) = v10;
  if (v10 && Value) {
    SocketSetTCPTimeout();
  }
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 40
    && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_39;
  }
  return v19;
}

uint64_t tcpunbuf_DumpHierarchy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 180) == 5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, a3, "Connection:[%{ptr}] (TCPUnbuffered) %''@ Ports:%##a -> %##a%?s%?lu Parent:[%{ptr}]\n", a1, a4, DerivedStorage + 76, DerivedStorage + 104, *(_DWORD *)(DerivedStorage + 136) != 0, " IDX:", *(_DWORD *)(DerivedStorage + 136) != 0, *(unsigned int *)(DerivedStorage + 136), a2);
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, a3, "Connection:[%{ptr}] (TCPUnbuffered) %''@ (Not Connected) Parent:[%{ptr}]\n", a1, a4, a2);
  }
}

uint64_t tcpunbuf_Resume()
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 30
    && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v0 = APSDispatchSyncTask();
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 30
    && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v0;
}

uint64_t tcpunbuf_AddEventCallback(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    uint64_t v6 = 4294894974;
LABEL_7:
    APSLogErrorAt();
    return v6;
  }
  if (!a4)
  {
    uint64_t v6 = 4294894974;
    goto LABEL_7;
  }
  dispatch_retain(a4);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t tcpunbuf_RemoveEventCallback()
{
  return APSDispatchSyncTask();
}

uint64_t tcpunbuf_SetReadyToSendCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 200));
  *(void *)(DerivedStorage + 208) = a2;
  *(void *)(DerivedStorage + 216) = a3;
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 200));
  return 0;
}

uint64_t tcpunbuf_SignalDataAvailable(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)tcpunbuf_signalDataAvailable);
  return 0;
}

uint64_t tcpunbuf_resumeInternal(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unsigned int valuePtr = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  *(void *)int v17 = 0;
  uint64_t v18 = 0;
  if (*(void *)(DerivedStorage + 152))
  {
LABEL_61:
    *(_DWORD *)(DerivedStorage + 180) = 5;
    tcpunbuf_callEventCallback(a1, 5, 0);
    return valuePtr;
  }
  unsigned int valuePtr = SockAddrToString();
  if (valuePtr)
  {
    APSLogErrorAt();
    double v9 = 0;
    int v3 = -1;
    goto LABEL_22;
  }
  int v3 = socket(*(unsigned __int8 *)(DerivedStorage + 105), 1, 6);
  if (v3 < 0)
  {
    if (!*__error())
    {
      unsigned int valuePtr = -6700;
      goto LABEL_20;
    }
    unsigned int valuePtr = *__error();
    if (valuePtr)
    {
LABEL_20:
      APSLogErrorAt();
LABEL_21:
      double v9 = 0;
      goto LABEL_22;
    }
  }
  unsigned int valuePtr = SocketSetNonBlocking();
  if (valuePtr) {
    goto LABEL_20;
  }
  if (*(_DWORD *)(DerivedStorage + 136))
  {
    int v4 = *(unsigned __int8 *)(DerivedStorage + 105);
    if (v4 == 2)
    {
      int v5 = v3;
      int v6 = 0;
      int v7 = 25;
    }
    else
    {
      if (v4 != 30) {
        goto LABEL_13;
      }
      int v5 = v3;
      int v6 = 41;
      int v7 = 125;
    }
    unsigned int valuePtr = setsockopt(v5, v6, v7, (const void *)(DerivedStorage + 136), 4u);
    if (valuePtr) {
      goto LABEL_20;
    }
  }
LABEL_13:
  int v8 = *(_DWORD *)(DerivedStorage + 56);
  if ((v8 & 0xB) != 0)
  {
    SocketSetP2P();
    int v8 = *(_DWORD *)(DerivedStorage + 56);
  }
  if ((v8 & 0x10) != 0)
  {
    if (gLogCategory_APTransportConnectionTCPUnbuffered <= 30
      && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v17[1] = 4;
    setsockopt(v3, 0xFFFF, 4225, &v17[1], 4u);
  }
  if (!*(unsigned char *)(DerivedStorage + 341)) {
    SocketSetQoS();
  }
  CFUUIDRef v11 = *(const __CFUUID **)(DerivedStorage + 144);
  if (v11)
  {
    CFUUIDBytes v16 = CFUUIDGetUUIDBytes(v11);
    setsockopt(v3, 0xFFFF, 4360, &v16, 0x10u);
  }
  v17[1] = 1;
  setsockopt(v3, 0xFFFF, 4130, &v17[1], 4u);
  int v12 = *(unsigned __int8 *)(DerivedStorage + 342);
  *(_DWORD *)(DerivedStorage + 344) = *(unsigned char *)(DerivedStorage + 342) != 0;
  tcpunbuf_setAggregationSocketOption(v3, v12);
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 50
    && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  SocketSetBufferSize();
  SocketSetBufferSize();
  if (*(_DWORD *)(DerivedStorage + 328)) {
    SocketSetTCPTimeout();
  }
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 40
    && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  mach_absolute_time();
  UpTicksToMicroseconds();
  unsigned int valuePtr = SocketConnect();
  if (valuePtr)
  {
    APSLogErrorAt();
    if (gLogCategory_APTransportConnectionTCPUnbuffered <= 90
      && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_21;
  }
  v17[0] = 28;
  unsigned int valuePtr = getsockname(v3, (sockaddr *)(DerivedStorage + 76), v17);
  if (valuePtr) {
    goto LABEL_20;
  }
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 50
    && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
  {
    mach_absolute_time();
    UpTicksToMicroseconds();
    LogPrintF();
  }
  APTTrafficMetricsConnectionFormed(*(void *)(DerivedStorage + 552));
  unsigned int valuePtr = NetSocket_CreateWithNative();
  if (valuePtr) {
    goto LABEL_20;
  }
  unsigned int valuePtr = APSWrapperCreate();
  if (valuePtr) {
    goto LABEL_20;
  }
  unsigned int valuePtr = tcpunbuf_setupDataSocketReadSource(a1);
  if (valuePtr) {
    goto LABEL_20;
  }
  if (!*(unsigned char *)(DerivedStorage + 340)) {
    goto LABEL_59;
  }
  socket_setLowWatermarkWriteable(v3, *(_DWORD *)(DerivedStorage + 332));
  uint64_t v13 = malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
  double v9 = v13;
  if (v13)
  {
    *uint64_t v13 = a1;
    v13[1] = CFRetain(*(CFTypeRef *)(DerivedStorage + 152));
    unsigned int valuePtr = APSPriorityDispatchSourceCreate();
    if (!valuePtr)
    {
      *(unsigned char *)(DerivedStorage + 176) = 1;
LABEL_59:
      v17[1] = 1;
      int v14 = setsockopt(v3, 6, 514, &v17[1], 4u);
      *(unsigned char *)(DerivedStorage + 320) = v14 == 0;
      unsigned int valuePtr = 0;
      if (!v14)
      {
        *(void *)&v16.byte0 = 0x1E0000000ALL;
        setsockopt(v3, 6, 515, &v16, 8u);
      }
      goto LABEL_61;
    }
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    unsigned int valuePtr = -72323;
  }
LABEL_22:
  *(_DWORD *)(DerivedStorage + 180) = 4;
  CFNumberRef v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  tcpunbuf_callEventCallback(a1, 4, v10);
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    tcpunbuf_freeDispatchSourceContext(v9);
  }
  if ((v3 & 0x80000000) == 0 && close(v3) && *__error()) {
    __error();
  }
  return valuePtr;
}

uint64_t tcpunbuf_setAggregationSocketOption(int a1, int a2)
{
  BOOL v5 = a2 == 0;
  setsockopt(a1, 6, 1, &v5, 4u);
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 30
    && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  BOOL v5 = a2 != 0;
  uint64_t result = setsockopt(a1, 6, 4, &v5, 4u);
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 30)
  {
    if (gLogCategory_APTransportConnectionTCPUnbuffered != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t tcpunbuf_finalizeWrappedNetSocket()
{
  NetSocket_Cancel();
  return NetSocket_Delete();
}

uint64_t tcpunbuf_setupDataSocketReadSource(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uintptr_t v3 = *(unsigned int *)(APSWrapperGetValue() + 4);
  if ((v3 & 0x80000000) != 0)
  {
    APSLogErrorAt();
    uint64_t v7 = 4294894972;
LABEL_8:
    APSSignalErrorAt();
    return v7;
  }
  dispatch_source_t v4 = dispatch_source_create(MEMORY[0x1E4F14478], v3, 0, *(dispatch_queue_t *)(DerivedStorage + 8));
  *(void *)(DerivedStorage + 160) = v4;
  if (!v4 || (BOOL v5 = malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL)) == 0)
  {
    uint64_t v7 = 4294894973;
    APSLogErrorAt();
    goto LABEL_8;
  }
  int v6 = v5;
  *BOOL v5 = a1;
  v5[1] = CFRetain(*(CFTypeRef *)(DerivedStorage + 152));
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(DerivedStorage + 160), (dispatch_function_t)tcpunbuf_receivedData);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(DerivedStorage + 160), (dispatch_function_t)tcpunbuf_freeDispatchSourceContext);
  dispatch_set_context(*(dispatch_object_t *)(DerivedStorage + 160), v6);
  dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 160));
  return 0;
}

uint64_t socket_setLowWatermarkWriteable(int a1, unsigned int a2)
{
  unsigned int v4 = a2;
  if (a2 > 0xF9F)
  {
    if (a2 < 0xFA01) {
      goto LABEL_6;
    }
    int v2 = 64000;
  }
  else
  {
    int v2 = 4000;
  }
  unsigned int v4 = v2;
LABEL_6:
  uint64_t result = setsockopt(a1, 6, 513, &v4, 4u);
  if (result) {
    return APSLogErrorAt();
  }
  return result;
}

void tcpunbuf_canWriteData(void **a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 340))
  {
    uint64_t v3 = DerivedStorage;
    if (*(_DWORD *)(DerivedStorage + 180) == 5)
    {
      APTTrafficMetricsCanWriteData(*(void *)(DerivedStorage + 552));
      if (*(_DWORD *)(v3 + 392) == 1)
      {
        *(_DWORD *)(v3 + 392) = 0;
        if (gLogCategory_APTransportConnectionTCPUnbuffered <= 50
          && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      dispatch_source_set_timer(*(dispatch_source_t *)(v3 + 384), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    }
  }
  unsigned int v4 = *a1;
  tcpunbuf_requestAndSendData(v4);
}

void tcpunbuf_freeDispatchSourceContext(void *a1)
{
  int v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  free(a1);
}

unsigned char *tcpunbuf_callEventCallback(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    if (a3) {
      CFRetain(a3);
    }
    return (unsigned char *)APSDispatchAsyncFHelper();
  }
  return result;
}

void tcpunbuf_receivedData(uint64_t *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int valuePtr = 0;
  uint64_t v1 = *a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t Value = APSWrapperGetValue();
  if (!*(unsigned char *)DerivedStorage && *(_DWORD *)(DerivedStorage + 180) == 5)
  {
    uint64_t v4 = Value;
    uintptr_t data = dispatch_source_get_data(*(dispatch_source_t *)(DerivedStorage + 160));
    if (data)
    {
      unint64_t v6 = data;
      if (gLogCategory_APTransportConnectionTCPUnbuffered <= 60
        && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      while (1)
      {
        uint64_t v7 = v6 >= 0x400 ? 1024 : v6;
        uint64_t v10 = 0;
        int valuePtr = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned char *, uint64_t *, void, uint64_t))(v4 + 24))(v4, v7, v7, v12, &v10, 0, 1);
        if (valuePtr) {
          break;
        }
        v6 -= v10;
        if (!v6) {
          return;
        }
      }
      APSLogErrorAt();
    }
    else if (gLogCategory_APTransportConnectionTCPUnbuffered <= 90 {
           && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
    }
    {
      LogPrintF();
    }
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)v8)
    {
      APTTrafficMetricsConnectionClosed(*(void *)(v8 + 552));
      tcpunbuf_cleanUp();
    }
    CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    tcpunbuf_callEventCallback(v1, 6, v9);
    if (v9) {
      CFRelease(v9);
    }
  }
}

void tcpunbuf_requestAndSendData(void *a1)
{
  unsigned int v39 = 0;
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t Value = APSWrapperGetValue();
  if (*(_DWORD *)(DerivedStorage + 180) != 5)
  {
    BOOL v5 = 0;
    *(_DWORD *)(DerivedStorage + 224) = -72320;
    goto LABEL_67;
  }
  uint64_t v4 = Value;
  if (*(unsigned char *)(DerivedStorage + 72) && *(_DWORD *)(DerivedStorage + 536))
  {
    BOOL v5 = 0;
    goto LABEL_5;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 200));
  if (!*(void *)(DerivedStorage + 208)) {
    goto LABEL_86;
  }
  int v10 = (*(uint64_t (**)(void, CFTypeRef *))(DerivedStorage + 184))(*MEMORY[0x1E4F1CF80], &cf);
  if (v10)
  {
    int v20 = v10;
    APSLogErrorAt();
    BOOL v5 = 0;
    char v21 = 0;
LABEL_24:
    int v22 = *(_DWORD *)(DerivedStorage + 180);
    *(_DWORD *)(DerivedStorage + 224) = v20;
    if (v22 == 5) {
      dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)tcpunbuf_requestAndSendData);
    }
    if (v21) {
      goto LABEL_67;
    }
LABEL_27:
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 200));
    goto LABEL_67;
  }
  APTTrafficMetricsRequestDataStarted(*(void *)(DerivedStorage + 552));
  (*(void (**)(void, CFTypeRef *, void))(DerivedStorage + 208))(*(void *)(DerivedStorage + 216), &cf, *(unsigned int *)(DerivedStorage + 224));
  APTTrafficMetricsRequestDataFinished(*(void *)(DerivedStorage + 552));
  if (!cf)
  {
    APTTrafficMetricsConsumedAllData(*(void *)(DerivedStorage + 552));
    if (!cf)
    {
LABEL_86:
      if (*(void *)(DerivedStorage + 168) && !*(unsigned char *)(DerivedStorage + 176))
      {
        APSPriorityDispatchSourceSuspend();
        *(unsigned char *)(DerivedStorage + 176) = 1;
      }
      BOOL v5 = 0;
      *(_DWORD *)(DerivedStorage + 224) = 0;
      goto LABEL_27;
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 200));
  CFTypeRef v11 = cf;
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  int v14 = *(uint64_t (**)(CFTypeRef))(v13 + 64);
  if (!v14 || (uint64_t v15 = v14(v11)) == 0)
  {
    int v20 = -72323;
    APSLogErrorAt();
    APSSignalErrorAt();
    BOOL v5 = 0;
LABEL_23:
    char v21 = 1;
    goto LABEL_24;
  }
  BOOL v5 = (void *)v15;
  int IOVecArrayWithBlockBuffer = FigMakeIOVecArrayWithBlockBuffer();
  if (IOVecArrayWithBlockBuffer)
  {
    int v20 = IOVecArrayWithBlockBuffer;
    APSLogErrorAt();
    goto LABEL_23;
  }
  CFTypeRef v17 = cf;
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  long long v23 = *(uint64_t (**)(CFTypeRef))(v19 + 136);
  if (v23) {
    int v24 = v23(v17);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = CMBaseObjectGetDerivedStorage();
  int v26 = v24 == 0;
  if (*(unsigned char *)(v25 + 342))
  {
    if (*(_DWORD *)(v25 + 344) != v26)
    {
      *(_DWORD *)(v25 + 344) = v26;
      uint64_t v27 = APSWrapperGetValue();
      tcpunbuf_setAggregationSocketOption(*(_DWORD *)(v27 + 4), v24 == 0);
      if (gLogCategory_APTransportConnectionTCPUnbuffered <= 50
        && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
  }
  if (!*(unsigned char *)(DerivedStorage + 72)) {
    goto LABEL_42;
  }
  *(void *)(DerivedStorage + 528) = DerivedStorage + 400;
  *(_DWORD *)(DerivedStorage + 536) = v39;
  uint64_t v28 = *(const void **)(DerivedStorage + 544);
  *(void *)(DerivedStorage + 544) = v5;
  CFRetain(v5);
  if (v28) {
    CFRelease(v28);
  }
LABEL_5:
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
LABEL_42:
    CMBlockBufferGetDataLength((CMBlockBufferRef)v5);
    goto LABEL_43;
  }
  int v6 = *(_DWORD *)(DerivedStorage + 536);
  if (v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (uint64_t *)(*(void *)(DerivedStorage + 528) + 8);
    do
    {
      uint64_t v9 = *v8;
      v8 += 2;
      v7 += v9;
      --v6;
    }
    while (v6);
  }
LABEL_43:
  APTTrafficMetricsSendStarted(*(void *)(DerivedStorage + 552));
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    int v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(v4 + 40))(v4, DerivedStorage + 400, v39, *(unsigned int *)(DerivedStorage + 328));
    if (!v35)
    {
LABEL_64:
      APTTrafficMetricsSendFinished(*(void *)(DerivedStorage + 552));
      tcpunbuf_networkInfoUpdate(DerivedStorage);
      if (!*(unsigned char *)(DerivedStorage + 340)) {
        dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)tcpunbuf_requestAndSendData);
      }
      goto LABEL_66;
    }
    int v20 = v35;
    if (v35 == -6723)
    {
LABEL_66:
      *(_DWORD *)(DerivedStorage + 224) = 0;
      goto LABEL_67;
    }
    APSLogErrorAt();
    if (gLogCategory_APTransportConnectionTCPUnbuffered <= 90
      && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_23;
  }
  NetSocket_GetNative();
  int v29 = (int *)(DerivedStorage + 536);
  int v30 = SocketWriteData();
  if (v30 == 35)
  {
    int v31 = *v29;
    if (*v29 >= 1)
    {
      uint64_t v32 = 0;
      uint64_t v33 = (uint64_t *)(*(void *)(DerivedStorage + 528) + 8);
      do
      {
        uint64_t v34 = *v33;
        v33 += 2;
        v32 += v34;
        --v31;
      }
      while (v31);
    }
    if (gLogCategory_APTransportConnectionTCPUnbuffered <= 30
      && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_64;
  }
  int v36 = v30;
  uint64_t v37 = *(const void **)(DerivedStorage + 544);
  if (v37)
  {
    CFRelease(v37);
    *(void *)(DerivedStorage + 544) = 0;
  }
  int *v29 = 0;
  if (!v36) {
    goto LABEL_64;
  }
  APSLogErrorAt();
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 90
    && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_DWORD *)(DerivedStorage + 224) = v36;
  if (*(_DWORD *)(DerivedStorage + 180) == 5) {
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)tcpunbuf_requestAndSendData);
  }
LABEL_67:
  if (cf) {
    CFRelease(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void tcpunbuf_deferCallEventCallback(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 40)) {
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), a1, (dispatch_function_t)tcpunbuf_callEventCallbackOnEventQueue);
  }
  uint64_t v3 = (const void *)a1[2];
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t tcpunbuf_callEventCallbackOnEventQueue(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(DerivedStorage + 32);
  BOOL v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(DerivedStorage + 40);
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  return v5(v6, v3, v4);
}

void tcpunbuf_addEventCallbackInternal(uint64_t a1)
{
  tcpunbuf_setEventCallback(a1);
  int v2 = *(NSObject **)(a1 + 24);
  if (v2)
  {
    dispatch_release(v2);
  }
}

uint64_t tcpunbuf_setEventCallback(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)(DerivedStorage + 32) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(NSObject **)(DerivedStorage + 48);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(DerivedStorage + 48) = 0;
  }
  uint64_t v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    *(void *)(DerivedStorage + 48) = v4;
    dispatch_retain(v4);
  }
  return 0;
}

void tcpunbuf_signalDataAvailable(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  APTTrafficMetricsDataAvailable(*(void *)(DerivedStorage + 552));
  if (*(void *)(DerivedStorage + 168) && *(unsigned char *)(DerivedStorage + 176))
  {
    APSPriorityDispatchSourceResume();
    *(unsigned char *)(DerivedStorage + 176) = 0;
  }
  if (*(unsigned char *)(DerivedStorage + 340))
  {
    uint64_t v3 = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)(v3 + 340)) {
      return;
    }
    uint64_t v4 = v3;
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    if (*(void *)(v5 + 384)) {
      goto LABEL_10;
    }
    uint64_t v6 = v5;
    if (!*(unsigned char *)(v5 + 340)) {
      goto LABEL_10;
    }
    uint64_t v7 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v5 + 8));
    *(void *)(v6 + 384) = v7;
    if (v7)
    {
      handler.value = MEMORY[0x1E4F143A8];
      *(void *)&handler.timescale = 0x40000000;
      handler.epoch = (CMTimeEpoch)__tcpunbuf_ensureStallMonitorTimerCreated_block_invoke;
      CFTypeRef v11 = &__block_descriptor_tmp_61;
      uint64_t v12 = a1;
      dispatch_source_set_event_handler(v7, &handler);
      dispatch_source_set_timer(*(dispatch_source_t *)(v6 + 384), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
      dispatch_resume(*(dispatch_object_t *)(v6 + 384));
LABEL_10:
      CMTime handler = *(CMTime *)(v4 + 360);
      Float64 Seconds = CMTimeGetSeconds(&handler);
      dispatch_time_t v9 = dispatch_time(0, (uint64_t)(Seconds * 1000000000.0));
      dispatch_source_set_timer(*(dispatch_source_t *)(v4 + 384), v9, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
      return;
    }
    APSLogErrorAt();
    APSLogErrorAt();
    if (gLogCategory_APTransportConnectionTCPUnbuffered <= 90
      && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    tcpunbuf_requestAndSendData(a1);
  }
}

uint64_t __tcpunbuf_ensureStallMonitorTimerCreated_block_invoke()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(result + 392) = 1;
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 50)
  {
    if (gLogCategory_APTransportConnectionTCPUnbuffered != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t APBrokeredReceiverGetTypeID()
{
  if (APBrokeredReceiverGetTypeID_initOnce != -1) {
    dispatch_once_f(&APBrokeredReceiverGetTypeID_initOnce, &APBrokeredReceiverGetTypeID_typeID, (dispatch_function_t)_APBrokeredReceiverClassRegister);
  }
  return APBrokeredReceiverGetTypeID_typeID;
}

uint64_t _APBrokeredReceiverClassRegister(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APBrokeredReceiverCreateWithTXTRecordBase64(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (!a1 || !a2 || !a3 || !a4 || !a5 || !a6 || !a8)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  if (APBrokeredReceiverGetTypeID_initOnce != -1) {
    dispatch_once_f(&APBrokeredReceiverGetTypeID_initOnce, &APBrokeredReceiverGetTypeID_typeID, (dispatch_function_t)_APBrokeredReceiverClassRegister);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  CFUUIDBytes v16 = Instance;
  Instance[3] = 0u;
  Instance[4] = 0u;
  Instance[1] = 0u;
  Instance[2] = 0u;
  *((void *)Instance + 2) = CFRetain(a1);
  *((void *)v16 + 3) = CFRetain(a2);
  *((void *)v16 + 4) = CFRetain(a3);
  *((void *)v16 + 5) = CFRetain(a4);
  *((void *)v16 + 6) = CFRetain(a5);
  uint64_t v17 = APSCFDataCreateWithBase64String();
  *((void *)v16 + 8) = v17;
  if (!v17)
  {
    APSLogErrorAt();
    uint64_t v21 = 4294960568;
LABEL_29:
    CFRelease(v16);
    return v21;
  }
  if (a7)
  {
    CFDataRef v18 = (const __CFData *)APSCFDataCreateWithBase64String();
    *((void *)v16 + 9) = v18;
    if (!v18 || CFDataGetLength(v18) != 32)
    {
      APSLogErrorAt();
      uint64_t v21 = 4294960591;
      goto LABEL_29;
    }
    CFDataRef v19 = (const __CFData *)*((void *)v16 + 8);
  }
  else
  {
    CFDataRef v19 = (const __CFData *)v17;
  }
  uint64_t v20 = APBrokeredReceiverCopyCFStringFromTXTRecord(@"deviceid", v19, (CFStringRef *)v16 + 7);
  if (v20)
  {
    uint64_t v21 = v20;
    APSLogErrorAt();
    goto LABEL_29;
  }
  if (gLogCategory_APBrokeredReceiver <= 50
    && (gLogCategory_APBrokeredReceiver != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v21 = 0;
  *a8 = v16;
  return v21;
}

uint64_t APBrokeredReceiverCopyCFStringFromTXTRecord(const __CFString *a1, CFDataRef theData, CFStringRef *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1 && theData)
  {
    uint8_t valueLen = 0;
    BytePtr = CFDataGetBytePtr(theData);
    uint16_t Length = CFDataGetLength(theData);
    buffer[0] = 0;
    CFStringGetCString(a1, buffer, 256, 0x8000100u);
    ValuePtr = (const char *)TXTRecordGetValuePtr(Length, BytePtr, buffer, &valueLen);
    if (ValuePtr)
    {
      dispatch_time_t v9 = (const UInt8 *)ValuePtr;
      uint8_t valueLen = strnlen(ValuePtr, valueLen);
      CFStringRef v10 = CFStringCreateWithBytes(0, v9, valueLen, 0x8000100u, 0);
      if (v10)
      {
        CFStringRef v11 = v10;
        uint64_t result = 0;
        *a3 = v11;
      }
      else
      {
        APSLogErrorAt();
        return 4294960554;
      }
    }
    else
    {
      return 4294960569;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return result;
}

uint64_t APBrokeredReceiverGetDeviceID(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t APBrokeredReceiverGetBrokerGroupID(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t APBrokeredReceiverGetReceiverGroupUUID(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t APBrokeredReceiverGetPublicReceiverUUID(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t APBrokeredReceiverGetLTPKHash(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t APBrokeredReceiverGetServiceType(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t APBrokeredReceiverCopyBonjourInfo(uint64_t a1, int a2, __CFDictionary **a3)
{
  v18[1] = *(const void **)MEMORY[0x1E4F143B8];
  CFStringRef DNSName = APBrokeredReceiverCreateDNSName(*(void *)(a1 + 16), *(void *)(a1 + 32));
  if (!DNSName)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  CFStringRef v7 = DNSName;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    dispatch_time_t v9 = Mutable;
    CFDictionarySetValue(Mutable, @"domain", @"local.");
    CFDictionarySetValue(v9, @"ifname", @"broker0");
    CFDictionarySetInt64();
    FigCFDictionarySetValue();
    v18[0] = v9;
    CFArrayRef v10 = CFArrayCreate(0, v18, 1, MEMORY[0x1E4F1D510]);
    if (v10)
    {
      CFArrayRef v11 = v10;
      CFRelease(v9);
      uint64_t v12 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v12)
      {
        uint64_t v13 = v12;
        CFDictionarySetValue(v12, @"deviceID", *(const void **)(a1 + 56));
        CFDictionarySetValue(v13, @"name", *(const void **)(a1 + 40));
        if (a2)
        {
          int v14 = (const void **)(a1 + 48);
          CFDictionarySetValue(v13, @"removedServices", v11);
          uint64_t v15 = @"serviceType";
        }
        else
        {
          CFDictionarySetValue(v13, @"services", v11);
          CFDictionarySetValue(v13, @"serviceType", *(const void **)(a1 + 48));
          int v14 = (const void **)(a1 + 64);
          uint64_t v15 = @"txt";
        }
        CFDictionarySetValue(v13, v15, *v14);
        uint64_t v16 = 0;
        *a3 = v13;
      }
      else
      {
        APSLogErrorAt();
        uint64_t v16 = 4294960568;
      }
      CFRelease(v11);
      goto LABEL_10;
    }
    APSLogErrorAt();
    CFRelease(v9);
  }
  else
  {
    APSLogErrorAt();
  }
  uint64_t v16 = 4294960568;
  APSLogErrorAt();
LABEL_10:
  CFRelease(v7);
  return v16;
}

void APBrokeredReceiverCopyInfoFromDNSName(CFStringRef theString, CFTypeRef *a2, CFTypeRef *a3)
{
  if (theString)
  {
    if (a2)
    {
      if (a3)
      {
        CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString, @"\x1C");
        if (ArrayBySeparatingStrings)
        {
          CFArrayRef v6 = ArrayBySeparatingStrings;
          if (CFArrayGetCount(ArrayBySeparatingStrings) == 2)
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, 0);
            if (CFStringGetLength(ValueAtIndex) >= 1)
            {
              CFStringRef v8 = (const __CFString *)CFArrayGetValueAtIndex(v6, 1);
              if (CFStringGetLength(v8) >= 1)
              {
                *a2 = CFRetain(ValueAtIndex);
                *a3 = CFRetain(v8);
              }
            }
          }
          CFRelease(v6);
        }
      }
    }
  }
}

CFStringRef APBrokeredReceiverCreateDNSName(uint64_t a1, uint64_t a2)
{
  CFStringRef result = 0;
  if (a1 && a2)
  {
    CFStringRef result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@%@%@", a1, @"\x1C", a2);
    if (!result)
    {
      APSLogErrorAt();
      return 0;
    }
  }
  return result;
}

void _APBrokeredReceiverFinalize(void *a1)
{
  int v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  uint64_t v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  uint64_t v5 = (const void *)a1[5];
  if (v5)
  {
    CFRelease(v5);
    a1[5] = 0;
  }
  CFArrayRef v6 = (const void *)a1[6];
  if (v6)
  {
    CFRelease(v6);
    a1[6] = 0;
  }
  CFStringRef v7 = (const void *)a1[7];
  if (v7)
  {
    CFRelease(v7);
    a1[7] = 0;
  }
  CFStringRef v8 = (const void *)a1[8];
  if (v8)
  {
    CFRelease(v8);
    a1[8] = 0;
  }
  dispatch_time_t v9 = (const void *)a1[9];
  if (v9)
  {
    CFRelease(v9);
    a1[9] = 0;
  }
}

uint64_t _APBrokeredReceiverEqual(uint64_t a1, unint64_t a2)
{
  if (!(a1 | a2)) {
    return 1;
  }
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t v5 = *(const void **)(a1 + 56);
      CFArrayRef v6 = *(const void **)(a2 + 56);
      if (v5 == v6 || (uint64_t result = 0, v5) && v6 && (uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 56), v6), result))
      {
        CFStringRef v7 = *(const void **)(a1 + 16);
        CFStringRef v8 = *(const void **)(a2 + 16);
        if (v7 == v8 || (uint64_t result = 0, v7) && v8 && (uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 16), v8), result))
        {
          dispatch_time_t v9 = *(const void **)(a1 + 24);
          CFArrayRef v10 = *(const void **)(a2 + 24);
          if (v9 == v10
            || (uint64_t result = 0, v9) && v10 && (uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 24), v10), result))
          {
            CFArrayRef v11 = *(const void **)(a1 + 32);
            uint64_t v12 = *(const void **)(a2 + 32);
            if (v11 == v12
              || (uint64_t result = 0, v11) && v12 && (uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 32), v12), result))
            {
              uint64_t v13 = *(const void **)(a1 + 72);
              int v14 = *(const void **)(a2 + 72);
              return v13 == v14 || v13 && v14 && CFEqual(v13, v14);
            }
          }
        }
      }
    }
  }
  return result;
}

CFHashCode _APBrokeredReceiverHash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 56));
}

uint64_t APTransportStreamSendBackingProviderGetTypeID()
{
  if (APTransportStreamSendBackingProviderGetTypeID_sInitOnce != -1) {
    dispatch_once_f(&APTransportStreamSendBackingProviderGetTypeID_sInitOnce, &APTransportStreamSendBackingProviderGetTypeID_sTypeID, (dispatch_function_t)transportStreamBackingProvider_getTypeID);
  }
  return APTransportStreamSendBackingProviderGetTypeID_sTypeID;
}

uint64_t transportStreamBackingProvider_getTypeID(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APTransportStreamSendBackingProviderCreateWithStreamID(const __CFAllocator *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != 1734700576)
  {
    APSLogErrorAt();
    return 4294894945;
  }
  if (APTransportStreamSendBackingProviderGetTypeID_sInitOnce != -1) {
    dispatch_once_f(&APTransportStreamSendBackingProviderGetTypeID_sInitOnce, &APTransportStreamSendBackingProviderGetTypeID_sTypeID, (dispatch_function_t)transportStreamBackingProvider_getTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    uint64_t v11 = 4294894946;
LABEL_19:
    APSLogErrorAt();
    return v11;
  }
  CFStringRef v7 = (void *)Instance;
  *(void *)(Instance + 64) = 0;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 16) = 0u;
  uint64_t v8 = FigSimpleMutexCreate();
  _DWORD v7[2] = v8;
  if (!v8)
  {
    uint64_t v11 = 4294894946;
    goto LABEL_19;
  }
  v7[3] = 1734700576;
  void v7[6] = APTransportPackageRTPCreate;
  void v7[7] = APTransportPackageRTPCreateWithMessageSize;
  v7[8] = APTransportPackageRTPCreateWithMessageSizeAndType;
  CFMutableSetRef Mutable = CFSetCreateMutable(a1, 0, MEMORY[0x1E4F1D548]);
  v7[4] = Mutable;
  if (!Mutable)
  {
    uint64_t v11 = 4294894946;
    goto LABEL_19;
  }
  CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(a1, 0, 0, MEMORY[0x1E4F1D540]);
  void v7[5] = v10;
  if (!v10)
  {
    uint64_t v11 = 4294894946;
    goto LABEL_19;
  }
  if (gLogCategory_APTransportStreamSendBackingProvider <= 40
    && (gLogCategory_APTransportStreamSendBackingProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v11 = 0;
  *a4 = v7;
  return v11;
}

uint64_t APTransportStreamSendBackingProviderAcquireBBuf(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueCMBlockBuffer **a4)
{
  dataPointerOut = 0;
  CFTypeRef cf = 0;
  uint64_t v6 = *MEMORY[0x1E4F1CF80];
  if (a3 == 48)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(a1 + 56))(v6, a2, &cf);
    if (v7)
    {
      uint64_t v8 = v7;
LABEL_22:
      APSLogErrorAt();
      int v14 = 0;
LABEL_23:
      if (cf) {
        CFRelease(cf);
      }
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(a1 + 64))(v6, a2, a3, &cf);
    if (v9)
    {
      uint64_t v8 = v9;
      goto LABEL_22;
    }
  }
  CFTypeRef v10 = cf;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(CFTypeRef))(v12 + 8);
  if (v13) {
    int v14 = (OpaqueCMBlockBuffer *)v13(v10);
  }
  else {
    int v14 = 0;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(v14, 0, 0, 0, &dataPointerOut);
  if (DataPointer)
  {
    uint64_t v8 = DataPointer;
    APSLogErrorAt();
    goto LABEL_23;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), v14);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), dataPointerOut, cf);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  if (gLogCategory_APTransportStreamSendBackingProvider <= 10
    && (gLogCategory_APTransportStreamSendBackingProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v8 = 0;
  *a4 = v14;
  CFTypeRef cf = 0;
LABEL_17:
  if (v14) {
    CFRelease(v14);
  }
  return v8;
}

uint64_t APTransportStreamSendBackingProviderRelinquishBBuf(uint64_t a1, void *a2)
{
  dataPointerOut = 0;
  if (gLogCategory_APTransportStreamSendBackingProvider <= 10
    && (gLogCategory_APTransportStreamSendBackingProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  if (!CFSetContainsValue(*(CFSetRef *)(a1 + 32), a2))
  {
    APSLogErrorAt();
    uint64_t v7 = 4294894945;
    goto LABEL_9;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)a2, 0, 0, 0, &dataPointerOut);
  if (DataPointer)
  {
    uint64_t v7 = DataPointer;
LABEL_13:
    APSLogErrorAt();
    goto LABEL_9;
  }
  uint64_t Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), dataPointerOut);
  if (!Value)
  {
    uint64_t v7 = 4294894944;
    goto LABEL_13;
  }
  uint64_t v6 = Value;
  CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 32), a2);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), dataPointerOut);
  CFRelease(v6);
  uint64_t v7 = 0;
LABEL_9:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  return v7;
}

uint64_t APTransportStreamSendBackingProviderCopyPackageForAcquiredBBuf(uint64_t a1, CMBlockBufferRef theBuffer, CFTypeRef *a3)
{
  size_t lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  size_t totalLengthOut = 0;
  if (theBuffer)
  {
    uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
    if (DataPointer)
    {
      uint64_t v6 = DataPointer;
      APSLogErrorAt();
    }
    else
    {
      uint64_t v6 = 4294894944;
      if (lengthAtOffsetOut == totalLengthOut)
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
        uint64_t Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), dataPointerOut);
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
        if (Value)
        {
          uint64_t v6 = 0;
          *a3 = CFRetain(Value);
        }
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294894945;
  }
  return v6;
}

uint64_t APTransportStreamSendBackingProviderCopyPackageForGivenBBuf(uint64_t a1, OpaqueCMBlockBuffer *a2, void *a3)
{
  uint64_t v13 = 0;
  CFTypeRef cf = 0;
  (*(void (**)(void, CFTypeRef *))(a1 + 48))(*MEMORY[0x1E4F1CF80], &cf);
  CFTypeRef v6 = cf;
  if (a2)
  {
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    CFTypeRef v10 = *(void (**)(CFTypeRef, OpaqueCMBlockBuffer *))(v8 + 16);
    if (v10) {
      v10(v6, a2);
    }
    uint64_t DataPointer = CMBlockBufferGetDataPointer(a2, 0, 0, 0, &v13);
    if (DataPointer)
    {
      APSLogErrorAt();
    }
    else
    {
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), a2);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v13, cf);
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
    }
  }
  else
  {
    if (cf) {
      CFTypeRef v9 = CFRetain(cf);
    }
    else {
      CFTypeRef v9 = 0;
    }
    uint64_t DataPointer = 0;
    *a3 = v9;
  }
  return DataPointer;
}

uint64_t APTransportStreamSendBackingProviderUpdateAcquiredBBuf(uint64_t a1, CMBlockBufferRef theBuffer)
{
  size_t lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  size_t totalLengthOut = 0;
  if (theBuffer)
  {
    uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
    if (DataPointer)
    {
      uint64_t v5 = DataPointer;
      APSLogErrorAt();
    }
    else
    {
      uint64_t v5 = 4294894944;
      if (lengthAtOffsetOut == totalLengthOut)
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
        uint64_t Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), dataPointerOut);
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
        if (Value)
        {
          uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v7) {
            uint64_t v8 = v7;
          }
          else {
            uint64_t v8 = 0;
          }
          CFTypeRef v9 = *(void (**)(const void *, CMBlockBufferRef))(v8 + 16);
          if (v9) {
            v9(Value, theBuffer);
          }
          if (gLogCategory_APTransportStreamSendBackingProvider <= 10
            && (gLogCategory_APTransportStreamSendBackingProvider != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          return 0;
        }
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294894945;
  }
  return v5;
}

uint64_t transportStreamBackingProvider_Finalize(uint64_t a1)
{
  if (gLogCategory_APTransportStreamSendBackingProvider <= 40
    && (gLogCategory_APTransportStreamSendBackingProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  int v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 40) = 0;
  }
  return FigSimpleMutexDestroy();
}

uint64_t APBrowserCarSessionCreate(const __CFAllocator *a1, const void *a2, const __CFDictionary *a3, void *a4)
{
  CFTypeRef cf = 0;
  if (!a4) {
    APBrowserCarSessionCreate_cold_1();
  }
  APBrowserGetClassID();
  if (CMDerivedObjectCreate()) {
    APBrowserCarSessionCreate_cold_2();
  }
  CFTypeRef v8 = cf;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_queue_t v10 = dispatch_queue_create("APBrowserCarSessionInternalQueue", 0);
  *(void *)(DerivedStorage + 24) = v10;
  if (!v10) {
    goto LABEL_39;
  }
  dispatch_queue_t v11 = dispatch_queue_create("APBrowserCarSessionEventQueue", 0);
  *(void *)(DerivedStorage + 112) = v11;
  if (!v11) {
    goto LABEL_39;
  }
  if (!a2)
  {
    *(void *)(DerivedStorage + 56) = 0;
    goto LABEL_19;
  }
  CFTypeRef v12 = CFRetain(a2);
  *(void *)(DerivedStorage + 56) = v12;
  if (!v12)
  {
LABEL_19:
    APSLogErrorAt();
    uint64_t v17 = 4294954516;
    goto LABEL_27;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
LABEL_39:
    APSLogErrorAt();
    uint64_t v17 = 4294954510;
    goto LABEL_27;
  }
  int v14 = Mutable;
  if (a3)
  {
    uint64_t Value = CFDictionaryGetValue(a3, @"PowerAssertion");
    *(void *)(DerivedStorage + 48) = Value;
    if (Value)
    {
      CFRetain(Value);
      CFDictionarySetValue(v14, @"powerAssertion", *(const void **)(DerivedStorage + 48));
    }
    uint64_t v16 = CFDictionaryGetValue(a3, @"EventRecorder");
    *(void *)(DerivedStorage + 40) = v16;
    if (v16)
    {
      CFRetain(v16);
      CFDictionarySetValue(v14, @"eventRecorder", *(const void **)(DerivedStorage + 40));
    }
    *(unsigned char *)(DerivedStorage + 16) = CFDictionaryGetInt64() != 0;
  }
  if (APSIsVirtualMachine())
  {
    CFDictionarySetInt64();
    if (gLogCategory_APBrowserCarSession <= 50
      && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    CFDictionarySetInt64();
  }
  CFDictionarySetValue(v14, @"enableSessionEvents", (const void *)*MEMORY[0x1E4F1CFD0]);
  uint64_t v18 = APCarPlayHelperSessionCreate(a1, (uint64_t)carSessionBrowser_handleCarPlayHelperEvent, (uint64_t)cf, v14, (void *)(DerivedStorage + 64));
  if (v18)
  {
    uint64_t v17 = v18;
    APSLogErrorAt();
  }
  else
  {
    dispatch_semaphore_t v19 = dispatch_semaphore_create(0);
    *(void *)(DerivedStorage + 8) = v19;
    if (v19 && (v20 = dispatch_group_create(), (*(void *)uint64_t DerivedStorage = v20) != 0))
    {
      dispatch_group_enter(v20);
      uint64_t v17 = 0;
      *a4 = v8;
    }
    else
    {
      APSLogErrorAt();
      uint64_t v17 = 4294954510;
    }
  }
  CFRelease(v14);
LABEL_27:
  uint64_t v21 = *(NSObject **)DerivedStorage;
  if (*(void *)DerivedStorage)
  {
    int v22 = *(NSObject **)(DerivedStorage + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __APBrowserCarSessionCreate_block_invoke;
    block[3] = &__block_descriptor_tmp_9;
    block[4] = cf;
    void block[5] = DerivedStorage;
    dispatch_group_notify(v21, v22, block);
  }
  if (v17)
  {
    if (gLogCategory_APBrowserCarSession <= 90
      && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return v17;
}

void carSessionBrowser_handleCarPlayHelperEvent(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4) {
    CFRetain(a4);
  }
  if (a3) {
    CFRetain(a3);
  }
  CFTypeRef v8 = *(NSObject **)(DerivedStorage + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carSessionBrowser_handleCarPlayHelperEvent_block_invoke;
  block[3] = &__block_descriptor_tmp_33;
  int v10 = a2;
  block[4] = a4;
  void block[5] = a3;
  dispatch_async(v8, block);
}

NSObject *__APBrowserCarSessionCreate_block_invoke(uint64_t a1)
{
  carSessionBrowser_dispatchEvent(*(const void **)(a1 + 32), 8, 0);
  uint64_t result = *(NSObject **)(*(void *)(a1 + 40) + 8);
  if (result)
  {
    return dispatch_semaphore_signal(result);
  }
  return result;
}

void carSessionBrowser_dispatchEvent(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = *(void *)(DerivedStorage + 120);
  if (v7)
  {
    uint64_t v8 = DerivedStorage;
    uint64_t v9 = *(void *)(DerivedStorage + 128);
    if (gLogCategory_APBrowserCarSession <= 20
      && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
    {
      APBrowserGetEventString(a2);
      LogPrintF();
    }
    if (a1) {
      CFRetain(a1);
    }
    if (a3) {
      CFRetain(a3);
    }
    int v10 = *(NSObject **)(v8 + 112);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __carSessionBrowser_dispatchEvent_block_invoke;
    block[3] = &__block_descriptor_tmp_46_1;
    block[4] = v7;
    void block[5] = a1;
    int v12 = a2;
    void block[6] = a3;
    void block[7] = v9;
    dispatch_async(v10, block);
  }
}

uint64_t carSessionBrowser_invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 24);
  if (v1)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __carSessionBrowser_invalidate_block_invoke;
    block[3] = &__block_descriptor_tmp_11_0;
    block[4] = DerivedStorage;
    dispatch_sync(v1, block);
  }
  return 0;
}

void carSessionBrowser_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 24);
  if (v1)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __carSessionBrowser_finalize_block_invoke;
    block[3] = &__block_descriptor_tmp_12_2;
    block[4] = DerivedStorage;
    dispatch_sync(v1, block);
    carSessionBrowser_invalidate();
    int v2 = *(NSObject **)(DerivedStorage + 8);
    if (v2) {
      dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    }
    dispatch_sync(*(dispatch_queue_t *)(DerivedStorage + 24), &__block_literal_global_9);
    uint64_t v3 = *(NSObject **)(DerivedStorage + 24);
    if (v3)
    {
      dispatch_release(v3);
      *(void *)(DerivedStorage + 24) = 0;
    }
  }
  uint64_t v4 = *(NSObject **)(DerivedStorage + 112);
  if (v4)
  {
    dispatch_sync(v4, &__block_literal_global_16);
    uint64_t v5 = *(NSObject **)(DerivedStorage + 112);
    if (v5)
    {
      dispatch_release(v5);
      *(void *)(DerivedStorage + 112) = 0;
    }
  }
  CFTypeRef v6 = *(const void **)(DerivedStorage + 40);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 40) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 48);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 48) = 0;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 56);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 56) = 0;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 64);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 64) = 0;
  }
  int v10 = *(void **)(DerivedStorage + 80);
  if (v10)
  {
    os_release(v10);
    *(void *)(DerivedStorage + 80) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  dispatch_queue_t v11 = *(NSObject **)(DerivedStorage + 8);
  if (v11)
  {
    dispatch_release(v11);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

uint64_t __carSessionBrowser_invalidate_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (!*(unsigned char *)(v1 + 32))
  {
    uint64_t v2 = result;
    uint64_t result = *(void *)(v1 + 64);
    if (result)
    {
      uint64_t result = APTransportKeepAliveControllerGetCMBaseObject(result);
      if (result)
      {
        uint64_t v3 = result;
        uint64_t VTable = CMBaseObjectGetVTable();
        uint64_t v6 = *(void *)(VTable + 8);
        uint64_t result = VTable + 8;
        uint64_t v5 = v6;
        if (v6) {
          uint64_t v7 = v5;
        }
        else {
          uint64_t v7 = 0;
        }
        uint64_t v8 = *(uint64_t (**)(uint64_t))(v7 + 24);
        if (v8) {
          uint64_t result = v8(v3);
        }
      }
    }
    *(unsigned char *)(*(void *)(v2 + 32) + 32) = 1;
  }
  return result;
}

uint64_t __carSessionBrowser_finalize_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 120) = 0;
  *(void *)(*(void *)(result + 32) + 128) = 0;
  return result;
}

uint64_t carSessionBrowser_getMode(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  int v11 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = *(NSObject **)(DerivedStorage + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __carSessionBrowser_getMode_block_invoke;
    block[3] = &unk_1E688C7F8;
    block[4] = &v8;
    void block[5] = DerivedStorage;
    void block[6] = a2;
    dispatch_sync(v4, block);
    uint64_t v5 = *((unsigned int *)v9 + 6);
  }
  else
  {
    uint64_t v5 = 4294954516;
    *((_DWORD *)v9 + 6) = -12780;
  }
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t carSessionBrowser_setMode(uint64_t a1, int a2)
{
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 == 1)
  {
    uint64_t v6 = 4294895234;
    APSLogErrorAt();
    *((_DWORD *)v11 + 6) = -72062;
  }
  else
  {
    uint64_t v5 = *(NSObject **)(DerivedStorage + 24);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    void v8[2] = __carSessionBrowser_setMode_block_invoke;
    v8[3] = &unk_1E688C820;
    v8[4] = &v10;
    void v8[5] = DerivedStorage;
    __int16 v9 = a2;
    void v8[6] = a1;
    dispatch_sync(v5, v8);
    uint64_t v6 = *((unsigned int *)v11 + 6);
  }
  _Block_object_dispose(&v10, 8);
  return v6;
}

uint64_t carSessionBrowser_setEventHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(NSObject **)(DerivedStorage + 24);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = __carSessionBrowser_setEventHandler_block_invoke;
  void v9[3] = &unk_1E688C848;
  v9[4] = &v10;
  void v9[5] = DerivedStorage;
  void v9[6] = a2;
  void v9[7] = a3;
  dispatch_sync(v6, v9);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

uint64_t carSessionBrowser_getDNSForDeviceID(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = 0;
  dispatch_semaphore_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  int v21 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 || !a6)
  {
    APSLogErrorAt();
    uint64_t v15 = 4294954516;
    *((_DWORD *)v19 + 6) = -12780;
  }
  else
  {
    int v14 = *(NSObject **)(DerivedStorage + 24);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 0x40000000;
    socklen_t v17[2] = __carSessionBrowser_getDNSForDeviceID_block_invoke;
    v17[3] = &unk_1E688C870;
    v17[4] = &v18;
    void v17[5] = DerivedStorage;
    v17[6] = a2;
    v17[7] = a6;
    v17[8] = a7;
    v17[9] = a8;
    dispatch_sync(v14, v17);
    uint64_t v15 = *((unsigned int *)v19 + 6);
  }
  _Block_object_dispose(&v18, 8);
  return v15;
}

uint64_t __carSessionBrowser_getMode_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 40);
  if (*(unsigned char *)(v2 + 32))
  {
    uint64_t result = APSLogErrorAt();
    *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = -12785;
  }
  else
  {
    if (*(unsigned char *)(v2 + 72)) {
      __int16 v3 = 3;
    }
    else {
      __int16 v3 = 0;
    }
    **(_WORD **)(result + 48) = v3;
  }
  return result;
}

void __carSessionBrowser_setMode_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v2 + 32))
  {
    APSLogErrorAt();
    uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8);
    int v15 = -12785;
LABEL_43:
    *(_DWORD *)(v14 + 24) = v15;
    return;
  }
  if (!*(void *)(v2 + 120))
  {
    APSLogErrorAt();
    uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8);
    int v15 = -72060;
    goto LABEL_43;
  }
  if (*(_WORD *)(a1 + 56))
  {
    if (*(_WORD *)(a1 + 56) == 3)
    {
      if (!*(unsigned char *)(v2 + 72))
      {
        if (gLogCategory_APBrowserCarSession <= 50
          && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v3 = *(void *)(a1 + 40);
        if (*(unsigned char *)(v3 + 16))
        {
          if (*(void *)(v3 + 48))
          {
            APSPowerAssertionRaiseTemporary();
            uint64_t v3 = *(void *)(a1 + 40);
          }
          uint64_t v4 = *(void *)(v3 + 64);
          uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v5) {
            uint64_t v6 = v5;
          }
          else {
            uint64_t v6 = 0;
          }
          uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
          if (v7) {
            v7(v4, 1);
          }
        }
        *(unsigned char *)(*(void *)(a1 + 40) + 72) = 1;
      }
    }
    else
    {
      if (gLogCategory_APBrowserCarSession <= 60
        && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -72062;
      APSLogErrorAt();
    }
  }
  else if (*(unsigned char *)(v2 + 72))
  {
    if (gLogCategory_APBrowserCarSession <= 50
      && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v8 = *(void *)(a1 + 40);
    if (*(unsigned char *)(v8 + 16))
    {
      uint64_t v9 = *(void *)(v8 + 64);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      int v13 = *(void (**)(uint64_t, void))(v11 + 8);
      if (v13) {
        v13(v9, 0);
      }
      uint64_t v12 = *(void *)(a1 + 40);
      ++*(_DWORD *)(v12 + 76);
    }
    else
    {
      carSessionBrowser_dispatchEvent(*(const void **)(a1 + 48), 7, 0);
      uint64_t v12 = *(void *)(a1 + 40);
    }
    *(unsigned char *)(v12 + 72) = 0;
  }
}

void *__carSessionBrowser_setEventHandler_block_invoke(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[5];
  if (*(unsigned char *)(v2 + 32))
  {
    uint64_t result = (void *)APSLogErrorAt();
    uint64_t v3 = *(void *)(v1[4] + 8);
    int v4 = -12785;
  }
  else
  {
    if (!*(unsigned char *)(v2 + 72) && !*(_DWORD *)(v2 + 76))
    {
      *(void *)(v2 + 120) = result[6];
      *(void *)(result[5] + 128) = result[7];
      return result;
    }
    uint64_t result = (void *)APSLogErrorAt();
    uint64_t v3 = *(void *)(v1[4] + 8);
    int v4 = -72061;
  }
  *(_DWORD *)(v3 + 24) = v4;
  return result;
}

uint64_t __carSessionBrowser_getDNSForDeviceID_block_invoke(void *a1)
{
  uint64_t v2 = a1[5];
  if (*(unsigned char *)(v2 + 32))
  {
    uint64_t result = APSLogErrorAt();
    uint64_t v5 = *(void *)(a1[4] + 8);
    int v6 = -12785;
LABEL_20:
    *(_DWORD *)(v5 + 24) = v6;
    return result;
  }
  if (*(_DWORD *)(v2 + 76) || !*(unsigned char *)(v2 + 72))
  {
    uint64_t result = APSLogErrorAt();
    uint64_t v5 = *(void *)(a1[4] + 8);
    int v6 = -72061;
    goto LABEL_20;
  }
  if (*(void *)(v2 + 88) != a1[6])
  {
    uint64_t result = APSLogErrorAt();
    uint64_t v5 = *(void *)(a1[4] + 8);
    int v6 = -72063;
    goto LABEL_20;
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = APSNetworkAddressGetCStringRepresentation();
  uint64_t result = *(unsigned int *)(*(void *)(a1[4] + 8) + 24);
  if (result)
  {
    return APSLogErrorAt();
  }
  else
  {
    int v4 = (unsigned char *)a1[9];
    if (v4)
    {
      *(_DWORD *)(a1[5] + 104) = 2;
      *int v4 = 2;
      if (gLogCategory_APBrowserCarSession <= 40)
      {
        if (gLogCategory_APBrowserCarSession != -1) {
          return LogPrintF();
        }
        uint64_t result = _LogCategory_Initialize();
        if (result) {
          return LogPrintF();
        }
      }
    }
    else if (gLogCategory_APBrowserCarSession <= 40)
    {
      if (gLogCategory_APBrowserCarSession != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void __carSessionBrowser_handleCarPlayHelperEvent_block_invoke(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 48))
  {
    case 0:
      if (gLogCategory_APBrowserCarSession <= 30
        && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      carSessionBrowser_networkChanged(*(const void **)(a1 + 32), *(const __CFDictionary **)(a1 + 40));
      goto LABEL_96;
    case 1:
      if (gLogCategory_APBrowserCarSession <= 30
        && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v2 = *(const void **)(a1 + 32);
      CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 40);
      int v39 = 0;
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v38 = 0;
      uint64_t Value = CFDictionaryGetValue(v3, @"advertiserInfo");
      if (!Value || (v6 = Value, (uint64_t v7 = CFDictionaryGetValue(v3, @"networkAddress")) == 0))
      {
        APSLogErrorAt();
        CFMutableDictionaryRef Mutable = 0;
        CFStringRef v8 = 0;
        int v39 = -12780;
        goto LABEL_87;
      }
      CFTypeRef cf = v7;
      CFStringRef v8 = (const __CFString *)APAdvertiserInfoCopyProperty((uint64_t)v6, 0, @"deviceID", 0, &v39);
      if (!v39)
      {
        FigCFStringGetCStringPtrAndBufferToFree();
        CFStringRef v35 = v8;
        CFStringGetLength(v8);
        uint64_t v9 = TextToHardwareAddressScalar();
        int Int64Ranged = CFDictionaryGetInt64Ranged();
        if (v39)
        {
          APSLogErrorAt();
          CFMutableDictionaryRef Mutable = 0;
          goto LABEL_85;
        }
        uint64_t v11 = CFDictionaryGetValue(v3, @"sessionHostInfo");
        if (Int64Ranged == 1)
        {
          if (*(void *)(DerivedStorage + 40)) {
            APSEventRecorderRecordEventWithFlags();
          }
          uint64_t v12 = LogCategoryCopyOSLogHandle();
          int v13 = (void *)v12;
          if (v12) {
            uint64_t v14 = v12;
          }
          else {
            uint64_t v14 = MEMORY[0x1E4F14500];
          }
          if (!os_signpost_enabled(v14)) {
            goto LABEL_43;
          }
          *(_WORD *)buf = 0;
          int v15 = "AP_SIGNPOST_ENDPOINTADDED_USB";
          uint64_t v16 = v14;
          os_signpost_id_t v17 = 730662900;
        }
        else
        {
          if (Int64Ranged != 2) {
            goto LABEL_45;
          }
          if (*(void *)(DerivedStorage + 40)) {
            APSEventRecorderRecordEventWithFlags();
          }
          uint64_t v18 = LogCategoryCopyOSLogHandle();
          int v13 = (void *)v18;
          if (v18) {
            dispatch_semaphore_t v19 = v18;
          }
          else {
            dispatch_semaphore_t v19 = MEMORY[0x1E4F14500];
          }
          if (!os_signpost_enabled(v19))
          {
LABEL_43:
            if (v13) {
              os_release(v13);
            }
LABEL_45:
            uint64_t v20 = *(void *)(DerivedStorage + 88);
            if (v20 == v9)
            {
              if (*(_DWORD *)(DerivedStorage + 104) != Int64Ranged) {
                goto LABEL_62;
              }
              if (FigCFEqual())
              {
                CFMutableDictionaryRef Mutable = 0;
LABEL_84:
                APCarPlayControlServerInjectCommand(*(void *)(DerivedStorage + 56), v9, (uint64_t)"connect");
LABEL_85:
                CFStringRef v8 = v35;
                goto LABEL_86;
              }
              uint64_t v20 = *(void *)(DerivedStorage + 88);
            }
            if (v20 && v20 != v9)
            {
              CFAllocatorRef v25 = CFGetAllocator(v2);
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v25, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (!Mutable) {
                goto LABEL_105;
              }
              CFDictionarySetInt64();
              if (gLogCategory_APBrowserCarSession <= 30
                && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              carSessionBrowser_dispatchEvent(v2, 5, Mutable);
              CFRelease(Mutable);
            }
LABEL_62:
            CFAllocatorRef v26 = CFGetAllocator(v2);
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v26, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (Mutable)
            {
              CFDictionarySetInt64();
              CFDictionarySetValue(Mutable, @"deviceInfo", v6);
              uint64_t v27 = (const void **)MEMORY[0x1E4F1CFC8];
              if (Int64Ranged == 1) {
                uint64_t v27 = (const void **)MEMORY[0x1E4F1CFD0];
              }
              CFDictionarySetValue(Mutable, @"IsConnectedOverUSB", *v27);
              if (v11) {
                CFDictionarySetValue(Mutable, @"sessionHostInfo", v11);
              }
              int v28 = gLogCategory_APBrowserCarSession;
              if (gLogCategory_APBrowserCarSession > 30) {
                goto LABEL_79;
              }
              if (gLogCategory_APBrowserCarSession == -1)
              {
                if (!_LogCategory_Initialize())
                {
LABEL_79:
                  if (*(void *)(DerivedStorage + 88) == v9) {
                    int v29 = 4;
                  }
                  else {
                    int v29 = 3;
                  }
                  carSessionBrowser_dispatchEvent(v2, v29, Mutable);
                  *(_DWORD *)(DerivedStorage + 104) = Int64Ranged;
                  int v30 = *(const void **)(DerivedStorage + 96);
                  *(void *)(DerivedStorage + 88) = v9;
                  *(void *)(DerivedStorage + 96) = cf;
                  CFRetain(cf);
                  if (v30) {
                    CFRelease(v30);
                  }
                  goto LABEL_84;
                }
                int v28 = gLogCategory_APBrowserCarSession;
              }
              if (v28 <= 20)
              {
                if (v28 != -1
                  || (_LogCategory_Initialize(),
                      int v28 = gLogCategory_APBrowserCarSession,
                      gLogCategory_APBrowserCarSession <= 20))
                {
                  if (v28 == -1) {
                    _LogCategory_Initialize();
                  }
                }
              }
              LogPrintF();
              goto LABEL_79;
            }
LABEL_105:
            APSLogErrorAt();
            int v39 = -12786;
            CFStringRef v8 = v35;
            goto LABEL_87;
          }
          *(_WORD *)buf = 0;
          int v15 = "AP_SIGNPOST_ENDPOINTADDED_WIFI";
          uint64_t v16 = v19;
          os_signpost_id_t v17 = 722862484;
        }
        _os_signpost_emit_with_name_impl(&dword_1D087F000, v16, OS_SIGNPOST_EVENT, v17, v15, "", buf, 2u);
        goto LABEL_43;
      }
      APSLogErrorAt();
      CFMutableDictionaryRef Mutable = 0;
LABEL_86:
      if (!v39) {
        goto LABEL_89;
      }
LABEL_87:
      *(void *)(DerivedStorage + 88) = 0;
      *(_DWORD *)(DerivedStorage + 104) = 0;
      int v31 = *(const void **)(DerivedStorage + 96);
      if (v31)
      {
        CFRelease(v31);
        *(void *)(DerivedStorage + 96) = 0;
      }
LABEL_89:
      if (v8) {
        CFRelease(v8);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      uint64_t v32 = v38;
      if (v38)
      {
        uint64_t v38 = 0;
        free(v32);
      }
      if (v39) {
        goto LABEL_20;
      }
LABEL_96:
      uint64_t v33 = *(const void **)(a1 + 32);
      if (v33) {
        CFRelease(v33);
      }
      uint64_t v34 = *(const void **)(a1 + 40);
      if (v34) {
        CFRelease(v34);
      }
      return;
    case 2:
      if (gLogCategory_APBrowserCarSession <= 30
        && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      int v22 = *(const void **)(a1 + 32);
      uint64_t v23 = CMBaseObjectGetDerivedStorage();
      carSessionBrowser_networkChanged(v22, 0);
      carSessionBrowser_dispatchEvent(v22, 7, 0);
      --*(_DWORD *)(v23 + 76);
      goto LABEL_96;
    case 3:
      if (gLogCategory_APBrowserCarSession <= 30
        && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      int v24 = (dispatch_group_t *)CMBaseObjectGetDerivedStorage();
      dispatch_group_leave(*v24);
      goto LABEL_96;
    default:
      if (gLogCategory_APBrowserCarSession <= 90
        && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
LABEL_20:
      APSLogErrorAt();
      goto LABEL_96;
  }
}

uint64_t carSessionBrowser_networkChanged(const void *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && (uint64_t Value = CFDictionaryGetValue(a2, @"interfaceName"), Int64 = CFDictionaryGetInt64(), Value))
  {
    if (!*(void *)(DerivedStorage + 80) && Int64)
    {
      CFDictionaryGetInt64Ranged();
      SNPrintF();
      if (gLogCategory_APBrowserCarSession <= 50
        && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(void *)(DerivedStorage + 80) = os_transaction_create();
    }
  }
  else if (*(void *)(DerivedStorage + 88))
  {
    *(void *)(DerivedStorage + 88) = 0;
    *(_DWORD *)(DerivedStorage + 104) = 0;
    uint64_t v7 = *(const void **)(DerivedStorage + 96);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(DerivedStorage + 96) = 0;
    }
    carSessionBrowser_dispatchEvent(a1, 6, 0);
    if (*(void *)(DerivedStorage + 80))
    {
      CFStringRef v8 = (void *)os_transaction_copy_description();
      if (gLogCategory_APBrowserCarSession <= 50
        && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      free(v8);
      uint64_t v9 = *(void **)(DerivedStorage + 80);
      if (v9)
      {
        os_release(v9);
        *(void *)(DerivedStorage + 80) = 0;
      }
    }
  }
  APSEventRecorderResetEvent();
  return APSEventRecorderResetEvent();
}

void __carSessionBrowser_dispatchEvent_block_invoke(uint64_t a1)
{
  (*(void (**)(void, void, void, void))(a1 + 32))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 64), *(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  CFDictionaryRef v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t APTransportDeviceGetTypeID()
{
  if (APTransportDeviceGetTypeID_sInitOnce != -1) {
    dispatch_once_f(&APTransportDeviceGetTypeID_sInitOnce, &APTransportDeviceGetTypeID_sTypeID, (dispatch_function_t)transportDevice_getTypeID);
  }
  return APTransportDeviceGetTypeID_sTypeID;
}

uint64_t transportDevice_getTypeID(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APTransportDeviceCreate(uint64_t a1, const void *a2, const void *a3, void *a4)
{
  if (a2 && a3)
  {
    uint64_t v7 = transportDevice_create();
    if (v7)
    {
      CFStringRef v8 = (void *)v7;
      *(void *)(v7 + 16) = CFRetain(a2);
      v8[3] = CFRetain(a3);
      uint64_t v9 = FigSimpleMutexCreate();
      void v8[6] = v9;
      if (v9)
      {
        if (gLogCategory_APTransportDevice <= 30
          && (gLogCategory_APTransportDevice != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t result = 0;
        *a4 = v8;
      }
      else
      {
        APSLogErrorAt();
        CFRelease(v8);
        return 4294960568;
      }
    }
    else
    {
      APSLogErrorAt();
      return 4294954510;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294954516;
  }
  return result;
}

uint64_t transportDevice_create()
{
  if (APTransportDeviceGetTypeID_sInitOnce != -1) {
    dispatch_once_f(&APTransportDeviceGetTypeID_sInitOnce, &APTransportDeviceGetTypeID_sTypeID, (dispatch_function_t)transportDevice_getTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v1 = Instance;
  if (Instance)
  {
    *(void *)(Instance + 64) = 0;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
  }
  else
  {
    APSLogErrorAt();
  }
  return v1;
}

uint64_t APTransportDeviceCreateWithNetworkAddress(uint64_t a1, const void *a2, char a3, const void *a4, uint64_t *a5)
{
  if (a2 && a4 && a5)
  {
    uint64_t v9 = transportDevice_create();
    if (v9)
    {
      uint64_t v10 = v9;
      *(void *)(v9 + 24) = CFRetain(a4);
      *(void *)(v10 + 32) = CFRetain(a2);
      *(unsigned char *)(v10 + 40) = a3;
      if (gLogCategory_APTransportDevice <= 30
        && (gLogCategory_APTransportDevice != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t result = 0;
      *a5 = v10;
    }
    else
    {
      APSLogErrorAt();
      return 4294954510;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294954516;
  }
  return result;
}

BOOL APTransportDeviceShouldPerformTrafficRegistration(uint64_t a1)
{
  return !*(void *)(a1 + 32) || CFDictionaryGetInt64() != 0;
}

const void *APTransportDeviceGetDiscoveryID(uint64_t a1)
{
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"deviceID");
}

const void *APTransportDeviceGetAdvertiserInfo(uint64_t a1)
{
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"deviceInfo");
}

const void *APTransportDeviceGetEventRecorder(uint64_t a1)
{
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"eventRecorder");
}

BOOL APTransportDeviceIsConnectedOverUSB()
{
  return CFDictionaryGetInt64() != 0;
}

BOOL APTransportDeviceIsLegacyPresent()
{
  return CFDictionaryGetInt64() != 0;
}

BOOL APTransportDeviceIsModernPresent()
{
  return CFDictionaryGetInt64() != 0;
}

BOOL APTransportDeviceIsModernPresentOnInfra()
{
  return CFDictionaryGetInt64() != 0;
}

BOOL APTransportDeviceIsPresentOnInfra()
{
  return CFDictionaryGetInt64() != 0;
}

uint64_t APTransportDeviceGetTransportsRequiringBroker()
{
  return CFDictionaryGetInt64Ranged();
}

uint64_t APTransportDeviceCopyBrokeredReceiverInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t Int64 = CFDictionaryGetInt64();
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v14 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v13 = v14;
  if (v14) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 104);
  if (v16)
  {
    return v16(v9, Int64, a2, a3, a4, a5);
  }
  return result;
}

BOOL APTransportDeviceHasMinimumRelationship(uint64_t a1, int a2)
{
  if (a2 == 2) {
    return 0;
  }
  if (a2 == 1) {
    return 0;
  }
  return a2 == 0;
}

uint64_t APTransportDeviceIsAssistedDevice(uint64_t a1)
{
  return CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 24), @"assistedInfo");
}

CFTypeRef APTransportDeviceCopyAssistedInfo(uint64_t a1)
{
  CFTypeRef result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"assistedInfo");
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

BOOL APTransportDeviceIsSelf()
{
  uint64_t Int64 = CFDictionaryGetInt64();
  uint64_t v1 = APSGetDeviceID();
  return CFDictionaryGetInt64() || Int64 == v1;
}

BOOL APTransportDeviceIsSameDevice(uint64_t a1, uint64_t a2)
{
  uint64_t Int64 = CFDictionaryGetInt64();
  uint64_t v5 = CFDictionaryGetInt64();
  return *(void *)(a1 + 16) == *(void *)(a2 + 16) && Int64 == v5;
}

uint64_t APTransportDeviceParseInterfaceIndexFromDNSName(char *a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    CFDictionaryRef v3 = strchr(a1, 37);
    if (v3)
    {
      int v4 = v3 + 1;
      uint64_t v5 = strpbrk(v3 + 1, ":]");
      if (!v5) {
        uint64_t v5 = (char *)&v4[strlen(v4)];
      }
      int64_t v6 = v5 - v4;
      if ((unint64_t)(v5 - v4) < 0x11)
      {
        __memcpy_chk();
        v10[v6] = 0;
        unsigned int v7 = if_nametoindex(v10);
        unsigned int v9 = v7;
        if (v7)
        {
LABEL_10:
          uint64_t result = 0;
          *a2 = v7;
          return result;
        }
        if (sscanf(v10, "%u", &v9) == 1)
        {
          unsigned int v7 = v9;
          goto LABEL_10;
        }
      }
      APSLogErrorAt();
      return 4294960554;
    }
    else
    {
      return 4294960569;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

uint64_t APTransportDeviceIsReachable(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v17 = 0;
  CFTypeRef v16 = 0;
  if (*(void *)(a1 + 32)) {
    return *(unsigned __int8 *)(a1 + 40) == a2;
  }
  if (a2 == 3)
  {
    transportDevice_getNANDataSession(a1, 2, &v17);
    if (v17) {
      goto LABEL_27;
    }
  }
  else
  {
    if (a2 != 2)
    {
      bzero(v18, 0x400uLL);
      if (a2 == 4) {
        int v6 = 24;
      }
      else {
        int v6 = 0;
      }
      if (a2) {
        int v7 = v6;
      }
      else {
        int v7 = 3;
      }
      BOOL v8 = (v7 & CFDictionaryGetInt64Ranged()) != 0;
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t Int64 = CFDictionaryGetInt64();
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, BOOL, void, BOOL, char *, uint64_t, void))(v12 + 32);
      if (v13)
      {
        int v14 = v13(v9, Int64, a2 == 1, 0, v8, v18, 1024, 0);
        if (!v14)
        {
          if (a2 != 4) {
            return 1;
          }
          if (aptransportdevice_copyInterfaceNameFromDNSName(v18, &v16))
          {
            APSLogErrorAt();
            uint64_t v4 = 0;
            CFTypeRef v15 = v16;
            if (!v16) {
              return v4;
            }
          }
          else
          {
            CFTypeRef v15 = v16;
            uint64_t v4 = APSIsDirectLinkInterface();
            if (!v15) {
              return v4;
            }
          }
          CFRelease(v15);
          return v4;
        }
        uint64_t v4 = 0;
        if (v14 == -6727) {
          return v4;
        }
      }
LABEL_27:
      APSLogErrorAt();
      return 0;
    }
    transportDevice_getNANDataSession(a1, 1, &v17);
    if (v17) {
      goto LABEL_27;
    }
  }
  return (uint64_t)APTNANDataSessionIsActivatable();
}

uint64_t transportDevice_getNANDataSession(uint64_t a1, int a2, int *a3)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
  if (a2 == 2)
  {
    int v6 = (uint64_t *)(a1 + 64);
    if (!*(void *)(a1 + 64))
    {
      uint64_t v10 = *(const void **)(a1 + 16);
      uint64_t Int64 = CFDictionaryGetInt64();
      int v12 = APTNANDataSessionCreate(2, v10, Int64, (void *)(a1 + 64));
      if (!v12)
      {
        if (gLogCategory_APTransportDevice > 50
          || gLogCategory_APTransportDevice == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_21;
        }
LABEL_12:
        LogPrintF();
        goto LABEL_21;
      }
      int v13 = v12;
      goto LABEL_24;
    }
LABEL_21:
    int v13 = 0;
    uint64_t v14 = *v6;
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    int v6 = (uint64_t *)(a1 + 56);
    if (!*(void *)(a1 + 56))
    {
      int v7 = *(const void **)(a1 + 16);
      uint64_t v8 = CFDictionaryGetInt64();
      int v9 = APTNANDataSessionCreate(1, v7, v8, (void *)(a1 + 56));
      if (!v9)
      {
        if (gLogCategory_APTransportDevice > 50
          || gLogCategory_APTransportDevice == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_21;
        }
        goto LABEL_12;
      }
      int v13 = v9;
LABEL_24:
      APSLogErrorAt();
      goto LABEL_25;
    }
    goto LABEL_21;
  }
  int v13 = -12780;
  APSLogErrorAt();
  if (gLogCategory_APTransportDevice > 90)
  {
LABEL_25:
    uint64_t v14 = 0;
    goto LABEL_26;
  }
  if (gLogCategory_APTransportDevice != -1 || _LogCategory_Initialize()) {
    LogPrintF();
  }
  uint64_t v14 = 0;
  int v13 = -12780;
LABEL_26:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
  *a3 = v13;
  return v14;
}

uint64_t aptransportdevice_copyInterfaceNameFromDNSName(char *a1, CFTypeRef *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = 0;
  *(void *)cStr = 0;
  uint64_t v8 = 0;
  uint64_t result = APTransportDeviceParseInterfaceIndexFromDNSName(a1, &v6);
  if (!result)
  {
    if (if_indextoname(v6, cStr))
    {
      CFStringRef v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x8000100u);
      if (v4)
      {
        CFStringRef v5 = v4;
        *a2 = CFRetain(v4);
        CFRelease(v5);
        return 0;
      }
      else
      {
        APSLogErrorAt();
        return 4294960568;
      }
    }
    else
    {
      APSLogErrorAt();
      return 4294960569;
    }
  }
  return result;
}

void APTransportDeviceGetInfraReachability(uint64_t a1, unsigned char *a2, unsigned char *a3, unsigned char *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  bzero(v20, 0x400uLL);
  CFTypeRef cf = 0;
  char IsReachable = APTransportDeviceIsReachable(a1, 0);
  char v9 = APTransportDeviceIsReachable(a1, 4);
  char v10 = 0;
  if (!*(void *)(a1 + 32))
  {
    BOOL v11 = (CFDictionaryGetInt64Ranged() & 3) != 0;
    uint64_t v12 = *(void *)(a1 + 16);
    uint64_t Int64 = CFDictionaryGetInt64();
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v15 = v14 ? v14 : 0;
    CFTypeRef v16 = *(uint64_t (**)(uint64_t, uint64_t, void, void, BOOL, char *, uint64_t, void))(v15 + 32);
    if (!v16) {
      goto LABEL_9;
    }
    int v17 = v16(v12, Int64, 0, 0, v11, v20, 1024, 0);
    if (!v17)
    {
      if (!aptransportdevice_copyInterfaceNameFromDNSName(v20, &cf))
      {
        char v10 = APSIsEthernetInterface();
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    int v18 = v17;
    char v10 = 0;
    if (v18 != -6727)
    {
LABEL_9:
      APSLogErrorAt();
      char v10 = 0;
    }
  }
LABEL_10:
  if (a2) {
    *a2 = IsReachable;
  }
  if (a3) {
    *a3 = v9;
  }
  if (a4) {
    *a4 = v10;
  }
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t APTransportDeviceGetAddress(uint64_t a1, int a2, uint64_t a3, unsigned char *a4, uint64_t a5, char *a6, uint64_t a7)
{
  unsigned int v29 = 0;
  CFTypeRef cf = 0;
  if (a2 == 4) {
    int v14 = 24;
  }
  else {
    int v14 = 0;
  }
  if (a2) {
    int v15 = v14;
  }
  else {
    int v15 = 3;
  }
  if ((v15 & CFDictionaryGetInt64Ranged()) != 0)
  {
    if (gLogCategory_APTransportDevice <= 30
      && (gLogCategory_APTransportDevice != -1 || _LogCategory_Initialize()))
    {
      CFDictionaryGetInt64Ranged();
      LogPrintF();
    }
    char v17 = 1;
    Browserint Address = APTransportDeviceGetBrowserAddress(a1, a2, a3, 1, a4, a5, a7);
    if (!BrowserAddress) {
      goto LABEL_23;
    }
    uint64_t v19 = BrowserAddress;
LABEL_36:
    APSLogErrorAt();
    goto LABEL_25;
  }
  if (*(void *)(a1 + 32))
  {
    if (*(unsigned __int8 *)(a1 + 40) != a2)
    {
      APSLogErrorAt();
      uint64_t v19 = 4294960569;
      goto LABEL_25;
    }
    uint64_t CStringRepresentation = APSNetworkAddressGetCStringRepresentation();
    if (CStringRepresentation)
    {
      uint64_t v19 = CStringRepresentation;
      goto LABEL_36;
    }
LABEL_14:
    char v17 = 0;
    goto LABEL_23;
  }
  if (a2 == 3)
  {
    uint64_t NANDataSession = transportDevice_getNANDataSession(a1, 2, (int *)&v29);
    uint64_t v19 = v29;
    if (v29) {
      goto LABEL_36;
    }
    uint64_t v25 = APTNANDataSessionCopyPeerAddress(NANDataSession, (uint64_t)&cf);
    if (v25)
    {
      uint64_t v19 = v25;
      goto LABEL_36;
    }
    uint64_t v26 = APSNetworkAddressGetCStringRepresentation();
    if (v26)
    {
      uint64_t v19 = v26;
      goto LABEL_36;
    }
    goto LABEL_14;
  }
  if (a2 == 2)
  {
    uint64_t v18 = transportDevice_getNANDataSession(a1, 1, (int *)&v29);
    uint64_t v19 = v29;
    if (v29) {
      goto LABEL_36;
    }
    uint64_t v20 = APTNANDataSessionCopyPeerAddress(v18, (uint64_t)&cf);
    if (v20)
    {
      uint64_t v19 = v20;
      goto LABEL_36;
    }
    uint64_t v21 = APSNetworkAddressGetCStringRepresentation();
    if (v21)
    {
      uint64_t v19 = v21;
      goto LABEL_36;
    }
    goto LABEL_14;
  }
  if (!*(void *)(a1 + 16))
  {
    uint64_t v19 = 4294960561;
    goto LABEL_36;
  }
  uint64_t v27 = APTransportDeviceGetBrowserAddress(a1, a2, a3, 0, a4, a5, a7);
  char v17 = 0;
  if (v27)
  {
    uint64_t v19 = v27;
    goto LABEL_36;
  }
LABEL_23:
  uint64_t v19 = 0;
  if (a6) {
    *a6 = v17;
  }
LABEL_25:
  if (cf) {
    CFRelease(cf);
  }
  return v19;
}

uint64_t APTransportDeviceGetBrowserAddress(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t Int64 = CFDictionaryGetInt64();
  BOOL v15 = a2 == 1;
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, BOOL, uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t))(v17 + 32);
  if (!v18)
  {
    uint64_t v20 = 4294954514;
    goto LABEL_9;
  }
  uint64_t v19 = v18(v13, Int64, v15, a3, a4, a5, a6, a7);
  uint64_t v20 = v19;
  if (v19)
  {
    if (v19 == -6727)
    {
      uint64_t v20 = 0;
      *a5 = 0;
      return v20;
    }
LABEL_9:
    APSLogErrorAt();
  }
  return v20;
}

uint64_t APTransportDeviceResolveAddress(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a3 == 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t Int64 = CFDictionaryGetInt64();
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 96);
    if (v13)
    {
      uint64_t v14 = v8;
      uint64_t v15 = Int64;
      uint64_t v16 = a2;
      uint64_t v17 = 1;
      uint64_t v18 = a4;
      uint64_t v19 = a5;
      return v13(v14, v15, v16, v17, v18, v19);
    }
    uint64_t v12 = 4294954514;
    APSLogErrorAt();
    a2 = 0;
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 16);
  uint64_t v14 = a5;
  uint64_t v15 = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = a4;
  uint64_t v19 = v12;
  return v13(v14, v15, v16, v17, v18, v19);
}

uint64_t APTransportDeviceStartTracking(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t Int64 = CFDictionaryGetInt64();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  if (!v7)
  {
    uint64_t v8 = 4294954514;
LABEL_10:
    APSLogErrorAt();
    return v8;
  }
  uint64_t v8 = v7(v2, Int64, a2);
  if (v8) {
    goto LABEL_10;
  }
  return v8;
}

uint64_t APTransportDeviceStopTracking(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t Int64 = CFDictionaryGetInt64();
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
    if (!v5)
    {
      uint64_t v1 = 4294954514;
LABEL_10:
      APSLogErrorAt();
      return v1;
    }
    uint64_t v1 = v5(v1, Int64);
    if (v1) {
      goto LABEL_10;
    }
  }
  return v1;
}

uint64_t APTransportDeviceReconfirm(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t Int64 = CFDictionaryGetInt64();
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, void))(v4 + 56);
    if (!v5)
    {
      uint64_t v1 = 4294954514;
LABEL_10:
      APSLogErrorAt();
      return v1;
    }
    uint64_t v1 = v5(v1, Int64, 0);
    if (v1) {
      goto LABEL_10;
    }
  }
  return v1;
}

uint64_t APTransportDeviceTriggerWoLCachingIfNeeded(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t Int64 = CFDictionaryGetInt64();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 72);
  if (!v7)
  {
    uint64_t v8 = 4294954514;
LABEL_10:
    APSLogErrorAt();
    return v8;
  }
  uint64_t v8 = v7(v2, Int64, a2);
  if (v8) {
    goto LABEL_10;
  }
  return v8;
}

uint64_t APTransportDeviceCopyNANDataSession(uint64_t a1, int a2, void *a3)
{
  unsigned int v7 = 0;
  if (a3)
  {
    uint64_t NANDataSession = (const void *)transportDevice_getNANDataSession(a1, a2, (int *)&v7);
    uint64_t v5 = v7;
    if (v7)
    {
      APSLogErrorAt();
    }
    else
    {
      if (NANDataSession) {
        uint64_t NANDataSession = CFRetain(NANDataSession);
      }
      uint64_t v5 = 0;
      *a3 = NANDataSession;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294954516;
  }
  return v5;
}

const void *APTransportDeviceCopyProximityData(uint64_t a1)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  v19[0] = 0xF0E0E0B0D0A0E0DLL;
  uint64_t Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"deviceInfo");
  uint64_t v18 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  if (!APSIsProximitySenderEnabled() || !Value) {
    goto LABEL_36;
  }
  if (APSSettingsGetInt64())
  {
    CFStringRef v5 = (const __CFString *)APAdvertiserInfoCopyProperty((uint64_t)Value, 0, @"deviceName", 0, 0);
    if (!v5)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      goto LABEL_36;
    }
    CFStringRef v6 = v5;
    unsigned int v7 = APAdvertiserInfoCopyProperty((uint64_t)Value, 0, @"bluetoothAddress", 0, 0);
    if (v7 && (getNINearbyObjectClass[0](), (objc_opt_respondsToSelector() & 1) != 0))
    {
      uint64_t v4 = objc_msgSend(objc_alloc(getNIDiscoveryTokenClass()), "initWithBytes:", objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", v19, 8));
      if (v4)
      {
        uint64_t v8 = [(Class)getNINearbyObjectClass[0]() fauxObjectWithDiscoveryToken:v4 name:v6 deviceIdentifier:v7];
        if (v8)
        {
          double v9 = *(double *)&v8;
          float v10 = 5.0;
          if (CFStringGetLength(v6) < 1) {
            goto LABEL_20;
          }
          unsigned int CharacterAtIndex = CFStringGetCharacterAtIndex(v6, 0);
          __darwin_ct_rune_t v12 = CharacterAtIndex;
          if (CharacterAtIndex > 0x7F)
          {
            if (!__maskrune(CharacterAtIndex, 0x100uLL)) {
              goto LABEL_20;
            }
          }
          else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * CharacterAtIndex + 60) & 0x100) == 0)
          {
LABEL_20:
            if (gLogCategory_APTransportDevice <= 30
              && (gLogCategory_APTransportDevice != -1 || _LogCategory_Initialize()))
            {
              double v17 = v10;
              CFStringRef v16 = v6;
              LogPrintF();
            }
            if (objc_opt_respondsToSelector())
            {
              *(float *)&double v13 = v10;
              [*(id *)&v9 overrideDistance:v13];
            }
            goto LABEL_29;
          }
          float v10 = (float)(91 - __toupper(v12)) * 0.1;
          goto LABEL_20;
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    uint64_t v3 = 0;
LABEL_33:
    CFRelease(v6);
LABEL_34:
    if (v7) {
      CFRelease(v7);
    }
    goto LABEL_36;
  }
  double v9 = COERCE_DOUBLE(CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"proximityData"));
  if (gLogCategory_APTransportDevice <= 30
    && (gLogCategory_APTransportDevice != -1 || _LogCategory_Initialize()))
  {
    CFStringRef v16 = (const __CFString *)a1;
    double v17 = v9;
    LogPrintF();
  }
  unsigned int v7 = 0;
  CFStringRef v6 = 0;
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  if (v9 != 0.0)
  {
LABEL_29:
    uint64_t v3 = (const void *)objc_msgSend(MEMORY[0x1E4F28DB0], "archivedDataWithRootObject:requiringSecureCoding:error:", *(void *)&v9, 1, &v18, v16, *(void *)&v17);
    uint64_t v14 = v18;
    if (!v18)
    {
      if (v3) {
        CFRetain(v3);
      }
LABEL_32:
      if (!v6) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }
    if (gLogCategory_APTransportDevice > 90) {
      goto LABEL_32;
    }
    if (gLogCategory_APTransportDevice == -1)
    {
      if (!_LogCategory_Initialize()) {
        goto LABEL_32;
      }
      uint64_t v14 = v18;
    }
    [v14 localizedFailureReason];
    LogPrintF();
    goto LABEL_32;
  }
LABEL_36:

  return v3;
}

uint64_t APTransportDeviceCopyCUDNSNames(uint64_t a1)
{
  uint64_t v7 = 0;
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t Int64 = CFDictionaryGetInt64();
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    CFStringRef v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(v4 + 88);
    if (!v5 || v5(v1, Int64, &v7)) {
      APSLogErrorAt();
    }
  }
  return v7;
}

uint64_t transportDevice_Finalize(void *a1)
{
  if (gLogCategory_APTransportDevice <= 30
    && (gLogCategory_APTransportDevice != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  uint64_t v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  CFStringRef v5 = (const void *)a1[7];
  if (v5)
  {
    CFRelease(v5);
    a1[7] = 0;
  }
  CFStringRef v6 = (const void *)a1[8];
  if (v6)
  {
    CFRelease(v6);
    a1[8] = 0;
  }
  uint64_t result = a1[6];
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    a1[6] = 0;
  }
  return result;
}

__CFString *transportDevice_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v3 = Mutable;
  if (Mutable) {
    CFStringAppendFormat(Mutable, 0, @"<APTransportDevice %p browser '%@' deviceInfo %@>", a1, *(void *)(a1 + 16), *(void *)(a1 + 24));
  }
  else {
    APSLogErrorAt();
  }
  return v3;
}

Class initNINearbyObject()
{
  if (NearbyInteractionLibrary_sOnce != -1) {
    dispatch_once(&NearbyInteractionLibrary_sOnce, &__block_literal_global_10);
  }
  Class result = objc_getClass("NINearbyObject");
  classNINearbyObject = (uint64_t)result;
  getNINearbyObjectClass[0] = NINearbyObjectFunction;
  return result;
}

uint64_t NINearbyObjectFunction()
{
  return classNINearbyObject;
}

void *__NearbyInteractionLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/NearbyInteraction.framework/NearbyInteraction", 2);
  NearbyInteractionLibrary_sLib = (uint64_t)result;
  return result;
}

Class initNIDiscoveryToken()
{
  if (NearbyInteractionLibrary_sOnce != -1) {
    dispatch_once(&NearbyInteractionLibrary_sOnce, &__block_literal_global_10);
  }
  Class result = objc_getClass("NIDiscoveryToken");
  classNIDiscoveryToken = (uint64_t)result;
  getNIDiscoveryTokenClass = NIDiscoveryTokenFunction;
  return result;
}

uint64_t NIDiscoveryTokenFunction()
{
  return classNIDiscoveryToken;
}

void sub_1D08D4854(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t APTNANDataSessionGetClassID()
{
  if (APTNANDataSessionGetClassID_sAPTNANDataSessionClassIDOnce != -1) {
    dispatch_once_f(&APTNANDataSessionGetClassID_sAPTNANDataSessionClassIDOnce, &APTNANDataSessionGetClassID_sAPTNANDataSessionClassID, (dispatch_function_t)_APTNANDataSessionRegisterClass);
  }
  return APTNANDataSessionGetClassID_sAPTNANDataSessionClassID;
}

uint64_t _APTNANDataSessionRegisterClass(uint64_t a1)
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&kAPTNANDataSessionClassDescriptor, ClassID, 1, a1);
}

uint64_t APTNANDataSessionGetTypeID()
{
  if (APTNANDataSessionGetClassID_sAPTNANDataSessionClassIDOnce != -1) {
    dispatch_once_f(&APTNANDataSessionGetClassID_sAPTNANDataSessionClassIDOnce, &APTNANDataSessionGetClassID_sAPTNANDataSessionClassID, (dispatch_function_t)_APTNANDataSessionRegisterClass);
  }
  uint64_t v0 = APTNANDataSessionGetClassID_sAPTNANDataSessionClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

uint64_t APTNANDataSessionCreate(int a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (APSNANServiceTypeIsValid() && a2 && (CFTypeID v8 = CFGetTypeID(a2), v8 == APBrowserGetTypeID()))
  {
    if (APTNANDataSessionGetClassID_sAPTNANDataSessionClassIDOnce != -1) {
      dispatch_once_f(&APTNANDataSessionGetClassID_sAPTNANDataSessionClassIDOnce, &APTNANDataSessionGetClassID_sAPTNANDataSessionClassID, (dispatch_function_t)_APTNANDataSessionRegisterClass);
    }
    uint64_t v9 = CMDerivedObjectCreate();
    if (v9)
    {
      uint64_t v14 = v9;
      APSLogErrorAt();
    }
    else
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_DWORD *)uint64_t DerivedStorage = a1;
      *(void *)(DerivedStorage + 8) = CFRetain(a2);
      *(void *)(DerivedStorage + 16) = a3;
      uint64_t v11 = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 40) = v11;
      if (v11
        && (SNPrintF(), dispatch_queue_t v12 = dispatch_queue_create(label, 0), (*(void *)(DerivedStorage + 24) = v12) != 0)
        && (SNPrintF(), dispatch_queue_t v13 = dispatch_queue_create(label, 0), (*(void *)(DerivedStorage + 32) = v13) != 0))
      {
        if (gLogCategory_APTNANDataSession <= 50
          && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v14 = 0;
        *a4 = 0;
      }
      else
      {
        APSLogErrorAt();
        return 4294960568;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v14;
}

CFTypeRef APTNANDataSessionIsActivatable()
{
  uint64_t DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v1 = *((void *)DerivedStorage + 1);
  uint64_t v2 = *((void *)DerivedStorage + 2);
  uint64_t v3 = *DerivedStorage;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFStringRef v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v5 + 80);
  if (!v6 || v6(v1, v2, v3, &cf))
  {
    APSLogErrorAt();
    if (gLogCategory_APTNANDataSession <= 50
      && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  CFTypeRef result = cf;
  if (cf)
  {
    CFRelease(cf);
    return (CFTypeRef)(cf != 0);
  }
  return result;
}

uint64_t APTNANDataSessionRetainActivation(uint64_t a1)
{
  uint64_t DerivedStorage = (pthread_mutex_t **)CMBaseObjectGetDerivedStorage();
  CFTypeRef v30 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = &v26;
  uint64_t v28 = 0x2020000000;
  int v29 = 0;
  pthread_mutex_lock(DerivedStorage[5]);
  if (gLogCategory_APTNANDataSession <= 50
    && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
  {
    uint64_t v20 = (uint64_t)DerivedStorage[6];
    uint64_t v21 = v20 + 1;
    uint64_t v19 = a1;
    LogPrintF();
  }
  if (DerivedStorage[7])
  {
    id v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
LABEL_7:
    uint64_t v6 = 0;
    DerivedStorage[6] = (pthread_mutex_t *)((char *)DerivedStorage[6] + 1);
    goto LABEL_39;
  }
  if (gLogCategory_APTNANDataSession <= 50
    && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
  {
    uint64_t v19 = a1;
    LogPrintF();
  }
  uint64_t v7 = DerivedStorage[1];
  CFTypeID v8 = DerivedStorage[2];
  uint64_t v9 = *(unsigned int *)DerivedStorage;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  dispatch_queue_t v12 = *(uint64_t (**)(pthread_mutex_t *, pthread_mutex_t *, uint64_t, CFTypeRef *))(v11 + 80);
  if (!v12)
  {
    uint64_t v6 = 4294954514;
    goto LABEL_21;
  }
  uint64_t v6 = v12(v7, v8, v9, &v30);
  if (v6)
  {
LABEL_21:
    APSLogErrorAt();
    if (gLogCategory_APTNANDataSession <= 90
      && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
    {
      uint64_t v19 = a1;
      uint64_t v20 = v6;
      LogPrintF();
    }
    goto LABEL_37;
  }
  if (*(_DWORD *)DerivedStorage != 1)
  {
    if (*(_DWORD *)DerivedStorage == 2)
    {
      char v13 = 0;
      uint64_t v14 = 2048;
      goto LABEL_25;
    }
    uint64_t v6 = 4294960561;
    APSLogErrorAt();
LABEL_37:
    id v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    goto LABEL_38;
  }
  uint64_t v14 = 256;
  char v13 = 1;
LABEL_25:
  id v3 = objc_alloc_init(MEMORY[0x1E4F5E160]);
  if (!v3)
  {
    APSLogErrorAt();
    id v3 = 0;
LABEL_54:
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    goto LABEL_55;
  }
  if (_APTNANDataSessionGetDispatchQueue_sAPTNANDataSessionDispatchQueueOnce != -1) {
    dispatch_once(&_APTNANDataSessionGetDispatchQueue_sAPTNANDataSessionDispatchQueueOnce, &__block_literal_global_11);
  }
  objc_msgSend(v3, "setDispatchQueue:", _APTNANDataSessionGetDispatchQueue_sAPTNANDataSessionDispatchQueue, v19, v20, v21);
  [v3 setPeerEndpoint:v30];
  [v3 setTrafficFlags:v14];
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  v25[2] = __APTNANDataSessionRetainActivation_block_invoke;
  void v25[3] = &__block_descriptor_40_e5_v8__0l;
  v25[4] = a1;
  [v3 setInterruptionHandler:v25];
  if ((v13 & 1) == 0) {
    [v3 setControlFlags:2];
  }
  uint64_t v5 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v5)
  {
    APSLogErrorAt();
    if (gLogCategory_APTNANDataSession <= 90
      && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
    {
      uint64_t v19 = a1;
      LogPrintF();
    }
    goto LABEL_54;
  }
  dispatch_semaphore_t v15 = dispatch_semaphore_create(0);
  if (!v15)
  {
    APSLogErrorAt();
    uint64_t v4 = 0;
LABEL_55:
    uint64_t v6 = 4294960568;
    goto LABEL_38;
  }
  uint64_t v4 = v15;
  id v16 = v3;
  CFRetain(v5);
  dispatch_retain(v4);
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  void v24[2] = __APTNANDataSessionRetainActivation_block_invoke_2;
  v24[3] = &unk_1E688CAE8;
  v24[6] = &v26;
  v24[7] = a1;
  v24[8] = v5;
  v24[4] = v4;
  void v24[5] = v3;
  [v3 setInvalidationHandler:v24];
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = __APTNANDataSessionRetainActivation_block_invoke_3;
  v23[3] = &unk_1E688CB30;
  v23[5] = v5;
  v23[6] = a1;
  v23[4] = v3;
  [v3 setTerminationHandler:v23];
  CFRetain(v30);
  id v17 = v3;
  dispatch_retain(v4);
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __APTNANDataSessionRetainActivation_block_invoke_5;
  void v22[3] = &unk_1E688CB58;
  v22[7] = a1;
  v22[8] = v30;
  v22[5] = v4;
  v22[6] = &v26;
  v22[4] = v3;
  [v3 activateWithCompletion:v22];
  if (dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL))
  {
    APSLogErrorAt();
    uint64_t v6 = 4294960574;
  }
  else
  {
    uint64_t v6 = *((unsigned int *)v27 + 6);
    if (!v6)
    {
      DerivedStorage[7] = (pthread_mutex_t *)v3;
      goto LABEL_7;
    }
    APSLogErrorAt();
  }
LABEL_38:
  objc_msgSend(v3, "invalidate", v19, v20);
LABEL_39:
  pthread_mutex_unlock(DerivedStorage[5]);
  if (v4) {
    dispatch_release(v4);
  }
  if (v5) {
    CFRelease(v5);
  }

  if (v30) {
    CFRelease(v30);
  }
  _Block_object_dispose(&v26, 8);
  return v6;
}

void sub_1D08D9578(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t __APTNANDataSessionRetainActivation_block_invoke()
{
  if (gLogCategory_APTNANDataSession <= 90)
  {
    if (gLogCategory_APTNANDataSession != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

void __APTNANDataSessionRetainActivation_block_invoke_2(uint64_t a1)
{
  if (gLogCategory_APTNANDataSession <= 50
    && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = -6723;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8[0] = 0;
  v8[1] = v8;
  void v8[2] = 0x2020000000;
  v8[3] = 0;
  if (v3)
  {
    uint64_t v5 = DerivedStorage;
    CFRetain(v3);
    uint64_t v6 = *(NSObject **)(v5 + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___APTNANDataSessionInvalidate_block_invoke;
    block[3] = &unk_1E688BD90;
    block[4] = v8;
    void block[5] = v5;
    void block[6] = v2;
    void block[7] = v3;
    dispatch_async(v6, block);
    CFRelease(v3);
  }
  _Block_object_dispose(v8, 8);
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 64));
}

void sub_1D08D9790(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void __APTNANDataSessionRetainActivation_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTNANDataSession <= 50
    && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v2)
  {
    uint64_t v4 = *(void **)(a1 + 32);
    int v5 = NSErrorToOSStatus();
    if (v5 != 312374) {
      goto LABEL_25;
    }
    uint64_t v6 = (void *)[v4 wfaDataSessionClient];
    if (!v6)
    {
      if (gLogCategory_APTNANDataSession <= 90
        && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      int v5 = 312374;
      goto LABEL_25;
    }
    int v5 = -72401;
    uint64_t v7 = [v6 internetSharingPolicy];
    if ((unint64_t)(v7 - 2) < 2) {
      goto LABEL_21;
    }
    if (v7 == 1)
    {
      int v5 = -72400;
    }
    else
    {
      if (!v7)
      {
        if (gLogCategory_APTNANDataSession <= 90)
        {
          if (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()) {
            LogPrintF();
          }
          int v5 = -6762;
          goto LABEL_21;
        }
        int v5 = -6762;
LABEL_25:
        CFRetain(v2);
        CFTypeID v8 = *(NSObject **)(DerivedStorage + 24);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __APTNANDataSessionRetainActivation_block_invoke_4;
        block[3] = &__block_descriptor_52_e5_v8__0l;
        int v10 = v5;
        block[4] = DerivedStorage;
        void block[5] = v2;
        dispatch_async(v8, block);
        CFRelease(v2);
        return;
      }
      if (APSIsPersistentGroupSDBCapable()) {
        int v5 = -72401;
      }
      else {
        int v5 = -72400;
      }
    }
LABEL_21:
    if (gLogCategory_APTNANDataSession <= 90
      && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_25;
  }
}

void __APTNANDataSessionRetainActivation_block_invoke_4(uint64_t a1)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(*(void *)(a1 + 32) + 40));
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 56)) {
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 48);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(v2 + 40));
  id v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

void __APTNANDataSessionRetainActivation_block_invoke_5(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (gLogCategory_APTNANDataSession <= 90
      && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
    {
LABEL_15:
      LogPrintF();
    }
  }
  else
  {
    id v3 = *(void **)(a1 + 32);
    if (v3) {
      [v3 peerAddress];
    }
    SockAddrToString();
    if (gLogCategory_APTNANDataSession <= 50)
    {
      if (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()) {
        LogPrintF();
      }
      if (gLogCategory_APTNANDataSession <= 50
        && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_15;
      }
    }
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = NSErrorToOSStatus();
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  dispatch_release(*(dispatch_object_t *)(a1 + 40));

  CFRelease(*(CFTypeRef *)(a1 + 64));
}

uint64_t APTNANDataSessionReleaseActivation(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 40));
  if (gLogCategory_APTNANDataSession <= 50
    && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
  {
    uint64_t v8 = *(void *)(DerivedStorage + 48);
    uint64_t v9 = v8 - 1;
    uint64_t v7 = a1;
    LogPrintF();
  }
  uint64_t v3 = *(void *)(DerivedStorage + 48);
  if (v3)
  {
    uint64_t v4 = v3 - 1;
    *(void *)(DerivedStorage + 48) = v4;
    if (v4)
    {
      uint64_t v5 = 0;
    }
    else
    {
      if (gLogCategory_APTNANDataSession <= 50
        && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
      {
        uint64_t v7 = a1;
        LogPrintF();
      }
      objc_msgSend(*(id *)(DerivedStorage + 56), "invalidate", v7, v8, v9);

      uint64_t v5 = 0;
      *(void *)(DerivedStorage + 56) = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v5 = 4294960548;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 40));
  return v5;
}

uint64_t APTNANDataSessionCopyPeerAddress(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 40));
  if (a2)
  {
    uint64_t v4 = *(void **)(DerivedStorage + 56);
    if (v4 && ([v4 peerAddress], v7))
    {
      uint64_t v5 = APSNetworkAddressCreateWithSocketAddr();
      if (v5) {
        APSLogErrorAt();
      }
    }
    else
    {
      APSLogErrorAt();
      uint64_t v5 = 4294960578;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v5 = 4294960591;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 40));
  return v5;
}

uint64_t APTNANDataSessionPreWarm(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 40));
  if (*(void *)(DerivedStorage + 56))
  {
    if (gLogCategory_APTNANDataSession <= 50
      && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
    {
      uint64_t v5 = a1;
      LogPrintF();
    }
    objc_msgSend(*(id *)(DerivedStorage + 56), "updateLinkStatus:", 1, v5);
    uint64_t v3 = 0;
  }
  else
  {
    APSLogErrorAt();
    uint64_t v3 = 4294960578;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 40));
  return v3;
}

uint64_t APTNANDataSessionCreateStatisticsReport(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 40));
  if (!*(void *)(DerivedStorage + 56))
  {
    uint64_t v14 = 4294960578;
LABEL_17:
    APSLogErrorAt();
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 40));
    return v14;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v14 = 4294960568;
    goto LABEL_17;
  }
  CFMutableArrayRef v5 = Mutable;
  dispatch_semaphore_t v6 = dispatch_semaphore_create(0);
  if (v6)
  {
    char v7 = v6;
    CFRetain(v5);
    dispatch_retain(v7);
    uint64_t v8 = *(void **)(DerivedStorage + 56);
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __APTNANDataSessionCreateStatisticsReport_block_invoke;
    void v16[3] = &unk_1E688CB80;
    v16[4] = v7;
    void v16[5] = v5;
    [v8 generateStatisticsReportWithCompletionHandler:v16];
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 40));
    dispatch_time_t v9 = dispatch_time(0, 1000000000);
    if (dispatch_semaphore_wait(v7, v9))
    {
      APSLogErrorAt();
      uint64_t v14 = 4294960574;
    }
    else
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
      uint64_t v11 = ValueAtIndex;
      if (ValueAtIndex && (CFTypeID v12 = CFGetTypeID(ValueAtIndex), v12 == CFNumberGetTypeID()))
      {
        unsigned int v13 = CFGetInt64Ranged();
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 4294960587;
        }
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v14 = 0;
          *a2 = CFRetain(v11);
        }
        else
        {
          APSLogErrorAt();
          uint64_t v14 = 4294960587;
        }
      }
    }
    dispatch_release(v7);
  }
  else
  {
    APSLogErrorAt();
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 40));
    uint64_t v14 = 4294960568;
  }
  CFRelease(v5);
  return v14;
}

void __APTNANDataSessionCreateStatisticsReport_block_invoke(uint64_t a1, const void *a2)
{
  if (NSErrorToOSStatus()) {
    CFArrayAppendInt64();
  }
  else {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), a2);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  uint64_t v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    CFRelease(v4);
  }
}

CFStringRef _APTNANDataSessionCopyFormattingDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<APTNANDataSession %p>", a1);
}

void _APTNANDataSessionFinalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(const void **)(DerivedStorage + 8);
  if (v3) {
    CFRelease(v3);
  }
  FigSimpleMutexDestroy();
  if (*(void *)(DerivedStorage + 56))
  {
    if (gLogCategory_APTNANDataSession <= 60
      && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
    {
      uint64_t v6 = a1;
      LogPrintF();
    }
    objc_msgSend(*(id *)(DerivedStorage + 56), "invalidate", v6);

    *(void *)(DerivedStorage + 56) = 0;
  }
  uint64_t v4 = *(NSObject **)(DerivedStorage + 24);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(DerivedStorage + 24) = 0;
  }
  CFMutableArrayRef v5 = *(NSObject **)(DerivedStorage + 32);
  if (v5)
  {
    dispatch_release(v5);
    *(void *)(DerivedStorage + 32) = 0;
  }
  if (gLogCategory_APTNANDataSession <= 50
    && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

CFStringRef _APTNANDataSessionCopyDebugDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<APTNANDataSession %p>", a1);
}

uint64_t _APTNANDataSessionReportIssue(uint64_t a1)
{
  unsigned int v10 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFStringGetTypeID();
  CFDictionaryGetTypedValue();
  if (FigCFEqual())
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 40));
    CFNumberGetTypeID();
    Typeduint64_t Value = (const void *)CFDictionaryGetTypedValue();
    CFNumberGetTypeID();
    uint64_t v4 = (const void *)CFDictionaryGetTypedValue();
    unsigned int v10 = APTNANDataSessionIssueReportCreate(TypedValue, v4, &cf);
    if (v10)
    {
      APSLogErrorAt();
    }
    else if (gLogCategory_APTNANDataSession <= 50 {
           && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
    }
    {
      CFTypeRef v8 = cf;
      LogPrintF();
      objc_msgSend(*(id *)(DerivedStorage + 56), "reportIssue:", cf, a1, v8);
    }
    else
    {
      objc_msgSend(*(id *)(DerivedStorage + 56), "reportIssue:", cf, v6, v7);
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 40));
    if (cf) {
      CFRelease(cf);
    }
  }
  return v10;
}

uint64_t APTransportSocketGetTypeID()
{
  if (APTransportSocketGetTypeID_sInitOnce != -1) {
    dispatch_once_f(&APTransportSocketGetTypeID_sInitOnce, &APTransportSocketGetTypeID_sTypeID, (dispatch_function_t)socket_getTypeID);
  }
  return APTransportSocketGetTypeID_sTypeID;
}

uint64_t socket_getTypeID(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APTransportSocketCreate(uint64_t a1, int a2, uint64_t *a3)
{
  if (APTransportSocketGetTypeID_sInitOnce != -1) {
    dispatch_once_f(&APTransportSocketGetTypeID_sInitOnce, &APTransportSocketGetTypeID_sTypeID, (dispatch_function_t)socket_getTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v6 = Instance;
    *(void *)(Instance + 16) = 0;
    *(_DWORD *)(Instance + 16) = a2;
    if (gLogCategory_APTransportSocketRef <= 30
      && (gLogCategory_APTransportSocketRef != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t result = 0;
    *a3 = v6;
  }
  else
  {
    APSLogErrorAt();
    return 4294960568;
  }
  return result;
}

uint64_t APTransportSocketGetSocket(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t socket_Finalize(uint64_t result)
{
  uint64_t v1 = result;
  if (gLogCategory_APTransportSocketRef <= 30)
  {
    if (gLogCategory_APTransportSocketRef != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
      uint64_t result = LogPrintF();
    }
  }
  *(_DWORD *)(v1 + 16) = -1;
  return result;
}

uint64_t APBrokerGetTypeID()
{
  if (gAPBrokerInitOnce != -1) {
    dispatch_once_f(&gAPBrokerInitOnce, 0, (dispatch_function_t)_APBrokerGetTypeID);
  }
  return gAPBrokerTypeID;
}

uint64_t _APBrokerGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPBrokerCFTypeID TypeID = result;
  return result;
}

uint64_t APBrokerCreate(const void *a1, CFTypeRef *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)label = 0u;
  long long v17 = 0u;
  if (a2 && a1)
  {
    if (gAPBrokerInitOnce != -1) {
      dispatch_once_f(&gAPBrokerInitOnce, 0, (dispatch_function_t)_APBrokerGetTypeID);
    }
    uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
    if (Instance)
    {
      CFMutableArrayRef v5 = Instance;
      Instance[1] = 0u;
      uint64_t v6 = Instance + 1;
      Instance[2] = 0u;
      Instance[3] = 0u;
      *((void *)Instance + 6) = CFRetain(a1);
      uint64_t v7 = APBrokerCopyBrokerInfoFromBonjourInfo((uint64_t)a1, v6, v6 + 1);
      if (v7)
      {
        uint64_t v14 = v7;
        APSLogErrorAt();
      }
      else
      {
        *((unsigned char *)v5 + 32) = APSSettingsGetIntWithDefault() != 0;
        if (*((void *)v5 + 6) && (uint64_t v8 = BonjourDevice_CopyCFString()) != 0)
        {
          dispatch_time_t v9 = (const void *)v8;
          unsigned int v10 = (const void *)APSFeaturesCreateFromStringRepresentation();
          char HasFeature = APSFeaturesHasFeature();
          if (v10) {
            CFRelease(v10);
          }
          CFRelease(v9);
        }
        else
        {
          char HasFeature = 0;
        }
        *((unsigned char *)v5 + 33) = HasFeature;
        uint64_t v12 = FigSimpleMutexCreate();
        *((void *)v5 + 5) = v12;
        if (v12 && (SNPrintF(), dispatch_queue_t v13 = dispatch_queue_create(label, 0), (*((void *)v5 + 7) = v13) != 0))
        {
          if (gLogCategory_APBroker <= 50 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
          {
            APBrokerHTTPProtocolString(*((unsigned __int8 *)v5 + 32));
            LogPrintF();
          }
          uint64_t v14 = 0;
          *a2 = CFRetain(v5);
        }
        else
        {
          APSLogErrorAt();
          uint64_t v14 = 4294960568;
        }
      }
      CFRelease(v5);
    }
    else
    {
      APSLogErrorAt();
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v14;
}

uint64_t APBrokerCopyBrokerInfoFromBonjourInfo(uint64_t a1, void *a2, void *a3)
{
  if (a2)
  {
    CFMutableArrayRef v5 = (const void *)BonjourDevice_CopyCFString();
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    CFMutableArrayRef v5 = 0;
    if (a3)
    {
LABEL_3:
      uint64_t v6 = (const void *)BonjourDevice_CopyCFString();
      if (!a2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  uint64_t v6 = 0;
  if (a2)
  {
LABEL_4:
    *a2 = v5;
    CFMutableArrayRef v5 = 0;
  }
LABEL_5:
  if (a3)
  {
    *a3 = v6;
  }
  else if (v6)
  {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
  return 0;
}

uint64_t APBrokerUpdate(uint64_t a1, const void *a2)
{
  CFTypeRef cf = 0;
  CFTypeRef cf1 = 0;
  uint64_t v4 = APBrokerCopyBrokerInfoFromBonjourInfo((uint64_t)a2, &cf1, &cf);
  if (v4)
  {
    uint64_t v8 = v4;
    APSLogErrorAt();
  }
  else
  {
    CFTypeRef v5 = *(CFTypeRef *)(a1 + 16);
    if ((cf1 == v5 || cf1 && v5 && CFEqual(cf1, v5))
      && ((CFTypeRef v6 = *(CFTypeRef *)(a1 + 24), cf == v6) || cf && v6 && CFEqual(cf, v6)))
    {
      FigSimpleMutexCheckIsNotLockedOnThisThread();
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
      uint64_t v7 = *(const void **)(a1 + 48);
      if (a2) {
        CFRetain(a2);
      }
      *(void *)(a1 + 48) = a2;
      if (v7) {
        CFRelease(v7);
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
      uint64_t v8 = 0;
    }
    else
    {
      APSLogErrorAt();
      uint64_t v8 = 4294960591;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (cf1) {
    CFRelease(cf1);
  }
  return v8;
}

void APBrokerGetBrokeredReceivers(uint64_t a1, void *a2)
{
  CFArrayRef theArray = 0;
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (gLogCategory_APBroker <= 50 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  int v4 = -72440;
  APBrokerKeychainUtilsCopyAllAuthTokens(*(CFTypeRef *)(a1 + 24), &theArray);
  if (theArray && CFArrayGetCount(theArray) >= 1)
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v7 = Mutable;
      CFDictionarySetValue(Mutable, @"Content-Type", @"application/json");
      uint64_t v8 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v8)
      {
        dispatch_time_t v9 = v8;
        CFDictionarySetValue(v8, @"userAuthTokens", theArray);
        unsigned int v10 = _Block_copy(a2);
        BOOL v11 = v10 != 0;
        if (v10)
        {
          uint64_t v12 = (void (*)(void, void, void, void, void))v10;
          dispatch_queue_t v13 = *(NSObject **)(a1 + 56);
          dispatch_retain(v13);
          CFTypeRef v14 = CFRetain(*(CFTypeRef *)(a1 + 24));
          v15[0] = (void (*)(void, void, void, void, void))MEMORY[0x1E4F143A8];
          v15[1] = (void (*)(void, void, void, void, void))0x40000000;
          v15[2] = (void (*)(void, void, void, void, void))__APBrokerGetBrokeredReceivers_block_invoke;
          v15[3] = (void (*)(void, void, void, void, void))&unk_1E688CBD8;
          v15[6] = (void (*)(void, void, void, void, void))v14;
          void v15[7] = (void (*)(void, void, void, void, void))v13;
          v15[4] = v12;
          v15[5] = (void (*)(void, void, void, void, void))a1;
          APBrokerSendRequest(a1, 2, @"/public/receiver/receiver-list", v7, v9, v15);
          int v4 = 0;
        }
        else
        {
          APSLogErrorAt();
          int v4 = -6728;
        }
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
        CFRelease(v9);
      }
      else
      {
        APSLogErrorAt();
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
        BOOL v11 = 0;
        int v4 = -6728;
      }
      CFRelease(v7);
      goto LABEL_15;
    }
    APSLogErrorAt();
    int v4 = -6728;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  BOOL v11 = 0;
LABEL_15:
  if (theArray) {
    CFRelease(theArray);
  }
  if (!v11) {
    _CallRequestCallbackBlock(v4, *(NSObject **)(a1 + 56), 0, a2);
  }
}

void APBrokerSendRequest(uint64_t a1, int a2, const void *a3, const void *a4, const void *a5, void (**a6)(void, void, void, void, void))
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  int DNSName = 0;
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (gLogCategory_APBroker <= 30 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
  {
    APBrokerHTTPProtocolString(*(unsigned __int8 *)(a1 + 32));
    APBrokerHTTPMethodString(a2);
    LogPrintF();
  }
  if (a6)
  {
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFTypeRef v14 = Mutable;
      if (*(unsigned char *)(a1 + 32))
      {
        CFDictionarySetValue(Mutable, @"useHTTPS", (const void *)*MEMORY[0x1E4F1CFD0]);
        dispatch_semaphore_t v15 = (const void *)BonjourDevice_CopyCFString();
        if (!v15)
        {
          APSLogErrorAt();
          int DNSName = -6705;
          goto LABEL_26;
        }
        id v16 = v15;
        CFDictionarySetValue(v14, @"sslCertificateHostName", v15);
      }
      else
      {
        id v16 = 0;
      }
      CFTypeRef cf = v16;
      if (*(unsigned char *)(a1 + 33))
      {
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        *(_OWORD *)cStr = 0u;
        long long v29 = 0u;
        int DNSName = BonjourDevice_GetDNSName();
        if (DNSName)
        {
          APSLogErrorAt();
        }
        else
        {
          CFStringRef v17 = CFStringCreateWithCString(v12, cStr, 0x8000100u);
          if (v17)
          {
            long long v18 = v17;
            long long v19 = a5;
            uint64_t v20 = 0;
            int v21 = 1;
            goto LABEL_16;
          }
          APSLogErrorAt();
          int DNSName = -6728;
        }
LABEL_24:
        if (v16) {
          CFRelease(v16);
        }
LABEL_26:
        CFRelease(v14);
        if (!DNSName) {
          return;
        }
        goto LABEL_27;
      }
      uint64_t v22 = BonjourDevice_CopyCFString();
      BonjourDevice_GetInt64();
      long long v18 = (const void *)CFStringCreateF();
      uint64_t v20 = (const void *)v22;
      long long v19 = a5;
      int v21 = 2;
LABEL_16:
      if (gLogCategory_APBroker <= 30 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
      {
        APBrokerHTTPProtocolString(*(unsigned __int8 *)(a1 + 32));
        APBrokerHTTPMethodString(a2);
        LogPrintF();
      }
      uint64_t v23 = _Block_copy(a6);
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = 0x40000000;
      socklen_t v26[2] = __APBrokerSendRequest_block_invoke;
      v26[3] = &unk_1E688CCE8;
      void v26[5] = a1;
      void v26[6] = a1;
      v26[4] = v23;
      APBrokerHTTPSendRequest(a1, a1, v18, v21, a2, a3, a4, v19, (uint64_t)v14, v26);
      if (v18) {
        CFRelease(v18);
      }
      id v16 = cf;
      if (v20) {
        CFRelease(v20);
      }
      goto LABEL_24;
    }
    APSLogErrorAt();
    int v24 = -6728;
  }
  else
  {
    APSLogErrorAt();
    int v24 = -6705;
  }
  int DNSName = v24;
LABEL_27:
  a6[2](a6, 0, 0, 0, 0);
}

void __APBrokerGetBrokeredReceivers_block_invoke(uint64_t a1, CFMutableDictionaryRef Mutable, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11 = 0;
  CFTypeRef cf = 0;
  int v9 = gLogCategory_APBroker;
  if (gLogCategory_APBroker <= 50)
  {
    if (gLogCategory_APBroker == -1)
    {
      if (!_LogCategory_Initialize()) {
        goto LABEL_9;
      }
      int v9 = gLogCategory_APBroker;
    }
    if (v9 == -1) {
      _LogCategory_Initialize();
    }
    LogPrintF();
  }
LABEL_9:
  if (a6) {
    goto LABEL_22;
  }
  if (!Mutable)
  {
    APSLogErrorAt();
    a6 = -6705;
    goto LABEL_14;
  }
  int v10 = APBrokerCreateBrokeredReceiversFromBrokerResponse(*(void *)(a1 + 48), (uint64_t)Mutable, (CFMutableDictionaryRef *)&cf, &v11);
  if (v10)
  {
    a6 = v10;
LABEL_22:
    APSLogErrorAt();
    CFMutableArrayRef Mutable = 0;
    goto LABEL_14;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    FigCFDictionarySetValue();
    CFDictionarySetInt64();
    a6 = 0;
  }
  else
  {
    APSLogErrorAt();
    a6 = -6728;
  }
LABEL_14:
  _CallRequestCallbackBlock(a6, *(NSObject **)(a1 + 56), Mutable, *(void **)(a1 + 32));
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
  dispatch_release(*(dispatch_object_t *)(a1 + 56));
  _Block_release(*(const void **)(a1 + 32));
}

uint64_t APBrokerCreateBrokeredReceiversFromBrokerResponse(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3, uint64_t *a4)
{
  uint64_t v14 = 0;
  dispatch_semaphore_t v15 = &v14;
  uint64_t v16 = 0x2000000000;
  uint64_t v17 = 0;
  if (gLogCategory_APBroker <= 30 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v8 = 4294960591;
  if (a1 && a2 && a3)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
      APSLogErrorAt();
      uint64_t v8 = 4294960568;
      goto LABEL_17;
    }
    CFMutableDictionaryRef v10 = Mutable;
    CFArrayGetTypeID();
    Typeduint64_t Value = (const __CFArray *)CFDictionaryGetTypedValue();
    if (TypedValue)
    {
      CFArrayGetCount(TypedValue);
      CFArrayApplyBlock();
      uint64_t v12 = v15[3];
      if (!v12)
      {
        uint64_t v12 = 300;
        v15[3] = 300;
      }
      *a3 = v10;
      if (a4)
      {
        uint64_t v8 = 0;
        *a4 = v12;
        goto LABEL_17;
      }
    }
    else
    {
      CFRelease(v10);
    }
    uint64_t v8 = 0;
  }
LABEL_17:
  _Block_object_dispose(&v14, 8);
  return v8;
}

void _CallRequestCallbackBlock(int a1, NSObject *a2, const void *a3, void *aBlock)
{
  if (aBlock)
  {
    uint64_t v7 = _Block_copy(aBlock);
    if (a3) {
      CFRetain(a3);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___CallRequestCallbackBlock_block_invoke;
    block[3] = &unk_1E688CD10;
    int v9 = a1;
    block[4] = v7;
    void block[5] = a3;
    dispatch_async(a2, block);
  }
}

void APBrokerAuthenticate(uint64_t a1, const void *a2, void *a3)
{
  if (gLogCategory_APBroker <= 50 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)(a1 + 24)) {
      IsAppleInternalBuild();
    }
    if (gLogCategory_APBroker == -1) {
      _LogCategory_Initialize();
    }
    LogPrintF();
  }
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a2)
  {
    int v13 = -6705;
LABEL_20:
    APSLogErrorAt();
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
LABEL_16:
    _CallRequestCallbackBlock(v13, *(NSObject **)(a1 + 56), 0, a3);
    return;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    int v13 = -6728;
    goto LABEL_20;
  }
  uint64_t v8 = Mutable;
  CFDictionarySetValue(Mutable, @"Content-Type", @"application/json");
  int v9 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v9)
  {
    APSLogErrorAt();
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    CFRelease(v8);
    int v13 = -6728;
    goto LABEL_16;
  }
  CFMutableDictionaryRef v10 = v9;
  CFDictionarySetValue(v9, @"brokerToken", a2);
  uint64_t v11 = _Block_copy(a3);
  if (v11)
  {
    uint64_t v12 = *(NSObject **)(a1 + 56);
    dispatch_retain(v12);
    v14[0] = (void (*)(void, void, void, void, void))MEMORY[0x1E4F143A8];
    v14[1] = (void (*)(void, void, void, void, void))0x40000000;
    v14[2] = (void (*)(void, void, void, void, void))__APBrokerAuthenticate_block_invoke;
    v14[3] = (void (*)(void, void, void, void, void))&unk_1E688CC00;
    v14[6] = (void (*)(void, void, void, void, void))a1;
    void v14[7] = (void (*)(void, void, void, void, void))v12;
    v14[4] = (void (*)(void, void, void, void, void))v11;
    void v14[5] = (void (*)(void, void, void, void, void))a1;
    APBrokerSendRequest(a1, 2, @"/public/broker/user-auth-token", v8, v10, v14);
    int v13 = 0;
  }
  else
  {
    APSLogErrorAt();
    int v13 = -6728;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  CFRelease(v10);
  CFRelease(v8);
  if (!v11) {
    goto LABEL_16;
  }
}

void __APBrokerAuthenticate_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v9 = gLogCategory_APBroker;
  if (gLogCategory_APBroker <= 50)
  {
    if (gLogCategory_APBroker == -1)
    {
      if (!_LogCategory_Initialize()) {
        goto LABEL_9;
      }
      int v9 = gLogCategory_APBroker;
    }
    if (v9 == -1) {
      _LogCategory_Initialize();
    }
    LogPrintF();
  }
LABEL_9:
  if (a6)
  {
    APSLogErrorAt();
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_30;
  }
  uint64_t v10 = *(void *)(a1 + 48);
  CFTypeRef v16 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v14 = 0;
  CFTypeRef v15 = 0;
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  CFMutableDictionaryRef Mutable = 0;
  a6 = -6705;
  if (a2 && v10)
  {
    if (gLogCategory_APBroker <= 30 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    int v12 = APBrokerCopyAuthInfoFromBrokerResponse(a2, &cf, &v16, &v14, &v15);
    if (v12)
    {
      a6 = v12;
      APSLogErrorAt();
    }
    else
    {
      pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 40));
      int v13 = APBrokerKeychainUtilsStoreAuthToken(*(__CFString **)(v10 + 24), (__CFString *)v14, (uint64_t)cf, (uint64_t)v16);
      if (!v13)
      {
        pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 40));
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          FigCFDictionarySetValue();
          a6 = 0;
        }
        else
        {
          APSLogErrorAt();
          a6 = -6728;
        }
        goto LABEL_20;
      }
      a6 = v13;
      APSLogErrorAt();
      pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 40));
    }
    CFMutableDictionaryRef Mutable = 0;
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (a6) {
    APSLogErrorAt();
  }
LABEL_30:
  _CallRequestCallbackBlock(a6, *(NSObject **)(a1 + 56), Mutable, *(void **)(a1 + 32));
  if (Mutable) {
    CFRelease(Mutable);
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 56));
  _Block_release(*(const void **)(a1 + 32));
}

void APBrokerGetInfo(uint64_t a1, void *a2)
{
  if (gLogCategory_APBroker <= 50 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)(a1 + 24)) {
      IsAppleInternalBuild();
    }
    LogPrintF();
  }
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    APSLogErrorAt();
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    int v8 = -6728;
LABEL_12:
    _CallRequestCallbackBlock(v8, *(NSObject **)(a1 + 56), 0, a2);
    return;
  }
  CFAllocatorRef v5 = Mutable;
  CFDictionarySetValue(Mutable, @"Content-Type", @"application/json");
  CFAllocatorRef v6 = _Block_copy(a2);
  if (v6)
  {
    uint64_t v7 = *(NSObject **)(a1 + 56);
    dispatch_retain(v7);
    v9[0] = (void (*)(void, void, void, void, void))MEMORY[0x1E4F143A8];
    v9[1] = (void (*)(void, void, void, void, void))0x40000000;
    v9[2] = (void (*)(void, void, void, void, void))__APBrokerGetInfo_block_invoke;
    void v9[3] = (void (*)(void, void, void, void, void))&unk_1E688CC28;
    void v9[5] = (void (*)(void, void, void, void, void))a1;
    void v9[6] = (void (*)(void, void, void, void, void))v7;
    v9[4] = (void (*)(void, void, void, void, void))v6;
    APBrokerSendRequest(a1, 1, @"/public/info", v5, 0, v9);
    int v8 = 0;
  }
  else
  {
    APSLogErrorAt();
    int v8 = -6728;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  CFRelease(v5);
  if (!v6) {
    goto LABEL_12;
  }
}

void __APBrokerGetInfo_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v8 = gLogCategory_APBroker;
  if (gLogCategory_APBroker > 50) {
    goto LABEL_9;
  }
  if (gLogCategory_APBroker == -1)
  {
    if (!_LogCategory_Initialize()) {
      goto LABEL_9;
    }
    int v8 = gLogCategory_APBroker;
  }
  if (v8 == -1) {
    _LogCategory_Initialize();
  }
  LogPrintF();
LABEL_9:
  if (a6)
  {
    APSLogErrorAt();
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetValueFromKeyInDict();
  }
  _CallRequestCallbackBlock(a6, *(NSObject **)(a1 + 48), Mutable, *(void **)(a1 + 32));
  if (Mutable) {
    CFRelease(Mutable);
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 48));
  uint64_t v10 = *(const void **)(a1 + 32);
  _Block_release(v10);
}

void APBrokerGetReceiverConnectivityInfo(uint64_t a1, __CFString *a2, const void *a3, void *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  value[0] = 0;
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3)
  {
    APSLogErrorAt();
    int v21 = 0;
    CFMutableDictionaryRef Mutable = 0;
    int v22 = -6705;
LABEL_54:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    goto LABEL_42;
  }
  if (gLogCategory_APBroker <= 30 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
  {
    if (a2) {
      IsAppleInternalBuild();
    }
    IsAppleInternalBuild();
    LogPrintF();
  }
  int v8 = APBrokerKeychainUtilsCopyAuthToken(*(__CFString **)(a1 + 24), a2, (CFTypeRef *)value);
  if (v8)
  {
    int v22 = v8;
    APSLogErrorAt();
    int v21 = 0;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_54;
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable && (CFArrayGetTypeID(), (Typeduint64_t Value = (const __CFArray *)CFDictionaryGetTypedValue()) != 0))
  {
    CFArrayRef v12 = TypedValue;
    if (CFArrayGetCount(TypedValue) <= 0)
    {
      CFIndex Count = CFArrayGetCount(v12);
      if (Count < 1) {
        goto LABEL_36;
      }
    }
    else
    {
      CFIndex Count = 1;
    }
    for (uint64_t i = 0; i != Count; ++i)
    {
      long long v32 = 0;
      CFDictionaryGetTypeID();
      if (CFArrayGetTypedValueAtIndex())
      {
        cStr[128] = 0;
        CFDictionaryGetCString();
        if (CreateUsableInterfaceList())
        {
          APSLogErrorAt();
        }
        else
        {
          for (j = v32; j; j = (void *)*j)
          {
            memset(&value[1], 0, 24);
            int v31 = 0;
            uint64_t v16 = j[3];
            if (v16)
            {
              int v17 = *(unsigned __int8 *)(v16 + 1);
              if (v17 == 30 || v17 == 2)
              {
                SockAddrCopy();
                if (!SockAddrToString())
                {
                  CFStringRef v19 = CFStringCreateWithCString(0, cStr, 0x8000100u);
                  if (v19)
                  {
                    CFStringRef v20 = v19;
                    CFArrayAppendValue(Mutable, v19);
                    CFRelease(v20);
                  }
                }
              }
            }
          }
        }
        ReleaseUsableInterfaceList();
      }
    }
  }
  else
  {
    APSLogErrorAt();
  }
  if (!Mutable)
  {
    int v21 = 0;
    int v22 = -6728;
    goto LABEL_54;
  }
LABEL_36:
  if (CFArrayGetCount(Mutable) < 1)
  {
    int v21 = 0;
    int v22 = -6709;
    goto LABEL_54;
  }
  uint64_t v23 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v21 = v23;
  if (!v23
    || (CFDictionarySetValue(v23, @"Content-Type", @"application/json"),
        (int v24 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0))
  {
    APSLogErrorAt();
    int v22 = -6728;
    goto LABEL_54;
  }
  uint64_t v25 = v24;
  CFDictionarySetValue(v24, @"userAuthToken", value[0]);
  CFDictionarySetValue(v25, @"deviceIPs", Mutable);
  CFDictionarySetValue(v25, @"publicReceiverUUID", a3);
  uint64_t v26 = _Block_copy(a4);
  if (v26)
  {
    uint64_t v27 = (void (*)(void, void, void, void, void))v26;
    uint64_t v28 = *(NSObject **)(a1 + 56);
    dispatch_retain(v28);
    CFRetain(a3);
    v29[0] = (void (*)(void, void, void, void, void))MEMORY[0x1E4F143A8];
    v29[1] = (void (*)(void, void, void, void, void))0x40000000;
    v29[2] = (void (*)(void, void, void, void, void))__APBrokerGetReceiverConnectivityInfo_block_invoke;
    v29[3] = (void (*)(void, void, void, void, void))&unk_1E688CC50;
    v29[6] = (void (*)(void, void, void, void, void))a3;
    v29[7] = (void (*)(void, void, void, void, void))v28;
    v29[4] = v27;
    v29[5] = (void (*)(void, void, void, void, void))a1;
    APBrokerSendRequest(a1, 2, @"/public/receiver/connectivity-info", v21, v25, v29);
    int v22 = 0;
  }
  else
  {
    APSLogErrorAt();
    int v22 = -6728;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  CFRelease(v25);
LABEL_42:
  if (value[0]) {
    CFRelease(value[0]);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v22) {
    _CallRequestCallbackBlock(v22, *(NSObject **)(a1 + 56), 0, a4);
  }
}

void __APBrokerGetReceiverConnectivityInfo_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int BrokeredReceiverConnectivityInfoFromBrokerResponse)
{
  CFTypeRef cf = 0;
  if (gLogCategory_APBroker <= 50 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)(a1 + 48)) {
      IsAppleInternalBuild();
    }
    if (gLogCategory_APBroker == -1) {
      _LogCategory_Initialize();
    }
    LogPrintF();
  }
  if (BrokeredReceiverConnectivityInfoFromBrokerResponse
    || (BrokeredReceiverConnectivityInfoFromBrokerResponse = APBrokerCreateBrokeredReceiverConnectivityInfoFromBrokerResponse(a2, a4, (__CFDictionary **)&cf)) != 0)
  {
    APSLogErrorAt();
  }
  _CallRequestCallbackBlock(BrokeredReceiverConnectivityInfoFromBrokerResponse, *(NSObject **)(a1 + 56), cf, *(void **)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 48));
  if (cf) {
    CFRelease(cf);
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 56));
  _Block_release(*(const void **)(a1 + 32));
}

uint64_t APBrokerCreateBrokeredReceiverConnectivityInfoFromBrokerResponse(uint64_t a1, uint64_t a2, __CFDictionary **a3)
{
  unsigned int v20 = 0;
  uint64_t v16 = 0;
  int v17 = &v16;
  uint64_t v18 = 0x2000000000;
  char v19 = 1;
  if (gLogCategory_APBroker <= 30 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if (!a1 || !a3) {
    goto LABEL_28;
  }
  CFNumberGetTypeID();
  if (!CFDictionaryGetTypedValue()) {
    goto LABEL_27;
  }
  __int16 v5 = CFGetInt64Ranged();
  if (v20)
  {
    APSLogErrorAt();
    goto LABEL_24;
  }
  if (!v5
    || (CFArrayGetTypeID(), (Typeduint64_t Value = (const __CFArray *)CFDictionaryGetTypedValue()) == 0)
    || (CFArrayRef v7 = TypedValue, CFArrayGetCount(TypedValue) <= 0))
  {
LABEL_27:
    APSLogErrorAt();
LABEL_28:
    unsigned int v20 = -6705;
    goto LABEL_24;
  }
  CFIndex Count = CFArrayGetCount(v7);
  CFAllocatorRef v9 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (Count < 11)
  {
    CFArrayRef v11 = (const __CFArray *)CFRetain(v7);
  }
  else
  {
    uint64_t v10 = (const void **)malloc_type_calloc(0xAuLL, 8uLL, 0x80040B8603338uLL);
    v21.location = 0;
    v21.CFIndex length = 10;
    CFArrayGetValues(v7, v21, v10);
    CFArrayRef v11 = CFArrayCreate(*v9, v10, 10, MEMORY[0x1E4F1D510]);
    free(v10);
  }
  CFArrayGetCount(v11);
  CFArrayApplyBlock();
  if (*((unsigned char *)v17 + 24))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      unsigned int v20 = CFDictionarySetInt64();
      if (v20 || (unsigned int v20 = CFDictionarySetInt64()) != 0)
      {
        APSLogErrorAt();
      }
      else
      {
        CFDictionarySetValue(Mutable, @"addresses", v11);
        *a3 = Mutable;
        CFMutableDictionaryRef Mutable = 0;
      }
      goto LABEL_20;
    }
    APSLogErrorAt();
    int v15 = -6728;
  }
  else
  {
    APSLogErrorAt();
    CFMutableDictionaryRef Mutable = 0;
    int v15 = -6705;
  }
  unsigned int v20 = v15;
LABEL_20:
  if (v11) {
    CFRelease(v11);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_24:
  uint64_t v13 = v20;
  _Block_object_dispose(&v16, 8);
  return v13;
}

uint64_t APBrokerCopyAuthInfoFromBrokerResponse(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3, CFTypeRef *a4, CFTypeRef *a5)
{
  CFTypeRef cf = 0;
  CFStringGetTypeID();
  Typeduint64_t Value = CFDictionaryGetTypedValue();
  if (!TypedValue) {
    goto LABEL_25;
  }
  uint64_t v10 = (const void *)TypedValue;
  CFNumberGetTypeID();
  uint64_t v11 = CFDictionaryGetTypedValue();
  if (!v11) {
    goto LABEL_25;
  }
  CFArrayRef v12 = (const void *)v11;
  CFStringGetTypeID();
  uint64_t v13 = CFDictionaryGetTypedValue();
  if (!v13)
  {
    uint64_t v16 = 0;
    CFDataRef v15 = 0;
    goto LABEL_16;
  }
  CFTypeRef v14 = (const void *)v13;
  CFDictionaryGetTypeID();
  CFDataRef v15 = (const __CFData *)CFDictionaryGetTypedValue();
  if (!v15)
  {
LABEL_27:
    APSLogErrorAt();
    goto LABEL_28;
  }
  CFStringGetTypeID();
  if (!CFDictionaryGetTypedValue())
  {
LABEL_25:
    APSLogErrorAt();
    CFDataRef v15 = 0;
LABEL_28:
    uint64_t v16 = 4294960591;
    goto LABEL_16;
  }
  CFDataRef v15 = (const __CFData *)APSCFDataCreateWithBase64String();
  if (!v15)
  {
    APSLogErrorAt();
    uint64_t v16 = 4294960568;
    goto LABEL_16;
  }
  APBrokeredReceiverCopyCFStringFromTXTRecord(@"deviceid", v15, (CFStringRef *)&cf);
  if (!cf) {
    goto LABEL_27;
  }
  if (a2) {
    *a2 = CFRetain(v10);
  }
  if (a3) {
    *a3 = CFRetain(v12);
  }
  if (a4) {
    *a4 = CFRetain(v14);
  }
  uint64_t v16 = 0;
  if (a5) {
    *a5 = CFRetain(cf);
  }
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v16;
}

uint64_t APBrokerCreateBrokeredReceiverFromBrokerResponseReceiverEntry(const void *a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  if (gLogCategory_APBroker <= 30 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  CFStringGetTypeID();
  Typeduint64_t Value = CFDictionaryGetTypedValue();
  if (!TypedValue) {
    goto LABEL_12;
  }
  int v8 = (const void *)TypedValue;
  CFStringGetTypeID();
  uint64_t v9 = CFDictionaryGetTypedValue();
  if (!v9) {
    goto LABEL_12;
  }
  uint64_t v10 = (const void *)v9;
  CFStringGetTypeID();
  uint64_t v11 = CFDictionaryGetTypedValue();
  if (v11 && (v12 = (const void *)v11, CFStringGetTypeID(), (uint64_t v13 = CFDictionaryGetTypedValue()) != 0))
  {
    uint64_t v14 = v13;
    CFStringGetTypeID();
    uint64_t v15 = CFDictionaryGetTypedValue();
    uint64_t v16 = APBrokeredReceiverCreateWithTXTRecordBase64(a1, a2, v8, v10, v12, v14, v15, &cf);
    if (v16)
    {
      APSLogErrorAt();
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      *a4 = cf;
    }
  }
  else
  {
LABEL_12:
    APSLogErrorAt();
    return 4294960591;
  }
  return v16;
}

void __APBrokerCreateBrokeredReceiversFromBrokerResponse_block_invoke_2(uint64_t a1, CFTypeRef cf)
{
  if (cf)
  {
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 == CFDictionaryGetTypeID())
    {
      uint64_t v8 = 0;
      APBrokerCreateBrokeredReceiverFromBrokerResponseReceiverEntry(*(const void **)(a1 + 32), *(const void **)(a1 + 40), (uint64_t)cf, (CFTypeRef *)&v8);
      CFTypeRef v5 = (CFTypeRef)v8;
      if (v8)
      {
        CFAllocatorRef v6 = *(__CFDictionary **)(a1 + 48);
        PublicReceiverUUID = (const void *)APBrokeredReceiverGetPublicReceiverUUID(v8);
        CFDictionarySetValue(v6, PublicReceiverUUID, v5);
        CFRelease(v5);
      }
    }
  }
}

CFTypeID __APBrokerCreateBrokeredReceiverConnectivityInfoFromBrokerResponse_block_invoke(CFTypeID result, CFTypeRef cf)
{
  uint64_t v2 = result;
  if (!cf || (CFTypeID v3 = CFGetTypeID(cf), result = CFStringGetTypeID(), v3 != result)) {
    *(unsigned char *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = 0;
  }
  return result;
}

void _APBrokerFinalize(void *a1)
{
  if (gLogCategory_APBroker <= 50 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = a1[7];
  if (v2)
  {
    dispatch_release(v2);
    a1[7] = 0;
  }
  CFTypeID v3 = (const void *)a1[6];
  if (v3)
  {
    CFRelease(v3);
    a1[6] = 0;
  }
  if (a1[5])
  {
    FigSimpleMutexDestroy();
    a1[5] = 0;
  }
  CFTypeID v4 = (const void *)a1[3];
  if (v4)
  {
    CFRelease(v4);
    a1[3] = 0;
  }
  CFTypeRef v5 = (const void *)a1[2];
  if (v5)
  {
    CFRelease(v5);
    a1[2] = 0;
  }
}

void __APBrokerSendRequest_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  if (gLogCategory_APBroker <= 30 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
  {
    APBrokerHTTPProtocolString(*(unsigned __int8 *)(*(void *)(a1 + 48) + 32));
    if (gLogCategory_APBroker == -1) {
      _LogCategory_Initialize();
    }
    LogPrintF();
  }
  if (a5 == 401) {
    unsigned int v12 = -6754;
  }
  else {
    unsigned int v12 = -6712;
  }
  if (a5 == 200) {
    unsigned int v12 = 0;
  }
  if (a6) {
    uint64_t v13 = a6;
  }
  else {
    uint64_t v13 = v12;
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, a3, a4, a5, v13);
  uint64_t v14 = *(const void **)(a1 + 32);
  _Block_release(v14);
}

uint64_t APTransportServiceCreate(uint64_t a1, const void *a2, uint64_t a3, NSObject *a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a4 || !a5)
  {
    APSLogErrorAt();
    return 4294950706;
  }
  FigTransportServiceGetClassID();
  uint64_t v13 = CMDerivedObjectCreate();
  if (v13)
  {
    uint64_t v17 = v13;
LABEL_21:
    APSLogErrorAt();
    return v17;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 40) = a2;
  if (a2) {
    CFRetain(a2);
  }
  SNPrintF();
  dispatch_queue_t v15 = dispatch_queue_create(label, 0);
  *(void *)(DerivedStorage + 8) = v15;
  if (!v15)
  {
    APSLogErrorAt();
    return 4294950705;
  }
  *(void *)(DerivedStorage + 16) = a4;
  dispatch_retain(a4);
  *(void *)(DerivedStorage + 24) = a6;
  *(void *)(DerivedStorage + 32) = a5;
  *(_DWORD *)(DerivedStorage + 64) = 55667;
  *(unsigned char *)(DerivedStorage + 72) = 1;
  if (a3) {
    *(unsigned char *)(DerivedStorage + 72) = CFDictionaryGetInt64() != 0;
  }
  uint64_t v16 = FigCFWeakReferenceTableCreate();
  if (v16)
  {
    uint64_t v17 = v16;
    goto LABEL_21;
  }
  if (gLogCategory_APTransportService <= 30
    && (gLogCategory_APTransportService != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v17 = 0;
  *a7 = 0;
  return v17;
}

uint64_t APTransportServiceUnregisterSession(const void *a1)
{
  return 0;
}

void service_unregisterSessionInternal(const void **a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportService <= 30
    && (gLogCategory_APTransportService != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (FigCFWeakReferenceTableRemoveValue()) {
    APSLogErrorAt();
  }
  uint64_t v2 = *a1;
  if (*a1)
  {
    CFRelease(v2);
  }
}

uint64_t service_Invalidate(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)service_deferInvalidateInternal);
  return 0;
}

void service_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  service_invalidateInternal();
  uint64_t v1 = (const void *)DerivedStorage[5];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[5] = 0;
  }
  uint64_t v2 = DerivedStorage[2];
  if (v2)
  {
    dispatch_release(v2);
    DerivedStorage[2] = 0;
  }
  CFTypeID v3 = DerivedStorage[1];
  if (v3)
  {
    dispatch_release(v3);
    DerivedStorage[1] = 0;
  }
}

__CFString *service_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTransportService %p '%@'>", a1, *(void *)(DerivedStorage + 40));
  return Mutable;
}

uint64_t service_CopyProperty()
{
  CMBaseObjectGetDerivedStorage();
  return FigDispatchSyncCopyPropertyImplementation();
}

uint64_t service_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  return MEMORY[0x1F40DD378](v6, service_setPropertyInternal, a1, a2, a3);
}

void service_deferInvalidateInternal(const void *a1)
{
  service_invalidateInternal();
  CFRelease(a1);
}

void service_invalidateInternal()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    if (gLogCategory_APTransportService <= 30
      && (gLogCategory_APTransportService != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *uint64_t v1 = 1;
    service_cleanUp();
    *((void *)v1 + 3) = 0;
    *((void *)v1 + 4) = 0;
    uint64_t v2 = (const void *)*((void *)v1 + 6);
    if (v2)
    {
      CFRelease(v2);
      *((void *)v1 + 6) = 0;
    }
  }
}

void service_cleanUp()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(DerivedStorage + 56);
  if (v1)
  {
    APTConnectionListenerInvalidate(v1);
    uint64_t v2 = *(const void **)(DerivedStorage + 56);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(DerivedStorage + 56) = 0;
    }
  }
}

uint64_t service_copyPropertyInternal(uint64_t a1, const void *a2, const __CFAllocator *a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, @"listeningPort")) {
    return 4294954512;
  }
  CFNumberRef v8 = CFNumberCreate(a3, kCFNumberIntType, (const void *)(DerivedStorage + 64));
  *a4 = v8;
  if (v8) {
    return 0;
  }
  APSLogErrorAt();
  return 4294950705;
}

uint64_t service_setPropertyInternal(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, @"listeningPort")) {
    return 4294954512;
  }
  if (*(void *)(DerivedStorage + 56))
  {
    APSLogErrorAt();
    return 4294950704;
  }
  else if (a3 && (CFTypeID v6 = CFGetTypeID(a3), v6 == CFNumberGetTypeID()))
  {
    CFNumberGetValue(a3, kCFNumberIntType, (void *)(DerivedStorage + 64));
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294950706;
  }
}

uint64_t service_Resume(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)service_resumeInternal);
  return 0;
}

uint64_t service_Suspend(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)service_deferCleanUp);
  return 0;
}

void service_resumeInternal(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportService <= 30
    && (gLogCategory_APTransportService != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    if (!service_createSession(a1, -1)) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (*(void *)(v3 + 56)) {
    goto LABEL_13;
  }
  uint64_t v4 = v3;
  CFTypeRef v5 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v5)
  {
    APSLogErrorAt();
    int v9 = APSSignalErrorAt();
    goto LABEL_21;
  }
  int v6 = APTConnectionListenerCreate(*(_DWORD *)(v4 + 64), -1, (uint64_t)service_handleListenerConnected, (uint64_t)v5, (uint64_t)service_handleListenerInvalidated, (uint64_t)v5, *(void *)(v4 + 8), &cf);
  if (v6)
  {
    int v9 = v6;
LABEL_19:
    APSLogErrorAt();
    goto LABEL_21;
  }
  int v7 = APTConnectionListenerResume((uint64_t)cf);
  if (v7)
  {
    int v9 = v7;
    goto LABEL_19;
  }
  int ListeningPort = APTConnectionListenerGetListeningPort((uint64_t)cf, (_DWORD *)(v4 + 64));
  if (!ListeningPort)
  {
    *(void *)(v4 + 56) = cf;
    goto LABEL_13;
  }
  int v9 = ListeningPort;
  APSLogErrorAt();
  CFTypeRef v5 = 0;
LABEL_21:
  if (cf) {
    CFRelease(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v9) {
LABEL_26:
  }
    APSLogErrorAt();
LABEL_13:
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t service_createSession(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    int v7 = Mutable;
    if (*(unsigned char *)(DerivedStorage + 72))
    {
      if (a2 == -1)
      {
        APSLogErrorAt();
        uint64_t v15 = APSSignalErrorAt();
        goto LABEL_19;
      }
      CFDictionarySetInt64();
    }
    CFDictionaryAddValue(v7, @"OwningService", a1);
    CFUUIDRef v8 = CFUUIDCreate(v5);
    if (v8)
    {
      CFUUIDRef v9 = v8;
      CFStringRef v10 = CFUUIDCreateString(v5, v8);
      if (v10)
      {
        CFAllocatorRef v11 = CFGetAllocator(a1);
        uint64_t v12 = APTransportSessionCreate(v11, 0, v10, 0, v7, &cf);
        if (v12)
        {
          uint64_t v15 = v12;
        }
        else
        {
          CMBaseObjectGetDerivedStorage();
          uint64_t Key = FigCFWeakReferenceTableAddValueAndGetKey();
          if (Key)
          {
            uint64_t v15 = Key;
          }
          else
          {
            uint64_t v14 = APSSetFBOPropertyInt64();
            if (!v14)
            {
              if (gLogCategory_APTransportService <= 30
                && (gLogCategory_APTransportService != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              CFRetain(a1);
              CFRetain(cf);
              APSDispatchAsyncFHelper();
              uint64_t v15 = 0;
              goto LABEL_15;
            }
            uint64_t v15 = v14;
          }
          APSLogErrorAt();
        }
        APSLogErrorAt();
      }
      else
      {
        APSLogErrorAt();
        uint64_t v15 = 4294950705;
      }
LABEL_15:
      CFRelease(v9);
      if (cf) {
        CFRelease(cf);
      }
      if (v10) {
        CFRelease(v10);
      }
      goto LABEL_19;
    }
    APSLogErrorAt();
    uint64_t v15 = 4294950705;
LABEL_19:
    CFRelease(v7);
    return v15;
  }
  APSLogErrorAt();
  return APSSignalErrorAt();
}

void service_handleListenerConnected(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v4 && !*(unsigned char *)CMBaseObjectGetDerivedStorage())
    {
      if (!service_createSession(v4, a3))
      {
LABEL_5:
        CFRelease(v4);
        return;
      }
      APSLogErrorAt();
    }
  }
  else
  {
    APSLogErrorAt();
    APSSignalErrorAt();
    uint64_t v4 = 0;
  }
  if ((a3 & 0x80000000) == 0 && close(a3) && *__error()) {
    __error();
  }
  if (v4) {
    goto LABEL_5;
  }
}

void service_handleListenerInvalidated(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void service_notifyNewReceiverSessionCallback(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  (*(void (**)(void, void, void))(DerivedStorage + 32))(0, *(void *)(a1 + 8), *(void *)(DerivedStorage + 24));
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    CFRelease(v3);
  }
}

void service_deferCleanUp(const void *a1)
{
  service_cleanUp();
  CFRelease(a1);
}

uint64_t wifiManagerClient_getTypeID(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APTransportWifiManagerClientCreate(uint64_t a1, void *a2)
{
  if (APTransportWifiManagerClientGetTypeID_sInitOnce != -1) {
    dispatch_once_f(&APTransportWifiManagerClientGetTypeID_sInitOnce, &APTransportWifiManagerClientGetTypeID_sTypeID, (dispatch_function_t)wifiManagerClient_getTypeID);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v4 = Instance;
    Instance[2] = 0u;
    Instance[3] = 0u;
    Instance[1] = 0u;
    dispatch_queue_t v5 = dispatch_queue_create("APTransportWifiManagerClient.queue", 0);
    *((void *)v4 + 2) = v5;
    if (v5)
    {
      *((_DWORD *)v4 + 6) = 0;
      if (gLogCategory_APTransportWifiManagerClient <= 30
        && (gLogCategory_APTransportWifiManagerClient != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v6 = 0;
      *a2 = v4;
    }
    else
    {
      uint64_t v6 = 4294895566;
      APSLogErrorAt();
      CFRelease(v4);
    }
  }
  else
  {
    uint64_t v6 = 4294895566;
    APSLogErrorAt();
  }
  return v6;
}

uint64_t APTransportWifiManagerClientRegister(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = __APTransportWifiManagerClientRegister_block_invoke;
  void v4[3] = &unk_1E688B350;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void __APTransportWifiManagerClientRegister_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v15 = 0;
  if (*(void *)(v2 + 48)) {
    goto LABEL_2;
  }
  id v5 = objc_alloc_init(MEMORY[0x1E4F5E318]);
  uint64_t v6 = v5;
  if (!v5)
  {
    APSLogErrorAt();
    int v10 = -71730;
    goto LABEL_17;
  }
  [v5 activate];
  uint64_t v7 = [MEMORY[0x1E4F5E308] activityWithType:4 reason:0];
  if (v7)
  {
    int v8 = (void *)v7;
    if ([v6 beginActivity:v7 error:&v15])
    {
      *(void *)(v2 + 48) = v6;
      *(void *)(v2 + 56) = v8;
      if (gLogCategory_APTransportWifiManagerClient >= 41)
      {
        int v10 = 0;
        uint64_t v6 = 0;
        ++*(_DWORD *)(v2 + 24);
        goto LABEL_17;
      }
      if (gLogCategory_APTransportWifiManagerClient != -1 || _LogCategory_Initialize())
      {
        uint64_t v12 = *(void *)(v2 + 48);
        LogPrintF();
      }
LABEL_2:
      int v3 = gLogCategory_APTransportWifiManagerClient;
      uint64_t v4 = (*(_DWORD *)(v2 + 24) + 1);
      *(_DWORD *)(v2 + 24) = v4;
      if (v3 <= 30)
      {
        if (v3 == -1)
        {
          if (!_LogCategory_Initialize()) {
            goto LABEL_16;
          }
          uint64_t v4 = *(unsigned int *)(v2 + 24);
        }
        uint64_t v12 = *(void *)(v2 + 48);
        uint64_t v13 = v4;
        LogPrintF();
      }
LABEL_16:
      int v10 = 0;
      uint64_t v6 = 0;
      goto LABEL_17;
    }
    int v9 = NSErrorToOSStatus();
    if (v9) {
      int v10 = v9;
    }
    else {
      int v10 = -71733;
    }
  }
  else
  {
    int v10 = -71733;
  }
  APSLogErrorAt();
LABEL_17:
  objc_msgSend(v6, "invalidate", v12, v13);

  CFRetain((CFTypeRef)v2);
  CFAllocatorRef v11 = *(NSObject **)(v2 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __wifiManagerClient_registerInternal_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v2;
  dispatch_async(v11, block);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v10;
}

uint64_t APTransportWifiManagerClientUnregister(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = __APTransportWifiManagerClientUnregister_block_invoke;
  void v4[3] = &unk_1E688B350;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void __APTransportWifiManagerClientUnregister_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v2 + 56))
  {
    int v3 = *(_DWORD *)(v2 + 24);
    BOOL v4 = __OFSUB__(v3--, 1);
    *(_DWORD *)(v2 + 24) = v3;
    if ((v3 < 0) ^ v4 | (v3 == 0))
    {
      objc_msgSend(*(id *)(v2 + 48), "endActivity:");
      if (gLogCategory_APTransportWifiManagerClient <= 40
        && (gLogCategory_APTransportWifiManagerClient != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }

      *(void *)(v2 + 56) = 0;
      [*(id *)(v2 + 48) invalidate];

      *(void *)(v2 + 48) = 0;
    }
    if (gLogCategory_APTransportWifiManagerClient <= 30
      && (gLogCategory_APTransportWifiManagerClient != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  CFRetain((CFTypeRef)v2);
  uint64_t v5 = *(NSObject **)(v2 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __wifiManagerClient_unregisterInternal_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v2;
  dispatch_async(v5, block);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
}

uint64_t APTransportWifiManagerClientCopyWifiStatistics(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APTransportWifiManagerClientCopyWifiStatistics_block_invoke;
  block[3] = &unk_1E688BD68;
  block[4] = &v6;
  void block[5] = a1;
  void block[6] = a2;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void __APTransportWifiManagerClientCopyWifiStatistics_block_invoke(void *a1)
{
  uint64_t v2 = (CFMutableDictionaryRef *)a1[6];
  if (!v2)
  {
    APSLogErrorAt();
    int v7 = -71732;
    goto LABEL_11;
  }
  int v3 = wifiManagerClient_ensureSubscribedForStatistics(a1[5]);
  if (v3)
  {
    int v7 = v3;
    APSLogErrorAt();
LABEL_19:
    uint64_t v5 = 0;
    goto LABEL_6;
  }
  uint64_t Samples = IOReportCreateSamples();
  if (!Samples)
  {
    int v7 = -71730;
    APSLogErrorAt();
    if (gLogCategory_APTransportWifiManagerClient <= 90
      && (gLogCategory_APTransportWifiManagerClient != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_19;
  }
  uint64_t v5 = (const void *)Samples;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (IOReportIterate())
  {
    APSLogErrorAt();
    int v7 = APSSignalErrorAt();
    goto LABEL_7;
  }
  int v7 = 0;
  *uint64_t v2 = Mutable;
LABEL_6:
  CFMutableDictionaryRef Mutable = 0;
LABEL_7:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v5) {
    CFRelease(v5);
  }
LABEL_11:
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v7;
}

uint64_t APTransportWifiManagerClientGetPeerRSSI(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  int v10 = 0;
  int v3 = *(NSObject **)(a1 + 16);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __APTransportWifiManagerClientGetPeerRSSI_block_invoke;
  v6[3] = &unk_1E688BD90;
  v6[4] = &v7;
  v6[5] = a1;
  void v6[6] = a2;
  void v6[7] = a3;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

void __APTransportWifiManagerClientGetPeerRSSI_block_invoke(void *a1)
{
  if (!a1[7])
  {
    APSLogErrorAt();
    int v5 = -71732;
    goto LABEL_10;
  }
  int v5 = wifiManagerClient_ensureSubscribedForStatistics(a1[5]);
  if (v5)
  {
    APSLogErrorAt();
  }
  else
  {
    uint64_t Samples = IOReportCreateSamples();
    if (Samples)
    {
      int v3 = (const void *)Samples;
      uint64_t v4 = (const void *)CFStringCreateF();
      if (IOReportSelectChannelsInGroup() & 1) != 0 || (IOReportIterate())
      {
        APSLogErrorAt();
        int v5 = APSSignalErrorAt();
      }
      goto LABEL_6;
    }
    APSLogErrorAt();
    int v5 = -71730;
    if (gLogCategory_APTransportWifiManagerClient <= 90
      && (gLogCategory_APTransportWifiManagerClient != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  int v3 = 0;
  uint64_t v4 = 0;
LABEL_6:
  if (v3) {
    CFRelease(v3);
  }
  if (v4) {
    CFRelease(v4);
  }
LABEL_10:
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v5;
}

void wifiManagerClient_Finalize(uint64_t a1)
{
  if (gLogCategory_APTransportWifiManagerClient <= 30
    && (gLogCategory_APTransportWifiManagerClient != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }

  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 32) = 0;
  }
  int v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v4 = *(NSObject **)(a1 + 16);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(a1 + 16) = 0;
  }
}

void __wifiManagerClient_registerInternal_block_invoke(uint64_t a1)
{
  wifiManagerClient_dumpWifiStatistics(*(void *)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

void wifiManagerClient_dumpWifiStatistics(uint64_t a1)
{
  if (!wifiManagerClient_ensureSubscribedForStatistics(a1))
  {
    uint64_t Samples = (const void *)IOReportCreateSamples();
    if (!Samples)
    {
      APSLogErrorAt();
      if (gLogCategory_APTransportWifiManagerClient <= 90
        && (gLogCategory_APTransportWifiManagerClient != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_20;
    }
    v16[0] = 0;
    v16[1] = v16;
    v16[2] = 0x2020000000;
    void v16[3] = 0;
    uint64_t v8 = 0;
    uint64_t v9 = &v8;
    uint64_t v10 = 0x5810000000;
    CFAllocatorRef v11 = &unk_1D093E0F9;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v15 = 0;
    v3[0] = 0;
    v3[1] = v3;
    v3[2] = 0x5810000000;
    v3[3] = &unk_1D093E0F9;
    long long v4 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    uint64_t v7 = 0;
    DataBuffer_Init();
    DataBuffer_Init();
    if (IOReportIterate())
    {
      APSLogErrorAt();
      int v2 = APSSignalErrorAt();
    }
    else
    {
      int v2 = DataBuffer_Append();
      if (!v2)
      {
        int v2 = DataBuffer_Commit();
        if (!v2)
        {
          if (gLogCategory_APTransportWifiManagerClient <= 50
            && (gLogCategory_APTransportWifiManagerClient != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          if (!v9[8]) {
            goto LABEL_17;
          }
          int v2 = DataBuffer_Append();
          if (!v2)
          {
            int v2 = DataBuffer_Commit();
            if (!v2)
            {
              if (gLogCategory_APTransportWifiManagerClient <= 30
                && (gLogCategory_APTransportWifiManagerClient != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
LABEL_17:
              int v2 = 0;
              goto LABEL_18;
            }
          }
        }
      }
      APSLogErrorAt();
    }
LABEL_18:
    DataBuffer_Free();
    DataBuffer_Free();
    _Block_object_dispose(v3, 8);
    _Block_object_dispose(&v8, 8);
    _Block_object_dispose(v16, 8);
    if (v2) {
      APSLogErrorAt();
    }
LABEL_20:
    if (Samples) {
      CFRelease(Samples);
    }
    return;
  }
  APSLogErrorAt();
}

void sub_1D08DFB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 152), 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t wifiManagerClient_ensureSubscribedForStatistics(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32)) {
    return 0;
  }
  if (Apple80211GetIOReportingService())
  {
    if (gLogCategory_APTransportWifiManagerClient <= 90
      && (gLogCategory_APTransportWifiManagerClient != -1 || _LogCategory_Initialize()))
    {
      Apple80211ErrToStr();
      LogPrintF();
    }
    return 4294960534;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

uint64_t __wifiManagerClient_pruneIOReport_block_invoke(uint64_t a1)
{
  SubGroup = (const void *)IOReportChannelGetSubGroup();
  CFStringRef ChannelName = (const __CFString *)IOReportChannelGetChannelName();
  uint64_t v4 = 273;
  if (SubGroup)
  {
    CFStringRef v5 = ChannelName;
    if (ChannelName)
    {
      CFIndex Length = CFStringGetLength(ChannelName);
      CFDictionaryRef MutableCopy = CFStringCreateMutableCopy(0, Length, v5);
      CFStringTrimWhitespace(MutableCopy);
      if (!CFSetContainsValue(*(CFSetRef *)(a1 + 32), MutableCopy))
      {
        uint64_t v4 = 16;
        if (!MutableCopy) {
          return v4;
        }
        goto LABEL_5;
      }
      uint64_t v4 = 16 * (CFSetContainsValue(*(CFSetRef *)(a1 + 40), SubGroup) == 0);
      if (MutableCopy) {
LABEL_5:
      }
        CFRelease(MutableCopy);
    }
  }
  return v4;
}

uint64_t __wifiManagerClient_printSamples_block_invoke(uint64_t a1, uint64_t a2)
{
  CFStringRef Group = (const __CFString *)IOReportChannelGetGroup();
  if (CFStringHasPrefix(Group, @"Interface awdl0 Peer"))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    IOReportChannelGetGroup();
    IOReportSimpleGetIntegerValue();
    if (!a2
      || !*(void *)(v5 + 64) && DataBuffer_AppendF()
      || !FigCFStringGetCStringPtrAndBufferToFree()
      || SNScanF() != 1
      || DataBuffer_AppendF()
      || DataBuffer_AppendF())
    {
      APSLogErrorAt();
    }
    free(0);
  }
  else
  {
    if (!FigCFEqual())
    {
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = Group;
      DataBuffer_AppendF();
    }
    CFStringRef ChannelName = (const __CFString *)IOReportChannelGetChannelName();
    CFIndex Length = CFStringGetLength(ChannelName);
    CFDictionaryRef MutableCopy = CFStringCreateMutableCopy(0, Length, ChannelName);
    CFStringTrimWhitespace(MutableCopy);
    IOReportChannelGetUnitLabel();
    IOReportSimpleGetIntegerValue();
    DataBuffer_AppendF();
    DataBuffer_AppendF();
    DataBuffer_AppendF();
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }
  return 0;
}

void __wifiManagerClient_unregisterInternal_block_invoke(uint64_t a1)
{
  wifiManagerClient_dumpWifiStatistics(*(void *)(a1 + 32));
  int v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t __wifiManagerClient_copyWifiStatistics_block_invoke(uint64_t a1)
{
  IOReportChannelGetGroup();
  int v2 = FigCFEqual();
  CFStringRef ChannelName = (const __CFString *)IOReportChannelGetChannelName();
  if (!ChannelName) {
    return 0;
  }
  CFStringRef v4 = ChannelName;
  CFIndex Length = CFStringGetLength(ChannelName);
  CFDictionaryRef MutableCopy = CFStringCreateMutableCopy(0, Length, v4);
  CFStringTrimWhitespace(MutableCopy);
  uint64_t UnitLabel = IOReportChannelGetUnitLabel();
  Integeruint64_t Value = IOReportSimpleGetIntegerValue();
  CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"%lld%@", IntegerValue, UnitLabel);
  if (FigCFEqual())
  {
    uint64_t v10 = *(__CFDictionary **)(a1 + 32);
    if (v2) {
      uint64_t v11 = @"P2PCCA";
    }
    else {
      uint64_t v11 = @"InfraCCA";
    }
  }
  else if (FigCFEqual())
  {
    uint64_t v10 = *(__CFDictionary **)(a1 + 32);
    uint64_t v11 = @"InfraRSSI";
  }
  else
  {
    if (!FigCFEqual() || v2) {
      goto LABEL_12;
    }
    uint64_t v10 = *(__CFDictionary **)(a1 + 32);
    uint64_t v11 = @"InfraSNR";
  }
  CFDictionarySetValue(v10, v11, v9);
LABEL_12:
  if (v9) {
    CFRelease(v9);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return 0;
}

uint64_t __wifiManagerClient_getPeerRSSI_block_invoke(uint64_t a1)
{
  **(void **)(a1 + 32) = IOReportSimpleGetIntegerValue();
  return 0;
}

uint64_t APTransportPackageScreenCreate(uint64_t a1, void *a2)
{
  uint64_t v2 = APTransportPackageScreenCreateWithBBuf(a1, 0, a2);
  if (v2) {
    APSLogErrorAt();
  }
  return v2;
}

uint64_t APTransportPackageScreenCreateWithBBuf(uint64_t a1, const void *a2, void *a3)
{
  APTransportPackageGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5)
  {
    APSLogErrorAt();
  }
  else
  {
    *(void *) CMBaseObjectGetDerivedStorage() = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (gLogCategory_APTransportPackageScreen <= 30
      && (gLogCategory_APTransportPackageScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *a3 = 0;
  }
  return v5;
}

void screenpackage_Finalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportPackageScreen <= 30
    && (gLogCategory_APTransportPackageScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *uint64_t DerivedStorage = 0;
  }
}

__CFString *screenpackage_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTransportPackageScreen %p>", a1);
  return Mutable;
}

CFTypeRef screenpackage_CopyMessageData()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v1 = *DerivedStorage;
  if (*DerivedStorage) {
    CFRetain(*DerivedStorage);
  }
  return v1;
}

void screenpackage_SetMessageData(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  CFStringRef v4 = *DerivedStorage;
  *uint64_t DerivedStorage = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t screenpackage_GetMessageType()
{
  return 0;
}

CFTypeRef screenpackage_CreateBBufRepresentation()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v1 = *DerivedStorage;
  if (*DerivedStorage) {
    CFRetain(*DerivedStorage);
  }
  return v1;
}

uint64_t APTransportStreamAggregateCreate(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  if (!a3)
  {
    APSLogErrorAt();
    return 4294950686;
  }
  FigTransportStreamGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5)
  {
    uint64_t v12 = v5;
    APSLogErrorAt();
    return v12;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  SNPrintF();
  uint64_t v7 = FigDispatchQueueCreateWithPriority();
  DerivedStorage[2] = v7;
  if (!v7
    || (uint64_t v8 = FigSimpleMutexCreate(), (DerivedStorage[5] = v8) == 0)
    || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (DerivedStorage[7] = Mutable) == 0)|| (dispatch_semaphore_t v10 = dispatch_semaphore_create(0), (DerivedStorage[3] = v10) == 0))
  {
    APSLogErrorAt();
    return 4294950685;
  }
  if (a2)
  {
    uint64_t Value = CFDictionaryGetValue(a2, @"SendBackingProvider");
    if (Value) {
      uint64_t Value = CFRetain(Value);
    }
    DerivedStorage[1] = Value;
    if (Value) {
      goto LABEL_11;
    }
LABEL_15:
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  if (!DerivedStorage[1]) {
    goto LABEL_15;
  }
LABEL_11:
  if (gLogCategory_APTransportStreamAggregate <= 50
    && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v12 = 0;
  *a3 = 0;
  return v12;
}

uint64_t APTransportStreamAggregateAddSubStream(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v5 = DerivedStorage;
    long long v6 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v6)
    {
      if (v6 == &kAPTransportStreamAggregate_FigTransportStreamClass)
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 40));
        if (gLogCategory_APTransportStreamAggregate <= 50
          && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v8 = *(void *)(v5 + 48);
        uint64_t v9 = CMBaseObjectGetDerivedStorage();
        if (v8)
        {
          value = 0;
          FigSimpleMutexCheckIsLockedOnThisThread();
          if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v9 + 56), a2))
          {
            APSLogErrorAt();
            uint64_t v7 = 4294950686;
          }
          else
          {
            uint64_t CMBaseObject = FigTransportStreamGetCMBaseObject();
            uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v11) {
              uint64_t v12 = v11;
            }
            else {
              uint64_t v12 = 0;
            }
            uint64_t v16 = *(uint64_t (**)(uint64_t, __CFString *, void, void **))(v12 + 48);
            if (v16)
            {
              uint64_t v17 = v16(CMBaseObject, @"SendConnection", *MEMORY[0x1E4F1CF80], &value);
              if (v17)
              {
                uint64_t v7 = v17;
              }
              else
              {
                uint64_t v18 = *(void *)(v9 + 48);
                char v19 = value;
                APTransportConnectionAggregateProtocolGetProtocolID();
                uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
                if (ProtocolVTable && (uint64_t v21 = *(void *)(ProtocolVTable + 16)) != 0)
                {
                  int v22 = *(uint64_t (**)(uint64_t, void *))(v21 + 16);
                  if (v22)
                  {
                    uint64_t v7 = v22(v18, v19);
                    if (!v7)
                    {
                      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v9 + 56), a2, value);
                      goto LABEL_26;
                    }
                  }
                  else
                  {
                    uint64_t v7 = 4294954514;
                  }
                }
                else
                {
                  uint64_t v7 = 4294954508;
                }
              }
            }
            else
            {
              uint64_t v7 = 4294954514;
            }
            APSLogErrorAt();
          }
LABEL_26:
          if (value) {
            CFRelease(value);
          }
          if (!v7) {
            goto LABEL_61;
          }
          goto LABEL_87;
        }
        CFTypeRef cf = 0;
        value = 0;
        FigSimpleMutexCheckIsLockedOnThisThread();
        uint64_t v13 = FigTransportStreamGetCMBaseObject();
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v23 = *(uint64_t (**)(uint64_t, __CFString *, void, void **))(v15 + 48);
        if (v23)
        {
          uint64_t v24 = v23(v13, @"SendConnection", *MEMORY[0x1E4F1CF80], &value);
          if (!v24)
          {
            APTransportConnectionAggregateProtocolGetProtocolID();
            uint64_t v25 = CMBaseObjectGetProtocolVTable();
            if (!v25 || !*(void *)(v25 + 16))
            {
              APSLogErrorAt();
              uint64_t v26 = 0;
              uint64_t v7 = 4294950686;
              goto LABEL_47;
            }
            uint64_t v26 = (const void *)CFStringCreateF();
            if (v26)
            {
              uint64_t v27 = value;
              APTransportConnectionAggregateProtocolGetProtocolID();
              uint64_t v28 = CMBaseObjectGetProtocolVTable();
              if (v28 && (uint64_t v29 = *(void *)(v28 + 16)) != 0)
              {
                long long v30 = *(uint64_t (**)(void *, const void *, CFTypeRef *))(v29 + 8);
                if (v30)
                {
                  uint64_t v31 = v30(v27, v26, &cf);
                  if (v31)
                  {
                    uint64_t v7 = v31;
                  }
                  else
                  {
                    CFTypeRef v32 = cf;
                    uint64_t v33 = *(void *)(v9 + 16);
                    uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
                    if (v34) {
                      uint64_t v35 = v34;
                    }
                    else {
                      uint64_t v35 = 0;
                    }
                    long long v41 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t (*)(int), uint64_t, void))(v35 + 16);
                    if (v41)
                    {
                      uint64_t v42 = v41(v32, a1, streamAggregate_eventReceived, v33, 0);
                      if (v42)
                      {
                        uint64_t v7 = v42;
                      }
                      else
                      {
                        uint64_t v43 = APTransportConnectionGetCMBaseObject(cf);
                        uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
                        if (v44) {
                          uint64_t v45 = v44;
                        }
                        else {
                          uint64_t v45 = 0;
                        }
                        uint64_t v46 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *))(v45 + 56);
                        if (v46)
                        {
                          uint64_t v47 = v46(v43, @"PackageType", @"RTP");
                          if (v47)
                          {
                            uint64_t v7 = v47;
                          }
                          else
                          {
                            CFTypeRef v48 = cf;
                            uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v49) {
                              uint64_t v50 = v49;
                            }
                            else {
                              uint64_t v50 = 0;
                            }
                            int v51 = *(uint64_t (**)(CFTypeRef))(v50 + 8);
                            if (v51)
                            {
                              uint64_t v52 = v51(v48);
                              if (!v52)
                              {
                                long long v53 = *(NSObject **)(v9 + 24);
                                dispatch_time_t v54 = dispatch_time(0, 4000000000);
                                if (!dispatch_semaphore_wait(v53, v54) && !*(_DWORD *)(v9 + 32))
                                {
                                  if (gLogCategory_APTransportStreamAggregate <= 50
                                    && (gLogCategory_APTransportStreamAggregate != -1
                                     || _LogCategory_Initialize()))
                                  {
                                    LogPrintF();
                                  }
                                  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v9 + 56), a2, value);
                                  uint64_t v7 = 0;
                                  *(void *)(v9 + 48) = cf;
                                  CFTypeRef cf = 0;
                                  goto LABEL_54;
                                }
                                APSLogErrorAt();
                                uint64_t v7 = APSSignalErrorAt();
LABEL_47:
                                if (v7)
                                {
                                  CFTypeRef v36 = cf;
                                  if (cf)
                                  {
                                    uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
                                    uint64_t v38 = v37 ? v37 : 0;
                                    long long v39 = *(void (**)(CFTypeRef, void))(v38 + 24);
                                    if (v39) {
                                      v39(v36, 0);
                                    }
                                  }
                                }
LABEL_54:
                                if (value) {
                                  CFRelease(value);
                                }
                                if (cf) {
                                  CFRelease(cf);
                                }
                                if (v26) {
                                  CFRelease(v26);
                                }
                                if (!v7) {
                                  goto LABEL_61;
                                }
LABEL_87:
                                APSLogErrorAt();
LABEL_61:
                                pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 40));
                                return v7;
                              }
                              uint64_t v7 = v52;
                            }
                            else
                            {
                              uint64_t v7 = 4294954514;
                            }
                          }
                        }
                        else
                        {
                          uint64_t v7 = 4294954514;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v7 = 4294954514;
                    }
                  }
                }
                else
                {
                  uint64_t v7 = 4294954514;
                }
              }
              else
              {
                uint64_t v7 = 4294954508;
              }
              APSLogErrorAt();
              goto LABEL_47;
            }
            APSLogErrorAt();
            uint64_t v7 = 4294950685;
            goto LABEL_47;
          }
          uint64_t v7 = v24;
        }
        else
        {
          uint64_t v7 = 4294954514;
        }
        APSLogErrorAt();
        uint64_t v26 = 0;
        goto LABEL_47;
      }
    }
  }
  APSLogErrorAt();
  return 4294950686;
}

uint64_t APTransportStreamAggregateRemoveSubStream(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v5 = DerivedStorage;
    long long v6 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v6)
    {
      if (v6 == &kAPTransportStreamAggregate_FigTransportStreamClass && *(void *)(v5 + 48))
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 40));
        if (gLogCategory_APTransportStreamAggregate <= 50
          && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 56), a2);
        if (!Value)
        {
          APSLogErrorAt();
          uint64_t v7 = 4294950686;
          goto LABEL_18;
        }
        uint64_t v9 = Value;
        uint64_t v10 = *(void *)(v5 + 48);
        APTransportConnectionAggregateProtocolGetProtocolID();
        uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
        if (ProtocolVTable && (uint64_t v12 = *(void *)(ProtocolVTable + 16)) != 0)
        {
          uint64_t v13 = *(uint64_t (**)(uint64_t, const void *))(v12 + 24);
          if (v13)
          {
            uint64_t v7 = v13(v10, v9);
            if (!v7)
            {
              CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v5 + 56), a2);
LABEL_18:
              pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 40));
              return v7;
            }
          }
          else
          {
            uint64_t v7 = 4294954514;
          }
        }
        else
        {
          uint64_t v7 = 4294954508;
        }
        APSLogErrorAt();
        goto LABEL_18;
      }
    }
  }
  APSLogErrorAt();
  return 4294950686;
}

uint64_t streamAggregate_Invalidate()
{
  return 0;
}

void streamAggregate_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportStreamAggregate <= 30
    && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  streamAggregate_invalidateInternal();
  FigSimpleMutexDestroy();
  CFTypeRef v1 = DerivedStorage[2];
  if (v1) {
    dispatch_release(v1);
  }
  uint64_t v2 = DerivedStorage[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)DerivedStorage[6];
  if (v3) {
    CFRelease(v3);
  }
  CFStringRef v4 = (const void *)DerivedStorage[7];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)DerivedStorage[1];
  if (v5)
  {
    CFRelease(v5);
  }
}

__CFString *streamAggregate_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTransportStreamAggregate %p>", a1);
  return Mutable;
}

uint64_t streamAggregate_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294950679;
  }
  uint64_t v8 = DerivedStorage;
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 40));
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (*(unsigned char *)v9)
  {
    APSLogErrorAt();
    uint64_t v16 = 4294950679;
    goto LABEL_18;
  }
  if (!CFEqual(a2, @"PrimaryPacketDropCount"))
  {
    if (gLogCategory_APTransportStreamAggregate <= 50
      && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v16 = 4294954509;
    goto LABEL_18;
  }
  uint64_t v10 = *(void *)(v9 + 48);
  if (!v10)
  {
    Object = (const void *)CFNumberGetObject();
    *a4 = CFRetain(Object);
    goto LABEL_13;
  }
  uint64_t CMBaseObject = APTransportConnectionGetCMBaseObject(v10);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v13 + 48);
  if (!v14)
  {
    uint64_t v16 = 4294954514;
LABEL_15:
    APSLogErrorAt();
LABEL_18:
    pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 40));
    APSLogErrorAt();
    return v16;
  }
  uint64_t v15 = v14(CMBaseObject, @"PrimaryPacketDropCount", a3, a4);
  if (v15)
  {
    uint64_t v16 = v15;
    goto LABEL_15;
  }
LABEL_13:
  pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 40));
  return 0;
}

uint64_t streamAggregate_SetProperty()
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    APSLogErrorAt();
    return 4294950679;
  }
  else
  {
    if (gLogCategory_APTransportStreamAggregate <= 50
      && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 4294954509;
  }
}

uint64_t streamAggregate_invalidateInternal()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)result)
  {
    uint64_t v1 = result;
    *(unsigned char *)uint64_t result = 1;
    uint64_t result = FigCFDictionaryGetCount();
    if (result >= 1 && gLogCategory_APTransportStreamAggregate <= 90)
    {
      if (gLogCategory_APTransportStreamAggregate != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
        uint64_t result = LogPrintF();
      }
    }
    uint64_t v2 = *(void *)(v1 + 48);
    if (v2)
    {
      uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v3) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v5 = *(void (**)(uint64_t, void))(v4 + 24);
      if (v5) {
        v5(v2, 0);
      }
      uint64_t result = APTransportConnectionGetCMBaseObject(*(void *)(v1 + 48));
      if (result)
      {
        uint64_t v6 = result;
        uint64_t VTable = CMBaseObjectGetVTable();
        uint64_t v9 = *(void *)(VTable + 8);
        uint64_t result = VTable + 8;
        uint64_t v8 = v9;
        uint64_t v10 = v9 ? v8 : 0;
        uint64_t v11 = *(uint64_t (**)(uint64_t))(v10 + 24);
        if (v11) {
          uint64_t result = v11(v6);
        }
      }
    }
    if (gLogCategory_APTransportStreamAggregate <= 30)
    {
      if (gLogCategory_APTransportStreamAggregate != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

uint64_t streamAggregate_Resume()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportStreamAggregate <= 50
    && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*DerivedStorage) {
    return 0;
  }
  APSLogErrorAt();
  return 4294950679;
}

uint64_t streamAggregate_SendMessage(uint64_t a1, uint64_t a2, OpaqueCMBlockBuffer *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = 0;
  char v16 = 0;
  if (*(unsigned char *)DerivedStorage) {
    return 0;
  }
  uint64_t v7 = DerivedStorage;
  if (*(void *)(DerivedStorage + 48))
  {
    uint64_t v8 = streamAggregate_copyFormattedAsyncPackageForBBuf(a1, a3, a2, &v17, &v16);
    if (v8)
    {
      uint64_t v14 = v8;
    }
    else
    {
      if (gLogCategory_APTransportStreamAggregate <= 10
        && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v9 = *(void *)(v7 + 48);
      uint64_t v10 = v17;
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 56);
      if (v13)
      {
        uint64_t v14 = v13(v9, v10);
        if (!v14) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v14 = 4294954514;
      }
    }
    APSLogErrorAt();
  }
  else
  {
    uint64_t v14 = 0;
  }
LABEL_16:
  if (v16) {
    APTransportStreamSendBackingProviderRelinquishBBuf(*(void *)(v7 + 8), a3);
  }
  return v14;
}

uint64_t streamAggregate_SendBatch(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  CFIndex Count = CFArrayGetCount(a3);
  if (*(unsigned char *)DerivedStorage || !*(void *)(DerivedStorage + 48)) {
    return 0;
  }
  uint64_t v8 = Count;
  CFAllocatorRef v9 = CFGetAllocator(a3);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v9, v8, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFArrayRef v11 = Mutable;
    CFAllocatorRef v12 = CFGetAllocator(a3);
    uint64_t v13 = (char *)CFAllocatorAllocate(v12, v8, 0);
    if (v13)
    {
      uint64_t v14 = v13;
      bzero(v13, v8);
      if (gLogCategory_APTransportStreamAggregate <= 10
        && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v8 < 1)
      {
LABEL_21:
        if (gLogCategory_APTransportStreamAggregate <= 10
          && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v20 = *(void *)(DerivedStorage + 48);
        uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v21) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = 0;
        }
        uint64_t v23 = *(uint64_t (**)(uint64_t, const __CFArray *))(v22 + 88);
        if (v23) {
          uint64_t v24 = v23(v20, v11);
        }
        else {
          uint64_t v24 = APTransportConnectionSendBatchSlow(v20, v11);
        }
        uint64_t v25 = v24;
        if (v24) {
          APSLogErrorAt();
        }
      }
      else
      {
        CFIndex v15 = 0;
        while (1)
        {
          CFStringRef ValueAtIndex = (OpaqueCMBlockBuffer *)CFArrayGetValueAtIndex(a3, v15);
          if (!ValueAtIndex || (v17 = ValueAtIndex, CFTypeID v18 = CFGetTypeID(ValueAtIndex), v18 != CMBlockBufferGetTypeID()))
          {
            APSLogErrorAt();
            uint64_t v25 = 4294950686;
            goto LABEL_33;
          }
          uint64_t v19 = streamAggregate_copyFormattedAsyncPackageForBBuf(a1, v17, a2, (uint64_t *)&value, &v14[v15]);
          if (v19) {
            break;
          }
          if (gLogCategory_APTransportStreamAggregate <= 10
            && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          CFArrayAppendValue(v11, value);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
          if (v8 == ++v15) {
            goto LABEL_21;
          }
        }
        uint64_t v25 = v19;
        APSLogErrorAt();
      }
LABEL_33:
      if (v8 >= 1)
      {
        for (CFIndex i = 0; i != v8; ++i)
        {
          if (v14[i])
          {
            uint64_t v27 = (void *)CFArrayGetValueAtIndex(a3, i);
            APTransportStreamSendBackingProviderRelinquishBBuf(*(void *)(DerivedStorage + 8), v27);
          }
        }
      }
      CFAllocatorRef v28 = CFGetAllocator(a3);
      CFAllocatorDeallocate(v28, v14);
    }
    else
    {
      APSLogErrorAt();
      uint64_t v25 = 4294950685;
    }
    CFRelease(v11);
  }
  else
  {
    APSLogErrorAt();
    return 4294950685;
  }
  return v25;
}

uint64_t streamAggregate_copyFormattedAsyncPackageForBBuf(uint64_t a1, OpaqueCMBlockBuffer *a2, uint64_t a3, uint64_t *a4, char *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4 || !a5)
  {
    APSLogErrorAt();
    return 4294950686;
  }
  uint64_t v10 = DerivedStorage;
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  dataPointerOut = 0;
  uint64_t v38 = 0;
  size_t v35 = 0;
  size_t lengthAtOffsetOut = 0;
  uint64_t DataPointer = CMBlockBufferGetDataPointer(a2, 0, &lengthAtOffsetOut, &v35, &dataPointerOut);
  if (DataPointer)
  {
    uint64_t v33 = DataPointer;
    goto LABEL_40;
  }
  if (lengthAtOffsetOut != v35
    || (APTransportStreamSendBackingProviderCopyPackageForAcquiredBBuf(*(void *)(v11 + 8), a2, (CFTypeRef *)&v38),
        (uint64_t v13 = v38) == 0))
  {
    uint64_t v15 = APTransportStreamSendBackingProviderCopyPackageForGivenBBuf(*(void *)(v11 + 8), a2, &v38);
    if (!v15)
    {
      char v14 = 1;
      uint64_t v13 = v38;
      goto LABEL_10;
    }
    uint64_t v33 = v15;
LABEL_40:
    APSLogErrorAt();
    APSLogErrorAt();
    return v33;
  }
  char v14 = 0;
LABEL_10:
  *a4 = v13;
  *a5 = v14;
  uint64_t v16 = *a4;
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t))(v18 + 8);
  if (v19) {
    uint64_t v20 = (const void *)v19(v16);
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *a4;
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v23 + 32);
  if (v24) {
    v24(v21, a3);
  }
  if (*(void *)(v10 + 8) && !v20)
  {
    uint64_t v25 = *a4;
    uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v27 = v26 ? v26 : 0;
    CFAllocatorRef v28 = *(void (**)(uint64_t, OpaqueCMBlockBuffer *))(v27 + 16);
    if (v28) {
      v28(v25, a2);
    }
  }
  uint64_t v29 = *a4;
  uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v30) {
    uint64_t v31 = v30;
  }
  else {
    uint64_t v31 = 0;
  }
  CFTypeRef v32 = *(void (**)(uint64_t, uint64_t))(v31 + 88);
  if (v32) {
    v32(v29, 1634957678);
  }
  if (v20) {
    CFRelease(v20);
  }
  return 0;
}

uint64_t streamAggregate_eventReceived(int a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((a1 - 4) > 4) {
    LOBYTE(v3) = 30;
  }
  else {
    int v3 = dword_1D093C558[a1 - 4];
  }
  if ((v3 & 0x3E) >= gLogCategory_APTransportStreamAggregate
    && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1 == 5) {
    goto LABEL_11;
  }
  if (a1 == 4)
  {
    *(_DWORD *)(DerivedStorage + 32) = CFGetInt64();
LABEL_11:
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(DerivedStorage + 24));
  }
  return 0;
}

uint64_t APTransportStreamIDMake(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a2 << 32) | (a1 << 48) | a3;
}

unint64_t APTransportStreamIDInsertPort(uint64_t a1, unsigned __int16 a2)
{
  return a1 & 0xFFFFFFFFFFFFLL | ((unint64_t)a2 << 48);
}

unint64_t APTransportStreamIDInsertStreamCategory(uint64_t a1, uint64_t a2)
{
  return a1 & 0xFFFFFFFCFFFFFFFFLL | (a2 << 32);
}

unint64_t APTransportStreamIDInsertIdentifier(uint64_t a1, unsigned int a2)
{
  return a1 & 0xFFFFFFFF00000000 | a2;
}

uint64_t APTransportStreamIDMakeWithPort(uint64_t a1)
{
  return (a1 << 48) | 0x200000000;
}

uint64_t APTransportStreamIDGetStreamCategory(unint64_t a1)
{
  return HIDWORD(a1) & 3;
}

unint64_t APTransportStreamIDGetPort(unint64_t a1)
{
  return HIWORD(a1);
}

uint64_t APTransportStreamIDGetToken(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL;
}

CFStringRef APTransportStreamIDCreateStringRepresentation()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  __int16 v2 = 0;
  *(void *)cStr = 0;
  SNPrintF();
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x8000100u);
}

const char *APBrokerHTTPMethodString(int a1)
{
  uint64_t v1 = "UNKNOWNMETHOD";
  if (a1 == 2) {
    uint64_t v1 = "POST";
  }
  if (a1 == 1) {
    return "GET";
  }
  else {
    return v1;
  }
}

const char *APBrokerHTTPProtocolString(int a1)
{
  if (a1) {
    return "https";
  }
  else {
    return "http";
  }
}

void APBrokerHTTPSendRequest(uint64_t a1, uint64_t a2, const void *a3, int a4, int a5, const void *a6, const void *a7, const void *a8, uint64_t a9, void *a10)
{
  uint64_t v18 = a10;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  int v42 = 0;
  if (gLogCategory_APBrokerHTTPUtils <= 30
    && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a10)
  {
    if (!a3 || !a4)
    {
      APSLogErrorAt();
      int v33 = -6705;
      goto LABEL_39;
    }
    aBlock = a10;
    uint64_t v19 = malloc_type_calloc(1uLL, 0x68uLL, 0x10E00402108E38DuLL);
    if (!v19)
    {
      APSLogErrorAt();
      int v42 = -6728;
      goto LABEL_40;
    }
    uint64_t v20 = (uint64_t)v19;
    *uint64_t v19 = a1;
    if (!a2 || (uint64_t v21 = FigCFWeakReferenceHolderCreateWithReferencedObject(), (*(void *)(v20 + 8) = v21) != 0))
    {
      *(_DWORD *)(v20 + 16) = a5;
      CFTypeRef v22 = a6 ? CFRetain(a6) : 0;
      *(void *)(v20 + 32) = v22;
      CFTypeRef v23 = a7 ? CFRetain(a7) : 0;
      *(void *)(v20 + 40) = v23;
      CFTypeRef v24 = a8 ? CFRetain(a8) : 0;
      *(void *)(v20 + 48) = v24;
      uint64_t v25 = _Block_copy(a10);
      *(void *)(v20 + 56) = v25;
      if (v25)
      {
        if (!a9 || (uint64_t Int64 = CFDictionaryGetInt64(), *(unsigned char *)(v20 + 20) = Int64 != 0, !Int64))
        {
LABEL_25:
          if (a4 == 1)
          {
            v38[0] = MEMORY[0x1E4F143A8];
            v38[1] = 3221225472;
            long long v39 = __APBrokerHTTPSendRequest_block_invoke;
            long long v40 = &__block_descriptor_40_e131_v52__0____CFString__8____sockaddr_CC_14c___sockaddr_in_CCS_in_addr_I__8c___sockaddr_in6_CCSI_in6_addr_____16C__8S__4I___I__16I44i48l;
            uint64_t v41 = v20;
            long long v48 = 0u;
            long long v49 = 0u;
            *(_OWORD *)label = 0u;
            long long v47 = 0u;
            uint64_t v45 = 0;
            uint64_t v29 = malloc_type_calloc(1uLL, 0x48uLL, 0x10E004006E54201uLL);
            uint64_t v30 = v29;
            if (v29
              && (void *v29 = v20,
                  v29[1] = _Block_copy(v38),
                  SNPrintF(),
                  dispatch_queue_t v31 = dispatch_queue_create(label, 0),
                  (v30[2] = v31) != 0))
            {
              if (gLogCategory_APBrokerHTTPUtils <= 30
                && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              FigCFStringGetCStringPtrAndBufferToFree();
              uint64_t v34 = AsyncConnection_Connect();
              if (!v34)
              {
                uint64_t v30 = 0;
LABEL_44:
                if (v45) {
                  free(v45);
                }
                if (v30) {
                  _APBrokerHTTPReleaseResolutionData(v30);
                }
                return;
              }
              uint64_t v35 = v34;
              APSLogErrorAt();
            }
            else
            {
              APSLogErrorAt();
              uint64_t v35 = 4294960568;
            }
            memset(v43, 0, sizeof(v43));
            int v44 = 0;
            v39((uint64_t)v38, 0, v43, 0, v35);
            goto LABEL_44;
          }
          *(void *)(v20 + 64) = CFRetain(a3);
          CFTypeRef v32 = (const void *)CFStringCreateF();
          if (v42)
          {
            APSLogErrorAt();
            if (!v32)
            {
LABEL_34:
              if (!v20)
              {
LABEL_36:
                uint64_t v18 = aBlock;
                if (!aBlock) {
                  return;
                }
                if (v42)
                {
LABEL_40:
                  (*((void (**)(void *, void, void, void, void))v18 + 2))(v18, 0, 0, 0, 0);
                  return;
                }
                int v33 = -6762;
LABEL_39:
                int v42 = v33;
                goto LABEL_40;
              }
LABEL_35:
              _APBrokerHTTPReleaseRequestData(v20);
              goto LABEL_36;
            }
          }
          else
          {
            _APBrokerHTTPSendRequestToURL(v20, (uint64_t)v32);
            aBlock = 0;
            uint64_t v20 = 0;
            if (!v32) {
              goto LABEL_34;
            }
          }
          CFRelease(v32);
          goto LABEL_34;
        }
        CFStringGetTypeID();
        Typeduint64_t Value = CFDictionaryGetTypedValue();
        if (!TypedValue)
        {
          APSLogErrorAt();
          int v36 = -6705;
LABEL_64:
          int v42 = v36;
          goto LABEL_35;
        }
        CFAllocatorRef v28 = [[APBrokerHTTPUtilsTaskDelegate alloc] initWithLogContext:a1 sslCertificateHostName:TypedValue];
        *(void *)(v20 + 24) = v28;
        if (v28) {
          goto LABEL_25;
        }
      }
    }
    APSLogErrorAt();
    int v36 = -6728;
    goto LABEL_64;
  }
  APSLogErrorAt();
}

void __APBrokerHTTPSendRequest_block_invoke(uint64_t a1, CFTypeRef cf, _OWORD *a3, int a4, int a5)
{
  uint64_t v8 = *(void *)(a1 + 32);
  *(_OWORD *)uint64_t v18 = *a3;
  *(_OWORD *)&v18[12] = *(_OWORD *)((char *)a3 + 12);
  if (gLogCategory_APBrokerHTTPUtils <= 30
    && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a5)
  {
    APSLogErrorAt();
    if (v8)
    {
LABEL_25:
      (*(void (**)(void, void, void, void))(*(void *)(v8 + 56) + 16))(*(void *)(v8 + 56), 0, 0, 0);
      _APBrokerHTTPReleaseRequestData(v8);
    }
  }
  else
  {
    CFStringRef v9 = (const __CFString *)CFRetain(cf);
    *(void *)(v8 + 64) = v9;
    *(_OWORD *)(v8 + 72) = *(_OWORD *)v18;
    *(_OWORD *)(v8 + 84) = *(_OWORD *)&v18[12];
    *(_DWORD *)(v8 + 100) = a4;
    if (v9 && ((int v10 = *(unsigned __int8 *)(v8 + 73), v10 != 2) ? (v11 = v10 == 30) : (v11 = 1), v11))
    {
      CFStringRef v12 = v9;
      CFIndex Length = CFStringGetLength(v9);
      uint64_t v14 = Length;
      while (v14 >= 1)
      {
        int CharacterAtIndex = CFStringGetCharacterAtIndex(v12, v14 - 1);
        if (CharacterAtIndex == 37)
        {
          if (v14 < Length)
          {
            v19.location = 0;
            v19.CFIndex length = v14 - 1;
            uint64_t v16 = CFStringCreateWithSubstring(0, v12, v19);
            if (!v16)
            {
              APSLogErrorAt();
              goto LABEL_17;
            }
            goto LABEL_22;
          }
          break;
        }
        --v14;
        if ((CharacterAtIndex - 58) <= 0xFFFFFFF5) {
          break;
        }
      }
      uint64_t v16 = CFRetain(v12);
      if (!v16) {
        goto LABEL_17;
      }
LABEL_22:
      uint64_t v17 = (const void *)CFStringCreateF();
      CFRelease(v16);
      _APBrokerHTTPSendRequestToURL(v8, (uint64_t)v17);
      uint64_t v8 = 0;
      if (v17) {
        CFRelease(v17);
      }
    }
    else
    {
LABEL_17:
      APSLogErrorAt();
      APSLogErrorAt();
    }
    if (v8) {
      goto LABEL_25;
    }
  }
}

uint64_t _APBrokerHTTPSendRequestToURL(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  if (gLogCategory_APBrokerHTTPUtils <= 30
    && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
  {
    if (*(unsigned char *)(a1 + 20)) {
      uint64_t v5 = "https";
    }
    else {
      uint64_t v5 = "http";
    }
    int v6 = *(_DWORD *)(a1 + 16);
    uint64_t v7 = "UNKNOWNMETHOD";
    if (v6 == 2) {
      uint64_t v7 = "POST";
    }
    if (v6 == 1) {
      uint64_t v8 = "GET";
    }
    else {
      uint64_t v8 = v7;
    }
    uint64_t v24 = v4;
    uint64_t v26 = v5;
    CFAllocatorRef v28 = v8;
    uint64_t v29 = a2;
    LogPrintF();
  }
  double IntWithDefault = (double)(int)APSSettingsGetIntWithDefault();
  int v10 = (void *)[MEMORY[0x1E4F290F0] ephemeralSessionConfiguration];
  [v10 setWaitsForConnectivity:1];
  [v10 setAllowsCellularAccess:0];
  [v10 setTimeoutIntervalForResource:IntWithDefault];
  BOOL v11 = (void *)[MEMORY[0x1E4F290E0] sessionWithConfiguration:v10];
  CFStringRef v12 = objc_msgSend(MEMORY[0x1E4F28E88], "requestWithURL:cachePolicy:timeoutInterval:", objc_msgSend(MEMORY[0x1E4F1CB10], "URLWithString:", a2), 1, IntWithDefault);
  if (!v12) {
    goto LABEL_22;
  }
  uint64_t v13 = v12;
  int v14 = *(_DWORD *)(a1 + 16);
  if (v14 != 1)
  {
    if (v14 == 2)
    {
      uint64_t v15 = @"POST";
      goto LABEL_18;
    }
LABEL_22:
    APSLogErrorAt();
    goto LABEL_23;
  }
  uint64_t v15 = @"GET";
LABEL_18:
  objc_msgSend(v12, "setHTTPMethod:", v15, v24, v26, v28, v29);
  uint64_t v16 = *(const char **)(a1 + 40);
  if (v16)
  {
    if (gLogCategory_APBrokerHTTPUtils <= 10)
    {
      if (gLogCategory_APBrokerHTTPUtils != -1
        || (v17 = _LogCategory_Initialize(), uint64_t v16 = *(const char **)(a1 + 40), v17))
      {
        uint64_t v24 = *(void *)a1;
        uint64_t v26 = v16;
        LogPrintF();
      }
    }
    v31[1] = MEMORY[0x1E4F143A8];
    _OWORD v31[2] = 3221225472;
    v31[3] = ___APBrokerHTTPGetSessionAndRequest_block_invoke;
    v31[4] = &unk_1E688CEC0;
    v31[5] = v13;
    CFDictionaryApplyBlock();
  }
  uint64_t v18 = *(const char **)(a1 + 48);
  if (v18)
  {
    v31[0] = 0;
    if (gLogCategory_APBrokerHTTPUtils <= 10)
    {
      if (gLogCategory_APBrokerHTTPUtils != -1
        || (v19 = _LogCategory_Initialize(), uint64_t v18 = *(const char **)(a1 + 48), v19))
      {
        uint64_t v24 = *(void *)a1;
        uint64_t v26 = v18;
        LogPrintF();
        uint64_t v18 = *(const char **)(a1 + 48);
      }
    }
    uint64_t v20 = objc_msgSend(MEMORY[0x1E4F28D90], "dataWithJSONObject:options:error:", v18, 1, v31, v24, v26);
    if (!NSErrorToOSStatus())
    {
      [v13 setHTTPBody:v20];
      goto LABEL_34;
    }
    APSLogErrorAt();
LABEL_23:
    objc_msgSend(v11, "finishTasksAndInvalidate", v24, v26);
    APSLogErrorAt();
    BOOL v11 = 0;
LABEL_24:
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    _APBrokerHTTPReleaseRequestData(a1);
    return objc_msgSend(v11, "finishTasksAndInvalidate", v25, v27, v28);
  }
LABEL_34:
  objc_msgSend(0, "finishTasksAndInvalidate", v24, v26);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___APBrokerHTTPSendRequestToURL_block_invoke;
  v30[3] = &__block_descriptor_40_e46_v32__0__NSData_8__NSURLResponse_16__NSError_24l;
  v30[4] = a1;
  uint64_t v21 = (void *)[v11 dataTaskWithRequest:v13 completionHandler:v30];
  if (!v21)
  {
    APSLogErrorAt();
    goto LABEL_24;
  }
  CFTypeRef v22 = v21;
  [v21 setDelegate:*(void *)(a1 + 24)];
  [v22 resume];
  if (gLogCategory_APBrokerHTTPUtils <= 30
    && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
  {
    uint64_t v27 = v11;
    CFAllocatorRef v28 = (const char *)v22;
    uint64_t v25 = v4;
    LogPrintF();
  }
  return objc_msgSend(v11, "finishTasksAndInvalidate", v25, v27, v28);
}

void _APBrokerHTTPReleaseRequestData(uint64_t a1)
{
  __int16 v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 8) = 0;
  }

  *(void *)(a1 + 24) = 0;
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 48);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 48) = 0;
  }
  int v6 = *(const void **)(a1 + 56);
  if (v6)
  {
    _Block_release(v6);
    *(void *)(a1 + 56) = 0;
  }
  uint64_t v7 = *(const void **)(a1 + 64);
  if (v7) {
    CFRelease(v7);
  }
  free((void *)a1);
}

void APBrokerHTTPResolutionProgressHandler(int a1, long long *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (gLogCategory_APBrokerHTTPUtils <= 30
    && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1 != 4)
  {
    if (a1 != 2) {
      return;
    }
    int v6 = (const void *)CFStringCreateF();
    if (!v6)
    {
      APSLogErrorAt();
      return;
    }
    uint64_t v7 = v6;
    uint64_t v8 = *(const void **)(a3 + 32);
    *(void *)(a3 + 32) = v6;
    CFRetain(v6);
    if (v8) {
      CFRelease(v8);
    }
    *(void *)uint64_t v15 = 0;
    uint64_t v16 = 0;
    char v17 = 0;
    CFStringRef v9 = strchr((char *)a2, 37);
    if (!v9) {
      goto LABEL_16;
    }
    size_t v10 = strlen(v9 + 1);
    if (v10 <= 0x10)
    {
      size_t v11 = v10;
      __memcpy_chk();
      v15[v11] = 0;
      unsigned int v12 = if_nametoindex(v15);
      unsigned int v14 = v12;
      if (v12)
      {
LABEL_15:
        *(_DWORD *)(a3 + 68) = v12;
LABEL_16:
        if (gLogCategory_APBrokerHTTPUtils <= 30
          && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFRelease(v7);
        return;
      }
      if (sscanf(v15, "%u", &v14) == 1)
      {
        unsigned int v12 = v14;
        goto LABEL_15;
      }
    }
    APSLogErrorAt();
    if (gLogCategory_APBrokerHTTPUtils <= 60
      && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_DWORD *)(a3 + 68) = 0;
    goto LABEL_16;
  }
  long long v13 = *a2;
  *(_OWORD *)(a3 + 52) = *(long long *)((char *)a2 + 12);
  *(_OWORD *)(a3 + 40) = v13;
  if (gLogCategory_APBrokerHTTPUtils <= 30
    && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void APBrokerHTTPResolutionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (gLogCategory_APBrokerHTTPUtils <= 30
    && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(a3 + 32);
  uint64_t v10 = *(unsigned int *)(a3 + 68);
  size_t v11 = *(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))(v8 + 16);
  v12[0] = *(_OWORD *)(a3 + 40);
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)(a3 + 52);
  v11(v8, v9, v12, v10, a2, a6);
  _APBrokerHTTPReleaseResolutionData((void *)a3);
}

void _APBrokerHTTPReleaseResolutionData(void *a1)
{
  __int16 v2 = (const void *)a1[4];
  if (v2)
  {
    CFRelease(v2);
    a1[4] = 0;
  }
  if (a1[3])
  {
    AsyncConnection_Release();
    a1[3] = 0;
  }
  uint64_t v3 = a1[2];
  if (v3)
  {
    dispatch_release(v3);
    a1[2] = 0;
  }
  uint64_t v4 = (const void *)a1[1];
  if (v4) {
    _Block_release(v4);
  }
  free(a1);
}

uint64_t APTNANDataSessionStatisticsReportCopyDictionary(void *a1, CFTypeRef *a2)
{
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  uint64_t result = 4294960591;
  if (a2 && (isKindOfClass & 1) != 0)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v7 = Mutable;
      [a1 infrastructureChannel];
      FigCFDictionarySetValue();
      _APTNANDataSessionStatisticsReportDictionarySetHistogram(v7, @"TxCCA", (void *)[a1 txCCAHistogram]);
      _APTNANDataSessionStatisticsReportDictionarySetHistogram(v7, @"RxRSSI", (void *)[a1 rxRSSIHistogram]);
      [a1 preferred2GChannelsCount];
      FigCFDictionarySetValue();
      [a1 preferred5GChannelsCount];
      FigCFDictionarySetValue();
      [a1 dfsChannelsCount];
      FigCFDictionarySetValue();
      [a1 csaCount];
      FigCFDictionarySetValue();
      [a1 quietIECount];
      FigCFDictionarySetValue();
      [a1 txErrorCount];
      FigCFDictionarySetValue();
      [a1 packetsOn2GCount];
      FigCFDictionarySetValue();
      [a1 packetsNAVOn2GCount];
      FigCFDictionarySetValue();
      [a1 packetsHOFOn2GCount];
      FigCFDictionarySetValue();
      [a1 packetsOverridenOn5GCount];
      FigCFDictionarySetValue();
      [a1 packetsOn5GCount];
      FigCFDictionarySetValue();
      int v8 = [a1 infraRelayOperationStatus];
      uint64_t v9 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!v8) {
        uint64_t v9 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(v7, @"InfraRelayOperationStatus", *v9);
      [a1 infraRelayRequestersCount];
      FigCFDictionarySetValue();
      _APTNANDataSessionStatisticsReportDictionarySetHistogram(v7, @"RxFWDelayHistogram", (void *)[a1 rxFWDelayHistogram]);
      _APTNANDataSessionStatisticsReportDictionarySetHistogram(v7, @"RxIPCDelayHistogram", (void *)[a1 rxIPCDelayHistogram]);
      _APTNANDataSessionStatisticsReportDictionarySetHistogram(v7, @"TxConsecutiveErrorsHistogram", (void *)[a1 txConsecutiveErrorsHistogram]);
      _APTNANDataSessionStatisticsReportDictionarySetHistogram(v7, @"TxPacketExpiryHistogram", (void *)[a1 txPacketExpiryHistogram]);
      [a1 txExpiredCount];
      FigCFDictionarySetValue();
      [a1 txNoACKCount];
      FigCFDictionarySetValue();
      [a1 txFailedCount];
      FigCFDictionarySetValue();
      [a1 txNoResourcesCount];
      FigCFDictionarySetValue();
      [a1 txIOErrorCount];
      FigCFDictionarySetValue();
      [a1 txMemoryErrorCount];
      FigCFDictionarySetValue();
      [a1 txChipModeErrorCount];
      FigCFDictionarySetValue();
      [a1 txNoRemotePeerCount];
      FigCFDictionarySetValue();
      [a1 txInternalErrorCount];
      FigCFDictionarySetValue();
      [a1 txDroppedCount];
      FigCFDictionarySetValue();
      [a1 txFirmwareFreePacketCount];
      FigCFDictionarySetValue();
      [a1 txMaxRetriesCount];
      FigCFDictionarySetValue();
      [a1 txForceLifetimeExpiredCount];
      FigCFDictionarySetValue();
      [a1 channelSequenceMismatchOn5GCount];
      FigCFDictionarySetValue();
      [a1 channelSequenceMismatchOn2GCount];
      FigCFDictionarySetValue();
      [a1 infraScanCount];
      FigCFDictionarySetValue();
      [a1 infraAssocCount];
      FigCFDictionarySetValue();
      [a1 infraDisassocCount];
      FigCFDictionarySetValue();
      [a1 countryCode];
      FigCFDictionarySetValue();
      *a2 = CFRetain(v7);
      CFRelease(v7);
      return 0;
    }
    else
    {
      return 4294960568;
    }
  }
  return result;
}

void _APTNANDataSessionStatisticsReportDictionarySetHistogram(CFMutableDictionaryRef theDict, void *key, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (theDict && key)
  {
    if (a3)
    {
      CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      if (Mutable)
      {
        uint64_t v7 = Mutable;
        CFStringAppendFormat(Mutable, 0, @"[");
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        uint64_t v8 = [a3 countByEnumeratingWithState:&v18 objects:v22 count:16];
        if (v8)
        {
          uint64_t v9 = v8;
          uint64_t v10 = *(void *)v19;
          do
          {
            for (uint64_t i = 0; i != v9; ++i)
            {
              if (*(void *)v19 != v10) {
                objc_enumerationMutation(a3);
              }
              unsigned int v12 = *(void **)(*((void *)&v18 + 1) + 8 * i);
              [v12 binStart];
              uint64_t v14 = v13;
              [v12 binEnd];
              uint64_t v16 = v15;
              [v12 value];
              CFStringAppendFormat(v7, 0, @"[%.2f, %.2f, %.2f], ", v14, v16, v17);
            }
            uint64_t v9 = [a3 countByEnumeratingWithState:&v18 objects:v22 count:16];
          }
          while (v9);
        }
        CFStringAppendFormat(v7, 0, @"]");
        CFDictionarySetValue(theDict, key, v7);
        CFRelease(v7);
      }
    }
    else
    {
      CFDictionaryRemoveValue(theDict, key);
    }
  }
}

uint64_t APTransportGetSharedTransport()
{
  if (APTransportGetSharedTransport_sInitOnce != -1) {
    dispatch_once_f(&APTransportGetSharedTransport_sInitOnce, &APTransportGetSharedTransport_sTransport, (dispatch_function_t)transport_getSharedTransport);
  }
  return APTransportGetSharedTransport_sTransport;
}

void transport_getSharedTransport(void *a1)
{
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  FigTransportGetClassID();
  if (CMDerivedObjectCreate()
    || (uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage(),
        dispatch_queue_t v4 = dispatch_queue_create("APTransport", 0),
        (*uint64_t DerivedStorage = v4) == 0)
    || (dispatch_queue_t v5 = dispatch_queue_create("APTransport.notification", 0), (DerivedStorage[1] = v5) == 0)
    || FigCFWeakReferenceTableCreate()
    || APTransportTrafficRegistrarCreate(v2, DerivedStorage + 3)
    || APTransportWifiManagerClientCreate(v2, DerivedStorage + 4))
  {
    APSLogErrorAt();
  }
  else
  {
    if (gLogCategory_APTransport <= 30 && (gLogCategory_APTransport != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    *a1 = 0;
  }
}

uint64_t APTransportUnregisterSession(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    APSDispatchAsyncFHelper();
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294950716;
  }
}

uint64_t transport_unregisterSessionInternal()
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransport <= 30 && (gLogCategory_APTransport != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t result = FigCFWeakReferenceTableRemoveValue();
  if (result)
  {
    return APSLogErrorAt();
  }
  return result;
}

uint64_t transport_Finalize()
{
  if (gLogCategory_APTransport <= 90)
  {
    if (gLogCategory_APTransport != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

__CFString *transport_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTransport %p>", a1);
  return Mutable;
}

uint64_t transport_CopyProperty()
{
  CMBaseObjectGetDerivedStorage();
  return FigDispatchSyncCopyPropertyImplementation();
}

uint64_t transport_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)CMBaseObjectGetDerivedStorage();
  return MEMORY[0x1F40DD378](v6, transport_setPropertyInternal, a1, a2, a3);
}

uint64_t transport_copyPropertyInternal(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"TrafficRegistrar"))
  {
    uint64_t v7 = *(const void **)(DerivedStorage + 24);
    if (v7)
    {
LABEL_3:
      CFTypeRef v8 = CFRetain(v7);
LABEL_7:
      uint64_t result = 0;
      *a4 = v8;
      return result;
    }
LABEL_6:
    CFTypeRef v8 = 0;
    goto LABEL_7;
  }
  if (CFEqual(a2, @"WifiManagerClient"))
  {
    uint64_t v7 = *(const void **)(DerivedStorage + 32);
    if (v7) {
      goto LABEL_3;
    }
    goto LABEL_6;
  }
  return 4294954512;
}

uint64_t transport_setPropertyInternal()
{
  return 4294954512;
}

uint64_t transport_CreateAndRegisterService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v18 = 0;
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  context[0] = &v18;
  context[1] = a2;
  void context[2] = a3;
  context[3] = a4;
  void context[4] = a5;
  context[5] = a6;
  context[6] = a7;
  context[7] = a8;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)transport_createAndRegisterServiceInternal);
  return v18;
}

uint64_t transport_UnregisterService()
{
  return 4294954514;
}

uint64_t transport_CreateSessionToService(uint64_t a1, const __CFAllocator *a2, const void *a3, const void *a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  uint64_t v15 = a1;
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  if (a4 && (CFTypeID v12 = CFGetTypeID(a4), v12 != APTransportDeviceGetTypeID()))
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  else
  {
    uint64_t v13 = APTransportSessionCreate(a2, 1, a3, a4, a5, &cf);
    if (v13)
    {
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      dispatch_sync_f(*DerivedStorage, &v15, (dispatch_function_t)transport_registerSession);
      *a6 = cf;
    }
    return v13;
  }
}

uint64_t transport_createAndRegisterServiceInternal(uint64_t a1)
{
  uint64_t result = APTransportServiceCreate(*(void *)(a1 + 8), *(const void **)(a1 + 16), *(void *)(a1 + 24), *(NSObject **)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void **)(a1 + 56));
  **(_DWORD **)a1 = result;
  if (result)
  {
    return APSLogErrorAt();
  }
  return result;
}

uint64_t transport_registerSession()
{
  CMBaseObjectGetDerivedStorage();
  if (!FigCFWeakReferenceTableAddValueAndGetKey())
  {
    uint64_t result = APSSetFBOPropertyInt64();
    if (!result)
    {
      if (gLogCategory_APTransport > 30) {
        return result;
      }
      if (gLogCategory_APTransport == -1)
      {
        uint64_t result = _LogCategory_Initialize();
        if (!result) {
          return result;
        }
      }
      return LogPrintF();
    }
  }
  uint64_t result = APSLogErrorAt();
  if (gLogCategory_APTransport <= 60)
  {
    if (gLogCategory_APTransport != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t APBrowserCreateAdvertiserInfoForDevice(uint64_t a1, const __CFDictionary *a2, CFDictionaryRef theDict, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  if (!((unint64_t)a2 | (unint64_t)theDict))
  {
    APSLogErrorAt();
    return 4294960591;
  }
  if (theDict)
  {
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(theDict, @"txt");
    if (!Value) {
      goto LABEL_17;
    }
    CFDataRef v9 = Value;
    CFStringRef v10 = (const __CFString *)CFDictionaryGetValue(theDict, @"name");
    if (!v10) {
      goto LABEL_17;
    }
    if (a2) {
      goto LABEL_6;
    }
  }
  else
  {
    CFDataRef v9 = 0;
    CFStringRef v10 = 0;
    if (a2)
    {
LABEL_6:
      size_t v11 = CFDictionaryGetValue(a2, @"txt");
      if (!v11
        || (v12 = (unint64_t)v11, (CFStringRef v10 = (const __CFString *)CFDictionaryGetValue(a2, @"name")) == 0))
      {
LABEL_17:
        APSLogErrorAt();
        return 4294960534;
      }
      goto LABEL_11;
    }
  }
  unint64_t v12 = 0;
LABEL_11:
  uint64_t v13 = APAdvertiserInfoCreateWithRAOPAndAirPlayDataAndDeviceName(a1, v9, v12, v10, (CFMutableDictionaryRef **)&cf);
  if (v13)
  {
    APSLogErrorAt();
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a4 = cf;
  }
  return v13;
}

uint64_t APBrowserCreateDetailedModeEventInfoDictionary(const __CFAllocator *a1, const void *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, int a10, char a11, uint64_t a12, __CFDictionary **a13)
{
  if (a2)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 7, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      long long v19 = Mutable;
      CFDictionarySetValue(Mutable, @"deviceID", a2);
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      long long v20 = (const void *)*MEMORY[0x1E4F1CFD0];
      long long v21 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (a5) {
        CFTypeRef v22 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        CFTypeRef v22 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(v19, @"isLegacyPresent", v22);
      if (a11) {
        uint64_t v23 = v20;
      }
      else {
        uint64_t v23 = v21;
      }
      CFDictionarySetValue(v19, @"isLocallyAdvertised", v23);
      if (a6) {
        uint64_t v24 = v20;
      }
      else {
        uint64_t v24 = v21;
      }
      CFDictionarySetValue(v19, @"isModernPresent", v24);
      if (a7) {
        uint64_t v25 = v20;
      }
      else {
        uint64_t v25 = v21;
      }
      CFDictionarySetValue(v19, @"isModernPresentOnInfra", v25);
      if (a8) {
        uint64_t v26 = v20;
      }
      else {
        uint64_t v26 = v21;
      }
      CFDictionarySetValue(v19, @"isPresentOnInfra", v26);
      CFDictionarySetInt64();
      FigCFDictionarySetValue();
      if (a9) {
        CFDictionarySetInt64();
      }
      uint64_t result = 0;
      *a13 = v19;
    }
    else
    {
      APSLogErrorAt();
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return result;
}

uint64_t APBrowserGetTransports(const __CFDictionary *a1, int a2, _DWORD *a3)
{
  if (a1
    && (a2 ? (dispatch_queue_t v4 = @"removedServices") : (dispatch_queue_t v4 = @"services"),
        (CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, v4)) != 0
     && (v6 = Value, CFIndex Count = CFArrayGetCount(Value), Count >= 1)))
  {
    CFIndex v8 = Count;
    CFIndex v9 = 0;
    int v10 = 0;
    do
    {
      CFArrayGetValueAtIndex(v6, v9);
      v10 |= CFDictionaryGetInt64();
      ++v9;
    }
    while (v8 != v9);
  }
  else
  {
    int v10 = 0;
  }
  *a3 = v10;
  return 0;
}

uint64_t APBrowserGetTransportsRequiringBroker(const __CFDictionary *a1, _DWORD *a2)
{
  if (a1
    && (CFArrayRef v3 = (const __CFArray *)CFDictionaryGetValue(a1, @"services")) != 0
    && (CFArrayRef v4 = v3, Count = CFArrayGetCount(v3), Count >= 1))
  {
    CFIndex v6 = Count;
    CFIndex v7 = 0;
    int v8 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v7);
      if (CFDictionaryGetValue(ValueAtIndex, @"ifname") == @"broker0"
        || CFDictionaryGetValue(ValueAtIndex, @"ifname")
        && (CFArrayRef Value = CFDictionaryGetValue(ValueAtIndex, @"ifname"), CFEqual(@"broker0", Value)))
      {
        v8 |= CFDictionaryGetInt64();
      }
      ++v7;
    }
    while (v6 != v7);
  }
  else
  {
    int v8 = 0;
  }
  *a2 = v8;
  return 0;
}

CFDictionaryRef APBrowserGetIsLocallyAdvertised(const __CFDictionary *result, char *a2)
{
  if (!result) {
    goto LABEL_9;
  }
  uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, @"services");
  if (!result) {
    goto LABEL_9;
  }
  CFArrayRef v3 = result;
  CFIndex Count = CFArrayGetCount(result);
  if (Count < 1)
  {
    uint64_t result = 0;
LABEL_9:
    char v8 = 0;
    goto LABEL_10;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(v3, v6);
    int Int64 = CFDictionaryGetInt64();
    uint64_t result = 0;
    if (!Int64) {
      break;
    }
    if (v5 == ++v6) {
      goto LABEL_9;
    }
  }
  uint64_t result = 0;
  char v8 = 1;
LABEL_10:
  *a2 = v8;
  return result;
}

uint64_t APBrowserIsDeviceAvailableOnTransport(const __CFDictionary *a1, int a2, BOOL *a3)
{
  int v7 = 0;
  if (a1)
  {
    APBrowserGetTransports(a1, 0, &v7);
    uint64_t result = 0;
    if (a2) {
      int v6 = a2;
    }
    else {
      int v6 = -1;
    }
    *a3 = (v7 & v6) != 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return result;
}

uint64_t APBrowserCopyDeviceIDFromBonjourInfo(const void *a1, uint64_t a2, CFNumberRef *a3)
{
  unsigned int v10 = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return -6705;
  }
  uint64_t DeviceID = BonjourDevice_GetDeviceID();
  CFAllocatorRef v5 = CFGetAllocator(a1);
  CFNumberRef v6 = CFNumberCreate(v5, kCFNumberSInt64Type, &DeviceID);
  if (!v6)
  {
    APSLogErrorAt();
    return -6728;
  }
  *a3 = v6;
  return v10;
}

uint64_t APBrowserCreateDeviceIDFromString(const void *a1, CFNumberRef *a2)
{
  CFArrayRef v4 = (const void *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFNumberRef v6 = Mutable;
    CFDictionarySetValue(Mutable, @"deviceID", a1);
    uint64_t v7 = APBrowserCopyDeviceIDFromBonjourInfo(v4, (uint64_t)v6, a2);
    if (v7) {
      APSLogErrorAt();
    }
    CFRelease(v6);
  }
  else
  {
    APSLogErrorAt();
    return 4294960568;
  }
  return v7;
}

uint64_t APBrowserGetStartEventForBrowserDeviceEvent(uint64_t a1, uint64_t a2, int a3)
{
  APSEventRecorderGetEventTimeRecursive();
  if (v4 == 0.0) {
    return 268431360;
  }
  double v5 = v4;
  if (a3 - 268374017) < 0xB && ((0x583u >> (a3 - 1))) {
    return 268431362;
  }
  APSEventRecorderGetEventTimeRecursive();
  if (v5 <= v6 || v6 == 0.0) {
    return 268431360;
  }
  else {
    return 268431361;
  }
}

uint64_t APTKeepAliveControllerLowPowerCreate(int a1, CFTypeRef cf, const void *a3, void *a4)
{
  if (cf)
  {
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 == CFDictionaryGetTypeID())
    {
      if (a3)
      {
        CFTypeID v8 = CFGetTypeID(a3);
        if (v8 == FigTransportStreamGetTypeID())
        {
          if (a4)
          {
            APTransportKeepAliveControllerGetClassID();
            uint64_t v9 = CMDerivedObjectCreate();
            if (v9)
            {
              uint64_t v12 = v9;
              goto LABEL_61;
            }
            uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
            if (gLogCategory_APTKeepAliveControllerLowPower <= 50
              && (gLogCategory_APTKeepAliveControllerLowPower != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            CFUUIDRef Value = (const __CFUUID *)CFDictionaryGetValue((CFDictionaryRef)cf, @"SessionUUID");
            if (Value)
            {
              CFUUIDRef v13 = Value;
              CFTypeID v14 = CFGetTypeID(Value);
              if (v14 == CFUUIDGetTypeID())
              {
                *(_WORD *)&sourceBytes[8] = 0;
                *(void *)sourceBytes = bswap32(*(_OWORD *)&CFUUIDGetUUIDBytes(v13)) >> 16;
                if (CMBlockBufferCreateWithMemoryBlock(0, 0, 2uLL, 0, 0, 0, 2uLL, 1u, (CMBlockBufferRef *)&sourceBytes[2])|| CMBlockBufferReplaceDataBytes(sourceBytes, *(CMBlockBufferRef *)&sourceBytes[2], 0, 2uLL))
                {
                  APSLogErrorAt();
                }
                uint64_t v15 = *(void *)&sourceBytes[2];
                DerivedStorage[7] = *(void *)&sourceBytes[2];
                if (!v15)
                {
                  uint64_t v12 = 4294895536;
                  goto LABEL_61;
                }
                *(void *)&sourceBytes[2] = 0;
                if (APTPackageLowPowerKeepAliveCreate(*MEMORY[0x1E4F1CF80], &sourceBytes[2]))
                {
                  APSLogErrorAt();
                }
                else
                {
                  uint64_t v16 = *(void *)&sourceBytes[2];
                  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v17) {
                    uint64_t v18 = v17;
                  }
                  else {
                    uint64_t v18 = 0;
                  }
                  long long v19 = *(void (**)(uint64_t, uint64_t))(v18 + 32);
                  if (v19) {
                    v19(v16, 1819308912);
                  }
                  uint64_t v20 = *(void *)&sourceBytes[2];
                  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v21) {
                    uint64_t v22 = v21;
                  }
                  else {
                    uint64_t v22 = 0;
                  }
                  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v22 + 16);
                  if (v23) {
                    v23(v20, v15);
                  }
                  uint64_t v24 = *(void *)&sourceBytes[2];
                  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v25) {
                    uint64_t v26 = v25;
                  }
                  else {
                    uint64_t v26 = 0;
                  }
                  uint64_t v27 = *(uint64_t (**)(uint64_t))(v26 + 64);
                  if (v27)
                  {
                    CFAllocatorRef v28 = (const void *)v27(v24);
LABEL_42:
                    if (*(void *)&sourceBytes[2]) {
                      CFRelease(*(CFTypeRef *)&sourceBytes[2]);
                    }
                    if (v28)
                    {
                      uint64_t v29 = APSSetFBOPropertyInt64();
                      if (v29)
                      {
                        uint64_t v12 = v29;
                      }
                      else
                      {
                        uint64_t CMBaseObject = FigTransportStreamGetCMBaseObject();
                        uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
                        if (v31) {
                          uint64_t v32 = v31;
                        }
                        else {
                          uint64_t v32 = 0;
                        }
                        int v33 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v32 + 56);
                        if (v33)
                        {
                          uint64_t v34 = v33(CMBaseObject, @"LowPowerOffloadBBuf", v28);
                          if (v34)
                          {
                            uint64_t v12 = v34;
                          }
                          else
                          {
                            uint64_t v35 = FigCFWeakReferenceHolderCreateWithReferencedObject();
                            DerivedStorage[5] = v35;
                            if (!v35)
                            {
                              APSLogErrorAt();
                              uint64_t v12 = APSSignalErrorAt();
                              goto LABEL_58;
                            }
                            DerivedStorage[6] = a3;
                            dispatch_queue_t v36 = dispatch_queue_create("com.apple.AirPlay.APTKeepAliveControllerLowPower.state", 0);
                            DerivedStorage[2] = v36;
                            if (v36)
                            {
                              dispatch_queue_t v37 = dispatch_queue_create("com.apple.AirPlay.APTKeepAliveControllerLowPower.network", 0);
                              *uint64_t DerivedStorage = v37;
                              if (v37)
                              {
                                dispatch_queue_t v38 = dispatch_queue_create("com.apple.AirPlay.APTKeepAliveControllerLowPower.notification", 0);
                                DerivedStorage[1] = v38;
                                if (v38)
                                {
                                  uint64_t v12 = 0;
                                  *a4 = 0;
LABEL_58:
                                  CFRelease(v28);
                                  return v12;
                                }
                                uint64_t v12 = 4294895536;
                              }
                              else
                              {
                                uint64_t v12 = 4294895536;
                              }
                            }
                            else
                            {
                              uint64_t v12 = 4294895536;
                            }
                          }
                        }
                        else
                        {
                          uint64_t v12 = 4294954514;
                        }
                      }
                      APSLogErrorAt();
                      goto LABEL_58;
                    }
                    uint64_t v12 = 4294895536;
LABEL_61:
                    APSLogErrorAt();
                    return v12;
                  }
                }
                CFAllocatorRef v28 = 0;
                goto LABEL_42;
              }
            }
          }
        }
      }
    }
  }
  APSLogErrorAt();
  return 4294895535;
}

void lowPowerKeepAliveController_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTKeepAliveControllerLowPower <= 50
    && (gLogCategory_APTKeepAliveControllerLowPower != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 40) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 56);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 56) = 0;
  }
  *(void *)(DerivedStorage + 48) = 0;
  CFArrayRef v3 = *(NSObject **)(DerivedStorage + 24);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 24));
    dispatch_release(v3);
    *(void *)(DerivedStorage + 24) = 0;
  }
  double v4 = *(NSObject **)(DerivedStorage + 16);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(DerivedStorage + 16) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  double v5 = *(NSObject **)(DerivedStorage + 8);
  if (v5)
  {
    dispatch_release(v5);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

__CFString *lowPowerKeepAliveController_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTKeepAliveControllerLowPower %p>", a1);
  return Mutable;
}

uint64_t lowPowerKeepAliveController_Resume(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  CFArrayRef v3 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __lowPowerKeepAliveController_Resume_block_invoke;
  block[3] = &__block_descriptor_tmp_11;
  block[4] = a1;
  dispatch_async(v3, block);
  return 0;
}

uint64_t lowPowerKeepAliveController_Suspend()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __lowPowerKeepAliveController_Suspend_block_invoke;
  block[3] = &__block_descriptor_tmp_17_2;
  block[4] = DerivedStorage;
  dispatch_sync(v1, block);
  return 0;
}

void __lowPowerKeepAliveController_resumeInternal_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    uint64_t v4 = v3;
    if (v1) {
      CFRetain(v1);
    }
    double v5 = *DerivedStorage;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 0x40000000;
    void v6[2] = __lowPowerKeepAliveController_timerFired_block_invoke;
    v6[3] = &__block_descriptor_tmp_14_2;
    v6[4] = v1;
    v6[5] = v4;
    dispatch_async(v5, v6);
  }
}

void __lowPowerKeepAliveController_timerFired_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTKeepAliveControllerLowPower <= 10
    && (gLogCategory_APTKeepAliveControllerLowPower != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v5 = *(void *)(DerivedStorage + 56);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeID v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v8)
  {
    int v9 = v8(v3, 1819309931, v5);
    if (!v9) {
      goto LABEL_15;
    }
    int v10 = v9;
  }
  else
  {
    int v10 = -12782;
  }
  APSLogErrorAt();
  if (v2) {
    CFRetain(v2);
  }
  size_t v11 = *(NSObject **)(DerivedStorage + 8);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 0x40000000;
  v14[2] = __lowPowerKeepAliveController_sendKeepAlive_block_invoke;
  v14[3] = &__block_descriptor_tmp_16_0;
  v14[4] = v2;
  int v15 = v10;
  dispatch_async(v11, v14);
LABEL_15:
  uint64_t v12 = *(const void **)(a1 + 32);
  if (v12) {
    CFRelease(v12);
  }
  CFUUIDRef v13 = *(const void **)(a1 + 40);
  if (v13) {
    CFRelease(v13);
  }
}

void __lowPowerKeepAliveController_sendKeepAlive_block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 32))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v3 = Mutable;
      CFDictionarySetInt64();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(v3);
    }
    else
    {
      APSLogErrorAt();
    }
  }
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
  }
}

void sub_1D08E7924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

uint64_t APTPackageMusicDataCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  uint64_t v2 = APTPackageMusicDataCreateWithBBuf(a1, 0, a2);
  if (v2) {
    APSLogErrorAt();
  }
  return v2;
}

uint64_t APTPackageMusicDataCreateWithBBuf(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, CFTypeRef *a3)
{
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef cf = 0;
  APTransportPackageGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6)
  {
    uint64_t v13 = v6;
LABEL_23:
    APSLogErrorAt();
    goto LABEL_13;
  }
  uint64_t DerivedStorage = (CFAllocatorRef **)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = APTransportParcelMake(8uLL, 0, DerivedStorage);
  if (v8)
  {
    uint64_t v13 = v8;
    goto LABEL_23;
  }
  if (!a2) {
    goto LABEL_8;
  }
  uint64_t destination = 0;
  uint64_t v9 = CMBlockBufferCopyDataBytes(a2, 0, 8uLL, &destination);
  if (v9)
  {
    uint64_t v13 = v9;
    goto LABEL_23;
  }
  APTransportParcelSetMessageType((uint64_t)*DerivedStorage, bswap32(HIDWORD(destination)));
  if (CMBlockBufferGetDataLength(a2) < 9) {
    goto LABEL_8;
  }
  DataCFIndex Length = CMBlockBufferGetDataLength(a2);
  uint64_t v11 = CMBlockBufferCreateWithBufferReference(a1, a2, 8uLL, DataLength - 8, 0, &blockBufferOut);
  if (v11)
  {
    uint64_t v13 = v11;
    goto LABEL_23;
  }
  uint64_t v12 = APTransportParcelSetMessageData(*DerivedStorage, blockBufferOut);
  if (v12)
  {
    uint64_t v13 = v12;
    goto LABEL_23;
  }
LABEL_8:
  if (gLogCategory_APTPackageMusicData <= 30
    && (gLogCategory_APTPackageMusicData != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v13 = 0;
  *a3 = cf;
  CFTypeRef cf = 0;
LABEL_13:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

uint64_t APTPackageMusicDataCreateWithMessageSize(uint64_t a1, size_t a2, void *a3)
{
  if (!a2)
  {
    APSLogErrorAt();
    return 4294894936;
  }
  APTransportPackageGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5)
  {
    uint64_t v8 = v5;
LABEL_13:
    APSLogErrorAt();
    return v8;
  }
  uint64_t DerivedStorage = (CFAllocatorRef **)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = APTransportParcelMake(8uLL, a2, DerivedStorage);
  if (v7)
  {
    uint64_t v8 = v7;
    goto LABEL_13;
  }
  if (gLogCategory_APTPackageMusicData <= 30
    && (gLogCategory_APTPackageMusicData != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v8 = 0;
  *a3 = 0;
  return v8;
}

uint64_t APTPackageMusicDataGetHeaderSize(_DWORD *a1)
{
  if (a1)
  {
    *a1 = 8;
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

uint64_t APTPackageMusicDataGetPayloadSize(OpaqueCMBlockBuffer *a1, _DWORD *a2)
{
  size_t v6 = 0;
  dataPointerOut = 0;
  if (a2 && a1)
  {
    uint64_t DataPointer = CMBlockBufferGetDataPointer(a1, 0, &v6, 0, &dataPointerOut);
    if (DataPointer)
    {
      uint64_t v4 = DataPointer;
    }
    else
    {
      if (v6 == 8)
      {
        uint64_t v4 = 0;
        *a2 = bswap32(*(_DWORD *)dataPointerOut) - 8;
        return v4;
      }
      uint64_t v4 = 4294894936;
    }
    APSLogErrorAt();
    return v4;
  }
  APSLogErrorAt();
  return APSSignalErrorAt();
}

void musicdatapackage_Finalize()
{
  uint64_t DerivedStorage = (void **)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTPackageMusicData <= 30
    && (gLogCategory_APTPackageMusicData != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APTransportParcelFree(*DerivedStorage);
  *uint64_t DerivedStorage = 0;
}

__CFString *musicdatapackage_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTPackageMusicData %p>", a1);
  return Mutable;
}

const void *musicdatapackage_CopyMessageData()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MessageCFDataRef Data = (const void *)APTransportParcelGetMessageData(*DerivedStorage);
  uint64_t v2 = MessageData;
  if (MessageData) {
    CFRetain(MessageData);
  }
  return v2;
}

uint64_t musicdatapackage_SetMessageData(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  CFMutableDictionaryRef v3 = *(void **)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageData(v3, a2);
}

uint64_t musicdatapackage_GetMessageType()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelGetMessageType(v0);
}

uint64_t musicdatapackage_SetMessageType(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageType(v3, a2);
}

CMBlockBufferRef musicdatapackage_CreateBBufRepresentation()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef v4 = 0;
  unsigned int MessageType = APTransportParcelGetMessageType(*DerivedStorage);
  MessageCFDataRef Data = (OpaqueCMBlockBuffer *)APTransportParcelGetMessageData(*DerivedStorage);
  v5[0] = bswap32(CMBlockBufferGetDataLength(MessageData) + 8);
  v5[1] = bswap32(MessageType);
  APTransportParcelCreateBBufRepresentation(*DerivedStorage, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], v5, &v4);
  return v4;
}

CFStringRef carPlayHelperUSB_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[APCarPlayHelperUSB %p]", a1);
}

uint64_t __APCarPlayHelperUSBGetClassID_block_invoke()
{
  uint64_t ClassID = APCarPlayHelperGetClassID();
  return MEMORY[0x1F40DC658](&APCarPlayHelperUSBGetClassID_sClassDesc, ClassID, 0, &APCarPlayHelperUSBGetClassID_sClassID);
}

uint64_t APCarPlayHelperUSBCreate(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, void *a5)
{
  if (APCarPlayHelperUSBGetClassID_sRegisterOnce != -1) {
    dispatch_once(&APCarPlayHelperUSBGetClassID_sRegisterOnce, &__block_literal_global_12);
  }
  uint64_t v9 = CMDerivedObjectCreate();
  if (v9)
  {
    uint64_t v19 = v9;
LABEL_24:
    APSLogErrorAt();
    return v19;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  dispatch_semaphore_t v11 = dispatch_semaphore_create(0);
  DerivedStorage[1] = v11;
  if (!v11
    || (dispatch_queue_t v12 = dispatch_queue_create("APCarPlayHelperUSBInternalQueue", 0), (DerivedStorage[2] = v12) == 0)
    || (dispatch_queue_t v13 = dispatch_queue_create("APCarPlayHelperUSBEventQueue", 0), (DerivedStorage[3] = v13) == 0))
  {
    APSLogErrorAt();
    return 4294954510;
  }
  DerivedStorage[8] = a2;
  DerivedStorage[9] = a3;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294954516;
  }
  SharedHelper = (const void *)APConnectivityHelperGetSharedHelper();
  if (!SharedHelper)
  {
    DerivedStorage[5] = 0;
    goto LABEL_18;
  }
  CFTypeRef v15 = CFRetain(SharedHelper);
  DerivedStorage[5] = v15;
  if (!v15)
  {
LABEL_18:
    APSLogErrorAt();
    return 4294960568;
  }
  uint64_t v16 = APConnectivityHelperRegisterEventHandler((uint64_t)v15, 0, (uint64_t)carPlayHelperUSB_handleConnectivityHelperEvent);
  if (v16)
  {
    uint64_t v19 = v16;
    goto LABEL_24;
  }
  if (a4)
  {
    CFUUIDRef Value = CFDictionaryGetValue(a4, @"powerAssertion");
    DerivedStorage[4] = Value;
    if (Value) {
      CFRetain(Value);
    }
    uint64_t v18 = CFDictionaryGetValue(a4, @"eventRecorder");
    DerivedStorage[10] = v18;
    if (v18) {
      CFRetain(v18);
    }
  }
  uint64_t v19 = 0;
  *a5 = 0;
  return v19;
}

void carPlayHelperUSB_handleConnectivityHelperEvent(uint64_t a1, int a2, const void *a3, const void *a4)
{
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2020000000;
  int v12 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4) {
    CFRetain(a4);
  }
  if (a3) {
    CFRetain(a3);
  }
  uint64_t v8 = *(NSObject **)(DerivedStorage + 16);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __carPlayHelperUSB_handleConnectivityHelperEvent_block_invoke;
  void v9[3] = &unk_1E688BA10;
  int v10 = a2;
  v9[4] = v11;
  void v9[5] = a4;
  void v9[6] = a3;
  dispatch_async(v8, v9);
  _Block_object_dispose(v11, 8);
}

void sub_1D08E8640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t carPlayHelperUSB_invalidate(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(NSObject **)(DerivedStorage + 16);
  if (v3)
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    _DWORD v5[2] = __carPlayHelperUSB_invalidate_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = DerivedStorage;
    v5[5] = a1;
    dispatch_sync(v3, v5);
  }
  return 0;
}

void carPlayHelperUSB_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage[2];
  if (v3)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __carPlayHelperUSB_finalize_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = DerivedStorage;
    dispatch_sync(v3, block);
  }
  carPlayHelperUSB_invalidate(a1);
  CMBlockBufferRef v4 = DerivedStorage[1];
  if (v4)
  {
    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v5 = DerivedStorage[1];
    if (v5)
    {
      dispatch_release(v5);
      DerivedStorage[1] = 0;
    }
  }
  size_t v6 = DerivedStorage[2];
  if (v6)
  {
    dispatch_sync(v6, &__block_literal_global_12_0);
    uint64_t v7 = DerivedStorage[2];
    if (v7)
    {
      dispatch_release(v7);
      DerivedStorage[2] = 0;
    }
  }
  uint64_t v8 = DerivedStorage[3];
  if (v8)
  {
    dispatch_sync(v8, &__block_literal_global_14_0);
    uint64_t v9 = DerivedStorage[3];
    if (v9)
    {
      dispatch_release(v9);
      DerivedStorage[3] = 0;
    }
  }
  int v10 = (const void *)DerivedStorage[10];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[10] = 0;
  }
  dispatch_semaphore_t v11 = (const void *)DerivedStorage[4];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[4] = 0;
  }
  int v12 = (const void *)DerivedStorage[5];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[5] = 0;
  }
  dispatch_queue_t v13 = (const void *)DerivedStorage[7];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[7] = 0;
  }
  CFTypeID v14 = DerivedStorage[3];
  if (v14)
  {
    dispatch_release(v14);
    DerivedStorage[3] = 0;
  }
  CFTypeRef v15 = DerivedStorage[2];
  if (v15)
  {
    dispatch_release(v15);
    DerivedStorage[2] = 0;
  }
  uint64_t v16 = DerivedStorage[1];
  if (v16)
  {
    dispatch_release(v16);
    DerivedStorage[1] = 0;
  }
}

NSObject *__carPlayHelperUSB_invalidate_block_invoke(NSObject *result)
{
  Class isa = result[4].isa;
  if (!*(unsigned char *)isa)
  {
    uint64_t v2 = result;
    uint64_t v3 = *((void *)isa + 5);
    if (v3) {
      APConnectivityHelperRemoveAllRegistrations(v3, (uint64_t)v2[5].isa);
    }
    Class v4 = v2[5].isa;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    carPlayHelperUSB_dispatchEvent(v4, 3, 0);
    uint64_t result = *(NSObject **)(DerivedStorage + 8);
    if (result) {
      uint64_t result = dispatch_semaphore_signal(result);
    }
    *(unsigned char *)v2[4].Class isa = 1;
  }
  return result;
}

void carPlayHelperUSB_dispatchEvent(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = *(void *)(DerivedStorage + 64);
  if (v7)
  {
    uint64_t v8 = DerivedStorage;
    uint64_t v9 = *(void *)(DerivedStorage + 72);
    if (gLogCategory_APBrowserCarUSBHelper <= 20
      && (gLogCategory_APBrowserCarUSBHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (a1) {
      CFRetain(a1);
    }
    if (a3) {
      CFRetain(a3);
    }
    int v10 = *(NSObject **)(v8 + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __carPlayHelperUSB_dispatchEvent_block_invoke;
    block[3] = &__block_descriptor_68_e5_v8__0l;
    block[4] = v7;
    void block[5] = a1;
    int v12 = a2;
    void block[6] = a3;
    void block[7] = v9;
    dispatch_async(v10, block);
  }
}

void __carPlayHelperUSB_dispatchEvent_block_invoke(uint64_t a1)
{
  (*(void (**)(void, void, void, void))(a1 + 32))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 64), *(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t __carPlayHelperUSB_finalize_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 64) = 0;
  *(void *)(*(void *)(result + 32) + 72) = 0;
  return result;
}

void carPlayHelperUSB_setInterfaceWatchingEnabled(const void *a1, char a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 16))
  {
    uint64_t v5 = DerivedStorage;
    CFRetain(a1);
    size_t v6 = *(NSObject **)(v5 + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __carPlayHelperUSB_setInterfaceWatchingEnabled_block_invoke;
    block[3] = &__block_descriptor_49_e5_v8__0l;
    char v8 = a2;
    block[4] = v5;
    void block[5] = a1;
    dispatch_async(v6, block);
  }
}

void __carPlayHelperUSB_setInterfaceWatchingEnabled_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)v2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned __int8 *)(v2 + 48) == v3) {
      goto LABEL_8;
    }
    uint64_t v4 = *(void *)(v2 + 40);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3)
    {
      if (APConnectivityHelperRegisterForEvent(v4, v5, 4)) {
        goto LABEL_12;
      }
    }
    else if (APConnectivityHelperDeregisterForEvent(v4, v5, 4))
    {
LABEL_12:
      APSLogErrorAt();
      goto LABEL_13;
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 48) = *(unsigned char *)(a1 + 48);
    goto LABEL_8;
  }
LABEL_13:
  if (gLogCategory_APBrowserCarUSBHelper <= 90
    && (gLogCategory_APBrowserCarUSBHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_8:
  size_t v6 = *(const void **)(a1 + 40);
  CFRelease(v6);
}

void __carPlayHelperUSB_handleConnectivityHelperEvent_block_invoke(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 56);
  if (v2 == 104)
  {
    if (gLogCategory_APBrowserCarUSBHelper <= 30
      && (gLogCategory_APBrowserCarUSBHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    dispatch_semaphore_t v11 = *(const void **)(a1 + 40);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    dispatch_queue_t v13 = *(const void **)(DerivedStorage + 56);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(DerivedStorage + 56) = 0;
      CMBaseObjectGetDerivedStorage();
      APSLogErrorAt();
    }
    carPlayHelperUSB_dispatchEvent(v11, 2, 0);
  }
  else
  {
    if (v2 == 4)
    {
      int v3 = *(const void **)(a1 + 40);
      CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 48);
      uint64_t v5 = CMBaseObjectGetDerivedStorage();
      if (!v4)
      {
LABEL_68:
        APSLogErrorAt();
        goto LABEL_56;
      }
      size_t v6 = (void *)v5;
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v4, @"networkInterfaceName");
      CFStringRef v8 = Value;
      BOOL v9 = Value == 0;
      if (Value && CFStringHasPrefix(Value, @"anpi"))
      {
        if (gLogCategory_APBrowserCarUSBHelper <= 50
          && (gLogCategory_APBrowserCarUSBHelper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_56;
      }
      if (CFDictionaryGetInt64())
      {
        if (v8) {
          BOOL v10 = v6[4] == 0;
        }
        else {
          BOOL v10 = 1;
        }
        if (!v10)
        {
          APSPowerAssertionRaiseTemporary();
          BOOL v9 = 0;
        }
      }
      else
      {
        if (!FigCFEqual()) {
          goto LABEL_56;
        }
        CFStringRef v8 = 0;
        BOOL v9 = 1;
      }
      if (FigCFEqual())
      {
LABEL_56:
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
        if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
          APSLogErrorAt();
        }
        goto LABEL_58;
      }
      if (gLogCategory_APBrowserCarUSBHelper <= 50
        && (gLogCategory_APBrowserCarUSBHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v14 = v6[10];
      if (v9)
      {
        if (v14) {
          APSEventRecorderRecordEvent();
        }
        uint64_t v15 = LogCategoryCopyOSLogHandle();
        uint64_t v16 = (void *)v15;
        if (v15) {
          uint64_t v17 = v15;
        }
        else {
          uint64_t v17 = MEMORY[0x1E4F14500];
        }
        if (os_signpost_enabled(v17))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1D087F000, v17, OS_SIGNPOST_EVENT, 0x2B8D08DCuLL, "AP_SIGNPOST_CAR_USB_LINKDOWN", "", buf, 2u);
        }
        if (v16) {

        }
        uint64_t v18 = (const void *)v6[7];
        void v6[7] = v8;
        if (!v18) {
          goto LABEL_54;
        }
      }
      else
      {
        if (v14) {
          APSEventRecorderRecordEvent();
        }
        uint64_t v19 = LogCategoryCopyOSLogHandle();
        uint64_t v20 = (void *)v19;
        if (v19) {
          uint64_t v21 = v19;
        }
        else {
          uint64_t v21 = MEMORY[0x1E4F14500];
        }
        if (os_signpost_enabled(v21))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1D087F000, v21, OS_SIGNPOST_EVENT, 0x2B8D07FCuLL, "AP_SIGNPOST_CAR_USB_LINKUP", "", buf, 2u);
        }
        if (v20) {

        }
        uint64_t v18 = (const void *)v6[7];
        void v6[7] = v8;
        CFRetain(v8);
        if (!v18) {
          goto LABEL_54;
        }
      }
      CFRelease(v18);
LABEL_54:
      values = *(void **)(CMBaseObjectGetDerivedStorage() + 56);
      *(void *)buf = 0x1F26C9180;
      CFAllocatorRef v22 = CFGetAllocator(v3);
      CFDictionaryRef v23 = CFDictionaryCreate(v22, (const void **)buf, (const void **)&values, values != 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v23)
      {
        CFDictionaryRef v24 = v23;
        carPlayHelperUSB_dispatchEvent(v3, 0, v23);
        CFRelease(v24);
        goto LABEL_56;
      }
      APSLogErrorAt();
      goto LABEL_68;
    }
    if (gLogCategory_APBrowserCarUSBHelper <= 30
      && (gLogCategory_APBrowserCarUSBHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
LABEL_58:
  uint64_t v25 = *(const void **)(a1 + 40);
  if (v25) {
    CFRelease(v25);
  }
  uint64_t v26 = *(const void **)(a1 + 48);
  if (v26) {
    CFRelease(v26);
  }
}

uint64_t APTransportKeepAliveControllerStandardCreate(int a1, CFTypeRef cf, CFTypeRef a3, void *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (cf && (CFTypeID v7 = CFGetTypeID(cf), v7 != CFDictionaryGetTypeID())
    || !a3
    || (CFTypeID v8 = CFGetTypeID(a3), v8 != FigTransportStreamGetTypeID())
    || !a4)
  {
    APSLogErrorAt();
    return 4294895535;
  }
  APTransportKeepAliveControllerGetClassID();
  uint64_t v9 = CMDerivedObjectCreate();
  if (v9)
  {
    uint64_t v15 = v9;
LABEL_26:
    APSLogErrorAt();
    return v15;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportKeepAliveControllerStandard <= 50
    && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (cf) {
    *(unsigned char *)(DerivedStorage + 32) = CFDictionaryGetInt64() != 0;
  }
  uint64_t v11 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(void *)(DerivedStorage + 40) = v11;
  if (!v11)
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  *(void *)(DerivedStorage + 48) = a3;
  SNPrintF();
  dispatch_queue_t v12 = dispatch_queue_create(label, 0);
  *(void *)(DerivedStorage + 16) = v12;
  if (!v12)
  {
    uint64_t v15 = 4294895536;
    goto LABEL_26;
  }
  SNPrintF();
  dispatch_queue_t v13 = dispatch_queue_create(label, 0);
  *(void *)uint64_t DerivedStorage = v13;
  if (!v13)
  {
    uint64_t v15 = 4294895536;
    goto LABEL_26;
  }
  SNPrintF();
  dispatch_queue_t v14 = dispatch_queue_create(label, 0);
  *(void *)(DerivedStorage + 8) = v14;
  if (!v14)
  {
    uint64_t v15 = 4294895536;
    goto LABEL_26;
  }
  uint64_t v15 = 0;
  *(_DWORD *)(DerivedStorage + 36) = 2017;
  *a4 = 0;
  return v15;
}

void standardKeepAliveController_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportKeepAliveControllerStandard <= 50
    && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 40) = 0;
  }
  *(void *)(DerivedStorage + 48) = 0;
  int v2 = *(NSObject **)(DerivedStorage + 24);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 24));
    dispatch_release(v2);
    *(void *)(DerivedStorage + 24) = 0;
  }
  int v3 = *(NSObject **)(DerivedStorage + 16);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(DerivedStorage + 16) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  CFDictionaryRef v4 = *(NSObject **)(DerivedStorage + 8);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

__CFString *standardKeepAliveController_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTransportKeepAliveControllerStandard %p>", a1);
  return Mutable;
}

uint64_t standardKeepAliveController_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, @"KeepAliveInterval")) {
    return 4294954512;
  }
  CFNumberRef v8 = CFNumberCreate(a3, kCFNumberSInt32Type, (const void *)(DerivedStorage + 36));
  *a4 = v8;
  if (v8) {
    return 0;
  }
  APSLogErrorAt();
  return 4294895536;
}

uint64_t standardKeepAliveController_SetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, @"KeepAliveInterval")) {
    return 4294954512;
  }
  if (*(unsigned char *)(DerivedStorage + 33))
  {
    uint64_t v7 = 4294895534;
    APSLogErrorAt();
  }
  else if (a3 && (CFTypeID v6 = CFGetTypeID(a3), v6 == CFNumberGetTypeID()))
  {
    CFNumberGetValue(a3, kCFNumberSInt32Type, (void *)(DerivedStorage + 36));
    if (gLogCategory_APTransportKeepAliveControllerStandard <= 50
      && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294895535;
  }
  return v7;
}

uint64_t standardKeepAliveController_Resume(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 16), a1, (dispatch_function_t)standardKeepAliveController_controllerResumedCallback);
  return 0;
}

uint64_t standardKeepAliveController_Suspend(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 16), a1, (dispatch_function_t)standardKeepAliveController_controllerSuspendedCallback);
  return 0;
}

void standardKeepAliveController_controllerResumedCallback(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 33))
  {
    uint64_t v3 = DerivedStorage;
    uint64_t v4 = MEMORY[0x1E4F1F9F8];
    long long v5 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(DerivedStorage + 56) = *MEMORY[0x1E4F1F9F8];
    uint64_t v6 = *(void *)(v4 + 16);
    *(void *)(DerivedStorage + 72) = v6;
    *(_OWORD *)(DerivedStorage + 104) = v5;
    *(void *)(DerivedStorage + 120) = v6;
    *(void *)(DerivedStorage + 128) = 0;
    uint64_t v7 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(DerivedStorage + 16));
    *(void *)(v3 + 24) = v7;
    if (!v7)
    {
      APSLogErrorAt();
      if (!a1) {
        return;
      }
      goto LABEL_9;
    }
    dispatch_set_context(v7, a1);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v3 + 24), (dispatch_function_t)standardKeepAliveController_timerFiredCallback);
    uint64_t v8 = 1000000 * *(unsigned int *)(v3 + 36);
    if (gLogCategory_APTransportKeepAliveControllerStandard <= 30
      && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v9 = *(NSObject **)(v3 + 24);
    dispatch_time_t v10 = dispatch_time(0, v8);
    dispatch_source_set_timer(v9, v10, v8, 0x5F5E100uLL);
    dispatch_resume(*(dispatch_object_t *)(v3 + 24));
    *(unsigned char *)(v3 + 33) = 1;
  }
  if (!a1) {
    return;
  }
LABEL_9:
  CFRelease(a1);
}

void standardKeepAliveController_timerFiredCallback(void *a1)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(DerivedStorage + 68))
    {
      uint64_t v5 = CMBaseObjectGetDerivedStorage();
      *(_OWORD *)&v17.value = *MEMORY[0x1E4F1F9F8];
      CMTimeEpoch v6 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      v17.epoch = v6;
      long long v10 = *(_OWORD *)&v17.value;
      *(_OWORD *)&v16.value = *(_OWORD *)&v17.value;
      v16.epoch = v6;
      HostTimeClock = CMClockGetHostTimeClock();
      CMClockGetTime(&v17, HostTimeClock);
      ++*(_DWORD *)(v5 + 128);
      lhs[0] = v17;
      CMTime rhs = *(CMTime *)(v5 + 56);
      CMTimeSubtract(&v16, lhs, &rhs);
      if (gLogCategory_APTransportKeepAliveControllerStandard <= 50
        && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
      {
        lhs[0] = v16;
        CMTimeGetSeconds(lhs);
        LogPrintF();
      }
      CMTimeMake(&rhs, 10, 1);
      lhs[0] = v16;
      if ((CMTimeCompare(lhs, &rhs) & 0x80000000) == 0)
      {
        *(_OWORD *)&v14.value = v10;
        v14.epoch = v6;
        lhs[0] = v17;
        CMTime time2 = *(CMTime *)(v5 + 104);
        CMTimeSubtract(&v14, lhs, &time2);
        if ((*(unsigned char *)(v5 + 116) & 1) == 0
          || (CMTimeMake(&time2, 180, 1), lhs[0] = v14, CMTimeCompare(lhs, &time2) >= 1))
        {
          memset(&lhs[0].timescale, 0, 32);
          lhs[0].value = (CMTimeValue)CFRetain(a1);
          LOBYTE(lhs[0].timescale) = 1;
          *(CMTime *)(v5 + 104) = v17;
          ++*(_DWORD *)(v5 + 132);
          if (gLogCategory_APTransportKeepAliveControllerStandard <= 50
            && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
          {
            CMTime time = v16;
            CMTimeGetSeconds(&time);
            LogPrintF();
          }
          *(CMTime *)&lhs[0].flags = v16;
          APSDispatchAsyncFHelper();
          IsAppleInternalBuild();
          if (IsAppleInternalBuild()) {
            int v8 = 50;
          }
          else {
            int v8 = 30;
          }
          if (v8 >= gLogCategory_APTransportKeepAliveControllerStandard)
          {
            if (gLogCategory_APTransportKeepAliveControllerStandard != -1
              || (IsAppleInternalBuild(), _LogCategory_Initialize()))
            {
              IsAppleInternalBuild();
              LogPrintF();
            }
          }
          DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
          CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.airplay.connection.stalled", 0, 0, 1u);
        }
      }
    }
    else
    {
      uint64_t v3 = DerivedStorage;
      CFRetain(a1);
      uint64_t v4 = CMClockGetHostTimeClock();
      CMClockGetTime(lhs, v4);
      *(CMTime *)(v3 + 56) = lhs[0];
      dispatch_async_f(*(dispatch_queue_t *)v3, a1, (dispatch_function_t)standardKeepAliveController_sendKeepAliveCallback);
    }
  }
}

void standardKeepAliveController_sendKeepAliveCallback(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v26 = 0;
  CFTypeRef v23 = 0;
  *(void *)SCDynamicStoreContext context = a1;
  *(void *)&void context[8] = &v23;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 16), context, (dispatch_function_t)standardKeepAliveController_copyTransportStreamCallback);
  if (!v23)
  {
    APSLogErrorAt();
    int v8 = -71761;
    goto LABEL_30;
  }
  if (*(unsigned char *)(DerivedStorage + 32))
  {
    if (gLogCategory_APTransportKeepAliveControllerStandard <= 10
      && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFTypeRef v3 = v23;
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    CMTimeEpoch v6 = *(uint64_t (**)(CFTypeRef, uint64_t, void, void))(v5 + 56);
    if (!v6)
    {
      int v8 = -12782;
      goto LABEL_29;
    }
    int v7 = v6(v3, 1818977637, 0, 0);
    if (v7)
    {
      int v8 = v7;
LABEL_29:
      APSLogErrorAt();
LABEL_30:
      *(void *)&void context[8] = 0;
      if (a1) {
        CFTypeRef v16 = CFRetain(a1);
      }
      else {
        CFTypeRef v16 = 0;
      }
      *(void *)SCDynamicStoreContext context = v16;
      *(_DWORD *)&void context[8] = v8;
LABEL_49:
      APSDispatchAsyncFHelper();
      goto LABEL_50;
    }
  }
  else
  {
    if (gLogCategory_APTransportKeepAliveControllerStandard <= 10
      && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFTypeRef v9 = v23;
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    dispatch_queue_t v12 = *(uint64_t (**)(CFTypeRef, uint64_t, void, const __CFDictionary **))(v11 + 56);
    if (!v12)
    {
      int v8 = -12782;
      goto LABEL_29;
    }
    int v13 = v12(v9, 1801807216, 0, &v26);
    if (v13)
    {
      int v8 = v13;
      goto LABEL_29;
    }
    CFDictionaryRef v14 = v26;
    *(void *)SCDynamicStoreContext context = v26;
    uint64_t v15 = CMBaseObjectGetDerivedStorage();
    if (v14) {
      CFDictionaryRef v14 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)kAPTransportKeepAliveControllerNotificationKey_BlockBuffer, (const void **)context, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    if (gLogCategory_APTransportKeepAliveControllerStandard <= 30
      && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*(unsigned char *)(v15 + 33))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    if (v14) {
      CFRelease(v14);
    }
  }
  *(void *)SCDynamicStoreContext context = a1;
  long long v19 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&void context[8] = *MEMORY[0x1E4F1F9F8];
  uint64_t v17 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  *(void *)&context[24] = v17;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 16), context, (dispatch_function_t)standardKeepAliveController_setKeepAliveReceivedCallback);
  long long v24 = *(_OWORD *)&context[8];
  uint64_t v25 = *(void *)&context[24];
  CMTimeMake(&time2, *(unsigned int *)(DerivedStorage + 36), 1000);
  *(_OWORD *)SCDynamicStoreContext context = v24;
  *(void *)&context[16] = v25;
  if (CMTimeCompare((CMTime *)context, &time2) >= 1
    && gLogCategory_APTransportKeepAliveControllerStandard <= 50
    && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
  {
    *(_OWORD *)SCDynamicStoreContext context = v24;
    *(void *)&context[16] = v25;
    CMTimeGetSeconds((CMTime *)context);
    LogPrintF();
  }
  CMTimeMake(&v21, 10, 1);
  *(_OWORD *)SCDynamicStoreContext context = v24;
  *(void *)&context[16] = v25;
  if (CMTimeCompare((CMTime *)context, &v21) >= 1)
  {
    *(_OWORD *)(DerivedStorage + 104) = v19;
    *(void *)(DerivedStorage + 120) = v17;
    memset(&context[8], 0, 32);
    if (a1) {
      CFTypeRef v18 = CFRetain(a1);
    }
    else {
      CFTypeRef v18 = 0;
    }
    *(void *)SCDynamicStoreContext context = v18;
    void context[8] = 0;
    *(_OWORD *)&context[12] = v24;
    *(void *)&context[28] = v25;
    goto LABEL_49;
  }
LABEL_50:
  if (v26) {
    CFRelease(v26);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t standardKeepAliveController_copyTransportStreamCallback(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t result = FigCFWeakReferenceHolderCopyReferencedObject();
  **(void **)(a1 + 8) = result;
  return result;
}

__n128 standardKeepAliveController_setKeepAliveReceivedCallback(uint64_t a1)
{
  memset(&v11, 0, sizeof(v11));
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v11, HostTimeClock);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v4 = *(_OWORD *)&v11.value;
  *(_OWORD *)(DerivedStorage + 80) = *(_OWORD *)&v11.value;
  CMTimeEpoch epoch = v11.epoch;
  *(void *)(DerivedStorage + 96) = v11.epoch;
  *(_OWORD *)&lhs.value = v4;
  lhs.CMTimeEpoch epoch = epoch;
  CMTime v8 = *(CMTime *)(DerivedStorage + 56);
  CMTimeSubtract(&v10, &lhs, &v8);
  *(CMTime *)(a1 + 8) = v10;
  uint64_t v6 = MEMORY[0x1E4F1F9F8];
  __n128 result = *(__n128 *)MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(DerivedStorage + 56) = *MEMORY[0x1E4F1F9F8];
  *(void *)(DerivedStorage + 72) = *(void *)(v6 + 16);
  return result;
}

void standardKeepAliveController_sendConnectionStallStateChangedCallback(uint64_t a1)
{
  CFTypeRef v2 = *(CFTypeRef *)a1;
  *(_OWORD *)&v10.value = *(_OWORD *)(a1 + 12);
  v10.CMTimeEpoch epoch = *(void *)(a1 + 28);
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 33))
  {
    CFAllocatorRef v3 = CFGetAllocator(v2);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v5 = Mutable;
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTime time = v10;
      CFDictionaryRef v7 = CMTimeCopyAsDictionary(&time, v6);
      if (v7)
      {
        CFDictionaryRef v8 = v7;
        CFDictionarySetValue(v5, @"StallDuration", v7);
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(v5);
        CFTypeRef v9 = v8;
      }
      else
      {
        APSLogErrorAt();
        CFTypeRef v9 = v5;
      }
      CFRelease(v9);
    }
    else
    {
      APSLogErrorAt();
    }
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
}

void standardKeepAliveController_sendConnectionFailedCallback(const void **a1)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 33))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v3 = Mutable;
      CFDictionarySetInt64();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(v3);
    }
    else
    {
      APSLogErrorAt();
    }
  }
  long long v4 = *a1;
  if (*a1)
  {
    CFRelease(v4);
  }
}

void standardKeepAliveController_controllerSuspendedCallback()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 33))
  {
    uint64_t v1 = DerivedStorage;
    dispatch_set_context(*(dispatch_object_t *)(DerivedStorage + 24), 0);
    CFTypeRef v2 = *(NSObject **)(v1 + 24);
    if (v2)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(v1 + 24));
      dispatch_release(v2);
      *(void *)(v1 + 24) = 0;
    }
    *(unsigned char *)(v1 + 33) = 0;
  }
}

uint64_t APTransportPackageRTCPCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  uint64_t v2 = APTransportPackageRTCPCreateWithBBuf(a1, 0, a2);
  if (v2) {
    APSLogErrorAt();
  }
  return v2;
}

uint64_t APTransportPackageRTCPCreateWithBBuf(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, CFTypeRef *a3)
{
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef cf = 0;
  APTransportPackageGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6)
  {
    uint64_t v13 = v6;
LABEL_32:
    APSLogErrorAt();
    goto LABEL_20;
  }
  uint64_t DerivedStorage = (CFAllocatorRef **)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = APTransportParcelMake(4uLL, 0, DerivedStorage);
  if (v8)
  {
    uint64_t v13 = v8;
    goto LABEL_32;
  }
  if (!a2) {
    goto LABEL_10;
  }
  size_t lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  uint64_t DataPointer = CMBlockBufferGetDataPointer(a2, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
  if (DataPointer)
  {
    uint64_t v13 = DataPointer;
    goto LABEL_32;
  }
  if (lengthAtOffsetOut <= 3)
  {
    APSLogErrorAt();
LABEL_19:
    uint64_t v13 = 4294960591;
    goto LABEL_20;
  }
  if ((*dataPointerOut & 0xC0) != 0x80)
  {
    APSLogErrorAt();
    uint64_t v13 = 4294960581;
    goto LABEL_20;
  }
  if (dataPointerOut[1] != 213)
  {
    if (gLogCategory_APTransportPackageRTCP <= 90
      && (gLogCategory_APTransportPackageRTCP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_19;
  }
  APTransportParcelSetMessageType((uint64_t)*DerivedStorage, 1634168383);
  DataCFIndex Length = CMBlockBufferGetDataLength(a2);
  uint64_t v11 = CMBlockBufferCreateWithBufferReference(a1, a2, 4uLL, DataLength - 4, 0, &blockBufferOut);
  if (v11)
  {
    uint64_t v13 = v11;
    goto LABEL_32;
  }
  uint64_t v12 = APTransportParcelSetMessageData(*DerivedStorage, blockBufferOut);
  if (v12)
  {
    uint64_t v13 = v12;
    goto LABEL_32;
  }
LABEL_10:
  if (gLogCategory_APTransportPackageRTCP <= 30
    && (gLogCategory_APTransportPackageRTCP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v13 = 0;
  *a3 = cf;
  CFTypeRef cf = 0;
LABEL_20:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

uint64_t APTransportPackageRTCPCreateWithMessageSize(uint64_t a1, size_t a2, void *a3)
{
  if (!a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  APTransportPackageGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5)
  {
    uint64_t v8 = v5;
LABEL_13:
    APSLogErrorAt();
    return v8;
  }
  uint64_t DerivedStorage = (CFAllocatorRef **)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = APTransportParcelMake(4uLL, a2, DerivedStorage);
  if (v7)
  {
    uint64_t v8 = v7;
    goto LABEL_13;
  }
  if (gLogCategory_APTransportPackageRTCP <= 30
    && (gLogCategory_APTransportPackageRTCP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v8 = 0;
  *a3 = 0;
  return v8;
}

void rtcppackage_Finalize()
{
  uint64_t DerivedStorage = (void **)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportPackageRTCP <= 30
    && (gLogCategory_APTransportPackageRTCP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APTransportParcelFree(*DerivedStorage);
  *uint64_t DerivedStorage = 0;
}

__CFString *rtcppackage_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTransportPackageRTCP %p>", a1);
  return Mutable;
}

const void *rtcppackage_CopyMessageData()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MessageCFDataRef Data = (const void *)APTransportParcelGetMessageData(*DerivedStorage);
  uint64_t v2 = MessageData;
  if (MessageData) {
    CFRetain(MessageData);
  }
  return v2;
}

uint64_t rtcppackage_SetMessageData(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  CFMutableDictionaryRef v3 = *(void **)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageData(v3, a2);
}

uint64_t rtcppackage_GetMessageType()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelGetMessageType(v0);
}

uint64_t rtcppackage_SetMessageType(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageType(v3, a2);
}

CMBlockBufferRef rtcppackage_CreateBBufRepresentation()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  int v14 = 0;
  CMBlockBufferRef v13 = 0;
  int MessageType = APTransportParcelGetMessageType(*DerivedStorage);
  MessageCFDataRef Data = (OpaqueCMBlockBuffer *)APTransportParcelGetMessageData(*DerivedStorage);
  DataCFIndex Length = CMBlockBufferGetDataLength(MessageData);
  if (MessageType > 1951421519)
  {
    switch(MessageType)
    {
      case 1951421520:
        if (DataLength != 24) {
          goto LABEL_37;
        }
        char v5 = -112;
        break;
      case 1952542318:
        if (DataLength == 16)
        {
          char v4 = 0x80;
          goto LABEL_23;
        }
        goto LABEL_37;
      case 1953526896:
        if (DataLength != 24) {
          goto LABEL_37;
        }
        char v5 = 0x80;
        break;
      default:
        goto LABEL_27;
    }
    LOBYTE(v14) = v5;
    __int16 v6 = 1536;
    char v7 = -41;
    goto LABEL_24;
  }
  if (MessageType == 560031598)
  {
    if (DataLength == 4)
    {
      LOBYTE(v14) = 0x80;
      __int16 v6 = 256;
      char v7 = -42;
LABEL_24:
      BYTE1(v14) = v7;
      HIWORD(v14) = v6;
      APTransportParcelCreateBBufRepresentation(*DerivedStorage, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], &v14, &v13);
      return v13;
    }
LABEL_37:
    APSLogErrorAt();
    return 0;
  }
  if (MessageType != 1634168352)
  {
    if (MessageType == 1950436942)
    {
      if (DataLength == 16)
      {
        char v4 = -112;
LABEL_23:
        LOBYTE(v14) = v4;
        __int16 v6 = 1024;
        char v7 = -44;
        goto LABEL_24;
      }
      goto LABEL_37;
    }
LABEL_27:
    if (gLogCategory_APTransportPackageRTCP <= 90
      && (gLogCategory_APTransportPackageRTCP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 0;
  }
  LOWORD(v14) = -10624;
  HIWORD(v14) = bswap32((DataLength + 2) >> 2) >> 16;
  dataPointerOut = 0;
  size_t totalLengthOut = 0;
  size_t lengthAtOffsetOut = 0;
  if (!FigCreateBlockBufferCopyingMemoryBlock())
  {
    customBlockSource.version = 0;
    customBlockSource.AllocateBlock = 0;
    customBlockSource.FreeBlock = (void (__cdecl *)(void *, void *, size_t))rtcppackage_bbufFree;
    customBlockSource.refCon = (void *)CFRetain(MessageData);
    if (!CMBlockBufferGetDataPointer(MessageData, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut))
    {
      dataPointerOut -= 2;
      totalLengthOut += 2;
      if (!CMBlockBufferAppendMemoryBlock(v13, dataPointerOut, totalLengthOut, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0], &customBlockSource, 0, totalLengthOut, 0))return v13; {
    }
      }
  }
  APSLogErrorAt();
  CMBlockBufferRef result = v13;
  if (v13)
  {
    CFRelease(v13);
    return 0;
  }
  return result;
}

uint64_t APTransportTrafficRegistrarGetTypeID()
{
  if (APTransportTrafficRegistrarGetTypeID_sInitOnce != -1) {
    dispatch_once_f(&APTransportTrafficRegistrarGetTypeID_sInitOnce, &APTransportTrafficRegistrarGetTypeID_sTypeID, (dispatch_function_t)trafficRegistrar_getTypeID);
  }
  return APTransportTrafficRegistrarGetTypeID_sTypeID;
}

uint64_t trafficRegistrar_getTypeID(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APTransportTrafficRegistrarCreate(uint64_t a1, void *a2)
{
  if (APTransportTrafficRegistrarGetTypeID_sInitOnce != -1) {
    dispatch_once_f(&APTransportTrafficRegistrarGetTypeID_sInitOnce, &APTransportTrafficRegistrarGetTypeID_sTypeID, (dispatch_function_t)trafficRegistrar_getTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  char v4 = (void *)Instance;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  dispatch_queue_t v5 = dispatch_queue_create("APTransportTrafficRegistrar.queue", 0);
  void v4[2] = v5;
  if (!v5) {
    goto LABEL_16;
  }
  uint64_t v6 = WiFiManagerCreate();
  if (v6)
  {
    uint64_t v8 = v6;
    APSLogErrorAt();
LABEL_17:
    CFRelease(v4);
    return v8;
  }
  WiFiManagerSetProperty();
  uint64_t v7 = objc_opt_new();
  v4[4] = v7;
  if (!v7)
  {
LABEL_16:
    APSLogErrorAt();
    uint64_t v8 = 4294960568;
    goto LABEL_17;
  }
  if (gLogCategory_APTransportTrafficRegistrar <= 50
    && (gLogCategory_APTransportTrafficRegistrar != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v8 = 0;
  *a2 = v4;
  return v8;
}

uint64_t APTransportTrafficRegistrarAWDLTrafficRegistrationCreate(void *a1, uint64_t a2, CFTypeRef *a3)
{
  return APTransportTrafficRegistrarAWDLTrafficRegistrationCreateEx(a1, a2, 0, 0, a3);
}

uint64_t APTransportTrafficRegistrarAWDLTrafficRegistrationCreateEx(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  CFTypeRef v15 = 0;
  unsigned __int16 v17 = 0;
  int v16 = 0;
  unsigned int v7 = bswap32(0);
  unsigned int v8 = bswap32(*(_DWORD *)a2);
  if (v7 != v8) {
    goto LABEL_5;
  }
  unsigned int v7 = bswap32(v17) >> 16;
  unsigned int v9 = bswap32(*(unsigned __int16 *)(a2 + 4));
  if (v7 != HIWORD(v9))
  {
    unsigned int v8 = HIWORD(v9);
LABEL_5:
    if (v7 < v8) {
      char v10 = -1;
    }
    else {
      char v10 = 1;
    }
    goto LABEL_8;
  }
  char v10 = 0;
LABEL_8:
  if (v10)
  {
    uint64_t v11 = APSWiFiTrafficRegistrationCreate();
    if (v11)
    {
      APSLogErrorAt();
    }
    else
    {
      CFRetain(a1);
      void block[5] = MEMORY[0x1E4F143A8];
      void block[6] = 3221225472;
      void block[7] = __APTransportTrafficRegistrarAWDLTrafficRegistrationCreateEx_block_invoke;
      void block[8] = &__block_descriptor_48_e5_v8__0l;
      void block[9] = a1;
      block[10] = v15;
      APSWiFiTrafficRegistrationSetRemovalHandler();
      CFRetain(a1);
      uint64_t v12 = a1[2];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __APTransportTrafficRegistrarAWDLTrafficRegistrationCreateEx_block_invoke_3;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = a1;
      dispatch_async(v12, block);
      *a5 = CFRetain(v15);
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v11 = 4294960591;
  }
  if (v15) {
    CFRelease(v15);
  }
  return v11;
}

void __APTransportTrafficRegistrarAWDLTrafficRegistrationCreateEx_block_invoke(uint64_t a1)
{
  if (gLogCategory_APTransportTrafficRegistrar <= 50
    && (gLogCategory_APTransportTrafficRegistrar != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(*(CFTypeRef *)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APTransportTrafficRegistrarAWDLTrafficRegistrationCreateEx_block_invoke_2;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v2;
  dispatch_async(v3, block);
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void __APTransportTrafficRegistrarAWDLTrafficRegistrationCreateEx_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 32);
  --v1[10];
  CFRelease(v1);
}

void __APTransportTrafficRegistrarAWDLTrafficRegistrationCreateEx_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 32);
  ++v1[10];
  CFRelease(v1);
}

uint64_t APTransportTrafficRegistrarInfraTransactionCreate(void *a1, CFTypeRef *a2)
{
  CFTypeRef v8 = 0;
  uint64_t v4 = APSWiFiTransactionCreate();
  if (v4)
  {
    APSLogErrorAt();
  }
  else
  {
    CFRetain(a1);
    void v7[5] = MEMORY[0x1E4F143A8];
    void v7[6] = 3221225472;
    void v7[7] = __APTransportTrafficRegistrarInfraTransactionCreate_block_invoke;
    v7[8] = &__block_descriptor_48_e5_v8__0l;
    v7[9] = a1;
    v7[10] = v8;
    APSWiFiTransactionSetReleaseHandler();
    CFRetain(a1);
    dispatch_queue_t v5 = a1[2];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _DWORD v7[2] = __APTransportTrafficRegistrarInfraTransactionCreate_block_invoke_3;
    v7[3] = &__block_descriptor_40_e5_v8__0l;
    v7[4] = a1;
    dispatch_async(v5, v7);
    *a2 = CFRetain(v8);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v4;
}

void __APTransportTrafficRegistrarInfraTransactionCreate_block_invoke(uint64_t a1)
{
  if (gLogCategory_APTransportTrafficRegistrar <= 50
    && (gLogCategory_APTransportTrafficRegistrar != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(*(CFTypeRef *)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APTransportTrafficRegistrarInfraTransactionCreate_block_invoke_2;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v2;
  dispatch_async(v3, block);
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void __APTransportTrafficRegistrarInfraTransactionCreate_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 32);
  --v1[11];
  CFRelease(v1);
}

void __APTransportTrafficRegistrarInfraTransactionCreate_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 32);
  ++v1[11];
  CFRelease(v1);
}

void APTransportTrafficRegistrarGetRegistration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APTransportTrafficRegistrarGetRegistration_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = a2;
  void block[5] = a1;
  void block[6] = a3;
  dispatch_sync(v3, block);
}

void *__APTransportTrafficRegistrarGetRegistration_block_invoke(void *result)
{
  uint64_t v1 = (BOOL *)result[4];
  if (v1) {
    *uint64_t v1 = *(_DWORD *)(result[5] + 40) != 0;
  }
  uint64_t v2 = (BOOL *)result[6];
  if (v2) {
    *uint64_t v2 = *(_DWORD *)(result[5] + 44) != 0;
  }
  return result;
}

uint64_t APTransportTrafficRegistrarGetAWDLChannelSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0;
  unsigned int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  if (a2 && a3 && a4)
  {
    uint64_t v4 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __APTransportTrafficRegistrarGetAWDLChannelSequence_block_invoke;
    block[3] = &unk_1E688D1A0;
    block[4] = &v8;
    void block[5] = a1;
    void block[6] = a2;
    void block[7] = a3;
    void block[8] = a4;
    dispatch_sync(v4, block);
    uint64_t v5 = *((unsigned int *)v9 + 6);
  }
  else
  {
    APSLogErrorAt();
    uint64_t v5 = APSSignalErrorAt();
    *((_DWORD *)v9 + 6) = v5;
  }
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1D08EB990(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __APTransportTrafficRegistrarGetAWDLChannelSequence_block_invoke(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = (unsigned char *)a1[7];
  uint64_t v4 = a1[8];
  uint64_t result = APSIsVirtualMachine();
  if (result)
  {
    if (gLogCategory_APTransportTrafficRegistrar <= 50)
    {
      if (gLogCategory_APTransportTrafficRegistrar != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
        uint64_t result = LogPrintF();
      }
    }
    goto LABEL_20;
  }
  uint64_t v6 = (void *)[MEMORY[0x1E4FB6FD0] currentState];
  if (!v6 || (unsigned int v7 = (void *)[v6 channelSequence]) == 0)
  {
    uint64_t result = APSLogErrorAt();
LABEL_20:
    int v13 = -6762;
    goto LABEL_15;
  }
  uint64_t v8 = v7;
  if ((unint64_t)[v7 count] >= 0x11)
  {
    LOBYTE(result) = 16;
    *uint64_t v3 = 16;
    goto LABEL_7;
  }
  uint64_t result = [v8 count];
  *uint64_t v3 = result;
  if ((_BYTE)result)
  {
LABEL_7:
    uint64_t v9 = 0;
    uint64_t v10 = result;
    do
    {
      unint64_t v11 = objc_msgSend((id)objc_msgSend(v8, "objectAtIndexedSubscript:", v9), "bandwidth");
      if (v11 > 4) {
        int v12 = 0;
      }
      else {
        int v12 = dword_1D093C578[v11];
      }
      if (objc_msgSend((id)objc_msgSend(v8, "objectAtIndexedSubscript:", v9), "extensionChannelAbove")) {
        v12 |= 0x200u;
      }
      uint64_t result = objc_msgSend((id)objc_msgSend(v8, "objectAtIndexedSubscript:", v9), "channelNumber");
      *(unsigned char *)(v2 + v9) = result;
      *(_DWORD *)(v4 + 4 * v9++) = v12;
    }
    while (v10 != v9);
  }
  int v13 = 0;
LABEL_15:
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v13;
  return result;
}

uint64_t APTransportTrafficRegistrarGetRSSI(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  unsigned int v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  if (a2)
  {
    uint64_t v2 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __APTransportTrafficRegistrarGetRSSI_block_invoke;
    block[3] = &unk_1E688BD68;
    block[4] = &v6;
    void block[5] = a1;
    void block[6] = a2;
    dispatch_sync(v2, block);
    uint64_t v3 = *((unsigned int *)v7 + 6);
  }
  else
  {
    APSLogErrorAt();
    uint64_t v3 = APSSignalErrorAt();
    *((_DWORD *)v7 + 6) = v3;
  }
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1D08EBC48(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __APTransportTrafficRegistrarGetRSSI_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 48);
  uint64_t result = WiFiManagerGetInt64();
  *uint64_t v2 = result;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  return result;
}

uint64_t APTransportTrafficRegistrarGetWifiChannel(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    *a2 = WiFiManagerGetInt64();
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

void trafficRegistrar_Finalize(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 16) = 0;
  }

  *(void *)(a1 + 32) = 0;
  if (gLogCategory_APTransportTrafficRegistrar <= 50
    && (gLogCategory_APTransportTrafficRegistrar != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

uint64_t APTNANEndpointCopyTextInfo(void *a1, void *a2)
{
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  uint64_t result = 4294960591;
  if (a2 && (isKindOfClass & 1) != 0)
  {
    Empty = (const void *)[a1 textInfo];
    if (!Empty) {
      Empty = (const void *)CFDictionaryGetEmpty();
    }
    CFTypeRef v7 = CFRetain(Empty);
    uint64_t result = 0;
    *a2 = v7;
  }
  return result;
}

uint64_t APTNANEndpointGetServiceType(void *a1)
{
  CFTypeRef cf = 0;
  if (APTNANEndpointCopyTextInfo(a1, &cf) || (CFStringGetTypeID(), !CFDictionaryGetTypedValue())) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = APSNANServiceTypeMakeWithTXTString();
  }
  if (cf) {
    CFRelease(cf);
  }
  return v1;
}

uint64_t APTNANEndpointSupportsServiceType(void *a1, uint64_t a2)
{
  uint64_t ServiceType = APTNANEndpointGetServiceType(a1);
  return MEMORY[0x1F4107A68](ServiceType, a2);
}

uint64_t APCarPlayHelperGetClassID()
{
  if (APCarPlayHelperGetClassID_sRegisterOnce != -1) {
    dispatch_once(&APCarPlayHelperGetClassID_sRegisterOnce, &__block_literal_global_13);
  }
  return APCarPlayHelperGetClassID_sClassID;
}

CFStringRef carPlayHelper_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[APCarPlayHelper %p]", a1);
}

uint64_t __APCarPlayHelperGetClassID_block_invoke()
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&APCarPlayHelperGetClassID_sClassDesc, ClassID, 1, &APCarPlayHelperGetClassID_sClassID);
}

uint64_t APCarPlayControlServerGetTypeID()
{
  if (APCarPlayControlServerGetTypeID_carPlayControlServerInitOnce != -1) {
    dispatch_once(&APCarPlayControlServerGetTypeID_carPlayControlServerInitOnce, &__block_literal_global_14);
  }
  return APCarPlayControlServerGetTypeID_carPlayControlServerTypeID;
}

uint64_t __APCarPlayControlServerGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  APCarPlayControlServerGetTypeID_carPlayControlServerCFTypeID TypeID = result;
  return result;
}

void _APCarPlayControlServerFinalize(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___APCarPlayControlServerFinalize_block_invoke;
  block[3] = &__block_descriptor_tmp_25_0;
  block[4] = a1;
  dispatch_sync(v2, block);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 24), &__block_literal_global_28);
  uint64_t v3 = *(const void **)(a1 + 104);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 104) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v5 = *(NSObject **)(a1 + 24);
  if (v5)
  {
    dispatch_release(v5);
    *(void *)(a1 + 24) = 0;
  }
  TXTRecordDeallocate((TXTRecordRef *)(a1 + 48));
  uint64_t v6 = *(void **)(a1 + 40);
  if (v6)
  {
    free(v6);
    *(void *)(a1 + 40) = 0;
  }
  CFTypeRef v7 = *(const void **)(a1 + 72);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 72) = 0;
  }
}

uint64_t APCarPlayControlServerInvalidate(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __APCarPlayControlServerInvalidate_block_invoke;
  block[3] = &__block_descriptor_tmp_5;
  block[4] = a1;
  dispatch_sync(v1, block);
  return 0;
}

uint64_t __APCarPlayControlServerInvalidate_block_invoke(uint64_t a1)
{
  return _APCarPlayControlServerInvalidate(*(void *)(a1 + 32));
}

uint64_t _APCarPlayControlServerInvalidate(uint64_t a1)
{
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 88) = 0;
  CFArrayRef v1 = (const __CFArray *)CFDictionaryCopyKeys();
  CFArrayGetCount(v1);
  return CFArrayApplyBlock();
}

uint64_t APCarPlayControlServerCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, const __CFDictionary *a6, TXTRecordRef **a7)
{
  if (!a2 || !a3 || !a4)
  {
    APSLogErrorAt();
    int v12 = 0;
    uint64_t v26 = 4294960591;
    goto LABEL_19;
  }
  if (APCarPlayControlServerGetTypeID_carPlayControlServerInitOnce != -1) {
    dispatch_once(&APCarPlayControlServerGetTypeID_carPlayControlServerInitOnce, &__block_literal_global_14);
  }
  uint64_t Instance = (TXTRecordRef *)_CFRuntimeCreateInstance();
  int v12 = Instance;
  if (!Instance) {
    goto LABEL_32;
  }
  Instance[5] = 0u;
  Instance[6] = 0u;
  Instance[3] = 0u;
  Instance[4] = 0u;
  Instance[1] = 0u;
  Instance[2] = 0u;
  dispatch_queue_t v13 = dispatch_queue_create("com.apple.carplaycontrolserver", 0);
  *((void *)&v12[1].ForceNaturalAlignment + 1) = v13;
  if (!v13) {
    goto LABEL_32;
  }
  uint64_t v14 = HTTPServerCreate();
  if (v14)
  {
    uint64_t v26 = v14;
LABEL_31:
    APSLogErrorAt();
    goto LABEL_19;
  }
  HTTPServerSetDispatchQueue();
  HTTPServerSetLogging();
  uint64_t v15 = CFStringCopyUTF8CString();
  if (v15)
  {
    uint64_t v26 = v15;
    goto LABEL_31;
  }
  uint64_t v16 = CFStringCopyUTF8CString();
  if (v16)
  {
    uint64_t v26 = v16;
    goto LABEL_31;
  }
  __int16 v17 = strlen(0);
  uint16_t v18 = v17 + strlen(0) + 13;
  long long v19 = malloc_type_malloc(v18, 0xB94BF51FuLL);
  *((void *)&v12[2].ForceNaturalAlignment + 1) = v19;
  if (!v19) {
    goto LABEL_32;
  }
  TXTRecordCreate(v12 + 3, v18, v19);
  uint8_t v20 = strlen(0);
  uint64_t v21 = TXTRecordSetValue(v12 + 3, "id", v20, 0);
  if (v21)
  {
    uint64_t v26 = v21;
    goto LABEL_31;
  }
  uint8_t v22 = strlen(0);
  uint64_t v23 = TXTRecordSetValue(v12 + 3, "srcvers", v22, 0);
  if (v23)
  {
    uint64_t v26 = v23;
    goto LABEL_31;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *((void *)&v12[4].ForceNaturalAlignment + 1) = Mutable;
  if (!Mutable)
  {
LABEL_32:
    APSLogErrorAt();
    uint64_t v26 = 4294960568;
    goto LABEL_19;
  }
  *((void *)&v12[5].ForceNaturalAlignment + 1) = a4;
  v12[6].ForceNaturalAlignment = a5;
  if (a6)
  {
    CFStringRef Value = CFDictionaryGetValue(a6, @"EventRecorder");
    *((void *)&v12[6].ForceNaturalAlignment + 1) = Value;
    if (Value) {
      CFRetain(Value);
    }
  }
  uint64_t v26 = 0;
  *a7 = v12;
  int v12 = 0;
LABEL_19:
  free(0);
  free(0);
  if (v12) {
    CFRelease(v12);
  }
  return v26;
}

uint64_t _APCarPlayControlServerControl(uint64_t a1, int a2, CFTypeRef cf1, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (CFEqual(cf1, @"startServer"))
  {
    int v9 = *(NSObject **)(a1 + 16);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 0x40000000;
    v13[2] = ___APCarPlayControlServerControl_block_invoke;
    v13[3] = &__block_descriptor_tmp_32_0;
    v13[4] = a6;
    uint64_t v10 = v13;
  }
  else
  {
    if (!CFEqual(cf1, @"stopServer")) {
      return 4294960582;
    }
    int v9 = *(NSObject **)(a1 + 16);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 0x40000000;
    _OWORD v12[2] = ___APCarPlayControlServerControl_block_invoke_2_33;
    v12[3] = &__block_descriptor_tmp_37_0;
    v12[4] = a6;
    uint64_t v10 = v12;
  }
  dispatch_async(v9, v10);
  return 0;
}

uint64_t _APCarPlayControlServerHandleMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v10 = 0;
  if (!*(void *)(a3 + 88))
  {
    APSLogErrorAt();
    return 503;
  }
  if (!HTTPConnectionGetNextURLSegmentEx()) {
    return v10;
  }
  if (strnicmpx()) {
    goto LABEL_24;
  }
  if (!HTTPConnectionGetNextURLSegmentEx()) {
    return v10;
  }
  if (strnicmpx())
  {
LABEL_24:
    if (gLogCategory_CarPlayControlServer <= 60
      && (gLogCategory_CarPlayControlServer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v6 = 404;
    goto LABEL_11;
  }
  if (!HTTPConnectionGetNextURLSegmentEx()) {
    return v10;
  }
  uint64_t v9 = *(void *)(a2 + 8272) + *(void *)(a2 + 8264);
  if (HTTPScanFHeaderValue() != 1) {
    return 456;
  }
  unsigned int v10 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, void))(a3 + 88))(a3, 0, 0, v9, *(void *)(a3 + 96));
  if (v10) {
    uint64_t v6 = 400;
  }
  else {
    uint64_t v6 = 200;
  }
LABEL_11:
  unsigned int v10 = MEMORY[0x1D25E6130](a1, v6, v10, 0, 0, 0);
  if (v10) {
    APSLogErrorAt();
  }
  return v10;
}

uint64_t APCarPlayControlServerAddInterface(uint64_t a1, CFStringRef theString)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  int v10 = 0;
  if (!CFStringGetCString(theString, buffer, 17, 0x600u))
  {
    uint64_t v7 = 4294960591;
LABEL_9:
    APSLogErrorAt();
    APSLogErrorAt();
    return v7;
  }
  SocketGetInterfaceInfo();
  uint64_t v4 = BonjourAdvertiserCreate();
  if (v4)
  {
    uint64_t v7 = v4;
    goto LABEL_9;
  }
  BonjourAdvertiserSetDispatchQueue();
  BonjourAdvertiserSetInterfaceName();
  BonjourAdvertiserSetFlags();
  BonjourAdvertiserSetServiceType();
  BonjourAdvertiserSetDomain();
  TXTRecordGetBytesPtr((const TXTRecordRef *)(a1 + 48));
  TXTRecordGetLength((const TXTRecordRef *)(a1 + 48));
  BonjourAdvertiserSetTXTRecord();
  CFTypeRef v5 = cf;
  CFRetain(cf);
  CFRetain(theString);
  uint64_t v6 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __APCarPlayControlServerAddInterface_block_invoke;
  block[3] = &__block_descriptor_tmp_15;
  block[4] = a1;
  void block[5] = v5;
  void block[6] = theString;
  dispatch_async(v6, block);
  if (v5) {
    CFRelease(v5);
  }
  return 0;
}

void __APCarPlayControlServerAddInterface_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 16))
  {
    uint64_t v3 = *(void *)(v2 + 64);
    *(void *)(v2 + 64) = v3 + 1;
    uint64_t v4 = MEMORY[0x1E4F14500];
    if (!v3)
    {
      CFObjectSetProperty();
      if (gLogCategory_CarPlayControlServer <= 50
        && (gLogCategory_CarPlayControlServer != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (*(void *)(*(void *)(a1 + 32) + 104)) {
        APSEventRecorderRecordEvent();
      }
      uint64_t v5 = LogCategoryCopyOSLogHandle();
      uint64_t v6 = (void *)v5;
      if (v5) {
        uint64_t v7 = v5;
      }
      else {
        uint64_t v7 = v4;
      }
      if (os_signpost_enabled(v7))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1D087F000, v7, OS_SIGNPOST_EVENT, 0x2B8D07D8uLL, "AP_SIGNPOST_CAR_CONTROLSERVER_STARTEDSERVER", "", buf, 2u);
      }
      if (v6) {
        os_release(v6);
      }
    }
    if (*(unsigned char *)(*(void *)(a1 + 32) + 80))
    {
      BonjourAdvertiserSetPort();
      BonjourAdvertiserStart();
      if (*(void *)(*(void *)(a1 + 32) + 104)) {
        APSEventRecorderRecordEvent();
      }
      uint64_t v8 = LogCategoryCopyOSLogHandle();
      uint64_t v9 = (void *)v8;
      if (v8) {
        uint64_t v4 = v8;
      }
      if (os_signpost_enabled(v4))
      {
        *(_WORD *)int v10 = 0;
        _os_signpost_emit_with_name_impl(&dword_1D087F000, v4, OS_SIGNPOST_EVENT, 0x2B8D07DCuLL, "AP_SIGNPOST_CAR_CONTROLSERVER_STARTEDADVERTISE", "", v10, 2u);
      }
      if (v9) {
        os_release(v9);
      }
      if (gLogCategory_CarPlayControlServer <= 40
        && (gLogCategory_CarPlayControlServer != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 72), *(const void **)(a1 + 48), *(const void **)(a1 + 40));
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t APCarPlayControlServerRemoveInterface(uint64_t a1, CFTypeRef cf)
{
  CFRetain(cf);
  uint64_t v4 = *(NSObject **)(a1 + 24);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  void v6[2] = __APCarPlayControlServerRemoveInterface_block_invoke;
  v6[3] = &__block_descriptor_tmp_21_2;
  v6[4] = a1;
  v6[5] = cf;
  dispatch_async(v4, v6);
  return 0;
}

void __APCarPlayControlServerRemoveInterface_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 16) && CFDictionaryGetValue(*(CFDictionaryRef *)(v2 + 72), *(const void **)(a1 + 40)))
  {
    if (*(unsigned char *)(*(void *)(a1 + 32) + 80))
    {
      BonjourAdvertiserStop();
      if (gLogCategory_CarPlayControlServer <= 40
        && (gLogCategory_CarPlayControlServer != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(v3 + 64) - 1;
    *(void *)(v3 + 64) = v4;
    if (!v4)
    {
      CFObjectSetProperty();
      if (gLogCategory_CarPlayControlServer <= 50
        && (gLogCategory_CarPlayControlServer != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 72), *(const void **)(a1 + 40));
  }
  uint64_t v5 = *(const void **)(a1 + 40);
  CFRelease(v5);
}

uint64_t APCarPlayControlServerInjectCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __APCarPlayControlServerInjectCommand_block_invoke;
  block[3] = &__block_descriptor_tmp_22_0;
  block[4] = a1;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_async(v3, block);
  return 0;
}

uint64_t __APCarPlayControlServerInjectCommand_block_invoke(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = (const char *)a1[6];
  size_t v4 = strlen(v3);
  uint64_t v5 = *(void *)(v1 + 96);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, const char *, size_t, uint64_t))(v1 + 88);
  return v6(v1, v2, v3, v4, v5);
}

uint64_t APTransportConnectionUDPCreate(uint64_t a1, const void *a2, int a3, int a4, uint64_t a5, void *a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a6)
  {
    APSLogErrorAt();
    unsigned int v16 = -72322;
LABEL_22:
    APSSignalErrorAt();
    return v16;
  }
  APTransportConnectionGetClassID();
  unsigned int v16 = CMDerivedObjectCreate();
  if (v16)
  {
    APSLogErrorAt();
    return v16;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 88) = CFDictionaryGetInt64() != 0;
  *(_DWORD *)(DerivedStorage + 112) = CFDictionaryGetInt64();
  CFUUIDGetTypeID();
  TypedCFStringRef Value = (const void *)CFDictionaryGetTypedValue();
  *(void *)(DerivedStorage + 120) = TypedValue;
  if (TypedValue) {
    CFRetain(TypedValue);
  }
  *(void *)(DerivedStorage + 16) = a2;
  if (a2) {
    CFRetain(a2);
  }
  *(_DWORD *)(DerivedStorage + 108) = a3;
  *(void *)(DerivedStorage + 232) = -1;
  SNPrintF();
  if (a4) {
    uint64_t v12 = FigDispatchQueueCreateWithPriority();
  }
  else {
    uint64_t v12 = (uint64_t)dispatch_queue_create(label, 0);
  }
  *(void *)(DerivedStorage + 8) = v12;
  if (!v12
    || (SNPrintF(), uint64_t v13 = FigDispatchQueueCreateWithPriority(), (*(void *)(DerivedStorage + 24) = v13) == 0)
    || (*(_DWORD *)(DerivedStorage + 56) = 0,
        uint64_t v14 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
        (*(void *)(DerivedStorage + 128) = v14) == 0))
  {
    APSLogErrorAt();
    unsigned int v16 = -72323;
    goto LABEL_22;
  }
  if (gLogCategory_APTransportConnectionUDP <= 50
    && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APTTrafficMetricsCreate(&gLogCategory_APTransportConnectionUDP, 0, (uint64_t *)(DerivedStorage + 264), 0);
  *a6 = 0;
  return v16;
}

uint64_t udpconnection_Invalidate_0(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)udpconnection_invalidate);
  return 0;
}

void udpconnection_Finalize_0(void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportConnectionUDP <= 50
    && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  udpconnection_invalidateInternal_0(a1, 0);
  uint64_t v3 = (const void *)DerivedStorage[33];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[33] = 0;
  }
  size_t v4 = (const void *)DerivedStorage[12];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[12] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[2];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[2] = 0;
  }
  uint64_t v6 = (const void *)DerivedStorage[15];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[15] = 0;
  }
  uint64_t v7 = DerivedStorage[3];
  if (v7)
  {
    dispatch_release(v7);
    DerivedStorage[3] = 0;
  }
  uint64_t v8 = DerivedStorage[6];
  if (v8)
  {
    dispatch_release(v8);
    DerivedStorage[6] = 0;
  }
  uint64_t v9 = DerivedStorage[1];
  if (v9)
  {
    dispatch_release(v9);
    DerivedStorage[1] = 0;
  }
  int v10 = (const void *)DerivedStorage[16];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[16] = 0;
  }
}

__CFString *udpconnection_CopyDebugDescription_0(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTransportConnectionUDP %p '%@'>", a1, *(void *)(DerivedStorage + 16));
  return Mutable;
}

uint64_t udpconnection_CopyProperty_0()
{
  CMBaseObjectGetDerivedStorage();
  return FigDispatchSyncCopyPropertyImplementation();
}

uint64_t udpconnection_SetProperty_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  return MEMORY[0x1F40DD378](v6, udpconnection_setPropertyInternal, a1, a2, a3);
}

void udpconnection_invalidate(void *a1)
{
}

void udpconnection_invalidateInternal_0(void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v5 = DerivedStorage;
    APTTrafficMetricsConnectionClosed(*(void *)(DerivedStorage + 264));
    if (gLogCategory_APTransportConnectionUDP <= 30
      && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(unsigned char *)uint64_t v5 = 1;
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    uint64_t v7 = v6;
    if (*(unsigned char *)(v6 + 88))
    {
      uint64_t v8 = *(NSObject **)(v6 + 248);
      if (v8)
      {
        dispatch_source_cancel(*(dispatch_source_t *)(v6 + 248));
        dispatch_release(v8);
        *(void *)(v7 + 248) = 0;
      }
      *(_DWORD *)(v7 + 232) = -1;
      uint64_t v9 = *(NSObject **)(v7 + 256);
      if (v9)
      {
        dispatch_source_cancel(*(dispatch_source_t *)(v7 + 256));
        dispatch_release(v9);
        *(void *)(v7 + 256) = 0;
      }
      *(_DWORD *)(v7 + 236) = -1;
    }
    else
    {
      int v10 = *(_DWORD *)(v6 + 232);
      if ((v10 & 0x80000000) == 0)
      {
        if (close(v10) && *__error()) {
          __error();
        }
        *(_DWORD *)(v7 + 232) = -1;
      }
    }
    *(_DWORD *)(v7 + 56) = 6;
    if (a2)
    {
      unint64_t v11 = *(NSObject **)(v5 + 24);
      dispatch_sync_f(v11, a1, (dispatch_function_t)udpconnection_clearCallbackState_0);
    }
    else
    {
      udpconnection_clearCallbackState_0();
    }
  }
}

void udpconnection_clearCallbackState_0()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[4] = 0;
  DerivedStorage[5] = 0;
  uint64_t v1 = DerivedStorage[6];
  if (v1)
  {
    dispatch_release(v1);
    DerivedStorage[6] = 0;
  }
}

uint64_t udpconnection_copyPropertyInternal(uint64_t a1, const void *a2, const __CFAllocator *a3, CFNumberRef *a4)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    APSLogErrorAt();
    uint64_t v9 = 4294954511;
    APSSignalErrorAt();
    return v9;
  }
  if (!CFEqual(a2, @"LocalNetworkPort")) {
    return 4294954512;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    APSLogErrorAt();
    uint64_t v9 = 4294954511;
    APSSignalErrorAt();
    goto LABEL_8;
  }
  if (!*(unsigned char *)(DerivedStorage + 88) || !*(_DWORD *)(DerivedStorage + 240))
  {
    uint64_t v9 = 4294954509;
LABEL_8:
    APSLogErrorAt();
    return v9;
  }
  CFNumberRef v8 = CFNumberCreate(a3, kCFNumberIntType, (const void *)(DerivedStorage + 240));
  uint64_t v9 = 0;
  *a4 = v8;
  return v9;
}

uint64_t udpconnection_setPropertyInternal(uint64_t a1, const void *a2, __CFString *a3)
{
  unsigned int v14 = 0;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    APSLogErrorAt();
    unsigned int v14 = -12785;
    goto LABEL_11;
  }
  uint64_t v6 = DerivedStorage;
  if (CFEqual(a2, @"PackageType"))
  {
    if (@"RTCP" == a3 || a3 && @"RTCP" && CFEqual(a3, @"RTCP"))
    {
      *((void *)v6 + 8) = APTransportPackageRTCPCreateWithBBuf;
      *((void *)v6 + 9) = APTransportPackageRTCPCreate;
      uint64_t v7 = APTransportPackageRTCPCreateWithMessageSize;
LABEL_17:
      *((void *)v6 + 10) = v7;
      return v14;
    }
    if (@"RTP" == a3 || a3 && @"RTP" && CFEqual(a3, @"RTP"))
    {
      *((void *)v6 + 8) = APTransportPackageRTPCreateWithBBuf;
      *((void *)v6 + 9) = APTransportPackageRTPCreate;
      uint64_t v7 = APTransportPackageRTPCreateWithMessageSize;
      goto LABEL_17;
    }
    if (@"LowPowerKeepAlive" == a3 || a3 && @"LowPowerKeepAlive" && CFEqual(a3, @"LowPowerKeepAlive"))
    {
      *((void *)v6 + 8) = APTPackageLowPowerKeepAliveCreateWithBBuf;
      *((void *)v6 + 9) = APTPackageLowPowerKeepAliveCreate;
      *((void *)v6 + 10) = 0;
      return v14;
    }
    if (gLogCategory_APTransportConnectionUDP <= 90
      && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return -12780;
  }
  if (CFEqual(a2, @"LowPowerOffloadBBuf"))
  {
    if (a3)
    {
      CFTypeID v9 = CFGetTypeID(a3);
      if (v9 == CMBlockBufferGetTypeID() && CMBlockBufferGetDataLength((CMBlockBufferRef)a3) < 0x21)
      {
        int v10 = (const void *)*((void *)v6 + 12);
        *((void *)v6 + 12) = a3;
        CFRetain(a3);
        if (v10) {
          CFRelease(v10);
        }
        unsigned int v14 = udpconnection_setupKeepAliveOffload();
        if (v14) {
          APSLogErrorAt();
        }
        return v14;
      }
    }
    goto LABEL_10;
  }
  if (CFEqual(a2, @"LowPowerOffloadInterval"))
  {
    *((_DWORD *)v6 + 26) = CFGetInt64();
    return v14;
  }
  if (CFEqual(a2, @"RemoteNetworkIPAddress"))
  {
    if (a3)
    {
      CFTypeID v11 = CFGetTypeID(a3);
      if (v11 == APSNetworkAddressGetTypeID())
      {
        APSNetworkAddressGetSocketAddr();
        *((_OWORD *)v6 + 12) = *(_OWORD *)v13;
        *(_OWORD *)(v6 + 204) = *(_OWORD *)&v13[12];
        SockAddrSetPort();
        return v14;
      }
    }
LABEL_10:
    APSLogErrorAt();
    unsigned int v14 = -72322;
LABEL_11:
    APSSignalErrorAt();
    return v14;
  }
  if (!CFEqual(a2, @"RemoteNetworkPort"))
  {
    if (CFEqual(a2, @"BoundInterfaceIndex"))
    {
      if (*((_DWORD *)v6 + 58) == -1)
      {
        *((_DWORD *)v6 + 56) = CFGetInt64();
        return v14;
      }
      APSLogErrorAt();
      if (gLogCategory_APTransportConnectionUDP <= 90
        && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return -72322;
    }
    else
    {
      return -12784;
    }
  }
  *((_DWORD *)v6 + 55) = CFGetInt64();
  SockAddrSetPort();
  if (gLogCategory_APTransportConnectionUDP <= 50
    && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v14;
}

uint64_t udpconnection_setupKeepAliveOffload()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 96);
  if (!v1 || (*(_DWORD *)(DerivedStorage + 232) & 0x80000000) != 0) {
    return 0;
  }
  if (*(int *)(DerivedStorage + 104) <= 0)
  {
    uint64_t v5 = 4294894974;
    APSLogErrorAt();
    APSSignalErrorAt();
    return v5;
  }
  int v9 = 0;
  memset(v8, 0, sizeof(v8));
  DataCFIndex Length = CMBlockBufferGetDataLength(v1);
  char v3 = DataLength;
  uint64_t v4 = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(DerivedStorage + 96), 0, DataLength, v8);
  if (v4)
  {
    uint64_t v5 = v4;
    goto LABEL_12;
  }
  BYTE2(v9) = v3;
  LOWORD(v9) = *(_DWORD *)(DerivedStorage + 104);
  HIBYTE(v9) = 1;
  if (!setsockopt(*(_DWORD *)(DerivedStorage + 232), 17, 2, v8, 0x24u)) {
    goto LABEL_8;
  }
  if (!*__error())
  {
    uint64_t v5 = 4294960596;
    goto LABEL_12;
  }
  uint64_t v5 = *__error();
  if (v5)
  {
LABEL_12:
    APSLogErrorAt();
    return v5;
  }
LABEL_8:
  uint64_t v6 = *(const void **)(DerivedStorage + 96);
  if (!v6) {
    return 0;
  }
  CFRelease(v6);
  uint64_t v5 = 0;
  *(void *)(DerivedStorage + 96) = 0;
  return v5;
}

uint64_t udpconnection_DumpHierarchy_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 56) != 5)
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, a3, "Connection:[%{ptr}] (UDP) %''@ (Not Connected) Parent:[%{ptr}]\n", a1, a4, a2);
    if (!v15) {
      return v15;
    }
LABEL_10:
    APSLogErrorAt();
    return v15;
  }
  uint64_t v11 = DerivedStorage;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, a3, "Connection:[%{ptr}] (UDP) %''@ Remote:%##a%?s%?lu Parent:[%{ptr}]\n", a1, a4, DerivedStorage + 192, *(_DWORD *)(DerivedStorage + 224) != 0, " IDX:", *(_DWORD *)(DerivedStorage + 224) != 0, *(unsigned int *)(DerivedStorage + 224), a2);
  if (v12)
  {
    uint64_t v15 = v12;
    goto LABEL_10;
  }
  uint64_t v13 = a3 + 1;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, v13, "Listener (IPv4) Local:%##a Parent:[%{ptr}]\n", v11 + 136, a1);
  if (v14)
  {
    uint64_t v15 = v14;
    goto LABEL_10;
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, v13, "Listener (IPv6) Local:%##a Parent:[%{ptr}]\n", v11 + 164, a1);
  if (v15) {
    goto LABEL_10;
  }
  return v15;
}

uint64_t udpconnection_Resume_0(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)udpconnection_resumeInternal);
  return 0;
}

uint64_t udpconnection_AddEventCallback_0(const void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    uint64_t v8 = 4294894974;
LABEL_11:
    APSLogErrorAt();
    return v8;
  }
  if (!a3)
  {
    uint64_t v8 = 4294894974;
    goto LABEL_11;
  }
  if (!a4)
  {
    uint64_t v8 = 4294894974;
    goto LABEL_11;
  }
  dispatch_retain(a4);
  if (a1) {
    CFRetain(a1);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t udpconnection_RemoveEventCallback_0()
{
  return APSDispatchSyncTask();
}

uint64_t udpconnection_AcquirePackage_0()
{
  return APSDispatchSyncTask();
}

uint64_t udpconnection_AcquirePackageWithMessageSize_0()
{
  return APSDispatchSyncTask();
}

uint64_t udpconnection_RelinquishPackage_0(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

uint64_t udpconnection_SendPackage_0(const void *a1, const void *a2)
{
  return 0;
}

void udpconnection_resumeInternal(const void *a1)
{
  valuePtr[0] = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportConnectionUDP <= 50
    && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(void *)(DerivedStorage + 64) || !*(void *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    int v12 = -6709;
LABEL_29:
    valuePtr[0] = v12;
    goto LABEL_30;
  }
  if (*(unsigned char *)(DerivedStorage + 88))
  {
    CMBaseObjectGetDerivedStorage();
    valuePtr[1] = 0;
    *(_DWORD *)&handle.byte0 = -1;
    socklen_t v20 = -1;
    int v3 = ServerSocketPairOpen();
    if (v3)
    {
      int v11 = v3;
      APSLogErrorAt();
    }
    else
    {
      int v11 = 0;
    }
    free(0);
    free(0);
    valuePtr[0] = v11;
    if (!v11)
    {
LABEL_23:
      *(_DWORD *)(DerivedStorage + 56) = 5;
      APTTrafficMetricsConnectionFormed(*(void *)(DerivedStorage + 264));
      udpconnection_callEventCallback_0(a1, 5, 0);
      goto LABEL_24;
    }
    goto LABEL_67;
  }
  if (!*(unsigned char *)(DerivedStorage + 193) || !*(_DWORD *)(DerivedStorage + 220))
  {
    if (gLogCategory_APTransportConnectionUDP <= 90
      && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    int v12 = -72320;
    goto LABEL_29;
  }
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  *(void *)&v21.sa_len = 0;
  *(void *)&v21.sa_data[6] = 0;
  int v23 = 0;
  uint64_t v22 = 0;
  socklen_t v20 = 0;
  int v5 = socket(*(unsigned __int8 *)(v4 + 193), 2, 17);
  if ((v5 & 0x80000000) == 0) {
    goto LABEL_15;
  }
  if (!*__error())
  {
    int v6 = -6700;
    goto LABEL_41;
  }
  int v6 = *__error();
  if (v6)
  {
LABEL_41:
    APSLogErrorAt();
    goto LABEL_66;
  }
LABEL_15:
  SocketSetNonBlocking();
  if (*(_DWORD *)(v4 + 224))
  {
    int v7 = *(unsigned __int8 *)(v4 + 193);
    if (v7 == 2)
    {
      int v8 = v5;
      int v9 = 0;
      int v10 = 25;
LABEL_33:
      int v6 = setsockopt(v8, v9, v10, (const void *)(v4 + 224), 4u);
      if (v6) {
        goto LABEL_72;
      }
      goto LABEL_34;
    }
    if (v7 == 30)
    {
      int v8 = v5;
      int v9 = 41;
      int v10 = 125;
      goto LABEL_33;
    }
  }
LABEL_34:
  int v14 = *(_DWORD *)(v4 + 108);
  if ((v14 & 0xB) != 0)
  {
    SocketSetP2P();
    int v14 = *(_DWORD *)(v4 + 108);
  }
  if ((v14 & 0x10) != 0)
  {
    if (gLogCategory_APTransportConnectionUDP <= 30
      && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_DWORD *)&handle.byte0 = 4;
    setsockopt(v5, 0xFFFF, 4225, &handle, 4u);
  }
  SocketSetQoS();
  CFUUIDRef v15 = *(const __CFUUID **)(v4 + 120);
  if (v15)
  {
    CFUUIDBytes handle = CFUUIDGetUUIDBytes(v15);
    setsockopt(v5, 0xFFFF, 4360, &handle, 0x10u);
  }
  socklen_t Size = SockAddrGetSize();
  if (!connect(v5, (const sockaddr *)(v4 + 192), Size)) {
    goto LABEL_49;
  }
  if (*__error())
  {
    int v6 = *__error();
    if (!v6)
    {
LABEL_49:
      socklen_t v20 = 28;
      int v17 = getsockname(v5, &v21, &v20);
      if (!v17)
      {
        if (gLogCategory_APTransportConnectionUDP <= 50
          && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        *(_DWORD *)(v4 + 232) = v5;
        valuePtr[0] = udpconnection_setupKeepAliveOffload();
        if (!valuePtr[0]) {
          goto LABEL_23;
        }
        goto LABEL_67;
      }
      int v6 = v17;
LABEL_72:
      APSLogErrorAt();
      if (v5 < 0) {
        goto LABEL_66;
      }
LABEL_63:
      if (close(v5) && *__error()) {
        __error();
      }
      goto LABEL_66;
    }
  }
  else
  {
    int v6 = -6700;
  }
  APSLogErrorAt();
  if (gLogCategory_APTransportConnectionUDP <= 90
    && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_63;
    }
  }
  else if ((v5 & 0x80000000) == 0)
  {
    goto LABEL_63;
  }
LABEL_66:
  valuePtr[0] = v6;
LABEL_67:
  APSLogErrorAt();
LABEL_30:
  *(_DWORD *)(DerivedStorage + 56) = 4;
  CFNumberRef v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, valuePtr);
  udpconnection_callEventCallback_0(a1, 4, v13);
  if (v13) {
    CFRelease(v13);
  }
LABEL_24:
  if (a1) {
    CFRelease(a1);
  }
}

unsigned char *udpconnection_callEventCallback_0(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    if (a3) {
      CFRetain(a3);
    }
    if (a1) {
      CFRetain(a1);
    }
    return (unsigned char *)APSDispatchAsyncFHelper();
  }
  return result;
}

void udpconnection_sourceEventHandlerCallback(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  CFTypeRef cf = 0;
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t v4 = (CFAllocatorRef *)MEMORY[0x1E4F1CF90];
  if (!v2)
  {
    APSLogErrorAt();
    APSSignalErrorAt();
    int v10 = 0;
    int v5 = 0;
    goto LABEL_12;
  }
  int v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5)
  {
    int v10 = 0;
    goto LABEL_12;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_9;
  }
  uint64_t v7 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 56) != 5) {
    goto LABEL_9;
  }
  CFAllocatorRef v8 = *v4;
  int v9 = CFAllocatorAllocate(*v4, 1472, 0);
  if (!v9)
  {
    APSLogErrorAt();
    APSSignalErrorAt();
LABEL_9:
    int v10 = 0;
    goto LABEL_10;
  }
  int v10 = v9;
  ssize_t v11 = recvfrom(v3, v9, 0x5C0uLL, 0, 0, 0);
  uint64_t v12 = *MEMORY[0x1E4F1CF80];
  if (!CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v10, 0x5C0uLL, v8, 0, 0, v11, 0, &blockBufferOut))
  {
    if ((*(unsigned int (**)(uint64_t, CMBlockBufferRef, CFTypeRef *))(v7 + 64))(v12, blockBufferOut, &cf)) {
      APSLogErrorAt();
    }
    else {
      udpconnection_callEventCallback_0(v5, 7, cf);
    }
    goto LABEL_9;
  }
  APSLogErrorAt();
LABEL_10:
  if (cf) {
    CFRelease(cf);
  }
LABEL_12:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v10) {
    CFAllocatorDeallocate(*v4, v10);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void udpconnection_sourceCanceledCallback(CFTypeRef *a1)
{
  int v2 = *((_DWORD *)a1 + 2);
  if ((v2 & 0x80000000) == 0)
  {
    if (close(v2) && *__error()) {
      __error();
    }
    *((_DWORD *)a1 + 2) = -1;
  }
  if (*a1) {
    CFRelease(*a1);
  }
  free(a1);
}

void udpconnection_deferCallEventCallback_0(const void **a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 40)) {
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), a1, (dispatch_function_t)udpconnection_callEventCallbackOnEventQueue_0);
  }
  int v3 = a1[2];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    CFRelease(v4);
  }
}

uint64_t udpconnection_callEventCallbackOnEventQueue_0(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(DerivedStorage + 32);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(DerivedStorage + 40);
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  return v5(v6, v3, v4);
}

void udpconnection_addEventCallbackInternal_0(const void **a1)
{
  udpconnection_setEventCallback_0((uint64_t)a1);
  int v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *a1;
  if (*a1)
  {
    CFRelease(v3);
  }
}

uint64_t udpconnection_setEventCallback_0(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)(DerivedStorage + 32) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(NSObject **)(DerivedStorage + 48);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(DerivedStorage + 48) = 0;
  }
  uint64_t v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    *(void *)(DerivedStorage + 48) = v4;
    dispatch_retain(v4);
  }
  return 0;
}

uint64_t udpconnection_acquirePackageInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    APSLogErrorAt();
    uint64_t v6 = 4294954511;
    APSSignalErrorAt();
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(CFAllocatorRef, void))(DerivedStorage + 72);
    CFAllocatorRef v4 = CFGetAllocator(*(CFTypeRef *)a1);
    uint64_t v5 = v3(v4, *(void *)(a1 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      APSLogErrorAt();
    }
    else
    {
      if (gLogCategory_APTransportConnectionUDP <= 30
        && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return 0;
    }
  }
  return v6;
}

uint64_t udpconnection_acquirePackageWithMessageSizeInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    APSLogErrorAt();
    uint64_t v6 = 4294954511;
    APSSignalErrorAt();
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(CFAllocatorRef, void, void))(DerivedStorage + 80);
    if (v3)
    {
      CFAllocatorRef v4 = CFGetAllocator(*(CFTypeRef *)a1);
      uint64_t v5 = v3(v4, *(void *)(a1 + 8), *(void *)(a1 + 16));
      if (v5)
      {
        uint64_t v6 = v5;
        APSLogErrorAt();
      }
      else
      {
        if (gLogCategory_APTransportConnectionUDP <= 30
          && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        return 0;
      }
    }
    else
    {
      APSLogErrorAt();
      return 4294894969;
    }
  }
  return v6;
}

void udpconnection_sendPackageInternal_0(const void **a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v18 = 0;
  kdebug_trace();
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_13;
  }
  if (*(_DWORD *)(DerivedStorage + 56) != 5)
  {
LABEL_14:
    CFAllocatorRef v8 = 0;
    goto LABEL_27;
  }
  uint64_t v3 = a1[1];
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v5 = v4 ? v4 : 0;
  uint64_t v6 = *(uint64_t (**)(const void *))(v5 + 64);
  if (!v6 || (uint64_t v7 = v6(v3)) == 0)
  {
LABEL_13:
    APSLogErrorAt();
    APSSignalErrorAt();
    goto LABEL_14;
  }
  CFAllocatorRef v8 = (OpaqueCMBlockBuffer *)v7;
  if (FigMakeIOVecArrayWithBlockBuffer())
  {
    APSLogErrorAt();
LABEL_27:
    udpconnection_callEventCallback_0(*a1, 8, a1[1]);
    if (!v8) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  CMBlockBufferGetDataLength(v8);
  APTTrafficMetricsSendStarted(*(void *)(DerivedStorage + 264));
  if (!*(unsigned char *)(DerivedStorage + 88))
  {
    kdebug_trace();
    ssize_t v12 = writev(*(_DWORD *)(DerivedStorage + 232), &v19, v18);
    if (v12 != CMBlockBufferGetDataLength(v8))
    {
      if (*__error())
      {
        int v13 = *__error();
        if (!v13) {
          goto LABEL_24;
        }
      }
      else
      {
        int v13 = -6700;
      }
      if (gLogCategory_APTransportConnectionUDP <= 90
        && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  memset(&v17.msg_namelen, 0, 24);
  int v9 = *(unsigned __int8 *)(DerivedStorage + 193);
  if (v9 == 30)
  {
    int v10 = (int *)(DerivedStorage + 236);
    socklen_t v11 = 28;
  }
  else
  {
    if (v9 != 2)
    {
      int v13 = 0;
      goto LABEL_26;
    }
    int v10 = (int *)(DerivedStorage + 232);
    socklen_t v11 = 16;
  }
  int v14 = *v10;
  v17.msg_name = (void *)(DerivedStorage + 192);
  v17.msg_namelen = v11;
  v17.msg_iov = &v19;
  v17.msg_iovlen = v18;
  v17.msg_control = 0;
  *(void *)&v17.msg_controllen = 0;
  ssize_t v15 = sendmsg(v14, &v17, 0);
  if (v15 == CMBlockBufferGetDataLength(v8))
  {
LABEL_23:
    int v13 = 0;
LABEL_24:
    APTTrafficMetricsSendFinished(*(void *)(DerivedStorage + 264));
    goto LABEL_26;
  }
  if (*__error())
  {
    int v13 = *__error();
    if (!v13) {
      goto LABEL_23;
    }
  }
  else
  {
    int v13 = -6700;
  }
  if (gLogCategory_APTransportConnectionUDP <= 90
    && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_26:
  if (v13) {
    goto LABEL_27;
  }
LABEL_28:
  CFRelease(v8);
LABEL_29:
  unsigned int v16 = a1[1];
  if (v16) {
    CFRelease(v16);
  }
  if (*a1) {
    CFRelease(*a1);
  }
}

uint64_t APTransportPackageAPAPCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  return apapPackage_create(a1, 0, 0, a2);
}

uint64_t apapPackage_create(const __CFAllocator *a1, int a2, OpaqueCMBlockBuffer *a3, CFTypeRef *a4)
{
  memset(dataLength, 0, sizeof(dataLength));
  if (!a4)
  {
    uint64_t v15 = 4294894936;
    goto LABEL_28;
  }
  APTransportPackageGetClassID();
  uint64_t v8 = CMDerivedObjectCreate();
  if (v8)
  {
    uint64_t v15 = v8;
    goto LABEL_28;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)uint64_t DerivedStorage = a2;
  if (a2) {
    int v10 = 1634754914;
  }
  else {
    int v10 = 1634754928;
  }
  *(_DWORD *)(DerivedStorage + 4) = v10;
  if (a3)
  {
    uint64_t v11 = DerivedStorage;
    if (a2)
    {
      uint64_t v12 = APTransportPackageBufferedAPAPGetPayloadSize(a3, dataLength);
      if (v12)
      {
        uint64_t v15 = v12;
        goto LABEL_28;
      }
      size_t v13 = CMBlockBufferGetDataLength(a3);
      if (v13 != dataLength[0] + 4)
      {
        uint64_t v15 = 4294894936;
        goto LABEL_28;
      }
      if (dataLength[0])
      {
        uint64_t v14 = CMBlockBufferCreateWithBufferReference(a1, a3, 4uLL, dataLength[0], 0, (CMBlockBufferRef *)(v11 + 8));
        if (v14)
        {
          uint64_t v15 = v14;
LABEL_28:
          APSLogErrorAt();
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t Empty = CMBlockBufferCreateEmpty(a1, 0, 0, (CMBlockBufferRef *)(v11 + 8));
        if (Empty)
        {
          uint64_t v15 = Empty;
          goto LABEL_28;
        }
      }
    }
    else
    {
      *(void *)(DerivedStorage + 8) = CFRetain(a3);
    }
  }
  if (gLogCategory_APTransportPackageAPAP <= 30
    && (gLogCategory_APTransportPackageAPAP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v15 = 0;
  *a4 = CFRetain(*(CFTypeRef *)&dataLength[1]);
LABEL_20:
  if (*(void *)&dataLength[1]) {
    CFRelease(*(CFTypeRef *)&dataLength[1]);
  }
  return v15;
}

uint64_t APTransportPackageBufferedAPAPCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  return apapPackage_create(a1, 1, 0, a2);
}

uint64_t APTransportPackageBufferedAPAPCreateWithBBuf(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, CFTypeRef *a3)
{
  return apapPackage_create(a1, 1, a2, a3);
}

uint64_t APTransportPackageBufferedAPAPGetHeaderSize(_DWORD *a1)
{
  if (a1)
  {
    uint64_t result = 0;
    *a1 = 4;
  }
  else
  {
    APSLogErrorAt();
    return 4294894936;
  }
  return result;
}

uint64_t APTransportPackageBufferedAPAPGetPayloadSize(OpaqueCMBlockBuffer *a1, _DWORD *a2)
{
  unsigned int destination = 0;
  if (!a1)
  {
    uint64_t v6 = 4294894936;
LABEL_13:
    APSLogErrorAt();
    return v6;
  }
  if (!a2)
  {
    uint64_t v6 = 4294894936;
    goto LABEL_13;
  }
  if (CMBlockBufferGetDataLength(a1) <= 3)
  {
    uint64_t v6 = 4294894936;
    goto LABEL_13;
  }
  uint64_t v4 = CMBlockBufferCopyDataBytes(a1, 0, 4uLL, &destination);
  if (v4)
  {
    uint64_t v6 = v4;
    goto LABEL_13;
  }
  unsigned int v5 = bswap32(destination);
  if (v5 <= 3)
  {
    uint64_t v6 = 4294894936;
    goto LABEL_13;
  }
  uint64_t v6 = 0;
  *a2 = v5 - 4;
  return v6;
}

uint64_t APTransportPackageBufferedAPAPGetMaxPayloadSize(void *a1)
{
  if (a1)
  {
    uint64_t result = 0;
    *a1 = 4294967291;
  }
  else
  {
    APSLogErrorAt();
    return 4294894936;
  }
  return result;
}

void apapPackage_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportPackageAPAP <= 30
    && (gLogCategory_APTransportPackageAPAP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

CFMutableStringRef apapPackage_CopyDebugDescription()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  int v2 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 8);
  if (v2)
  {
    CMBlockBufferGetDataLength(v2);
    if (apapPackage_isMessageTypeSupported()) {
      APSAPAPBBufDecodeHeader();
    }
  }
  CFStringAppendF();
  return Mutable;
}

uint64_t apapPackage_isMessageTypeSupported()
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  int v1 = DerivedStorage[1];
  if (v1 == 1634754914 || v1 == 1634754917) {
    return *(unsigned __int8 *)DerivedStorage;
  }
  if (v1 == 1634754928) {
    return *(unsigned char *)DerivedStorage == 0;
  }
  return 0;
}

CFTypeRef apapPackage_CopyMessageData()
{
  CFTypeRef result = *(CFTypeRef *)(CMBaseObjectGetDerivedStorage() + 8);
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

void apapPackage_SetMessageData(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(const void **)(DerivedStorage + 8);
  *(void *)(DerivedStorage + 8) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t apapPackage_GetMessageType()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 4);
}

uint64_t apapPackage_SetMessageType(uint64_t a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(result + 4) = a2;
  return result;
}

CMBlockBufferRef apapPackage_CreateBBufRepresentation(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef theBuffer = 0;
  if (!apapPackage_isMessageTypeSupported())
  {
    if (gLogCategory_APTransportPackageAPAP <= 90
      && (gLogCategory_APTransportPackageAPAP != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_28;
    }
    return theBuffer;
  }
  uint64_t v3 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 8);
  if (!v3)
  {
    if (gLogCategory_APTransportPackageAPAP <= 90
      && (gLogCategory_APTransportPackageAPAP != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_28;
    }
    return theBuffer;
  }
  DataCFIndex Length = CMBlockBufferGetDataLength(v3);
  if (!DataLength)
  {
    if (*(unsigned char *)DerivedStorage) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t v6 = *(const void **)(DerivedStorage + 8);
    if (v6) {
      return (CMBlockBufferRef)CFRetain(v6);
    }
    return (CMBlockBufferRef)v6;
  }
  if (APSAPAPBBufDecodeHeader())
  {
    if (gLogCategory_APTransportPackageAPAP <= 90
      && (gLogCategory_APTransportPackageAPAP != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_28;
    }
    return theBuffer;
  }
  if (!*(unsigned char *)DerivedStorage) {
    goto LABEL_22;
  }
  if (DataLength <= 0xFFFFFFFB)
  {
LABEL_11:
    CFGetAllocator(a1);
    if (FigCreateBlockBufferCopyingMemoryBlock()
      || DataLength
      && CMBlockBufferAppendBufferReference(0, *(CMBlockBufferRef *)(DerivedStorage + 8), 0, DataLength, 0))
    {
      APSLogErrorAt();
    }
    return theBuffer;
  }
  if (gLogCategory_APTransportPackageAPAP <= 90
    && (gLogCategory_APTransportPackageAPAP != -1 || _LogCategory_Initialize()))
  {
LABEL_28:
    LogPrintF();
  }
  return theBuffer;
}

BOOL apapPackage_IsEndOfBurst()
{
  return *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 4) == 1634754917;
}

uint64_t APTransportPackageHTTPCreate(uint64_t a1, void *a2)
{
  uint64_t v2 = httppackage_createWithHTTPMessage(a1, 0, a2);
  if (v2) {
    APSLogErrorAt();
  }
  return v2;
}

uint64_t httppackage_createWithHTTPMessage(uint64_t a1, uint64_t a2, void *a3)
{
  APTransportPackageGetClassID();
  unsigned int v13 = CMDerivedObjectCreate();
  if (v13) {
    goto LABEL_33;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v6 = HTTPMessageCopy();
    *(void *)(DerivedStorage + 24) = v6;
    *(void *)(v6 + 9672) = *(void *)(a2 + 9672);
    *(_OWORD *)(v6 + 9680) = *(_OWORD *)(a2 + 9680);
    *(void *)(v6 + 9696) = *(void *)(a2 + 9696);
  }
  else
  {
    unsigned int v13 = HTTPMessageCreate();
    if (v13) {
      goto LABEL_33;
    }
    uint64_t v6 = *(void *)(DerivedStorage + 24);
  }
  *(_DWORD *)(DerivedStorage + 40) = 1634957678;
  uint64_t v7 = *(void *)(v6 + 8248);
  if (v7)
  {
    uint64_t v8 = *(void *)(v6 + 8240);
    uint64_t v9 = *(void *)(v6 + 8344);
    uint64_t v10 = *(void *)(v6 + 8352);
    if (httppackage_matchIncomingMessageMethodAndURL(v8, v7, (uint64_t)"SETUP", v9, v10, ""))
    {
      int v11 = 1937012080;
LABEL_21:
      *(_DWORD *)(DerivedStorage + 8) = v11;
      unsigned int v13 = 0;
      goto LABEL_22;
    }
    if (httppackage_matchIncomingMessageMethodAndURL(v8, v7, (uint64_t)"TEARDOWN", v9, v10, ""))
    {
      int v11 = 1952741230;
      goto LABEL_21;
    }
    if (httppackage_matchIncomingMessageMethodAndURL(v8, v7, (uint64_t)"POST", v9, v10, "/event"))
    {
      int v11 = 1702260340;
      goto LABEL_21;
    }
    if (httppackage_matchIncomingMessageMethodAndURL(v8, v7, (uint64_t)"POST", v9, v10, "/command"))
    {
      int v11 = 1668116068;
      goto LABEL_21;
    }
    APSLogErrorAt();
    if (gLogCategory_APTransportPackageHTTP <= 50
      && (gLogCategory_APTransportPackageHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    unsigned int v13 = -16643;
LABEL_33:
    APSLogErrorAt();
    return v13;
  }
  if (!*(void *)(v6 + 8272))
  {
LABEL_22:
    if (gLogCategory_APTransportPackageHTTP <= 30
      && (gLogCategory_APTransportPackageHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_26;
  }
  if (gLogCategory_APTransportPackageHTTP <= 60)
  {
    if (gLogCategory_APTransportPackageHTTP != -1 || _LogCategory_Initialize()) {
      LogPrintF();
    }
    goto LABEL_22;
  }
LABEL_26:
  *a3 = 0;
  return v13;
}

uint64_t APTransportPackageHTTPCreateWithHTTPMessage(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    uint64_t v3 = httppackage_createWithHTTPMessage(a1, a2, a3);
    if (v3) {
      APSLogErrorAt();
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v3;
}

uint64_t APTransportPackageHTTPGetHTTPMessage(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  CFDataRef data = 0;
  uint64_t v25 = 0;
  int v4 = *(_DWORD *)(DerivedStorage + 8);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  if (v4 <= 1885435251)
  {
    if (v4 > 1768842862)
    {
      if (v4 <= 1835428127)
      {
        if (v4 <= 1818977636)
        {
          switch(v4)
          {
            case 1768842863:
              CFDictionaryRef v6 = 0;
              goto LABEL_145;
            case 1785750887:
              CFDictionaryRef v6 = 0;
              goto LABEL_144;
            case 1801807216:
              CFDictionaryRef v6 = 0;
              goto LABEL_145;
          }
          goto LABEL_195;
        }
        if (v4 > 1819243875)
        {
          if (v4 == 1819243876)
          {
            CFDictionaryRef v6 = 0;
            goto LABEL_144;
          }
          if (v4 == 1835100003)
          {
            CFDictionaryRef v6 = 0;
            goto LABEL_144;
          }
          goto LABEL_195;
        }
        if (v4 != 1818977637)
        {
          if (v4 == 1819240307)
          {
            CFDictionaryRef v6 = 0;
            goto LABEL_145;
          }
          goto LABEL_195;
        }
        goto LABEL_97;
      }
      if (v4 <= 1885430127)
      {
        if (v4 == 1835428128)
        {
          CFDictionaryRef v6 = 0;
          goto LABEL_145;
        }
        if (v4 != 1835428205)
        {
          if (v4 == 1852796517)
          {
            CFDictionaryRef v6 = 0;
            goto LABEL_144;
          }
          goto LABEL_195;
        }
        int v5 = 0;
      }
      else if (v4 > 1885434479)
      {
        if (v4 == 1885434480)
        {
          int v5 = 0;
        }
        else
        {
          if (v4 != 1885434725) {
            goto LABEL_195;
          }
          int v5 = 0;
        }
      }
      else if (v4 == 1885430128)
      {
        int v5 = 0;
      }
      else
      {
        if (v4 != 1885432944) {
          goto LABEL_195;
        }
        int v5 = 0;
      }
    }
    else
    {
      if (v4 <= 1668247141)
      {
        if (v4 <= 1634627170)
        {
          switch(v4)
          {
            case 1633907822:
              CFDictionaryRef v6 = 0;
              goto LABEL_145;
            case 1634562925:
              CFDictionaryRef v6 = 0;
              goto LABEL_145;
            case 1634624360:
              CFDictionaryRef v6 = 0;
              goto LABEL_144;
          }
          goto LABEL_195;
        }
        if (v4 <= 1635087463)
        {
          if (v4 == 1634627171)
          {
            CFDictionaryRef v6 = 0;
            goto LABEL_144;
          }
          if (v4 == 1634956656)
          {
            int v5 = 0;
            goto LABEL_132;
          }
LABEL_195:
          if (gLogCategory_APTransportPackageHTTP <= 50
            && (gLogCategory_APTransportPackageHTTP != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          goto LABEL_199;
        }
        if (v4 != 1635087464)
        {
          if (v4 == 1668246893)
          {
            CFDictionaryRef v6 = 0;
            goto LABEL_145;
          }
          goto LABEL_195;
        }
LABEL_97:
        CFDictionaryRef v6 = 0;
        goto LABEL_145;
      }
      if (v4 > 1718628916)
      {
        if (v4 <= 1735422065)
        {
          if (v4 == 1718628917)
          {
            CFDictionaryRef v6 = 0;
            goto LABEL_145;
          }
          if (v4 == 1718839394)
          {
            CFDictionaryRef v6 = 0;
            goto LABEL_144;
          }
          goto LABEL_195;
        }
        if (v4 != 1735422066)
        {
          if (v4 == 1735815020)
          {
            CFDictionaryRef v6 = 0;
            goto LABEL_144;
          }
          goto LABEL_195;
        }
LABEL_104:
        int v5 = 1;
        goto LABEL_132;
      }
      if (v4 == 1668247142)
      {
        CFDictionaryRef v6 = 0;
        goto LABEL_145;
      }
      if (v4 == 1702064240)
      {
        CFDictionaryRef v6 = 0;
        goto LABEL_145;
      }
      if (v4 != 1718383464) {
        goto LABEL_195;
      }
      int v5 = 1;
    }
    goto LABEL_132;
  }
  if (v4 <= 1936024938)
  {
    if (v4 > 1886613611)
    {
      if (v4 <= 1918984563)
      {
        if (v4 == 1886613612)
        {
          CFDictionaryRef v6 = 0;
          goto LABEL_145;
        }
        if (v4 == 1886614892)
        {
          CFDictionaryRef v6 = 0;
          goto LABEL_145;
        }
        int v7 = 1886809964;
      }
      else
      {
        if (v4 > 1919119971)
        {
          if (v4 == 1919119972)
          {
            CFDictionaryRef v6 = 0;
            goto LABEL_144;
          }
          if (v4 != 1920164128) {
            goto LABEL_195;
          }
          goto LABEL_97;
        }
        if (v4 == 1918984564)
        {
          CFDictionaryRef v6 = 0;
          goto LABEL_145;
        }
        int v7 = 1918989413;
      }
      if (v4 != v7) {
        goto LABEL_195;
      }
      int v5 = 1;
      goto LABEL_132;
    }
    if (v4 <= 1886283374)
    {
      switch(v4)
      {
        case 1885435252:
          int v5 = 0;
          break;
        case 1885435493:
          int v5 = 0;
          break;
        case 1886151033:
          CFDictionaryRef v6 = 0;
          goto LABEL_145;
        default:
          goto LABEL_195;
      }
      goto LABEL_132;
    }
    if (v4 <= 1886417779)
    {
      if (v4 == 1886283375)
      {
        CFDictionaryRef v6 = 0;
        goto LABEL_145;
      }
      if (v4 == 1886283552)
      {
        CFDictionaryRef v6 = 0;
        goto LABEL_144;
      }
      goto LABEL_195;
    }
    if (v4 == 1886417780)
    {
      int v5 = 0;
      goto LABEL_132;
    }
    int v8 = 1886547815;
LABEL_84:
    if (v4 == v8)
    {
      CFDictionaryRef v6 = 0;
      goto LABEL_144;
    }
    goto LABEL_195;
  }
  if (v4 > 1937011315)
  {
    if (v4 > 1952741229)
    {
      if (v4 > 1953719407)
      {
        if (v4 == 1953719408)
        {
          CFDictionaryRef v6 = 0;
          goto LABEL_144;
        }
        if (v4 == 2053925920)
        {
          CFDictionaryRef v6 = 0;
          goto LABEL_144;
        }
      }
      else
      {
        if (v4 == 1952741230)
        {
          CFDictionaryRef v6 = 0;
          goto LABEL_144;
        }
        if (v4 == 1952807028)
        {
          CFDictionaryRef v6 = 0;
          goto LABEL_144;
        }
      }
      goto LABEL_195;
    }
    if (v4 == 1937011316)
    {
      CFDictionaryRef v6 = 0;
      goto LABEL_144;
    }
    if (v4 == 1937012080)
    {
      CFDictionaryRef v6 = 0;
      goto LABEL_144;
    }
    int v8 = 1937141612;
    goto LABEL_84;
  }
  if (v4 <= 1936748657)
  {
    if (v4 != 1936024939)
    {
      if (v4 == 1936027749)
      {
        CFDictionaryRef v6 = 0;
        goto LABEL_144;
      }
      if (v4 == 1936027768)
      {
        CFDictionaryRef v6 = 0;
        goto LABEL_144;
      }
      goto LABEL_195;
    }
    goto LABEL_104;
  }
  if (v4 > 1936942191)
  {
    if (v4 == 1936942192)
    {
      CFDictionaryRef v6 = 0;
      goto LABEL_144;
    }
    if (v4 == 1937010544)
    {
      CFDictionaryRef v6 = 0;
      goto LABEL_145;
    }
    goto LABEL_195;
  }
  if (v4 != 1936748658)
  {
    if (v4 == 1936875892)
    {
      CFDictionaryRef v6 = 0;
      goto LABEL_144;
    }
    goto LABEL_195;
  }
  int v5 = 1;
LABEL_132:
  if (!*(void *)(DerivedStorage + 16))
  {
    CFDictionaryRef v6 = 0;
    if (!v5) {
      goto LABEL_145;
    }
LABEL_144:
    if (CFStringCopyUTF8CString()) {
      goto LABEL_200;
    }
    goto LABEL_145;
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (FigCreateCFDataWithBlockBufferNoCopy()) {
    goto LABEL_199;
  }
  CFDictionaryRef v10 = (const __CFDictionary *)CFPropertyListCreateWithData(v9, data, 0, 0, 0);
  CFDictionaryRef v6 = v10;
  if (!v10) {
    goto LABEL_200;
  }
  CFTypeID v11 = CFGetTypeID(v10);
  if (v11 != CFDictionaryGetTypeID()) {
    goto LABEL_200;
  }
  CFStringGetTypeID();
  TypedCFStringRef Value = (const void *)CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    unsigned int v13 = *(const void **)v3;
    *(void *)uint64_t v3 = TypedValue;
    CFRetain(TypedValue);
    if (v13) {
      CFRelease(v13);
    }
  }
  if (v5) {
    goto LABEL_144;
  }
LABEL_145:
  if (!HTTPHeader_InitRequest())
  {
    int v14 = *(_DWORD *)(v3 + 8);
    if (v14 == 1886151033)
    {
      MakeFractionalDateString();
      HTTPHeader_SetField();
      goto LABEL_153;
    }
    if (v14 != 1768842863)
    {
      if (v14 == 1718628917 && HTTPHeader_SetField()) {
        goto LABEL_200;
      }
LABEL_153:
      if (*(void *)(v3 + 32) && HTTPHeader_SetField()) {
        goto LABEL_200;
      }
      if (v6)
      {
        CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)httppackage_appendCustomHeaderField, a1);
        CFDataGetTypeID();
        CFDataRef v15 = (const __CFData *)CFDictionaryGetTypedValue();
        if (v15)
        {
          CFDataRef v16 = v15;
          CFDataGetLength(v15);
          CFDataGetBytePtr(v16);
          if (HTTPMessageSetBody()) {
            goto LABEL_200;
          }
        }
LABEL_187:
        uint64_t v19 = *(void *)(v3 + 24);
        goto LABEL_188;
      }
      msghdr v17 = *(OpaqueCMBlockBuffer **)(v3 + 16);
      if (!v17) {
        goto LABEL_187;
      }
      size_t totalLengthOut = 0;
      size_t lengthAtOffsetOut = 0;
      dataPointerOut = 0;
      if (!CMBlockBufferGetDataPointer(v17, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut))
      {
        int v18 = *(_DWORD *)(v3 + 8);
        if (v18 <= 1886547814)
        {
          if (v18 != 1785750887 && v18 != 1852796517 && v18 != 1886283552) {
            goto LABEL_185;
          }
        }
        else if (v18 > 1936942191)
        {
          if (v18 != 1952807028)
          {
            if (v18 == 1936942192)
            {
              if (lengthAtOffsetOut == totalLengthOut && !HTTPHeader_SetField()) {
                goto LABEL_187;
              }
              goto LABEL_199;
            }
            goto LABEL_185;
          }
        }
        else if (v18 != 1886547815)
        {
          if (v18 == 1920164128)
          {
            if (lengthAtOffsetOut == totalLengthOut && !HTTPHeader_SetField()) {
              goto LABEL_187;
            }
            goto LABEL_199;
          }
LABEL_185:
          if (lengthAtOffsetOut == totalLengthOut && !HTTPMessageSetBody()) {
            goto LABEL_187;
          }
          goto LABEL_199;
        }
        if (!HTTPHeader_SetField())
        {
          if (totalLengthOut < 5)
          {
            if (!HTTPMessageSetBody()) {
              goto LABEL_187;
            }
          }
          else if (!CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(v3 + 16), 4uLL, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut)&& lengthAtOffsetOut + 4 == totalLengthOut&& !HTTPMessageSetBody())
          {
            goto LABEL_187;
          }
        }
      }
LABEL_199:
      APSLogErrorAt();
      uint64_t v19 = 0;
      CFDictionaryRef v6 = 0;
      goto LABEL_188;
    }
    APSSystemGetUserVersion();
    if (!HTTPHeader_SetField()) {
      goto LABEL_153;
    }
  }
LABEL_200:
  APSLogErrorAt();
  uint64_t v19 = 0;
LABEL_188:
  if (v25)
  {
    free(v25);
    uint64_t v25 = 0;
  }
  if (data) {
    CFRelease(data);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v19;
}

void httppackage_appendCustomHeaderField(const void *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F4A220]) && !CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F4A218]))
  {
    if (a2 && (CFTypeID v4 = CFGetTypeID(a2), v4 == CFStringGetTypeID()))
    {
      CFStringCopyUTF8CString();
      CFStringCopyUTF8CString();
      HTTPHeader_SetField();
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

void APTransportPackageHTTPSetURL(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  CFTypeID v4 = *DerivedStorage;
  if (a2) {
    CFRetain(a2);
  }
  *uint64_t DerivedStorage = a2;
  if (v4)
  {
    CFRelease(v4);
  }
}

void httppackage_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportPackageHTTP <= 30
    && (gLogCategory_APTransportPackageHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  int v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 24) = 0;
  }
}

__CFString *httppackage_CopyDebugDescription(uint64_t a1)
{
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTransportPackageHTTP %p>", a1);
  return Mutable;
}

CMBlockBufferRef httppackage_CopyMessageData(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v18 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t v17 = 0;
  uint64_t v3 = *(const void **)(DerivedStorage + 16);
  if (v3)
  {
    CMBlockBufferRef blockBufferOut = (CMBlockBufferRef)CFRetain(v3);
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(DerivedStorage + 24);
  size_t v5 = *(void *)(v4 + 8528);
  if (!v5)
  {
    *(void *)&customBlockSource.version = 0;
    time.value = 0;
    char v10 = 1;
    do
    {
      char v11 = v10;
      if (!HTTPGetHeaderField()) {
        break;
      }
      char v10 = 0;
    }
    while ((v11 & 1) != 0);
LABEL_5:
    HTTPGetHeaderField();
    if (v18)
    {
      v15.tv_sec = 0;
      *(void *)&v15.tv_usec = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      *(_OWORD *)&customBlockSource.version = *MEMORY[0x1E4F1FA48];
      *(void (__cdecl **)(void *, void *, size_t))((char *)&customBlockSource.FreeBlock + 4) = *(void (__cdecl **)(void *, void *, size_t))(MEMORY[0x1E4F1FA48] + 16);
      gettimeofday(&v15, 0);
      if (ParseFractionalDateString())
      {
        APSLogErrorAt();
      }
      else
      {
        CMTimeMake((CMTime *)&customBlockSource, 1000000 * (v15.tv_sec - v13) - (int)v14 + v15.tv_usec, 1000000);
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        *(_OWORD *)&time.value = *(_OWORD *)&customBlockSource.version;
        time.CMTimeEpoch epoch = *(CMTimeEpoch *)((char *)&customBlockSource.FreeBlock + 4);
        CFDictionaryRef v8 = CMTimeCopyAsDictionary(&time, v7);
        CMSetAttachment(blockBufferOut, (CFStringRef)*MEMORY[0x1E4F4A210], v8, 0);
        if (v8) {
          CFRelease(v8);
        }
      }
    }
    return blockBufferOut;
  }
  CFDictionaryRef v6 = *(void **)(v4 + 8520);
  HIDWORD(customBlockSource.AllocateBlock) = 0;
  *(void *)&customBlockSource.version = 0;
  customBlockSource.FreeBlock = (void (__cdecl *)(void *, void *, size_t))httppackage_bbufFree;
  customBlockSource.refCon = (void *)CFRetain(a1);
  if (!CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, v5, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0], &customBlockSource, 0, v5, 0, &blockBufferOut))goto LABEL_5; {
  APSLogErrorAt();
  }
  if (blockBufferOut)
  {
    CFRelease(blockBufferOut);
    return 0;
  }
  return blockBufferOut;
}

void httppackage_SetMessageData(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(const void **)(DerivedStorage + 16);
  if (a2) {
    CFRetain(a2);
  }
  *(void *)(DerivedStorage + 16) = a2;
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t httppackage_GetMessageType()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t httppackage_SetMessageType(uint64_t a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t httppackage_GetReplyToken()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  return *(unsigned int *)(*(void *)(DerivedStorage + 24) + 9688) | (*(void *)(*(void *)(DerivedStorage + 24)
                                                                                   + 9680) << 32);
}

uint64_t httppackage_SetReplyToken(uint64_t a1, unint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(result + 24);
  *(void *)(v4 + 9680) = HIDWORD(a2);
  *(void *)(v4 + 9688) = a2;
  return result;
}

uint64_t httppackage_GetErrorFromHeader()
{
  int v0 = *(_DWORD *)(*(void *)(CMBaseObjectGetDerivedStorage() + 24) + 8456);
  unsigned int v1 = v0 - 200;
  unsigned int v2 = v0 + 200000;
  if (v1 >= 0x64) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t httppackage_SetGroupID(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(void *)(result + 32) = a2;
  return result;
}

uint64_t httppackage_GetGroupID()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = *(void *)(DerivedStorage + 32);
  if (!result)
  {
    uint64_t result = *(void *)(DerivedStorage + 24);
    if (result)
    {
      HTTPMessageGetHeaderField();
      return 0;
    }
  }
  return result;
}

uint64_t httppackage_SetPackageType(uint64_t a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(result + 40) = a2;
  return result;
}

uint64_t httppackage_GetPackageType()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 40);
}

uint64_t httppackage_SetReplyStatus(uint64_t a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t httppackage_GetReplyStatus()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 48);
}

uint64_t httppackage_SetReplySequenceNumber(uint64_t a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(result + 44) = a2;
  return result;
}

uint64_t httppackage_GetReplySequenceNumber()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 44);
}

BOOL httppackage_matchIncomingMessageMethodAndURL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  int v7 = strncmpx();
  int v8 = strncmp_prefix();
  int v9 = strncmpx();
  int v10 = strncmp_prefix();
  if (v7)
  {
    if (v8) {
      return 0;
    }
    return *a6 == 0;
  }
  if (v9) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  BOOL result = v12;
  if (!v12 && !v8) {
    return *a6 == 0;
  }
  return result;
}

uint64_t APTransportConnectionGetClassID()
{
  if (APTransportConnectionGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&APTransportConnectionGetClassID_sRegisterOnce, &APTransportConnectionGetClassID_sClassID, (dispatch_function_t)connection_getClassID);
  }
  return APTransportConnectionGetClassID_sClassID;
}

uint64_t connection_getClassID(uint64_t a1)
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&connection_getClassID_sClassDesc, ClassID, 1, a1);
}

uint64_t APTransportConnectionGetTypeID()
{
  if (APTransportConnectionGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&APTransportConnectionGetClassID_sRegisterOnce, &APTransportConnectionGetClassID_sClassID, (dispatch_function_t)connection_getClassID);
  }
  uint64_t v0 = APTransportConnectionGetClassID_sClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

__CFString *APTransportConnectionGetStallStateString(int a1)
{
  unsigned int v1 = @"Stalled";
  if (a1 != 1) {
    unsigned int v1 = 0;
  }
  if (a1) {
    return v1;
  }
  else {
    return @"NotStalled";
  }
}

uint64_t APTransportConnectionGetStatusString(unsigned int a1)
{
  if (a1 > 6) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E688D650 + (int)a1);
  }
}

uint64_t APTransportConnectionGetTrafficClassForSocketQoS(int a1)
{
  int v1 = a1 - 1;
  uint64_t result = 200;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
    case 11:
      uint64_t result = 700;
      break;
    case 2:
    case 10:
      uint64_t result = 800;
      break;
    case 9:
      uint64_t result = 500;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void *APTransportConnectionCopyNWContextForType(int a1)
{
  switch(a1)
  {
    case 1:
      if (APTransportConnectionCopyNWContextForType_sAPTNWContextBufferedAudioOnce != -1) {
        dispatch_once(&APTransportConnectionCopyNWContextForType_sAPTNWContextBufferedAudioOnce, &__block_literal_global_212);
      }
      uint64_t v3 = (void *)APTransportConnectionCopyNWContextForType_sAPTNWContextBufferedAudio;
      break;
    case 2:
      if (APTransportConnectionCopyNWContextForType_sAPTNWContextLowLatencyOnce != -1) {
        dispatch_once(&APTransportConnectionCopyNWContextForType_sAPTNWContextLowLatencyOnce, &__block_literal_global_216);
      }
      uint64_t v3 = (void *)APTransportConnectionCopyNWContextForType_sAPTNWContextLowLatency;
      break;
    case 3:
      uint64_t v1 = nw_context_create();
      nw_context_set_isolate_protocol_stack();
      nw_context_set_scheduling_mode();
      nw_context_activate();
      return (void *)v1;
    default:
      if (APTransportConnectionCopyNWContextForType_sAPTNWContextDefaultOnce != -1) {
        dispatch_once(&APTransportConnectionCopyNWContextForType_sAPTNWContextDefaultOnce, &__block_literal_global_15);
      }
      uint64_t v3 = (void *)APTransportConnectionCopyNWContextForType_sAPTNWContextDefault;
      break;
  }
  return nw_retain(v3);
}

uint64_t __APTransportConnectionCopyNWContextForType_block_invoke()
{
  APTransportConnectionCopyNWContextForType_sAPTNWContextuint64_t Default = nw_context_create();
  nw_context_set_isolate_protocol_stack();
  nw_context_set_scheduling_mode();
  return nw_context_activate();
}

uint64_t __APTransportConnectionCopyNWContextForType_block_invoke_2()
{
  APTransportConnectionCopyNWContextForType_sAPTNWContextBufferedAudio = nw_context_create();
  nw_context_set_isolate_protocol_stack();
  nw_context_set_scheduling_mode();
  return nw_context_activate();
}

uint64_t __APTransportConnectionCopyNWContextForType_block_invoke_3()
{
  APTransportConnectionCopyNWContextForType_sAPTNWContextLowLatency = nw_context_create();
  nw_context_set_isolate_protocol_stack();
  nw_context_set_scheduling_mode();
  return nw_context_activate();
}

uint64_t APTransportConnectionGetSharedSelfSignedIdentity()
{
  if (APTransportConnectionGetSharedSelfSignedIdentity_sIdentityOnce != -1) {
    dispatch_once_f(&APTransportConnectionGetSharedSelfSignedIdentity_sIdentityOnce, &APTransportConnectionGetSharedSelfSignedIdentity_sIdentity, (dispatch_function_t)transportConnection_createSelfSignedIdentity);
  }
  return APTransportConnectionGetSharedSelfSignedIdentity_sIdentity;
}

void transportConnection_createSelfSignedIdentity(void **a1)
{
  if (!a1
    || (CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0))
  {
    APSLogErrorAt();
LABEL_24:
    sec_identity_t v13 = 0;
    goto LABEL_19;
  }
  uint64_t v4 = Mutable;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F3B718], (const void *)*MEMORY[0x1E4F3B740]);
  if (CFDictionarySetInt64() || (Randomuint64_t Key = SecKeyCreateRandomKey(v4, 0)) == 0)
  {
    APSLogErrorAt();
    CFRelease(v4);
    goto LABEL_24;
  }
  SecKeyRef v6 = RandomKey;
  CFMutableArrayRef v7 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
  if (!v7)
  {
    APSLogErrorAt();
    CFMutableDictionaryRef v8 = 0;
LABEL_27:
    SelfSignedCertificate = 0;
LABEL_29:
    char v11 = 0;
    goto LABEL_31;
  }
  CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (CFDictionarySetInt64())
  {
    APSLogErrorAt();
    goto LABEL_27;
  }
  SelfSignedCertificate = (const void *)SecGenerateSelfSignedCertificate();
  if (!SelfSignedCertificate)
  {
    APSLogErrorAt();
    goto LABEL_29;
  }
  int v10 = (__SecIdentity *)SecIdentityCreate();
  char v11 = v10;
  if (v10)
  {
    sec_identity_t v12 = sec_identity_create(v10);
    sec_identity_t v13 = v12;
    if (v12) {
      *a1 = sec_retain(v12);
    }
    else {
      APSLogErrorAt();
    }
    goto LABEL_11;
  }
  APSLogErrorAt();
LABEL_31:
  sec_identity_t v13 = 0;
LABEL_11:
  CFRelease(v4);
  CFRelease(v6);
  if (v7) {
    CFRelease(v7);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (SelfSignedCertificate) {
    CFRelease(SelfSignedCertificate);
  }
  if (v11) {
    CFRelease(v11);
  }
LABEL_19:
  sec_release(v13);
}

uint64_t APTransportConnectionSendBatchSlow(uint64_t a1, CFArrayRef theArray)
{
  if (!a1)
  {
    uint64_t v14 = 4294894974;
LABEL_15:
    APSLogErrorAt();
    return v14;
  }
  if (!theArray)
  {
    uint64_t v14 = 4294894974;
    goto LABEL_15;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v5 = Count;
    CFIndex v6 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v6);
      if (!ValueAtIndex || (CFMutableDictionaryRef v8 = ValueAtIndex, v9 = CFGetTypeID(ValueAtIndex), v9 != APTransportPackageGetTypeID()))
      {
        uint64_t v14 = 4294894974;
        goto LABEL_15;
      }
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      sec_identity_t v12 = *(uint64_t (**)(uint64_t, const void *))(v11 + 56);
      if (!v12)
      {
        uint64_t v14 = 4294954514;
        goto LABEL_15;
      }
      uint64_t v13 = v12(a1, v8);
      if (v13) {
        break;
      }
      if (v5 == ++v6) {
        return 0;
      }
    }
    uint64_t v14 = v13;
    goto LABEL_15;
  }
  return 0;
}

CFStringRef connection_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[APTransportConnection %p]", a1);
}

CFStringRef carPlayHelperSession_copyFormattingDesc(uint64_t a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  uint64_t v3 = "[Session/WiFi/USB]";
  if (!DerivedStorage[104]) {
    uint64_t v3 = "[Session/USB]";
  }
  uint64_t v4 = "[Session/WiFi]";
  if (!DerivedStorage[104]) {
    uint64_t v4 = "<Invalid>";
  }
  if (!DerivedStorage[64]) {
    uint64_t v3 = v4;
  }
  CFIndex v5 = "[Bonjour/USB]";
  CFIndex v6 = "[Bonjour/WiFi]";
  if (DerivedStorage[104]) {
    CFIndex v5 = "[Bonjour/WiFi/USB]";
  }
  else {
    CFIndex v6 = "<Invalid>";
  }
  if (DerivedStorage[64]) {
    CFMutableArrayRef v7 = v5;
  }
  else {
    CFMutableArrayRef v7 = v6;
  }
  if (DerivedStorage[160]) {
    CFMutableDictionaryRef v8 = v3;
  }
  else {
    CFMutableDictionaryRef v8 = v7;
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[APCarPlayHelperSession %p] - %s", a1, v8);
}

uint64_t __APCarPlayHelperSessionGetClassID_block_invoke()
{
  uint64_t ClassID = APCarPlayHelperGetClassID();
  return MEMORY[0x1F40DC658](&APCarPlayHelperSessionGetClassID_sClassDesc, ClassID, 0, &APCarPlayHelperSessionGetClassID_sClassID);
}

uint64_t APCarPlayHelperSessionCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, void *a5)
{
  if (APCarPlayHelperSessionGetClassID_sRegisterOnce != -1) {
    dispatch_once(&APCarPlayHelperSessionGetClassID_sRegisterOnce, &__block_literal_global_16);
  }
  unsigned int v23 = CMDerivedObjectCreate();
  if (v23) {
    goto LABEL_39;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_semaphore_t v11 = dispatch_semaphore_create(0);
  *(void *)(DerivedStorage + 8) = v11;
  if (!v11
    || (dispatch_queue_t v12 = dispatch_queue_create("APCarPlayHelperSessionInternalQueue", 0),
        (*(void *)(DerivedStorage + 16) = v12) == 0)
    || (dispatch_queue_t v13 = dispatch_queue_create("APCarPlayHelperSessionEventQueue", 0),
        (*(void *)(DerivedStorage + 24) = v13) == 0)
    || (dispatch_group_t v14 = dispatch_group_create(), (*(void *)(DerivedStorage + 216) = v14) == 0))
  {
    APSLogErrorAt();
    return -12786;
  }
  *(void *)(DerivedStorage + 224) = a2;
  *(void *)(DerivedStorage + 232) = a3;
  if (!a2)
  {
LABEL_38:
    APSLogErrorAt();
    return -12780;
  }
  SharedHelper = (const void *)APConnectivityHelperGetSharedHelper();
  if (!SharedHelper)
  {
    *(void *)(DerivedStorage + 40) = 0;
    goto LABEL_31;
  }
  CFTypeRef v16 = CFRetain(SharedHelper);
  *(void *)(DerivedStorage + 40) = v16;
  if (!v16)
  {
LABEL_31:
    APSLogErrorAt();
    return -6728;
  }
  unsigned int v23 = APConnectivityHelperRegisterEventHandler((uint64_t)v16, 0, (uint64_t)carPlayHelperSession_handleConnectivityHelperEvent);
  if (v23)
  {
LABEL_39:
    APSLogErrorAt();
    return v23;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(DerivedStorage + 152) = Mutable;
  if (!Mutable)
  {
    APSLogErrorAt();
    return -72200;
  }
  if (GetSharedCarSession_once != -1) {
    dispatch_once(&GetSharedCarSession_once, &__block_literal_global_159);
  }
  [(id)GetSharedCarSession_session addCarPlayHelper:0];
  if (a4)
  {
    CFStringRef Value = CFDictionaryGetValue(a4, @"powerAssertion");
    *(void *)(DerivedStorage + 32) = Value;
    if (Value) {
      CFRetain(Value);
    }
    uint64_t v19 = CFDictionaryGetValue(a4, @"eventRecorder");
    *(void *)(DerivedStorage + 256) = v19;
    if (v19) {
      CFRetain(v19);
    }
    *(unsigned char *)(DerivedStorage + 64) = CFDictionaryGetInt64Ranged() & 1;
    *(unsigned char *)(DerivedStorage + 104) = (CFDictionaryGetInt64Ranged() & 2) != 0;
    *(unsigned char *)(DerivedStorage + 160) = CFDictionaryGetInt64() != 0;
  }
  if (!*(unsigned char *)(DerivedStorage + 64) && !*(unsigned char *)(DerivedStorage + 104)) {
    goto LABEL_38;
  }
  CFPrefs_GetDouble();
  *(void *)(DerivedStorage + 56) = v20;
  if (*(unsigned char *)(DerivedStorage + 160))
  {
    if (GetSharedCarSession_once != -1) {
      dispatch_once(&GetSharedCarSession_once, &__block_literal_global_159);
    }
    [(id)GetSharedCarSession_session registerSessionRequestHandlerMachService];
  }
  if (gLogCategory_APBrowserCarSessionHelper <= 90
    && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *a5 = 0;
  return v23;
}

void carPlayHelperSession_handleConnectivityHelperEvent(uint64_t a1, int a2, const void *a3, const void *a4)
{
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2020000000;
  int v12 = 0;
  if (a4)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFRetain(a4);
    if (a3) {
      CFRetain(a3);
    }
    CFMutableDictionaryRef v8 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __carPlayHelperSession_handleConnectivityHelperEvent_block_invoke;
    block[3] = &unk_1E688D798;
    int v10 = a2;
    block[4] = v11;
    void block[5] = a4;
    void block[6] = a3;
    void block[7] = DerivedStorage;
    dispatch_async(v8, block);
  }
  _Block_object_dispose(v11, 8);
}

void sub_1D08F3290(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void carPlayHelperSession_connectivityHelperCheckIfWiFiUUIDChanged()
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v1 = APConnectivityHelperCopyCurrentWiFiNetworkInfo(*(dispatch_queue_t **)(DerivedStorage + 40), &cf);
  CFTypeRef v2 = cf;
  if (v1) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = cf == 0;
  }
  if (!v3)
  {
    CFStringGetTypeID();
    TypedCFStringRef Value = (const void *)CFDictionaryGetTypedValue();
    if (FigCFEqual())
    {
      if (gLogCategory_APBrowserCarSessionHelper <= 50
        && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      if (gLogCategory_APBrowserCarSessionHelper <= 50
        && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFIndex v5 = *(const void **)(DerivedStorage + 128);
      *(void *)(DerivedStorage + 128) = TypedValue;
      if (TypedValue) {
        CFRetain(TypedValue);
      }
      if (v5) {
        CFRelease(v5);
      }
      *(CFAbsoluteTime *)(DerivedStorage + 112) = CFAbsoluteTimeGetCurrent();
    }
    CFTypeRef v2 = cf;
  }
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t carPlayHelperSession_updateNetworkAndSessionState(const void *a1)
{
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  long long v135 = 0u;
  long long v136 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  *(_OWORD *)__str = 0u;
  long long v130 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  memset(v122, 0, sizeof(v122));
  CFTypeRef v119 = 0;
  CFTypeRef cf = 0;
  if (*(unsigned char *)(DerivedStorage + 160))
  {
    if (*(unsigned char *)(DerivedStorage + 104))
    {
      if (*(void *)(DerivedStorage + 120))
      {
        if (FigCFEqual())
        {
          if (*(double *)(v3 + 184) - *(double *)(v3 + 112) > -*(double *)(v3 + 56))
          {
            uint64_t v4 = *(void **)(v3 + 168);
            if (v4)
            {
              if ([v4 wirelessIPv6Addresses])
              {
                if (objc_msgSend((id)objc_msgSend(*(id *)(v3 + 168), "wirelessIPv6Addresses"), "count"))
                {
                  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 120)))
                  {
                    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 120));
                    if (CFArrayGetCount(Value))
                    {
                      int v6 = 1;
                      goto LABEL_55;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (gLogCategory_APBrowserCarSessionHelper <= 50
      && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
    {
      if (!*(unsigned char *)(v3 + 104))
      {
        int v6 = 0;
        strcpy(__str, "<disabled>");
        goto LABEL_55;
      }
      if (!*(void *)(v3 + 120))
      {
        int v6 = 0;
        strcpy(__str, "No Network SSID");
        goto LABEL_55;
      }
      int v7 = FigCFEqual();
      if (v7)
      {
        uint64_t v8 = 0;
        int v9 = 0;
      }
      else
      {
        uint64_t v8 = snprintf(__str, 0x80uLL, "%sUUID Mismatch", "");
        int v9 = 1;
      }
      if (*(double *)(v3 + 184) - *(double *)(v3 + 112) <= -*(double *)(v3 + 56))
      {
        dispatch_group_t v14 = "";
        if (!v7) {
          dispatch_group_t v14 = ", ";
        }
        v8 += snprintf(&__str[v8], 128 - v8, "%sSession Start Timeout", v14);
        int v9 = 1;
      }
      timeval v15 = *(void **)(v3 + 168);
      if (!v15
        || ![v15 wirelessIPv6Addresses]
        || !objc_msgSend((id)objc_msgSend(*(id *)(v3 + 168), "wirelessIPv6Addresses"), "count"))
      {
        CFTypeRef v16 = ", ";
        if (!v9) {
          CFTypeRef v16 = "";
        }
        v8 += snprintf(&__str[v8], 128 - v8, "%sNo Remote IP", v16);
        int v9 = 1;
      }
      if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 120))
        || (CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 120)),
            !CFArrayGetCount(v17)))
      {
        uint64_t v18 = ", ";
        if (!v9) {
          uint64_t v18 = "";
        }
        snprintf(&__str[v8], 128 - v8, "%sNo Local IP", v18);
      }
    }
    int v6 = 0;
LABEL_55:
    if (!*(unsigned char *)(v3 + 64)
      || !*(void *)(v3 + 80)
      || (uint64_t v19 = *(void **)(v3 + 168)) == 0
      || (*(unsigned char *)(v3 + 88) & 0x10) == 0
      && (![v19 isWiredCarPlaySimulator] || (*(unsigned char *)(v3 + 88) & 8) == 0)
      || *(double *)(v3 + 184) - *(double *)(v3 + 72) <= -*(double *)(v3 + 56)
      || (uint64_t v20 = *(void **)(v3 + 168)) == 0
      || ![v20 wiredIPv6Addresses]
      || !objc_msgSend((id)objc_msgSend(*(id *)(v3 + 168), "wiredIPv6Addresses"), "count")
      || !CFDictionaryContainsKey(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 80))
      || (CFArrayRef v21 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 80)),
          !CFArrayGetCount(v21)))
    {
      if (gLogCategory_APBrowserCarSessionHelper <= 50)
      {
        if (gLogCategory_APBrowserCarSessionHelper == -1 && !_LogCategory_Initialize()) {
          goto LABEL_136;
        }
        if (*(unsigned char *)(v3 + 64))
        {
          if (*(void *)(v3 + 80))
          {
            double v22 = *(double *)(v3 + 184) - *(double *)(v3 + 72);
            double v23 = -*(double *)(v3 + 56);
            if (v22 <= v23)
            {
              uint64_t v24 = snprintf(v122, 0x80uLL, "%sSession Start Timeout", "");
              int v25 = 1;
            }
            else
            {
              uint64_t v24 = 0;
              int v25 = 0;
            }
            long long v26 = *(void **)(v3 + 168);
            if (!v26
              || ![v26 wiredIPv6Addresses]
              || !objc_msgSend((id)objc_msgSend(*(id *)(v3 + 168), "wiredIPv6Addresses"), "count"))
            {
              long long v27 = ", ";
              if (v22 > v23) {
                long long v27 = "";
              }
              v24 += snprintf(&v122[v24], 128 - v24, "%sNo Remote IP", v27);
              int v25 = 1;
            }
            long long v28 = *(void **)(v3 + 168);
            if (!v28
              || (*(unsigned char *)(v3 + 88) & 0x10) != 0
              || [v28 isWiredCarPlaySimulator] && (*(unsigned char *)(v3 + 88) & 8) != 0)
            {
              goto LABEL_131;
            }
            long long v29 = *(void **)(v3 + 168);
            if (!v29) {
              goto LABEL_131;
            }
            int v30 = [v29 isWiredCarPlaySimulator];
            uint64_t v31 = *(unsigned int *)(v3 + 88);
            if (v30)
            {
              if ((v31 & 8) == 0)
              {
                uint64_t v32 = "%sUSB transport type mismatch:%d, Sim:Yes";
LABEL_128:
                long long v47 = ", ";
                if (!v25) {
                  long long v47 = "";
                }
                v24 += snprintf(&v122[v24], 128 - v24, v32, v47, v31);
                int v25 = 1;
              }
            }
            else if ((v31 & 8) != 0)
            {
              uint64_t v32 = "%sUSB transport type mismatch:%d, Sim:No";
              goto LABEL_128;
            }
LABEL_131:
            if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 80)))
            {
              CFArrayRef v48 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 80));
              if (CFArrayGetCount(v48)) {
                goto LABEL_136;
              }
            }
            int v44 = &v122[v24];
            size_t v45 = 128 - v24;
            uint64_t v46 = ", ";
            if (!v25) {
              uint64_t v46 = "";
            }
            goto LABEL_135;
          }
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      goto LABEL_114;
    }
    goto LABEL_107;
  }
  if (!*(unsigned char *)(DerivedStorage + 104)
    || !*(void *)(DerivedStorage + 120)
    || !FigCFEqual()
    || *(double *)(v3 + 144) - *(double *)(v3 + 112) <= -*(double *)(v3 + 56)
    || !CFDictionaryContainsKey(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 120))
    || (CFArrayRef v10 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 120)),
        !CFArrayGetCount(v10)))
  {
    if (gLogCategory_APBrowserCarSessionHelper <= 50
      && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
    {
      if (!*(unsigned char *)(v3 + 104))
      {
        int v6 = 0;
        strcpy(__str, "<disabled>");
        goto LABEL_102;
      }
      if (!*(void *)(v3 + 120))
      {
        int v6 = 0;
        strcpy(__str, "No Network SSID");
        goto LABEL_102;
      }
      int v11 = FigCFEqual();
      if (v11)
      {
        uint64_t v12 = 0;
        int v13 = 0;
      }
      else
      {
        uint64_t v12 = snprintf(__str, 0x80uLL, "%sUUID Mismatch", "");
        int v13 = 1;
      }
      if (*(double *)(v3 + 144) - *(double *)(v3 + 112) <= -*(double *)(v3 + 56))
      {
        int v33 = "";
        if (!v11) {
          int v33 = ", ";
        }
        v12 += snprintf(&__str[v12], 128 - v12, "%sSession Start Timeout", v33);
        int v13 = 1;
      }
      if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 120))
        || (CFArrayRef v34 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 120)),
            !CFArrayGetCount(v34)))
      {
        uint64_t v35 = ", ";
        if (!v13) {
          uint64_t v35 = "";
        }
        snprintf(&__str[v12], 128 - v12, "%sNo Local IP", v35);
      }
    }
    int v6 = 0;
    goto LABEL_102;
  }
  int v6 = 1;
LABEL_102:
  if (!*(unsigned char *)(v3 + 64)
    || (dispatch_queue_t v36 = *(const void **)(v3 + 80)) == 0
    || *(double *)(v3 + 96) - *(double *)(v3 + 72) <= -*(double *)(v3 + 56)
    || !CFDictionaryContainsKey(*(CFDictionaryRef *)(v3 + 152), v36)
    || (CFArrayRef v37 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 80)),
        !CFArrayGetCount(v37)))
  {
    if (gLogCategory_APBrowserCarSessionHelper <= 50)
    {
      if (gLogCategory_APBrowserCarSessionHelper == -1 && !_LogCategory_Initialize()) {
        goto LABEL_136;
      }
      if (*(unsigned char *)(v3 + 64))
      {
        long long v39 = *(const void **)(v3 + 80);
        if (v39)
        {
          double v40 = *(double *)(v3 + 96) - *(double *)(v3 + 72);
          double v41 = -*(double *)(v3 + 56);
          if (v40 <= v41)
          {
            uint64_t v42 = snprintf(v122, 0x80uLL, "%sSession Start Timeout", "");
            long long v39 = *(const void **)(v3 + 80);
          }
          else
          {
            uint64_t v42 = 0;
          }
          if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v3 + 152), v39))
          {
            CFArrayRef v43 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 80));
            if (CFArrayGetCount(v43)) {
              goto LABEL_136;
            }
          }
          int v44 = &v122[v42];
          size_t v45 = 128 - v42;
          uint64_t v46 = ", ";
          if (v40 > v41) {
            uint64_t v46 = "";
          }
LABEL_135:
          snprintf(v44, v45, "%sNo Local IP", v46);
          goto LABEL_136;
        }
LABEL_117:
        strcpy(v122, "No Network Interface");
        goto LABEL_136;
      }
LABEL_116:
      strcpy(v122, "<disabled>");
LABEL_136:
      int v38 = 1;
      goto LABEL_137;
    }
LABEL_114:
    if (v6)
    {
LABEL_144:
      int v51 = *(const void **)(v3 + 120);
      CFRetain(v51);
      uint64_t v52 = *(void **)(v3 + 168);
      if (v52) {
        long long v53 = (void *)[v52 wirelessIPv6Addresses];
      }
      else {
        long long v53 = 0;
      }
      int v54 = 2;
      int v55 = 1;
      goto LABEL_175;
    }
LABEL_170:
    int v55 = 0;
    int v54 = 0;
    long long v53 = 0;
    int v51 = 0;
    goto LABEL_175;
  }
LABEL_107:
  int v38 = 0;
LABEL_137:
  if (gLogCategory_APBrowserCarSessionHelper <= 50
    && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
  {
    if (*(unsigned char *)(v3 + 160))
    {
      if (*(unsigned char *)(v3 + 64))
      {
        long long v49 = "[Session/WiFi/USB]";
        uint64_t v50 = "[Session/USB]";
        goto LABEL_150;
      }
      if (*(unsigned char *)(v3 + 104))
      {
        long long v56 = "[Session/WiFi]";
        goto LABEL_153;
      }
    }
    else
    {
      if (*(unsigned char *)(v3 + 64))
      {
        long long v49 = "[Bonjour/WiFi/USB]";
        uint64_t v50 = "[Bonjour/USB]";
LABEL_150:
        if (*(unsigned char *)(v3 + 104)) {
          long long v56 = v49;
        }
        else {
          long long v56 = v50;
        }
        goto LABEL_153;
      }
      if (*(unsigned char *)(v3 + 104))
      {
        long long v56 = "[Bonjour/WiFi]";
        goto LABEL_153;
      }
    }
    long long v56 = "<Invalid>";
LABEL_153:
    long long v57 = "";
    long long v58 = " (";
    if (v38) {
      long long v59 = " (";
    }
    else {
      long long v59 = "";
    }
    if (v38) {
      long long v60 = ")";
    }
    else {
      long long v60 = "";
    }
    if (v38) {
      uint64_t v61 = 78;
    }
    else {
      uint64_t v61 = 89;
    }
    if (v6) {
      long long v58 = "";
    }
    else {
      long long v57 = ")";
    }
    v101 = a1;
    CFTypeRef v102 = v56;
    v109 = v122;
    uint64_t v110 = v60;
    uint64_t v107 = v61;
    v108 = v59;
    if (v6) {
      uint64_t v62 = 89;
    }
    else {
      uint64_t v62 = 78;
    }
    int v105 = __str;
    int v106 = v57;
    uint64_t v103 = (const void *)v62;
    BOOL v104 = v58;
    LogPrintF();
    if (v6) {
      goto LABEL_144;
    }
    goto LABEL_169;
  }
  if (v6) {
    goto LABEL_144;
  }
LABEL_169:
  if (v38) {
    goto LABEL_170;
  }
  int v51 = *(const void **)(v3 + 80);
  CFRetain(v51);
  long long v63 = *(void **)(v3 + 168);
  if (v63)
  {
    long long v53 = (void *)[v63 wiredIPv6Addresses];
    int v55 = 0;
  }
  else
  {
    int v55 = 0;
    long long v53 = 0;
  }
  int v54 = 1;
LABEL_175:
  if (!FigCFEqual())
  {
    if (gLogCategory_APBrowserCarSessionHelper > 30
      || gLogCategory_APBrowserCarSessionHelper == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_204;
    }
    if (*(unsigned char *)(v3 + 160))
    {
      if (*(unsigned char *)(v3 + 64))
      {
        long long v66 = "[Session/WiFi/USB]";
        long long v67 = "[Session/USB]";
        goto LABEL_200;
      }
      if (*(unsigned char *)(v3 + 104))
      {
        long long v69 = "[Session/WiFi]";
LABEL_203:
        CFTypeRef v102 = v69;
        uint64_t v103 = v51;
        v101 = a1;
        LogPrintF();
LABEL_204:
        long long v70 = *(const void **)(v3 + 208);
        *(void *)(v3 + 208) = v51;
        if (v51) {
          CFRetain(v51);
        }
        if (v70) {
          CFRelease(v70);
        }
        CFAllocatorRef v71 = CFGetAllocator(a1);
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v71, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!Mutable)
        {
          APSLogErrorAt();
          uint64_t v82 = 0;
LABEL_327:
          uint64_t v83 = 0;
LABEL_332:
          uint64_t v81 = 4294954510;
          goto LABEL_231;
        }
        long long v73 = Mutable;
        CFIndex v74 = *(const void **)(v3 + 208);
        if (v74) {
          CFDictionarySetValue(Mutable, @"interfaceName", v74);
        }
        if (*(unsigned char *)(v3 + 248) && *(void *)(v3 + 208))
        {
          CFDictionarySetValue(v73, @"setUpForOSTransaction", (const void *)*MEMORY[0x1E4F1CFD0]);
          CFDictionarySetInt64();
        }
        else
        {
          *(unsigned char *)(v3 + 248) = 0;
        }
        carPlayHelperSession_dispatchEvent(a1, 0, v73);
        CFRelease(v73);
        goto LABEL_216;
      }
    }
    else
    {
      if (*(unsigned char *)(v3 + 64))
      {
        long long v66 = "[Bonjour/WiFi/USB]";
        long long v67 = "[Bonjour/USB]";
LABEL_200:
        if (*(unsigned char *)(v3 + 104)) {
          long long v69 = v66;
        }
        else {
          long long v69 = v67;
        }
        goto LABEL_203;
      }
      if (*(unsigned char *)(v3 + 104))
      {
        long long v69 = "[Bonjour/WiFi]";
        goto LABEL_203;
      }
    }
    long long v69 = "<Invalid>";
    goto LABEL_203;
  }
  if (gLogCategory_APBrowserCarSessionHelper <= 30
    && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
  {
    if (*(unsigned char *)(v3 + 160))
    {
      if (*(unsigned char *)(v3 + 64))
      {
        long long v64 = "[Session/WiFi/USB]";
        long long v65 = "[Session/USB]";
        goto LABEL_190;
      }
      if (*(unsigned char *)(v3 + 104))
      {
        long long v68 = "[Session/WiFi]";
LABEL_193:
        uint64_t v103 = *(const void **)(v3 + 208);
        BOOL v104 = (const char *)v51;
        v101 = a1;
        CFTypeRef v102 = v68;
        LogPrintF();
        goto LABEL_216;
      }
    }
    else
    {
      if (*(unsigned char *)(v3 + 64))
      {
        long long v64 = "[Bonjour/WiFi/USB]";
        long long v65 = "[Bonjour/USB]";
LABEL_190:
        if (*(unsigned char *)(v3 + 104)) {
          long long v68 = v64;
        }
        else {
          long long v68 = v65;
        }
        goto LABEL_193;
      }
      if (*(unsigned char *)(v3 + 104))
      {
        long long v68 = "[Bonjour/WiFi]";
        goto LABEL_193;
      }
    }
    long long v68 = "<Invalid>";
    goto LABEL_193;
  }
LABEL_216:
  if (!*(unsigned char *)(v3 + 160) || !*(void *)(v3 + 208) || !*(void *)(v3 + 168))
  {
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    *(void *)(v3 + 200) = 0;
    goto LABEL_231;
  }
  int v111 = v55;
  long long v116 = 0uLL;
  int v118 = 0;
  uint64_t v117 = 0;
  uint64_t v75 = (void *)[v53 firstObject];
  long long v112 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v115 = 0u;
  uint64_t v76 = [v53 countByEnumeratingWithState:&v112 objects:v121 count:16];
  if (v76)
  {
    uint64_t v77 = v76;
    uint64_t v78 = *(void *)v113;
    while (2)
    {
      for (uint64_t i = 0; i != v77; ++i)
      {
        if (*(void *)v113 != v78) {
          objc_enumerationMutation(v53);
        }
        int v80 = *(void **)(*((void *)&v112 + 1) + 8 * i);
        objc_msgSend(v80, "cStringUsingEncoding:", 4, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110);
        StringToSockAddr();
        if (BYTE1(v116) == 30 && BYTE8(v116) == 254 && (BYTE9(v116) & 0xC0) == 0x80)
        {
          uint64_t v75 = v80;
          goto LABEL_243;
        }
      }
      uint64_t v77 = [v53 countByEnumeratingWithState:&v112 objects:v121 count:16];
      if (v77) {
        continue;
      }
      break;
    }
  }
LABEL_243:
  if (!v75)
  {
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    goto LABEL_231;
  }
  uint64_t v82 = (const void *)APSFeaturesCreateMutable();
  if (!v82)
  {
    APSLogErrorAt();
    goto LABEL_327;
  }
  APSFeaturesSetFeature();
  APSFeaturesSetFeature();
  APSFeaturesSetFeature();
  APSFeaturesSetFeature();
  APSFeaturesSetFeature();
  if (![*(id *)(v3 + 168) supportsMutualAuthentication])
  {
    if (gLogCategory_APBrowserCarSessionHelper > 30
      || gLogCategory_APBrowserCarSessionHelper == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_281;
    }
    if (*(unsigned char *)(v3 + 160))
    {
      if (*(unsigned char *)(v3 + 64))
      {
        uint64_t v88 = "[Session/WiFi/USB]";
        uint64_t v89 = "[Session/USB]";
        goto LABEL_277;
      }
      if (*(unsigned char *)(v3 + 104))
      {
        uint64_t v90 = "[Session/WiFi]";
LABEL_280:
        v101 = a1;
        CFTypeRef v102 = v90;
        LogPrintF();
LABEL_281:
        APSFeaturesSetFeature();
        uint64_t v83 = 0;
        goto LABEL_288;
      }
    }
    else
    {
      if (*(unsigned char *)(v3 + 64))
      {
        uint64_t v88 = "[Bonjour/WiFi/USB]";
        uint64_t v89 = "[Bonjour/USB]";
LABEL_277:
        if (*(unsigned char *)(v3 + 104)) {
          uint64_t v90 = v88;
        }
        else {
          uint64_t v90 = v89;
        }
        goto LABEL_280;
      }
      if (*(unsigned char *)(v3 + 104))
      {
        uint64_t v90 = "[Bonjour/WiFi]";
        goto LABEL_280;
      }
    }
    uint64_t v90 = "<Invalid>";
    goto LABEL_280;
  }
  APSFeaturesSetFeature();
  CFAllocatorRef v85 = CFGetAllocator(a1);
  uint64_t v83 = CFDictionaryCreateMutable(v85, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v83) {
    goto LABEL_331;
  }
  CFDictionarySetValue(v83, @"authenticationCertificateSerial", (const void *)[*(id *)(v3 + 168) authenticationCertificateSerial]);
  if (gLogCategory_APBrowserCarSessionHelper > 30
    || gLogCategory_APBrowserCarSessionHelper == -1 && !_LogCategory_Initialize())
  {
    goto LABEL_288;
  }
  if (!*(unsigned char *)(v3 + 160))
  {
    if (*(unsigned char *)(v3 + 64))
    {
      uint64_t v86 = "[Bonjour/WiFi/USB]";
      CFAllocatorRef v87 = "[Bonjour/USB]";
LABEL_284:
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t v91 = v86;
      }
      else {
        uint64_t v91 = v87;
      }
      goto LABEL_287;
    }
    if (*(unsigned char *)(v3 + 104))
    {
      uint64_t v91 = "[Bonjour/WiFi]";
      goto LABEL_287;
    }
LABEL_324:
    uint64_t v91 = "<Invalid>";
    goto LABEL_287;
  }
  if (*(unsigned char *)(v3 + 64))
  {
    uint64_t v86 = "[Session/WiFi/USB]";
    CFAllocatorRef v87 = "[Session/USB]";
    goto LABEL_284;
  }
  if (!*(unsigned char *)(v3 + 104)) {
    goto LABEL_324;
  }
  uint64_t v91 = "[Session/WiFi]";
LABEL_287:
  CFTypeRef v102 = v91;
  uint64_t v103 = v83;
  v101 = a1;
  LogPrintF();
LABEL_288:
  if (objc_msgSend(*(id *)(v3 + 168), "pairedVehicleIdentifier", v101, v102, v103))
  {
    if (!v83)
    {
      CFAllocatorRef v92 = CFGetAllocator(a1);
      uint64_t v83 = CFDictionaryCreateMutable(v92, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v83) {
        goto LABEL_331;
      }
    }
    CFDictionarySetValue(v83, @"pairedVehicleIdentifier", (const void *)objc_msgSend((id)objc_msgSend(*(id *)(v3 + 168), "pairedVehicleIdentifier"), "UUIDString"));
    if (gLogCategory_APBrowserCarSessionHelper <= 30
      && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  v93 = *(const void **)(v3 + 176);
  if (!v93) {
    goto LABEL_303;
  }
  if (!v83)
  {
    CFAllocatorRef v94 = CFGetAllocator(a1);
    uint64_t v83 = CFDictionaryCreateMutable(v94, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v83)
    {
      v93 = *(const void **)(v3 + 176);
      goto LABEL_299;
    }
LABEL_331:
    APSLogErrorAt();
    goto LABEL_332;
  }
LABEL_299:
  CFDictionarySetValue(v83, @"requestIdentifier", v93);
  if (gLogCategory_APBrowserCarSessionHelper <= 30
    && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_303:
  uint64_t v95 = APAdvertiserInfoCreate(*MEMORY[0x1E4F1CF80], &v119);
  if (v95)
  {
    uint64_t v81 = v95;
LABEL_330:
    APSLogErrorAt();
    goto LABEL_231;
  }
  APAdvertiserInfoSetProperty((uint64_t)v119, 0, @"airPlayVersion", 0, (const void *)[*(id *)(v3 + 168) sourceVersion]);
  APAdvertiserInfoSetProperty((uint64_t)v119, 0, @"deviceID", 0, (const void *)[*(id *)(v3 + 168) deviceIdentifier]);
  APAdvertiserInfoSetProperty((uint64_t)v119, 0, @"deviceName", 0, (const void *)[*(id *)(v3 + 168) displayName]);
  APAdvertiserInfoSetProperty((uint64_t)v119, 0, @"featuresEx", 0, v82);
  APAdvertiserInfoSetProperty((uint64_t)v119, 0, @"publicCUAirPlayPairingIdentity", 0, (const void *)[*(id *)(v3 + 168) publicKey]);
  [v75 cStringUsingEncoding:4];
  StringToSockAddr();
  uint64_t v96 = APSNetworkAddressCreateWithSocketAddr();
  if (v96)
  {
    uint64_t v81 = v96;
    goto LABEL_330;
  }
  [*(id *)(v3 + 168) port];
  APSNetworkAddressSetPort();
  APSNetworkAddressSetInterfaceName();
  if (gLogCategory_APBrowserCarSessionHelper <= 30
    && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFAllocatorRef v97 = CFGetAllocator(a1);
  uint64_t v98 = CFDictionaryCreateMutable(v97, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v98) {
    goto LABEL_331;
  }
  unsigned int v99 = v98;
  CFDictionarySetValue(v98, @"advertiserInfo", v119);
  CFDictionarySetValue(v99, @"networkAddress", cf);
  CFDictionarySetInt64();
  if (v83) {
    CFDictionarySetValue(v99, @"sessionHostInfo", v83);
  }
  *(_DWORD *)(v3 + 192) = v54;
  uint64_t v100 = 0;
  if (v111) {
    uint64_t v100 = *(void *)(v3 + 112);
  }
  *(void *)(v3 + 200) = v100;
  carPlayHelperSession_dispatchEvent(a1, 1, v99);
  CFRelease(v99);
  uint64_t v81 = 0;
LABEL_231:
  if (v51) {
    CFRelease(v51);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v82) {
    CFRelease(v82);
  }
  if (v119) {
    CFRelease(v119);
  }
  if (v83) {
    CFRelease(v83);
  }
  return v81;
}

uint64_t carPlayHelperSession_invalidate(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(NSObject **)(DerivedStorage + 16);
  if (v3)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __carPlayHelperSession_invalidate_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = DerivedStorage;
    void block[5] = a1;
    void block[6] = a1;
    dispatch_sync(v3, block);
  }
  return 0;
}

void carPlayHelperSession_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage[2];
  if (v3)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __carPlayHelperSession_finalize_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = DerivedStorage;
    dispatch_sync(v3, block);
  }
  carPlayHelperSession_invalidate(a1);
  uint64_t v4 = DerivedStorage[1];
  if (v4)
  {
    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    CFIndex v5 = DerivedStorage[1];
    if (v5)
    {
      dispatch_release(v5);
      DerivedStorage[1] = 0;
    }
  }
  int v6 = DerivedStorage[2];
  if (v6)
  {
    dispatch_sync(v6, &__block_literal_global_128);
    int v7 = DerivedStorage[2];
    if (v7)
    {
      dispatch_release(v7);
      DerivedStorage[2] = 0;
    }
  }
  uint64_t v8 = DerivedStorage[3];
  if (v8)
  {
    dispatch_sync(v8, &__block_literal_global_130);
    int v9 = DerivedStorage[3];
    if (v9)
    {
      dispatch_release(v9);
      DerivedStorage[3] = 0;
    }
  }
  CFArrayRef v10 = (const void *)DerivedStorage[32];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[32] = 0;
  }
  int v11 = (const void *)DerivedStorage[4];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[4] = 0;
  }
  uint64_t v12 = (const void *)DerivedStorage[5];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[5] = 0;
  }
  int v13 = (const void *)DerivedStorage[26];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[26] = 0;
  }
  dispatch_group_t v14 = (const void *)DerivedStorage[10];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[10] = 0;
  }
  timeval v15 = (const void *)DerivedStorage[19];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[19] = 0;
  }
  CFTypeRef v16 = (const void *)DerivedStorage[15];
  if (v16)
  {
    CFRelease(v16);
    DerivedStorage[15] = 0;
  }
  CFArrayRef v17 = (const void *)DerivedStorage[16];
  if (v17)
  {
    CFRelease(v17);
    DerivedStorage[16] = 0;
  }
  uint64_t v18 = (const void *)DerivedStorage[17];
  if (v18)
  {
    CFRelease(v18);
    DerivedStorage[17] = 0;
  }
  uint64_t v19 = (void *)DerivedStorage[30];
  if (v19)
  {

    DerivedStorage[30] = 0;
  }
  uint64_t v20 = DerivedStorage[27];
  if (v20)
  {
    dispatch_release(v20);
    DerivedStorage[27] = 0;
  }
  CFArrayRef v21 = DerivedStorage[3];
  if (v21)
  {
    dispatch_release(v21);
    DerivedStorage[3] = 0;
  }
  double v22 = DerivedStorage[2];
  if (v22)
  {
    dispatch_release(v22);
    DerivedStorage[2] = 0;
  }
  double v23 = DerivedStorage[1];
  if (v23)
  {
    dispatch_release(v23);
    DerivedStorage[1] = 0;
  }
}

intptr_t __carPlayHelperSession_invalidate_block_invoke(intptr_t result)
{
  if (!**(unsigned char **)(result + 32))
  {
    int v1 = (void *)result;
    if (GetSharedCarSession_once != -1) {
      dispatch_once(&GetSharedCarSession_once, &__block_literal_global_159);
    }
    [(id)GetSharedCarSession_session removeCarPlayHelper:v1[5]];
    uint64_t v2 = *(void *)(v1[4] + 40);
    if (v2) {
      APConnectivityHelperRemoveAllRegistrations(v2, v1[6]);
    }
    uint64_t v3 = (const void *)v1[6];
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    carPlayHelperSession_dispatchEvent(v3, 3, 0);
    uint64_t result = *(void *)(DerivedStorage + 8);
    if (result) {
      uint64_t result = dispatch_semaphore_signal((dispatch_semaphore_t)result);
    }
    *(unsigned char *)v1[4] = 1;
  }
  return result;
}

void carPlayHelperSession_dispatchEvent(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = *(void *)(DerivedStorage + 224);
  if (v7)
  {
    uint64_t v8 = DerivedStorage;
    uint64_t v9 = *(void *)(DerivedStorage + 232);
    if (gLogCategory_APBrowserCarSessionHelper <= 20
      && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (a1) {
      CFRetain(a1);
    }
    if (a3) {
      CFRetain(a3);
    }
    CFArrayRef v10 = *(NSObject **)(v8 + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __carPlayHelperSession_dispatchEvent_block_invoke;
    block[3] = &__block_descriptor_76_e5_v8__0l;
    block[4] = v7;
    void block[5] = a1;
    int v12 = a2;
    void block[6] = a3;
    void block[7] = v9;
    void block[8] = v8;
    dispatch_async(v10, block);
  }
}

void __carPlayHelperSession_dispatchEvent_block_invoke(uint64_t a1)
{
  (*(void (**)(void, void, void, void))(a1 + 32))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 72), *(void *)(a1 + 48), *(void *)(a1 + 56));
  if (*(void *)(*(void *)(a1 + 64) + 240))
  {
    uint64_t v2 = (void *)os_transaction_copy_description();
    if (gLogCategory_APBrowserCarSessionHelper <= 50
      && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    free(v2);
    uint64_t v3 = *(void **)(*(void *)(a1 + 64) + 240);
    if (v3)
    {

      *(void *)(*(void *)(a1 + 64) + 240) = 0;
    }
  }
  uint64_t v4 = *(const void **)(a1 + 48);
  if (v4) {
    CFRelease(v4);
  }
  CFIndex v5 = *(const void **)(a1 + 40);
  if (v5)
  {
    CFRelease(v5);
  }
}

uint64_t __carPlayHelperSession_finalize_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 224) = 0;
  *(void *)(*(void *)(result + 32) + 232) = 0;
  return result;
}

void carPlayHelperSession_setInterfaceWatchingEnabled(const void *a1, char a2)
{
  v8[0] = 0;
  v8[1] = v8;
  _OWORD v8[2] = 0x2020000000;
  int v9 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 16))
  {
    CFRetain(a1);
    CFIndex v5 = *(NSObject **)(DerivedStorage + 16);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = __carPlayHelperSession_setInterfaceWatchingEnabled_block_invoke;
    v6[3] = &unk_1E688D770;
    v6[4] = v8;
    v6[5] = DerivedStorage;
    char v7 = a2;
    void v6[6] = a1;
    dispatch_async(v5, v6);
  }
  _Block_object_dispose(v8, 8);
}

void sub_1D08F6E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __carPlayHelperSession_setInterfaceWatchingEnabled_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 40);
  if (*v2)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -12785;
  }
  else
  {
    int v3 = *(unsigned __int8 *)(a1 + 56);
    if (v2[48] != v3)
    {
      if (gLogCategory_APBrowserCarSessionHelper <= 30)
      {
        if (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()) {
          LogPrintF();
        }
        int v3 = *(unsigned __int8 *)(a1 + 56);
      }
      uint64_t v4 = *(void *)(a1 + 40);
      if (v3)
      {
        if (*(unsigned char *)(v4 + 64))
        {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = APConnectivityHelperRegisterForEvent(*(void *)(v4 + 40), *(void *)(a1 + 48), 4);
          if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
            goto LABEL_31;
          }
          uint64_t v4 = *(void *)(a1 + 40);
        }
        if (*(unsigned char *)(v4 + 104))
        {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = APConnectivityHelperRegisterForEvent(*(void *)(v4 + 40), *(void *)(a1 + 48), 3);
          if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
            goto LABEL_31;
          }
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = APConnectivityHelperRegisterForEvent(*(void *)(*(void *)(a1 + 40) + 40), *(void *)(a1 + 48), 9);
          if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
            goto LABEL_31;
          }
          uint64_t v4 = *(void *)(a1 + 40);
        }
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = APConnectivityHelperRegisterForEvent(*(void *)(v4 + 40), *(void *)(a1 + 48), 6);
        if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
        {
LABEL_31:
          APSLogErrorAt();
          goto LABEL_24;
        }
      }
      else
      {
        int v5 = APConnectivityHelperDeregisterForEvent(*(void *)(v4 + 40), *(void *)(a1 + 48), 6);
        uint64_t v6 = *(void *)(a1 + 40);
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;
        if (*(unsigned char *)(v6 + 64))
        {
          int v7 = APConnectivityHelperDeregisterForEvent(*(void *)(v6 + 40), *(void *)(a1 + 48), 4);
          uint64_t v8 = *(void *)(a1 + 40);
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v7;
          dispatch_group_enter(*(dispatch_group_t *)(v8 + 216));
          uint64_t v6 = *(void *)(a1 + 40);
        }
        if (*(unsigned char *)(v6 + 104))
        {
          int v9 = APConnectivityHelperDeregisterForEvent(*(void *)(v6 + 40), *(void *)(a1 + 48), 3);
          uint64_t v10 = *(void *)(a1 + 40);
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v9;
          int v11 = APConnectivityHelperDeregisterForEvent(*(void *)(v10 + 40), *(void *)(a1 + 48), 9);
          uint64_t v12 = *(void *)(a1 + 40);
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v11;
          dispatch_group_enter(*(dispatch_group_t *)(v12 + 216));
          uint64_t v6 = *(void *)(a1 + 40);
        }
        int v13 = *(NSObject **)(v6 + 216);
        dispatch_group_t v14 = *(NSObject **)(v6 + 24);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __carPlayHelperSession_setInterfaceWatchingEnabled_block_invoke_2;
        block[3] = &__block_descriptor_40_e5_v8__0l;
        block[4] = *(void *)(a1 + 48);
        dispatch_group_notify(v13, v14, block);
      }
      *(unsigned char *)(*(void *)(a1 + 40) + 48) = *(unsigned char *)(a1 + 56);
    }
  }
LABEL_24:
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
    && gLogCategory_APBrowserCarSessionHelper <= 90
    && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void __carPlayHelperSession_setInterfaceWatchingEnabled_block_invoke_2(uint64_t a1)
{
}

void __carPlayHelperSession_handleConnectivityHelperEvent_block_invoke(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 64);
  switch(v2)
  {
    case 3:
    case 9:
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = carPlayHelperSession_wifiNetworkChanged(*(const void **)(a1 + 40), *(void *)(a1 + 48));
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        goto LABEL_131;
      }
      goto LABEL_107;
    case 4:
      int v3 = *(const void **)(a1 + 40);
      CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 48);
      int updated = 0;
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!v4) {
        goto LABEL_135;
      }
      uint64_t v6 = DerivedStorage;
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v4, @"networkInterfaceName");
      CFStringRef v8 = Value;
      BOOL v9 = Value == 0;
      if (Value && CFStringHasPrefix(Value, @"anpi"))
      {
        if (gLogCategory_APBrowserCarSessionHelper <= 50
          && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_106;
      }
      int Int64 = CFDictionaryGetInt64();
      if (CFDictionaryGetInt64())
      {
        if (v8) {
          BOOL v11 = *(void *)(v6 + 32) == 0;
        }
        else {
          BOOL v11 = 1;
        }
        if (!v11)
        {
          APSPowerAssertionRaiseTemporary();
          BOOL v9 = 0;
          uint64_t v12 = "Yes";
          goto LABEL_36;
        }
      }
      else
      {
        if (!FigCFEqual()) {
          goto LABEL_106;
        }
        CFStringRef v8 = 0;
        BOOL v9 = 1;
      }
      uint64_t v12 = "No";
LABEL_36:
      if (FigCFEqual()) {
        goto LABEL_106;
      }
      if (gLogCategory_APBrowserCarSessionHelper > 50
        || gLogCategory_APBrowserCarSessionHelper == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_69;
      }
      if (*(unsigned char *)(v6 + 160))
      {
        if (*(unsigned char *)(v6 + 64))
        {
          uint64_t v18 = "[Session/WiFi/USB]";
          uint64_t v19 = "[Session/USB]";
          goto LABEL_65;
        }
        if (*(unsigned char *)(v6 + 104))
        {
          long long v26 = "[Session/WiFi]";
          goto LABEL_68;
        }
LABEL_118:
        long long v26 = "<Invalid>";
        goto LABEL_68;
      }
      if (!*(unsigned char *)(v6 + 64))
      {
        if (*(unsigned char *)(v6 + 104))
        {
          long long v26 = "[Bonjour/WiFi]";
          goto LABEL_68;
        }
        goto LABEL_118;
      }
      uint64_t v18 = "[Bonjour/WiFi/USB]";
      uint64_t v19 = "[Bonjour/USB]";
LABEL_65:
      if (*(unsigned char *)(v6 + 104)) {
        long long v26 = v18;
      }
      else {
        long long v26 = v19;
      }
LABEL_68:
      CFStringRef v42 = v8;
      CFArrayRef v43 = v12;
      double v40 = v3;
      double v41 = v26;
      LogPrintF();
LABEL_69:
      if (!*(void *)(v6 + 256))
      {
        int v30 = *(const void **)(v6 + 80);
        *(void *)(v6 + 80) = v8;
        if (v9) {
          goto LABEL_88;
        }
LABEL_87:
        CFRetain(v8);
        goto LABEL_88;
      }
      long long v27 = MEMORY[0x1E4F14500];
      if (!v9)
      {
        APSEventRecorderRecordEvent();
        uint64_t v31 = LogCategoryCopyOSLogHandle();
        uint64_t v32 = (void *)v31;
        if (v31) {
          long long v27 = v31;
        }
        if (os_signpost_enabled(v27))
        {
          *(_WORD *)size_t v45 = 0;
          _os_signpost_emit_with_name_impl(&dword_1D087F000, v27, OS_SIGNPOST_EVENT, 0x2B8D07FCuLL, "AP_SIGNPOST_CAR_USB_LINKUP", "", v45, 2u);
        }
        if (v32) {

        }
        int v30 = *(const void **)(v6 + 80);
        *(void *)(v6 + 80) = v8;
        goto LABEL_87;
      }
      APSEventRecorderRecordEvent();
      uint64_t v28 = LogCategoryCopyOSLogHandle();
      long long v29 = (void *)v28;
      if (v28) {
        long long v27 = v28;
      }
      if (os_signpost_enabled(v27))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1D087F000, v27, OS_SIGNPOST_EVENT, 0x2B8D08DCuLL, "AP_SIGNPOST_CAR_USB_LINKDOWN", "", buf, 2u);
      }
      if (v29) {

      }
      int v30 = *(const void **)(v6 + 80);
      *(void *)(v6 + 80) = v8;
LABEL_88:
      if (v30) {
        CFRelease(v30);
      }
      if (v9)
      {
        *(_DWORD *)(v6 + 88) = 0;
        *(void *)(v6 + 72) = 0;
        int v33 = *(void **)(v6 + 168);
        if (!v33 || *(_DWORD *)(v6 + 192) != 1) {
          goto LABEL_101;
        }

        *(void *)(v6 + 168) = 0;
        CFArrayRef v34 = *(const void **)(v6 + 176);
        if (v34)
        {
          CFRelease(v34);
          *(void *)(v6 + 176) = 0;
        }
        *(void *)(v6 + 184) = 0;
        *(_DWORD *)(v6 + 192) = 0;
        if (gLogCategory_APBrowserCarSessionHelper > 50
          || gLogCategory_APBrowserCarSessionHelper == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_101;
        }
        if (*(unsigned char *)(v6 + 160))
        {
          if (*(unsigned char *)(v6 + 64))
          {
            uint64_t v35 = "[Session/WiFi/USB]";
            dispatch_queue_t v36 = "[Session/USB]";
LABEL_126:
            if (*(unsigned char *)(v6 + 104)) {
              long long v39 = v35;
            }
            else {
              long long v39 = v36;
            }
            double v41 = "OSStatus carPlayHelperSession_usbInterfaceChanged(APCarPlayHelperRef, CFDictionaryRef)";
            CFStringRef v42 = (const __CFString *)v39;
            double v40 = v3;
            LogPrintF();
            goto LABEL_101;
          }
          uint64_t v35 = "[Session/WiFi]";
        }
        else
        {
          if (*(unsigned char *)(v6 + 64))
          {
            uint64_t v35 = "[Bonjour/WiFi/USB]";
            dispatch_queue_t v36 = "[Bonjour/USB]";
            goto LABEL_126;
          }
          uint64_t v35 = "[Bonjour/WiFi]";
        }
        dispatch_queue_t v36 = "<Invalid>";
        goto LABEL_126;
      }
      *(_DWORD *)(v6 + 88) = Int64;
      *(CFAbsoluteTime *)(v6 + 72) = CFAbsoluteTimeGetCurrent();
LABEL_101:
      if (!*(unsigned char *)(v6 + 160))
      {
        if (GetSharedCarSession_once != -1) {
          dispatch_once(&GetSharedCarSession_once, &__block_literal_global_159);
        }
        objc_msgSend((id)GetSharedCarSession_session, "checkCarPlayControlAdvertisingForUSB", v40, v41, v42, v43);
      }
      int updated = carPlayHelperSession_updateNetworkAndSessionState(v3);
      if (updated) {
LABEL_135:
      }
        APSLogErrorAt();
LABEL_106:
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        goto LABEL_131;
      }
LABEL_107:
      CFArrayRef v37 = *(const void **)(a1 + 40);
      if (v37) {
        CFRelease(v37);
      }
      int v38 = *(const void **)(a1 + 48);
      if (v38) {
        CFRelease(v38);
      }
      return;
    case 5:
    case 7:
    case 8:
      goto LABEL_9;
    case 6:
      int v13 = *(const void **)(a1 + 40);
      CFDictionaryRef v14 = *(const __CFDictionary **)(a1 + 48);
      uint64_t v15 = CMBaseObjectGetDerivedStorage();
      if (v14)
      {
        CFTypeRef v16 = CFDictionaryGetValue(v14, @"networkInterfaceName");
        CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(v14, @"IPv6Addresses");
      }
      else
      {
        CFTypeRef v16 = 0;
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v15 + 152), v16, v14);
      if (*(double *)(v15 + 200) == 0.0
        || CFAbsoluteTimeGetCurrent() - *(double *)(v15 + 200) >= 2.0
        || (CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v15 + 152), *(const void **)(v15 + 120)),
            CFArrayGetCount(v17)))
      {
        if (gLogCategory_APBrowserCarSessionHelper <= 30
          && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (carPlayHelperSession_updateNetworkAndSessionState(v13)) {
          APSLogErrorAt();
        }
      }
      else if (gLogCategory_APBrowserCarSessionHelper <= 50 {
             && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
      }
      {
        LogPrintF();
      }
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
LABEL_131:
      }
        APSLogErrorAt();
      goto LABEL_107;
    default:
      if (v2 == 103)
      {
        if (gLogCategory_APBrowserCarSessionHelper <= 30
          && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        double v23 = *(const void **)(a1 + 40);
        uint64_t v24 = CMBaseObjectGetDerivedStorage();
        int v25 = *(const void **)(v24 + 120);
        if (v25)
        {
          CFRelease(v25);
          *(void *)(v24 + 120) = 0;
          carPlayHelperSession_wifiNetworkChanged(v23, 0);
        }
        double v22 = *(NSObject **)(v24 + 216);
      }
      else
      {
        if (v2 != 104)
        {
LABEL_9:
          if (gLogCategory_APBrowserCarSessionHelper <= 30
            && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          goto LABEL_107;
        }
        if (gLogCategory_APBrowserCarSessionHelper <= 30
          && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v20 = CMBaseObjectGetDerivedStorage();
        CFArrayRef v21 = *(const void **)(v20 + 80);
        if (v21)
        {
          CFRelease(v21);
          *(void *)(v20 + 80) = 0;
          CMBaseObjectGetDerivedStorage();
          APSLogErrorAt();
        }
        double v22 = *(NSObject **)(v20 + 216);
      }
      dispatch_group_leave(v22);
      goto LABEL_107;
  }
}

uint64_t carPlayHelperSession_wifiNetworkChanged(const void *a1, uint64_t a2)
{
  unsigned int updated = 0;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    int v5 = DerivedStorage;
    if (a2)
    {
      CFStringGetTypeID();
      CFDictionaryGetTypedValue();
      CFStringGetTypeID();
      CFDictionaryGetTypedValue();
      CFStringGetTypeID();
      CFDictionaryGetTypedValue();
      FigCFDictionaryGetBooleanIfPresent();
      BOOL v6 = CFDictionaryGetInt64() != 0;
      unsigned int updated = 0;
    }
    else
    {
      BOOL v6 = 0;
    }
    if (gLogCategory_APBrowserCarSessionHelper <= 50
      && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v6)
    {
      if (gLogCategory_APBrowserCarSessionHelper <= 50
        && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      int v7 = (const void *)*((void *)v5 + 15);
      if (v7)
      {
        CFRelease(v7);
        *((void *)v5 + 15) = 0;
        CFStringRef v8 = (const void *)*((void *)v5 + 16);
        if (v8)
        {
          CFRelease(v8);
          *((void *)v5 + 16) = 0;
        }
        *((CFAbsoluteTime *)v5 + 14) = CFAbsoluteTimeGetCurrent();
        BOOL v9 = (void *)*((void *)v5 + 21);
        if (v9 && *((_DWORD *)v5 + 48) == 2)
        {

          *((void *)v5 + 21) = 0;
          uint64_t v10 = (const void *)*((void *)v5 + 22);
          if (v10)
          {
            CFRelease(v10);
            *((void *)v5 + 22) = 0;
          }
          *((void *)v5 + 23) = 0;
          *((_DWORD *)v5 + 48) = 0;
          if (gLogCategory_APBrowserCarSessionHelper <= 50
            && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        APConnectivityHelperDeregisterActivity(*((void *)v5 + 5), (uint64_t)a1, 0);
        unsigned int updated = carPlayHelperSession_updateNetworkAndSessionState(a1);
        if (updated) {
          APSLogErrorAt();
        }
      }
    }
  }
  return updated;
}

APCarSessionRequestHandler *__GetSharedCarSession_block_invoke()
{
  uint64_t result = objc_alloc_init(APCarSessionRequestHandler);
  GetSharedCarSession_session = (uint64_t)result;
  return result;
}

Class initCARSessionRequestAgent()
{
  if (CarKitLibrary_sOnce_0 != -1) {
    dispatch_once(&CarKitLibrary_sOnce_0, &__block_literal_global_162);
  }
  Class result = objc_getClass("CARSessionRequestAgent");
  classCARSessionRequestAgent = (uint64_t)result;
  getCARSessionRequestAgentClass = CARSessionRequestAgentFunction;
  return result;
}

uint64_t CARSessionRequestAgentFunction()
{
  return classCARSessionRequestAgent;
}

void *__CarKitLibrary_block_invoke_0()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/CarKit.framework/CarKit", 2);
  CarKitLibrary_sLib_0 = (uint64_t)result;
  return result;
}

uint64_t APTransportStreamCreate(const __CFAllocator *a1, const void *a2, uint64_t a3, const void *a4, int a5, const void *a6, uint64_t a7, const __CFDictionary *a8, void *a9)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!a2 || !a6)
  {
    APSLogErrorAt();
    return 4294950686;
  }
  FigTransportStreamGetClassID();
  uint64_t v17 = CMDerivedObjectCreate();
  if (v17)
  {
    uint64_t v38 = v17;
LABEL_56:
    APSLogErrorAt();
    return v38;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v19 = CFRetain(a2);
  *(void *)uint64_t DerivedStorage = a3;
  *(void *)(DerivedStorage + 80) = v19;
  *(void *)(DerivedStorage + 88) = a4;
  if (a4) {
    CFRetain(a4);
  }
  SNPrintF();
  if (a5) {
    uint64_t v20 = FigDispatchQueueCreateWithPriority();
  }
  else {
    uint64_t v20 = (uint64_t)dispatch_queue_create(label, 0);
  }
  *(void *)(DerivedStorage + 64) = v20;
  if (!v20) {
    goto LABEL_49;
  }
  SNPrintF();
  dispatch_queue_t v21 = dispatch_queue_create(label, 0);
  *(void *)(DerivedStorage + 184) = v21;
  if (!v21) {
    goto LABEL_49;
  }
  dispatch_semaphore_t v22 = dispatch_semaphore_create(1);
  *(void *)(DerivedStorage + 32) = v22;
  if (!v22) {
    goto LABEL_49;
  }
  CFMutableSetRef Mutable = CFSetCreateMutable(a1, 0, MEMORY[0x1E4F1D548]);
  *(void *)(DerivedStorage + 104) = Mutable;
  if (!Mutable) {
    goto LABEL_49;
  }
  CFMutableDictionaryRef v24 = CFDictionaryCreateMutable(a1, 0, 0, MEMORY[0x1E4F1D540]);
  *(void *)(DerivedStorage + 112) = v24;
  if (!v24) {
    goto LABEL_49;
  }
  *(void *)(DerivedStorage + 96) = a7;
  *(_DWORD *)(DerivedStorage + 24) = 0;
  uint64_t v25 = CMBaseObjectGetDerivedStorage();
  if (a8)
  {
    CFStringRef Value = CFDictionaryGetValue(a8, @"SendConnection");
    if (Value)
    {
      uint64_t ConnectionState = stream_createConnectionState(Value, (uint64_t)stream_handleEventFromSendConnection_0, 0, 0, (void *)(v25 + 48));
      if (ConnectionState)
      {
        uint64_t v38 = ConnectionState;
        goto LABEL_55;
      }
      uint64_t v28 = stream_createConnectionState(a6, (uint64_t)stream_handleEventFromReceiveConnection, 0, 1, (void *)(v25 + 56));
      if (v28)
      {
        uint64_t v38 = v28;
        goto LABEL_55;
      }
      *(_DWORD *)(v25 + 24) = 1;
    }
    long long v29 = CFDictionaryGetValue(a8, @"ReceiveConnection");
    if (!v29) {
      goto LABEL_23;
    }
    uint64_t v30 = stream_createConnectionState(v29, (uint64_t)stream_handleEventFromReceiveConnection, 0, 1, (void *)(v25 + 56));
    if (v30)
    {
      uint64_t v38 = v30;
    }
    else
    {
      uint64_t v31 = stream_createConnectionState(a6, (uint64_t)stream_handleEventFromSendConnection_0, 0, 0, (void *)(v25 + 48));
      if (!v31)
      {
        *(_DWORD *)(v25 + 24) = 0;
        goto LABEL_23;
      }
      uint64_t v38 = v31;
    }
LABEL_55:
    APSLogErrorAt();
    goto LABEL_56;
  }
LABEL_23:
  if (*(void *)(v25 + 48)) {
    goto LABEL_26;
  }
  uint64_t v32 = stream_createConnectionState(a6, (uint64_t)stream_handleEventFromSendConnection_0, 0, 0, (void *)(v25 + 48));
  if (v32)
  {
    uint64_t v38 = v32;
    goto LABEL_55;
  }
  *(void *)(v25 + 56) = *(void *)(v25 + 48);
LABEL_26:
  if (!a8) {
    goto LABEL_40;
  }
  int v33 = CFDictionaryGetValue(a8, @"EventRecorder");
  *(void *)(DerivedStorage + 136) = v33;
  if (v33)
  {
    CFRetain(v33);
    if (*(void *)(DerivedStorage + 136))
    {
      CFMutableDictionaryRef v34 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(void *)(DerivedStorage + 144) = v34;
      if (!v34)
      {
LABEL_49:
        APSLogErrorAt();
        return 4294950685;
      }
    }
  }
  uint64_t v35 = CFDictionaryGetValue(a8, @"SendBackingProvider");
  *(void *)(DerivedStorage + 40) = v35;
  if (v35) {
    CFRetain(v35);
  }
  dispatch_queue_t v36 = CFDictionaryGetValue(a8, @"IssueReporter");
  *(void *)(DerivedStorage + 8) = v36;
  if (v36) {
    CFRetain(v36);
  }
  CFArrayRef v37 = CFDictionaryGetValue(a8, @"NANDataSession");
  *(void *)(DerivedStorage + 16) = v37;
  if (v37) {
    CFRetain(v37);
  }
  if (gLogCategory_APTransportStream > 50) {
    goto LABEL_44;
  }
  if (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()) {
    LogPrintF();
  }
LABEL_40:
  if (gLogCategory_APTransportStream <= 50
    && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_44:
  uint64_t v38 = 0;
  *a9 = 0;
  return v38;
}

uint64_t APTransportStreamEnableReverseControl(uint64_t a1)
{
  uint64_t v6 = 0;
  int v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  int v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 64);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  _DWORD v5[2] = __APTransportStreamEnableReverseControl_block_invoke;
  v5[3] = &unk_1E688D930;
  v5[4] = &v6;
  v5[5] = a1;
  dispatch_sync(v2, v5);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void __APTransportStreamEnableReverseControl_block_invoke(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 40);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportStream <= 30
    && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    int v20 = -16617;
    goto LABEL_40;
  }
  int v4 = *(_DWORD *)(DerivedStorage + 24);
  uint64_t v5 = 48;
  if (!v4) {
    uint64_t v5 = 56;
  }
  uint64_t v6 = *(void *)(DerivedStorage + v5);
  if (*(unsigned char *)(v6 + 9))
  {
    int v20 = 0;
    goto LABEL_40;
  }
  BOOL v7 = v4 == 0;
  uint64_t v8 = 56;
  if (v7) {
    uint64_t v8 = 48;
  }
  uint64_t v9 = *(void *)(*(void *)(DerivedStorage + v8) + 40);
  if (v9)
  {
    uint64_t CMBaseObject = APTransportConnectionGetCMBaseObject(*(void *)(v6 + 24));
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    int v13 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v12 + 56);
    if (!v13)
    {
      int v20 = -12782;
      goto LABEL_39;
    }
    int v14 = v13(CMBaseObject, @"RemoteNetworkIPAddress", v9);
    if (v14)
    {
      int v20 = v14;
      goto LABEL_39;
    }
  }
  uint64_t v15 = *(void *)(DerivedStorage + 120);
  if (v15)
  {
    uint64_t v16 = *(void *)(DerivedStorage + 128);
    if (v16)
    {
      uint64_t v17 = *(void *)(v6 + 24);
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      dispatch_queue_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 80);
      if (!v21)
      {
        int v20 = -12782;
        goto LABEL_39;
      }
      int v22 = v21(v17, v15, v16);
      if (v22)
      {
        int v20 = v22;
        goto LABEL_39;
      }
    }
  }
  uint64_t v24 = *(void *)(v6 + 24);
  uint64_t v23 = *(void *)(v6 + 32);
  uint64_t v25 = *(void *)(DerivedStorage + 184);
  uint64_t v26 = *(void *)(DerivedStorage + 96);
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  long long v29 = *(uint64_t (**)(uint64_t, const void *, uint64_t, uint64_t, uint64_t))(v28 + 16);
  if (!v29)
  {
    int v20 = -12782;
    goto LABEL_39;
  }
  int v30 = v29(v24, v2, v23, v25, v26);
  if (v30)
  {
    int v20 = v30;
    goto LABEL_39;
  }
  uint64_t v31 = *(void *)(v6 + 24);
  uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v32) {
    uint64_t v33 = v32;
  }
  else {
    uint64_t v33 = 0;
  }
  CFMutableDictionaryRef v34 = *(uint64_t (**)(uint64_t))(v33 + 8);
  if (!v34)
  {
    int v20 = -12782;
    goto LABEL_39;
  }
  int v20 = v34(v31);
  if (v20)
  {
LABEL_39:
    APSLogErrorAt();
    goto LABEL_40;
  }
  *(unsigned char *)(v6 + 9) = 1;
  stream_postCachedConnectionEvent(v2, v6);
LABEL_40:
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v20;
}

uint64_t APTransportStreamWaitUntilReverseControlConnected(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v2 = stream_waitUntilConnectionSetup(a1, 1);
  if (v2) {
    APSLogErrorAt();
  }
  return v2;
}

uint64_t stream_waitUntilConnectionSetup(uint64_t a1, int a2)
{
  uint64_t v20 = 0;
  dispatch_queue_t v21 = &v20;
  uint64_t v22 = 0x2000000000;
  int v23 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19[0] = 0;
  v19[1] = v19;
  void v19[2] = 0x2000000000;
  v19[3] = 0;
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2000000000;
  uint64_t v18 = 0;
  uint64_t v5 = *(NSObject **)(DerivedStorage + 64);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __stream_waitUntilConnectionSetup_block_invoke;
  block[3] = &unk_1E688DB68;
  int v14 = a2;
  block[4] = &v20;
  void block[5] = v19;
  void block[6] = &v15;
  void block[7] = DerivedStorage;
  void block[8] = a1;
  dispatch_sync(v5, block);
  uint64_t v6 = v16[3];
  if (v6)
  {
    dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
    BOOL v7 = *(NSObject **)(DerivedStorage + 64);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = __stream_waitUntilConnectionSetup_block_invoke_2;
    void v11[3] = &unk_1E688DB90;
    int v12 = a2;
    v11[4] = &v20;
    void v11[5] = v19;
    void v11[6] = DerivedStorage;
    v11[7] = a1;
    dispatch_sync(v7, v11);
    uint64_t v8 = v16[3];
    if (v8) {
      dispatch_release(v8);
    }
  }
  uint64_t v9 = *((unsigned int *)v21 + 6);
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(v19, 8);
  _Block_object_dispose(&v20, 8);
  return v9;
}

uint64_t stream_Invalidate_0()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

void stream_Finalize_0()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportStream <= 50
    && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    if (*(void *)(DerivedStorage + 48) == *(void *)(DerivedStorage + 56)) {
      *(void *)(DerivedStorage + 56) = 0;
    }
    stream_forgetConnectionState((uint64_t *)(DerivedStorage + 48));
    stream_forgetConnectionState((uint64_t *)(DerivedStorage + 56));
    int v1 = *(const void **)(DerivedStorage + 136);
    if (v1)
    {
      CFRelease(v1);
      *(void *)(DerivedStorage + 136) = 0;
    }
    uint64_t v2 = *(const void **)(DerivedStorage + 144);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(DerivedStorage + 144) = 0;
    }
    uint64_t v3 = *(const void **)(DerivedStorage + 88);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(DerivedStorage + 88) = 0;
    }
    int v4 = *(const void **)(DerivedStorage + 80);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(DerivedStorage + 80) = 0;
    }
    uint64_t v5 = *(NSObject **)(DerivedStorage + 168);
    if (v5)
    {
      dispatch_release(v5);
      *(void *)(DerivedStorage + 168) = 0;
    }
    uint64_t v6 = *(NSObject **)(DerivedStorage + 32);
    if (v6)
    {
      dispatch_release(v6);
      *(void *)(DerivedStorage + 32) = 0;
    }
    BOOL v7 = *(NSObject **)(DerivedStorage + 184);
    if (v7)
    {
      dispatch_release(v7);
      *(void *)(DerivedStorage + 184) = 0;
    }
    uint64_t v8 = *(NSObject **)(DerivedStorage + 64);
    if (v8)
    {
      dispatch_release(v8);
      *(void *)(DerivedStorage + 64) = 0;
    }
  }
  else
  {
    if (gLogCategory_APTransportStream <= 100) {
      stream_Finalize_cold_1_0(gLogCategory_APTransportStream);
    }
    __break(1u);
  }
}

__CFString *stream_CopyDebugDescription_0(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableSetRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APTransportStream %p '%@'>", a1, *(void *)(DerivedStorage + 88));
  return Mutable;
}

uint64_t stream_CopyProperty_0(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    return 4294950679;
  }
  BOOL v7 = (void *)DerivedStorage;
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F22048]))
  {
    if (CFEqual(a2, @"IssueReporter"))
    {
      int v12 = (const void *)v7[1];
      if (v12) {
        goto LABEL_11;
      }
    }
    else
    {
      if (!CFEqual(a2, @"NANDataSession"))
      {
        return FigDispatchSyncCopyPropertyImplementation();
      }
      int v12 = (const void *)v7[2];
      if (v12)
      {
LABEL_11:
        uint64_t v10 = (void *)CFRetain(v12);
LABEL_12:
        int v13 = v10;
LABEL_13:
        uint64_t result = 0;
        *a4 = v13;
        return result;
      }
    }
    int v13 = 0;
    goto LABEL_13;
  }
  uint64_t v8 = 7;
  if (!*((_DWORD *)v7 + 6)) {
    uint64_t v8 = 6;
  }
  uint64_t v9 = v7[v8];
  if (APTransportStreamIDGetStreamCategory(*v7) != 2 || *(unsigned char *)(v9 + 9))
  {
    uint64_t v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, v7);
    if (!v10)
    {
      APSLogErrorAt();
      return 4294950685;
    }
    goto LABEL_12;
  }
  APSLogErrorAt();
  return APSSignalErrorAt();
}

uint64_t stream_SetProperty_0()
{
  return APSDispatchSyncTask();
}

uint64_t stream_invalidateInternal_0(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v3 = DerivedStorage;
    *(unsigned char *)(DerivedStorage + 72) = 1;
    uint64_t v4 = 56;
    if (*(_DWORD *)(DerivedStorage + 24)) {
      uint64_t v5 = 56;
    }
    else {
      uint64_t v5 = 48;
    }
    uint64_t v6 = *(void *)(DerivedStorage + v5);
    if (*(_DWORD *)(DerivedStorage + 24)) {
      uint64_t v4 = 48;
    }
    uint64_t v7 = *(void *)(DerivedStorage + v4);
    if (v6 == v7) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = v7;
    }
    uint64_t v9 = *(void *)(v6 + 24);
    uint64_t v10 = *(void *)(DerivedStorage + 96);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    int v13 = *(void (**)(uint64_t, uint64_t))(v12 + 24);
    if (v13) {
      v13(v9, v10);
    }
    if (v8)
    {
      uint64_t v14 = *(void *)(v8 + 24);
      uint64_t v15 = *(void *)(v3 + 96);
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v17 = v16 ? v16 : 0;
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v17 + 24);
      if (v18) {
        v18(v14, v15);
      }
    }
    APTransportSessionUnregisterStream(*(const void **)(v3 + 80));
    uint64_t v19 = *(NSObject **)(v3 + 32);
    if (v19) {
      dispatch_semaphore_signal(v19);
    }
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(v3 + 112), (CFDictionaryApplierFunction)stream_relinquishPackage, a1);
    stream_invalidateConnectionState(v6);
    stream_invalidateConnectionState(v8);
    uint64_t v20 = *(NSObject **)(v3 + 184);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __stream_invalidateInternal_block_invoke_0;
    block[3] = &__block_descriptor_tmp_134;
    block[4] = v3;
    dispatch_sync(v20, block);
    dispatch_queue_t v21 = *(NSObject **)(v3 + 168);
    if (v21)
    {
      *(_DWORD *)(v3 + 152) = -16617;
      dispatch_semaphore_signal(v21);
    }
    CFSetRemoveAllValues(*(CFMutableSetRef *)(v3 + 104));
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v3 + 112));
    uint64_t v22 = *(const void **)(v3 + 120);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(v3 + 120) = 0;
    }
    int v23 = *(const void **)(v3 + 128);
    if (v23)
    {
      CFRelease(v23);
      *(void *)(v3 + 128) = 0;
    }
    uint64_t v24 = *(const void **)(v3 + 40);
    if (v24)
    {
      CFRelease(v24);
      *(void *)(v3 + 40) = 0;
    }
    uint64_t v25 = *(const void **)(v3 + 104);
    if (v25)
    {
      CFRelease(v25);
      *(void *)(v3 + 104) = 0;
    }
    uint64_t v26 = *(const void **)(v3 + 112);
    if (v26)
    {
      CFRelease(v26);
      *(void *)(v3 + 112) = 0;
    }
    uint64_t v27 = *(const void **)(v3 + 8);
    if (v27)
    {
      CFRelease(v27);
      *(void *)(v3 + 8) = 0;
    }
    uint64_t v28 = *(const void **)(v3 + 16);
    if (v28)
    {
      CFRelease(v28);
      *(void *)(v3 + 16) = 0;
    }
    if (gLogCategory_APTransportStream <= 30
      && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  return 0;
}

uint64_t stream_getConnectionState(uint64_t result, int a2, void *a3)
{
  if (a3 && result)
  {
    int v3 = *(_DWORD *)(result + 24);
    if (a2 == 1)
    {
      if (v3)
      {
LABEL_5:
        uint64_t v4 = *(void *)(result + 48);
LABEL_8:
        *a3 = v4;
        return result;
      }
    }
    else if (!v3)
    {
      goto LABEL_5;
    }
    uint64_t v4 = *(void *)(result + 56);
    goto LABEL_8;
  }
  return APSLogErrorAt();
}

uint64_t stream_relinquishPackage(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    stream_relinquishPackage_cold_1();
  }
  uint64_t v4 = 56;
  if (!*(_DWORD *)(DerivedStorage + 24)) {
    uint64_t v4 = 48;
  }
  uint64_t v5 = *(void *)(*(void *)(DerivedStorage + v4) + 24);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v9 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v8 = v9;
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 48);
  if (v11)
  {
    return v11(v5, a2);
  }
  return result;
}

void stream_invalidateConnectionState(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(NSObject **)a1;
    if (v2)
    {
      *(unsigned char *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 12) = -16617;
      dispatch_semaphore_signal(v2);
    }
    int v3 = *(const void **)(a1 + 24);
    if (v3)
    {
      CFRelease(v3);
      if (*(void *)(a1 + 24))
      {
        if (gLogCategory_APTransportStream <= 50
          && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
    }
    *(void *)(a1 + 24) = 0;
    uint64_t v4 = *(const void **)(a1 + 40);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 40) = 0;
    }
    uint64_t v5 = *(const void **)(a1 + 88);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 88) = 0;
    }
  }
}

uint64_t __stream_invalidateInternal_block_invoke_0(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 200) = 0;
  *(void *)(*(void *)(result + 32) + 208) = 0;
  *(void *)(*(void *)(result + 32) + 192) = 0;
  return result;
}

void stream_forgetConnectionState(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = (dispatch_object_t *)*a1;
    if (*a1)
    {
      stream_invalidateConnectionState(*a1);
      if (*v2) {
        dispatch_release(*v2);
      }
      free(v2);
      *a1 = 0;
    }
  }
}

uint64_t stream_copyPropertyInternal(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    return 4294950679;
  }
  uint64_t v8 = DerivedStorage;
  uint64_t v9 = 56;
  if (*(_DWORD *)(DerivedStorage + 24)) {
    uint64_t v10 = 56;
  }
  else {
    uint64_t v10 = 48;
  }
  uint64_t v11 = *(void *)(DerivedStorage + v10);
  if (*(_DWORD *)(DerivedStorage + 24)) {
    uint64_t v9 = 48;
  }
  uint64_t v12 = *(void *)(DerivedStorage + v9);
  if (!CFEqual(a2, @"ReverseConnectionLocalPort"))
  {
    if (CFEqual(a2, @"ReverseConnectionRemotePort"))
    {
      uint64_t v17 = *(void *)(v12 + 24);
      if (v17)
      {
        uint64_t CMBaseObject = APTransportConnectionGetCMBaseObject(v17);
        uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v19) {
          uint64_t v20 = v19;
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v25 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, void *))(v20 + 48);
        if (v25)
        {
          uint64_t v22 = v25(CMBaseObject, @"RemoteNetworkPort", a3, a4);
          if (v22) {
            goto LABEL_29;
          }
          return v22;
        }
        uint64_t v22 = 4294954514;
LABEL_29:
        APSLogErrorAt();
        return v22;
      }
    }
    else
    {
      if (CFEqual(a2, @"SendConnection"))
      {
        int v23 = *(const void **)(*(void *)(v8 + 48) + 24);
        if (v23)
        {
          CFTypeRef v24 = CFRetain(v23);
          *a4 = v24;
          if (v24) {
            return 0;
          }
        }
        else
        {
          *a4 = 0;
        }
        APSLogErrorAt();
        return 4294960569;
      }
      uint64_t v27 = *(void *)(v11 + 24);
      if (v27)
      {
        uint64_t v28 = APTransportConnectionGetCMBaseObject(v27);
        uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v29) {
          uint64_t v30 = v29;
        }
        else {
          uint64_t v30 = 0;
        }
        uint64_t v31 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void *))(v30 + 48);
        if (v31)
        {
          uint64_t v22 = v31(v28, a2, a3, a4);
          if (!v22) {
            return v22;
          }
        }
        else
        {
          uint64_t v22 = 4294954514;
        }
        goto LABEL_29;
      }
    }
LABEL_42:
    APSLogErrorAt();
    return 4294960587;
  }
  uint64_t v13 = *(void *)(v12 + 24);
  if (!v13) {
    goto LABEL_42;
  }
  uint64_t v14 = APTransportConnectionGetCMBaseObject(v13);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  dispatch_queue_t v21 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, void *))(v16 + 48);
  if (!v21)
  {
    uint64_t v22 = 4294954514;
    goto LABEL_29;
  }
  uint64_t v22 = v21(v14, @"LocalNetworkPort", a3, a4);
  if (v22) {
    goto LABEL_29;
  }
  return v22;
}

uint64_t stream_setPropertyInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    return 4294950679;
  }
  uint64_t v3 = DerivedStorage;
  uint64_t v4 = 56;
  if (*(_DWORD *)(DerivedStorage + 24)) {
    uint64_t v5 = 56;
  }
  else {
    uint64_t v5 = 48;
  }
  uint64_t v6 = *(void *)(DerivedStorage + v5);
  if (*(_DWORD *)(DerivedStorage + 24)) {
    uint64_t v4 = 48;
  }
  uint64_t v7 = *(void *)(DerivedStorage + v4);
  if (!CFEqual(*(CFTypeRef *)(a1 + 8), @"ReverseConnectionLocalPort"))
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 8), @"ReverseConnectionRemotePort"))
    {
      uint64_t v13 = *(void *)(v7 + 24);
      if (!v13) {
        goto LABEL_52;
      }
      uint64_t v14 = *(void *)(a1 + 16);
      uint64_t CMBaseObject = APTransportConnectionGetCMBaseObject(v13);
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v25 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v17 + 56);
      if (v25)
      {
        uint64_t v19 = v25(CMBaseObject, @"RemoteNetworkPort", v14);
        if (v19) {
          goto LABEL_38;
        }
        return v19;
      }
      uint64_t v19 = 4294954514;
    }
    else
    {
      if (!CFEqual(*(CFTypeRef *)(a1 + 8), @"QualityOfService"))
      {
        int v26 = CFEqual(*(CFTypeRef *)(a1 + 8), @"PackageSendTimeout");
        uint64_t v27 = *(void *)(v6 + 24);
        if (v26)
        {
          if (v27)
          {
            uint64_t v28 = *(void *)(a1 + 16);
            uint64_t v29 = APTransportConnectionGetCMBaseObject(v27);
            uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v30) {
              uint64_t v31 = v30;
            }
            else {
              uint64_t v31 = 0;
            }
            CFMutableDictionaryRef v34 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v31 + 56);
            if (v34)
            {
              int v35 = v34(v29, @"PackageSendTimeout", v28);
              unsigned int v36 = v35;
              if (v35 == -12784)
              {
                *(_DWORD *)(v3 + 176) = CFGetInt64Ranged();
                int v35 = -12784;
              }
              if (!v35) {
                return 0;
              }
            }
            else
            {
              unsigned int v36 = -12782;
            }
            APSLogErrorAt();
            return v36;
          }
        }
        else if (v27)
        {
          uint64_t v19 = APTransportConnectionSetProperty(v27, *(void *)(a1 + 8), *(void *)(a1 + 16));
          if (!v19) {
            return v19;
          }
          goto LABEL_38;
        }
LABEL_52:
        APSLogErrorAt();
        return 4294960587;
      }
      uint64_t v20 = *(void *)(v7 + 24);
      if (!v20) {
        goto LABEL_52;
      }
      uint64_t v21 = *(void *)(a1 + 16);
      uint64_t v22 = APTransportConnectionGetCMBaseObject(v20);
      uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v23) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v32 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v24 + 56);
      if (v32)
      {
        uint64_t v19 = v32(v22, @"QualityOfService", v21);
        if (v19) {
          goto LABEL_38;
        }
        return v19;
      }
      uint64_t v19 = 4294954514;
    }
LABEL_38:
    APSLogErrorAt();
    return v19;
  }
  uint64_t v8 = *(void *)(v7 + 24);
  if (!v8) {
    goto LABEL_52;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = APTransportConnectionGetCMBaseObject(v8);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v18 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v12 + 56);
  if (!v18)
  {
    uint64_t v19 = 4294954514;
    goto LABEL_38;
  }
  uint64_t v19 = v18(v10, @"LocalNetworkPort", v9);
  if (v19) {
    goto LABEL_38;
  }
  return v19;
}

uint64_t stream_DumpHierarchy_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = DerivedStorage;
  if (DerivedStorage)
  {
    int v11 = *(_DWORD *)(DerivedStorage + 24);
    uint64_t v12 = 56;
    if (!v11) {
      uint64_t v12 = 48;
    }
    uint64_t v13 = *(void *)(DerivedStorage + v12);
    if (v11) {
      uint64_t v14 = *(void *)(DerivedStorage + 48);
    }
    else {
      uint64_t v14 = *(void *)(DerivedStorage + 56);
    }
  }
  else
  {
    APSLogErrorAt();
    APSLogErrorAt();
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, a3, "Stream:[%{ptr}] (Buffered) %''@ Parent:[%{ptr}]\n", a1, *(void *)(v10 + 88), a2);
  if (v15)
  {
    uint64_t v18 = v15;
LABEL_17:
    APSLogErrorAt();
    return v18;
  }
  uint64_t v16 = a3 + 1;
  uint64_t v17 = stream_dumpConnectionInfo(a1, v13, v16, a5);
  if (v17)
  {
    uint64_t v18 = v17;
    goto LABEL_17;
  }
  if (v14 == v13) {
    return 0;
  }
  uint64_t v18 = stream_dumpConnectionInfo(a1, v14, v16, a5);
  if (v18) {
    goto LABEL_17;
  }
  return v18;
}

uint64_t stream_dumpConnectionInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 24);
  if (*(_DWORD *)(a2 + 96)) {
    uint64_t v8 = @"receive";
  }
  else {
    uint64_t v8 = @"send";
  }
  APSHierarchyReporterProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (uint64_t v10 = *(void *)(ProtocolVTable + 16)) == 0)
  {
    uint64_t result = 4294954508;
    goto LABEL_13;
  }
  int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __CFString *, uint64_t))(v10 + 8);
  if (!v11)
  {
    uint64_t result = 4294954514;
    if (a4) {
      return (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a4 + 16))(a4, a3, "[Error] Object:[%{ptr}]%?s%?''@ cannot be dumped (error %#m) Parent:[%{ptr}]\n", v7, v8, " ", v8, v8, result, a1);
    }
    return 0;
  }
  uint64_t result = v11(v7, a1, a3, v8, a4);
  if (result == -12782 || result == -12788)
  {
LABEL_13:
    if (a4) {
      return (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a4 + 16))(a4, a3, "[Error] Object:[%{ptr}]%?s%?''@ cannot be dumped (error %#m) Parent:[%{ptr}]\n", v7, v8, " ", v8, v8, result, a1);
    }
    return 0;
  }
  return result;
}

uint64_t stream_Resume_0(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  uint64_t v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 64);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  _DWORD v5[2] = __stream_Resume_block_invoke_0;
  v5[3] = &unk_1E688D978;
  v5[4] = &v6;
  v5[5] = a1;
  dispatch_sync(v2, v5);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t stream_WaitUntilConnected_0(uint64_t a1)
{
  return stream_waitUntilConnectedInternal(a1, 0);
}

uint64_t stream_SetMessageCallbacks_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = *(NSObject **)(DerivedStorage + 184);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = __stream_SetMessageCallbacks_block_invoke_0;
  v10[3] = &__block_descriptor_tmp_158;
  v10[4] = DerivedStorage;
  void v10[5] = a2;
  v10[6] = a3;
  void v10[7] = a4;
  dispatch_sync(v8, v10);
  return 0;
}

uint64_t stream_AcquireMessageBBuf()
{
  return APSDispatchSyncTask();
}

uint64_t stream_RelinquishMessageBBuf(const void *a1, uint64_t a2)
{
  if (a2)
  {
    CFRetain(a1);
    APSDispatchAsyncFHelper();
  }
  return 0;
}

uint64_t stream_SendMessage(const void *a1, uint64_t a2, const void *a3)
{
  if (a3) {
    CFRetain(a3);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t stream_SendMessageCreatingReply(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = 0;
  double v40 = &v39;
  uint64_t v41 = 0x2000000000;
  int v42 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = DerivedStorage;
  uint64_t v35 = 0;
  unsigned int v36 = &v35;
  uint64_t v37 = 0x2000000000;
  int v38 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x2000000000;
  uint64_t v34 = 0;
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    uint64_t v24 = v40;
    int v25 = -16617;
  }
  else
  {
    uint64_t v10 = 56;
    if (!*(_DWORD *)(DerivedStorage + 24)) {
      uint64_t v10 = 48;
    }
    uint64_t v11 = *(void *)(DerivedStorage + v10);
    if (*(unsigned char *)(v11 + 9))
    {
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(DerivedStorage + 32), 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v12 = *(NSObject **)(v9 + 64);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __stream_SendMessageCreatingReply_block_invoke;
      block[3] = &unk_1E688DA08;
      int v30 = a2;
      void block[8] = a3;
      void block[9] = v9;
      block[10] = v11;
      block[4] = &v39;
      void block[5] = &v35;
      void block[6] = &v31;
      void block[7] = a1;
      dispatch_sync(v12, block);
      if (*((_DWORD *)v40 + 6)) {
        goto LABEL_19;
      }
      uint64_t v13 = v32[3];
      int v14 = *((_DWORD *)v36 + 6);
      if (v14) {
        dispatch_time_t v15 = dispatch_time(0, 1000000000 * v14);
      }
      else {
        dispatch_time_t v15 = -1;
      }
      intptr_t v16 = dispatch_semaphore_wait(v13, v15);
      BOOL v17 = v16 != 0;
      if (!v16) {
        goto LABEL_18;
      }
      int v18 = gLogCategory_APTransportStream;
      if (gLogCategory_APTransportStream > 50) {
        goto LABEL_18;
      }
      if (gLogCategory_APTransportStream == -1)
      {
        if (!_LogCategory_Initialize())
        {
LABEL_18:
          uint64_t v19 = *(NSObject **)(v9 + 64);
          v27[0] = MEMORY[0x1E4F143A8];
          v27[1] = 0x40000000;
          v27[2] = __stream_SendMessageCreatingReply_block_invoke_2;
          v27[3] = &unk_1E688DA30;
          v27[4] = &v39;
          v27[5] = v9;
          BOOL v28 = v17;
          void v27[6] = a4;
          dispatch_sync(v19, v27);
          goto LABEL_19;
        }
        int v18 = gLogCategory_APTransportStream;
      }
      if (v18 == -1) {
        _LogCategory_Initialize();
      }
      LogPrintF();
      goto LABEL_18;
    }
    APSLogErrorAt();
    uint64_t v24 = v40;
    int v25 = -16614;
  }
  *((_DWORD *)v24 + 6) = v25;
LABEL_19:
  uint64_t v20 = v32[3];
  if (v20) {
    dispatch_release(v20);
  }
  uint64_t v21 = *(NSObject **)(v9 + 64);
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 0x40000000;
  socklen_t v26[2] = __stream_SendMessageCreatingReply_block_invoke_3;
  v26[3] = &__block_descriptor_tmp_165;
  v26[4] = v9;
  dispatch_sync(v21, v26);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v9 + 32));
  uint64_t v22 = *((unsigned int *)v40 + 6);
  if (v22 == -6722)
  {
    CMBaseObjectGetDerivedStorage();
    APSDispatchSyncTask();
    uint64_t v22 = *((unsigned int *)v40 + 6);
  }
  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v39, 8);
  return v22;
}

uint64_t stream_ConfigureEncryption()
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportStream <= 30
    && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v0 = APSDispatchSyncTask();
  if (v0) {
    APSLogErrorAt();
  }
  return v0;
}

uint64_t stream_SendBatch(const void *a1, uint64_t a2, const void *a3)
{
  if (a1 && a3)
  {
    if (CFArrayGetCount((CFArrayRef)a3) >= 1)
    {
      CFRetain(a1);
      CFRetain(a3);
      APSDispatchAsyncFHelper();
    }
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294950686;
  }
}

void stream_postCachedConnectionEvent(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(void *)(a2 + 32);
  if (v5)
  {
    int v6 = *(_DWORD *)(a2 + 16);
    if (v6)
    {
      uint64_t v7 = DerivedStorage;
      CFRetain(a1);
      uint64_t v8 = *(NSObject **)(v7 + 184);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __stream_postCachedConnectionEvent_block_invoke_0;
      block[3] = &__block_descriptor_tmp_156;
      int v10 = v6;
      block[4] = v5;
      void block[5] = a1;
      dispatch_async(v8, block);
    }
  }
  else
  {
    APSLogErrorAt();
  }
}

void __stream_postCachedConnectionEvent_block_invoke_0(uint64_t a1)
{
  (*(void (**)(void, void, void))(a1 + 32))(*(unsigned int *)(a1 + 48), 0, *(void *)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 40);
  CFRelease(v2);
}

uint64_t stream_waitUntilConnectedInternal(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v17 = 0;
  int v18 = &v17;
  uint64_t v19 = 0x2000000000;
  int v20 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2000000000;
  void v16[3] = 0;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000;
  uint64_t v15 = 0;
  int v5 = stream_waitUntilConnectionSetup(a1, 0);
  *((_DWORD *)v18 + 6) = v5;
  if (v5)
  {
    APSLogErrorAt();
  }
  else if (a2)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    v13[3] = (uint64_t)Mutable;
    if (Mutable)
    {
      uint64_t v7 = *(NSObject **)(DerivedStorage + 64);
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 0x40000000;
      v11[2] = __stream_waitUntilConnectedInternal_block_invoke;
      void v11[3] = &unk_1E688D9C0;
      v11[4] = &v17;
      void v11[5] = v16;
      void v11[6] = &v12;
      v11[7] = DerivedStorage;
      dispatch_sync(v7, v11);
      if (!*((_DWORD *)v18 + 6)) {
        *a2 = CFRetain((CFTypeRef)v13[3]);
      }
    }
    else
    {
      APSLogErrorAt();
      *((_DWORD *)v18 + 6) = -16611;
    }
  }
  uint64_t v8 = (const void *)v13[3];
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *((unsigned int *)v18 + 6);
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(v16, 8);
  _Block_object_dispose(&v17, 8);
  return v9;
}

uint64_t __stream_waitUntilConnectedInternal_block_invoke(void *a1)
{
  uint64_t v2 = a1[7];
  if (*(unsigned char *)(v2 + 72))
  {
    uint64_t result = APSLogErrorAt();
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = -16617;
  }
  else
  {
    stream_getConnectionState(v2, 0, (void *)(*(void *)(a1[5] + 8) + 24));
    CFDictionarySetData();
    return CFDictionarySetInt64();
  }
  return result;
}

uint64_t stream_acquireMessageBBufInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v24 = 0;
  int v25 = 0;
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    uint64_t DataPointer = APSSignalErrorAt();
    uint64_t v5 = 0;
    goto LABEL_13;
  }
  uint64_t v3 = DerivedStorage;
  uint64_t v4 = 56;
  if (!*(_DWORD *)(DerivedStorage + 24)) {
    uint64_t v4 = 48;
  }
  uint64_t v5 = *(void *)(DerivedStorage + v4);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = *(uint64_t (**)(uint64_t, uint64_t, const void **))(v9 + 40);
  if (!v10)
  {
    uint64_t DataPointer = 4294954514;
LABEL_12:
    APSLogErrorAt();
LABEL_13:
    intptr_t v16 = 0;
    goto LABEL_14;
  }
  uint64_t v11 = v10(v6, v7, &v25);
  if (v11)
  {
    uint64_t DataPointer = v11;
    goto LABEL_12;
  }
  uint64_t v12 = v25;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(const void *))(v14 + 8);
  if (v21) {
    intptr_t v16 = (void *)v21(v12);
  }
  else {
    intptr_t v16 = 0;
  }
  CFSetAddValue(*(CFMutableSetRef *)(v3 + 104), v16);
  uint64_t DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)v16, 0, 0, 0, &v24);
  if (!DataPointer)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 112), v24, v25);
    **(void **)(a1 + 16) = v16;
    int v25 = 0;
    goto LABEL_26;
  }
  APSLogErrorAt();
LABEL_14:
  uint64_t v17 = v25;
  if (v25)
  {
    uint64_t v18 = *(void *)(v5 + 24);
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v20 = v19 ? v19 : 0;
    uint64_t v22 = *(void (**)(uint64_t, const void *))(v20 + 48);
    if (v22) {
      v22(v18, v17);
    }
  }
LABEL_26:
  if (v16) {
    CFRelease(v16);
  }
  return DataPointer;
}

void stream_relinquishMessageBBufInternal(CFTypeRef *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dataPointerOut = 0;
  if (!CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 104), a1[1])) {
    goto LABEL_11;
  }
  if (CMBlockBufferGetDataPointer((CMBlockBufferRef)a1[1], 0, 0, 0, &dataPointerOut)) {
    goto LABEL_11;
  }
  CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 112), dataPointerOut);
  if (!Value) {
    goto LABEL_11;
  }
  uint64_t v4 = Value;
  CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 104), a1[1]);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 112), dataPointerOut);
  uint64_t v5 = 56;
  if (!*(_DWORD *)(DerivedStorage + 24)) {
    uint64_t v5 = 48;
  }
  uint64_t v6 = *(void *)(*(void *)(DerivedStorage + v5) + 24);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v8 = v7 ? v7 : 0;
  uint64_t v9 = *(unsigned int (**)(uint64_t, const void *))(v8 + 48);
  if (!v9 || v9(v6, v4)) {
LABEL_11:
  }
    APSLogErrorAt();
  if (*a1) {
    CFRelease(*a1);
  }
}

void stream_sendMessageInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  CFTypeRef cf = 0;
  char v18 = 0;
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v4 = 56;
    if (!*(_DWORD *)(DerivedStorage + 24)) {
      uint64_t v4 = 48;
    }
    uint64_t v5 = *(void *)(DerivedStorage + v4);
    if (!*(unsigned char *)(v5 + 9)
      || stream_copyFormattedAsyncPackageForBBuf(*(void *)a1, *(OpaqueCMBlockBuffer **)(a1 + 16), *(unsigned int *)(a1 + 8), &cf, &v18))
    {
      goto LABEL_15;
    }
    if (gLogCategory_APTransportStream <= 10
      && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v6 = *(void *)(v5 + 24);
    CFTypeRef v7 = cf;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v9 = v8 ? v8 : 0;
    int v10 = *(unsigned int (**)(uint64_t, CFTypeRef))(v9 + 56);
    if (!v10 || v10(v6, v7)) {
LABEL_15:
    }
      APSLogErrorAt();
  }
  if (v18)
  {
    uint64_t v11 = *(void *)(v3 + 40);
    if (v11)
    {
      APTransportStreamSendBackingProviderRelinquishBBuf(v11, *(void **)(a1 + 16));
    }
    else
    {
      uint64_t v13 = *(void *)(v5 + 24);
      CFTypeRef v14 = cf;
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(void (**)(uint64_t, CFTypeRef))(v16 + 48);
      if (v17) {
        v17(v13, v14);
      }
    }
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v12 = *(const void **)(a1 + 16);
  if (v12) {
    CFRelease(v12);
  }
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t stream_copyFormattedAsyncPackageForBBuf(uint64_t a1, OpaqueCMBlockBuffer *a2, uint64_t a3, CFTypeRef *a4, char *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    return 4294950679;
  }
  else if (a2 && a4 && a5)
  {
    uint64_t v11 = DerivedStorage;
    uint64_t v12 = stream_copyPackageForBBuf(a1, a2, a4, a5);
    if (v12)
    {
      uint64_t v17 = (const void *)v12;
      APSLogErrorAt();
    }
    else
    {
      CFTypeRef v13 = *a4;
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(uint64_t (**)(CFTypeRef))(v15 + 8);
      if (v16) {
        uint64_t v17 = (const void *)v16(v13);
      }
      else {
        uint64_t v17 = 0;
      }
      CFTypeRef v18 = *a4;
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = *(void (**)(CFTypeRef, uint64_t))(v20 + 32);
      if (v21) {
        v21(v18, a3);
      }
      if (!*(void *)(v11 + 40) || !v17)
      {
        CFTypeRef v22 = *a4;
        uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v24 = v23 ? v23 : 0;
        int v25 = *(void (**)(CFTypeRef, OpaqueCMBlockBuffer *))(v24 + 16);
        if (v25) {
          v25(v22, a2);
        }
      }
      uint64_t v26 = *(void *)(v11 + 96);
      if (v26)
      {
        CFTypeRef v27 = *a4;
        uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v29 = v28 ? v28 : 0;
        int v30 = *(void (**)(CFTypeRef, uint64_t))(v29 + 72);
        if (v30) {
          v30(v27, v26);
        }
      }
      CFTypeRef v31 = *a4;
      uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v32) {
        uint64_t v33 = v32;
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v34 = *(void (**)(CFTypeRef, uint64_t))(v33 + 88);
      if (v34) {
        v34(v31, 1634957678);
      }
      if (v17)
      {
        CFRelease(v17);
        return 0;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950686;
  }
  return (uint64_t)v17;
}

uint64_t stream_copyPackageForBBuf(uint64_t a1, OpaqueCMBlockBuffer *a2, CFTypeRef *a3, char *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    return 4294950679;
  }
  uint64_t v8 = DerivedStorage;
  if (!a2) {
    goto LABEL_11;
  }
  size_t lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  size_t v23 = 0;
  uint64_t DataPointer = CMBlockBufferGetDataPointer(a2, 0, &lengthAtOffsetOut, &v23, &dataPointerOut);
  if (DataPointer)
  {
    uint64_t v15 = DataPointer;
    goto LABEL_26;
  }
  if (lengthAtOffsetOut == v23)
  {
    uint64_t v10 = *(void *)(v8 + 40);
    if (v10)
    {
      APTransportStreamSendBackingProviderCopyPackageForAcquiredBBuf(v10, a2, &cf);
    }
    else
    {
      CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v8 + 112), dataPointerOut);
      CFTypeRef cf = Value;
      if (!Value) {
        goto LABEL_11;
      }
      CFRetain(Value);
    }
  }
  if (!cf)
  {
LABEL_11:
    uint64_t v13 = *(void *)(v8 + 40);
    if (v13)
    {
      uint64_t v14 = APTransportStreamSendBackingProviderCopyPackageForGivenBBuf(v13, a2, &cf);
      if (!v14)
      {
LABEL_13:
        char v12 = 1;
        goto LABEL_14;
      }
      uint64_t v15 = v14;
    }
    else
    {
      uint64_t v17 = 56;
      if (!*(_DWORD *)(v8 + 24)) {
        uint64_t v17 = 48;
      }
      uint64_t v18 = *(void *)(*(void *)(v8 + v17) + 24);
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v20 + 32);
      if (v21)
      {
        uint64_t v22 = v21(v18, &cf);
        if (!v22)
        {
          if (cf) {
            CFRetain(cf);
          }
          goto LABEL_13;
        }
        uint64_t v15 = v22;
      }
      else
      {
        uint64_t v15 = 4294954514;
      }
    }
LABEL_26:
    APSLogErrorAt();
    return v15;
  }
  char v12 = 0;
LABEL_14:
  uint64_t v15 = 0;
  *a3 = cf;
  *a4 = v12;
  return v15;
}

void stream_sendMessageExpectingReplyInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  CFTypeRef cf = 0;
  char v41 = 0;
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    uint64_t v5 = 0;
    int v32 = -16617;
  }
  else
  {
    uint64_t v4 = 56;
    if (!*(_DWORD *)(DerivedStorage + 24)) {
      uint64_t v4 = 48;
    }
    uint64_t v5 = *(void *)(DerivedStorage + v4);
    if (*(unsigned char *)(v5 + 9))
    {
      int v6 = stream_copyPackageForBBuf(*(void *)a1, *(OpaqueCMBlockBuffer **)(a1 + 16), &cf, &v41);
      if (v6)
      {
        int v32 = v6;
      }
      else
      {
        CFTypeRef v7 = cf;
        uint64_t v8 = *(unsigned int *)(a1 + 8);
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v9) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *(void (**)(CFTypeRef, uint64_t))(v10 + 32);
        if (v11) {
          v11(v7, v8);
        }
        uint64_t v12 = *(void *)(a1 + 16);
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = *(void (**)(CFTypeRef, uint64_t))(v14 + 16);
        if (v15) {
          v15(v7, v12);
        }
        uint64_t v16 = *(void *)a1;
        uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = *(void (**)(CFTypeRef, uint64_t))(v18 + 48);
        if (v19) {
          v19(v7, v16);
        }
        uint64_t v20 = *(void *)(v3 + 96);
        if (v20)
        {
          uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v22 = v21 ? v21 : 0;
          size_t v23 = *(void (**)(CFTypeRef, uint64_t))(v22 + 72);
          if (v23) {
            v23(v7, v20);
          }
        }
        uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v24) {
          uint64_t v25 = v24;
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v26 = *(void (**)(CFTypeRef, uint64_t))(v25 + 88);
        if (v26) {
          v26(v7, 1937337955);
        }
        if (gLogCategory_APTransportStream <= 10
          && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v27 = *(void *)(v5 + 24);
        uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v28) {
          uint64_t v29 = v28;
        }
        else {
          uint64_t v29 = 0;
        }
        int v30 = *(uint64_t (**)(uint64_t, CFTypeRef))(v29 + 56);
        if (v30)
        {
          int v31 = v30(v27, v7);
          if (!v31) {
            goto LABEL_46;
          }
          int v32 = v31;
        }
        else
        {
          int v32 = -12782;
        }
      }
      APSLogErrorAt();
    }
    else
    {
      APSLogErrorAt();
      int v32 = -16614;
    }
  }
  if (!*(unsigned char *)(v3 + 72))
  {
    *(_DWORD *)(v3 + 152) = v32;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v3 + 168));
  }
LABEL_46:
  if (v41)
  {
    uint64_t v33 = *(void *)(v3 + 40);
    if (v33)
    {
      APTransportStreamSendBackingProviderRelinquishBBuf(v33, *(void **)(a1 + 16));
    }
    else
    {
      uint64_t v36 = *(void *)(v5 + 24);
      CFTypeRef v37 = cf;
      uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v38) {
        uint64_t v39 = v38;
      }
      else {
        uint64_t v39 = 0;
      }
      double v40 = *(void (**)(uint64_t, CFTypeRef))(v39 + 48);
      if (v40) {
        v40(v36, v37);
      }
    }
  }
  CFRelease(*(CFTypeRef *)a1);
  uint64_t v34 = *(const void **)(a1 + 16);
  if (v34) {
    CFRelease(v34);
  }
  CFTypeRef v35 = cf;
  if (cf)
  {
    CFRelease(v35);
  }
}

uint64_t stream_configureEncryptionInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    return 4294950679;
  }
  uint64_t v3 = DerivedStorage;
  uint64_t v4 = *(const void **)(DerivedStorage + 120);
  uint64_t v5 = *(const void **)(a1 + 8);
  *(void *)(v3 + 120) = v5;
  if (v5) {
    CFRetain(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  int v6 = *(const void **)(v3 + 128);
  CFTypeRef v7 = *(const void **)(a1 + 16);
  *(void *)(v3 + 128) = v7;
  if (v7) {
    CFRetain(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v8 = 56;
  if (!*(_DWORD *)(v3 + 24)) {
    uint64_t v8 = 48;
  }
  uint64_t v9 = *(void *)(*(void *)(v3 + v8) + 24);
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 80);
  if (!v14)
  {
    uint64_t v15 = 4294954514;
LABEL_19:
    APSLogErrorAt();
    return v15;
  }
  uint64_t v15 = v14(v9, v11, v10);
  if (v15) {
    goto LABEL_19;
  }
  return v15;
}

void stream_sendBatchInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  if (*(unsigned char *)(DerivedStorage + 72)) {
    goto LABEL_55;
  }
  uint64_t v4 = 56;
  if (!*(_DWORD *)(DerivedStorage + 24)) {
    uint64_t v4 = 48;
  }
  uint64_t v5 = *(void *)(DerivedStorage + v4);
  if (*(unsigned char *)(v5 + 9)
    && (uint64_t v6 = Count,
        CFAllocatorRef v7 = CFGetAllocator(*(CFTypeRef *)(a1 + 16)),
        (CFMutableArrayRef Mutable = CFArrayCreateMutable(v7, v6, MEMORY[0x1E4F1D510])) != 0))
  {
    CFArrayRef v9 = Mutable;
    CFAllocatorRef v10 = CFGetAllocator(*(CFTypeRef *)(a1 + 16));
    uint64_t v11 = (char *)CFAllocatorAllocate(v10, v6, 0);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v32 = v5;
      bzero(v11, v6);
      if (gLogCategory_APTransportStream <= 10
        && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v6 < 1)
      {
LABEL_23:
        if (gLogCategory_APTransportStream <= 10
          && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v17 = v32;
        uint64_t v18 = *(void *)(v32 + 24);
        uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v19) {
          uint64_t v20 = v19;
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v21 = *(uint64_t (**)(uint64_t, const __CFArray *))(v20 + 88);
        if (v21) {
          int v22 = v21(v18, v9);
        }
        else {
          int v22 = APTransportConnectionSendBatchSlow(v18, v9);
        }
        if (v22) {
          APSLogErrorAt();
        }
      }
      else
      {
        CFIndex v13 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (OpaqueCMBlockBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v13);
          if (!ValueAtIndex) {
            break;
          }
          uint64_t v15 = ValueAtIndex;
          CFTypeID v16 = CFGetTypeID(ValueAtIndex);
          if (v16 != CMBlockBufferGetTypeID()
            || stream_copyFormattedAsyncPackageForBBuf(*(void *)a1, v15, *(unsigned int *)(a1 + 8), (CFTypeRef *)&value, &v12[v13]))
          {
            break;
          }
          if (gLogCategory_APTransportStream <= 10
            && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          CFArrayAppendValue(v9, value);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
          if (v6 == ++v13) {
            goto LABEL_23;
          }
        }
        APSLogErrorAt();
        uint64_t v17 = v32;
      }
      if (v6 >= 1)
      {
        for (CFIndex i = 0; i != v6; ++i)
        {
          if (v12[i])
          {
            if (*(void *)(DerivedStorage + 40))
            {
              uint64_t v24 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
              APTransportStreamSendBackingProviderRelinquishBBuf(*(void *)(DerivedStorage + 40), v24);
            }
            else
            {
              uint64_t v25 = (void *)CFArrayGetValueAtIndex(v9, i);
              value = v25;
              uint64_t v26 = *(void *)(v17 + 24);
              uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v27) {
                uint64_t v28 = v27;
              }
              else {
                uint64_t v28 = 0;
              }
              uint64_t v29 = *(void (**)(uint64_t, void *))(v28 + 48);
              if (v29) {
                v29(v26, v25);
              }
            }
          }
        }
      }
      CFAllocatorRef v30 = CFGetAllocator(*(CFTypeRef *)(a1 + 16));
      CFAllocatorDeallocate(v30, v12);
    }
    else
    {
      APSLogErrorAt();
    }
    CFRelease(v9);
  }
  else
  {
LABEL_55:
    APSLogErrorAt();
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  int v31 = *(const void **)(a1 + 16);
  if (v31) {
    CFRelease(v31);
  }
}

uint64_t stream_createConnectionState(const void *a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v17 = 0;
  if (a5 && a1 && a3)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v11 = malloc_type_calloc(1uLL, 0x68uLL, 0x10E00401F955E56uLL);
    uint64_t v17 = v11;
    if (v11 && (v12 = v11, dispatch_semaphore_t v13 = dispatch_semaphore_create(0), (*(void *)v12 = v13) != 0))
    {
      v12[4] = 0;
      *((void *)v12 + 3) = CFRetain(a1);
      *((void *)v12 + 4) = a2;
      v12[24] = a4;
      uint64_t v14 = *(const void **)(DerivedStorage + 88);
      *((void *)v12 + 11) = v14;
      if (v14) {
        CFRetain(v14);
      }
      *((void *)v12 + 10) = a3;
      if (gLogCategory_APTransportStream <= 50
        && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v15 = 0;
      *a5 = v12;
      uint64_t v17 = 0;
    }
    else
    {
      APSLogErrorAt();
      uint64_t v15 = 4294950685;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v15 = 4294950686;
  }
  stream_forgetConnectionState((uint64_t *)&v17);
  return v15;
}

uint64_t stream_handleEventFromSendConnection_0(int a1, const void *a2, const void *a3)
{
  return 0;
}

uint64_t stream_handleEventFromReceiveConnection(int a1, const void *a2, const void *a3)
{
  return 0;
}

void stream_handleEventFromConnection(const void *a1, int a2, const void *a3, char a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  if (a3) {
    CFRetain(a3);
  }
  CFArrayRef v9 = *(NSObject **)(DerivedStorage + 64);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = __stream_handleEventFromConnection_block_invoke;
  v10[3] = &__block_descriptor_tmp_172;
  int v11 = a2;
  v10[4] = a1;
  void v10[5] = a3;
  char v12 = a4;
  v10[6] = DerivedStorage;
  dispatch_async(v9, v10);
}

void __stream_handleEventFromConnection_block_invoke(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 56);
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(const void **)(a1 + 40);
  uint64_t v5 = 48;
  if (!*(unsigned char *)(a1 + 60)) {
    uint64_t v5 = 56;
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + v5);
  int v83 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v81 = 0;
  CFTypeRef cf = 0;
  theCFDataRef Data = 0;
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    int v79 = -16617;
    goto LABEL_178;
  }
  uint64_t v8 = DerivedStorage;
  if (v2 == 7) {
    int v9 = 30;
  }
  else {
    int v9 = 50;
  }
  if (v9 >= gLogCategory_APTransportStream
    && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
  {
    if (gLogCategory_APTransportStream == -1) {
      _LogCategory_Initialize();
    }
    LogPrintF();
  }
  if (*(unsigned char *)(v6 + 9))
  {
    if (v4)
    {
      CFTypeID v10 = CFGetTypeID(v4);
      if (v10 == APTransportPackageGetTypeID())
      {
        uint64_t v11 = *(void *)(v8 + 96);
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v13 = v12 ? v12 : 0;
        uint64_t v14 = *(uint64_t (**)(const void *))(v13 + 80);
        uint64_t v15 = v14 ? v14(v4) : 0;
        if (v11 != v15)
        {
          APSLogErrorAt();
          int v79 = -16618;
          goto LABEL_178;
        }
      }
    }
    switch(v2)
    {
      case 1:
      case 2:
      case 3:
        stream_recordConnectionEvent((int)v3, v2, (const __CFData *)v4);
        goto LABEL_165;
      case 4:
        *(_DWORD *)(v6 + 16) = 0;
        if (gLogCategory_APTransportStream <= 90
          && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (*(unsigned char *)(v6 + 9))
        {
          *(unsigned char *)(v6 + 8) = 0;
          if (v4)
          {
            CFTypeID v53 = CFGetTypeID(v4);
            if (v53 == CFNumberGetTypeID())
            {
              CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, (void *)(v6 + 12));
              FigCreateBlockBufferCopyingMemoryBlock();
            }
          }
          CFRetain(v3);
          if (cf)
          {
            CFRetain(cf);
            CFTypeRef v54 = cf;
          }
          else
          {
            CFTypeRef v54 = 0;
          }
          int v55 = *(NSObject **)(v8 + 184);
          uint64_t valuePtr = MEMORY[0x1E4F143A8];
          uint64_t v85 = 0x40000000;
          uint64_t v86 = __stream_eventReceived_block_invoke_2_0;
          CFAllocatorRef v87 = &__block_descriptor_tmp_187;
          uint64_t v88 = (void *)v8;
          uint64_t v89 = (uint64_t *)v3;
          uint64_t v90 = (uint64_t)v54;
          dispatch_async(v55, &valuePtr);
        }
        APTransportSessionHandleStreamEvent(*(const void **)(v8 + 80), v3, 0, v4);
        goto LABEL_149;
      case 5:
        stream_recordConnectionEvent((int)v3, 5, (const __CFData *)v4);
        if (*(void *)(v8 + 48) == *(void *)(v8 + 56)) {
          goto LABEL_88;
        }
        uint64_t CMBaseObject = APTransportConnectionGetCMBaseObject(*(void *)(v6 + 24));
        uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v50 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v18 + 48);
        if (v50)
        {
          int v83 = v50(CMBaseObject, @"RemoteNetworkIPAddress", 0, &v81);
          if (!v83)
          {
            int v51 = *(const void **)(v6 + 40);
            CFTypeRef v52 = v81;
            *(void *)(v6 + 40) = v81;
            if (v52) {
              CFRetain(v52);
            }
            if (v51) {
              CFRelease(v51);
            }
LABEL_88:
            *(_DWORD *)(v6 + 76) = APSGetFBOPropertyInt64();
            if (v83)
            {
              if (gLogCategory_APTransportStream <= 30
                && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              int v83 = 0;
            }
            uint64_t v67 = APTransportConnectionGetCMBaseObject(*(void *)(v6 + 24));
            uint64_t v68 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v68) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = 0;
            }
            long long v70 = *(uint64_t (**)(uint64_t, __CFString *, void, CFDataRef *))(v69 + 48);
            if (v70)
            {
              int v83 = v70(v67, @"LocalNetworkIPAddress", 0, &theData);
              if (v83) {
                BOOL v71 = 1;
              }
              else {
                BOOL v71 = theData == 0;
              }
              if (!v71)
              {
                if (CFDataGetLength(theData) == 28)
                {
                  v102.location = 0;
                  v102.CFIndex length = 28;
                  CFDataGetBytes(theData, v102, (UInt8 *)(v6 + 48));
LABEL_147:
                  *(_DWORD *)(v6 + 16) = 0;
                  if (*(unsigned char *)(v6 + 9))
                  {
                    *(unsigned char *)(v6 + 8) = 1;
                    *(_DWORD *)(v6 + 12) = 0;
                    CFRetain(v3);
                    long long v72 = *(NSObject **)(v8 + 184);
                    uint64_t valuePtr = MEMORY[0x1E4F143A8];
                    uint64_t v85 = 0x40000000;
                    uint64_t v86 = __stream_eventReceived_block_invoke_0;
                    CFAllocatorRef v87 = &__block_descriptor_tmp_185;
                    uint64_t v88 = (void *)v8;
                    uint64_t v89 = (uint64_t *)v3;
                    dispatch_async(v72, &valuePtr);
                  }
LABEL_149:
                  int v44 = *(NSObject **)v6;
LABEL_150:
                  dispatch_semaphore_signal(v44);
                  goto LABEL_165;
                }
                APSLogErrorAt();
                int v79 = -6742;
LABEL_178:
                int v83 = v79;
                goto LABEL_165;
              }
            }
            else
            {
              int v83 = -12782;
            }
            if (gLogCategory_APTransportStream <= 30
              && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            int v83 = 0;
            goto LABEL_147;
          }
        }
        else
        {
          int v83 = -12782;
        }
        APSLogErrorAt();
        goto LABEL_165;
      case 6:
        *(_DWORD *)(v6 + 16) = 0;
        *(unsigned char *)(v6 + 8) = 0;
        if (v4)
        {
          CFTypeID v19 = CFGetTypeID(v4);
          if (v19 == CFNumberGetTypeID())
          {
            LODWORD(valuePtr) = 0;
            CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr);
            FigCreateBlockBufferCopyingMemoryBlock();
          }
        }
        CFRetain(v3);
        if (cf)
        {
          CFRetain(cf);
          CFTypeRef v20 = cf;
        }
        else
        {
          CFTypeRef v20 = 0;
        }
        uint64_t v28 = *(NSObject **)(v8 + 184);
        uint64_t valuePtr = MEMORY[0x1E4F143A8];
        uint64_t v85 = 0x40000000;
        uint64_t v86 = __stream_eventReceived_block_invoke_3_0;
        CFAllocatorRef v87 = &__block_descriptor_tmp_188;
        uint64_t v88 = (void *)v8;
        uint64_t v89 = (uint64_t *)v3;
        uint64_t v90 = (uint64_t)v20;
        dispatch_async(v28, &valuePtr);
        APTransportSessionHandleStreamEvent(*(const void **)(v8 + 80), v3, 0, v4);
        goto LABEL_165;
      case 7:
        uint64_t v21 = CMBaseObjectGetDerivedStorage();
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v22) {
          uint64_t v23 = v22;
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v29 = *(uint64_t (**)(const void *))(v23 + 8);
        if (v29) {
          CFAllocatorRef v30 = (const void *)v29(v4);
        }
        else {
          CFAllocatorRef v30 = 0;
        }
        uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v31) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        int v33 = 1634957678;
        uint64_t v34 = *(uint64_t (**)(const void *))(v32 + 96);
        if (v34) {
          int v33 = v34(v4);
        }
        uint64_t v98 = 0;
        unsigned int v99 = &v98;
        uint64_t v100 = 0x2000000000;
        uint64_t v101 = 0;
        if (*(unsigned char *)(v21 + 72))
        {
          int v76 = -16617;
        }
        else
        {
          int v35 = *(_DWORD *)(v21 + 24);
          BOOL v36 = v35 == 0;
          uint64_t v37 = 56;
          if (v35) {
            uint64_t v38 = 56;
          }
          else {
            uint64_t v38 = 48;
          }
          if (!v36) {
            uint64_t v37 = 48;
          }
          uint64_t v39 = *(void *)(v21 + v37);
          if (v33 == 1937337955)
          {
            v96[0] = 0;
            v96[1] = v96;
            v96[2] = 0x2000000000;
            int v97 = 0;
            uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v45) {
              uint64_t v46 = v45;
            }
            else {
              uint64_t v46 = 0;
            }
            long long v56 = *(uint64_t (**)(const void *))(v46 + 40);
            if (v56) {
              uint64_t v57 = v56(v4);
            }
            else {
              uint64_t v57 = 0;
            }
            uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v58) {
              uint64_t v59 = v58;
            }
            else {
              uint64_t v59 = 0;
            }
            long long v64 = *(uint64_t (**)(const void *))(v59 + 168);
            if (v64) {
              int v65 = v64(v4);
            }
            else {
              int v65 = 0;
            }
            if (*(unsigned char *)(v39 + 9))
            {
              CFRetain(v3);
              if (v4) {
                CFRetain(v4);
              }
              if (v30) {
                CFRetain(v30);
              }
              long long v66 = *(NSObject **)(v21 + 184);
              uint64_t valuePtr = MEMORY[0x1E4F143A8];
              uint64_t v85 = 0x40000000;
              uint64_t v86 = __stream_packageReceived_block_invoke_2;
              CFAllocatorRef v87 = &unk_1E688DB40;
              uint64_t v90 = v21;
              uint64_t v91 = v3;
              CFAllocatorRef v92 = v4;
              v93 = v30;
              uint64_t v88 = v96;
              uint64_t v89 = &v98;
              uint64_t v94 = v57;
              int v95 = v65;
              dispatch_async(v66, &valuePtr);
            }
            _Block_object_dispose(v96, 8);
          }
          else if (v33 == 1919970425)
          {
            uint64_t v47 = *(void *)(v21 + v38);
            uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v48) {
              uint64_t v49 = v48;
            }
            else {
              uint64_t v49 = 0;
            }
            long long v60 = *(uint64_t (**)(const void *))(v49 + 40);
            if (v60) {
              uint64_t v61 = v60(v4);
            }
            else {
              uint64_t v61 = 0;
            }
            if ((void *)v61 == v3)
            {
              if (*(unsigned char *)(v47 + 9))
              {
                uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v63 = v62 ? v62 : 0;
                long long v73 = *(uint64_t (**)(const void *))(v63 + 56);
                int v74 = v73 ? v73(v4) : 0;
                *(_DWORD *)(v21 + 152) = v74;
                *(void *)(v21 + 160) = v30;
                CFAllocatorRef v30 = 0;
              }
              else
              {
                *(_DWORD *)(v21 + 152) = -16613;
              }
              uint64_t v75 = *(NSObject **)(v21 + 168);
              if (v75) {
                dispatch_semaphore_signal(v75);
              }
            }
          }
          else if (v33 == 1634957678 && *(unsigned char *)(v39 + 9))
          {
            CFRetain(v3);
            if (v4) {
              CFRetain(v4);
            }
            if (v30) {
              CFRetain(v30);
            }
            double v40 = *(NSObject **)(v21 + 184);
            uint64_t valuePtr = MEMORY[0x1E4F143A8];
            uint64_t v85 = 0x40000000;
            uint64_t v86 = __stream_packageReceived_block_invoke;
            CFAllocatorRef v87 = &__block_descriptor_tmp_195;
            uint64_t v88 = (void *)v21;
            uint64_t v89 = (uint64_t *)v3;
            uint64_t v90 = (uint64_t)v4;
            uint64_t v91 = v30;
            dispatch_async(v40, &valuePtr);
          }
          int v76 = 0;
        }
        uint64_t v77 = (const void *)v99[3];
        if (v77) {
          CFRelease(v77);
        }
        if (v30) {
          CFRelease(v30);
        }
        _Block_object_dispose(&v98, 8);
        int v83 = v76;
        goto LABEL_165;
      case 8:
        uint64_t v24 = CMBaseObjectGetDerivedStorage();
        if (*(unsigned char *)(v24 + 72)) {
          goto LABEL_165;
        }
        uint64_t v25 = v24;
        uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v27 = v26 ? v26 : 0;
        char v41 = *(uint64_t (**)(const void *))(v27 + 40);
        uint64_t v42 = v41 ? v41(v4) : 0;
        if ((void *)v42 != v3) {
          goto LABEL_165;
        }
        *(_DWORD *)(v25 + 152) = -16612;
        CFArrayRef v43 = *(const void **)(v25 + 160);
        if (v43)
        {
          CFRelease(v43);
          *(void *)(v25 + 160) = 0;
        }
        int v44 = *(NSObject **)(v25 + 168);
        goto LABEL_150;
      default:
        goto LABEL_165;
    }
  }
  if ((v2 - 4) <= 2) {
    *(_DWORD *)(v6 + 16) = v2;
  }
LABEL_165:
  if (cf) {
    CFRelease(cf);
  }
  if (v81) {
    CFRelease(v81);
  }
  if (theData) {
    CFRelease(theData);
  }
  if (v83 && v83 != -16618) {
    APSLogErrorAt();
  }
  uint64_t v78 = *(const void **)(a1 + 40);
  if (v78) {
    CFRelease(v78);
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void stream_recordConnectionEvent(int a1, int a2, const __CFData *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFAbsoluteTimeGetCurrent();
  if (*DerivedStorage == 1702260340)
  {
    if (a2 == 3 || a2 == 5)
    {
LABEL_20:
      APSEventRecorderRecordEventWithFlagsAtTime();
    }
    else if (gLogCategory_APTransportStream <= 60 {
           && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
    }
    {
LABEL_16:
      LogPrintF();
    }
  }
  else if (*DerivedStorage == 1668575852)
  {
    switch(a2)
    {
      case 1:
      case 2:
        goto LABEL_20;
      case 3:
        if (*(void *)(CMBaseObjectGetDerivedStorage() + 144))
        {
          ConnectionAddressFromEventCFDataRef Data = stream_createConnectionAddressFromEventData(a1, a3);
          if (ConnectionAddressFromEventData)
          {
            uint64_t v8 = (const void *)ConnectionAddressFromEventData;
            CFDictionarySetDouble();
            CFRelease(v8);
          }
        }
        goto LABEL_20;
      case 5:
        if (*(void *)(CMBaseObjectGetDerivedStorage() + 144))
        {
          uint64_t v9 = stream_createConnectionAddressFromEventData(a1, a3);
          if (v9)
          {
            CFTypeID v10 = (const void *)v9;
            CFDictionaryGetDouble();
            APSEventRecorderRecordEventWithFlagsAtTime();
            CFRelease(v10);
          }
        }
        goto LABEL_20;
      default:
        if (gLogCategory_APTransportStream <= 60
          && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
        {
          goto LABEL_16;
        }
        break;
    }
  }
}

void __stream_eventReceived_block_invoke_0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void (**)(void, uint64_t, void, void))(v2 + 200);
  if (v3) {
    v3(*(void *)(a1 + 40), 1651470958, 0, *(void *)(v2 + 192));
  }
  uint64_t v4 = *(const void **)(a1 + 40);
  CFRelease(v4);
}

void __stream_eventReceived_block_invoke_2_0(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void (**)(void, uint64_t, void, void))(v2 + 200);
  if (v3) {
    v3(a1[5], 1668179564, a1[6], *(void *)(v2 + 192));
  }
  uint64_t v4 = (const void *)a1[6];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[5];
  CFRelease(v5);
}

void __stream_eventReceived_block_invoke_3_0(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void (**)(void, uint64_t, void, void))(v2 + 200);
  if (v3) {
    v3(a1[5], 1684628836, a1[6], *(void *)(v2 + 192));
  }
  uint64_t v4 = (const void *)a1[6];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[5];
  CFRelease(v5);
}

uint64_t stream_createConnectionAddressFromEventData(int a1, CFDataRef theData)
{
  int v8 = 0;
  *(void *)buffer = 0;
  uint64_t v5 = 0;
  int v7 = 0;
  uint64_t v6 = 0;
  if (!theData) {
    return 0;
  }
  if (CFDataGetLength(theData) != 28)
  {
    if (gLogCategory_APTransportStream > 60
      || gLogCategory_APTransportStream == -1 && !_LogCategory_Initialize())
    {
      return 0;
    }
LABEL_10:
    LogPrintF();
    return 0;
  }
  v9.location = 0;
  v9.CFIndex length = 28;
  CFDataGetBytes(theData, v9, buffer);
  uint64_t result = CFStringCreateF();
  if (!result)
  {
    if (gLogCategory_APTransportStream > 60
      || gLogCategory_APTransportStream == -1 && !_LogCategory_Initialize())
    {
      return 0;
    }
    goto LABEL_10;
  }
  return result;
}

void __stream_packageReceived_block_invoke(void *a1)
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, void, void))(a1[4] + 200);
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    int v7 = *(uint64_t (**)(uint64_t))(v6 + 24);
    if (v7) {
      uint64_t v8 = v7(v4);
    }
    else {
      uint64_t v8 = 0;
    }
    v2(v3, v8, a1[7], *(void *)(a1[4] + 192));
  }
  CFRange v9 = (const void *)a1[7];
  if (v9) {
    CFRelease(v9);
  }
  CFTypeID v10 = (const void *)a1[6];
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = (const void *)a1[5];
  CFRelease(v11);
}

void __stream_packageReceived_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t))(*(void *)(a1 + 48) + 208);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = *(void *)(a1 + 64);
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t))(v6 + 24);
    if (v8) {
      uint64_t v9 = v8(v4);
    }
    else {
      uint64_t v9 = 0;
    }
    int v7 = v2(v3, v9, *(void *)(a1 + 72), *(void *)(*(void *)(a1 + 48) + 192), *(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
  else
  {
    int v7 = -16616;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v7;
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) != -16618)
  {
    CFRetain(*(CFTypeRef *)(a1 + 56));
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(const void **)(*(void *)(v10 + 8) + 24);
    if (v11)
    {
      CFRetain(v11);
      uint64_t v10 = *(void *)(a1 + 40);
    }
    uint64_t v12 = *(NSObject **)(*(void *)(a1 + 48) + 64);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __stream_packageReceived_block_invoke_3;
    block[3] = &unk_1E688DB18;
    uint64_t v13 = *(void *)(a1 + 80);
    void block[6] = *(void *)(a1 + 56);
    void block[7] = v13;
    int v17 = *(_DWORD *)(a1 + 88);
    block[4] = *(void *)(a1 + 32);
    void block[5] = v10;
    dispatch_async(v12, block);
  }
  uint64_t v14 = *(const void **)(a1 + 72);
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = *(const void **)(a1 + 64);
  if (v15) {
    CFRelease(v15);
  }
  CFRelease(*(CFTypeRef *)(a1 + 56));
}

void __stream_packageReceived_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  uint64_t v4 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v50 = 0;
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v7 = DerivedStorage;
    uint64_t v8 = 48;
    if (!*(_DWORD *)(DerivedStorage + 24)) {
      uint64_t v8 = 56;
    }
    uint64_t v9 = *(void *)(DerivedStorage + v8);
    uint64_t v10 = *(void *)(v9 + 24);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t *))(v12 + 32);
    if (!v13 || v13(v10, &v50)) {
      goto LABEL_50;
    }
    uint64_t v14 = v50;
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    int v17 = *(void (**)(uint64_t, uint64_t))(v16 + 16);
    if (v17) {
      v17(v14, v5);
    }
    uint64_t v18 = *(void *)(v7 + 96);
    if (v18)
    {
      uint64_t v19 = v50;
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v21 = v20 ? v20 : 0;
      uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v21 + 72);
      if (v22) {
        v22(v19, v18);
      }
    }
    uint64_t v23 = v50;
    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v25 + 48);
    if (v26) {
      v26(v23, v2);
    }
    uint64_t v27 = v50;
    uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v28) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    CFAllocatorRef v30 = *(void (**)(uint64_t, uint64_t))(v29 + 104);
    if (v30) {
      v30(v27, v4);
    }
    uint64_t v31 = v50;
    uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v32) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = 0;
    }
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v33 + 160);
    if (v34) {
      v34(v31, v3);
    }
    uint64_t v35 = v50;
    uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v37 + 88);
    if (v38) {
      v38(v35, 1919970425);
    }
    if (gLogCategory_APTransportStream <= 10
      && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v39 = *(void *)(v9 + 24);
    uint64_t v40 = v50;
    uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v42 = v41 ? v41 : 0;
    CFArrayRef v43 = *(unsigned int (**)(uint64_t, uint64_t))(v42 + 56);
    if (!v43 || v43(v39, v40)) {
LABEL_50:
    }
      APSLogErrorAt();
  }
  uint64_t v44 = v50;
  if (v50)
  {
    uint64_t v45 = *(void *)(v9 + 24);
    uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v47 = v46 ? v46 : 0;
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v47 + 48);
    if (v48) {
      v48(v45, v44);
    }
  }
  uint64_t v49 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v49) {
    CFRelease(v49);
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void __stream_waitUntilConnectionSetup_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (*(unsigned char *)(v2 + 72))
  {
    APSLogErrorAt();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -16617;
  }
  else
  {
    stream_getConnectionState(v2, *(_DWORD *)(a1 + 72), (void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    if (*(unsigned char *)(v3 + 9))
    {
      if (!*(unsigned char *)(v3 + 8))
      {
        *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(void *)v3;
        dispatch_retain(*(dispatch_object_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
        if (gLogCategory_APTransportStream <= 50
          && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
    }
    else
    {
      APSLogErrorAt();
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = APSSignalErrorAt();
    }
  }
}

uint64_t __stream_waitUntilConnectionSetup_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (*(unsigned char *)(v2 + 72))
  {
    uint64_t result = APSLogErrorAt();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -16617;
  }
  else
  {
    uint64_t result = stream_getConnectionState(v2, *(_DWORD *)(a1 + 64), (void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    if (!*(unsigned char *)(v4 + 8))
    {
      *(unsigned char *)(v4 + 9) = 0;
      int v5 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 12);
      if (v5 == -71882) {
        int v6 = -71891;
      }
      else {
        int v6 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 12);
      }
      if (v5 == -71880) {
        int v7 = -71890;
      }
      else {
        int v7 = v6;
      }
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v7;
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 12) = 0;
    }
    if (gLogCategory_APTransportStream <= 50)
    {
      if (gLogCategory_APTransportStream != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

uint64_t APTTrafficMetricsGetTypeID()
{
  if (gAPTTrafficMetricsInitOnce != -1) {
    dispatch_once_f(&gAPTTrafficMetricsInitOnce, 0, (dispatch_function_t)_APTTrafficMetricsGetTypeID);
  }
  return gAPTTrafficMetricsTypeID;
}

uint64_t _APTTrafficMetricsGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPTTrafficMetricsCFTypeID TypeID = result;
  return result;
}

uint64_t APTTrafficMetricsCreate(int *a1, int *a2, uint64_t *a3, int a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = mach_absolute_time();
  label[0] = IsAppleInternalBuild();
  if (APSSettingsGetBooleanIfPresent()
    && *a2 <= 50
    && (*a2 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v9 = 0;
  if (a2 && a1 && label[0])
  {
    if (gAPTTrafficMetricsInitOnce != -1) {
      dispatch_once_f(&gAPTTrafficMetricsInitOnce, 0, (dispatch_function_t)_APTTrafficMetricsGetTypeID);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (!Instance)
    {
      APSLogErrorAt();
      return 4294960568;
    }
    uint64_t v11 = Instance;
    bzero((void *)(Instance + 16), 0x2C0uLL);
    *(void *)(v11 + 16) = a1;
    *(void *)(v11 + 24) = a2;
    *(_WORD *)(v11 + 32) = CUObfuscatedPtr();
    *(void *)(v11 + 88) = 1;
    *(void *)label = 5;
    if (APSSettingsGetInt64IfPresent()
      && *a1 <= 50
      && (*a1 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(void *)(v11 + 96) = SecondsToUpTicks() / 0xAuLL;
    *(void *)(v11 + 72) = v8;
    *(_DWORD *)(v11 + 104) = a4;
    SNPrintF();
    uint64_t v12 = dispatch_queue_create(label, 0);
    *(void *)(v11 + 40) = v12;
    if (v12 && (dispatch_source_t v13 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v12), (*(void *)(v11 + 48) = v13) != 0))
    {
      uint64_t v14 = APSAtomicMessageQueueCreate();
      if (v14)
      {
        uint64_t v9 = v14;
      }
      else
      {
        uint64_t v9 = APSRealTimeSignalCreate();
        if (!v9)
        {
          dispatch_set_context(*(dispatch_object_t *)(v11 + 48), (void *)v11);
          dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v11 + 48), (dispatch_function_t)aptTrafficMetrics_intervalTimerHandler);
          dispatch_source_set_timer(*(dispatch_source_t *)(v11 + 48), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
          dispatch_resume(*(dispatch_object_t *)(v11 + 48));
          *a3 = v11;
          return v9;
        }
      }
      APSLogErrorAt();
    }
    else
    {
      APSLogErrorAt();
      uint64_t v9 = 0;
    }
    CFRelease((CFTypeRef)v11);
  }
  return v9;
}

void aptTrafficMetrics_intervalTimerHandler(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1 && *(void *)(a1 + 112))
  {
    uint64_t v2 = (int64x2_t *)(a1 + 392);
    if (*(_DWORD *)(a1 + 104) == 4)
    {
      aptTrafficMetrics_handleQueuedEvents(a1);
      uint64_t v3 = mach_absolute_time();
      aptTrafficMetrics_fillSendingWindowsRep(a1, v3 - *(void *)(a1 + 72), (uint64_t)v20);
      uint64_t v4 = 0;
      *(void *)(a1 + 392) += *(void *)(a1 + 128);
      *(int64x2_t *)(a1 + 408) = vaddq_s64(*(int64x2_t *)(a1 + 408), *(int64x2_t *)(a1 + 144));
      char v5 = 1;
      do
      {
        uint64_t v6 = *(void *)(a1 + v4 + 320);
        *(void *)(a1 + v4 + 584) += v6;
        if (v6) {
          BOOL v7 = v4 == 48;
        }
        else {
          BOOL v7 = 1;
        }
        if (!v7) {
          char v5 = 0;
        }
        v4 += 8;
      }
      while (v4 != 72);
      if (*(unsigned char *)(a1 + 80)) {
        BOOL v8 = v5 == 0;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        int v9 = **(_DWORD **)(a1 + 16);
        if (v9 <= 50 && (v9 != -1 || _LogCategory_Initialize()))
        {
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          LogPrintF();
        }
      }
      *(void *)(a1 + 384) = 0;
      *(_OWORD *)(a1 + 352) = 0u;
      *(_OWORD *)(a1 + 368) = 0u;
      *(_OWORD *)(a1 + 320) = 0u;
      *(_OWORD *)(a1 + 336) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_OWORD *)(a1 + 304) = 0u;
      *(_OWORD *)(a1 + 256) = 0u;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 224) = 0u;
      *(_OWORD *)(a1 + 240) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      *(_OWORD *)(a1 + 208) = 0u;
      *(_OWORD *)(a1 + 160) = 0u;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
    }
    else
    {
      aptTrafficMetrics_handleQueuedEvents(a1);
      uint64_t v3 = mach_absolute_time();
      uint64_t v10 = a1 + 128 + 8 * *(unsigned int *)(a1 + 672);
      *(void *)(v10 + 192) += v3 - *(void *)(a1 + 688);
      *(void *)(a1 + 688) = v3;
      aptTrafficMetrics_fillSendingWindowsRep(a1, v3 - *(void *)(a1 + 72), (uint64_t)v20);
      uint64_t v11 = 0;
      *uint64_t v2 = vaddq_s64(*v2, *(int64x2_t *)(a1 + 128));
      *(void *)(a1 + 416) += *(void *)(a1 + 152);
      char v12 = 1;
      do
      {
        uint64_t v13 = *(void *)(a1 + v11 + 320);
        *(void *)(a1 + v11 + 584) += v13;
        if (v13) {
          BOOL v14 = v11 == 8;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14) {
          char v12 = 0;
        }
        v11 += 8;
      }
      while (v11 != 72);
      if (*(unsigned char *)(a1 + 80)) {
        BOOL v15 = v12 == 0;
      }
      else {
        BOOL v15 = 1;
      }
      if (v15)
      {
        int v16 = **(_DWORD **)(a1 + 16);
        if (v16 <= 50 && (v16 != -1 || _LogCategory_Initialize()))
        {
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          LogPrintF();
        }
      }
      *(void *)(a1 + 384) = 0;
      *(_OWORD *)(a1 + 352) = 0u;
      *(_OWORD *)(a1 + 368) = 0u;
      *(_OWORD *)(a1 + 320) = 0u;
      *(_OWORD *)(a1 + 336) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_OWORD *)(a1 + 304) = 0u;
      *(_OWORD *)(a1 + 256) = 0u;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 224) = 0u;
      *(_OWORD *)(a1 + 240) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      *(_OWORD *)(a1 + 208) = 0u;
      *(_OWORD *)(a1 + 160) = 0u;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(unsigned char *)(a1 + 80) = v12;
    }
    *(void *)(a1 + 72) = v3;
    if (!*(unsigned char *)(a1 + 120))
    {
      uint64_t v17 = *(NSObject **)(a1 + 48);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      dispatch_time_t v19 = dispatch_time(0, (uint64_t)(-(Current - (floor(Current / 5.0) + 1.0) * 5.0) * 1000000000.0));
      dispatch_source_set_timer(v17, v19, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    }
  }
}

uint64_t APTTrafficMetricsConnectionFormed(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsConnectionClosed(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsSendStarted(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsSendFinished(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsResponseReceived(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsDataAvailable(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsCanWriteData(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsRequestDataStarted(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsRequestDataFinished(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsConsumedAllData(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsMessageReadStarted(uint64_t result)
{
  if (result)
  {
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsMessageReadFinished(uint64_t result)
{
  if (result)
  {
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsMessageProcessed(uint64_t result)
{
  if (result)
  {
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

void _APTTrafficMetricsFinalize(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 48));
  if (*(void *)(a1 + 64)) {
    APSRealTimeSignalInvalidate();
  }
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2 && *(void *)(a1 + 56))
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___APTTrafficMetricsFinalize_block_invoke;
    block[3] = &__block_descriptor_tmp_16;
    block[4] = a1;
    dispatch_sync(v2, block);
  }
  uint64_t v3 = *(const void **)(a1 + 56);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(NSObject **)(a1 + 48);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(a1 + 48) = 0;
  }
  char v5 = *(NSObject **)(a1 + 40);
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 64);
  if (v6) {
    CFRelease(v6);
  }
}

uint64_t aptTrafficMetrics_handleQueuedEvents(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 56))
  {
    for (uint64_t result = APSAtomicMessageQueueReadMessage(); result; uint64_t result = APSAtomicMessageQueueReadMessage())
    {
      int v3 = **(_DWORD **)(a1 + 16);
      if (v3 <= 10 && (v3 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
    }
  }
  else
  {
    return APSLogErrorAt();
  }
  return result;
}

uint64_t aptTrafficMetrics_fillSendingWindowsRep(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  if (a2 / *(void *)(a1 + 96) >= 0x13) {
    unint64_t v7 = 19;
  }
  else {
    unint64_t v7 = a2 / *(void *)(a1 + 96);
  }
  do
  {
    if (*(void *)(a1 + 160 + 8 * v5) > v6) {
      unint64_t v6 = *(void *)(a1 + 160 + 8 * v5);
    }
    ++v5;
  }
  while (v7 + 1 != v5);
  unint64_t v8 = *(void *)(a1 + 88);
  if (v6 > v8) {
    *(void *)(a1 + 88) = v6;
  }
  uint64_t result = UpTicksToMilliseconds();
  if (v7 && result - 500 * v7 <= 0x63) {
    unint64_t v7 = (__PAIR128__(v7, *(void *)(a1 + 8 * v7 + 160)) - 1) >> 64;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 19;
  if (v7 < 0x13) {
    uint64_t v11 = v7;
  }
  uint64_t v12 = v11 + 1;
  do
  {
    *(unsigned char *)(a3 + v10) = (unint64_t)(*(void *)(a1 + 88) + 9 * *(void *)(a1 + 160 + 8 * v10) - 1)
                         / *(void *)(a1 + 88)
                         + 48;
    ++v10;
  }
  while (v12 != v10);
  if (v6 > v8)
  {
    *(unsigned char *)(a3 + v12) = 42;
    uint64_t v12 = v10 + 1;
  }
  *(unsigned char *)(a3 + v12) = 0;
  return result;
}

void handleBluetoothChangedNotification(uint64_t a1, void *a2)
{
  if (gLogCategory_APDBluetoothHelper <= 40
    && (gLogCategory_APDBluetoothHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  int v3 = [a2 queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __handleBluetoothChangedNotification_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a2;
  dispatch_sync(v3, block);
}

uint64_t APDBluetoothHelperGetTypeID()
{
  if (gAPDBluetoothHelperInitOnce != -1) {
    dispatch_once(&gAPDBluetoothHelperInitOnce, &__block_literal_global_17);
  }
  return gAPDBluetoothHelperTypeID;
}

uint64_t __APDBluetoothHelperGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPDBluetoothHelperCFTypeID TypeID = result;
  return result;
}

uint64_t APDBluetoothHelperCreate(void *a1)
{
  if (gAPDBluetoothHelperInitOnce != -1) {
    dispatch_once(&gAPDBluetoothHelperInitOnce, &__block_literal_global_17);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    int v3 = (void *)Instance;
    *(void *)(Instance + 16) = 0;
    uint64_t v4 = objc_alloc_init(APDBrowserBluetoothHelper);
    v3[2] = v4;
    if (v4)
    {
      uint64_t v5 = 0;
      *a1 = v3;
    }
    else
    {
      uint64_t v5 = 4294895116;
      APSLogErrorAt();
      CFRelease(v3);
    }
  }
  else
  {
    uint64_t v5 = 4294895116;
    APSLogErrorAt();
  }
  return v5;
}

uint64_t APDBluetoothHelperSetEventHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  int v14 = 0;
  unint64_t v6 = *(void **)(a1 + 16);
  unint64_t v7 = [v6 queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APDBluetoothHelperSetEventHandler_block_invoke;
  block[3] = &unk_1E688AC20;
  block[4] = v6;
  void block[5] = &v11;
  void block[6] = a2;
  void block[7] = a3;
  void block[8] = a1;
  dispatch_sync(v7, block);
  uint64_t v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1D09025F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __APDBluetoothHelperSetEventHandler_block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) setEventHandler:*(void *)(a1 + 48) context:*(void *)(a1 + 56) helperRef:*(void *)(a1 + 64)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t APDBluetoothHelperStartListeningToEvent(uint64_t a1, int a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  int v12 = 0;
  int v3 = *(void **)(a1 + 16);
  uint64_t v4 = [v3 queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APDBluetoothHelperStartListeningToEvent_block_invoke;
  block[3] = &unk_1E688DC30;
  block[4] = v3;
  void block[5] = &v9;
  int v8 = a2;
  dispatch_sync(v4, block);
  uint64_t v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1D0902704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __APDBluetoothHelperStartListeningToEvent_block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) startListeningToEvent:*(unsigned int *)(a1 + 48)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t APDBluetoothHelperStopListeningToEvent(uint64_t a1, int a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  int v12 = 0;
  int v3 = *(void **)(a1 + 16);
  uint64_t v4 = [v3 queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APDBluetoothHelperStopListeningToEvent_block_invoke;
  block[3] = &unk_1E688DC30;
  block[4] = v3;
  void block[5] = &v9;
  int v8 = a2;
  dispatch_sync(v4, block);
  uint64_t v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1D0902814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __APDBluetoothHelperStopListeningToEvent_block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) stopListeningToEvent:*(unsigned int *)(a1 + 48)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t APDBluetoothHelperQueryBluetoothPower(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  int v3 = *(void **)(a1 + 16);
  uint64_t v4 = [v3 queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APDBluetoothHelperQueryBluetoothPower_block_invoke;
  block[3] = &unk_1E688ABF8;
  block[4] = v3;
  void block[5] = &v8;
  void block[6] = a2;
  dispatch_sync(v4, block);
  uint64_t v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1D0902924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __APDBluetoothHelperQueryBluetoothPower_block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) queryBluetoothPower:*(void *)(a1 + 48)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t APDBluetoothHelperSetBluetoothPower(uint64_t a1, char a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  int v12 = 0;
  int v3 = *(void **)(a1 + 16);
  uint64_t v4 = [v3 queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APDBluetoothHelperSetBluetoothPower_block_invoke;
  block[3] = &unk_1E688AC70;
  block[4] = v3;
  void block[5] = &v9;
  char v8 = a2;
  dispatch_sync(v4, block);
  uint64_t v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1D0902A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __APDBluetoothHelperSetBluetoothPower_block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) setBluetoothPower:*(unsigned char *)(a1 + 48) != 0];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t APDBluetoothHelperInvalidate(uint64_t a1)
{
  uint64_t v6 = 0;
  unint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  int v1 = *(void **)(a1 + 16);
  uint64_t v2 = [v1 queue];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = __APDBluetoothHelperInvalidate_block_invoke;
  v5[3] = &unk_1E688ABA8;
  v5[4] = v1;
  v5[5] = &v6;
  dispatch_sync(v2, v5);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1D0902B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __APDBluetoothHelperInvalidate_block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) invalidate];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t __handleBluetoothChangedNotification_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleBluetoothChangedNotificationInternal:0];
}

void _APDBluetoothHelperFinalize(uint64_t a1)
{
}

uint64_t APBrowserCreate(const __CFAllocator *a1, const __CFDictionary *a2, uint64_t a3, void *a4)
{
  if (!a3)
  {
    APSLogErrorAt();
    return 0;
  }
  APBrowserGetClassID();
  uint64_t v8 = CMDerivedObjectCreate();
  if (v8)
  {
    uint64_t v15 = v8;
    APSLogErrorAt();
    return v15;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)uint64_t DerivedStorage = a3;
  dispatch_queue_t v10 = dispatch_queue_create("APBrowserInternalQueue", 0);
  *(void *)(DerivedStorage + 8) = v10;
  if (!v10) {
    goto LABEL_74;
  }
  dispatch_queue_t v11 = dispatch_queue_create("APBrowserEventQueue", 0);
  *(void *)(DerivedStorage + 16) = v11;
  if (!v11) {
    goto LABEL_74;
  }
  if (!a2)
  {
    BOOL v16 = 0;
    BOOL v17 = 0;
    BOOL v18 = 0;
    BOOL v19 = 0;
    goto LABEL_16;
  }
  CFStringRef Value = CFDictionaryGetValue(a2, @"EventRecorder");
  if (!Value)
  {
    *(void *)(DerivedStorage + 368) = 0;
    goto LABEL_12;
  }
  CFTypeRef v13 = CFRetain(Value);
  *(void *)(DerivedStorage + 368) = v13;
  if (!v13 || (CFTypeID v14 = CFGetTypeID(v13), v14 == APSEventRecorderGetTypeID()))
  {
LABEL_12:
    *(CFAbsoluteTime *)(DerivedStorage + 416) = CFAbsoluteTimeGetCurrent();
    *(unsigned char *)(DerivedStorage + 248) = CFDictionaryGetInt64() != 0;
    BOOL v18 = CFDictionaryGetInt64() != 0;
    BOOL v17 = CFDictionaryGetInt64() != 0;
    BOOL v16 = CFDictionaryGetInt64() != 0;
    uint64_t Int64 = CFDictionaryGetInt64();
    uint64_t v21 = CFDictionaryGetValue(a2, @"BrokerManager");
    if (v21) {
      uint64_t v21 = CFRetain(v21);
    }
    *(void *)(DerivedStorage + 328) = v21;
    BOOL v19 = CFDictionaryGetInt64() != 0;
    if (Int64)
    {
      int v22 = 0;
      uint64_t v23 = "SidePlay";
      uint64_t v24 = &kAPBonjourBrowserServiceType_SidePlay;
      uint64_t v25 = @"SidePlayBonjourInfo";
      goto LABEL_17;
    }
LABEL_16:
    int v22 = 1;
    uint64_t v23 = "AirPlay";
    uint64_t v24 = kAPBonjourBrowserServiceType_AirPlay;
    uint64_t v25 = @"AirPlayBonjourInfo";
LABEL_17:
    uint64_t v26 = *v24;
    *(void *)(DerivedStorage + 56) = v25;
    *(void *)(DerivedStorage + 64) = v26;
    *(void *)(DerivedStorage + 72) = v23;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v63 = a4;
      uint64_t v28 = Mutable;
      CFDictionarySetInt64();
      uint64_t v29 = (const void *)*MEMORY[0x1E4F1CFD0];
      BOOL v30 = v19;
      BOOL v31 = v16;
      uint64_t v32 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (v22) {
        uint64_t v33 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        uint64_t v33 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(v28, @"raopEnabled", v33);
      CFDictionarySetValue(v28, @"localEnabled", v33);
      if (v18) {
        uint64_t v34 = v29;
      }
      else {
        uint64_t v34 = v32;
      }
      CFDictionarySetValue(v28, @"partialAWDLAllowed", v34);
      if (*(unsigned char *)(DerivedStorage + 248)) {
        uint64_t v35 = v29;
      }
      else {
        uint64_t v35 = v32;
      }
      CFDictionarySetValue(v28, @"fullAWDLAllowed", v35);
      if (v17) {
        uint64_t v36 = v29;
      }
      else {
        uint64_t v36 = v32;
      }
      CFDictionarySetValue(v28, @"openFullNANAllowed", v36);
      if (v31) {
        uint64_t v37 = v29;
      }
      else {
        uint64_t v37 = v32;
      }
      CFDictionarySetValue(v28, @"securePartialNANAllowed", v37);
      if (v30) {
        uint64_t v38 = v29;
      }
      else {
        uint64_t v38 = v32;
      }
      CFDictionarySetValue(v28, @"browseForAltReceiver", v38);
      CFDictionarySetValue(v28, @"enableCache", v33);
      uint64_t v39 = APBonjourBrowserCreate((uint64_t)a1, (uint64_t)v28, (void *)(DerivedStorage + 80));
      if (v39)
      {
        uint64_t v15 = v39;
      }
      else
      {
        uint64_t v40 = APBonjourBrowserSetEventHandler(*(void *)(DerivedStorage + 80), (uint64_t)browser_handleBonjourEventExternal, 0);
        if (v40)
        {
          uint64_t v15 = v40;
        }
        else
        {
          CFRetain(0);
          *(unsigned char *)(DerivedStorage + 228) = 0;
          uint64_t v41 = APDBluetoothHelperCreate((void *)(DerivedStorage + 88));
          if (v41)
          {
            uint64_t v15 = v41;
          }
          else
          {
            uint64_t v42 = APDBluetoothHelperSetEventHandler(*(void *)(DerivedStorage + 88), (uint64_t)browser_handleBluetoothHelperEventExternal, 0);
            if (!v42)
            {
              CFRetain(0);
              if (v30)
              {
                CFArrayRef v43 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (!v43)
                {
                  APSLogErrorAt();
                  uint64_t v15 = 4294960568;
                  goto LABEL_70;
                }
                uint64_t v44 = v43;
                CFDictionarySetValue(v43, @"BrowseForAltReceivers", v29);
              }
              else
              {
                uint64_t v44 = 0;
              }
              uint64_t v45 = APBrowserBTLEManagerCreate((uint64_t)v44, (id **)(DerivedStorage + 96));
              if (v45)
              {
                uint64_t v15 = v45;
              }
              else
              {
                uint64_t v46 = APBrowserBTLEManagerSetEventHandler(*(void *)(DerivedStorage + 96), (uint64_t)browser_handleBTLEEventExternal, 0);
                if (v46)
                {
                  uint64_t v15 = v46;
                }
                else
                {
                  CFRetain(0);
                  uint64_t v47 = APBrowserDeviceQueryManagerGetInfoCreate((void *)(DerivedStorage + 104));
                  if (v47)
                  {
                    uint64_t v15 = v47;
                  }
                  else
                  {
                    CFMutableDictionaryRef v48 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    *(void *)(DerivedStorage + 112) = v48;
                    if (!v48) {
                      goto LABEL_65;
                    }
                    CFMutableDictionaryRef v49 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    *(void *)(DerivedStorage + 152) = v49;
                    if (!v49) {
                      goto LABEL_65;
                    }
                    CFMutableDictionaryRef v50 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    *(void *)(DerivedStorage + 160) = v50;
                    if (!v50) {
                      goto LABEL_65;
                    }
                    CFMutableDictionaryRef v51 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    *(void *)(DerivedStorage + 168) = v51;
                    if (!v51) {
                      goto LABEL_65;
                    }
                    CFMutableDictionaryRef v52 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    *(void *)(DerivedStorage + 176) = v52;
                    if (!v52) {
                      goto LABEL_65;
                    }
                    uint64_t v53 = APBrowserRapportManagerCreate();
                    if (v53)
                    {
                      uint64_t v15 = v53;
                    }
                    else
                    {
                      uint64_t v54 = APBrowserRapportManagerSetEventHandler(*(void *)(DerivedStorage + 144), (uint64_t)browser_handleRapportEventExternal, 0);
                      if (v54)
                      {
                        uint64_t v15 = v54;
                      }
                      else
                      {
                        CFRetain(0);
                        CFMutableDictionaryRef v55 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                        *(void *)(DerivedStorage + 344) = v55;
                        if (!v55) {
                          goto LABEL_65;
                        }
                        SharedHelper = (const void *)APConnectivityHelperGetSharedHelper();
                        if (!SharedHelper)
                        {
                          *(void *)(DerivedStorage + 184) = 0;
                          goto LABEL_65;
                        }
                        CFTypeRef v57 = CFRetain(SharedHelper);
                        *(void *)(DerivedStorage + 184) = v57;
                        if (!v57) {
                          goto LABEL_65;
                        }
                        uint64_t v58 = APConnectivityHelperRegisterEventHandler((uint64_t)v57, 0, (uint64_t)browser_handleConnectivityHelperEventExternal);
                        if (!v58)
                        {
                          CFMutableDictionaryRef v59 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                          *(void *)(DerivedStorage + 200) = v59;
                          if (v59)
                          {
                            if (!IsAppleInternalBuild()
                              || (CFMutableDictionaryRef v60 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
                                  (*(void *)(DerivedStorage + 216) = v60) != 0))
                            {
                              int v61 = **(_DWORD **)DerivedStorage;
                              if (v61 <= 50 && (v61 != -1 || _LogCategory_Initialize())) {
                                LogPrintF();
                              }
                              browser_sendPowerLogDiscoveryModeEvent();
                              uint64_t v15 = 0;
                              *uint64_t v63 = 0;
                              if (!v44) {
                                goto LABEL_70;
                              }
LABEL_69:
                              CFRelease(v44);
LABEL_70:
                              CFRelease(v28);
                              return v15;
                            }
                          }
LABEL_65:
                          APSLogErrorAt();
                          uint64_t v15 = 4294960568;
                          if (!v44) {
                            goto LABEL_70;
                          }
                          goto LABEL_69;
                        }
                        uint64_t v15 = v58;
                      }
                    }
                  }
                }
              }
              APSLogErrorAt();
              if (!v44) {
                goto LABEL_70;
              }
              goto LABEL_69;
            }
            uint64_t v15 = v42;
          }
        }
      }
      APSLogErrorAt();
      goto LABEL_70;
    }
LABEL_74:
    APSLogErrorAt();
    return 4294960568;
  }
  APSLogErrorAt();
  return 4294960591;
}

uint64_t browser_handleBonjourEventExternal(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  if (a3) {
    CFRetain(a3);
  }
  return APSDispatchAsyncFHelper();
}

void browser_handleBluetoothHelperEventExternal(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a4);
  if (a3) {
    CFRetain(a3);
  }
  uint64_t v8 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __browser_handleBluetoothHelperEventExternal_block_invoke;
  block[3] = &__block_descriptor_52_e5_v8__0l;
  int v10 = a2;
  block[4] = a4;
  void block[5] = a3;
  dispatch_async(v8, block);
}

void browser_handleBTLEEventExternal(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a4);
  if (a3) {
    CFRetain(a3);
  }
  uint64_t v8 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __browser_handleBTLEEventExternal_block_invoke;
  block[3] = &__block_descriptor_52_e5_v8__0l;
  int v10 = a2;
  block[4] = a4;
  void block[5] = a3;
  dispatch_async(v8, block);
}

void browser_handleRapportEventExternal(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a4);
  if (a3) {
    CFRetain(a3);
  }
  uint64_t v8 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __browser_handleRapportEventExternal_block_invoke;
  block[3] = &__block_descriptor_52_e5_v8__0l;
  int v10 = a2;
  block[4] = a4;
  void block[5] = a3;
  dispatch_async(v8, block);
}

void browser_handleConnectivityHelperEventExternal(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a4);
  if (a3) {
    CFRetain(a3);
  }
  uint64_t v8 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __browser_handleConnectivityHelperEventExternal_block_invoke;
  block[3] = &__block_descriptor_52_e5_v8__0l;
  int v10 = a2;
  block[4] = a4;
  void block[5] = a3;
  dispatch_async(v8, block);
}

uint64_t browser_invalidateNoQueueCheck(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 229)) {
    return 4294960573;
  }
  uint64_t v3 = DerivedStorage;
  browser_setModeInternal(a1, 0);
  uint64_t v4 = *(void *)(v3 + 96);
  if (v4) {
    APBrowserBTLEManagerInvalidate(v4);
  }
  if (*(void *)(v3 + 104))
  {
    uint64_t CMBaseObject = APBrowserDeviceQueryManagerGetCMBaseObject();
    if (CMBaseObject)
    {
      uint64_t v6 = CMBaseObject;
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v8 = v7 ? v7 : 0;
      int v9 = *(void (**)(uint64_t))(v8 + 24);
      if (v9) {
        v9(v6);
      }
    }
  }
  uint64_t v10 = *(void *)(v3 + 184);
  if (v10) {
    APConnectivityHelperRemoveAllRegistrations(v10, (uint64_t)a1);
  }
  uint64_t v11 = *(void *)(v3 + 88);
  if (v11) {
    APDBluetoothHelperInvalidate(v11);
  }
  uint64_t v12 = *(void *)(v3 + 144);
  if (v12) {
    APBrowserRapportManagerInvalidate(v12);
  }
  uint64_t v13 = *(void *)(v3 + 80);
  if (v13) {
    APBonjourBrowserInvalidate(v13);
  }
  [*(id *)(v3 + 208) stopBrowsing];
  browser_stopNI();
  browser_ensureDetailedForeverTimerStopped();
  uint64_t result = browser_dispatchEvent(a1, 8, 0);
  *(void *)(v3 + 232) = 0;
  *(void *)(v3 + 240) = 0;
  *(unsigned char *)(v3 + 229) = 1;
  return result;
}

uint64_t APBrowserTickleDetailedMode()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = APSDispatchSyncTask();
  if (v0) {
    APSLogErrorAt();
  }
  return v0;
}

uint64_t browser_tickleDetailedMode()
{
  char v5 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 229))
  {
    APSLogErrorAt();
    return 4294960573;
  }
  uint64_t v1 = DerivedStorage;
  if (*(_WORD *)(DerivedStorage + 24) != 3)
  {
    APSLogErrorAt();
    return 4294960587;
  }
  if (!*(unsigned char *)(DerivedStorage + 130) || !*(unsigned char *)(DerivedStorage + 129)) {
    return 0;
  }
  uint64_t WiFiPower = APConnectivityHelperQueryWiFiPower(*(void *)(DerivedStorage + 184), (uint64_t)&v5);
  if (WiFiPower)
  {
    uint64_t v3 = WiFiPower;
    goto LABEL_13;
  }
  if (v5)
  {
    uint64_t v3 = APBonjourBrowserTickleDetailedMode(*(void *)(v1 + 80));
    if (!v3) {
      return v3;
    }
LABEL_13:
    APSLogErrorAt();
    return v3;
  }
  return 0;
}

uint64_t APBrowserDiscoverAndInjectDevice(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    char v5 = *(NSObject **)(DerivedStorage + 8);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __APBrowserDiscoverAndInjectDevice_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = DerivedStorage;
    void block[5] = a1;
    void block[6] = a2;
    dispatch_sync(v5, block);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

uint64_t __APBrowserDiscoverAndInjectDevice_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = **(_DWORD **)v2;
  if (v3 <= 30)
  {
    if (v3 != -1 || (v4 = _LogCategory_Initialize(), uint64_t v2 = *(void *)(a1 + 32), v4))
    {
      LogPrintF();
      uint64_t v2 = *(void *)(a1 + 32);
    }
  }
  char v5 = *(void **)(v2 + 208);
  if (v5)
  {
    [v5 stopBrowsing];
  }
  else
  {
    uint64_t v6 = objc_opt_new();
    uint64_t v7 = *(void *)(a1 + 32);
    *(void *)(v7 + 208) = v6;
    [v6 setDispatchQueue:*(void *)(v7 + 8)];
  }
  CFRetain(*(CFTypeRef *)(a1 + 40));
  CFRetain(*(CFTypeRef *)(a1 + 48));
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 208), "startBrowsingFor:withTimeout:deviceFoundHandler:", 30.0);
}

void __APBrowserDiscoverAndInjectDevice_block_invoke_2(uint64_t a1, const void *a2)
{
  int v4 = NSErrorToOSStatus();
  CFTypeRef cf = 0;
  value = 0;
  int v5 = ***(_DWORD ***)(a1 + 32);
  if (!v4)
  {
    if (v5 <= 50)
    {
      if (v5 != -1)
      {
LABEL_4:
        if (v5 == -1) {
          _LogCategory_Initialize();
        }
        LogPrintF();
        goto LABEL_10;
      }
      if (_LogCategory_Initialize())
      {
        int v5 = ***(_DWORD ***)(a1 + 32);
        goto LABEL_4;
      }
    }
LABEL_10:
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (APBrowserCreateAdvertiserInfoForDevice(*MEMORY[0x1E4F1CF80], (const __CFDictionary *)a2, 0, &cf)|| APBrowserCopyDeviceIDFromBonjourInfo(v6, (uint64_t)a2, (CFNumberRef *)&value)|| (uint64_t v7 = CFDictionaryCreateMutable(v6, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0)
    {
      APSLogErrorAt();
    }
    else
    {
      uint64_t v8 = v7;
      CFDictionarySetValue(v7, @"deviceID", value);
      CFDictionarySetValue(v8, @"deviceInfo", cf);
      CFDictionarySetValue(v8, @"assistedInfo", *(const void **)(a1 + 48));
      CFDictionarySetValue(v8, @"isModernPresent", (const void *)*MEMORY[0x1E4F1CFD0]);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v6, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        uint64_t v10 = Mutable;
        CFDictionarySetValue(Mutable, @"AirPlayBonjourInfo", a2);
        CFDictionarySetValue(v10, @"LastEventInfo", v8);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 200), value, v10);
        int v11 = ***(_DWORD ***)(a1 + 32);
        if (v11 <= 50 && (v11 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        if (browser_dispatchEvent(*(const void **)(a1 + 40), 3, v8)) {
          APSLogErrorAt();
        }
        CFRelease(v10);
      }
      else
      {
        APSLogErrorAt();
      }
      CFRelease(v8);
    }
    goto LABEL_22;
  }
  if (v5 > 90) {
    goto LABEL_22;
  }
  if (v5 == -1)
  {
    if (!_LogCategory_Initialize()) {
      goto LABEL_22;
    }
    int v5 = ***(_DWORD ***)(a1 + 32);
  }
  if (v5 == -1) {
    _LogCategory_Initialize();
  }
  LogPrintF();
LABEL_22:
  if (value) {
    CFRelease(value);
  }
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t browser_dispatchEvent(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 232)) {
    return 4294960587;
  }
  uint64_t v7 = (int **)DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 229)) {
    return 4294960587;
  }
  CFRetain(a1);
  if (a3)
  {
    CFRetain(a3);
    CFDictionaryGetValue((CFDictionaryRef)a3, @"deviceID");
  }
  int v9 = **v7;
  if (v9 <= 20 && (v9 != -1 || _LogCategory_Initialize()))
  {
    APBrowserGetEventString(a2);
    if (**v7 == -1) {
      _LogCategory_Initialize();
    }
    LogPrintF();
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t APBrowserRemoveInjectedDevice(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    int v5 = *(NSObject **)(DerivedStorage + 8);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __APBrowserRemoveInjectedDevice_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = DerivedStorage;
    void block[5] = a2;
    void block[6] = a1;
    dispatch_sync(v5, block);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

uint64_t __APBrowserRemoveInjectedDevice_block_invoke(uint64_t a1)
{
  uint64_t result = CFDictionaryContainsKey(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 200), *(const void **)(a1 + 40));
  if (result)
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 200), *(const void **)(a1 + 40));
    uint64_t result = **(void **)(a1 + 32);
    if (*(int *)result <= 50)
    {
      if (*(_DWORD *)result != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

uint64_t browser_Invalidate()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = APSDispatchSyncTask();
  if (v0) {
    APSLogErrorAt();
  }
  return v0;
}

void browser_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 40) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 80);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 80) = 0;
  }

  *(void *)(DerivedStorage + 208) = 0;
  int v3 = *(const void **)(DerivedStorage + 368);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 368) = 0;
  }
  int v4 = *(const void **)(DerivedStorage + 88);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 88) = 0;
  }
  int v5 = *(const void **)(DerivedStorage + 96);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 96) = 0;
  }
  CFAllocatorRef v6 = *(const void **)(DerivedStorage + 104);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 104) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 112);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 112) = 0;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 144);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 144) = 0;
  }
  int v9 = *(const void **)(DerivedStorage + 152);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 152) = 0;
  }
  uint64_t v10 = *(const void **)(DerivedStorage + 160);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 160) = 0;
  }
  int v11 = *(const void **)(DerivedStorage + 168);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 168) = 0;
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 176);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 176) = 0;
  }
  uint64_t v13 = *(const void **)(DerivedStorage + 328);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 328) = 0;
  }
  CFTypeID v14 = *(const void **)(DerivedStorage + 344);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(DerivedStorage + 344) = 0;
  }
  uint64_t v15 = *(const void **)(DerivedStorage + 184);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(DerivedStorage + 184) = 0;
  }
  BOOL v16 = *(const void **)(DerivedStorage + 32);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(DerivedStorage + 32) = 0;
  }
  BOOL v17 = *(const void **)(DerivedStorage + 200);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(DerivedStorage + 200) = 0;
  }
  BOOL v18 = *(const void **)(DerivedStorage + 216);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(DerivedStorage + 216) = 0;
  }
  BOOL v19 = *(NSObject **)(DerivedStorage + 8);
  if (v19)
  {
    dispatch_release(v19);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v20 = *(NSObject **)(DerivedStorage + 16);
  if (v20)
  {
    dispatch_release(v20);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v21 = *(void **)(DerivedStorage + 352);
  if (v21)
  {

    *(void *)(DerivedStorage + 352) = 0;
  }
}

CFTypeRef browser_CopyDescription()
{
  if (!APSDispatchSyncTask()) {
    return 0;
  }
  APSLogErrorAt();
  return CFRetain(@"Description not available");
}

uint64_t browser_CopyProperty()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = FigDispatchSyncCopyPropertyImplementation();
  if (v0) {
    APSLogErrorAt();
  }
  return v0;
}

uint64_t browser_invalidate(void *a1)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v2 = browser_invalidateNoQueueCheck(a1);
  if (v2) {
    APSLogErrorAt();
  }
  return v2;
}

uint64_t browser_copyDescription(uint64_t a1)
{
  CFTypeRef v1 = *(CFTypeRef *)a1;
  int v2 = *(_DWORD *)(a1 + 8);
  int v3 = *(void **)(a1 + 16);
  CFAllocatorRef v4 = CFGetAllocator(*(CFTypeRef *)a1);
  return browser_copyDescriptionInternal((uint64_t)v1, v4, v2, v3);
}

uint64_t browser_copyDescriptionInternal(uint64_t a1, const __CFAllocator *a2, int a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v32 = 0;
  CFTypeRef v33 = 0;
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(a2, 0);
  CFMutableStringRef v34 = Mutable;
  if (Mutable)
  {
    int v9 = Mutable;
    int v27 = a3;
    CFStringAppend(Mutable, @"+-+ APBrowser state +-+\n");
    CFStringAppend(v9, @"\n");
    StringForMode = browser_getStringForMode(*(unsigned __int16 *)(DerivedStorage + 24), *(int **)DerivedStorage);
    CFStringAppendFormat(v9, 0, @"mode=%s", StringForMode);
    if (*(void *)(DerivedStorage + 32)) {
      CFStringAppendFormat(v9, 0, @" (%@)", *(void *)(DerivedStorage + 32));
    }
    char v31 = 1;
    int WiFiPower = APConnectivityHelperQueryWiFiPower(*(void *)(DerivedStorage + 184), (uint64_t)&v31);
    if (*(unsigned char *)(DerivedStorage + 130))
    {
      if (*(unsigned char *)(DerivedStorage + 129)) {
        uint64_t v12 = "yes";
      }
      else {
        uint64_t v12 = "no";
      }
    }
    else
    {
      uint64_t v12 = "<not queried, assuming no>";
    }
    if (*(unsigned char *)(DerivedStorage + 192)) {
      uint64_t v13 = "yes";
    }
    else {
      uint64_t v13 = "no";
    }
    if (*(unsigned char *)(DerivedStorage + 193)) {
      CFTypeID v14 = "yes";
    }
    else {
      CFTypeID v14 = "no";
    }
    uint64_t v15 = "<power reading not available, assuming no>";
    if (v31) {
      BOOL v16 = "yes";
    }
    else {
      BOOL v16 = "no";
    }
    if (!WiFiPower) {
      uint64_t v15 = v16;
    }
    if (*(unsigned char *)(DerivedStorage + 228)) {
      BOOL v17 = "yes";
    }
    else {
      BOOL v17 = "no";
    }
    CFStringAppendFormat(v9, 0, @" soloSupported=%s wifiSystemReady=%s awdlSystemReady=%s wifiPowered=%s avDevicePresent=%s", v12, v13, v14, v15, v17);
    if (*(unsigned char *)(DerivedStorage + 229)) {
      BOOL v18 = "yes";
    }
    else {
      BOOL v18 = "no";
    }
    CFStringAppendFormat(v9, 0, @" invalidated=%s\n", v18);
    int v19 = *(unsigned __int16 *)(DerivedStorage + 24);
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v21 = CMBaseObjectGetDerivedStorage();
    int v22 = (double *)(v21 + 384);
    if (v19) {
      int v22 = 0;
    }
    if (v19 == 1) {
      int v22 = (double *)(v21 + 392);
    }
    if (v19 == 2) {
      int v22 = (double *)(v21 + 400);
    }
    if (v19 == 3) {
      int v22 = (double *)(v21 + 408);
    }
    *int v22 = *v22 + Current - *(double *)(v21 + 416);
    *(double *)(v21 + 416) = Current;
    CFStringAppendFormat(v9, 0, @"%-34s %3lluh %02llum %02llus\n", "Time spent in None mode:", (unint64_t)*(double *)(DerivedStorage + 384) / 0xE10, (unint64_t)*(double *)(DerivedStorage + 384) % 0xE10 / 0x3C, (unint64_t)*(double *)(DerivedStorage + 384) % 0x3C);
    CFStringAppendFormat(v9, 0, @"%-34s %3lluh %02llum %02llus\n", "Time spent in Presence mode:", (unint64_t)*(double *)(DerivedStorage + 392) / 0xE10, (unint64_t)*(double *)(DerivedStorage + 392) % 0xE10 / 0x3C, (unint64_t)*(double *)(DerivedStorage + 392) % 0x3C);
    CFStringAppendFormat(v9, 0, @"%-34s %3lluh %02llum %02llus\n", "Time spent in DetailedNonP2P mode:", (unint64_t)*(double *)(DerivedStorage + 400) / 0xE10, (unint64_t)*(double *)(DerivedStorage + 400) % 0xE10 / 0x3C, (unint64_t)*(double *)(DerivedStorage + 400) % 0x3C);
    CFStringAppendFormat(v9, 0, @"%-34s %3lluh %02llum %02llus\n", "Time spent in Detailed mode:", (unint64_t)*(double *)(DerivedStorage + 408) / 0xE10, (unint64_t)*(double *)(DerivedStorage + 408) % 0xE10 / 0x3C, (unint64_t)*(double *)(DerivedStorage + 408) % 0x3C);
    CFStringAppendFormat(v9, 0, @"Discovery mode increase transitions: %u\n", *(unsigned int *)(DerivedStorage + 376));
    if (CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 200)))
    {
      context[0] = &v34;
      context[1] = a1;
      void context[2] = a2;
      int v29 = v27;
      int v30 = FigCFEqual();
      CFStringAppend(v34, @"\n");
      CFStringAppend(v34, @"Nearby devices:\n");
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 200), (CFDictionaryApplierFunction)browser_copyDescriptionForDevice, context);
    }
    if (CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 112)))
    {
      CFStringAppend(v34, @"\n");
      CFStringAppend(v34, @"BTLE devices:\n");
      CFDictionaryApplyBlock();
    }
    uint64_t v23 = APBrowserBTLEManagerCopyShowInfo(*(void *)(DerivedStorage + 96), v27, (uint64_t)&v33);
    if (v23)
    {
      uint64_t v24 = v23;
    }
    else
    {
      CFStringAppend(v34, @"\n");
      CFStringAppendFormat(v34, 0, @"%@", v33);
      if (CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 152)))
      {
        CFStringAppend(v34, @"\n");
        CFStringAppend(v34, @"Rapport devices:\n");
        CFDictionaryApplyBlock();
      }
      uint64_t v24 = APBrowserRapportManagerCopyShowInfo(*(void *)(DerivedStorage + 144), v27, (uint64_t)&v32);
      if (!v24)
      {
        CFStringAppend(v34, @"\n");
        CFStringAppendFormat(v34, 0, @"%@", v32);
        *a4 = v34;
        CFMutableStringRef v34 = 0;
        goto LABEL_43;
      }
    }
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    uint64_t v24 = 4294960568;
  }
LABEL_43:
  if (v33) {
    CFRelease(v33);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v34) {
    CFRelease(v34);
  }
  return v24;
}

void browser_copyDescriptionForDevice(const void *a1, const __CFDictionary *a2, uint64_t a3)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (int **)CMBaseObjectGetDerivedStorage();
  uint64_t v43 = 0;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v45 = 0u;
  uint64_t v7 = *(CFMutableStringRef **)a3;
  int v8 = *(_DWORD *)(a3 + 24);
  CFStringAppendFormat(**(CFMutableStringRef **)a3, 0, @"    DeviceID:%15@", a1);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a2, @"LastEventInfo");
  CFDictionaryRef v10 = Value;
  if (Value)
  {
    int v11 = CFDictionaryGetValue(Value, @"deviceInfo");
    uint64_t v12 = (uint64_t)v11;
    if (v11)
    {
      CFStringRef v13 = (const __CFString *)APAdvertiserInfoCopyProperty((uint64_t)v11, 0, @"deviceName", 0, (int *)&v43 + 1);
      if (!HIDWORD(v43))
      {
        CFStringRef v14 = v13;
        CFStringGetCString(v13, buffer, 256, 0x8000100u);
        CFStringAppendFormat(*v7, 0, @" Name:%-15s", buffer);
        if (v14) {
          CFRelease(v14);
        }
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v15 = "yes";
  if (!v12) {
    uint64_t v15 = "no";
  }
  CFStringAppendFormat(*v7, 0, @" AdvertiserInfo:%s", v15);
  if (*(unsigned char *)(a3 + 28))
  {
    CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"SidePlayBonjourInfo");
    HIDWORD(v43) = APBrowserGetTransports(v16, 0, &v43);
    BOOL v17 = "W";
    if ((v43 & 2) == 0) {
      BOOL v17 = "w";
    }
    if (v43) {
      BOOL v18 = "E";
    }
    else {
      BOOL v18 = "e";
    }
    CFStringAppendFormat(*v7, 0, @" _sideplay=%s%s", v17, v18);
    if (v10)
    {
LABEL_16:
      CFDictionaryGetValue(v10, @"isLegacyPresent");
      CFDictionaryGetValue(v10, @"isModernPresent");
      CFDictionaryGetValue(a2, @"DispatchTimeStamp");
      CFStringAppendF();
    }
  }
  else
  {
    int v42 = v8;
    CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"AirPlayBonjourInfo");
    CFDictionaryRef v20 = v19;
    if (v19) {
      uint64_t v41 = CFDictionaryGetValue(v19, @"cached");
    }
    else {
      uint64_t v41 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    HIDWORD(v43) = APBrowserGetTransports(v20, 0, &v43);
    uint64_t v21 = "w";
    if ((v43 & 2) != 0) {
      uint64_t v21 = "W";
    }
    int v22 = "a";
    if ((v43 & 4) != 0) {
      int v22 = "A";
    }
    uint64_t v23 = "u";
    if ((v43 & 8) != 0) {
      uint64_t v23 = "U";
    }
    uint64_t v24 = "n";
    if ((v43 & 0x80) != 0) {
      uint64_t v24 = "N";
    }
    if (v43) {
      uint64_t v25 = "E";
    }
    else {
      uint64_t v25 = "e";
    }
    CFStringAppendFormat(*v7, 0, @" _airplay=%s%s%s%s%s", v21, v22, v23, v24, v25);
    if ((v43 & 0x20) != 0) {
      uint64_t v26 = "B";
    }
    else {
      uint64_t v26 = "b";
    }
    CFStringAppendFormat(*v7, 0, @"%s", v26);
    unsigned int DeviceRelationship = browser_getDeviceRelationship(*(void *)(a3 + 8), a1, v12);
    uint64_t v28 = *v7;
    DeviceRelationshipString = browser_getDeviceRelationshipString((uint64_t)a1, DeviceRelationship, *DerivedStorage);
    CFStringAppendFormat(v28, 0, @"%s", DeviceRelationshipString);
    CFDictionaryRef v30 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"RAOPBonjourInfo");
    HIDWORD(v43) = APBrowserGetTransports(v30, 0, &v43);
    char v31 = "w";
    if ((v43 & 2) != 0) {
      char v31 = "W";
    }
    if ((v43 & 4) != 0) {
      CFTypeRef v32 = "A";
    }
    else {
      CFTypeRef v32 = "a";
    }
    CFTypeRef v33 = "u";
    if ((v43 & 8) != 0) {
      CFTypeRef v33 = "U";
    }
    if ((v43 & 0x80) != 0) {
      CFMutableStringRef v34 = "N";
    }
    else {
      CFMutableStringRef v34 = "n";
    }
    uint64_t v35 = "e";
    if (v43) {
      uint64_t v35 = "E";
    }
    CFStringAppendFormat(*v7, 0, @" _raop=%s%s%s%s%s", v31, v32, v33, v34, v35);
    uint64_t v36 = "B";
    if ((v43 & 0x20) == 0) {
      uint64_t v36 = "b";
    }
    CFStringAppendFormat(*v7, 0, @"%s", v36);
    CFDictionaryRef v37 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"AirPlayP2PBonjourInfo");
    HIDWORD(v43) = APBrowserGetTransports(v37, 0, &v43);
    if ((v43 & 4) != 0) {
      uint64_t v38 = "A";
    }
    else {
      uint64_t v38 = "a";
    }
    if ((v43 & 0x80) != 0) {
      uint64_t v39 = "N";
    }
    else {
      uint64_t v39 = "n";
    }
    CFStringAppendFormat(*v7, 0, @" _airplay-p2p=%s%s", v38, v39);
    if (v41 == (const void *)*MEMORY[0x1E4F1CFD0]) {
      uint64_t v40 = "Y";
    }
    else {
      uint64_t v40 = "N";
    }
    CFStringAppendFormat(*v7, 0, @" cached=%s", v40);
    int v8 = v42;
    if (v10) {
      goto LABEL_16;
    }
  }
  CFStringAppend(*v7, @"\n");
  if (v8) {
    CFStringAppendFormat(*v7, 0, @"        AdvertiserInfo=%@\n", v12);
  }
}

void __browser_copyDescriptionInternal_block_invoke(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)buffer = 0u;
  long long v16 = 0u;
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, @"    DeviceID:%@", a2);
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a3, @"IPAddress");
  CFStringGetCString(Value, buffer, 32, 0x8000100u);
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, @" IP=%-15s", buffer);
  CFAllocatorRef v6 = *(__CFString **)(a1 + 32);
  uint64_t v7 = CFDictionaryGetValue(a3, @"port");
  int v8 = CFDictionaryGetValue(a3, @"supportsSolo");
  CFStringAppendFormat(v6, 0, @" port=%-5@ supportsSolo=%@", v7, v8);
  CFStringRef v9 = (const __CFString *)CFDictionaryGetValue(a3, @"deviceName");
  buffer[0] = 0;
  if (v9)
  {
    CFDictionaryRef v10 = buffer;
    CFStringGetCString(v9, buffer, 32, 0x8000100u);
  }
  else
  {
    CFDictionaryRef v10 = "N/A";
  }
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, @" name: %-15s", v10);
  int v11 = (__CFString *)CFDictionaryGetValue(a3, @"bonjourDeviceID");
  uint64_t v12 = @"N/A";
  if (v11) {
    uint64_t v12 = v11;
  }
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, @" bonjourID: %@", v12);
  if (!v11)
  {
    CFStringRef v13 = (__CFString *)CFDictionaryGetValue(a3, @"connectionError");
    CFStringRef v14 = @"Pending";
    if (v13) {
      CFStringRef v14 = v13;
    }
    CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, @" (%@)", v14);
  }
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, @"\n");
}

void __browser_copyDescriptionInternal_block_invoke_2(uint64_t a1, uint64_t a2, CFDictionaryRef theDict)
{
  CFStringRef Value = CFDictionaryGetValue(theDict, @"rapportBonjourCorrelationID");
  int Int64 = CFDictionaryGetInt64();
  uint64_t v7 = "SystemPairingID";
  if (Int64 == 1) {
    uint64_t v7 = "BonjourDeviceID";
  }
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, @"    RapportDeviceID:%@ %s: %@\n", a2, v7, Value);
}

const void *browser_getDeviceRelationship(uint64_t a1, const void *a2, uint64_t a3)
{
  v13[2] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (int **)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v6 = (CFMutableDictionaryRef *)CMBaseObjectGetDerivedStorage();
  CFDictionaryGetTypeID();
  if (CFDictionaryGetTypedValue()) {
    goto LABEL_8;
  }
  if (!a3) {
    return 0;
  }
  uint64_t v7 = APAdvertiserInfoCopyProperty(a3, 0, @"publicCUSystemPairingIdentity", 0, 0);
  CFDictionaryGetTypeID();
  TypedCFStringRef Value = (const void *)CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    CFDictionarySetValue(v6[20], a2, TypedValue);
    CFDictionaryRemoveValue(v6[21], v7);
    CFStringGetTypeID();
    v12[0] = @"rapportBonjourCorrelationType";
    v12[1] = @"rapportBonjourCorrelationID";
    v13[0] = &unk_1F26CC328;
    v13[1] = a2;
    CFStringRef v9 = (const void *)CFDictionaryGetTypedValue();
    CFDictionarySetValue(v6[19], v9, (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:v12 count:2]);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (TypedValue)
  {
LABEL_8:
    TypedCFStringRef Value = (const void *)CFDictionaryGetInt64Ranged();
    if (TypedValue >= 3)
    {
      int v10 = **DerivedStorage;
      if (v10 <= 90 && (v10 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      return 0;
    }
  }
  return TypedValue;
}

const char *browser_getDeviceRelationshipString(uint64_t a1, unsigned int a2, int *a3)
{
  if (a2 < 3) {
    return off_1E688DE20[a2];
  }
  if (*a3 <= 90 && (*a3 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  return "?";
}

uint64_t browser_copyPropertyInternal(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFArray **a4)
{
  CMBaseObjectGetDerivedStorage();
  BOOL v18 = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  if (CFEqual(a2, @"showInfo"))
  {
    CMBaseObjectGetDerivedStorage();
    value = 0;
    uint64_t v8 = browser_copyDescriptionInternal(a1, a3, 0, &value);
    if (v8)
    {
      uint64_t IsConfiguredForMaximumDiscovery = v8;
      APSLogErrorAt();
    }
    else
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a3, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        int v10 = Mutable;
        int v11 = value;
        CFDictionaryAddValue(Mutable, @"detailedDescription", value);
        uint64_t IsConfiguredForMaximumDiscovery = 0;
        if (!v11) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
      APSLogErrorAt();
      uint64_t IsConfiguredForMaximumDiscovery = 4294960568;
    }
    int v10 = 0;
    int v11 = value;
    if (!value)
    {
LABEL_7:
      if (IsConfiguredForMaximumDiscovery) {
        goto LABEL_37;
      }
      goto LABEL_24;
    }
LABEL_6:
    CFRelease(v11);
    goto LABEL_7;
  }
  if (CFEqual(a2, @"isConfiguredForMaximumDiscovery"))
  {
    uint64_t IsConfiguredForMaximumDiscovery = browser_copyIsConfiguredForMaximumDiscovery(a1, &v18);
    if (IsConfiguredForMaximumDiscovery) {
      goto LABEL_37;
    }
    int v10 = v18;
    goto LABEL_24;
  }
  if (!CFEqual(a2, @"radiosNeededForMaximumDiscovery"))
  {
    int v10 = 0;
    uint64_t IsConfiguredForMaximumDiscovery = 4294954512;
    goto LABEL_24;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  LOBYTE(value) = 0;
  char v20 = 0;
  uint64_t WiFiPower = APConnectivityHelperQueryWiFiPower(*(void *)(DerivedStorage + 184), (uint64_t)&v20);
  if (WiFiPower)
  {
    uint64_t IsConfiguredForMaximumDiscovery = WiFiPower;
LABEL_34:
    APSLogErrorAt();
    goto LABEL_37;
  }
  uint64_t BluetoothPower = APDBluetoothHelperQueryBluetoothPower(*(void *)(DerivedStorage + 88), (uint64_t)&value);
  if (BluetoothPower)
  {
    uint64_t IsConfiguredForMaximumDiscovery = BluetoothPower;
    goto LABEL_34;
  }
  if (!(_BYTE)value || !v20)
  {
    long long v16 = CFArrayCreateMutable(a3, 2, MEMORY[0x1E4F1D510]);
    if (v16)
    {
      int v10 = v16;
      if (!(_BYTE)value) {
        CFArrayAppendValue(v16, @"MaximumDiscoveryNeeds_BluetoothRadio");
      }
      if (!v20) {
        CFArrayAppendValue(v10, @"MaximumDiscoveryNeeds_WiFiRadio");
      }
      goto LABEL_22;
    }
    APSLogErrorAt();
    uint64_t IsConfiguredForMaximumDiscovery = 4294960568;
LABEL_37:
    APSLogErrorAt();
    return IsConfiguredForMaximumDiscovery;
  }
  int v10 = 0;
LABEL_22:
  uint64_t IsConfiguredForMaximumDiscovery = 0;
LABEL_24:
  *a4 = v10;
  return IsConfiguredForMaximumDiscovery;
}

uint64_t browser_copyIsConfiguredForMaximumDiscovery(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (int **)CMBaseObjectGetDerivedStorage();
  __int16 v13 = 0;
  uint64_t WiFiPower = APConnectivityHelperQueryWiFiPower((uint64_t)DerivedStorage[23], (uint64_t)&v13);
  if (WiFiPower)
  {
    uint64_t v11 = WiFiPower;
LABEL_21:
    APSLogErrorAt();
    return v11;
  }
  int v5 = **DerivedStorage;
  if (v5 <= 20 && (v5 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t BluetoothPower = APDBluetoothHelperQueryBluetoothPower((uint64_t)DerivedStorage[11], (uint64_t)&v13 + 1);
  if (BluetoothPower)
  {
    uint64_t v11 = BluetoothPower;
    goto LABEL_21;
  }
  int v7 = **DerivedStorage;
  if (v7 <= 20 && (v7 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if ((_BYTE)v13) {
    BOOL v8 = HIBYTE(v13) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  CFStringRef v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  if (v8) {
    CFStringRef v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  CFTypeRef v10 = *v9;
  CFRetain(*v9);
  uint64_t v11 = 0;
  *a2 = v10;
  return v11;
}

uint64_t browser_GetMode()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = APSDispatchSyncTask();
  if (v0) {
    APSLogErrorAt();
  }
  return v0;
}

uint64_t browser_SetEventHandler()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = APSDispatchSyncTask();
  if (v0) {
    APSLogErrorAt();
  }
  return v0;
}

uint64_t browser_GetDNSForDeviceID()
{
  return APSDispatchSyncTask();
}

uint64_t browser_StartTrackingDevice()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = APSDispatchSyncTask();
  if (v0) {
    APSLogErrorAt();
  }
  return v0;
}

uint64_t browser_StopTrackingDevice()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = APSDispatchSyncTask();
  if (v0) {
    APSLogErrorAt();
  }
  return v0;
}

uint64_t browser_ReconfirmDevice()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = APSDispatchSyncTask();
  if (v0) {
    APSLogErrorAt();
  }
  return v0;
}

uint64_t browser_ConfigureForMaximumDiscovery()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = APSDispatchSyncTask();
  if (v0) {
    APSLogErrorAt();
  }
  return v0;
}

uint64_t browser_TriggerWoLCachingIfNeeded(const void *a1, uint64_t a2, const void *a3)
{
  if (a3) {
    CFRetain(a3);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t browser_CopyNANEndpointForDeviceID()
{
  return APSDispatchSyncTask();
}

uint64_t browser_CopyCUDNSNamesForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  CFAllocatorRef v6 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __browser_CopyCUDNSNamesForDeviceID_block_invoke;
  void v9[3] = &unk_1E688BD90;
  v9[4] = &v10;
  void v9[5] = a1;
  void v9[6] = a2;
  void v9[7] = a3;
  dispatch_sync(v6, v9);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_1D0906858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void browser_ResolveAddress(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __browser_ResolveAddress_block_invoke;
  void v13[3] = &unk_1E688DD90;
  void v13[6] = a2;
  v13[7] = a3;
  char v14 = a4;
  v13[8] = a5;
  v13[4] = a6;
  void v13[5] = a1;
  dispatch_sync(v12, v13);
}

uint64_t browser_CopyBrokerInfoForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  int v19 = 0;
  uint64_t v12 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __browser_CopyBrokerInfoForDeviceID_block_invoke;
  block[3] = &unk_1E688DDE0;
  block[4] = &v16;
  void block[5] = a1;
  void block[6] = a2;
  void block[7] = a3;
  void block[8] = a4;
  void block[9] = a5;
  block[10] = a6;
  dispatch_sync(v12, block);
  uint64_t v13 = *((unsigned int *)v17 + 6);
  _Block_object_dispose(&v16, 8);
  return v13;
}

void sub_1D0906A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t browser_getMode(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 229)) {
    return 4294960573;
  }
  uint64_t v3 = DerivedStorage;
  uint64_t result = 0;
  **(_WORD **)(a1 + 8) = *(_WORD *)(v3 + 24);
  return result;
}

void __browser_updateDetailedDiscoveryThresholdTimer_block_invoke()
{
  int v0 = **(_DWORD **)CMBaseObjectGetDerivedStorage();
  if (v0 <= 50 && (v0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v1 = CFStringCreateF();
  if (v1)
  {
    int v2 = (const void *)v1;
    uint64_t v3 = CFStringCreateF();
    if (v3)
    {
      CFAllocatorRef v4 = (const void *)v3;
      APSTapToRadarInvoke();
      CFRelease(v2);
      int v2 = v4;
    }
    CFRelease(v2);
  }
}

void __browser_updateDetailedDiscoveryThresholdTimer_block_invoke_2(uint64_t a1)
{
  int v2 = ***(_DWORD ***)(a1 + 32);
  if (v2 <= 30 && (v2 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  CFRelease(v3);
}

void browser_ensureDetailedForeverTimerStopped()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 360);
  if (v1)
  {
    uint64_t v2 = DerivedStorage;
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 360));
    dispatch_release(v1);
    *(void *)(v2 + 360) = 0;
  }
}

void browser_batchAndSendDiscoveredDeviceRTCMetrics()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v1 = *(_DWORD *)(DerivedStorage + 428);
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v19 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 200)))
  {
    APSEventRecorderGetEventTimeRecursive();
    int v2 = **(_DWORD **)DerivedStorage;
    if (v3 == 0.0)
    {
      if (v2 <= 50 && (v2 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      if (!APSRTCReportingAgentCreate()
        && (CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (v17[3] = (uint64_t)Mutable) != 0)&& (v6 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (v13[3] = (uint64_t)v6) != 0))
      {
        CFDictionaryApplyBlock();
        FigCFDictionaryApplyBlock();
        APSVersionUtilsGetShortVersionLength();
        CFDictionarySetCString();
        CFDictionarySetInt64();
        if (v1) {
          CFDictionarySetValue((CFMutableDictionaryRef)v13[3], @"userActivationSeen", (const void *)*MEMORY[0x1E4F1CFD0]);
        }
        if ((v1 & 2) != 0) {
          CFDictionarySetValue((CFMutableDictionaryRef)v13[3], @"backgroundActivationSeen", (const void *)*MEMORY[0x1E4F1CFD0]);
        }
        APSRTCReportingAgentSendEvent();
        int v7 = **(_DWORD **)DerivedStorage;
        if (v7 <= 50)
        {
          if (v7 != -1 || (v9 = _LogCategory_Initialize(), BOOL v8 = *(int **)DerivedStorage, v9))
          {
            LogPrintF();
            BOOL v8 = *(int **)DerivedStorage;
          }
          if (*v8 <= 15 && (*v8 != -1 || _LogCategory_Initialize())) {
            CFDictionaryApplyBlock();
          }
        }
      }
      else
      {
        APSLogErrorAt();
      }
    }
    else if (v2 <= 50 && (v2 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  uint64_t v10 = (const void *)v17[3];
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = (const void *)v13[3];
  if (v11) {
    CFRelease(v11);
  }
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
}

void sub_1D09070CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void browser_ensureDiscoverySessionThresholdTimerStopped()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v1 = **(_DWORD **)DerivedStorage;
  if (v1 <= 50 && (v1 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  int v2 = *(NSObject **)(DerivedStorage + 432);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 432));
    dispatch_release(v2);
    *(void *)(DerivedStorage + 432) = 0;
  }
}

void __browser_batchAndSendDiscoveredDeviceRTCMetrics_block_invoke(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  CFDictionaryRef v30 = 0;
  if (!browser_copyDeviceEventRecorder(a3, a2, &v30))
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a3, @"LastEventInfo");
    if (Value && (CFMutableDictionaryRef v6 = CFDictionaryGetValue(Value, @"deviceInfo")) != 0) {
      CFStringRef v7 = (const __CFString *)APAdvertiserInfoCopyProperty((uint64_t)v6, 0, @"deviceModel", 0, 0);
    }
    else {
      CFStringRef v7 = 0;
    }
    uint64_t v8 = 0;
    int v27 = 0;
    int v9 = v30;
    while (1)
    {
      unsigned int v29 = 0;
      APBrowserGetStartEventForBrowserDeviceEvent(*(void *)(a1 + 48), (uint64_t)v9, v8 + 268374016);
      if (v8 >= 0x12) {
        goto LABEL_28;
      }
      uint64_t v10 = off_1E688DE38[v8];
      APSEventRecorderGetEventTimeRecursive();
      if (v11 == 0.0) {
        goto LABEL_28;
      }
      uint64_t TimeBetweenEventsInMilliSecondRecursive = APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursiveEx();
      unsigned int v29 = TimeBetweenEventsInMilliSecondRecursive;
      if (TimeBetweenEventsInMilliSecondRecursive)
      {
        if (!v27)
        {
          uint64_t v20 = TimeBetweenEventsInMilliSecondRecursive;
          int v21 = ***(_DWORD ***)(a1 + 56);
          if (v21 <= 90)
          {
            if (v21 != -1) {
              goto LABEL_33;
            }
            if (_LogCategory_Initialize())
            {
              uint64_t v20 = v29;
LABEL_33:
              uint64_t v23 = (uint64_t)v10;
              uint64_t v24 = v20;
              uint64_t v22 = a2;
              LogPrintF();
            }
          }
        }
        int v27 = 1;
        goto LABEL_28;
      }
      if (!browser_ensureAndGetMutableArrayFromCFDictionary(*(const __CFDictionary **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v10, (int *)&v29))goto LABEL_38; {
      FigCFArrayAppendInt64();
      }
      int v13 = ***(_DWORD ***)(a1 + 56);
      if (v13 <= 15 && (v13 != -1 || _LogCategory_Initialize()))
      {
        uint64_t v25 = v10;
        uint64_t v26 = 0;
        uint64_t v23 = a2;
        uint64_t v24 = v8 + 268374016;
        uint64_t v22 = *(void *)(a1 + 64);
        LogPrintF();
      }
      if (v8) {
        goto LABEL_28;
      }
      if (v7)
      {
        CFDictionaryRef v14 = *(const __CFDictionary **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        unsigned int v31 = 0;
        if (!v14) {
          break;
        }
        GestaltProductTypeStringToDeviceClass();
        uint64_t v15 = (__CFString *)CUGestaltDeviceClassToString();
        if ([(__CFString *)v15 isEqualToString:@"?"])
        {
          uint64_t v15 = @"AirPort";
          if (!CFStringHasPrefix(v7, @"AirPort")) {
            uint64_t v15 = @"3rdParty";
          }
        }
        CFStringReplacingSuffix = browser_createCFStringReplacingSuffix(v10, (const __CFString *)[(__CFString *)v15 stringByAppendingString:@"Ms", v22, v23, v24, v25, v26]);
        if (CFStringReplacingSuffix)
        {
          uint64_t v17 = CFStringReplacingSuffix;
          if (browser_ensureAndGetMutableArrayFromCFDictionary(v14, CFStringReplacingSuffix, (int *)&v31)) {
            CFArrayAppendInt64();
          }
          else {
            APSLogErrorAt();
          }
          CFRelease(v17);
          unsigned int v29 = v31;
          if (v31) {
            goto LABEL_38;
          }
        }
        else
        {
          APSLogErrorAt();
          unsigned int v29 = 0;
        }
      }
      if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
        break;
      }
      uint64_t v18 = browser_createCFStringReplacingSuffix(v10, @"Bucket1");
      if (!v18) {
        goto LABEL_38;
      }
      uint64_t v19 = v18;
      CFDictionaryGetInt64();
      FigCFDictionarySetInt64();
      CFRelease(v19);
LABEL_28:
      if (++v8 == 18) {
        goto LABEL_46;
      }
    }
    APSLogErrorAt();
    unsigned int v29 = -6705;
LABEL_38:
    APSLogErrorAt();
    goto LABEL_28;
  }
  APSLogErrorAt();
  CFStringRef v7 = 0;
  int v9 = v30;
LABEL_46:
  if (v9) {
    CFRelease(v9);
  }
  if (v7) {
    CFRelease(v7);
  }
}

uint64_t browser_copyDeviceEventRecorder(const __CFDictionary *a1, uint64_t a2, void *a3)
{
  if (!a1 || !a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(a1, @"eventRecorder");
  if (Value)
  {
    CFStringRef v7 = Value;
    CFRetain(Value);
    CFStringRef v8 = 0;
LABEL_7:
    uint64_t v10 = 0;
    *a3 = v7;
    goto LABEL_8;
  }
  CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"APBrowser-%@", a2);
  uint64_t v9 = APSEventRecorderCreate();
  if (!v9)
  {
    CFDictionarySetValue(a1, @"eventRecorder", 0);
    CFStringRef v7 = 0;
    goto LABEL_7;
  }
  uint64_t v10 = v9;
  APSLogErrorAt();
LABEL_8:
  if (v8) {
    CFRelease(v8);
  }
  return v10;
}

CFMutableArrayRef browser_ensureAndGetMutableArrayFromCFDictionary(const __CFDictionary *a1, const void *a2, int *a3)
{
  CFDictionaryRef Value = (__CFArray *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFMutableArrayRef v7 = Value;
    int v8 = 0;
    CFMutableArrayRef Mutable = 0;
    if (!a3) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFDictionaryAddValue(a1, a2, Mutable);
    int v8 = 0;
    CFMutableArrayRef v7 = Mutable;
    if (!a3) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  APSLogErrorAt();
  CFMutableArrayRef v7 = 0;
  int v8 = -6728;
  if (a3) {
LABEL_6:
  }
    *a3 = v8;
LABEL_7:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v7;
}

void __browser_batchAndSendDiscoveredDeviceRTCMetrics_block_invoke_2(uint64_t a1, const __CFString *a2, CFArrayRef theArray)
{
  if (a2
    && theArray
    && *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
    && (CFIndex v5 = CFArrayGetCount(theArray)) != 0
    && (v14.CFIndex length = v5,
        v14.location = 0,
        CFArraySortValues(theArray, v14, MEMORY[0x1E4F1C258], 0),
        (CFMutableDictionaryRef v6 = browser_createCFStringReplacingSuffix(a2, @"P95Ms")) != 0))
  {
    CFMutableArrayRef v7 = v6;
    CFStringReplacingSuffix = browser_createCFStringReplacingSuffix(a2, @"MedianMs");
    if (CFStringReplacingSuffix)
    {
      uint64_t v9 = CFStringReplacingSuffix;
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count)
      {
        float v11 = (double)(Count - 1) * 0.95;
        if (vcvtps_s32_f32(v11) != vcvtms_s32_f32(v11)) {
          FigCFArrayGetInt64AtIndex();
        }
        FigCFArrayGetInt64AtIndex();
      }
      else
      {
        APSLogErrorAt();
      }
      CFIndex v12 = CFArrayGetCount(theArray);
      if (v12)
      {
        if ((v12 & 1) == 0) {
          FigCFArrayGetInt64AtIndex();
        }
        FigCFArrayGetInt64AtIndex();
      }
      else
      {
        APSLogErrorAt();
      }
      FigCFDictionarySetInt64();
      FigCFDictionarySetInt64();
      CFRelease(v9);
    }
    else
    {
      APSLogErrorAt();
    }
    CFRelease(v7);
  }
  else
  {
    APSLogErrorAt();
  }
}

int *__browser_batchAndSendDiscoveredDeviceRTCMetrics_block_invoke_3(uint64_t a1)
{
  uint64_t result = **(int ***)(a1 + 32);
  if (*result <= 15)
  {
    if (*result != -1) {
      return (int *)LogPrintF();
    }
    uint64_t result = (int *)_LogCategory_Initialize();
    if (result) {
      return (int *)LogPrintF();
    }
  }
  return result;
}

__CFString *browser_createCFStringReplacingSuffix(const __CFString *a1, const __CFString *a2)
{
  if (!CFStringHasSuffix(a1, @"Ms")
    || (CFIndex Length = CFStringGetLength(a1),
        CFIndex v5 = Length - CFStringGetLength(@"Ms"),
        CFIndex v6 = CFStringGetLength(@"Ms"),
        v5 < 0))
  {
    APSLogErrorAt();
    return 0;
  }
  else
  {
    CFIndex v7 = v6;
    CFDictionaryRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a1);
    uint64_t v9 = MutableCopy;
    if (MutableCopy)
    {
      v11.location = v5;
      v11.CFIndex length = v7;
      CFStringReplace(MutableCopy, v11, a2);
    }
    else
    {
      APSLogErrorAt();
    }
  }
  return v9;
}

void __browser_ensureDetailedForeverTimerStarted_block_invoke()
{
  int v0 = **(_DWORD **)CMBaseObjectGetDerivedStorage();
  if (v0 <= 30 && (v0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t DerivedStorage = (int **)CMBaseObjectGetDerivedStorage();
  if (APSRTCReportingAgentCreate())
  {
    APSLogErrorAt();
    CFMutableArrayRef Mutable = 0;
  }
  else
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFDictionarySetInt64();
      CFDictionarySetValue(Mutable, @"sessionType", @"Discovery");
      APSRTCReportingAgentSendEvent();
      int v3 = **DerivedStorage;
      if (v3 <= 30 && (v3 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
    }
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  browser_ensureDetailedForeverTimerStopped();
}

void __browser_ensureDetailedForeverTimerStarted_block_invoke_2(uint64_t a1)
{
}

void __browser_startOrExtendDiscoverySessionThresholdTimer_block_invoke()
{
  CFAbsoluteTimeGetCurrent();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v1 = *(unsigned __int16 *)(DerivedStorage + 24);
  int v2 = **(_DWORD **)DerivedStorage;
  if (v2 <= 50 && (v2 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if (v1)
  {
    browser_batchAndSendDiscoveredDeviceRTCMetrics();
    APSEventRecorderRecordEventWithFlagsAtTime();
    browser_ensureDiscoverySessionThresholdTimerStopped();
  }
}

void __browser_startOrExtendDiscoverySessionThresholdTimer_block_invoke_2(uint64_t a1)
{
}

uint64_t browser_updateDevice(const void *a1, const void *a2, const void *a3)
{
  CMBaseObjectGetDerivedStorage();
  __int16 v10 = 0;
  BOOL v9 = 0;
  if (!a2)
  {
    APSLogErrorAt();
    uint64_t updated = 4294960591;
    if (!a3) {
      return updated;
    }
    goto LABEL_9;
  }
  if (!a3)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  CFRetain(a3);
  uint64_t v6 = browser_queryServiceAvailabilityForDevice((uint64_t)a1, a2, (BOOL *)&v10 + 1, (BOOL *)&v10, &v9);
  if (v6)
  {
    uint64_t updated = v6;
    goto LABEL_15;
  }
  if (v10 || v9)
  {
    uint64_t updated = browser_updateEventInfoForDevice(a1, a2);
    if (!updated) {
      goto LABEL_9;
    }
LABEL_15:
    APSLogErrorAt();
    goto LABEL_9;
  }
  uint64_t updated = browser_removeNearbyDevice(a1, a2);
  if (updated) {
    goto LABEL_15;
  }
LABEL_9:
  CFRelease(a3);
  return updated;
}

uint64_t browser_queryServiceAvailabilityForDevice(uint64_t a1, const void *a2, BOOL *a3, BOOL *a4, BOOL *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v10 = DerivedStorage;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 200), a2);
    if (Value)
    {
      CFDictionaryRef v12 = Value;
      BOOL v13 = CFDictionaryGetValue(Value, *(const void **)(v10 + 56)) != 0;
      BOOL v14 = CFDictionaryGetValue(v12, @"RAOPBonjourInfo") != 0;
      BOOL v15 = CFDictionaryGetValue(v12, @"AirPlayP2PBonjourInfo") != 0;
    }
    else
    {
      BOOL v13 = 0;
      BOOL v14 = 0;
      BOOL v15 = 0;
    }
    *a3 = v13;
    *a4 = v14;
    uint64_t result = 0;
    if (a5) {
      *a5 = v15;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return result;
}

uint64_t browser_updateEventInfoForDevice(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v53[0] = 0;
  __int16 v52 = 0;
  __int16 v51 = 0;
  int v50 = 0;
  uint64_t v48 = 0;
  CFTypeRef v49 = 0;
  int v47 = 0;
  if (!a2)
  {
    APSLogErrorAt();
    uint64_t v24 = 0;
    CFTypeRef v32 = 0;
    uint64_t v39 = 4294960591;
    goto LABEL_61;
  }
  uint64_t v5 = DerivedStorage;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 200), a2);
  if (!Value)
  {
    APSLogErrorAt();
    uint64_t v24 = 0;
    CFTypeRef v32 = 0;
    uint64_t v39 = 4294960534;
    goto LABEL_61;
  }
  CFDictionaryRef v7 = Value;
  uint64_t ServiceAvailabilityForDevice = browser_queryServiceAvailabilityForDevice((uint64_t)a1, a2, (BOOL *)&v52 + 1, (BOOL *)&v52, 0);
  if (ServiceAvailabilityForDevice)
  {
    uint64_t v39 = ServiceAvailabilityForDevice;
    APSLogErrorAt();
    uint64_t v24 = 0;
LABEL_91:
    CFTypeRef v32 = 0;
    goto LABEL_61;
  }
  CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(v7, *(const void **)(v5 + 56));
  APBrowserGetIsLocallyAdvertised(v9, (char *)&v51 + 1);
  APBrowserGetTransports(v9, 0, (_DWORD *)&v48 + 1);
  APBrowserGetTransportsRequiringBroker(v9, &v50);
  if (v9) {
    CFDictionaryGetValue(v9, @"cached");
  }
  CFDictionaryRef v10 = (const __CFDictionary *)CFDictionaryGetValue(v7, @"RAOPBonjourInfo");
  APBrowserGetIsLocallyAdvertised(v10, (char *)&v51);
  APBrowserGetTransports(v10, 0, &v48);
  CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue(v7, @"AirPlayP2PBonjourInfo");
  APBrowserGetTransports(v11, 0, &v47);
  char v12 = (HIBYTE(v51) | v51) != 0;
  int v13 = FigCFEqual();
  CFAllocatorRef v14 = CFGetAllocator(a1);
  BOOL v15 = *(int **)v5;
  if (v13)
  {
    char v16 = v12;
    v54[0] = 0;
    CFDictionaryRef v17 = (const __CFDictionary *)CFDictionaryGetValue(v7, @"SidePlayBonjourInfo");
    if (!v17)
    {
      uint64_t v24 = 0;
      goto LABEL_17;
    }
    CFDictionaryRef v18 = v17;
    CFDataRef v19 = (const __CFData *)CFDictionaryGetValue(v17, @"txt");
    if (v19)
    {
      CFDataRef v20 = v19;
      CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(v18, @"name");
      if (v21)
      {
        char v12 = v16;
        if (APAdvertiserInfoCreateWithSidePlayDataAndDeviceName((uint64_t)v14, v20, v21, v54))
        {
          APSLogErrorAt();
          if (*v15 > 40 || *v15 == -1 && !_LogCategory_Initialize()) {
            goto LABEL_97;
          }
          goto LABEL_102;
        }
        goto LABEL_16;
      }
    }
    APSLogErrorAt();
    char v12 = v16;
  }
  else
  {
    v54[0] = 0;
    CFDictionaryRef v22 = (const __CFDictionary *)CFDictionaryGetValue(v7, @"AirPlayBonjourInfo");
    CFDictionaryRef v23 = (const __CFDictionary *)CFDictionaryGetValue(v7, @"RAOPBonjourInfo");
    if ((unint64_t)v22 | (unint64_t)v23)
    {
      if (APBrowserCreateAdvertiserInfoForDevice((uint64_t)v14, v22, v23, (CFTypeRef *)v54))
      {
        APSLogErrorAt();
        if (*v15 > 40 || *v15 == -1 && !_LogCategory_Initialize()) {
          goto LABEL_97;
        }
LABEL_102:
        LogPrintF();
        goto LABEL_97;
      }
LABEL_16:
      uint64_t v24 = v54[0];
      goto LABEL_17;
    }
  }
LABEL_97:
  if (v54[0]) {
    CFRelease(v54[0]);
  }
  uint64_t v24 = 0;
LABEL_17:
  BOOL v25 = (v48 & 0x2B00000000) != 0;
  BOOL v45 = ((BYTE4(v48) | v48) & 0x2B) != 0;
  unsigned int DeviceRelationship = browser_getDeviceRelationship((uint64_t)a1, a2, (uint64_t)v24);
  int v27 = *(int **)v5;
  int v28 = **(_DWORD **)v5;
  unsigned int v46 = DeviceRelationship;
  if (v28 <= 40)
  {
    if (v28 == -1)
    {
      if (!_LogCategory_Initialize()) {
        goto LABEL_22;
      }
      BOOL v41 = v25;
      char v42 = v12;
      CFDictionaryRef v43 = v7;
      uint64_t v44 = a1;
      int v27 = *(int **)v5;
    }
    else
    {
      BOOL v41 = v25;
      char v42 = v12;
      CFDictionaryRef v43 = v7;
      uint64_t v44 = a1;
    }
    browser_getDeviceRelationshipString((uint64_t)a2, DeviceRelationship, v27);
    LogPrintF();
    CFDictionaryRef v7 = v43;
    a1 = v44;
    BOOL v25 = v41;
    char v12 = v42;
  }
LABEL_22:
  CMBaseObjectGetDerivedStorage();
  if (v24 && APSRotatingKeyMapperIsInitialized())
  {
    unsigned int v29 = APAdvertiserInfoCopyProperty((uint64_t)v24, 0, @"bluetoothAddress", 0, 0);
    if (!APSRotatingKeyMapperSetDesiredKeyForID())
    {
      if (!v29) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    APSLogErrorAt();
    if (v29) {
LABEL_26:
    }
      CFRelease(v29);
  }
LABEL_27:
  CFAllocatorRef v30 = CFGetAllocator(a1);
  uint64_t DetailedModeEventInfoDictionary = APBrowserCreateDetailedModeEventInfoDictionary(v30, a2, *(void *)(v5 + 40), (uint64_t)v24, v52, HIBYTE(v52), v25, v45, v50, DeviceRelationship, v12, (uint64_t)v49, v53);
  if (DetailedModeEventInfoDictionary)
  {
    uint64_t v39 = DetailedModeEventInfoDictionary;
    APSLogErrorAt();
    goto LABEL_91;
  }
  if (v24)
  {
    CFTypeRef v32 = APAdvertiserInfoCopyProperty((uint64_t)v24, 0, @"publicCUSystemPairingIdentity", 0, 0);
    if (v32) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v5 + 176), v32, a2);
    }
  }
  else
  {
    CFTypeRef v32 = 0;
  }
  CFTypeRef v33 = v53[0];
  int v35 = v48;
  int v34 = HIDWORD(v48);
  char v36 = v47;
  CFAbsoluteTimeGetCurrent();
  v54[0] = 0;
  if (v33)
  {
    if (!browser_copyDeviceEventRecorder(v7, (uint64_t)a2, v54))
    {
      if ((v34 & 2) != 0)
      {
        APSEventRecorderRecordEventWithFlagsAtTime();
        if ((v34 & 4) == 0)
        {
LABEL_36:
          if ((v34 & 0x80) == 0) {
            goto LABEL_37;
          }
          goto LABEL_72;
        }
      }
      else if ((v34 & 4) == 0)
      {
        goto LABEL_36;
      }
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v34 & 0x80) == 0)
      {
LABEL_37:
        if ((v34 & 8) == 0) {
          goto LABEL_38;
        }
        goto LABEL_73;
      }
LABEL_72:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v34 & 8) == 0)
      {
LABEL_38:
        if ((v34 & 1) == 0) {
          goto LABEL_39;
        }
        goto LABEL_74;
      }
LABEL_73:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v34 & 1) == 0)
      {
LABEL_39:
        if ((v34 & 0x10) == 0) {
          goto LABEL_40;
        }
        goto LABEL_75;
      }
LABEL_74:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v34 & 0x10) == 0)
      {
LABEL_40:
        if ((v34 & 0x20) == 0) {
          goto LABEL_41;
        }
        goto LABEL_76;
      }
LABEL_75:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v34 & 0x20) == 0)
      {
LABEL_41:
        if ((v35 & 2) == 0) {
          goto LABEL_42;
        }
        goto LABEL_77;
      }
LABEL_76:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v35 & 2) == 0)
      {
LABEL_42:
        if ((v35 & 4) == 0) {
          goto LABEL_43;
        }
        goto LABEL_78;
      }
LABEL_77:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v35 & 4) == 0)
      {
LABEL_43:
        if ((v35 & 8) == 0) {
          goto LABEL_44;
        }
        goto LABEL_79;
      }
LABEL_78:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v35 & 8) == 0)
      {
LABEL_44:
        if ((v35 & 1) == 0) {
          goto LABEL_45;
        }
        goto LABEL_80;
      }
LABEL_79:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v35 & 1) == 0)
      {
LABEL_45:
        if ((v35 & 0x10) == 0) {
          goto LABEL_46;
        }
        goto LABEL_81;
      }
LABEL_80:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v35 & 0x10) == 0)
      {
LABEL_46:
        if ((v35 & 0x20) == 0) {
          goto LABEL_47;
        }
        goto LABEL_82;
      }
LABEL_81:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v35 & 0x20) == 0)
      {
LABEL_47:
        if ((v36 & 4) == 0) {
          goto LABEL_48;
        }
        goto LABEL_83;
      }
LABEL_82:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v36 & 4) == 0)
      {
LABEL_48:
        if ((v36 & 0x80) == 0) {
          goto LABEL_50;
        }
        goto LABEL_49;
      }
LABEL_83:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v36 & 0x80) == 0)
      {
LABEL_50:
        if (v46) {
          APSEventRecorderRecordEventWithFlagsAtTime();
        }
        if ((v34 & 0x20) != 0)
        {
          v53[1] = 0;
          CFDictionaryRef v37 = (__CFDictionary *)CFDictionaryGetValue(v7, @"DiscoveryMetrics");
          if (FigCFDictionaryGetDoubleIfPresent())
          {
            APSEventRecorderRecordEventWithFlagsAtTime();
            CFDictionaryRemoveValue(v37, @"btleBeaconEventTime");
          }
        }
        uint64_t v38 = v54[0];
        if (v35 | v34) {
          APSEventRecorderRecordEventWithFlagsAtTime();
        }
        CFDictionarySetValue(v33, @"eventRecorder", v38);
        if (!v38) {
          goto LABEL_59;
        }
        goto LABEL_58;
      }
LABEL_49:
      APSEventRecorderRecordEventWithFlagsAtTime();
      goto LABEL_50;
    }
    APSLogErrorAt();
    uint64_t v38 = v54[0];
    if (v54[0]) {
LABEL_58:
    }
      CFRelease(v38);
  }
  else
  {
    APSLogErrorAt();
  }
LABEL_59:
  uint64_t v39 = browser_setEventInfoForDevice(a1, a2, v53[0]);
  if (v39) {
    APSLogErrorAt();
  }
LABEL_61:
  if (v49) {
    CFRelease(v49);
  }
  if (v53[0]) {
    CFRelease(v53[0]);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v24) {
    CFRelease(v24);
  }
  return v39;
}

uint64_t browser_removeNearbyDevice(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (APSRotatingKeyMapperIsInitialized() && APSRotatingKeyMapperRemoveID()) {
    APSLogErrorAt();
  }
  CFAllocatorRef v5 = CFGetAllocator(a1);
  uint64_t DetailedModeEventInfoDictionary = APBrowserCreateDetailedModeEventInfoDictionary(v5, a2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (__CFDictionary **)&cf);
  if (DetailedModeEventInfoDictionary)
  {
    uint64_t v10 = DetailedModeEventInfoDictionary;
LABEL_21:
    APSLogErrorAt();
    goto LABEL_15;
  }
  if (*(_WORD *)(DerivedStorage + 24))
  {
    uint64_t v7 = browser_dispatchEvent(a1, 5, cf);
    if (v7)
    {
      uint64_t v10 = v7;
      goto LABEL_21;
    }
  }
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 200), a2))
  {
    if (CFDictionaryGetInt64())
    {
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      --*(_DWORD *)(v8 + 224);
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 200), a2);
    int v9 = **(_DWORD **)DerivedStorage;
    if (v9 <= 40 && (v9 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v10 = 0;
  }
  else
  {
    APSLogErrorAt();
    uint64_t v10 = 4294960569;
  }
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

uint64_t browser_setEventInfoForDevice(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 200), a2);
  if (!Value)
  {
    APSLogErrorAt();
    return -6762;
  }
  uint64_t v8 = Value;
  int v9 = CFDictionaryGetValue(Value, @"LastEventInfo");
  uint64_t Int64 = CFDictionaryGetInt64();
  unsigned int v15 = 0;
  if (v9 != a3)
  {
    uint64_t v11 = Int64;
    if (!a3 || !v9 || !CFEqual(a3, v9))
    {
      CFDictionarySetValue(v8, @"LastEventInfo", a3);
      if (CFDictionaryContainsKey((CFDictionaryRef)a3, @"deviceInfo"))
      {
        if (*(_WORD *)(DerivedStorage + 24))
        {
          if (v11) {
            int v12 = 4;
          }
          else {
            int v12 = 3;
          }
          unsigned int v15 = browser_dispatchEvent(a1, v12, a3);
          if (!v15)
          {
            int v13 = (const void *)CFStringCreateF();
            CFDictionarySetValue(v8, @"DispatchTimeStamp", v13);
            CFDictionarySetValue(v8, @"WasLastEventInfoDispatched", (const void *)*MEMORY[0x1E4F1CFD0]);
            if (v13) {
              CFRelease(v13);
            }
            return v15;
          }
          APSLogErrorAt();
        }
        CFDictionarySetValue(v8, @"WasLastEventInfoDispatched", (const void *)*MEMORY[0x1E4F1CFC8]);
      }
    }
  }
  return v15;
}

uint64_t browser_startWiFiPowerChangedListener(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 196)) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 192))
  {
    int v4 = **(_DWORD **)DerivedStorage;
    if (v4 <= 40 && (v4 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v5 = APConnectivityHelperRegisterForEvent(*(void *)(v3 + 184), a1, 2);
    if (v5) {
      APSLogErrorAt();
    }
    else {
      *(unsigned char *)(v3 + 196) = 1;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960587;
  }
  return v5;
}

uint64_t browser_handleConnectivityHelperEventInternal(const void *a1, int a2, uint64_t a3)
{
  int v6 = **(_DWORD **)CMBaseObjectGetDerivedStorage();
  if (v6 <= 40 && (v6 != -1 || _LogCategory_Initialize()))
  {
    APConnectivityHelperGetEventString(a2);
    LogPrintF();
  }
  uint64_t v7 = 0;
  switch(a2)
  {
    case 1:
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      int v9 = **(_DWORD **)DerivedStorage;
      if (v9 <= 40 && (v9 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      *(unsigned char *)(DerivedStorage + 192) = 1;
      if (*(unsigned char *)(DerivedStorage + 197))
      {
        uint64_t started = browser_startWiFiPowerChangedListener((uint64_t)a1);
        if (started)
        {
          uint64_t v7 = started;
          goto LABEL_75;
        }
        *(unsigned char *)(DerivedStorage + 197) = 0;
      }
      uint64_t v18 = CMBaseObjectGetDerivedStorage();
      if (!*(unsigned char *)(v18 + 194)) {
        goto LABEL_63;
      }
      if (APSIsVirtualMachine())
      {
        int v19 = **(_DWORD **)v18;
        if (v19 <= 40 && (v19 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        uint64_t v31 = browser_handleConnectivityHelperEventInternal(a1, 101, 0);
        if (!v31)
        {
LABEL_63:
          *(unsigned char *)(v18 + 194) = 0;
          uint64_t v29 = APBonjourBrowserSetWiFiSystemReady(*(void *)(DerivedStorage + 80));
          uint64_t v7 = 0;
          if (v29) {
            goto LABEL_56;
          }
          return v7;
        }
        uint64_t v7 = v31;
      }
      else
      {
        uint64_t v20 = APConnectivityHelperDeregisterForEvent(*(void *)(v18 + 184), (uint64_t)a1, 1);
        if (!v20) {
          goto LABEL_63;
        }
        uint64_t v7 = v20;
      }
      APSLogErrorAt();
      *(unsigned char *)(v18 + 194) = 0;
      goto LABEL_75;
    case 2:
      int v10 = **(_DWORD **)CMBaseObjectGetDerivedStorage();
      if (v10 <= 40 && (v10 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      uint64_t updated = browser_updateAVDevicePresent(a1);
      if (updated)
      {
        uint64_t v7 = updated;
      }
      else
      {
        uint64_t v7 = browser_updateConfigurationForMaximumDiscoveryStatus(a1);
        if (!v7) {
          return v7;
        }
      }
LABEL_75:
      APSLogErrorAt();
      goto LABEL_76;
    case 7:
      uint64_t v11 = CMBaseObjectGetDerivedStorage();
      int v12 = **(_DWORD **)v11;
      if (v12 <= 40 && (v12 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      *(unsigned char *)(v11 + 193) = 1;
      uint64_t v22 = CMBaseObjectGetDerivedStorage();
      if (!*(unsigned char *)(v22 + 195)) {
        goto LABEL_55;
      }
      if (!APSIsVirtualMachine())
      {
        uint64_t v24 = APConnectivityHelperDeregisterForEvent(*(void *)(v22 + 184), (uint64_t)a1, 7);
        if (!v24) {
          goto LABEL_55;
        }
        uint64_t v7 = v24;
LABEL_71:
        APSLogErrorAt();
        *(unsigned char *)(v22 + 195) = 0;
        APSLogErrorAt();
        goto LABEL_76;
      }
      int v23 = **(_DWORD **)v22;
      if (v23 <= 40 && (v23 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      uint64_t v28 = browser_handleConnectivityHelperEventInternal(a1, 107, 0);
      if (v28)
      {
        uint64_t v7 = v28;
        goto LABEL_71;
      }
LABEL_55:
      *(unsigned char *)(v22 + 195) = 0;
      uint64_t v29 = APBonjourBrowserSetAWDLSystemReady(*(void *)(v11 + 80));
      uint64_t v7 = 0;
      if (!v29) {
        return v7;
      }
LABEL_56:
      uint64_t v30 = v29;
      APSLogErrorAt();
      uint64_t v7 = v30;
LABEL_76:
      APSLogErrorAt();
      return v7;
    case 8:
      unsigned int v33 = 0;
      uint64_t v13 = CMBaseObjectGetDerivedStorage();
      if (*(unsigned char *)(v13 + 131))
      {
        if (a3)
        {
          uint64_t v14 = v13;
          char v15 = CFDictionaryGetInt64() != 0;
          *(unsigned char *)(v14 + 129) = v15;
          *(unsigned char *)(v14 + 130) = 1;
          int v16 = **(_DWORD **)v14;
          if (v16 <= 40)
          {
            if (v16 != -1 || (int v25 = _LogCategory_Initialize(), v15 = *(unsigned char *)(v14 + 129), v25))
            {
              LogPrintF();
              char v15 = *(unsigned char *)(v14 + 129);
            }
          }
          unsigned int v33 = APBrowserBTLEManagerSetLocalDeviceSupportsSolo(*(void *)(v14 + 96), v15);
          if (v33) {
            APSLogErrorAt();
          }
        }
        else
        {
          APSLogErrorAt();
          unsigned int v33 = -6705;
        }
      }
      uint64_t v26 = CMBaseObjectGetDerivedStorage();
      if (!*(unsigned char *)(v26 + 131)) {
        goto LABEL_59;
      }
      if (APSIsVirtualMachine())
      {
        int v27 = **(_DWORD **)v26;
        if (v27 <= 40 && (v27 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        if (!browser_handleConnectivityHelperEventInternal(a1, 108, 0))
        {
LABEL_59:
          uint64_t v7 = 0;
          *(unsigned char *)(v26 + 131) = 0;
          if (v33)
          {
            APSLogErrorAt();
            return v33;
          }
          return v7;
        }
      }
      else if (!APConnectivityHelperDeregisterForEvent(*(void *)(v26 + 184), (uint64_t)a1, 8))
      {
        goto LABEL_59;
      }
      APSLogErrorAt();
      goto LABEL_59;
    default:
      return v7;
  }
}

uint64_t browser_updateAVDevicePresent(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v10 = 0;
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 112)) < 1)
  {
    int v4 = 0;
    goto LABEL_5;
  }
  uint64_t WiFiPower = APConnectivityHelperQueryWiFiPower(*(void *)(DerivedStorage + 184), (uint64_t)&v10);
  if (WiFiPower == -6738)
  {
    int v4 = 0;
    char v10 = 0;
LABEL_5:
    int v5 = 2;
    goto LABEL_10;
  }
  uint64_t v6 = WiFiPower;
  if (WiFiPower) {
    goto LABEL_21;
  }
  int v4 = v10 != 0;
  if (v10) {
    int v5 = 1;
  }
  else {
    int v5 = 2;
  }
LABEL_10:
  if (*(unsigned __int8 *)(DerivedStorage + 228) == v4) {
    return 0;
  }
  uint64_t v7 = browser_dispatchEvent(a1, v5, 0);
  if (v7)
  {
    uint64_t v6 = v7;
LABEL_21:
    APSLogErrorAt();
    return v6;
  }
  int v8 = **(_DWORD **)DerivedStorage;
  if (v8 <= 50 && (v8 != -1 || _LogCategory_Initialize()))
  {
    APBrowserGetEventString(v5);
    LogPrintF();
  }
  uint64_t v6 = 0;
  *(unsigned char *)(DerivedStorage + 228) = v4;
  return v6;
}

uint64_t browser_updateConfigurationForMaximumDiscoveryStatus(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v9 = 0;
  uint64_t IsConfiguredForMaximumDiscovery = browser_copyIsConfiguredForMaximumDiscovery((uint64_t)a1, &v9);
  if (IsConfiguredForMaximumDiscovery)
  {
    uint64_t v5 = IsConfiguredForMaximumDiscovery;
    APSLogErrorAt();
    int v4 = v9;
    if (!v9) {
      return v5;
    }
    goto LABEL_10;
  }
  int v4 = v9;
  if (v9)
  {
    int v6 = **(_DWORD **)DerivedStorage;
    if (v6 <= 40 && (v6 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v7 = browser_dispatchEvent(a1, 9, 0);
    if (v7)
    {
      uint64_t v5 = v7;
    }
    else
    {
      uint64_t v5 = APDBluetoothHelperStopListeningToEvent(*(void *)(DerivedStorage + 88), 1);
      if (!v5)
      {
LABEL_10:
        CFRelease(v4);
        return v5;
      }
    }
    APSLogErrorAt();
    goto LABEL_10;
  }
  return 0;
}

void __browser_flushAllBTLEDevices_block_invoke(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  CFTypeRef cf = 0;
  int v8 = 0;
  if (theDict)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"lastInfo");
    if (Value)
    {
      if (browser_createBonjourInfoForBTLEDevice(Value, 1, &v8, (__CFDictionary **)&cf))
      {
        APSLogErrorAt();
        uint64_t v5 = v8;
      }
      else
      {
        uint64_t v5 = v8;
        if (browser_removeService(*(const void **)(a1 + 32), @"AirPlay", v8)
          || browser_removeService(*(const void **)(a1 + 32), @"RAOP", (const __CFDictionary *)cf))
        {
          APSLogErrorAt();
        }
      }
      if (v5) {
        CFRelease(v5);
      }
      CFTypeRef v6 = cf;
      if (cf)
      {
        CFRelease(v6);
      }
    }
  }
}

uint64_t browser_createBonjourInfoForBTLEDevice(const __CFDictionary *a1, int a2, __CFDictionary **a3, __CFDictionary **a4)
{
  unsigned int BTLEBonjourServiceArray = 0;
  value = 0;
  CFTypeRef cf = 0;
  CFStringGetTypeID();
  TypedCFDictionaryRef Value = (const void *)CFDictionaryGetTypedValue();
  CFStringGetTypeID();
  uint64_t v9 = CFDictionaryGetTypedValue();
  char v10 = CFDictionaryGetValue(a1, @"controlPort");
  if (!v10)
  {
    APSLogErrorAt();
    int v29 = -6705;
LABEL_27:
    unsigned int BTLEBonjourServiceArray = v29;
    goto LABEL_20;
  }
  uint64_t v11 = v10;
  CFStringGetTypeID();
  uint64_t v31 = (void *)CFDictionaryGetTypedValue();
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@:%@", v9, v11);
  if (!v13)
  {
    APSLogErrorAt();
    int v29 = -6728;
    goto LABEL_27;
  }
  CFStringRef v14 = v13;
  unsigned int BTLEBonjourServiceArray = browser_createBTLEBonjourServiceArray(v13, (CFArrayRef *)&value);
  if (BTLEBonjourServiceArray)
  {
    APSLogErrorAt();
LABEL_30:
    CFStringRef v27 = v14;
    goto LABEL_19;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    APSLogErrorAt();
    unsigned int BTLEBonjourServiceArray = -6728;
    goto LABEL_30;
  }
  int v16 = Mutable;
  CFDictionarySetValue(Mutable, @"deviceID", TypedValue);
  CFDictionarySetValue(v16, @"dnsName", v14);
  if (a2)
  {
    CFDictionarySetValue(v16, @"removedServices", value);
    CFDictionarySetValue(v16, @"serviceType", @"_airplay._tcp.");
  }
  else
  {
    uint64_t v30 = a3;
    CFDictionaryRef v17 = a4;
    CFDictionarySetValue(v16, @"services", value);
    CFDictionarySetValue(v16, @"serviceType", @"_airplay._tcp.");
    CFDataGetTypeID();
    uint64_t v18 = (const void *)CFDictionaryGetTypedValue();
    if (BTLEBonjourServiceArray)
    {
      APSLogErrorAt();
      CFStringRef v20 = 0;
      goto LABEL_34;
    }
    CFDictionarySetValue(v16, @"name", v31);
    CFDictionarySetValue(v16, @"txt", v18);
    a4 = v17;
    a3 = v30;
  }
  CFStringRef v19 = CFStringCreateWithFormat(v12, 0, @"%@:%@", v9, v11);
  CFStringRef v20 = v19;
  if (v19)
  {
    unsigned int BTLEBonjourServiceArray = browser_createBTLEBonjourServiceArray(v19, (CFArrayRef *)&cf);
    if (BTLEBonjourServiceArray)
    {
      APSLogErrorAt();
      goto LABEL_34;
    }
    CFStringRef v21 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v21)
    {
      uint64_t v22 = v21;
      CFDictionarySetValue(v21, @"deviceID", TypedValue);
      CFDictionarySetValue(v22, @"dnsName", v20);
      if (a2)
      {
        CFDictionarySetValue(v22, @"removedServices", cf);
        int v23 = @"serviceType";
        uint64_t v24 = @"_raop._tcp.";
        int v25 = v22;
      }
      else
      {
        CFDictionarySetValue(v22, @"services", cf);
        CFDictionarySetValue(v22, @"serviceType", @"_raop._tcp.");
        CFDataGetTypeID();
        uint64_t v26 = CFDictionaryGetTypedValue();
        if (BTLEBonjourServiceArray)
        {
          APSLogErrorAt();
          CFRelease(v16);
          CFRelease(v22);
          goto LABEL_17;
        }
        CFDictionarySetValue(v22, @"name", v31);
        int v23 = @"txt";
        int v25 = v22;
        uint64_t v24 = (__CFString *)v26;
      }
      CFDictionarySetValue(v25, v23, v24);
      *a3 = v16;
      *a4 = v22;
LABEL_17:
      CFRelease(v14);
LABEL_18:
      CFStringRef v27 = v20;
LABEL_19:
      CFRelease(v27);
      goto LABEL_20;
    }
  }
  APSLogErrorAt();
  unsigned int BTLEBonjourServiceArray = -6728;
LABEL_34:
  CFRelease(v16);
  CFRelease(v14);
  if (v20) {
    goto LABEL_18;
  }
LABEL_20:
  if (value) {
    CFRelease(value);
  }
  if (cf) {
    CFRelease(cf);
  }
  return BTLEBonjourServiceArray;
}

uint64_t browser_removeService(const void *a1, __CFString *a2, const __CFDictionary *a3)
{
  unsigned int Transports = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  key = 0;
  int v24 = 0;
  __int16 v23 = 0;
  BOOL v22 = 0;
  if (!a2 || !a3) {
    goto LABEL_25;
  }
  uint64_t v7 = (int **)DerivedStorage;
  if (browser_skipBonjourUpdate(a1, (uint64_t)a3)) {
    goto LABEL_43;
  }
  CFDictionaryGetValue(a3, @"name");
  if (@"RAOP" == a2 || @"RAOP" && CFEqual(a2, @"RAOP"))
  {
    int v8 = @"RAOPBonjourInfo";
    goto LABEL_17;
  }
  uint64_t v9 = (__CFString *)v7[8];
  if (v9 != a2 && (!v9 || !CFEqual(a2, v9)))
  {
    if (@"AirPlayPartial" == a2 || @"AirPlayPartial" && CFEqual(a2, @"AirPlayPartial"))
    {
      int v8 = @"AirPlayP2PBonjourInfo";
      goto LABEL_17;
    }
LABEL_25:
    APSLogErrorAt();
    unsigned int Transports = -6705;
    goto LABEL_43;
  }
  int v8 = (__CFString *)v7[7];
  if (!v8) {
    goto LABEL_25;
  }
LABEL_17:
  CFAllocatorRef v10 = CFGetAllocator(a1);
  unsigned int Transports = APBrowserCopyDeviceIDFromBonjourInfo(v10, (uint64_t)a3, (CFNumberRef *)&key);
  if (Transports) {
    goto LABEL_41;
  }
  CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v7[25], key);
  if (!v11)
  {
    int v19 = **v7;
    if (v19 > 40 || v19 == -1 && !_LogCategory_Initialize()) {
      goto LABEL_66;
    }
LABEL_54:
    LogPrintF();
LABEL_66:
    unsigned int Transports = 0;
    goto LABEL_43;
  }
  CFAllocatorRef v12 = v11;
  CFStringRef v13 = (void *)CFDictionaryGetValue(v11, v8);
  value = v13;
  if (!v13)
  {
    int v20 = **v7;
    if (v20 > 40 || v20 == -1 && !_LogCategory_Initialize()) {
      goto LABEL_66;
    }
    goto LABEL_54;
  }
  CFStringRef v14 = v13;
  unsigned int Transports = APBrowserGetTransports(a3, 1, &v24);
  if (Transports) {
    goto LABEL_41;
  }
  int v15 = **v7;
  if (v15 <= 40 && (v15 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  CFRetain(v14);
  CFDictionaryRemoveValue(v12, v8);
  unsigned int Transports = BonjourDevice_MergeInfo();
  if (Transports) {
    goto LABEL_41;
  }
  CFDictionarySetValue(v12, v8, value);
  CFRelease(value);
  CFArrayGetTypeID();
  TypedCFDictionaryRef Value = (const __CFArray *)CFDictionaryGetTypedValue();
  if (Transports != -6727)
  {
    if (Transports) {
      goto LABEL_41;
    }
  }
  unsigned int Transports = 0;
  if (TypedValue && CFArrayGetCount(TypedValue))
  {
    BOOL v17 = 0;
  }
  else
  {
    CFDictionaryRemoveValue(v12, v8);
    unsigned int Transports = browser_queryServiceAvailabilityForDevice((uint64_t)a1, key, (BOOL *)&v23 + 1, (BOOL *)&v23, &v22);
    if (Transports) {
      goto LABEL_41;
    }
    BOOL v17 = (HIBYTE(v23) | v23 | v22) == 0;
  }
  if (CFDictionaryGetInt64())
  {
    if (*((_WORD *)v7 + 12) == 1)
    {
      int v21 = **v7;
      if (v21 <= 40 && (v21 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      goto LABEL_43;
    }
    if ((v24 & 4) != 0)
    {
      unsigned int Transports = browser_cacheP2PDNSAddresses(a1, (uint64_t)key, v12);
      if (Transports) {
        goto LABEL_41;
      }
    }
  }
  if (v17)
  {
    unsigned int Transports = browser_removeNearbyDevice(a1, key);
    if (!Transports) {
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  unsigned int Transports = browser_updateEventInfoForDevice(a1, key);
  if (Transports) {
LABEL_41:
  }
    APSLogErrorAt();
LABEL_43:
  if (key) {
    CFRelease(key);
  }
  return Transports;
}

uint64_t browser_createBTLEBonjourServiceArray(const void *a1, CFArrayRef *a2)
{
  v7[1] = *(const void **)MEMORY[0x1E4F143B8];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v5 = Mutable;
    CFDictionarySetValue(Mutable, @"domain", @"local.");
    CFDictionarySetValue(v5, @"ifname", @"btle0");
    CFDictionarySetInt64();
    CFDictionarySetValue(v5, @"dnsName", a1);
    v7[0] = v5;
    *a2 = CFArrayCreate(0, v7, 1, MEMORY[0x1E4F1D510]);
    CFRelease(v5);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960568;
  }
}

uint64_t browser_skipBonjourUpdate(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = (int **)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (!APSSettingsGetInt64()) {
    return 0;
  }
  CFAllocatorRef v5 = CFGetAllocator(a1);
  if (APBrowserCopyDeviceIDFromBonjourInfo(v5, a2, (CFNumberRef *)&cf))
  {
    APSLogErrorAt();
  }
  else
  {
    int v6 = **DerivedStorage;
    if (v6 <= 30 && (v6 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t Int64 = APSSettingsGetInt64();
    if (Int64 == FigCFNumberGetUInt64())
    {
      int v8 = **DerivedStorage;
      if (v8 <= 30 && (v8 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      CFStringGetTypeID();
      if ((__CFString *)CFDictionaryGetTypedValue() != @"com.apple.airplay")
      {
        CFStringGetTypeID();
        if (!CFDictionaryGetTypedValue()
          || (CFStringGetTypeID(),
              TypedCFDictionaryRef Value = (const void *)CFDictionaryGetTypedValue(),
              !CFEqual(@"com.apple.airplay", TypedValue)))
        {
LABEL_31:
          int v21 = **DerivedStorage;
          if (v21 <= 30 && (v21 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          uint64_t v20 = 1;
          goto LABEL_36;
        }
      }
      uint64_t v10 = 0;
      char v11 = 1;
      do
      {
        char v12 = v11;
        CFArrayGetTypeID();
        uint64_t v13 = CFDictionaryGetTypedValue();
        CFArrayRef v14 = (const __CFArray *)v13;
        CFIndex v15 = 0;
        if (v10 <= 1) {
          uint64_t v16 = 1;
        }
        else {
          uint64_t v16 = v10;
        }
        uint64_t v17 = v10 - v16;
        if (v13)
        {
LABEL_20:
          CFIndex Count = CFArrayGetCount(v14);
          goto LABEL_22;
        }
        while (1)
        {
          CFIndex Count = 0;
LABEL_22:
          if (v15 >= Count) {
            break;
          }
          CFDictionaryGetTypeID();
          CFArrayGetTypedValueAtIndex();
          CFStringGetTypeID();
          int v19 = (__CFString *)CFDictionaryGetTypedValue();
          if (!(v17 + v15) || v19 != @"nan0" && (!v19 || !CFEqual(v19, @"nan0"))) {
            goto LABEL_31;
          }
          ++v15;
          if (v14) {
            goto LABEL_20;
          }
        }
        char v11 = 0;
        v10 += v15;
      }
      while ((v12 & 1) != 0);
    }
  }
  uint64_t v20 = 0;
LABEL_36:
  if (cf) {
    CFRelease(cf);
  }
  return v20;
}

uint64_t browser_cacheP2PDNSAddresses(const void *a1, uint64_t a2, __CFDictionary *a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  *(_OWORD *)__s1 = 0u;
  long long v24 = 0u;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  uint64_t v7 = (int **)DerivedStorage;
  uint64_t v8 = CFGetInt64();
  if (!v8)
  {
    APSLogErrorAt();
    return 4294960534;
  }
  uint64_t v9 = v8;
  uint64_t DNSForDeviceIDInternal = browser_getDNSForDeviceIDInternal(a1, v8, 1, 1, 0, 1, cStr, 0x100uLL, 0);
  if (DNSForDeviceIDInternal != -6727 && (uint64_t v11 = DNSForDeviceIDInternal, DNSForDeviceIDInternal)
    || (uint64_t v12 = browser_getDNSForDeviceIDInternal(a1, v9, 1, 0, 0, 1, __s1, 0x100uLL, 0), v12 != -6727)
    && (uint64_t v11 = v12, v12))
  {
    APSLogErrorAt();
    return v11;
  }
  if (cStr[0])
  {
    CFAllocatorRef v13 = CFGetAllocator(a1);
    CFStringRef v14 = CFStringCreateWithCString(v13, cStr, 0x8000100u);
    if (!v14)
    {
      APSLogErrorAt();
      return 4294960568;
    }
    CFDictionaryRef Value = v14;
    CFDictionarySetValue(a3, @"CachedAirPlayP2PDNS", v14);
    int v16 = **v7;
    if (v16 <= 40 && (v16 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
  }
  else
  {
    CFDictionaryRef Value = CFDictionaryGetValue(a3, @"CachedAirPlayP2PDNS");
    if (Value)
    {
      int v17 = **v7;
      if (v17 <= 40 && (v17 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      CFDictionaryRemoveValue(a3, @"CachedAirPlayP2PDNS");
      CFDictionaryRef Value = 0;
    }
  }
  if (!__s1[0] || !strncmp(__s1, cStr, 0x100uLL))
  {
    int v19 = CFDictionaryGetValue(a3, @"CachedRAOPP2PDNS");
    if (v19)
    {
      int v21 = **v7;
      if (v21 <= 40 && (v21 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      CFDictionaryRemoveValue(a3, @"CachedRAOPP2PDNS");
      uint64_t v11 = 0;
      int v19 = 0;
      if (!Value) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  CFAllocatorRef v18 = CFGetAllocator(a1);
  int v19 = CFStringCreateWithCString(v18, __s1, 0x8000100u);
  if (v19)
  {
    CFDictionarySetValue(a3, @"CachedRAOPP2PDNS", v19);
    int v20 = **v7;
    if (v20 <= 40 && (v20 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
LABEL_32:
    uint64_t v11 = 0;
    if (!Value) {
      goto LABEL_37;
    }
LABEL_36:
    CFRelease(Value);
    goto LABEL_37;
  }
  APSLogErrorAt();
  uint64_t v11 = 4294960568;
  if (Value) {
    goto LABEL_36;
  }
LABEL_37:
  if (v19) {
    CFRelease(v19);
  }
  return v11;
}

uint64_t browser_getDNSForDeviceIDInternal(const void *a1, uint64_t a2, int a3, int a4, int a5, int a6, char *a7, size_t a8, unsigned char *a9)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t valuePtr = a2;
  unsigned int v54 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v64 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  *(_OWORD *)buffer = 0u;
  if (*(unsigned char *)(DerivedStorage + 229)) {
    return -6723;
  }
  int v17 = (int **)DerivedStorage;
  CFAllocatorRef v18 = CFGetAllocator(a1);
  CFNumberRef v19 = CFNumberCreate(v18, kCFNumberSInt64Type, &valuePtr);
  if (!v19)
  {
    APSLogErrorAt();
    return -6728;
  }
  CFNumberRef v20 = v19;
  if (IsAppleInternalBuild())
  {
    CFDictionaryRef v21 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 216);
    if (v21)
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v21, v20);
      if (Value)
      {
        if (CFStringGetCString(Value, a7, a8, 0x8000100u))
        {
          unsigned int v54 = 0;
        }
        else
        {
          APSLogErrorAt();
          unsigned int v54 = -6762;
          APSLogErrorAt();
        }
        goto LABEL_8;
      }
    }
    unsigned int v54 = 0;
  }
  CFDictionaryRef v24 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v17[25], v20);
  if (!v24)
  {
    int v51 = -6727;
    goto LABEL_80;
  }
  CFDictionaryRef v25 = v24;
  int v53 = a3;
  if (!a5)
  {
    if (a4 || (long long v37 = (void *)CFDictionaryGetValue(v24, @"RAOPBonjourInfo")) == 0)
    {
      int v34 = 0;
    }
    else
    {
      long long v27 = v37;
      unsigned int DNSName = BonjourDevice_GetDNSName();
      unsigned int v54 = DNSName;
      int v34 = -6727;
      if (DNSName != -6727)
      {
LABEL_32:
        if (a6) {
          goto LABEL_33;
        }
        BOOL v44 = DNSName == -6727 || buffer[0] == 0;
        BOOL v45 = !v44;
        if (!v53 || v45) {
          goto LABEL_33;
        }
        if (a4 || (CFStringRef v46 = (const __CFString *)CFDictionaryGetValue(v25, @"CachedRAOPP2PDNS")) == 0)
        {
          CFStringRef v46 = (const __CFString *)CFDictionaryGetValue(v25, @"CachedAirPlayP2PDNS");
          if (!v46) {
            goto LABEL_33;
          }
        }
        if (CFStringGetCString(v46, buffer, 256, 0x8000100u))
        {
          unsigned int v54 = 0;
          int v49 = **v17;
          if (v49 <= 40 && (v49 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          goto LABEL_33;
        }
        APSLogErrorAt();
        int v51 = -6762;
LABEL_80:
        unsigned int v54 = v51;
LABEL_8:
        __int16 v23 = v20;
LABEL_66:
        CFRelease(v23);
        return v54;
      }
    }
    long long v35 = (void *)CFDictionaryGetValue(v25, v17[7]);
    if (!v35 || (v27 = v35, DNSName = BonjourDevice_GetDNSName(), v54 = DNSName, int v34 = -6727, DNSName == -6727))
    {
      long long v27 = (void *)CFDictionaryGetValue(v25, @"AirPlayP2PBonjourInfo");
      if (v27)
      {
        unsigned int DNSName = BonjourDevice_GetDNSName();
        unsigned int v54 = DNSName;
      }
      else
      {
        unsigned int DNSName = v34;
      }
    }
    goto LABEL_32;
  }
  CFDictionaryRef v26 = (const __CFDictionary *)CFDictionaryGetValue(v24, v17[7]);
  long long v27 = v26;
  if (v26)
  {
    CFArrayRef v28 = (const __CFArray *)CFDictionaryGetValue(v26, @"services");
    if (v28)
    {
      CFArrayRef v29 = v28;
      CFIndex Count = CFArrayGetCount(v28);
      if (Count >= 1)
      {
        CFIndex v31 = Count;
        CFIndex v32 = 0;
        while (1)
        {
          CFArrayGetValueAtIndex(v29, v32);
          CFStringGetTypeID();
          TypedCFStringRef Value = (__CFString *)CFDictionaryGetTypedValue();
          if (TypedValue == @"broker0" || TypedValue && CFEqual(TypedValue, @"broker0")) {
            break;
          }
          if (v31 == ++v32) {
            goto LABEL_33;
          }
        }
        CFDictionaryGetCString();
      }
    }
  }
LABEL_33:
  if (a9) {
    *a9 = 0;
  }
  CFStringRef v38 = (const __CFString *)APSSettingsCopyValue();
  CFStringRef v39 = v38;
  if (v38 && CFStringGetLength(v38) >= 1)
  {
    buffer[0] = 0;
    int v56 = 0;
    if (!v27)
    {
      APSLogErrorAt();
      int v56 = -6705;
LABEL_45:
      unsigned int v54 = v56;
      int v43 = **v17;
      if (v43 <= 50 && (v43 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      goto LABEL_60;
    }
    CFArrayRef v40 = (const __CFArray *)BonjourDevice_CopyConnectionInfo();
    if (v56)
    {
      APSLogErrorAt();
    }
    else
    {
      if (CFArrayGetCount(v40)
        && (CFDictionaryGetTypeID(), (TypedCFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetTypedValueAtIndex()) != 0)
        && (CFStringRef v42 = (const __CFString *)CFDictionaryGetValue(TypedValueAtIndex, @"dnsName")) != 0)
      {
        if (CFStringGetCString(v42, buffer, 256, 0x8000100u)) {
          goto LABEL_43;
        }
        APSLogErrorAt();
        int v52 = -6762;
      }
      else
      {
        APSLogErrorAt();
        int v52 = -6727;
      }
      int v56 = v52;
    }
LABEL_43:
    if (v40) {
      CFRelease(v40);
    }
    goto LABEL_45;
  }
LABEL_60:
  int v47 = **v17;
  if (v47 <= 40 && (v47 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  strncpy(a7, buffer, a8);
  CFRelease(v20);
  if (v39)
  {
    __int16 v23 = v39;
    goto LABEL_66;
  }
  return v54;
}

uint64_t __browser_ensureConnectivityCheckTimerStarted_block_invoke()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(void *)(result + 112))
  {
    mach_absolute_time();
    return CFDictionaryApplyBlock();
  }
  return result;
}

void __browser_ensureConnectivityCheckTimerStarted_block_invoke_2(uint64_t a1)
{
}

int *__browser_handleConnectivityCheckTimerFired_block_invoke(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  char v9 = 0;
  if (!a2 || !a3)
  {
    APSLogErrorAt();
LABEL_14:
    uint64_t result = **(int ***)(a1 + 40);
    if (*result <= 60)
    {
      if (*result != -1) {
        return (int *)LogPrintF();
      }
      uint64_t result = (int *)_LogCategory_Initialize();
      if (result) {
        return (int *)LogPrintF();
      }
    }
    return result;
  }
  CFDictionaryGetInt64();
  uint64_t result = (int *)UpTicksToSeconds();
  if ((unint64_t)result >= 0x3D)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a3, @"IPAddress");
    uint64_t result = (int *)browser_shouldQueryIPv4Address(Value, &v9);
    if (result) {
      goto LABEL_13;
    }
    if (v9 == 1)
    {
      int v8 = ***(_DWORD ***)(a1 + 40);
      if (v8 <= 20 && (v8 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      uint64_t result = (int *)browser_startBTLEDeviceQuery(*(const void **)(a1 + 48), a2);
      if (result)
      {
LABEL_13:
        APSLogErrorAt();
        goto LABEL_14;
      }
    }
  }
  return result;
}

uint64_t browser_shouldQueryIPv4Address(const __CFString *a1, char *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v9 = 0u;
  if (a1 && CFStringGetCString(a1, buffer, 128, 0x8000100u))
  {
    inet_pton(2, buffer, &v7);
    uint64_t result = 0;
    unsigned int v4 = bswap32(v7) >> 16;
    if (v4) {
      BOOL v5 = v4 == 43518;
    }
    else {
      BOOL v5 = 1;
    }
    char v6 = !v5;
    *a2 = v6;
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return result;
}

uint64_t browser_startBTLEDeviceQuery(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v20 = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  uint64_t v5 = DerivedStorage;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 112), a2);
  if (!Value)
  {
    APSLogErrorAt();
    return 4294960534;
  }
  CFDictionaryRef v7 = Value;
  CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(Value, @"IPAddress");
  shouldQueryIPv4int Address = browser_shouldQueryIPv4Address(v8, &v20);
  if (shouldQueryIPv4Address)
  {
    uint64_t v18 = shouldQueryIPv4Address;
    goto LABEL_16;
  }
  if (v20 == 1)
  {
    long long v10 = CFDictionaryGetValue(v7, @"port");
    uint64_t v11 = *(void *)(v5 + 104);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    long long v14 = *(uint64_t (**)(uint64_t, const void *, const __CFString *, const void *, void (*)(uint64_t, const void *, const void *, const void *, int), const void *))(v13 + 8);
    if (v14)
    {
      uint64_t v15 = v14(v11, a2, v8, v10, browser_handleBTLEQueryEventExternal, a1);
      if (!v15)
      {
        CFRetain(a1);
        mach_absolute_time();
        uint64_t Int64 = (const void *)CFNumberCreateInt64();
        if (!Int64)
        {
          APSLogErrorAt();
          return 4294960568;
        }
        int v17 = Int64;
        CFDictionarySetValue(v7, @"lastQueryTicks", Int64);
        CFRelease(v17);
        return 0;
      }
      uint64_t v18 = v15;
    }
    else
    {
      uint64_t v18 = 4294954514;
    }
LABEL_16:
    APSLogErrorAt();
    return v18;
  }
  if (!v20) {
    browser_removeBonjourWithBTLE(a1, a2);
  }
  return 0;
}

uint64_t browser_removeBonjourWithBTLE(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  long long v14 = 0;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 112), a2);
  if (!Value)
  {
    int v11 = **(_DWORD **)DerivedStorage;
    if (v11 <= 40 && (v11 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    goto LABEL_15;
  }
  CFDictionaryRef v6 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"lastInfo");
  if (!v6)
  {
LABEL_15:
    uint64_t v10 = 0;
    goto LABEL_16;
  }
  uint64_t v7 = browser_createBonjourInfoForBTLEDevice(v6, 1, &v14, (__CFDictionary **)&cf);
  if (v7)
  {
    uint64_t v10 = v7;
    APSLogErrorAt();
    CFStringRef v8 = v14;
  }
  else
  {
    CFStringRef v8 = v14;
    uint64_t v9 = browser_removeService(a1, @"AirPlay", v14);
    if (v9)
    {
      uint64_t v10 = v9;
    }
    else
    {
      uint64_t v10 = browser_removeService(a1, @"RAOP", (const __CFDictionary *)cf);
      if (!v10) {
        goto LABEL_6;
      }
    }
    APSLogErrorAt();
  }
LABEL_6:
  if (v8) {
    CFRelease(v8);
  }
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

void browser_handleBTLEQueryEventExternal(uint64_t a1, const void *a2, const void *a3, const void *a4, int a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a4);
  CFRetain(a2);
  if (a3) {
    CFRetain(a3);
  }
  uint64_t v10 = *(NSObject **)(DerivedStorage + 8);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __browser_handleBTLEQueryEventExternal_block_invoke;
  void v11[3] = &__block_descriptor_60_e5_v8__0l;
  v11[4] = a4;
  void v11[5] = a2;
  void v11[6] = a3;
  int v12 = a5;
  dispatch_async(v10, v11);
}

void __browser_handleBTLEQueryEventExternal_block_invoke(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  int v2 = *(const void **)(a1 + 32);
  CFStringRef v3 = *(CFStringRef *)(a1 + 40);
  unsigned int v4 = *(const void **)(a1 + 48);
  int v5 = *(_DWORD *)(a1 + 56);
  int BonjourInfoForBTLEDevice = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v25 = 0;
  CFTypeRef cf = 0;
  value = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v29 = 0u;
  if (!v3)
  {
    APSLogErrorAt();
    CFMutableArrayRef Mutable = 0;
    goto LABEL_17;
  }
  uint64_t v7 = (int **)DerivedStorage;
  CFStringRef v8 = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 112), v3);
  if (v8)
  {
    uint64_t v9 = v8;
    if (v4)
    {
      CFStringGetTypeID();
      TypedCFDictionaryRef Value = (const __CFString *)CFDictionaryGetTypedValue();
      CFStringGetTypeID();
      CFStringRef v11 = (const __CFString *)CFDictionaryGetTypedValue();
      if (TypedValue && v11 && !CFStringHasPrefix(v11, TypedValue))
      {
        int v19 = **v7;
        if (v19 <= 50 && (v19 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
      }
      else if (!v5)
      {
        CFDictionarySetValue(v9, @"lastInfo", v4);
        int BonjourInfoForBTLEDevice = browser_createBonjourInfoForBTLEDevice((const __CFDictionary *)v4, 0, (__CFDictionary **)&cf, (__CFDictionary **)&v25);
        if (BonjourInfoForBTLEDevice
          || (CFStringGetTypeID(), int v12 = (const void *)CFDictionaryGetTypedValue(), BonjourInfoForBTLEDevice)
          || (CFAllocatorRef v13 = CFGetAllocator(v2),
              CFDictionaryRef v14 = (const __CFDictionary *)cf,
              (int BonjourInfoForBTLEDevice = APBrowserCopyDeviceIDFromBonjourInfo(v13, (uint64_t)cf, (CFNumberRef *)&value)) != 0))
        {
          APSLogErrorAt();
          CFMutableArrayRef Mutable = 0;
LABEL_14:
          CFStringRef v3 = 0;
          goto LABEL_32;
        }
        CFDictionarySetValue(v9, @"deviceName", v12);
        CFDictionarySetValue(v9, @"bonjourDeviceID", value);
        CFDictionarySetValue(v9, @"connectionError", @"No Error");
        CFAllocatorRef v15 = CFGetAllocator(v2);
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          int v17 = CFDictionaryGetValue(v9, @"btleRSSI");
          FigCFDictionarySetValueFromKeyInDict();
          CFDictionarySetValue(Mutable, @"btleRSSI", v17);
          int BonjourInfoForBTLEDevice = browser_addOrUpdateService(v2, @"AirPlay", v14, Mutable);
          if (BonjourInfoForBTLEDevice
            || (int BonjourInfoForBTLEDevice = browser_addOrUpdateService(v2, @"RAOP", (const __CFDictionary *)v25, Mutable)) != 0)
          {
            APSLogErrorAt();
          }
          goto LABEL_14;
        }
        APSLogErrorAt();
        CFStringRef v3 = 0;
        int v18 = -6728;
        goto LABEL_18;
      }
      goto LABEL_23;
    }
    if (v5)
    {
LABEL_23:
      int v20 = **v7;
      if (v20 <= 20 && (v20 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      DebugGetErrorString();
      CFStringRef v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x8000100u);
      CFDictionarySetValue(v9, @"connectionError", v3);
      CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(v9, @"lastInfo");
      if (v21)
      {
        int BonjourInfoForBTLEDevice = browser_createBonjourInfoForBTLEDevice(v21, 1, (__CFDictionary **)&cf, (__CFDictionary **)&v25);
        if (BonjourInfoForBTLEDevice
          || (int BonjourInfoForBTLEDevice = browser_removeService(v2, @"AirPlay", (const __CFDictionary *)cf)) != 0
          || (int BonjourInfoForBTLEDevice = browser_removeService(v2, @"RAOP", (const __CFDictionary *)v25)) != 0)
        {
          APSLogErrorAt();
        }
      }
      CFMutableArrayRef Mutable = 0;
      goto LABEL_32;
    }
    APSLogErrorAt();
    CFMutableArrayRef Mutable = 0;
    CFStringRef v3 = 0;
LABEL_17:
    int v18 = -6705;
LABEL_18:
    int BonjourInfoForBTLEDevice = v18;
    goto LABEL_32;
  }
  int v23 = **v7;
  if (v23 <= 40 && (v23 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  CFMutableArrayRef Mutable = 0;
  CFStringRef v3 = 0;
  int BonjourInfoForBTLEDevice = 0;
LABEL_32:
  CFRelease(v2);
  if (cf) {
    CFRelease(cf);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (value) {
    CFRelease(value);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v3) {
    CFRelease(v3);
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  BOOL v22 = *(const void **)(a1 + 48);
  if (v22) {
    CFRelease(v22);
  }
}

uint64_t browser_addOrUpdateService(const void *a1, __CFString *a2, const __CFDictionary *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  key = 0;
  if (!*(_WORD *)(DerivedStorage + 24)) {
    return 0;
  }
  if (a2 && a3)
  {
    uint64_t v9 = DerivedStorage;
    if (browser_skipBonjourUpdate(a1, (uint64_t)a3)) {
      goto LABEL_48;
    }
    CFAllocatorRef v10 = CFGetAllocator(a1);
    uint64_t v11 = APBrowserCopyDeviceIDFromBonjourInfo(v10, (uint64_t)a3, (CFNumberRef *)&key);
    if (v11)
    {
      uint64_t v28 = v11;
      goto LABEL_67;
    }
    int v12 = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 200), key);
    if (v12)
    {
      CFDictionaryRef v13 = v12;
      if (a4) {
        CFDictionarySetValue(v12, @"DiscoveryMetrics", a4);
      }
      CFDictionaryRef v14 = key;
      uint64_t v15 = CMBaseObjectGetDerivedStorage();
      int v35 = 0;
      if (CFDictionaryGetValue(a3, @"name"))
      {
        if (@"RAOP" == a2 || @"RAOP" && CFEqual(a2, @"RAOP"))
        {
          uint64_t v16 = @"RAOPBonjourInfo";
LABEL_34:
          int v22 = **(_DWORD **)v15;
          if (v22 <= 40 && (v22 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          uint64_t Transports = APBrowserGetTransports(a3, 1, &v35);
          if (Transports)
          {
            uint64_t v28 = Transports;
          }
          else
          {
            CFDictionaryRef v24 = (void *)CFDictionaryGetValue(v13, v16);
            value = v24;
            if (!v24)
            {
              CFDictionarySetValue(v13, v16, a3);
              goto LABEL_43;
            }
            CFRetain(v24);
            CFDictionaryRemoveValue(v13, v16);
            uint64_t v25 = BonjourDevice_MergeInfo();
            if (!v25)
            {
              CFDictionarySetValue(v13, v16, value);
              CFRelease(value);
LABEL_43:
              if (CFDictionaryGetInt64()
                && *(_WORD *)(v15 + 24) != 1
                && (v35 & 4) != 0
                && (uint64_t v26 = browser_cacheP2PDNSAddresses(a1, (uint64_t)v14, v13), v26))
              {
                uint64_t v28 = v26;
              }
              else
              {
                uint64_t updated = browser_updateEventInfoForDevice(a1, v14);
                if (!updated) {
                  goto LABEL_48;
                }
                uint64_t v28 = updated;
              }
              goto LABEL_80;
            }
            uint64_t v28 = v25;
          }
LABEL_80:
          APSLogErrorAt();
          goto LABEL_67;
        }
        int v20 = *(__CFString **)(v15 + 64);
        if (v20 == a2 || v20 && CFEqual(a2, v20))
        {
          uint64_t v16 = *(__CFString **)(v15 + 56);
          if (v16) {
            goto LABEL_34;
          }
          goto LABEL_66;
        }
        if (@"AirPlayPartial" == a2 || @"AirPlayPartial" && CFEqual(a2, @"AirPlayPartial"))
        {
          if (*(_WORD *)(v15 + 24) == 3)
          {
            uint64_t v16 = @"AirPlayP2PBonjourInfo";
            goto LABEL_34;
          }
LABEL_48:
          uint64_t v28 = 0;
          goto LABEL_63;
        }
LABEL_66:
        APSLogErrorAt();
        uint64_t v28 = 4294960591;
LABEL_67:
        APSLogErrorAt();
        goto LABEL_63;
      }
    }
    else
    {
      int v17 = key;
      uint64_t v18 = CMBaseObjectGetDerivedStorage();
      if (CFDictionaryGetValue(a3, @"name"))
      {
        if (@"RAOP" == a2 || @"RAOP" && CFEqual(a2, @"RAOP"))
        {
          int v19 = @"RAOPBonjourInfo";
        }
        else
        {
          CFDictionaryRef v21 = *(__CFString **)(v18 + 64);
          if (v21 == a2 || v21 && CFEqual(a2, v21))
          {
            int v19 = *(__CFString **)(v18 + 56);
            if (!v19) {
              goto LABEL_66;
            }
          }
          else
          {
            if (@"AirPlayPartial" != a2 && (!@"AirPlayPartial" || !CFEqual(a2, @"AirPlayPartial"))) {
              goto LABEL_66;
            }
            if (*(_WORD *)(v18 + 24) != 3) {
              goto LABEL_48;
            }
            int v19 = @"AirPlayP2PBonjourInfo";
          }
        }
        int v29 = **(_DWORD **)v18;
        if (v29 <= 40 && (v29 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        CFAllocatorRef v30 = CFGetAllocator(a1);
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v30, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          long long v32 = Mutable;
          CFDictionarySetValue(Mutable, v19, a3);
          if (a4) {
            CFDictionarySetValue(v32, @"DiscoveryMetrics", a4);
          }
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v18 + 200), v17, v32);
          uint64_t v28 = browser_updateEventInfoForDevice(a1, v17);
          if (!v28)
          {
            CFRelease(v32);
            goto LABEL_63;
          }
          APSLogErrorAt();
          CFRelease(v32);
        }
        else
        {
          APSLogErrorAt();
          uint64_t v28 = 4294960568;
        }
        goto LABEL_67;
      }
    }
    APSLogErrorAt();
    uint64_t v28 = 4294960534;
    goto LABEL_67;
  }
  APSLogErrorAt();
  uint64_t v28 = 4294960591;
LABEL_63:
  if (key) {
    CFRelease(key);
  }
  return v28;
}

void browser_handleIPv4EventInternal(uint64_t a1, const __CFArray *a2)
{
  int v3 = **(_DWORD **)CMBaseObjectGetDerivedStorage();
  if (v3 <= 20 && (v3 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  int v4 = socket(2, 2, 0);
  if (v4 < 0 && (!*__error() || *__error()))
  {
    APSLogErrorAt();
  }
  else
  {
    CFIndex Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      for (CFIndex i = 0; i != v6; ++i)
      {
        CFArrayGetValueAtIndex(a2, i);
        uint64_t v8 = CFCopyCString();
        if (v8)
        {
          uint64_t v9 = (void *)v8;
          int v10 = SNScanF();
          free(v9);
          if (v10 == 1) {
            SocketGetInterfaceInfo();
          }
        }
      }
    }
    if ((v4 & 0x80000000) == 0 && close(v4))
    {
      if (*__error()) {
        __error();
      }
    }
  }
}

int *__browser_requeryBTLEDevices_block_invoke(uint64_t a1, const void *a2)
{
  if (a2)
  {
    uint64_t result = (int *)browser_startBTLEDeviceQuery(*(const void **)(a1 + 32), a2);
    if (!result) {
      return result;
    }
  }
  else
  {
    APSLogErrorAt();
  }
  uint64_t result = **(int ***)(a1 + 40);
  if (*result <= 60)
  {
    if (*result != -1) {
      return (int *)LogPrintF();
    }
    uint64_t result = (int *)_LogCategory_Initialize();
    if (result) {
      return (int *)LogPrintF();
    }
  }
  return result;
}

uint64_t __browser_flushAllRapportDevices_block_invoke(uint64_t a1, const void *a2)
{
  return browser_updateEventInfoForDevice(*(const void **)(a1 + 32), a2);
}

void __browser_flushAllBrokerResults_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  int v5 = ***(_DWORD ***)(a1 + 32);
  if (v5 > 40) {
    goto LABEL_9;
  }
  if (v5 == -1)
  {
    if (!_LogCategory_Initialize()) {
      goto LABEL_9;
    }
    int v5 = ***(_DWORD ***)(a1 + 32);
  }
  if (v5 == -1) {
    _LogCategory_Initialize();
  }
  APBrokeredReceiverGetDeviceID(a3);
  LogPrintF();
LABEL_9:
  APBrokeredReceiverCopyBonjourInfo(a3, 1, (__CFDictionary **)&cf);
  if (cf) {
    browser_removeService(*(const void **)(a1 + 40), @"AirPlay", (const __CFDictionary *)cf);
  }
  else {
    APSLogErrorAt();
  }
  if (cf) {
    CFRelease(cf);
  }
}

int *browser_handleBrokerGroupAddOrUpdate()
{
  uint64_t result = *(int **)CMBaseObjectGetDerivedStorage();
  if (*result <= 50)
  {
    if (*result != -1) {
      return (int *)LogPrintF();
    }
    uint64_t result = (int *)_LogCategory_Initialize();
    if (result) {
      return (int *)LogPrintF();
    }
  }
  return result;
}

int *browser_handleBrokerGroupRemove()
{
  uint64_t result = *(int **)CMBaseObjectGetDerivedStorage();
  if (*result <= 50)
  {
    if (*result != -1) {
      return (int *)LogPrintF();
    }
    uint64_t result = (int *)_LogCategory_Initialize();
    if (result) {
      return (int *)LogPrintF();
    }
  }
  return result;
}

void browser_handleBrokeredReceiverAddOrUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v10 = 0;
  int v6 = **(_DWORD **)DerivedStorage;
  if (v6 <= 50)
  {
    if (v6 == -1)
    {
      if (!_LogCategory_Initialize()) {
        goto LABEL_9;
      }
      int v6 = **(_DWORD **)DerivedStorage;
    }
    if (v6 == -1) {
      _LogCategory_Initialize();
    }
    APBrokeredReceiverGetDeviceID(a2);
    LogPrintF();
  }
LABEL_9:
  int v11 = APBrokeredReceiverCopyBonjourInfo(a2, 0, &v10);
  if (v11 || (BonjourDevice_GetDeviceID(), v11))
  {
    APSLogErrorAt();
  }
  else
  {
    uint64_t Int64 = (const void *)CFNumberCreateInt64();
    uint64_t v8 = *(NSObject **)(DerivedStorage + 8);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __browser_handleBrokeredReceiverAddOrUpdate_block_invoke;
    block[3] = &__block_descriptor_72_e5_v8__0l;
    block[4] = DerivedStorage;
    void block[5] = Int64;
    void block[6] = a2;
    void block[7] = a3;
    void block[8] = v10;
    dispatch_sync(v8, block);
    if (Int64) {
      CFRelease(Int64);
    }
  }
  if (v10) {
    CFRelease(v10);
  }
}

void browser_handleBrokeredReceiverRemoved(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v10 = 0;
  int v6 = **(_DWORD **)DerivedStorage;
  if (v6 <= 50)
  {
    if (v6 == -1)
    {
      if (!_LogCategory_Initialize()) {
        goto LABEL_9;
      }
      int v6 = **(_DWORD **)DerivedStorage;
    }
    if (v6 == -1) {
      _LogCategory_Initialize();
    }
    APBrokeredReceiverGetDeviceID(a2);
    LogPrintF();
  }
LABEL_9:
  int v11 = APBrokeredReceiverCopyBonjourInfo(a2, 1, &v10);
  if (v11 || (BonjourDevice_GetDeviceID(), v11))
  {
    APSLogErrorAt();
  }
  else
  {
    uint64_t Int64 = (const void *)CFNumberCreateInt64();
    uint64_t v8 = *(NSObject **)(DerivedStorage + 8);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __browser_handleBrokeredReceiverRemoved_block_invoke;
    block[3] = &__block_descriptor_64_e5_v8__0l;
    block[4] = DerivedStorage;
    void block[5] = Int64;
    void block[6] = a3;
    void block[7] = v10;
    dispatch_sync(v8, block);
    if (Int64) {
      CFRelease(Int64);
    }
  }
  if (v10) {
    CFRelease(v10);
  }
}

uint64_t __browser_handleBrokeredReceiverAddOrUpdate_block_invoke(uint64_t a1)
{
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 344), *(const void **)(a1 + 40), *(const void **)(a1 + 48));
  int v2 = *(const void **)(a1 + 56);
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 64);
  return browser_handleBonjourAddOrUpdate(v2, @"AirPlay", v3);
}

uint64_t browser_handleBonjourAddOrUpdate(const void *a1, __CFString *a2, const __CFDictionary *a3)
{
  CMBaseObjectGetDerivedStorage();
  if (!a3 || !a2)
  {
    APSLogErrorAt();
    return -6705;
  }
  CFArrayGetTypeID();
  TypedCFDictionaryRef Value = (const __CFArray *)CFDictionaryGetTypedValue();
  if (TypedValue && CFArrayGetCount(TypedValue))
  {
    unsigned int updated = browser_removeService(a1, a2, a3);
    if (updated) {
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int updated = browser_addOrUpdateService(a1, a2, a3, 0);
    if (updated) {
LABEL_8:
    }
      APSLogErrorAt();
  }
  return updated;
}

uint64_t __browser_handleBrokeredReceiverRemoved_block_invoke(uint64_t a1)
{
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 344), *(const void **)(a1 + 40));
  int v2 = *(const void **)(a1 + 48);
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 56);
  return browser_handleBonjourRemove(v2, @"AirPlay", v3);
}

uint64_t browser_handleBonjourRemove(const void *a1, __CFString *a2, const __CFDictionary *a3)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v6 = browser_removeService(a1, a2, a3);
  if (v6) {
    APSLogErrorAt();
  }
  return v6;
}

uint64_t browser_cleanupNI()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 256))
  {
    int v1 = **(_DWORD **)DerivedStorage;
    if (v1 <= 50 && (v1 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
  }

  *(void *)(DerivedStorage + 264) = 0;
  [*(id *)(DerivedStorage + 256) invalidate];

  *(void *)(DerivedStorage + 256) = 0;
  return MEMORY[0x1F4107D30](DerivedStorage + 272);
}

Class initNISession()
{
  if (NearbyInteractionLibrary_sOnce_0 != -1) {
    dispatch_once(&NearbyInteractionLibrary_sOnce_0, &__block_literal_global_18);
  }
  Class result = objc_getClass("NISession");
  classNISession = (uint64_t)result;
  getNISessionClass = NISessionFunction;
  return result;
}

uint64_t NISessionFunction()
{
  return classNISession;
}

void *__NearbyInteractionLibrary_block_invoke_0()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/NearbyInteraction.framework/NearbyInteraction", 2);
  NearbyInteractionLibrary_sLib_0 = (uint64_t)result;
  return result;
}

Class initNISpatialBrowsingConfiguration()
{
  if (NearbyInteractionLibrary_sOnce_0 != -1) {
    dispatch_once(&NearbyInteractionLibrary_sOnce_0, &__block_literal_global_18);
  }
  Class result = objc_getClass("NISpatialBrowsingConfiguration");
  classNISpatialBrowsingConfiguration = (uint64_t)result;
  getNISpatialBrowsingConfigurationClass = NISpatialBrowsingConfigurationFunction;
  return result;
}

uint64_t NISpatialBrowsingConfigurationFunction()
{
  return classNISpatialBrowsingConfiguration;
}

uint64_t browser_stopNI()
{
  int v0 = **(_DWORD **)CMBaseObjectGetDerivedStorage();
  if (v0 <= 50 && (v0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  return browser_cleanupNI();
}

uint64_t browser_setEventHandler(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 229)) {
    return 4294960573;
  }
  uint64_t v3 = DerivedStorage;
  if (*(_WORD *)(DerivedStorage + 24))
  {
    APSLogErrorAt();
    return 4294960587;
  }
  else
  {
    uint64_t result = 0;
    *(_OWORD *)(v3 + 232) = *(_OWORD *)(a1 + 8);
  }
  return result;
}

uint64_t browser_getDNSForDeviceID(uint64_t a1)
{
  return browser_getDNSForDeviceIDInternal(*(const void **)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(unsigned __int8 *)(a1 + 17), *(unsigned __int8 *)(a1 + 18), 0, *(char **)(a1 + 24), *(void *)(a1 + 32), *(unsigned char **)(a1 + 40));
}

uint64_t browser_startTrackingDevice(uint64_t a1)
{
  unsigned int v16 = 0;
  uint64_t v3 = *(const void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t valuePtr = v2;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 229)) {
    return 4294960573;
  }
  if (v2)
  {
    uint64_t v5 = DerivedStorage;
    if (*(unsigned __int16 *)(DerivedStorage + 24) - 4 <= 0xFFFFFFFD)
    {
      APSLogErrorAt();
      return 4294960587;
    }
    else
    {
      CFAllocatorRef v6 = CFGetAllocator(v3);
      CFNumberRef v7 = CFNumberCreate(v6, kCFNumberSInt64Type, &valuePtr);
      if (v7)
      {
        CFNumberRef v8 = v7;
        CFDictionaryRef Value = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 200), v7);
        if (Value)
        {
          int v10 = Value;
          CFDictionaryGetInt64();
          CFDictionaryGetInt64();
          unsigned int v16 = browser_cacheP2PDNSAddresses(v3, (uint64_t)v8, v10);
          if (v16)
          {
            APSLogErrorAt();
          }
          else
          {
            uint64_t v11 = CMBaseObjectGetDerivedStorage();
            ++*(_DWORD *)(v11 + 224);
            unsigned int v16 = 0;
            CFDictionarySetInt64();
            CFDictionarySetValue(v10, @"IsTracked", (const void *)*MEMORY[0x1E4F1CFD0]);
            if (*(unsigned char *)(a1 + 24)) {
              int v12 = 1;
            }
            else {
              int v12 = 2;
            }
            *(_DWORD *)(v5 + 428) |= v12;
            int v13 = **(_DWORD **)v5;
            if (v13 <= 40 && (v13 != -1 || _LogCategory_Initialize())) {
              LogPrintF();
            }
          }
        }
        else
        {
          APSLogErrorAt();
          unsigned int v16 = -6727;
        }
        CFRelease(v8);
        return v16;
      }
      else
      {
        APSLogErrorAt();
        return 4294960568;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

uint64_t browser_stopTrackingDevice(uint64_t a1)
{
  unsigned int updated = 0;
  uint64_t v2 = *(const void **)a1;
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t valuePtr = v1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 229)) {
    return 4294960573;
  }
  if (v1)
  {
    int v4 = (int **)DerivedStorage;
    if (*(_WORD *)(DerivedStorage + 24))
    {
      CFAllocatorRef v5 = CFGetAllocator(v2);
      CFNumberRef v6 = CFNumberCreate(v5, kCFNumberSInt64Type, &valuePtr);
      if (v6)
      {
        CFNumberRef v7 = v6;
        CFDictionaryRef Value = (__CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v4[25], v6);
        if (Value)
        {
          uint64_t v9 = Value;
          CFRetain(Value);
          if (!CFDictionaryGetInt64()) {
            goto LABEL_20;
          }
          uint64_t v10 = CFDictionaryGetInt64() - 1;
          CFDictionarySetInt64();
          int v11 = **v4;
          if (v11 <= 40 && (v11 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          if (v10)
          {
LABEL_20:
            unsigned int updated = 0;
          }
          else
          {
            CFDictionaryRemoveValue(v9, @"CachedRAOPP2PDNS");
            CFDictionaryRemoveValue(v9, @"CachedAirPlayP2PDNS");
            CFDictionaryRemoveValue(v9, @"IsTracked");
            uint64_t v12 = CMBaseObjectGetDerivedStorage();
            --*(_DWORD *)(v12 + 224);
            unsigned int updated = 0;
            unsigned int updated = browser_updateDevice(v2, v7, v9);
            if (updated)
            {
              APSLogErrorAt();
            }
            else
            {
              int v13 = **v4;
              if (v13 <= 40 && (v13 != -1 || _LogCategory_Initialize())) {
                LogPrintF();
              }
            }
          }
          CFRelease(v9);
        }
        else
        {
          int v15 = **v4;
          if (v15 <= 40 && (v15 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          unsigned int updated = 0;
        }
        CFRelease(v7);
        return updated;
      }
      else
      {
        APSLogErrorAt();
        return 4294960568;
      }
    }
    else
    {
      APSLogErrorAt();
      return 4294960587;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

uint64_t browser_reconfirmDevice(uint64_t a1)
{
  uint64_t v1 = *(const void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t valuePtr = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 229)) {
    return 4294960573;
  }
  if (!v2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  CFAllocatorRef v5 = (int **)DerivedStorage;
  if (!*(_WORD *)(DerivedStorage + 24))
  {
    APSLogErrorAt();
    return 4294960587;
  }
  CFAllocatorRef v6 = CFGetAllocator(v1);
  CFNumberRef v7 = CFNumberCreate(v6, kCFNumberSInt64Type, &valuePtr);
  if (!v7)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  CFNumberRef v8 = v7;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v5[25], v7);
  if (!Value)
  {
    APSLogErrorAt();
    uint64_t v17 = 4294960569;
    goto LABEL_19;
  }
  CFDictionaryRef v10 = Value;
  int v11 = CFDictionaryGetValue(Value, v5[7]);
  if (v11)
  {
    uint64_t v12 = APBonjourBrowserReconfirmDevice((uint64_t)v5[10], (uint64_t)v11, (uint64_t)v5[8], v3);
    if (v12)
    {
      uint64_t v17 = v12;
      goto LABEL_28;
    }
    int v13 = **v5;
    if (v13 <= 40 && (v13 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
  }
  CFDictionaryRef v14 = CFDictionaryGetValue(v10, @"RAOPBonjourInfo");
  if (v14)
  {
    uint64_t v15 = APBonjourBrowserReconfirmDevice((uint64_t)v5[10], (uint64_t)v14, @"RAOP", v3);
    if (!v15)
    {
      int v16 = **v5;
      if (v16 <= 40 && (v16 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      goto LABEL_18;
    }
    uint64_t v17 = v15;
LABEL_28:
    APSLogErrorAt();
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v17 = 0;
LABEL_19:
  CFRelease(v8);
  return v17;
}

uint64_t browser_configureForMaximumDiscovery()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v3 = 0;
  if (*(_WORD *)(DerivedStorage + 24) == 3)
  {
    uint64_t v1 = DerivedStorage;
    if (APDBluetoothHelperStartListeningToEvent(*(void *)(DerivedStorage + 88), 1)
      || APDBluetoothHelperSetBluetoothPower(*(void *)(v1 + 88), 1)
      || APConnectivityHelperQueryWiFiPower(*(void *)(v1 + 184), (uint64_t)&v3)
      || !v3 && APConnectivityHelperSetWiFiPower(*(void *)(v1 + 184), 1u))
    {
      APSLogErrorAt();
    }
  }
  return 0;
}

void browser_triggerWoLCachingIfNeeded(uint64_t a1)
{
  uint64_t v1 = *(const void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t valuePtr = v2;
  char v3 = *(const void **)(a1 + 16);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 229))
  {
    if (v2
      && (uint64_t v5 = DerivedStorage, *(_WORD *)(DerivedStorage + 24))
      && (v6 = CFGetAllocator(v1), (CFNumberRef v7 = CFNumberCreate(v6, kCFNumberSInt64Type, &valuePtr)) != 0))
    {
      CFNumberRef v8 = v7;
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 200), v7);
      if (Value)
      {
        CFDictionaryRef v10 = CFDictionaryGetValue(Value, *(const void **)(v5 + 56));
        if (v10)
        {
          APBonjourBrowserTriggerWoLCachingIfNeeded(*(const void **)(v5 + 80), v10, v3);
          int v11 = **(_DWORD **)v5;
          if (v11 <= 40 && (v11 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
        }
      }
      else
      {
        APSLogErrorAt();
      }
      CFRelease(v8);
    }
    else
    {
      APSLogErrorAt();
    }
  }
  CFRelease(v1);
  if (v3) {
    CFRelease(v3);
  }
}

uint64_t browser_copyNANEndpointForDeviceID(uint64_t a1)
{
  uint64_t v1 = *(const void **)a1;
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  char v3 = *(CFTypeRef **)(a1 + 24);
  uint64_t valuePtr = *(void *)(a1 + 8);
  unsigned int v17 = 0;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 229)) {
    return 4294960573;
  }
  CFAllocatorRef v4 = CFGetAllocator(v1);
  CFNumberRef v5 = CFNumberCreate(v4, kCFNumberSInt64Type, &valuePtr);
  if (!v5)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  CFNumberRef v6 = v5;
  CFDictionaryGetTypeID();
  CFDictionaryGetTypedValue();
  char v7 = 1;
  while (1)
  {
    char v8 = v7;
    CFDictionaryGetTypeID();
    CFDictionaryGetTypedValue();
    CFArrayGetTypeID();
    TypedCFDictionaryRef Value = (const __CFArray *)CFDictionaryGetTypedValue();
    CFIndex Count = CFArrayGetCount(TypedValue);
    if (Count >= 1) {
      break;
    }
LABEL_5:
    char v7 = 0;
    if ((v8 & 1) == 0)
    {
      APSLogErrorAt();
      unsigned int v17 = -72065;
      goto LABEL_16;
    }
  }
  CFIndex v11 = Count;
  uint64_t v12 = 0;
  while (1)
  {
    CFDictionaryGetTypeID();
    TypedCFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetTypedValueAtIndex();
    CFDictionaryRef Value = (void *)CFDictionaryGetValue(TypedValueAtIndex, @"nanEP");
    uint64_t v15 = Value;
    if (!(v8 & 1 | (Value == 0))) {
      break;
    }
    if (Value) {
      goto LABEL_15;
    }
LABEL_13:
    if (v11 == ++v12) {
      goto LABEL_5;
    }
  }
  if (!APTNANEndpointSupportsServiceType(Value, v2)) {
    goto LABEL_13;
  }
LABEL_15:
  *char v3 = CFRetain(v15);
LABEL_16:
  CFRelease(v6);
  return v17;
}

void __browser_resolveBrokerAddress_block_invoke(uint64_t a1, int a2, const __CFArray *a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a1 + 40))
  {
    CFDictionaryRef v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v10)
    {
      int v11 = **(_DWORD **)(a1 + 48);
      if (v11 <= 40 && (v11 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      CFStringRef v13 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    CFDictionaryRef v10 = 0;
  }
  int v12 = **(_DWORD **)(a1 + 48);
  if (a2)
  {
    if (v12 <= 90 && (v12 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    CFStringRef v13 = 0;
    a5 = 0;
  }
  else
  {
    if (v12 <= 50 && (v12 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    CFStringRef v13 = CFStringCreateByCombiningStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3, @"\x1E");
    if (!v13)
    {
      APSLogErrorAt();
      a5 = 0;
    }
  }
  (*(void (**)(void, CFStringRef, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v13, a4, a5);
  if (v10) {
    CFRelease(v10);
  }
LABEL_16:
  CFDictionaryRef v14 = *(const void **)(a1 + 40);
  if (v14) {
    CFRelease(v14);
  }
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v15 = *(const void **)(a1 + 32);
  _Block_release(v15);
}

void browser_callEventHandler(uint64_t a1)
{
  uint64_t v1 = *(const void **)a1;
  uint64_t v2 = *(const void **)(a1 + 16);
  (*(void (**)(void, void, const void *, void))(a1 + 24))(*(void *)a1, *(unsigned int *)(a1 + 8), v2, *(void *)(a1 + 32));
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
}

void browser_handleBonjourEvent(uint64_t a1)
{
  uint64_t v1 = *(const void **)a1;
  int v2 = *(_DWORD *)(a1 + 8);
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 16);
  uint64_t DerivedStorage = (int **)CMBaseObjectGetDerivedStorage();
  switch(v2)
  {
    case 0:
      if (!v3) {
        goto LABEL_41;
      }
      CFDictionaryRef Value = (__CFString *)CFDictionaryGetValue(v3, @"serviceType");
      if (Value)
      {
        CFNumberRef v6 = Value;
        CFDictionaryRef v7 = (const __CFDictionary *)CFDictionaryGetValue(v3, @"deviceInfo");
        if (v7)
        {
          if (!browser_handleBonjourAddOrUpdate(v1, v6, v7)) {
            goto LABEL_14;
          }
        }
      }
      goto LABEL_42;
    case 1:
      if (v3)
      {
        uint64_t v9 = (__CFString *)CFDictionaryGetValue(v3, @"serviceType");
        if (!v9
          || (CFDictionaryRef v10 = v9, (v11 = (const __CFDictionary *)CFDictionaryGetValue(v3, @"deviceInfo")) == 0)
          || browser_handleBonjourRemove(v1, v10, v11))
        {
LABEL_42:
          APSLogErrorAt();
        }
LABEL_14:
        CFRelease(v1);
LABEL_31:
        CFDictionaryRef v15 = v3;
      }
      else
      {
LABEL_41:
        APSLogErrorAt();
        CFDictionaryRef v15 = (const __CFDictionary *)v1;
      }
      CFRelease(v15);
      return;
    case 2:
      int v12 = **DerivedStorage;
      if (v12 <= 40 && (v12 != -1 || _LogCategory_Initialize())) {
        goto LABEL_23;
      }
      goto LABEL_30;
    case 3:
      int v13 = **DerivedStorage;
      if (v13 <= 40 && (v13 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      CFRelease(v1);
      goto LABEL_30;
    case 4:
      int v14 = **DerivedStorage;
      if (v14 <= 60 && (v14 != -1 || _LogCategory_Initialize())) {
        goto LABEL_23;
      }
      goto LABEL_30;
    default:
      int v8 = **DerivedStorage;
      if (v8 <= 60 && (v8 != -1 || _LogCategory_Initialize())) {
LABEL_23:
      }
        LogPrintF();
LABEL_30:
      CFRelease(v1);
      if (v3) {
        goto LABEL_31;
      }
      return;
  }
}

void __browser_handleBTLEEventExternal_block_invoke(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 48);
  CFDictionaryRef v3 = *(void **)(a1 + 32);
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 40);
  uint64_t DerivedStorage = (int **)CMBaseObjectGetDerivedStorage();
  switch(v2)
  {
    case 0:
    case 1:
      CFDictionaryRef Value = CFDictionaryGetValue(v4, @"deviceID");
      CFDictionaryRef v7 = CFDictionaryGetValue(v4, @"ipAddress");
      int v8 = CFDictionaryGetValue(v4, @"port");
      uint64_t v9 = CFDictionaryGetValue(v4, @"supportsSolo");
      CFDictionaryRef v10 = CFDictionaryGetValue(v4, @"rssi");
      if (!Value) {
        goto LABEL_59;
      }
      if (!v7) {
        goto LABEL_59;
      }
      if (!v8) {
        goto LABEL_59;
      }
      if (!v9) {
        goto LABEL_59;
      }
      CFDictionaryRef v11 = v10;
      if (!v10) {
        goto LABEL_59;
      }
      uint64_t v12 = CMBaseObjectGetDerivedStorage();
      int v13 = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v12 + 112), Value);
      int v14 = v13;
      if (v13)
      {
        CFRetain(v13);
        CFMutableArrayRef Mutable = v14;
      }
      else
      {
        CFAllocatorRef v22 = CFGetAllocator(v3);
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v22, 5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!Mutable) {
          goto LABEL_55;
        }
      }
      int v23 = **(_DWORD **)v12;
      if (v23 <= 40 && (v23 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      CFDictionarySetValue(Mutable, @"deviceID ", Value);
      CFDictionarySetValue(Mutable, @"IPAddress", v7);
      CFDictionarySetValue(Mutable, @"port", v8);
      CFDictionarySetValue(Mutable, @"supportsSolo", v9);
      CFDictionarySetValue(Mutable, @"btleRSSI", v11);
      if (!v14
        && (CFAbsoluteTimeGetCurrent(),
            uint64_t v24 = CMBaseObjectGetDerivedStorage(),
            CFDictionarySetDouble(),
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(v24 + 112), Value, Mutable),
            browser_updateAVDevicePresent(v3)))
      {
        APSLogErrorAt();
      }
      else if (!browser_startBTLEDeviceQuery(v3, Value))
      {
        uint64_t v25 = Mutable;
        goto LABEL_37;
      }
      APSLogErrorAt();
      CFRelease(Mutable);
      goto LABEL_59;
    case 2:
      unsigned int v17 = CFDictionaryGetValue(v4, @"deviceID");
      if (!v17) {
        goto LABEL_59;
      }
      uint64_t v18 = v17;
      int v19 = **(_DWORD **)CMBaseObjectGetDerivedStorage();
      if (v19 <= 20 && (v19 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      if (browser_removeBonjourWithBTLE(v3, v18)) {
        goto LABEL_55;
      }
      uint64_t v26 = CMBaseObjectGetDerivedStorage();
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v26 + 112), v18);
      if (browser_updateAVDevicePresent(v3))
      {
        APSLogErrorAt();
LABEL_55:
        APSLogErrorAt();
LABEL_59:
        APSLogErrorAt();
      }
LABEL_41:
      CFRelease(*(CFTypeRef *)(a1 + 32));
      long long v27 = *(const void **)(a1 + 40);
      if (v27)
      {
        CFRelease(v27);
      }
      return;
    case 3:
      int v20 = **DerivedStorage;
      if (v20 <= 40 && (v20 != -1 || _LogCategory_Initialize())) {
        goto LABEL_18;
      }
      goto LABEL_41;
    case 4:
      int v21 = **DerivedStorage;
      if (v21 <= 40 && (v21 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      uint64_t v25 = (__CFDictionary *)v3;
LABEL_37:
      CFRelease(v25);
      goto LABEL_41;
    default:
      int v16 = **DerivedStorage;
      if (v16 <= 60 && (v16 != -1 || _LogCategory_Initialize())) {
LABEL_18:
      }
        LogPrintF();
      goto LABEL_41;
  }
}

void __browser_handleBluetoothHelperEventExternal_block_invoke(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 48);
  uint64_t DerivedStorage = (int **)CMBaseObjectGetDerivedStorage();
  if (v3 == 101)
  {
    int v7 = **DerivedStorage;
    if (v7 > 40 || v7 == -1 && !_LogCategory_Initialize()) {
      goto LABEL_24;
    }
    goto LABEL_15;
  }
  if (v3 != 100)
  {
    if (v3 == 1)
    {
      uint64_t v5 = CMBaseObjectGetDerivedStorage();
      int v6 = **(_DWORD **)v5;
      if (v6 <= 40 && (v6 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      if (*(_WORD *)(v5 + 24) == 3 && browser_updateConfigurationForMaximumDiscoveryStatus(v2))
      {
        APSLogErrorAt();
        APSLogErrorAt();
      }
      goto LABEL_24;
    }
    int v9 = **DerivedStorage;
    if (v9 > 60 || v9 == -1 && !_LogCategory_Initialize()) {
      goto LABEL_24;
    }
LABEL_15:
    LogPrintF();
    goto LABEL_24;
  }
  int v8 = **DerivedStorage;
  if (v8 <= 40 && (v8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  CFRelease(v2);
LABEL_24:
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFDictionaryRef v10 = *(const void **)(a1 + 40);
  if (v10)
  {
    CFRelease(v10);
  }
}

void __browser_handleRapportEventExternal_block_invoke(uint64_t a1)
{
  v35[2] = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 48);
  int v3 = *(const void **)(a1 + 32);
  CFDictionaryRef v4 = *(const void **)(a1 + 40);
  uint64_t DerivedStorage = (int **)CMBaseObjectGetDerivedStorage();
  switch(v2)
  {
    case 0:
    case 1:
      CFStringGetTypeID();
      TypedCFDictionaryRef Value = (const void *)CFDictionaryGetTypedValue();
      uint64_t v7 = CMBaseObjectGetDerivedStorage();
      key = 0;
      if (TypedValue
        && v4
        && (CFStringGetTypeID(),
            uint64_t v8 = CFDictionaryGetTypedValue(),
            CFStringGetTypeID(),
            uint64_t v9 = CFDictionaryGetTypedValue(),
            v8 | v9))
      {
        if (v8)
        {
          CFNumberGetTypeID();
          CFDictionaryRef v10 = (const void *)CFDictionaryGetTypedValue();
          if (!v10 || (CFDictionaryRef v11 = (void *)CFRetain(v10), (key = v11) == 0))
          {
            v34[0] = @"rapportBonjourCorrelationType";
            v34[1] = @"rapportBonjourCorrelationID";
            v35[0] = &unk_1F26CC340;
            v35[1] = v8;
            uint64_t v12 = (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v35 forKeys:v34 count:2];
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(v7 + 168), (const void *)v8, v4);
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(v7 + 152), TypedValue, v12);
            goto LABEL_49;
          }
LABEL_24:
          v32[0] = @"rapportBonjourCorrelationType";
          v32[1] = @"rapportBonjourCorrelationID";
          v33[0] = &unk_1F26CC328;
          v33[1] = v11;
          int v20 = (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v33 forKeys:v32 count:2];
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v7 + 160), key, v4);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v7 + 152), TypedValue, v20);
          browser_updateEventInfoForDevice(v3, key);
          int v21 = 0;
          goto LABEL_25;
        }
        if (!v9) {
          goto LABEL_49;
        }
        int DeviceIDFromString = APBrowserCreateDeviceIDFromString((const void *)v9, (CFNumberRef *)&key);
        if (!DeviceIDFromString)
        {
          CFDictionaryRef v11 = key;
          if (!key) {
            goto LABEL_49;
          }
          goto LABEL_24;
        }
        int v21 = DeviceIDFromString;
        APSLogErrorAt();
      }
      else
      {
        APSLogErrorAt();
        int v21 = -6705;
      }
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v7 + 152), TypedValue);
      if (key)
      {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v7 + 160), key);
      }
      else
      {
        int v30 = **(_DWORD **)v7;
        if (v30 <= 90 && (v30 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
      }
LABEL_25:
      if (key) {
        CFRelease(key);
      }
      if (v21) {
        goto LABEL_59;
      }
LABEL_49:
      CFRelease(*(CFTypeRef *)(a1 + 32));
      int v29 = *(const void **)(a1 + 40);
      if (v29) {
        CFRelease(v29);
      }
      return;
    case 2:
      CFStringGetTypeID();
      int v14 = (const void *)CFDictionaryGetTypedValue();
      LODWORD(v35[0]) = 0;
      uint64_t v15 = CMBaseObjectGetDerivedStorage();
      int v16 = **(_DWORD **)v15;
      if (v16 <= 20 && (v16 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      if (!v14
        || (CFDictionaryGetTypeID(),
            CFDictionaryRef v22 = (const __CFDictionary *)CFDictionaryGetTypedValue(),
            int Int64 = CFDictionaryGetInt64(),
            (CFDictionaryRef Value = CFDictionaryGetValue(v22, @"rapportBonjourCorrelationID")) == 0))
      {
        APSLogErrorAt();
LABEL_59:
        APSLogErrorAt();
        goto LABEL_49;
      }
      uint64_t v25 = Value;
      if (Int64 == 1)
      {
        CFTypeRef v27 = CFRetain(Value);
        uint64_t v28 = (CFMutableDictionaryRef *)(v15 + 160);
      }
      else
      {
        if (Int64)
        {
          LODWORD(v35[0]) = -6736;
          APSLogErrorAt();
          goto LABEL_48;
        }
        CFNumberGetTypeID();
        uint64_t v26 = (const void *)CFDictionaryGetTypedValue();
        if (v26) {
          CFTypeRef v27 = CFRetain(v26);
        }
        else {
          CFTypeRef v27 = 0;
        }
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v15 + 176), v25);
        uint64_t v28 = (CFMutableDictionaryRef *)(v15 + 168);
      }
      CFDictionaryRemoveValue(*v28, v25);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v15 + 152), v14);
      if (v27)
      {
        browser_updateEventInfoForDevice(v3, v27);
        CFRelease(v27);
      }
LABEL_48:
      if (!LODWORD(v35[0])) {
        goto LABEL_49;
      }
      goto LABEL_59;
    case 3:
      int v17 = **DerivedStorage;
      if (v17 <= 40 && (v17 != -1 || _LogCategory_Initialize())) {
        goto LABEL_17;
      }
      goto LABEL_49;
    case 4:
      int v18 = **DerivedStorage;
      if (v18 <= 40 && (v18 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      CFRelease(v3);
      goto LABEL_49;
    default:
      int v13 = **DerivedStorage;
      if (v13 <= 60 && (v13 != -1 || _LogCategory_Initialize())) {
LABEL_17:
      }
        LogPrintF();
      goto LABEL_49;
  }
}

void __browser_handleConnectivityHelperEventExternal_block_invoke(uint64_t a1)
{
  browser_handleConnectivityHelperEventInternal(*(const void **)(a1 + 32), *(_DWORD *)(a1 + 48), *(void *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  int v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

int *initValNINearbyObjectDistanceNotAvailable()
{
  if (NearbyInteractionLibrary_sOnce_0 != -1) {
    dispatch_once(&NearbyInteractionLibrary_sOnce_0, &__block_literal_global_18);
  }
  uint64_t result = (int *)dlsym((void *)NearbyInteractionLibrary_sLib_0, "NINearbyObjectDistanceNotAvailable");
  if (result) {
    constantValNINearbyObjectDistanceNotAvailable = *result;
  }
  getNINearbyObjectDistanceNotAvailable = (uint64_t (*)())NINearbyObjectDistanceNotAvailableFunction;
  return result;
}

float NINearbyObjectDistanceNotAvailableFunction()
{
  return *(float *)&constantValNINearbyObjectDistanceNotAvailable;
}

void APBrowserCarBonjourCreate_cold_1()
{
}

void APBrowserCarBonjourCreate_cold_2()
{
}

void APBrowserCarBonjourCreate_cold_3()
{
}

uint64_t stream_Finalize_cold_1(int a1)
{
  if (a1 != -1) {
    return LogPrintF();
  }
  uint64_t result = _LogCategory_Initialize();
  if (result) {
    return LogPrintF();
  }
  return result;
}

uint64_t _APConnectivityHelperFinalize_cold_1(int a1)
{
  if (a1 != -1) {
    return LogPrintF();
  }
  uint64_t result = _LogCategory_Initialize();
  if (result) {
    return LogPrintF();
  }
  return result;
}

void APBrowserCarSessionCreate_cold_1()
{
}

void APBrowserCarSessionCreate_cold_2()
{
}

uint64_t stream_Finalize_cold_1_0(int a1)
{
  if (a1 != -1) {
    return LogPrintF();
  }
  uint64_t result = _LogCategory_Initialize();
  if (result) {
    return LogPrintF();
  }
  return result;
}

void stream_relinquishPackage_cold_1()
{
}

uint64_t APSAPAPBBufDecodeHeader()
{
  return MEMORY[0x1F4107290]();
}

uint64_t APSAsyncLoggerGetSharedLogger()
{
  return MEMORY[0x1F41072E8]();
}

uint64_t APSAsyncLoggerLogMessage()
{
  return MEMORY[0x1F41072F0]();
}

uint64_t APSAtomicMessageQueueCreate()
{
  return MEMORY[0x1F41072F8]();
}

uint64_t APSAtomicMessageQueueReadMessage()
{
  return MEMORY[0x1F4107300]();
}

uint64_t APSAtomicMessageQueueSendMessage()
{
  return MEMORY[0x1F4107308]();
}

uint64_t APSCFDataCreateWithBase64String()
{
  return MEMORY[0x1F4107580]();
}

uint64_t APSCMBlockBufferCreateWithDispatchData()
{
  return MEMORY[0x1F41075B8]();
}

uint64_t APSCanSendToAltReceiver()
{
  return MEMORY[0x1F41075D0]();
}

uint64_t APSCopyTightSyncInfo()
{
  return MEMORY[0x1F4107618]();
}

uint64_t APSDispatchAsyncFHelper()
{
  return MEMORY[0x1F4107670]();
}

uint64_t APSDispatchDataCopyBytes()
{
  return MEMORY[0x1F4107678]();
}

uint64_t APSDispatchDataCreateWithBlockBuffer()
{
  return MEMORY[0x1F4107680]();
}

uint64_t APSDispatchSyncBatchAssignment()
{
  return MEMORY[0x1F41076A8]();
}

uint64_t APSDispatchSyncFlush()
{
  return MEMORY[0x1F41076B0]();
}

uint64_t APSDispatchSyncTask()
{
  return MEMORY[0x1F41076B8]();
}

uint64_t APSEventRecorderAddSignPostForEvent()
{
  return MEMORY[0x1F4107720]();
}

uint64_t APSEventRecorderCopyChildEventRecorderOfType()
{
  return MEMORY[0x1F4107728]();
}

uint64_t APSEventRecorderCreate()
{
  return MEMORY[0x1F4107730]();
}

uint64_t APSEventRecorderGetEventTimeRecursive()
{
  return MEMORY[0x1F4107748]();
}

uint64_t APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursiveEx()
{
  return MEMORY[0x1F4107768]();
}

uint64_t APSEventRecorderGetTypeID()
{
  return MEMORY[0x1F4107780]();
}

uint64_t APSEventRecorderRecordEvent()
{
  return MEMORY[0x1F4107788]();
}

uint64_t APSEventRecorderRecordEventWithFlags()
{
  return MEMORY[0x1F4107790]();
}

uint64_t APSEventRecorderRecordEventWithFlagsAtTime()
{
  return MEMORY[0x1F4107798]();
}

uint64_t APSEventRecorderResetEvent()
{
  return MEMORY[0x1F41077B0]();
}

uint64_t APSFeaturesCopyStringRepresentation()
{
  return MEMORY[0x1F41077C8]();
}

uint64_t APSFeaturesCreateFromLegacyFlags()
{
  return MEMORY[0x1F41077D8]();
}

uint64_t APSFeaturesCreateFromStringRepresentation()
{
  return MEMORY[0x1F41077E0]();
}

uint64_t APSFeaturesCreateMutable()
{
  return MEMORY[0x1F41077E8]();
}

uint64_t APSFeaturesCreateMutableCopy()
{
  return MEMORY[0x1F41077F0]();
}

uint64_t APSFeaturesGetLegacyFlags()
{
  return MEMORY[0x1F41077F8]();
}

uint64_t APSFeaturesHasFeature()
{
  return MEMORY[0x1F4107808]();
}

uint64_t APSFeaturesSetFeature()
{
  return MEMORY[0x1F4107818]();
}

uint64_t APSFeaturesSetLegacyFlags()
{
  return MEMORY[0x1F4107820]();
}

uint64_t APSFlatQueueCreate()
{
  return MEMORY[0x1F4107828]();
}

uint64_t APSFlatQueueDequeue()
{
  return MEMORY[0x1F4107830]();
}

uint64_t APSFlatQueueDequeueWhileB()
{
  return MEMORY[0x1F4107838]();
}

uint64_t APSFlatQueueEnqueue()
{
  return MEMORY[0x1F4107840]();
}

uint64_t APSFlatQueueIsEmpty()
{
  return MEMORY[0x1F4107848]();
}

uint64_t APSFlatQueuePeek()
{
  return MEMORY[0x1F4107850]();
}

uint64_t APSGetDeviceID()
{
  return MEMORY[0x1F4107898]();
}

uint64_t APSGetFBOPropertyInt64()
{
  return MEMORY[0x1F41078B8]();
}

uint64_t APSHierarchyReporterProtocolGetProtocolID()
{
  return MEMORY[0x1F4107930]();
}

uint64_t APSIntrospectorAddCommand()
{
  return MEMORY[0x1F4107948]();
}

uint64_t APSIntrospectorSetCommandContext()
{
  return MEMORY[0x1F4107950]();
}

uint64_t APSIsAPMSpeaker()
{
  return MEMORY[0x1F4107958]();
}

uint64_t APSIsDemoModeEnabled()
{
  return MEMORY[0x1F4107978]();
}

uint64_t APSIsDirectLinkInterface()
{
  return MEMORY[0x1F4107980]();
}

uint64_t APSIsEthernetInterface()
{
  return MEMORY[0x1F4107990]();
}

uint64_t APSIsPairingGroupEnabled()
{
  return MEMORY[0x1F41079D8]();
}

uint64_t APSIsPersistentGroupSDBCapable()
{
  return MEMORY[0x1F41079E8]();
}

uint64_t APSIsProximitySenderEnabled()
{
  return MEMORY[0x1F41079F0]();
}

uint64_t APSIsValidDeviceEnclosureColorString()
{
  return MEMORY[0x1F4107A08]();
}

uint64_t APSIsVirtualMachine()
{
  return MEMORY[0x1F4107A10]();
}

uint64_t APSKeyHolderGetTypeID()
{
  return MEMORY[0x1F4107A28]();
}

uint64_t APSLogErrorAt()
{
  return MEMORY[0x1F4107A40]();
}

uint64_t APSLogUtilsGetAsyncCnxLogCategory()
{
  return MEMORY[0x1F4107A48]();
}

uint64_t APSLogUtilsGetHTTPClientCoreLogCategory()
{
  return MEMORY[0x1F4107A50]();
}

uint64_t APSNANServiceTypeGetTXTString()
{
  return MEMORY[0x1F4107A60]();
}

uint64_t APSNANServiceTypeIsValid()
{
  return MEMORY[0x1F4107A70]();
}

uint64_t APSNANServiceTypeMakeWithTXTString()
{
  return MEMORY[0x1F4107A78]();
}

uint64_t APSNetworkAddressCopyInterfaceName()
{
  return MEMORY[0x1F4107A80]();
}

uint64_t APSNetworkAddressCopyStringRepresentation()
{
  return MEMORY[0x1F4107A88]();
}

uint64_t APSNetworkAddressCreateWithSocketAddr()
{
  return MEMORY[0x1F4107A98]();
}

uint64_t APSNetworkAddressCreateWithString()
{
  return MEMORY[0x1F4107AA0]();
}

uint64_t APSNetworkAddressGetCStringRepresentation()
{
  return MEMORY[0x1F4107AA8]();
}

uint64_t APSNetworkAddressGetPort()
{
  return MEMORY[0x1F4107AB0]();
}

uint64_t APSNetworkAddressGetSocketAddr()
{
  return MEMORY[0x1F4107AB8]();
}

uint64_t APSNetworkAddressGetTypeID()
{
  return MEMORY[0x1F4107AC0]();
}

uint64_t APSNetworkAddressIsIPv6()
{
  return MEMORY[0x1F4107AC8]();
}

uint64_t APSNetworkAddressSetInterfaceName()
{
  return MEMORY[0x1F4107AD0]();
}

uint64_t APSNetworkAddressSetPort()
{
  return MEMORY[0x1F4107AD8]();
}

uint64_t APSPowerAssertionCreate()
{
  return MEMORY[0x1F4107B70]();
}

uint64_t APSPowerAssertionRaise()
{
  return MEMORY[0x1F4107B78]();
}

uint64_t APSPowerAssertionRaiseTemporary()
{
  return MEMORY[0x1F4107B80]();
}

uint64_t APSPowerAssertionRelease()
{
  return MEMORY[0x1F4107B88]();
}

uint64_t APSPriorityDispatchQueuePoolCreate()
{
  return MEMORY[0x1F4107B90]();
}

uint64_t APSPriorityDispatchQueuePoolSyncFlush()
{
  return MEMORY[0x1F4107B98]();
}

uint64_t APSPriorityDispatchSourceCancel()
{
  return MEMORY[0x1F4107BA0]();
}

uint64_t APSPriorityDispatchSourceCreate()
{
  return MEMORY[0x1F4107BA8]();
}

uint64_t APSPriorityDispatchSourceResume()
{
  return MEMORY[0x1F4107BB0]();
}

uint64_t APSPriorityDispatchSourceSetPriority()
{
  return MEMORY[0x1F4107BB8]();
}

uint64_t APSPriorityDispatchSourceSuspend()
{
  return MEMORY[0x1F4107BC8]();
}

uint64_t APSRTCReportingAgentCreate()
{
  return MEMORY[0x1F4107C08]();
}

uint64_t APSRTCReportingAgentSendEvent()
{
  return MEMORY[0x1F4107C10]();
}

uint64_t APSRealTimeAllocatorAllocate()
{
  return MEMORY[0x1F4107C50]();
}

uint64_t APSRealTimeAllocatorDeallocate()
{
  return MEMORY[0x1F4107C58]();
}

uint64_t APSRealTimeAllocatorGetDefault()
{
  return MEMORY[0x1F4107C60]();
}

uint64_t APSRealTimeDispatcherCreate()
{
  return MEMORY[0x1F4107C70]();
}

uint64_t APSRealTimePTPClockCreate()
{
  return MEMORY[0x1F4107C78]();
}

uint64_t APSRealTimePTPClockGetEstimatedPTPTimeForHostTime()
{
  return MEMORY[0x1F4107C80]();
}

uint64_t APSRealTimeReadableRingBufferGetTypeID()
{
  return MEMORY[0x1F4107C98]();
}

uint64_t APSRealTimeReadableRingBufferWrite()
{
  return MEMORY[0x1F4107CA0]();
}

uint64_t APSRealTimeSignalCreate()
{
  return MEMORY[0x1F4107CB0]();
}

uint64_t APSRealTimeSignalInvalidate()
{
  return MEMORY[0x1F4107CB8]();
}

uint64_t APSRealTimeSignalRaise()
{
  return MEMORY[0x1F4107CC0]();
}

uint64_t APSRecycleBinAddItem()
{
  return MEMORY[0x1F4107CE0]();
}

uint64_t APSRecycleBinCreate()
{
  return MEMORY[0x1F4107CE8]();
}

uint64_t APSRecycleBinTakeItem()
{
  return MEMORY[0x1F4107CF0]();
}

uint64_t APSRotatingKeyMapperInitialize()
{
  return MEMORY[0x1F4107D38]();
}

uint64_t APSRotatingKeyMapperIsInitialized()
{
  return MEMORY[0x1F4107D40]();
}

uint64_t APSRotatingKeyMapperRemoveID()
{
  return MEMORY[0x1F4107D48]();
}

uint64_t APSRotatingKeyMapperSetDataForKey()
{
  return MEMORY[0x1F4107D50]();
}

uint64_t APSRotatingKeyMapperSetDesiredKeyForID()
{
  return MEMORY[0x1F4107D58]();
}

uint64_t APSSetFBOPropertyInt64()
{
  return MEMORY[0x1F4107D90]();
}

uint64_t APSSettingsCopyValue()
{
  return MEMORY[0x1F4107D98]();
}

uint64_t APSSettingsGetBooleanIfPresent()
{
  return MEMORY[0x1F4107DA8]();
}

uint64_t APSSettingsGetCString()
{
  return MEMORY[0x1F4107DB0]();
}

uint64_t APSSettingsGetInt64()
{
  return MEMORY[0x1F4107DC0]();
}

uint64_t APSSettingsGetInt64IfPresent()
{
  return MEMORY[0x1F4107DC8]();
}

uint64_t APSSettingsGetIntWithDefault()
{
  return MEMORY[0x1F4107DD0]();
}

uint64_t APSSettingsIsFeatureEnabled()
{
  return MEMORY[0x1F4107DE0]();
}

uint64_t APSSignalErrorAt()
{
  return MEMORY[0x1F4107E60]();
}

uint64_t APSStallMonitorActivityBegin()
{
  return MEMORY[0x1F4107E68]();
}

uint64_t APSStallMonitorActivityCreate()
{
  return MEMORY[0x1F4107E70]();
}

uint64_t APSStallMonitorActivityEnd()
{
  return MEMORY[0x1F4107E78]();
}

uint64_t APSSystemGetUserVersion()
{
  return MEMORY[0x1F4107EB0]();
}

uint64_t APSTapToRadarInvoke()
{
  return MEMORY[0x1F4107EB8]();
}

uint64_t APSTransportMessageGetAudioDataHeader()
{
  return MEMORY[0x1F4107F80]();
}

uint64_t APSVersionUtilsGetShortVersionLength()
{
  return MEMORY[0x1F4108008]();
}

uint64_t APSWiFiTrafficRegistrationCreate()
{
  return MEMORY[0x1F4108048]();
}

uint64_t APSWiFiTrafficRegistrationSetRemovalHandler()
{
  return MEMORY[0x1F4108050]();
}

uint64_t APSWiFiTransactionCreate()
{
  return MEMORY[0x1F4108058]();
}

uint64_t APSWiFiTransactionSetReleaseHandler()
{
  return MEMORY[0x1F4108060]();
}

uint64_t APSWrapperCreate()
{
  return MEMORY[0x1F4108078]();
}

uint64_t APSWrapperGetValue()
{
  return MEMORY[0x1F4108080]();
}

uint64_t ASPrintF()
{
  return MEMORY[0x1F4115D28]();
}

uint64_t Apple80211ErrToStr()
{
  return MEMORY[0x1F41247B8]();
}

uint64_t Apple80211GetIOReportingService()
{
  return MEMORY[0x1F41247D0]();
}

uint64_t AsyncConnection_Connect()
{
  return MEMORY[0x1F4115D38]();
}

uint64_t AsyncConnection_ConnectEx()
{
  return MEMORY[0x1F4115D40]();
}

uint64_t AsyncConnection_Release()
{
  return MEMORY[0x1F4115D48]();
}

uint64_t BitListString_Make()
{
  return MEMORY[0x1F4115D70]();
}

uint64_t BitListString_Parse()
{
  return MEMORY[0x1F4115D78]();
}

uint64_t BonjourAdvertiserCreate()
{
  return MEMORY[0x1F4115D80]();
}

uint64_t BonjourAdvertiserSetDispatchQueue()
{
  return MEMORY[0x1F4115D88]();
}

uint64_t BonjourAdvertiserSetDomain()
{
  return MEMORY[0x1F4115D90]();
}

uint64_t BonjourAdvertiserSetFlags()
{
  return MEMORY[0x1F4115D98]();
}

uint64_t BonjourAdvertiserSetInterfaceName()
{
  return MEMORY[0x1F4115DA0]();
}

uint64_t BonjourAdvertiserSetPort()
{
  return MEMORY[0x1F4115DA8]();
}

uint64_t BonjourAdvertiserSetServiceType()
{
  return MEMORY[0x1F4115DB0]();
}

uint64_t BonjourAdvertiserSetTXTRecord()
{
  return MEMORY[0x1F4115DB8]();
}

uint64_t BonjourAdvertiserStart()
{
  return MEMORY[0x1F4115DC0]();
}

uint64_t BonjourAdvertiserStop()
{
  return MEMORY[0x1F4115DC8]();
}

uint64_t BonjourBrowser_CreateEx()
{
  return MEMORY[0x1F4115DE0]();
}

uint64_t BonjourBrowser_ReconfirmDeviceEx()
{
  return MEMORY[0x1F4115DE8]();
}

uint64_t BonjourBrowser_SetDispatchQueue()
{
  return MEMORY[0x1F4115DF0]();
}

uint64_t BonjourBrowser_SetEventHandler()
{
  return MEMORY[0x1F4115DF8]();
}

uint64_t BonjourBrowser_SetEventHandlerBlock()
{
  return MEMORY[0x1F4115E00]();
}

uint64_t BonjourBrowser_SetNANControlFlags()
{
  return MEMORY[0x1F4115E08]();
}

uint64_t BonjourBrowser_Start()
{
  return MEMORY[0x1F4115E10]();
}

uint64_t BonjourBrowser_Stop()
{
  return MEMORY[0x1F4115E18]();
}

uint64_t BonjourDevice_CopyCFString()
{
  return MEMORY[0x1F4115E20]();
}

uint64_t BonjourDevice_CopyConnectionInfo()
{
  return MEMORY[0x1F4115E28]();
}

uint64_t BonjourDevice_CopyDNSNames()
{
  return MEMORY[0x1F4115E30]();
}

uint64_t BonjourDevice_GetDNSName()
{
  return MEMORY[0x1F4115E38]();
}

uint64_t BonjourDevice_GetDeviceID()
{
  return MEMORY[0x1F4115E40]();
}

uint64_t BonjourDevice_GetInt64()
{
  return MEMORY[0x1F4115E48]();
}

uint64_t BonjourDevice_MergeInfo()
{
  return MEMORY[0x1F4115E50]();
}

uint64_t BonjourDevice_RemoveInterfaceInfo()
{
  return MEMORY[0x1F4115E60]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1F40D70E8](allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

CFTypeID CFAllocatorGetTypeID(void)
{
  return MEMORY[0x1F40D7120]();
}

uint64_t CFArrayAppendInt64()
{
  return MEMORY[0x1F4115E70]();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

uint64_t CFArrayApplyBlock()
{
  return MEMORY[0x1F4115E78]();
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

uint64_t CFArrayEnsureCreatedAndAppend()
{
  return MEMORY[0x1F4115E80]();
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

uint64_t CFArrayGetTypedValueAtIndex()
{
  return MEMORY[0x1F4115E88]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

uint64_t CFCopyCString()
{
  return MEMORY[0x1F4115E90]();
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1F40D77A8](cf);
}

uint64_t CFCreateWithPlistBytes()
{
  return MEMORY[0x1F4115EA0]();
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x1F40D77F8](allocator, theData);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

uint64_t CFDictionaryApplyBlock()
{
  return MEMORY[0x1F4115EA8]();
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

uint64_t CFDictionaryCopyKeys()
{
  return MEMORY[0x1F4115EB8]();
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7990](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

uint64_t CFDictionaryGetCString()
{
  return MEMORY[0x1F4115ED8]();
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

uint64_t CFDictionaryGetDouble()
{
  return MEMORY[0x1F4115EF0]();
}

uint64_t CFDictionaryGetEmpty()
{
  return MEMORY[0x1F4115EF8]();
}

uint64_t CFDictionaryGetInt64()
{
  return MEMORY[0x1F4115F10]();
}

uint64_t CFDictionaryGetInt64Ranged()
{
  return MEMORY[0x1F4115F18]();
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

uint64_t CFDictionaryGetTypedValue()
{
  return MEMORY[0x1F4115F28]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

uint64_t CFDictionarySetCString()
{
  return MEMORY[0x1F4115F40]();
}

uint64_t CFDictionarySetData()
{
  return MEMORY[0x1F4115F48]();
}

uint64_t CFDictionarySetDouble()
{
  return MEMORY[0x1F4115F50]();
}

uint64_t CFDictionarySetInt64()
{
  return MEMORY[0x1F4115F58]();
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1F40D7AA8](err);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1F40D7B60](cf);
}

uint64_t CFGetInt64()
{
  return MEMORY[0x1F4115F80]();
}

uint64_t CFGetInt64Ranged()
{
  return MEMORY[0x1F4115F88]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1F40D7BA0](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

uint64_t CFNumberCreateInt64()
{
  return MEMORY[0x1F4115F98]();
}

CFNumberFormatterRef CFNumberFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style)
{
  return (CFNumberFormatterRef)MEMORY[0x1F40D7D98](allocator, locale, style);
}

CFNumberRef CFNumberFormatterCreateNumberFromString(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFOptionFlags options)
{
  return (CFNumberRef)MEMORY[0x1F40D7DA0](allocator, formatter, string, rangep, options);
}

uint64_t CFNumberGetObject()
{
  return MEMORY[0x1F4115FA0]();
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

uint64_t CFObjectSetInt64()
{
  return MEMORY[0x1F4115FB0]();
}

uint64_t CFObjectSetProperty()
{
  return MEMORY[0x1F4115FB8]();
}

uint64_t CFObjectSetValue()
{
  return MEMORY[0x1F4115FC8]();
}

uint64_t CFPrefs_GetDouble()
{
  return MEMORY[0x1F4115FE8]();
}

uint64_t CFPrefs_GetInt64()
{
  return MEMORY[0x1F4116000]();
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40D7F18](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F50](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

uint64_t CFSetApplyBlock()
{
  return MEMORY[0x1F4116058]();
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1F40D81F8](theSet, value);
}

CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks)
{
  return (CFSetRef)MEMORY[0x1F40D8200](allocator, values, numValues, callBacks);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1F40D8220](theSet);
}

CFTypeID CFSetGetTypeID(void)
{
  return MEMORY[0x1F40D8230]();
}

void CFSetRemoveAllValues(CFMutableSetRef theSet)
{
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

uint64_t CFStringAppendF()
{
  return MEMORY[0x1F4116060]();
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

uint64_t CFStringCopyUTF8CString()
{
  return MEMORY[0x1F4116070]();
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1F40D83D0](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1F40D83E0](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

uint64_t CFStringCreateF()
{
  return MEMORY[0x1F4116078]();
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8458](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1F40D84C8](theString, stringToFind, compareOptions);
  result.CFIndex length = v4;
  result.location = v3;
  return result;
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D84D0](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84E0](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x1F40D8608](theString, suffix);
}

void CFStringReplace(CFMutableStringRef theString, CFRange range, CFStringRef replacement)
{
}

void CFStringTrim(CFMutableStringRef theString, CFStringRef trimString)
{
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1F40D8988](alloc);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x1F40D89A0](alloc, *(void *)&bytes.byte0, *(void *)&bytes.byte8);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1F40D89B0](alloc, uuid);
}

CFTypeID CFUUIDGetTypeID(void)
{
  return MEMORY[0x1F40D89D8]();
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1 = MEMORY[0x1F40D89E8](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

uint64_t CMBaseGetClassID()
{
  return MEMORY[0x1F40DB900]();
}

uint64_t CMBaseObjectGetDerivedStorage()
{
  return MEMORY[0x1F40DB910]();
}

uint64_t CMBaseObjectGetProtocolVTable()
{
  return MEMORY[0x1F40DB918]();
}

uint64_t CMBaseObjectGetVTable()
{
  return MEMORY[0x1F40DB920]();
}

OSStatus CMBlockBufferAppendBufferReference(CMBlockBufferRef theBuffer, CMBlockBufferRef targetBBuf, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags)
{
  return MEMORY[0x1F40DB950](theBuffer, targetBBuf, offsetToData, dataLength, *(void *)&flags);
}

OSStatus CMBlockBufferAppendMemoryBlock(CMBlockBufferRef theBuffer, void *memoryBlock, size_t blockLength, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags)
{
  return MEMORY[0x1F40DB958](theBuffer, memoryBlock, blockLength, blockAllocator, customBlockSource, offsetToData, dataLength, *(void *)&flags);
}

OSStatus CMBlockBufferCopyDataBytes(CMBlockBufferRef theSourceBuffer, size_t offsetToData, size_t dataLength, void *destination)
{
  return MEMORY[0x1F40DB968](theSourceBuffer, offsetToData, dataLength, destination);
}

OSStatus CMBlockBufferCreateEmpty(CFAllocatorRef structureAllocator, uint32_t subBlockCapacity, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1F40DB978](structureAllocator, *(void *)&subBlockCapacity, *(void *)&flags, blockBufferOut);
}

OSStatus CMBlockBufferCreateWithBufferReference(CFAllocatorRef structureAllocator, CMBlockBufferRef bufferReference, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1F40DB980](structureAllocator, bufferReference, offsetToData, dataLength, *(void *)&flags, blockBufferOut);
}

OSStatus CMBlockBufferCreateWithMemoryBlock(CFAllocatorRef structureAllocator, void *memoryBlock, size_t blockLength, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1F40DB988](structureAllocator, memoryBlock, blockLength, blockAllocator, customBlockSource, offsetToData, dataLength, *(void *)&flags);
}

size_t CMBlockBufferGetDataLength(CMBlockBufferRef theBuffer)
{
  return MEMORY[0x1F40DB998](theBuffer);
}

OSStatus CMBlockBufferGetDataPointer(CMBlockBufferRef theBuffer, size_t offset, size_t *lengthAtOffsetOut, size_t *totalLengthOut, char **dataPointerOut)
{
  return MEMORY[0x1F40DB9A0](theBuffer, offset, lengthAtOffsetOut, totalLengthOut, dataPointerOut);
}

CFTypeID CMBlockBufferGetTypeID(void)
{
  return MEMORY[0x1F40DB9B0]();
}

Boolean CMBlockBufferIsEmpty(CMBlockBufferRef theBuffer)
{
  return MEMORY[0x1F40DB9B8](theBuffer);
}

OSStatus CMBlockBufferReplaceDataBytes(const void *sourceBytes, CMBlockBufferRef destinationBuffer, size_t offsetIntoDestination, size_t dataLength)
{
  return MEMORY[0x1F40DB9C8](sourceBytes, destinationBuffer, offsetIntoDestination, dataLength);
}

CMClockRef CMClockGetHostTimeClock(void)
{
  return (CMClockRef)MEMORY[0x1F40DBB30]();
}

CMTime *__cdecl CMClockGetTime(CMTime *__return_ptr retstr, CMClockRef clock)
{
  return (CMTime *)MEMORY[0x1F40DBB38](retstr, clock);
}

CMTime *__cdecl CMClockMakeHostTimeFromSystemUnits(CMTime *__return_ptr retstr, uint64_t hostTime)
{
  return (CMTime *)MEMORY[0x1F40DBB50](retstr, hostTime);
}

uint64_t CMDerivedObjectCreate()
{
  return MEMORY[0x1F40DBB80]();
}

uint64_t CMNotificationCenterAddListener()
{
  return MEMORY[0x1F40DBCA8]();
}

uint64_t CMNotificationCenterGetDefaultLocalCenter()
{
  return MEMORY[0x1F40DBCB8]();
}

uint64_t CMNotificationCenterPostNotification()
{
  return MEMORY[0x1F40DBCC0]();
}

uint64_t CMNotificationCenterRemoveListener()
{
  return MEMORY[0x1F40DBCD8]();
}

void CMSetAttachment(CMAttachmentBearerRef target, CFStringRef key, CFTypeRef value, CMAttachmentMode attachmentMode)
{
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x1F40DC0C8](time1, time2);
}

CFDictionaryRef CMTimeCopyAsDictionary(CMTime *time, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x1F40DC0E0](time, allocator);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  MEMORY[0x1F40DC100](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x1F40DC108](retstr, value, *(void *)&timescale);
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTime *)MEMORY[0x1F40DC110](retstr, dictionaryRepresentation);
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x1F40DC120](retstr, *(void *)&preferredTimescale, seconds);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1F40DC1F0](retstr, lhs, rhs);
}

uint64_t CUDispatchTimerSet()
{
  return MEMORY[0x1F41160C0]();
}

uint64_t CUGestaltDeviceClassToString()
{
  return MEMORY[0x1F41160D8]();
}

uint64_t CUGetInterfaceAddresses()
{
  return MEMORY[0x1F41160E0]();
}

uint64_t CUObfuscatedPtr()
{
  return MEMORY[0x1F4116100]();
}

uint64_t CUPrintAddress()
{
  return MEMORY[0x1F4116108]();
}

uint64_t CUPrintFlags32()
{
  return MEMORY[0x1F4116140]();
}

uint64_t CreateTXTRecordFromBinaryTXTRecord()
{
  return MEMORY[0x1F41080B8]();
}

uint64_t CreateUsableInterfaceList()
{
  return MEMORY[0x1F4116270]();
}

uint64_t DataBuffer_Append()
{
  return MEMORY[0x1F4116300]();
}

uint64_t DataBuffer_AppendF()
{
  return MEMORY[0x1F4116308]();
}

uint64_t DataBuffer_Commit()
{
  return MEMORY[0x1F4116310]();
}

uint64_t DataBuffer_Free()
{
  return MEMORY[0x1F4116318]();
}

uint64_t DataBuffer_Init()
{
  return MEMORY[0x1F4116320]();
}

uint64_t DebugGetErrorString()
{
  return MEMORY[0x1F4116330]();
}

uint64_t FatalErrorF()
{
  return MEMORY[0x1F4116368]();
}

uint64_t FigCFArrayAppendInt64()
{
  return MEMORY[0x1F40DC818]();
}

uint64_t FigCFArrayGetInt64AtIndex()
{
  return MEMORY[0x1F40DC8D8]();
}

uint64_t FigCFArrayGetValueAtIndex()
{
  return MEMORY[0x1F40DC8F0]();
}

uint64_t FigCFDictionaryApplyBlock()
{
  return MEMORY[0x1F40DC948]();
}

uint64_t FigCFDictionaryCopyArrayOfValues()
{
  return MEMORY[0x1F40DC958]();
}

uint64_t FigCFDictionaryCreateMutableCopy()
{
  return MEMORY[0x1F40DC970]();
}

uint64_t FigCFDictionaryGetBooleanIfPresent()
{
  return MEMORY[0x1F40DC988]();
}

uint64_t FigCFDictionaryGetCMTimeIfPresent()
{
  return MEMORY[0x1F40DC9B8]();
}

uint64_t FigCFDictionaryGetCount()
{
  return MEMORY[0x1F40DC9C8]();
}

uint64_t FigCFDictionaryGetDoubleIfPresent()
{
  return MEMORY[0x1F40DC9E0]();
}

uint64_t FigCFDictionaryGetInt32IfPresent()
{
  return MEMORY[0x1F40DCA00]();
}

uint64_t FigCFDictionarySetCMTime()
{
  return MEMORY[0x1F40DCA88]();
}

uint64_t FigCFDictionarySetDouble()
{
  return MEMORY[0x1F40DCA98]();
}

uint64_t FigCFDictionarySetInt()
{
  return MEMORY[0x1F40DCAB0]();
}

uint64_t FigCFDictionarySetInt32()
{
  return MEMORY[0x1F40DCAC0]();
}

uint64_t FigCFDictionarySetInt64()
{
  return MEMORY[0x1F40DCAC8]();
}

uint64_t FigCFDictionarySetValue()
{
  return MEMORY[0x1F40DCAE8]();
}

uint64_t FigCFDictionarySetValueFromKeyInDict()
{
  return MEMORY[0x1F40DCAF0]();
}

uint64_t FigCFEqual()
{
  return MEMORY[0x1F40DCAF8]();
}

uint64_t FigCFNumberCreateUInt64()
{
  return MEMORY[0x1F40DCB58]();
}

uint64_t FigCFNumberGetUInt64()
{
  return MEMORY[0x1F40DCB98]();
}

uint64_t FigCFStringGetCStringPtrAndBufferToFree()
{
  return MEMORY[0x1F40DCC20]();
}

uint64_t FigCFWeakReferenceHolderCopyReferencedObject()
{
  return MEMORY[0x1F40DCCA0]();
}

uint64_t FigCFWeakReferenceHolderCreateWithReferencedObject()
{
  return MEMORY[0x1F40DCCA8]();
}

uint64_t FigCFWeakReferenceTableAddValueAndGetKey()
{
  return MEMORY[0x1F40DCCD0]();
}

uint64_t FigCFWeakReferenceTableAddValueAssociatedWithKey()
{
  return MEMORY[0x1F40DCCD8]();
}

uint64_t FigCFWeakReferenceTableCopyValue()
{
  return MEMORY[0x1F40DCCE8]();
}

uint64_t FigCFWeakReferenceTableCopyValues()
{
  return MEMORY[0x1F40DCCF0]();
}

uint64_t FigCFWeakReferenceTableCreate()
{
  return MEMORY[0x1F40DCCF8]();
}

uint64_t FigCFWeakReferenceTableRemoveValue()
{
  return MEMORY[0x1F40DCD00]();
}

uint64_t FigCreateBlockBufferCopyingMemoryBlock()
{
  return MEMORY[0x1F40DD000]();
}

uint64_t FigCreateBlockBufferWithCFDataNoCopy()
{
  return MEMORY[0x1F40DD008]();
}

uint64_t FigCreateCFDataWithBlockBufferNoCopy()
{
  return MEMORY[0x1F40DD040]();
}

uint64_t FigDispatchAsyncPostNotification()
{
  return MEMORY[0x1F40DD370]();
}

uint64_t FigDispatchQueueCreateWithPriority()
{
  return MEMORY[0x1F40DD3A8]();
}

uint64_t FigDispatchSyncCopyPropertyImplementation()
{
  return MEMORY[0x1F40DD3D8]();
}

uint64_t FigGetCFPreferenceNumberWithDefault()
{
  return MEMORY[0x1F40DD858]();
}

uint64_t FigMakeIOVecArrayWithBlockBuffer()
{
  return MEMORY[0x1F40DDB90]();
}

uint64_t FigSimpleMutexCheckIsLockedOnThisThread()
{
  return MEMORY[0x1F40DE330]();
}

uint64_t FigSimpleMutexCheckIsNotLockedOnThisThread()
{
  return MEMORY[0x1F40DE338]();
}

uint64_t FigSimpleMutexCreate()
{
  return MEMORY[0x1F40DE340]();
}

uint64_t FigSimpleMutexDestroy()
{
  return MEMORY[0x1F40DE348]();
}

uint64_t FigSimpleMutexLock()
{
  return MEMORY[0x1F40DE350]();
}

uint64_t FigSimpleMutexTryLock()
{
  return MEMORY[0x1F40DE358]();
}

uint64_t FigSimpleMutexUnlock()
{
  return MEMORY[0x1F40DE360]();
}

uint64_t FigThreadRunOnce()
{
  return MEMORY[0x1F40DE5F0]();
}

uint64_t FigTransportGetCMBaseObject()
{
  return MEMORY[0x1F40DE750]();
}

uint64_t FigTransportGetClassID()
{
  return MEMORY[0x1F40DE758]();
}

uint64_t FigTransportServiceGetClassID()
{
  return MEMORY[0x1F40DE770]();
}

uint64_t FigTransportSessionGetClassID()
{
  return MEMORY[0x1F40DE780]();
}

uint64_t FigTransportStreamGetCMBaseObject()
{
  return MEMORY[0x1F40DE790]();
}

uint64_t FigTransportStreamGetClassID()
{
  return MEMORY[0x1F40DE798]();
}

uint64_t FigTransportStreamGetTypeID()
{
  return MEMORY[0x1F40DE7A0]();
}

uint64_t GestaltProductTypeStringToDeviceClass()
{
  return MEMORY[0x1F41163B0]();
}

uint64_t GetPeerMACAddress()
{
  return MEMORY[0x1F41163E0]();
}

uint64_t HTTPClientCreate()
{
  return MEMORY[0x1F4116400]();
}

uint64_t HTTPClientCreateWithSocket()
{
  return MEMORY[0x1F4116408]();
}

uint64_t HTTPClientGetClientID()
{
  return MEMORY[0x1F4116410]();
}

uint64_t HTTPClientGetSelfAddress()
{
  return MEMORY[0x1F4116420]();
}

uint64_t HTTPClientInvalidate()
{
  return MEMORY[0x1F4116428]();
}

uint64_t HTTPClientSendMessage()
{
  return MEMORY[0x1F4116430]();
}

uint64_t HTTPClientSetConnectionLogging()
{
  return MEMORY[0x1F4116438]();
}

uint64_t HTTPClientSetDelegate()
{
  return MEMORY[0x1F4116448]();
}

uint64_t HTTPClientSetDestination()
{
  return MEMORY[0x1F4116450]();
}

uint64_t HTTPClientSetDispatchQueue()
{
  return MEMORY[0x1F4116458]();
}

uint64_t HTTPClientSetFlags()
{
  return MEMORY[0x1F4116460]();
}

uint64_t HTTPClientSetLogging()
{
  return MEMORY[0x1F4116468]();
}

uint64_t HTTPClientSetTimeout()
{
  return MEMORY[0x1F4116470]();
}

uint64_t HTTPClientSetTransportDelegate()
{
  return MEMORY[0x1F4116478]();
}

uint64_t HTTPConnectionCreate()
{
  return MEMORY[0x1F4116480]();
}

uint64_t HTTPConnectionGetNextURLSegmentEx()
{
  return MEMORY[0x1F4116488]();
}

uint64_t HTTPConnectionSendSimpleResponseEx()
{
  return MEMORY[0x1F41164A0]();
}

uint64_t HTTPConnectionSetDispatchQueue()
{
  return MEMORY[0x1F41164A8]();
}

uint64_t HTTPConnectionSetTimeout()
{
  return MEMORY[0x1F41164B0]();
}

uint64_t HTTPConnectionSetTransportDelegate()
{
  return MEMORY[0x1F41164B8]();
}

uint64_t HTTPConnectionStart()
{
  return MEMORY[0x1F41164C0]();
}

uint64_t HTTPConnectionStopAsync()
{
  return MEMORY[0x1F41164C8]();
}

uint64_t HTTPGetHeaderField()
{
  return MEMORY[0x1F41164D0]();
}

uint64_t HTTPHeader_InitRequest()
{
  return MEMORY[0x1F41164E0]();
}

uint64_t HTTPHeader_SetField()
{
  return MEMORY[0x1F41164E8]();
}

uint64_t HTTPMessageCopy()
{
  return MEMORY[0x1F41164F8]();
}

uint64_t HTTPMessageCreate()
{
  return MEMORY[0x1F4116500]();
}

uint64_t HTTPMessageGetHeaderField()
{
  return MEMORY[0x1F4116508]();
}

uint64_t HTTPMessageSetBody()
{
  return MEMORY[0x1F4116510]();
}

uint64_t HTTPMessageSetCompletionBlock()
{
  return MEMORY[0x1F4116520]();
}

uint64_t HTTPScanFHeaderValue()
{
  return MEMORY[0x1F4116540]();
}

uint64_t HTTPServerCreate()
{
  return MEMORY[0x1F4116548]();
}

uint64_t HTTPServerSetDispatchQueue()
{
  return MEMORY[0x1F4116550]();
}

uint64_t HTTPServerSetLogging()
{
  return MEMORY[0x1F4116558]();
}

uint64_t HexToData()
{
  return MEMORY[0x1F4116588]();
}

uint64_t IOReportChannelGetChannelName()
{
  return MEMORY[0x1F417A738]();
}

uint64_t IOReportChannelGetGroup()
{
  return MEMORY[0x1F417A748]();
}

uint64_t IOReportChannelGetSubGroup()
{
  return MEMORY[0x1F417A750]();
}

uint64_t IOReportChannelGetUnitLabel()
{
  return MEMORY[0x1F417A760]();
}

uint64_t IOReportCopyChannelsForDriver()
{
  return MEMORY[0x1F417A768]();
}

uint64_t IOReportCreateSamples()
{
  return MEMORY[0x1F417A798]();
}

uint64_t IOReportCreateSubscription()
{
  return MEMORY[0x1F417A7A8]();
}

uint64_t IOReportGetChannelCount()
{
  return MEMORY[0x1F417A7B0]();
}

uint64_t IOReportIterate()
{
  return MEMORY[0x1F417A7D0]();
}

uint64_t IOReportPrune()
{
  return MEMORY[0x1F417A7E0]();
}

uint64_t IOReportSelectChannelsInGroup()
{
  return MEMORY[0x1F417A7F0]();
}

uint64_t IOReportSimpleGetIntegerValue()
{
  return MEMORY[0x1F417A7F8]();
}

uint64_t IPv4AddressToCString()
{
  return MEMORY[0x1F4116590]();
}

uint64_t IsAppleInternalBuild()
{
  return MEMORY[0x1F41165A0]();
}

uint64_t IsAppleTV()
{
  return MEMORY[0x1F41165A8]();
}

uint64_t LogCategoryCopyOSLogHandle()
{
  return MEMORY[0x1F41165D8]();
}

uint64_t LogCategoryReplaceF()
{
  return MEMORY[0x1F41165F8]();
}

uint64_t LogCategory_Remove()
{
  return MEMORY[0x1F4116600]();
}

uint64_t LogHTTP()
{
  return MEMORY[0x1F4116628]();
}

uint64_t LogPrintF()
{
  return MEMORY[0x1F4116630]();
}

uint64_t MakeFractionalDateString()
{
  return MEMORY[0x1F41166A0]();
}

uint64_t MillisecondsToUpTicks()
{
  return MEMORY[0x1F41166B0]();
}

uint64_t NSErrorToOSStatus()
{
  return MEMORY[0x1F4116790]();
}

uint64_t NSPrintF()
{
  return MEMORY[0x1F41167B0]();
}

uint64_t NetSocketChaCha20Poly1305Configure()
{
  return MEMORY[0x1F4116870]();
}

uint64_t NetSocket_Cancel()
{
  return MEMORY[0x1F4116878]();
}

uint64_t NetSocket_CreateWithNative()
{
  return MEMORY[0x1F4116880]();
}

uint64_t NetSocket_Delete()
{
  return MEMORY[0x1F4116888]();
}

uint64_t NetSocket_GetNative()
{
  return MEMORY[0x1F4116890]();
}

uint64_t NetTransportChaCha20Poly1305Configure()
{
  return MEMORY[0x1F4116898]();
}

uint64_t PLLogRegisteredEvent()
{
  return MEMORY[0x1F4145D90]();
}

uint64_t ParseFractionalDateString()
{
  return MEMORY[0x1F41169F0]();
}

uint64_t ReleaseUsableInterfaceList()
{
  return MEMORY[0x1F4116A10]();
}

CFDictionaryRef SCDynamicStoreCopyMultiple(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  return (CFDictionaryRef)MEMORY[0x1F4101D98](store, keys, patterns);
}

CFPropertyListRef SCDynamicStoreCopyValue(SCDynamicStoreRef store, CFStringRef key)
{
  return (CFPropertyListRef)MEMORY[0x1F4101DA8](store, key);
}

SCDynamicStoreRef SCDynamicStoreCreate(CFAllocatorRef allocator, CFStringRef name, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return (SCDynamicStoreRef)MEMORY[0x1F4101DB0](allocator, name, callout, context);
}

CFStringRef SCDynamicStoreKeyCreateNetworkInterfaceEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef ifname, CFStringRef entity)
{
  return (CFStringRef)MEMORY[0x1F4101DE8](allocator, domain, ifname, entity);
}

Boolean SCDynamicStoreSetDispatchQueue(SCDynamicStoreRef store, dispatch_queue_t queue)
{
  return MEMORY[0x1F4101E08](store, queue);
}

Boolean SCDynamicStoreSetNotificationKeys(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  return MEMORY[0x1F4101E18](store, keys, patterns);
}

int SCError(void)
{
  return MEMORY[0x1F4101E20]();
}

const char *__cdecl SCErrorString(int status)
{
  return (const char *)MEMORY[0x1F4101E28](*(void *)&status);
}

uint64_t SNPrintF()
{
  return MEMORY[0x1F4116A18]();
}

uint64_t SNScanF()
{
  return MEMORY[0x1F4116A28]();
}

uint64_t SecGenerateSelfSignedCertificate()
{
  return MEMORY[0x1F40F6DB0]();
}

uint64_t SecIdentityCreate()
{
  return MEMORY[0x1F40F6DC8]();
}

SecKeyRef SecKeyCreateRandomKey(CFDictionaryRef parameters, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1F40F6EE0](parameters, error);
}

SecPolicyRef SecPolicyCreateSSL(Boolean server, CFStringRef hostname)
{
  return (SecPolicyRef)MEMORY[0x1F40F7088](server, hostname);
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return MEMORY[0x1F40F7210](trust, error);
}

OSStatus SecTrustSetPolicies(SecTrustRef trust, CFTypeRef policies)
{
  return MEMORY[0x1F40F7290](trust, policies);
}

uint64_t SecondsToUpTicks()
{
  return MEMORY[0x1F4116A30]();
}

uint64_t ServerSocketPairOpen()
{
  return MEMORY[0x1F4116A50]();
}

uint64_t SipHash()
{
  return MEMORY[0x1F4116A60]();
}

uint64_t SockAddrCopy()
{
  return MEMORY[0x1F4116A78]();
}

uint64_t SockAddrGetPort()
{
  return MEMORY[0x1F4116A80]();
}

uint64_t SockAddrGetSize()
{
  return MEMORY[0x1F4116A88]();
}

uint64_t SockAddrSetPort()
{
  return MEMORY[0x1F4116A90]();
}

uint64_t SockAddrToString()
{
  return MEMORY[0x1F4116AA0]();
}

uint64_t SocketAccept()
{
  return MEMORY[0x1F4116AA8]();
}

uint64_t SocketConnect()
{
  return MEMORY[0x1F4116AB0]();
}

uint64_t SocketGetInterfaceInfo()
{
  return MEMORY[0x1F4116AB8]();
}

uint64_t SocketSetBufferSize()
{
  return MEMORY[0x1F4116AC8]();
}

uint64_t SocketSetMulticastInterface()
{
  return MEMORY[0x1F4116AD0]();
}

uint64_t SocketSetNonBlocking()
{
  return MEMORY[0x1F4116AD8]();
}

uint64_t SocketSetP2P()
{
  return MEMORY[0x1F4116AE8]();
}

uint64_t SocketSetQoS()
{
  return MEMORY[0x1F4116AF0]();
}

uint64_t SocketSetTCPTimeout()
{
  return MEMORY[0x1F4116AF8]();
}

uint64_t SocketWriteData()
{
  return MEMORY[0x1F4116B00]();
}

uint64_t StringToSockAddr()
{
  return MEMORY[0x1F4116B18]();
}

void TXTRecordCreate(TXTRecordRef *txtRecord, uint16_t bufferLen, void *buffer)
{
}

void TXTRecordDeallocate(TXTRecordRef *txtRecord)
{
}

const void *__cdecl TXTRecordGetBytesPtr(const TXTRecordRef *txtRecord)
{
  return (const void *)MEMORY[0x1F40C9A38](txtRecord);
}

uint16_t TXTRecordGetLength(const TXTRecordRef *txtRecord)
{
  return MEMORY[0x1F40C9A50](txtRecord);
}

const void *__cdecl TXTRecordGetValuePtr(uint16_t txtLen, const void *txtRecord, const char *key, uint8_t *valueLen)
{
  return (const void *)MEMORY[0x1F40C9A58](txtLen, txtRecord, key, valueLen);
}

DNSServiceErrorType TXTRecordSetValue(TXTRecordRef *txtRecord, const char *key, uint8_t valueSize, const void *value)
{
  return MEMORY[0x1F40C9A68](txtRecord, key, valueSize, value);
}

uint64_t TextToHardwareAddressScalar()
{
  return MEMORY[0x1F4116BB0]();
}

uint64_t UUIDGet()
{
  return MEMORY[0x1F4116BD0]();
}

uint64_t UpTicksToMicroseconds()
{
  return MEMORY[0x1F4116BF0]();
}

uint64_t UpTicksToMilliseconds()
{
  return MEMORY[0x1F4116BF8]();
}

uint64_t UpTicksToNanoseconds()
{
  return MEMORY[0x1F4116C08]();
}

uint64_t UpTicksToSeconds()
{
  return MEMORY[0x1F4116C10]();
}

uint64_t UpTicksToSecondsF()
{
  return MEMORY[0x1F4116C20]();
}

uint64_t WiFiManagerClientCreate()
{
  return MEMORY[0x1F412FEA0]();
}

uint64_t WiFiManagerClientSetProperty()
{
  return MEMORY[0x1F412FF38]();
}

uint64_t WiFiManagerCreate()
{
  return MEMORY[0x1F4116C50]();
}

uint64_t WiFiManagerGetInt64()
{
  return MEMORY[0x1F4116C58]();
}

uint64_t WiFiManagerSetProperty()
{
  return MEMORY[0x1F4116C60]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1F40D90D0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1F40D90E8]();
}

uint64_t _LogCategory_Initialize()
{
  return MEMORY[0x1F4116C88]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1F40C9C28]();
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9D00](*(void *)&a1);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1F40CB440](*(void *)&a1, a2, *(void *)&a3);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after_f(dispatch_time_t when, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return MEMORY[0x1F40CBA48](data);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA0](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

void dispatch_set_finalizer_f(dispatch_object_t object, dispatch_function_t finalizer)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1F40CBCA0](source);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_cancel_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

void free(void *a1)
{
}

void freeifaddrs(ifaddrs *a1)
{
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x1F40CC410](a1);
}

int getpeername(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1F40CC488](*(void *)&a1, a2, a3);
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1F40CC558](*(void *)&a1, a2, a3);
}

int getsockopt(int a1, int a2, int a3, void *a4, socklen_t *a5)
{
  return MEMORY[0x1F40CC560](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, a5);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

char *__cdecl if_indextoname(unsigned int a1, char *a2)
{
  return (char *)MEMORY[0x1F40CC648](*(void *)&a1, a2);
}

unsigned int if_nametoindex(const char *a1)
{
  return MEMORY[0x1F40CC650](a1);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1F40CC680](*(void *)&a1, a2, a3);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40CC700]();
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

BOOL notify_is_valid_token(int val)
{
  return MEMORY[0x1F40CD048](*(void *)&val);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

void nw_connection_batch(nw_connection_t connection, dispatch_block_t batch_block)
{
}

void nw_connection_cancel(nw_connection_t connection)
{
}

uint64_t nw_connection_copy_connected_path()
{
  return MEMORY[0x1F40F2A80]();
}

char *__cdecl nw_connection_copy_description(nw_connection_t connection)
{
  return (char *)MEMORY[0x1F40F2A98](connection);
}

nw_endpoint_t nw_connection_copy_endpoint(nw_connection_t connection)
{
  return (nw_endpoint_t)MEMORY[0x1F40F2AA0](connection);
}

nw_parameters_t nw_connection_copy_parameters(nw_connection_t connection)
{
  return (nw_parameters_t)MEMORY[0x1F40F2AC0](connection);
}

nw_protocol_metadata_t nw_connection_copy_protocol_metadata(nw_connection_t connection, nw_protocol_definition_t definition)
{
  return (nw_protocol_metadata_t)MEMORY[0x1F40F2AD0](connection, definition);
}

nw_connection_t nw_connection_create(nw_endpoint_t endpoint, nw_parameters_t parameters)
{
  return (nw_connection_t)MEMORY[0x1F40F2AE0](endpoint, parameters);
}

void nw_connection_force_cancel(nw_connection_t connection)
{
}

void nw_connection_group_cancel(nw_connection_group_t group)
{
}

void nw_connection_group_set_new_connection_handler(nw_connection_group_t group, nw_connection_group_new_connection_handler_t new_connection_handler)
{
}

uint64_t nw_connection_group_set_new_connection_limit()
{
  return MEMORY[0x1F40F2B90]();
}

void nw_connection_group_set_queue(nw_connection_group_t group, dispatch_queue_t queue)
{
}

void nw_connection_group_set_state_changed_handler(nw_connection_group_t group, nw_connection_group_state_changed_handler_t state_changed_handler)
{
}

void nw_connection_group_start(nw_connection_group_t group)
{
}

void nw_connection_receive(nw_connection_t connection, uint32_t minimum_incomplete_length, uint32_t maximum_length, nw_connection_receive_completion_t completion)
{
}

uint64_t nw_connection_receive_multiple()
{
  return MEMORY[0x1F40F2C08]();
}

uint64_t nw_connection_reset_traffic_class()
{
  return MEMORY[0x1F40F2C28]();
}

void nw_connection_send(nw_connection_t connection, dispatch_data_t content, nw_content_context_t context, BOOL is_complete, nw_connection_send_completion_t completion)
{
}

void nw_connection_set_queue(nw_connection_t connection, dispatch_queue_t queue)
{
}

void nw_connection_set_state_changed_handler(nw_connection_t connection, nw_connection_state_changed_handler_t handler)
{
}

void nw_connection_start(nw_connection_t connection)
{
}

uint64_t nw_connection_state_to_string()
{
  return MEMORY[0x1F40F2CB8]();
}

nw_content_context_t nw_content_context_create(const char *context_identifier)
{
  return (nw_content_context_t)MEMORY[0x1F40F2CF8](context_identifier);
}

BOOL nw_content_context_get_is_final(nw_content_context_t context)
{
  return MEMORY[0x1F40F2D10](context);
}

void nw_content_context_set_expiration_milliseconds(nw_content_context_t context, uint64_t expiration_milliseconds)
{
}

uint64_t nw_content_context_set_packet_id()
{
  return MEMORY[0x1F40F2D38]();
}

uint64_t nw_context_activate()
{
  return MEMORY[0x1F40F2D48]();
}

uint64_t nw_context_cancel()
{
  return MEMORY[0x1F40F2D58]();
}

uint64_t nw_context_create()
{
  return MEMORY[0x1F40F2D70]();
}

uint64_t nw_context_run_queued_blocks_inline()
{
  return MEMORY[0x1F40F2DA0]();
}

uint64_t nw_context_set_isolate_protocol_stack()
{
  return MEMORY[0x1F40F2DB0]();
}

uint64_t nw_context_set_scheduling_mode()
{
  return MEMORY[0x1F40F2DC8]();
}

char *__cdecl nw_endpoint_copy_address_string(nw_endpoint_t endpoint)
{
  return (char *)MEMORY[0x1F40F2E38](endpoint);
}

uint64_t nw_endpoint_copy_interface()
{
  return MEMORY[0x1F40F2E58]();
}

nw_endpoint_t nw_endpoint_create_address(const sockaddr *address)
{
  return (nw_endpoint_t)MEMORY[0x1F40F2E80](address);
}

uint64_t nw_endpoint_create_address_with_ethernet()
{
  return MEMORY[0x1F40F2E88]();
}

const sockaddr *__cdecl nw_endpoint_get_address(nw_endpoint_t endpoint)
{
  return (const sockaddr *)MEMORY[0x1F40F2ED0](endpoint);
}

const char *__cdecl nw_endpoint_get_hostname(nw_endpoint_t endpoint)
{
  return (const char *)MEMORY[0x1F40F2F08](endpoint);
}

uint16_t nw_endpoint_get_port(nw_endpoint_t endpoint)
{
  return MEMORY[0x1F40F2F20](endpoint);
}

CFErrorRef nw_error_copy_cf_error(nw_error_t error)
{
  return (CFErrorRef)MEMORY[0x1F40F2F50](error);
}

int nw_error_get_error_code(nw_error_t error)
{
  return MEMORY[0x1F40F2F60](error);
}

nw_error_domain_t nw_error_get_error_domain(nw_error_t error)
{
  return MEMORY[0x1F40F2F68](error);
}

uint64_t nw_interface_create_with_index()
{
  return MEMORY[0x1F40F3230]();
}

uint64_t nw_interface_create_with_name()
{
  return MEMORY[0x1F40F3238]();
}

const char *__cdecl nw_interface_get_name(nw_interface_t interface)
{
  return (const char *)MEMORY[0x1F40F3248](interface);
}

void nw_listener_cancel(nw_listener_t listener)
{
}

uint64_t nw_listener_copy_local_endpoint()
{
  return MEMORY[0x1F40F3318]();
}

nw_listener_t nw_listener_create(nw_parameters_t parameters)
{
  return (nw_listener_t)MEMORY[0x1F40F3320](parameters);
}

nw_listener_t nw_listener_create_with_port(const char *port, nw_parameters_t parameters)
{
  return (nw_listener_t)MEMORY[0x1F40F3330](port, parameters);
}

uint16_t nw_listener_get_port(nw_listener_t listener)
{
  return MEMORY[0x1F40F3338](listener);
}

uint64_t nw_listener_set_event_handler()
{
  return MEMORY[0x1F40F3348]();
}

void nw_listener_set_new_connection_group_handler(nw_listener_t listener, nw_listener_new_connection_group_handler_t handler)
{
}

void nw_listener_set_new_connection_handler(nw_listener_t listener, nw_listener_new_connection_handler_t handler)
{
}

void nw_listener_set_new_connection_limit(nw_listener_t listener, uint32_t new_connection_limit)
{
}

void nw_listener_set_queue(nw_listener_t listener, dispatch_queue_t queue)
{
}

void nw_listener_start(nw_listener_t listener)
{
}

nw_protocol_stack_t nw_parameters_copy_default_protocol_stack(nw_parameters_t parameters)
{
  return (nw_protocol_stack_t)MEMORY[0x1F40F3418](parameters);
}

nw_endpoint_t nw_parameters_copy_local_endpoint(nw_parameters_t parameters)
{
  return (nw_endpoint_t)MEMORY[0x1F40F3438](parameters);
}

nw_interface_t nw_parameters_copy_required_interface(nw_parameters_t parameters)
{
  return (nw_interface_t)MEMORY[0x1F40F3478](parameters);
}

nw_parameters_t nw_parameters_create_quic(nw_parameters_configure_protocol_block_t configure_quic)
{
  return (nw_parameters_t)MEMORY[0x1F40F34B8](configure_quic);
}

nw_parameters_t nw_parameters_create_secure_tcp(nw_parameters_configure_protocol_block_t configure_tls, nw_parameters_configure_protocol_block_t configure_tcp)
{
  return (nw_parameters_t)MEMORY[0x1F40F34D0](configure_tls, configure_tcp);
}

nw_parameters_t nw_parameters_create_secure_udp(nw_parameters_configure_protocol_block_t configure_dtls, nw_parameters_configure_protocol_block_t configure_udp)
{
  return (nw_parameters_t)MEMORY[0x1F40F34E0](configure_dtls, configure_udp);
}

void nw_parameters_prohibit_interface_type(nw_parameters_t parameters, nw_interface_type_t interface_type)
{
}

void nw_parameters_require_interface(nw_parameters_t parameters, nw_interface_t interface)
{
}

uint64_t nw_parameters_set_context()
{
  return MEMORY[0x1F40F35E0]();
}

uint64_t nw_parameters_set_delegated_unique_pid()
{
  return MEMORY[0x1F40F35F0]();
}

uint64_t nw_parameters_set_disable_listener_datapath()
{
  return MEMORY[0x1F40F35F8]();
}

void nw_parameters_set_include_peer_to_peer(nw_parameters_t parameters, BOOL include_peer_to_peer)
{
}

uint64_t nw_parameters_set_local_address()
{
  return MEMORY[0x1F40F3680]();
}

void nw_parameters_set_local_endpoint(nw_parameters_t parameters, nw_endpoint_t local_endpoint)
{
}

void nw_parameters_set_reuse_local_address(nw_parameters_t parameters, BOOL reuse_local_address)
{
}

uint64_t nw_parameters_set_traffic_class()
{
  return MEMORY[0x1F40F37B8]();
}

uint64_t nw_parameters_set_use_p2p()
{
  return MEMORY[0x1F40F37E0]();
}

nw_endpoint_t nw_path_copy_effective_local_endpoint(nw_path_t path)
{
  return (nw_endpoint_t)MEMORY[0x1F40F3800](path);
}

nw_endpoint_t nw_path_copy_effective_remote_endpoint(nw_path_t path)
{
  return (nw_endpoint_t)MEMORY[0x1F40F3808](path);
}

uint64_t nw_path_create_evaluator_for_endpoint()
{
  return MEMORY[0x1F40F3858]();
}

void nw_path_enumerate_interfaces(nw_path_t path, nw_path_enumerate_interfaces_block_t enumerate_block)
{
}

uint64_t nw_path_evaluator_get_client_id()
{
  return MEMORY[0x1F40F3890]();
}

uint64_t nw_protocol_copy_replicate_definition()
{
  return MEMORY[0x1F40F3A40]();
}

nw_protocol_definition_t nw_protocol_copy_tcp_definition(void)
{
  return (nw_protocol_definition_t)MEMORY[0x1F40F3A50]();
}

uint64_t nw_protocol_stack_append_application_protocol()
{
  return MEMORY[0x1F40F3B48]();
}

uint64_t nw_queue_context_target_dispatch_queue()
{
  return MEMORY[0x1F40F3CA0]();
}

void nw_quic_add_tls_application_protocol(nw_protocol_options_t options, const char *application_protocol)
{
}

sec_protocol_options_t nw_quic_copy_sec_protocol_options(nw_protocol_options_t options)
{
  return (sec_protocol_options_t)MEMORY[0x1F40F3D70](options);
}

void nw_quic_set_idle_timeout(nw_protocol_options_t options, uint32_t idle_timeout)
{
}

void nw_release(void *obj)
{
}

uint64_t nw_replicate_create_options()
{
  return MEMORY[0x1F40F3DE0]();
}

void *__cdecl nw_retain(void *obj)
{
  return (void *)MEMORY[0x1F40F3EA8](obj);
}

uint32_t nw_tcp_get_available_send_buffer(nw_protocol_metadata_t metadata)
{
  return MEMORY[0x1F40F3EF8](metadata);
}

void nw_tcp_options_set_no_delay(nw_protocol_options_t options, BOOL no_delay)
{
}

uint64_t nw_tcp_set_no_push()
{
  return MEMORY[0x1F40F3F40]();
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1F4181778](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

void os_release(void *object)
{
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

uint64_t os_transaction_copy_description()
{
  return MEMORY[0x1F40CD598]();
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

ssize_t recvfrom(int a1, void *a2, size_t a3, int a4, sockaddr *a5, socklen_t *a6)
{
  return MEMORY[0x1F40CDCC0](*(void *)&a1, a2, a3, *(void *)&a4, a5, a6);
}

sec_identity_t sec_identity_create(SecIdentityRef identity)
{
  return (sec_identity_t)MEMORY[0x1F40F7398](identity);
}

void sec_protocol_options_append_tls_ciphersuite(sec_protocol_options_t options, tls_ciphersuite_t ciphersuite)
{
}

void sec_protocol_options_set_local_identity(sec_protocol_options_t options, sec_identity_t identity)
{
}

void sec_protocol_options_set_peer_authentication_required(sec_protocol_options_t options, BOOL peer_authentication_required)
{
}

void sec_release(void *obj)
{
}

void *__cdecl sec_retain(void *obj)
{
  return (void *)MEMORY[0x1F40F75B8](obj);
}

ssize_t sendmsg(int a1, const msghdr *a2, int a3)
{
  return MEMORY[0x1F40CDF38](*(void *)&a1, a2, *(void *)&a3);
}

ssize_t sendto(int a1, const void *a2, size_t a3, int a4, const sockaddr *a5, socklen_t a6)
{
  return MEMORY[0x1F40CDF48](*(void *)&a1, a2, a3, *(void *)&a4, a5, *(void *)&a6);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x1F40CDFC0](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, *(void *)&a5);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1F40CE090](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

uint64_t strncmp_prefix()
{
  return MEMORY[0x1F4116D58]();
}

uint64_t strncmpx()
{
  return MEMORY[0x1F4116D60]();
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

uint64_t strnicmpx()
{
  return MEMORY[0x1F4116D70]();
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1F40CE208](__s1, __n);
}

char *__cdecl strpbrk(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1F40CE218](__s1, __s2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2C0](__str, __endptr, *(void *)&__base);
}

uint64_t symptom_framework_init()
{
  return MEMORY[0x1F40CE370]();
}

uint64_t symptom_new()
{
  return MEMORY[0x1F40CE378]();
}

uint64_t symptom_send()
{
  return MEMORY[0x1F40CE380]();
}

uint64_t symptom_set_additional_qualifier()
{
  return MEMORY[0x1F40CE390]();
}

uint64_t symptom_set_qualifier()
{
  return MEMORY[0x1F40CE398]();
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

ssize_t writev(int a1, const iovec *a2, int a3)
{
  return MEMORY[0x1F40CE938](*(void *)&a1, a2, *(void *)&a3);
}