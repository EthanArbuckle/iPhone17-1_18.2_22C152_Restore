void sub_247EC5E78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

objc_object *getTableAsNSData(objc_object *a1)
{
  v1 = a1;
  if (!v1)
  {
LABEL_8:
    v3 = 0;
    goto LABEL_10;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      v3 = v1;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  v2 = v1;
  v3 = (objc_object *) objc_msgSend(objc_alloc(MEMORY[0x263EFF990]), "initWithLength:", 4 * -[objc_object count](v2, "count"));
  uint64_t v4 = [(objc_object *)v3 bytes];
  for (unint64_t i = 0; i < [(objc_object *)v2 count]; ++i)
  {
    v6 = [(objc_object *)v2 objectAtIndexedSubscript:i];
    [v6 floatValue];
    *(_DWORD *)(v4 + 4 * i) = v7;
  }
LABEL_10:

  return v3;
}

void sub_247EC5FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EC6178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_247EC6314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EC63BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EC6460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EC6820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EC6AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EC6CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EC6D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t appledepth::JasperPointCloud::initWithDictionaryRepresentation(appledepth::JasperPointCloud *this, CFDictionaryRef theDict)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)this;
  *(void *)this = 0;
  if (v4) {
    MEMORY[0x24C570720](v4, 0x1000C8077774924);
  }
  *((void *)this + 1) = 0;
  Value = CFDictionaryGetValue(theDict, @"Length");
  if (Value || (uint64_t result = (uint64_t)CFDictionaryGetValue(theDict, @"Size"), (Value = (const void *)result) != 0))
  {
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 == CFNumberGetTypeID())
    {
      int valuePtr = 0;
      uint64_t result = CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr);
      if (!result) {
        return result;
      }
      CFDataRef v8 = (const __CFData *)CFDictionaryGetValue(theDict, @"AdditionalData");
      CFDataRef v9 = v8;
      if (!v8) {
        goto LABEL_10;
      }
      CFTypeID v10 = CFGetTypeID(v8);
      if (v10 == CFDataGetTypeID())
      {
        CFDataGetLength(v9);
LABEL_10:
        appledepth::JasperPointCloud::initWithLength(this, valuePtr);
      }
    }
    return 0;
  }
  return result;
}

void sub_247EC7310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readField<float>(const __CFDictionary *a1, uint64_t a2, void *a3, const __CFString *a4, void *a5)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v9 = a5;
  Value = CFDictionaryGetValue(a1, a4);
  if (Value)
  {
LABEL_13:
    CFTypeID v17 = CFGetTypeID(Value);
    if (v17 == CFDataGetTypeID())
    {
      CFIndex Length = CFDataGetLength((CFDataRef)Value);
      if (Length == 4 * a2)
      {
        BytePtr = CFDataGetBytePtr((CFDataRef)Value);
        memcpy(a3, BytePtr, Length);
        uint64_t v16 = 1;
        goto LABEL_18;
      }
    }
LABEL_17:
    uint64_t v16 = 0;
    goto LABEL_18;
  }
  v22 = a3;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v11 = v9;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v23 objects:v29 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v24;
    while (2)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v24 != v13) {
          objc_enumerationMutation(v11);
        }
        id v15 = *(id *)(*((void *)&v23 + 1) + 8 * i);
        Value = CFDictionaryGetValue(a1, v15);

        if (Value)
        {

          a3 = v22;
          goto LABEL_13;
        }
      }
      uint64_t v12 = [v11 countByEnumeratingWithState:&v23 objects:v29 count:16];
      if (v12) {
        continue;
      }
      break;
    }
  }

  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    CStringPtr = CFStringGetCStringPtr(a4, 0x8000100u);
    *(_DWORD *)buf = 136315138;
    v28 = CStringPtr;
    _os_log_error_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_ERROR, "can't find %s in dictionaryRepresentation", buf, 0xCu);
    goto LABEL_17;
  }
  uint64_t v16 = 0;
LABEL_18:

  return v16;
}

void sub_247EC7574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t readField<unsigned char>(const __CFDictionary *a1, size_t a2, void *a3, const __CFString *a4, void *a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v9 = a5;
  Value = CFDictionaryGetValue(a1, a4);
  if (Value)
  {
LABEL_13:
    CFTypeID v17 = CFGetTypeID(Value);
    if (v17 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)Value) == a2)
    {
      BytePtr = CFDataGetBytePtr((CFDataRef)Value);
      memcpy(a3, BytePtr, a2);
      uint64_t v16 = 1;
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v16 = 0;
    goto LABEL_18;
  }
  v21 = a3;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v11 = v9;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v22 objects:v28 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v23;
    while (2)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v23 != v13) {
          objc_enumerationMutation(v11);
        }
        id v15 = *(id *)(*((void *)&v22 + 1) + 8 * i);
        Value = CFDictionaryGetValue(a1, v15);

        if (Value)
        {

          a3 = v21;
          goto LABEL_13;
        }
      }
      uint64_t v12 = [v11 countByEnumeratingWithState:&v22 objects:v28 count:16];
      if (v12) {
        continue;
      }
      break;
    }
  }

  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    CStringPtr = CFStringGetCStringPtr(a4, 0x8000100u);
    *(_DWORD *)buf = 136315138;
    v27 = CStringPtr;
    _os_log_error_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_ERROR, "can't find %s in dictionaryRepresentation", buf, 0xCu);
    goto LABEL_17;
  }
  uint64_t v16 = 0;
LABEL_18:

  return v16;
}

void sub_247EC77D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t readField<CGPoint>(const __CFDictionary *a1, uint64_t a2, void *a3, const __CFString *a4, void *a5)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v9 = a5;
  Value = CFDictionaryGetValue(a1, a4);
  if (Value)
  {
LABEL_13:
    CFTypeID v17 = CFGetTypeID(Value);
    if (v17 == CFDataGetTypeID())
    {
      CFIndex Length = CFDataGetLength((CFDataRef)Value);
      if (Length == 16 * a2)
      {
        BytePtr = CFDataGetBytePtr((CFDataRef)Value);
        memcpy(a3, BytePtr, Length);
        uint64_t v16 = 1;
        goto LABEL_18;
      }
    }
LABEL_17:
    uint64_t v16 = 0;
    goto LABEL_18;
  }
  long long v22 = a3;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v11 = v9;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v23 objects:v29 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v24;
    while (2)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v24 != v13) {
          objc_enumerationMutation(v11);
        }
        id v15 = *(id *)(*((void *)&v23 + 1) + 8 * i);
        Value = CFDictionaryGetValue(a1, v15);

        if (Value)
        {

          a3 = v22;
          goto LABEL_13;
        }
      }
      uint64_t v12 = [v11 countByEnumeratingWithState:&v23 objects:v29 count:16];
      if (v12) {
        continue;
      }
      break;
    }
  }

  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    CStringPtr = CFStringGetCStringPtr(a4, 0x8000100u);
    *(_DWORD *)buf = 136315138;
    v28 = CStringPtr;
    _os_log_error_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_ERROR, "can't find %s in dictionaryRepresentation", buf, 0xCu);
    goto LABEL_17;
  }
  uint64_t v16 = 0;
LABEL_18:

  return v16;
}

void sub_247EC7A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t readField<unsigned int>(CFDictionaryRef theDict, uint64_t a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  Value = CFDictionaryGetValue(theDict, @"Flags");
  if (!Value)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v7 = [0 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (!v7)
    {
LABEL_10:
      bzero(a3, 4 * a2);
      return 1;
    }
    uint64_t v8 = *(void *)v17;
LABEL_4:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v17 != v8) {
        objc_enumerationMutation(0);
      }
      id v10 = *(id *)(*((void *)&v16 + 1) + 8 * v9);
      Value = CFDictionaryGetValue(theDict, v10);

      if (Value) {
        break;
      }
      if (v7 == ++v9)
      {
        uint64_t v7 = [0 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v7) {
          goto LABEL_4;
        }
        goto LABEL_10;
      }
    }
  }
  CFTypeID v11 = CFGetTypeID(Value);
  if (v11 != CFDataGetTypeID()) {
    return 0;
  }
  CFIndex Length = CFDataGetLength((CFDataRef)Value);
  if (Length != 4 * a2) {
    return 0;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)Value);
  memcpy(a3, BytePtr, Length);
  return 1;
}

void sub_247EC7C0C(_Unwind_Exception *exception_object)
{
}

void sub_247EC7DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void appledepth::JasperPointCloud::applyPerformanceOverrides(appledepth::JasperPointCloud *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)(*((void *)this + 1) + *(void *)(*((void *)this + 1) + 96)) & 0x80000000) == 0)
  {
    uint64_t Instance = ADJasperPerformanceOverride::getInstance(this);
    v3 = (uint64_t *)Instance;
    if (*(char *)(Instance + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(Instance + 8), *(void *)(Instance + 16));
    }
    else
    {
      long long v4 = *(_OWORD *)(Instance + 8);
      __p.__r_.__value_.__r.__words[2] = *(void *)(Instance + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v6 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v6 >= 0) {
        p_p = &__p;
      }
      *(_DWORD *)buf = 136315138;
      long long v24 = p_p;
      _os_log_error_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Unknown device to emulate: %s", buf, 0xCu);
    }
    uint64_t v7 = *v3;
    if (*v3)
    {
      uint64_t v8 = (void *)*((void *)this + 1);
      if (v8)
      {
        uint64_t v9 = v8[1];
        if (v9)
        {
          id v10 = (unsigned __int8 *)v8 + v8[9];
          CFTypeID v11 = (unsigned __int8 *)v8 + v8[10];
          uint64_t v12 = v8[12];
          uint64_t v13 = *((void *)this + 1);
          do
          {
            unsigned int v15 = *v10++;
            unint64_t v14 = v15;
            unsigned int v17 = *v11++;
            uint64_t v16 = v17;
            if (v14 <= 7 && v16 <= 0x8F)
            {
              long long v18 = (float *)(v7 + 1152 * v14 + 8 * v16);
              float v19 = *(float *)(v13 + v8[6]);
              if (v19 < *v18 || v19 > v18[1]) {
                *(_DWORD *)(v13 + v8[3]) = 0;
              }
            }
            *(_DWORD *)(v13 + v12) |= 0x80000000;
            v13 += 4;
            --v9;
          }
          while (v9);
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

uint64_t ADJasperPerformanceOverride::getInstance(ADJasperPerformanceOverride *this)
{
  {
    operator new();
  }
  return ADJasperPerformanceOverride::getInstance(void)::singleton;
}

void sub_247EC8030(_Unwind_Exception *a1)
{
}

void sub_247EC810C(_Unwind_Exception *exception_object)
{
}

BOOL appledepth::JasperPointCloud::initWithPreparedStorage(appledepth::JasperPointCloud *this, void *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)this;
  *(void *)this = 0;
  if (v4) {
    MEMORY[0x24C570720](v4, 0x1000C8077774924);
  }
  *((void *)this + 1) = a2;
  uint64_t v5 = a2[1];
  *((void *)this + 2) = v5;
  int v6 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 != 2)
  {
    if (v6 == 1)
    {
      a2[13] = 0;
      *(_DWORD *)a2 = 2;
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 67109376;
      v8[1] = v6;
      __int16 v9 = 1024;
      int v10 = 2;
      _os_log_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Got a jspp format with unknown version (%d). Will assume its compatible with known version (%d)", (uint8_t *)v8, 0xEu);
      uint64_t v5 = *(void *)(*((void *)this + 1) + 8);
    }
  }
  return v5 != 0;
}

void appledepth::JasperPointCloud::initWithLength(appledepth::JasperPointCloud *this, uint64_t a2)
{
  v6[11] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)this;
  *(void *)this = 0;
  if (v4) {
    MEMORY[0x24C570720](v4, 0x1000C8077774924);
  }
  *((void *)this + 1) = 0;
  unint64_t v5 = 0;
  calculateOffsetsForLength(a2, v6, &v5);
  operator new[]();
}

uint64_t appledepth::JasperPointCloud::prepareStorage(uint64_t this, unint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[11] = *MEMORY[0x263EF8340];
  if (this)
  {
    uint64_t v7 = this;
    unint64_t v9 = 0;
    calculateOffsetsForLength(a3, v10, &v9);
    if (v9 + a4 <= a2)
    {
      *(_DWORD *)uint64_t v7 = 2;
      *(void *)(v7 + 8) = a3;
      v10[0] = 0;
      calculateOffsetsForLength(a3, (unint64_t *)(v7 + 16), v10);
      unint64_t v8 = v10[0];
      *(void *)(v7 + 104) = a4;
      *(void *)(v7 + 112) = v8;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return this;
}

void calculateOffsetsForLength(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (InitAttributes(void)::once != -1) {
    dispatch_once(&InitAttributes(void)::once, &__block_literal_global_1195);
  }
  uint64_t v6 = 0;
  uint64_t v7 = (void *)(ATTRIBUTES_INFO + 8);
  unint64_t v8 = 120;
  do
  {
    unint64_t v9 = v8 / *v7 * *v7;
    if (v8 != v9) {
      unint64_t v8 = *v7 + v9;
    }
    a2[v6] = v8;
    v8 += *(v7 - 1) * a1;
    ++v6;
    v7 += 2;
  }
  while (v6 != 11);
  *a3 = v8;
}

void sub_247EC85C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EC8670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EC88C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_247EC8E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_247ECA014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, long long a15, uint64_t a16, uint64_t a17)
{
  operator delete(v17);
  if ((void)a15) {
    operator delete((void *)a15);
  }

  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>,std::__map_value_compare<std::string,std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>>>::__find_equal<std::string>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        unint64_t v8 = v4 + 4;
        if (!std::less<std::string>::operator()[abi:ne180100](a3, v4 + 4)) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v8, a3)) {
        break;
      }
      unint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL std::less<std::string>::operator()[abi:ne180100](void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      int v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      int v3 = (uint64_t *)v2[2];
      size_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            unint64_t v9 = (uint64_t **)v2[1];
            int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              int v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *unint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            int v3 = v9[2];
            int v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        int v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *size_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

_OWORD *std::__tree<std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>,std::__map_value_compare<std::string,std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, _OWORD **a3)
{
  size_t v5 = (void **)std::__tree<std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>,std::__map_value_compare<std::string,std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  int v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    int v6 = operator new(0x40uLL);
    uint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *uint64_t v8 = 0;
    v8[1] = 0;
    _DWORD v8[2] = 0;
    *((void *)v6 + 7) = 0;
    std::__tree<std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>,std::__map_value_compare<std::string,std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Node **>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void *std::__hash_table<std::__hash_value_type<ADLayout,CGSize>,std::__unordered_map_hasher<ADLayout,std::__hash_value_type<ADLayout,CGSize>,std::hash<ADLayout>,std::equal_to<ADLayout>,true>,std::__unordered_map_equal<ADLayout,std::__hash_value_type<ADLayout,CGSize>,std::equal_to<ADLayout>,std::hash<ADLayout>,true>,std::allocator<std::__hash_value_type<ADLayout,CGSize>>>::find<ADLayout>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  size_t v5 = *(void **)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint64_t result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(void *)&v2) {
            v7 %= *(void *)&v2;
          }
        }
        else
        {
          v7 &= *(void *)&v2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void sub_247ECAB28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247ECAE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  objc_sync_exit(v13);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)&a12);
  _Unwind_Resume(a1);
}

void sub_247ECAFA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247ECB078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247ECB124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247ECB398(_Unwind_Exception *a1)
{
  objc_sync_exit(v4);
  _Unwind_Resume(a1);
}

void sub_247ECB4C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247ECB708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247ECB770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247ECB8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247ECBAA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247ECBDF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

objc_class *allocateDistortionModelWithName(NSString *a1)
{
  v20[5] = *MEMORY[0x263EF8340];
  uint64_t v1 = a1;
  {
    v19[0] = @"None";
    uint64_t v9 = (objc_class *)objc_opt_class();
    int v10 = NSStringFromClass(v9);
    v20[0] = v10;
    v19[1] = @"XTheta";
    uint64_t v11 = (objc_class *)objc_opt_class();
    uint64_t v12 = NSStringFromClass(v11);
    v20[1] = v12;
    v19[2] = @"RadiiLookup";
    uint64_t v13 = (objc_class *)objc_opt_class();
    unint64_t v14 = NSStringFromClass(v13);
    v20[2] = v14;
    v19[3] = @"MagnificationForRadius";
    unsigned int v15 = (objc_class *)objc_opt_class();
    uint64_t v16 = NSStringFromClass(v15);
    v20[3] = v16;
    v19[4] = @"Coefficients";
    unsigned int v17 = (objc_class *)objc_opt_class();
    long long v18 = NSStringFromClass(v17);
    v20[4] = v18;
    allocateDistortionModelWithName(NSString *)::legacyDistortionNamesMap = [NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:5];
  }
  if (!v1)
  {
    int8x8_t v2 = (objc_class *)objc_opt_class();
    NSStringFromClass(v2);
    uint64_t v1 = (NSString *)objc_claimAutoreleasedReturnValue();
  }
  uint8x8_t v3 = [(id)allocateDistortionModelWithName(NSString *)::legacyDistortionNamesMap allKeys];
  int v4 = [v3 containsObject:v1];

  if (v4)
  {
    uint64_t v5 = [(id)allocateDistortionModelWithName(NSString *)::legacyDistortionNamesMap objectForKeyedSubscript:v1];

    uint64_t v1 = (NSString *)v5;
  }
  int v6 = NSClassFromString(v1);
  unint64_t v7 = v6;
  if (v6)
  {
    if (class_conformsToProtocol(v6, (Protocol *)&unk_26FC2CF48)) {
      unint64_t v7 = (objc_class *)objc_alloc((Class)objc_opt_class());
    }
    else {
      unint64_t v7 = 0;
    }
  }

  return v7;
}

void sub_247ECC0D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247ECC2CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247ECCDE0(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x247ECCB9CLL);
  }
  _Unwind_Resume(exc_buf);
}

void InstrumentsTraceGuard::~InstrumentsTraceGuard(InstrumentsTraceGuard *this)
{
}

void sub_247ECD264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247ECD63C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247ECDB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_247ECDF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_247ECE5A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247ECE71C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFDictionary *appledepth::JasperPointCloud::createDictionaryRepresentation(appledepth::JasperPointCloud *this)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  int valuePtr = 7;
  CFNumberRef v4 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, @"Version", v4);
  CFRelease(v4);
  int v36 = *(void *)(*((void *)this + 1) + 8);
  CFNumberRef v5 = CFNumberCreate(v2, kCFNumberIntType, &v36);
  CFDictionaryAddValue(Mutable, @"Length", v5);
  CFRelease(v5);
  uint64_t v6 = *((void *)this + 1);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  addField<CGPoint>(Mutable, v7, (UInt8 *)(v6 + *(void *)(v6 + 32)), @"CameraPixels");
  uint64_t v8 = *((void *)this + 1);
  if (v8) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  addField<CGPoint>(Mutable, v9, (UInt8 *)(v8 + *(void *)(v8 + 40)), @"UndistortedCameraPixels");
  uint64_t v10 = *((void *)this + 1);
  if (v10) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v11 = 0;
  }
  addField<float>(Mutable, v11, (UInt8 *)(v10 + *(void *)(v10 + 48)), @"EuclideanDistances");
  uint64_t v12 = *((void *)this + 1);
  if (v12) {
    CFIndex v13 = 16 * *(void *)(v12 + 8);
  }
  else {
    CFIndex v13 = 0;
  }
  CFDataRef v14 = CFDataCreate(v2, (const UInt8 *)(v12 + *(void *)(v12 + 16)), v13);
  CFDictionaryAddValue(Mutable, @"Points", v14);
  CFRelease(v14);
  uint64_t v15 = *((void *)this + 1);
  if (v15) {
    uint64_t v16 = *(void *)(v15 + 8);
  }
  else {
    uint64_t v16 = 0;
  }
  addField<float>(Mutable, v16, (UInt8 *)(v15 + *(void *)(v15 + 56)), @"Intensities");
  uint64_t v17 = *((void *)this + 1);
  if (v17) {
    uint64_t v18 = *(void *)(v17 + 8);
  }
  else {
    uint64_t v18 = 0;
  }
  addField<float>(Mutable, v18, (UInt8 *)(v17 + *(void *)(v17 + 24)), @"Confidences");
  uint64_t v19 = *((void *)this + 1);
  if (v19) {
    uint64_t v20 = *(void *)(v19 + 8);
  }
  else {
    uint64_t v20 = 0;
  }
  addField<float>(Mutable, v20, (UInt8 *)(v19 + *(void *)(v19 + 64)), @"SignalToNoiseRatios");
  uint64_t v21 = *((void *)this + 1);
  if (v21) {
    CFIndex v22 = *(void *)(v21 + 8);
  }
  else {
    CFIndex v22 = 0;
  }
  addField<unsigned char>(Mutable, v22, (UInt8 *)(v21 + *(void *)(v21 + 72)), @"BankIds");
  uint64_t v23 = *((void *)this + 1);
  if (v23) {
    CFIndex v24 = *(void *)(v23 + 8);
  }
  else {
    CFIndex v24 = 0;
  }
  addField<unsigned char>(Mutable, v24, (UInt8 *)(v23 + *(void *)(v23 + 80)), @"SpotIds");
  uint64_t v25 = *((void *)this + 1);
  if (v25) {
    CFIndex v26 = *(void *)(v25 + 8);
  }
  else {
    CFIndex v26 = 0;
  }
  addField<unsigned char>(Mutable, v26, (UInt8 *)(v25 + *(void *)(v25 + 88)), @"EchoIds");
  uint64_t v27 = *((void *)this + 1);
  if (v27) {
    CFIndex v28 = 4 * *(void *)(v27 + 8);
  }
  else {
    CFIndex v28 = 0;
  }
  CFDataRef v29 = CFDataCreate(v2, (const UInt8 *)(v27 + *(void *)(v27 + 96)), v28);
  CFDictionaryAddValue(Mutable, @"Flags", v29);
  CFRelease(v29);
  uint64_t v30 = *((void *)this + 1);
  CFIndex v31 = *(void *)(v30 + 104);
  if (v31)
  {
    v32 = (UInt8 *)(v30 + *(void *)(v30 + 112));
    v33 = Mutable;
  }
  else
  {
    v33 = Mutable;
    v32 = 0;
  }
  addField<unsigned char>(v33, v31, v32, @"AdditionalData");
  return Mutable;
}

void addField<unsigned char>(__CFDictionary *a1, CFIndex length, UInt8 *bytes, const void *a4)
{
  CFDataRef v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, length);
  CFDictionaryAddValue(a1, a4, v6);

  CFRelease(v6);
}

void addField<float>(__CFDictionary *a1, uint64_t a2, UInt8 *bytes, const void *a4)
{
  CFDataRef v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, 4 * a2);
  CFDictionaryAddValue(a1, a4, v6);

  CFRelease(v6);
}

void addField<CGPoint>(__CFDictionary *a1, uint64_t a2, UInt8 *bytes, const void *a4)
{
  CFDataRef v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, 16 * a2);
  CFDictionaryAddValue(a1, a4, v6);

  CFRelease(v6);
}

void sub_247ECED0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247ECEEB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247ECEF74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247ECF1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>,std::__map_value_compare<std::string,std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  CFNumberRef v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t PixelBufferUtils::componentsPerPixelForPixelFormat(PixelBufferUtils *this, uint64_t a2)
{
  unint64_t v4 = 4;
  if ((int)this > 1380401728)
  {
    if ((int)this > 1717856626)
    {
      if ((int)this <= 1751411058)
      {
        if (this == 1717856627) {
          return 1;
        }
        int v5 = 1751410032;
      }
      else
      {
        if (this == 1751411059 || this == 1919365990) {
          return 1;
        }
        int v5 = 1932996149;
      }
      goto LABEL_31;
    }
    if ((int)this > 1380411456)
    {
      if (this == 1380411457) {
        return v4;
      }
      if (this == 1647392359) {
        return 1;
      }
      int v5 = 1717855600;
      goto LABEL_31;
    }
    if (this == 1380401729) {
      return v4;
    }
    int v6 = 1380410945;
LABEL_27:
    if (this == v6) {
      return v4;
    }
    goto LABEL_38;
  }
  if ((int)this > 875704437)
  {
    if ((int)this > 1111970368)
    {
      if (this == 1111970369) {
        return v4;
      }
      if (this == 1278226488) {
        return 1;
      }
      int v5 = 1278226536;
      goto LABEL_31;
    }
    if (this == 875704438) {
      goto LABEL_34;
    }
    int v6 = 1094862674;
    goto LABEL_27;
  }
  if ((int)this > 825437746)
  {
    if (this != 825437747)
    {
      if (this == 843264104) {
        return 2;
      }
      if (this != 875704422) {
        goto LABEL_38;
      }
LABEL_34:
      if (a2) {
        return 2;
      }
      else {
        return 1;
      }
    }
    return 1;
  }
  if (this == 32) {
    return v4;
  }
  int v5 = 825306677;
LABEL_31:
  if (this == v5) {
    return 1;
  }
LABEL_38:
  uint64_t v8 = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  uint64_t v9 = [v8 objectForKeyedSubscript:@"BitsPerComponent"];
  if (v9)
  {
    unint64_t v10 = PixelBufferUtils::pixelSizeForPixelFormat(this, a2);
    [v9 floatValue];
    unint64_t v4 = (unint64_t)(float)((float)v10 / ceilf(v11 * 0.125));
  }
  else
  {

    PixelBufferUtils::pixelFormatAsString(this, (char *)__p);
    if (v14 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "componentsPerPixelForPixelFormat", 508, this, v12);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return v4;
}

void sub_247ECF584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PixelBufferUtils::planeCountForPixelFormat(PixelBufferUtils *this)
{
  if ((int)this > 1380401728)
  {
    if ((int)this > 1717856626)
    {
      if ((int)this <= 1751411058)
      {
        if (this == 1717856627) {
          return 0;
        }
        int v2 = 1751410032;
      }
      else
      {
        if (this == 1751411059) {
          return 0;
        }
        if (this == 1919365990) {
          return 3;
        }
        int v2 = 1932996149;
      }
    }
    else if ((int)this <= 1380411456)
    {
      if (this == 1380401729) {
        return 0;
      }
      int v2 = 1380410945;
    }
    else
    {
      if (this == 1380411457 || this == 1647392359) {
        return 0;
      }
      int v2 = 1717855600;
    }
LABEL_29:
    if (this != v2) {
      goto LABEL_34;
    }
    return 0;
  }
  if ((int)this > 875704437)
  {
    if ((int)this <= 1111970368)
    {
      if (this == 875704438) {
        return 2;
      }
      int v2 = 1094862674;
    }
    else
    {
      if (this == 1111970369 || this == 1278226488) {
        return 0;
      }
      int v2 = 1278226536;
    }
    goto LABEL_29;
  }
  if ((int)this <= 825437746)
  {
    if (this == 32) {
      return 0;
    }
    int v2 = 825306677;
    goto LABEL_29;
  }
  if (this == 825437747 || this == 843264104) {
    return 0;
  }
  if (this == 875704422) {
    return 2;
  }
LABEL_34:
  int v5 = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (!v5)
  {
    PixelBufferUtils::pixelFormatAsString(this, (char *)__p);
    if (v11 >= 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "planeCountForPixelFormat", 554, this, v9);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  int v6 = v5;
  uint64_t v7 = [v5 objectForKeyedSubscript:*MEMORY[0x263F042C8]];
  uint64_t v8 = v7;
  if (v7) {
    uint64_t v3 = [v7 count];
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_247ECF838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CVPixelBufferRef PixelBufferUtils::createPixelBuffer(size_t width, size_t height, OSType pixelFormatType, int a4)
{
  CFDictionaryRef BufferAttributes = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (a4) {
    CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  }
  if (CVPixelBufferCreate(v8, width, height, pixelFormatType, BufferAttributes, &pixelBufferOut)) {
    return 0;
  }
  else {
    return pixelBufferOut;
  }
}

BOOL getDistortionCenterFromDictionary(NSDictionary *a1, CGPoint *a2)
{
  CFDictionaryRef v3 = [(NSDictionary *)a1 objectForKeyedSubscript:@"lensDistortionCenter"];
  CFDictionaryRef v4 = v3;
  if (v3) {
    BOOL v5 = CGPointMakeWithDictionaryRepresentation(v3, a2);
  }
  else {
    BOOL v5 = 0;
  }

  return v5;
}

void sub_247ECF940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t getBufferAttributes(void)
{
  v3[2] = *MEMORY[0x263EF8340];
  {
    uint64_t v1 = *MEMORY[0x263F04078];
    v2[0] = *MEMORY[0x263F04130];
    v2[1] = v1;
    v3[0] = MEMORY[0x263EFFA78];
    v3[1] = &unk_26FC28730;
    getBufferAttributes(void)::bufAttr = [NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
  }
  return getBufferAttributes(void)::bufAttr;
}

void sub_247ECFA28(_Unwind_Exception *a1)
{
}

void sub_247ECFB4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247ECFC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  unint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)ADJasperPointCloud;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_247ED05C4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    JUMPOUT(0x247ED00E0);
  }
  _Unwind_Resume(exception_object);
}

void sub_247ED0984(_Unwind_Exception *exception_object)
{
}

void sub_247ED0E2C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x247ED0BB8);
  }
  _Unwind_Resume(exception_object);
}

void sub_247ED0EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t INSTRUMENTS_END()
{
  return kdebug_trace();
}

uint64_t INSTRUMENTS_START()
{
  return kdebug_trace();
}

float ADReprojectionOptimizations::backProjectUndistortedPixels(unint64_t a1, uint64_t a2, float32x4_t *a3, float *a4, float a5, double a6, double a7)
{
  *(double *)&uint64_t v8 = *(float *)&a7;
  *(double *)&uint64_t v9 = *((float *)&a7 + 1);
  double v10 = 1.0 / a5;
  double v11 = 1.0 / *((float *)&a6 + 1);
  unint64_t v12 = 0;
  if ((a1 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    float64x2_t v13 = (float64x2_t)vdupq_lane_s64(v8, 0);
    float64x2_t v14 = (float64x2_t)vdupq_lane_s64(v9, 0);
    uint64_t v15 = (const double *)(a2 + 32);
    uint64_t v16 = a3;
    uint64_t v17 = a4;
    do
    {
      float32x4_t v18 = *v16++;
      float32x4_t v19 = v18;
      float64x2_t v20 = vcvtq_f64_f32(*(float32x2_t *)v18.f32);
      float64x2_t v21 = vcvt_hight_f64_f32(v18);
      CFIndex v22 = v15 - 4;
      float64x2x2_t v35 = vld2q_f64(v22);
      float64x2x2_t v36 = vld2q_f64(v15);
      float32x4_t v23 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vsubq_f64(v35.val[0], v13), vmulq_n_f64(v20, v10))), vmulq_f64(vmulq_n_f64(v21, v10), vsubq_f64(v36.val[0], v13)));
      float32x4_t v24 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vsubq_f64(v35.val[1], v14), vmulq_n_f64(v20, v11))), vmulq_f64(vmulq_n_f64(v21, v11), vsubq_f64(v36.val[1], v14)));
      vst4q_f32(v17, *(float32x4x4_t *)(&v7 - 3));
      v17 += 16;
      v12 += 4;
      v15 += 8;
    }
    while (v12 < (a1 & 0xFFFFFFFFFFFFFFFCLL));
  }
  uint64_t v25 = a1 - v12;
  if (a1 > v12)
  {
    CFIndex v26 = (double *)(a2 + 16 * v12 + 8);
    uint64_t v27 = &a4[4 * v12];
    f32 = a3[v12 / 4].f32;
    do
    {
      float v29 = v10 * ((*(v26 - 1) - *(double *)&v8) * *f32);
      long long v30 = *(_OWORD *)v27;
      float *v27 = v29;
      double v31 = *v26;
      v26 += 2;
      float v32 = *f32;
      v27[2] = *((float *)&v30 + 2);
      *(float *)&long long v30 = v29;
      float v33 = v11 * ((v31 - *(double *)&v9) * v32);
      *((float *)&v30 + 1) = v33;
      *(void *)uint64_t v27 = v30;
      *(float *)&double v31 = *f32++;
      v27[2] = *(float *)&v31;
      *(void *)uint64_t v27 = v30;
      v27 += 4;
      --v25;
    }
    while (v25);
  }
  return *(float *)&v10;
}

unint64_t ADReprojectionOptimizations::projectPoints(unint64_t result, const float *a2, float64x2_t *a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  unint64_t v6 = 0;
  unint64_t v7 = result & 0xFFFFFFFFFFFFFFF8;
  if ((result & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    float32x4_t v8 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0);
    float32x4_t v9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 1);
    float32x4_t v10 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0);
    float32x4_t v11 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 1);
    unint64_t v12 = a2;
    int8x16_t v13 = (int8x16_t)vdupq_n_s32(0x7F800000u);
    do
    {
      float64x2_t v14 = v12;
      float32x4x4_t v28 = vld4q_f32(v14);
      v14 += 16;
      float32x4_t v15 = (float32x4_t)vbslq_s8((int8x16_t)vclezq_f32(v28.val[2]), v13, (int8x16_t)v28.val[2]);
      float32x4x4_t v29 = vld4q_f32(v14);
      float32x4_t v16 = (float32x4_t)vbslq_s8((int8x16_t)vclezq_f32(v29.val[2]), v13, (int8x16_t)v29.val[2]);
      float32x4_t v17 = vmlaq_f32(v10, vdivq_f32(v8, v15), v28.val[0]);
      float32x4_t v18 = vmlaq_f32(v11, vdivq_f32(v9, v15), v28.val[1]);
      v28.val[0] = vmlaq_f32(v10, vdivq_f32(v8, v16), v29.val[0]);
      v28.val[1] = vmlaq_f32(v11, vdivq_f32(v9, v16), v29.val[1]);
      v28.val[2] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v17.f32);
      v28.val[3] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v18.f32);
      float32x4_t v19 = (double *)a3;
      float64x2_t v20 = vcvt_hight_f64_f32(v17);
      v29.val[0] = (float32x4_t)vcvt_hight_f64_f32(v18);
      vst2q_f64(v19, *(float64x2x2_t *)v28.val[2].f32);
      v19 += 4;
      vst2q_f64(v19, *(float64x2x2_t *)v29.val[0].f32);
      v28.val[2] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v28.val[0].f32);
      v28.val[3] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v28.val[1].f32);
      f64 = a3[4].f64;
      float64x2_t v22 = vcvt_hight_f64_f32(v28.val[0]);
      vst2q_f64(f64, *(float64x2x2_t *)v28.val[2].f32);
      v29.val[0] = (float32x4_t)vcvt_hight_f64_f32(v28.val[1]);
      float32x4_t v23 = a3[6].f64;
      vst2q_f64(v23, *(float64x2x2_t *)v29.val[0].f32);
      v6 += 8;
      a3 += 8;
      v12 += 32;
    }
    while (v6 < v7);
    unint64_t v6 = ((v7 - 1) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  uint64_t v24 = result - v6;
  if (result > v6)
  {
    uint64_t v25 = (float32x2_t *)&a2[4 * v6];
    do
    {
      int32x4_t v26 = (int32x4_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a4, COERCE_FLOAT(*(_OWORD *)v25->f32)), a5, *v25, 1), a6, *(float32x4_t *)v25->f32, 2);
      float64x2_t v27 = 0uLL;
      if (*(float *)&v26.i32[2] > 0.0) {
        float64x2_t v27 = vcvtq_f64_f32(vdiv_f32(*(float32x2_t *)v26.i8, (float32x2_t)vdup_laneq_s32(v26, 2)));
      }
      *a3++ = v27;
      v25 += 2;
      --v24;
    }
    while (v24);
  }
  return result;
}

uint64_t ADReprojectionOptimizations::reprojectUndistortedDepthMap(CVPixelBufferRef pixelBuffer, CVPixelBufferRef a2, simd_float3x3 a3, simd_float4x3 a4, __CVBuffer *a5, simd_float3x3 a6)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (!pixelBuffer || !a5)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      double v31 = &_os_log_internal;
      float v32 = "illegal nil buffers in reprojection";
LABEL_16:
      _os_log_error_impl(&dword_247EC4000, v31, OS_LOG_TYPE_ERROR, v32, buf, 2u);
    }
    return -1;
  }
  double v35 = *(double *)a3.columns[0].i64;
  double v36 = *(double *)a3.columns[1].i64;
  double v37 = *(double *)a3.columns[2].i64;
  if (a2 && CVPixelBufferGetPixelFormatType(a2) != 843264310)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      double v31 = &_os_log_internal;
      float v32 = "illegal warp map pixel format buffers in reprojection";
      goto LABEL_16;
    }
    return -1;
  }
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if (PixelFormatType > 1717855599)
  {
    long long v21 = (__int128)a6.columns[1];
    long long v20 = (__int128)a6.columns[2];
    long long v22 = (__int128)a6.columns[0];
    if (PixelFormatType <= 1751410031)
    {
      int32x4_t v23 = (int32x4_t)a4.columns[3];
      float32x4_t v24 = (float32x4_t)a4.columns[1];
      int32x4_t v25 = (int32x4_t)a4.columns[2];
      double v26 = v37;
      float32x4_t v27 = (float32x4_t)a4.columns[0];
      double v28 = v35;
      double v29 = v36;
      if (PixelFormatType != 1717855600)
      {
        if (PixelFormatType == 1717856627)
        {
          return reprojectUndistortedDepthMapWithInputImmediates<float,1717856627u>(pixelBuffer, a2, a5, v15, v16, v17, v18, v19, v35, v36, v37, (float32x4_t)a4.columns[0], (float32x4_t)a4.columns[1], (int32x4_t)a4.columns[2], (int32x4_t)a4.columns[3], *(_OWORD *)a6.columns, *(_OWORD *)&a6.columns[1], *(_OWORD *)&a6.columns[2]);
        }
        goto LABEL_36;
      }
      goto LABEL_27;
    }
    int32x4_t v23 = (int32x4_t)a4.columns[3];
    float32x4_t v24 = (float32x4_t)a4.columns[1];
    int32x4_t v25 = (int32x4_t)a4.columns[2];
    double v26 = v37;
    float32x4_t v27 = (float32x4_t)a4.columns[0];
    double v28 = v35;
    double v29 = v36;
    if (PixelFormatType != 1751410032)
    {
      if (PixelFormatType == 1751411059)
      {
        return reprojectUndistortedDepthMapWithInputImmediates<half,1751411059u>(pixelBuffer, a2, a5, v15, v16, v17, v18, v19, v35, v36, v37, (float32x4_t)a4.columns[0], (float32x4_t)a4.columns[1], (int32x4_t)a4.columns[2], (int32x4_t)a4.columns[3], *(_OWORD *)a6.columns, *(_OWORD *)&a6.columns[1], *(_OWORD *)&a6.columns[2]);
      }
LABEL_36:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        float v33 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
        PixelBufferUtils::pixelFormatAsString(v33, (char *)buf);
        v34 = v40 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v41 = 136315138;
        v42 = v34;
        _os_log_error_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_ERROR, "illegal input pixel format in reprojection: %s", v41, 0xCu);
        if (v40 < 0) {
          operator delete(*(void **)buf);
        }
      }
      return -22950;
    }
    goto LABEL_30;
  }
  int32x4_t v23 = (int32x4_t)a4.columns[3];
  float32x4_t v24 = (float32x4_t)a4.columns[1];
  int32x4_t v25 = (int32x4_t)a4.columns[2];
  double v26 = v37;
  float32x4_t v27 = (float32x4_t)a4.columns[0];
  double v28 = v35;
  double v29 = v36;
  long long v21 = (__int128)a6.columns[1];
  long long v20 = (__int128)a6.columns[2];
  long long v22 = (__int128)a6.columns[0];
  if (PixelFormatType != 825437747)
  {
    if (PixelFormatType == 1278226534)
    {
LABEL_27:
      return reprojectUndistortedDepthMapWithInputImmediates<float,1717855600u>(pixelBuffer, a2, a5, v15, v16, v17, v18, v19, v28, v29, v26, v27, v24, v25, v23, v22, v21, v20);
    }
    if (PixelFormatType != 1278226536) {
      goto LABEL_36;
    }
LABEL_30:
    return reprojectUndistortedDepthMapWithInputImmediates<half,1751410032u>(pixelBuffer, a2, a5, v15, v16, v17, v18, v19, v28, v29, v26, v27, v24, v25, v23, v22, v21, v20);
  }

  return reprojectUndistortedDepthMapWithInputImmediates<unsigned short,825437747u>(pixelBuffer, a2, a5, v15, v16, v17, v18, v19, v35, v36, v37, (float32x4_t)a4.columns[0], (float32x4_t)a4.columns[1], (int32x4_t)a4.columns[2], (int32x4_t)a4.columns[3], *(_OWORD *)a6.columns, *(_OWORD *)&a6.columns[1], *(_OWORD *)&a6.columns[2]);
}

uint64_t reprojectUndistortedDepthMapWithInputImmediates<float,1717855600u>(__CVBuffer *a1, __CVBuffer *a2, CVPixelBufferRef pixelBuffer, int a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, int32x4_t a14, int32x4_t a15, long long a16, long long a17, long long a18)
{
  __int32 v1476 = SHIDWORD(a10);
  uint64_t v1500 = *MEMORY[0x263EF8340];
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  v1302 = a2;
  if (!a2)
  {
    if (PixelFormatType <= 1717855599)
    {
      if (PixelFormatType == 825437747)
      {
        size_t Height = CVPixelBufferGetHeight(a1);
        size_t Width = CVPixelBufferGetWidth(a1);
        size_t v1103 = CVPixelBufferGetHeight(pixelBuffer);
        unsigned int v1104 = CVPixelBufferGetWidth(pixelBuffer);
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
        CVPixelBufferLockBaseAddress(a1, 1uLL);
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        memset(&v1498, 0, sizeof(v1498));
        v1106 = (CGRect *)MEMORY[0x263F001A8];
        PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
        memset(&buf, 0, sizeof(buf));
        PixelBufferUtils::asVImageBuffer(pixelBuffer, *v1106, &buf);
        size_t v1110 = BytesPerRow >> 1;
        data = (__int16 *)buf.data;
        if (v1110 * v1103) {
          memset_pattern16(buf.data, &unk_247F24690, 2 * v1110 * v1103);
        }
        vImagePixelCount v1244 = buf.height;
        float32x4_t v1113 = (float32x4_t)a14;
        float32x4_t v1112 = (float32x4_t)a15;
        float32x4_t v1115 = a12;
        float32x4_t v1114 = a13;
        float v1117 = *(float *)&a18;
        float v1116 = *(float *)&a11;
        float v1118 = *(float *)&a16;
        if (Height)
        {
          unint64_t v1119 = 0;
          float v1120 = 1.0 / *(float *)&a9;
          float v1121 = 1.0 / *(float *)&v1476;
          unint64_t v1122 = Width & 0xFFFFFFFFFFFFFFF0;
          float v1123 = 0.5;
          *(float *)v1107.i32 = 0.5 - *((float *)&a11 + 1);
          float32x4_t v1124 = (float32x4_t)vdupq_lane_s32(v1107, 0);
          *(float *)v1107.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
          *(float *)v1108.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
          *(float *)v1109.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
          float v1125 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
          float v1126 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
          float32x4_t v1261 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
          float32x4_t v1263 = (float32x4_t)vdupq_lane_s32(v1109, 0);
          float v1127 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
          float32x4_t v1258 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
          float32x4_t v1259 = (float32x4_t)vdupq_lane_s32(v1108, 0);
          v1301 = (char *)v1498.data;
          size_t rowBytes = v1498.rowBytes;
          float32x4_t v1255 = (float32x4_t)vdupq_laneq_s32(a14, 2);
          float32x4_t v1256 = (float32x4_t)vdupq_lane_s32(v1107, 0);
          float32x4_t v1253 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
          float32x4_t v1128 = (float32x4_t)vdupq_laneq_s32(a15, 2);
          int32x4_t v1129 = vdupq_n_s32(v1110);
          int32x4_t v1130 = vdupq_n_s32(LODWORD(buf.height) * (int)v1110 - 2);
          int v1131 = (__int16)v1104;
          int v1132 = (__int16)v1103;
          unint64_t v1247 = (((Width & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          size_t v1282 = Width;
          size_t v1272 = v1110;
          int v1251 = (__int16)v1104;
          int v1249 = (__int16)v1103;
          float32x4_t v1419 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
          float32x4_t v1430 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
          float32x4_t v1399 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
          int32x4_t v1409 = vdupq_n_s32(v1104);
          float32x4_t v1380 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
          float32x4_t v1389 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
          int32x4_t v1362 = vdupq_n_s32(v1103);
          float32x4_t v1371 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
          do
          {
            v1133 = (float32x4_t *)&v1301[v1119 * rowBytes];
            if (v1122)
            {
              uint64_t v1134 = 0;
              float32x4_t v1441 = vmlaq_f32(v1261, v1263, v1124);
              float32x4_t v1135 = vmlaq_f32(v1258, v1259, v1124);
              float32x4_t v1326 = v1124;
              float32x4_t v1136 = vmlaq_f32(v1255, v1256, v1124);
              float32x4_t v1137 = v1253;
              v1138.i64[0] = 0x4100000041000000;
              v1138.i64[1] = 0x4100000041000000;
              do
              {
                uint64_t v1496 = v1134;
                float32x4_t v1139 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                float32x4_t v1140 = vmulq_f32(*v1133, v1139);
                float32x4_t v1141 = vmulq_f32(v1133[1], v1139);
                __asm { FMOV            V0.4S, #4.0 }
                float32x4_t v1143 = vaddq_f32(v1137, _Q0);
                float32x4_t v1144 = vaddq_f32(v1137, v1138);
                float32x4_t v1145 = vmulq_f32(v1133[2], v1139);
                __asm { FMOV            V0.4S, #12.0 }
                float32x4_t v1147 = vaddq_f32(v1137, _Q0);
                float32x4_t v1148 = vmulq_f32(v1133[3], v1139);
                float32x4_t v1149 = vmlaq_f32(v1128, vmlaq_n_f32(v1136, v1137, v1125), v1140);
                float32x4_t v1150 = vmlaq_f32(v1128, vmlaq_n_f32(v1136, v1143, v1125), v1141);
                float32x4_t v1151 = vmlaq_f32(v1128, vmlaq_n_f32(v1136, v1144, v1125), v1145);
                float32x4_t v1152 = vmlaq_f32(v1128, vmlaq_n_f32(v1136, v1147, v1125), v1148);
                float32x4_t v1153 = vmlaq_f32(v1380, vmlaq_n_f32(v1441, v1137, v1127), v1140);
                float32x4_t v1154 = vmlaq_f32(v1371, vmlaq_n_f32(v1135, v1137, v1126), v1140);
                int8x16_t v1155 = vandq_s8((int8x16_t)vcgezq_f32(v1149), (int8x16_t)vcgtzq_f32(v1140));
                float32x4_t v1156 = vmlaq_f32(v1380, vmlaq_n_f32(v1441, v1147, v1127), v1148);
                int8x16_t v1157 = vandq_s8((int8x16_t)vcgezq_f32(v1152), (int8x16_t)vcgtzq_f32(v1148));
                int32x4_t v1158 = vcvtmq_s32_f32(vmlaq_f32(v1419, vdivq_f32(v1389, v1149), v1153));
                int32x4_t v1159 = vcvtmq_s32_f32(vmlaq_f32(v1399, vdivq_f32(v1430, v1149), v1154));
                int32x4_t v1160 = vcvtmq_s32_f32(vmlaq_f32(v1419, vdivq_f32(v1389, v1150), vmlaq_f32(v1380, vmlaq_n_f32(v1441, v1143, v1127), v1141)));
                int32x4_t v1161 = vcvtmq_s32_f32(vmlaq_f32(v1399, vdivq_f32(v1430, v1150), vmlaq_f32(v1371, vmlaq_n_f32(v1135, v1143, v1126), v1141)));
                float32x4_t v1162 = vmlaq_f32(v1399, vdivq_f32(v1430, v1152), vmlaq_f32(v1371, vmlaq_n_f32(v1135, v1147, v1126), v1148));
                v1163.i64[0] = -1;
                v1163.i64[1] = -1;
                int32x4_t v1164 = vcvtmq_s32_f32(vmlaq_f32(v1419, vdivq_f32(v1389, v1151), vmlaq_f32(v1380, vmlaq_n_f32(v1441, v1144, v1127), v1145)));
                int32x4_t v1165 = vcvtmq_s32_f32(vmlaq_f32(v1399, vdivq_f32(v1430, v1151), vmlaq_f32(v1371, vmlaq_n_f32(v1135, v1144, v1126), v1145)));
                int32x4_t v1166 = vcvtmq_s32_f32(vmlaq_f32(v1419, vdivq_f32(v1389, v1152), v1156));
                int32x4_t v1167 = vcvtmq_s32_f32(v1162);
                int8x16_t v1168 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1362, v1159), (int8x16_t)vcgtq_s32(v1409, v1158)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1159, (int8x16_t)v1158), v1163)), v1155);
                v1138.i64[0] = 0x4100000041000000;
                v1138.i64[1] = 0x4100000041000000;
                int8x16_t v1169 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1362, v1167), (int8x16_t)vcgtq_s32(v1409, v1166)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1167, (int8x16_t)v1166), v1163)), v1157);
                int8x16_t v1170 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
                float32x4_t v1171 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1362, v1165), (int8x16_t)vcgtq_s32(v1409, v1164)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1165, (int8x16_t)v1164), v1163)), vandq_s8((int8x16_t)vcgezq_f32(v1151), (int8x16_t)vcgtzq_f32(v1145))), (int8x16_t)vmulq_f32(v1151, v1138), v1170);
                int32x4_t v1172 = vmlaq_s32(v1164, v1165, v1129);
                int32x4_t v1173 = vminq_s32(vmaxq_s32(vmlaq_s32(v1158, v1159, v1129), (int32x4_t)0), v1130);
                int32x4_t v1174 = vcvtq_s32_f32((float32x4_t)vbslq_s8(v1168, (int8x16_t)vmulq_f32(v1149, v1138), v1170));
                int32x4_t v1175 = vminq_s32(vmaxq_s32(vmlaq_s32(v1166, v1167, v1129), (int32x4_t)0), v1130);
                unsigned __int32 v1176 = v1175.u32[3];
                unsigned __int32 v1177 = v1175.u32[1];
                unsigned __int32 v1178 = v1175.u32[2];
                unsigned __int32 v1179 = v1175.i32[0];
                int32x4_t v1180 = vcvtq_s32_f32((float32x4_t)vbslq_s8(v1169, (int8x16_t)vmulq_f32(v1152, v1138), v1170));
                __int32 v1181 = v1180.i32[3];
                __int32 v1182 = v1180.i32[1];
                __int32 v1183 = v1180.i32[2];
                __int32 v1184 = v1180.i32[0];
                int32x4_t v1185 = vminq_s32(vmaxq_s32(v1172, (int32x4_t)0), v1130);
                int32x4_t v1186 = vcvtq_s32_f32(v1171);
                __int32 v1187 = v1186.i32[2];
                __int32 v1188 = v1186.i32[3];
                __int32 v1189 = v1186.i32[1];
                __int32 v1190 = v1186.i32[0];
                int32x4_t v1191 = vminq_s32(vmaxq_s32(vmlaq_s32(v1160, v1161, v1129), (int32x4_t)0), v1130);
                unsigned __int32 v1192 = v1191.u32[1];
                unsigned __int32 v1193 = v1191.u32[2];
                unsigned __int32 v1194 = v1191.u32[3];
                unsigned __int32 v1195 = v1191.i32[0];
                int32x4_t v1196 = vcvtq_s32_f32((float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1362, v1161), (int8x16_t)vcgtq_s32(v1409, v1160)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1161, (int8x16_t)v1160), v1163)), vandq_s8((int8x16_t)vcgezq_f32(v1150), (int8x16_t)vcgtzq_f32(v1141))), (int8x16_t)vmulq_f32(v1150, v1138), v1170));
                int v1197 = data[v1173.u32[0]];
                if (v1174.i32[0] < v1197) {
                  LOWORD(v1197) = v1174.i16[0];
                }
                data[v1173.u32[0]] = v1197;
                __int32 v1198 = v1196.i32[1];
                __int32 v1199 = v1196.i32[2];
                __int32 v1200 = v1196.i32[3];
                __int32 v1201 = v1196.i32[0];
                __asm { FMOV            V0.4S, #16.0 }
                float32x4_t v1137 = vaddq_f32(v1137, _Q0);
                if (v1198 >= data[v1192]) {
                  LOWORD(v1198) = data[v1192];
                }
                data[v1192] = v1198;
                __int32 v1203 = data[v1185.u32[2]];
                if (v1187 < v1203) {
                  LOWORD(v1203) = v1187;
                }
                data[v1185.u32[2]] = v1203;
                if (v1181 >= data[v1176]) {
                  LOWORD(v1181) = data[v1176];
                }
                data[v1176] = v1181;
                int v1204 = data[v1173.u32[1]];
                if (v1174.i32[1] < v1204) {
                  LOWORD(v1204) = v1174.i16[2];
                }
                data[v1173.u32[1]] = v1204;
                __int32 v1205 = data[v1193];
                if (v1199 < v1205) {
                  LOWORD(v1205) = v1199;
                }
                data[v1193] = v1205;
                __int32 v1206 = data[v1185.u32[3]];
                if (v1188 < v1206) {
                  LOWORD(v1206) = v1188;
                }
                data[v1185.u32[3]] = v1206;
                __int32 v1207 = data[v1179];
                if (v1184 < v1207) {
                  LOWORD(v1207) = v1184;
                }
                data[v1179] = v1207;
                int v1208 = data[v1173.u32[2]];
                if (v1174.i32[2] < v1208) {
                  LOWORD(v1208) = v1174.i16[4];
                }
                data[v1173.u32[2]] = v1208;
                __int32 v1209 = data[v1194];
                if (v1200 < v1209) {
                  LOWORD(v1209) = v1200;
                }
                data[v1194] = v1209;
                __int32 v1210 = data[v1185.u32[0]];
                if (v1190 < v1210) {
                  LOWORD(v1210) = v1190;
                }
                data[v1185.u32[0]] = v1210;
                __int32 v1211 = data[v1177];
                if (v1182 < v1211) {
                  LOWORD(v1211) = v1182;
                }
                data[v1177] = v1211;
                int v1212 = data[v1173.u32[3]];
                if (v1174.i32[3] < v1212) {
                  LOWORD(v1212) = v1174.i16[6];
                }
                data[v1173.u32[3]] = v1212;
                __int32 v1213 = data[v1195];
                if (v1201 < v1213) {
                  LOWORD(v1213) = v1201;
                }
                data[v1195] = v1213;
                __int32 v1214 = data[v1185.u32[1]];
                if (v1189 < v1214) {
                  LOWORD(v1214) = v1189;
                }
                data[v1185.u32[1]] = v1214;
                __int32 v1215 = data[v1178];
                if (v1183 < v1215) {
                  LOWORD(v1215) = v1183;
                }
                data[v1178] = v1215;
                v1133 += 4;
                uint64_t v1134 = v1496 + 16;
              }
              while (v1496 + 16 < v1122);
              unint64_t v1216 = v1247;
              float32x4_t v1113 = (float32x4_t)a14;
              float32x4_t v1112 = (float32x4_t)a15;
              float32x4_t v1115 = a12;
              float32x4_t v1114 = a13;
              float v1117 = *(float *)&a18;
              float v1116 = *(float *)&a11;
              float v1118 = *(float *)&a16;
              float32x4_t v1124 = v1326;
              size_t Width = v1282;
              size_t v1110 = v1272;
              float v1120 = 1.0 / *(float *)&a9;
              float v1121 = 1.0 / *(float *)&v1476;
              float v1123 = 0.5;
              int v1131 = v1251;
              int v1132 = v1249;
            }
            else
            {
              unint64_t v1216 = 0;
            }
            if (v1216 < Width)
            {
              do
              {
                float v1217 = v1133->f32[0] * 1000.0;
                _Q7 = vaddq_f32(v1112, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v1115, v1120 * (float)(v1217 * (float)((float)((float)v1216 + v1123) - v1116))), v1114, v1121 * (float)((float)((float)((float)v1119 + v1123) - *((float *)&a11 + 1)) * v1217)), v1113, v1217));
                if (_Q7.f32[2] >= 0.0 && v1217 > 0.0)
                {
                  uint64_t v1219 = (int)vmlas_n_f32(v1117, v1118 / _Q7.f32[2], _Q7.f32[0]);
                  if ((v1219 & 0x80000000) == 0 && v1131 > (int)v1219)
                  {
                    _S1 = *((float *)&a17 + 1) / _Q7.f32[2];
                    __asm { FMLA            S2, S1, V7.S[1] }
                    if (((int)_S2 & 0x80000000) == 0 && v1132 > (unsigned __int16)(int)_S2)
                    {
                      v1222 = &data[v1110 * (unsigned __int16)(int)_S2];
                      unsigned int v1223 = vcvts_n_s32_f32(_Q7.f32[2], 3uLL);
                      if (v1223 <= (unsigned __int16)(v1222[v1219] - 1)) {
                        v1222[v1219] = v1223;
                      }
                    }
                  }
                }
                ++v1216;
                v1133 = (float32x4_t *)((char *)v1133 + 4);
              }
              while (Width != v1216);
            }
            ++v1119;
            __asm { FMOV            V0.4S, #1.0 }
            float32x4_t v1124 = vaddq_f32(v1124, _Q0);
          }
          while (v1119 != Height);
        }
        if (v1244)
        {
          uint64_t v1225 = 0;
          long long v1226 = *(_OWORD *)&buf.width;
          vImagePixelCount v1227 = buf.width >> 4;
          v1228 = (char *)buf.data;
          vImagePixelCount v1229 = buf.height;
          if (buf.width >> 4 <= 1) {
            vImagePixelCount v1227 = 1;
          }
          if (buf.height <= 1) {
            vImagePixelCount v1229 = 1;
          }
          unint64_t v1230 = buf.width & 0xFFFFFFF0;
          do
          {
            v1231 = (int8x8_t *)&v1228[*((void *)&v1226 + 1) * v1225];
            vImagePixelCount v1232 = v1227;
            if ((unint64_t)v1226 >= 0x10)
            {
              do
              {
                int16x4_t v1233 = (int16x4_t)v1231[2];
                int16x4_t v1234 = (int16x4_t)v1231[3];
                int8x8_t v1235 = vbic_s8(v1231[1], (int8x8_t)vceq_s16((int16x4_t)v1231[1], (int16x4_t)0x8000800080008000));
                int8x8_t *v1231 = vbic_s8(*v1231, (int8x8_t)vceq_s16((int16x4_t)*v1231, (int16x4_t)0x8000800080008000));
                v1231[1] = v1235;
                v1231[2] = vbic_s8((int8x8_t)v1233, (int8x8_t)vceq_s16(v1233, (int16x4_t)0x8000800080008000));
                v1231[3] = vbic_s8((int8x8_t)v1234, (int8x8_t)vceq_s16(v1234, (int16x4_t)0x8000800080008000));
                v1231 += 4;
                --v1232;
              }
              while (v1232);
            }
            unint64_t v1236 = v1226 & 0xFFFFFFFF0000000FLL;
            if ((unint64_t)v1226 > v1230)
            {
              do
              {
                if (v1231->i16[0] == 0x7FFF) {
                  v1231->i16[0] = 0;
                }
                v1231 = (int8x8_t *)((char *)v1231 + 2);
                --v1236;
              }
              while (v1236);
            }
            ++v1225;
          }
          while (v1225 != v1229);
        }
        goto LABEL_389;
      }
      if (PixelFormatType == 1278226534) {
        goto LABEL_184;
      }
      if (PixelFormatType != 1278226536) {
        goto LABEL_391;
      }
    }
    else
    {
      if (PixelFormatType <= 1751410031)
      {
        if (PixelFormatType != 1717855600)
        {
          if (PixelFormatType == 1717856627)
          {
            size_t v126 = CVPixelBufferGetHeight(a1);
            size_t v127 = CVPixelBufferGetWidth(a1);
            unsigned int v128 = CVPixelBufferGetHeight(pixelBuffer);
            unsigned int v129 = CVPixelBufferGetWidth(pixelBuffer);
            size_t v130 = CVPixelBufferGetBytesPerRow(pixelBuffer);
            CVPixelBufferLockBaseAddress(a1, 1uLL);
            CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            memset(&v1498, 0, sizeof(v1498));
            v131 = (CGRect *)MEMORY[0x263F001A8];
            PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
            memset(&buf, 0, sizeof(buf));
            PixelBufferUtils::asVImageBuffer(pixelBuffer, *v131, &buf);
            v133 = (float *)buf.data;
            int v132 = buf.height;
            bzero(buf.data, buf.height * buf.rowBytes);
            float32x4_t v138 = (float32x4_t)a14;
            float32x4_t v137 = (float32x4_t)a15;
            float32x4_t v140 = a12;
            float32x4_t v139 = a13;
            float v142 = *(float *)&a18;
            float v141 = *(float *)&a11;
            float v143 = *(float *)&a16;
            if (v126)
            {
              unint64_t v144 = 0;
              float v145 = 1.0 / *(float *)&a9;
              v146.i32[1] = v1476;
              float v147 = 1.0 / *(float *)&v1476;
              unint64_t v148 = v127 & 0xFFFFFFFFFFFFFFF0;
              float v149 = 0.5;
              *(float *)v134.i32 = 0.5 - *((float *)&a11 + 1);
              float32x4_t v150 = (float32x4_t)vdupq_lane_s32(v134, 0);
              *(float *)v134.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
              *(float *)v146.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
              *(float *)v135.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
              float v151 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
              *(float *)&long long v136 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
              *(float *)&long long v18 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
              v152 = (char *)v1498.data;
              size_t v153 = v1498.rowBytes;
              float32x4_t v1328 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
              float32x4_t v1337 = (float32x4_t)vdupq_lane_s32(v135, 0);
              float32x4_t v1318 = (float32x4_t)vdupq_lane_s32(v146, 0);
              float32x4_t v1294 = (float32x4_t)vdupq_lane_s32(v134, 0);
              float32x4_t v1303 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
              float32x4_t v1284 = (float32x4_t)vdupq_laneq_s32(a14, 2);
              float32x4_t v154 = (float32x4_t)vdupq_laneq_s32(a15, 2);
              float32x4_t v155 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
              float32x4_t v1274 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
              float v156 = *((float *)&a17 + 1);
              float v1355 = 1.0 / *(float *)&a9;
              float v1346 = 1.0 / *(float *)&v1476;
              float32x4_t v1452 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
              float32x4_t v1460 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
              float32x4_t v1433 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
              int32x4_t v1443 = vdupq_n_s32(v132 * (v130 >> 2) - 4);
              float32x4_t v1411 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
              float v1421 = v151;
              float32x4_t v1391 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
              int32x4_t v1401 = vdupq_n_s32(v130 >> 2);
              int32x4_t v1373 = vdupq_n_s32(v128);
              int32x4_t v1382 = vdupq_n_s32(v129);
              do
              {
                v157 = (float32x4_t *)&v152[v144 * v153];
                unint64_t v158 = 0;
                if (v148)
                {
                  float32x4_t v1479 = vmlaq_f32(v1328, v1337, v150);
                  float32x4_t v1468 = vmlaq_f32(v1303, v1318, v150);
                  float32x4_t v1364 = v150;
                  float32x4_t v1488 = vmlaq_f32(v1284, v1294, v150);
                  float32x4_t v159 = v1274;
                  do
                  {
                    float32x4_t v160 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                    float32x4_t v161 = vmulq_f32(*v157, v160);
                    float32x4_t v162 = vmulq_f32(v157[1], v160);
                    __asm { FMOV            V1.4S, #4.0 }
                    float32x4_t v164 = vaddq_f32(v159, _Q1);
                    float32x4_t v165 = vmulq_f32(v157[2], v160);
                    _Q1.i64[0] = 0x4100000041000000;
                    _Q1.i64[1] = 0x4100000041000000;
                    float32x4_t v166 = vaddq_f32(v159, _Q1);
                    __asm { FMOV            V1.4S, #12.0 }
                    float32x4_t v168 = vaddq_f32(v159, _Q1);
                    float32x4_t v169 = vmulq_f32(v157[3], v160);
                    float32x4_t v170 = vmlaq_f32(v154, vmlaq_n_f32(v1488, v159, v151), v161);
                    float32x4_t v171 = vmlaq_f32(v154, vmlaq_n_f32(v1488, v164, v151), v162);
                    float32x4_t v172 = vmlaq_f32(v154, vmlaq_n_f32(v1488, v166, v151), v165);
                    float32x4_t v173 = vmlaq_f32(v154, vmlaq_n_f32(v1488, v168, v151), v169);
                    float32x4_t v174 = vmlaq_f32(v155, vmlaq_n_f32(v1479, v159, *(float *)&v18), v161);
                    float32x4_t v175 = vmlaq_f32(v1391, vmlaq_n_f32(v1468, v159, *(float *)&v136), v161);
                    float32x4_t v176 = v154;
                    float32x4_t v177 = vmlaq_f32(v155, vmlaq_n_f32(v1479, v164, *(float *)&v18), v162);
                    float32x4_t v178 = vmlaq_f32(v1391, vmlaq_n_f32(v1468, v164, *(float *)&v136), v162);
                    float32x4_t v179 = vmlaq_f32(v155, vmlaq_n_f32(v1479, v166, *(float *)&v18), v165);
                    int8x16_t v180 = vandq_s8((int8x16_t)vcgezq_f32(v170), (int8x16_t)vcgtzq_f32(v161));
                    float32x4_t v181 = vmlaq_f32(v1391, vmlaq_n_f32(v1468, v166, *(float *)&v136), v165);
                    int8x16_t v182 = vandq_s8((int8x16_t)vcgezq_f32(v171), (int8x16_t)vcgtzq_f32(v162));
                    float32x4_t v183 = vmlaq_f32(v155, vmlaq_n_f32(v1479, v168, *(float *)&v18), v169);
                    int8x16_t v184 = vandq_s8((int8x16_t)vcgezq_f32(v172), (int8x16_t)vcgtzq_f32(v165));
                    float32x4_t v185 = vmlaq_f32(v1391, vmlaq_n_f32(v1468, v168, *(float *)&v136), v169);
                    float32x4_t v186 = vmlaq_f32(v1452, vdivq_f32(v1411, v170), v174);
                    float32x4_t v187 = vmlaq_f32(v1460, vdivq_f32(v1433, v170), v175);
                    float32x4_t v188 = vmlaq_f32(v1452, vdivq_f32(v1411, v171), v177);
                    float32x4_t v189 = vdivq_f32(v1411, v172);
                    float32x4_t v190 = vmlaq_f32(v1460, vdivq_f32(v1433, v171), v178);
                    float32x4_t v191 = vdivq_f32(v1433, v172);
                    float32x4_t v192 = v155;
                    long long v193 = v18;
                    long long v194 = v136;
                    float32x4_t v195 = vdivq_f32(v1411, v173);
                    int8x16_t v196 = (int8x16_t)vdivq_f32(v160, v170);
                    int8x16_t v197 = (int8x16_t)vdivq_f32(v160, v171);
                    int8x16_t v198 = (int8x16_t)vdivq_f32(v160, v172);
                    int8x16_t v199 = (int8x16_t)vdivq_f32(v160, v173);
                    float32x4_t v200 = vdivq_f32(v1433, v173);
                    int8x16_t v201 = vandq_s8((int8x16_t)vcgezq_f32(v173), (int8x16_t)vcgtzq_f32(v169));
                    int32x4_t v202 = vcvtmq_s32_f32(v186);
                    int32x4_t v203 = vcvtmq_s32_f32(v187);
                    int32x4_t v204 = vcvtmq_s32_f32(v188);
                    int32x4_t v205 = vcvtmq_s32_f32(v190);
                    int32x4_t v206 = vcvtmq_s32_f32(vmlaq_f32(v1452, v189, v179));
                    float32x4_t v207 = vmlaq_f32(v1452, v195, v183);
                    long long v136 = v194;
                    long long v18 = v193;
                    float32x4_t v155 = v192;
                    int32x4_t v208 = vcvtmq_s32_f32(vmlaq_f32(v1460, v191, v181));
                    int32x4_t v209 = vcvtmq_s32_f32(v207);
                    int32x4_t v210 = vcvtmq_s32_f32(vmlaq_f32(v1460, v200, v185));
                    v211.i64[0] = -1;
                    v211.i64[1] = -1;
                    int8x16_t v212 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1373, v203), (int8x16_t)vcgtq_s32(v1382, v202)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v203, (int8x16_t)v202), v211));
                    int8x16_t v213 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1373, v205), (int8x16_t)vcgtq_s32(v1382, v204)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v205, (int8x16_t)v204), v211));
                    int8x16_t v214 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1373, v208), (int8x16_t)vcgtq_s32(v1382, v206)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v208, (int8x16_t)v206), v211));
                    int8x16_t v215 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1373, v210), (int8x16_t)vcgtq_s32(v1382, v209)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v210, (int8x16_t)v209), v211));
                    float32x4_t v154 = v176;
                    float v151 = v1421;
                    int32x4_t v216 = vminq_s32(vmaxq_s32(vmlaq_s32(v202, v203, v1401), (int32x4_t)0), v1443);
                    unsigned __int32 v217 = v216.u32[1];
                    unsigned __int32 v218 = v216.u32[2];
                    unsigned __int32 v219 = v216.u32[3];
                    int32x4_t v220 = vminq_s32(vmaxq_s32(vmlaq_s32(v204, v205, v1401), (int32x4_t)0), v1443);
                    int8x16_t v221 = vandq_s8(vandq_s8(v196, v180), v212);
                    v133[v216.u32[0]] = fmaxf(*(float *)v221.i32, v133[v216.u32[0]]);
                    int8x16_t v222 = vandq_s8(vandq_s8(v197, v182), v213);
                    int32x4_t v223 = vminq_s32(vmaxq_s32(vmlaq_s32(v206, v208, v1401), (int32x4_t)0), v1443);
                    v133[v220.u32[1]] = fmaxf(*(float *)&v222.i32[1], v133[v220.u32[1]]);
                    int8x16_t v224 = vandq_s8(vandq_s8(v198, v184), v214);
                    int32x4_t v225 = vminq_s32(vmaxq_s32(vmlaq_s32(v209, v210, v1401), (int32x4_t)0), v1443);
                    v133[v223.u32[2]] = fmaxf(*(float *)&v224.i32[2], v133[v223.u32[2]]);
                    int8x16_t v226 = vandq_s8(vandq_s8(v199, v201), v215);
                    v133[v225.u32[3]] = fmaxf(*(float *)&v226.i32[3], v133[v225.u32[3]]);
                    v133[v217] = fmaxf(*(float *)&v221.i32[1], v133[v217]);
                    v133[v220.u32[2]] = fmaxf(*(float *)&v222.i32[2], v133[v220.u32[2]]);
                    v133[v223.u32[3]] = fmaxf(*(float *)&v224.i32[3], v133[v223.u32[3]]);
                    v133[v225.u32[0]] = fmaxf(*(float *)v226.i32, v133[v225.u32[0]]);
                    v133[v218] = fmaxf(*(float *)&v221.i32[2], v133[v218]);
                    v133[v220.u32[3]] = fmaxf(*(float *)&v222.i32[3], v133[v220.u32[3]]);
                    v133[v223.u32[0]] = fmaxf(*(float *)v224.i32, v133[v223.u32[0]]);
                    v133[v225.u32[1]] = fmaxf(*(float *)&v226.i32[1], v133[v225.u32[1]]);
                    v133[v219] = fmaxf(*(float *)&v221.i32[3], v133[v219]);
                    v133[v220.u32[0]] = fmaxf(*(float *)v222.i32, v133[v220.u32[0]]);
                    v133[v223.u32[1]] = fmaxf(*(float *)&v224.i32[1], v133[v223.u32[1]]);
                    v133[v225.u32[2]] = fmaxf(*(float *)&v226.i32[2], v133[v225.u32[2]]);
                    __asm { FMOV            V0.4S, #16.0 }
                    float32x4_t v159 = vaddq_f32(v159, _Q0);
                    v157 += 4;
                    v158 += 16;
                  }
                  while (v158 < v148);
                  unint64_t v158 = (((v127 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
                  float32x4_t v138 = (float32x4_t)a14;
                  float32x4_t v137 = (float32x4_t)a15;
                  float32x4_t v140 = a12;
                  float32x4_t v139 = a13;
                  float v142 = *(float *)&a18;
                  float v141 = *(float *)&a11;
                  float v143 = *(float *)&a16;
                  float v145 = v1355;
                  float v147 = v1346;
                  float v149 = 0.5;
                  float32x4_t v150 = v1364;
                  float v156 = *((float *)&a17 + 1);
                }
                if (v158 < v127)
                {
                  do
                  {
                    float v228 = v157->f32[0] * 1000.0;
                    _Q2 = vaddq_f32(v137, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v140, v145 * (float)(v228 * (float)((float)((float)v158 + v149) - v141))), v139, v147 * (float)((float)((float)((float)v144 + v149) - *((float *)&a11 + 1)) * v228)), v138, v228));
                    if (_Q2.f32[2] >= 0.0 && v228 > 0.0)
                    {
                      uint64_t v230 = (int)vmlas_n_f32(v142, v143 / _Q2.f32[2], _Q2.f32[0]);
                      if ((v230 & 0x80000000) == 0 && (__int16)v129 > (int)v230)
                      {
                        _S3 = v156 / _Q2.f32[2];
                        __asm { FMLA            S4, S3, V2.S[1] }
                        if (((int)_S4 & 0x80000000) == 0 && (__int16)v128 > (int)(unsigned __int16)(int)_S4)
                        {
                          float v233 = 1000.0 / _Q2.f32[2];
                          v234 = &v133[(v130 >> 2) * (unsigned __int16)(int)_S4];
                          float v235 = v234[v230];
                          if (v235 == 0.0 || v235 < v233) {
                            v234[v230] = v233;
                          }
                        }
                      }
                    }
                    ++v158;
                    v157 = (float32x4_t *)((char *)v157 + 4);
                  }
                  while (v127 != v158);
                }
                ++v144;
                __asm { FMOV            V0.4S, #1.0 }
                float32x4_t v150 = vaddq_f32(v150, _Q0);
              }
              while (v144 != v126);
            }
LABEL_389:
            CVPixelBufferUnlockBaseAddress(a1, 1uLL);
            v1101 = pixelBuffer;
            goto LABEL_390;
          }
LABEL_391:
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            goto LABEL_393;
          }
          return -22950;
        }
LABEL_184:
        size_t v708 = CVPixelBufferGetHeight(a1);
        size_t v709 = CVPixelBufferGetWidth(a1);
        size_t v710 = CVPixelBufferGetHeight(pixelBuffer);
        unsigned int v711 = CVPixelBufferGetWidth(pixelBuffer);
        size_t v712 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        CVPixelBufferLockBaseAddress(a1, 1uLL);
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        memset(&v1498, 0, sizeof(v1498));
        v713 = (CGRect *)MEMORY[0x263F001A8];
        PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
        memset(&buf, 0, sizeof(buf));
        PixelBufferUtils::asVImageBuffer(pixelBuffer, *v713, &buf);
        size_t v715 = v712 >> 2;
        v716 = (float *)buf.data;
        if (v715 * v710) {
          memset_pattern16(buf.data, &unk_247F24670, 4 * v715 * v710);
        }
        vImagePixelCount v717 = buf.height;
        float32x4_t v719 = (float32x4_t)a14;
        float32x4_t v718 = (float32x4_t)a15;
        float32x4_t v721 = a12;
        float32x4_t v720 = a13;
        float v723 = *(float *)&a18;
        float v722 = *(float *)&a11;
        float v724 = *(float *)&a16;
        if (v708)
        {
          unint64_t v725 = 0;
          v726.i32[1] = v1476;
          v727.i32[1] = HIDWORD(a9);
          float v728 = 1.0 / *(float *)&a9;
          float v729 = 1.0 / *(float *)&v1476;
          unint64_t v730 = v709 & 0xFFFFFFFFFFFFFFF0;
          float v731 = 0.5;
          *(float *)v714.i32 = 0.5 - *((float *)&a11 + 1);
          float32x4_t v732 = (float32x4_t)vdupq_lane_s32(v714, 0);
          *(float *)v714.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
          *(float *)v726.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
          *(float *)v727.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
          float v733 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
          float v734 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
          float32x4_t v1333 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
          float32x4_t v1342 = (float32x4_t)vdupq_lane_s32(v727, 0);
          float32x4_t v1323 = (float32x4_t)vdupq_lane_s32(v726, 0);
          float v735 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
          float32x4_t v1299 = (float32x4_t)vdupq_lane_s32(v714, 0);
          float32x4_t v1305 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
          float32x4_t v1289 = (float32x4_t)vdupq_laneq_s32(a14, 2);
          v736 = (char *)v1498.data;
          size_t v737 = v1498.rowBytes;
          float32x4_t v1279 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
          float32x4_t v738 = (float32x4_t)vdupq_laneq_s32(a15, 2);
          float32x4_t v739 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
          float32x4_t v740 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
          int32x4_t v741 = vdupq_n_s32(v715);
          int32x4_t v1378 = vdupq_n_s32(LODWORD(buf.height) * (int)v715 - 4);
          float32x4_t v742 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
          float32x4_t v743 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
          float v744 = *((float *)&a17 + 1);
          float v1360 = 1.0 / *(float *)&a9;
          float v1351 = 1.0 / *(float *)&v1476;
          int32x4_t v1406 = vdupq_n_s32(v710);
          int32x4_t v1416 = vdupq_n_s32(v711);
          float32x4_t v1387 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
          float32x4_t v1396 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
          do
          {
            v745 = (float32x4_t *)&v736[v725 * v737];
            unint64_t v746 = 0;
            if (v730)
            {
              float32x4_t v1448 = vmlaq_f32(v1333, v1342, v732);
              float32x4_t v1438 = vmlaq_f32(v1305, v1323, v732);
              float32x4_t v1368 = v732;
              float32x4_t v1427 = vmlaq_f32(v1289, v1299, v732);
              float32x4_t v747 = v1279;
              do
              {
                float32x4_t v748 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                float32x4_t v749 = vmulq_f32(*v745, v748);
                float32x4_t v750 = vmulq_f32(v745[1], v748);
                float32x4_t v751 = vmulq_f32(v745[2], v748);
                __asm { FMOV            V0.4S, #4.0 }
                float32x4_t v753 = vaddq_f32(v747, _Q0);
                _Q0.i64[0] = 0x4100000041000000;
                _Q0.i64[1] = 0x4100000041000000;
                float32x4_t v754 = vaddq_f32(v747, _Q0);
                __asm { FMOV            V0.4S, #12.0 }
                float32x4_t v756 = vaddq_f32(v747, _Q0);
                float32x4_t v757 = vmulq_f32(v745[3], v748);
                float32x4_t v758 = v738;
                float32x4_t v759 = vmlaq_f32(v738, vmlaq_n_f32(v1427, v747, v733), v749);
                float32x4_t v760 = vmlaq_f32(v738, vmlaq_n_f32(v1427, v753, v733), v750);
                float32x4_t v761 = vmlaq_f32(v738, vmlaq_n_f32(v1427, v754, v733), v751);
                float32x4_t v762 = vmlaq_f32(v738, vmlaq_n_f32(v1427, v756, v733), v757);
                int8x16_t v763 = vandq_s8((int8x16_t)vcgezq_f32(v759), (int8x16_t)vcgtzq_f32(v749));
                int8x16_t v1465 = vandq_s8((int8x16_t)vcgezq_f32(v760), (int8x16_t)vcgtzq_f32(v750));
                float32x4_t v764 = vmlaq_f32(v739, vmlaq_n_f32(v1448, v753, v735), v750);
                float32x4_t v765 = vmlaq_f32(v740, vmlaq_n_f32(v1438, v753, v734), v750);
                int8x16_t v1457 = vandq_s8((int8x16_t)vcgezq_f32(v761), (int8x16_t)vcgtzq_f32(v751));
                float32x4_t v766 = vmlaq_f32(v739, vmlaq_n_f32(v1448, v754, v735), v751);
                float32x4_t v767 = vmlaq_f32(v740, vmlaq_n_f32(v1438, v754, v734), v751);
                int8x16_t v768 = vandq_s8((int8x16_t)vcgezq_f32(v762), (int8x16_t)vcgtzq_f32(v757));
                float32x4_t v769 = vmlaq_f32(v739, vmlaq_n_f32(v1448, v756, v735), v757);
                float32x4_t v770 = vmlaq_n_f32(v1438, v756, v734);
                float32x4_t v771 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
                int8x16_t v772 = (int8x16_t)vmulq_f32(v759, v771);
                int8x16_t v1473 = (int8x16_t)vmulq_f32(v760, v771);
                int8x16_t v1484 = (int8x16_t)vmulq_f32(v761, v771);
                int8x16_t v1493 = (int8x16_t)vmulq_f32(v762, v771);
                int32x4_t v773 = vcvtmq_s32_f32(vmlaq_f32(v1396, vdivq_f32(v742, v759), vmlaq_f32(v739, vmlaq_n_f32(v1448, v747, v735), v749)));
                int32x4_t v774 = vcvtmq_s32_f32(vmlaq_f32(v1387, vdivq_f32(v743, v759), vmlaq_f32(v740, vmlaq_n_f32(v1438, v747, v734), v749)));
                int32x4_t v775 = vcvtmq_s32_f32(vmlaq_f32(v1396, vdivq_f32(v742, v760), v764));
                int32x4_t v776 = vcvtmq_s32_f32(vmlaq_f32(v1387, vdivq_f32(v743, v760), v765));
                float32x4_t v777 = vmlaq_f32(v1396, vdivq_f32(v742, v762), v769);
                float32x4_t v778 = vmlaq_f32(v1387, vdivq_f32(v743, v762), vmlaq_f32(v740, v770, v757));
                v770.i64[0] = -1;
                v770.i64[1] = -1;
                int32x4_t v779 = vcvtmq_s32_f32(vmlaq_f32(v1396, vdivq_f32(v742, v761), v766));
                int32x4_t v780 = vcvtmq_s32_f32(vmlaq_f32(v1387, vdivq_f32(v743, v761), v767));
                int32x4_t v781 = vcvtmq_s32_f32(v777);
                int32x4_t v782 = vcvtmq_s32_f32(v778);
                int8x16_t v783 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1406, v776), (int8x16_t)vcgtq_s32(v1416, v775)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v776, (int8x16_t)v775), (int32x4_t)v770)), v1465);
                int8x16_t v784 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1406, v780), (int8x16_t)vcgtq_s32(v1416, v779)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v780, (int8x16_t)v779), (int32x4_t)v770)), v1457);
                int32x4_t v785 = vmlaq_s32(v775, v776, v741);
                int8x16_t v786 = (int8x16_t)vdupq_n_s32(0x7F7FFFFFu);
                int8x16_t v787 = vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1406, v774), (int8x16_t)vcgtq_s32(v1416, v773)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v774, (int8x16_t)v773), (int32x4_t)v770)), v763), v772, v786);
                int32x4_t v788 = vmaxq_s32(vmlaq_s32(v773, v774, v741), (int32x4_t)0);
                float32x4_t v738 = v758;
                int32x4_t v789 = vminq_s32(v788, v1378);
                unsigned __int32 v790 = v789.u32[1];
                unsigned __int32 v791 = v789.u32[2];
                unsigned __int32 v792 = v789.u32[3];
                v716[v789.u32[0]] = fminf(*(float *)v787.i32, v716[v789.u32[0]]);
                int32x4_t v793 = vminq_s32(vmaxq_s32(v785, (int32x4_t)0), v1378);
                int32x4_t v794 = vminq_s32(vmaxq_s32(vmlaq_s32(v779, v780, v741), (int32x4_t)0), v1378);
                int8x16_t v795 = vbslq_s8(v783, v1473, v786);
                int8x16_t v796 = vbslq_s8(v784, v1484, v786);
                v716[v793.u32[1]] = fminf(*(float *)&v795.i32[1], v716[v793.u32[1]]);
                v716[v794.u32[2]] = fminf(*(float *)&v796.i32[2], v716[v794.u32[2]]);
                int32x4_t v797 = vminq_s32(vmaxq_s32(vmlaq_s32(v781, v782, v741), (int32x4_t)0), v1378);
                int8x16_t v798 = vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1406, v782), (int8x16_t)vcgtq_s32(v1416, v781)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v782, (int8x16_t)v781), (int32x4_t)v770)), v768), v1493, v786);
                v716[v797.u32[3]] = fminf(*(float *)&v798.i32[3], v716[v797.u32[3]]);
                v716[v790] = fminf(*(float *)&v787.i32[1], v716[v790]);
                v716[v793.u32[2]] = fminf(*(float *)&v795.i32[2], v716[v793.u32[2]]);
                v716[v794.u32[3]] = fminf(*(float *)&v796.i32[3], v716[v794.u32[3]]);
                v716[v797.u32[0]] = fminf(*(float *)v798.i32, v716[v797.u32[0]]);
                v716[v791] = fminf(*(float *)&v787.i32[2], v716[v791]);
                v716[v793.u32[3]] = fminf(*(float *)&v795.i32[3], v716[v793.u32[3]]);
                v716[v794.u32[0]] = fminf(*(float *)v796.i32, v716[v794.u32[0]]);
                v716[v797.u32[1]] = fminf(*(float *)&v798.i32[1], v716[v797.u32[1]]);
                v716[v792] = fminf(*(float *)&v787.i32[3], v716[v792]);
                v716[v793.u32[0]] = fminf(*(float *)v795.i32, v716[v793.u32[0]]);
                v716[v794.u32[1]] = fminf(*(float *)&v796.i32[1], v716[v794.u32[1]]);
                v716[v797.u32[2]] = fminf(*(float *)&v798.i32[2], v716[v797.u32[2]]);
                __asm { FMOV            V0.4S, #16.0 }
                float32x4_t v747 = vaddq_f32(v747, _Q0);
                v745 += 4;
                v746 += 16;
              }
              while (v746 < v730);
              unint64_t v746 = (((v709 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
              float32x4_t v719 = (float32x4_t)a14;
              float32x4_t v718 = (float32x4_t)a15;
              float32x4_t v721 = a12;
              float32x4_t v720 = a13;
              float v723 = *(float *)&a18;
              float v722 = *(float *)&a11;
              float v724 = *(float *)&a16;
              float v728 = v1360;
              float v729 = v1351;
              float v731 = 0.5;
              float32x4_t v732 = v1368;
              float v744 = *((float *)&a17 + 1);
            }
            if (v746 < v709)
            {
              do
              {
                float v800 = v745->f32[0] * 1000.0;
                _Q2 = vaddq_f32(v718, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v721, v728 * (float)(v800 * (float)((float)((float)v746 + v731) - v722))), v720, v729 * (float)((float)((float)((float)v725 + v731) - *((float *)&a11 + 1)) * v800)), v719, v800));
                if (_Q2.f32[2] >= 0.0 && v800 > 0.0)
                {
                  uint64_t v802 = (int)vmlas_n_f32(v723, v724 / _Q2.f32[2], _Q2.f32[0]);
                  if ((v802 & 0x80000000) == 0 && (__int16)v711 > (int)v802)
                  {
                    _S3 = v744 / _Q2.f32[2];
                    __asm { FMLA            S4, S3, V2.S[1] }
                    if (((int)_S4 & 0x80000000) == 0 && (__int16)v710 > (int)(unsigned __int16)(int)_S4)
                    {
                      float v805 = _Q2.f32[2] * 0.001;
                      v806 = &v716[v715 * (unsigned __int16)(int)_S4];
                      float v807 = v806[v802];
                      if (v807 == 0.0 || v807 > v805) {
                        v806[v802] = v805;
                      }
                    }
                  }
                }
                ++v746;
                v745 = (float32x4_t *)((char *)v745 + 4);
              }
              while (v709 != v746);
            }
            ++v725;
            __asm { FMOV            V0.4S, #1.0 }
            float32x4_t v732 = vaddq_f32(v732, _Q0);
          }
          while (v725 != v708);
        }
        if (v717)
        {
          uint64_t v810 = 0;
          long long v811 = *(_OWORD *)&buf.width;
          vImagePixelCount v812 = buf.width >> 4;
          v813 = (char *)buf.data;
          vImagePixelCount v814 = buf.height;
          if (buf.width >> 4 <= 1) {
            vImagePixelCount v812 = 1;
          }
          if (buf.height <= 1) {
            vImagePixelCount v814 = 1;
          }
          unint64_t v815 = buf.width & 0xFFFFFFF0;
          float32x4_t v816 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
          do
          {
            v817 = (float32x4_t *)&v813[*((void *)&v811 + 1) * v810];
            vImagePixelCount v818 = v812;
            if ((unint64_t)v811 >= 0x10)
            {
              do
              {
                float32x4_t v819 = v817[2];
                float32x4_t v820 = v817[3];
                int8x16_t v821 = vbicq_s8((int8x16_t)v817[1], (int8x16_t)vceqq_f32(v817[1], v816));
                *(int8x16_t *)v817 = vbicq_s8(*(int8x16_t *)v817, (int8x16_t)vceqq_f32(*v817, v816));
                v817[1] = (float32x4_t)v821;
                v817[2] = (float32x4_t)vbicq_s8((int8x16_t)v819, (int8x16_t)vceqq_f32(v819, v816));
                v817[3] = (float32x4_t)vbicq_s8((int8x16_t)v820, (int8x16_t)vceqq_f32(v820, v816));
                v817 += 4;
                --v818;
              }
              while (v818);
            }
            unint64_t v822 = v811 & 0xFFFFFFFF0000000FLL;
            if ((unint64_t)v811 > v815)
            {
              do
              {
                if (v817->f32[0] == 3.4028e38) {
                  v817->i32[0] = 0;
                }
                v817 = (float32x4_t *)((char *)v817 + 4);
                --v822;
              }
              while (v822);
            }
            ++v810;
          }
          while (v810 != v814);
        }
        goto LABEL_389;
      }
      if (PixelFormatType != 1751410032)
      {
        if (PixelFormatType == 1751411059)
        {
          size_t v598 = CVPixelBufferGetHeight(a1);
          size_t v599 = CVPixelBufferGetWidth(a1);
          unsigned int v600 = CVPixelBufferGetHeight(pixelBuffer);
          unsigned int v601 = CVPixelBufferGetWidth(pixelBuffer);
          size_t v602 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          CVPixelBufferLockBaseAddress(a1, 1uLL);
          CVPixelBufferLockBaseAddress(pixelBuffer, 0);
          memset(&v1498, 0, sizeof(v1498));
          v603 = (CGRect *)MEMORY[0x263F001A8];
          PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
          memset(&buf, 0, sizeof(buf));
          PixelBufferUtils::asVImageBuffer(pixelBuffer, *v603, &buf);
          v605 = (short float *)buf.data;
          int v604 = buf.height;
          bzero(buf.data, buf.height * buf.rowBytes);
          float32x4_t v611 = (float32x4_t)a14;
          float32x4_t v610 = (float32x4_t)a15;
          float32x4_t v613 = a12;
          float32x4_t v612 = a13;
          float v615 = *(float *)&a18;
          float v614 = *(float *)&a11;
          float v616 = *(float *)&a16;
          if (v598)
          {
            unint64_t v617 = 0;
            float v618 = 1.0 / *(float *)&a9;
            float v619 = 1.0 / *(float *)&v1476;
            unint64_t v620 = v599 & 0xFFFFFFFFFFFFFFF0;
            float v621 = 0.5;
            *(float *)v606.i32 = 0.5 - *((float *)&a11 + 1);
            float32x4_t v622 = (float32x4_t)vdupq_lane_s32(v606, 0);
            *(float *)v606.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
            *(float *)v607.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
            *(float *)v608.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
            *(float *)&long long v609 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
            v623 = (char *)v1498.data;
            size_t v624 = v1498.rowBytes;
            float32x4_t v1322 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
            float32x4_t v1332 = (float32x4_t)vdupq_lane_s32(v608, 0);
            float32x4_t v1298 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
            float32x4_t v1304 = (float32x4_t)vdupq_lane_s32(v607, 0);
            float32x4_t v1278 = (float32x4_t)vdupq_laneq_s32(a14, 2);
            float32x4_t v1288 = (float32x4_t)vdupq_lane_s32(v606, 0);
            float32x4_t v625 = (float32x4_t)vdupq_laneq_s32(a15, 2);
            int32x4_t v626 = vdupq_n_s32(v601);
            float32x4_t v1270 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
            int32x4_t v627 = vdupq_n_s32(v604 * (v602 >> 1) - 2);
            float v628 = *((float *)&a17 + 1);
            float v1350 = 1.0 / *(float *)&a9;
            float v1341 = 1.0 / *(float *)&v1476;
            float v1456 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
            float32x4_t v1464 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
            float32x4_t v1437 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
            int32x4_t v1447 = vdupq_n_s32(v600);
            float32x4_t v1415 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
            float32x4_t v1426 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
            float32x4_t v1395 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
            float v1405 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
            int32x4_t v1377 = vdupq_n_s32(v602 >> 1);
            float32x4_t v1386 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
            do
            {
              v629 = (float32x4_t *)&v623[v617 * v624];
              unint64_t v630 = 0;
              if (v620)
              {
                float32x4_t v1472 = vmlaq_f32(v1322, v1332, v622);
                float32x4_t v1492 = vmlaq_f32(v1298, v1304, v622);
                float32x4_t v1359 = v622;
                float32x4_t v1483 = vmlaq_f32(v1278, v1288, v622);
                float32x4_t v631 = v1270;
                do
                {
                  float32x4_t v632 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                  float32x4_t v633 = vmulq_f32(*v629, v632);
                  float32x4_t v634 = vmulq_f32(v629[1], v632);
                  float32x4_t v635 = vmulq_f32(v629[2], v632);
                  __asm { FMOV            V0.4S, #4.0 }
                  float32x4_t v637 = vaddq_f32(v631, _Q0);
                  _Q0.i64[0] = 0x4100000041000000;
                  _Q0.i64[1] = 0x4100000041000000;
                  float32x4_t v638 = vaddq_f32(v631, _Q0);
                  __asm { FMOV            V0.4S, #12.0 }
                  float32x4_t v640 = vaddq_f32(v631, _Q0);
                  float32x4_t v641 = vmulq_f32(v629[3], v632);
                  float32x4_t v642 = vmlaq_f32(v625, vmlaq_n_f32(v1483, v631, *(float *)&v609), v633);
                  float32x4_t v643 = vmlaq_f32(v625, vmlaq_n_f32(v1483, v637, *(float *)&v609), v634);
                  float32x4_t v644 = vmlaq_f32(v625, vmlaq_n_f32(v1483, v638, *(float *)&v609), v635);
                  float32x4_t v645 = vmlaq_f32(v625, vmlaq_n_f32(v1483, v640, *(float *)&v609), v641);
                  int8x16_t v646 = (int8x16_t)vcgtzq_f32(v634);
                  int8x16_t v647 = (int8x16_t)vcgtzq_f32(v635);
                  float32x4_t v648 = vmlaq_f32(v1426, vmlaq_n_f32(v1472, v631, v1456), v633);
                  float32x4_t v649 = vmlaq_f32(v1386, vmlaq_n_f32(v1492, v631, v1405), v633);
                  float32x4_t v650 = vmlaq_f32(v1426, vmlaq_n_f32(v1472, v637, v1456), v634);
                  long long v651 = v609;
                  float32x4_t v652 = vmlaq_f32(v1386, vmlaq_n_f32(v1492, v637, v1405), v634);
                  float32x4_t v653 = vmlaq_f32(v1426, vmlaq_n_f32(v1472, v638, v1456), v635);
                  float32x4_t v654 = vmlaq_f32(v1386, vmlaq_n_f32(v1492, v638, v1405), v635);
                  int32x4_t v655 = v627;
                  float32x4_t v656 = v625;
                  int8x16_t v657 = vandq_s8((int8x16_t)vcgezq_f32(v642), (int8x16_t)vcgtzq_f32(v633));
                  int8x16_t v658 = vandq_s8((int8x16_t)vcgezq_f32(v643), v646);
                  float32x4_t v659 = vmlaq_f32(v1415, vdivq_f32(v1395, v642), v648);
                  float32x4_t v660 = vmlaq_f32(v1464, vdivq_f32(v1437, v642), v649);
                  int8x16_t v661 = vandq_s8((int8x16_t)vcgezq_f32(v644), v647);
                  float32x4_t v662 = vmlaq_f32(v1415, vdivq_f32(v1395, v643), v650);
                  float32x4_t v663 = vdivq_f32(v1395, v644);
                  float32x4_t v664 = vdivq_f32(v1437, v644);
                  int8x16_t v665 = vandq_s8((int8x16_t)vcgezq_f32(v645), (int8x16_t)vcgtzq_f32(v641));
                  float32x4_t v666 = vmlaq_f32(v1464, vdivq_f32(v1437, v643), v652);
                  float32x4_t v667 = vdivq_f32(v1395, v645);
                  float32x4_t v668 = vdivq_f32(v1437, v645);
                  int8x16_t v669 = (int8x16_t)vdivq_f32(v632, v642);
                  int8x16_t v670 = (int8x16_t)vdivq_f32(v632, v643);
                  int8x16_t v671 = (int8x16_t)vdivq_f32(v632, v644);
                  int8x16_t v672 = (int8x16_t)vdivq_f32(v632, v645);
                  int32x4_t v673 = vcvtmq_s32_f32(v659);
                  int32x4_t v674 = vcvtmq_s32_f32(v660);
                  int32x4_t v675 = vcvtmq_s32_f32(v662);
                  int32x4_t v676 = vcvtmq_s32_f32(v666);
                  int32x4_t v677 = vcvtmq_s32_f32(vmlaq_f32(v1415, v663, v653));
                  int32x4_t v678 = vcvtmq_s32_f32(vmlaq_f32(v1464, v664, v654));
                  int32x4_t v679 = vcvtmq_s32_f32(vmlaq_f32(v1415, v667, vmlaq_f32(v1426, vmlaq_n_f32(v1472, v640, v1456), v641)));
                  int32x4_t v680 = vcvtmq_s32_f32(vmlaq_f32(v1464, v668, vmlaq_f32(v1386, vmlaq_n_f32(v1492, v640, v1405), v641)));
                  v681.i64[0] = -1;
                  v681.i64[1] = -1;
                  int8x16_t v682 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1447, v676), (int8x16_t)vcgtq_s32(v626, v675)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v676, (int8x16_t)v675), v681));
                  int8x16_t v683 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1447, v678), (int8x16_t)vcgtq_s32(v626, v677)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v678, (int8x16_t)v677), v681));
                  int8x16_t v684 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1447, v680), (int8x16_t)vcgtq_s32(v626, v679)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v680, (int8x16_t)v679), v681));
                  int32x4_t v685 = vmlaq_s32(v675, v676, v1377);
                  float32x4_t v625 = v656;
                  int32x4_t v627 = v655;
                  int32x4_t v686 = vmlaq_s32(v677, v678, v1377);
                  int32x4_t v687 = vmlaq_s32(v679, v680, v1377);
                  float32x4_t v688 = (float32x4_t)vandq_s8(vandq_s8(v669, v657), vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1447, v674), (int8x16_t)vcgtq_s32(v626, v673)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v674, (int8x16_t)v673), v681)));
                  float32x4_t v689 = (float32x4_t)vandq_s8(vandq_s8(v670, v658), v682);
                  int8x16_t v690 = vandq_s8(v672, v665);
                  long long v609 = v651;
                  int32x4_t v691 = vminq_s32(vmaxq_s32(vmlaq_s32(v673, v674, v1377), (int32x4_t)0), v655);
                  int32x4_t v692 = vminq_s32(vmaxq_s32(v685, (int32x4_t)0), v655);
                  int32x4_t v693 = vminq_s32(vmaxq_s32(v686, (int32x4_t)0), v655);
                  int32x4_t v694 = vminq_s32(vmaxq_s32(v687, (int32x4_t)0), v655);
                  float32x4_t v695 = (float32x4_t)vandq_s8(v690, v684);
                  unsigned __int32 v696 = v691.u32[1];
                  *(float16x4_t *)v690.i8 = vcvt_f16_f32(v688);
                  v605[v691.u32[0]] = fmaxl(*(short float *)v690.i16, v605[v691.u32[0]]);
                  *(float16x4_t *)v687.i8 = vcvt_f16_f32(v689);
                  v605[v692.u32[1]] = fmaxl(*(short float *)&v687.i16[1], v605[v692.u32[1]]);
                  *(float16x4_t *)v691.i8 = vcvt_f16_f32((float32x4_t)vandq_s8(vandq_s8(v671, v661), v683));
                  v605[v693.u32[2]] = fmaxl(*(short float *)&v691.i16[2], v605[v693.u32[2]]);
                  *(float16x4_t *)v658.i8 = vcvt_f16_f32(v695);
                  v605[v694.u32[3]] = fmaxl(*(short float *)&v658.i16[3], v605[v694.u32[3]]);
                  v605[v696] = fmaxl(*(short float *)&v690.i16[1], v605[v696]);
                  v605[v692.u32[2]] = fmaxl(*(short float *)&v687.i16[2], v605[v692.u32[2]]);
                  v605[v693.u32[3]] = fmaxl(*(short float *)&v691.i16[3], v605[v693.u32[3]]);
                  v605[v694.u32[0]] = fmaxl(*(short float *)v658.i16, v605[v694.u32[0]]);
                  v605[v691.u32[2]] = fmaxl(*(short float *)&v690.i16[2], v605[v691.u32[2]]);
                  v605[v692.u32[3]] = fmaxl(*(short float *)&v687.i16[3], v605[v692.u32[3]]);
                  v605[v693.u32[0]] = fmaxl(*(short float *)v691.i16, v605[v693.u32[0]]);
                  v605[v694.u32[1]] = fmaxl(*(short float *)&v658.i16[1], v605[v694.u32[1]]);
                  v605[v691.u32[3]] = fmaxl(*(short float *)&v690.i16[3], v605[v691.u32[3]]);
                  v605[v692.u32[0]] = fmaxl(*(short float *)v687.i16, v605[v692.u32[0]]);
                  v605[v693.u32[1]] = fmaxl(*(short float *)&v691.i16[1], v605[v693.u32[1]]);
                  v605[v694.u32[2]] = fmaxl(*(short float *)&v658.i16[2], v605[v694.u32[2]]);
                  __asm { FMOV            V0.4S, #16.0 }
                  float32x4_t v631 = vaddq_f32(v631, _Q0);
                  v629 += 4;
                  v630 += 16;
                }
                while (v630 < v620);
                unint64_t v630 = (((v599 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
                float32x4_t v611 = (float32x4_t)a14;
                float32x4_t v610 = (float32x4_t)a15;
                float32x4_t v613 = a12;
                float32x4_t v612 = a13;
                float v615 = *(float *)&a18;
                float v614 = *(float *)&a11;
                float v616 = *(float *)&a16;
                float v618 = v1350;
                float v619 = v1341;
                float v621 = 0.5;
                float32x4_t v622 = v1359;
                float v628 = *((float *)&a17 + 1);
              }
              if (v630 < v599)
              {
                do
                {
                  float v698 = v629->f32[0] * 1000.0;
                  _Q4 = vaddq_f32(v610, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v613, v618 * (float)(v698 * (float)((float)((float)v630 + v621) - v614))), v612, v619 * (float)((float)((float)((float)v617 + v621) - *((float *)&a11 + 1)) * v698)), v611, v698));
                  if (_Q4.f32[2] >= 0.0 && v698 > 0.0)
                  {
                    uint64_t v700 = (int)vmlas_n_f32(v615, v616 / _Q4.f32[2], _Q4.f32[0]);
                    if ((v700 & 0x80000000) == 0 && (__int16)v601 > (int)v700)
                    {
                      _S1 = v628 / _Q4.f32[2];
                      __asm { FMLA            S2, S1, V4.S[1] }
                      if (((int)_S2 & 0x80000000) == 0 && (__int16)v600 > (int)(unsigned __int16)(int)_S2)
                      {
                        _S1 = 1000.0 / _Q4.f32[2];
                        __asm
                        {
                          FCVT            H3, S1
                          FCMP            H1, #0
                        }
                        if (_ZF || _H1 < _H3) {
                          v605[(v602 >> 1) * (unsigned __int16)(int)_S2 + v700] = _H3;
                        }
                      }
                    }
                  }
                  ++v630;
                  v629 = (float32x4_t *)((char *)v629 + 4);
                }
                while (v599 != v630);
              }
              ++v617;
              __asm { FMOV            V0.4S, #1.0 }
              float32x4_t v622 = vaddq_f32(v622, _Q0);
            }
            while (v617 != v598);
          }
          goto LABEL_389;
        }
        goto LABEL_391;
      }
    }
    size_t v823 = CVPixelBufferGetHeight(a1);
    size_t v824 = CVPixelBufferGetWidth(a1);
    size_t v825 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v826 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v827 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    memset(&v1498, 0, sizeof(v1498));
    v828 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v828, &buf);
    size_t v833 = v827 >> 1;
    v834 = (short float *)buf.data;
    if (v833 * v825) {
      memset_pattern16(buf.data, &unk_247F24680, 2 * v833 * v825);
    }
    vImagePixelCount v835 = buf.height;
    float32x4_t v836 = (float32x4_t)a14;
    float32x4_t v837 = (float32x4_t)a15;
    float32x4_t v839 = a12;
    float32x4_t v838 = a13;
    float v841 = *(float *)&a18;
    float v840 = *(float *)&a11;
    float v842 = *(float *)&a16;
    if (v823)
    {
      unint64_t v843 = 0;
      float v844 = 1.0 / *(float *)&a9;
      float v845 = 1.0 / *(float *)&v1476;
      unint64_t v846 = v824 & 0xFFFFFFFFFFFFFFF0;
      float v847 = 0.5;
      *(float *)v829.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v848 = (float32x4_t)vdupq_lane_s32(v829, 0);
      *(float *)v829.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
      *(float *)v830.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
      *(float *)v831.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
      *(float *)&long long v832 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      float v849 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      float32x4_t v1334 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1343 = (float32x4_t)vdupq_lane_s32(v831, 0);
      float32x4_t v1324 = (float32x4_t)vdupq_lane_s32(v830, 0);
      float v850 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v1300 = (float32x4_t)vdupq_lane_s32(v829, 0);
      float32x4_t v1306 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1290 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      v851 = (char *)v1498.data;
      size_t v852 = v1498.rowBytes;
      float32x4_t v1280 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      float32x4_t v853 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v854 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v855 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      int32x4_t v856 = vdupq_n_s32(LODWORD(buf.height) * (int)v833 - 2);
      v857.i64[0] = 0x4100000041000000;
      v857.i64[1] = 0x4100000041000000;
      float v1361 = 1.0 / *(float *)&a9;
      float v1352 = 1.0 / *(float *)&v1476;
      float32x4_t v1449 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      int32x4_t v1458 = vdupq_n_s32(v826);
      int32x4_t v1428 = vdupq_n_s32(v833);
      float32x4_t v1439 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      float32x4_t v1407 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      float32x4_t v1417 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      int32x4_t v1397 = vdupq_n_s32(v825);
      do
      {
        v858 = (float32x4_t *)&v851[v843 * v852];
        unint64_t v859 = 0;
        if (v846)
        {
          float32x4_t v1485 = vmlaq_f32(v1334, v1343, v848);
          float32x4_t v1466 = vmlaq_f32(v1306, v1324, v848);
          float32x4_t v1369 = v848;
          float32x4_t v1474 = vmlaq_f32(v1290, v1300, v848);
          float32x4_t v860 = v1280;
          do
          {
            float32x4_t v1494 = v860;
            float32x4_t v861 = (float32x4_t)vdupq_n_s32(0x447A0000u);
            float32x4_t v862 = vmulq_f32(*v858, v861);
            float32x4_t v863 = vmulq_f32(v858[1], v861);
            float32x4_t v864 = vmulq_f32(v858[2], v861);
            __asm { FMOV            V0.4S, #4.0 }
            float32x4_t v866 = vaddq_f32(v860, _Q0);
            float32x4_t v867 = vaddq_f32(v1494, v857);
            float32x4_t v868 = vmulq_f32(v858[3], v861);
            __asm { FMOV            V0.4S, #12.0 }
            float32x4_t v870 = vaddq_f32(v1494, _Q0);
            long long v871 = v832;
            float32x4_t v872 = vmlaq_f32(v853, vmlaq_n_f32(v1474, v1494, *(float *)&v832), v862);
            float32x4_t v873 = vmlaq_f32(v853, vmlaq_n_f32(v1474, v866, *(float *)&v832), v863);
            float32x4_t v874 = vmlaq_f32(v853, vmlaq_n_f32(v1474, v867, *(float *)&v832), v864);
            float32x4_t v875 = vmlaq_f32(v853, vmlaq_n_f32(v1474, v870, *(float *)&v832), v868);
            int32x4_t v876 = v856;
            float32x4_t v877 = v854;
            float32x4_t v878 = vmlaq_f32(v854, vmlaq_n_f32(v1485, v1494, v850), v862);
            float32x4_t v879 = vmlaq_f32(v855, vmlaq_n_f32(v1466, v1494, v849), v862);
            float32x4_t v880 = vmlaq_f32(v854, vmlaq_n_f32(v1485, v866, v850), v863);
            int8x16_t v881 = vandq_s8((int8x16_t)vcgezq_f32(v872), (int8x16_t)vcgtzq_f32(v862));
            int8x16_t v882 = vandq_s8((int8x16_t)vcgezq_f32(v873), (int8x16_t)vcgtzq_f32(v863));
            int8x16_t v883 = vandq_s8((int8x16_t)vcgezq_f32(v874), (int8x16_t)vcgtzq_f32(v864));
            float32x4_t v884 = vmlaq_f32(v854, vmlaq_n_f32(v1485, v870, v850), v868);
            int8x16_t v885 = vandq_s8((int8x16_t)vcgezq_f32(v875), (int8x16_t)vcgtzq_f32(v868));
            float32x4_t v886 = vmlaq_f32(v855, vmlaq_n_f32(v1466, v870, v849), v868);
            float32x4_t v887 = vmlaq_f32(v1439, vdivq_f32(v1449, v872), v878);
            float32x4_t v888 = vmlaq_f32(v1417, vdivq_f32(v1407, v872), v879);
            float32x4_t v889 = vmlaq_f32(v1439, vdivq_f32(v1449, v873), v880);
            float32x4_t v890 = vdivq_f32(v1407, v874);
            float32x4_t v891 = vmlaq_f32(v1417, vdivq_f32(v1407, v873), vmlaq_f32(v855, vmlaq_n_f32(v1466, v866, v849), v863));
            float32x4_t v892 = vmlaq_f32(v1439, vdivq_f32(v1449, v874), vmlaq_f32(v877, vmlaq_n_f32(v1485, v867, v850), v864));
            float32x4_t v893 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
            int8x16_t v894 = (int8x16_t)vmulq_f32(v872, v893);
            int8x16_t v895 = (int8x16_t)vmulq_f32(v873, v893);
            int8x16_t v896 = (int8x16_t)vmulq_f32(v874, v893);
            int8x16_t v897 = (int8x16_t)vmulq_f32(v875, v893);
            int32x4_t v898 = vcvtmq_s32_f32(v887);
            int32x4_t v899 = vcvtmq_s32_f32(v888);
            int32x4_t v900 = vcvtmq_s32_f32(v889);
            int32x4_t v901 = vcvtmq_s32_f32(v891);
            int32x4_t v902 = vcvtmq_s32_f32(v892);
            int32x4_t v903 = vcvtmq_s32_f32(vmlaq_f32(v1417, v890, vmlaq_f32(v855, vmlaq_n_f32(v1466, v867, v849), v864)));
            v904.i64[0] = -1;
            v904.i64[1] = -1;
            int32x4_t v905 = vcvtmq_s32_f32(vmlaq_f32(v1439, vdivq_f32(v1449, v875), v884));
            int32x4_t v906 = vcvtmq_s32_f32(vmlaq_f32(v1417, vdivq_f32(v1407, v875), v886));
            int8x16_t v907 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1397, v906), (int8x16_t)vcgtq_s32(v1458, v905)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v906, (int8x16_t)v905), v904)), v885);
            int8x16_t v908 = (int8x16_t)vdupq_n_s32(0x477FE000u);
            float32x4_t v909 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1397, v899), (int8x16_t)vcgtq_s32(v1458, v898)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v899, (int8x16_t)v898), v904)), v881), v894, v908);
            float32x4_t v910 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1397, v901), (int8x16_t)vcgtq_s32(v1458, v900)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v901, (int8x16_t)v900), v904)), v882), v895, v908);
            float32x4_t v911 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1397, v903), (int8x16_t)vcgtq_s32(v1458, v902)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v903, (int8x16_t)v902), v904)), v883), v896, v908);
            float32x4_t v912 = (float32x4_t)vbslq_s8(v907, v897, v908);
            int32x4_t v913 = vmlaq_s32(v898, v899, v1428);
            long long v832 = v871;
            float32x4_t v854 = v877;
            int32x4_t v914 = vmlaq_s32(v900, v901, v1428);
            int32x4_t v856 = v876;
            v857.i64[0] = 0x4100000041000000;
            v857.i64[1] = 0x4100000041000000;
            int32x4_t v915 = vminq_s32(vmaxq_s32(v913, (int32x4_t)0), v856);
            int32x4_t v916 = vminq_s32(vmaxq_s32(v914, (int32x4_t)0), v856);
            int32x4_t v917 = vminq_s32(vmaxq_s32(vmlaq_s32(v902, v903, v1428), (int32x4_t)0), v856);
            int32x4_t v918 = vminq_s32(vmaxq_s32(vmlaq_s32(v905, v906, v1428), (int32x4_t)0), v856);
            unsigned __int32 v919 = v915.u32[1];
            *(float16x4_t *)v883.i8 = vcvt_f16_f32(v909);
            v834[v915.u32[0]] = fminl(*(short float *)v883.i16, v834[v915.u32[0]]);
            *(float16x4_t *)v902.i8 = vcvt_f16_f32(v910);
            v834[v916.u32[1]] = fminl(*(short float *)&v902.i16[1], v834[v916.u32[1]]);
            *(float16x4_t *)v915.i8 = vcvt_f16_f32(v911);
            v834[v917.u32[2]] = fminl(*(short float *)&v915.i16[2], v834[v917.u32[2]]);
            *(float16x4_t *)v881.i8 = vcvt_f16_f32(v912);
            v834[v918.u32[3]] = fminl(*(short float *)&v881.i16[3], v834[v918.u32[3]]);
            v834[v919] = fminl(*(short float *)&v883.i16[1], v834[v919]);
            v834[v916.u32[2]] = fminl(*(short float *)&v902.i16[2], v834[v916.u32[2]]);
            v834[v917.u32[3]] = fminl(*(short float *)&v915.i16[3], v834[v917.u32[3]]);
            v834[v918.u32[0]] = fminl(*(short float *)v881.i16, v834[v918.u32[0]]);
            v834[v915.u32[2]] = fminl(*(short float *)&v883.i16[2], v834[v915.u32[2]]);
            v834[v916.u32[3]] = fminl(*(short float *)&v902.i16[3], v834[v916.u32[3]]);
            v834[v917.u32[0]] = fminl(*(short float *)v915.i16, v834[v917.u32[0]]);
            v834[v918.u32[1]] = fminl(*(short float *)&v881.i16[1], v834[v918.u32[1]]);
            v834[v915.u32[3]] = fminl(*(short float *)&v883.i16[3], v834[v915.u32[3]]);
            v834[v916.u32[0]] = fminl(*(short float *)v902.i16, v834[v916.u32[0]]);
            v834[v917.u32[1]] = fminl(*(short float *)&v915.i16[1], v834[v917.u32[1]]);
            v834[v918.u32[2]] = fminl(*(short float *)&v881.i16[2], v834[v918.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v860 = vaddq_f32(v1494, _Q0);
            v858 += 4;
            v859 += 16;
          }
          while (v859 < v846);
          unint64_t v859 = (((v824 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v836 = (float32x4_t)a14;
          float32x4_t v837 = (float32x4_t)a15;
          float32x4_t v839 = a12;
          float32x4_t v838 = a13;
          float v841 = *(float *)&a18;
          float v840 = *(float *)&a11;
          float v842 = *(float *)&a16;
          float v844 = v1361;
          float v845 = v1352;
          float v847 = 0.5;
          float32x4_t v848 = v1369;
        }
        if (v859 < v824)
        {
          do
          {
            float v921 = v858->f32[0] * 1000.0;
            _Q7 = vaddq_f32(v837, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v839, v844 * (float)(v921 * (float)((float)((float)v859 + v847) - v840))), v838, v845 * (float)((float)((float)((float)v843 + v847) - *((float *)&a11 + 1)) * v921)), v836, v921));
            if (_Q7.f32[2] >= 0.0 && v921 > 0.0)
            {
              uint64_t v923 = (int)vmlas_n_f32(v841, v842 / _Q7.f32[2], _Q7.f32[0]);
              if ((v923 & 0x80000000) == 0 && (__int16)v826 > (int)v923)
              {
                _S1 = *((float *)&a17 + 1) / _Q7.f32[2];
                __asm { FMLA            S2, S1, V7.S[1] }
                if (((int)_S2 & 0x80000000) == 0 && (__int16)v825 > (int)(unsigned __int16)(int)_S2)
                {
                  _S1 = _Q7.f32[2] * 0.001;
                  __asm
                  {
                    FCVT            H4, S1
                    FCMP            H1, #0
                  }
                  if (_ZF || _H1 > _H4) {
                    v834[v833 * (unsigned __int16)(int)_S2 + v923] = _H4;
                  }
                }
              }
            }
            ++v859;
            v858 = (float32x4_t *)((char *)v858 + 4);
          }
          while (v824 != v859);
        }
        ++v843;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v848 = vaddq_f32(v848, _Q0);
        v857.i64[0] = 0x4100000041000000;
        v857.i64[1] = 0x4100000041000000;
      }
      while (v843 != v823);
    }
    if (v835)
    {
      uint64_t v931 = 0;
      long long v932 = *(_OWORD *)&buf.width;
      vImagePixelCount v933 = buf.width >> 4;
      v934 = (char *)buf.data;
      vImagePixelCount v935 = buf.height;
      if (buf.width >> 4 <= 1) {
        vImagePixelCount v933 = 1;
      }
      if (buf.height <= 1) {
        vImagePixelCount v935 = 1;
      }
      unint64_t v936 = buf.width & 0xFFFFFFF0;
      do
      {
        v937 = (int8x8_t *)&v934[*((void *)&v932 + 1) * v931];
        vImagePixelCount v938 = v933;
        if ((unint64_t)v932 >= 0x10)
        {
          do
          {
            float16x4_t v939 = (float16x4_t)v937[2];
            float16x4_t v940 = (float16x4_t)v937[3];
            int8x8_t v941 = vbic_s8(v937[1], (int8x8_t)vceq_f16((float16x4_t)v937[1], (float16x4_t)0x8400840084008400));
            int8x8_t *v937 = vbic_s8(*v937, (int8x8_t)vceq_f16((float16x4_t)*v937, (float16x4_t)0x8400840084008400));
            v937[1] = v941;
            v937[2] = vbic_s8((int8x8_t)v939, (int8x8_t)vceq_f16(v939, (float16x4_t)0x8400840084008400));
            v937[3] = vbic_s8((int8x8_t)v940, (int8x8_t)vceq_f16(v940, (float16x4_t)0x8400840084008400));
            v937 += 4;
            --v938;
          }
          while (v938);
        }
        unint64_t v942 = v932 & 0xFFFFFFFF0000000FLL;
        if ((unint64_t)v932 > v936)
        {
          do
          {
            if (*(short float *)v937->i16 == COERCE_SHORT_FLOAT(31743)) {
              v937->i16[0] = 0;
            }
            v937 = (int8x8_t *)((char *)v937 + 2);
            --v942;
          }
          while (v942);
        }
        ++v931;
      }
      while (v931 != v935);
    }
    goto LABEL_389;
  }
  if (PixelFormatType <= 1717855599)
  {
    if (PixelFormatType == 825437747)
    {
      size_t v1281 = CVPixelBufferGetHeight(a1);
      size_t v943 = CVPixelBufferGetWidth(a1);
      size_t v944 = CVPixelBufferGetHeight(pixelBuffer);
      unsigned int v945 = CVPixelBufferGetWidth(pixelBuffer);
      size_t v946 = CVPixelBufferGetBytesPerRow(pixelBuffer);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      CVPixelBufferLockBaseAddress(a2, 0);
      memset(&v1498, 0, sizeof(v1498));
      v947 = (CGRect *)MEMORY[0x263F001A8];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
      memset(&buf, 0, sizeof(buf));
      PixelBufferUtils::asVImageBuffer(pixelBuffer, *v947, &buf);
      PixelBufferUtils::asVImageBuffer(a2, *v947, &v1497);
      size_t v952 = v946 >> 1;
      v1271 = (char *)v1497.data;
      size_t v1267 = v1497.rowBytes;
      v953 = (__int16 *)buf.data;
      size_t v954 = (v946 >> 1) * v944;
      if (v954) {
        memset_pattern16(buf.data, &unk_247F24690, 2 * v954);
      }
      vImagePixelCount v955 = buf.height;
      if (v1281)
      {
        unint64_t v956 = 0;
        v957.i32[1] = v1476;
        v958.i32[1] = HIDWORD(a9);
        float v959 = *(float *)&a11;
        float v960 = 1.0 / *(float *)&a9;
        float v961 = 1.0 / *(float *)&v1476;
        unint64_t v962 = v943 & 0xFFFFFFFFFFFFFFF0;
        float v963 = 0.5;
        *(float *)v948.i32 = 0.5 - *((float *)&a11 + 1);
        float32x4_t v964 = (float32x4_t)vdupq_lane_s32(v948, 0);
        float32x4_t v966 = a13;
        float32x4_t v965 = (float32x4_t)a14;
        *(float *)v948.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
        *(float *)v957.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
        *(float *)v958.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
        float32x4_t v1252 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
        float32x4_t v1254 = (float32x4_t)vdupq_lane_s32(v958, 0);
        float32x4_t v1248 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
        float32x4_t v1250 = (float32x4_t)vdupq_lane_s32(v957, 0);
        float32x4_t v1245 = (float32x4_t)vdupq_laneq_s32(a14, 2);
        float32x4_t v1246 = (float32x4_t)vdupq_lane_s32(v948, 0);
        float32x4_t v967 = a12;
        *(float *)&long long v949 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
        *(float *)&long long v950 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
        *(float *)&long long v951 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
        float32x4_t v1243 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
        float32x4_t v968 = (float32x4_t)a15;
        float32x2_t v969 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
        float32x4_t v970 = (float32x4_t)vdupq_laneq_s32(a15, 2);
        float32x4_t v971 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
        int32x4_t v972 = vdupq_n_s32(v945);
        int v973 = (__int16)v945;
        int v974 = (__int16)v944;
        float32x2_t v975 = (float32x2_t)a18;
        unint64_t v1240 = (((v943 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
        v1264 = (char *)v1498.data;
        size_t v1262 = v1498.rowBytes;
        int32x4_t v1325 = vdupq_n_s32(v952);
        size_t v1260 = v943;
        float v1257 = 1.0 / *(float *)&a9;
        int v1241 = (__int16)v944;
        int v1242 = (__int16)v945;
        float32x4_t v1388 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
        float32x4_t v1398 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
        float32x4_t v1370 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
        int32x4_t v1379 = vdupq_n_s32(LODWORD(buf.height) * (int)v952 - 2);
        float32x4_t v1353 = v970;
        float32x4_t v1335 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
        int32x4_t v1344 = vdupq_n_s32(v944);
        float32x4_t v976 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
        do
        {
          v977 = (float32x4_t *)&v1264[v1262 * v956];
          v978 = (__int16 *)&v1271[v956 * v1267];
          if (v962)
          {
            uint64_t v979 = 0;
            float32x4_t v1429 = vmlaq_f32(v1252, v1254, v964);
            float32x4_t v1418 = vmlaq_f32(v1248, v1250, v964);
            float32x4_t v1291 = v964;
            float32x4_t v1408 = vmlaq_f32(v1245, v1246, v964);
            float32x4_t v980 = v1243;
            v981.i64[0] = 0x4100000041000000;
            v981.i64[1] = 0x4100000041000000;
            do
            {
              uint64_t v1486 = v979;
              v1495 = v978;
              float32x4_t v982 = (float32x4_t)vdupq_n_s32(0x447A0000u);
              float32x4_t v983 = vmulq_f32(*v977, v982);
              float32x4_t v984 = vmulq_f32(v977[1], v982);
              float32x4_t v985 = vmulq_f32(v977[2], v982);
              __asm { FMOV            V0.4S, #4.0 }
              float32x4_t v987 = vaddq_f32(v980, _Q0);
              float32x4_t v988 = vaddq_f32(v980, v981);
              float32x4_t v989 = vmulq_f32(v977[3], v982);
              __asm { FMOV            V3.4S, #12.0 }
              float32x4_t v991 = vaddq_f32(v980, _Q3);
              float32x4_t v992 = vmlaq_f32(v970, vmlaq_n_f32(v1408, v980, *(float *)&v949), v983);
              float32x4_t v993 = vmlaq_f32(v970, vmlaq_n_f32(v1408, v987, *(float *)&v949), v984);
              float32x4_t v994 = vmlaq_f32(v970, vmlaq_n_f32(v1408, v988, *(float *)&v949), v985);
              float32x4_t v995 = vmlaq_f32(v970, vmlaq_n_f32(v1408, v991, *(float *)&v949), v989);
              float32x4_t v996 = vmlaq_f32(v971, vmlaq_n_f32(v1429, v980, *(float *)&v951), v983);
              long long v997 = v949;
              float32x4_t v998 = vmlaq_f32(v1335, vmlaq_n_f32(v1418, v980, *(float *)&v950), v983);
              float32x4_t v999 = vmlaq_f32(v971, vmlaq_n_f32(v1429, v987, *(float *)&v951), v984);
              float32x4_t v1000 = vmlaq_f32(v1335, vmlaq_n_f32(v1418, v987, *(float *)&v950), v984);
              int8x16_t v1001 = vandq_s8((int8x16_t)vcgezq_f32(v992), (int8x16_t)vcgtzq_f32(v983));
              float32x4_t v1002 = vmlaq_f32(v971, vmlaq_n_f32(v1429, v988, *(float *)&v951), v985);
              int8x16_t v1003 = vandq_s8((int8x16_t)vcgezq_f32(v993), (int8x16_t)vcgtzq_f32(v984));
              float32x4_t v1004 = vmlaq_f32(v1335, vmlaq_n_f32(v1418, v988, *(float *)&v950), v985);
              int8x16_t v1005 = vandq_s8((int8x16_t)vcgezq_f32(v994), (int8x16_t)vcgtzq_f32(v985));
              float32x4_t v1006 = vmlaq_f32(v971, vmlaq_n_f32(v1429, v991, *(float *)&v951), v989);
              int8x16_t v1007 = vandq_s8((int8x16_t)vcgezq_f32(v995), (int8x16_t)vcgtzq_f32(v989));
              int32x4_t v1008 = v972;
              float32x4_t v1009 = v971;
              long long v1010 = v951;
              long long v1011 = v950;
              float32x4_t v1012 = vmlaq_f32(v1335, vmlaq_n_f32(v1418, v991, *(float *)&v950), v989);
              float32x4_t v1013 = vmlaq_f32(v1370, vdivq_f32(v976, v994), v1002);
              int32x4_t v1014 = vcvtmq_s32_f32(vmlaq_f32(v1370, vdivq_f32(v976, v992), v996));
              int32x4_t v1015 = vcvtmq_s32_f32(vmlaq_f32(v1398, vdivq_f32(v1388, v992), v998));
              int32x4_t v1016 = vcvtmq_s32_f32(vmlaq_f32(v1370, vdivq_f32(v976, v993), v999));
              int32x4_t v1017 = vcvtmq_s32_f32(vmlaq_f32(v1398, vdivq_f32(v1388, v993), v1000));
              int32x4_t v1018 = vcvtmq_s32_f32(v1013);
              int32x4_t v1019 = vcvtmq_s32_f32(vmlaq_f32(v1398, vdivq_f32(v1388, v994), v1004));
              int32x4_t v1020 = vcvtmq_s32_f32(vmlaq_f32(v1370, vdivq_f32(v976, v995), v1006));
              float32x4_t v1021 = vmlaq_f32(v1398, vdivq_f32(v1388, v995), v1012);
              long long v950 = v1011;
              long long v951 = v1010;
              float32x4_t v971 = v1009;
              int32x4_t v972 = v1008;
              int32x4_t v1022 = vcvtmq_s32_f32(v1021);
              int8x16_t v1023 = (int8x16_t)vcgtq_s32(v1008, v1014);
              v1008.i64[0] = -1;
              v1008.i64[1] = -1;
              int32x4_t v1024 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1344, v1015), v1023), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1015, (int8x16_t)v1014), v1008)), v1001);
              *(int16x4_t *)v1023.i8 = vmovn_s32(v1024);
              v1501.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v1014), *(int8x8_t *)v1023.i8);
              v1501.val[1] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v1015), *(int8x8_t *)v1023.i8);
              int32x4_t v1025 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1344, v1017), (int8x16_t)vcgtq_s32(v972, v1016)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1017, (int8x16_t)v1016), v1008)), v1003);
              *(int16x4_t *)v999.f32 = vmovn_s32(v1025);
              int32x4_t v1026 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1344, v1019), (int8x16_t)vcgtq_s32(v972, v1018)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1019, (int8x16_t)v1018), v1008)), v1005);
              v981.i64[0] = 0x4100000041000000;
              v981.i64[1] = 0x4100000041000000;
              v1027 = v978;
              vst2_s16(v1027, v1501);
              v1027 += 8;
              v1501.val[1] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v1016), *(int8x8_t *)v999.f32);
              *(int8x8_t *)v1001.i8 = vorn_s8((int8x8_t)vmovn_s32(v1017), *(int8x8_t *)v999.f32);
              *(int16x4_t *)v999.f32 = vmovn_s32(v1026);
              vst2_s16(v1027, *(int16x4x2_t *)((char *)&v1001 - 8));
              v1501.val[1] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v1018), *(int8x8_t *)v999.f32);
              *(int8x8_t *)v1001.i8 = vorn_s8((int8x8_t)vmovn_s32(v1019), *(int8x8_t *)v999.f32);
              long long v949 = v997;
              int32x4_t v1028 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1344, v1022), (int8x16_t)vcgtq_s32(v972, v1020)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1022, (int8x16_t)v1020), v1008)), v1007);
              int8x16_t v1029 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
              float32x4_t v1030 = (float32x4_t)vbslq_s8((int8x16_t)v1024, (int8x16_t)vmulq_f32(v992, v981), v1029);
              float32x4_t v1031 = (float32x4_t)vbslq_s8((int8x16_t)v1025, (int8x16_t)vmulq_f32(v993, v981), v1029);
              float32x4_t v1032 = (float32x4_t)vbslq_s8((int8x16_t)v1026, (int8x16_t)vmulq_f32(v994, v981), v1029);
              float32x4_t v1033 = (float32x4_t)vbslq_s8((int8x16_t)v1028, (int8x16_t)vmulq_f32(v995, v981), v1029);
              v1034 = v978 + 16;
              *(int16x4_t *)v995.f32 = vmovn_s32(v1028);
              vst2_s16(v1034, *(int16x4x2_t *)((char *)&v1001 - 8));
              float32x4_t v970 = v1353;
              *(int8x8_t *)v992.f32 = vorn_s8((int8x8_t)vmovn_s32(v1020), *(int8x8_t *)v995.f32);
              *(int8x8_t *)v1029.i8 = vorn_s8((int8x8_t)vmovn_s32(v1022), *(int8x8_t *)v995.f32);
              v1035 = v978 + 24;
              vst2_s16(v1035, (int16x4x2_t)v992);
              int32x4_t v1036 = vminq_s32(vmaxq_s32(vmlaq_s32(v1014, v1015, v1325), (int32x4_t)0), v1379);
              unsigned __int32 v1475 = v1036.u32[1];
              uint64_t v1037 = v1036.i64[1];
              unsigned __int32 v1038 = v1036.i32[0];
              int32x4_t v1039 = vcvtq_s32_f32(v1030);
              __int32 v1040 = v1039.i32[1];
              __int32 v1041 = v1039.i32[2];
              __int32 v1450 = v1039.i32[3];
              __int32 v1042 = v1039.i32[0];
              int32x4_t v1043 = vminq_s32(vmaxq_s32(vmlaq_s32(v1020, v1022, v1325), (int32x4_t)0), v1379);
              int32x4_t v1044 = vcvtq_s32_f32(v1033);
              unsigned __int32 v1045 = v1043.u32[3];
              unsigned __int32 v1440 = v1043.u32[1];
              unsigned __int32 v1046 = v1043.u32[2];
              unsigned __int32 v1047 = v1043.i32[0];
              int32x4_t v1048 = vminq_s32(vmaxq_s32(vmlaq_s32(v1018, v1019, v1325), (int32x4_t)0), v1379);
              unint64_t v1049 = v962;
              unsigned __int32 v1050 = v1048.u32[2];
              unsigned __int32 v1051 = v1048.u32[3];
              unsigned __int32 v1052 = v1048.u32[1];
              unsigned __int32 v1053 = v1048.i32[0];
              int32x4_t v1054 = vcvtq_s32_f32(v1032);
              __int32 v1055 = v1054.i32[2];
              v1056 = v977;
              __int32 v1057 = v1054.i32[3];
              __int32 v1058 = v1054.i32[1];
              __int32 v1059 = v1054.i32[0];
              int32x4_t v1060 = vminq_s32(vmaxq_s32(vmlaq_s32(v1016, v1017, v1325), (int32x4_t)0), v1379);
              __int32 v1061 = v953[v1038];
              int32x4_t v1062 = vcvtq_s32_f32(v1031);
              if (v1042 < v1061) {
                LOWORD(v1061) = v1042;
              }
              unsigned __int32 v1063 = v1060.u32[1];
              v953[v1038] = v1061;
              unsigned __int32 v1064 = v1060.u32[2];
              unsigned __int32 v1065 = v1060.u32[3];
              __int16 v1066 = v1062.i16[2];
              unsigned __int32 v1067 = v1060.i32[0];
              __asm { FMOV            V0.4S, #16.0 }
              float32x4_t v980 = vaddq_f32(v980, _Q0);
              if (v1062.i32[1] >= v953[v1063]) {
                __int16 v1066 = v953[v1063];
              }
              v953[v1063] = v1066;
              if (v1055 >= v953[v1050]) {
                LOWORD(v1055) = v953[v1050];
              }
              v953[v1050] = v1055;
              unint64_t v962 = v1049;
              int v1069 = v953[v1045];
              if (v1044.i32[3] < v1069) {
                LOWORD(v1069) = v1044.i16[6];
              }
              v953[v1045] = v1069;
              __int32 v1070 = v953[v1475];
              if (v1040 < v1070) {
                LOWORD(v1070) = v1040;
              }
              v953[v1475] = v1070;
              int v1071 = v953[v1064];
              if (v1062.i32[2] < v1071) {
                LOWORD(v1071) = v1062.i16[4];
              }
              v953[v1064] = v1071;
              __int32 v1072 = v953[v1051];
              if (v1057 < v1072) {
                LOWORD(v1072) = v1057;
              }
              v953[v1051] = v1072;
              int v1073 = v953[v1047];
              if (v1044.i32[0] < v1073) {
                LOWORD(v1073) = v1044.i16[0];
              }
              v953[v1047] = v1073;
              __int32 v1074 = v953[v1037];
              if (v1041 < v1074) {
                LOWORD(v1074) = v1041;
              }
              v953[v1037] = v1074;
              int v1075 = v953[v1065];
              if (v1062.i32[3] < v1075) {
                LOWORD(v1075) = v1062.i16[6];
              }
              v953[v1065] = v1075;
              __int32 v1076 = v953[v1053];
              if (v1059 < v1076) {
                LOWORD(v1076) = v1059;
              }
              v953[v1053] = v1076;
              int v1077 = v953[v1440];
              if (v1044.i32[1] < v1077) {
                LOWORD(v1077) = v1044.i16[2];
              }
              v953[v1440] = v1077;
              __int32 v1078 = v953[HIDWORD(v1037)];
              if (v1450 < v1078) {
                LOWORD(v1078) = v1450;
              }
              v953[HIDWORD(v1037)] = v1078;
              int v1079 = v953[v1067];
              if (v1062.i32[0] < v1079) {
                LOWORD(v1079) = v1062.i16[0];
              }
              v953[v1067] = v1079;
              __int32 v1080 = v953[v1052];
              if (v1058 < v1080) {
                LOWORD(v1080) = v1058;
              }
              v953[v1052] = v1080;
              int v1081 = v953[v1046];
              if (v1044.i32[2] < v1081) {
                LOWORD(v1081) = v1044.i16[4];
              }
              v953[v1046] = v1081;
              v977 = v1056 + 4;
              v978 = v1495 + 32;
              uint64_t v979 = v1486 + 16;
            }
            while (v1486 + 16 < v1049);
            unint64_t v1082 = v1240;
            float32x4_t v965 = (float32x4_t)a14;
            float32x4_t v968 = (float32x4_t)a15;
            float32x4_t v967 = a12;
            float32x4_t v966 = a13;
            float32x2_t v975 = (float32x2_t)a18;
            float v959 = *(float *)&a11;
            float32x2_t v969 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
            size_t v943 = v1260;
            size_t v952 = v946 >> 1;
            float v960 = v1257;
            float v961 = 1.0 / *(float *)&v1476;
            float v963 = 0.5;
            float32x4_t v964 = v1291;
            int v974 = v1241;
            int v973 = v1242;
          }
          else
          {
            unint64_t v1082 = 0;
          }
          if (v1082 < v943)
          {
            do
            {
              float v1083 = v977->f32[0] * 1000.0;
              int32x4_t v1084 = (int32x4_t)vaddq_f32(v968, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v967, v960 * (float)(v1083 * (float)((float)((float)v1082 + v963) - v959))), v966, v961* (float)((float)((float)((float)v956 + v963) - *((float *)&a11 + 1)) * v1083)), v965, v1083));
              uint64_t v1085 = 0xFFFF0000FFFFLL;
              if (*(float *)&v1084.i32[2] >= 0.0 && v1083 > 0.0)
              {
                int32x2_t v1086 = vcvt_s32_f32(vmla_f32(v975, vdiv_f32(v969, (float32x2_t)vdup_laneq_s32(v1084, 2)), *(float32x2_t *)v1084.i8));
                if ((v1086.i32[0] & 0x80000000) == 0
                  && v973 > v1086.i32[0]
                  && (v1086.i32[1] & 0x80000000) == 0
                  && v974 > v1086.u16[2])
                {
                  v1087 = &v953[v952 * v1086.u16[2]];
                  unsigned int v1088 = vcvts_n_s32_f32(*(float *)&v1084.i32[2], 3uLL);
                  if (v1088 <= (unsigned __int16)(v1087[v1086.u32[0]] - 1)) {
                    v1087[v1086.u32[0]] = v1088;
                  }
                  uint64_t v1085 = (uint64_t)v1086;
                }
              }
              __int16 *v978 = v1085;
              v978[1] = WORD2(v1085);
              ++v1082;
              v977 = (float32x4_t *)((char *)v977 + 4);
              v978 += 2;
            }
            while (v943 != v1082);
          }
          ++v956;
          __asm { FMOV            V0.4S, #1.0 }
          float32x4_t v964 = vaddq_f32(v964, _Q0);
        }
        while (v956 != v1281);
        vImagePixelCount v955 = buf.height;
      }
      if (v955)
      {
        uint64_t v1090 = 0;
        long long v1091 = *(_OWORD *)&buf.width;
        v1092 = (char *)buf.data;
        vImagePixelCount v1093 = buf.width >> 4;
        if (buf.width >> 4 <= 1) {
          vImagePixelCount v1093 = 1;
        }
        unint64_t v1094 = buf.width & 0xFFFFFFF0;
        do
        {
          v1095 = (int8x8_t *)&v1092[*((void *)&v1091 + 1) * v1090];
          vImagePixelCount v1096 = v1093;
          if ((unint64_t)v1091 >= 0x10)
          {
            do
            {
              int16x4_t v1097 = (int16x4_t)v1095[2];
              int16x4_t v1098 = (int16x4_t)v1095[3];
              int8x8_t v1099 = vbic_s8(v1095[1], (int8x8_t)vceq_s16((int16x4_t)v1095[1], (int16x4_t)0x8000800080008000));
              int8x8_t *v1095 = vbic_s8(*v1095, (int8x8_t)vceq_s16((int16x4_t)*v1095, (int16x4_t)0x8000800080008000));
              v1095[1] = v1099;
              v1095[2] = vbic_s8((int8x8_t)v1097, (int8x8_t)vceq_s16(v1097, (int16x4_t)0x8000800080008000));
              v1095[3] = vbic_s8((int8x8_t)v1098, (int8x8_t)vceq_s16(v1098, (int16x4_t)0x8000800080008000));
              v1095 += 4;
              --v1096;
            }
            while (v1096);
          }
          unint64_t v1100 = v1091 & 0xFFFFFFFF0000000FLL;
          if ((unint64_t)v1091 > v1094)
          {
            do
            {
              if (v1095->i16[0] == 0x7FFF) {
                v1095->i16[0] = 0;
              }
              v1095 = (int8x8_t *)((char *)v1095 + 2);
              --v1100;
            }
            while (v1100);
          }
          ++v1090;
        }
        while (v1090 != v955);
      }
      goto LABEL_321;
    }
    if (PixelFormatType == 1278226534) {
      goto LABEL_88;
    }
    if (PixelFormatType != 1278226536) {
      goto LABEL_322;
    }
LABEL_124:
    size_t v474 = CVPixelBufferGetHeight(a1);
    size_t v475 = CVPixelBufferGetWidth(a1);
    size_t v476 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v477 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v478 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&v1498, 0, sizeof(v1498));
    v479 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v479, &buf);
    PixelBufferUtils::asVImageBuffer(a2, *v479, &v1497);
    size_t v482 = v478 >> 1;
    v483 = (char *)v1497.data;
    size_t v484 = v1497.rowBytes;
    v485 = (short float *)buf.data;
    if (v482 * v476) {
      memset_pattern16(buf.data, &unk_247F24680, 2 * v482 * v476);
    }
    vImagePixelCount v486 = buf.height;
    if (v474)
    {
      unint64_t v487 = 0;
      v488.i32[1] = v1476;
      v489.i32[1] = HIDWORD(a9);
      float v490 = *(float *)&a11;
      float v491 = 1.0 / *(float *)&a9;
      float v492 = 1.0 / *(float *)&v1476;
      unint64_t v493 = v475 & 0xFFFFFFFFFFFFFFF0;
      float v494 = 0.5;
      *(float *)v480.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v495 = (float32x4_t)vdupq_lane_s32(v480, 0);
      float32x4_t v497 = a13;
      float32x4_t v496 = (float32x4_t)a14;
      *(float *)v480.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
      *(float *)v488.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
      *(float *)v489.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
      float32x4_t v1321 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1331 = (float32x4_t)vdupq_lane_s32(v489, 0);
      float32x4_t v1287 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1297 = (float32x4_t)vdupq_lane_s32(v488, 0);
      float32x4_t v1269 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      float32x4_t v1277 = (float32x4_t)vdupq_lane_s32(v480, 0);
      float32x4_t v498 = a12;
      float v499 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      float v1404 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      *(float *)&long long v481 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v1266 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      float32x4_t v500 = (float32x4_t)a15;
      float32x2_t v501 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
      float32x4_t v502 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v503 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v504 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      int32x4_t v1367 = vdupq_n_s32(v477);
      int32x4_t v505 = vdupq_n_s32(v476);
      float32x2_t v506 = (float32x2_t)a18;
      float32x4_t v507 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      v508 = (char *)v1498.data;
      size_t v509 = v1498.rowBytes;
      float v1349 = 1.0 / *(float *)&a9;
      float v1340 = 1.0 / *(float *)&v1476;
      float32x4_t v1436 = v502;
      float v1446 = v499;
      float32x4_t v1414 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      int32x4_t v1425 = vdupq_n_s32(LODWORD(buf.height) * (int)v482 - 2);
      int32x4_t v1385 = vdupq_n_s32(v482);
      float32x4_t v1394 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      float32x4_t v1376 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      do
      {
        v510 = (float32x4_t *)&v508[v509 * v487];
        v511 = (__int16 *)&v483[v487 * v484];
        unint64_t v512 = 0;
        if (v493)
        {
          float32x4_t v1471 = vmlaq_f32(v1321, v1331, v495);
          float32x4_t v1463 = vmlaq_f32(v1287, v1297, v495);
          float32x4_t v1358 = v495;
          float32x4_t v1455 = vmlaq_f32(v1269, v1277, v495);
          float32x4_t v513 = v1266;
          do
          {
            float32x4_t v514 = (float32x4_t)vdupq_n_s32(0x447A0000u);
            float32x4_t v515 = vmulq_f32(*v510, v514);
            float32x4_t v516 = vmulq_f32(v510[1], v514);
            float32x4_t v517 = vmulq_f32(v510[2], v514);
            __asm { FMOV            V0.4S, #4.0 }
            float32x4_t v519 = vaddq_f32(v513, _Q0);
            _Q0.i64[0] = 0x4100000041000000;
            _Q0.i64[1] = 0x4100000041000000;
            float32x4_t v520 = vaddq_f32(v513, _Q0);
            float32x4_t v521 = vmulq_f32(v510[3], v514);
            __asm { FMOV            V0.4S, #12.0 }
            float32x4_t v523 = vaddq_f32(v513, _Q0);
            float32x4_t v524 = vmlaq_f32(v502, vmlaq_n_f32(v1455, v513, v499), v515);
            float32x4_t v525 = vmlaq_f32(v502, vmlaq_n_f32(v1455, v519, v499), v516);
            float32x4_t v526 = vmlaq_f32(v502, vmlaq_n_f32(v1455, v520, v499), v517);
            float32x4_t v527 = vmlaq_f32(v502, vmlaq_n_f32(v1455, v523, v499), v521);
            long long v528 = v481;
            float32x4_t v529 = vmlaq_f32(v503, vmlaq_n_f32(v1471, v513, *(float *)&v481), v515);
            float32x4_t v530 = vmlaq_f32(v504, vmlaq_n_f32(v1463, v513, v1404), v515);
            float32x4_t v531 = vmlaq_f32(v503, vmlaq_n_f32(v1471, v519, *(float *)&v481), v516);
            float32x4_t v532 = vmlaq_f32(v504, vmlaq_n_f32(v1463, v519, v1404), v516);
            int8x16_t v1482 = vandq_s8((int8x16_t)vcgezq_f32(v524), (int8x16_t)vcgtzq_f32(v515));
            float32x4_t v533 = vmlaq_f32(v503, vmlaq_n_f32(v1471, v520, *(float *)&v481), v517);
            int8x16_t v534 = vandq_s8((int8x16_t)vcgezq_f32(v525), (int8x16_t)vcgtzq_f32(v516));
            float32x4_t v535 = vmlaq_f32(v504, vmlaq_n_f32(v1463, v520, v1404), v517);
            int8x16_t v536 = vandq_s8((int8x16_t)vcgezq_f32(v526), (int8x16_t)vcgtzq_f32(v517));
            float32x4_t v537 = vmlaq_f32(v503, vmlaq_n_f32(v1471, v523, *(float *)&v528), v521);
            int8x16_t v1491 = vandq_s8((int8x16_t)vcgezq_f32(v527), (int8x16_t)vcgtzq_f32(v521));
            float32x4_t v538 = vmlaq_f32(v504, vmlaq_n_f32(v1463, v523, v1404), v521);
            float32x4_t v539 = vmlaq_f32(v507, vdivq_f32(v1414, v524), v529);
            float32x4_t v540 = vmlaq_f32(v1376, vdivq_f32(v1394, v524), v530);
            float32x4_t v541 = vmlaq_f32(v507, vdivq_f32(v1414, v525), v531);
            float32x4_t v542 = vmlaq_f32(v1376, vdivq_f32(v1394, v525), v532);
            float32x4_t v543 = vdivq_f32(v1414, v527);
            float32x4_t v544 = vdivq_f32(v1394, v527);
            float32x4_t v545 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
            int8x16_t v546 = (int8x16_t)vmulq_f32(v524, v545);
            int8x16_t v547 = (int8x16_t)vmulq_f32(v525, v545);
            int8x16_t v548 = (int8x16_t)vmulq_f32(v526, v545);
            int8x16_t v549 = (int8x16_t)vmulq_f32(v527, v545);
            int32x4_t v550 = vcvtmq_s32_f32(v539);
            int32x4_t v551 = vcvtmq_s32_f32(v540);
            int32x4_t v552 = vcvtmq_s32_f32(v541);
            int32x4_t v553 = vcvtmq_s32_f32(v542);
            int32x4_t v554 = vcvtmq_s32_f32(vmlaq_f32(v507, vdivq_f32(v1414, v526), v533));
            long long v481 = v528;
            int32x4_t v555 = vcvtmq_s32_f32(vmlaq_f32(v1376, vdivq_f32(v1394, v526), v535));
            int32x4_t v556 = vcvtmq_s32_f32(vmlaq_f32(v507, v543, v537));
            int32x4_t v557 = vcvtmq_s32_f32(vmlaq_f32(v1376, v544, v538));
            v517.i64[0] = -1;
            v517.i64[1] = -1;
            int32x4_t v558 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v505, v551), (int8x16_t)vcgtq_s32(v1367, v550)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v551, (int8x16_t)v550), (int32x4_t)v517)), v1482);
            *(int16x4_t *)v537.f32 = vmovn_s32(v558);
            *(int8x8_t *)v544.f32 = vorn_s8((int8x8_t)vmovn_s32(v550), *(int8x8_t *)v537.f32);
            int8x8_t v559 = vorn_s8((int8x8_t)vmovn_s32(v551), *(int8x8_t *)v537.f32);
            int32x4_t v560 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v505, v553), (int8x16_t)vcgtq_s32(v1367, v552)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v553, (int8x16_t)v552), (int32x4_t)v517)), v534);
            *(int16x4_t *)v540.f32 = vmovn_s32(v560);
            int32x4_t v561 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v505, v555), (int8x16_t)vcgtq_s32(v1367, v554)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v555, (int8x16_t)v554), (int32x4_t)v517)), v536);
            v562 = v511;
            vst2_s16(v562, (int16x4x2_t)v544);
            v562 += 8;
            *(int8x8_t *)v544.f32 = vorn_s8((int8x8_t)vmovn_s32(v552), *(int8x8_t *)v540.f32);
            int8x8_t v563 = vorn_s8((int8x8_t)vmovn_s32(v553), *(int8x8_t *)v540.f32);
            *(int16x4_t *)v536.i8 = vmovn_s32(v561);
            vst2_s16(v562, (int16x4x2_t)v544);
            *(int8x8_t *)v544.f32 = vorn_s8((int8x8_t)vmovn_s32(v554), *(int8x8_t *)v536.i8);
            int8x8_t v564 = vorn_s8((int8x8_t)vmovn_s32(v555), *(int8x8_t *)v536.i8);
            int8x16_t v565 = (int8x16_t)vdupq_n_s32(0x477FE000u);
            int32x4_t v566 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v505, v557), (int8x16_t)vcgtq_s32(v1367, v556)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v557, (int8x16_t)v556), (int32x4_t)v517)), v1491);
            float32x4_t v567 = (float32x4_t)vbslq_s8((int8x16_t)v558, v546, v565);
            float32x4_t v568 = (float32x4_t)vbslq_s8((int8x16_t)v560, v547, v565);
            float32x4_t v569 = (float32x4_t)vbslq_s8((int8x16_t)v561, v548, v565);
            float32x4_t v570 = (float32x4_t)vbslq_s8((int8x16_t)v566, v549, v565);
            *(int16x4_t *)v566.i8 = vmovn_s32(v566);
            v571 = v511 + 16;
            vst2_s16(v571, (int16x4x2_t)v544);
            float32x4_t v502 = v1436;
            float v499 = v1446;
            *(int8x8_t *)v565.i8 = vorn_s8((int8x8_t)vmovn_s32(v556), *(int8x8_t *)v566.i8);
            *(int8x8_t *)v541.f32 = vorn_s8((int8x8_t)vmovn_s32(v557), *(int8x8_t *)v566.i8);
            v572 = v511 + 24;
            vst2_s16(v572, *(int16x4x2_t *)((char *)&v541 - 8));
            int32x4_t v573 = vminq_s32(vmaxq_s32(vmlaq_s32(v550, v551, v1385), (int32x4_t)0), v1425);
            int32x4_t v574 = vminq_s32(vmaxq_s32(vmlaq_s32(v552, v553, v1385), (int32x4_t)0), v1425);
            int32x4_t v575 = vminq_s32(vmaxq_s32(vmlaq_s32(v554, v555, v1385), (int32x4_t)0), v1425);
            int32x4_t v576 = vminq_s32(vmaxq_s32(vmlaq_s32(v556, v557, v1385), (int32x4_t)0), v1425);
            LODWORD(v572) = v573.i32[1];
            *(float16x4_t *)v554.i8 = vcvt_f16_f32(v567);
            v485[v573.u32[0]] = fminl(*(short float *)v554.i16, v485[v573.u32[0]]);
            *(float16x4_t *)v556.i8 = vcvt_f16_f32(v568);
            v485[v574.u32[1]] = fminl(*(short float *)&v556.i16[1], v485[v574.u32[1]]);
            *(float16x4_t *)v573.i8 = vcvt_f16_f32(v569);
            v485[v575.u32[2]] = fminl(*(short float *)&v573.i16[2], v485[v575.u32[2]]);
            *(float16x4_t *)v570.f32 = vcvt_f16_f32(v570);
            v485[v576.u32[3]] = fminl(*(short float *)&v570.i16[3], v485[v576.u32[3]]);
            v485[v572] = fminl(*(short float *)&v554.i16[1], v485[v572]);
            v485[v574.u32[2]] = fminl(*(short float *)&v556.i16[2], v485[v574.u32[2]]);
            v485[v575.u32[3]] = fminl(*(short float *)&v573.i16[3], v485[v575.u32[3]]);
            v485[v576.u32[0]] = fminl(*(short float *)v570.i16, v485[v576.u32[0]]);
            v485[v573.u32[2]] = fminl(*(short float *)&v554.i16[2], v485[v573.u32[2]]);
            v485[v574.u32[3]] = fminl(*(short float *)&v556.i16[3], v485[v574.u32[3]]);
            v485[v575.u32[0]] = fminl(*(short float *)v573.i16, v485[v575.u32[0]]);
            v485[v576.u32[1]] = fminl(*(short float *)&v570.i16[1], v485[v576.u32[1]]);
            v485[v573.u32[3]] = fminl(*(short float *)&v554.i16[3], v485[v573.u32[3]]);
            v485[v574.u32[0]] = fminl(*(short float *)v556.i16, v485[v574.u32[0]]);
            v485[v575.u32[1]] = fminl(*(short float *)&v573.i16[1], v485[v575.u32[1]]);
            v485[v576.u32[2]] = fminl(*(short float *)&v570.i16[2], v485[v576.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v513 = vaddq_f32(v513, _Q0);
            v510 += 4;
            v511 += 32;
            v512 += 16;
          }
          while (v512 < v493);
          unint64_t v512 = (((v475 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v496 = (float32x4_t)a14;
          float32x4_t v500 = (float32x4_t)a15;
          float32x4_t v498 = a12;
          float32x4_t v497 = a13;
          float32x2_t v506 = (float32x2_t)a18;
          float v490 = *(float *)&a11;
          float32x2_t v501 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
          float v491 = v1349;
          float v492 = v1340;
          float v494 = 0.5;
          float32x4_t v495 = v1358;
        }
        if (v512 < v475)
        {
          do
          {
            float v578 = v510->f32[0] * 1000.0;
            int32x4_t v579 = (int32x4_t)vaddq_f32(v500, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v498, v491 * (float)(v578 * (float)((float)((float)v512 + v494) - v490))), v497, v492 * (float)((float)((float)((float)v487 + v494) - *((float *)&a11 + 1)) * v578)), v496, v578));
            uint64_t v580 = 0xFFFF0000FFFFLL;
            if (*(float *)&v579.i32[2] >= 0.0 && v578 > 0.0)
            {
              int32x2_t v581 = vcvt_s32_f32(vmla_f32(v506, vdiv_f32(v501, (float32x2_t)vdup_laneq_s32(v579, 2)), *(float32x2_t *)v579.i8));
              if ((v581.i32[0] & 0x80000000) == 0
                && (__int16)v477 > v581.i32[0]
                && (v581.i32[1] & 0x80000000) == 0
                && (__int16)v476 > (int)v581.u16[2])
              {
                _S0 = *(float *)&v579.i32[2] * 0.001;
                __asm
                {
                  FCVT            H0, S0
                  FCMP            H2, #0
                }
                if (_ZF) {
                  BOOL v585 = 0;
                }
                else {
                  BOOL v585 = _H2 <= _H0;
                }
                if (!v585) {
                  v485[v482 * v581.u16[2] + v581.u32[0]] = _H0;
                }
                uint64_t v580 = (uint64_t)v581;
              }
            }
            __int16 *v511 = v580;
            v511[1] = WORD2(v580);
            ++v512;
            v510 = (float32x4_t *)((char *)v510 + 4);
            v511 += 2;
          }
          while (v475 != v512);
        }
        ++v487;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v495 = vaddq_f32(v495, _Q0);
      }
      while (v487 != v474);
      vImagePixelCount v486 = buf.height;
    }
    if (v486)
    {
      uint64_t v587 = 0;
      long long v588 = *(_OWORD *)&buf.width;
      v589 = (char *)buf.data;
      vImagePixelCount v590 = buf.width >> 4;
      if (buf.width >> 4 <= 1) {
        vImagePixelCount v590 = 1;
      }
      unint64_t v591 = buf.width & 0xFFFFFFF0;
      do
      {
        v592 = (int8x8_t *)&v589[*((void *)&v588 + 1) * v587];
        vImagePixelCount v593 = v590;
        if ((unint64_t)v588 >= 0x10)
        {
          do
          {
            float16x4_t v594 = (float16x4_t)v592[2];
            float16x4_t v595 = (float16x4_t)v592[3];
            int8x8_t v596 = vbic_s8(v592[1], (int8x8_t)vceq_f16((float16x4_t)v592[1], (float16x4_t)0x8400840084008400));
            int8x8_t *v592 = vbic_s8(*v592, (int8x8_t)vceq_f16((float16x4_t)*v592, (float16x4_t)0x8400840084008400));
            v592[1] = v596;
            v592[2] = vbic_s8((int8x8_t)v594, (int8x8_t)vceq_f16(v594, (float16x4_t)0x8400840084008400));
            v592[3] = vbic_s8((int8x8_t)v595, (int8x8_t)vceq_f16(v595, (float16x4_t)0x8400840084008400));
            v592 += 4;
            --v593;
          }
          while (v593);
        }
        unint64_t v597 = v588 & 0xFFFFFFFF0000000FLL;
        if ((unint64_t)v588 > v591)
        {
          do
          {
            if (*(short float *)v592->i16 == COERCE_SHORT_FLOAT(31743)) {
              v592->i16[0] = 0;
            }
            v592 = (int8x8_t *)((char *)v592 + 2);
            --v597;
          }
          while (v597);
        }
        ++v587;
      }
      while (v587 != v486);
    }
    goto LABEL_321;
  }
  if (PixelFormatType > 1751410031)
  {
    if (PixelFormatType != 1751410032)
    {
      if (PixelFormatType == 1751411059)
      {
        size_t v238 = CVPixelBufferGetHeight(a1);
        size_t v239 = CVPixelBufferGetWidth(a1);
        unsigned int v1422 = CVPixelBufferGetHeight(pixelBuffer);
        unsigned int v240 = CVPixelBufferGetWidth(pixelBuffer);
        size_t v241 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        CVPixelBufferLockBaseAddress(a1, 1uLL);
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        CVPixelBufferLockBaseAddress(a2, 0);
        memset(&v1498, 0, sizeof(v1498));
        v242 = (CGRect *)MEMORY[0x263F001A8];
        PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
        memset(&buf, 0, sizeof(buf));
        PixelBufferUtils::asVImageBuffer(pixelBuffer, *v242, &buf);
        PixelBufferUtils::asVImageBuffer(a2, *v242, &v1497);
        v243 = (char *)v1497.data;
        size_t v244 = v1497.rowBytes;
        v245 = buf.data;
        int v246 = buf.height;
        bzero(buf.data, buf.height * buf.rowBytes);
        float32x4_t v251 = (float32x4_t)a14;
        float32x4_t v250 = (float32x4_t)a15;
        float32x4_t v253 = a12;
        float32x4_t v252 = a13;
        float32x2_t v255 = (float32x2_t)a18;
        float v254 = *(float *)&a11;
        v256.i32[0] = a16;
        if (v238)
        {
          unint64_t v257 = 0;
          float v258 = 1.0 / *(float *)&a9;
          v259.i32[1] = v1476;
          float v260 = 1.0 / *(float *)&v1476;
          unint64_t v261 = v239 & 0xFFFFFFFFFFFFFFF0;
          float v262 = 0.5;
          *(float *)v247.i32 = 0.5 - *((float *)&a11 + 1);
          float32x4_t v263 = (float32x4_t)vdupq_lane_s32(v247, 0);
          *(float *)v247.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
          *(float *)v259.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
          *(float *)v248.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
          float32x4_t v1338 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
          float32x4_t v1347 = (float32x4_t)vdupq_lane_s32(v248, 0);
          float32x4_t v1319 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
          float32x4_t v1329 = (float32x4_t)vdupq_lane_s32(v259, 0);
          float32x4_t v1285 = (float32x4_t)vdupq_laneq_s32(a14, 2);
          float32x4_t v1295 = (float32x4_t)vdupq_lane_s32(v247, 0);
          float v264 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
          *(float *)&long long v249 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
          float v265 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
          float32x4_t v266 = (float32x4_t)vdupq_laneq_s32(a15, 2);
          float32x4_t v267 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
          float32x4_t v1412 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
          int32x4_t v1392 = vdupq_n_s32(v240);
          int32x4_t v268 = vdupq_n_s32(v1422);
          float32x4_t v1275 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
          int v269 = (__int16)v1422;
          float32x4_t v270 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
          v256.i32[1] = DWORD1(a17);
          v271 = (char *)v1498.data;
          size_t v272 = v1498.rowBytes;
          float32x2_t v1316 = v256;
          float v1365 = 1.0 / *(float *)&a9;
          float v1356 = 1.0 / *(float *)&v1476;
          int32x4_t v1453 = vdupq_n_s32(v241 >> 1);
          float32x4_t v1461 = v266;
          float v1434 = v264;
          int32x4_t v1444 = vdupq_n_s32(v246 * (v241 >> 1) - 2);
          float32x4_t v1423 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
          float32x4_t v1402 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
          float32x4_t v1383 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
          do
          {
            v273 = (float32x4_t *)&v271[v272 * v257];
            v274 = (__int16 *)&v243[v257 * v244];
            unint64_t v275 = 0;
            if (v261)
            {
              float32x4_t v1489 = vmlaq_f32(v1338, v1347, v263);
              float32x4_t v1480 = vmlaq_f32(v1319, v1329, v263);
              float32x4_t v1374 = v263;
              float32x4_t v1469 = vmlaq_f32(v1285, v1295, v263);
              float32x4_t v276 = v1275;
              do
              {
                float32x4_t v277 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                float32x4_t v278 = vmulq_f32(*v273, v277);
                float32x4_t v279 = vmulq_f32(v273[1], v277);
                float32x4_t v280 = vmulq_f32(v273[2], v277);
                __asm { FMOV            V0.4S, #4.0 }
                float32x4_t v282 = vaddq_f32(v276, _Q0);
                _Q0.i64[0] = 0x4100000041000000;
                _Q0.i64[1] = 0x4100000041000000;
                float32x4_t v283 = vaddq_f32(v276, _Q0);
                __asm { FMOV            V0.4S, #12.0 }
                float32x4_t v285 = vaddq_f32(v276, _Q0);
                float32x4_t v286 = vmulq_f32(v273[3], v277);
                float32x4_t v287 = vmlaq_f32(v266, vmlaq_n_f32(v1469, v276, v264), v278);
                float32x4_t v288 = vmlaq_f32(v266, vmlaq_n_f32(v1469, v282, v264), v279);
                float32x4_t v289 = vmlaq_f32(v266, vmlaq_n_f32(v1469, v283, v264), v280);
                float32x4_t v290 = vmlaq_f32(v266, vmlaq_n_f32(v1469, v285, v264), v286);
                int8x16_t v291 = (int8x16_t)vcgtzq_f32(v279);
                int32x4_t v292 = v268;
                int8x16_t v293 = vandq_s8((int8x16_t)vcgezq_f32(v287), (int8x16_t)vcgtzq_f32(v278));
                float32x4_t v294 = vmlaq_f32(v267, vmlaq_n_f32(v1489, v285, v265), v286);
                float32x4_t v295 = vmlaq_f32(v1412, vmlaq_n_f32(v1480, v285, *(float *)&v249), v286);
                int8x16_t v296 = vandq_s8((int8x16_t)vcgezq_f32(v289), (int8x16_t)vcgtzq_f32(v280));
                float32x4_t v297 = vmlaq_f32(v1402, vdivq_f32(v270, v287), vmlaq_f32(v267, vmlaq_n_f32(v1489, v276, v265), v278));
                float32x4_t v298 = vmlaq_f32(v1402, vdivq_f32(v270, v288), vmlaq_f32(v267, vmlaq_n_f32(v1489, v282, v265), v279));
                float32x4_t v299 = vmlaq_f32(v1383, vdivq_f32(v1423, v288), vmlaq_f32(v1412, vmlaq_n_f32(v1480, v282, *(float *)&v249), v279));
                float32x4_t v300 = vmlaq_f32(v1402, vdivq_f32(v270, v289), vmlaq_f32(v267, vmlaq_n_f32(v1489, v283, v265), v280));
                float32x4_t v301 = v267;
                long long v302 = v249;
                int8x16_t v303 = vandq_s8((int8x16_t)vcgezq_f32(v290), (int8x16_t)vcgtzq_f32(v286));
                int32x4_t v304 = vcvtmq_s32_f32(v297);
                int32x4_t v305 = vcvtmq_s32_f32(vmlaq_f32(v1383, vdivq_f32(v1423, v287), vmlaq_f32(v1412, vmlaq_n_f32(v1480, v276, *(float *)&v249), v278)));
                int32x4_t v306 = vcvtmq_s32_f32(v298);
                int32x4_t v307 = vcvtmq_s32_f32(v299);
                int32x4_t v308 = vcvtmq_s32_f32(v300);
                int32x4_t v309 = vcvtmq_s32_f32(vmlaq_f32(v1383, vdivq_f32(v1423, v289), vmlaq_f32(v1412, vmlaq_n_f32(v1480, v283, *(float *)&v249), v280)));
                float32x4_t v310 = vmlaq_f32(v1402, vdivq_f32(v270, v290), v294);
                int32x4_t v268 = v292;
                int32x4_t v311 = vcvtmq_s32_f32(v310);
                int32x4_t v312 = vcvtmq_s32_f32(vmlaq_f32(v1383, vdivq_f32(v1423, v290), v295));
                int16x4x2_t v313 = (int16x4x2_t)vcgtq_s32(v292, v305);
                v292.i64[0] = -1;
                v292.i64[1] = -1;
                int32x4_t v314 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)v313, (int8x16_t)vcgtq_s32(v1392, v304)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v305, (int8x16_t)v304), v292)), v293);
                int32x4_t v315 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v268, v307), (int8x16_t)vcgtq_s32(v1392, v306)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v307, (int8x16_t)v306), v292)), vandq_s8((int8x16_t)vcgezq_f32(v288), v291));
                int32x4_t v316 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v268, v309), (int8x16_t)vcgtq_s32(v1392, v308)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v309, (int8x16_t)v308), v292)), v296);
                *(int16x4_t *)v293.i8 = vmovn_s32(v314);
                v313.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v304), *(int8x8_t *)v293.i8);
                int8x8_t v317 = vorn_s8((int8x8_t)vmovn_s32(v305), *(int8x8_t *)v293.i8);
                *(int16x4_t *)v299.f32 = vmovn_s32(v315);
                v318 = v274;
                vst2_s16(v318, v313);
                v318 += 8;
                v313.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v306), *(int8x8_t *)v299.f32);
                int8x8_t v319 = vorn_s8((int8x8_t)vmovn_s32(v307), *(int8x8_t *)v299.f32);
                *(int16x4_t *)v299.f32 = vmovn_s32(v316);
                int32x4_t v320 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v268, v312), (int8x16_t)vcgtq_s32(v1392, v311)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v312, (int8x16_t)v311), v292)), v303);
                vst2_s16(v318, v313);
                v313.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v308), *(int8x8_t *)v299.f32);
                int8x8_t v321 = vorn_s8((int8x8_t)vmovn_s32(v309), *(int8x8_t *)v299.f32);
                v322 = v274 + 16;
                *(int16x4_t *)v299.f32 = vmovn_s32(v320);
                vst2_s16(v322, v313);
                v313.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v311), *(int8x8_t *)v299.f32);
                int8x8_t v323 = vorn_s8((int8x8_t)vmovn_s32(v312), *(int8x8_t *)v299.f32);
                v324 = v274 + 24;
                vst2_s16(v324, v313);
                long long v249 = v302;
                float32x4_t v267 = v301;
                float32x4_t v266 = v1461;
                int8x16_t v325 = (int8x16_t)vdivq_f32(v277, v290);
                int32x4_t v326 = vmlaq_s32(v308, v309, v1453);
                int32x4_t v327 = vmlaq_s32(v311, v312, v1453);
                float v264 = v1434;
                float32x4_t v328 = (float32x4_t)vandq_s8((int8x16_t)vdivq_f32(v277, v287), (int8x16_t)v314);
                float32x4_t v329 = (float32x4_t)vandq_s8((int8x16_t)vdivq_f32(v277, v288), (int8x16_t)v315);
                float32x4_t v330 = (float32x4_t)vandq_s8((int8x16_t)vdivq_f32(v277, v289), (int8x16_t)v316);
                int32x4_t v331 = vminq_s32(vmaxq_s32(vmlaq_s32(v304, v305, v1453), (int32x4_t)0), v1444);
                int32x4_t v332 = vminq_s32(vmaxq_s32(vmlaq_s32(v306, v307, v1453), (int32x4_t)0), v1444);
                int32x4_t v333 = vminq_s32(vmaxq_s32(v326, (int32x4_t)0), v1444);
                int32x4_t v334 = vminq_s32(vmaxq_s32(v327, (int32x4_t)0), v1444);
                float32x4_t v335 = (float32x4_t)vandq_s8(v325, (int8x16_t)v320);
                LODWORD(v324) = v331.i32[1];
                unsigned __int32 v336 = v331.i32[0];
                v325.i16[0] = v245[v331.u32[0]];
                *(float16x4_t *)v331.i8 = vcvt_f16_f32(v328);
                *(short float *)&v245[v336] = fmaxl(*(short float *)v331.i16, *(short float *)v325.i16);
                *(float16x4_t *)v329.f32 = vcvt_f16_f32(v329);
                *(short float *)&v245[v332.u32[1]] = fmaxl(*(short float *)&v329.i16[1], *(short float *)&v245[v332.u32[1]]);
                *(float16x4_t *)v330.f32 = vcvt_f16_f32(v330);
                *(short float *)&v245[v333.u32[2]] = fmaxl(*(short float *)&v330.i16[2], *(short float *)&v245[v333.u32[2]]);
                *(float16x4_t *)v335.f32 = vcvt_f16_f32(v335);
                *(short float *)&v245[v334.u32[3]] = fmaxl(*(short float *)&v335.i16[3], *(short float *)&v245[v334.u32[3]]);
                *(short float *)&v245[v324] = fmaxl(*(short float *)&v331.i16[1], *(short float *)&v245[v324]);
                *(short float *)&v245[v332.u32[2]] = fmaxl(*(short float *)&v329.i16[2], *(short float *)&v245[v332.u32[2]]);
                *(short float *)&v245[v333.u32[3]] = fmaxl(*(short float *)&v330.i16[3], *(short float *)&v245[v333.u32[3]]);
                *(short float *)&v245[v334.u32[0]] = fmaxl(*(short float *)v335.i16, *(short float *)&v245[v334.u32[0]]);
                *(short float *)&v245[v331.u32[2]] = fmaxl(*(short float *)&v331.i16[2], *(short float *)&v245[v331.u32[2]]);
                *(short float *)&v245[v332.u32[3]] = fmaxl(*(short float *)&v329.i16[3], *(short float *)&v245[v332.u32[3]]);
                *(short float *)&v245[v333.u32[0]] = fmaxl(*(short float *)v330.i16, *(short float *)&v245[v333.u32[0]]);
                *(short float *)&v245[v334.u32[1]] = fmaxl(*(short float *)&v335.i16[1], *(short float *)&v245[v334.u32[1]]);
                *(short float *)&v245[v331.u32[3]] = fmaxl(*(short float *)&v331.i16[3], *(short float *)&v245[v331.u32[3]]);
                *(short float *)&v245[v332.u32[0]] = fmaxl(*(short float *)v329.i16, *(short float *)&v245[v332.u32[0]]);
                *(short float *)&v245[v333.u32[1]] = fmaxl(*(short float *)&v330.i16[1], *(short float *)&v245[v333.u32[1]]);
                *(short float *)&v245[v334.u32[2]] = fmaxl(*(short float *)&v335.i16[2], *(short float *)&v245[v334.u32[2]]);
                __asm { FMOV            V0.4S, #16.0 }
                float32x4_t v276 = vaddq_f32(v276, _Q0);
                v273 += 4;
                v274 += 32;
                v275 += 16;
              }
              while (v275 < v261);
              unint64_t v275 = (((v239 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
              float32x4_t v251 = (float32x4_t)a14;
              float32x4_t v250 = (float32x4_t)a15;
              float32x4_t v253 = a12;
              float32x4_t v252 = a13;
              float32x2_t v255 = (float32x2_t)a18;
              float v254 = *(float *)&a11;
              float32x2_t v256 = v1316;
              float v258 = v1365;
              float v260 = v1356;
              float v262 = 0.5;
              float32x4_t v263 = v1374;
            }
            if (v275 < v239)
            {
              do
              {
                float v338 = v273->f32[0] * 1000.0;
                int32x4_t v339 = (int32x4_t)vaddq_f32(v250, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v253, v258 * (float)(v338 * (float)((float)((float)v275 + v262) - v254))), v252, v260* (float)((float)((float)((float)v257 + v262) - *((float *)&a11 + 1)) * v338)), v251, v338));
                uint64_t v340 = 0xFFFF0000FFFFLL;
                if (*(float *)&v339.i32[2] >= 0.0 && v338 > 0.0)
                {
                  int32x2_t v341 = vcvt_s32_f32(vmla_f32(v255, vdiv_f32(v256, (float32x2_t)vdup_laneq_s32(v339, 2)), *(float32x2_t *)v339.i8));
                  if ((v341.i32[0] & 0x80000000) == 0
                    && (__int16)v240 > v341.i32[0]
                    && (v341.i32[1] & 0x80000000) == 0
                    && v269 > v341.u16[2])
                  {
                    _S0 = 1000.0 / *(float *)&v339.i32[2];
                    __asm
                    {
                      FCVT            H0, S0
                      FCMP            H2, #0
                    }
                    if (_ZF) {
                      BOOL v345 = 1;
                    }
                    else {
                      BOOL v345 = _H2 < _H0;
                    }
                    if (v345) {
                      *(short float *)&v245[(v241 >> 1) * v341.u16[2] + v341.u32[0]] = _H0;
                    }
                    uint64_t v340 = (uint64_t)v341;
                  }
                }
                __int16 *v274 = v340;
                v274[1] = WORD2(v340);
                ++v275;
                v273 = (float32x4_t *)((char *)v273 + 4);
                v274 += 2;
              }
              while (v239 != v275);
            }
            ++v257;
            __asm { FMOV            V0.4S, #1.0 }
            float32x4_t v263 = vaddq_f32(v263, _Q0);
          }
          while (v257 != v238);
        }
        goto LABEL_321;
      }
      goto LABEL_322;
    }
    goto LABEL_124;
  }
  if (PixelFormatType == 1717855600)
  {
LABEL_88:
    size_t v347 = CVPixelBufferGetHeight(a1);
    size_t v348 = CVPixelBufferGetWidth(a1);
    size_t v349 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v350 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v351 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&v1498, 0, sizeof(v1498));
    v352 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v352, &buf);
    PixelBufferUtils::asVImageBuffer(a2, *v352, &v1497);
    size_t v356 = v351 >> 2;
    v357 = (char *)v1497.data;
    size_t v358 = v1497.rowBytes;
    v359 = (float *)buf.data;
    if (v356 * v349) {
      memset_pattern16(buf.data, &unk_247F24670, 4 * v356 * v349);
    }
    vImagePixelCount v360 = buf.height;
    if (v347)
    {
      unint64_t v361 = 0;
      v362.i32[1] = v1476;
      v363.i32[1] = HIDWORD(a9);
      float v364 = *(float *)&a11;
      float v365 = 1.0 / *(float *)&a9;
      float v366 = 1.0 / *(float *)&v1476;
      unint64_t v367 = v348 & 0xFFFFFFFFFFFFFFF0;
      float v368 = 0.5;
      *(float *)v353.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v369 = (float32x4_t)vdupq_lane_s32(v353, 0);
      float32x4_t v371 = a13;
      float32x4_t v370 = (float32x4_t)a14;
      *(float *)v353.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
      *(float *)v362.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
      *(float *)v363.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
      float32x4_t v1339 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1348 = (float32x4_t)vdupq_lane_s32(v363, 0);
      float32x4_t v1320 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1330 = (float32x4_t)vdupq_lane_s32(v362, 0);
      float32x4_t v1286 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      float32x4_t v1296 = (float32x4_t)vdupq_lane_s32(v353, 0);
      float32x4_t v372 = a12;
      float v373 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      *(float *)&long long v354 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      *(float *)&long long v355 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v1276 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      float32x4_t v374 = (float32x4_t)a15;
      float32x2_t v375 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
      float32x4_t v376 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v377 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v378 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      int32x4_t v1393 = vdupq_n_s32(v349);
      int32x4_t v1403 = vdupq_n_s32(v350);
      float32x2_t v379 = (float32x2_t)a18;
      v380 = (char *)v1498.data;
      size_t v381 = v1498.rowBytes;
      v382.i64[0] = 0x4100000041000000;
      v382.i64[1] = 0x4100000041000000;
      float v1366 = 1.0 / *(float *)&a9;
      float v1357 = 1.0 / *(float *)&v1476;
      int32x4_t v1454 = vdupq_n_s32(v356);
      float v1462 = v373;
      float32x4_t v1435 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      float32x4_t v1445 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      float32x4_t v1413 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      int32x4_t v1424 = vdupq_n_s32(LODWORD(buf.height) * (int)v356 - 4);
      float32x4_t v1384 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      do
      {
        v383 = (float32x4_t *)&v380[v381 * v361];
        v384 = (__int16 *)&v357[v361 * v358];
        unint64_t v385 = 0;
        if (v367)
        {
          float32x4_t v1490 = vmlaq_f32(v1339, v1348, v369);
          float32x4_t v1481 = vmlaq_f32(v1320, v1330, v369);
          float32x4_t v1375 = v369;
          float32x4_t v1470 = vmlaq_f32(v1286, v1296, v369);
          float32x4_t v386 = v1276;
          do
          {
            float32x4_t v387 = (float32x4_t)vdupq_n_s32(0x447A0000u);
            float32x4_t v388 = vmulq_f32(*v383, v387);
            float32x4_t v389 = vmulq_f32(v383[1], v387);
            float32x4_t v390 = vmulq_f32(v383[2], v387);
            __asm { FMOV            V0.4S, #4.0 }
            float32x4_t v392 = vaddq_f32(v386, _Q0);
            float32x4_t v393 = vaddq_f32(v386, v382);
            __asm { FMOV            V0.4S, #12.0 }
            float32x4_t v395 = vaddq_f32(v386, _Q0);
            float32x4_t v396 = vmulq_f32(v383[3], v387);
            float32x4_t v397 = vmlaq_f32(v376, vmlaq_n_f32(v1470, v386, v373), v388);
            float32x4_t v398 = vmlaq_f32(v376, vmlaq_n_f32(v1470, v392, v373), v389);
            float32x4_t v399 = vmlaq_f32(v376, vmlaq_n_f32(v1470, v393, v373), v390);
            float32x4_t v400 = vmlaq_f32(v376, vmlaq_n_f32(v1470, v395, v373), v396);
            int8x16_t v401 = (int8x16_t)vcgtzq_f32(v388);
            int8x16_t v402 = (int8x16_t)vcgtzq_f32(v389);
            float32x4_t v403 = vmlaq_f32(v377, vmlaq_n_f32(v1490, v386, *(float *)&v355), v388);
            float32x4_t v404 = vmlaq_f32(v378, vmlaq_n_f32(v1481, v386, *(float *)&v354), v388);
            float32x4_t v405 = vmlaq_f32(v377, vmlaq_n_f32(v1490, v392, *(float *)&v355), v389);
            float32x4_t v406 = v376;
            float32x4_t v407 = vmlaq_f32(v378, vmlaq_n_f32(v1481, v392, *(float *)&v354), v389);
            float32x4_t v408 = vmlaq_f32(v377, vmlaq_n_f32(v1490, v393, *(float *)&v355), v390);
            float32x4_t v409 = vmlaq_f32(v378, vmlaq_n_f32(v1481, v393, *(float *)&v354), v390);
            float32x4_t v410 = vmlaq_f32(v377, vmlaq_n_f32(v1490, v395, *(float *)&v355), v396);
            int16x4x2_t v411 = (int16x4x2_t)vandq_s8((int8x16_t)vcgezq_f32(v398), v402);
            float32x4_t v412 = vmlaq_f32(v378, vmlaq_n_f32(v1481, v395, *(float *)&v354), v396);
            float32x4_t v413 = v377;
            long long v414 = v355;
            long long v415 = v354;
            int8x16_t v416 = vandq_s8((int8x16_t)vcgezq_f32(v399), (int8x16_t)vcgtzq_f32(v390));
            float32x4_t v417 = vmlaq_f32(v1413, vdivq_f32(v1445, v398), v405);
            float32x4_t v418 = vmlaq_f32(v1384, vdivq_f32(v1435, v398), v407);
            int8x16_t v419 = vandq_s8((int8x16_t)vcgezq_f32(v400), (int8x16_t)vcgtzq_f32(v396));
            int32x4_t v420 = vcvtmq_s32_f32(vmlaq_f32(v1413, vdivq_f32(v1445, v397), v403));
            int32x4_t v421 = vcvtmq_s32_f32(vmlaq_f32(v1384, vdivq_f32(v1435, v397), v404));
            int32x4_t v422 = vcvtmq_s32_f32(v417);
            int32x4_t v423 = vcvtmq_s32_f32(v418);
            int32x4_t v424 = vcvtmq_s32_f32(vmlaq_f32(v1413, vdivq_f32(v1445, v399), v408));
            int32x4_t v425 = vcvtmq_s32_f32(vmlaq_f32(v1384, vdivq_f32(v1435, v399), v409));
            int32x4_t v426 = vcvtmq_s32_f32(vmlaq_f32(v1413, vdivq_f32(v1445, v400), v410));
            int32x4_t v427 = vcvtmq_s32_f32(vmlaq_f32(v1384, vdivq_f32(v1435, v400), v412));
            v417.i64[0] = -1;
            v417.i64[1] = -1;
            int32x4_t v428 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1393, v421), (int8x16_t)vcgtq_s32(v1403, v420)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v421, (int8x16_t)v420), (int32x4_t)v417)), vandq_s8((int8x16_t)vcgezq_f32(v397), v401));
            int32x4_t v429 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1393, v423), (int8x16_t)vcgtq_s32(v1403, v422)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v423, (int8x16_t)v422), (int32x4_t)v417)), (int8x16_t)v411);
            int32x4_t v430 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1393, v425), (int8x16_t)vcgtq_s32(v1403, v424)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v425, (int8x16_t)v424), (int32x4_t)v417)), v416);
            *(int16x4_t *)v410.f32 = vmovn_s32(v428);
            v411.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v420), *(int8x8_t *)v410.f32);
            *(int8x8_t *)v416.i8 = vorn_s8((int8x8_t)vmovn_s32(v421), *(int8x8_t *)v410.f32);
            *(int16x4_t *)v418.f32 = vmovn_s32(v429);
            v431 = v384;
            vst2_s16(v431, v411);
            v431 += 8;
            v411.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v422), *(int8x8_t *)v418.f32);
            *(int8x8_t *)v416.i8 = vorn_s8((int8x8_t)vmovn_s32(v423), *(int8x8_t *)v418.f32);
            *(int16x4_t *)v418.f32 = vmovn_s32(v430);
            int32x4_t v432 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1393, v427), (int8x16_t)vcgtq_s32(v1403, v426)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v427, (int8x16_t)v426), (int32x4_t)v417)), v419);
            vst2_s16(v431, v411);
            v411.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v424), *(int8x8_t *)v418.f32);
            *(int8x8_t *)v416.i8 = vorn_s8((int8x8_t)vmovn_s32(v425), *(int8x8_t *)v418.f32);
            v433 = v384 + 16;
            *(int16x4_t *)v418.f32 = vmovn_s32(v432);
            vst2_s16(v433, v411);
            v411.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v426), *(int8x8_t *)v418.f32);
            *(int8x8_t *)v416.i8 = vorn_s8((int8x8_t)vmovn_s32(v427), *(int8x8_t *)v418.f32);
            v434 = v384 + 24;
            vst2_s16(v434, v411);
            float32x4_t v376 = v406;
            long long v354 = v415;
            long long v355 = v414;
            float32x4_t v377 = v413;
            v382.i64[0] = 0x4100000041000000;
            v382.i64[1] = 0x4100000041000000;
            float32x4_t v435 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
            int8x16_t v436 = (int8x16_t)vmulq_f32(v397, v435);
            int8x16_t v437 = (int8x16_t)vmulq_f32(v398, v435);
            int8x16_t v438 = (int8x16_t)vmulq_f32(v399, v435);
            int8x16_t v439 = (int8x16_t)vmulq_f32(v400, v435);
            int32x4_t v440 = vmlaq_s32(v422, v423, v1454);
            int8x16_t v441 = (int8x16_t)vdupq_n_s32(0x7F7FFFFFu);
            int8x16_t v442 = vbslq_s8((int8x16_t)v428, v436, v441);
            int32x4_t v443 = vminq_s32(vmaxq_s32(vmlaq_s32(v420, v421, v1454), (int32x4_t)0), v1424);
            LODWORD(v434) = v443.i32[1];
            unsigned __int32 v444 = v443.u32[2];
            unsigned __int32 v445 = v443.u32[3];
            int32x4_t v446 = vminq_s32(vmaxq_s32(v440, (int32x4_t)0), v1424);
            int8x16_t v447 = vbslq_s8((int8x16_t)v429, v437, v441);
            float v373 = v1462;
            v359[v443.u32[0]] = fminf(*(float *)v442.i32, v359[v443.u32[0]]);
            int32x4_t v448 = vminq_s32(vmaxq_s32(vmlaq_s32(v424, v425, v1454), (int32x4_t)0), v1424);
            v359[v446.u32[1]] = fminf(*(float *)&v447.i32[1], v359[v446.u32[1]]);
            int8x16_t v449 = vbslq_s8((int8x16_t)v430, v438, v441);
            v359[v448.u32[2]] = fminf(*(float *)&v449.i32[2], v359[v448.u32[2]]);
            int32x4_t v450 = vminq_s32(vmaxq_s32(vmlaq_s32(v426, v427, v1454), (int32x4_t)0), v1424);
            int8x16_t v451 = vbslq_s8((int8x16_t)v432, v439, v441);
            v359[v450.u32[3]] = fminf(*(float *)&v451.i32[3], v359[v450.u32[3]]);
            v359[v434] = fminf(*(float *)&v442.i32[1], v359[v434]);
            v359[v446.u32[2]] = fminf(*(float *)&v447.i32[2], v359[v446.u32[2]]);
            v359[v448.u32[3]] = fminf(*(float *)&v449.i32[3], v359[v448.u32[3]]);
            v359[v450.u32[0]] = fminf(*(float *)v451.i32, v359[v450.u32[0]]);
            v359[v444] = fminf(*(float *)&v442.i32[2], v359[v444]);
            v359[v446.u32[3]] = fminf(*(float *)&v447.i32[3], v359[v446.u32[3]]);
            v359[v448.u32[0]] = fminf(*(float *)v449.i32, v359[v448.u32[0]]);
            v359[v450.u32[1]] = fminf(*(float *)&v451.i32[1], v359[v450.u32[1]]);
            v359[v445] = fminf(*(float *)&v442.i32[3], v359[v445]);
            v359[v446.u32[0]] = fminf(*(float *)v447.i32, v359[v446.u32[0]]);
            v359[v448.u32[1]] = fminf(*(float *)&v449.i32[1], v359[v448.u32[1]]);
            v359[v450.u32[2]] = fminf(*(float *)&v451.i32[2], v359[v450.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v386 = vaddq_f32(v386, _Q0);
            v383 += 4;
            v384 += 32;
            v385 += 16;
          }
          while (v385 < v367);
          unint64_t v385 = (((v348 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v370 = (float32x4_t)a14;
          float32x4_t v374 = (float32x4_t)a15;
          float32x4_t v372 = a12;
          float32x4_t v371 = a13;
          float32x2_t v379 = (float32x2_t)a18;
          float v364 = *(float *)&a11;
          float32x2_t v375 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
          float v365 = v1366;
          float v366 = v1357;
          float v368 = 0.5;
          float32x4_t v369 = v1375;
        }
        if (v385 < v348)
        {
          do
          {
            float v453 = v383->f32[0] * 1000.0;
            int32x4_t v454 = (int32x4_t)vaddq_f32(v374, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v372, v365 * (float)(v453 * (float)((float)((float)v385 + v368) - v364))), v371, v366 * (float)((float)((float)((float)v361 + v368) - *((float *)&a11 + 1)) * v453)), v370, v453));
            uint64_t v455 = 0xFFFF0000FFFFLL;
            if (*(float *)&v454.i32[2] >= 0.0 && v453 > 0.0)
            {
              int32x2_t v456 = vcvt_s32_f32(vmla_f32(v379, vdiv_f32(v375, (float32x2_t)vdup_laneq_s32(v454, 2)), *(float32x2_t *)v454.i8));
              if ((v456.i32[0] & 0x80000000) == 0
                && (__int16)v350 > v456.i32[0]
                && (v456.i32[1] & 0x80000000) == 0
                && (__int16)v349 > (int)v456.u16[2])
              {
                float v457 = *(float *)&v454.i32[2] * 0.001;
                v458 = &v359[v356 * v456.u16[2]];
                float v459 = v458[v456.u32[0]];
                if (v459 == 0.0 || v459 > v457) {
                  v458[v456.u32[0]] = v457;
                }
                uint64_t v455 = (uint64_t)v456;
              }
            }
            __int16 *v384 = v455;
            v384[1] = WORD2(v455);
            ++v385;
            v383 = (float32x4_t *)((char *)v383 + 4);
            v384 += 2;
          }
          while (v348 != v385);
        }
        ++v361;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v369 = vaddq_f32(v369, _Q0);
      }
      while (v361 != v347);
      vImagePixelCount v360 = buf.height;
    }
    if (v360)
    {
      uint64_t v462 = 0;
      long long v463 = *(_OWORD *)&buf.width;
      v464 = (char *)buf.data;
      vImagePixelCount v465 = buf.width >> 4;
      if (buf.width >> 4 <= 1) {
        vImagePixelCount v465 = 1;
      }
      unint64_t v466 = buf.width & 0xFFFFFFF0;
      float32x4_t v467 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
      do
      {
        v468 = (float32x4_t *)&v464[*((void *)&v463 + 1) * v462];
        vImagePixelCount v469 = v465;
        if ((unint64_t)v463 >= 0x10)
        {
          do
          {
            float32x4_t v470 = v468[2];
            float32x4_t v471 = v468[3];
            int8x16_t v472 = vbicq_s8((int8x16_t)v468[1], (int8x16_t)vceqq_f32(v468[1], v467));
            *(int8x16_t *)v468 = vbicq_s8(*(int8x16_t *)v468, (int8x16_t)vceqq_f32(*v468, v467));
            v468[1] = (float32x4_t)v472;
            v468[2] = (float32x4_t)vbicq_s8((int8x16_t)v470, (int8x16_t)vceqq_f32(v470, v467));
            v468[3] = (float32x4_t)vbicq_s8((int8x16_t)v471, (int8x16_t)vceqq_f32(v471, v467));
            v468 += 4;
            --v469;
          }
          while (v469);
        }
        unint64_t v473 = v463 & 0xFFFFFFFF0000000FLL;
        if ((unint64_t)v463 > v466)
        {
          do
          {
            if (v468->f32[0] == 3.4028e38) {
              v468->i32[0] = 0;
            }
            v468 = (float32x4_t *)((char *)v468 + 4);
            --v473;
          }
          while (v473);
        }
        ++v462;
      }
      while (v462 != v360);
    }
    goto LABEL_321;
  }
  if (PixelFormatType == 1717856627)
  {
    size_t v21 = CVPixelBufferGetHeight(a1);
    size_t v22 = CVPixelBufferGetWidth(a1);
    unsigned int v1431 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v23 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v24 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&v1498, 0, sizeof(v1498));
    int32x4_t v25 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v25, &buf);
    PixelBufferUtils::asVImageBuffer(a2, *v25, &v1497);
    double v26 = (char *)v1497.data;
    size_t v27 = v1497.rowBytes;
    double v28 = (float *)buf.data;
    int v29 = buf.height;
    bzero(buf.data, buf.height * buf.rowBytes);
    float32x4_t v33 = (float32x4_t)a14;
    float32x4_t v32 = (float32x4_t)a15;
    float32x4_t v35 = a12;
    float32x4_t v34 = a13;
    float32x2_t v37 = (float32x2_t)a18;
    float v36 = *(float *)&a11;
    v38.i32[0] = a16;
    if (v21)
    {
      unint64_t v39 = 0;
      float v40 = 1.0 / *(float *)&a9;
      v41.i32[1] = v1476;
      float v42 = 1.0 / *(float *)&v1476;
      unint64_t v43 = v22 & 0xFFFFFFFFFFFFFFF0;
      float v44 = 0.5;
      *(float *)v30.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v45 = (float32x4_t)vdupq_lane_s32(v30, 0);
      *(float *)v30.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
      *(float *)v41.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
      *(float *)v31.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
      float32x4_t v1317 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1327 = (float32x4_t)vdupq_lane_s32(v31, 0);
      float32x4_t v1283 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1293 = (float32x4_t)vdupq_lane_s32(v41, 0);
      float32x4_t v1268 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      float32x4_t v1273 = (float32x4_t)vdupq_lane_s32(v30, 0);
      float v46 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      float v47 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      float v48 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v49 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v50 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v51 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      int32x4_t v52 = vdupq_n_s32(v1431);
      float32x4_t v1265 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      int v53 = (__int16)v1431;
      float32x4_t v54 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      v38.i32[1] = DWORD1(a17);
      v55 = (char *)v1498.data;
      size_t v56 = v1498.rowBytes;
      v57.i64[0] = 0x4100000041000000;
      v57.i64[1] = 0x4100000041000000;
      float32x2_t v1315 = v38;
      float v1345 = 1.0 / *(float *)&a9;
      float v1336 = 1.0 / *(float *)&v1476;
      int32x4_t v1451 = vdupq_n_s32(v29 * (v24 >> 2) - 4);
      float32x4_t v1459 = v49;
      float32x4_t v1432 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      int32x4_t v1442 = vdupq_n_s32(v24 >> 2);
      int32x4_t v1410 = v52;
      float v1420 = v46;
      float32x4_t v1390 = v50;
      float32x4_t v1400 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      float32x4_t v1372 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      int32x4_t v1381 = vdupq_n_s32(v23);
      float v1363 = v47;
      do
      {
        v58 = (float32x4_t *)&v55[v56 * v39];
        v59 = (__int16 *)&v26[v39 * v27];
        unint64_t v60 = 0;
        if (v43)
        {
          float32x4_t v1487 = vmlaq_f32(v1317, v1327, v45);
          float32x4_t v1478 = vmlaq_f32(v1283, v1293, v45);
          float32x4_t v1354 = v45;
          float32x4_t v1467 = vmlaq_f32(v1268, v1273, v45);
          float32x4_t v61 = v1265;
          do
          {
            float32x4_t v62 = (float32x4_t)vdupq_n_s32(0x447A0000u);
            float32x4_t v63 = vmulq_f32(*v58, v62);
            float32x4_t v64 = vmulq_f32(v58[1], v62);
            __asm { FMOV            V0.4S, #4.0 }
            float32x4_t v69 = vaddq_f32(v61, _Q0);
            float32x4_t v70 = vmulq_f32(v58[2], v62);
            float32x4_t v71 = vaddq_f32(v61, v57);
            __asm { FMOV            V0.4S, #12.0 }
            float32x4_t v73 = vaddq_f32(v61, _Q0);
            float32x4_t v74 = vmulq_f32(v58[3], v62);
            float32x4_t v75 = vmlaq_f32(v49, vmlaq_n_f32(v1467, v61, v46), v63);
            float32x4_t v76 = vmlaq_f32(v49, vmlaq_n_f32(v1467, v69, v46), v64);
            float32x4_t v77 = vmlaq_f32(v49, vmlaq_n_f32(v1467, v71, v46), v70);
            float32x4_t v78 = vmlaq_f32(v49, vmlaq_n_f32(v1467, v73, v46), v74);
            int8x16_t v79 = (int8x16_t)vcgtzq_f32(v64);
            int8x16_t v80 = (int8x16_t)vcgtzq_f32(v70);
            int8x16_t v81 = (int8x16_t)vcgtzq_f32(v74);
            float32x4_t v82 = vmlaq_f32(v51, vmlaq_n_f32(v1478, v61, v47), v63);
            float32x4_t v83 = vmlaq_f32(v50, vmlaq_n_f32(v1487, v69, v48), v64);
            float32x4_t v84 = vmlaq_f32(v51, vmlaq_n_f32(v1478, v69, v47), v64);
            float32x4_t v85 = vmlaq_f32(v50, vmlaq_n_f32(v1487, v71, v48), v70);
            float32x4_t v86 = vmlaq_f32(v51, vmlaq_n_f32(v1478, v71, v47), v70);
            int8x16_t v87 = vandq_s8((int8x16_t)vcgezq_f32(v75), (int8x16_t)vcgtzq_f32(v63));
            float32x4_t v88 = vmlaq_f32(v50, vmlaq_n_f32(v1487, v73, v48), v74);
            float32x4_t v89 = vmlaq_f32(v51, vmlaq_n_f32(v1478, v73, v47), v74);
            int32x4_t v90 = vcvtmq_s32_f32(vmlaq_f32(v1400, vdivq_f32(v54, v75), vmlaq_f32(v50, vmlaq_n_f32(v1487, v61, v48), v63)));
            int32x4_t v91 = vcvtmq_s32_f32(vmlaq_f32(v1432, vdivq_f32(v1372, v75), v82));
            int32x4_t v92 = vcvtmq_s32_f32(vmlaq_f32(v1400, vdivq_f32(v54, v76), v83));
            int32x4_t v93 = vcvtmq_s32_f32(vmlaq_f32(v1432, vdivq_f32(v1372, v76), v84));
            int32x4_t v94 = vcvtmq_s32_f32(vmlaq_f32(v1400, vdivq_f32(v54, v77), v85));
            int32x4_t v95 = vcvtmq_s32_f32(vmlaq_f32(v1432, vdivq_f32(v1372, v77), v86));
            int32x4_t v96 = vcvtmq_s32_f32(vmlaq_f32(v1400, vdivq_f32(v54, v78), v88));
            int32x4_t v97 = vcvtmq_s32_f32(vmlaq_f32(v1432, vdivq_f32(v1372, v78), v89));
            v89.i64[0] = -1;
            v89.i64[1] = -1;
            int32x4_t v98 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1410, v91), (int8x16_t)vcgtq_s32(v1381, v90)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v91, (int8x16_t)v90), (int32x4_t)v89)), v87);
            int32x4_t v99 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1410, v93), (int8x16_t)vcgtq_s32(v1381, v92)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v93, (int8x16_t)v92), (int32x4_t)v89)), vandq_s8((int8x16_t)vcgezq_f32(v76), v79));
            int32x4_t v100 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1410, v95), (int8x16_t)vcgtq_s32(v1381, v94)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v95, (int8x16_t)v94), (int32x4_t)v89)), vandq_s8((int8x16_t)vcgezq_f32(v77), v80));
            *(int16x4_t *)v88.f32 = vmovn_s32(v98);
            int32x4_t v101 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1410, v97), (int8x16_t)vcgtq_s32(v1381, v96)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v97, (int8x16_t)v96), (int32x4_t)v89)), vandq_s8((int8x16_t)vcgezq_f32(v78), v81));
            *(int16x4_t *)v83.f32 = vmovn_s32(v99);
            *(int8x8_t *)v89.f32 = vorn_s8((int8x8_t)vmovn_s32(v90), *(int8x8_t *)v88.f32);
            int8x8_t v102 = vorn_s8((int8x8_t)vmovn_s32(v91), *(int8x8_t *)v88.f32);
            *(int16x4_t *)v82.f32 = vmovn_s32(v100);
            v103 = v59;
            vst2_s16(v103, (int16x4x2_t)v89);
            v103 += 8;
            v1502.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v92), *(int8x8_t *)v83.f32);
            v1502.val[1] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v93), *(int8x8_t *)v83.f32);
            float v46 = v1420;
            *(int8x8_t *)v89.f32 = vorn_s8((int8x8_t)vmovn_s32(v94), *(int8x8_t *)v82.f32);
            int8x8_t v104 = vorn_s8((int8x8_t)vmovn_s32(v95), *(int8x8_t *)v82.f32);
            *(int16x4_t *)v83.f32 = vmovn_s32(v101);
            v105 = v59 + 16;
            vst2_s16(v105, (int16x4x2_t)v89);
            *(int8x8_t *)v89.f32 = vorn_s8((int8x8_t)vmovn_s32(v96), *(int8x8_t *)v83.f32);
            int8x8_t v106 = vorn_s8((int8x8_t)vmovn_s32(v97), *(int8x8_t *)v83.f32);
            v107 = v59 + 24;
            vst2_s16(v107, (int16x4x2_t)v89);
            float v47 = v1363;
            float32x4_t v50 = v1390;
            v57.i64[0] = 0x4100000041000000;
            v57.i64[1] = 0x4100000041000000;
            vst2_s16(v103, v1502);
            float32x4_t v49 = v1459;
            int32x4_t v108 = vminq_s32(vmaxq_s32(vmlaq_s32(v90, v91, v1442), (int32x4_t)0), v1451);
            int32x4_t v109 = vminq_s32(vmaxq_s32(vmlaq_s32(v92, v93, v1442), (int32x4_t)0), v1451);
            int8x16_t v110 = vandq_s8((int8x16_t)vdivq_f32(v62, v75), (int8x16_t)v98);
            v28[v108.u32[0]] = fmaxf(*(float *)v110.i32, v28[v108.u32[0]]);
            int8x16_t v111 = vandq_s8((int8x16_t)vdivq_f32(v62, v76), (int8x16_t)v99);
            int32x4_t v112 = vminq_s32(vmaxq_s32(vmlaq_s32(v94, v95, v1442), (int32x4_t)0), v1451);
            v28[v109.u32[1]] = fmaxf(*(float *)&v111.i32[1], v28[v109.u32[1]]);
            int8x16_t v113 = vandq_s8((int8x16_t)vdivq_f32(v62, v77), (int8x16_t)v100);
            int32x4_t v114 = vminq_s32(vmaxq_s32(vmlaq_s32(v96, v97, v1442), (int32x4_t)0), v1451);
            v28[v112.u32[2]] = fmaxf(*(float *)&v113.i32[2], v28[v112.u32[2]]);
            int8x16_t v115 = vandq_s8((int8x16_t)vdivq_f32(v62, v78), (int8x16_t)v101);
            v28[v114.u32[3]] = fmaxf(*(float *)&v115.i32[3], v28[v114.u32[3]]);
            v28[v108.u32[1]] = fmaxf(*(float *)&v110.i32[1], v28[v108.u32[1]]);
            v28[v109.u32[2]] = fmaxf(*(float *)&v111.i32[2], v28[v109.u32[2]]);
            v28[v112.u32[3]] = fmaxf(*(float *)&v113.i32[3], v28[v112.u32[3]]);
            v28[v114.u32[0]] = fmaxf(*(float *)v115.i32, v28[v114.u32[0]]);
            v28[v108.u32[2]] = fmaxf(*(float *)&v110.i32[2], v28[v108.u32[2]]);
            v28[v109.u32[3]] = fmaxf(*(float *)&v111.i32[3], v28[v109.u32[3]]);
            v28[v112.u32[0]] = fmaxf(*(float *)v113.i32, v28[v112.u32[0]]);
            v28[v114.u32[1]] = fmaxf(*(float *)&v115.i32[1], v28[v114.u32[1]]);
            v28[v108.u32[3]] = fmaxf(*(float *)&v110.i32[3], v28[v108.u32[3]]);
            v28[v109.u32[0]] = fmaxf(*(float *)v111.i32, v28[v109.u32[0]]);
            v28[v112.u32[1]] = fmaxf(*(float *)&v113.i32[1], v28[v112.u32[1]]);
            v28[v114.u32[2]] = fmaxf(*(float *)&v115.i32[2], v28[v114.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v61 = vaddq_f32(v61, _Q0);
            v58 += 4;
            v59 += 32;
            v60 += 16;
          }
          while (v60 < v43);
          unint64_t v60 = (((v22 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v33 = (float32x4_t)a14;
          float32x4_t v32 = (float32x4_t)a15;
          float32x4_t v35 = a12;
          float32x4_t v34 = a13;
          float32x2_t v37 = (float32x2_t)a18;
          float v36 = *(float *)&a11;
          float32x2_t v38 = v1315;
          float v40 = v1345;
          float v42 = v1336;
          float v44 = 0.5;
          float32x4_t v45 = v1354;
        }
        if (v60 < v22)
        {
          do
          {
            float v117 = v58->f32[0] * 1000.0;
            int32x4_t v118 = (int32x4_t)vaddq_f32(v32, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v35, v40 * (float)(v117 * (float)((float)((float)v60 + v44) - v36))), v34, v42 * (float)((float)((float)((float)v39 + v44) - *((float *)&a11 + 1)) * v117)), v33, v117));
            uint64_t v119 = 0xFFFF0000FFFFLL;
            if (*(float *)&v118.i32[2] >= 0.0 && v117 > 0.0)
            {
              int32x2_t v120 = vcvt_s32_f32(vmla_f32(v37, vdiv_f32(v38, (float32x2_t)vdup_laneq_s32(v118, 2)), *(float32x2_t *)v118.i8));
              if ((v120.i32[0] & 0x80000000) == 0
                && (__int16)v23 > v120.i32[0]
                && (v120.i32[1] & 0x80000000) == 0
                && v53 > v120.u16[2])
              {
                float v121 = 1000.0 / *(float *)&v118.i32[2];
                v122 = &v28[(v24 >> 2) * v120.u16[2]];
                float v123 = v122[v120.u32[0]];
                if (v123 == 0.0 || v123 < v121) {
                  v122[v120.u32[0]] = v121;
                }
                uint64_t v119 = (uint64_t)v120;
              }
            }
            __int16 *v59 = v119;
            v59[1] = WORD2(v119);
            ++v60;
            v58 = (float32x4_t *)((char *)v58 + 4);
            v59 += 2;
          }
          while (v22 != v60);
        }
        ++v39;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v45 = vaddq_f32(v45, _Q0);
      }
      while (v39 != v21);
    }
LABEL_321:
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    v1101 = v1302;
LABEL_390:
    CVPixelBufferUnlockBaseAddress(v1101, 0);
    return 0;
  }
LABEL_322:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_393:
    v1238 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
    PixelBufferUtils::pixelFormatAsString(v1238, (char *)&v1498);
    if ((v1498.width & 0x8000000000000000) == 0) {
      v1239 = &v1498;
    }
    else {
      v1239 = (vImage_Buffer *)v1498.data;
    }
    LODWORD(buf.data) = 136315138;
    *(void **)((char *)&buf.data + 4) = v1239;
    _os_log_error_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_ERROR, "illegal output pixel format in reprojection: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(v1498.width) < 0) {
      operator delete(v1498.data);
    }
  }
  return -22950;
}

uint64_t reprojectUndistortedDepthMapWithInputImmediates<half,1751410032u>(__CVBuffer *a1, __CVBuffer *a2, CVPixelBufferRef pixelBuffer, int a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, int32x4_t a14, int32x4_t a15, long long a16, long long a17, long long a18)
{
  __int32 v1490 = SHIDWORD(a10);
  uint64_t v1514 = *MEMORY[0x263EF8340];
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  float32x4_t v1318 = a2;
  if (!a2)
  {
    if (PixelFormatType <= 1717855599)
    {
      if (PixelFormatType == 825437747)
      {
        size_t Height = CVPixelBufferGetHeight(a1);
        size_t Width = CVPixelBufferGetWidth(a1);
        size_t v1118 = CVPixelBufferGetHeight(pixelBuffer);
        unsigned int v1119 = CVPixelBufferGetWidth(pixelBuffer);
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
        CVPixelBufferLockBaseAddress(a1, 1uLL);
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        memset(&v1512, 0, sizeof(v1512));
        float v1121 = (CGRect *)MEMORY[0x263F001A8];
        PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
        memset(&buf, 0, sizeof(buf));
        PixelBufferUtils::asVImageBuffer(pixelBuffer, *v1121, &buf);
        size_t v1125 = BytesPerRow >> 1;
        data = (__int16 *)buf.data;
        if (v1125 * v1118) {
          memset_pattern16(buf.data, &unk_247F24690, 2 * v1125 * v1118);
        }
        vImagePixelCount v1260 = buf.height;
        float32x4_t v1128 = (float32x4_t)a14;
        float32x4_t v1127 = (float32x4_t)a15;
        float32x4_t v1130 = a12;
        float32x4_t v1129 = a13;
        float v1132 = *(float *)&a18;
        float v1131 = *(float *)&a11;
        float v1133 = *(float *)&a16;
        if (Height)
        {
          unint64_t v1134 = 0;
          float v1135 = 1.0 / *(float *)&a9;
          float v1136 = 1.0 / *(float *)&v1490;
          unint64_t v1137 = Width & 0xFFFFFFFFFFFFFFF0;
          float v1138 = 0.5;
          *(float *)v1122.i32 = 0.5 - *((float *)&a11 + 1);
          float32x4_t v1139 = (float32x4_t)vdupq_lane_s32(v1122, 0);
          *(float *)v1122.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
          *(float *)v1123.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
          *(float *)v1124.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
          float v1140 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
          float v1141 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
          float32x4_t v1277 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
          float32x4_t v1279 = (float32x4_t)vdupq_lane_s32(v1124, 0);
          float v1142 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
          float32x4_t v1274 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
          float32x4_t v1275 = (float32x4_t)vdupq_lane_s32(v1123, 0);
          float32x4_t v1317 = (char *)v1512.data;
          size_t rowBytes = v1512.rowBytes;
          float32x4_t v1271 = (float32x4_t)vdupq_laneq_s32(a14, 2);
          float32x4_t v1272 = (float32x4_t)vdupq_lane_s32(v1122, 0);
          float32x4_t v1269 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
          float32x4_t v1143 = (float32x4_t)vdupq_laneq_s32(a15, 2);
          int32x4_t v1144 = vdupq_n_s32(v1125);
          int32x4_t v1145 = vdupq_n_s32(LODWORD(buf.height) * (int)v1125 - 2);
          int v1146 = (__int16)v1119;
          int v1147 = (__int16)v1118;
          unint64_t v1263 = (((Width & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          size_t v1298 = Width;
          size_t v1288 = v1125;
          int v1267 = (__int16)v1119;
          int v1265 = (__int16)v1118;
          float32x4_t v1435 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
          float32x4_t v1445 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
          float32x4_t v1415 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
          int32x4_t v1425 = vdupq_n_s32(v1119);
          float32x4_t v1396 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
          float32x4_t v1405 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
          int32x4_t v1378 = vdupq_n_s32(v1118);
          float32x4_t v1387 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
          do
          {
            float32x4_t v1148 = (float16x4_t *)&v1317[v1134 * rowBytes];
            if (v1137)
            {
              uint64_t v1149 = 0;
              float32x4_t v1455 = vmlaq_f32(v1277, v1279, v1139);
              float32x4_t v1150 = vmlaq_f32(v1274, v1275, v1139);
              float32x4_t v1342 = v1139;
              float32x4_t v1151 = vmlaq_f32(v1271, v1272, v1139);
              float32x4_t v1152 = v1269;
              v1153.i64[0] = 0x4100000041000000;
              v1153.i64[1] = 0x4100000041000000;
              do
              {
                uint64_t v1510 = v1149;
                float32x4_t v1154 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                float32x4_t v1155 = vmulq_f32(vcvtq_f32_f16(*v1148), v1154);
                float32x4_t v1156 = vmulq_f32(vcvtq_f32_f16(v1148[1]), v1154);
                __asm { FMOV            V0.4S, #4.0 }
                float32x4_t v1158 = vaddq_f32(v1152, _Q0);
                float32x4_t v1159 = vaddq_f32(v1152, v1153);
                float32x4_t v1160 = vmulq_f32(vcvtq_f32_f16(v1148[2]), v1154);
                __asm { FMOV            V0.4S, #12.0 }
                float32x4_t v1162 = vaddq_f32(v1152, _Q0);
                float32x4_t v1163 = vmulq_f32(vcvtq_f32_f16(v1148[3]), v1154);
                float32x4_t v1164 = vmlaq_f32(v1143, vmlaq_n_f32(v1151, v1152, v1140), v1155);
                float32x4_t v1165 = vmlaq_f32(v1143, vmlaq_n_f32(v1151, v1158, v1140), v1156);
                float32x4_t v1166 = vmlaq_f32(v1143, vmlaq_n_f32(v1151, v1159, v1140), v1160);
                float32x4_t v1167 = vmlaq_f32(v1143, vmlaq_n_f32(v1151, v1162, v1140), v1163);
                float32x4_t v1168 = vmlaq_f32(v1396, vmlaq_n_f32(v1455, v1152, v1142), v1155);
                float32x4_t v1169 = vmlaq_f32(v1387, vmlaq_n_f32(v1150, v1152, v1141), v1155);
                int8x16_t v1170 = vandq_s8((int8x16_t)vcgezq_f32(v1164), (int8x16_t)vcgtzq_f32(v1155));
                float32x4_t v1171 = vmlaq_f32(v1396, vmlaq_n_f32(v1455, v1162, v1142), v1163);
                int8x16_t v1172 = vandq_s8((int8x16_t)vcgezq_f32(v1167), (int8x16_t)vcgtzq_f32(v1163));
                int32x4_t v1173 = vcvtmq_s32_f32(vmlaq_f32(v1435, vdivq_f32(v1405, v1164), v1168));
                int32x4_t v1174 = vcvtmq_s32_f32(vmlaq_f32(v1415, vdivq_f32(v1445, v1164), v1169));
                int32x4_t v1175 = vcvtmq_s32_f32(vmlaq_f32(v1435, vdivq_f32(v1405, v1165), vmlaq_f32(v1396, vmlaq_n_f32(v1455, v1158, v1142), v1156)));
                int32x4_t v1176 = vcvtmq_s32_f32(vmlaq_f32(v1415, vdivq_f32(v1445, v1165), vmlaq_f32(v1387, vmlaq_n_f32(v1150, v1158, v1141), v1156)));
                float32x4_t v1177 = vmlaq_f32(v1415, vdivq_f32(v1445, v1167), vmlaq_f32(v1387, vmlaq_n_f32(v1150, v1162, v1141), v1163));
                v1178.i64[0] = -1;
                v1178.i64[1] = -1;
                int32x4_t v1179 = vcvtmq_s32_f32(vmlaq_f32(v1435, vdivq_f32(v1405, v1166), vmlaq_f32(v1396, vmlaq_n_f32(v1455, v1159, v1142), v1160)));
                int32x4_t v1180 = vcvtmq_s32_f32(vmlaq_f32(v1415, vdivq_f32(v1445, v1166), vmlaq_f32(v1387, vmlaq_n_f32(v1150, v1159, v1141), v1160)));
                int32x4_t v1181 = vcvtmq_s32_f32(vmlaq_f32(v1435, vdivq_f32(v1405, v1167), v1171));
                int32x4_t v1182 = vcvtmq_s32_f32(v1177);
                int8x16_t v1183 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1378, v1174), (int8x16_t)vcgtq_s32(v1425, v1173)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1174, (int8x16_t)v1173), v1178)), v1170);
                v1153.i64[0] = 0x4100000041000000;
                v1153.i64[1] = 0x4100000041000000;
                int8x16_t v1184 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1378, v1182), (int8x16_t)vcgtq_s32(v1425, v1181)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1182, (int8x16_t)v1181), v1178)), v1172);
                int8x16_t v1185 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
                float32x4_t v1186 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1378, v1180), (int8x16_t)vcgtq_s32(v1425, v1179)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1180, (int8x16_t)v1179), v1178)), vandq_s8((int8x16_t)vcgezq_f32(v1166), (int8x16_t)vcgtzq_f32(v1160))), (int8x16_t)vmulq_f32(v1166, v1153), v1185);
                int32x4_t v1187 = vmlaq_s32(v1179, v1180, v1144);
                int32x4_t v1188 = vminq_s32(vmaxq_s32(vmlaq_s32(v1173, v1174, v1144), (int32x4_t)0), v1145);
                int32x4_t v1189 = vcvtq_s32_f32((float32x4_t)vbslq_s8(v1183, (int8x16_t)vmulq_f32(v1164, v1153), v1185));
                int32x4_t v1190 = vminq_s32(vmaxq_s32(vmlaq_s32(v1181, v1182, v1144), (int32x4_t)0), v1145);
                unsigned __int32 v1191 = v1190.u32[3];
                unsigned __int32 v1192 = v1190.u32[1];
                unsigned __int32 v1193 = v1190.u32[2];
                unsigned __int32 v1194 = v1190.i32[0];
                int32x4_t v1195 = vcvtq_s32_f32((float32x4_t)vbslq_s8(v1184, (int8x16_t)vmulq_f32(v1167, v1153), v1185));
                __int32 v1196 = v1195.i32[3];
                __int32 v1197 = v1195.i32[1];
                __int32 v1198 = v1195.i32[2];
                __int32 v1199 = v1195.i32[0];
                int32x4_t v1200 = vminq_s32(vmaxq_s32(v1187, (int32x4_t)0), v1145);
                int32x4_t v1201 = vcvtq_s32_f32(v1186);
                __int32 v1202 = v1201.i32[2];
                __int32 v1203 = v1201.i32[3];
                __int32 v1204 = v1201.i32[1];
                __int32 v1205 = v1201.i32[0];
                int32x4_t v1206 = vminq_s32(vmaxq_s32(vmlaq_s32(v1175, v1176, v1144), (int32x4_t)0), v1145);
                unsigned __int32 v1207 = v1206.u32[1];
                unsigned __int32 v1208 = v1206.u32[2];
                unsigned __int32 v1209 = v1206.u32[3];
                unsigned __int32 v1210 = v1206.i32[0];
                int32x4_t v1211 = vcvtq_s32_f32((float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1378, v1176), (int8x16_t)vcgtq_s32(v1425, v1175)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1176, (int8x16_t)v1175), v1178)), vandq_s8((int8x16_t)vcgezq_f32(v1165), (int8x16_t)vcgtzq_f32(v1156))), (int8x16_t)vmulq_f32(v1165, v1153), v1185));
                int v1212 = data[v1188.u32[0]];
                if (v1189.i32[0] < v1212) {
                  LOWORD(v1212) = v1189.i16[0];
                }
                data[v1188.u32[0]] = v1212;
                __int32 v1213 = v1211.i32[1];
                __int32 v1214 = v1211.i32[2];
                __int32 v1215 = v1211.i32[3];
                __int32 v1216 = v1211.i32[0];
                __asm { FMOV            V0.4S, #16.0 }
                float32x4_t v1152 = vaddq_f32(v1152, _Q0);
                if (v1213 >= data[v1207]) {
                  LOWORD(v1213) = data[v1207];
                }
                data[v1207] = v1213;
                __int32 v1218 = data[v1200.u32[2]];
                if (v1202 < v1218) {
                  LOWORD(v1218) = v1202;
                }
                data[v1200.u32[2]] = v1218;
                if (v1196 >= data[v1191]) {
                  LOWORD(v1196) = data[v1191];
                }
                data[v1191] = v1196;
                int v1219 = data[v1188.u32[1]];
                if (v1189.i32[1] < v1219) {
                  LOWORD(v1219) = v1189.i16[2];
                }
                data[v1188.u32[1]] = v1219;
                __int32 v1220 = data[v1208];
                if (v1214 < v1220) {
                  LOWORD(v1220) = v1214;
                }
                data[v1208] = v1220;
                __int32 v1221 = data[v1200.u32[3]];
                if (v1203 < v1221) {
                  LOWORD(v1221) = v1203;
                }
                data[v1200.u32[3]] = v1221;
                __int32 v1222 = data[v1194];
                if (v1199 < v1222) {
                  LOWORD(v1222) = v1199;
                }
                data[v1194] = v1222;
                int v1223 = data[v1188.u32[2]];
                if (v1189.i32[2] < v1223) {
                  LOWORD(v1223) = v1189.i16[4];
                }
                data[v1188.u32[2]] = v1223;
                __int32 v1224 = data[v1209];
                if (v1215 < v1224) {
                  LOWORD(v1224) = v1215;
                }
                data[v1209] = v1224;
                __int32 v1225 = data[v1200.u32[0]];
                if (v1205 < v1225) {
                  LOWORD(v1225) = v1205;
                }
                data[v1200.u32[0]] = v1225;
                __int32 v1226 = data[v1192];
                if (v1197 < v1226) {
                  LOWORD(v1226) = v1197;
                }
                data[v1192] = v1226;
                int v1227 = data[v1188.u32[3]];
                if (v1189.i32[3] < v1227) {
                  LOWORD(v1227) = v1189.i16[6];
                }
                data[v1188.u32[3]] = v1227;
                __int32 v1228 = data[v1210];
                if (v1216 < v1228) {
                  LOWORD(v1228) = v1216;
                }
                data[v1210] = v1228;
                __int32 v1229 = data[v1200.u32[1]];
                if (v1204 < v1229) {
                  LOWORD(v1229) = v1204;
                }
                data[v1200.u32[1]] = v1229;
                __int32 v1230 = data[v1193];
                if (v1198 < v1230) {
                  LOWORD(v1230) = v1198;
                }
                data[v1193] = v1230;
                v1148 += 4;
                uint64_t v1149 = v1510 + 16;
              }
              while (v1510 + 16 < v1137);
              unint64_t v1231 = v1263;
              float32x4_t v1128 = (float32x4_t)a14;
              float32x4_t v1127 = (float32x4_t)a15;
              float32x4_t v1130 = a12;
              float32x4_t v1129 = a13;
              float v1132 = *(float *)&a18;
              float v1131 = *(float *)&a11;
              float v1133 = *(float *)&a16;
              float32x4_t v1139 = v1342;
              size_t Width = v1298;
              size_t v1125 = v1288;
              float v1135 = 1.0 / *(float *)&a9;
              float v1136 = 1.0 / *(float *)&v1490;
              float v1138 = 0.5;
              int v1146 = v1267;
              int v1147 = v1265;
            }
            else
            {
              unint64_t v1231 = 0;
            }
            if (v1231 < Width)
            {
              do
              {
                _H2 = v1148->i16[0];
                __asm { FCVT            S2, H2 }
                _Q7 = vaddq_f32(v1127, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v1130, v1135 * (float)((float)((float)((float)v1231 + v1138) - v1131) * (float)(_S2 * 1000.0))), v1129, v1136* (float)((float)((float)((float)v1134 + v1138) - *((float *)&a11 + 1)) * (float)(_S2 * 1000.0))), v1128, _S2 * 1000.0));
                if (_Q7.f32[2] >= 0.0 && (float)(_S2 * 1000.0) > 0.0)
                {
                  uint64_t v1235 = (int)vmlas_n_f32(v1132, v1133 / _Q7.f32[2], _Q7.f32[0]);
                  if ((v1235 & 0x80000000) == 0 && v1146 > (int)v1235)
                  {
                    _S1 = *((float *)&a17 + 1) / _Q7.f32[2];
                    __asm { FMLA            S2, S1, V7.S[1] }
                    if (((int)_S2 & 0x80000000) == 0 && v1147 > (unsigned __int16)(int)_S2)
                    {
                      v1238 = &data[v1125 * (unsigned __int16)(int)_S2];
                      unsigned int v1239 = vcvts_n_s32_f32(_Q7.f32[2], 3uLL);
                      if (v1239 <= (unsigned __int16)(v1238[v1235] - 1)) {
                        v1238[v1235] = v1239;
                      }
                    }
                  }
                }
                ++v1231;
                float32x4_t v1148 = (float16x4_t *)((char *)v1148 + 2);
              }
              while (Width != v1231);
            }
            ++v1134;
            __asm { FMOV            V0.4S, #1.0 }
            float32x4_t v1139 = vaddq_f32(v1139, _Q0);
          }
          while (v1134 != Height);
        }
        if (v1260)
        {
          uint64_t v1241 = 0;
          long long v1242 = *(_OWORD *)&buf.width;
          vImagePixelCount v1243 = buf.width >> 4;
          vImagePixelCount v1244 = (char *)buf.data;
          vImagePixelCount v1245 = buf.height;
          if (buf.width >> 4 <= 1) {
            vImagePixelCount v1243 = 1;
          }
          if (buf.height <= 1) {
            vImagePixelCount v1245 = 1;
          }
          unint64_t v1246 = buf.width & 0xFFFFFFF0;
          do
          {
            unint64_t v1247 = (int8x8_t *)&v1244[*((void *)&v1242 + 1) * v1241];
            vImagePixelCount v1248 = v1243;
            if ((unint64_t)v1242 >= 0x10)
            {
              do
              {
                int16x4_t v1249 = (int16x4_t)v1247[2];
                int16x4_t v1250 = (int16x4_t)v1247[3];
                int8x8_t v1251 = vbic_s8(v1247[1], (int8x8_t)vceq_s16((int16x4_t)v1247[1], (int16x4_t)0x8000800080008000));
                *unint64_t v1247 = vbic_s8(*v1247, (int8x8_t)vceq_s16((int16x4_t)*v1247, (int16x4_t)0x8000800080008000));
                v1247[1] = v1251;
                v1247[2] = vbic_s8((int8x8_t)v1249, (int8x8_t)vceq_s16(v1249, (int16x4_t)0x8000800080008000));
                v1247[3] = vbic_s8((int8x8_t)v1250, (int8x8_t)vceq_s16(v1250, (int16x4_t)0x8000800080008000));
                v1247 += 4;
                --v1248;
              }
              while (v1248);
            }
            unint64_t v1252 = v1242 & 0xFFFFFFFF0000000FLL;
            if ((unint64_t)v1242 > v1246)
            {
              do
              {
                if (v1247->i16[0] == 0x7FFF) {
                  v1247->i16[0] = 0;
                }
                unint64_t v1247 = (int8x8_t *)((char *)v1247 + 2);
                --v1252;
              }
              while (v1252);
            }
            ++v1241;
          }
          while (v1241 != v1245);
        }
        goto LABEL_389;
      }
      if (PixelFormatType == 1278226534) {
        goto LABEL_184;
      }
      if (PixelFormatType != 1278226536) {
        goto LABEL_391;
      }
    }
    else
    {
      if (PixelFormatType <= 1751410031)
      {
        if (PixelFormatType != 1717855600)
        {
          if (PixelFormatType == 1717856627)
          {
            size_t v127 = CVPixelBufferGetHeight(a1);
            size_t v128 = CVPixelBufferGetWidth(a1);
            unsigned int v129 = CVPixelBufferGetHeight(pixelBuffer);
            unsigned int v130 = CVPixelBufferGetWidth(pixelBuffer);
            size_t v131 = CVPixelBufferGetBytesPerRow(pixelBuffer);
            CVPixelBufferLockBaseAddress(a1, 1uLL);
            CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            memset(&v1512, 0, sizeof(v1512));
            int v132 = (CGRect *)MEMORY[0x263F001A8];
            PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
            memset(&buf, 0, sizeof(buf));
            PixelBufferUtils::asVImageBuffer(pixelBuffer, *v132, &buf);
            int32x2_t v134 = (float *)buf.data;
            int v133 = buf.height;
            bzero(buf.data, buf.height * buf.rowBytes);
            float32x4_t v139 = (float32x4_t)a14;
            float32x4_t v138 = (float32x4_t)a15;
            float32x4_t v141 = a12;
            float32x4_t v140 = a13;
            float v143 = *(float *)&a18;
            float v142 = *(float *)&a11;
            float v144 = *(float *)&a16;
            if (v127)
            {
              unint64_t v145 = 0;
              float v146 = 1.0 / *(float *)&a9;
              v147.i32[1] = v1490;
              float v148 = 1.0 / *(float *)&v1490;
              unint64_t v149 = v128 & 0xFFFFFFFFFFFFFFF0;
              float v150 = 0.5;
              *(float *)v135.i32 = 0.5 - *((float *)&a11 + 1);
              float32x4_t v151 = (float32x4_t)vdupq_lane_s32(v135, 0);
              *(float *)v135.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
              *(float *)v147.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
              *(float *)v136.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
              float v152 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
              *(float *)&long long v137 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
              *(float *)&long long v18 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
              size_t v153 = (char *)v1512.data;
              size_t v154 = v1512.rowBytes;
              float32x4_t v1344 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
              float32x4_t v1353 = (float32x4_t)vdupq_lane_s32(v136, 0);
              float32x4_t v1334 = (float32x4_t)vdupq_lane_s32(v147, 0);
              float32x4_t v1310 = (float32x4_t)vdupq_lane_s32(v135, 0);
              float32x4_t v1319 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
              float32x4_t v1300 = (float32x4_t)vdupq_laneq_s32(a14, 2);
              float32x4_t v155 = (float32x4_t)vdupq_laneq_s32(a15, 2);
              float32x4_t v156 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
              float32x4_t v1290 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
              float v157 = *((float *)&a17 + 1);
              float v1371 = 1.0 / *(float *)&a9;
              float v1362 = 1.0 / *(float *)&v1490;
              float32x4_t v1466 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
              float32x4_t v1474 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
              float32x4_t v1447 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
              int32x4_t v1457 = vdupq_n_s32(v133 * (v131 >> 2) - 4);
              float32x4_t v1427 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
              float v1437 = v152;
              float32x4_t v1407 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
              int32x4_t v1417 = vdupq_n_s32(v131 >> 2);
              int32x4_t v1389 = vdupq_n_s32(v129);
              int32x4_t v1398 = vdupq_n_s32(v130);
              do
              {
                unint64_t v158 = (float16x4_t *)&v153[v145 * v154];
                unint64_t v159 = 0;
                if (v149)
                {
                  float32x4_t v1493 = vmlaq_f32(v1344, v1353, v151);
                  float32x4_t v1482 = vmlaq_f32(v1319, v1334, v151);
                  float32x4_t v1380 = v151;
                  float32x4_t v1502 = vmlaq_f32(v1300, v1310, v151);
                  float32x4_t v160 = v1290;
                  do
                  {
                    float32x4_t v161 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                    float32x4_t v162 = vmulq_f32(vcvtq_f32_f16(*v158), v161);
                    float32x4_t v163 = vmulq_f32(vcvtq_f32_f16(v158[1]), v161);
                    __asm { FMOV            V1.4S, #4.0 }
                    float32x4_t v165 = vaddq_f32(v160, _Q1);
                    float32x4_t v166 = vmulq_f32(vcvtq_f32_f16(v158[2]), v161);
                    _Q1.i64[0] = 0x4100000041000000;
                    _Q1.i64[1] = 0x4100000041000000;
                    float32x4_t v167 = vaddq_f32(v160, _Q1);
                    __asm { FMOV            V1.4S, #12.0 }
                    float32x4_t v169 = vaddq_f32(v160, _Q1);
                    float32x4_t v170 = vmulq_f32(vcvtq_f32_f16(v158[3]), v161);
                    float32x4_t v171 = vmlaq_f32(v155, vmlaq_n_f32(v1502, v160, v152), v162);
                    float32x4_t v172 = vmlaq_f32(v155, vmlaq_n_f32(v1502, v165, v152), v163);
                    float32x4_t v173 = vmlaq_f32(v155, vmlaq_n_f32(v1502, v167, v152), v166);
                    float32x4_t v174 = vmlaq_f32(v155, vmlaq_n_f32(v1502, v169, v152), v170);
                    float32x4_t v175 = vmlaq_f32(v156, vmlaq_n_f32(v1493, v160, *(float *)&v18), v162);
                    float32x4_t v176 = vmlaq_f32(v1407, vmlaq_n_f32(v1482, v160, *(float *)&v137), v162);
                    float32x4_t v177 = v155;
                    float32x4_t v178 = vmlaq_f32(v156, vmlaq_n_f32(v1493, v165, *(float *)&v18), v163);
                    float32x4_t v179 = vmlaq_f32(v1407, vmlaq_n_f32(v1482, v165, *(float *)&v137), v163);
                    float32x4_t v180 = vmlaq_f32(v156, vmlaq_n_f32(v1493, v167, *(float *)&v18), v166);
                    int8x16_t v181 = vandq_s8((int8x16_t)vcgezq_f32(v171), (int8x16_t)vcgtzq_f32(v162));
                    float32x4_t v182 = vmlaq_f32(v1407, vmlaq_n_f32(v1482, v167, *(float *)&v137), v166);
                    int8x16_t v183 = vandq_s8((int8x16_t)vcgezq_f32(v172), (int8x16_t)vcgtzq_f32(v163));
                    float32x4_t v184 = vmlaq_f32(v156, vmlaq_n_f32(v1493, v169, *(float *)&v18), v170);
                    int8x16_t v185 = vandq_s8((int8x16_t)vcgezq_f32(v173), (int8x16_t)vcgtzq_f32(v166));
                    float32x4_t v186 = vmlaq_f32(v1407, vmlaq_n_f32(v1482, v169, *(float *)&v137), v170);
                    float32x4_t v187 = vmlaq_f32(v1466, vdivq_f32(v1427, v171), v175);
                    float32x4_t v188 = vmlaq_f32(v1474, vdivq_f32(v1447, v171), v176);
                    float32x4_t v189 = vmlaq_f32(v1466, vdivq_f32(v1427, v172), v178);
                    float32x4_t v190 = vdivq_f32(v1427, v173);
                    float32x4_t v191 = vmlaq_f32(v1474, vdivq_f32(v1447, v172), v179);
                    float32x4_t v192 = vdivq_f32(v1447, v173);
                    float32x4_t v193 = v156;
                    long long v194 = v18;
                    long long v195 = v137;
                    float32x4_t v196 = vdivq_f32(v1427, v174);
                    int8x16_t v197 = (int8x16_t)vdivq_f32(v161, v171);
                    int8x16_t v198 = (int8x16_t)vdivq_f32(v161, v172);
                    int8x16_t v199 = (int8x16_t)vdivq_f32(v161, v173);
                    int8x16_t v200 = (int8x16_t)vdivq_f32(v161, v174);
                    float32x4_t v201 = vdivq_f32(v1447, v174);
                    int8x16_t v202 = vandq_s8((int8x16_t)vcgezq_f32(v174), (int8x16_t)vcgtzq_f32(v170));
                    int32x4_t v203 = vcvtmq_s32_f32(v187);
                    int32x4_t v204 = vcvtmq_s32_f32(v188);
                    int32x4_t v205 = vcvtmq_s32_f32(v189);
                    int32x4_t v206 = vcvtmq_s32_f32(v191);
                    int32x4_t v207 = vcvtmq_s32_f32(vmlaq_f32(v1466, v190, v180));
                    float32x4_t v208 = vmlaq_f32(v1466, v196, v184);
                    long long v137 = v195;
                    long long v18 = v194;
                    float32x4_t v156 = v193;
                    int32x4_t v209 = vcvtmq_s32_f32(vmlaq_f32(v1474, v192, v182));
                    int32x4_t v210 = vcvtmq_s32_f32(v208);
                    int32x4_t v211 = vcvtmq_s32_f32(vmlaq_f32(v1474, v201, v186));
                    v212.i64[0] = -1;
                    v212.i64[1] = -1;
                    int8x16_t v213 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1389, v204), (int8x16_t)vcgtq_s32(v1398, v203)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v204, (int8x16_t)v203), v212));
                    int8x16_t v214 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1389, v206), (int8x16_t)vcgtq_s32(v1398, v205)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v206, (int8x16_t)v205), v212));
                    int8x16_t v215 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1389, v209), (int8x16_t)vcgtq_s32(v1398, v207)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v209, (int8x16_t)v207), v212));
                    int8x16_t v216 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1389, v211), (int8x16_t)vcgtq_s32(v1398, v210)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v211, (int8x16_t)v210), v212));
                    float32x4_t v155 = v177;
                    float v152 = v1437;
                    int32x4_t v217 = vminq_s32(vmaxq_s32(vmlaq_s32(v203, v204, v1417), (int32x4_t)0), v1457);
                    unsigned __int32 v218 = v217.u32[1];
                    unsigned __int32 v219 = v217.u32[2];
                    unsigned __int32 v220 = v217.u32[3];
                    int32x4_t v221 = vminq_s32(vmaxq_s32(vmlaq_s32(v205, v206, v1417), (int32x4_t)0), v1457);
                    int8x16_t v222 = vandq_s8(vandq_s8(v197, v181), v213);
                    v134[v217.u32[0]] = fmaxf(*(float *)v222.i32, v134[v217.u32[0]]);
                    int8x16_t v223 = vandq_s8(vandq_s8(v198, v183), v214);
                    int32x4_t v224 = vminq_s32(vmaxq_s32(vmlaq_s32(v207, v209, v1417), (int32x4_t)0), v1457);
                    v134[v221.u32[1]] = fmaxf(*(float *)&v223.i32[1], v134[v221.u32[1]]);
                    int8x16_t v225 = vandq_s8(vandq_s8(v199, v185), v215);
                    int32x4_t v226 = vminq_s32(vmaxq_s32(vmlaq_s32(v210, v211, v1417), (int32x4_t)0), v1457);
                    v134[v224.u32[2]] = fmaxf(*(float *)&v225.i32[2], v134[v224.u32[2]]);
                    int8x16_t v227 = vandq_s8(vandq_s8(v200, v202), v216);
                    v134[v226.u32[3]] = fmaxf(*(float *)&v227.i32[3], v134[v226.u32[3]]);
                    v134[v218] = fmaxf(*(float *)&v222.i32[1], v134[v218]);
                    v134[v221.u32[2]] = fmaxf(*(float *)&v223.i32[2], v134[v221.u32[2]]);
                    v134[v224.u32[3]] = fmaxf(*(float *)&v225.i32[3], v134[v224.u32[3]]);
                    v134[v226.u32[0]] = fmaxf(*(float *)v227.i32, v134[v226.u32[0]]);
                    v134[v219] = fmaxf(*(float *)&v222.i32[2], v134[v219]);
                    v134[v221.u32[3]] = fmaxf(*(float *)&v223.i32[3], v134[v221.u32[3]]);
                    v134[v224.u32[0]] = fmaxf(*(float *)v225.i32, v134[v224.u32[0]]);
                    v134[v226.u32[1]] = fmaxf(*(float *)&v227.i32[1], v134[v226.u32[1]]);
                    v134[v220] = fmaxf(*(float *)&v222.i32[3], v134[v220]);
                    v134[v221.u32[0]] = fmaxf(*(float *)v223.i32, v134[v221.u32[0]]);
                    v134[v224.u32[1]] = fmaxf(*(float *)&v225.i32[1], v134[v224.u32[1]]);
                    v134[v226.u32[2]] = fmaxf(*(float *)&v227.i32[2], v134[v226.u32[2]]);
                    __asm { FMOV            V0.4S, #16.0 }
                    float32x4_t v160 = vaddq_f32(v160, _Q0);
                    v158 += 4;
                    v159 += 16;
                  }
                  while (v159 < v149);
                  unint64_t v159 = (((v128 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
                  float32x4_t v139 = (float32x4_t)a14;
                  float32x4_t v138 = (float32x4_t)a15;
                  float32x4_t v141 = a12;
                  float32x4_t v140 = a13;
                  float v143 = *(float *)&a18;
                  float v142 = *(float *)&a11;
                  float v144 = *(float *)&a16;
                  float v146 = v1371;
                  float v148 = v1362;
                  float v150 = 0.5;
                  float32x4_t v151 = v1380;
                  float v157 = *((float *)&a17 + 1);
                }
                if (v159 < v128)
                {
                  do
                  {
                    _H2 = v158->i16[0];
                    __asm { FCVT            S2, H2 }
                    float v231 = _S2 * 1000.0;
                    _Q2 = vaddq_f32(v138, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v141, v146 * (float)((float)((float)((float)v159 + v150) - v142) * (float)(_S2 * 1000.0))), v140, v148* (float)((float)((float)((float)v145 + v150) - *((float *)&a11 + 1))* (float)(_S2 * 1000.0))), v139, _S2 * 1000.0));
                    if (_Q2.f32[2] >= 0.0 && v231 > 0.0)
                    {
                      uint64_t v233 = (int)vmlas_n_f32(v143, v144 / _Q2.f32[2], _Q2.f32[0]);
                      if ((v233 & 0x80000000) == 0 && (__int16)v130 > (int)v233)
                      {
                        _S3 = v157 / _Q2.f32[2];
                        __asm { FMLA            S4, S3, V2.S[1] }
                        if (((int)_S4 & 0x80000000) == 0 && (__int16)v129 > (int)(unsigned __int16)(int)_S4)
                        {
                          float v236 = 1000.0 / _Q2.f32[2];
                          v237 = &v134[(v131 >> 2) * (unsigned __int16)(int)_S4];
                          float v238 = v237[v233];
                          if (v238 == 0.0 || v238 < v236) {
                            v237[v233] = v236;
                          }
                        }
                      }
                    }
                    ++v159;
                    unint64_t v158 = (float16x4_t *)((char *)v158 + 2);
                  }
                  while (v128 != v159);
                }
                ++v145;
                __asm { FMOV            V0.4S, #1.0 }
                float32x4_t v151 = vaddq_f32(v151, _Q0);
              }
              while (v145 != v127);
            }
LABEL_389:
            CVPixelBufferUnlockBaseAddress(a1, 1uLL);
            float v1116 = pixelBuffer;
            goto LABEL_390;
          }
LABEL_391:
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            goto LABEL_393;
          }
          return -22950;
        }
LABEL_184:
        size_t v718 = CVPixelBufferGetHeight(a1);
        size_t v719 = CVPixelBufferGetWidth(a1);
        size_t v720 = CVPixelBufferGetHeight(pixelBuffer);
        unsigned int v721 = CVPixelBufferGetWidth(pixelBuffer);
        size_t v722 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        CVPixelBufferLockBaseAddress(a1, 1uLL);
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        memset(&v1512, 0, sizeof(v1512));
        float v723 = (CGRect *)MEMORY[0x263F001A8];
        PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
        memset(&buf, 0, sizeof(buf));
        PixelBufferUtils::asVImageBuffer(pixelBuffer, *v723, &buf);
        size_t v725 = v722 >> 2;
        int32x2_t v726 = (float *)buf.data;
        if (v725 * v720) {
          memset_pattern16(buf.data, &unk_247F24670, 4 * v725 * v720);
        }
        vImagePixelCount v727 = buf.height;
        float32x4_t v729 = (float32x4_t)a14;
        float32x4_t v728 = (float32x4_t)a15;
        float32x4_t v731 = a12;
        float32x4_t v730 = a13;
        float v733 = *(float *)&a18;
        float v732 = *(float *)&a11;
        float v734 = *(float *)&a16;
        if (v718)
        {
          unint64_t v735 = 0;
          v736.i32[1] = v1490;
          v737.i32[1] = HIDWORD(a9);
          float v738 = 1.0 / *(float *)&a9;
          float v739 = 1.0 / *(float *)&v1490;
          unint64_t v740 = v719 & 0xFFFFFFFFFFFFFFF0;
          float v741 = 0.5;
          *(float *)v724.i32 = 0.5 - *((float *)&a11 + 1);
          float32x4_t v742 = (float32x4_t)vdupq_lane_s32(v724, 0);
          *(float *)v724.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
          *(float *)v736.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
          *(float *)v737.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
          float v743 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
          float v744 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
          float32x4_t v1349 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
          float32x4_t v1358 = (float32x4_t)vdupq_lane_s32(v737, 0);
          float32x4_t v1339 = (float32x4_t)vdupq_lane_s32(v736, 0);
          float v745 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
          float32x4_t v1315 = (float32x4_t)vdupq_lane_s32(v724, 0);
          float32x4_t v1321 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
          float32x4_t v1305 = (float32x4_t)vdupq_laneq_s32(a14, 2);
          unint64_t v746 = (char *)v1512.data;
          size_t v747 = v1512.rowBytes;
          float32x4_t v1295 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
          float32x4_t v748 = (float32x4_t)vdupq_laneq_s32(a15, 2);
          float32x4_t v749 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
          float32x4_t v750 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
          int32x4_t v751 = vdupq_n_s32(v725);
          int32x4_t v1394 = vdupq_n_s32(LODWORD(buf.height) * (int)v725 - 4);
          float32x4_t v752 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
          float32x4_t v753 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
          float v754 = *((float *)&a17 + 1);
          float v1376 = 1.0 / *(float *)&a9;
          float v1367 = 1.0 / *(float *)&v1490;
          int32x4_t v1422 = vdupq_n_s32(v720);
          int32x4_t v1432 = vdupq_n_s32(v721);
          float32x4_t v1403 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
          float32x4_t v1412 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
          do
          {
            v755 = (float16x4_t *)&v746[v735 * v747];
            unint64_t v756 = 0;
            if (v740)
            {
              float32x4_t v1462 = vmlaq_f32(v1349, v1358, v742);
              float32x4_t v1452 = vmlaq_f32(v1321, v1339, v742);
              float32x4_t v1384 = v742;
              float32x4_t v1442 = vmlaq_f32(v1305, v1315, v742);
              float32x4_t v757 = v1295;
              do
              {
                float32x4_t v758 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                float32x4_t v759 = vmulq_f32(vcvtq_f32_f16(*v755), v758);
                float32x4_t v760 = vmulq_f32(vcvtq_f32_f16(v755[1]), v758);
                float32x4_t v761 = vmulq_f32(vcvtq_f32_f16(v755[2]), v758);
                __asm { FMOV            V0.4S, #4.0 }
                float32x4_t v763 = vaddq_f32(v757, _Q0);
                _Q0.i64[0] = 0x4100000041000000;
                _Q0.i64[1] = 0x4100000041000000;
                float32x4_t v764 = vaddq_f32(v757, _Q0);
                __asm { FMOV            V0.4S, #12.0 }
                float32x4_t v766 = vaddq_f32(v757, _Q0);
                float32x4_t v767 = vmulq_f32(vcvtq_f32_f16(v755[3]), v758);
                float32x4_t v768 = v748;
                float32x4_t v769 = vmlaq_f32(v748, vmlaq_n_f32(v1442, v757, v743), v759);
                float32x4_t v770 = vmlaq_f32(v748, vmlaq_n_f32(v1442, v763, v743), v760);
                float32x4_t v771 = vmlaq_f32(v748, vmlaq_n_f32(v1442, v764, v743), v761);
                float32x4_t v772 = vmlaq_f32(v748, vmlaq_n_f32(v1442, v766, v743), v767);
                int8x16_t v773 = vandq_s8((int8x16_t)vcgezq_f32(v769), (int8x16_t)vcgtzq_f32(v759));
                int8x16_t v1479 = vandq_s8((int8x16_t)vcgezq_f32(v770), (int8x16_t)vcgtzq_f32(v760));
                float32x4_t v774 = vmlaq_f32(v749, vmlaq_n_f32(v1462, v763, v745), v760);
                float32x4_t v775 = vmlaq_f32(v750, vmlaq_n_f32(v1452, v763, v744), v760);
                int8x16_t v1471 = vandq_s8((int8x16_t)vcgezq_f32(v771), (int8x16_t)vcgtzq_f32(v761));
                float32x4_t v776 = vmlaq_f32(v749, vmlaq_n_f32(v1462, v764, v745), v761);
                float32x4_t v777 = vmlaq_f32(v750, vmlaq_n_f32(v1452, v764, v744), v761);
                int8x16_t v778 = vandq_s8((int8x16_t)vcgezq_f32(v772), (int8x16_t)vcgtzq_f32(v767));
                float32x4_t v779 = vmlaq_f32(v749, vmlaq_n_f32(v1462, v766, v745), v767);
                float32x4_t v780 = vmlaq_n_f32(v1452, v766, v744);
                float32x4_t v781 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
                int8x16_t v782 = (int8x16_t)vmulq_f32(v769, v781);
                int8x16_t v1487 = (int8x16_t)vmulq_f32(v770, v781);
                int8x16_t v1498 = (int8x16_t)vmulq_f32(v771, v781);
                int8x16_t v1507 = (int8x16_t)vmulq_f32(v772, v781);
                int32x4_t v783 = vcvtmq_s32_f32(vmlaq_f32(v1412, vdivq_f32(v752, v769), vmlaq_f32(v749, vmlaq_n_f32(v1462, v757, v745), v759)));
                int32x4_t v784 = vcvtmq_s32_f32(vmlaq_f32(v1403, vdivq_f32(v753, v769), vmlaq_f32(v750, vmlaq_n_f32(v1452, v757, v744), v759)));
                int32x4_t v785 = vcvtmq_s32_f32(vmlaq_f32(v1412, vdivq_f32(v752, v770), v774));
                int32x4_t v786 = vcvtmq_s32_f32(vmlaq_f32(v1403, vdivq_f32(v753, v770), v775));
                float32x4_t v787 = vmlaq_f32(v1412, vdivq_f32(v752, v772), v779);
                float32x4_t v788 = vmlaq_f32(v1403, vdivq_f32(v753, v772), vmlaq_f32(v750, v780, v767));
                v780.i64[0] = -1;
                v780.i64[1] = -1;
                int32x4_t v789 = vcvtmq_s32_f32(vmlaq_f32(v1412, vdivq_f32(v752, v771), v776));
                int32x4_t v790 = vcvtmq_s32_f32(vmlaq_f32(v1403, vdivq_f32(v753, v771), v777));
                int32x4_t v791 = vcvtmq_s32_f32(v787);
                int32x4_t v792 = vcvtmq_s32_f32(v788);
                int8x16_t v793 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1422, v786), (int8x16_t)vcgtq_s32(v1432, v785)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v786, (int8x16_t)v785), (int32x4_t)v780)), v1479);
                int8x16_t v794 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1422, v790), (int8x16_t)vcgtq_s32(v1432, v789)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v790, (int8x16_t)v789), (int32x4_t)v780)), v1471);
                int32x4_t v795 = vmlaq_s32(v785, v786, v751);
                int8x16_t v796 = (int8x16_t)vdupq_n_s32(0x7F7FFFFFu);
                int8x16_t v797 = vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1422, v784), (int8x16_t)vcgtq_s32(v1432, v783)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v784, (int8x16_t)v783), (int32x4_t)v780)), v773), v782, v796);
                int32x4_t v798 = vmaxq_s32(vmlaq_s32(v783, v784, v751), (int32x4_t)0);
                float32x4_t v748 = v768;
                int32x4_t v799 = vminq_s32(v798, v1394);
                unsigned __int32 v800 = v799.u32[1];
                unsigned __int32 v801 = v799.u32[2];
                unsigned __int32 v802 = v799.u32[3];
                v726[v799.u32[0]] = fminf(*(float *)v797.i32, v726[v799.u32[0]]);
                int32x4_t v803 = vminq_s32(vmaxq_s32(v795, (int32x4_t)0), v1394);
                int32x4_t v804 = vminq_s32(vmaxq_s32(vmlaq_s32(v789, v790, v751), (int32x4_t)0), v1394);
                int8x16_t v805 = vbslq_s8(v793, v1487, v796);
                int8x16_t v806 = vbslq_s8(v794, v1498, v796);
                v726[v803.u32[1]] = fminf(*(float *)&v805.i32[1], v726[v803.u32[1]]);
                v726[v804.u32[2]] = fminf(*(float *)&v806.i32[2], v726[v804.u32[2]]);
                int32x4_t v807 = vminq_s32(vmaxq_s32(vmlaq_s32(v791, v792, v751), (int32x4_t)0), v1394);
                int8x16_t v808 = vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1422, v792), (int8x16_t)vcgtq_s32(v1432, v791)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v792, (int8x16_t)v791), (int32x4_t)v780)), v778), v1507, v796);
                v726[v807.u32[3]] = fminf(*(float *)&v808.i32[3], v726[v807.u32[3]]);
                v726[v800] = fminf(*(float *)&v797.i32[1], v726[v800]);
                v726[v803.u32[2]] = fminf(*(float *)&v805.i32[2], v726[v803.u32[2]]);
                v726[v804.u32[3]] = fminf(*(float *)&v806.i32[3], v726[v804.u32[3]]);
                v726[v807.u32[0]] = fminf(*(float *)v808.i32, v726[v807.u32[0]]);
                v726[v801] = fminf(*(float *)&v797.i32[2], v726[v801]);
                v726[v803.u32[3]] = fminf(*(float *)&v805.i32[3], v726[v803.u32[3]]);
                v726[v804.u32[0]] = fminf(*(float *)v806.i32, v726[v804.u32[0]]);
                v726[v807.u32[1]] = fminf(*(float *)&v808.i32[1], v726[v807.u32[1]]);
                v726[v802] = fminf(*(float *)&v797.i32[3], v726[v802]);
                v726[v803.u32[0]] = fminf(*(float *)v805.i32, v726[v803.u32[0]]);
                v726[v804.u32[1]] = fminf(*(float *)&v806.i32[1], v726[v804.u32[1]]);
                v726[v807.u32[2]] = fminf(*(float *)&v808.i32[2], v726[v807.u32[2]]);
                __asm { FMOV            V0.4S, #16.0 }
                float32x4_t v757 = vaddq_f32(v757, _Q0);
                v755 += 4;
                v756 += 16;
              }
              while (v756 < v740);
              unint64_t v756 = (((v719 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
              float32x4_t v729 = (float32x4_t)a14;
              float32x4_t v728 = (float32x4_t)a15;
              float32x4_t v731 = a12;
              float32x4_t v730 = a13;
              float v733 = *(float *)&a18;
              float v732 = *(float *)&a11;
              float v734 = *(float *)&a16;
              float v738 = v1376;
              float v739 = v1367;
              float v741 = 0.5;
              float32x4_t v742 = v1384;
              float v754 = *((float *)&a17 + 1);
            }
            if (v756 < v719)
            {
              do
              {
                _H2 = v755->i16[0];
                __asm { FCVT            S2, H2 }
                float v812 = _S2 * 1000.0;
                _Q2 = vaddq_f32(v728, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v731, v738 * (float)((float)((float)((float)v756 + v741) - v732) * (float)(_S2 * 1000.0))), v730, v739* (float)((float)((float)((float)v735 + v741) - *((float *)&a11 + 1)) * (float)(_S2 * 1000.0))), v729, _S2 * 1000.0));
                if (_Q2.f32[2] >= 0.0 && v812 > 0.0)
                {
                  uint64_t v814 = (int)vmlas_n_f32(v733, v734 / _Q2.f32[2], _Q2.f32[0]);
                  if ((v814 & 0x80000000) == 0 && (__int16)v721 > (int)v814)
                  {
                    _S3 = v754 / _Q2.f32[2];
                    __asm { FMLA            S4, S3, V2.S[1] }
                    if (((int)_S4 & 0x80000000) == 0 && (__int16)v720 > (int)(unsigned __int16)(int)_S4)
                    {
                      float v817 = _Q2.f32[2] * 0.001;
                      vImagePixelCount v818 = &v726[v725 * (unsigned __int16)(int)_S4];
                      float v819 = v818[v814];
                      if (v819 == 0.0 || v819 > v817) {
                        v818[v814] = v817;
                      }
                    }
                  }
                }
                ++v756;
                v755 = (float16x4_t *)((char *)v755 + 2);
              }
              while (v719 != v756);
            }
            ++v735;
            __asm { FMOV            V0.4S, #1.0 }
            float32x4_t v742 = vaddq_f32(v742, _Q0);
          }
          while (v735 != v718);
        }
        if (v727)
        {
          uint64_t v822 = 0;
          long long v823 = *(_OWORD *)&buf.width;
          vImagePixelCount v824 = buf.width >> 4;
          size_t v825 = (char *)buf.data;
          vImagePixelCount v826 = buf.height;
          if (buf.width >> 4 <= 1) {
            vImagePixelCount v824 = 1;
          }
          if (buf.height <= 1) {
            vImagePixelCount v826 = 1;
          }
          unint64_t v827 = buf.width & 0xFFFFFFF0;
          float32x4_t v828 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
          do
          {
            int32x2_t v829 = (float32x4_t *)&v825[*((void *)&v823 + 1) * v822];
            vImagePixelCount v830 = v824;
            if ((unint64_t)v823 >= 0x10)
            {
              do
              {
                float32x4_t v831 = v829[2];
                float32x4_t v832 = v829[3];
                int8x16_t v833 = vbicq_s8((int8x16_t)v829[1], (int8x16_t)vceqq_f32(v829[1], v828));
                *(int8x16_t *)int32x2_t v829 = vbicq_s8(*(int8x16_t *)v829, (int8x16_t)vceqq_f32(*v829, v828));
                v829[1] = (float32x4_t)v833;
                v829[2] = (float32x4_t)vbicq_s8((int8x16_t)v831, (int8x16_t)vceqq_f32(v831, v828));
                v829[3] = (float32x4_t)vbicq_s8((int8x16_t)v832, (int8x16_t)vceqq_f32(v832, v828));
                v829 += 4;
                --v830;
              }
              while (v830);
            }
            unint64_t v834 = v823 & 0xFFFFFFFF0000000FLL;
            if ((unint64_t)v823 > v827)
            {
              do
              {
                if (v829->f32[0] == 3.4028e38) {
                  v829->i32[0] = 0;
                }
                int32x2_t v829 = (float32x4_t *)((char *)v829 + 4);
                --v834;
              }
              while (v834);
            }
            ++v822;
          }
          while (v822 != v826);
        }
        goto LABEL_389;
      }
      if (PixelFormatType != 1751410032)
      {
        if (PixelFormatType == 1751411059)
        {
          size_t v607 = CVPixelBufferGetHeight(a1);
          size_t v608 = CVPixelBufferGetWidth(a1);
          unsigned int v609 = CVPixelBufferGetHeight(pixelBuffer);
          unsigned int v610 = CVPixelBufferGetWidth(pixelBuffer);
          size_t v611 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          CVPixelBufferLockBaseAddress(a1, 1uLL);
          CVPixelBufferLockBaseAddress(pixelBuffer, 0);
          memset(&v1512, 0, sizeof(v1512));
          float32x4_t v612 = (CGRect *)MEMORY[0x263F001A8];
          PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
          memset(&buf, 0, sizeof(buf));
          PixelBufferUtils::asVImageBuffer(pixelBuffer, *v612, &buf);
          float v614 = (short float *)buf.data;
          int v613 = buf.height;
          bzero(buf.data, buf.height * buf.rowBytes);
          float32x4_t v620 = (float32x4_t)a14;
          float32x4_t v619 = (float32x4_t)a15;
          float32x4_t v622 = a12;
          float32x4_t v621 = a13;
          float v624 = *(float *)&a18;
          float v623 = *(float *)&a11;
          float v625 = *(float *)&a16;
          if (v607)
          {
            unint64_t v626 = 0;
            float v627 = 1.0 / *(float *)&a9;
            float v628 = 1.0 / *(float *)&v1490;
            unint64_t v629 = v608 & 0xFFFFFFFFFFFFFFF0;
            float v630 = 0.5;
            *(float *)v615.i32 = 0.5 - *((float *)&a11 + 1);
            float32x4_t v631 = (float32x4_t)vdupq_lane_s32(v615, 0);
            *(float *)v615.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
            *(float *)v616.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
            *(float *)v617.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
            *(float *)&long long v618 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
            float32x4_t v632 = (char *)v1512.data;
            size_t v633 = v1512.rowBytes;
            float32x4_t v1338 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
            float32x4_t v1348 = (float32x4_t)vdupq_lane_s32(v617, 0);
            float32x4_t v1314 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
            float32x4_t v1320 = (float32x4_t)vdupq_lane_s32(v616, 0);
            float32x4_t v1294 = (float32x4_t)vdupq_laneq_s32(a14, 2);
            float32x4_t v1304 = (float32x4_t)vdupq_lane_s32(v615, 0);
            float32x4_t v634 = (float32x4_t)vdupq_laneq_s32(a15, 2);
            int32x4_t v635 = vdupq_n_s32(v610);
            float32x4_t v1286 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
            int32x4_t v636 = vdupq_n_s32(v613 * (v611 >> 1) - 2);
            float v637 = *((float *)&a17 + 1);
            float v1366 = 1.0 / *(float *)&a9;
            float v1357 = 1.0 / *(float *)&v1490;
            float v1470 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
            float32x4_t v1478 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
            float32x4_t v1451 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
            int32x4_t v1461 = vdupq_n_s32(v609);
            float32x4_t v1431 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
            float32x4_t v1441 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
            float32x4_t v1411 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
            float v1421 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
            int32x4_t v1393 = vdupq_n_s32(v611 >> 1);
            float32x4_t v1402 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
            do
            {
              float32x4_t v638 = (float16x4_t *)&v632[v626 * v633];
              unint64_t v639 = 0;
              if (v629)
              {
                float32x4_t v1486 = vmlaq_f32(v1338, v1348, v631);
                float32x4_t v1506 = vmlaq_f32(v1314, v1320, v631);
                float32x4_t v1375 = v631;
                float32x4_t v1497 = vmlaq_f32(v1294, v1304, v631);
                float32x4_t v640 = v1286;
                do
                {
                  float32x4_t v641 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                  float32x4_t v642 = vmulq_f32(vcvtq_f32_f16(*v638), v641);
                  float32x4_t v643 = vmulq_f32(vcvtq_f32_f16(v638[1]), v641);
                  float32x4_t v644 = vmulq_f32(vcvtq_f32_f16(v638[2]), v641);
                  __asm { FMOV            V0.4S, #4.0 }
                  float32x4_t v646 = vaddq_f32(v640, _Q0);
                  _Q0.i64[0] = 0x4100000041000000;
                  _Q0.i64[1] = 0x4100000041000000;
                  float32x4_t v647 = vaddq_f32(v640, _Q0);
                  __asm { FMOV            V0.4S, #12.0 }
                  float32x4_t v649 = vaddq_f32(v640, _Q0);
                  float32x4_t v650 = vmulq_f32(vcvtq_f32_f16(v638[3]), v641);
                  float32x4_t v651 = vmlaq_f32(v634, vmlaq_n_f32(v1497, v640, *(float *)&v618), v642);
                  float32x4_t v652 = vmlaq_f32(v634, vmlaq_n_f32(v1497, v646, *(float *)&v618), v643);
                  float32x4_t v653 = vmlaq_f32(v634, vmlaq_n_f32(v1497, v647, *(float *)&v618), v644);
                  float32x4_t v654 = vmlaq_f32(v634, vmlaq_n_f32(v1497, v649, *(float *)&v618), v650);
                  int8x16_t v655 = (int8x16_t)vcgtzq_f32(v643);
                  int8x16_t v656 = (int8x16_t)vcgtzq_f32(v644);
                  float32x4_t v657 = vmlaq_f32(v1441, vmlaq_n_f32(v1486, v640, v1470), v642);
                  float32x4_t v658 = vmlaq_f32(v1402, vmlaq_n_f32(v1506, v640, v1421), v642);
                  float32x4_t v659 = vmlaq_f32(v1441, vmlaq_n_f32(v1486, v646, v1470), v643);
                  long long v660 = v618;
                  float32x4_t v661 = vmlaq_f32(v1402, vmlaq_n_f32(v1506, v646, v1421), v643);
                  float32x4_t v662 = vmlaq_f32(v1441, vmlaq_n_f32(v1486, v647, v1470), v644);
                  float32x4_t v663 = vmlaq_f32(v1402, vmlaq_n_f32(v1506, v647, v1421), v644);
                  int32x4_t v664 = v636;
                  float32x4_t v665 = v634;
                  int8x16_t v666 = vandq_s8((int8x16_t)vcgezq_f32(v651), (int8x16_t)vcgtzq_f32(v642));
                  int8x16_t v667 = vandq_s8((int8x16_t)vcgezq_f32(v652), v655);
                  float32x4_t v668 = vmlaq_f32(v1431, vdivq_f32(v1411, v651), v657);
                  float32x4_t v669 = vmlaq_f32(v1478, vdivq_f32(v1451, v651), v658);
                  int8x16_t v670 = vandq_s8((int8x16_t)vcgezq_f32(v653), v656);
                  float32x4_t v671 = vmlaq_f32(v1431, vdivq_f32(v1411, v652), v659);
                  float32x4_t v672 = vdivq_f32(v1411, v653);
                  float32x4_t v673 = vdivq_f32(v1451, v653);
                  int8x16_t v674 = vandq_s8((int8x16_t)vcgezq_f32(v654), (int8x16_t)vcgtzq_f32(v650));
                  float32x4_t v675 = vmlaq_f32(v1478, vdivq_f32(v1451, v652), v661);
                  float32x4_t v676 = vdivq_f32(v1411, v654);
                  float32x4_t v677 = vdivq_f32(v1451, v654);
                  int8x16_t v678 = (int8x16_t)vdivq_f32(v641, v651);
                  int8x16_t v679 = (int8x16_t)vdivq_f32(v641, v652);
                  int8x16_t v680 = (int8x16_t)vdivq_f32(v641, v653);
                  int8x16_t v681 = (int8x16_t)vdivq_f32(v641, v654);
                  int32x4_t v682 = vcvtmq_s32_f32(v668);
                  int32x4_t v683 = vcvtmq_s32_f32(v669);
                  int32x4_t v684 = vcvtmq_s32_f32(v671);
                  int32x4_t v685 = vcvtmq_s32_f32(v675);
                  int32x4_t v686 = vcvtmq_s32_f32(vmlaq_f32(v1431, v672, v662));
                  int32x4_t v687 = vcvtmq_s32_f32(vmlaq_f32(v1478, v673, v663));
                  int32x4_t v688 = vcvtmq_s32_f32(vmlaq_f32(v1431, v676, vmlaq_f32(v1441, vmlaq_n_f32(v1486, v649, v1470), v650)));
                  int32x4_t v689 = vcvtmq_s32_f32(vmlaq_f32(v1478, v677, vmlaq_f32(v1402, vmlaq_n_f32(v1506, v649, v1421), v650)));
                  v690.i64[0] = -1;
                  v690.i64[1] = -1;
                  int8x16_t v691 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1461, v685), (int8x16_t)vcgtq_s32(v635, v684)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v685, (int8x16_t)v684), v690));
                  int8x16_t v692 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1461, v687), (int8x16_t)vcgtq_s32(v635, v686)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v687, (int8x16_t)v686), v690));
                  int8x16_t v693 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1461, v689), (int8x16_t)vcgtq_s32(v635, v688)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v689, (int8x16_t)v688), v690));
                  int32x4_t v694 = vmlaq_s32(v684, v685, v1393);
                  float32x4_t v634 = v665;
                  int32x4_t v636 = v664;
                  int32x4_t v695 = vmlaq_s32(v686, v687, v1393);
                  int32x4_t v696 = vmlaq_s32(v688, v689, v1393);
                  float32x4_t v697 = (float32x4_t)vandq_s8(vandq_s8(v678, v666), vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1461, v683), (int8x16_t)vcgtq_s32(v635, v682)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v683, (int8x16_t)v682), v690)));
                  float32x4_t v698 = (float32x4_t)vandq_s8(vandq_s8(v679, v667), v691);
                  int8x16_t v699 = vandq_s8(v681, v674);
                  long long v618 = v660;
                  int32x4_t v700 = vminq_s32(vmaxq_s32(vmlaq_s32(v682, v683, v1393), (int32x4_t)0), v664);
                  int32x4_t v701 = vminq_s32(vmaxq_s32(v694, (int32x4_t)0), v664);
                  int32x4_t v702 = vminq_s32(vmaxq_s32(v695, (int32x4_t)0), v664);
                  int32x4_t v703 = vminq_s32(vmaxq_s32(v696, (int32x4_t)0), v664);
                  float32x4_t v704 = (float32x4_t)vandq_s8(v699, v693);
                  unsigned __int32 v705 = v700.u32[1];
                  *(float16x4_t *)v699.i8 = vcvt_f16_f32(v697);
                  v614[v700.u32[0]] = fmaxl(*(short float *)v699.i16, v614[v700.u32[0]]);
                  *(float16x4_t *)v696.i8 = vcvt_f16_f32(v698);
                  v614[v701.u32[1]] = fmaxl(*(short float *)&v696.i16[1], v614[v701.u32[1]]);
                  *(float16x4_t *)v700.i8 = vcvt_f16_f32((float32x4_t)vandq_s8(vandq_s8(v680, v670), v692));
                  v614[v702.u32[2]] = fmaxl(*(short float *)&v700.i16[2], v614[v702.u32[2]]);
                  *(float16x4_t *)v667.i8 = vcvt_f16_f32(v704);
                  v614[v703.u32[3]] = fmaxl(*(short float *)&v667.i16[3], v614[v703.u32[3]]);
                  v614[v705] = fmaxl(*(short float *)&v699.i16[1], v614[v705]);
                  v614[v701.u32[2]] = fmaxl(*(short float *)&v696.i16[2], v614[v701.u32[2]]);
                  v614[v702.u32[3]] = fmaxl(*(short float *)&v700.i16[3], v614[v702.u32[3]]);
                  v614[v703.u32[0]] = fmaxl(*(short float *)v667.i16, v614[v703.u32[0]]);
                  v614[v700.u32[2]] = fmaxl(*(short float *)&v699.i16[2], v614[v700.u32[2]]);
                  v614[v701.u32[3]] = fmaxl(*(short float *)&v696.i16[3], v614[v701.u32[3]]);
                  v614[v702.u32[0]] = fmaxl(*(short float *)v700.i16, v614[v702.u32[0]]);
                  v614[v703.u32[1]] = fmaxl(*(short float *)&v667.i16[1], v614[v703.u32[1]]);
                  v614[v700.u32[3]] = fmaxl(*(short float *)&v699.i16[3], v614[v700.u32[3]]);
                  v614[v701.u32[0]] = fmaxl(*(short float *)v696.i16, v614[v701.u32[0]]);
                  v614[v702.u32[1]] = fmaxl(*(short float *)&v700.i16[1], v614[v702.u32[1]]);
                  v614[v703.u32[2]] = fmaxl(*(short float *)&v667.i16[2], v614[v703.u32[2]]);
                  __asm { FMOV            V0.4S, #16.0 }
                  float32x4_t v640 = vaddq_f32(v640, _Q0);
                  v638 += 4;
                  v639 += 16;
                }
                while (v639 < v629);
                unint64_t v639 = (((v608 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
                float32x4_t v620 = (float32x4_t)a14;
                float32x4_t v619 = (float32x4_t)a15;
                float32x4_t v622 = a12;
                float32x4_t v621 = a13;
                float v624 = *(float *)&a18;
                float v623 = *(float *)&a11;
                float v625 = *(float *)&a16;
                float v627 = v1366;
                float v628 = v1357;
                float v630 = 0.5;
                float32x4_t v631 = v1375;
                float v637 = *((float *)&a17 + 1);
              }
              if (v639 < v608)
              {
                do
                {
                  _H2 = v638->i16[0];
                  __asm { FCVT            S2, H2 }
                  _Q4 = vaddq_f32(v619, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v622, v627 * (float)((float)((float)((float)v639 + v630) - v623) * (float)(_S2 * 1000.0))), v621, v628* (float)((float)((float)((float)v626 + v630) - *((float *)&a11 + 1)) * (float)(_S2 * 1000.0))), v620, _S2 * 1000.0));
                  if (_Q4.f32[2] >= 0.0 && (float)(_S2 * 1000.0) > 0.0)
                  {
                    uint64_t v710 = (int)vmlas_n_f32(v624, v625 / _Q4.f32[2], _Q4.f32[0]);
                    if ((v710 & 0x80000000) == 0 && (__int16)v610 > (int)v710)
                    {
                      _S1 = v637 / _Q4.f32[2];
                      __asm { FMLA            S2, S1, V4.S[1] }
                      if (((int)_S2 & 0x80000000) == 0 && (__int16)v609 > (int)(unsigned __int16)(int)_S2)
                      {
                        _S1 = 1000.0 / _Q4.f32[2];
                        __asm
                        {
                          FCVT            H3, S1
                          FCMP            H1, #0
                        }
                        if (_ZF || _H1 < _H3) {
                          v614[(v611 >> 1) * (unsigned __int16)(int)_S2 + v710] = _H3;
                        }
                      }
                    }
                  }
                  ++v639;
                  float32x4_t v638 = (float16x4_t *)((char *)v638 + 2);
                }
                while (v608 != v639);
              }
              ++v626;
              __asm { FMOV            V0.4S, #1.0 }
              float32x4_t v631 = vaddq_f32(v631, _Q0);
            }
            while (v626 != v607);
          }
          goto LABEL_389;
        }
        goto LABEL_391;
      }
    }
    size_t v835 = CVPixelBufferGetHeight(a1);
    size_t v836 = CVPixelBufferGetWidth(a1);
    size_t v837 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v838 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v839 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    memset(&v1512, 0, sizeof(v1512));
    float v840 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v840, &buf);
    size_t v845 = v839 >> 1;
    unint64_t v846 = (short float *)buf.data;
    if (v845 * v837) {
      memset_pattern16(buf.data, &unk_247F24680, 2 * v845 * v837);
    }
    vImagePixelCount v847 = buf.height;
    float32x4_t v848 = (float32x4_t)a14;
    float32x4_t v849 = (float32x4_t)a15;
    float32x4_t v851 = a12;
    float32x4_t v850 = a13;
    float v853 = *(float *)&a18;
    float v852 = *(float *)&a11;
    float v854 = *(float *)&a16;
    if (v835)
    {
      unint64_t v855 = 0;
      float v856 = 1.0 / *(float *)&a9;
      float v857 = 1.0 / *(float *)&v1490;
      unint64_t v858 = v836 & 0xFFFFFFFFFFFFFFF0;
      float v859 = 0.5;
      *(float *)v841.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v860 = (float32x4_t)vdupq_lane_s32(v841, 0);
      *(float *)v841.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
      *(float *)v842.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
      *(float *)v843.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
      *(float *)&long long v844 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      float v861 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      float32x4_t v1350 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1359 = (float32x4_t)vdupq_lane_s32(v843, 0);
      float32x4_t v1340 = (float32x4_t)vdupq_lane_s32(v842, 0);
      float v862 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v1316 = (float32x4_t)vdupq_lane_s32(v841, 0);
      float32x4_t v1322 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1306 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      float32x4_t v863 = (char *)v1512.data;
      size_t v864 = v1512.rowBytes;
      float32x4_t v1296 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      float32x4_t v865 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v866 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v867 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      int32x4_t v868 = vdupq_n_s32(LODWORD(buf.height) * (int)v845 - 2);
      v869.i64[0] = 0x4100000041000000;
      v869.i64[1] = 0x4100000041000000;
      float v1377 = 1.0 / *(float *)&a9;
      float v1368 = 1.0 / *(float *)&v1490;
      float32x4_t v1463 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      int32x4_t v1472 = vdupq_n_s32(v838);
      int32x4_t v1443 = vdupq_n_s32(v845);
      float32x4_t v1453 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      float32x4_t v1423 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      float32x4_t v1433 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      int32x4_t v1413 = vdupq_n_s32(v837);
      do
      {
        float32x4_t v870 = (float16x4_t *)&v863[v855 * v864];
        unint64_t v871 = 0;
        if (v858)
        {
          float32x4_t v1499 = vmlaq_f32(v1350, v1359, v860);
          float32x4_t v1480 = vmlaq_f32(v1322, v1340, v860);
          float32x4_t v1385 = v860;
          float32x4_t v1488 = vmlaq_f32(v1306, v1316, v860);
          float32x4_t v872 = v1296;
          do
          {
            float32x4_t v1508 = v872;
            float32x4_t v873 = (float32x4_t)vdupq_n_s32(0x447A0000u);
            float32x4_t v874 = vmulq_f32(vcvtq_f32_f16(*v870), v873);
            float32x4_t v875 = vmulq_f32(vcvtq_f32_f16(v870[1]), v873);
            float32x4_t v876 = vmulq_f32(vcvtq_f32_f16(v870[2]), v873);
            __asm { FMOV            V0.4S, #4.0 }
            float32x4_t v878 = vaddq_f32(v872, _Q0);
            float32x4_t v879 = vaddq_f32(v1508, v869);
            float32x4_t v880 = vmulq_f32(vcvtq_f32_f16(v870[3]), v873);
            __asm { FMOV            V0.4S, #12.0 }
            float32x4_t v882 = vaddq_f32(v1508, _Q0);
            long long v883 = v844;
            float32x4_t v884 = vmlaq_f32(v865, vmlaq_n_f32(v1488, v1508, *(float *)&v844), v874);
            float32x4_t v885 = vmlaq_f32(v865, vmlaq_n_f32(v1488, v878, *(float *)&v844), v875);
            float32x4_t v886 = vmlaq_f32(v865, vmlaq_n_f32(v1488, v879, *(float *)&v844), v876);
            float32x4_t v887 = vmlaq_f32(v865, vmlaq_n_f32(v1488, v882, *(float *)&v844), v880);
            int32x4_t v888 = v868;
            float32x4_t v889 = v866;
            float32x4_t v890 = vmlaq_f32(v866, vmlaq_n_f32(v1499, v1508, v862), v874);
            float32x4_t v891 = vmlaq_f32(v867, vmlaq_n_f32(v1480, v1508, v861), v874);
            float32x4_t v892 = vmlaq_f32(v866, vmlaq_n_f32(v1499, v878, v862), v875);
            int8x16_t v893 = vandq_s8((int8x16_t)vcgezq_f32(v884), (int8x16_t)vcgtzq_f32(v874));
            int8x16_t v894 = vandq_s8((int8x16_t)vcgezq_f32(v885), (int8x16_t)vcgtzq_f32(v875));
            int8x16_t v895 = vandq_s8((int8x16_t)vcgezq_f32(v886), (int8x16_t)vcgtzq_f32(v876));
            float32x4_t v896 = vmlaq_f32(v866, vmlaq_n_f32(v1499, v882, v862), v880);
            int8x16_t v897 = vandq_s8((int8x16_t)vcgezq_f32(v887), (int8x16_t)vcgtzq_f32(v880));
            float32x4_t v898 = vmlaq_f32(v867, vmlaq_n_f32(v1480, v882, v861), v880);
            float32x4_t v899 = vmlaq_f32(v1453, vdivq_f32(v1463, v884), v890);
            float32x4_t v900 = vmlaq_f32(v1433, vdivq_f32(v1423, v884), v891);
            float32x4_t v901 = vmlaq_f32(v1453, vdivq_f32(v1463, v885), v892);
            float32x4_t v902 = vdivq_f32(v1423, v886);
            float32x4_t v903 = vmlaq_f32(v1433, vdivq_f32(v1423, v885), vmlaq_f32(v867, vmlaq_n_f32(v1480, v878, v861), v875));
            float32x4_t v904 = vmlaq_f32(v1453, vdivq_f32(v1463, v886), vmlaq_f32(v889, vmlaq_n_f32(v1499, v879, v862), v876));
            float32x4_t v905 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
            int8x16_t v906 = (int8x16_t)vmulq_f32(v884, v905);
            int8x16_t v907 = (int8x16_t)vmulq_f32(v885, v905);
            int8x16_t v908 = (int8x16_t)vmulq_f32(v886, v905);
            int8x16_t v909 = (int8x16_t)vmulq_f32(v887, v905);
            int32x4_t v910 = vcvtmq_s32_f32(v899);
            int32x4_t v911 = vcvtmq_s32_f32(v900);
            int32x4_t v912 = vcvtmq_s32_f32(v901);
            int32x4_t v913 = vcvtmq_s32_f32(v903);
            int32x4_t v914 = vcvtmq_s32_f32(v904);
            int32x4_t v915 = vcvtmq_s32_f32(vmlaq_f32(v1433, v902, vmlaq_f32(v867, vmlaq_n_f32(v1480, v879, v861), v876)));
            v916.i64[0] = -1;
            v916.i64[1] = -1;
            int32x4_t v917 = vcvtmq_s32_f32(vmlaq_f32(v1453, vdivq_f32(v1463, v887), v896));
            int32x4_t v918 = vcvtmq_s32_f32(vmlaq_f32(v1433, vdivq_f32(v1423, v887), v898));
            int8x16_t v919 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1413, v918), (int8x16_t)vcgtq_s32(v1472, v917)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v918, (int8x16_t)v917), v916)), v897);
            int8x16_t v920 = (int8x16_t)vdupq_n_s32(0x477FE000u);
            float32x4_t v921 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1413, v911), (int8x16_t)vcgtq_s32(v1472, v910)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v911, (int8x16_t)v910), v916)), v893), v906, v920);
            float32x4_t v922 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1413, v913), (int8x16_t)vcgtq_s32(v1472, v912)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v913, (int8x16_t)v912), v916)), v894), v907, v920);
            float32x4_t v923 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1413, v915), (int8x16_t)vcgtq_s32(v1472, v914)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v915, (int8x16_t)v914), v916)), v895), v908, v920);
            float32x4_t v924 = (float32x4_t)vbslq_s8(v919, v909, v920);
            int32x4_t v925 = vmlaq_s32(v910, v911, v1443);
            long long v844 = v883;
            float32x4_t v866 = v889;
            int32x4_t v926 = vmlaq_s32(v912, v913, v1443);
            int32x4_t v868 = v888;
            v869.i64[0] = 0x4100000041000000;
            v869.i64[1] = 0x4100000041000000;
            int32x4_t v927 = vminq_s32(vmaxq_s32(v925, (int32x4_t)0), v868);
            int32x4_t v928 = vminq_s32(vmaxq_s32(v926, (int32x4_t)0), v868);
            int32x4_t v929 = vminq_s32(vmaxq_s32(vmlaq_s32(v914, v915, v1443), (int32x4_t)0), v868);
            int32x4_t v930 = vminq_s32(vmaxq_s32(vmlaq_s32(v917, v918, v1443), (int32x4_t)0), v868);
            unsigned __int32 v931 = v927.u32[1];
            *(float16x4_t *)v895.i8 = vcvt_f16_f32(v921);
            v846[v927.u32[0]] = fminl(*(short float *)v895.i16, v846[v927.u32[0]]);
            *(float16x4_t *)v914.i8 = vcvt_f16_f32(v922);
            v846[v928.u32[1]] = fminl(*(short float *)&v914.i16[1], v846[v928.u32[1]]);
            *(float16x4_t *)v927.i8 = vcvt_f16_f32(v923);
            v846[v929.u32[2]] = fminl(*(short float *)&v927.i16[2], v846[v929.u32[2]]);
            *(float16x4_t *)v893.i8 = vcvt_f16_f32(v924);
            v846[v930.u32[3]] = fminl(*(short float *)&v893.i16[3], v846[v930.u32[3]]);
            v846[v931] = fminl(*(short float *)&v895.i16[1], v846[v931]);
            v846[v928.u32[2]] = fminl(*(short float *)&v914.i16[2], v846[v928.u32[2]]);
            v846[v929.u32[3]] = fminl(*(short float *)&v927.i16[3], v846[v929.u32[3]]);
            v846[v930.u32[0]] = fminl(*(short float *)v893.i16, v846[v930.u32[0]]);
            v846[v927.u32[2]] = fminl(*(short float *)&v895.i16[2], v846[v927.u32[2]]);
            v846[v928.u32[3]] = fminl(*(short float *)&v914.i16[3], v846[v928.u32[3]]);
            v846[v929.u32[0]] = fminl(*(short float *)v927.i16, v846[v929.u32[0]]);
            v846[v930.u32[1]] = fminl(*(short float *)&v893.i16[1], v846[v930.u32[1]]);
            v846[v927.u32[3]] = fminl(*(short float *)&v895.i16[3], v846[v927.u32[3]]);
            v846[v928.u32[0]] = fminl(*(short float *)v914.i16, v846[v928.u32[0]]);
            v846[v929.u32[1]] = fminl(*(short float *)&v927.i16[1], v846[v929.u32[1]]);
            v846[v930.u32[2]] = fminl(*(short float *)&v893.i16[2], v846[v930.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v872 = vaddq_f32(v1508, _Q0);
            v870 += 4;
            v871 += 16;
          }
          while (v871 < v858);
          unint64_t v871 = (((v836 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v848 = (float32x4_t)a14;
          float32x4_t v849 = (float32x4_t)a15;
          float32x4_t v851 = a12;
          float32x4_t v850 = a13;
          float v853 = *(float *)&a18;
          float v852 = *(float *)&a11;
          float v854 = *(float *)&a16;
          float v856 = v1377;
          float v857 = v1368;
          float v859 = 0.5;
          float32x4_t v860 = v1385;
        }
        if (v871 < v836)
        {
          do
          {
            _H2 = v870->i16[0];
            __asm { FCVT            S2, H2 }
            _Q7 = vaddq_f32(v849, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v851, v856 * (float)((float)((float)((float)v871 + v859) - v852) * (float)(_S2 * 1000.0))), v850, v857* (float)((float)((float)((float)v855 + v859) - *((float *)&a11 + 1)) * (float)(_S2 * 1000.0))), v848, _S2 * 1000.0));
            if (_Q7.f32[2] >= 0.0 && (float)(_S2 * 1000.0) > 0.0)
            {
              uint64_t v936 = (int)vmlas_n_f32(v853, v854 / _Q7.f32[2], _Q7.f32[0]);
              if ((v936 & 0x80000000) == 0 && (__int16)v838 > (int)v936)
              {
                _S1 = *((float *)&a17 + 1) / _Q7.f32[2];
                __asm { FMLA            S2, S1, V7.S[1] }
                if (((int)_S2 & 0x80000000) == 0 && (__int16)v837 > (int)(unsigned __int16)(int)_S2)
                {
                  _S1 = _Q7.f32[2] * 0.001;
                  __asm
                  {
                    FCVT            H4, S1
                    FCMP            H1, #0
                  }
                  if (_ZF || _H1 > _H4) {
                    v846[v845 * (unsigned __int16)(int)_S2 + v936] = _H4;
                  }
                }
              }
            }
            ++v871;
            float32x4_t v870 = (float16x4_t *)((char *)v870 + 2);
          }
          while (v836 != v871);
        }
        ++v855;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v860 = vaddq_f32(v860, _Q0);
        v869.i64[0] = 0x4100000041000000;
        v869.i64[1] = 0x4100000041000000;
      }
      while (v855 != v835);
    }
    if (v847)
    {
      uint64_t v944 = 0;
      long long v945 = *(_OWORD *)&buf.width;
      vImagePixelCount v946 = buf.width >> 4;
      v947 = (char *)buf.data;
      vImagePixelCount v948 = buf.height;
      if (buf.width >> 4 <= 1) {
        vImagePixelCount v946 = 1;
      }
      if (buf.height <= 1) {
        vImagePixelCount v948 = 1;
      }
      unint64_t v949 = buf.width & 0xFFFFFFF0;
      do
      {
        long long v950 = (int8x8_t *)&v947[*((void *)&v945 + 1) * v944];
        vImagePixelCount v951 = v946;
        if ((unint64_t)v945 >= 0x10)
        {
          do
          {
            float16x4_t v952 = (float16x4_t)v950[2];
            float16x4_t v953 = (float16x4_t)v950[3];
            int8x8_t v954 = vbic_s8(v950[1], (int8x8_t)vceq_f16((float16x4_t)v950[1], (float16x4_t)0x8400840084008400));
            *long long v950 = vbic_s8(*v950, (int8x8_t)vceq_f16((float16x4_t)*v950, (float16x4_t)0x8400840084008400));
            v950[1] = v954;
            v950[2] = vbic_s8((int8x8_t)v952, (int8x8_t)vceq_f16(v952, (float16x4_t)0x8400840084008400));
            v950[3] = vbic_s8((int8x8_t)v953, (int8x8_t)vceq_f16(v953, (float16x4_t)0x8400840084008400));
            v950 += 4;
            --v951;
          }
          while (v951);
        }
        unint64_t v955 = v945 & 0xFFFFFFFF0000000FLL;
        if ((unint64_t)v945 > v949)
        {
          do
          {
            if (*(short float *)v950->i16 == COERCE_SHORT_FLOAT(31743)) {
              v950->i16[0] = 0;
            }
            long long v950 = (int8x8_t *)((char *)v950 + 2);
            --v955;
          }
          while (v955);
        }
        ++v944;
      }
      while (v944 != v948);
    }
    goto LABEL_389;
  }
  if (PixelFormatType <= 1717855599)
  {
    if (PixelFormatType == 825437747)
    {
      size_t v1297 = CVPixelBufferGetHeight(a1);
      size_t v956 = CVPixelBufferGetWidth(a1);
      size_t v957 = CVPixelBufferGetHeight(pixelBuffer);
      unsigned int v958 = CVPixelBufferGetWidth(pixelBuffer);
      size_t v959 = CVPixelBufferGetBytesPerRow(pixelBuffer);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      CVPixelBufferLockBaseAddress(v1318, 0);
      memset(&v1512, 0, sizeof(v1512));
      float v960 = (CGRect *)MEMORY[0x263F001A8];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
      memset(&buf, 0, sizeof(buf));
      PixelBufferUtils::asVImageBuffer(pixelBuffer, *v960, &buf);
      PixelBufferUtils::asVImageBuffer(v1318, *v960, &v1511);
      size_t v965 = v959 >> 1;
      float32x4_t v1287 = (char *)v1511.data;
      size_t v1283 = v1511.rowBytes;
      float32x4_t v966 = (__int16 *)buf.data;
      size_t v967 = (v959 >> 1) * v957;
      if (v967) {
        memset_pattern16(buf.data, &unk_247F24690, 2 * v967);
      }
      vImagePixelCount v968 = buf.height;
      if (v1297)
      {
        unint64_t v969 = 0;
        v970.i32[1] = v1490;
        v971.i32[1] = HIDWORD(a9);
        float v972 = *(float *)&a11;
        float v973 = 1.0 / *(float *)&a9;
        float v974 = 1.0 / *(float *)&v1490;
        unint64_t v975 = v956 & 0xFFFFFFFFFFFFFFF0;
        float v976 = 0.5;
        *(float *)v961.i32 = 0.5 - *((float *)&a11 + 1);
        float32x4_t v977 = (float32x4_t)vdupq_lane_s32(v961, 0);
        float32x4_t v979 = a13;
        float32x4_t v978 = (float32x4_t)a14;
        *(float *)v961.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
        *(float *)v970.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
        *(float *)v971.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
        float32x4_t v1268 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
        float32x4_t v1270 = (float32x4_t)vdupq_lane_s32(v971, 0);
        float32x4_t v1264 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
        float32x4_t v1266 = (float32x4_t)vdupq_lane_s32(v970, 0);
        float32x4_t v1261 = (float32x4_t)vdupq_laneq_s32(a14, 2);
        float32x4_t v1262 = (float32x4_t)vdupq_lane_s32(v961, 0);
        float32x4_t v980 = a12;
        *(float *)&long long v962 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
        *(float *)&long long v963 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
        *(float *)&long long v964 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
        float32x4_t v1259 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
        float32x4_t v981 = (float32x4_t)a15;
        float32x2_t v982 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
        float32x4_t v983 = (float32x4_t)vdupq_laneq_s32(a15, 2);
        float32x4_t v984 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
        int32x4_t v985 = vdupq_n_s32(v958);
        int v986 = (__int16)v958;
        int v987 = (__int16)v957;
        float32x2_t v988 = (float32x2_t)a18;
        unint64_t v1256 = (((v956 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
        float32x4_t v1280 = (char *)v1512.data;
        size_t v1278 = v1512.rowBytes;
        int32x4_t v1341 = vdupq_n_s32(v965);
        size_t v1276 = v956;
        float v1273 = 1.0 / *(float *)&a9;
        int v1257 = (__int16)v957;
        int v1258 = (__int16)v958;
        float32x4_t v1404 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
        float32x4_t v1414 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
        float32x4_t v1386 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
        int32x4_t v1395 = vdupq_n_s32(LODWORD(buf.height) * (int)v965 - 2);
        float32x4_t v1369 = v983;
        float32x4_t v1351 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
        int32x4_t v1360 = vdupq_n_s32(v957);
        float32x4_t v989 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
        do
        {
          v990 = (float16x4_t *)&v1280[v1278 * v969];
          float32x4_t v991 = (__int16 *)&v1287[v969 * v1283];
          if (v975)
          {
            uint64_t v992 = 0;
            float32x4_t v1444 = vmlaq_f32(v1268, v1270, v977);
            float32x4_t v1434 = vmlaq_f32(v1264, v1266, v977);
            float32x4_t v1307 = v977;
            float32x4_t v1424 = vmlaq_f32(v1261, v1262, v977);
            float32x4_t v993 = v1259;
            v994.i64[0] = 0x4100000041000000;
            v994.i64[1] = 0x4100000041000000;
            do
            {
              uint64_t v1500 = v992;
              v1509 = v991;
              float32x4_t v995 = (float32x4_t)vdupq_n_s32(0x447A0000u);
              float32x4_t v996 = vmulq_f32(vcvtq_f32_f16(*v990), v995);
              float32x4_t v997 = vmulq_f32(vcvtq_f32_f16(v990[1]), v995);
              float32x4_t v998 = vmulq_f32(vcvtq_f32_f16(v990[2]), v995);
              __asm { FMOV            V0.4S, #4.0 }
              float32x4_t v1000 = vaddq_f32(v993, _Q0);
              float32x4_t v1001 = vaddq_f32(v993, v994);
              float32x4_t v1002 = vmulq_f32(vcvtq_f32_f16(v990[3]), v995);
              __asm { FMOV            V3.4S, #12.0 }
              float32x4_t v1004 = vaddq_f32(v993, _Q3);
              float32x4_t v1005 = vmlaq_f32(v983, vmlaq_n_f32(v1424, v993, *(float *)&v962), v996);
              float32x4_t v1006 = vmlaq_f32(v983, vmlaq_n_f32(v1424, v1000, *(float *)&v962), v997);
              float32x4_t v1007 = vmlaq_f32(v983, vmlaq_n_f32(v1424, v1001, *(float *)&v962), v998);
              float32x4_t v1008 = vmlaq_f32(v983, vmlaq_n_f32(v1424, v1004, *(float *)&v962), v1002);
              float32x4_t v1009 = vmlaq_f32(v984, vmlaq_n_f32(v1444, v993, *(float *)&v964), v996);
              long long v1010 = v962;
              float32x4_t v1011 = vmlaq_f32(v1351, vmlaq_n_f32(v1434, v993, *(float *)&v963), v996);
              float32x4_t v1012 = vmlaq_f32(v984, vmlaq_n_f32(v1444, v1000, *(float *)&v964), v997);
              float32x4_t v1013 = vmlaq_f32(v1351, vmlaq_n_f32(v1434, v1000, *(float *)&v963), v997);
              int8x16_t v1014 = vandq_s8((int8x16_t)vcgezq_f32(v1005), (int8x16_t)vcgtzq_f32(v996));
              float32x4_t v1015 = vmlaq_f32(v984, vmlaq_n_f32(v1444, v1001, *(float *)&v964), v998);
              int8x16_t v1016 = vandq_s8((int8x16_t)vcgezq_f32(v1006), (int8x16_t)vcgtzq_f32(v997));
              float32x4_t v1017 = vmlaq_f32(v1351, vmlaq_n_f32(v1434, v1001, *(float *)&v963), v998);
              int8x16_t v1018 = vandq_s8((int8x16_t)vcgezq_f32(v1007), (int8x16_t)vcgtzq_f32(v998));
              float32x4_t v1019 = vmlaq_f32(v984, vmlaq_n_f32(v1444, v1004, *(float *)&v964), v1002);
              int8x16_t v1020 = vandq_s8((int8x16_t)vcgezq_f32(v1008), (int8x16_t)vcgtzq_f32(v1002));
              int32x4_t v1021 = v985;
              float32x4_t v1022 = v984;
              long long v1023 = v964;
              long long v1024 = v963;
              float32x4_t v1025 = vmlaq_f32(v1351, vmlaq_n_f32(v1434, v1004, *(float *)&v963), v1002);
              float32x4_t v1026 = vmlaq_f32(v1386, vdivq_f32(v989, v1007), v1015);
              int32x4_t v1027 = vcvtmq_s32_f32(vmlaq_f32(v1386, vdivq_f32(v989, v1005), v1009));
              int32x4_t v1028 = vcvtmq_s32_f32(vmlaq_f32(v1414, vdivq_f32(v1404, v1005), v1011));
              int32x4_t v1029 = vcvtmq_s32_f32(vmlaq_f32(v1386, vdivq_f32(v989, v1006), v1012));
              int32x4_t v1030 = vcvtmq_s32_f32(vmlaq_f32(v1414, vdivq_f32(v1404, v1006), v1013));
              int32x4_t v1031 = vcvtmq_s32_f32(v1026);
              int32x4_t v1032 = vcvtmq_s32_f32(vmlaq_f32(v1414, vdivq_f32(v1404, v1007), v1017));
              int32x4_t v1033 = vcvtmq_s32_f32(vmlaq_f32(v1386, vdivq_f32(v989, v1008), v1019));
              float32x4_t v1034 = vmlaq_f32(v1414, vdivq_f32(v1404, v1008), v1025);
              long long v963 = v1024;
              long long v964 = v1023;
              float32x4_t v984 = v1022;
              int32x4_t v985 = v1021;
              int32x4_t v1035 = vcvtmq_s32_f32(v1034);
              int8x16_t v1036 = (int8x16_t)vcgtq_s32(v1021, v1027);
              v1021.i64[0] = -1;
              v1021.i64[1] = -1;
              int32x4_t v1037 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1360, v1028), v1036), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1028, (int8x16_t)v1027), v1021)), v1014);
              *(int16x4_t *)v1036.i8 = vmovn_s32(v1037);
              v1515.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v1027), *(int8x8_t *)v1036.i8);
              v1515.val[1] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v1028), *(int8x8_t *)v1036.i8);
              int32x4_t v1038 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1360, v1030), (int8x16_t)vcgtq_s32(v985, v1029)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1030, (int8x16_t)v1029), v1021)), v1016);
              *(int16x4_t *)v1012.f32 = vmovn_s32(v1038);
              int32x4_t v1039 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1360, v1032), (int8x16_t)vcgtq_s32(v985, v1031)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1032, (int8x16_t)v1031), v1021)), v1018);
              v994.i64[0] = 0x4100000041000000;
              v994.i64[1] = 0x4100000041000000;
              __int32 v1040 = v991;
              vst2_s16(v1040, v1515);
              v1040 += 8;
              v1515.val[1] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v1029), *(int8x8_t *)v1012.f32);
              *(int8x8_t *)v1014.i8 = vorn_s8((int8x8_t)vmovn_s32(v1030), *(int8x8_t *)v1012.f32);
              *(int16x4_t *)v1012.f32 = vmovn_s32(v1039);
              vst2_s16(v1040, *(int16x4x2_t *)((char *)&v1014 - 8));
              v1515.val[1] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v1031), *(int8x8_t *)v1012.f32);
              *(int8x8_t *)v1014.i8 = vorn_s8((int8x8_t)vmovn_s32(v1032), *(int8x8_t *)v1012.f32);
              long long v962 = v1010;
              int32x4_t v1041 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1360, v1035), (int8x16_t)vcgtq_s32(v985, v1033)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1035, (int8x16_t)v1033), v1021)), v1020);
              int8x16_t v1042 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
              float32x4_t v1043 = (float32x4_t)vbslq_s8((int8x16_t)v1037, (int8x16_t)vmulq_f32(v1005, v994), v1042);
              float32x4_t v1044 = (float32x4_t)vbslq_s8((int8x16_t)v1038, (int8x16_t)vmulq_f32(v1006, v994), v1042);
              float32x4_t v1045 = (float32x4_t)vbslq_s8((int8x16_t)v1039, (int8x16_t)vmulq_f32(v1007, v994), v1042);
              float32x4_t v1046 = (float32x4_t)vbslq_s8((int8x16_t)v1041, (int8x16_t)vmulq_f32(v1008, v994), v1042);
              unsigned __int32 v1047 = v991 + 16;
              *(int16x4_t *)v1008.f32 = vmovn_s32(v1041);
              vst2_s16(v1047, *(int16x4x2_t *)((char *)&v1014 - 8));
              float32x4_t v983 = v1369;
              *(int8x8_t *)v1005.f32 = vorn_s8((int8x8_t)vmovn_s32(v1033), *(int8x8_t *)v1008.f32);
              *(int8x8_t *)v1042.i8 = vorn_s8((int8x8_t)vmovn_s32(v1035), *(int8x8_t *)v1008.f32);
              int32x4_t v1048 = v991 + 24;
              vst2_s16(v1048, (int16x4x2_t)v1005);
              int32x4_t v1049 = vminq_s32(vmaxq_s32(vmlaq_s32(v1027, v1028, v1341), (int32x4_t)0), v1395);
              unsigned __int32 v1489 = v1049.u32[1];
              uint64_t v1050 = v1049.i64[1];
              unsigned __int32 v1051 = v1049.i32[0];
              int32x4_t v1052 = vcvtq_s32_f32(v1043);
              __int32 v1053 = v1052.i32[1];
              __int32 v1054 = v1052.i32[2];
              __int32 v1464 = v1052.i32[3];
              __int32 v1055 = v1052.i32[0];
              int32x4_t v1056 = vminq_s32(vmaxq_s32(vmlaq_s32(v1033, v1035, v1341), (int32x4_t)0), v1395);
              int32x4_t v1057 = vcvtq_s32_f32(v1046);
              unsigned __int32 v1058 = v1056.u32[3];
              unsigned __int32 v1454 = v1056.u32[1];
              unsigned __int32 v1059 = v1056.u32[2];
              unsigned __int32 v1060 = v1056.i32[0];
              int32x4_t v1061 = vminq_s32(vmaxq_s32(vmlaq_s32(v1031, v1032, v1341), (int32x4_t)0), v1395);
              unint64_t v1062 = v975;
              unsigned __int32 v1063 = v1061.u32[2];
              unsigned __int32 v1064 = v1061.u32[3];
              unsigned __int32 v1065 = v1061.u32[1];
              unsigned __int32 v1066 = v1061.i32[0];
              int32x4_t v1067 = vcvtq_s32_f32(v1045);
              __int32 v1068 = v1067.i32[2];
              int v1069 = v990;
              __int32 v1070 = v1067.i32[3];
              __int32 v1071 = v1067.i32[1];
              __int32 v1072 = v1067.i32[0];
              int32x4_t v1073 = vminq_s32(vmaxq_s32(vmlaq_s32(v1029, v1030, v1341), (int32x4_t)0), v1395);
              __int32 v1074 = v966[v1051];
              int32x4_t v1075 = vcvtq_s32_f32(v1044);
              if (v1055 < v1074) {
                LOWORD(v1074) = v1055;
              }
              unsigned __int32 v1076 = v1073.u32[1];
              v966[v1051] = v1074;
              unsigned __int32 v1077 = v1073.u32[2];
              unsigned __int32 v1078 = v1073.u32[3];
              __int16 v1079 = v1075.i16[2];
              unsigned __int32 v1080 = v1073.i32[0];
              __asm { FMOV            V0.4S, #16.0 }
              float32x4_t v993 = vaddq_f32(v993, _Q0);
              if (v1075.i32[1] >= v966[v1076]) {
                __int16 v1079 = v966[v1076];
              }
              v966[v1076] = v1079;
              if (v1068 >= v966[v1063]) {
                LOWORD(v1068) = v966[v1063];
              }
              v966[v1063] = v1068;
              unint64_t v975 = v1062;
              int v1082 = v966[v1058];
              if (v1057.i32[3] < v1082) {
                LOWORD(v1082) = v1057.i16[6];
              }
              v966[v1058] = v1082;
              __int32 v1083 = v966[v1489];
              if (v1053 < v1083) {
                LOWORD(v1083) = v1053;
              }
              v966[v1489] = v1083;
              int v1084 = v966[v1077];
              if (v1075.i32[2] < v1084) {
                LOWORD(v1084) = v1075.i16[4];
              }
              v966[v1077] = v1084;
              __int32 v1085 = v966[v1064];
              if (v1070 < v1085) {
                LOWORD(v1085) = v1070;
              }
              v966[v1064] = v1085;
              int v1086 = v966[v1060];
              if (v1057.i32[0] < v1086) {
                LOWORD(v1086) = v1057.i16[0];
              }
              v966[v1060] = v1086;
              __int32 v1087 = v966[v1050];
              if (v1054 < v1087) {
                LOWORD(v1087) = v1054;
              }
              v966[v1050] = v1087;
              int v1088 = v966[v1078];
              if (v1075.i32[3] < v1088) {
                LOWORD(v1088) = v1075.i16[6];
              }
              v966[v1078] = v1088;
              __int32 v1089 = v966[v1066];
              if (v1072 < v1089) {
                LOWORD(v1089) = v1072;
              }
              v966[v1066] = v1089;
              int v1090 = v966[v1454];
              if (v1057.i32[1] < v1090) {
                LOWORD(v1090) = v1057.i16[2];
              }
              v966[v1454] = v1090;
              __int32 v1091 = v966[HIDWORD(v1050)];
              if (v1464 < v1091) {
                LOWORD(v1091) = v1464;
              }
              v966[HIDWORD(v1050)] = v1091;
              int v1092 = v966[v1080];
              if (v1075.i32[0] < v1092) {
                LOWORD(v1092) = v1075.i16[0];
              }
              v966[v1080] = v1092;
              __int32 v1093 = v966[v1065];
              if (v1071 < v1093) {
                LOWORD(v1093) = v1071;
              }
              v966[v1065] = v1093;
              int v1094 = v966[v1059];
              if (v1057.i32[2] < v1094) {
                LOWORD(v1094) = v1057.i16[4];
              }
              v966[v1059] = v1094;
              v990 = v1069 + 4;
              float32x4_t v991 = v1509 + 32;
              uint64_t v992 = v1500 + 16;
            }
            while (v1500 + 16 < v1062);
            unint64_t v1095 = v1256;
            float32x4_t v978 = (float32x4_t)a14;
            float32x4_t v981 = (float32x4_t)a15;
            float32x4_t v980 = a12;
            float32x4_t v979 = a13;
            float32x2_t v988 = (float32x2_t)a18;
            float v972 = *(float *)&a11;
            float32x2_t v982 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
            size_t v956 = v1276;
            size_t v965 = v959 >> 1;
            float v973 = v1273;
            float v974 = 1.0 / *(float *)&v1490;
            float v976 = 0.5;
            float32x4_t v977 = v1307;
            int v987 = v1257;
            int v986 = v1258;
          }
          else
          {
            unint64_t v1095 = 0;
          }
          if (v1095 < v956)
          {
            do
            {
              _H2 = v990->i16[0];
              __asm { FCVT            S2, H2 }
              float v1098 = _S2 * 1000.0;
              int32x4_t v1099 = (int32x4_t)vaddq_f32(v981, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v980, v973 * (float)((float)((float)((float)v1095 + v976) - v972) * v1098)), v979, v974* (float)((float)((float)((float)v969 + v976) - *((float *)&a11 + 1)) * v1098)), v978, v1098));
              uint64_t v1100 = 0xFFFF0000FFFFLL;
              if (*(float *)&v1099.i32[2] >= 0.0 && v1098 > 0.0)
              {
                int32x2_t v1101 = vcvt_s32_f32(vmla_f32(v988, vdiv_f32(v982, (float32x2_t)vdup_laneq_s32(v1099, 2)), *(float32x2_t *)v1099.i8));
                if ((v1101.i32[0] & 0x80000000) == 0
                  && v986 > v1101.i32[0]
                  && (v1101.i32[1] & 0x80000000) == 0
                  && v987 > v1101.u16[2])
                {
                  v1102 = &v966[v965 * v1101.u16[2]];
                  unsigned int v1103 = vcvts_n_s32_f32(*(float *)&v1099.i32[2], 3uLL);
                  if (v1103 <= (unsigned __int16)(v1102[v1101.u32[0]] - 1)) {
                    v1102[v1101.u32[0]] = v1103;
                  }
                  uint64_t v1100 = (uint64_t)v1101;
                }
              }
              *float32x4_t v991 = v1100;
              v991[1] = WORD2(v1100);
              ++v1095;
              v990 = (float16x4_t *)((char *)v990 + 2);
              v991 += 2;
            }
            while (v956 != v1095);
          }
          ++v969;
          __asm { FMOV            V0.4S, #1.0 }
          float32x4_t v977 = vaddq_f32(v977, _Q0);
        }
        while (v969 != v1297);
        vImagePixelCount v968 = buf.height;
      }
      if (v968)
      {
        uint64_t v1105 = 0;
        long long v1106 = *(_OWORD *)&buf.width;
        int32x2_t v1107 = (char *)buf.data;
        vImagePixelCount v1108 = buf.width >> 4;
        if (buf.width >> 4 <= 1) {
          vImagePixelCount v1108 = 1;
        }
        unint64_t v1109 = buf.width & 0xFFFFFFF0;
        do
        {
          size_t v1110 = (int8x8_t *)&v1107[*((void *)&v1106 + 1) * v1105];
          vImagePixelCount v1111 = v1108;
          if ((unint64_t)v1106 >= 0x10)
          {
            do
            {
              int16x4_t v1112 = (int16x4_t)v1110[2];
              int16x4_t v1113 = (int16x4_t)v1110[3];
              int8x8_t v1114 = vbic_s8(v1110[1], (int8x8_t)vceq_s16((int16x4_t)v1110[1], (int16x4_t)0x8000800080008000));
              *size_t v1110 = vbic_s8(*v1110, (int8x8_t)vceq_s16((int16x4_t)*v1110, (int16x4_t)0x8000800080008000));
              v1110[1] = v1114;
              v1110[2] = vbic_s8((int8x8_t)v1112, (int8x8_t)vceq_s16(v1112, (int16x4_t)0x8000800080008000));
              v1110[3] = vbic_s8((int8x8_t)v1113, (int8x8_t)vceq_s16(v1113, (int16x4_t)0x8000800080008000));
              v1110 += 4;
              --v1111;
            }
            while (v1111);
          }
          unint64_t v1115 = v1106 & 0xFFFFFFFF0000000FLL;
          if ((unint64_t)v1106 > v1109)
          {
            do
            {
              if (v1110->i16[0] == 0x7FFF) {
                v1110->i16[0] = 0;
              }
              size_t v1110 = (int8x8_t *)((char *)v1110 + 2);
              --v1115;
            }
            while (v1115);
          }
          ++v1105;
        }
        while (v1105 != v968);
      }
      goto LABEL_321;
    }
    if (PixelFormatType == 1278226534) {
      goto LABEL_88;
    }
    if (PixelFormatType != 1278226536) {
      goto LABEL_322;
    }
LABEL_124:
    size_t v481 = CVPixelBufferGetHeight(a1);
    size_t v482 = CVPixelBufferGetWidth(a1);
    size_t v483 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v484 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v485 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&v1512, 0, sizeof(v1512));
    vImagePixelCount v486 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v486, &buf);
    PixelBufferUtils::asVImageBuffer(a2, *v486, &v1511);
    size_t v489 = v485 >> 1;
    float v490 = (char *)v1511.data;
    size_t v491 = v1511.rowBytes;
    float v492 = (short float *)buf.data;
    if (v489 * v483) {
      memset_pattern16(buf.data, &unk_247F24680, 2 * v489 * v483);
    }
    vImagePixelCount v493 = buf.height;
    if (v481)
    {
      unint64_t v494 = 0;
      v495.i32[1] = v1490;
      v496.i32[1] = HIDWORD(a9);
      float v497 = *(float *)&a11;
      float v498 = 1.0 / *(float *)&a9;
      float v499 = 1.0 / *(float *)&v1490;
      unint64_t v500 = v482 & 0xFFFFFFFFFFFFFFF0;
      float v501 = 0.5;
      *(float *)v487.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v502 = (float32x4_t)vdupq_lane_s32(v487, 0);
      float32x4_t v504 = a13;
      float32x4_t v503 = (float32x4_t)a14;
      *(float *)v487.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
      *(float *)v495.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
      *(float *)v496.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
      float32x4_t v1337 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1347 = (float32x4_t)vdupq_lane_s32(v496, 0);
      float32x4_t v1303 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1313 = (float32x4_t)vdupq_lane_s32(v495, 0);
      float32x4_t v1285 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      float32x4_t v1293 = (float32x4_t)vdupq_lane_s32(v487, 0);
      float32x4_t v505 = a12;
      float v506 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      float v1420 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      *(float *)&long long v488 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v1282 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      float32x4_t v507 = (float32x4_t)a15;
      float32x2_t v508 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
      float32x4_t v509 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v510 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v511 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      int32x4_t v1383 = vdupq_n_s32(v484);
      int32x4_t v512 = vdupq_n_s32(v483);
      float32x2_t v513 = (float32x2_t)a18;
      float32x4_t v514 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      float32x4_t v515 = (char *)v1512.data;
      size_t v516 = v1512.rowBytes;
      float v1365 = 1.0 / *(float *)&a9;
      float v1356 = 1.0 / *(float *)&v1490;
      float32x4_t v1450 = v509;
      float v1460 = v506;
      float32x4_t v1430 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      int32x4_t v1440 = vdupq_n_s32(LODWORD(buf.height) * (int)v489 - 2);
      int32x4_t v1401 = vdupq_n_s32(v489);
      float32x4_t v1410 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      float32x4_t v1392 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      do
      {
        float32x4_t v517 = (float16x4_t *)&v515[v516 * v494];
        v518 = (__int16 *)&v490[v494 * v491];
        unint64_t v519 = 0;
        if (v500)
        {
          float32x4_t v1485 = vmlaq_f32(v1337, v1347, v502);
          float32x4_t v1477 = vmlaq_f32(v1303, v1313, v502);
          float32x4_t v1374 = v502;
          float32x4_t v1469 = vmlaq_f32(v1285, v1293, v502);
          float32x4_t v520 = v1282;
          do
          {
            float32x4_t v521 = (float32x4_t)vdupq_n_s32(0x447A0000u);
            float32x4_t v522 = vmulq_f32(vcvtq_f32_f16(*v517), v521);
            float32x4_t v523 = vmulq_f32(vcvtq_f32_f16(v517[1]), v521);
            float32x4_t v524 = vmulq_f32(vcvtq_f32_f16(v517[2]), v521);
            __asm { FMOV            V0.4S, #4.0 }
            float32x4_t v526 = vaddq_f32(v520, _Q0);
            _Q0.i64[0] = 0x4100000041000000;
            _Q0.i64[1] = 0x4100000041000000;
            float32x4_t v527 = vaddq_f32(v520, _Q0);
            float32x4_t v528 = vmulq_f32(vcvtq_f32_f16(v517[3]), v521);
            __asm { FMOV            V0.4S, #12.0 }
            float32x4_t v530 = vaddq_f32(v520, _Q0);
            float32x4_t v531 = vmlaq_f32(v509, vmlaq_n_f32(v1469, v520, v506), v522);
            float32x4_t v532 = vmlaq_f32(v509, vmlaq_n_f32(v1469, v526, v506), v523);
            float32x4_t v533 = vmlaq_f32(v509, vmlaq_n_f32(v1469, v527, v506), v524);
            float32x4_t v534 = vmlaq_f32(v509, vmlaq_n_f32(v1469, v530, v506), v528);
            long long v535 = v488;
            float32x4_t v536 = vmlaq_f32(v510, vmlaq_n_f32(v1485, v520, *(float *)&v488), v522);
            float32x4_t v537 = vmlaq_f32(v511, vmlaq_n_f32(v1477, v520, v1420), v522);
            float32x4_t v538 = vmlaq_f32(v510, vmlaq_n_f32(v1485, v526, *(float *)&v488), v523);
            float32x4_t v539 = vmlaq_f32(v511, vmlaq_n_f32(v1477, v526, v1420), v523);
            int8x16_t v1496 = vandq_s8((int8x16_t)vcgezq_f32(v531), (int8x16_t)vcgtzq_f32(v522));
            float32x4_t v540 = vmlaq_f32(v510, vmlaq_n_f32(v1485, v527, *(float *)&v488), v524);
            int8x16_t v541 = vandq_s8((int8x16_t)vcgezq_f32(v532), (int8x16_t)vcgtzq_f32(v523));
            float32x4_t v542 = vmlaq_f32(v511, vmlaq_n_f32(v1477, v527, v1420), v524);
            int8x16_t v543 = vandq_s8((int8x16_t)vcgezq_f32(v533), (int8x16_t)vcgtzq_f32(v524));
            float32x4_t v544 = vmlaq_f32(v510, vmlaq_n_f32(v1485, v530, *(float *)&v535), v528);
            int8x16_t v1505 = vandq_s8((int8x16_t)vcgezq_f32(v534), (int8x16_t)vcgtzq_f32(v528));
            float32x4_t v545 = vmlaq_f32(v511, vmlaq_n_f32(v1477, v530, v1420), v528);
            float32x4_t v546 = vmlaq_f32(v514, vdivq_f32(v1430, v531), v536);
            float32x4_t v547 = vmlaq_f32(v1392, vdivq_f32(v1410, v531), v537);
            float32x4_t v548 = vmlaq_f32(v514, vdivq_f32(v1430, v532), v538);
            float32x4_t v549 = vmlaq_f32(v1392, vdivq_f32(v1410, v532), v539);
            float32x4_t v550 = vdivq_f32(v1430, v534);
            float32x4_t v551 = vdivq_f32(v1410, v534);
            float32x4_t v552 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
            int8x16_t v553 = (int8x16_t)vmulq_f32(v531, v552);
            int8x16_t v554 = (int8x16_t)vmulq_f32(v532, v552);
            int8x16_t v555 = (int8x16_t)vmulq_f32(v533, v552);
            int8x16_t v556 = (int8x16_t)vmulq_f32(v534, v552);
            int32x4_t v557 = vcvtmq_s32_f32(v546);
            int32x4_t v558 = vcvtmq_s32_f32(v547);
            int32x4_t v559 = vcvtmq_s32_f32(v548);
            int32x4_t v560 = vcvtmq_s32_f32(v549);
            int32x4_t v561 = vcvtmq_s32_f32(vmlaq_f32(v514, vdivq_f32(v1430, v533), v540));
            long long v488 = v535;
            int32x4_t v562 = vcvtmq_s32_f32(vmlaq_f32(v1392, vdivq_f32(v1410, v533), v542));
            int32x4_t v563 = vcvtmq_s32_f32(vmlaq_f32(v514, v550, v544));
            int32x4_t v564 = vcvtmq_s32_f32(vmlaq_f32(v1392, v551, v545));
            v524.i64[0] = -1;
            v524.i64[1] = -1;
            int32x4_t v565 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v512, v558), (int8x16_t)vcgtq_s32(v1383, v557)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v558, (int8x16_t)v557), (int32x4_t)v524)), v1496);
            *(int16x4_t *)v544.f32 = vmovn_s32(v565);
            *(int8x8_t *)v551.f32 = vorn_s8((int8x8_t)vmovn_s32(v557), *(int8x8_t *)v544.f32);
            int8x8_t v566 = vorn_s8((int8x8_t)vmovn_s32(v558), *(int8x8_t *)v544.f32);
            int32x4_t v567 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v512, v560), (int8x16_t)vcgtq_s32(v1383, v559)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v560, (int8x16_t)v559), (int32x4_t)v524)), v541);
            *(int16x4_t *)v547.f32 = vmovn_s32(v567);
            int32x4_t v568 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v512, v562), (int8x16_t)vcgtq_s32(v1383, v561)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v562, (int8x16_t)v561), (int32x4_t)v524)), v543);
            float32x4_t v569 = v518;
            vst2_s16(v569, (int16x4x2_t)v551);
            v569 += 8;
            *(int8x8_t *)v551.f32 = vorn_s8((int8x8_t)vmovn_s32(v559), *(int8x8_t *)v547.f32);
            int8x8_t v570 = vorn_s8((int8x8_t)vmovn_s32(v560), *(int8x8_t *)v547.f32);
            *(int16x4_t *)v543.i8 = vmovn_s32(v568);
            vst2_s16(v569, (int16x4x2_t)v551);
            *(int8x8_t *)v551.f32 = vorn_s8((int8x8_t)vmovn_s32(v561), *(int8x8_t *)v543.i8);
            int8x8_t v571 = vorn_s8((int8x8_t)vmovn_s32(v562), *(int8x8_t *)v543.i8);
            int8x16_t v572 = (int8x16_t)vdupq_n_s32(0x477FE000u);
            int32x4_t v573 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v512, v564), (int8x16_t)vcgtq_s32(v1383, v563)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v564, (int8x16_t)v563), (int32x4_t)v524)), v1505);
            float32x4_t v574 = (float32x4_t)vbslq_s8((int8x16_t)v565, v553, v572);
            float32x4_t v575 = (float32x4_t)vbslq_s8((int8x16_t)v567, v554, v572);
            float32x4_t v576 = (float32x4_t)vbslq_s8((int8x16_t)v568, v555, v572);
            float32x4_t v577 = (float32x4_t)vbslq_s8((int8x16_t)v573, v556, v572);
            *(int16x4_t *)v573.i8 = vmovn_s32(v573);
            float v578 = v518 + 16;
            vst2_s16(v578, (int16x4x2_t)v551);
            float32x4_t v509 = v1450;
            float v506 = v1460;
            *(int8x8_t *)v572.i8 = vorn_s8((int8x8_t)vmovn_s32(v563), *(int8x8_t *)v573.i8);
            *(int8x8_t *)v548.f32 = vorn_s8((int8x8_t)vmovn_s32(v564), *(int8x8_t *)v573.i8);
            int32x4_t v579 = v518 + 24;
            vst2_s16(v579, *(int16x4x2_t *)((char *)&v548 - 8));
            int32x4_t v580 = vminq_s32(vmaxq_s32(vmlaq_s32(v557, v558, v1401), (int32x4_t)0), v1440);
            int32x4_t v581 = vminq_s32(vmaxq_s32(vmlaq_s32(v559, v560, v1401), (int32x4_t)0), v1440);
            int32x4_t v582 = vminq_s32(vmaxq_s32(vmlaq_s32(v561, v562, v1401), (int32x4_t)0), v1440);
            int32x4_t v583 = vminq_s32(vmaxq_s32(vmlaq_s32(v563, v564, v1401), (int32x4_t)0), v1440);
            LODWORD(v579) = v580.i32[1];
            *(float16x4_t *)v561.i8 = vcvt_f16_f32(v574);
            v492[v580.u32[0]] = fminl(*(short float *)v561.i16, v492[v580.u32[0]]);
            *(float16x4_t *)v563.i8 = vcvt_f16_f32(v575);
            v492[v581.u32[1]] = fminl(*(short float *)&v563.i16[1], v492[v581.u32[1]]);
            *(float16x4_t *)v580.i8 = vcvt_f16_f32(v576);
            v492[v582.u32[2]] = fminl(*(short float *)&v580.i16[2], v492[v582.u32[2]]);
            *(float16x4_t *)v577.f32 = vcvt_f16_f32(v577);
            v492[v583.u32[3]] = fminl(*(short float *)&v577.i16[3], v492[v583.u32[3]]);
            v492[v579] = fminl(*(short float *)&v561.i16[1], v492[v579]);
            v492[v581.u32[2]] = fminl(*(short float *)&v563.i16[2], v492[v581.u32[2]]);
            v492[v582.u32[3]] = fminl(*(short float *)&v580.i16[3], v492[v582.u32[3]]);
            v492[v583.u32[0]] = fminl(*(short float *)v577.i16, v492[v583.u32[0]]);
            v492[v580.u32[2]] = fminl(*(short float *)&v561.i16[2], v492[v580.u32[2]]);
            v492[v581.u32[3]] = fminl(*(short float *)&v563.i16[3], v492[v581.u32[3]]);
            v492[v582.u32[0]] = fminl(*(short float *)v580.i16, v492[v582.u32[0]]);
            v492[v583.u32[1]] = fminl(*(short float *)&v577.i16[1], v492[v583.u32[1]]);
            v492[v580.u32[3]] = fminl(*(short float *)&v561.i16[3], v492[v580.u32[3]]);
            v492[v581.u32[0]] = fminl(*(short float *)v563.i16, v492[v581.u32[0]]);
            v492[v582.u32[1]] = fminl(*(short float *)&v580.i16[1], v492[v582.u32[1]]);
            v492[v583.u32[2]] = fminl(*(short float *)&v577.i16[2], v492[v583.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v520 = vaddq_f32(v520, _Q0);
            v517 += 4;
            v518 += 32;
            v519 += 16;
          }
          while (v519 < v500);
          unint64_t v519 = (((v482 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v503 = (float32x4_t)a14;
          float32x4_t v507 = (float32x4_t)a15;
          float32x4_t v505 = a12;
          float32x4_t v504 = a13;
          float32x2_t v513 = (float32x2_t)a18;
          float v497 = *(float *)&a11;
          float32x2_t v508 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
          float v498 = v1365;
          float v499 = v1356;
          float v501 = 0.5;
          float32x4_t v502 = v1374;
        }
        if (v519 < v482)
        {
          do
          {
            _H1 = v517->i16[0];
            __asm { FCVT            S1, H1 }
            float v587 = _S1 * 1000.0;
            int32x4_t v588 = (int32x4_t)vaddq_f32(v507, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v505, v498* (float)((float)((float)((float)v519 + v501) - v497) * (float)(_S1 * 1000.0))), v504, v499* (float)((float)((float)((float)v494 + v501) - *((float *)&a11 + 1))* (float)(_S1 * 1000.0))), v503, _S1 * 1000.0));
            uint64_t v589 = 0xFFFF0000FFFFLL;
            if (*(float *)&v588.i32[2] >= 0.0 && v587 > 0.0)
            {
              int32x2_t v590 = vcvt_s32_f32(vmla_f32(v513, vdiv_f32(v508, (float32x2_t)vdup_laneq_s32(v588, 2)), *(float32x2_t *)v588.i8));
              if ((v590.i32[0] & 0x80000000) == 0
                && (__int16)v484 > v590.i32[0]
                && (v590.i32[1] & 0x80000000) == 0
                && (__int16)v483 > (int)v590.u16[2])
              {
                _S0 = *(float *)&v588.i32[2] * 0.001;
                __asm
                {
                  FCVT            H0, S0
                  FCMP            H2, #0
                }
                if (_ZF) {
                  BOOL v594 = 0;
                }
                else {
                  BOOL v594 = _H2 <= _H0;
                }
                if (!v594) {
                  v492[v489 * v590.u16[2] + v590.u32[0]] = _H0;
                }
                uint64_t v589 = (uint64_t)v590;
              }
            }
            __int16 *v518 = v589;
            v518[1] = WORD2(v589);
            ++v519;
            float32x4_t v517 = (float16x4_t *)((char *)v517 + 2);
            v518 += 2;
          }
          while (v482 != v519);
        }
        ++v494;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v502 = vaddq_f32(v502, _Q0);
      }
      while (v494 != v481);
      vImagePixelCount v493 = buf.height;
    }
    if (v493)
    {
      uint64_t v596 = 0;
      long long v597 = *(_OWORD *)&buf.width;
      size_t v598 = (char *)buf.data;
      vImagePixelCount v599 = buf.width >> 4;
      if (buf.width >> 4 <= 1) {
        vImagePixelCount v599 = 1;
      }
      unint64_t v600 = buf.width & 0xFFFFFFF0;
      do
      {
        unsigned int v601 = (int8x8_t *)&v598[*((void *)&v597 + 1) * v596];
        vImagePixelCount v602 = v599;
        if ((unint64_t)v597 >= 0x10)
        {
          do
          {
            float16x4_t v603 = (float16x4_t)v601[2];
            float16x4_t v604 = (float16x4_t)v601[3];
            int8x8_t v605 = vbic_s8(v601[1], (int8x8_t)vceq_f16((float16x4_t)v601[1], (float16x4_t)0x8400840084008400));
            *unsigned int v601 = vbic_s8(*v601, (int8x8_t)vceq_f16((float16x4_t)*v601, (float16x4_t)0x8400840084008400));
            v601[1] = v605;
            v601[2] = vbic_s8((int8x8_t)v603, (int8x8_t)vceq_f16(v603, (float16x4_t)0x8400840084008400));
            v601[3] = vbic_s8((int8x8_t)v604, (int8x8_t)vceq_f16(v604, (float16x4_t)0x8400840084008400));
            v601 += 4;
            --v602;
          }
          while (v602);
        }
        unint64_t v606 = v597 & 0xFFFFFFFF0000000FLL;
        if ((unint64_t)v597 > v600)
        {
          do
          {
            if (*(short float *)v601->i16 == COERCE_SHORT_FLOAT(31743)) {
              v601->i16[0] = 0;
            }
            unsigned int v601 = (int8x8_t *)((char *)v601 + 2);
            --v606;
          }
          while (v606);
        }
        ++v596;
      }
      while (v596 != v493);
    }
    goto LABEL_321;
  }
  if (PixelFormatType > 1751410031)
  {
    if (PixelFormatType != 1751410032)
    {
      if (PixelFormatType == 1751411059)
      {
        size_t v241 = CVPixelBufferGetHeight(a1);
        size_t v242 = CVPixelBufferGetWidth(a1);
        unsigned int v243 = CVPixelBufferGetHeight(pixelBuffer);
        unsigned int v244 = CVPixelBufferGetWidth(pixelBuffer);
        size_t v245 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        CVPixelBufferLockBaseAddress(a1, 1uLL);
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        CVPixelBufferLockBaseAddress(a2, 0);
        memset(&v1512, 0, sizeof(v1512));
        int v246 = (CGRect *)MEMORY[0x263F001A8];
        PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
        memset(&buf, 0, sizeof(buf));
        PixelBufferUtils::asVImageBuffer(pixelBuffer, *v246, &buf);
        PixelBufferUtils::asVImageBuffer(a2, *v246, &v1511);
        int32x2_t v247 = (char *)v1511.data;
        size_t v248 = v1511.rowBytes;
        float32x4_t v250 = buf.data;
        int v249 = buf.height;
        bzero(buf.data, buf.height * buf.rowBytes);
        float32x4_t v255 = (float32x4_t)a14;
        float32x4_t v254 = (float32x4_t)a15;
        float32x4_t v257 = a12;
        float32x4_t v256 = a13;
        float32x2_t v259 = (float32x2_t)a18;
        float v258 = *(float *)&a11;
        v260.i32[0] = a16;
        if (v241)
        {
          unint64_t v261 = 0;
          float v262 = 1.0 / *(float *)&a9;
          v263.i32[1] = v1490;
          float v264 = 1.0 / *(float *)&v1490;
          unint64_t v265 = v242 & 0xFFFFFFFFFFFFFFF0;
          float v266 = 0.5;
          *(float *)v251.i32 = 0.5 - *((float *)&a11 + 1);
          float32x4_t v267 = (float32x4_t)vdupq_lane_s32(v251, 0);
          *(float *)v251.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
          *(float *)v263.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
          *(float *)v252.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
          float32x4_t v1354 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
          float32x4_t v1363 = (float32x4_t)vdupq_lane_s32(v252, 0);
          float32x4_t v1335 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
          float32x4_t v1345 = (float32x4_t)vdupq_lane_s32(v263, 0);
          float32x4_t v1301 = (float32x4_t)vdupq_laneq_s32(a14, 2);
          float32x4_t v1311 = (float32x4_t)vdupq_lane_s32(v251, 0);
          float v268 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
          *(float *)&long long v253 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
          float v269 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
          float32x4_t v270 = (float32x4_t)vdupq_laneq_s32(a15, 2);
          float32x4_t v271 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
          float32x4_t v1428 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
          int32x4_t v1408 = vdupq_n_s32(v244);
          int32x4_t v272 = vdupq_n_s32(v243);
          float32x4_t v1291 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
          float32x4_t v273 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
          v260.i32[1] = DWORD1(a17);
          v274 = (char *)v1512.data;
          size_t v275 = v1512.rowBytes;
          float32x2_t v1332 = v260;
          float v1381 = 1.0 / *(float *)&a9;
          float v1372 = 1.0 / *(float *)&v1490;
          int32x4_t v1467 = vdupq_n_s32(v245 >> 1);
          float32x4_t v1475 = v270;
          float v1448 = v268;
          int32x4_t v1458 = vdupq_n_s32(v249 * (v245 >> 1) - 2);
          float32x4_t v1438 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
          float32x4_t v1418 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
          float32x4_t v1399 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
          do
          {
            float32x4_t v276 = (float16x4_t *)&v274[v275 * v261];
            float32x4_t v277 = (__int16 *)&v247[v261 * v248];
            unint64_t v278 = 0;
            if (v265)
            {
              float32x4_t v1503 = vmlaq_f32(v1354, v1363, v267);
              float32x4_t v1494 = vmlaq_f32(v1335, v1345, v267);
              float32x4_t v1390 = v267;
              float32x4_t v1483 = vmlaq_f32(v1301, v1311, v267);
              float32x4_t v279 = v1291;
              do
              {
                float32x4_t v280 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                float32x4_t v281 = vmulq_f32(vcvtq_f32_f16(*v276), v280);
                float32x4_t v282 = vmulq_f32(vcvtq_f32_f16(v276[1]), v280);
                float32x4_t v283 = vmulq_f32(vcvtq_f32_f16(v276[2]), v280);
                __asm { FMOV            V0.4S, #4.0 }
                float32x4_t v285 = vaddq_f32(v279, _Q0);
                _Q0.i64[0] = 0x4100000041000000;
                _Q0.i64[1] = 0x4100000041000000;
                float32x4_t v286 = vaddq_f32(v279, _Q0);
                __asm { FMOV            V0.4S, #12.0 }
                float32x4_t v288 = vaddq_f32(v279, _Q0);
                float32x4_t v289 = vmulq_f32(vcvtq_f32_f16(v276[3]), v280);
                float32x4_t v290 = vmlaq_f32(v270, vmlaq_n_f32(v1483, v279, v268), v281);
                float32x4_t v291 = vmlaq_f32(v270, vmlaq_n_f32(v1483, v285, v268), v282);
                float32x4_t v292 = vmlaq_f32(v270, vmlaq_n_f32(v1483, v286, v268), v283);
                float32x4_t v293 = vmlaq_f32(v270, vmlaq_n_f32(v1483, v288, v268), v289);
                int8x16_t v294 = (int8x16_t)vcgtzq_f32(v282);
                int32x4_t v295 = v272;
                int8x16_t v296 = vandq_s8((int8x16_t)vcgezq_f32(v290), (int8x16_t)vcgtzq_f32(v281));
                float32x4_t v297 = vmlaq_f32(v271, vmlaq_n_f32(v1503, v288, v269), v289);
                float32x4_t v298 = vmlaq_f32(v1428, vmlaq_n_f32(v1494, v288, *(float *)&v253), v289);
                int8x16_t v299 = vandq_s8((int8x16_t)vcgezq_f32(v292), (int8x16_t)vcgtzq_f32(v283));
                float32x4_t v300 = vmlaq_f32(v1418, vdivq_f32(v273, v290), vmlaq_f32(v271, vmlaq_n_f32(v1503, v279, v269), v281));
                float32x4_t v301 = vmlaq_f32(v1418, vdivq_f32(v273, v291), vmlaq_f32(v271, vmlaq_n_f32(v1503, v285, v269), v282));
                float32x4_t v302 = vmlaq_f32(v1399, vdivq_f32(v1438, v291), vmlaq_f32(v1428, vmlaq_n_f32(v1494, v285, *(float *)&v253), v282));
                float32x4_t v303 = vmlaq_f32(v1418, vdivq_f32(v273, v292), vmlaq_f32(v271, vmlaq_n_f32(v1503, v286, v269), v283));
                float32x4_t v304 = v271;
                long long v305 = v253;
                int8x16_t v306 = vandq_s8((int8x16_t)vcgezq_f32(v293), (int8x16_t)vcgtzq_f32(v289));
                int32x4_t v307 = vcvtmq_s32_f32(v300);
                int32x4_t v308 = vcvtmq_s32_f32(vmlaq_f32(v1399, vdivq_f32(v1438, v290), vmlaq_f32(v1428, vmlaq_n_f32(v1494, v279, *(float *)&v253), v281)));
                int32x4_t v309 = vcvtmq_s32_f32(v301);
                int32x4_t v310 = vcvtmq_s32_f32(v302);
                int32x4_t v311 = vcvtmq_s32_f32(v303);
                int32x4_t v312 = vcvtmq_s32_f32(vmlaq_f32(v1399, vdivq_f32(v1438, v292), vmlaq_f32(v1428, vmlaq_n_f32(v1494, v286, *(float *)&v253), v283)));
                float32x4_t v313 = vmlaq_f32(v1418, vdivq_f32(v273, v293), v297);
                int32x4_t v272 = v295;
                int32x4_t v314 = vcvtmq_s32_f32(v313);
                int32x4_t v315 = vcvtmq_s32_f32(vmlaq_f32(v1399, vdivq_f32(v1438, v293), v298));
                int16x4x2_t v316 = (int16x4x2_t)vcgtq_s32(v295, v308);
                v295.i64[0] = -1;
                v295.i64[1] = -1;
                int32x4_t v317 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)v316, (int8x16_t)vcgtq_s32(v1408, v307)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v308, (int8x16_t)v307), v295)), v296);
                int32x4_t v318 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v272, v310), (int8x16_t)vcgtq_s32(v1408, v309)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v310, (int8x16_t)v309), v295)), vandq_s8((int8x16_t)vcgezq_f32(v291), v294));
                int32x4_t v319 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v272, v312), (int8x16_t)vcgtq_s32(v1408, v311)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v312, (int8x16_t)v311), v295)), v299);
                *(int16x4_t *)v296.i8 = vmovn_s32(v317);
                v316.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v307), *(int8x8_t *)v296.i8);
                int8x8_t v320 = vorn_s8((int8x8_t)vmovn_s32(v308), *(int8x8_t *)v296.i8);
                *(int16x4_t *)v302.f32 = vmovn_s32(v318);
                int8x8_t v321 = v277;
                vst2_s16(v321, v316);
                v321 += 8;
                v316.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v309), *(int8x8_t *)v302.f32);
                int8x8_t v322 = vorn_s8((int8x8_t)vmovn_s32(v310), *(int8x8_t *)v302.f32);
                *(int16x4_t *)v302.f32 = vmovn_s32(v319);
                int32x4_t v323 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v272, v315), (int8x16_t)vcgtq_s32(v1408, v314)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v315, (int8x16_t)v314), v295)), v306);
                vst2_s16(v321, v316);
                v316.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v311), *(int8x8_t *)v302.f32);
                int8x8_t v324 = vorn_s8((int8x8_t)vmovn_s32(v312), *(int8x8_t *)v302.f32);
                int8x16_t v325 = v277 + 16;
                *(int16x4_t *)v302.f32 = vmovn_s32(v323);
                vst2_s16(v325, v316);
                v316.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v314), *(int8x8_t *)v302.f32);
                int8x8_t v326 = vorn_s8((int8x8_t)vmovn_s32(v315), *(int8x8_t *)v302.f32);
                int32x4_t v327 = v277 + 24;
                vst2_s16(v327, v316);
                long long v253 = v305;
                float32x4_t v271 = v304;
                float32x4_t v270 = v1475;
                int8x16_t v328 = (int8x16_t)vdivq_f32(v280, v293);
                int32x4_t v329 = vmlaq_s32(v311, v312, v1467);
                int32x4_t v330 = vmlaq_s32(v314, v315, v1467);
                float v268 = v1448;
                float32x4_t v331 = (float32x4_t)vandq_s8((int8x16_t)vdivq_f32(v280, v290), (int8x16_t)v317);
                float32x4_t v332 = (float32x4_t)vandq_s8((int8x16_t)vdivq_f32(v280, v291), (int8x16_t)v318);
                float32x4_t v333 = (float32x4_t)vandq_s8((int8x16_t)vdivq_f32(v280, v292), (int8x16_t)v319);
                int32x4_t v334 = vminq_s32(vmaxq_s32(vmlaq_s32(v307, v308, v1467), (int32x4_t)0), v1458);
                int32x4_t v335 = vminq_s32(vmaxq_s32(vmlaq_s32(v309, v310, v1467), (int32x4_t)0), v1458);
                int32x4_t v336 = vminq_s32(vmaxq_s32(v329, (int32x4_t)0), v1458);
                int32x4_t v337 = vminq_s32(vmaxq_s32(v330, (int32x4_t)0), v1458);
                float32x4_t v338 = (float32x4_t)vandq_s8(v328, (int8x16_t)v323);
                LODWORD(v327) = v334.i32[1];
                unsigned __int32 v339 = v334.i32[0];
                v328.i16[0] = v250[v334.u32[0]];
                *(float16x4_t *)v334.i8 = vcvt_f16_f32(v331);
                *(short float *)&v250[v339] = fmaxl(*(short float *)v334.i16, *(short float *)v328.i16);
                *(float16x4_t *)v332.f32 = vcvt_f16_f32(v332);
                *(short float *)&v250[v335.u32[1]] = fmaxl(*(short float *)&v332.i16[1], *(short float *)&v250[v335.u32[1]]);
                *(float16x4_t *)v333.f32 = vcvt_f16_f32(v333);
                *(short float *)&v250[v336.u32[2]] = fmaxl(*(short float *)&v333.i16[2], *(short float *)&v250[v336.u32[2]]);
                *(float16x4_t *)v338.f32 = vcvt_f16_f32(v338);
                *(short float *)&v250[v337.u32[3]] = fmaxl(*(short float *)&v338.i16[3], *(short float *)&v250[v337.u32[3]]);
                *(short float *)&v250[v327] = fmaxl(*(short float *)&v334.i16[1], *(short float *)&v250[v327]);
                *(short float *)&v250[v335.u32[2]] = fmaxl(*(short float *)&v332.i16[2], *(short float *)&v250[v335.u32[2]]);
                *(short float *)&v250[v336.u32[3]] = fmaxl(*(short float *)&v333.i16[3], *(short float *)&v250[v336.u32[3]]);
                *(short float *)&v250[v337.u32[0]] = fmaxl(*(short float *)v338.i16, *(short float *)&v250[v337.u32[0]]);
                *(short float *)&v250[v334.u32[2]] = fmaxl(*(short float *)&v334.i16[2], *(short float *)&v250[v334.u32[2]]);
                *(short float *)&v250[v335.u32[3]] = fmaxl(*(short float *)&v332.i16[3], *(short float *)&v250[v335.u32[3]]);
                *(short float *)&v250[v336.u32[0]] = fmaxl(*(short float *)v333.i16, *(short float *)&v250[v336.u32[0]]);
                *(short float *)&v250[v337.u32[1]] = fmaxl(*(short float *)&v338.i16[1], *(short float *)&v250[v337.u32[1]]);
                *(short float *)&v250[v334.u32[3]] = fmaxl(*(short float *)&v334.i16[3], *(short float *)&v250[v334.u32[3]]);
                *(short float *)&v250[v335.u32[0]] = fmaxl(*(short float *)v332.i16, *(short float *)&v250[v335.u32[0]]);
                *(short float *)&v250[v336.u32[1]] = fmaxl(*(short float *)&v333.i16[1], *(short float *)&v250[v336.u32[1]]);
                *(short float *)&v250[v337.u32[2]] = fmaxl(*(short float *)&v338.i16[2], *(short float *)&v250[v337.u32[2]]);
                __asm { FMOV            V0.4S, #16.0 }
                float32x4_t v279 = vaddq_f32(v279, _Q0);
                v276 += 4;
                v277 += 32;
                v278 += 16;
              }
              while (v278 < v265);
              unint64_t v278 = (((v242 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
              float32x4_t v255 = (float32x4_t)a14;
              float32x4_t v254 = (float32x4_t)a15;
              float32x4_t v257 = a12;
              float32x4_t v256 = a13;
              float32x2_t v259 = (float32x2_t)a18;
              float v258 = *(float *)&a11;
              float32x2_t v260 = v1332;
              float v262 = v1381;
              float v264 = v1372;
              float v266 = 0.5;
              float32x4_t v267 = v1390;
            }
            if (v278 < v242)
            {
              do
              {
                _H1 = v276->i16[0];
                __asm { FCVT            S1, H1 }
                float v343 = _S1 * 1000.0;
                int32x4_t v344 = (int32x4_t)vaddq_f32(v254, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v257, v262* (float)((float)((float)((float)v278 + v266) - v258) * (float)(_S1 * 1000.0))), v256, v264* (float)((float)((float)((float)v261 + v266) - *((float *)&a11 + 1))* (float)(_S1 * 1000.0))), v255, _S1 * 1000.0));
                uint64_t v345 = 0xFFFF0000FFFFLL;
                if (*(float *)&v344.i32[2] >= 0.0 && v343 > 0.0)
                {
                  int32x2_t v346 = vcvt_s32_f32(vmla_f32(v259, vdiv_f32(v260, (float32x2_t)vdup_laneq_s32(v344, 2)), *(float32x2_t *)v344.i8));
                  if ((v346.i32[0] & 0x80000000) == 0
                    && (__int16)v244 > v346.i32[0]
                    && (v346.i32[1] & 0x80000000) == 0
                    && (__int16)v243 > (int)v346.u16[2])
                  {
                    _S0 = 1000.0 / *(float *)&v344.i32[2];
                    __asm
                    {
                      FCVT            H0, S0
                      FCMP            H2, #0
                    }
                    if (_ZF) {
                      BOOL v350 = 1;
                    }
                    else {
                      BOOL v350 = _H2 < _H0;
                    }
                    if (v350) {
                      *(short float *)&v250[(v245 >> 1) * v346.u16[2] + v346.u32[0]] = _H0;
                    }
                    uint64_t v345 = (uint64_t)v346;
                  }
                }
                *float32x4_t v277 = v345;
                v277[1] = WORD2(v345);
                ++v278;
                float32x4_t v276 = (float16x4_t *)((char *)v276 + 2);
                v277 += 2;
              }
              while (v242 != v278);
            }
            ++v261;
            __asm { FMOV            V0.4S, #1.0 }
            float32x4_t v267 = vaddq_f32(v267, _Q0);
          }
          while (v261 != v241);
        }
        goto LABEL_321;
      }
      goto LABEL_322;
    }
    goto LABEL_124;
  }
  if (PixelFormatType == 1717855600)
  {
LABEL_88:
    size_t v352 = CVPixelBufferGetHeight(a1);
    size_t v353 = CVPixelBufferGetWidth(a1);
    size_t v354 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v355 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v356 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&v1512, 0, sizeof(v1512));
    v357 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v357, &buf);
    PixelBufferUtils::asVImageBuffer(a2, *v357, &v1511);
    size_t v361 = v356 >> 2;
    int32x2_t v362 = (char *)v1511.data;
    size_t v363 = v1511.rowBytes;
    float v364 = (float *)buf.data;
    if (v361 * v354) {
      memset_pattern16(buf.data, &unk_247F24670, 4 * v361 * v354);
    }
    vImagePixelCount v365 = buf.height;
    if (v352)
    {
      unint64_t v366 = 0;
      v367.i32[1] = v1490;
      v368.i32[1] = HIDWORD(a9);
      float v369 = *(float *)&a11;
      float v370 = 1.0 / *(float *)&a9;
      float v371 = 1.0 / *(float *)&v1490;
      unint64_t v372 = v353 & 0xFFFFFFFFFFFFFFF0;
      float v373 = 0.5;
      *(float *)v358.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v374 = (float32x4_t)vdupq_lane_s32(v358, 0);
      float32x4_t v376 = a13;
      float32x4_t v375 = (float32x4_t)a14;
      *(float *)v358.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
      *(float *)v367.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
      *(float *)v368.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
      float32x4_t v1355 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1364 = (float32x4_t)vdupq_lane_s32(v368, 0);
      float32x4_t v1336 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1346 = (float32x4_t)vdupq_lane_s32(v367, 0);
      float32x4_t v1302 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      float32x4_t v1312 = (float32x4_t)vdupq_lane_s32(v358, 0);
      float32x4_t v377 = a12;
      float v378 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      *(float *)&long long v359 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      *(float *)&long long v360 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v1292 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      float32x4_t v379 = (float32x4_t)a15;
      float32x2_t v380 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
      float32x4_t v381 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v382 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v383 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      int32x4_t v1409 = vdupq_n_s32(v354);
      int32x4_t v1419 = vdupq_n_s32(v355);
      float32x2_t v384 = (float32x2_t)a18;
      unint64_t v385 = (char *)v1512.data;
      size_t v386 = v1512.rowBytes;
      v387.i64[0] = 0x4100000041000000;
      v387.i64[1] = 0x4100000041000000;
      float v1382 = 1.0 / *(float *)&a9;
      float v1373 = 1.0 / *(float *)&v1490;
      int32x4_t v1468 = vdupq_n_s32(v361);
      float v1476 = v378;
      float32x4_t v1449 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      float32x4_t v1459 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      float32x4_t v1429 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      int32x4_t v1439 = vdupq_n_s32(LODWORD(buf.height) * (int)v361 - 4);
      float32x4_t v1400 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      do
      {
        float32x4_t v388 = (float16x4_t *)&v385[v386 * v366];
        float32x4_t v389 = (__int16 *)&v362[v366 * v363];
        unint64_t v390 = 0;
        if (v372)
        {
          float32x4_t v1504 = vmlaq_f32(v1355, v1364, v374);
          float32x4_t v1495 = vmlaq_f32(v1336, v1346, v374);
          float32x4_t v1391 = v374;
          float32x4_t v1484 = vmlaq_f32(v1302, v1312, v374);
          float32x4_t v391 = v1292;
          do
          {
            float32x4_t v392 = (float32x4_t)vdupq_n_s32(0x447A0000u);
            float32x4_t v393 = vmulq_f32(vcvtq_f32_f16(*v388), v392);
            float32x4_t v394 = vmulq_f32(vcvtq_f32_f16(v388[1]), v392);
            float32x4_t v395 = vmulq_f32(vcvtq_f32_f16(v388[2]), v392);
            __asm { FMOV            V0.4S, #4.0 }
            float32x4_t v397 = vaddq_f32(v391, _Q0);
            float32x4_t v398 = vaddq_f32(v391, v387);
            __asm { FMOV            V0.4S, #12.0 }
            float32x4_t v400 = vaddq_f32(v391, _Q0);
            float32x4_t v401 = vmulq_f32(vcvtq_f32_f16(v388[3]), v392);
            float32x4_t v402 = vmlaq_f32(v381, vmlaq_n_f32(v1484, v391, v378), v393);
            float32x4_t v403 = vmlaq_f32(v381, vmlaq_n_f32(v1484, v397, v378), v394);
            float32x4_t v404 = vmlaq_f32(v381, vmlaq_n_f32(v1484, v398, v378), v395);
            float32x4_t v405 = vmlaq_f32(v381, vmlaq_n_f32(v1484, v400, v378), v401);
            int8x16_t v406 = (int8x16_t)vcgtzq_f32(v393);
            int8x16_t v407 = (int8x16_t)vcgtzq_f32(v394);
            float32x4_t v408 = vmlaq_f32(v382, vmlaq_n_f32(v1504, v391, *(float *)&v360), v393);
            float32x4_t v409 = vmlaq_f32(v383, vmlaq_n_f32(v1495, v391, *(float *)&v359), v393);
            float32x4_t v410 = vmlaq_f32(v382, vmlaq_n_f32(v1504, v397, *(float *)&v360), v394);
            float32x4_t v411 = v381;
            float32x4_t v412 = vmlaq_f32(v383, vmlaq_n_f32(v1495, v397, *(float *)&v359), v394);
            float32x4_t v413 = vmlaq_f32(v382, vmlaq_n_f32(v1504, v398, *(float *)&v360), v395);
            float32x4_t v414 = vmlaq_f32(v383, vmlaq_n_f32(v1495, v398, *(float *)&v359), v395);
            float32x4_t v415 = vmlaq_f32(v382, vmlaq_n_f32(v1504, v400, *(float *)&v360), v401);
            int16x4x2_t v416 = (int16x4x2_t)vandq_s8((int8x16_t)vcgezq_f32(v403), v407);
            float32x4_t v417 = vmlaq_f32(v383, vmlaq_n_f32(v1495, v400, *(float *)&v359), v401);
            float32x4_t v418 = v382;
            long long v419 = v360;
            long long v420 = v359;
            int8x16_t v421 = vandq_s8((int8x16_t)vcgezq_f32(v404), (int8x16_t)vcgtzq_f32(v395));
            float32x4_t v422 = vmlaq_f32(v1429, vdivq_f32(v1459, v403), v410);
            float32x4_t v423 = vmlaq_f32(v1400, vdivq_f32(v1449, v403), v412);
            int8x16_t v424 = vandq_s8((int8x16_t)vcgezq_f32(v405), (int8x16_t)vcgtzq_f32(v401));
            int32x4_t v425 = vcvtmq_s32_f32(vmlaq_f32(v1429, vdivq_f32(v1459, v402), v408));
            int32x4_t v426 = vcvtmq_s32_f32(vmlaq_f32(v1400, vdivq_f32(v1449, v402), v409));
            int32x4_t v427 = vcvtmq_s32_f32(v422);
            int32x4_t v428 = vcvtmq_s32_f32(v423);
            int32x4_t v429 = vcvtmq_s32_f32(vmlaq_f32(v1429, vdivq_f32(v1459, v404), v413));
            int32x4_t v430 = vcvtmq_s32_f32(vmlaq_f32(v1400, vdivq_f32(v1449, v404), v414));
            int32x4_t v431 = vcvtmq_s32_f32(vmlaq_f32(v1429, vdivq_f32(v1459, v405), v415));
            int32x4_t v432 = vcvtmq_s32_f32(vmlaq_f32(v1400, vdivq_f32(v1449, v405), v417));
            v422.i64[0] = -1;
            v422.i64[1] = -1;
            int32x4_t v433 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1409, v426), (int8x16_t)vcgtq_s32(v1419, v425)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v426, (int8x16_t)v425), (int32x4_t)v422)), vandq_s8((int8x16_t)vcgezq_f32(v402), v406));
            int32x4_t v434 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1409, v428), (int8x16_t)vcgtq_s32(v1419, v427)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v428, (int8x16_t)v427), (int32x4_t)v422)), (int8x16_t)v416);
            int32x4_t v435 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1409, v430), (int8x16_t)vcgtq_s32(v1419, v429)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v430, (int8x16_t)v429), (int32x4_t)v422)), v421);
            *(int16x4_t *)v415.f32 = vmovn_s32(v433);
            v416.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v425), *(int8x8_t *)v415.f32);
            *(int8x8_t *)v421.i8 = vorn_s8((int8x8_t)vmovn_s32(v426), *(int8x8_t *)v415.f32);
            *(int16x4_t *)v423.f32 = vmovn_s32(v434);
            int8x16_t v436 = v389;
            vst2_s16(v436, v416);
            v436 += 8;
            v416.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v427), *(int8x8_t *)v423.f32);
            *(int8x8_t *)v421.i8 = vorn_s8((int8x8_t)vmovn_s32(v428), *(int8x8_t *)v423.f32);
            *(int16x4_t *)v423.f32 = vmovn_s32(v435);
            int32x4_t v437 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1409, v432), (int8x16_t)vcgtq_s32(v1419, v431)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v432, (int8x16_t)v431), (int32x4_t)v422)), v424);
            vst2_s16(v436, v416);
            v416.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v429), *(int8x8_t *)v423.f32);
            *(int8x8_t *)v421.i8 = vorn_s8((int8x8_t)vmovn_s32(v430), *(int8x8_t *)v423.f32);
            int8x16_t v438 = v389 + 16;
            *(int16x4_t *)v423.f32 = vmovn_s32(v437);
            vst2_s16(v438, v416);
            v416.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v431), *(int8x8_t *)v423.f32);
            *(int8x8_t *)v421.i8 = vorn_s8((int8x8_t)vmovn_s32(v432), *(int8x8_t *)v423.f32);
            int8x16_t v439 = v389 + 24;
            vst2_s16(v439, v416);
            float32x4_t v381 = v411;
            long long v359 = v420;
            long long v360 = v419;
            float32x4_t v382 = v418;
            v387.i64[0] = 0x4100000041000000;
            v387.i64[1] = 0x4100000041000000;
            float32x4_t v440 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
            int8x16_t v441 = (int8x16_t)vmulq_f32(v402, v440);
            int8x16_t v442 = (int8x16_t)vmulq_f32(v403, v440);
            int8x16_t v443 = (int8x16_t)vmulq_f32(v404, v440);
            int8x16_t v444 = (int8x16_t)vmulq_f32(v405, v440);
            int32x4_t v445 = vmlaq_s32(v427, v428, v1468);
            int8x16_t v446 = (int8x16_t)vdupq_n_s32(0x7F7FFFFFu);
            int8x16_t v447 = vbslq_s8((int8x16_t)v433, v441, v446);
            int32x4_t v448 = vminq_s32(vmaxq_s32(vmlaq_s32(v425, v426, v1468), (int32x4_t)0), v1439);
            LODWORD(v439) = v448.i32[1];
            unsigned __int32 v449 = v448.u32[2];
            unsigned __int32 v450 = v448.u32[3];
            int32x4_t v451 = vminq_s32(vmaxq_s32(v445, (int32x4_t)0), v1439);
            int8x16_t v452 = vbslq_s8((int8x16_t)v434, v442, v446);
            float v378 = v1476;
            v364[v448.u32[0]] = fminf(*(float *)v447.i32, v364[v448.u32[0]]);
            int32x4_t v453 = vminq_s32(vmaxq_s32(vmlaq_s32(v429, v430, v1468), (int32x4_t)0), v1439);
            v364[v451.u32[1]] = fminf(*(float *)&v452.i32[1], v364[v451.u32[1]]);
            int8x16_t v454 = vbslq_s8((int8x16_t)v435, v443, v446);
            v364[v453.u32[2]] = fminf(*(float *)&v454.i32[2], v364[v453.u32[2]]);
            int32x4_t v455 = vminq_s32(vmaxq_s32(vmlaq_s32(v431, v432, v1468), (int32x4_t)0), v1439);
            int8x16_t v456 = vbslq_s8((int8x16_t)v437, v444, v446);
            v364[v455.u32[3]] = fminf(*(float *)&v456.i32[3], v364[v455.u32[3]]);
            v364[v439] = fminf(*(float *)&v447.i32[1], v364[v439]);
            v364[v451.u32[2]] = fminf(*(float *)&v452.i32[2], v364[v451.u32[2]]);
            v364[v453.u32[3]] = fminf(*(float *)&v454.i32[3], v364[v453.u32[3]]);
            v364[v455.u32[0]] = fminf(*(float *)v456.i32, v364[v455.u32[0]]);
            v364[v449] = fminf(*(float *)&v447.i32[2], v364[v449]);
            v364[v451.u32[3]] = fminf(*(float *)&v452.i32[3], v364[v451.u32[3]]);
            v364[v453.u32[0]] = fminf(*(float *)v454.i32, v364[v453.u32[0]]);
            v364[v455.u32[1]] = fminf(*(float *)&v456.i32[1], v364[v455.u32[1]]);
            v364[v450] = fminf(*(float *)&v447.i32[3], v364[v450]);
            v364[v451.u32[0]] = fminf(*(float *)v452.i32, v364[v451.u32[0]]);
            v364[v453.u32[1]] = fminf(*(float *)&v454.i32[1], v364[v453.u32[1]]);
            v364[v455.u32[2]] = fminf(*(float *)&v456.i32[2], v364[v455.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v391 = vaddq_f32(v391, _Q0);
            v388 += 4;
            v389 += 32;
            v390 += 16;
          }
          while (v390 < v372);
          unint64_t v390 = (((v353 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v375 = (float32x4_t)a14;
          float32x4_t v379 = (float32x4_t)a15;
          float32x4_t v377 = a12;
          float32x4_t v376 = a13;
          float32x2_t v384 = (float32x2_t)a18;
          float v369 = *(float *)&a11;
          float32x2_t v380 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
          float v370 = v1382;
          float v371 = v1373;
          float v373 = 0.5;
          float32x4_t v374 = v1391;
        }
        if (v390 < v353)
        {
          do
          {
            _H2 = v388->i16[0];
            __asm { FCVT            S2, H2 }
            float v460 = _S2 * 1000.0;
            int32x4_t v461 = (int32x4_t)vaddq_f32(v379, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v377, v370 * (float)((float)((float)((float)v390 + v373) - v369) * v460)), v376, v371 * (float)((float)((float)((float)v366 + v373) - *((float *)&a11 + 1)) * v460)), v375, v460));
            uint64_t v462 = 0xFFFF0000FFFFLL;
            if (*(float *)&v461.i32[2] >= 0.0 && v460 > 0.0)
            {
              int32x2_t v463 = vcvt_s32_f32(vmla_f32(v384, vdiv_f32(v380, (float32x2_t)vdup_laneq_s32(v461, 2)), *(float32x2_t *)v461.i8));
              if ((v463.i32[0] & 0x80000000) == 0
                && (__int16)v355 > v463.i32[0]
                && (v463.i32[1] & 0x80000000) == 0
                && (__int16)v354 > (int)v463.u16[2])
              {
                float v464 = *(float *)&v461.i32[2] * 0.001;
                vImagePixelCount v465 = &v364[v361 * v463.u16[2]];
                float v466 = v465[v463.u32[0]];
                if (v466 == 0.0 || v466 > v464) {
                  v465[v463.u32[0]] = v464;
                }
                uint64_t v462 = (uint64_t)v463;
              }
            }
            *float32x4_t v389 = v462;
            v389[1] = WORD2(v462);
            ++v390;
            float32x4_t v388 = (float16x4_t *)((char *)v388 + 2);
            v389 += 2;
          }
          while (v353 != v390);
        }
        ++v366;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v374 = vaddq_f32(v374, _Q0);
      }
      while (v366 != v352);
      vImagePixelCount v365 = buf.height;
    }
    if (v365)
    {
      uint64_t v469 = 0;
      long long v470 = *(_OWORD *)&buf.width;
      float32x4_t v471 = (char *)buf.data;
      vImagePixelCount v472 = buf.width >> 4;
      if (buf.width >> 4 <= 1) {
        vImagePixelCount v472 = 1;
      }
      unint64_t v473 = buf.width & 0xFFFFFFF0;
      float32x4_t v474 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
      do
      {
        size_t v475 = (float32x4_t *)&v471[*((void *)&v470 + 1) * v469];
        vImagePixelCount v476 = v472;
        if ((unint64_t)v470 >= 0x10)
        {
          do
          {
            float32x4_t v477 = v475[2];
            float32x4_t v478 = v475[3];
            int8x16_t v479 = vbicq_s8((int8x16_t)v475[1], (int8x16_t)vceqq_f32(v475[1], v474));
            *(int8x16_t *)size_t v475 = vbicq_s8(*(int8x16_t *)v475, (int8x16_t)vceqq_f32(*v475, v474));
            v475[1] = (float32x4_t)v479;
            v475[2] = (float32x4_t)vbicq_s8((int8x16_t)v477, (int8x16_t)vceqq_f32(v477, v474));
            v475[3] = (float32x4_t)vbicq_s8((int8x16_t)v478, (int8x16_t)vceqq_f32(v478, v474));
            v475 += 4;
            --v476;
          }
          while (v476);
        }
        unint64_t v480 = v470 & 0xFFFFFFFF0000000FLL;
        if ((unint64_t)v470 > v473)
        {
          do
          {
            if (v475->f32[0] == 3.4028e38) {
              v475->i32[0] = 0;
            }
            size_t v475 = (float32x4_t *)((char *)v475 + 4);
            --v480;
          }
          while (v480);
        }
        ++v469;
      }
      while (v469 != v365);
    }
    goto LABEL_321;
  }
  if (PixelFormatType == 1717856627)
  {
    size_t v21 = CVPixelBufferGetHeight(a1);
    size_t v22 = CVPixelBufferGetWidth(a1);
    unsigned int v23 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v24 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v25 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&v1512, 0, sizeof(v1512));
    double v26 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v26, &buf);
    PixelBufferUtils::asVImageBuffer(a2, *v26, &v1511);
    size_t v27 = (char *)v1511.data;
    size_t v28 = v1511.rowBytes;
    int32x2_t v30 = (float *)buf.data;
    int v29 = buf.height;
    bzero(buf.data, buf.height * buf.rowBytes);
    float32x4_t v34 = (float32x4_t)a14;
    float32x4_t v33 = (float32x4_t)a15;
    float32x4_t v36 = a12;
    float32x4_t v35 = a13;
    float32x2_t v38 = (float32x2_t)a18;
    float v37 = *(float *)&a11;
    v39.i32[0] = a16;
    if (v21)
    {
      unint64_t v40 = 0;
      float v41 = 1.0 / *(float *)&a9;
      v42.i32[1] = v1490;
      float v43 = 1.0 / *(float *)&v1490;
      unint64_t v44 = v22 & 0xFFFFFFFFFFFFFFF0;
      float v45 = 0.5;
      *(float *)v31.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v46 = (float32x4_t)vdupq_lane_s32(v31, 0);
      *(float *)v31.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
      *(float *)v42.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
      *(float *)v32.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
      float32x4_t v1333 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1343 = (float32x4_t)vdupq_lane_s32(v32, 0);
      float32x4_t v1299 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1309 = (float32x4_t)vdupq_lane_s32(v42, 0);
      float32x4_t v1284 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      float32x4_t v1289 = (float32x4_t)vdupq_lane_s32(v31, 0);
      float v47 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      float v48 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      float v49 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v50 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v51 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v52 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      float32x4_t v1281 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      float32x4_t v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      v39.i32[1] = DWORD1(a17);
      float32x4_t v54 = (char *)v1512.data;
      size_t v55 = v1512.rowBytes;
      v56.i64[0] = 0x4100000041000000;
      v56.i64[1] = 0x4100000041000000;
      float32x2_t v1331 = v39;
      float v1361 = 1.0 / *(float *)&a9;
      float v1352 = 1.0 / *(float *)&v1490;
      int32x4_t v1465 = vdupq_n_s32(v29 * (v25 >> 2) - 4);
      float32x4_t v1473 = v50;
      float32x4_t v1446 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      int32x4_t v1456 = vdupq_n_s32(v25 >> 2);
      int32x4_t v1426 = vdupq_n_s32(v23);
      float v1436 = v47;
      float32x4_t v1406 = v51;
      float32x4_t v1416 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      float32x4_t v1388 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      int32x4_t v1397 = vdupq_n_s32(v24);
      float v1379 = v48;
      do
      {
        float32x4_t v57 = (float16x4_t *)&v54[v55 * v40];
        v58 = (__int16 *)&v27[v40 * v28];
        unint64_t v59 = 0;
        if (v44)
        {
          float32x4_t v1501 = vmlaq_f32(v1333, v1343, v46);
          float32x4_t v1492 = vmlaq_f32(v1299, v1309, v46);
          float32x4_t v1370 = v46;
          float32x4_t v1481 = vmlaq_f32(v1284, v1289, v46);
          float32x4_t v60 = v1281;
          do
          {
            float32x4_t v61 = (float32x4_t)vdupq_n_s32(0x447A0000u);
            float32x4_t v62 = vmulq_f32(vcvtq_f32_f16(*v57), v61);
            float32x4_t v63 = vmulq_f32(vcvtq_f32_f16(v57[1]), v61);
            __asm { FMOV            V0.4S, #4.0 }
            float32x4_t v68 = vaddq_f32(v60, _Q0);
            float32x4_t v69 = vmulq_f32(vcvtq_f32_f16(v57[2]), v61);
            float32x4_t v70 = vaddq_f32(v60, v56);
            __asm { FMOV            V0.4S, #12.0 }
            float32x4_t v72 = vaddq_f32(v60, _Q0);
            float32x4_t v73 = vmulq_f32(vcvtq_f32_f16(v57[3]), v61);
            float32x4_t v74 = vmlaq_f32(v50, vmlaq_n_f32(v1481, v60, v47), v62);
            float32x4_t v75 = vmlaq_f32(v50, vmlaq_n_f32(v1481, v68, v47), v63);
            float32x4_t v76 = vmlaq_f32(v50, vmlaq_n_f32(v1481, v70, v47), v69);
            float32x4_t v77 = vmlaq_f32(v50, vmlaq_n_f32(v1481, v72, v47), v73);
            int8x16_t v78 = (int8x16_t)vcgtzq_f32(v63);
            int8x16_t v79 = (int8x16_t)vcgtzq_f32(v69);
            int8x16_t v80 = (int8x16_t)vcgtzq_f32(v73);
            float32x4_t v81 = vmlaq_f32(v52, vmlaq_n_f32(v1492, v60, v48), v62);
            float32x4_t v82 = vmlaq_f32(v51, vmlaq_n_f32(v1501, v68, v49), v63);
            float32x4_t v83 = vmlaq_f32(v52, vmlaq_n_f32(v1492, v68, v48), v63);
            float32x4_t v84 = vmlaq_f32(v51, vmlaq_n_f32(v1501, v70, v49), v69);
            float32x4_t v85 = vmlaq_f32(v52, vmlaq_n_f32(v1492, v70, v48), v69);
            int8x16_t v86 = vandq_s8((int8x16_t)vcgezq_f32(v74), (int8x16_t)vcgtzq_f32(v62));
            float32x4_t v87 = vmlaq_f32(v51, vmlaq_n_f32(v1501, v72, v49), v73);
            float32x4_t v88 = vmlaq_f32(v52, vmlaq_n_f32(v1492, v72, v48), v73);
            int32x4_t v89 = vcvtmq_s32_f32(vmlaq_f32(v1416, vdivq_f32(v53, v74), vmlaq_f32(v51, vmlaq_n_f32(v1501, v60, v49), v62)));
            int32x4_t v90 = vcvtmq_s32_f32(vmlaq_f32(v1446, vdivq_f32(v1388, v74), v81));
            int32x4_t v91 = vcvtmq_s32_f32(vmlaq_f32(v1416, vdivq_f32(v53, v75), v82));
            int32x4_t v92 = vcvtmq_s32_f32(vmlaq_f32(v1446, vdivq_f32(v1388, v75), v83));
            int32x4_t v93 = vcvtmq_s32_f32(vmlaq_f32(v1416, vdivq_f32(v53, v76), v84));
            int32x4_t v94 = vcvtmq_s32_f32(vmlaq_f32(v1446, vdivq_f32(v1388, v76), v85));
            int32x4_t v95 = vcvtmq_s32_f32(vmlaq_f32(v1416, vdivq_f32(v53, v77), v87));
            int32x4_t v96 = vcvtmq_s32_f32(vmlaq_f32(v1446, vdivq_f32(v1388, v77), v88));
            v88.i64[0] = -1;
            v88.i64[1] = -1;
            int32x4_t v97 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1426, v90), (int8x16_t)vcgtq_s32(v1397, v89)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v90, (int8x16_t)v89), (int32x4_t)v88)), v86);
            int32x4_t v98 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1426, v92), (int8x16_t)vcgtq_s32(v1397, v91)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v92, (int8x16_t)v91), (int32x4_t)v88)), vandq_s8((int8x16_t)vcgezq_f32(v75), v78));
            int32x4_t v99 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1426, v94), (int8x16_t)vcgtq_s32(v1397, v93)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v94, (int8x16_t)v93), (int32x4_t)v88)), vandq_s8((int8x16_t)vcgezq_f32(v76), v79));
            *(int16x4_t *)v87.f32 = vmovn_s32(v97);
            int32x4_t v100 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1426, v96), (int8x16_t)vcgtq_s32(v1397, v95)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v96, (int8x16_t)v95), (int32x4_t)v88)), vandq_s8((int8x16_t)vcgezq_f32(v77), v80));
            *(int16x4_t *)v82.f32 = vmovn_s32(v98);
            *(int8x8_t *)v88.f32 = vorn_s8((int8x8_t)vmovn_s32(v89), *(int8x8_t *)v87.f32);
            int8x8_t v101 = vorn_s8((int8x8_t)vmovn_s32(v90), *(int8x8_t *)v87.f32);
            *(int16x4_t *)v81.f32 = vmovn_s32(v99);
            int8x8_t v102 = v58;
            vst2_s16(v102, (int16x4x2_t)v88);
            v102 += 8;
            v1516.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v91), *(int8x8_t *)v82.f32);
            v1516.val[1] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v92), *(int8x8_t *)v82.f32);
            float v47 = v1436;
            *(int8x8_t *)v88.f32 = vorn_s8((int8x8_t)vmovn_s32(v93), *(int8x8_t *)v81.f32);
            int8x8_t v103 = vorn_s8((int8x8_t)vmovn_s32(v94), *(int8x8_t *)v81.f32);
            *(int16x4_t *)v82.f32 = vmovn_s32(v100);
            int8x8_t v104 = v58 + 16;
            vst2_s16(v104, (int16x4x2_t)v88);
            *(int8x8_t *)v88.f32 = vorn_s8((int8x8_t)vmovn_s32(v95), *(int8x8_t *)v82.f32);
            int8x8_t v105 = vorn_s8((int8x8_t)vmovn_s32(v96), *(int8x8_t *)v82.f32);
            int8x8_t v106 = v58 + 24;
            vst2_s16(v106, (int16x4x2_t)v88);
            float v48 = v1379;
            float32x4_t v51 = v1406;
            v56.i64[0] = 0x4100000041000000;
            v56.i64[1] = 0x4100000041000000;
            vst2_s16(v102, v1516);
            float32x4_t v50 = v1473;
            int32x4_t v107 = vminq_s32(vmaxq_s32(vmlaq_s32(v89, v90, v1456), (int32x4_t)0), v1465);
            int32x4_t v108 = vminq_s32(vmaxq_s32(vmlaq_s32(v91, v92, v1456), (int32x4_t)0), v1465);
            int8x16_t v109 = vandq_s8((int8x16_t)vdivq_f32(v61, v74), (int8x16_t)v97);
            v30[v107.u32[0]] = fmaxf(*(float *)v109.i32, v30[v107.u32[0]]);
            int8x16_t v110 = vandq_s8((int8x16_t)vdivq_f32(v61, v75), (int8x16_t)v98);
            int32x4_t v111 = vminq_s32(vmaxq_s32(vmlaq_s32(v93, v94, v1456), (int32x4_t)0), v1465);
            v30[v108.u32[1]] = fmaxf(*(float *)&v110.i32[1], v30[v108.u32[1]]);
            int8x16_t v112 = vandq_s8((int8x16_t)vdivq_f32(v61, v76), (int8x16_t)v99);
            int32x4_t v113 = vminq_s32(vmaxq_s32(vmlaq_s32(v95, v96, v1456), (int32x4_t)0), v1465);
            v30[v111.u32[2]] = fmaxf(*(float *)&v112.i32[2], v30[v111.u32[2]]);
            int8x16_t v114 = vandq_s8((int8x16_t)vdivq_f32(v61, v77), (int8x16_t)v100);
            v30[v113.u32[3]] = fmaxf(*(float *)&v114.i32[3], v30[v113.u32[3]]);
            v30[v107.u32[1]] = fmaxf(*(float *)&v109.i32[1], v30[v107.u32[1]]);
            v30[v108.u32[2]] = fmaxf(*(float *)&v110.i32[2], v30[v108.u32[2]]);
            v30[v111.u32[3]] = fmaxf(*(float *)&v112.i32[3], v30[v111.u32[3]]);
            v30[v113.u32[0]] = fmaxf(*(float *)v114.i32, v30[v113.u32[0]]);
            v30[v107.u32[2]] = fmaxf(*(float *)&v109.i32[2], v30[v107.u32[2]]);
            v30[v108.u32[3]] = fmaxf(*(float *)&v110.i32[3], v30[v108.u32[3]]);
            v30[v111.u32[0]] = fmaxf(*(float *)v112.i32, v30[v111.u32[0]]);
            v30[v113.u32[1]] = fmaxf(*(float *)&v114.i32[1], v30[v113.u32[1]]);
            v30[v107.u32[3]] = fmaxf(*(float *)&v109.i32[3], v30[v107.u32[3]]);
            v30[v108.u32[0]] = fmaxf(*(float *)v110.i32, v30[v108.u32[0]]);
            v30[v111.u32[1]] = fmaxf(*(float *)&v112.i32[1], v30[v111.u32[1]]);
            v30[v113.u32[2]] = fmaxf(*(float *)&v114.i32[2], v30[v113.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v60 = vaddq_f32(v60, _Q0);
            v57 += 4;
            v58 += 32;
            v59 += 16;
          }
          while (v59 < v44);
          unint64_t v59 = (((v22 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v34 = (float32x4_t)a14;
          float32x4_t v33 = (float32x4_t)a15;
          float32x4_t v36 = a12;
          float32x4_t v35 = a13;
          float32x2_t v38 = (float32x2_t)a18;
          float v37 = *(float *)&a11;
          float32x2_t v39 = v1331;
          float v41 = v1361;
          float v43 = v1352;
          float v45 = 0.5;
          float32x4_t v46 = v1370;
        }
        if (v59 < v22)
        {
          do
          {
            _H2 = v57->i16[0];
            __asm { FCVT            S2, H2 }
            float v118 = _S2 * 1000.0;
            int32x4_t v119 = (int32x4_t)vaddq_f32(v33, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v36, v41 * (float)((float)((float)((float)v59 + v45) - v37) * v118)), v35, v43 * (float)((float)((float)((float)v40 + v45) - *((float *)&a11 + 1)) * v118)), v34, v118));
            uint64_t v120 = 0xFFFF0000FFFFLL;
            if (*(float *)&v119.i32[2] >= 0.0 && v118 > 0.0)
            {
              int32x2_t v121 = vcvt_s32_f32(vmla_f32(v38, vdiv_f32(v39, (float32x2_t)vdup_laneq_s32(v119, 2)), *(float32x2_t *)v119.i8));
              if ((v121.i32[0] & 0x80000000) == 0
                && (__int16)v24 > v121.i32[0]
                && (v121.i32[1] & 0x80000000) == 0
                && (__int16)v23 > (int)v121.u16[2])
              {
                float v122 = 1000.0 / *(float *)&v119.i32[2];
                float v123 = &v30[(v25 >> 2) * v121.u16[2]];
                float v124 = v123[v121.u32[0]];
                if (v124 == 0.0 || v124 < v122) {
                  v123[v121.u32[0]] = v122;
                }
                uint64_t v120 = (uint64_t)v121;
              }
            }
            __int16 *v58 = v120;
            v58[1] = WORD2(v120);
            ++v59;
            float32x4_t v57 = (float16x4_t *)((char *)v57 + 2);
            v58 += 2;
          }
          while (v22 != v59);
        }
        ++v40;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v46 = vaddq_f32(v46, _Q0);
      }
      while (v40 != v21);
    }
LABEL_321:
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    float v1116 = v1318;
LABEL_390:
    CVPixelBufferUnlockBaseAddress(v1116, 0);
    return 0;
  }
LABEL_322:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_393:
    float32x4_t v1254 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
    PixelBufferUtils::pixelFormatAsString(v1254, (char *)&v1512);
    if ((v1512.width & 0x8000000000000000) == 0) {
      float32x4_t v1255 = &v1512;
    }
    else {
      float32x4_t v1255 = (vImage_Buffer *)v1512.data;
    }
    LODWORD(buf.data) = 136315138;
    *(void **)((char *)&buf.data + 4) = v1255;
    _os_log_error_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_ERROR, "illegal output pixel format in reprojection: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(v1512.width) < 0) {
      operator delete(v1512.data);
    }
  }
  return -22950;
}

uint64_t reprojectUndistortedDepthMapWithInputImmediates<float,1717856627u>(__CVBuffer *a1, __CVBuffer *a2, CVPixelBufferRef pixelBuffer, int a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, int32x4_t a14, int32x4_t a15, long long a16, long long a17, long long a18)
{
  __int32 v1476 = SHIDWORD(a10);
  uint64_t v1500 = *MEMORY[0x263EF8340];
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  float32x4_t v1302 = a2;
  if (!a2)
  {
    if (PixelFormatType <= 1717855599)
    {
      if (PixelFormatType == 825437747)
      {
        size_t Height = CVPixelBufferGetHeight(a1);
        size_t Width = CVPixelBufferGetWidth(a1);
        size_t v1103 = CVPixelBufferGetHeight(pixelBuffer);
        unsigned int v1104 = CVPixelBufferGetWidth(pixelBuffer);
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
        CVPixelBufferLockBaseAddress(a1, 1uLL);
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        memset(&v1498, 0, sizeof(v1498));
        long long v1106 = (CGRect *)MEMORY[0x263F001A8];
        PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
        memset(&buf, 0, sizeof(buf));
        PixelBufferUtils::asVImageBuffer(pixelBuffer, *v1106, &buf);
        size_t v1110 = BytesPerRow >> 1;
        data = (__int16 *)buf.data;
        if (v1110 * v1103) {
          memset_pattern16(buf.data, &unk_247F24690, 2 * v1110 * v1103);
        }
        vImagePixelCount v1244 = buf.height;
        float32x4_t v1113 = (float32x4_t)a14;
        float32x4_t v1112 = (float32x4_t)a15;
        float32x4_t v1115 = a12;
        float32x4_t v1114 = a13;
        float v1117 = *(float *)&a18;
        float v1116 = *(float *)&a11;
        float v1118 = *(float *)&a16;
        if (Height)
        {
          unint64_t v1119 = 0;
          float v1120 = 1.0 / *(float *)&a9;
          float v1121 = 1.0 / *(float *)&v1476;
          unint64_t v1122 = Width & 0xFFFFFFFFFFFFFFF0;
          float v1123 = 0.5;
          *(float *)v1107.i32 = 0.5 - *((float *)&a11 + 1);
          float32x4_t v1124 = (float32x4_t)vdupq_lane_s32(v1107, 0);
          *(float *)v1107.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
          *(float *)v1108.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
          *(float *)v1109.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
          float v1125 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
          float v1126 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
          float32x4_t v1261 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
          float32x4_t v1263 = (float32x4_t)vdupq_lane_s32(v1109, 0);
          float v1127 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
          float32x4_t v1258 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
          float32x4_t v1259 = (float32x4_t)vdupq_lane_s32(v1108, 0);
          float32x4_t v1301 = (char *)v1498.data;
          size_t rowBytes = v1498.rowBytes;
          float32x4_t v1255 = (float32x4_t)vdupq_laneq_s32(a14, 2);
          float32x4_t v1256 = (float32x4_t)vdupq_lane_s32(v1107, 0);
          float32x4_t v1253 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
          float32x4_t v1128 = (float32x4_t)vdupq_laneq_s32(a15, 2);
          int32x4_t v1129 = vdupq_n_s32(v1110);
          int32x4_t v1130 = vdupq_n_s32(LODWORD(buf.height) * (int)v1110 - 2);
          int v1131 = (__int16)v1104;
          int v1132 = (__int16)v1103;
          unint64_t v1247 = (((Width & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          size_t v1282 = Width;
          size_t v1272 = v1110;
          int v1251 = (__int16)v1104;
          int v1249 = (__int16)v1103;
          float32x4_t v1419 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
          float32x4_t v1430 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
          float32x4_t v1399 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
          int32x4_t v1409 = vdupq_n_s32(v1104);
          float32x4_t v1380 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
          float32x4_t v1389 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
          int32x4_t v1362 = vdupq_n_s32(v1103);
          float32x4_t v1371 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
          do
          {
            float v1133 = (float32x4_t *)&v1301[v1119 * rowBytes];
            if (v1122)
            {
              uint64_t v1134 = 0;
              float32x4_t v1441 = vmlaq_f32(v1261, v1263, v1124);
              float32x4_t v1135 = vmlaq_f32(v1258, v1259, v1124);
              float32x4_t v1326 = v1124;
              float32x4_t v1136 = vmlaq_f32(v1255, v1256, v1124);
              float32x4_t v1137 = v1253;
              v1138.i64[0] = 0x4100000041000000;
              v1138.i64[1] = 0x4100000041000000;
              do
              {
                uint64_t v1496 = v1134;
                float32x4_t v1139 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                float32x4_t v1140 = vdivq_f32(v1139, *v1133);
                float32x4_t v1141 = vdivq_f32(v1139, v1133[1]);
                __asm { FMOV            V0.4S, #4.0 }
                float32x4_t v1143 = vaddq_f32(v1137, _Q0);
                float32x4_t v1144 = vaddq_f32(v1137, v1138);
                float32x4_t v1145 = vdivq_f32(v1139, v1133[2]);
                __asm { FMOV            V0.4S, #12.0 }
                float32x4_t v1147 = vaddq_f32(v1137, _Q0);
                float32x4_t v1148 = vdivq_f32(v1139, v1133[3]);
                float32x4_t v1149 = vmlaq_f32(v1128, vmlaq_n_f32(v1136, v1137, v1125), v1140);
                float32x4_t v1150 = vmlaq_f32(v1128, vmlaq_n_f32(v1136, v1143, v1125), v1141);
                float32x4_t v1151 = vmlaq_f32(v1128, vmlaq_n_f32(v1136, v1144, v1125), v1145);
                float32x4_t v1152 = vmlaq_f32(v1128, vmlaq_n_f32(v1136, v1147, v1125), v1148);
                float32x4_t v1153 = vmlaq_f32(v1380, vmlaq_n_f32(v1441, v1137, v1127), v1140);
                float32x4_t v1154 = vmlaq_f32(v1371, vmlaq_n_f32(v1135, v1137, v1126), v1140);
                int8x16_t v1155 = vandq_s8((int8x16_t)vcgezq_f32(v1149), (int8x16_t)vcgtzq_f32(v1140));
                float32x4_t v1156 = vmlaq_f32(v1380, vmlaq_n_f32(v1441, v1147, v1127), v1148);
                int8x16_t v1157 = vandq_s8((int8x16_t)vcgezq_f32(v1152), (int8x16_t)vcgtzq_f32(v1148));
                int32x4_t v1158 = vcvtmq_s32_f32(vmlaq_f32(v1419, vdivq_f32(v1389, v1149), v1153));
                int32x4_t v1159 = vcvtmq_s32_f32(vmlaq_f32(v1399, vdivq_f32(v1430, v1149), v1154));
                int32x4_t v1160 = vcvtmq_s32_f32(vmlaq_f32(v1419, vdivq_f32(v1389, v1150), vmlaq_f32(v1380, vmlaq_n_f32(v1441, v1143, v1127), v1141)));
                int32x4_t v1161 = vcvtmq_s32_f32(vmlaq_f32(v1399, vdivq_f32(v1430, v1150), vmlaq_f32(v1371, vmlaq_n_f32(v1135, v1143, v1126), v1141)));
                float32x4_t v1162 = vmlaq_f32(v1399, vdivq_f32(v1430, v1152), vmlaq_f32(v1371, vmlaq_n_f32(v1135, v1147, v1126), v1148));
                v1163.i64[0] = -1;
                v1163.i64[1] = -1;
                int32x4_t v1164 = vcvtmq_s32_f32(vmlaq_f32(v1419, vdivq_f32(v1389, v1151), vmlaq_f32(v1380, vmlaq_n_f32(v1441, v1144, v1127), v1145)));
                int32x4_t v1165 = vcvtmq_s32_f32(vmlaq_f32(v1399, vdivq_f32(v1430, v1151), vmlaq_f32(v1371, vmlaq_n_f32(v1135, v1144, v1126), v1145)));
                int32x4_t v1166 = vcvtmq_s32_f32(vmlaq_f32(v1419, vdivq_f32(v1389, v1152), v1156));
                int32x4_t v1167 = vcvtmq_s32_f32(v1162);
                int8x16_t v1168 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1362, v1159), (int8x16_t)vcgtq_s32(v1409, v1158)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1159, (int8x16_t)v1158), v1163)), v1155);
                v1138.i64[0] = 0x4100000041000000;
                v1138.i64[1] = 0x4100000041000000;
                int8x16_t v1169 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1362, v1167), (int8x16_t)vcgtq_s32(v1409, v1166)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1167, (int8x16_t)v1166), v1163)), v1157);
                int8x16_t v1170 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
                float32x4_t v1171 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1362, v1165), (int8x16_t)vcgtq_s32(v1409, v1164)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1165, (int8x16_t)v1164), v1163)), vandq_s8((int8x16_t)vcgezq_f32(v1151), (int8x16_t)vcgtzq_f32(v1145))), (int8x16_t)vmulq_f32(v1151, v1138), v1170);
                int32x4_t v1172 = vmlaq_s32(v1164, v1165, v1129);
                int32x4_t v1173 = vminq_s32(vmaxq_s32(vmlaq_s32(v1158, v1159, v1129), (int32x4_t)0), v1130);
                int32x4_t v1174 = vcvtq_s32_f32((float32x4_t)vbslq_s8(v1168, (int8x16_t)vmulq_f32(v1149, v1138), v1170));
                int32x4_t v1175 = vminq_s32(vmaxq_s32(vmlaq_s32(v1166, v1167, v1129), (int32x4_t)0), v1130);
                unsigned __int32 v1176 = v1175.u32[3];
                unsigned __int32 v1177 = v1175.u32[1];
                unsigned __int32 v1178 = v1175.u32[2];
                unsigned __int32 v1179 = v1175.i32[0];
                int32x4_t v1180 = vcvtq_s32_f32((float32x4_t)vbslq_s8(v1169, (int8x16_t)vmulq_f32(v1152, v1138), v1170));
                __int32 v1181 = v1180.i32[3];
                __int32 v1182 = v1180.i32[1];
                __int32 v1183 = v1180.i32[2];
                __int32 v1184 = v1180.i32[0];
                int32x4_t v1185 = vminq_s32(vmaxq_s32(v1172, (int32x4_t)0), v1130);
                int32x4_t v1186 = vcvtq_s32_f32(v1171);
                __int32 v1187 = v1186.i32[2];
                __int32 v1188 = v1186.i32[3];
                __int32 v1189 = v1186.i32[1];
                __int32 v1190 = v1186.i32[0];
                int32x4_t v1191 = vminq_s32(vmaxq_s32(vmlaq_s32(v1160, v1161, v1129), (int32x4_t)0), v1130);
                unsigned __int32 v1192 = v1191.u32[1];
                unsigned __int32 v1193 = v1191.u32[2];
                unsigned __int32 v1194 = v1191.u32[3];
                unsigned __int32 v1195 = v1191.i32[0];
                int32x4_t v1196 = vcvtq_s32_f32((float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1362, v1161), (int8x16_t)vcgtq_s32(v1409, v1160)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1161, (int8x16_t)v1160), v1163)), vandq_s8((int8x16_t)vcgezq_f32(v1150), (int8x16_t)vcgtzq_f32(v1141))), (int8x16_t)vmulq_f32(v1150, v1138), v1170));
                int v1197 = data[v1173.u32[0]];
                if (v1174.i32[0] < v1197) {
                  LOWORD(v1197) = v1174.i16[0];
                }
                data[v1173.u32[0]] = v1197;
                __int32 v1198 = v1196.i32[1];
                __int32 v1199 = v1196.i32[2];
                __int32 v1200 = v1196.i32[3];
                __int32 v1201 = v1196.i32[0];
                __asm { FMOV            V0.4S, #16.0 }
                float32x4_t v1137 = vaddq_f32(v1137, _Q0);
                if (v1198 >= data[v1192]) {
                  LOWORD(v1198) = data[v1192];
                }
                data[v1192] = v1198;
                __int32 v1203 = data[v1185.u32[2]];
                if (v1187 < v1203) {
                  LOWORD(v1203) = v1187;
                }
                data[v1185.u32[2]] = v1203;
                if (v1181 >= data[v1176]) {
                  LOWORD(v1181) = data[v1176];
                }
                data[v1176] = v1181;
                int v1204 = data[v1173.u32[1]];
                if (v1174.i32[1] < v1204) {
                  LOWORD(v1204) = v1174.i16[2];
                }
                data[v1173.u32[1]] = v1204;
                __int32 v1205 = data[v1193];
                if (v1199 < v1205) {
                  LOWORD(v1205) = v1199;
                }
                data[v1193] = v1205;
                __int32 v1206 = data[v1185.u32[3]];
                if (v1188 < v1206) {
                  LOWORD(v1206) = v1188;
                }
                data[v1185.u32[3]] = v1206;
                __int32 v1207 = data[v1179];
                if (v1184 < v1207) {
                  LOWORD(v1207) = v1184;
                }
                data[v1179] = v1207;
                int v1208 = data[v1173.u32[2]];
                if (v1174.i32[2] < v1208) {
                  LOWORD(v1208) = v1174.i16[4];
                }
                data[v1173.u32[2]] = v1208;
                __int32 v1209 = data[v1194];
                if (v1200 < v1209) {
                  LOWORD(v1209) = v1200;
                }
                data[v1194] = v1209;
                __int32 v1210 = data[v1185.u32[0]];
                if (v1190 < v1210) {
                  LOWORD(v1210) = v1190;
                }
                data[v1185.u32[0]] = v1210;
                __int32 v1211 = data[v1177];
                if (v1182 < v1211) {
                  LOWORD(v1211) = v1182;
                }
                data[v1177] = v1211;
                int v1212 = data[v1173.u32[3]];
                if (v1174.i32[3] < v1212) {
                  LOWORD(v1212) = v1174.i16[6];
                }
                data[v1173.u32[3]] = v1212;
                __int32 v1213 = data[v1195];
                if (v1201 < v1213) {
                  LOWORD(v1213) = v1201;
                }
                data[v1195] = v1213;
                __int32 v1214 = data[v1185.u32[1]];
                if (v1189 < v1214) {
                  LOWORD(v1214) = v1189;
                }
                data[v1185.u32[1]] = v1214;
                __int32 v1215 = data[v1178];
                if (v1183 < v1215) {
                  LOWORD(v1215) = v1183;
                }
                data[v1178] = v1215;
                v1133 += 4;
                uint64_t v1134 = v1496 + 16;
              }
              while (v1496 + 16 < v1122);
              unint64_t v1216 = v1247;
              float32x4_t v1113 = (float32x4_t)a14;
              float32x4_t v1112 = (float32x4_t)a15;
              float32x4_t v1115 = a12;
              float32x4_t v1114 = a13;
              float v1117 = *(float *)&a18;
              float v1116 = *(float *)&a11;
              float v1118 = *(float *)&a16;
              float32x4_t v1124 = v1326;
              size_t Width = v1282;
              size_t v1110 = v1272;
              float v1120 = 1.0 / *(float *)&a9;
              float v1121 = 1.0 / *(float *)&v1476;
              float v1123 = 0.5;
              int v1131 = v1251;
              int v1132 = v1249;
            }
            else
            {
              unint64_t v1216 = 0;
            }
            if (v1216 < Width)
            {
              do
              {
                float v1217 = 1000.0 / v1133->f32[0];
                _Q7 = vaddq_f32(v1112, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v1115, v1120 * (float)(v1217 * (float)((float)((float)v1216 + v1123) - v1116))), v1114, v1121 * (float)((float)((float)((float)v1119 + v1123) - *((float *)&a11 + 1)) * v1217)), v1113, v1217));
                if (_Q7.f32[2] >= 0.0 && v1217 > 0.0)
                {
                  uint64_t v1219 = (int)vmlas_n_f32(v1117, v1118 / _Q7.f32[2], _Q7.f32[0]);
                  if ((v1219 & 0x80000000) == 0 && v1131 > (int)v1219)
                  {
                    _S1 = *((float *)&a17 + 1) / _Q7.f32[2];
                    __asm { FMLA            S2, S1, V7.S[1] }
                    if (((int)_S2 & 0x80000000) == 0 && v1132 > (unsigned __int16)(int)_S2)
                    {
                      __int32 v1222 = &data[v1110 * (unsigned __int16)(int)_S2];
                      unsigned int v1223 = vcvts_n_s32_f32(_Q7.f32[2], 3uLL);
                      if (v1223 <= (unsigned __int16)(v1222[v1219] - 1)) {
                        v1222[v1219] = v1223;
                      }
                    }
                  }
                }
                ++v1216;
                float v1133 = (float32x4_t *)((char *)v1133 + 4);
              }
              while (Width != v1216);
            }
            ++v1119;
            __asm { FMOV            V0.4S, #1.0 }
            float32x4_t v1124 = vaddq_f32(v1124, _Q0);
          }
          while (v1119 != Height);
        }
        if (v1244)
        {
          uint64_t v1225 = 0;
          long long v1226 = *(_OWORD *)&buf.width;
          vImagePixelCount v1227 = buf.width >> 4;
          __int32 v1228 = (char *)buf.data;
          vImagePixelCount v1229 = buf.height;
          if (buf.width >> 4 <= 1) {
            vImagePixelCount v1227 = 1;
          }
          if (buf.height <= 1) {
            vImagePixelCount v1229 = 1;
          }
          unint64_t v1230 = buf.width & 0xFFFFFFF0;
          do
          {
            unint64_t v1231 = (int8x8_t *)&v1228[*((void *)&v1226 + 1) * v1225];
            vImagePixelCount v1232 = v1227;
            if ((unint64_t)v1226 >= 0x10)
            {
              do
              {
                int16x4_t v1233 = (int16x4_t)v1231[2];
                int16x4_t v1234 = (int16x4_t)v1231[3];
                int8x8_t v1235 = vbic_s8(v1231[1], (int8x8_t)vceq_s16((int16x4_t)v1231[1], (int16x4_t)0x8000800080008000));
                int8x8_t *v1231 = vbic_s8(*v1231, (int8x8_t)vceq_s16((int16x4_t)*v1231, (int16x4_t)0x8000800080008000));
                v1231[1] = v1235;
                v1231[2] = vbic_s8((int8x8_t)v1233, (int8x8_t)vceq_s16(v1233, (int16x4_t)0x8000800080008000));
                v1231[3] = vbic_s8((int8x8_t)v1234, (int8x8_t)vceq_s16(v1234, (int16x4_t)0x8000800080008000));
                v1231 += 4;
                --v1232;
              }
              while (v1232);
            }
            unint64_t v1236 = v1226 & 0xFFFFFFFF0000000FLL;
            if ((unint64_t)v1226 > v1230)
            {
              do
              {
                if (v1231->i16[0] == 0x7FFF) {
                  v1231->i16[0] = 0;
                }
                unint64_t v1231 = (int8x8_t *)((char *)v1231 + 2);
                --v1236;
              }
              while (v1236);
            }
            ++v1225;
          }
          while (v1225 != v1229);
        }
        goto LABEL_389;
      }
      if (PixelFormatType == 1278226534) {
        goto LABEL_184;
      }
      if (PixelFormatType != 1278226536) {
        goto LABEL_391;
      }
    }
    else
    {
      if (PixelFormatType <= 1751410031)
      {
        if (PixelFormatType != 1717855600)
        {
          if (PixelFormatType == 1717856627)
          {
            size_t v126 = CVPixelBufferGetHeight(a1);
            size_t v127 = CVPixelBufferGetWidth(a1);
            unsigned int v128 = CVPixelBufferGetHeight(pixelBuffer);
            unsigned int v129 = CVPixelBufferGetWidth(pixelBuffer);
            size_t v130 = CVPixelBufferGetBytesPerRow(pixelBuffer);
            CVPixelBufferLockBaseAddress(a1, 1uLL);
            CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            memset(&v1498, 0, sizeof(v1498));
            size_t v131 = (CGRect *)MEMORY[0x263F001A8];
            PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
            memset(&buf, 0, sizeof(buf));
            PixelBufferUtils::asVImageBuffer(pixelBuffer, *v131, &buf);
            int v133 = (float *)buf.data;
            int v132 = buf.height;
            bzero(buf.data, buf.height * buf.rowBytes);
            float32x4_t v138 = (float32x4_t)a14;
            float32x4_t v137 = (float32x4_t)a15;
            float32x4_t v140 = a12;
            float32x4_t v139 = a13;
            float v142 = *(float *)&a18;
            float v141 = *(float *)&a11;
            float v143 = *(float *)&a16;
            if (v126)
            {
              unint64_t v144 = 0;
              float v145 = 1.0 / *(float *)&a9;
              v146.i32[1] = v1476;
              float v147 = 1.0 / *(float *)&v1476;
              unint64_t v148 = v127 & 0xFFFFFFFFFFFFFFF0;
              float v149 = 0.5;
              *(float *)v134.i32 = 0.5 - *((float *)&a11 + 1);
              float32x4_t v150 = (float32x4_t)vdupq_lane_s32(v134, 0);
              *(float *)v134.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
              *(float *)v146.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
              *(float *)v135.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
              float v151 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
              *(float *)&long long v136 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
              *(float *)&long long v18 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
              float v152 = (char *)v1498.data;
              size_t v153 = v1498.rowBytes;
              float32x4_t v1328 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
              float32x4_t v1337 = (float32x4_t)vdupq_lane_s32(v135, 0);
              float32x4_t v1318 = (float32x4_t)vdupq_lane_s32(v146, 0);
              float32x4_t v1294 = (float32x4_t)vdupq_lane_s32(v134, 0);
              float32x4_t v1303 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
              float32x4_t v1284 = (float32x4_t)vdupq_laneq_s32(a14, 2);
              float32x4_t v154 = (float32x4_t)vdupq_laneq_s32(a15, 2);
              float32x4_t v155 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
              float32x4_t v1274 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
              float v156 = *((float *)&a17 + 1);
              float v1355 = 1.0 / *(float *)&a9;
              float v1346 = 1.0 / *(float *)&v1476;
              float32x4_t v1452 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
              float32x4_t v1460 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
              float32x4_t v1433 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
              int32x4_t v1443 = vdupq_n_s32(v132 * (v130 >> 2) - 4);
              float32x4_t v1411 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
              float v1421 = v151;
              float32x4_t v1391 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
              int32x4_t v1401 = vdupq_n_s32(v130 >> 2);
              int32x4_t v1373 = vdupq_n_s32(v128);
              int32x4_t v1382 = vdupq_n_s32(v129);
              do
              {
                float v157 = (float32x4_t *)&v152[v144 * v153];
                unint64_t v158 = 0;
                if (v148)
                {
                  float32x4_t v1479 = vmlaq_f32(v1328, v1337, v150);
                  float32x4_t v1468 = vmlaq_f32(v1303, v1318, v150);
                  float32x4_t v1364 = v150;
                  float32x4_t v1488 = vmlaq_f32(v1284, v1294, v150);
                  float32x4_t v159 = v1274;
                  do
                  {
                    float32x4_t v160 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                    float32x4_t v161 = vdivq_f32(v160, *v157);
                    float32x4_t v162 = vdivq_f32(v160, v157[1]);
                    __asm { FMOV            V1.4S, #4.0 }
                    float32x4_t v164 = vaddq_f32(v159, _Q1);
                    float32x4_t v165 = vdivq_f32(v160, v157[2]);
                    _Q1.i64[0] = 0x4100000041000000;
                    _Q1.i64[1] = 0x4100000041000000;
                    float32x4_t v166 = vaddq_f32(v159, _Q1);
                    __asm { FMOV            V1.4S, #12.0 }
                    float32x4_t v168 = vaddq_f32(v159, _Q1);
                    float32x4_t v169 = vdivq_f32(v160, v157[3]);
                    float32x4_t v170 = vmlaq_f32(v154, vmlaq_n_f32(v1488, v159, v151), v161);
                    float32x4_t v171 = vmlaq_f32(v154, vmlaq_n_f32(v1488, v164, v151), v162);
                    float32x4_t v172 = vmlaq_f32(v154, vmlaq_n_f32(v1488, v166, v151), v165);
                    float32x4_t v173 = vmlaq_f32(v154, vmlaq_n_f32(v1488, v168, v151), v169);
                    float32x4_t v174 = vmlaq_f32(v155, vmlaq_n_f32(v1479, v159, *(float *)&v18), v161);
                    float32x4_t v175 = vmlaq_f32(v1391, vmlaq_n_f32(v1468, v159, *(float *)&v136), v161);
                    float32x4_t v176 = v154;
                    float32x4_t v177 = vmlaq_f32(v155, vmlaq_n_f32(v1479, v164, *(float *)&v18), v162);
                    float32x4_t v178 = vmlaq_f32(v1391, vmlaq_n_f32(v1468, v164, *(float *)&v136), v162);
                    float32x4_t v179 = vmlaq_f32(v155, vmlaq_n_f32(v1479, v166, *(float *)&v18), v165);
                    int8x16_t v180 = vandq_s8((int8x16_t)vcgezq_f32(v170), (int8x16_t)vcgtzq_f32(v161));
                    float32x4_t v181 = vmlaq_f32(v1391, vmlaq_n_f32(v1468, v166, *(float *)&v136), v165);
                    int8x16_t v182 = vandq_s8((int8x16_t)vcgezq_f32(v171), (int8x16_t)vcgtzq_f32(v162));
                    float32x4_t v183 = vmlaq_f32(v155, vmlaq_n_f32(v1479, v168, *(float *)&v18), v169);
                    int8x16_t v184 = vandq_s8((int8x16_t)vcgezq_f32(v172), (int8x16_t)vcgtzq_f32(v165));
                    float32x4_t v185 = vmlaq_f32(v1391, vmlaq_n_f32(v1468, v168, *(float *)&v136), v169);
                    float32x4_t v186 = vmlaq_f32(v1452, vdivq_f32(v1411, v170), v174);
                    float32x4_t v187 = vmlaq_f32(v1460, vdivq_f32(v1433, v170), v175);
                    float32x4_t v188 = vmlaq_f32(v1452, vdivq_f32(v1411, v171), v177);
                    float32x4_t v189 = vdivq_f32(v1411, v172);
                    float32x4_t v190 = vmlaq_f32(v1460, vdivq_f32(v1433, v171), v178);
                    float32x4_t v191 = vdivq_f32(v1433, v172);
                    float32x4_t v192 = v155;
                    long long v193 = v18;
                    long long v194 = v136;
                    float32x4_t v195 = vdivq_f32(v1411, v173);
                    int8x16_t v196 = (int8x16_t)vdivq_f32(v160, v170);
                    int8x16_t v197 = (int8x16_t)vdivq_f32(v160, v171);
                    int8x16_t v198 = (int8x16_t)vdivq_f32(v160, v172);
                    int8x16_t v199 = (int8x16_t)vdivq_f32(v160, v173);
                    float32x4_t v200 = vdivq_f32(v1433, v173);
                    int8x16_t v201 = vandq_s8((int8x16_t)vcgezq_f32(v173), (int8x16_t)vcgtzq_f32(v169));
                    int32x4_t v202 = vcvtmq_s32_f32(v186);
                    int32x4_t v203 = vcvtmq_s32_f32(v187);
                    int32x4_t v204 = vcvtmq_s32_f32(v188);
                    int32x4_t v205 = vcvtmq_s32_f32(v190);
                    int32x4_t v206 = vcvtmq_s32_f32(vmlaq_f32(v1452, v189, v179));
                    float32x4_t v207 = vmlaq_f32(v1452, v195, v183);
                    long long v136 = v194;
                    long long v18 = v193;
                    float32x4_t v155 = v192;
                    int32x4_t v208 = vcvtmq_s32_f32(vmlaq_f32(v1460, v191, v181));
                    int32x4_t v209 = vcvtmq_s32_f32(v207);
                    int32x4_t v210 = vcvtmq_s32_f32(vmlaq_f32(v1460, v200, v185));
                    v211.i64[0] = -1;
                    v211.i64[1] = -1;
                    int8x16_t v212 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1373, v203), (int8x16_t)vcgtq_s32(v1382, v202)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v203, (int8x16_t)v202), v211));
                    int8x16_t v213 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1373, v205), (int8x16_t)vcgtq_s32(v1382, v204)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v205, (int8x16_t)v204), v211));
                    int8x16_t v214 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1373, v208), (int8x16_t)vcgtq_s32(v1382, v206)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v208, (int8x16_t)v206), v211));
                    int8x16_t v215 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1373, v210), (int8x16_t)vcgtq_s32(v1382, v209)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v210, (int8x16_t)v209), v211));
                    float32x4_t v154 = v176;
                    float v151 = v1421;
                    int32x4_t v216 = vminq_s32(vmaxq_s32(vmlaq_s32(v202, v203, v1401), (int32x4_t)0), v1443);
                    unsigned __int32 v217 = v216.u32[1];
                    unsigned __int32 v218 = v216.u32[2];
                    unsigned __int32 v219 = v216.u32[3];
                    int32x4_t v220 = vminq_s32(vmaxq_s32(vmlaq_s32(v204, v205, v1401), (int32x4_t)0), v1443);
                    int8x16_t v221 = vandq_s8(vandq_s8(v196, v180), v212);
                    v133[v216.u32[0]] = fmaxf(*(float *)v221.i32, v133[v216.u32[0]]);
                    int8x16_t v222 = vandq_s8(vandq_s8(v197, v182), v213);
                    int32x4_t v223 = vminq_s32(vmaxq_s32(vmlaq_s32(v206, v208, v1401), (int32x4_t)0), v1443);
                    v133[v220.u32[1]] = fmaxf(*(float *)&v222.i32[1], v133[v220.u32[1]]);
                    int8x16_t v224 = vandq_s8(vandq_s8(v198, v184), v214);
                    int32x4_t v225 = vminq_s32(vmaxq_s32(vmlaq_s32(v209, v210, v1401), (int32x4_t)0), v1443);
                    v133[v223.u32[2]] = fmaxf(*(float *)&v224.i32[2], v133[v223.u32[2]]);
                    int8x16_t v226 = vandq_s8(vandq_s8(v199, v201), v215);
                    v133[v225.u32[3]] = fmaxf(*(float *)&v226.i32[3], v133[v225.u32[3]]);
                    v133[v217] = fmaxf(*(float *)&v221.i32[1], v133[v217]);
                    v133[v220.u32[2]] = fmaxf(*(float *)&v222.i32[2], v133[v220.u32[2]]);
                    v133[v223.u32[3]] = fmaxf(*(float *)&v224.i32[3], v133[v223.u32[3]]);
                    v133[v225.u32[0]] = fmaxf(*(float *)v226.i32, v133[v225.u32[0]]);
                    v133[v218] = fmaxf(*(float *)&v221.i32[2], v133[v218]);
                    v133[v220.u32[3]] = fmaxf(*(float *)&v222.i32[3], v133[v220.u32[3]]);
                    v133[v223.u32[0]] = fmaxf(*(float *)v224.i32, v133[v223.u32[0]]);
                    v133[v225.u32[1]] = fmaxf(*(float *)&v226.i32[1], v133[v225.u32[1]]);
                    v133[v219] = fmaxf(*(float *)&v221.i32[3], v133[v219]);
                    v133[v220.u32[0]] = fmaxf(*(float *)v222.i32, v133[v220.u32[0]]);
                    v133[v223.u32[1]] = fmaxf(*(float *)&v224.i32[1], v133[v223.u32[1]]);
                    v133[v225.u32[2]] = fmaxf(*(float *)&v226.i32[2], v133[v225.u32[2]]);
                    __asm { FMOV            V0.4S, #16.0 }
                    float32x4_t v159 = vaddq_f32(v159, _Q0);
                    v157 += 4;
                    v158 += 16;
                  }
                  while (v158 < v148);
                  unint64_t v158 = (((v127 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
                  float32x4_t v138 = (float32x4_t)a14;
                  float32x4_t v137 = (float32x4_t)a15;
                  float32x4_t v140 = a12;
                  float32x4_t v139 = a13;
                  float v142 = *(float *)&a18;
                  float v141 = *(float *)&a11;
                  float v143 = *(float *)&a16;
                  float v145 = v1355;
                  float v147 = v1346;
                  float v149 = 0.5;
                  float32x4_t v150 = v1364;
                  float v156 = *((float *)&a17 + 1);
                }
                if (v158 < v127)
                {
                  do
                  {
                    float v228 = 1000.0 / v157->f32[0];
                    _Q2 = vaddq_f32(v137, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v140, v145 * (float)(v228 * (float)((float)((float)v158 + v149) - v141))), v139, v147 * (float)((float)((float)((float)v144 + v149) - *((float *)&a11 + 1)) * v228)), v138, v228));
                    if (_Q2.f32[2] >= 0.0 && v228 > 0.0)
                    {
                      uint64_t v230 = (int)vmlas_n_f32(v142, v143 / _Q2.f32[2], _Q2.f32[0]);
                      if ((v230 & 0x80000000) == 0 && (__int16)v129 > (int)v230)
                      {
                        _S3 = v156 / _Q2.f32[2];
                        __asm { FMLA            S4, S3, V2.S[1] }
                        if (((int)_S4 & 0x80000000) == 0 && (__int16)v128 > (int)(unsigned __int16)(int)_S4)
                        {
                          float v233 = 1000.0 / _Q2.f32[2];
                          v234 = &v133[(v130 >> 2) * (unsigned __int16)(int)_S4];
                          float v235 = v234[v230];
                          if (v235 == 0.0 || v235 < v233) {
                            v234[v230] = v233;
                          }
                        }
                      }
                    }
                    ++v158;
                    float v157 = (float32x4_t *)((char *)v157 + 4);
                  }
                  while (v127 != v158);
                }
                ++v144;
                __asm { FMOV            V0.4S, #1.0 }
                float32x4_t v150 = vaddq_f32(v150, _Q0);
              }
              while (v144 != v126);
            }
LABEL_389:
            CVPixelBufferUnlockBaseAddress(a1, 1uLL);
            int32x2_t v1101 = pixelBuffer;
            goto LABEL_390;
          }
LABEL_391:
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            goto LABEL_393;
          }
          return -22950;
        }
LABEL_184:
        size_t v708 = CVPixelBufferGetHeight(a1);
        size_t v709 = CVPixelBufferGetWidth(a1);
        size_t v710 = CVPixelBufferGetHeight(pixelBuffer);
        unsigned int v711 = CVPixelBufferGetWidth(pixelBuffer);
        size_t v712 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        CVPixelBufferLockBaseAddress(a1, 1uLL);
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        memset(&v1498, 0, sizeof(v1498));
        v713 = (CGRect *)MEMORY[0x263F001A8];
        PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
        memset(&buf, 0, sizeof(buf));
        PixelBufferUtils::asVImageBuffer(pixelBuffer, *v713, &buf);
        size_t v715 = v712 >> 2;
        v716 = (float *)buf.data;
        if (v715 * v710) {
          memset_pattern16(buf.data, &unk_247F24670, 4 * v715 * v710);
        }
        vImagePixelCount v717 = buf.height;
        float32x4_t v719 = (float32x4_t)a14;
        float32x4_t v718 = (float32x4_t)a15;
        float32x4_t v721 = a12;
        float32x4_t v720 = a13;
        float v723 = *(float *)&a18;
        float v722 = *(float *)&a11;
        float v724 = *(float *)&a16;
        if (v708)
        {
          unint64_t v725 = 0;
          v726.i32[1] = v1476;
          v727.i32[1] = HIDWORD(a9);
          float v728 = 1.0 / *(float *)&a9;
          float v729 = 1.0 / *(float *)&v1476;
          unint64_t v730 = v709 & 0xFFFFFFFFFFFFFFF0;
          float v731 = 0.5;
          *(float *)v714.i32 = 0.5 - *((float *)&a11 + 1);
          float32x4_t v732 = (float32x4_t)vdupq_lane_s32(v714, 0);
          *(float *)v714.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
          *(float *)v726.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
          *(float *)v727.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
          float v733 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
          float v734 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
          float32x4_t v1333 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
          float32x4_t v1342 = (float32x4_t)vdupq_lane_s32(v727, 0);
          float32x4_t v1323 = (float32x4_t)vdupq_lane_s32(v726, 0);
          float v735 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
          float32x4_t v1299 = (float32x4_t)vdupq_lane_s32(v714, 0);
          float32x4_t v1305 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
          float32x4_t v1289 = (float32x4_t)vdupq_laneq_s32(a14, 2);
          int32x2_t v736 = (char *)v1498.data;
          size_t v737 = v1498.rowBytes;
          float32x4_t v1279 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
          float32x4_t v738 = (float32x4_t)vdupq_laneq_s32(a15, 2);
          float32x4_t v739 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
          float32x4_t v740 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
          int32x4_t v741 = vdupq_n_s32(v715);
          int32x4_t v1378 = vdupq_n_s32(LODWORD(buf.height) * (int)v715 - 4);
          float32x4_t v742 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
          float32x4_t v743 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
          float v744 = *((float *)&a17 + 1);
          float v1360 = 1.0 / *(float *)&a9;
          float v1351 = 1.0 / *(float *)&v1476;
          int32x4_t v1406 = vdupq_n_s32(v710);
          int32x4_t v1416 = vdupq_n_s32(v711);
          float32x4_t v1387 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
          float32x4_t v1396 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
          do
          {
            float v745 = (float32x4_t *)&v736[v725 * v737];
            unint64_t v746 = 0;
            if (v730)
            {
              float32x4_t v1448 = vmlaq_f32(v1333, v1342, v732);
              float32x4_t v1438 = vmlaq_f32(v1305, v1323, v732);
              float32x4_t v1368 = v732;
              float32x4_t v1427 = vmlaq_f32(v1289, v1299, v732);
              float32x4_t v747 = v1279;
              do
              {
                float32x4_t v748 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                float32x4_t v749 = vdivq_f32(v748, *v745);
                float32x4_t v750 = vdivq_f32(v748, v745[1]);
                float32x4_t v751 = vdivq_f32(v748, v745[2]);
                __asm { FMOV            V0.4S, #4.0 }
                float32x4_t v753 = vaddq_f32(v747, _Q0);
                _Q0.i64[0] = 0x4100000041000000;
                _Q0.i64[1] = 0x4100000041000000;
                float32x4_t v754 = vaddq_f32(v747, _Q0);
                __asm { FMOV            V0.4S, #12.0 }
                float32x4_t v756 = vaddq_f32(v747, _Q0);
                float32x4_t v757 = vdivq_f32(v748, v745[3]);
                float32x4_t v758 = v738;
                float32x4_t v759 = vmlaq_f32(v738, vmlaq_n_f32(v1427, v747, v733), v749);
                float32x4_t v760 = vmlaq_f32(v738, vmlaq_n_f32(v1427, v753, v733), v750);
                float32x4_t v761 = vmlaq_f32(v738, vmlaq_n_f32(v1427, v754, v733), v751);
                float32x4_t v762 = vmlaq_f32(v738, vmlaq_n_f32(v1427, v756, v733), v757);
                int8x16_t v763 = vandq_s8((int8x16_t)vcgezq_f32(v759), (int8x16_t)vcgtzq_f32(v749));
                int8x16_t v1465 = vandq_s8((int8x16_t)vcgezq_f32(v760), (int8x16_t)vcgtzq_f32(v750));
                float32x4_t v764 = vmlaq_f32(v739, vmlaq_n_f32(v1448, v753, v735), v750);
                float32x4_t v765 = vmlaq_f32(v740, vmlaq_n_f32(v1438, v753, v734), v750);
                int8x16_t v1457 = vandq_s8((int8x16_t)vcgezq_f32(v761), (int8x16_t)vcgtzq_f32(v751));
                float32x4_t v766 = vmlaq_f32(v739, vmlaq_n_f32(v1448, v754, v735), v751);
                float32x4_t v767 = vmlaq_f32(v740, vmlaq_n_f32(v1438, v754, v734), v751);
                int8x16_t v768 = vandq_s8((int8x16_t)vcgezq_f32(v762), (int8x16_t)vcgtzq_f32(v757));
                float32x4_t v769 = vmlaq_f32(v739, vmlaq_n_f32(v1448, v756, v735), v757);
                float32x4_t v770 = vmlaq_n_f32(v1438, v756, v734);
                float32x4_t v771 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
                int8x16_t v772 = (int8x16_t)vmulq_f32(v759, v771);
                int8x16_t v1473 = (int8x16_t)vmulq_f32(v760, v771);
                int8x16_t v1484 = (int8x16_t)vmulq_f32(v761, v771);
                int8x16_t v1493 = (int8x16_t)vmulq_f32(v762, v771);
                int32x4_t v773 = vcvtmq_s32_f32(vmlaq_f32(v1396, vdivq_f32(v742, v759), vmlaq_f32(v739, vmlaq_n_f32(v1448, v747, v735), v749)));
                int32x4_t v774 = vcvtmq_s32_f32(vmlaq_f32(v1387, vdivq_f32(v743, v759), vmlaq_f32(v740, vmlaq_n_f32(v1438, v747, v734), v749)));
                int32x4_t v775 = vcvtmq_s32_f32(vmlaq_f32(v1396, vdivq_f32(v742, v760), v764));
                int32x4_t v776 = vcvtmq_s32_f32(vmlaq_f32(v1387, vdivq_f32(v743, v760), v765));
                float32x4_t v777 = vmlaq_f32(v1396, vdivq_f32(v742, v762), v769);
                float32x4_t v778 = vmlaq_f32(v1387, vdivq_f32(v743, v762), vmlaq_f32(v740, v770, v757));
                v770.i64[0] = -1;
                v770.i64[1] = -1;
                int32x4_t v779 = vcvtmq_s32_f32(vmlaq_f32(v1396, vdivq_f32(v742, v761), v766));
                int32x4_t v780 = vcvtmq_s32_f32(vmlaq_f32(v1387, vdivq_f32(v743, v761), v767));
                int32x4_t v781 = vcvtmq_s32_f32(v777);
                int32x4_t v782 = vcvtmq_s32_f32(v778);
                int8x16_t v783 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1406, v776), (int8x16_t)vcgtq_s32(v1416, v775)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v776, (int8x16_t)v775), (int32x4_t)v770)), v1465);
                int8x16_t v784 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1406, v780), (int8x16_t)vcgtq_s32(v1416, v779)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v780, (int8x16_t)v779), (int32x4_t)v770)), v1457);
                int32x4_t v785 = vmlaq_s32(v775, v776, v741);
                int8x16_t v786 = (int8x16_t)vdupq_n_s32(0x7F7FFFFFu);
                int8x16_t v787 = vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1406, v774), (int8x16_t)vcgtq_s32(v1416, v773)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v774, (int8x16_t)v773), (int32x4_t)v770)), v763), v772, v786);
                int32x4_t v788 = vmaxq_s32(vmlaq_s32(v773, v774, v741), (int32x4_t)0);
                float32x4_t v738 = v758;
                int32x4_t v789 = vminq_s32(v788, v1378);
                unsigned __int32 v790 = v789.u32[1];
                unsigned __int32 v791 = v789.u32[2];
                unsigned __int32 v792 = v789.u32[3];
                v716[v789.u32[0]] = fminf(*(float *)v787.i32, v716[v789.u32[0]]);
                int32x4_t v793 = vminq_s32(vmaxq_s32(v785, (int32x4_t)0), v1378);
                int32x4_t v794 = vminq_s32(vmaxq_s32(vmlaq_s32(v779, v780, v741), (int32x4_t)0), v1378);
                int8x16_t v795 = vbslq_s8(v783, v1473, v786);
                int8x16_t v796 = vbslq_s8(v784, v1484, v786);
                v716[v793.u32[1]] = fminf(*(float *)&v795.i32[1], v716[v793.u32[1]]);
                v716[v794.u32[2]] = fminf(*(float *)&v796.i32[2], v716[v794.u32[2]]);
                int32x4_t v797 = vminq_s32(vmaxq_s32(vmlaq_s32(v781, v782, v741), (int32x4_t)0), v1378);
                int8x16_t v798 = vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1406, v782), (int8x16_t)vcgtq_s32(v1416, v781)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v782, (int8x16_t)v781), (int32x4_t)v770)), v768), v1493, v786);
                v716[v797.u32[3]] = fminf(*(float *)&v798.i32[3], v716[v797.u32[3]]);
                v716[v790] = fminf(*(float *)&v787.i32[1], v716[v790]);
                v716[v793.u32[2]] = fminf(*(float *)&v795.i32[2], v716[v793.u32[2]]);
                v716[v794.u32[3]] = fminf(*(float *)&v796.i32[3], v716[v794.u32[3]]);
                v716[v797.u32[0]] = fminf(*(float *)v798.i32, v716[v797.u32[0]]);
                v716[v791] = fminf(*(float *)&v787.i32[2], v716[v791]);
                v716[v793.u32[3]] = fminf(*(float *)&v795.i32[3], v716[v793.u32[3]]);
                v716[v794.u32[0]] = fminf(*(float *)v796.i32, v716[v794.u32[0]]);
                v716[v797.u32[1]] = fminf(*(float *)&v798.i32[1], v716[v797.u32[1]]);
                v716[v792] = fminf(*(float *)&v787.i32[3], v716[v792]);
                v716[v793.u32[0]] = fminf(*(float *)v795.i32, v716[v793.u32[0]]);
                v716[v794.u32[1]] = fminf(*(float *)&v796.i32[1], v716[v794.u32[1]]);
                v716[v797.u32[2]] = fminf(*(float *)&v798.i32[2], v716[v797.u32[2]]);
                __asm { FMOV            V0.4S, #16.0 }
                float32x4_t v747 = vaddq_f32(v747, _Q0);
                v745 += 4;
                v746 += 16;
              }
              while (v746 < v730);
              unint64_t v746 = (((v709 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
              float32x4_t v719 = (float32x4_t)a14;
              float32x4_t v718 = (float32x4_t)a15;
              float32x4_t v721 = a12;
              float32x4_t v720 = a13;
              float v723 = *(float *)&a18;
              float v722 = *(float *)&a11;
              float v724 = *(float *)&a16;
              float v728 = v1360;
              float v729 = v1351;
              float v731 = 0.5;
              float32x4_t v732 = v1368;
              float v744 = *((float *)&a17 + 1);
            }
            if (v746 < v709)
            {
              do
              {
                float v800 = 1000.0 / v745->f32[0];
                _Q2 = vaddq_f32(v718, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v721, v728 * (float)(v800 * (float)((float)((float)v746 + v731) - v722))), v720, v729 * (float)((float)((float)((float)v725 + v731) - *((float *)&a11 + 1)) * v800)), v719, v800));
                if (_Q2.f32[2] >= 0.0 && v800 > 0.0)
                {
                  uint64_t v802 = (int)vmlas_n_f32(v723, v724 / _Q2.f32[2], _Q2.f32[0]);
                  if ((v802 & 0x80000000) == 0 && (__int16)v711 > (int)v802)
                  {
                    _S3 = v744 / _Q2.f32[2];
                    __asm { FMLA            S4, S3, V2.S[1] }
                    if (((int)_S4 & 0x80000000) == 0 && (__int16)v710 > (int)(unsigned __int16)(int)_S4)
                    {
                      float v805 = _Q2.f32[2] * 0.001;
                      int8x16_t v806 = &v716[v715 * (unsigned __int16)(int)_S4];
                      float v807 = v806[v802];
                      if (v807 == 0.0 || v807 > v805) {
                        v806[v802] = v805;
                      }
                    }
                  }
                }
                ++v746;
                float v745 = (float32x4_t *)((char *)v745 + 4);
              }
              while (v709 != v746);
            }
            ++v725;
            __asm { FMOV            V0.4S, #1.0 }
            float32x4_t v732 = vaddq_f32(v732, _Q0);
          }
          while (v725 != v708);
        }
        if (v717)
        {
          uint64_t v810 = 0;
          long long v811 = *(_OWORD *)&buf.width;
          vImagePixelCount v812 = buf.width >> 4;
          v813 = (char *)buf.data;
          vImagePixelCount v814 = buf.height;
          if (buf.width >> 4 <= 1) {
            vImagePixelCount v812 = 1;
          }
          if (buf.height <= 1) {
            vImagePixelCount v814 = 1;
          }
          unint64_t v815 = buf.width & 0xFFFFFFF0;
          float32x4_t v816 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
          do
          {
            float v817 = (float32x4_t *)&v813[*((void *)&v811 + 1) * v810];
            vImagePixelCount v818 = v812;
            if ((unint64_t)v811 >= 0x10)
            {
              do
              {
                float32x4_t v819 = v817[2];
                float32x4_t v820 = v817[3];
                int8x16_t v821 = vbicq_s8((int8x16_t)v817[1], (int8x16_t)vceqq_f32(v817[1], v816));
                *(int8x16_t *)float v817 = vbicq_s8(*(int8x16_t *)v817, (int8x16_t)vceqq_f32(*v817, v816));
                v817[1] = (float32x4_t)v821;
                v817[2] = (float32x4_t)vbicq_s8((int8x16_t)v819, (int8x16_t)vceqq_f32(v819, v816));
                v817[3] = (float32x4_t)vbicq_s8((int8x16_t)v820, (int8x16_t)vceqq_f32(v820, v816));
                v817 += 4;
                --v818;
              }
              while (v818);
            }
            unint64_t v822 = v811 & 0xFFFFFFFF0000000FLL;
            if ((unint64_t)v811 > v815)
            {
              do
              {
                if (v817->f32[0] == 3.4028e38) {
                  v817->i32[0] = 0;
                }
                float v817 = (float32x4_t *)((char *)v817 + 4);
                --v822;
              }
              while (v822);
            }
            ++v810;
          }
          while (v810 != v814);
        }
        goto LABEL_389;
      }
      if (PixelFormatType != 1751410032)
      {
        if (PixelFormatType == 1751411059)
        {
          size_t v598 = CVPixelBufferGetHeight(a1);
          size_t v599 = CVPixelBufferGetWidth(a1);
          unsigned int v600 = CVPixelBufferGetHeight(pixelBuffer);
          unsigned int v601 = CVPixelBufferGetWidth(pixelBuffer);
          size_t v602 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          CVPixelBufferLockBaseAddress(a1, 1uLL);
          CVPixelBufferLockBaseAddress(pixelBuffer, 0);
          memset(&v1498, 0, sizeof(v1498));
          float16x4_t v603 = (CGRect *)MEMORY[0x263F001A8];
          PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
          memset(&buf, 0, sizeof(buf));
          PixelBufferUtils::asVImageBuffer(pixelBuffer, *v603, &buf);
          int8x8_t v605 = (short float *)buf.data;
          int v604 = buf.height;
          bzero(buf.data, buf.height * buf.rowBytes);
          float32x4_t v611 = (float32x4_t)a14;
          float32x4_t v610 = (float32x4_t)a15;
          float32x4_t v613 = a12;
          float32x4_t v612 = a13;
          float v615 = *(float *)&a18;
          float v614 = *(float *)&a11;
          float v616 = *(float *)&a16;
          if (v598)
          {
            unint64_t v617 = 0;
            float v618 = 1.0 / *(float *)&a9;
            float v619 = 1.0 / *(float *)&v1476;
            unint64_t v620 = v599 & 0xFFFFFFFFFFFFFFF0;
            float v621 = 0.5;
            *(float *)v606.i32 = 0.5 - *((float *)&a11 + 1);
            float32x4_t v622 = (float32x4_t)vdupq_lane_s32(v606, 0);
            *(float *)v606.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
            *(float *)v607.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
            *(float *)v608.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
            *(float *)&long long v609 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
            float v623 = (char *)v1498.data;
            size_t v624 = v1498.rowBytes;
            float32x4_t v1322 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
            float32x4_t v1332 = (float32x4_t)vdupq_lane_s32(v608, 0);
            float32x4_t v1298 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
            float32x4_t v1304 = (float32x4_t)vdupq_lane_s32(v607, 0);
            float32x4_t v1278 = (float32x4_t)vdupq_laneq_s32(a14, 2);
            float32x4_t v1288 = (float32x4_t)vdupq_lane_s32(v606, 0);
            float32x4_t v625 = (float32x4_t)vdupq_laneq_s32(a15, 2);
            int32x4_t v626 = vdupq_n_s32(v601);
            float32x4_t v1270 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
            int32x4_t v627 = vdupq_n_s32(v604 * (v602 >> 1) - 2);
            float v628 = *((float *)&a17 + 1);
            float v1350 = 1.0 / *(float *)&a9;
            float v1341 = 1.0 / *(float *)&v1476;
            float v1456 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
            float32x4_t v1464 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
            float32x4_t v1437 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
            int32x4_t v1447 = vdupq_n_s32(v600);
            float32x4_t v1415 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
            float32x4_t v1426 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
            float32x4_t v1395 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
            float v1405 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
            int32x4_t v1377 = vdupq_n_s32(v602 >> 1);
            float32x4_t v1386 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
            do
            {
              unint64_t v629 = (float32x4_t *)&v623[v617 * v624];
              unint64_t v630 = 0;
              if (v620)
              {
                float32x4_t v1472 = vmlaq_f32(v1322, v1332, v622);
                float32x4_t v1492 = vmlaq_f32(v1298, v1304, v622);
                float32x4_t v1359 = v622;
                float32x4_t v1483 = vmlaq_f32(v1278, v1288, v622);
                float32x4_t v631 = v1270;
                do
                {
                  float32x4_t v632 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                  float32x4_t v633 = vdivq_f32(v632, *v629);
                  float32x4_t v634 = vdivq_f32(v632, v629[1]);
                  float32x4_t v635 = vdivq_f32(v632, v629[2]);
                  __asm { FMOV            V0.4S, #4.0 }
                  float32x4_t v637 = vaddq_f32(v631, _Q0);
                  _Q0.i64[0] = 0x4100000041000000;
                  _Q0.i64[1] = 0x4100000041000000;
                  float32x4_t v638 = vaddq_f32(v631, _Q0);
                  __asm { FMOV            V0.4S, #12.0 }
                  float32x4_t v640 = vaddq_f32(v631, _Q0);
                  float32x4_t v641 = vdivq_f32(v632, v629[3]);
                  float32x4_t v642 = vmlaq_f32(v625, vmlaq_n_f32(v1483, v631, *(float *)&v609), v633);
                  float32x4_t v643 = vmlaq_f32(v625, vmlaq_n_f32(v1483, v637, *(float *)&v609), v634);
                  float32x4_t v644 = vmlaq_f32(v625, vmlaq_n_f32(v1483, v638, *(float *)&v609), v635);
                  float32x4_t v645 = vmlaq_f32(v625, vmlaq_n_f32(v1483, v640, *(float *)&v609), v641);
                  int8x16_t v646 = (int8x16_t)vcgtzq_f32(v634);
                  int8x16_t v647 = (int8x16_t)vcgtzq_f32(v635);
                  float32x4_t v648 = vmlaq_f32(v1426, vmlaq_n_f32(v1472, v631, v1456), v633);
                  float32x4_t v649 = vmlaq_f32(v1386, vmlaq_n_f32(v1492, v631, v1405), v633);
                  float32x4_t v650 = vmlaq_f32(v1426, vmlaq_n_f32(v1472, v637, v1456), v634);
                  long long v651 = v609;
                  float32x4_t v652 = vmlaq_f32(v1386, vmlaq_n_f32(v1492, v637, v1405), v634);
                  float32x4_t v653 = vmlaq_f32(v1426, vmlaq_n_f32(v1472, v638, v1456), v635);
                  float32x4_t v654 = vmlaq_f32(v1386, vmlaq_n_f32(v1492, v638, v1405), v635);
                  int32x4_t v655 = v627;
                  float32x4_t v656 = v625;
                  int8x16_t v657 = vandq_s8((int8x16_t)vcgezq_f32(v642), (int8x16_t)vcgtzq_f32(v633));
                  int8x16_t v658 = vandq_s8((int8x16_t)vcgezq_f32(v643), v646);
                  float32x4_t v659 = vmlaq_f32(v1415, vdivq_f32(v1395, v642), v648);
                  float32x4_t v660 = vmlaq_f32(v1464, vdivq_f32(v1437, v642), v649);
                  int8x16_t v661 = vandq_s8((int8x16_t)vcgezq_f32(v644), v647);
                  float32x4_t v662 = vmlaq_f32(v1415, vdivq_f32(v1395, v643), v650);
                  float32x4_t v663 = vdivq_f32(v1395, v644);
                  float32x4_t v664 = vdivq_f32(v1437, v644);
                  int8x16_t v665 = vandq_s8((int8x16_t)vcgezq_f32(v645), (int8x16_t)vcgtzq_f32(v641));
                  float32x4_t v666 = vmlaq_f32(v1464, vdivq_f32(v1437, v643), v652);
                  float32x4_t v667 = vdivq_f32(v1395, v645);
                  float32x4_t v668 = vdivq_f32(v1437, v645);
                  int8x16_t v669 = (int8x16_t)vdivq_f32(v632, v642);
                  int8x16_t v670 = (int8x16_t)vdivq_f32(v632, v643);
                  int8x16_t v671 = (int8x16_t)vdivq_f32(v632, v644);
                  int8x16_t v672 = (int8x16_t)vdivq_f32(v632, v645);
                  int32x4_t v673 = vcvtmq_s32_f32(v659);
                  int32x4_t v674 = vcvtmq_s32_f32(v660);
                  int32x4_t v675 = vcvtmq_s32_f32(v662);
                  int32x4_t v676 = vcvtmq_s32_f32(v666);
                  int32x4_t v677 = vcvtmq_s32_f32(vmlaq_f32(v1415, v663, v653));
                  int32x4_t v678 = vcvtmq_s32_f32(vmlaq_f32(v1464, v664, v654));
                  int32x4_t v679 = vcvtmq_s32_f32(vmlaq_f32(v1415, v667, vmlaq_f32(v1426, vmlaq_n_f32(v1472, v640, v1456), v641)));
                  int32x4_t v680 = vcvtmq_s32_f32(vmlaq_f32(v1464, v668, vmlaq_f32(v1386, vmlaq_n_f32(v1492, v640, v1405), v641)));
                  v681.i64[0] = -1;
                  v681.i64[1] = -1;
                  int8x16_t v682 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1447, v676), (int8x16_t)vcgtq_s32(v626, v675)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v676, (int8x16_t)v675), v681));
                  int8x16_t v683 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1447, v678), (int8x16_t)vcgtq_s32(v626, v677)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v678, (int8x16_t)v677), v681));
                  int8x16_t v684 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1447, v680), (int8x16_t)vcgtq_s32(v626, v679)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v680, (int8x16_t)v679), v681));
                  int32x4_t v685 = vmlaq_s32(v675, v676, v1377);
                  float32x4_t v625 = v656;
                  int32x4_t v627 = v655;
                  int32x4_t v686 = vmlaq_s32(v677, v678, v1377);
                  int32x4_t v687 = vmlaq_s32(v679, v680, v1377);
                  float32x4_t v688 = (float32x4_t)vandq_s8(vandq_s8(v669, v657), vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1447, v674), (int8x16_t)vcgtq_s32(v626, v673)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v674, (int8x16_t)v673), v681)));
                  float32x4_t v689 = (float32x4_t)vandq_s8(vandq_s8(v670, v658), v682);
                  int8x16_t v690 = vandq_s8(v672, v665);
                  long long v609 = v651;
                  int32x4_t v691 = vminq_s32(vmaxq_s32(vmlaq_s32(v673, v674, v1377), (int32x4_t)0), v655);
                  int32x4_t v692 = vminq_s32(vmaxq_s32(v685, (int32x4_t)0), v655);
                  int32x4_t v693 = vminq_s32(vmaxq_s32(v686, (int32x4_t)0), v655);
                  int32x4_t v694 = vminq_s32(vmaxq_s32(v687, (int32x4_t)0), v655);
                  float32x4_t v695 = (float32x4_t)vandq_s8(v690, v684);
                  unsigned __int32 v696 = v691.u32[1];
                  *(float16x4_t *)v690.i8 = vcvt_f16_f32(v688);
                  v605[v691.u32[0]] = fmaxl(*(short float *)v690.i16, v605[v691.u32[0]]);
                  *(float16x4_t *)v687.i8 = vcvt_f16_f32(v689);
                  v605[v692.u32[1]] = fmaxl(*(short float *)&v687.i16[1], v605[v692.u32[1]]);
                  *(float16x4_t *)v691.i8 = vcvt_f16_f32((float32x4_t)vandq_s8(vandq_s8(v671, v661), v683));
                  v605[v693.u32[2]] = fmaxl(*(short float *)&v691.i16[2], v605[v693.u32[2]]);
                  *(float16x4_t *)v658.i8 = vcvt_f16_f32(v695);
                  v605[v694.u32[3]] = fmaxl(*(short float *)&v658.i16[3], v605[v694.u32[3]]);
                  v605[v696] = fmaxl(*(short float *)&v690.i16[1], v605[v696]);
                  v605[v692.u32[2]] = fmaxl(*(short float *)&v687.i16[2], v605[v692.u32[2]]);
                  v605[v693.u32[3]] = fmaxl(*(short float *)&v691.i16[3], v605[v693.u32[3]]);
                  v605[v694.u32[0]] = fmaxl(*(short float *)v658.i16, v605[v694.u32[0]]);
                  v605[v691.u32[2]] = fmaxl(*(short float *)&v690.i16[2], v605[v691.u32[2]]);
                  v605[v692.u32[3]] = fmaxl(*(short float *)&v687.i16[3], v605[v692.u32[3]]);
                  v605[v693.u32[0]] = fmaxl(*(short float *)v691.i16, v605[v693.u32[0]]);
                  v605[v694.u32[1]] = fmaxl(*(short float *)&v658.i16[1], v605[v694.u32[1]]);
                  v605[v691.u32[3]] = fmaxl(*(short float *)&v690.i16[3], v605[v691.u32[3]]);
                  v605[v692.u32[0]] = fmaxl(*(short float *)v687.i16, v605[v692.u32[0]]);
                  v605[v693.u32[1]] = fmaxl(*(short float *)&v691.i16[1], v605[v693.u32[1]]);
                  v605[v694.u32[2]] = fmaxl(*(short float *)&v658.i16[2], v605[v694.u32[2]]);
                  __asm { FMOV            V0.4S, #16.0 }
                  float32x4_t v631 = vaddq_f32(v631, _Q0);
                  v629 += 4;
                  v630 += 16;
                }
                while (v630 < v620);
                unint64_t v630 = (((v599 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
                float32x4_t v611 = (float32x4_t)a14;
                float32x4_t v610 = (float32x4_t)a15;
                float32x4_t v613 = a12;
                float32x4_t v612 = a13;
                float v615 = *(float *)&a18;
                float v614 = *(float *)&a11;
                float v616 = *(float *)&a16;
                float v618 = v1350;
                float v619 = v1341;
                float v621 = 0.5;
                float32x4_t v622 = v1359;
                float v628 = *((float *)&a17 + 1);
              }
              if (v630 < v599)
              {
                do
                {
                  float v698 = 1000.0 / v629->f32[0];
                  _Q4 = vaddq_f32(v610, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v613, v618 * (float)(v698 * (float)((float)((float)v630 + v621) - v614))), v612, v619 * (float)((float)((float)((float)v617 + v621) - *((float *)&a11 + 1)) * v698)), v611, v698));
                  if (_Q4.f32[2] >= 0.0 && v698 > 0.0)
                  {
                    uint64_t v700 = (int)vmlas_n_f32(v615, v616 / _Q4.f32[2], _Q4.f32[0]);
                    if ((v700 & 0x80000000) == 0 && (__int16)v601 > (int)v700)
                    {
                      _S1 = v628 / _Q4.f32[2];
                      __asm { FMLA            S2, S1, V4.S[1] }
                      if (((int)_S2 & 0x80000000) == 0 && (__int16)v600 > (int)(unsigned __int16)(int)_S2)
                      {
                        _S1 = 1000.0 / _Q4.f32[2];
                        __asm
                        {
                          FCVT            H3, S1
                          FCMP            H1, #0
                        }
                        if (_ZF || _H1 < _H3) {
                          v605[(v602 >> 1) * (unsigned __int16)(int)_S2 + v700] = _H3;
                        }
                      }
                    }
                  }
                  ++v630;
                  unint64_t v629 = (float32x4_t *)((char *)v629 + 4);
                }
                while (v599 != v630);
              }
              ++v617;
              __asm { FMOV            V0.4S, #1.0 }
              float32x4_t v622 = vaddq_f32(v622, _Q0);
            }
            while (v617 != v598);
          }
          goto LABEL_389;
        }
        goto LABEL_391;
      }
    }
    size_t v823 = CVPixelBufferGetHeight(a1);
    size_t v824 = CVPixelBufferGetWidth(a1);
    size_t v825 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v826 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v827 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    memset(&v1498, 0, sizeof(v1498));
    float32x4_t v828 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v828, &buf);
    size_t v833 = v827 >> 1;
    unint64_t v834 = (short float *)buf.data;
    if (v833 * v825) {
      memset_pattern16(buf.data, &unk_247F24680, 2 * v833 * v825);
    }
    vImagePixelCount v835 = buf.height;
    float32x4_t v836 = (float32x4_t)a14;
    float32x4_t v837 = (float32x4_t)a15;
    float32x4_t v839 = a12;
    float32x4_t v838 = a13;
    float v841 = *(float *)&a18;
    float v840 = *(float *)&a11;
    float v842 = *(float *)&a16;
    if (v823)
    {
      unint64_t v843 = 0;
      float v844 = 1.0 / *(float *)&a9;
      float v845 = 1.0 / *(float *)&v1476;
      unint64_t v846 = v824 & 0xFFFFFFFFFFFFFFF0;
      float v847 = 0.5;
      *(float *)v829.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v848 = (float32x4_t)vdupq_lane_s32(v829, 0);
      *(float *)v829.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
      *(float *)v830.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
      *(float *)v831.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
      *(float *)&long long v832 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      float v849 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      float32x4_t v1334 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1343 = (float32x4_t)vdupq_lane_s32(v831, 0);
      float32x4_t v1324 = (float32x4_t)vdupq_lane_s32(v830, 0);
      float v850 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v1300 = (float32x4_t)vdupq_lane_s32(v829, 0);
      float32x4_t v1306 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1290 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      float32x4_t v851 = (char *)v1498.data;
      size_t v852 = v1498.rowBytes;
      float32x4_t v1280 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      float32x4_t v853 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v854 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v855 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      int32x4_t v856 = vdupq_n_s32(LODWORD(buf.height) * (int)v833 - 2);
      v857.i64[0] = 0x4100000041000000;
      v857.i64[1] = 0x4100000041000000;
      float v1361 = 1.0 / *(float *)&a9;
      float v1352 = 1.0 / *(float *)&v1476;
      float32x4_t v1449 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      int32x4_t v1458 = vdupq_n_s32(v826);
      int32x4_t v1428 = vdupq_n_s32(v833);
      float32x4_t v1439 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      float32x4_t v1407 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      float32x4_t v1417 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      int32x4_t v1397 = vdupq_n_s32(v825);
      do
      {
        unint64_t v858 = (float32x4_t *)&v851[v843 * v852];
        unint64_t v859 = 0;
        if (v846)
        {
          float32x4_t v1485 = vmlaq_f32(v1334, v1343, v848);
          float32x4_t v1466 = vmlaq_f32(v1306, v1324, v848);
          float32x4_t v1369 = v848;
          float32x4_t v1474 = vmlaq_f32(v1290, v1300, v848);
          float32x4_t v860 = v1280;
          do
          {
            float32x4_t v1494 = v860;
            float32x4_t v861 = (float32x4_t)vdupq_n_s32(0x447A0000u);
            float32x4_t v862 = vdivq_f32(v861, *v858);
            float32x4_t v863 = vdivq_f32(v861, v858[1]);
            float32x4_t v864 = vdivq_f32(v861, v858[2]);
            __asm { FMOV            V0.4S, #4.0 }
            float32x4_t v866 = vaddq_f32(v860, _Q0);
            float32x4_t v867 = vaddq_f32(v1494, v857);
            float32x4_t v868 = vdivq_f32(v861, v858[3]);
            __asm { FMOV            V0.4S, #12.0 }
            float32x4_t v870 = vaddq_f32(v1494, _Q0);
            long long v871 = v832;
            float32x4_t v872 = vmlaq_f32(v853, vmlaq_n_f32(v1474, v1494, *(float *)&v832), v862);
            float32x4_t v873 = vmlaq_f32(v853, vmlaq_n_f32(v1474, v866, *(float *)&v832), v863);
            float32x4_t v874 = vmlaq_f32(v853, vmlaq_n_f32(v1474, v867, *(float *)&v832), v864);
            float32x4_t v875 = vmlaq_f32(v853, vmlaq_n_f32(v1474, v870, *(float *)&v832), v868);
            int32x4_t v876 = v856;
            float32x4_t v877 = v854;
            float32x4_t v878 = vmlaq_f32(v854, vmlaq_n_f32(v1485, v1494, v850), v862);
            float32x4_t v879 = vmlaq_f32(v855, vmlaq_n_f32(v1466, v1494, v849), v862);
            float32x4_t v880 = vmlaq_f32(v854, vmlaq_n_f32(v1485, v866, v850), v863);
            int8x16_t v881 = vandq_s8((int8x16_t)vcgezq_f32(v872), (int8x16_t)vcgtzq_f32(v862));
            int8x16_t v882 = vandq_s8((int8x16_t)vcgezq_f32(v873), (int8x16_t)vcgtzq_f32(v863));
            int8x16_t v883 = vandq_s8((int8x16_t)vcgezq_f32(v874), (int8x16_t)vcgtzq_f32(v864));
            float32x4_t v884 = vmlaq_f32(v854, vmlaq_n_f32(v1485, v870, v850), v868);
            int8x16_t v885 = vandq_s8((int8x16_t)vcgezq_f32(v875), (int8x16_t)vcgtzq_f32(v868));
            float32x4_t v886 = vmlaq_f32(v855, vmlaq_n_f32(v1466, v870, v849), v868);
            float32x4_t v887 = vmlaq_f32(v1439, vdivq_f32(v1449, v872), v878);
            float32x4_t v888 = vmlaq_f32(v1417, vdivq_f32(v1407, v872), v879);
            float32x4_t v889 = vmlaq_f32(v1439, vdivq_f32(v1449, v873), v880);
            float32x4_t v890 = vdivq_f32(v1407, v874);
            float32x4_t v891 = vmlaq_f32(v1417, vdivq_f32(v1407, v873), vmlaq_f32(v855, vmlaq_n_f32(v1466, v866, v849), v863));
            float32x4_t v892 = vmlaq_f32(v1439, vdivq_f32(v1449, v874), vmlaq_f32(v877, vmlaq_n_f32(v1485, v867, v850), v864));
            float32x4_t v893 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
            int8x16_t v894 = (int8x16_t)vmulq_f32(v872, v893);
            int8x16_t v895 = (int8x16_t)vmulq_f32(v873, v893);
            int8x16_t v896 = (int8x16_t)vmulq_f32(v874, v893);
            int8x16_t v897 = (int8x16_t)vmulq_f32(v875, v893);
            int32x4_t v898 = vcvtmq_s32_f32(v887);
            int32x4_t v899 = vcvtmq_s32_f32(v888);
            int32x4_t v900 = vcvtmq_s32_f32(v889);
            int32x4_t v901 = vcvtmq_s32_f32(v891);
            int32x4_t v902 = vcvtmq_s32_f32(v892);
            int32x4_t v903 = vcvtmq_s32_f32(vmlaq_f32(v1417, v890, vmlaq_f32(v855, vmlaq_n_f32(v1466, v867, v849), v864)));
            v904.i64[0] = -1;
            v904.i64[1] = -1;
            int32x4_t v905 = vcvtmq_s32_f32(vmlaq_f32(v1439, vdivq_f32(v1449, v875), v884));
            int32x4_t v906 = vcvtmq_s32_f32(vmlaq_f32(v1417, vdivq_f32(v1407, v875), v886));
            int8x16_t v907 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1397, v906), (int8x16_t)vcgtq_s32(v1458, v905)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v906, (int8x16_t)v905), v904)), v885);
            int8x16_t v908 = (int8x16_t)vdupq_n_s32(0x477FE000u);
            float32x4_t v909 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1397, v899), (int8x16_t)vcgtq_s32(v1458, v898)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v899, (int8x16_t)v898), v904)), v881), v894, v908);
            float32x4_t v910 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1397, v901), (int8x16_t)vcgtq_s32(v1458, v900)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v901, (int8x16_t)v900), v904)), v882), v895, v908);
            float32x4_t v911 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1397, v903), (int8x16_t)vcgtq_s32(v1458, v902)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v903, (int8x16_t)v902), v904)), v883), v896, v908);
            float32x4_t v912 = (float32x4_t)vbslq_s8(v907, v897, v908);
            int32x4_t v913 = vmlaq_s32(v898, v899, v1428);
            long long v832 = v871;
            float32x4_t v854 = v877;
            int32x4_t v914 = vmlaq_s32(v900, v901, v1428);
            int32x4_t v856 = v876;
            v857.i64[0] = 0x4100000041000000;
            v857.i64[1] = 0x4100000041000000;
            int32x4_t v915 = vminq_s32(vmaxq_s32(v913, (int32x4_t)0), v856);
            int32x4_t v916 = vminq_s32(vmaxq_s32(v914, (int32x4_t)0), v856);
            int32x4_t v917 = vminq_s32(vmaxq_s32(vmlaq_s32(v902, v903, v1428), (int32x4_t)0), v856);
            int32x4_t v918 = vminq_s32(vmaxq_s32(vmlaq_s32(v905, v906, v1428), (int32x4_t)0), v856);
            unsigned __int32 v919 = v915.u32[1];
            *(float16x4_t *)v883.i8 = vcvt_f16_f32(v909);
            v834[v915.u32[0]] = fminl(*(short float *)v883.i16, v834[v915.u32[0]]);
            *(float16x4_t *)v902.i8 = vcvt_f16_f32(v910);
            v834[v916.u32[1]] = fminl(*(short float *)&v902.i16[1], v834[v916.u32[1]]);
            *(float16x4_t *)v915.i8 = vcvt_f16_f32(v911);
            v834[v917.u32[2]] = fminl(*(short float *)&v915.i16[2], v834[v917.u32[2]]);
            *(float16x4_t *)v881.i8 = vcvt_f16_f32(v912);
            v834[v918.u32[3]] = fminl(*(short float *)&v881.i16[3], v834[v918.u32[3]]);
            v834[v919] = fminl(*(short float *)&v883.i16[1], v834[v919]);
            v834[v916.u32[2]] = fminl(*(short float *)&v902.i16[2], v834[v916.u32[2]]);
            v834[v917.u32[3]] = fminl(*(short float *)&v915.i16[3], v834[v917.u32[3]]);
            v834[v918.u32[0]] = fminl(*(short float *)v881.i16, v834[v918.u32[0]]);
            v834[v915.u32[2]] = fminl(*(short float *)&v883.i16[2], v834[v915.u32[2]]);
            v834[v916.u32[3]] = fminl(*(short float *)&v902.i16[3], v834[v916.u32[3]]);
            v834[v917.u32[0]] = fminl(*(short float *)v915.i16, v834[v917.u32[0]]);
            v834[v918.u32[1]] = fminl(*(short float *)&v881.i16[1], v834[v918.u32[1]]);
            v834[v915.u32[3]] = fminl(*(short float *)&v883.i16[3], v834[v915.u32[3]]);
            v834[v916.u32[0]] = fminl(*(short float *)v902.i16, v834[v916.u32[0]]);
            v834[v917.u32[1]] = fminl(*(short float *)&v915.i16[1], v834[v917.u32[1]]);
            v834[v918.u32[2]] = fminl(*(short float *)&v881.i16[2], v834[v918.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v860 = vaddq_f32(v1494, _Q0);
            v858 += 4;
            v859 += 16;
          }
          while (v859 < v846);
          unint64_t v859 = (((v824 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v836 = (float32x4_t)a14;
          float32x4_t v837 = (float32x4_t)a15;
          float32x4_t v839 = a12;
          float32x4_t v838 = a13;
          float v841 = *(float *)&a18;
          float v840 = *(float *)&a11;
          float v842 = *(float *)&a16;
          float v844 = v1361;
          float v845 = v1352;
          float v847 = 0.5;
          float32x4_t v848 = v1369;
        }
        if (v859 < v824)
        {
          do
          {
            float v921 = 1000.0 / v858->f32[0];
            _Q7 = vaddq_f32(v837, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v839, v844 * (float)(v921 * (float)((float)((float)v859 + v847) - v840))), v838, v845 * (float)((float)((float)((float)v843 + v847) - *((float *)&a11 + 1)) * v921)), v836, v921));
            if (_Q7.f32[2] >= 0.0 && v921 > 0.0)
            {
              uint64_t v923 = (int)vmlas_n_f32(v841, v842 / _Q7.f32[2], _Q7.f32[0]);
              if ((v923 & 0x80000000) == 0 && (__int16)v826 > (int)v923)
              {
                _S1 = *((float *)&a17 + 1) / _Q7.f32[2];
                __asm { FMLA            S2, S1, V7.S[1] }
                if (((int)_S2 & 0x80000000) == 0 && (__int16)v825 > (int)(unsigned __int16)(int)_S2)
                {
                  _S1 = _Q7.f32[2] * 0.001;
                  __asm
                  {
                    FCVT            H4, S1
                    FCMP            H1, #0
                  }
                  if (_ZF || _H1 > _H4) {
                    v834[v833 * (unsigned __int16)(int)_S2 + v923] = _H4;
                  }
                }
              }
            }
            ++v859;
            unint64_t v858 = (float32x4_t *)((char *)v858 + 4);
          }
          while (v824 != v859);
        }
        ++v843;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v848 = vaddq_f32(v848, _Q0);
        v857.i64[0] = 0x4100000041000000;
        v857.i64[1] = 0x4100000041000000;
      }
      while (v843 != v823);
    }
    if (v835)
    {
      uint64_t v931 = 0;
      long long v932 = *(_OWORD *)&buf.width;
      vImagePixelCount v933 = buf.width >> 4;
      v934 = (char *)buf.data;
      vImagePixelCount v935 = buf.height;
      if (buf.width >> 4 <= 1) {
        vImagePixelCount v933 = 1;
      }
      if (buf.height <= 1) {
        vImagePixelCount v935 = 1;
      }
      unint64_t v936 = buf.width & 0xFFFFFFF0;
      do
      {
        v937 = (int8x8_t *)&v934[*((void *)&v932 + 1) * v931];
        vImagePixelCount v938 = v933;
        if ((unint64_t)v932 >= 0x10)
        {
          do
          {
            float16x4_t v939 = (float16x4_t)v937[2];
            float16x4_t v940 = (float16x4_t)v937[3];
            int8x8_t v941 = vbic_s8(v937[1], (int8x8_t)vceq_f16((float16x4_t)v937[1], (float16x4_t)0x8400840084008400));
            int8x8_t *v937 = vbic_s8(*v937, (int8x8_t)vceq_f16((float16x4_t)*v937, (float16x4_t)0x8400840084008400));
            v937[1] = v941;
            v937[2] = vbic_s8((int8x8_t)v939, (int8x8_t)vceq_f16(v939, (float16x4_t)0x8400840084008400));
            v937[3] = vbic_s8((int8x8_t)v940, (int8x8_t)vceq_f16(v940, (float16x4_t)0x8400840084008400));
            v937 += 4;
            --v938;
          }
          while (v938);
        }
        unint64_t v942 = v932 & 0xFFFFFFFF0000000FLL;
        if ((unint64_t)v932 > v936)
        {
          do
          {
            if (*(short float *)v937->i16 == COERCE_SHORT_FLOAT(31743)) {
              v937->i16[0] = 0;
            }
            v937 = (int8x8_t *)((char *)v937 + 2);
            --v942;
          }
          while (v942);
        }
        ++v931;
      }
      while (v931 != v935);
    }
    goto LABEL_389;
  }
  if (PixelFormatType <= 1717855599)
  {
    if (PixelFormatType == 825437747)
    {
      size_t v1281 = CVPixelBufferGetHeight(a1);
      size_t v943 = CVPixelBufferGetWidth(a1);
      size_t v944 = CVPixelBufferGetHeight(pixelBuffer);
      unsigned int v945 = CVPixelBufferGetWidth(pixelBuffer);
      size_t v946 = CVPixelBufferGetBytesPerRow(pixelBuffer);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      CVPixelBufferLockBaseAddress(a2, 0);
      memset(&v1498, 0, sizeof(v1498));
      v947 = (CGRect *)MEMORY[0x263F001A8];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
      memset(&buf, 0, sizeof(buf));
      PixelBufferUtils::asVImageBuffer(pixelBuffer, *v947, &buf);
      PixelBufferUtils::asVImageBuffer(a2, *v947, &v1497);
      size_t v952 = v946 >> 1;
      float32x4_t v1271 = (char *)v1497.data;
      size_t v1267 = v1497.rowBytes;
      float16x4_t v953 = (__int16 *)buf.data;
      size_t v954 = (v946 >> 1) * v944;
      if (v954) {
        memset_pattern16(buf.data, &unk_247F24690, 2 * v954);
      }
      vImagePixelCount v955 = buf.height;
      if (v1281)
      {
        unint64_t v956 = 0;
        v957.i32[1] = v1476;
        v958.i32[1] = HIDWORD(a9);
        float v959 = *(float *)&a11;
        float v960 = 1.0 / *(float *)&a9;
        float v961 = 1.0 / *(float *)&v1476;
        unint64_t v962 = v943 & 0xFFFFFFFFFFFFFFF0;
        float v963 = 0.5;
        *(float *)v948.i32 = 0.5 - *((float *)&a11 + 1);
        float32x4_t v964 = (float32x4_t)vdupq_lane_s32(v948, 0);
        float32x4_t v966 = a13;
        float32x4_t v965 = (float32x4_t)a14;
        *(float *)v948.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
        *(float *)v957.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
        *(float *)v958.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
        float32x4_t v1252 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
        float32x4_t v1254 = (float32x4_t)vdupq_lane_s32(v958, 0);
        float32x4_t v1248 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
        float32x4_t v1250 = (float32x4_t)vdupq_lane_s32(v957, 0);
        float32x4_t v1245 = (float32x4_t)vdupq_laneq_s32(a14, 2);
        float32x4_t v1246 = (float32x4_t)vdupq_lane_s32(v948, 0);
        float32x4_t v967 = a12;
        *(float *)&long long v949 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
        *(float *)&long long v950 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
        *(float *)&long long v951 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
        float32x4_t v1243 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
        float32x4_t v968 = (float32x4_t)a15;
        float32x2_t v969 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
        float32x4_t v970 = (float32x4_t)vdupq_laneq_s32(a15, 2);
        float32x4_t v971 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
        int32x4_t v972 = vdupq_n_s32(v945);
        int v973 = (__int16)v945;
        int v974 = (__int16)v944;
        float32x2_t v975 = (float32x2_t)a18;
        unint64_t v1240 = (((v943 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
        float32x4_t v1264 = (char *)v1498.data;
        size_t v1262 = v1498.rowBytes;
        int32x4_t v1325 = vdupq_n_s32(v952);
        size_t v1260 = v943;
        float v1257 = 1.0 / *(float *)&a9;
        int v1241 = (__int16)v944;
        int v1242 = (__int16)v945;
        float32x4_t v1388 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
        float32x4_t v1398 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
        float32x4_t v1370 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
        int32x4_t v1379 = vdupq_n_s32(LODWORD(buf.height) * (int)v952 - 2);
        float32x4_t v1353 = v970;
        float32x4_t v1335 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
        int32x4_t v1344 = vdupq_n_s32(v944);
        float32x4_t v976 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
        do
        {
          float32x4_t v977 = (float32x4_t *)&v1264[v1262 * v956];
          float32x4_t v978 = (__int16 *)&v1271[v956 * v1267];
          if (v962)
          {
            uint64_t v979 = 0;
            float32x4_t v1429 = vmlaq_f32(v1252, v1254, v964);
            float32x4_t v1418 = vmlaq_f32(v1248, v1250, v964);
            float32x4_t v1291 = v964;
            float32x4_t v1408 = vmlaq_f32(v1245, v1246, v964);
            float32x4_t v980 = v1243;
            v981.i64[0] = 0x4100000041000000;
            v981.i64[1] = 0x4100000041000000;
            do
            {
              uint64_t v1486 = v979;
              float32x4_t v1495 = v978;
              float32x4_t v982 = (float32x4_t)vdupq_n_s32(0x447A0000u);
              float32x4_t v983 = vdivq_f32(v982, *v977);
              float32x4_t v984 = vdivq_f32(v982, v977[1]);
              float32x4_t v985 = vdivq_f32(v982, v977[2]);
              __asm { FMOV            V0.4S, #4.0 }
              float32x4_t v987 = vaddq_f32(v980, _Q0);
              float32x4_t v988 = vaddq_f32(v980, v981);
              float32x4_t v989 = vdivq_f32(v982, v977[3]);
              __asm { FMOV            V3.4S, #12.0 }
              float32x4_t v991 = vaddq_f32(v980, _Q3);
              float32x4_t v992 = vmlaq_f32(v970, vmlaq_n_f32(v1408, v980, *(float *)&v949), v983);
              float32x4_t v993 = vmlaq_f32(v970, vmlaq_n_f32(v1408, v987, *(float *)&v949), v984);
              float32x4_t v994 = vmlaq_f32(v970, vmlaq_n_f32(v1408, v988, *(float *)&v949), v985);
              float32x4_t v995 = vmlaq_f32(v970, vmlaq_n_f32(v1408, v991, *(float *)&v949), v989);
              float32x4_t v996 = vmlaq_f32(v971, vmlaq_n_f32(v1429, v980, *(float *)&v951), v983);
              long long v997 = v949;
              float32x4_t v998 = vmlaq_f32(v1335, vmlaq_n_f32(v1418, v980, *(float *)&v950), v983);
              float32x4_t v999 = vmlaq_f32(v971, vmlaq_n_f32(v1429, v987, *(float *)&v951), v984);
              float32x4_t v1000 = vmlaq_f32(v1335, vmlaq_n_f32(v1418, v987, *(float *)&v950), v984);
              int8x16_t v1001 = vandq_s8((int8x16_t)vcgezq_f32(v992), (int8x16_t)vcgtzq_f32(v983));
              float32x4_t v1002 = vmlaq_f32(v971, vmlaq_n_f32(v1429, v988, *(float *)&v951), v985);
              int8x16_t v1003 = vandq_s8((int8x16_t)vcgezq_f32(v993), (int8x16_t)vcgtzq_f32(v984));
              float32x4_t v1004 = vmlaq_f32(v1335, vmlaq_n_f32(v1418, v988, *(float *)&v950), v985);
              int8x16_t v1005 = vandq_s8((int8x16_t)vcgezq_f32(v994), (int8x16_t)vcgtzq_f32(v985));
              float32x4_t v1006 = vmlaq_f32(v971, vmlaq_n_f32(v1429, v991, *(float *)&v951), v989);
              int8x16_t v1007 = vandq_s8((int8x16_t)vcgezq_f32(v995), (int8x16_t)vcgtzq_f32(v989));
              int32x4_t v1008 = v972;
              float32x4_t v1009 = v971;
              long long v1010 = v951;
              long long v1011 = v950;
              float32x4_t v1012 = vmlaq_f32(v1335, vmlaq_n_f32(v1418, v991, *(float *)&v950), v989);
              float32x4_t v1013 = vmlaq_f32(v1370, vdivq_f32(v976, v994), v1002);
              int32x4_t v1014 = vcvtmq_s32_f32(vmlaq_f32(v1370, vdivq_f32(v976, v992), v996));
              int32x4_t v1015 = vcvtmq_s32_f32(vmlaq_f32(v1398, vdivq_f32(v1388, v992), v998));
              int32x4_t v1016 = vcvtmq_s32_f32(vmlaq_f32(v1370, vdivq_f32(v976, v993), v999));
              int32x4_t v1017 = vcvtmq_s32_f32(vmlaq_f32(v1398, vdivq_f32(v1388, v993), v1000));
              int32x4_t v1018 = vcvtmq_s32_f32(v1013);
              int32x4_t v1019 = vcvtmq_s32_f32(vmlaq_f32(v1398, vdivq_f32(v1388, v994), v1004));
              int32x4_t v1020 = vcvtmq_s32_f32(vmlaq_f32(v1370, vdivq_f32(v976, v995), v1006));
              float32x4_t v1021 = vmlaq_f32(v1398, vdivq_f32(v1388, v995), v1012);
              long long v950 = v1011;
              long long v951 = v1010;
              float32x4_t v971 = v1009;
              int32x4_t v972 = v1008;
              int32x4_t v1022 = vcvtmq_s32_f32(v1021);
              int8x16_t v1023 = (int8x16_t)vcgtq_s32(v1008, v1014);
              v1008.i64[0] = -1;
              v1008.i64[1] = -1;
              int32x4_t v1024 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1344, v1015), v1023), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1015, (int8x16_t)v1014), v1008)), v1001);
              *(int16x4_t *)v1023.i8 = vmovn_s32(v1024);
              v1501.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v1014), *(int8x8_t *)v1023.i8);
              v1501.val[1] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v1015), *(int8x8_t *)v1023.i8);
              int32x4_t v1025 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1344, v1017), (int8x16_t)vcgtq_s32(v972, v1016)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1017, (int8x16_t)v1016), v1008)), v1003);
              *(int16x4_t *)v999.f32 = vmovn_s32(v1025);
              int32x4_t v1026 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1344, v1019), (int8x16_t)vcgtq_s32(v972, v1018)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1019, (int8x16_t)v1018), v1008)), v1005);
              v981.i64[0] = 0x4100000041000000;
              v981.i64[1] = 0x4100000041000000;
              int32x4_t v1027 = v978;
              vst2_s16(v1027, v1501);
              v1027 += 8;
              v1501.val[1] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v1016), *(int8x8_t *)v999.f32);
              *(int8x8_t *)v1001.i8 = vorn_s8((int8x8_t)vmovn_s32(v1017), *(int8x8_t *)v999.f32);
              *(int16x4_t *)v999.f32 = vmovn_s32(v1026);
              vst2_s16(v1027, *(int16x4x2_t *)((char *)&v1001 - 8));
              v1501.val[1] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v1018), *(int8x8_t *)v999.f32);
              *(int8x8_t *)v1001.i8 = vorn_s8((int8x8_t)vmovn_s32(v1019), *(int8x8_t *)v999.f32);
              long long v949 = v997;
              int32x4_t v1028 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1344, v1022), (int8x16_t)vcgtq_s32(v972, v1020)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1022, (int8x16_t)v1020), v1008)), v1007);
              int8x16_t v1029 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
              float32x4_t v1030 = (float32x4_t)vbslq_s8((int8x16_t)v1024, (int8x16_t)vmulq_f32(v992, v981), v1029);
              float32x4_t v1031 = (float32x4_t)vbslq_s8((int8x16_t)v1025, (int8x16_t)vmulq_f32(v993, v981), v1029);
              float32x4_t v1032 = (float32x4_t)vbslq_s8((int8x16_t)v1026, (int8x16_t)vmulq_f32(v994, v981), v1029);
              float32x4_t v1033 = (float32x4_t)vbslq_s8((int8x16_t)v1028, (int8x16_t)vmulq_f32(v995, v981), v1029);
              float32x4_t v1034 = v978 + 16;
              *(int16x4_t *)v995.f32 = vmovn_s32(v1028);
              vst2_s16(v1034, *(int16x4x2_t *)((char *)&v1001 - 8));
              float32x4_t v970 = v1353;
              *(int8x8_t *)v992.f32 = vorn_s8((int8x8_t)vmovn_s32(v1020), *(int8x8_t *)v995.f32);
              *(int8x8_t *)v1029.i8 = vorn_s8((int8x8_t)vmovn_s32(v1022), *(int8x8_t *)v995.f32);
              int32x4_t v1035 = v978 + 24;
              vst2_s16(v1035, (int16x4x2_t)v992);
              int32x4_t v1036 = vminq_s32(vmaxq_s32(vmlaq_s32(v1014, v1015, v1325), (int32x4_t)0), v1379);
              unsigned __int32 v1475 = v1036.u32[1];
              uint64_t v1037 = v1036.i64[1];
              unsigned __int32 v1038 = v1036.i32[0];
              int32x4_t v1039 = vcvtq_s32_f32(v1030);
              __int32 v1040 = v1039.i32[1];
              __int32 v1041 = v1039.i32[2];
              __int32 v1450 = v1039.i32[3];
              __int32 v1042 = v1039.i32[0];
              int32x4_t v1043 = vminq_s32(vmaxq_s32(vmlaq_s32(v1020, v1022, v1325), (int32x4_t)0), v1379);
              int32x4_t v1044 = vcvtq_s32_f32(v1033);
              unsigned __int32 v1045 = v1043.u32[3];
              unsigned __int32 v1440 = v1043.u32[1];
              unsigned __int32 v1046 = v1043.u32[2];
              unsigned __int32 v1047 = v1043.i32[0];
              int32x4_t v1048 = vminq_s32(vmaxq_s32(vmlaq_s32(v1018, v1019, v1325), (int32x4_t)0), v1379);
              unint64_t v1049 = v962;
              unsigned __int32 v1050 = v1048.u32[2];
              unsigned __int32 v1051 = v1048.u32[3];
              unsigned __int32 v1052 = v1048.u32[1];
              unsigned __int32 v1053 = v1048.i32[0];
              int32x4_t v1054 = vcvtq_s32_f32(v1032);
              __int32 v1055 = v1054.i32[2];
              int32x4_t v1056 = v977;
              __int32 v1057 = v1054.i32[3];
              __int32 v1058 = v1054.i32[1];
              __int32 v1059 = v1054.i32[0];
              int32x4_t v1060 = vminq_s32(vmaxq_s32(vmlaq_s32(v1016, v1017, v1325), (int32x4_t)0), v1379);
              __int32 v1061 = v953[v1038];
              int32x4_t v1062 = vcvtq_s32_f32(v1031);
              if (v1042 < v1061) {
                LOWORD(v1061) = v1042;
              }
              unsigned __int32 v1063 = v1060.u32[1];
              v953[v1038] = v1061;
              unsigned __int32 v1064 = v1060.u32[2];
              unsigned __int32 v1065 = v1060.u32[3];
              __int16 v1066 = v1062.i16[2];
              unsigned __int32 v1067 = v1060.i32[0];
              __asm { FMOV            V0.4S, #16.0 }
              float32x4_t v980 = vaddq_f32(v980, _Q0);
              if (v1062.i32[1] >= v953[v1063]) {
                __int16 v1066 = v953[v1063];
              }
              v953[v1063] = v1066;
              if (v1055 >= v953[v1050]) {
                LOWORD(v1055) = v953[v1050];
              }
              v953[v1050] = v1055;
              unint64_t v962 = v1049;
              int v1069 = v953[v1045];
              if (v1044.i32[3] < v1069) {
                LOWORD(v1069) = v1044.i16[6];
              }
              v953[v1045] = v1069;
              __int32 v1070 = v953[v1475];
              if (v1040 < v1070) {
                LOWORD(v1070) = v1040;
              }
              v953[v1475] = v1070;
              int v1071 = v953[v1064];
              if (v1062.i32[2] < v1071) {
                LOWORD(v1071) = v1062.i16[4];
              }
              v953[v1064] = v1071;
              __int32 v1072 = v953[v1051];
              if (v1057 < v1072) {
                LOWORD(v1072) = v1057;
              }
              v953[v1051] = v1072;
              int v1073 = v953[v1047];
              if (v1044.i32[0] < v1073) {
                LOWORD(v1073) = v1044.i16[0];
              }
              v953[v1047] = v1073;
              __int32 v1074 = v953[v1037];
              if (v1041 < v1074) {
                LOWORD(v1074) = v1041;
              }
              v953[v1037] = v1074;
              int v1075 = v953[v1065];
              if (v1062.i32[3] < v1075) {
                LOWORD(v1075) = v1062.i16[6];
              }
              v953[v1065] = v1075;
              __int32 v1076 = v953[v1053];
              if (v1059 < v1076) {
                LOWORD(v1076) = v1059;
              }
              v953[v1053] = v1076;
              int v1077 = v953[v1440];
              if (v1044.i32[1] < v1077) {
                LOWORD(v1077) = v1044.i16[2];
              }
              v953[v1440] = v1077;
              __int32 v1078 = v953[HIDWORD(v1037)];
              if (v1450 < v1078) {
                LOWORD(v1078) = v1450;
              }
              v953[HIDWORD(v1037)] = v1078;
              int v1079 = v953[v1067];
              if (v1062.i32[0] < v1079) {
                LOWORD(v1079) = v1062.i16[0];
              }
              v953[v1067] = v1079;
              __int32 v1080 = v953[v1052];
              if (v1058 < v1080) {
                LOWORD(v1080) = v1058;
              }
              v953[v1052] = v1080;
              int v1081 = v953[v1046];
              if (v1044.i32[2] < v1081) {
                LOWORD(v1081) = v1044.i16[4];
              }
              v953[v1046] = v1081;
              float32x4_t v977 = v1056 + 4;
              float32x4_t v978 = v1495 + 32;
              uint64_t v979 = v1486 + 16;
            }
            while (v1486 + 16 < v1049);
            unint64_t v1082 = v1240;
            float32x4_t v965 = (float32x4_t)a14;
            float32x4_t v968 = (float32x4_t)a15;
            float32x4_t v967 = a12;
            float32x4_t v966 = a13;
            float32x2_t v975 = (float32x2_t)a18;
            float v959 = *(float *)&a11;
            float32x2_t v969 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
            size_t v943 = v1260;
            size_t v952 = v946 >> 1;
            float v960 = v1257;
            float v961 = 1.0 / *(float *)&v1476;
            float v963 = 0.5;
            float32x4_t v964 = v1291;
            int v974 = v1241;
            int v973 = v1242;
          }
          else
          {
            unint64_t v1082 = 0;
          }
          if (v1082 < v943)
          {
            do
            {
              float v1083 = 1000.0 / v977->f32[0];
              int32x4_t v1084 = (int32x4_t)vaddq_f32(v968, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v967, v960 * (float)(v1083 * (float)((float)((float)v1082 + v963) - v959))), v966, v961* (float)((float)((float)((float)v956 + v963) - *((float *)&a11 + 1)) * v1083)), v965, v1083));
              uint64_t v1085 = 0xFFFF0000FFFFLL;
              if (*(float *)&v1084.i32[2] >= 0.0 && v1083 > 0.0)
              {
                int32x2_t v1086 = vcvt_s32_f32(vmla_f32(v975, vdiv_f32(v969, (float32x2_t)vdup_laneq_s32(v1084, 2)), *(float32x2_t *)v1084.i8));
                if ((v1086.i32[0] & 0x80000000) == 0
                  && v973 > v1086.i32[0]
                  && (v1086.i32[1] & 0x80000000) == 0
                  && v974 > v1086.u16[2])
                {
                  __int32 v1087 = &v953[v952 * v1086.u16[2]];
                  unsigned int v1088 = vcvts_n_s32_f32(*(float *)&v1084.i32[2], 3uLL);
                  if (v1088 <= (unsigned __int16)(v1087[v1086.u32[0]] - 1)) {
                    v1087[v1086.u32[0]] = v1088;
                  }
                  uint64_t v1085 = (uint64_t)v1086;
                }
              }
              __int16 *v978 = v1085;
              v978[1] = WORD2(v1085);
              ++v1082;
              float32x4_t v977 = (float32x4_t *)((char *)v977 + 4);
              v978 += 2;
            }
            while (v943 != v1082);
          }
          ++v956;
          __asm { FMOV            V0.4S, #1.0 }
          float32x4_t v964 = vaddq_f32(v964, _Q0);
        }
        while (v956 != v1281);
        vImagePixelCount v955 = buf.height;
      }
      if (v955)
      {
        uint64_t v1090 = 0;
        long long v1091 = *(_OWORD *)&buf.width;
        int v1092 = (char *)buf.data;
        vImagePixelCount v1093 = buf.width >> 4;
        if (buf.width >> 4 <= 1) {
          vImagePixelCount v1093 = 1;
        }
        unint64_t v1094 = buf.width & 0xFFFFFFF0;
        do
        {
          unint64_t v1095 = (int8x8_t *)&v1092[*((void *)&v1091 + 1) * v1090];
          vImagePixelCount v1096 = v1093;
          if ((unint64_t)v1091 >= 0x10)
          {
            do
            {
              int16x4_t v1097 = (int16x4_t)v1095[2];
              int16x4_t v1098 = (int16x4_t)v1095[3];
              int8x8_t v1099 = vbic_s8(v1095[1], (int8x8_t)vceq_s16((int16x4_t)v1095[1], (int16x4_t)0x8000800080008000));
              int8x8_t *v1095 = vbic_s8(*v1095, (int8x8_t)vceq_s16((int16x4_t)*v1095, (int16x4_t)0x8000800080008000));
              v1095[1] = v1099;
              v1095[2] = vbic_s8((int8x8_t)v1097, (int8x8_t)vceq_s16(v1097, (int16x4_t)0x8000800080008000));
              v1095[3] = vbic_s8((int8x8_t)v1098, (int8x8_t)vceq_s16(v1098, (int16x4_t)0x8000800080008000));
              v1095 += 4;
              --v1096;
            }
            while (v1096);
          }
          unint64_t v1100 = v1091 & 0xFFFFFFFF0000000FLL;
          if ((unint64_t)v1091 > v1094)
          {
            do
            {
              if (v1095->i16[0] == 0x7FFF) {
                v1095->i16[0] = 0;
              }
              unint64_t v1095 = (int8x8_t *)((char *)v1095 + 2);
              --v1100;
            }
            while (v1100);
          }
          ++v1090;
        }
        while (v1090 != v955);
      }
      goto LABEL_321;
    }
    if (PixelFormatType == 1278226534) {
      goto LABEL_88;
    }
    if (PixelFormatType != 1278226536) {
      goto LABEL_322;
    }
LABEL_124:
    size_t v474 = CVPixelBufferGetHeight(a1);
    size_t v475 = CVPixelBufferGetWidth(a1);
    size_t v476 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v477 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v478 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&v1498, 0, sizeof(v1498));
    int8x16_t v479 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v479, &buf);
    PixelBufferUtils::asVImageBuffer(a2, *v479, &v1497);
    size_t v482 = v478 >> 1;
    size_t v483 = (char *)v1497.data;
    size_t v484 = v1497.rowBytes;
    size_t v485 = (short float *)buf.data;
    if (v482 * v476) {
      memset_pattern16(buf.data, &unk_247F24680, 2 * v482 * v476);
    }
    vImagePixelCount v486 = buf.height;
    if (v474)
    {
      unint64_t v487 = 0;
      v488.i32[1] = v1476;
      v489.i32[1] = HIDWORD(a9);
      float v490 = *(float *)&a11;
      float v491 = 1.0 / *(float *)&a9;
      float v492 = 1.0 / *(float *)&v1476;
      unint64_t v493 = v475 & 0xFFFFFFFFFFFFFFF0;
      float v494 = 0.5;
      *(float *)v480.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v495 = (float32x4_t)vdupq_lane_s32(v480, 0);
      float32x4_t v497 = a13;
      float32x4_t v496 = (float32x4_t)a14;
      *(float *)v480.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
      *(float *)v488.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
      *(float *)v489.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
      float32x4_t v1321 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1331 = (float32x4_t)vdupq_lane_s32(v489, 0);
      float32x4_t v1287 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1297 = (float32x4_t)vdupq_lane_s32(v488, 0);
      float32x4_t v1269 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      float32x4_t v1277 = (float32x4_t)vdupq_lane_s32(v480, 0);
      float32x4_t v498 = a12;
      float v499 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      float v1404 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      *(float *)&long long v481 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v1266 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      float32x4_t v500 = (float32x4_t)a15;
      float32x2_t v501 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
      float32x4_t v502 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v503 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v504 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      int32x4_t v1367 = vdupq_n_s32(v477);
      int32x4_t v505 = vdupq_n_s32(v476);
      float32x2_t v506 = (float32x2_t)a18;
      float32x4_t v507 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      float32x2_t v508 = (char *)v1498.data;
      size_t v509 = v1498.rowBytes;
      float v1349 = 1.0 / *(float *)&a9;
      float v1340 = 1.0 / *(float *)&v1476;
      float32x4_t v1436 = v502;
      float v1446 = v499;
      float32x4_t v1414 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      int32x4_t v1425 = vdupq_n_s32(LODWORD(buf.height) * (int)v482 - 2);
      int32x4_t v1385 = vdupq_n_s32(v482);
      float32x4_t v1394 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      float32x4_t v1376 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      do
      {
        float32x4_t v510 = (float32x4_t *)&v508[v509 * v487];
        float32x4_t v511 = (__int16 *)&v483[v487 * v484];
        unint64_t v512 = 0;
        if (v493)
        {
          float32x4_t v1471 = vmlaq_f32(v1321, v1331, v495);
          float32x4_t v1463 = vmlaq_f32(v1287, v1297, v495);
          float32x4_t v1358 = v495;
          float32x4_t v1455 = vmlaq_f32(v1269, v1277, v495);
          float32x4_t v513 = v1266;
          do
          {
            float32x4_t v514 = (float32x4_t)vdupq_n_s32(0x447A0000u);
            float32x4_t v515 = vdivq_f32(v514, *v510);
            float32x4_t v516 = vdivq_f32(v514, v510[1]);
            float32x4_t v517 = vdivq_f32(v514, v510[2]);
            __asm { FMOV            V0.4S, #4.0 }
            float32x4_t v519 = vaddq_f32(v513, _Q0);
            _Q0.i64[0] = 0x4100000041000000;
            _Q0.i64[1] = 0x4100000041000000;
            float32x4_t v520 = vaddq_f32(v513, _Q0);
            float32x4_t v521 = vdivq_f32(v514, v510[3]);
            __asm { FMOV            V0.4S, #12.0 }
            float32x4_t v523 = vaddq_f32(v513, _Q0);
            float32x4_t v524 = vmlaq_f32(v502, vmlaq_n_f32(v1455, v513, v499), v515);
            float32x4_t v525 = vmlaq_f32(v502, vmlaq_n_f32(v1455, v519, v499), v516);
            float32x4_t v526 = vmlaq_f32(v502, vmlaq_n_f32(v1455, v520, v499), v517);
            float32x4_t v527 = vmlaq_f32(v502, vmlaq_n_f32(v1455, v523, v499), v521);
            long long v528 = v481;
            float32x4_t v529 = vmlaq_f32(v503, vmlaq_n_f32(v1471, v513, *(float *)&v481), v515);
            float32x4_t v530 = vmlaq_f32(v504, vmlaq_n_f32(v1463, v513, v1404), v515);
            float32x4_t v531 = vmlaq_f32(v503, vmlaq_n_f32(v1471, v519, *(float *)&v481), v516);
            float32x4_t v532 = vmlaq_f32(v504, vmlaq_n_f32(v1463, v519, v1404), v516);
            int8x16_t v1482 = vandq_s8((int8x16_t)vcgezq_f32(v524), (int8x16_t)vcgtzq_f32(v515));
            float32x4_t v533 = vmlaq_f32(v503, vmlaq_n_f32(v1471, v520, *(float *)&v481), v517);
            int8x16_t v534 = vandq_s8((int8x16_t)vcgezq_f32(v525), (int8x16_t)vcgtzq_f32(v516));
            float32x4_t v535 = vmlaq_f32(v504, vmlaq_n_f32(v1463, v520, v1404), v517);
            int8x16_t v536 = vandq_s8((int8x16_t)vcgezq_f32(v526), (int8x16_t)vcgtzq_f32(v517));
            float32x4_t v537 = vmlaq_f32(v503, vmlaq_n_f32(v1471, v523, *(float *)&v528), v521);
            int8x16_t v1491 = vandq_s8((int8x16_t)vcgezq_f32(v527), (int8x16_t)vcgtzq_f32(v521));
            float32x4_t v538 = vmlaq_f32(v504, vmlaq_n_f32(v1463, v523, v1404), v521);
            float32x4_t v539 = vmlaq_f32(v507, vdivq_f32(v1414, v524), v529);
            float32x4_t v540 = vmlaq_f32(v1376, vdivq_f32(v1394, v524), v530);
            float32x4_t v541 = vmlaq_f32(v507, vdivq_f32(v1414, v525), v531);
            float32x4_t v542 = vmlaq_f32(v1376, vdivq_f32(v1394, v525), v532);
            float32x4_t v543 = vdivq_f32(v1414, v527);
            float32x4_t v544 = vdivq_f32(v1394, v527);
            float32x4_t v545 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
            int8x16_t v546 = (int8x16_t)vmulq_f32(v524, v545);
            int8x16_t v547 = (int8x16_t)vmulq_f32(v525, v545);
            int8x16_t v548 = (int8x16_t)vmulq_f32(v526, v545);
            int8x16_t v549 = (int8x16_t)vmulq_f32(v527, v545);
            int32x4_t v550 = vcvtmq_s32_f32(v539);
            int32x4_t v551 = vcvtmq_s32_f32(v540);
            int32x4_t v552 = vcvtmq_s32_f32(v541);
            int32x4_t v553 = vcvtmq_s32_f32(v542);
            int32x4_t v554 = vcvtmq_s32_f32(vmlaq_f32(v507, vdivq_f32(v1414, v526), v533));
            long long v481 = v528;
            int32x4_t v555 = vcvtmq_s32_f32(vmlaq_f32(v1376, vdivq_f32(v1394, v526), v535));
            int32x4_t v556 = vcvtmq_s32_f32(vmlaq_f32(v507, v543, v537));
            int32x4_t v557 = vcvtmq_s32_f32(vmlaq_f32(v1376, v544, v538));
            v517.i64[0] = -1;
            v517.i64[1] = -1;
            int32x4_t v558 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v505, v551), (int8x16_t)vcgtq_s32(v1367, v550)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v551, (int8x16_t)v550), (int32x4_t)v517)), v1482);
            *(int16x4_t *)v537.f32 = vmovn_s32(v558);
            *(int8x8_t *)v544.f32 = vorn_s8((int8x8_t)vmovn_s32(v550), *(int8x8_t *)v537.f32);
            int8x8_t v559 = vorn_s8((int8x8_t)vmovn_s32(v551), *(int8x8_t *)v537.f32);
            int32x4_t v560 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v505, v553), (int8x16_t)vcgtq_s32(v1367, v552)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v553, (int8x16_t)v552), (int32x4_t)v517)), v534);
            *(int16x4_t *)v540.f32 = vmovn_s32(v560);
            int32x4_t v561 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v505, v555), (int8x16_t)vcgtq_s32(v1367, v554)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v555, (int8x16_t)v554), (int32x4_t)v517)), v536);
            int32x4_t v562 = v511;
            vst2_s16(v562, (int16x4x2_t)v544);
            v562 += 8;
            *(int8x8_t *)v544.f32 = vorn_s8((int8x8_t)vmovn_s32(v552), *(int8x8_t *)v540.f32);
            int8x8_t v563 = vorn_s8((int8x8_t)vmovn_s32(v553), *(int8x8_t *)v540.f32);
            *(int16x4_t *)v536.i8 = vmovn_s32(v561);
            vst2_s16(v562, (int16x4x2_t)v544);
            *(int8x8_t *)v544.f32 = vorn_s8((int8x8_t)vmovn_s32(v554), *(int8x8_t *)v536.i8);
            int8x8_t v564 = vorn_s8((int8x8_t)vmovn_s32(v555), *(int8x8_t *)v536.i8);
            int8x16_t v565 = (int8x16_t)vdupq_n_s32(0x477FE000u);
            int32x4_t v566 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v505, v557), (int8x16_t)vcgtq_s32(v1367, v556)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v557, (int8x16_t)v556), (int32x4_t)v517)), v1491);
            float32x4_t v567 = (float32x4_t)vbslq_s8((int8x16_t)v558, v546, v565);
            float32x4_t v568 = (float32x4_t)vbslq_s8((int8x16_t)v560, v547, v565);
            float32x4_t v569 = (float32x4_t)vbslq_s8((int8x16_t)v561, v548, v565);
            float32x4_t v570 = (float32x4_t)vbslq_s8((int8x16_t)v566, v549, v565);
            *(int16x4_t *)v566.i8 = vmovn_s32(v566);
            int8x8_t v571 = v511 + 16;
            vst2_s16(v571, (int16x4x2_t)v544);
            float32x4_t v502 = v1436;
            float v499 = v1446;
            *(int8x8_t *)v565.i8 = vorn_s8((int8x8_t)vmovn_s32(v556), *(int8x8_t *)v566.i8);
            *(int8x8_t *)v541.f32 = vorn_s8((int8x8_t)vmovn_s32(v557), *(int8x8_t *)v566.i8);
            int8x16_t v572 = v511 + 24;
            vst2_s16(v572, *(int16x4x2_t *)((char *)&v541 - 8));
            int32x4_t v573 = vminq_s32(vmaxq_s32(vmlaq_s32(v550, v551, v1385), (int32x4_t)0), v1425);
            int32x4_t v574 = vminq_s32(vmaxq_s32(vmlaq_s32(v552, v553, v1385), (int32x4_t)0), v1425);
            int32x4_t v575 = vminq_s32(vmaxq_s32(vmlaq_s32(v554, v555, v1385), (int32x4_t)0), v1425);
            int32x4_t v576 = vminq_s32(vmaxq_s32(vmlaq_s32(v556, v557, v1385), (int32x4_t)0), v1425);
            LODWORD(v572) = v573.i32[1];
            *(float16x4_t *)v554.i8 = vcvt_f16_f32(v567);
            v485[v573.u32[0]] = fminl(*(short float *)v554.i16, v485[v573.u32[0]]);
            *(float16x4_t *)v556.i8 = vcvt_f16_f32(v568);
            v485[v574.u32[1]] = fminl(*(short float *)&v556.i16[1], v485[v574.u32[1]]);
            *(float16x4_t *)v573.i8 = vcvt_f16_f32(v569);
            v485[v575.u32[2]] = fminl(*(short float *)&v573.i16[2], v485[v575.u32[2]]);
            *(float16x4_t *)v570.f32 = vcvt_f16_f32(v570);
            v485[v576.u32[3]] = fminl(*(short float *)&v570.i16[3], v485[v576.u32[3]]);
            v485[v572] = fminl(*(short float *)&v554.i16[1], v485[v572]);
            v485[v574.u32[2]] = fminl(*(short float *)&v556.i16[2], v485[v574.u32[2]]);
            v485[v575.u32[3]] = fminl(*(short float *)&v573.i16[3], v485[v575.u32[3]]);
            v485[v576.u32[0]] = fminl(*(short float *)v570.i16, v485[v576.u32[0]]);
            v485[v573.u32[2]] = fminl(*(short float *)&v554.i16[2], v485[v573.u32[2]]);
            v485[v574.u32[3]] = fminl(*(short float *)&v556.i16[3], v485[v574.u32[3]]);
            v485[v575.u32[0]] = fminl(*(short float *)v573.i16, v485[v575.u32[0]]);
            v485[v576.u32[1]] = fminl(*(short float *)&v570.i16[1], v485[v576.u32[1]]);
            v485[v573.u32[3]] = fminl(*(short float *)&v554.i16[3], v485[v573.u32[3]]);
            v485[v574.u32[0]] = fminl(*(short float *)v556.i16, v485[v574.u32[0]]);
            v485[v575.u32[1]] = fminl(*(short float *)&v573.i16[1], v485[v575.u32[1]]);
            v485[v576.u32[2]] = fminl(*(short float *)&v570.i16[2], v485[v576.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v513 = vaddq_f32(v513, _Q0);
            v510 += 4;
            v511 += 32;
            v512 += 16;
          }
          while (v512 < v493);
          unint64_t v512 = (((v475 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v496 = (float32x4_t)a14;
          float32x4_t v500 = (float32x4_t)a15;
          float32x4_t v498 = a12;
          float32x4_t v497 = a13;
          float32x2_t v506 = (float32x2_t)a18;
          float v490 = *(float *)&a11;
          float32x2_t v501 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
          float v491 = v1349;
          float v492 = v1340;
          float v494 = 0.5;
          float32x4_t v495 = v1358;
        }
        if (v512 < v475)
        {
          do
          {
            float v578 = 1000.0 / v510->f32[0];
            int32x4_t v579 = (int32x4_t)vaddq_f32(v500, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v498, v491 * (float)(v578 * (float)((float)((float)v512 + v494) - v490))), v497, v492 * (float)((float)((float)((float)v487 + v494) - *((float *)&a11 + 1)) * v578)), v496, v578));
            uint64_t v580 = 0xFFFF0000FFFFLL;
            if (*(float *)&v579.i32[2] >= 0.0 && v578 > 0.0)
            {
              int32x2_t v581 = vcvt_s32_f32(vmla_f32(v506, vdiv_f32(v501, (float32x2_t)vdup_laneq_s32(v579, 2)), *(float32x2_t *)v579.i8));
              if ((v581.i32[0] & 0x80000000) == 0
                && (__int16)v477 > v581.i32[0]
                && (v581.i32[1] & 0x80000000) == 0
                && (__int16)v476 > (int)v581.u16[2])
              {
                _S0 = *(float *)&v579.i32[2] * 0.001;
                __asm
                {
                  FCVT            H0, S0
                  FCMP            H2, #0
                }
                if (_ZF) {
                  BOOL v585 = 0;
                }
                else {
                  BOOL v585 = _H2 <= _H0;
                }
                if (!v585) {
                  v485[v482 * v581.u16[2] + v581.u32[0]] = _H0;
                }
                uint64_t v580 = (uint64_t)v581;
              }
            }
            __int16 *v511 = v580;
            v511[1] = WORD2(v580);
            ++v512;
            float32x4_t v510 = (float32x4_t *)((char *)v510 + 4);
            v511 += 2;
          }
          while (v475 != v512);
        }
        ++v487;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v495 = vaddq_f32(v495, _Q0);
      }
      while (v487 != v474);
      vImagePixelCount v486 = buf.height;
    }
    if (v486)
    {
      uint64_t v587 = 0;
      long long v588 = *(_OWORD *)&buf.width;
      uint64_t v589 = (char *)buf.data;
      vImagePixelCount v590 = buf.width >> 4;
      if (buf.width >> 4 <= 1) {
        vImagePixelCount v590 = 1;
      }
      unint64_t v591 = buf.width & 0xFFFFFFF0;
      do
      {
        v592 = (int8x8_t *)&v589[*((void *)&v588 + 1) * v587];
        vImagePixelCount v593 = v590;
        if ((unint64_t)v588 >= 0x10)
        {
          do
          {
            float16x4_t v594 = (float16x4_t)v592[2];
            float16x4_t v595 = (float16x4_t)v592[3];
            int8x8_t v596 = vbic_s8(v592[1], (int8x8_t)vceq_f16((float16x4_t)v592[1], (float16x4_t)0x8400840084008400));
            int8x8_t *v592 = vbic_s8(*v592, (int8x8_t)vceq_f16((float16x4_t)*v592, (float16x4_t)0x8400840084008400));
            v592[1] = v596;
            v592[2] = vbic_s8((int8x8_t)v594, (int8x8_t)vceq_f16(v594, (float16x4_t)0x8400840084008400));
            v592[3] = vbic_s8((int8x8_t)v595, (int8x8_t)vceq_f16(v595, (float16x4_t)0x8400840084008400));
            v592 += 4;
            --v593;
          }
          while (v593);
        }
        unint64_t v597 = v588 & 0xFFFFFFFF0000000FLL;
        if ((unint64_t)v588 > v591)
        {
          do
          {
            if (*(short float *)v592->i16 == COERCE_SHORT_FLOAT(31743)) {
              v592->i16[0] = 0;
            }
            v592 = (int8x8_t *)((char *)v592 + 2);
            --v597;
          }
          while (v597);
        }
        ++v587;
      }
      while (v587 != v486);
    }
    goto LABEL_321;
  }
  if (PixelFormatType > 1751410031)
  {
    if (PixelFormatType != 1751410032)
    {
      if (PixelFormatType == 1751411059)
      {
        size_t v238 = CVPixelBufferGetHeight(a1);
        size_t v239 = CVPixelBufferGetWidth(a1);
        unsigned int v1422 = CVPixelBufferGetHeight(pixelBuffer);
        unsigned int v240 = CVPixelBufferGetWidth(pixelBuffer);
        size_t v241 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        CVPixelBufferLockBaseAddress(a1, 1uLL);
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        CVPixelBufferLockBaseAddress(a2, 0);
        memset(&v1498, 0, sizeof(v1498));
        size_t v242 = (CGRect *)MEMORY[0x263F001A8];
        PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
        memset(&buf, 0, sizeof(buf));
        PixelBufferUtils::asVImageBuffer(pixelBuffer, *v242, &buf);
        PixelBufferUtils::asVImageBuffer(a2, *v242, &v1497);
        unsigned int v243 = (char *)v1497.data;
        size_t v244 = v1497.rowBytes;
        size_t v245 = buf.data;
        int v246 = buf.height;
        bzero(buf.data, buf.height * buf.rowBytes);
        float32x4_t v251 = (float32x4_t)a14;
        float32x4_t v250 = (float32x4_t)a15;
        float32x4_t v253 = a12;
        float32x4_t v252 = a13;
        float32x2_t v255 = (float32x2_t)a18;
        float v254 = *(float *)&a11;
        v256.i32[0] = a16;
        if (v238)
        {
          unint64_t v257 = 0;
          float v258 = 1.0 / *(float *)&a9;
          v259.i32[1] = v1476;
          float v260 = 1.0 / *(float *)&v1476;
          unint64_t v261 = v239 & 0xFFFFFFFFFFFFFFF0;
          float v262 = 0.5;
          *(float *)v247.i32 = 0.5 - *((float *)&a11 + 1);
          float32x4_t v263 = (float32x4_t)vdupq_lane_s32(v247, 0);
          *(float *)v247.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
          *(float *)v259.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
          *(float *)v248.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
          float32x4_t v1338 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
          float32x4_t v1347 = (float32x4_t)vdupq_lane_s32(v248, 0);
          float32x4_t v1319 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
          float32x4_t v1329 = (float32x4_t)vdupq_lane_s32(v259, 0);
          float32x4_t v1285 = (float32x4_t)vdupq_laneq_s32(a14, 2);
          float32x4_t v1295 = (float32x4_t)vdupq_lane_s32(v247, 0);
          float v264 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
          *(float *)&long long v249 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
          float v265 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
          float32x4_t v266 = (float32x4_t)vdupq_laneq_s32(a15, 2);
          float32x4_t v267 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
          float32x4_t v1412 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
          int32x4_t v1392 = vdupq_n_s32(v240);
          int32x4_t v268 = vdupq_n_s32(v1422);
          float32x4_t v1275 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
          int v269 = (__int16)v1422;
          float32x4_t v270 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
          v256.i32[1] = DWORD1(a17);
          float32x4_t v271 = (char *)v1498.data;
          size_t v272 = v1498.rowBytes;
          float32x2_t v1316 = v256;
          float v1365 = 1.0 / *(float *)&a9;
          float v1356 = 1.0 / *(float *)&v1476;
          int32x4_t v1453 = vdupq_n_s32(v241 >> 1);
          float32x4_t v1461 = v266;
          float v1434 = v264;
          int32x4_t v1444 = vdupq_n_s32(v246 * (v241 >> 1) - 2);
          float32x4_t v1423 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
          float32x4_t v1402 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
          float32x4_t v1383 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
          do
          {
            float32x4_t v273 = (float32x4_t *)&v271[v272 * v257];
            v274 = (__int16 *)&v243[v257 * v244];
            unint64_t v275 = 0;
            if (v261)
            {
              float32x4_t v1489 = vmlaq_f32(v1338, v1347, v263);
              float32x4_t v1480 = vmlaq_f32(v1319, v1329, v263);
              float32x4_t v1374 = v263;
              float32x4_t v1469 = vmlaq_f32(v1285, v1295, v263);
              float32x4_t v276 = v1275;
              do
              {
                float32x4_t v277 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                float32x4_t v278 = vdivq_f32(v277, *v273);
                float32x4_t v279 = vdivq_f32(v277, v273[1]);
                float32x4_t v280 = vdivq_f32(v277, v273[2]);
                __asm { FMOV            V0.4S, #4.0 }
                float32x4_t v282 = vaddq_f32(v276, _Q0);
                _Q0.i64[0] = 0x4100000041000000;
                _Q0.i64[1] = 0x4100000041000000;
                float32x4_t v283 = vaddq_f32(v276, _Q0);
                __asm { FMOV            V0.4S, #12.0 }
                float32x4_t v285 = vaddq_f32(v276, _Q0);
                float32x4_t v286 = vdivq_f32(v277, v273[3]);
                float32x4_t v287 = vmlaq_f32(v266, vmlaq_n_f32(v1469, v276, v264), v278);
                float32x4_t v288 = vmlaq_f32(v266, vmlaq_n_f32(v1469, v282, v264), v279);
                float32x4_t v289 = vmlaq_f32(v266, vmlaq_n_f32(v1469, v283, v264), v280);
                float32x4_t v290 = vmlaq_f32(v266, vmlaq_n_f32(v1469, v285, v264), v286);
                int8x16_t v291 = (int8x16_t)vcgtzq_f32(v279);
                int32x4_t v292 = v268;
                int8x16_t v293 = vandq_s8((int8x16_t)vcgezq_f32(v287), (int8x16_t)vcgtzq_f32(v278));
                float32x4_t v294 = vmlaq_f32(v267, vmlaq_n_f32(v1489, v285, v265), v286);
                float32x4_t v295 = vmlaq_f32(v1412, vmlaq_n_f32(v1480, v285, *(float *)&v249), v286);
                int8x16_t v296 = vandq_s8((int8x16_t)vcgezq_f32(v289), (int8x16_t)vcgtzq_f32(v280));
                float32x4_t v297 = vmlaq_f32(v1402, vdivq_f32(v270, v287), vmlaq_f32(v267, vmlaq_n_f32(v1489, v276, v265), v278));
                float32x4_t v298 = vmlaq_f32(v1402, vdivq_f32(v270, v288), vmlaq_f32(v267, vmlaq_n_f32(v1489, v282, v265), v279));
                float32x4_t v299 = vmlaq_f32(v1383, vdivq_f32(v1423, v288), vmlaq_f32(v1412, vmlaq_n_f32(v1480, v282, *(float *)&v249), v279));
                float32x4_t v300 = vmlaq_f32(v1402, vdivq_f32(v270, v289), vmlaq_f32(v267, vmlaq_n_f32(v1489, v283, v265), v280));
                float32x4_t v301 = v267;
                long long v302 = v249;
                int8x16_t v303 = vandq_s8((int8x16_t)vcgezq_f32(v290), (int8x16_t)vcgtzq_f32(v286));
                int32x4_t v304 = vcvtmq_s32_f32(v297);
                int32x4_t v305 = vcvtmq_s32_f32(vmlaq_f32(v1383, vdivq_f32(v1423, v287), vmlaq_f32(v1412, vmlaq_n_f32(v1480, v276, *(float *)&v249), v278)));
                int32x4_t v306 = vcvtmq_s32_f32(v298);
                int32x4_t v307 = vcvtmq_s32_f32(v299);
                int32x4_t v308 = vcvtmq_s32_f32(v300);
                int32x4_t v309 = vcvtmq_s32_f32(vmlaq_f32(v1383, vdivq_f32(v1423, v289), vmlaq_f32(v1412, vmlaq_n_f32(v1480, v283, *(float *)&v249), v280)));
                float32x4_t v310 = vmlaq_f32(v1402, vdivq_f32(v270, v290), v294);
                int32x4_t v268 = v292;
                int32x4_t v311 = vcvtmq_s32_f32(v310);
                int32x4_t v312 = vcvtmq_s32_f32(vmlaq_f32(v1383, vdivq_f32(v1423, v290), v295));
                int16x4x2_t v313 = (int16x4x2_t)vcgtq_s32(v292, v305);
                v292.i64[0] = -1;
                v292.i64[1] = -1;
                int32x4_t v314 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)v313, (int8x16_t)vcgtq_s32(v1392, v304)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v305, (int8x16_t)v304), v292)), v293);
                int32x4_t v315 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v268, v307), (int8x16_t)vcgtq_s32(v1392, v306)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v307, (int8x16_t)v306), v292)), vandq_s8((int8x16_t)vcgezq_f32(v288), v291));
                int32x4_t v316 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v268, v309), (int8x16_t)vcgtq_s32(v1392, v308)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v309, (int8x16_t)v308), v292)), v296);
                *(int16x4_t *)v293.i8 = vmovn_s32(v314);
                v313.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v304), *(int8x8_t *)v293.i8);
                int8x8_t v317 = vorn_s8((int8x8_t)vmovn_s32(v305), *(int8x8_t *)v293.i8);
                *(int16x4_t *)v299.f32 = vmovn_s32(v315);
                int32x4_t v318 = v274;
                vst2_s16(v318, v313);
                v318 += 8;
                v313.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v306), *(int8x8_t *)v299.f32);
                int8x8_t v319 = vorn_s8((int8x8_t)vmovn_s32(v307), *(int8x8_t *)v299.f32);
                *(int16x4_t *)v299.f32 = vmovn_s32(v316);
                int32x4_t v320 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v268, v312), (int8x16_t)vcgtq_s32(v1392, v311)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v312, (int8x16_t)v311), v292)), v303);
                vst2_s16(v318, v313);
                v313.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v308), *(int8x8_t *)v299.f32);
                int8x8_t v321 = vorn_s8((int8x8_t)vmovn_s32(v309), *(int8x8_t *)v299.f32);
                int8x8_t v322 = v274 + 16;
                *(int16x4_t *)v299.f32 = vmovn_s32(v320);
                vst2_s16(v322, v313);
                v313.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v311), *(int8x8_t *)v299.f32);
                int8x8_t v323 = vorn_s8((int8x8_t)vmovn_s32(v312), *(int8x8_t *)v299.f32);
                int8x8_t v324 = v274 + 24;
                vst2_s16(v324, v313);
                long long v249 = v302;
                float32x4_t v267 = v301;
                float32x4_t v266 = v1461;
                int8x16_t v325 = (int8x16_t)vdivq_f32(v277, v290);
                int32x4_t v326 = vmlaq_s32(v308, v309, v1453);
                int32x4_t v327 = vmlaq_s32(v311, v312, v1453);
                float v264 = v1434;
                float32x4_t v328 = (float32x4_t)vandq_s8((int8x16_t)vdivq_f32(v277, v287), (int8x16_t)v314);
                float32x4_t v329 = (float32x4_t)vandq_s8((int8x16_t)vdivq_f32(v277, v288), (int8x16_t)v315);
                float32x4_t v330 = (float32x4_t)vandq_s8((int8x16_t)vdivq_f32(v277, v289), (int8x16_t)v316);
                int32x4_t v331 = vminq_s32(vmaxq_s32(vmlaq_s32(v304, v305, v1453), (int32x4_t)0), v1444);
                int32x4_t v332 = vminq_s32(vmaxq_s32(vmlaq_s32(v306, v307, v1453), (int32x4_t)0), v1444);
                int32x4_t v333 = vminq_s32(vmaxq_s32(v326, (int32x4_t)0), v1444);
                int32x4_t v334 = vminq_s32(vmaxq_s32(v327, (int32x4_t)0), v1444);
                float32x4_t v335 = (float32x4_t)vandq_s8(v325, (int8x16_t)v320);
                LODWORD(v324) = v331.i32[1];
                unsigned __int32 v336 = v331.i32[0];
                v325.i16[0] = v245[v331.u32[0]];
                *(float16x4_t *)v331.i8 = vcvt_f16_f32(v328);
                *(short float *)&v245[v336] = fmaxl(*(short float *)v331.i16, *(short float *)v325.i16);
                *(float16x4_t *)v329.f32 = vcvt_f16_f32(v329);
                *(short float *)&v245[v332.u32[1]] = fmaxl(*(short float *)&v329.i16[1], *(short float *)&v245[v332.u32[1]]);
                *(float16x4_t *)v330.f32 = vcvt_f16_f32(v330);
                *(short float *)&v245[v333.u32[2]] = fmaxl(*(short float *)&v330.i16[2], *(short float *)&v245[v333.u32[2]]);
                *(float16x4_t *)v335.f32 = vcvt_f16_f32(v335);
                *(short float *)&v245[v334.u32[3]] = fmaxl(*(short float *)&v335.i16[3], *(short float *)&v245[v334.u32[3]]);
                *(short float *)&v245[v324] = fmaxl(*(short float *)&v331.i16[1], *(short float *)&v245[v324]);
                *(short float *)&v245[v332.u32[2]] = fmaxl(*(short float *)&v329.i16[2], *(short float *)&v245[v332.u32[2]]);
                *(short float *)&v245[v333.u32[3]] = fmaxl(*(short float *)&v330.i16[3], *(short float *)&v245[v333.u32[3]]);
                *(short float *)&v245[v334.u32[0]] = fmaxl(*(short float *)v335.i16, *(short float *)&v245[v334.u32[0]]);
                *(short float *)&v245[v331.u32[2]] = fmaxl(*(short float *)&v331.i16[2], *(short float *)&v245[v331.u32[2]]);
                *(short float *)&v245[v332.u32[3]] = fmaxl(*(short float *)&v329.i16[3], *(short float *)&v245[v332.u32[3]]);
                *(short float *)&v245[v333.u32[0]] = fmaxl(*(short float *)v330.i16, *(short float *)&v245[v333.u32[0]]);
                *(short float *)&v245[v334.u32[1]] = fmaxl(*(short float *)&v335.i16[1], *(short float *)&v245[v334.u32[1]]);
                *(short float *)&v245[v331.u32[3]] = fmaxl(*(short float *)&v331.i16[3], *(short float *)&v245[v331.u32[3]]);
                *(short float *)&v245[v332.u32[0]] = fmaxl(*(short float *)v329.i16, *(short float *)&v245[v332.u32[0]]);
                *(short float *)&v245[v333.u32[1]] = fmaxl(*(short float *)&v330.i16[1], *(short float *)&v245[v333.u32[1]]);
                *(short float *)&v245[v334.u32[2]] = fmaxl(*(short float *)&v335.i16[2], *(short float *)&v245[v334.u32[2]]);
                __asm { FMOV            V0.4S, #16.0 }
                float32x4_t v276 = vaddq_f32(v276, _Q0);
                v273 += 4;
                v274 += 32;
                v275 += 16;
              }
              while (v275 < v261);
              unint64_t v275 = (((v239 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
              float32x4_t v251 = (float32x4_t)a14;
              float32x4_t v250 = (float32x4_t)a15;
              float32x4_t v253 = a12;
              float32x4_t v252 = a13;
              float32x2_t v255 = (float32x2_t)a18;
              float v254 = *(float *)&a11;
              float32x2_t v256 = v1316;
              float v258 = v1365;
              float v260 = v1356;
              float v262 = 0.5;
              float32x4_t v263 = v1374;
            }
            if (v275 < v239)
            {
              do
              {
                float v338 = 1000.0 / v273->f32[0];
                int32x4_t v339 = (int32x4_t)vaddq_f32(v250, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v253, v258 * (float)(v338 * (float)((float)((float)v275 + v262) - v254))), v252, v260* (float)((float)((float)((float)v257 + v262) - *((float *)&a11 + 1)) * v338)), v251, v338));
                uint64_t v340 = 0xFFFF0000FFFFLL;
                if (*(float *)&v339.i32[2] >= 0.0 && v338 > 0.0)
                {
                  int32x2_t v341 = vcvt_s32_f32(vmla_f32(v255, vdiv_f32(v256, (float32x2_t)vdup_laneq_s32(v339, 2)), *(float32x2_t *)v339.i8));
                  if ((v341.i32[0] & 0x80000000) == 0
                    && (__int16)v240 > v341.i32[0]
                    && (v341.i32[1] & 0x80000000) == 0
                    && v269 > v341.u16[2])
                  {
                    _S0 = 1000.0 / *(float *)&v339.i32[2];
                    __asm
                    {
                      FCVT            H0, S0
                      FCMP            H2, #0
                    }
                    if (_ZF) {
                      BOOL v345 = 1;
                    }
                    else {
                      BOOL v345 = _H2 < _H0;
                    }
                    if (v345) {
                      *(short float *)&v245[(v241 >> 1) * v341.u16[2] + v341.u32[0]] = _H0;
                    }
                    uint64_t v340 = (uint64_t)v341;
                  }
                }
                __int16 *v274 = v340;
                v274[1] = WORD2(v340);
                ++v275;
                float32x4_t v273 = (float32x4_t *)((char *)v273 + 4);
                v274 += 2;
              }
              while (v239 != v275);
            }
            ++v257;
            __asm { FMOV            V0.4S, #1.0 }
            float32x4_t v263 = vaddq_f32(v263, _Q0);
          }
          while (v257 != v238);
        }
        goto LABEL_321;
      }
      goto LABEL_322;
    }
    goto LABEL_124;
  }
  if (PixelFormatType == 1717855600)
  {
LABEL_88:
    size_t v347 = CVPixelBufferGetHeight(a1);
    size_t v348 = CVPixelBufferGetWidth(a1);
    size_t v349 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v350 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v351 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&v1498, 0, sizeof(v1498));
    size_t v352 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v352, &buf);
    PixelBufferUtils::asVImageBuffer(a2, *v352, &v1497);
    size_t v356 = v351 >> 2;
    v357 = (char *)v1497.data;
    size_t v358 = v1497.rowBytes;
    long long v359 = (float *)buf.data;
    if (v356 * v349) {
      memset_pattern16(buf.data, &unk_247F24670, 4 * v356 * v349);
    }
    vImagePixelCount v360 = buf.height;
    if (v347)
    {
      unint64_t v361 = 0;
      v362.i32[1] = v1476;
      v363.i32[1] = HIDWORD(a9);
      float v364 = *(float *)&a11;
      float v365 = 1.0 / *(float *)&a9;
      float v366 = 1.0 / *(float *)&v1476;
      unint64_t v367 = v348 & 0xFFFFFFFFFFFFFFF0;
      float v368 = 0.5;
      *(float *)v353.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v369 = (float32x4_t)vdupq_lane_s32(v353, 0);
      float32x4_t v371 = a13;
      float32x4_t v370 = (float32x4_t)a14;
      *(float *)v353.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
      *(float *)v362.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
      *(float *)v363.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
      float32x4_t v1339 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1348 = (float32x4_t)vdupq_lane_s32(v363, 0);
      float32x4_t v1320 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1330 = (float32x4_t)vdupq_lane_s32(v362, 0);
      float32x4_t v1286 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      float32x4_t v1296 = (float32x4_t)vdupq_lane_s32(v353, 0);
      float32x4_t v372 = a12;
      float v373 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      *(float *)&long long v354 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      *(float *)&long long v355 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v1276 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      float32x4_t v374 = (float32x4_t)a15;
      float32x2_t v375 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
      float32x4_t v376 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v377 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v378 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      int32x4_t v1393 = vdupq_n_s32(v349);
      int32x4_t v1403 = vdupq_n_s32(v350);
      float32x2_t v379 = (float32x2_t)a18;
      float32x2_t v380 = (char *)v1498.data;
      size_t v381 = v1498.rowBytes;
      v382.i64[0] = 0x4100000041000000;
      v382.i64[1] = 0x4100000041000000;
      float v1366 = 1.0 / *(float *)&a9;
      float v1357 = 1.0 / *(float *)&v1476;
      int32x4_t v1454 = vdupq_n_s32(v356);
      float v1462 = v373;
      float32x4_t v1435 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      float32x4_t v1445 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      float32x4_t v1413 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      int32x4_t v1424 = vdupq_n_s32(LODWORD(buf.height) * (int)v356 - 4);
      float32x4_t v1384 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      do
      {
        float32x4_t v383 = (float32x4_t *)&v380[v381 * v361];
        float32x2_t v384 = (__int16 *)&v357[v361 * v358];
        unint64_t v385 = 0;
        if (v367)
        {
          float32x4_t v1490 = vmlaq_f32(v1339, v1348, v369);
          float32x4_t v1481 = vmlaq_f32(v1320, v1330, v369);
          float32x4_t v1375 = v369;
          float32x4_t v1470 = vmlaq_f32(v1286, v1296, v369);
          float32x4_t v386 = v1276;
          do
          {
            float32x4_t v387 = (float32x4_t)vdupq_n_s32(0x447A0000u);
            float32x4_t v388 = vdivq_f32(v387, *v383);
            float32x4_t v389 = vdivq_f32(v387, v383[1]);
            float32x4_t v390 = vdivq_f32(v387, v383[2]);
            __asm { FMOV            V0.4S, #4.0 }
            float32x4_t v392 = vaddq_f32(v386, _Q0);
            float32x4_t v393 = vaddq_f32(v386, v382);
            __asm { FMOV            V0.4S, #12.0 }
            float32x4_t v395 = vaddq_f32(v386, _Q0);
            float32x4_t v396 = vdivq_f32(v387, v383[3]);
            float32x4_t v397 = vmlaq_f32(v376, vmlaq_n_f32(v1470, v386, v373), v388);
            float32x4_t v398 = vmlaq_f32(v376, vmlaq_n_f32(v1470, v392, v373), v389);
            float32x4_t v399 = vmlaq_f32(v376, vmlaq_n_f32(v1470, v393, v373), v390);
            float32x4_t v400 = vmlaq_f32(v376, vmlaq_n_f32(v1470, v395, v373), v396);
            int8x16_t v401 = (int8x16_t)vcgtzq_f32(v388);
            int8x16_t v402 = (int8x16_t)vcgtzq_f32(v389);
            float32x4_t v403 = vmlaq_f32(v377, vmlaq_n_f32(v1490, v386, *(float *)&v355), v388);
            float32x4_t v404 = vmlaq_f32(v378, vmlaq_n_f32(v1481, v386, *(float *)&v354), v388);
            float32x4_t v405 = vmlaq_f32(v377, vmlaq_n_f32(v1490, v392, *(float *)&v355), v389);
            float32x4_t v406 = v376;
            float32x4_t v407 = vmlaq_f32(v378, vmlaq_n_f32(v1481, v392, *(float *)&v354), v389);
            float32x4_t v408 = vmlaq_f32(v377, vmlaq_n_f32(v1490, v393, *(float *)&v355), v390);
            float32x4_t v409 = vmlaq_f32(v378, vmlaq_n_f32(v1481, v393, *(float *)&v354), v390);
            float32x4_t v410 = vmlaq_f32(v377, vmlaq_n_f32(v1490, v395, *(float *)&v355), v396);
            int16x4x2_t v411 = (int16x4x2_t)vandq_s8((int8x16_t)vcgezq_f32(v398), v402);
            float32x4_t v412 = vmlaq_f32(v378, vmlaq_n_f32(v1481, v395, *(float *)&v354), v396);
            float32x4_t v413 = v377;
            long long v414 = v355;
            long long v415 = v354;
            int8x16_t v416 = vandq_s8((int8x16_t)vcgezq_f32(v399), (int8x16_t)vcgtzq_f32(v390));
            float32x4_t v417 = vmlaq_f32(v1413, vdivq_f32(v1445, v398), v405);
            float32x4_t v418 = vmlaq_f32(v1384, vdivq_f32(v1435, v398), v407);
            int8x16_t v419 = vandq_s8((int8x16_t)vcgezq_f32(v400), (int8x16_t)vcgtzq_f32(v396));
            int32x4_t v420 = vcvtmq_s32_f32(vmlaq_f32(v1413, vdivq_f32(v1445, v397), v403));
            int32x4_t v421 = vcvtmq_s32_f32(vmlaq_f32(v1384, vdivq_f32(v1435, v397), v404));
            int32x4_t v422 = vcvtmq_s32_f32(v417);
            int32x4_t v423 = vcvtmq_s32_f32(v418);
            int32x4_t v424 = vcvtmq_s32_f32(vmlaq_f32(v1413, vdivq_f32(v1445, v399), v408));
            int32x4_t v425 = vcvtmq_s32_f32(vmlaq_f32(v1384, vdivq_f32(v1435, v399), v409));
            int32x4_t v426 = vcvtmq_s32_f32(vmlaq_f32(v1413, vdivq_f32(v1445, v400), v410));
            int32x4_t v427 = vcvtmq_s32_f32(vmlaq_f32(v1384, vdivq_f32(v1435, v400), v412));
            v417.i64[0] = -1;
            v417.i64[1] = -1;
            int32x4_t v428 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1393, v421), (int8x16_t)vcgtq_s32(v1403, v420)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v421, (int8x16_t)v420), (int32x4_t)v417)), vandq_s8((int8x16_t)vcgezq_f32(v397), v401));
            int32x4_t v429 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1393, v423), (int8x16_t)vcgtq_s32(v1403, v422)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v423, (int8x16_t)v422), (int32x4_t)v417)), (int8x16_t)v411);
            int32x4_t v430 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1393, v425), (int8x16_t)vcgtq_s32(v1403, v424)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v425, (int8x16_t)v424), (int32x4_t)v417)), v416);
            *(int16x4_t *)v410.f32 = vmovn_s32(v428);
            v411.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v420), *(int8x8_t *)v410.f32);
            *(int8x8_t *)v416.i8 = vorn_s8((int8x8_t)vmovn_s32(v421), *(int8x8_t *)v410.f32);
            *(int16x4_t *)v418.f32 = vmovn_s32(v429);
            int32x4_t v431 = v384;
            vst2_s16(v431, v411);
            v431 += 8;
            v411.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v422), *(int8x8_t *)v418.f32);
            *(int8x8_t *)v416.i8 = vorn_s8((int8x8_t)vmovn_s32(v423), *(int8x8_t *)v418.f32);
            *(int16x4_t *)v418.f32 = vmovn_s32(v430);
            int32x4_t v432 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1393, v427), (int8x16_t)vcgtq_s32(v1403, v426)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v427, (int8x16_t)v426), (int32x4_t)v417)), v419);
            vst2_s16(v431, v411);
            v411.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v424), *(int8x8_t *)v418.f32);
            *(int8x8_t *)v416.i8 = vorn_s8((int8x8_t)vmovn_s32(v425), *(int8x8_t *)v418.f32);
            int32x4_t v433 = v384 + 16;
            *(int16x4_t *)v418.f32 = vmovn_s32(v432);
            vst2_s16(v433, v411);
            v411.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v426), *(int8x8_t *)v418.f32);
            *(int8x8_t *)v416.i8 = vorn_s8((int8x8_t)vmovn_s32(v427), *(int8x8_t *)v418.f32);
            int32x4_t v434 = v384 + 24;
            vst2_s16(v434, v411);
            float32x4_t v376 = v406;
            long long v354 = v415;
            long long v355 = v414;
            float32x4_t v377 = v413;
            v382.i64[0] = 0x4100000041000000;
            v382.i64[1] = 0x4100000041000000;
            float32x4_t v435 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
            int8x16_t v436 = (int8x16_t)vmulq_f32(v397, v435);
            int8x16_t v437 = (int8x16_t)vmulq_f32(v398, v435);
            int8x16_t v438 = (int8x16_t)vmulq_f32(v399, v435);
            int8x16_t v439 = (int8x16_t)vmulq_f32(v400, v435);
            int32x4_t v440 = vmlaq_s32(v422, v423, v1454);
            int8x16_t v441 = (int8x16_t)vdupq_n_s32(0x7F7FFFFFu);
            int8x16_t v442 = vbslq_s8((int8x16_t)v428, v436, v441);
            int32x4_t v443 = vminq_s32(vmaxq_s32(vmlaq_s32(v420, v421, v1454), (int32x4_t)0), v1424);
            LODWORD(v434) = v443.i32[1];
            unsigned __int32 v444 = v443.u32[2];
            unsigned __int32 v445 = v443.u32[3];
            int32x4_t v446 = vminq_s32(vmaxq_s32(v440, (int32x4_t)0), v1424);
            int8x16_t v447 = vbslq_s8((int8x16_t)v429, v437, v441);
            float v373 = v1462;
            v359[v443.u32[0]] = fminf(*(float *)v442.i32, v359[v443.u32[0]]);
            int32x4_t v448 = vminq_s32(vmaxq_s32(vmlaq_s32(v424, v425, v1454), (int32x4_t)0), v1424);
            v359[v446.u32[1]] = fminf(*(float *)&v447.i32[1], v359[v446.u32[1]]);
            int8x16_t v449 = vbslq_s8((int8x16_t)v430, v438, v441);
            v359[v448.u32[2]] = fminf(*(float *)&v449.i32[2], v359[v448.u32[2]]);
            int32x4_t v450 = vminq_s32(vmaxq_s32(vmlaq_s32(v426, v427, v1454), (int32x4_t)0), v1424);
            int8x16_t v451 = vbslq_s8((int8x16_t)v432, v439, v441);
            v359[v450.u32[3]] = fminf(*(float *)&v451.i32[3], v359[v450.u32[3]]);
            v359[v434] = fminf(*(float *)&v442.i32[1], v359[v434]);
            v359[v446.u32[2]] = fminf(*(float *)&v447.i32[2], v359[v446.u32[2]]);
            v359[v448.u32[3]] = fminf(*(float *)&v449.i32[3], v359[v448.u32[3]]);
            v359[v450.u32[0]] = fminf(*(float *)v451.i32, v359[v450.u32[0]]);
            v359[v444] = fminf(*(float *)&v442.i32[2], v359[v444]);
            v359[v446.u32[3]] = fminf(*(float *)&v447.i32[3], v359[v446.u32[3]]);
            v359[v448.u32[0]] = fminf(*(float *)v449.i32, v359[v448.u32[0]]);
            v359[v450.u32[1]] = fminf(*(float *)&v451.i32[1], v359[v450.u32[1]]);
            v359[v445] = fminf(*(float *)&v442.i32[3], v359[v445]);
            v359[v446.u32[0]] = fminf(*(float *)v447.i32, v359[v446.u32[0]]);
            v359[v448.u32[1]] = fminf(*(float *)&v449.i32[1], v359[v448.u32[1]]);
            v359[v450.u32[2]] = fminf(*(float *)&v451.i32[2], v359[v450.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v386 = vaddq_f32(v386, _Q0);
            v383 += 4;
            v384 += 32;
            v385 += 16;
          }
          while (v385 < v367);
          unint64_t v385 = (((v348 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v370 = (float32x4_t)a14;
          float32x4_t v374 = (float32x4_t)a15;
          float32x4_t v372 = a12;
          float32x4_t v371 = a13;
          float32x2_t v379 = (float32x2_t)a18;
          float v364 = *(float *)&a11;
          float32x2_t v375 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
          float v365 = v1366;
          float v366 = v1357;
          float v368 = 0.5;
          float32x4_t v369 = v1375;
        }
        if (v385 < v348)
        {
          do
          {
            float v453 = 1000.0 / v383->f32[0];
            int32x4_t v454 = (int32x4_t)vaddq_f32(v374, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v372, v365 * (float)(v453 * (float)((float)((float)v385 + v368) - v364))), v371, v366 * (float)((float)((float)((float)v361 + v368) - *((float *)&a11 + 1)) * v453)), v370, v453));
            uint64_t v455 = 0xFFFF0000FFFFLL;
            if (*(float *)&v454.i32[2] >= 0.0 && v453 > 0.0)
            {
              int32x2_t v456 = vcvt_s32_f32(vmla_f32(v379, vdiv_f32(v375, (float32x2_t)vdup_laneq_s32(v454, 2)), *(float32x2_t *)v454.i8));
              if ((v456.i32[0] & 0x80000000) == 0
                && (__int16)v350 > v456.i32[0]
                && (v456.i32[1] & 0x80000000) == 0
                && (__int16)v349 > (int)v456.u16[2])
              {
                float v457 = *(float *)&v454.i32[2] * 0.001;
                v458 = &v359[v356 * v456.u16[2]];
                float v459 = v458[v456.u32[0]];
                if (v459 == 0.0 || v459 > v457) {
                  v458[v456.u32[0]] = v457;
                }
                uint64_t v455 = (uint64_t)v456;
              }
            }
            __int16 *v384 = v455;
            v384[1] = WORD2(v455);
            ++v385;
            float32x4_t v383 = (float32x4_t *)((char *)v383 + 4);
            v384 += 2;
          }
          while (v348 != v385);
        }
        ++v361;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v369 = vaddq_f32(v369, _Q0);
      }
      while (v361 != v347);
      vImagePixelCount v360 = buf.height;
    }
    if (v360)
    {
      uint64_t v462 = 0;
      long long v463 = *(_OWORD *)&buf.width;
      float v464 = (char *)buf.data;
      vImagePixelCount v465 = buf.width >> 4;
      if (buf.width >> 4 <= 1) {
        vImagePixelCount v465 = 1;
      }
      unint64_t v466 = buf.width & 0xFFFFFFF0;
      float32x4_t v467 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
      do
      {
        v468 = (float32x4_t *)&v464[*((void *)&v463 + 1) * v462];
        vImagePixelCount v469 = v465;
        if ((unint64_t)v463 >= 0x10)
        {
          do
          {
            float32x4_t v470 = v468[2];
            float32x4_t v471 = v468[3];
            int8x16_t v472 = vbicq_s8((int8x16_t)v468[1], (int8x16_t)vceqq_f32(v468[1], v467));
            *(int8x16_t *)v468 = vbicq_s8(*(int8x16_t *)v468, (int8x16_t)vceqq_f32(*v468, v467));
            v468[1] = (float32x4_t)v472;
            v468[2] = (float32x4_t)vbicq_s8((int8x16_t)v470, (int8x16_t)vceqq_f32(v470, v467));
            v468[3] = (float32x4_t)vbicq_s8((int8x16_t)v471, (int8x16_t)vceqq_f32(v471, v467));
            v468 += 4;
            --v469;
          }
          while (v469);
        }
        unint64_t v473 = v463 & 0xFFFFFFFF0000000FLL;
        if ((unint64_t)v463 > v466)
        {
          do
          {
            if (v468->f32[0] == 3.4028e38) {
              v468->i32[0] = 0;
            }
            v468 = (float32x4_t *)((char *)v468 + 4);
            --v473;
          }
          while (v473);
        }
        ++v462;
      }
      while (v462 != v360);
    }
    goto LABEL_321;
  }
  if (PixelFormatType == 1717856627)
  {
    size_t v21 = CVPixelBufferGetHeight(a1);
    size_t v22 = CVPixelBufferGetWidth(a1);
    unsigned int v1431 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v23 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v24 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&v1498, 0, sizeof(v1498));
    size_t v25 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1498);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v25, &buf);
    PixelBufferUtils::asVImageBuffer(a2, *v25, &v1497);
    double v26 = (char *)v1497.data;
    size_t v27 = v1497.rowBytes;
    size_t v28 = (float *)buf.data;
    int v29 = buf.height;
    bzero(buf.data, buf.height * buf.rowBytes);
    float32x4_t v33 = (float32x4_t)a14;
    float32x4_t v32 = (float32x4_t)a15;
    float32x4_t v35 = a12;
    float32x4_t v34 = a13;
    float32x2_t v37 = (float32x2_t)a18;
    float v36 = *(float *)&a11;
    v38.i32[0] = a16;
    if (v21)
    {
      unint64_t v39 = 0;
      float v40 = 1.0 / *(float *)&a9;
      v41.i32[1] = v1476;
      float v42 = 1.0 / *(float *)&v1476;
      unint64_t v43 = v22 & 0xFFFFFFFFFFFFFFF0;
      float v44 = 0.5;
      *(float *)v30.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v45 = (float32x4_t)vdupq_lane_s32(v30, 0);
      *(float *)v30.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, a13, 2);
      *(float *)v41.i32 = vmuls_lane_f32(1.0 / *(float *)&v1476, *(float32x2_t *)a13.f32, 1);
      *(float *)v31.i32 = (float)(1.0 / *(float *)&v1476) * a13.f32[0];
      float32x4_t v1317 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1327 = (float32x4_t)vdupq_lane_s32(v31, 0);
      float32x4_t v1283 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1293 = (float32x4_t)vdupq_lane_s32(v41, 0);
      float32x4_t v1268 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      float32x4_t v1273 = (float32x4_t)vdupq_lane_s32(v30, 0);
      float v46 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      float v47 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      float v48 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v49 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v50 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v51 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      int32x4_t v52 = vdupq_n_s32(v1431);
      float32x4_t v1265 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      int v53 = (__int16)v1431;
      float32x4_t v54 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      v38.i32[1] = DWORD1(a17);
      size_t v55 = (char *)v1498.data;
      size_t v56 = v1498.rowBytes;
      v57.i64[0] = 0x4100000041000000;
      v57.i64[1] = 0x4100000041000000;
      float32x2_t v1315 = v38;
      float v1345 = 1.0 / *(float *)&a9;
      float v1336 = 1.0 / *(float *)&v1476;
      int32x4_t v1451 = vdupq_n_s32(v29 * (v24 >> 2) - 4);
      float32x4_t v1459 = v49;
      float32x4_t v1432 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      int32x4_t v1442 = vdupq_n_s32(v24 >> 2);
      int32x4_t v1410 = v52;
      float v1420 = v46;
      float32x4_t v1390 = v50;
      float32x4_t v1400 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      float32x4_t v1372 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      int32x4_t v1381 = vdupq_n_s32(v23);
      float v1363 = v47;
      do
      {
        v58 = (float32x4_t *)&v55[v56 * v39];
        unint64_t v59 = (__int16 *)&v26[v39 * v27];
        unint64_t v60 = 0;
        if (v43)
        {
          float32x4_t v1487 = vmlaq_f32(v1317, v1327, v45);
          float32x4_t v1478 = vmlaq_f32(v1283, v1293, v45);
          float32x4_t v1354 = v45;
          float32x4_t v1467 = vmlaq_f32(v1268, v1273, v45);
          float32x4_t v61 = v1265;
          do
          {
            float32x4_t v62 = (float32x4_t)vdupq_n_s32(0x447A0000u);
            float32x4_t v63 = vdivq_f32(v62, *v58);
            float32x4_t v64 = vdivq_f32(v62, v58[1]);
            __asm { FMOV            V0.4S, #4.0 }
            float32x4_t v69 = vaddq_f32(v61, _Q0);
            float32x4_t v70 = vdivq_f32(v62, v58[2]);
            float32x4_t v71 = vaddq_f32(v61, v57);
            __asm { FMOV            V0.4S, #12.0 }
            float32x4_t v73 = vaddq_f32(v61, _Q0);
            float32x4_t v74 = vdivq_f32(v62, v58[3]);
            float32x4_t v75 = vmlaq_f32(v49, vmlaq_n_f32(v1467, v61, v46), v63);
            float32x4_t v76 = vmlaq_f32(v49, vmlaq_n_f32(v1467, v69, v46), v64);
            float32x4_t v77 = vmlaq_f32(v49, vmlaq_n_f32(v1467, v71, v46), v70);
            float32x4_t v78 = vmlaq_f32(v49, vmlaq_n_f32(v1467, v73, v46), v74);
            int8x16_t v79 = (int8x16_t)vcgtzq_f32(v64);
            int8x16_t v80 = (int8x16_t)vcgtzq_f32(v70);
            int8x16_t v81 = (int8x16_t)vcgtzq_f32(v74);
            float32x4_t v82 = vmlaq_f32(v51, vmlaq_n_f32(v1478, v61, v47), v63);
            float32x4_t v83 = vmlaq_f32(v50, vmlaq_n_f32(v1487, v69, v48), v64);
            float32x4_t v84 = vmlaq_f32(v51, vmlaq_n_f32(v1478, v69, v47), v64);
            float32x4_t v85 = vmlaq_f32(v50, vmlaq_n_f32(v1487, v71, v48), v70);
            float32x4_t v86 = vmlaq_f32(v51, vmlaq_n_f32(v1478, v71, v47), v70);
            int8x16_t v87 = vandq_s8((int8x16_t)vcgezq_f32(v75), (int8x16_t)vcgtzq_f32(v63));
            float32x4_t v88 = vmlaq_f32(v50, vmlaq_n_f32(v1487, v73, v48), v74);
            float32x4_t v89 = vmlaq_f32(v51, vmlaq_n_f32(v1478, v73, v47), v74);
            int32x4_t v90 = vcvtmq_s32_f32(vmlaq_f32(v1400, vdivq_f32(v54, v75), vmlaq_f32(v50, vmlaq_n_f32(v1487, v61, v48), v63)));
            int32x4_t v91 = vcvtmq_s32_f32(vmlaq_f32(v1432, vdivq_f32(v1372, v75), v82));
            int32x4_t v92 = vcvtmq_s32_f32(vmlaq_f32(v1400, vdivq_f32(v54, v76), v83));
            int32x4_t v93 = vcvtmq_s32_f32(vmlaq_f32(v1432, vdivq_f32(v1372, v76), v84));
            int32x4_t v94 = vcvtmq_s32_f32(vmlaq_f32(v1400, vdivq_f32(v54, v77), v85));
            int32x4_t v95 = vcvtmq_s32_f32(vmlaq_f32(v1432, vdivq_f32(v1372, v77), v86));
            int32x4_t v96 = vcvtmq_s32_f32(vmlaq_f32(v1400, vdivq_f32(v54, v78), v88));
            int32x4_t v97 = vcvtmq_s32_f32(vmlaq_f32(v1432, vdivq_f32(v1372, v78), v89));
            v89.i64[0] = -1;
            v89.i64[1] = -1;
            int32x4_t v98 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1410, v91), (int8x16_t)vcgtq_s32(v1381, v90)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v91, (int8x16_t)v90), (int32x4_t)v89)), v87);
            int32x4_t v99 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1410, v93), (int8x16_t)vcgtq_s32(v1381, v92)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v93, (int8x16_t)v92), (int32x4_t)v89)), vandq_s8((int8x16_t)vcgezq_f32(v76), v79));
            int32x4_t v100 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1410, v95), (int8x16_t)vcgtq_s32(v1381, v94)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v95, (int8x16_t)v94), (int32x4_t)v89)), vandq_s8((int8x16_t)vcgezq_f32(v77), v80));
            *(int16x4_t *)v88.f32 = vmovn_s32(v98);
            int32x4_t v101 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1410, v97), (int8x16_t)vcgtq_s32(v1381, v96)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v97, (int8x16_t)v96), (int32x4_t)v89)), vandq_s8((int8x16_t)vcgezq_f32(v78), v81));
            *(int16x4_t *)v83.f32 = vmovn_s32(v99);
            *(int8x8_t *)v89.f32 = vorn_s8((int8x8_t)vmovn_s32(v90), *(int8x8_t *)v88.f32);
            int8x8_t v102 = vorn_s8((int8x8_t)vmovn_s32(v91), *(int8x8_t *)v88.f32);
            *(int16x4_t *)v82.f32 = vmovn_s32(v100);
            int8x8_t v103 = v59;
            vst2_s16(v103, (int16x4x2_t)v89);
            v103 += 8;
            v1502.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v92), *(int8x8_t *)v83.f32);
            v1502.val[1] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v93), *(int8x8_t *)v83.f32);
            float v46 = v1420;
            *(int8x8_t *)v89.f32 = vorn_s8((int8x8_t)vmovn_s32(v94), *(int8x8_t *)v82.f32);
            int8x8_t v104 = vorn_s8((int8x8_t)vmovn_s32(v95), *(int8x8_t *)v82.f32);
            *(int16x4_t *)v83.f32 = vmovn_s32(v101);
            int8x8_t v105 = v59 + 16;
            vst2_s16(v105, (int16x4x2_t)v89);
            *(int8x8_t *)v89.f32 = vorn_s8((int8x8_t)vmovn_s32(v96), *(int8x8_t *)v83.f32);
            int8x8_t v106 = vorn_s8((int8x8_t)vmovn_s32(v97), *(int8x8_t *)v83.f32);
            int32x4_t v107 = v59 + 24;
            vst2_s16(v107, (int16x4x2_t)v89);
            float v47 = v1363;
            float32x4_t v50 = v1390;
            v57.i64[0] = 0x4100000041000000;
            v57.i64[1] = 0x4100000041000000;
            vst2_s16(v103, v1502);
            float32x4_t v49 = v1459;
            int32x4_t v108 = vminq_s32(vmaxq_s32(vmlaq_s32(v90, v91, v1442), (int32x4_t)0), v1451);
            int32x4_t v109 = vminq_s32(vmaxq_s32(vmlaq_s32(v92, v93, v1442), (int32x4_t)0), v1451);
            int8x16_t v110 = vandq_s8((int8x16_t)vdivq_f32(v62, v75), (int8x16_t)v98);
            v28[v108.u32[0]] = fmaxf(*(float *)v110.i32, v28[v108.u32[0]]);
            int8x16_t v111 = vandq_s8((int8x16_t)vdivq_f32(v62, v76), (int8x16_t)v99);
            int32x4_t v112 = vminq_s32(vmaxq_s32(vmlaq_s32(v94, v95, v1442), (int32x4_t)0), v1451);
            v28[v109.u32[1]] = fmaxf(*(float *)&v111.i32[1], v28[v109.u32[1]]);
            int8x16_t v113 = vandq_s8((int8x16_t)vdivq_f32(v62, v77), (int8x16_t)v100);
            int32x4_t v114 = vminq_s32(vmaxq_s32(vmlaq_s32(v96, v97, v1442), (int32x4_t)0), v1451);
            v28[v112.u32[2]] = fmaxf(*(float *)&v113.i32[2], v28[v112.u32[2]]);
            int8x16_t v115 = vandq_s8((int8x16_t)vdivq_f32(v62, v78), (int8x16_t)v101);
            v28[v114.u32[3]] = fmaxf(*(float *)&v115.i32[3], v28[v114.u32[3]]);
            v28[v108.u32[1]] = fmaxf(*(float *)&v110.i32[1], v28[v108.u32[1]]);
            v28[v109.u32[2]] = fmaxf(*(float *)&v111.i32[2], v28[v109.u32[2]]);
            v28[v112.u32[3]] = fmaxf(*(float *)&v113.i32[3], v28[v112.u32[3]]);
            v28[v114.u32[0]] = fmaxf(*(float *)v115.i32, v28[v114.u32[0]]);
            v28[v108.u32[2]] = fmaxf(*(float *)&v110.i32[2], v28[v108.u32[2]]);
            v28[v109.u32[3]] = fmaxf(*(float *)&v111.i32[3], v28[v109.u32[3]]);
            v28[v112.u32[0]] = fmaxf(*(float *)v113.i32, v28[v112.u32[0]]);
            v28[v114.u32[1]] = fmaxf(*(float *)&v115.i32[1], v28[v114.u32[1]]);
            v28[v108.u32[3]] = fmaxf(*(float *)&v110.i32[3], v28[v108.u32[3]]);
            v28[v109.u32[0]] = fmaxf(*(float *)v111.i32, v28[v109.u32[0]]);
            v28[v112.u32[1]] = fmaxf(*(float *)&v113.i32[1], v28[v112.u32[1]]);
            v28[v114.u32[2]] = fmaxf(*(float *)&v115.i32[2], v28[v114.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v61 = vaddq_f32(v61, _Q0);
            v58 += 4;
            v59 += 32;
            v60 += 16;
          }
          while (v60 < v43);
          unint64_t v60 = (((v22 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v33 = (float32x4_t)a14;
          float32x4_t v32 = (float32x4_t)a15;
          float32x4_t v35 = a12;
          float32x4_t v34 = a13;
          float32x2_t v37 = (float32x2_t)a18;
          float v36 = *(float *)&a11;
          float32x2_t v38 = v1315;
          float v40 = v1345;
          float v42 = v1336;
          float v44 = 0.5;
          float32x4_t v45 = v1354;
        }
        if (v60 < v22)
        {
          do
          {
            float v117 = 1000.0 / v58->f32[0];
            int32x4_t v118 = (int32x4_t)vaddq_f32(v32, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v35, v40 * (float)(v117 * (float)((float)((float)v60 + v44) - v36))), v34, v42 * (float)((float)((float)((float)v39 + v44) - *((float *)&a11 + 1)) * v117)), v33, v117));
            uint64_t v119 = 0xFFFF0000FFFFLL;
            if (*(float *)&v118.i32[2] >= 0.0 && v117 > 0.0)
            {
              int32x2_t v120 = vcvt_s32_f32(vmla_f32(v37, vdiv_f32(v38, (float32x2_t)vdup_laneq_s32(v118, 2)), *(float32x2_t *)v118.i8));
              if ((v120.i32[0] & 0x80000000) == 0
                && (__int16)v23 > v120.i32[0]
                && (v120.i32[1] & 0x80000000) == 0
                && v53 > v120.u16[2])
              {
                float v121 = 1000.0 / *(float *)&v118.i32[2];
                float v122 = &v28[(v24 >> 2) * v120.u16[2]];
                float v123 = v122[v120.u32[0]];
                if (v123 == 0.0 || v123 < v121) {
                  v122[v120.u32[0]] = v121;
                }
                uint64_t v119 = (uint64_t)v120;
              }
            }
            __int16 *v59 = v119;
            v59[1] = WORD2(v119);
            ++v60;
            v58 = (float32x4_t *)((char *)v58 + 4);
            v59 += 2;
          }
          while (v22 != v60);
        }
        ++v39;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v45 = vaddq_f32(v45, _Q0);
      }
      while (v39 != v21);
    }
LABEL_321:
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    int32x2_t v1101 = v1302;
LABEL_390:
    CVPixelBufferUnlockBaseAddress(v1101, 0);
    return 0;
  }
LABEL_322:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_393:
    v1238 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
    PixelBufferUtils::pixelFormatAsString(v1238, (char *)&v1498);
    if ((v1498.width & 0x8000000000000000) == 0) {
      unsigned int v1239 = &v1498;
    }
    else {
      unsigned int v1239 = (vImage_Buffer *)v1498.data;
    }
    LODWORD(buf.data) = 136315138;
    *(void **)((char *)&buf.data + 4) = v1239;
    _os_log_error_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_ERROR, "illegal output pixel format in reprojection: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(v1498.width) < 0) {
      operator delete(v1498.data);
    }
  }
  return -22950;
}

uint64_t reprojectUndistortedDepthMapWithInputImmediates<half,1751411059u>(__CVBuffer *a1, __CVBuffer *a2, CVPixelBufferRef pixelBuffer, int a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, int32x4_t a14, int32x4_t a15, long long a16, long long a17, long long a18)
{
  __int32 v1490 = SHIDWORD(a10);
  uint64_t v1514 = *MEMORY[0x263EF8340];
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  float32x4_t v1318 = a2;
  if (!a2)
  {
    if (PixelFormatType <= 1717855599)
    {
      if (PixelFormatType == 825437747)
      {
        size_t Height = CVPixelBufferGetHeight(a1);
        size_t Width = CVPixelBufferGetWidth(a1);
        size_t v1118 = CVPixelBufferGetHeight(pixelBuffer);
        unsigned int v1119 = CVPixelBufferGetWidth(pixelBuffer);
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
        CVPixelBufferLockBaseAddress(a1, 1uLL);
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        memset(&v1512, 0, sizeof(v1512));
        float v1121 = (CGRect *)MEMORY[0x263F001A8];
        PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
        memset(&buf, 0, sizeof(buf));
        PixelBufferUtils::asVImageBuffer(pixelBuffer, *v1121, &buf);
        size_t v1125 = BytesPerRow >> 1;
        data = (__int16 *)buf.data;
        if (v1125 * v1118) {
          memset_pattern16(buf.data, &unk_247F24690, 2 * v1125 * v1118);
        }
        vImagePixelCount v1260 = buf.height;
        float32x4_t v1128 = (float32x4_t)a14;
        float32x4_t v1127 = (float32x4_t)a15;
        float32x4_t v1130 = a12;
        float32x4_t v1129 = a13;
        float v1132 = *(float *)&a18;
        float v1131 = *(float *)&a11;
        float v1133 = *(float *)&a16;
        if (Height)
        {
          unint64_t v1134 = 0;
          float v1135 = 1.0 / *(float *)&a9;
          float v1136 = 1.0 / *(float *)&v1490;
          unint64_t v1137 = Width & 0xFFFFFFFFFFFFFFF0;
          float v1138 = 0.5;
          *(float *)v1122.i32 = 0.5 - *((float *)&a11 + 1);
          float32x4_t v1139 = (float32x4_t)vdupq_lane_s32(v1122, 0);
          *(float *)v1122.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
          *(float *)v1123.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
          *(float *)v1124.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
          float v1140 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
          float v1141 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
          float32x4_t v1277 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
          float32x4_t v1279 = (float32x4_t)vdupq_lane_s32(v1124, 0);
          float v1142 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
          float32x4_t v1274 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
          float32x4_t v1275 = (float32x4_t)vdupq_lane_s32(v1123, 0);
          float32x4_t v1317 = (char *)v1512.data;
          size_t rowBytes = v1512.rowBytes;
          float32x4_t v1271 = (float32x4_t)vdupq_laneq_s32(a14, 2);
          float32x4_t v1272 = (float32x4_t)vdupq_lane_s32(v1122, 0);
          float32x4_t v1269 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
          float32x4_t v1143 = (float32x4_t)vdupq_laneq_s32(a15, 2);
          int32x4_t v1144 = vdupq_n_s32(v1125);
          int32x4_t v1145 = vdupq_n_s32(LODWORD(buf.height) * (int)v1125 - 2);
          int v1146 = (__int16)v1119;
          int v1147 = (__int16)v1118;
          unint64_t v1263 = (((Width & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          size_t v1298 = Width;
          size_t v1288 = v1125;
          int v1267 = (__int16)v1119;
          int v1265 = (__int16)v1118;
          float32x4_t v1435 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
          float32x4_t v1445 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
          float32x4_t v1415 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
          int32x4_t v1425 = vdupq_n_s32(v1119);
          float32x4_t v1396 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
          float32x4_t v1405 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
          int32x4_t v1378 = vdupq_n_s32(v1118);
          float32x4_t v1387 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
          do
          {
            float32x4_t v1148 = (float16x4_t *)&v1317[v1134 * rowBytes];
            if (v1137)
            {
              uint64_t v1149 = 0;
              float32x4_t v1455 = vmlaq_f32(v1277, v1279, v1139);
              float32x4_t v1150 = vmlaq_f32(v1274, v1275, v1139);
              float32x4_t v1342 = v1139;
              float32x4_t v1151 = vmlaq_f32(v1271, v1272, v1139);
              float32x4_t v1152 = v1269;
              v1153.i64[0] = 0x4100000041000000;
              v1153.i64[1] = 0x4100000041000000;
              do
              {
                uint64_t v1510 = v1149;
                float32x4_t v1154 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                float32x4_t v1155 = vdivq_f32(v1154, vcvtq_f32_f16(*v1148));
                float32x4_t v1156 = vdivq_f32(v1154, vcvtq_f32_f16(v1148[1]));
                __asm { FMOV            V0.4S, #4.0 }
                float32x4_t v1158 = vaddq_f32(v1152, _Q0);
                float32x4_t v1159 = vaddq_f32(v1152, v1153);
                float32x4_t v1160 = vdivq_f32(v1154, vcvtq_f32_f16(v1148[2]));
                __asm { FMOV            V0.4S, #12.0 }
                float32x4_t v1162 = vaddq_f32(v1152, _Q0);
                float32x4_t v1163 = vdivq_f32(v1154, vcvtq_f32_f16(v1148[3]));
                float32x4_t v1164 = vmlaq_f32(v1143, vmlaq_n_f32(v1151, v1152, v1140), v1155);
                float32x4_t v1165 = vmlaq_f32(v1143, vmlaq_n_f32(v1151, v1158, v1140), v1156);
                float32x4_t v1166 = vmlaq_f32(v1143, vmlaq_n_f32(v1151, v1159, v1140), v1160);
                float32x4_t v1167 = vmlaq_f32(v1143, vmlaq_n_f32(v1151, v1162, v1140), v1163);
                float32x4_t v1168 = vmlaq_f32(v1396, vmlaq_n_f32(v1455, v1152, v1142), v1155);
                float32x4_t v1169 = vmlaq_f32(v1387, vmlaq_n_f32(v1150, v1152, v1141), v1155);
                int8x16_t v1170 = vandq_s8((int8x16_t)vcgezq_f32(v1164), (int8x16_t)vcgtzq_f32(v1155));
                float32x4_t v1171 = vmlaq_f32(v1396, vmlaq_n_f32(v1455, v1162, v1142), v1163);
                int8x16_t v1172 = vandq_s8((int8x16_t)vcgezq_f32(v1167), (int8x16_t)vcgtzq_f32(v1163));
                int32x4_t v1173 = vcvtmq_s32_f32(vmlaq_f32(v1435, vdivq_f32(v1405, v1164), v1168));
                int32x4_t v1174 = vcvtmq_s32_f32(vmlaq_f32(v1415, vdivq_f32(v1445, v1164), v1169));
                int32x4_t v1175 = vcvtmq_s32_f32(vmlaq_f32(v1435, vdivq_f32(v1405, v1165), vmlaq_f32(v1396, vmlaq_n_f32(v1455, v1158, v1142), v1156)));
                int32x4_t v1176 = vcvtmq_s32_f32(vmlaq_f32(v1415, vdivq_f32(v1445, v1165), vmlaq_f32(v1387, vmlaq_n_f32(v1150, v1158, v1141), v1156)));
                float32x4_t v1177 = vmlaq_f32(v1415, vdivq_f32(v1445, v1167), vmlaq_f32(v1387, vmlaq_n_f32(v1150, v1162, v1141), v1163));
                v1178.i64[0] = -1;
                v1178.i64[1] = -1;
                int32x4_t v1179 = vcvtmq_s32_f32(vmlaq_f32(v1435, vdivq_f32(v1405, v1166), vmlaq_f32(v1396, vmlaq_n_f32(v1455, v1159, v1142), v1160)));
                int32x4_t v1180 = vcvtmq_s32_f32(vmlaq_f32(v1415, vdivq_f32(v1445, v1166), vmlaq_f32(v1387, vmlaq_n_f32(v1150, v1159, v1141), v1160)));
                int32x4_t v1181 = vcvtmq_s32_f32(vmlaq_f32(v1435, vdivq_f32(v1405, v1167), v1171));
                int32x4_t v1182 = vcvtmq_s32_f32(v1177);
                int8x16_t v1183 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1378, v1174), (int8x16_t)vcgtq_s32(v1425, v1173)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1174, (int8x16_t)v1173), v1178)), v1170);
                v1153.i64[0] = 0x4100000041000000;
                v1153.i64[1] = 0x4100000041000000;
                int8x16_t v1184 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1378, v1182), (int8x16_t)vcgtq_s32(v1425, v1181)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1182, (int8x16_t)v1181), v1178)), v1172);
                int8x16_t v1185 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
                float32x4_t v1186 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1378, v1180), (int8x16_t)vcgtq_s32(v1425, v1179)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1180, (int8x16_t)v1179), v1178)), vandq_s8((int8x16_t)vcgezq_f32(v1166), (int8x16_t)vcgtzq_f32(v1160))), (int8x16_t)vmulq_f32(v1166, v1153), v1185);
                int32x4_t v1187 = vmlaq_s32(v1179, v1180, v1144);
                int32x4_t v1188 = vminq_s32(vmaxq_s32(vmlaq_s32(v1173, v1174, v1144), (int32x4_t)0), v1145);
                int32x4_t v1189 = vcvtq_s32_f32((float32x4_t)vbslq_s8(v1183, (int8x16_t)vmulq_f32(v1164, v1153), v1185));
                int32x4_t v1190 = vminq_s32(vmaxq_s32(vmlaq_s32(v1181, v1182, v1144), (int32x4_t)0), v1145);
                unsigned __int32 v1191 = v1190.u32[3];
                unsigned __int32 v1192 = v1190.u32[1];
                unsigned __int32 v1193 = v1190.u32[2];
                unsigned __int32 v1194 = v1190.i32[0];
                int32x4_t v1195 = vcvtq_s32_f32((float32x4_t)vbslq_s8(v1184, (int8x16_t)vmulq_f32(v1167, v1153), v1185));
                __int32 v1196 = v1195.i32[3];
                __int32 v1197 = v1195.i32[1];
                __int32 v1198 = v1195.i32[2];
                __int32 v1199 = v1195.i32[0];
                int32x4_t v1200 = vminq_s32(vmaxq_s32(v1187, (int32x4_t)0), v1145);
                int32x4_t v1201 = vcvtq_s32_f32(v1186);
                __int32 v1202 = v1201.i32[2];
                __int32 v1203 = v1201.i32[3];
                __int32 v1204 = v1201.i32[1];
                __int32 v1205 = v1201.i32[0];
                int32x4_t v1206 = vminq_s32(vmaxq_s32(vmlaq_s32(v1175, v1176, v1144), (int32x4_t)0), v1145);
                unsigned __int32 v1207 = v1206.u32[1];
                unsigned __int32 v1208 = v1206.u32[2];
                unsigned __int32 v1209 = v1206.u32[3];
                unsigned __int32 v1210 = v1206.i32[0];
                int32x4_t v1211 = vcvtq_s32_f32((float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1378, v1176), (int8x16_t)vcgtq_s32(v1425, v1175)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1176, (int8x16_t)v1175), v1178)), vandq_s8((int8x16_t)vcgezq_f32(v1165), (int8x16_t)vcgtzq_f32(v1156))), (int8x16_t)vmulq_f32(v1165, v1153), v1185));
                int v1212 = data[v1188.u32[0]];
                if (v1189.i32[0] < v1212) {
                  LOWORD(v1212) = v1189.i16[0];
                }
                data[v1188.u32[0]] = v1212;
                __int32 v1213 = v1211.i32[1];
                __int32 v1214 = v1211.i32[2];
                __int32 v1215 = v1211.i32[3];
                __int32 v1216 = v1211.i32[0];
                __asm { FMOV            V0.4S, #16.0 }
                float32x4_t v1152 = vaddq_f32(v1152, _Q0);
                if (v1213 >= data[v1207]) {
                  LOWORD(v1213) = data[v1207];
                }
                data[v1207] = v1213;
                __int32 v1218 = data[v1200.u32[2]];
                if (v1202 < v1218) {
                  LOWORD(v1218) = v1202;
                }
                data[v1200.u32[2]] = v1218;
                if (v1196 >= data[v1191]) {
                  LOWORD(v1196) = data[v1191];
                }
                data[v1191] = v1196;
                int v1219 = data[v1188.u32[1]];
                if (v1189.i32[1] < v1219) {
                  LOWORD(v1219) = v1189.i16[2];
                }
                data[v1188.u32[1]] = v1219;
                __int32 v1220 = data[v1208];
                if (v1214 < v1220) {
                  LOWORD(v1220) = v1214;
                }
                data[v1208] = v1220;
                __int32 v1221 = data[v1200.u32[3]];
                if (v1203 < v1221) {
                  LOWORD(v1221) = v1203;
                }
                data[v1200.u32[3]] = v1221;
                __int32 v1222 = data[v1194];
                if (v1199 < v1222) {
                  LOWORD(v1222) = v1199;
                }
                data[v1194] = v1222;
                int v1223 = data[v1188.u32[2]];
                if (v1189.i32[2] < v1223) {
                  LOWORD(v1223) = v1189.i16[4];
                }
                data[v1188.u32[2]] = v1223;
                __int32 v1224 = data[v1209];
                if (v1215 < v1224) {
                  LOWORD(v1224) = v1215;
                }
                data[v1209] = v1224;
                __int32 v1225 = data[v1200.u32[0]];
                if (v1205 < v1225) {
                  LOWORD(v1225) = v1205;
                }
                data[v1200.u32[0]] = v1225;
                __int32 v1226 = data[v1192];
                if (v1197 < v1226) {
                  LOWORD(v1226) = v1197;
                }
                data[v1192] = v1226;
                int v1227 = data[v1188.u32[3]];
                if (v1189.i32[3] < v1227) {
                  LOWORD(v1227) = v1189.i16[6];
                }
                data[v1188.u32[3]] = v1227;
                __int32 v1228 = data[v1210];
                if (v1216 < v1228) {
                  LOWORD(v1228) = v1216;
                }
                data[v1210] = v1228;
                __int32 v1229 = data[v1200.u32[1]];
                if (v1204 < v1229) {
                  LOWORD(v1229) = v1204;
                }
                data[v1200.u32[1]] = v1229;
                __int32 v1230 = data[v1193];
                if (v1198 < v1230) {
                  LOWORD(v1230) = v1198;
                }
                data[v1193] = v1230;
                v1148 += 4;
                uint64_t v1149 = v1510 + 16;
              }
              while (v1510 + 16 < v1137);
              unint64_t v1231 = v1263;
              float32x4_t v1128 = (float32x4_t)a14;
              float32x4_t v1127 = (float32x4_t)a15;
              float32x4_t v1130 = a12;
              float32x4_t v1129 = a13;
              float v1132 = *(float *)&a18;
              float v1131 = *(float *)&a11;
              float v1133 = *(float *)&a16;
              float32x4_t v1139 = v1342;
              size_t Width = v1298;
              size_t v1125 = v1288;
              float v1135 = 1.0 / *(float *)&a9;
              float v1136 = 1.0 / *(float *)&v1490;
              float v1138 = 0.5;
              int v1146 = v1267;
              int v1147 = v1265;
            }
            else
            {
              unint64_t v1231 = 0;
            }
            if (v1231 < Width)
            {
              do
              {
                _H2 = v1148->i16[0];
                __asm { FCVT            S2, H2 }
                _Q7 = vaddq_f32(v1127, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v1130, v1135 * (float)((float)((float)((float)v1231 + v1138) - v1131) * (float)(1000.0 / _S2))), v1129, v1136* (float)((float)((float)((float)v1134 + v1138) - *((float *)&a11 + 1)) * (float)(1000.0 / _S2))), v1128, 1000.0 / _S2));
                if (_Q7.f32[2] >= 0.0 && (float)(1000.0 / _S2) > 0.0)
                {
                  uint64_t v1235 = (int)vmlas_n_f32(v1132, v1133 / _Q7.f32[2], _Q7.f32[0]);
                  if ((v1235 & 0x80000000) == 0 && v1146 > (int)v1235)
                  {
                    _S1 = *((float *)&a17 + 1) / _Q7.f32[2];
                    __asm { FMLA            S2, S1, V7.S[1] }
                    if (((int)_S2 & 0x80000000) == 0 && v1147 > (unsigned __int16)(int)_S2)
                    {
                      v1238 = &data[v1125 * (unsigned __int16)(int)_S2];
                      unsigned int v1239 = vcvts_n_s32_f32(_Q7.f32[2], 3uLL);
                      if (v1239 <= (unsigned __int16)(v1238[v1235] - 1)) {
                        v1238[v1235] = v1239;
                      }
                    }
                  }
                }
                ++v1231;
                float32x4_t v1148 = (float16x4_t *)((char *)v1148 + 2);
              }
              while (Width != v1231);
            }
            ++v1134;
            __asm { FMOV            V0.4S, #1.0 }
            float32x4_t v1139 = vaddq_f32(v1139, _Q0);
          }
          while (v1134 != Height);
        }
        if (v1260)
        {
          uint64_t v1241 = 0;
          long long v1242 = *(_OWORD *)&buf.width;
          vImagePixelCount v1243 = buf.width >> 4;
          vImagePixelCount v1244 = (char *)buf.data;
          vImagePixelCount v1245 = buf.height;
          if (buf.width >> 4 <= 1) {
            vImagePixelCount v1243 = 1;
          }
          if (buf.height <= 1) {
            vImagePixelCount v1245 = 1;
          }
          unint64_t v1246 = buf.width & 0xFFFFFFF0;
          do
          {
            unint64_t v1247 = (int8x8_t *)&v1244[*((void *)&v1242 + 1) * v1241];
            vImagePixelCount v1248 = v1243;
            if ((unint64_t)v1242 >= 0x10)
            {
              do
              {
                int16x4_t v1249 = (int16x4_t)v1247[2];
                int16x4_t v1250 = (int16x4_t)v1247[3];
                int8x8_t v1251 = vbic_s8(v1247[1], (int8x8_t)vceq_s16((int16x4_t)v1247[1], (int16x4_t)0x8000800080008000));
                *unint64_t v1247 = vbic_s8(*v1247, (int8x8_t)vceq_s16((int16x4_t)*v1247, (int16x4_t)0x8000800080008000));
                v1247[1] = v1251;
                v1247[2] = vbic_s8((int8x8_t)v1249, (int8x8_t)vceq_s16(v1249, (int16x4_t)0x8000800080008000));
                v1247[3] = vbic_s8((int8x8_t)v1250, (int8x8_t)vceq_s16(v1250, (int16x4_t)0x8000800080008000));
                v1247 += 4;
                --v1248;
              }
              while (v1248);
            }
            unint64_t v1252 = v1242 & 0xFFFFFFFF0000000FLL;
            if ((unint64_t)v1242 > v1246)
            {
              do
              {
                if (v1247->i16[0] == 0x7FFF) {
                  v1247->i16[0] = 0;
                }
                unint64_t v1247 = (int8x8_t *)((char *)v1247 + 2);
                --v1252;
              }
              while (v1252);
            }
            ++v1241;
          }
          while (v1241 != v1245);
        }
        goto LABEL_389;
      }
      if (PixelFormatType == 1278226534) {
        goto LABEL_184;
      }
      if (PixelFormatType != 1278226536) {
        goto LABEL_391;
      }
    }
    else
    {
      if (PixelFormatType <= 1751410031)
      {
        if (PixelFormatType != 1717855600)
        {
          if (PixelFormatType == 1717856627)
          {
            size_t v127 = CVPixelBufferGetHeight(a1);
            size_t v128 = CVPixelBufferGetWidth(a1);
            unsigned int v129 = CVPixelBufferGetHeight(pixelBuffer);
            unsigned int v130 = CVPixelBufferGetWidth(pixelBuffer);
            size_t v131 = CVPixelBufferGetBytesPerRow(pixelBuffer);
            CVPixelBufferLockBaseAddress(a1, 1uLL);
            CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            memset(&v1512, 0, sizeof(v1512));
            int v132 = (CGRect *)MEMORY[0x263F001A8];
            PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
            memset(&buf, 0, sizeof(buf));
            PixelBufferUtils::asVImageBuffer(pixelBuffer, *v132, &buf);
            int32x2_t v134 = (float *)buf.data;
            int v133 = buf.height;
            bzero(buf.data, buf.height * buf.rowBytes);
            float32x4_t v139 = (float32x4_t)a14;
            float32x4_t v138 = (float32x4_t)a15;
            float32x4_t v141 = a12;
            float32x4_t v140 = a13;
            float v143 = *(float *)&a18;
            float v142 = *(float *)&a11;
            float v144 = *(float *)&a16;
            if (v127)
            {
              unint64_t v145 = 0;
              float v146 = 1.0 / *(float *)&a9;
              v147.i32[1] = v1490;
              float v148 = 1.0 / *(float *)&v1490;
              unint64_t v149 = v128 & 0xFFFFFFFFFFFFFFF0;
              float v150 = 0.5;
              *(float *)v135.i32 = 0.5 - *((float *)&a11 + 1);
              float32x4_t v151 = (float32x4_t)vdupq_lane_s32(v135, 0);
              *(float *)v135.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
              *(float *)v147.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
              *(float *)v136.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
              float v152 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
              *(float *)&long long v137 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
              *(float *)&long long v18 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
              size_t v153 = (char *)v1512.data;
              size_t v154 = v1512.rowBytes;
              float32x4_t v1344 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
              float32x4_t v1353 = (float32x4_t)vdupq_lane_s32(v136, 0);
              float32x4_t v1334 = (float32x4_t)vdupq_lane_s32(v147, 0);
              float32x4_t v1310 = (float32x4_t)vdupq_lane_s32(v135, 0);
              float32x4_t v1319 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
              float32x4_t v1300 = (float32x4_t)vdupq_laneq_s32(a14, 2);
              float32x4_t v155 = (float32x4_t)vdupq_laneq_s32(a15, 2);
              float32x4_t v156 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
              float32x4_t v1290 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
              float v157 = *((float *)&a17 + 1);
              float v1371 = 1.0 / *(float *)&a9;
              float v1362 = 1.0 / *(float *)&v1490;
              float32x4_t v1466 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
              float32x4_t v1474 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
              float32x4_t v1447 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
              int32x4_t v1457 = vdupq_n_s32(v133 * (v131 >> 2) - 4);
              float32x4_t v1427 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
              float v1437 = v152;
              float32x4_t v1407 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
              int32x4_t v1417 = vdupq_n_s32(v131 >> 2);
              int32x4_t v1389 = vdupq_n_s32(v129);
              int32x4_t v1398 = vdupq_n_s32(v130);
              do
              {
                unint64_t v158 = (float16x4_t *)&v153[v145 * v154];
                unint64_t v159 = 0;
                if (v149)
                {
                  float32x4_t v1493 = vmlaq_f32(v1344, v1353, v151);
                  float32x4_t v1482 = vmlaq_f32(v1319, v1334, v151);
                  float32x4_t v1380 = v151;
                  float32x4_t v1502 = vmlaq_f32(v1300, v1310, v151);
                  float32x4_t v160 = v1290;
                  do
                  {
                    float32x4_t v161 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                    float32x4_t v162 = vdivq_f32(v161, vcvtq_f32_f16(*v158));
                    float32x4_t v163 = vdivq_f32(v161, vcvtq_f32_f16(v158[1]));
                    __asm { FMOV            V1.4S, #4.0 }
                    float32x4_t v165 = vaddq_f32(v160, _Q1);
                    float32x4_t v166 = vdivq_f32(v161, vcvtq_f32_f16(v158[2]));
                    _Q1.i64[0] = 0x4100000041000000;
                    _Q1.i64[1] = 0x4100000041000000;
                    float32x4_t v167 = vaddq_f32(v160, _Q1);
                    __asm { FMOV            V1.4S, #12.0 }
                    float32x4_t v169 = vaddq_f32(v160, _Q1);
                    float32x4_t v170 = vdivq_f32(v161, vcvtq_f32_f16(v158[3]));
                    float32x4_t v171 = vmlaq_f32(v155, vmlaq_n_f32(v1502, v160, v152), v162);
                    float32x4_t v172 = vmlaq_f32(v155, vmlaq_n_f32(v1502, v165, v152), v163);
                    float32x4_t v173 = vmlaq_f32(v155, vmlaq_n_f32(v1502, v167, v152), v166);
                    float32x4_t v174 = vmlaq_f32(v155, vmlaq_n_f32(v1502, v169, v152), v170);
                    float32x4_t v175 = vmlaq_f32(v156, vmlaq_n_f32(v1493, v160, *(float *)&v18), v162);
                    float32x4_t v176 = vmlaq_f32(v1407, vmlaq_n_f32(v1482, v160, *(float *)&v137), v162);
                    float32x4_t v177 = v155;
                    float32x4_t v178 = vmlaq_f32(v156, vmlaq_n_f32(v1493, v165, *(float *)&v18), v163);
                    float32x4_t v179 = vmlaq_f32(v1407, vmlaq_n_f32(v1482, v165, *(float *)&v137), v163);
                    float32x4_t v180 = vmlaq_f32(v156, vmlaq_n_f32(v1493, v167, *(float *)&v18), v166);
                    int8x16_t v181 = vandq_s8((int8x16_t)vcgezq_f32(v171), (int8x16_t)vcgtzq_f32(v162));
                    float32x4_t v182 = vmlaq_f32(v1407, vmlaq_n_f32(v1482, v167, *(float *)&v137), v166);
                    int8x16_t v183 = vandq_s8((int8x16_t)vcgezq_f32(v172), (int8x16_t)vcgtzq_f32(v163));
                    float32x4_t v184 = vmlaq_f32(v156, vmlaq_n_f32(v1493, v169, *(float *)&v18), v170);
                    int8x16_t v185 = vandq_s8((int8x16_t)vcgezq_f32(v173), (int8x16_t)vcgtzq_f32(v166));
                    float32x4_t v186 = vmlaq_f32(v1407, vmlaq_n_f32(v1482, v169, *(float *)&v137), v170);
                    float32x4_t v187 = vmlaq_f32(v1466, vdivq_f32(v1427, v171), v175);
                    float32x4_t v188 = vmlaq_f32(v1474, vdivq_f32(v1447, v171), v176);
                    float32x4_t v189 = vmlaq_f32(v1466, vdivq_f32(v1427, v172), v178);
                    float32x4_t v190 = vdivq_f32(v1427, v173);
                    float32x4_t v191 = vmlaq_f32(v1474, vdivq_f32(v1447, v172), v179);
                    float32x4_t v192 = vdivq_f32(v1447, v173);
                    float32x4_t v193 = v156;
                    long long v194 = v18;
                    long long v195 = v137;
                    float32x4_t v196 = vdivq_f32(v1427, v174);
                    int8x16_t v197 = (int8x16_t)vdivq_f32(v161, v171);
                    int8x16_t v198 = (int8x16_t)vdivq_f32(v161, v172);
                    int8x16_t v199 = (int8x16_t)vdivq_f32(v161, v173);
                    int8x16_t v200 = (int8x16_t)vdivq_f32(v161, v174);
                    float32x4_t v201 = vdivq_f32(v1447, v174);
                    int8x16_t v202 = vandq_s8((int8x16_t)vcgezq_f32(v174), (int8x16_t)vcgtzq_f32(v170));
                    int32x4_t v203 = vcvtmq_s32_f32(v187);
                    int32x4_t v204 = vcvtmq_s32_f32(v188);
                    int32x4_t v205 = vcvtmq_s32_f32(v189);
                    int32x4_t v206 = vcvtmq_s32_f32(v191);
                    int32x4_t v207 = vcvtmq_s32_f32(vmlaq_f32(v1466, v190, v180));
                    float32x4_t v208 = vmlaq_f32(v1466, v196, v184);
                    long long v137 = v195;
                    long long v18 = v194;
                    float32x4_t v156 = v193;
                    int32x4_t v209 = vcvtmq_s32_f32(vmlaq_f32(v1474, v192, v182));
                    int32x4_t v210 = vcvtmq_s32_f32(v208);
                    int32x4_t v211 = vcvtmq_s32_f32(vmlaq_f32(v1474, v201, v186));
                    v212.i64[0] = -1;
                    v212.i64[1] = -1;
                    int8x16_t v213 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1389, v204), (int8x16_t)vcgtq_s32(v1398, v203)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v204, (int8x16_t)v203), v212));
                    int8x16_t v214 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1389, v206), (int8x16_t)vcgtq_s32(v1398, v205)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v206, (int8x16_t)v205), v212));
                    int8x16_t v215 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1389, v209), (int8x16_t)vcgtq_s32(v1398, v207)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v209, (int8x16_t)v207), v212));
                    int8x16_t v216 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1389, v211), (int8x16_t)vcgtq_s32(v1398, v210)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v211, (int8x16_t)v210), v212));
                    float32x4_t v155 = v177;
                    float v152 = v1437;
                    int32x4_t v217 = vminq_s32(vmaxq_s32(vmlaq_s32(v203, v204, v1417), (int32x4_t)0), v1457);
                    unsigned __int32 v218 = v217.u32[1];
                    unsigned __int32 v219 = v217.u32[2];
                    unsigned __int32 v220 = v217.u32[3];
                    int32x4_t v221 = vminq_s32(vmaxq_s32(vmlaq_s32(v205, v206, v1417), (int32x4_t)0), v1457);
                    int8x16_t v222 = vandq_s8(vandq_s8(v197, v181), v213);
                    v134[v217.u32[0]] = fmaxf(*(float *)v222.i32, v134[v217.u32[0]]);
                    int8x16_t v223 = vandq_s8(vandq_s8(v198, v183), v214);
                    int32x4_t v224 = vminq_s32(vmaxq_s32(vmlaq_s32(v207, v209, v1417), (int32x4_t)0), v1457);
                    v134[v221.u32[1]] = fmaxf(*(float *)&v223.i32[1], v134[v221.u32[1]]);
                    int8x16_t v225 = vandq_s8(vandq_s8(v199, v185), v215);
                    int32x4_t v226 = vminq_s32(vmaxq_s32(vmlaq_s32(v210, v211, v1417), (int32x4_t)0), v1457);
                    v134[v224.u32[2]] = fmaxf(*(float *)&v225.i32[2], v134[v224.u32[2]]);
                    int8x16_t v227 = vandq_s8(vandq_s8(v200, v202), v216);
                    v134[v226.u32[3]] = fmaxf(*(float *)&v227.i32[3], v134[v226.u32[3]]);
                    v134[v218] = fmaxf(*(float *)&v222.i32[1], v134[v218]);
                    v134[v221.u32[2]] = fmaxf(*(float *)&v223.i32[2], v134[v221.u32[2]]);
                    v134[v224.u32[3]] = fmaxf(*(float *)&v225.i32[3], v134[v224.u32[3]]);
                    v134[v226.u32[0]] = fmaxf(*(float *)v227.i32, v134[v226.u32[0]]);
                    v134[v219] = fmaxf(*(float *)&v222.i32[2], v134[v219]);
                    v134[v221.u32[3]] = fmaxf(*(float *)&v223.i32[3], v134[v221.u32[3]]);
                    v134[v224.u32[0]] = fmaxf(*(float *)v225.i32, v134[v224.u32[0]]);
                    v134[v226.u32[1]] = fmaxf(*(float *)&v227.i32[1], v134[v226.u32[1]]);
                    v134[v220] = fmaxf(*(float *)&v222.i32[3], v134[v220]);
                    v134[v221.u32[0]] = fmaxf(*(float *)v223.i32, v134[v221.u32[0]]);
                    v134[v224.u32[1]] = fmaxf(*(float *)&v225.i32[1], v134[v224.u32[1]]);
                    v134[v226.u32[2]] = fmaxf(*(float *)&v227.i32[2], v134[v226.u32[2]]);
                    __asm { FMOV            V0.4S, #16.0 }
                    float32x4_t v160 = vaddq_f32(v160, _Q0);
                    v158 += 4;
                    v159 += 16;
                  }
                  while (v159 < v149);
                  unint64_t v159 = (((v128 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
                  float32x4_t v139 = (float32x4_t)a14;
                  float32x4_t v138 = (float32x4_t)a15;
                  float32x4_t v141 = a12;
                  float32x4_t v140 = a13;
                  float v143 = *(float *)&a18;
                  float v142 = *(float *)&a11;
                  float v144 = *(float *)&a16;
                  float v146 = v1371;
                  float v148 = v1362;
                  float v150 = 0.5;
                  float32x4_t v151 = v1380;
                  float v157 = *((float *)&a17 + 1);
                }
                if (v159 < v128)
                {
                  do
                  {
                    _H2 = v158->i16[0];
                    __asm { FCVT            S2, H2 }
                    float v231 = 1000.0 / _S2;
                    _Q2 = vaddq_f32(v138, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v141, v146 * (float)((float)((float)((float)v159 + v150) - v142) * (float)(1000.0 / _S2))), v140, v148* (float)((float)((float)((float)v145 + v150) - *((float *)&a11 + 1))* (float)(1000.0 / _S2))), v139, 1000.0 / _S2));
                    if (_Q2.f32[2] >= 0.0 && v231 > 0.0)
                    {
                      uint64_t v233 = (int)vmlas_n_f32(v143, v144 / _Q2.f32[2], _Q2.f32[0]);
                      if ((v233 & 0x80000000) == 0 && (__int16)v130 > (int)v233)
                      {
                        _S3 = v157 / _Q2.f32[2];
                        __asm { FMLA            S4, S3, V2.S[1] }
                        if (((int)_S4 & 0x80000000) == 0 && (__int16)v129 > (int)(unsigned __int16)(int)_S4)
                        {
                          float v236 = 1000.0 / _Q2.f32[2];
                          v237 = &v134[(v131 >> 2) * (unsigned __int16)(int)_S4];
                          float v238 = v237[v233];
                          if (v238 == 0.0 || v238 < v236) {
                            v237[v233] = v236;
                          }
                        }
                      }
                    }
                    ++v159;
                    unint64_t v158 = (float16x4_t *)((char *)v158 + 2);
                  }
                  while (v128 != v159);
                }
                ++v145;
                __asm { FMOV            V0.4S, #1.0 }
                float32x4_t v151 = vaddq_f32(v151, _Q0);
              }
              while (v145 != v127);
            }
LABEL_389:
            CVPixelBufferUnlockBaseAddress(a1, 1uLL);
            float v1116 = pixelBuffer;
            goto LABEL_390;
          }
LABEL_391:
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            goto LABEL_393;
          }
          return -22950;
        }
LABEL_184:
        size_t v718 = CVPixelBufferGetHeight(a1);
        size_t v719 = CVPixelBufferGetWidth(a1);
        size_t v720 = CVPixelBufferGetHeight(pixelBuffer);
        unsigned int v721 = CVPixelBufferGetWidth(pixelBuffer);
        size_t v722 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        CVPixelBufferLockBaseAddress(a1, 1uLL);
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        memset(&v1512, 0, sizeof(v1512));
        float v723 = (CGRect *)MEMORY[0x263F001A8];
        PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
        memset(&buf, 0, sizeof(buf));
        PixelBufferUtils::asVImageBuffer(pixelBuffer, *v723, &buf);
        size_t v725 = v722 >> 2;
        int32x2_t v726 = (float *)buf.data;
        if (v725 * v720) {
          memset_pattern16(buf.data, &unk_247F24670, 4 * v725 * v720);
        }
        vImagePixelCount v727 = buf.height;
        float32x4_t v729 = (float32x4_t)a14;
        float32x4_t v728 = (float32x4_t)a15;
        float32x4_t v731 = a12;
        float32x4_t v730 = a13;
        float v733 = *(float *)&a18;
        float v732 = *(float *)&a11;
        float v734 = *(float *)&a16;
        if (v718)
        {
          unint64_t v735 = 0;
          v736.i32[1] = v1490;
          v737.i32[1] = HIDWORD(a9);
          float v738 = 1.0 / *(float *)&a9;
          float v739 = 1.0 / *(float *)&v1490;
          unint64_t v740 = v719 & 0xFFFFFFFFFFFFFFF0;
          float v741 = 0.5;
          *(float *)v724.i32 = 0.5 - *((float *)&a11 + 1);
          float32x4_t v742 = (float32x4_t)vdupq_lane_s32(v724, 0);
          *(float *)v724.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
          *(float *)v736.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
          *(float *)v737.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
          float v743 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
          float v744 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
          float32x4_t v1349 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
          float32x4_t v1358 = (float32x4_t)vdupq_lane_s32(v737, 0);
          float32x4_t v1339 = (float32x4_t)vdupq_lane_s32(v736, 0);
          float v745 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
          float32x4_t v1315 = (float32x4_t)vdupq_lane_s32(v724, 0);
          float32x4_t v1321 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
          float32x4_t v1305 = (float32x4_t)vdupq_laneq_s32(a14, 2);
          unint64_t v746 = (char *)v1512.data;
          size_t v747 = v1512.rowBytes;
          float32x4_t v1295 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
          float32x4_t v748 = (float32x4_t)vdupq_laneq_s32(a15, 2);
          float32x4_t v749 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
          float32x4_t v750 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
          int32x4_t v751 = vdupq_n_s32(v725);
          int32x4_t v1394 = vdupq_n_s32(LODWORD(buf.height) * (int)v725 - 4);
          float32x4_t v752 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
          float32x4_t v753 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
          float v754 = *((float *)&a17 + 1);
          float v1376 = 1.0 / *(float *)&a9;
          float v1367 = 1.0 / *(float *)&v1490;
          int32x4_t v1422 = vdupq_n_s32(v720);
          int32x4_t v1432 = vdupq_n_s32(v721);
          float32x4_t v1403 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
          float32x4_t v1412 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
          do
          {
            v755 = (float16x4_t *)&v746[v735 * v747];
            unint64_t v756 = 0;
            if (v740)
            {
              float32x4_t v1462 = vmlaq_f32(v1349, v1358, v742);
              float32x4_t v1452 = vmlaq_f32(v1321, v1339, v742);
              float32x4_t v1384 = v742;
              float32x4_t v1442 = vmlaq_f32(v1305, v1315, v742);
              float32x4_t v757 = v1295;
              do
              {
                float32x4_t v758 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                float32x4_t v759 = vdivq_f32(v758, vcvtq_f32_f16(*v755));
                float32x4_t v760 = vdivq_f32(v758, vcvtq_f32_f16(v755[1]));
                float32x4_t v761 = vdivq_f32(v758, vcvtq_f32_f16(v755[2]));
                __asm { FMOV            V0.4S, #4.0 }
                float32x4_t v763 = vaddq_f32(v757, _Q0);
                _Q0.i64[0] = 0x4100000041000000;
                _Q0.i64[1] = 0x4100000041000000;
                float32x4_t v764 = vaddq_f32(v757, _Q0);
                __asm { FMOV            V0.4S, #12.0 }
                float32x4_t v766 = vaddq_f32(v757, _Q0);
                float32x4_t v767 = vdivq_f32(v758, vcvtq_f32_f16(v755[3]));
                float32x4_t v768 = v748;
                float32x4_t v769 = vmlaq_f32(v748, vmlaq_n_f32(v1442, v757, v743), v759);
                float32x4_t v770 = vmlaq_f32(v748, vmlaq_n_f32(v1442, v763, v743), v760);
                float32x4_t v771 = vmlaq_f32(v748, vmlaq_n_f32(v1442, v764, v743), v761);
                float32x4_t v772 = vmlaq_f32(v748, vmlaq_n_f32(v1442, v766, v743), v767);
                int8x16_t v773 = vandq_s8((int8x16_t)vcgezq_f32(v769), (int8x16_t)vcgtzq_f32(v759));
                int8x16_t v1479 = vandq_s8((int8x16_t)vcgezq_f32(v770), (int8x16_t)vcgtzq_f32(v760));
                float32x4_t v774 = vmlaq_f32(v749, vmlaq_n_f32(v1462, v763, v745), v760);
                float32x4_t v775 = vmlaq_f32(v750, vmlaq_n_f32(v1452, v763, v744), v760);
                int8x16_t v1471 = vandq_s8((int8x16_t)vcgezq_f32(v771), (int8x16_t)vcgtzq_f32(v761));
                float32x4_t v776 = vmlaq_f32(v749, vmlaq_n_f32(v1462, v764, v745), v761);
                float32x4_t v777 = vmlaq_f32(v750, vmlaq_n_f32(v1452, v764, v744), v761);
                int8x16_t v778 = vandq_s8((int8x16_t)vcgezq_f32(v772), (int8x16_t)vcgtzq_f32(v767));
                float32x4_t v779 = vmlaq_f32(v749, vmlaq_n_f32(v1462, v766, v745), v767);
                float32x4_t v780 = vmlaq_n_f32(v1452, v766, v744);
                float32x4_t v781 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
                int8x16_t v782 = (int8x16_t)vmulq_f32(v769, v781);
                int8x16_t v1487 = (int8x16_t)vmulq_f32(v770, v781);
                int8x16_t v1498 = (int8x16_t)vmulq_f32(v771, v781);
                int8x16_t v1507 = (int8x16_t)vmulq_f32(v772, v781);
                int32x4_t v783 = vcvtmq_s32_f32(vmlaq_f32(v1412, vdivq_f32(v752, v769), vmlaq_f32(v749, vmlaq_n_f32(v1462, v757, v745), v759)));
                int32x4_t v784 = vcvtmq_s32_f32(vmlaq_f32(v1403, vdivq_f32(v753, v769), vmlaq_f32(v750, vmlaq_n_f32(v1452, v757, v744), v759)));
                int32x4_t v785 = vcvtmq_s32_f32(vmlaq_f32(v1412, vdivq_f32(v752, v770), v774));
                int32x4_t v786 = vcvtmq_s32_f32(vmlaq_f32(v1403, vdivq_f32(v753, v770), v775));
                float32x4_t v787 = vmlaq_f32(v1412, vdivq_f32(v752, v772), v779);
                float32x4_t v788 = vmlaq_f32(v1403, vdivq_f32(v753, v772), vmlaq_f32(v750, v780, v767));
                v780.i64[0] = -1;
                v780.i64[1] = -1;
                int32x4_t v789 = vcvtmq_s32_f32(vmlaq_f32(v1412, vdivq_f32(v752, v771), v776));
                int32x4_t v790 = vcvtmq_s32_f32(vmlaq_f32(v1403, vdivq_f32(v753, v771), v777));
                int32x4_t v791 = vcvtmq_s32_f32(v787);
                int32x4_t v792 = vcvtmq_s32_f32(v788);
                int8x16_t v793 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1422, v786), (int8x16_t)vcgtq_s32(v1432, v785)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v786, (int8x16_t)v785), (int32x4_t)v780)), v1479);
                int8x16_t v794 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1422, v790), (int8x16_t)vcgtq_s32(v1432, v789)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v790, (int8x16_t)v789), (int32x4_t)v780)), v1471);
                int32x4_t v795 = vmlaq_s32(v785, v786, v751);
                int8x16_t v796 = (int8x16_t)vdupq_n_s32(0x7F7FFFFFu);
                int8x16_t v797 = vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1422, v784), (int8x16_t)vcgtq_s32(v1432, v783)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v784, (int8x16_t)v783), (int32x4_t)v780)), v773), v782, v796);
                int32x4_t v798 = vmaxq_s32(vmlaq_s32(v783, v784, v751), (int32x4_t)0);
                float32x4_t v748 = v768;
                int32x4_t v799 = vminq_s32(v798, v1394);
                unsigned __int32 v800 = v799.u32[1];
                unsigned __int32 v801 = v799.u32[2];
                unsigned __int32 v802 = v799.u32[3];
                v726[v799.u32[0]] = fminf(*(float *)v797.i32, v726[v799.u32[0]]);
                int32x4_t v803 = vminq_s32(vmaxq_s32(v795, (int32x4_t)0), v1394);
                int32x4_t v804 = vminq_s32(vmaxq_s32(vmlaq_s32(v789, v790, v751), (int32x4_t)0), v1394);
                int8x16_t v805 = vbslq_s8(v793, v1487, v796);
                int8x16_t v806 = vbslq_s8(v794, v1498, v796);
                v726[v803.u32[1]] = fminf(*(float *)&v805.i32[1], v726[v803.u32[1]]);
                v726[v804.u32[2]] = fminf(*(float *)&v806.i32[2], v726[v804.u32[2]]);
                int32x4_t v807 = vminq_s32(vmaxq_s32(vmlaq_s32(v791, v792, v751), (int32x4_t)0), v1394);
                int8x16_t v808 = vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1422, v792), (int8x16_t)vcgtq_s32(v1432, v791)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v792, (int8x16_t)v791), (int32x4_t)v780)), v778), v1507, v796);
                v726[v807.u32[3]] = fminf(*(float *)&v808.i32[3], v726[v807.u32[3]]);
                v726[v800] = fminf(*(float *)&v797.i32[1], v726[v800]);
                v726[v803.u32[2]] = fminf(*(float *)&v805.i32[2], v726[v803.u32[2]]);
                v726[v804.u32[3]] = fminf(*(float *)&v806.i32[3], v726[v804.u32[3]]);
                v726[v807.u32[0]] = fminf(*(float *)v808.i32, v726[v807.u32[0]]);
                v726[v801] = fminf(*(float *)&v797.i32[2], v726[v801]);
                v726[v803.u32[3]] = fminf(*(float *)&v805.i32[3], v726[v803.u32[3]]);
                v726[v804.u32[0]] = fminf(*(float *)v806.i32, v726[v804.u32[0]]);
                v726[v807.u32[1]] = fminf(*(float *)&v808.i32[1], v726[v807.u32[1]]);
                v726[v802] = fminf(*(float *)&v797.i32[3], v726[v802]);
                v726[v803.u32[0]] = fminf(*(float *)v805.i32, v726[v803.u32[0]]);
                v726[v804.u32[1]] = fminf(*(float *)&v806.i32[1], v726[v804.u32[1]]);
                v726[v807.u32[2]] = fminf(*(float *)&v808.i32[2], v726[v807.u32[2]]);
                __asm { FMOV            V0.4S, #16.0 }
                float32x4_t v757 = vaddq_f32(v757, _Q0);
                v755 += 4;
                v756 += 16;
              }
              while (v756 < v740);
              unint64_t v756 = (((v719 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
              float32x4_t v729 = (float32x4_t)a14;
              float32x4_t v728 = (float32x4_t)a15;
              float32x4_t v731 = a12;
              float32x4_t v730 = a13;
              float v733 = *(float *)&a18;
              float v732 = *(float *)&a11;
              float v734 = *(float *)&a16;
              float v738 = v1376;
              float v739 = v1367;
              float v741 = 0.5;
              float32x4_t v742 = v1384;
              float v754 = *((float *)&a17 + 1);
            }
            if (v756 < v719)
            {
              do
              {
                _H2 = v755->i16[0];
                __asm { FCVT            S2, H2 }
                float v812 = 1000.0 / _S2;
                _Q2 = vaddq_f32(v728, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v731, v738 * (float)((float)((float)((float)v756 + v741) - v732) * (float)(1000.0 / _S2))), v730, v739* (float)((float)((float)((float)v735 + v741) - *((float *)&a11 + 1)) * (float)(1000.0 / _S2))), v729, 1000.0 / _S2));
                if (_Q2.f32[2] >= 0.0 && v812 > 0.0)
                {
                  uint64_t v814 = (int)vmlas_n_f32(v733, v734 / _Q2.f32[2], _Q2.f32[0]);
                  if ((v814 & 0x80000000) == 0 && (__int16)v721 > (int)v814)
                  {
                    _S3 = v754 / _Q2.f32[2];
                    __asm { FMLA            S4, S3, V2.S[1] }
                    if (((int)_S4 & 0x80000000) == 0 && (__int16)v720 > (int)(unsigned __int16)(int)_S4)
                    {
                      float v817 = _Q2.f32[2] * 0.001;
                      vImagePixelCount v818 = &v726[v725 * (unsigned __int16)(int)_S4];
                      float v819 = v818[v814];
                      if (v819 == 0.0 || v819 > v817) {
                        v818[v814] = v817;
                      }
                    }
                  }
                }
                ++v756;
                v755 = (float16x4_t *)((char *)v755 + 2);
              }
              while (v719 != v756);
            }
            ++v735;
            __asm { FMOV            V0.4S, #1.0 }
            float32x4_t v742 = vaddq_f32(v742, _Q0);
          }
          while (v735 != v718);
        }
        if (v727)
        {
          uint64_t v822 = 0;
          long long v823 = *(_OWORD *)&buf.width;
          vImagePixelCount v824 = buf.width >> 4;
          size_t v825 = (char *)buf.data;
          vImagePixelCount v826 = buf.height;
          if (buf.width >> 4 <= 1) {
            vImagePixelCount v824 = 1;
          }
          if (buf.height <= 1) {
            vImagePixelCount v826 = 1;
          }
          unint64_t v827 = buf.width & 0xFFFFFFF0;
          float32x4_t v828 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
          do
          {
            int32x2_t v829 = (float32x4_t *)&v825[*((void *)&v823 + 1) * v822];
            vImagePixelCount v830 = v824;
            if ((unint64_t)v823 >= 0x10)
            {
              do
              {
                float32x4_t v831 = v829[2];
                float32x4_t v832 = v829[3];
                int8x16_t v833 = vbicq_s8((int8x16_t)v829[1], (int8x16_t)vceqq_f32(v829[1], v828));
                *(int8x16_t *)int32x2_t v829 = vbicq_s8(*(int8x16_t *)v829, (int8x16_t)vceqq_f32(*v829, v828));
                v829[1] = (float32x4_t)v833;
                v829[2] = (float32x4_t)vbicq_s8((int8x16_t)v831, (int8x16_t)vceqq_f32(v831, v828));
                v829[3] = (float32x4_t)vbicq_s8((int8x16_t)v832, (int8x16_t)vceqq_f32(v832, v828));
                v829 += 4;
                --v830;
              }
              while (v830);
            }
            unint64_t v834 = v823 & 0xFFFFFFFF0000000FLL;
            if ((unint64_t)v823 > v827)
            {
              do
              {
                if (v829->f32[0] == 3.4028e38) {
                  v829->i32[0] = 0;
                }
                int32x2_t v829 = (float32x4_t *)((char *)v829 + 4);
                --v834;
              }
              while (v834);
            }
            ++v822;
          }
          while (v822 != v826);
        }
        goto LABEL_389;
      }
      if (PixelFormatType != 1751410032)
      {
        if (PixelFormatType == 1751411059)
        {
          size_t v607 = CVPixelBufferGetHeight(a1);
          size_t v608 = CVPixelBufferGetWidth(a1);
          unsigned int v609 = CVPixelBufferGetHeight(pixelBuffer);
          unsigned int v610 = CVPixelBufferGetWidth(pixelBuffer);
          size_t v611 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          CVPixelBufferLockBaseAddress(a1, 1uLL);
          CVPixelBufferLockBaseAddress(pixelBuffer, 0);
          memset(&v1512, 0, sizeof(v1512));
          float32x4_t v612 = (CGRect *)MEMORY[0x263F001A8];
          PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
          memset(&buf, 0, sizeof(buf));
          PixelBufferUtils::asVImageBuffer(pixelBuffer, *v612, &buf);
          float v614 = (short float *)buf.data;
          int v613 = buf.height;
          bzero(buf.data, buf.height * buf.rowBytes);
          float32x4_t v620 = (float32x4_t)a14;
          float32x4_t v619 = (float32x4_t)a15;
          float32x4_t v622 = a12;
          float32x4_t v621 = a13;
          float v624 = *(float *)&a18;
          float v623 = *(float *)&a11;
          float v625 = *(float *)&a16;
          if (v607)
          {
            unint64_t v626 = 0;
            float v627 = 1.0 / *(float *)&a9;
            float v628 = 1.0 / *(float *)&v1490;
            unint64_t v629 = v608 & 0xFFFFFFFFFFFFFFF0;
            float v630 = 0.5;
            *(float *)v615.i32 = 0.5 - *((float *)&a11 + 1);
            float32x4_t v631 = (float32x4_t)vdupq_lane_s32(v615, 0);
            *(float *)v615.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
            *(float *)v616.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
            *(float *)v617.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
            *(float *)&long long v618 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
            float32x4_t v632 = (char *)v1512.data;
            size_t v633 = v1512.rowBytes;
            float32x4_t v1338 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
            float32x4_t v1348 = (float32x4_t)vdupq_lane_s32(v617, 0);
            float32x4_t v1314 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
            float32x4_t v1320 = (float32x4_t)vdupq_lane_s32(v616, 0);
            float32x4_t v1294 = (float32x4_t)vdupq_laneq_s32(a14, 2);
            float32x4_t v1304 = (float32x4_t)vdupq_lane_s32(v615, 0);
            float32x4_t v634 = (float32x4_t)vdupq_laneq_s32(a15, 2);
            int32x4_t v635 = vdupq_n_s32(v610);
            float32x4_t v1286 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
            int32x4_t v636 = vdupq_n_s32(v613 * (v611 >> 1) - 2);
            float v637 = *((float *)&a17 + 1);
            float v1366 = 1.0 / *(float *)&a9;
            float v1357 = 1.0 / *(float *)&v1490;
            float v1470 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
            float32x4_t v1478 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
            float32x4_t v1451 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
            int32x4_t v1461 = vdupq_n_s32(v609);
            float32x4_t v1431 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
            float32x4_t v1441 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
            float32x4_t v1411 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
            float v1421 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
            int32x4_t v1393 = vdupq_n_s32(v611 >> 1);
            float32x4_t v1402 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
            do
            {
              float32x4_t v638 = (float16x4_t *)&v632[v626 * v633];
              unint64_t v639 = 0;
              if (v629)
              {
                float32x4_t v1486 = vmlaq_f32(v1338, v1348, v631);
                float32x4_t v1506 = vmlaq_f32(v1314, v1320, v631);
                float32x4_t v1375 = v631;
                float32x4_t v1497 = vmlaq_f32(v1294, v1304, v631);
                float32x4_t v640 = v1286;
                do
                {
                  float32x4_t v641 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                  float32x4_t v642 = vdivq_f32(v641, vcvtq_f32_f16(*v638));
                  float32x4_t v643 = vdivq_f32(v641, vcvtq_f32_f16(v638[1]));
                  float32x4_t v644 = vdivq_f32(v641, vcvtq_f32_f16(v638[2]));
                  __asm { FMOV            V0.4S, #4.0 }
                  float32x4_t v646 = vaddq_f32(v640, _Q0);
                  _Q0.i64[0] = 0x4100000041000000;
                  _Q0.i64[1] = 0x4100000041000000;
                  float32x4_t v647 = vaddq_f32(v640, _Q0);
                  __asm { FMOV            V0.4S, #12.0 }
                  float32x4_t v649 = vaddq_f32(v640, _Q0);
                  float32x4_t v650 = vdivq_f32(v641, vcvtq_f32_f16(v638[3]));
                  float32x4_t v651 = vmlaq_f32(v634, vmlaq_n_f32(v1497, v640, *(float *)&v618), v642);
                  float32x4_t v652 = vmlaq_f32(v634, vmlaq_n_f32(v1497, v646, *(float *)&v618), v643);
                  float32x4_t v653 = vmlaq_f32(v634, vmlaq_n_f32(v1497, v647, *(float *)&v618), v644);
                  float32x4_t v654 = vmlaq_f32(v634, vmlaq_n_f32(v1497, v649, *(float *)&v618), v650);
                  int8x16_t v655 = (int8x16_t)vcgtzq_f32(v643);
                  int8x16_t v656 = (int8x16_t)vcgtzq_f32(v644);
                  float32x4_t v657 = vmlaq_f32(v1441, vmlaq_n_f32(v1486, v640, v1470), v642);
                  float32x4_t v658 = vmlaq_f32(v1402, vmlaq_n_f32(v1506, v640, v1421), v642);
                  float32x4_t v659 = vmlaq_f32(v1441, vmlaq_n_f32(v1486, v646, v1470), v643);
                  long long v660 = v618;
                  float32x4_t v661 = vmlaq_f32(v1402, vmlaq_n_f32(v1506, v646, v1421), v643);
                  float32x4_t v662 = vmlaq_f32(v1441, vmlaq_n_f32(v1486, v647, v1470), v644);
                  float32x4_t v663 = vmlaq_f32(v1402, vmlaq_n_f32(v1506, v647, v1421), v644);
                  int32x4_t v664 = v636;
                  float32x4_t v665 = v634;
                  int8x16_t v666 = vandq_s8((int8x16_t)vcgezq_f32(v651), (int8x16_t)vcgtzq_f32(v642));
                  int8x16_t v667 = vandq_s8((int8x16_t)vcgezq_f32(v652), v655);
                  float32x4_t v668 = vmlaq_f32(v1431, vdivq_f32(v1411, v651), v657);
                  float32x4_t v669 = vmlaq_f32(v1478, vdivq_f32(v1451, v651), v658);
                  int8x16_t v670 = vandq_s8((int8x16_t)vcgezq_f32(v653), v656);
                  float32x4_t v671 = vmlaq_f32(v1431, vdivq_f32(v1411, v652), v659);
                  float32x4_t v672 = vdivq_f32(v1411, v653);
                  float32x4_t v673 = vdivq_f32(v1451, v653);
                  int8x16_t v674 = vandq_s8((int8x16_t)vcgezq_f32(v654), (int8x16_t)vcgtzq_f32(v650));
                  float32x4_t v675 = vmlaq_f32(v1478, vdivq_f32(v1451, v652), v661);
                  float32x4_t v676 = vdivq_f32(v1411, v654);
                  float32x4_t v677 = vdivq_f32(v1451, v654);
                  int8x16_t v678 = (int8x16_t)vdivq_f32(v641, v651);
                  int8x16_t v679 = (int8x16_t)vdivq_f32(v641, v652);
                  int8x16_t v680 = (int8x16_t)vdivq_f32(v641, v653);
                  int8x16_t v681 = (int8x16_t)vdivq_f32(v641, v654);
                  int32x4_t v682 = vcvtmq_s32_f32(v668);
                  int32x4_t v683 = vcvtmq_s32_f32(v669);
                  int32x4_t v684 = vcvtmq_s32_f32(v671);
                  int32x4_t v685 = vcvtmq_s32_f32(v675);
                  int32x4_t v686 = vcvtmq_s32_f32(vmlaq_f32(v1431, v672, v662));
                  int32x4_t v687 = vcvtmq_s32_f32(vmlaq_f32(v1478, v673, v663));
                  int32x4_t v688 = vcvtmq_s32_f32(vmlaq_f32(v1431, v676, vmlaq_f32(v1441, vmlaq_n_f32(v1486, v649, v1470), v650)));
                  int32x4_t v689 = vcvtmq_s32_f32(vmlaq_f32(v1478, v677, vmlaq_f32(v1402, vmlaq_n_f32(v1506, v649, v1421), v650)));
                  v690.i64[0] = -1;
                  v690.i64[1] = -1;
                  int8x16_t v691 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1461, v685), (int8x16_t)vcgtq_s32(v635, v684)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v685, (int8x16_t)v684), v690));
                  int8x16_t v692 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1461, v687), (int8x16_t)vcgtq_s32(v635, v686)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v687, (int8x16_t)v686), v690));
                  int8x16_t v693 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1461, v689), (int8x16_t)vcgtq_s32(v635, v688)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v689, (int8x16_t)v688), v690));
                  int32x4_t v694 = vmlaq_s32(v684, v685, v1393);
                  float32x4_t v634 = v665;
                  int32x4_t v636 = v664;
                  int32x4_t v695 = vmlaq_s32(v686, v687, v1393);
                  int32x4_t v696 = vmlaq_s32(v688, v689, v1393);
                  float32x4_t v697 = (float32x4_t)vandq_s8(vandq_s8(v678, v666), vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1461, v683), (int8x16_t)vcgtq_s32(v635, v682)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v683, (int8x16_t)v682), v690)));
                  float32x4_t v698 = (float32x4_t)vandq_s8(vandq_s8(v679, v667), v691);
                  int8x16_t v699 = vandq_s8(v681, v674);
                  long long v618 = v660;
                  int32x4_t v700 = vminq_s32(vmaxq_s32(vmlaq_s32(v682, v683, v1393), (int32x4_t)0), v664);
                  int32x4_t v701 = vminq_s32(vmaxq_s32(v694, (int32x4_t)0), v664);
                  int32x4_t v702 = vminq_s32(vmaxq_s32(v695, (int32x4_t)0), v664);
                  int32x4_t v703 = vminq_s32(vmaxq_s32(v696, (int32x4_t)0), v664);
                  float32x4_t v704 = (float32x4_t)vandq_s8(v699, v693);
                  unsigned __int32 v705 = v700.u32[1];
                  *(float16x4_t *)v699.i8 = vcvt_f16_f32(v697);
                  v614[v700.u32[0]] = fmaxl(*(short float *)v699.i16, v614[v700.u32[0]]);
                  *(float16x4_t *)v696.i8 = vcvt_f16_f32(v698);
                  v614[v701.u32[1]] = fmaxl(*(short float *)&v696.i16[1], v614[v701.u32[1]]);
                  *(float16x4_t *)v700.i8 = vcvt_f16_f32((float32x4_t)vandq_s8(vandq_s8(v680, v670), v692));
                  v614[v702.u32[2]] = fmaxl(*(short float *)&v700.i16[2], v614[v702.u32[2]]);
                  *(float16x4_t *)v667.i8 = vcvt_f16_f32(v704);
                  v614[v703.u32[3]] = fmaxl(*(short float *)&v667.i16[3], v614[v703.u32[3]]);
                  v614[v705] = fmaxl(*(short float *)&v699.i16[1], v614[v705]);
                  v614[v701.u32[2]] = fmaxl(*(short float *)&v696.i16[2], v614[v701.u32[2]]);
                  v614[v702.u32[3]] = fmaxl(*(short float *)&v700.i16[3], v614[v702.u32[3]]);
                  v614[v703.u32[0]] = fmaxl(*(short float *)v667.i16, v614[v703.u32[0]]);
                  v614[v700.u32[2]] = fmaxl(*(short float *)&v699.i16[2], v614[v700.u32[2]]);
                  v614[v701.u32[3]] = fmaxl(*(short float *)&v696.i16[3], v614[v701.u32[3]]);
                  v614[v702.u32[0]] = fmaxl(*(short float *)v700.i16, v614[v702.u32[0]]);
                  v614[v703.u32[1]] = fmaxl(*(short float *)&v667.i16[1], v614[v703.u32[1]]);
                  v614[v700.u32[3]] = fmaxl(*(short float *)&v699.i16[3], v614[v700.u32[3]]);
                  v614[v701.u32[0]] = fmaxl(*(short float *)v696.i16, v614[v701.u32[0]]);
                  v614[v702.u32[1]] = fmaxl(*(short float *)&v700.i16[1], v614[v702.u32[1]]);
                  v614[v703.u32[2]] = fmaxl(*(short float *)&v667.i16[2], v614[v703.u32[2]]);
                  __asm { FMOV            V0.4S, #16.0 }
                  float32x4_t v640 = vaddq_f32(v640, _Q0);
                  v638 += 4;
                  v639 += 16;
                }
                while (v639 < v629);
                unint64_t v639 = (((v608 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
                float32x4_t v620 = (float32x4_t)a14;
                float32x4_t v619 = (float32x4_t)a15;
                float32x4_t v622 = a12;
                float32x4_t v621 = a13;
                float v624 = *(float *)&a18;
                float v623 = *(float *)&a11;
                float v625 = *(float *)&a16;
                float v627 = v1366;
                float v628 = v1357;
                float v630 = 0.5;
                float32x4_t v631 = v1375;
                float v637 = *((float *)&a17 + 1);
              }
              if (v639 < v608)
              {
                do
                {
                  _H2 = v638->i16[0];
                  __asm { FCVT            S2, H2 }
                  _Q4 = vaddq_f32(v619, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v622, v627 * (float)((float)((float)((float)v639 + v630) - v623) * (float)(1000.0 / _S2))), v621, v628* (float)((float)((float)((float)v626 + v630) - *((float *)&a11 + 1)) * (float)(1000.0 / _S2))), v620, 1000.0 / _S2));
                  if (_Q4.f32[2] >= 0.0 && (float)(1000.0 / _S2) > 0.0)
                  {
                    uint64_t v710 = (int)vmlas_n_f32(v624, v625 / _Q4.f32[2], _Q4.f32[0]);
                    if ((v710 & 0x80000000) == 0 && (__int16)v610 > (int)v710)
                    {
                      _S1 = v637 / _Q4.f32[2];
                      __asm { FMLA            S2, S1, V4.S[1] }
                      if (((int)_S2 & 0x80000000) == 0 && (__int16)v609 > (int)(unsigned __int16)(int)_S2)
                      {
                        _S1 = 1000.0 / _Q4.f32[2];
                        __asm
                        {
                          FCVT            H3, S1
                          FCMP            H1, #0
                        }
                        if (_ZF || _H1 < _H3) {
                          v614[(v611 >> 1) * (unsigned __int16)(int)_S2 + v710] = _H3;
                        }
                      }
                    }
                  }
                  ++v639;
                  float32x4_t v638 = (float16x4_t *)((char *)v638 + 2);
                }
                while (v608 != v639);
              }
              ++v626;
              __asm { FMOV            V0.4S, #1.0 }
              float32x4_t v631 = vaddq_f32(v631, _Q0);
            }
            while (v626 != v607);
          }
          goto LABEL_389;
        }
        goto LABEL_391;
      }
    }
    size_t v835 = CVPixelBufferGetHeight(a1);
    size_t v836 = CVPixelBufferGetWidth(a1);
    size_t v837 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v838 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v839 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    memset(&v1512, 0, sizeof(v1512));
    float v840 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v840, &buf);
    size_t v845 = v839 >> 1;
    unint64_t v846 = (short float *)buf.data;
    if (v845 * v837) {
      memset_pattern16(buf.data, &unk_247F24680, 2 * v845 * v837);
    }
    vImagePixelCount v847 = buf.height;
    float32x4_t v848 = (float32x4_t)a14;
    float32x4_t v849 = (float32x4_t)a15;
    float32x4_t v851 = a12;
    float32x4_t v850 = a13;
    float v853 = *(float *)&a18;
    float v852 = *(float *)&a11;
    float v854 = *(float *)&a16;
    if (v835)
    {
      unint64_t v855 = 0;
      float v856 = 1.0 / *(float *)&a9;
      float v857 = 1.0 / *(float *)&v1490;
      unint64_t v858 = v836 & 0xFFFFFFFFFFFFFFF0;
      float v859 = 0.5;
      *(float *)v841.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v860 = (float32x4_t)vdupq_lane_s32(v841, 0);
      *(float *)v841.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
      *(float *)v842.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
      *(float *)v843.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
      *(float *)&long long v844 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      float v861 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      float32x4_t v1350 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1359 = (float32x4_t)vdupq_lane_s32(v843, 0);
      float32x4_t v1340 = (float32x4_t)vdupq_lane_s32(v842, 0);
      float v862 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v1316 = (float32x4_t)vdupq_lane_s32(v841, 0);
      float32x4_t v1322 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1306 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      float32x4_t v863 = (char *)v1512.data;
      size_t v864 = v1512.rowBytes;
      float32x4_t v1296 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      float32x4_t v865 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v866 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v867 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      int32x4_t v868 = vdupq_n_s32(LODWORD(buf.height) * (int)v845 - 2);
      v869.i64[0] = 0x4100000041000000;
      v869.i64[1] = 0x4100000041000000;
      float v1377 = 1.0 / *(float *)&a9;
      float v1368 = 1.0 / *(float *)&v1490;
      float32x4_t v1463 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      int32x4_t v1472 = vdupq_n_s32(v838);
      int32x4_t v1443 = vdupq_n_s32(v845);
      float32x4_t v1453 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      float32x4_t v1423 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      float32x4_t v1433 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      int32x4_t v1413 = vdupq_n_s32(v837);
      do
      {
        float32x4_t v870 = (float16x4_t *)&v863[v855 * v864];
        unint64_t v871 = 0;
        if (v858)
        {
          float32x4_t v1499 = vmlaq_f32(v1350, v1359, v860);
          float32x4_t v1480 = vmlaq_f32(v1322, v1340, v860);
          float32x4_t v1385 = v860;
          float32x4_t v1488 = vmlaq_f32(v1306, v1316, v860);
          float32x4_t v872 = v1296;
          do
          {
            float32x4_t v1508 = v872;
            float32x4_t v873 = (float32x4_t)vdupq_n_s32(0x447A0000u);
            float32x4_t v874 = vdivq_f32(v873, vcvtq_f32_f16(*v870));
            float32x4_t v875 = vdivq_f32(v873, vcvtq_f32_f16(v870[1]));
            float32x4_t v876 = vdivq_f32(v873, vcvtq_f32_f16(v870[2]));
            __asm { FMOV            V0.4S, #4.0 }
            float32x4_t v878 = vaddq_f32(v872, _Q0);
            float32x4_t v879 = vaddq_f32(v1508, v869);
            float32x4_t v880 = vdivq_f32(v873, vcvtq_f32_f16(v870[3]));
            __asm { FMOV            V0.4S, #12.0 }
            float32x4_t v882 = vaddq_f32(v1508, _Q0);
            long long v883 = v844;
            float32x4_t v884 = vmlaq_f32(v865, vmlaq_n_f32(v1488, v1508, *(float *)&v844), v874);
            float32x4_t v885 = vmlaq_f32(v865, vmlaq_n_f32(v1488, v878, *(float *)&v844), v875);
            float32x4_t v886 = vmlaq_f32(v865, vmlaq_n_f32(v1488, v879, *(float *)&v844), v876);
            float32x4_t v887 = vmlaq_f32(v865, vmlaq_n_f32(v1488, v882, *(float *)&v844), v880);
            int32x4_t v888 = v868;
            float32x4_t v889 = v866;
            float32x4_t v890 = vmlaq_f32(v866, vmlaq_n_f32(v1499, v1508, v862), v874);
            float32x4_t v891 = vmlaq_f32(v867, vmlaq_n_f32(v1480, v1508, v861), v874);
            float32x4_t v892 = vmlaq_f32(v866, vmlaq_n_f32(v1499, v878, v862), v875);
            int8x16_t v893 = vandq_s8((int8x16_t)vcgezq_f32(v884), (int8x16_t)vcgtzq_f32(v874));
            int8x16_t v894 = vandq_s8((int8x16_t)vcgezq_f32(v885), (int8x16_t)vcgtzq_f32(v875));
            int8x16_t v895 = vandq_s8((int8x16_t)vcgezq_f32(v886), (int8x16_t)vcgtzq_f32(v876));
            float32x4_t v896 = vmlaq_f32(v866, vmlaq_n_f32(v1499, v882, v862), v880);
            int8x16_t v897 = vandq_s8((int8x16_t)vcgezq_f32(v887), (int8x16_t)vcgtzq_f32(v880));
            float32x4_t v898 = vmlaq_f32(v867, vmlaq_n_f32(v1480, v882, v861), v880);
            float32x4_t v899 = vmlaq_f32(v1453, vdivq_f32(v1463, v884), v890);
            float32x4_t v900 = vmlaq_f32(v1433, vdivq_f32(v1423, v884), v891);
            float32x4_t v901 = vmlaq_f32(v1453, vdivq_f32(v1463, v885), v892);
            float32x4_t v902 = vdivq_f32(v1423, v886);
            float32x4_t v903 = vmlaq_f32(v1433, vdivq_f32(v1423, v885), vmlaq_f32(v867, vmlaq_n_f32(v1480, v878, v861), v875));
            float32x4_t v904 = vmlaq_f32(v1453, vdivq_f32(v1463, v886), vmlaq_f32(v889, vmlaq_n_f32(v1499, v879, v862), v876));
            float32x4_t v905 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
            int8x16_t v906 = (int8x16_t)vmulq_f32(v884, v905);
            int8x16_t v907 = (int8x16_t)vmulq_f32(v885, v905);
            int8x16_t v908 = (int8x16_t)vmulq_f32(v886, v905);
            int8x16_t v909 = (int8x16_t)vmulq_f32(v887, v905);
            int32x4_t v910 = vcvtmq_s32_f32(v899);
            int32x4_t v911 = vcvtmq_s32_f32(v900);
            int32x4_t v912 = vcvtmq_s32_f32(v901);
            int32x4_t v913 = vcvtmq_s32_f32(v903);
            int32x4_t v914 = vcvtmq_s32_f32(v904);
            int32x4_t v915 = vcvtmq_s32_f32(vmlaq_f32(v1433, v902, vmlaq_f32(v867, vmlaq_n_f32(v1480, v879, v861), v876)));
            v916.i64[0] = -1;
            v916.i64[1] = -1;
            int32x4_t v917 = vcvtmq_s32_f32(vmlaq_f32(v1453, vdivq_f32(v1463, v887), v896));
            int32x4_t v918 = vcvtmq_s32_f32(vmlaq_f32(v1433, vdivq_f32(v1423, v887), v898));
            int8x16_t v919 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1413, v918), (int8x16_t)vcgtq_s32(v1472, v917)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v918, (int8x16_t)v917), v916)), v897);
            int8x16_t v920 = (int8x16_t)vdupq_n_s32(0x477FE000u);
            float32x4_t v921 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1413, v911), (int8x16_t)vcgtq_s32(v1472, v910)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v911, (int8x16_t)v910), v916)), v893), v906, v920);
            float32x4_t v922 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1413, v913), (int8x16_t)vcgtq_s32(v1472, v912)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v913, (int8x16_t)v912), v916)), v894), v907, v920);
            float32x4_t v923 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1413, v915), (int8x16_t)vcgtq_s32(v1472, v914)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v915, (int8x16_t)v914), v916)), v895), v908, v920);
            float32x4_t v924 = (float32x4_t)vbslq_s8(v919, v909, v920);
            int32x4_t v925 = vmlaq_s32(v910, v911, v1443);
            long long v844 = v883;
            float32x4_t v866 = v889;
            int32x4_t v926 = vmlaq_s32(v912, v913, v1443);
            int32x4_t v868 = v888;
            v869.i64[0] = 0x4100000041000000;
            v869.i64[1] = 0x4100000041000000;
            int32x4_t v927 = vminq_s32(vmaxq_s32(v925, (int32x4_t)0), v868);
            int32x4_t v928 = vminq_s32(vmaxq_s32(v926, (int32x4_t)0), v868);
            int32x4_t v929 = vminq_s32(vmaxq_s32(vmlaq_s32(v914, v915, v1443), (int32x4_t)0), v868);
            int32x4_t v930 = vminq_s32(vmaxq_s32(vmlaq_s32(v917, v918, v1443), (int32x4_t)0), v868);
            unsigned __int32 v931 = v927.u32[1];
            *(float16x4_t *)v895.i8 = vcvt_f16_f32(v921);
            v846[v927.u32[0]] = fminl(*(short float *)v895.i16, v846[v927.u32[0]]);
            *(float16x4_t *)v914.i8 = vcvt_f16_f32(v922);
            v846[v928.u32[1]] = fminl(*(short float *)&v914.i16[1], v846[v928.u32[1]]);
            *(float16x4_t *)v927.i8 = vcvt_f16_f32(v923);
            v846[v929.u32[2]] = fminl(*(short float *)&v927.i16[2], v846[v929.u32[2]]);
            *(float16x4_t *)v893.i8 = vcvt_f16_f32(v924);
            v846[v930.u32[3]] = fminl(*(short float *)&v893.i16[3], v846[v930.u32[3]]);
            v846[v931] = fminl(*(short float *)&v895.i16[1], v846[v931]);
            v846[v928.u32[2]] = fminl(*(short float *)&v914.i16[2], v846[v928.u32[2]]);
            v846[v929.u32[3]] = fminl(*(short float *)&v927.i16[3], v846[v929.u32[3]]);
            v846[v930.u32[0]] = fminl(*(short float *)v893.i16, v846[v930.u32[0]]);
            v846[v927.u32[2]] = fminl(*(short float *)&v895.i16[2], v846[v927.u32[2]]);
            v846[v928.u32[3]] = fminl(*(short float *)&v914.i16[3], v846[v928.u32[3]]);
            v846[v929.u32[0]] = fminl(*(short float *)v927.i16, v846[v929.u32[0]]);
            v846[v930.u32[1]] = fminl(*(short float *)&v893.i16[1], v846[v930.u32[1]]);
            v846[v927.u32[3]] = fminl(*(short float *)&v895.i16[3], v846[v927.u32[3]]);
            v846[v928.u32[0]] = fminl(*(short float *)v914.i16, v846[v928.u32[0]]);
            v846[v929.u32[1]] = fminl(*(short float *)&v927.i16[1], v846[v929.u32[1]]);
            v846[v930.u32[2]] = fminl(*(short float *)&v893.i16[2], v846[v930.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v872 = vaddq_f32(v1508, _Q0);
            v870 += 4;
            v871 += 16;
          }
          while (v871 < v858);
          unint64_t v871 = (((v836 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v848 = (float32x4_t)a14;
          float32x4_t v849 = (float32x4_t)a15;
          float32x4_t v851 = a12;
          float32x4_t v850 = a13;
          float v853 = *(float *)&a18;
          float v852 = *(float *)&a11;
          float v854 = *(float *)&a16;
          float v856 = v1377;
          float v857 = v1368;
          float v859 = 0.5;
          float32x4_t v860 = v1385;
        }
        if (v871 < v836)
        {
          do
          {
            _H2 = v870->i16[0];
            __asm { FCVT            S2, H2 }
            _Q7 = vaddq_f32(v849, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v851, v856 * (float)((float)((float)((float)v871 + v859) - v852) * (float)(1000.0 / _S2))), v850, v857* (float)((float)((float)((float)v855 + v859) - *((float *)&a11 + 1)) * (float)(1000.0 / _S2))), v848, 1000.0 / _S2));
            if (_Q7.f32[2] >= 0.0 && (float)(1000.0 / _S2) > 0.0)
            {
              uint64_t v936 = (int)vmlas_n_f32(v853, v854 / _Q7.f32[2], _Q7.f32[0]);
              if ((v936 & 0x80000000) == 0 && (__int16)v838 > (int)v936)
              {
                _S1 = *((float *)&a17 + 1) / _Q7.f32[2];
                __asm { FMLA            S2, S1, V7.S[1] }
                if (((int)_S2 & 0x80000000) == 0 && (__int16)v837 > (int)(unsigned __int16)(int)_S2)
                {
                  _S1 = _Q7.f32[2] * 0.001;
                  __asm
                  {
                    FCVT            H4, S1
                    FCMP            H1, #0
                  }
                  if (_ZF || _H1 > _H4) {
                    v846[v845 * (unsigned __int16)(int)_S2 + v936] = _H4;
                  }
                }
              }
            }
            ++v871;
            float32x4_t v870 = (float16x4_t *)((char *)v870 + 2);
          }
          while (v836 != v871);
        }
        ++v855;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v860 = vaddq_f32(v860, _Q0);
        v869.i64[0] = 0x4100000041000000;
        v869.i64[1] = 0x4100000041000000;
      }
      while (v855 != v835);
    }
    if (v847)
    {
      uint64_t v944 = 0;
      long long v945 = *(_OWORD *)&buf.width;
      vImagePixelCount v946 = buf.width >> 4;
      v947 = (char *)buf.data;
      vImagePixelCount v948 = buf.height;
      if (buf.width >> 4 <= 1) {
        vImagePixelCount v946 = 1;
      }
      if (buf.height <= 1) {
        vImagePixelCount v948 = 1;
      }
      unint64_t v949 = buf.width & 0xFFFFFFF0;
      do
      {
        long long v950 = (int8x8_t *)&v947[*((void *)&v945 + 1) * v944];
        vImagePixelCount v951 = v946;
        if ((unint64_t)v945 >= 0x10)
        {
          do
          {
            float16x4_t v952 = (float16x4_t)v950[2];
            float16x4_t v953 = (float16x4_t)v950[3];
            int8x8_t v954 = vbic_s8(v950[1], (int8x8_t)vceq_f16((float16x4_t)v950[1], (float16x4_t)0x8400840084008400));
            *long long v950 = vbic_s8(*v950, (int8x8_t)vceq_f16((float16x4_t)*v950, (float16x4_t)0x8400840084008400));
            v950[1] = v954;
            v950[2] = vbic_s8((int8x8_t)v952, (int8x8_t)vceq_f16(v952, (float16x4_t)0x8400840084008400));
            v950[3] = vbic_s8((int8x8_t)v953, (int8x8_t)vceq_f16(v953, (float16x4_t)0x8400840084008400));
            v950 += 4;
            --v951;
          }
          while (v951);
        }
        unint64_t v955 = v945 & 0xFFFFFFFF0000000FLL;
        if ((unint64_t)v945 > v949)
        {
          do
          {
            if (*(short float *)v950->i16 == COERCE_SHORT_FLOAT(31743)) {
              v950->i16[0] = 0;
            }
            long long v950 = (int8x8_t *)((char *)v950 + 2);
            --v955;
          }
          while (v955);
        }
        ++v944;
      }
      while (v944 != v948);
    }
    goto LABEL_389;
  }
  if (PixelFormatType <= 1717855599)
  {
    if (PixelFormatType == 825437747)
    {
      size_t v1297 = CVPixelBufferGetHeight(a1);
      size_t v956 = CVPixelBufferGetWidth(a1);
      size_t v957 = CVPixelBufferGetHeight(pixelBuffer);
      unsigned int v958 = CVPixelBufferGetWidth(pixelBuffer);
      size_t v959 = CVPixelBufferGetBytesPerRow(pixelBuffer);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      CVPixelBufferLockBaseAddress(v1318, 0);
      memset(&v1512, 0, sizeof(v1512));
      float v960 = (CGRect *)MEMORY[0x263F001A8];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
      memset(&buf, 0, sizeof(buf));
      PixelBufferUtils::asVImageBuffer(pixelBuffer, *v960, &buf);
      PixelBufferUtils::asVImageBuffer(v1318, *v960, &v1511);
      size_t v965 = v959 >> 1;
      float32x4_t v1287 = (char *)v1511.data;
      size_t v1283 = v1511.rowBytes;
      float32x4_t v966 = (__int16 *)buf.data;
      size_t v967 = (v959 >> 1) * v957;
      if (v967) {
        memset_pattern16(buf.data, &unk_247F24690, 2 * v967);
      }
      vImagePixelCount v968 = buf.height;
      if (v1297)
      {
        unint64_t v969 = 0;
        v970.i32[1] = v1490;
        v971.i32[1] = HIDWORD(a9);
        float v972 = *(float *)&a11;
        float v973 = 1.0 / *(float *)&a9;
        float v974 = 1.0 / *(float *)&v1490;
        unint64_t v975 = v956 & 0xFFFFFFFFFFFFFFF0;
        float v976 = 0.5;
        *(float *)v961.i32 = 0.5 - *((float *)&a11 + 1);
        float32x4_t v977 = (float32x4_t)vdupq_lane_s32(v961, 0);
        float32x4_t v979 = a13;
        float32x4_t v978 = (float32x4_t)a14;
        *(float *)v961.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
        *(float *)v970.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
        *(float *)v971.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
        float32x4_t v1268 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
        float32x4_t v1270 = (float32x4_t)vdupq_lane_s32(v971, 0);
        float32x4_t v1264 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
        float32x4_t v1266 = (float32x4_t)vdupq_lane_s32(v970, 0);
        float32x4_t v1261 = (float32x4_t)vdupq_laneq_s32(a14, 2);
        float32x4_t v1262 = (float32x4_t)vdupq_lane_s32(v961, 0);
        float32x4_t v980 = a12;
        *(float *)&long long v962 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
        *(float *)&long long v963 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
        *(float *)&long long v964 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
        float32x4_t v1259 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
        float32x4_t v981 = (float32x4_t)a15;
        float32x2_t v982 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
        float32x4_t v983 = (float32x4_t)vdupq_laneq_s32(a15, 2);
        float32x4_t v984 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
        int32x4_t v985 = vdupq_n_s32(v958);
        int v986 = (__int16)v958;
        int v987 = (__int16)v957;
        float32x2_t v988 = (float32x2_t)a18;
        unint64_t v1256 = (((v956 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
        float32x4_t v1280 = (char *)v1512.data;
        size_t v1278 = v1512.rowBytes;
        int32x4_t v1341 = vdupq_n_s32(v965);
        size_t v1276 = v956;
        float v1273 = 1.0 / *(float *)&a9;
        int v1257 = (__int16)v957;
        int v1258 = (__int16)v958;
        float32x4_t v1404 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
        float32x4_t v1414 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
        float32x4_t v1386 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
        int32x4_t v1395 = vdupq_n_s32(LODWORD(buf.height) * (int)v965 - 2);
        float32x4_t v1369 = v983;
        float32x4_t v1351 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
        int32x4_t v1360 = vdupq_n_s32(v957);
        float32x4_t v989 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
        do
        {
          v990 = (float16x4_t *)&v1280[v1278 * v969];
          float32x4_t v991 = (__int16 *)&v1287[v969 * v1283];
          if (v975)
          {
            uint64_t v992 = 0;
            float32x4_t v1444 = vmlaq_f32(v1268, v1270, v977);
            float32x4_t v1434 = vmlaq_f32(v1264, v1266, v977);
            float32x4_t v1307 = v977;
            float32x4_t v1424 = vmlaq_f32(v1261, v1262, v977);
            float32x4_t v993 = v1259;
            v994.i64[0] = 0x4100000041000000;
            v994.i64[1] = 0x4100000041000000;
            do
            {
              uint64_t v1500 = v992;
              v1509 = v991;
              float32x4_t v995 = (float32x4_t)vdupq_n_s32(0x447A0000u);
              float32x4_t v996 = vdivq_f32(v995, vcvtq_f32_f16(*v990));
              float32x4_t v997 = vdivq_f32(v995, vcvtq_f32_f16(v990[1]));
              float32x4_t v998 = vdivq_f32(v995, vcvtq_f32_f16(v990[2]));
              __asm { FMOV            V0.4S, #4.0 }
              float32x4_t v1000 = vaddq_f32(v993, _Q0);
              float32x4_t v1001 = vaddq_f32(v993, v994);
              float32x4_t v1002 = vdivq_f32(v995, vcvtq_f32_f16(v990[3]));
              __asm { FMOV            V3.4S, #12.0 }
              float32x4_t v1004 = vaddq_f32(v993, _Q3);
              float32x4_t v1005 = vmlaq_f32(v983, vmlaq_n_f32(v1424, v993, *(float *)&v962), v996);
              float32x4_t v1006 = vmlaq_f32(v983, vmlaq_n_f32(v1424, v1000, *(float *)&v962), v997);
              float32x4_t v1007 = vmlaq_f32(v983, vmlaq_n_f32(v1424, v1001, *(float *)&v962), v998);
              float32x4_t v1008 = vmlaq_f32(v983, vmlaq_n_f32(v1424, v1004, *(float *)&v962), v1002);
              float32x4_t v1009 = vmlaq_f32(v984, vmlaq_n_f32(v1444, v993, *(float *)&v964), v996);
              long long v1010 = v962;
              float32x4_t v1011 = vmlaq_f32(v1351, vmlaq_n_f32(v1434, v993, *(float *)&v963), v996);
              float32x4_t v1012 = vmlaq_f32(v984, vmlaq_n_f32(v1444, v1000, *(float *)&v964), v997);
              float32x4_t v1013 = vmlaq_f32(v1351, vmlaq_n_f32(v1434, v1000, *(float *)&v963), v997);
              int8x16_t v1014 = vandq_s8((int8x16_t)vcgezq_f32(v1005), (int8x16_t)vcgtzq_f32(v996));
              float32x4_t v1015 = vmlaq_f32(v984, vmlaq_n_f32(v1444, v1001, *(float *)&v964), v998);
              int8x16_t v1016 = vandq_s8((int8x16_t)vcgezq_f32(v1006), (int8x16_t)vcgtzq_f32(v997));
              float32x4_t v1017 = vmlaq_f32(v1351, vmlaq_n_f32(v1434, v1001, *(float *)&v963), v998);
              int8x16_t v1018 = vandq_s8((int8x16_t)vcgezq_f32(v1007), (int8x16_t)vcgtzq_f32(v998));
              float32x4_t v1019 = vmlaq_f32(v984, vmlaq_n_f32(v1444, v1004, *(float *)&v964), v1002);
              int8x16_t v1020 = vandq_s8((int8x16_t)vcgezq_f32(v1008), (int8x16_t)vcgtzq_f32(v1002));
              int32x4_t v1021 = v985;
              float32x4_t v1022 = v984;
              long long v1023 = v964;
              long long v1024 = v963;
              float32x4_t v1025 = vmlaq_f32(v1351, vmlaq_n_f32(v1434, v1004, *(float *)&v963), v1002);
              float32x4_t v1026 = vmlaq_f32(v1386, vdivq_f32(v989, v1007), v1015);
              int32x4_t v1027 = vcvtmq_s32_f32(vmlaq_f32(v1386, vdivq_f32(v989, v1005), v1009));
              int32x4_t v1028 = vcvtmq_s32_f32(vmlaq_f32(v1414, vdivq_f32(v1404, v1005), v1011));
              int32x4_t v1029 = vcvtmq_s32_f32(vmlaq_f32(v1386, vdivq_f32(v989, v1006), v1012));
              int32x4_t v1030 = vcvtmq_s32_f32(vmlaq_f32(v1414, vdivq_f32(v1404, v1006), v1013));
              int32x4_t v1031 = vcvtmq_s32_f32(v1026);
              int32x4_t v1032 = vcvtmq_s32_f32(vmlaq_f32(v1414, vdivq_f32(v1404, v1007), v1017));
              int32x4_t v1033 = vcvtmq_s32_f32(vmlaq_f32(v1386, vdivq_f32(v989, v1008), v1019));
              float32x4_t v1034 = vmlaq_f32(v1414, vdivq_f32(v1404, v1008), v1025);
              long long v963 = v1024;
              long long v964 = v1023;
              float32x4_t v984 = v1022;
              int32x4_t v985 = v1021;
              int32x4_t v1035 = vcvtmq_s32_f32(v1034);
              int8x16_t v1036 = (int8x16_t)vcgtq_s32(v1021, v1027);
              v1021.i64[0] = -1;
              v1021.i64[1] = -1;
              int32x4_t v1037 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1360, v1028), v1036), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1028, (int8x16_t)v1027), v1021)), v1014);
              *(int16x4_t *)v1036.i8 = vmovn_s32(v1037);
              v1515.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v1027), *(int8x8_t *)v1036.i8);
              v1515.val[1] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v1028), *(int8x8_t *)v1036.i8);
              int32x4_t v1038 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1360, v1030), (int8x16_t)vcgtq_s32(v985, v1029)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1030, (int8x16_t)v1029), v1021)), v1016);
              *(int16x4_t *)v1012.f32 = vmovn_s32(v1038);
              int32x4_t v1039 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1360, v1032), (int8x16_t)vcgtq_s32(v985, v1031)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1032, (int8x16_t)v1031), v1021)), v1018);
              v994.i64[0] = 0x4100000041000000;
              v994.i64[1] = 0x4100000041000000;
              __int32 v1040 = v991;
              vst2_s16(v1040, v1515);
              v1040 += 8;
              v1515.val[1] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v1029), *(int8x8_t *)v1012.f32);
              *(int8x8_t *)v1014.i8 = vorn_s8((int8x8_t)vmovn_s32(v1030), *(int8x8_t *)v1012.f32);
              *(int16x4_t *)v1012.f32 = vmovn_s32(v1039);
              vst2_s16(v1040, *(int16x4x2_t *)((char *)&v1014 - 8));
              v1515.val[1] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v1031), *(int8x8_t *)v1012.f32);
              *(int8x8_t *)v1014.i8 = vorn_s8((int8x8_t)vmovn_s32(v1032), *(int8x8_t *)v1012.f32);
              long long v962 = v1010;
              int32x4_t v1041 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1360, v1035), (int8x16_t)vcgtq_s32(v985, v1033)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1035, (int8x16_t)v1033), v1021)), v1020);
              int8x16_t v1042 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
              float32x4_t v1043 = (float32x4_t)vbslq_s8((int8x16_t)v1037, (int8x16_t)vmulq_f32(v1005, v994), v1042);
              float32x4_t v1044 = (float32x4_t)vbslq_s8((int8x16_t)v1038, (int8x16_t)vmulq_f32(v1006, v994), v1042);
              float32x4_t v1045 = (float32x4_t)vbslq_s8((int8x16_t)v1039, (int8x16_t)vmulq_f32(v1007, v994), v1042);
              float32x4_t v1046 = (float32x4_t)vbslq_s8((int8x16_t)v1041, (int8x16_t)vmulq_f32(v1008, v994), v1042);
              unsigned __int32 v1047 = v991 + 16;
              *(int16x4_t *)v1008.f32 = vmovn_s32(v1041);
              vst2_s16(v1047, *(int16x4x2_t *)((char *)&v1014 - 8));
              float32x4_t v983 = v1369;
              *(int8x8_t *)v1005.f32 = vorn_s8((int8x8_t)vmovn_s32(v1033), *(int8x8_t *)v1008.f32);
              *(int8x8_t *)v1042.i8 = vorn_s8((int8x8_t)vmovn_s32(v1035), *(int8x8_t *)v1008.f32);
              int32x4_t v1048 = v991 + 24;
              vst2_s16(v1048, (int16x4x2_t)v1005);
              int32x4_t v1049 = vminq_s32(vmaxq_s32(vmlaq_s32(v1027, v1028, v1341), (int32x4_t)0), v1395);
              unsigned __int32 v1489 = v1049.u32[1];
              uint64_t v1050 = v1049.i64[1];
              unsigned __int32 v1051 = v1049.i32[0];
              int32x4_t v1052 = vcvtq_s32_f32(v1043);
              __int32 v1053 = v1052.i32[1];
              __int32 v1054 = v1052.i32[2];
              __int32 v1464 = v1052.i32[3];
              __int32 v1055 = v1052.i32[0];
              int32x4_t v1056 = vminq_s32(vmaxq_s32(vmlaq_s32(v1033, v1035, v1341), (int32x4_t)0), v1395);
              int32x4_t v1057 = vcvtq_s32_f32(v1046);
              unsigned __int32 v1058 = v1056.u32[3];
              unsigned __int32 v1454 = v1056.u32[1];
              unsigned __int32 v1059 = v1056.u32[2];
              unsigned __int32 v1060 = v1056.i32[0];
              int32x4_t v1061 = vminq_s32(vmaxq_s32(vmlaq_s32(v1031, v1032, v1341), (int32x4_t)0), v1395);
              unint64_t v1062 = v975;
              unsigned __int32 v1063 = v1061.u32[2];
              unsigned __int32 v1064 = v1061.u32[3];
              unsigned __int32 v1065 = v1061.u32[1];
              unsigned __int32 v1066 = v1061.i32[0];
              int32x4_t v1067 = vcvtq_s32_f32(v1045);
              __int32 v1068 = v1067.i32[2];
              int v1069 = v990;
              __int32 v1070 = v1067.i32[3];
              __int32 v1071 = v1067.i32[1];
              __int32 v1072 = v1067.i32[0];
              int32x4_t v1073 = vminq_s32(vmaxq_s32(vmlaq_s32(v1029, v1030, v1341), (int32x4_t)0), v1395);
              __int32 v1074 = v966[v1051];
              int32x4_t v1075 = vcvtq_s32_f32(v1044);
              if (v1055 < v1074) {
                LOWORD(v1074) = v1055;
              }
              unsigned __int32 v1076 = v1073.u32[1];
              v966[v1051] = v1074;
              unsigned __int32 v1077 = v1073.u32[2];
              unsigned __int32 v1078 = v1073.u32[3];
              __int16 v1079 = v1075.i16[2];
              unsigned __int32 v1080 = v1073.i32[0];
              __asm { FMOV            V0.4S, #16.0 }
              float32x4_t v993 = vaddq_f32(v993, _Q0);
              if (v1075.i32[1] >= v966[v1076]) {
                __int16 v1079 = v966[v1076];
              }
              v966[v1076] = v1079;
              if (v1068 >= v966[v1063]) {
                LOWORD(v1068) = v966[v1063];
              }
              v966[v1063] = v1068;
              unint64_t v975 = v1062;
              int v1082 = v966[v1058];
              if (v1057.i32[3] < v1082) {
                LOWORD(v1082) = v1057.i16[6];
              }
              v966[v1058] = v1082;
              __int32 v1083 = v966[v1489];
              if (v1053 < v1083) {
                LOWORD(v1083) = v1053;
              }
              v966[v1489] = v1083;
              int v1084 = v966[v1077];
              if (v1075.i32[2] < v1084) {
                LOWORD(v1084) = v1075.i16[4];
              }
              v966[v1077] = v1084;
              __int32 v1085 = v966[v1064];
              if (v1070 < v1085) {
                LOWORD(v1085) = v1070;
              }
              v966[v1064] = v1085;
              int v1086 = v966[v1060];
              if (v1057.i32[0] < v1086) {
                LOWORD(v1086) = v1057.i16[0];
              }
              v966[v1060] = v1086;
              __int32 v1087 = v966[v1050];
              if (v1054 < v1087) {
                LOWORD(v1087) = v1054;
              }
              v966[v1050] = v1087;
              int v1088 = v966[v1078];
              if (v1075.i32[3] < v1088) {
                LOWORD(v1088) = v1075.i16[6];
              }
              v966[v1078] = v1088;
              __int32 v1089 = v966[v1066];
              if (v1072 < v1089) {
                LOWORD(v1089) = v1072;
              }
              v966[v1066] = v1089;
              int v1090 = v966[v1454];
              if (v1057.i32[1] < v1090) {
                LOWORD(v1090) = v1057.i16[2];
              }
              v966[v1454] = v1090;
              __int32 v1091 = v966[HIDWORD(v1050)];
              if (v1464 < v1091) {
                LOWORD(v1091) = v1464;
              }
              v966[HIDWORD(v1050)] = v1091;
              int v1092 = v966[v1080];
              if (v1075.i32[0] < v1092) {
                LOWORD(v1092) = v1075.i16[0];
              }
              v966[v1080] = v1092;
              __int32 v1093 = v966[v1065];
              if (v1071 < v1093) {
                LOWORD(v1093) = v1071;
              }
              v966[v1065] = v1093;
              int v1094 = v966[v1059];
              if (v1057.i32[2] < v1094) {
                LOWORD(v1094) = v1057.i16[4];
              }
              v966[v1059] = v1094;
              v990 = v1069 + 4;
              float32x4_t v991 = v1509 + 32;
              uint64_t v992 = v1500 + 16;
            }
            while (v1500 + 16 < v1062);
            unint64_t v1095 = v1256;
            float32x4_t v978 = (float32x4_t)a14;
            float32x4_t v981 = (float32x4_t)a15;
            float32x4_t v980 = a12;
            float32x4_t v979 = a13;
            float32x2_t v988 = (float32x2_t)a18;
            float v972 = *(float *)&a11;
            float32x2_t v982 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
            size_t v956 = v1276;
            size_t v965 = v959 >> 1;
            float v973 = v1273;
            float v974 = 1.0 / *(float *)&v1490;
            float v976 = 0.5;
            float32x4_t v977 = v1307;
            int v987 = v1257;
            int v986 = v1258;
          }
          else
          {
            unint64_t v1095 = 0;
          }
          if (v1095 < v956)
          {
            do
            {
              _H2 = v990->i16[0];
              __asm { FCVT            S2, H2 }
              float v1098 = 1000.0 / _S2;
              int32x4_t v1099 = (int32x4_t)vaddq_f32(v981, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v980, v973 * (float)((float)((float)((float)v1095 + v976) - v972) * v1098)), v979, v974* (float)((float)((float)((float)v969 + v976) - *((float *)&a11 + 1)) * v1098)), v978, v1098));
              uint64_t v1100 = 0xFFFF0000FFFFLL;
              if (*(float *)&v1099.i32[2] >= 0.0 && v1098 > 0.0)
              {
                int32x2_t v1101 = vcvt_s32_f32(vmla_f32(v988, vdiv_f32(v982, (float32x2_t)vdup_laneq_s32(v1099, 2)), *(float32x2_t *)v1099.i8));
                if ((v1101.i32[0] & 0x80000000) == 0
                  && v986 > v1101.i32[0]
                  && (v1101.i32[1] & 0x80000000) == 0
                  && v987 > v1101.u16[2])
                {
                  v1102 = &v966[v965 * v1101.u16[2]];
                  unsigned int v1103 = vcvts_n_s32_f32(*(float *)&v1099.i32[2], 3uLL);
                  if (v1103 <= (unsigned __int16)(v1102[v1101.u32[0]] - 1)) {
                    v1102[v1101.u32[0]] = v1103;
                  }
                  uint64_t v1100 = (uint64_t)v1101;
                }
              }
              *float32x4_t v991 = v1100;
              v991[1] = WORD2(v1100);
              ++v1095;
              v990 = (float16x4_t *)((char *)v990 + 2);
              v991 += 2;
            }
            while (v956 != v1095);
          }
          ++v969;
          __asm { FMOV            V0.4S, #1.0 }
          float32x4_t v977 = vaddq_f32(v977, _Q0);
        }
        while (v969 != v1297);
        vImagePixelCount v968 = buf.height;
      }
      if (v968)
      {
        uint64_t v1105 = 0;
        long long v1106 = *(_OWORD *)&buf.width;
        int32x2_t v1107 = (char *)buf.data;
        vImagePixelCount v1108 = buf.width >> 4;
        if (buf.width >> 4 <= 1) {
          vImagePixelCount v1108 = 1;
        }
        unint64_t v1109 = buf.width & 0xFFFFFFF0;
        do
        {
          size_t v1110 = (int8x8_t *)&v1107[*((void *)&v1106 + 1) * v1105];
          vImagePixelCount v1111 = v1108;
          if ((unint64_t)v1106 >= 0x10)
          {
            do
            {
              int16x4_t v1112 = (int16x4_t)v1110[2];
              int16x4_t v1113 = (int16x4_t)v1110[3];
              int8x8_t v1114 = vbic_s8(v1110[1], (int8x8_t)vceq_s16((int16x4_t)v1110[1], (int16x4_t)0x8000800080008000));
              *size_t v1110 = vbic_s8(*v1110, (int8x8_t)vceq_s16((int16x4_t)*v1110, (int16x4_t)0x8000800080008000));
              v1110[1] = v1114;
              v1110[2] = vbic_s8((int8x8_t)v1112, (int8x8_t)vceq_s16(v1112, (int16x4_t)0x8000800080008000));
              v1110[3] = vbic_s8((int8x8_t)v1113, (int8x8_t)vceq_s16(v1113, (int16x4_t)0x8000800080008000));
              v1110 += 4;
              --v1111;
            }
            while (v1111);
          }
          unint64_t v1115 = v1106 & 0xFFFFFFFF0000000FLL;
          if ((unint64_t)v1106 > v1109)
          {
            do
            {
              if (v1110->i16[0] == 0x7FFF) {
                v1110->i16[0] = 0;
              }
              size_t v1110 = (int8x8_t *)((char *)v1110 + 2);
              --v1115;
            }
            while (v1115);
          }
          ++v1105;
        }
        while (v1105 != v968);
      }
      goto LABEL_321;
    }
    if (PixelFormatType == 1278226534) {
      goto LABEL_88;
    }
    if (PixelFormatType != 1278226536) {
      goto LABEL_322;
    }
LABEL_124:
    size_t v481 = CVPixelBufferGetHeight(a1);
    size_t v482 = CVPixelBufferGetWidth(a1);
    size_t v483 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v484 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v485 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&v1512, 0, sizeof(v1512));
    vImagePixelCount v486 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v486, &buf);
    PixelBufferUtils::asVImageBuffer(a2, *v486, &v1511);
    size_t v489 = v485 >> 1;
    float v490 = (char *)v1511.data;
    size_t v491 = v1511.rowBytes;
    float v492 = (short float *)buf.data;
    if (v489 * v483) {
      memset_pattern16(buf.data, &unk_247F24680, 2 * v489 * v483);
    }
    vImagePixelCount v493 = buf.height;
    if (v481)
    {
      unint64_t v494 = 0;
      v495.i32[1] = v1490;
      v496.i32[1] = HIDWORD(a9);
      float v497 = *(float *)&a11;
      float v498 = 1.0 / *(float *)&a9;
      float v499 = 1.0 / *(float *)&v1490;
      unint64_t v500 = v482 & 0xFFFFFFFFFFFFFFF0;
      float v501 = 0.5;
      *(float *)v487.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v502 = (float32x4_t)vdupq_lane_s32(v487, 0);
      float32x4_t v504 = a13;
      float32x4_t v503 = (float32x4_t)a14;
      *(float *)v487.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
      *(float *)v495.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
      *(float *)v496.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
      float32x4_t v1337 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1347 = (float32x4_t)vdupq_lane_s32(v496, 0);
      float32x4_t v1303 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1313 = (float32x4_t)vdupq_lane_s32(v495, 0);
      float32x4_t v1285 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      float32x4_t v1293 = (float32x4_t)vdupq_lane_s32(v487, 0);
      float32x4_t v505 = a12;
      float v506 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      float v1420 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      *(float *)&long long v488 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v1282 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      float32x4_t v507 = (float32x4_t)a15;
      float32x2_t v508 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
      float32x4_t v509 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v510 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v511 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      int32x4_t v1383 = vdupq_n_s32(v484);
      int32x4_t v512 = vdupq_n_s32(v483);
      float32x2_t v513 = (float32x2_t)a18;
      float32x4_t v514 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      float32x4_t v515 = (char *)v1512.data;
      size_t v516 = v1512.rowBytes;
      float v1365 = 1.0 / *(float *)&a9;
      float v1356 = 1.0 / *(float *)&v1490;
      float32x4_t v1450 = v509;
      float v1460 = v506;
      float32x4_t v1430 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      int32x4_t v1440 = vdupq_n_s32(LODWORD(buf.height) * (int)v489 - 2);
      int32x4_t v1401 = vdupq_n_s32(v489);
      float32x4_t v1410 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      float32x4_t v1392 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      do
      {
        float32x4_t v517 = (float16x4_t *)&v515[v516 * v494];
        v518 = (__int16 *)&v490[v494 * v491];
        unint64_t v519 = 0;
        if (v500)
        {
          float32x4_t v1485 = vmlaq_f32(v1337, v1347, v502);
          float32x4_t v1477 = vmlaq_f32(v1303, v1313, v502);
          float32x4_t v1374 = v502;
          float32x4_t v1469 = vmlaq_f32(v1285, v1293, v502);
          float32x4_t v520 = v1282;
          do
          {
            float32x4_t v521 = (float32x4_t)vdupq_n_s32(0x447A0000u);
            float32x4_t v522 = vdivq_f32(v521, vcvtq_f32_f16(*v517));
            float32x4_t v523 = vdivq_f32(v521, vcvtq_f32_f16(v517[1]));
            float32x4_t v524 = vdivq_f32(v521, vcvtq_f32_f16(v517[2]));
            __asm { FMOV            V0.4S, #4.0 }
            float32x4_t v526 = vaddq_f32(v520, _Q0);
            _Q0.i64[0] = 0x4100000041000000;
            _Q0.i64[1] = 0x4100000041000000;
            float32x4_t v527 = vaddq_f32(v520, _Q0);
            float32x4_t v528 = vdivq_f32(v521, vcvtq_f32_f16(v517[3]));
            __asm { FMOV            V0.4S, #12.0 }
            float32x4_t v530 = vaddq_f32(v520, _Q0);
            float32x4_t v531 = vmlaq_f32(v509, vmlaq_n_f32(v1469, v520, v506), v522);
            float32x4_t v532 = vmlaq_f32(v509, vmlaq_n_f32(v1469, v526, v506), v523);
            float32x4_t v533 = vmlaq_f32(v509, vmlaq_n_f32(v1469, v527, v506), v524);
            float32x4_t v534 = vmlaq_f32(v509, vmlaq_n_f32(v1469, v530, v506), v528);
            long long v535 = v488;
            float32x4_t v536 = vmlaq_f32(v510, vmlaq_n_f32(v1485, v520, *(float *)&v488), v522);
            float32x4_t v537 = vmlaq_f32(v511, vmlaq_n_f32(v1477, v520, v1420), v522);
            float32x4_t v538 = vmlaq_f32(v510, vmlaq_n_f32(v1485, v526, *(float *)&v488), v523);
            float32x4_t v539 = vmlaq_f32(v511, vmlaq_n_f32(v1477, v526, v1420), v523);
            int8x16_t v1496 = vandq_s8((int8x16_t)vcgezq_f32(v531), (int8x16_t)vcgtzq_f32(v522));
            float32x4_t v540 = vmlaq_f32(v510, vmlaq_n_f32(v1485, v527, *(float *)&v488), v524);
            int8x16_t v541 = vandq_s8((int8x16_t)vcgezq_f32(v532), (int8x16_t)vcgtzq_f32(v523));
            float32x4_t v542 = vmlaq_f32(v511, vmlaq_n_f32(v1477, v527, v1420), v524);
            int8x16_t v543 = vandq_s8((int8x16_t)vcgezq_f32(v533), (int8x16_t)vcgtzq_f32(v524));
            float32x4_t v544 = vmlaq_f32(v510, vmlaq_n_f32(v1485, v530, *(float *)&v535), v528);
            int8x16_t v1505 = vandq_s8((int8x16_t)vcgezq_f32(v534), (int8x16_t)vcgtzq_f32(v528));
            float32x4_t v545 = vmlaq_f32(v511, vmlaq_n_f32(v1477, v530, v1420), v528);
            float32x4_t v546 = vmlaq_f32(v514, vdivq_f32(v1430, v531), v536);
            float32x4_t v547 = vmlaq_f32(v1392, vdivq_f32(v1410, v531), v537);
            float32x4_t v548 = vmlaq_f32(v514, vdivq_f32(v1430, v532), v538);
            float32x4_t v549 = vmlaq_f32(v1392, vdivq_f32(v1410, v532), v539);
            float32x4_t v550 = vdivq_f32(v1430, v534);
            float32x4_t v551 = vdivq_f32(v1410, v534);
            float32x4_t v552 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
            int8x16_t v553 = (int8x16_t)vmulq_f32(v531, v552);
            int8x16_t v554 = (int8x16_t)vmulq_f32(v532, v552);
            int8x16_t v555 = (int8x16_t)vmulq_f32(v533, v552);
            int8x16_t v556 = (int8x16_t)vmulq_f32(v534, v552);
            int32x4_t v557 = vcvtmq_s32_f32(v546);
            int32x4_t v558 = vcvtmq_s32_f32(v547);
            int32x4_t v559 = vcvtmq_s32_f32(v548);
            int32x4_t v560 = vcvtmq_s32_f32(v549);
            int32x4_t v561 = vcvtmq_s32_f32(vmlaq_f32(v514, vdivq_f32(v1430, v533), v540));
            long long v488 = v535;
            int32x4_t v562 = vcvtmq_s32_f32(vmlaq_f32(v1392, vdivq_f32(v1410, v533), v542));
            int32x4_t v563 = vcvtmq_s32_f32(vmlaq_f32(v514, v550, v544));
            int32x4_t v564 = vcvtmq_s32_f32(vmlaq_f32(v1392, v551, v545));
            v524.i64[0] = -1;
            v524.i64[1] = -1;
            int32x4_t v565 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v512, v558), (int8x16_t)vcgtq_s32(v1383, v557)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v558, (int8x16_t)v557), (int32x4_t)v524)), v1496);
            *(int16x4_t *)v544.f32 = vmovn_s32(v565);
            *(int8x8_t *)v551.f32 = vorn_s8((int8x8_t)vmovn_s32(v557), *(int8x8_t *)v544.f32);
            int8x8_t v566 = vorn_s8((int8x8_t)vmovn_s32(v558), *(int8x8_t *)v544.f32);
            int32x4_t v567 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v512, v560), (int8x16_t)vcgtq_s32(v1383, v559)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v560, (int8x16_t)v559), (int32x4_t)v524)), v541);
            *(int16x4_t *)v547.f32 = vmovn_s32(v567);
            int32x4_t v568 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v512, v562), (int8x16_t)vcgtq_s32(v1383, v561)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v562, (int8x16_t)v561), (int32x4_t)v524)), v543);
            float32x4_t v569 = v518;
            vst2_s16(v569, (int16x4x2_t)v551);
            v569 += 8;
            *(int8x8_t *)v551.f32 = vorn_s8((int8x8_t)vmovn_s32(v559), *(int8x8_t *)v547.f32);
            int8x8_t v570 = vorn_s8((int8x8_t)vmovn_s32(v560), *(int8x8_t *)v547.f32);
            *(int16x4_t *)v543.i8 = vmovn_s32(v568);
            vst2_s16(v569, (int16x4x2_t)v551);
            *(int8x8_t *)v551.f32 = vorn_s8((int8x8_t)vmovn_s32(v561), *(int8x8_t *)v543.i8);
            int8x8_t v571 = vorn_s8((int8x8_t)vmovn_s32(v562), *(int8x8_t *)v543.i8);
            int8x16_t v572 = (int8x16_t)vdupq_n_s32(0x477FE000u);
            int32x4_t v573 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v512, v564), (int8x16_t)vcgtq_s32(v1383, v563)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v564, (int8x16_t)v563), (int32x4_t)v524)), v1505);
            float32x4_t v574 = (float32x4_t)vbslq_s8((int8x16_t)v565, v553, v572);
            float32x4_t v575 = (float32x4_t)vbslq_s8((int8x16_t)v567, v554, v572);
            float32x4_t v576 = (float32x4_t)vbslq_s8((int8x16_t)v568, v555, v572);
            float32x4_t v577 = (float32x4_t)vbslq_s8((int8x16_t)v573, v556, v572);
            *(int16x4_t *)v573.i8 = vmovn_s32(v573);
            float v578 = v518 + 16;
            vst2_s16(v578, (int16x4x2_t)v551);
            float32x4_t v509 = v1450;
            float v506 = v1460;
            *(int8x8_t *)v572.i8 = vorn_s8((int8x8_t)vmovn_s32(v563), *(int8x8_t *)v573.i8);
            *(int8x8_t *)v548.f32 = vorn_s8((int8x8_t)vmovn_s32(v564), *(int8x8_t *)v573.i8);
            int32x4_t v579 = v518 + 24;
            vst2_s16(v579, *(int16x4x2_t *)((char *)&v548 - 8));
            int32x4_t v580 = vminq_s32(vmaxq_s32(vmlaq_s32(v557, v558, v1401), (int32x4_t)0), v1440);
            int32x4_t v581 = vminq_s32(vmaxq_s32(vmlaq_s32(v559, v560, v1401), (int32x4_t)0), v1440);
            int32x4_t v582 = vminq_s32(vmaxq_s32(vmlaq_s32(v561, v562, v1401), (int32x4_t)0), v1440);
            int32x4_t v583 = vminq_s32(vmaxq_s32(vmlaq_s32(v563, v564, v1401), (int32x4_t)0), v1440);
            LODWORD(v579) = v580.i32[1];
            *(float16x4_t *)v561.i8 = vcvt_f16_f32(v574);
            v492[v580.u32[0]] = fminl(*(short float *)v561.i16, v492[v580.u32[0]]);
            *(float16x4_t *)v563.i8 = vcvt_f16_f32(v575);
            v492[v581.u32[1]] = fminl(*(short float *)&v563.i16[1], v492[v581.u32[1]]);
            *(float16x4_t *)v580.i8 = vcvt_f16_f32(v576);
            v492[v582.u32[2]] = fminl(*(short float *)&v580.i16[2], v492[v582.u32[2]]);
            *(float16x4_t *)v577.f32 = vcvt_f16_f32(v577);
            v492[v583.u32[3]] = fminl(*(short float *)&v577.i16[3], v492[v583.u32[3]]);
            v492[v579] = fminl(*(short float *)&v561.i16[1], v492[v579]);
            v492[v581.u32[2]] = fminl(*(short float *)&v563.i16[2], v492[v581.u32[2]]);
            v492[v582.u32[3]] = fminl(*(short float *)&v580.i16[3], v492[v582.u32[3]]);
            v492[v583.u32[0]] = fminl(*(short float *)v577.i16, v492[v583.u32[0]]);
            v492[v580.u32[2]] = fminl(*(short float *)&v561.i16[2], v492[v580.u32[2]]);
            v492[v581.u32[3]] = fminl(*(short float *)&v563.i16[3], v492[v581.u32[3]]);
            v492[v582.u32[0]] = fminl(*(short float *)v580.i16, v492[v582.u32[0]]);
            v492[v583.u32[1]] = fminl(*(short float *)&v577.i16[1], v492[v583.u32[1]]);
            v492[v580.u32[3]] = fminl(*(short float *)&v561.i16[3], v492[v580.u32[3]]);
            v492[v581.u32[0]] = fminl(*(short float *)v563.i16, v492[v581.u32[0]]);
            v492[v582.u32[1]] = fminl(*(short float *)&v580.i16[1], v492[v582.u32[1]]);
            v492[v583.u32[2]] = fminl(*(short float *)&v577.i16[2], v492[v583.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v520 = vaddq_f32(v520, _Q0);
            v517 += 4;
            v518 += 32;
            v519 += 16;
          }
          while (v519 < v500);
          unint64_t v519 = (((v482 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v503 = (float32x4_t)a14;
          float32x4_t v507 = (float32x4_t)a15;
          float32x4_t v505 = a12;
          float32x4_t v504 = a13;
          float32x2_t v513 = (float32x2_t)a18;
          float v497 = *(float *)&a11;
          float32x2_t v508 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
          float v498 = v1365;
          float v499 = v1356;
          float v501 = 0.5;
          float32x4_t v502 = v1374;
        }
        if (v519 < v482)
        {
          do
          {
            _H1 = v517->i16[0];
            __asm { FCVT            S1, H1 }
            float v587 = 1000.0 / _S1;
            int32x4_t v588 = (int32x4_t)vaddq_f32(v507, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v505, v498* (float)((float)((float)((float)v519 + v501) - v497) * (float)(1000.0 / _S1))), v504, v499* (float)((float)((float)((float)v494 + v501) - *((float *)&a11 + 1))* (float)(1000.0 / _S1))), v503, 1000.0 / _S1));
            uint64_t v589 = 0xFFFF0000FFFFLL;
            if (*(float *)&v588.i32[2] >= 0.0 && v587 > 0.0)
            {
              int32x2_t v590 = vcvt_s32_f32(vmla_f32(v513, vdiv_f32(v508, (float32x2_t)vdup_laneq_s32(v588, 2)), *(float32x2_t *)v588.i8));
              if ((v590.i32[0] & 0x80000000) == 0
                && (__int16)v484 > v590.i32[0]
                && (v590.i32[1] & 0x80000000) == 0
                && (__int16)v483 > (int)v590.u16[2])
              {
                _S0 = *(float *)&v588.i32[2] * 0.001;
                __asm
                {
                  FCVT            H0, S0
                  FCMP            H2, #0
                }
                if (_ZF) {
                  BOOL v594 = 0;
                }
                else {
                  BOOL v594 = _H2 <= _H0;
                }
                if (!v594) {
                  v492[v489 * v590.u16[2] + v590.u32[0]] = _H0;
                }
                uint64_t v589 = (uint64_t)v590;
              }
            }
            __int16 *v518 = v589;
            v518[1] = WORD2(v589);
            ++v519;
            float32x4_t v517 = (float16x4_t *)((char *)v517 + 2);
            v518 += 2;
          }
          while (v482 != v519);
        }
        ++v494;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v502 = vaddq_f32(v502, _Q0);
      }
      while (v494 != v481);
      vImagePixelCount v493 = buf.height;
    }
    if (v493)
    {
      uint64_t v596 = 0;
      long long v597 = *(_OWORD *)&buf.width;
      size_t v598 = (char *)buf.data;
      vImagePixelCount v599 = buf.width >> 4;
      if (buf.width >> 4 <= 1) {
        vImagePixelCount v599 = 1;
      }
      unint64_t v600 = buf.width & 0xFFFFFFF0;
      do
      {
        unsigned int v601 = (int8x8_t *)&v598[*((void *)&v597 + 1) * v596];
        vImagePixelCount v602 = v599;
        if ((unint64_t)v597 >= 0x10)
        {
          do
          {
            float16x4_t v603 = (float16x4_t)v601[2];
            float16x4_t v604 = (float16x4_t)v601[3];
            int8x8_t v605 = vbic_s8(v601[1], (int8x8_t)vceq_f16((float16x4_t)v601[1], (float16x4_t)0x8400840084008400));
            *unsigned int v601 = vbic_s8(*v601, (int8x8_t)vceq_f16((float16x4_t)*v601, (float16x4_t)0x8400840084008400));
            v601[1] = v605;
            v601[2] = vbic_s8((int8x8_t)v603, (int8x8_t)vceq_f16(v603, (float16x4_t)0x8400840084008400));
            v601[3] = vbic_s8((int8x8_t)v604, (int8x8_t)vceq_f16(v604, (float16x4_t)0x8400840084008400));
            v601 += 4;
            --v602;
          }
          while (v602);
        }
        unint64_t v606 = v597 & 0xFFFFFFFF0000000FLL;
        if ((unint64_t)v597 > v600)
        {
          do
          {
            if (*(short float *)v601->i16 == COERCE_SHORT_FLOAT(31743)) {
              v601->i16[0] = 0;
            }
            unsigned int v601 = (int8x8_t *)((char *)v601 + 2);
            --v606;
          }
          while (v606);
        }
        ++v596;
      }
      while (v596 != v493);
    }
    goto LABEL_321;
  }
  if (PixelFormatType > 1751410031)
  {
    if (PixelFormatType != 1751410032)
    {
      if (PixelFormatType == 1751411059)
      {
        size_t v241 = CVPixelBufferGetHeight(a1);
        size_t v242 = CVPixelBufferGetWidth(a1);
        unsigned int v243 = CVPixelBufferGetHeight(pixelBuffer);
        unsigned int v244 = CVPixelBufferGetWidth(pixelBuffer);
        size_t v245 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        CVPixelBufferLockBaseAddress(a1, 1uLL);
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        CVPixelBufferLockBaseAddress(a2, 0);
        memset(&v1512, 0, sizeof(v1512));
        int v246 = (CGRect *)MEMORY[0x263F001A8];
        PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
        memset(&buf, 0, sizeof(buf));
        PixelBufferUtils::asVImageBuffer(pixelBuffer, *v246, &buf);
        PixelBufferUtils::asVImageBuffer(a2, *v246, &v1511);
        int32x2_t v247 = (char *)v1511.data;
        size_t v248 = v1511.rowBytes;
        float32x4_t v250 = buf.data;
        int v249 = buf.height;
        bzero(buf.data, buf.height * buf.rowBytes);
        float32x4_t v255 = (float32x4_t)a14;
        float32x4_t v254 = (float32x4_t)a15;
        float32x4_t v257 = a12;
        float32x4_t v256 = a13;
        float32x2_t v259 = (float32x2_t)a18;
        float v258 = *(float *)&a11;
        v260.i32[0] = a16;
        if (v241)
        {
          unint64_t v261 = 0;
          float v262 = 1.0 / *(float *)&a9;
          v263.i32[1] = v1490;
          float v264 = 1.0 / *(float *)&v1490;
          unint64_t v265 = v242 & 0xFFFFFFFFFFFFFFF0;
          float v266 = 0.5;
          *(float *)v251.i32 = 0.5 - *((float *)&a11 + 1);
          float32x4_t v267 = (float32x4_t)vdupq_lane_s32(v251, 0);
          *(float *)v251.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
          *(float *)v263.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
          *(float *)v252.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
          float32x4_t v1354 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
          float32x4_t v1363 = (float32x4_t)vdupq_lane_s32(v252, 0);
          float32x4_t v1335 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
          float32x4_t v1345 = (float32x4_t)vdupq_lane_s32(v263, 0);
          float32x4_t v1301 = (float32x4_t)vdupq_laneq_s32(a14, 2);
          float32x4_t v1311 = (float32x4_t)vdupq_lane_s32(v251, 0);
          float v268 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
          *(float *)&long long v253 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
          float v269 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
          float32x4_t v270 = (float32x4_t)vdupq_laneq_s32(a15, 2);
          float32x4_t v271 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
          float32x4_t v1428 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
          int32x4_t v1408 = vdupq_n_s32(v244);
          int32x4_t v272 = vdupq_n_s32(v243);
          float32x4_t v1291 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
          float32x4_t v273 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
          v260.i32[1] = DWORD1(a17);
          v274 = (char *)v1512.data;
          size_t v275 = v1512.rowBytes;
          float32x2_t v1332 = v260;
          float v1381 = 1.0 / *(float *)&a9;
          float v1372 = 1.0 / *(float *)&v1490;
          int32x4_t v1467 = vdupq_n_s32(v245 >> 1);
          float32x4_t v1475 = v270;
          float v1448 = v268;
          int32x4_t v1458 = vdupq_n_s32(v249 * (v245 >> 1) - 2);
          float32x4_t v1438 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
          float32x4_t v1418 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
          float32x4_t v1399 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
          do
          {
            float32x4_t v276 = (float16x4_t *)&v274[v275 * v261];
            float32x4_t v277 = (__int16 *)&v247[v261 * v248];
            unint64_t v278 = 0;
            if (v265)
            {
              float32x4_t v1503 = vmlaq_f32(v1354, v1363, v267);
              float32x4_t v1494 = vmlaq_f32(v1335, v1345, v267);
              float32x4_t v1390 = v267;
              float32x4_t v1483 = vmlaq_f32(v1301, v1311, v267);
              float32x4_t v279 = v1291;
              do
              {
                float32x4_t v280 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                float32x4_t v281 = vdivq_f32(v280, vcvtq_f32_f16(*v276));
                float32x4_t v282 = vdivq_f32(v280, vcvtq_f32_f16(v276[1]));
                float32x4_t v283 = vdivq_f32(v280, vcvtq_f32_f16(v276[2]));
                __asm { FMOV            V0.4S, #4.0 }
                float32x4_t v285 = vaddq_f32(v279, _Q0);
                _Q0.i64[0] = 0x4100000041000000;
                _Q0.i64[1] = 0x4100000041000000;
                float32x4_t v286 = vaddq_f32(v279, _Q0);
                __asm { FMOV            V0.4S, #12.0 }
                float32x4_t v288 = vaddq_f32(v279, _Q0);
                float32x4_t v289 = vdivq_f32(v280, vcvtq_f32_f16(v276[3]));
                float32x4_t v290 = vmlaq_f32(v270, vmlaq_n_f32(v1483, v279, v268), v281);
                float32x4_t v291 = vmlaq_f32(v270, vmlaq_n_f32(v1483, v285, v268), v282);
                float32x4_t v292 = vmlaq_f32(v270, vmlaq_n_f32(v1483, v286, v268), v283);
                float32x4_t v293 = vmlaq_f32(v270, vmlaq_n_f32(v1483, v288, v268), v289);
                int8x16_t v294 = (int8x16_t)vcgtzq_f32(v282);
                int32x4_t v295 = v272;
                int8x16_t v296 = vandq_s8((int8x16_t)vcgezq_f32(v290), (int8x16_t)vcgtzq_f32(v281));
                float32x4_t v297 = vmlaq_f32(v271, vmlaq_n_f32(v1503, v288, v269), v289);
                float32x4_t v298 = vmlaq_f32(v1428, vmlaq_n_f32(v1494, v288, *(float *)&v253), v289);
                int8x16_t v299 = vandq_s8((int8x16_t)vcgezq_f32(v292), (int8x16_t)vcgtzq_f32(v283));
                float32x4_t v300 = vmlaq_f32(v1418, vdivq_f32(v273, v290), vmlaq_f32(v271, vmlaq_n_f32(v1503, v279, v269), v281));
                float32x4_t v301 = vmlaq_f32(v1418, vdivq_f32(v273, v291), vmlaq_f32(v271, vmlaq_n_f32(v1503, v285, v269), v282));
                float32x4_t v302 = vmlaq_f32(v1399, vdivq_f32(v1438, v291), vmlaq_f32(v1428, vmlaq_n_f32(v1494, v285, *(float *)&v253), v282));
                float32x4_t v303 = vmlaq_f32(v1418, vdivq_f32(v273, v292), vmlaq_f32(v271, vmlaq_n_f32(v1503, v286, v269), v283));
                float32x4_t v304 = v271;
                long long v305 = v253;
                int8x16_t v306 = vandq_s8((int8x16_t)vcgezq_f32(v293), (int8x16_t)vcgtzq_f32(v289));
                int32x4_t v307 = vcvtmq_s32_f32(v300);
                int32x4_t v308 = vcvtmq_s32_f32(vmlaq_f32(v1399, vdivq_f32(v1438, v290), vmlaq_f32(v1428, vmlaq_n_f32(v1494, v279, *(float *)&v253), v281)));
                int32x4_t v309 = vcvtmq_s32_f32(v301);
                int32x4_t v310 = vcvtmq_s32_f32(v302);
                int32x4_t v311 = vcvtmq_s32_f32(v303);
                int32x4_t v312 = vcvtmq_s32_f32(vmlaq_f32(v1399, vdivq_f32(v1438, v292), vmlaq_f32(v1428, vmlaq_n_f32(v1494, v286, *(float *)&v253), v283)));
                float32x4_t v313 = vmlaq_f32(v1418, vdivq_f32(v273, v293), v297);
                int32x4_t v272 = v295;
                int32x4_t v314 = vcvtmq_s32_f32(v313);
                int32x4_t v315 = vcvtmq_s32_f32(vmlaq_f32(v1399, vdivq_f32(v1438, v293), v298));
                int16x4x2_t v316 = (int16x4x2_t)vcgtq_s32(v295, v308);
                v295.i64[0] = -1;
                v295.i64[1] = -1;
                int32x4_t v317 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)v316, (int8x16_t)vcgtq_s32(v1408, v307)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v308, (int8x16_t)v307), v295)), v296);
                int32x4_t v318 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v272, v310), (int8x16_t)vcgtq_s32(v1408, v309)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v310, (int8x16_t)v309), v295)), vandq_s8((int8x16_t)vcgezq_f32(v291), v294));
                int32x4_t v319 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v272, v312), (int8x16_t)vcgtq_s32(v1408, v311)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v312, (int8x16_t)v311), v295)), v299);
                *(int16x4_t *)v296.i8 = vmovn_s32(v317);
                v316.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v307), *(int8x8_t *)v296.i8);
                int8x8_t v320 = vorn_s8((int8x8_t)vmovn_s32(v308), *(int8x8_t *)v296.i8);
                *(int16x4_t *)v302.f32 = vmovn_s32(v318);
                int8x8_t v321 = v277;
                vst2_s16(v321, v316);
                v321 += 8;
                v316.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v309), *(int8x8_t *)v302.f32);
                int8x8_t v322 = vorn_s8((int8x8_t)vmovn_s32(v310), *(int8x8_t *)v302.f32);
                *(int16x4_t *)v302.f32 = vmovn_s32(v319);
                int32x4_t v323 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v272, v315), (int8x16_t)vcgtq_s32(v1408, v314)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v315, (int8x16_t)v314), v295)), v306);
                vst2_s16(v321, v316);
                v316.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v311), *(int8x8_t *)v302.f32);
                int8x8_t v324 = vorn_s8((int8x8_t)vmovn_s32(v312), *(int8x8_t *)v302.f32);
                int8x16_t v325 = v277 + 16;
                *(int16x4_t *)v302.f32 = vmovn_s32(v323);
                vst2_s16(v325, v316);
                v316.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v314), *(int8x8_t *)v302.f32);
                int8x8_t v326 = vorn_s8((int8x8_t)vmovn_s32(v315), *(int8x8_t *)v302.f32);
                int32x4_t v327 = v277 + 24;
                vst2_s16(v327, v316);
                long long v253 = v305;
                float32x4_t v271 = v304;
                float32x4_t v270 = v1475;
                int8x16_t v328 = (int8x16_t)vdivq_f32(v280, v293);
                int32x4_t v329 = vmlaq_s32(v311, v312, v1467);
                int32x4_t v330 = vmlaq_s32(v314, v315, v1467);
                float v268 = v1448;
                float32x4_t v331 = (float32x4_t)vandq_s8((int8x16_t)vdivq_f32(v280, v290), (int8x16_t)v317);
                float32x4_t v332 = (float32x4_t)vandq_s8((int8x16_t)vdivq_f32(v280, v291), (int8x16_t)v318);
                float32x4_t v333 = (float32x4_t)vandq_s8((int8x16_t)vdivq_f32(v280, v292), (int8x16_t)v319);
                int32x4_t v334 = vminq_s32(vmaxq_s32(vmlaq_s32(v307, v308, v1467), (int32x4_t)0), v1458);
                int32x4_t v335 = vminq_s32(vmaxq_s32(vmlaq_s32(v309, v310, v1467), (int32x4_t)0), v1458);
                int32x4_t v336 = vminq_s32(vmaxq_s32(v329, (int32x4_t)0), v1458);
                int32x4_t v337 = vminq_s32(vmaxq_s32(v330, (int32x4_t)0), v1458);
                float32x4_t v338 = (float32x4_t)vandq_s8(v328, (int8x16_t)v323);
                LODWORD(v327) = v334.i32[1];
                unsigned __int32 v339 = v334.i32[0];
                v328.i16[0] = v250[v334.u32[0]];
                *(float16x4_t *)v334.i8 = vcvt_f16_f32(v331);
                *(short float *)&v250[v339] = fmaxl(*(short float *)v334.i16, *(short float *)v328.i16);
                *(float16x4_t *)v332.f32 = vcvt_f16_f32(v332);
                *(short float *)&v250[v335.u32[1]] = fmaxl(*(short float *)&v332.i16[1], *(short float *)&v250[v335.u32[1]]);
                *(float16x4_t *)v333.f32 = vcvt_f16_f32(v333);
                *(short float *)&v250[v336.u32[2]] = fmaxl(*(short float *)&v333.i16[2], *(short float *)&v250[v336.u32[2]]);
                *(float16x4_t *)v338.f32 = vcvt_f16_f32(v338);
                *(short float *)&v250[v337.u32[3]] = fmaxl(*(short float *)&v338.i16[3], *(short float *)&v250[v337.u32[3]]);
                *(short float *)&v250[v327] = fmaxl(*(short float *)&v334.i16[1], *(short float *)&v250[v327]);
                *(short float *)&v250[v335.u32[2]] = fmaxl(*(short float *)&v332.i16[2], *(short float *)&v250[v335.u32[2]]);
                *(short float *)&v250[v336.u32[3]] = fmaxl(*(short float *)&v333.i16[3], *(short float *)&v250[v336.u32[3]]);
                *(short float *)&v250[v337.u32[0]] = fmaxl(*(short float *)v338.i16, *(short float *)&v250[v337.u32[0]]);
                *(short float *)&v250[v334.u32[2]] = fmaxl(*(short float *)&v334.i16[2], *(short float *)&v250[v334.u32[2]]);
                *(short float *)&v250[v335.u32[3]] = fmaxl(*(short float *)&v332.i16[3], *(short float *)&v250[v335.u32[3]]);
                *(short float *)&v250[v336.u32[0]] = fmaxl(*(short float *)v333.i16, *(short float *)&v250[v336.u32[0]]);
                *(short float *)&v250[v337.u32[1]] = fmaxl(*(short float *)&v338.i16[1], *(short float *)&v250[v337.u32[1]]);
                *(short float *)&v250[v334.u32[3]] = fmaxl(*(short float *)&v334.i16[3], *(short float *)&v250[v334.u32[3]]);
                *(short float *)&v250[v335.u32[0]] = fmaxl(*(short float *)v332.i16, *(short float *)&v250[v335.u32[0]]);
                *(short float *)&v250[v336.u32[1]] = fmaxl(*(short float *)&v333.i16[1], *(short float *)&v250[v336.u32[1]]);
                *(short float *)&v250[v337.u32[2]] = fmaxl(*(short float *)&v338.i16[2], *(short float *)&v250[v337.u32[2]]);
                __asm { FMOV            V0.4S, #16.0 }
                float32x4_t v279 = vaddq_f32(v279, _Q0);
                v276 += 4;
                v277 += 32;
                v278 += 16;
              }
              while (v278 < v265);
              unint64_t v278 = (((v242 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
              float32x4_t v255 = (float32x4_t)a14;
              float32x4_t v254 = (float32x4_t)a15;
              float32x4_t v257 = a12;
              float32x4_t v256 = a13;
              float32x2_t v259 = (float32x2_t)a18;
              float v258 = *(float *)&a11;
              float32x2_t v260 = v1332;
              float v262 = v1381;
              float v264 = v1372;
              float v266 = 0.5;
              float32x4_t v267 = v1390;
            }
            if (v278 < v242)
            {
              do
              {
                _H1 = v276->i16[0];
                __asm { FCVT            S1, H1 }
                float v343 = 1000.0 / _S1;
                int32x4_t v344 = (int32x4_t)vaddq_f32(v254, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v257, v262* (float)((float)((float)((float)v278 + v266) - v258) * (float)(1000.0 / _S1))), v256, v264* (float)((float)((float)((float)v261 + v266) - *((float *)&a11 + 1))* (float)(1000.0 / _S1))), v255, 1000.0 / _S1));
                uint64_t v345 = 0xFFFF0000FFFFLL;
                if (*(float *)&v344.i32[2] >= 0.0 && v343 > 0.0)
                {
                  int32x2_t v346 = vcvt_s32_f32(vmla_f32(v259, vdiv_f32(v260, (float32x2_t)vdup_laneq_s32(v344, 2)), *(float32x2_t *)v344.i8));
                  if ((v346.i32[0] & 0x80000000) == 0
                    && (__int16)v244 > v346.i32[0]
                    && (v346.i32[1] & 0x80000000) == 0
                    && (__int16)v243 > (int)v346.u16[2])
                  {
                    _S0 = 1000.0 / *(float *)&v344.i32[2];
                    __asm
                    {
                      FCVT            H0, S0
                      FCMP            H2, #0
                    }
                    if (_ZF) {
                      BOOL v350 = 1;
                    }
                    else {
                      BOOL v350 = _H2 < _H0;
                    }
                    if (v350) {
                      *(short float *)&v250[(v245 >> 1) * v346.u16[2] + v346.u32[0]] = _H0;
                    }
                    uint64_t v345 = (uint64_t)v346;
                  }
                }
                *float32x4_t v277 = v345;
                v277[1] = WORD2(v345);
                ++v278;
                float32x4_t v276 = (float16x4_t *)((char *)v276 + 2);
                v277 += 2;
              }
              while (v242 != v278);
            }
            ++v261;
            __asm { FMOV            V0.4S, #1.0 }
            float32x4_t v267 = vaddq_f32(v267, _Q0);
          }
          while (v261 != v241);
        }
        goto LABEL_321;
      }
      goto LABEL_322;
    }
    goto LABEL_124;
  }
  if (PixelFormatType == 1717855600)
  {
LABEL_88:
    size_t v352 = CVPixelBufferGetHeight(a1);
    size_t v353 = CVPixelBufferGetWidth(a1);
    size_t v354 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v355 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v356 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&v1512, 0, sizeof(v1512));
    v357 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v357, &buf);
    PixelBufferUtils::asVImageBuffer(a2, *v357, &v1511);
    size_t v361 = v356 >> 2;
    int32x2_t v362 = (char *)v1511.data;
    size_t v363 = v1511.rowBytes;
    float v364 = (float *)buf.data;
    if (v361 * v354) {
      memset_pattern16(buf.data, &unk_247F24670, 4 * v361 * v354);
    }
    vImagePixelCount v365 = buf.height;
    if (v352)
    {
      unint64_t v366 = 0;
      v367.i32[1] = v1490;
      v368.i32[1] = HIDWORD(a9);
      float v369 = *(float *)&a11;
      float v370 = 1.0 / *(float *)&a9;
      float v371 = 1.0 / *(float *)&v1490;
      unint64_t v372 = v353 & 0xFFFFFFFFFFFFFFF0;
      float v373 = 0.5;
      *(float *)v358.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v374 = (float32x4_t)vdupq_lane_s32(v358, 0);
      float32x4_t v376 = a13;
      float32x4_t v375 = (float32x4_t)a14;
      *(float *)v358.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
      *(float *)v367.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
      *(float *)v368.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
      float32x4_t v1355 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1364 = (float32x4_t)vdupq_lane_s32(v368, 0);
      float32x4_t v1336 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1346 = (float32x4_t)vdupq_lane_s32(v367, 0);
      float32x4_t v1302 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      float32x4_t v1312 = (float32x4_t)vdupq_lane_s32(v358, 0);
      float32x4_t v377 = a12;
      float v378 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      *(float *)&long long v359 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      *(float *)&long long v360 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v1292 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      float32x4_t v379 = (float32x4_t)a15;
      float32x2_t v380 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
      float32x4_t v381 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v382 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v383 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      int32x4_t v1409 = vdupq_n_s32(v354);
      int32x4_t v1419 = vdupq_n_s32(v355);
      float32x2_t v384 = (float32x2_t)a18;
      unint64_t v385 = (char *)v1512.data;
      size_t v386 = v1512.rowBytes;
      v387.i64[0] = 0x4100000041000000;
      v387.i64[1] = 0x4100000041000000;
      float v1382 = 1.0 / *(float *)&a9;
      float v1373 = 1.0 / *(float *)&v1490;
      int32x4_t v1468 = vdupq_n_s32(v361);
      float v1476 = v378;
      float32x4_t v1449 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      float32x4_t v1459 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      float32x4_t v1429 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      int32x4_t v1439 = vdupq_n_s32(LODWORD(buf.height) * (int)v361 - 4);
      float32x4_t v1400 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      do
      {
        float32x4_t v388 = (float16x4_t *)&v385[v386 * v366];
        float32x4_t v389 = (__int16 *)&v362[v366 * v363];
        unint64_t v390 = 0;
        if (v372)
        {
          float32x4_t v1504 = vmlaq_f32(v1355, v1364, v374);
          float32x4_t v1495 = vmlaq_f32(v1336, v1346, v374);
          float32x4_t v1391 = v374;
          float32x4_t v1484 = vmlaq_f32(v1302, v1312, v374);
          float32x4_t v391 = v1292;
          do
          {
            float32x4_t v392 = (float32x4_t)vdupq_n_s32(0x447A0000u);
            float32x4_t v393 = vdivq_f32(v392, vcvtq_f32_f16(*v388));
            float32x4_t v394 = vdivq_f32(v392, vcvtq_f32_f16(v388[1]));
            float32x4_t v395 = vdivq_f32(v392, vcvtq_f32_f16(v388[2]));
            __asm { FMOV            V0.4S, #4.0 }
            float32x4_t v397 = vaddq_f32(v391, _Q0);
            float32x4_t v398 = vaddq_f32(v391, v387);
            __asm { FMOV            V0.4S, #12.0 }
            float32x4_t v400 = vaddq_f32(v391, _Q0);
            float32x4_t v401 = vdivq_f32(v392, vcvtq_f32_f16(v388[3]));
            float32x4_t v402 = vmlaq_f32(v381, vmlaq_n_f32(v1484, v391, v378), v393);
            float32x4_t v403 = vmlaq_f32(v381, vmlaq_n_f32(v1484, v397, v378), v394);
            float32x4_t v404 = vmlaq_f32(v381, vmlaq_n_f32(v1484, v398, v378), v395);
            float32x4_t v405 = vmlaq_f32(v381, vmlaq_n_f32(v1484, v400, v378), v401);
            int8x16_t v406 = (int8x16_t)vcgtzq_f32(v393);
            int8x16_t v407 = (int8x16_t)vcgtzq_f32(v394);
            float32x4_t v408 = vmlaq_f32(v382, vmlaq_n_f32(v1504, v391, *(float *)&v360), v393);
            float32x4_t v409 = vmlaq_f32(v383, vmlaq_n_f32(v1495, v391, *(float *)&v359), v393);
            float32x4_t v410 = vmlaq_f32(v382, vmlaq_n_f32(v1504, v397, *(float *)&v360), v394);
            float32x4_t v411 = v381;
            float32x4_t v412 = vmlaq_f32(v383, vmlaq_n_f32(v1495, v397, *(float *)&v359), v394);
            float32x4_t v413 = vmlaq_f32(v382, vmlaq_n_f32(v1504, v398, *(float *)&v360), v395);
            float32x4_t v414 = vmlaq_f32(v383, vmlaq_n_f32(v1495, v398, *(float *)&v359), v395);
            float32x4_t v415 = vmlaq_f32(v382, vmlaq_n_f32(v1504, v400, *(float *)&v360), v401);
            int16x4x2_t v416 = (int16x4x2_t)vandq_s8((int8x16_t)vcgezq_f32(v403), v407);
            float32x4_t v417 = vmlaq_f32(v383, vmlaq_n_f32(v1495, v400, *(float *)&v359), v401);
            float32x4_t v418 = v382;
            long long v419 = v360;
            long long v420 = v359;
            int8x16_t v421 = vandq_s8((int8x16_t)vcgezq_f32(v404), (int8x16_t)vcgtzq_f32(v395));
            float32x4_t v422 = vmlaq_f32(v1429, vdivq_f32(v1459, v403), v410);
            float32x4_t v423 = vmlaq_f32(v1400, vdivq_f32(v1449, v403), v412);
            int8x16_t v424 = vandq_s8((int8x16_t)vcgezq_f32(v405), (int8x16_t)vcgtzq_f32(v401));
            int32x4_t v425 = vcvtmq_s32_f32(vmlaq_f32(v1429, vdivq_f32(v1459, v402), v408));
            int32x4_t v426 = vcvtmq_s32_f32(vmlaq_f32(v1400, vdivq_f32(v1449, v402), v409));
            int32x4_t v427 = vcvtmq_s32_f32(v422);
            int32x4_t v428 = vcvtmq_s32_f32(v423);
            int32x4_t v429 = vcvtmq_s32_f32(vmlaq_f32(v1429, vdivq_f32(v1459, v404), v413));
            int32x4_t v430 = vcvtmq_s32_f32(vmlaq_f32(v1400, vdivq_f32(v1449, v404), v414));
            int32x4_t v431 = vcvtmq_s32_f32(vmlaq_f32(v1429, vdivq_f32(v1459, v405), v415));
            int32x4_t v432 = vcvtmq_s32_f32(vmlaq_f32(v1400, vdivq_f32(v1449, v405), v417));
            v422.i64[0] = -1;
            v422.i64[1] = -1;
            int32x4_t v433 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1409, v426), (int8x16_t)vcgtq_s32(v1419, v425)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v426, (int8x16_t)v425), (int32x4_t)v422)), vandq_s8((int8x16_t)vcgezq_f32(v402), v406));
            int32x4_t v434 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1409, v428), (int8x16_t)vcgtq_s32(v1419, v427)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v428, (int8x16_t)v427), (int32x4_t)v422)), (int8x16_t)v416);
            int32x4_t v435 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1409, v430), (int8x16_t)vcgtq_s32(v1419, v429)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v430, (int8x16_t)v429), (int32x4_t)v422)), v421);
            *(int16x4_t *)v415.f32 = vmovn_s32(v433);
            v416.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v425), *(int8x8_t *)v415.f32);
            *(int8x8_t *)v421.i8 = vorn_s8((int8x8_t)vmovn_s32(v426), *(int8x8_t *)v415.f32);
            *(int16x4_t *)v423.f32 = vmovn_s32(v434);
            int8x16_t v436 = v389;
            vst2_s16(v436, v416);
            v436 += 8;
            v416.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v427), *(int8x8_t *)v423.f32);
            *(int8x8_t *)v421.i8 = vorn_s8((int8x8_t)vmovn_s32(v428), *(int8x8_t *)v423.f32);
            *(int16x4_t *)v423.f32 = vmovn_s32(v435);
            int32x4_t v437 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1409, v432), (int8x16_t)vcgtq_s32(v1419, v431)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v432, (int8x16_t)v431), (int32x4_t)v422)), v424);
            vst2_s16(v436, v416);
            v416.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v429), *(int8x8_t *)v423.f32);
            *(int8x8_t *)v421.i8 = vorn_s8((int8x8_t)vmovn_s32(v430), *(int8x8_t *)v423.f32);
            int8x16_t v438 = v389 + 16;
            *(int16x4_t *)v423.f32 = vmovn_s32(v437);
            vst2_s16(v438, v416);
            v416.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v431), *(int8x8_t *)v423.f32);
            *(int8x8_t *)v421.i8 = vorn_s8((int8x8_t)vmovn_s32(v432), *(int8x8_t *)v423.f32);
            int8x16_t v439 = v389 + 24;
            vst2_s16(v439, v416);
            float32x4_t v381 = v411;
            long long v359 = v420;
            long long v360 = v419;
            float32x4_t v382 = v418;
            v387.i64[0] = 0x4100000041000000;
            v387.i64[1] = 0x4100000041000000;
            float32x4_t v440 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
            int8x16_t v441 = (int8x16_t)vmulq_f32(v402, v440);
            int8x16_t v442 = (int8x16_t)vmulq_f32(v403, v440);
            int8x16_t v443 = (int8x16_t)vmulq_f32(v404, v440);
            int8x16_t v444 = (int8x16_t)vmulq_f32(v405, v440);
            int32x4_t v445 = vmlaq_s32(v427, v428, v1468);
            int8x16_t v446 = (int8x16_t)vdupq_n_s32(0x7F7FFFFFu);
            int8x16_t v447 = vbslq_s8((int8x16_t)v433, v441, v446);
            int32x4_t v448 = vminq_s32(vmaxq_s32(vmlaq_s32(v425, v426, v1468), (int32x4_t)0), v1439);
            LODWORD(v439) = v448.i32[1];
            unsigned __int32 v449 = v448.u32[2];
            unsigned __int32 v450 = v448.u32[3];
            int32x4_t v451 = vminq_s32(vmaxq_s32(v445, (int32x4_t)0), v1439);
            int8x16_t v452 = vbslq_s8((int8x16_t)v434, v442, v446);
            float v378 = v1476;
            v364[v448.u32[0]] = fminf(*(float *)v447.i32, v364[v448.u32[0]]);
            int32x4_t v453 = vminq_s32(vmaxq_s32(vmlaq_s32(v429, v430, v1468), (int32x4_t)0), v1439);
            v364[v451.u32[1]] = fminf(*(float *)&v452.i32[1], v364[v451.u32[1]]);
            int8x16_t v454 = vbslq_s8((int8x16_t)v435, v443, v446);
            v364[v453.u32[2]] = fminf(*(float *)&v454.i32[2], v364[v453.u32[2]]);
            int32x4_t v455 = vminq_s32(vmaxq_s32(vmlaq_s32(v431, v432, v1468), (int32x4_t)0), v1439);
            int8x16_t v456 = vbslq_s8((int8x16_t)v437, v444, v446);
            v364[v455.u32[3]] = fminf(*(float *)&v456.i32[3], v364[v455.u32[3]]);
            v364[v439] = fminf(*(float *)&v447.i32[1], v364[v439]);
            v364[v451.u32[2]] = fminf(*(float *)&v452.i32[2], v364[v451.u32[2]]);
            v364[v453.u32[3]] = fminf(*(float *)&v454.i32[3], v364[v453.u32[3]]);
            v364[v455.u32[0]] = fminf(*(float *)v456.i32, v364[v455.u32[0]]);
            v364[v449] = fminf(*(float *)&v447.i32[2], v364[v449]);
            v364[v451.u32[3]] = fminf(*(float *)&v452.i32[3], v364[v451.u32[3]]);
            v364[v453.u32[0]] = fminf(*(float *)v454.i32, v364[v453.u32[0]]);
            v364[v455.u32[1]] = fminf(*(float *)&v456.i32[1], v364[v455.u32[1]]);
            v364[v450] = fminf(*(float *)&v447.i32[3], v364[v450]);
            v364[v451.u32[0]] = fminf(*(float *)v452.i32, v364[v451.u32[0]]);
            v364[v453.u32[1]] = fminf(*(float *)&v454.i32[1], v364[v453.u32[1]]);
            v364[v455.u32[2]] = fminf(*(float *)&v456.i32[2], v364[v455.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v391 = vaddq_f32(v391, _Q0);
            v388 += 4;
            v389 += 32;
            v390 += 16;
          }
          while (v390 < v372);
          unint64_t v390 = (((v353 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v375 = (float32x4_t)a14;
          float32x4_t v379 = (float32x4_t)a15;
          float32x4_t v377 = a12;
          float32x4_t v376 = a13;
          float32x2_t v384 = (float32x2_t)a18;
          float v369 = *(float *)&a11;
          float32x2_t v380 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
          float v370 = v1382;
          float v371 = v1373;
          float v373 = 0.5;
          float32x4_t v374 = v1391;
        }
        if (v390 < v353)
        {
          do
          {
            _H2 = v388->i16[0];
            __asm { FCVT            S2, H2 }
            float v460 = 1000.0 / _S2;
            int32x4_t v461 = (int32x4_t)vaddq_f32(v379, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v377, v370 * (float)((float)((float)((float)v390 + v373) - v369) * v460)), v376, v371 * (float)((float)((float)((float)v366 + v373) - *((float *)&a11 + 1)) * v460)), v375, v460));
            uint64_t v462 = 0xFFFF0000FFFFLL;
            if (*(float *)&v461.i32[2] >= 0.0 && v460 > 0.0)
            {
              int32x2_t v463 = vcvt_s32_f32(vmla_f32(v384, vdiv_f32(v380, (float32x2_t)vdup_laneq_s32(v461, 2)), *(float32x2_t *)v461.i8));
              if ((v463.i32[0] & 0x80000000) == 0
                && (__int16)v355 > v463.i32[0]
                && (v463.i32[1] & 0x80000000) == 0
                && (__int16)v354 > (int)v463.u16[2])
              {
                float v464 = *(float *)&v461.i32[2] * 0.001;
                vImagePixelCount v465 = &v364[v361 * v463.u16[2]];
                float v466 = v465[v463.u32[0]];
                if (v466 == 0.0 || v466 > v464) {
                  v465[v463.u32[0]] = v464;
                }
                uint64_t v462 = (uint64_t)v463;
              }
            }
            *float32x4_t v389 = v462;
            v389[1] = WORD2(v462);
            ++v390;
            float32x4_t v388 = (float16x4_t *)((char *)v388 + 2);
            v389 += 2;
          }
          while (v353 != v390);
        }
        ++v366;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v374 = vaddq_f32(v374, _Q0);
      }
      while (v366 != v352);
      vImagePixelCount v365 = buf.height;
    }
    if (v365)
    {
      uint64_t v469 = 0;
      long long v470 = *(_OWORD *)&buf.width;
      float32x4_t v471 = (char *)buf.data;
      vImagePixelCount v472 = buf.width >> 4;
      if (buf.width >> 4 <= 1) {
        vImagePixelCount v472 = 1;
      }
      unint64_t v473 = buf.width & 0xFFFFFFF0;
      float32x4_t v474 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
      do
      {
        size_t v475 = (float32x4_t *)&v471[*((void *)&v470 + 1) * v469];
        vImagePixelCount v476 = v472;
        if ((unint64_t)v470 >= 0x10)
        {
          do
          {
            float32x4_t v477 = v475[2];
            float32x4_t v478 = v475[3];
            int8x16_t v479 = vbicq_s8((int8x16_t)v475[1], (int8x16_t)vceqq_f32(v475[1], v474));
            *(int8x16_t *)size_t v475 = vbicq_s8(*(int8x16_t *)v475, (int8x16_t)vceqq_f32(*v475, v474));
            v475[1] = (float32x4_t)v479;
            v475[2] = (float32x4_t)vbicq_s8((int8x16_t)v477, (int8x16_t)vceqq_f32(v477, v474));
            v475[3] = (float32x4_t)vbicq_s8((int8x16_t)v478, (int8x16_t)vceqq_f32(v478, v474));
            v475 += 4;
            --v476;
          }
          while (v476);
        }
        unint64_t v480 = v470 & 0xFFFFFFFF0000000FLL;
        if ((unint64_t)v470 > v473)
        {
          do
          {
            if (v475->f32[0] == 3.4028e38) {
              v475->i32[0] = 0;
            }
            size_t v475 = (float32x4_t *)((char *)v475 + 4);
            --v480;
          }
          while (v480);
        }
        ++v469;
      }
      while (v469 != v365);
    }
    goto LABEL_321;
  }
  if (PixelFormatType == 1717856627)
  {
    size_t v21 = CVPixelBufferGetHeight(a1);
    size_t v22 = CVPixelBufferGetWidth(a1);
    unsigned int v23 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v24 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v25 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&v1512, 0, sizeof(v1512));
    double v26 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1512);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v26, &buf);
    PixelBufferUtils::asVImageBuffer(a2, *v26, &v1511);
    size_t v27 = (char *)v1511.data;
    size_t v28 = v1511.rowBytes;
    int32x2_t v30 = (float *)buf.data;
    int v29 = buf.height;
    bzero(buf.data, buf.height * buf.rowBytes);
    float32x4_t v34 = (float32x4_t)a14;
    float32x4_t v33 = (float32x4_t)a15;
    float32x4_t v36 = a12;
    float32x4_t v35 = a13;
    float32x2_t v38 = (float32x2_t)a18;
    float v37 = *(float *)&a11;
    v39.i32[0] = a16;
    if (v21)
    {
      unint64_t v40 = 0;
      float v41 = 1.0 / *(float *)&a9;
      v42.i32[1] = v1490;
      float v43 = 1.0 / *(float *)&v1490;
      unint64_t v44 = v22 & 0xFFFFFFFFFFFFFFF0;
      float v45 = 0.5;
      *(float *)v31.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v46 = (float32x4_t)vdupq_lane_s32(v31, 0);
      *(float *)v31.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, a13, 2);
      *(float *)v42.i32 = vmuls_lane_f32(1.0 / *(float *)&v1490, *(float32x2_t *)a13.f32, 1);
      *(float *)v32.i32 = (float)(1.0 / *(float *)&v1490) * a13.f32[0];
      float32x4_t v1333 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1343 = (float32x4_t)vdupq_lane_s32(v32, 0);
      float32x4_t v1299 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1309 = (float32x4_t)vdupq_lane_s32(v42, 0);
      float32x4_t v1284 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      float32x4_t v1289 = (float32x4_t)vdupq_lane_s32(v31, 0);
      float v47 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      float v48 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      float v49 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v50 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v51 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v52 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      float32x4_t v1281 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      float32x4_t v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      v39.i32[1] = DWORD1(a17);
      float32x4_t v54 = (char *)v1512.data;
      size_t v55 = v1512.rowBytes;
      v56.i64[0] = 0x4100000041000000;
      v56.i64[1] = 0x4100000041000000;
      float32x2_t v1331 = v39;
      float v1361 = 1.0 / *(float *)&a9;
      float v1352 = 1.0 / *(float *)&v1490;
      int32x4_t v1465 = vdupq_n_s32(v29 * (v25 >> 2) - 4);
      float32x4_t v1473 = v50;
      float32x4_t v1446 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      int32x4_t v1456 = vdupq_n_s32(v25 >> 2);
      int32x4_t v1426 = vdupq_n_s32(v23);
      float v1436 = v47;
      float32x4_t v1406 = v51;
      float32x4_t v1416 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      float32x4_t v1388 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      int32x4_t v1397 = vdupq_n_s32(v24);
      float v1379 = v48;
      do
      {
        float32x4_t v57 = (float16x4_t *)&v54[v55 * v40];
        v58 = (__int16 *)&v27[v40 * v28];
        unint64_t v59 = 0;
        if (v44)
        {
          float32x4_t v1501 = vmlaq_f32(v1333, v1343, v46);
          float32x4_t v1492 = vmlaq_f32(v1299, v1309, v46);
          float32x4_t v1370 = v46;
          float32x4_t v1481 = vmlaq_f32(v1284, v1289, v46);
          float32x4_t v60 = v1281;
          do
          {
            float32x4_t v61 = (float32x4_t)vdupq_n_s32(0x447A0000u);
            float32x4_t v62 = vdivq_f32(v61, vcvtq_f32_f16(*v57));
            float32x4_t v63 = vdivq_f32(v61, vcvtq_f32_f16(v57[1]));
            __asm { FMOV            V0.4S, #4.0 }
            float32x4_t v68 = vaddq_f32(v60, _Q0);
            float32x4_t v69 = vdivq_f32(v61, vcvtq_f32_f16(v57[2]));
            float32x4_t v70 = vaddq_f32(v60, v56);
            __asm { FMOV            V0.4S, #12.0 }
            float32x4_t v72 = vaddq_f32(v60, _Q0);
            float32x4_t v73 = vdivq_f32(v61, vcvtq_f32_f16(v57[3]));
            float32x4_t v74 = vmlaq_f32(v50, vmlaq_n_f32(v1481, v60, v47), v62);
            float32x4_t v75 = vmlaq_f32(v50, vmlaq_n_f32(v1481, v68, v47), v63);
            float32x4_t v76 = vmlaq_f32(v50, vmlaq_n_f32(v1481, v70, v47), v69);
            float32x4_t v77 = vmlaq_f32(v50, vmlaq_n_f32(v1481, v72, v47), v73);
            int8x16_t v78 = (int8x16_t)vcgtzq_f32(v63);
            int8x16_t v79 = (int8x16_t)vcgtzq_f32(v69);
            int8x16_t v80 = (int8x16_t)vcgtzq_f32(v73);
            float32x4_t v81 = vmlaq_f32(v52, vmlaq_n_f32(v1492, v60, v48), v62);
            float32x4_t v82 = vmlaq_f32(v51, vmlaq_n_f32(v1501, v68, v49), v63);
            float32x4_t v83 = vmlaq_f32(v52, vmlaq_n_f32(v1492, v68, v48), v63);
            float32x4_t v84 = vmlaq_f32(v51, vmlaq_n_f32(v1501, v70, v49), v69);
            float32x4_t v85 = vmlaq_f32(v52, vmlaq_n_f32(v1492, v70, v48), v69);
            int8x16_t v86 = vandq_s8((int8x16_t)vcgezq_f32(v74), (int8x16_t)vcgtzq_f32(v62));
            float32x4_t v87 = vmlaq_f32(v51, vmlaq_n_f32(v1501, v72, v49), v73);
            float32x4_t v88 = vmlaq_f32(v52, vmlaq_n_f32(v1492, v72, v48), v73);
            int32x4_t v89 = vcvtmq_s32_f32(vmlaq_f32(v1416, vdivq_f32(v53, v74), vmlaq_f32(v51, vmlaq_n_f32(v1501, v60, v49), v62)));
            int32x4_t v90 = vcvtmq_s32_f32(vmlaq_f32(v1446, vdivq_f32(v1388, v74), v81));
            int32x4_t v91 = vcvtmq_s32_f32(vmlaq_f32(v1416, vdivq_f32(v53, v75), v82));
            int32x4_t v92 = vcvtmq_s32_f32(vmlaq_f32(v1446, vdivq_f32(v1388, v75), v83));
            int32x4_t v93 = vcvtmq_s32_f32(vmlaq_f32(v1416, vdivq_f32(v53, v76), v84));
            int32x4_t v94 = vcvtmq_s32_f32(vmlaq_f32(v1446, vdivq_f32(v1388, v76), v85));
            int32x4_t v95 = vcvtmq_s32_f32(vmlaq_f32(v1416, vdivq_f32(v53, v77), v87));
            int32x4_t v96 = vcvtmq_s32_f32(vmlaq_f32(v1446, vdivq_f32(v1388, v77), v88));
            v88.i64[0] = -1;
            v88.i64[1] = -1;
            int32x4_t v97 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1426, v90), (int8x16_t)vcgtq_s32(v1397, v89)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v90, (int8x16_t)v89), (int32x4_t)v88)), v86);
            int32x4_t v98 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1426, v92), (int8x16_t)vcgtq_s32(v1397, v91)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v92, (int8x16_t)v91), (int32x4_t)v88)), vandq_s8((int8x16_t)vcgezq_f32(v75), v78));
            int32x4_t v99 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1426, v94), (int8x16_t)vcgtq_s32(v1397, v93)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v94, (int8x16_t)v93), (int32x4_t)v88)), vandq_s8((int8x16_t)vcgezq_f32(v76), v79));
            *(int16x4_t *)v87.f32 = vmovn_s32(v97);
            int32x4_t v100 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1426, v96), (int8x16_t)vcgtq_s32(v1397, v95)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v96, (int8x16_t)v95), (int32x4_t)v88)), vandq_s8((int8x16_t)vcgezq_f32(v77), v80));
            *(int16x4_t *)v82.f32 = vmovn_s32(v98);
            *(int8x8_t *)v88.f32 = vorn_s8((int8x8_t)vmovn_s32(v89), *(int8x8_t *)v87.f32);
            int8x8_t v101 = vorn_s8((int8x8_t)vmovn_s32(v90), *(int8x8_t *)v87.f32);
            *(int16x4_t *)v81.f32 = vmovn_s32(v99);
            int8x8_t v102 = v58;
            vst2_s16(v102, (int16x4x2_t)v88);
            v102 += 8;
            v1516.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v91), *(int8x8_t *)v82.f32);
            v1516.val[1] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v92), *(int8x8_t *)v82.f32);
            float v47 = v1436;
            *(int8x8_t *)v88.f32 = vorn_s8((int8x8_t)vmovn_s32(v93), *(int8x8_t *)v81.f32);
            int8x8_t v103 = vorn_s8((int8x8_t)vmovn_s32(v94), *(int8x8_t *)v81.f32);
            *(int16x4_t *)v82.f32 = vmovn_s32(v100);
            int8x8_t v104 = v58 + 16;
            vst2_s16(v104, (int16x4x2_t)v88);
            *(int8x8_t *)v88.f32 = vorn_s8((int8x8_t)vmovn_s32(v95), *(int8x8_t *)v82.f32);
            int8x8_t v105 = vorn_s8((int8x8_t)vmovn_s32(v96), *(int8x8_t *)v82.f32);
            int8x8_t v106 = v58 + 24;
            vst2_s16(v106, (int16x4x2_t)v88);
            float v48 = v1379;
            float32x4_t v51 = v1406;
            v56.i64[0] = 0x4100000041000000;
            v56.i64[1] = 0x4100000041000000;
            vst2_s16(v102, v1516);
            float32x4_t v50 = v1473;
            int32x4_t v107 = vminq_s32(vmaxq_s32(vmlaq_s32(v89, v90, v1456), (int32x4_t)0), v1465);
            int32x4_t v108 = vminq_s32(vmaxq_s32(vmlaq_s32(v91, v92, v1456), (int32x4_t)0), v1465);
            int8x16_t v109 = vandq_s8((int8x16_t)vdivq_f32(v61, v74), (int8x16_t)v97);
            v30[v107.u32[0]] = fmaxf(*(float *)v109.i32, v30[v107.u32[0]]);
            int8x16_t v110 = vandq_s8((int8x16_t)vdivq_f32(v61, v75), (int8x16_t)v98);
            int32x4_t v111 = vminq_s32(vmaxq_s32(vmlaq_s32(v93, v94, v1456), (int32x4_t)0), v1465);
            v30[v108.u32[1]] = fmaxf(*(float *)&v110.i32[1], v30[v108.u32[1]]);
            int8x16_t v112 = vandq_s8((int8x16_t)vdivq_f32(v61, v76), (int8x16_t)v99);
            int32x4_t v113 = vminq_s32(vmaxq_s32(vmlaq_s32(v95, v96, v1456), (int32x4_t)0), v1465);
            v30[v111.u32[2]] = fmaxf(*(float *)&v112.i32[2], v30[v111.u32[2]]);
            int8x16_t v114 = vandq_s8((int8x16_t)vdivq_f32(v61, v77), (int8x16_t)v100);
            v30[v113.u32[3]] = fmaxf(*(float *)&v114.i32[3], v30[v113.u32[3]]);
            v30[v107.u32[1]] = fmaxf(*(float *)&v109.i32[1], v30[v107.u32[1]]);
            v30[v108.u32[2]] = fmaxf(*(float *)&v110.i32[2], v30[v108.u32[2]]);
            v30[v111.u32[3]] = fmaxf(*(float *)&v112.i32[3], v30[v111.u32[3]]);
            v30[v113.u32[0]] = fmaxf(*(float *)v114.i32, v30[v113.u32[0]]);
            v30[v107.u32[2]] = fmaxf(*(float *)&v109.i32[2], v30[v107.u32[2]]);
            v30[v108.u32[3]] = fmaxf(*(float *)&v110.i32[3], v30[v108.u32[3]]);
            v30[v111.u32[0]] = fmaxf(*(float *)v112.i32, v30[v111.u32[0]]);
            v30[v113.u32[1]] = fmaxf(*(float *)&v114.i32[1], v30[v113.u32[1]]);
            v30[v107.u32[3]] = fmaxf(*(float *)&v109.i32[3], v30[v107.u32[3]]);
            v30[v108.u32[0]] = fmaxf(*(float *)v110.i32, v30[v108.u32[0]]);
            v30[v111.u32[1]] = fmaxf(*(float *)&v112.i32[1], v30[v111.u32[1]]);
            v30[v113.u32[2]] = fmaxf(*(float *)&v114.i32[2], v30[v113.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v60 = vaddq_f32(v60, _Q0);
            v57 += 4;
            v58 += 32;
            v59 += 16;
          }
          while (v59 < v44);
          unint64_t v59 = (((v22 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v34 = (float32x4_t)a14;
          float32x4_t v33 = (float32x4_t)a15;
          float32x4_t v36 = a12;
          float32x4_t v35 = a13;
          float32x2_t v38 = (float32x2_t)a18;
          float v37 = *(float *)&a11;
          float32x2_t v39 = v1331;
          float v41 = v1361;
          float v43 = v1352;
          float v45 = 0.5;
          float32x4_t v46 = v1370;
        }
        if (v59 < v22)
        {
          do
          {
            _H2 = v57->i16[0];
            __asm { FCVT            S2, H2 }
            float v118 = 1000.0 / _S2;
            int32x4_t v119 = (int32x4_t)vaddq_f32(v33, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v36, v41 * (float)((float)((float)((float)v59 + v45) - v37) * v118)), v35, v43 * (float)((float)((float)((float)v40 + v45) - *((float *)&a11 + 1)) * v118)), v34, v118));
            uint64_t v120 = 0xFFFF0000FFFFLL;
            if (*(float *)&v119.i32[2] >= 0.0 && v118 > 0.0)
            {
              int32x2_t v121 = vcvt_s32_f32(vmla_f32(v38, vdiv_f32(v39, (float32x2_t)vdup_laneq_s32(v119, 2)), *(float32x2_t *)v119.i8));
              if ((v121.i32[0] & 0x80000000) == 0
                && (__int16)v24 > v121.i32[0]
                && (v121.i32[1] & 0x80000000) == 0
                && (__int16)v23 > (int)v121.u16[2])
              {
                float v122 = 1000.0 / *(float *)&v119.i32[2];
                float v123 = &v30[(v25 >> 2) * v121.u16[2]];
                float v124 = v123[v121.u32[0]];
                if (v124 == 0.0 || v124 < v122) {
                  v123[v121.u32[0]] = v122;
                }
                uint64_t v120 = (uint64_t)v121;
              }
            }
            __int16 *v58 = v120;
            v58[1] = WORD2(v120);
            ++v59;
            float32x4_t v57 = (float16x4_t *)((char *)v57 + 2);
            v58 += 2;
          }
          while (v22 != v59);
        }
        ++v40;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v46 = vaddq_f32(v46, _Q0);
      }
      while (v40 != v21);
    }
LABEL_321:
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    float v1116 = v1318;
LABEL_390:
    CVPixelBufferUnlockBaseAddress(v1116, 0);
    return 0;
  }
LABEL_322:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_393:
    float32x4_t v1254 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
    PixelBufferUtils::pixelFormatAsString(v1254, (char *)&v1512);
    if ((v1512.width & 0x8000000000000000) == 0) {
      float32x4_t v1255 = &v1512;
    }
    else {
      float32x4_t v1255 = (vImage_Buffer *)v1512.data;
    }
    LODWORD(buf.data) = 136315138;
    *(void **)((char *)&buf.data + 4) = v1255;
    _os_log_error_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_ERROR, "illegal output pixel format in reprojection: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(v1512.width) < 0) {
      operator delete(v1512.data);
    }
  }
  return -22950;
}

uint64_t reprojectUndistortedDepthMapWithInputImmediates<unsigned short,825437747u>(__CVBuffer *a1, __CVBuffer *a2, CVPixelBufferRef pixelBuffer, int a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, int32x4_t a14, int32x4_t a15, long long a16, long long a17, long long a18)
{
  __int32 v1516 = SHIDWORD(a10);
  uint64_t v1539 = *MEMORY[0x263EF8340];
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  float32x4_t v1354 = a2;
  if (!a2)
  {
    if (PixelFormatType <= 1717855599)
    {
      if (PixelFormatType == 825437747)
      {
        size_t Height = CVPixelBufferGetHeight(a1);
        size_t Width = CVPixelBufferGetWidth(a1);
        size_t v1130 = CVPixelBufferGetHeight(pixelBuffer);
        float v1131 = a1;
        unsigned int v1132 = CVPixelBufferGetWidth(pixelBuffer);
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
        CVPixelBufferLockBaseAddress(v1131, 1uLL);
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        memset(&v1537, 0, sizeof(v1537));
        unint64_t v1134 = (CGRect *)MEMORY[0x263F001A8];
        CVPixelBufferRef v1281 = v1131;
        PixelBufferUtils::asVImageBuffer(v1131, *MEMORY[0x263F001A8], &v1537);
        memset(&buf, 0, sizeof(buf));
        PixelBufferUtils::asVImageBuffer(pixelBuffer, *v1134, &buf);
        size_t v1138 = BytesPerRow >> 1;
        data = (__int16 *)buf.data;
        if (v1138 * v1130) {
          memset_pattern16(buf.data, &unk_247F24690, 2 * v1138 * v1130);
        }
        vImagePixelCount v1285 = buf.height;
        float32x4_t v1141 = (float32x4_t)a14;
        float32x4_t v1140 = (float32x4_t)a15;
        float32x4_t v1143 = a12;
        float32x4_t v1142 = a13;
        float v1145 = *(float *)&a18;
        float v1144 = *(float *)&a11;
        float v1146 = *(float *)&a16;
        if (Height)
        {
          unint64_t v1147 = 0;
          float v1148 = 1.0 / *(float *)&a9;
          float v1149 = 1.0 / *(float *)&v1516;
          unint64_t v1150 = Width & 0xFFFFFFFFFFFFFFF0;
          float v1151 = 0.5;
          *(float *)v1135.i32 = 0.5 - *((float *)&a11 + 1);
          float32x4_t v1152 = (float32x4_t)vdupq_lane_s32(v1135, 0);
          *(float *)v1135.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, a13, 2);
          *(float *)v1136.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, *(float32x2_t *)a13.f32, 1);
          *(float *)v1137.i32 = (float)(1.0 / *(float *)&v1516) * a13.f32[0];
          float v1153 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
          float v1154 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
          float v1155 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
          float32x4_t v1353 = (char *)v1537.data;
          size_t rowBytes = v1537.rowBytes;
          float32x4_t v1305 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
          float32x4_t v1308 = (float32x4_t)vdupq_lane_s32(v1137, 0);
          float32x4_t v1301 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
          float32x4_t v1302 = (float32x4_t)vdupq_lane_s32(v1136, 0);
          _Q1 = (float32x4_t)vdupq_lane_s32(v1135, 0);
          float32x4_t v1297 = (float32x4_t)vdupq_laneq_s32(a14, 2);
          float32x4_t v1299 = _Q1;
          float32x4_t v1157 = (float32x4_t)vdupq_laneq_s32(a15, 2);
          float32x4_t v1158 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
          int32x4_t v1159 = vdupq_n_s32(v1138);
          float32x4_t v1295 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
          int32x4_t v1160 = vdupq_n_s32(LODWORD(buf.height) * (int)v1138 - 2);
          int v1161 = (__int16)v1132;
          int v1162 = (__int16)v1130;
          float v1163 = *((float *)&a17 + 1);
          unint64_t v1288 = (((Width & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          v1164.i64[0] = 0x3E0000003E000000;
          v1164.i64[1] = 0x3E0000003E000000;
          size_t v1333 = Width;
          size_t v1325 = v1138;
          float32x4_t v1461 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
          float v1471 = v1153;
          int v1293 = (__int16)v1132;
          int v1291 = (__int16)v1130;
          float32x4_t v1441 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
          float32x4_t v1451 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
          float32x4_t v1425 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
          int32x4_t v1433 = vdupq_n_s32(v1132);
          int32x4_t v1406 = vdupq_n_s32(v1130);
          float32x4_t v1415 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
          do
          {
            float32x4_t v1165 = (uint16x4_t *)&v1353[v1147 * rowBytes];
            if (v1150)
            {
              unint64_t v1387 = v1147;
              uint64_t v1166 = 0;
              float32x4_t v1481 = vmlaq_f32(v1305, v1308, v1152);
              float32x4_t v1167 = vmlaq_f32(v1301, v1302, v1152);
              float32x4_t v1377 = v1152;
              float32x4_t v1168 = vmlaq_f32(v1297, v1299, v1152);
              float32x4_t v1169 = v1295;
              v1170.i64[0] = 0x4100000041000000;
              v1170.i64[1] = 0x4100000041000000;
              do
              {
                uint64_t v1535 = v1166;
                float32x4_t v1171 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*v1165)), v1164);
                float32x4_t v1172 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v1165[1])), v1164);
                __asm { FMOV            V3.4S, #4.0 }
                float32x4_t v1174 = vaddq_f32(v1169, _Q3);
                int32x4_t v1175 = v1160;
                int32x4_t v1176 = v1159;
                float32x4_t v1177 = vaddq_f32(v1169, v1170);
                float32x4_t v1178 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v1165[2])), v1164);
                __asm { FMOV            V3.4S, #12.0 }
                float32x4_t v1180 = vaddq_f32(v1169, _Q3);
                float32x4_t v1181 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v1165[3])), v1164);
                float32x4_t v1182 = vmlaq_f32(v1157, vmlaq_n_f32(v1168, v1169, v1153), v1171);
                float32x4_t v1183 = vmlaq_f32(v1157, vmlaq_n_f32(v1168, v1174, v1153), v1172);
                float32x4_t v1184 = vmlaq_f32(v1157, vmlaq_n_f32(v1168, v1177, v1153), v1178);
                float32x4_t v1185 = vmlaq_f32(v1157, vmlaq_n_f32(v1168, v1180, v1153), v1181);
                int8x16_t v1186 = (int8x16_t)vcgtzq_f32(v1171);
                float32x4_t v1187 = vmlaq_f32(v1158, vmlaq_n_f32(v1481, v1169, v1155), v1171);
                float32x4_t v1188 = v1157;
                float32x4_t v1189 = vmlaq_f32(v1451, vmlaq_n_f32(v1167, v1169, v1154), v1171);
                float32x4_t v1190 = vmlaq_f32(v1158, vmlaq_n_f32(v1481, v1174, v1155), v1172);
                float32x4_t v1191 = vmlaq_f32(v1451, vmlaq_n_f32(v1167, v1174, v1154), v1172);
                int8x16_t v1192 = vandq_s8((int8x16_t)vcgezq_f32(v1182), v1186);
                int8x16_t v1193 = vandq_s8((int8x16_t)vcgezq_f32(v1183), (int8x16_t)vcgtzq_f32(v1172));
                int8x16_t v1194 = vandq_s8((int8x16_t)vcgezq_f32(v1184), (int8x16_t)vcgtzq_f32(v1178));
                float32x4_t v1195 = vmlaq_f32(v1158, vmlaq_n_f32(v1481, v1180, v1155), v1181);
                int8x16_t v1196 = vandq_s8((int8x16_t)vcgezq_f32(v1185), (int8x16_t)vcgtzq_f32(v1181));
                float32x4_t v1197 = vmlaq_f32(v1451, vmlaq_n_f32(v1167, v1180, v1154), v1181);
                float32x4_t v1198 = vmlaq_f32(v1461, vdivq_f32(v1425, v1184), vmlaq_f32(v1451, vmlaq_n_f32(v1167, v1177, v1154), v1178));
                int32x4_t v1199 = vcvtmq_s32_f32(vmlaq_f32(v1415, vdivq_f32(v1441, v1182), v1187));
                int32x4_t v1200 = vcvtmq_s32_f32(vmlaq_f32(v1461, vdivq_f32(v1425, v1182), v1189));
                int32x4_t v1201 = vcvtmq_s32_f32(vmlaq_f32(v1415, vdivq_f32(v1441, v1183), v1190));
                int32x4_t v1202 = vcvtmq_s32_f32(vmlaq_f32(v1461, vdivq_f32(v1425, v1183), v1191));
                float32x4_t v1203 = vmlaq_f32(v1461, vdivq_f32(v1425, v1185), v1197);
                v1204.i64[0] = -1;
                v1204.i64[1] = -1;
                int32x4_t v1205 = vcvtmq_s32_f32(vmlaq_f32(v1415, vdivq_f32(v1441, v1184), vmlaq_f32(v1158, vmlaq_n_f32(v1481, v1177, v1155), v1178)));
                int32x4_t v1206 = vcvtmq_s32_f32(v1198);
                int32x4_t v1207 = vcvtmq_s32_f32(vmlaq_f32(v1415, vdivq_f32(v1441, v1185), v1195));
                int32x4_t v1208 = vcvtmq_s32_f32(v1203);
                int32x4_t v1159 = v1176;
                int32x4_t v1160 = v1175;
                v1170.i64[0] = 0x4100000041000000;
                v1170.i64[1] = 0x4100000041000000;
                int8x16_t v1209 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
                float32x4_t v1210 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1406, v1200), (int8x16_t)vcgtq_s32(v1433, v1199)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1200, (int8x16_t)v1199), v1204)), v1192), (int8x16_t)vmulq_f32(v1182, v1170), v1209);
                float32x4_t v1211 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1406, v1202), (int8x16_t)vcgtq_s32(v1433, v1201)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1202, (int8x16_t)v1201), v1204)), v1193), (int8x16_t)vmulq_f32(v1183, v1170), v1209);
                float32x4_t v1212 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1406, v1206), (int8x16_t)vcgtq_s32(v1433, v1205)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1206, (int8x16_t)v1205), v1204)), v1194), (int8x16_t)vmulq_f32(v1184, v1170), v1209);
                v1164.i64[0] = 0x3E0000003E000000;
                v1164.i64[1] = 0x3E0000003E000000;
                float32x4_t v1213 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1406, v1208), (int8x16_t)vcgtq_s32(v1433, v1207)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1208, (int8x16_t)v1207), v1204)), v1196), (int8x16_t)vmulq_f32(v1185, v1170), v1209);
                int32x4_t v1214 = vmlaq_s32(v1201, v1202, v1159);
                int32x4_t v1215 = vminq_s32(vmaxq_s32(vmlaq_s32(v1199, v1200, v1159), (int32x4_t)0), v1175);
                int32x4_t v1216 = vcvtq_s32_f32(v1210);
                float32x4_t v1157 = v1188;
                float v1153 = v1471;
                int32x4_t v1217 = vminq_s32(vmaxq_s32(vmlaq_s32(v1207, v1208, v1159), (int32x4_t)0), v1175);
                unsigned __int32 v1218 = v1217.u32[3];
                unsigned __int32 v1219 = v1217.u32[1];
                unsigned __int32 v1220 = v1217.u32[2];
                unsigned __int32 v1221 = v1217.i32[0];
                int32x4_t v1222 = vcvtq_s32_f32(v1213);
                __int32 v1223 = v1222.i32[3];
                __int32 v1224 = v1222.i32[1];
                __int32 v1225 = v1222.i32[2];
                __int32 v1226 = v1222.i32[0];
                int32x4_t v1227 = vminq_s32(vmaxq_s32(vmlaq_s32(v1205, v1206, v1159), (int32x4_t)0), v1175);
                int32x4_t v1228 = vcvtq_s32_f32(v1212);
                unsigned __int32 v1229 = v1227.u32[2];
                unsigned __int32 v1230 = v1227.u32[3];
                __int16 v1231 = v1228.i16[4];
                unsigned __int32 v1232 = v1227.u32[1];
                unsigned __int32 v1233 = v1227.i32[0];
                int32x4_t v1234 = vminq_s32(vmaxq_s32(v1214, (int32x4_t)0), v1175);
                unsigned __int32 v1235 = v1234.u32[1];
                unsigned __int32 v1236 = v1234.u32[2];
                unsigned __int32 v1237 = v1234.u32[3];
                unsigned __int32 v1238 = v1234.i32[0];
                int32x4_t v1239 = vcvtq_s32_f32(v1211);
                int v1240 = data[v1215.u32[0]];
                if (v1216.i32[0] < v1240) {
                  LOWORD(v1240) = v1216.i16[0];
                }
                data[v1215.u32[0]] = v1240;
                __int32 v1241 = v1239.i32[1];
                __int32 v1242 = v1239.i32[2];
                __int32 v1243 = v1239.i32[3];
                __int32 v1244 = v1239.i32[0];
                __asm { FMOV            V1.4S, #16.0 }
                float32x4_t v1169 = vaddq_f32(v1169, _Q1);
                if (v1241 >= data[v1235]) {
                  LOWORD(v1241) = data[v1235];
                }
                data[v1235] = v1241;
                if (v1228.i32[2] >= data[v1229]) {
                  __int16 v1231 = data[v1229];
                }
                data[v1229] = v1231;
                __int32 v1245 = data[v1218];
                if (v1223 < v1245) {
                  LOWORD(v1245) = v1223;
                }
                data[v1218] = v1245;
                int v1246 = data[v1215.u32[1]];
                if (v1216.i32[1] < v1246) {
                  LOWORD(v1246) = v1216.i16[2];
                }
                data[v1215.u32[1]] = v1246;
                __int32 v1247 = data[v1236];
                if (v1242 < v1247) {
                  LOWORD(v1247) = v1242;
                }
                data[v1236] = v1247;
                int v1248 = data[v1230];
                if (v1228.i32[3] < v1248) {
                  LOWORD(v1248) = v1228.i16[6];
                }
                data[v1230] = v1248;
                __int32 v1249 = data[v1221];
                if (v1226 < v1249) {
                  LOWORD(v1249) = v1226;
                }
                data[v1221] = v1249;
                int v1250 = data[v1215.u32[2]];
                if (v1216.i32[2] < v1250) {
                  LOWORD(v1250) = v1216.i16[4];
                }
                data[v1215.u32[2]] = v1250;
                __int32 v1251 = data[v1237];
                if (v1243 < v1251) {
                  LOWORD(v1251) = v1243;
                }
                data[v1237] = v1251;
                int v1252 = data[v1233];
                if (v1228.i32[0] < v1252) {
                  LOWORD(v1252) = v1228.i16[0];
                }
                data[v1233] = v1252;
                if (v1224 >= data[v1219]) {
                  LOWORD(v1224) = data[v1219];
                }
                data[v1219] = v1224;
                int v1253 = data[v1215.u32[3]];
                if (v1216.i32[3] < v1253) {
                  LOWORD(v1253) = v1216.i16[6];
                }
                data[v1215.u32[3]] = v1253;
                __int32 v1254 = data[v1238];
                if (v1244 < v1254) {
                  LOWORD(v1254) = v1244;
                }
                data[v1238] = v1254;
                int v1255 = data[v1232];
                if (v1228.i32[1] < v1255) {
                  LOWORD(v1255) = v1228.i16[2];
                }
                data[v1232] = v1255;
                __int32 v1256 = data[v1220];
                if (v1225 < v1256) {
                  LOWORD(v1256) = v1225;
                }
                data[v1220] = v1256;
                v1165 += 4;
                uint64_t v1166 = v1535 + 16;
              }
              while (v1535 + 16 < v1150);
              unint64_t v1257 = v1288;
              float32x4_t v1141 = (float32x4_t)a14;
              float32x4_t v1140 = (float32x4_t)a15;
              float32x4_t v1143 = a12;
              float32x4_t v1142 = a13;
              float v1145 = *(float *)&a18;
              float v1144 = *(float *)&a11;
              float v1146 = *(float *)&a16;
              float32x4_t v1152 = v1377;
              size_t Width = v1333;
              size_t v1138 = v1325;
              unint64_t v1147 = v1387;
              float v1148 = 1.0 / *(float *)&a9;
              float v1149 = 1.0 / *(float *)&v1516;
              float v1151 = 0.5;
              int v1161 = v1293;
              int v1162 = v1291;
              float v1163 = *((float *)&a17 + 1);
            }
            else
            {
              unint64_t v1257 = 0;
            }
            if (v1257 < Width)
            {
              do
              {
                _Q1.i16[0] = v1165->i16[0];
                float v1258 = (float)_Q1.u32[0] * 0.125;
                _Q1.f32[0] = v1149 * (float)((float)((float)((float)v1147 + v1151) - *((float *)&a11 + 1)) * v1258);
                _Q17 = vaddq_f32(v1140, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v1143, v1148 * (float)((float)((float)((float)v1257 + v1151) - v1144) * v1258)), v1142, _Q1.f32[0]), v1141, v1258));
                if (_Q17.f32[2] >= 0.0 && v1258 > 0.0)
                {
                  _Q1.f32[0] = vmlas_n_f32(v1145, v1146 / _Q17.f32[2], _Q17.f32[0]);
                  uint64_t v1260 = (int)_Q1.f32[0];
                  if ((v1260 & 0x80000000) == 0 && v1161 > (int)v1260)
                  {
                    _S0 = v1163 / _Q17.f32[2];
                    __asm { FMLA            S1, S0, V17.S[1] }
                    if (((int)_Q1.f32[0] & 0x80000000) == 0 && v1162 > (unsigned __int16)(int)_Q1.f32[0])
                    {
                      float32x4_t v1262 = &data[v1138 * (unsigned __int16)(int)_Q1.f32[0]];
                      unsigned int v1263 = vcvts_n_s32_f32(_Q17.f32[2], 3uLL);
                      if (v1263 <= (unsigned __int16)(v1262[v1260] - 1)) {
                        v1262[v1260] = v1263;
                      }
                    }
                  }
                }
                ++v1257;
                float32x4_t v1165 = (uint16x4_t *)((char *)v1165 + 2);
              }
              while (Width != v1257);
            }
            ++v1147;
            __asm { FMOV            V0.4S, #1.0 }
            float32x4_t v1152 = vaddq_f32(v1152, _Q0);
            v1164.i64[0] = 0x3E0000003E000000;
            v1164.i64[1] = 0x3E0000003E000000;
          }
          while (v1147 != Height);
        }
        unsigned __int32 v705 = v1281;
        if (v1285)
        {
          uint64_t v1265 = 0;
          long long v1266 = *(_OWORD *)&buf.width;
          vImagePixelCount v1267 = buf.width >> 4;
          float32x4_t v1268 = (char *)buf.data;
          vImagePixelCount v1269 = buf.height;
          if (buf.width >> 4 <= 1) {
            vImagePixelCount v1267 = 1;
          }
          if (buf.height <= 1) {
            vImagePixelCount v1269 = 1;
          }
          unint64_t v1270 = buf.width & 0xFFFFFFF0;
          do
          {
            float32x4_t v1271 = (int8x8_t *)&v1268[*((void *)&v1266 + 1) * v1265];
            vImagePixelCount v1272 = v1267;
            if ((unint64_t)v1266 >= 0x10)
            {
              do
              {
                int16x4_t v1273 = (int16x4_t)v1271[2];
                int16x4_t v1274 = (int16x4_t)v1271[3];
                int8x8_t v1275 = vbic_s8(v1271[1], (int8x8_t)vceq_s16((int16x4_t)v1271[1], (int16x4_t)0x8000800080008000));
                int8x8_t *v1271 = vbic_s8(*v1271, (int8x8_t)vceq_s16((int16x4_t)*v1271, (int16x4_t)0x8000800080008000));
                v1271[1] = v1275;
                v1271[2] = vbic_s8((int8x8_t)v1273, (int8x8_t)vceq_s16(v1273, (int16x4_t)0x8000800080008000));
                v1271[3] = vbic_s8((int8x8_t)v1274, (int8x8_t)vceq_s16(v1274, (int16x4_t)0x8000800080008000));
                v1271 += 4;
                --v1272;
              }
              while (v1272);
            }
            unint64_t v1276 = v1266 & 0xFFFFFFFF0000000FLL;
            if ((unint64_t)v1266 > v1270)
            {
              do
              {
                if (v1271->i16[0] == 0x7FFF) {
                  v1271->i16[0] = 0;
                }
                float32x4_t v1271 = (int8x8_t *)((char *)v1271 + 2);
                --v1276;
              }
              while (v1276);
            }
            ++v1265;
          }
          while (v1265 != v1269);
        }
        goto LABEL_398;
      }
      if (PixelFormatType == 1278226534) {
        goto LABEL_168;
      }
      if (PixelFormatType != 1278226536) {
        goto LABEL_400;
      }
    }
    else
    {
      if (PixelFormatType <= 1751410031)
      {
        if (PixelFormatType != 1717855600)
        {
          if (PixelFormatType == 1717856627)
          {
            size_t v127 = CVPixelBufferGetHeight(a1);
            size_t v128 = CVPixelBufferGetWidth(a1);
            unsigned int v129 = CVPixelBufferGetHeight(pixelBuffer);
            unsigned int v130 = a1;
            unsigned int v131 = CVPixelBufferGetWidth(pixelBuffer);
            size_t v132 = CVPixelBufferGetBytesPerRow(pixelBuffer);
            CVPixelBufferLockBaseAddress(v130, 1uLL);
            CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            memset(&v1537, 0, sizeof(v1537));
            int v133 = (CGRect *)MEMORY[0x263F001A8];
            int32x2_t v134 = v130;
            PixelBufferUtils::asVImageBuffer(v130, *MEMORY[0x263F001A8], &v1537);
            memset(&buf, 0, sizeof(buf));
            PixelBufferUtils::asVImageBuffer(pixelBuffer, *v133, &buf);
            int32x2_t v136 = (float *)buf.data;
            int v135 = buf.height;
            bzero(buf.data, buf.height * buf.rowBytes);
            float32x4_t v142 = (float32x4_t)a14;
            float32x4_t v141 = (float32x4_t)a15;
            float32x4_t v144 = a12;
            float32x4_t v143 = a13;
            float v146 = *(float *)&a18;
            float v145 = *(float *)&a11;
            float v147 = *(float *)&a16;
            if (v127)
            {
              unint64_t v148 = 0;
              float v149 = 1.0 / *(float *)&a9;
              v150.i32[1] = v1516;
              float v151 = 1.0 / *(float *)&v1516;
              unint64_t v152 = v128 & 0xFFFFFFFFFFFFFFF0;
              float v153 = 0.5;
              *(float *)v137.i32 = 0.5 - *((float *)&a11 + 1);
              float32x4_t v154 = (float32x4_t)vdupq_lane_s32(v137, 0);
              *(float *)v137.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, a13, 2);
              *(float *)v150.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, *(float32x2_t *)a13.f32, 1);
              *(float *)v138.i32 = (float)(1.0 / *(float *)&v1516) * a13.f32[0];
              float v155 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
              *(float *)&long long v139 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
              *(float *)&long long v140 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
              float32x4_t v156 = (char *)v1537.data;
              size_t v157 = v1537.rowBytes;
              float32x4_t v1369 = (float32x4_t)vdupq_lane_s32(v138, 0);
              _Q2 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
              float32x4_t v1345 = (float32x4_t)vdupq_lane_s32(v150, 0);
              *(int8x16_t *)float32x4_t v1355 = _Q2;
              float32x4_t v1327 = (float32x4_t)vdupq_lane_s32(v137, 0);
              float32x4_t v1335 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
              float32x4_t v1319 = (float32x4_t)vdupq_laneq_s32(a14, 2);
              float32x4_t v159 = (float32x4_t)vdupq_laneq_s32(a15, 2);
              float32x4_t v160 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
              float32x4_t v161 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
              int32x4_t v162 = vdupq_n_s32(v131);
              float32x4_t v1313 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
              int32x4_t v163 = vdupq_n_s32(v135 * (v132 >> 2) - 4);
              float v164 = *((float *)&a17 + 1);
              v165.i64[0] = 0x3E0000003E000000;
              v165.i64[1] = 0x3E0000003E000000;
              float v1389 = 1.0 / *(float *)&a9;
              float v1379 = 1.0 / *(float *)&v1516;
              float32x4_t v1463 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
              int32x4_t v1473 = vdupq_n_s32(v132 >> 2);
              float32x4_t v1443 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
              float v1453 = v155;
              int32x4_t v1427 = vdupq_n_s32(v129);
              float32x4_t v1435 = v159;
              float32x4_t v1408 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
              float32x4_t v1417 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
              do
              {
                float32x4_t v166 = (uint16x4_t *)&v156[v148 * v157];
                unint64_t v167 = 0;
                if (v152)
                {
                  float32x4_t v1499 = vmlaq_f32(*(float32x4_t *)v1355, v1369, v154);
                  float32x4_t v1491 = vmlaq_f32(v1335, v1345, v154);
                  float32x4_t v1398 = v154;
                  float32x4_t v1483 = vmlaq_f32(v1319, v1327, v154);
                  float32x4_t v168 = v1313;
                  do
                  {
                    float32x4_t v169 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*v166)), v165);
                    float32x4_t v170 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v166[1])), v165);
                    float32x4_t v171 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v166[2])), v165);
                    __asm { FMOV            V1.4S, #4.0 }
                    float32x4_t v173 = vaddq_f32(v168, _Q1);
                    _Q1.i64[0] = 0x4100000041000000;
                    _Q1.i64[1] = 0x4100000041000000;
                    float32x4_t v174 = vaddq_f32(v168, _Q1);
                    _Q1.i64[0] = 0x3E0000003E000000;
                    _Q1.i64[1] = 0x3E0000003E000000;
                    float32x4_t v175 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v166[3])), _Q1);
                    __asm { FMOV            V0.4S, #12.0 }
                    float32x4_t v177 = vaddq_f32(v168, _Q0);
                    float32x4_t v178 = vmlaq_f32(v159, vmlaq_n_f32(v1483, v168, v155), v169);
                    float32x4_t v179 = vmlaq_f32(v159, vmlaq_n_f32(v1483, v173, v155), v170);
                    float32x4_t v180 = vmlaq_f32(v159, vmlaq_n_f32(v1483, v174, v155), v171);
                    float32x4_t v181 = vmlaq_f32(v159, vmlaq_n_f32(v1483, v177, v155), v175);
                    int8x16_t v1508 = (int8x16_t)vcgtzq_f32(v175);
                    float32x4_t v182 = vmlaq_f32(v160, vmlaq_n_f32(v1499, v168, *(float *)&v140), v169);
                    float32x4_t v183 = vmlaq_f32(v161, vmlaq_n_f32(v1491, v168, *(float *)&v139), v169);
                    int8x16_t v1519 = vandq_s8((int8x16_t)vcgezq_f32(v178), (int8x16_t)vcgtzq_f32(v169));
                    float32x4_t v184 = vmlaq_f32(v160, vmlaq_n_f32(v1499, v173, *(float *)&v140), v170);
                    int8x16_t v1527 = vandq_s8((int8x16_t)vcgezq_f32(v179), (int8x16_t)vcgtzq_f32(v170));
                    float32x4_t v185 = vmlaq_f32(v161, vmlaq_n_f32(v1491, v173, *(float *)&v139), v170);
                    float32x4_t v186 = vmlaq_f32(v160, vmlaq_n_f32(v1499, v174, *(float *)&v140), v171);
                    float32x4_t v187 = vmlaq_f32(v161, vmlaq_n_f32(v1491, v174, *(float *)&v139), v171);
                    int8x16_t v188 = vandq_s8((int8x16_t)vcgezq_f32(v180), (int8x16_t)vcgtzq_f32(v171));
                    float32x4_t v189 = vmlaq_f32(v160, vmlaq_n_f32(v1499, v177, *(float *)&v140), v175);
                    int32x4_t v190 = v163;
                    long long v191 = v140;
                    long long v192 = v139;
                    float32x4_t v193 = vmlaq_f32(v161, vmlaq_n_f32(v1491, v177, *(float *)&v139), v175);
                    int32x4_t v194 = v162;
                    float32x4_t v195 = vmlaq_f32(v1443, vdivq_f32(v1408, v178), v182);
                    float32x4_t v196 = vmlaq_f32(v1463, vdivq_f32(v1417, v178), v183);
                    float32x4_t v197 = vmlaq_f32(v1443, vdivq_f32(v1408, v179), v184);
                    float32x4_t v198 = vmlaq_f32(v1463, vdivq_f32(v1417, v179), v185);
                    float32x4_t v199 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                    int8x16_t v200 = (int8x16_t)vdivq_f32(v199, v178);
                    int8x16_t v201 = (int8x16_t)vdivq_f32(v199, v179);
                    int8x16_t v202 = (int8x16_t)vdivq_f32(v199, v180);
                    int8x16_t v203 = (int8x16_t)vdivq_f32(v199, v181);
                    int32x4_t v204 = vcvtmq_s32_f32(v195);
                    int32x4_t v205 = vcvtmq_s32_f32(v196);
                    int32x4_t v206 = vcvtmq_s32_f32(v197);
                    int32x4_t v207 = vcvtmq_s32_f32(v198);
                    int32x4_t v208 = vcvtmq_s32_f32(vmlaq_f32(v1443, vdivq_f32(v1408, v180), v186));
                    float32x4_t v209 = vmlaq_f32(v1443, vdivq_f32(v1408, v181), v189);
                    int32x4_t v210 = vcvtmq_s32_f32(vmlaq_f32(v1463, vdivq_f32(v1417, v180), v187));
                    int32x4_t v211 = vcvtmq_s32_f32(v209);
                    int32x4_t v212 = vcvtmq_s32_f32(vmlaq_f32(v1463, vdivq_f32(v1417, v181), v193));
                    v213.i64[0] = -1;
                    v213.i64[1] = -1;
                    _Q2 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1427, v205), (int8x16_t)vcgtq_s32(v194, v204)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v205, (int8x16_t)v204), v213));
                    int8x16_t v214 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1427, v207), (int8x16_t)vcgtq_s32(v194, v206)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v207, (int8x16_t)v206), v213));
                    long long v139 = v192;
                    long long v140 = v191;
                    int32x4_t v163 = v190;
                    float32x4_t v159 = v1435;
                    int8x16_t v215 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1427, v210), (int8x16_t)vcgtq_s32(v194, v208)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v210, (int8x16_t)v208), v213));
                    int32x4_t v162 = v194;
                    float v155 = v1453;
                    int8x16_t v216 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1427, v212), (int8x16_t)vcgtq_s32(v194, v211)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v212, (int8x16_t)v211), v213));
                    int32x4_t v217 = vmlaq_s32(v208, v210, v1473);
                    int32x4_t v218 = vminq_s32(vmaxq_s32(vmlaq_s32(v204, v205, v1473), (int32x4_t)0), v190);
                    unsigned __int32 v219 = v218.u32[1];
                    int8x16_t v220 = vandq_s8(v200, v1519);
                    unsigned __int32 v221 = v218.u32[2];
                    unsigned __int32 v222 = v218.u32[3];
                    int32x4_t v223 = vminq_s32(vmaxq_s32(vmlaq_s32(v206, v207, v1473), (int32x4_t)0), v190);
                    int8x16_t v224 = vandq_s8(v220, _Q2);
                    v136[v218.u32[0]] = fmaxf(*(float *)v224.i32, v136[v218.u32[0]]);
                    int8x16_t v225 = vandq_s8(vandq_s8(v201, v1527), v214);
                    int32x4_t v226 = vminq_s32(vmaxq_s32(v217, (int32x4_t)0), v190);
                    v136[v223.u32[1]] = fmaxf(*(float *)&v225.i32[1], v136[v223.u32[1]]);
                    int8x16_t v227 = vandq_s8(vandq_s8(v202, v188), v215);
                    int32x4_t v228 = vminq_s32(vmaxq_s32(vmlaq_s32(v211, v212, v1473), (int32x4_t)0), v190);
                    v136[v226.u32[2]] = fmaxf(*(float *)&v227.i32[2], v136[v226.u32[2]]);
                    int8x16_t v229 = vandq_s8(vandq_s8(v203, vandq_s8((int8x16_t)vcgezq_f32(v181), v1508)), v216);
                    v136[v228.u32[3]] = fmaxf(*(float *)&v229.i32[3], v136[v228.u32[3]]);
                    v136[v219] = fmaxf(*(float *)&v224.i32[1], v136[v219]);
                    v136[v223.u32[2]] = fmaxf(*(float *)&v225.i32[2], v136[v223.u32[2]]);
                    v136[v226.u32[3]] = fmaxf(*(float *)&v227.i32[3], v136[v226.u32[3]]);
                    v136[v228.u32[0]] = fmaxf(*(float *)v229.i32, v136[v228.u32[0]]);
                    v136[v221] = fmaxf(*(float *)&v224.i32[2], v136[v221]);
                    v136[v223.u32[3]] = fmaxf(*(float *)&v225.i32[3], v136[v223.u32[3]]);
                    v136[v226.u32[0]] = fmaxf(*(float *)v227.i32, v136[v226.u32[0]]);
                    v136[v228.u32[1]] = fmaxf(*(float *)&v229.i32[1], v136[v228.u32[1]]);
                    v136[v222] = fmaxf(*(float *)&v224.i32[3], v136[v222]);
                    *(float *)v224.i32 = fmaxf(*(float *)v225.i32, v136[v223.u32[0]]);
                    v165.i64[0] = 0x3E0000003E000000;
                    v165.i64[1] = 0x3E0000003E000000;
                    v136[v223.u32[0]] = *(float *)v224.i32;
                    _Q2.i16[1] = v227.i16[3];
                    v136[v226.u32[1]] = fmaxf(*(float *)&v227.i32[1], v136[v226.u32[1]]);
                    v136[v228.u32[2]] = fmaxf(*(float *)&v229.i32[2], v136[v228.u32[2]]);
                    __asm { FMOV            V0.4S, #16.0 }
                    float32x4_t v168 = vaddq_f32(v168, _Q0);
                    v166 += 4;
                    v167 += 16;
                  }
                  while (v167 < v152);
                  unint64_t v167 = (((v128 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
                  float32x4_t v142 = (float32x4_t)a14;
                  float32x4_t v141 = (float32x4_t)a15;
                  float32x4_t v144 = a12;
                  float32x4_t v143 = a13;
                  float v146 = *(float *)&a18;
                  float v145 = *(float *)&a11;
                  float v147 = *(float *)&a16;
                  float v149 = v1389;
                  float v151 = v1379;
                  float v153 = 0.5;
                  float32x4_t v154 = v1398;
                  float v164 = *((float *)&a17 + 1);
                }
                if (v167 < v128)
                {
                  do
                  {
                    _Q2.i16[0] = v166->i16[0];
                    float v231 = (float)_Q2.u32[0] * 0.125;
                    _Q2 = (int8x16_t)vaddq_f32(v141, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v144, v149 * (float)((float)((float)((float)v167 + v153) - v145) * v231)), v143, v151* (float)((float)((float)((float)v148 + v153) - *((float *)&a11 + 1)) * v231)), v142, v231));
                    if (*(float *)&_Q2.i32[2] >= 0.0 && v231 > 0.0)
                    {
                      uint64_t v232 = (int)vmlas_n_f32(v146, v147 / *(float *)&_Q2.i32[2], *(float *)_Q2.i32);
                      v165.i64[0] = 0x3E0000003E000000;
                      v165.i64[1] = 0x3E0000003E000000;
                      if ((v232 & 0x80000000) == 0 && (__int16)v131 > (int)v232)
                      {
                        _S3 = v164 / *(float *)&_Q2.i32[2];
                        __asm { FMLA            S4, S3, V2.S[1] }
                        int v235 = (int)_S4;
                        v165.i64[0] = 0x3E0000003E000000;
                        v165.i64[1] = 0x3E0000003E000000;
                        if ((v235 & 0x80000000) == 0 && (__int16)v129 > (int)(unsigned __int16)v235)
                        {
                          float v236 = 1000.0 / *(float *)&_Q2.i32[2];
                          v237 = &v136[(v132 >> 2) * (unsigned __int16)v235];
                          *(float *)_Q2.i32 = v237[v232];
                          if (*(float *)_Q2.i32 == 0.0 || *(float *)_Q2.i32 < v236) {
                            v237[v232] = v236;
                          }
                        }
                      }
                    }
                    ++v167;
                    float32x4_t v166 = (uint16x4_t *)((char *)v166 + 2);
                  }
                  while (v128 != v167);
                }
                ++v148;
                __asm { FMOV            V0.4S, #1.0 }
                float32x4_t v154 = vaddq_f32(v154, _Q0);
              }
              while (v148 != v127);
            }
LABEL_167:
            unsigned __int32 v705 = v134;
LABEL_398:
            CVPixelBufferUnlockBaseAddress(v705, 1uLL);
            float32x4_t v1128 = pixelBuffer;
            goto LABEL_399;
          }
          goto LABEL_400;
        }
LABEL_168:
        size_t v706 = CVPixelBufferGetHeight(a1);
        size_t v707 = CVPixelBufferGetWidth(a1);
        size_t v708 = CVPixelBufferGetHeight(pixelBuffer);
        size_t v709 = a1;
        unsigned int v710 = CVPixelBufferGetWidth(pixelBuffer);
        size_t v711 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        CVPixelBufferLockBaseAddress(v709, 1uLL);
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        memset(&v1537, 0, sizeof(v1537));
        size_t v712 = (CGRect *)MEMORY[0x263F001A8];
        PixelBufferUtils::asVImageBuffer(v709, *MEMORY[0x263F001A8], &v1537);
        memset(&buf, 0, sizeof(buf));
        PixelBufferUtils::asVImageBuffer(pixelBuffer, *v712, &buf);
        size_t v716 = v711 >> 2;
        vImagePixelCount v717 = (float *)buf.data;
        if (v716 * v708) {
          memset_pattern16(buf.data, &unk_247F24670, 4 * v716 * v708);
        }
        vImagePixelCount v718 = buf.height;
        float32x4_t v720 = (float32x4_t)a14;
        float32x4_t v719 = (float32x4_t)a15;
        float32x4_t v722 = a12;
        float32x4_t v721 = a13;
        float v724 = *(float *)&a18;
        float v723 = *(float *)&a11;
        float v725 = *(float *)&a16;
        if (v706)
        {
          unint64_t v726 = 0;
          v727.i32[1] = v1516;
          v728.i32[1] = HIDWORD(a9);
          float v729 = 1.0 / *(float *)&a9;
          float v730 = 1.0 / *(float *)&v1516;
          unint64_t v731 = v707 & 0xFFFFFFFFFFFFFFF0;
          float v732 = 0.5;
          *(float *)v713.i32 = 0.5 - *((float *)&a11 + 1);
          float32x4_t v733 = (float32x4_t)vdupq_lane_s32(v713, 0);
          *(float *)v713.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, a13, 2);
          *(float *)v727.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, *(float32x2_t *)a13.f32, 1);
          *(float *)v728.i32 = (float)(1.0 / *(float *)&v1516) * a13.f32[0];
          *(float *)&long long v714 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
          float v734 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
          *(float *)&long long v715 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
          unint64_t v735 = (char *)v1537.data;
          size_t v736 = v1537.rowBytes;
          float32x4_t v1374 = (float32x4_t)vdupq_lane_s32(v728, 0);
          float32x4_t v1350 = (float32x4_t)vdupq_lane_s32(v727, 0);
          float32x4_t v1357 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
          float32x4_t v1331 = (float32x4_t)vdupq_lane_s32(v713, 0);
          float32x4_t v1340 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
          float32x4_t v1323 = (float32x4_t)vdupq_laneq_s32(a14, 2);
          float32x4_t v737 = (float32x4_t)vdupq_laneq_s32(a15, 2);
          float32x4_t v738 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
          float32x4_t v739 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
          int32x4_t v740 = vdupq_n_s32(v710);
          int32x4_t v741 = vdupq_n_s32(v716);
          int32x4_t v1412 = v741;
          float32x4_t v1316 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
          float v742 = *((float *)&a17 + 1);
          float v1394 = 1.0 / *(float *)&a9;
          float v1384 = 1.0 / *(float *)&v1516;
          int32x4_t v1458 = vdupq_n_s32(LODWORD(buf.height) * (int)v716 - 4);
          float32x4_t v1468 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
          int32x4_t v1439 = vdupq_n_s32(v708);
          float32x4_t v1448 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
          float32x4_t v1422 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
          float32x4_t v1431 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
          do
          {
            float v743 = (uint16x4_t *)&v735[v726 * v736];
            unint64_t v744 = 0;
            if (v731)
            {
              float32x4_t v1496 = vmlaq_f32(v1357, v1374, v733);
              float32x4_t v1488 = vmlaq_f32(v1340, v1350, v733);
              float32x4_t v1403 = v733;
              float32x4_t v1478 = vmlaq_f32(v1323, v1331, v733);
              float32x4_t v745 = v1316;
              do
              {
                v746.i64[0] = 0x3E0000003E000000;
                v746.i64[1] = 0x3E0000003E000000;
                float32x4_t v747 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*v743)), v746);
                float32x4_t v748 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v743[1])), v746);
                float32x4_t v749 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v743[2])), v746);
                __asm { FMOV            V1.4S, #4.0 }
                float32x4_t v751 = vaddq_f32(v745, _Q1);
                v752.i64[0] = 0x4100000041000000;
                v752.i64[1] = 0x4100000041000000;
                float32x4_t v753 = vaddq_f32(v745, v752);
                __asm { FMOV            V1.4S, #12.0 }
                float32x4_t v755 = vaddq_f32(v745, _Q1);
                float32x4_t v756 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v743[3])), v746);
                float32x4_t v757 = v737;
                float32x4_t v758 = vmlaq_f32(v737, vmlaq_n_f32(v1478, v745, *(float *)&v714), v747);
                float32x4_t v759 = vmlaq_f32(v737, vmlaq_n_f32(v1478, v751, *(float *)&v714), v748);
                float32x4_t v760 = vmlaq_f32(v737, vmlaq_n_f32(v1478, v753, *(float *)&v714), v749);
                float32x4_t v761 = vmlaq_f32(v737, vmlaq_n_f32(v1478, v755, *(float *)&v714), v756);
                int8x16_t v1513 = vandq_s8((int8x16_t)vcgezq_f32(v758), (int8x16_t)vcgtzq_f32(v747));
                long long v762 = v715;
                float32x4_t v763 = vmlaq_f32(v738, vmlaq_n_f32(v1496, v745, *(float *)&v715), v747);
                int8x16_t v1504 = vandq_s8((int8x16_t)vcgezq_f32(v759), (int8x16_t)vcgtzq_f32(v748));
                float32x4_t v764 = vmlaq_f32(v739, vmlaq_n_f32(v1488, v745, v734), v747);
                float32x4_t v765 = vmlaq_f32(v738, vmlaq_n_f32(v1496, v751, *(float *)&v715), v748);
                float32x4_t v766 = vmlaq_f32(v739, vmlaq_n_f32(v1488, v751, v734), v748);
                int8x16_t v767 = vandq_s8((int8x16_t)vcgezq_f32(v760), (int8x16_t)vcgtzq_f32(v749));
                float32x4_t v768 = vmlaq_f32(v738, vmlaq_n_f32(v1496, v753, *(float *)&v715), v749);
                float32x4_t v769 = vmlaq_f32(v739, vmlaq_n_f32(v1488, v753, v734), v749);
                int8x16_t v770 = vandq_s8((int8x16_t)vcgezq_f32(v761), (int8x16_t)vcgtzq_f32(v756));
                float32x4_t v771 = vmlaq_f32(v738, vmlaq_n_f32(v1496, v755, *(float *)&v715), v756);
                int32x4_t v772 = v740;
                long long v773 = v714;
                float32x4_t v774 = vmlaq_f32(v739, vmlaq_n_f32(v1488, v755, v734), v756);
                float32x4_t v775 = vmlaq_f32(v1468, vdivq_f32(v1431, v758), v764);
                float32x4_t v776 = vmlaq_f32(v1448, vdivq_f32(v1422, v759), v765);
                float32x4_t v777 = vmlaq_f32(v1468, vdivq_f32(v1431, v759), v766);
                float32x4_t v778 = vmlaq_f32(v1448, vdivq_f32(v1422, v760), v768);
                float32x4_t v779 = vmlaq_f32(v1468, vdivq_f32(v1431, v760), v769);
                float32x4_t v780 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
                long long v781 = v762;
                float32x4_t v737 = v757;
                int8x16_t v782 = (int8x16_t)vmulq_f32(v758, v780);
                int8x16_t v1523 = (int8x16_t)vmulq_f32(v759, v780);
                int8x16_t v1532 = (int8x16_t)vmulq_f32(v760, v780);
                int8x16_t v783 = (int8x16_t)vmulq_f32(v761, v780);
                int32x4_t v784 = vcvtmq_s32_f32(vmlaq_f32(v1448, vdivq_f32(v1422, v758), v763));
                int32x4_t v785 = vcvtmq_s32_f32(v775);
                int32x4_t v786 = vcvtmq_s32_f32(v776);
                int32x4_t v787 = vcvtmq_s32_f32(v777);
                float32x4_t v788 = vmlaq_f32(v1448, vdivq_f32(v1422, v761), v771);
                float32x4_t v789 = vmlaq_f32(v1468, vdivq_f32(v1431, v761), v774);
                long long v714 = v773;
                int32x4_t v740 = v772;
                v775.i64[0] = -1;
                v775.i64[1] = -1;
                int8x16_t v790 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1439, v785), (int8x16_t)vcgtq_s32(v772, v784)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v785, (int8x16_t)v784), (int32x4_t)v775));
                int32x4_t v791 = vcvtmq_s32_f32(v778);
                int32x4_t v792 = vcvtmq_s32_f32(v779);
                int32x4_t v793 = vcvtmq_s32_f32(v788);
                int32x4_t v794 = vcvtmq_s32_f32(v789);
                int8x16_t v795 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1439, v787), (int8x16_t)vcgtq_s32(v772, v786)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v787, (int8x16_t)v786), (int32x4_t)v775)), v1504);
                int8x16_t v796 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1439, v792), (int8x16_t)vcgtq_s32(v772, v791)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v792, (int8x16_t)v791), (int32x4_t)v775)), v767);
                int8x16_t v797 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1439, v794), (int8x16_t)vcgtq_s32(v772, v793)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v794, (int8x16_t)v793), (int32x4_t)v775)), v770);
                int32x4_t v798 = vmlaq_s32(v784, v785, v1412);
                int8x16_t v799 = (int8x16_t)vdupq_n_s32(0x7F7FFFFFu);
                int8x16_t v800 = vbslq_s8(vandq_s8(v790, v1513), v782, v799);
                long long v715 = v781;
                int32x4_t v801 = vminq_s32(vmaxq_s32(v798, (int32x4_t)0), v1458);
                unsigned __int32 v802 = v801.u32[1];
                unsigned __int32 v803 = v801.u32[2];
                unsigned __int32 v804 = v801.u32[3];
                v717[v801.u32[0]] = fminf(*(float *)v800.i32, v717[v801.u32[0]]);
                int32x4_t v805 = vminq_s32(vmaxq_s32(vmlaq_s32(v786, v787, v1412), (int32x4_t)0), v1458);
                int32x4_t v806 = vminq_s32(vmaxq_s32(vmlaq_s32(v791, v792, v1412), (int32x4_t)0), v1458);
                int8x16_t v807 = vbslq_s8(v795, v1523, v799);
                int32x4_t v741 = (int32x4_t)vbslq_s8(v796, v1532, v799);
                v717[v805.u32[1]] = fminf(*(float *)&v807.i32[1], v717[v805.u32[1]]);
                v717[v806.u32[2]] = fminf(*(float *)&v741.i32[2], v717[v806.u32[2]]);
                int32x4_t v808 = vminq_s32(vmaxq_s32(vmlaq_s32(v793, v794, v1412), (int32x4_t)0), v1458);
                int8x16_t v809 = vbslq_s8(v797, v783, v799);
                v717[v808.u32[3]] = fminf(*(float *)&v809.i32[3], v717[v808.u32[3]]);
                v717[v802] = fminf(*(float *)&v800.i32[1], v717[v802]);
                v717[v805.u32[2]] = fminf(*(float *)&v807.i32[2], v717[v805.u32[2]]);
                v717[v806.u32[3]] = fminf(*(float *)&v741.i32[3], v717[v806.u32[3]]);
                v717[v808.u32[0]] = fminf(*(float *)v809.i32, v717[v808.u32[0]]);
                v717[v803] = fminf(*(float *)&v800.i32[2], v717[v803]);
                v717[v805.u32[3]] = fminf(*(float *)&v807.i32[3], v717[v805.u32[3]]);
                v717[v806.u32[0]] = fminf(*(float *)v741.i32, v717[v806.u32[0]]);
                v717[v808.u32[1]] = fminf(*(float *)&v809.i32[1], v717[v808.u32[1]]);
                v717[v804] = fminf(*(float *)&v800.i32[3], v717[v804]);
                v717[v805.u32[0]] = fminf(*(float *)v807.i32, v717[v805.u32[0]]);
                v741.i16[1] = v741.i16[3];
                v717[v806.u32[1]] = fminf(*(float *)&v741.i32[1], v717[v806.u32[1]]);
                v717[v808.u32[2]] = fminf(*(float *)&v809.i32[2], v717[v808.u32[2]]);
                __asm { FMOV            V0.4S, #16.0 }
                float32x4_t v745 = vaddq_f32(v745, _Q0);
                v743 += 4;
                v744 += 16;
              }
              while (v744 < v731);
              unint64_t v744 = (((v707 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
              float32x4_t v720 = (float32x4_t)a14;
              float32x4_t v719 = (float32x4_t)a15;
              float32x4_t v722 = a12;
              float32x4_t v721 = a13;
              float v724 = *(float *)&a18;
              float v723 = *(float *)&a11;
              float v725 = *(float *)&a16;
              float v729 = v1394;
              float v730 = v1384;
              float v732 = 0.5;
              float32x4_t v733 = v1403;
              float v742 = *((float *)&a17 + 1);
            }
            if (v744 < v707)
            {
              do
              {
                v741.i16[0] = v743->i16[0];
                float v811 = (float)v741.u32[0] * 0.125;
                _Q3 = vaddq_f32(v719, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v722, v729 * (float)((float)((float)((float)v744 + v732) - v723) * v811)), v721, v730 * (float)((float)((float)((float)v726 + v732) - *((float *)&a11 + 1)) * v811)), v720, v811));
                v741.i16[1] = _Q3.i16[5];
                if (_Q3.f32[2] >= 0.0 && v811 > 0.0)
                {
                  uint64_t v813 = (int)vmlas_n_f32(v724, v725 / _Q3.f32[2], _Q3.f32[0]);
                  if ((v813 & 0x80000000) == 0 && (__int16)v710 > (int)v813)
                  {
                    _S0 = v742 / _Q3.f32[2];
                    __asm { FMLA            S4, S0, V3.S[1] }
                    if (((int)_S4 & 0x80000000) == 0 && (__int16)v708 > (int)(unsigned __int16)(int)_S4)
                    {
                      *(float *)v741.i32 = _Q3.f32[2] * 0.001;
                      float32x4_t v816 = &v717[v716 * (unsigned __int16)(int)_S4];
                      float v817 = v816[v813];
                      if (v817 == 0.0 || v817 > *(float *)v741.i32) {
                        v816[v813] = *(float *)v741.i32;
                      }
                    }
                  }
                }
                ++v744;
                float v743 = (uint16x4_t *)((char *)v743 + 2);
              }
              while (v707 != v744);
            }
            ++v726;
            __asm { FMOV            V0.4S, #1.0 }
            float32x4_t v733 = vaddq_f32(v733, _Q0);
          }
          while (v726 != v706);
        }
        unsigned __int32 v705 = v709;
        if (v718)
        {
          uint64_t v820 = 0;
          long long v821 = *(_OWORD *)&buf.width;
          vImagePixelCount v822 = buf.width >> 4;
          long long v823 = (char *)buf.data;
          vImagePixelCount v824 = buf.height;
          if (buf.width >> 4 <= 1) {
            vImagePixelCount v822 = 1;
          }
          if (buf.height <= 1) {
            vImagePixelCount v824 = 1;
          }
          unint64_t v825 = buf.width & 0xFFFFFFF0;
          float32x4_t v826 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
          do
          {
            unint64_t v827 = (float32x4_t *)&v823[*((void *)&v821 + 1) * v820];
            vImagePixelCount v828 = v822;
            if ((unint64_t)v821 >= 0x10)
            {
              do
              {
                float32x4_t v829 = v827[2];
                float32x4_t v830 = v827[3];
                int8x16_t v831 = vbicq_s8((int8x16_t)v827[1], (int8x16_t)vceqq_f32(v827[1], v826));
                *(int8x16_t *)unint64_t v827 = vbicq_s8(*(int8x16_t *)v827, (int8x16_t)vceqq_f32(*v827, v826));
                v827[1] = (float32x4_t)v831;
                v827[2] = (float32x4_t)vbicq_s8((int8x16_t)v829, (int8x16_t)vceqq_f32(v829, v826));
                v827[3] = (float32x4_t)vbicq_s8((int8x16_t)v830, (int8x16_t)vceqq_f32(v830, v826));
                v827 += 4;
                --v828;
              }
              while (v828);
            }
            unint64_t v832 = v821 & 0xFFFFFFFF0000000FLL;
            if ((unint64_t)v821 > v825)
            {
              do
              {
                if (v827->f32[0] == 3.4028e38) {
                  v827->i32[0] = 0;
                }
                unint64_t v827 = (float32x4_t *)((char *)v827 + 4);
                --v832;
              }
              while (v832);
            }
            ++v820;
          }
          while (v820 != v824);
        }
        goto LABEL_398;
      }
      if (PixelFormatType != 1751410032)
      {
        if (PixelFormatType == 1751411059)
        {
          size_t v592 = CVPixelBufferGetHeight(a1);
          size_t v593 = CVPixelBufferGetWidth(a1);
          unsigned int v594 = CVPixelBufferGetHeight(pixelBuffer);
          float16x4_t v595 = a1;
          unsigned int v596 = CVPixelBufferGetWidth(pixelBuffer);
          size_t v597 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          CVPixelBufferLockBaseAddress(v595, 1uLL);
          CVPixelBufferLockBaseAddress(pixelBuffer, 0);
          memset(&v1537, 0, sizeof(v1537));
          size_t v598 = (CGRect *)MEMORY[0x263F001A8];
          int32x2_t v134 = v595;
          PixelBufferUtils::asVImageBuffer(v595, *MEMORY[0x263F001A8], &v1537);
          memset(&buf, 0, sizeof(buf));
          PixelBufferUtils::asVImageBuffer(pixelBuffer, *v598, &buf);
          unint64_t v600 = buf.data;
          int v599 = buf.height;
          bzero(buf.data, buf.height * buf.rowBytes);
          float32x4_t v604 = (float32x4_t)a14;
          float32x4_t v603 = (float32x4_t)a15;
          float32x4_t v606 = a12;
          float32x4_t v605 = a13;
          float v608 = *(float *)&a18;
          float v607 = *(float *)&a11;
          float v609 = *(float *)&a16;
          if (v592)
          {
            unint64_t v610 = 0;
            float v611 = 1.0 / *(float *)&a9;
            v612.i32[1] = v1516;
            float v613 = 1.0 / *(float *)&v1516;
            unint64_t v614 = v593 & 0xFFFFFFFFFFFFFFF0;
            float v615 = 0.5;
            *(float *)v601.i32 = 0.5 - *((float *)&a11 + 1);
            float32x4_t v616 = (float32x4_t)vdupq_lane_s32(v601, 0);
            *(float *)v601.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, a13, 2);
            *(float *)v612.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, *(float32x2_t *)a13.f32, 1);
            *(float *)v602.i32 = (float)(1.0 / *(float *)&v1516) * a13.f32[0];
            float v617 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
            float v618 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
            float v619 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
            float32x4_t v620 = (char *)v1537.data;
            size_t v621 = v1537.rowBytes;
            float32x4_t v1393 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
            float32x4_t v1402 = (float32x4_t)vdupq_lane_s32(v602, 0);
            int32x4_t v622 = vdupq_lane_s32(v612, 0);
            float32x4_t v1373 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
            float32x4_t v1383 = (float32x4_t)v622;
            float32x4_t v1349 = (float32x4_t)vdupq_laneq_s32(a14, 2);
            float32x4_t v1356 = (float32x4_t)vdupq_lane_s32(v601, 0);
            float32x4_t v623 = (float32x4_t)vdupq_laneq_s32(a15, 2);
            float32x4_t v624 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
            float32x4_t v625 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
            int32x4_t v626 = vdupq_n_s32(v594);
            float32x4_t v1339 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
            float32x4_t v627 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
            float v628 = *((float *)&a17 + 1);
            float v1421 = 1.0 / *(float *)&a9;
            float v1411 = 1.0 / *(float *)&v1516;
            float v1487 = v617;
            int32x4_t v1495 = vdupq_n_s32(v599 * (v597 >> 1) - 2);
            float32x4_t v1467 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
            float32x4_t v1477 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
            int32x4_t v1447 = vdupq_n_s32(v596);
            float32x4_t v1457 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
            int32x4_t v1438 = vdupq_n_s32(v597 >> 1);
            do
            {
              unint64_t v629 = (uint16x4_t *)&v620[v610 * v621];
              unint64_t v630 = 0;
              if (v614)
              {
                float32x4_t v1522 = vmlaq_f32(v1393, v1402, v616);
                float32x4_t v1512 = vmlaq_f32(v1373, v1383, v616);
                float32x4_t v1503 = vmlaq_f32(v1349, v1356, v616);
                float32x4_t v631 = v1339;
                do
                {
                  v632.i64[0] = 0x3E0000003E000000;
                  v632.i64[1] = 0x3E0000003E000000;
                  float32x4_t v633 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*v629)), v632);
                  float32x4_t v634 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v629[1])), v632);
                  __asm { FMOV            V2.4S, #4.0 }
                  int32x4_t v636 = v626;
                  float32x4_t v637 = vaddq_f32(v631, _Q2);
                  float32x4_t v638 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v629[2])), v632);
                  v639.i64[0] = 0x4100000041000000;
                  v639.i64[1] = 0x4100000041000000;
                  float32x4_t v640 = vaddq_f32(v631, v639);
                  __asm { FMOV            V1.4S, #12.0 }
                  float32x4_t v642 = vaddq_f32(v631, _Q1);
                  float32x4_t v643 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v629[3])), v632);
                  float32x4_t v644 = vmlaq_f32(v623, vmlaq_n_f32(v1503, v631, v617), v633);
                  float32x4_t v645 = vmlaq_f32(v623, vmlaq_n_f32(v1503, v637, v617), v634);
                  float32x4_t v646 = vmlaq_f32(v623, vmlaq_n_f32(v1503, v640, v617), v638);
                  float32x4_t v647 = vmlaq_f32(v623, vmlaq_n_f32(v1503, v642, v617), v643);
                  int8x16_t v1531 = vandq_s8((int8x16_t)vcgezq_f32(v644), (int8x16_t)vcgtzq_f32(v633));
                  int8x16_t v648 = vandq_s8((int8x16_t)vcgezq_f32(v645), (int8x16_t)vcgtzq_f32(v634));
                  float32x4_t v649 = vmlaq_f32(v624, vmlaq_n_f32(v1522, v637, v619), v634);
                  float32x4_t v650 = vmlaq_f32(v625, vmlaq_n_f32(v1512, v637, v618), v634);
                  int8x16_t v651 = vandq_s8((int8x16_t)vcgezq_f32(v646), (int8x16_t)vcgtzq_f32(v638));
                  float32x4_t v652 = vmlaq_f32(v624, vmlaq_n_f32(v1522, v640, v619), v638);
                  float32x4_t v653 = vmlaq_f32(v625, vmlaq_n_f32(v1512, v640, v618), v638);
                  int8x16_t v654 = vandq_s8((int8x16_t)vcgezq_f32(v647), (int8x16_t)vcgtzq_f32(v643));
                  float32x4_t v655 = vmlaq_f32(v624, vmlaq_n_f32(v1522, v642, v619), v643);
                  float32x4_t v656 = vmlaq_f32(v625, vmlaq_n_f32(v1512, v642, v618), v643);
                  float32x4_t v657 = vmlaq_f32(v1457, vdivq_f32(v627, v644), vmlaq_f32(v624, vmlaq_n_f32(v1522, v631, v619), v633));
                  float32x4_t v658 = vdivq_f32(v627, v646);
                  float32x4_t v659 = vmlaq_f32(v1477, vdivq_f32(v1467, v644), vmlaq_f32(v625, vmlaq_n_f32(v1512, v631, v618), v633));
                  float32x4_t v660 = vdivq_f32(v1467, v646);
                  float32x4_t v661 = vmlaq_f32(v1457, vdivq_f32(v627, v645), v649);
                  float32x4_t v662 = vdivq_f32(v627, v647);
                  float32x4_t v663 = vmlaq_f32(v1477, vdivq_f32(v1467, v645), v650);
                  float32x4_t v664 = vdivq_f32(v1467, v647);
                  float32x4_t v665 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                  int8x16_t v666 = (int8x16_t)vdivq_f32(v665, v644);
                  int8x16_t v667 = (int8x16_t)vdivq_f32(v665, v645);
                  int8x16_t v668 = (int8x16_t)vdivq_f32(v665, v646);
                  int8x16_t v669 = (int8x16_t)vdivq_f32(v665, v647);
                  int32x4_t v626 = v636;
                  int32x4_t v670 = vcvtmq_s32_f32(v657);
                  int32x4_t v671 = vcvtmq_s32_f32(v659);
                  int32x4_t v672 = vcvtmq_s32_f32(v661);
                  int32x4_t v673 = vcvtmq_s32_f32(v663);
                  int32x4_t v674 = vcvtmq_s32_f32(vmlaq_f32(v1457, v658, v652));
                  int32x4_t v675 = vcvtmq_s32_f32(vmlaq_f32(v1477, v660, v653));
                  int32x4_t v676 = vcvtmq_s32_f32(vmlaq_f32(v1457, v662, v655));
                  int32x4_t v677 = vcvtmq_s32_f32(vmlaq_f32(v1477, v664, v656));
                  v632.i64[0] = -1;
                  v632.i64[1] = -1;
                  int8x16_t v678 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v626, v671), (int8x16_t)vcgtq_s32(v1447, v670)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v671, (int8x16_t)v670), (int32x4_t)v632));
                  int8x16_t v679 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v626, v675), (int8x16_t)vcgtq_s32(v1447, v674)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v675, (int8x16_t)v674), (int32x4_t)v632));
                  int8x16_t v680 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v626, v677), (int8x16_t)vcgtq_s32(v1447, v676)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v677, (int8x16_t)v676), (int32x4_t)v632));
                  int32x4_t v681 = vmlaq_s32(v670, v671, v1438);
                  int32x4_t v682 = vmlaq_s32(v674, v675, v1438);
                  int32x4_t v622 = vmlaq_s32(v676, v677, v1438);
                  float32x4_t v683 = (float32x4_t)vandq_s8(vandq_s8(v666, v1531), v678);
                  float32x4_t v684 = (float32x4_t)vandq_s8(vandq_s8(v667, v648), vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v626, v673), (int8x16_t)vcgtq_s32(v1447, v672)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v673, (int8x16_t)v672), (int32x4_t)v632)));
                  float v617 = v1487;
                  float32x4_t v685 = (float32x4_t)vandq_s8(vandq_s8(v668, v651), v679);
                  int8x16_t v686 = vandq_s8(v669, v654);
                  int32x4_t v687 = vminq_s32(vmaxq_s32(v681, (int32x4_t)0), v1495);
                  int32x4_t v688 = vminq_s32(vmaxq_s32(vmlaq_s32(v672, v673, v1438), (int32x4_t)0), v1495);
                  int32x4_t v689 = vminq_s32(vmaxq_s32(v682, (int32x4_t)0), v1495);
                  int32x4_t v690 = vminq_s32(vmaxq_s32(v622, (int32x4_t)0), v1495);
                  float32x4_t v691 = (float32x4_t)vandq_s8(v686, v680);
                  unsigned __int32 v692 = v687.u32[1];
                  unsigned __int32 v693 = v687.i32[0];
                  v686.i16[0] = v600[v687.u32[0]];
                  *(float16x4_t *)v687.i8 = vcvt_f16_f32(v683);
                  *(short float *)&v600[v693] = fmaxl(*(short float *)v687.i16, *(short float *)v686.i16);
                  *(float16x4_t *)v686.i8 = vcvt_f16_f32(v684);
                  *(short float *)&v600[v688.u32[1]] = fmaxl(*(short float *)&v686.i16[1], *(short float *)&v600[v688.u32[1]]);
                  *(float16x4_t *)v622.i8 = vcvt_f16_f32(v685);
                  *(short float *)&v600[v689.u32[2]] = fmaxl(*(short float *)&v622.i16[2], *(short float *)&v600[v689.u32[2]]);
                  *(float16x4_t *)v684.f32 = vcvt_f16_f32(v691);
                  *(short float *)&v600[v690.u32[3]] = fmaxl(*(short float *)&v684.i16[3], *(short float *)&v600[v690.u32[3]]);
                  *(short float *)&v600[v692] = fmaxl(*(short float *)&v687.i16[1], *(short float *)&v600[v692]);
                  *(short float *)&v600[v688.u32[2]] = fmaxl(*(short float *)&v686.i16[2], *(short float *)&v600[v688.u32[2]]);
                  *(short float *)&v600[v689.u32[3]] = fmaxl(*(short float *)&v622.i16[3], *(short float *)&v600[v689.u32[3]]);
                  *(short float *)&v600[v690.u32[0]] = fmaxl(*(short float *)v684.i16, *(short float *)&v600[v690.u32[0]]);
                  *(short float *)&v600[v687.u32[2]] = fmaxl(*(short float *)&v687.i16[2], *(short float *)&v600[v687.u32[2]]);
                  *(short float *)&v600[v688.u32[3]] = fmaxl(*(short float *)&v686.i16[3], *(short float *)&v600[v688.u32[3]]);
                  *(short float *)&v600[v689.u32[0]] = fmaxl(*(short float *)v622.i16, *(short float *)&v600[v689.u32[0]]);
                  *(short float *)&v600[v690.u32[1]] = fmaxl(*(short float *)&v684.i16[1], *(short float *)&v600[v690.u32[1]]);
                  *(short float *)&v600[v687.u32[3]] = fmaxl(*(short float *)&v687.i16[3], *(short float *)&v600[v687.u32[3]]);
                  *(short float *)&v600[v688.u32[0]] = fmaxl(*(short float *)v686.i16, *(short float *)&v600[v688.u32[0]]);
                  *(short float *)&v600[v689.u32[1]] = fmaxl(*(short float *)&v622.i16[1], *(short float *)&v600[v689.u32[1]]);
                  *(short float *)&v600[v690.u32[2]] = fmaxl(*(short float *)&v684.i16[2], *(short float *)&v600[v690.u32[2]]);
                  __asm { FMOV            V0.4S, #16.0 }
                  float32x4_t v631 = vaddq_f32(v631, _Q0);
                  v629 += 4;
                  v630 += 16;
                }
                while (v630 < v614);
                unint64_t v630 = (((v593 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
                float32x4_t v604 = (float32x4_t)a14;
                float32x4_t v603 = (float32x4_t)a15;
                float32x4_t v606 = a12;
                float32x4_t v605 = a13;
                float v608 = *(float *)&a18;
                float v607 = *(float *)&a11;
                float v609 = *(float *)&a16;
                float v611 = v1421;
                float v613 = v1411;
                float v615 = 0.5;
                float v628 = *((float *)&a17 + 1);
              }
              if (v630 < v593)
              {
                do
                {
                  v622.i16[0] = v629->i16[0];
                  float v695 = (float)v622.u32[0] * 0.125;
                  _Q3 = vaddq_f32(v603, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v606, v611 * (float)((float)((float)((float)v630 + v615) - v607) * v695)), v605, v613 * (float)((float)((float)((float)v610 + v615) - *((float *)&a11 + 1)) * v695)), v604, v695));
                  v622.i16[1] = _Q3.i16[5];
                  if (_Q3.f32[2] >= 0.0 && v695 > 0.0)
                  {
                    uint64_t v697 = (int)vmlas_n_f32(v608, v609 / _Q3.f32[2], _Q3.f32[0]);
                    if ((v697 & 0x80000000) == 0 && (__int16)v596 > (int)v697)
                    {
                      _S0 = v628 / _Q3.f32[2];
                      __asm { FMLA            S4, S0, V3.S[1] }
                      if (((int)_S4 & 0x80000000) == 0 && (__int16)v594 > (int)(unsigned __int16)(int)_S4)
                      {
                        _S0 = 1000.0 / _Q3.f32[2];
                        __asm
                        {
                          FCVT            H2, S0
                          FCMP            H0, #0
                        }
                        if (_ZF || _H0 < _H2) {
                          *(short float *)&v600[(v597 >> 1) * (unsigned __int16)(int)_S4 + v697] = _H2;
                        }
                      }
                    }
                  }
                  ++v630;
                  unint64_t v629 = (uint16x4_t *)((char *)v629 + 2);
                }
                while (v593 != v630);
              }
              ++v610;
              __asm { FMOV            V0.4S, #1.0 }
              float32x4_t v616 = vaddq_f32(v616, _Q0);
            }
            while (v610 != v592);
          }
          goto LABEL_167;
        }
LABEL_400:
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          goto LABEL_402;
        }
        return -22950;
      }
    }
    size_t v833 = CVPixelBufferGetHeight(a1);
    size_t v834 = CVPixelBufferGetWidth(a1);
    size_t v835 = CVPixelBufferGetHeight(pixelBuffer);
    size_t v836 = a1;
    unsigned int v837 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v838 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(v836, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    memset(&v1537, 0, sizeof(v1537));
    size_t v839 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(v836, *MEMORY[0x263F001A8], &v1537);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v839, &buf);
    size_t v843 = v838 >> 1;
    long long v844 = (short float *)buf.data;
    if (v843 * v835) {
      memset_pattern16(buf.data, &unk_247F24680, 2 * v843 * v835);
    }
    vImagePixelCount v845 = buf.height;
    float32x4_t v846 = (float32x4_t)a14;
    float32x4_t v847 = (float32x4_t)a15;
    float32x4_t v849 = a12;
    float32x4_t v848 = a13;
    float v851 = *(float *)&a18;
    float v850 = *(float *)&a11;
    float v852 = *(float *)&a16;
    if (v833)
    {
      unint64_t v853 = 0;
      float v854 = 1.0 / *(float *)&a9;
      float v855 = 1.0 / *(float *)&v1516;
      unint64_t v856 = v834 & 0xFFFFFFFFFFFFFFF0;
      float v857 = 0.5;
      *(float *)v840.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v858 = (float32x4_t)vdupq_lane_s32(v840, 0);
      *(float *)v840.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, a13, 2);
      *(float *)v841.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, *(float32x2_t *)a13.f32, 1);
      *(float *)v842.i32 = (float)(1.0 / *(float *)&v1516) * a13.f32[0];
      *(float *)&long long v18 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      float v859 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      float v860 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float v861 = (char *)v1537.data;
      size_t v862 = v1537.rowBytes;
      float32x4_t v1395 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1404 = (float32x4_t)vdupq_lane_s32(v842, 0);
      float32x4_t v1375 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1385 = (float32x4_t)vdupq_lane_s32(v841, 0);
      _Q1 = vdupq_lane_s32(v840, 0);
      float32x4_t v1351 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      *(int32x4_t *)float32x4_t v1358 = _Q1;
      float32x4_t v864 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v865 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v866 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      float32x4_t v1341 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      float32x4_t v867 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      float v868 = *((float *)&a17 + 1);
      v869.i64[0] = 0x3E0000003E000000;
      v869.i64[1] = 0x3E0000003E000000;
      float v1423 = 1.0 / *(float *)&a9;
      float v1413 = 1.0 / *(float *)&v1516;
      int32x4_t v1514 = vdupq_n_s32(v837);
      int32x4_t v1524 = vdupq_n_s32(LODWORD(buf.height) * (int)v843 - 2);
      int32x4_t v1497 = vdupq_n_s32(v835);
      float v1505 = v860;
      float32x4_t v1479 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      float v1489 = v859;
      int32x4_t v1459 = vdupq_n_s32(v843);
      float32x4_t v1469 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      float32x4_t v1449 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      do
      {
        float32x4_t v870 = (uint16x4_t *)&v861[v853 * v862];
        unint64_t v871 = 0;
        if (v856)
        {
          float32x4_t v1533 = vmlaq_f32(v1395, v1404, v858);
          float32x4_t v872 = vmlaq_f32(v1375, v1385, v858);
          float32x4_t v873 = vmlaq_f32(v1351, *(float32x4_t *)v1358, v858);
          float32x4_t v874 = v1341;
          do
          {
            float32x4_t v875 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*v870)), v869);
            float32x4_t v876 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v870[1])), v869);
            float32x4_t v877 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v870[2])), v869);
            __asm { FMOV            V16.4S, #4.0 }
            float32x4_t v879 = vaddq_f32(v874, _Q16);
            v880.i64[0] = 0x4100000041000000;
            v880.i64[1] = 0x4100000041000000;
            float32x4_t v881 = vaddq_f32(v874, v880);
            float32x4_t v882 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v870[3])), v869);
            __asm { FMOV            V3.4S, #12.0 }
            float32x4_t v884 = vaddq_f32(v874, _Q3);
            float32x4_t v885 = vmlaq_f32(v864, vmlaq_n_f32(v873, v874, *(float *)&v18), v875);
            float32x4_t v886 = vmlaq_f32(v864, vmlaq_n_f32(v873, v879, *(float *)&v18), v876);
            float32x4_t v887 = vmlaq_f32(v864, vmlaq_n_f32(v873, v881, *(float *)&v18), v877);
            float32x4_t v888 = vmlaq_f32(v864, vmlaq_n_f32(v873, v884, *(float *)&v18), v882);
            float32x4_t v889 = v864;
            long long v890 = v18;
            int8x16_t v891 = vandq_s8((int8x16_t)vcgezq_f32(v885), (int8x16_t)vcgtzq_f32(v875));
            int8x16_t v892 = vandq_s8((int8x16_t)vcgezq_f32(v886), (int8x16_t)vcgtzq_f32(v876));
            int8x16_t v893 = vandq_s8((int8x16_t)vcgezq_f32(v887), (int8x16_t)vcgtzq_f32(v877));
            float32x4_t v894 = vmlaq_f32(v865, vmlaq_n_f32(v1533, v884, v1505), v882);
            int8x16_t v895 = vandq_s8((int8x16_t)vcgezq_f32(v888), (int8x16_t)vcgtzq_f32(v882));
            float32x4_t v896 = vmlaq_f32(v866, vmlaq_n_f32(v872, v884, v1489), v882);
            float32x4_t v897 = vmlaq_f32(v1469, vdivq_f32(v867, v885), vmlaq_f32(v865, vmlaq_n_f32(v1533, v874, v1505), v875));
            float32x4_t v898 = vmlaq_f32(v1449, vdivq_f32(v1479, v885), vmlaq_f32(v866, vmlaq_n_f32(v872, v874, v1489), v875));
            float32x4_t v899 = vmlaq_f32(v1469, vdivq_f32(v867, v886), vmlaq_f32(v865, vmlaq_n_f32(v1533, v879, v1505), v876));
            float32x4_t v900 = vdivq_f32(v1479, v887);
            float32x4_t v901 = vmlaq_f32(v1449, vdivq_f32(v1479, v886), vmlaq_f32(v866, vmlaq_n_f32(v872, v879, v1489), v876));
            float32x4_t v902 = vmlaq_f32(v1469, vdivq_f32(v867, v887), vmlaq_f32(v865, vmlaq_n_f32(v1533, v881, v1505), v877));
            float32x4_t v903 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
            int8x16_t v904 = (int8x16_t)vmulq_f32(v885, v903);
            int8x16_t v905 = (int8x16_t)vmulq_f32(v886, v903);
            int8x16_t v906 = (int8x16_t)vmulq_f32(v887, v903);
            int8x16_t v907 = (int8x16_t)vmulq_f32(v888, v903);
            int32x4_t v908 = vcvtmq_s32_f32(v897);
            int32x4_t v909 = vcvtmq_s32_f32(v898);
            _Q1 = vcvtmq_s32_f32(v899);
            int32x4_t v910 = vcvtmq_s32_f32(v901);
            int32x4_t v911 = vcvtmq_s32_f32(v902);
            int32x4_t v912 = vcvtmq_s32_f32(vmlaq_f32(v1449, v900, vmlaq_f32(v866, vmlaq_n_f32(v872, v881, v1489), v877)));
            v913.i64[0] = -1;
            v913.i64[1] = -1;
            int32x4_t v914 = vcvtmq_s32_f32(vmlaq_f32(v1469, vdivq_f32(v867, v888), v894));
            int32x4_t v915 = vcvtmq_s32_f32(vmlaq_f32(v1449, vdivq_f32(v1479, v888), v896));
            int8x16_t v916 = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1497, v910), (int8x16_t)vcgtq_s32(v1514, _Q1)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v910, (int8x16_t)_Q1), v913)), v892);
            int8x16_t v917 = (int8x16_t)vdupq_n_s32(0x477FE000u);
            float32x4_t v918 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1497, v909), (int8x16_t)vcgtq_s32(v1514, v908)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v909, (int8x16_t)v908), v913)), v891), v904, v917);
            float32x4_t v919 = (float32x4_t)vbslq_s8(v916, v905, v917);
            float32x4_t v920 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1497, v912), (int8x16_t)vcgtq_s32(v1514, v911)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v912, (int8x16_t)v911), v913)), v893), v906, v917);
            float32x4_t v921 = (float32x4_t)vbslq_s8(vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1497, v915), (int8x16_t)vcgtq_s32(v1514, v914)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v915, (int8x16_t)v914), v913)), v895), v907, v917);
            int32x4_t v922 = vminq_s32(vmaxq_s32(vmlaq_s32(v908, v909, v1459), (int32x4_t)0), v1524);
            int32x4_t v923 = vminq_s32(vmaxq_s32(vmlaq_s32(_Q1, v910, v1459), (int32x4_t)0), v1524);
            int32x4_t v924 = vmlaq_s32(v914, v915, v1459);
            long long v18 = v890;
            float32x4_t v864 = v889;
            int32x4_t v925 = vminq_s32(vmaxq_s32(vmlaq_s32(v911, v912, v1459), (int32x4_t)0), v1524);
            int32x4_t v926 = vmaxq_s32(v924, (int32x4_t)0);
            v869.i64[0] = 0x3E0000003E000000;
            v869.i64[1] = 0x3E0000003E000000;
            int32x4_t v927 = vminq_s32(v926, v1524);
            *(float16x4_t *)_Q1.i8 = vcvt_f16_f32(v918);
            v844[v922.u32[0]] = fminl(*(short float *)_Q1.i16, v844[v922.u32[0]]);
            *(float16x4_t *)v926.i8 = vcvt_f16_f32(v919);
            v844[v923.u32[1]] = fminl(*(short float *)&v926.i16[1], v844[v923.u32[1]]);
            *(float16x4_t *)v911.i8 = vcvt_f16_f32(v920);
            v844[v925.u32[2]] = fminl(*(short float *)&v911.i16[2], v844[v925.u32[2]]);
            *(float16x4_t *)v918.f32 = vcvt_f16_f32(v921);
            v844[v927.u32[3]] = fminl(*(short float *)&v918.i16[3], v844[v927.u32[3]]);
            v844[v922.u32[1]] = fminl(*(short float *)&_Q1.i16[1], v844[v922.u32[1]]);
            v844[v923.u32[2]] = fminl(*(short float *)&v926.i16[2], v844[v923.u32[2]]);
            v844[v925.u32[3]] = fminl(*(short float *)&v911.i16[3], v844[v925.u32[3]]);
            v844[v927.u32[0]] = fminl(*(short float *)v918.i16, v844[v927.u32[0]]);
            v844[v922.u32[2]] = fminl(*(short float *)&_Q1.i16[2], v844[v922.u32[2]]);
            v844[v923.u32[3]] = fminl(*(short float *)&v926.i16[3], v844[v923.u32[3]]);
            v844[v925.u32[0]] = fminl(*(short float *)v911.i16, v844[v925.u32[0]]);
            v844[v927.u32[1]] = fminl(*(short float *)&v918.i16[1], v844[v927.u32[1]]);
            v844[v922.u32[3]] = fminl(*(short float *)&_Q1.i16[3], v844[v922.u32[3]]);
            v844[v923.u32[0]] = fminl(*(short float *)v926.i16, v844[v923.u32[0]]);
            v844[v925.u32[1]] = fminl(*(short float *)&v911.i16[1], v844[v925.u32[1]]);
            v844[v927.u32[2]] = fminl(*(short float *)&v918.i16[2], v844[v927.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v874 = vaddq_f32(v874, _Q0);
            v870 += 4;
            v871 += 16;
          }
          while (v871 < v856);
          unint64_t v871 = (((v834 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v846 = (float32x4_t)a14;
          float32x4_t v847 = (float32x4_t)a15;
          float32x4_t v849 = a12;
          float32x4_t v848 = a13;
          float v851 = *(float *)&a18;
          float v850 = *(float *)&a11;
          float v852 = *(float *)&a16;
          float v854 = v1423;
          float v855 = v1413;
          float v857 = 0.5;
          float v868 = *((float *)&a17 + 1);
        }
        if (v871 < v834)
        {
          do
          {
            _Q1.i16[0] = v870->i16[0];
            float v929 = (float)_Q1.u32[0] * 0.125;
            *(float *)_Q1.i32 = v855 * (float)((float)((float)((float)v853 + v857) - *((float *)&a11 + 1)) * v929);
            _Q16 = vaddq_f32(v847, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v849, v854 * (float)((float)((float)((float)v871 + v857) - v850) * v929)), v848, *(float *)_Q1.i32), v846, v929));
            if (_Q16.f32[2] >= 0.0 && v929 > 0.0)
            {
              *(float *)_Q1.i32 = vmlas_n_f32(v851, v852 / _Q16.f32[2], _Q16.f32[0]);
              uint64_t v931 = (int)*(float *)_Q1.i32;
              if ((v931 & 0x80000000) == 0 && (__int16)v837 > (int)v931)
              {
                _S0 = v868 / _Q16.f32[2];
                __asm { FMLA            S1, S0, V16.S[1] }
                if (((int)*(float *)_Q1.i32 & 0x80000000) == 0
                  && (__int16)v835 > (int)(unsigned __int16)(int)*(float *)_Q1.i32)
                {
                  _S0 = _Q16.f32[2] * 0.001;
                  __asm
                  {
                    FCVT            H4, S0
                    FCMP            H0, #0
                  }
                  if (_ZF || _H0 > _H4) {
                    v844[v843 * (unsigned __int16)(int)*(float *)_Q1.i32 + v931] = _H4;
                  }
                }
              }
            }
            ++v871;
            float32x4_t v870 = (uint16x4_t *)((char *)v870 + 2);
          }
          while (v834 != v871);
        }
        ++v853;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v858 = vaddq_f32(v858, _Q0);
        v869.i64[0] = 0x3E0000003E000000;
        v869.i64[1] = 0x3E0000003E000000;
      }
      while (v853 != v833);
    }
    unsigned __int32 v705 = v836;
    if (v845)
    {
      uint64_t v938 = 0;
      long long v939 = *(_OWORD *)&buf.width;
      vImagePixelCount v940 = buf.width >> 4;
      int8x8_t v941 = (char *)buf.data;
      vImagePixelCount v942 = buf.height;
      if (buf.width >> 4 <= 1) {
        vImagePixelCount v940 = 1;
      }
      if (buf.height <= 1) {
        vImagePixelCount v942 = 1;
      }
      unint64_t v943 = buf.width & 0xFFFFFFF0;
      do
      {
        uint64_t v944 = (int8x8_t *)&v941[*((void *)&v939 + 1) * v938];
        vImagePixelCount v945 = v940;
        if ((unint64_t)v939 >= 0x10)
        {
          do
          {
            float16x4_t v946 = (float16x4_t)v944[2];
            float16x4_t v947 = (float16x4_t)v944[3];
            int8x8_t v948 = vbic_s8(v944[1], (int8x8_t)vceq_f16((float16x4_t)v944[1], (float16x4_t)0x8400840084008400));
            *uint64_t v944 = vbic_s8(*v944, (int8x8_t)vceq_f16((float16x4_t)*v944, (float16x4_t)0x8400840084008400));
            v944[1] = v948;
            v944[2] = vbic_s8((int8x8_t)v946, (int8x8_t)vceq_f16(v946, (float16x4_t)0x8400840084008400));
            v944[3] = vbic_s8((int8x8_t)v947, (int8x8_t)vceq_f16(v947, (float16x4_t)0x8400840084008400));
            v944 += 4;
            --v945;
          }
          while (v945);
        }
        unint64_t v949 = v939 & 0xFFFFFFFF0000000FLL;
        if ((unint64_t)v939 > v943)
        {
          do
          {
            if (*(short float *)v944->i16 == COERCE_SHORT_FLOAT(31743)) {
              v944->i16[0] = 0;
            }
            uint64_t v944 = (int8x8_t *)((char *)v944 + 2);
            --v949;
          }
          while (v949);
        }
        ++v938;
      }
      while (v938 != v942);
    }
    goto LABEL_398;
  }
  if (PixelFormatType <= 1717855599)
  {
    if (PixelFormatType == 825437747)
    {
      size_t v1332 = CVPixelBufferGetHeight(a1);
      size_t v950 = CVPixelBufferGetWidth(a1);
      size_t v951 = CVPixelBufferGetHeight(pixelBuffer);
      unsigned int v952 = CVPixelBufferGetWidth(pixelBuffer);
      size_t v953 = CVPixelBufferGetBytesPerRow(pixelBuffer);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      CVPixelBufferLockBaseAddress(v1354, 0);
      memset(&v1537, 0, sizeof(v1537));
      int8x8_t v954 = (CGRect *)MEMORY[0x263F001A8];
      CVPixelBufferRef v1280 = a1;
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v1537);
      memset(&buf, 0, sizeof(buf));
      PixelBufferUtils::asVImageBuffer(pixelBuffer, *v954, &buf);
      PixelBufferUtils::asVImageBuffer(v1354, *v954, &v1536);
      size_t v958 = v953 >> 1;
      float32x4_t v1324 = (char *)v1536.data;
      size_t v1317 = v1536.rowBytes;
      size_t v959 = (__int16 *)buf.data;
      size_t v960 = (v953 >> 1) * v951;
      if (v960) {
        memset_pattern16(buf.data, &unk_247F24690, 2 * v960);
      }
      vImagePixelCount v961 = buf.height;
      if (v1332)
      {
        unint64_t v962 = 0;
        v963.i32[1] = v1516;
        v964.i32[1] = HIDWORD(a9);
        float v965 = *(float *)&a11;
        float v966 = 1.0 / *(float *)&a9;
        float v967 = 1.0 / *(float *)&v1516;
        unint64_t v968 = v950 & 0xFFFFFFFFFFFFFFF0;
        float v969 = 0.5;
        *(float *)v955.i32 = 0.5 - *((float *)&a11 + 1);
        float32x4_t v970 = (float32x4_t)vdupq_lane_s32(v955, 0);
        float32x4_t v972 = a13;
        float32x4_t v971 = (float32x4_t)a14;
        *(float *)v955.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, a13, 2);
        *(float *)v963.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, *(float32x2_t *)a13.f32, 1);
        *(float *)v964.i32 = (float)(1.0 / *(float *)&v1516) * a13.f32[0];
        float32x4_t v1294 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
        float32x4_t v1296 = (float32x4_t)vdupq_lane_s32(v964, 0);
        int32x4_t v973 = vdupq_lane_s32(v963, 0);
        float32x4_t v1290 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
        float32x4_t v1292 = (float32x4_t)v973;
        float32x4_t v1287 = (float32x4_t)vdupq_laneq_s32(a14, 2);
        float32x4_t v1289 = (float32x4_t)vdupq_lane_s32(v955, 0);
        float32x4_t v974 = a12;
        *(float *)&long long v956 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
        *(float *)&long long v957 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
        float v975 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
        float32x4_t v976 = (float32x4_t)a15;
        float32x2_t v977 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
        float32x4_t v978 = (float32x4_t)vdupq_laneq_s32(a15, 2);
        float32x4_t v979 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
        float32x4_t v980 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
        float32x4_t v1286 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
        int v981 = (__int16)v952;
        int v982 = (__int16)v951;
        unint64_t v1282 = (((v950 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
        float32x4_t v983 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
        float32x2_t v984 = (float32x2_t)a18;
        float32x4_t v1311 = (char *)v1537.data;
        size_t v1307 = v1537.rowBytes;
        float v985 = 0.125;
        v986.i64[0] = 0x3E0000003E000000;
        v986.i64[1] = 0x3E0000003E000000;
        int32x4_t v1376 = vdupq_n_s32(v951);
        size_t v1304 = v950;
        float v1300 = 1.0 / *(float *)&a9;
        float v1298 = 1.0 / *(float *)&v1516;
        int v1283 = (__int16)v951;
        int v1284 = (__int16)v952;
        float32x4_t v1432 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
        int32x4_t v1440 = vdupq_n_s32(LODWORD(buf.height) * (int)v958 - 2);
        float32x4_t v1414 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
        int32x4_t v1424 = vdupq_n_s32(v958);
        float32x4_t v1396 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
        float32x4_t v1405 = v979;
        int32x4_t v1386 = vdupq_n_s32(v952);
        do
        {
          int v987 = (uint16x4_t *)&v1311[v1307 * v962];
          float32x2_t v988 = (__int16 *)&v1324[v962 * v1317];
          if (v968)
          {
            unint64_t v1352 = v962;
            uint64_t v989 = 0;
            float32x4_t v1470 = vmlaq_f32(v1294, v1296, v970);
            float32x4_t v1460 = vmlaq_f32(v1290, v1292, v970);
            float32x4_t v1342 = v970;
            float32x4_t v1450 = vmlaq_f32(v1287, v1289, v970);
            float32x4_t v990 = v1286;
            v991.i64[0] = 0x4100000041000000;
            v991.i64[1] = 0x4100000041000000;
            do
            {
              uint64_t v1515 = v989;
              v1525 = v988;
              v1534 = v987;
              float32x4_t v992 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*v987)), v986);
              float32x4_t v993 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v987[1])), v986);
              float32x4_t v994 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v987[2])), v986);
              __asm { FMOV            V1.4S, #4.0 }
              float32x4_t v996 = vaddq_f32(v990, _Q1);
              float32x4_t v997 = vaddq_f32(v990, v991);
              float32x4_t v998 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v987[3])), v986);
              __asm { FMOV            V0.4S, #12.0 }
              float32x4_t v1000 = vaddq_f32(v990, _Q0);
              float32x4_t v1001 = vmlaq_f32(v978, vmlaq_n_f32(v1450, v990, *(float *)&v956), v992);
              float32x4_t v1002 = vmlaq_f32(v978, vmlaq_n_f32(v1450, v996, *(float *)&v956), v993);
              float32x4_t v1003 = vmlaq_f32(v978, vmlaq_n_f32(v1450, v997, *(float *)&v956), v994);
              float32x4_t v1004 = vmlaq_f32(v978, vmlaq_n_f32(v1450, v1000, *(float *)&v956), v998);
              int8x16_t v1005 = (int8x16_t)vcgtzq_f32(v993);
              float32x4_t v1006 = v978;
              long long v1007 = v956;
              float32x4_t v1008 = vmlaq_f32(v980, vmlaq_n_f32(v1460, v990, *(float *)&v957), v992);
              float32x4_t v1009 = vmlaq_f32(v980, vmlaq_n_f32(v1460, v996, *(float *)&v957), v993);
              int8x16_t v1010 = vandq_s8((int8x16_t)vcgezq_f32(v1001), (int8x16_t)vcgtzq_f32(v992));
              float32x4_t v1011 = vmlaq_f32(v979, vmlaq_n_f32(v1470, v997, v975), v994);
              float32x4_t v1012 = vmlaq_f32(v980, vmlaq_n_f32(v1460, v997, *(float *)&v957), v994);
              int8x16_t v1013 = vandq_s8((int8x16_t)vcgezq_f32(v1003), (int8x16_t)vcgtzq_f32(v994));
              float32x4_t v1014 = vmlaq_f32(v979, vmlaq_n_f32(v1470, v1000, v975), v998);
              long long v1015 = v957;
              float32x4_t v1016 = vmlaq_f32(v980, vmlaq_n_f32(v1460, v1000, *(float *)&v957), v998);
              float32x4_t v1017 = vmlaq_f32(v1414, vdivq_f32(v1396, v1001), v1008);
              float32x4_t v1018 = vmlaq_f32(v1432, vdivq_f32(v983, v1002), vmlaq_f32(v979, vmlaq_n_f32(v1470, v996, v975), v993));
              int32x4_t v1019 = vcvtmq_s32_f32(vmlaq_f32(v1432, vdivq_f32(v983, v1001), vmlaq_f32(v979, vmlaq_n_f32(v1470, v990, v975), v992)));
              int32x4_t v1020 = vcvtmq_s32_f32(v1017);
              int32x4_t v1021 = vcvtmq_s32_f32(v1018);
              int32x4_t v1022 = vcvtmq_s32_f32(vmlaq_f32(v1414, vdivq_f32(v1396, v1002), v1009));
              int32x4_t v1023 = vcvtmq_s32_f32(vmlaq_f32(v1432, vdivq_f32(v983, v1003), v1011));
              int32x4_t v1024 = vcvtmq_s32_f32(vmlaq_f32(v1414, vdivq_f32(v1396, v1003), v1012));
              int32x4_t v1025 = vcvtmq_s32_f32(vmlaq_f32(v1432, vdivq_f32(v983, v1004), v1014));
              int32x4_t v1026 = vcvtmq_s32_f32(vmlaq_f32(v1414, vdivq_f32(v1396, v1004), v1016));
              v992.i64[0] = -1;
              v992.i64[1] = -1;
              int32x4_t v1027 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1376, v1020), (int8x16_t)vcgtq_s32(v1386, v1019)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1020, (int8x16_t)v1019), (int32x4_t)v992)), v1010);
              *(int16x4_t *)v1010.i8 = vmovn_s32(v1027);
              *(int8x8_t *)v1018.f32 = vorn_s8((int8x8_t)vmovn_s32(v1019), *(int8x8_t *)v1010.i8);
              *(int8x8_t *)v1014.f32 = vorn_s8((int8x8_t)vmovn_s32(v1020), *(int8x8_t *)v1010.i8);
              int32x4_t v1028 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1376, v1022), (int8x16_t)vcgtq_s32(v1386, v1021)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1022, (int8x16_t)v1021), (int32x4_t)v992)), vandq_s8((int8x16_t)vcgezq_f32(v1002), v1005));
              *(int16x4_t *)v1017.f32 = vmovn_s32(v1028);
              int32x4_t v1029 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1376, v1024), (int8x16_t)vcgtq_s32(v1386, v1023)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1024, (int8x16_t)v1023), (int32x4_t)v992)), v1013);
              int32x4_t v1030 = v988;
              vst2_s16(v1030, *(int16x4x2_t *)((char *)&v1014 - 8));
              v1030 += 8;
              *(int8x8_t *)v1014.f32 = vorn_s8((int8x8_t)vmovn_s32(v1021), *(int8x8_t *)v1017.f32);
              *(int8x8_t *)v1016.f32 = vorn_s8((int8x8_t)vmovn_s32(v1022), *(int8x8_t *)v1017.f32);
              *(int16x4_t *)v1017.f32 = vmovn_s32(v1029);
              vst2_s16(v1030, (int16x4x2_t)v1014);
              *(int8x8_t *)v1016.f32 = vorn_s8((int8x8_t)vmovn_s32(v1023), *(int8x8_t *)v1017.f32);
              int8x8_t v1031 = vorn_s8((int8x8_t)vmovn_s32(v1024), *(int8x8_t *)v1017.f32);
              long long v956 = v1007;
              float32x4_t v978 = v1006;
              v991.i64[0] = 0x4100000041000000;
              v991.i64[1] = 0x4100000041000000;
              int32x4_t v1032 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1376, v1026), (int8x16_t)vcgtq_s32(v1386, v1025)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v1026, (int8x16_t)v1025), (int32x4_t)v992)), vandq_s8((int8x16_t)vcgezq_f32(v1004), (int8x16_t)vcgtzq_f32(v998)));
              int8x16_t v1033 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
              float32x4_t v1034 = (float32x4_t)vbslq_s8((int8x16_t)v1027, (int8x16_t)vmulq_f32(v1001, v991), v1033);
              float32x4_t v1035 = (float32x4_t)vbslq_s8((int8x16_t)v1028, (int8x16_t)vmulq_f32(v1002, v991), v1033);
              float32x4_t v1036 = (float32x4_t)vbslq_s8((int8x16_t)v1032, (int8x16_t)vmulq_f32(v1004, v991), v1033);
              int32x4_t v1037 = v988 + 16;
              *(int16x4_t *)v1027.i8 = vmovn_s32(v1032);
              vst2_s16(v1037, (int16x4x2_t)v1016);
              long long v957 = v1015;
              float32x4_t v979 = v1405;
              *(int8x8_t *)v1001.f32 = vorn_s8((int8x8_t)vmovn_s32(v1025), *(int8x8_t *)v1027.i8);
              v986.i64[0] = 0x3E0000003E000000;
              v986.i64[1] = 0x3E0000003E000000;
              *(int8x8_t *)v1032.i8 = vorn_s8((int8x8_t)vmovn_s32(v1026), *(int8x8_t *)v1027.i8);
              int32x4_t v1038 = v988 + 24;
              vst2_s16(v1038, (int16x4x2_t)v1001);
              int32x4_t v973 = vmlaq_s32(v1023, v1024, v1424);
              int32x4_t v1039 = vminq_s32(vmaxq_s32(vmlaq_s32(v1019, v1020, v1424), (int32x4_t)0), v1440);
              unsigned __int32 v1506 = v1039.u32[1];
              uint64_t v1040 = v1039.i64[1];
              unsigned __int32 v1041 = v1039.i32[0];
              int32x4_t v1042 = vcvtq_s32_f32(v1034);
              __int32 v1043 = v1042.i32[1];
              __int32 v1044 = v1042.i32[2];
              __int32 v1480 = v1042.i32[3];
              __int32 v1045 = v1042.i32[0];
              int32x4_t v1046 = vminq_s32(vmaxq_s32(vmlaq_s32(v1025, v1026, v1424), (int32x4_t)0), v1440);
              int32x4_t v1047 = vcvtq_s32_f32(v1036);
              unsigned __int32 v1048 = v1046.u32[3];
              unsigned __int32 v1049 = v1046.u32[1];
              __int32 v1050 = v1047.i32[3];
              __int32 v1051 = v1047.i32[1];
              unsigned __int32 v1052 = v1046.u32[2];
              __int32 v1053 = v1047.i32[2];
              unsigned __int32 v1054 = v1046.i32[0];
              __int32 v1055 = v1047.i32[0];
              int32x4_t v1056 = vminq_s32(vmaxq_s32(v973, (int32x4_t)0), v1440);
              unsigned __int32 v1057 = v1056.u32[2];
              unint64_t v1058 = v968;
              unsigned __int32 v1059 = v1056.u32[3];
              unsigned __int32 v1060 = v1056.u32[1];
              unsigned __int32 v1061 = v1056.i32[0];
              int32x4_t v1062 = vcvtq_s32_f32((float32x4_t)vbslq_s8((int8x16_t)v1029, (int8x16_t)vmulq_f32(v1003, v991), v1033));
              __int32 v1063 = v1062.i32[2];
              __int32 v1064 = v1062.i32[3];
              __int32 v1065 = v1062.i32[1];
              __int32 v1066 = v1062.i32[0];
              int32x4_t v1067 = vminq_s32(vmaxq_s32(vmlaq_s32(v1021, v1022, v1424), (int32x4_t)0), v1440);
              __int32 v1068 = v959[v1041];
              int32x4_t v1069 = vcvtq_s32_f32(v1035);
              if (v1045 < v1068) {
                LOWORD(v1068) = v1045;
              }
              unsigned __int32 v1070 = v1067.u32[1];
              v959[v1041] = v1068;
              unsigned __int32 v1071 = v1067.u32[2];
              unsigned __int32 v1072 = v1067.u32[3];
              __int16 v1073 = v1069.i16[2];
              unsigned __int32 v1074 = v1067.i32[0];
              __asm { FMOV            V0.4S, #16.0 }
              float32x4_t v990 = vaddq_f32(v990, _Q0);
              if (v1069.i32[1] >= v959[v1070]) {
                __int16 v1073 = v959[v1070];
              }
              v959[v1070] = v1073;
              if (v1063 >= v959[v1057]) {
                LOWORD(v1063) = v959[v1057];
              }
              v959[v1057] = v1063;
              __int32 v1076 = v959[v1048];
              if (v1050 < v1076) {
                LOWORD(v1076) = v1050;
              }
              v959[v1048] = v1076;
              __int32 v1077 = v959[v1506];
              if (v1043 < v1077) {
                LOWORD(v1077) = v1043;
              }
              v959[v1506] = v1077;
              int v1078 = v959[v1071];
              if (v1069.i32[2] < v1078) {
                LOWORD(v1078) = v1069.i16[4];
              }
              v959[v1071] = v1078;
              if (v1064 >= v959[v1059]) {
                LOWORD(v1064) = v959[v1059];
              }
              v959[v1059] = v1064;
              unint64_t v968 = v1058;
              __int32 v1079 = v959[v1054];
              if (v1055 < v1079) {
                LOWORD(v1079) = v1055;
              }
              v959[v1054] = v1079;
              __int32 v1080 = v959[v1040];
              if (v1044 < v1080) {
                LOWORD(v1080) = v1044;
              }
              v959[v1040] = v1080;
              int v1081 = v959[v1072];
              if (v1069.i32[3] < v1081) {
                LOWORD(v1081) = v1069.i16[6];
              }
              v959[v1072] = v1081;
              __int32 v1082 = v959[v1061];
              if (v1066 < v1082) {
                LOWORD(v1082) = v1066;
              }
              v959[v1061] = v1082;
              __int32 v1083 = v959[v1049];
              if (v1051 < v1083) {
                LOWORD(v1083) = v1051;
              }
              v959[v1049] = v1083;
              __int32 v1084 = v959[HIDWORD(v1040)];
              if (v1480 < v1084) {
                LOWORD(v1084) = v1480;
              }
              v959[HIDWORD(v1040)] = v1084;
              int v1085 = v959[v1074];
              if (v1069.i32[0] < v1085) {
                LOWORD(v1085) = v1069.i16[0];
              }
              v959[v1074] = v1085;
              __int32 v1086 = v959[v1060];
              if (v1065 < v1086) {
                LOWORD(v1086) = v1065;
              }
              v959[v1060] = v1086;
              __int32 v1087 = v959[v1052];
              if (v1053 < v1087) {
                LOWORD(v1087) = v1053;
              }
              v959[v1052] = v1087;
              int v987 = v1534 + 4;
              float32x2_t v988 = v1525 + 32;
              uint64_t v989 = v1515 + 16;
            }
            while (v1515 + 16 < v1058);
            unint64_t v1088 = v1282;
            float32x4_t v971 = (float32x4_t)a14;
            float32x4_t v976 = (float32x4_t)a15;
            float32x4_t v974 = a12;
            float32x4_t v972 = a13;
            float32x2_t v984 = (float32x2_t)a18;
            float v965 = *(float *)&a11;
            float32x2_t v977 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
            size_t v950 = v1304;
            size_t v958 = v953 >> 1;
            unint64_t v962 = v1352;
            float v966 = v1300;
            float v967 = v1298;
            float v969 = 0.5;
            float32x4_t v970 = v1342;
            int v982 = v1283;
            int v981 = v1284;
            float v985 = 0.125;
          }
          else
          {
            unint64_t v1088 = 0;
          }
          if (v1088 < v950)
          {
            do
            {
              v973.i16[0] = v987->i16[0];
              *(float *)v973.i32 = (float)v973.u32[0] * v985;
              int32x4_t v1089 = (int32x4_t)vaddq_f32(v976, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v974, v966* (float)((float)((float)((float)v1088 + v969) - v965) * *(float *)v973.i32)), v972, v967* (float)((float)((float)((float)v962 + v969) - *((float *)&a11 + 1))* *(float *)v973.i32)), v971, *(float *)v973.i32));
              uint64_t v1090 = 0xFFFF0000FFFFLL;
              if (*(float *)&v1089.i32[2] >= 0.0 && *(float *)v973.i32 > 0.0)
              {
                *(int32x2_t *)v973.i8 = vcvt_s32_f32(vmla_f32(v984, vdiv_f32(v977, (float32x2_t)vdup_laneq_s32(v1089, 2)), *(float32x2_t *)v1089.i8));
                if (v973.i32[0] < 0)
                {
                  v986.i64[0] = 0x3E0000003E000000;
                  v986.i64[1] = 0x3E0000003E000000;
                }
                else
                {
                  v986.i64[0] = 0x3E0000003E000000;
                  v986.i64[1] = 0x3E0000003E000000;
                  if (v981 > v973.i32[0] && (v973.i32[1] & 0x80000000) == 0 && v982 > v973.u16[2])
                  {
                    __int32 v1091 = &v959[v958 * v973.u16[2]];
                    unsigned int v1092 = vcvts_n_s32_f32(*(float *)&v1089.i32[2], 3uLL);
                    if (v1092 <= (unsigned __int16)(v1091[v973.u32[0]] - 1)) {
                      v1091[v973.u32[0]] = v1092;
                    }
                    uint64_t v1090 = v973.i64[0];
                  }
                }
              }
              *float32x2_t v988 = v1090;
              v988[1] = WORD2(v1090);
              ++v1088;
              int v987 = (uint16x4_t *)((char *)v987 + 2);
              v988 += 2;
            }
            while (v950 != v1088);
          }
          ++v962;
          __asm { FMOV            V0.4S, #1.0 }
          float32x4_t v970 = vaddq_f32(v970, _Q0);
        }
        while (v962 != v1332);
        vImagePixelCount v961 = buf.height;
      }
      size_t v348 = v1280;
      if (v961)
      {
        uint64_t v1094 = 0;
        long long v1095 = *(_OWORD *)&buf.width;
        vImagePixelCount v1096 = (char *)buf.data;
        vImagePixelCount v1097 = buf.width >> 4;
        if (buf.width >> 4 <= 1) {
          vImagePixelCount v1097 = 1;
        }
        unint64_t v1098 = buf.width & 0xFFFFFFF0;
        do
        {
          int32x4_t v1099 = (int8x8_t *)&v1096[*((void *)&v1095 + 1) * v1094];
          vImagePixelCount v1100 = v1097;
          if ((unint64_t)v1095 >= 0x10)
          {
            do
            {
              int16x4_t v1101 = (int16x4_t)v1099[2];
              int16x4_t v1102 = (int16x4_t)v1099[3];
              int8x8_t v1103 = vbic_s8(v1099[1], (int8x8_t)vceq_s16((int16x4_t)v1099[1], (int16x4_t)0x8000800080008000));
              *int32x4_t v1099 = vbic_s8(*v1099, (int8x8_t)vceq_s16((int16x4_t)*v1099, (int16x4_t)0x8000800080008000));
              v1099[1] = v1103;
              v1099[2] = vbic_s8((int8x8_t)v1101, (int8x8_t)vceq_s16(v1101, (int16x4_t)0x8000800080008000));
              v1099[3] = vbic_s8((int8x8_t)v1102, (int8x8_t)vceq_s16(v1102, (int16x4_t)0x8000800080008000));
              v1099 += 4;
              --v1100;
            }
            while (v1100);
          }
          unint64_t v1104 = v1095 & 0xFFFFFFFF0000000FLL;
          if ((unint64_t)v1095 > v1098)
          {
            do
            {
              if (v1099->i16[0] == 0x7FFF) {
                v1099->i16[0] = 0;
              }
              int32x4_t v1099 = (int8x8_t *)((char *)v1099 + 2);
              --v1104;
            }
            while (v1104);
          }
          ++v1094;
        }
        while (v1094 != v961);
      }
      goto LABEL_332;
    }
    if (PixelFormatType == 1278226534) {
      goto LABEL_91;
    }
    if (PixelFormatType != 1278226536) {
      goto LABEL_307;
    }
    goto LABEL_117;
  }
  if (PixelFormatType <= 1751410031)
  {
    if (PixelFormatType != 1717855600)
    {
      if (PixelFormatType == 1717856627)
      {
        size_t v22 = CVPixelBufferGetHeight(a1);
        size_t v23 = CVPixelBufferGetWidth(a1);
        unsigned int v24 = a1;
        unsigned int v25 = CVPixelBufferGetHeight(pixelBuffer);
        unsigned int v26 = CVPixelBufferGetWidth(pixelBuffer);
        size_t v27 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        CVPixelBufferLockBaseAddress(v24, 1uLL);
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        CVPixelBufferLockBaseAddress(a2, 0);
        memset(&v1537, 0, sizeof(v1537));
        size_t v28 = (CGRect *)MEMORY[0x263F001A8];
        int v29 = v24;
        PixelBufferUtils::asVImageBuffer(v24, *MEMORY[0x263F001A8], &v1537);
        memset(&buf, 0, sizeof(buf));
        PixelBufferUtils::asVImageBuffer(pixelBuffer, *v28, &buf);
        PixelBufferUtils::asVImageBuffer(v1354, *v28, &v1536);
        int32x2_t v30 = (char *)v1536.data;
        size_t v31 = v1536.rowBytes;
        float32x4_t v33 = (float *)buf.data;
        int v32 = buf.height;
        bzero(buf.data, buf.height * buf.rowBytes);
        float32x4_t v37 = (float32x4_t)a14;
        float32x4_t v36 = (float32x4_t)a15;
        float32x4_t v38 = a12;
        float32x4_t v39 = a13;
        float32x2_t v41 = (float32x2_t)a18;
        float v40 = *(float *)&a11;
        v42.i32[0] = a16;
        if (v22)
        {
          unint64_t v43 = 0;
          float v44 = 1.0 / *(float *)&a9;
          v45.i32[1] = v1516;
          float v46 = 1.0 / *(float *)&v1516;
          unint64_t v47 = v23 & 0xFFFFFFFFFFFFFFF0;
          float v48 = 0.5;
          *(float *)v34.i32 = 0.5 - *((float *)&a11 + 1);
          float32x4_t v49 = (float32x4_t)vdupq_lane_s32(v34, 0);
          *(float *)v34.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, a13, 2);
          *(float *)v45.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, *(float32x2_t *)a13.f32, 1);
          *(float *)v35.i32 = (float)(1.0 / *(float *)&v1516) * a13.f32[0];
          float32x4_t v1326 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
          float32x4_t v1334 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.i8, 0);
          float32x4_t v1312 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
          float32x4_t v1318 = (float32x4_t)vdupq_lane_s32(v45, 0);
          float32x4_t v1306 = (float32x4_t)vdupq_laneq_s32(a14, 2);
          float32x4_t v1309 = (float32x4_t)vdupq_lane_s32(v34, 0);
          float v50 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
          *(float *)v35.i32 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
          float v1442 = *(float *)v35.i32;
          float v51 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
          float32x4_t v52 = (float32x4_t)vdupq_laneq_s32(a15, 2);
          float32x4_t v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
          float32x4_t v54 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
          float32x4_t v1303 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
          v42.i32[1] = DWORD1(a17);
          size_t v55 = (char *)v1537.data;
          size_t v56 = v1537.rowBytes;
          float v57 = 0.125;
          v58.i64[0] = 0x3E0000003E000000;
          v58.i64[1] = 0x3E0000003E000000;
          v59.i64[0] = 0x4100000041000000;
          v59.i64[1] = 0x4100000041000000;
          float32x2_t v1366 = v42;
          float v1368 = 1.0 / *(float *)&a9;
          float v1344 = 1.0 / *(float *)&v1516;
          float v1482 = v50;
          int32x4_t v1490 = vdupq_n_s32(v27 >> 2);
          int32x4_t v1462 = vdupq_n_s32(v32 * (v27 >> 2) - 4);
          float32x4_t v1472 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
          float32x4_t v1452 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
          int32x4_t v1426 = vdupq_n_s32(v25);
          float32x4_t v1434 = v54;
          float32x4_t v1407 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
          float32x4_t v1416 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
          int32x4_t v1388 = vdupq_n_s32(v26);
          float32x4_t v1397 = v52;
          while (1)
          {
            float32x4_t v60 = (uint16x4_t *)&v55[v56 * v43];
            float32x4_t v61 = (__int16 *)&v30[v43 * v31];
            unint64_t v62 = 0;
            if (v47)
            {
              float32x4_t v1518 = vmlaq_f32(v1326, v1334, v49);
              float32x4_t v1507 = vmlaq_f32(v1312, v1318, v49);
              float32x4_t v1378 = v49;
              float32x4_t v1498 = vmlaq_f32(v1306, v1309, v49);
              float32x4_t v63 = v1303;
              do
              {
                float32x4_t v64 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*v60)), v58);
                float32x4_t v65 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v60[1])), v58);
                __asm { FMOV            V0.4S, #4.0 }
                float32x4_t v70 = vaddq_f32(v63, _Q0);
                float32x4_t v71 = vaddq_f32(v63, v59);
                float32x4_t v72 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v60[2])), v58);
                __asm { FMOV            V0.4S, #12.0 }
                float32x4_t v74 = vaddq_f32(v63, _Q0);
                float32x4_t v75 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v60[3])), v58);
                float32x4_t v76 = vmlaq_f32(v52, vmlaq_n_f32(v1498, v63, v50), v64);
                float32x4_t v77 = vmlaq_f32(v52, vmlaq_n_f32(v1498, v70, v50), v65);
                float32x4_t v78 = vmlaq_f32(v52, vmlaq_n_f32(v1498, v71, v50), v72);
                float32x4_t v79 = vmlaq_f32(v52, vmlaq_n_f32(v1498, v74, v50), v75);
                int8x16_t v1526 = vandq_s8((int8x16_t)vcgezq_f32(v76), (int8x16_t)vcgtzq_f32(v64));
                int8x16_t v80 = vandq_s8((int8x16_t)vcgezq_f32(v77), (int8x16_t)vcgtzq_f32(v65));
                float32x4_t v81 = vmlaq_f32(v53, vmlaq_n_f32(v1518, v70, v51), v65);
                float32x4_t v82 = vmlaq_f32(v54, vmlaq_n_f32(v1507, v70, v1442), v65);
                int8x16_t v83 = vandq_s8((int8x16_t)vcgezq_f32(v79), (int8x16_t)vcgtzq_f32(v75));
                float32x4_t v84 = vmlaq_f32(v53, vmlaq_n_f32(v1518, v74, v51), v75);
                float32x4_t v85 = vmlaq_f32(v54, vmlaq_n_f32(v1507, v74, v1442), v75);
                int32x4_t v86 = vcvtmq_s32_f32(vmlaq_f32(v1452, vdivq_f32(v1407, v76), vmlaq_f32(v53, vmlaq_n_f32(v1518, v63, v51), v64)));
                int32x4_t v87 = vcvtmq_s32_f32(vmlaq_f32(v1472, vdivq_f32(v1416, v76), vmlaq_f32(v54, vmlaq_n_f32(v1507, v63, v1442), v64)));
                int32x4_t v88 = vcvtmq_s32_f32(vmlaq_f32(v1452, vdivq_f32(v1407, v77), v81));
                int32x4_t v89 = vcvtmq_s32_f32(vmlaq_f32(v1472, vdivq_f32(v1416, v77), v82));
                int32x4_t v90 = vcvtmq_s32_f32(vmlaq_f32(v1452, vdivq_f32(v1407, v78), vmlaq_f32(v53, vmlaq_n_f32(v1518, v71, v51), v72)));
                int32x4_t v91 = vcvtmq_s32_f32(vmlaq_f32(v1472, vdivq_f32(v1416, v78), vmlaq_f32(v54, vmlaq_n_f32(v1507, v71, v1442), v72)));
                int32x4_t v92 = vcvtmq_s32_f32(vmlaq_f32(v1452, vdivq_f32(v1407, v79), v84));
                int32x4_t v93 = vcvtmq_s32_f32(vmlaq_f32(v1472, vdivq_f32(v1416, v79), v85));
                v94.i64[0] = -1;
                v94.i64[1] = -1;
                int32x4_t v95 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1426, v87), (int8x16_t)vcgtq_s32(v1388, v86)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v87, (int8x16_t)v86), v94)), v1526);
                int32x4_t v96 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1426, v89), (int8x16_t)vcgtq_s32(v1388, v88)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v89, (int8x16_t)v88), v94)), v80);
                *(int16x4_t *)v80.i8 = vmovn_s32(v95);
                int32x4_t v97 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1426, v91), (int8x16_t)vcgtq_s32(v1388, v90)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v91, (int8x16_t)v90), v94)), vandq_s8((int8x16_t)vcgezq_f32(v78), (int8x16_t)vcgtzq_f32(v72)));
                int8x8_t v98 = (int8x8_t)vmovn_s32(v96);
                int8x8_t v99 = vorn_s8((int8x8_t)vmovn_s32(v86), *(int8x8_t *)v80.i8);
                *(int8x8_t *)v72.f32 = vorn_s8((int8x8_t)vmovn_s32(v87), *(int8x8_t *)v80.i8);
                *(int8x8_t *)v85.f32 = vorn_s8((int8x8_t)vmovn_s32(v88), v98);
                *(int8x8_t *)v80.i8 = vorn_s8((int8x8_t)vmovn_s32(v89), v98);
                *(int16x4_t *)v84.f32 = vmovn_s32(v97);
                int32x4_t v100 = v61;
                vst2_s16(v100, *(int16x4x2_t *)((char *)&v72 - 8));
                v100 += 8;
                int8x8_t v101 = vorn_s8((int8x8_t)vmovn_s32(v90), *(int8x8_t *)v84.f32);
                *(int8x8_t *)v72.f32 = vorn_s8((int8x8_t)vmovn_s32(v91), *(int8x8_t *)v84.f32);
                int32x4_t v102 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1426, v93), (int8x16_t)vcgtq_s32(v1388, v92)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v93, (int8x16_t)v92), v94)), v83);
                vst2_s16(v100, *(int16x4x2_t *)((char *)&v80 - 8));
                int8x8_t v103 = v61 + 16;
                vst2_s16(v103, *(int16x4x2_t *)((char *)&v72 - 8));
                float32x4_t v52 = v1397;
                float32x4_t v54 = v1434;
                int8x8_t v104 = (int8x8_t)vmovn_s32(v102);
                *(int8x8_t *)v85.f32 = vorn_s8((int8x8_t)vmovn_s32(v92), v104);
                *(int8x8_t *)v80.i8 = vorn_s8((int8x8_t)vmovn_s32(v93), v104);
                int8x8_t v105 = v61 + 24;
                vst2_s16(v105, *(int16x4x2_t *)((char *)&v80 - 8));
                float v50 = v1482;
                int32x4_t v106 = vminq_s32(vmaxq_s32(vmlaq_s32(v86, v87, v1490), (int32x4_t)0), v1462);
                LODWORD(v105) = v106.i32[1];
                unsigned __int32 v107 = v106.u32[2];
                unsigned __int32 v108 = v106.u32[3];
                unsigned __int32 v109 = v106.i32[0];
                float32x4_t v110 = (float32x4_t)vdupq_n_s32(0x447A0000u);
                int32x4_t v35 = vminq_s32(vmaxq_s32(vmlaq_s32(v88, v89, v1490), (int32x4_t)0), v1462);
                int8x16_t v111 = vandq_s8((int8x16_t)vdivq_f32(v110, v76), (int8x16_t)v95);
                v33[v109] = fmaxf(*(float *)v111.i32, v33[v109]);
                int8x16_t v112 = vandq_s8((int8x16_t)vdivq_f32(v110, v77), (int8x16_t)v96);
                int32x4_t v113 = vminq_s32(vmaxq_s32(vmlaq_s32(v90, v91, v1490), (int32x4_t)0), v1462);
                v33[v35.u32[1]] = fmaxf(*(float *)&v112.i32[1], v33[v35.u32[1]]);
                int8x16_t v114 = vandq_s8((int8x16_t)vdivq_f32(v110, v78), (int8x16_t)v97);
                int32x4_t v115 = vminq_s32(vmaxq_s32(vmlaq_s32(v92, v93, v1490), (int32x4_t)0), v1462);
                v33[v113.u32[2]] = fmaxf(*(float *)&v114.i32[2], v33[v113.u32[2]]);
                int8x16_t v116 = vandq_s8((int8x16_t)vdivq_f32(v110, v79), (int8x16_t)v102);
                v33[v115.u32[3]] = fmaxf(*(float *)&v116.i32[3], v33[v115.u32[3]]);
                v33[v105] = fmaxf(*(float *)&v111.i32[1], v33[v105]);
                v33[v35.u32[2]] = fmaxf(*(float *)&v112.i32[2], v33[v35.u32[2]]);
                v33[v113.u32[3]] = fmaxf(*(float *)&v114.i32[3], v33[v113.u32[3]]);
                v33[v115.u32[0]] = fmaxf(*(float *)v116.i32, v33[v115.u32[0]]);
                v33[v107] = fmaxf(*(float *)&v111.i32[2], v33[v107]);
                unsigned __int32 v117 = v113.u32[1];
                v33[v35.u32[3]] = fmaxf(*(float *)&v112.i32[3], v33[v35.u32[3]]);
                v33[v113.u32[0]] = fmaxf(*(float *)v114.i32, v33[v113.u32[0]]);
                v58.i64[0] = 0x3E0000003E000000;
                v58.i64[1] = 0x3E0000003E000000;
                v33[v115.u32[1]] = fmaxf(*(float *)&v116.i32[1], v33[v115.u32[1]]);
                v33[v108] = fmaxf(*(float *)&v111.i32[3], v33[v108]);
                *(float *)v111.i32 = fmaxf(*(float *)v112.i32, v33[v35.u32[0]]);
                v59.i64[0] = 0x4100000041000000;
                v59.i64[1] = 0x4100000041000000;
                v33[v35.u32[0]] = *(float *)v111.i32;
                v35.i16[1] = v114.i16[3];
                v33[v117] = fmaxf(*(float *)&v114.i32[1], v33[v117]);
                v33[v115.u32[2]] = fmaxf(*(float *)&v116.i32[2], v33[v115.u32[2]]);
                __asm { FMOV            V0.4S, #16.0 }
                float32x4_t v63 = vaddq_f32(v63, _Q0);
                v60 += 4;
                v61 += 32;
                v62 += 16;
              }
              while (v62 < v47);
              unint64_t v62 = (((v23 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
              float32x4_t v37 = (float32x4_t)a14;
              float32x4_t v36 = (float32x4_t)a15;
              float32x4_t v38 = a12;
              float32x4_t v39 = a13;
              float32x2_t v41 = (float32x2_t)a18;
              float v40 = *(float *)&a11;
              float32x2_t v42 = v1366;
              float v44 = v1368;
              float v46 = v1344;
              float v48 = 0.5;
              float32x4_t v49 = v1378;
              float v57 = 0.125;
            }
            if (v62 < v23) {
              break;
            }
LABEL_29:
            ++v43;
            __asm { FMOV            V0.4S, #1.0 }
            float32x4_t v49 = vaddq_f32(v49, _Q0);
            if (v43 == v22) {
              goto LABEL_86;
            }
          }
          while (1)
          {
            v35.i16[0] = v60->i16[0];
            *(float *)v35.i32 = (float)v35.u32[0] * v57;
            int32x4_t v119 = (int32x4_t)vaddq_f32(v36, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v38, v44 * (float)((float)((float)((float)v62 + v48) - v40) * *(float *)v35.i32)), v39, v46* (float)((float)((float)((float)v43 + v48) - *((float *)&a11 + 1)) * *(float *)v35.i32)), v37, *(float *)v35.i32));
            float v120 = *(float *)&v119.i32[2];
            uint64_t v121 = 0xFFFF0000FFFFLL;
            if (*(float *)&v119.i32[2] >= 0.0 && *(float *)v35.i32 > 0.0)
            {
              *(int32x2_t *)v35.i8 = vcvt_s32_f32(vmla_f32(v41, vdiv_f32(v42, (float32x2_t)vdup_laneq_s32(v119, 2)), *(float32x2_t *)v119.i8));
              if ((v35.i32[0] & 0x80000000) == 0)
              {
                v58.i64[0] = 0x3E0000003E000000;
                v58.i64[1] = 0x3E0000003E000000;
                v59.i64[0] = 0x4100000041000000;
                v59.i64[1] = 0x4100000041000000;
                if ((__int16)v26 > v35.i32[0] && (v35.i32[1] & 0x80000000) == 0 && (__int16)v25 > (int)v35.u16[2])
                {
                  float v122 = 1000.0 / v120;
                  float v123 = &v33[(v27 >> 2) * v35.u16[2]];
                  float v124 = v123[v35.u32[0]];
                  if (v124 == 0.0 || v124 < v122) {
                    v123[v35.u32[0]] = v122;
                  }
                  uint64_t v121 = v35.i64[0];
                }
                goto LABEL_28;
              }
              v58.i64[0] = 0x3E0000003E000000;
              v58.i64[1] = 0x3E0000003E000000;
            }
            v59.i64[0] = 0x4100000041000000;
            v59.i64[1] = 0x4100000041000000;
LABEL_28:
            *float32x4_t v61 = v121;
            v61[1] = WORD2(v121);
            ++v62;
            float32x4_t v60 = (uint16x4_t *)((char *)v60 + 2);
            v61 += 2;
            if (v23 == v62) {
              goto LABEL_29;
            }
          }
        }
        goto LABEL_86;
      }
      goto LABEL_307;
    }
LABEL_91:
    size_t v349 = CVPixelBufferGetHeight(a1);
    size_t v350 = CVPixelBufferGetWidth(a1);
    size_t v351 = a1;
    size_t v352 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v353 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v354 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(v351, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&v1537, 0, sizeof(v1537));
    unsigned int v355 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(v351, *MEMORY[0x263F001A8], &v1537);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v355, &buf);
    PixelBufferUtils::asVImageBuffer(a2, *v355, &v1536);
    size_t v358 = v354 >> 2;
    long long v359 = (char *)v1536.data;
    size_t v360 = v1536.rowBytes;
    size_t v361 = (float *)buf.data;
    if (v358 * v352) {
      memset_pattern16(buf.data, &unk_247F24670, 4 * v358 * v352);
    }
    vImagePixelCount v362 = buf.height;
    if (v349)
    {
      unint64_t v363 = 0;
      v364.i32[1] = v1516;
      v365.i32[1] = HIDWORD(a9);
      float v367 = *(float *)&a11;
      float32x4_t v366 = a12;
      float v368 = 1.0 / *(float *)&a9;
      float v369 = 1.0 / *(float *)&v1516;
      unint64_t v370 = v350 & 0xFFFFFFFFFFFFFFF0;
      float v371 = 0.5;
      *(float *)v356.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v372 = (float32x4_t)vdupq_lane_s32(v356, 0);
      float32x4_t v374 = a13;
      float32x4_t v373 = (float32x4_t)a14;
      *(float *)v356.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, a13, 2);
      *(float *)v364.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, *(float32x2_t *)a13.f32, 1);
      *(float *)v365.i32 = (float)(1.0 / *(float *)&v1516) * a13.f32[0];
      float v375 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      float32x4_t v1381 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1391 = (float32x4_t)vdupq_lane_s32(v365, 0);
      float32x4_t v1371 = (float32x4_t)vdupq_lane_s32(v364, 0);
      float32x4_t v1337 = (float32x4_t)vdupq_lane_s32(v356, 0);
      float32x4_t v1347 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1329 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      *(float *)&long long v357 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      float v376 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v377 = (float32x4_t)a15;
      float32x2_t v378 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
      float32x4_t v379 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v380 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v381 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      int32x4_t v382 = vdupq_n_s32(v353);
      int32x4_t v1465 = v382;
      int32x4_t v383 = vdupq_n_s32(v352);
      float32x4_t v1321 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      int32x4_t v384 = vdupq_n_s32(v358);
      int32x4_t v385 = vdupq_n_s32(LODWORD(buf.height) * (int)v358 - 4);
      float32x2_t v386 = (float32x2_t)a18;
      float32x4_t v387 = (char *)v1537.data;
      size_t v388 = v1537.rowBytes;
      float v389 = 0.125;
      v390.i64[0] = 0x3E0000003E000000;
      v390.i64[1] = 0x3E0000003E000000;
      size_t v348 = v351;
      float v1400 = 1.0 / *(float *)&v1516;
      float32x4_t v1475 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      float v1485 = v375;
      float32x4_t v1445 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      float32x4_t v1455 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      float32x4_t v1429 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      do
      {
        float32x4_t v391 = (uint16x4_t *)&v387[v388 * v363];
        float32x4_t v392 = (__int16 *)&v359[v363 * v360];
        unint64_t v393 = 0;
        if (v370)
        {
          float32x4_t v1510 = vmlaq_f32(v1381, v1391, v372);
          float32x4_t v1501 = vmlaq_f32(v1347, v1371, v372);
          float32x4_t v1419 = v372;
          float32x4_t v1493 = vmlaq_f32(v1329, v1337, v372);
          float32x4_t v394 = v1321;
          do
          {
            float32x4_t v395 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*v391)), v390);
            float32x4_t v396 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v391[1])), v390);
            float32x4_t v397 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v391[2])), v390);
            __asm { FMOV            V0.4S, #4.0 }
            float32x4_t v399 = vaddq_f32(v394, _Q0);
            v400.i64[0] = 0x3E0000003E000000;
            v400.i64[1] = 0x3E0000003E000000;
            _Q0.i64[0] = 0x4100000041000000;
            _Q0.i64[1] = 0x4100000041000000;
            float32x4_t v401 = vaddq_f32(v394, _Q0);
            __asm { FMOV            V0.4S, #12.0 }
            float32x4_t v403 = vaddq_f32(v394, _Q0);
            float32x4_t v404 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v391[3])), v400);
            float32x4_t v405 = vmlaq_f32(v379, vmlaq_n_f32(v1493, v394, v375), v395);
            float32x4_t v406 = vmlaq_f32(v379, vmlaq_n_f32(v1493, v399, v375), v396);
            float32x4_t v407 = vmlaq_f32(v379, vmlaq_n_f32(v1493, v401, v375), v397);
            float32x4_t v408 = vmlaq_f32(v379, vmlaq_n_f32(v1493, v403, v375), v404);
            int8x16_t v409 = (int8x16_t)vcgtzq_f32(v395);
            float32x4_t v410 = vmlaq_f32(v380, vmlaq_n_f32(v1510, v394, v376), v395);
            float32x4_t v411 = vmlaq_f32(v381, vmlaq_n_f32(v1501, v394, *(float *)&v357), v395);
            float32x4_t v412 = vmlaq_f32(v380, vmlaq_n_f32(v1510, v399, v376), v396);
            float32x4_t v413 = vmlaq_f32(v381, vmlaq_n_f32(v1501, v399, *(float *)&v357), v396);
            float32x4_t v414 = vmlaq_f32(v380, vmlaq_n_f32(v1510, v401, v376), v397);
            float32x4_t v415 = vmlaq_f32(v381, vmlaq_n_f32(v1501, v401, *(float *)&v357), v397);
            int8x16_t v416 = vandq_s8((int8x16_t)vcgezq_f32(v405), v409);
            float32x4_t v417 = vmlaq_f32(v380, vmlaq_n_f32(v1510, v403, v376), v404);
            int8x16_t v1529 = vandq_s8((int8x16_t)vcgezq_f32(v406), (int8x16_t)vcgtzq_f32(v396));
            int32x4_t v418 = v385;
            int32x4_t v419 = v384;
            int32x4_t v420 = v383;
            float32x4_t v421 = v380;
            long long v422 = v357;
            float32x4_t v423 = vmlaq_f32(v381, vmlaq_n_f32(v1501, v403, *(float *)&v357), v404);
            int8x16_t v424 = vandq_s8((int8x16_t)vcgezq_f32(v408), (int8x16_t)vcgtzq_f32(v404));
            int32x4_t v425 = vcvtmq_s32_f32(vmlaq_f32(v1445, vdivq_f32(v1475, v405), v410));
            int32x4_t v426 = vcvtmq_s32_f32(vmlaq_f32(v1429, vdivq_f32(v1455, v405), v411));
            int32x4_t v427 = vcvtmq_s32_f32(vmlaq_f32(v1445, vdivq_f32(v1475, v406), v412));
            int32x4_t v428 = vcvtmq_s32_f32(vmlaq_f32(v1429, vdivq_f32(v1455, v406), v413));
            int32x4_t v429 = vcvtmq_s32_f32(vmlaq_f32(v1445, vdivq_f32(v1475, v407), v414));
            int32x4_t v430 = vcvtmq_s32_f32(vmlaq_f32(v1429, vdivq_f32(v1455, v407), v415));
            int32x4_t v431 = vcvtmq_s32_f32(vmlaq_f32(v1445, vdivq_f32(v1475, v408), v417));
            float32x4_t v432 = vmlaq_f32(v1429, vdivq_f32(v1455, v408), v423);
            long long v357 = v422;
            float32x4_t v380 = v421;
            int32x4_t v383 = v420;
            int32x4_t v384 = v419;
            int32x4_t v385 = v418;
            int32x4_t v433 = vcvtmq_s32_f32(v432);
            v418.i64[0] = -1;
            v418.i64[1] = -1;
            int32x4_t v434 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v383, v426), (int8x16_t)vcgtq_s32(v1465, v425)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v426, (int8x16_t)v425), v418)), v416);
            int32x4_t v435 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v383, v428), (int8x16_t)vcgtq_s32(v1465, v427)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v428, (int8x16_t)v427), v418)), v1529);
            int32x4_t v436 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v383, v430), (int8x16_t)vcgtq_s32(v1465, v429)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v430, (int8x16_t)v429), v418)), vandq_s8((int8x16_t)vcgezq_f32(v407), (int8x16_t)vcgtzq_f32(v397)));
            float v376 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
            *(int16x4_t *)v416.i8 = vmovn_s32(v434);
            *(int8x8_t *)v415.f32 = vorn_s8((int8x8_t)vmovn_s32(v425), *(int8x8_t *)v416.i8);
            int8x8_t v437 = vorn_s8((int8x8_t)vmovn_s32(v426), *(int8x8_t *)v416.i8);
            *(int16x4_t *)v417.f32 = vmovn_s32(v435);
            int8x16_t v438 = v392;
            vst2_s16(v438, (int16x4x2_t)v415);
            v438 += 8;
            *(int8x8_t *)v415.f32 = vorn_s8((int8x8_t)vmovn_s32(v427), *(int8x8_t *)v417.f32);
            int8x8_t v439 = vorn_s8((int8x8_t)vmovn_s32(v428), *(int8x8_t *)v417.f32);
            *(int16x4_t *)v417.f32 = vmovn_s32(v436);
            int32x4_t v440 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v383, v433), (int8x16_t)vcgtq_s32(v1465, v431)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v433, (int8x16_t)v431), v418)), v424);
            vst2_s16(v438, (int16x4x2_t)v415);
            *(int8x8_t *)v415.f32 = vorn_s8((int8x8_t)vmovn_s32(v429), *(int8x8_t *)v417.f32);
            int8x8_t v441 = vorn_s8((int8x8_t)vmovn_s32(v430), *(int8x8_t *)v417.f32);
            int8x16_t v442 = v392 + 16;
            *(int16x4_t *)v417.f32 = vmovn_s32(v440);
            vst2_s16(v442, (int16x4x2_t)v415);
            *(int8x8_t *)v415.f32 = vorn_s8((int8x8_t)vmovn_s32(v431), *(int8x8_t *)v417.f32);
            int8x8_t v443 = vorn_s8((int8x8_t)vmovn_s32(v433), *(int8x8_t *)v417.f32);
            int8x16_t v444 = v392 + 24;
            vst2_s16(v444, (int16x4x2_t)v415);
            float v375 = v1485;
            float32x4_t v445 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
            int8x16_t v446 = (int8x16_t)vmulq_f32(v406, v445);
            int8x16_t v447 = (int8x16_t)vmulq_f32(v407, v445);
            int8x16_t v448 = (int8x16_t)vmulq_f32(v408, v445);
            int32x4_t v449 = vmlaq_s32(v425, v426, v384);
            int8x16_t v450 = (int8x16_t)vdupq_n_s32(0x7F7FFFFFu);
            int8x16_t v451 = vbslq_s8((int8x16_t)v434, (int8x16_t)vmulq_f32(v405, v445), v450);
            int32x4_t v452 = vminq_s32(vmaxq_s32(v449, (int32x4_t)0), v385);
            int32x4_t v382 = vminq_s32(vmaxq_s32(vmlaq_s32(v427, v428, v384), (int32x4_t)0), v385);
            int8x16_t v453 = vbslq_s8((int8x16_t)v435, v446, v450);
            v361[v452.u32[0]] = fminf(*(float *)v451.i32, v361[v452.u32[0]]);
            int32x4_t v454 = vminq_s32(vmaxq_s32(vmlaq_s32(v429, v430, v384), (int32x4_t)0), v385);
            v361[v382.u32[1]] = fminf(*(float *)&v453.i32[1], v361[v382.u32[1]]);
            int8x16_t v455 = vbslq_s8((int8x16_t)v436, v447, v450);
            v361[v454.u32[2]] = fminf(*(float *)&v455.i32[2], v361[v454.u32[2]]);
            int32x4_t v456 = vminq_s32(vmaxq_s32(vmlaq_s32(v431, v433, v384), (int32x4_t)0), v385);
            int8x16_t v457 = vbslq_s8((int8x16_t)v440, v448, v450);
            v361[v456.u32[3]] = fminf(*(float *)&v457.i32[3], v361[v456.u32[3]]);
            v361[v452.u32[1]] = fminf(*(float *)&v451.i32[1], v361[v452.u32[1]]);
            v361[v382.u32[2]] = fminf(*(float *)&v453.i32[2], v361[v382.u32[2]]);
            v361[v454.u32[3]] = fminf(*(float *)&v455.i32[3], v361[v454.u32[3]]);
            v361[v456.u32[0]] = fminf(*(float *)v457.i32, v361[v456.u32[0]]);
            v361[v452.u32[2]] = fminf(*(float *)&v451.i32[2], v361[v452.u32[2]]);
            v361[v382.u32[3]] = fminf(*(float *)&v453.i32[3], v361[v382.u32[3]]);
            v361[v454.u32[0]] = fminf(*(float *)v455.i32, v361[v454.u32[0]]);
            v390.i64[0] = 0x3E0000003E000000;
            v390.i64[1] = 0x3E0000003E000000;
            v361[v456.u32[1]] = fminf(*(float *)&v457.i32[1], v361[v456.u32[1]]);
            v361[v452.u32[3]] = fminf(*(float *)&v451.i32[3], v361[v452.u32[3]]);
            v361[v382.u32[0]] = fminf(*(float *)v453.i32, v361[v382.u32[0]]);
            v382.i16[1] = v455.i16[3];
            v361[v454.u32[1]] = fminf(*(float *)&v455.i32[1], v361[v454.u32[1]]);
            v361[v456.u32[2]] = fminf(*(float *)&v457.i32[2], v361[v456.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v394 = vaddq_f32(v394, _Q0);
            v391 += 4;
            v392 += 32;
            v393 += 16;
          }
          while (v393 < v370);
          unint64_t v393 = (((v350 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v373 = (float32x4_t)a14;
          float32x4_t v377 = (float32x4_t)a15;
          float32x4_t v366 = a12;
          float32x4_t v374 = a13;
          float32x2_t v386 = (float32x2_t)a18;
          float v367 = *(float *)&a11;
          float32x2_t v378 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
          float v368 = 1.0 / *(float *)&a9;
          float v369 = v1400;
          float v371 = 0.5;
          float32x4_t v372 = v1419;
          float v389 = 0.125;
        }
        if (v393 < v350)
        {
          do
          {
            v382.i16[0] = v391->i16[0];
            *(float *)v382.i32 = (float)v382.u32[0] * v389;
            int32x4_t v459 = (int32x4_t)vaddq_f32(v377, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v366, v368 * (float)((float)((float)((float)v393 + v371) - v367) * *(float *)v382.i32)), v374, v369* (float)((float)((float)((float)v363 + v371) - *((float *)&a11 + 1))* *(float *)v382.i32)), v373, *(float *)v382.i32));
            uint64_t v460 = 0xFFFF0000FFFFLL;
            if (*(float *)&v459.i32[2] >= 0.0 && *(float *)v382.i32 > 0.0)
            {
              *(int32x2_t *)v382.i8 = vcvt_s32_f32(vmla_f32(v386, vdiv_f32(v378, (float32x2_t)vdup_laneq_s32(v459, 2)), *(float32x2_t *)v459.i8));
              if (v382.i32[0] < 0)
              {
                v390.i64[0] = 0x3E0000003E000000;
                v390.i64[1] = 0x3E0000003E000000;
              }
              else
              {
                v390.i64[0] = 0x3E0000003E000000;
                v390.i64[1] = 0x3E0000003E000000;
                if ((__int16)v353 > v382.i32[0] && (v382.i32[1] & 0x80000000) == 0 && (__int16)v352 > (int)v382.u16[2])
                {
                  float v461 = *(float *)&v459.i32[2] * 0.001;
                  uint64_t v462 = &v361[v358 * v382.u16[2]];
                  float v463 = v462[v382.u32[0]];
                  if (v463 == 0.0 || v463 > v461) {
                    v462[v382.u32[0]] = v461;
                  }
                  uint64_t v460 = v382.i64[0];
                }
              }
            }
            *float32x4_t v392 = v460;
            v392[1] = WORD2(v460);
            ++v393;
            float32x4_t v391 = (uint16x4_t *)((char *)v391 + 2);
            v392 += 2;
          }
          while (v350 != v393);
        }
        ++v363;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v372 = vaddq_f32(v372, _Q0);
      }
      while (v363 != v349);
      vImagePixelCount v362 = buf.height;
      if (!buf.height) {
        goto LABEL_332;
      }
    }
    else
    {
      size_t v348 = v351;
      if (!buf.height) {
        goto LABEL_332;
      }
    }
    uint64_t v1105 = 0;
    long long v1106 = *(_OWORD *)&buf.width;
    int32x2_t v1107 = (char *)buf.data;
    vImagePixelCount v1108 = buf.width >> 4;
    if (buf.width >> 4 <= 1) {
      vImagePixelCount v1108 = 1;
    }
    unint64_t v1109 = buf.width & 0xFFFFFFF0;
    float32x4_t v1110 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    do
    {
      vImagePixelCount v1111 = (float32x4_t *)&v1107[*((void *)&v1106 + 1) * v1105];
      vImagePixelCount v1112 = v1108;
      if ((unint64_t)v1106 >= 0x10)
      {
        do
        {
          float32x4_t v1113 = v1111[2];
          float32x4_t v1114 = v1111[3];
          int8x16_t v1115 = vbicq_s8((int8x16_t)v1111[1], (int8x16_t)vceqq_f32(v1111[1], v1110));
          *(int8x16_t *)vImagePixelCount v1111 = vbicq_s8(*(int8x16_t *)v1111, (int8x16_t)vceqq_f32(*v1111, v1110));
          v1111[1] = (float32x4_t)v1115;
          v1111[2] = (float32x4_t)vbicq_s8((int8x16_t)v1113, (int8x16_t)vceqq_f32(v1113, v1110));
          v1111[3] = (float32x4_t)vbicq_s8((int8x16_t)v1114, (int8x16_t)vceqq_f32(v1114, v1110));
          v1111 += 4;
          --v1112;
        }
        while (v1112);
      }
      unint64_t v1116 = v1106 & 0xFFFFFFFF0000000FLL;
      if ((unint64_t)v1106 > v1109)
      {
        do
        {
          if (v1111->f32[0] == 3.4028e38) {
            v1111->i32[0] = 0;
          }
          vImagePixelCount v1111 = (float32x4_t *)((char *)v1111 + 4);
          --v1116;
        }
        while (v1116);
      }
      ++v1105;
    }
    while (v1105 != v362);
    goto LABEL_332;
  }
  if (PixelFormatType == 1751410032)
  {
LABEL_117:
    size_t v466 = CVPixelBufferGetHeight(a1);
    size_t v467 = CVPixelBufferGetWidth(a1);
    v468 = a1;
    size_t v469 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v470 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v471 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(v468, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&v1537, 0, sizeof(v1537));
    vImagePixelCount v472 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(v468, *MEMORY[0x263F001A8], &v1537);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v472, &buf);
    PixelBufferUtils::asVImageBuffer(a2, *v472, &v1536);
    size_t v476 = v471 >> 1;
    float32x4_t v477 = (char *)v1536.data;
    size_t v478 = v1536.rowBytes;
    int8x16_t v479 = (short float *)buf.data;
    if (v476 * v469) {
      memset_pattern16(buf.data, &unk_247F24680, 2 * v476 * v469);
    }
    vImagePixelCount v480 = buf.height;
    if (v466)
    {
      unint64_t v481 = 0;
      v482.i32[1] = v1516;
      v483.i32[1] = HIDWORD(a9);
      float v485 = *(float *)&a11;
      float32x4_t v484 = a12;
      float v486 = 1.0 / *(float *)&a9;
      float v487 = 1.0 / *(float *)&v1516;
      unint64_t v488 = v467 & 0xFFFFFFFFFFFFFFF0;
      float v489 = 0.5;
      *(float *)v473.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v490 = (float32x4_t)vdupq_lane_s32(v473, 0);
      float32x4_t v492 = a13;
      float32x4_t v491 = (float32x4_t)a14;
      *(float *)v473.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, a13, 2);
      *(float *)v482.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, *(float32x2_t *)a13.f32, 1);
      *(float *)v483.i32 = (float)(1.0 / *(float *)&v1516) * a13.f32[0];
      float v493 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      float32x4_t v1372 = (float32x4_t)vdupq_lane_s32(v483, 0);
      float32x4_t v1338 = (float32x4_t)vdupq_lane_s32(v482, 0);
      float32x4_t v1348 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1322 = (float32x4_t)vdupq_lane_s32(v473, 0);
      float32x4_t v1330 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1315 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      *(float *)&long long v474 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      *(float *)&long long v475 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v494 = (float32x4_t)a15;
      float32x2_t v495 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
      float32x4_t v496 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v497 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v498 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      int32x4_t v499 = vdupq_n_s32(v470);
      int32x4_t v500 = vdupq_n_s32(v469);
      float32x4_t v1310 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      float32x2_t v501 = (float32x2_t)a18;
      float32x4_t v502 = (char *)v1537.data;
      size_t v503 = v1537.rowBytes;
      float v504 = 0.125;
      v505.i64[0] = 0x3E0000003E000000;
      v505.i64[1] = 0x3E0000003E000000;
      v506.i64[0] = 0x4100000041000000;
      v506.i64[1] = 0x4100000041000000;
      size_t v348 = v468;
      float v1392 = 1.0 / *(float *)&a9;
      float v1382 = 1.0 / *(float *)&v1516;
      int32x4_t v1456 = vdupq_n_s32(LODWORD(buf.height) * (int)v476 - 2);
      float v1466 = v493;
      int32x4_t v1437 = vdupq_n_s32(v476);
      float32x4_t v1446 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      float32x4_t v1420 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      float32x4_t v1430 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      float32x4_t v1410 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      do
      {
        float32x4_t v507 = (uint16x4_t *)&v502[v503 * v481];
        float32x2_t v508 = (__int16 *)&v477[v481 * v478];
        unint64_t v509 = 0;
        if (v488)
        {
          float32x4_t v1494 = vmlaq_f32(v1348, v1372, v490);
          float32x4_t v1486 = vmlaq_f32(v1330, v1338, v490);
          float32x4_t v1401 = v490;
          float32x4_t v1476 = vmlaq_f32(v1315, v1322, v490);
          float32x4_t v510 = v1310;
          do
          {
            float32x4_t v1530 = v510;
            float32x4_t v511 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*v507)), v505);
            float32x4_t v512 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v507[1])), v505);
            float32x4_t v513 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v507[2])), v505);
            __asm { FMOV            V2.4S, #4.0 }
            float32x4_t v515 = vaddq_f32(v510, _Q2);
            float32x4_t v516 = vaddq_f32(v510, v506);
            float32x4_t v517 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v507[3])), v505);
            __asm { FMOV            V1.4S, #12.0 }
            float32x4_t v519 = vaddq_f32(v510, _Q1);
            float32x4_t v520 = vmlaq_f32(v496, vmlaq_n_f32(v1476, v510, v493), v511);
            float32x4_t v521 = vmlaq_f32(v496, vmlaq_n_f32(v1476, v515, v493), v512);
            float32x4_t v522 = vmlaq_f32(v496, vmlaq_n_f32(v1476, v516, v493), v513);
            float32x4_t v523 = vmlaq_f32(v496, vmlaq_n_f32(v1476, v519, v493), v517);
            long long v524 = v475;
            float32x4_t v525 = vmlaq_f32(v497, vmlaq_n_f32(v1494, v1530, *(float *)&v475), v511);
            float32x4_t v526 = vmlaq_f32(v498, vmlaq_n_f32(v1486, v1530, *(float *)&v474), v511);
            float32x4_t v527 = vmlaq_f32(v497, vmlaq_n_f32(v1494, v515, *(float *)&v475), v512);
            float32x4_t v528 = vmlaq_f32(v498, vmlaq_n_f32(v1486, v515, *(float *)&v474), v512);
            int8x16_t v1502 = vandq_s8((int8x16_t)vcgezq_f32(v520), (int8x16_t)vcgtzq_f32(v511));
            float32x4_t v529 = vmlaq_f32(v497, vmlaq_n_f32(v1494, v516, *(float *)&v475), v513);
            int32x4_t v530 = v500;
            float32x4_t v531 = v496;
            float32x4_t v532 = vmlaq_f32(v498, vmlaq_n_f32(v1486, v516, *(float *)&v474), v513);
            int8x16_t v1511 = vandq_s8((int8x16_t)vcgezq_f32(v522), (int8x16_t)vcgtzq_f32(v513));
            int8x16_t v1521 = vandq_s8((int8x16_t)vcgezq_f32(v521), (int8x16_t)vcgtzq_f32(v512));
            float32x4_t v533 = vmlaq_f32(v497, vmlaq_n_f32(v1494, v519, *(float *)&v475), v517);
            int8x16_t v534 = vandq_s8((int8x16_t)vcgezq_f32(v523), (int8x16_t)vcgtzq_f32(v517));
            int32x4_t v535 = v499;
            long long v536 = v474;
            float32x4_t v537 = vmlaq_f32(v498, vmlaq_n_f32(v1486, v519, *(float *)&v474), v517);
            float32x4_t v538 = vmlaq_f32(v1420, vdivq_f32(v1430, v520), v525);
            float32x4_t v539 = vmlaq_f32(v1446, vdivq_f32(v1410, v520), v526);
            float32x4_t v540 = vmlaq_f32(v1420, vdivq_f32(v1430, v521), v527);
            float32x4_t v541 = vdivq_f32(v1410, v522);
            float32x4_t v542 = v498;
            float32x4_t v543 = vmlaq_f32(v1446, vdivq_f32(v1410, v521), v528);
            float32x4_t v544 = vdivq_f32(v1430, v523);
            float32x4_t v545 = vmlaq_f32(v1420, vdivq_f32(v1430, v522), v529);
            float32x4_t v546 = vdivq_f32(v1410, v523);
            float32x4_t v547 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
            int8x16_t v548 = (int8x16_t)vmulq_f32(v520, v547);
            int8x16_t v549 = (int8x16_t)vmulq_f32(v521, v547);
            int8x16_t v550 = (int8x16_t)vmulq_f32(v522, v547);
            int8x16_t v551 = (int8x16_t)vmulq_f32(v523, v547);
            int32x4_t v552 = vcvtmq_s32_f32(v538);
            int32x4_t v553 = vcvtmq_s32_f32(v539);
            int32x4_t v554 = vcvtmq_s32_f32(v540);
            int32x4_t v555 = vcvtmq_s32_f32(v543);
            float32x4_t v498 = v542;
            int32x4_t v556 = vcvtmq_s32_f32(v545);
            float32x4_t v557 = vmlaq_f32(v1446, v541, v532);
            float32x4_t v496 = v531;
            int32x4_t v500 = v530;
            float32x4_t v558 = vmlaq_f32(v1420, v544, v533);
            long long v475 = v524;
            int32x4_t v559 = vcvtmq_s32_f32(v557);
            int32x4_t v560 = vcvtmq_s32_f32(v558);
            float32x4_t v561 = vmlaq_f32(v1446, v546, v537);
            long long v474 = v536;
            int32x4_t v499 = v535;
            int32x4_t v562 = vcvtmq_s32_f32(v561);
            v558.i64[0] = -1;
            v558.i64[1] = -1;
            int32x4_t v563 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v530, v553), (int8x16_t)vcgtq_s32(v535, v552)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v553, (int8x16_t)v552), (int32x4_t)v558)), v1502);
            *(int16x4_t *)v539.f32 = vmovn_s32(v563);
            *(int8x8_t *)v546.f32 = vorn_s8((int8x8_t)vmovn_s32(v552), *(int8x8_t *)v539.f32);
            *(int8x8_t *)v533.f32 = vorn_s8((int8x8_t)vmovn_s32(v553), *(int8x8_t *)v539.f32);
            int8x16_t v564 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v530, v555), (int8x16_t)vcgtq_s32(v535, v554)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v555, (int8x16_t)v554), (int32x4_t)v558));
            int8x16_t v565 = (int8x16_t)vcgtq_s32(v535, v556);
            int32x4_t v566 = (int32x4_t)vandq_s8(v564, v1521);
            int8x16_t v567 = vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v500, v559), v565), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v559, (int8x16_t)v556), (int32x4_t)v558));
            *(int16x4_t *)v565.i8 = vmovn_s32(v566);
            int32x4_t v568 = (int32x4_t)vandq_s8(v567, v1511);
            float32x4_t v569 = v508;
            vst2_s16(v569, *(int16x4x2_t *)((char *)&v533 - 8));
            v569 += 8;
            *(int8x8_t *)v546.f32 = vorn_s8((int8x8_t)vmovn_s32(v554), *(int8x8_t *)v565.i8);
            *(int8x8_t *)v533.f32 = vorn_s8((int8x8_t)vmovn_s32(v555), *(int8x8_t *)v565.i8);
            *(int16x4_t *)v567.i8 = vmovn_s32(v568);
            vst2_s16(v569, *(int16x4x2_t *)((char *)&v533 - 8));
            *(int8x8_t *)v546.f32 = vorn_s8((int8x8_t)vmovn_s32(v556), *(int8x8_t *)v567.i8);
            *(int8x8_t *)v533.f32 = vorn_s8((int8x8_t)vmovn_s32(v559), *(int8x8_t *)v567.i8);
            int8x16_t v570 = (int8x16_t)vdupq_n_s32(0x477FE000u);
            int32x4_t v571 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v500, v562), (int8x16_t)vcgtq_s32(v499, v560)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v562, (int8x16_t)v560), (int32x4_t)v558)), v534);
            float32x4_t v572 = (float32x4_t)vbslq_s8((int8x16_t)v563, v548, v570);
            float32x4_t v573 = (float32x4_t)vbslq_s8((int8x16_t)v566, v549, v570);
            float32x4_t v574 = (float32x4_t)vbslq_s8((int8x16_t)v568, v550, v570);
            float32x4_t v575 = (float32x4_t)vbslq_s8((int8x16_t)v571, v551, v570);
            *(int16x4_t *)v568.i8 = vmovn_s32(v571);
            float32x4_t v576 = v508 + 16;
            vst2_s16(v576, *(int16x4x2_t *)((char *)&v533 - 8));
            float v493 = v1466;
            *(int8x8_t *)v570.i8 = vorn_s8((int8x8_t)vmovn_s32(v560), *(int8x8_t *)v568.i8);
            v505.i64[0] = 0x3E0000003E000000;
            v505.i64[1] = 0x3E0000003E000000;
            *(int8x8_t *)v540.f32 = vorn_s8((int8x8_t)vmovn_s32(v562), *(int8x8_t *)v568.i8);
            float32x4_t v577 = v508 + 24;
            vst2_s16(v577, *(int16x4x2_t *)((char *)&v540 - 8));
            int32x4_t v578 = vmlaq_s32(v556, v559, v1437);
            int32x4_t v579 = vminq_s32(vmaxq_s32(vmlaq_s32(v552, v553, v1437), (int32x4_t)0), v1456);
            int32x4_t v580 = vminq_s32(vmaxq_s32(vmlaq_s32(v554, v555, v1437), (int32x4_t)0), v1456);
            int32x4_t v581 = vminq_s32(vmaxq_s32(v578, (int32x4_t)0), v1456);
            int32x4_t v582 = vminq_s32(vmaxq_s32(vmlaq_s32(v560, v562, v1437), (int32x4_t)0), v1456);
            LODWORD(v577) = v579.i32[1];
            *(float16x4_t *)v555.i8 = vcvt_f16_f32(v572);
            v479[v579.u32[0]] = fminl(*(short float *)v555.i16, v479[v579.u32[0]]);
            *(float16x4_t *)v579.i8 = vcvt_f16_f32(v573);
            v479[v580.u32[1]] = fminl(*(short float *)&v579.i16[1], v479[v580.u32[1]]);
            *(float16x4_t *)v558.f32 = vcvt_f16_f32(v574);
            v479[v581.u32[2]] = fminl(*(short float *)&v558.i16[2], v479[v581.u32[2]]);
            *(float16x4_t *)v575.f32 = vcvt_f16_f32(v575);
            v479[v582.u32[3]] = fminl(*(short float *)&v575.i16[3], v479[v582.u32[3]]);
            v479[v577] = fminl(*(short float *)&v555.i16[1], v479[v577]);
            v479[v580.u32[2]] = fminl(*(short float *)&v579.i16[2], v479[v580.u32[2]]);
            v479[v581.u32[3]] = fminl(*(short float *)&v558.i16[3], v479[v581.u32[3]]);
            v479[v582.u32[0]] = fminl(*(short float *)v575.i16, v479[v582.u32[0]]);
            v479[v579.u32[2]] = fminl(*(short float *)&v555.i16[2], v479[v579.u32[2]]);
            v479[v580.u32[3]] = fminl(*(short float *)&v579.i16[3], v479[v580.u32[3]]);
            v479[v581.u32[0]] = fminl(*(short float *)v558.i16, v479[v581.u32[0]]);
            v479[v582.u32[1]] = fminl(*(short float *)&v575.i16[1], v479[v582.u32[1]]);
            v479[v579.u32[3]] = fminl(*(short float *)&v555.i16[3], v479[v579.u32[3]]);
            v479[v580.u32[0]] = fminl(*(short float *)v579.i16, v479[v580.u32[0]]);
            v582.i16[0] = v558.i16[1];
            v506.i64[0] = 0x4100000041000000;
            v506.i64[1] = 0x4100000041000000;
            v479[v581.u32[1]] = fminl(*(short float *)v582.i16, v479[v581.u32[1]]);
            v479[v582.u32[2]] = fminl(*(short float *)&v575.i16[2], v479[v582.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v510 = vaddq_f32(v1530, _Q0);
            v507 += 4;
            v508 += 32;
            v509 += 16;
          }
          while (v509 < v488);
          unint64_t v509 = (((v467 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v491 = (float32x4_t)a14;
          float32x4_t v494 = (float32x4_t)a15;
          float32x4_t v484 = a12;
          float32x4_t v492 = a13;
          float32x2_t v501 = (float32x2_t)a18;
          float v485 = *(float *)&a11;
          float32x2_t v495 = (float32x2_t)__PAIR64__(DWORD1(a17), a16);
          float v486 = v1392;
          float v487 = v1382;
          float v489 = 0.5;
          float32x4_t v490 = v1401;
          float v504 = 0.125;
        }
        if (v509 < v467)
        {
          v584.i16[1] = HIWORD(a11);
          do
          {
            v584.i16[0] = v507->i16[0];
            float v585 = (float)v584.u32[0] * v504;
            int32x4_t v584 = (int32x4_t)vaddq_f32(v494, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v484, v486 * (float)((float)((float)((float)v509 + v489) - v485) * v585)), v492, v487 * (float)((float)((float)((float)v481 + v489) - *((float *)&a11 + 1)) * v585)), v491, v585));
            uint64_t v586 = 0xFFFF0000FFFFLL;
            if (*(float *)&v584.i32[2] >= 0.0 && v585 > 0.0)
            {
              *(int32x2_t *)v584.i8 = vcvt_s32_f32(vmla_f32(v501, vdiv_f32(v495, (float32x2_t)vdup_laneq_s32(v584, 2)), *(float32x2_t *)v584.i8));
              if (v584.i32[0] < 0)
              {
                v506.i64[0] = 0x4100000041000000;
                v506.i64[1] = 0x4100000041000000;
              }
              else
              {
                v506.i64[0] = 0x4100000041000000;
                v506.i64[1] = 0x4100000041000000;
                if ((__int16)v470 > v584.i32[0] && (v584.i32[1] & 0x80000000) == 0 && (__int16)v469 > (int)v584.u16[2])
                {
                  _S0 = *(float *)&v584.i32[2] * 0.001;
                  __asm
                  {
                    FCVT            H0, S0
                    FCMP            H2, #0
                  }
                  if (_ZF) {
                    BOOL v590 = 0;
                  }
                  else {
                    BOOL v590 = _H2 <= _H0;
                  }
                  if (!v590) {
                    v479[v476 * v584.u16[2] + v584.u32[0]] = _H0;
                  }
                  uint64_t v586 = v584.i64[0];
                }
              }
            }
            __int16 *v508 = v586;
            v508[1] = WORD2(v586);
            ++v509;
            float32x4_t v507 = (uint16x4_t *)((char *)v507 + 2);
            v508 += 2;
          }
          while (v467 != v509);
        }
        ++v481;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v490 = vaddq_f32(v490, _Q0);
        v505.i64[0] = 0x3E0000003E000000;
        v505.i64[1] = 0x3E0000003E000000;
      }
      while (v481 != v466);
      vImagePixelCount v480 = buf.height;
      if (!buf.height) {
        goto LABEL_332;
      }
    }
    else
    {
      size_t v348 = v468;
      if (!buf.height) {
        goto LABEL_332;
      }
    }
    uint64_t v1117 = 0;
    long long v1118 = *(_OWORD *)&buf.width;
    unsigned int v1119 = (char *)buf.data;
    vImagePixelCount v1120 = buf.width >> 4;
    if (buf.width >> 4 <= 1) {
      vImagePixelCount v1120 = 1;
    }
    unint64_t v1121 = buf.width & 0xFFFFFFF0;
    do
    {
      int32x2_t v1122 = (int8x8_t *)&v1119[*((void *)&v1118 + 1) * v1117];
      vImagePixelCount v1123 = v1120;
      if ((unint64_t)v1118 >= 0x10)
      {
        do
        {
          float16x4_t v1124 = (float16x4_t)v1122[2];
          float16x4_t v1125 = (float16x4_t)v1122[3];
          int8x8_t v1126 = vbic_s8(v1122[1], (int8x8_t)vceq_f16((float16x4_t)v1122[1], (float16x4_t)0x8400840084008400));
          *int32x2_t v1122 = vbic_s8(*v1122, (int8x8_t)vceq_f16((float16x4_t)*v1122, (float16x4_t)0x8400840084008400));
          v1122[1] = v1126;
          v1122[2] = vbic_s8((int8x8_t)v1124, (int8x8_t)vceq_f16(v1124, (float16x4_t)0x8400840084008400));
          v1122[3] = vbic_s8((int8x8_t)v1125, (int8x8_t)vceq_f16(v1125, (float16x4_t)0x8400840084008400));
          v1122 += 4;
          --v1123;
        }
        while (v1123);
      }
      unint64_t v1127 = v1118 & 0xFFFFFFFF0000000FLL;
      if ((unint64_t)v1118 > v1121)
      {
        do
        {
          if (*(short float *)v1122->i16 == COERCE_SHORT_FLOAT(31743)) {
            v1122->i16[0] = 0;
          }
          int32x2_t v1122 = (int8x8_t *)((char *)v1122 + 2);
          --v1127;
        }
        while (v1127);
      }
      ++v1117;
    }
    while (v1117 != v480);
    goto LABEL_332;
  }
  if (PixelFormatType == 1751411059)
  {
    size_t v240 = CVPixelBufferGetHeight(a1);
    size_t v241 = CVPixelBufferGetWidth(a1);
    size_t v242 = a1;
    unsigned int v243 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v244 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v245 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(v242, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&v1537, 0, sizeof(v1537));
    int v246 = (CGRect *)MEMORY[0x263F001A8];
    int v29 = v242;
    PixelBufferUtils::asVImageBuffer(v242, *MEMORY[0x263F001A8], &v1537);
    memset(&buf, 0, sizeof(buf));
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *v246, &buf);
    PixelBufferUtils::asVImageBuffer(v1354, *v246, &v1536);
    int32x2_t v247 = (char *)v1536.data;
    size_t v248 = v1536.rowBytes;
    float32x4_t v250 = buf.data;
    int v249 = buf.height;
    bzero(buf.data, buf.height * buf.rowBytes);
    float32x4_t v256 = (float32x4_t)a14;
    float32x4_t v255 = (float32x4_t)a15;
    float32x4_t v258 = a12;
    float32x4_t v257 = a13;
    float32x2_t v260 = (float32x2_t)a18;
    float v259 = *(float *)&a11;
    v261.i32[0] = a16;
    if (v240)
    {
      unint64_t v262 = 0;
      float v263 = 1.0 / *(float *)&a9;
      v264.i32[1] = v1516;
      float v265 = 1.0 / *(float *)&v1516;
      unint64_t v266 = v241 & 0xFFFFFFFFFFFFFFF0;
      float v267 = 0.5;
      *(float *)v251.i32 = 0.5 - *((float *)&a11 + 1);
      float32x4_t v268 = (float32x4_t)vdupq_lane_s32(v251, 0);
      *(float *)v251.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, a13, 2);
      *(float *)v264.i32 = vmuls_lane_f32(1.0 / *(float *)&v1516, *(float32x2_t *)a13.f32, 1);
      *(float *)v252.i32 = (float)(1.0 / *(float *)&v1516) * a13.f32[0];
      float32x4_t v1370 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
      float32x4_t v1380 = (float32x4_t)vdupq_lane_s32(v252, 0);
      int32x4_t v269 = vdupq_lane_s32(v264, 0);
      float32x4_t v1336 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 1);
      float32x4_t v1346 = (float32x4_t)v269;
      float32x4_t v1320 = (float32x4_t)vdupq_laneq_s32(a14, 2);
      float32x4_t v1328 = (float32x4_t)vdupq_lane_s32(v251, 0);
      float v270 = vmuls_lane_f32(1.0 / *(float *)&a9, a12, 2);
      *(float *)&long long v253 = vmuls_lane_f32(1.0 / *(float *)&a9, *(float32x2_t *)a12.f32, 1);
      *(float *)&long long v254 = (float)(1.0 / *(float *)&a9) * a12.f32[0];
      float32x4_t v271 = (float32x4_t)vdupq_laneq_s32(a15, 2);
      float32x4_t v272 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 0);
      float32x4_t v1314 = vsubq_f32((float32x4_t)xmmword_247F24600, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0));
      v261.i32[1] = DWORD1(a17);
      float32x4_t v273 = (char *)v1537.data;
      size_t v274 = v1537.rowBytes;
      float v275 = 0.125;
      v276.i64[0] = 0x3E0000003E000000;
      v276.i64[1] = 0x3E0000003E000000;
      float32x2_t v1367 = v261;
      float v1399 = 1.0 / *(float *)&a9;
      float v1390 = 1.0 / *(float *)&v1516;
      float32x4_t v1492 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 1);
      int32x4_t v1500 = vdupq_n_s32(v249 * (v245 >> 1) - 2);
      float v1474 = v270;
      float32x4_t v1484 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a18, 0);
      int32x4_t v1454 = vdupq_n_s32(v244);
      float32x4_t v1464 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a17, 1);
      int32x4_t v1436 = vdupq_n_s32(v245 >> 1);
      float32x4_t v1444 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a16, 0);
      int32x4_t v1418 = vdupq_n_s32(v243);
      float32x4_t v1428 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a15.i8, 1);
      do
      {
        float32x4_t v277 = (uint16x4_t *)&v273[v274 * v262];
        unint64_t v278 = (__int16 *)&v247[v262 * v248];
        unint64_t v279 = 0;
        if (v266)
        {
          float32x4_t v1520 = vmlaq_f32(v1370, v1380, v268);
          float32x4_t v1509 = vmlaq_f32(v1336, v1346, v268);
          float32x4_t v1409 = v268;
          float32x4_t v1528 = vmlaq_f32(v1320, v1328, v268);
          float32x4_t v280 = v1314;
          do
          {
            float32x4_t v281 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*v277)), v276);
            float32x4_t v282 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v277[1])), v276);
            __asm { FMOV            V1.4S, #4.0 }
            float32x4_t v284 = vaddq_f32(v280, _Q1);
            float32x4_t v285 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v277[2])), v276);
            v286.i64[0] = 0x4100000041000000;
            v286.i64[1] = 0x4100000041000000;
            float32x4_t v287 = vaddq_f32(v280, v286);
            __asm { FMOV            V0.4S, #12.0 }
            float32x4_t v289 = vaddq_f32(v280, _Q0);
            float32x4_t v290 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v277[3])), v276);
            float32x4_t v291 = vmlaq_f32(v271, vmlaq_n_f32(v1528, v280, v270), v281);
            float32x4_t v292 = vmlaq_f32(v271, vmlaq_n_f32(v1528, v284, v270), v282);
            float32x4_t v293 = vmlaq_f32(v271, vmlaq_n_f32(v1528, v287, v270), v285);
            float32x4_t v294 = vmlaq_f32(v271, vmlaq_n_f32(v1528, v289, v270), v290);
            int8x16_t v295 = (int8x16_t)vcgtzq_f32(v290);
            float32x4_t v296 = vmlaq_f32(v272, vmlaq_n_f32(v1520, v280, *(float *)&v254), v281);
            float32x4_t v297 = vmlaq_f32(v1428, vmlaq_n_f32(v1509, v280, *(float *)&v253), v281);
            float32x4_t v298 = vmlaq_f32(v272, vmlaq_n_f32(v1520, v284, *(float *)&v254), v282);
            float32x4_t v299 = vmlaq_f32(v1428, vmlaq_n_f32(v1509, v284, *(float *)&v253), v282);
            float32x4_t v300 = vmlaq_f32(v272, vmlaq_n_f32(v1520, v287, *(float *)&v254), v285);
            float32x4_t v301 = v271;
            float32x4_t v302 = vmlaq_f32(v1428, vmlaq_n_f32(v1509, v287, *(float *)&v253), v285);
            float32x4_t v303 = vmlaq_f32(v272, vmlaq_n_f32(v1520, v289, *(float *)&v254), v290);
            int8x16_t v304 = vandq_s8((int8x16_t)vcgezq_f32(v292), (int8x16_t)vcgtzq_f32(v282));
            float32x4_t v305 = v272;
            long long v306 = v254;
            long long v307 = v253;
            float32x4_t v308 = vmlaq_f32(v1428, vmlaq_n_f32(v1509, v289, *(float *)&v253), v290);
            int16x4x2_t v309 = (int16x4x2_t)vandq_s8((int8x16_t)vcgezq_f32(v293), (int8x16_t)vcgtzq_f32(v285));
            int32x4_t v310 = vcvtmq_s32_f32(vmlaq_f32(v1484, vdivq_f32(v1444, v291), v296));
            int32x4_t v311 = vcvtmq_s32_f32(vmlaq_f32(v1492, vdivq_f32(v1464, v291), v297));
            int32x4_t v312 = vcvtmq_s32_f32(vmlaq_f32(v1484, vdivq_f32(v1444, v292), v298));
            int32x4_t v313 = vcvtmq_s32_f32(vmlaq_f32(v1492, vdivq_f32(v1464, v292), v299));
            int32x4_t v314 = vcvtmq_s32_f32(vmlaq_f32(v1484, vdivq_f32(v1444, v293), v300));
            int32x4_t v315 = vcvtmq_s32_f32(vmlaq_f32(v1492, vdivq_f32(v1464, v293), v302));
            int32x4_t v316 = vcvtmq_s32_f32(vmlaq_f32(v1484, vdivq_f32(v1444, v294), v303));
            int32x4_t v317 = vcvtmq_s32_f32(vmlaq_f32(v1492, vdivq_f32(v1464, v294), v308));
            int8x16_t v318 = vandq_s8((int8x16_t)vcgezq_f32(v294), v295);
            v302.i64[0] = -1;
            v302.i64[1] = -1;
            int32x4_t v319 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1418, v311), (int8x16_t)vcgtq_s32(v1454, v310)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v311, (int8x16_t)v310), (int32x4_t)v302)), vandq_s8((int8x16_t)vcgezq_f32(v291), (int8x16_t)vcgtzq_f32(v281)));
            int32x4_t v320 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1418, v313), (int8x16_t)vcgtq_s32(v1454, v312)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v313, (int8x16_t)v312), (int32x4_t)v302)), v304);
            int32x4_t v321 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1418, v315), (int8x16_t)vcgtq_s32(v1454, v314)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v315, (int8x16_t)v314), (int32x4_t)v302)), (int8x16_t)v309);
            int8x8_t v322 = (int8x8_t)vmovn_s32(v319);
            int32x4_t v323 = (int32x4_t)vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgtq_s32(v1418, v317), (int8x16_t)vcgtq_s32(v1454, v316)), (int8x16_t)vcgtq_s32((int32x4_t)vorrq_s8((int8x16_t)v317, (int8x16_t)v316), (int32x4_t)v302)), v318);
            *(int16x4_t *)v318.i8 = vmovn_s32(v320);
            *(int8x8_t *)v302.f32 = vorn_s8((int8x8_t)vmovn_s32(v310), v322);
            *(int8x8_t *)v308.f32 = vorn_s8((int8x8_t)vmovn_s32(v311), v322);
            *(int16x4_t *)v296.f32 = vmovn_s32(v321);
            int8x8_t v324 = v278;
            vst2_s16(v324, (int16x4x2_t)v302);
            v324 += 8;
            v309.val[0] = (int16x4_t)vorn_s8((int8x8_t)vmovn_s32(v312), *(int8x8_t *)v318.i8);
            int8x8_t v325 = vorn_s8((int8x8_t)vmovn_s32(v313), *(int8x8_t *)v318.i8);
            *(int8x8_t *)v302.f32 = vorn_s8((int8x8_t)vmovn_s32(v314), *(int8x8_t *)v296.f32);
            *(int8x8_t *)v308.f32 = vorn_s8((int8x8_t)vmovn_s32(v315), *(int8x8_t *)v296.f32);
            *(int16x4_t *)v318.i8 = vmovn_s32(v323);
            int8x8_t v326 = v278 + 16;
            vst2_s16(v326, (int16x4x2_t)v302);
            *(int8x8_t *)v302.f32 = vorn_s8((int8x8_t)vmovn_s32(v316), *(int8x8_t *)v318.i8);
            *(int8x8_t *)v308.f32 = vorn_s8((int8x8_t)vmovn_s32(v317), *(int8x8_t *)v318.i8);
            int32x4_t v327 = v278 + 24;
            vst2_s16(v327, (int16x4x2_t)v302);
            long long v253 = v307;
            long long v254 = v306;
            float32x4_t v272 = v305;
            vst2_s16(v324, v309);
            float32x4_t v271 = v301;
            float v270 = v1474;
            float32x4_t v328 = (float32x4_t)vdupq_n_s32(0x447A0000u);
            int8x16_t v329 = (int8x16_t)vdivq_f32(v328, v291);
            int8x16_t v330 = (int8x16_t)vdivq_f32(v328, v292);
            int8x16_t v331 = (int8x16_t)vdivq_f32(v328, v293);
            int8x16_t v332 = (int8x16_t)vdivq_f32(v328, v294);
            int32x4_t v333 = vmlaq_s32(v312, v313, v1436);
            float32x4_t v334 = (float32x4_t)vandq_s8(v331, (int8x16_t)v321);
            int32x4_t v335 = vminq_s32(vmaxq_s32(vmlaq_s32(v310, v311, v1436), (int32x4_t)0), v1500);
            int32x4_t v336 = vminq_s32(vmaxq_s32(v333, (int32x4_t)0), v1500);
            int32x4_t v337 = vminq_s32(vmaxq_s32(vmlaq_s32(v314, v315, v1436), (int32x4_t)0), v1500);
            int32x4_t v269 = vminq_s32(vmaxq_s32(vmlaq_s32(v316, v317, v1436), (int32x4_t)0), v1500);
            float32x4_t v338 = (float32x4_t)vandq_s8(v332, (int8x16_t)v323);
            LODWORD(v324) = v335.i32[1];
            unsigned __int32 v339 = v335.i32[0];
            v323.i16[0] = v250[v335.u32[0]];
            *(float16x4_t *)v335.i8 = vcvt_f16_f32((float32x4_t)vandq_s8(v329, (int8x16_t)v319));
            *(short float *)&v250[v339] = fmaxl(*(short float *)v335.i16, *(short float *)v323.i16);
            *(float16x4_t *)v323.i8 = vcvt_f16_f32((float32x4_t)vandq_s8(v330, (int8x16_t)v320));
            *(short float *)&v250[v336.u32[1]] = fmaxl(*(short float *)&v323.i16[1], *(short float *)&v250[v336.u32[1]]);
            *(float16x4_t *)v334.f32 = vcvt_f16_f32(v334);
            *(short float *)&v250[v337.u32[2]] = fmaxl(*(short float *)&v334.i16[2], *(short float *)&v250[v337.u32[2]]);
            *(float16x4_t *)v338.f32 = vcvt_f16_f32(v338);
            *(short float *)&v250[v269.u32[3]] = fmaxl(*(short float *)&v338.i16[3], *(short float *)&v250[v269.u32[3]]);
            *(short float *)&v250[v324] = fmaxl(*(short float *)&v335.i16[1], *(short float *)&v250[v324]);
            *(short float *)&v250[v336.u32[2]] = fmaxl(*(short float *)&v323.i16[2], *(short float *)&v250[v336.u32[2]]);
            *(short float *)&v250[v337.u32[3]] = fmaxl(*(short float *)&v334.i16[3], *(short float *)&v250[v337.u32[3]]);
            *(short float *)&v250[v269.u32[0]] = fmaxl(*(short float *)v338.i16, *(short float *)&v250[v269.u32[0]]);
            *(short float *)&v250[v335.u32[2]] = fmaxl(*(short float *)&v335.i16[2], *(short float *)&v250[v335.u32[2]]);
            *(short float *)&v250[v336.u32[3]] = fmaxl(*(short float *)&v323.i16[3], *(short float *)&v250[v336.u32[3]]);
            *(short float *)&v250[v337.u32[0]] = fmaxl(*(short float *)v334.i16, *(short float *)&v250[v337.u32[0]]);
            *(short float *)&v250[v269.u32[1]] = fmaxl(*(short float *)&v338.i16[1], *(short float *)&v250[v269.u32[1]]);
            *(short float *)&v250[v335.u32[3]] = fmaxl(*(short float *)&v335.i16[3], *(short float *)&v250[v335.u32[3]]);
            LODWORD(v327) = v336.i32[0];
            *(short float *)v336.i16 = fmaxl(*(short float *)v323.i16, *(short float *)&v250[v336.u32[0]]);
            v276.i64[0] = 0x3E0000003E000000;
            v276.i64[1] = 0x3E0000003E000000;
            v250[v327] = v336.i16[0];
            *(short float *)&v250[v337.u32[1]] = fmaxl(*(short float *)&v334.i16[1], *(short float *)&v250[v337.u32[1]]);
            *(short float *)&v250[v269.u32[2]] = fmaxl(*(short float *)&v338.i16[2], *(short float *)&v250[v269.u32[2]]);
            __asm { FMOV            V0.4S, #16.0 }
            float32x4_t v280 = vaddq_f32(v280, _Q0);
            v277 += 4;
            v278 += 32;
            v279 += 16;
          }
          while (v279 < v266);
          unint64_t v279 = (((v241 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
          float32x4_t v256 = (float32x4_t)a14;
          float32x4_t v255 = (float32x4_t)a15;
          float32x4_t v258 = a12;
          float32x4_t v257 = a13;
          float32x2_t v260 = (float32x2_t)a18;
          float v259 = *(float *)&a11;
          float32x2_t v261 = v1367;
          float v263 = v1399;
          float v265 = v1390;
          float v267 = 0.5;
          float32x4_t v268 = v1409;
          float v275 = 0.125;
        }
        if (v279 < v241)
        {
          do
          {
            v269.i16[0] = v277->i16[0];
            float v341 = (float)v269.u32[0] * v275;
            int32x4_t v269 = (int32x4_t)vaddq_f32(v255, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v258, v263 * (float)((float)((float)((float)v279 + v267) - v259) * v341)), v257, v265 * (float)((float)((float)((float)v262 + v267) - *((float *)&a11 + 1)) * v341)), v256, v341));
            uint64_t v342 = 0xFFFF0000FFFFLL;
            if (*(float *)&v269.i32[2] >= 0.0 && v341 > 0.0)
            {
              *(int32x2_t *)v269.i8 = vcvt_s32_f32(vmla_f32(v260, vdiv_f32(v261, (float32x2_t)vdup_laneq_s32(v269, 2)), *(float32x2_t *)v269.i8));
              if (v269.i32[0] < 0)
              {
                v276.i64[0] = 0x3E0000003E000000;
                v276.i64[1] = 0x3E0000003E000000;
              }
              else
              {
                v276.i64[0] = 0x3E0000003E000000;
                v276.i64[1] = 0x3E0000003E000000;
                if ((__int16)v244 > v269.i32[0] && (v269.i32[1] & 0x80000000) == 0 && (__int16)v243 > (int)v269.u16[2])
                {
                  _S1 = 1000.0 / *(float *)&v269.i32[2];
                  __asm
                  {
                    FCVT            H1, S1
                    FCMP            H3, #0
                  }
                  if (_ZF) {
                    BOOL v346 = 1;
                  }
                  else {
                    BOOL v346 = _H3 < _H1;
                  }
                  if (v346) {
                    *(short float *)&v250[(v245 >> 1) * v269.u16[2] + v269.u32[0]] = _H1;
                  }
                  uint64_t v342 = v269.i64[0];
                }
              }
            }
            *unint64_t v278 = v342;
            v278[1] = WORD2(v342);
            ++v279;
            float32x4_t v277 = (uint16x4_t *)((char *)v277 + 2);
            v278 += 2;
          }
          while (v241 != v279);
        }
        ++v262;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v268 = vaddq_f32(v268, _Q0);
      }
      while (v262 != v240);
    }
LABEL_86:
    size_t v348 = v29;
LABEL_332:
    CVPixelBufferUnlockBaseAddress(v348, 1uLL);
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    float32x4_t v1128 = v1354;
LABEL_399:
    CVPixelBufferUnlockBaseAddress(v1128, 0);
    return 0;
  }
LABEL_307:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_402:
    size_t v1278 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
    PixelBufferUtils::pixelFormatAsString(v1278, (char *)&v1537);
    if ((v1537.width & 0x8000000000000000) == 0) {
      float32x4_t v1279 = &v1537;
    }
    else {
      float32x4_t v1279 = (vImage_Buffer *)v1537.data;
    }
    LODWORD(buf.data) = 136315138;
    *(void **)((char *)&buf.data + 4) = v1279;
    _os_log_error_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_ERROR, "illegal output pixel format in reprojection: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(v1537.width) < 0) {
      operator delete(v1537.data);
    }
  }
  return -22950;
}

void std::__tree<std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>,std::__map_value_compare<std::string,std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>,std::__map_value_compare<std::string,std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>,std::__map_value_compare<std::string,std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::multiset<Element *,Element::ElementCompare,std::allocator<Element *>> *>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void sub_247EECC1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EECFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_265232868, MEMORY[0x263F8C060]);
}

void sub_247EED08C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void sub_247EED1E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Node::~Node(Node *this)
{
  CFDictionaryRef v3 = (void *)*((void *)this + 2);
  int v2 = (void *)*((void *)this + 3);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        MEMORY[0x24C570740](*v3, 0x1020C40CBED515FLL);
        int v2 = (void *)*((void *)this + 3);
      }
      ++v3;
    }
    while (v3 != v2);
    CFDictionaryRef v3 = (void *)*((void *)this + 2);
  }
  *((void *)this + 3) = v3;
  if (v3) {
    operator delete(v3);
  }
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void std::vector<Element *>::__throw_length_error[abi:ne180100]()
{
}

void sub_247EED490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__tree<Element *,Element::ElementCompare,std::allocator<Element *>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<Element *,Element::ElementCompare,std::allocator<Element *>>::destroy(*a1);
    std::__tree<Element *,Element::ElementCompare,std::allocator<Element *>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  BOOL v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    float32x4_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    BOOL v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

id getPropertyType(objc_property *a1)
{
  uint64_t v1 = [NSString stringWithUTF8String:property_getAttributes(a1)];
  int v2 = [v1 componentsSeparatedByString:@","];
  CFDictionaryRef v3 = [v2 objectAtIndex:0];

  CFDictionaryRef v4 = [v3 substringFromIndex:1];

  return v4;
}

void sub_247EED8C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL isPropertyDerivedFromClass(objc_property *a1, objc_class *a2)
{
  CFDictionaryRef v3 = getPropertyType(a1);
  CFDictionaryRef v4 = [v3 stringByReplacingOccurrencesOfString:@"@" withString:&stru_26FC22BA0];

  BOOL v5 = [v4 stringByReplacingOccurrencesOfString:@"\"" withString:&stru_26FC22BA0];

  for (uint64_t i = NSClassFromString(v5); i != a2 && i; uint64_t i = class_getSuperclass(i))
    ;
  BOOL v7 = i != 0;

  return v7;
}

void sub_247EED994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t propertyTypeMatch(uint64_t a1, uint64_t a2)
{
  BOOL v2 = (unint64_t)(a1 - 5) <= 2 && (unint64_t)(a2 - 5) < 3;
  if ((a1 & 0xFFFFFFFFFFFFFFFDLL) == 0) {
    BOOL v2 = (a2 & 0xFFFFFFFFFFFFFFFDLL) == 0;
  }
  return a1 == a2 || v2;
}

BOOL isArrayType(uint64_t a1)
{
  return (unint64_t)(a1 - 5) < 3;
}

uint64_t propertyOptionType(objc_property *a1)
{
  uint64_t v1 = getPropertyType(a1);
  if ([v1 isEqualToString:@"f"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"@\"NSString\""])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"@\"NSArray\""])
  {
    uint64_t v2 = 7;
  }
  else if (([v1 isEqualToString:@"q"] & 1) != 0 {
         || ([v1 isEqualToString:@"I"] & 1) != 0)
  }
  {
    uint64_t v2 = 2;
  }
  else if (([v1 isEqualToString:@"c"] & 1) != 0 {
         || ([v1 isEqualToString:@"B"] & 1) != 0)
  }
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"Q"])
  {
    uint64_t v2 = 0;
  }
  else
  {
    printf("ADArgumentParser Error: cannot find matching type for %s.\n", (const char *)[v1 UTF8String]);
    uint64_t v2 = 9;
  }

  return v2;
}

void sub_247EEDB20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void getDocoptValueFromMap(void *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  id v5 = a1;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v5 UTF8String]);
  float32x4_t v8 = *(void **)(a2 + 8);
  std::string::size_type v6 = (void *)(a2 + 8);
  BOOL v7 = v8;
  if (!v8) {
    goto LABEL_8;
  }
  float32x4_t v9 = v6;
  do
  {
    BOOL v10 = std::less<std::string>::operator()[abi:ne180100](v7 + 4, __p);
    float32x4_t v11 = v7 + 1;
    if (!v10)
    {
      float32x4_t v11 = v7;
      float32x4_t v9 = v7;
    }
    BOOL v7 = (void *)*v11;
  }
  while (*v11);
  if (v9 == v6 || std::less<std::string>::operator()[abi:ne180100](__p, v9 + 4)) {
LABEL_8:
  }
    float32x4_t v9 = v6;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v6 == v9)
  {
    *a3 = 0;
  }
  else
  {
    int v12 = *((_DWORD *)v9 + 14);
    *a3 = v12;
    int8x16_t v13 = (std::string *)(a3 + 2);
    switch(v12)
    {
      case 1:
        v13->__r_.__value_.__s.__data_[0] = *((unsigned char *)v9 + 64);
        break;
      case 2:
        v13->__r_.__value_.__r.__words[0] = v9[8];
        break;
      case 3:
        if (*((char *)v9 + 87) < 0)
        {
          std::string::__init_copy_ctor_external(v13, (const std::string::value_type *)v9[8], v9[9]);
        }
        else
        {
          long long v14 = *((_OWORD *)v9 + 4);
          v13->__r_.__value_.__r.__words[2] = v9[10];
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
        }
        break;
      case 4:
        v13->__r_.__value_.__r.__words[0] = 0;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v13, (long long *)v9[8], (long long *)v9[9], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[9] - v9[8]) >> 3));
        break;
      default:
        break;
    }
  }
}

void sub_247EEDC9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    BOOL v7 = (std::string *)v6[1];
    int v12 = v7;
    int8x16_t v13 = v7;
    v10[0] = v6 + 2;
    v10[1] = &v12;
    v10[2] = &v13;
    char v11 = 0;
    if (a2 == a3)
    {
      float32x4_t v8 = v7;
    }
    else
    {
      float32x4_t v8 = v7;
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *((void *)a2 + 1));
          float32x4_t v8 = v13;
        }
        else
        {
          long long v9 = *a2;
          v8->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
          *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
        }
        a2 = (long long *)((char *)a2 + 24);
        int8x16_t v13 = ++v8;
      }
      while (a2 != a3);
    }
    char v11 = 1;
    uint64_t result = (void *)std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    v6[1] = v8;
  }
  return result;
}

void sub_247EEDD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<Element *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    id v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v2);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

void __clang_call_terminate(void *a1)
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

uint64_t setProperty(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a5;
  unsigned int v12 = *(_DWORD *)a4;
  if (!*(_DWORD *)a4) {
    goto LABEL_71;
  }
  switch(a3)
  {
    case 1:
      int8x16_t v13 = NSNumber;
      docopt::value::throwIfNotKind((unsigned int *)a4, 1);
      long long v14 = [v13 numberWithInteger:*(unsigned __int8 *)(a4 + 8)];
      [v9 setValue:v14 forKey:v10];
      goto LABEL_70;
    case 2:
      long long v18 = NSNumber;
      if (v12 == 3)
      {
        __idx.__r_.__value_.__r.__words[0] = 0;
        uint64_t v19 = std::stol((const std::string *)(a4 + 8), (size_t *)&__idx, 10);
        if (*(char *)(a4 + 31) < 0) {
          uint64_t v20 = *(void *)(a4 + 16);
        }
        else {
          uint64_t v20 = *(unsigned __int8 *)(a4 + 31);
        }
        if (__idx.__r_.__value_.__r.__words[0] != v20)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&p_p, (const void **)(a4 + 8));
          MEMORY[0x24C570500](exception, &p_p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
      }
      else
      {
        docopt::value::throwIfNotKind((unsigned int *)a4, 2);
        uint64_t v19 = *(void *)(a4 + 8);
      }
      long long v14 = [v18 numberWithInteger:v19];
      [v9 setValue:v14 forKey:v10];
      goto LABEL_70;
    case 3:
      docopt::value::throwIfNotKind((unsigned int *)a4, 3);
      *(float *)&double v15 = std::stof((const std::string *)(a4 + 8), 0);
      long long v14 = [NSNumber numberWithFloat:v15];
      [v9 setValue:v14 forKey:v10];
      goto LABEL_70;
    case 4:
      char v16 = NSString;
      docopt::value::throwIfNotKind((unsigned int *)a4, 3);
      int v17 = (void *)(a4 + 8);
      if (*(char *)(a4 + 31) < 0) {
        int v17 = (void *)*v17;
      }
      long long v14 = [v16 stringWithUTF8String:v17];
      if ([v14 isEqualToString:@"(null)"])
      {

        long long v14 = 0;
      }
      [v9 setValue:v14 forKey:v10];
      goto LABEL_70;
    default:
      if ((unint64_t)(a3 - 5) <= 1)
      {
        unsigned int v42 = *(_DWORD *)a4;
        switch(v12)
        {
          case 1u:
            __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a4 + 8);
            break;
          case 2u:
            __p.__r_.__value_.__r.__words[0] = *(void *)(a4 + 8);
            break;
          case 3u:
            if (*(char *)(a4 + 31) < 0) {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a4 + 8), *(void *)(a4 + 16));
            }
            else {
              std::string __p = *(std::string *)(a4 + 8);
            }
            break;
          case 4u:
            memset(&__p, 0, sizeof(__p));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p, *(long long **)(a4 + 8), *(long long **)(a4 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 16) - *(void *)(a4 + 8)) >> 3));
            break;
          default:
            break;
        }
        docopt::value::throwIfNotKind(&v42, 4);
        p_p = 0;
        float v46 = 0;
        uint64_t v47 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&p_p, (long long *)__p.__r_.__value_.__l.__data_, (long long *)__p.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
        long long v14 = [MEMORY[0x263EFF980] arrayWithCapacity:0xAAAAAAAAAAAAAAABLL * (((char *)v46 - (char *)p_p) >> 3)];
        p_data = (void **)&p_p->__r_.__value_.__l.__data_;
        int v29 = (void **)&v46->__r_.__value_.__l.__data_;
        if (p_p != v46)
        {
          do
          {
            if (*((char *)p_data + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__idx, (const std::string::value_type *)*p_data, (std::string::size_type)p_data[1]);
            }
            else
            {
              long long v30 = *(_OWORD *)p_data;
              __idx.__r_.__value_.__r.__words[2] = (std::string::size_type)p_data[2];
              *(_OWORD *)&__idx.__r_.__value_.__l.__data_ = v30;
            }
            *(float *)&double v31 = std::stof(&__idx, 0);
            int v32 = [NSNumber numberWithFloat:v31];
            [v14 addObject:v32];

            if (SHIBYTE(__idx.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__idx.__r_.__value_.__l.__data_);
            }
            p_data += 3;
          }
          while (p_data != v29);
        }
        __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
        if (v42 == 4)
        {
          p_p = &__p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
        }
        else if (v42 == 3 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        [v9 setValue:v14 forKey:v10];
        goto LABEL_70;
      }
      if (a3)
      {
        if (a3 == 7)
        {
          unsigned int v40 = *(_DWORD *)a4;
          switch(v12)
          {
            case 1u:
              v41.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a4 + 8);
              break;
            case 2u:
              v41.__r_.__value_.__r.__words[0] = *(void *)(a4 + 8);
              break;
            case 3u:
              if (*(char *)(a4 + 31) < 0) {
                std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(a4 + 8), *(void *)(a4 + 16));
              }
              else {
                std::string v41 = *(std::string *)(a4 + 8);
              }
              break;
            case 4u:
              memset(&v41, 0, sizeof(v41));
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v41, *(long long **)(a4 + 8), *(long long **)(a4 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 16) - *(void *)(a4 + 8)) >> 3));
              break;
            default:
              break;
          }
          docopt::value::throwIfNotKind(&v40, 4);
          p_p = 0;
          float v46 = 0;
          uint64_t v47 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&p_p, (long long *)v41.__r_.__value_.__l.__data_, (long long *)v41.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41.__r_.__value_.__l.__size_ - v41.__r_.__value_.__r.__words[0]) >> 3));
          long long v14 = [MEMORY[0x263EFF980] arrayWithCapacity:0xAAAAAAAAAAAAAAABLL * (((char *)v46 - (char *)p_p) >> 3)];
          float32x4_t v33 = (void **)&p_p->__r_.__value_.__l.__data_;
          int32x2_t v34 = (void **)&v46->__r_.__value_.__l.__data_;
          if (p_p != v46)
          {
            do
            {
              if (*((char *)v33 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&__idx, (const std::string::value_type *)*v33, (std::string::size_type)v33[1]);
              }
              else
              {
                long long v35 = *(_OWORD *)v33;
                __idx.__r_.__value_.__r.__words[2] = (std::string::size_type)v33[2];
                *(_OWORD *)&__idx.__r_.__value_.__l.__data_ = v35;
              }
              if ((__idx.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_idx = &__idx;
              }
              else {
                p_idx = (std::string *)__idx.__r_.__value_.__r.__words[0];
              }
              float32x4_t v37 = [NSString stringWithUTF8String:p_idx];
              [v14 addObject:v37];

              if (SHIBYTE(__idx.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__idx.__r_.__value_.__l.__data_);
              }
              v33 += 3;
            }
            while (v33 != v34);
          }
          __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
          if (v40 == 4)
          {
            p_p = &v41;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
          }
          else if (v40 == 3 && SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v41.__r_.__value_.__l.__data_);
          }
          [v9 setValue:v14 forKey:v10];
          goto LABEL_70;
        }
        printf("ADArgumentParser Error: cannot find matching for option %s of type %lu", (const char *)[v10 UTF8String], a3);
LABEL_34:
        uint64_t v27 = 0;
        goto LABEL_72;
      }
      size_t v21 = NSString;
      docopt::value::throwIfNotKind((unsigned int *)a4, 3);
      size_t v22 = (void *)(a4 + 8);
      if (*(char *)(a4 + 31) < 0) {
        size_t v22 = (void *)*v22;
      }
      long long v14 = [v21 stringWithUTF8String:v22];
      size_t v23 = [v11 objectForKeyedSubscript:v14];
      unsigned int v24 = v23;
      if (!v23)
      {
        id v26 = v14;
        printf("ADArgumentParser Error: %s is not a legal option for %s\n", (const char *)[v26 UTF8String], (const char *)objc_msgSend(v10, "UTF8String"));

        goto LABEL_34;
      }
      unsigned int v25 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v23, "integerValue"));
      [v9 setValue:v25 forKey:v10];

LABEL_70:
LABEL_71:
      uint64_t v27 = 1;
LABEL_72:

      return v27;
  }
}

void sub_247EEE678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2 == 1)
  {
    __cxa_get_exception_ptr(a1);
    a12.__vftable = (std::exception_vtbl *)(MEMORY[0x263F8C3C0] + 16);
    __cxa_begin_catch(a1);
    puts("encountered error during argument parsing. user input does not match expected argument type");
    std::exception::~exception(&a12);
    __cxa_end_catch();
    JUMPOUT(0x247EEE314);
  }

  _Unwind_Resume(a1);
}

unsigned int *docopt::value::throwIfNotKind(unsigned int *result, int a2)
{
  if (*result != a2)
  {
    uint64_t v3 = result;
    std::string::basic_string[abi:ne180100]<0>(&v7, "Illegal cast to ");
    std::string::append(&v7, off_2652329E8[a2]);
    std::string::append(&v7, "; type is actually ");
    uint64_t v4 = *v3;
    if (v4 > 4) {
      id v5 = "unknown";
    }
    else {
      id v5 = off_2652329E8[v4];
    }
    std::string::append(&v7, v5);
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x24C570500](exception, &v7);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_247EEE95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void docopt::value::~value(void **this)
{
  if (*(_DWORD *)this == 4)
  {
    uint64_t v1 = this + 1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
  }
  else if (*(_DWORD *)this == 3 && *((char *)this + 31) < 0)
  {
    operator delete(this[1]);
  }
}

void *std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, const void **a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 >= 0) {
    size_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v3 = (size_t)a2[1];
  }
  unint64_t v4 = v3 + 33;
  if (v3 + 33 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 <= 0x16)
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    *((unsigned char *)a1 + 23) = v4;
    if ((v4 & 0x80u) == 0) {
      std::string v7 = a1;
    }
    else {
      std::string v7 = 0;
    }
LABEL_12:
    if (v2 >= 0) {
      id v11 = a2;
    }
    else {
      id v11 = *a2;
    }
    uint64_t result = memmove(v7, v11, v3);
    goto LABEL_16;
  }
  uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v8 = v4 | 7;
  }
  uint64_t v9 = v8 + 1;
  uint64_t result = operator new(v8 + 1);
  std::string v7 = result;
  a1[1] = v4;
  a1[2] = v9 | 0x8000000000000000;
  *a1 = result;
  if (v3) {
    goto LABEL_12;
  }
LABEL_16:
  strcpy((char *)v7 + v3, " contains non-numeric characters.");
  return result;
}

void ADJasperPerformanceOverride::ADJasperPerformanceOverride(ADJasperPerformanceOverride *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

void ADJasperPerformanceOverride::initFromCsv(uint64_t *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    MEMORY[0x24C570740](v4, 0x1000C40D8B73999);
  }
  id v10 = a2;
  if (*((char *)a2 + 23) >= 0) {
    id v5 = (const char *)a2;
  }
  else {
    id v5 = (const char *)*a2;
  }
  if (!stat(v5, &v11))
  {
    std::string::size_type v6 = NSString;
    if (*((char *)v10 + 23) >= 0) {
      std::string v7 = v10;
    }
    else {
      std::string v7 = (uint64_t *)*v10;
    }
    uint64_t v8 = [NSString stringWithUTF8String:v7];
    uint64_t v9 = [v6 stringWithContentsOfFile:v8 encoding:4 error:0];

    [v9 componentsSeparatedByString:@"\n"];
    objc_claimAutoreleasedReturnValue();
    operator new();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)vImage_Buffer buf = 0;
    _os_log_error_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_ERROR, "illegal PerformanceOverride csv path", buf, 2u);
  }
}

void sub_247EEF138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

BOOL ADJasperPerformanceOverride::getOverrides(void *a1, unsigned int a2, unsigned int a3, void *a4)
{
  BOOL result = a2 < 8 && a3 < 0x90;
  if (result) {
    *a4 = *(void *)(*a1 + 1152 * a2 + 8 * a3);
  }
  return result;
}

uint64_t ADJasperPerformanceOverride::resetOverrides(ADJasperPerformanceOverride *this)
{
  uint64_t result = *(void *)this;
  *(void *)this = 0;
  if (result) {
    JUMPOUT(0x24C570740);
  }
  return result;
}

void sub_247EEF330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EEF3FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EEF4AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EEF584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EEF704(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_247EEF8AC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_247EEF9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_247EF00EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::locale a28,uint64_t a29)
{
  __cxa_end_catch();
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  double v31 = *(void **)v29;
  if (*(void *)v29)
  {
    *(void *)(v29 + 8) = v31;
    operator delete(v31);
  }
  std::ifstream::~ifstream(&a29);

  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a1);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x24C5705E0](a1 + 2);
  std::istream::~istream();
  MEMORY[0x24C5706E0](a1 + 53);
  return a1;
}

void sub_247EF0960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EF0C9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float compareRawBuffers<float,float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, char a7, char a8, float a9)
{
  if (a9 <= 0.0 || a9 > 1.0)
  {
    NSLog(&cfstr_CannotCompareW.isa, a9);
    return 1.0e17;
  }
  if (a6)
  {
    long long v14 = 0;
    double v15 = 0;
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    while (1)
    {
      int v48 = v18;
      if (a5) {
        break;
      }
      unsigned int v24 = v15;
LABEL_48:
      unint64_t v17 = (v48 + 1);
      double v15 = v24;
      int v18 = v48 + 1;
      if (v17 >= a6) {
        goto LABEL_51;
      }
    }
    LODWORD(v19) = 0;
    uint64_t v20 = (float *)(a3 + v17 * a4);
    size_t v21 = (float *)(a1 + v17 * a2);
    while (1)
    {
      float v22 = *v21;
      float v23 = *v20;
      if (*v21 != 0.0 || (a7 & 1) == 0)
      {
        if (v23 != 0.0)
        {
          float v25 = fabsf((float)(v23 - v22) / v23);
          if ((unint64_t)v15 >= v16)
          {
            uint64_t v26 = v15 - v14;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 62) {
              goto LABEL_62;
            }
            if ((uint64_t)(v16 - (void)v14) >> 1 > v27) {
              unint64_t v27 = (uint64_t)(v16 - (void)v14) >> 1;
            }
            if (v16 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v27;
            }
            if (v28) {
              unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v28);
            }
            else {
              uint64_t v29 = 0;
            }
            double v31 = (float *)(v28 + 4 * v26);
            *double v31 = v25;
            unsigned int v24 = v31 + 1;
            while (v15 != v14)
            {
              int v32 = *((_DWORD *)v15-- - 1);
              *((_DWORD *)v31-- - 1) = v32;
            }
LABEL_30:
            unint64_t v16 = v28 + 4 * v29;
            if (v14) {
              operator delete(v14);
            }
            long long v14 = v31;
            goto LABEL_33;
          }
LABEL_25:
          *double v15 = v25;
          unsigned int v24 = v15 + 1;
          goto LABEL_33;
        }
        if ((a8 & 1) == 0)
        {
          float v30 = v22 / 0.0001;
          float v25 = fabsf(v30);
          if ((unint64_t)v15 >= v16)
          {
            uint64_t v33 = v15 - v14;
            unint64_t v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 62) {
LABEL_62:
            }
              std::vector<Element *>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v16 - (void)v14) >> 1 > v34) {
              unint64_t v34 = (uint64_t)(v16 - (void)v14) >> 1;
            }
            if (v16 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v34;
            }
            if (v28) {
              unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v28);
            }
            else {
              uint64_t v29 = 0;
            }
            double v31 = (float *)(v28 + 4 * v33);
            *double v31 = v25;
            unsigned int v24 = v31 + 1;
            while (v15 != v14)
            {
              int v35 = *((_DWORD *)v15-- - 1);
              *((_DWORD *)v31-- - 1) = v35;
            }
            goto LABEL_30;
          }
          goto LABEL_25;
        }
      }
      unsigned int v24 = v15;
LABEL_33:
      unint64_t v19 = (v19 + 1);
      ++v21;
      ++v20;
      double v15 = v24;
      if (v19 >= a5) {
        goto LABEL_48;
      }
    }
  }
  long long v14 = 0;
  unsigned int v24 = 0;
LABEL_51:
  int v36 = (int)(float)((float)(unint64_t)(v24 - v14) * a9);
  if (v36 <= 0)
  {
    float v41 = 1.0e17;
    float v11 = 1.0e17;
    if (!v14) {
      return v11;
    }
  }
  else
  {
    std::__sort<std::__less<float,float> &,float *>();
    if (v36 < 2)
    {
      float v37 = 0.0;
    }
    else
    {
      float v37 = 0.0;
      float32x4_t v38 = v14;
      uint64_t v39 = (v36 - 1);
      do
      {
        float v40 = *v38++;
        float v37 = v37 + v40;
        --v39;
      }
      while (v39);
    }
    float v41 = (float)(v37 / (float)(v36 - 1)) * 100.0;
  }
  float v11 = v41;
  operator delete(v14);
  return v11;
}

void sub_247EF10D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

float compareRawBuffers<half,half>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, char a7, char a8, float a9)
{
  if (a9 <= 0.0 || a9 > 1.0)
  {
    NSLog(&cfstr_CannotCompareW.isa, a9);
    return 1.0e17;
  }
  if (a6)
  {
    long long v14 = 0;
    double v15 = 0;
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    while (1)
    {
      int v54 = v18;
      if (a5) {
        break;
      }
      unint64_t v27 = v15;
LABEL_49:
      unint64_t v17 = (v54 + 1);
      double v15 = v27;
      int v18 = v54 + 1;
      if (v17 >= a6) {
        goto LABEL_52;
      }
    }
    LODWORD(v19) = 0;
    uint64_t v20 = a3 + v17 * a4;
    uint64_t v21 = a1 + v17 * a2;
    while (1)
    {
      __asm { FCMP            H0, #0 }
      if (!_ZF || (a7 & 1) == 0)
      {
        __asm { FCMP            H1, #0 }
        if (!_ZF)
        {
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          float v31 = fabsf((float)(_S1 - _S0) / _S1);
          if ((unint64_t)v15 >= v16)
          {
            uint64_t v32 = v15 - v14;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 62) {
              goto LABEL_63;
            }
            if ((uint64_t)(v16 - (void)v14) >> 1 > v33) {
              unint64_t v33 = (uint64_t)(v16 - (void)v14) >> 1;
            }
            if (v16 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v33;
            }
            if (v34) {
              unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v34);
            }
            else {
              uint64_t v35 = 0;
            }
            float v37 = (float *)(v34 + 4 * v32);
            *float v37 = v31;
            unint64_t v27 = v37 + 1;
            while (v15 != v14)
            {
              int v38 = *((_DWORD *)v15-- - 1);
              *((_DWORD *)v37-- - 1) = v38;
            }
LABEL_31:
            unint64_t v16 = v34 + 4 * v35;
            if (v14) {
              operator delete(v14);
            }
            long long v14 = v37;
            goto LABEL_34;
          }
LABEL_26:
          *double v15 = v31;
          unint64_t v27 = v15 + 1;
          goto LABEL_34;
        }
        if ((a8 & 1) == 0)
        {
          __asm { FCVT            D0, H0 }
          *(float *)&_D0 = _D0 / 0.0001;
          float v31 = fabsf(*(float *)&_D0);
          if ((unint64_t)v15 >= v16)
          {
            uint64_t v39 = v15 - v14;
            unint64_t v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 62) {
LABEL_63:
            }
              std::vector<Element *>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v16 - (void)v14) >> 1 > v40) {
              unint64_t v40 = (uint64_t)(v16 - (void)v14) >> 1;
            }
            if (v16 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v40;
            }
            if (v34) {
              unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v34);
            }
            else {
              uint64_t v35 = 0;
            }
            float v37 = (float *)(v34 + 4 * v39);
            *float v37 = v31;
            unint64_t v27 = v37 + 1;
            while (v15 != v14)
            {
              int v41 = *((_DWORD *)v15-- - 1);
              *((_DWORD *)v37-- - 1) = v41;
            }
            goto LABEL_31;
          }
          goto LABEL_26;
        }
      }
      unint64_t v27 = v15;
LABEL_34:
      unint64_t v19 = (v19 + 1);
      v21 += 2;
      v20 += 2;
      double v15 = v27;
      if (v19 >= a5) {
        goto LABEL_49;
      }
    }
  }
  long long v14 = 0;
  unint64_t v27 = 0;
LABEL_52:
  int v42 = (int)(float)((float)(unint64_t)(v27 - v14) * a9);
  if (v42 <= 0)
  {
    float v47 = 1.0e17;
    float v11 = 1.0e17;
    if (!v14) {
      return v11;
    }
  }
  else
  {
    std::__sort<std::__less<float,float> &,float *>();
    if (v42 < 2)
    {
      float v43 = 0.0;
    }
    else
    {
      float v43 = 0.0;
      float v44 = v14;
      uint64_t v45 = (v42 - 1);
      do
      {
        float v46 = *v44++;
        float v43 = v43 + v46;
        --v45;
      }
      while (v45);
    }
    float v47 = (float)(v43 / (float)(v42 - 1)) * 100.0;
  }
  float v11 = v47;
  operator delete(v14);
  return v11;
}

void sub_247EF1514(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_247EF280C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t isF16Type(int a1)
{
  uint64_t result = 1;
  if (a1 > 1751410031)
  {
    if (a1 != 1751410032 && a1 != 1751411059)
    {
      int v3 = 1919365992;
LABEL_8:
      if (a1 != v3) {
        return 0;
      }
    }
  }
  else if (a1 != 843264104 && a1 != 1278226536)
  {
    int v3 = 1380411457;
    goto LABEL_8;
  }
  return result;
}

float compareRawBuffers<half,float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, char a7, char a8, float a9)
{
  if (a9 <= 0.0 || a9 > 1.0)
  {
    NSLog(&cfstr_CannotCompareW.isa, a9);
    return 1.0e17;
  }
  if (a6)
  {
    long long v14 = 0;
    double v15 = 0;
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    while (1)
    {
      int v53 = v18;
      if (a5) {
        break;
      }
      unint64_t v28 = v15;
LABEL_49:
      unint64_t v17 = (v53 + 1);
      double v15 = v28;
      int v18 = v53 + 1;
      if (v17 >= a6) {
        goto LABEL_52;
      }
    }
    LODWORD(v19) = 0;
    uint64_t v20 = (float *)(a3 + v17 * a4);
    uint64_t v21 = a1 + v17 * a2;
    while (1)
    {
      float v22 = *v20;
      __asm { FCMP            H0, #0 }
      if (!_ZF || (a7 & 1) == 0)
      {
        if (v22 != 0.0)
        {
          __asm { FCVT            S0, H0 }
          float v30 = fabsf((float)(v22 - _S0) / v22);
          if ((unint64_t)v15 >= v16)
          {
            uint64_t v31 = v15 - v14;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 62) {
              goto LABEL_63;
            }
            if ((uint64_t)(v16 - (void)v14) >> 1 > v32) {
              unint64_t v32 = (uint64_t)(v16 - (void)v14) >> 1;
            }
            if (v16 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v32;
            }
            if (v33) {
              unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v33);
            }
            else {
              uint64_t v34 = 0;
            }
            int v36 = (float *)(v33 + 4 * v31);
            *int v36 = v30;
            unint64_t v28 = v36 + 1;
            while (v15 != v14)
            {
              int v37 = *((_DWORD *)v15-- - 1);
              *((_DWORD *)v36-- - 1) = v37;
            }
LABEL_31:
            unint64_t v16 = v33 + 4 * v34;
            if (v14) {
              operator delete(v14);
            }
            long long v14 = v36;
            goto LABEL_34;
          }
LABEL_26:
          *double v15 = v30;
          unint64_t v28 = v15 + 1;
          goto LABEL_34;
        }
        if ((a8 & 1) == 0)
        {
          __asm { FCVT            D0, H0 }
          *(float *)&_D0 = _D0 / 0.0001;
          float v30 = fabsf(*(float *)&_D0);
          if ((unint64_t)v15 >= v16)
          {
            uint64_t v38 = v15 - v14;
            unint64_t v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 62) {
LABEL_63:
            }
              std::vector<Element *>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v16 - (void)v14) >> 1 > v39) {
              unint64_t v39 = (uint64_t)(v16 - (void)v14) >> 1;
            }
            if (v16 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v39;
            }
            if (v33) {
              unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v33);
            }
            else {
              uint64_t v34 = 0;
            }
            int v36 = (float *)(v33 + 4 * v38);
            *int v36 = v30;
            unint64_t v28 = v36 + 1;
            while (v15 != v14)
            {
              int v40 = *((_DWORD *)v15-- - 1);
              *((_DWORD *)v36-- - 1) = v40;
            }
            goto LABEL_31;
          }
          goto LABEL_26;
        }
      }
      unint64_t v28 = v15;
LABEL_34:
      unint64_t v19 = (v19 + 1);
      v21 += 2;
      ++v20;
      double v15 = v28;
      if (v19 >= a5) {
        goto LABEL_49;
      }
    }
  }
  long long v14 = 0;
  unint64_t v28 = 0;
LABEL_52:
  int v41 = (int)(float)((float)(unint64_t)(v28 - v14) * a9);
  if (v41 <= 0)
  {
    float v46 = 1.0e17;
    float v11 = 1.0e17;
    if (!v14) {
      return v11;
    }
  }
  else
  {
    std::__sort<std::__less<float,float> &,float *>();
    if (v41 < 2)
    {
      float v42 = 0.0;
    }
    else
    {
      float v42 = 0.0;
      float v43 = v14;
      uint64_t v44 = (v41 - 1);
      do
      {
        float v45 = *v43++;
        float v42 = v42 + v45;
        --v44;
      }
      while (v44);
    }
    float v46 = (float)(v42 / (float)(v41 - 1)) * 100.0;
  }
  float v11 = v46;
  operator delete(v14);
  return v11;
}

void sub_247EF2CF0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

float compareRawBuffers<unsigned char,unsigned char>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, char a7, char a8, float a9)
{
  if (a9 <= 0.0 || a9 > 1.0)
  {
    NSLog(&cfstr_CannotCompareW.isa, a9);
    return 1.0e17;
  }
  if (a6)
  {
    long long v14 = 0;
    double v15 = 0;
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    while (1)
    {
      int v50 = v18;
      if (a5) {
        break;
      }
      float v23 = v15;
LABEL_52:
      unint64_t v17 = (v50 + 1);
      double v15 = v23;
      int v18 = v50 + 1;
      if (v17 >= a6) {
        goto LABEL_55;
      }
    }
    LODWORD(v19) = 0;
    uint64_t v20 = (unsigned char *)(a3 + v17 * a4);
    uint64_t v21 = (unsigned char *)(a1 + v17 * a2);
    while (1)
    {
      unsigned int v22 = *v21;
      if (*v21 || (a7 & 1) == 0)
      {
        if (*v20)
        {
          float v24 = fabsf((float)((float)*v20 - (float)v22) / (float)*v20);
          if ((unint64_t)v15 >= v16)
          {
            uint64_t v26 = v15 - v14;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 62) {
              goto LABEL_66;
            }
            if ((uint64_t)(v16 - (void)v14) >> 1 > v27) {
              unint64_t v27 = (uint64_t)(v16 - (void)v14) >> 1;
            }
            if (v16 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v27;
            }
            if (v28) {
              unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v28);
            }
            else {
              uint64_t v29 = 0;
            }
            float v30 = (float *)(v28 + 4 * v26);
            *float v30 = v24;
            float v23 = v30 + 1;
            while (v15 != v14)
            {
              int v31 = *((_DWORD *)v15-- - 1);
              *((_DWORD *)v30-- - 1) = v31;
            }
            unint64_t v16 = v28 + 4 * v29;
            if (v14) {
              operator delete(v14);
            }
            long long v14 = v30;
          }
          else
          {
            *double v15 = v24;
            float v23 = v15 + 1;
          }
          goto LABEL_34;
        }
        if ((a8 & 1) == 0)
        {
          float v25 = (double)v22 / 0.0001;
          if ((unint64_t)v15 >= v16)
          {
            uint64_t v32 = v15 - v14;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 62) {
LABEL_66:
            }
              std::vector<Element *>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v16 - (void)v14) >> 1 > v33) {
              unint64_t v33 = (uint64_t)(v16 - (void)v14) >> 1;
            }
            if (v16 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v33;
            }
            if (v34) {
              unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v34);
            }
            else {
              uint64_t v35 = 0;
            }
            int v36 = (float *)(v34 + 4 * v32);
            *int v36 = v25;
            float v23 = v36 + 1;
            while (v15 != v14)
            {
              int v37 = *((_DWORD *)v15-- - 1);
              *((_DWORD *)v36-- - 1) = v37;
            }
            unint64_t v16 = v34 + 4 * v35;
            if (v14) {
              operator delete(v14);
            }
            long long v14 = v36;
            goto LABEL_34;
          }
          *v15++ = v25;
        }
      }
      float v23 = v15;
LABEL_34:
      unint64_t v19 = (v19 + 1);
      ++v21;
      ++v20;
      double v15 = v23;
      if (v19 >= a5) {
        goto LABEL_52;
      }
    }
  }
  long long v14 = 0;
  float v23 = 0;
LABEL_55:
  int v38 = (int)(float)((float)(unint64_t)(v23 - v14) * a9);
  if (v38 <= 0)
  {
    float v43 = 1.0e17;
    float v11 = 1.0e17;
    if (!v14) {
      return v11;
    }
  }
  else
  {
    std::__sort<std::__less<float,float> &,float *>();
    if (v38 < 2)
    {
      float v39 = 0.0;
    }
    else
    {
      float v39 = 0.0;
      int v40 = v14;
      uint64_t v41 = (v38 - 1);
      do
      {
        float v42 = *v40++;
        float v39 = v39 + v42;
        --v41;
      }
      while (v41);
    }
    float v43 = (float)(v39 / (float)(v38 - 1)) * 100.0;
  }
  float v11 = v43;
  operator delete(v14);
  return v11;
}

void sub_247EF3090(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

float compareRawBuffers<unsigned short,unsigned short>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, char a7, char a8, float a9)
{
  if (a9 <= 0.0 || a9 > 1.0)
  {
    NSLog(&cfstr_CannotCompareW.isa, a9);
    return 1.0e17;
  }
  if (a6)
  {
    long long v14 = 0;
    double v15 = 0;
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    while (1)
    {
      int v50 = v18;
      if (a5) {
        break;
      }
      float v23 = v15;
LABEL_52:
      unint64_t v17 = (v50 + 1);
      double v15 = v23;
      int v18 = v50 + 1;
      if (v17 >= a6) {
        goto LABEL_55;
      }
    }
    LODWORD(v19) = 0;
    uint64_t v20 = (_WORD *)(a3 + v17 * a4);
    uint64_t v21 = (_WORD *)(a1 + v17 * a2);
    while (1)
    {
      unsigned int v22 = (unsigned __int16)*v21;
      if (*v21 || (a7 & 1) == 0)
      {
        if (*v20)
        {
          float v24 = fabsf((float)((float)(unsigned __int16)*v20 - (float)v22) / (float)(unsigned __int16)*v20);
          if ((unint64_t)v15 >= v16)
          {
            uint64_t v26 = v15 - v14;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 62) {
              goto LABEL_66;
            }
            if ((uint64_t)(v16 - (void)v14) >> 1 > v27) {
              unint64_t v27 = (uint64_t)(v16 - (void)v14) >> 1;
            }
            if (v16 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v27;
            }
            if (v28) {
              unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v28);
            }
            else {
              uint64_t v29 = 0;
            }
            float v30 = (float *)(v28 + 4 * v26);
            *float v30 = v24;
            float v23 = v30 + 1;
            while (v15 != v14)
            {
              int v31 = *((_DWORD *)v15-- - 1);
              *((_DWORD *)v30-- - 1) = v31;
            }
            unint64_t v16 = v28 + 4 * v29;
            if (v14) {
              operator delete(v14);
            }
            long long v14 = v30;
          }
          else
          {
            *double v15 = v24;
            float v23 = v15 + 1;
          }
          goto LABEL_34;
        }
        if ((a8 & 1) == 0)
        {
          float v25 = (double)v22 / 0.0001;
          if ((unint64_t)v15 >= v16)
          {
            uint64_t v32 = v15 - v14;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 62) {
LABEL_66:
            }
              std::vector<Element *>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v16 - (void)v14) >> 1 > v33) {
              unint64_t v33 = (uint64_t)(v16 - (void)v14) >> 1;
            }
            if (v16 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v33;
            }
            if (v34) {
              unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v34);
            }
            else {
              uint64_t v35 = 0;
            }
            int v36 = (float *)(v34 + 4 * v32);
            *int v36 = v25;
            float v23 = v36 + 1;
            while (v15 != v14)
            {
              int v37 = *((_DWORD *)v15-- - 1);
              *((_DWORD *)v36-- - 1) = v37;
            }
            unint64_t v16 = v34 + 4 * v35;
            if (v14) {
              operator delete(v14);
            }
            long long v14 = v36;
            goto LABEL_34;
          }
          *v15++ = v25;
        }
      }
      float v23 = v15;
LABEL_34:
      unint64_t v19 = (v19 + 1);
      ++v21;
      ++v20;
      double v15 = v23;
      if (v19 >= a5) {
        goto LABEL_52;
      }
    }
  }
  long long v14 = 0;
  float v23 = 0;
LABEL_55:
  int v38 = (int)(float)((float)(unint64_t)(v23 - v14) * a9);
  if (v38 <= 0)
  {
    float v43 = 1.0e17;
    float v11 = 1.0e17;
    if (!v14) {
      return v11;
    }
  }
  else
  {
    std::__sort<std::__less<float,float> &,float *>();
    if (v38 < 2)
    {
      float v39 = 0.0;
    }
    else
    {
      float v39 = 0.0;
      int v40 = v14;
      uint64_t v41 = (v38 - 1);
      do
      {
        float v42 = *v40++;
        float v39 = v39 + v42;
        --v41;
      }
      while (v41);
    }
    float v43 = (float)(v39 / (float)(v38 - 1)) * 100.0;
  }
  float v11 = v43;
  operator delete(v14);
  return v11;
}

void sub_247EF3428(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_247EF374C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  docopt::value::~value((void **)va);

  _Unwind_Resume(a1);
}

uint64_t **std::map<std::string,docopt::value>::map[abi:ne180100](uint64_t **a1, void *a2)
{
  a1[1] = 0;
  int v3 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  uint64_t v4 = a2 + 1;
  id v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    while (1)
    {
      std::string::size_type v6 = a1[1];
      std::string v7 = v3;
      if (*a1 != v3)
      {
        uint64_t v8 = a1[1];
        uint64_t v9 = v3;
        if (v6)
        {
          do
          {
            std::string v7 = v8;
            uint64_t v8 = (uint64_t *)v8[1];
          }
          while (v8);
        }
        else
        {
          do
          {
            std::string v7 = (uint64_t *)v9[2];
            BOOL v10 = *v7 == (void)v9;
            uint64_t v9 = v7;
          }
          while (v10);
        }
        if (!std::less<std::string>::operator()[abi:ne180100](v7 + 4, v5 + 4)) {
          break;
        }
      }
      float v11 = (char **)v3;
      unsigned int v12 = (char **)v3;
      if (!v6) {
        goto LABEL_18;
      }
      unsigned int v12 = (char **)(v7 + 1);
      if (!v7[1])
      {
        float v11 = (char **)v7;
LABEL_18:
        double v15 = (char *)operator new(0x58uLL);
        unint64_t v16 = v15;
        v25[0] = v15;
        v25[1] = v3;
        char v26 = 0;
        if (*((char *)v5 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v15 + 32), (const std::string::value_type *)v5[4], v5[5]);
        }
        else
        {
          long long v17 = *((_OWORD *)v5 + 2);
          *((void *)v15 + 6) = v5[6];
          *((_OWORD *)v15 + 2) = v17;
        }
        int v18 = *((_DWORD *)v5 + 14);
        *((_DWORD *)v16 + 14) = v18;
        unint64_t v19 = (std::string *)(v16 + 64);
        switch(v18)
        {
          case 1:
            v19->__r_.__value_.__s.__data_[0] = *((unsigned char *)v5 + 64);
            break;
          case 2:
            v19->__r_.__value_.__r.__words[0] = v5[8];
            break;
          case 3:
            if (*((char *)v5 + 87) < 0)
            {
              std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)v5[8], v5[9]);
            }
            else
            {
              long long v20 = *((_OWORD *)v5 + 4);
              *((void *)v16 + 10) = v5[10];
              *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
            }
            break;
          case 4:
            v19->__r_.__value_.__r.__words[0] = 0;
            *((void *)v16 + 9) = 0;
            *((void *)v16 + 10) = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v19, (long long *)v5[8], (long long *)v5[9], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[9] - v5[8]) >> 3));
            break;
          default:
            break;
        }
        char v26 = 1;
        *(void *)unint64_t v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = v11;
        *unsigned int v12 = v16;
        uint64_t v21 = (uint64_t *)**a1;
        if (v21)
        {
          *a1 = v21;
          unint64_t v16 = *v12;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
        v25[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,docopt::value>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,docopt::value>,void *>>>>::reset[abi:ne180100]((uint64_t)v25);
      }
LABEL_31:
      unsigned int v22 = (void *)v5[1];
      if (v22)
      {
        do
        {
          float v23 = v22;
          unsigned int v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          float v23 = (void *)v5[2];
          BOOL v10 = *v23 == (void)v5;
          id v5 = v23;
        }
        while (!v10);
      }
      id v5 = v23;
      if (v23 == v4) {
        return a1;
      }
    }
    float v11 = (char **)v3;
    unsigned int v12 = (char **)v3;
    if (v6)
    {
      uint64_t v13 = (char *)v6;
      while (1)
      {
        while (1)
        {
          float v11 = (char **)v13;
          long long v14 = v13 + 32;
          if (!std::less<std::string>::operator()[abi:ne180100](v5 + 4, (void *)v13 + 4)) {
            break;
          }
          uint64_t v13 = *v11;
          unsigned int v12 = v11;
          if (!*v11) {
            goto LABEL_18;
          }
        }
        if (!std::less<std::string>::operator()[abi:ne180100](v14, v5 + 4)) {
          goto LABEL_31;
        }
        unsigned int v12 = v11 + 1;
        uint64_t v13 = v11[1];
        if (!v13) {
          goto LABEL_18;
        }
      }
    }
    goto LABEL_18;
  }
  return a1;
}

void sub_247EF3A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v3 + 55) < 0) {
    operator delete(*v2);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,docopt::value>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,docopt::value>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::__tree<std::__value_type<std::string,docopt::value>,std::__map_value_compare<std::string,std::__value_type<std::string,docopt::value>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,docopt::value>>>::destroy(*v4);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,docopt::value>,std::__map_value_compare<std::string,std::__value_type<std::string,docopt::value>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,docopt::value>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,docopt::value>,std::__map_value_compare<std::string,std::__value_type<std::string,docopt::value>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,docopt::value>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,docopt::value>,std::__map_value_compare<std::string,std::__value_type<std::string,docopt::value>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,docopt::value>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,docopt::value>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,docopt::value>,0>(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if (v2 == 4)
  {
    uint64_t v4 = (void **)(a1 + 32);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
  else if (v2 == 3 && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,docopt::value>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,docopt::value>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,docopt::value>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void sub_247EF3E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EF4144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EF44A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EF4708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EF4854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EF48F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EF4994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EF4A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EF4AF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EF4BB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EF4C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EF4CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247EF4DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFTypeRef PixelBufferUtils::copyAttachment(PixelBufferUtils *this, const __CFString *a2, CVAttachmentMode *a3, CVAttachmentMode *a4)
{
  CFTypeRef v4 = 0;
  if (this)
  {
    if (a2)
    {
      CFTypeRef Attachment = CVBufferGetAttachment(this, a2, a3);
      CFTypeRef v4 = Attachment;
      if (Attachment) {
        CFRetain(Attachment);
      }
    }
  }
  return v4;
}

CFDictionaryRef PixelBufferUtils::copyAttachments(PixelBufferUtils *this, __CVBuffer *a2, CVAttachmentMode a3)
{
  if (!this) {
    return 0;
  }
  CFDictionaryRef Attachments = CVBufferGetAttachments(this, (CVAttachmentMode)a2);
  CFDictionaryRef v4 = Attachments;
  if (Attachments) {
    CFRetain(Attachments);
  }
  return v4;
}

void *PixelBufferUtils::pixelFormatAsString@<X0>(PixelBufferUtils *this@<X0>, char *a2@<X8>)
{
  if (this == 32)
  {
    uint64_t v3 = "ARGB";
    goto LABEL_5;
  }
  if (this == 24)
  {
    uint64_t v3 = "24RG";
LABEL_5:
    return std::string::basic_string[abi:ne180100]<0>(a2, v3);
  }
  __s[0] = BYTE3(this);
  __s[1] = BYTE2(this);
  __s[2] = BYTE1(this);
  __s[3] = (char)this;
  __s[4] = 0;
  uint64_t result = std::string::basic_string[abi:ne180100]<0>(a2, __s);
  if (a2[23] >= 0) {
    id v5 = a2;
  }
  else {
    id v5 = *(char **)a2;
  }
  if (*v5 <= 31)
  {
    uint64_t v6 = MEMORY[0x263F8C328] + 104;
    v45[0] = MEMORY[0x263F8C328] + 104;
    uint64_t v7 = MEMORY[0x263F8C328] + 64;
    uint64_t v40 = MEMORY[0x263F8C328] + 64;
    uint64_t v8 = (void *)MEMORY[0x263F8C2B8];
    uint64_t v9 = *(void *)(MEMORY[0x263F8C2B8] + 24);
    *(void *)__s = *(void *)(MEMORY[0x263F8C2B8] + 16);
    *(void *)&__s[*(void *)(*(void *)__s - 24)] = v9;
    uint64_t v39 = 0;
    BOOL v10 = (std::ios_base *)&__s[*(void *)(*(void *)__s - 24)];
    std::ios_base::init(v10, v41);
    uint64_t v11 = MEMORY[0x263F8C328] + 24;
    v10[1].__vftable = 0;
    v10[1].__fmtflags_ = -1;
    uint64_t v12 = v8[5];
    uint64_t v40 = v8[4];
    *(void *)((char *)&v41[-1] + *(void *)(v40 - 24)) = v12;
    *(void *)__s = v8[1];
    *(void *)&__s[*(void *)(*(void *)__s - 24)] = v8[6];
    v45[0] = v6;
    *(void *)__s = v11;
    uint64_t v40 = v7;
    std::streambuf::basic_streambuf();
    uint64_t v13 = MEMORY[0x263F8C318] + 16;
    v41[0] = MEMORY[0x263F8C318] + 16;
    *(_OWORD *)std::string __p = 0u;
    long long v43 = 0u;
    int v44 = 24;
    MEMORY[0x24C570610](&v36, &v40);
    if ((_BYTE)v36)
    {
      uint64_t v35 = v13;
      long long v14 = (char *)&v41[-1] + *(void *)(v40 - 24);
      uint64_t v15 = *((void *)v14 + 5);
      int v16 = *((_DWORD *)v14 + 2);
      int v17 = *((_DWORD *)v14 + 36);
      if (v17 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)&v41[-1] + *(void *)(v40 - 24)));
        int v18 = std::locale::use_facet(&__b, MEMORY[0x263F8C108]);
        int v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 32);
        std::locale::~locale(&__b);
        *((_DWORD *)v14 + 36) = v17;
      }
      if ((v16 & 0xB0) == 0x20) {
        unint64_t v19 = "";
      }
      else {
        unint64_t v19 = "0x";
      }
      if (!v15) {
        goto LABEL_40;
      }
      uint64_t v20 = *((void *)v14 + 3);
      BOOL v21 = v20 <= 2;
      uint64_t v22 = v20 - 2;
      size_t v23 = v21 ? 0 : v22;
      uint64_t v24 = v19 - "0x";
      if (v19 - "0x" >= 1)
      {
        float v25 = v19;
        uint64_t v26 = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(void *)v15 + 96))(v15, "0x", v24);
        unint64_t v19 = v25;
        if (v26 != v24) {
          goto LABEL_40;
        }
      }
      if ((uint64_t)v23 >= 1)
      {
        if (v23 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        unint64_t v34 = v19;
        if (v23 >= 0x17)
        {
          uint64_t v28 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v23 | 7) != 0x17) {
            uint64_t v28 = v23 | 7;
          }
          uint64_t v29 = v28 + 1;
          p_b = (std::locale::__imp *)operator new(v28 + 1);
          size_t v47 = v23;
          int64_t v48 = v29 | 0x8000000000000000;
          __b.__locale_ = p_b;
        }
        else
        {
          HIBYTE(v48) = v23;
          p_b = (std::locale::__imp *)&__b;
        }
        memset(p_b, v17, v23);
        *((unsigned char *)p_b + v23) = 0;
        if (v48 >= 0) {
          locale = &__b;
        }
        else {
          locale = __b.__locale_;
        }
        uint64_t v31 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(void *)v15 + 96))(v15, locale, v23);
        unint64_t v19 = v34;
        if (SHIBYTE(v48) < 0)
        {
          operator delete(__b.__locale_);
          unint64_t v19 = v34;
        }
        if (v31 != v23) {
          goto LABEL_40;
        }
      }
      uint64_t v32 = "0x" - v19 + 2;
      if (v32 < 1 || (*(uint64_t (**)(uint64_t))(*(void *)v15 + 96))(v15) == v32)
      {
        *((void *)v14 + 3) = 0;
        uint64_t v13 = v35;
        uint64_t v8 = (void *)MEMORY[0x263F8C2B8];
      }
      else
      {
LABEL_40:
        uint64_t v13 = v35;
        uint64_t v8 = (void *)MEMORY[0x263F8C2B8];
        std::ios_base::clear((std::ios_base *)((char *)&v41[-1] + *(void *)(v40 - 24)), *(_DWORD *)((char *)&v41[3] + *(void *)(v40 - 24)) | 5);
      }
    }
    MEMORY[0x24C570620](&v36);
    *(_DWORD *)((char *)v41 + *(void *)(v40 - 24)) = *(_DWORD *)((unsigned char *)v41 + *(void *)(v40 - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::stringbuf::str();
    if (a2[23] < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = v36;
    *((void *)a2 + 2) = v37;
    *(void *)__s = *v8;
    uint64_t v33 = v8[9];
    *(void *)&__s[*(void *)(*(void *)__s - 24)] = v8[8];
    uint64_t v40 = v33;
    v41[0] = v13;
    if (SBYTE7(v43) < 0) {
      operator delete(__p[0]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return (void *)MEMORY[0x24C5706E0](v45);
  }
  return result;
}

void sub_247EF55A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (*(char *)(v19 - 89) < 0) {
    operator delete(*(void **)(v19 - 112));
  }
  MEMORY[0x24C570620](&a13);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)(v18 + *(void *)(a18 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x247EF5434);
}

void sub_247EF5628()
{
}

void sub_247EF5638()
{
  std::iostream::~basic_iostream();
  MEMORY[0x24C5706E0](v0);
  JUMPOUT(0x247EF5668);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x24C5706E0](a1 + 128);
  return a1;
}

uint64_t PixelBufferUtils::pixelFormatFromString(PixelBufferUtils *this, const char *a2)
{
  if (!strcmp((const char *)this, "24RG")) {
    return 24;
  }
  if (!strcmp((const char *)this, "ARGB")) {
    return 32;
  }
  return bswap32(*(_DWORD *)this);
}

void *PixelBufferUtils::pixelFormatAsFileExtension@<X0>(PixelBufferUtils *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = PixelBufferUtils::pixelFormatAsString(this, (char *)a2);
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  char v5 = v4;
  uint64_t v6 = *(unsigned char **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v8 = (unsigned char *)a2;
  }
  else {
    uint64_t v8 = *(unsigned char **)a2;
  }
  if ((v4 & 0x80u) == 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  if (v9)
  {
    do
    {
      if (*v8 == 47) {
        *uint64_t v8 = 58;
      }
      ++v8;
      --v9;
    }
    while (v9);
    uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
    uint64_t v6 = *(unsigned char **)a2;
    uint64_t v7 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 23);
  }
  if (v5 < 0) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v6 = (unsigned char *)a2;
  }
  for (; v4; --v4)
  {
    if (*v6 == 46) {
      unsigned char *v6 = 95;
    }
    ++v6;
  }
  return result;
}

uint64_t PixelBufferUtils::pixelFormatFromFileExtension(PixelBufferUtils *this, const char *a2)
{
  id v2 = [NSString stringWithUTF8String:this];
  if (([v2 isEqualToString:&stru_26FC22BA0] & 1) != 0 || objc_msgSend(v2, "length") != 4)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v3 = [v2 stringByReplacingOccurrencesOfString:@":" withString:@"/"];

    uint64_t v4 = [v3 stringByReplacingOccurrencesOfString:@"_" withString:@"."];

    id v2 = v4;
    char v5 = (PixelBufferUtils *)[v2 UTF8String];
    uint64_t v7 = PixelBufferUtils::pixelFormatFromString(v5, v6);
  }

  return v7;
}

void sub_247EF5984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PixelBufferUtils::wrapAsDifferentPixelFormat(PixelBufferUtils *this, __CVBuffer *a2, CVPixelBufferRef *a3, __CVBuffer **a4)
{
  OSType v5 = a2;
  CVPixelBufferRetain(this);
  CVPixelBufferLockBaseAddress(this, 1uLL);
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  BaseAddress = CVPixelBufferGetBaseAddress(this);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(this);
  CVPixelBufferCreateWithBytes(v7, Width, Height, v5, BaseAddress, BytesPerRow, (CVPixelBufferReleaseBytesCallback)pixelBufferDeallocator, this, 0, a3);

  return CVPixelBufferUnlockBaseAddress(this, 1uLL);
}

void PixelBufferUtils::asVImageBuffer(PixelBufferUtils *this@<X0>, __CVBuffer *a2@<X1>, CGRect a3@<0:D0, 8:D1, 16:D2, 24:D3>, vImage_Buffer *a4@<X8>)
{
  CGFloat height = a3.size.height;
  CGFloat width = a3.size.width;
  CGFloat y = a3.origin.y;
  CGFloat x = a3.origin.x;
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(this, (size_t)a2);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(this, (size_t)a2);
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(this, (size_t)a2);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(this, (size_t)a2);
  if (!BaseAddressOfPlane)
  {
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 231);
    size_t BytesPerRowOfPlane = 0;
    size_t WidthOfPlane = 0;
    size_t HeightOfPlane = 0;
  }
  v16[0] = BaseAddressOfPlane;
  v16[1] = HeightOfPlane;
  v16[2] = WidthOfPlane;
  v16[3] = BytesPerRowOfPlane;
  signed int PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
  v17.origin.CGFloat x = x;
  v17.origin.CGFloat y = y;
  v17.size.CGFloat width = width;
  v17.size.CGFloat height = height;
  cropVImageBuffer(a4, (uint64_t)v16, v17, PixelFormatType, (uint64_t)a2);
}

void cropVImageBuffer(vImage_Buffer *a1, uint64_t a2, CGRect a3, PixelBufferUtils *a4, uint64_t a5)
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&a1->data = *(_OWORD *)a2;
  *(_OWORD *)&a1->double width = v13;
  *(double *)&long long v13 = y;
  if (!CGRectIsEmpty(a3))
  {
    unint64_t v14 = PixelBufferUtils::verticalSubsamplingForPixelFormat(a4, a5);
    unint64_t v15 = PixelBufferUtils::horizontalSubsamplingForPixelFormat(a4, a5);
    unint64_t v16 = PixelBufferUtils::pixelSizeForPixelFormat(a4, a5);
    uint64_t v17 = *(void *)(a2 + 24);
    unint64_t v19 = *(void *)a2;
    uint64_t v18 = *(void *)(a2 + 8);
    vImagePixelCount v20 = vcvtpd_u64_f64(width / (double)v15);
    BOOL v21 = (void *)(*(void *)a2 + v17 * ((unint64_t)y / v14) + (unint64_t)x / v15 * v16);
    vImagePixelCount v22 = vcvtpd_u64_f64(height / (double)v14);
    a1->double height = v22;
    a1->double width = v20;
    a1->data = v21;
    unint64_t v23 = v19 + v18 * v17;
    BOOL v24 = (unint64_t)v21 < v19 || (unint64_t)v21 >= v23;
    if (v24 || (width >= (double)v20 ? (BOOL v25 = height < (double)v22) : (BOOL v25 = 1), v25))
    {
      NSLog(&cfstr_SDErrorCropOri.isa, "cropVImageBuffer", 206, *(void *)&x, *(void *)&y, *(void *)&width, *(void *)&height, *(void *)(a2 + 16) * v15, v18 * v14);
      *(_OWORD *)&a1->data = 0u;
      *(_OWORD *)&a1->double width = 0u;
    }
  }
}

uint64_t PixelBufferUtils::verticalSubsamplingForPixelFormat(PixelBufferUtils *this, uint64_t a2)
{
  uint64_t v4 = 1;
  if ((int)this > 1380401728)
  {
    if ((int)this > 1717856626)
    {
      if ((int)this <= 1751411058)
      {
        if (this == 1717856627) {
          return v4;
        }
        int v5 = 1751410032;
      }
      else
      {
        if (this == 1751411059 || this == 1919365990) {
          return v4;
        }
        int v5 = 1932996149;
      }
    }
    else if ((int)this <= 1380411456)
    {
      if (this == 1380401729) {
        return v4;
      }
      int v5 = 1380410945;
    }
    else
    {
      if (this == 1380411457 || this == 1647392359) {
        return v4;
      }
      int v5 = 1717855600;
    }
  }
  else if ((int)this > 875704437)
  {
    if ((int)this <= 1111970368)
    {
      if (this == 875704438) {
        goto LABEL_35;
      }
      int v5 = 1094862674;
    }
    else
    {
      if (this == 1111970369 || this == 1278226488) {
        return v4;
      }
      int v5 = 1278226536;
    }
  }
  else
  {
    if ((int)this > 825437746)
    {
      if (this == 825437747 || this == 843264104) {
        return v4;
      }
      if (this != 875704422) {
        goto LABEL_30;
      }
LABEL_35:
      if (a2) {
        return 2;
      }
      else {
        return 1;
      }
    }
    if (this == 32) {
      return v4;
    }
    int v5 = 825306677;
  }
  if (this == v5) {
    return v4;
  }
LABEL_30:
  uint64_t v6 = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (v6)
  {
    CFAllocatorRef v7 = (void *)v6;
    if (PixelBufferUtils::planeCountForPixelFormat(this))
    {
      uint64_t v8 = [v7 objectForKeyedSubscript:*MEMORY[0x263F042C8]];
      uint64_t v9 = [v8 objectAtIndexedSubscript:a2];

      CFAllocatorRef v7 = (void *)v9;
    }
    BOOL v10 = [v7 objectForKeyedSubscript:*MEMORY[0x263F042D0]];
    uint64_t v11 = v10;
    if (v10) {
      uint64_t v4 = (int)[v10 intValue];
    }
    else {
      uint64_t v4 = 1;
    }
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(this, (char *)__p);
    if (v15 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "verticalSubsamplingForPixelFormat", 416, this, v12);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return v4;
}

void sub_247EF5F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PixelBufferUtils::horizontalSubsamplingForPixelFormat(PixelBufferUtils *this, uint64_t a2)
{
  uint64_t v4 = 1;
  if ((int)this > 1380401728)
  {
    if ((int)this > 1717856626)
    {
      if ((int)this <= 1751411058)
      {
        if (this == 1717856627) {
          return v4;
        }
        int v5 = 1751410032;
      }
      else
      {
        if (this == 1751411059 || this == 1919365990) {
          return v4;
        }
        int v5 = 1932996149;
      }
    }
    else if ((int)this <= 1380411456)
    {
      if (this == 1380401729) {
        return v4;
      }
      int v5 = 1380410945;
    }
    else
    {
      if (this == 1380411457 || this == 1647392359) {
        return v4;
      }
      int v5 = 1717855600;
    }
  }
  else if ((int)this > 875704437)
  {
    if ((int)this <= 1111970368)
    {
      if (this == 875704438) {
        goto LABEL_35;
      }
      int v5 = 1094862674;
    }
    else
    {
      if (this == 1111970369 || this == 1278226488) {
        return v4;
      }
      int v5 = 1278226536;
    }
  }
  else
  {
    if ((int)this > 825437746)
    {
      if (this == 825437747 || this == 843264104) {
        return v4;
      }
      if (this != 875704422) {
        goto LABEL_30;
      }
LABEL_35:
      if (a2) {
        return 2;
      }
      else {
        return 1;
      }
    }
    if (this == 32) {
      return v4;
    }
    int v5 = 825306677;
  }
  if (this == v5) {
    return v4;
  }
LABEL_30:
  uint64_t v6 = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (v6)
  {
    CFAllocatorRef v7 = (void *)v6;
    if (PixelBufferUtils::planeCountForPixelFormat(this))
    {
      uint64_t v8 = [v7 objectForKeyedSubscript:*MEMORY[0x263F042C8]];
      uint64_t v9 = [v8 objectAtIndexedSubscript:a2];

      CFAllocatorRef v7 = (void *)v9;
    }
    BOOL v10 = [v7 objectForKeyedSubscript:*MEMORY[0x263F042B8]];
    uint64_t v11 = v10;
    if (v10) {
      uint64_t v4 = (int)[v10 intValue];
    }
    else {
      uint64_t v4 = 1;
    }
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(this, (char *)__p);
    if (v15 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "horizontalSubsamplingForPixelFormat", 369, this, v12);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return v4;
}

void sub_247EF628C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t PixelBufferUtils::pixelSizeForPixelFormat(PixelBufferUtils *this, uint64_t a2)
{
  if ((int)this > 1278226535)
  {
    if ((int)this <= 1717855599)
    {
      if ((int)this <= 1380410944)
      {
        if (this != 1278226536)
        {
          if (this != 1380401729) {
            goto LABEL_41;
          }
          return 4;
        }
        return 2;
      }
      if (this == 1380410945) {
        return 16;
      }
      if (this == 1380411457) {
        return 8;
      }
      int v5 = 1647392359;
    }
    else if ((int)this > 1751411058)
    {
      if (this == 1751411059) {
        return 2;
      }
      if (this == 1919365990) {
        return 4;
      }
      int v5 = 1932996149;
    }
    else
    {
      if (this == 1717855600 || this == 1717856627) {
        return 4;
      }
      int v5 = 1751410032;
    }
LABEL_33:
    if (this != v5) {
      goto LABEL_41;
    }
    return 2;
  }
  if ((int)this <= 875704437)
  {
    if ((int)this > 825437746)
    {
      if (this != 825437747)
      {
        if (this != 843264104)
        {
          int v4 = 875704422;
          goto LABEL_16;
        }
        return 4;
      }
      return 2;
    }
    if (this == 32) {
      return 4;
    }
    int v5 = 825306677;
    goto LABEL_33;
  }
  if ((int)this > 1094862673)
  {
    if (this != 1094862674 && this != 1111970369)
    {
      if (this == 1278226488) {
        return 1;
      }
      goto LABEL_41;
    }
    return 4;
  }
  if (this == 875704438 || this == 875836518) {
    goto LABEL_17;
  }
  int v4 = 875836534;
LABEL_16:
  if (this == v4)
  {
LABEL_17:
    if (a2) {
      return 2;
    }
    else {
      return 1;
    }
  }
LABEL_41:
  uint64_t v8 = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (PixelBufferUtils::planeCountForPixelFormat(this))
  {
    uint64_t v9 = [v8 objectForKeyedSubscript:*MEMORY[0x263F042C8]];
    uint64_t v10 = [v9 objectAtIndexedSubscript:a2];

    uint64_t v8 = (void *)v10;
  }
  uint64_t v11 = [v8 objectForKeyedSubscript:*MEMORY[0x263F04250]];
  uint64_t v12 = v11;
  if (v11)
  {
    [v11 floatValue];
    unint64_t v6 = vcvtps_u32_f32(v13 * 0.125);
  }
  else
  {

    PixelBufferUtils::pixelFormatAsString(this, (char *)__p);
    if (v16 >= 0) {
      unint64_t v14 = __p;
    }
    else {
      unint64_t v14 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "pixelSizeForPixelFormat", 464, this, v14);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return v6;
}

void sub_247EF65E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PixelBufferUtils::asVImageBuffer(PixelBufferUtils *this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, vImage_Buffer *a3@<X8>)
{
  CGFloat height = a2.size.height;
  CGFloat width = a2.size.width;
  CGFloat y = a2.origin.y;
  CGFloat x = a2.origin.x;
  BaseAddress = CVPixelBufferGetBaseAddress(this);
  size_t v11 = CVPixelBufferGetHeight(this);
  size_t v12 = CVPixelBufferGetWidth(this);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(this);
  if (!BaseAddress)
  {
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 249);
    size_t BytesPerRow = 0;
    size_t v12 = 0;
    size_t v11 = 0;
  }
  v15[0] = BaseAddress;
  v15[1] = v11;
  v15[2] = v12;
  v15[3] = BytesPerRow;
  signed int PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
  v16.origin.CGFloat x = x;
  v16.origin.CGFloat y = y;
  v16.size.CGFloat width = width;
  v16.size.CGFloat height = height;
  cropVImageBuffer(a3, (uint64_t)v15, v16, PixelFormatType, 0);
}

void PixelBufferUtils::releasePixelBuffer(CVPixelBufferRef *this, __CVBuffer **a2)
{
  *this = 0;
}

CVPixelBufferRef PixelBufferUtils::createPixelBufferWithSameSizeAndFormat(PixelBufferUtils *this, __CVBuffer *a2)
{
  int v2 = (int)a2;
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(this);

  return PixelBufferUtils::createPixelBuffer(Width, Height, PixelFormatType, v2);
}

CVPixelBufferRef PixelBufferUtils::createPixelBufferWithSameSize(PixelBufferUtils *this, __CVBuffer *a2, int a3)
{
  OSType v4 = a2;
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);

  return PixelBufferUtils::createPixelBuffer(Width, Height, v4, a3);
}

CVPixelBufferRef PixelBufferUtils::createPixelBuffer(OSType pixelFormatType, CGSize a2, int a3)
{
  return PixelBufferUtils::createPixelBuffer((unint64_t)a2.width, (unint64_t)a2.height, pixelFormatType, a3);
}

BOOL PixelBufferUtils::isPixelFormatCompressed(PixelBufferUtils *this)
{
  int v2 = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  unint64_t v3 = 0;
  uint64_t v4 = *MEMORY[0x263F042C8];
  uint64_t v5 = *MEMORY[0x263F04278];
  while (v3 < PixelBufferUtils::planeCountForPixelFormat(this))
  {
    unint64_t v6 = [v2 objectForKeyedSubscript:v4];
    CFAllocatorRef v7 = [v6 objectAtIndexedSubscript:v3];

    uint64_t v8 = [v7 objectForKeyedSubscript:v5];
    uint64_t v9 = v8;
    if (v8 && [v8 intValue])
    {

      BOOL v11 = 1;
      goto LABEL_10;
    }

    ++v3;
  }
  uint64_t v10 = [v2 objectForKeyedSubscript:v5];
  CFAllocatorRef v7 = v10;
  if (v10) {
    BOOL v11 = [v10 intValue] != 0;
  }
  else {
    BOOL v11 = 0;
  }
LABEL_10:

  return v11;
}

void sub_247EF6928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

PixelBufferUtils *PixelBufferUtils::uncompressedEquivalentForPixelFormat(PixelBufferUtils *this)
{
  int v2 = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  unint64_t v3 = [v2 objectForKeyedSubscript:*MEMORY[0x263F042B0]];
  uint64_t v4 = v3;
  if (v3)
  {
    this = (PixelBufferUtils *)[v3 unsignedIntValue];
  }
  else if (PixelBufferUtils::isPixelFormatCompressed(this))
  {
    PixelBufferUtils::pixelFormatAsString(this, (char *)__p);
    if (v8 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "uncompressedEquivalentForPixelFormat", 593, this, v5);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    this = 0;
  }

  return this;
}

void sub_247EF6A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__CVBuffer *PixelBufferUtils::createRotatedPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, int a3)
{
  if (!this) {
    return 0;
  }
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  if ((a2 & 0xFFFFFFFD) == 1) {
    size_t v9 = Height;
  }
  else {
    size_t v9 = Width;
  }
  if ((a2 & 0xFFFFFFFD) != 1) {
    size_t Width = Height;
  }
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v10, v9, Width, PixelFormatType, BufferAttributes, &pixelBufferOut)) {
    size_t v12 = 0;
  }
  else {
    size_t v12 = pixelBufferOut;
  }
  if (PixelBufferUtils::rotatePixelBuffer(this, v12, a2, a3))
  {
    CVPixelBufferRelease(v12);
    return 0;
  }
  return v12;
}

uint64_t PixelBufferUtils::rotatePixelBuffer(CVPixelBufferRef pixelBuffer, __CVBuffer *a2, __CVBuffer *a3, int a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t result = 0xFFFFFFFFLL;
  if (pixelBuffer && a2)
  {
    unsigned int v9 = a3 & 0xFFFFFFFD;
    size_t Width = CVPixelBufferGetWidth(pixelBuffer);
    if (v9 == 1)
    {
      if (Width != CVPixelBufferGetHeight(a2)) {
        goto LABEL_15;
      }
      size_t Height = CVPixelBufferGetHeight(pixelBuffer);
      size_t v12 = CVPixelBufferGetWidth(a2);
    }
    else
    {
      if (Width != CVPixelBufferGetWidth(a2)) {
        goto LABEL_15;
      }
      size_t Height = CVPixelBufferGetHeight(pixelBuffer);
      size_t v12 = CVPixelBufferGetHeight(a2);
    }
    if (Height == v12)
    {
      OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
      if (a4 && isVtRotateSupportFormat(PixelFormatType))
      {
        VTRotationSession = (const void *)createVTRotationSession((uint64_t)a3, 0);
        int v15 = MEMORY[0x24C570410](VTRotationSession, pixelBuffer, a2);
        if (VTRotationSession)
        {
          MEMORY[0x24C570400](VTRotationSession);
          CFRelease(VTRotationSession);
        }
        if (!v15) {
          return 0;
        }
        NSLog(&cfstr_SDErrorVtimage.isa, "rotatePixelBufferVT", 842);
        return 0xFFFFFFFFLL;
      }
      BOOL v16 = v9 == 1;
      uint64_t v17 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
      memset(&src, 0, sizeof(src));
      uint64_t v18 = (CGRect *)MEMORY[0x263F001A8];
      PixelBufferUtils::asVImageBuffer(pixelBuffer, *MEMORY[0x263F001A8], &src);
      memset(&dest, 0, sizeof(dest));
      PixelBufferUtils::asVImageBuffer(a2, *v18, &dest);
      if (v16)
      {
        if (src.width == dest.height)
        {
          vImagePixelCount v19 = src.height;
          vImagePixelCount v20 = dest.width;
          goto LABEL_23;
        }
      }
      else if (src.width == dest.width)
      {
        vImagePixelCount v19 = src.height;
        vImagePixelCount v20 = dest.height;
LABEL_23:
        if (v19 == v20)
        {
          *(void *)backColor = 0;
          uint64_t v32 = 0;
          if ((int)v17 > 1380410944)
          {
            if ((int)v17 > 1751410031)
            {
              if ((int)v17 > 1919365989)
              {
                if (v17 == 1919365990)
                {
                  uint64_t v26 = 0;
                  vImage_Error v21 = 0;
                  do
                  {
                    if (!v21)
                    {
                      PixelBufferUtils::asVImageBuffer(pixelBuffer, v26, *v18, &__p);
                      vImage_Buffer src = __p;
                      PixelBufferUtils::asVImageBuffer(a2, v26, *v18, &__p);
                      vImage_Buffer dest = __p;
                      vImage_Error v21 = vImageRotate90_PlanarF(&src, &dest, (uint8_t)a3, 0.0, 0);
                    }
                    uint64_t v26 = (__CVBuffer *)((char *)v26 + 1);
                  }
                  while (v26 != (__CVBuffer *)3);
                  goto LABEL_68;
                }
                if (v17 != 1932996149)
                {
                  if (v17 == 1919365992)
                  {
                    BOOL v24 = 0;
                    vImage_Error v21 = 0;
                    do
                    {
                      if (!v21)
                      {
                        PixelBufferUtils::asVImageBuffer(pixelBuffer, v24, *v18, &__p);
                        vImage_Buffer src = __p;
                        PixelBufferUtils::asVImageBuffer(a2, v24, *v18, &__p);
                        vImage_Buffer dest = __p;
                        vImage_Error v21 = vImageRotate90_Planar16F(&src, &dest, (uint8_t)a3, 0, 0);
                      }
                      BOOL v24 = (__CVBuffer *)((char *)v24 + 1);
                    }
                    while (v24 != (__CVBuffer *)3);
                    goto LABEL_68;
                  }
                  goto LABEL_75;
                }
                goto LABEL_66;
              }
              if (v17 == 1751410032) {
                goto LABEL_66;
              }
              int v25 = 1751411059;
              goto LABEL_65;
            }
            if ((int)v17 <= 1647392358)
            {
              if (v17 == 1380410945)
              {
                vImage_Error v22 = vImageRotate90_ARGBFFFF(&src, &dest, (uint8_t)a3, (const float *)backColor, 0);
                goto LABEL_67;
              }
              if (v17 == 1380411457)
              {
                vImage_Error v22 = vImageRotate90_ARGB16U(&src, &dest, (uint8_t)a3, backColor, 0);
                goto LABEL_67;
              }
              goto LABEL_75;
            }
            if (v17 == 1647392359)
            {
LABEL_66:
              vImage_Error v22 = vImageRotate90_Planar16U(&src, &dest, (uint8_t)a3, 0, 0);
              goto LABEL_67;
            }
            if (v17 != 1717855600 && v17 != 1717856627) {
              goto LABEL_75;
            }
          }
          else
          {
            if ((int)v17 <= 1094862673)
            {
              if ((int)v17 > 825437746)
              {
                if (v17 != 825437747)
                {
                  if (v17 == 875704422 || v17 == 875704438)
                  {
                    PixelBufferUtils::asVImageBuffer(pixelBuffer, 0, *v18, &src);
                    PixelBufferUtils::asVImageBuffer(a2, 0, *v18, &dest);
                    vImage_Error v21 = vImageRotate90_Planar8(&src, &dest, (uint8_t)a3, 0, 0);
                    if (v21)
                    {
LABEL_68:
                      CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
                      CVPixelBufferUnlockBaseAddress(a2, 0);
                      return v21 != 0;
                    }
                    PixelBufferUtils::asVImageBuffer(pixelBuffer, (__CVBuffer *)1, *v18, &__p);
                    vImage_Buffer src = __p;
                    PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, *v18, &__p);
                    vImage_Buffer dest = __p;
                    vImage_Error v22 = vImageRotate90_Planar16U(&src, &dest, (uint8_t)a3, 0, 0);
LABEL_67:
                    vImage_Error v21 = v22;
                    goto LABEL_68;
                  }
LABEL_75:
                  PixelBufferUtils::pixelFormatAsString(v17, (char *)&__p);
                  if ((__p.width & 0x8000000000000000) == 0) {
                    p_p = &__p;
                  }
                  else {
                    p_p = (vImage_Buffer *)__p.data;
                  }
                  NSLog(&cfstr_SDErrorPixelFo.isa, "rotatePixelBufferVImage", 765, v17, p_p);
                  if (SHIBYTE(__p.width) < 0) {
                    operator delete(__p.data);
                  }
                  vImage_Error v21 = -21773;
                  goto LABEL_68;
                }
                goto LABEL_66;
              }
              if (v17 != 32)
              {
                int v25 = 825306677;
LABEL_65:
                if (v17 != v25) {
                  goto LABEL_75;
                }
                goto LABEL_66;
              }
LABEL_62:
              vImage_Error v22 = vImageRotate90_ARGB8888(&src, &dest, (uint8_t)a3, (const uint8_t *)backColor, 0);
              goto LABEL_67;
            }
            if ((int)v17 <= 1278226533)
            {
              if (v17 == 1094862674) {
                goto LABEL_62;
              }
              int v23 = 1111970369;
              goto LABEL_61;
            }
            if (v17 != 1278226534)
            {
              if (v17 == 1278226536) {
                goto LABEL_66;
              }
              int v23 = 1380401729;
LABEL_61:
              if (v17 != v23) {
                goto LABEL_75;
              }
              goto LABEL_62;
            }
          }
          vImage_Error v22 = vImageRotate90_PlanarF(&src, &dest, (uint8_t)a3, 0.0, 0);
          goto LABEL_67;
        }
      }
      CVPixelBufferUnlockBaseAddress(a2, 0);
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
      return 0xFFFFFFFFLL;
    }
LABEL_15:
    NSLog(&cfstr_SDErrorInvalid.isa, "rotatePixelBuffer", 879);
    return 0xFFFFFFFFLL;
  }
  return result;
}

void sub_247EF71DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t isVtRotateSupportFormat(int a1)
{
  uint64_t result = 0;
  if (a1 <= 1717856626)
  {
    if (a1 > 1380410944)
    {
      if (a1 == 1380410945) {
        return result;
      }
      int v3 = 1380411457;
    }
    else
    {
      if (a1 == 825306677) {
        return result;
      }
      int v3 = 825437747;
    }
    goto LABEL_13;
  }
  if (a1 <= 1919365989)
  {
    if (a1 == 1717856627) {
      return result;
    }
    int v3 = 1751411059;
    goto LABEL_13;
  }
  if (a1 != 1919365990 && a1 != 1919365992)
  {
    int v3 = 1932996149;
LABEL_13:
    if (a1 != v3) {
      return 1;
    }
  }
  return result;
}

uint64_t createVTRotationSession(uint64_t a1, int a2)
{
  if (a2)
  {
    NSLog(&cfstr_SDErrorReflect.isa, "createVTRotationSession", 781);
  }
  else
  {
    int v2 = VTImageRotationSessionCreate();
    uint64_t result = 0;
    if (!v2) {
      return result;
    }
    MEMORY[0x24C570400](0);
    CFRelease(0);
    NSLog(&cfstr_SDErrorUnableT_2.isa, "createVTRotationSession", 802);
  }
  return 0;
}

__CVBuffer *PixelBufferUtils::createCroppedAndScaledPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, CGRect a3, CGSize a4)
{
  double height = a4.height;
  double width = a4.width;
  double v7 = a3.size.height;
  double v8 = a3.size.width;
  CGFloat y = a3.origin.y;
  CGFloat x = a3.origin.x;
  if (CGRectIsEmpty(a3))
  {
    double v8 = (double)CVPixelBufferGetWidth(this);
    double v7 = (double)CVPixelBufferGetHeight(this);
    CGFloat x = 0.0;
    CGFloat y = 0.0;
  }
  if (width == *MEMORY[0x263F001B0] && height == *(double *)(MEMORY[0x263F001B0] + 8))
  {
    double width = v8;
    double height = v7;
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v13, (unint64_t)width, (unint64_t)height, PixelFormatType, BufferAttributes, &pixelBufferOut))
  {
    int v15 = 0;
  }
  else
  {
    int v15 = pixelBufferOut;
  }
  v18.origin.CGFloat x = x;
  v18.origin.CGFloat y = y;
  v18.size.double width = v8;
  v18.size.double height = v7;
  if (PixelBufferUtils::cropAndScalePixelBuffer(this, v15, a2, v18, *MEMORY[0x263F001A8]))
  {
    CVPixelBufferRelease(v15);
    return 0;
  }
  return v15;
}

uint64_t PixelBufferUtils::cropAndScalePixelBuffer(CVPixelBufferRef pixelBuffer, __CVBuffer *a2, __CVBuffer *a3, CGRect a4, CGRect a5)
{
  double height = a5.size.height;
  double width = a5.size.width;
  double y = a5.origin.y;
  double x = a5.origin.x;
  CGFloat v9 = a4.size.height;
  double v10 = a4.size.width;
  double v11 = a4.origin.y;
  double v12 = a4.origin.x;
  if (!a3
    || (OSType v15 = CVPixelBufferGetPixelFormatType(pixelBuffer), !isVtTransferSupportFormat(v15)))
  {
    size_t v25 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v26 = CVPixelBufferGetHeight(pixelBuffer);
    size_t v27 = CVPixelBufferGetWidth(a2);
    size_t v28 = CVPixelBufferGetHeight(a2);
    v63.origin.double x = v12;
    v63.origin.double y = v11;
    v63.size.double width = v10;
    v63.size.double height = v9;
    IsEmptdouble y = CGRectIsEmpty(v63);
    double v30 = v9;
    if (IsEmpty)
    {
      double v12 = 0.0;
      double v11 = 0.0;
      double v10 = (double)v25;
      double v30 = (double)v26;
    }
    CGFloat rect = v30;
    v64.origin.double x = x;
    v64.origin.double y = y;
    v64.size.double width = width;
    v64.size.double height = height;
    BOOL v31 = CGRectIsEmpty(v64);
    if (v31) {
      double v32 = 0.0;
    }
    else {
      double v32 = x;
    }
    if (v31) {
      double v33 = 0.0;
    }
    else {
      double v33 = y;
    }
    double v54 = v33;
    if (v31) {
      double v34 = (double)v27;
    }
    else {
      double v34 = width;
    }
    double v52 = v32;
    double v53 = v34;
    if (v31) {
      double v35 = (double)v28;
    }
    else {
      double v35 = height;
    }
    v65.origin.double x = v12;
    v65.origin.double y = v11;
    v65.size.double width = v10;
    v65.size.double height = rect;
    CGRect v66 = CGRectIntegral(v65);
    CGFloat v36 = v66.origin.x;
    CGFloat v37 = v66.origin.y;
    CGFloat v38 = v66.size.width;
    CGFloat v39 = v66.size.height;
    if (v66.origin.x < 0.0
      || v66.origin.y < 0.0
      || (v66.origin.x + v66.size.width <= (double)v25
        ? (BOOL v40 = v66.origin.y + v66.size.height <= (double)v26)
        : (BOOL v40 = 0),
          !v40))
    {
      NSLog(&cfstr_SDErrorCropOri_0.isa, "cropAndScalePixelBufferVImage", 945, *(void *)&v66.origin.x, *(void *)&v66.origin.y, *(void *)&v66.size.width, *(void *)&v66.size.height);
      return 0xFFFFFFFFLL;
    }
    if (v52 < 0.0 || v54 < 0.0 || (v52 + v53 <= (double)v27 ? (BOOL v41 = v54 + v35 <= (double)v28) : (BOOL v41 = 0), !v41))
    {
      NSLog(&cfstr_SDErrorDestrec.isa, "cropAndScalePixelBufferVImage", 951, *(void *)&v52, *(void *)&v54, *(void *)&v53, *(void *)&v35);
      return 0xFFFFFFFFLL;
    }
    CVPixelBufferLockBaseAddress(a2, 0);
    CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    memset(&v61, 0, sizeof(v61));
    v67.origin.double x = v36;
    v67.origin.double y = v37;
    v67.size.double width = v38;
    v67.size.double height = v39;
    PixelBufferUtils::asVImageBuffer(pixelBuffer, v67, &v61);
    memset(&v60, 0, sizeof(v60));
    v68.origin.double x = v52;
    v68.origin.double y = v54;
    v68.size.double width = v53;
    v68.size.double height = v35;
    PixelBufferUtils::asVImageBuffer(a2, v68, &v60);
    OSType PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
    long long v43 = PixelFormatType;
    if ((int)PixelFormatType > 1380401728)
    {
      if ((int)PixelFormatType <= 1717856626)
      {
        if ((int)PixelFormatType <= 1380411456)
        {
          if (PixelFormatType != 1380401729)
          {
            if (PixelFormatType == 1380410945)
            {
              vImage_Error v46 = vImageScale_ARGBFFFF(&v61, &v60, 0, 0);
              goto LABEL_79;
            }
            goto LABEL_86;
          }
          goto LABEL_78;
        }
        if (PixelFormatType == 1380411457)
        {
          vImage_Error v46 = vImageScale_ARGB16F(&v61, &v60, 0, 0);
          goto LABEL_79;
        }
        if (PixelFormatType != 1647392359)
        {
          if (PixelFormatType != 1717855600) {
            goto LABEL_86;
          }
          goto LABEL_70;
        }
      }
      else
      {
        if ((int)PixelFormatType <= 1919365989)
        {
          if (PixelFormatType != 1717856627)
          {
            if (PixelFormatType == 1751410032)
            {
LABEL_62:
              vImageScale_NearestNeighbor<half>((uint64_t *)&v61, (uint64_t *)&v60);
LABEL_74:
              vImage_Error v45 = 0;
              goto LABEL_80;
            }
            int v44 = 1751411059;
            goto LABEL_61;
          }
LABEL_70:
          vImageScale_NearestNeighbor<float>((uint64_t *)&v61, (uint64_t *)&v60);
          goto LABEL_74;
        }
        if (PixelFormatType == 1919365990)
        {
          float32x4_t v49 = 0;
          do
          {
            v75.origin.double x = v36;
            v75.origin.double y = v37;
            v75.size.double width = v38;
            v75.size.double height = v39;
            PixelBufferUtils::asVImageBuffer(pixelBuffer, v49, v75, &src);
            vImage_Buffer v61 = src;
            v76.origin.double x = v52;
            v76.size.double width = v53;
            v76.origin.double y = v54;
            v76.size.double height = v35;
            PixelBufferUtils::asVImageBuffer(a2, v49, v76, &src);
            vImage_Buffer v60 = src;
            vImage_Error v50 = vImageScale_PlanarF(&v61, &v60, 0, 0);
            vImage_Error v45 = v50;
            if ((unint64_t)v49 > 1) {
              break;
            }
            float32x4_t v49 = (__CVBuffer *)((char *)v49 + 1);
          }
          while (!v50);
          goto LABEL_80;
        }
        if (PixelFormatType != 1932996149)
        {
          if (PixelFormatType == 1919365992)
          {
            size_t v47 = 0;
            do
            {
              v73.origin.double x = v36;
              v73.origin.double y = v37;
              v73.size.double width = v38;
              v73.size.double height = v39;
              PixelBufferUtils::asVImageBuffer(pixelBuffer, v47, v73, &src);
              vImage_Buffer v61 = src;
              v74.origin.double x = v52;
              v74.size.double width = v53;
              v74.origin.double y = v54;
              v74.size.double height = v35;
              PixelBufferUtils::asVImageBuffer(a2, v47, v74, &src);
              vImage_Buffer v60 = src;
              vImage_Error v48 = vImageScale_Planar16F(&v61, &v60, 0, 0);
              vImage_Error v45 = v48;
              if ((unint64_t)v47 > 1) {
                break;
              }
              size_t v47 = (__CVBuffer *)((char *)v47 + 1);
            }
            while (!v48);
            goto LABEL_80;
          }
          goto LABEL_86;
        }
      }
    }
    else
    {
      if ((int)PixelFormatType > 875836517)
      {
        if ((int)PixelFormatType <= 1111970368)
        {
          if (PixelFormatType != 875836518 && PixelFormatType != 875836534)
          {
            if (PixelFormatType != 1094862674) {
              goto LABEL_86;
            }
            goto LABEL_78;
          }
LABEL_51:
          memset(&src, 0, sizeof(src));
          v69.origin.double x = v36;
          v69.origin.double y = v37;
          v69.size.double width = v38;
          v69.size.double height = v39;
          PixelBufferUtils::asVImageBuffer(pixelBuffer, 0, v69, &src);
          memset(&dest, 0, sizeof(dest));
          v70.origin.double x = v52;
          v70.origin.double y = v54;
          v70.size.double width = v53;
          v70.size.double height = v35;
          PixelBufferUtils::asVImageBuffer(a2, 0, v70, &dest);
          vImage_Error v45 = vImageScale_Planar8(&src, &dest, 0, 0);
          if (!v45)
          {
            memset(&v57, 0, sizeof(v57));
            v71.origin.double x = v36;
            v71.origin.double y = v37;
            v71.size.double width = v38;
            v71.size.double height = v39;
            PixelBufferUtils::asVImageBuffer(pixelBuffer, (__CVBuffer *)1, v71, &v57);
            memset(&v56, 0, sizeof(v56));
            v72.origin.double x = v52;
            v72.origin.double y = v54;
            v72.size.double width = v53;
            v72.size.double height = v35;
            PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, v72, &v56);
            vImage_Error v46 = vImageScale_CbCr8(&v57, &v56, 0, 0);
LABEL_79:
            vImage_Error v45 = v46;
          }
LABEL_80:
          CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
          CVPixelBufferUnlockBaseAddress(a2, 0);
          return v45 != 0;
        }
        if (PixelFormatType != 1111970369)
        {
          if (PixelFormatType != 1278226534)
          {
            int v44 = 1278226536;
LABEL_61:
            if (PixelFormatType == v44) {
              goto LABEL_62;
            }
LABEL_86:
            PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)&src);
            if ((src.width & 0x8000000000000000) == 0) {
              p_vImage_Buffer src = &src;
            }
            else {
              p_vImage_Buffer src = src.data;
            }
            NSLog(&cfstr_SDErrorPixelFo.isa, "cropAndScalePixelBufferVImage", 1044, v43, p_src);
            if (SHIBYTE(src.width) < 0) {
              operator delete(src.data);
            }
            vImage_Error v45 = -21778;
            goto LABEL_80;
          }
          goto LABEL_70;
        }
LABEL_78:
        vImage_Error v46 = vImageScale_ARGB8888(&v61, &v60, 0, 0);
        goto LABEL_79;
      }
      if ((int)PixelFormatType <= 825437746)
      {
        if (PixelFormatType == 32) {
          goto LABEL_78;
        }
        if (PixelFormatType != 825306677) {
          goto LABEL_86;
        }
      }
      else if (PixelFormatType != 825437747)
      {
        if (PixelFormatType == 875704422 || PixelFormatType == 875704438) {
          goto LABEL_51;
        }
        goto LABEL_86;
      }
    }
    vImageScale_NearestNeighbor<unsigned short>((uint64_t *)&v61, (uint64_t *)&v60);
    goto LABEL_74;
  }
  double v16 = v12;
  double v17 = v11;
  double v18 = v10;
  CGFloat v19 = v9;
  double v20 = x;
  double v21 = y;
  double v22 = width;
  double v23 = height;

  return cropAndScalePixelBufferVT(pixelBuffer, a2, *(CGRect *)&v16, *(CGRect *)&v20);
}

void sub_247EF7C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t isVtTransferSupportFormat(int a1)
{
  uint64_t result = 0;
  if (a1 <= 1751410031)
  {
    if (a1 > 1717855599)
    {
      if (a1 == 1717855600) {
        return result;
      }
      int v3 = 1717856627;
    }
    else
    {
      if (a1 == 825306677) {
        return result;
      }
      int v3 = 825437747;
    }
    goto LABEL_13;
  }
  if (a1 <= 1919365989)
  {
    if (a1 == 1751410032) {
      return result;
    }
    int v3 = 1751411059;
    goto LABEL_13;
  }
  if (a1 != 1919365990 && a1 != 1919365992)
  {
    int v3 = 1932996149;
LABEL_13:
    if (a1 != v3) {
      return 1;
    }
  }
  return result;
}

uint64_t cropAndScalePixelBufferVT(__CVBuffer *a1, __CVBuffer *a2, CGRect a3, CGRect a4)
{
  VTTransferSession = createVTTransferSession(a3, a4);
  OSStatus v7 = VTPixelTransferSessionTransferImage(VTTransferSession, a1, a2);
  if (VTTransferSession)
  {
    VTPixelTransferSessionInvalidate(VTTransferSession);
    CFRelease(VTTransferSession);
  }
  if (!v7) {
    return 0;
  }
  NSLog(&cfstr_SDErrorVtpixel.isa, "cropAndScalePixelBufferVT", 1109);
  return 0xFFFFFFFFLL;
}

uint64_t *vImageScale_NearestNeighbor<float>(uint64_t *result, uint64_t *a2)
{
  unint64_t v2 = a2[1];
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = *result;
    float v5 = (float)(unint64_t)result[1] / (float)v2;
    uint64_t v6 = result[3];
    unint64_t v7 = a2[2];
    uint64_t v8 = a2[3];
    uint64_t v9 = *a2;
    float v10 = (float)(unint64_t)result[2] / (float)v7;
    do
    {
      if (v7)
      {
        for (unint64_t i = 0; i != v7; ++i)
          *(_DWORD *)(v9 + 4 * i) = *(_DWORD *)(v4
                                              + v6 * (int)(float)(v5 * (float)v3)
                                              + 4 * (int)(float)(v10 * (float)i));
      }
      ++v3;
      v9 += v8;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t *vImageScale_NearestNeighbor<unsigned short>(uint64_t *result, uint64_t *a2)
{
  unint64_t v2 = a2[1];
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = *result;
    float v5 = (float)(unint64_t)result[1] / (float)v2;
    uint64_t v6 = result[3];
    unint64_t v7 = a2[2];
    uint64_t v8 = a2[3];
    uint64_t v9 = *a2;
    float v10 = (float)(unint64_t)result[2] / (float)v7;
    do
    {
      if (v7)
      {
        for (unint64_t i = 0; i != v7; ++i)
          *(_WORD *)(v9 + 2 * i) = *(_WORD *)(v4 + v6 * (int)(float)(v5 * (float)v3) + 2
                                                                                     * (int)(float)(v10 * (float)i));
      }
      ++v3;
      v9 += v8;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t *vImageScale_NearestNeighbor<half>(uint64_t *result, uint64_t *a2)
{
  unint64_t v2 = a2[1];
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = *result;
    float v5 = (float)(unint64_t)result[1] / (float)v2;
    uint64_t v6 = result[3];
    unint64_t v7 = a2[2];
    uint64_t v8 = a2[3];
    uint64_t v9 = *a2;
    float v10 = (float)(unint64_t)result[2] / (float)v7;
    do
    {
      if (v7)
      {
        for (unint64_t i = 0; i != v7; ++i)
          *(_WORD *)(v9 + 2 * i) = *(_WORD *)(v4 + v6 * (int)(float)(v5 * (float)v3) + 2
                                                                                     * (int)(float)(v10 * (float)i));
      }
      ++v3;
      v9 += v8;
    }
    while (v3 != v2);
  }
  return result;
}

VTPixelTransferSessionRef createVTTransferSession(CGRect a1, CGRect a2)
{
  CGFloat height = a2.size.height;
  CGFloat width = a2.size.width;
  CGFloat y = a2.origin.y;
  CGFloat x = a2.origin.x;
  CGFloat v6 = a1.size.height;
  CGFloat v7 = a1.size.width;
  CGFloat v8 = a1.origin.y;
  CGFloat v9 = a1.origin.x;
  VTPixelTransferSessionRef pixelTransferSessionOut = 0;
  OSStatus v10 = VTPixelTransferSessionCreate(0, &pixelTransferSessionOut);
  v15.origin.CGFloat x = v9;
  v15.origin.CGFloat y = v8;
  v15.size.CGFloat width = v7;
  v15.size.CGFloat height = v6;
  if (!CGRectIsEmpty(v15))
  {
    v16.origin.CGFloat x = v9;
    v16.origin.CGFloat y = v8;
    v16.size.CGFloat width = v7;
    v16.size.CGFloat height = v6;
    CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v16);
    v10 |= VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x263F1EA10], DictionaryRepresentation);
    CFRelease(DictionaryRepresentation);
  }
  v17.origin.CGFloat x = x;
  v17.origin.CGFloat y = y;
  v17.size.CGFloat width = width;
  v17.size.CGFloat height = height;
  if (!CGRectIsEmpty(v17))
  {
    v18.origin.CGFloat x = x;
    v18.origin.CGFloat y = y;
    v18.size.CGFloat width = width;
    v18.size.CGFloat height = height;
    CFDictionaryRef v12 = CGRectCreateDictionaryRepresentation(v18);
    v10 |= VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x263F1E9D8], v12);
    CFRelease(v12);
  }
  VTPixelTransferSessionRef result = pixelTransferSessionOut;
  if (v10)
  {
    VTPixelTransferSessionInvalidate(pixelTransferSessionOut);
    CFRelease(pixelTransferSessionOut);
    NSLog(&cfstr_SDErrorUnableT_1.isa, "createVTTransferSession", 1080);
    return 0;
  }
  return result;
}

uint64_t PixelBufferUtils::cropAndScalePixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer *a3, CGRect a4)
{
  return PixelBufferUtils::cropAndScalePixelBuffer(this, a2, a3, a4, *MEMORY[0x263F001A8]);
}

__CVBuffer *PixelBufferUtils::createConvertedPixelBufferFormat(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer *a3)
{
  PixelBufferWithSameSize = PixelBufferUtils::createPixelBufferWithSameSize(this, a2, 1);
  if (PixelBufferUtils::convertPixelBufferFormat(this, PixelBufferWithSameSize, a3))
  {
    CVPixelBufferRelease(PixelBufferWithSameSize);
    return 0;
  }
  return PixelBufferWithSameSize;
}

uint64_t PixelBufferUtils::convertPixelBufferFormat(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer *a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  if (!this || !a2) {
    return v3;
  }
  int v5 = (int)a3;
  OSType PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
  OSStatus v10 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
  if (v5
    && isVtTransferSupportFormat((int)PixelFormatType)
    && isVtTransferSupportFormat((int)v10))
  {
    uint64_t v11 = *MEMORY[0x263F001A8];
    uint64_t v12 = *(void *)(MEMORY[0x263F001A8] + 8);
    uint64_t v13 = *(void *)(MEMORY[0x263F001A8] + 16);
    uint64_t v14 = *(void *)(MEMORY[0x263F001A8] + 24);
    uint64_t v15 = *MEMORY[0x263F001A8];
    uint64_t v16 = v12;
    uint64_t v17 = v13;
    uint64_t v18 = v14;
    return cropAndScalePixelBufferVT(this, a2, *(CGRect *)&v11, *(CGRect *)&v15);
  }
  if (PixelFormatType == v10)
  {
    return PixelBufferUtils::copyPixelBuffer(a2, this, 0);
  }
  BOOL v20 = 0;
  if ((int)PixelFormatType > 1751410031)
  {
    if (PixelFormatType != 1751410032)
    {
      int v21 = 1751411059;
      goto LABEL_18;
    }
LABEL_21:
    BOOL v20 = v10 == 1751411059 || v10 == 1717856627;
    goto LABEL_27;
  }
  if (PixelFormatType == 1717855600) {
    goto LABEL_21;
  }
  int v21 = 1717856627;
LABEL_18:
  if (PixelFormatType == v21)
  {
    BOOL v20 = 1;
    if (v10 != 1717855600) {
      BOOL v20 = v10 == 1751410032;
    }
  }
LABEL_27:
  if ((int)PixelFormatType <= 1380401728)
  {
    if ((int)PixelFormatType > 1094862673)
    {
      if ((int)PixelFormatType <= 1278226487)
      {
        if (PixelFormatType == 1094862674) {
          goto LABEL_60;
        }
        int v26 = 1111970369;
LABEL_59:
        if (PixelFormatType == v26) {
          goto LABEL_60;
        }
LABEL_141:
        PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)&src);
        if ((src.width & 0x8000000000000000) == 0) {
          p_vImage_Buffer src = &src;
        }
        else {
          p_vImage_Buffer src = src.data;
        }
        NSLog(&cfstr_SDErrorPixelFo.isa, "convertPixelBufferFormat", 2214, PixelFormatType, p_src);
LABEL_216:
        if (SHIBYTE(src.width) < 0) {
          operator delete(src.data);
        }
        return 0xFFFFFFFFLL;
      }
      if (PixelFormatType == 1278226488)
      {
        if ((int)v10 > 1380401728)
        {
          if (v10 == 1380401729 || v10 == 1380411457) {
            goto LABEL_171;
          }
          int v35 = 1380410945;
        }
        else
        {
          if (v10 == 32 || v10 == 1094862674) {
            goto LABEL_171;
          }
          int v35 = 1111970369;
        }
        if (v10 != v35)
        {
          PixelBufferUtils::pixelFormatAsString(v10, (char *)&src);
          if ((src.width & 0x8000000000000000) == 0) {
            data = &src;
          }
          else {
            data = src.data;
          }
          NSLog(&cfstr_SDErrorPixelFo.isa, "convertPixelBufferFormat", 2207, v10, data);
          goto LABEL_216;
        }
        goto LABEL_171;
      }
      if (PixelFormatType == 1278226534) {
        goto LABEL_76;
      }
      int v23 = 1278226536;
      goto LABEL_71;
    }
    if ((int)PixelFormatType <= 875704421)
    {
      if (PixelFormatType == 32) {
        goto LABEL_60;
      }
      if (PixelFormatType == 825437747) {
        goto LABEL_49;
      }
      goto LABEL_141;
    }
    if (PixelFormatType != 875704422 && PixelFormatType != 875704438) {
      goto LABEL_141;
    }
    if ((int)v10 > 1380401728)
    {
      if ((int)v10 <= 1380411456)
      {
        if (v10 == 1380401729) {
          goto LABEL_187;
        }
        unsigned __int16 v51 = 26177;
      }
      else
      {
        if (v10 == 1919365992)
        {
          return createRGBPlanarHalfFromBuffer(this, a2);
        }
        if (v10 == 1919365990)
        {
          return createRGBPlanarFloatFromBuffer(this, a2, (uint64_t)v8, v9);
        }
        unsigned __int16 v51 = 26689;
      }
      int v30 = v51 | 0x52470000;
LABEL_186:
      if (v10 == v30) {
        goto LABEL_187;
      }
LABEL_208:
      PixelBufferUtils::pixelFormatAsString(v10, (char *)&src);
      if ((src.width & 0x8000000000000000) == 0) {
        CGRect v63 = &src;
      }
      else {
        CGRect v63 = src.data;
      }
      NSLog(&cfstr_SDErrorPixelFo.isa, "convertPixelBufferFormat", 2142, v10, v63);
      goto LABEL_216;
    }
    if ((int)v10 <= 875704437)
    {
      if (v10 == 32) {
        goto LABEL_187;
      }
      if (v10 != 875704422) {
        goto LABEL_208;
      }
    }
    else if (v10 != 875704438)
    {
      if (v10 != 1094862674)
      {
        int v30 = 1111970369;
        goto LABEL_186;
      }
LABEL_187:
      return createBGRAPermutesFromYUV(this, (int)v10, a2);
    }
    NSLog(&cfstr_WarningIncorre.isa);
    uint64_t v57 = *MEMORY[0x263F00148];
    uint64_t v58 = *(void *)(MEMORY[0x263F00148] + 8);
    uint64_t v59 = *MEMORY[0x263F001A8];
    uint64_t v60 = *(void *)(MEMORY[0x263F001A8] + 8);
    uint64_t v61 = *(void *)(MEMORY[0x263F001A8] + 16);
    uint64_t v62 = *(void *)(MEMORY[0x263F001A8] + 24);
    return copyPixelBufferMultiPlane(a2, *(CGPoint *)&v57, this, *(CGRect *)&v59);
  }
  if ((int)PixelFormatType > 1717856626)
  {
    if ((int)PixelFormatType > 1751411058)
    {
      if (PixelFormatType != 1751411059)
      {
        if (PixelFormatType == 1919365990)
        {
          return convertRGBPlanarFloat(this, a2);
        }
        if (PixelFormatType == 1919365992)
        {
          return convertRGBPlanarHalf(this, a2);
        }
        goto LABEL_141;
      }
LABEL_72:
      if ((int)v10 <= 1717856626)
      {
        if (v10 == 1278226534) {
          goto LABEL_91;
        }
        unsigned __int16 v29 = 25968;
      }
      else
      {
        if (v10 == 1751411059 || v10 == 1751410032)
        {
          double v33 = &__block_literal_global_213;
          goto LABEL_135;
        }
        unsigned __int16 v29 = 26995;
      }
      if (v10 != (v29 | 0x66640000)) {
        goto LABEL_171;
      }
LABEL_91:
      uint64_t v3 = convertFloat16ToFloat32(this, a2);
      if (v3) {
        BOOL v31 = 0;
      }
      else {
        BOOL v31 = v20;
      }
      if (!v31) {
        return v3;
      }
      double v32 = &__block_literal_global_211;
LABEL_104:
      PixelBufferUtils::forEveryPixel(a2, v32, -1);
      return 0;
    }
    if (PixelFormatType == 1717856627)
    {
LABEL_76:
      if ((int)v10 > 1717856626)
      {
        if (v10 != 1717856627)
        {
          if (v10 != 1751411059 && v10 != 1751410032) {
            goto LABEL_171;
          }
          goto LABEL_99;
        }
LABEL_98:
        double v33 = &__block_literal_global_209;
LABEL_135:
        PixelBufferUtils::forEveryPixel(this, a2, v33, 0xFFFFFFFFuLL);
        return 0;
      }
      if (v10 == 1278226536)
      {
LABEL_99:
        uint64_t v3 = convertFloat32ToFloat16(this, a2);
        if (v3) {
          BOOL v34 = 0;
        }
        else {
          BOOL v34 = v20;
        }
        if (!v34) {
          return v3;
        }
        double v32 = &__block_literal_global;
        goto LABEL_104;
      }
      if (v10 == 1717855600) {
        goto LABEL_98;
      }
LABEL_171:
      return convertGrayscaleAsColor(this, v10, a2);
    }
    int v23 = 1751410032;
LABEL_71:
    if (PixelFormatType != v23) {
      goto LABEL_141;
    }
    goto LABEL_72;
  }
  if ((int)PixelFormatType <= 1380411456)
  {
    if (PixelFormatType == 1380401729) {
      goto LABEL_60;
    }
    int v26 = 1380410945;
    goto LABEL_59;
  }
  if (PixelFormatType != 1380411457)
  {
    if (PixelFormatType != 1647392359)
    {
      if (PixelFormatType != 1717855600) {
        goto LABEL_141;
      }
      goto LABEL_76;
    }
LABEL_49:
    BOOL v24 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
    CVPixelBufferLockBaseAddress(this, 1uLL);
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&src, 0, sizeof(src));
    size_t v25 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(this, *MEMORY[0x263F001A8], &src);
    memset(&dest, 0, sizeof(dest));
    PixelBufferUtils::asVImageBuffer(a2, *v25, &dest);
    if (v24 == 1278226536 || v24 == 1751410032)
    {
      vImagePixelCount width = src.width;
      if (src.width == dest.width)
      {
        vImagePixelCount height = src.height;
        if (src.height == dest.height)
        {
          CGFloat v38 = (unsigned __int16 *)src.data;
          if (src.data)
          {
            CGFloat v39 = (char *)dest.data;
            if (dest.data)
            {
              if (src.height)
              {
                uint64_t v40 = 0;
                size_t rowBytes = src.rowBytes;
                size_t v42 = dest.rowBytes;
                do
                {
                  long long v43 = v38;
                  int v44 = v39;
                  for (vImagePixelCount i = width; i; --i)
                  {
                    unsigned int v46 = *v43++;
                    _S2 = (float)((float)v46 * 0.000125) + 0.0;
                    __asm { FCVT            H2, S2 }
                    *v44++ = LOWORD(_S2);
                  }
                  uint64_t v3 = 0;
                  ++v40;
                  v39 += v42;
                  CGFloat v38 = (unsigned __int16 *)((char *)v38 + rowBytes);
                }
                while (v40 != height);
              }
              else
              {
                uint64_t v3 = 0;
              }
              goto LABEL_166;
            }
          }
        }
      }
    }
    else
    {
      if (v24 == 1717855600)
      {
        if (vImageConvert_16UToF(&src, &dest, 0.0, 0.000125, 0)) {
          uint64_t v3 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v3 = 0;
        }
        goto LABEL_166;
      }
      PixelBufferUtils::pixelFormatAsString(v24, (char *)__p);
      if (v66 >= 0) {
        size_t v55 = __p;
      }
      else {
        size_t v55 = (void **)__p[0];
      }
      NSLog(&cfstr_SDErrorPixelFo.isa, "convertfp13_3ToDepthMeters", 1701, v24, v55);
      if (v66 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v3 = 0xFFFFFFFFLL;
LABEL_166:
    CVPixelBufferUnlockBaseAddress(this, 1uLL);
    CVPixelBufferUnlockBaseAddress(a2, 0);
    return v3;
  }
LABEL_60:
  if ((int)v10 > 1380401728)
  {
    if ((int)v10 <= 1380411456)
    {
      if (v10 == 1380401729) {
        goto LABEL_114;
      }
      unsigned __int16 v28 = 26177;
    }
    else
    {
      if (v10 == 1919365992)
      {
        if (PixelFormatType == 1380410945)
        {
          return convert4ChannelToPlanar<float,half>(this, a2);
        }
        else if (PixelFormatType == 1380411457)
        {
          return convert4ChannelToPlanar<half,half>(this, a2);
        }
        else
        {
          return convert4ChannelToPlanar<unsigned char,half>(this, a2);
        }
      }
      if (v10 == 1919365990)
      {
        if (PixelFormatType == 1380410945)
        {
          return convert4ChannelToPlanar<float,float>(this, a2);
        }
        else if (PixelFormatType == 1380411457)
        {
          return convert4ChannelToPlanar<half,float>(this, a2);
        }
        else
        {
          return convert4ChannelToPlanar<unsigned char,float>(this, a2);
        }
      }
      unsigned __int16 v28 = 26689;
    }
    int v27 = v28 | 0x52470000;
LABEL_113:
    if (v10 == v27) {
      goto LABEL_114;
    }
    goto LABEL_155;
  }
  if ((int)v10 > 875704437)
  {
    if (v10 != 875704438)
    {
      if (v10 != 1094862674)
      {
        int v27 = 1111970369;
        goto LABEL_113;
      }
LABEL_114:
      return convert4ChannelFormats(this, (int)v10, a2);
    }
    goto LABEL_107;
  }
  if (v10 == 32) {
    goto LABEL_114;
  }
  if (v10 == 875704422)
  {
LABEL_107:
    return YUVFromBGRAPermutes(this, a2, v8);
  }
LABEL_155:
  if (PixelBufferUtils::planeCountForPixelFormat(v10)
    || PixelBufferUtils::componentsPerPixelForPixelFormat(v10, 0) != 1)
  {
    PixelBufferUtils::pixelFormatAsString(v10, (char *)&src);
    if ((src.width & 0x8000000000000000) == 0) {
      vImage_Buffer v56 = &src;
    }
    else {
      vImage_Buffer v56 = src.data;
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "convertPixelBufferFormat", 2103, v10, v56);
    goto LABEL_216;
  }

  return convertColorToGrayscale(this, a2, v53, v54);
}

void sub_247EF8DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (*(char *)(v19 - 57) < 0) {
    operator delete(*(void **)(v19 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t PixelBufferUtils::copyPixelBuffer(PixelBufferUtils *this, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  int v3 = (int)a3;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(this)) {
    return 0xFFFFFFFFLL;
  }
  if (v3 && isVtTransferSupportFormat(PixelFormatType))
  {
    uint64_t v7 = *MEMORY[0x263F001A8];
    uint64_t v8 = *(void *)(MEMORY[0x263F001A8] + 8);
    uint64_t v9 = *(void *)(MEMORY[0x263F001A8] + 16);
    uint64_t v10 = *(void *)(MEMORY[0x263F001A8] + 24);
    uint64_t v11 = *MEMORY[0x263F001A8];
    uint64_t v12 = v8;
    uint64_t v13 = v9;
    uint64_t v14 = v10;
    return cropAndScalePixelBufferVT(pixelBuffer, this, *(CGRect *)&v7, *(CGRect *)&v11);
  }
  else
  {
    uint64_t v16 = *MEMORY[0x263F00148];
    uint64_t v17 = *(void *)(MEMORY[0x263F00148] + 8);
    uint64_t v18 = *MEMORY[0x263F001A8];
    uint64_t v19 = *(void *)(MEMORY[0x263F001A8] + 8);
    uint64_t v20 = *(void *)(MEMORY[0x263F001A8] + 16);
    uint64_t v21 = *(void *)(MEMORY[0x263F001A8] + 24);
    return copyPixelBufferVImage(this, *(CGPoint *)&v16, pixelBuffer, *(CGRect *)&v18);
  }
}

uint64_t convert4ChannelFormats(__CVBuffer *a1, int a2, __CVBuffer *a3)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  uint64_t v7 = RGBA_FORMAT_MAP();
  LODWORD(src.data) = a2;
  HIDWORD(src.data) = PixelFormatType;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)src.data, &src);
  uint64_t v9 = (const uint8_t *)v8[3];
  int v10 = *((_DWORD *)v8 + 8);
  CVPixelBufferLockBaseAddress(a3, 0);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  memset(&src, 0, sizeof(src));
  uint64_t v11 = (CGRect *)MEMORY[0x263F001A8];
  PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &src);
  memset(&v86, 0, sizeof(v86));
  PixelBufferUtils::asVImageBuffer(a3, *v11, &v86);
  long long maxFloat = xmmword_247F246A0;
  minFloat[0] = 0;
  minFloat[1] = 0;
  switch(v10)
  {
    case 0:
      vImage_Error v13 = vImagePermuteChannels_ARGB8888(&src, &v86, v9, 0);
      goto LABEL_23;
    case 1:
      vImagePixelCount height = src.height;
      if (src.height != v86.height) {
        goto LABEL_52;
      }
      vImagePixelCount width = src.width;
      if (src.width != v86.width) {
        goto LABEL_52;
      }
      if (!src.height) {
        goto LABEL_56;
      }
      uint64_t v16 = 0;
      size_t rowBytes = v86.rowBytes;
      data = (char *)src.data;
      size_t v19 = src.rowBytes;
      uint64_t v20 = (char *)v86.data;
      do
      {
        if (width)
        {
          uint64_t v21 = &v20[v16 * rowBytes];
          vImagePixelCount v22 = width;
          int v23 = &data[v16 * v19];
          do
          {
            LOBYTE(_S1) = *v23;
            *(float *)&unsigned int v24 = (float)LODWORD(_S1) * 0.0039216;
            *(float *)&v21[4 * *v9] = *(float *)&v24;
            LOBYTE(v24) = v23[1];
            *(float *)&unsigned int v25 = (float)v24 * 0.0039216;
            *(float *)&v21[4 * v9[1]] = *(float *)&v25;
            LOBYTE(v25) = v23[2];
            *(float *)&unsigned int v26 = (float)v25 * 0.0039216;
            *(float *)&v21[4 * v9[2]] = *(float *)&v26;
            LOBYTE(v26) = v23[3];
            _S1 = (float)v26 * 0.0039216;
            *(float *)&v21[4 * v9[3]] = _S1;
            v23 += 4;
            v21 += 16;
            --v22;
          }
          while (v22);
        }
        uint64_t v27 = 0;
        ++v16;
      }
      while (v16 != height);
      break;
    case 2:
      vImagePixelCount v28 = src.height;
      if (src.height != v86.height) {
        goto LABEL_52;
      }
      vImagePixelCount v29 = src.width;
      if (src.width != v86.width) {
        goto LABEL_52;
      }
      if (!src.height) {
        goto LABEL_56;
      }
      uint64_t v30 = 0;
      size_t v32 = v86.rowBytes;
      BOOL v31 = (char *)src.data;
      size_t v33 = src.rowBytes;
      BOOL v34 = (char *)v86.data;
      do
      {
        if (v29)
        {
          int v35 = &v34[v30 * v32];
          vImagePixelCount v36 = v29;
          CGFloat v37 = &v31[v30 * v33];
          do
          {
            LOBYTE(_S1) = *v37;
            *(float *)&_S1 = (float)LODWORD(_S1) * 0.0039216;
            __asm { FCVT            H1, S1 }
            *(_WORD *)&v35[2 * *v9] = _S1;
            LOBYTE(_S1) = v37[1];
            *(float *)&_S1 = (float)_S1 * 0.0039216;
            __asm { FCVT            H1, S1 }
            *(_WORD *)&v35[2 * v9[1]] = _S1;
            LOBYTE(_S1) = v37[2];
            *(float *)&_S1 = (float)_S1 * 0.0039216;
            __asm { FCVT            H1, S1 }
            *(_WORD *)&v35[2 * v9[2]] = _S1;
            LOBYTE(_S1) = v37[3];
            _S1 = (float)_S1 * 0.0039216;
            __asm { FCVT            H1, S1 }
            *(_WORD *)&v35[2 * v9[3]] = LOWORD(_S1);
            v37 += 4;
            v35 += 8;
            --v36;
          }
          while (v36);
        }
        uint64_t v27 = 0;
        ++v30;
      }
      while (v30 != v28);
      break;
    case 3:
      vImage_Error v13 = vImageConvert_ARGBFFFFtoARGB8888_dithered(&src, &v86, (const float *)&maxFloat, (const float *)minFloat, 0, v9, 0);
      goto LABEL_23;
    case 4:
      vImage_Error v13 = vImagePermuteChannels_ARGBFFFF(&src, &v86, v9, 0);
LABEL_23:
      uint64_t v27 = v13;
      break;
    case 5:
      vImagePixelCount v45 = src.height;
      if (src.height != v86.height) {
        goto LABEL_52;
      }
      vImagePixelCount v46 = src.width;
      if (src.width != v86.width) {
        goto LABEL_52;
      }
      if (!src.height) {
        goto LABEL_56;
      }
      uint64_t v47 = 0;
      size_t v49 = v86.rowBytes;
      vImage_Error v48 = (char *)src.data;
      size_t v50 = src.rowBytes;
      unsigned __int16 v51 = (char *)v86.data;
      do
      {
        if (v46)
        {
          double v52 = &v51[v47 * v49];
          vImagePixelCount v53 = v46;
          BOOL v54 = &v48[v47 * v50];
          do
          {
            _S0 = *(_DWORD *)v54;
            __asm { FCVT            H0, S0 }
            *(_WORD *)&v52[2 * *v9] = _S0;
            _S0 = *((_DWORD *)v54 + 1);
            __asm { FCVT            H0, S0 }
            *(_WORD *)&v52[2 * v9[1]] = _S0;
            _S0 = *((_DWORD *)v54 + 2);
            __asm { FCVT            H0, S0 }
            *(_WORD *)&v52[2 * v9[2]] = _S0;
            _S0 = *((_DWORD *)v54 + 3);
            __asm { FCVT            H0, S0 }
            *(_WORD *)&v52[2 * v9[3]] = _S0;
            v52 += 8;
            v54 += 16;
            --v53;
          }
          while (v53);
        }
        uint64_t v27 = 0;
        ++v47;
      }
      while (v47 != v45);
      break;
    case 6:
      vImagePixelCount v59 = src.height;
      if (src.height != v86.height) {
        goto LABEL_52;
      }
      vImagePixelCount v60 = src.width;
      if (src.width != v86.width) {
        goto LABEL_52;
      }
      if (!src.height) {
        goto LABEL_56;
      }
      uint64_t v61 = 0;
      size_t v63 = v86.rowBytes;
      uint64_t v62 = (char *)src.data;
      size_t v64 = src.rowBytes;
      CGRect v65 = (char *)v86.data;
      do
      {
        if (v60)
        {
          char v66 = &v65[v61 * v63];
          vImagePixelCount v67 = v60;
          CGRect v68 = &v62[v61 * v64];
          do
          {
            _H0 = *(_WORD *)v68;
            __asm { FCVT            S0, H0 }
            *(_DWORD *)&v66[4 * *v9] = _S0;
            LOWORD(_S0) = *((_WORD *)v68 + 1);
            __asm { FCVT            S0, H0 }
            *(_DWORD *)&v66[4 * v9[1]] = _S0;
            LOWORD(_S0) = *((_WORD *)v68 + 2);
            __asm { FCVT            S0, H0 }
            *(_DWORD *)&v66[4 * v9[2]] = _S0;
            LOWORD(_S0) = *((_WORD *)v68 + 3);
            __asm { FCVT            S0, H0 }
            *(_DWORD *)&v66[4 * v9[3]] = _S0;
            v66 += 16;
            v68 += 8;
            --v67;
          }
          while (v67);
        }
        uint64_t v27 = 0;
        ++v61;
      }
      while (v61 != v59);
      break;
    case 7:
      vImagePixelCount v74 = src.height;
      if (src.height != v86.height) {
        goto LABEL_52;
      }
      vImagePixelCount v75 = src.width;
      if (src.width != v86.width) {
        goto LABEL_52;
      }
      if (src.height)
      {
        vImagePixelCount v76 = 0;
        do
        {
          if (v75)
          {
            vImagePixelCount v77 = 0;
            float32x4_t v78 = (char *)v86.data + v86.rowBytes * v76;
            float32x4_t v79 = (__int16 *)((char *)src.data + src.rowBytes * v76);
            do
            {
              _H0 = *v79;
              __asm { FCVT            S0, H0 }
              v78[*v9] = (int)(float)(_S0 * 255.0);
              LOWORD(_S0) = v79[1];
              __asm { FCVT            S0, H0 }
              v78[v9[1]] = (int)(float)(_S0 * 255.0);
              LOWORD(_S0) = v79[2];
              __asm { FCVT            S0, H0 }
              v78[v9[2]] = (int)(float)(_S0 * 255.0);
              LOWORD(_S0) = v79[3];
              __asm { FCVT            S0, H0 }
              v78[v9[3]] = (int)(float)(_S0 * 255.0);
              ++v77;
              v78 += 4;
              vImagePixelCount v75 = src.width;
              v79 += 4;
            }
            while (v77 < src.width);
            vImagePixelCount v74 = src.height;
          }
          uint64_t v27 = 0;
          ++v76;
        }
        while (v76 < v74);
      }
      else
      {
LABEL_56:
        uint64_t v27 = 0;
      }
      break;
    default:
LABEL_52:
      uint64_t v27 = -1;
      break;
  }
  CVPixelBufferUnlockBaseAddress(a3, 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  if (v27) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

BOOL YUVFromBGRAPermutes(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3)
{
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType == 1380411457 || (uint64_t v6 = PixelFormatType, PixelFormatType == 1380410945))
  {
    uint64_t v6 = 1111970369;
    PixelBufferWithSameSize = PixelBufferUtils::createPixelBufferWithSameSize(a1, (__CVBuffer *)0x42475241, 1);
    vImage_Error v8 = (int)convert4ChannelFormats(a1, 1111970369, PixelBufferWithSameSize);
  }
  else
  {
    vImage_Error v8 = 0;
    PixelBufferWithSameSize = a1;
  }
  uint64_t v9 = RGBA_FORMAT_MAP();
  src.data = (void *)((v6 << 32) | 0x20);
  int v10 = (const uint8_t *)std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v9, (unint64_t)src.data, &src)[3];
  CVPixelBufferLockBaseAddress(a2, 0);
  CVPixelBufferLockBaseAddress(PixelBufferWithSameSize, 1uLL);
  memset(&src, 0, sizeof(src));
  uint64_t v11 = (CGRect *)MEMORY[0x263F001A8];
  PixelBufferUtils::asVImageBuffer(PixelBufferWithSameSize, *MEMORY[0x263F001A8], &src);
  memset(&destYp, 0, sizeof(destYp));
  PixelBufferUtils::asVImageBuffer(a2, 0, *v11, &destYp);
  memset(&destCbCr, 0, sizeof(destCbCr));
  PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, *v11, &destCbCr);
  if ((YUVFromBGRAPermutes(__CVBuffer *,unsigned int,__CVBuffer *)::isConvesionInfoDefined & 1) == 0)
  {
    vImage_YpCbCrPixelRange v13 = *(vImage_YpCbCrPixelRange *)ymmword_247F26380;
    vImage_Error v8 = vImageConvert_ARGBToYpCbCr_GenerateConversion((const vImage_ARGBToYpCbCrMatrix *)*MEMORY[0x263EFAA18], &v13, &YUVFromBGRAPermutes(__CVBuffer *,unsigned int,__CVBuffer *)::conversionInfo, kvImageARGB8888, kvImage420Yp8_CbCr8, 0);
    YUVFromBGRAPermutes(__CVBuffer *,unsigned int,__CVBuffer *)::isConvesionInfoDefined = 1;
  }
  if (!v8) {
    vImage_Error v8 = vImageConvert_ARGB8888To420Yp8_CbCr8(&src, &destYp, &destCbCr, &YUVFromBGRAPermutes(__CVBuffer *,unsigned int,__CVBuffer *)::conversionInfo, v10, 0);
  }
  CVPixelBufferUnlockBaseAddress(PixelBufferWithSameSize, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  if (CVPixelBufferGetPixelFormatType(a1) == 1380410945) {
    CVPixelBufferRelease(PixelBufferWithSameSize);
  }
  return v8 != 0;
}

uint64_t convert4ChannelToPlanar<half,float>(__CVBuffer *a1, __CVBuffer *a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  int v5 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
  unint64_t v6 = PixelBufferUtils::planeCountForPixelFormat(v5);
  if (PixelBufferUtils::componentsPerPixelForPixelFormat(PixelFormatType, 0) == 4)
  {
    if (v6)
    {
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      uint64_t v7 = RGBA_FORMAT_MAP();
      LODWORD(__p[0]) = v5;
      HIDWORD(__p[0]) = PixelFormatType;
      vImage_Error v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)__p[0], __p);
      unsigned int v9 = *((_DWORD *)v8 + 8) - 1;
      float v10 = 1.0;
      if (v9 <= 6) {
        float v10 = flt_247F263A0[v9];
      }
      uint64_t v11 = (unsigned __int8 *)v8[3];
      memset(&v43, 0, sizeof(v43));
      uint64_t v12 = (CGRect *)MEMORY[0x263F001A8];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v43);
      uint64_t v13 = 0;
      int v42 = 0;
      do
      {
        unsigned int v15 = *v11++;
        uint64_t v14 = (__CVBuffer *)v15;
        if (v6 <= v15)
        {
          uint64_t v18 = &__p[v13];
          *uint64_t v18 = &v42;
          v18[1] = 0;
          v18[2] = 0;
          v18[3] = 0;
        }
        else
        {
          PixelBufferUtils::asVImageBuffer(a2, v14, *v12, &v41);
          uint64_t v16 = &__p[v13];
          long long v17 = *(_OWORD *)&v41.width;
          *(_OWORD *)uint64_t v16 = *(_OWORD *)&v41.data;
          *((_OWORD *)v16 + 1) = v17;
        }
        v13 += 4;
      }
      while (v13 != 16);
      vImagePixelCount height = v43.height;
      if (v43.height)
      {
        uint64_t v20 = 0;
        long long v21 = *(_OWORD *)&v43.width;
        data = (char *)v43.data;
        do
        {
          uint64_t v23 = 0;
          unsigned int v24 = (__int16 *)data;
          do
          {
            unsigned int v25 = &__p[4 * v23];
            unsigned int v26 = (char *)*v25;
            uint64_t v27 = v25[3];
            if (&v26[(void)v27 * v20] != (char *)&v42 && (void)v21 != 0)
            {
              vImagePixelCount v29 = (float *)&v26[v20 * (void)v27];
              uint64_t v30 = v24;
              uint64_t v31 = v21;
              do
              {
                __int16 v32 = *v30;
                v30 += 4;
                _H0 = v32;
                __asm { FCVT            S0, H0 }
                *v29++ = v10 * _S0;
                --v31;
              }
              while (v31);
            }
            ++v23;
            ++v24;
          }
          while (v23 != 4);
          ++v20;
          data += *((void *)&v21 + 1);
        }
        while (v20 != height);
      }
      CVPixelBufferUnlockBaseAddress(a2, 0);
      CVPixelBufferUnlockBaseAddress(a1, 1uLL);
      return 0;
    }
    else
    {
      PixelBufferUtils::pixelFormatAsString(v5, (char *)__p);
      if (v45 >= 0) {
        uint64_t v40 = __p;
      }
      else {
        uint64_t v40 = (void **)__p[0];
      }
      NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1264, v5, v40);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      return 4294967294;
    }
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v45 >= 0) {
      CGFloat v39 = __p;
    }
    else {
      CGFloat v39 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1258, PixelFormatType, v39);
    if (v45 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_247EF9974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convert4ChannelToPlanar<float,float>(__CVBuffer *a1, __CVBuffer *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  int v5 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
  unint64_t v6 = PixelBufferUtils::planeCountForPixelFormat(v5);
  if (PixelBufferUtils::componentsPerPixelForPixelFormat(PixelFormatType, 0) == 4)
  {
    if (v6)
    {
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      uint64_t v7 = RGBA_FORMAT_MAP();
      LODWORD(__p[0]) = v5;
      HIDWORD(__p[0]) = PixelFormatType;
      vImage_Error v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)__p[0], __p);
      unsigned int v9 = *((_DWORD *)v8 + 8) - 1;
      float v10 = 1.0;
      if (v9 <= 6) {
        float v10 = flt_247F263A0[v9];
      }
      uint64_t v11 = (unsigned __int8 *)v8[3];
      memset(&v38, 0, sizeof(v38));
      uint64_t v12 = (CGRect *)MEMORY[0x263F001A8];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v38);
      uint64_t v13 = 0;
      int v37 = 0;
      do
      {
        unsigned int v15 = *v11++;
        uint64_t v14 = (__CVBuffer *)v15;
        if (v6 <= v15)
        {
          uint64_t v18 = &__p[v13];
          *uint64_t v18 = &v37;
          v18[1] = 0;
          v18[2] = 0;
          v18[3] = 0;
        }
        else
        {
          PixelBufferUtils::asVImageBuffer(a2, v14, *v12, &v36);
          uint64_t v16 = &__p[v13];
          long long v17 = *(_OWORD *)&v36.width;
          *(_OWORD *)uint64_t v16 = *(_OWORD *)&v36.data;
          *((_OWORD *)v16 + 1) = v17;
        }
        v13 += 4;
      }
      while (v13 != 16);
      vImagePixelCount height = v38.height;
      if (v38.height)
      {
        uint64_t v20 = 0;
        long long v21 = *(_OWORD *)&v38.width;
        data = (float *)v38.data;
        do
        {
          uint64_t v23 = 0;
          unsigned int v24 = data;
          do
          {
            unsigned int v25 = &__p[4 * v23];
            unsigned int v26 = (char *)*v25;
            uint64_t v27 = v25[3];
            if (&v26[(void)v27 * v20] != (char *)&v37 && (void)v21 != 0)
            {
              vImagePixelCount v29 = (float *)&v26[v20 * (void)v27];
              uint64_t v30 = v24;
              uint64_t v31 = v21;
              do
              {
                float v32 = *v30;
                v30 += 4;
                *v29++ = v10 * v32;
                --v31;
              }
              while (v31);
            }
            ++v23;
            ++v24;
          }
          while (v23 != 4);
          ++v20;
          data = (float *)((char *)data + *((void *)&v21 + 1));
        }
        while (v20 != height);
      }
      CVPixelBufferUnlockBaseAddress(a2, 0);
      CVPixelBufferUnlockBaseAddress(a1, 1uLL);
      return 0;
    }
    else
    {
      PixelBufferUtils::pixelFormatAsString(v5, (char *)__p);
      if (v40 >= 0) {
        int v35 = __p;
      }
      else {
        int v35 = (void **)__p[0];
      }
      NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1264, v5, v35);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      return 4294967294;
    }
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v40 >= 0) {
      BOOL v34 = __p;
    }
    else {
      BOOL v34 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1258, PixelFormatType, v34);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_247EF9C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convert4ChannelToPlanar<unsigned char,float>(__CVBuffer *a1, __CVBuffer *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  int v5 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
  unint64_t v6 = PixelBufferUtils::planeCountForPixelFormat(v5);
  if (PixelBufferUtils::componentsPerPixelForPixelFormat(PixelFormatType, 0) == 4)
  {
    if (v6)
    {
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      uint64_t v7 = RGBA_FORMAT_MAP();
      LODWORD(__p[0]) = v5;
      HIDWORD(__p[0]) = PixelFormatType;
      vImage_Error v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)__p[0], __p);
      unsigned int v9 = *((_DWORD *)v8 + 8) - 1;
      float v10 = 1.0;
      if (v9 <= 6) {
        float v10 = flt_247F263A0[v9];
      }
      uint64_t v11 = (unsigned __int8 *)v8[3];
      memset(&v38, 0, sizeof(v38));
      uint64_t v12 = (CGRect *)MEMORY[0x263F001A8];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v38);
      uint64_t v13 = 0;
      int v37 = 0;
      do
      {
        unsigned int v15 = *v11++;
        uint64_t v14 = (__CVBuffer *)v15;
        if (v6 <= v15)
        {
          uint64_t v18 = &__p[v13];
          *uint64_t v18 = &v37;
          v18[1] = 0;
          v18[2] = 0;
          v18[3] = 0;
        }
        else
        {
          PixelBufferUtils::asVImageBuffer(a2, v14, *v12, &v36);
          uint64_t v16 = &__p[v13];
          long long v17 = *(_OWORD *)&v36.width;
          *(_OWORD *)uint64_t v16 = *(_OWORD *)&v36.data;
          *((_OWORD *)v16 + 1) = v17;
        }
        v13 += 4;
      }
      while (v13 != 16);
      vImagePixelCount height = v38.height;
      if (v38.height)
      {
        uint64_t v20 = 0;
        long long v21 = *(_OWORD *)&v38.width;
        data = (char *)v38.data;
        do
        {
          uint64_t v23 = 0;
          unsigned int v24 = (unsigned __int8 *)data;
          do
          {
            unsigned int v25 = &__p[4 * v23];
            unsigned int v26 = (char *)*v25;
            uint64_t v27 = v25[3];
            if (&v26[(void)v27 * v20] != (char *)&v37 && (void)v21 != 0)
            {
              vImagePixelCount v29 = (float *)&v26[v20 * (void)v27];
              uint64_t v30 = v24;
              uint64_t v31 = v21;
              do
              {
                unsigned int v32 = *v30;
                v30 += 4;
                *v29++ = v10 * (float)v32;
                --v31;
              }
              while (v31);
            }
            ++v23;
            ++v24;
          }
          while (v23 != 4);
          ++v20;
          data += *((void *)&v21 + 1);
        }
        while (v20 != height);
      }
      CVPixelBufferUnlockBaseAddress(a2, 0);
      CVPixelBufferUnlockBaseAddress(a1, 1uLL);
      return 0;
    }
    else
    {
      PixelBufferUtils::pixelFormatAsString(v5, (char *)__p);
      if (v40 >= 0) {
        int v35 = __p;
      }
      else {
        int v35 = (void **)__p[0];
      }
      NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1264, v5, v35);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      return 4294967294;
    }
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v40 >= 0) {
      BOOL v34 = __p;
    }
    else {
      BOOL v34 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1258, PixelFormatType, v34);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_247EF9F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convert4ChannelToPlanar<half,half>(__CVBuffer *a1, __CVBuffer *a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  int v5 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
  unint64_t v6 = PixelBufferUtils::planeCountForPixelFormat(v5);
  if (PixelBufferUtils::componentsPerPixelForPixelFormat(PixelFormatType, 0) == 4)
  {
    if (v6)
    {
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      uint64_t v7 = RGBA_FORMAT_MAP();
      LODWORD(__p[0]) = v5;
      HIDWORD(__p[0]) = PixelFormatType;
      vImage_Error v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)__p[0], __p);
      unsigned int v9 = *((_DWORD *)v8 + 8) - 1;
      float v10 = 1.0;
      if (v9 <= 6) {
        float v10 = flt_247F263A0[v9];
      }
      uint64_t v11 = (unsigned __int8 *)v8[3];
      memset(&v44, 0, sizeof(v44));
      uint64_t v12 = (CGRect *)MEMORY[0x263F001A8];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v44);
      uint64_t v13 = 0;
      __int16 v43 = 0;
      do
      {
        unsigned int v15 = *v11++;
        uint64_t v14 = (__CVBuffer *)v15;
        if (v6 <= v15)
        {
          uint64_t v18 = &__p[v13];
          *uint64_t v18 = &v43;
          v18[1] = 0;
          v18[2] = 0;
          v18[3] = 0;
        }
        else
        {
          PixelBufferUtils::asVImageBuffer(a2, v14, *v12, &v42);
          uint64_t v16 = &__p[v13];
          long long v17 = *(_OWORD *)&v42.width;
          *(_OWORD *)uint64_t v16 = *(_OWORD *)&v42.data;
          *((_OWORD *)v16 + 1) = v17;
        }
        v13 += 4;
      }
      while (v13 != 16);
      vImagePixelCount height = v44.height;
      if (v44.height)
      {
        uint64_t v20 = 0;
        long long v21 = *(_OWORD *)&v44.width;
        data = (char *)v44.data;
        do
        {
          uint64_t v23 = 0;
          unsigned int v24 = (__int16 *)data;
          do
          {
            unsigned int v25 = &__p[4 * v23];
            unsigned int v26 = (char *)*v25;
            uint64_t v27 = v25[3];
            if (&v26[(void)v27 * v20] != (char *)&v43 && (void)v21 != 0)
            {
              vImagePixelCount v29 = &v26[v20 * (void)v27];
              uint64_t v30 = v24;
              uint64_t v31 = v21;
              do
              {
                __int16 v32 = *v30;
                v30 += 4;
                _H0 = v32;
                __asm { FCVT            S0, H0 }
                _S0 = v10 * _S0;
                __asm { FCVT            H0, S0 }
                *(_WORD *)vImagePixelCount v29 = LOWORD(_S0);
                v29 += 2;
                --v31;
              }
              while (v31);
            }
            ++v23;
            ++v24;
          }
          while (v23 != 4);
          ++v20;
          data += *((void *)&v21 + 1);
        }
        while (v20 != height);
      }
      CVPixelBufferUnlockBaseAddress(a2, 0);
      CVPixelBufferUnlockBaseAddress(a1, 1uLL);
      return 0;
    }
    else
    {
      PixelBufferUtils::pixelFormatAsString(v5, (char *)__p);
      if (v46 >= 0) {
        uint64_t v41 = __p;
      }
      else {
        uint64_t v41 = (void **)__p[0];
      }
      NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1264, v5, v41);
      if (v46 < 0) {
        operator delete(__p[0]);
      }
      return 4294967294;
    }
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v46 >= 0) {
      char v40 = __p;
    }
    else {
      char v40 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1258, PixelFormatType, v40);
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_247EFA278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convert4ChannelToPlanar<float,half>(__CVBuffer *a1, __CVBuffer *a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  int v5 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
  unint64_t v6 = PixelBufferUtils::planeCountForPixelFormat(v5);
  if (PixelBufferUtils::componentsPerPixelForPixelFormat(PixelFormatType, 0) == 4)
  {
    if (v6)
    {
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      uint64_t v7 = RGBA_FORMAT_MAP();
      LODWORD(__p[0]) = v5;
      HIDWORD(__p[0]) = PixelFormatType;
      vImage_Error v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)__p[0], __p);
      unsigned int v9 = *((_DWORD *)v8 + 8) - 1;
      float v10 = 1.0;
      if (v9 <= 6) {
        float v10 = flt_247F263A0[v9];
      }
      uint64_t v11 = (unsigned __int8 *)v8[3];
      memset(&v44, 0, sizeof(v44));
      uint64_t v12 = (CGRect *)MEMORY[0x263F001A8];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v44);
      uint64_t v13 = 0;
      __int16 v43 = 0;
      do
      {
        unsigned int v15 = *v11++;
        uint64_t v14 = (__CVBuffer *)v15;
        if (v6 <= v15)
        {
          uint64_t v18 = &__p[v13];
          *uint64_t v18 = &v43;
          v18[1] = 0;
          v18[2] = 0;
          v18[3] = 0;
        }
        else
        {
          PixelBufferUtils::asVImageBuffer(a2, v14, *v12, &v42);
          uint64_t v16 = &__p[v13];
          long long v17 = *(_OWORD *)&v42.width;
          *(_OWORD *)uint64_t v16 = *(_OWORD *)&v42.data;
          *((_OWORD *)v16 + 1) = v17;
        }
        v13 += 4;
      }
      while (v13 != 16);
      vImagePixelCount height = v44.height;
      if (v44.height)
      {
        uint64_t v20 = 0;
        long long v21 = *(_OWORD *)&v44.width;
        data = (char *)v44.data;
        do
        {
          uint64_t v23 = 0;
          unsigned int v24 = (int *)data;
          do
          {
            unsigned int v25 = &__p[4 * v23];
            unsigned int v26 = (char *)*v25;
            uint64_t v27 = v25[3];
            if (&v26[(void)v27 * v20] != (char *)&v43 && (void)v21 != 0)
            {
              vImagePixelCount v29 = &v26[v20 * (void)v27];
              uint64_t v30 = v24;
              uint64_t v31 = v21;
              do
              {
                int v32 = *v30;
                v30 += 4;
                _S0 = v32;
                __asm
                {
                  FCVT            H0, S0
                  FCVT            S0, H0
                }
                _S0 = v10 * _S0;
                __asm { FCVT            H0, S0 }
                *(_WORD *)vImagePixelCount v29 = LOWORD(_S0);
                v29 += 2;
                --v31;
              }
              while (v31);
            }
            ++v23;
            ++v24;
          }
          while (v23 != 4);
          ++v20;
          data += *((void *)&v21 + 1);
        }
        while (v20 != height);
      }
      CVPixelBufferUnlockBaseAddress(a2, 0);
      CVPixelBufferUnlockBaseAddress(a1, 1uLL);
      return 0;
    }
    else
    {
      PixelBufferUtils::pixelFormatAsString(v5, (char *)__p);
      if (v46 >= 0) {
        uint64_t v41 = __p;
      }
      else {
        uint64_t v41 = (void **)__p[0];
      }
      NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1264, v5, v41);
      if (v46 < 0) {
        operator delete(__p[0]);
      }
      return 4294967294;
    }
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v46 >= 0) {
      char v40 = __p;
    }
    else {
      char v40 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1258, PixelFormatType, v40);
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_247EFA584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convert4ChannelToPlanar<unsigned char,half>(__CVBuffer *a1, __CVBuffer *a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  int v5 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
  unint64_t v6 = PixelBufferUtils::planeCountForPixelFormat(v5);
  if (PixelBufferUtils::componentsPerPixelForPixelFormat(PixelFormatType, 0) == 4)
  {
    if (v6)
    {
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      uint64_t v7 = RGBA_FORMAT_MAP();
      LODWORD(__p[0]) = v5;
      HIDWORD(__p[0]) = PixelFormatType;
      vImage_Error v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)__p[0], __p);
      unsigned int v9 = *((_DWORD *)v8 + 8) - 1;
      float v10 = 1.0;
      if (v9 <= 6) {
        float v10 = flt_247F263A0[v9];
      }
      uint64_t v11 = (unsigned __int8 *)v8[3];
      memset(&v42, 0, sizeof(v42));
      uint64_t v12 = (CGRect *)MEMORY[0x263F001A8];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v42);
      uint64_t v13 = 0;
      __int16 v41 = 0;
      do
      {
        unsigned int v15 = *v11++;
        uint64_t v14 = (__CVBuffer *)v15;
        if (v6 <= v15)
        {
          uint64_t v18 = &__p[v13];
          *uint64_t v18 = &v41;
          v18[1] = 0;
          v18[2] = 0;
          v18[3] = 0;
        }
        else
        {
          PixelBufferUtils::asVImageBuffer(a2, v14, *v12, &v40);
          uint64_t v16 = &__p[v13];
          long long v17 = *(_OWORD *)&v40.width;
          *(_OWORD *)uint64_t v16 = *(_OWORD *)&v40.data;
          *((_OWORD *)v16 + 1) = v17;
        }
        v13 += 4;
      }
      while (v13 != 16);
      vImagePixelCount height = v42.height;
      if (v42.height)
      {
        uint64_t v20 = 0;
        long long v21 = *(_OWORD *)&v42.width;
        data = (char *)v42.data;
        do
        {
          uint64_t v23 = 0;
          unsigned int v24 = (unsigned __int8 *)data;
          do
          {
            unsigned int v25 = &__p[4 * v23];
            unsigned int v26 = (char *)*v25;
            uint64_t v27 = v25[3];
            if (&v26[(void)v27 * v20] != (char *)&v41 && (void)v21 != 0)
            {
              vImagePixelCount v29 = &v26[v20 * (void)v27];
              uint64_t v30 = v24;
              uint64_t v31 = v21;
              do
              {
                unsigned int v32 = *v30;
                v30 += 4;
                _S0 = v10 * (float)v32;
                __asm { FCVT            H0, S0 }
                *(_WORD *)vImagePixelCount v29 = LOWORD(_S0);
                v29 += 2;
                --v31;
              }
              while (v31);
            }
            ++v23;
            ++v24;
          }
          while (v23 != 4);
          ++v20;
          data += *((void *)&v21 + 1);
        }
        while (v20 != height);
      }
      CVPixelBufferUnlockBaseAddress(a2, 0);
      CVPixelBufferUnlockBaseAddress(a1, 1uLL);
      return 0;
    }
    else
    {
      PixelBufferUtils::pixelFormatAsString(v5, (char *)__p);
      if (v44 >= 0) {
        CGFloat v39 = __p;
      }
      else {
        CGFloat v39 = (void **)__p[0];
      }
      NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1264, v5, v39);
      if (v44 < 0) {
        operator delete(__p[0]);
      }
      return 4294967294;
    }
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v44 >= 0) {
      vImage_Buffer v38 = __p;
    }
    else {
      vImage_Buffer v38 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1258, PixelFormatType, v38);
    if (v44 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_247EFA88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convertColorToGrayscale(__CVBuffer *a1, __CVBuffer *a2, uint64_t a3, BOOL a4)
{
  uint64_t ConvertedPixelBufferFormat = PixelBufferUtils::createConvertedPixelBufferFormat(a1, (__CVBuffer *)0x34323066, 0, a4);
  if (ConvertedPixelBufferFormat)
  {
    unint64_t v6 = (__CVBuffer *)ConvertedPixelBufferFormat;
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&dest, 0, sizeof(dest));
    uint64_t v7 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a2, 0, *MEMORY[0x263F001A8], &dest);
    CVPixelBufferLockBaseAddress(v6, 1uLL);
    memset(&src, 0, sizeof(src));
    PixelBufferUtils::asVImageBuffer(v6, 0, *v7, &src);
    uint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
    unsigned int v9 = PixelFormatType;
    if ((int)PixelFormatType > 1278226535)
    {
      if (PixelFormatType != 1278226536 && PixelFormatType != 1647392359)
      {
LABEL_15:
        PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
        if (v15 >= 0) {
          uint64_t v13 = __p;
        }
        else {
          uint64_t v13 = (void **)__p[0];
        }
        NSLog(&cfstr_SDErrorPixelFo.isa, "convertColorToGrayscale", 2021, v9, v13);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        BOOL v10 = 1;
        goto LABEL_13;
      }
      vImage_Error v11 = vImageConvert_Planar8toPlanar16F(&src, &dest, 0);
    }
    else
    {
      if (PixelFormatType == 1278226488)
      {
        vImageCopyBuffer(&src, &dest, 1uLL, 0);
      }
      else if (PixelFormatType != 1278226534)
      {
        goto LABEL_15;
      }
      vImage_Error v11 = vImageConvert_Planar8toPlanarF(&src, &dest, 1.0, 0.0, 0);
    }
    BOOL v10 = v11 != 0;
LABEL_13:
    CVPixelBufferUnlockBaseAddress(v6, 1uLL);
    CVPixelBufferUnlockBaseAddress(a2, 0);
    CVPixelBufferRelease(v6);
    return v10;
  }
  return 0xFFFFFFFFLL;
}

void sub_247EFAA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convertRGBPlanarFloat(__CVBuffer *a1, __CVBuffer *a2)
{
  void minFloat[2] = *MEMORY[0x263EF8340];
  if (CVPixelBufferGetPixelFormatType(a1) != 1919365990) {
    return 0xFFFFFFFFLL;
  }
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 0);
  memset(&dest, 0, sizeof(dest));
  uint64_t v4 = (CGRect *)MEMORY[0x263F001A8];
  PixelBufferUtils::asVImageBuffer(a2, *MEMORY[0x263F001A8], &dest);
  memset(&blue, 0, sizeof(blue));
  PixelBufferUtils::asVImageBuffer(a1, 0, *v4, &blue);
  memset(&green, 0, sizeof(green));
  PixelBufferUtils::asVImageBuffer(a1, (__CVBuffer *)1, *v4, &green);
  memset(&red, 0, sizeof(red));
  PixelBufferUtils::asVImageBuffer(a1, (__CVBuffer *)2, *v4, &red);
  minFloat[0] = 0;
  minFloat[1] = 0;
  long long maxFloat = xmmword_247F246A0;
  uint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
  unint64_t v6 = PixelFormatType;
  if ((int)PixelFormatType <= 1111970368)
  {
    if (PixelFormatType == 32)
    {
      vImage_Error v7 = vImageConvert_PlanarFToXRGB8888(0xFFu, &blue, &green, &red, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
      goto LABEL_14;
    }
    if (PixelFormatType == 1094862674)
    {
      vImage_Error v7 = vImageConvert_PlanarFToXRGB8888(0xFFu, &red, &green, &blue, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
      goto LABEL_14;
    }
LABEL_19:
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v12 >= 0) {
      BOOL v10 = __p;
    }
    else {
      BOOL v10 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "convertRGBPlanarFloat", 1889, v6, v10);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = -21783;
    goto LABEL_15;
  }
  if (PixelFormatType == 1111970369)
  {
    vImage_Error v7 = vImageConvert_PlanarFToBGRX8888(&red, &green, &blue, 0xFFu, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
    goto LABEL_14;
  }
  if (PixelFormatType == 1380401729)
  {
    vImage_Error v7 = vImageConvert_PlanarFToBGRX8888(&blue, &green, &red, 0xFFu, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
    goto LABEL_14;
  }
  if (PixelFormatType != 1380410945) {
    goto LABEL_19;
  }
  vImage_Error v7 = vImageConvert_PlanarFToBGRXFFFF(&blue, &green, &red, 1.0, &dest, 0);
LABEL_14:
  uint64_t v9 = v7;
LABEL_15:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  if (v9) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

void sub_247EFAD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convertRGBPlanarHalf(__CVBuffer *a1, __CVBuffer *a2)
{
  if (CVPixelBufferGetPixelFormatType(a1) != 1919365992) {
    return 0xFFFFFFFFLL;
  }
  PixelBufferWithSameSize = PixelBufferUtils::createPixelBufferWithSameSize(a1, (__CVBuffer *)0x72673366, 1);
  uint64_t v5 = convertFloat16ToFloat32(a1, PixelBufferWithSameSize);
  if (!v5) {
    uint64_t v5 = convertRGBPlanarFloat(PixelBufferWithSameSize, a2);
  }
  CVPixelBufferRelease(PixelBufferWithSameSize);
  return v5;
}

uint64_t createBGRAPermutesFromYUV(CVPixelBufferRef pixelBuffer, int a2, __CVBuffer *this)
{
  BOOL v6 = a2 == 1380411457 || a2 == 1380410945;
  PixelBufferWithSameSize = this;
  unsigned int v8 = a2;
  if (v6)
  {
    unsigned int v8 = 1111970369;
    PixelBufferWithSameSize = PixelBufferUtils::createPixelBufferWithSameSize(this, (__CVBuffer *)0x42475241, 1);
  }
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferLockBaseAddress(PixelBufferWithSameSize, 0);
  memset(&srcYp, 0, sizeof(srcYp));
  uint64_t v9 = (CGRect *)MEMORY[0x263F001A8];
  PixelBufferUtils::asVImageBuffer(pixelBuffer, 0, *MEMORY[0x263F001A8], &srcYp);
  memset(&srcCbCr, 0, sizeof(srcCbCr));
  PixelBufferUtils::asVImageBuffer(pixelBuffer, (__CVBuffer *)1, *v9, &srcCbCr);
  memset(&dest, 0, sizeof(dest));
  PixelBufferUtils::asVImageBuffer(PixelBufferWithSameSize, *v9, &dest);
  uint64_t v10 = RGBA_FORMAT_MAP();
  *(void *)&v14.Yp_bias = v8 | 0x2000000000;
  vImage_Error v11 = (const uint8_t *)std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v10, *(unint64_t *)&v14.Yp_bias, &v14)[3];
  if ((createBGRAPermutesFromYUV(__CVBuffer *,unsigned int,__CVBuffer *)::isConvesionInfoDefined & 1) != 0
    || (vImage_YpCbCrPixelRange v14 = *(vImage_YpCbCrPixelRange *)ymmword_247F26380,
        vImage_Error v12 = vImageConvert_YpCbCrToARGB_GenerateConversion((const vImage_YpCbCrToARGBMatrix *)*MEMORY[0x263EFAA30], &v14, &createBGRAPermutesFromYUV(__CVBuffer *,unsigned int,__CVBuffer *)::conversionInfo, kvImage420Yp8_CbCr8, kvImageARGB8888, 0), createBGRAPermutesFromYUV(__CVBuffer *,unsigned int,__CVBuffer *)::isConvesionInfoDefined = 1, !v12))
  {
    vImage_Error v12 = vImageConvert_420Yp8_CbCr8ToARGB8888(&srcYp, &srcCbCr, &dest, &createBGRAPermutesFromYUV(__CVBuffer *,unsigned int,__CVBuffer *)::conversionInfo, v11, 0xFFu, 0);
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferUnlockBaseAddress(PixelBufferWithSameSize, 0);
  if (a2 == 1380411457 || a2 == 1380410945)
  {
    vImage_Error v12 = (int)convert4ChannelFormats(PixelBufferWithSameSize, a2, this);
    CVPixelBufferRelease(PixelBufferWithSameSize);
  }
  if (v12) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t createRGBPlanarFloatFromBuffer(__CVBuffer *a1, __CVBuffer *a2, uint64_t a3, BOOL a4)
{
  uint64_t ConvertedPixelBufferFormat = (__CVBuffer *)PixelBufferUtils::createConvertedPixelBufferFormat(a1, (__CVBuffer *)0x52476641, 0, a4);
  if (!ConvertedPixelBufferFormat) {
    return 0xFFFFFFFFLL;
  }
  BOOL v6 = ConvertedPixelBufferFormat;
  CVPixelBufferLockBaseAddress(ConvertedPixelBufferFormat, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 0);
  memset(&srcARGB, 0, sizeof(srcARGB));
  vImage_Error v7 = (CGRect *)MEMORY[0x263F001A8];
  PixelBufferUtils::asVImageBuffer(v6, *MEMORY[0x263F001A8], &srcARGB);
  memset(&destA, 0, sizeof(destA));
  PixelBufferUtils::asVImageBuffer(a2, 0, *v7, &destA);
  memset(&destR, 0, sizeof(destR));
  PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, *v7, &destR);
  memset(&destG, 0, sizeof(destG));
  PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)2, *v7, &destG);
  vImage_Error v8 = MEMORY[0x24C5711C0](&v10, srcARGB.height, srcARGB.width, 32, 0);
  if (!v8)
  {
    vImage_Error v8 = vImageConvert_ARGBFFFFtoPlanarF(&srcARGB, &destA, &destR, &destG, &v10, 0);
    free(v10.data);
  }
  CVPixelBufferUnlockBaseAddress(v6, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  CVPixelBufferRelease(v6);
  if (v8) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t createRGBPlanarHalfFromBuffer(__CVBuffer *a1, __CVBuffer *this)
{
  PixelBufferWithSameSize = PixelBufferUtils::createPixelBufferWithSameSize(this, (__CVBuffer *)0x72673366, 1);
  if (createRGBPlanarFloatFromBuffer(a1, PixelBufferWithSameSize, v5, v6)) {
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v7 = convertFloat32ToFloat16(PixelBufferWithSameSize, this);
  }
  CVPixelBufferRelease(PixelBufferWithSameSize);
  return v7;
}

uint64_t copyPixelBufferMultiPlane(__CVBuffer *a1, CGPoint a2, __CVBuffer *a3, CGRect a4)
{
  CGFloat height = a4.size.height;
  CGFloat width = a4.size.width;
  CGFloat y = a4.origin.y;
  CGFloat x = a4.origin.x;
  CGFloat v9 = a2.y;
  CGFloat v10 = a2.x;
  size_t PlaneCount = CVPixelBufferGetPlaneCount(a3);
  uint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a3);
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a3, 1uLL);
  if (PlaneCount)
  {
    vImage_YpCbCrPixelRange v14 = 0;
    char v15 = (CGRect *)MEMORY[0x263F001A8];
    while (1)
    {
      unint64_t v16 = PixelBufferUtils::pixelSizeForPixelFormat(PixelFormatType, (uint64_t)v14);
      memset(&src, 0, sizeof(src));
      PixelBufferUtils::asVImageBuffer(a3, v14, *v15, &src);
      memset(&v18, 0, sizeof(v18));
      PixelBufferUtils::asVImageBuffer(a1, v14, *v15, &v18);
      v20.origin.CGFloat x = x;
      v20.origin.CGFloat y = y;
      v20.size.CGFloat width = width;
      v20.size.CGFloat height = height;
      if (updateVImageBufferToRegion(&src, v20, v16)) {
        return 0xFFFFFFFFLL;
      }
      v21.size.CGFloat width = (double)src.width;
      v21.size.CGFloat height = (double)src.height;
      v21.origin.CGFloat x = v10;
      v21.origin.CGFloat y = v9;
      if (updateVImageBufferToRegion(&v18, v21, v16)) {
        return 0xFFFFFFFFLL;
      }
      vImageCopyBuffer(&src, &v18, v16, 0);
      vImage_YpCbCrPixelRange v14 = (__CVBuffer *)((char *)v14 + 1);
      if ((__CVBuffer *)PlaneCount == v14) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    CVPixelBufferUnlockBaseAddress(a1, 0);
    CVPixelBufferUnlockBaseAddress(a3, 1uLL);
    return 0;
  }
}

uint64_t convertFloat32ToFloat16(__CVBuffer *a1, __CVBuffer *a2)
{
  uint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  unint64_t v5 = PixelBufferUtils::planeCountForPixelFormat(PixelFormatType);
  BOOL v6 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
  if (v5 == PixelBufferUtils::planeCountForPixelFormat(v6))
  {
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(a2, 0);
    if (v5)
    {
      unint64_t v7 = 1;
      vImage_Error v8 = (CGRect *)MEMORY[0x263F001A8];
      do
      {
        memset(&src, 0, sizeof(src));
        PixelBufferUtils::asVImageBuffer(a1, (__CVBuffer *)(v7 - 1), *v8, &src);
        memset(&dest, 0, sizeof(dest));
        PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)(v7 - 1), *v8, &dest);
        vImage_Error v9 = vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
        vImage_Error v10 = v9;
        if (v7 >= v5) {
          break;
        }
        ++v7;
      }
      while (!v9);
    }
    else
    {
      memset(&src, 0, sizeof(src));
      vImage_Error v12 = (CGRect *)MEMORY[0x263F001A8];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &src);
      memset(&dest, 0, sizeof(dest));
      PixelBufferUtils::asVImageBuffer(a2, *v12, &dest);
      vImage_Error v10 = vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
    }
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferUnlockBaseAddress(a2, 0);
    return v10 != 0;
  }
  else
  {
    NSLog(&cfstr_SDErrorInputAn.isa, "convertFloat32ToFloat16", 1592);
    return 0xFFFFFFFFLL;
  }
}

void PixelBufferUtils::forEveryPixel(__CVBuffer *a1, void *a2, int a3)
{
  vImage_Buffer v18 = a2;
  uint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  unint64_t v6 = PixelBufferUtils::pixelSizeForPixelFormat(PixelFormatType, a3);
  size_t PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount)
  {
    uint64_t v8 = 3516;
    vImage_Error v9 = @"%s:%d - ERROR - multiplane pixel buffer with nonmatching plane index";
    if (a3 < 0 || PlaneCount <= a3) {
      goto LABEL_7;
    }
  }
  else if (a3 != -1)
  {
    uint64_t v8 = 3521;
    vImage_Error v9 = @"%s:%d - ERROR - cannot request plane for single-plane image";
LABEL_7:
    NSLog(&v9->isa, "forEveryPixel", v8);
    goto LABEL_17;
  }
  CVPixelBufferLockBaseAddress(a1, 0);
  pixelBuffer = a1;
  if (PlaneCount) {
    PixelBufferUtils::asVImageBuffer(a1, (__CVBuffer *)a3, *MEMORY[0x263F001A8], &v19);
  }
  else {
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v19);
  }
  data = (char *)v19.data;
  vImagePixelCount height = v19.height;
  vImagePixelCount width = v19.width;
  size_t rowBytes = v19.rowBytes;
  if (v19.height)
  {
    uint64_t v14 = 0;
    do
    {
      char v15 = data;
      for (vImagePixelCount i = width; i; --i)
      {
        ((void (**)(id, char *, PixelBufferUtils *))v18)[2](v18, v15, PixelFormatType);
        v15 += v6;
      }
      ++v14;
      data += rowBytes;
    }
    while (v14 != height);
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
LABEL_17:
}

void sub_247EFB694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void PixelBufferUtils::forEveryPixel(__CVBuffer *a1, __CVBuffer *a2, void *a3, vImagePixelCount a4)
{
  uint64_t v31 = a3;
  uint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  vImage_Error v9 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
  unint64_t v10 = PixelBufferUtils::pixelSizeForPixelFormat(PixelFormatType, 0);
  unint64_t v11 = PixelBufferUtils::pixelSizeForPixelFormat(v9, 0);
  size_t PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount != CVPixelBufferGetPlaneCount(a2))
  {
    uint64_t v13 = 3556;
    uint64_t v14 = @"%s:%d - ERROR - mismatching planes number in input buffers";
LABEL_7:
    NSLog(&v14->isa, "forEveryPixel", v13);
    goto LABEL_28;
  }
  if (PlaneCount)
  {
    uint64_t v13 = 3561;
    uint64_t v14 = @"%s:%d - ERROR - multiplane pixel buffers with nonmatching plane index";
    if ((a4 & 0x80000000) != 0 || PlaneCount <= a4) {
      goto LABEL_7;
    }
  }
  else if (a4 != -1)
  {
    NSLog(&cfstr_SDErrorCannotR_0.isa, "forEveryPixel", 3566);
    goto LABEL_28;
  }
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a2, 0);
  if (PlaneCount)
  {
    if ((a4 & 0x80000000) != 0) {
      goto LABEL_16;
    }
    char v15 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a1, (__CVBuffer *)a4, *MEMORY[0x263F001A8], &v32);
    vImagePixelCount height = v32.height;
    data = (char *)v32.data;
    size_t rowBytes = v32.rowBytes;
    vImagePixelCount width = v32.width;
    PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)a4, *v15, &v32);
  }
  else
  {
    unint64_t v16 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &v32);
    vImagePixelCount height = v32.height;
    data = (char *)v32.data;
    size_t rowBytes = v32.rowBytes;
    vImagePixelCount width = v32.width;
    PixelBufferUtils::asVImageBuffer(a2, *v16, &v32);
  }
  uint64_t v4 = (char *)v32.data;
  a4 = v32.height;
  size_t PlaneCount = v32.width;
  size_t v25 = v32.rowBytes;
  if (height != v32.height || width != v32.width)
  {
LABEL_16:
    NSLog(&cfstr_WarningSizesIn.isa);
    if (height >= a4) {
      vImagePixelCount v17 = a4;
    }
    else {
      vImagePixelCount v17 = height;
    }
    vImagePixelCount v18 = width;
    if (width >= PlaneCount) {
      vImagePixelCount v18 = PlaneCount;
    }
    vImagePixelCount width = v18;
    vImagePixelCount height = v17;
  }
  pixelBuffer = a1;
  unsigned int v24 = a2;
  vImage_Buffer v19 = data;
  if (height)
  {
    for (uint64_t i = 0; i != height; ++i)
    {
      uint64_t v30 = v19;
      CGRect v21 = v4;
      for (vImagePixelCount j = width; j; --j)
      {
        v31[2](v31, v19, PixelFormatType, v21, v9);
        v21 += v11;
        v19 += v10;
      }
      v4 += v25;
      vImage_Buffer v19 = &v30[rowBytes];
    }
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  CVPixelBufferUnlockBaseAddress(v24, 0);
LABEL_28:
}

void sub_247EFB980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  _Unwind_Resume(a1);
}

uint64_t convertGrayscaleAsColor(__CVBuffer *a1, PixelBufferUtils *a2, __CVBuffer *a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  if ((int)a2 > 1380401728)
  {
    if (a2 == 1380401729 || a2 == 1380410945) {
      goto LABEL_9;
    }
    int v7 = 1380411457;
  }
  else
  {
    if (a2 == 32 || a2 == 1094862674) {
      goto LABEL_9;
    }
    int v7 = 1111970369;
  }
  if (a2 != v7)
  {
    PixelBufferUtils::pixelFormatAsString(a2, (char *)&red);
    if ((red.width & 0x8000000000000000) == 0) {
      p_vImage_Buffer red = &red;
    }
    else {
      p_vImage_Buffer red = red.data;
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "convertGrayscaleAsColor", 1468, a2, p_red);
    if ((SHIBYTE(red.width) & 0x80000000) == 0) {
      return 0xFFFFFFFFLL;
    }
    data = red.data;
    goto LABEL_54;
  }
LABEL_9:
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  memset(&red, 0, sizeof(red));
  uint64_t v8 = (CGRect *)MEMORY[0x263F001A8];
  PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &red);
  memset(&dest, 0, sizeof(dest));
  PixelBufferUtils::asVImageBuffer(a3, *v8, &dest);
  uint64_t v9 = RGBA_FORMAT_MAP();
  src.data = (void *)(a2 | 0x2000000000);
  uint64_t ConvertedPixelBufferFormat = 0;
  char v11 = 0;
  uint64_t v13 = (unsigned char *)std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v9, (unint64_t)src.data, &src)[3];
  long long maxFloat = xmmword_247F246A0;
  minFloat[0] = 0;
  minFloat[1] = 0;
  if ((int)PixelFormatType <= 1717855599)
  {
    if (PixelFormatType == 1278226488)
    {
      if (a2 == 1380411457)
      {
        PixelBufferWithSameSize = PixelBufferUtils::createPixelBufferWithSameSize(a3, (__CVBuffer *)0x52476641, 1);
        CVPixelBufferLockBaseAddress(PixelBufferWithSameSize, 0);
        memset(&src, 0, sizeof(src));
        PixelBufferUtils::asVImageBuffer(PixelBufferWithSameSize, *v8, &src);
        vImage_Error v15 = vImageConvert_Planar8ToBGRXFFFF(&red, &red, &red, 1.0, &src, (const float *)&maxFloat, (const float *)minFloat, 0);
        if (!v15)
        {
          src.width *= 4;
          vImage_Error v15 = vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
        }
        uint64_t ConvertedPixelBufferFormat = 0;
        goto LABEL_40;
      }
      if (a2 == 1380410945)
      {
        vImage_Error v20 = vImageConvert_Planar8ToXRGBFFFF(1.0, &red, &red, &red, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
      }
      else if (*v13 == 3)
      {
        vImage_Error v20 = vImageConvert_Planar8ToBGRX8888(&red, &red, &red, 0xFFu, &dest, 0);
      }
      else
      {
        if (*v13)
        {
          uint64_t ConvertedPixelBufferFormat = 0;
          goto LABEL_66;
        }
        vImage_Error v20 = vImageConvert_Planar8ToXRGB8888(0xFFu, &red, &red, &red, &dest, 0);
      }
      vImage_Error v15 = v20;
      uint64_t ConvertedPixelBufferFormat = 0;
      goto LABEL_39;
    }
    if (PixelFormatType == 1278226534)
    {
LABEL_21:
      if (a2 == 1380411457)
      {
        PixelBufferWithSameSize = PixelBufferUtils::createPixelBufferWithSameSize(a3, (__CVBuffer *)0x52476641, 1);
        CVPixelBufferLockBaseAddress(PixelBufferWithSameSize, 0);
        memset(&src, 0, sizeof(src));
        PixelBufferUtils::asVImageBuffer(PixelBufferWithSameSize, *v8, &src);
        vImage_Error v15 = vImageConvert_PlanarFToBGRXFFFF(&red, &red, &red, 1.0, &src, 0);
        if (!v15)
        {
          src.width *= 4;
          vImage_Error v15 = vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
        }
        goto LABEL_40;
      }
      if (a2 == 1380410945)
      {
        vImage_Error v17 = vImageConvert_PlanarFToBGRXFFFF(&red, &red, &red, 1.0, &dest, 0);
LABEL_38:
        vImage_Error v15 = v17;
LABEL_39:
        PixelBufferWithSameSize = 0;
LABEL_40:
        char v11 = 1;
        goto LABEL_41;
      }
      if (*v13 == 3)
      {
        vImage_Error v17 = vImageConvert_PlanarFToBGRX8888(&red, &red, &red, 0xFFu, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
        goto LABEL_38;
      }
      if (!*v13)
      {
        vImage_Error v17 = vImageConvert_PlanarFToXRGB8888(0xFFu, &red, &red, &red, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
        goto LABEL_38;
      }
LABEL_66:
      PixelBufferWithSameSize = 0;
      char v11 = 0;
      vImage_Error v15 = 0;
      goto LABEL_41;
    }
    int v16 = 1278226536;
    goto LABEL_19;
  }
  if ((int)PixelFormatType > 1751410031)
  {
    if (PixelFormatType == 1751411059)
    {
LABEL_20:
      uint64_t ConvertedPixelBufferFormat = (__CVBuffer *)PixelBufferUtils::createConvertedPixelBufferFormat(a1, (__CVBuffer *)0x4C303066, 0, v12);
      CVPixelBufferLockBaseAddress(ConvertedPixelBufferFormat, 1uLL);
      PixelBufferUtils::asVImageBuffer(ConvertedPixelBufferFormat, *v8, &red);
      goto LABEL_21;
    }
    int v16 = 1751410032;
LABEL_19:
    PixelBufferWithSameSize = 0;
    vImage_Error v15 = 0;
    if (PixelFormatType != v16) {
      goto LABEL_41;
    }
    goto LABEL_20;
  }
  if (PixelFormatType == 1717855600) {
    goto LABEL_21;
  }
  PixelBufferWithSameSize = 0;
  vImage_Error v15 = 0;
  if (PixelFormatType == 1717856627) {
    goto LABEL_21;
  }
LABEL_41:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  if (ConvertedPixelBufferFormat)
  {
    CVPixelBufferUnlockBaseAddress(ConvertedPixelBufferFormat, 1uLL);
    CVPixelBufferRelease(ConvertedPixelBufferFormat);
  }
  if (PixelBufferWithSameSize)
  {
    CVPixelBufferUnlockBaseAddress(PixelBufferWithSameSize, 0);
    CVPixelBufferRelease(PixelBufferWithSameSize);
  }
  if ((v11 & 1) == 0)
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)&src);
    if ((src.width & 0x8000000000000000) == 0) {
      p_vImage_Buffer src = &src;
    }
    else {
      p_vImage_Buffer src = src.data;
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "convertGrayscaleAsColor", 1580, PixelFormatType, p_src);
    if ((SHIBYTE(src.width) & 0x80000000) == 0) {
      return 0xFFFFFFFFLL;
    }
    data = src.data;
LABEL_54:
    operator delete(data);
    return 0xFFFFFFFFLL;
  }
  if (v15) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

void sub_247EFBF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convertFloat16ToFloat32(__CVBuffer *a1, __CVBuffer *a2)
{
  uint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  unint64_t v5 = PixelBufferUtils::planeCountForPixelFormat(PixelFormatType);
  unint64_t v6 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
  if (v5 == PixelBufferUtils::planeCountForPixelFormat(v6))
  {
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(a2, 0);
    if (v5)
    {
      unint64_t v7 = 1;
      uint64_t v8 = (CGRect *)MEMORY[0x263F001A8];
      do
      {
        memset(&src, 0, sizeof(src));
        PixelBufferUtils::asVImageBuffer(a1, (__CVBuffer *)(v7 - 1), *v8, &src);
        memset(&dest, 0, sizeof(dest));
        PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)(v7 - 1), *v8, &dest);
        vImage_Error v9 = vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        vImage_Error v10 = v9;
        if (v7 >= v5) {
          break;
        }
        ++v7;
      }
      while (!v9);
    }
    else
    {
      memset(&src, 0, sizeof(src));
      BOOL v12 = (CGRect *)MEMORY[0x263F001A8];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x263F001A8], &src);
      memset(&dest, 0, sizeof(dest));
      PixelBufferUtils::asVImageBuffer(a2, *v12, &dest);
      vImage_Error v10 = vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    }
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferUnlockBaseAddress(a2, 0);
    return v10 != 0;
  }
  else
  {
    NSLog(&cfstr_SDErrorInputAn.isa, "convertFloat16ToFloat32", 1626);
    return 0xFFFFFFFFLL;
  }
}

__int16 ___ZL23invertPixelBufferValuesIDhEiP10__CVBufferS1__block_invoke@<H0>(uint64_t a1@<X0>, short float *a2@<X1>, uint64_t a3@<X2>, short float *a4@<X3>)
{
  *(short float *)&__int16 result = COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)) / *a2;
  *a4 = *(short float *)&result;
  return result;
}

float ___ZL23invertPixelBufferValuesIfEiP10__CVBuffer_block_invoke(uint64_t a1, float *a2)
{
  float result = 1.0 / *a2;
  *a2 = result;
  return result;
}

uint64_t RGBA_FORMAT_MAP(void)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  {
    operator new();
  }
  return RGBA_FORMAT_MAP(void)::result;
}

void sub_247EFC694(_Unwind_Exception *a1)
{
  MEMORY[0x24C570740](v1, 0x10A0C408EF24B1CLL);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    vImage_Error v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      vImage_Error v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          vImage_Error v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  vImage_Error v10 = operator new(0x28uLL);
  *vImage_Error v10 = 0;
  v10[1] = a2;
  v10[2] = *a3;
  void v10[3] = 0;
  *((_DWORD *)v10 + 8) = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v18 = *(void *)a1;
  vImage_Buffer v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *vImage_Error v10 = *v19;
LABEL_38:
    *vImage_Buffer v19 = v10;
    goto LABEL_39;
  }
  *vImage_Error v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    vImage_Buffer v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_247EFC8CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      unint64_t v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v5 = operator new(8 * prime);
  unint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint8x8_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    BOOL v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *uint8x8_t v8 = *v14;
          *BOOL v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          BOOL v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint8x8_t v8 = v14;
        BOOL v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t std::unordered_map<unsigned long long,std::pair<unsigned char *,int>>::unordered_map(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    unint64_t v5 = a2;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint8x8_t v8 = &a2[3 * a3];
    size_t v9 = (void *)(a1 + 16);
    do
    {
      unint64_t v10 = *v5;
      if (v7)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v3 = *v5;
          if (v10 >= v7) {
            unint64_t v3 = v10 % v7;
          }
        }
        else
        {
          unint64_t v3 = (v7 - 1) & v10;
        }
        uint8x8_t v12 = *(void **)(*(void *)a1 + 8 * v3);
        if (v12)
        {
          for (uint64_t i = (void *)*v12; i; uint64_t i = (void *)*i)
          {
            unint64_t v14 = i[1];
            if (v14 == v10)
            {
              if (i[2] == v10) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v11.u32[0] > 1uLL)
              {
                if (v14 >= v7) {
                  v14 %= v7;
                }
              }
              else
              {
                v14 &= v7 - 1;
              }
              if (v14 != v3) {
                break;
              }
            }
          }
        }
      }
      size_t v15 = operator new(0x28uLL);
      *size_t v15 = 0;
      v15[1] = v10;
      long long v16 = *(_OWORD *)v5;
      void v15[4] = v5[2];
      *((_OWORD *)v15 + 1) = v16;
      float v17 = (float)(unint64_t)(v6 + 1);
      float v18 = *(float *)(a1 + 32);
      if (!v7 || (float)(v18 * (float)v7) < v17)
      {
        BOOL v19 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v19 = 1;
        }
        unint64_t v20 = v19 | (2 * v7);
        unint64_t v21 = vcvtps_u32_f32(v17 / v18);
        if (v20 <= v21) {
          size_t v22 = v21;
        }
        else {
          size_t v22 = v20;
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__rehash<true>(a1, v22);
        unint64_t v7 = *(void *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v10 >= v7) {
            unint64_t v3 = v10 % v7;
          }
          else {
            unint64_t v3 = v10;
          }
        }
        else
        {
          unint64_t v3 = (v7 - 1) & v10;
        }
      }
      uint64_t v23 = *(void *)a1;
      unsigned int v24 = *(void **)(*(void *)a1 + 8 * v3);
      if (v24)
      {
        *size_t v15 = *v24;
      }
      else
      {
        *size_t v15 = *v9;
        *size_t v9 = v15;
        *(void *)(v23 + 8 * v3) = v9;
        if (!*v15) {
          goto LABEL_40;
        }
        unint64_t v25 = *(void *)(*v15 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v25 >= v7) {
            v25 %= v7;
          }
        }
        else
        {
          v25 &= v7 - 1;
        }
        unsigned int v24 = (void *)(*(void *)a1 + 8 * v25);
      }
      *unsigned int v24 = v15;
LABEL_40:
      uint64_t v6 = *(void *)(a1 + 24) + 1;
      *(void *)(a1 + 24) = v6;
LABEL_41:
      v5 += 3;
    }
    while (v5 != v8);
  }
  return a1;
}

void sub_247EFCD14(_Unwind_Exception *a1)
{
  operator delete(v2);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  int8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

float ___ZL23invertPixelBufferValuesIfEiP10__CVBufferS1__block_invoke(uint64_t a1, float *a2, uint64_t a3, float *a4)
{
  float result = 1.0 / *a2;
  *a4 = result;
  return result;
}

__int16 ___ZL23invertPixelBufferValuesIDhEiP10__CVBuffer_block_invoke@<H0>(uint64_t a1@<X0>, short float *a2@<X1>)
{
  *(short float *)&__int16 result = COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)) / *a2;
  *a2 = *(short float *)&result;
  return result;
}

uint64_t updateVImageBufferToRegion(vImage_Buffer *a1, CGRect a2, uint64_t a3)
{
  double height = a2.size.height;
  double width = a2.size.width;
  double y = a2.origin.y;
  double x = a2.origin.x;
  if (CGRectIsEmpty(a2)) {
    return 0;
  }
  double v10 = (double)a1->width;
  if (x < v10
    && ((v11 = (double)a1->height, y < v11) ? (BOOL v12 = width <= v10) : (BOOL v12 = 0),
        v12 ? (BOOL v13 = height <= v11) : (BOOL v13 = 0),
        v13))
  {
    uint64_t result = 0;
    a1->data = (char *)a1->data + a1->rowBytes * (unint64_t)y + (unint64_t)x * a3;
    a1->double height = (unint64_t)height;
    a1->double width = (unint64_t)width;
  }
  else
  {
    NSLog(&cfstr_SDErrorRegionI.isa, "updateVImageBufferToRegion", 1923);
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t copyPixelBufferVImage(__CVBuffer *a1, CGPoint a2, __CVBuffer *a3, CGRect a4)
{
  if (a1 == a3) {
    return 0;
  }
  CGFloat height = a4.size.height;
  CGFloat width = a4.size.width;
  CGFloat y = a4.origin.y;
  CGFloat x = a4.origin.x;
  CGFloat v9 = a2.y;
  CGFloat v10 = a2.x;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a3);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(a1)) {
    return 0xFFFFFFFFLL;
  }
  if (!CVPixelBufferGetPlaneCount(a3))
  {
    unint64_t v20 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a3);
    CVPixelBufferLockBaseAddress(a1, 0);
    CVPixelBufferLockBaseAddress(a3, 1uLL);
    memset(&src, 0, sizeof(src));
    unint64_t v21 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(a3, *MEMORY[0x263F001A8], &src);
    memset(&v23, 0, sizeof(v23));
    PixelBufferUtils::asVImageBuffer(a1, *v21, &v23);
    unint64_t v22 = PixelBufferUtils::pixelSizeForPixelFormat(v20, 0);
    v26.origin.CGFloat x = x;
    v26.origin.CGFloat y = y;
    v26.size.CGFloat width = width;
    v26.size.CGFloat height = height;
    if (updateVImageBufferToRegion(&src, v26, v22)) {
      return 0xFFFFFFFFLL;
    }
    v27.size.CGFloat width = (double)src.width;
    v27.size.CGFloat height = (double)src.height;
    v27.origin.CGFloat x = v10;
    v27.origin.CGFloat y = v9;
    if (updateVImageBufferToRegion(&v23, v27, v22)) {
      return 0xFFFFFFFFLL;
    }
    vImageCopyBuffer(&src, &v23, v22, 0);
    CVPixelBufferUnlockBaseAddress(a1, 0);
    CVPixelBufferUnlockBaseAddress(a3, 1uLL);
    return 0;
  }
  CGFloat v13 = v10;
  CGFloat v14 = v9;
  CGFloat v15 = x;
  CGFloat v16 = y;
  CGFloat v17 = width;
  CGFloat v18 = height;

  return copyPixelBufferMultiPlane(a1, *(CGPoint *)&v13, a3, *(CGRect *)&v15);
}

uint64_t PixelBufferUtils::countDifferentPixels(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer *a3, float a4, float a5)
{
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  size_t v11 = CVPixelBufferGetWidth(a2);
  size_t v12 = CVPixelBufferGetHeight(a2);
  OSType PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
  uint64_t result = -1;
  if (Width == v11 && Height == v12)
  {
    CVPixelBufferLockBaseAddress(this, 1uLL);
    CVPixelBufferLockBaseAddress(a2, 1uLL);
    memset(&v28, 0, sizeof(v28));
    CGFloat v15 = (CGRect *)MEMORY[0x263F001A8];
    PixelBufferUtils::asVImageBuffer(this, *MEMORY[0x263F001A8], &v28);
    memset(&v27, 0, sizeof(v27));
    PixelBufferUtils::asVImageBuffer(a2, *v15, &v27);
    if ((int)PixelFormatType <= 1380410944)
    {
      if ((int)PixelFormatType > 1111970368)
      {
        if ((int)PixelFormatType > 1278226533)
        {
          if (PixelFormatType != 1278226534)
          {
            if (PixelFormatType != 1278226536)
            {
              if (PixelFormatType != 1380401729) {
                goto LABEL_38;
              }
              goto LABEL_28;
            }
            goto LABEL_44;
          }
          goto LABEL_48;
        }
        if (PixelFormatType != 1111970369)
        {
          int v18 = 1278226488;
          goto LABEL_37;
        }
LABEL_28:
        int v19 = countDiffsRawBuffers<unsigned char>((unint64_t)&v28, (uint64_t *)&v27, 4, a4, a5);
LABEL_50:
        int v21 = v19;
        goto LABEL_51;
      }
      if ((int)PixelFormatType > 875704421)
      {
        if (PixelFormatType == 875704422 || PixelFormatType == 875704438)
        {
          PixelBufferUtils::asVImageBuffer(this, 0, *v15, &v28);
          PixelBufferUtils::asVImageBuffer(a2, 0, *v15, &v27);
          int v20 = countDiffsRawBuffers<unsigned char>((unint64_t)&v28, (uint64_t *)&v27, 1, a4, a5);
          PixelBufferUtils::asVImageBuffer(this, (__CVBuffer *)1, *v15, &v28);
          PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, *v15, &v27);
          int v21 = countDiffsRawBuffers<unsigned char>((unint64_t)&v28, (uint64_t *)&v27, 2, a4, a5) + v20;
LABEL_51:
          CVPixelBufferUnlockBaseAddress(this, 1uLL);
          CVPixelBufferUnlockBaseAddress(a2, 1uLL);
          return v21;
        }
      }
      else
      {
        if (PixelFormatType == 32) {
          goto LABEL_28;
        }
        if (PixelFormatType == 843264104)
        {
          uint64_t v17 = 2;
LABEL_45:
          int v19 = countDiffsRawBuffers<half>((unint64_t)&v28, (uint64_t *)&v27, v17, a4, a5);
          goto LABEL_50;
        }
      }
      goto LABEL_38;
    }
    if ((int)PixelFormatType <= 1717856626)
    {
      if ((int)PixelFormatType <= 1647392358)
      {
        if (PixelFormatType == 1380410945)
        {
          uint64_t v24 = 4;
          goto LABEL_49;
        }
        if (PixelFormatType == 1380411457)
        {
          uint64_t v17 = 4;
          goto LABEL_45;
        }
LABEL_38:
        PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
        if (v26 >= 0) {
          unint64_t v22 = __p;
        }
        else {
          unint64_t v22 = (void **)__p[0];
        }
        NSLog(&cfstr_SDErrorPixelFo.isa, "countDifferentPixels", 2363, PixelFormatType, v22);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
        int v21 = 0;
        goto LABEL_51;
      }
      if (PixelFormatType != 1647392359)
      {
        int v18 = 1717855600;
LABEL_37:
        if (PixelFormatType != v18) {
          goto LABEL_38;
        }
LABEL_48:
        uint64_t v24 = 1;
LABEL_49:
        int v19 = countDiffsRawBuffers<float>((unint64_t)&v28, (uint64_t *)&v27, v24, a4, a5);
        goto LABEL_50;
      }
    }
    else if ((int)PixelFormatType <= 1751411058)
    {
      if (PixelFormatType == 1717856627) {
        goto LABEL_48;
      }
      if (PixelFormatType != 1751410032) {
        goto LABEL_38;
      }
    }
    else if (PixelFormatType != 1751411059)
    {
      if (PixelFormatType == 1919365990)
      {
        vImage_Buffer v23 = 0;
        do
        {
          PixelBufferUtils::asVImageBuffer(this, v23, *v15, &v28);
          PixelBufferUtils::asVImageBuffer(a2, v23, *v15, &v27);
          vImage_Buffer v23 = (__CVBuffer *)((char *)v23 + 1);
        }
        while (v23 != (__CVBuffer *)3);
        goto LABEL_48;
      }
      if (PixelFormatType != 1919365992) {
        goto LABEL_38;
      }
      CGFloat v16 = 0;
      do
      {
        PixelBufferUtils::asVImageBuffer(this, v16, *v15, &v28);
        PixelBufferUtils::asVImageBuffer(a2, v16, *v15, &v27);
        CGFloat v16 = (__CVBuffer *)((char *)v16 + 1);
      }
      while (v16 != (__CVBuffer *)3);
    }
LABEL_44:
    uint64_t v17 = 1;
    goto LABEL_45;
  }
  return result;
}

void sub_247EFD4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t countDiffsRawBuffers<unsigned char>(unint64_t result, uint64_t *a2, uint64_t a3, float a4, float a5)
{
  unint64_t v5 = (uint64_t *)result;
  unint64_t v6 = *(void *)(result + 8);
  if (v6 == a2[1])
  {
    uint64_t v7 = *(void *)(result + 16);
    if (v7 == a2[2])
    {
      if (v6)
      {
        uint64_t v8 = 0;
        uint64_t result = 0;
        uint64_t v9 = *v5;
        uint64_t v10 = v5[3];
        uint64_t v11 = *a2;
        unint64_t v12 = v7 * a3;
        do
        {
          if (v12)
          {
            uint64_t v13 = 0;
            do
            {
              unsigned int v14 = *(unsigned __int8 *)(v11 + v13);
              float v15 = (float)(int)(*(unsigned __int8 *)(v9 + v13) - v14);
              if (v15 > a5)
              {
                float v16 = v15 / ((double)v14 + 1.0e-22);
                if (v16 > a4) {
                  uint64_t result = (result + 1);
                }
              }
              ++v13;
            }
            while (v12 > v13);
          }
          ++v8;
          v11 += a2[3];
          v9 += v10;
        }
        while (v6 > v8);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

unint64_t countDiffsRawBuffers<float>(unint64_t result, uint64_t *a2, uint64_t a3, float a4, float a5)
{
  unint64_t v5 = (uint64_t *)result;
  unint64_t v6 = *(void *)(result + 8);
  if (v6 == a2[1])
  {
    uint64_t v7 = *(void *)(result + 16);
    if (v7 == a2[2])
    {
      if (v6)
      {
        uint64_t v8 = 0;
        uint64_t result = 0;
        uint64_t v9 = *v5;
        uint64_t v10 = v5[3];
        uint64_t v11 = *a2;
        unint64_t v12 = v7 * a3;
        do
        {
          if (v12)
          {
            uint64_t v13 = 0;
            do
            {
              float v14 = *(float *)(v11 + 4 * v13);
              float v15 = *(float *)(v9 + 4 * v13) - v14;
              if (v15 > a5)
              {
                float v16 = v15 / (v14 + 1.0e-22);
                if (v16 > a4) {
                  uint64_t result = (result + 1);
                }
              }
              ++v13;
            }
            while (v12 > v13);
          }
          ++v8;
          v11 += a2[3];
          v9 += v10;
        }
        while (v6 > v8);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

unint64_t countDiffsRawBuffers<half>(unint64_t result, uint64_t *a2, uint64_t a3, float a4, float a5)
{
  unint64_t v5 = (uint64_t *)result;
  unint64_t v6 = *(void *)(result + 8);
  if (v6 == a2[1])
  {
    uint64_t v7 = *(void *)(result + 16);
    if (v7 == a2[2])
    {
      if (v6)
      {
        uint64_t v8 = 0;
        uint64_t result = 0;
        uint64_t v9 = *v5;
        uint64_t v10 = v5[3];
        uint64_t v11 = *a2;
        unint64_t v12 = v7 * a3;
        do
        {
          if (v12)
          {
            uint64_t v13 = 0;
            do
            {
              _H3 = *(_WORD *)(v9 + 2 * v13);
              __asm { FCVT            S4, H3 }
              _H3 = *(_WORD *)(v11 + 2 * v13);
              __asm { FCVT            S5, H3 }
              float v22 = _S4 - _S5;
              if (v22 > a5)
              {
                __asm { FCVT            D3, H3 }
                *(float *)&_D3 = v22 / (_D3 + 1.0e-22);
                if (*(float *)&_D3 > a4) {
                  uint64_t result = (result + 1);
                }
              }
              ++v13;
            }
            while (v12 > v13);
          }
          ++v8;
          v11 += a2[3];
          v9 += v10;
        }
        while (v6 > v8);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

__CVBuffer *PixelBufferUtils::errorsPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer *a3)
{
  return PixelBufferUtils::errorsPixelBuffer(this, a2, 0, 1);
}

__CVBuffer *PixelBufferUtils::errorsPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer *a3, int a4)
{
  int v5 = (int)a3;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  if (PixelFormatType == CVPixelBufferGetPixelFormatType(a2))
  {
    size_t Width = CVPixelBufferGetWidth(this);
    if (Width == CVPixelBufferGetWidth(a2))
    {
      size_t Height = CVPixelBufferGetHeight(this);
      if (Height == CVPixelBufferGetHeight(a2))
      {
        uint64_t v11 = (__CVBuffer *)CVPixelBufferGetPixelFormatType(this);
        PixelBufferWithSameSize = PixelBufferUtils::createPixelBufferWithSameSize(this, v11, 1);
        CVPixelBufferLockBaseAddress(this, 1uLL);
        CVPixelBufferLockBaseAddress(a2, 1uLL);
        CVPixelBufferLockBaseAddress(PixelBufferWithSameSize, 0);
        memset(&v42, 0, sizeof(v42));
        uint64_t v13 = (CGRect *)MEMORY[0x263F001A8];
        PixelBufferUtils::asVImageBuffer(this, *MEMORY[0x263F001A8], &v42);
        memset(&v41, 0, sizeof(v41));
        PixelBufferUtils::asVImageBuffer(a2, *v13, &v41);
        memset(&v40, 0, sizeof(v40));
        PixelBufferUtils::asVImageBuffer(PixelBufferWithSameSize, *v13, &v40);
        if ((int)v11 > 1278226535)
        {
          if ((int)v11 <= 1717855599)
          {
            if ((int)v11 <= 1380410944)
            {
              if (v11 != 1278226536)
              {
                int v15 = 1380401729;
                goto LABEL_15;
              }
              goto LABEL_35;
            }
            if (v11 != 1380410945)
            {
              int v22 = 1647392359;
LABEL_34:
              if (v11 == v22) {
                goto LABEL_35;
              }
LABEL_43:
              PixelBufferUtils::pixelFormatAsString(v11, (char *)__p);
              if (v39 >= 0) {
                int v37 = __p;
              }
              else {
                int v37 = (void **)__p[0];
              }
              NSLog(&cfstr_SDErrorPixelFo.isa, "errorsPixelBuffer", 2434, v11, v37);
              if (v39 < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_42;
            }
            size_t rowBytes = v40.rowBytes;
            data = v41.data;
            size_t v32 = v41.rowBytes;
            size_t v33 = v40.data;
            int v34 = v5;
            int v35 = a4;
            uint64_t v36 = 4;
LABEL_41:
            calcDiffsRaw<float>((uint64_t *)&v42, (uint64_t)data, v32, (uint64_t)v33, rowBytes, v34, v35, v36);
            goto LABEL_42;
          }
          if ((int)v11 > 1751410031)
          {
            if (v11 == 1751410032)
            {
LABEL_35:
              size_t v24 = v40.rowBytes;
              vImage_Buffer v23 = v41.data;
              size_t v25 = v41.rowBytes;
              char v26 = v40.data;
              int v27 = v5;
              int v28 = a4;
              uint64_t v29 = 1;
LABEL_36:
              calcDiffsRaw<half>((uint64_t *)&v42, (uint64_t)v23, v25, (uint64_t)v26, v24, v27, v28, v29);
              goto LABEL_42;
            }
            int v22 = 1751411059;
            goto LABEL_34;
          }
          if (v11 != 1717855600)
          {
            int v17 = 1717856627;
            goto LABEL_30;
          }
          goto LABEL_40;
        }
        if ((int)v11 <= 875704437)
        {
          if (v11 == 32)
          {
LABEL_24:
            int v19 = v5;
            int v20 = a4;
            uint64_t v21 = 4;
            goto LABEL_25;
          }
          if (v11 == 843264104)
          {
            size_t v24 = v40.rowBytes;
            vImage_Buffer v23 = v41.data;
            size_t v25 = v41.rowBytes;
            char v26 = v40.data;
            int v27 = v5;
            int v28 = a4;
            uint64_t v29 = 2;
            goto LABEL_36;
          }
          if (v11 != 875704422) {
            goto LABEL_43;
          }
        }
        else
        {
          if ((int)v11 > 1278226487)
          {
            if (v11 != 1278226488)
            {
              int v17 = 1278226534;
LABEL_30:
              if (v11 != v17) {
                goto LABEL_43;
              }
              goto LABEL_40;
            }
            calcDiffsRaw<unsigned char>(&v42, &v41, &v40, v5, a4, 1, v14);
LABEL_40:
            size_t rowBytes = v40.rowBytes;
            data = v41.data;
            size_t v32 = v41.rowBytes;
            size_t v33 = v40.data;
            int v34 = v5;
            int v35 = a4;
            uint64_t v36 = 1;
            goto LABEL_41;
          }
          if (v11 != 875704438)
          {
            int v15 = 1111970369;
LABEL_15:
            if (v11 != v15) {
              goto LABEL_43;
            }
            goto LABEL_24;
          }
        }
        PixelBufferUtils::asVImageBuffer(this, 0, *v13, &v42);
        PixelBufferUtils::asVImageBuffer(a2, 0, *v13, &v41);
        calcDiffsRaw<unsigned char>(&v42, &v41, &v40, v5, a4, 1, v18);
        PixelBufferUtils::asVImageBuffer(this, (__CVBuffer *)1, *v13, &v42);
        PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, *v13, &v41);
        int v19 = v5;
        int v20 = a4;
        uint64_t v21 = 2;
LABEL_25:
        calcDiffsRaw<unsigned char>(&v42, &v41, &v40, v19, v20, v21, v14);
LABEL_42:
        CVPixelBufferUnlockBaseAddress(this, 1uLL);
        CVPixelBufferUnlockBaseAddress(a2, 1uLL);
        CVPixelBufferUnlockBaseAddress(PixelBufferWithSameSize, 0);
        return PixelBufferWithSameSize;
      }
    }
  }
  return 0;
}

void sub_247EFDB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void calcDiffsRaw<unsigned char>(void *a1, void *a2, void *a3, int a4, int a5, uint64_t a6, float a7)
{
  unint64_t v7 = a1[1];
  if (v7)
  {
    LODWORD(v13) = 0;
    double v14 = (double)a5;
    uint64_t v15 = a1[2];
    do
    {
      int v16 = v13;
      if (v15 * a6)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *a1 + a1[3] * v13;
        uint64_t v19 = *a2 + a2[3] * v13;
        uint64_t v20 = *a3 + a3[3] * v13;
        do
        {
          LOBYTE(a7) = *(unsigned char *)(v18 + v17);
          unsigned int v21 = *(unsigned __int8 *)(v19 + v17);
          float v22 = (float)LODWORD(a7);
          float v23 = (double)v21 + 1.0e-20;
          if (!a4) {
            float v23 = 1.0;
          }
          float v24 = pow((float)((float)((float)v21 - v22) / v23), v14);
          a7 = fabsf(v24);
          *(unsigned char *)(v20 + v17++) = (int)a7;
          uint64_t v15 = a1[2];
        }
        while (v15 * a6 > (unint64_t)v17);
        unint64_t v7 = a1[1];
      }
      unint64_t v13 = (v16 + 1);
    }
    while (v7 > v13);
  }
}

void calcDiffsRaw<float>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  unint64_t v8 = a1[1];
  if (v8)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a1;
    uint64_t v15 = a1[3];
    unint64_t v16 = a1[2] * a8;
    double v17 = (double)a7;
    do
    {
      if (v16)
      {
        uint64_t v18 = 0;
        do
        {
          float v19 = *(float *)(a2 + 4 * v18);
          float v20 = v19 + 1.0e-20;
          if (!a6) {
            float v20 = 1.0;
          }
          float v21 = pow((float)((float)(v19 - *(float *)(v14 + 4 * v18)) / v20), v17);
          *(float *)(a4 + 4 * v18++) = fabsf(v21);
        }
        while (v16 > v18);
      }
      ++v13;
      v14 += v15;
      a2 += a3;
      a4 += a5;
    }
    while (v8 > v13);
  }
}

void calcDiffsRaw<half>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  unint64_t v8 = a1[1];
  if (v8)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a1;
    uint64_t v15 = a1[3];
    unint64_t v16 = a1[2] * a8;
    double v17 = (double)a7;
    do
    {
      if (v16)
      {
        uint64_t v18 = 0;
        do
        {
          _H0 = *(_WORD *)(v14 + 2 * v18);
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)(a2 + 2 * v18);
          __asm
          {
            FCVT            S2, H1
            FCVT            D1, H1
          }
          float v28 = _D1 + 1.0e-20;
          if (!a6) {
            float v28 = 1.0;
          }
          _S0 = pow((float)((float)(_S2 - _S0) / v28), v17);
          __asm { FCVT            H0, S0 }
          *(short float *)(a4 + 2 * v18++) = fabsl(*(short float *)&_S0);
        }
        while (v16 > v18);
      }
      ++v13;
      v14 += v15;
      a2 += a3;
      a4 += a5;
    }
    while (v8 > v13);
  }
}

uint64_t PixelBufferUtils::scaleConvertRotatePixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, CVPixelBufferRef pixelBuffer, CGRect a4, CVPixelBufferRef *a5, __CVBuffer **a6, __CVBuffer **a7)
{
  size_t v55 = pixelBuffer;
  vImage_Buffer v56 = this;
  if (!this) {
    return 0xFFFFFFFFLL;
  }
  double height = a4.size.height;
  double width = a4.size.width;
  double y = a4.origin.y;
  double x = a4.origin.x;
  v53[0] = a7;
  *(void *)&v53[1] = 0;
  CVPixelBufferRef texture = 0;
  if (a5) {
    p_CVPixelBufferRef texture = a5;
  }
  else {
    p_CVPixelBufferRef texture = &texture;
  }
  double v17 = (__CVBuffer **)&v53[1];
  if (a6) {
    double v17 = a6;
  }
  size_t v50 = (__CVBuffer *)v17;
  *(void *)pixelFormatType = p_texture;
  size_t v18 = CVPixelBufferGetWidth(pixelBuffer);
  size_t v19 = CVPixelBufferGetHeight(pixelBuffer);
  OSType v20 = CVPixelBufferGetPixelFormatType(pixelBuffer);
  OSType v21 = CVPixelBufferGetPixelFormatType(this);
  if ((a2 & 0xFFFFFFFD) == 1) {
    double v22 = (double)(unint64_t)(double)v18;
  }
  else {
    double v22 = (double)v19;
  }
  if ((a2 & 0xFFFFFFFD) == 1) {
    double v23 = (double)v19;
  }
  else {
    double v23 = (double)v18;
  }
  size_t v24 = CVPixelBufferGetWidth(this);
  size_t v25 = CVPixelBufferGetHeight(this);
  OSType v26 = CVPixelBufferGetPixelFormatType(this);
  v58.origin.double x = x;
  v58.origin.double y = y;
  v58.size.double width = width;
  v58.size.double height = height;
  CGRect v63 = CGRectIntegral(v58);
  v59.origin.double x = x;
  v59.origin.double y = y;
  v59.size.double width = width;
  v59.size.double height = height;
  if (!CGRectEqualToRect(v59, v63))
  {
    NSLog(&cfstr_SDErrorCropDim.isa, "scaleConvertRotatePixelBuffer", 2538);
    return 0xFFFFFFFFLL;
  }
  v60.origin.double x = x;
  v60.origin.double y = y;
  v60.size.double width = width;
  v60.size.double height = height;
  if (CGRectIsEmpty(v60))
  {
    double x = 0.0;
    double y = 0.0;
    double width = (double)v24;
    double height = (double)v25;
  }
  v64.origin.double x = 0.0;
  v64.origin.double y = 0.0;
  v61.origin.double x = x;
  v61.origin.double y = y;
  v61.size.double width = width;
  v61.size.double height = height;
  v64.size.double width = (double)v24;
  v64.size.double height = (double)v25;
  BOOL v27 = !CGRectEqualToRect(v61, v64);
  if (v23 != (double)v24) {
    BOOL v27 = 1;
  }
  int v28 = v22 != (double)v25 || v27;
  unsigned int v29 = v21 != v20;
  if ((v28 & 1) == 0 && v21 == v20 && !a2) {
    return PixelBufferUtils::copyPixelBuffer(pixelBuffer, this, (__CVBuffer *)v53[0]);
  }
  OSType v49 = v20;
  if ((v28 & v53[0]) == 1 && isVtTransferSupportFormat(v26)) {
    unsigned int v29 = (v21 != v20) & ~isVtTransferSupportFormat(v20);
  }
  if (v28) {
    size_t v32 = *(PixelBufferUtils ***)pixelFormatType;
  }
  else {
    size_t v32 = &v56;
  }
  if (v29) {
    size_t v33 = (__CVBuffer **)v50;
  }
  else {
    size_t v33 = v32;
  }
  vImage_Error v48 = v33;
  if (a2) {
    int v34 = (__CVBuffer **)v50;
  }
  else {
    int v34 = &v55;
  }
  int v35 = v29 ^ 1;
  if (a2) {
    int v36 = v28 ^ 1;
  }
  else {
    int v36 = 1;
  }
  if ((v36 & v35) != 0) {
    int v37 = v34;
  }
  else {
    int v37 = *(__CVBuffer ***)pixelFormatType;
  }
  if (v28)
  {
    vImage_Buffer v38 = v32;
    char v39 = *v37;
    if (!*v37)
    {
      OSType v40 = v49;
      if (v29) {
        OSType v40 = v21;
      }
      OSType pixelFormatTypea = v40;
      CVPixelBufferRef pixelBufferOut = 0;
      CFAllocatorRef v41 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
      if (CVPixelBufferCreate(v41, (unint64_t)v23, (unint64_t)v22, pixelFormatTypea, BufferAttributes, &pixelBufferOut))
      {
        char v39 = 0;
      }
      else
      {
        char v39 = pixelBufferOut;
      }
      *int v37 = v39;
    }
    v62.origin.double x = x;
    v62.origin.double y = y;
    v62.size.double width = width;
    v62.size.double height = height;
    __int16 v43 = (__CVBuffer *)v53[0];
    uint64_t v30 = PixelBufferUtils::cropAndScalePixelBuffer(this, v39, (__CVBuffer *)v53[0], v62, *MEMORY[0x263F001A8]);
    size_t v32 = v38;
  }
  else
  {
    uint64_t v30 = 0;
    __int16 v43 = (__CVBuffer *)v53[0];
  }
  if (v30) {
    char v44 = 1;
  }
  else {
    char v44 = v35;
  }
  if (v44)
  {
LABEL_62:
    if (a2) {
      goto LABEL_63;
    }
    goto LABEL_74;
  }
  uint64_t v45 = *v32;
  if (*v34)
  {
    uint64_t v30 = PixelBufferUtils::convertPixelBufferFormat(v45, *v34, v43);
    goto LABEL_62;
  }
  uint64_t ConvertedPixelBufferFormat = PixelBufferUtils::createConvertedPixelBufferFormat(v45, (__CVBuffer *)v49, v43);
  char *v34 = ConvertedPixelBufferFormat;
  if (ConvertedPixelBufferFormat) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = 0xFFFFFFFFLL;
  }
  if (a2)
  {
LABEL_63:
    if (!v30)
    {
      char v46 = *v48;
      if (v55)
      {
        uint64_t v30 = PixelBufferUtils::rotatePixelBuffer(v46, v55, a2, (int)v43);
      }
      else if (PixelBufferUtils::createRotatedPixelBuffer(v46, a2, (int)v43))
      {
        uint64_t v30 = 0;
      }
      else
      {
        uint64_t v30 = 0xFFFFFFFFLL;
      }
    }
  }
LABEL_74:
  if (!a5) {
    CVPixelBufferRelease(texture);
  }
  if (!a6) {
    CVPixelBufferRelease(*(CVPixelBufferRef *)&v53[1]);
  }
  return v30;
}

CVPixelBufferRef PixelBufferUtils::pixelBufferFromCGImage(PixelBufferUtils *this, CGImage *a2)
{
  OSType v2 = a2;
  v26[3] = *MEMORY[0x263EF8340];
  ColorSpace = CGImageGetColorSpace(this);
  size_t BitsPerComponent = CGImageGetBitsPerComponent(this);
  uint32_t BitmapInfo = CGImageGetBitmapInfo(this);
  CFStringRef Name = CGColorSpaceGetName(ColorSpace);
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CFStringRef v9 = CGColorSpaceGetName(DeviceRGB);
  if (!Name)
  {
    CFStringRef Name = v9;
    ColorSpace = DeviceRGB;
  }
  if (CFEqual(Name, v9))
  {
    uint32_t BitmapInfo = 6;
    int v10 = 32;
    ColorSpace = DeviceRGB;
  }
  else
  {
    uint64_t v11 = (const void *)*MEMORY[0x263F002D8];
    if (CFEqual(Name, (CFTypeRef)*MEMORY[0x263F002D8])) {
      BOOL v12 = BitsPerComponent == 8;
    }
    else {
      BOOL v12 = 0;
    }
    if (v12 || CFEqual(Name, (CFTypeRef)*MEMORY[0x263F001E8]))
    {
      uint32_t BitmapInfo = 6;
    }
    else
    {
      if (CFEqual(Name, v11) && BitsPerComponent == 32)
      {
        uint32_t BitmapInfo = 257;
        int v10 = 1380410945;
        goto LABEL_12;
      }
      if (!CFEqual(Name, (CFTypeRef)*MEMORY[0x263F00268]))
      {
        if (CFEqual(Name, (CFTypeRef)*MEMORY[0x263F00250]))
        {
          if (BitsPerComponent == 16) {
            int v10 = 1647392359;
          }
          else {
            int v10 = 1278226534;
          }
          if (BitsPerComponent == 16 || BitsPerComponent == 32) {
            goto LABEL_12;
          }
          NSLog(&cfstr_SDErrorThisCon.isa, "pixelBufferFromCGImage", 2713);
        }
        else
        {
          NSLog(&cfstr_SDErrorThisCon.isa, "pixelBufferFromCGImage", 2719);
        }
        return 0;
      }
      uint32_t BitmapInfo = 2;
    }
    int v10 = 32;
  }
LABEL_12:
  if (v2 == 1061109567) {
    OSType v13 = v10;
  }
  else {
    OSType v13 = v2;
  }
  unint64_t Width = CGImageGetWidth(this);
  unint64_t Height = CGImageGetHeight(this);
  uint64_t v16 = *MEMORY[0x263F04090];
  v25[0] = *MEMORY[0x263F040A0];
  v25[1] = v16;
  v26[0] = MEMORY[0x263EFFA88];
  v26[1] = MEMORY[0x263EFFA88];
  void v25[2] = *MEMORY[0x263F04130];
  v26[2] = MEMORY[0x263EFFA78];
  CFDictionaryRef v17 = [NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:3];
  CVPixelBufferRef pixelBufferOut = 0;
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], Width, Height, v13, v17, &pixelBufferOut))
  {
    NSLog(&cfstr_SDErrorCouldNo.isa, "pixelBufferFromCGImage", 2743);
    CGColorSpaceRelease(DeviceRGB);
    CVPixelBufferRef v18 = 0;
  }
  else
  {
    CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    BaseAddress = CVPixelBufferGetBaseAddress(pixelBufferOut);
    size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBufferOut);
    OSType v21 = CGBitmapContextCreate(BaseAddress, Width, Height, BitsPerComponent, BytesPerRow, ColorSpace, BitmapInfo);
    double v22 = v21;
    if (v21)
    {
      v27.size.double width = (double)Width;
      v27.size.double height = (double)Height;
      v27.origin.double x = 0.0;
      v27.origin.double y = 0.0;
      CGContextDrawImage(v21, v27, this);
      CGContextRelease(v22);
      CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
    }
    else
    {
      NSLog(&cfstr_SDErrorCouldNo_0.isa, "pixelBufferFromCGImage", 2765);
      CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
      CVPixelBufferRelease(pixelBufferOut);
      CVPixelBufferRef pixelBufferOut = 0;
    }
    CGColorSpaceRelease(DeviceRGB);
    CVPixelBufferRef v18 = pixelBufferOut;
  }

  return v18;
}

void sub_247EFE648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PixelBufferUtils::pixelBufferToImageFile(PixelBufferUtils *this, PixelBufferUtils *a2, const __CFString *a3, const __CFString *a4)
{
  unint64_t v6 = PixelBufferUtils::pixelBufferToCGImage(a2, a2);
  unint64_t v7 = NSURL;
  unint64_t v8 = [NSString stringWithUTF8String:this];
  CFURLRef url = [v7 fileURLWithPath:v8];
  if (!a3) {
    a3 = @"public.png";
  }

  CFStringRef v9 = CGImageDestinationCreateWithURL(url, a3, 1uLL, 0);
  CGImageDestinationAddImage(v9, v6, 0);
  CGImageDestinationFinalize(v9);
  CFRelease(v9);
  CGImageRelease(v6);
}

void sub_247EFE740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

CGImageRef PixelBufferUtils::pixelBufferToCGImage(PixelBufferUtils *this, __CVBuffer *a2)
{
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  uint64_t ConvertedPixelBufferFormat = PixelBufferUtils::createConvertedPixelBufferFormat(this, (__CVBuffer *)0x20, 0);
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CVPixelBufferLockBaseAddress(ConvertedPixelBufferFormat, 1uLL);
  BaseAddress = CVPixelBufferGetBaseAddress(ConvertedPixelBufferFormat);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(ConvertedPixelBufferFormat);
  CFStringRef v9 = CGBitmapContextCreate(BaseAddress, Width, Height, 8uLL, BytesPerRow, DeviceRGB, 6u);
  CFRelease(DeviceRGB);
  CGImageRef Image = CGBitmapContextCreateImage(v9);
  CVPixelBufferUnlockBaseAddress(ConvertedPixelBufferFormat, 1uLL);
  CGContextRelease(v9);
  CVPixelBufferRelease(ConvertedPixelBufferFormat);
  return Image;
}

uint64_t PixelBufferUtils::pixelBufferFromRawFileWithBuffer(PixelBufferUtils *this, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  OSType PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
  char v44 = [NSString stringWithUTF8String:this];
  int v5 = objc_msgSend(MEMORY[0x263EFF8F8], "dataWithContentsOfFile:");
  if (!v5)
  {
    NSLog(&cfstr_SDErrorFailedR.isa, "pixelBufferFromRawFileWithBuffer", 2882);
    goto LABEL_30;
  }
  unint64_t v6 = PixelBufferUtils::pixelSizeForPixelFormat(PixelFormatType, 0);
  uint64_t v7 = PixelBufferUtils::planeCountForPixelFormat(PixelFormatType);
  size_t Width = CVPixelBufferGetWidth(pixelBuffer);
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  if (!v7)
  {
    size_t v28 = BytesPerRow;
    uint64_t v29 = [v5 length];
    size_t v30 = Width * v6 * Height;
    if (v29 == v30 || [v5 length] == v28 * Height)
    {
      uint64_t v31 = (char *)[v5 bytes];
      size_t v32 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
      size_t v33 = CVPixelBufferGetWidth(pixelBuffer);
      size_t v34 = CVPixelBufferGetHeight(pixelBuffer);
      size_t v35 = CVPixelBufferGetBytesPerRow(pixelBuffer);
      unint64_t v36 = PixelBufferUtils::pixelSizeForPixelFormat(v32, 0);
      size_t v37 = v36 * v33;
      if (v29 == v30) {
        size_t v38 = v36 * v33;
      }
      else {
        size_t v38 = v35;
      }
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
      if (v34)
      {
        OSType v40 = BaseAddress;
        do
        {
          memcpy(v40, v31, v37);
          v40 += v35;
          v31 += v38;
          --v34;
        }
        while (v34);
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      goto LABEL_27;
    }
    NSLog(&cfstr_SDErrorDataSiz.isa, "pixelBufferFromRawFileWithBuffer", 2902);
LABEL_30:
    uint64_t v41 = 0xFFFFFFFFLL;
    goto LABEL_31;
  }
  size_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  do
  {
    unint64_t v14 = PixelBufferUtils::pixelSizeForPixelFormat(PixelFormatType, v11);
    size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, v11);
    v13 += WidthOfPlane * v14 * CVPixelBufferGetHeightOfPlane(pixelBuffer, v11);
    v12 += CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v11++);
  }
  while (v7 != v11);
  uint64_t v47 = [v5 length];
  if (v47 != v13 && [v5 length] != v12)
  {
    NSLog(&cfstr_SDErrorDataSiz.isa, "pixelBufferFromRawFileWithBuffer", 2926);
    goto LABEL_30;
  }
  uint64_t v16 = [v5 bytes];
  OSType v45 = CVPixelBufferGetPixelFormatType(pixelBuffer);
  size_t PlaneCount = (PixelBufferUtils *)CVPixelBufferGetPlaneCount(pixelBuffer);
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  __int16 v43 = v5;
  if (PlaneCount)
  {
    for (size_t i = 0; (PixelBufferUtils *)i != PlaneCount; ++i)
    {
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, i);
      unint64_t v19 = PixelBufferUtils::pixelSizeForPixelFormat((PixelBufferUtils *)v45, i);
      size_t v20 = CVPixelBufferGetWidthOfPlane(pixelBuffer, i);
      size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, i);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, i);
      size_t v23 = BytesPerRowOfPlane;
      size_t v24 = v20 * v19;
      if (v47 == v13) {
        size_t v25 = v24;
      }
      else {
        size_t v25 = BytesPerRowOfPlane;
      }
      if (HeightOfPlane)
      {
        OSType v26 = (char *)v16;
        size_t v27 = HeightOfPlane;
        do
        {
          memcpy(BaseAddressOfPlane, v26, v24);
          BaseAddressOfPlane += v23;
          v26 += v25;
          --v27;
        }
        while (v27);
      }
      v16 += v24 * HeightOfPlane;
    }
  }
  int v5 = v43;
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
LABEL_27:
  uint64_t v41 = 0;
LABEL_31:

  return v41;
}

void sub_247EFEBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

__CVBuffer *PixelBufferUtils::pixelBufferFromRawFile(PixelBufferUtils *this, const char *a2)
{
  return PixelBufferUtils::pixelBufferFromRawFile(this, 0, 0, 0x3F3F3F3Fu);
}

__CVBuffer *PixelBufferUtils::pixelBufferFromRawFile(PixelBufferUtils *this, unint64_t a2, size_t a3, OSType a4)
{
  unint64_t v8 = [NSString stringWithUTF8String:this];
  CFStringRef v9 = v8;
  if (a4 == 1061109567)
  {
    id v10 = [v8 pathExtension];
    size_t v11 = (PixelBufferUtils *)[v10 UTF8String];
    a4 = PixelBufferUtils::pixelFormatFromFileExtension(v11, v12);

    if (!a4)
    {
      NSLog(&cfstr_SDErrorCannotR.isa, "pixelBufferFromRawFile", 2947);
      goto LABEL_23;
    }
  }
  if (!a2 || !a3)
  {
    if (a3 | a2)
    {
      NSLog(&cfstr_SDErrorBadDime.isa, "pixelBufferFromRawFile", 2956);
      goto LABEL_23;
    }
    uint64_t v16 = [v9 stringByDeletingPathExtension];
    CFDictionaryRef v17 = [v16 pathExtension];

    if ([v17 isEqualToString:&stru_26FC22BA0])
    {
      NSLog(&cfstr_SDErrorDidNotF.isa, "pixelBufferFromRawFile", 2963);
    }
    else
    {
      CVPixelBufferRef v18 = [v17 lowercaseString];
      unint64_t v19 = [v18 componentsSeparatedByString:@"x"];

      if ([v19 count] == 2)
      {
        a3 = [v19 objectAtIndexedSubscript:0];
        LODWORD(a2) = [(id)a3 intValue];

        size_t v20 = [v19 objectAtIndexedSubscript:1];
        LODWORD(a3) = [v20 intValue];

        uint64_t v21 = 2980;
        double v22 = @"%s:%d - ERROR - did not find dimensions in file name - width/height ill formatted";
        if (a2 && a3)
        {
          a2 = (int)a2;
          a3 = (int)a3;

          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v21 = 2969;
        double v22 = @"%s:%d - ERROR - did not find dimensions in file name - extension ill formatted";
      }
      NSLog(&v22->isa, "pixelBufferFromRawFile", v21);
    }
    goto LABEL_23;
  }
LABEL_5:
  CVPixelBufferRef pixelBufferOut = 0;
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, a3, a4, BufferAttributes, &pixelBufferOut)) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = pixelBufferOut;
  }
  if (PixelBufferUtils::pixelBufferFromRawFileWithBuffer(this, v15, v14))
  {
    CVPixelBufferRelease(v15);
LABEL_23:
    uint64_t v15 = 0;
  }

  return v15;
}

void sub_247EFEE8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PixelBufferUtils::pixelBufferToRawFile(PixelBufferUtils *this, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  if (pixelBuffer)
  {
    CVPixelBufferRef ConvertedPixelBufferFormat = pixelBuffer;
    OSType PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
    BOOL isPixelFormatCompressed = PixelBufferUtils::isPixelFormatCompressed(PixelFormatType);
    if (isPixelFormatCompressed
      && (unint64_t v6 = PixelBufferUtils::uncompressedEquivalentForPixelFormat(PixelFormatType),
          (CVPixelBufferRef ConvertedPixelBufferFormat = PixelBufferUtils::createConvertedPixelBufferFormat(ConvertedPixelBufferFormat, v6, (__CVBuffer *)1)) == 0))
    {
      PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)&v53);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v46 = &v53;
      }
      else {
        char v46 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      NSLog(&cfstr_SDErrorPixelFo.isa, "pixelBufferToRawFile", 3011, PixelFormatType, v46);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v53, (char *)this);
      uint64_t v7 = NSURL;
      unint64_t v8 = [NSString stringWithUTF8String:this];
      CFStringRef v9 = [v7 fileURLWithPath:v8];
      id v10 = [v9 pathExtension];
      int v11 = [v10 isEqualToString:&stru_26FC22BA0];

      if (v11)
      {
        std::string::append(&v53, ".");
        size_t Width = CVPixelBufferGetWidth(ConvertedPixelBufferFormat);
        size_t Height = CVPixelBufferGetHeight(ConvertedPixelBufferFormat);
        std::to_string(&v49, Width);
        unint64_t v14 = std::string::append(&v49, "x");
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v48, Height);
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v16 = &v48;
        }
        else {
          uint64_t v16 = (std::string *)v48.__r_.__value_.__r.__words[0];
        }
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v48.__r_.__value_.__l.__size_;
        }
        CVPixelBufferRef v18 = std::string::append(&v50, (const std::string::value_type *)v16, size);
        long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        int64_t v52 = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)vImage_Buffer __p = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }
        if (v52 >= 0) {
          size_t v20 = __p;
        }
        else {
          size_t v20 = (void **)__p[0];
        }
        if (v52 >= 0) {
          std::string::size_type v21 = HIBYTE(v52);
        }
        else {
          std::string::size_type v21 = (std::string::size_type)__p[1];
        }
        std::string::append(&v53, (const std::string::value_type *)v20, v21);
        std::string::append(&v53, ".");
        double v22 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(ConvertedPixelBufferFormat);
        PixelBufferUtils::pixelFormatAsFileExtension(v22, (uint64_t)&v50);
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v23 = &v50;
        }
        else {
          size_t v23 = (std::string *)v50.__r_.__value_.__r.__words[0];
        }
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v24 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v24 = v50.__r_.__value_.__l.__size_;
        }
        std::string::append(&v53, (const std::string::value_type *)v23, v24);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v52) < 0) {
          operator delete(__p[0]);
        }
      }
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v25 = &v53;
      }
      else {
        size_t v25 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      OSType v26 = fopen((const char *)v25, "wb");
      if (v26)
      {
        if (CVPixelBufferGetPlaneCount(ConvertedPixelBufferFormat))
        {
          CVPixelBufferLockBaseAddress(ConvertedPixelBufferFormat, 1uLL);
          size_t v27 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(ConvertedPixelBufferFormat);
          size_t PlaneCount = CVPixelBufferGetPlaneCount(ConvertedPixelBufferFormat);
          if (PlaneCount)
          {
            for (size_t i = 0; i != PlaneCount; ++i)
            {
              size_t v30 = PixelBufferUtils::pixelSizeForPixelFormat(v27, i);
              size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(ConvertedPixelBufferFormat, i);
              size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(ConvertedPixelBufferFormat, i);
              size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(ConvertedPixelBufferFormat, i);
              BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(ConvertedPixelBufferFormat, i);
              if (HeightOfPlane)
              {
                size_t v35 = BaseAddressOfPlane;
                do
                {
                  fwrite(v35, v30, WidthOfPlane, v26);
                  v35 += BytesPerRowOfPlane;
                  --HeightOfPlane;
                }
                while (HeightOfPlane);
              }
            }
          }
        }
        else
        {
          CVPixelBufferLockBaseAddress(ConvertedPixelBufferFormat, 1uLL);
          char v39 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(ConvertedPixelBufferFormat);
          size_t v40 = PixelBufferUtils::pixelSizeForPixelFormat(v39, 0);
          size_t v41 = CVPixelBufferGetHeight(ConvertedPixelBufferFormat);
          size_t v42 = CVPixelBufferGetWidth(ConvertedPixelBufferFormat);
          size_t BytesPerRow = CVPixelBufferGetBytesPerRow(ConvertedPixelBufferFormat);
          BaseAddress = (char *)CVPixelBufferGetBaseAddress(ConvertedPixelBufferFormat);
          if (v41)
          {
            OSType v45 = BaseAddress;
            do
            {
              fwrite(v45, v40, v42, v26);
              v45 += BytesPerRow;
              --v41;
            }
            while (v41);
          }
        }
        CVPixelBufferUnlockBaseAddress(ConvertedPixelBufferFormat, 1uLL);
      }
      else
      {
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v36 = &v53;
        }
        else {
          unint64_t v36 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        size_t v37 = __error();
        size_t v38 = strerror(*v37);
        NSLog(&cfstr_SDErrorFailedO.isa, "pixelBufferToRawFile", 3036, v36, v38);
      }
      fclose(v26);
      if (isPixelFormatCompressed) {
        CVPixelBufferRelease(ConvertedPixelBufferFormat);
      }
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
  }
}

void sub_247EFF35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (*(char *)(v39 - 89) < 0) {
    operator delete(*(void **)(v39 - 112));
  }
  _Unwind_Resume(exception_object);
}

CVPixelBufferRef PixelBufferUtils::pixelBufferFromImageFile(PixelBufferUtils *this, CGImage *a2)
{
  if (this)
  {
    unint64_t v3 = NSURL;
    int8x8_t v4 = [NSString stringWithUTF8String:this];
    CFURLRef v5 = [v3 fileURLWithPath:v4];

    unint64_t v6 = CGImageSourceCreateWithURL(v5, 0);
    uint64_t v7 = v6;
    if (v6)
    {
      if (CGImageSourceGetCount(v6))
      {
        ImageAtIndedouble x = CGImageSourceCreateImageAtIndex(v7, 0, 0);
        CVPixelBufferRef v9 = PixelBufferUtils::pixelBufferFromCGImage(ImageAtIndex, a2);
        CGImageRelease(ImageAtIndex);
        CFRelease(v7);
LABEL_8:

        return v9;
      }
      CFRelease(v7);
    }
    CVPixelBufferRef v9 = 0;
    goto LABEL_8;
  }
  return 0;
}

void sub_247EFF508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CVBuffer *PixelBufferUtils::blacken(__CVBuffer *this, __CVBuffer *a2)
{
  if (this)
  {
    OSType v2 = this;
    size_t PlaneCount = CVPixelBufferGetPlaneCount(this);
    CVPixelBufferLockBaseAddress(v2, 0);
    if (PlaneCount)
    {
      for (size_t i = 0; i != PlaneCount; ++i)
      {
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v2, i);
        size_t v6 = CVPixelBufferGetHeightOfPlane(v2, i) * BytesPerRowOfPlane;
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v2, i);
        bzero(BaseAddressOfPlane, v6);
      }
    }
    else
    {
      size_t DataSize = CVPixelBufferGetDataSize(v2);
      BaseAddress = CVPixelBufferGetBaseAddress(v2);
      bzero(BaseAddress, DataSize);
    }
    return (__CVBuffer *)CVPixelBufferUnlockBaseAddress(v2, 0);
  }
  return this;
}

float PixelBufferUtils::getTurboColor(PixelBufferUtils *this, float a2, float *a3, float *a4, float *a5)
{
  unsigned int v5 = (float)(a2 * 255.0);
  if (v5 + 1 < 0xFF) {
    unsigned int v6 = v5 + 1;
  }
  else {
    unsigned int v6 = 255;
  }
  float v7 = -(float)((float)(float)(a2 * 255.0) - (float)(a2 * 255.0));
  *(float *)this = PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap[v5]
                 + (float)((float)(PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap[v6]
                                 - PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap[v5])
                         * v7);
  *a3 = PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap[v5]
      + (float)((float)(PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap[v6]
                      - PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap[v5])
              * v7);
  float result = PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap[v5]
         + (float)((float)(PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap[v6]
                         - PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap[v5])
                 * v7);
  *a4 = result;
  return result;
}

float *PixelBufferUtils::getJetColor(float *this, float a2, float *a3, float *a4, float *a5)
{
  *this = 1.5 - fabsf((float)(a2 * 4.0) + -3.0);
  *a3 = 1.5 - fabsf((float)(a2 * 4.0) + -2.0);
  *a4 = 1.5 - fabsf((float)(a2 * 4.0) + -1.0);
  float v5 = 0.0;
  if (*this <= 1.0) {
    float v6 = *this;
  }
  else {
    float v6 = 1.0;
  }
  if (*this >= 0.0) {
    float v7 = v6;
  }
  else {
    float v7 = 0.0;
  }
  *this = v7;
  if (*a3 <= 1.0) {
    float v8 = *a3;
  }
  else {
    float v8 = 1.0;
  }
  if (*a3 >= 0.0) {
    float v9 = v8;
  }
  else {
    float v9 = 0.0;
  }
  *a3 = v9;
  if (*a4 >= 0.0)
  {
    float v5 = 1.0;
    if (*a4 <= 1.0) {
      float v5 = *a4;
    }
  }
  *a4 = v5;
  return this;
}

uint64_t PixelBufferUtils::colorizedDepthPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, int a3, float a4, float a5, uint64_t a6, __CVBuffer *a7, __CVBuffer *a8)
{
  _S8 = a5;
  int v13 = (int)a2;
  OSType PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
  CVPixelBufferLockBaseAddress(this, 1uLL);
  CVPixelBufferLockBaseAddress(a7, 0);
  memset(&v111, 0, sizeof(v111));
  uint64_t v16 = (CGRect *)MEMORY[0x263F001A8];
  PixelBufferUtils::asVImageBuffer(this, *MEMORY[0x263F001A8], &v111);
  memset(&v110, 0, sizeof(v110));
  PixelBufferUtils::asVImageBuffer(a7, *v16, &v110);
  pixelBuffer = this;
  if ((int)PixelFormatType > 1717855599)
  {
    if ((int)PixelFormatType <= 1751410031)
    {
      if (PixelFormatType == 1717855600 || PixelFormatType == 1717856627)
      {
        vImagePixelCount height = v111.height;
        data = (char *)v111.data;
        if (v13)
        {
          if (!v111.height) {
            goto LABEL_110;
          }
          uint64_t v70 = 0;
          CGRect v71 = (float *)v111.data;
          _S8 = *(float *)v111.data;
          a4 = *(float *)v111.data;
          do
          {
            if (v111.width)
            {
              uint64_t v72 = 0;
              do
              {
                float v73 = v71[v72];
                if (v73 < _S8) {
                  _S8 = v71[v72];
                }
                if (a4 < v73) {
                  a4 = v71[v72];
                }
                ++v72;
              }
              while (v111.width > v72);
            }
            ++v70;
            CGRect v71 = (float *)((char *)v71 + v111.rowBytes);
          }
          while (v111.height > v70);
        }
        if (v111.height)
        {
          LODWORD(v74) = 0;
          long long v75 = *(_OWORD *)&v111.width;
          size_t rowBytes = v110.rowBytes;
          int32x4_t v95 = (char *)v110.data + 3;
          vImagePixelCount width = v111.width;
          vImagePixelCount v101 = v111.height;
          do
          {
            if (width)
            {
              uint64_t v77 = 0;
              int v107 = v74;
              float32x4_t v78 = &data[*((void *)&v75 + 1) * v74];
              float32x4_t v79 = &v95[rowBytes * v74];
              do
              {
                float v80 = *(float *)&v78[4 * v77];
                if (a3 && v80 == 0.0)
                {
                  *float32x4_t v79 = 0;
                }
                else
                {
                  float v81 = (float)(v80 - _S8) / (float)(a4 - _S8);
                  if (v81 <= 1.0) {
                    float v82 = v81;
                  }
                  else {
                    float v82 = 1.0;
                  }
                  LODWORD(__p[0]) = 0;
                  if (v81 >= 0.0) {
                    float v83 = v82;
                  }
                  else {
                    float v83 = 0.0;
                  }
                  *(void *)int8x16_t v112 = 0;
                  if (a6)
                  {
                    float v84 = v83 * 255.0;
                    float32x4_t v85 = (void **)(a6 + 12 * (int)v84);
                    vImage_Buffer v86 = (float *)(a6 + 12 * (int)v84 + 4);
                    int32x4_t v87 = (float *)(v85 + 1);
                  }
                  else
                  {
                    float32x4_t v85 = __p;
                    vImage_Buffer v86 = &v112[1];
                    int32x4_t v87 = v112;
                    PixelBufferUtils::getTurboColor((PixelBufferUtils *)__p, v83, &v112[1], v112, v17);
                  }
                  float v88 = *v86;
                  float v89 = *(float *)v85;
                  *(v79 - 3) = (int)(float)(*v87 * 255.0);
                  *(v79 - 2) = (int)(float)(v88 * 255.0);
                  *(v79 - 1) = (int)(float)(v89 * 255.0);
                  *float32x4_t v79 = -1;
                }
                ++v77;
                v79 += 4;
              }
              while ((unint64_t)v75 > v77);
              vImagePixelCount width = v75;
              vImagePixelCount height = v101;
              LODWORD(v74) = v107;
            }
            vImagePixelCount v74 = (v74 + 1);
          }
          while (height > v74);
        }
        goto LABEL_110;
      }
      goto LABEL_113;
    }
    if (PixelFormatType == 1751410032 || PixelFormatType == 1751411059) {
      goto LABEL_10;
    }
    int v19 = 1932996149;
  }
  else
  {
    if ((int)PixelFormatType > 1278226535)
    {
      if (PixelFormatType != 1278226536)
      {
        if (PixelFormatType != 1278226742)
        {
          int v19 = 1647392359;
          goto LABEL_44;
        }
LABEL_45:
        vImagePixelCount v48 = v111.height;
        int8x8_t v103 = (char *)v111.data;
        if (!v13)
        {
LABEL_56:
          if (v111.height)
          {
            LODWORD(v52) = 0;
            float v53 = a4 - _S8;
            long long v54 = *(_OWORD *)&v111.width;
            size_t v97 = v110.rowBytes;
            int32x4_t v94 = (char *)v110.data + 3;
            vImagePixelCount v55 = v111.width;
            vImagePixelCount v100 = v111.height;
            do
            {
              if (v55)
              {
                uint64_t v56 = 0;
                int v106 = v52;
                uint64_t v57 = &v103[*((void *)&v54 + 1) * v52];
                CGRect v58 = &v94[v97 * v52];
                do
                {
                  unsigned int v59 = *(unsigned __int16 *)&v57[2 * v56];
                  if (!a3 || *(_WORD *)&v57[2 * v56])
                  {
                    float v60 = (float)((float)v59 - _S8) / v53;
                    if (v60 <= 1.0) {
                      float v61 = (float)((float)v59 - _S8) / v53;
                    }
                    else {
                      float v61 = 1.0;
                    }
                    LODWORD(__p[0]) = 0;
                    if (v60 >= 0.0) {
                      float v62 = v61;
                    }
                    else {
                      float v62 = 0.0;
                    }
                    *(void *)int8x16_t v112 = 0;
                    if (a6)
                    {
                      float v63 = v62 * 255.0;
                      CGRect v64 = (void **)(a6 + 12 * (int)v63);
                      CGRect v65 = (float *)(a6 + 12 * (int)v63 + 4);
                      char v66 = (float *)(v64 + 1);
                    }
                    else
                    {
                      CGRect v64 = __p;
                      CGRect v65 = &v112[1];
                      char v66 = v112;
                      PixelBufferUtils::getTurboColor((PixelBufferUtils *)__p, v62, &v112[1], v112, v17);
                    }
                    float v67 = *v65;
                    float v68 = *(float *)v64;
                    *(v58 - 3) = (int)(float)(*v66 * 255.0);
                    *(v58 - 2) = (int)(float)(v67 * 255.0);
                    *(v58 - 1) = (int)(float)(v68 * 255.0);
                    char *v58 = -1;
                  }
                  else
                  {
                    char *v58 = 0;
                  }
                  ++v56;
                  v58 += 4;
                }
                while ((unint64_t)v54 > v56);
                vImagePixelCount v55 = v54;
                vImagePixelCount v48 = v100;
                LODWORD(v52) = v106;
              }
              vImagePixelCount v52 = (v52 + 1);
            }
            while (v48 > v52);
          }
          goto LABEL_110;
        }
        if (v111.height)
        {
          uint64_t v49 = 0;
          std::string v50 = (char *)v111.data;
          LOWORD(v18) = *(_WORD *)v111.data;
          _S8 = (float)LODWORD(v18);
          a4 = (float)LODWORD(v18);
          do
          {
            if (v111.width)
            {
              uint64_t v51 = 0;
              do
              {
                LOWORD(v18) = *(_WORD *)&v50[2 * v51];
                float v18 = (float)LODWORD(v18);
                if (_S8 > v18) {
                  _S8 = v18;
                }
                if (a4 < v18) {
                  a4 = v18;
                }
                ++v51;
              }
              while (v111.width > v51);
            }
            ++v49;
            v50 += v111.rowBytes;
          }
          while (v111.height > v49);
          goto LABEL_56;
        }
LABEL_110:
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
        uint64_t result = (uint64_t)a7;
        if (a7)
        {
          CVPixelBufferUnlockBaseAddress(a7, 0);
          return 0;
        }
        return result;
      }
LABEL_10:
      vImagePixelCount v20 = v111.height;
      int32x4_t v102 = (char *)v111.data;
      if (v13)
      {
        if (!v111.height) {
          goto LABEL_110;
        }
        uint64_t v21 = 0;
        double v22 = (char *)v111.data;
        _H0 = *(_WORD *)v111.data;
        __asm { FCVT            S8, H0 }
        a4 = _S8;
        do
        {
          if (v111.width)
          {
            uint64_t v28 = 0;
            do
            {
              _H0 = *(_WORD *)&v22[2 * v28];
              __asm { FCVT            S0, H0 }
              if (_S8 > _S0) {
                _S8 = _S0;
              }
              if (a4 < _S0) {
                a4 = _S0;
              }
              ++v28;
            }
            while (v111.width > v28);
          }
          ++v21;
          v22 += v111.rowBytes;
        }
        while (v111.height > v21);
      }
      if (v111.height)
      {
        LODWORD(v31) = 0;
        long long v32 = *(_OWORD *)&v111.width;
        size_t v96 = v110.rowBytes;
        int32x4_t v93 = (char *)v110.data + 3;
        vImagePixelCount v33 = v111.width;
        vImagePixelCount v99 = v111.height;
        do
        {
          if (v33)
          {
            uint64_t v34 = 0;
            int v105 = v31;
            size_t v35 = &v102[*((void *)&v32 + 1) * v31];
            unint64_t v36 = &v93[v96 * v31];
            do
            {
              _H0 = *(_WORD *)&v35[2 * v34];
              __asm { FCVT            S1, H0 }
              if (a3 && _S1 == 0.0)
              {
                *unint64_t v36 = 0;
              }
              else
              {
                float v39 = (float)(_S1 - _S8) / (float)(a4 - _S8);
                if (v39 <= 1.0) {
                  float v40 = (float)(_S1 - _S8) / (float)(a4 - _S8);
                }
                else {
                  float v40 = 1.0;
                }
                LODWORD(__p[0]) = 0;
                if (v39 >= 0.0) {
                  float v41 = v40;
                }
                else {
                  float v41 = 0.0;
                }
                *(void *)int8x16_t v112 = 0;
                if (a6)
                {
                  float v42 = v41 * 255.0;
                  __int16 v43 = (void **)(a6 + 12 * (int)v42);
                  char v44 = (float *)(a6 + 12 * (int)v42 + 4);
                  OSType v45 = (float *)(v43 + 1);
                }
                else
                {
                  __int16 v43 = __p;
                  char v44 = &v112[1];
                  OSType v45 = v112;
                  PixelBufferUtils::getTurboColor((PixelBufferUtils *)__p, v41, &v112[1], v112, v17);
                }
                float v46 = *v44;
                float v47 = *(float *)v43;
                *(v36 - 3) = (int)(float)(*v45 * 255.0);
                *(v36 - 2) = (int)(float)(v46 * 255.0);
                *(v36 - 1) = (int)(float)(v47 * 255.0);
                *unint64_t v36 = -1;
              }
              ++v34;
              v36 += 4;
            }
            while ((unint64_t)v32 > v34);
            vImagePixelCount v33 = v32;
            vImagePixelCount v20 = v99;
            LODWORD(v31) = v105;
          }
          vImagePixelCount v31 = (v31 + 1);
        }
        while (v20 > v31);
      }
      goto LABEL_110;
    }
    if (PixelFormatType == 825306677) {
      goto LABEL_45;
    }
    int v19 = 825437747;
  }
LABEL_44:
  if (PixelFormatType == v19) {
    goto LABEL_45;
  }
LABEL_113:
  PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
  if (v109 >= 0) {
    int32x4_t v91 = __p;
  }
  else {
    int32x4_t v91 = (void **)__p[0];
  }
  NSLog(&cfstr_SDErrorPixelFo.isa, "colorizedDepthPixelBuffer", 3269, PixelFormatType, v91);
  if (v109 < 0) {
    operator delete(__p[0]);
  }
  CVPixelBufferUnlockBaseAddress(a7, 0);
  return 0xFFFFFFFFLL;
}

void sub_247EFFE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CVBuffer *PixelBufferUtils::createColorizedDepthPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer **a3, float a4, float a5, uint64_t a6, PixelBufferUtils *a7, __CVBuffer *a8, float a9)
{
  PixelBufferWithSameSize = PixelBufferUtils::createPixelBufferWithSameSize(this, (__CVBuffer *)0x42475241, 1);
  CVPixelBufferRef texture = PixelBufferWithSameSize;
  if (PixelBufferUtils::colorizedDepthPixelBuffer(this, a2, (int)a3, a5, a4, a6, PixelBufferWithSameSize, v18))
  {
    CVPixelBufferRelease(PixelBufferWithSameSize);
    PixelBufferWithSameSize = 0;
    CVPixelBufferRef texture = 0;
  }
  if (a7)
  {
    CVPixelBufferRef ConvertedPixelBufferFormat = PixelBufferUtils::createConvertedPixelBufferFormat(a7, (__CVBuffer *)0x42475241, 0);
    if (ConvertedPixelBufferFormat)
    {
      vImagePixelCount v20 = ConvertedPixelBufferFormat;
      char v21 = PixelBufferUtils::alphaBlend(ConvertedPixelBufferFormat, PixelBufferWithSameSize, &texture, a9, a3);
      double v22 = v20;
    }
    else
    {
      CVPixelBufferRelease(PixelBufferWithSameSize);
      CVPixelBufferRef texture = 0;
      char v21 = PixelBufferUtils::alphaBlend(0, 0, &texture, a9, a3);
      double v22 = 0;
    }
    CVPixelBufferRelease(v22);
    PixelBufferWithSameSize = texture;
    if ((v21 & 1) == 0)
    {
      CVPixelBufferRelease(texture);
      return 0;
    }
  }
  return PixelBufferWithSameSize;
}

uint64_t PixelBufferUtils::alphaBlend(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer **a3, float a4, __CVBuffer **a5)
{
  int v5 = (int)a5;
  OSType PixelFormatType = (__CVBuffer *)CVPixelBufferGetPixelFormatType(this);
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  OSType v13 = CVPixelBufferGetPixelFormatType(a2);
  size_t v14 = CVPixelBufferGetWidth(a2);
  size_t v15 = CVPixelBufferGetHeight(a2);
  if (PixelFormatType == v13 && Width == v14 && Height == v15)
  {
    PixelBufferWithSameSize = *a3;
    if (!*a3)
    {
      PixelBufferWithSameSize = PixelBufferUtils::createPixelBufferWithSameSize(this, PixelFormatType, 1);
      *a3 = PixelBufferWithSameSize;
    }
    pixelBuffer = PixelBufferWithSameSize;
    int v142 = v5;
    if ((int)PixelFormatType <= 1380401728)
    {
      if ((int)PixelFormatType > 875704437)
      {
        if ((int)PixelFormatType > 1111970368)
        {
          if (PixelFormatType != 1111970369)
          {
            if (PixelFormatType != 1278226534)
            {
              if (PixelFormatType != 1278226536) {
                goto LABEL_108;
              }
              goto LABEL_82;
            }
LABEL_31:
            size_t v21 = CVPixelBufferGetWidth(this);
            size_t v22 = CVPixelBufferGetHeight(this);
            CVPixelBufferLockBaseAddress(PixelBufferWithSameSize, 0);
            CVPixelBufferLockBaseAddress(this, 1uLL);
            CVPixelBufferLockBaseAddress(a2, 1uLL);
            size_t BytesPerRow = CVPixelBufferGetBytesPerRow(this);
            size_t v24 = CVPixelBufferGetBytesPerRow(a2);
            size_t v25 = PixelBufferWithSameSize;
            size_t v26 = CVPixelBufferGetBytesPerRow(PixelBufferWithSameSize);
            BaseAddress = (char *)CVPixelBufferGetBaseAddress(this);
            uint64_t v28 = (char *)CVPixelBufferGetBaseAddress(a2);
            uint64_t v29 = (char *)CVPixelBufferGetBaseAddress(v25);
            size_t v30 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
            uint64_t v31 = PixelBufferUtils::componentsPerPixelForPixelFormat(v30, 0);
            size_t v32 = v31 * v21;
            if (v142)
            {
              if (v22)
              {
                for (uint64_t i = 0; i != v22; ++i)
                {
                  if (v32)
                  {
                    uint64_t v34 = (float *)&v29[i * v26];
                    size_t v35 = (float *)&v28[i * v24];
                    size_t v36 = v31 * v21;
                    size_t v37 = (float *)&BaseAddress[i * BytesPerRow];
                    do
                    {
                      float v38 = *v35++;
                      float v39 = v38;
                      float v40 = *v37++;
                      float v41 = v40;
                      float v42 = (float)((float)(1.0 - a4) * v39) + (float)(v40 * a4);
                      if (v39 == 0.0) {
                        float v43 = v41;
                      }
                      else {
                        float v43 = v42;
                      }
                      *v34++ = v43;
                      --v36;
                    }
                    while (v36);
                  }
                }
              }
            }
            else if (v22)
            {
              for (uint64_t j = 0; j != v22; ++j)
              {
                if (v32)
                {
                  OSType v45 = (float *)&v29[j * v26];
                  float v46 = (float *)&v28[j * v24];
                  size_t v47 = v31 * v21;
                  vImagePixelCount v48 = (float *)&BaseAddress[j * BytesPerRow];
                  do
                  {
                    float v49 = *v48++;
                    float v50 = v49;
                    float v51 = *v46++;
                    *v45++ = (float)((float)(1.0 - a4) * v51) + (float)(v50 * a4);
                    --v47;
                  }
                  while (v47);
                }
              }
            }
            goto LABEL_106;
          }
LABEL_52:
          size_t v52 = CVPixelBufferGetWidth(this);
          size_t v53 = CVPixelBufferGetHeight(this);
          CVPixelBufferLockBaseAddress(PixelBufferWithSameSize, 0);
          CVPixelBufferLockBaseAddress(this, 1uLL);
          CVPixelBufferLockBaseAddress(a2, 1uLL);
          size_t v54 = CVPixelBufferGetBytesPerRow(this);
          size_t v55 = CVPixelBufferGetBytesPerRow(a2);
          size_t v56 = CVPixelBufferGetBytesPerRow(PixelBufferWithSameSize);
          uint64_t v57 = (char *)CVPixelBufferGetBaseAddress(this);
          CGRect v58 = (char *)CVPixelBufferGetBaseAddress(a2);
          unsigned int v59 = (char *)CVPixelBufferGetBaseAddress(PixelBufferWithSameSize);
          float v60 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
          uint64_t v61 = PixelBufferUtils::componentsPerPixelForPixelFormat(v60, 0);
          size_t v62 = v61 * v52;
          if (v142)
          {
            if (v53)
            {
              for (uint64_t k = 0; k != v53; ++k)
              {
                if (v62)
                {
                  CGRect v64 = &v59[k * v56];
                  CGRect v65 = &v58[k * v55];
                  size_t v66 = v61 * v52;
                  float v67 = &v57[k * v54];
                  do
                  {
                    unsigned int v68 = *v67;
                    if (*v65) {
                      unsigned int v68 = (int)(float)((float)((float)(1.0 - a4) * (float)*v65)
                    }
                                       + (float)((float)v68 * a4));
                    *v64++ = v68;
                    ++v67;
                    ++v65;
                    --v66;
                  }
                  while (v66);
                }
              }
            }
          }
          else if (v53)
          {
            for (uint64_t m = 0; m != v53; ++m)
            {
              if (v62)
              {
                uint64_t v70 = &v59[m * v56];
                CGRect v71 = &v58[m * v55];
                size_t v72 = v61 * v52;
                float v73 = &v57[m * v54];
                do
                {
                  unsigned int v74 = *v73++;
                  float v75 = (float)v74;
                  unsigned int v76 = *v71++;
                  *v70++ = (int)(float)((float)((float)(1.0 - a4) * (float)v76) + (float)(v75 * a4));
                  --v72;
                }
                while (v72);
              }
            }
          }
          goto LABEL_106;
        }
        if (PixelFormatType == 875704438) {
          goto LABEL_52;
        }
        int v20 = 1094862674;
        goto LABEL_51;
      }
      if ((int)PixelFormatType <= 843264103)
      {
        if (PixelFormatType == 32) {
          goto LABEL_52;
        }
        int v19 = 825437747;
        goto LABEL_71;
      }
      if (PixelFormatType != 843264104)
      {
        int v20 = 875704422;
LABEL_51:
        if (PixelFormatType == v20) {
          goto LABEL_52;
        }
LABEL_108:
        PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
        if (v145 >= 0) {
          float32x4_t v141 = __p;
        }
        else {
          float32x4_t v141 = (void **)__p[0];
        }
        NSLog(&cfstr_SDErrorPixelFo.isa, "alphaBlend", 3985, PixelFormatType, v141);
        if (v145 < 0) {
          operator delete(__p[0]);
        }
        return 0;
      }
      goto LABEL_82;
    }
    if ((int)PixelFormatType <= 1717855599)
    {
      if ((int)PixelFormatType > 1380411456)
      {
        if (PixelFormatType != 1380411457)
        {
          int v19 = 1647392359;
LABEL_71:
          if (PixelFormatType == v19)
          {
            size_t v77 = CVPixelBufferGetWidth(this);
            size_t v78 = CVPixelBufferGetHeight(this);
            CVPixelBufferLockBaseAddress(PixelBufferWithSameSize, 0);
            CVPixelBufferLockBaseAddress(this, 1uLL);
            CVPixelBufferLockBaseAddress(a2, 1uLL);
            size_t v79 = CVPixelBufferGetBytesPerRow(this);
            size_t v80 = CVPixelBufferGetBytesPerRow(a2);
            size_t v81 = CVPixelBufferGetBytesPerRow(PixelBufferWithSameSize);
            float v82 = (char *)CVPixelBufferGetBaseAddress(this);
            float v83 = (char *)CVPixelBufferGetBaseAddress(a2);
            float v84 = (char *)CVPixelBufferGetBaseAddress(PixelBufferWithSameSize);
            float32x4_t v85 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
            uint64_t v86 = PixelBufferUtils::componentsPerPixelForPixelFormat(v85, 0);
            size_t v87 = v86 * v77;
            if (v142)
            {
              if (v78)
              {
                for (uint64_t n = 0; n != v78; ++n)
                {
                  if (v87)
                  {
                    float v89 = &v84[n * v81];
                    uint64_t v90 = &v83[n * v80];
                    size_t v91 = v86 * v77;
                    int32x4_t v92 = &v82[n * v79];
                    do
                    {
                      unsigned int v93 = *(unsigned __int16 *)v92;
                      if (*(_WORD *)v90) {
                        unsigned int v93 = (int)(float)((float)((float)(1.0 - a4) * (float)*(unsigned __int16 *)v90)
                      }
                                         + (float)((float)v93 * a4));
                      *(_WORD *)float v89 = v93;
                      v89 += 2;
                      v92 += 2;
                      v90 += 2;
                      --v91;
                    }
                    while (v91);
                  }
                }
              }
            }
            else if (v78)
            {
              for (iuint64_t i = 0; ii != v78; ++ii)
              {
                if (v87)
                {
                  int v133 = &v84[ii * v81];
                  int32x2_t v134 = &v83[ii * v80];
                  size_t v135 = v86 * v77;
                  int32x2_t v136 = &v82[ii * v79];
                  do
                  {
                    unsigned int v137 = *(unsigned __int16 *)v136;
                    v136 += 2;
                    float v138 = (float)v137;
                    unsigned int v139 = *(unsigned __int16 *)v134;
                    v134 += 2;
                    *(_WORD *)int v133 = (int)(float)((float)((float)(1.0 - a4) * (float)v139) + (float)(v138 * a4));
                    v133 += 2;
                    --v135;
                  }
                  while (v135);
                }
              }
            }
            goto LABEL_106;
          }
          goto LABEL_108;
        }
LABEL_82:
        size_t v94 = CVPixelBufferGetWidth(this);
        size_t v95 = CVPixelBufferGetHeight(this);
        CVPixelBufferLockBaseAddress(PixelBufferWithSameSize, 0);
        CVPixelBufferLockBaseAddress(this, 1uLL);
        CVPixelBufferLockBaseAddress(a2, 1uLL);
        size_t v96 = CVPixelBufferGetBytesPerRow(this);
        size_t v97 = CVPixelBufferGetBytesPerRow(a2);
        size_t v98 = CVPixelBufferGetBytesPerRow(PixelBufferWithSameSize);
        vImagePixelCount v99 = (char *)CVPixelBufferGetBaseAddress(this);
        vImagePixelCount v100 = (char *)CVPixelBufferGetBaseAddress(a2);
        vImagePixelCount v101 = (char *)CVPixelBufferGetBaseAddress(PixelBufferWithSameSize);
        int32x4_t v102 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
        uint64_t v103 = PixelBufferUtils::componentsPerPixelForPixelFormat(v102, 0);
        size_t v104 = v103 * v94;
        if (v142)
        {
          if (v95)
          {
            for (juint64_t j = 0; jj != v95; ++jj)
            {
              if (v104)
              {
                int v106 = &v101[jj * v98];
                int v107 = &v100[jj * v97];
                size_t v108 = v103 * v94;
                char v109 = &v99[jj * v96];
                do
                {
                  __asm { FCMP            H1, #0 }
                  if (_ZF)
                  {
                    _H1 = *(_WORD *)v109;
                  }
                  else
                  {
                    __asm { FCVT            S1, H1 }
                    _H2 = *(_WORD *)v109;
                    __asm { FCVT            S2, H2 }
                    _S1 = (float)((float)(1.0 - a4) * _S1) + (float)(_S2 * a4);
                    __asm { FCVT            H1, S1 }
                  }
                  *(_WORD *)int v106 = _H1;
                  v106 += 2;
                  v109 += 2;
                  v107 += 2;
                  --v108;
                }
                while (v108);
              }
            }
          }
        }
        else if (v95)
        {
          for (kuint64_t k = 0; kk != v95; ++kk)
          {
            if (v104)
            {
              uint64_t v121 = &v101[kk * v98];
              float v122 = &v100[kk * v97];
              size_t v123 = v103 * v94;
              float v124 = &v99[kk * v96];
              do
              {
                __int16 v125 = *(_WORD *)v124;
                v124 += 2;
                _H1 = v125;
                __asm { FCVT            S1, H1 }
                __int16 v128 = *(_WORD *)v122;
                v122 += 2;
                _H2 = v128;
                __asm { FCVT            S2, H2 }
                _S1 = (float)((float)(1.0 - a4) * _S2) + (float)(_S1 * a4);
                __asm { FCVT            H1, S1 }
                *(_WORD *)uint64_t v121 = LOWORD(_S1);
                v121 += 2;
                --v123;
              }
              while (v123);
            }
          }
        }
LABEL_106:
        uint64_t v17 = 1;
        CVPixelBufferUnlockBaseAddress(this, 1uLL);
        CVPixelBufferUnlockBaseAddress(a2, 1uLL);
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
        return v17;
      }
      if (PixelFormatType == 1380401729) {
        goto LABEL_52;
      }
      int v18 = 1380410945;
    }
    else if ((int)PixelFormatType <= 1751410031)
    {
      if (PixelFormatType == 1717855600) {
        goto LABEL_31;
      }
      int v18 = 1717856627;
    }
    else
    {
      if (PixelFormatType == 1751410032 || PixelFormatType == 1751411059) {
        goto LABEL_82;
      }
      int v18 = 1919365990;
    }
    if (PixelFormatType == v18) {
      goto LABEL_31;
    }
    goto LABEL_108;
  }
  NSLog(&cfstr_SDErrorCannotA.isa, "alphaBlend", 3934);
  return 0;
}

void sub_247F00854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PixelBufferUtils::colorizePointCloudOnPixelBuffer(CVPixelBufferRef pixelBuffer, __CVBuffer *a2, unint64_t a3, const CGPoint *a4, const float *a5, float a6, float a7, float a8)
{
  if (a8 <= 0.0)
  {
    CVPixelBufferGetWidth(pixelBuffer);
    CVPixelBufferGetHeight(pixelBuffer);
  }
  operator new[]();
}

void sub_247F00AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  MEMORY[0x24C570720](v13, 0x1000C8052888210);
  MEMORY[0x24C570720](v14, 0x1000C8052888210);
  MEMORY[0x24C570720](v12, 0x1000C8052888210);
  MEMORY[0x24C570720](a12, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

uint64_t PixelBufferUtils::addCirclesToPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, float a3, uint64_t a4, const CGPoint *a5, const float *a6, const float *a7, const float *a8, const float *a9)
{
  if (!this || !a4 || (id v10 = a5) == 0 || (v11 = a6) == 0 || (v12 = a7) == 0 || (v13 = a8) == 0)
  {
    NSLog(&cfstr_SDErrorCannotA_2.isa, a2, a4, a5, a6, a7, a8, a9, "addCirclesToPixelBuffer", 4067);
    return 0;
  }
  uint64_t v14 = a2;
  OSType PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
  size_t v18 = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  if (PixelFormatType != 1111970369)
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v39 >= 0) {
      size_t v35 = __p;
    }
    else {
      size_t v35 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "addCirclesToPixelBuffer", 4077, PixelFormatType, v35);
    if (v39 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  size_t v20 = Height;
  size_t widtha = v18;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CVPixelBufferLockBaseAddress(this, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(this);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(this);
  size_t v24 = widtha;
  vImagePixelCount width = DeviceRGB;
  size_t v25 = CGBitmapContextCreate(BaseAddress, v24, v20, 8uLL, BytesPerRow, DeviceRGB, 0x2002u);
  if (v14)
  {
    size_t v26 = (double *)(a4 + 8);
    do
    {
      float v27 = *(v26 - 1);
      double v28 = *v26;
      v26 += 2;
      float v29 = (double)v20 - v28;
      LODWORD(v28) = LODWORD(v10->x);
      id v10 = (const CGPoint *)((char *)v10 + 4);
      CGFloat v30 = *(float *)&v28;
      *(float *)&double v28 = *v11++;
      CGFloat v31 = *(float *)&v28;
      *(float *)&double v28 = *v12++;
      CGFloat v32 = *(float *)&v28;
      *(float *)&double v28 = *v13++;
      GenericRGB = CGColorCreateGenericRGB(v30, v31, v32, *(float *)&v28);
      CGContextSetFillColorWithColor(v25, GenericRGB);
      v40.origin.double x = (float)(v27 - a3);
      v40.origin.double y = (float)(v29 - a3);
      v40.size.vImagePixelCount width = (float)(a3 + a3);
      v40.size.vImagePixelCount height = v40.size.width;
      CGContextFillEllipseInRect(v25, v40);
      CFRelease(GenericRGB);
      uint64_t v14 = (__CVBuffer *)((char *)v14 - 1);
    }
    while (v14);
  }
  CVPixelBufferUnlockBaseAddress(this, 0);
  CFRelease(width);
  CGContextRelease(v25);
  return 1;
}

void sub_247F00DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PixelBufferUtils::createColorizedPointCloud(PixelBufferUtils *this, unint64_t a2, const CGPoint *a3, const float *a4, size_t a5, const float *a6, float a7, float a8, float a9)
{
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  CVReturn v21 = CVPixelBufferCreate(v18, (size_t)a4, a5, 0x42475241u, BufferAttributes, &pixelBufferOut);
  uint64_t result = 0;
  size_t v23 = pixelBufferOut;
  if (v21) {
    BOOL v24 = 1;
  }
  else {
    BOOL v24 = pixelBufferOut == 0;
  }
  if (!v24)
  {
    PixelBufferUtils::blacken(pixelBufferOut, v20);
    PixelBufferUtils::colorizePointCloudOnPixelBuffer(v23, this, a2, a3, a6, a7, a8, a9);
  }
  return result;
}

__CVBuffer *PixelBufferUtils::createPixelBufferCopy(PixelBufferUtils *this, __CVBuffer *a2)
{
  OSType PixelFormatType = (__CVBuffer *)CVPixelBufferGetPixelFormatType(this);
  PixelBufferWithSameSize = PixelBufferUtils::createPixelBufferWithSameSize(this, PixelFormatType, 1);
  if (PixelBufferUtils::copyPixelBuffer(PixelBufferWithSameSize, this, 0))
  {
    CVPixelBufferRelease(PixelBufferWithSameSize);
    return 0;
  }
  return PixelBufferWithSameSize;
}

CVPixelBufferRef PixelBufferUtils::asPixelBuffer(size_t this, size_t a2, PixelBufferUtils *a3, void *a4, void *a5)
{
  planeWidth[3] = *MEMORY[0x263EF8340];
  if (PixelBufferUtils::planeCountForPixelFormat(a3))
  {
    CVPixelBufferRef v20 = 0;
    uint64_t v9 = PixelBufferUtils::planeCountForPixelFormat(a3);
    if ((unint64_t)(v9 - 4) > 0xFFFFFFFFFFFFFFFCLL)
    {
      size_t v12 = v9;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      planeWidth[0] = this;
      planeWidth[1] = this;
      planeWidth[2] = this;
      planeHeight[0] = a2;
      planeHeight[1] = a2;
      planeHeight[2] = a2;
      v23[0] = this;
      v23[1] = this;
      size_t v24 = this;
      planeBaseAddress[1] = 0;
      uint64_t v22 = 0;
      planeBaseAddress[0] = a4;
      do
      {
        unint64_t v16 = PixelBufferUtils::horizontalSubsamplingForPixelFormat(a3, v15);
        unint64_t v17 = PixelBufferUtils::verticalSubsamplingForPixelFormat(a3, v15);
        v23[v14] *= PixelBufferUtils::pixelSizeForPixelFormat(a3, v15) / v16;
        planeWidth[v14] /= v16;
        planeHeight[v14] /= v17;
        if (v13) {
          planeBaseAddress[v14] = (char *)planeBaseAddress[v14 - 1] + planeHeight[v14 - 1] * v23[v14 - 1];
        }
        ++v15;
        ++v14;
        --v13;
      }
      while (v12 + v13);
      CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
      CVPixelBufferCreateWithPlanarBytes(v18, this, a2, (OSType)a3, 0, 0, v12, planeBaseAddress, planeWidth, planeHeight, v23, 0, 0, BufferAttributes, &v20);
      return v20;
    }
    else
    {
      NSLog(&cfstr_SDErrorOnlyUpT.isa, "asPixelBufferMultiPlane", 3452);
      return 0;
    }
  }
  else
  {
    planeWidth[0] = 0;
    unint64_t v11 = PixelBufferUtils::pixelSizeForPixelFormat(a3, 0);
    CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], this, a2, (OSType)a3, a4, v11 * this, 0, 0, 0, (CVPixelBufferRef *)planeWidth);
    return (CVPixelBufferRef)planeWidth[0];
  }
}

void PixelBufferUtils::inPlaceColorScaling(PixelBufferUtils *this, __CVBuffer *a2, float a3, float a4, int a5)
{
  int v6 = (int)a2;
  OSType PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
  id v10 = PixelFormatType;
  if ((int)PixelFormatType <= 1380401728)
  {
    if ((int)PixelFormatType <= 875704437)
    {
      if ((int)PixelFormatType > 825437746)
      {
        if (PixelFormatType != 825437747)
        {
          if (PixelFormatType != 843264104)
          {
            if (PixelFormatType != 875704422) {
              goto LABEL_80;
            }
            goto LABEL_72;
          }
          goto LABEL_60;
        }
        goto LABEL_25;
      }
      if (PixelFormatType != 32)
      {
        int v12 = 825306677;
LABEL_24:
        if (PixelFormatType == v12)
        {
LABEL_25:
          CVPixelBufferLockBaseAddress(this, 0);
          OSType v47 = CVPixelBufferGetPixelFormatType(this);
          size_t PlaneCount = CVPixelBufferGetPlaneCount(this);
          size_t v14 = PlaneCount;
          uint64_t v15 = 0;
          unsigned int v16 = 0;
          if (PlaneCount <= 1) {
            uint64_t v17 = 1;
          }
          else {
            uint64_t v17 = PlaneCount;
          }
          unint64_t v46 = v17;
          CFAllocatorRef v18 = (CGRect *)MEMORY[0x263F001A8];
          do
          {
            if (v14)
            {
              PixelBufferUtils::asVImageBuffer(this, (__CVBuffer *)v15, *v18, &__p);
            }
            else
            {
              PixelBufferUtils::asVImageBuffer(this, *v18, &__p);
              uint64_t v15 = 0;
            }
            data = (char *)__p.data;
            vImagePixelCount height = __p.height;
            vImagePixelCount width = __p.width;
            size_t rowBytes = __p.rowBytes;
            unint64_t v23 = PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)v47, v15);
            if (height)
            {
              uint64_t v25 = 0;
              vImagePixelCount v26 = width * v23;
              do
              {
                if (v26)
                {
                  for (unint64_t i = 0; i != v26; ++i)
                  {
                    if (i % v23 != 0x7FFFFFFF)
                    {
                      LOWORD(v24) = *(_WORD *)&data[2 * i];
                      float v28 = (float)LODWORD(v24);
                      float v29 = (float)(v28 + a4) * a3;
                      float v24 = a4 + (float)(v28 * a3);
                      if (!v6) {
                        float v24 = v29;
                      }
                      *(_WORD *)&data[2 * i] = (int)v24;
                    }
                  }
                }
                ++v25;
                data += rowBytes;
              }
              while (v25 != height);
            }
            uint64_t v15 = ++v16;
          }
          while (v46 > v16);
          CVPixelBufferUnlockBaseAddress(this, 0);
          return;
        }
LABEL_80:
        PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)&__p);
        if ((__p.width & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (vImage_Buffer *)__p.data;
        }
        NSLog(&cfstr_SDErrorPixelFo.isa, "inPlaceColorScaling", 3700, v10, p_p);
        if (SHIBYTE(__p.width) < 0) {
          operator delete(__p.data);
        }
        return;
      }
      goto LABEL_54;
    }
    if ((int)PixelFormatType <= 1111970368)
    {
      if (PixelFormatType == 875704438)
      {
LABEL_72:
        float v41 = this;
        float v42 = a3;
        float v43 = a4;
        int v44 = v6;
        int v35 = 0x7FFFFFFF;
        goto LABEL_73;
      }
      if (PixelFormatType != 1094862674) {
        goto LABEL_80;
      }
LABEL_54:
      if (a5) {
        int v35 = 0x7FFFFFFF;
      }
      else {
        int v35 = 0;
      }
LABEL_71:
      float v41 = this;
      float v42 = a3;
      float v43 = a4;
      int v44 = v6;
LABEL_73:
      scaleColorsRawInPlace<unsigned char>(v41, v44, v35, v42, v43);
      return;
    }
    if (PixelFormatType != 1111970369)
    {
      if (PixelFormatType != 1278226534)
      {
        int v11 = 1278226536;
        goto LABEL_59;
      }
      goto LABEL_64;
    }
    goto LABEL_68;
  }
  if ((int)PixelFormatType > 1717856626)
  {
    if ((int)PixelFormatType <= 1751411058)
    {
      if (PixelFormatType != 1717856627)
      {
        int v11 = 1751410032;
LABEL_59:
        if (PixelFormatType != v11) {
          goto LABEL_80;
        }
LABEL_60:
        size_t v36 = this;
        float v37 = a3;
        float v38 = a4;
        int v39 = v6;
        int v40 = 0x7FFFFFFF;
LABEL_61:
        scaleColorsRawInPlace<half>(v36, v39, v40, v37, v38);
        return;
      }
    }
    else
    {
      if (PixelFormatType == 1751411059) {
        goto LABEL_60;
      }
      if (PixelFormatType != 1919365990)
      {
        int v12 = 1932996149;
        goto LABEL_24;
      }
    }
    goto LABEL_64;
  }
  if ((int)PixelFormatType > 1380411456)
  {
    if (PixelFormatType == 1380411457)
    {
      if (a5) {
        int v40 = 0x7FFFFFFF;
      }
      else {
        int v40 = 3;
      }
      size_t v36 = this;
      float v37 = a3;
      float v38 = a4;
      int v39 = v6;
      goto LABEL_61;
    }
    if (PixelFormatType == 1647392359) {
      goto LABEL_25;
    }
    if (PixelFormatType != 1717855600) {
      goto LABEL_80;
    }
LABEL_64:
    CGFloat v31 = this;
    float v32 = a3;
    float v33 = a4;
    int v34 = v6;
    int v30 = 0x7FFFFFFF;
    goto LABEL_65;
  }
  if (PixelFormatType == 1380401729)
  {
LABEL_68:
    if (a5) {
      int v35 = 0x7FFFFFFF;
    }
    else {
      int v35 = 3;
    }
    goto LABEL_71;
  }
  if (PixelFormatType != 1380410945) {
    goto LABEL_80;
  }
  if (a5) {
    int v30 = 0x7FFFFFFF;
  }
  else {
    int v30 = 3;
  }
  CGFloat v31 = this;
  float v32 = a3;
  float v33 = a4;
  int v34 = v6;
LABEL_65:

  scaleColorsRawInPlace<float>(v31, v34, v30, v32, v33);
}

void sub_247F01650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t scaleColorsRawInPlace<float>(__CVBuffer *a1, int a2, int a3, float a4, float a5)
{
  CVPixelBufferLockBaseAddress(a1, 0);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  int v30 = a1;
  size_t PlaneCount = CVPixelBufferGetPlaneCount(a1);
  size_t v11 = PlaneCount;
  uint64_t v12 = 0;
  unsigned int v13 = 0;
  if (PlaneCount <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = PlaneCount;
  }
  unint64_t v28 = v14;
  uint64_t v15 = (CGRect *)MEMORY[0x263F001A8];
  do
  {
    if (v11)
    {
      PixelBufferUtils::asVImageBuffer(v30, (__CVBuffer *)v12, *v15, &v31);
    }
    else
    {
      PixelBufferUtils::asVImageBuffer(v30, *v15, &v31);
      uint64_t v12 = 0;
    }
    data = (float *)v31.data;
    vImagePixelCount height = v31.height;
    vImagePixelCount width = v31.width;
    size_t rowBytes = v31.rowBytes;
    unint64_t v20 = PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, v12);
    if (height)
    {
      uint64_t v21 = 0;
      vImagePixelCount v22 = width * v20;
      do
      {
        if (v22)
        {
          for (unint64_t i = 0; i != v22; ++i)
          {
            if (i % v20 != a3)
            {
              float v24 = data[i];
              float v25 = (float)(v24 + a5) * a4;
              float v26 = a5 + (float)(v24 * a4);
              if (!a2) {
                float v26 = v25;
              }
              data[i] = v26;
            }
          }
        }
        ++v21;
        data = (float *)((char *)data + rowBytes);
      }
      while (v21 != height);
    }
    uint64_t v12 = ++v13;
  }
  while (v28 > v13);

  return CVPixelBufferUnlockBaseAddress(v30, 0);
}

uint64_t scaleColorsRawInPlace<half>(__CVBuffer *a1, int a2, int a3, float a4, float a5)
{
  CVPixelBufferLockBaseAddress(a1, 0);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  size_t v36 = a1;
  size_t PlaneCount = CVPixelBufferGetPlaneCount(a1);
  size_t v11 = PlaneCount;
  uint64_t v12 = 0;
  unsigned int v13 = 0;
  if (PlaneCount <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = PlaneCount;
  }
  unint64_t v34 = v14;
  uint64_t v15 = (CGRect *)MEMORY[0x263F001A8];
  do
  {
    if (v11)
    {
      PixelBufferUtils::asVImageBuffer(v36, (__CVBuffer *)v12, *v15, &v37);
    }
    else
    {
      PixelBufferUtils::asVImageBuffer(v36, *v15, &v37);
      uint64_t v12 = 0;
    }
    data = (char *)v37.data;
    vImagePixelCount height = v37.height;
    vImagePixelCount width = v37.width;
    size_t rowBytes = v37.rowBytes;
    unint64_t v20 = PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, v12);
    if (height)
    {
      uint64_t v21 = 0;
      vImagePixelCount v22 = width * v20;
      do
      {
        if (v22)
        {
          for (unint64_t i = 0; i != v22; ++i)
          {
            if (i % v20 != a3)
            {
              _H0 = *(_WORD *)&data[2 * i];
              __asm { FCVT            S0, H0 }
              float v30 = (float)(_S0 + a5) * a4;
              _S0 = a5 + (float)(_S0 * a4);
              if (!a2) {
                _S0 = v30;
              }
              __asm { FCVT            H0, S0 }
              *(_WORD *)&data[2 * i] = _H0;
            }
          }
        }
        ++v21;
        data += rowBytes;
      }
      while (v21 != height);
    }
    uint64_t v12 = ++v13;
  }
  while (v34 > v13);

  return CVPixelBufferUnlockBaseAddress(v36, 0);
}

uint64_t scaleColorsRawInPlace<unsigned char>(__CVBuffer *a1, int a2, int a3, float a4, float a5)
{
  CVPixelBufferLockBaseAddress(a1, 0);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  float v30 = a1;
  size_t PlaneCount = CVPixelBufferGetPlaneCount(a1);
  size_t v11 = PlaneCount;
  uint64_t v12 = 0;
  unsigned int v13 = 0;
  if (PlaneCount <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = PlaneCount;
  }
  unint64_t v28 = v14;
  uint64_t v15 = (CGRect *)MEMORY[0x263F001A8];
  do
  {
    if (v11)
    {
      PixelBufferUtils::asVImageBuffer(v30, (__CVBuffer *)v12, *v15, &v31);
    }
    else
    {
      PixelBufferUtils::asVImageBuffer(v30, *v15, &v31);
      uint64_t v12 = 0;
    }
    data = v31.data;
    vImagePixelCount height = v31.height;
    vImagePixelCount width = v31.width;
    size_t rowBytes = v31.rowBytes;
    unint64_t v20 = PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, v12);
    if (height)
    {
      uint64_t v22 = 0;
      vImagePixelCount v23 = width * v20;
      do
      {
        if (v23)
        {
          for (unint64_t i = 0; i != v23; ++i)
          {
            if (i % v20 != a3)
            {
              LOBYTE(v21) = data[i];
              float v25 = (float)LODWORD(v21);
              float v26 = (float)(v25 + a5) * a4;
              float v21 = a5 + (float)(v25 * a4);
              if (!a2) {
                float v21 = v26;
              }
              data[i] = (int)v21;
            }
          }
        }
        ++v22;
        data += rowBytes;
      }
      while (v22 != height);
    }
    uint64_t v12 = ++v13;
  }
  while (v28 > v13);

  return CVPixelBufferUnlockBaseAddress(v30, 0);
}

uint64_t PixelBufferUtils::rotationAngleAndMirroringFromExifOrientation(PixelBufferUtils *this, char *a2, BOOL *a3)
{
  switch((int)this)
  {
    case 2:
      uint64_t result = 0;
      char v4 = 1;
      if (a2) {
        goto LABEL_17;
      }
      return result;
    case 3:
      char v4 = 0;
      goto LABEL_8;
    case 4:
      char v4 = 1;
LABEL_8:
      uint64_t result = 180;
      if (!a2) {
        return result;
      }
      goto LABEL_17;
    case 5:
      char v4 = 1;
      goto LABEL_16;
    case 6:
      char v4 = 0;
      goto LABEL_13;
    case 7:
      char v4 = 1;
LABEL_13:
      uint64_t result = 90;
      if (!a2) {
        return result;
      }
      goto LABEL_17;
    case 8:
      char v4 = 0;
LABEL_16:
      uint64_t result = 270;
      if (a2) {
        goto LABEL_17;
      }
      return result;
    default:
      uint64_t result = 0;
      char v4 = 0;
      if (!a2) {
        return result;
      }
LABEL_17:
      *a2 = v4;
      return result;
  }
}

uint64_t PixelBufferUtils::rotationBetweenOrientations(PixelBufferUtils *this, CGImagePropertyOrientation a2, CGImagePropertyOrientation a3)
{
  switch((int)this)
  {
    case 2:
      int v3 = 0;
      int v4 = 1;
      break;
    case 3:
      int v4 = 0;
      goto LABEL_6;
    case 4:
      int v4 = 1;
LABEL_6:
      int v3 = -180;
      break;
    case 5:
      int v4 = 1;
      goto LABEL_12;
    case 6:
      int v4 = 0;
      goto LABEL_10;
    case 7:
      int v4 = 1;
LABEL_10:
      int v3 = -90;
      break;
    case 8:
      int v4 = 0;
LABEL_12:
      int v3 = -270;
      break;
    default:
      int v3 = 0;
      int v4 = 0;
      break;
  }
  int v5 = 0;
  switch(a2)
  {
    case kCGImagePropertyOrientationUpMirrored:
      goto LABEL_19;
    case kCGImagePropertyOrientationDown:
      int v5 = 180;
      if ((v4 & 1) == 0) {
        goto LABEL_27;
      }
      return 0xFFFFFFFFLL;
    case kCGImagePropertyOrientationDownMirrored:
      int v5 = 180;
      if (v4) {
        goto LABEL_27;
      }
      return 0xFFFFFFFFLL;
    case kCGImagePropertyOrientationLeftMirrored:
      int v5 = 270;
LABEL_19:
      if (v4) {
        goto LABEL_27;
      }
      return 0xFFFFFFFFLL;
    case kCGImagePropertyOrientationRight:
      int v5 = 90;
      goto LABEL_22;
    case kCGImagePropertyOrientationRightMirrored:
      int v5 = 90;
      if (v4) {
        goto LABEL_27;
      }
      return 0xFFFFFFFFLL;
    case kCGImagePropertyOrientationLeft:
      int v5 = 270;
      if ((v4 & 1) == 0) {
        goto LABEL_27;
      }
      return 0xFFFFFFFFLL;
    default:
LABEL_22:
      if (v4) {
        return 0xFFFFFFFFLL;
      }
LABEL_27:
      unsigned int v7 = v5 + v3;
      unsigned int v8 = v5 + v3 + 360;
      if (v7 <= 0xFFFFFE97) {
        uint64_t result = v7;
      }
      else {
        uint64_t result = v8;
      }
      if ((int)result > 179)
      {
        if (result == 180)
        {
          return 2;
        }
        else
        {
          if (result != 270) {
            return 0xFFFFFFFFLL;
          }
          return 1;
        }
      }
      else if (result)
      {
        if (result == 90) {
          return 3;
        }
        return 0xFFFFFFFFLL;
      }
      return result;
  }
}

__CVBuffer *PixelBufferUtils::savePlyFromDepthBuffer(__CVBuffer *this, __CVBuffer *a2, const char *a3, float a4, CGPoint a5, float a6, float a7, float a8)
{
  if (this)
  {
    unsigned int v8 = this;
    CVPixelBufferGetWidth(this);
    CVPixelBufferGetHeight(v8);
    CVPixelBufferLockBaseAddress(v8, 1uLL);
    CVPixelBufferGetBytesPerRow(v8);
    CVPixelBufferGetBaseAddress(v8);
    operator new[]();
  }
  return this;
}

uint64_t PixelBufferUtils::addTextToPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, const char *a3, CGPoint a4)
{
  v36[3] = *MEMORY[0x263EF8340];
  if (!this || !a2)
  {
    NSLog(&cfstr_SDErrorCannotA_0.isa, a2, a3, a4.x, a4.y, "addTextToPixelBuffer", 3998);
    return 0;
  }
  double y = a4.y;
  double x = a4.x;
  OSType PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
  unint64_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  size_t v12 = Height;
  if (PixelFormatType != 32 && PixelFormatType != 1111970369)
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v34 >= 0) {
      unsigned int v16 = __p;
    }
    else {
      unsigned int v16 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "addTextToPixelBuffer", 4008, PixelFormatType, v16);
    if (v34 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  double v13 = (double)Height;
  if (x > (double)Width || y > v13)
  {
    NSLog(&cfstr_SDErrorCannotA_1.isa, "addTextToPixelBuffer", 4014);
    return 0;
  }
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CVPixelBufferLockBaseAddress(this, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(this);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(this);
  unint64_t v20 = CGBitmapContextCreate(BaseAddress, Width, v12, 8uLL, BytesPerRow, DeviceRGB, 6u);
  long long v21 = *(_OWORD *)(MEMORY[0x263F000D0] + 16);
  *(_OWORD *)&v32.a = *MEMORY[0x263F000D0];
  *(_OWORD *)&v32.c = v21;
  *(_OWORD *)&v32.tdouble x = *(_OWORD *)(MEMORY[0x263F000D0] + 32);
  CGContextSetTextMatrix(v20, &v32);
  CGContextSetTextDrawingMode(v20, kCGTextFill);
  CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
  CGColorRef v23 = CGColorCreateGenericRGB(0.0, 0.0, 0.0, 0.0);
  CTFontRef v24 = CTFontCreateWithName(@"Courier", (double)(unint64_t)a3, 0);
  {
    {
      uint64_t v31 = *MEMORY[0x263F03C60];
      v35[0] = *MEMORY[0x263F039A0];
      v35[1] = v31;
      v36[0] = v24;
      v36[1] = GenericRGB;
      v35[2] = *MEMORY[0x263F03988];
      v36[2] = v23;
      PixelBufferUtils::addTextToPixelBuffer(__CVBuffer *,char const*,unsigned long,CGPoint)::stringAttributes = [NSDictionary dictionaryWithObjects:v36 forKeys:v35 count:3];
    }
  }
  id v25 = objc_alloc(MEMORY[0x263F086A0]);
  float v26 = [NSString stringWithUTF8String:a2];
  CFAttributedStringRef v27 = (const __CFAttributedString *)[v25 initWithString:v26 attributes:PixelBufferUtils::addTextToPixelBuffer(__CVBuffer *,char const*,unsigned long,CGPoint)::stringAttributes];

  unint64_t v28 = CTLineCreateWithAttributedString(v27);
  float v29 = x;
  float v30 = v13 - y;
  CGContextSetTextPosition(v20, v29, v30);
  CTLineDraw(v28, v20);
  CVPixelBufferUnlockBaseAddress(this, 0);
  CFRelease(DeviceRGB);
  CGContextRelease(v20);
  CFRelease(GenericRGB);
  CFRelease(v23);
  CFRelease(v24);

  return 1;
}

void sub_247F024F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

uint64_t PixelBufferUtilsSession::PixelBufferUtilsSession(uint64_t a1, int a2, OSType a3, uint64_t a4, int a5, double a6, double a7, double a8, double a9, CGFloat a10, CGFloat a11, CGFloat a12, CGFloat a13)
{
  double v16 = a13;
  double v17 = a12;
  double v18 = a11;
  double v19 = a10;
  *(void *)a1 = 0;
  *(void *)(a1 + 16) = 0;
  *(double *)(a1 + 24) = a6;
  *(double *)(a1 + 32) = a7;
  *(_DWORD *)(a1 + 40) = a2;
  *(void *)(a1 + 8) = 0;
  float v26 = (CFTypeRef *)(a1 + 8);
  *(double *)(a1 + 48) = a8;
  *(double *)(a1 + 56) = a9;
  *(_DWORD *)(a1 + 64) = a3;
  *(CGFloat *)(a1 + 72) = a10;
  *(CGFloat *)(a1 + 80) = a11;
  *(CGFloat *)(a1 + 88) = a12;
  *(CGFloat *)(a1 + 96) = a13;
  *(_DWORD *)(a1 + 104) = a4;
  *(_DWORD *)(a1 + 108) = a5;
  v41.origin.double x = a10;
  v41.origin.double y = a11;
  v41.size.vImagePixelCount width = a12;
  v41.size.vImagePixelCount height = a13;
  if (CGRectIsEmpty(v41))
  {
    double v19 = 0.0;
    double v18 = 0.0;
    double v17 = a6;
    double v16 = a7;
  }
  if (a2 != a3 || a6 != a8 || a7 != a9)
  {
    BOOL v27 = (a5 | a4) == 0;
    goto LABEL_11;
  }
  BOOL v27 = (a5 | a4) == 0;
  if (v17 != a6 || v16 != a7)
  {
LABEL_11:
    if (!isVtTransferSupportFormat(a2) || (isVtTransferSupportFormat(a3) & 1) == 0)
    {
      NSLog(&cfstr_SDErrorTransfe.isa, "PixelBufferUtilsSession", 4145);
      return a1;
    }
    int v28 = 1;
    if (v27) {
      goto LABEL_24;
    }
    goto LABEL_14;
  }
  int v28 = 0;
  if (!(a5 | a4)) {
    goto LABEL_24;
  }
LABEL_14:
  if ((isVtRotateSupportFormat(a3) & 1) == 0)
  {
    NSLog(&cfstr_SDErrorRotatio.isa, "PixelBufferUtilsSession", 4151);
    return a1;
  }
  if (!v28) {
    goto LABEL_26;
  }
  double v29 = (double)(unint64_t)a8;
  if ((a4 & 0xFFFFFFFD) == 1) {
    double v30 = a9;
  }
  else {
    double v30 = a8;
  }
  if ((a4 & 0xFFFFFFFD) != 1) {
    double v29 = a9;
  }
  size_t v31 = (unint64_t)v30;
  size_t v32 = (unint64_t)v29;
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  CVReturn v35 = CVPixelBufferCreate(v33, v31, v32, a3, BufferAttributes, &pixelBufferOut);
  CVPixelBufferRef v36 = pixelBufferOut;
  if (v35) {
    CVPixelBufferRef v36 = 0;
  }
  *(void *)a1 = v36;
  if (!v36)
  {
    NSLog(&cfstr_SDErrorFailedA.isa, "PixelBufferUtilsSession", 4175);
    return a1;
  }
LABEL_24:
  v42.origin.double x = v19;
  v42.origin.double y = v18;
  v42.size.vImagePixelCount width = v17;
  v42.size.vImagePixelCount height = v16;
  VTTransferSessiouint64_t n = createVTTransferSession(v42, *MEMORY[0x263F001A8]);
  *float v26 = VTTransferSession;
  if (!VTTransferSession)
  {
    CVPixelBufferRelease(*(CVPixelBufferRef *)a1);
    *(void *)a1 = 0;
    return a1;
  }
  if (!v27)
  {
LABEL_26:
    VTRotationSessiouint64_t n = createVTRotationSession(a4, a5);
    *(void *)(a1 + 16) = VTRotationSession;
    if (!VTRotationSession)
    {
      CVPixelBufferRelease(*(CVPixelBufferRef *)a1);
      *(void *)a1 = 0;
      destroyVTTransferSession(v26);
    }
  }
  return a1;
}

void destroyVTTransferSession(CFTypeRef *a1)
{
  OSType v2 = (OpaqueVTPixelTransferSession *)*a1;
  if (v2)
  {
    VTPixelTransferSessionInvalidate(v2);
    CFRelease(*a1);
  }
  *a1 = 0;
}

void PixelBufferUtilsSession::~PixelBufferUtilsSession(PixelBufferUtilsSession *this)
{
  *(void *)this = 0;
  if (*((void *)this + 2))
  {
    MEMORY[0x24C570400]();
    CFRelease(*((CFTypeRef *)this + 2));
  }
  *((void *)this + 2) = 0;
  destroyVTTransferSession((CFTypeRef *)this + 1);
}

CVPixelBufferRef PixelBufferUtilsSession::createOutputPixelBuffer(PixelBufferUtilsSession *this)
{
  OSType v1 = *((_DWORD *)this + 16);
  size_t v2 = (unint64_t)*((double *)this + 6);
  size_t v3 = (unint64_t)*((double *)this + 7);
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v4, v2, v3, v1, BufferAttributes, &pixelBufferOut)) {
    return 0;
  }
  else {
    return pixelBufferOut;
  }
}

__CVBuffer *PixelBufferUtilsSession::verifyInput(PixelBufferUtilsSession *this, __CVBuffer *a2)
{
  return verifyPixelBufferSizeAndFormat(a2, *(CGSize *)((char *)this + 24), *((_DWORD *)this + 10));
}

__CVBuffer *verifyPixelBufferSizeAndFormat(__CVBuffer *result, CGSize a2, int a3)
{
  if (result)
  {
    double height = a2.height;
    int v5 = result;
    if (a2.width == (double)CVPixelBufferGetWidth(result) && height == (double)CVPixelBufferGetHeight(v5)) {
      return (__CVBuffer *)(CVPixelBufferGetPixelFormatType(v5) == a3);
    }
    else {
      return 0;
    }
  }
  return result;
}

__CVBuffer *PixelBufferUtilsSession::verifyOutput(PixelBufferUtilsSession *this, __CVBuffer *a2)
{
  return verifyPixelBufferSizeAndFormat(a2, *((CGSize *)this + 3), *((_DWORD *)this + 16));
}

BOOL PixelBufferUtilsSession::setScalingMode(uint64_t a1, int a2)
{
  size_t v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    if (a2 == 1)
    {
      CFStringRef v3 = (const __CFString *)*MEMORY[0x263F1EA08];
      CFAllocatorRef v4 = (CFTypeRef *)MEMORY[0x263F1EC70];
      return VTSessionSetProperty(v2, v3, *v4) == 0;
    }
    if (!a2)
    {
      CFStringRef v3 = (const __CFString *)*MEMORY[0x263F1EA08];
      CFAllocatorRef v4 = (CFTypeRef *)MEMORY[0x263F1EC78];
      return VTSessionSetProperty(v2, v3, *v4) == 0;
    }
    NSLog(&cfstr_SDErrorUnknown.isa, "setScalingMode", 4249);
  }
  else
  {
    NSLog(&cfstr_SDErrorSession.isa, "setScalingMode", 4239);
  }
  return 0;
}

uint64_t PixelBufferUtilsSession::setHardwareAcceleration(PixelBufferUtilsSession *this, int a2)
{
  CFAllocatorRef v4 = (const void *)*((void *)this + 1);
  uint64_t v5 = MEMORY[0x263EFFB40];
  uint64_t v6 = MEMORY[0x263EFFB38];
  if (v4)
  {
    unsigned int v7 = (CFTypeRef *)(a2 ? MEMORY[0x263EFFB40] : MEMORY[0x263EFFB38]);
    if (VTSessionSetProperty(v4, (CFStringRef)*MEMORY[0x263F1E9F0], *v7))
    {
      NSLog(&cfstr_SDErrorFailedS.isa, "setHardwareAcceleration", 4265);
      return 0;
    }
  }
  unsigned int v8 = (const void *)*((void *)this + 2);
  if (v8)
  {
    uint64_t v9 = (CFTypeRef *)(a2 ? v5 : v6);
    if (VTSessionSetProperty(v8, (CFStringRef)*MEMORY[0x263F1E980], *v9))
    {
      NSLog(&cfstr_SDErrorFailedS_0.isa, "setHardwareAcceleration", 4277);
      return 0;
    }
  }
  return 1;
}

uint64_t PixelBufferUtilsSession::run(PixelBufferUtilsSession *this, __CVBuffer *a2, __CVBuffer *a3)
{
  if (!verifyPixelBufferSizeAndFormat(a2, *(CGSize *)((char *)this + 24), *((_DWORD *)this + 10))
    || (verifyPixelBufferSizeAndFormat(a3, *((CGSize *)this + 3), *((_DWORD *)this + 16)) & 1) == 0)
  {
    NSLog(&cfstr_SDErrorProvide.isa, "run", 4295);
    return 0;
  }
  uint64_t v6 = (OpaqueVTPixelTransferSession *)*((void *)this + 1);
  if (*(void *)this) {
    unsigned int v7 = *(__CVBuffer **)this;
  }
  else {
    unsigned int v7 = a2;
  }
  if (!v6)
  {
    uint64_t v13 = *((void *)this + 2);
    if (!v13 || !MEMORY[0x24C570410](v13, v7, a3)) {
      return 1;
    }
LABEL_18:
    NSLog(&cfstr_SDErrorRotatio_0.isa, "run", 4339);
    return 0;
  }
  if (*(void *)this) {
    unsigned int v8 = *(__CVBuffer **)this;
  }
  else {
    unsigned int v8 = a3;
  }
  OSStatus v9 = VTPixelTransferSessionTransferImage(v6, a2, v8);
  uint64_t v10 = *((void *)this + 2);
  if (v10)
  {
    int v11 = MEMORY[0x24C570410](v10, v7, a3);
    if (!v9)
    {
      if (!v11) {
        return 1;
      }
      goto LABEL_18;
    }
LABEL_20:
    NSLog(&cfstr_SDErrorPixelTr.isa, "run", 4333);
    return 0;
  }
  if (v9) {
    goto LABEL_20;
  }
  return 1;
}

uint64_t PixelBufferUtilsSession::updateCrop(PixelBufferUtilsSession *this, CGRect a2)
{
  if (!*((void *)this + 1))
  {
    NSLog(&cfstr_SDErrorCannotU.isa, a2.origin.x, a2.origin.y, a2.size.width, a2.size.height, "updateCrop", 4351);
    return 0;
  }
  CGFloat height = a2.size.height;
  CGFloat width = a2.size.width;
  CGFloat y = a2.origin.y;
  CGFloat x = a2.origin.x;
  if (CGRectEqualToRect(a2, *(CGRect *)((char *)this + 72))) {
    return 1;
  }
  v14.origin.CGFloat x = x;
  v14.origin.CGFloat y = y;
  v14.size.CGFloat width = width;
  v14.size.CGFloat height = height;
  if (CGRectIsEmpty(v14))
  {
    CFDictionaryRef DictionaryRepresentation = 0;
  }
  else
  {
    v15.origin.CGFloat x = x;
    v15.origin.CGFloat y = y;
    v15.size.CGFloat width = width;
    v15.size.CGFloat height = height;
    CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v15);
  }
  OSStatus v9 = VTSessionSetProperty(*((VTSessionRef *)this + 1), (CFStringRef)*MEMORY[0x263F1EA10], DictionaryRepresentation);
  if (DictionaryRepresentation) {
    CFRelease(DictionaryRepresentation);
  }
  if (v9)
  {
    NSLog(&cfstr_SDErrorPixelbu.isa, v10, v11, v12, v13, "updateCrop", 4373);
    return 0;
  }
  *((CGFloat *)this + 9) = x;
  *((CGFloat *)this + 10) = y;
  uint64_t result = 1;
  *((CGFloat *)this + 11) = width;
  *((CGFloat *)this + 12) = height;
  return result;
}

void PixelBufferUtilsSession::createCropScaleConvertRotateSession(PixelBufferUtilsSession *this, CGSize a2, CGSize a3, CGRect a4)
{
}

void sub_247F02E3C(_Unwind_Exception *a1)
{
  MEMORY[0x24C570740](v1, 0x1020C403F2F7F0DLL);
  _Unwind_Resume(a1);
}

void PixelBufferUtilsSession::createCropScaleConvertSession(PixelBufferUtilsSession *this, CGSize a2, CGSize a3, CGRect a4)
{
}

void PixelBufferUtilsSession::createScaleConvertSession(PixelBufferUtilsSession *this, CGSize a2, CGSize a3)
{
}

uint64_t PixelBufferUtilsSession::copySession(PixelBufferUtilsSession *this, PixelBufferUtilsSession *a2)
{
  if (this) {
    operator new();
  }
  NSLog(&cfstr_SDErrorCannotC.isa, a2, "copySession", 4420);
  return 0;
}

void sub_247F02F3C(_Unwind_Exception *a1)
{
  MEMORY[0x24C570740](v1, 0x1020C403F2F7F0DLL);
  _Unwind_Resume(a1);
}

uint64_t PixelBufferUtilsTiledView::TileConfig::TileConfig(uint64_t this)
{
  *(unsigned char *)(this + 8) = 0;
  *(void *)this = 0;
  return this;
}

{
  *(unsigned char *)(this + 8) = 0;
  *(void *)this = 0;
  return this;
}

uint64_t PixelBufferUtilsTiledView::TileConfig::TileConfig(uint64_t this, char a2, float a3, float a4)
{
  *(float *)this = a4;
  *(float *)(this + 4) = a3;
  *(unsigned char *)(this + 8) = a2;
  return this;
}

{
  *(float *)this = a4;
  *(float *)(this + 4) = a3;
  *(unsigned char *)(this + 8) = a2;
  return this;
}

int32x2_t PixelBufferUtilsTiledView::TileConfig::TileConfig(PixelBufferUtilsTiledView::TileConfig *this, int32x2_t *a2)
{
  __int8 v2 = a2[1].i8[0];
  int32x2_t result = vrev64_s32(*a2);
  *(int32x2_t *)this = result;
  *((unsigned char *)this + 8) = v2;
  return result;
}

{
  __int8 v2;
  int32x2_t result;

  __int8 v2 = a2[1].i8[0];
  int32x2_t result = vrev64_s32(*a2);
  *(int32x2_t *)this = result;
  *((unsigned char *)this + 8) = v2;
  return result;
}

void PixelBufferUtilsTiledView::createTiledView(PixelBufferUtilsTiledView *this, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, PixelBufferUtilsTiledView::TileConfig *a6)
{
}

PixelBufferUtils *PixelBufferUtilsTiledView::render(PixelBufferUtilsTiledView *this, __CVBuffer **a2, uint64_t a3, __CVBuffer *a4, __CVBuffer *a5, unint64_t a6)
{
  uint64_t v6 = *((void *)this + 2);
  uint64_t v7 = *((void *)this + 4);
  if (v7 * v6 != a3)
  {
    NSLog(&cfstr_SDErrorUnableT.isa, a2, "render", 4480);
    return 0;
  }
  uint64_t v10 = *((void *)this + 5);
  if (v10) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = ((unint64_t)a5 | a6) == 0;
  }
  if (!v11)
  {
    NSLog(&cfstr_SDErrorUnableT_0.isa, a2, "render", 4486);
    return 0;
  }
  CGRect v14 = (const __CFAllocator **)MEMORY[0x263EFFB08];
  CGRect v15 = (CGRect *)MEMORY[0x263F001A8];
  if (a4)
  {
    data = (__CVBuffer *)*((void *)this + 6);
    if (!data)
    {
      size_t v17 = *((void *)this + 1);
      size_t v18 = *((void *)this + 3);
      pixelBufferOut.data = 0;
      CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
      if (CVPixelBufferCreate(v19, v17, v18, 0x42475241u, BufferAttributes, (CVPixelBufferRef *)&pixelBufferOut)) {
        data = 0;
      }
      else {
        data = (__CVBuffer *)pixelBufferOut.data;
      }
      *((void *)this + 6) = data;
    }
    PixelBufferUtils::scaleConvertRotatePixelBuffer(a4, 0, data, *v15, 0, 0, (__CVBuffer **)1);
    uint64_t v6 = *((void *)this + 2);
    uint64_t v7 = *((void *)this + 4);
    uint64_t v10 = *((void *)this + 5);
  }
  __s = (char *)a6;
  size_t v21 = v6 * *((void *)this + 1);
  size_t v22 = v10 + v7 * *((void *)this + 3);
  pixelBufferOut.data = 0;
  CFAllocatorRef v23 = *v14;
  CFDictionaryRef v24 = (const __CFDictionary *)getBufferAttributes();
  CFAllocatorRef v67 = v23;
  unint64_t v61 = v21;
  if (CVPixelBufferCreate(v23, v21, v22, 0x42475241u, v24, (CVPixelBufferRef *)&pixelBufferOut)) {
    id v25 = 0;
  }
  else {
    id v25 = (__CVBuffer *)pixelBufferOut.data;
  }
  CVPixelBufferLockBaseAddress(v25, 0);
  memset(&pixelBufferOut, 0, sizeof(pixelBufferOut));
  float v63 = v25;
  PixelBufferUtils::asVImageBuffer(v25, *v15, &pixelBufferOut);
  unint64_t v26 = *((void *)this + 5);
  if (v26 && pixelBufferOut.rowBytes * v26 >= 4) {
    memset_pattern16(pixelBufferOut.data, &unk_247F246B0, (pixelBufferOut.rowBytes * v26) & 0xFFFFFFFFFFFFFFFCLL);
  }
  double v27 = (double)v26 * 0.15;
  size_t v62 = (char *)((double)v26 * 0.8);
  uint64_t v28 = *((void *)this + 2);
  uint64_t v29 = *((void *)this + 4);
  if (v29 * v28)
  {
    unint64_t v30 = 0;
    unsigned int v31 = 1;
    size_t v66 = (char *)pixelBufferOut.data;
    size_t rowBytes = pixelBufferOut.rowBytes;
    do
    {
      CFAllocatorRef v33 = a2[v30];
      if (v33)
      {
        size_t Width = CVPixelBufferGetWidth(a2[v30]);
        size_t Height = CVPixelBufferGetHeight(v33);
        unint64_t v36 = *((void *)this + 2);
        size_t v37 = *((void *)this + 3);
        size_t v38 = *((void *)this + 1);
        unint64_t v39 = v30 / v36;
        size_t v40 = v30 % v36 * v38;
        size_t v41 = *((void *)this + 5) + v39 * v37;
        float v42 = (float)v37;
        float v43 = (float)Height;
        float v44 = (float)v37 / (float)Height;
        float v45 = (float)v38;
        float v46 = (float)Width;
        float v47 = (float)v38 / (float)Width;
        if (v44 != v47)
        {
          if (v44 < v47)
          {
            v40 += (v38 - (unint64_t)(float)((float)(v46 / v43) * v45)) >> 1;
            size_t v38 = (unint64_t)(float)((float)(v46 / v43) * v45);
          }
          else
          {
            v41 += (v37 - (unint64_t)(float)((float)(v43 / v46) * v42)) >> 1;
            size_t v37 = (unint64_t)(float)((float)(v43 / v46) * v42);
          }
        }
        CVPixelBufferRef texture = 0;
        CVPixelBufferCreateWithBytes(v67, v38, v37, 0x42475241u, &v66[4 * v40 + rowBytes * v41], rowBytes, 0, 0, 0, &texture);
        uint64_t v48 = *(void *)this + 12 * v30;
        int v49 = *(unsigned __int8 *)(v48 + 8);
        float v50 = *(float *)v48;
        float v51 = *(float *)(v48 + 4);
        OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v33);
        v72.CGFloat width = (double)v38;
        v72.CGFloat height = (double)v37;
        CroppedAndScaledPixelBuffer = PixelBufferUtils::createCroppedAndScaledPixelBuffer(v33, 0, *v15, v72);
        size_t v55 = CroppedAndScaledPixelBuffer;
        if (PixelFormatType == 1717855600 || PixelFormatType == 1751411059 || PixelFormatType == 1751410032)
        {
          int v56 = PixelBufferUtils::colorizedDepthPixelBuffer(CroppedAndScaledPixelBuffer, 0, v49 != 0, v51, v50, 0, texture, v54);
          if (v49
            && !v56
            && (PixelBufferUtils::alphaBlend(*((PixelBufferUtils **)this + 6), texture, &texture, 0.5, (__CVBuffer **)1) & 1) == 0)
          {
            NSLog(&cfstr_SDErrorFailedC.isa, "render", 4582);
          }
        }
        else
        {
          PixelBufferUtils::convertPixelBufferFormat(CroppedAndScaledPixelBuffer, texture, 0);
        }
        CVPixelBufferRelease(v55);
        CVPixelBufferRelease(texture);
        uint64_t v28 = *((void *)this + 2);
        uint64_t v29 = *((void *)this + 4);
      }
      unint64_t v30 = v31;
    }
    while (v29 * v28 > (unint64_t)v31++);
  }
  unint64_t v58 = (unint64_t)v27;
  unsigned int v59 = v63;
  if (a5)
  {
    v70.CGFloat x = (double)v58;
    v70.CGFloat y = (double)(*((void *)this + 5) - v58);
    PixelBufferUtils::addTextToPixelBuffer(v63, a5, v62, v70);
  }
  if (__s)
  {
    v71.CGFloat x = (double)v61 + (double)(strlen(__s) * (unint64_t)v62) * -0.6 - (double)v58;
    v71.CGFloat y = (double)(*((void *)this + 5) - v58);
    PixelBufferUtils::addTextToPixelBuffer(v63, (__CVBuffer *)__s, v62, v71);
  }
  CVPixelBufferUnlockBaseAddress(v63, 0);
  return v59;
}

void PixelBufferUtilsTiledView::~PixelBufferUtilsTiledView(CVPixelBufferRef *this)
{
  if (*this) {
    MEMORY[0x24C570720](*this, 0x1000C8005A209FELL);
  }
}

void sub_247F036F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F03920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F039D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F03AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, const void *);
  ScopedCFObject<__CFData *>::~ScopedCFObject((const void **)va);
  ScopedCFObject<CGImage *>::~ScopedCFObject((const void **)va1);

  _Unwind_Resume(a1);
}

const void **ScopedCFObject<CGImageDestination *>::~ScopedCFObject(const void **a1)
{
  __int8 v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

const void **ScopedCFObject<__CFData *>::~ScopedCFObject(const void **a1)
{
  __int8 v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

const void **ScopedCFObject<CGImage *>::~ScopedCFObject(const void **a1)
{
  __int8 v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

void sub_247F03F10(_Unwind_Exception *a1)
{
  MEMORY[0x24C570720](v2, 0x1000C8052888210);
  MEMORY[0x24C570720](v1, 0x1000C80451B5BE8);
  _Unwind_Resume(a1);
}

void sub_247F04060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F04148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_247F041EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_247F0426C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_247F04318(_Unwind_Exception *exception_object)
{
}

void sub_247F04370(_Unwind_Exception *exception_object)
{
}

void sub_247F043F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_247F04480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_247F0469C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void *std::vector<appledepth::JasperPointCloud const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61) {
      std::vector<Element *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = 8 * a2;
    uint64_t v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * a2];
    bzero(v5, 8 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_247F04768(_Unwind_Exception *exception_object)
{
  CFStringRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_247F047D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F04918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F049F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F0526C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_247F05584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F05720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F057B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F0593C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F05A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F05C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_247F05D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F05F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F0602C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F063E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_247F064F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F06580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F073C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v3);

  _Unwind_Resume(a1);
}

void sub_247F07598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F076D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F077C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F07910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F08028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_247F08F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)ADReprojection;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_247F09024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ADDebugUtils::setVerboseLogsEnabled(ADDebugUtils *this)
{
  int v1 = (int)this;
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109120;
    v2[1] = v1;
    _os_log_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "setting verboseLogs: %d", (uint8_t *)v2, 8u);
  }
  ADDebugUtilsADVerboseLogsEnabled = v1;
}

uint64_t ADDebugUtils::isVerboseLogsEnabled(ADDebugUtils *this)
{
  return ADDebugUtilsADVerboseLogsEnabled;
}

uint64_t debugQuickLookObjectFromCGImage(CGImage *a1)
{
  Class v2 = NSClassFromString(&cfstr_Uiimage.isa);
  SEL v3 = NSSelectorFromString(&cfstr_Imagewithcgima.isa);
  uint64_t v4 = (uint64_t (*)(Class, SEL, CGImage *))[(objc_class *)v2 methodForSelector:v3];

  return v4(v2, v3, a1);
}

void sub_247F093D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  for (uint64_t i = 32; i != -8; i -= 8)
  _Unwind_Resume(a1);
}

void sub_247F09638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double ADCommonUtils::calcRotationAngle(ADCommonUtils *this, simd_float3x3 *a2)
{
  float v3 = *((float *)this + 6);
  float v4 = *((float *)this + 10);
  float v7 = atan2f(v3, v4);
  float v6 = atan2f(-*((float *)this + 2), sqrtf((float)(v4 * v4) + (float)(v3 * v3)));
  atan2f(*((float *)this + 1), *(float *)this);
  return COERCE_DOUBLE(__PAIR64__(LODWORD(v6), LODWORD(v7)));
}

void ADCommonUtils::calcRotationAngle(ADCommonUtils *this@<X0>, _OWORD *a2@<X8>)
{
  long double v5 = *((double *)this + 6);
  long double v6 = *((double *)this + 10);
  long double v11 = atan2(v5, v6);
  __CGFloat x = *(_OWORD *)this;
  long double v10 = atan2(-*((double *)this + 2), sqrt(v6 * v6 + v5 * v5));
  *(double *)&long long v7 = atan2(*((long double *)&__x + 1), *(long double *)&__x);
  *(long double *)&long long v8 = v11;
  *((long double *)&v8 + 1) = v10;
  *a2 = v8;
  a2[1] = v7;
}

__n128 ADCommonUtils::extrinsicsFromRotationTranslation(uint64_t a1)
{
  return *(__n128 *)a1;
}

__n128 ADCommonUtils::rotationFromExtrinsics(ADCommonUtils *this, const simd_float4x3 *a2)
{
  return *(__n128 *)this;
}

__n128 ADCommonUtils::translationFromExtrinsics(__n128 *this, const simd_float4x3 *a2)
{
  return this[3];
}

__n128 ADCommonUtils::matrixFromArrayColumnFirst(ADCommonUtils *this, NSArray *a2)
{
  Class v2 = this;
  double v27 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:0];
  [v27 floatValue];
  unsigned int v28 = v3;
  unint64_t v26 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:1];
  [v26 floatValue];
  unsigned int v20 = v4;
  id v25 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:2];
  [v25 floatValue];
  unsigned int v19 = v5;
  CFDictionaryRef v24 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:3];
  [v24 floatValue];
  unsigned int v18 = v6;
  CFAllocatorRef v23 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:4];
  [v23 floatValue];
  size_t v22 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:5];
  [v22 floatValue];
  size_t v21 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:6];
  [v21 floatValue];
  long long v7 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:7];
  [v7 floatValue];
  long long v8 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:8];
  [v8 floatValue];
  OSStatus v9 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:9];
  [v9 floatValue];
  long double v10 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:10];
  [v10 floatValue];
  long double v11 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:11];
  [v11 floatValue];
  double v12 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:12];
  [v12 floatValue];
  double v13 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:13];
  [v13 floatValue];
  CGRect v14 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:14];
  [v14 floatValue];
  CGRect v15 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:15];
  [v15 floatValue];
  *(void *)&long long v16 = __PAIR64__(v20, v28);
  *((void *)&v16 + 1) = __PAIR64__(v18, v19);
  long long v29 = v16;

  return (__n128)v29;
}

void sub_247F09AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,void *a34)
{
  *(void *)(v44 - 112) = a1;

  _Unwind_Resume(*(_Unwind_Exception **)(v44 - 112));
}

void sub_247F09B48(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09AF4);
}

void sub_247F09B50(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09AF8);
}

void sub_247F09B58(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09AFCLL);
}

void sub_247F09B60(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09B00);
}

void sub_247F09B68(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09B04);
}

void sub_247F09B70(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09B0CLL);
}

void sub_247F09B78(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09B14);
}

void sub_247F09B80(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09B1CLL);
}

void sub_247F09B88(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09B24);
}

void sub_247F09B90(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09B2CLL);
}

void sub_247F09B98(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09B34);
}

__n128 ADCommonUtils::matrixFromArrayRowFirst(ADCommonUtils *this, NSArray *a2)
{
  Class v2 = this;
  double v27 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:0];
  [v27 floatValue];
  unsigned int v28 = v3;
  unint64_t v26 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:4];
  [v26 floatValue];
  unsigned int v20 = v4;
  id v25 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:8];
  [v25 floatValue];
  unsigned int v19 = v5;
  CFDictionaryRef v24 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:12];
  [v24 floatValue];
  unsigned int v18 = v6;
  CFAllocatorRef v23 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:1];
  [v23 floatValue];
  size_t v22 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:5];
  [v22 floatValue];
  size_t v21 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:9];
  [v21 floatValue];
  long long v7 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:13];
  [v7 floatValue];
  long long v8 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:2];
  [v8 floatValue];
  OSStatus v9 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:6];
  [v9 floatValue];
  long double v10 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:10];
  [v10 floatValue];
  long double v11 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:14];
  [v11 floatValue];
  double v12 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:3];
  [v12 floatValue];
  double v13 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:7];
  [v13 floatValue];
  CGRect v14 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:11];
  [v14 floatValue];
  CGRect v15 = [(ADCommonUtils *)v2 objectAtIndexedSubscript:15];
  [v15 floatValue];
  *(void *)&long long v16 = __PAIR64__(v20, v28);
  *((void *)&v16 + 1) = __PAIR64__(v18, v19);
  long long v29 = v16;

  return (__n128)v29;
}

void sub_247F09E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,void *a34)
{
  *(void *)(v44 - 112) = a1;

  _Unwind_Resume(*(_Unwind_Exception **)(v44 - 112));
}

void sub_247F09F1C(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09EC8);
}

void sub_247F09F24(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09ECCLL);
}

void sub_247F09F2C(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09ED0);
}

void sub_247F09F34(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09ED4);
}

void sub_247F09F3C(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09ED8);
}

void sub_247F09F44(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09EE0);
}

void sub_247F09F4C(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09EE8);
}

void sub_247F09F54(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09EF0);
}

void sub_247F09F5C(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09EF8);
}

void sub_247F09F64(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09F00);
}

void sub_247F09F6C(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  JUMPOUT(0x247F09F08);
}

double ADCommonUtils::extrinsicsFromFile(ADCommonUtils *this, const char *a2)
{
  *(void *)&double result = ADCommonUtils::extrinsics4x4FromFile(this, a2).n128_u64[0];
  return result;
}

__n128 ADCommonUtils::extrinsics4x4FromFile(ADCommonUtils *this, const char *a2)
{
  Class v2 = [NSString stringWithUTF8String:this];
  unsigned int v3 = [v2 lowercaseString];
  int v4 = [v3 hasSuffix:@".json"];

  if (v4)
  {
    id v20 = 0;
    id v5 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v2 options:1 error:&v20];
    id v6 = v20;
    if (v6)
    {
      long long v7 = v6;
      long long v8 = [v6 description];
      NSLog(&cfstr_FailedLoadingE.isa, v8);
LABEL_8:

      long long v18 = 0u;
      goto LABEL_9;
    }
    id v19 = 0;
    long long v8 = [MEMORY[0x263F08900] JSONObjectWithData:v5 options:4 error:&v19];
    id v12 = v19;
    long long v7 = v12;
    if (v12)
    {
      double v13 = [v12 description];
      NSLog(&cfstr_FailedLoadingE.isa, v13);

      goto LABEL_8;
    }
    for (unint64_t i = 0; i < [v8 count]; ++i)
    {
      long long v16 = [v8 objectAtIndexedSubscript:i];
      [v16 floatValue];
      *((_DWORD *)v21 + i) = v17;
    }
  }
  else
  {
    id v5 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v2];
    OSStatus v9 = (_OWORD *)[v5 bytes];
    long long v10 = v9[1];
    v21[0] = *v9;
    v21[1] = v10;
    long long v11 = v9[3];
    v21[2] = v9[2];
    v21[3] = v11;
  }

  long long v18 = v21[0];
LABEL_9:

  return (__n128)v18;
}

void sub_247F0A168(_Unwind_Exception *a1)
{
  id v6 = v5;

  _Unwind_Resume(a1);
}

uint64_t ADCommonUtils::extrinsicsToFile(ADCommonUtils *this, const char *a2, simd_float4x4 a3)
{
  a3.columns[0].i32[3] = 0;
  a3.columns[1].i32[3] = 0;
  a3.columns[2].i32[3] = 0;
  a3.columns[3].i32[3] = 1.0;
  return ADCommonUtils::extrinsicsToFile(this, a2, a3);
}

{
  void *v3;
  void *v4;
  int v5;
  void *v6;
  double v7;
  uint64_t i;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v16;
  id v17;
  simd_float4x4 v18;

  long long v18 = a3;
  unsigned int v3 = [NSString stringWithUTF8String:this];
  int v4 = [v3 lowercaseString];
  id v5 = [v4 hasSuffix:@".json"];

  if (v5)
  {
    id v6 = objc_opt_new();
    for (unint64_t i = 0; i != 16; ++i)
    {
      LODWORD(v7) = v18.columns[0].i32[i];
      OSStatus v9 = [NSNumber numberWithFloat:v7];
      [v6 setObject:v9 atIndexedSubscript:i];
    }
    int v17 = 0;
    long long v10 = [MEMORY[0x263F08900] dataWithJSONObject:v6 options:1 error:&v17];
    long long v11 = v17;
    id v12 = v11;
    if (v11)
    {
      double v13 = [v11 description];
      NSLog(&cfstr_FailedWritingE.isa, v13);
    }
    CGRect v14 = [v10 writeToFile:v3 atomically:1];
  }
  else
  {
    id v6 = [MEMORY[0x263EFF8F8] dataWithBytes:&v18 length:64];
    long long v16 = 0;
    CGRect v14 = [v6 writeToFile:v3 options:1 error:&v16];
    id v12 = v16;
  }

  return v14;
}

void sub_247F0A380(_Unwind_Exception *a1)
{
  id v6 = v4;

  _Unwind_Resume(a1);
}

double ADCommonUtils::rotateSize(uint64_t a1, double a2, double a3)
{
  if ((a1 | 2) != 3) {
    return a2;
  }
  return a3;
}

uint64_t ADCommonUtils::reverseRotation(uint64_t a1)
{
  uint64_t v1 = 3;
  if (a1 != 1) {
    uint64_t v1 = a1;
  }
  if (a1 == 3) {
    return 1;
  }
  else {
    return v1;
  }
}

double ADCommonUtils::matrixForImageRotation(uint64_t a1)
{
  float v1 = 0.0;
  if ((unint64_t)(a1 - 1) <= 2) {
    float v1 = flt_247F263BC[a1 - 1];
  }
  __float2 v2 = __sincosf_stret(v1);
  *(float *)&double v3 = v2.__cosval;
  *((float *)&v3 + 1) = -v2.__sinval;
  return v3;
}

double ADCommonUtils::inverseTransform(ADCommonUtils *this, simd_float4x4 a2)
{
  *(void *)&double result = vzip1q_s32(vzip1q_s32((int32x4_t)a2.columns[0], (int32x4_t)a2.columns[2]), (int32x4_t)a2.columns[1]).u64[0];
  return result;
}

double ADCommonUtils::inverseTransform(ADCommonUtils *this, simd_float4x3 a2)
{
  *(void *)&double result = vzip1q_s32((int32x4_t)a2.columns[0], (int32x4_t)a2.columns[1]).u64[0];
  return result;
}

double ADCommonUtils::computeTransform(ADCommonUtils *this, simd_float4x3 a2, simd_float4x3 a3)
{
  uint64_t v3 = 0;
  a3.columns[2].i32[3] = 0;
  float32x4_t v4 = (float32x4_t)vzip1q_s32((int32x4_t)a2.columns[0], (int32x4_t)a2.columns[1]);
  v4.i32[2] = a2.columns[2].i32[0];
  float32x4_t v5 = (float32x4_t)vzip2q_s32((int32x4_t)a2.columns[0], (int32x4_t)a2.columns[1]);
  v5.i32[2] = a2.columns[2].i32[2];
  float32x4_t v6 = (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)a2.columns[0], (int32x4_t)a2.columns[2]), vdupq_lane_s32(*(int32x2_t *)a2.columns[1].f32, 1));
  _DWORD v8[2] = a3.columns[2];
  do
  {
    *(long long *)((char *)&v9 + v3 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, COERCE_FLOAT(v8[v3])), v6, *(float32x2_t *)&v8[v3], 1), v5, (float32x4_t)v8[v3], 2);
    ++v3;
  }
  while (v3 != 3);
  return *(double *)&v9;
}

float ADCommonUtils::calculatePoseDistance(ADCommonUtils *this, simd_float4x4 a2, simd_float4x4 a3)
{
  unint64_t v3 = 0;
  int32x4_t v4 = vzip1q_s32((int32x4_t)a2.columns[1], (int32x4_t)0);
  int32x4_t v5 = vdupq_laneq_s32((int32x4_t)a2.columns[1], 2);
  float32x4_t v6 = (float32x4_t)vzip1q_s32((int32x4_t)a2.columns[0], (int32x4_t)a2.columns[1]);
  v6.i32[2] = a2.columns[2].i32[0];
  int32x4_t v7 = vdupq_lane_s32(*(int32x2_t *)a2.columns[1].f32, 0);
  float32x4_t v8 = (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)a2.columns[0], (int32x4_t)a2.columns[2]), v4);
  a2.columns[1] = (simd_float4)vzip2q_s32((int32x4_t)a2.columns[0], (int32x4_t)a2.columns[1]);
  a2.columns[1].i32[2] = a2.columns[2].i32[2];
  int32x4_t v9 = vzip2q_s32((int32x4_t)a3.columns[0], (int32x4_t)a3.columns[2]);
  float32x4_t v10 = (float32x4_t)vzip1q_s32((int32x4_t)a3.columns[0], (int32x4_t)a3.columns[1]);
  v10.i32[2] = a3.columns[2].i32[0];
  float32x4_t v11 = (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)a3.columns[0], (int32x4_t)a3.columns[2]), vdupq_lane_s32(*(int32x2_t *)a3.columns[1].f32, 1));
  a3.columns[0] = (simd_float4)vzip2q_s32((int32x4_t)a3.columns[0], (int32x4_t)a3.columns[1]);
  a3.columns[0].i32[2] = a3.columns[2].i32[2];
  a3.columns[2] = (simd_float4)vzip1q_s32(v9, vdupq_laneq_s32((int32x4_t)a3.columns[1], 2));
  a3.columns[1] = (simd_float4)vzip2q_s32(vzip1q_s32(v7, v5), v4);
  v17[2] = a3.columns[2];
  do
  {
    *(float32x4_t *)&v18[v3 / 4] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)a2.columns[0], COERCE_FLOAT(v17[v3 / 0x10])), (float32x4_t)a3.columns[1], *(float32x2_t *)&v17[v3 / 0x10], 1), (float32x4_t)a2.columns[2], (float32x4_t)v17[v3 / 0x10], 2);
    v3 += 16;
  }
  while (v3 != 48);
  float32x4_t v12 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, a2.columns[3].f32[0]), v8, *(float32x2_t *)a2.columns[3].f32, 1), (float32x4_t)a2.columns[1], (float32x4_t)a2.columns[3], 2);
  double v13 = 3.0 - v18[0] - v18[5] - v18[10];
  *(float *)&double v13 = (v13 + v13) / 3.0;
  float32x4_t v14 = vmulq_f32(vsubq_f32(v12, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, a3.columns[3].f32[0]), v11, *(float32x2_t *)a3.columns[3].f32, 1), (float32x4_t)a3.columns[0], (float32x4_t)a3.columns[3], 2)), (float32x4_t)vdupq_n_s32(0x3A83126Fu));
  float32x4_t v15 = vmulq_f32(v14, v14);
  return vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0]+ *(float *)&v13;
}

void ADCommonUtils::extrinsicsToString(simd_float4x3 a1@<0:Q0, 16:Q1, 32:Q2, 48:Q3>, void *a2@<X8>)
{
  id v4 = [NSString stringWithFormat:@"R:[%.4f, %.4f, %.4f],[%.4f, %.4f, %.4f],[%.4f, %.4f, %.4f]. T:[%.4f, %.4f, %.4f]\n", a1.columns[0].f32[0], a1.columns[0].f32[1], a1.columns[0].f32[2], a1.columns[1].f32[0], a1.columns[1].f32[1], a1.columns[1].f32[2], a1.columns[2].f32[0], a1.columns[2].f32[1], a1.columns[2].f32[2], a1.columns[3].f32[0], a1.columns[3].f32[1], a1.columns[3].f32[2]];
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v4 UTF8String]);
}

void sub_247F0A7AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ADCommonUtils::extrinsicsToString(simd_float4x4 a1@<0:Q0, 16:Q1, 32:Q2, 48:Q3>, void *a2@<X8>)
{
  id v4 = [NSString stringWithFormat:@"R:[%.4f, %.4f, %.4f, %.4f],[%.4f, %.4f, %.4f, %.4f],[%.4f, %.4f, %.4f, %.4f]. T:[%.4f, %.4f, %.4f, %.4f]\n", a1.columns[0].f32[0], a1.columns[0].f32[1], a1.columns[0].f32[2], a1.columns[0].f32[3], a1.columns[1].f32[0], a1.columns[1].f32[1], a1.columns[1].f32[2], a1.columns[1].f32[3], a1.columns[2].f32[0], a1.columns[2].f32[1], a1.columns[2].f32[2], a1.columns[2].f32[3], a1.columns[3].f32[0], a1.columns[3].f32[1], a1.columns[3].f32[2], a1.columns[3].f32[3]];
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v4 UTF8String]);
}

void sub_247F0A8BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ADCommonUtils::intrinsicsToString(simd_float3x3 a1@<0:Q0, 16:Q1, 32:Q2>, void *a2@<X8>)
{
  objc_msgSend(NSString, "stringWithFormat:", @"eflx:%.3f efly:%.3f ppx:%.3f ppy:%.3f\n", a1.columns[0].f32[0], a1.columns[1].f32[1], a1.columns[2].f32[0], a1.columns[2].f32[1]);
  id v4 = objc_claimAutoreleasedReturnValue();
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v4 UTF8String]);
}

void sub_247F0A95C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ADCommonUtils::hashArray(ADCommonUtils *this, NSArray *a2)
{
  __float2 v2 = this;
  uint64_t v3 = [(ADCommonUtils *)v2 hash];
  for (uint64_t i = 1; i - 1 < (unint64_t)[(ADCommonUtils *)v2 count]; ++i)
  {
    int32x4_t v5 = -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:");
    v3 ^= [v5 hash] * i;
  }
  return v3;
}

void sub_247F0A9EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CGFloat ADCommonUtils::computeMaximalRoi(ADCommonUtils *this, CGSize a2, CGSize a3)
{
  double width = a2.height / (a3.height / a3.width);
  if (a2.width < width) {
    double width = a2.width;
  }
  return (a2.width - width) * 0.5;
}

Float64 ADCommonUtils::machTimeToSeconds(ADCommonUtils *this)
{
  memset(&v3, 0, sizeof(v3));
  CMClockMakeHostTimeFromSystemUnits(&v3, (uint64_t)this);
  CMTime v2 = v3;
  return CMTimeGetSeconds(&v2);
}

uint64_t ADCommonUtils::runtimePlatformHasANE(ADCommonUtils *this)
{
  return [MEMORY[0x263F28048] hasANE];
}

void ADCommonUtils::runtimePlatformANEVersionString(void *a1@<X8>)
{
  if ([MEMORY[0x263F28048] hasANE])
  {
    id v4 = [MEMORY[0x263F28048] aneSubType];
    id v3 = [v4 uppercaseString];
    std::string::basic_string[abi:ne180100]<0>(a1, (char *)[v3 UTF8String]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
}

void sub_247F0AB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ADCommonUtils::runtimePlatformANEProductString(void *a1@<X8>)
{
  if ([MEMORY[0x263F28048] hasANE])
  {
    id v3 = NSString;
    id v8 = [MEMORY[0x263F28048] aneSubType];
    id v4 = [MEMORY[0x263F28048] aneSubTypeVariant];
    int32x4_t v5 = [MEMORY[0x263F28048] aneSubTypeProductVariant];
    float32x4_t v6 = [v3 stringWithFormat:@"%@%@%@", v8, v4, v5];
    id v7 = [v6 uppercaseString];
    std::string::basic_string[abi:ne180100]<0>(a1, (char *)[v7 UTF8String]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
}

void sub_247F0AC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

uint64_t ADCommonUtils::runtimePlatformANEVersionNumber(ADCommonUtils *this)
{
  ADCommonUtils::runtimePlatformANEVersionString(v4);
  if (v5 < 0)
  {
    CMTime v2 = (void *)v4[0];
    if (v4[1]) {
      uint64_t v1 = atoi((const char *)(v4[0] + 1));
    }
    else {
      uint64_t v1 = 0xFFFFFFFFLL;
    }
    operator delete(v2);
  }
  else if (v5)
  {
    return atoi((const char *)v4 + 1);
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void ADCommonUtils::espressoEngineAsString(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(a1)
  {
    case 0:
      id v3 = "CPU";
      goto LABEL_7;
    case 1:
      id v3 = "METAL";
      goto LABEL_7;
    case 2:
      id v3 = "MPS";
      goto LABEL_7;
    case 3:
      id v3 = "ANERuntimeDirect";
      goto LABEL_7;
    case 4:
      id v3 = "ANERuntime";
LABEL_7:
      std::string::basic_string[abi:ne180100]<0>(a2, v3);
      break;
    default:
      id v5 = [NSNumber numberWithUnsignedInteger:a1];
      id v4 = [v5 stringValue];
      std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v4 UTF8String]);

      break;
  }
}

void sub_247F0AE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ADCommonUtils::runtimePlatformANEEnforceModelChecksDisabled(ADCommonUtils *this)
{
  return [MEMORY[0x263F28048] precompiledModelChecksDisabled];
}

void sub_247F0B064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,PixelBufferSharedPtr>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,PixelBufferSharedPtr>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,PixelBufferSharedPtr>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,PixelBufferSharedPtr>>>::~__hash_table(uint64_t a1)
{
  CMTime v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,PixelBufferSharedPtr>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      CMTime v2 = v3;
    }
    while (v3);
  }
  id v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,PixelBufferSharedPtr>,0>(uint64_t a1)
{
  PixelBufferSharedPtr::~PixelBufferSharedPtr((CVPixelBufferRef *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    CMTime v2 = *(void **)a1;
    operator delete(v2);
  }
}

void PixelBufferSharedPtr::~PixelBufferSharedPtr(CVPixelBufferRef *this)
{
  *this = (CVPixelBufferRef)&unk_26FC22A18;
  CVPixelBufferRelease(this[1]);
}

{
  uint64_t vars8;

  PixelBufferSharedPtr::~PixelBufferSharedPtr(this);

  JUMPOUT(0x24C570740);
}

void sub_247F0B2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADEspressoRunnerV1;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_247F0BB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table((uint64_t)va1);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  objc_sync_exit(v4);

  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = (char *)operator new(0xD0uLL);
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v8;
  uint64_t v15 = (std::string *)(v13 + 16);
  long long v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v17 = *v16;
    *((void *)v13 + 4) = *((void *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  long long v18 = a1 + 2;
  *((void *)v13 + 25) = 0;
  *(_OWORD *)(v13 + 184) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 136) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  float v19 = (float)(unint64_t)(a1[3] + 1);
  float v20 = *((float *)a1 + 8);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = a1[1];
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          id v25 = operator new(8 * *(void *)&prime);
          unint64_t v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          unsigned int v28 = (void *)*v18;
          if (*v18)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v29) = v18;
            char v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*a1 + 8 * v35))
                  {
                    *(void *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  void *v28 = *v34;
                  void *v34 = **(void **)(*a1 + 8 * v35);
                  **(void **)(*a1 + 8 * v35) = v34;
                  char v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_58:
                unsigned int v28 = v34;
                char v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        size_t v40 = (void *)*a1;
        *a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v36 = *a1;
  size_t v37 = *(void **)(*a1 + 8 * v3);
  if (v37)
  {
    *(void *)uint64_t v13 = *v37;
LABEL_75:
    *size_t v37 = v13;
    goto LABEL_76;
  }
  *(void *)uint64_t v13 = *v18;
  *long long v18 = v13;
  *(void *)(v36 + 8 * v3) = v18;
  if (*(void *)v13)
  {
    unint64_t v38 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    size_t v37 = (void *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return v13;
}

void sub_247F0BFC4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,espresso_buffer_t>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table(uint64_t a1)
{
  CMTime v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      CMTime v2 = v3;
    }
    while (v3);
  }
  id v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  unint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = v1 < 0;
  if (v1 >= 0) {
    id v4 = (uint64_t *)a1;
  }
  else {
    id v4 = *(uint64_t **)a1;
  }
  if (!v3) {
    unint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      unint64_t v34 = 0x9DDFEA08EB382D69;
      uint64_t v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      uint64_t v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      uint64_t v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      uint64_t v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      uint64_t v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      uint64_t v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      unint64_t v50 = v46 + v48;
      unint64_t v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      unint64_t v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      unint64_t v53 = v47 + v2 + v46 + v44;
      uint64_t v54 = v53 + v43;
      unint64_t v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      uint64_t v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v57 = v56 + v45 + v48;
      uint64_t v58 = __ROR8__(v57, 44);
      uint64_t v59 = v57 + v49;
      uint64_t v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      uint64_t v62 = *v4;
      unint64_t v61 = v4 + 4;
      unint64_t v63 = v62 - 0x4B6D499041670D8DLL * v43;
      uint64_t v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v65 = *(v61 - 3);
        uint64_t v66 = v63 + v54 + v50 + v65;
        uint64_t v67 = v61[2];
        uint64_t v68 = v61[3];
        uint64_t v69 = v61[1];
        unint64_t v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        uint64_t v70 = v52 + v59;
        uint64_t v71 = *(v61 - 2);
        uint64_t v72 = *(v61 - 1);
        uint64_t v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        uint64_t v74 = v73 + v59 + v72;
        uint64_t v75 = v73 + v65 + v71;
        uint64_t v54 = v75 + v72;
        uint64_t v76 = __ROR8__(v75, 44) + v73;
        unint64_t v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        unint64_t v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        unint64_t v55 = v76 + __ROR8__(v74 + v77, 21);
        unint64_t v78 = v63 + v60 + *v61;
        uint64_t v59 = v78 + v69 + v67 + v68;
        uint64_t v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        unint64_t v52 = v77;
        v64 += 64;
      }
      while (v64);
      unint64_t v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      unint64_t v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      unint64_t v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      unint64_t v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      unint64_t v9 = (char *)v4 + v2;
      uint64_t v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v12 = v4[1];
      uint64_t v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      long long v16 = v4 + 2;
      uint64_t v14 = v4[2];
      uint64_t v15 = v16[1];
      uint64_t v17 = __ROR8__(v13 + v15, 52);
      uint64_t v18 = __ROR8__(v13, 37);
      uint64_t v19 = v13 + v12;
      uint64_t v20 = __ROR8__(v19, 7);
      uint64_t v21 = v19 + v14;
      uint64_t v22 = v20 + v18;
      uint64_t v23 = *((void *)v9 - 4) + v14;
      uint64_t v24 = v11 + v15;
      uint64_t v25 = __ROR8__(v24 + v23, 52);
      uint64_t v26 = v22 + v17;
      uint64_t v27 = __ROR8__(v23, 37);
      uint64_t v28 = *((void *)v9 - 3) + v23;
      uint64_t v29 = __ROR8__(v28, 7);
      uint64_t v30 = v26 + __ROR8__(v21, 31);
      uint64_t v31 = v28 + v10;
      uint64_t v32 = v31 + v24;
      uint64_t v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      unint64_t v34 = 0x9AE16A3B2F90404FLL;
      unint64_t v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      uint64_t v36 = v4[1];
      unint64_t v37 = 0xB492B66FBE98F273 * *v4;
      unint64_t v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      unint64_t v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      unint64_t v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      uint64_t v5 = *v4;
      uint64_t v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      int v82 = *(_DWORD *)v4;
      uint64_t v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      unint64_t v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      unint64_t v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    unint64_t result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      unint64_t v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,espresso_buffer_t>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_247F0CA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_247F0D2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  objc_sync_exit(v21);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,PixelBufferSharedPtr>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,PixelBufferSharedPtr>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,PixelBufferSharedPtr>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,PixelBufferSharedPtr>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    BOOL v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  long long v16 = operator new(0x38uLL);
  v40[0] = v16;
  v40[1] = a1 + 16;
  char v41 = 0;
  *long long v16 = 0;
  v16[1] = v8;
  uint64_t v17 = *a3;
  long long v18 = **a3;
  void v16[4] = *((void *)*a3 + 2);
  *((_OWORD *)v16 + 1) = v18;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0;
  *(void *)uint64_t v17 = 0;
  v16[5] = &unk_26FC22A18;
  v16[6] = 0;
  CVPixelBufferRetain(0);
  char v41 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v25 = operator new(8 * *(void *)&prime);
          uint64_t v26 = *(void **)a1;
          *(void *)a1 = v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          uint64_t v28 = (void *)*v15;
          if (*v15)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v29) = v15;
            unint64_t v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v35))
                  {
                    *(void *)(*(void *)a1 + 8 * v35) = v28;
                    goto LABEL_55;
                  }
                  void *v28 = *v34;
                  void *v34 = **(void **)(*(void *)a1 + 8 * v35);
                  **(void **)(*(void *)a1 + 8 * v35) = v34;
                  unint64_t v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_55:
                uint64_t v28 = v34;
                unint64_t v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v39 = *(void **)a1;
        *(void *)a1 = 0;
        if (v39) {
          operator delete(v39);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v36 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v40[0];
  if (v36)
  {
    *(void *)v40[0] = *v36;
LABEL_72:
    *uint64_t v36 = i;
    goto LABEL_73;
  }
  *(void *)v40[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v37 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9) {
        v37 %= v9;
      }
    }
    else
    {
      v37 &= v9 - 1;
    }
    uint64_t v36 = (unsigned __int8 **)(*(void *)a1 + 8 * v37);
    goto LABEL_72;
  }
LABEL_73:
  v40[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,PixelBufferSharedPtr>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,PixelBufferSharedPtr>,void *>>>>::reset[abi:ne180100]((uint64_t)v40);
  return i;
}

void sub_247F0D7C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,PixelBufferSharedPtr>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,PixelBufferSharedPtr>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,PixelBufferSharedPtr>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,PixelBufferSharedPtr>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,PixelBufferSharedPtr>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,PixelBufferSharedPtr>>>::__erase_unique<std::string>(uint64_t *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (v5)
  {
    unint64_t v6 = v4;
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    unint64_t v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v9 = v4;
      if (v4 >= *(void *)&v5) {
        unint64_t v9 = v4 % *(void *)&v5;
      }
    }
    else
    {
      unint64_t v9 = (*(void *)&v5 - 1) & v4;
    }
    uint64_t v10 = *a1;
    unint64_t v11 = *(unsigned __int8 ***)(*a1 + 8 * v9);
    if (v11)
    {
      BOOL v12 = *v11;
      if (*v11)
      {
        uint64_t v13 = *(void *)&v5 - 1;
        do
        {
          unint64_t v14 = *((void *)v12 + 1);
          if (v14 == v6)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100](v12 + 16, a2))
            {
              if (v8 > 1)
              {
                if (v6 >= *(void *)&v5) {
                  v6 %= *(void *)&v5;
                }
              }
              else
              {
                v6 &= v13;
              }
              uint64_t v15 = *(unsigned __int8 **)(v10 + 8 * v6);
              do
              {
                long long v16 = (uint64_t *)v15;
                uint64_t v15 = *(unsigned __int8 **)v15;
              }
              while (v15 != v12);
              if (v16 == a1 + 2) {
                goto LABEL_36;
              }
              unint64_t v17 = v16[1];
              if (v8 > 1)
              {
                if (v17 >= *(void *)&v5) {
                  v17 %= *(void *)&v5;
                }
              }
              else
              {
                v17 &= v13;
              }
              if (v17 != v6)
              {
LABEL_36:
                if (!*(void *)v12) {
                  goto LABEL_37;
                }
                unint64_t v18 = *(void *)(*(void *)v12 + 8);
                if (v8 > 1)
                {
                  if (v18 >= *(void *)&v5) {
                    v18 %= *(void *)&v5;
                  }
                }
                else
                {
                  v18 &= v13;
                }
                if (v18 != v6) {
LABEL_37:
                }
                  *(void *)(v10 + 8 * v6) = 0;
              }
              float v19 = *(uint64_t **)v12;
              if (*(void *)v12)
              {
                unint64_t v20 = v19[1];
                if (v8 > 1)
                {
                  if (v20 >= *(void *)&v5) {
                    v20 %= *(void *)&v5;
                  }
                }
                else
                {
                  v20 &= v13;
                }
                if (v20 != v6)
                {
                  *(void *)(*a1 + 8 * v20) = v16;
                  float v19 = *(uint64_t **)v12;
                }
              }
              *long long v16 = (uint64_t)v19;
              *(void *)BOOL v12 = 0;
              --a1[3];
              v21[0] = v12;
              v21[1] = a1 + 2;
              char v22 = 1;
              std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,PixelBufferSharedPtr>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,PixelBufferSharedPtr>,void *>>>>::reset[abi:ne180100]((uint64_t)v21);
              return;
            }
          }
          else
          {
            if (v8 > 1)
            {
              if (v14 >= *(void *)&v5) {
                v14 %= *(void *)&v5;
              }
            }
            else
            {
              v14 &= v13;
            }
            if (v14 != v9) {
              return;
            }
          }
          BOOL v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
    }
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,PixelBufferSharedPtr>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,PixelBufferSharedPtr>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,PixelBufferSharedPtr>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void sub_247F0DBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F0DDE8(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_247F0E734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);

  _Unwind_Resume(a1);
}

void sub_247F0EABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F0EF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,std::runtime_error a45)
{
  std::__tree<std::__value_type<std::string,docopt::value>,std::__map_value_compare<std::string,std::__value_type<std::string,docopt::value>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,docopt::value>>>::destroy(a43);
  _Unwind_Resume(a1);
}

void docopt::DocoptExitHelp::~DocoptExitHelp(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x24C570740);
}

void docopt::DocoptLanguageError::~DocoptLanguageError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x24C570740);
}

void docopt::DocoptArgumentError::~DocoptArgumentError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x24C570740);
}

void sub_247F0F530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_247F0F764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F0FA88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F0FDC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F0FF38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F0FFDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F102F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F10664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F109BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_247F10B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_247F10BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_247F10CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<e5rt_surface_format_t,std::vector<unsigned int>>,std::__unordered_map_hasher<e5rt_surface_format_t,std::__hash_value_type<e5rt_surface_format_t,std::vector<unsigned int>>,std::hash<e5rt_surface_format_t>,std::equal_to<e5rt_surface_format_t>,true>,std::__unordered_map_equal<e5rt_surface_format_t,std::__hash_value_type<e5rt_surface_format_t,std::vector<unsigned int>>,std::equal_to<e5rt_surface_format_t>,std::hash<e5rt_surface_format_t>,true>,std::allocator<std::__hash_value_type<e5rt_surface_format_t,std::vector<unsigned int>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      unint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int8x8_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void sub_247F10E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADEspressoRunnerV2;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_247F11164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_247F11C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

uint64_t dummyOpSizeFunction(const void *a1)
{
  return 8;
}

void dummyOpRelinquishFunction(const void *a1, unint64_t (*a2)(const void *))
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (ADDebugUtilsADVerboseLogsEnabled)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)vImage_Buffer buf = 134217984;
      unint64_t v4 = a1;
      _os_log_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "espresso runner relinquishing dummy stream operation %p", buf, 0xCu);
      if (!a1) {
        return;
      }
      goto LABEL_7;
    }
LABEL_6:
    if (!a1) {
      return;
    }
    goto LABEL_7;
  }
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_6;
  }
  *(_DWORD *)vImage_Buffer buf = 134217984;
  unint64_t v4 = a1;
  _os_log_debug_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "espresso runner relinquishing dummy stream operation %p", buf, 0xCu);
  if (!a1) {
    return;
  }
LABEL_7:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)vImage_Buffer buf = 134217984;
    unint64_t v4 = a1;
    _os_log_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "relinquished dummy op %p", buf, 0xCu);
  }
  e5rt_execution_stream_operation_release();
}

void sub_247F12250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_247F127BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x247F123B0);
  }
  _Unwind_Resume(exception_object);
}

void sub_247F13230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)&a30);

  _Unwind_Resume(a1);
}

void createOperationInputsOutputsDescription(e5rt_execution_stream_operation *a1)
{
}

void sub_247F134FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<e5rt_surface_format_t,std::vector<unsigned int>>,std::__unordered_map_hasher<e5rt_surface_format_t,std::__hash_value_type<e5rt_surface_format_t,std::vector<unsigned int>>,std::hash<e5rt_surface_format_t>,std::equal_to<e5rt_surface_format_t>,true>,std::__unordered_map_equal<e5rt_surface_format_t,std::__hash_value_type<e5rt_surface_format_t,std::vector<unsigned int>>,std::equal_to<e5rt_surface_format_t>,std::hash<e5rt_surface_format_t>,true>,std::allocator<std::__hash_value_type<e5rt_surface_format_t,std::vector<unsigned int>>>>::__emplace_unique_key_args<e5rt_surface_format_t,std::piecewise_construct_t const&,std::tuple<e5rt_surface_format_t&&>,std::tuple<>>(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  BOOL v12 = a1 + 2;
  uint64_t v10 = operator new(0x30uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  void v10[3] = 0;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = a1[1];
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      unint64_t v34 = (void *)*a1;
      *a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  float v19 = operator new(8 * *(void *)&prime);
  unint64_t v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  char v22 = (void *)*v12;
  if (*v12)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v23) = v12;
    uint64_t v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*a1 + 8 * v29))
          {
            *(void *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          void *v22 = *v28;
          void *v28 = **(void **)(*a1 + 8 * v29);
          **(void **)(*a1 + 8 * v29) = v28;
          uint64_t v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        char v22 = v28;
        uint64_t v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_64:
  uint64_t v30 = *a1;
  unint64_t v31 = *(void **)(*a1 + 8 * v6);
  if (v31)
  {
    *uint64_t v10 = *v31;
LABEL_72:
    *unint64_t v31 = v10;
    goto LABEL_73;
  }
  *uint64_t v10 = *v12;
  *BOOL v12 = v10;
  *(void *)(v30 + 8 * v6) = v12;
  if (*v10)
  {
    unint64_t v32 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    unint64_t v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_247F140BC(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<e5rt_surface_format_t,std::vector<unsigned int>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(void *result, char *__src, char *a3, unint64_t a4)
{
  unint64_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 >> 62) {
      std::vector<Element *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t result = operator new(4 * v11);
    unint64_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 4 * v11;
    size_t v12 = a3 - v6;
    if (v12) {
      unint64_t result = memcpy(result, v6, v12);
    }
    float v13 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  float v13 = (void **)(result + 1);
  float v14 = (unsigned char *)result[1];
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
  {
    size_t v12 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    unint64_t v17 = (void *)*result;
LABEL_20:
    unint64_t result = memmove(v17, __src, v12);
    goto LABEL_21;
  }
  unint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    unint64_t result = memmove((void *)*result, __src, v14 - v9);
    unint64_t v9 = (char *)*v13;
  }
  size_t v12 = a3 - v16;
  if (v12)
  {
    unint64_t v17 = v9;
    __vImage_Buffer src = v16;
    goto LABEL_20;
  }
LABEL_21:
  *float v13 = &v9[v12];
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<e5rt_surface_format_t,std::vector<unsigned int>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_247F14350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F143CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F14440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F146CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  docopt::value::~value((void **)va);

  _Unwind_Resume(a1);
}

void sub_247F1480C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F148EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F14AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F14BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F14C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F14CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F14D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F14DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F15008(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    int v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_247F15028(_Unwind_Exception *a1)
{
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<ADLayout,CGSize>,std::__unordered_map_hasher<ADLayout,std::__hash_value_type<ADLayout,CGSize>,std::hash<ADLayout>,std::equal_to<ADLayout>,true>,std::__unordered_map_equal<ADLayout,std::__hash_value_type<ADLayout,CGSize>,std::equal_to<ADLayout>,std::hash<ADLayout>,true>,std::allocator<std::__hash_value_type<ADLayout,CGSize>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      int8x8_t prime = (int8x8_t)v11;
    }
    else {
      int8x8_t prime = (int8x8_t)v10;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_74;
    }
    if (*(void *)&prime >= v6) {
      goto LABEL_43;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      float v13 = operator new(8 * *(void *)&prime);
      float v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0;
      while (*(void *)&prime != v15);
      unint64_t v16 = *(void **)(a1 + 16);
      if (v16)
      {
        unint64_t v17 = v16[1];
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&prime) {
            v17 %= *(void *)&prime;
          }
        }
        else
        {
          v17 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v17) = a1 + 16;
        for (uint64_t i = (void *)*v16; *v16; uint64_t i = (void *)*v16)
        {
          unint64_t v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&prime) {
              v23 %= *(void *)&prime;
            }
          }
          else
          {
            v23 &= *(void *)&prime - 1;
          }
          if (v23 == v17)
          {
            unint64_t v16 = i;
          }
          else
          {
            uint8x8_t v24 = i;
            if (*(void *)(*(void *)a1 + 8 * v23))
            {
              do
              {
                unint64_t v25 = v24;
                uint8x8_t v24 = (void *)*v24;
              }
              while (v24 && i[2] == v24[2]);
              *unint64_t v16 = v24;
              *unint64_t v25 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v16;
              unint64_t v16 = i;
              unint64_t v17 = v23;
            }
          }
        }
      }
      unint64_t v6 = (unint64_t)prime;
    }
    else
    {
      unint64_t v35 = *(void **)a1;
      *(void *)a1 = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    unint64_t v27 = a2;
    if (v6 <= a2) {
      unint64_t v27 = a2 % v6;
    }
  }
  else
  {
    unint64_t v27 = (v6 - 1) & a2;
  }
  uint64_t v28 = *(void **)(*(void *)a1 + 8 * v27);
  if (!v28) {
    return 0;
  }
  int v29 = 0;
  do
  {
    unint64_t result = v28;
    uint64_t v28 = (void *)*v28;
    if (!v28) {
      break;
    }
    unint64_t v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v32 = v28[1];
      if (v31 >= v6) {
        unint64_t v32 = v31 % v6;
      }
    }
    else
    {
      unint64_t v32 = v31 & (v6 - 1);
    }
    if (v32 != v27) {
      break;
    }
    BOOL v33 = v31 == a2 && v28[2] == *a3;
    int v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

void *std::__hash_table<std::__hash_value_type<ADLayout,CGSize>,std::__unordered_map_hasher<ADLayout,std::__hash_value_type<ADLayout,CGSize>,std::hash<ADLayout>,std::equal_to<ADLayout>,true>,std::__unordered_map_equal<ADLayout,std::__hash_value_type<ADLayout,CGSize>,std::equal_to<ADLayout>,std::hash<ADLayout>,true>,std::allocator<std::__hash_value_type<ADLayout,CGSize>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void sub_247F15560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1560C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F156B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t appledepth::JasperPointCloud::points(appledepth::JasperPointCloud *this)
{
  return *((void *)this + 1) + *(void *)(*((void *)this + 1) + 16);
}

uint64_t appledepth::JasperPointCloud::confidences(appledepth::JasperPointCloud *this)
{
  return *((void *)this + 1) + *(void *)(*((void *)this + 1) + 24);
}

uint64_t appledepth::JasperPointCloud::cameraPixels(appledepth::JasperPointCloud *this)
{
  return *((void *)this + 1) + *(void *)(*((void *)this + 1) + 32);
}

uint64_t appledepth::JasperPointCloud::undistortedCameraPixels(appledepth::JasperPointCloud *this)
{
  return *((void *)this + 1) + *(void *)(*((void *)this + 1) + 40);
}

uint64_t appledepth::JasperPointCloud::euclideanDistances(appledepth::JasperPointCloud *this)
{
  return *((void *)this + 1) + *(void *)(*((void *)this + 1) + 48);
}

uint64_t appledepth::JasperPointCloud::intensities(appledepth::JasperPointCloud *this)
{
  return *((void *)this + 1) + *(void *)(*((void *)this + 1) + 56);
}

uint64_t appledepth::JasperPointCloud::signalToNoiseRatios(appledepth::JasperPointCloud *this)
{
  return *((void *)this + 1) + *(void *)(*((void *)this + 1) + 64);
}

uint64_t appledepth::JasperPointCloud::bankIds(appledepth::JasperPointCloud *this)
{
  return *((void *)this + 1) + *(void *)(*((void *)this + 1) + 72);
}

uint64_t appledepth::JasperPointCloud::spotIds(appledepth::JasperPointCloud *this)
{
  return *((void *)this + 1) + *(void *)(*((void *)this + 1) + 80);
}

uint64_t appledepth::JasperPointCloud::echoIds(appledepth::JasperPointCloud *this)
{
  return *((void *)this + 1) + *(void *)(*((void *)this + 1) + 88);
}

uint64_t appledepth::JasperPointCloud::flags(appledepth::JasperPointCloud *this)
{
  return *((void *)this + 1) + *(void *)(*((void *)this + 1) + 96);
}

uint64_t appledepth::JasperPointCloud::additionalDataSize(appledepth::JasperPointCloud *this)
{
  return *(void *)(*((void *)this + 1) + 104);
}

uint64_t appledepth::JasperPointCloud::additionalData(appledepth::JasperPointCloud *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (*(void *)(v1 + 104)) {
    return v1 + *(void *)(v1 + 112);
  }
  else {
    return 0;
  }
}

uint64_t appledepth::JasperPointCloud::requiredStorageBytesForLength(appledepth::JasperPointCloud *this, uint64_t a2)
{
  v5[11] = *MEMORY[0x263EF8340];
  unint64_t v4 = 0;
  calculateOffsetsForLength((uint64_t)this, v5, &v4);
  return v4 + a2;
}

void ___ZL14InitAttributesv_block_invoke()
{
  if (!ATTRIBUTES_INFO) {
    operator new[]();
  }
}

appledepth::JasperPointCloud *appledepth::JasperPointCloud::JasperPointCloud(appledepth::JasperPointCloud *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  if (InitAttributes(void)::once != -1) {
    dispatch_once(&InitAttributes(void)::once, &__block_literal_global_1195);
  }
  return this;
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  if (InitAttributes(void)::once != -1) {
    dispatch_once(&InitAttributes(void)::once, &__block_literal_global_1195);
  }
  return this;
}

_OWORD *appledepth::JasperPointCloud::JasperPointCloud(_OWORD *a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *a1 = v3;
  if (InitAttributes(void)::once != -1) {
    dispatch_once(&InitAttributes(void)::once, &__block_literal_global_1195);
  }
  return a1;
}

{
  long long v3;

  long long v3 = *a2;
  *(void *)a2 = 0;
  *a1 = v3;
  if (InitAttributes(void)::once != -1) {
    dispatch_once(&InitAttributes(void)::once, &__block_literal_global_1195);
  }
  return a1;
}

uint64_t appledepth::JasperPointCloud::reset(appledepth::JasperPointCloud *this)
{
  uint64_t result = *(void *)this;
  *(void *)this = 0;
  if (result) {
    uint64_t result = MEMORY[0x24C570720](result, 0x1000C8077774924);
  }
  *((void *)this + 1) = 0;
  return result;
}

BOOL appledepth::JasperPointCloud::resize(appledepth::JasperPointCloud *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 2);
  if (v2 >= a2) {
    *(void *)(*((void *)this + 1) + 8) = a2;
  }
  return v2 >= a2;
}

void appledepth::JasperPointCloud::blacken(appledepth::JasperPointCloud *this)
{
  unint64_t v2 = (uint64_t *)ATTRIBUTES_INFO;
  for (uint64_t i = 16; i != 104; i += 8)
  {
    uint64_t v4 = *v2;
    v2 += 2;
    bzero((void *)(*((void *)this + 1) + *(void *)(*((void *)this + 1) + i)), *((void *)this + 2) * v4);
  }
  uint64_t v5 = *((void *)this + 1);
  size_t v6 = *(void *)(v5 + 104);
  if (v6) {
    float v7 = (void *)(v5 + *(void *)(v5 + 112));
  }
  else {
    float v7 = 0;
  }

  bzero(v7, v6);
}

uint64_t appledepth::JasperPointCloud::initByMerging(appledepth::JasperPointCloud *this, uint64_t a2, const appledepth::JasperPointCloud **a3)
{
  if (a2)
  {
    uint64_t v5 = 0;
    size_t v6 = a3;
    uint64_t v7 = a2;
    while (1)
    {
      uint64_t v8 = *((void *)*v6 + 1);
      if (v8) {
        uint64_t v8 = *(void *)(v8 + 8);
      }
      v5 += v8;
      ++v6;
      if (!--v7) {
        appledepth::JasperPointCloud::initWithLength(this, v5);
      }
    }
  }
  uint64_t v9 = *(void *)this;
  *(void *)this = 0;
  if (v9) {
    MEMORY[0x24C570720](v9, 0x1000C8077774924, a3);
  }
  *((void *)this + 1) = 0;
  return 0;
}

uint64_t appledepth::JasperPointCloud::replacePoints(appledepth::JasperPointCloud *this, uint64_t a2, uint64_t a3, const appledepth::JasperPointCloud *a4, uint64_t a5)
{
  unint64_t v10 = *((void *)this + 1);
  if (v10) {
    unint64_t v10 = *(void *)(v10 + 8);
  }
  if (a3 + a2 > v10) {
    return 0;
  }
  unint64_t v11 = *((void *)a4 + 1);
  if (v11) {
    unint64_t v11 = *(void *)(v11 + 8);
  }
  if (a5 + a3 > v11) {
    return 0;
  }
  float v13 = (uint64_t *)ATTRIBUTES_INFO;
  for (uint64_t i = 16; i != 104; i += 8)
  {
    uint64_t v15 = *v13;
    v13 += 2;
    memcpy((void *)(*((void *)this + 1) + *(void *)(*((void *)this + 1) + i) + v15 * a2), (const void *)(*((void *)a4 + 1) + *(void *)(*((void *)a4 + 1) + i) + v15 * a5), v15 * a3);
  }
  return 1;
}

uint64_t appledepth::JasperPointCloud::length(appledepth::JasperPointCloud *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return *(void *)(v1 + 8);
  }
  else {
    return 0;
  }
}

void appledepth::JasperPointCloud::initByCloning(appledepth::JasperPointCloud *this, const appledepth::JasperPointCloud *a2)
{
  uint64_t v4 = *(void *)this;
  *(void *)this = 0;
  if (v4) {
    MEMORY[0x24C570720](v4, 0x1000C8077774924);
  }
  *((void *)this + 1) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  appledepth::JasperPointCloud::initWithLength(this, v6);
}

void appledepth::JasperPointCloud::~JasperPointCloud(appledepth::JasperPointCloud *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    MEMORY[0x24C570720](v2, 0x1000C8077774924);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    MEMORY[0x24C570720](v2, 0x1000C8077774924);
  }
}

uint64_t appledepth::JasperPointCloud::capacity(appledepth::JasperPointCloud *this)
{
  return *((void *)this + 2);
}

uint64_t appledepth::JasperPointCloud::getBaseAddress(appledepth::JasperPointCloud *this)
{
  return *((void *)this + 1);
}

uint64_t appledepth::JasperPointCloud::totalSize(appledepth::JasperPointCloud *this)
{
  v5[11] = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *(void *)(*((void *)this + 1) + 104);
  unint64_t v4 = 0;
  calculateOffsetsForLength(v1, v5, &v4);
  return v4 + v2;
}

uint64_t appledepth::JasperPointCloud::merge@<X0>(appledepth::JasperPointCloud *this@<X0>, appledepth::JasperPointCloud **a2@<X1>, appledepth::JasperPointCloud *a3@<X8>)
{
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  if (InitAttributes(void)::once != -1) {
    dispatch_once(&InitAttributes(void)::once, &__block_literal_global_1195);
  }
  return appledepth::JasperPointCloud::initByMerging(a3, (uint64_t)this, a2);
}

void sub_247F15EF0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    MEMORY[0x24C570720](v3, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t appledepth::JasperPointCloud::makeWithDictionaryRepresentation@<X0>(CFDictionaryRef theDict@<X0>, appledepth::JasperPointCloud *a2@<X8>)
{
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  if (InitAttributes(void)::once != -1) {
    dispatch_once(&InitAttributes(void)::once, &__block_literal_global_1195);
  }
  return appledepth::JasperPointCloud::initWithDictionaryRepresentation(a2, theDict);
}

void sub_247F15F78(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    MEMORY[0x24C570720](v3, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t appledepth::JasperPointCloud::initByApplyingFilters(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, float a5, float a6, float a7, float a8, float a9)
{
  unint64_t v10 = *(void **)(a2 + 8);
  unint64_t v11 = v10[1];
  if (v11)
  {
    int v20 = 0;
    unint64_t v21 = 0;
    while (1)
    {
      ValidEchosForPointIndeCGFloat x = getValidEchosForPointIndex((uint64_t)v10 + v10[2], (uint64_t)v10 + v10[3], (uint64_t)v10 + v10[11], (uint64_t)v10 + v10[10], (uint64_t)v10 + v10[9], v21, v11, a3, a5, a8, a9, a4, (uint64_t)v44);
      if (ValidEchosForPointIndex < 0) {
        break;
      }
      if (ValidEchosForPointIndex)
      {
        uint64_t v23 = 0;
        if (ValidEchosForPointIndex >= 3) {
          uint64_t v24 = 3;
        }
        else {
          uint64_t v24 = ValidEchosForPointIndex;
        }
        uint64_t v25 = 4 * v21;
        uint64_t v26 = 16 * v21;
        do
        {
          if (v44[v23])
          {
            uint64_t v27 = *(void *)(a2 + 8) + *(void *)(*(void *)(a2 + 8) + 16);
            float v28 = *(float *)(v27 + v26 + 8);
            if (v28 >= a6 && v28 <= a7)
            {
              *(_OWORD *)(*(void *)(a1 + 8) + *(void *)(*(void *)(a1 + 8) + 16) + 16 * v20) = *(_OWORD *)(v27 + 16 * v21 + 16 * v23);
              uint64_t v30 = *(void *)(a2 + 8);
              uint64_t v31 = *(void *)(v30 + 32);
              uint64_t v32 = *(void *)(a1 + 8);
              uint64_t v33 = *(void *)(v32 + 32);
              *(_DWORD *)(v32 + *(void *)(v32 + 24) + 4 * v20) = *(_DWORD *)(v30
                                                                               + v25
                                                                               + *(void *)(v30 + 24)
                                                                               + 4 * v23);
              *(_OWORD *)(v32 + v33 + 16 * v20) = *(_OWORD *)(v30 + v31 + v26);
              *(_OWORD *)(*(void *)(a1 + 8) + *(void *)(*(void *)(a1 + 8) + 40) + 16 * v20) = *(_OWORD *)(*(void *)(a2 + 8) + *(void *)(*(void *)(a2 + 8) + 40) + v26);
              int v34 = *(void **)(a2 + 8);
              uint64_t v35 = v34[7];
              uint64_t v36 = (char *)v34 + v25 + v34[6];
              unint64_t v37 = *(void **)(a1 + 8);
              uint64_t v38 = v37[7];
              uint64_t v39 = (char *)v37 + v37[6];
              *(_DWORD *)&v39[4 * v20] = *(_DWORD *)&v36[4 * v23];
              *(_DWORD *)&v39[4 * v20] = *(_DWORD *)&v36[4 * v23];
              *(_DWORD *)((char *)v37 + 4 * v20 + v38) = *(_DWORD *)((char *)v34 + 4 * v23 + v25 + v35);
              uint64_t v40 = v34[9];
              uint64_t v41 = v37[9];
              *(_DWORD *)((char *)v37 + 4 * v20 + v37[8]) = *(_DWORD *)((char *)v34 + 4 * v23 + v25 + v34[8]);
              *((unsigned char *)v37 + v41 + v20) = *((unsigned char *)v34 + v21 + v40 + v23);
              *(unsigned char *)(*(void *)(a1 + 8) + *(void *)(*(void *)(a1 + 8) + 80) + v20) = *(unsigned char *)(*(void *)(a2 + 8) + v21 + *(void *)(*(void *)(a2 + 8) + 80) + v23);
              *(unsigned char *)(*(void *)(a1 + 8) + *(void *)(*(void *)(a1 + 8) + 88) + v20) = *(unsigned char *)(*(void *)(a2 + 8) + v21 + *(void *)(*(void *)(a2 + 8) + 88) + v23);
              *(_DWORD *)(*(void *)(a1 + 8) + *(void *)(*(void *)(a1 + 8) + 96) + 4 * v20++) = *(_DWORD *)(*(void *)(a2 + 8) + v25 + *(void *)(*(void *)(a2 + 8) + 96) + 4 * v23);
            }
          }
          ++v23;
          v26 += 16;
        }
        while (v24 != v23);
      }
      v21 += ValidEchosForPointIndex;
      unint64_t v10 = *(void **)(a2 + 8);
      unint64_t v11 = v10[1];
      if (v21 >= v11) {
        goto LABEL_20;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)vImage_Buffer buf = 0;
      _os_log_error_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_ERROR, "bad point cloud format", buf, 2u);
    }
    return -22974;
  }
  else
  {
    int v20 = 0;
LABEL_20:
    uint64_t result = 0;
    *(void *)(*(void *)(a1 + 8) + 8) = v20;
  }
  return result;
}

uint64_t getValidEchosForPointIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, float a9, float a10, float a11, unint64_t a12, uint64_t a13)
{
  unint64_t v13 = 0;
  v40[6] = *MEMORY[0x263EF8340];
  *(unsigned char *)(a13 + 2) = 0;
  *(_WORD *)a13 = 0;
  int v14 = *(unsigned __int8 *)(a4 + a6);
  uint64_t v15 = a5 + a6;
  int v16 = *(unsigned __int8 *)(a5 + a6);
  int v38 = 0;
  uint64_t v37 = 0;
  uint64_t v17 = a1 + 16 * a6;
  while (1)
  {
    if (v16 != *(unsigned __int8 *)(v15 + v13))
    {
      uint64_t result = v13;
LABEL_12:
      if (((1 << v16) & a12) != 0)
      {
        BOOL v20 = a8 != 1;
        int v21 = a8 == 1 ? 1 : 3;
        if (a8 == 5)
        {
          BOOL v20 = 0;
          int v22 = 2;
        }
        else
        {
          int v22 = v21;
        }
        BOOL v23 = a8 && v20;
        int v24 = a8 ? v22 : 0;
        if (result)
        {
          uint64_t v25 = 0;
          uint64_t v26 = (float *)v40;
          uint64_t v27 = (float *)v40;
          do
          {
            if (v23 || v24 == v34[v25])
            {
              BOOL v28 = *v27 > a10 && *((float *)&v37 + v25) >= a9 || *v27 <= a10 && *((float *)&v37 + v25) >= a11;
              *(unsigned char *)(a13 + v25) = v28;
            }
            ++v25;
            v27 += 4;
          }
          while (result != v25);
          uint64_t v29 = 0;
          unint64_t v30 = 0;
          do
            v30 += *(unsigned __int8 *)(a13 + v29++);
          while (result != v29);
          if (v30 > 1)
          {
            if (a8 == 4)
            {
              *(unsigned char *)(a13 + 2) = 0;
              *(_WORD *)a13 = 0;
            }
            else if (a8 == 2)
            {
              uint64_t v31 = 0;
              int v32 = 0;
              float v33 = 1.0e10;
              do
              {
                if (*(unsigned char *)(a13 + v31))
                {
                  if (*v26 < v33)
                  {
                    int v32 = v31;
                    float v33 = *v26;
                  }
                }
                ++v31;
                v26 += 4;
              }
              while (result != v31);
              *(unsigned char *)(a13 + 2) = 0;
              *(_WORD *)a13 = 0;
              *(unsigned char *)(a13 + v32) = 1;
            }
          }
        }
      }
      return result;
    }
    if (a6 + v13 >= a7 || v13 > 2) {
      break;
    }
    *(_OWORD *)&v39[16 * v13] = *(_OWORD *)(v17 + 16 * v13);
    *((_DWORD *)&v37 + v13) = *(_DWORD *)(a2 + 4 * a6 + 4 * v13);
    v34[v13] = *(unsigned char *)(a3 + a6 + v13);
    uint64_t result = v13 + 1;
    int v19 = *(unsigned __int8 *)(a4 + a6 + 1 + v13++);
    if (v14 != v19) {
      goto LABEL_12;
    }
  }
  uint64_t result = v13;
  if (a6 + v13 >= a7) {
    goto LABEL_12;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)vImage_Buffer buf = 67109120;
    int v36 = 3;
    _os_log_error_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Error: Found more than %d echos. this is not supported and may indicate incorrect point cloud format", buf, 8u);
  }
  return 0xFFFFFFFFLL;
}

uint64_t appledepth::JasperPointCloud::projectJasperPoints(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, __CVBuffer *a6, int a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, float a12, float a13, float a14, float a15, float a16)
{
  uint64_t v219 = *MEMORY[0x263EF8340];
  int v210 = 335678764;
  long long v211 = 0u;
  long long v212 = 0u;
  kdebug_trace();
  if (a6)
  {
    pixelBuffer = a6;
    OSType PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a6);
    uint64_t v26 = PixelFormatType;
    if ((int)PixelFormatType <= 1751410031)
    {
      if (PixelFormatType != 1717855600)
      {
        if (PixelFormatType == 1717856627)
        {
          int Width = CVPixelBufferGetWidth(pixelBuffer);
          int Height = CVPixelBufferGetHeight(pixelBuffer);
          unsigned int BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
          uint64_t v30 = *(void *)(a1 + 8);
          uint64_t v31 = *(void *)(v30 + 32);
          uint64_t v32 = *(void *)(v30 + 16);
          v220.origin.CGFloat x = a8;
          v220.origin.CGFloat y = a9;
          v220.size.double width = a10;
          v220.size.CGFloat height = a11;
          IsEmptCGFloat y = CGRectIsEmpty(v220);
          double v34 = (double)Width;
          double v35 = (double)Height;
          if (IsEmpty)
          {
            if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) {
              a10 = (double)Height;
            }
            else {
              a10 = (double)Width;
            }
            if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) {
              a11 = (double)Width;
            }
            else {
              a11 = (double)Height;
            }
            a8 = 0.0;
            a9 = 0.0;
          }
          switch(a2)
          {
            case 0:
            case 2:
              float v36 = v34 / a10;
              double v37 = v35 / a11;
              goto LABEL_53;
            case 1:
            case 3:
              float v36 = v35 / a10;
              double v37 = v34 / a11;
LABEL_53:
              float v72 = v37;
              break;
            default:
              float v36 = 1.0;
              float v72 = 1.0;
              break;
          }
          CVPixelBufferLockBaseAddress(pixelBuffer, 0);
          BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
          if (a7)
          {
            size_t DataSize = CVPixelBufferGetDataSize(pixelBuffer);
            bzero(BaseAddress, DataSize);
          }
          *(_OWORD *)vImage_Buffer buf = 0u;
          long long v214 = 0u;
          int v215 = 1065353216;
          unint64_t v77 = *(void **)(a1 + 8);
          unint64_t v78 = v77[1];
          if (v78)
          {
            unint64_t v79 = 0;
            unsigned int v194 = BytesPerRow >> 2;
            uint64_t v186 = v30 + v32;
            double v80 = v36;
            double v81 = v72;
            float v82 = (float)(unint64_t)(int)(a10 * v80);
            float v83 = (float)(unint64_t)(int)(a11 * v72);
            uint64_t v180 = v30 + v32;
            uint64_t v182 = v31 + v30 + 8;
            while (1)
            {
              ValidEchosForPointIndeCGFloat x = getValidEchosForPointIndex(v186, (uint64_t)v77 + v77[3], (uint64_t)v77 + v77[11], (uint64_t)v77 + v77[10], (uint64_t)v77 + v77[9], v79, v78, a3, a12, a15, a16, a4, (uint64_t)v216);
              if (ValidEchosForPointIndex < 0) {
                goto LABEL_219;
              }
              unsigned int v87 = ValidEchosForPointIndex;
              if (ValidEchosForPointIndex) {
                break;
              }
LABEL_98:
              v79 += v87;
              unint64_t v77 = *(void **)(a1 + 8);
              unint64_t v78 = v77[1];
              if (v79 >= v78) {
                goto LABEL_218;
              }
            }
            if (ValidEchosForPointIndex >= 3) {
              uint64_t v88 = 3;
            }
            else {
              uint64_t v88 = ValidEchosForPointIndex;
            }
            float v89 = (double *)(v182 + 16 * v79);
            uint64_t v90 = v180 + 16 * v79;
            size_t v91 = v216;
            while (1)
            {
              if (!*v91++) {
                goto LABEL_97;
              }
              *(float *)&long long v86 = (*(v89 - 1) - a8) * v80;
              *(float *)&long long v85 = (*v89 - a9) * v81;
              long long v93 = v86;
              DWORD1(v93) = v85;
              DWORD2(v93) = *(_DWORD *)(v90 + 8);
              if (a2 == 1) {
                break;
              }
              if (a2 == 2)
              {
                *(float *)&long long v86 = v82 - *(float *)&v86;
                *((float *)&v86 + 1) = v83 - *(float *)&v85;
                DWORD2(v86) = *(_DWORD *)(v90 + 8);
                long long v93 = v86;
                goto LABEL_79;
              }
              if (a2 == 3)
              {
                *(float *)&long long v85 = v83 - *(float *)&v85;
                *((float *)&v85 + 1) = (*(v89 - 1) - a8) * v80;
LABEL_77:
                DWORD2(v85) = *(_DWORD *)(v90 + 8);
                long long v93 = v85;
              }
LABEL_79:
              float v208 = *((float *)&v93 + 2);
              int v94 = (int)*(float *)&v93;
              if ((int)*(float *)&v93 < Width && (v94 & 0x80000000) == 0)
              {
                HIDWORD(v85) = HIDWORD(v93);
                int v95 = (int)*((float *)&v93 + 1);
                if ((int)*((float *)&v93 + 1) < Height && (v95 & 0x80000000) == 0)
                {
                  HIDWORD(v85) = HIDWORD(v93);
                  if (*((float *)&v93 + 2) >= a13 && *((float *)&v93 + 2) <= a14)
                  {
                    int v97 = v94 + v194 * v95;
                    *(_DWORD *)int32x4_t v217 = v97;
                    if (!a5) {
                      goto LABEL_94;
                    }
                    size_t v98 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>(*(uint64_t *)buf, *(unint64_t *)&buf[8], v97);
                    if (!v98 || a5 != 1 && (a5 != 2 || *((float *)v98 + 5) >= v208))
                    {
                      *((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)buf, v97, v217)+ 5) = v208;
LABEL_94:
                      float v99 = v208 / 1000.0;
                      if ((float)(v208 / 1000.0) != 0.0) {
                        float v99 = 1.0 / (float)(v208 / 1000.0);
                      }
                      *((float *)BaseAddress + v97) = v99;
                    }
                  }
                }
              }
LABEL_97:
              v89 += 2;
              v90 += 16;
              if (!--v88) {
                goto LABEL_98;
              }
            }
            *((float *)&v85 + 1) = v82 - *(float *)&v86;
            goto LABEL_77;
          }
          goto LABEL_218;
        }
        goto LABEL_50;
      }
      int v50 = CVPixelBufferGetWidth(pixelBuffer);
      int v51 = CVPixelBufferGetHeight(pixelBuffer);
      unsigned int v52 = CVPixelBufferGetBytesPerRow(pixelBuffer);
      uint64_t v53 = *(void *)(a1 + 8);
      uint64_t v54 = *(void *)(v53 + 32);
      uint64_t v55 = *(void *)(v53 + 16);
      v222.origin.CGFloat x = a8;
      v222.origin.CGFloat y = a9;
      v222.size.double width = a10;
      v222.size.CGFloat height = a11;
      BOOL v56 = CGRectIsEmpty(v222);
      double v57 = (double)v50;
      double v58 = (double)v51;
      if (v56)
      {
        if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) {
          a10 = (double)v51;
        }
        else {
          a10 = (double)v50;
        }
        if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) {
          a11 = (double)v50;
        }
        else {
          a11 = (double)v51;
        }
        a8 = 0.0;
        a9 = 0.0;
      }
      switch(a2)
      {
        case 0:
        case 2:
          float v59 = v57 / a10;
          double v60 = v58 / a11;
          goto LABEL_57;
        case 1:
        case 3:
          float v59 = v58 / a10;
          double v60 = v57 / a11;
LABEL_57:
          float v74 = v60;
          break;
        default:
          float v59 = 1.0;
          float v74 = 1.0;
          break;
      }
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      float32x4_t v196 = CVPixelBufferGetBaseAddress(pixelBuffer);
      if (a7)
      {
        size_t v129 = CVPixelBufferGetDataSize(pixelBuffer);
        bzero(v196, v129);
      }
      *(_OWORD *)vImage_Buffer buf = 0u;
      long long v214 = 0u;
      int v215 = 1065353216;
      unsigned int v130 = *(void **)(a1 + 8);
      unint64_t v131 = v130[1];
      if (v131)
      {
        unint64_t v132 = 0;
        unsigned int v206 = v52 >> 2;
        long long v192 = (void *)(v53 + v55);
        double v133 = v59;
        double v134 = v74;
        float v135 = (float)(unint64_t)(int)(a10 * v133);
        float v136 = (float)(unint64_t)(int)(a11 * v134);
        uint64_t v184 = v53 + v55;
        uint64_t v188 = v54 + v53 + 8;
        while (1)
        {
          int v137 = getValidEchosForPointIndex((uint64_t)v192, (uint64_t)v130 + v130[3], (uint64_t)v130 + v130[11], (uint64_t)v130 + v130[10], (uint64_t)v130 + v130[9], v132, v131, a3, a12, a15, a16, a4, (uint64_t)v216);
          if (v137 < 0) {
            goto LABEL_219;
          }
          unsigned int v140 = v137;
          if (v137) {
            break;
          }
LABEL_178:
          v132 += v140;
          unsigned int v130 = *(void **)(a1 + 8);
          unint64_t v131 = v130[1];
          if (v132 >= v131) {
            goto LABEL_218;
          }
        }
        if (v137 >= 3) {
          uint64_t v141 = 3;
        }
        else {
          uint64_t v141 = v137;
        }
        int v142 = (double *)(v188 + 16 * v132);
        uint64_t v143 = v184 + 16 * v132;
        float32x4_t v144 = v216;
        while (1)
        {
          if (!*v144++) {
            goto LABEL_177;
          }
          *(float *)&long long v139 = (*(v142 - 1) - a8) * v133;
          *(float *)&long long v138 = (*v142 - a9) * v134;
          *(void *)&long long v146 = __PAIR64__(v138, v139);
          DWORD2(v146) = *(_DWORD *)(v143 + 8);
          if (a2 == 1) {
            break;
          }
          if (a2 == 2)
          {
            *(float *)&long long v139 = v135 - *(float *)&v139;
            *((float *)&v139 + 1) = v136 - *(float *)&v138;
            DWORD2(v139) = *(_DWORD *)(v143 + 8);
            long long v146 = v139;
          }
          else if (a2 == 3)
          {
            *(float *)&long long v138 = v136 - *(float *)&v138;
            *((float *)&v138 + 1) = (*(v142 - 1) - a8) * v133;
LABEL_160:
            DWORD2(v138) = *(_DWORD *)(v143 + 8);
            long long v146 = v138;
          }
          int v147 = (int)*(float *)&v146;
          if ((int)*(float *)&v146 >= v50) {
            goto LABEL_177;
          }
          if (v147 < 0) {
            goto LABEL_177;
          }
          int v148 = (int)*((float *)&v146 + 1);
          if ((int)*((float *)&v146 + 1) >= v51 || v148 < 0) {
            goto LABEL_177;
          }
          float v149 = *((float *)&v146 + 2);
          if (*((float *)&v146 + 2) < a13 || *((float *)&v146 + 2) > a14) {
            goto LABEL_177;
          }
          int v151 = v147 + v206 * v148;
          *(_DWORD *)int32x4_t v217 = v151;
          if (a5)
          {
            unint64_t v152 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>(*(uint64_t *)buf, *(unint64_t *)&buf[8], v151);
            if (v152 && (a5 == 1 || a5 == 2 && *((float *)v152 + 5) < v149)) {
              goto LABEL_177;
            }
            *((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)buf, v151, v217)+ 5) = v149;
          }
          *((float *)v196 + v151) = v149 / 1000.0;
LABEL_177:
          v142 += 2;
          v143 += 16;
          if (!--v141) {
            goto LABEL_178;
          }
        }
        *((float *)&v138 + 1) = v135 - *(float *)&v139;
        goto LABEL_160;
      }
LABEL_218:
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      uint64_t v38 = 0;
LABEL_222:
      std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::~__hash_table((uint64_t)buf);
      goto LABEL_223;
    }
    if (PixelFormatType != 1751410032)
    {
      if (PixelFormatType != 1751411059)
      {
LABEL_50:
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          PixelBufferUtils::pixelFormatAsString(v26, (char *)buf);
          float32x4_t v179 = (SBYTE7(v214) & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)int32x4_t v217 = 136315138;
          int32x4_t v218 = v179;
          _os_log_error_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_ERROR, "cannot project jasper points into provided pixel format (%s). please use kCVPixelFormatType_DepthFloat32/16 or kCVPixelFormatType_DisparityFloat32/16", v217, 0xCu);
          if (SBYTE7(v214) < 0) {
            operator delete(*(void **)buf);
          }
        }
        uint64_t v38 = -22956;
        goto LABEL_223;
      }
      int v39 = CVPixelBufferGetWidth(pixelBuffer);
      int v40 = CVPixelBufferGetHeight(pixelBuffer);
      unsigned int v41 = CVPixelBufferGetBytesPerRow(pixelBuffer);
      uint64_t v42 = *(void *)(a1 + 8);
      uint64_t v43 = *(void *)(v42 + 32);
      uint64_t v44 = *(void *)(v42 + 16);
      v221.origin.CGFloat x = a8;
      v221.origin.CGFloat y = a9;
      v221.size.double width = a10;
      v221.size.CGFloat height = a11;
      BOOL v45 = CGRectIsEmpty(v221);
      double v46 = (double)v39;
      double v47 = (double)v40;
      if (v45)
      {
        if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) {
          a10 = (double)v40;
        }
        else {
          a10 = (double)v39;
        }
        if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) {
          a11 = (double)v39;
        }
        else {
          a11 = (double)v40;
        }
        a8 = 0.0;
        a9 = 0.0;
      }
      switch(a2)
      {
        case 0:
        case 2:
          float v48 = v46 / a10;
          double v49 = v47 / a11;
          goto LABEL_55;
        case 1:
        case 3:
          float v48 = v47 / a10;
          double v49 = v46 / a11;
LABEL_55:
          float v73 = v49;
          break;
        default:
          float v48 = 1.0;
          float v73 = 1.0;
          break;
      }
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      long long v191 = CVPixelBufferGetBaseAddress(pixelBuffer);
      if (a7)
      {
        size_t v100 = CVPixelBufferGetDataSize(pixelBuffer);
        bzero(v191, v100);
      }
      *(_OWORD *)vImage_Buffer buf = 0u;
      long long v214 = 0u;
      int v215 = 1065353216;
      vImagePixelCount v101 = *(void **)(a1 + 8);
      unint64_t v102 = v101[1];
      if (!v102) {
        goto LABEL_218;
      }
      unint64_t v103 = 0;
      unsigned int v195 = v41 >> 1;
      uint64_t v187 = v42 + v44;
      double v104 = v48;
      double v105 = v73;
      float v106 = (float)(unint64_t)(int)(a10 * v104);
      float v107 = (float)(unint64_t)(int)(a11 * v73);
      uint64_t v181 = v42 + v44;
      uint64_t v183 = v43 + v42 + 8;
      while (1)
      {
        int v108 = getValidEchosForPointIndex(v187, (uint64_t)v101 + v101[3], (uint64_t)v101 + v101[11], (uint64_t)v101 + v101[10], (uint64_t)v101 + v101[9], v103, v102, a3, a12, a15, a16, a4, (uint64_t)v216);
        if (v108 < 0) {
          goto LABEL_219;
        }
        unsigned int v111 = v108;
        if (v108) {
          break;
        }
LABEL_139:
        v103 += v111;
        vImagePixelCount v101 = *(void **)(a1 + 8);
        unint64_t v102 = v101[1];
        if (v103 >= v102) {
          goto LABEL_218;
        }
      }
      if (v108 >= 3) {
        uint64_t v112 = 3;
      }
      else {
        uint64_t v112 = v108;
      }
      int32x4_t v113 = (double *)(v183 + 16 * v103);
      uint64_t v114 = v181 + 16 * v103;
      int32x4_t v115 = v216;
      while (1)
      {
        if (!*v115++) {
          goto LABEL_138;
        }
        *(float *)&long long v110 = (*(v113 - 1) - a8) * v104;
        *(float *)&long long v109 = (*v113 - a9) * v105;
        long long v117 = v110;
        DWORD1(v117) = v109;
        DWORD2(v117) = *(_DWORD *)(v114 + 8);
        if (a2 == 1) {
          break;
        }
        if (a2 == 2)
        {
          *(float *)&long long v110 = v106 - *(float *)&v110;
          *((float *)&v110 + 1) = v107 - *(float *)&v109;
          DWORD2(v110) = *(_DWORD *)(v114 + 8);
          long long v117 = v110;
          goto LABEL_120;
        }
        if (a2 == 3)
        {
          *(float *)&long long v109 = v107 - *(float *)&v109;
          *((float *)&v109 + 1) = (*(v113 - 1) - a8) * v104;
LABEL_118:
          DWORD2(v109) = *(_DWORD *)(v114 + 8);
          long long v117 = v109;
        }
LABEL_120:
        float v209 = *((float *)&v117 + 2);
        int v118 = (int)*(float *)&v117;
        if ((int)*(float *)&v117 < v39 && (v118 & 0x80000000) == 0)
        {
          HIDWORD(v109) = HIDWORD(v117);
          int v119 = (int)*((float *)&v117 + 1);
          if ((int)*((float *)&v117 + 1) < v40 && (v119 & 0x80000000) == 0)
          {
            HIDWORD(v109) = HIDWORD(v117);
            if (*((float *)&v117 + 2) >= a13 && *((float *)&v117 + 2) <= a14)
            {
              int v121 = v118 + v195 * v119;
              *(_DWORD *)int32x4_t v217 = v121;
              if (!a5) {
                goto LABEL_135;
              }
              float v122 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>(*(uint64_t *)buf, *(unint64_t *)&buf[8], v121);
              if (!v122 || a5 != 1 && (a5 != 2 || *((float *)v122 + 5) >= v209))
              {
                *((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)buf, v121, v217)+ 5) = v209;
LABEL_135:
                float v123 = v209 / 1000.0;
                if ((float)(v209 / 1000.0) != 0.0) {
                  float v123 = 1.0 / (float)(v209 / 1000.0);
                }
                _S0 = v123;
                __asm { FCVT            H0, S0 }
                *((_WORD *)v191 + v121) = LOWORD(_S0);
              }
            }
          }
        }
LABEL_138:
        v113 += 2;
        v114 += 16;
        if (!--v112) {
          goto LABEL_139;
        }
      }
      *((float *)&v109 + 1) = v106 - *(float *)&v110;
      goto LABEL_118;
    }
    int v61 = CVPixelBufferGetWidth(pixelBuffer);
    int v62 = CVPixelBufferGetHeight(pixelBuffer);
    unsigned int v63 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    uint64_t v64 = *(void *)(a1 + 8);
    uint64_t v65 = *(void *)(v64 + 32);
    uint64_t v66 = *(void *)(v64 + 16);
    v223.origin.CGFloat x = a8;
    v223.origin.CGFloat y = a9;
    v223.size.double width = a10;
    v223.size.CGFloat height = a11;
    BOOL v67 = CGRectIsEmpty(v223);
    double v68 = (double)v61;
    double v69 = (double)v62;
    if (v67)
    {
      if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) {
        a10 = (double)v62;
      }
      else {
        a10 = (double)v61;
      }
      if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) {
        a11 = (double)v61;
      }
      else {
        a11 = (double)v62;
      }
      a8 = 0.0;
      a9 = 0.0;
    }
    switch(a2)
    {
      case 0:
      case 2:
        float v70 = v68 / a10;
        double v71 = v69 / a11;
        goto LABEL_59;
      case 1:
      case 3:
        float v70 = v69 / a10;
        double v71 = v68 / a11;
LABEL_59:
        float v75 = v71;
        break;
      default:
        float v70 = 1.0;
        float v75 = 1.0;
        break;
    }
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    float32x4_t v197 = CVPixelBufferGetBaseAddress(pixelBuffer);
    if (a7)
    {
      size_t v153 = CVPixelBufferGetDataSize(pixelBuffer);
      bzero(v197, v153);
    }
    *(_OWORD *)vImage_Buffer buf = 0u;
    long long v214 = 0u;
    int v215 = 1065353216;
    float32x4_t v154 = *(void **)(a1 + 8);
    unint64_t v155 = v154[1];
    if (!v155) {
      goto LABEL_218;
    }
    unint64_t v156 = 0;
    unsigned int v207 = v63 >> 1;
    float32x4_t v193 = (void *)(v64 + v66);
    double v157 = v70;
    double v158 = v75;
    float v159 = (float)(unint64_t)(int)(a10 * v157);
    float v160 = (float)(unint64_t)(int)(a11 * v158);
    uint64_t v185 = v64 + v66;
    uint64_t v189 = v65 + v64 + 8;
    while (1)
    {
      int v161 = getValidEchosForPointIndex((uint64_t)v193, (uint64_t)v154 + v154[3], (uint64_t)v154 + v154[11], (uint64_t)v154 + v154[10], (uint64_t)v154 + v154[9], v156, v155, a3, a12, a15, a16, a4, (uint64_t)v216);
      if (v161 < 0)
      {
LABEL_219:
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int32x4_t v217 = 0;
          _os_log_error_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_ERROR, "bad point cloud format", v217, 2u);
        }
        uint64_t v38 = -22974;
        goto LABEL_222;
      }
      unsigned int v164 = v161;
      if (v161) {
        break;
      }
LABEL_217:
      v156 += v164;
      float32x4_t v154 = *(void **)(a1 + 8);
      unint64_t v155 = v154[1];
      if (v156 >= v155) {
        goto LABEL_218;
      }
    }
    if (v161 >= 3) {
      uint64_t v165 = 3;
    }
    else {
      uint64_t v165 = v161;
    }
    float32x4_t v166 = (double *)(v189 + 16 * v156);
    uint64_t v167 = v185 + 16 * v156;
    float32x4_t v168 = v216;
    while (1)
    {
      if (!*v168++) {
        goto LABEL_216;
      }
      *(float *)&long long v163 = (*(v166 - 1) - a8) * v157;
      *(float *)&long long v162 = (*v166 - a9) * v158;
      *(void *)&long long v170 = __PAIR64__(v162, v163);
      DWORD2(v170) = *(_DWORD *)(v167 + 8);
      if (a2 == 1) {
        break;
      }
      if (a2 == 2)
      {
        *(float *)&long long v163 = v159 - *(float *)&v163;
        *((float *)&v163 + 1) = v160 - *(float *)&v162;
        DWORD2(v163) = *(_DWORD *)(v167 + 8);
        long long v170 = v163;
      }
      else if (a2 == 3)
      {
        *(float *)&long long v162 = v160 - *(float *)&v162;
        *((float *)&v162 + 1) = (*(v166 - 1) - a8) * v157;
LABEL_199:
        DWORD2(v162) = *(_DWORD *)(v167 + 8);
        long long v170 = v162;
      }
      int v171 = (int)*(float *)&v170;
      if ((int)*(float *)&v170 >= v61) {
        goto LABEL_216;
      }
      if (v171 < 0) {
        goto LABEL_216;
      }
      int v172 = (int)*((float *)&v170 + 1);
      if ((int)*((float *)&v170 + 1) >= v62 || v172 < 0) {
        goto LABEL_216;
      }
      float v173 = *((float *)&v170 + 2);
      if (*((float *)&v170 + 2) < a13 || *((float *)&v170 + 2) > a14) {
        goto LABEL_216;
      }
      int v175 = v171 + v207 * v172;
      *(_DWORD *)int32x4_t v217 = v175;
      if (a5)
      {
        float32x4_t v176 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>(*(uint64_t *)buf, *(unint64_t *)&buf[8], v175);
        if (v176 && (a5 == 1 || a5 == 2 && *((float *)v176 + 5) < v173)) {
          goto LABEL_216;
        }
        *((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)buf, v175, v217)+ 5) = v173;
      }
      _S0 = v173 / 1000.0;
      __asm { FCVT            H0, S0 }
      *((_WORD *)v197 + v175) = LOWORD(_S0);
LABEL_216:
      v166 += 2;
      v167 += 16;
      if (!--v165) {
        goto LABEL_217;
      }
    }
    *((float *)&v162 + 1) = v159 - *(float *)&v163;
    goto LABEL_199;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)vImage_Buffer buf = 0;
    _os_log_error_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_ERROR, "output buffer nil at projectJasperPoints", buf, 2u);
  }
  uint64_t v38 = -22953;
LABEL_223:
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)&v210);
  return v38;
}

void sub_247F17504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>(uint64_t a1, unint64_t a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  uint64_t v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(float *a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = operator new(0x18uLL);
  *unint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint8x8_t v18 = operator new(8 * *(void *)&prime);
          int v19 = *(void **)a1;
          *(void *)a1 = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          int v21 = (void *)*((void *)a1 + 2);
          if (v21)
          {
            unint64_t v22 = v21[1];
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
            uint64_t v27 = (void *)*v21;
            if (*v21)
            {
              do
              {
                unint64_t v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(void *)&prime) {
                    v28 %= *(void *)&prime;
                  }
                }
                else
                {
                  v28 &= *(void *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v28))
                  {
                    *(void *)(*(void *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  void *v21 = *v27;
                  void *v27 = **(void **)(*(void *)a1 + 8 * v28);
                  **(void **)(*(void *)a1 + 8 * v28) = v27;
                  uint64_t v27 = v21;
                }
                unint64_t v28 = v22;
LABEL_55:
                int v21 = v27;
                uint64_t v27 = (void *)*v27;
                unint64_t v22 = v28;
              }
              while (v27);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        float v33 = *(void **)a1;
        *(void *)a1 = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v29 = *(void **)a1;
  uint64_t v30 = *(void **)(*(void *)a1 + 8 * v3);
  if (v30)
  {
    *unint64_t v10 = *v30;
LABEL_72:
    *uint64_t v30 = v10;
    goto LABEL_73;
  }
  *unint64_t v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    unint64_t v31 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    uint64_t v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_247F17A1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void appledepth::JasperPointCloud::initPerformanceOverrides(ADJasperPerformanceOverride *a1)
{
  uint64_t Instance = (uint64_t *)ADJasperPerformanceOverride::getInstance(a1);

  ADJasperPerformanceOverride::initFromCsv(Instance, (uint64_t *)a1);
}

uint64_t appledepth::JasperPointCloud::resetPerformanceOverrides(appledepth::JasperPointCloud *this)
{
  uint64_t Instance = (uint64_t *)ADJasperPerformanceOverride::getInstance(this);
  uint64_t result = *Instance;
  *uint64_t Instance = 0;
  if (result)
  {
    JUMPOUT(0x24C570740);
  }
  return result;
}

std::string *appledepth::JasperPointCloud::setEmulatedDevice(ADJasperPerformanceOverride *a1)
{
  uint64_t v2 = (std::string *)(ADJasperPerformanceOverride::getInstance(a1) + 8);

  return std::string::operator=(v2, (const std::string *)a1);
}

void sub_247F17C70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_247F17D40(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_247F17E04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_247F1825C(_Unwind_Exception *a1)
{
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)(v4 - 296));
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_247F1840C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  objc_sync_exit(v19);

  _Unwind_Resume(a1);
}

void sub_247F184F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F186F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F18A8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F18D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F19094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F19148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id dataToFloatsArray(NSData *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    unint64_t v3 = [(NSData *)v1 length];
    uint64_t v4 = [(NSData *)v2 bytes];
    unint64_t v5 = v3 >> 2;
    unint64_t v6 = [MEMORY[0x263EFF980] arrayWithCapacity:v3 >> 2];
    if (v3 >= 4)
    {
      uint64_t v8 = 0;
      if (v5 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v5;
      }
      do
      {
        LODWORD(v7) = *(_DWORD *)(v4 + 4 * v8);
        unint64_t v10 = [NSNumber numberWithFloat:v7];
        [v6 setObject:v10 atIndexedSubscript:v8];

        ++v8;
      }
      while (v9 != v8);
    }
  }
  else
  {
    unint64_t v6 = 0;
  }

  return v6;
}

void sub_247F19274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F19328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F193CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F194E4(_Unwind_Exception *a1)
{
  unint64_t v5 = v3;

  _Unwind_Resume(a1);
}

double rotateUVPoint(uint64_t a1, double result, double a3, double a4, double a5)
{
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = a3;
      break;
    case 2:
      uint64_t result = a4 - result;
      break;
    case 3:
      uint64_t result = a5 - a3;
      break;
    default:
      uint64_t v8 = v5;
      uint64_t v9 = v6;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)double v7 = 0;
        _os_log_error_impl(&dword_247EC4000, &_os_log_internal, OS_LOG_TYPE_ERROR, "unknown rotation constant", v7, 2u);
      }
      uint64_t result = *MEMORY[0x263F00148];
      break;
  }
  return result;
}

void sub_247F19750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F19848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F198FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F199CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_247F19A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_247F19F18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F19FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1A128(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_247F1A330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1A4C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1A5B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1A658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1A7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_247F1A8DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1A978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1AA1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1AB34(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_247F1AC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t applyDistortionCoefficients(uint64_t result, float64x2_t *a2, double a3, CGPoint a4, double a5, const float *a6, float64x2_t *a7)
{
  if (result)
  {
    double v7 = a3 * a3;
    double v8 = v7 * (a5 * a5);
    CGFloat y = a4.y;
    do
    {
      float64x2_t v10 = vsubq_f64(*a2, (float64x2_t)a4);
      double v11 = v7 * vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(v10, v10).f64[1]), v10.f64[0], v10.f64[0]);
      if (v11 <= v8)
      {
        double v12 = v11 * v11;
        double v13 = v11 * (v11 * v11);
        double v14 = (v11 * a6[1]
             + *a6
             + a6[2] * v12
             + a6[3] * v13
             + a6[4] * (v12 * v12)
             + a6[5] * (v11 * v11 * v13)
             + a6[6] * (v13 * v13)
             + a6[7] * (v12 * v12 * v13))
            / 100.0
            + 1.0;
        if (v14 <= 0.0) {
          double v15 = 1.0;
        }
        else {
          double v15 = 1.0 / v14;
        }
        *a7 = vmlaq_n_f64((float64x2_t)a4, v10, v15);
      }
      else
      {
        *a7 = *a2;
      }
      ++a7;
      ++a2;
      --result;
    }
    while (result);
  }
  return result;
}

void sub_247F1AE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_247F1B0B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1B190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1B290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1B440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1B790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1B8F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1B9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_247F1BA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_247F1BB38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1BD90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1BF38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1C118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1C268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1C2AC()
{
}

void sub_247F1C3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

char *ADWarperMesh::apply(ADWarperMesh *this, uint64_t a2, float64x2_t *a3, CGSize a4, float64x2_t *a5)
{
  CGFloat width = a4.width;
  CGFloat height = a4.height;
  CGSize refDimensions = this->_refDimensions;
  unint64_t type = this[1]._type;
  p_typeOffset = &this->_typeOffset;
  int32x2_t v11 = *(int32x2_t *)&this->_offsetX;
  float32x2_t v12 = vld1_dup_f32(p_typeOffset);
  uint64_t result = [(NSData *)this->_warperMesh bytes];
  if (a2)
  {
    v14.f64[0] = width;
    v14.f64[1] = height;
    float32x2_t v15 = vcvt_f32_f64(vdivq_f64(v14, (float64x2_t)refDimensions));
    float32x2_t v16 = vsub_f32(v12, (float32x2_t)type);
    __asm { FMOV            V2.2S, #1.0 }
    float64x2_t v22 = vcvtq_f64_f32(vdiv_f32(_D2, v15));
    float64x2_t v23 = vcvtq_f64_f32(vsub_f32(vadd_f32((float32x2_t)type, vcvt_f32_s32(v11)), v12));
    int width_low = LODWORD(this[1]._refDimensions.width);
    int v25 = HIDWORD(this[1]._refDimensions.width) - 2;
    do
    {
      float64x2_t v26 = *a3++;
      float32x2_t v27 = vcvt_f32_f64(vmlaq_f64(v23, v22, v26));
      int32x2_t v28 = vcvt_s32_f32(v27);
      int32x2_t v29 = vcltz_s32(v28);
      int v30 = v28.i32[1];
      int v31 = v28.i32[0];
      if (width_low - 2 < v28.i32[0]) {
        int v31 = width_low - 2;
      }
      if (v29.i8[0]) {
        int v31 = 0;
      }
      if (v25 < v28.i32[1]) {
        int v30 = v25;
      }
      if (v29.i8[4]) {
        int v30 = 0;
      }
      float v32 = v27.f32[0] - (float)v31;
      float v33 = v27.f32[1] - (float)v30;
      int v34 = v31 + v30 * width_low;
      *a5++ = vcvtq_f64_f32(vmul_f32(vadd_f32(v16, vmla_n_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(vmul_n_f32(*(float32x2_t *)&result[8 * v34 + 8], v32), 1.0 - v33), vmul_n_f32(*(float32x2_t *)&result[8 * v34], 1.0 - v32), 1.0 - v33), vmul_n_f32(*(float32x2_t *)&result[8 * v34 + 8 * width_low], 1.0 - v32), v33), vmul_n_f32(*(float32x2_t *)&result[8 * v34 + 8 + 8 * width_low], v32), v33)), v15));
      --a2;
    }
    while (a2);
  }
  return result;
}

void sub_247F1C5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_247F1C658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1C748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1C87C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1CF1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1D0E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1D308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1D480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_247F1D5E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1D6C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1D8A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1D99C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1DBCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1DDA0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t CMCaptureLibraryCore()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = 0;
  unint64_t v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = CMCaptureLibraryCore::frameworkLibrary;
  uint64_t v5 = CMCaptureLibraryCore::frameworkLibrary;
  if (!CMCaptureLibraryCore::frameworkLibrary)
  {
    long long v6 = xmmword_265232AC0;
    long long v7 = *(_OWORD *)&off_265232AD0;
    void v3[3] = _sl_dlopen();
    CMCaptureLibraryCore::frameworkLibrarCGFloat y = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_247F1E004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkFigCaptureSampleBufferAttachmentKey_MetadataDictionarySymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkFigCaptureSampleBufferAttachmentKey_MetadataDictionarySymbolLoc(void)::ptr;
  uint64_t v6 = getkFigCaptureSampleBufferAttachmentKey_MetadataDictionarySymbolLoc(void)::ptr;
  if (!getkFigCaptureSampleBufferAttachmentKey_MetadataDictionarySymbolLoc(void)::ptr)
  {
    uint64_t v1 = (void *)CMCaptureLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kFigCaptureSampleBufferAttachmentKey_MetadataDictionary");
    getkFigCaptureSampleBufferAttachmentKey_MetadataDictionarySymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_247F1E0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *___ZL67getkFigCaptureSampleBufferAttachmentKey_MetadataDictionarySymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CMCaptureLibrary();
  uint64_t result = dlsym(v2, "kFigCaptureSampleBufferAttachmentKey_MetadataDictionary");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkFigCaptureSampleBufferAttachmentKey_MetadataDictionarySymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                             + 24);
  return result;
}

uint64_t CMCaptureLibrary()
{
  uint64_t v0 = CMCaptureLibraryCore();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

uint64_t __CMCaptureLibraryCore_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  CMCaptureLibraryCore::frameworkLibrarCGFloat y = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_247F1E6AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t getkFigCaptureStreamMetadata_RawSensorWidthSymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkFigCaptureStreamMetadata_RawSensorWidthSymbolLoc(void)::ptr;
  uint64_t v6 = getkFigCaptureStreamMetadata_RawSensorWidthSymbolLoc(void)::ptr;
  if (!getkFigCaptureStreamMetadata_RawSensorWidthSymbolLoc(void)::ptr)
  {
    uint64_t v1 = (void *)CMCaptureLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kFigCaptureStreamMetadata_RawSensorWidth");
    getkFigCaptureStreamMetadata_RawSensorWidthSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_247F1E7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkFigCaptureStreamMetadata_RawSensorWidth(void)
{
  uint64_t v0 = getkFigCaptureStreamMetadata_RawSensorWidthSymbolLoc();
  if (v0) {
    return *(void *)v0;
  }
  dlerror();
  abort_report_np();
  return getkFigCaptureStreamMetadata_RawSensorHeightSymbolLoc();
}

uint64_t getkFigCaptureStreamMetadata_RawSensorHeightSymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkFigCaptureStreamMetadata_RawSensorHeightSymbolLoc(void)::ptr;
  uint64_t v6 = getkFigCaptureStreamMetadata_RawSensorHeightSymbolLoc(void)::ptr;
  if (!getkFigCaptureStreamMetadata_RawSensorHeightSymbolLoc(void)::ptr)
  {
    uint64_t v1 = (void *)CMCaptureLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kFigCaptureStreamMetadata_RawSensorHeight");
    getkFigCaptureStreamMetadata_RawSensorHeightSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_247F1E8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkFigCaptureStreamMetadata_RawSensorHeight(void)
{
  uint64_t v0 = getkFigCaptureStreamMetadata_RawSensorHeightSymbolLoc();
  if (v0) {
    return *(void *)v0;
  }
  dlerror();
  abort_report_np();
  return getkFigCaptureStreamMetadata_SensorCropRectSymbolLoc();
}

uint64_t getkFigCaptureStreamMetadata_SensorCropRectSymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkFigCaptureStreamMetadata_SensorCropRectSymbolLoc(void)::ptr;
  uint64_t v6 = getkFigCaptureStreamMetadata_SensorCropRectSymbolLoc(void)::ptr;
  if (!getkFigCaptureStreamMetadata_SensorCropRectSymbolLoc(void)::ptr)
  {
    uint64_t v1 = (void *)CMCaptureLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kFigCaptureStreamMetadata_SensorCropRect");
    getkFigCaptureStreamMetadata_SensorCropRectSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_247F1EA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkFigCaptureStreamMetadata_SensorCropRect(void)
{
  uint64_t v0 = getkFigCaptureStreamMetadata_SensorCropRectSymbolLoc();
  if (v0) {
    return *(void *)v0;
  }
  dlerror();
  abort_report_np();
  return getkFigCaptureStreamMetadata_PinholeCameraFocalLengthSymbolLoc();
}

uint64_t getkFigCaptureStreamMetadata_PinholeCameraFocalLengthSymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkFigCaptureStreamMetadata_PinholeCameraFocalLengthSymbolLoc(void)::ptr;
  uint64_t v6 = getkFigCaptureStreamMetadata_PinholeCameraFocalLengthSymbolLoc(void)::ptr;
  if (!getkFigCaptureStreamMetadata_PinholeCameraFocalLengthSymbolLoc(void)::ptr)
  {
    uint64_t v1 = (void *)CMCaptureLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kFigCaptureStreamMetadata_PinholeCameraFocalLength");
    getkFigCaptureStreamMetadata_PinholeCameraFocalLengthSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_247F1EB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkFigCaptureStreamMetadata_PracticalFocalLengthSymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkFigCaptureStreamMetadata_PracticalFocalLengthSymbolLoc(void)::ptr;
  uint64_t v6 = getkFigCaptureStreamMetadata_PracticalFocalLengthSymbolLoc(void)::ptr;
  if (!getkFigCaptureStreamMetadata_PracticalFocalLengthSymbolLoc(void)::ptr)
  {
    uint64_t v1 = (void *)CMCaptureLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kFigCaptureStreamMetadata_PracticalFocalLength");
    getkFigCaptureStreamMetadata_PracticalFocalLengthSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_247F1EC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkFigCaptureStreamMetadata_DistortionOpticalCenterSymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkFigCaptureStreamMetadata_DistortionOpticalCenterSymbolLoc(void)::ptr;
  uint64_t v6 = getkFigCaptureStreamMetadata_DistortionOpticalCenterSymbolLoc(void)::ptr;
  if (!getkFigCaptureStreamMetadata_DistortionOpticalCenterSymbolLoc(void)::ptr)
  {
    uint64_t v1 = (void *)CMCaptureLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kFigCaptureStreamMetadata_DistortionOpticalCenter");
    getkFigCaptureStreamMetadata_DistortionOpticalCenterSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_247F1ED34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkFigCaptureStreamMetadata_OpticalCenterSymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkFigCaptureStreamMetadata_OpticalCenterSymbolLoc(void)::ptr;
  uint64_t v6 = getkFigCaptureStreamMetadata_OpticalCenterSymbolLoc(void)::ptr;
  if (!getkFigCaptureStreamMetadata_OpticalCenterSymbolLoc(void)::ptr)
  {
    uint64_t v1 = (void *)CMCaptureLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kFigCaptureStreamMetadata_OpticalCenter");
    getkFigCaptureStreamMetadata_OpticalCenterSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_247F1EE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkFigCaptureStreamMetadata_DynamicDistortionFactorSymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkFigCaptureStreamMetadata_DynamicDistortionFactorSymbolLoc(void)::ptr;
  uint64_t v6 = getkFigCaptureStreamMetadata_DynamicDistortionFactorSymbolLoc(void)::ptr;
  if (!getkFigCaptureStreamMetadata_DynamicDistortionFactorSymbolLoc(void)::ptr)
  {
    uint64_t v1 = (void *)CMCaptureLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kFigCaptureStreamMetadata_DynamicDistortionFactor");
    getkFigCaptureStreamMetadata_DynamicDistortionFactorSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_247F1EF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkFigCaptureStreamMetadata_TotalSensorCropRectSymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkFigCaptureStreamMetadata_TotalSensorCropRectSymbolLoc(void)::ptr;
  uint64_t v6 = getkFigCaptureStreamMetadata_TotalSensorCropRectSymbolLoc(void)::ptr;
  if (!getkFigCaptureStreamMetadata_TotalSensorCropRectSymbolLoc(void)::ptr)
  {
    uint64_t v1 = (void *)CMCaptureLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kFigCaptureStreamMetadata_TotalSensorCropRect");
    getkFigCaptureStreamMetadata_TotalSensorCropRectSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_247F1F004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *getkFigCaptureStreamMetadata_TotalSensorCropRect(void)
{
  uint64_t v0 = getkFigCaptureStreamMetadata_TotalSensorCropRectSymbolLoc();
  if (v0) {
    return *(void **)v0;
  }
  dlerror();
  uint64_t v2 = abort_report_np();
  return ___ZL57getkFigCaptureStreamMetadata_TotalSensorCropRectSymbolLocv_block_invoke(v2);
}

void *___ZL57getkFigCaptureStreamMetadata_TotalSensorCropRectSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CMCaptureLibrary();
  uint64_t result = dlsym(v2, "kFigCaptureStreamMetadata_TotalSensorCropRect");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkFigCaptureStreamMetadata_TotalSensorCropRectSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                               + 8)
                                                                                   + 24);
  return result;
}

void *___ZL61getkFigCaptureStreamMetadata_DynamicDistortionFactorSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CMCaptureLibrary();
  uint64_t result = dlsym(v2, "kFigCaptureStreamMetadata_DynamicDistortionFactor");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkFigCaptureStreamMetadata_DynamicDistortionFactorSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                       + 24);
  return result;
}

void *___ZL51getkFigCaptureStreamMetadata_OpticalCenterSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CMCaptureLibrary();
  uint64_t result = dlsym(v2, "kFigCaptureStreamMetadata_OpticalCenter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkFigCaptureStreamMetadata_OpticalCenterSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                             + 24);
  return result;
}

void *___ZL61getkFigCaptureStreamMetadata_DistortionOpticalCenterSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CMCaptureLibrary();
  uint64_t result = dlsym(v2, "kFigCaptureStreamMetadata_DistortionOpticalCenter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkFigCaptureStreamMetadata_DistortionOpticalCenterSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                       + 24);
  return result;
}

void *___ZL58getkFigCaptureStreamMetadata_PracticalFocalLengthSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CMCaptureLibrary();
  uint64_t result = dlsym(v2, "kFigCaptureStreamMetadata_PracticalFocalLength");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkFigCaptureStreamMetadata_PracticalFocalLengthSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                                + 8)
                                                                                    + 24);
  return result;
}

void *___ZL62getkFigCaptureStreamMetadata_PinholeCameraFocalLengthSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CMCaptureLibrary();
  uint64_t result = dlsym(v2, "kFigCaptureStreamMetadata_PinholeCameraFocalLength");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkFigCaptureStreamMetadata_PinholeCameraFocalLengthSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                        + 24);
  return result;
}

void *___ZL52getkFigCaptureStreamMetadata_SensorCropRectSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CMCaptureLibrary();
  uint64_t result = dlsym(v2, "kFigCaptureStreamMetadata_SensorCropRect");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkFigCaptureStreamMetadata_SensorCropRectSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                              + 24);
  return result;
}

void *___ZL53getkFigCaptureStreamMetadata_RawSensorHeightSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CMCaptureLibrary();
  uint64_t result = dlsym(v2, "kFigCaptureStreamMetadata_RawSensorHeight");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkFigCaptureStreamMetadata_RawSensorHeightSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                               + 24);
  return result;
}

void *___ZL52getkFigCaptureStreamMetadata_RawSensorWidthSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CMCaptureLibrary();
  uint64_t result = dlsym(v2, "kFigCaptureStreamMetadata_RawSensorWidth");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkFigCaptureStreamMetadata_RawSensorWidthSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                              + 24);
  return result;
}

void sub_247F1F3DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1F4AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F1F7C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t getkFigCaptureStreamGDCCoefficientsKey_BasePolynomialSymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkFigCaptureStreamGDCCoefficientsKey_BasePolynomialSymbolLoc(void)::ptr;
  uint64_t v6 = getkFigCaptureStreamGDCCoefficientsKey_BasePolynomialSymbolLoc(void)::ptr;
  if (!getkFigCaptureStreamGDCCoefficientsKey_BasePolynomialSymbolLoc(void)::ptr)
  {
    uint64_t v1 = (void *)CMCaptureLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kFigCaptureStreamGDCCoefficientsKey_BasePolynomial");
    getkFigCaptureStreamGDCCoefficientsKey_BasePolynomialSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_247F1F8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkFigCaptureStreamGDCCoefficientsKey_DynamicPolynomialSymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkFigCaptureStreamGDCCoefficientsKey_DynamicPolynomialSymbolLoc(void)::ptr;
  uint64_t v6 = getkFigCaptureStreamGDCCoefficientsKey_DynamicPolynomialSymbolLoc(void)::ptr;
  if (!getkFigCaptureStreamGDCCoefficientsKey_DynamicPolynomialSymbolLoc(void)::ptr)
  {
    uint64_t v1 = (void *)CMCaptureLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kFigCaptureStreamGDCCoefficientsKey_DynamicPolynomial");
    getkFigCaptureStreamGDCCoefficientsKey_DynamicPolynomialSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_247F1F9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *___ZL65getkFigCaptureStreamGDCCoefficientsKey_DynamicPolynomialSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CMCaptureLibrary();
  uint64_t result = dlsym(v2, "kFigCaptureStreamGDCCoefficientsKey_DynamicPolynomial");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkFigCaptureStreamGDCCoefficientsKey_DynamicPolynomialSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                           + 24);
  return result;
}

void *___ZL62getkFigCaptureStreamGDCCoefficientsKey_BasePolynomialSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CMCaptureLibrary();
  uint64_t result = dlsym(v2, "kFigCaptureStreamGDCCoefficientsKey_BasePolynomial");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkFigCaptureStreamGDCCoefficientsKey_BasePolynomialSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                        + 24);
  return result;
}

void sub_247F1FDA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_247F20144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t getkFigCaptureStreamMetadata_ISPMotionDataSymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkFigCaptureStreamMetadata_ISPMotionDataSymbolLoc(void)::ptr;
  uint64_t v6 = getkFigCaptureStreamMetadata_ISPMotionDataSymbolLoc(void)::ptr;
  if (!getkFigCaptureStreamMetadata_ISPMotionDataSymbolLoc(void)::ptr)
  {
    uint64_t v1 = (void *)CMCaptureLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kFigCaptureStreamMetadata_ISPMotionData");
    getkFigCaptureStreamMetadata_ISPMotionDataSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_247F20238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *___ZL51getkFigCaptureStreamMetadata_ISPMotionDataSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CMCaptureLibrary();
  uint64_t result = dlsym(v2, "kFigCaptureStreamMetadata_ISPMotionData");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkFigCaptureStreamMetadata_ISPMotionDataSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                             + 24);
  return result;
}

void sub_247F20370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t getkFigCaptureSampleBufferAttachmentKey_OriginalPresentationTimeStampSymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkFigCaptureSampleBufferAttachmentKey_OriginalPresentationTimeStampSymbolLoc(void)::ptr;
  uint64_t v6 = getkFigCaptureSampleBufferAttachmentKey_OriginalPresentationTimeStampSymbolLoc(void)::ptr;
  if (!getkFigCaptureSampleBufferAttachmentKey_OriginalPresentationTimeStampSymbolLoc(void)::ptr)
  {
    uint64_t v1 = (void *)CMCaptureLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kFigCaptureSampleBufferAttachmentKey_OriginalPresentationTimeStamp");
    getkFigCaptureSampleBufferAttachmentKey_OriginalPresentationTimeStampSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_247F2046C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *___ZL78getkFigCaptureSampleBufferAttachmentKey_OriginalPresentationTimeStampSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CMCaptureLibrary();
  uint64_t result = dlsym(v2, "kFigCaptureSampleBufferAttachmentKey_OriginalPresentationTimeStamp");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkFigCaptureSampleBufferAttachmentKey_OriginalPresentationTimeStampSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_247F20600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t getkFigCaptureStreamMetadata_RollingShutterSkewSymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkFigCaptureStreamMetadata_RollingShutterSkewSymbolLoc(void)::ptr;
  uint64_t v6 = getkFigCaptureStreamMetadata_RollingShutterSkewSymbolLoc(void)::ptr;
  if (!getkFigCaptureStreamMetadata_RollingShutterSkewSymbolLoc(void)::ptr)
  {
    uint64_t v1 = (void *)CMCaptureLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kFigCaptureStreamMetadata_RollingShutterSkew");
    getkFigCaptureStreamMetadata_RollingShutterSkewSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_247F206FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkFigCaptureStreamMetadata_ExposureTimeSymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkFigCaptureStreamMetadata_ExposureTimeSymbolLoc(void)::ptr;
  uint64_t v6 = getkFigCaptureStreamMetadata_ExposureTimeSymbolLoc(void)::ptr;
  if (!getkFigCaptureStreamMetadata_ExposureTimeSymbolLoc(void)::ptr)
  {
    uint64_t v1 = (void *)CMCaptureLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kFigCaptureStreamMetadata_ExposureTime");
    getkFigCaptureStreamMetadata_ExposureTimeSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_247F207EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *___ZL50getkFigCaptureStreamMetadata_ExposureTimeSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CMCaptureLibrary();
  uint64_t result = dlsym(v2, "kFigCaptureStreamMetadata_ExposureTime");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkFigCaptureStreamMetadata_ExposureTimeSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *___ZL56getkFigCaptureStreamMetadata_RollingShutterSkewSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CMCaptureLibrary();
  uint64_t result = dlsym(v2, "kFigCaptureStreamMetadata_RollingShutterSkew");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkFigCaptureStreamMetadata_RollingShutterSkewSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                              + 8)
                                                                                  + 24);
  return result;
}

void sub_247F20A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_247F20E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x270EE47C8](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x270EE47E0](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x270EE4838]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x270EE4998](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x270EE4C58]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x270EE4C70](number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x270EE5180](theString, *(void *)&encoding);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x270EE59E8](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x270EE59F8](context);
}

CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x270EE5B80](red, green, blue, alpha);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C68]();
}

CFStringRef CGColorSpaceGetName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x270EE5D10](space);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextFillEllipseInRect(CGContextRef c, CGRect rect)
{
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetTextDrawingMode(CGContextRef c, CGTextDrawingMode mode)
{
}

void CGContextSetTextMatrix(CGContextRef c, CGAffineTransform *t)
{
}

void CGContextSetTextPosition(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x270EF4F20](data, type, count, options);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x270EF4F38](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x270EF4F48](idst);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x270EE6780](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x270EE6790](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x270EE67D8](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x270EE6800](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x270EE6868](image);
}

void CGImageRelease(CGImageRef image)
{
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x270EF5018](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5040](url, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x270EF5048](isrc);
}

CFDictionaryRef CGPointCreateDictionaryRepresentation(CGPoint point)
{
  return (CFDictionaryRef)MEMORY[0x270EE7150]((__n128)point, *(__n128 *)&point.y);
}

BOOL CGPointMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGPoint *point)
{
  return MEMORY[0x270EE7160](dict, point);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x270EE7188]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE71A0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGRect CGRectIntegral(CGRect rect)
{
  MEMORY[0x270EE7230]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x270EE7260]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  return MEMORY[0x270EE7278](dict, rect);
}

CFDictionaryRef CGSizeCreateDictionaryRepresentation(CGSize size)
{
  return (CFDictionaryRef)MEMORY[0x270EE7340]((__n128)size, *(__n128 *)&size.height);
}

BOOL CGSizeMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGSize *size)
{
  return MEMORY[0x270EE7350](dict, size);
}

CMTime *__cdecl CMClockMakeHostTimeFromSystemUnits(CMTime *__return_ptr retstr, uint64_t hostTime)
{
  return (CMTime *)MEMORY[0x270EE7AB8](retstr, hostTime);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  MEMORY[0x270EE7E08](time);
  return result;
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTime *)MEMORY[0x270EE7E20](retstr, dictionaryRepresentation);
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x270EE9AF8](name, matrix, size);
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTLineRef)MEMORY[0x270EE9D70](attrString);
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
}

CFTypeRef CVBufferGetAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x270EE9FD0](buffer, key, attachmentMode);
}

CFDictionaryRef CVBufferGetAttachments(CVBufferRef buffer, CVAttachmentMode attachmentMode)
{
  return (CFDictionaryRef)MEMORY[0x270EE9FD8](buffer, *(void *)&attachmentMode);
}

void CVBufferRelease(CVBufferRef buffer)
{
}

CVBufferRef CVBufferRetain(CVBufferRef buffer)
{
  return (CVBufferRef)MEMORY[0x270EEA008](buffer);
}

uint64_t CVDataBufferGetDataSize()
{
  return MEMORY[0x270EEA048]();
}

uint64_t CVDataBufferGetIOSurface()
{
  return MEMORY[0x270EEA050]();
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA150](allocator, width, height, *(void *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA168](allocator, width, height, *(void *)&pixelFormatType, baseAddress, bytesPerRow, releaseCallback, releaseRefCon);
}

CVReturn CVPixelBufferCreateWithIOSurface(CFAllocatorRef allocator, IOSurfaceRef surface, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA170](allocator, surface, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithPlanarBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *dataPtr, size_t dataSize, size_t numberOfPlanes, void **planeBaseAddress, size_t *planeWidth, size_t *planeHeight, size_t *planeBytesPerRow, CVPixelBufferReleasePlanarBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA178](allocator, width, height, *(void *)&pixelFormatType, dataPtr, dataSize, numberOfPlanes, planeBaseAddress);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x270EEA190](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x270EEA1A0](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1B0](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x270EEA1C8](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetDataSize(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1D0](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1E8](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x270EEA1F8](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x270EEA200](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA218](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA220](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA240](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x270EEA250](pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x270EEA260](pixelBuffer, lockFlags);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x270EEA320](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x270EEA330](pixelBuffer, unlockFlags);
}

uint64_t CVPixelFormatDescriptionGetDescriptionWithPixelFormatType()
{
  return MEMORY[0x270EEA348]();
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x270EF4C58](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D80](buffer);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x270EF4E18](buffer, *(void *)&options, seed);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x270EF4E88](buffer, *(void *)&options, seed);
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x270EF2A50](aClassName);
}

void NSLog(NSString *format, ...)
{
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x270EF2BE8](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x270EF2C08](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x270EF2C38](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2C48]();
}

uint64_t VTImageRotationSessionCreate()
{
  return MEMORY[0x270F06758]();
}

uint64_t VTImageRotationSessionInvalidate()
{
  return MEMORY[0x270F06760]();
}

uint64_t VTImageRotationSessionTransferImage()
{
  return MEMORY[0x270F06778]();
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x270F067E0](allocator, pixelTransferSessionOut);
}

void VTPixelTransferSessionInvalidate(VTPixelTransferSessionRef session)
{
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x270F067F0](session, sourceBuffer, destinationBuffer);
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  return MEMORY[0x270F06820](session, propertyKey, propertyValue);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t docopt::docopt_parse()
{
  return MEMORY[0x270F0E918]();
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x270F98200](this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x270F98238](this, __c, __pos);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x270F98268]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

const char *__cdecl std::exception::what(const std::exception *this)
{
  return (const char *)MEMORY[0x270F98310](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983D8](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F98480](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98498](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x270F98548](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x270F98638]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x270F98640]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x270F98650]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x270F98658]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x270F986B0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F987B0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

float std::stof(const std::string *__str, size_t *__idx)
{
  MEMORY[0x270F98B70](__str, __idx);
  return result;
}

uint64_t std::stol(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x270F98B80](__str, __idx, *(void *)&__base);
}

uint64_t std::__sort<std::__less<float,float> &,float *>()
{
  return MEMORY[0x270F98BE0]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E20](retstr, __val);
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void *__cxa_get_exception_ptr(void *a1)
{
  return (void *)MEMORY[0x270F98F00](a1);
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  MEMORY[0x270ED7E20]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2], (__n128)a1.columns[3]);
  result.columns[3].i64[1] = v8;
  result.columns[3].i64[0] = v7;
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x270ED7E90](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x270F76310]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x270ED8458]();
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x270ED86A8](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x270ED86B8](a1, a2);
  return result;
}

float atanf(float a1)
{
  MEMORY[0x270ED86C0](a1);
  return result;
}

double atof(const char *a1)
{
  MEMORY[0x270ED86E0](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

void bzero(void *a1, size_t a2)
{
}

BOOL class_conformsToProtocol(Class cls, Protocol *protocol)
{
  return MEMORY[0x270F9A420](cls, protocol);
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x270F9A480](cls);
}

objc_property_t class_getProperty(Class cls, const char *name)
{
  return (objc_property_t)MEMORY[0x270F9A488](cls, name);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x270F9A490](cls);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

char *dlerror(void)
{
  return (char *)MEMORY[0x270ED9620]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

uint64_t e5rt_buffer_object_create_from_iosurface()
{
  return MEMORY[0x270F27AF0]();
}

uint64_t e5rt_buffer_object_get_data_ptr()
{
  return MEMORY[0x270F27AF8]();
}

uint64_t e5rt_buffer_object_release()
{
  return MEMORY[0x270F27B18]();
}

uint64_t e5rt_cvpb_4cc_to_surface_format()
{
  return MEMORY[0x270F27B28]();
}

uint64_t e5rt_execution_stream_create()
{
  return MEMORY[0x270F27B98]();
}

uint64_t e5rt_execution_stream_encode_operation()
{
  return MEMORY[0x270F27BA8]();
}

uint64_t e5rt_execution_stream_execute_sync()
{
  return MEMORY[0x270F27BB8]();
}

uint64_t e5rt_execution_stream_operation_create_precompiled_compute_operation()
{
  return MEMORY[0x270F27BC8]();
}

uint64_t e5rt_execution_stream_operation_get_input_names()
{
  return MEMORY[0x270F27BD8]();
}

uint64_t e5rt_execution_stream_operation_get_num_inputs()
{
  return MEMORY[0x270F27BE8]();
}

uint64_t e5rt_execution_stream_operation_get_num_outputs()
{
  return MEMORY[0x270F27C00]();
}

uint64_t e5rt_execution_stream_operation_get_output_names()
{
  return MEMORY[0x270F27C10]();
}

uint64_t e5rt_execution_stream_operation_release()
{
  return MEMORY[0x270F27C20]();
}

uint64_t e5rt_execution_stream_operation_retain_input_port()
{
  return MEMORY[0x270F27C38]();
}

uint64_t e5rt_execution_stream_operation_retain_output_port()
{
  return MEMORY[0x270F27C48]();
}

uint64_t e5rt_execution_stream_prewire_in_use_allocations()
{
  return MEMORY[0x270F27C58]();
}

uint64_t e5rt_execution_stream_release()
{
  return MEMORY[0x270F27C60]();
}

uint64_t e5rt_execution_stream_reset()
{
  return MEMORY[0x270F27C78]();
}

uint64_t e5rt_get_last_error_message()
{
  return MEMORY[0x270F27C90]();
}

uint64_t e5rt_io_port_bind_buffer_object()
{
  return MEMORY[0x270F27CA0]();
}

uint64_t e5rt_io_port_bind_surface_object()
{
  return MEMORY[0x270F27CA8]();
}

uint64_t e5rt_io_port_is_surface()
{
  return MEMORY[0x270F27CB8]();
}

uint64_t e5rt_io_port_release()
{
  return MEMORY[0x270F27CD0]();
}

uint64_t e5rt_io_port_retain_surface_desc()
{
  return MEMORY[0x270F27CE0]();
}

uint64_t e5rt_io_port_retain_tensor_desc()
{
  return MEMORY[0x270F27CF8]();
}

uint64_t e5rt_program_library_create()
{
  return MEMORY[0x270F27D20]();
}

uint64_t e5rt_program_library_get_function_metadata()
{
  return MEMORY[0x270F27D40]();
}

uint64_t e5rt_program_library_release()
{
  return MEMORY[0x270F27D68]();
}

uint64_t e5rt_surface_desc_get_custom_row_strides()
{
  return MEMORY[0x270F27D78]();
}

uint64_t e5rt_surface_desc_get_format()
{
  return MEMORY[0x270F27D88]();
}

uint64_t e5rt_surface_desc_get_height()
{
  return MEMORY[0x270F27D98]();
}

uint64_t e5rt_surface_desc_get_width()
{
  return MEMORY[0x270F27DA8]();
}

uint64_t e5rt_surface_desc_release()
{
  return MEMORY[0x270F27DB8]();
}

uint64_t e5rt_surface_object_create_from_iosurface()
{
  return MEMORY[0x270F27DD0]();
}

uint64_t e5rt_surface_object_release()
{
  return MEMORY[0x270F27DE0]();
}

uint64_t e5rt_tensor_desc_alloc_buffer_object()
{
  return MEMORY[0x270F27DF0]();
}

uint64_t e5rt_tensor_desc_get_shape()
{
  return MEMORY[0x270F27E50]();
}

uint64_t e5rt_tensor_desc_get_strides()
{
  return MEMORY[0x270F27E70]();
}

uint64_t e5rt_tensor_desc_release()
{
  return MEMORY[0x270F27E80]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x270F27EE8]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x270F27F00]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x270F27F18]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x270F27F80]();
}

uint64_t espresso_network_bind_cvpixelbuffer()
{
  return MEMORY[0x270F27F90]();
}

uint64_t espresso_network_bind_direct_cvpixelbuffer()
{
  return MEMORY[0x270F27FA8]();
}

uint64_t espresso_network_bind_input_vimagebuffer_argb8()
{
  return MEMORY[0x270F27FB8]();
}

uint64_t espresso_network_bind_input_vimagebuffer_bgra8()
{
  return MEMORY[0x270F27FD0]();
}

uint64_t espresso_network_bind_input_vimagebuffer_planar8()
{
  return MEMORY[0x270F27FE0]();
}

uint64_t espresso_network_bind_input_vimagebuffer_rgba8()
{
  return MEMORY[0x270F27FF0]();
}

uint64_t espresso_network_get_version()
{
  return MEMORY[0x270F28018]();
}

uint64_t espresso_network_query_blob_dimensions()
{
  return MEMORY[0x270F28028]();
}

uint64_t espresso_network_select_configuration()
{
  return MEMORY[0x270F28040]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x270F28060]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x270F28078]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x270F28088]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x270F28098]();
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

void free(void *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x270ED9F50]();
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x270F9A598](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x270F9A678](self, _cmd, offset, atomic);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x270F9AA18](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x270F9AA20](obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x270EDAD20](a1);
}

const char *__cdecl property_getAttributes(objc_property_t property)
{
  return (const char *)MEMORY[0x270F9AA90](property);
}

int puts(const char *a1)
{
  return MEMORY[0x270EDB098](a1);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDB568](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

char *__cdecl strtok(char *__str, const char *__sep)
{
  return (char *)MEMORY[0x270EDB6C8](__str, __sep);
}

float tanf(float a1)
{
  MEMORY[0x270EDB818](a1);
  return result;
}

vImage_Error vImageBuffer_Init(vImage_Buffer *buf, vImagePixelCount height, vImagePixelCount width, uint32_t pixelBits, vImage_Flags flags)
{
  return MEMORY[0x270EDEF18](buf, height, width, *(void *)&pixelBits, *(void *)&flags);
}

vImage_Error vImageConvert_16UToF(const vImage_Buffer *src, const vImage_Buffer *dest, float offset, float scale, vImage_Flags flags)
{
  return MEMORY[0x270EDEF50](src, dest, *(void *)&flags, offset, scale);
}

vImage_Error vImageConvert_420Yp8_CbCr8ToARGB8888(const vImage_Buffer *srcYp, const vImage_Buffer *srcCbCr, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint8_t alpha, vImage_Flags flags)
{
  return MEMORY[0x270EDEF70](srcYp, srcCbCr, dest, info, permuteMap, alpha, *(void *)&flags);
}

vImage_Error vImageConvert_ARGB8888To420Yp8_CbCr8(const vImage_Buffer *src, const vImage_Buffer *destYp, const vImage_Buffer *destCbCr, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x270EDEF88](src, destYp, destCbCr, info, permuteMap, *(void *)&flags);
}

vImage_Error vImageConvert_ARGBFFFFtoARGB8888_dithered(const vImage_Buffer *src, const vImage_Buffer *dest, const Pixel_FFFF maxFloat, const Pixel_FFFF minFloat, int dither, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x270EDEFB8](src, dest, maxFloat, minFloat, *(void *)&dither, permuteMap, *(void *)&flags);
}

vImage_Error vImageConvert_ARGBFFFFtoPlanarF(const vImage_Buffer *srcARGB, const vImage_Buffer *destA, const vImage_Buffer *destR, const vImage_Buffer *destG, const vImage_Buffer *destB, vImage_Flags flags)
{
  return MEMORY[0x270EDEFC8](srcARGB, destA, destR, destG, destB, *(void *)&flags);
}

vImage_Error vImageConvert_ARGBToYpCbCr_GenerateConversion(const vImage_ARGBToYpCbCrMatrix *matrix, const vImage_YpCbCrPixelRange *pixelRange, vImage_ARGBToYpCbCr *outInfo, vImageARGBType inARGBType, vImageYpCbCrType outYpCbCrType, vImage_Flags flags)
{
  return MEMORY[0x270EDEFE0](matrix, pixelRange, outInfo, *(void *)&inARGBType, *(void *)&outYpCbCrType, *(void *)&flags);
}

vImage_Error vImageConvert_Planar16FtoPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x270EDF020](src, dest, *(void *)&flags);
}

vImage_Error vImageConvert_Planar8ToBGRX8888(const vImage_Buffer *blue, const vImage_Buffer *green, const vImage_Buffer *red, Pixel_8 alpha, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x270EDF038](blue, green, red, alpha, dest, *(void *)&flags);
}

vImage_Error vImageConvert_Planar8ToBGRXFFFF(const vImage_Buffer *blue, const vImage_Buffer *green, const vImage_Buffer *red, Pixel_F alpha, const vImage_Buffer *dest, const Pixel_FFFF maxFloat, const Pixel_FFFF minFloat, vImage_Flags flags)
{
  return MEMORY[0x270EDF050](blue, green, red, dest, maxFloat, minFloat, *(void *)&flags, alpha);
}

vImage_Error vImageConvert_Planar8ToXRGB8888(Pixel_8 alpha, const vImage_Buffer *red, const vImage_Buffer *green, const vImage_Buffer *blue, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x270EDF060](alpha, red, green, blue, dest, *(void *)&flags);
}

vImage_Error vImageConvert_Planar8ToXRGBFFFF(Pixel_F alpha, const vImage_Buffer *red, const vImage_Buffer *green, const vImage_Buffer *blue, const vImage_Buffer *dest, const Pixel_FFFF maxFloat, const Pixel_FFFF minFloat, vImage_Flags flags)
{
  return MEMORY[0x270EDF068](red, green, blue, dest, maxFloat, minFloat, *(void *)&flags, alpha);
}

vImage_Error vImageConvert_Planar8toPlanar16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x270EDF088](src, dest, *(void *)&flags);
}

vImage_Error vImageConvert_Planar8toPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, Pixel_F maxFloat, Pixel_F minFloat, vImage_Flags flags)
{
  return MEMORY[0x270EDF090](src, dest, *(void *)&flags, maxFloat, minFloat);
}

vImage_Error vImageConvert_PlanarFToBGRX8888(const vImage_Buffer *blue, const vImage_Buffer *green, const vImage_Buffer *red, Pixel_8 alpha, const vImage_Buffer *dest, const Pixel_FFFF maxFloat, const Pixel_FFFF minFloat, vImage_Flags flags)
{
  return MEMORY[0x270EDF0B0](blue, green, red, alpha, dest, maxFloat, minFloat, *(void *)&flags);
}

vImage_Error vImageConvert_PlanarFToBGRXFFFF(const vImage_Buffer *blue, const vImage_Buffer *green, const vImage_Buffer *red, Pixel_F alpha, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x270EDF0C0](blue, green, red, dest, *(void *)&flags, alpha);
}

vImage_Error vImageConvert_PlanarFToXRGB8888(Pixel_8 alpha, const vImage_Buffer *red, const vImage_Buffer *green, const vImage_Buffer *blue, const vImage_Buffer *dest, const Pixel_FFFF maxFloat, const Pixel_FFFF minFloat, vImage_Flags flags)
{
  return MEMORY[0x270EDF0D8](alpha, red, green, blue, dest, maxFloat, minFloat, *(void *)&flags);
}

vImage_Error vImageConvert_PlanarFtoPlanar16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x270EDF0E8](src, dest, *(void *)&flags);
}

vImage_Error vImageConvert_YpCbCrToARGB_GenerateConversion(const vImage_YpCbCrToARGBMatrix *matrix, const vImage_YpCbCrPixelRange *pixelRange, vImage_YpCbCrToARGB *outInfo, vImageYpCbCrType inYpCbCrType, vImageARGBType outARGBType, vImage_Flags flags)
{
  return MEMORY[0x270EDF140](matrix, pixelRange, outInfo, *(void *)&inYpCbCrType, *(void *)&outARGBType, *(void *)&flags);
}

vImage_Error vImageCopyBuffer(const vImage_Buffer *src, const vImage_Buffer *dest, size_t pixelSize, vImage_Flags flags)
{
  return MEMORY[0x270EDF1A0](src, dest, pixelSize, *(void *)&flags);
}

vImage_Error vImagePermuteChannels_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x270EDF268](src, dest, permuteMap, *(void *)&flags);
}

vImage_Error vImagePermuteChannels_ARGBFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x270EDF278](src, dest, permuteMap, *(void *)&flags);
}

vImage_Error vImageRotate90_ARGB16U(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_ARGB_16U backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF2A0](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate90_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_8888 backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF2A8](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate90_ARGBFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_FFFF backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF2B8](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate90_Planar16F(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_16F backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF2D0](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate90_Planar16U(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_16U backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF2D8](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate90_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_8 backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF2E8](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate90_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_F backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF300](src, dest, rotationConstant, *(void *)&flags, backColor);
}

vImage_Error vImageScale_ARGB16F(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF308](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF328](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_ARGBFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF340](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_CbCr8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF358](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_Planar16F(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF360](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF380](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF390](src, dest, tempBuffer, *(void *)&flags);
}