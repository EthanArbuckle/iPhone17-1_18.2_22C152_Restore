uint64_t CVHWAFeatureExtractionCreate(void *a1)
{
  void *v2;
  void *v3;
  uint64_t result;

  if (!a1) {
    return 2;
  }
  v2 = operator new(0x18uLL, MEMORY[0x263F8C180]);
  if (!v2) {
    return 3;
  }
  v3 = v2;
  result = sub_219499700(v2);
  if (result) {
    return 1;
  }
  *a1 = v3;
  return result;
}

uint64_t CVHWAFeatureExtractionRelease(uint64_t a1)
{
  if (!a1) {
    return 4;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    if (sub_2194DC3D4(*(void *)(a1 + 8))) {
      return 1;
    }
  }
  else if (sub_2194998A4(*(void *)a1))
  {
    return 1;
  }
  MEMORY[0x21D48B5B0](a1, 0x1020C40A95220FALL);
  return 0;
}

uint64_t CVHWAFeatureExtractionInitDirect(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 4;
  }
  if (!a2) {
    return 2;
  }
  int v4 = *(unsigned __int8 *)(a2 + 488);
  *(unsigned char *)(a1 + 16) = v4;
  if (!v4) {
    return !sub_2194C0128((int *)(a2 + 64)) || sub_219499A64(*(void *)a1, a2);
  }
  v5 = (uint64_t *)(a1 + 8);
  return sub_2194DC350((void *)(a1 + 8)) || sub_2194DC478(*v5, (int *)(a2 + 184));
}

uint64_t CVHWAFeatureExtractionInitDirectWithLacc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 4;
  }
  if (!a2) {
    return 2;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    sub_21947C180(&v15);
    if (**(int **)(v15 + 56) <= 4)
    {
      v8[0] = &v15;
      v8[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v8[2] = std::chrono::system_clock::now().__d_.__rep_;
      int v9 = 4;
      v10 = "unknown file";
      int v11 = 153;
      uint64_t v13 = 0;
      v14 = 0;
      v12 = "unknown function";
      sub_2194F675C((uint64_t)v8, "%s has no effect in swproxy", "CVHWAFeatureExtractionInitDirectWithLacc");
      sub_21947C298((uint64_t)v8);
      sub_21947C298((uint64_t)v8);
      v6 = v14;
      if (v14)
      {
        if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  if (!sub_2194C0128((int *)(a2 + 64))) {
    return 1;
  }
  *(void *)(a2 + 168) = a3;
  uint64_t result = sub_219499A64(*(void *)a1, a2);
  if (result) {
    return 1;
  }
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

void sub_21947C16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21947C180(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C33950, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C33950))
  {
    sub_2194F6258(&v4);
    sub_21947DECC(__p, "cv3d.vio");
    sub_2194F9AB0(&v4, (uint64_t)__p, &qword_267C33948);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))nullsub_1, &qword_267C33948, &dword_219476000);
    __cxa_guard_release(&qword_267C33950);
  }
  *a1 = qword_267C33948;
}

void sub_21947C240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C33950);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C33950);
  _Unwind_Resume(a1);
}

void sub_21947C298(uint64_t a1)
{
  v1 = *(uint64_t **)a1;
  if (*(void *)a1)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    if (v3)
    {
      int v4 = (void *)(*v1 + 16);
      if (*(char *)(*v1 + 39) < 0) {
        int v4 = (void *)*v4;
      }
      long long v5 = *(_OWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 24);
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = *(_DWORD *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      v10 = *(std::__shared_weak_count **)(a1 + 64);
      v12 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = v4;
      long long v14 = v5;
      int v15 = v6;
      uint64_t v16 = v7;
      int v17 = v8;
      uint64_t v18 = v9;
      uint64_t v19 = v3;
      v20 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v6 >= **(_DWORD **)(*v1 + 56))
      {
        sub_2194F99E8(*v1, (uint64_t)&v13);
        v10 = v20;
      }
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      int v11 = *(std::__shared_weak_count **)(a1 + 64);
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = 0;
      if (v11)
      {
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
}

void sub_21947C444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_21947E03C((uint64_t)va1);
  sub_21947E0B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21947C460(uint64_t a1)
{
  sub_21947C298(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t CVHWAFeatureExtractionProcess(uint64_t a1, __CVBuffer *a2, CVPixelBufferRef *a3)
{
  CVPixelBufferRef v7 = a2;
  if (!a1) {
    return 4;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    if (!sub_2194DCA68(*(void *)(a1 + 8)))
    {
      sub_2194C5CBC(*(int64x2_t **)(a1 + 8), a3);
      return 0;
    }
    return 1;
  }
  CVPixelBufferRef v6 = 0;
  uint64_t result = sub_21949A2BC(*(void ***)a1, &v7, &v6);
  if (result) {
    return 1;
  }
  *a3 = v6;
  return result;
}

uint64_t CVHWAFeatureExtractionProcessKeyOutputs(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 4;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    sub_21947C180(&v13);
    if (**(int **)(v13 + 56) <= 4)
    {
      v6[0] = &v13;
      v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v6[2] = std::chrono::system_clock::now().__d_.__rep_;
      int v7 = 4;
      int v8 = "unknown file";
      int v9 = 216;
      uint64_t v11 = 0;
      v12 = 0;
      v10 = "unknown function";
      sub_2194F675C((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionProcessKeyOutputs");
      sub_21947C298((uint64_t)v6);
      sub_21947C298((uint64_t)v6);
      int v4 = v12;
      if (v12)
      {
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  return sub_21949A128(*(void *)a1, a2, 0) != 0;
}

void sub_21947C6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionProcessHwOutputs(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 4;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    sub_21947C180(&v13);
    if (**(int **)(v13 + 56) <= 4)
    {
      v6[0] = &v13;
      v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v6[2] = std::chrono::system_clock::now().__d_.__rep_;
      int v7 = 4;
      int v8 = "unknown file";
      int v9 = 234;
      uint64_t v11 = 0;
      v12 = 0;
      v10 = "unknown function";
      sub_2194F675C((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionProcessHwOutputs");
      sub_21947C298((uint64_t)v6);
      sub_21947C298((uint64_t)v6);
      int v4 = v12;
      if (v12)
      {
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  return sub_21949A128(*(void *)a1, a2, 0) != 0;
}

void sub_21947C840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionProcessHwOutputsToOutBuf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 4;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    sub_21947C180(&v15);
    if (**(int **)(v15 + 56) <= 4)
    {
      v8[0] = &v15;
      v8[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v8[2] = std::chrono::system_clock::now().__d_.__rep_;
      int v9 = 4;
      v10 = "unknown file";
      int v11 = 252;
      uint64_t v13 = 0;
      long long v14 = 0;
      v12 = "unknown function";
      sub_2194F675C((uint64_t)v8, "%s has no effect in swproxy", "CVHWAFeatureExtractionProcessHwOutputsToOutBuf");
      sub_21947C298((uint64_t)v8);
      sub_21947C298((uint64_t)v8);
      CVPixelBufferRef v6 = v14;
      if (v14)
      {
        if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  return sub_21949A128(*(void *)a1, a2, a3) != 0;
}

void sub_21947C9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionInitGPWithSession(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!a1) {
    return 4;
  }
  if (!a2) {
    return 2;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    sub_21947C180(&v15);
    if (**(int **)(v15 + 56) <= 4)
    {
      v8[0] = &v15;
      v8[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v8[2] = std::chrono::system_clock::now().__d_.__rep_;
      int v9 = 4;
      v10 = "unknown file";
      int v11 = 280;
      uint64_t v13 = 0;
      long long v14 = 0;
      v12 = "unknown function";
      sub_2194F675C((uint64_t)v8, "%s has no effect in swproxy", "CVHWAFeatureExtractionInitGPWithSession");
      sub_21947C298((uint64_t)v8);
      sub_21947C298((uint64_t)v8);
      CVPixelBufferRef v6 = v14;
      if (v14)
      {
        if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  if (!sub_2194C0128((int *)(a2 + 64))) {
    return 1;
  }
  uint64_t result = sub_2194998E4(*(void *)a1, a2, a3);
  if (result) {
    return 1;
  }
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

void sub_21947CB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionInitGP(uint64_t a1, uint64_t a2)
{
  return CVHWAFeatureExtractionInitGPWithSession(a1, a2, 0);
}

CVPixelBufferRef CVHWAFeatureExtractionGetActionBuffer(uint64_t a1)
{
  if (!a1) {
    sub_219501614();
  }
  if (!*(unsigned char *)(a1 + 16)) {
    return sub_219499FB8(*(void *)a1);
  }
  sub_21947C180(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return sub_219499FB8(*(void *)a1);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  CVPixelBufferRef v6 = "unknown file";
  int v7 = 309;
  uint64_t v9 = 0;
  v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetActionBuffer");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return sub_219499FB8(*(void *)a1);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_219499FB8(*(void *)a1);
}

void sub_21947CC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

CVPixelBufferRef CVHWAFeatureExtractionGetOperationBuffer(uint64_t a1)
{
  if (!a1) {
    sub_21950164C();
  }
  if (!*(unsigned char *)(a1 + 16)) {
    return sub_21949A018(*(void *)a1);
  }
  sub_21947C180(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return sub_21949A018(*(void *)a1);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  CVPixelBufferRef v6 = "unknown file";
  int v7 = 318;
  uint64_t v9 = 0;
  v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetOperationBuffer");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return sub_21949A018(*(void *)a1);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_21949A018(*(void *)a1);
}

void sub_21947CDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetActionSizeInBytes(uint64_t a1)
{
  if (!a1) {
    sub_219501684();
  }
  if (!*(unsigned char *)(a1 + 16)) {
    return sub_219499FF8(*(void *)a1);
  }
  sub_21947C180(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return sub_219499FF8(*(void *)a1);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  CVPixelBufferRef v6 = "unknown file";
  int v7 = 327;
  uint64_t v9 = 0;
  v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetActionSizeInBytes");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return sub_219499FF8(*(void *)a1);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_219499FF8(*(void *)a1);
}

void sub_21947CF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetOperationSizeInBytes(uint64_t a1)
{
  if (!a1) {
    sub_2195016BC();
  }
  if (!*(unsigned char *)(a1 + 16)) {
    return sub_21949A058(*(void *)a1);
  }
  sub_21947C180(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return sub_21949A058(*(void *)a1);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  CVPixelBufferRef v6 = "unknown file";
  int v7 = 336;
  uint64_t v9 = 0;
  v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetOperationSizeInBytes");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return sub_21949A058(*(void *)a1);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_21949A058(*(void *)a1);
}

void sub_21947D058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetOutputSizeInBytes(uint64_t a1)
{
  if (!a1) {
    sub_2195016F4();
  }
  if (!*(unsigned char *)(a1 + 16)) {
    return sub_21949A078(*(void *)a1);
  }
  sub_21947C180(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return sub_21949A078(*(void *)a1);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  CVPixelBufferRef v6 = "unknown file";
  int v7 = 345;
  uint64_t v9 = 0;
  v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetOutputSizeInBytes");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return sub_21949A078(*(void *)a1);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_21949A078(*(void *)a1);
}

void sub_21947D19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetKeypointAndDescriptorSizeInBytes(uint64_t a1)
{
  if (!a1) {
    sub_21950172C();
  }
  if (!*(unsigned char *)(a1 + 16)) {
    return sub_21949A098(*(void *)a1);
  }
  sub_21947C180(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return sub_21949A098(*(void *)a1);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  CVPixelBufferRef v6 = "unknown file";
  int v7 = 355;
  uint64_t v9 = 0;
  v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetKeypointAndDescriptorSizeInBytes");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return sub_21949A098(*(void *)a1);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_21949A098(*(void *)a1);
}

void sub_21947D2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetOutputReserveSizeInBytes(uint64_t a1)
{
  if (!a1) {
    sub_219501764();
  }
  if (!*(unsigned char *)(a1 + 16)) {
    return sub_21949A098(*(void *)a1);
  }
  sub_21947C180(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return sub_21949A098(*(void *)a1);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  CVPixelBufferRef v6 = "unknown file";
  int v7 = 364;
  uint64_t v9 = 0;
  v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetOutputReserveSizeInBytes");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return sub_21949A098(*(void *)a1);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_21949A098(*(void *)a1);
}

void sub_21947D424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

CVPixelBufferRef CVHWAFeatureExtractionGetLaccBuffer(uint64_t a1)
{
  if (!a1) {
    sub_21950179C();
  }
  if (!*(unsigned char *)(a1 + 16)) {
    return sub_21949A0B8(*(void *)a1);
  }
  sub_21947C180(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return sub_21949A0B8(*(void *)a1);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  CVPixelBufferRef v6 = "unknown file";
  int v7 = 373;
  uint64_t v9 = 0;
  v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetLaccBuffer");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return sub_21949A0B8(*(void *)a1);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_21949A0B8(*(void *)a1);
}

void sub_21947D568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetLaccSizeInBytes(uint64_t a1)
{
  if (!a1) {
    sub_2195017D4();
  }
  if (!*(unsigned char *)(a1 + 16)) {
    return sub_21949A108(*(void *)a1);
  }
  sub_21947C180(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return sub_21949A108(*(void *)a1);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  CVPixelBufferRef v6 = "unknown file";
  int v7 = 382;
  uint64_t v9 = 0;
  v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetLaccSizeInBytes");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return sub_21949A108(*(void *)a1);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_21949A108(*(void *)a1);
}

void sub_21947D6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetDynamicThresholdingEnable(uint64_t a1)
{
  if (!a1) {
    sub_21950180C();
  }
  if (!*(unsigned char *)(a1 + 16)) {
    return sub_21949A544(*(void *)a1);
  }
  sub_21947C180(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return sub_21949A544(*(void *)a1);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  CVPixelBufferRef v6 = "unknown file";
  int v7 = 391;
  uint64_t v9 = 0;
  v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetDynamicThresholdingEnable");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return sub_21949A544(*(void *)a1);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_21949A544(*(void *)a1);
}

void sub_21947D7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetDynamicThresholdingTargetKeypointsConfigCount(uint64_t a1)
{
  if (!a1) {
    sub_219501844();
  }
  if (!*(unsigned char *)(a1 + 16)) {
    return sub_21949A564(*(void *)a1);
  }
  sub_21947C180(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return sub_21949A564(*(void *)a1);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  CVPixelBufferRef v6 = "unknown file";
  int v7 = 400;
  uint64_t v9 = 0;
  v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetDynamicThresholdingTargetKeypointsConfigCount");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return sub_21949A564(*(void *)a1);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_21949A564(*(void *)a1);
}

void sub_21947D934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetDynamicThresholdingTargetKeypointsAtIndex(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    sub_21950187C();
  }
  if (*(unsigned char *)(a1 + 16))
  {
    sub_21947C180(&v13);
    if (**(int **)(v13 + 56) <= 4)
    {
      v6[0] = &v13;
      v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v6[2] = std::chrono::system_clock::now().__d_.__rep_;
      int v7 = 4;
      int v8 = "unknown file";
      int v9 = 409;
      uint64_t v11 = 0;
      v12 = 0;
      v10 = "unknown function";
      sub_2194F675C((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetDynamicThresholdingTargetKeypointsAtIndex");
      sub_21947C298((uint64_t)v6);
      sub_21947C298((uint64_t)v6);
      int v4 = v12;
      if (v12)
      {
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  if (a2 >= 9) {
    sub_2195018B4();
  }
  return sub_21949A580(*(void *)a1, a2);
}

void sub_21947DA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetDynamicThresholdingMaxKeypointsConfigCount(uint64_t a1)
{
  if (!a1) {
    sub_2195018EC();
  }
  if (!*(unsigned char *)(a1 + 16)) {
    return sub_21949A5B0(*(void *)a1);
  }
  sub_21947C180(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return sub_21949A5B0(*(void *)a1);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  CVPixelBufferRef v6 = "unknown file";
  int v7 = 421;
  uint64_t v9 = 0;
  v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetDynamicThresholdingMaxKeypointsConfigCount");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return sub_21949A5B0(*(void *)a1);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_21949A5B0(*(void *)a1);
}

void sub_21947DBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetDynamicThresholdingMaxKeypointsAtIndex(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    sub_219501924();
  }
  if (*(unsigned char *)(a1 + 16))
  {
    sub_21947C180(&v13);
    if (**(int **)(v13 + 56) <= 4)
    {
      v6[0] = &v13;
      v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v6[2] = std::chrono::system_clock::now().__d_.__rep_;
      int v7 = 4;
      int v8 = "unknown file";
      int v9 = 430;
      uint64_t v11 = 0;
      v12 = 0;
      v10 = "unknown function";
      sub_2194F675C((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetDynamicThresholdingMaxKeypointsAtIndex");
      sub_21947C298((uint64_t)v6);
      sub_21947C298((uint64_t)v6);
      int v4 = v12;
      if (v12)
      {
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  if (a2 >= 9) {
    sub_21950195C();
  }
  return sub_21949A5CC(*(void *)a1, a2);
}

void sub_21947DD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionUpdateConfig(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 4;
  }
  if (!a2) {
    return 2;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    sub_21947C180(&v13);
    if (**(int **)(v13 + 56) <= 4)
    {
      v6[0] = &v13;
      v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v6[2] = std::chrono::system_clock::now().__d_.__rep_;
      int v7 = 4;
      int v8 = "unknown file";
      int v9 = 450;
      uint64_t v11 = 0;
      v12 = 0;
      v10 = "unknown function";
      sub_2194F675C((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionUpdateConfig");
      sub_21947C298((uint64_t)v6);
      sub_21947C298((uint64_t)v6);
      int v4 = v12;
      if (v12)
      {
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  return sub_21949A5FC(*(void ***)a1, a2) != 0;
}

void sub_21947DE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21947DECC(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21947DF80();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    CVPixelBufferRef v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    CVPixelBufferRef v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sub_21947DF80()
{
}

void sub_21947DF98(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_21947DFF4(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2643A5898, MEMORY[0x263F8C060]);
}

void sub_21947DFE0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_21947DFF4(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void sub_21947E028(void *a1)
{
}

uint64_t sub_21947E03C(uint64_t result)
{
  uint64_t v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 64);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_21947E0B8(uint64_t result)
{
  uint64_t v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigCreateWithPreset(uint64_t *a1, int a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  strcpy(&v27[8], "\n");
  *(void *)&v27[10] = 0xB000901010100;
  *(_WORD *)&v27[18] = 3;
  *(_OWORD *)&v27[20] = xmmword_21950BE50;
  v27[36] = 1;
  *(_DWORD *)&v27[40] = 0;
  *(_DWORD *)&v27[43] = 0;
  *(void *)v28 = 1061997773;
  v28[8] = 0;
  *(_DWORD *)&v28[9] = 65537;
  *(_DWORD *)&v28[48] = 1065353216;
  *(_OWORD *)&v28[16] = xmmword_21950BEA0;
  *(_OWORD *)&v28[32] = unk_21950BEB0;
  v28[52] = 1;
  *(void *)&v28[56] = 0x3F00000041A00000;
  *(void *)&long long v29 = 0xB43E4CCCCDLL;
  DWORD2(v29) = 0;
  BYTE12(v29) = 0;
  LODWORD(v30) = 2;
  WORD2(v30) = 0;
  *((void *)&v30 + 1) = 0;
  uint64_t v31 = 0xDEC000005CCLL;
  *(_DWORD *)v32 = 2;
  v32[4] = 0;
  *(int64x2_t *)&v32[8] = vdupq_n_s64(0x280uLL);
  v32[24] = 0;
  v35[0] = 5;
  strcpy((char *)&__p, "/tmp/");
  v35[1] = 1;
  *(void *)&v35[5] = 0x90000002DLL;
  *(void *)&long long v36 = 5000;
  BYTE8(v36) = 1;
  HIDWORD(v36) = 1061997773;
  v37[0] = 0;
  *(int64x2_t *)&v37[8] = vdupq_n_s64(1uLL);
  *(void *)&v37[24] = 5;
  *(_WORD *)v38 = 256;
  *(_WORD *)&v38[104] = 0;
  *(_OWORD *)&v38[108] = xmmword_21950BE60;
  *(_OWORD *)&v38[124] = xmmword_21950BE70;
  *(_OWORD *)&v38[140] = xmmword_21950BEC4;
  *(_OWORD *)&v38[156] = unk_21950BED4;
  *(_DWORD *)&v38[172] = 0x4000;
  int v39 = 1045220557;
  char v40 = 0;
  if (kCVHWAConfigPresetMobileSfM == a2)
  {
    if (!sub_2194C00E8())
    {
      uint64_t v3 = 7;
      if ((v35[0] & 0x80) != 0) {
        goto LABEL_20;
      }
      return v3;
    }
    *(_DWORD *)&v50[3] = 0;
    *(_DWORD *)&v50[6] = 0;
    *(_DWORD *)&v49[35] = 1065353216;
    *(_OWORD *)&v49[3] = xmmword_21950BEA0;
    *(_OWORD *)&v49[19] = unk_21950BEB0;
    *(void *)v26 = 0x96000000C80;
    *(_DWORD *)&v26[8] = 3200;
    *(void *)&v26[12] = 0;
    *(_WORD *)&v26[20] = 300;
    v26[22] = -1;
    *(void *)&v26[24] = 0x138800004268;
    *(void *)v27 = 0xA000500010001;
    strcpy(&v27[8], "\n");
    *(void *)&v27[10] = 0xB000901010101;
    *(_WORD *)&v27[18] = 3;
    *(_OWORD *)&v27[20] = xmmword_21950BE80;
    v27[36] = 2;
    *(void *)&v27[37] = *(unsigned int *)v50;
    *(_WORD *)&v27[45] = 0;
    *(void *)v28 = 1061997773;
    v28[8] = 1;
    *(_DWORD *)&v28[9] = 0;
    *(_OWORD *)&v28[13] = *(_OWORD *)v49;
    *(_OWORD *)&v28[29] = *(_OWORD *)&v49[16];
    *(void *)&v28[44] = *(void *)&v49[31];
    v28[52] = 1;
    *(void *)&v28[56] = 0x3F00000041A00000;
    *(void *)&long long v29 = 0xB43E4CCCCDLL;
    BYTE8(v29) = 1;
    *(_DWORD *)((char *)&v29 + 9) = 0x1000000;
    LODWORD(v30) = 2;
    WORD2(v30) = 0;
    *((void *)&v30 + 1) = 0;
    uint64_t v31 = 0xDEC000005CCLL;
    *(_DWORD *)v32 = 2;
    v32[4] = 0;
    *(int64x2_t *)&v32[8] = vdupq_n_s64(0x280uLL);
    v32[24] = 0;
    if ((v35[0] & 0x80000000) != 0) {
      operator delete(__p);
    }
    __p = (void *)0x2F706D742FLL;
    *(void *)v34 = *(void *)v48;
    *(void *)&v34[7] = *(void *)&v48[7];
    *(_WORD *)v35 = 261;
    *(_WORD *)&v35[2] = v44;
    v35[4] = v45;
    *(void *)&v35[5] = 0x90000002DLL;
    *(void *)&long long v36 = 5000;
    BYTE8(v36) = 1;
    *(_WORD *)((char *)&v36 + 9) = v42;
    BYTE11(v36) = v43;
    HIDWORD(v36) = 1061997773;
    v37[0] = 0;
    *(_DWORD *)&v37[1] = *(_DWORD *)v41;
    *(_DWORD *)&v37[4] = *(_DWORD *)&v41[3];
    *(int64x2_t *)&v37[8] = vdupq_n_s64(1uLL);
    *(void *)&v37[24] = 5;
    *(_WORD *)v38 = 256;
    *(_OWORD *)&v38[50] = v46[3];
    *(_OWORD *)&v38[66] = v46[4];
    *(_OWORD *)&v38[82] = *(_OWORD *)v47;
    *(_OWORD *)&v38[2] = v46[0];
    *(_OWORD *)&v38[18] = v46[1];
    *(_OWORD *)&v38[34] = v46[2];
    *(void *)&v38[96] = *(void *)&v47[14];
    *(_WORD *)&v38[104] = 0;
    *(_OWORD *)&v38[108] = xmmword_21950BE60;
    *(_OWORD *)&v38[124] = xmmword_21950BE70;
    *(_DWORD *)&v38[172] = 0x4000;
    *(_OWORD *)&v38[140] = xmmword_21950BEC4;
    *(_OWORD *)&v38[156] = unk_21950BED4;
    goto LABEL_18;
  }
  if (kCVHWAConfigPresetProxyStaten == a2)
  {
    *(_DWORD *)&v49[3] = 0;
    *(_DWORD *)&v49[6] = 0;
    v28[8] = 0;
    *(_DWORD *)((char *)&v46[2] + 3) = 1065353216;
    *(_OWORD *)((char *)v46 + 3) = xmmword_21950BEA0;
    *(_OWORD *)((char *)&v46[1] + 3) = unk_21950BEB0;
    DWORD2(v29) = 0;
    BYTE12(v29) = 0;
    *(void *)v26 = 0x1E000000280;
    *(_DWORD *)&v26[8] = 640;
    *(void *)&v26[12] = 0;
    strcpy(&v26[20], "-");
    v26[22] = -1;
    *(int32x2_t *)&v26[24] = vdup_n_s32(0x1388u);
    *(void *)v27 = 0xA000500010001;
    strcpy(&v27[8], "\n");
    *(_DWORD *)&v27[10] = 16843008;
    *(_DWORD *)&v27[14] = 720905;
    *(_WORD *)&v27[18] = 3;
    *(_OWORD *)&v27[20] = xmmword_21950BE50;
    v27[36] = 1;
    *(void *)&v27[37] = *(void *)v49;
    *(_WORD *)&v27[45] = 0;
    *(void *)v28 = 1061997773;
    *(_DWORD *)&v28[9] = 65537;
    *(_OWORD *)&v28[13] = v46[0];
    *(_OWORD *)&v28[29] = v46[1];
    *(void *)&v28[44] = *(void *)((char *)&v46[1] + 15);
    v28[52] = 1;
    *(void *)&v28[56] = 0x3F00000041A00000;
    *(void *)&long long v29 = 0xB43E4CCCCDLL;
    LODWORD(v30) = 2;
    WORD2(v30) = 0;
    *((void *)&v30 + 1) = 0;
    uint64_t v31 = 0xDEC000005CCLL;
    *(_DWORD *)v32 = 0;
LABEL_10:
    v32[4] = 0;
    *(int64x2_t *)&v32[8] = vdupq_n_s64(0x280uLL);
    v32[24] = 0;
    *(_WORD *)v35 = 261;
    *(void *)&v35[5] = 0x90000002DLL;
    __p = (void *)0x2F706D742FLL;
    *(void *)&long long v36 = 5000;
    BYTE8(v36) = 1;
    HIDWORD(v36) = 1061997773;
    goto LABEL_11;
  }
  if (kCVHWAConfigPresetProxyCrete == a2)
  {
    *(_DWORD *)&v49[3] = 0;
    *(_DWORD *)&v49[6] = 0;
    v28[8] = 0;
    *(_DWORD *)((char *)&v46[2] + 3) = 1065353216;
    *(_OWORD *)((char *)v46 + 3) = xmmword_21950BEA0;
    *(_OWORD *)((char *)&v46[1] + 3) = unk_21950BEB0;
    DWORD2(v29) = 0;
    BYTE12(v29) = 0;
    *(void *)v26 = 0x1E000000280;
    *(_DWORD *)&v26[8] = 640;
    *(void *)&v26[12] = 0;
    strcpy(&v26[20], "-");
    v26[22] = -1;
    *(int32x2_t *)&v26[24] = vdup_n_s32(0x1388u);
    *(void *)v27 = 0xA000500010001;
    strcpy(&v27[8], "\n");
    *(_DWORD *)&v27[10] = 16843008;
    *(_DWORD *)&v27[14] = 720905;
    *(_WORD *)&v27[18] = 3;
    *(_OWORD *)&v27[20] = xmmword_21950BE50;
    v27[36] = 1;
    *(void *)&v27[37] = *(void *)v49;
    *(_WORD *)&v27[45] = 0;
    *(void *)v28 = 1061997773;
    *(_DWORD *)&v28[9] = 65537;
    *(_OWORD *)&v28[13] = v46[0];
    *(_OWORD *)&v28[29] = v46[1];
    *(void *)&v28[44] = *(void *)((char *)&v46[1] + 15);
    v28[52] = 1;
    *(void *)&v28[56] = 0x3F00000041A00000;
    *(void *)&long long v29 = 0xB43E4CCCCDLL;
    LODWORD(v30) = 2;
    WORD2(v30) = 0;
    *((void *)&v30 + 1) = 0;
    uint64_t v31 = 0xDEC000005CCLL;
    *(_DWORD *)v32 = 2;
    goto LABEL_10;
  }
  if (kCVHWAConfigPresetProxyColl == a2)
  {
    *(_DWORD *)&v49[3] = 0;
    *(_DWORD *)&v49[6] = 0;
    v28[8] = 0;
    *(_DWORD *)((char *)&v46[2] + 3) = 1065353216;
    *(_OWORD *)((char *)v46 + 3) = xmmword_21950BEA0;
    *(_OWORD *)((char *)&v46[1] + 3) = unk_21950BEB0;
    DWORD2(v29) = 0;
    BYTE12(v29) = 0;
    *(void *)v26 = 0x1E000000280;
    *(_DWORD *)&v26[8] = 640;
    *(void *)&v26[12] = 0;
    strcpy(&v26[20], "-");
    v26[22] = -1;
    *(int32x2_t *)&v26[24] = vdup_n_s32(0x1388u);
    *(void *)v27 = 0xA000500010001;
    strcpy(&v27[8], "\n");
    *(_DWORD *)&v27[10] = 16843008;
    *(_DWORD *)&v27[14] = 720905;
    *(_WORD *)&v27[18] = 3;
    *(_OWORD *)&v27[20] = xmmword_21950BE50;
    v27[36] = 1;
    *(void *)&v27[37] = *(void *)v49;
    *(_WORD *)&v27[45] = 0;
    *(void *)v28 = 1061997773;
    *(_DWORD *)&v28[9] = 65537;
    *(_OWORD *)&v28[13] = v46[0];
    *(_OWORD *)&v28[29] = v46[1];
    *(void *)&v28[44] = *(void *)((char *)&v46[1] + 15);
    v28[52] = 1;
    *(void *)&v28[56] = 0x3F00000041A00000;
    *(void *)&long long v29 = 0xB43E4CCCCDLL;
    LODWORD(v30) = 2;
    WORD2(v30) = 0;
    *((void *)&v30 + 1) = 0;
    uint64_t v31 = 0xDEC000005CCLL;
    *(_DWORD *)v32 = 3;
    v32[4] = 0;
    *(int64x2_t *)&v32[8] = vdupq_n_s64(0x280uLL);
    v32[24] = 0;
    *(_WORD *)v35 = 261;
    *(void *)&v35[5] = 0x90000002DLL;
    __p = (void *)0x2F706D742FLL;
    *(void *)&long long v36 = 5000;
    BYTE8(v36) = 1;
    HIDWORD(v36) = 1061997773;
LABEL_11:
    v37[0] = 0;
    *(int64x2_t *)&v37[8] = vdupq_n_s64(1uLL);
    *(void *)&v37[24] = 5;
    *(_WORD *)v38 = 256;
    *(_WORD *)&v38[104] = 0;
    *(_OWORD *)&v38[108] = xmmword_21950BE60;
    *(_OWORD *)&v38[124] = xmmword_21950BE70;
    *(_DWORD *)&v38[172] = 0x4000;
    *(_OWORD *)&v38[140] = xmmword_21950BEC4;
    *(_OWORD *)&v38[156] = unk_21950BED4;
    int v39 = 1045220557;
    char v40 = 1;
    uint64_t v3 = CVHWAFeatureExtractionConfigCreate(a1);
    if (v3) {
      return v3;
    }
    goto LABEL_19;
  }
  *(_DWORD *)&v49[3] = 0;
  *(_DWORD *)&v49[6] = 0;
  v28[8] = 0;
  *(_DWORD *)((char *)&v46[2] + 3) = 1065353216;
  *(_OWORD *)((char *)v46 + 3) = xmmword_21950BEA0;
  *(_OWORD *)((char *)&v46[1] + 3) = unk_21950BEB0;
  DWORD2(v29) = 0;
  BYTE12(v29) = 0;
  *(void *)v26 = 0x1E000000280;
  *(_DWORD *)&v26[8] = 640;
  *(void *)&v26[12] = 0;
  strcpy(&v26[20], "-");
  v26[22] = -1;
  *(int32x2_t *)&v26[24] = vdup_n_s32(0x1388u);
  *(void *)v27 = 0xA000500010001;
  strcpy(&v27[8], "\n");
  *(_DWORD *)&v27[10] = 16843008;
  *(_DWORD *)&v27[14] = 720905;
  *(_WORD *)&v27[18] = 3;
  *(_OWORD *)&v27[20] = xmmword_21950BE50;
  v27[36] = 1;
  *(void *)&v27[37] = *(void *)v49;
  *(_WORD *)&v27[45] = 0;
  *(void *)v28 = 1061997773;
  *(_DWORD *)&v28[9] = 65537;
  *(_OWORD *)&v28[13] = v46[0];
  *(_OWORD *)&v28[29] = v46[1];
  *(void *)&v28[44] = *(void *)((char *)&v46[1] + 15);
  v28[52] = 1;
  *(void *)&v28[56] = 0x3F00000041A00000;
  *(void *)&long long v29 = 0xB43E4CCCCDLL;
  LODWORD(v30) = 2;
  WORD2(v30) = 0;
  *((void *)&v30 + 1) = 0;
  uint64_t v31 = 0xDEC000005CCLL;
  *(_DWORD *)v32 = 2;
  v32[4] = 0;
  *(int64x2_t *)&v32[8] = vdupq_n_s64(0x280uLL);
  v32[24] = 0;
  *(_WORD *)v35 = 261;
  *(void *)&v35[5] = 0x90000002DLL;
  __p = (void *)0x2F706D742FLL;
  *(void *)&long long v36 = 5000;
  BYTE8(v36) = 1;
  HIDWORD(v36) = 1061997773;
  v37[0] = 0;
  *(int64x2_t *)&v37[8] = vdupq_n_s64(1uLL);
  *(void *)&v37[24] = 5;
  *(_WORD *)v38 = 256;
  *(_WORD *)&v38[104] = 0;
  *(_OWORD *)&v38[108] = xmmword_21950BE60;
  *(_OWORD *)&v38[124] = xmmword_21950BE70;
  *(_DWORD *)&v38[172] = 0x4000;
  *(_OWORD *)&v38[140] = xmmword_21950BEC4;
  *(_OWORD *)&v38[156] = unk_21950BED4;
LABEL_18:
  int v39 = 1045220557;
  char v40 = 0;
  uint64_t v3 = CVHWAFeatureExtractionConfigCreate(a1);
  if (v3) {
    return v3;
  }
LABEL_19:
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)&v27[16];
  *(_OWORD *)(v4 + 32) = *(_OWORD *)v27;
  *(_OWORD *)(v4 + 48) = v5;
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v26;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)&v26[16];
  long long v6 = *(_OWORD *)&v27[32];
  long long v7 = *(_OWORD *)v28;
  long long v8 = *(_OWORD *)&v28[32];
  *(_OWORD *)(v4 + 96) = *(_OWORD *)&v28[16];
  *(_OWORD *)(v4 + 112) = v8;
  *(_OWORD *)(v4 + 64) = v6;
  *(_OWORD *)(v4 + 80) = v7;
  long long v9 = *(_OWORD *)&v28[48];
  long long v10 = v29;
  long long v11 = v30;
  *(void *)(v4 + 176) = v31;
  *(_OWORD *)(v4 + 144) = v10;
  *(_OWORD *)(v4 + 160) = v11;
  *(_OWORD *)(v4 + 128) = v9;
  long long v12 = *(_OWORD *)v32;
  *(_OWORD *)(v4 + 193) = *(_OWORD *)&v32[9];
  *(_OWORD *)(v4 + 184) = v12;
  std::string::operator=((std::string *)(v4 + 216), (const std::string *)&__p);
  uint64_t v3 = 0;
  long long v13 = *(_OWORD *)&v35[1];
  long long v14 = v36;
  long long v15 = *(_OWORD *)&v37[16];
  *(_OWORD *)(v4 + 272) = *(_OWORD *)v37;
  *(_OWORD *)(v4 + 288) = v15;
  *(_OWORD *)(v4 + 240) = v13;
  *(_OWORD *)(v4 + 256) = v14;
  long long v16 = *(_OWORD *)v38;
  long long v17 = *(_OWORD *)&v38[16];
  long long v18 = *(_OWORD *)&v38[48];
  *(_OWORD *)(v4 + 336) = *(_OWORD *)&v38[32];
  *(_OWORD *)(v4 + 352) = v18;
  *(_OWORD *)(v4 + 304) = v16;
  *(_OWORD *)(v4 + 320) = v17;
  long long v19 = *(_OWORD *)&v38[64];
  long long v20 = *(_OWORD *)&v38[80];
  long long v21 = *(_OWORD *)&v38[112];
  *(_OWORD *)(v4 + 400) = *(_OWORD *)&v38[96];
  *(_OWORD *)(v4 + 416) = v21;
  *(_OWORD *)(v4 + 368) = v19;
  *(_OWORD *)(v4 + 384) = v20;
  long long v22 = *(_OWORD *)&v38[128];
  long long v23 = *(_OWORD *)&v38[144];
  long long v24 = *(_OWORD *)&v38[160];
  *(_DWORD *)(v4 + 480) = v39;
  *(_OWORD *)(v4 + 448) = v23;
  *(_OWORD *)(v4 + 464) = v24;
  *(_OWORD *)(v4 + 432) = v22;
  *(unsigned char *)(v4 + 488) = v40;
  if ((v35[0] & 0x80) != 0) {
LABEL_20:
  }
    operator delete(__p);
  return v3;
}

void sub_21947EBD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CVHWAFeatureExtractionConfigCreate(void *a1)
{
  if (!a1) {
    return 4;
  }
  v2 = (char *)operator new(0x1F0uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = 3;
  if (v2)
  {
    *(void *)v2 = 0x1E000000280;
    *((_DWORD *)v2 + 2) = 640;
    *(void *)(v2 + 12) = 0;
    *((_WORD *)v2 + 10) = 45;
    v2[22] = -1;
    *((int32x2_t *)v2 + 3) = vdup_n_s32(0x1388u);
    *((void *)v2 + 4) = 0xA000500010001;
    *((_WORD *)v2 + 20) = 10;
    *(_DWORD *)(v2 + 42) = 16843008;
    *(_DWORD *)(v2 + 46) = 720905;
    *((_WORD *)v2 + 25) = 3;
    *(_OWORD *)(v2 + 52) = xmmword_21950BE50;
    v2[68] = 1;
    *((_DWORD *)v2 + 18) = 0;
    *(_DWORD *)(v2 + 75) = 0;
    *((void *)v2 + 10) = 1061997773;
    v2[88] = 0;
    *(_DWORD *)(v2 + 89) = 65537;
    *((_DWORD *)v2 + 32) = 1065353216;
    *((_OWORD *)v2 + 6) = xmmword_21950BEA0;
    *((_OWORD *)v2 + 7) = unk_21950BEB0;
    v2[132] = 1;
    *((void *)v2 + 17) = 0x3F00000041A00000;
    *((void *)v2 + 18) = 0xB43E4CCCCDLL;
    *((_DWORD *)v2 + 38) = 0;
    v2[156] = 0;
    *((_DWORD *)v2 + 40) = 2;
    *((_WORD *)v2 + 82) = 0;
    *((void *)v2 + 21) = 0;
    *((void *)v2 + 22) = 0xDEC000005CCLL;
    *((_DWORD *)v2 + 46) = 2;
    v2[188] = 0;
    *((int64x2_t *)v2 + 12) = vdupq_n_s64(0x280uLL);
    v2[208] = 0;
    v2[239] = 5;
    strcpy(v2 + 216, "/tmp/");
    v2[240] = 1;
    *(void *)(v2 + 244) = 0x90000002DLL;
    *((void *)v2 + 32) = 5000;
    v2[264] = 1;
    *((_DWORD *)v2 + 67) = 1061997773;
    v2[272] = 0;
    *((void *)v2 + 35) = 1;
    *((_OWORD *)v2 + 18) = xmmword_21950BE90;
    *((_WORD *)v2 + 152) = 256;
    *((_WORD *)v2 + 204) = 0;
    *(_OWORD *)(v2 + 412) = xmmword_21950BE60;
    *(_OWORD *)(v2 + 428) = xmmword_21950BE70;
    *((_DWORD *)v2 + 119) = 0x4000;
    *(_OWORD *)(v2 + 444) = xmmword_21950BEC4;
    *(_OWORD *)(v2 + 460) = unk_21950BED4;
    *((_DWORD *)v2 + 120) = 1045220557;
    v2[488] = 0;
    *a1 = v2;
    return 0;
  }
  return v3;
}

uint64_t CVHWAFeatureExtractionConfigRelease(uint64_t a1)
{
  if (!a1) {
    return 4;
  }
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  MEMORY[0x21D48B5B0](a1, 0x1032C4073236B7BLL);
  return 0;
}

uint64_t CVHWAFeatureExtractionConfigSetImageSize(uint64_t result, unsigned int a2, unsigned int a3, int a4)
{
  if (!result) {
    sub_219501994();
  }
  if (*(unsigned char *)(result + 488))
  {
    *(void *)(result + 192) = a2;
    *(void *)(result + 200) = a3;
  }
  else
  {
    *(_DWORD *)uint64_t result = a2;
    *(_DWORD *)(result + 4) = a3;
    *(_DWORD *)(result + 8) = a4;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetWidth(unsigned int *a1)
{
  if (!a1) {
    sub_2195019CC();
  }
  if (*((unsigned char *)a1 + 488)) {
    return a1[48];
  }
  else {
    return *a1;
  }
}

uint64_t CVHWAFeatureExtractionConfigGetHeight(uint64_t a1)
{
  if (!a1) {
    sub_219501A04();
  }
  if (*(unsigned char *)(a1 + 488)) {
    return *(unsigned int *)(a1 + 200);
  }
  else {
    return *(unsigned int *)(a1 + 4);
  }
}

uint64_t CVHWAFeatureExtractionConfigGetStride(uint64_t a1)
{
  if (!a1) {
    sub_219501A3C();
  }
  if (*(unsigned char *)(a1 + 488)) {
    return (*(_DWORD *)(a1 + 192) + 63) & 0xFFFFFFC0;
  }
  else {
    return *(unsigned int *)(a1 + 8);
  }
}

unsigned char *CVHWAFeatureExtractionConfigSetEnableDynamicThresholding(unsigned char *result, char a2)
{
  if (!result) {
    sub_219501A74();
  }
  if (result[488]) {
    result[264] = a2;
  }
  else {
    result[76] = a2;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetEnableDynamicThresholding(uint64_t a1)
{
  if (!a1) {
    sub_219501AAC();
  }
  uint64_t v1 = 264;
  if (!*(unsigned char *)(a1 + 488)) {
    uint64_t v1 = 76;
  }
  return *(unsigned __int8 *)(a1 + v1);
}

uint64_t CVHWAFeatureExtractionConfigSetTargetNumberOfKeypoints(uint64_t result, unsigned int a2)
{
  if (!result) {
    sub_219501AE4();
  }
  if (*(unsigned char *)(result + 488)) {
    *(void *)(result + 256) = a2;
  }
  else {
    *(_DWORD *)(result + 28) = a2;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetTargetNumberOfKeypoints(uint64_t a1)
{
  if (!a1) {
    sub_219501B1C();
  }
  if (*(unsigned char *)(a1 + 488)) {
    return *(unsigned int *)(a1 + 256);
  }
  else {
    return *(unsigned int *)(a1 + 28);
  }
}

uint64_t CVHWAFeatureExtractionConfigSetMaxNumberOfKeypoints(uint64_t result, unsigned int a2)
{
  if (!result) {
    sub_219501B54();
  }
  if (*(unsigned char *)(result + 488))
  {
    *(void *)(result + 256) = a2;
  }
  else
  {
    *(_DWORD *)(result + 24) = a2;
    *(_DWORD *)(result + 28) = a2;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetMaxNumberOfKeypoints(uint64_t a1)
{
  if (!a1) {
    sub_219501B8C();
  }
  if (*(unsigned char *)(a1 + 488)) {
    return *(unsigned int *)(a1 + 256);
  }
  else {
    return *(unsigned int *)(a1 + 24);
  }
}

uint64_t CVHWAFeatureExtractionConfigSetResponseThreshold(uint64_t result, int a2)
{
  if (!result) {
    sub_219501BC4();
  }
  if (*(unsigned char *)(result + 488)) {
    *(_DWORD *)(result + 244) = a2;
  }
  else {
    *(_WORD *)(result + 20) = a2;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetResponseThreshold(uint64_t a1)
{
  if (!a1) {
    sub_219501BFC();
  }
  if (*(unsigned char *)(a1 + 488)) {
    return (unsigned __int16)*(_DWORD *)(a1 + 244);
  }
  else {
    return *(unsigned __int16 *)(a1 + 20);
  }
}

unsigned char *CVHWAFeatureExtractionConfigSetEnableParedGrid(unsigned char *result, char a2)
{
  if (!result) {
    sub_219501C34();
  }
  if (result[488]) {
    result[304] = a2;
  }
  else {
    result[42] = a2;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetEnableParedGrid(uint64_t a1)
{
  if (!a1) {
    sub_219501C6C();
  }
  uint64_t v1 = 304;
  if (!*(unsigned char *)(a1 + 488)) {
    uint64_t v1 = 42;
  }
  return *(unsigned __int8 *)(a1 + v1);
}

unsigned char *CVHWAFeatureExtractionConfigSetDisablePostProcessing(unsigned char *result, char a2)
{
  if (!result) {
    sub_219501CA4();
  }
  if (result[488]) {
    result[188] = a2;
  }
  else {
    result[78] = a2;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetDisablePostProcessing(uint64_t a1)
{
  if (!a1) {
    sub_219501CDC();
  }
  uint64_t v1 = 188;
  if (!*(unsigned char *)(a1 + 488)) {
    uint64_t v1 = 78;
  }
  return *(unsigned __int8 *)(a1 + v1);
}

void CVHWAFeatureExtractionConfigSetEnableOrientationAssignment(uint64_t a1, char a2)
{
  if (!a1) {
    sub_219501D14();
  }
  if (!*(unsigned char *)(a1 + 488)) {
    goto LABEL_6;
  }
  sub_21947F2F4(&v12);
  if (**(int **)(v12 + 56) > 4) {
    goto LABEL_6;
  }
  v5[0] = &v12;
  v5[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v5[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v6 = 4;
  long long v7 = "unknown file";
  int v8 = 340;
  uint64_t v10 = 0;
  long long v11 = 0;
  long long v9 = "unknown function";
  sub_2194F675C((uint64_t)v5, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigSetEnableOrientationAssignment");
  sub_21947C298((uint64_t)v5);
  sub_21947C298((uint64_t)v5);
  uint64_t v4 = v11;
  if (!v11) {
    goto LABEL_6;
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    *(unsigned char *)(a1 + 44) = a2;
  }
  else
  {
LABEL_6:
    *(unsigned char *)(a1 + 44) = a2;
  }
}

void sub_21947F2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21947F2F4(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C33960, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C33960))
  {
    sub_2194F6258(&v4);
    sub_21947DECC(__p, "cv3d.vio");
    sub_2194F9AB0(&v4, (uint64_t)__p, &qword_267C33958);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))nullsub_1, &qword_267C33958, &dword_219476000);
    __cxa_guard_release(&qword_267C33960);
  }
  *a1 = qword_267C33958;
}

void sub_21947F3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C33960);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C33960);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetEnableOrientationAssignment(uint64_t a1)
{
  if (!a1) {
    sub_219501D4C();
  }
  if (!*(unsigned char *)(a1 + 488)) {
    return *(unsigned __int8 *)(a1 + 44);
  }
  sub_21947F2F4(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return *(unsigned __int8 *)(a1 + 44);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  int v6 = "unknown file";
  int v7 = 351;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetEnableOrientationAssignment");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return *(unsigned __int8 *)(a1 + 44);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(unsigned __int8 *)(a1 + 44);
}

void sub_21947F534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigSetDetectionFlow(uint64_t a1, char a2)
{
  if (!a1) {
    sub_219501D84();
  }
  if (!*(unsigned char *)(a1 + 488)) {
    goto LABEL_6;
  }
  sub_21947F2F4(&v12);
  if (**(int **)(v12 + 56) > 4) {
    goto LABEL_6;
  }
  v5[0] = &v12;
  v5[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v5[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v6 = 4;
  int v7 = "unknown file";
  int v8 = 362;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = "unknown function";
  sub_2194F675C((uint64_t)v5, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigSetDetectionFlow");
  sub_21947C298((uint64_t)v5);
  sub_21947C298((uint64_t)v5);
  uint64_t v4 = v11;
  if (!v11) {
    goto LABEL_6;
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    *(unsigned char *)(a1 + 68) = a2;
  }
  else
  {
LABEL_6:
    *(unsigned char *)(a1 + 68) = a2;
  }
}

void sub_21947F680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetDetectionFlow(uint64_t a1)
{
  if (!a1) {
    sub_219501DBC();
  }
  if (!*(unsigned char *)(a1 + 488)) {
    return *(unsigned __int8 *)(a1 + 68);
  }
  sub_21947F2F4(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return *(unsigned __int8 *)(a1 + 68);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  int v6 = "unknown file";
  int v7 = 373;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetDetectionFlow");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return *(unsigned __int8 *)(a1 + 68);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(unsigned __int8 *)(a1 + 68);
}

void sub_21947F7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigSetMaxImageSize(uint64_t a1, int a2, int a3)
{
  if (!a1) {
    sub_219501DF4();
  }
  if (!*(unsigned char *)(a1 + 488)) {
    goto LABEL_6;
  }
  sub_21947F2F4(&v14);
  if (**(int **)(v14 + 56) > 4) {
    goto LABEL_6;
  }
  v7[0] = &v14;
  v7[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v7[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v8 = 4;
  uint64_t v9 = "unknown file";
  int v10 = 384;
  uint64_t v12 = 0;
  long long v13 = 0;
  uint64_t v11 = "unknown function";
  sub_2194F675C((uint64_t)v7, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigSetMaxImageSize");
  sub_21947C298((uint64_t)v7);
  sub_21947C298((uint64_t)v7);
  int v6 = v13;
  if (!v13) {
    goto LABEL_6;
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    *(_DWORD *)(a1 + 56) = a2;
    *(_DWORD *)(a1 + 60) = a3;
  }
  else
  {
LABEL_6:
    *(_DWORD *)(a1 + 56) = a2;
    *(_DWORD *)(a1 + 60) = a3;
  }
}

void sub_21947F90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetMaxWidth(uint64_t a1)
{
  if (!a1) {
    sub_219501E2C();
  }
  if (!*(unsigned char *)(a1 + 488)) {
    return *(unsigned int *)(a1 + 56);
  }
  sub_21947F2F4(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return *(unsigned int *)(a1 + 56);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  int v6 = "unknown file";
  int v7 = 394;
  uint64_t v9 = 0;
  int v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetMaxWidth");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return *(unsigned int *)(a1 + 56);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(unsigned int *)(a1 + 56);
}

void sub_21947FA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetMaxHeight(uint64_t a1)
{
  if (!a1) {
    sub_219501E64();
  }
  if (!*(unsigned char *)(a1 + 488)) {
    return *(unsigned int *)(a1 + 60);
  }
  sub_21947F2F4(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return *(unsigned int *)(a1 + 60);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  int v6 = "unknown file";
  int v7 = 403;
  uint64_t v9 = 0;
  int v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetMaxHeight");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return *(unsigned int *)(a1 + 60);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(unsigned int *)(a1 + 60);
}

void sub_21947FB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigSetNumberOfOctaves(uint64_t a1, __int16 a2)
{
  if (!a1) {
    sub_219501E9C();
  }
  if (!*(unsigned char *)(a1 + 488)) {
    goto LABEL_6;
  }
  sub_21947F2F4(&v12);
  if (**(int **)(v12 + 56) > 4) {
    goto LABEL_6;
  }
  v5[0] = &v12;
  v5[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v5[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v6 = 4;
  int v7 = "unknown file";
  int v8 = 413;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = "unknown function";
  sub_2194F675C((uint64_t)v5, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigSetNumberOfOctaves");
  sub_21947C298((uint64_t)v5);
  sub_21947C298((uint64_t)v5);
  uint64_t v4 = v11;
  if (!v11) {
    goto LABEL_6;
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    *(_WORD *)(a1 + 50) = a2;
  }
  else
  {
LABEL_6:
    *(_WORD *)(a1 + 50) = a2;
  }
}

void sub_21947FCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetNumberOfOctaves(uint64_t a1)
{
  if (!a1) {
    sub_219501ED4();
  }
  if (!*(unsigned char *)(a1 + 488)) {
    return *(unsigned __int16 *)(a1 + 50);
  }
  sub_21947F2F4(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return *(unsigned __int16 *)(a1 + 50);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  int v6 = "unknown file";
  int v7 = 423;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetNumberOfOctaves");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return *(unsigned __int16 *)(a1 + 50);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(unsigned __int16 *)(a1 + 50);
}

void sub_21947FE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigSetNumberOfBinsXYZ(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (!result) {
    sub_219501F0C();
  }
  if (*(unsigned char *)(result + 488))
  {
    *(void *)(result + 280) = a2;
    *(void *)(result + 288) = a3;
    *(void *)(result + 296) = a4;
  }
  else
  {
    *(_WORD *)(result + 32) = a2;
    *(_WORD *)(result + 34) = a3;
    *(_WORD *)(result + 36) = a4;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetNumberOfBinsX(uint64_t a1)
{
  if (!a1) {
    sub_219501F44();
  }
  if (*(unsigned char *)(a1 + 488)) {
    return *(unsigned __int16 *)(a1 + 280);
  }
  else {
    return *(unsigned __int16 *)(a1 + 32);
  }
}

uint64_t CVHWAFeatureExtractionConfigGetNumberOfBinsY(uint64_t a1)
{
  if (!a1) {
    sub_219501F7C();
  }
  if (*(unsigned char *)(a1 + 488)) {
    return *(unsigned __int16 *)(a1 + 288);
  }
  else {
    return *(unsigned __int16 *)(a1 + 34);
  }
}

uint64_t CVHWAFeatureExtractionConfigGetNumberOfBinsZ(uint64_t a1)
{
  if (!a1) {
    sub_219501FB4();
  }
  if (*(unsigned char *)(a1 + 488)) {
    return *(unsigned __int16 *)(a1 + 296);
  }
  else {
    return *(unsigned __int16 *)(a1 + 36);
  }
}

uint64_t CVHWAFeatureExtractionConfigSetNumberOfBinsHardwareXY(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (!result) {
    sub_219501FEC();
  }
  if (*(unsigned char *)(result + 488))
  {
    *(void *)(result + 280) = a2;
    *(void *)(result + 288) = a3;
  }
  else
  {
    *(_WORD *)(result + 38) = a2;
    *(_WORD *)(result + 40) = a3;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetNumberOfBinsHardwareX(uint64_t a1)
{
  if (!a1) {
    sub_219502024();
  }
  if (*(unsigned char *)(a1 + 488)) {
    return *(unsigned __int16 *)(a1 + 280);
  }
  else {
    return *(unsigned __int16 *)(a1 + 38);
  }
}

uint64_t CVHWAFeatureExtractionConfigGetNumberOfBinsHardwareY(uint64_t a1)
{
  if (!a1) {
    sub_21950205C();
  }
  if (*(unsigned char *)(a1 + 488)) {
    return *(unsigned __int16 *)(a1 + 288);
  }
  else {
    return *(unsigned __int16 *)(a1 + 40);
  }
}

unsigned char *CVHWAFeatureExtractionConfigSetExtraTestEnable(unsigned char *result, char a2)
{
  if (!result) {
    sub_219502094();
  }
  if (result[488]) {
    result[240] = a2;
  }
  else {
    result[43] = a2;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetExtraTestEnable(uint64_t a1)
{
  if (!a1) {
    sub_2195020CC();
  }
  uint64_t v1 = 240;
  if (!*(unsigned char *)(a1 + 488)) {
    uint64_t v1 = 43;
  }
  return *(unsigned __int8 *)(a1 + v1);
}

uint64_t CVHWAFeatureExtractionConfigSetExtraTestThreshold(uint64_t result, int a2)
{
  if (!result) {
    sub_219502104();
  }
  if (*(unsigned char *)(result + 488)) {
    *(_DWORD *)(result + 248) = a2;
  }
  else {
    *(_WORD *)(result + 46) = a2;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetExtraTestThreshold(uint64_t a1)
{
  if (!a1) {
    sub_21950213C();
  }
  if (*(unsigned char *)(a1 + 488)) {
    return (unsigned __int16)*(_DWORD *)(a1 + 248);
  }
  else {
    return *(unsigned __int16 *)(a1 + 46);
  }
}

void CVHWAFeatureExtractionConfigSetRoi(uint64_t a1, __int16 a2, __int16 a3, __int16 a4, __int16 a5)
{
  if (!a1) {
    sub_219502174();
  }
  if (*(unsigned char *)(a1 + 488))
  {
    sub_21947F2F4(&v18);
    if (**(int **)(v18 + 56) <= 4)
    {
      v11[0] = &v18;
      v11[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v11[2] = std::chrono::system_clock::now().__d_.__rep_;
      int v12 = 4;
      long long v13 = "unknown file";
      int v14 = 549;
      uint64_t v16 = 0;
      long long v17 = 0;
      long long v15 = "unknown function";
      sub_2194F675C((uint64_t)v11, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigSetRoi");
      sub_21947C298((uint64_t)v11);
      sub_21947C298((uint64_t)v11);
      uint64_t v10 = v17;
      if (v17)
      {
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  *(_WORD *)(a1 + 12) = a2;
  *(_WORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 16) = a4;
  *(_WORD *)(a1 + 18) = a5;
}

void sub_2194801F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetRoiTop(uint64_t a1)
{
  if (!a1) {
    sub_2195021AC();
  }
  if (!*(unsigned char *)(a1 + 488)) {
    return *(__int16 *)(a1 + 12);
  }
  sub_21947F2F4(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return *(__int16 *)(a1 + 12);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  int v6 = "unknown file";
  int v7 = 561;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetRoiTop");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return *(__int16 *)(a1 + 12);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(__int16 *)(a1 + 12);
}

void sub_21948032C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetRoiLeft(uint64_t a1)
{
  if (!a1) {
    sub_2195021E4();
  }
  if (!*(unsigned char *)(a1 + 488)) {
    return *(__int16 *)(a1 + 14);
  }
  sub_21947F2F4(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return *(__int16 *)(a1 + 14);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  int v6 = "unknown file";
  int v7 = 570;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetRoiLeft");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return *(__int16 *)(a1 + 14);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(__int16 *)(a1 + 14);
}

void sub_219480468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetRoiBottom(uint64_t a1)
{
  if (!a1) {
    sub_21950221C();
  }
  if (!*(unsigned char *)(a1 + 488)) {
    return *(__int16 *)(a1 + 16);
  }
  sub_21947F2F4(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return *(__int16 *)(a1 + 16);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  int v6 = "unknown file";
  int v7 = 579;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetRoiBottom");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return *(__int16 *)(a1 + 16);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(__int16 *)(a1 + 16);
}

void sub_2194805A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetRoiRight(uint64_t a1)
{
  if (!a1) {
    sub_219502254();
  }
  if (!*(unsigned char *)(a1 + 488)) {
    return *(__int16 *)(a1 + 18);
  }
  sub_21947F2F4(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return *(__int16 *)(a1 + 18);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  int v6 = "unknown file";
  int v7 = 588;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetRoiRight");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return *(__int16 *)(a1 + 18);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(__int16 *)(a1 + 18);
}

void sub_2194806E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigSetMaxNumberOfKeypointsPerOctave(uint64_t a1, int a2)
{
  if (!a1) {
    sub_21950228C();
  }
  if (!*(unsigned char *)(a1 + 488)) {
    goto LABEL_6;
  }
  sub_21947F2F4(&v12);
  if (**(int **)(v12 + 56) > 4) {
    goto LABEL_6;
  }
  v5[0] = &v12;
  v5[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v5[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v6 = 4;
  int v7 = "unknown file";
  int v8 = 598;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = "unknown function";
  sub_2194F675C((uint64_t)v5, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigSetMaxNumberOfKeypointsPerOctave");
  sub_21947C298((uint64_t)v5);
  sub_21947C298((uint64_t)v5);
  uint64_t v4 = v11;
  if (!v11) {
    goto LABEL_6;
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    *(_DWORD *)(a1 + 52) = a2;
  }
  else
  {
LABEL_6:
    *(_DWORD *)(a1 + 52) = a2;
  }
}

void sub_21948082C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetMaxNumberOfKeypointsPerOctave(uint64_t a1)
{
  if (!a1) {
    sub_2195022C4();
  }
  if (!*(unsigned char *)(a1 + 488)) {
    return *(unsigned int *)(a1 + 52);
  }
  sub_21947F2F4(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return *(unsigned int *)(a1 + 52);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  int v6 = "unknown file";
  int v7 = 608;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetMaxNumberOfKeypointsPerOctave");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return *(unsigned int *)(a1 + 52);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(unsigned int *)(a1 + 52);
}

void sub_219480968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigSetShouldCheckTopLevelPruning(uint64_t a1, char a2)
{
  if (!a1) {
    sub_2195022FC();
  }
  if (!*(unsigned char *)(a1 + 488)) {
    goto LABEL_6;
  }
  sub_21947F2F4(&v12);
  if (**(int **)(v12 + 56) > 4) {
    goto LABEL_6;
  }
  v5[0] = &v12;
  v5[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v5[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v6 = 4;
  int v7 = "unknown file";
  int v8 = 619;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = "unknown function";
  sub_2194F675C((uint64_t)v5, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigSetShouldCheckTopLevelPruning");
  sub_21947C298((uint64_t)v5);
  sub_21947C298((uint64_t)v5);
  uint64_t v4 = v11;
  if (!v11) {
    goto LABEL_6;
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    *(unsigned char *)(a1 + 45) = a2;
  }
  else
  {
LABEL_6:
    *(unsigned char *)(a1 + 45) = a2;
  }
}

void sub_219480AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetShouldCheckTopLevelPruning(uint64_t a1)
{
  if (!a1) {
    sub_219502334();
  }
  if (!*(unsigned char *)(a1 + 488)) {
    return *(unsigned __int8 *)(a1 + 45);
  }
  sub_21947F2F4(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return *(unsigned __int8 *)(a1 + 45);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  int v6 = "unknown file";
  int v7 = 631;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetShouldCheckTopLevelPruning");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  v2 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return *(unsigned __int8 *)(a1 + 45);
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(unsigned __int8 *)(a1 + 45);
}

void sub_219480BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *CVHWAFeatureExtractionConfigSetEnableFeatureMatching(unsigned char *result, char a2)
{
  if (!result) {
    sub_21950236C();
  }
  if (result[488])
  {
    result[409] = a2;
    result[408] = a2;
  }
  else
  {
    result[92] = a2;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetEnableFeatureMatching(uint64_t a1)
{
  if (!a1) {
    sub_2195023A4();
  }
  uint64_t v1 = 409;
  if (!*(unsigned char *)(a1 + 488)) {
    uint64_t v1 = 92;
  }
  return *(unsigned __int8 *)(a1 + v1);
}

uint64_t CVHWAFeatureExtractionConfigSetFeatureMatchingDescriptorSize(uint64_t result, int a2)
{
  if (!result) {
    sub_2195023DC();
  }
  if (*(unsigned char *)(result + 488))
  {
    switch(a2)
    {
      case 2:
        *(_DWORD *)(result + 412) = 512;
        break;
      case 1:
        *(_DWORD *)(result + 412) = 256;
        break;
      case 0:
        *(_DWORD *)(result + 412) = 128;
        break;
    }
  }
  else
  {
    *(unsigned char *)(result + 132) = a2;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetFeatureMatchingDescriptorSize(uint64_t a1)
{
  if (!a1) {
    sub_219502414();
  }
  if (!*(unsigned char *)(a1 + 488)) {
    return *(unsigned __int8 *)(a1 + 132);
  }
  int v1 = *(_DWORD *)(a1 + 412);
  if (v1 == 128) {
    return 0;
  }
  if (v1 != 512)
  {
    if (v1 == 256) {
      return 1;
    }
    return *(unsigned __int8 *)(a1 + 132);
  }
  return 2;
}

uint64_t CVHWAFeatureExtractionConfigSetOrientationDistanceThreshold(uint64_t result, float a2)
{
  if (!result) {
    sub_21950244C();
  }
  if (*(unsigned char *)(result + 488)) {
    *(_DWORD *)(result + 428) = vcvtas_u32_f32((float)(a2 * 256.0) / 360.0);
  }
  else {
    *(float *)(result + 136) = a2;
  }
  return result;
}

float CVHWAFeatureExtractionConfigGetOrientationDistanceThreshold(uint64_t a1)
{
  if (!a1) {
    sub_219502484();
  }
  if (*(unsigned char *)(a1 + 488)) {
    return (float)((float)*(unsigned int *)(a1 + 428) * 360.0) * 0.0039062;
  }
  else {
    return *(float *)(a1 + 136);
  }
}

uint64_t CVHWAFeatureExtractionConfigSetSigmaDistanceThreshold(uint64_t result, float a2)
{
  if (!result) {
    sub_2195024BC();
  }
  if (*(unsigned char *)(result + 488)) {
    *(_DWORD *)(result + 424) = vcvtas_u32_f32(a2 * 512.0);
  }
  else {
    *(float *)(result + 140) = a2;
  }
  return result;
}

float CVHWAFeatureExtractionConfigGetSigmaDistanceThreshold(uint64_t a1)
{
  if (!a1) {
    sub_2195024F4();
  }
  if (*(unsigned char *)(a1 + 488)) {
    return (float)*(unsigned int *)(a1 + 424) * 0.0019531;
  }
  else {
    return *(float *)(a1 + 140);
  }
}

uint64_t CVHWAFeatureExtractionConfigSetSquareDistanceDisparityFraction(uint64_t result, float a2)
{
  if (!result) {
    sub_21950252C();
  }
  uint64_t v2 = 480;
  if (!*(unsigned char *)(result + 488)) {
    uint64_t v2 = 144;
  }
  *(float *)(result + v2) = a2;
  return result;
}

float CVHWAFeatureExtractionConfigGetSquareDistanceDisparityFraction(uint64_t a1)
{
  if (!a1) {
    sub_219502564();
  }
  uint64_t v1 = 480;
  if (!*(unsigned char *)(a1 + 488)) {
    uint64_t v1 = 144;
  }
  return *(float *)(a1 + v1);
}

uint64_t CVHWAFeatureExtractionConfigSetHammingDistanceThreshold(uint64_t result, int a2)
{
  if (!result) {
    sub_21950259C();
  }
  if (*(unsigned char *)(result + 488)) {
    *(_DWORD *)(result + 416) = a2;
  }
  else {
    *(_DWORD *)(result + 148) = a2;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetHammingDistanceThreshold(uint64_t a1)
{
  if (!a1) {
    sub_2195025D4();
  }
  uint64_t v1 = 416;
  if (!*(unsigned char *)(a1 + 488)) {
    uint64_t v1 = 148;
  }
  return *(unsigned int *)(a1 + v1);
}

void CVHWAFeatureExtractionConfigSetFeatureMatchingMaxElements(uint64_t a1, int a2)
{
  if (!a1) {
    sub_21950260C();
  }
  if (*(unsigned char *)(a1 + 488)) {
    goto LABEL_3;
  }
  sub_21947F2F4(&v12);
  if (**(int **)(v12 + 56) > 4) {
    goto LABEL_3;
  }
  v5[0] = &v12;
  v5[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v5[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v6 = 4;
  int v7 = "unknown file";
  int v8 = 809;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = "unknown function";
  sub_2194F675C((uint64_t)v5, "%s only has effect in swproxy", "CVHWAFeatureExtractionConfigSetFeatureMatchingMaxElements");
  sub_21947C298((uint64_t)v5);
  sub_21947C298((uint64_t)v5);
  uint64_t v4 = v11;
  if (!v11 || atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_3:
    *(_DWORD *)(a1 + 440) = a2;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    *(_DWORD *)(a1 + 440) = a2;
  }
}

void sub_21948106C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetFeatureMatchingMaxElements(uint64_t a1)
{
  if (!a1) {
    sub_219502644();
  }
  if (*(unsigned char *)(a1 + 488)) {
    return *(unsigned int *)(a1 + 440);
  }
  sub_21947F2F4(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return *(unsigned int *)(a1 + 440);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  int v6 = "unknown file";
  int v7 = 819;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s only has effect in swproxy", "CVHWAFeatureExtractionConfigGetFeatureMatchingMaxElements");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  char v3 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return *(unsigned int *)(a1 + 440);
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return *(unsigned int *)(a1 + 440);
}

void sub_2194811A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigSetFeatureMatchingMaxNumSets(uint64_t a1, int a2)
{
  if (!a1) {
    sub_21950267C();
  }
  if (*(unsigned char *)(a1 + 488)) {
    goto LABEL_3;
  }
  sub_21947F2F4(&v12);
  if (**(int **)(v12 + 56) > 4) {
    goto LABEL_3;
  }
  v5[0] = &v12;
  v5[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v5[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v6 = 4;
  int v7 = "unknown file";
  int v8 = 829;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = "unknown function";
  sub_2194F675C((uint64_t)v5, "%s only has effect in swproxy", "CVHWAFeatureExtractionConfigSetFeatureMatchingMaxNumSets");
  sub_21947C298((uint64_t)v5);
  sub_21947C298((uint64_t)v5);
  uint64_t v4 = v11;
  if (!v11 || atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_3:
    *(_DWORD *)(a1 + 432) = a2;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    *(_DWORD *)(a1 + 432) = a2;
  }
}

void sub_2194812F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetFeatureMatchingMaxNumSets(uint64_t a1)
{
  if (!a1) {
    sub_2195026B4();
  }
  if (*(unsigned char *)(a1 + 488)) {
    return *(unsigned int *)(a1 + 432);
  }
  sub_21947F2F4(&v11);
  if (**(int **)(v11 + 56) > 4) {
    return *(unsigned int *)(a1 + 432);
  }
  v4[0] = &v11;
  v4[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v4[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = 4;
  int v6 = "unknown file";
  int v7 = 839;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v8 = "unknown function";
  sub_2194F675C((uint64_t)v4, "%s only has effect in swproxy", "CVHWAFeatureExtractionConfigGetFeatureMatchingMaxNumSets");
  sub_21947C298((uint64_t)v4);
  sub_21947C298((uint64_t)v4);
  char v3 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return *(unsigned int *)(a1 + 432);
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return *(unsigned int *)(a1 + 432);
}

void sub_219481430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigSetFeatureMatchingHomographyMatrix(uint64_t a1, _DWORD *a2)
{
  if (!a1) {
    sub_2195026EC();
  }
  if (!*(unsigned char *)(a1 + 488))
  {
    sub_21947F2F4(&v12);
    if (**(int **)(v12 + 56) <= 4)
    {
      v5[0] = &v12;
      v5[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v5[2] = std::chrono::system_clock::now().__d_.__rep_;
      int v6 = 4;
      int v7 = "unknown file";
      int v8 = 849;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v9 = "unknown function";
      sub_2194F675C((uint64_t)v5, "%s only has effect in swproxy", "CVHWAFeatureExtractionConfigSetFeatureMatchingHomographyMatrix");
      sub_21947C298((uint64_t)v5);
      sub_21947C298((uint64_t)v5);
      uint64_t v4 = v11;
      if (v11)
      {
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  *(_DWORD *)(a1 + 444) = *a2;
  *(_DWORD *)(a1 + 448) = a2[1];
  *(_DWORD *)(a1 + 452) = a2[2];
  *(_DWORD *)(a1 + 456) = a2[3];
  *(_DWORD *)(a1 + 460) = a2[4];
  *(_DWORD *)(a1 + 464) = a2[5];
  *(_DWORD *)(a1 + 468) = a2[6];
  *(_DWORD *)(a1 + 472) = a2[7];
  *(_DWORD *)(a1 + 476) = a2[8];
}

void sub_2194815A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigGetFeatureMatchingHomographyMatrix(uint64_t a1, _DWORD *a2)
{
  if (!a1) {
    sub_219502724();
  }
  if (!*(unsigned char *)(a1 + 488))
  {
    sub_21947F2F4(&v12);
    if (**(int **)(v12 + 56) <= 4)
    {
      v5[0] = &v12;
      v5[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v5[2] = std::chrono::system_clock::now().__d_.__rep_;
      int v6 = 4;
      int v7 = "unknown file";
      int v8 = 861;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v9 = "unknown function";
      sub_2194F675C((uint64_t)v5, "%s only has effect in swproxy", "CVHWAFeatureExtractionConfigGetFeatureMatchingHomographyMatrix");
      sub_21947C298((uint64_t)v5);
      sub_21947C298((uint64_t)v5);
      uint64_t v4 = v11;
      if (v11)
      {
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  *a2 = *(_DWORD *)(a1 + 444);
  a2[1] = *(_DWORD *)(a1 + 448);
  a2[2] = *(_DWORD *)(a1 + 452);
  a2[3] = *(_DWORD *)(a1 + 456);
  a2[4] = *(_DWORD *)(a1 + 460);
  a2[5] = *(_DWORD *)(a1 + 464);
  a2[6] = *(_DWORD *)(a1 + 468);
  a2[7] = *(_DWORD *)(a1 + 472);
  a2[8] = *(_DWORD *)(a1 + 476);
}

void sub_219481720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigSetUseDefaultParedGridSetting(uint64_t a1, char a2)
{
  if (!a1) {
    sub_21950275C();
  }
  if (*(unsigned char *)(a1 + 488)) {
    goto LABEL_3;
  }
  sub_21947F2F4(&v12);
  if (**(int **)(v12 + 56) > 4) {
    goto LABEL_3;
  }
  v5[0] = &v12;
  v5[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v5[2] = std::chrono::system_clock::now().__d_.__rep_;
  int v6 = 4;
  int v7 = "unknown file";
  int v8 = 873;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = "unknown function";
  sub_2194F675C((uint64_t)v5, "%s only has effect in swproxy", "CVHWAFeatureExtractionConfigSetUseDefaultParedGridSetting");
  sub_21947C298((uint64_t)v5);
  sub_21947C298((uint64_t)v5);
  uint64_t v4 = v11;
  if (!v11 || atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_3:
    *(unsigned char *)(a1 + 305) = a2;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    *(unsigned char *)(a1 + 305) = a2;
  }
}

void sub_21948186C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigSetParedGrid(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  if (!a1) {
    sub_219502794();
  }
  if (!*(unsigned char *)(a1 + 488))
  {
    sub_21947F2F4(&v20);
    if (**(int **)(v20 + 56) <= 4)
    {
      v13[0] = &v20;
      v13[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v13[2] = std::chrono::system_clock::now().__d_.__rep_;
      int v14 = 4;
      long long v15 = "unknown file";
      int v16 = 887;
      uint64_t v18 = 0;
      long long v19 = 0;
      long long v17 = "unknown function";
      sub_2194F675C((uint64_t)v13, "%s only has effect in swproxy", "CVHWAFeatureExtractionConfigSetParedGrid");
      sub_21947C298((uint64_t)v13);
      sub_21947C298((uint64_t)v13);
      uint64_t v12 = v19;
      if (v19)
      {
        if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
  }
  *(_DWORD *)(a1 + 308) = *a2;
  *(_DWORD *)(a1 + 328) = *a3;
  *(_DWORD *)(a1 + 348) = *a4;
  *(_DWORD *)(a1 + 368) = *a5;
  *(_DWORD *)(a1 + 388) = *a6;
  *(_DWORD *)(a1 + 312) = a2[1];
  *(_DWORD *)(a1 + 332) = a3[1];
  *(_DWORD *)(a1 + 352) = a4[1];
  *(_DWORD *)(a1 + 372) = a5[1];
  *(_DWORD *)(a1 + 392) = a6[1];
  *(_DWORD *)(a1 + 316) = a2[2];
  *(_DWORD *)(a1 + 336) = a3[2];
  *(_DWORD *)(a1 + 356) = a4[2];
  *(_DWORD *)(a1 + 376) = a5[2];
  *(_DWORD *)(a1 + 396) = a6[2];
  *(_DWORD *)(a1 + 320) = a2[3];
  *(_DWORD *)(a1 + 340) = a3[3];
  *(_DWORD *)(a1 + 360) = a4[3];
  *(_DWORD *)(a1 + 380) = a5[3];
  *(_DWORD *)(a1 + 400) = a6[3];
  *(_DWORD *)(a1 + 324) = a2[4];
  *(_DWORD *)(a1 + 344) = a3[4];
  *(_DWORD *)(a1 + 364) = a4[4];
  *(_DWORD *)(a1 + 384) = a5[4];
  *(_DWORD *)(a1 + 404) = a6[4];
}

void sub_219481A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionHwBufferInfoCreate(void *a1)
{
  if (!a1) {
    return 4;
  }
  uint64_t v2 = (char *)operator new(0xA8uLL, MEMORY[0x263F8C180]);
  if (!v2) {
    return 3;
  }
  char v3 = v2;
  uint64_t result = 0;
  *a1 = v3;
  *(_WORD *)char v3 = 0;
  *(void *)(v3 + 12) = 0;
  *(void *)(v3 + 4) = 0;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  return result;
}

#error "219481B48: call analysis failed (funcsize=74)"

void sub_219481C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_219481C80(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C33970, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C33970))
  {
    sub_2194F6258(&v4);
    sub_21947DECC(__p, "cv3d.vio");
    sub_2194F9AB0(&v4, (uint64_t)__p, &qword_267C33968);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))nullsub_1, &qword_267C33968, &dword_219476000);
    __cxa_guard_release(&qword_267C33970);
  }
  *a1 = qword_267C33968;
}

void sub_219481D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267C33970);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267C33970);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionHwBufferInfoRelease(uint64_t a1)
{
  if (a1)
  {
    MEMORY[0x21D48B5B0](a1, 0x1020C4005052BACLL);
    return 0;
  }
  else
  {
    sub_219481C80(&v10);
    if (**(int **)(v10 + 56) > 5) {
      return 4;
    }
    v3[0] = &v10;
    v3[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v3[2] = std::chrono::system_clock::now().__d_.__rep_;
    int v4 = 5;
    int v5 = "unknown file";
    int v6 = 69;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    int v7 = "unknown function";
    sub_2194F675C((uint64_t)v3, "%s: Invalid extrDataInfo_hdl", "CVHWAFeatureExtractionHwBufferInfoRelease");
    sub_21947C298((uint64_t)v3);
    sub_21947C298((uint64_t)v3);
    uint64_t v2 = v9;
    if (!v9) {
      return 4;
    }
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return 4;
    }
    else
    {
      return 4;
    }
  }
}

void sub_219481ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21947C460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetKeyPoints(uint64_t a1)
{
  if (!a1) {
    sub_2195027CC();
  }
  return *(void *)(a1 + 136);
}

uint64_t CVHWAFeatureExtractionGetDescriptors(uint64_t a1)
{
  if (!a1) {
    sub_219502804();
  }
  return *(void *)(a1 + 144);
}

uint64_t CVHWAFeatureExtractionGetNumberOfOctaves(unsigned __int16 *a1)
{
  if (!a1) {
    sub_21950283C();
  }
  return *a1;
}

uint64_t CVHWAFeatureExtractionGetNumberOfKeypoints(uint64_t a1)
{
  if (!a1) {
    sub_219502874();
  }
  return *(unsigned int *)(a1 + 4);
}

uint64_t CVHWAFeatureExtractionGetNumberOfPrunedKeypointsAtTopLevel(uint64_t a1)
{
  if (!a1) {
    sub_2195028AC();
  }
  return *(unsigned int *)(a1 + 12);
}

uint64_t CVHWAFeatureExtractionGetInputImageWidth(uint64_t a1)
{
  if (!a1) {
    sub_2195028E4();
  }
  return *(unsigned int *)(a1 + 32);
}

uint64_t CVHWAFeatureExtractionGetInputImageHeight(uint64_t a1)
{
  if (!a1) {
    sub_21950291C();
  }
  return *(unsigned int *)(a1 + 36);
}

uint64_t CVHWAFeatureExtractionGetNumberOfFeatureMatches(uint64_t a1)
{
  if (!a1) {
    sub_219502954();
  }
  return *(unsigned int *)(a1 + 8);
}

uint64_t CVHWAFeatureExtractionGetMatchedPairs(uint64_t a1)
{
  if (!a1) {
    sub_21950298C();
  }
  return *(void *)(a1 + 152);
}

uint64_t CVHWAFeatureExtractionGetTids(uint64_t a1)
{
  if (!a1) {
    sub_2195029C4();
  }
  return *(void *)(a1 + 160);
}

uint64_t CVHWAFeatureExtractionGetFeatureMatchingEnabled(uint64_t a1)
{
  if (!a1) {
    sub_2195029FC();
  }
  return *(unsigned __int8 *)(a1 + 18);
}

uint64_t CVHWAFeatureExtractionGetGaussianOutputEnabled(uint64_t a1)
{
  if (!a1) {
    sub_219502A34();
  }
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t CVHWAFeatureExtractionGetFlowType(uint64_t a1)
{
  if (!a1) {
    sub_219502A6C();
  }
  return *(unsigned __int8 *)(a1 + 17);
}

uint64_t CVHWAFeatureExtractionGetLaccEnabled(uint64_t a1)
{
  if (!a1) {
    sub_219502AA4();
  }
  return *(unsigned __int8 *)(a1 + 19);
}

uint64_t CVHWAFeatureExtractionGetFrameId(uint64_t a1)
{
  if (!a1) {
    sub_219502ADC();
  }
  return *(void *)(a1 + 24);
}

uint64_t CVHWAGetLaccArchVersion()
{
  if (sub_2194C63A8()) {
    return 2;
  }
  if (sub_2194C63F0()) {
    return 2;
  }
  if (sub_2194C6438()) {
    return 2;
  }
  return sub_2194C6360();
}

uint64_t sub_219482130(unsigned int a1)
{
  if (a1 > 6) {
    return 10;
  }
  else {
    return dword_21950BEE8[a1];
  }
}

uint64_t CVHWAGeneralProcessingCreate(uint64_t a1)
{
  if (!a1) {
    return 2;
  }
  sub_2194F6310(&v3);
  sub_2194F94A0(v3, 4);
  uint64_t v1 = operator new(8uLL, MEMORY[0x263F8C180]);
  if (v1)
  {
    void *v1 = 0;
    operator new();
  }
  return 3;
}

uint64_t sub_21948222C(void *a1)
{
  MEMORY[0x21D48B5B0](v2, 0x10B2C402501FFA3);
  __cxa_begin_catch(a1);
  int v4 = sub_219482294(v1);
  MEMORY[0x21D48B5B0](v4, 0x20C4093837F09);
  __cxa_end_catch();
  return 1;
}

uint64_t *sub_219482294(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = sub_21949ED3C();
    MEMORY[0x21D48B5B0](v3, 0x10B2C402501FFA3);
  }
  return a1;
}

uint64_t CVHWAGeneralProcessingRelease(uint64_t *a1)
{
  if (!a1) {
    return 4;
  }
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = sub_21949ED3C();
    MEMORY[0x21D48B5B0](v3, 0x10B2C402501FFA3);
  }
  MEMORY[0x21D48B5B0](a1, 0x20C4093837F09);
  return 0;
}

uint64_t CVHWAGeneralProcessingInit(uint64_t *a1, unsigned int *a2)
{
  if (!a1) {
    return 4;
  }
  if (!a2) {
    return 2;
  }
  unsigned int AccelInstance = CVHWAGeneralProcessingConfigGetAccelInstance(a2);
  if (AccelInstance) {
    BOOL v5 = AccelInstance == 2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 1;
  }
  int v7 = sub_21949ED40(*a1, (uint64_t)a2);
  if (v7 == 6) {
    unsigned int v8 = 6;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v7 == 4) {
    return 1;
  }
  else {
    return v8;
  }
}

uint64_t CVHWAGeneralProcessingLoadProgramSegment(uint64_t *a1, void *a2, size_t a3, unsigned int a4)
{
  if (!a1) {
    return 4;
  }
  if (!a2) {
    return 2;
  }
  uint64_t v4 = *a1;
  if (*(_DWORD *)(v4 + 8) - *(_DWORD *)(v4 + 16) <= a4)
  {
    if (sub_21949F438(v4, a2, a3, a4, a4)) {
      return 0;
    }
    else {
      return 3;
    }
  }
  else if (sub_21949F644(v4, a2, a3, a4, a4))
  {
    return 0;
  }
  else
  {
    return 3;
  }
}

uint64_t CVHWAGeneralProcessingLoadProgramSegmentWithLma(uint64_t *a1, void *a2, size_t a3, unsigned int a4, unsigned int a5)
{
  if (!a1) {
    return 4;
  }
  if (!a2) {
    return 2;
  }
  uint64_t v5 = *a1;
  if (*(_DWORD *)(v5 + 8) - *(_DWORD *)(v5 + 16) <= a4)
  {
    if (sub_21949F438(v5, a2, a3, a4, a5)) {
      return 0;
    }
    else {
      return 3;
    }
  }
  else if (sub_21949F644(v5, a2, a3, a4, a5))
  {
    return 0;
  }
  else
  {
    return 3;
  }
}

uint64_t CVHWAGeneralProcessingClearProgram(uint64_t *a1)
{
  if (!a1) {
    return 4;
  }
  sub_21949F7EC(*a1);
  return 0;
}

uint64_t CVHWAGeneralProcessingAllocateBuffer(int a1, uint64_t a2)
{
  uint64_t result = 2;
  if (a1)
  {
    if (a2) {
      sub_21949DC2C();
    }
  }
  return result;
}

uint64_t CVHWAGeneralProcessingFreeBuffer(uint64_t a1)
{
  if (a1) {
    return sub_21949DDF4(a1) ^ 1;
  }
  else {
    return 2;
  }
}

uint64_t CVHWAGeneralProcessingSetupDMASourceBuffer(uint64_t *a1, uint64_t a2, const void *a3, size_t a4)
{
  size_t v5 = a4;
  if (!a1) {
    return 4;
  }
  if (!a3) {
    return 2;
  }
  if (sub_21949F898(*a1, a3, &v5, 1)) {
    return 0;
  }
  return 3;
}

uint64_t CVHWAGeneralProcessingSetupDMADestinationBuffer(uint64_t *a1, uint64_t a2, const void *a3, size_t a4)
{
  size_t v5 = a4;
  if (!a1) {
    return 4;
  }
  if (!a3) {
    return 2;
  }
  if (sub_21949F898(*a1, a3, &v5, 0)) {
    return 0;
  }
  return 3;
}

uint64_t CVHWAGeneralProcessingAllocateStack(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  return 0;
}

uint64_t CVHWAGeneralProcessingWriteStackData(uint64_t *a1, const void *a2, unsigned int a3, size_t a4)
{
  if (!a1) {
    return 4;
  }
  if (!a2) {
    return 2;
  }
  if (sub_21949FEA4(*a1, a2, a3, a4)) {
    return 0;
  }
  return 3;
}

uint64_t CVHWAGeneralProcessingReadStackData(uint64_t *a1, unsigned int a2, void *a3, size_t a4)
{
  if (!a1) {
    return 4;
  }
  uint64_t result = 2;
  if (a3 && a4)
  {
    if (sub_21949FF1C(*a1, a2, a3, a4)) {
      return 0;
    }
    else {
      return 2;
    }
  }
  return result;
}

uint64_t CVHWAGeneralProcessingClearStackData(void *a1)
{
  if (!a1) {
    return 4;
  }
  nullsub_14(*a1);
  return 0;
}

uint64_t CVHWAGeneralProcessingClearRegisters(uint64_t *a1)
{
  if (!a1) {
    return 4;
  }
  sub_21949F864(*a1);
  return 0;
}

uint64_t CVHWAGeneralProcessingSetRegisters(uint64_t *a1, const void *a2, uint64_t a3)
{
  if (!a1) {
    return 4;
  }
  uint64_t result = 2;
  if (a2)
  {
    if (a3)
    {
      sub_21949FF9C(*a1, a2, a3);
      return 0;
    }
  }
  return result;
}

uint64_t CVHWAGeneralProcessingSetUint32Register(uint64_t *a1, unint64_t a2, int a3)
{
  if (!a1) {
    return 4;
  }
  if (a2 > 0x1F) {
    return 2;
  }
  sub_2194A00E4(*a1, a2, a3);
  return 0;
}

uint64_t CVHWAGeneralProcessingSetVecFloatRegister(uint64_t *a1, unint64_t a2, void *a3, unint64_t a4)
{
  if (!a1) {
    return 4;
  }
  uint64_t result = 2;
  if (a3 && a2 <= 0x1F && a4 - 9 >= 0xFFFFFFFFFFFFFFF8)
  {
    sub_2194A010C(*a1, a2, a3, a4);
    return 0;
  }
  return result;
}

uint64_t CVHWAGeneralProcessingSetVecDoubleRegister(uint64_t *a1, unint64_t a2, void *a3, unint64_t a4)
{
  if (!a1) {
    return 4;
  }
  uint64_t result = 2;
  if (a3 && a2 <= 0x1F && a4 - 5 >= 0xFFFFFFFFFFFFFFFCLL)
  {
    sub_2194A016C(*a1, a2, a3, a4);
    return 0;
  }
  return result;
}

uint64_t CVHWAGeneralProcessingGetUint32Register(uint64_t *a1, unint64_t a2, _DWORD *a3)
{
  if (!a1) {
    return 4;
  }
  uint64_t result = 2;
  if (a2 <= 0x1F)
  {
    if (a3)
    {
      int v6 = sub_2194A01CC(*a1, a2);
      uint64_t result = 0;
      *a3 = v6;
    }
  }
  return result;
}

uint64_t CVHWAGeneralProcessingGetVecFloatRegister(uint64_t *a1, unint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (!a1) {
    return 4;
  }
  uint64_t result = 2;
  if (a2 <= 0x1F && a3 && (unint64_t)(a4 - 9) >= 0xFFFFFFFFFFFFFFF8)
  {
    sub_2194A0210(*a1, a2, a3, a4);
    return 0;
  }
  return result;
}

uint64_t CVHWAGeneralProcessingGetVecDoubleRegister(uint64_t *a1, unint64_t a2, void *a3, uint64_t a4)
{
  if (!a1) {
    return 4;
  }
  uint64_t result = 2;
  if (a2 <= 0x1F && a3 && (unint64_t)(a4 - 5) >= 0xFFFFFFFFFFFFFFFCLL)
  {
    sub_2194A0260(*a1, a2, a3, a4);
    return 0;
  }
  return result;
}

uint64_t CVHWAGeneralProcessingRunProgram(uint64_t *a1, int a2, int a3)
{
  if (a1) {
    return sub_2194A0564(*a1, a2, a3) != 0;
  }
  else {
    return 4;
  }
}

uint64_t CVHWAGeneralProcessingCallFunction(uint64_t *a1, char *__s, const char *a3)
{
  if (!a1) {
    return 4;
  }
  if (__s)
  {
    size_t v6 = strlen(__s);
    if (v6 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21947DF80();
    }
    int v7 = (const void *)v6;
    if (v6 >= 0x17)
    {
      uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v10 = v6 | 7;
      }
      uint64_t v11 = v10 + 1;
      unsigned int v8 = (const void **)operator new(v10 + 1);
      __dst[1] = v7;
      unint64_t v17 = v11 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v17) = v6;
      unsigned int v8 = __dst;
      if (!v6)
      {
LABEL_13:
        *((unsigned char *)v7 + (void)v8) = 0;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v15 = 0;
        if (a3) {
          uint64_t v12 = a3;
        }
        else {
          uint64_t v12 = "__stop";
        }
        MEMORY[0x21D48B320](__p, v12);
        BOOL v9 = sub_2194A2388(*a1, __dst, (const void **)__p) != 0;
        if (SHIBYTE(v15) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v17) & 0x80000000) == 0) {
            return v9;
          }
        }
        else if ((SHIBYTE(v17) & 0x80000000) == 0)
        {
          return v9;
        }
        operator delete((void *)__dst[0]);
        return v9;
      }
    }
    memcpy(v8, __s, (size_t)v7);
    goto LABEL_13;
  }
  return 2;
}

void sub_219482AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t CVHWAGeneralProcessingReadSpecialRegister(uint64_t *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (!a1) {
    return 4;
  }
  uint64_t result = 2;
  if (a3)
  {
    if (a4) {
      return sub_2194A02B0(*a1, a2, a3, a4) ^ 1;
    }
  }
  return result;
}

uint64_t CVHWAGeneralProcessingConfigCreate(void *a1)
{
  if (!a1) {
    return 4;
  }
  uint64_t v2 = operator new(0x20uLL, MEMORY[0x263F8C180]);
  if (!v2) {
    return 3;
  }
  uint64_t v3 = v2;
  uint64_t result = 0;
  *(_DWORD *)uint64_t v3 = 0;
  v3[31] = 0;
  v3[8] = 0;
  *a1 = v3;
  return result;
}

uint64_t CVHWAGeneralProcessingConfigRelease(uint64_t a1)
{
  if (!a1) {
    return 4;
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  MEMORY[0x21D48B5B0](a1, 0x1012C40849EBCB1);
  return 0;
}

uint64_t CVHWAGeneralProcessingConfigSetAccelInstance(unsigned int *a1, unsigned int a2)
{
  if (!a1) {
    return 4;
  }
  if (a2 > 2) {
    return 2;
  }
  uint64_t result = 0;
  *a1 = a2;
  return result;
}

unsigned int *CVHWAGeneralProcessingConfigGetAccelInstance(unsigned int *result)
{
  if (result) {
    return (unsigned int *)*result;
  }
  return result;
}

uint64_t CVHWAGeneralProcessingConfigSetBinaryPath(uint64_t a1)
{
  if (!a1) {
    return 4;
  }
  MEMORY[0x21D48B320](a1 + 8);
  return 0;
}

uint64_t CVHWAGeneralProcessingConfigGetBinaryPath(uint64_t a1)
{
  uint64_t result = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t sub_219482CBC(uint64_t result, int a2)
{
  *(void *)uint64_t result = &unk_26CAD60F0;
  *(void *)(result + 8) = 0;
  *(_WORD *)(result + 16) = 0;
  *(void *)(result + 20) = 0;
  *(_WORD *)(result + 28) = 2;
  *(_DWORD *)(result + 200) = 0;
  *(_OWORD *)(result + 180) = 0u;
  *(unsigned char *)(result + 196) = 0;
  *(_WORD *)(result + 204) = 0;
  *(_DWORD *)(result + 228) = 0;
  *(_OWORD *)(result + 208) = 0u;
  *(unsigned char *)(result + 224) = 0;
  *(_WORD *)(result + 232) = 0;
  *(_DWORD *)(result + 256) = 0;
  *(_OWORD *)(result + 236) = 0u;
  *(unsigned char *)(result + 252) = 0;
  *(_WORD *)(result + 260) = 0;
  *(_DWORD *)(result + 284) = 0;
  *(unsigned char *)(result + 280) = 0;
  *(_OWORD *)(result + 264) = 0u;
  *(_WORD *)(result + 288) = 0;
  *(_DWORD *)(result + 312) = 0;
  *(_OWORD *)(result + 292) = 0u;
  *(unsigned char *)(result + 308) = 0;
  *(_WORD *)(result + 316) = 0;
  *(_DWORD *)(result + 340) = 0;
  *(_OWORD *)(result + 320) = 0u;
  *(unsigned char *)(result + 336) = 0;
  *(_WORD *)(result + 344) = 0;
  *(_DWORD *)(result + 368) = 0;
  *(_OWORD *)(result + 348) = 0u;
  *(unsigned char *)(result + 364) = 0;
  *(_WORD *)(result + 372) = 0;
  *(_DWORD *)(result + 396) = 0;
  *(_OWORD *)(result + 376) = 0u;
  *(unsigned char *)(result + 392) = 0;
  *(_WORD *)(result + 400) = 0;
  *(_DWORD *)(result + 424) = 0;
  *(unsigned char *)(result + 420) = 0;
  *(_OWORD *)(result + 404) = 0u;
  *(_WORD *)(result + 428) = 0;
  *(_DWORD *)(result + 452) = 0;
  *(_OWORD *)(result + 432) = 0u;
  *(unsigned char *)(result + 448) = 0;
  *(_WORD *)(result + 456) = 0;
  *(_DWORD *)(result + 480) = 0;
  *(_OWORD *)(result + 460) = 0u;
  *(unsigned char *)(result + 476) = 0;
  *(_WORD *)(result + 484) = 0;
  *(_DWORD *)(result + 508) = 0;
  *(_OWORD *)(result + 488) = 0u;
  *(unsigned char *)(result + 504) = 0;
  *(_WORD *)(result + 512) = 0;
  *(_DWORD *)(result + 536) = 0;
  *(unsigned char *)(result + 532) = 0;
  *(_OWORD *)(result + 516) = 0u;
  *(_WORD *)(result + 540) = 0;
  *(_DWORD *)(result + 564) = 0;
  *(_OWORD *)(result + 544) = 0u;
  *(unsigned char *)(result + 560) = 0;
  *(_WORD *)(result + 568) = 0;
  *(_DWORD *)(result + 592) = 0;
  *(_OWORD *)(result + 572) = 0u;
  *(unsigned char *)(result + 588) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_WORD *)(result + 176) = 0;
  *(_OWORD *)(result + 660) = 0u;
  *(_OWORD *)(result + 632) = 0u;
  *(_OWORD *)(result + 648) = 0u;
  *(_OWORD *)(result + 600) = 0u;
  *(_OWORD *)(result + 616) = 0u;
  *(_OWORD *)(result + 680) = xmmword_21950BF20;
  *(_OWORD *)(result + 696) = xmmword_21950BF30;
  *(_OWORD *)(result + 712) = xmmword_21950BF40;
  *(_OWORD *)(result + 728) = xmmword_21950BF50;
  *(_DWORD *)(result + 744) = 4;
  *(_WORD *)(result + 748) = 5;
  *(void *)(result + 752) = 0xFFFF0000003FLL;
  *(_OWORD *)(result + 760) = xmmword_21950BF60;
  *(void *)(result + 776) = 0x3F80000000000000;
  *(_DWORD *)(result + 784) = 511;
  *(void *)(result + 808) = 0;
  *(_OWORD *)(result + 792) = 0u;
  *(unsigned char *)(result + 816) = 26;
  *(void *)(result + 824) = 0;
  if (a2 == 7)
  {
    long long v2 = xmmword_21950BF70;
    uint64_t v3 = 0x29B000000;
  }
  else
  {
    if (a2 != 8)
    {
      sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 54, "0 && \"unsupported platform\"", (void (*)(void *))sub_2194FF9C0);
      abort();
    }
    long long v2 = xmmword_21950BF80;
    uint64_t v3 = 0x48F000000;
  }
  *(void *)(result + 824) = v3;
  *(_OWORD *)(result + 656) = v2;
  *(unsigned char *)(result + 816) = 26;
  return result;
}

void sub_219482F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (*a10)
  {
    *(void *)(v10 + 800) = *a10;
    MEMORY[0x21D48B5A0]();
  }
  sub_219482F84(v11);
  nullsub_14(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_219482F84(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }
  size_t v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(void *)(a1 + 56) = v5;
    operator delete(v5);
  }
  size_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  int v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

BOOL sub_21948300C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 68) != 2) {
    return 0;
  }
  *(_WORD *)(a2 + 50) = sub_2194E223C(*(_DWORD *)a2, *(_DWORD *)(a2 + 4));
  BOOL result = sub_219493C54(a1 + 680, a2);
  if (result)
  {
    BOOL result = sub_219483158(a1, a2);
    if (result)
    {
      *(void *)(a1 + 8) = *(void *)a2;
      unsigned int v5 = *(unsigned __int16 *)(a2 + 50);
      *(_WORD *)(a1 + 16) = v5;
      int v6 = *(_DWORD *)(a2 + 72);
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 24) = v6;
      int v7 = *(unsigned __int8 *)(a2 + 68);
      *(unsigned char *)(a1 + 28) = v7;
      sub_21949287C(a1 + 32, v5, v7);
      if (*(unsigned char *)(a1 + 28) == 2)
      {
        unsigned int v8 = *(char **)(a1 + 792);
        unint64_t v9 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a1 + 800) - (void)v8) >> 7);
        if (*(char **)(a1 + 800) == v8)
        {
          sub_2194868F8((char **)(a1 + 792), 1 - v9);
          unsigned int v8 = *(char **)(a1 + 792);
        }
        else if (v9 >= 2)
        {
          *(void *)(a1 + 800) = v8 + 6528;
        }
        sub_219483540(a1 + 680, a2, v8, a1 + 600, a1 + 32);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_219483158(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a2 + 92)) {
    return *(void *)(a2 + 168) == 0;
  }
  if (*(unsigned char *)(a2 + 165) == 1)
  {
    uint64_t v4 = *(__CVBuffer **)(a2 + 168);
    if (!v4) {
      return 1;
    }
    int BytesPerRow = CVPixelBufferGetBytesPerRow(v4);
    int Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 168));
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Lacc config and metadata received\n", buf, 2u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 168));
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = Width;
      _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "width = %d", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = Height;
      _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "height = %d", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = BytesPerRow;
      _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "stride = %d", buf, 8u);
    }
    CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(a2 + 168), 0);
    BaseAddress = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a2 + 168));
    unsigned int v9 = Height * BytesPerRow;
  }
  else
  {
    unsigned int v9 = dword_267C2A7C0;
    BaseAddress = &unk_267C2A448;
  }
  size_t v11 = v9;
  CVPixelBufferRef pixelBuffer = 0;
  unsigned int v12 = sub_2194837A0((_DWORD *)(a1 + 600), (uint64_t)BaseAddress, v9);
  int v13 = sub_219501564(v12, 1u, 0x4C303038u, &pixelBuffer, 16, 16, 0, 1, 0);
  BOOL v10 = v13 == 0;
  if (!v13)
  {
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    int v16 = pixelBuffer;
    unint64_t v17 = operator new(0x20uLL);
    *unint64_t v17 = &unk_26CAD6260;
    v17[1] = MEMORY[0x263F03DE8];
    v17[2] = v16;
    *((_DWORD *)v17 + 6) = 0;
    long long v21 = (uint8_t *)v17;
    uint64_t v18 = CVPixelBufferGetBaseAddress(v16);
    memcpy(v18, BaseAddress, v11);
    *(void *)(a1 + 600) = pixelBuffer;
    *(unsigned char *)(a1 + 29) = 1;
    if (!v21) {
      sub_2194867AC();
    }
    (*(void (**)(uint8_t *))(*(void *)v21 + 48))(v21);
    if (v21 == buf)
    {
      (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
    }
    else if (v21)
    {
      (*(void (**)(void))(*(void *)v21 + 40))();
    }
  }
  int v14 = *(__CVBuffer **)(a2 + 168);
  if (v14)
  {
    if (*(unsigned char *)(a2 + 165) == 1)
    {
      CVPixelBufferUnlockBaseAddress(v14, 0);
      int v14 = *(__CVBuffer **)(a2 + 168);
    }
    CVPixelBufferRelease(v14);
  }
  return v10;
}

void sub_219483510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2194838AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_219483524(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_21947E028(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_219483540(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  bzero(a3, 0x1980uLL);
  *(_DWORD *)(a4 + 72) = (*(void *)a4 != 0) << 12;
  int v10 = *(_DWORD *)(a4 + 20) * *(_DWORD *)(a4 + 16);
  sub_219486B30(a1, a2, a3 + 64, a4, a5);
  unsigned int v12 = *((_DWORD *)a3 + 1) & 0xFFFFFFFC | (v10 != 0);
  *((_DWORD *)a3 + 1) = v12;
  if (v10)
  {
    *(unsigned char *)(a5 + 472) = 1;
    *(_DWORD *)(a5 + 476) = 0;
    if (sub_2194C0260(a5 + 452, *(_DWORD *)(a4 + 16), *(_DWORD *)(a4 + 20), *(_DWORD *)(a4 + 12), 8) != v10) {
      sub_219502B84();
    }
    unsigned int v12 = *((_DWORD *)a3 + 1) & 0xFFFFFFF3 | 4;
    *((_DWORD *)a3 + 1) = v12;
    *((void *)a3 + 797) = *(void *)(a4 + 56);
    *((_DWORD *)a3 + 1596) = v10;
  }
  int v13 = *(_DWORD *)(a4 + 28);
  int v14 = *(_DWORD *)(a4 + 32);
  int v15 = v14 * v13;
  if (v14 * v13)
  {
    *(unsigned char *)(a5 + 500) = 1;
    *(_DWORD *)(a5 + 504) = 0;
    if (sub_2194C0260(a5 + 480, v13, v14, *(_DWORD *)(a4 + 24), 8) != v15) {
      sub_219502B4C();
    }
    unsigned int v12 = *((_DWORD *)a3 + 1) & 0xFFFFFFCF | 0x10;
    *((_DWORD *)a3 + 1) = v12;
    *(void *)(a3 + 6388) = *(void *)(a4 + 64);
    *((_DWORD *)a3 + 1599) = v15;
  }
  int v16 = *(_DWORD *)(a4 + 40);
  int v17 = *(_DWORD *)(a4 + 44);
  int v18 = v17 * v16;
  if (v17 * v16)
  {
    *(unsigned char *)(a5 + 528) = 1;
    *(_DWORD *)(a5 + 532) = *(_DWORD *)(a4 + 72);
    if (sub_2194C0260(a5 + 508, v16, v17, *(_DWORD *)(a4 + 36), 8) != v18) {
      sub_219502B14();
    }
    *(_DWORD *)(a4 + 72) += v18;
    uint64_t v19 = *(void *)(a4 + 64) + *(unsigned int *)(a5 + 532);
    unsigned int v12 = *((_DWORD *)a3 + 1) & 0xFFFFFF3F | 0x40;
    *((_DWORD *)a3 + 1) = v12;
    *((void *)a3 + 800) = v19;
    *((_DWORD *)a3 + 1602) = v18;
  }
  if (*(unsigned char *)(a5 + 360))
  {
    uint64_t v20 = *(void *)(a4 + 64) + *(unsigned int *)(a5 + 364);
    unsigned int v12 = v12 & 0xFFFFF3FF | 0x400;
    *((_DWORD *)a3 + 1) = v12;
    *((void *)a3 + 803) = v20;
    *((_DWORD *)a3 + 1608) = *(_DWORD *)(a5 + 348) * *(_DWORD *)(a5 + 352);
  }
  if (*(unsigned char *)(a5 + 388))
  {
    uint64_t v21 = *(void *)(a4 + 64) + *(unsigned int *)(a5 + 392);
    *((_DWORD *)a3 + 1) = v12 & 0xFFFFCFFF | 0x1000;
    *(void *)(a3 + 6436) = v21;
    *((_DWORD *)a3 + 1611) = *(_DWORD *)(a5 + 376) * *(_DWORD *)(a5 + 380);
  }
  if (v10)
  {
    *((_DWORD *)a3 + 1334) = *(_DWORD *)(a4 + 8);
    *((_DWORD *)a3 + 1335) = 0x80000000;
    *((void *)a3 + 668) = 0;
    *(void *)&double result = 0x600000006;
    *((void *)a3 + 651) = 0x600000006;
    *((_DWORD *)a3 + 1295) = 0x80000;
  }
  return result;
}

unint64_t sub_2194837A0(_DWORD *a1, uint64_t a2, unint64_t a3)
{
  if (!a2) {
    sub_219502BBC();
  }
  a1[2] = *(unsigned __int16 *)(a2 + 8);
  uint64_t v5 = *(unsigned int *)(a2 + 28);
  if (v5)
  {
    int v6 = (const char *)(a2 + 41);
    unint64_t v7 = 96;
    while (1)
    {
      if (!strncmp(v6, "ro", 7uLL))
      {
        a1[6] = *(_DWORD *)(v6 - 5);
        uint64_t v8 = *(unsigned int *)(v6 - 9);
        a1[7] = v8;
        a1[8] = 1;
      }
      else
      {
        if (strncmp(v6, "text", 7uLL)) {
          goto LABEL_6;
        }
        a1[3] = *(_DWORD *)(v6 - 5);
        a1[4] = 64;
        unsigned int v9 = *(_DWORD *)(v6 - 9) + 63;
        a1[5] = v9 >> 6;
        uint64_t v8 = v9 & 0xFFFFFFC0;
      }
      v7 += v8;
LABEL_6:
      v6 += 16;
      if (!--v5) {
        goto LABEL_11;
      }
    }
  }
  unint64_t v7 = 96;
LABEL_11:
  if (!(a1[5] * a1[4])) {
    sub_219502BF4();
  }
  if (v7 < a3) {
    sub_219502C2C();
  }
  return v7;
}

void *sub_2194838AC(void *a1)
{
  uint64_t v2 = a1[3];
  if (!v2) {
    sub_2194867AC();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  uint64_t v3 = (void *)a1[3];
  if (v3 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    return a1;
  }
}

uint64_t sub_219483974()
{
  return 3776;
}

uint64_t sub_21948397C()
{
  return 6528;
}

uint64_t sub_219483984()
{
  return 1664;
}

double sub_21948398C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v6 = *(_DWORD **)(a1 + 792);
  unsigned int v7 = *(unsigned __int16 *)(a1 + 16);
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);

  *(void *)&double result = sub_219483A18(v6, v7, v8, a2, a3, (void *)(a1 + 32)).n128_u64[0];
  return result;
}

__n128 sub_219483A18(_DWORD *a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, void *a6)
{
  if (a2)
  {
    uint64_t v9 = 0;
    char v10 = 0;
    int v11 = 0;
    uint64_t v12 = 0;
    uint64_t v27 = a2;
    do
    {
      uint64_t v13 = 3 << (v10 & 0xFE);
      if ((v13 & a1[101]) != 0)
      {
        uint64_t v14 = *a6 + v9;
        int v15 = sub_2194E2288(a4, v12);
        int v16 = sub_2194E2288(a5, v12);
        v11 += sub_2194C023C(v14, v15, v16, v11);
      }
      if ((v13 & a1[102]) != 0)
      {
        uint64_t v17 = a6[9] + v9;
        int v18 = sub_2194E2288(a4, v12);
        int v19 = sub_2194E2288(a5, v12);
        v11 += sub_2194C0214(v17, v18, v19, v11);
      }
      ++v12;
      v10 += 2;
      v9 += 28;
    }
    while (v27 != v12);
  }
  else
  {
    int v11 = 0;
  }
  if (a1[545])
  {
    uint64_t v20 = a6;
    v11 += sub_2194C02DC(0x186A00u, v11, 64, (uint64_t)(a6 + 32));
    if (!a1[103]) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v20 = a6;
  if (a1[103]) {
LABEL_11:
  }
    v11 += sub_2194C02DC(8 * a1[486], v11, 64, (uint64_t)v20 + 284);
LABEL_12:
  unint64_t v21 = (((unint64_t)a1[544] >> 2) & 3) - 1;
  if (v21 <= 2)
  {
    int v22 = dword_21950C230[v21];
    int v23 = sub_2194C028C(a1[486] * v22, v11, (uint64_t)v20 + 172) + v11;
    int v11 = sub_2194C028C(a1[486] * v22, v23, (uint64_t)(v20 + 18)) + v23;
  }
  int v24 = sub_2194C0260(v20[15], (a3 + 63) & 0xFFFFFFC0, 1, v11, 8) + v11;
  if (*((unsigned char *)v20 + 340))
  {
    *((_DWORD *)v20 + 89) = v24;
    v24 += *((_DWORD *)v20 + 87) * *((_DWORD *)v20 + 88);
  }
  if (*((unsigned char *)v20 + 368))
  {
    *((_DWORD *)v20 + 96) = v24;
    v20[41] = *(void *)((char *)v20 + 356);
    __n128 result = *(__n128 *)((char *)v20 + 340);
    *(__n128 *)(v20 + 39) = result;
    *((unsigned char *)v20 + 332) = 0;
    *((_DWORD *)v20 + 84) = 0;
  }
  return result;
}

uint64_t sub_219483C74(uint64_t a1, int a2)
{
  return ((8 * a2 + 63) & 0xFFFFFFC0) + ((4 * a2 + 63) & 0xFFFFFFC0) + 576;
}

void *sub_219483C98(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  if (a4 != 8) {
    sub_219502C9C();
  }
  if (a3 || (uint64_t v4 = *(const void **)(a1 + 792), *(void *)(a1 + 800) - (void)v4 != 6528)) {
    sub_219502C64();
  }
  int v5 = *(unsigned __int8 *)(a1 + 816);
  *a2 = -1;
  a2[1] = v5;
  a2[3] = 6528;

  return memcpy(a2 + 4, v4, 0x1980uLL);
}

uint64_t sub_219483D04(unsigned int *a1, _DWORD *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7)
{
  if (a7) {
    sub_219502CD4();
  }
  size_t v13 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 56))(a1);
  int v14 = a1[6];

  return sub_219483DA4(a2, v13, a3, a4, a5, a6, v14, a1 + 8);
}

uint64_t sub_219483DA4(_DWORD *a1, size_t a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7, unsigned int *a8)
{
  bzero(a1, a2);
  *a1 = -1;
  a1[1] = a3 | 0x80000000;
  *((void *)a1 + 1) = 0;
  a1[38] |= 0x7FFFFFFFu;
  a1[59] |= 0x7FFFFFFFu;
  a1[80] |= 0x7FFFFFFFu;
  a1[101] |= 0x7FFFFFFFu;
  a1[122] |= 0x7FFFFFFFu;
  a1[143] |= 0x7FFFFFFFu;
  a1[164] |= 0x7FFFFFFFu;
  a1[185] |= 0x7FFFFFFFu;
  a1[206] |= 0x7FFFFFFFu;
  a1[227] |= 0x7FFFFFFFu;
  a1[248] |= 0x7FFFFFFFu;
  a1[269] |= 0x7FFFFFFFu;
  a1[290] |= 0x7FFFFFFFu;
  a1[311] |= 0x7FFFFFFFu;
  a1[332] |= 0x7FFFFFFFu;
  a1[353] |= 0x7FFFFFFFu;
  a1[374] |= 0x7FFFFFFFu;
  a1[395] |= 0x7FFFFFFFu;
  uint64_t v15 = *((void *)a8 + 1) - *(void *)a8;
  *((void *)a1 + 18) = 0x100000012;
  if (((0x6DB6DB6DB6DB6DB7 * (v15 >> 2)) & 0xFFFFFFFFFFFFFFFELL) != 4) {
    sub_219502D0C();
  }
  uint64_t result = sub_2194BFF28((uint64_t)(a1 + 80), a4, a5, a6, 8, 0, 0);
  uint64_t v17 = *(unsigned char **)a8;
  if (**(unsigned char **)a8)
  {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 101), *((_DWORD *)v17 + 1), *((_DWORD *)v17 + 2), *((_DWORD *)v17 + 3), 8, 1, *((_DWORD *)v17 + 4) + a7);
    uint64_t v17 = *(unsigned char **)a8;
  }
  if (v17[28])
  {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 122), *((_DWORD *)v17 + 8), *((_DWORD *)v17 + 9), *((_DWORD *)v17 + 10), 8, 1, *((_DWORD *)v17 + 11) + a7);
    uint64_t v17 = *(unsigned char **)a8;
  }
  if (v17[56])
  {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 143), *((_DWORD *)v17 + 15), *((_DWORD *)v17 + 16), *((_DWORD *)v17 + 17), 8, 1, *((_DWORD *)v17 + 18) + a7);
    uint64_t v17 = *(unsigned char **)a8;
  }
  if (v17[84]) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 164), *((_DWORD *)v17 + 22), *((_DWORD *)v17 + 23), *((_DWORD *)v17 + 24), 8, 1, *((_DWORD *)v17 + 25) + a7);
  }
  uint64_t v18 = *((void *)a8 + 9);
  if (*(unsigned char *)v18)
  {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 101), *(_DWORD *)(v18 + 4), *(_DWORD *)(v18 + 8), *(_DWORD *)(v18 + 12), 4, 1, *(_DWORD *)(v18 + 16) + a7);
    uint64_t v18 = *((void *)a8 + 9);
  }
  if (*(unsigned char *)(v18 + 28))
  {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 122), *(_DWORD *)(v18 + 32), *(_DWORD *)(v18 + 36), *(_DWORD *)(v18 + 40), 4, 1, *(_DWORD *)(v18 + 44) + a7);
    uint64_t v18 = *((void *)a8 + 9);
  }
  if (*(unsigned char *)(v18 + 56))
  {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 143), *(_DWORD *)(v18 + 60), *(_DWORD *)(v18 + 64), *(_DWORD *)(v18 + 68), 4, 1, *(_DWORD *)(v18 + 72) + a7);
    uint64_t v18 = *((void *)a8 + 9);
  }
  if (*(unsigned char *)(v18 + 84)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 164), *(_DWORD *)(v18 + 88), *(_DWORD *)(v18 + 92), *(_DWORD *)(v18 + 96), 4, 1, *(_DWORD *)(v18 + 100) + a7);
  }
  if (v15 == 140)
  {
    if (*(unsigned char *)(*(void *)a8 + 112)) {
      uint64_t result = sub_2194BFF28((uint64_t)(a1 + 185), *(_DWORD *)(*(void *)a8 + 116), *(_DWORD *)(*(void *)a8 + 120), *(_DWORD *)(*(void *)a8 + 124), 8, 1, *(_DWORD *)(*(void *)a8 + 128) + a7);
    }
    uint64_t v19 = *((void *)a8 + 9);
    if (*(unsigned char *)(v19 + 112)) {
      uint64_t result = sub_2194BFF28((uint64_t)(a1 + 185), *(_DWORD *)(v19 + 116), *(_DWORD *)(v19 + 120), *(_DWORD *)(v19 + 124), 4, 1, *(_DWORD *)(v19 + 128) + a7);
    }
  }
  uint64_t v20 = *((void *)a8 + 15);
  if (*(unsigned char *)v20) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 395), *(_DWORD *)(v20 + 4), *(_DWORD *)(v20 + 8), *(_DWORD *)(v20 + 12), 8, 1, *(_DWORD *)(v20 + 16) + a7);
  }
  if (*((unsigned char *)a8 + 256)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 206), a8[65], a8[66], a8[67], 8, 1, a8[68] + a7);
  }
  if (*((unsigned char *)a8 + 284)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 227), a8[72], a8[73], a8[74], 8, 1, a8[75] + a7);
  }
  if (*((unsigned char *)a8 + 144)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 206), a8[37], a8[38], a8[39], 8, 1, a8[40] + a7);
  }
  if (*((unsigned char *)a8 + 172)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 227), a8[44], a8[45], a8[46], 8, 1, a8[47] + a7);
  }
  if (*((unsigned char *)a8 + 340)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 248), a8[86], a8[87], a8[88], 8, 1, a8[89] + a7);
  }
  if (*((unsigned char *)a8 + 312)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 59), a8[79], a8[80], a8[81], 8, 2, a8[82] + a7);
  }
  if (*((unsigned char *)a8 + 368)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 332), a8[93], a8[94], a8[95], 8, 1, a8[96] + a7);
  }
  if (*((unsigned char *)a8 + 452)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 38), a8[114], a8[115], a8[116], 8, 3, a8[117]);
  }
  if (*((unsigned char *)a8 + 480))
  {
    unsigned int v21 = a8[121];
    unsigned int v22 = a8[122];
    unsigned int v23 = a8[123];
    int v24 = a8[124];
    return sub_2194BFF28((uint64_t)(a1 + 269), v21, v22, v23, 8, 3, v24);
  }
  return result;
}

__n128 sub_2194842D4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  *(void *)(a3 + 92) = *(uint64_t *)((char *)a2 + 100);
  uint64_t v4 = *a2;
  *(_WORD *)(a3 + 8) = *((_WORD *)a2 + 4);
  *(void *)a3 = v4;
  uint64_t v5 = *(uint64_t *)((char *)a2 + 10);
  *(_WORD *)(a3 + 18) = *((_WORD *)a2 + 9);
  *(void *)(a3 + 10) = v5;
  uint64_t v6 = *(uint64_t *)((char *)a2 + 20);
  *(_WORD *)(a3 + 28) = *((_WORD *)a2 + 14);
  *(void *)(a3 + 20) = v6;
  uint64_t v7 = *(uint64_t *)((char *)a2 + 30);
  *(_WORD *)(a3 + 38) = *((_WORD *)a2 + 19);
  *(void *)(a3 + 30) = v7;
  uint64_t v8 = a2[5];
  *(_WORD *)(a3 + 48) = *((_WORD *)a2 + 24);
  *(void *)(a3 + 40) = v8;
  long long v9 = *(_OWORD *)((char *)a2 + 52);
  long long v10 = *(_OWORD *)((char *)a2 + 68);
  *(void *)(a3 + 84) = *(uint64_t *)((char *)a2 + 84);
  *(_OWORD *)(a3 + 68) = v10;
  *(_OWORD *)(a3 + 52) = v9;
  long long v11 = *(_OWORD *)((char *)a2 + 126);
  *(_WORD *)(a3 + 124) = *((_WORD *)a2 + 71);
  *(_OWORD *)(a3 + 108) = v11;
  long long v12 = *(_OWORD *)((char *)a2 + 108);
  *(_WORD *)(a3 + 142) = *((_WORD *)a2 + 62);
  *(_OWORD *)(a3 + 126) = v12;
  long long v13 = *((_OWORD *)a2 + 82);
  *(_OWORD *)(a3 + 144) = *((_OWORD *)a2 + 81);
  *(_OWORD *)(a3 + 160) = v13;
  int v14 = (uint16x4_t *)(a2 + 49);
  do
  {
    uint64_t v15 = *(uint32x4_t **)(a3 + 240 + v3);
    uint32x4_t v16 = vmovl_u16(v14[-14]);
    *uint64_t v15 = vmovl_u16(v14[-15]);
    v15[1] = v16;
    uint32x4_t v17 = vmovl_u16(v14[-12]);
    v15[2] = vmovl_u16(v14[-13]);
    v15[3] = v17;
    uint32x4_t v18 = vmovl_u16(v14[-10]);
    v15[4] = vmovl_u16(v14[-11]);
    v15[5] = v18;
    uint32x4_t v19 = vmovl_u16(v14[-8]);
    v15[6] = vmovl_u16(v14[-9]);
    v15[7] = v19;
    uint32x4_t v20 = vmovl_u16(v14[-6]);
    v15[8] = vmovl_u16(v14[-7]);
    v15[9] = v20;
    uint32x4_t v21 = vmovl_u16(v14[-4]);
    v15[10] = vmovl_u16(v14[-5]);
    v15[11] = v21;
    uint32x4_t v22 = vmovl_u16(v14[-2]);
    v15[12] = vmovl_u16(v14[-3]);
    v15[13] = v22;
    uint32x4_t v23 = vmovl_u16(v14[-1]);
    uint32x4_t v24 = vmovl_u16(*v14);
    v3 += 24;
    v14 += 16;
    v15[14] = v23;
    v15[15] = v24;
  }
  while (v3 != 192);
  *(_WORD *)(a3 + 176) = *((_WORD *)a2 + 664);
  *(_DWORD *)(a3 + 436) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a3 + 180) = *((_OWORD *)a2 + 100);
  *(_OWORD *)(a3 + 196) = *((_OWORD *)a2 + 101);
  *(_OWORD *)(a3 + 212) = *((_OWORD *)a2 + 102);
  *(void *)(a3 + 228) = a2[206];
  *(_DWORD *)(a3 + 236) = *((_DWORD *)a2 + 414);
  *(_DWORD *)(a3 + 432) = *((_DWORD *)a2 + 866);
  long long v25 = *(_OWORD *)((char *)a2 + 1660);
  long long v26 = *(_OWORD *)((char *)a2 + 1676);
  *(_DWORD *)(a3 + 512) = *((_DWORD *)a2 + 423);
  *(_OWORD *)(a3 + 480) = v25;
  *(_OWORD *)(a3 + 496) = v26;
  __n128 result = *((__n128 *)a2 + 106);
  long long v28 = *((_OWORD *)a2 + 107);
  *(_DWORD *)(a3 + 548) = *((_DWORD *)a2 + 432);
  *(__n128 *)(a3 + 516) = result;
  *(_OWORD *)(a3 + 532) = v28;
  return result;
}

uint64_t sub_219484480(uint64_t a1, int a2, unsigned int a3)
{
  switch(a2)
  {
    case 0:
      uint64_t result = *(void *)(a1 + 32) + 28 * a3;
      break;
    case 1:
      if (*(unsigned char *)(a1 + 28) != 1) {
        sub_219502D7C();
      }
      uint64_t result = *(void *)(a1 + 56) + 28 * a3;
      break;
    case 2:
      if (*(unsigned char *)(a1 + 28) != 1) {
        sub_219502DB4();
      }
      uint64_t result = *(void *)(a1 + 80) + 28 * a3;
      break;
    case 3:
      uint64_t result = *(void *)(a1 + 104) + 28 * a3;
      break;
    case 4:
      if (*(unsigned char *)(a1 + 28) != 1) {
        sub_219502DEC();
      }
      uint64_t result = *(void *)(a1 + 128) + 28 * a3;
      break;
    case 5:
      int v4 = *(unsigned __int8 *)(a1 + 28);
      if (v4 != 1 && (a3 || v4 != 2)) {
        sub_219502E24();
      }
      uint64_t result = *(void *)(a1 + 152) + 28 * a3;
      break;
    case 6:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_219502E94();
      }
      if (a3) {
        sub_219502E5C();
      }
      uint64_t result = a1 + 176;
      break;
    case 7:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_219502F04();
      }
      if (a3) {
        sub_219502ECC();
      }
      uint64_t result = a1 + 204;
      break;
    case 8:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_219502F74();
      }
      if (a3) {
        sub_219502F3C();
      }
      uint64_t result = a1 + 232;
      break;
    case 9:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_219502FE4();
      }
      if (a3) {
        sub_219502FAC();
      }
      uint64_t result = a1 + 260;
      break;
    case 10:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_219503054();
      }
      if (a3) {
        sub_21950301C();
      }
      uint64_t result = a1 + 288;
      break;
    case 11:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_2195030C4();
      }
      if (a3) {
        sub_21950308C();
      }
      uint64_t result = a1 + 316;
      break;
    case 12:
      if (a3) {
        sub_2195030FC();
      }
      uint64_t result = a1 + 372;
      break;
    case 13:
      if (a3) {
        sub_219503134();
      }
      uint64_t result = a1 + 400;
      break;
    default:
      sub_219502D44();
  }
  return result;
}

uint64_t sub_2194846B8(uint64_t result, int32x4_t *a2)
{
  if (*(unsigned char *)(result + 28) != 2) {
    sub_21950316C();
  }
  uint64_t v2 = *(unsigned __int16 *)(result + 16);
  uint64_t v3 = 2 * v2 - 2;
  if (2 * v2 != 2)
  {
    uint64_t v4 = *(void *)(result + 792);
    if (v3 < 0x10)
    {
      unint64_t v5 = 0;
LABEL_8:
      uint64_t v11 = v5 - 2 * v2 + 2;
      long long v12 = (__int16 *)(v4 + 2 * v5 + 2354);
      long long v13 = &a2->i16[4 * v5];
      do
      {
        __int16 v14 = *v13;
        v13 += 4;
        v12[9] = v14;
        *v12++ = v14;
      }
      while (!__CFADD__(v11++, 1));
      return result;
    }
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v6 = (int16x8_t *)(v4 + 2388);
    uint64_t v7 = a2 + 4;
    unint64_t v8 = v3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v9 = vuzp1q_s16((int16x8_t)vuzp1q_s32(v7[-4], v7[-3]), (int16x8_t)vuzp1q_s32(v7[-2], v7[-1]));
      int16x8_t v10 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v7, v7[1]), (int16x8_t)vuzp1q_s32(v7[2], v7[3]));
      v6[-1] = v9;
      int16x8_t *v6 = v10;
      *(int16x8_t *)((char *)v6 - 34) = v9;
      *(int16x8_t *)((char *)v6 - 18) = v10;
      v6 += 2;
      v7 += 8;
      v8 -= 16;
    }
    while (v8);
    if (v5 != v3) {
      goto LABEL_8;
    }
  }
  return result;
}

void sub_219484784()
{
}

__n128 sub_2194847BC@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2 = (void *)(*(void *)(a1 + 792) + 2188);
  uint64_t v3 = *(void *)(*(void *)(a1 + 792) + 2196);
  v4.n128_u64[0] = *v2;
  v4.n128_u64[1] = HIDWORD(*v2);
  __n128 v5 = v4;
  v4.n128_u64[0] = v3;
  v4.n128_u64[1] = HIDWORD(v3);
  *a2 = v5;
  a2[1] = v4;
  v5.n128_u64[0] = v2[2];
  uint64_t v6 = v2[3];
  v4.n128_u64[0] = v5.n128_u32[0];
  v4.n128_u64[1] = v5.n128_u32[1];
  __n128 result = v4;
  v4.n128_u64[0] = v6;
  v4.n128_u64[1] = HIDWORD(v6);
  a2[2] = result;
  a2[3] = v4;
  return result;
}

uint64_t sub_2194847E8(uint64_t a1)
{
  return *(void *)(a1 + 600);
}

uint64_t sub_2194847F0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 29);
}

uint64_t sub_2194847F8(uint64_t result, int a2)
{
  if (*(unsigned char *)(result + 28) != 2) {
    sub_2195031A4();
  }
  *(_DWORD *)(*(void *)(result + 792) + 3908) = a2;
  return result;
}

void sub_219484824(uint64_t a1, _DWORD *a2)
{
  *a2 = 1;
}

double sub_219484830(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  *(_DWORD *)(a3 + 8) = 2;
  *(_DWORD *)(a3 + 12) = v3;
  if (*a2 == 1)
  {
    int v6 = 0x20000;
    unsigned int v4 = 0x80000;
    uint64_t v5 = 0x200000;
    goto LABEL_5;
  }
  if (*a2 == 2)
  {
    unsigned int v4 = 98304;
    uint64_t v5 = 0x400000;
    int v6 = 98304;
LABEL_5:
    *(void *)&double result = v4 | 0x10000000000000;
    *(void *)a3 = *(void *)(a1 + 824) + v5;
    *(_DWORD *)(a3 + 16) = 0;
    *(double *)(a3 + 20) = result;
    *(_DWORD *)(a3 + 28) = v6;
    return result;
  }
  double result = 0.0;
  *(void *)a3 = -1;
  *(_DWORD *)(a3 + 16) = -1;
  *(void *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 28) = 0;
  return result;
}

double sub_2194848B8(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    sub_2195031DC();
  }
  *(_OWORD *)a2 = xmmword_21950BF90;
  *(void *)&double result = 0x198000000000;
  *(void *)(a2 + 16) = 0x198000000000;
  return result;
}

double sub_2194848EC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  return sub_219484908(a2 + *(unsigned int *)(a2 + 4) + 16, a3, 1, 1);
}

double sub_219484908(uint64_t a1, unsigned __int8 *a2, int a3, char a4)
{
  if ((sub_2194C63A8() & 1) == 0 && (sub_2194C63F0() & 1) == 0) {
    sub_2195032F4();
  }
  if (!a3 || (a4 & 1) == 0) {
    sub_2195032BC();
  }
  unsigned int v8 = *a2;
  if (v8 >= 4) {
    sub_219503284();
  }
  unsigned int v9 = *(_DWORD *)(a1 + 4) & 0xFFFFFFFC | v8;
  *(_DWORD *)(a1 + 4) = v9;
  *(_DWORD *)(a1 + 64) &= ~1u;
  *(void *)(a1 + 128) |= 1uLL;
  *(_DWORD *)(a1 + 3840) |= 1u;
  unsigned int v10 = a2[2];
  if (v10 >= 3) {
    goto LABEL_33;
  }
  if (a2[6] >= 3u) {
    goto LABEL_34;
  }
  unsigned int v11 = a2[3];
  if (v11 > 2) {
    goto LABEL_33;
  }
  if (a2[7] > 2u) {
    goto LABEL_34;
  }
  if (a2[4] > 2u) {
    goto LABEL_33;
  }
  if (a2[8] > 2u) {
    goto LABEL_34;
  }
  if (a2[5] > 2u) {
LABEL_33:
  }
    sub_21950324C();
  if (a2[9] > 2u) {
LABEL_34:
  }
    sub_219503214();
  if (a2[2])
  {
    unsigned int v9 = v9 & 0xFFFFFFF3 | (4 * (v10 & 3));
    *(_DWORD *)(a1 + 4) = v9;
    *(void *)(a1 + 6376) = *((void *)a2 + 162);
    *(_DWORD *)(a1 + 6384) = *((_DWORD *)a2 + 326);
    unsigned int v11 = a2[3];
  }
  if (v11)
  {
    unsigned int v9 = v9 & 0xFFFFFFCF | (16 * (v11 & 3));
    *(_DWORD *)(a1 + 4) = v9;
    *(_DWORD *)(a1 + 6388) = *((_DWORD *)a2 + 327);
    *(void *)(a1 + 6392) = *((void *)a2 + 164);
  }
  if (a2[4])
  {
    unsigned int v9 = v9 & 0xFFFFFF3F | ((a2[4] & 3) << 6);
    *(_DWORD *)(a1 + 4) = v9;
    *(void *)(a1 + 6400) = *((void *)a2 + 165);
    *(_DWORD *)(a1 + 6408) = *((_DWORD *)a2 + 332);
  }
  if (a2[5])
  {
    unsigned int v9 = v9 & 0xFFFFFCFF | ((a2[5] & 3) << 8);
    *(_DWORD *)(a1 + 4) = v9;
    *(_DWORD *)(a1 + 6412) = *((_DWORD *)a2 + 333);
    *(void *)(a1 + 6416) = *((void *)a2 + 167);
  }
  if (a2[6])
  {
    unsigned int v9 = v9 & 0xFFFFF3FF | ((a2[6] & 3) << 10);
    *(_DWORD *)(a1 + 4) = v9;
    *(void *)(a1 + 6424) = *((void *)a2 + 168);
    *(_DWORD *)(a1 + 6432) = *((_DWORD *)a2 + 338);
  }
  if (a2[7])
  {
    unsigned int v9 = v9 & 0xFFFFCFFF | ((a2[7] & 3) << 12);
    *(_DWORD *)(a1 + 4) = v9;
    *(_DWORD *)(a1 + 6436) = *((_DWORD *)a2 + 339);
    *(void *)(a1 + 6440) = *((void *)a2 + 170);
  }
  if (a2[8])
  {
    unsigned int v9 = v9 & 0xFFFF3FFF | ((a2[8] & 3) << 14);
    *(_DWORD *)(a1 + 4) = v9;
    *(void *)(a1 + 6448) = *((void *)a2 + 171);
    *(_DWORD *)(a1 + 6456) = *((_DWORD *)a2 + 344);
  }
  if (a2[9])
  {
    *(_DWORD *)(a1 + 4) = v9 & 0xFFFCFFFF | ((a2[9] & 3) << 16);
    *(_DWORD *)(a1 + 6460) = *((_DWORD *)a2 + 345);
    *(void *)(a1 + 6464) = *((void *)a2 + 173);
  }
  uint64_t v12 = 0;
  long long v13 = a2 + 144;
  uint64_t v14 = a1 + 4032;
  uint64_t v15 = -128;
  do
  {
    *(_DWORD *)(v14 + v15 + 1152) = *(_DWORD *)&v13[v15 - 4];
    uint32x4_t v16 = (_DWORD *)(v14 + v12);
    *uint32x4_t v16 = *(_DWORD *)&v13[v12];
    v16[1] = *(_DWORD *)&v13[v12 + 4];
    v16[2] = *(_DWORD *)&v13[v12 + 8];
    v16[3] = *(_DWORD *)&v13[v12 + 12];
    v16[4] = *(_DWORD *)&v13[v12 + 16];
    v16[5] = *(_DWORD *)&v13[v12 + 20];
    v16[6] = *(_DWORD *)&v13[v12 + 24];
    v16[7] = *(_DWORD *)&v13[v12 + 28];
    v12 += 32;
    v15 += 4;
  }
  while (v15);
  *(_DWORD *)(a1 + 5200) = *((_DWORD *)a2 + 292);
  *(_DWORD *)(a1 + 5340) = *((_DWORD *)a2 + 293);
  *(_DWORD *)(a1 + 5344) = *((_DWORD *)a2 + 294);
  *(_DWORD *)(a1 + 5348) = *((_DWORD *)a2 + 295);
  *(_DWORD *)(a1 + 5204) = a2[1184];
  double result = *(double *)(a2 + 1188);
  *(double *)(a1 + 5208) = result;
  *(_DWORD *)(a1 + 5216) = a2[1196];
  *(_DWORD *)(a1 + 5220) = *((_DWORD *)a2 + 300);
  *(_DWORD *)(a1 + 5236) = a2[1216];
  *(_DWORD *)(a1 + 5252) = *((_DWORD *)a2 + 306);
  *(_DWORD *)(a1 + 5268) = *((_DWORD *)a2 + 310);
  *(_DWORD *)(a1 + 5284) = a2[1256];
  *(_DWORD *)(a1 + 5300) = *((_DWORD *)a2 + 316);
  *(_DWORD *)(a1 + 5224) = *((_DWORD *)a2 + 301);
  *(_DWORD *)(a1 + 5240) = a2[1217];
  *(_DWORD *)(a1 + 5256) = *((_DWORD *)a2 + 307);
  *(_DWORD *)(a1 + 5272) = *((_DWORD *)a2 + 311);
  *(_DWORD *)(a1 + 5288) = a2[1257];
  *(_DWORD *)(a1 + 5304) = *((_DWORD *)a2 + 317);
  *(_DWORD *)(a1 + 5228) = *((_DWORD *)a2 + 302);
  *(_DWORD *)(a1 + 5244) = a2[1218];
  *(_DWORD *)(a1 + 5260) = *((_DWORD *)a2 + 308);
  *(_DWORD *)(a1 + 5276) = *((_DWORD *)a2 + 312);
  *(_DWORD *)(a1 + 5292) = a2[1258];
  *(_DWORD *)(a1 + 5308) = *((_DWORD *)a2 + 318);
  *(_DWORD *)(a1 + 5232) = *((_DWORD *)a2 + 303);
  *(_DWORD *)(a1 + 5248) = a2[1219];
  *(_DWORD *)(a1 + 5264) = *((_DWORD *)a2 + 309);
  *(_DWORD *)(a1 + 5280) = *((_DWORD *)a2 + 313);
  *(_DWORD *)(a1 + 5296) = a2[1259];
  int v18 = *((_DWORD *)a2 + 323);
  *(_DWORD *)(a1 + 5316) = *((_DWORD *)a2 + 320);
  *(_DWORD *)(a1 + 5320) = a2[1284];
  *(_DWORD *)(a1 + 5324) = a2[1286];
  *(_DWORD *)(a1 + 5328) = a2[1287];
  *(_DWORD *)(a1 + 5332) = a2[1288];
  *(_DWORD *)(a1 + 5336) = v18;
  return result;
}

double sub_219484C9C(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    sub_21950332C();
  }
  *(_OWORD *)a2 = xmmword_21950BFA0;
  *(void *)(a2 + 16) = 0;
  *(void *)&double result = 0x100000012;
  *(void *)(a2 + 152) = 0x100000012;
  *(_DWORD *)(a2 + 160) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 244) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 328) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 412) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 496) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 580) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 664) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 748) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 832) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 916) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1000) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1084) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1168) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1252) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1336) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1420) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1504) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1588) |= 0x7FFFFFFFu;
  return result;
}

void sub_219484DAC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = a2 + *(unsigned int *)(a2 + 4);
  if (*(unsigned __int8 *)(v4 + 144) <= *(unsigned __int8 *)(a3 + 2)) {
    sub_219503364();
  }
  if (*(unsigned char *)a3)
  {
    uint64_t v5 = v4 + 84 * *(unsigned __int8 *)(a3 + 2);
    *(_DWORD *)(v5 + 152) = *(_DWORD *)(v5 + 152) & 0x80000000 | a4 & 0x7FFFFFFF;
    *(_WORD *)(v5 + 166) = *(_WORD *)(a3 + 4);
    int v6 = *(_DWORD *)(a3 + 24);
    *(_WORD *)(v5 + 164) = *(_DWORD *)(a3 + 20);
    *(_WORD *)(v5 + 162) = v6;
    int v7 = *(_DWORD *)(a3 + 32);
    *(_WORD *)(v5 + 160) = *(_DWORD *)(a3 + 28);
    *(_DWORD *)(v5 + 156) = v7;
  }
}

uint64_t sub_219484E18(uint64_t a1, _OWORD *a2, unint64_t a3)
{
  long long v3 = a2[201];
  v8[4] = a2[200];
  v8[5] = v3;
  long long v4 = a2[203];
  v8[6] = a2[202];
  v8[7] = v4;
  long long v5 = a2[197];
  v8[0] = a2[196];
  v8[1] = v5;
  long long v6 = a2[199];
  v8[2] = a2[198];
  void v8[3] = v6;
  if (a3 >= 0x20) {
    sub_21950339C();
  }
  return *((unsigned int *)v8 + a3);
}

void *sub_219484E7C(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  memcpy(v9, (const void *)(a2 + 2112), sizeof(v9));
  if (!a4) {
    sub_2195033D4();
  }
  if (a3 >= 0x20) {
    sub_21950347C();
  }
  if (!a5) {
    sub_21950340C();
  }
  if (a5 >= 9) {
    sub_219503444();
  }
  return memcpy(a4, &v9[2 * a3], 4 * a5);
}

void *sub_219484F04(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  memcpy(v9, (const void *)(a2 + 2112), sizeof(v9));
  if (!a4) {
    sub_2195034B4();
  }
  if (a3 >= 0x20) {
    sub_21950355C();
  }
  if (!a5) {
    sub_2195034EC();
  }
  if (a5 >= 5) {
    sub_219503524();
  }
  return memcpy(a4, &v9[2 * a3], 8 * a5);
}

uint64_t sub_219484F8C(uint64_t a1, _DWORD *a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (!a4) {
    sub_219503594();
  }
  *a5 = 0;
  if (a3 <= 0x7F)
  {
    int v5 = *(_DWORD *)((char *)a2 + (a3 & 0xFFFFFFFFFFFFFFFCLL) + 3136);
LABEL_7:
    *(_DWORD *)a4 = v5;
    *a5 = 4;
    return 1;
  }
  if (a3 == 2004)
  {
    *a5 = 4;
    int v6 = a2[834];
LABEL_11:
    *(_DWORD *)a4 = v6;
    return 1;
  }
  if (a3 == 2000)
  {
    int v5 = a2[835];
    goto LABEL_7;
  }
  if (a3 - 2008 <= 0xB)
  {
    *a5 = 4;
    int v6 = *(_DWORD *)((char *)a2 + ((a3 + 1336) & 0xFFFFFFFC));
    goto LABEL_11;
  }
  if (a3 - 6000 <= 0x3FF)
  {
    *a5 = 32;
    unsigned int v8 = (_OWORD *)((char *)a2 + ((a3 - 6000) & 0xFFFFFFFFFFFFFFE0) + ((8 * a3 - 13952) & 0xFFFFFFE0));
    long long v9 = v8[1];
    *(_OWORD *)a4 = *v8;
    *(_OWORD *)(a4 + 16) = v9;
    return 1;
  }
  uint64_t result = 0;
  *((void *)&v10 + 1) = a3;
  *(void *)&long long v10 = a3 - 10000;
  switch((unint64_t)(v10 >> 2))
  {
    case 0uLL:
      *a5 = 4;
      int v6 = a2[848];
      goto LABEL_11;
    case 1uLL:
      *a5 = 4;
      int v6 = a2[850];
      goto LABEL_11;
    case 2uLL:
      *a5 = 4;
      int v6 = a2[854];
      goto LABEL_11;
    case 5uLL:
      *a5 = 4;
      int v6 = a2[857];
      goto LABEL_11;
    case 7uLL:
      *a5 = 4;
      int v6 = a2[856];
      goto LABEL_11;
    case 0xDuLL:
      *a5 = 4;
      int v6 = a2[846];
      goto LABEL_11;
    case 0xEuLL:
      *a5 = 4;
      int v6 = a2[847];
      goto LABEL_11;
    case 0xFuLL:
      *a5 = 4;
      int v6 = a2[849];
      goto LABEL_11;
    case 0x10uLL:
      *a5 = 4;
      int v6 = a2[851];
      goto LABEL_11;
    case 0x11uLL:
      *a5 = 4;
      int v6 = a2[852];
      goto LABEL_11;
    case 0x12uLL:
      *a5 = 4;
      int v6 = a2[853];
      goto LABEL_11;
    case 0x13uLL:
      *a5 = 4;
      int v6 = a2[855];
      goto LABEL_11;
    case 0x14uLL:
      *a5 = 4;
      int v6 = a2[858];
      goto LABEL_11;
    case 0x15uLL:
      *a5 = 4;
      int v6 = a2[859];
      goto LABEL_11;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2194851CC(uint64_t a1, _DWORD *a2)
{
  return sub_2194851D4(a2);
}

uint64_t sub_2194851D4(_DWORD *a1)
{
  *(void *)((char *)&v58[2] + 4) = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503F30();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503EBC();
  }
  sub_2194885C0((uint64_t)v46, 16);
  uint64_t v1 = 0;
  uint64_t v2 = a1 + 535;
  do
  {
    long long v3 = (char *)v46 + *(void *)(v46[0] - 24);
    if (*((_DWORD *)v3 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(v46[0] - 24)));
      long long v4 = std::locale::use_facet(&v50, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
      std::locale::~locale(&v50);
    }
    *((_DWORD *)v3 + 36) = 48;
    sub_2194889DC(v47, (uint64_t)"GRF ", 4);
    int v5 = (void *)std::ostream::operator<<();
    int v6 = sub_2194889DC(v5, (uint64_t)" = 0x", 5);
    uint64_t v7 = *v6;
    *(_DWORD *)((char *)v6 + *(void *)(*v6 - 24) + 8) = *(_DWORD *)((unsigned char *)v6 + *(void *)(*v6 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v6 + *(void *)(v7 - 24) + 24) = 8;
    unsigned int v8 = (void *)std::ostream::operator<<();
    long long v9 = sub_2194889DC(v8, (uint64_t)"\t\t", 2);
    *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 8) = *(_DWORD *)((unsigned char *)v9 + *(void *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 2;
    long long v10 = (void *)std::ostream::operator<<();
    sub_2194889DC(v10, (uint64_t)" = (", 4);
    unsigned int v11 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v12 = *v11;
    *(_DWORD *)((char *)v11 + *(void *)(*v11 - 24) + 8) = *(_DWORD *)((unsigned char *)v11 + *(void *)(*v11 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v11 + *(void *)(v12 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    long long v13 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v14 = *v13;
    *(_DWORD *)((char *)v13 + *(void *)(*v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v13 + *(void *)(v14 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    uint64_t v15 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v16 = *v15;
    *(_DWORD *)((char *)v15 + *(void *)(*v15 - 24) + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v15 + *(void *)(v16 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    uint32x4_t v17 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v18 = *v17;
    *(_DWORD *)((char *)v17 + *(void *)(*v17 - 24) + 8) = *(_DWORD *)((unsigned char *)v17 + *(void *)(*v17 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v17 + *(void *)(v18 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    uint32x4_t v19 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v20 = *v19;
    *(_DWORD *)((char *)v19 + *(void *)(*v19 - 24) + 8) = *(_DWORD *)((unsigned char *)v19 + *(void *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v19 + *(void *)(v20 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    uint32x4_t v21 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v22 = *v21;
    *(_DWORD *)((char *)v21 + *(void *)(*v21 - 24) + 8) = *(_DWORD *)((unsigned char *)v21 + *(void *)(*v21 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v21 + *(void *)(v22 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    uint32x4_t v23 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v24 = *v23;
    *(_DWORD *)((char *)v23 + *(void *)(*v23 - 24) + 8) = *(_DWORD *)((unsigned char *)v23 + *(void *)(*v23 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v23 + *(void *)(v24 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    long long v25 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v26 = *v25;
    *(_DWORD *)((char *)v25 + *(void *)(*v25 - 24) + 8) = *(_DWORD *)((unsigned char *)v25 + *(void *)(*v25 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v25 + *(void *)(v26 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)")", 1);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str();
      sub_219503E40(&v45, &v44, buf, v58);
    }
    BYTE1(v56) = 0;
    LOBYTE(v50.__locale_) = 0;
    std::stringbuf::str();
    if (SBYTE1(v56) < 0) {
      operator delete(v50.__locale_);
    }
    ++v1;
    v2 += 8;
  }
  while (v1 != 32);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    int v29 = a1[816];
    int v30 = a1[823];
    v50.__locale_ = (std::locale::__imp *)67109888;
    __int16 v51 = 1024;
    int v52 = v29;
    __int16 v53 = 1024;
    int v54 = 0;
    __int16 v55 = 1024;
    int v56 = v30;
    _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
LABEL_15:
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      goto LABEL_61;
    }
  }
  else if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    goto LABEL_15;
  }
  int v31 = a1[817];
  int v32 = a1[824];
  v50.__locale_ = (std::locale::__imp *)0x104000400;
  __int16 v51 = 1024;
  int v52 = v31;
  __int16 v53 = 1024;
  int v54 = 1;
  __int16 v55 = 1024;
  int v56 = v32;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_16:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v33 = a1[818];
  int v34 = a1[825];
  v50.__locale_ = (std::locale::__imp *)0x204000400;
  __int16 v51 = 1024;
  int v52 = v33;
  __int16 v53 = 1024;
  int v54 = 2;
  __int16 v55 = 1024;
  int v56 = v34;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_17:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v35 = a1[819];
  int v36 = a1[826];
  v50.__locale_ = (std::locale::__imp *)0x304000400;
  __int16 v51 = 1024;
  int v52 = v35;
  __int16 v53 = 1024;
  int v54 = 3;
  __int16 v55 = 1024;
  int v56 = v36;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_18:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_19;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v37 = a1[820];
  int v38 = a1[827];
  v50.__locale_ = (std::locale::__imp *)0x404000400;
  __int16 v51 = 1024;
  int v52 = v37;
  __int16 v53 = 1024;
  int v54 = 4;
  __int16 v55 = 1024;
  int v56 = v38;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_19:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v39 = a1[821];
  int v40 = a1[828];
  v50.__locale_ = (std::locale::__imp *)0x504000400;
  __int16 v51 = 1024;
  int v52 = v39;
  __int16 v53 = 1024;
  int v54 = 5;
  __int16 v55 = 1024;
  int v56 = v40;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_20:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_65:
  int v41 = a1[822];
  int v42 = a1[829];
  v50.__locale_ = (std::locale::__imp *)0x604000400;
  __int16 v51 = 1024;
  int v52 = v41;
  __int16 v53 = 1024;
  int v54 = 6;
  __int16 v55 = 1024;
  int v56 = v42;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
LABEL_21:
  }
    sub_219503DA8();
LABEL_22:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503D20();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503C98();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503C24();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503BB0();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503B3C();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503AC8();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503A54();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_2195039E0();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_21950396C();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_2195038F8();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503884();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503810();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_21950379C();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503728();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_2195036B4();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503640();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_2195035CC();
  }
  v46[0] = *MEMORY[0x263F8C2B8];
  uint64_t v27 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v46 + *(void *)(v46[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v47[0] = v27;
  v47[1] = MEMORY[0x263F8C318] + 16;
  if (v48 < 0) {
    operator delete((void *)v47[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21D48B530](&v49);
}

void sub_219485FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2194888A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_219485FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::locale::~locale((std::locale *)(v6 - 160));
  sub_2194888A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_219485FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (*(char *)(v6 - 137) < 0)
  {
    operator delete(*(void **)(v6 - 160));
    sub_2194888A4((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_2194888A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21948605C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = (((unint64_t)*(unsigned int *)(a3 + 2192) >> 2) & 3) - 1;
  if (v4 >= 3) {
    sub_219503F78();
  }
  int v5 = dword_21950C230[v4];
  *(_DWORD *)(a4 + 4) = *(unsigned __int16 *)(a1 + 16);
  *(_DWORD *)(a4 + 8) = v5;

  return sub_2194860B8(a2, a3, a4);
}

uint64_t sub_2194860B8(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  if ((*(_DWORD *)(a2 + 148) & 0x1F) != 1 && (*(_DWORD *)(a2 + 148) & 0x1Fu) > *(_DWORD *)a3)
  {
    uint64_t v6 = a2;
    if (*(unsigned char *)(a2 + 1576))
    {
      uint64_t v7 = *(void *)(a3 + 32);
      int v8 = a1[228];
      *(_DWORD *)(a3 + 12) = a1[207];
      *(_DWORD *)(a3 + 16) = v8;
      *(_DWORD *)(a3 + 20) = a1[396];
      unint64_t v9 = HIDWORD(*(void *)(a2 + 144)) & 0x1FLL;
      *(_DWORD *)(a3 + 24) = v9;
      unint64_t v10 = (*(void *)(a3 + 40) - v7) >> 2;
      if (v9 <= v10)
      {
        if (v9 < v10) {
          *(void *)(a3 + 40) = v7 + 4 * v9;
        }
      }
      else
      {
        sub_219488D70(a3 + 32, v9 - v10);
      }
      uint64_t v11 = *(void *)(a3 + 56);
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a3 + 64) - v11) >> 3);
      if (v9 <= v12)
      {
        if (v9 < v12) {
          *(void *)(a3 + 64) = v11 + 24 * v9;
        }
      }
      else
      {
        sub_219488F20((char **)(a3 + 56), v9 - v12);
      }
      uint64_t v13 = *(void *)(a3 + 80);
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a3 + 88) - v13) >> 3);
      if (v9 <= v14)
      {
        if (v9 < v14) {
          *(void *)(a3 + 88) = v13 + 24 * v9;
        }
      }
      else
      {
        sub_219488F20((char **)(a3 + 80), v9 - v14);
      }
      uint64_t v15 = *(void *)(a3 + 104);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a3 + 112) - v15) >> 3);
      if (v9 <= v16)
      {
        if (v9 < v16) {
          *(void *)(a3 + 112) = v15 + 24 * v9;
        }
      }
      else
      {
        sub_219488F20((char **)(a3 + 104), v9 - v16);
      }
      uint64_t v17 = *(void *)(a3 + 128);
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a3 + 136) - v17) >> 3);
      if (v9 <= v18)
      {
        if (v9 < v18) {
          *(void *)(a3 + 136) = v17 + 24 * v9;
        }
      }
      else
      {
        sub_219488F20((char **)(a3 + 128), v9 - v18);
      }
      uint64_t v19 = *(void *)(a3 + 152);
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a3 + 160) - v19) >> 3);
      if (v9 <= v20)
      {
        if (v9 < v20) {
          *(void *)(a3 + 160) = v19 + 24 * v9;
        }
      }
      else
      {
        sub_219488F20((char **)(a3 + 152), v9 - v20);
      }
      uint64_t v21 = *(void *)(a3 + 176);
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a3 + 184) - v21) >> 3);
      if (v9 <= v22)
      {
        if (v9 < v22) {
          *(void *)(a3 + 184) = v21 + 24 * v9;
        }
      }
      else
      {
        sub_219488F20((char **)(a3 + 176), v9 - v22);
      }
      uint64_t v23 = *(void *)(a3 + 200);
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a3 + 208) - v23) >> 3);
      if (v9 <= v24)
      {
        if (v9 < v24) {
          *(void *)(a3 + 208) = v23 + 24 * v9;
        }
      }
      else
      {
        sub_219488F20((char **)(a3 + 200), v9 - v24);
      }
      if (v9)
      {
        uint64_t v25 = 0;
        uint64_t v26 = v6 + 2000;
        uint64_t v27 = *(void *)(a3 + 32);
        uint64_t v28 = *(void *)(a3 + 56);
        uint64_t v29 = *(void *)(a3 + 80);
        uint64_t v30 = *(void *)(a3 + 104);
        uint64_t v31 = *(void *)(a3 + 128);
        uint64_t v32 = *(void *)(a3 + 152);
        uint64_t v33 = *(void *)(a3 + 176);
        uint64_t v34 = *(void *)(a3 + 200);
        do
        {
          *(_DWORD *)(v27 + 4 * v25) = *(_DWORD *)(v26 + 4 * v25) & 0x1FFF;
          if (*(_DWORD *)(a3 + 4))
          {
            unint64_t v35 = 0;
            uint64_t v36 = 936;
            do
            {
              uint64_t v37 = 4 * v35;
              uint64_t v38 = v6 + 4 * v35;
              *(_DWORD *)(v28 + v37) = *(_DWORD *)(v38 + 616) & 0x7FF;
              *(_DWORD *)(v29 + v37) = *(_WORD *)(v38 + 618) & 0x1FFF;
              *(_DWORD *)(v30 + v37) = *(_DWORD *)(v6 + v36) & 0x3FF;
              *(_DWORD *)(v31 + v37) = *(_WORD *)(v6 + v36 + 2) & 0x1FFF;
              *(_DWORD *)(v32 + v37) = *(_DWORD *)(v6 + v36 + 320) & 0x3FF;
              *(_DWORD *)(v33 + v37) = *(_DWORD *)(v6 + v36 + 664) & 0x7FF;
              *(_DWORD *)(v34 + v37) = *(_WORD *)(v6 + v36 + 666) & 0xFFF;
              ++v35;
              v36 += 4;
            }
            while (v35 < *(unsigned int *)(a3 + 4));
          }
          ++v25;
          v6 += 20;
          v34 += 24;
          v28 += 24;
          v29 += 24;
          v30 += 24;
          v31 += 24;
          v32 += 24;
          v33 += 24;
        }
        while (v25 != v9);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    *(_DWORD *)a3 = 0xFFFF;
  }
  return result;
}

uint64_t sub_219486424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_219486434(a2, a3, a4);
}

uint64_t sub_219486434(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 8);
  int v4 = *(_DWORD *)(a3 + 12) + v3 * *(_DWORD *)(a3 + 232);
  int v5 = *(_DWORD *)(a3 + 16) + *(_DWORD *)(a3 + 236) * v3;
  unsigned int v6 = (v4 + 63) & 0xFFFFFFC0;
  *(_DWORD *)(result + 828) = v6;
  unsigned int v7 = (v5 + 63) & 0xFFFFFFC0;
  *(_DWORD *)(result + 912) = v7;
  *(_DWORD *)(a3 + 240) = v4;
  *(_DWORD *)(a3 + 244) = v6;
  *(_DWORD *)(a3 + 248) = v5;
  *(_DWORD *)(a3 + 252) = v7;
  unint64_t v8 = (*(_DWORD *)(a3 + 228) - *(_DWORD *)(a3 + 224));
  if (!v8) {
    sub_219503FB0();
  }
  *(void *)(a2 + 144) = *(void *)(a2 + 144) & 0xFFFFFFE0FFFFFFFFLL | ((unint64_t)((*(unsigned char *)(a3 + 228)
                                                                                            - *(unsigned char *)(a3 + 224)) & 0x1F) << 32);
  *(_DWORD *)(a2 + 2516) = v8;
  unint64_t v9 = *(unsigned int *)(a3 + 224);
  if (v9 < *(_DWORD *)(a3 + 228))
  {
    uint64_t v10 = a2 + 2000;
    uint64_t v11 = 24 * v9;
    do
    {
      unsigned int v12 = v9 - *(_DWORD *)(a3 + 224);
      uint64_t v13 = 4 * v12;
      uint64_t result = *(_DWORD *)(v10 + v13) & 0xFFFFE000 | *(_DWORD *)(*(void *)(a3 + 32) + 4 * v9) & 0x1FFF;
      *(_DWORD *)(v10 + v13) = result;
      *(_DWORD *)(a2 + 2524 + v13) = *(_DWORD *)(*(void *)(a3 + 32) + 4 * v9);
      if (*(_DWORD *)(a3 + 4))
      {
        unint64_t v14 = 0;
        uint64_t v15 = a2 + 20 * v12;
        uint64_t v16 = 936;
        do
        {
          uint64_t result = 4 * v14;
          uint64_t v17 = v15 + 4 * v14;
          unsigned int v18 = *(_DWORD *)(v17 + 616) & 0xFFFFF800 | *(_DWORD *)(*(void *)(a3 + 56) + v11 + 4 * v14) & 0x7FF;
          *(_DWORD *)(v17 + 616) = v18;
          *(_DWORD *)(v17 + 616) = v18 & 0xE000FFFF | ((*(_DWORD *)(*(void *)(a3 + 80) + v11 + 4 * v14) & 0x1FFF) << 16);
          uint64_t v19 = (unsigned int *)(v15 + v16);
          unsigned int v20 = *(_DWORD *)(v15 + v16) & 0xFFFFFC00 | *(_DWORD *)(*(void *)(a3 + 104) + v11 + 4 * v14) & 0x3FF;
          *uint64_t v19 = v20;
          *uint64_t v19 = v20 & 0xE000FFFF | ((*(_DWORD *)(*(void *)(a3 + 128) + v11 + 4 * v14) & 0x1FFF) << 16);
          v19[80] = *(_DWORD *)(v15 + v16 + 320) & 0xFFFFFC00 | *(_DWORD *)(*(void *)(a3 + 152) + v11 + 4 * v14) & 0x3FF;
          unsigned int v21 = *(_DWORD *)(v15 + v16 + 664) & 0xFFFFF800 | *(_DWORD *)(*(void *)(a3 + 176) + v11 + 4 * v14) & 0x7FF;
          v19[166] = v21;
          v19[166] = v21 & 0xF000FFFF | ((*(_DWORD *)(*(void *)(a3 + 200) + v11 + 4 * v14++) & 0xFFF) << 16);
          v16 += 4;
        }
        while (v14 < *(unsigned int *)(a3 + 4));
      }
      ++v9;
      v11 += 24;
    }
    while (v9 < *(unsigned int *)(a3 + 228));
  }
  if (v8 < *(_DWORD *)(a3 + 24))
  {
    unint64_t v22 = (_DWORD *)(a2 + 20 * v8);
    do
    {
      uint64_t v23 = 4 * v8;
      *(_DWORD *)(a2 + 2000 + v23) = *(_DWORD *)(a2 + 2000 + 4 * v8) & 0xFFFFE000;
      *(_DWORD *)(a2 + 2524 + v23) = 0;
      if (*(_DWORD *)(a3 + 4))
      {
        unint64_t v24 = 0;
        uint64_t v25 = v22;
        do
        {
          v25[154] &= 0xE000F800;
          uint64_t result = 3758160896;
          v25[234] &= 0xE000FC00;
          v25[314] &= 0xFFFFFC00;
          v25[400] = v25[400] & 0xF000F800 | 0x50005;
          ++v24;
          ++v25;
        }
        while (v24 < *(unsigned int *)(a3 + 4));
      }
      ++v8;
      v22 += 5;
    }
    while (v8 < *(unsigned int *)(a3 + 24));
  }
  return result;
}

void *sub_21948669C(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v5 = a2 + a3[2].u32[1];
  int32x2_t v6 = *(int32x2_t *)(v5 + 100);
  a3[29] = vadd_s32(a3[29], v6);
  uint64_t v7 = a3[30].u32[0];
  uint64_t v8 = a3[30].u32[1];
  if (v7 == v8)
  {
    uint64_t v9 = a3[31].u32[0];
    uint64_t v10 = a3[31].u32[1];
    if (v9 == v10) {
      goto LABEL_3;
    }
  }
  else
  {
    __int32 v12 = v6.i32[1];
    uint64_t result = memcpy((void *)(a2 + v7), (const void *)(a2 + v8), (a3[1].i32[0] * v6.i32[0]));
    v6.i32[1] = v12;
    uint64_t v9 = a3[31].u32[0];
    uint64_t v10 = a3[31].u32[1];
    if (v9 == v10)
    {
LABEL_3:
      if (!a3[32].i8[0]) {
        return result;
      }
      goto LABEL_4;
    }
  }
  uint64_t result = memcpy((void *)(a2 + v9), (const void *)(a2 + v10), (a3[1].i32[0] * v6.i32[1]));
  if (!a3[32].i8[0]) {
    return result;
  }
LABEL_4:
  *(_DWORD *)(v5 + 100) = a3[29].i32[0];
  *(_DWORD *)(v5 + 104) = a3[29].i32[1];
  return result;
}

void sub_21948676C(void *a1)
{
  sub_219486834(a1);

  JUMPOUT(0x21D48B5B0);
}

uint64_t sub_2194867A4()
{
  return 0x3FFFLL;
}

void sub_2194867AC()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26CAD6238;
  __cxa_throw(exception, (struct type_info *)&unk_26CAD6210, (void (*)(void *))std::exception::~exception);
}

void sub_2194867FC(std::exception *a1)
{
  std::exception::~exception(a1);

  JUMPOUT(0x21D48B5B0);
}

uint64_t sub_219486834(void *a1)
{
  *a1 = &unk_26CAD60F0;
  uint64_t v2 = a1[99];
  if (v2)
  {
    a1[100] = v2;
    MEMORY[0x21D48B5A0]();
  }
  int v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[16];
  if (v4)
  {
    a1[17] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  int32x2_t v6 = (void *)a1[10];
  if (v6)
  {
    a1[11] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[7];
  if (v7)
  {
    a1[8] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }

  return nullsub_14(a1);
}

void sub_2194868F8(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  int v4 = a1[2];
  if (0xFAFAFAFAFAFAFAFBLL * ((v4 - v5) >> 7) >= a2)
  {
    if (a2)
    {
      size_t v12 = 6528 * ((6528 * a2 - 6528) / 0x1980) + 6528;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    int32x2_t v6 = *a1;
    unint64_t v7 = 0xFAFAFAFAFAFAFAFBLL * ((v5 - *a1) >> 7);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xA0A0A0A0A0A0ALL) {
      sub_219486AE4();
    }
    unint64_t v9 = 0xFAFAFAFAFAFAFAFBLL * ((v4 - v6) >> 7);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x5050505050505) {
      unint64_t v10 = 0xA0A0A0A0A0A0ALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xA0A0A0A0A0A0ALL) {
        sub_219486AFC();
      }
      uint64_t v11 = (char *)operator new(6528 * v10, (std::align_val_t)0x40uLL);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[6528 * v7];
    unint64_t v14 = &v11[6528 * v10];
    size_t v15 = 6528 * ((6528 * a2 - 6528) / 0x1980) + 6528;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v5 -= 6528;
        v13 -= 6528;
        memcpy(v13, v5, 0x1980uLL);
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      JUMPOUT(0x21D48B5A0);
    }
  }
}

void sub_219486AE4()
{
}

void sub_219486AFC()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void sub_219486B30(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  bzero(a3, 0xF80uLL);
  *(_DWORD *)a3 = *(unsigned __int8 *)(a2 + 92);
  unsigned int v10 = *(_DWORD *)a2;
  int v11 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 >= 0x280u) {
    unsigned int v10 = 640;
  }
  *((_DWORD *)a3 + 1) = v10;
  *((_DWORD *)a3 + 2) = v11;
  *((_DWORD *)a3 + 3) = 8;
  sub_219486E2C(a1, a2, (unint64_t *)a3 + 8, a4, a5);
  int v12 = *((_DWORD *)a3 + 944);
  if (*(unsigned char *)(a2 + 92))
  {
    *((_DWORD *)a3 + 944) = v12 & 0xFFFFFFFE;
    *((_DWORD *)a3 + 960) = *((_DWORD *)a3 + 960) & 0xFFFFC000 | sub_2194952FC(*(_DWORD *)(a2 + 24)) & 0x3FFF;
    int v13 = *((_DWORD *)a3 + 944) & 0xFFFE00FF | ((sub_21949531C(*(_DWORD *)(a2 + 24)) & 0x1FF) << 8);
    *((_DWORD *)a3 + 944) = v13;
    *((_DWORD *)a3 + 944) = v13 & 0xFCFFFFFF | ((*(unsigned char *)(a2 + 132) & 3) << 24);
    *((_DWORD *)a3 + 945) = *((_DWORD *)a3 + 593);
    *((_DWORD *)a3 + 946) = *((_DWORD *)a3 + 594);
    *((_DWORD *)a3 + 951) = *((_DWORD *)a3 + 595);
    *((_DWORD *)a3 + 952) = *((_DWORD *)a3 + 596);
    *((_DWORD *)a3 + 947) = sub_219495340(*(unsigned __int8 *)(a2 + 132)) << 7;
    *((_DWORD *)a3 + 948) = 32 * sub_2194970A8(*(unsigned __int8 *)(a2 + 132));
    int v14 = *((_DWORD *)a3 + 945) & 0x7FFFF;
    *((_DWORD *)a3 + 949) = v14 + 384;
    *((_DWORD *)a3 + 950) = v14 + 512;
    *((_DWORD *)a3 + 953) = *((_DWORD *)a3 + 597);
    uint64_t v15 = *(unsigned int *)(a4 + 72);
    uint64_t v16 = *(void *)(a4 + 64) + v15;
    *((void *)a3 + 477) = v16;
    uint64_t v17 = v16 + 4 * (*((_DWORD *)a3 + 960) & 0x3FFF);
    LODWORD(v15) = 4 * (*((_DWORD *)a3 + 960) & 0x3FFF) + v15;
    *(_DWORD *)(a4 + 72) = v15;
    *((void *)a3 + 478) = v17;
    uint64_t v18 = 16 * (*((_DWORD *)a3 + 960) & 0x3FFF);
    LODWORD(v15) = 16 * (*((_DWORD *)a3 + 960) & 0x3FFF) + v15;
    *(_DWORD *)(a4 + 72) = v15;
    *((void *)a3 + 479) = v17 + v18;
    *(unsigned char *)(a5 + 388) = 1;
    *(_DWORD *)(a5 + 392) = v15;
    *(_DWORD *)(a4 + 72) += sub_2194C02DC(32 * (*((_DWORD *)a3 + 960) & 0x3FFFu) + 32, 0, 64, a5 + 368);
    *((_DWORD *)a3 + 960) &= 0xC0FFFFFF;
    *((_DWORD *)a3 + 961) = 1;
    float32x4_t v19 = *(float32x4_t *)(a2 + 96);
    float32x4_t v20 = *(float32x4_t *)(a2 + 112);
    v21.i64[0] = 0x300000003;
    v21.i64[1] = 0x300000003;
    *(int8x16_t *)(a3 + 3884) = vandq_s8((int8x16_t)vcvtq_n_u32_f32(vabsq_f32(v19), 0x12uLL), v21);
    *(uint32x4_t *)(a3 + 3848) = vcvtq_u32_f32(v19);
    *(uint32x4_t *)(a3 + 3864) = vcvtq_u32_f32(v20);
    *(int8x16_t *)(a3 + 3900) = vandq_s8((int8x16_t)vcvtq_n_u32_f32(vabsq_f32(v20), 0x12uLL), v21);
    v19.i32[0] = *(_DWORD *)(a2 + 128);
    *((_DWORD *)a3 + 970) = v19.f32[0];
    *((_DWORD *)a3 + 979) = vcvts_n_u32_f32(fabsf(v19.f32[0]), 0x12uLL) & 0x3FFFF;
    int v22 = *((_DWORD *)a3 + 982);
    uint64_t v23 = *((void *)a3 + 490);
    *((void *)a3 + 490) = v23 & 0xFFFFFFFFC000E000;
    unint64_t v24 = v23 & 0xFFFFE000C000E000 | ((unint64_t)(*(_DWORD *)a2 & 0x1FFF) << 32);
    *((void *)a3 + 490) = v24;
    unint64_t v25 = v24 & 0xC000FFFFFFFFFFFFLL | ((unint64_t)(*(_DWORD *)(a2 + 4) & 0x3FFF) << 48);
    *((void *)a3 + 490) = v25;
    unsigned int v26 = vcvtas_u32_f32((float)(*(float *)(a2 + 136) * 256.0) / 360.0) | v22 & 0xFFFFFF00;
    *((void *)a3 + 490) = v25;
    *((_DWORD *)a3 + 982) = v26;
    __int16 v27 = vcvtas_u32_f32(*(float *)(a2 + 140) * 512.0);
    *((void *)a3 + 490) = v25;
    *((_DWORD *)a3 + 982) = v26 & 0xFEC000FF | ((v27 & 0x3FFF) << 8);
    *((_DWORD *)a3 + 983) = (float)(*(float *)(a2 + 144)
                                                * (float)((float)(*(float *)(a2 + 144) * (float)*(unsigned int *)a2)
                                                        * (float)*(unsigned int *)a2));
    *((_DWORD *)a3 + 984) = *(_DWORD *)(a2 + 148);
  }
  else
  {
    *((_DWORD *)a3 + 944) = v12 | 1;
  }
}

void sub_219486E2C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  int v5 = *(unsigned __int16 *)(a2 + 50);
  if ((v5 & 0xFFFE) != 4) {
    sub_219504090();
  }
  if (sub_2194E223C(*(_DWORD *)a2, *(_DWORD *)(a2 + 4)) != v5) {
    sub_219504058();
  }
  uint64_t v11 = *(unsigned __int16 *)(a2 + 50);
  unint64_t v12 = 2 * v11;
  bzero(a3, 0xE80uLL);
  *a3 = 4128;
  unsigned int v13 = *(_DWORD *)a2;
  int v14 = *(_DWORD *)(a2 + 4);
  *(_OWORD *)((char *)a3 + 12) = 0u;
  if (v13 >= 0x280) {
    LOWORD(v13) = 640;
  }
  *((_WORD *)a3 + 4) = v13;
  *((_WORD *)a3 + 5) = v14;
  *(unint64_t *)((char *)a3 + 268) = 0;
  *(_OWORD *)((char *)a3 + 236) = 0uLL;
  *(_OWORD *)((char *)a3 + 252) = 0uLL;
  *(_OWORD *)((char *)a3 + 204) = 0uLL;
  *(_OWORD *)((char *)a3 + 220) = 0uLL;
  *(_OWORD *)((char *)a3 + 172) = 0uLL;
  *(_OWORD *)((char *)a3 + 188) = 0uLL;
  *(_OWORD *)((char *)a3 + 140) = 0uLL;
  *(_OWORD *)((char *)a3 + 156) = 0uLL;
  *(_OWORD *)((char *)a3 + 108) = 0uLL;
  *(_OWORD *)((char *)a3 + 124) = 0uLL;
  *(_OWORD *)((char *)a3 + 76) = 0uLL;
  *(_OWORD *)((char *)a3 + 92) = 0uLL;
  *(_OWORD *)((char *)a3 + 44) = 0uLL;
  *(_OWORD *)((char *)a3 + 60) = 0uLL;
  *(_OWORD *)((char *)a3 + 28) = 0uLL;
  if (*(_WORD *)(a2 + 50) == 5) {
    int v15 = 1023;
  }
  else {
    int v15 = 255;
  }
  if (*(unsigned char *)(a2 + 84)) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  *((_DWORD *)a3 + 69) = v16;
  if (*(_WORD *)(a2 + 50) == 5) {
    int v17 = 1023;
  }
  else {
    int v17 = 255;
  }
  if (*(unsigned char *)(a2 + 85)) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  *((_DWORD *)a3 + 70) = v18;
  char v19 = *(unsigned char *)(a2 + 86);
  if (*(_WORD *)(a2 + 50) == 5) {
    int v20 = 510;
  }
  else {
    int v20 = 126;
  }
  if (!*(unsigned char *)(a2 + 86)) {
    int v20 = 0;
  }
  *((_DWORD *)a3 + 71) = v20;
  char v21 = v19 | *(unsigned char *)(a2 + 87) | *(unsigned char *)(a2 + 88) | *(unsigned char *)(a2 + 89) | *(unsigned char *)(a2 + 153) | *(unsigned char *)(a2 + 92);
  if (*(_WORD *)(a2 + 50) == 5) {
    int v22 = 510;
  }
  else {
    int v22 = 126;
  }
  if (v21) {
    int v23 = v22;
  }
  else {
    int v23 = 0;
  }
  *((_DWORD *)a3 + 72) = v23;
  if (v11)
  {
    if (v12 <= 1) {
      unint64_t v24 = 1;
    }
    else {
      unint64_t v24 = 2 * v11;
    }
    if (v24 >= 8)
    {
      unsigned int v26 = (char *)a3 + 292;
      int64x2_t v27 = (int64x2_t)xmmword_21950BFB0;
      int64x2_t v28 = (int64x2_t)xmmword_21950BFC0;
      int64x2_t v29 = (int64x2_t)xmmword_21950BFD0;
      int64x2_t v30 = (int64x2_t)xmmword_21950BFE0;
      uint64_t v25 = v24 & 0x1FFF8;
      *(void *)&long long v31 = 0x3000300030003;
      *((void *)&v31 + 1) = 0x3000300030003;
      int8x16_t v32 = (int8x16_t)vdupq_n_s64(1uLL);
      v33.i64[0] = 0x20002000200020;
      v33.i64[1] = 0x20002000200020;
      v34.i64[0] = 0x10001000100010;
      v34.i64[1] = 0x10001000100010;
      int64x2_t v35 = vdupq_n_s64(8uLL);
      uint64_t v36 = v24 & 0x1FFF8;
      do
      {
        *(_OWORD *)unsigned int v26 = v31;
        *(int8x16_t *)(v26 + 124) = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v30, v32)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v29, v32))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v28, v32)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v27, v32)))), v34, v33);
        int64x2_t v28 = vaddq_s64(v28, v35);
        int64x2_t v29 = vaddq_s64(v29, v35);
        int64x2_t v30 = vaddq_s64(v30, v35);
        int64x2_t v27 = vaddq_s64(v27, v35);
        v26 += 16;
        v36 -= 8;
      }
      while (v36);
      if (v24 == v25) {
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v25 = 0;
    }
    do
    {
      uint64_t v37 = (char *)a3 + 2 * v25;
      *((_WORD *)v37 + 146) = 3;
      if (v25) {
        __int16 v38 = 32;
      }
      else {
        __int16 v38 = 16;
      }
      *((_WORD *)v37 + 208) = v38;
      ++v25;
    }
    while (v24 != v25);
  }
LABEL_41:
  *((_DWORD *)a3 + 78) = 0;
  uint64_t v39 = *(unsigned __int16 *)(a1 + 68);
  if (*(_WORD *)(a1 + 68))
  {
    uint64_t v40 = 0;
    unsigned int v41 = *(unsigned __int16 *)(a2 + 20);
    int32x4_t v42 = vdupq_n_s32(v41);
    char v43 = (_OWORD *)((char *)a3 + 316);
    do
    {
      if (v39 >= 8)
      {
        uint64_t v45 = (unsigned __int16)v39 & 0xFFF8;
        v46 = (int32x4_t *)v43;
        do
        {
          int32x4_t *v46 = v42;
          v46[1] = v42;
          v46 += 2;
          v45 -= 8;
        }
        while (v45);
        uint64_t v44 = (unsigned __int16)v39 & 0xFFF8;
        if (v44 == v39) {
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v44 = 0;
      }
      do
        *((_DWORD *)v43 + v44++) = v41;
      while (v39 != v44);
LABEL_43:
      ++v40;
      char v43 = (_OWORD *)((char *)v43 + 20);
    }
    while (v40 != v39);
  }
  *((_DWORD *)a3 + 454) = *(_DWORD *)(a2 + 24);
  *((_DWORD *)a3 + 455) = 2047;
  *((_DWORD *)a3 + 456) = sub_2194E2288(*(_DWORD *)a2, 0);
  int v47 = sub_2194E2288(*(_DWORD *)a2, 1u);
  *((_DWORD *)a3 + 457) = v47;
  *((_DWORD *)a3 + 458) = v47;
  int v48 = sub_2194E2288(*(_DWORD *)a2, 2u);
  *((_DWORD *)a3 + 459) = v48;
  *((_DWORD *)a3 + 460) = v48;
  int v49 = sub_2194E2288(*(_DWORD *)a2, 3u);
  *((_DWORD *)a3 + 461) = v49;
  if (*(_WORD *)(a2 + 50) == 5)
  {
    *((_DWORD *)a3 + 462) = v49;
    *((_DWORD *)a3 + 463) = sub_2194E2288(*(_DWORD *)a2, 4u);
  }
  *((_DWORD *)a3 + 480) = 1023;
  *(_OWORD *)((char *)a3 + 1924) = xmmword_21950BFF0;
  *((_DWORD *)a3 + 485) = 9437297;
  if (v11 >= 2)
  {
    std::locale v50 = a3 + 243;
    unint64_t v51 = 2;
    do
    {
      *(_OWORD *)std::locale v50 = xmmword_21950C000;
      *((_DWORD *)v50 + 4) = 9830514;
      v51 += 2;
      std::locale v50 = (void *)((char *)v50 + 20);
    }
    while (v51 < v12);
  }
  int v52 = *((_DWORD *)a3 + 512);
  unsigned int v53 = v52 & 0xFFFFFFFD;
  *((_DWORD *)a3 + 512) = v52 & 0xFFFFFFFD;
  if (*(unsigned char *)(a2 + 88)) {
    _ZF = *(unsigned char *)(a2 + 89) == 0;
  }
  else {
    _ZF = 1;
  }
  if (!_ZF) {
    sub_219504020();
  }
  unsigned int v55 = v52 & 0xFFFFFFF1;
  *((_DWORD *)a3 + 512) = v55;
  if (*(unsigned char *)(a2 + 89))
  {
    unsigned int v55 = v53 | 0xC;
  }
  else if (*(unsigned char *)(a2 + 88))
  {
    if (*(unsigned char *)(a2 + 91))
    {
      if (*(unsigned char *)(a2 + 91) == 1) {
        v55 |= 8u;
      }
    }
    else
    {
      v55 |= 4u;
    }
  }
  *((_DWORD *)a3 + 512) = v55 & 0xFFE0018F | 0x88000;
  if (*(_WORD *)(a2 + 50) == 5) {
    int v56 = 510;
  }
  else {
    int v56 = 126;
  }
  if (*(unsigned char *)(a2 + 87)) {
    int v57 = v56;
  }
  else {
    int v57 = 0;
  }
  *((_DWORD *)a3 + 513) = v57;
  unint64_t v58 = *(unsigned int *)(a2 + 28);
  v263[0] = v58;
  v263[1] = v58;
  v263[2] = v58;
  v263[3] = v58;
  v264[0] = v58;
  v264[1] = v58;
  v264[2] = v58;
  v264[3] = v58;
  if (*(unsigned char *)(a2 + 76)) {
    sub_2194E1EE8(v58, 2 * v11, v263);
  }
  unint64_t v59 = v12 - 1;
  if (v12 != 2)
  {
    unint64_t v60 = 2;
    if (v59 > 2) {
      unint64_t v60 = v12 - 1;
    }
    if (v60 < 9)
    {
      uint64_t v61 = 1;
LABEL_83:
      unint64_t v70 = v60 - v61;
      v71 = &v263[v61 - 1];
      v72 = (_DWORD *)a3 + v61 + 514;
      do
      {
        uint64_t v73 = *v71++;
        *v72++ = v73;
        --v70;
      }
      while (v70);
      goto LABEL_85;
    }
    unint64_t v62 = (v60 - 1) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v61 = v62 | 1;
    v63 = (int32x4_t *)v264;
    v64 = (int32x4_t *)((char *)a3 + 2060);
    unint64_t v65 = v62;
    do
    {
      int32x4_t v67 = v63[-2];
      int32x4_t v66 = v63[-1];
      int32x4_t v69 = *v63;
      int32x4_t v68 = v63[1];
      v63 += 4;
      int32x4_t *v64 = vuzp1q_s32(v67, v66);
      v64[1] = vuzp1q_s32(v69, v68);
      v64 += 2;
      v65 -= 8;
    }
    while (v65);
    if (v60 - 1 != v62) {
      goto LABEL_83;
    }
  }
LABEL_85:
  unsigned int v74 = *((_DWORD *)a3 + 523) & 0xFFFFFC00 | *(_DWORD *)a2 & 0x3FF;
  *((_DWORD *)a3 + 523) = v74;
  *((_DWORD *)a3 + 523) = v74 & 0xE000FFFF | ((*(_DWORD *)(a2 + 4) & 0x1FFF) << 16);
  *((_OWORD *)a3 + 131) = xmmword_21950C010;
  *((_OWORD *)a3 + 132) = xmmword_21950C020;
  *((_OWORD *)a3 + 133) = xmmword_21950C030;
  *((_OWORD *)a3 + 134) = xmmword_21950C040;
  a3[270] = 0x1D002E00230039;
  v75 = (const __int16 *)(a2 + 20);
  if (v59 > 7 && ((unint64_t)a3 + 2188 >= a2 + 22 || v75 >= (const __int16 *)a3 + 2 * v11 + 1120))
  {
    unint64_t v76 = v59 & 0xFFFFFFFFFFFFFFF8;
    int16x8_t v77 = vld1q_dup_s16(v75);
    v78 = (int16x8_t *)((char *)a3 + 2242);
    v79.i64[0] = 0x1000100010001;
    v79.i64[1] = 0x1000100010001;
    v80.i64[0] = -1;
    v80.i64[1] = -1;
    unint64_t v81 = v59 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      *(int16x8_t *)((char *)v78 - 54) = v79;
      *(int16x8_t *)((char *)v78 - 36) = v80;
      int16x8_t *v78 = v77;
      *(int16x8_t *)((char *)v78++ - 18) = v77;
      v81 -= 8;
    }
    while (v81);
  }
  else
  {
    unint64_t v76 = 0;
  }
  uint64_t v82 = v76 - v12 + 1;
  v83 = (__int16 *)a3 + v76 + 1121;
  do
  {
    *(v83 - 27) = 1;
    *(v83 - 18) = -1;
    __int16 *v83 = *v75;
    *(v83 - 9) = *v75;
    ++v83;
    _CF = __CFADD__(v82++, 1);
  }
  while (!_CF);
  *(_OWORD *)((char *)a3 + 2260) = xmmword_21950C050;
  *(unint64_t *)((char *)a3 + 2276) = 0;
  int v85 = *(unsigned __int16 *)(a2 + 50);
  if (v85 == 5) {
    int v86 = 15;
  }
  else {
    int v86 = 7;
  }
  *((_DWORD *)a3 + 571) = v86;
  if (v85 != 1)
  {
    unint64_t v87 = 0;
    v88 = (char *)a3 + 2290;
    do
    {
      *(_DWORD *)(v88 - 2) = 19267693;
      ++v87;
      v88 += 4;
    }
    while (v87 < (unint64_t)*(unsigned __int16 *)(a2 + 50) - 1);
  }
  if (v59 >= 8)
  {
    if ((unint64_t)a3 + 436 >= a2 + 48 || a2 + 43 >= (unint64_t)&a3[v11 + 54])
    {
      if (v59 >= 0x10)
      {
        unint64_t v89 = v59 & 0xFFFFFFFFFFFFFFF0;
        v90 = (const char *)(a2 + 43);
        uint8x16_t v91 = (uint8x16_t)vld1q_dup_s8(v90);
        uint16x8_t v92 = vmovl_high_u8(v91);
        int8x16_t v93 = (int8x16_t)vmovl_high_u16(v92);
        int8x16_t v94 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v92.i8);
        uint16x8_t v95 = vmovl_u8(*(uint8x8_t *)v91.i8);
        int8x16_t v96 = (int8x16_t)vmovl_high_u16(v95);
        _Q1 = vdupq_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)(a2 + 46), (int8x8_t)0x3F003F003F003FLL), 0);
        int8x16_t v98 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v95.i8);
        __asm { SHLL2           V6.4S, V1.8H, #0x10 }
        int8x16_t v102 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
        int8x16_t v103 = (int8x16_t)vdupq_n_s32(0xFFC0FFFE);
        int8x16_t v104 = vorrq_s8(_Q6, v93);
        int8x16_t v105 = vorrq_s8(_Q6, v96);
        int8x16_t v106 = vorrq_s8(v102, v98);
        int8x16_t v107 = vorrq_s8(v102, v94);
        unint64_t v108 = v59 & 0xFFFFFFFFFFFFFFF0;
        v109 = (int8x16_t *)((char *)a3 + 436);
        do
        {
          int8x16_t v110 = vorrq_s8(v104, vandq_s8(v109[3], v103));
          int8x16_t v111 = vorrq_s8(v105, vandq_s8(v109[1], v103));
          int8x16_t v112 = vorrq_s8(v107, vandq_s8(v109[2], v103));
          int8x16_t *v109 = vorrq_s8(v106, vandq_s8(*v109, v103));
          v109[1] = v111;
          v109[2] = v112;
          v109[3] = v110;
          v109 += 4;
          v108 -= 16;
        }
        while (v108);
        if ((v59 & 8) == 0) {
          goto LABEL_112;
        }
      }
      else
      {
        unint64_t v89 = 0;
      }
      unint64_t v113 = v89;
      unint64_t v89 = v59 & 0xFFFFFFFFFFFFFFF8;
      v114 = (const char *)(a2 + 43);
      uint8x8_t v115 = (uint8x8_t)vld1_dup_s8(v114);
      uint16x8_t v116 = vmovl_u8(v115);
      int8x16_t v117 = (int8x16_t)vmovl_high_u16(v116);
      int8x16_t v118 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v116.i8);
      v119.i64[0] = 0x3F003F003F003FLL;
      v119.i64[1] = 0x3F003F003F003FLL;
      _Q0 = vdupq_lane_s16((int16x4_t)*(_OWORD *)&vandq_s8(*(int8x16_t *)(a2 + 46), v119), 0);
      __asm { SHLL2           V3.4S, V0.8H, #0x10 }
      int8x16_t v122 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
      v123 = (int8x16_t *)((char *)a3 + 4 * v113 + 436);
      unint64_t v124 = v113 - (v59 & 0xFFFFFFFFFFFFFFF8);
      int8x16_t v125 = (int8x16_t)vdupq_n_s32(0xFFC0FFFE);
      int8x16_t v126 = vorrq_s8(_Q3, v117);
      int8x16_t v127 = vorrq_s8(v122, v118);
      do
      {
        int8x16_t v128 = vorrq_s8(v126, vandq_s8(v123[1], v125));
        int8x16_t *v123 = vorrq_s8(v127, vandq_s8(*v123, v125));
        v123[1] = v128;
        v123 += 2;
        v124 += 8;
      }
      while (v124);
    }
    else
    {
      unint64_t v89 = 0;
    }
  }
  else
  {
    unint64_t v89 = 0;
  }
  do
  {
LABEL_112:
    v129 = (char *)a3 + 4 * v89;
    unsigned int v130 = *((_DWORD *)v129 + 109) & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 43);
    *((_DWORD *)v129 + 109) = v130;
    *((_DWORD *)v129 + 109) = v130 & 0xFFC0FFFF | ((*(_WORD *)(a2 + 46) & 0x3F) << 16);
    ++v89;
  }
  while (v59 != v89);
  *((_DWORD *)a3 + 576) = a3[288] & 0xFFFFFFFE | ((*(unsigned __int8 *)(a2 + 92) | *(unsigned __int8 *)(a2 + 153)) != 0);
  if (*(unsigned __int8 *)(a2 + 92) | *(unsigned __int8 *)(a2 + 153))
  {
    int v131 = a3[288] & 0xFFFE00FF | ((sub_21949531C(*(_DWORD *)(a2 + 24)) & 0x1FF) << 8);
    *((_DWORD *)a3 + 576) = v131;
    *((_DWORD *)a3 + 576) = v131 & 0xF8FFFFFF | ((*(unsigned char *)(a2 + 132) & 3) << 24);
    *((_DWORD *)a3 + 581) = sub_219495388(*(_DWORD *)(a2 + 24));
    uint64_t v132 = *(unsigned int *)(a4 + 72);
    unint64_t v133 = *(void *)(a4 + 64) + v132;
    *(unint64_t *)((char *)a3 + 2308) = v133;
    *(unsigned char *)(a5 + 360) = 1;
    *(_DWORD *)(a5 + 364) = v132;
    unsigned int v134 = sub_2194970C8(*(_DWORD *)(a2 + 24), *(unsigned __int8 *)(a2 + 132));
    if (sub_2194C02DC(v134, 0, 64, a5 + 340) >= 0x4B001) {
      sub_219503FE8();
    }
    int v135 = *(_DWORD *)(a4 + 72) + 307200;
    *(unint64_t *)((char *)a3 + 2316) = v133 + 307200;
    *(_DWORD *)(a4 + 72) = v135 + (*((_DWORD *)a3 + 581) << 6);
  }
  *(int8x16_t *)(a3 + 179) = vandq_s8(*(int8x16_t *)(a3 + 179), (int8x16_t)xmmword_21950C060);
  *((_OWORD *)a3 + 111) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 111), (int8x16_t)vdupq_n_s32(0xE000F000)) | __PAIR128__(0x10001000100010, 0x10001000100010);
  a3[181] &= 0xFFFFFFF0FFFFFFF0;
  *((int8x16_t *)a3 + 112) = vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 112), (int8x16_t)xmmword_21950C070), (int8x16_t)xmmword_21950C080);
  v136 = (int8x16_t *)((char *)a3 + 1436);
  a3[226] = (unint64_t)vorr_s8(vand_s8((int8x8_t)a3[226], (int8x8_t)vdup_n_s32(0xFFFF8080)), (int8x8_t)vdup_n_s32(0x101u));
  int8x16_t v137 = (int8x16_t)vdupq_n_s32(0xF000F800);
  *((_OWORD *)a3 + 91) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 91), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 368) = a3[184] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1476) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1476), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 373) = *((_DWORD *)a3 + 373) & 0xF000F800 | 0x50005;
  *(_OWORD *)(a3 + 187) = *(_OWORD *)&vandq_s8(*(int8x16_t *)(a3 + 187), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 378) = a3[189] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1516) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1516), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 383) = *((_DWORD *)a3 + 383) & 0xF000F800 | 0x50005;
  *((_OWORD *)a3 + 96) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 96), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 388) = a3[194] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1556) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1556), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 393) = *((_DWORD *)a3 + 393) & 0xF000F800 | 0x50005;
  *(_OWORD *)(a3 + 197) = *(_OWORD *)&vandq_s8(*(int8x16_t *)(a3 + 197), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 398) = a3[199] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1596) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1596), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 403) = *((_DWORD *)a3 + 403) & 0xF000F800 | 0x50005;
  *((_OWORD *)a3 + 101) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 101), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 408) = a3[204] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1636) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1636), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 413) = *((_DWORD *)a3 + 413) & 0xF000F800 | 0x50005;
  *(_OWORD *)(a3 + 207) = *(_OWORD *)&vandq_s8(*(int8x16_t *)(a3 + 207), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 418) = a3[209] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1676) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1676), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 423) = *((_DWORD *)a3 + 423) & 0xF000F800 | 0x50005;
  *((_OWORD *)a3 + 106) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 106), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 428) = a3[214] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1716) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1716), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 433) = *((_DWORD *)a3 + 433) & 0xF000F800 | 0x50005;
  *(_OWORD *)(a3 + 217) = *(_OWORD *)&vandq_s8(*(int8x16_t *)(a3 + 217), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 438) = a3[219] & 0xF000F800 | 0x50005;
  int8x16_t v138 = *(int8x16_t *)((char *)a3 + 1756);
  unsigned long long v139 = *(_OWORD *)&vandq_s8(v138, v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *(_OWORD *)((char *)a3 + 1756) = v139;
  *((_DWORD *)a3 + 443) = *((_DWORD *)a3 + 443) & 0xF000F800 | 0x50005;
  if (*(_DWORD *)a2 <= 0x280u)
  {
    *a3 = *a3 & 0xFFFFFFE0FFFFFFFFLL | 0x100000000;
    int8x16_t v140 = (int8x16_t)vdupq_n_s32(0xC000E000);
    *((int8x16_t *)a3 + 116) = vandq_s8(*((int8x16_t *)a3 + 116), v140);
    *((int8x16_t *)a3 + 117) = vandq_s8(*((int8x16_t *)a3 + 117), v140);
    *((int8x16_t *)a3 + 118) = vandq_s8(*((int8x16_t *)a3 + 118), v140);
    *((int8x16_t *)a3 + 119) = vandq_s8(*((int8x16_t *)a3 + 119), v140);
    sub_2194882FC(a1, a2, (uint64_t)a3, 1);
    *((_DWORD *)a3 + 358) = a3[179] & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 42);
    if (*(unsigned char *)(a2 + 42))
    {
      bzero(v219, 0x824uLL);
      unsigned int v141 = *((_DWORD *)a3 + 118);
      v218[0] = 1;
      int v220 = v141 & 0x7FF;
      unsigned int v142 = *((_DWORD *)a3 + 198);
      int v231 = 5 * (HIWORD(v142) & 0x1FFF);
      int v143 = (a3[139] & 0x3FF) + 5 * (v142 & 0x3FF);
      unsigned int v144 = *((_DWORD *)a3 + 119);
      int v221 = HIWORD(v141) & 0x1FFF;
      int v222 = v144 & 0x7FF;
      int v145 = HIWORD(v144) & 0x1FFF;
      unsigned int v146 = *((_DWORD *)a3 + 199);
      int v233 = 5 * (HIWORD(v146) & 0x1FFF);
      int v232 = (*((_DWORD *)a3 + 279) & 0x3FF) + 5 * (v146 & 0x3FF);
      unsigned int v147 = *((_DWORD *)a3 + 120);
      int v223 = v145;
      int v224 = v147 & 0x7FF;
      int v148 = HIWORD(v147) & 0x1FFF;
      unsigned int v149 = *((_DWORD *)a3 + 200);
      int v235 = 5 * (HIWORD(v149) & 0x1FFF);
      int v234 = (a3[140] & 0x3FF) + 5 * (v149 & 0x3FF);
      unsigned int v150 = *((_DWORD *)a3 + 121);
      int v225 = v148;
      int v226 = v150 & 0x7FF;
      int v151 = HIWORD(v150) & 0x1FFF;
      unsigned int v152 = *((_DWORD *)a3 + 201);
      int v237 = 5 * (HIWORD(v152) & 0x1FFF);
      int v236 = (*((_DWORD *)a3 + 281) & 0x3FF) + 5 * (v152 & 0x3FF);
      unsigned int v153 = *((_DWORD *)a3 + 122);
      int v227 = v151;
      int v228 = v153 & 0x7FF;
      int v230 = v143;
      v229[0] = HIWORD(v153) & 0x1FFF;
      unsigned int v154 = *((_DWORD *)a3 + 202);
      v239[0] = 5 * (HIWORD(v154) & 0x1FFF);
      int v238 = (a3[141] & 0x3FF) + 5 * (v154 & 0x3FF);
      sub_2194E22C8(0x280u, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), 1, v218, v155, v156);
      unsigned int v157 = v242;
      unsigned int v158 = v243;
      v159.i64[0] = __PAIR64__(v254, v252);
      v160.i64[0] = __PAIR64__(v255, v253);
      v161.i64[0] = __PAIR64__(v239[153], v239[151]);
      v162.i64[0] = __PAIR64__(v239[154], v239[152]);
      unsigned int v163 = v244;
      unsigned int v164 = v245;
      unsigned int v165 = v246;
      unsigned int v166 = v247;
      v167.i32[0] = v248;
      v168.i32[0] = v249;
      v159.i64[1] = __PAIR64__(v258, v256);
      v169.i64[0] = 0xF0000000FLL;
      v169.i64[1] = 0xF0000000FLL;
      v160.i64[1] = __PAIR64__(v259, v257);
      v161.i32[2] = v239[155];
      v162.i32[2] = v239[156];
      *((int8x16_t *)a3 + 111) = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v160, 0x10uLL) & __PAIR128__(0x1FFFFFFF1FFFFFFFLL, 0x1FFFFFFF1FFFFFFFLL)), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 111), (int8x16_t)vdupq_n_s32(0xE000F000)), vandq_s8(v159, v169)));
      v170.i64[0] = 0xF0000000FLL;
      v170.i64[1] = 0xF0000000FLL;
      int8x16_t *v136 = vbslq_s8(v170, *v136, *(int8x16_t *)&v261[1]);
      v161.i32[3] = v239[157];
      v160.i64[0] = 0x700000007;
      v160.i64[1] = 0x700000007;
      v162.i32[3] = v239[158];
      *((int8x16_t *)a3 + 91) = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v162, 0x10uLL) & __PAIR128__(0xFFFFFFF0FFFFFFFLL, 0xFFFFFFF0FFFFFFFLL)), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 91), (int8x16_t)vdupq_n_s32(0xF000F800)), vandq_s8(v161, (int8x16_t)v160)));
      v167.i32[1] = v250;
      v168.i32[1] = v251;
      a3[226] = (unint64_t)vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v168, 8uLL), (int8x8_t)0x7F0000007F00), vorr_s8(vand_s8((int8x8_t)a3[226], (int8x8_t)vdup_n_s32(0xFFFF8080)), vand_s8(v167, (int8x8_t)0x7F0000007FLL)));
      v171.i64[0] = __PAIR64__(v157, v260);
      v162.i64[0] = __PAIR64__(v158, v261[0]);
      v171.i64[1] = __PAIR64__(v165, v163);
      v162.i64[1] = __PAIR64__(v166, v164);
      *((int8x16_t *)a3 + 112) = vorrq_s8(vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)v162, (uint32x4_t)xmmword_21950C0A0), (int8x16_t)xmmword_21950C0B0), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 112), (int8x16_t)xmmword_21950C070), vandq_s8(v171, (int8x16_t)xmmword_21950C090)));
      *((_DWORD *)a3 + 363) = *((_DWORD *)a3 + 363) & 0xFFFFFFF0 | v262 & 0xF;
      *((_DWORD *)a3 + 368) = ((v241 & 0xFFF) << 16) | a3[184] & 0xF000F800 | v240 & 0x7FF;
    }
    return;
  }
  sub_2194E22C8(0x280u, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(unsigned __int8 *)(a2 + 42), v218, *(double *)&v139, (uint32x4_t)v138);
  int v172 = v218[0] & 0x1F;
  unint64_t v173 = *a3 & 0xFFFFFFE0FFFFFFFFLL | ((unint64_t)(v218[0] & 0x1F) << 32);
  *a3 = v173;
  unint64_t v174 = HIDWORD(v173) & 0x1F;
  if (v172)
  {
    unint64_t v175 = 0;
    uint64_t v176 = 0;
    v177.i64[0] = 0x700000007;
    v177.i64[1] = 0x700000007;
    int8x16_t v178 = (int8x16_t)vdupq_n_s32(0xE000F800);
    v179 = a3;
    do
    {
      *(_DWORD *)((char *)a3 + v176 * 4 + 1856) = *(_DWORD *)((unsigned char *)a3 + v176 * 4 + 1856) & 0xFFFFE000 | v218[v176 + 1] & 0x1FFF;
      int v180 = *(int *)((char *)&v230 + v175);
      *((_DWORD *)v179 + 198) = ((((unsigned __int16)((unint64_t)(1717986919 * *(int *)((char *)&v231 + v175)) >> 33)
                                 + ((unint64_t)(1717986919 * *(int *)((char *)&v231 + v175)) >> 63)) & 0x1FFF) << 16) | v179[99] & 0xE000FC00 | (v180 / 5) & 0x3FF;
      *((_DWORD *)v179 + 278) = v179[139] & 0xFFFFFC00 | (v180 % 5) & 0x3FF;
      int v181 = *(int *)((char *)&v232 + v175);
      *((_DWORD *)v179 + 199) = ((((unsigned __int16)((unint64_t)(1717986919 * *(int *)((char *)&v233 + v175)) >> 33)
                                 + ((unint64_t)(1717986919 * *(int *)((char *)&v233 + v175)) >> 63)) & 0x1FFF) << 16) | *((_DWORD *)v179 + 199) & 0xE000FC00 | (v181 / 5) & 0x3FF;
      *((_DWORD *)v179 + 279) = *((_DWORD *)v179 + 279) & 0xFFFFFC00 | (v181 % 5) & 0x3FF;
      v182.i32[0] = *(int *)((char *)&v220 + v175);
      v183.i32[0] = *(int *)((char *)&v221 + v175);
      v182.i32[1] = *(int *)((char *)&v222 + v175);
      v183.i32[1] = *(int *)((char *)&v223 + v175);
      int v184 = *(int *)((char *)&v234 + v175);
      v182.i32[2] = *(int *)((char *)&v224 + v175);
      v183.i32[2] = *(int *)((char *)&v225 + v175);
      *((_DWORD *)v179 + 200) = ((((unsigned __int16)((unint64_t)(1717986919 * *(int *)((char *)&v235 + v175)) >> 33)
                                 + ((unint64_t)(1717986919 * *(int *)((char *)&v235 + v175)) >> 63)) & 0x1FFF) << 16) | v179[100] & 0xE000FC00 | (v184 / 5) & 0x3FF;
      *((_DWORD *)v179 + 280) = v179[140] & 0xFFFFFC00 | (v184 % 5) & 0x3FF;
      v182.i32[3] = *(int *)((char *)&v226 + v175);
      v183.i32[3] = *(int *)((char *)&v227 + v175);
      *(int8x16_t *)(v179 + 59) = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v183, 0x10uLL) & __PAIR128__(0x1FFFFFFF1FFFFFFFLL, 0x1FFFFFFF1FFFFFFFLL)), vorrq_s8(vandq_s8(*(int8x16_t *)(v179 + 59), v178), vandq_s8(v182, v177)));
      int v185 = *(int *)((char *)&v236 + v175);
      *((_DWORD *)v179 + 201) = ((((unsigned __int16)((unint64_t)(1717986919 * *(int *)((char *)&v237 + v175)) >> 33)
                                 + ((unint64_t)(1717986919 * *(int *)((char *)&v237 + v175)) >> 63)) & 0x1FFF) << 16) | *((_DWORD *)v179 + 201) & 0xE000FC00 | (v185 / 5) & 0x3FF;
      *((_DWORD *)v179 + 281) = *((_DWORD *)v179 + 281) & 0xFFFFFC00 | (v185 % 5) & 0x3FF;
      *((_DWORD *)v179 + 122) = ((v229[v175 / 4] & 0x1FFF) << 16) | v179[61] & 0xE000F800 | v229[v175 / 4 - 1] & 0x7FF;
      int v186 = v239[v175 / 4 - 1];
      *((_DWORD *)v179 + 202) = ((((unsigned __int16)((unint64_t)(1717986919 * (int)v239[v175 / 4]) >> 33)
                                 + ((unint64_t)(1717986919 * (int)v239[v175 / 4]) >> 63)) & 0x1FFF) << 16) | v179[101] & 0xE000FC00 | (v186 / 5) & 0x3FF;
      *((_DWORD *)v179 + 282) = v179[141] & 0xFFFFFC00 | (v186 % 5) & 0x3FF;
      ++v176;
      v175 += 40;
      v179 = (unint64_t *)((char *)v179 + 20);
    }
    while (40 * v174 != v175);
  }
  *((_DWORD *)a3 + 358) = a3[179] & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 42);
  if (*(unsigned char *)(a2 + 42))
  {
    unsigned int v187 = v242;
    unsigned int v188 = v243;
    v189.i64[0] = __PAIR64__(v254, v252);
    v190.i64[0] = __PAIR64__(v255, v253);
    unsigned int v191 = v244;
    unsigned int v192 = v245;
    unsigned int v193 = v246;
    unsigned int v194 = v247;
    v195.i32[0] = v248;
    v196.i32[0] = v249;
    v189.i64[1] = __PAIR64__(v258, v256);
    v197.i64[0] = 0xF0000000FLL;
    v197.i64[1] = 0xF0000000FLL;
    v190.i64[1] = __PAIR64__(v259, v257);
    *((int8x16_t *)a3 + 111) = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v190, 0x10uLL) & __PAIR128__(0x1FFFFFFF1FFFFFFFLL, 0x1FFFFFFF1FFFFFFFLL)), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 111), (int8x16_t)vdupq_n_s32(0xE000F000)), vandq_s8(v189, v197)));
    v198.i64[0] = 0xF0000000FLL;
    v198.i64[1] = 0xF0000000FLL;
    int8x16_t *v136 = vbslq_s8(v198, *v136, *(int8x16_t *)&v261[1]);
    v195.i32[1] = v250;
    v196.i32[1] = v251;
    a3[226] = (unint64_t)vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v196, 8uLL), (int8x8_t)0x7F0000007F00), vorr_s8(vand_s8((int8x8_t)a3[226], (int8x8_t)vdup_n_s32(0xFFFF8080)), vand_s8(v195, (int8x8_t)0x7F0000007FLL)));
    v189.i64[0] = __PAIR64__(v187, v260);
    v190.i64[0] = __PAIR64__(v188, v261[0]);
    v189.i64[1] = __PAIR64__(v193, v191);
    v190.i64[1] = __PAIR64__(v194, v192);
    *((int8x16_t *)a3 + 112) = vorrq_s8(vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)v190, (uint32x4_t)xmmword_21950C0A0), (int8x16_t)xmmword_21950C0B0), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 112), (int8x16_t)xmmword_21950C070), vandq_s8(v189, (int8x16_t)xmmword_21950C090)));
    *((_DWORD *)a3 + 363) = *((_DWORD *)a3 + 363) & 0xFFFFFFF0 | v262 & 0xF;
    if (v172)
    {
      v199 = &v241;
      v200 = (int8x16_t *)(a3 + 184);
      v201.i64[0] = 0x700000007;
      v201.i64[1] = 0x700000007;
      int8x16_t v202 = (int8x16_t)vdupq_n_s32(0xF000F800);
      uint64_t v203 = HIDWORD(v173) & 0x1F;
      do
      {
        v204.i32[0] = *(v199 - 9);
        v204.i32[1] = *(v199 - 7);
        v204.i32[2] = *(v199 - 5);
        v204.i32[3] = *(v199 - 3);
        int8x16_t v205 = vorrq_s8(vandq_s8(v200[-1], v202), vandq_s8(v204, v201));
        v204.i32[0] = *(v199 - 8);
        v204.i32[1] = *(v199 - 6);
        v204.i32[2] = *(v199 - 4);
        v204.i32[3] = *(v199 - 2);
        v200[-1] = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32((int32x4_t)v204, 0x10uLL) & __PAIR128__(0xFFFFFFF0FFFFFFFLL, 0xFFFFFFF0FFFFFFFLL)), v205);
        unsigned int v206 = v200->i32[0] & 0xF000F800 | *(v199 - 1) & 0x7FF;
        int v207 = *v199;
        v199 += 10;
        v200->i32[0] = ((v207 & 0xFFF) << 16) | v206;
        v200 = (int8x16_t *)((char *)v200 + 20);
        --v203;
      }
      while (v203);
    }
  }
  *((_DWORD *)a3 + 592) = a3[296] & 0xE0000000 | (2 * (a3[1] & 0x3FFF)) & 0x7FFF | ((*((_WORD *)a3 + 5) & 0x3FFF) << 15) | 1;
  *((_DWORD *)a3 + 593) = v172;
  if (v174)
  {
    if (v174 < 8)
    {
      unint64_t v208 = 0;
LABEL_132:
      unint64_t v216 = v208 - v174;
      v217 = (_DWORD *)a3 + v208 + 464;
      do
      {
        v217[131] = *v217 & 0x1FFF;
        ++v217;
        _CF = __CFADD__(v216++, 1);
      }
      while (!_CF);
      return;
    }
    uint64_t v209 = HIDWORD(v173) & 7;
    unint64_t v208 = v174 - v209;
    v210 = a3 + 232;
    v211.i64[0] = 0x1F0000001FLL;
    v211.i64[1] = 0x1F0000001FLL;
    unint64_t v212 = v174 - v209;
    do
    {
      v213 = (int8x16_t *)((char *)v210 + 524);
      int8x16_t v214 = *(int8x16_t *)v210;
      int8x16_t v215 = *((int8x16_t *)v210 + 1);
      v210 += 2;
      int8x16_t *v213 = vandq_s8(v214, v211);
      v213[1] = vandq_s8(v215, v211);
      v212 -= 8;
    }
    while (v212);
    if (v209) {
      goto LABEL_132;
    }
  }
}

uint64_t sub_2194882FC(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (*(_DWORD *)(result + 64) != 4) {
    sub_219504138();
  }
  uint64_t v4 = result;
  if (*(_WORD *)(result + 68) != 5) {
    sub_219504100();
  }
  if (a4 != 1) {
    sub_2195040C8();
  }
  if (*(_WORD *)(a2 + 50))
  {
    unint64_t v6 = 0;
    do
    {
      int v8 = sub_2194E2288(*(_DWORD *)a2, v6);
      int v9 = sub_2194E2288(*(_DWORD *)(a2 + 4), v6);
      int v10 = *(__int16 *)(a2 + 14);
      int v11 = v8;
      if (*(_WORD *)(a2 + 18)) {
        int v11 = sub_2194E2288(*(__int16 *)(a2 + 18), v6);
      }
      int v12 = *(__int16 *)(a2 + 12);
      int v13 = v9;
      if (*(_WORD *)(a2 + 16)) {
        int v13 = sub_2194E2288(*(__int16 *)(a2 + 16), v6);
      }
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      sub_21949412C(v4, v8, (int *)&v16 + 1, (signed int *)&v16, v10 >> v6, v11);
      uint64_t result = sub_21949412C(v4, v9, (int *)&v15 + 1, (signed int *)&v15, v12 >> v6, v13);
      uint64_t v7 = a3 + 4 * v6;
      *(_DWORD *)(v7 + 472) = ((WORD2(v15) & 0x1FFF) << 16) | WORD2(v16) & 0x7FF | *(_DWORD *)(v7 + 472) & 0xE000F800;
      *(_DWORD *)(v7 + 792) = ((v15 & 0x1FFF) << 16) | v16 & 0x3FF | *(_DWORD *)(v7 + 792) & 0xE000FC00;
      ++v6;
    }
    while (v6 < *(unsigned __int16 *)(a2 + 50));
  }
  return result;
}

void sub_219488494()
{
}

__n128 sub_2194884A8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26CAD6260;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_2194884FC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CAD6260;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_219488534(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*(void *)(a1 + 16), *(int *)(a1 + 24));
}

uint64_t sub_219488544(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFiP10__CVBufferyEJRS6_iEEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFiP10__CVBufferyEJRS6_iEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFiP10__CVBufferyEJRS6_iEEEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFiP10__CVBufferyEJRS6_iEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_2194885B4()
{
  return &unk_26CAD62D0;
}

uint64_t sub_2194885C0(uint64_t a1, int a2)
{
  uint64_t v4 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v5 = a1 + 16;
  uint64_t v6 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  uint64_t v7 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + *(void *)(v9 - 24)) = v8;
  *(void *)(a1 + 8) = 0;
  int v10 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v10, (void *)(a1 + 24));
  uint64_t v11 = MEMORY[0x263F8C328] + 24;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  uint64_t v12 = v7[5];
  uint64_t v13 = v7[4];
  *(void *)(a1 + 16) = v13;
  *(void *)(v5 + *(void *)(v13 - 24)) = v12;
  uint64_t v14 = v7[1];
  *(void *)a1 = v14;
  *(void *)(a1 + *(void *)(v14 - 24)) = v7[6];
  *(void *)a1 = v11;
  *(void *)(a1 + 128) = v4;
  *(void *)(a1 + 16) = v6;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = a2;
  return a1;
}

void sub_219488870(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x21D48B530](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2194888A4(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x21D48B530](a1 + 128);
  return a1;
}

void *sub_2194889DC(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x21D48B3A0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      int v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_219488B80(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x21D48B3B0](v13);
  return a1;
}

void sub_219488B18(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x21D48B3B0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x219488AF8);
}

void sub_219488B6C(_Unwind_Exception *a1)
{
}

uint64_t sub_219488B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        sub_21947DF80();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        uint64_t v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        int64_t v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        uint64_t v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (v22 >= 0) {
        uint64_t v16 = __b;
      }
      else {
        uint64_t v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_219488D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_219488D70(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      uint64_t v6 = &v5[4 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    uint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + a2;
    if (v10 >> 62) {
      sub_219486AE4();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        sub_219486AFC();
      }
      uint64_t v13 = operator new(4 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    size_t v15 = 4 * a2;
    uint64_t v16 = &v13[4 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 4;
      if (v18 < 0x2C) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      char v21 = &v13[4 * v9 - 16];
      int64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *char v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          int v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_219488F20(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_219486AE4();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_219486AFC();
      }
      uint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[24 * v7];
    uint64_t v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        long long v17 = *(_OWORD *)(v5 - 24);
        *((void *)v13 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        v5 -= 24;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_2194890D0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

uint64_t sub_219489120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5, char a6)
{
  uint64_t v151 = *MEMORY[0x263EF8340];
  uint64_t result = kdebug_trace();
  if (*(unsigned char *)(a3 + 89)) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = *(unsigned char *)(a3 + 88) == 0;
  }
  if (v11 && *(unsigned char *)(a3 + 92) == 0) {
    return result;
  }
  if (!*(unsigned char *)(a3 + 92))
  {
    if (*(unsigned char *)(a3 + 89))
    {
      sub_219489F98(a1, (unsigned int *)a3);
    }
    else if (*(unsigned char *)(a3 + 88))
    {
      if (*(unsigned char *)(a3 + 91))
      {
        if (*(unsigned char *)(a3 + 91) == 1) {
          sub_21948A11C(a1, (unsigned int *)a3);
        }
      }
      else
      {
        sub_21948A2A0(a1, (unsigned int *)a3);
      }
    }
    goto LABEL_173;
  }
  uint64_t v13 = (uint64_t **)(a4 + 8);
  sub_21948CFDC(a4, *(void **)(a4 + 8));
  *(void *)a4 = a4 + 8;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 8) = 0;
  if (!*(unsigned char *)(a3 + 89)) {
    sub_219504170();
  }
  if (*(unsigned char *)(a3 + 68) != 2) {
    sub_219504250();
  }
  if (!*(unsigned char *)(a3 + 76)) {
    sub_2195041A8();
  }
  int v125 = *(_DWORD *)(a1 + 184);
  int v14 = *(_DWORD *)(a1 + 160);
  unsigned int v15 = *(_DWORD *)(a1 + 176);
  unsigned int v16 = *(_DWORD *)(a1 + 152);
  if (v15 >= v16 && *(_DWORD *)(a3 + 24)) {
    sub_219504218();
  }
  if (v16 != *(_DWORD *)(a1 + 180) + v15) {
    sub_2195041E0();
  }
  uint64_t v119 = a2;
  __p = 0;
  int v143 = 0;
  unsigned int v144 = 0;
  unsigned int v17 = v14 + v125;
  unsigned int v121 = v17;
  uint64_t v122 = a3;
  char v120 = a6;
  if (v17)
  {
    size_t v18 = 8 * v17;
    uint64_t v19 = (int64x2_t *)operator new(v18);
    __p = v19;
    unsigned int v144 = &v19->i8[v18];
    bzero(v19, v18);
    int v143 = &v19->i8[v18];
    if (v18 - 8 < 0x18)
    {
      uint64_t v20 = 0;
      char v21 = (uint64_t *)v19;
      do
LABEL_24:
        *v21++ = v20++;
      while (v21 != (uint64_t *)&v19->i8[v18]);
      goto LABEL_25;
    }
    unint64_t v22 = ((v18 - 8) >> 3) + 1;
    uint64_t v20 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    char v21 = &v19->i64[v22 & 0x3FFFFFFFFFFFFFFCLL];
    int64x2_t v23 = (int64x2_t)xmmword_21950BFE0;
    long long v24 = v19 + 1;
    int64x2_t v25 = vdupq_n_s64(2uLL);
    int64x2_t v26 = vdupq_n_s64(4uLL);
    uint64_t v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v23;
      *long long v24 = vaddq_s64(v23, v25);
      int64x2_t v23 = vaddq_s64(v23, v26);
      v24 += 2;
      v27 -= 4;
    }
    while (v27);
    if (v22 != v20) {
      goto LABEL_24;
    }
  }
LABEL_25:
  if (*(unsigned char *)(a3 + 132) != 1)
  {
    sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCollUtils.cpp", 107, "config.fmDescSize == FeatureMatchingDescriptorSize::k256bits", (void (*)(void *))sub_2194FF9C0);
    abort();
  }
  uint64_t v124 = *(void *)(a1 + 328);
  unsigned int v28 = *(_DWORD *)(a1 + 324);
  unsigned int v118 = *(_DWORD *)(*(void *)(a1 + 296) + 180);
  int v135 = 0;
  v136 = 0;
  unsigned int v134 = &v135;
  if (v28 >= 0x180)
  {
    uint64_t v30 = 0;
    unint64_t v123 = v28 / 0x180uLL;
    do
    {
      long long v31 = (uint64_t *)(v124 + 1536 * v30);
      unsigned int v32 = sub_21948A424(v31);
      if (!v32) {
        break;
      }
      uint64_t v127 = v30;
      uint64_t v33 = 0;
      uint64_t v129 = v32;
      int v131 = (*v31 >> 63) & v125;
      do
      {
        int8x16_t v34 = (_DWORD *)v31 + v33;
        __int16 v35 = *((_WORD *)v34 + 129);
        uint64_t v36 = v34 + 96;
        uint64_t v37 = v135;
        unsigned int v38 = v34[96];
        if (v135)
        {
          uint64_t v39 = v135;
          do
          {
            unsigned int v40 = *((_DWORD *)v39 + 7);
            if (v38 >= v40)
            {
              if (v40 >= v38)
              {
                uint64_t v115 = 135;
                uint16x8_t v116 = "!duplicate_tid && \"duplicate tid is unexpected\"";
                goto LABEL_187;
              }
              ++v39;
            }
            uint64_t v39 = (void *)*v39;
          }
          while (v39);
          if (!v38)
          {
LABEL_188:
            uint64_t v115 = 137;
            uint16x8_t v116 = "desc_set->tid[i] && \"TID not assigned\"";
LABEL_187:
            sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCollUtils.cpp", v115, v116, (void (*)(void *))sub_2194FF9C0);
            abort();
          }
          while (1)
          {
            while (1)
            {
              int32x4_t v42 = (void **)v37;
              unsigned int v43 = *((_DWORD *)v37 + 7);
              if (v38 >= v43) {
                break;
              }
              uint64_t v37 = *v42;
              unsigned int v41 = v42;
              if (!*v42) {
                goto LABEL_47;
              }
            }
            if (v43 >= v38) {
              break;
            }
            uint64_t v37 = v42[1];
            if (!v37)
            {
              unsigned int v41 = v42 + 1;
              goto LABEL_47;
            }
          }
        }
        else
        {
          int32x4_t v42 = &v135;
          unsigned int v41 = &v135;
          if (!v38) {
            goto LABEL_188;
          }
LABEL_47:
          uint64_t v44 = operator new(0x20uLL);
          *((_DWORD *)v44 + 7) = v38;
          *uint64_t v44 = 0;
          v44[1] = 0;
          v44[2] = v42;
          *unsigned int v41 = v44;
          if (*v134)
          {
            unsigned int v134 = (void *)*v134;
            uint64_t v44 = (void *)*v41;
          }
          uint64_t v45 = v135;
          BOOL v11 = v44 == v135;
          *((unsigned char *)v44 + 24) = v44 == v135;
          if (!v11)
          {
            do
            {
              uint64_t v46 = v44[2];
              if (*(unsigned char *)(v46 + 24)) {
                break;
              }
              int v47 = *(void **)(v46 + 16);
              uint64_t v48 = *v47;
              if (*v47 == v46)
              {
                uint64_t v51 = v47[1];
                if (!v51 || (v52 = *(unsigned __int8 *)(v51 + 24), int v49 = (unsigned char *)(v51 + 24), v52))
                {
                  if (*(void **)v46 == v44)
                  {
                    *(unsigned char *)(v46 + 24) = 1;
                    *((unsigned char *)v47 + 24) = 0;
                    uint64_t v55 = *(void *)(v46 + 8);
                    *int v47 = v55;
                    if (v55) {
                      goto LABEL_64;
                    }
                  }
                  else
                  {
                    unsigned int v53 = *(uint64_t **)(v46 + 8);
                    uint64_t v54 = *v53;
                    *(void *)(v46 + 8) = *v53;
                    if (v54)
                    {
                      *(void *)(v54 + 16) = v46;
                      int v47 = *(void **)(v46 + 16);
                    }
                    v53[2] = (uint64_t)v47;
                    *(void *)(*(void *)(v46 + 16) + 8 * (**(void **)(v46 + 16) != v46)) = v53;
                    *unsigned int v53 = v46;
                    *(void *)(v46 + 16) = v53;
                    int v47 = (void *)v53[2];
                    uint64_t v46 = *v47;
                    *((unsigned char *)v53 + 24) = 1;
                    *((unsigned char *)v47 + 24) = 0;
                    uint64_t v55 = *(void *)(v46 + 8);
                    *int v47 = v55;
                    if (v55) {
LABEL_64:
                    }
                      *(void *)(v55 + 16) = v47;
                  }
                  *(void *)(v46 + 16) = v47[2];
                  *(void *)(v47[2] + 8 * (*(void *)v47[2] != (void)v47)) = v46;
                  *(void *)(v46 + 8) = v47;
LABEL_70:
                  v47[2] = v46;
                  break;
                }
              }
              else if (!v48 || (v50 = *(unsigned __int8 *)(v48 + 24), int v49 = (unsigned char *)(v48 + 24), v50))
              {
                if (*(void **)v46 == v44)
                {
                  uint64_t v77 = v44[1];
                  *(void *)uint64_t v46 = v77;
                  if (v77)
                  {
                    *(void *)(v77 + 16) = v46;
                    int v47 = *(void **)(v46 + 16);
                  }
                  v44[2] = v47;
                  *(void *)(*(void *)(v46 + 16) + 8 * (**(void **)(v46 + 16) != v46)) = v44;
                  v44[1] = v46;
                  *(void *)(v46 + 16) = v44;
                  int v47 = (void *)v44[2];
                  *((unsigned char *)v44 + 24) = 1;
                  *((unsigned char *)v47 + 24) = 0;
                  uint64_t v46 = v47[1];
                  int v56 = *(void **)v46;
                  v47[1] = *(void *)v46;
                  if (v56) {
LABEL_68:
                  }
                    v56[2] = v47;
                }
                else
                {
                  *(unsigned char *)(v46 + 24) = 1;
                  *((unsigned char *)v47 + 24) = 0;
                  uint64_t v46 = v47[1];
                  int v56 = *(void **)v46;
                  v47[1] = *(void *)v46;
                  if (v56) {
                    goto LABEL_68;
                  }
                }
                *(void *)(v46 + 16) = v47[2];
                *(void *)(v47[2] + 8 * (*(void *)v47[2] != (void)v47)) = v46;
                *(void *)uint64_t v46 = v47;
                goto LABEL_70;
              }
              *(unsigned char *)(v46 + 24) = 1;
              uint64_t v44 = v47;
              *((unsigned char *)v47 + 24) = v47 == v45;
              *int v49 = 1;
            }
            while (v47 != v45);
          }
          v136 = (void *)((char *)v136 + 1);
          unsigned int v38 = *v36;
        }
        int v57 = *v13;
        unint64_t v58 = (uint64_t **)(a4 + 8);
        unint64_t v59 = (uint64_t *)(a4 + 8);
        if (*v13)
        {
          while (1)
          {
            while (1)
            {
              unint64_t v59 = v57;
              signed int v60 = *((_DWORD *)v57 + 7);
              if ((int)v38 >= v60) {
                break;
              }
              int v57 = (uint64_t *)*v59;
              unint64_t v58 = (uint64_t **)v59;
              if (!*v59) {
                goto LABEL_79;
              }
            }
            if (v60 >= (int)v38) {
              break;
            }
            int v57 = (uint64_t *)v59[1];
            if (!v57)
            {
              unint64_t v58 = (uint64_t **)(v59 + 1);
              goto LABEL_79;
            }
          }
          uint64_t v61 = v59;
        }
        else
        {
LABEL_79:
          uint64_t v61 = operator new(0x28uLL);
          v61[7] = v38;
          v61[8] = 0;
          *(void *)uint64_t v61 = 0;
          *((void *)v61 + 1) = 0;
          *((void *)v61 + 2) = v59;
          *unint64_t v58 = (uint64_t *)v61;
          uint64_t v62 = **(void **)a4;
          v63 = (uint64_t *)v61;
          if (v62)
          {
            *(void *)a4 = v62;
            v63 = *v58;
          }
          v64 = *v13;
          BOOL v11 = v63 == *v13;
          *((unsigned char *)v63 + 24) = v11;
          if (!v11)
          {
            do
            {
              uint64_t v65 = v63[2];
              if (*(unsigned char *)(v65 + 24)) {
                break;
              }
              int32x4_t v66 = *(uint64_t **)(v65 + 16);
              uint64_t v67 = *v66;
              if (*v66 == v65)
              {
                uint64_t v70 = v66[1];
                if (!v70 || (v71 = *(unsigned __int8 *)(v70 + 24), int32x4_t v68 = (unsigned char *)(v70 + 24), v71))
                {
                  if (*(uint64_t **)v65 == v63)
                  {
                    *(unsigned char *)(v65 + 24) = 1;
                    *((unsigned char *)v66 + 24) = 0;
                    uint64_t v74 = *(void *)(v65 + 8);
                    *int32x4_t v66 = v74;
                    if (v74) {
                      goto LABEL_96;
                    }
                  }
                  else
                  {
                    v72 = *(uint64_t **)(v65 + 8);
                    uint64_t v73 = *v72;
                    *(void *)(v65 + 8) = *v72;
                    if (v73)
                    {
                      *(void *)(v73 + 16) = v65;
                      int32x4_t v66 = *(uint64_t **)(v65 + 16);
                    }
                    v72[2] = (uint64_t)v66;
                    *(void *)(*(void *)(v65 + 16) + 8 * (**(void **)(v65 + 16) != v65)) = v72;
                    uint64_t *v72 = v65;
                    *(void *)(v65 + 16) = v72;
                    int32x4_t v66 = (uint64_t *)v72[2];
                    uint64_t v65 = *v66;
                    *((unsigned char *)v72 + 24) = 1;
                    *((unsigned char *)v66 + 24) = 0;
                    uint64_t v74 = *(void *)(v65 + 8);
                    *int32x4_t v66 = v74;
                    if (v74) {
LABEL_96:
                    }
                      *(void *)(v74 + 16) = v66;
                  }
                  *(void *)(v65 + 16) = v66[2];
                  *(void *)(v66[2] + 8 * (*(void *)v66[2] != (void)v66)) = v65;
                  *(void *)(v65 + 8) = v66;
LABEL_103:
                  v66[2] = v65;
                  break;
                }
              }
              else if (!v67 || (v69 = *(unsigned __int8 *)(v67 + 24), int32x4_t v68 = (unsigned char *)(v67 + 24), v69))
              {
                if (*(uint64_t **)v65 == v63)
                {
                  uint64_t v78 = v63[1];
                  *(void *)uint64_t v65 = v78;
                  if (v78)
                  {
                    *(void *)(v78 + 16) = v65;
                    int32x4_t v66 = *(uint64_t **)(v65 + 16);
                  }
                  v63[2] = (uint64_t)v66;
                  *(void *)(*(void *)(v65 + 16) + 8 * (**(void **)(v65 + 16) != v65)) = v63;
                  v63[1] = v65;
                  *(void *)(v65 + 16) = v63;
                  int32x4_t v66 = (uint64_t *)v63[2];
                  *((unsigned char *)v63 + 24) = 1;
                  *((unsigned char *)v66 + 24) = 0;
                  uint64_t v65 = v66[1];
                  v75 = *(uint64_t **)v65;
                  v66[1] = *(void *)v65;
                  if (v75) {
LABEL_101:
                  }
                    v75[2] = (uint64_t)v66;
                }
                else
                {
                  *(unsigned char *)(v65 + 24) = 1;
                  *((unsigned char *)v66 + 24) = 0;
                  uint64_t v65 = v66[1];
                  v75 = *(uint64_t **)v65;
                  v66[1] = *(void *)v65;
                  if (v75) {
                    goto LABEL_101;
                  }
                }
                *(void *)(v65 + 16) = v66[2];
                *(void *)(v66[2] + 8 * (*(void *)v66[2] != (void)v66)) = v65;
                *(void *)uint64_t v65 = v66;
                goto LABEL_103;
              }
              *(unsigned char *)(v65 + 24) = 1;
              v63 = v66;
              *((unsigned char *)v66 + 24) = v66 == v64;
              *int32x4_t v68 = 1;
            }
            while (v66 != v64);
          }
          ++*(void *)(a4 + 16);
        }
        unsigned int v76 = (v35 & 0x1FFF) + v131;
        v61[8] = v76;
        sub_2194A699C(a1, *v36, v76);
        ++v33;
      }
      while (v33 != v129);
      uint64_t v30 = v127 + 1;
    }
    while (v127 + 1 != v123);
  }
  if ((v120 & 1) == 0)
  {
    uint64_t v132 = *(void *)(a1 + 344);
    unsigned int v79 = sub_2194952FC(*(_DWORD *)(a3 + 24));
    unsigned int v80 = v79;
    uint64_t v81 = *(unsigned int *)(v122 + 24);
    unsigned int v149 = 0;
    unsigned int v150 = 0;
    *(void *)buf = 0;
    if (v81)
    {
      size_t v82 = 4 * v81;
      v83 = (char *)operator new(4 * v81);
      v84 = &v83[4 * v81];
      *(void *)buf = v83;
      unsigned int v150 = v84;
      memset(v83, 255, 4 * v81);
      unsigned int v149 = v84;
      int v85 = (char *)operator new(4 * v81);
      int v86 = &v85[4 * v81];
      int v145 = v85;
      unsigned int v147 = v86;
      memset(v85, 255, v82);
      unsigned int v146 = v86;
      if (v80)
      {
LABEL_121:
        uint64_t v87 = 0;
        int v29 = 0;
        int8x16_t v128 = "curr_desc_dram_idx < num_descs && \"invalid current index\"";
        uint64_t v130 = v80;
        while (1)
        {
          uint64_t v88 = v132 + 32 * v87;
          if (*(void *)v88 == -1
            && *(void *)(v88 + 8) == -1
            && *(void *)(v88 + 16) == -1
            && *(void *)(v88 + 24) == -1)
          {
LABEL_158:
            int v85 = v145;
            if (v145) {
              goto LABEL_159;
            }
            goto LABEL_160;
          }
          int v89 = *(_DWORD *)(v88 + 20);
          v90 = *v13;
          uint8x16_t v91 = (uint64_t **)(a4 + 8);
          uint16x8_t v92 = (uint64_t **)(a4 + 8);
          if (*v13)
          {
            while (1)
            {
              while (1)
              {
                uint16x8_t v92 = (uint64_t **)v90;
                int v93 = *((_DWORD *)v90 + 7);
                if (v93 <= v89) {
                  break;
                }
                v90 = *v92;
                uint8x16_t v91 = v92;
                if (!*v92) {
                  goto LABEL_135;
                }
              }
              if (v93 >= v89) {
                break;
              }
              v90 = v92[1];
              if (!v90)
              {
                uint8x16_t v91 = v92 + 1;
                goto LABEL_135;
              }
            }
            int8x16_t v94 = v92;
            v97 = a5[1];
            if (!v97)
            {
LABEL_122:
              ++v29;
              goto LABEL_123;
            }
          }
          else
          {
LABEL_135:
            int8x16_t v94 = operator new(0x28uLL);
            v94[7] = v89;
            v94[8] = 0;
            *(void *)int8x16_t v94 = 0;
            *((void *)v94 + 1) = 0;
            *((void *)v94 + 2) = v92;
            *uint8x16_t v91 = (uint64_t *)v94;
            uint64_t v95 = **(void **)a4;
            int8x16_t v96 = (uint64_t *)v94;
            if (v95)
            {
              *(void *)a4 = v95;
              int8x16_t v96 = *v91;
            }
            sub_21948D030(*(uint64_t **)(a4 + 8), v96);
            ++*(void *)(a4 + 16);
            v97 = a5[1];
            if (!v97) {
              goto LABEL_122;
            }
          }
          unsigned int v98 = v94[8];
          v99 = v97;
          while (1)
          {
            int v100 = *((_DWORD *)v99 + 7);
            if (v100 <= v89) {
              break;
            }
LABEL_141:
            v99 = (uint64_t *)*v99;
            if (!v99) {
              goto LABEL_122;
            }
          }
          if (v100 < v89) {
            break;
          }
          do
          {
            while (1)
            {
              v101 = v97;
              int v102 = *((_DWORD *)v97 + 7);
              if (v102 > v89) {
                break;
              }
              if (v102 >= v89)
              {
                int8x16_t v104 = v101;
                if (v98 < v121) {
                  goto LABEL_156;
                }
LABEL_189:
                uint64_t v117 = 181;
LABEL_191:
                sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCollUtils.cpp", v117, v128, (void (*)(void *))sub_2194FF9C0);
                abort();
              }
              v97 = (uint64_t *)v101[1];
              if (!v97)
              {
                int8x16_t v103 = (uint64_t **)(v101 + 1);
                goto LABEL_151;
              }
            }
            v97 = (uint64_t *)*v101;
          }
          while (*v101);
          int8x16_t v103 = (uint64_t **)v101;
LABEL_151:
          int8x16_t v104 = operator new(0x28uLL);
          v104[7] = v89;
          v104[8] = 0;
          *(void *)int8x16_t v104 = 0;
          *((void *)v104 + 1) = 0;
          *((void *)v104 + 2) = v101;
          *int8x16_t v103 = (uint64_t *)v104;
          int8x16_t v105 = (uint64_t *)**a5;
          int8x16_t v106 = (uint64_t *)v104;
          if (v105)
          {
            *a5 = v105;
            int8x16_t v106 = *v103;
          }
          sub_21948D030(a5[1], v106);
          a5[2] = (uint64_t *)((char *)a5[2] + 1);
          if (v98 >= v121) {
            goto LABEL_189;
          }
LABEL_156:
          unsigned int v107 = v104[8];
          if (v107 >= *(_DWORD *)(v122 + 24))
          {
            uint64_t v117 = 183;
            int8x16_t v128 = "prev_desc_dram_idx < config.maxNumberOfKeypoints && \"invalid prev index\"";
            goto LABEL_191;
          }
          sub_219492E0C((uint64_t *)buf, (uint64_t *)&v145, v98, v104[8], *(_DWORD *)(v88 + 20));
          sub_2194A6958(a1, v98, v107);
LABEL_123:
          if (++v87 == v130) {
            goto LABEL_158;
          }
        }
        ++v99;
        goto LABEL_141;
      }
    }
    else
    {
      int v85 = 0;
      int v145 = 0;
      unsigned int v146 = 0;
      unsigned int v147 = 0;
      if (v79) {
        goto LABEL_121;
      }
    }
    int v29 = 0;
    if (v85)
    {
LABEL_159:
      unsigned int v146 = v85;
      operator delete(v85);
    }
LABEL_160:
    if (*(void *)buf)
    {
      unsigned int v149 = *(char **)buf;
      operator delete(*(void **)buf);
    }
    goto LABEL_162;
  }
  int v29 = 0;
LABEL_162:
  a2 = v119;
  a3 = v122;
  sub_21948A724(a1);
  sub_21948A7F8(a1, &__p);
  unint64_t v108 = *a5;
  *a5 = *(uint64_t **)a4;
  *(void *)a4 = v108;
  v109 = a5[1];
  int8x16_t v110 = a5[2];
  *(_OWORD *)(a5 + 1) = *(_OWORD *)(a4 + 8);
  *(void *)(a4 + 8) = v109;
  *(void *)(a4 + 16) = v110;
  if (a5[2]) {
    int8x16_t v111 = (uint64_t **)(a5[1] + 2);
  }
  else {
    int8x16_t v111 = a5;
  }
  *int8x16_t v111 = (uint64_t *)(a5 + 1);
  int8x16_t v112 = (void *)(*(void *)(a4 + 8) + 16);
  if (!v110) {
    int8x16_t v112 = (void *)a4;
  }
  *int8x16_t v112 = v13;
  (*(void (**)(uint64_t, void))(*(void *)v119 + 136))(v119, v118);
  if (*(_DWORD *)(a1 + 372) != *(_DWORD *)(*(void *)(a1 + 400) + 4))
  {
    sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCollUtils.cpp", 203, "hw_data_handler.GetNumTids() == hw_data_handler.GetNumKeypoints() && \"Number of TIDs should match the number of KPs\"", (void (*)(void *))sub_2194FF9C0);
    abort();
  }
  if (v29 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v29;
    _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "[AppleCVHWA] skipped %u matches potentially due to frame drop - matches correspond to new untracked features in dropped frame", buf, 8u);
  }
  sub_21948CFDC((uint64_t)&v134, v135);
  if (__p)
  {
    int v143 = (__int8 *)__p;
    operator delete(__p);
  }
LABEL_173:
  if (*(unsigned char *)(a3 + 76))
  {
    if (*(unsigned char *)(a3 + 90))
    {
      uint64_t v113 = *(unsigned __int16 *)(a3 + 50);
      v114 = (void *)*(unsigned __int16 *)(a3 + 20);
      unsigned int v134 = v114;
      int v135 = v114;
      v136 = v114;
      int8x16_t v137 = v114;
      int8x16_t v138 = v114;
      unsigned long long v139 = v114;
      int8x16_t v140 = v114;
      unsigned int v141 = v114;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 96))(&__p, a2);
      sub_2194E2040((uint64_t)&__p, *(void *)(a1 + 296) + 240, 2 * v113, v114, (uint64_t)&v134, *(float *)(a3 + 80));
      (*(void (**)(uint64_t, void **))(*(void *)a2 + 112))(a2, &v134);
    }
  }
  return kdebug_trace();
}

void sub_219489EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  __int16 v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(void *)(v33 - 120) = v35;
    operator delete(v35);
  }
  sub_21948CFDC((uint64_t)&a24, a25);
  if (!__p) {
    _Unwind_Resume(a1);
  }
  a33 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_219489F98(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 176);
  unsigned int v3 = *(_DWORD *)(a1 + 152);
  if (v2 >= v3 && a2[6] != 0) {
    sub_2195042C0();
  }
  if (v3 != *(_DWORD *)(a1 + 180) + v2) {
    sub_219504288();
  }
  __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int v7 = *(_DWORD *)(a1 + 184);
  int v8 = *(_DWORD *)(a1 + 160);
  if (v8 + v7)
  {
    sub_21948B1D8((uint64_t)&__p, (v8 + v7));
    uint64_t v9 = v20;
    if (__p != v20)
    {
      unint64_t v10 = v20 - (unsigned char *)__p - 8;
      if (v10 < 0x18)
      {
        uint64_t v11 = 0;
        size_t v12 = __p;
        do
LABEL_14:
          *v12++ = v11++;
        while (v12 != v9);
        goto LABEL_15;
      }
      uint64_t v13 = (v10 >> 3) + 1;
      uint64_t v11 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      size_t v12 = (char *)__p + 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
      int64x2_t v14 = (int64x2_t)xmmword_21950BFE0;
      unsigned int v15 = (int64x2_t *)((char *)__p + 16);
      int64x2_t v16 = vdupq_n_s64(2uLL);
      int64x2_t v17 = vdupq_n_s64(4uLL);
      uint64_t v18 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v15[-1] = v14;
        *unsigned int v15 = vaddq_s64(v14, v16);
        int64x2_t v14 = vaddq_s64(v14, v17);
        v15 += 2;
        v18 -= 4;
      }
      while (v18);
      if (v13 != v11) {
        goto LABEL_14;
      }
    }
  }
LABEL_15:
  sub_21948A724(a1);
  if (*((unsigned char *)a2 + 77)) {
    sub_21948AAFC(*(void *)(a1 + 288), *(unsigned int *)(a1 + 284), *(void *)(a1 + 168), *(unsigned int *)(a1 + 160), *((unsigned __int16 *)a2 + 16), *((unsigned __int16 *)a2 + 17), *((unsigned __int16 *)a2 + 18), a2[6], *a2, a2[1], (char **)&__p);
  }
  sub_21948A7F8(a1, &__p);
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_21948A0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21948A11C(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 176);
  unsigned int v3 = *(_DWORD *)(a1 + 152);
  if (v2 >= v3 && a2[6] != 0) {
    sub_2195042C0();
  }
  if (v3 != *(_DWORD *)(a1 + 180) + v2) {
    sub_219504288();
  }
  __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int v7 = *(_DWORD *)(a1 + 184);
  int v8 = *(_DWORD *)(a1 + 160);
  if (v8 + v7)
  {
    sub_21948B1D8((uint64_t)&__p, (v8 + v7));
    uint64_t v9 = v20;
    if (__p != v20)
    {
      unint64_t v10 = v20 - (unsigned char *)__p - 8;
      if (v10 < 0x18)
      {
        uint64_t v11 = 0;
        size_t v12 = __p;
        do
LABEL_14:
          *v12++ = v11++;
        while (v12 != v9);
        goto LABEL_15;
      }
      uint64_t v13 = (v10 >> 3) + 1;
      uint64_t v11 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      size_t v12 = (char *)__p + 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
      int64x2_t v14 = (int64x2_t)xmmword_21950BFE0;
      unsigned int v15 = (int64x2_t *)((char *)__p + 16);
      int64x2_t v16 = vdupq_n_s64(2uLL);
      int64x2_t v17 = vdupq_n_s64(4uLL);
      uint64_t v18 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v15[-1] = v14;
        *unsigned int v15 = vaddq_s64(v14, v16);
        int64x2_t v14 = vaddq_s64(v14, v17);
        v15 += 2;
        v18 -= 4;
      }
      while (v18);
      if (v13 != v11) {
        goto LABEL_14;
      }
    }
  }
LABEL_15:
  sub_21948BAE0(a1);
  if (*((unsigned char *)a2 + 77)) {
    sub_21948BBC4(*(void *)(a1 + 288), *(unsigned int *)(a1 + 284), *(void *)(a1 + 168), *(unsigned int *)(a1 + 160), *((unsigned __int16 *)a2 + 16), *((unsigned __int16 *)a2 + 17), *((unsigned __int16 *)a2 + 18), a2[6], *a2, a2[1], (char **)&__p);
  }
  sub_21948C2A0(a1, (unint64_t **)&__p);
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_21948A280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21948A2A0(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 176);
  unsigned int v3 = *(_DWORD *)(a1 + 152);
  if (v2 >= v3 && a2[6] != 0) {
    sub_2195042C0();
  }
  if (v3 != *(_DWORD *)(a1 + 180) + v2) {
    sub_219504288();
  }
  __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int v7 = *(_DWORD *)(a1 + 184);
  int v8 = *(_DWORD *)(a1 + 160);
  if (v8 + v7)
  {
    sub_21948B1D8((uint64_t)&__p, (v8 + v7));
    uint64_t v9 = v20;
    if (__p != v20)
    {
      unint64_t v10 = v20 - (unsigned char *)__p - 8;
      if (v10 < 0x18)
      {
        uint64_t v11 = 0;
        size_t v12 = __p;
        do
LABEL_14:
          *v12++ = v11++;
        while (v12 != v9);
        goto LABEL_15;
      }
      uint64_t v13 = (v10 >> 3) + 1;
      uint64_t v11 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      size_t v12 = (char *)__p + 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
      int64x2_t v14 = (int64x2_t)xmmword_21950BFE0;
      unsigned int v15 = (int64x2_t *)((char *)__p + 16);
      int64x2_t v16 = vdupq_n_s64(2uLL);
      int64x2_t v17 = vdupq_n_s64(4uLL);
      uint64_t v18 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v15[-1] = v14;
        *unsigned int v15 = vaddq_s64(v14, v16);
        int64x2_t v14 = vaddq_s64(v14, v17);
        v15 += 2;
        v18 -= 4;
      }
      while (v18);
      if (v13 != v11) {
        goto LABEL_14;
      }
    }
  }
LABEL_15:
  sub_21948C55C(a1);
  if (*((unsigned char *)a2 + 77)) {
    sub_21948C644(*(void *)(a1 + 288), *(unsigned int *)(a1 + 284), *(void *)(a1 + 168), *(unsigned int *)(a1 + 160), *((unsigned __int16 *)a2 + 16), *((unsigned __int16 *)a2 + 17), *((unsigned __int16 *)a2 + 18), a2[6], *a2, a2[1], (char **)&__p);
  }
  sub_21948CD20(a1, (unint64_t **)&__p);
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_21948A404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21948A424(_DWORD *a1)
{
  if ((~*a1 & 0xFFFC0000) == 0) {
    return 0;
  }
  if ((~a1[2] & 0xFFFC0000) == 0) {
    return 1;
  }
  if ((~a1[4] & 0xFFFC0000) == 0) {
    return 2;
  }
  if ((~a1[6] & 0xFFFC0000) == 0) {
    return 3;
  }
  if ((~a1[8] & 0xFFFC0000) == 0) {
    return 4;
  }
  if ((~a1[10] & 0xFFFC0000) == 0) {
    return 5;
  }
  if ((~a1[12] & 0xFFFC0000) == 0) {
    return 6;
  }
  if ((~a1[14] & 0xFFFC0000) == 0) {
    return 7;
  }
  if ((~a1[16] & 0xFFFC0000) == 0) {
    return 8;
  }
  if ((~a1[18] & 0xFFFC0000) == 0) {
    return 9;
  }
  if ((~a1[20] & 0xFFFC0000) == 0) {
    return 10;
  }
  if ((~a1[22] & 0xFFFC0000) == 0) {
    return 11;
  }
  if ((~a1[24] & 0xFFFC0000) == 0) {
    return 12;
  }
  if ((~a1[26] & 0xFFFC0000) == 0) {
    return 13;
  }
  if ((~a1[28] & 0xFFFC0000) == 0) {
    return 14;
  }
  if ((~a1[30] & 0xFFFC0000) == 0) {
    return 15;
  }
  if ((~a1[32] & 0xFFFC0000) == 0) {
    return 16;
  }
  if ((~a1[34] & 0xFFFC0000) == 0) {
    return 17;
  }
  if ((~a1[36] & 0xFFFC0000) == 0) {
    return 18;
  }
  if ((~a1[38] & 0xFFFC0000) == 0) {
    return 19;
  }
  if ((~a1[40] & 0xFFFC0000) == 0) {
    return 20;
  }
  if ((~a1[42] & 0xFFFC0000) == 0) {
    return 21;
  }
  if ((~a1[44] & 0xFFFC0000) == 0) {
    return 22;
  }
  if ((~a1[46] & 0xFFFC0000) == 0) {
    return 23;
  }
  if ((~a1[48] & 0xFFFC0000) == 0) {
    return 24;
  }
  if ((~a1[50] & 0xFFFC0000) == 0) {
    return 25;
  }
  if ((~a1[52] & 0xFFFC0000) == 0) {
    return 26;
  }
  if ((~a1[54] & 0xFFFC0000) == 0) {
    return 27;
  }
  if ((~a1[56] & 0xFFFC0000) == 0) {
    return 28;
  }
  if ((~a1[58] & 0xFFFC0000) == 0) {
    return 29;
  }
  if ((~a1[60] & 0xFFFC0000) == 0) {
    return 30;
  }
  if ((~a1[62] & 0xFFFC0000) != 0) {
    return 32;
  }
  return 31;
}

void *sub_21948A724(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 20) != 2) {
    sub_219504330();
  }
  if (!*(unsigned char *)(a1 + 385) && !*(unsigned char *)(a1 + 386)) {
    sub_2195042F8();
  }
  uint64_t result = (void *)sub_2194A3FE8(a1);
  uint64_t v3 = *(void *)(a1 + 192);
  if (result)
  {
    *(void *)(a1 + 288) = v3;
    *(_DWORD *)(a1 + 280) = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 284) = *(_DWORD *)(a1 + 184);
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    *(void *)(a1 + 176) = 0;
  }
  else
  {
    uint64_t v4 = *(const void **)(a1 + 168);
    unsigned int v5 = *(_DWORD *)(a1 + 184);
    unsigned int v6 = *(_DWORD *)(a1 + 160);
    *(void *)(a1 + 288) = v3;
    *(_DWORD *)(a1 + 280) = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 284) = v6 + v5;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    if (v6)
    {
      return memcpy((void *)(v3 + 76 * v5), v4, 76 * v6);
    }
  }
  return result;
}

void sub_21948A7F8(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 20) != 2) {
    sub_2195043A0();
  }
  unint64_t v4 = (*(_DWORD *)(a1 + 160) + *(_DWORD *)(a1 + 284));
  uint64_t v5 = a2[1];
  uint64_t v6 = v5 - *a2;
  unint64_t v7 = v6 >> 3;
  if (v6 >> 3 > v4) {
    sub_219504368();
  }
  uint64_t v34 = *(void *)(a1 + 288);
  uint64_t v8 = *(void *)(a1 + 168);
  uint64_t v9 = *(_OWORD **)(a1 + 144);
  if (v5 == *a2)
  {
    *(_DWORD *)(*(void *)(a1 + 400) + 4) = (unint64_t)v6 >> 3;
  }
  else
  {
    if ((unint64_t)v6 >= 0x5555555555555551) {
      sub_219486AE4();
    }
    long long v31 = *(void **)(a1 + 128);
    unint64_t v32 = v5 - *a2;
    unint64_t v10 = (char *)operator new(24 * v7);
    unint64_t v11 = (v4 - 1);
    unint64_t __n = 24 * ((24 * v7 - 24) / 0x18) + 24;
    bzero(v10, __n);
    uint64_t v12 = 0;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    __src = v10;
    uint64_t v13 = (float *)(v10 + 12);
    float32x2_t v14 = (float32x2_t)vdup_n_s32(0x3C800000u);
    do
    {
      unint64_t v18 = *(void *)(*a2 + 8 * v12);
      if (v18 > v11)
      {
        sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwIspDataHandler.h", 389, "idx[i] <= max_valid_idx", (void (*)(void *))sub_2194FF9C0);
        abort();
      }
      unint64_t v19 = *(unsigned int *)(a1 + 284);
      uint64_t v20 = (long long *)(v34 + 76 * v18);
      BOOL v21 = v18 >= v19;
      unint64_t v22 = (long long *)(v8 + 76 * (v18 - v19));
      if (v21) {
        int64x2_t v23 = v22;
      }
      else {
        int64x2_t v23 = v20;
      }
      unint64_t v24 = *((void *)v23 + 8);
      v25.i64[0] = v24;
      v25.i64[1] = HIDWORD(v24);
      *(float32x2_t *)(v13 - 3) = vmul_f32(vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8(v25, (int8x16_t)xmmword_21950C240))), v14);
      float v26 = pow(1.41421356, (float)((float)(v24 >> 23) * 0.0625));
      *uint64_t v13 = v26;
      __int16 v27 = *((_DWORD *)v23 + 18);
      uint64_t v28 = *((void *)v23 + 8);
      *((unsigned char *)v13 + 4) = v28 < 0;
      float v29 = (double)((unint64_t)v28 >> 52) * 3.14159265 * 0.0078125;
      *(v13 - 1) = v29;
      v13[2] = (float)(v27 & 0x7FFF);
      if (*(unsigned char *)(a1 + 388))
      {
        sub_2194A69DC((unsigned __int8 *)v23, (uint64_t)v9);
      }
      else
      {
        long long v15 = *v23;
        long long v16 = v23[1];
        long long v17 = v23[3];
        v9[2] = v23[2];
        v9[3] = v17;
        *uint64_t v9 = v15;
        v9[1] = v16;
      }
      ++v12;
      v9 += 4;
      v13 += 6;
    }
    while (v7 != v12);
    memcpy(v31, __src, __n);
    *(_DWORD *)(*(void *)(a1 + 400) + 4) = v32 >> 3;
    operator delete(__src);
  }
}

void sub_21948AAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21948AAFC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unint64_t a9, unint64_t a10, char **a11)
{
  if (a5 != 1 || a6 != 1) {
    sub_219504448();
  }
  if (a7 <= 0) {
    sub_219504410();
  }
  unint64_t v11 = a2;
  uint64_t v12 = a11;
  uint64_t v13 = a4 + a2;
  if (a4 + a2 != (v12[1] - *v12) >> 3) {
    sub_2195043D8();
  }
  uint64_t v93 = a7;
  sub_21948B388(&__p, a7);
  if (v13)
  {
    uint64_t v15 = v13;
    uint64_t v16 = 0;
    unint64_t v89 = v11;
    uint64_t v90 = a3;
    do
    {
      while (1)
      {
        unint64_t v17 = *(void *)&(*v12)[8 * v16];
        uint64_t v18 = a1;
        if (v17 < v11)
        {
          unint64_t v19 = 0;
        }
        else
        {
          uint64_t v18 = a3;
          unint64_t v19 = v11;
        }
        uint64_t v20 = v18 + 76 * (v17 - v19);
        unint64_t v21 = *(void *)(v20 + 64);
        if (vcvtms_s32_f32((float)((float)(HIDWORD(v21) & 0x7FFFF) / (float)a10) * 0.015625)
           + vcvtms_s32_f32((float)((float)(v21 & 0x3FFFF) / (float)a9) * 0.015625))
        {
          sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/include/VIO/Hardware/KeyPointAndDescriptorGeneratorUtils.h", 97, "bin_index == 0 && \"bin index should always be 0\"", (void (*)(void *))sub_2194FF9C0);
          abort();
        }
        int v22 = *(_DWORD *)(v20 + 72);
        float v23 = (float)((float)(v21 >> 23) * 0.0625) * 0.25;
        if (v23 > (float)(a7 - 1)) {
          float v23 = (float)(a7 - 1);
        }
        unint64_t v24 = (uint64_t *)((char *)__p + 24 * (int)vcvtms_s32_f32(v23));
        float v25 = (float)(v22 & 0x7FFF);
        float v26 = v24 + 1;
        __int16 v27 = (char *)v24[1];
        unint64_t v28 = v24[2];
        if ((unint64_t)v27 >= v28) {
          break;
        }
        *(float *)__int16 v27 = v25;
        *((_DWORD *)v27 + 1) = v17;
        uint64_t v12 = a11;
        *float v26 = (uint64_t)(v27 + 8);
        if (++v16 == v15) {
          goto LABEL_37;
        }
      }
      float v29 = (char *)*v24;
      uint64_t v30 = (uint64_t)&v27[-*v24];
      uint64_t v31 = v30 >> 3;
      unint64_t v32 = (v30 >> 3) + 1;
      if (v32 >> 61) {
        sub_219486AE4();
      }
      uint64_t v33 = v28 - (void)v29;
      if (v33 >> 2 > v32) {
        unint64_t v32 = v33 >> 2;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34)
      {
        if (v34 >> 61) {
          sub_219486AFC();
        }
        __int16 v35 = operator new(8 * v34);
        uint64_t v36 = (uint64_t)&v35[8 * v31];
        *(float *)uint64_t v36 = v25;
        *(_DWORD *)(v36 + 4) = v17;
        if (v27 != v29)
        {
LABEL_24:
          unint64_t v37 = v27 - 8 - v29;
          if (v37 < 0x58)
          {
            uint64_t v38 = v36;
            goto LABEL_32;
          }
          uint64_t v38 = v36;
          if ((unint64_t)(v27 - &v35[v30]) < 0x20) {
            goto LABEL_98;
          }
          uint64_t v39 = (v37 >> 3) + 1;
          uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v41 = &v27[-v40];
          uint64_t v38 = v36 - v40;
          int32x4_t v42 = &v35[8 * v31 - 16];
          unsigned int v43 = v27 - 16;
          uint64_t v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v45 = *(_OWORD *)v43;
            *(v42 - 1) = *((_OWORD *)v43 - 1);
            *int32x4_t v42 = v45;
            v42 -= 2;
            v43 -= 32;
            v44 -= 4;
          }
          while (v44);
          __int16 v27 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_98:
            do
            {
LABEL_32:
              uint64_t v46 = *((void *)v27 - 1);
              v27 -= 8;
              *(void *)(v38 - 8) = v46;
              v38 -= 8;
            }
            while (v27 != v29);
          }
          __int16 v27 = (char *)*v24;
          goto LABEL_34;
        }
      }
      else
      {
        __int16 v35 = 0;
        uint64_t v36 = 8 * v31;
        *(float *)uint64_t v36 = v25;
        *(_DWORD *)(v36 + 4) = v17;
        if (v27 != v29) {
          goto LABEL_24;
        }
      }
      uint64_t v38 = v36;
LABEL_34:
      *unint64_t v24 = v38;
      uint64_t v47 = v36 + 8;
      *float v26 = v36 + 8;
      v24[2] = (uint64_t)&v35[8 * v34];
      unint64_t v11 = v89;
      a3 = v90;
      if (v27) {
        operator delete(v27);
      }
      uint64_t v15 = v13;
      uint64_t v12 = a11;
      *float v26 = v47;
      ++v16;
    }
    while (v16 != v13);
  }
LABEL_37:
  uint64_t v48 = *v12;
  v12[1] = *v12;
  unint64_t v92 = a8 / a7;
  unint64_t v49 = v92 * v93;
  if (v92 * v93 > (v12[2] - v48) >> 3)
  {
    if (v49 >> 61) {
      sub_219486AE4();
    }
    int v50 = (char *)operator new(8 * v49);
    void *v12 = v50;
    v12[1] = v50;
    v12[2] = &v50[8 * v49];
    if (v48) {
      operator delete(v48);
    }
  }
  for (uint64_t i = 0; i != v93; ++i)
  {
    int v52 = (char *)__p + 24 * i;
    unsigned int v53 = *(float **)v52;
    uint64_t v54 = (float *)*((void *)v52 + 1);
    unint64_t v55 = ((uint64_t)v54 - *(void *)v52) >> 3;
    if (v55 >= v92) {
      unint64_t v56 = a8 / a7;
    }
    else {
      unint64_t v56 = v55;
    }
    int v57 = &v53[2 * v56];
    if (v57 != v54) {
      sub_21948B608(v53, v57, v54);
    }
    if (v56)
    {
      uint64_t v58 = 0;
      unint64_t v59 = v12[1];
      while (1)
      {
        while (1)
        {
          uint64_t v60 = *(int *)(*((void *)__p + 3 * i) + 8 * v58 + 4);
          unint64_t v61 = (unint64_t)v12[2];
          if ((unint64_t)v59 >= v61) {
            break;
          }
          *(void *)unint64_t v59 = v60;
          v59 += 8;
          v12[1] = v59;
          if (++v58 == v56) {
            goto LABEL_42;
          }
        }
        unint64_t v62 = v56;
        v63 = *v12;
        uint64_t v64 = v59 - *v12;
        uint64_t v65 = v64 >> 3;
        unint64_t v66 = (v64 >> 3) + 1;
        if (v66 >> 61) {
          sub_219486AE4();
        }
        uint64_t v67 = v61 - (void)v63;
        if (v67 >> 2 > v66) {
          unint64_t v66 = v67 >> 2;
        }
        unint64_t v68 = (unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v66;
        if (v68)
        {
          if (v68 >> 61) {
            sub_219486AFC();
          }
          int v69 = operator new(8 * v68);
          uint64_t v70 = &v69[8 * v65];
          *(void *)uint64_t v70 = v60;
          uint64_t v71 = (uint64_t)(v70 + 8);
          if (v59 == v63)
          {
LABEL_69:
            unint64_t v56 = v62;
            uint64_t v12 = a11;
            *a11 = v70;
            a11[1] = (char *)v71;
            a11[2] = &v69[8 * v68];
            if (!v63) {
              goto LABEL_66;
            }
LABEL_65:
            operator delete(v63);
            goto LABEL_66;
          }
        }
        else
        {
          int v69 = 0;
          uint64_t v70 = (char *)(8 * v65);
          *(void *)(8 * v65) = v60;
          uint64_t v71 = 8 * v65 + 8;
          if (v59 == v63) {
            goto LABEL_69;
          }
        }
        unint64_t v72 = v59 - 8 - v63;
        if (v72 < 0x168
          || &v69[v64 - 8 - (v72 & 0xFFFFFFFFFFFFFFF8)] > &v69[v64 - 8]
          || &v59[-(v72 & 0xFFFFFFFFFFFFFFF8) - 8] > v59 - 8
          || (unint64_t)(v59 - &v69[v64]) < 0x20)
        {
          break;
        }
        uint64_t v75 = (v72 >> 3) + 1;
        uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v73 = &v59[-v76];
        v70 -= v76;
        uint64_t v77 = &v69[8 * v65 - 16];
        uint64_t v78 = v59 - 16;
        uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
        unint64_t v56 = v62;
        do
        {
          long long v80 = *(_OWORD *)v78;
          *(v77 - 1) = *((_OWORD *)v78 - 1);
          *uint64_t v77 = v80;
          v77 -= 2;
          v78 -= 32;
          v79 -= 4;
        }
        while (v79);
        uint64_t v12 = a11;
        if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_63;
        }
LABEL_64:
        void *v12 = v70;
        v12[1] = (char *)v71;
        v12[2] = &v69[8 * v68];
        if (v63) {
          goto LABEL_65;
        }
LABEL_66:
        v12[1] = (char *)v71;
        ++v58;
        unint64_t v59 = (char *)v71;
        if (v58 == v56) {
          goto LABEL_42;
        }
      }
      uint64_t v73 = v59;
      unint64_t v56 = v62;
      uint64_t v12 = a11;
      do
      {
LABEL_63:
        uint64_t v74 = *((void *)v73 - 1);
        v73 -= 8;
        *((void *)v70 - 1) = v74;
        v70 -= 8;
      }
      while (v73 != v63);
      goto LABEL_64;
    }
LABEL_42:
    ;
  }
  sub_21948B454((uint64_t)v12);
  uint64_t v81 = (char *)__p;
  if (__p)
  {
    size_t v82 = v95;
    v83 = __p;
    if (v95 != __p)
    {
      v84 = v95;
      do
      {
        int v86 = (void *)*((void *)v84 - 3);
        v84 -= 24;
        int v85 = v86;
        if (v86)
        {
          *((void *)v82 - 2) = v85;
          operator delete(v85);
        }
        size_t v82 = v84;
      }
      while (v84 != v81);
      v83 = __p;
    }
    uint64_t v95 = v81;
    operator delete(v83);
  }
}

void sub_21948B14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948B160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948B174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948B188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948B19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948B1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948B1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948B1D8(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    unint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_219486AE4();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_219486AFC();
      }
      uint64_t v13 = operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    float32x2_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    uint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    unint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      unint64_t v21 = &v13[8 * v9 - 16];
      int v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *unint64_t v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void *sub_21948B388(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_219486AE4();
    }
    uint64_t v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_21948B434(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    sub_219504480((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21948B454(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 8);
  unsigned int v2 = *(unsigned char **)a1;
  uint64_t v3 = (uint64_t)&v1[-*(void *)a1];
  uint64_t v4 = v3 >> 3;
  if (v3 >> 3 >= (unint64_t)((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) {
    return;
  }
  int64_t v6 = v1 - v2;
  if (v1 == v2)
  {
    uint64_t v8 = 8 * v4;
    uint64_t v9 = 8 * v4;
    goto LABEL_12;
  }
  if (v3 < 0) {
    sub_219486AFC();
  }
  unint64_t v7 = (char *)operator new((size_t)&v1[-*(void *)a1]);
  uint64_t v8 = (uint64_t)&v7[8 * v4];
  if ((unint64_t)(v6 - 8) < 0x58)
  {
    uint64_t v9 = (uint64_t)&v7[8 * v4];
    do
    {
LABEL_11:
      uint64_t v17 = *((void *)v1 - 1);
      v1 -= 8;
      *(void *)(v9 - 8) = v17;
      v9 -= 8;
    }
    while (v1 != v2);
    goto LABEL_12;
  }
  uint64_t v9 = (uint64_t)&v7[8 * v4];
  if ((unint64_t)(&v1[-v3] - v7) < 0x20) {
    goto LABEL_11;
  }
  unint64_t v10 = ((unint64_t)(v6 - 8) >> 3) + 1;
  uint64_t v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
  unint64_t v12 = &v1[-v11];
  uint64_t v9 = v8 - v11;
  uint64_t v13 = &v7[8 * v4 - 16];
  float32x2_t v14 = (long long *)(v1 - 16);
  uint64_t v15 = v10 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v16 = *v14;
    *((_OWORD *)v13 - 1) = *(v14 - 1);
    *(_OWORD *)uint64_t v13 = v16;
    v13 -= 32;
    v14 -= 2;
    v15 -= 4;
  }
  while (v15);
  uint64_t v1 = v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_11;
  }
LABEL_12:
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v8;
  if (v2)
  {
    operator delete(v2);
  }
}

void **sub_21948B590(void **a1)
{
  unsigned int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      size_t v5 = (char *)a1[1];
      do
      {
        unint64_t v7 = (void *)*((void *)v5 - 3);
        v5 -= 24;
        int64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

float *sub_21948B608(float *result, float *a2, float *a3)
{
  while (a3 != a2)
  {
    unint64_t v3 = ((char *)a3 - (char *)result) >> 3;
    if (v3 < 2) {
      break;
    }
    if (v3 == 3)
    {
      float v52 = result[2];
      float v53 = *result;
      float v54 = *(a3 - 2);
      if (v52 <= *result)
      {
        if (v54 > v52)
        {
          result[2] = v54;
          *(a3 - 2) = v52;
          int v65 = *((_DWORD *)result + 3);
          result[3] = *(a3 - 1);
          *((_DWORD *)a3 - 1) = v65;
          float v66 = result[2];
          float v67 = *result;
          if (v66 > *result)
          {
            *uint64_t result = v66;
            result[2] = v67;
            int v68 = *((_DWORD *)result + 1);
            result[1] = result[3];
            *((_DWORD *)result + 3) = v68;
          }
        }
      }
      else if (v54 <= v52)
      {
        *uint64_t result = v52;
        result[2] = v53;
        int v69 = *((_DWORD *)result + 1);
        result[1] = result[3];
        *((_DWORD *)result + 3) = v69;
        float v70 = *(a3 - 2);
        if (v70 > v53)
        {
          result[2] = v70;
          *(a3 - 2) = v53;
          result[3] = *(a3 - 1);
          *((_DWORD *)a3 - 1) = v69;
        }
      }
      else
      {
        *uint64_t result = v54;
        *(a3 - 2) = v53;
        int v55 = *((_DWORD *)result + 1);
        result[1] = *(a3 - 1);
        *((_DWORD *)a3 - 1) = v55;
      }
      return result;
    }
    if (v3 == 2)
    {
      float v49 = *(a3 - 2);
      float v50 = *result;
      if (v49 > *result)
      {
        *uint64_t result = v49;
        *(a3 - 2) = v50;
        int v51 = *((_DWORD *)result + 1);
        result[1] = *(a3 - 1);
        *((_DWORD *)a3 - 1) = v51;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 63)
    {
      while (result != a3 - 2)
      {
        unint64_t v56 = result;
        result += 2;
        if (v56 != a3 && result != a3)
        {
          float v57 = *v56;
          float v58 = *v56;
          unint64_t v59 = result;
          uint64_t v60 = v56;
          unint64_t v61 = result;
          do
          {
            float v62 = *v61;
            v61 += 2;
            float v63 = v62;
            if (v62 > v58)
            {
              float v58 = v63;
              uint64_t v60 = v59;
            }
            unint64_t v59 = v61;
          }
          while (v61 != a3);
          if (v60 != v56)
          {
            *unint64_t v56 = *v60;
            *uint64_t v60 = v57;
            int v64 = *((_DWORD *)v56 + 1);
            v56[1] = v60[1];
            *((_DWORD *)v60 + 1) = v64;
          }
        }
      }
      return result;
    }
    unint64_t v4 = v3 >> 1;
    size_t v5 = &result[2 * (v3 >> 1)];
    int64_t v6 = a3 - 2;
    float v7 = *(a3 - 2);
    float v8 = *v5;
    float v9 = *result;
    if (*v5 <= *result)
    {
      if (v7 <= v8)
      {
        int v11 = 0;
        float v12 = *result;
        float v13 = *v5;
        if (*result <= *v5) {
          goto LABEL_27;
        }
        goto LABEL_9;
      }
      float *v5 = v7;
      *(a3 - 2) = v8;
      long long v24 = &result[2 * v4];
      int v26 = *((_DWORD *)v24 + 1);
      uint64_t v25 = v24 + 1;
      *uint64_t v25 = *(a3 - 1);
      *((_DWORD *)a3 - 1) = v26;
      float v27 = *result;
      if (*v5 > *result)
      {
        *uint64_t result = *v5;
        float *v5 = v27;
        int v28 = *((_DWORD *)result + 1);
        result[1] = *v25;
        *(_DWORD *)uint64_t v25 = v28;
        int v11 = 2;
        float v12 = *result;
        float v13 = *v5;
        if (*result <= *v5) {
          goto LABEL_27;
        }
        goto LABEL_9;
      }
LABEL_49:
      int v11 = 1;
      float v12 = *result;
      float v13 = *v5;
      if (*result <= *v5) {
        goto LABEL_27;
      }
LABEL_9:
      float32x2_t v14 = a3 - 2;
      uint64_t v15 = result + 2;
      if (result + 2 >= a3 - 2)
      {
LABEL_31:
        uint64_t v20 = v15;
      }
      else
      {
LABEL_10:
        long long v16 = v15;
        while (1)
        {
          float v17 = *v5;
          do
          {
            float v18 = *v16;
            v16 += 2;
            float v19 = v18;
          }
          while (v18 > v17);
          uint64_t v20 = v16 - 2;
          do
          {
            float v21 = *(v14 - 2);
            v14 -= 2;
            float v22 = v21;
          }
          while (v21 <= v17);
          if (v20 >= v14) {
            break;
          }
          *(v16 - 2) = v22;
          float *v14 = v19;
          int v23 = *((_DWORD *)v16 - 1);
          *(v16 - 1) = v14[1];
          *((_DWORD *)v14 + 1) = v23;
          ++v11;
          if (v20 == v5) {
            size_t v5 = v14;
          }
        }
      }
      if (v20 != v5)
      {
        float v32 = *v20;
        if (*v5 > *v20)
        {
          float *v20 = *v5;
          float *v5 = v32;
          int v33 = *((_DWORD *)v20 + 1);
          v20[1] = v5[1];
          *((_DWORD *)v5 + 1) = v33;
          ++v11;
        }
      }
      if (v20 == a2) {
        return result;
      }
      if (!v11)
      {
        if (v20 <= a2)
        {
          uint64_t v38 = v20 + 2;
          while (v38 != a3)
          {
            float v39 = *v38;
            float v40 = *(v38 - 2);
            v38 += 2;
            if (v39 > v40) {
              goto LABEL_37;
            }
          }
        }
        else
        {
          while (v15 != v20)
          {
            float v34 = *v15;
            float v35 = *(v15 - 2);
            v15 += 2;
            if (v34 > v35) {
              goto LABEL_37;
            }
          }
        }
        return result;
      }
LABEL_37:
      if (v20 <= a2) {
        uint64_t result = v20 + 2;
      }
      else {
        a3 = v20;
      }
    }
    else
    {
      if (v7 <= v8)
      {
        *uint64_t result = v8;
        float *v5 = v9;
        int v29 = *((_DWORD *)result + 1);
        uint64_t v30 = &result[2 * v4 + 1];
        result[1] = *v30;
        *(_DWORD *)uint64_t v30 = v29;
        if (*v6 > v9)
        {
          float *v5 = *v6;
          *(a3 - 2) = v9;
          *uint64_t v30 = *(a3 - 1);
          *((_DWORD *)a3 - 1) = v29;
          int v11 = 2;
          float v12 = *result;
          float v13 = *v5;
          if (*result <= *v5) {
            goto LABEL_27;
          }
          goto LABEL_9;
        }
        goto LABEL_49;
      }
      *uint64_t result = v7;
      *(a3 - 2) = v9;
      int v10 = *((_DWORD *)result + 1);
      result[1] = *(a3 - 1);
      *((_DWORD *)a3 - 1) = v10;
      int v11 = 1;
      float v12 = *result;
      float v13 = *v5;
      if (*result > *v5) {
        goto LABEL_9;
      }
LABEL_27:
      float32x2_t v14 = a3 - 2;
      while (1)
      {
        v14 -= 2;
        if (v14 == result) {
          break;
        }
        if (*v14 > v13)
        {
          *uint64_t result = *v14;
          float *v14 = v12;
          int v31 = *((_DWORD *)result + 1);
          result[1] = v14[1];
          *((_DWORD *)v14 + 1) = v31;
          ++v11;
          uint64_t v15 = result + 2;
          if (result + 2 < v14) {
            goto LABEL_10;
          }
          goto LABEL_31;
        }
      }
      uint64_t v36 = result + 2;
      if (v12 <= *v6)
      {
        if (v36 == v6) {
          return result;
        }
        while (1)
        {
          float v37 = *v36;
          if (v12 > *v36) {
            break;
          }
          v36 += 2;
          if (v36 == v6) {
            return result;
          }
        }
        *uint64_t v36 = *v6;
        *(a3 - 2) = v37;
        int v41 = *((_DWORD *)v36 + 1);
        v36[1] = *(a3 - 1);
        *((_DWORD *)a3 - 1) = v41;
        v36 += 2;
      }
      if (v36 == v6) {
        return result;
      }
      while (1)
      {
        float v43 = *result;
        do
        {
          float v44 = *v36;
          v36 += 2;
          float v45 = v44;
        }
        while (v43 <= v44);
        uint64_t v46 = v36 - 2;
        do
        {
          float v47 = *(v6 - 2);
          v6 -= 2;
          float v48 = v47;
        }
        while (v43 > v47);
        if (v46 >= v6) {
          break;
        }
        *(v36 - 2) = v48;
        float *v6 = v45;
        int v42 = *((_DWORD *)v36 - 1);
        *(v36 - 1) = v6[1];
        *((_DWORD *)v6 + 1) = v42;
      }
      uint64_t result = v36 - 2;
      if (v46 > a2) {
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_21948BAE0(uint64_t result)
{
  if (*(unsigned char *)(result + 20) != 2) {
    sub_219504330();
  }
  uint64_t v1 = result;
  if (!*(unsigned char *)(result + 385) && !*(unsigned char *)(result + 386)) {
    sub_2195042F8();
  }
  if (!*(unsigned char *)(result + 387))
  {
    uint64_t result = sub_2194A3FE8(result);
    uint64_t v2 = *(void *)(v1 + 192);
    if (result)
    {
      *(void *)(v1 + 288) = v2;
      *(_DWORD *)(v1 + 280) = *(_DWORD *)(v1 + 176);
      *(_DWORD *)(v1 + 284) = *(_DWORD *)(v1 + 184);
      *(void *)(v1 + 184) = 0;
      *(void *)(v1 + 192) = 0;
      *(void *)(v1 + 176) = 0;
    }
    else
    {
      unint64_t v3 = *(const void **)(v1 + 168);
      unsigned int v4 = *(_DWORD *)(v1 + 184);
      unsigned int v5 = *(_DWORD *)(v1 + 160);
      *(void *)(v1 + 288) = v2;
      *(_DWORD *)(v1 + 280) = *(_DWORD *)(v1 + 176);
      *(_DWORD *)(v1 + 284) = v5 + v4;
      *(_OWORD *)(v1 + 168) = 0u;
      *(_OWORD *)(v1 + 152) = 0u;
      *(_OWORD *)(v1 + 184) = 0u;
      if (v5)
      {
        return (uint64_t)memcpy((void *)(v2 + 44 * v4), v3, 44 * v5);
      }
    }
  }
  return result;
}

void sub_21948BBC4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unint64_t a9, unint64_t a10, char **a11)
{
  if (a5 != 1 || a6 != 1) {
    sub_219504448();
  }
  if (a7 <= 0) {
    sub_219504410();
  }
  unint64_t v11 = a2;
  float v12 = a11;
  uint64_t v13 = a4 + a2;
  if (a4 + a2 != (v12[1] - *v12) >> 3) {
    sub_2195043D8();
  }
  uint64_t v93 = a7;
  sub_21948B388(&__p, a7);
  if (v13)
  {
    uint64_t v15 = v13;
    uint64_t v16 = 0;
    unint64_t v89 = v11;
    uint64_t v90 = a3;
    do
    {
      while (1)
      {
        unint64_t v17 = *(void *)&(*v12)[8 * v16];
        uint64_t v18 = a1;
        if (v17 < v11)
        {
          unint64_t v19 = 0;
        }
        else
        {
          uint64_t v18 = a3;
          unint64_t v19 = v11;
        }
        uint64_t v20 = v18 + 44 * (v17 - v19);
        unint64_t v21 = *(void *)(v20 + 32);
        if (vcvtms_s32_f32((float)((float)(HIDWORD(v21) & 0x7FFFF) / (float)a10) * 0.015625)
           + vcvtms_s32_f32((float)((float)(v21 & 0x3FFFF) / (float)a9) * 0.015625))
        {
          sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/include/VIO/Hardware/KeyPointAndDescriptorGeneratorUtils.h", 97, "bin_index == 0 && \"bin index should always be 0\"", (void (*)(void *))sub_2194FF9C0);
          abort();
        }
        int v22 = *(_DWORD *)(v20 + 40);
        float v23 = (float)((float)(v21 >> 23) * 0.0625) * 0.25;
        if (v23 > (float)(a7 - 1)) {
          float v23 = (float)(a7 - 1);
        }
        long long v24 = (uint64_t *)((char *)__p + 24 * (int)vcvtms_s32_f32(v23));
        float v25 = (float)(v22 & 0x7FFF);
        int v26 = v24 + 1;
        float v27 = (char *)v24[1];
        unint64_t v28 = v24[2];
        if ((unint64_t)v27 >= v28) {
          break;
        }
        *(float *)float v27 = v25;
        *((_DWORD *)v27 + 1) = v17;
        float v12 = a11;
        *int v26 = (uint64_t)(v27 + 8);
        if (++v16 == v15) {
          goto LABEL_37;
        }
      }
      int v29 = (char *)*v24;
      uint64_t v30 = (uint64_t)&v27[-*v24];
      uint64_t v31 = v30 >> 3;
      unint64_t v32 = (v30 >> 3) + 1;
      if (v32 >> 61) {
        sub_219486AE4();
      }
      uint64_t v33 = v28 - (void)v29;
      if (v33 >> 2 > v32) {
        unint64_t v32 = v33 >> 2;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34)
      {
        if (v34 >> 61) {
          sub_219486AFC();
        }
        float v35 = operator new(8 * v34);
        uint64_t v36 = (uint64_t)&v35[8 * v31];
        *(float *)uint64_t v36 = v25;
        *(_DWORD *)(v36 + 4) = v17;
        if (v27 != v29)
        {
LABEL_24:
          unint64_t v37 = v27 - 8 - v29;
          if (v37 < 0x58)
          {
            uint64_t v38 = v36;
            goto LABEL_32;
          }
          uint64_t v38 = v36;
          if ((unint64_t)(v27 - &v35[v30]) < 0x20) {
            goto LABEL_98;
          }
          uint64_t v39 = (v37 >> 3) + 1;
          uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          int v41 = &v27[-v40];
          uint64_t v38 = v36 - v40;
          int v42 = &v35[8 * v31 - 16];
          float v43 = v27 - 16;
          uint64_t v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v45 = *(_OWORD *)v43;
            *(v42 - 1) = *((_OWORD *)v43 - 1);
            *int v42 = v45;
            v42 -= 2;
            v43 -= 32;
            v44 -= 4;
          }
          while (v44);
          float v27 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_98:
            do
            {
LABEL_32:
              uint64_t v46 = *((void *)v27 - 1);
              v27 -= 8;
              *(void *)(v38 - 8) = v46;
              v38 -= 8;
            }
            while (v27 != v29);
          }
          float v27 = (char *)*v24;
          goto LABEL_34;
        }
      }
      else
      {
        float v35 = 0;
        uint64_t v36 = 8 * v31;
        *(float *)uint64_t v36 = v25;
        *(_DWORD *)(v36 + 4) = v17;
        if (v27 != v29) {
          goto LABEL_24;
        }
      }
      uint64_t v38 = v36;
LABEL_34:
      *long long v24 = v38;
      uint64_t v47 = v36 + 8;
      *int v26 = v36 + 8;
      v24[2] = (uint64_t)&v35[8 * v34];
      unint64_t v11 = v89;
      a3 = v90;
      if (v27) {
        operator delete(v27);
      }
      uint64_t v15 = v13;
      float v12 = a11;
      *int v26 = v47;
      ++v16;
    }
    while (v16 != v13);
  }
LABEL_37:
  float v48 = *v12;
  v12[1] = *v12;
  unint64_t v92 = a8 / a7;
  unint64_t v49 = v92 * v93;
  if (v92 * v93 > (v12[2] - v48) >> 3)
  {
    if (v49 >> 61) {
      sub_219486AE4();
    }
    float v50 = (char *)operator new(8 * v49);
    char *v12 = v50;
    v12[1] = v50;
    v12[2] = &v50[8 * v49];
    if (v48) {
      operator delete(v48);
    }
  }
  for (uint64_t i = 0; i != v93; ++i)
  {
    float v52 = (char *)__p + 24 * i;
    float v53 = *(float **)v52;
    float v54 = (float *)*((void *)v52 + 1);
    unint64_t v55 = ((uint64_t)v54 - *(void *)v52) >> 3;
    if (v55 >= v92) {
      unint64_t v56 = a8 / a7;
    }
    else {
      unint64_t v56 = v55;
    }
    float v57 = &v53[2 * v56];
    if (v57 != v54) {
      sub_21948B608(v53, v57, v54);
    }
    if (v56)
    {
      uint64_t v58 = 0;
      unint64_t v59 = v12[1];
      while (1)
      {
        while (1)
        {
          uint64_t v60 = *(int *)(*((void *)__p + 3 * i) + 8 * v58 + 4);
          unint64_t v61 = (unint64_t)v12[2];
          if ((unint64_t)v59 >= v61) {
            break;
          }
          *(void *)unint64_t v59 = v60;
          v59 += 8;
          v12[1] = v59;
          if (++v58 == v56) {
            goto LABEL_42;
          }
        }
        unint64_t v62 = v56;
        float v63 = *v12;
        uint64_t v64 = v59 - *v12;
        uint64_t v65 = v64 >> 3;
        unint64_t v66 = (v64 >> 3) + 1;
        if (v66 >> 61) {
          sub_219486AE4();
        }
        uint64_t v67 = v61 - (void)v63;
        if (v67 >> 2 > v66) {
          unint64_t v66 = v67 >> 2;
        }
        unint64_t v68 = (unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v66;
        if (v68)
        {
          if (v68 >> 61) {
            sub_219486AFC();
          }
          int v69 = operator new(8 * v68);
          float v70 = &v69[8 * v65];
          *(void *)float v70 = v60;
          uint64_t v71 = (uint64_t)(v70 + 8);
          if (v59 == v63)
          {
LABEL_69:
            unint64_t v56 = v62;
            float v12 = a11;
            *a11 = v70;
            a11[1] = (char *)v71;
            a11[2] = &v69[8 * v68];
            if (!v63) {
              goto LABEL_66;
            }
LABEL_65:
            operator delete(v63);
            goto LABEL_66;
          }
        }
        else
        {
          int v69 = 0;
          float v70 = (char *)(8 * v65);
          *(void *)(8 * v65) = v60;
          uint64_t v71 = 8 * v65 + 8;
          if (v59 == v63) {
            goto LABEL_69;
          }
        }
        unint64_t v72 = v59 - 8 - v63;
        if (v72 < 0x168
          || &v69[v64 - 8 - (v72 & 0xFFFFFFFFFFFFFFF8)] > &v69[v64 - 8]
          || &v59[-(v72 & 0xFFFFFFFFFFFFFFF8) - 8] > v59 - 8
          || (unint64_t)(v59 - &v69[v64]) < 0x20)
        {
          break;
        }
        uint64_t v75 = (v72 >> 3) + 1;
        uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v73 = &v59[-v76];
        v70 -= v76;
        uint64_t v77 = &v69[8 * v65 - 16];
        uint64_t v78 = v59 - 16;
        uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
        unint64_t v56 = v62;
        do
        {
          long long v80 = *(_OWORD *)v78;
          *(v77 - 1) = *((_OWORD *)v78 - 1);
          *uint64_t v77 = v80;
          v77 -= 2;
          v78 -= 32;
          v79 -= 4;
        }
        while (v79);
        float v12 = a11;
        if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_63;
        }
LABEL_64:
        char *v12 = v70;
        v12[1] = (char *)v71;
        v12[2] = &v69[8 * v68];
        if (v63) {
          goto LABEL_65;
        }
LABEL_66:
        v12[1] = (char *)v71;
        ++v58;
        unint64_t v59 = (char *)v71;
        if (v58 == v56) {
          goto LABEL_42;
        }
      }
      uint64_t v73 = v59;
      unint64_t v56 = v62;
      float v12 = a11;
      do
      {
LABEL_63:
        uint64_t v74 = *((void *)v73 - 1);
        v73 -= 8;
        *((void *)v70 - 1) = v74;
        v70 -= 8;
      }
      while (v73 != v63);
      goto LABEL_64;
    }
LABEL_42:
    ;
  }
  sub_21948B454((uint64_t)v12);
  uint64_t v81 = (char *)__p;
  if (__p)
  {
    size_t v82 = v95;
    v83 = __p;
    if (v95 != __p)
    {
      v84 = v95;
      do
      {
        int v86 = (void *)*((void *)v84 - 3);
        v84 -= 24;
        int v85 = v86;
        if (v86)
        {
          *((void *)v82 - 2) = v85;
          operator delete(v85);
        }
        size_t v82 = v84;
      }
      while (v84 != v81);
      v83 = __p;
    }
    uint64_t v95 = v81;
    operator delete(v83);
  }
}

void sub_21948C214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948C228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948C23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948C250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948C264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948C278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948C28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948C2A0(uint64_t a1, unint64_t **a2)
{
  if (*(unsigned char *)(a1 + 20) != 2) {
    sub_2195043A0();
  }
  unint64_t v2 = *(unsigned int *)(a1 + 284);
  unint64_t v3 = (*(_DWORD *)(a1 + 160) + v2);
  unsigned int v5 = *a2;
  unsigned int v4 = a2[1];
  uint64_t v6 = (char *)v4 - (char *)*a2;
  unint64_t v7 = v6 >> 3;
  if (v6 >> 3 > v3) {
    sub_219504368();
  }
  uint64_t v8 = *(void *)(a1 + 288);
  uint64_t v9 = *(void *)(a1 + 168);
  int v10 = *(void **)(a1 + 128);
  *(void *)(a1 + 144) = 0;
  if (v4 == v5)
  {
    *(_DWORD *)(*(void *)(a1 + 400) + 4) = (unint64_t)v6 >> 3;
  }
  else
  {
    if ((unint64_t)v6 >= 0x5555555555555551) {
      sub_219486AE4();
    }
    unint64_t v28 = v10;
    unint64_t v29 = v6;
    unint64_t v11 = (char *)operator new(24 * v7);
    unint64_t __n = 24 * ((24 * v7 - 24) / 0x18) + 24;
    bzero(v11, __n);
    if (v7 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v7;
    }
    __src = v11;
    uint64_t v13 = (float *)(v11 + 12);
    float32x2_t v14 = (float32x2_t)vdup_n_s32(0x3C800000u);
    do
    {
      unint64_t v16 = *v5++;
      unint64_t v15 = v16;
      if (v16 > (v3 - 1))
      {
        sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwIspDataHandler.h", 389, "idx[i] <= max_valid_idx", (void (*)(void *))sub_2194FF9C0);
        abort();
      }
      uint64_t v17 = v8 + 44 * v15;
      BOOL v18 = v15 >= v2;
      uint64_t v19 = v9 + 44 * (v15 - v2);
      if (v18) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = v17;
      }
      unint64_t v21 = *(void *)(v20 + 32);
      v22.i64[0] = v21;
      v22.i64[1] = HIDWORD(v21);
      *(float32x2_t *)(v13 - 3) = vmul_f32(vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8(v22, (int8x16_t)xmmword_21950C240))), v14);
      float v23 = pow(1.41421356, (float)((float)(v21 >> 23) * 0.0625));
      *uint64_t v13 = v23;
      __int16 v24 = *(_DWORD *)(v20 + 40);
      uint64_t v25 = *(void *)(v20 + 32);
      *((unsigned char *)v13 + 4) = v25 < 0;
      float v26 = (double)((unint64_t)v25 >> 52) * 3.14159265 * 0.0078125;
      *(v13 - 1) = v26;
      v13[2] = (float)(v24 & 0x7FFF);
      v13 += 6;
      --v12;
    }
    while (v12);
    memcpy(v28, __src, __n);
    *(_DWORD *)(*(void *)(a1 + 400) + 4) = v29 >> 3;
    operator delete(__src);
  }
}

void sub_21948C534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21948C55C(uint64_t result)
{
  if (*(unsigned char *)(result + 20) != 2) {
    sub_219504330();
  }
  uint64_t v1 = result;
  if (!*(unsigned char *)(result + 385) && !*(unsigned char *)(result + 386)) {
    sub_2195042F8();
  }
  if (!*(unsigned char *)(result + 387))
  {
    uint64_t result = sub_2194A3FE8(result);
    uint64_t v2 = *(void *)(v1 + 192);
    if (result)
    {
      *(void *)(v1 + 288) = v2;
      *(_DWORD *)(v1 + 280) = *(_DWORD *)(v1 + 176);
      *(_DWORD *)(v1 + 284) = *(_DWORD *)(v1 + 184);
      *(void *)(v1 + 184) = 0;
      *(void *)(v1 + 192) = 0;
      *(void *)(v1 + 176) = 0;
    }
    else
    {
      unint64_t v3 = *(const void **)(v1 + 168);
      unsigned int v4 = *(_DWORD *)(v1 + 184);
      uint64_t v5 = *(unsigned int *)(v1 + 160);
      *(void *)(v1 + 288) = v2;
      *(_DWORD *)(v1 + 280) = *(_DWORD *)(v1 + 176);
      *(_DWORD *)(v1 + 284) = v5 + v4;
      *(_OWORD *)(v1 + 168) = 0u;
      *(_OWORD *)(v1 + 152) = 0u;
      *(_OWORD *)(v1 + 184) = 0u;
      if (v5)
      {
        return (uint64_t)memcpy((void *)(v2 + 28 * v4), v3, 28 * v5);
      }
    }
  }
  return result;
}

void sub_21948C644(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unint64_t a9, unint64_t a10, char **a11)
{
  if (a5 != 1 || a6 != 1) {
    sub_219504448();
  }
  if (a7 <= 0) {
    sub_219504410();
  }
  unint64_t v11 = a2;
  uint64_t v12 = a11;
  uint64_t v13 = a4 + a2;
  if (a4 + a2 != (v12[1] - *v12) >> 3) {
    sub_2195043D8();
  }
  uint64_t v93 = a7;
  sub_21948B388(&__p, a7);
  if (v13)
  {
    uint64_t v15 = v13;
    uint64_t v16 = 0;
    unint64_t v89 = v11;
    uint64_t v90 = a3;
    do
    {
      while (1)
      {
        unint64_t v17 = *(void *)&(*v12)[8 * v16];
        uint64_t v18 = a1;
        if (v17 < v11)
        {
          unint64_t v19 = 0;
        }
        else
        {
          uint64_t v18 = a3;
          unint64_t v19 = v11;
        }
        uint64_t v20 = v18 + 28 * (v17 - v19);
        unint64_t v21 = *(void *)(v20 + 16);
        if (vcvtms_s32_f32((float)((float)(HIDWORD(v21) & 0x7FFFF) / (float)a10) * 0.015625)
           + vcvtms_s32_f32((float)((float)(v21 & 0x3FFFF) / (float)a9) * 0.015625))
        {
          sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/include/VIO/Hardware/KeyPointAndDescriptorGeneratorUtils.h", 97, "bin_index == 0 && \"bin index should always be 0\"", (void (*)(void *))sub_2194FF9C0);
          abort();
        }
        int v22 = *(_DWORD *)(v20 + 24);
        float v23 = (float)((float)(v21 >> 23) * 0.0625) * 0.25;
        if (v23 > (float)(a7 - 1)) {
          float v23 = (float)(a7 - 1);
        }
        __int16 v24 = (uint64_t *)((char *)__p + 24 * (int)vcvtms_s32_f32(v23));
        float v25 = (float)(v22 & 0x7FFF);
        float v26 = v24 + 1;
        float v27 = (char *)v24[1];
        unint64_t v28 = v24[2];
        if ((unint64_t)v27 >= v28) {
          break;
        }
        *(float *)float v27 = v25;
        *((_DWORD *)v27 + 1) = v17;
        uint64_t v12 = a11;
        *float v26 = (uint64_t)(v27 + 8);
        if (++v16 == v15) {
          goto LABEL_37;
        }
      }
      unint64_t v29 = (char *)*v24;
      uint64_t v30 = (uint64_t)&v27[-*v24];
      uint64_t v31 = v30 >> 3;
      unint64_t v32 = (v30 >> 3) + 1;
      if (v32 >> 61) {
        sub_219486AE4();
      }
      uint64_t v33 = v28 - (void)v29;
      if (v33 >> 2 > v32) {
        unint64_t v32 = v33 >> 2;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34)
      {
        if (v34 >> 61) {
          sub_219486AFC();
        }
        float v35 = operator new(8 * v34);
        uint64_t v36 = (uint64_t)&v35[8 * v31];
        *(float *)uint64_t v36 = v25;
        *(_DWORD *)(v36 + 4) = v17;
        if (v27 != v29)
        {
LABEL_24:
          unint64_t v37 = v27 - 8 - v29;
          if (v37 < 0x58)
          {
            uint64_t v38 = v36;
            goto LABEL_32;
          }
          uint64_t v38 = v36;
          if ((unint64_t)(v27 - &v35[v30]) < 0x20) {
            goto LABEL_98;
          }
          uint64_t v39 = (v37 >> 3) + 1;
          uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          int v41 = &v27[-v40];
          uint64_t v38 = v36 - v40;
          int v42 = &v35[8 * v31 - 16];
          float v43 = v27 - 16;
          uint64_t v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v45 = *(_OWORD *)v43;
            *(v42 - 1) = *((_OWORD *)v43 - 1);
            *int v42 = v45;
            v42 -= 2;
            v43 -= 32;
            v44 -= 4;
          }
          while (v44);
          float v27 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_98:
            do
            {
LABEL_32:
              uint64_t v46 = *((void *)v27 - 1);
              v27 -= 8;
              *(void *)(v38 - 8) = v46;
              v38 -= 8;
            }
            while (v27 != v29);
          }
          float v27 = (char *)*v24;
          goto LABEL_34;
        }
      }
      else
      {
        float v35 = 0;
        uint64_t v36 = 8 * v31;
        *(float *)uint64_t v36 = v25;
        *(_DWORD *)(v36 + 4) = v17;
        if (v27 != v29) {
          goto LABEL_24;
        }
      }
      uint64_t v38 = v36;
LABEL_34:
      *__int16 v24 = v38;
      uint64_t v47 = v36 + 8;
      *float v26 = v36 + 8;
      v24[2] = (uint64_t)&v35[8 * v34];
      unint64_t v11 = v89;
      a3 = v90;
      if (v27) {
        operator delete(v27);
      }
      uint64_t v15 = v13;
      uint64_t v12 = a11;
      *float v26 = v47;
      ++v16;
    }
    while (v16 != v13);
  }
LABEL_37:
  float v48 = *v12;
  v12[1] = *v12;
  unint64_t v92 = a8 / a7;
  unint64_t v49 = v92 * v93;
  if (v92 * v93 > (v12[2] - v48) >> 3)
  {
    if (v49 >> 61) {
      sub_219486AE4();
    }
    float v50 = (char *)operator new(8 * v49);
    char *v12 = v50;
    v12[1] = v50;
    v12[2] = &v50[8 * v49];
    if (v48) {
      operator delete(v48);
    }
  }
  for (uint64_t i = 0; i != v93; ++i)
  {
    float v52 = (char *)__p + 24 * i;
    float v53 = *(float **)v52;
    float v54 = (float *)*((void *)v52 + 1);
    unint64_t v55 = ((uint64_t)v54 - *(void *)v52) >> 3;
    if (v55 >= v92) {
      unint64_t v56 = a8 / a7;
    }
    else {
      unint64_t v56 = v55;
    }
    float v57 = &v53[2 * v56];
    if (v57 != v54) {
      sub_21948B608(v53, v57, v54);
    }
    if (v56)
    {
      uint64_t v58 = 0;
      unint64_t v59 = v12[1];
      while (1)
      {
        while (1)
        {
          uint64_t v60 = *(int *)(*((void *)__p + 3 * i) + 8 * v58 + 4);
          unint64_t v61 = (unint64_t)v12[2];
          if ((unint64_t)v59 >= v61) {
            break;
          }
          *(void *)unint64_t v59 = v60;
          v59 += 8;
          v12[1] = v59;
          if (++v58 == v56) {
            goto LABEL_42;
          }
        }
        unint64_t v62 = v56;
        float v63 = *v12;
        uint64_t v64 = v59 - *v12;
        uint64_t v65 = v64 >> 3;
        unint64_t v66 = (v64 >> 3) + 1;
        if (v66 >> 61) {
          sub_219486AE4();
        }
        uint64_t v67 = v61 - (void)v63;
        if (v67 >> 2 > v66) {
          unint64_t v66 = v67 >> 2;
        }
        unint64_t v68 = (unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v66;
        if (v68)
        {
          if (v68 >> 61) {
            sub_219486AFC();
          }
          int v69 = operator new(8 * v68);
          float v70 = &v69[8 * v65];
          *(void *)float v70 = v60;
          uint64_t v71 = (uint64_t)(v70 + 8);
          if (v59 == v63)
          {
LABEL_69:
            unint64_t v56 = v62;
            uint64_t v12 = a11;
            *a11 = v70;
            a11[1] = (char *)v71;
            a11[2] = &v69[8 * v68];
            if (!v63) {
              goto LABEL_66;
            }
LABEL_65:
            operator delete(v63);
            goto LABEL_66;
          }
        }
        else
        {
          int v69 = 0;
          float v70 = (char *)(8 * v65);
          *(void *)(8 * v65) = v60;
          uint64_t v71 = 8 * v65 + 8;
          if (v59 == v63) {
            goto LABEL_69;
          }
        }
        unint64_t v72 = v59 - 8 - v63;
        if (v72 < 0x168
          || &v69[v64 - 8 - (v72 & 0xFFFFFFFFFFFFFFF8)] > &v69[v64 - 8]
          || &v59[-(v72 & 0xFFFFFFFFFFFFFFF8) - 8] > v59 - 8
          || (unint64_t)(v59 - &v69[v64]) < 0x20)
        {
          break;
        }
        uint64_t v75 = (v72 >> 3) + 1;
        uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v73 = &v59[-v76];
        v70 -= v76;
        uint64_t v77 = &v69[8 * v65 - 16];
        uint64_t v78 = v59 - 16;
        uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
        unint64_t v56 = v62;
        do
        {
          long long v80 = *(_OWORD *)v78;
          *(v77 - 1) = *((_OWORD *)v78 - 1);
          *uint64_t v77 = v80;
          v77 -= 2;
          v78 -= 32;
          v79 -= 4;
        }
        while (v79);
        uint64_t v12 = a11;
        if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_63;
        }
LABEL_64:
        char *v12 = v70;
        v12[1] = (char *)v71;
        v12[2] = &v69[8 * v68];
        if (v63) {
          goto LABEL_65;
        }
LABEL_66:
        v12[1] = (char *)v71;
        ++v58;
        unint64_t v59 = (char *)v71;
        if (v58 == v56) {
          goto LABEL_42;
        }
      }
      uint64_t v73 = v59;
      unint64_t v56 = v62;
      uint64_t v12 = a11;
      do
      {
LABEL_63:
        uint64_t v74 = *((void *)v73 - 1);
        v73 -= 8;
        *((void *)v70 - 1) = v74;
        v70 -= 8;
      }
      while (v73 != v63);
      goto LABEL_64;
    }
LABEL_42:
    ;
  }
  sub_21948B454((uint64_t)v12);
  uint64_t v81 = (char *)__p;
  if (__p)
  {
    size_t v82 = v95;
    v83 = __p;
    if (v95 != __p)
    {
      v84 = v95;
      do
      {
        int v86 = (void *)*((void *)v84 - 3);
        v84 -= 24;
        int v85 = v86;
        if (v86)
        {
          *((void *)v82 - 2) = v85;
          operator delete(v85);
        }
        size_t v82 = v84;
      }
      while (v84 != v81);
      v83 = __p;
    }
    uint64_t v95 = v81;
    operator delete(v83);
  }
}

void sub_21948CC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948CCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948CCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948CCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948CCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948CCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948CD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_21948CD20(uint64_t a1, unint64_t **a2)
{
  if (*(unsigned char *)(a1 + 20) != 2) {
    sub_2195043A0();
  }
  unint64_t v2 = *(unsigned int *)(a1 + 284);
  unint64_t v3 = (*(_DWORD *)(a1 + 160) + v2);
  uint64_t v5 = *a2;
  unsigned int v4 = a2[1];
  uint64_t v6 = (char *)v4 - (char *)*a2;
  unint64_t v7 = v6 >> 3;
  if (v6 >> 3 > v3) {
    sub_219504368();
  }
  uint64_t v8 = *(void *)(a1 + 288);
  uint64_t v9 = *(void *)(a1 + 168);
  int v10 = *(void **)(a1 + 128);
  *(void *)(a1 + 144) = 0;
  if (v4 == v5)
  {
    *(_DWORD *)(*(void *)(a1 + 400) + 4) = (unint64_t)v6 >> 3;
  }
  else
  {
    if ((unint64_t)v6 >= 0x5555555555555551) {
      sub_219486AE4();
    }
    unint64_t v28 = v10;
    unint64_t v29 = v6;
    unint64_t v11 = (char *)operator new(24 * v7);
    unint64_t __n = 24 * ((24 * v7 - 24) / 0x18) + 24;
    bzero(v11, __n);
    if (v7 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v7;
    }
    __src = v11;
    uint64_t v13 = (float *)(v11 + 12);
    float32x2_t v14 = (float32x2_t)vdup_n_s32(0x3C800000u);
    do
    {
      unint64_t v16 = *v5++;
      unint64_t v15 = v16;
      if (v16 > (v3 - 1))
      {
        sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwIspDataHandler.h", 389, "idx[i] <= max_valid_idx", (void (*)(void *))sub_2194FF9C0);
        abort();
      }
      uint64_t v17 = v8 + 28 * v15;
      BOOL v18 = v15 >= v2;
      uint64_t v19 = v9 + 28 * (v15 - v2);
      if (v18) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = v17;
      }
      unint64_t v21 = *(void *)(v20 + 16);
      v22.i64[0] = v21;
      v22.i64[1] = HIDWORD(v21);
      *(float32x2_t *)(v13 - 3) = vmul_f32(vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8(v22, (int8x16_t)xmmword_21950C240))), v14);
      float v23 = pow(1.41421356, (float)((float)(v21 >> 23) * 0.0625));
      *uint64_t v13 = v23;
      __int16 v24 = *(_DWORD *)(v20 + 24);
      uint64_t v25 = *(void *)(v20 + 16);
      *((unsigned char *)v13 + 4) = v25 < 0;
      float v26 = (double)((unint64_t)v25 >> 52) * 3.14159265 * 0.0078125;
      *(v13 - 1) = v26;
      v13[2] = (float)(v24 & 0x7FFF);
      v13 += 6;
      --v12;
    }
    while (v12);
    memcpy(v28, __src, __n);
    *(_DWORD *)(*(void *)(a1 + 400) + 4) = v29 >> 3;
    operator delete(__src);
  }
}

void sub_21948CFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21948CFDC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21948CFDC(a1, *a2);
    sub_21948CFDC(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *sub_21948D030(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 == result) {
    return result;
  }
  while (1)
  {
    uint64_t v2 = a2[2];
    if (*(unsigned char *)(v2 + 24)) {
      return result;
    }
    unint64_t v3 = *(uint64_t **)(v2 + 16);
    uint64_t v4 = *v3;
    if (*v3 != v2) {
      break;
    }
    uint64_t v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(unsigned char *)(v2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        *unint64_t v3 = v11;
        if (v11) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v9 = *(uint64_t **)(v2 + 8);
        uint64_t v10 = *v9;
        *(void *)(v2 + 8) = *v9;
        if (v10)
        {
          *(void *)(v10 + 16) = v2;
          unint64_t v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
        *uint64_t v9 = v2;
        *(void *)(v2 + 16) = v9;
        unint64_t v3 = (uint64_t *)v9[2];
        uint64_t v2 = *v3;
        *((unsigned char *)v9 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        *unint64_t v3 = v11;
        if (v11) {
LABEL_15:
        }
          *(void *)(v11 + 16) = v3;
      }
      *(void *)(v2 + 16) = v3[2];
      *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
      *(void *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(unsigned char *)(v2 + 24) = 1;
    a2 = v3;
    *((unsigned char *)v3 + 24) = v3 == result;
    unsigned char *v5 = 1;
    if (v3 == result) {
      return result;
    }
  }
  if (v4)
  {
    int v6 = *(unsigned __int8 *)(v4 + 24);
    uint64_t v5 = (unsigned char *)(v4 + 24);
    if (!v6) {
      goto LABEL_3;
    }
  }
  if (*(uint64_t **)v2 == a2)
  {
    uint64_t v12 = a2[1];
    *(void *)uint64_t v2 = v12;
    if (v12)
    {
      *(void *)(v12 + 16) = v2;
      unint64_t v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(void *)(v2 + 16) = a2;
    unint64_t v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((unsigned char *)a2 + 24) = 1;
  *((unsigned char *)v3 + 24) = 0;
  uint64_t v13 = (uint64_t *)v3[1];
  uint64_t v14 = *v13;
  v3[1] = *v13;
  if (v14) {
    *(void *)(v14 + 16) = v3;
  }
  v13[2] = v3[2];
  *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v13;
  *uint64_t v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

double sub_21948D1E4(uint64_t a1, int a2)
{
  *(void *)a1 = &unk_26CAD62F0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 20) = 0;
  *(_WORD *)(a1 + 28) = 2;
  *(_DWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 180) = 0u;
  *(unsigned char *)(a1 + 196) = 0;
  *(_WORD *)(a1 + 204) = 0;
  *(_DWORD *)(a1 + 228) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(unsigned char *)(a1 + 224) = 0;
  *(_WORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 236) = 0u;
  *(unsigned char *)(a1 + 252) = 0;
  *(_WORD *)(a1 + 260) = 0;
  *(_DWORD *)(a1 + 284) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_WORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 292) = 0u;
  *(unsigned char *)(a1 + 308) = 0;
  *(_WORD *)(a1 + 316) = 0;
  *(_DWORD *)(a1 + 340) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(unsigned char *)(a1 + 336) = 0;
  *(_WORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 348) = 0u;
  *(unsigned char *)(a1 + 364) = 0;
  *(_WORD *)(a1 + 372) = 0;
  *(_DWORD *)(a1 + 396) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(unsigned char *)(a1 + 392) = 0;
  *(_WORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 420) = 0;
  *(_OWORD *)(a1 + 404) = 0u;
  *(_WORD *)(a1 + 428) = 0;
  *(_DWORD *)(a1 + 452) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(unsigned char *)(a1 + 448) = 0;
  *(_WORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 460) = 0u;
  *(unsigned char *)(a1 + 476) = 0;
  *(_WORD *)(a1 + 484) = 0;
  *(_DWORD *)(a1 + 508) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(unsigned char *)(a1 + 504) = 0;
  *(_WORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 532) = 0;
  *(_OWORD *)(a1 + 516) = 0u;
  *(_WORD *)(a1 + 540) = 0;
  *(_DWORD *)(a1 + 564) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(unsigned char *)(a1 + 560) = 0;
  *(_WORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 572) = 0u;
  *(unsigned char *)(a1 + 588) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_WORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 660) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 680) = xmmword_21950BF20;
  *(_OWORD *)(a1 + 696) = xmmword_21950BF30;
  *(_OWORD *)(a1 + 712) = xmmword_21950BF40;
  *(_OWORD *)(a1 + 728) = xmmword_21950BF50;
  *(_DWORD *)(a1 + 744) = 4;
  *(_WORD *)(a1 + 748) = 5;
  *(void *)(a1 + 752) = 0xFFFF0000003FLL;
  *(_OWORD *)(a1 + 760) = xmmword_21950BF60;
  *(void *)(a1 + 776) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 784) = 511;
  *(void *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(unsigned char *)(a1 + 816) = 21;
  *(void *)(a1 + 824) = 0;
  if (a2 != 6)
  {
    sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 57, "0 && \"unsupported platform\"", (void (*)(void *))sub_2194FF9C0);
    abort();
  }
  *(unsigned char *)(a1 + 816) = 21;
  *(void *)(a1 + 824) = 0x22D000000;
  *(void *)&double result = 0x22D300000;
  *(_OWORD *)(a1 + 656) = xmmword_21950C260;
  return result;
}

void sub_21948D45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (*a10)
  {
    *(void *)(v10 + 800) = *a10;
    MEMORY[0x21D48B5A0]();
  }
  sub_219482F84(v11);
  nullsub_14(v10);
  _Unwind_Resume(a1);
}

BOOL sub_21948D494(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 68) != 2) {
    return 0;
  }
  *(_WORD *)(a2 + 50) = sub_2194E223C(*(_DWORD *)a2, *(_DWORD *)(a2 + 4));
  BOOL result = sub_219493C54(a1 + 680, a2);
  if (result)
  {
    BOOL result = sub_21948D5DC(a1, a2);
    if (result)
    {
      *(void *)(a1 + 8) = *(void *)a2;
      unsigned int v5 = *(unsigned __int16 *)(a2 + 50);
      *(_WORD *)(a1 + 16) = v5;
      int v6 = *(_DWORD *)(a2 + 72);
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 24) = v6;
      int v7 = *(unsigned __int8 *)(a2 + 68);
      *(unsigned char *)(a1 + 28) = v7;
      sub_21949287C(a1 + 32, v5, v7);
      if (*(unsigned char *)(a1 + 28) == 2)
      {
        int v8 = *(char **)(a1 + 792);
        unint64_t v9 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(void *)(a1 + 800) - (void)v8) >> 6);
        if (*(char **)(a1 + 800) == v8)
        {
          sub_21949020C((char **)(a1 + 792), 1 - v9);
          int v8 = *(char **)(a1 + 792);
        }
        else if (v9 >= 2)
        {
          *(void *)(a1 + 800) = v8 + 3776;
        }
        sub_219492354(a1 + 680, a2, v8, a1 + 600, a1 + 32);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_21948D5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a2 + 92)) {
    return *(void *)(a2 + 168) == 0;
  }
  if (*(unsigned char *)(a2 + 165) != 1)
  {
    unsigned int v11 = dword_267C2B2F8;
    uint64_t v10 = &unk_267C2A7C4;
LABEL_15:
    size_t v13 = v11;
    CVPixelBufferRef pixelBuffer = 0;
    unsigned int v14 = sub_2194837A0((_DWORD *)(a1 + 600), (uint64_t)v10, v11);
    if (!sub_219501564(v14, 1u, 0x4C303038u, &pixelBuffer, 16, 16, 0, 1, 0))
    {
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      unint64_t v16 = pixelBuffer;
      uint64_t v17 = operator new(0x20uLL);
      *uint64_t v17 = &unk_26CAD6260;
      v17[1] = MEMORY[0x263F03DE8];
      v17[2] = v16;
      *((_DWORD *)v17 + 6) = 0;
      unint64_t v21 = (uint8_t *)v17;
      BaseAddress = CVPixelBufferGetBaseAddress(v16);
      memcpy(BaseAddress, v10, v13);
      *(void *)(a1 + 600) = pixelBuffer;
      *(unsigned char *)(a1 + 29) = 1;
      if (!v21) {
        sub_2194867AC();
      }
      (*(void (**)(uint8_t *))(*(void *)v21 + 48))(v21);
      if (v21 == buf)
      {
        (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
      }
      else if (v21)
      {
        (*(void (**)(void))(*(void *)v21 + 40))();
      }
    }
    unint64_t v15 = *(__CVBuffer **)(a2 + 168);
    if (v15)
    {
      if (*(unsigned char *)(a2 + 165) == 1)
      {
        CVPixelBufferUnlockBaseAddress(v15, 0);
        unint64_t v15 = *(__CVBuffer **)(a2 + 168);
      }
      CVPixelBufferRelease(v15);
    }
    return 1;
  }
  uint64_t v4 = *(__CVBuffer **)(a2 + 168);
  if (v4)
  {
    int BytesPerRow = CVPixelBufferGetBytesPerRow(v4);
    int Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 168));
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Lacc config and metadata received\n", buf, 2u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 168));
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = Width;
      _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "width = %d", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 168));
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v8;
      _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "height = %d", buf, 8u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a2 + 168));
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "stride = %d", buf, 8u);
    }
    CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(a2 + 168), 0);
    uint64_t v10 = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a2 + 168));
    unsigned int v11 = Height * BytesPerRow;
    goto LABEL_15;
  }
  return 1;
}

void sub_21948D970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2194838AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21948D984(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_21947E028(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21948D9A0()
{
  return 3712;
}

uint64_t sub_21948D9A8()
{
  return 3776;
}

uint64_t sub_21948D9B0()
{
  return 1832;
}

double sub_21948D9B8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 792);
  unsigned int v7 = *(unsigned __int16 *)(a1 + 16);
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);

  *(void *)&double result = sub_21948DA44(v6, v7, v8, a2, a3, (void *)(a1 + 32)).n128_u64[0];
  return result;
}

__n128 sub_21948DA44(uint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, void *a6)
{
  if (a2)
  {
    uint64_t v9 = 0;
    char v10 = 0;
    int v11 = 0;
    uint64_t v12 = 0;
    uint64_t v29 = a2;
    do
    {
      uint64_t v13 = 3 << (v10 & 0xFE);
      if ((v13 & *(_DWORD *)(a1 + 400)) != 0)
      {
        uint64_t v14 = *a6 + v9;
        int v15 = sub_2194E2288(a4, v12);
        int v16 = sub_2194E2288(a5, v12);
        v11 += sub_2194C023C(v14, v15, v16, v11);
      }
      if ((v13 & *(_DWORD *)(a1 + 404)) != 0)
      {
        uint64_t v17 = a6[9] + v9;
        int v18 = sub_2194E2288(a4, v12);
        int v19 = sub_2194E2288(a5, v12);
        v11 += sub_2194C0214(v17, v18, v19, v11);
      }
      ++v12;
      v10 += 2;
      v9 += 28;
    }
    while (v29 != v12);
  }
  else
  {
    int v11 = 0;
  }
  if (*(_DWORD *)(a1 + 840))
  {
    uint64_t v20 = a6;
    v11 += sub_2194C02DC(0x186A00u, v11, 64, (uint64_t)(a6 + 32));
    if (!*(_DWORD *)(a1 + 408)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v20 = a6;
  if (*(_DWORD *)(a1 + 408)) {
LABEL_11:
  }
    v11 += sub_2194C02DC(8 * *(_DWORD *)(a1 + 652), v11, 64, (uint64_t)v20 + 284);
LABEL_12:
  uint64_t v21 = *(void *)(a1 + 832);
  if (v21)
  {
    int v22 = sub_2194C028C(72 * *(_DWORD *)(a1 + 652), v11, (uint64_t)v20 + 172) + v11;
    int v11 = sub_2194C028C(72 * *(_DWORD *)(a1 + 652), v22, (uint64_t)(v20 + 18)) + v22;
    uint64_t v21 = *(void *)(a1 + 832);
  }
  unsigned int v23 = (v21 >> 2) & 3;
  if (v23)
  {
    if (v23 == 1)
    {
      int v24 = 40;
    }
    else
    {
      if (v23 != 2) {
        sub_2195045A0();
      }
      int v24 = 24;
    }
    int v25 = sub_2194C028C(*(_DWORD *)(a1 + 652) * v24, v11, (uint64_t)v20 + 228) + v11;
    int v11 = sub_2194C028C(*(_DWORD *)(a1 + 652) * v24, v25, (uint64_t)(v20 + 25)) + v25;
  }
  int v26 = sub_2194C0260(v20[15], (a3 + 63) & 0xFFFFFFC0, 1, v11, 8) + v11;
  if (*((unsigned char *)v20 + 340))
  {
    *((_DWORD *)v20 + 89) = v26;
    v26 += *((_DWORD *)v20 + 87) * *((_DWORD *)v20 + 88);
  }
  if (*((unsigned char *)v20 + 368))
  {
    *((_DWORD *)v20 + 96) = v26;
    v20[41] = *(void *)((char *)v20 + 356);
    __n128 result = *(__n128 *)((char *)v20 + 340);
    *(__n128 *)(v20 + 39) = result;
    *((unsigned char *)v20 + 332) = 0;
    *((_DWORD *)v20 + 84) = 0;
  }
  return result;
}

uint64_t sub_21948DCEC(uint64_t a1, int a2)
{
  return ((8 * a2 + 63) & 0xFFFFFFC0) + ((4 * a2 + 63) & 0xFFFFFFC0) + 576;
}

void *sub_21948DD10(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  if (a4 != 8) {
    sub_2195045D8();
  }
  if (a3 || (uint64_t v4 = *(const void **)(a1 + 792), *(void *)(a1 + 800) - (void)v4 != 3776)) {
    sub_219502C64();
  }
  int v5 = *(unsigned __int8 *)(a1 + 816);
  *a2 = -1;
  a2[1] = v5;
  a2[3] = 3776;

  return memcpy(a2 + 4, v4, 0xEC0uLL);
}

uint64_t sub_21948DD7C(unsigned int *a1, _DWORD *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7)
{
  if (a7) {
    sub_219504610();
  }
  size_t v13 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 56))(a1);
  int v14 = a1[6];

  return sub_21948DE1C(a2, v13, a3, a4, a5, a6, v14, a1 + 8);
}

uint64_t sub_21948DE1C(_DWORD *a1, size_t a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7, unsigned int *a8)
{
  bzero(a1, a2);
  *a1 = -1;
  a1[1] = a3 | 0x80000000;
  *((void *)a1 + 1) = 0;
  a1[38] |= 0x7FFFFFFFu;
  a1[59] |= 0x7FFFFFFFu;
  a1[80] |= 0x7FFFFFFFu;
  a1[101] |= 0x7FFFFFFFu;
  a1[122] |= 0x7FFFFFFFu;
  a1[143] |= 0x7FFFFFFFu;
  a1[164] |= 0x7FFFFFFFu;
  a1[185] |= 0x7FFFFFFFu;
  a1[206] |= 0x7FFFFFFFu;
  a1[227] |= 0x7FFFFFFFu;
  a1[248] |= 0x7FFFFFFFu;
  a1[269] |= 0x7FFFFFFFu;
  a1[290] |= 0x7FFFFFFFu;
  a1[311] |= 0x7FFFFFFFu;
  a1[332] |= 0x7FFFFFFFu;
  a1[353] |= 0x7FFFFFFFu;
  a1[374] |= 0x7FFFFFFFu;
  a1[395] |= 0x7FFFFFFFu;
  a1[416] |= 0x7FFFFFFFu;
  a1[437] |= 0x7FFFFFFFu;
  uint64_t v15 = *((void *)a8 + 1) - *(void *)a8;
  *((void *)a1 + 18) = 0x100000014;
  if (((0x6DB6DB6DB6DB6DB7 * (v15 >> 2)) & 0xFFFFFFFFFFFFFFFELL) != 4) {
    sub_219502D0C();
  }
  uint64_t result = sub_2194BFF28((uint64_t)(a1 + 80), a4, a5, a6, 8, 0, 0);
  uint64_t v17 = *(unsigned char **)a8;
  if (**(unsigned char **)a8)
  {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 101), *((_DWORD *)v17 + 1), *((_DWORD *)v17 + 2), *((_DWORD *)v17 + 3), 8, 1, *((_DWORD *)v17 + 4) + a7);
    uint64_t v17 = *(unsigned char **)a8;
  }
  if (v17[28])
  {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 122), *((_DWORD *)v17 + 8), *((_DWORD *)v17 + 9), *((_DWORD *)v17 + 10), 8, 1, *((_DWORD *)v17 + 11) + a7);
    uint64_t v17 = *(unsigned char **)a8;
  }
  if (v17[56])
  {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 143), *((_DWORD *)v17 + 15), *((_DWORD *)v17 + 16), *((_DWORD *)v17 + 17), 8, 1, *((_DWORD *)v17 + 18) + a7);
    uint64_t v17 = *(unsigned char **)a8;
  }
  if (v17[84]) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 164), *((_DWORD *)v17 + 22), *((_DWORD *)v17 + 23), *((_DWORD *)v17 + 24), 8, 1, *((_DWORD *)v17 + 25) + a7);
  }
  uint64_t v18 = *((void *)a8 + 9);
  if (*(unsigned char *)v18)
  {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 101), *(_DWORD *)(v18 + 4), *(_DWORD *)(v18 + 8), *(_DWORD *)(v18 + 12), 4, 1, *(_DWORD *)(v18 + 16) + a7);
    uint64_t v18 = *((void *)a8 + 9);
  }
  if (*(unsigned char *)(v18 + 28))
  {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 122), *(_DWORD *)(v18 + 32), *(_DWORD *)(v18 + 36), *(_DWORD *)(v18 + 40), 4, 1, *(_DWORD *)(v18 + 44) + a7);
    uint64_t v18 = *((void *)a8 + 9);
  }
  if (*(unsigned char *)(v18 + 56))
  {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 143), *(_DWORD *)(v18 + 60), *(_DWORD *)(v18 + 64), *(_DWORD *)(v18 + 68), 4, 1, *(_DWORD *)(v18 + 72) + a7);
    uint64_t v18 = *((void *)a8 + 9);
  }
  if (*(unsigned char *)(v18 + 84)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 164), *(_DWORD *)(v18 + 88), *(_DWORD *)(v18 + 92), *(_DWORD *)(v18 + 96), 4, 1, *(_DWORD *)(v18 + 100) + a7);
  }
  if (v15 == 140)
  {
    if (*(unsigned char *)(*(void *)a8 + 112)) {
      uint64_t result = sub_2194BFF28((uint64_t)(a1 + 185), *(_DWORD *)(*(void *)a8 + 116), *(_DWORD *)(*(void *)a8 + 120), *(_DWORD *)(*(void *)a8 + 124), 8, 1, *(_DWORD *)(*(void *)a8 + 128) + a7);
    }
    uint64_t v19 = *((void *)a8 + 9);
    if (*(unsigned char *)(v19 + 112)) {
      uint64_t result = sub_2194BFF28((uint64_t)(a1 + 185), *(_DWORD *)(v19 + 116), *(_DWORD *)(v19 + 120), *(_DWORD *)(v19 + 124), 4, 1, *(_DWORD *)(v19 + 128) + a7);
    }
  }
  uint64_t v20 = *((void *)a8 + 15);
  if (*(unsigned char *)v20) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 437), *(_DWORD *)(v20 + 4), *(_DWORD *)(v20 + 8), *(_DWORD *)(v20 + 12), 8, 1, *(_DWORD *)(v20 + 16) + a7);
  }
  if (*((unsigned char *)a8 + 256)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 206), a8[65], a8[66], a8[67], 8, 1, a8[68] + a7);
  }
  if (*((unsigned char *)a8 + 284)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 227), a8[72], a8[73], a8[74], 8, 1, a8[75] + a7);
  }
  if (*((unsigned char *)a8 + 144)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 206), a8[37], a8[38], a8[39], 8, 1, a8[40] + a7);
  }
  if (*((unsigned char *)a8 + 172)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 227), a8[44], a8[45], a8[46], 8, 1, a8[47] + a7);
  }
  if (*((unsigned char *)a8 + 200)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 248), a8[51], a8[52], a8[53], 8, 1, a8[54] + a7);
  }
  if (*((unsigned char *)a8 + 228)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 269), a8[58], a8[59], a8[60], 8, 1, a8[61] + a7);
  }
  if (*((unsigned char *)a8 + 340)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 290), a8[86], a8[87], a8[88], 8, 1, a8[89] + a7);
  }
  if (*((unsigned char *)a8 + 312)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 59), a8[79], a8[80], a8[81], 8, 2, a8[82] + a7);
  }
  if (*((unsigned char *)a8 + 368)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 374), a8[93], a8[94], a8[95], 8, 1, a8[96] + a7);
  }
  if (*((unsigned char *)a8 + 452)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 38), a8[114], a8[115], a8[116], 8, 3, a8[117]);
  }
  if (*((unsigned char *)a8 + 480))
  {
    unsigned int v21 = a8[121];
    unsigned int v22 = a8[122];
    unsigned int v23 = a8[123];
    int v24 = a8[124];
    return sub_2194BFF28((uint64_t)(a1 + 311), v21, v22, v23, 8, 3, v24);
  }
  return result;
}

__n128 sub_21948E3AC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  *(_OWORD *)(a3 + 92) = *(_OWORD *)((char *)a2 + 100);
  uint64_t v4 = *a2;
  *(_WORD *)(a3 + 8) = *((_WORD *)a2 + 4);
  *(void *)a3 = v4;
  uint64_t v5 = *(uint64_t *)((char *)a2 + 10);
  *(_WORD *)(a3 + 18) = *((_WORD *)a2 + 9);
  *(void *)(a3 + 10) = v5;
  uint64_t v6 = *(uint64_t *)((char *)a2 + 20);
  *(_WORD *)(a3 + 28) = *((_WORD *)a2 + 14);
  *(void *)(a3 + 20) = v6;
  uint64_t v7 = *(uint64_t *)((char *)a2 + 30);
  *(_WORD *)(a3 + 38) = *((_WORD *)a2 + 19);
  *(void *)(a3 + 30) = v7;
  uint64_t v8 = a2[5];
  *(_WORD *)(a3 + 48) = *((_WORD *)a2 + 24);
  *(void *)(a3 + 40) = v8;
  long long v9 = *(_OWORD *)((char *)a2 + 52);
  long long v10 = *(_OWORD *)((char *)a2 + 68);
  *(void *)(a3 + 84) = *(uint64_t *)((char *)a2 + 84);
  *(_OWORD *)(a3 + 68) = v10;
  *(_OWORD *)(a3 + 52) = v9;
  long long v11 = *(_OWORD *)((char *)a2 + 134);
  *(_WORD *)(a3 + 124) = *((_WORD *)a2 + 75);
  *(_OWORD *)(a3 + 108) = v11;
  long long v12 = *(_OWORD *)((char *)a2 + 116);
  *(_WORD *)(a3 + 142) = *((_WORD *)a2 + 66);
  *(_OWORD *)(a3 + 126) = v12;
  long long v13 = *(_OWORD *)(a2 + 165);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(a2 + 163);
  *(_OWORD *)(a3 + 160) = v13;
  int v14 = (uint16x4_t *)(a2 + 50);
  do
  {
    uint64_t v15 = *(uint32x4_t **)(a3 + 240 + v3);
    uint32x4_t v16 = vmovl_u16(v14[-14]);
    *uint64_t v15 = vmovl_u16(v14[-15]);
    v15[1] = v16;
    uint32x4_t v17 = vmovl_u16(v14[-12]);
    v15[2] = vmovl_u16(v14[-13]);
    v15[3] = v17;
    uint32x4_t v18 = vmovl_u16(v14[-10]);
    v15[4] = vmovl_u16(v14[-11]);
    v15[5] = v18;
    uint32x4_t v19 = vmovl_u16(v14[-8]);
    v15[6] = vmovl_u16(v14[-9]);
    v15[7] = v19;
    uint32x4_t v20 = vmovl_u16(v14[-6]);
    v15[8] = vmovl_u16(v14[-7]);
    v15[9] = v20;
    uint32x4_t v21 = vmovl_u16(v14[-4]);
    v15[10] = vmovl_u16(v14[-5]);
    v15[11] = v21;
    uint32x4_t v22 = vmovl_u16(v14[-2]);
    v15[12] = vmovl_u16(v14[-3]);
    v15[13] = v22;
    uint32x4_t v23 = vmovl_u16(v14[-1]);
    uint32x4_t v24 = vmovl_u16(*v14);
    v3 += 24;
    v14 += 16;
    v15[14] = v23;
    v15[15] = v24;
  }
  while (v3 != 192);
  *(_WORD *)(a3 + 176) = *((_WORD *)a2 + 668);
  *(_DWORD *)(a3 + 436) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a3 + 180) = *((_OWORD *)a2 + 100);
  *(_OWORD *)(a3 + 196) = *((_OWORD *)a2 + 101);
  *(_OWORD *)(a3 + 212) = *((_OWORD *)a2 + 102);
  *(void *)(a3 + 228) = a2[206];
  *(_DWORD *)(a3 + 236) = *((_DWORD *)a2 + 414);
  *(_DWORD *)(a3 + 432) = *((_DWORD *)a2 + 857);
  __n128 result = *(__n128 *)((char *)a2 + 1660);
  long long v26 = *(_OWORD *)((char *)a2 + 1676);
  *(_DWORD *)(a3 + 476) = *((_DWORD *)a2 + 423);
  *(__n128 *)(a3 + 444) = result;
  *(_OWORD *)(a3 + 460) = v26;
  return result;
}

uint64_t sub_21948E544(uint64_t a1, int a2, unsigned int a3)
{
  switch(a2)
  {
    case 0:
      uint64_t result = *(void *)(a1 + 32) + 28 * a3;
      break;
    case 1:
      if (*(unsigned char *)(a1 + 28) != 1) {
        sub_219504680();
      }
      uint64_t result = *(void *)(a1 + 56) + 28 * a3;
      break;
    case 2:
      if (*(unsigned char *)(a1 + 28) != 1) {
        sub_2195046B8();
      }
      uint64_t result = *(void *)(a1 + 80) + 28 * a3;
      break;
    case 3:
      uint64_t result = *(void *)(a1 + 104) + 28 * a3;
      break;
    case 4:
      if (*(unsigned char *)(a1 + 28) != 1) {
        sub_2195046F0();
      }
      uint64_t result = *(void *)(a1 + 128) + 28 * a3;
      break;
    case 5:
      int v4 = *(unsigned __int8 *)(a1 + 28);
      if (v4 != 1 && (a3 || v4 != 2)) {
        sub_219504728();
      }
      uint64_t result = *(void *)(a1 + 152) + 28 * a3;
      break;
    case 6:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_219504798();
      }
      if (a3) {
        sub_219504760();
      }
      uint64_t result = a1 + 176;
      break;
    case 7:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_219504808();
      }
      if (a3) {
        sub_2195047D0();
      }
      uint64_t result = a1 + 204;
      break;
    case 8:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_219504878();
      }
      if (a3) {
        sub_219504840();
      }
      uint64_t result = a1 + 232;
      break;
    case 9:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_2195048E8();
      }
      if (a3) {
        sub_2195048B0();
      }
      uint64_t result = a1 + 260;
      break;
    case 10:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_219504958();
      }
      if (a3) {
        sub_219504920();
      }
      uint64_t result = a1 + 288;
      break;
    case 11:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_2195049C8();
      }
      if (a3) {
        sub_219504990();
      }
      uint64_t result = a1 + 316;
      break;
    case 12:
      if (a3) {
        sub_219504A00();
      }
      uint64_t result = a1 + 372;
      break;
    case 13:
      if (a3) {
        sub_219504A38();
      }
      uint64_t result = a1 + 400;
      break;
    default:
      sub_219504648();
  }
  return result;
}

uint64_t sub_21948E77C(uint64_t result, int32x4_t *a2)
{
  if (*(unsigned char *)(result + 28) != 2) {
    sub_219504A70();
  }
  uint64_t v2 = *(unsigned __int16 *)(result + 16);
  uint64_t v3 = 2 * v2 - 2;
  if (2 * v2 != 2)
  {
    uint64_t v4 = *(void *)(result + 792);
    if (v3 < 0x10)
    {
      unint64_t v5 = 0;
LABEL_8:
      uint64_t v11 = v5 - 2 * v2 + 2;
      long long v12 = (__int16 *)(v4 + 2 * v5 + 1050);
      long long v13 = &a2->i16[4 * v5];
      do
      {
        __int16 v14 = *v13;
        v13 += 4;
        v12[9] = v14;
        *v12++ = v14;
      }
      while (!__CFADD__(v11++, 1));
      return result;
    }
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v6 = (int16x8_t *)(v4 + 1084);
    uint64_t v7 = a2 + 4;
    unint64_t v8 = v3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v9 = vuzp1q_s16((int16x8_t)vuzp1q_s32(v7[-4], v7[-3]), (int16x8_t)vuzp1q_s32(v7[-2], v7[-1]));
      int16x8_t v10 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v7, v7[1]), (int16x8_t)vuzp1q_s32(v7[2], v7[3]));
      v6[-1] = v9;
      int16x8_t *v6 = v10;
      *(int16x8_t *)((char *)v6 - 34) = v9;
      *(int16x8_t *)((char *)v6 - 18) = v10;
      v6 += 2;
      v7 += 8;
      v8 -= 16;
    }
    while (v8);
    if (v5 != v3) {
      goto LABEL_8;
    }
  }
  return result;
}

void sub_21948E848()
{
}

__n128 sub_21948E880@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2 = *(void **)(a1 + 792);
  uint64_t v3 = v2[106];
  v4.n128_u64[0] = v3;
  v4.n128_u64[1] = HIDWORD(v3);
  __n128 v5 = v4;
  uint64_t v6 = v2[107];
  v4.n128_u64[0] = v6;
  v4.n128_u64[1] = HIDWORD(v6);
  *a2 = v5;
  a2[1] = v4;
  v5.n128_u64[0] = v2[108];
  v4.n128_u64[0] = v5.n128_u32[0];
  v4.n128_u64[1] = v5.n128_u32[1];
  __n128 result = v4;
  uint64_t v8 = v2[109];
  v4.n128_u64[0] = v8;
  v4.n128_u64[1] = HIDWORD(v8);
  a2[2] = result;
  a2[3] = v4;
  return result;
}

uint64_t sub_21948E8B0(uint64_t a1)
{
  return *(void *)(a1 + 600);
}

uint64_t sub_21948E8B8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 29);
}

uint64_t sub_21948E8C0(uint64_t result, int a2)
{
  if (*(unsigned char *)(result + 28) != 2) {
    sub_219504AA8();
  }
  *(_DWORD *)(*(void *)(result + 792) + 1284) = a2;
  return result;
}

void sub_21948E8EC(uint64_t a1, _DWORD *a2)
{
  *a2 = 1;
}

double sub_21948E8F8(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  *(_DWORD *)(a3 + 8) = 1;
  *(_DWORD *)(a3 + 12) = v3;
  if (*a2 == 1)
  {
    int v6 = 0x20000;
    unsigned int v4 = 0x80000;
    uint64_t v5 = 0x200000;
    goto LABEL_5;
  }
  if (*a2 == 2)
  {
    unsigned int v4 = 98304;
    uint64_t v5 = 0x400000;
    int v6 = 98304;
LABEL_5:
    *(void *)&double result = v4 | 0x10000000000000;
    *(void *)a3 = *(void *)(a1 + 824) + v5;
    *(_DWORD *)(a3 + 16) = 0;
    *(double *)(a3 + 20) = result;
    *(_DWORD *)(a3 + 28) = v6;
    return result;
  }
  double result = 0.0;
  *(void *)a3 = -1;
  *(_DWORD *)(a3 + 16) = -1;
  *(void *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 28) = 0;
  return result;
}

double sub_21948E980(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    sub_2195031DC();
  }
  *(_OWORD *)a2 = xmmword_21950C270;
  *(void *)&double result = 0xEC000000000;
  *(void *)(a2 + 16) = 0xEC000000000;
  return result;
}

double sub_21948E9B4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  *(void *)&double result = sub_21948E9D0(a2 + (unint64_t)*(unsigned int *)(a2 + 4) + 16, a3, 1, 1).u64[0];
  return result;
}

uint32x4_t sub_21948E9D0(uint64_t a1, unsigned __int8 *a2, int a3, char a4)
{
  if ((sub_2194C6360() & 1) == 0) {
    sub_219504AE0();
  }
  if (!a3 || (a4 & 1) == 0) {
    sub_2195032BC();
  }
  unsigned int v8 = *a2;
  if (v8 >= 4) {
    sub_219503284();
  }
  unsigned int v9 = *(_DWORD *)(a1 + 4) & 0xFFFFFFFC | v8;
  *(_DWORD *)(a1 + 4) = v9;
  *(_DWORD *)(a1 + 64) &= ~1u;
  *(_DWORD *)(a1 + 128) |= 1u;
  *(_DWORD *)(a1 + 1216) |= 1u;
  unsigned int v10 = a2[2];
  if (v10 >= 3) {
    goto LABEL_32;
  }
  if (a2[6] >= 3u) {
    goto LABEL_33;
  }
  unsigned int v11 = a2[3];
  if (v11 > 2) {
    goto LABEL_32;
  }
  if (a2[7] > 2u) {
    goto LABEL_33;
  }
  if (a2[4] > 2u) {
    goto LABEL_32;
  }
  if (a2[8] > 2u) {
    goto LABEL_33;
  }
  if (a2[5] > 2u) {
LABEL_32:
  }
    sub_21950324C();
  if (a2[9] > 2u) {
LABEL_33:
  }
    sub_219503214();
  if (a2[2])
  {
    unsigned int v9 = v9 & 0xFFFFFFF3 | (4 * (v10 & 3));
    *(_DWORD *)(a1 + 4) = v9;
    *(void *)(a1 + 3680) = *((void *)a2 + 162);
    *(_DWORD *)(a1 + 3688) = *((_DWORD *)a2 + 326);
    unsigned int v11 = a2[3];
  }
  if (v11)
  {
    unsigned int v9 = v9 & 0xFFFFFFCF | (16 * (v11 & 3));
    *(_DWORD *)(a1 + 4) = v9;
    *(_DWORD *)(a1 + 3692) = *((_DWORD *)a2 + 327);
    *(void *)(a1 + 3696) = *((void *)a2 + 164);
  }
  if (a2[4])
  {
    unsigned int v9 = v9 & 0xFFFFFF3F | ((a2[4] & 3) << 6);
    *(_DWORD *)(a1 + 4) = v9;
    *(void *)(a1 + 3704) = *((void *)a2 + 165);
    *(_DWORD *)(a1 + 3712) = *((_DWORD *)a2 + 332);
  }
  if (a2[5])
  {
    unsigned int v9 = v9 & 0xFFFFFCFF | ((a2[5] & 3) << 8);
    *(_DWORD *)(a1 + 4) = v9;
    *(_DWORD *)(a1 + 3716) = *((_DWORD *)a2 + 333);
    *(void *)(a1 + 3720) = *((void *)a2 + 167);
  }
  if (a2[6])
  {
    unsigned int v9 = v9 & 0xFFFFF3FF | ((a2[6] & 3) << 10);
    *(_DWORD *)(a1 + 4) = v9;
    *(void *)(a1 + 3728) = *((void *)a2 + 168);
    *(_DWORD *)(a1 + 3736) = *((_DWORD *)a2 + 338);
  }
  if (a2[7])
  {
    unsigned int v9 = v9 & 0xFFFFCFFF | ((a2[7] & 3) << 12);
    *(_DWORD *)(a1 + 4) = v9;
    *(_DWORD *)(a1 + 3740) = *((_DWORD *)a2 + 339);
    *(void *)(a1 + 3744) = *((void *)a2 + 170);
  }
  if (a2[8])
  {
    unsigned int v9 = v9 & 0xFFFF3FFF | ((a2[8] & 3) << 14);
    *(_DWORD *)(a1 + 4) = v9;
    *(void *)(a1 + 3752) = *((void *)a2 + 171);
    *(_DWORD *)(a1 + 3760) = *((_DWORD *)a2 + 344);
  }
  if (a2[9])
  {
    *(_DWORD *)(a1 + 4) = v9 & 0xFFFCFFFF | ((a2[9] & 3) << 16);
    *(_DWORD *)(a1 + 3764) = *((_DWORD *)a2 + 345);
    *(void *)(a1 + 3768) = *((void *)a2 + 173);
  }
  uint64_t v12 = 1344;
  for (uint64_t i = 2368; i != 2496; i += 4)
  {
    *(_DWORD *)(a1 + i) = *(_DWORD *)&a2[i - 2356];
    __int16 v14 = (_DWORD *)(a1 + v12);
    _DWORD *v14 = *(_DWORD *)&a2[v12 - 1200];
    v14[1] = *(_DWORD *)&a2[v12 - 1196];
    v14[2] = *(_DWORD *)&a2[v12 - 1192];
    v14[3] = *(_DWORD *)&a2[v12 - 1188];
    v14[4] = *(_DWORD *)&a2[v12 - 1184];
    v14[5] = *(_DWORD *)&a2[v12 - 1180];
    v14[6] = *(_DWORD *)&a2[v12 - 1176];
    v14[7] = *(_DWORD *)&a2[v12 - 1172];
    v12 += 32;
  }
  *(_DWORD *)(a1 + 2512) = *((_DWORD *)a2 + 292);
  *(_DWORD *)(a1 + 2660) = *((_DWORD *)a2 + 293);
  *(_DWORD *)(a1 + 2664) = *((_DWORD *)a2 + 294);
  *(_DWORD *)(a1 + 2668) = *((_DWORD *)a2 + 295);
  *(_DWORD *)(a1 + 2516) = a2[1184];
  uint8x8_t v15 = *(uint8x8_t *)(a2 + 1188);
  *(uint8x8_t *)(a1 + 2520) = v15;
  *(_DWORD *)(a1 + 2528) = *((_DWORD *)a2 + 300);
  *(_DWORD *)(a1 + 2544) = a2[1216];
  *(_DWORD *)(a1 + 2564) = *((_DWORD *)a2 + 306);
  *(_DWORD *)(a1 + 2580) = *((_DWORD *)a2 + 310);
  *(_DWORD *)(a1 + 2596) = a2[1256];
  *(_DWORD *)(a1 + 2616) = *((_DWORD *)a2 + 316);
  *(_DWORD *)(a1 + 2532) = *((_DWORD *)a2 + 301);
  *(_DWORD *)(a1 + 2548) = a2[1217];
  *(_DWORD *)(a1 + 2568) = *((_DWORD *)a2 + 307);
  *(_DWORD *)(a1 + 2584) = *((_DWORD *)a2 + 311);
  *(_DWORD *)(a1 + 2600) = a2[1257];
  *(_DWORD *)(a1 + 2620) = *((_DWORD *)a2 + 317);
  *(_DWORD *)(a1 + 2536) = *((_DWORD *)a2 + 302);
  *(_DWORD *)(a1 + 2552) = a2[1218];
  *(_DWORD *)(a1 + 2572) = *((_DWORD *)a2 + 308);
  *(_DWORD *)(a1 + 2588) = *((_DWORD *)a2 + 312);
  *(_DWORD *)(a1 + 2604) = a2[1258];
  *(_DWORD *)(a1 + 2624) = *((_DWORD *)a2 + 318);
  *(_DWORD *)(a1 + 2540) = *((_DWORD *)a2 + 303);
  *(_DWORD *)(a1 + 2556) = a2[1219];
  *(_DWORD *)(a1 + 2576) = *((_DWORD *)a2 + 309);
  *(_DWORD *)(a1 + 2592) = *((_DWORD *)a2 + 313);
  *(_DWORD *)(a1 + 2608) = a2[1259];
  int v16 = *((_DWORD *)a2 + 323);
  int v17 = *((_DWORD *)a2 + 320);
  int v18 = a2[1276];
  *(_DWORD *)(a1 + 2560) = a2[1220];
  *(_DWORD *)(a1 + 2612) = a2[1260];
  *(_DWORD *)(a1 + 2628) = v18;
  *(_DWORD *)(a1 + 2632) = v17;
  v15.i32[0] = *((_DWORD *)a2 + 321);
  uint32x4_t result = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v15));
  *(uint32x4_t *)(a1 + 2636) = result;
  *(_DWORD *)(a1 + 2652) = a2[1288];
  *(_DWORD *)(a1 + 2656) = v16;
  return result;
}

double sub_21948ED84(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    sub_21950332C();
  }
  *(_OWORD *)a2 = xmmword_21950BFA0;
  *(void *)(a2 + 16) = 0;
  *(void *)&double result = 0x100000014;
  *(void *)(a2 + 152) = 0x100000014;
  *(_DWORD *)(a2 + 160) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 244) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 328) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 412) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 496) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 580) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 664) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 748) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 832) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 916) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1000) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1084) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1168) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1252) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1336) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1420) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1504) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1588) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1672) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1756) |= 0x7FFFFFFFu;
  return result;
}

void sub_21948EEAC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = a2 + *(unsigned int *)(a2 + 4);
  if (*(unsigned __int8 *)(v4 + 144) <= *(unsigned __int8 *)(a3 + 2)) {
    sub_219503364();
  }
  if (*(unsigned char *)a3)
  {
    uint64_t v5 = v4 + 84 * *(unsigned __int8 *)(a3 + 2);
    *(_DWORD *)(v5 + 152) = *(_DWORD *)(v5 + 152) & 0x80000000 | a4 & 0x7FFFFFFF;
    *(_WORD *)(v5 + 166) = *(_WORD *)(a3 + 4);
    int v6 = *(_DWORD *)(a3 + 24);
    *(_WORD *)(v5 + 164) = *(_DWORD *)(a3 + 20);
    *(_WORD *)(v5 + 162) = v6;
    int v7 = *(_DWORD *)(a3 + 32);
    *(_WORD *)(v5 + 160) = *(_DWORD *)(a3 + 28);
    *(_DWORD *)(v5 + 156) = v7;
  }
}

uint64_t sub_21948EF18(uint64_t a1, _OWORD *a2, unint64_t a3)
{
  long long v3 = a2[197];
  v8[4] = a2[196];
  v8[5] = v3;
  long long v4 = a2[199];
  v8[6] = a2[198];
  v8[7] = v4;
  long long v5 = a2[193];
  v8[0] = a2[192];
  v8[1] = v5;
  long long v6 = a2[195];
  v8[2] = a2[194];
  void v8[3] = v6;
  if (a3 >= 0x20) {
    sub_21950339C();
  }
  return *((unsigned int *)v8 + a3);
}

void *sub_21948EF7C(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  memcpy(v9, (const void *)(a2 + 2048), sizeof(v9));
  if (!a4) {
    sub_2195033D4();
  }
  if (a3 >= 0x20) {
    sub_21950347C();
  }
  if (!a5) {
    sub_21950340C();
  }
  if (a5 >= 9) {
    sub_219503444();
  }
  return memcpy(a4, &v9[2 * a3], 4 * a5);
}

void *sub_21948F004(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  memcpy(v9, (const void *)(a2 + 2048), sizeof(v9));
  if (!a4) {
    sub_2195034B4();
  }
  if (a3 >= 0x20) {
    sub_21950355C();
  }
  if (!a5) {
    sub_2195034EC();
  }
  if (a5 >= 5) {
    sub_219503524();
  }
  return memcpy(a4, &v9[2 * a3], 8 * a5);
}

uint64_t sub_21948F08C(uint64_t a1, _DWORD *a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (!a4) {
    sub_219503594();
  }
  *a5 = 0;
  if (a3 <= 0x7F)
  {
    int v5 = *(_DWORD *)((char *)a2 + (a3 & 0xFFFFFFFFFFFFFFFCLL) + 3072);
LABEL_7:
    *(_DWORD *)a4 = v5;
    *a5 = 4;
    return 1;
  }
  if (a3 == 2004)
  {
    *a5 = 4;
    int v6 = a2[818];
LABEL_11:
    *(_DWORD *)a4 = v6;
    return 1;
  }
  if (a3 == 2000)
  {
    int v5 = a2[853];
    goto LABEL_7;
  }
  if (a3 - 2008 <= 0xB)
  {
    *a5 = 4;
    int v6 = *(_DWORD *)((char *)a2 + ((a3 + 1268) & 0xFFFFFFFC));
    goto LABEL_11;
  }
  if (a3 - 6000 <= 0x3FF)
  {
    *a5 = 32;
    unsigned int v8 = (_OWORD *)((char *)a2 + ((a3 - 6000) & 0xFFFFFFFFFFFFFFE0) + ((8 * a3 - 14016) & 0xFFFFFFE0));
    long long v9 = v8[1];
    *(_OWORD *)a4 = *v8;
    *(_OWORD *)(a4 + 16) = v9;
    return 1;
  }
  uint64_t result = 0;
  *((void *)&v10 + 1) = a3;
  *(void *)&long long v10 = a3 - 10000;
  switch((unint64_t)(v10 >> 2))
  {
    case 0uLL:
      *a5 = 4;
      int v6 = a2[830];
      goto LABEL_11;
    case 1uLL:
      *a5 = 4;
      int v6 = a2[832];
      goto LABEL_11;
    case 2uLL:
      *a5 = 4;
      int v6 = a2[836];
      goto LABEL_11;
    case 0xDuLL:
      *a5 = 4;
      int v6 = a2[828];
      goto LABEL_11;
    case 0xEuLL:
      *a5 = 4;
      int v6 = a2[829];
      goto LABEL_11;
    case 0xFuLL:
      *a5 = 4;
      int v6 = a2[831];
      goto LABEL_11;
    case 0x10uLL:
      *a5 = 4;
      int v6 = a2[833];
      goto LABEL_11;
    case 0x11uLL:
      *a5 = 4;
      int v6 = a2[834];
      goto LABEL_11;
    case 0x12uLL:
      *a5 = 4;
      int v6 = a2[835];
      goto LABEL_11;
    case 0x13uLL:
      *a5 = 4;
      int v6 = a2[837];
      goto LABEL_11;
    case 0x14uLL:
      *a5 = 4;
      int v6 = a2[838];
      goto LABEL_11;
    case 0x15uLL:
      *a5 = 4;
      int v6 = a2[839];
      goto LABEL_11;
    default:
      return result;
  }
  return result;
}

uint64_t sub_21948F2AC(uint64_t a1, _DWORD *a2)
{
  return sub_21948F2B4(a2);
}

uint64_t sub_21948F2B4(_DWORD *a1)
{
  *(void *)((char *)&v58[2] + 4) = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503F30();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_2195052A4();
  }
  sub_2194885C0((uint64_t)v46, 16);
  uint64_t v1 = 0;
  uint64_t v2 = a1 + 519;
  do
  {
    long long v3 = (char *)v46 + *(void *)(v46[0] - 24);
    if (*((_DWORD *)v3 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(v46[0] - 24)));
      long long v4 = std::locale::use_facet(&v50, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
      std::locale::~locale(&v50);
    }
    *((_DWORD *)v3 + 36) = 48;
    sub_2194889DC(v47, (uint64_t)"GRF ", 4);
    int v5 = (void *)std::ostream::operator<<();
    int v6 = sub_2194889DC(v5, (uint64_t)" = 0x", 5);
    uint64_t v7 = *v6;
    *(_DWORD *)((char *)v6 + *(void *)(*v6 - 24) + 8) = *(_DWORD *)((unsigned char *)v6 + *(void *)(*v6 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v6 + *(void *)(v7 - 24) + 24) = 8;
    unsigned int v8 = (void *)std::ostream::operator<<();
    long long v9 = sub_2194889DC(v8, (uint64_t)"\t\t", 2);
    *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 8) = *(_DWORD *)((unsigned char *)v9 + *(void *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 2;
    long long v10 = (void *)std::ostream::operator<<();
    sub_2194889DC(v10, (uint64_t)" = (", 4);
    unsigned int v11 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v12 = *v11;
    *(_DWORD *)((char *)v11 + *(void *)(*v11 - 24) + 8) = *(_DWORD *)((unsigned char *)v11 + *(void *)(*v11 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v11 + *(void *)(v12 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    long long v13 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v14 = *v13;
    *(_DWORD *)((char *)v13 + *(void *)(*v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v13 + *(void *)(v14 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    uint8x8_t v15 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v16 = *v15;
    *(_DWORD *)((char *)v15 + *(void *)(*v15 - 24) + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v15 + *(void *)(v16 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    int v17 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v18 = *v17;
    *(_DWORD *)((char *)v17 + *(void *)(*v17 - 24) + 8) = *(_DWORD *)((unsigned char *)v17 + *(void *)(*v17 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v17 + *(void *)(v18 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    uint32x4_t v19 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v20 = *v19;
    *(_DWORD *)((char *)v19 + *(void *)(*v19 - 24) + 8) = *(_DWORD *)((unsigned char *)v19 + *(void *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v19 + *(void *)(v20 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    uint32x4_t v21 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v22 = *v21;
    *(_DWORD *)((char *)v21 + *(void *)(*v21 - 24) + 8) = *(_DWORD *)((unsigned char *)v21 + *(void *)(*v21 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v21 + *(void *)(v22 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    uint32x4_t v23 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v24 = *v23;
    *(_DWORD *)((char *)v23 + *(void *)(*v23 - 24) + 8) = *(_DWORD *)((unsigned char *)v23 + *(void *)(*v23 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v23 + *(void *)(v24 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    int v25 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v26 = *v25;
    *(_DWORD *)((char *)v25 + *(void *)(*v25 - 24) + 8) = *(_DWORD *)((unsigned char *)v25 + *(void *)(*v25 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v25 + *(void *)(v26 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)")", 1);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str();
      sub_219503E40(&v45, &v44, buf, v58);
    }
    BYTE1(v56) = 0;
    LOBYTE(v50.__locale_) = 0;
    std::stringbuf::str();
    if (SBYTE1(v56) < 0) {
      operator delete(v50.__locale_);
    }
    ++v1;
    v2 += 8;
  }
  while (v1 != 32);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    int v29 = a1[800];
    int v30 = a1[807];
    v50.__locale_ = (std::locale::__imp *)67109888;
    __int16 v51 = 1024;
    int v52 = v29;
    __int16 v53 = 1024;
    int v54 = 0;
    __int16 v55 = 1024;
    int v56 = v30;
    _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
LABEL_15:
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      goto LABEL_57;
    }
  }
  else if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    goto LABEL_15;
  }
  int v31 = a1[801];
  int v32 = a1[808];
  v50.__locale_ = (std::locale::__imp *)0x104000400;
  __int16 v51 = 1024;
  int v52 = v31;
  __int16 v53 = 1024;
  int v54 = 1;
  __int16 v55 = 1024;
  int v56 = v32;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_16:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v33 = a1[802];
  int v34 = a1[809];
  v50.__locale_ = (std::locale::__imp *)0x204000400;
  __int16 v51 = 1024;
  int v52 = v33;
  __int16 v53 = 1024;
  int v54 = 2;
  __int16 v55 = 1024;
  int v56 = v34;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_17:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v35 = a1[803];
  int v36 = a1[810];
  v50.__locale_ = (std::locale::__imp *)0x304000400;
  __int16 v51 = 1024;
  int v52 = v35;
  __int16 v53 = 1024;
  int v54 = 3;
  __int16 v55 = 1024;
  int v56 = v36;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_18:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_19;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v37 = a1[804];
  int v38 = a1[811];
  v50.__locale_ = (std::locale::__imp *)0x404000400;
  __int16 v51 = 1024;
  int v52 = v37;
  __int16 v53 = 1024;
  int v54 = 4;
  __int16 v55 = 1024;
  int v56 = v38;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_19:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    goto LABEL_61;
  }
LABEL_60:
  int v39 = a1[805];
  int v40 = a1[812];
  v50.__locale_ = (std::locale::__imp *)0x504000400;
  __int16 v51 = 1024;
  int v52 = v39;
  __int16 v53 = 1024;
  int v54 = 5;
  __int16 v55 = 1024;
  int v56 = v40;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_20:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_61:
  int v41 = a1[806];
  int v42 = a1[813];
  v50.__locale_ = (std::locale::__imp *)0x604000400;
  __int16 v51 = 1024;
  int v52 = v41;
  __int16 v53 = 1024;
  int v54 = 6;
  __int16 v55 = 1024;
  int v56 = v42;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
LABEL_21:
  }
    sub_21950520C();
LABEL_22:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219505184();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_2195050FC();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219505088();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219505014();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219504FA0();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219504F2C();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219504EB8();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219504E44();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219504DD0();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219504D5C();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219504CE8();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219504C74();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219504C00();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219504B8C();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219504B18();
  }
  v46[0] = *MEMORY[0x263F8C2B8];
  uint64_t v27 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v46 + *(void *)(v46[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v47[0] = v27;
  v47[1] = MEMORY[0x263F8C318] + 16;
  if (v48 < 0) {
    operator delete((void *)v47[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21D48B530](&v49);
}

void sub_21949005C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2194888A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_219490070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::locale::~locale((std::locale *)(v6 - 160));
  sub_2194888A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_219490090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (*(char *)(v6 - 137) < 0)
  {
    operator delete(*(void **)(v6 - 160));
    sub_2194888A4((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_2194888A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_219490108(void *a1)
{
  sub_219490148(a1);

  JUMPOUT(0x21D48B5B0);
}

uint64_t sub_219490140()
{
  return 4095;
}

uint64_t sub_219490148(void *a1)
{
  *a1 = &unk_26CAD62F0;
  uint64_t v2 = a1[99];
  if (v2)
  {
    a1[100] = v2;
    MEMORY[0x21D48B5A0]();
  }
  long long v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  long long v4 = (void *)a1[16];
  if (v4)
  {
    a1[17] = v4;
    operator delete(v4);
  }
  int v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[10];
  if (v6)
  {
    a1[11] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[7];
  if (v7)
  {
    a1[8] = v7;
    operator delete(v7);
  }
  unsigned int v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }

  return nullsub_14(a1);
}

void sub_21949020C(char **a1, unint64_t a2)
{
  int v5 = a1[1];
  long long v4 = a1[2];
  if (0xCBEEA4E1A08AD8F3 * ((v4 - v5) >> 6) >= a2)
  {
    if (a2)
    {
      size_t v12 = 3776 * ((3776 * a2 - 3776) / 0xEC0) + 3776;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    unint64_t v7 = 0xCBEEA4E1A08AD8F3 * ((v5 - *a1) >> 6);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x115B1E5F75270DLL) {
      sub_219486AE4();
    }
    unint64_t v9 = 0xCBEEA4E1A08AD8F3 * ((v4 - v6) >> 6);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x8AD8F2FBA9386) {
      unint64_t v10 = 0x115B1E5F75270DLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x115B1E5F75270DLL) {
        sub_219486AFC();
      }
      unsigned int v11 = (char *)operator new(3776 * v10, (std::align_val_t)0x40uLL);
    }
    else
    {
      unsigned int v11 = 0;
    }
    long long v13 = &v11[3776 * v7];
    uint64_t v14 = &v11[3776 * v10];
    size_t v15 = 3776 * ((3776 * a2 - 3776) / 0xEC0) + 3776;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v5 -= 3776;
        v13 -= 3776;
        memcpy(v13, v5, 0xEC0uLL);
      }
      while (v5 != v6);
      int v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      JUMPOUT(0x21D48B5A0);
    }
  }
}

uint64_t sub_2194903F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5, char a6)
{
  uint64_t v153 = *MEMORY[0x263EF8340];
  uint64_t result = kdebug_trace();
  if (*(unsigned char *)(a3 + 89) | *(unsigned char *)(a3 + 92))
  {
    if (!*(unsigned char *)(a3 + 92))
    {
      if (*(_DWORD *)(a1 + 184))
      {
        unint64_t v20 = 0;
        uint32x4_t v21 = (void *)(*(void *)(a1 + 192) + 64);
        do
        {
          *v21 &= ~0x8000000000000000;
          v21 += 9;
          ++v20;
        }
        while (v20 < *(unsigned int *)(a1 + 184));
      }
      if (*(_DWORD *)(a1 + 160))
      {
        unint64_t v22 = 0;
        uint32x4_t v23 = (void *)(*(void *)(a1 + 168) + 64);
        do
        {
          *v23 |= 0x8000000000000000;
          v23 += 9;
          ++v22;
        }
        while (v22 < *(unsigned int *)(a1 + 160));
      }
      sub_219491308(a1, (unsigned int *)a3);
      if (*(unsigned char *)(a3 + 76)) {
        BOOL v24 = *(unsigned char *)(a3 + 90) == 0;
      }
      else {
        BOOL v24 = 1;
      }
      if (v24) {
        goto LABEL_170;
      }
LABEL_21:
      uint64_t v25 = *(unsigned __int16 *)(a3 + 50);
      uint64_t v26 = a3;
      uint64_t v27 = *(unsigned __int16 *)(a3 + 20);
      *(void *)&long long v143 = v27;
      *((void *)&v143 + 1) = v27;
      *(void *)&long long v144 = v27;
      *((void *)&v144 + 1) = v27;
      *(void *)&long long v145 = v27;
      *((void *)&v145 + 1) = v27;
      *(void *)&long long v146 = v27;
      *((void *)&v146 + 1) = v27;
      (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(void *)a2 + 96))(v142, a2);
      sub_2194E2040((uint64_t)v142, *(void *)(a1 + 296) + 240, 2 * v25, v27, (uint64_t)&v143, *(float *)(v26 + 80));
      (*(void (**)(uint64_t, long long *))(*(void *)a2 + 112))(a2, &v143);
LABEL_170:
      (*(void (**)(uint64_t, void))(*(void *)a2 + 136))(a2, *(unsigned int *)(*(void *)(a1 + 296) + 180));
      return kdebug_trace();
    }
    uint64_t v134 = a1;
    long long v13 = (uint64_t **)(a4 + 8);
    sub_21948CFDC(a4, *(void **)(a4 + 8));
    *(void *)a4 = a4 + 8;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 8) = 0;
    if (*(unsigned char *)(a3 + 68) != 2) {
      sub_2195053C0();
    }
    uint64_t v130 = a5;
    uint64_t v123 = a2;
    if (!*(unsigned char *)(a3 + 76)) {
      sub_219505318();
    }
    unint64_t v14 = *(unsigned int *)(v134 + 184);
    uint64_t v15 = *(unsigned int *)(v134 + 160);
    unsigned int v16 = *(_DWORD *)(v134 + 176);
    unsigned int v17 = *(_DWORD *)(v134 + 152);
    if (v16 >= v17 && *(_DWORD *)(a3 + 24)) {
      sub_219505388();
    }
    uint64_t v127 = a3;
    if (v17 != *(_DWORD *)(v134 + 180) + v16) {
      sub_219505350();
    }
    uint64_t v18 = (v15 + v14);
    uint32x4_t v19 = (int *)operator new(0x204uLL);
    bzero(v19, 0x204uLL);
    if (v18)
    {
      uint64_t v124 = (char *)operator new(2 * v18);
      bzero(v124, 2 * v18);
      if (!v14) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v124 = 0;
      if (!v14) {
        goto LABEL_26;
      }
    }
    unint64_t v28 = (unint64_t *)(*(void *)(v134 + 192) + 64);
    int v29 = v124 + 1;
    unint64_t v30 = v14;
    do
    {
      unint64_t v31 = *v28;
      unsigned int v32 = ((*v28 >> 44) & 0xF) + (*v28 >> 63);
      *(v29 - 1) = (*v28 >> 37) & 7;
      *int v29 = v32;
      *v28 &= ~0x8000000000000000;
      v28 += 9;
      if (v32 - 1 >= 8)
      {
        sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCreteUtils.cpp", 148, "scale > 0 && scale <= kMaxNumOfHwScalesMinus2", (void (*)(void *))sub_2194FF9C0);
        abort();
      }
      uint64_t v33 = 8 * ((v31 >> 37) & 7) + v32;
      ++v19[v33];
      v29 += 2;
      --v30;
    }
    while (v30);
LABEL_26:
    if (v15)
    {
      int v34 = &v124[2 * v14 + 1];
      int v35 = (void *)(*(void *)(v134 + 168) + 64);
      do
      {
        int v36 = (*v35 >> 37) & 7 | 8;
        int v37 = ((*v35 >> 44) & 0xF) + (*v35 >> 63);
        *(v34 - 1) = (*v35 >> 37) & 7 | 8;
        *int v34 = v37;
        *v35 |= 0x8000000000000000;
        v35 += 9;
        if ((v37 - 1) >= 8)
        {
          sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCreteUtils.cpp", 167, "scale > 0 && scale <= kMaxNumOfHwScalesMinus2", (void (*)(void *))sub_2194FF9C0);
          abort();
        }
        ++v19[v37 + 8 * v36];
        v34 += 2;
        --v15;
      }
      while (v15);
    }
    int v38 = *v19;
    for (uint64_t i = 1; i != 129; ++i)
    {
      v38 += v19[i];
      v19[i] = v38;
    }
    unsigned int v147 = 0;
    int v148 = 0;
    unsigned int v149 = 0;
    if (v18)
    {
      unsigned int v147 = (char *)operator new(8 * v18);
      unsigned int v149 = &v147[8 * v18];
      bzero(v147, 8 * v18);
      int v148 = v149;
    }
    uint64_t __sz = 8 * v18;
    char v128 = a6;
    uint64_t v133 = v18;
    *(void *)&long long v40 = -1;
    *((void *)&v40 + 1) = -1;
    long long v143 = v40;
    long long v144 = v40;
    long long v145 = v40;
    long long v146 = v40;
    memset(v142, 0, sizeof(v142));
    unint64_t v41 = *(char *)(v127 + 132);
    if (v41 > 2) {
      unsigned int v42 = 96;
    }
    else {
      unsigned int v42 = dword_21950C2BC[v41];
    }
    float v43 = *(uint64_t **)(v134 + 328);
    unsigned int v44 = *(_DWORD *)(v134 + 324);
    unsigned int v45 = sub_21949531C(*(_DWORD *)(v127 + 24));
    if (v45)
    {
      size_t v46 = 4 * v45;
      uint64_t v132 = (char *)operator new(v46);
      bzero(v132, v46);
      int v131 = (char *)operator new(v46);
      bzero(v131, v46);
      uint64_t v47 = v42;
      if (v42 > v44) {
        goto LABEL_55;
      }
    }
    else
    {
      int v131 = 0;
      uint64_t v132 = 0;
      uint64_t v47 = v42;
      if (v42 > v44) {
        goto LABEL_55;
      }
    }
    uint64_t v48 = 0;
    int v49 = 0;
    int v50 = 0;
    LODWORD(v51) = v44 / v42;
    if (v44 / v42 <= 1) {
      uint64_t v51 = 1;
    }
    else {
      uint64_t v51 = v51;
    }
    int v52 = v43;
    do
    {
      uint64_t v53 = *v52;
      if ((~*v52 & 0x3FFF0000000000) == 0) {
        break;
      }
      int v52 = (uint64_t *)((char *)v52 + 4 * v47);
      BOOL v54 = v53 >= 0;
      if (v53 < 0) {
        int v55 = v49;
      }
      else {
        int v55 = v50;
      }
      int v56 = v132;
      if (v54) {
        ++v50;
      }
      else {
        int v56 = v131;
      }
      if (!v54) {
        ++v49;
      }
      *(_DWORD *)&v56[4 * v55] = v48++;
    }
    while (v51 != v48);
LABEL_55:
    if (v18)
    {
      int v135 = operator new(__sz);
      bzero(v135, __sz);
      unint64_t v57 = 0;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      uint64_t v60 = v147;
      unint64_t v61 = (unsigned __int8 *)(v124 + 1);
      do
      {
        uint64_t v66 = *(v61 - 1);
        uint64_t v67 = &v19[8 * v66 + *v61];
        uint64_t v68 = *(v67 - 1);
        *(v67 - 1) = v68 + 1;
        *(void *)&v60[8 * v68] = v57;
        int v65 = *((_DWORD *)&v143 + v66);
        if (v65 == -1 || (uint64_t v62 = *((void *)v142 + v66), v62 == 32))
        {
          uint64_t v62 = 0;
          float v63 = &v132[4 * v58];
          uint64_t v64 = &v131[4 * v59];
          if (v57 < v14) {
            ++v58;
          }
          else {
            ++v59;
          }
          if (v57 >= v14) {
            float v63 = v64;
          }
          int v65 = *(_DWORD *)v63;
          *((_DWORD *)&v143 + v66) = v65;
        }
        v135[v68] = v62 + v65 * v47 + 64;
        v61 += 2;
        *((void *)v142 + v66) = v62 + 1;
        ++v57;
      }
      while (v18 != v57);
      uint64_t v69 = 0;
      int8x16_t v140 = 0;
      uint64_t v141 = 0;
      unsigned long long v139 = &v140;
      unsigned int v70 = *((_DWORD *)v43 + *v135);
LABEL_81:
      uint64_t v74 = &v140;
      uint64_t v75 = &v140;
      if (!v70)
      {
LABEL_178:
        sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCreteUtils.cpp", 281, "assigned_tid != 0 && \"All TIDs are expected to be assigned by the LACC program\"", (void (*)(void *))sub_2194FF9C0);
LABEL_175:
        abort();
      }
LABEL_82:
      uint64_t v77 = operator new(0x20uLL);
      v77[7] = v70;
      *(void *)uint64_t v77 = 0;
      *((void *)v77 + 1) = 0;
      *((void *)v77 + 2) = v75;
      *uint64_t v74 = (uint64_t *)v77;
      if (*v139)
      {
        unsigned long long v139 = (uint64_t **)*v139;
        uint64_t v77 = *v74;
      }
      sub_21948D030(v140, (uint64_t *)v77);
      ++v141;
      while (1)
      {
        uint64_t v78 = *v13;
        uint64_t v79 = (uint64_t **)(a4 + 8);
        long long v80 = (uint64_t **)(a4 + 8);
        if (*v13)
        {
          while (1)
          {
            while (1)
            {
              long long v80 = (uint64_t **)v78;
              signed int v81 = *((_DWORD *)v78 + 7);
              if ((int)v70 >= v81) {
                break;
              }
              uint64_t v78 = *v80;
              uint64_t v79 = v80;
              if (!*v80) {
                goto LABEL_92;
              }
            }
            if (v81 >= (int)v70) {
              break;
            }
            uint64_t v78 = v80[1];
            if (!v78)
            {
              uint64_t v79 = v80 + 1;
              goto LABEL_92;
            }
          }
          size_t v82 = v80;
        }
        else
        {
LABEL_92:
          size_t v82 = operator new(0x28uLL);
          v82[7] = v70;
          v82[8] = 0;
          *(void *)size_t v82 = 0;
          *((void *)v82 + 1) = 0;
          *((void *)v82 + 2) = v80;
          *uint64_t v79 = (uint64_t *)v82;
          uint64_t v83 = **(void **)a4;
          v84 = (uint64_t *)v82;
          if (v83)
          {
            *(void *)a4 = v83;
            v84 = *v79;
          }
          sub_21948D030(*(uint64_t **)(a4 + 8), v84);
          ++*(void *)(a4 + 16);
        }
        v82[8] = v69;
        sub_2194A699C(v134, v70, v69++);
        if (v69 == v133) {
          break;
        }
        uint64_t v73 = v140;
        unsigned int v70 = *((_DWORD *)v43 + v135[v69]);
        if (!v140) {
          goto LABEL_81;
        }
        uint64_t v71 = v140;
        do
        {
          unsigned int v72 = *((_DWORD *)v71 + 7);
          if (v70 >= v72)
          {
            if (v72 >= v70)
            {
              sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCreteUtils.cpp", 278, "!duplicate_tid && \"duplicate tid is unexpected\"", (void (*)(void *))sub_2194FF9C0);
              goto LABEL_175;
            }
            ++v71;
          }
          uint64_t v71 = (uint64_t *)*v71;
        }
        while (v71);
        if (!v70) {
          goto LABEL_178;
        }
        while (1)
        {
          while (1)
          {
            uint64_t v75 = (uint64_t **)v73;
            unsigned int v76 = *((_DWORD *)v73 + 7);
            if (v70 >= v76) {
              break;
            }
            uint64_t v73 = *v75;
            uint64_t v74 = v75;
            if (!*v75) {
              goto LABEL_82;
            }
          }
          if (v76 >= v70) {
            break;
          }
          uint64_t v73 = v75[1];
          if (!v73)
          {
            uint64_t v74 = v75 + 1;
            goto LABEL_82;
          }
        }
      }
    }
    else
    {
      int v135 = 0;
      int8x16_t v140 = 0;
      uint64_t v141 = 0;
      unsigned long long v139 = &v140;
    }
    if (v128)
    {
      int v85 = 0;
      goto LABEL_146;
    }
    uint64_t v129 = *(void *)(v134 + 344);
    unsigned int v86 = sub_2194952FC(*(_DWORD *)(v127 + 24));
    unsigned int v87 = v86;
    uint64_t v88 = *(unsigned int *)(v127 + 24);
    uint64_t v151 = 0;
    unsigned int v152 = 0;
    *(void *)buf = 0;
    if (v88)
    {
      unint64_t v89 = (char *)operator new(4 * v88);
      uint64_t v90 = &v89[4 * v88];
      *(void *)buf = v89;
      unsigned int v152 = v90;
      memset(v89, 255, 4 * v88);
      uint64_t v151 = v90;
      uint8x16_t v91 = (char *)operator new(4 * v88);
      __p = v91;
      int8x16_t v138 = &v91[4 * v88];
      memset(v91, 255, 4 * v88);
      int8x16_t v137 = v138;
      if (v87)
      {
LABEL_104:
        uint64_t v92 = 0;
        int v85 = 0;
        size_t __sza = v87;
        uint64_t v122 = "curr_idx < num_descs && \"invalid current index\"";
        while (1)
        {
          uint64_t v93 = (uint64_t *)(v129 + 16 * v92);
          unint64_t v94 = v93[1];
          if (v94 >> 61 == 7)
          {
            uint64_t v95 = *v93;
            if ((v94 & 0x1FFFFFFFFFFFFFFFLL) == 0x1FFFFFFFFFFFFFFFLL && v95 == -1)
            {
LABEL_142:
              uint8x16_t v91 = (char *)__p;
              if (__p) {
                goto LABEL_143;
              }
              goto LABEL_144;
            }
          }
          v97 = *v13;
          unsigned int v98 = (uint64_t **)(a4 + 8);
          v99 = (uint64_t **)(a4 + 8);
          if (*v13)
          {
            while (1)
            {
              while (1)
              {
                v99 = (uint64_t **)v97;
                int v100 = *((_DWORD *)v97 + 7);
                if (v100 <= (int)v94) {
                  break;
                }
                v97 = *v99;
                unsigned int v98 = v99;
                if (!*v99) {
                  goto LABEL_119;
                }
              }
              if (v100 >= (int)v94) {
                break;
              }
              v97 = v99[1];
              if (!v97)
              {
                unsigned int v98 = v99 + 1;
                goto LABEL_119;
              }
            }
            v101 = v99;
            int8x16_t v104 = v130[1];
            if (!v104)
            {
LABEL_105:
              ++v85;
              goto LABEL_106;
            }
          }
          else
          {
LABEL_119:
            v101 = operator new(0x28uLL);
            v101[7] = v94;
            v101[8] = 0;
            *(void *)v101 = 0;
            *((void *)v101 + 1) = 0;
            *((void *)v101 + 2) = v99;
            *unsigned int v98 = (uint64_t *)v101;
            uint64_t v102 = **(void **)a4;
            int8x16_t v103 = (uint64_t *)v101;
            if (v102)
            {
              *(void *)a4 = v102;
              int8x16_t v103 = *v98;
            }
            sub_21948D030(*(uint64_t **)(a4 + 8), v103);
            ++*(void *)(a4 + 16);
            int8x16_t v104 = v130[1];
            if (!v104) {
              goto LABEL_105;
            }
          }
          unsigned int v105 = v101[8];
          int8x16_t v106 = v104;
          while (1)
          {
            int v107 = *((_DWORD *)v106 + 7);
            if (v107 <= (int)v94) {
              break;
            }
LABEL_125:
            int8x16_t v106 = (uint64_t *)*v106;
            if (!v106) {
              goto LABEL_105;
            }
          }
          if (v107 < (int)v94) {
            break;
          }
          do
          {
            while (1)
            {
              unint64_t v108 = v104;
              int v109 = *((_DWORD *)v104 + 7);
              if (v109 > (int)v94) {
                break;
              }
              if (v109 >= (int)v94)
              {
                int8x16_t v111 = v108;
                if (v105 < v133) {
                  goto LABEL_140;
                }
LABEL_179:
                uint64_t v121 = 324;
LABEL_181:
                sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCreteUtils.cpp", v121, v122, (void (*)(void *))sub_2194FF9C0);
                abort();
              }
              int8x16_t v104 = (uint64_t *)v108[1];
              if (!v104)
              {
                int8x16_t v110 = (uint64_t **)(v108 + 1);
                goto LABEL_135;
              }
            }
            int8x16_t v104 = (uint64_t *)*v108;
          }
          while (*v108);
          int8x16_t v110 = (uint64_t **)v108;
LABEL_135:
          int8x16_t v111 = operator new(0x28uLL);
          v111[7] = v94;
          v111[8] = 0;
          *(void *)int8x16_t v111 = 0;
          *((void *)v111 + 1) = 0;
          *((void *)v111 + 2) = v108;
          *int8x16_t v110 = (uint64_t *)v111;
          int8x16_t v112 = (uint64_t *)**v130;
          uint64_t v113 = (uint64_t *)v111;
          if (v112)
          {
            *uint64_t v130 = v112;
            uint64_t v113 = *v110;
          }
          sub_21948D030(v130[1], v113);
          v130[2] = (uint64_t *)((char *)v130[2] + 1);
          if (v105 >= v133) {
            goto LABEL_179;
          }
LABEL_140:
          unsigned int v114 = v111[8];
          if (v114 >= *(_DWORD *)(v127 + 24))
          {
            uint64_t v121 = 325;
            uint64_t v122 = "prev_idx < config.maxNumberOfKeypoints && \"invalid prev index\"";
            goto LABEL_181;
          }
          sub_219492E0C((uint64_t *)buf, (uint64_t *)&__p, v105, v114, *(_DWORD *)(v129 + 16 * v92 + 8));
          sub_2194A6958(v134, v105, v114);
LABEL_106:
          if (++v92 == __sza) {
            goto LABEL_142;
          }
        }
        ++v106;
        goto LABEL_125;
      }
    }
    else
    {
      uint8x16_t v91 = 0;
      __p = 0;
      int8x16_t v137 = 0;
      int8x16_t v138 = 0;
      if (v86) {
        goto LABEL_104;
      }
    }
    int v85 = 0;
    if (v91)
    {
LABEL_143:
      int8x16_t v137 = v91;
      operator delete(v91);
    }
LABEL_144:
    if (*(void *)buf)
    {
      uint64_t v151 = *(char **)buf;
      operator delete(*(void **)buf);
    }
LABEL_146:
    sub_2194914FC(v134);
    sub_2194915D4(v134, &v147);
    uint64_t v115 = *v130;
    *uint64_t v130 = *(uint64_t **)a4;
    *(void *)a4 = v115;
    uint16x8_t v116 = v130[1];
    uint64_t v117 = v130[2];
    *(_OWORD *)(v130 + 1) = *(_OWORD *)(a4 + 8);
    *(void *)(a4 + 8) = v116;
    *(void *)(a4 + 16) = v117;
    if (v130[2]) {
      unsigned int v118 = (uint64_t **)(v130[1] + 2);
    }
    else {
      unsigned int v118 = v130;
    }
    *unsigned int v118 = (uint64_t *)(v130 + 1);
    uint64_t v119 = (void *)(*(void *)(a4 + 8) + 16);
    if (!v117) {
      uint64_t v119 = (void *)a4;
    }
    *uint64_t v119 = v13;
    if (*(_DWORD *)(v134 + 372) != *(_DWORD *)(*(void *)(v134 + 400) + 4))
    {
      sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCreteUtils.cpp", 341, "hw_data_handler.GetNumTids() == hw_data_handler.GetNumKeypoints() && \"Number of TIDs should match the number of KPs\"", (void (*)(void *))sub_2194FF9C0);
      abort();
    }
    a1 = v134;
    if (v85 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v85;
      _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "[AppleCVHWA] skipped %u matches potentially due to frame drop - matches correspond to new untracked features in dropped frame", buf, 8u);
    }
    sub_21948CFDC((uint64_t)&v139, v140);
    if (v135) {
      operator delete(v135);
    }
    a2 = v123;
    if (v131) {
      operator delete(v131);
    }
    if (v132) {
      operator delete(v132);
    }
    if (v147)
    {
      int v148 = v147;
      operator delete(v147);
    }
    if (v124) {
      operator delete(v124);
    }
    operator delete(v19);
    a3 = v127;
    if (*(unsigned char *)(v127 + 76)) {
      BOOL v120 = *(unsigned char *)(v127 + 90) == 0;
    }
    else {
      BOOL v120 = 1;
    }
    if (v120) {
      goto LABEL_170;
    }
    goto LABEL_21;
  }
  return result;
}

void sub_219491140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *__p,void *a21,uint64_t a22,uint64_t a23,char a24,void *a25)
{
  unint64_t v28 = *(void **)(v26 - 128);
  if (v28)
  {
    *(void *)(v26 - 120) = v28;
    operator delete(v28);
    sub_21948CFDC((uint64_t)&a24, a25);
    if (!__p)
    {
LABEL_3:
      int v29 = a16;
      if (!a16) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    sub_21948CFDC((uint64_t)&a24, a25);
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(__p);
  int v29 = a16;
  if (!a16)
  {
LABEL_4:
    unint64_t v30 = a17;
    if (!a17) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v29);
  unint64_t v30 = a17;
  if (!a17)
  {
LABEL_5:
    unint64_t v31 = *(void **)(v26 - 152);
    if (!v31) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v30);
  unint64_t v31 = *(void **)(v26 - 152);
  if (!v31)
  {
LABEL_6:
    unsigned int v32 = a11;
    if (!a11) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  *(void *)(v26 - 144) = v31;
  operator delete(v31);
  unsigned int v32 = a11;
  if (!a11)
  {
LABEL_7:
    operator delete(v25);
    _Unwind_Resume(a1);
  }
LABEL_13:
  operator delete(v32);
  operator delete(v25);
  _Unwind_Resume(a1);
}

void sub_219491308(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 176);
  unsigned int v3 = *(_DWORD *)(a1 + 152);
  if (v2 >= v3 && a2[6] != 0) {
    sub_2195042C0();
  }
  if (v3 != *(_DWORD *)(a1 + 180) + v2) {
    sub_219504288();
  }
  unint64_t v22 = 0;
  *(void *)uint32x4_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v7 = *(void *)(a1 + 168);
  sub_219497104(*(void *)(a1 + 192), *(unsigned int *)(a1 + 184), (char **)&v22);
  __p = 0;
  unint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_219497104(v7, *(unsigned int *)(a1 + 160), (char **)&__p);
  unint64_t v8 = *(void **)v23;
  unint64_t v9 = (char *)__p;
  unint64_t v10 = v20;
  if (__p != v20)
  {
    unint64_t v11 = ((*(void *)v23 - (void)v22) >> 3);
    unint64_t v12 = v20 - (unsigned char *)__p - 8;
    long long v13 = (char *)__p;
    if (v12 < 0x18) {
      goto LABEL_23;
    }
    uint64_t v14 = (v12 >> 3) + 1;
    long long v13 = (char *)__p + 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
    int64x2_t v15 = vdupq_n_s64(v11);
    unsigned int v16 = (int64x2_t *)((char *)__p + 16);
    uint64_t v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int64x2_t v18 = vaddq_s64(*v16, v15);
      v16[-1] = vaddq_s64(v16[-1], v15);
      *unsigned int v16 = v18;
      v16 += 2;
      v17 -= 4;
    }
    while (v17);
    if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      do
      {
        *(void *)v13 += v11;
        v13 += 8;
      }
      while (v13 != v10);
    }
  }
  sub_219491FA8((unint64_t *)&v22, v8, v9, v10, (v10 - v9) >> 3);
  if (__p)
  {
    unint64_t v20 = (char *)__p;
    operator delete(__p);
  }
  sub_2194914FC(a1);
  if (*((unsigned char *)a2 + 77)) {
    sub_2194918C8(*(void *)(a1 + 288), *(unsigned int *)(a1 + 284), *(void *)(a1 + 168), *(unsigned int *)(a1 + 160), *((unsigned __int16 *)a2 + 16), *((unsigned __int16 *)a2 + 17), *((unsigned __int16 *)a2 + 18), a2[6], *a2, a2[1], (char **)&v22);
  }
  sub_2194915D4(a1, &v22);
  if (v22)
  {
    *(void *)uint32x4_t v23 = v22;
    operator delete(v22);
  }
}

void sub_2194914A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2194914FC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 20) != 2) {
    sub_219504330();
  }
  if (!*(unsigned char *)(a1 + 385) && !*(unsigned char *)(a1 + 386)) {
    sub_2195042F8();
  }
  uint64_t result = (void *)sub_2194A3FE8(a1);
  uint64_t v3 = *(void *)(a1 + 192);
  if (result)
  {
    *(void *)(a1 + 288) = v3;
    *(_DWORD *)(a1 + 280) = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 284) = *(_DWORD *)(a1 + 184);
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    *(void *)(a1 + 176) = 0;
  }
  else
  {
    long long v4 = *(const void **)(a1 + 168);
    unsigned int v5 = *(_DWORD *)(a1 + 184);
    uint64_t v6 = *(unsigned int *)(a1 + 160);
    *(void *)(a1 + 288) = v3;
    *(_DWORD *)(a1 + 280) = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 284) = v6 + v5;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    if (v6)
    {
      return memcpy((void *)(v3 + 72 * v5), v4, 72 * v6);
    }
  }
  return result;
}

void sub_2194915D4(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 20) != 2) {
    sub_2195043A0();
  }
  unint64_t v3 = (*(_DWORD *)(a1 + 160) + *(_DWORD *)(a1 + 284));
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  unint64_t v6 = v5 >> 3;
  if (v5 >> 3 > v3) {
    sub_219504368();
  }
  uint64_t v33 = *(void *)(a1 + 288);
  uint64_t v32 = *(void *)(a1 + 168);
  uint64_t v7 = *(_OWORD **)(a1 + 144);
  if (v4 == *a2)
  {
    *(_DWORD *)(*(void *)(a1 + 400) + 4) = (unint64_t)v5 >> 3;
  }
  else
  {
    if ((unint64_t)v5 >= 0x5555555555555551) {
      sub_219486AE4();
    }
    int v29 = *(void **)(a1 + 128);
    unint64_t v30 = v4 - *a2;
    unint64_t v9 = (char *)operator new(24 * v6);
    unint64_t v10 = (v3 - 1);
    unint64_t __n = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v9, __n);
    uint64_t v11 = 0;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    __src = v9;
    unint64_t v12 = (float *)(v9 + 12);
    float32x2_t v13 = (float32x2_t)vdup_n_s32(0x3C800000u);
    do
    {
      unint64_t v17 = *(void *)(*a2 + 8 * v11);
      if (v17 > v10)
      {
        sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwIspDataHandler.h", 389, "idx[i] <= max_valid_idx", (void (*)(void *))sub_2194FF9C0);
        abort();
      }
      unint64_t v18 = *(unsigned int *)(a1 + 284);
      uint32x4_t v19 = (long long *)(v33 + 72 * v17);
      BOOL v20 = v17 >= v18;
      uint64_t v21 = (long long *)(v32 + 72 * (v17 - v18));
      if (v20) {
        unint64_t v22 = v21;
      }
      else {
        unint64_t v22 = v19;
      }
      uint64_t v23 = *((void *)v22 + 8);
      v24.i64[0] = v23;
      v24.i64[1] = (unint64_t)v23 >> 16;
      v25.i64[0] = 0xFFFFLL;
      v25.i64[1] = 0xFFFFLL;
      *(float32x2_t *)(v12 - 3) = vmul_f32(vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8(v24, v25))), v13);
      float v26 = pow(1.41421356, (float)((float)BYTE5(v23) * 0.0625));
      *((unsigned char *)v12 + 4) = v23 < 0;
      float v27 = (double)BYTE4(v23) * 3.14159265 * 0.0078125;
      *(v12 - 1) = v27;
      float *v12 = v26;
      v12[2] = (float)(HIWORD(v23) & 0x7FFF);
      if (*(unsigned char *)(a1 + 388))
      {
        sub_2194A69DC((unsigned __int8 *)v22, (uint64_t)v7);
      }
      else
      {
        long long v14 = *v22;
        long long v15 = v22[1];
        long long v16 = v22[3];
        v7[2] = v22[2];
        void v7[3] = v16;
        *uint64_t v7 = v14;
        v7[1] = v15;
      }
      ++v11;
      v7 += 4;
      v12 += 6;
    }
    while (v6 != v11);
    memcpy(v29, __src, __n);
    *(_DWORD *)(*(void *)(a1 + 400) + 4) = v30 >> 3;
    operator delete(__src);
  }
}

void sub_21949189C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2194918C8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unint64_t a9, unint64_t a10, char **a11)
{
  if (a5 != 1 || a6 != 1) {
    sub_219504448();
  }
  if (a7 <= 0) {
    sub_219504410();
  }
  unint64_t v11 = a2;
  unint64_t v12 = a11;
  uint64_t v13 = a4 + a2;
  if (a4 + a2 != (v12[1] - *v12) >> 3) {
    sub_2195043D8();
  }
  uint64_t v92 = a7;
  sub_21948B388(&__p, a7);
  if (v13)
  {
    uint64_t v15 = v13;
    uint64_t v16 = 0;
    unint64_t v88 = v11;
    uint64_t v89 = a3;
    do
    {
      while (1)
      {
        unint64_t v17 = *(void *)&(*v12)[8 * v16];
        uint64_t v18 = a1;
        if (v17 < v11)
        {
          unint64_t v19 = 0;
        }
        else
        {
          uint64_t v18 = a3;
          unint64_t v19 = v11;
        }
        unint64_t v20 = *(void *)(v18 + 72 * (v17 - v19) + 64);
        if (vcvtms_s32_f32((float)((float)WORD1(v20) / (float)a10) * 0.015625)
           + vcvtms_s32_f32((float)((float)(unsigned __int16)v20 / (float)a9) * 0.015625))
        {
          sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/include/VIO/Hardware/KeyPointAndDescriptorGeneratorUtils.h", 97, "bin_index == 0 && \"bin index should always be 0\"", (void (*)(void *))sub_2194FF9C0);
          abort();
        }
        float v21 = (float)((float)BYTE5(v20) * 0.0625) * 0.25;
        if (v21 > (float)(a7 - 1)) {
          float v21 = (float)(a7 - 1);
        }
        unint64_t v22 = (uint64_t *)((char *)__p + 24 * (int)vcvtms_s32_f32(v21));
        float v23 = (float)(HIWORD(v20) & 0x7FFF);
        int8x16_t v24 = v22 + 1;
        int8x16_t v25 = (char *)v22[1];
        unint64_t v26 = v22[2];
        if ((unint64_t)v25 >= v26) {
          break;
        }
        *(float *)int8x16_t v25 = v23;
        *((_DWORD *)v25 + 1) = v17;
        unint64_t v12 = a11;
        *int8x16_t v24 = (uint64_t)(v25 + 8);
        if (++v16 == v15) {
          goto LABEL_37;
        }
      }
      float v27 = (char *)*v22;
      uint64_t v28 = (uint64_t)&v25[-*v22];
      uint64_t v29 = v28 >> 3;
      unint64_t v30 = (v28 >> 3) + 1;
      if (v30 >> 61) {
        sub_219486AE4();
      }
      uint64_t v31 = v26 - (void)v27;
      if (v31 >> 2 > v30) {
        unint64_t v30 = v31 >> 2;
      }
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v30;
      }
      if (v32)
      {
        if (v32 >> 61) {
          sub_219486AFC();
        }
        unint64_t v33 = v32;
        int v34 = operator new(8 * v32);
        unint64_t v32 = v33;
        uint64_t v35 = (uint64_t)&v34[8 * v29];
        *(float *)uint64_t v35 = v23;
        *(_DWORD *)(v35 + 4) = v17;
        if (v25 != v27)
        {
LABEL_24:
          unint64_t v36 = v25 - 8 - v27;
          if (v36 < 0x58)
          {
            uint64_t v37 = v35;
            goto LABEL_32;
          }
          uint64_t v37 = v35;
          if ((unint64_t)(v25 - &v34[v28]) < 0x20) {
            goto LABEL_98;
          }
          uint64_t v38 = (v36 >> 3) + 1;
          uint64_t v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
          long long v40 = &v25[-v39];
          uint64_t v37 = v35 - v39;
          unint64_t v41 = &v34[8 * v29 - 16];
          unsigned int v42 = v25 - 16;
          uint64_t v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v44 = *(_OWORD *)v42;
            *(v41 - 1) = *((_OWORD *)v42 - 1);
            *unint64_t v41 = v44;
            v41 -= 2;
            v42 -= 32;
            v43 -= 4;
          }
          while (v43);
          int8x16_t v25 = v40;
          if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_98:
            do
            {
LABEL_32:
              uint64_t v45 = *((void *)v25 - 1);
              v25 -= 8;
              *(void *)(v37 - 8) = v45;
              v37 -= 8;
            }
            while (v25 != v27);
          }
          int8x16_t v25 = (char *)*v22;
          goto LABEL_34;
        }
      }
      else
      {
        int v34 = 0;
        uint64_t v35 = 8 * v29;
        *(float *)uint64_t v35 = v23;
        *(_DWORD *)(v35 + 4) = v17;
        if (v25 != v27) {
          goto LABEL_24;
        }
      }
      uint64_t v37 = v35;
LABEL_34:
      *unint64_t v22 = v37;
      uint64_t v46 = v35 + 8;
      *int8x16_t v24 = v35 + 8;
      v22[2] = (uint64_t)&v34[8 * v32];
      unint64_t v11 = v88;
      a3 = v89;
      if (v25) {
        operator delete(v25);
      }
      uint64_t v15 = v13;
      unint64_t v12 = a11;
      *int8x16_t v24 = v46;
      ++v16;
    }
    while (v16 != v13);
  }
LABEL_37:
  uint64_t v47 = *v12;
  v12[1] = *v12;
  unint64_t v91 = a8 / a7;
  unint64_t v48 = v91 * v92;
  if (v91 * v92 > (v12[2] - v47) >> 3)
  {
    if (v48 >> 61) {
      sub_219486AE4();
    }
    int v49 = (char *)operator new(8 * v48);
    float *v12 = v49;
    v12[1] = v49;
    v12[2] = &v49[8 * v48];
    if (v47) {
      operator delete(v47);
    }
  }
  for (uint64_t i = 0; i != v92; ++i)
  {
    uint64_t v51 = (char *)__p + 24 * i;
    int v52 = *(float **)v51;
    uint64_t v53 = (float *)*((void *)v51 + 1);
    unint64_t v54 = ((uint64_t)v53 - *(void *)v51) >> 3;
    if (v54 >= v91) {
      unint64_t v55 = a8 / a7;
    }
    else {
      unint64_t v55 = v54;
    }
    int v56 = &v52[2 * v55];
    if (v56 != v53) {
      sub_21948B608(v52, v56, v53);
    }
    if (v55)
    {
      uint64_t v57 = 0;
      uint64_t v58 = v12[1];
      while (1)
      {
        while (1)
        {
          uint64_t v59 = *(int *)(*((void *)__p + 3 * i) + 8 * v57 + 4);
          unint64_t v60 = (unint64_t)v12[2];
          if ((unint64_t)v58 >= v60) {
            break;
          }
          *(void *)uint64_t v58 = v59;
          v58 += 8;
          v12[1] = v58;
          if (++v57 == v55) {
            goto LABEL_42;
          }
        }
        unint64_t v61 = v55;
        uint64_t v62 = *v12;
        uint64_t v63 = v58 - *v12;
        uint64_t v64 = v63 >> 3;
        unint64_t v65 = (v63 >> 3) + 1;
        if (v65 >> 61) {
          sub_219486AE4();
        }
        uint64_t v66 = v60 - (void)v62;
        if (v66 >> 2 > v65) {
          unint64_t v65 = v66 >> 2;
        }
        unint64_t v67 = (unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v65;
        if (v67)
        {
          if (v67 >> 61) {
            sub_219486AFC();
          }
          uint64_t v68 = operator new(8 * v67);
          uint64_t v69 = &v68[8 * v64];
          *(void *)uint64_t v69 = v59;
          uint64_t v70 = (uint64_t)(v69 + 8);
          if (v58 == v62)
          {
LABEL_69:
            unint64_t v55 = v61;
            unint64_t v12 = a11;
            *a11 = v69;
            a11[1] = (char *)v70;
            a11[2] = &v68[8 * v67];
            if (!v62) {
              goto LABEL_66;
            }
LABEL_65:
            operator delete(v62);
            goto LABEL_66;
          }
        }
        else
        {
          uint64_t v68 = 0;
          uint64_t v69 = (char *)(8 * v64);
          *(void *)(8 * v64) = v59;
          uint64_t v70 = 8 * v64 + 8;
          if (v58 == v62) {
            goto LABEL_69;
          }
        }
        unint64_t v71 = v58 - 8 - v62;
        if (v71 < 0x168
          || &v68[v63 - 8 - (v71 & 0xFFFFFFFFFFFFFFF8)] > &v68[v63 - 8]
          || &v58[-(v71 & 0xFFFFFFFFFFFFFFF8) - 8] > v58 - 8
          || (unint64_t)(v58 - &v68[v63]) < 0x20)
        {
          break;
        }
        uint64_t v74 = (v71 >> 3) + 1;
        uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
        unsigned int v72 = &v58[-v75];
        v69 -= v75;
        unsigned int v76 = &v68[8 * v64 - 16];
        uint64_t v77 = v58 - 16;
        uint64_t v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
        unint64_t v55 = v61;
        do
        {
          long long v79 = *(_OWORD *)v77;
          *(v76 - 1) = *((_OWORD *)v77 - 1);
          *unsigned int v76 = v79;
          v76 -= 2;
          v77 -= 32;
          v78 -= 4;
        }
        while (v78);
        unint64_t v12 = a11;
        if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_63;
        }
LABEL_64:
        float *v12 = v69;
        v12[1] = (char *)v70;
        v12[2] = &v68[8 * v67];
        if (v62) {
          goto LABEL_65;
        }
LABEL_66:
        v12[1] = (char *)v70;
        ++v57;
        uint64_t v58 = (char *)v70;
        if (v57 == v55) {
          goto LABEL_42;
        }
      }
      unsigned int v72 = v58;
      unint64_t v55 = v61;
      unint64_t v12 = a11;
      do
      {
LABEL_63:
        uint64_t v73 = *((void *)v72 - 1);
        v72 -= 8;
        *((void *)v69 - 1) = v73;
        v69 -= 8;
      }
      while (v72 != v62);
      goto LABEL_64;
    }
LABEL_42:
    ;
  }
  sub_21948B454((uint64_t)v12);
  long long v80 = (char *)__p;
  if (__p)
  {
    signed int v81 = v94;
    size_t v82 = __p;
    if (v94 != __p)
    {
      uint64_t v83 = v94;
      do
      {
        int v85 = (void *)*((void *)v83 - 3);
        v83 -= 24;
        v84 = v85;
        if (v85)
        {
          *((void *)v81 - 2) = v84;
          operator delete(v84);
        }
        signed int v81 = v83;
      }
      while (v83 != v80);
      size_t v82 = __p;
    }
    unint64_t v94 = v80;
    operator delete(v82);
  }
}

void sub_219491F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_219491F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_219491F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_219491F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_219491F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_219491F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_219491F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

char *sub_219491FA8(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6 = *a1;
  uint64_t v7 = (uint64_t)a2 - *a1;
  unint64_t v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = a5 - 1;
  if (a5 < 1) {
    return v8;
  }
  unint64_t v11 = __src;
  uint64_t v13 = v7 >> 3;
  unint64_t v15 = a1[1];
  unint64_t v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 3)
  {
    unint64_t v16 = a5 + ((uint64_t)(v15 - v6) >> 3);
    if (v16 >> 61) {
      sub_219486AE4();
    }
    uint64_t v17 = v14 - v6;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        sub_219486AFC();
      }
      unint64_t v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v20 = v18;
      float v21 = operator new(8 * v18);
      unint64_t v18 = v20;
      unint64_t v8 = (char *)v19;
      uint64_t v13 = v7 >> 3;
      unint64_t v11 = __src;
    }
    else
    {
      float v21 = 0;
    }
    uint64_t v43 = &v21[8 * v13];
    long long v44 = &v43[8 * a5];
    uint64_t v45 = v43;
    uint64_t v46 = v11;
    if ((v9 & 0x1FFFFFFFFFFFFFFFuLL) < 7) {
      goto LABEL_57;
    }
    uint64_t v45 = &v21[8 * v13];
    uint64_t v46 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFF8] - v11) < 0x20) {
      goto LABEL_57;
    }
    uint64_t v47 = (v9 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v45 = &v43[v48];
    uint64_t v46 = &v11[v48];
    int v49 = (long long *)(v11 + 16);
    int v50 = &v21[8 * v13 + 16];
    uint64_t v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v52 = *v49;
      *(v50 - 1) = *(v49 - 1);
      *int v50 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 4;
    }
    while (v51);
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_57:
      do
      {
        uint64_t v53 = *(void *)v46;
        v46 += 8;
        *(void *)uint64_t v45 = v53;
        v45 += 8;
      }
      while (v45 != v44);
    }
    unint64_t v54 = &v21[8 * v13];
    if ((void *)v6 != a2)
    {
      unint64_t v55 = v8;
      unint64_t v54 = &v21[8 * v13];
      if ((unint64_t)(v7 - 8) < 0x68) {
        goto LABEL_58;
      }
      unint64_t v55 = v8;
      unint64_t v54 = &v21[8 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFF8) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFF8] < 0x20) {
        goto LABEL_58;
      }
      unint64_t v56 = ((unint64_t)(v7 - 8) >> 3) + 1;
      uint64_t v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v55 = &v8[-v57];
      unint64_t v54 = &v43[-v57];
      uint64_t v58 = 8 * v13 - 16;
      uint64_t v59 = &v21[v58];
      unint64_t v60 = (long long *)(v6 + v58);
      uint64_t v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        *uint64_t v59 = v62;
        v59 -= 2;
        v60 -= 2;
        v61 -= 4;
      }
      while (v61);
      if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_58:
        do
        {
          uint64_t v63 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v54 - 1) = v63;
          v54 -= 8;
        }
        while (v55 != (char *)v6);
      }
    }
    uint64_t v64 = &v21[8 * v18];
    size_t v65 = v15 - (void)v8;
    if (v65) {
      memmove(&v43[8 * a5], v8, v65);
    }
    *a1 = (unint64_t)v54;
    a1[1] = (unint64_t)&v44[v65];
    a1[2] = (unint64_t)v64;
    if (v6) {
      operator delete((void *)v6);
    }
    return v43;
  }
  uint64_t v22 = v15 - (void)v8;
  uint64_t v23 = (uint64_t)(v15 - (void)v8) >> 3;
  if (v23 >= a5)
  {
    int8x16_t v24 = &__src[8 * a5];
    unint64_t v26 = a1[1];
  }
  else
  {
    int8x16_t v24 = &__src[8 * v23];
    int64_t v25 = a4 - v24;
    if (a4 != v24)
    {
      unint64_t v70 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      memmove((void *)a1[1], &__src[8 * v23], a4 - v24);
      uint64_t v13 = v7 >> 3;
      unint64_t v8 = (char *)v70;
    }
    unint64_t v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1) {
      return v8;
    }
  }
  float v27 = &v8[8 * a5];
  size_t v28 = v26 - (void)v27;
  uint64_t v29 = (uint64_t)(v26 - (void)v27) >> 3;
  unint64_t v30 = (uint64_t *)(v26 - 8 * a5);
  uint64_t v31 = (void *)v26;
  if ((unint64_t)v30 < v15)
  {
    unint64_t v32 = (v7 & 0xFFFFFFFFFFFFFFF8) + v28;
    unint64_t v33 = (char *)(v32 + v6);
    unint64_t v34 = v32 + v6 + 8;
    if (v15 > v34) {
      unint64_t v34 = v15;
    }
    unint64_t v35 = v34 + ~v6 - v32;
    if (v35 < 0x58)
    {
      uint64_t v31 = (void *)v26;
    }
    else
    {
      unint64_t v36 = v26 - (void)v33;
      uint64_t v31 = (void *)v26;
      if (v36 >= 0x20)
      {
        uint64_t v37 = (v35 >> 3) + 1;
        uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v30 = (uint64_t *)((char *)v30 + v38);
        uint64_t v31 = (void *)(v26 + v38);
        uint64_t v39 = (_OWORD *)(v26 + 16);
        long long v40 = (long long *)(8 * v29 + 8 * v13 + v6 + 16);
        uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *uint64_t v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 4;
        }
        while (v41);
        if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
    }
    do
    {
      uint64_t v66 = *v30++;
      *v31++ = v66;
    }
    while ((unint64_t)v30 < v15);
  }
LABEL_47:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    unint64_t v67 = v8;
    memmove((void *)(v26 - 8 * v29), v8, v28);
    unint64_t v8 = v67;
  }
  if (v24 != v11)
  {
    uint64_t v43 = v8;
    memmove(v8, v11, v24 - v11);
    return v43;
  }
  return v8;
}

double sub_219492354(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  bzero(a3, 0xEC0uLL);
  *(_DWORD *)(a4 + 72) = (*(void *)a4 != 0) << 12;
  int v10 = *(_DWORD *)(a4 + 20) * *(_DWORD *)(a4 + 16);
  sub_2194925B4(a1, a2, a3 + 64, a4, a5);
  unsigned int v12 = *((_DWORD *)a3 + 1) & 0xFFFFFFFC | (v10 != 0);
  *((_DWORD *)a3 + 1) = v12;
  if (v10)
  {
    *(unsigned char *)(a5 + 472) = 1;
    *(_DWORD *)(a5 + 476) = 0;
    if (sub_2194C0260(a5 + 452, *(_DWORD *)(a4 + 16), *(_DWORD *)(a4 + 20), *(_DWORD *)(a4 + 12), 8) != v10) {
      sub_219505468();
    }
    unsigned int v12 = *((_DWORD *)a3 + 1) & 0xFFFFFFF3 | 4;
    *((_DWORD *)a3 + 1) = v12;
    *((void *)a3 + 460) = *(void *)(a4 + 56);
    *((_DWORD *)a3 + 922) = v10;
  }
  int v13 = *(_DWORD *)(a4 + 28);
  int v14 = *(_DWORD *)(a4 + 32);
  int v15 = v14 * v13;
  if (v14 * v13)
  {
    *(unsigned char *)(a5 + 500) = 1;
    *(_DWORD *)(a5 + 504) = 0;
    if (sub_2194C0260(a5 + 480, v13, v14, *(_DWORD *)(a4 + 24), 8) != v15) {
      sub_219505430();
    }
    unsigned int v12 = *((_DWORD *)a3 + 1) & 0xFFFFFFCF | 0x10;
    *((_DWORD *)a3 + 1) = v12;
    *(void *)(a3 + 3692) = *(void *)(a4 + 64);
    *((_DWORD *)a3 + 925) = v15;
  }
  int v16 = *(_DWORD *)(a4 + 40);
  int v17 = *(_DWORD *)(a4 + 44);
  int v18 = v17 * v16;
  if (v17 * v16)
  {
    *(unsigned char *)(a5 + 528) = 1;
    *(_DWORD *)(a5 + 532) = *(_DWORD *)(a4 + 72);
    if (sub_2194C0260(a5 + 508, v16, v17, *(_DWORD *)(a4 + 36), 8) != v18) {
      sub_2195053F8();
    }
    *(_DWORD *)(a4 + 72) += v18;
    uint64_t v19 = *(void *)(a4 + 64) + *(unsigned int *)(a5 + 532);
    unsigned int v12 = *((_DWORD *)a3 + 1) & 0xFFFFFF3F | 0x40;
    *((_DWORD *)a3 + 1) = v12;
    *((void *)a3 + 463) = v19;
    *((_DWORD *)a3 + 928) = v18;
  }
  if (*(unsigned char *)(a5 + 360))
  {
    uint64_t v20 = *(void *)(a4 + 64) + *(unsigned int *)(a5 + 364);
    unsigned int v12 = v12 & 0xFFFFF3FF | 0x400;
    *((_DWORD *)a3 + 1) = v12;
    *((void *)a3 + 466) = v20;
    *((_DWORD *)a3 + 934) = *(_DWORD *)(a5 + 348) * *(_DWORD *)(a5 + 352);
  }
  if (*(unsigned char *)(a5 + 388))
  {
    uint64_t v21 = *(void *)(a4 + 64) + *(unsigned int *)(a5 + 392);
    *((_DWORD *)a3 + 1) = v12 & 0xFFFFCFFF | 0x1000;
    *(void *)(a3 + 3740) = v21;
    *((_DWORD *)a3 + 937) = *(_DWORD *)(a5 + 376) * *(_DWORD *)(a5 + 380);
  }
  if (v10)
  {
    *((_DWORD *)a3 + 664) = *(_DWORD *)(a4 + 8);
    *((_DWORD *)a3 + 665) = 0x80000000;
    *((void *)a3 + 333) = 0;
    *(void *)&double result = 0x600000006;
    *((void *)a3 + 315) = 0x600000006;
    *((_DWORD *)a3 + 623) = 0x80000;
  }
  return result;
}

void sub_2194925B4(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  bzero(a3, 0x500uLL);
  *(_DWORD *)a3 = *(unsigned __int8 *)(a2 + 92);
  *(void *)(a3 + 4) = *(void *)a2;
  *((_DWORD *)a3 + 3) = 8;
  sub_2194953D0(a1, a2, (int8x16_t *)a3 + 4, a4, a5);
  int v10 = *((_DWORD *)a3 + 288);
  if (*(unsigned char *)(a2 + 92))
  {
    *((_DWORD *)a3 + 288) = v10 & 0xFFFFFFFE;
    *((_DWORD *)a3 + 304) = *((_DWORD *)a3 + 304) & 0xFFFFC000 | sub_2194952FC(*(_DWORD *)(a2 + 24)) & 0x3FFF;
    int v11 = *((_DWORD *)a3 + 288) & 0xFFFE00FF | ((sub_21949531C(*(_DWORD *)(a2 + 24)) & 0x1FF) << 8);
    *((_DWORD *)a3 + 288) = v11;
    *((_DWORD *)a3 + 288) = v11 & 0xFCFFFFFF | ((*(unsigned char *)(a2 + 132) & 3) << 24);
    *(void *)(a3 + 1156) = *((void *)a3 + 134);
    *(void *)(a3 + 1180) = *((void *)a3 + 135);
    *((_DWORD *)a3 + 291) = sub_219495340(*(unsigned __int8 *)(a2 + 132)) << 7;
    *((_DWORD *)a3 + 292) = 32 * sub_219495364(*(unsigned __int8 *)(a2 + 132));
    int v12 = *((_DWORD *)a3 + 289);
    *((_DWORD *)a3 + 293) = v12 + 256;
    *((_DWORD *)a3 + 294) = v12 + 384;
    *((_DWORD *)a3 + 297) = *((_DWORD *)a3 + 272);
    uint64_t v13 = *(unsigned int *)(a4 + 72);
    unint64_t v14 = *(void *)(a4 + 64) + v13;
    *((_DWORD *)a3 + 302) = v14 & 0xFFFFF;
    *((_DWORD *)a3 + 303) = v14 >> 20;
    *(unsigned char *)(a5 + 388) = 1;
    *(_DWORD *)(a5 + 392) = v13;
    unsigned int v15 = sub_2194C02DC(16 * (*((_DWORD *)a3 + 304) & 0x3FFFu) + 16, 0, 64, a5 + 368);
    unint64_t v16 = v14 + v15;
    unsigned int v17 = *(_DWORD *)(a4 + 72) + v15;
    *(_DWORD *)(a4 + 72) = v17;
    *((_DWORD *)a3 + 298) = v16 & 0xFFFFF;
    *((_DWORD *)a3 + 299) = v16 >> 20;
    unint64_t v18 = v16 + 4 * (*((_DWORD *)a3 + 304) & 0x3FFF);
    unsigned int v19 = 4 * (*((_DWORD *)a3 + 304) & 0x3FFF) + v17;
    *(_DWORD *)(a4 + 72) = v19;
    *((_DWORD *)a3 + 300) = v18 & 0xFFFFF;
    *((_DWORD *)a3 + 301) = v18 >> 20;
    *(_DWORD *)(a4 + 72) = 16 * (*((_DWORD *)a3 + 304) & 0x3FFF) + v19;
    *((_DWORD *)a3 + 304) &= 0xC0FFFFFF;
    *((_DWORD *)a3 + 305) = 108000000;
    float32x4_t v20 = *(float32x4_t *)(a2 + 112);
    *(uint32x4_t *)(a3 + 1224) = vcvtq_n_u32_f32(*(float32x4_t *)(a2 + 96), 0xEuLL);
    *(uint32x4_t *)(a3 + 1240) = vcvtq_n_u32_f32(v20, 0xEuLL);
    *((_DWORD *)a3 + 314) = vcvts_n_u32_f32(*(float *)(a2 + 128), 0xEuLL);
    LODWORD(v18) = *((_DWORD *)a3 + 317);
    uint64_t v21 = *(void *)(a3 + 1260);
    *(void *)(a3 + 1260) = v21 & 0xFFFFFFFFF800F800;
    unint64_t v22 = v21 & 0xFFFFF800F800F800 | ((unint64_t)(*(_DWORD *)a2 & 0x7FF) << 32);
    *(void *)(a3 + 1260) = v22;
    unint64_t v23 = v22 & 0xF800FFFFFFFFFFFFLL | ((unint64_t)(*(_DWORD *)(a2 + 4) & 0x7FF) << 48);
    *(void *)(a3 + 1260) = v23;
    LODWORD(v18) = vcvtas_u32_f32((float)(*(float *)(a2 + 136) * 256.0) / 360.0) | v18 & 0xFFFFFF00;
    *(void *)(a3 + 1260) = v23;
    *((_DWORD *)a3 + 317) = v18;
    __int16 v24 = vcvtas_u32_f32(*(float *)(a2 + 140) * 512.0);
    *(void *)(a3 + 1260) = v23;
    *((_DWORD *)a3 + 317) = v18 & 0xFEC000FF | ((v24 & 0x3FFF) << 8);
    *((_DWORD *)a3 + 318) = (float)(*(float *)(a2 + 144)
                                                * (float)((float)(*(float *)(a2 + 144) * (float)*(unsigned int *)a2)
                                                        * (float)*(unsigned int *)a2));
    *((_DWORD *)a3 + 319) = *(_DWORD *)(a2 + 148);
  }
  else
  {
    *((_DWORD *)a3 + 288) = v10 | 1;
  }
}

void sub_21949287C(uint64_t a1, unsigned int a2, int a3)
{
  if (!a3) {
    sub_2195054A0();
  }
  unint64_t v5 = a2;
  unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v7 = a2 >= v6;
  unint64_t v8 = a2 - v6;
  if (v8 != 0 && v7)
  {
    sub_219492AB4((char **)a1, v8);
  }
  else if (!v7)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 28 * v5;
  }
  uint64_t v9 = *(void *)(a1 + 72);
  unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 80) - v9) >> 2);
  if (v5 <= v10)
  {
    if (v5 < v10) {
      *(void *)(a1 + 80) = v9 + 28 * v5;
    }
  }
  else
  {
    sub_219492AB4((char **)(a1 + 72), v5 - v10);
  }
  if (a3 == 2)
  {
    uint64_t v14 = *(void *)(a1 + 120);
    uint64_t v13 = (char **)(a1 + 120);
    unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 128) - v14) >> 2);
    if (*(void *)(a1 + 128) != v14)
    {
      if (v15 < 2) {
        return;
      }
      uint64_t v16 = v14 + 28;
LABEL_31:
      *(void *)(a1 + 128) = v16;
      return;
    }
    unint64_t v23 = 1 - v15;
  }
  else
  {
    if (a3 != 1) {
      return;
    }
    uint64_t v11 = *(void *)(a1 + 24);
    unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 32) - v11) >> 2);
    if (v5 <= v12)
    {
      if (v5 < v12) {
        *(void *)(a1 + 32) = v11 + 28 * v5;
      }
    }
    else
    {
      sub_219492AB4((char **)(a1 + 24), v5 - v12);
    }
    uint64_t v17 = *(void *)(a1 + 48);
    unint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 56) - v17) >> 2);
    if (v5 <= v18)
    {
      if (v5 < v18) {
        *(void *)(a1 + 56) = v17 + 28 * v5;
      }
    }
    else
    {
      sub_219492AB4((char **)(a1 + 48), v5 - v18);
    }
    uint64_t v19 = *(void *)(a1 + 96);
    unint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 104) - v19) >> 2);
    if (v5 <= v20)
    {
      if (v5 < v20) {
        *(void *)(a1 + 104) = v19 + 28 * v5;
      }
    }
    else
    {
      sub_219492AB4((char **)(a1 + 96), v5 - v20);
    }
    uint64_t v21 = *(void *)(a1 + 120);
    uint64_t v13 = (char **)(a1 + 120);
    unint64_t v22 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 128) - v21) >> 2);
    unint64_t v23 = v5 - v22;
    if (v5 <= v22)
    {
      if (v5 >= v22) {
        return;
      }
      uint64_t v16 = v21 + 28 * v5;
      goto LABEL_31;
    }
  }

  sub_219492AB4(v13, v23);
}

void sub_219492AB4(char **a1, unint64_t a2)
{
  unint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v12 = 28 * ((28 * a2 - 28) / 0x1C) + 28;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 2);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x924924924924924) {
      sub_219486AE4();
    }
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v6) >> 2);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x492492492492492) {
      unint64_t v10 = 0x924924924924924;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x924924924924924) {
        sub_219486AFC();
      }
      uint64_t v11 = (char *)operator new(28 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[28 * v7];
    uint64_t v14 = &v11[28 * v10];
    size_t v15 = 28 * ((28 * a2 - 28) / 0x1C) + 28;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        long long v17 = *(_OWORD *)(v5 - 28);
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        *(_OWORD *)(v13 - 28) = v17;
        v13 -= 28;
        v5 -= 28;
      }
      while (v5 != v6);
      unint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_219492CA0(uint64_t *a1, int a2, unsigned int a3, uint64_t *a4)
{
  *(void *)&v19[7] = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    int v16 = 67109378;
    unsigned int v17 = a3;
    __int16 v18 = 2080;
    *(void *)uint64_t v19 = v8;
    _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "TID %u, %s duplicate", (uint8_t *)&v16, 0x12u);
  }
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1] - *a1;
  if (v10)
  {
    uint64_t v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = v10 >> 2;
    while (1)
    {
      int v14 = *(_DWORD *)(v9 + 4 * v11);
      if (v14 != -1 && v14 == a2) {
        break;
      }
      uint64_t v11 = ++v12;
      if (v13 <= v12) {
        return;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 67109632;
      unsigned int v17 = v12;
      __int16 v18 = 1024;
      *(_DWORD *)uint64_t v19 = a2;
      v19[2] = 1024;
      *(_DWORD *)&v19[3] = a2;
      _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "[AppleCVHWA] curr to same prev: %u & %u -> %u.", (uint8_t *)&v16, 0x14u);
    }
  }
}

void sub_219492E0C(uint64_t *a1, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v14 = 0;
  uint64_t v8 = *a2;
  int v9 = *(_DWORD *)(*a2 + 4 * a4);
  if (*(_DWORD *)(*a1 + 4 * a3) != -1)
  {
    if (v9 == -1)
    {
      MEMORY[0x21D48B320](__p, "curr idx");
      sub_219492CA0(a1, a4, a5, (uint64_t *)__p);
      uint64_t v10 = "false && \"Unexpected: curr idx is duplicate\"";
      uint64_t v11 = 527;
    }
    else
    {
      MEMORY[0x21D48B320](__p, "curr & prev idx");
      sub_219492CA0(a1, a4, a5, (uint64_t *)__p);
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        unsigned int v16 = a3;
        __int16 v17 = 1024;
        unsigned int v18 = a4;
        _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "duplicate indices pair: {%u, %u}", buf, 0xEu);
      }
      uint64_t v10 = "false && \"Unexpected: curr & prev idx are duplicates\"";
      uint64_t v11 = 523;
    }
LABEL_13:
    sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDebugUtils.cpp", v11, v10, (void (*)(void *))sub_2194FF9C0);
    abort();
  }
  if (v9 != -1)
  {
    MEMORY[0x21D48B320](__p, "prev idx");
    sub_219492CA0(a1, a4, a5, (uint64_t *)__p);
    uint64_t v10 = "false && \"Unexpected: prev idx is duplicate\"";
    uint64_t v11 = 531;
    goto LABEL_13;
  }
  *(_DWORD *)(*a1 + 4 * a3) = a4;
  *(_DWORD *)(v8 + 4 * a4) = a3;
  if (SHIBYTE(v14) < 0)
  {
    operator delete(__p[0]);
  }
}

void sub_219493014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_219493030(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 64) != 4) {
    return 0;
  }
  *(unsigned char *)(a1 + 480) = 17;
  int v4 = *(unsigned __int8 *)(a2 + 68);
  if (v4 == 2)
  {
    *(_WORD *)(a2 + 50) = sub_2194E223C(*(_DWORD *)a2, *(_DWORD *)(a2 + 4));
    uint64_t v7 = a1 + 344;
    BOOL result = sub_219493C54(a1 + 344, a2);
    if (!result) {
      return result;
    }
  }
  else
  {
    if (v4 != 1) {
      return 0;
    }
    unint64_t v5 = *(unsigned int *)(a1 + 352);
    if (v5 != *(_DWORD *)(a1 + 356)) {
      sub_2195055B8();
    }
    unsigned __int16 v6 = sub_2194C67D0(*(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(unsigned __int16 *)(a2 + 50), v5);
    *(_WORD *)(a2 + 50) = v6;
    if (v6 >= 7u) {
      sub_219505580();
    }
    if (!v6) {
      sub_2195054D8();
    }
    if (*(_DWORD *)a2 >> (v6 - 1) < *(_DWORD *)(a1 + 352)) {
      sub_219505510();
    }
    if (*(_DWORD *)(a2 + 4) >> (v6 - 1) < *(_DWORD *)(a1 + 356)) {
      sub_219505548();
    }
    uint64_t v7 = a1 + 344;
    BOOL result = sub_219493C54(a1 + 344, a2);
    if (!result) {
      return result;
    }
  }
  *(void *)(a1 + 8) = *(void *)a2;
  unsigned int v9 = *(unsigned __int16 *)(a2 + 50);
  *(_WORD *)(a1 + 16) = v9;
  int v10 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 24) = v10;
  int v11 = *(unsigned __int8 *)(a2 + 68);
  *(unsigned char *)(a1 + 28) = v11;
  sub_219496014(a1 + 32, v9, v11);
  int v12 = *(unsigned __int8 *)(a1 + 28);
  if (v12 != 2)
  {
    if (v12 == 1)
    {
      unint64_t v13 = *(unsigned __int16 *)(a1 + 16);
      uint64_t v14 = *(void *)(a1 + 456);
      unint64_t v15 = (*(void *)(a1 + 464) - v14) >> 10;
      if (v13 <= v15)
      {
        if (v13 < v15) {
          *(void *)(a1 + 464) = v14 + (v13 << 10);
        }
      }
      else
      {
        sub_219493B0C((char **)(a1 + 456), v13 - v15);
        LODWORD(v13) = *(unsigned __int16 *)(a1 + 16);
      }
      if (v13)
      {
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        do
        {
          sub_219494228(v7, a2, v19++, (char *)(*(void *)(a1 + 456) + v18));
          v18 += 1024;
        }
        while (v19 < *(unsigned __int16 *)(a1 + 16));
      }
      return 1;
    }
    return 0;
  }
  unsigned int v16 = *(int8x16_t **)(a1 + 456);
  unint64_t v17 = *(void *)(a1 + 464) - (void)v16;
  if (v17)
  {
    if (v17 >= 0x401) {
      *(void *)(a1 + 464) = v16 + 64;
    }
  }
  else
  {
    unint64_t v20 = (char **)(a1 + 456);
    sub_219493B0C(v20, 1uLL);
    unsigned int v16 = (int8x16_t *)*v20;
  }
  sub_219494804(v7, a2, v16);
  return 1;
}

void sub_219493268(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)a2 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 4)) {
    sub_219505660();
  }
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 24)) {
    sub_219505628();
  }
  if (*(unsigned char *)(a1 + 28) != 2 || *(unsigned char *)(a2 + 68) != 2) {
    sub_2195055F0();
  }
  unint64_t v3 = *(int8x16_t **)(a1 + 456);
  uint64_t v4 = a1 + 344;

  sub_219494804(v4, a2, v3);
}

uint64_t sub_2194932E8()
{
  return 1344;
}

uint64_t sub_2194932F0()
{
  return 1088;
}

uint64_t sub_2194932F8()
{
  return 1076;
}

uint64_t sub_219493300(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v6 = *(unsigned __int8 *)(a1 + 28);
  uint64_t v7 = (void *)(a1 + 456);
  unsigned int v8 = *(unsigned __int16 *)(a1 + 16);
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v10 = (void *)(a1 + 32);
  if (v6 == 1)
  {
    return sub_21949624C(v7, v8, v9, a2, a3, v10);
  }
  else
  {
    return sub_219496444(v7, v8, v9, a2, a3, v10);
  }
}

uint64_t sub_2194933BC(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 28) == 1) {
    return ((24 * a2 + 63) & 0xFFFFFFC0) + (a2 << 6) + 576;
  }
  else {
    return 576;
  }
}

void *sub_2194933EC(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v7 = (const void **)(a1 + 456);
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  int v10 = *(unsigned __int8 *)(a1 + 480);
  if (*(unsigned char *)(a1 + 28) == 1) {
    return sub_219496DD4(a2, v7, v8, v9, a3, v10, a4);
  }
  else {
    return sub_219496E84(a2, v7, v8, v9, a3, v10, a4);
  }
}

uint64_t sub_21949341C(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7)
{
  if (*(unsigned char *)(a1 + 28) == 1)
  {
    if (*(unsigned __int16 *)(a1 + 16) <= a7) {
      sub_219505698();
    }
    size_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    return sub_2194966AC(a2, v14, a3, a4, a5, a6, a7, *(_DWORD *)(a1 + 24), (void *)(a1 + 32));
  }
  else
  {
    if (a7) {
      sub_2195056D0();
    }
    size_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    int v17 = *(_DWORD *)(a1 + 24);
    return sub_21949699C(a2, v16, a3, a4, a5, a6, v17, (unsigned int *)(a1 + 32));
  }
}

__n128 sub_219493560@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  unsigned int v2 = *(void **)(a1 + 456);
  uint64_t v3 = v2[90];
  v4.n128_u64[0] = v3;
  v4.n128_u64[1] = HIDWORD(v3);
  __n128 v5 = v4;
  uint64_t v6 = v2[91];
  v4.n128_u64[0] = v6;
  v4.n128_u64[1] = HIDWORD(v6);
  *a2 = v5;
  a2[1] = v4;
  v5.n128_u64[0] = v2[92];
  v4.n128_u64[0] = v5.n128_u32[0];
  v4.n128_u64[1] = v5.n128_u32[1];
  __n128 result = v4;
  uint64_t v8 = v2[93];
  v4.n128_u64[0] = v8;
  v4.n128_u64[1] = HIDWORD(v8);
  a2[2] = result;
  a2[3] = v4;
  return result;
}

uint32x4_t sub_219493590(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  *(_OWORD *)(a3 + 92) = *(_OWORD *)((char *)a2 + 92);
  uint64_t v4 = *a2;
  *(_WORD *)(a3 + 8) = *((_WORD *)a2 + 4);
  *(void *)a3 = v4;
  uint64_t v5 = *(uint64_t *)((char *)a2 + 10);
  *(_WORD *)(a3 + 18) = *((_WORD *)a2 + 9);
  *(void *)(a3 + 10) = v5;
  uint64_t v6 = *(uint64_t *)((char *)a2 + 20);
  *(_WORD *)(a3 + 28) = *((_WORD *)a2 + 14);
  *(void *)(a3 + 20) = v6;
  uint64_t v7 = *(uint64_t *)((char *)a2 + 30);
  *(_WORD *)(a3 + 38) = *((_WORD *)a2 + 19);
  *(void *)(a3 + 30) = v7;
  uint64_t v8 = a2[5];
  *(_WORD *)(a3 + 48) = *((_WORD *)a2 + 24);
  *(void *)(a3 + 40) = v8;
  long long v9 = *(_OWORD *)((char *)a2 + 52);
  long long v10 = *(_OWORD *)((char *)a2 + 68);
  *(void *)(a3 + 84) = *(uint64_t *)((char *)a2 + 84);
  *(_OWORD *)(a3 + 68) = v10;
  *(_OWORD *)(a3 + 52) = v9;
  long long v11 = *(_OWORD *)((char *)a2 + 126);
  *(_WORD *)(a3 + 124) = *((_WORD *)a2 + 71);
  *(_OWORD *)(a3 + 108) = v11;
  int v12 = (uint16x4_t *)(a2 + 49);
  do
  {
    unint64_t v13 = *(uint32x4_t **)(a3 + 240 + v3);
    uint32x4_t v14 = vmovl_u16(v12[-14]);
    *unint64_t v13 = vmovl_u16(v12[-15]);
    v13[1] = v14;
    uint32x4_t v15 = vmovl_u16(v12[-12]);
    v13[2] = vmovl_u16(v12[-13]);
    void v13[3] = v15;
    uint32x4_t v16 = vmovl_u16(v12[-10]);
    v13[4] = vmovl_u16(v12[-11]);
    v13[5] = v16;
    uint32x4_t v17 = vmovl_u16(v12[-8]);
    v13[6] = vmovl_u16(v12[-9]);
    v13[7] = v17;
    uint32x4_t v18 = vmovl_u16(v12[-6]);
    v13[8] = vmovl_u16(v12[-7]);
    v13[9] = v18;
    uint32x4_t v19 = vmovl_u16(v12[-4]);
    v13[10] = vmovl_u16(v12[-5]);
    v13[11] = v19;
    uint32x4_t v20 = vmovl_u16(v12[-2]);
    v13[12] = vmovl_u16(v12[-3]);
    v13[13] = v20;
    uint32x4_t result = vmovl_u16(v12[-1]);
    uint32x4_t v22 = vmovl_u16(*v12);
    v3 += 24;
    v12 += 16;
    v13[14] = result;
    v13[15] = v22;
  }
  while (v3 != 192);
  return result;
}

uint64_t sub_2194936B4(uint64_t a1, int a2, unsigned int a3)
{
  switch(a2)
  {
    case 0:
      uint64_t result = *(void *)(a1 + 32) + 28 * a3;
      break;
    case 1:
      if (*(unsigned char *)(a1 + 28) != 1) {
        sub_219505740();
      }
      uint64_t result = *(void *)(a1 + 56) + 28 * a3;
      break;
    case 2:
      if (*(unsigned char *)(a1 + 28) != 1) {
        sub_219505778();
      }
      uint64_t result = *(void *)(a1 + 80) + 28 * a3;
      break;
    case 3:
      uint64_t result = *(void *)(a1 + 104) + 28 * a3;
      break;
    case 4:
      if (*(unsigned char *)(a1 + 28) != 1) {
        sub_2195057B0();
      }
      uint64_t result = *(void *)(a1 + 128) + 28 * a3;
      break;
    case 5:
      int v4 = *(unsigned __int8 *)(a1 + 28);
      if (v4 != 1 && (a3 || v4 != 2)) {
        sub_2195057E8();
      }
      uint64_t result = *(void *)(a1 + 152) + 28 * a3;
      break;
    case 6:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_219505858();
      }
      if (a3) {
        sub_219505820();
      }
      uint64_t result = a1 + 176;
      break;
    case 7:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_2195058C8();
      }
      if (a3) {
        sub_219505890();
      }
      uint64_t result = a1 + 204;
      break;
    case 8:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_219505938();
      }
      if (a3) {
        sub_219505900();
      }
      uint64_t result = a1 + 232;
      break;
    case 9:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_2195059A8();
      }
      if (a3) {
        sub_219505970();
      }
      uint64_t result = a1 + 260;
      break;
    case 10:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_219505A18();
      }
      if (a3) {
        sub_2195059E0();
      }
      uint64_t result = a1 + 288;
      break;
    case 11:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_219505A88();
      }
      if (a3) {
        sub_219505A50();
      }
      uint64_t result = a1 + 316;
      break;
    default:
      sub_219505708();
  }
  return result;
}

uint64_t sub_2194938BC(uint64_t result, int32x4_t *a2)
{
  if (*(unsigned char *)(result + 28) != 2) {
    sub_219505AC0();
  }
  uint64_t v2 = *(unsigned __int16 *)(result + 16);
  uint64_t v3 = 2 * v2 - 2;
  if (2 * v2 != 2)
  {
    uint64_t v4 = *(void *)(result + 456);
    if (v3 < 0x10)
    {
      unint64_t v5 = 0;
LABEL_8:
      uint64_t v11 = v5 - 2 * v2 + 2;
      int v12 = (__int16 *)(v4 + 2 * v5 + 902);
      unint64_t v13 = &a2->i16[4 * v5];
      do
      {
        __int16 v14 = *v13;
        v13 += 4;
        v12[9] = v14;
        *v12++ = v14;
      }
      while (!__CFADD__(v11++, 1));
      return result;
    }
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v6 = (int16x8_t *)(v4 + 936);
    uint64_t v7 = a2 + 4;
    unint64_t v8 = v3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v9 = vuzp1q_s16((int16x8_t)vuzp1q_s32(v7[-4], v7[-3]), (int16x8_t)vuzp1q_s32(v7[-2], v7[-1]));
      int16x8_t v10 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v7, v7[1]), (int16x8_t)vuzp1q_s32(v7[2], v7[3]));
      v6[-1] = v9;
      int16x8_t *v6 = v10;
      *(int16x8_t *)((char *)v6 - 34) = v9;
      *(int16x8_t *)((char *)v6 - 18) = v10;
      v6 += 2;
      v7 += 8;
      v8 -= 16;
    }
    while (v8);
    if (v5 != v3) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_219493988()
{
  return 0;
}

uint64_t sub_219493990()
{
  return 0;
}

void sub_219493998()
{
}

void sub_2194939D4(void *a1)
{
  sub_219493A48(a1);

  JUMPOUT(0x21D48B5B0);
}

uint64_t sub_219493A14()
{
  return 0;
}

uint64_t sub_219493A2C()
{
  return 0;
}

uint64_t sub_219493A3C()
{
  return 0;
}

uint64_t sub_219493A48(void *a1)
{
  *a1 = &unk_26CAD6420;
  uint64_t v2 = a1[57];
  if (v2)
  {
    a1[58] = v2;
    MEMORY[0x21D48B5A0]();
  }
  uint64_t v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[16];
  if (v4)
  {
    a1[17] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[10];
  if (v6)
  {
    a1[11] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[7];
  if (v7)
  {
    a1[8] = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }

  return nullsub_14(a1);
}

void sub_219493B0C(char **a1, unint64_t a2)
{
  unint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 10)
  {
    if (a2)
    {
      unint64_t v12 = a2 << 10;
      bzero(a1[1], a2 << 10);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (v5 - *a1) >> 10;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 54) {
      sub_219486AE4();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 9 > v8) {
      unint64_t v8 = v9 >> 9;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFC00) {
      unint64_t v10 = 0x3FFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 54) {
        sub_219486AFC();
      }
      uint64_t v11 = (char *)operator new(v10 << 10, (std::align_val_t)0x40uLL);
    }
    else
    {
      uint64_t v11 = 0;
    }
    unint64_t v13 = &v11[1024 * v7];
    size_t v14 = a2 << 10;
    uint32x4_t v15 = &v11[1024 * v10];
    bzero(v13, v14);
    uint32x4_t v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v5 -= 1024;
        v13 -= 1024;
        memcpy(v13, v5, 0x400uLL);
      }
      while (v5 != v6);
      unint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
    {
      JUMPOUT(0x21D48B5A0);
    }
  }
}

BOOL sub_219493C54(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 68);
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      unsigned int v5 = *(unsigned __int16 *)(a2 + 50);
      BOOL v6 = v5 > 6 || *(_DWORD *)(a1 + 16) > v5;
      unsigned int v7 = *(_DWORD *)a2;
      unsigned int v8 = *(_DWORD *)(a2 + 4);
      BOOL v10 = v6 || v7 > *(_DWORD *)a1 || v8 > *(_DWORD *)(a1 + 4);
      int v11 = *(__int16 *)(a2 + 14);
      unsigned int v12 = *(__int16 *)(a2 + 18);
      signed int v13 = *(__int16 *)(a2 + 12);
      unsigned int v14 = ((v11 | v13) >> 15) & 1;
      if (v10) {
        LOWORD(v14) = 1;
      }
      if (v11 > (int)v12) {
        __int16 v15 = 1;
      }
      else {
        __int16 v15 = v14;
      }
      BOOL v18 = v7 >= v12;
      unsigned int v16 = *(__int16 *)(a2 + 16);
      if (!v18) {
        __int16 v15 = 1;
      }
      if (v13 > (int)v16) {
        __int16 v15 = 1;
      }
      if (v8 < v16) {
        __int16 v15 = 1;
      }
      char v17 = v5 - 1;
      if (v15) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v7 >> v17 >= *(_DWORD *)(a1 + 8);
      }
      unsigned int v19 = v8 >> v17;
      int v21 = !v18 || v19 < *(_DWORD *)(a1 + 12);
      if (*(unsigned char *)(a2 + 42))
      {
        unsigned int v22 = *(unsigned __int16 *)(a2 + 38);
        BOOL v23 = *(_DWORD *)(a1 + 20) <= v22 && *(_DWORD *)(a1 + 28) >= v22;
        unsigned int v24 = *(unsigned __int16 *)(a2 + 40);
        BOOL v25 = !v23 || *(_DWORD *)(a1 + 24) > v24;
        BOOL v26 = !v25 && *(_DWORD *)(a1 + 32) >= v24;
        unsigned int v27 = 2 * v22;
        BOOL v28 = v26 && v7 >= v27;
        if (!v28 || v8 < 2 * v24) {
          int v21 = 1;
        }
      }
      BOOL v30 = (*(unsigned __int8 *)(a2 + 92) | v21 | ((*(_DWORD *)(a2 + 64) - 5) < 5)) != 0;
      int v4 = 1;
    }
    else
    {
      BOOL v30 = 0;
    }
    goto LABEL_129;
  }
  unsigned int v31 = *(_DWORD *)(a2 + 64);
  BOOL v32 = (*(unsigned __int8 *)(a2 + 42) | *(unsigned __int8 *)(a2 + 44) ^ 1) != 0;
  if (v31 - 5 >= 2) {
    BOOL v32 = *(unsigned char *)(a2 + 44) == 0;
  }
  if (v31 - 7 >= 3) {
    unint64_t v33 = (_DWORD *)(a1 + 44);
  }
  else {
    unint64_t v33 = (_DWORD *)(a1 + 48);
  }
  unsigned __int32 v34 = *(_DWORD *)a2;
  unsigned int v35 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 > *v33) {
    BOOL v32 = 1;
  }
  if (v35 > *(_DWORD *)(a1 + 52)) {
    BOOL v32 = 1;
  }
  if (v34 < *(_DWORD *)(a1 + 56)) {
    BOOL v32 = 1;
  }
  char v36 = v35 < *(_DWORD *)(a1 + 60) || v32;
  int v37 = *(unsigned __int16 *)(a2 + 50);
  BOOL v38 = v34 > 0x140 && v37 != 5;
  if (v35 <= 0x140) {
    BOOL v38 = 0;
  }
  char v39 = v36 | (v37 == 4) ^ (v37 != 5);
  if (v37 != 4)
  {
    BOOL v40 = v34 >= 0x141 && v35 >= 0x141;
    BOOL v41 = !v40;
    if (!v38) {
      BOOL v38 = v41;
    }
  }
  char v42 = v39 | v38;
  int v43 = *(unsigned __int8 *)(a2 + 89);
  int v44 = v42 & 1;
  int v45 = *(unsigned __int8 *)(a2 + 87) | *(unsigned __int8 *)(a2 + 86);
  if (v45) {
    int v46 = *(unsigned __int8 *)(a2 + 89);
  }
  else {
    int v46 = 0;
  }
  if (*(unsigned char *)(a2 + 84)) {
    int v47 = *(unsigned __int8 *)(a2 + 85);
  }
  else {
    int v47 = 0;
  }
  int v48 = v45 | *(unsigned __int8 *)(a2 + 84) | *(unsigned __int8 *)(a2 + 85);
  int v49 = *(unsigned __int8 *)(a2 + 88);
  int v50 = *(unsigned __int8 *)(a2 + 153);
  int v51 = *(unsigned __int8 *)(a2 + 92);
  BOOL v52 = (v48 | v49 | v43 | v51 | v50) == 0;
  if (v51 | v50) {
    BOOL v53 = v31 == 4;
  }
  else {
    BOOL v53 = 0;
  }
  int v54 = v53;
  int v55 = v46 | v47 | v52 | v54 | v44;
  if (v51 | v50)
  {
    float v56 = *(float *)(a2 + 136);
    float v57 = *(float *)(a2 + 140);
    BOOL v58 = v56 < *(float *)(a1 + 80);
    if (v56 > *(float *)(a1 + 84)) {
      BOOL v58 = 1;
    }
    if (v57 < *(float *)(a1 + 88)) {
      BOOL v58 = 1;
    }
    if (v57 > *(float *)(a1 + 92)) {
      BOOL v58 = 1;
    }
    float v59 = *(float *)(a2 + 144);
    if (v59 < *(float *)(a1 + 96)) {
      BOOL v58 = 1;
    }
    if (v59 > *(float *)(a1 + 100)) {
      BOOL v58 = 1;
    }
    if (*(_DWORD *)(a2 + 148) > *(_DWORD *)(a1 + 104)) {
      BOOL v58 = 1;
    }
    v55 |= v58;
  }
  if (v31 < 7)
  {
    BOOL v30 = (*(unsigned __int8 *)(a2 + 156) | (v55 != 0)) != 0;
LABEL_128:
    int v4 = 2;
    goto LABEL_129;
  }
  BOOL v53 = v49 == 0;
  BOOL v60 = v49 != 0;
  if (v53) {
    int v43 = 0;
  }
  if (*(unsigned char *)(a2 + 91) != 2) {
    BOOL v60 = 0;
  }
  int v61 = v43 | v60;
  if (*(unsigned char *)(a2 + 153)) {
    int v62 = 1;
  }
  else {
    int v62 = *(unsigned __int8 *)(a2 + 92);
  }
  if (!*(unsigned char *)(a2 + 156)) {
    int v62 = 0;
  }
  int v63 = v61 | v62 | (v55 != 0);
  BOOL v30 = v63 != 0;
  if (!*(unsigned char *)(a2 + 42)) {
    goto LABEL_128;
  }
  bzero(v72, 0x828uLL);
  if (v34 <= 0x280) {
    v72[0] = 1;
  }
  sub_2194E22C8(0x280u, v34, v35, 1, v72, v64, v65);
  BOOL v30 = sub_2194E2F74(v72) > *(_DWORD *)(a2 + 24) || v63 != 0;
  int v4 = *(unsigned __int8 *)(a2 + 68);
LABEL_129:
  unsigned int v67 = *(_DWORD *)(a2 + 24);
  unsigned int v68 = v4 - 3;
  if (*(unsigned char *)(a2 + 76)) {
    char v69 = *(unsigned char *)(a2 + 77);
  }
  else {
    char v69 = 0;
  }
  if (*(_DWORD *)(a2 + 28) > v67) {
    BOOL v30 = 1;
  }
  if (v67 > *(_DWORD *)(a1 + 76)) {
    BOOL v30 = 1;
  }
  if (v68 < 0xFFFFFFFE) {
    BOOL v30 = 1;
  }
  char v70 = *(_DWORD *)(a1 + 72) < *(unsigned __int16 *)(a2 + 46) || v30;
  return (v69 | v70) == 0;
}

uint64_t sub_219494034(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (*(_DWORD *)(a1 + 64) != 4) {
    sub_219505B30();
  }
  if (*(_WORD *)(a1 + 68) != 5) {
    sub_219505AF8();
  }
  int v5 = *(__int16 *)(a2 + 14);
  uint64_t v6 = (*(_DWORD *)(a2 + 4) >> a3);
  if (*(_WORD *)(a2 + 16)) {
    int v7 = *(__int16 *)(a2 + 16) >> a3;
  }
  else {
    int v7 = *(_DWORD *)(a2 + 4) >> a3;
  }
  uint64_t v8 = (*(_DWORD *)a2 >> a3);
  if (*(_WORD *)(a2 + 18)) {
    int v9 = *(__int16 *)(a2 + 18) >> a3;
  }
  else {
    int v9 = *(_DWORD *)a2 >> a3;
  }
  signed int v10 = *(__int16 *)(a2 + 12) >> a3;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  sub_2194C65E4(v8, (unsigned int *)&v13 + 1, (signed int *)&v13, v5 >> a3, v9);
  uint64_t result = sub_2194C65E4(v6, (unsigned int *)&v12 + 1, (signed int *)&v12, v10, v7);
  *(_DWORD *)(a4 + 468) = *(_DWORD *)(a4 + 468) & 0xE000F800 | WORD2(v13) & 0x7FF | ((WORD2(v12) & 0x1FFF) << 16);
  *(_DWORD *)(a4 + 488) = *(_DWORD *)(a4 + 488) & 0xE000FC00 | v13 & 0x3FF | ((v12 & 0x1FFF) << 16);
  return result;
}

uint64_t sub_21949412C(uint64_t result, int a2, int *a3, signed int *a4, int a5, int a6)
{
  if (a2 <= 0) {
    sub_219505C80();
  }
  unsigned int v6 = *(unsigned __int16 *)(result + 68);
  int v7 = *(_DWORD *)(result + 64);
  if ((a6 & a5) == 0xFFFFFFFF || !a5 && a6 == a2)
  {
    *a3 = 0;
    signed int v8 = (a2 + v6 - 1) / v6;
    *a4 = v8;
    a5 = *a3;
  }
  else
  {
    if (a6 > a2 || a5 < 0 || a6 <= a5) {
      sub_219505C10();
    }
    int v9 = (int)(~a5 + a6 + v6) / (int)v6;
    if (v9 <= v7) {
      int v9 = *(_DWORD *)(result + 64);
    }
    if (v9 >= (unsigned __int16)(a2 / v6)) {
      int v9 = (unsigned __int16)(a2 / v6);
    }
    *a4 = v9;
    *a3 = a5;
    signed int v8 = *a4;
    int v10 = a5 + *a4 * v6;
    if (v10 >= a2)
    {
      a5 = a2 - *a4 * v6;
      *a3 = a5;
      signed int v8 = *a4;
      int v10 = a5 + *a4 * v6;
    }
    if (v10 < a6) {
      sub_219505C48();
    }
  }
  if (a5 < 0) {
    sub_219505BD8();
  }
  if ((int)(a5 + v8 * v6) >= v8 + a2) {
    sub_219505BA0();
  }
  if (v8 < v7) {
    sub_219505B68();
  }
  return result;
}

void sub_219494228(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  unsigned int v4 = *(unsigned __int16 *)(a2 + 38);
  if (*(_DWORD *)(a1 + 20) > v4 || *(_DWORD *)(a1 + 28) < v4) {
    sub_219505CB8();
  }
  unsigned int v8 = *(unsigned __int16 *)(a2 + 40);
  if (*(_DWORD *)(a1 + 24) > v8 || *(_DWORD *)(a1 + 32) < v8) {
    sub_219505CF0();
  }
  uint64_t v12 = a4 + 312;
  bzero(a4, 0x400uLL);
  *(_DWORD *)a4 = 4368;
  unsigned int v13 = *(_DWORD *)(a2 + 4);
  *((_WORD *)a4 + 2) = *(_DWORD *)a2 >> a3;
  *((_WORD *)a4 + 3) = v13 >> a3;
  *((void *)a4 + 33) = 0;
  *(_OWORD *)(a4 + 248) = 0u;
  *(_OWORD *)(a4 + 232) = 0u;
  *(_OWORD *)(a4 + 216) = 0u;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 8) = 0u;
  *(void *)&long long v14 = 0x300000003;
  *((void *)&v14 + 1) = 0x300000003;
  *((_OWORD *)a4 + 17) = v14;
  *((_DWORD *)a4 + 72) = 196611;
  uint64_t v15 = *(unsigned __int16 *)(a1 + 68);
  if (*(_WORD *)(a1 + 68))
  {
    unsigned int v16 = *(unsigned __int16 *)(a2 + 20);
    if (v15 > 7)
    {
      int32x4_t v18 = vdupq_n_s32(v16);
      if ((v15 & 0xFFF8) == v15)
      {
        uint64_t v19 = 0;
        uint32x4_t v20 = v12 + 16;
        do
        {
          int v21 = (int32x4_t *)v20;
          uint64_t v22 = (unsigned __int16)v15 & 0xFFF8;
          do
          {
            v21[-1] = v18;
            *int v21 = v18;
            v21 += 2;
            v22 -= 8;
          }
          while (v22);
          ++v19;
          v20 += 20;
        }
        while (v19 != v15);
      }
      else
      {
        uint64_t v23 = 0;
        unsigned int v24 = v12;
        do
        {
          uint64_t v25 = (unsigned __int16)v15 & 0xFFF8;
          BOOL v26 = (int32x4_t *)v24;
          do
          {
            *BOOL v26 = v18;
            v26[1] = v18;
            v26 += 2;
            v25 -= 8;
          }
          while (v25);
          uint64_t v27 = (unsigned __int16)v15 & 0xFFF8;
          do
            *((_DWORD *)v24 + v27++) = v16;
          while (v15 != v27);
          ++v23;
          unsigned int v24 = (_OWORD *)((char *)v24 + 20);
        }
        while (v23 != v15);
      }
    }
    else
    {
      *((_DWORD *)a4 + 78) = v16;
      if (v15 != 1)
      {
        *((_DWORD *)a4 + 79) = v16;
        if (v15 != 2)
        {
          *((_DWORD *)a4 + 80) = v16;
          if (v15 != 3)
          {
            *((_DWORD *)a4 + 81) = v16;
            if (v15 != 4)
            {
              *((_DWORD *)a4 + 82) = v16;
              if (v15 != 5)
              {
                *((_DWORD *)a4 + 83) = v16;
                if (v15 != 6) {
                  *((_DWORD *)a4 + 84) = v16;
                }
              }
            }
          }
        }
        *((_DWORD *)a4 + 83) = v16;
        *((_DWORD *)a4 + 84) = v16;
        if (v15 != 2)
        {
          *((_DWORD *)a4 + 85) = v16;
          if (v15 != 3)
          {
            *((_DWORD *)a4 + 86) = v16;
            if (v15 != 4)
            {
              *((_DWORD *)a4 + 87) = v16;
              if (v15 != 5)
              {
                *((_DWORD *)a4 + 88) = v16;
                if (v15 != 6) {
                  *((_DWORD *)a4 + 89) = v16;
                }
              }
            }
          }
          *((_DWORD *)a4 + 88) = v16;
          *((_DWORD *)a4 + 89) = v16;
          *((_DWORD *)a4 + 90) = v16;
          if (v15 != 3)
          {
            *((_DWORD *)a4 + 91) = v16;
            if (v15 != 4)
            {
              *((_DWORD *)a4 + 92) = v16;
              if (v15 != 5)
              {
                *((_DWORD *)a4 + 93) = v16;
                if (v15 != 6) {
                  *((_DWORD *)a4 + 94) = v16;
                }
              }
            }
            *((_DWORD *)a4 + 93) = v16;
            *((_DWORD *)a4 + 94) = v16;
            *((_DWORD *)a4 + 95) = v16;
            *((_DWORD *)a4 + 96) = v16;
            if (v15 != 4)
            {
              *((_DWORD *)a4 + 97) = v16;
              if (v15 != 5)
              {
                *((_DWORD *)a4 + 98) = v16;
                if (v15 != 6) {
                  *((_DWORD *)a4 + 99) = v16;
                }
              }
              *((_DWORD *)a4 + 98) = v16;
              *((_DWORD *)a4 + 99) = v16;
              *((_DWORD *)a4 + 100) = v16;
              *((_DWORD *)a4 + 101) = v16;
              *((_DWORD *)a4 + 102) = v16;
              if (v15 != 5)
              {
                *((_DWORD *)a4 + 103) = v16;
                if (v15 != 6) {
                  *((_DWORD *)a4 + 104) = v16;
                }
                *((_DWORD *)a4 + 103) = v16;
                *((_DWORD *)a4 + 104) = v16;
                *((_DWORD *)a4 + 105) = v16;
                *((_DWORD *)a4 + 106) = v16;
                *((_DWORD *)a4 + 107) = v16;
                *((_DWORD *)a4 + 108) = v16;
                if (v15 != 6)
                {
                  *((_DWORD *)a4 + 109) = v16;
                  *((_DWORD *)a4 + 108) = v16;
                  *((_DWORD *)a4 + 109) = v16;
                  *((_DWORD *)a4 + 110) = v16;
                  *((_DWORD *)a4 + 111) = v16;
                  *((_DWORD *)a4 + 112) = v16;
                  *((_DWORD *)a4 + 113) = v16;
                  *((_DWORD *)a4 + 114) = v16;
                }
              }
            }
          }
        }
      }
    }
    unsigned int v17 = *((_DWORD *)a4 + 108) & 0xFFFFFFFE;
    LODWORD(v15) = *((_DWORD *)a4 + 109) & 0xFFFFFFFE;
  }
  else
  {
    unsigned int v17 = 0;
  }
  *((_DWORD *)a4 + 103) = 2097168;
  int v28 = v17 | *(unsigned __int8 *)(a2 + 43);
  *((_DWORD *)a4 + 108) = v28;
  *((_DWORD *)a4 + 108) = v28 & 0xFFC0FFFF | ((*(_WORD *)(a2 + 46) & 0x3F) << 16);
  int v29 = v15 | *(unsigned __int8 *)(a2 + 43);
  *((_DWORD *)a4 + 109) = v29;
  *((_DWORD *)a4 + 109) = v29 & 0xFFC0FFFF | ((*(_WORD *)(a2 + 46) & 0x3F) << 16);
  sub_219494034(a1, a2, a3, (uint64_t)a4);
  uint64_t v30 = *(void *)(v12 + 204);
  unint64_t v31 = *(void *)(v12 + 196) & 0xF000F800FFFFFFFFLL | ((unint64_t)(*((_DWORD *)a4 + 117) & 0x7FF) << 32) & 0xF000FFFFFFFFFFFFLL | ((((unint64_t)*((unsigned int *)a4 + 117) >> 16) & 0xFFF) << 48);
  *(void *)(v12 + 196) = v31;
  int v32 = *(_WORD *)(a2 + 38) & 0x7F;
  unint64_t v33 = v30 & 0xFFFFFF80FFFFFFFFLL | ((unint64_t)(*(_WORD *)(a2 + 38) & 0x7F) << 32);
  *(void *)(v12 + 196) = v31;
  *(void *)(v12 + 204) = v33;
  int v34 = *(_WORD *)(a2 + 40) & 0x7F;
  unint64_t v35 = v33 & 0xFFFF80FFFFFFFFFFLL | ((unint64_t)(*(_WORD *)(a2 + 40) & 0x7F) << 40);
  *(void *)(v12 + 196) = v31;
  *(void *)(v12 + 204) = v35;
  unsigned int v36 = *((_DWORD *)a4 + 122);
  int v37 = (int)(v32 + (v36 & 0x3FF) * *(unsigned __int16 *)(a1 + 68) - 1) / v32;
  if (v37 <= 2) {
    LOWORD(v37) = 2;
  }
  uint64_t v38 = v37 & 0xFFF;
  unint64_t v39 = v38 | v35 & 0xFFFFFFFFFFFFF000;
  *(void *)(v12 + 196) = v31;
  *(void *)(v12 + 204) = v39;
  int v40 = (int)(v34 + (HIWORD(v36) & 0x1FFF) * *(unsigned __int16 *)(a1 + 68) - 1) / v34;
  if (v40 <= 2) {
    LOWORD(v40) = 2;
  }
  int v41 = v40 & 0x1FFF;
  unint64_t v42 = v39 & 0xFFFFFFFFE000FFFFLL | ((unint64_t)(v40 & 0x1FFF) << 16);
  *(void *)(v12 + 196) = v31;
  *(void *)(v12 + 204) = v42;
  uint64_t v43 = *(unsigned __int8 *)(a2 + 42);
  *(void *)(v12 + 204) = v42;
  *(void *)(v12 + 196) = v31 & 0xFFFFFFFFFFFFFFFELL | v43;
  if (v43)
  {
    uint64_t v44 = sub_2194C6708(v32, v38, v41);
    *(void *)(v12 + 196) = *(void *)(v12 + 196) & 0xFFFFFFFFFFFFF0FFLL | ((log2((double)(unint64_t)v44) & 0xF) << 8);
  }
  *((_DWORD *)a4 + 131) = *(_DWORD *)(a2 + 52);
  *((_DWORD *)a4 + 132) = *(_DWORD *)a2 >> a3;
  *((_DWORD *)a4 + 141) &= 0x8000E000;
  __int16 v45 = 204;
  uint64_t v46 = 0x7C001C00020000;
  if (a3)
  {
    int v47 = 8;
    int v48 = 2;
  }
  else
  {
    *(void *)(a4 + 572) = 0x7C001C00020000;
    *((_WORD *)a4 + 290) = 204;
    uint64_t v46 = 0x710035000F0003;
    int v47 = 12;
    __int16 v45 = 144;
    int v48 = 3;
  }
  *((_DWORD *)a4 + 142) = v48;
  *(void *)(a4 + 582) = v46;
  *((_WORD *)a4 + 295) = v45;
  unsigned int v49 = v47 | (a3 != 0) | *((_DWORD *)a4 + 169) & 0xFFFFFFF0;
  *((_DWORD *)a4 + 169) = v49;
  *((_DWORD *)a4 + 169) = v49 & 0xFFFFFFED | (16 * (*(unsigned __int16 *)(a2 + 50) - 1 != a3));
}

void sub_219494804(uint64_t a1, uint64_t a2, int8x16_t *a3)
{
  sub_2194949D4(a1, a2, a3);
  uint64_t v5 = *(unsigned __int16 *)(a2 + 50);
  uint64_t v6 = 2 * v5;
  unint64_t v7 = 2 * v5 - 1;
  if (v7 < 8 || (unint64_t)&a3[27] < a2 + 48 && a2 + 43 < (unint64_t)&a3[26].u64[v5 + 1] + 4)
  {
    unint64_t v8 = 0;
    goto LABEL_5;
  }
  if (v7 < 0x10)
  {
    unint64_t v8 = 0;
LABEL_14:
    unint64_t v37 = v8;
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v38 = (const char *)(a2 + 43);
    uint8x8_t v39 = (uint8x8_t)vld1_dup_s8(v38);
    uint16x8_t v40 = vmovl_u8(v39);
    int8x16_t v41 = (int8x16_t)vmovl_high_u16(v40);
    int8x16_t v42 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v40.i8);
    v43.i64[0] = 0x3F003F003F003FLL;
    v43.i64[1] = 0x3F003F003F003FLL;
    _Q0 = vdupq_lane_s16((int16x4_t)*(_OWORD *)&vandq_s8(*(int8x16_t *)(a2 + 46), v43), 0);
    __asm { SHLL2           V3.4S, V0.8H, #0x10 }
    int8x16_t v46 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
    int v47 = (int8x16_t *)((char *)a3 + 4 * v37 + 432);
    unint64_t v48 = v37 - v8;
    int8x16_t v49 = (int8x16_t)vdupq_n_s32(0xFFC0FFFE);
    int8x16_t v50 = vorrq_s8(_Q3, v41);
    int8x16_t v51 = vorrq_s8(v46, v42);
    do
    {
      int8x16_t v52 = vorrq_s8(v50, vandq_s8(v47[1], v49));
      *int v47 = vorrq_s8(v51, vandq_s8(*v47, v49));
      v47[1] = v52;
      v47 += 2;
      v48 += 8;
    }
    while (v48);
    goto LABEL_5;
  }
  unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF0;
  unsigned int v13 = (const char *)(a2 + 43);
  uint8x16_t v14 = (uint8x16_t)vld1q_dup_s8(v13);
  uint16x8_t v15 = vmovl_high_u8(v14);
  int8x16_t v16 = (int8x16_t)vmovl_high_u16(v15);
  int8x16_t v17 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v15.i8);
  uint16x8_t v18 = vmovl_u8(*(uint8x8_t *)v14.i8);
  int8x16_t v19 = (int8x16_t)vmovl_high_u16(v18);
  _Q1 = vdupq_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)(a2 + 46), (int8x8_t)0x3F003F003F003FLL), 0);
  int8x16_t v21 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v18.i8);
  __asm { SHLL2           V6.4S, V1.8H, #0x10 }
  int8x16_t v26 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
  int8x16_t v27 = (int8x16_t)vdupq_n_s32(0xFFC0FFFE);
  int v28 = a3 + 27;
  int8x16_t v29 = vorrq_s8(_Q6, v16);
  int8x16_t v30 = vorrq_s8(_Q6, v19);
  int8x16_t v31 = vorrq_s8(v26, v21);
  int8x16_t v32 = vorrq_s8(v26, v17);
  unint64_t v33 = v7 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    int8x16_t v34 = vorrq_s8(v29, vandq_s8(v28[3], v27));
    int8x16_t v35 = vorrq_s8(v30, vandq_s8(v28[1], v27));
    int8x16_t v36 = vorrq_s8(v32, vandq_s8(v28[2], v27));
    *int v28 = vorrq_s8(v31, vandq_s8(*v28, v27));
    v28[1] = v35;
    v28[2] = v36;
    v28[3] = v34;
    v28 += 4;
    v33 -= 16;
  }
  while (v33);
  if ((v7 & 8) != 0) {
    goto LABEL_14;
  }
LABEL_5:
  uint64_t v9 = v8 - v6 + 1;
  int v10 = (unsigned int *)&a3[27] + v8;
  do
  {
    unsigned int v11 = *v10 & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 43);
    unsigned int *v10 = v11;
    *v10++ = v11 & 0xFFC0FFFF | ((*(_WORD *)(a2 + 46) & 0x3F) << 16);
  }
  while (!__CFADD__(v9++, 1));
  a3[44].i64[0] |= 0x180uLL;
}

void sub_2194949D4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v3 = *(unsigned __int16 *)(a2 + 50);
  if ((v3 & 0xFFFE) != 4) {
    sub_219505D60();
  }
  if (sub_2194E223C(*(_DWORD *)a2, *(_DWORD *)(a2 + 4)) != v3) {
    sub_219505D28();
  }
  uint64_t v7 = *(unsigned __int16 *)(a2 + 50);
  unint64_t v8 = 2 * v7;
  bzero(a3, 0x400uLL);
  *a3 = 4384;
  *((_WORD *)a3 + 2) = *(_DWORD *)a2;
  *((_WORD *)a3 + 3) = *(_DWORD *)(a2 + 4);
  *((void *)a3 + 33) = 0;
  *(_OWORD *)(a3 + 62) = 0u;
  *(_OWORD *)(a3 + 58) = 0u;
  *(_OWORD *)(a3 + 54) = 0u;
  *(_OWORD *)(a3 + 50) = 0u;
  *(_OWORD *)(a3 + 46) = 0u;
  *(_OWORD *)(a3 + 42) = 0u;
  *(_OWORD *)(a3 + 38) = 0u;
  *(_OWORD *)(a3 + 34) = 0u;
  *(_OWORD *)(a3 + 30) = 0u;
  *(_OWORD *)(a3 + 26) = 0u;
  *(_OWORD *)(a3 + 22) = 0u;
  *(_OWORD *)(a3 + 18) = 0u;
  *(_OWORD *)(a3 + 14) = 0u;
  *(_OWORD *)(a3 + 10) = 0u;
  *(_OWORD *)(a3 + 6) = 0u;
  *(_OWORD *)(a3 + 2) = 0u;
  if (*(_WORD *)(a2 + 50) == 5) {
    int v9 = 1023;
  }
  else {
    int v9 = 255;
  }
  if (*(unsigned char *)(a2 + 84)) {
    int v10 = v9;
  }
  else {
    int v10 = 0;
  }
  a3[68] = v10;
  if (*(_WORD *)(a2 + 50) == 5) {
    int v11 = 1023;
  }
  else {
    int v11 = 255;
  }
  if (*(unsigned char *)(a2 + 85)) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  a3[69] = v12;
  char v13 = *(unsigned char *)(a2 + 86);
  if (*(_WORD *)(a2 + 50) == 5) {
    int v14 = 510;
  }
  else {
    int v14 = 126;
  }
  if (!*(unsigned char *)(a2 + 86)) {
    int v14 = 0;
  }
  a3[70] = v14;
  char v15 = v13 | *(unsigned char *)(a2 + 87) | *(unsigned char *)(a2 + 88) | *(unsigned char *)(a2 + 89) | *(unsigned char *)(a2 + 153) | *(unsigned char *)(a2 + 92);
  if (*(_WORD *)(a2 + 50) == 5) {
    int v16 = 510;
  }
  else {
    int v16 = 126;
  }
  if (v15) {
    int v17 = v16;
  }
  else {
    int v17 = 0;
  }
  a3[71] = v17;
  if (v7)
  {
    if (v8 <= 1) {
      unint64_t v18 = 1;
    }
    else {
      unint64_t v18 = 2 * v7;
    }
    if (v18 >= 8)
    {
      uint64_t v19 = v18 & 0x1FFF8;
      int64x2_t v20 = (int64x2_t)xmmword_21950BFB0;
      int64x2_t v21 = (int64x2_t)xmmword_21950BFC0;
      int64x2_t v22 = (int64x2_t)xmmword_21950BFD0;
      int64x2_t v23 = (int64x2_t)xmmword_21950BFE0;
      unsigned int v24 = (int8x16_t *)(a3 + 103);
      v25.i64[0] = 0x3000300030003;
      v25.i64[1] = 0x3000300030003;
      int8x16_t v26 = (int8x16_t)vdupq_n_s64(1uLL);
      v27.i64[0] = 0x20002000200020;
      v27.i64[1] = 0x20002000200020;
      v28.i64[0] = 0x10001000100010;
      v28.i64[1] = 0x10001000100010;
      int64x2_t v29 = vdupq_n_s64(8uLL);
      uint64_t v30 = v18 & 0x1FFF8;
      do
      {
        *(int8x16_t *)((char *)v24 - 124) = v25;
        *v24++ = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v23, v26)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v22, v26))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v21, v26)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v20, v26)))), v28, v27);
        int64x2_t v21 = vaddq_s64(v21, v29);
        int64x2_t v22 = vaddq_s64(v22, v29);
        int64x2_t v23 = vaddq_s64(v23, v29);
        int64x2_t v20 = vaddq_s64(v20, v29);
        v30 -= 8;
      }
      while (v30);
      if (v18 == v19) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    do
    {
      int8x16_t v31 = (char *)a3 + 2 * v19;
      *((_WORD *)v31 + 144) = 3;
      if (v19) {
        __int16 v32 = 32;
      }
      else {
        __int16 v32 = 16;
      }
      *((_WORD *)v31 + 206) = v32;
      ++v19;
    }
    while (v18 != v19);
  }
LABEL_39:
  a3[77] = 0;
  uint64_t v33 = *(unsigned __int16 *)(a1 + 68);
  if (*(_WORD *)(a1 + 68))
  {
    unsigned int v34 = *(unsigned __int16 *)(a2 + 20);
    if (v33 >= 8)
    {
      uint64_t v35 = 0;
      int32x4_t v36 = vdupq_n_s32(v34);
      unint64_t v37 = a3 + 78;
      do
      {
        uint64_t v38 = (unsigned __int16)v33 & 0xFFF8;
        uint8x8_t v39 = (int32x4_t *)v37;
        do
        {
          *uint8x8_t v39 = v36;
          v39[1] = v36;
          v39 += 2;
          v38 -= 8;
        }
        while (v38);
        for (uint64_t i = (unsigned __int16)v33 & 0xFFF8; v33 != i; ++i)
          *((_DWORD *)v37 + i) = v34;
        ++v35;
        unint64_t v37 = (_OWORD *)((char *)v37 + 20);
      }
      while (v35 != v33);
    }
    else
    {
      a3[78] = v34;
      if (v33 != 1)
      {
        a3[79] = v34;
        if (v33 != 2)
        {
          a3[80] = v34;
          if (v33 != 3)
          {
            a3[81] = v34;
            if (v33 != 4)
            {
              a3[82] = v34;
              if (v33 != 5)
              {
                a3[83] = v34;
                if (v33 != 6) {
                  a3[84] = v34;
                }
              }
            }
          }
        }
        a3[83] = v34;
        a3[84] = v34;
        if (v33 != 2)
        {
          a3[85] = v34;
          if (v33 != 3)
          {
            a3[86] = v34;
            if (v33 != 4)
            {
              a3[87] = v34;
              if (v33 != 5)
              {
                a3[88] = v34;
                if (v33 != 6) {
                  a3[89] = v34;
                }
              }
            }
          }
          a3[88] = v34;
          a3[89] = v34;
          a3[90] = v34;
          if (v33 != 3)
          {
            a3[91] = v34;
            if (v33 != 4)
            {
              a3[92] = v34;
              if (v33 != 5)
              {
                a3[93] = v34;
                if (v33 != 6) {
                  a3[94] = v34;
                }
              }
            }
            a3[93] = v34;
            a3[94] = v34;
            a3[95] = v34;
            a3[96] = v34;
            if (v33 != 4)
            {
              a3[97] = v34;
              if (v33 != 5)
              {
                a3[98] = v34;
                if (v33 != 6) {
                  a3[99] = v34;
                }
              }
              a3[98] = v34;
              a3[99] = v34;
              a3[100] = v34;
              a3[101] = v34;
              a3[102] = v34;
              if (v33 != 5)
              {
                a3[103] = v34;
                if (v33 != 6) {
                  a3[104] = v34;
                }
                a3[103] = v34;
                a3[104] = v34;
                a3[105] = v34;
                a3[106] = v34;
                a3[107] = v34;
                a3[108] = v34;
                if (v33 != 6)
                {
                  a3[109] = v34;
                  a3[108] = v34;
                  a3[109] = v34;
                  a3[110] = v34;
                  a3[111] = v34;
                  a3[112] = v34;
                  a3[113] = v34;
                  a3[114] = v34;
                }
              }
            }
          }
        }
      }
    }
  }
  sub_219496F20(a1, a2, (uint64_t)a3);
  unint64_t v41 = *(void *)(a3 + 129) & 0xFFFF8080E000F000 | 0x10100100010;
  *(void *)(a3 + 127) = *(void *)(a3 + 127) & 0xF000F800FFFFF0FELL | 0x5000500000000;
  *(void *)(a3 + 129) = v41;
  a3[131] = *(_DWORD *)(a2 + 24);
  a3[132] = 2047;
  a3[133] = sub_2194E2288(*(_DWORD *)a2, 0);
  int v42 = sub_2194E2288(*(_DWORD *)a2, 1u);
  a3[134] = v42;
  a3[135] = v42;
  int v43 = sub_2194E2288(*(_DWORD *)a2, 2u);
  a3[136] = v43;
  a3[137] = v43;
  int v44 = sub_2194E2288(*(_DWORD *)a2, 3u);
  a3[138] = v44;
  if (*(_WORD *)(a2 + 50) == 5)
  {
    a3[139] = v44;
    a3[140] = sub_2194E2288(*(_DWORD *)a2, 4u);
  }
  a3[141] &= 0x8000E000;
  a3[142] = 1023;
  *(_OWORD *)(a3 + 143) = xmmword_21950BFF0;
  a3[147] = 9437297;
  if (v7 >= 2)
  {
    __int16 v45 = (char *)a3 + 610;
    unint64_t v46 = 2;
    do
    {
      *(_OWORD *)(v45 - 18) = xmmword_21950C000;
      *(_DWORD *)(v45 - 2) = 9830514;
      v46 += 2;
      v45 += 20;
    }
    while (v46 < v8);
  }
  unint64_t v47 = *((void *)a3 + 88) & 0xFFFFFFFFFFFFFFF0 | *(unsigned __int8 *)(a2 + 89);
  *((void *)a3 + 88) = v47;
  if (*(unsigned char *)(a2 + 88))
  {
    uint64_t v48 = v47 | 8;
    if (*(unsigned char *)(a2 + 91) == 1) {
      v47 |= 4uLL;
    }
    if (!*(unsigned char *)(a2 + 91)) {
      unint64_t v47 = v48;
    }
  }
  *((void *)a3 + 88) = v47 & 0x7FF00000FFE0018FLL | 0x88000;
  if (*(_WORD *)(a2 + 50) == 5) {
    int v49 = 510;
  }
  else {
    int v49 = 126;
  }
  if (*(unsigned char *)(a2 + 87)) {
    int v50 = v49;
  }
  else {
    int v50 = 0;
  }
  a3[178] = v50;
  unint64_t v51 = *(unsigned int *)(a2 + 28);
  v82[0] = v51;
  v82[1] = v51;
  v82[2] = v51;
  v82[3] = v51;
  v83[0] = v51;
  v83[1] = v51;
  v83[2] = v51;
  v83[3] = v51;
  if (*(unsigned char *)(a2 + 76)) {
    sub_2194E1EE8(v51, 2 * v7, v82);
  }
  unint64_t v52 = v8 - 1;
  if (v8 != 2)
  {
    unint64_t v53 = 2;
    if (v52 > 2) {
      unint64_t v53 = v8 - 1;
    }
    if (v53 < 9)
    {
      uint64_t v54 = 1;
LABEL_101:
      unint64_t v63 = v53 - v54;
      double v64 = &v82[v54 - 1];
      uint32x4_t v65 = &a3[v54 + 179];
      do
      {
        uint64_t v66 = *v64++;
        *v65++ = v66;
        --v63;
      }
      while (v63);
      goto LABEL_103;
    }
    unint64_t v55 = (v53 - 1) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v54 = v55 | 1;
    float v56 = (int32x4_t *)v83;
    float v57 = (int32x4_t *)(a3 + 184);
    unint64_t v58 = v55;
    do
    {
      int32x4_t v60 = v56[-2];
      int32x4_t v59 = v56[-1];
      int32x4_t v62 = *v56;
      int32x4_t v61 = v56[1];
      v56 += 4;
      v57[-1] = vuzp1q_s32(v60, v59);
      *float v57 = vuzp1q_s32(v62, v61);
      v57 += 2;
      v58 -= 8;
    }
    while (v58);
    if (v53 - 1 != v55) {
      goto LABEL_101;
    }
  }
LABEL_103:
  memset_pattern16(a3 + 188, &unk_21950C350, 8 * v7 - 4);
  unsigned int v67 = a3[197] & 0xFFFFFC00 | *(_DWORD *)a2 & 0x3FF;
  a3[197] = v67;
  a3[197] = v67 & 0xE000FFFF | ((*(_DWORD *)(a2 + 4) & 0x1FFF) << 16);
  *(_OWORD *)(a3 + 198) = xmmword_21950C010;
  *(_OWORD *)(a3 + 202) = xmmword_21950C020;
  *(_OWORD *)(a3 + 206) = xmmword_21950C030;
  *(_OWORD *)(a3 + 210) = xmmword_21950C040;
  *((void *)a3 + 107) = 0x1D002E00230039;
  unsigned int v68 = (const __int16 *)(a2 + 20);
  if (v52 > 7 && ((unint64_t)(a3 + 216) >= a2 + 22 || v68 >= (const __int16 *)&a3[v7 + 229]))
  {
    unint64_t v69 = v52 & 0xFFFFFFFFFFFFFFF8;
    int16x8_t v70 = vld1q_dup_s16(v68);
    unint64_t v71 = (int16x8_t *)((char *)a3 + 918);
    v72.i64[0] = 0x1000100010001;
    v72.i64[1] = 0x1000100010001;
    v73.i64[0] = -1;
    v73.i64[1] = -1;
    unint64_t v74 = v52 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      *(int16x8_t *)((char *)v71 - 54) = v72;
      *(int16x8_t *)((char *)v71 - 36) = v73;
      int16x8_t *v71 = v70;
      *(int16x8_t *)((char *)v71++ - 18) = v70;
      v74 -= 8;
    }
    while (v74);
  }
  else
  {
    unint64_t v69 = 0;
  }
  uint64_t v75 = v69 - v8 + 1;
  unsigned int v76 = (__int16 *)a3 + v69 + 459;
  do
  {
    *(v76 - 27) = 1;
    *(v76 - 18) = -1;
    *unsigned int v76 = *v68;
    *(v76 - 9) = *v68;
    ++v76;
  }
  while (!__CFADD__(v75++, 1));
  *(_OWORD *)(a3 + 234) = xmmword_21950C340;
  *((void *)a3 + 119) = 640;
  a3[240] = 0;
  int v78 = *(unsigned __int16 *)(a2 + 50);
  if (v78 == 5) {
    int v79 = 15;
  }
  else {
    int v79 = 7;
  }
  a3[241] = v79;
  if (v78 != 1)
  {
    unint64_t v80 = 0;
    signed int v81 = (char *)a3 + 970;
    do
    {
      *(_DWORD *)(v81 - 2) = 19267693;
      ++v80;
      v81 += 4;
    }
    while (v80 < (unint64_t)*(unsigned __int16 *)(a2 + 50) - 1);
  }
}

unsigned int sub_2194952FC(unsigned int a1)
{
  return vcvts_n_u32_f32(ceilf((float)a1 * 0.0019531) + 1.0, 9uLL);
}

uint64_t sub_21949531C(unsigned int a1)
{
  return vcvts_n_u32_f32(ceilf((float)a1 * 0.0019531) + 1.0, 9uLL) >> 5;
}

uint64_t sub_219495340(unsigned int a1)
{
  if (a1 > 2) {
    return 0;
  }
  else {
    return dword_21950C360[(char)a1];
  }
}

uint64_t sub_219495364(unsigned int a1)
{
  if (a1 > 2) {
    return 12;
  }
  else {
    return dword_21950C36C[(char)a1];
  }
}

uint64_t sub_219495388(unsigned int a1)
{
  if ((((vcvts_n_u32_f32(ceilf((float)a1 * 0.0019531) + 1.0, 9uLL) >> 9) + 7) & 0xFFFFF8) >= 0x19) {
    sub_219505D98();
  }
  return 24;
}

void sub_2194953D0(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, uint64_t a5)
{
  sub_2194956F4(a1, a2, a3);
  uint64_t v9 = *(unsigned __int16 *)(a2 + 50);
  uint64_t v10 = 2 * v9;
  unint64_t v11 = 2 * v9 - 1;
  if (v11 < 8 || (unint64_t)&a3[27] < a2 + 48 && a2 + 43 < (unint64_t)&a3[26].u64[v9 + 1] + 4)
  {
    unint64_t v12 = 0;
    goto LABEL_12;
  }
  if (v11 < 0x10)
  {
    unint64_t v12 = 0;
LABEL_10:
    unint64_t v38 = v12;
    unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    uint8x8_t v39 = (const char *)(a2 + 43);
    uint8x8_t v40 = (uint8x8_t)vld1_dup_s8(v39);
    uint16x8_t v41 = vmovl_u8(v40);
    int8x16_t v42 = (int8x16_t)vmovl_high_u16(v41);
    int8x16_t v43 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v41.i8);
    v44.i64[0] = 0x3F003F003F003FLL;
    v44.i64[1] = 0x3F003F003F003FLL;
    _Q0 = vdupq_lane_s16((int16x4_t)*(_OWORD *)&vandq_s8(*(int8x16_t *)(a2 + 46), v44), 0);
    __asm { SHLL2           V3.4S, V0.8H, #0x10 }
    int8x16_t v47 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
    uint64_t v48 = (int8x16_t *)((char *)a3 + 4 * v38 + 432);
    unint64_t v49 = v38 - v12;
    int8x16_t v50 = (int8x16_t)vdupq_n_s32(0xFFC0FFFE);
    int8x16_t v51 = vorrq_s8(_Q3, v42);
    int8x16_t v52 = vorrq_s8(v47, v43);
    do
    {
      int8x16_t v53 = vorrq_s8(v51, vandq_s8(v48[1], v50));
      *uint64_t v48 = vorrq_s8(v52, vandq_s8(*v48, v50));
      v48[1] = v53;
      v48 += 2;
      v49 += 8;
    }
    while (v49);
    goto LABEL_12;
  }
  unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFF0;
  char v13 = (const char *)(a2 + 43);
  uint8x16_t v14 = (uint8x16_t)vld1q_dup_s8(v13);
  uint16x8_t v15 = vmovl_high_u8(v14);
  int8x16_t v16 = (int8x16_t)vmovl_high_u16(v15);
  int8x16_t v17 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v15.i8);
  uint16x8_t v18 = vmovl_u8(*(uint8x8_t *)v14.i8);
  int8x16_t v19 = (int8x16_t)vmovl_high_u16(v18);
  _Q1 = vdupq_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)(a2 + 46), (int8x8_t)0x3F003F003F003FLL), 0);
  int8x16_t v21 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v18.i8);
  __asm { SHLL2           V6.4S, V1.8H, #0x10 }
  int8x16_t v27 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
  int8x16_t v28 = (int8x16_t)vdupq_n_s32(0xFFC0FFFE);
  int64x2_t v29 = a3 + 27;
  int8x16_t v30 = vorrq_s8(_Q6, v16);
  int8x16_t v31 = vorrq_s8(_Q6, v19);
  int8x16_t v32 = vorrq_s8(v27, v21);
  int8x16_t v33 = vorrq_s8(v27, v17);
  unint64_t v34 = v11 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    int8x16_t v35 = vorrq_s8(v30, vandq_s8(v29[3], v28));
    int8x16_t v36 = vorrq_s8(v31, vandq_s8(v29[1], v28));
    int8x16_t v37 = vorrq_s8(v33, vandq_s8(v29[2], v28));
    *int64x2_t v29 = vorrq_s8(v32, vandq_s8(*v29, v28));
    v29[1] = v36;
    v29[2] = v37;
    v29[3] = v35;
    v29 += 4;
    v34 -= 16;
  }
  while (v34);
  if ((v11 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_12:
  uint64_t v54 = v12 - v10 + 1;
  unint64_t v55 = (unsigned int *)&a3[27] + v12;
  do
  {
    unsigned int v56 = *v55 & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 43);
    *unint64_t v55 = v56;
    *v55++ = v56 & 0xFFC0FFFF | ((*(_WORD *)(a2 + 46) & 0x3F) << 16);
  }
  while (!__CFADD__(v54++, 1));
  if (*(unsigned char *)(a2 + 92)) {
    unsigned __int8 v57 = 1;
  }
  else {
    unsigned __int8 v57 = *(unsigned char *)(a2 + 153);
  }
  unsigned int v58 = a3[62].i32[3] & 0xFFFFFFFE | v57;
  a3[62].i32[3] = v58;
  if (*(unsigned __int8 *)(a2 + 92) | *(unsigned __int8 *)(a2 + 153))
  {
    unsigned int v59 = v58 & 0xFFFE00FF | (((vcvts_n_u32_f32(ceilf((float)*(unsigned int *)(a2 + 24) * 0.0019531) + 1.0, 9uLL) >> 5) & 0x1FF) << 8);
    a3[62].i32[3] = v59;
    a3[62].i32[3] = v59 & 0xF8FFFFFF | ((*(unsigned char *)(a2 + 132) & 3) << 24);
    unsigned int v60 = vcvts_n_u32_f32(ceilf((float)*(unsigned int *)(a2 + 24) * 0.0019531) + 1.0, 9uLL);
    if ((((v60 >> 9) + 7) & 0xFFFFF8) >= 0x19) {
      sub_219505D98();
    }
    a3[64].i32[0] = 24;
    uint64_t v61 = *(unsigned int *)(a4 + 72);
    unint64_t v62 = *(void *)(a4 + 64) + v61;
    a3[63].i32[0] = v62 & 0xFFFFF;
    a3[63].i32[1] = v62 >> 20;
    *(unsigned char *)(a5 + 360) = 1;
    *(_DWORD *)(a5 + 364) = v61;
    unint64_t v63 = *(char *)(a2 + 132);
    if (v63 > 2) {
      unsigned int v64 = 12;
    }
    else {
      unsigned int v64 = dword_21950C36C[v63];
    }
    if (sub_2194C02DC(v64 * v60, 0, 64, a5 + 340) >= 0x42401) {
      sub_219505DD0();
    }
    int v65 = *(_DWORD *)(a4 + 72) + 271360;
    a3[63].i32[2] = (v62 + 271360) & 0xFFFFF;
    a3[63].i32[3] = (v62 + 271360) >> 20;
    *(_DWORD *)(a4 + 72) = v65 + (a3[64].i32[0] << 6);
  }
}

void sub_2194956F4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v3 = *(unsigned __int16 *)(a2 + 50);
  if ((v3 & 0xFFFE) != 4) {
    sub_219505D60();
  }
  if (sub_2194E223C(*(_DWORD *)a2, *(_DWORD *)(a2 + 4)) != v3) {
    sub_219505D28();
  }
  uint64_t v7 = *(unsigned __int16 *)(a2 + 50);
  unint64_t v8 = 2 * v7;
  bzero(a3, 0x440uLL);
  *a3 = 4384;
  *((_WORD *)a3 + 2) = *(_DWORD *)a2;
  *((_WORD *)a3 + 3) = *(_DWORD *)(a2 + 4);
  *((void *)a3 + 33) = 0;
  *(_OWORD *)(a3 + 62) = 0u;
  *(_OWORD *)(a3 + 58) = 0u;
  *(_OWORD *)(a3 + 54) = 0u;
  *(_OWORD *)(a3 + 50) = 0u;
  *(_OWORD *)(a3 + 46) = 0u;
  *(_OWORD *)(a3 + 42) = 0u;
  *(_OWORD *)(a3 + 38) = 0u;
  *(_OWORD *)(a3 + 34) = 0u;
  *(_OWORD *)(a3 + 30) = 0u;
  *(_OWORD *)(a3 + 26) = 0u;
  *(_OWORD *)(a3 + 22) = 0u;
  *(_OWORD *)(a3 + 18) = 0u;
  *(_OWORD *)(a3 + 14) = 0u;
  *(_OWORD *)(a3 + 10) = 0u;
  *(_OWORD *)(a3 + 6) = 0u;
  *(_OWORD *)(a3 + 2) = 0u;
  if (*(_WORD *)(a2 + 50) == 5) {
    int v9 = 1023;
  }
  else {
    int v9 = 255;
  }
  if (*(unsigned char *)(a2 + 84)) {
    int v10 = v9;
  }
  else {
    int v10 = 0;
  }
  a3[68] = v10;
  if (*(_WORD *)(a2 + 50) == 5) {
    int v11 = 1023;
  }
  else {
    int v11 = 255;
  }
  if (*(unsigned char *)(a2 + 85)) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  a3[69] = v12;
  char v13 = *(unsigned char *)(a2 + 86);
  if (*(_WORD *)(a2 + 50) == 5) {
    int v14 = 510;
  }
  else {
    int v14 = 126;
  }
  if (!*(unsigned char *)(a2 + 86)) {
    int v14 = 0;
  }
  a3[70] = v14;
  char v15 = v13 | *(unsigned char *)(a2 + 87) | *(unsigned char *)(a2 + 88) | *(unsigned char *)(a2 + 89) | *(unsigned char *)(a2 + 153) | *(unsigned char *)(a2 + 92);
  if (*(_WORD *)(a2 + 50) == 5) {
    int v16 = 510;
  }
  else {
    int v16 = 126;
  }
  if (v15) {
    int v17 = v16;
  }
  else {
    int v17 = 0;
  }
  a3[71] = v17;
  if (v7)
  {
    if (v8 <= 1) {
      unint64_t v18 = 1;
    }
    else {
      unint64_t v18 = 2 * v7;
    }
    if (v18 >= 8)
    {
      uint64_t v19 = v18 & 0x1FFF8;
      int64x2_t v20 = (int64x2_t)xmmword_21950BFB0;
      int64x2_t v21 = (int64x2_t)xmmword_21950BFC0;
      int64x2_t v22 = (int64x2_t)xmmword_21950BFD0;
      int64x2_t v23 = (int64x2_t)xmmword_21950BFE0;
      unsigned int v24 = (int8x16_t *)(a3 + 103);
      v25.i64[0] = 0x3000300030003;
      v25.i64[1] = 0x3000300030003;
      int8x16_t v26 = (int8x16_t)vdupq_n_s64(1uLL);
      v27.i64[0] = 0x20002000200020;
      v27.i64[1] = 0x20002000200020;
      v28.i64[0] = 0x10001000100010;
      v28.i64[1] = 0x10001000100010;
      int64x2_t v29 = vdupq_n_s64(8uLL);
      uint64_t v30 = v18 & 0x1FFF8;
      do
      {
        *(int8x16_t *)((char *)v24 - 124) = v25;
        *v24++ = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v23, v26)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v22, v26))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v21, v26)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v20, v26)))), v28, v27);
        int64x2_t v21 = vaddq_s64(v21, v29);
        int64x2_t v22 = vaddq_s64(v22, v29);
        int64x2_t v23 = vaddq_s64(v23, v29);
        int64x2_t v20 = vaddq_s64(v20, v29);
        v30 -= 8;
      }
      while (v30);
      if (v18 == v19) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    do
    {
      int8x16_t v31 = (char *)a3 + 2 * v19;
      *((_WORD *)v31 + 144) = 3;
      if (v19) {
        __int16 v32 = 32;
      }
      else {
        __int16 v32 = 16;
      }
      *((_WORD *)v31 + 206) = v32;
      ++v19;
    }
    while (v18 != v19);
  }
LABEL_39:
  a3[77] = 0;
  uint64_t v33 = *(unsigned __int16 *)(a1 + 68);
  if (*(_WORD *)(a1 + 68))
  {
    unsigned int v34 = *(unsigned __int16 *)(a2 + 20);
    if (v33 >= 8)
    {
      uint64_t v35 = 0;
      int32x4_t v36 = vdupq_n_s32(v34);
      int8x16_t v37 = a3 + 78;
      do
      {
        uint64_t v38 = (unsigned __int16)v33 & 0xFFF8;
        uint8x8_t v39 = (int32x4_t *)v37;
        do
        {
          *uint8x8_t v39 = v36;
          v39[1] = v36;
          v39 += 2;
          v38 -= 8;
        }
        while (v38);
        for (uint64_t i = (unsigned __int16)v33 & 0xFFF8; v33 != i; ++i)
          *((_DWORD *)v37 + i) = v34;
        ++v35;
        int8x16_t v37 = (_OWORD *)((char *)v37 + 20);
      }
      while (v35 != v33);
    }
    else
    {
      a3[78] = v34;
      if (v33 != 1)
      {
        a3[79] = v34;
        if (v33 != 2)
        {
          a3[80] = v34;
          if (v33 != 3)
          {
            a3[81] = v34;
            if (v33 != 4)
            {
              a3[82] = v34;
              if (v33 != 5)
              {
                a3[83] = v34;
                if (v33 != 6) {
                  a3[84] = v34;
                }
              }
            }
          }
        }
        a3[83] = v34;
        a3[84] = v34;
        if (v33 != 2)
        {
          a3[85] = v34;
          if (v33 != 3)
          {
            a3[86] = v34;
            if (v33 != 4)
            {
              a3[87] = v34;
              if (v33 != 5)
              {
                a3[88] = v34;
                if (v33 != 6) {
                  a3[89] = v34;
                }
              }
            }
          }
          a3[88] = v34;
          a3[89] = v34;
          a3[90] = v34;
          if (v33 != 3)
          {
            a3[91] = v34;
            if (v33 != 4)
            {
              a3[92] = v34;
              if (v33 != 5)
              {
                a3[93] = v34;
                if (v33 != 6) {
                  a3[94] = v34;
                }
              }
            }
            a3[93] = v34;
            a3[94] = v34;
            a3[95] = v34;
            a3[96] = v34;
            if (v33 != 4)
            {
              a3[97] = v34;
              if (v33 != 5)
              {
                a3[98] = v34;
                if (v33 != 6) {
                  a3[99] = v34;
                }
              }
              a3[98] = v34;
              a3[99] = v34;
              a3[100] = v34;
              a3[101] = v34;
              a3[102] = v34;
              if (v33 != 5)
              {
                a3[103] = v34;
                if (v33 != 6) {
                  a3[104] = v34;
                }
                a3[103] = v34;
                a3[104] = v34;
                a3[105] = v34;
                a3[106] = v34;
                a3[107] = v34;
                a3[108] = v34;
                if (v33 != 6)
                {
                  a3[109] = v34;
                  a3[108] = v34;
                  a3[109] = v34;
                  a3[110] = v34;
                  a3[111] = v34;
                  a3[112] = v34;
                  a3[113] = v34;
                  a3[114] = v34;
                }
              }
            }
          }
        }
      }
    }
  }
  sub_219496F20(a1, a2, (uint64_t)a3);
  unint64_t v41 = *(void *)(a3 + 129) & 0xFFFF8080E000F000 | 0x10100100010;
  *(void *)(a3 + 127) = *(void *)(a3 + 127) & 0xF000F800FFFFF0FELL | 0x5000500000000;
  *(void *)(a3 + 129) = v41;
  a3[131] = *(_DWORD *)(a2 + 24);
  a3[132] = 2047;
  a3[133] = sub_2194E2288(*(_DWORD *)a2, 0);
  int v42 = sub_2194E2288(*(_DWORD *)a2, 1u);
  a3[134] = v42;
  a3[135] = v42;
  int v43 = sub_2194E2288(*(_DWORD *)a2, 2u);
  a3[136] = v43;
  a3[137] = v43;
  int v44 = sub_2194E2288(*(_DWORD *)a2, 3u);
  a3[138] = v44;
  if (*(_WORD *)(a2 + 50) == 5)
  {
    a3[139] = v44;
    a3[140] = sub_2194E2288(*(_DWORD *)a2, 4u);
  }
  a3[141] &= 0x8000E000;
  a3[142] = 1023;
  *(_OWORD *)(a3 + 143) = xmmword_21950BFF0;
  a3[147] = 9437297;
  if (v7 >= 2)
  {
    __int16 v45 = (char *)a3 + 610;
    unint64_t v46 = 2;
    do
    {
      *(_OWORD *)(v45 - 18) = xmmword_21950C000;
      *(_DWORD *)(v45 - 2) = 9830514;
      v46 += 2;
      v45 += 20;
    }
    while (v46 < v8);
  }
  unint64_t v47 = *((void *)a3 + 88) & 0xFFFFFFFFFFFFFFF0 | *(unsigned __int8 *)(a2 + 89);
  *((void *)a3 + 88) = v47;
  if (*(unsigned char *)(a2 + 88))
  {
    uint64_t v48 = v47 | 8;
    if (*(unsigned char *)(a2 + 91) == 1) {
      v47 |= 4uLL;
    }
    if (!*(unsigned char *)(a2 + 91)) {
      unint64_t v47 = v48;
    }
  }
  *((void *)a3 + 88) = v47 & 0x7FF00000FFE0018FLL | 0x88000;
  if (*(_WORD *)(a2 + 50) == 5) {
    int v49 = 510;
  }
  else {
    int v49 = 126;
  }
  if (*(unsigned char *)(a2 + 87)) {
    int v50 = v49;
  }
  else {
    int v50 = 0;
  }
  a3[178] = v50;
  unint64_t v51 = *(unsigned int *)(a2 + 28);
  v82[0] = v51;
  v82[1] = v51;
  v82[2] = v51;
  v82[3] = v51;
  v83[0] = v51;
  v83[1] = v51;
  v83[2] = v51;
  v83[3] = v51;
  if (*(unsigned char *)(a2 + 76)) {
    sub_2194E1EE8(v51, 2 * v7, v82);
  }
  unint64_t v52 = v8 - 1;
  if (v8 != 2)
  {
    unint64_t v53 = 2;
    if (v52 > 2) {
      unint64_t v53 = v8 - 1;
    }
    if (v53 < 9)
    {
      uint64_t v54 = 1;
LABEL_101:
      unint64_t v63 = v53 - v54;
      unsigned int v64 = &v82[v54 - 1];
      int v65 = &a3[v54 + 179];
      do
      {
        uint64_t v66 = *v64++;
        *v65++ = v66;
        --v63;
      }
      while (v63);
      goto LABEL_103;
    }
    unint64_t v55 = (v53 - 1) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v54 = v55 | 1;
    unsigned int v56 = (int32x4_t *)v83;
    unsigned __int8 v57 = (int32x4_t *)(a3 + 184);
    unint64_t v58 = v55;
    do
    {
      int32x4_t v60 = v56[-2];
      int32x4_t v59 = v56[-1];
      int32x4_t v62 = *v56;
      int32x4_t v61 = v56[1];
      v56 += 4;
      v57[-1] = vuzp1q_s32(v60, v59);
      *unsigned __int8 v57 = vuzp1q_s32(v62, v61);
      v57 += 2;
      v58 -= 8;
    }
    while (v58);
    if (v53 - 1 != v55) {
      goto LABEL_101;
    }
  }
LABEL_103:
  memset_pattern16(a3 + 188, &unk_21950C350, 8 * v7 - 4);
  unsigned int v67 = a3[197] & 0xFFFFFC00 | *(_DWORD *)a2 & 0x3FF;
  a3[197] = v67;
  a3[197] = v67 & 0xE000FFFF | ((*(_DWORD *)(a2 + 4) & 0x1FFF) << 16);
  *(_OWORD *)(a3 + 198) = xmmword_21950C010;
  *(_OWORD *)(a3 + 202) = xmmword_21950C020;
  *(_OWORD *)(a3 + 206) = xmmword_21950C030;
  *(_OWORD *)(a3 + 210) = xmmword_21950C040;
  *((void *)a3 + 107) = 0x1D002E00230039;
  unsigned int v68 = (const __int16 *)(a2 + 20);
  if (v52 > 7 && ((unint64_t)(a3 + 221) >= a2 + 22 || v68 >= (const __int16 *)&a3[v7 + 234]))
  {
    unint64_t v69 = v52 & 0xFFFFFFFFFFFFFFF8;
    int16x8_t v70 = vld1q_dup_s16(v68);
    unint64_t v71 = a3 + 221;
    *(void *)&long long v72 = 0x1000100010001;
    *((void *)&v72 + 1) = 0x1000100010001;
    *(void *)&long long v73 = -1;
    *((void *)&v73 + 1) = -1;
    unint64_t v74 = v52 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      _OWORD *v71 = v72;
      *(_OWORD *)((char *)v71 + 18) = v73;
      *(int16x8_t *)((char *)v71 + 54) = v70;
      *(int16x8_t *)((char *)v71++ + 36) = v70;
      v74 -= 8;
    }
    while (v74);
  }
  else
  {
    unint64_t v69 = 0;
  }
  uint64_t v75 = v69 - v8 + 1;
  unsigned int v76 = (__int16 *)a3 + v69 + 469;
  do
  {
    *(v76 - 27) = 1;
    *(v76 - 18) = -1;
    *unsigned int v76 = *v68;
    *(v76 - 9) = *v68;
    ++v76;
  }
  while (!__CFADD__(v75++, 1));
  *(_OWORD *)(a3 + 239) = xmmword_21950C340;
  a3[243] = 640;
  *((void *)a3 + 122) = 0;
  int v78 = *(unsigned __int16 *)(a2 + 50);
  if (v78 == 5) {
    int v79 = 15;
  }
  else {
    int v79 = 7;
  }
  a3[246] = v79;
  if (v78 != 1)
  {
    unint64_t v80 = 0;
    signed int v81 = (char *)a3 + 990;
    do
    {
      *(_DWORD *)(v81 - 2) = 19267693;
      ++v80;
      v81 += 4;
    }
    while (v80 < (unint64_t)*(unsigned __int16 *)(a2 + 50) - 1);
  }
}

void sub_219496014(uint64_t a1, unsigned int a2, int a3)
{
  if (!a3) {
    sub_219505E08();
  }
  unint64_t v5 = a2;
  unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v7 = a2 >= v6;
  unint64_t v8 = a2 - v6;
  if (v8 != 0 && v7)
  {
    sub_219492AB4((char **)a1, v8);
  }
  else if (!v7)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 28 * v5;
  }
  uint64_t v9 = *(void *)(a1 + 72);
  unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 80) - v9) >> 2);
  if (v5 <= v10)
  {
    if (v5 < v10) {
      *(void *)(a1 + 80) = v9 + 28 * v5;
    }
  }
  else
  {
    sub_219492AB4((char **)(a1 + 72), v5 - v10);
  }
  if (a3 == 2)
  {
    uint64_t v14 = *(void *)(a1 + 120);
    char v13 = (char **)(a1 + 120);
    unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 128) - v14) >> 2);
    if (*(void *)(a1 + 128) != v14)
    {
      if (v15 < 2) {
        return;
      }
      uint64_t v16 = v14 + 28;
LABEL_31:
      *(void *)(a1 + 128) = v16;
      return;
    }
    unint64_t v23 = 1 - v15;
  }
  else
  {
    if (a3 != 1) {
      return;
    }
    uint64_t v11 = *(void *)(a1 + 24);
    unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 32) - v11) >> 2);
    if (v5 <= v12)
    {
      if (v5 < v12) {
        *(void *)(a1 + 32) = v11 + 28 * v5;
      }
    }
    else
    {
      sub_219492AB4((char **)(a1 + 24), v5 - v12);
    }
    uint64_t v17 = *(void *)(a1 + 48);
    unint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 56) - v17) >> 2);
    if (v5 <= v18)
    {
      if (v5 < v18) {
        *(void *)(a1 + 56) = v17 + 28 * v5;
      }
    }
    else
    {
      sub_219492AB4((char **)(a1 + 48), v5 - v18);
    }
    uint64_t v19 = *(void *)(a1 + 96);
    unint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 104) - v19) >> 2);
    if (v5 <= v20)
    {
      if (v5 < v20) {
        *(void *)(a1 + 104) = v19 + 28 * v5;
      }
    }
    else
    {
      sub_219492AB4((char **)(a1 + 96), v5 - v20);
    }
    uint64_t v21 = *(void *)(a1 + 120);
    char v13 = (char **)(a1 + 120);
    unint64_t v22 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 128) - v21) >> 2);
    unint64_t v23 = v5 - v22;
    if (v5 <= v22)
    {
      if (v5 >= v22) {
        return;
      }
      uint64_t v16 = v21 + 28 * v5;
      goto LABEL_31;
    }
  }

  sub_219492AB4(v13, v23);
}

uint64_t sub_21949624C(void *a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, void *a6)
{
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  int v12 = *(_DWORD *)(*a1 + 524);
  if (*a1 != v11)
  {
    do
    {
      if (*(_DWORD *)(v10 + 524) != v12) {
        sub_219505E40();
      }
      v10 += 1024;
    }
    while (v10 != v11);
  }
  if (a2)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    LODWORD(v15) = 0;
    unsigned int v23 = 4 * v12;
    unsigned int v16 = (a3 + 63) & 0xFFFFFFC0;
    uint64_t v17 = 676;
    uint64_t v18 = a2;
    while (1)
    {
      uint64_t v20 = *a1;
      int v21 = *(_DWORD *)(*a1 + v17 - 404);
      if (v21)
      {
        LODWORD(v15) = sub_2194C0260(*a6 + v13, a4 >> v14, a5 >> v14, v15, 8) + v15;
        uint64_t v20 = *a1;
        if ((*(_DWORD *)(*a1 + v17 - 404) & 2) == 0)
        {
LABEL_9:
          if ((*(unsigned char *)(v20 + v17) & 0x10) == 0) {
            goto LABEL_10;
          }
          goto LABEL_14;
        }
      }
      else if ((v21 & 2) == 0)
      {
        goto LABEL_9;
      }
      LODWORD(v15) = sub_2194C0260(a6[3] + v13, a4 >> v14, a5 >> v14, v15, 8) + v15;
      uint64_t v20 = *a1;
      if ((*(unsigned char *)(*a1 + v17) & 0x10) == 0)
      {
LABEL_10:
        if ((*(unsigned char *)(v20 + v17 - 400) & 3) == 0) {
          goto LABEL_6;
        }
LABEL_15:
        LODWORD(v15) = sub_2194C0214(a6[9] + v13, a4 >> v14, a5 >> v14, v15) + v15;
        goto LABEL_6;
      }
LABEL_14:
      LODWORD(v15) = sub_2194C0260(a6[6] + v13, a4 >> (v14 + 1), a5 >> (v14 + 1), v15, 4) + v15;
      if ((*(unsigned char *)(*a1 + v17 - 400) & 3) != 0) {
        goto LABEL_15;
      }
LABEL_6:
      int v19 = sub_2194C02DC(v23, v15, 64, a6[12] + v13) + v15;
      uint64_t v15 = sub_2194C0260(a6[15] + v13, v16, 1, v19, 8) + v19;
      ++v14;
      v17 += 1024;
      v13 += 28;
      if (v18 == v14) {
        return v15;
      }
    }
  }
  return 0;
}

uint64_t sub_219496444(void *a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, void *a6)
{
  if (a1[1] - *a1 != 1024) {
    sub_219505E78();
  }
  unint64_t v6 = a1;
  if (a2)
  {
    uint64_t v9 = 0;
    char v10 = 0;
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v31 = a2;
    do
    {
      uint64_t v14 = *v6;
      uint64_t v15 = 3 << (v10 & 0xFE);
      if ((v15 & *(_DWORD *)(*v6 + 272)) != 0)
      {
        uint64_t v16 = *a6 + v9;
        int v17 = sub_2194E2288(a4, v11);
        int v18 = sub_2194E2288(a5, v11);
        uint64_t v19 = v16;
        unint64_t v6 = a1;
        v12 += sub_2194C023C(v19, v17, v18, v12);
        uint64_t v14 = *a1;
      }
      if ((v15 & *(_DWORD *)(v14 + 276)) != 0)
      {
        uint64_t v20 = a6[9] + v9;
        int v21 = sub_2194E2288(a4, v11);
        int v22 = sub_2194E2288(a5, v11);
        uint64_t v23 = v20;
        unint64_t v6 = a1;
        v12 += sub_2194C0214(v23, v21, v22, v12);
      }
      ++v11;
      v10 += 2;
      v9 += 28;
    }
    while (v31 != v11);
  }
  else
  {
    int v12 = 0;
  }
  uint64_t v24 = sub_2194C0260(a6[15], (a3 + 63) & 0xFFFFFFC0, 1, v12, 8) + v12;
  uint64_t v25 = *v6;
  if (*(_DWORD *)(*v6 + 712))
  {
    uint64_t v24 = sub_2194C02DC(0x186A00u, v24, 64, (uint64_t)(a6 + 32)) + v24;
    uint64_t v25 = *v6;
  }
  if (*(_DWORD *)(v25 + 280))
  {
    uint64_t v24 = sub_2194C02DC(8 * *(_DWORD *)(v25 + 524), v24, 64, (uint64_t)a6 + 284) + v24;
    uint64_t v25 = *v6;
  }
  uint64_t v26 = *(void *)(v25 + 704);
  if (v26)
  {
    int v27 = sub_2194C028C(72 * *(_DWORD *)(v25 + 524), v24, (uint64_t)a6 + 172) + v24;
    uint64_t v24 = sub_2194C028C(72 * *(_DWORD *)(*v6 + 524), v27, (uint64_t)(a6 + 18)) + v27;
    uint64_t v25 = *v6;
    uint64_t v26 = *(void *)(*v6 + 704);
  }
  if ((v26 & 0xC) != 0)
  {
    int v28 = sub_2194C028C(72 * *(_DWORD *)(v25 + 524), v24, (uint64_t)a6 + 228) + v24;
    return sub_2194C028C(72 * *(_DWORD *)(*v6 + 524), v28, (uint64_t)(a6 + 25)) + v28;
  }
  return v24;
}

uint64_t sub_2194966AC(_DWORD *a1, size_t a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, int a8, void *a9)
{
  bzero(a1, a2);
  *a1 = -1;
  a1[1] = a3 | 0x80000000;
  *((void *)a1 + 1) = 0;
  uint64_t v16 = (uint64_t)(a1 + 38);
  a1[38] |= 0x7FFFFFFFu;
  int v17 = a1[59];
  *((void *)a1 + 18) = 0x10000000BLL;
  a1[59] = v17 | 0x7FFFFFFF;
  a1[80] |= 0x7FFFFFFFu;
  a1[101] |= 0x7FFFFFFFu;
  a1[122] |= 0x7FFFFFFFu;
  a1[143] |= 0x7FFFFFFFu;
  a1[164] |= 0x7FFFFFFFu;
  a1[185] |= 0x7FFFFFFFu;
  a1[206] |= 0x7FFFFFFFu;
  a1[227] |= 0x7FFFFFFFu;
  a1[248] |= 0x7FFFFFFFu;
  if (a7)
  {
    uint64_t v18 = a9[6];
    if (!*(unsigned char *)(v18 + 28 * (a7 - 1))) {
      sub_219505EB0();
    }
    uint64_t result = sub_2194BFF28(v16, *(_DWORD *)(v18 + 28 * (a7 - 1) + 4), *(_DWORD *)(v18 + 28 * (a7 - 1) + 8), *(_DWORD *)(v18 + 28 * (a7 - 1) + 12), 4, 1, *(_DWORD *)(v18 + 28 * (a7 - 1) + 16) + a8);
    uint64_t v20 = (unsigned char *)*a9;
    if (*(unsigned char *)(*a9 + 28 * a7)) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t result = sub_2194BFF28(v16, a4, a5, a6, 8, 0, 0);
    a7 = 0;
    uint64_t v20 = (unsigned char *)*a9;
    if (*(unsigned char *)*a9) {
LABEL_4:
    }
      uint64_t result = sub_2194BFF28((uint64_t)(a1 + 122), *(_DWORD *)&v20[28 * a7 + 4], *(_DWORD *)&v20[28 * a7 + 8], *(_DWORD *)&v20[28 * a7 + 12], 8, 1, *(_DWORD *)&v20[28 * a7 + 16] + a8);
  }
  uint64_t v21 = a9[3];
  if (*(unsigned char *)(v21 + 28 * a7)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 143), *(_DWORD *)(v21 + 28 * a7 + 4), *(_DWORD *)(v21 + 28 * a7 + 8), *(_DWORD *)(v21 + 28 * a7 + 12), 8, 1, *(_DWORD *)(v21 + 28 * a7 + 16) + a8);
  }
  uint64_t v22 = a9[6];
  if (*(unsigned char *)(v22 + 28 * a7)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 59), *(_DWORD *)(v22 + 28 * a7 + 4), *(_DWORD *)(v22 + 28 * a7 + 8), *(_DWORD *)(v22 + 28 * a7 + 12), 4, 1, *(_DWORD *)(v22 + 28 * a7 + 16) + a8);
  }
  uint64_t v23 = a9[9];
  if (*(unsigned char *)(v23 + 28 * a7)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 101), *(_DWORD *)(v23 + 28 * a7 + 4), *(_DWORD *)(v23 + 28 * a7 + 8), *(_DWORD *)(v23 + 28 * a7 + 12), 4, 1, *(_DWORD *)(v23 + 28 * a7 + 16) + a8);
  }
  uint64_t v24 = a9[12];
  if (*(unsigned char *)(v24 + 28 * a7)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 80), *(_DWORD *)(v24 + 28 * a7 + 4), *(_DWORD *)(v24 + 28 * a7 + 8), *(_DWORD *)(v24 + 28 * a7 + 12), 8, 1, *(_DWORD *)(v24 + 28 * a7 + 16) + a8);
  }
  uint64_t v25 = a9[15];
  if (*(unsigned char *)(v25 + 28 * a7))
  {
    uint64_t v26 = (_DWORD *)(v25 + 28 * a7);
    unsigned int v27 = v26[1];
    unsigned int v28 = v26[2];
    unsigned int v29 = v26[3];
    int v30 = v26[4] + a8;
    return sub_2194BFF28((uint64_t)(a1 + 248), v27, v28, v29, 8, 1, v30);
  }
  return result;
}

uint64_t sub_21949699C(_DWORD *a1, size_t a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7, unsigned int *a8)
{
  bzero(a1, a2);
  *a1 = -1;
  a1[1] = a3 | 0x80000000;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 18) = 0x10000000BLL;
  a1[38] |= 0x7FFFFFFFu;
  a1[59] |= 0x7FFFFFFFu;
  a1[80] |= 0x7FFFFFFFu;
  a1[101] |= 0x7FFFFFFFu;
  a1[122] |= 0x7FFFFFFFu;
  a1[143] |= 0x7FFFFFFFu;
  a1[164] |= 0x7FFFFFFFu;
  a1[185] |= 0x7FFFFFFFu;
  a1[206] |= 0x7FFFFFFFu;
  a1[227] |= 0x7FFFFFFFu;
  a1[248] |= 0x7FFFFFFFu;
  uint64_t v15 = *((void *)a8 + 1) - *(void *)a8;
  if (((0x6DB6DB6DB6DB6DB7 * (v15 >> 2)) & 0xFFFFFFFFFFFFFFFELL) != 4) {
    sub_219505EE8();
  }
  uint64_t result = sub_2194BFF28((uint64_t)(a1 + 38), a4, a5, a6, 8, 0, 0);
  int v17 = *(unsigned char **)a8;
  if (**(unsigned char **)a8)
  {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 101), *((_DWORD *)v17 + 1), *((_DWORD *)v17 + 2), *((_DWORD *)v17 + 3), 8, 1, *((_DWORD *)v17 + 4) + a7);
    int v17 = *(unsigned char **)a8;
  }
  if (v17[28])
  {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 59), *((_DWORD *)v17 + 8), *((_DWORD *)v17 + 9), *((_DWORD *)v17 + 10), 8, 1, *((_DWORD *)v17 + 11) + a7);
    int v17 = *(unsigned char **)a8;
  }
  if (v17[56])
  {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 122), *((_DWORD *)v17 + 15), *((_DWORD *)v17 + 16), *((_DWORD *)v17 + 17), 8, 1, *((_DWORD *)v17 + 18) + a7);
    int v17 = *(unsigned char **)a8;
  }
  if (v17[84]) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 143), *((_DWORD *)v17 + 22), *((_DWORD *)v17 + 23), *((_DWORD *)v17 + 24), 8, 1, *((_DWORD *)v17 + 25) + a7);
  }
  uint64_t v18 = *((void *)a8 + 9);
  if (*(unsigned char *)v18)
  {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 101), *(_DWORD *)(v18 + 4), *(_DWORD *)(v18 + 8), *(_DWORD *)(v18 + 12), 4, 1, *(_DWORD *)(v18 + 16) + a7);
    uint64_t v18 = *((void *)a8 + 9);
  }
  if (*(unsigned char *)(v18 + 28))
  {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 59), *(_DWORD *)(v18 + 32), *(_DWORD *)(v18 + 36), *(_DWORD *)(v18 + 40), 4, 1, *(_DWORD *)(v18 + 44) + a7);
    uint64_t v18 = *((void *)a8 + 9);
  }
  if (*(unsigned char *)(v18 + 56))
  {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 122), *(_DWORD *)(v18 + 60), *(_DWORD *)(v18 + 64), *(_DWORD *)(v18 + 68), 4, 1, *(_DWORD *)(v18 + 72) + a7);
    uint64_t v18 = *((void *)a8 + 9);
  }
  if (*(unsigned char *)(v18 + 84)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 143), *(_DWORD *)(v18 + 88), *(_DWORD *)(v18 + 92), *(_DWORD *)(v18 + 96), 4, 1, *(_DWORD *)(v18 + 100) + a7);
  }
  if (v15 == 140)
  {
    if (*(unsigned char *)(*(void *)a8 + 112)) {
      uint64_t result = sub_2194BFF28((uint64_t)(a1 + 227), *(_DWORD *)(*(void *)a8 + 116), *(_DWORD *)(*(void *)a8 + 120), *(_DWORD *)(*(void *)a8 + 124), 8, 1, *(_DWORD *)(*(void *)a8 + 128) + a7);
    }
    uint64_t v19 = *((void *)a8 + 9);
    if (*(unsigned char *)(v19 + 112)) {
      uint64_t result = sub_2194BFF28((uint64_t)(a1 + 227), *(_DWORD *)(v19 + 116), *(_DWORD *)(v19 + 120), *(_DWORD *)(v19 + 124), 4, 1, *(_DWORD *)(v19 + 128) + a7);
    }
  }
  uint64_t v20 = *((void *)a8 + 15);
  if (*(unsigned char *)v20) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 248), *(_DWORD *)(v20 + 4), *(_DWORD *)(v20 + 8), *(_DWORD *)(v20 + 12), 8, 1, *(_DWORD *)(v20 + 16) + a7);
  }
  if (*((unsigned char *)a8 + 256)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 80), a8[65], a8[66], a8[67], 8, 1, a8[68] + a7);
  }
  if (*((unsigned char *)a8 + 284)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 164), a8[72], a8[73], a8[74], 8, 1, a8[75] + a7);
  }
  if (*((unsigned char *)a8 + 144)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 80), a8[37], a8[38], a8[39], 8, 1, a8[40] + a7);
  }
  if (*((unsigned char *)a8 + 172)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 164), a8[44], a8[45], a8[46], 8, 1, a8[47] + a7);
  }
  if (*((unsigned char *)a8 + 200)) {
    uint64_t result = sub_2194BFF28((uint64_t)(a1 + 185), a8[51], a8[52], a8[53], 8, 1, a8[54] + a7);
  }
  if (*((unsigned char *)a8 + 228))
  {
    unsigned int v21 = a8[58];
    unsigned int v22 = a8[59];
    unsigned int v23 = a8[60];
    int v24 = a8[61] + a7;
    return sub_2194BFF28((uint64_t)(a1 + 206), v21, v22, v23, 8, 1, v24);
  }
  return result;
}

void *sub_219496DD4(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, int a7)
{
  *(_DWORD *)a1 = -1;
  *(_DWORD *)(a1 + 4) = a6;
  bzero((void *)(a1 + 16), 0x440uLL);
  *(void *)(a1 + 12) = 0x200000440;
  *(_DWORD *)(a1 + 20) = a3 >> a5;
  *(_DWORD *)(a1 + 24) = a4 >> a5;
  *(_DWORD *)(a1 + 28) = a7;
  *(_DWORD *)(a1 + 32) = 1;
  uint64_t v13 = (_DWORD *)(*a2 + ((unint64_t)a5 << 10));
  v13[169] = v13[169] & 0xFFFFFFFE | (a7 == 4);

  return memcpy((void *)(a1 + 80), v13, 0x400uLL);
}

void *sub_219496E84(uint64_t a1, const void **a2, int a3, int a4, int a5, int a6, int a7)
{
  if (a5 || (unsigned char *)a2[1] - (unsigned char *)*a2 != 1024) {
    sub_219505F20();
  }
  *(_DWORD *)a1 = -1;
  *(_DWORD *)(a1 + 4) = a6;
  bzero((void *)(a1 + 16), 0x440uLL);
  *(void *)(a1 + 12) = 0x200000440;
  *(_DWORD *)(a1 + 20) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a7;
  *(_DWORD *)(a1 + 32) = 1;
  int v12 = *a2;

  return memcpy((void *)(a1 + 80), v12, 0x400uLL);
}

uint64_t sub_219496F20(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(result + 64) != 4) {
    sub_219505F90();
  }
  uint64_t v3 = result;
  if (*(_WORD *)(result + 68) != 5) {
    sub_219505F58();
  }
  if (*(_WORD *)(a2 + 50))
  {
    unint64_t v5 = 0;
    do
    {
      int v7 = sub_2194E2288(*(_DWORD *)a2, v5);
      int v8 = sub_2194E2288(*(_DWORD *)(a2 + 4), v5);
      int v9 = *(__int16 *)(a2 + 14);
      int v10 = v7;
      if (*(_WORD *)(a2 + 18)) {
        int v10 = sub_2194E2288(*(__int16 *)(a2 + 18), v5);
      }
      int v11 = *(__int16 *)(a2 + 12);
      int v12 = v8;
      if (*(_WORD *)(a2 + 16)) {
        int v12 = sub_2194E2288(*(__int16 *)(a2 + 16), v5);
      }
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      sub_21949412C(v3, v7, (int *)&v15 + 1, (signed int *)&v15, v9 >> v5, v10);
      uint64_t result = sub_21949412C(v3, v8, (int *)&v14 + 1, (signed int *)&v14, v11 >> v5, v12);
      uint64_t v6 = a3 + 4 * v5;
      *(_DWORD *)(v6 + 468) = ((WORD2(v14) & 0x1FFF) << 16) | WORD2(v15) & 0x7FF | *(_DWORD *)(v6 + 468) & 0xE000F800;
      *(_DWORD *)(v6 + 488) = ((v14 & 0x1FFF) << 16) | v15 & 0x3FF | *(_DWORD *)(v6 + 488) & 0xE000FC00;
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)(a2 + 50));
  }
  return result;
}

uint64_t sub_2194970A8(unsigned int a1)
{
  return 4 * sub_219495340(a1) + 16;
}

uint64_t sub_2194970C8(unsigned int a1, unsigned int a2)
{
  int v3 = 4 * sub_219495340(a2) + 16;
  return v3 * sub_2194952FC(a1);
}

void sub_219497104(uint64_t a1, unint64_t a2, char **a3)
{
  if (!a1) {
    sub_219505FC8();
  }
  unint64_t v5 = *a3;
  uint64_t v6 = (__n128 *)a3[1];
  unint64_t v7 = ((char *)v6 - *a3) >> 3;
  BOOL v8 = a2 >= v7;
  unint64_t v9 = a2 - v7;
  if (v9 != 0 && v8)
  {
    sub_21948B1D8((uint64_t)a3, v9);
    unint64_t v5 = *a3;
    uint64_t v6 = (__n128 *)a3[1];
  }
  else if (!v8)
  {
    uint64_t v6 = (__n128 *)&v5[8 * a2];
    a3[1] = (char *)v6;
  }
  if (v5 != (char *)v6)
  {
    unint64_t v10 = (char *)v6 - v5 - 8;
    if (v10 < 0x18)
    {
      uint64_t v11 = 0;
      int v12 = (__n128 *)v5;
      do
      {
LABEL_13:
        v12->n128_u64[0] = v11;
        int v12 = (__n128 *)((char *)v12 + 8);
        ++v11;
      }
      while (v12 != v6);
      goto LABEL_14;
    }
    uint64_t v13 = (v10 >> 3) + 1;
    uint64_t v11 = v13 & 0x3FFFFFFFFFFFFFFCLL;
    int v12 = (__n128 *)&v5[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
    int64x2_t v14 = (int64x2_t)xmmword_21950BFE0;
    uint64_t v15 = (int64x2_t *)(v5 + 16);
    int64x2_t v16 = vdupq_n_s64(2uLL);
    int64x2_t v17 = vdupq_n_s64(4uLL);
    uint64_t v18 = v13 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v15[-1] = v14;
      *uint64_t v15 = vaddq_s64(v14, v16);
      int64x2_t v14 = vaddq_s64(v14, v17);
      v15 += 2;
      v18 -= 4;
    }
    while (v18);
    if (v13 != v11) {
      goto LABEL_13;
    }
  }
LABEL_14:
  uint64_t v24 = a1;
  if ((char *)v6 - v5 < 1025)
  {
LABEL_18:
    sub_21949758C(v5, v6, &v24, ((char *)v6 - v5) >> 3, 0, 0);
  }
  else
  {
    uint64_t v19 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    unint64_t v20 = ((char *)v6 - v5) >> 3;
    while (1)
    {
      unsigned int v21 = (char *)operator new(8 * v20, v19);
      if (v21) {
        break;
      }
      BOOL v22 = v20 > 1;
      v20 >>= 1;
      if (!v22) {
        goto LABEL_18;
      }
    }
    unsigned int v23 = v21;
    sub_21949758C(v5, v6, &v24, ((char *)v6 - v5) >> 3, v21, v20);
    operator delete(v23);
  }
}

uint64_t sub_21949729C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = kdebug_trace();
  if (*(unsigned char *)(a3 + 68) != 2) {
    sub_219506000();
  }
  if (*(unsigned char *)(a3 + 89))
  {
    if (*(unsigned char *)(a3 + 155))
    {
      sub_219491308(a1, (unsigned int *)a3);
      if (!*(unsigned char *)(a3 + 76)) {
        return kdebug_trace();
      }
    }
    else
    {
      sub_219497408(a1, (unsigned int *)a3);
      if (!*(unsigned char *)(a3 + 76)) {
        return kdebug_trace();
      }
    }
    if (*(unsigned char *)(a3 + 90))
    {
      unint64_t v7 = 2 * *(unsigned __int16 *)(a3 + 50);
      v8[0] = *(unsigned __int16 *)(a3 + 20);
      v8[1] = v8[0];
      v8[2] = v8[0];
      void v8[3] = v8[0];
      v8[4] = v8[0];
      v8[5] = v8[0];
      v8[6] = v8[0];
      v8[7] = v8[0];
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a2 + 96))(v9, a2);
      sub_2194E2040((uint64_t)v9, *(void *)(a1 + 296) + 240, v7, v8[0], (uint64_t)v8, *(float *)(a3 + 80));
      (*(void (**)(uint64_t, void *))(*(void *)a2 + 112))(a2, v8);
    }
    return kdebug_trace();
  }
  return result;
}

void sub_219497408(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 176);
  unsigned int v3 = *(_DWORD *)(a1 + 152);
  if (v2 >= v3 && a2[6] != 0) {
    sub_2195042C0();
  }
  if (v3 != *(_DWORD *)(a1 + 180) + v2) {
    sub_219504288();
  }
  __p = 0;
  unint64_t v20 = 0;
  uint64_t v21 = 0;
  int v7 = *(_DWORD *)(a1 + 184);
  int v8 = *(_DWORD *)(a1 + 160);
  if (v8 + v7)
  {
    sub_21948B1D8((uint64_t)&__p, (v8 + v7));
    unint64_t v9 = v20;
    if (__p != v20)
    {
      unint64_t v10 = v20 - (unsigned char *)__p - 8;
      if (v10 < 0x18)
      {
        uint64_t v11 = 0;
        int v12 = __p;
        do
LABEL_14:
          *v12++ = v11++;
        while (v12 != v9);
        goto LABEL_15;
      }
      uint64_t v13 = (v10 >> 3) + 1;
      uint64_t v11 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      int v12 = (char *)__p + 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
      int64x2_t v14 = (int64x2_t)xmmword_21950BFE0;
      uint64_t v15 = (int64x2_t *)((char *)__p + 16);
      int64x2_t v16 = vdupq_n_s64(2uLL);
      int64x2_t v17 = vdupq_n_s64(4uLL);
      uint64_t v18 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v15[-1] = v14;
        *uint64_t v15 = vaddq_s64(v14, v16);
        int64x2_t v14 = vaddq_s64(v14, v17);
        v15 += 2;
        v18 -= 4;
      }
      while (v18);
      if (v13 != v11) {
        goto LABEL_14;
      }
    }
  }
LABEL_15:
  sub_2194914FC(a1);
  if (*((unsigned char *)a2 + 77)) {
    sub_2194918C8(*(void *)(a1 + 288), *(unsigned int *)(a1 + 284), *(void *)(a1 + 168), *(unsigned int *)(a1 + 160), *((unsigned __int16 *)a2 + 16), *((unsigned __int16 *)a2 + 17), *((unsigned __int16 *)a2 + 18), a2[6], *a2, a2[1], (char **)&__p);
  }
  sub_2194915D4(a1, &__p);
  if (__p)
  {
    unint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_21949756C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_21949758C(char *a1, __n128 *a2, uint64_t *a3, unint64_t a4, char *a5, uint64_t a6)
{
  if (a4 < 2) {
    return result;
  }
  int v8 = (__n128 *)a1;
  if (a4 == 2)
  {
    unint64_t v9 = a2[-1].n128_u64[1];
    unint64_t v10 = *(void *)a1;
    unint64_t v11 = *(void *)(*a3 + 72 * v9 + 64);
    unint64_t v12 = *(void *)(*a3 + 72 * *(void *)a1 + 64);
    if (BYTE5(v11) < (unint64_t)BYTE5(v12)
      || BYTE5(v12) >= (unint64_t)BYTE5(v11)
      && (WORD1(v11) < (unint64_t)WORD1(v12)
       || WORD1(v12) >= (unint64_t)WORD1(v11)
       && ((unsigned __int16)*(void *)(*a3 + 72 * v9 + 64) < (unint64_t)(unsigned __int16)*(void *)(*a3 + 72 * *(void *)a1 + 64)
        || (unsigned __int16)*(void *)(*a3 + 72 * *(void *)a1 + 64) >= (unint64_t)(unsigned __int16)*(void *)(*a3 + 72 * v9 + 64)
        && ((v41 = HIWORD(v11) & 0x7FFF, unint64_t v42 = HIWORD(v12) & 0x7FFF, v41 < v42)
         || ((unint64_t v43 = BYTE4(v11), v44 = BYTE4(v12), v42 >= v41) ? (v45 = v43 >= v44) : (v45 = 1), !v45)))))
    {
      *(void *)a1 = v9;
      a2[-1].n128_u64[1] = v10;
    }
    return result;
  }
  if ((uint64_t)a4 > 128)
  {
    unint64_t v48 = a4 >> 1;
    int v49 = &a1[8 * (a4 >> 1)];
    unint64_t v50 = a4 >> 1;
    if ((uint64_t)a4 > a6)
    {
      sub_21949758C(a1, v49, a3, v50, a5, a6);
      sub_21949758C(&v8->n128_u64[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
      result.n128_u64[0] = sub_219497F9C(v8, (__n128 *)((char *)v8 + 8 * (a4 >> 1)), a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6).n128_u64[0];
      return result;
    }
    sub_219497AB0(a1, v49, a3, v50, a5);
    unint64_t v52 = &a5[8 * v48];
    result.n128_u64[0] = sub_219497AB0(&v8->n128_i8[8 * (a4 >> 1)], (char *)a2, a3, a4 - (a4 >> 1), v52).n128_u64[0];
    uint64_t v53 = *a3;
    uint64_t v54 = v52;
    unint64_t v55 = a5;
    unsigned int v56 = v8;
    unsigned __int8 v57 = &a5[8 * a4];
    while (1)
    {
      if (v54 == v57)
      {
        if (v55 == v52) {
          return result;
        }
        unint64_t v65 = &a5[8 * v48] - v55 - 8;
        if (v65 >= 0x38 && (unint64_t)((char *)v8 - v55) >= 0x20)
        {
          uint64_t v73 = 0;
          uint64_t v74 = (v65 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v66 = &v55[v75];
          unsigned int v67 = (__n128 *)((char *)v56 + v75);
          uint64_t v76 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v77 = &v56[v73];
            __n128 result = *(__n128 *)&v55[v73 * 16];
            __n128 v78 = *(__n128 *)&v55[v73 * 16 + 16];
            *uint64_t v77 = result;
            v77[1] = v78;
            v73 += 2;
            v76 -= 4;
          }
          while (v76);
          if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL)) {
            return result;
          }
        }
        else
        {
          uint64_t v66 = v55;
          unsigned int v67 = v56;
        }
        do
        {
          unint64_t v68 = *(void *)v66;
          v66 += 8;
          v67->n128_u64[0] = v68;
          unsigned int v67 = (__n128 *)((char *)v67 + 8);
        }
        while (v66 != v52);
        return result;
      }
      unint64_t v58 = *(void *)(v53 + 72 * *(void *)v54 + 64);
      unint64_t v59 = *(void *)(v53 + 72 * *(void *)v55 + 64);
      if (BYTE5(v58) >= (unint64_t)BYTE5(v59)
        && (BYTE5(v59) < (unint64_t)BYTE5(v58)
         || WORD1(v58) >= (unint64_t)WORD1(v59)
         && (WORD1(v59) < (unint64_t)WORD1(v58)
          || (unsigned __int16)*(void *)(v53 + 72 * *(void *)v54 + 64) >= (unint64_t)(unsigned __int16)*(void *)(v53 + 72 * *(void *)v55 + 64)
          && ((unsigned __int16)*(void *)(v53 + 72 * *(void *)v55 + 64) < (unint64_t)(unsigned __int16)*(void *)(v53 + 72 * *(void *)v54 + 64)
           || (unint64_t v60 = HIWORD(v58) & 0x7FFF, v61 = HIWORD(v59) & 0x7FFF, v60 >= v61)
           && ((unint64_t v62 = BYTE4(v58), v63 = BYTE4(v59), v61 >= v60) ? (v64 = v62 >= v63) : (v64 = 1), v64)))))
      {
        v56->n128_u64[0] = *(void *)v55;
        unsigned int v56 = (__n128 *)((char *)v56 + 8);
        v55 += 8;
        int v8 = (__n128 *)((char *)v8 + 8);
        if (v55 == v52)
        {
LABEL_81:
          if (v54 == v57) {
            return result;
          }
          unint64_t v69 = &a5[8 * a4] - v54 - 8;
          if (v69 >= 0x48 && (unint64_t)((char *)v8 - v54) >= 0x20)
          {
            uint64_t v79 = 0;
            uint64_t v80 = (v69 >> 3) + 1;
            uint64_t v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
            int16x8_t v70 = &v54[v81];
            unint64_t v71 = (__n128 *)((char *)v56 + v81);
            uint64_t v82 = v80 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              uint64_t v83 = &v56[v79];
              __n128 result = *(__n128 *)&v54[v79 * 16];
              __n128 v84 = *(__n128 *)&v54[v79 * 16 + 16];
              __n128 *v83 = result;
              v83[1] = v84;
              v79 += 2;
              v82 -= 4;
            }
            while (v82);
            if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL)) {
              return result;
            }
          }
          else
          {
            int16x8_t v70 = v54;
            unint64_t v71 = v56;
          }
          do
          {
            unint64_t v72 = *(void *)v70;
            v70 += 8;
            v71->n128_u64[0] = v72;
            unint64_t v71 = (__n128 *)((char *)v71 + 8);
          }
          while (v70 != v57);
          return result;
        }
      }
      else
      {
        v56->n128_u64[0] = *(void *)v54;
        unsigned int v56 = (__n128 *)((char *)v56 + 8);
        v54 += 8;
        int v8 = (__n128 *)((char *)v8 + 8);
        if (v55 == v52) {
          goto LABEL_81;
        }
      }
    }
  }
  if (a1 == (char *)a2) {
    return result;
  }
  int64x2_t v14 = a1 + 8;
  if (a1 + 8 == (char *)a2) {
    return result;
  }
  uint64_t v15 = 0;
  uint64_t v16 = *a3;
  int64x2_t v17 = a1;
  while (2)
  {
    uint64_t v18 = (__n128 *)v17;
    int64x2_t v17 = v14;
    unint64_t v19 = *(void *)v14;
    uint64_t v20 = v16 + 72 * v19;
    unint64_t v23 = *(void *)(v20 + 64);
    uint64_t v21 = (unint64_t *)(v20 + 64);
    unint64_t v22 = v23;
    unint64_t v24 = BYTE5(v23);
    unint64_t v25 = *(void *)(v16 + 72 * v18->n128_u64[0] + 64);
    if (BYTE5(v23) >= (unint64_t)BYTE5(v25))
    {
      if (BYTE5(v25) < v24) {
        goto LABEL_11;
      }
      if (WORD1(v22) >= (unint64_t)WORD1(v25))
      {
        if (WORD1(v25) < (unint64_t)WORD1(v22)) {
          goto LABEL_11;
        }
        if ((unsigned __int16)v22 >= (unint64_t)(unsigned __int16)*(void *)(v16 + 72 * v18->n128_u64[0] + 64))
        {
          if ((unsigned __int16)*(void *)(v16 + 72 * v18->n128_u64[0] + 64) < (unint64_t)(unsigned __int16)v22) {
            goto LABEL_11;
          }
          unint64_t v36 = HIWORD(v22) & 0x7FFF;
          unint64_t v37 = HIWORD(v25) & 0x7FFF;
          if (v36 >= v37)
          {
            unint64_t v38 = BYTE4(v22);
            unint64_t v39 = BYTE4(v25);
            if (v37 < v36 || v38 >= v39) {
              goto LABEL_11;
            }
          }
        }
      }
    }
    *(void *)int64x2_t v17 = v18->n128_u64[0];
    if (v18 == v8)
    {
LABEL_9:
      uint64_t v18 = v8;
      goto LABEL_10;
    }
    uint64_t v26 = v15;
    while (1)
    {
      unint64_t v27 = *(unint64_t *)((char *)&v8->n128_u64[-1] + v26);
      unint64_t v28 = *v21;
      unint64_t v29 = ((unsigned __int16)WORD2(*v21) >> 8);
      unint64_t v30 = *(void *)(v16 + 72 * v27 + 64);
      if (v29 < BYTE5(v30)) {
        goto LABEL_15;
      }
      if (BYTE5(v30) < v29) {
        goto LABEL_10;
      }
      if (WORD1(v28) < (unint64_t)WORD1(v30)) {
        goto LABEL_15;
      }
      if (WORD1(v30) < (unint64_t)WORD1(v28)) {
        goto LABEL_10;
      }
      if ((unsigned __int16)*v21 < (unint64_t)(unsigned __int16)*(void *)(v16 + 72 * v27 + 64)) {
        goto LABEL_15;
      }
      if ((unsigned __int16)*(void *)(v16 + 72 * v27 + 64) < (unint64_t)(unsigned __int16)*v21) {
        break;
      }
      unint64_t v31 = HIWORD(v28) & 0x7FFF;
      unint64_t v32 = HIWORD(v30) & 0x7FFF;
      if (v31 >= v32)
      {
        unint64_t v33 = BYTE4(v28);
        unint64_t v34 = BYTE4(v30);
        if (v32 < v31 || v33 >= v34) {
          goto LABEL_10;
        }
      }
LABEL_15:
      uint64_t v18 = (__n128 *)((char *)v18 - 8);
      *(unint64_t *)((char *)v8->n128_u64 + v26) = v27;
      v26 -= 8;
      if (!v26) {
        goto LABEL_9;
      }
    }
    uint64_t v18 = (__n128 *)((char *)v8 + v26);
LABEL_10:
    v18->n128_u64[0] = v19;
LABEL_11:
    int64x2_t v14 = v17 + 8;
    v15 += 8;
    if (v17 + 8 != (char *)a2) {
      continue;
    }
    return result;
  }
}

__n128 sub_219497AB0(char *a1, char *a2, uint64_t *a3, unint64_t a4, char *a5)
{
  if (a4)
  {
    unint64_t v5 = a5;
    int v7 = a1;
    if (a4 == 1)
    {
LABEL_70:
      *(void *)unint64_t v5 = *(void *)v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v10 = *((void *)a2 - 1);
      unint64_t v11 = *(void *)(*a3 + 72 * v10 + 64);
      unint64_t v12 = *(void *)(*a3 + 72 * *(void *)a1 + 64);
      if (BYTE5(v11) >= (unint64_t)BYTE5(v12))
      {
        if (BYTE5(v12) < (unint64_t)BYTE5(v11)
          || WORD1(v11) >= (unint64_t)WORD1(v12)
          && (WORD1(v12) < (unint64_t)WORD1(v11)
           || (unsigned __int16)*(void *)(*a3 + 72 * v10 + 64) >= (unint64_t)(unsigned __int16)*(void *)(*a3 + 72 * *(void *)a1 + 64)
           && ((unsigned __int16)*(void *)(*a3 + 72 * *(void *)a1 + 64) < (unint64_t)(unsigned __int16)*(void *)(*a3 + 72 * v10 + 64)
            || (unint64_t v61 = HIWORD(v11) & 0x7FFF, v62 = HIWORD(v12) & 0x7FFF, v61 >= v62)
            && (v62 < v61 || BYTE4(v11) >= (unint64_t)BYTE4(v12)))))
        {
          uint64_t v10 = *(void *)a1;
          int v7 = a2 - 8;
        }
      }
      *(void *)a5 = v10;
      unint64_t v5 = a5 + 8;
      goto LABEL_70;
    }
    if ((uint64_t)a4 > 8)
    {
      unint64_t v38 = a4 >> 1;
      uint64_t v39 = 8 * (a4 >> 1);
      uint8x8_t v40 = &a1[v39];
      sub_21949758C(a1, &a1[v39], a3, a4 >> 1, a5, a4 >> 1);
      sub_21949758C(&v7[v39], a2, a3, a4 - v38, &v5[v39], a4 - v38);
      uint64_t v42 = *a3;
      unint64_t v43 = v5;
      unint64_t v44 = v7;
      BOOL v45 = &v7[v39];
      do
      {
        while (1)
        {
          if (v45 == a2)
          {
            if (v44 == v40) {
              return result;
            }
            unint64_t v53 = &v7[8 * v38] - v44 - 8;
            if (v53 >= 0x38 && (unint64_t)(v43 - v44) >= 0x20)
            {
              uint64_t v63 = 0;
              uint64_t v64 = (v53 >> 3) + 1;
              uint64_t v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v54 = &v5[v65];
              unint64_t v55 = &v44[v65];
              uint64_t v66 = v64 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                unsigned int v67 = &v5[v63];
                __n128 result = *(__n128 *)&v44[v63];
                long long v68 = *(_OWORD *)&v44[v63 + 16];
                *(__n128 *)unsigned int v67 = result;
                *((_OWORD *)v67 + 1) = v68;
                v63 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL)) {
                return result;
              }
            }
            else
            {
              uint64_t v54 = v5;
              unint64_t v55 = v44;
            }
            do
            {
              uint64_t v56 = *(void *)v55;
              v55 += 8;
              *(void *)uint64_t v54 = v56;
              v54 += 8;
            }
            while (v55 != v40);
            return result;
          }
          unint64_t v46 = *(void *)(v42 + 72 * *(void *)v45 + 64);
          unint64_t v47 = *(void *)(v42 + 72 * *(void *)v44 + 64);
          if (BYTE5(v46) >= (unint64_t)BYTE5(v47))
          {
            if (BYTE5(v47) < (unint64_t)BYTE5(v46)) {
              break;
            }
            if (WORD1(v46) >= (unint64_t)WORD1(v47))
            {
              if (WORD1(v47) < (unint64_t)WORD1(v46)) {
                break;
              }
              if ((unsigned __int16)*(void *)(v42 + 72 * *(void *)v45 + 64) >= (unint64_t)(unsigned __int16)*(void *)(v42 + 72 * *(void *)v44 + 64))
              {
                if ((unsigned __int16)*(void *)(v42 + 72 * *(void *)v44 + 64) < (unint64_t)(unsigned __int16)*(void *)(v42 + 72 * *(void *)v45 + 64)) {
                  break;
                }
                unint64_t v48 = HIWORD(v46) & 0x7FFF;
                unint64_t v49 = HIWORD(v47) & 0x7FFF;
                if (v48 >= v49)
                {
                  unint64_t v50 = BYTE4(v46);
                  unint64_t v51 = BYTE4(v47);
                  if (v49 < v48 || v50 >= v51) {
                    break;
                  }
                }
              }
            }
          }
          *(void *)unint64_t v5 = *(void *)v45;
          v5 += 8;
          v45 += 8;
          v43 += 8;
          if (v44 == v40) {
            goto LABEL_72;
          }
        }
        *(void *)unint64_t v5 = *(void *)v44;
        v5 += 8;
        v44 += 8;
        v43 += 8;
      }
      while (v44 != v40);
LABEL_72:
      if (v45 == a2) {
        return result;
      }
      unint64_t v57 = a2 - v45 - 8;
      if (v57 < 0x48 || (unint64_t)(v43 - v45) < 0x20)
      {
        unint64_t v58 = v5;
        unint64_t v59 = v45;
        do
        {
LABEL_76:
          uint64_t v60 = *(void *)v59;
          v59 += 8;
          *(void *)unint64_t v58 = v60;
          v58 += 8;
        }
        while (v59 != a2);
        return result;
      }
      uint64_t v69 = 0;
      uint64_t v70 = (v57 >> 3) + 1;
      uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v58 = &v5[v71];
      unint64_t v59 = &v45[v71];
      uint64_t v72 = v70 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v73 = &v5[v69];
        __n128 result = *(__n128 *)&v45[v69];
        long long v74 = *(_OWORD *)&v45[v69 + 16];
        *(__n128 *)uint64_t v73 = result;
        *((_OWORD *)v73 + 1) = v74;
        v69 += 32;
        v72 -= 4;
      }
      while (v72);
      if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_76;
      }
    }
    else
    {
      if (a1 == a2) {
        return result;
      }
      uint64_t v13 = *a3;
      int64x2_t v14 = a1 + 8;
      *(void *)a5 = *(void *)a1;
      if (a1 + 8 == a2) {
        return result;
      }
      uint64_t v15 = 0;
      uint64_t v16 = a5;
      int64x2_t v17 = (uint64_t *)a5;
LABEL_13:
      while (2)
      {
        uint64_t v21 = *v17++;
        uint64_t v20 = v21;
        unint64_t v22 = *(void *)(v13 + 72 * *(void *)v14 + 64);
        unint64_t v23 = *(void *)(v13 + 72 * v21 + 64);
        if (BYTE5(v22) < (unint64_t)BYTE5(v23)
          || BYTE5(v23) >= (unint64_t)BYTE5(v22)
          && (WORD1(v22) < (unint64_t)WORD1(v23)
           || WORD1(v23) >= (unint64_t)WORD1(v22)
           && ((unsigned __int16)*(void *)(v13 + 72 * *(void *)v14 + 64) < (unint64_t)(unsigned __int16)v23
            || (unsigned __int16)v23 >= (unint64_t)(unsigned __int16)*(void *)(v13 + 72 * *(void *)v14 + 64)
            && ((unint64_t v33 = HIWORD(v22) & 0x7FFF, v34 = HIWORD(v23) & 0x7FFF, v33 < v34)
             || ((v35 = BYTE4(v22), unint64_t v36 = BYTE4(v23), v34 >= v33) ? (v37 = v35 >= v36) : (v37 = 1), !v37)))))
        {
          *((void *)v16 + 1) = v20;
          uint64_t v18 = a5;
          if (v16 == a5) {
            goto LABEL_12;
          }
          uint64_t v24 = v15;
          while (1)
          {
            uint64_t v25 = *(void *)&a5[v24 - 8];
            unint64_t v26 = *(void *)(v13 + 72 * *(void *)v14 + 64);
            unint64_t v27 = *(void *)(v13 + 72 * v25 + 64);
            if (BYTE5(v26) >= (unint64_t)BYTE5(v27))
            {
              if (BYTE5(v27) < (unint64_t)BYTE5(v26)) {
                goto LABEL_29;
              }
              if (WORD1(v26) >= (unint64_t)WORD1(v27))
              {
                if (WORD1(v27) < (unint64_t)WORD1(v26)) {
                  goto LABEL_29;
                }
                if ((unsigned __int16)*(void *)(v13 + 72 * *(void *)v14 + 64) >= (unint64_t)(unsigned __int16)*(void *)(v13 + 72 * v25 + 64))
                {
                  if ((unsigned __int16)*(void *)(v13 + 72 * v25 + 64) < (unint64_t)(unsigned __int16)*(void *)(v13 + 72 * *(void *)v14 + 64))
                  {
                    uint64_t v18 = &a5[v24];
LABEL_12:
                    uint64_t v19 = *(void *)v14;
                    v14 += 8;
                    *(void *)uint64_t v18 = v19;
                    v15 += 8;
                    uint64_t v16 = (char *)v17;
                    if (v14 == a2) {
                      return result;
                    }
                    goto LABEL_13;
                  }
                  unint64_t v28 = HIWORD(v26) & 0x7FFF;
                  unint64_t v29 = HIWORD(v27) & 0x7FFF;
                  if (v28 >= v29)
                  {
                    unint64_t v30 = BYTE4(v26);
                    unint64_t v31 = BYTE4(v27);
                    if (v29 < v28 || v30 >= v31)
                    {
LABEL_29:
                      uint64_t v18 = v16;
                      goto LABEL_12;
                    }
                  }
                }
              }
            }
            v16 -= 8;
            *(void *)&a5[v24] = v25;
            v24 -= 8;
            if (!v24)
            {
              uint64_t v18 = a5;
              goto LABEL_12;
            }
          }
        }
        *int64x2_t v17 = *(void *)v14;
        v14 += 8;
        v15 += 8;
        uint64_t v16 = (char *)v17;
        if (v14 != a2) {
          continue;
        }
        break;
      }
    }
  }
  return result;
}

__n128 sub_219497F9C(__n128 *a1, __n128 *a2, __n128 *a3, void *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v8 = a6;
  uint64_t v146 = a8;
  unsigned int v147 = a7;
  long long v145 = a4;
  while (v8 > a8 && a5 > a8)
  {
    if (!a5) {
      return result;
    }
    unint64_t v12 = 0;
    uint64_t v13 = *a4;
    unint64_t v14 = *(void *)(*a4 + 72 * a2->n128_u64[0] + 64);
    unint64_t v15 = BYTE5(v14);
    unint64_t v16 = WORD1(v14);
    unint64_t v17 = (unsigned __int16)v14;
    unint64_t v18 = HIWORD(v14) & 0x7FFF;
    unint64_t v19 = BYTE4(v14);
    uint64_t v20 = -a5;
    while (1)
    {
      uint64_t v21 = a1->n128_i64[v12 / 8];
      unint64_t v22 = *(void *)(v13 + 72 * v21 + 64);
      if (v15 < BYTE5(v22)) {
        break;
      }
      if (BYTE5(v22) >= v15)
      {
        if (v16 < WORD1(v22)) {
          break;
        }
        if (WORD1(v22) >= v16)
        {
          if (v17 < (unsigned __int16)*(void *)(v13 + 72 * v21 + 64)) {
            break;
          }
          if ((unsigned __int16)*(void *)(v13 + 72 * v21 + 64) >= v17)
          {
            unint64_t v23 = HIWORD(v22) & 0x7FFF;
            if (v18 < v23) {
              break;
            }
            unint64_t v24 = BYTE4(v22);
            BOOL v25 = v23 < v18 || v19 >= v24;
            if (!v25) {
              break;
            }
          }
        }
      }
      v12 += 8;
      BOOL v25 = __CFADD__(v20++, 1);
      if (v25) {
        return result;
      }
    }
    unint64_t v26 = (__n128 *)((char *)a1 + v12);
    if (-v20 >= v8)
    {
      if (v20 == -1)
      {
        a1->n128_u64[v12 / 8] = a2->n128_u64[0];
        a2->n128_u64[0] = v21;
        return result;
      }
      if (v20 <= 0) {
        uint64_t v37 = -v20;
      }
      else {
        uint64_t v37 = 1 - v20;
      }
      uint64_t v30 = v37 >> 1;
      unint64_t v29 = (__n128 *)((char *)a1 + 8 * (v37 >> 1) + v12);
      if (a2 == a3)
      {
        uint64_t v28 = 0;
      }
      else
      {
        uint64_t v28 = 0;
        unint64_t v51 = ((char *)a3 - (char *)a2) >> 3;
        unint64_t v52 = *(void *)(v13 + 72 * v29->n128_u64[0] + 64);
        unint64_t v53 = BYTE5(v52);
        unint64_t v54 = WORD1(v52);
        unint64_t v55 = (unsigned __int16)v52;
        unint64_t v56 = HIWORD(v52) & 0x7FFF;
        unint64_t v57 = BYTE4(v52);
        do
        {
          unint64_t v58 = v51 >> 1;
          unint64_t v59 = (v51 >> 1) + v28;
          unint64_t v60 = *(void *)(v13 + 72 * a2->n128_u64[v59] + 64);
          if (BYTE5(v60) < v53
            || v53 >= BYTE5(v60)
            && (WORD1(v60) < v54
             || v54 >= WORD1(v60)
             && ((unsigned __int16)*(void *)(v13 + 72 * a2->n128_u64[v59] + 64) < v55
              || v55 >= (unsigned __int16)*(void *)(v13 + 72 * a2->n128_u64[v59] + 64)
              && ((unint64_t v61 = HIWORD(v60) & 0x7FFF, v61 < v56)
               || ((unint64_t v62 = BYTE4(v60), v56 >= v61) ? (v63 = v62 >= v57) : (v63 = 1), !v63)))))
          {
            uint64_t v28 = v59 + 1;
            unint64_t v58 = v51 + ~v58;
          }
          unint64_t v51 = v58;
        }
        while (v58);
      }
      uint64_t v31 = (8 * v28) >> 3;
      unint64_t v32 = &a2->n128_i8[8 * v28];
      if (v29 != a2)
      {
LABEL_25:
        unint64_t v33 = v29;
        if (v28)
        {
          unint64_t v34 = (__n128 *)&v29->n128_i8[8];
          if (&v29->n128_i8[8] == (__int8 *)a2)
          {
            unint64_t v142 = v29->n128_u64[0];
            uint64_t v144 = v31;
            int64_t v64 = v32 - (char *)a2;
            uint64_t v65 = a3;
            uint64_t v66 = v30;
            memmove(v29, a2, v32 - (char *)a2);
            uint64_t v31 = v144;
            unint64_t v26 = (__n128 *)((char *)a1 + v12);
            uint64_t v30 = v66;
            a4 = v145;
            a3 = v65;
            unint64_t v33 = (__n128 *)((char *)v29 + v64);
            v33->n128_u64[0] = v142;
          }
          else if (v28 == 1)
          {
            unint64_t v35 = *((void *)v32 - 1);
            unint64_t v33 = (__n128 *)&v29->n128_i8[8];
            if (v32 - 8 != (char *)v29)
            {
              unint64_t v36 = a3;
              uint64_t v143 = v31;
              uint64_t v141 = v30;
              memmove(&v29->n128_i8[8], v29, v32 - 8 - (char *)v29);
              uint64_t v30 = v141;
              uint64_t v31 = v143;
              unint64_t v26 = (__n128 *)((char *)a1 + v12);
              a4 = v145;
              a3 = v36;
            }
            v29->n128_u64[0] = v35;
          }
          else
          {
            uint64_t v67 = ((char *)a2 - (char *)v29) >> 3;
            uint64_t v68 = (v32 - (char *)a2) >> 3;
            if (v67 == v68)
            {
              uint64_t v69 = 8 * v28 - 8;
              uint64_t v70 = a2;
              do
              {
                uint64_t v71 = v34[-1].n128_i64[1];
                v34[-1].n128_u64[1] = v70->n128_u64[0];
                v70->n128_u64[0] = v71;
                uint64_t v70 = (__n128 *)((char *)v70 + 8);
                if (v34 == a2) {
                  break;
                }
                unint64_t v34 = (__n128 *)((char *)v34 + 8);
                uint64_t v72 = v69;
                v69 -= 8;
              }
              while (v72);
              unint64_t v33 = a2;
            }
            else
            {
              uint64_t v73 = (v32 - (char *)a2) >> 3;
              uint64_t v74 = ((char *)a2 - (char *)v29) >> 3;
              do
              {
                uint64_t v75 = v74;
                uint64_t v74 = v73;
                uint64_t v73 = v75 % v73;
              }
              while (v73);
              if (v74)
              {
                uint64_t v76 = (__n128 *)((char *)v29 + 8 * v74);
                do
                {
                  uint64_t v78 = v76[-1].n128_i64[1];
                  uint64_t v76 = (__n128 *)((char *)v76 - 8);
                  uint64_t v77 = v78;
                  uint64_t v79 = (__n128 *)((char *)v76 + 8 * v67);
                  uint64_t v80 = v76;
                  do
                  {
                    uint64_t v81 = v79;
                    v80->n128_u64[0] = v79->n128_u64[0];
                    uint64_t v82 = (v32 - (char *)v79) >> 3;
                    BOOL v83 = __OFSUB__(v67, v82);
                    uint64_t v85 = v67 - v82;
                    char v84 = (v85 < 0) ^ v83;
                    uint64_t v79 = (__n128 *)((char *)v29 + 8 * v85);
                    if (v84) {
                      uint64_t v79 = (__n128 *)((char *)v81 + 8 * v67);
                    }
                    uint64_t v80 = v81;
                  }
                  while (v79 != v76);
                  v81->n128_u64[0] = v77;
                }
                while (v76 != v29);
              }
              unint64_t v33 = (__n128 *)((char *)v29 + 8 * v68);
            }
          }
        }
        goto LABEL_86;
      }
    }
    else
    {
      if (v8 >= 0) {
        uint64_t v27 = v8;
      }
      else {
        uint64_t v27 = v8 + 1;
      }
      uint64_t v28 = v27 >> 1;
      unint64_t v29 = (__n128 *)((char *)a1 + v12);
      if ((char *)a2 - (char *)a1 != v12)
      {
        unint64_t v38 = (uint64_t)((char *)a2 - (char *)a1 - v12) >> 3;
        unint64_t v39 = *(void *)(v13 + 72 * a2->n128_u64[v28] + 64);
        unint64_t v40 = BYTE5(v39);
        unint64_t v41 = WORD1(v39);
        unint64_t v42 = (unsigned __int16)v39;
        unint64_t v43 = HIWORD(v39) & 0x7FFF;
        unint64_t v44 = BYTE4(v39);
        unint64_t v29 = (__n128 *)((char *)a1 + v12);
        do
        {
          unint64_t v45 = v38 >> 1;
          unint64_t v46 = &v29->n128_u64[v38 >> 1];
          unint64_t v47 = *(void *)(v13 + 72 * *v46 + 64);
          if (v40 >= BYTE5(v47))
          {
            if (BYTE5(v47) < v40
              || v41 >= WORD1(v47)
              && (WORD1(v47) < v41
               || v42 >= (unsigned __int16)*(void *)(v13 + 72 * *v46 + 64)
               && ((unsigned __int16)*(void *)(v13 + 72 * *v46 + 64) < v42
                || (unint64_t v48 = HIWORD(v47) & 0x7FFF, v43 >= v48)
                && ((unint64_t v49 = BYTE4(v47), v48 >= v43) ? (v50 = v44 >= v49) : (v50 = 1), v50))))
            {
              unint64_t v29 = (__n128 *)(v46 + 1);
              unint64_t v45 = v38 + ~v45;
            }
          }
          unint64_t v38 = v45;
        }
        while (v45);
      }
      uint64_t v30 = (uint64_t)((char *)v29 - (char *)a1 - v12) >> 3;
      uint64_t v31 = v28;
      unint64_t v32 = &a2->n128_i8[8 * v28];
      if (v29 != a2) {
        goto LABEL_25;
      }
    }
    unint64_t v33 = (__n128 *)v32;
LABEL_86:
    a5 = -v30 - v20;
    uint64_t v86 = v8 - v31;
    if (v30 + v31 >= v8 - (v30 + v31) - v20)
    {
      a1 = v26;
      a5 = v30;
      uint64_t v90 = v31;
      sub_219497F9C(v33, v32, a3, a4, -v30 - v20, v8 - v31, v147, v146);
      a4 = v145;
      a8 = v146;
      a7 = v147;
      a3 = v33;
      uint64_t v8 = v90;
      a2 = v29;
      if (!v90) {
        return result;
      }
    }
    else
    {
      unsigned int v87 = &a1->n128_u64[v12 / 8];
      unint64_t v88 = a3;
      sub_219497F9C(v87, v29, v33, a4, v30, v31, v147, v146);
      a4 = v145;
      a8 = v146;
      a3 = v88;
      a7 = v147;
      a1 = v33;
      uint64_t v8 = v86;
      a2 = (__n128 *)v32;
      if (!v86) {
        return result;
      }
    }
  }
  if (a5 <= v8)
  {
    if (a1 != a2)
    {
      unint64_t v101 = (char *)a2 - (char *)a1 - 8;
      uint64_t v102 = a7;
      int8x16_t v103 = a1;
      if (v101 < 0x18) {
        goto LABEL_158;
      }
      uint64_t v102 = a7;
      int8x16_t v103 = a1;
      if ((unint64_t)(a7 - (char *)a1) < 0x20) {
        goto LABEL_158;
      }
      uint64_t v104 = (v101 >> 3) + 1;
      uint64_t v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v102 = &a7[v105];
      int8x16_t v103 = (__n128 *)((char *)a1 + v105);
      int8x16_t v106 = a1 + 1;
      int v107 = (__n128 *)(a7 + 16);
      uint64_t v108 = v104 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        __n128 result = v106[-1];
        __n128 v109 = *v106;
        v107[-1] = result;
        *int v107 = v109;
        v106 += 2;
        v107 += 2;
        v108 -= 4;
      }
      while (v108);
      if (v104 != (v104 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_158:
        do
        {
          unint64_t v110 = v103->n128_u64[0];
          int8x16_t v103 = (__n128 *)((char *)v103 + 8);
          *(void *)uint64_t v102 = v110;
          v102 += 8;
        }
        while (v103 != a2);
      }
      if (v102 != a7)
      {
        uint64_t v111 = *a4;
        while (a2 != a3)
        {
          unint64_t v112 = *(void *)(v111 + 72 * a2->n128_u64[0] + 64);
          unint64_t v113 = *(void *)(v111 + 72 * *(void *)a7 + 64);
          if (BYTE5(v112) >= (unint64_t)BYTE5(v113)
            && (BYTE5(v113) < (unint64_t)BYTE5(v112)
             || WORD1(v112) >= (unint64_t)WORD1(v113)
             && (WORD1(v113) < (unint64_t)WORD1(v112)
              || (unsigned __int16)*(void *)(v111 + 72 * a2->n128_u64[0] + 64) >= (unint64_t)(unsigned __int16)*(void *)(v111 + 72 * *(void *)a7 + 64)
              && ((unsigned __int16)*(void *)(v111 + 72 * *(void *)a7 + 64) < (unint64_t)(unsigned __int16)*(void *)(v111 + 72 * a2->n128_u64[0] + 64)
               || (v114 = HIWORD(v112) & 0x7FFF, unint64_t v115 = HIWORD(v113) & 0x7FFF, v114 >= v115)
               && ((unint64_t v116 = BYTE4(v112), v117 = BYTE4(v113), v115 >= v114) ? (v118 = v116 >= v117) : (v118 = 1), v118)))))
          {
            a1->n128_u64[0] = *(void *)a7;
            a1 = (__n128 *)((char *)a1 + 8);
            a7 += 8;
            if (a7 == v102) {
              return result;
            }
          }
          else
          {
            a1->n128_u64[0] = a2->n128_u64[0];
            a1 = (__n128 *)((char *)a1 + 8);
            a2 = (__n128 *)((char *)a2 + 8);
            if (a7 == v102) {
              return result;
            }
          }
        }
        memmove(a1, a7, v102 - a7);
      }
    }
    return result;
  }
  int64_t v91 = (char *)a3 - (char *)a2;
  if (a3 == a2) {
    return result;
  }
  unint64_t v92 = v91 - 8;
  if ((unint64_t)(v91 - 8) < 0x18)
  {
    uint64_t v93 = a7;
    unint64_t v94 = a2;
    do
    {
LABEL_129:
      unint64_t v119 = v94->n128_u64[0];
      unint64_t v94 = (__n128 *)((char *)v94 + 8);
      *(void *)uint64_t v93 = v119;
      v93 += 8;
    }
    while (v94 != a3);
    goto LABEL_130;
  }
  uint64_t v93 = a7;
  unint64_t v94 = a2;
  if ((unint64_t)(a7 - (char *)a2) < 0x20) {
    goto LABEL_129;
  }
  uint64_t v95 = (v92 >> 3) + 1;
  uint64_t v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v93 = &a7[v96];
  unint64_t v94 = (__n128 *)((char *)a2 + v96);
  v97 = a2 + 1;
  unsigned int v98 = (__n128 *)(a7 + 16);
  uint64_t v99 = v95 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    __n128 result = v97[-1];
    __n128 v100 = *v97;
    v98[-1] = result;
    *unsigned int v98 = v100;
    v97 += 2;
    v98 += 2;
    v99 -= 4;
  }
  while (v99);
  if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_129;
  }
LABEL_130:
  if (v93 != a7)
  {
    uint64_t v120 = *a4;
    uint64_t v121 = a3;
    while (a2 != a1)
    {
      uint64_t v123 = (__n128 *)((char *)a2 - 8);
      uint64_t v122 = a2[-1].n128_i64[1];
      unint64_t v124 = *(void *)(v120 + 72 * *((void *)v93 - 1) + 64);
      unint64_t v125 = *(void *)(v120 + 72 * v122 + 64);
      if (BYTE5(v124) >= (unint64_t)BYTE5(v125))
      {
        if (BYTE5(v125) < (unint64_t)BYTE5(v124)
          || WORD1(v124) >= (unint64_t)WORD1(v125)
          && (WORD1(v125) < (unint64_t)WORD1(v124)
           || (unsigned __int16)*(void *)(v120 + 72 * *((void *)v93 - 1) + 64) >= (unint64_t)(unsigned __int16)*(void *)(v120 + 72 * v122 + 64)
           && ((unsigned __int16)*(void *)(v120 + 72 * v122 + 64) < (unint64_t)(unsigned __int16)*(void *)(v120 + 72 * *((void *)v93 - 1) + 64)
            || (unint64_t v126 = HIWORD(v124) & 0x7FFF, v127 = HIWORD(v125) & 0x7FFF, v126 >= v127)
            && ((unint64_t v128 = BYTE4(v124), v129 = BYTE4(v125), v127 >= v126) ? (v130 = v128 >= v129) : (v130 = 1), v130))))
        {
          uint64_t v122 = *((void *)v93 - 1);
          uint64_t v123 = a2;
          v93 -= 8;
        }
      }
      a3[-1].n128_u64[1] = v122;
      a3 = (__n128 *)((char *)a3 - 8);
      uint64_t v121 = (__n128 *)((char *)v121 - 8);
      a2 = v123;
      if (v93 == a7) {
        return result;
      }
    }
    unint64_t v131 = v93 - a7 - 8;
    if (v131 < 0x58 || (unint64_t)(v93 - (char *)v121) < 0x20)
    {
      uint64_t v132 = v93;
      uint64_t v133 = a3;
      goto LABEL_150;
    }
    uint64_t v136 = 0;
    uint64_t v137 = (v131 >> 3) + 1;
    uint64_t v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v132 = &v93[-v138];
    uint64_t v133 = (__n128 *)((char *)a3 - v138);
    uint64_t v139 = v137 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      __n128 result = *(__n128 *)&v93[v136 * 16 - 16];
      int8x16_t v140 = &a3[v136];
      v140[-2] = *(__n128 *)&v93[v136 * 16 - 32];
      v140[-1] = result;
      v136 -= 2;
      v139 -= 4;
    }
    while (v139);
    if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_150:
      uint64_t v134 = &v133[-1].n128_u64[1];
      do
      {
        unint64_t v135 = *((void *)v132 - 1);
        v132 -= 8;
        *v134-- = v135;
      }
      while (v132 != a7);
    }
  }
  return result;
}

void sub_219498824(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = *(CVPixelBufferRef **)a3;
  *(void *)a3 = 0;
  if (v6)
  {
    CVPixelBufferUnlockBaseAddress(*v6, 0);
    CVPixelBufferRelease(*v6);
    MEMORY[0x21D48B5B0](v6, 0x20C4093837F09);
  }
  int v7 = *(CVPixelBufferRef **)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  if (v7)
  {
    CVPixelBufferUnlockBaseAddress(*v7, 0);
    CVPixelBufferRelease(*v7);
    MEMORY[0x21D48B5B0](v7, 0x20C4093837F09);
  }
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  if (a2[14] >= *a2)
  {
    if (a2[15] >= a2[1])
    {
      unsigned int v8 = a2[2];
      if (*a2 <= v8)
      {
        if ((v8 & 0x3F) == 0)
        {
          unsigned int v9 = a2[16];
          *(_DWORD *)(a1 + 8) = v9;
          switch(v9)
          {
            case 4u:
              operator new();
            case 6u:
              operator new();
            case 7u:
              operator new();
            case 8u:
              operator new();
            case 9u:
              operator new();
            default:
              operator new();
          }
        }
        sub_219506150();
      }
      sub_2195060A8();
    }
    sub_219506070();
  }
  sub_219506038();
}

void sub_219498FB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_219499408((CVPixelBufferRef **)va);
  _Unwind_Resume(a1);
}

void sub_219498FC8(_Unwind_Exception *a1)
{
  MEMORY[0x21D48B5B0](v1, 0x10A1C40AA3D422ELL);
  _Unwind_Resume(a1);
}

void sub_21949901C(_DWORD *a1, uint64_t a2, _DWORD *a3)
{
  int v3 = a1[3];
  *a3 = ((*(uint64_t (**)(void))(**(void **)a1 + 40))(*(void *)a1) + 20) * v3 + 4;
  operator new();
}

void sub_2194993CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_219499408((CVPixelBufferRef **)va);
  _Unwind_Resume(a1);
}

void sub_2194993E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_219499408((CVPixelBufferRef **)va);
  _Unwind_Resume(a1);
}

void sub_2194993F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_219499408((CVPixelBufferRef **)va);
  _Unwind_Resume(a1);
}

CVPixelBufferRef **sub_219499408(CVPixelBufferRef **a1)
{
  unsigned int v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    CVPixelBufferUnlockBaseAddress(*v2, 0);
    CVPixelBufferRelease(*v2);
    MEMORY[0x21D48B5B0](v2, 0x20C4093837F09);
  }
  return a1;
}

char *sub_219499468(void *a1, CVPixelBufferRef *a2)
{
  __n128 result = (char *)CVPixelBufferGetBaseAddress(*a2);
  int v4 = *((_DWORD *)a1 + 3);
  *(_DWORD *)__n128 result = v4;
  if (v4)
  {
    unint64_t v5 = result;
    int v6 = 4 * v4 + 4;
    (*(void (**)(void))(*(void *)*a1 + 40))();
    *((_DWORD *)v5 + 1) = v6;
    __n128 result = (char *)(*(uint64_t (**)(void, char *, void, uint64_t))(*(void *)*a1 + 48))(*a1, &v5[v6 & 0xFFFFFFFC], 0, 8);
    LODWORD(v7) = *((_DWORD *)a1 + 3);
    if (v7 >= 2)
    {
      unint64_t v8 = 2;
      do
      {
        unsigned int v9 = ((*(uint64_t (**)(void))(*(void *)*a1 + 40))() + 16) * (v8 - 1) + 4 * v7 + 4;
        *(_DWORD *)&v5[4 * v8] = v9;
        __n128 result = (char *)(*(uint64_t (**)(void, char *, unint64_t, uint64_t))(*(void *)*a1 + 48))(*a1, &v5[v9], v8 - 1, 4);
        unint64_t v7 = *((unsigned int *)a1 + 3);
      }
      while (v8++ < v7);
    }
  }
  return result;
}

uint64_t sub_2194995B4(uint64_t a1, CVPixelBufferRef *a2, CVPixelBufferRef *a3, int a4, int a5)
{
  if (!*(_DWORD *)CVPixelBufferGetBaseAddress(*a2)) {
    sub_2195060E0();
  }
  if (!*(_DWORD *)CVPixelBufferGetBaseAddress(*a3)) {
    sub_2195060E0();
  }
  *(_DWORD *)(a1 + 240) = a4;
  *(_DWORD *)(a1 + 244) = a5;
  if (!a4) {
    *(void *)(a1 + 248) = 0;
  }
  unsigned int v9 = *(uint64_t (**)(void))(**(void **)a1 + 208);

  return v9();
}

uint64_t sub_219499670(unsigned char *a1, CVPixelBufferRef *a2, char a3)
{
  CVPixelBufferLockBaseAddress(*a2, 1uLL);
  BaseAddress = CVPixelBufferGetBaseAddress(*a2);
  a1[272] = a3;
  (*(void (**)(void, void *, unsigned char *))(**(void **)a1 + 216))(*(void *)a1, BaseAddress, a1 + 16);
  unint64_t v7 = *a2;

  return CVPixelBufferUnlockBaseAddress(v7, 1uLL);
}

uint64_t sub_219499700(void *a1)
{
  if (!a1) {
    return 2;
  }
  unsigned int v2 = (char *)operator new(0x1A8uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = 3;
  if (v2)
  {
    *((void *)v2 + 3) = 0x1E000000280;
    *((int32x2_t *)v2 + 6) = vdup_n_s32(0x1388u);
    *((void *)v2 + 7) = 0xA000500010001;
    *(_DWORD *)(v2 + 66) = 16843008;
    *(_OWORD *)(v2 + 76) = xmmword_21950BE50;
    *(_DWORD *)(v2 + 113) = 65537;
    *(_OWORD *)(v2 + 120) = xmmword_21950C3E0;
    *(void *)unsigned int v2 = 0;
    *((void *)v2 + 1) = 0;
    *((void *)v2 + 2) = 0;
    *((_DWORD *)v2 + 8) = 640;
    *(void *)(v2 + 36) = 0;
    *((_WORD *)v2 + 22) = 45;
    v2[46] = -1;
    *((_WORD *)v2 + 32) = 10;
    *(_DWORD *)(v2 + 70) = 720905;
    *((_WORD *)v2 + 37) = 3;
    v2[92] = 1;
    *((_DWORD *)v2 + 24) = 0;
    *(_DWORD *)(v2 + 99) = 0;
    *((void *)v2 + 13) = 1061997773;
    v2[112] = 0;
    *((_DWORD *)v2 + 38) = 1065353216;
    *(_OWORD *)(v2 + 136) = unk_21950C3F0;
    v2[156] = 1;
    *((void *)v2 + 20) = 0x3F00000041A00000;
    *((void *)v2 + 21) = 0xB43E4CCCCDLL;
    *((_DWORD *)v2 + 44) = 0;
    v2[180] = 0;
    *((_DWORD *)v2 + 46) = 2;
    *((_WORD *)v2 + 94) = 0;
    *((void *)v2 + 24) = 0;
    *((void *)v2 + 25) = 0xDEC000005CCLL;
    v2[208] = 0;
    *(void *)&long long v4 = 0xFFFF0000FFFFLL;
    *((void *)&v4 + 1) = 0xFFFF0000FFFFLL;
    *(_OWORD *)(v2 + 212) = v4;
    *(_OWORD *)(v2 + 228) = v4;
    *(_OWORD *)(v2 + 244) = v4;
    *(_OWORD *)(v2 + 260) = v4;
    *(void *)(v2 + 276) = 0xFFFF0000FFFFLL;
    *((_OWORD *)v2 + 19) = 0u;
    *((_OWORD *)v2 + 20) = 0u;
    *((_OWORD *)v2 + 18) = 0u;
    *((void *)v2 + 42) = -1;
    *((void *)v2 + 43) = 0;
    *((void *)v2 + 44) = v2 + 360;
    *((void *)v2 + 45) = 0;
    *((void *)v2 + 48) = 0;
    *((void *)v2 + 49) = 0;
    *((void *)v2 + 46) = 0;
    *((void *)v2 + 47) = v2 + 384;
    v2[400] = 1;
    *((void *)v2 + 51) = -1;
    *((void *)v2 + 52) = 0;
    *a1 = v2;
    return 0;
  }
  return v3;
}

uint64_t sub_2194998A4(uint64_t a1)
{
  if (!a1) {
    return 2;
  }
  uint64_t v1 = sub_21949A6EC(a1);
  MEMORY[0x21D48B5B0](v1, 0x10A0C4079514D77);
  return 0;
}

uint64_t sub_2194998E4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!a1) {
    return 4;
  }
  long long v6 = *(_OWORD *)(a2 + 144);
  long long v7 = *(_OWORD *)(a2 + 160);
  long long v8 = *(_OWORD *)(a2 + 112);
  long long v31 = *(_OWORD *)(a2 + 128);
  long long v32 = v6;
  long long v33 = v7;
  long long v9 = *(_OWORD *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 96);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v27 = *(_OWORD *)(a2 + 64);
  long long v28 = v9;
  long long v29 = v10;
  long long v30 = v8;
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v13 = *(_OWORD *)(a2 + 32);
  v25[0] = *(_OWORD *)a2;
  v25[1] = v12;
  uint64_t v34 = *(void *)(a2 + 176);
  v25[2] = v13;
  long long v26 = v11;
  DWORD2(v27) = 64;
  *((void *)&v26 + 1) = *(void *)a2;
  BYTE10(v28) = 1;
  uint64_t v14 = sub_219499A64(a1, (uint64_t)v25);
  if (!v14)
  {
    long long v22 = 0u;
    long long v21 = 0u;
    unint64_t v24 = 0;
    long long v23 = a3;
    v20[0] = *(unsigned char *)(a2 + 152);
    unint64_t v15 = operator new(0x140uLL, (std::align_val_t)0x40uLL);
    sub_21949BB4C(v15, a1 + 288, v20);
    uint64_t v16 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v15;
    if (v16)
    {
      uint64_t v17 = sub_21949AE18(v16);
      MEMORY[0x21D48B5A0](v17, 64);
    }
    unint64_t v18 = v24;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v14;
}

void sub_219499A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x21D48B5A0](v9, 64);
  sub_219499DC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_219499A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_219499A64(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    long long v2 = *(_OWORD *)(a2 + 128);
    long long v3 = *(_OWORD *)(a2 + 160);
    v10[9] = *(_OWORD *)(a2 + 144);
    v10[10] = v3;
    long long v4 = *(_OWORD *)(a2 + 64);
    long long v5 = *(_OWORD *)(a2 + 96);
    long long v6 = *(_OWORD *)(a2 + 112);
    v10[5] = *(_OWORD *)(a2 + 80);
    v10[6] = v5;
    uint64_t v11 = *(void *)(a2 + 176);
    v10[7] = v6;
    v10[8] = v2;
    long long v7 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v7;
    long long v8 = *(_OWORD *)(a2 + 48);
    v10[2] = *(_OWORD *)(a2 + 32);
    v10[3] = v8;
    v10[4] = v4;
    sub_21949B038((unsigned int *)v10);
    operator new();
  }
  return 4;
}

void sub_219499DA0(_Unwind_Exception *a1)
{
  MEMORY[0x21D48B5B0](v1, 0x1020C4030AFA861);
  _Unwind_Resume(a1);
}

uint64_t sub_219499DC4(uint64_t result)
{
  uint64_t v1 = result;
  long long v2 = *(std::__shared_weak_count **)(result + 56);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

int32x4_t sub_219499E40(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 92) == 2)
    {
      if (*(unsigned char *)(a1 + 100))
      {
        *(unsigned char *)(a1 + 208) = 1;
        (*(void (**)(int8x16_t *__return_ptr))(***(void ***)a1 + 96))(&v11);
        int8x16_t v3 = v11;
        uint64x2_t v2 = v12;
        uint64x2_t v5 = (uint64x2_t)v13;
        uint64x2_t v4 = v14;
        int8x16_t v6 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, v13), (int8x16_t)v12, 4uLL);
        v6.i32[3] = v14.i32[0];
        *(int8x16_t *)(a1 + 264) = v6;
        float v7 = *(float *)(a1 + 104);
        *(int32x2_t *)(a1 + 252) = vzip1_s32(*(int32x2_t *)v3.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
        *(_DWORD *)(a1 + 260) = v2.i32[0];
        *(uint32x4_t *)(a1 + 216) = vcvtq_u32_f32(vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v3)), vcvtq_f64_u64(v2)), v7));
        int32x4_t result = (int32x4_t)vcvtq_u32_f32(vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v5)), vcvtq_f64_u64(v4)), v7));
        *(int32x4_t *)(a1 + 232) = result;
        *(_DWORD *)(a1 + 280) = v4.i32[2];
      }
      else
      {
        *(unsigned char *)(a1 + 208) = 0;
        unsigned int v10 = *(_DWORD *)(a1 + 48);
        int32x4_t result = vdupq_n_s32(v10);
        *(int32x4_t *)(a1 + 212) = result;
        *(int32x4_t *)(a1 + 260) = result;
        *(int32x4_t *)(a1 + 228) = result;
        *(int32x4_t *)(a1 + 244) = result;
        *(_DWORD *)(a1 + 276) = v10;
        *(_DWORD *)(a1 + 280) = v10;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 208) = 0;
      uint64_t v9 = (void *)(a1 + 248);
      memset_pattern16((void *)(a1 + 212), &unk_21950C350, 0x24uLL);
      memset_pattern16(v9, &unk_21950C350, 0x24uLL);
    }
  }
  return result;
}

CVPixelBufferRef sub_219499FB8(uint64_t a1)
{
  if (!a1) {
    sub_219506188();
  }
  uint64_t v1 = *(CVPixelBufferRef **)(a1 + 288);
  if (!v1) {
    sub_2195061C0();
  }
  CVPixelBufferRef v2 = *v1;
  CVPixelBufferRetain(*v1);
  return v2;
}

uint64_t sub_219499FF8(uint64_t a1)
{
  if (!a1) {
    sub_2195061F8();
  }
  return *(unsigned int *)(a1 + 304);
}

CVPixelBufferRef sub_21949A018(uint64_t a1)
{
  if (!a1) {
    sub_219506230();
  }
  uint64_t v1 = *(CVPixelBufferRef **)(a1 + 296);
  if (!v1) {
    sub_219506268();
  }
  CVPixelBufferRef v2 = *v1;
  CVPixelBufferRetain(*v1);
  return v2;
}

uint64_t sub_21949A058(uint64_t a1)
{
  if (!a1) {
    sub_2195062A0();
  }
  return *(unsigned int *)(a1 + 308);
}

uint64_t sub_21949A078(uint64_t a1)
{
  if (!a1) {
    sub_2195062D8();
  }
  return *(unsigned int *)(a1 + 312);
}

uint64_t sub_21949A098(uint64_t a1)
{
  if (!a1) {
    sub_219506310();
  }
  return *(unsigned int *)(a1 + 316);
}

CVPixelBufferRef sub_21949A0B8(uint64_t a1)
{
  if (!a1) {
    sub_219506348();
  }
  uint64_t v1 = *(CVPixelBufferRef **)(a1 + 320);
  if (!v1) {
    return 0;
  }
  CVPixelBufferRef v2 = *v1;
  CVPixelBufferRetain(*v1);
  return v2;
}

uint64_t sub_21949A108(uint64_t a1)
{
  if (!a1) {
    sub_219506380();
  }
  return *(unsigned int *)(a1 + 328);
}

uint64_t sub_21949A128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a2;
  if (a1)
  {
    uint64_t v4 = **(void **)a1;
    unsigned int v5 = *(_DWORD *)(*(void *)a1 + 8);
    uint64_t v6 = a1 + 24;
    sub_2194A66E8(v11, &v12, a1 + 24, v4, a1 + 408, a1 + 416, a3);
    if (*(unsigned char *)(a1 + 188)) {
      BOOL v7 = v5 >= 6;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      (*(void (**)(uint64_t, void))(*(void *)v4 + 136))(v4, *(unsigned int *)(v11[37] + 180));
      uint64_t v9 = 0;
    }
    else
    {
      int v8 = *(unsigned __int8 *)(a1 + 92);
      if (v8 == 2)
      {
        if (v5 - 7 >= 3)
        {
          if (v5 == 6)
          {
            sub_2194903F4((uint64_t)v11, v4, v6, a1 + 352, (uint64_t **)(a1 + 376), *(unsigned char *)(a1 + 400));
          }
          else if (v5 == 4)
          {
            sub_21949729C((uint64_t)v11, v4, v6);
          }
        }
        else
        {
          sub_219489120((uint64_t)v11, v4, v6, a1 + 352, (uint64_t **)(a1 + 376), *(unsigned char *)(a1 + 400));
        }
        goto LABEL_18;
      }
      if (v8 == 1)
      {
        sub_2194A957C(*(void *)(a1 + 8), (uint64_t)v11);
LABEL_18:
        uint64_t v9 = 0;
        *(unsigned char *)(a1 + 400) = 0;
        goto LABEL_19;
      }
      uint64_t v9 = 1;
    }
LABEL_19:
    sub_21949A8D4((uint64_t)v11);
    return v9;
  }
  return 4;
}

void sub_21949A294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21949A2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21949A2BC(void **a1, CVPixelBufferRef *a2, CVPixelBufferRef *a3)
{
  if (!a1) {
    return 4;
  }
  int Width = CVPixelBufferGetWidth(*a2);
  int Height = CVPixelBufferGetHeight(*a2);
  int BytesPerRow = CVPixelBufferGetBytesPerRow(*a2);
  if (*((_DWORD *)a1 + 6) != Width) {
    sub_219506428();
  }
  if (*((_DWORD *)a1 + 7) != Height) {
    sub_2195063F0();
  }
  if (*((_DWORD *)a1 + 8) != BytesPerRow) {
    sub_2195063B8();
  }
  if (*((unsigned char *)a1 + 116))
  {
    kdebug_trace();
    uint64_t v9 = (CVPixelBufferRef *)(a1 + 43);
    int v10 = sub_21949C53C((uint64_t)a1[2], a1 + 36, a2, a3, (CVPixelBufferRef *)a1 + 43);
    kdebug_trace();
    if (a1[43])
    {
      CVPixelBufferRelease((CVPixelBufferRef)a1[43]);
      *uint64_t v9 = 0;
    }
    if (v10)
    {
      if (*((unsigned char *)a1 + 116))
      {
        CVPixelBufferRetain(*a3);
        *uint64_t v9 = *a3;
      }
      goto LABEL_24;
    }
  }
  else
  {
    kdebug_trace();
    if (*((unsigned char *)a1 + 180))
    {
      unsigned int v12 = *((_DWORD *)*a1 + 10);
      if (v12)
      {
        int v13 = 0;
        int v14 = *((_DWORD *)a1 + 46);
        while (1)
        {
          unsigned int v15 = v13 + v14;
          int v16 = v12 >= v13 + v14 ? v13 + v14 : v12;
          CVPixelBufferRef v22 = 0;
          uint64_t v17 = (CVPixelBufferRef *)a1[37];
          unint64_t v18 = (__CVBuffer *)*a1[36];
          CVPixelBufferRef v21 = 0;
          CVPixelBufferRef v22 = v18;
          CVPixelBufferRef v21 = *v17;
          sub_2194995B4((uint64_t)*a1, &v22, &v21, v13, v16);
          if (!sub_21949C190((uint64_t)a1[2], a1 + 36, a2, a3, v13 != 0)) {
            break;
          }
          sub_219499670(*a1, a3, v12 <= v15);
          v13 += v14;
          if (v15 >= v12) {
            goto LABEL_20;
          }
        }
        BOOL v19 = 0;
      }
      else
      {
LABEL_20:
        BOOL v19 = 1;
      }
    }
    else
    {
      BOOL v19 = sub_21949C190((uint64_t)a1[2], a1 + 36, a2, a3, 0);
    }
    kdebug_trace();
    if (v19)
    {
LABEL_24:
      uint64_t v11 = sub_21949A128((uint64_t)a1, (uint64_t)*a3, 0);
      if (*((unsigned char *)a1 + 92) == 2) {
        goto LABEL_27;
      }
      return v11;
    }
  }
  uint64_t v11 = 1;
  if (*((unsigned char *)a1 + 92) == 2) {
LABEL_27:
  }
    sub_219499468(*a1, (CVPixelBufferRef *)a1[37]);
  return v11;
}

uint64_t sub_21949A544(uint64_t a1)
{
  if (!a1) {
    sub_219506460();
  }
  return *(unsigned __int8 *)(a1 + 208);
}

uint64_t sub_21949A564(uint64_t a1)
{
  if (!a1) {
    sub_219506498();
  }
  return 9;
}

uint64_t sub_21949A580(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    sub_2195064D0();
  }
  if (a2 >= 9) {
    sub_219506508();
  }
  return *(unsigned int *)(a1 + 4 * a2 + 212);
}

uint64_t sub_21949A5B0(uint64_t a1)
{
  if (!a1) {
    sub_219506540();
  }
  return 9;
}

uint64_t sub_21949A5CC(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    sub_219506578();
  }
  if (a2 >= 9) {
    sub_2195065B0();
  }
  return *(unsigned int *)(a1 + 4 * a2 + 248);
}

uint64_t sub_21949A5FC(void **a1, uint64_t a2)
{
  if (!a1) {
    return 4;
  }
  uint64_t v4 = a1 + 3;
  if (!sub_21949AF58((uint64_t)(a1 + 3), a2)) {
    return 1;
  }
  __int16 v5 = *((_WORD *)a1 + 37);
  *((unsigned char *)a1 + 178) = sub_2194C0350();
  long long v6 = *(_OWORD *)a2;
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v8 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v4 + 3) = *(_OWORD *)(a2 + 48);
  long long v9 = *(_OWORD *)(a2 + 64);
  long long v10 = *(_OWORD *)(a2 + 80);
  long long v11 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v4 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v4 + 7) = v11;
  *((_OWORD *)v4 + 4) = v9;
  *((_OWORD *)v4 + 5) = v10;
  long long v12 = *(_OWORD *)(a2 + 128);
  long long v13 = *(_OWORD *)(a2 + 144);
  long long v14 = *(_OWORD *)(a2 + 160);
  v4[22] = *(void **)(a2 + 176);
  *((_OWORD *)v4 + 9) = v13;
  *((_OWORD *)v4 + 10) = v14;
  *((_OWORD *)v4 + 8) = v12;
  *((_OWORD *)v4 + 1) = v7;
  *((_OWORD *)v4 + 2) = v8;
  *(_OWORD *)uint64_t v4 = v6;
  *((_WORD *)a1 + 37) = v5;
  (*(void (**)(void, void **))(*(void *)**a1 + 88))(**a1, v4);
  sub_219499E40((uint64_t)a1);
  return 0;
}

uint64_t sub_21949A6EC(uint64_t a1)
{
  sub_21948CFDC(a1 + 376, *(void **)(a1 + 384));
  sub_21948CFDC(a1 + 352, *(void **)(a1 + 360));
  sub_21949A7FC((CVPixelBufferRef **)(a1 + 288));
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = sub_21949AE18(v2);
    MEMORY[0x21D48B5A0](v3, 64);
  }
  uint64_t v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4)
  {
    __int16 v5 = (void *)v4[11];
    if (v5)
    {
      v4[12] = v5;
      operator delete(v5);
    }
    long long v6 = (void *)v4[8];
    if (v6)
    {
      v4[9] = v6;
      operator delete(v6);
    }
    long long v7 = (void *)v4[7];
    v4[7] = 0;
    if (v7) {
      sub_21949AD2C((uint64_t)(v4 + 7), v7);
    }
    MEMORY[0x21D48B5B0](v4, 0x1020C4030AFA861);
  }
  long long v8 = *(uint64_t **)a1;
  *(void *)a1 = 0;
  if (v8)
  {
    sub_21949AC88(v8 + 2);
    uint64_t v9 = *v8;
    *long long v8 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    MEMORY[0x21D48B5B0](v8, 0x1030C40E8DE7E06);
  }
  return a1;
}

CVPixelBufferRef **sub_21949A7FC(CVPixelBufferRef **a1)
{
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    CVPixelBufferUnlockBaseAddress(*v2, 0);
    CVPixelBufferRelease(*v2);
    MEMORY[0x21D48B5B0](v2, 0x20C4093837F09);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    CVPixelBufferUnlockBaseAddress(*v3, 0);
    CVPixelBufferRelease(*v3);
    MEMORY[0x21D48B5B0](v3, 0x20C4093837F09);
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    CVPixelBufferUnlockBaseAddress(*v4, 0);
    CVPixelBufferRelease(*v4);
    MEMORY[0x21D48B5B0](v4, 0x20C4093837F09);
  }
  return a1;
}

uint64_t sub_21949A8D4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 608);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 592);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 592);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 496);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    __int16 v5 = *(std::__shared_weak_count **)(a1 + 480);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    __int16 v5 = *(std::__shared_weak_count **)(a1 + 480);
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  uint64_t v6 = *(void *)(a1 + 296);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 304);
    long long v8 = *(void **)(a1 + 296);
    if (v7 != v6)
    {
      do
      {
        uint64_t v9 = v7 - 552;
        sub_21949AABC(v7 - 312);
        uint64_t v7 = v9;
      }
      while (v9 != v6);
      long long v8 = *(void **)(a1 + 296);
    }
    *(void *)(a1 + 304) = v6;
    operator delete(v8);
  }
  long long v10 = *(void **)(a1 + 96);
  if (v10)
  {
    *(void *)(a1 + 104) = v10;
    operator delete(v10);
  }
  long long v12 = (void **)(a1 + 72);
  sub_21949AB60(&v12);
  long long v12 = (void **)(a1 + 48);
  sub_21949AB60(&v12);
  long long v12 = (void **)(a1 + 24);
  sub_21949AB60(&v12);
  return a1;
}

uint64_t sub_21949AABC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(void *)(a1 + 152) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 120);
  if (v4)
  {
    *(void *)(a1 + 128) = v4;
    operator delete(v4);
  }
  __int16 v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(void *)(a1 + 104) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 72);
  if (v6)
  {
    *(void *)(a1 + 80) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 48);
  if (v7)
  {
    *(void *)(a1 + 56) = v7;
    operator delete(v7);
  }
  long long v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(void *)(a1 + 32) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_21949AB60(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (!v2) {
    return;
  }
  uint64_t v4 = (char *)v1[1];
  __int16 v5 = **a1;
  if (v4 == v2) {
    goto LABEL_14;
  }
  do
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 3);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 5);
      if (!v7) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 5);
      if (!v7) {
        goto LABEL_4;
      }
    }
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_4:
    v4 -= 112;
  }
  while (v4 != v2);
  __int16 v5 = **a1;
LABEL_14:
  v1[1] = v2;

  operator delete(v5);
}

void *sub_21949AC88(void *a1)
{
  uint64_t v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[22];
  if (v3)
  {
    a1[23] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[19];
  if (v4)
  {
    a1[20] = v4;
    operator delete(v4);
  }
  __int16 v5 = (void *)a1[16];
  if (v5)
  {
    a1[17] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[13];
  if (v6)
  {
    a1[14] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[10];
  if (v7)
  {
    a1[11] = v7;
    operator delete(v7);
  }
  long long v8 = (void *)a1[7];
  if (v8)
  {
    a1[8] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[4];
  if (v9)
  {
    a1[5] = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_21949AD2C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = a2[11];
    if (v3)
    {
      uint64_t v4 = a2[12];
      __int16 v5 = (void *)a2[11];
      if (v4 != v3)
      {
        uint64_t v6 = a2[12];
        do
        {
          long long v8 = *(void **)(v6 - 24);
          v6 -= 24;
          uint64_t v7 = v8;
          if (v8)
          {
            *(void *)(v4 - 16) = v7;
            operator delete(v7);
          }
          uint64_t v4 = v6;
        }
        while (v6 != v3);
        __int16 v5 = (void *)a2[11];
      }
      a2[12] = v3;
      operator delete(v5);
    }
    uint64_t v9 = a2[8];
    if (v9)
    {
      uint64_t v10 = a2[9];
      long long v11 = (void *)a2[8];
      if (v10 != v9)
      {
        uint64_t v12 = a2[9];
        do
        {
          long long v14 = *(void **)(v12 - 24);
          v12 -= 24;
          long long v13 = v14;
          if (v14)
          {
            *(void *)(v10 - 16) = v13;
            operator delete(v13);
          }
          uint64_t v10 = v12;
        }
        while (v12 != v9);
        long long v11 = (void *)a2[8];
      }
      a2[9] = v9;
      operator delete(v11);
    }
    JUMPOUT(0x21D48B5B0);
  }
}

uint64_t sub_21949AE18(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    sub_2194F5FA4(a1);
    sub_2194F60A8(a1);
  }
  uint64_t v2 = *(uint64_t **)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t *v2 = 0;
    if (v3) {
      ((void (*)(void))v2[1])();
    }
    MEMORY[0x21D48B5B0](v2, 0xA0C40AFF93C70);
  }
  uint64_t v4 = *(CVPixelBufferRef **)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v4)
  {
    CVPixelBufferUnlockBaseAddress(*v4, 0);
    CVPixelBufferRelease(*v4);
    MEMORY[0x21D48B5B0](v4, 0x20C4093837F09);
  }
  __int16 v5 = *(const void ***)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v5)
  {
    sub_219500908(*v5);
    MEMORY[0x21D48B5B0](v5, 0x20C4093837F09);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 112);
  if (!v6 || atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

BOOL sub_21949AF58(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 24);
  int v3 = *(unsigned __int8 *)(a2 + 68);
  BOOL v4 = v3 != 2;
  BOOL v6 = *(unsigned __int8 *)(a1 + 68) != v3 || *(unsigned __int8 *)(a1 + 78) != *(unsigned __int8 *)(a2 + 78);
  BOOL v10 = *(_DWORD *)a1 != *(_DWORD *)a2 || *(_DWORD *)(a1 + 24) != v2;
  BOOL v12 = *(unsigned __int16 *)(a1 + 40) != *(unsigned __int16 *)(a2 + 40) || *(_DWORD *)(a2 + 28) > v2;
  v8.i64[1] = *(void *)(a2 + 56);
  v8.i64[0] = *(void *)(a2 + 4);
  v7.i64[1] = *(void *)(a1 + 56);
  v7.i64[0] = *(void *)(a1 + 4);
  unsigned __int8 v13 = (*(_DWORD *)(a1 + 42) != *(_DWORD *)(a2 + 42)) | vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v7, v8))));
  BOOL v14 = *(void *)(a1 + 12) != *(void *)(a2 + 12) || v4;
  BOOL v15 = *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52) && *(unsigned __int16 *)(a1 + 38) == *(unsigned __int16 *)(a2 + 38);
  BOOL v16 = v14 || v6;
  char v17 = !v15 || v10;
  return ((v13 | (v16 | v17 | v12)) & 1) == 0;
}

BOOL sub_21949B038(unsigned int *a1)
{
  unsigned int v1 = *a1;
  unsigned int v2 = (*a1 + 1) & 0xFFFFFFFE;
  BOOL v4 = *a1 != v2 && a1[16] > 6;
  if (v4)
  {
    *a1 = v2;
    if (v1 == a1[14]) {
      a1[14] = v2;
    }
  }
  return v4;
}

void sub_21949B07C(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  JUMPOUT(0x21D48B5B0);
}

void sub_21949B0B4(uint64_t a1)
{
  *(void *)(a1 + 120) = sub_2195004E4(*(void *)(a1 + 104));
  operator new();
}

void sub_21949B174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21949B18C((const void ***)va);
  _Unwind_Resume(a1);
}

const void ***sub_21949B18C(const void ***a1)
{
  unsigned int v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_219500908(*v2);
    MEMORY[0x21D48B5B0](v2, 0x20C4093837F09);
  }
  return a1;
}

void sub_21949B1E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_DWORD *)(a1 + 148) = 0;
  *(void *)(a1 + 264) = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)a3;
  sub_2194C01DC(a1 + 192, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 96);
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v5;
    _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Use of XPC Services %d", (uint8_t *)&buf, 8u);
  }
  if (*(void *)(a3 + 40))
  {
    if (*(unsigned char *)(a1 + 96))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_21947DECC(&buf, "Error User Parameters conflict with valid ISP session and use_xpc_service");
      std::runtime_error::runtime_error(exception, &buf);
      exception->__vftable = (std::runtime_error_vtbl *)&unk_26CAD6550;
      __cxa_throw(exception, (struct type_info *)&unk_26CAD6588, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  kdebug_trace();
  operator new();
}

void sub_21949B97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v26)
  {
LABEL_6:
    sub_21949BAEC(v24);
    sub_219499408(v23);
    sub_21949B18C((const void ***)(v21 + 128));
    sub_21947E0B8(v22);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t **sub_21949BAEC(uint64_t **a1)
{
  unsigned int v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t *v2 = 0;
    if (v3) {
      ((void (*)(void))v2[1])();
    }
    MEMORY[0x21D48B5B0](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

void sub_21949BB50(uint64_t a1, unsigned char *a2)
{
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_DWORD *)(a1 + 148) = 0;
  *(void *)(a1 + 264) = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 96) = *a2;
  kdebug_trace();
  operator new();
}

void sub_21949C0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      sub_21949BAEC((uint64_t **)(v21 + 144));
      sub_219499408(v23);
      sub_21949B18C((const void ***)(v21 + 128));
      sub_21947E0B8(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

BOOL sub_21949C190(uint64_t a1, uint64_t **a2, void *a3, CVPixelBufferRef *a4, char a5)
{
  if (!*(unsigned char *)(a1 + 96) && !*(void *)(a1 + 104)) {
    return 0;
  }
  if (a5)
  {
    int v10 = 0;
    LOBYTE(v30) = 0;
    unsigned __int8 v31 = 0;
    goto LABEL_10;
  }
  *a4 = 0;
  LOBYTE(v30) = 0;
  unsigned __int8 v31 = 0;
  sub_2194F2CF4(*(CVPixelBufferPoolRef **)(a1 + 144), &v22);
  if (!(_BYTE)v23)
  {
    int v10 = v31;
    if (v31) {
      goto LABEL_9;
    }
    return 0;
  }
  long long v30 = v22;
  long long v22 = 0uLL;
  unsigned __int8 v31 = 1;
  int v10 = 1;
LABEL_9:
  *a4 = (CVPixelBufferRef)v30;
LABEL_10:
  __src = 0;
  *(void *)long long v28 = 0;
  uint64_t v29 = 0;
  sub_21949D5EC(&__src, 2uLL);
  *(void *)__src = *a3;
  BOOL v12 = (char *)__src;
  *((void *)__src + 1) = *a4;
  uint64_t v13 = *a2[1];
  uint64_t v14 = **a2;
  uint64_t v15 = **(void **)(a1 + 136);
  if (*(unsigned char *)(a1 + 96))
  {
    int v25 = 0;
    uint64_t v26 = 0;
    *(void *)&long long v22 = v13;
    *((void *)&v22 + 1) = v14;
    uint64_t v23 = v15;
    __p = 0;
    sub_21949D7A0(&__p, v12, *(char **)v28, (uint64_t)(*(void *)v28 - (void)v12) >> 3);
    BOOL v11 = sub_2194F5B68(a1, (uint64_t)&v22, a5, 1) == 0;
    if (__p)
    {
      int v25 = __p;
      operator delete(__p);
    }
    if (!v11) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  BOOL v11 = sub_219500E54(*(void *)(a1 + 104), *(void *)(a1 + 120), v13, v14, v15, (unint64_t *)&__src, 1u);
  if (v11)
  {
LABEL_16:
    if ((a5 & 1) == 0)
    {
      CVPixelBufferRetain(*a4);
      BOOL v16 = *a4;
      if (CVPixelBufferLockBaseAddress(v16, 0))
      {
        sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGPWrapper.cpp", 232, "cv_ret == kCVReturnSuccess", (void (*)(void *))sub_2194FF9C0);
        abort();
      }
      BaseAddress = CVPixelBufferGetBaseAddress(v16);
      long long v19 = *(_OWORD *)(a1 + 224);
      long long v18 = *(_OWORD *)(a1 + 240);
      BaseAddress[1] = *(_OWORD *)(a1 + 208);
      BaseAddress[2] = v19;
      BaseAddress[3] = v18;
      _OWORD *BaseAddress = *(_OWORD *)(a1 + 192);
      ++*(_DWORD *)(a1 + 196);
      CVPixelBufferUnlockBaseAddress(v16, 0);
    }
  }
LABEL_19:
  if (__src)
  {
    *(void *)long long v28 = __src;
    operator delete(__src);
  }
  if (v10)
  {
    uint64_t v20 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1))
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  return v11;
}

void sub_21949C444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_21949C4B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21949C458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
  {
    operator delete(__p);
    sub_21949C4B8((uint64_t)&a19);
    _Unwind_Resume(a1);
  }
  sub_21949C4B8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_21949C4B8(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 16))
  {
    unsigned int v2 = *(std::__shared_weak_count **)(result + 8);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t sub_21949C53C(uint64_t a1, uint64_t **a2, void *a3, CVPixelBufferRef *a4, CVPixelBufferRef *a5)
{
  if (!*(unsigned char *)(a1 + 96) && !*(void *)(a1 + 104)) {
    return 0;
  }
  *a4 = 0;
  sub_2194F2CF4(*(CVPixelBufferPoolRef **)(a1 + 144), &pixelBuffer);
  if (!v37) {
    return 0;
  }
  int v10 = pixelBuffer;
  *a4 = pixelBuffer;
  if (!*a5)
  {
    CVPixelBufferLockBaseAddress(v10, 1uLL);
    *(void *)((char *)CVPixelBufferGetBaseAddress(*a4) + *(unsigned int *)(a1 + 232) + *(unsigned int *)(a1 + 256)) = *(void *)(a1 + 264);
    CVPixelBufferUnlockBaseAddress(*a4, 1uLL);
  }
  BOOL v11 = a2[4];
  if (v11) {
    uint64_t v12 = *v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v14 = *a2[1];
  uint64_t v15 = **a2;
  uint64_t v16 = **(void **)(a1 + 136);
  __src = 0;
  *(void *)long long v33 = 0;
  if (v12) {
    unint64_t v17 = 4;
  }
  else {
    unint64_t v17 = 3;
  }
  uint64_t v34 = 0;
  sub_21949D5EC(&__src, v17);
  *(void *)__src = *a3;
  long long v18 = (char *)__src;
  *((void *)__src + 1) = *a4;
  CVPixelBufferRef v19 = *a5;
  if (!*a5) {
    CVPixelBufferRef v19 = *a4;
  }
  *((void *)v18 + 2) = v19;
  if (v12) {
    *((void *)v18 + 3) = v12;
  }
  if (!*(unsigned char *)(a1 + 96))
  {
    if (!sub_219500E54(*(void *)(a1 + 104), *(void *)(a1 + 120), v14, v15, v16, (unint64_t *)&__src, 1u)) {
      goto LABEL_21;
    }
LABEL_29:
    CVPixelBufferRetain(*a4);
    unint64_t v24 = *a4;
    if (CVPixelBufferLockBaseAddress(v24, 0))
    {
      sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGPWrapper.cpp", 232, "cv_ret == kCVReturnSuccess", (void (*)(void *))sub_2194FF9C0);
      abort();
    }
    BaseAddress = CVPixelBufferGetBaseAddress(v24);
    long long v27 = *(_OWORD *)(a1 + 224);
    long long v26 = *(_OWORD *)(a1 + 240);
    BaseAddress[1] = *(_OWORD *)(a1 + 208);
    BaseAddress[2] = v27;
    BaseAddress[3] = v26;
    _OWORD *BaseAddress = *(_OWORD *)(a1 + 192);
    ++*(_DWORD *)(a1 + 196);
    CVPixelBufferUnlockBaseAddress(v24, 0);
    uint64_t v13 = 1;
    uint64_t v21 = __src;
    if (!__src) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  long long v30 = 0;
  uint64_t v31 = 0;
  v28[0] = v14;
  v28[1] = v15;
  int v28[2] = v16;
  __p = 0;
  sub_21949D7A0(&__p, v18, *(char **)v33, (uint64_t)(*(void *)v33 - (void)v18) >> 3);
  int v20 = sub_2194F5B68(a1, (uint64_t)v28, 0, 1);
  if (__p)
  {
    long long v30 = __p;
    operator delete(__p);
  }
  if (!v20) {
    goto LABEL_29;
  }
LABEL_21:
  uint64_t v13 = 0;
  uint64_t v21 = __src;
  if (__src)
  {
LABEL_22:
    *(void *)long long v33 = v21;
    operator delete(v21);
  }
LABEL_23:
  if (v37)
  {
    long long v22 = v36;
    if (v36)
    {
      if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  return v13;
}

void sub_21949C7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_21949C4B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21949C804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_21949C4B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21949C818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_21949C4B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21949C82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  if (__p)
  {
    operator delete(__p);
    sub_21949C4B8((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  sub_21949C4B8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

BOOL sub_21949C88C(uint64_t a1, uint64_t *a2)
{
  if (!*(unsigned char *)(a1 + 96)) {
    return 0;
  }
  int v4 = sub_2194F5810(a1, (uint64_t)a2);
  *(_DWORD *)(a1 + 100) = v4;
  int v5 = v4;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
      return result;
    case 22:
      BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_21950677C(a2);
        return 0;
      }
      break;
    case 31:
      BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_21950680C(result, v7, v8, v9, v10, v11, v12, v13);
        BOOL result = 0;
      }
      break;
    case 32:
      BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_219506848(result, v14, v15, v16, v17, v18, v19, v20);
        BOOL result = 0;
      }
      break;
    case 33:
      BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_219506740(result, v21, v22, v23, v24, v25, v26, v27);
        BOOL result = 0;
      }
      break;
    default:
      BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_2195066D0();
        BOOL result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_21949CA68(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  if (!*(unsigned char *)(a1 + 96)) {
    return *(unsigned __int8 *)(a1 + 96) | 0x100u;
  }
  unsigned int v5 = sub_2194F5A4C(a1, a2, a3, a4);
  *(_DWORD *)(a1 + 100) = v5;
  char v6 = sub_2194F61A8(v5);
  BOOL v7 = v5 == 0;
  if (v6)
  {
    BOOL v7 = 0;
    int v8 = 0;
  }
  else
  {
    int v8 = 1;
  }
  return v7 | (v8 << 8);
}

BOOL sub_21949CAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 96)) {
    return 0;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *(void *)(a1 + 8);
    *(_DWORD *)uint64_t v18 = 134218240;
    *(void *)&v18[4] = v4;
    *(_WORD *)&v18[12] = 2048;
    *(void *)&v18[14] = v5;
    _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_INFO, "ReconnectSession: connection=%p, client_id=%llu", v18, 0x16u);
  }
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&v18[16] = v6;
  *(void *)&v18[16] = **(void **)(a1 + 136);
  if (*(void *)a1)
  {
    int v7 = sub_2194F5570(a1, (CVPixelBufferRef *)v18);
    *(_DWORD *)(a1 + 100) = v7;
    if (!v7) {
      return 1;
    }
    if (v7 != 33) {
      return 0;
    }
    if (*(void *)a1 || *(void *)(a1 + 8)) {
      sub_219506930();
    }
  }
  int v8 = sub_2194F519C(a1);
  *(_DWORD *)(a1 + 100) = v8;
  if (!v8)
  {
    int v17 = sub_2194F5570(a1, (CVPixelBufferRef *)v18);
    *(_DWORD *)(a1 + 100) = v17;
    if (v17)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        sub_219506884();
      }
      sub_2194F60A8(a1);
      return 0;
    }
    return 1;
  }
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (!result) {
    return result;
  }
  sub_2195068F4(result, v10, v11, v12, v13, v14, v15, v16);
  return 0;
}

uint64_t sub_21949CC68(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t *a4, uint64_t *a5, char a6)
{
  if (*a4) {
    BOOL v6 = *a5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    BOOL v7 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v7) {
      sub_219506968(v7, v8, v9, v10, v11, v12, v13, v14);
    }
    return 4;
  }
  __p = 0;
  int v107 = 0;
  uint64_t v108 = 0;
  uint64_t v18 = *a2;
  int v17 = a2[1];
  uint64_t v19 = *a3;
  uint64_t v20 = a3[1];
  unint64_t v21 = v20 - *a3 + v17 - *a2;
  if (!v21)
  {
    uint64_t v22 = 0;
    if (v18 != v17) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  if (v21 >> 61) {
    sub_219486AE4();
  }
  uint64_t v22 = (char *)operator new(8 * v21);
  __p = v22;
  int v107 = v22;
  uint64_t v108 = &v22[8 * v21];
  if (v18 == v17)
  {
LABEL_14:
    if (v19 != v20) {
      goto LABEL_54;
    }
LABEL_83:
    kdebug_trace();
    kdebug_trace();
    if (!*(unsigned char *)(a1 + 96))
    {
      uint64_t v80 = *(void *)(a1 + 104);
      if (!v80)
      {
        sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGPWrapper.cpp", 657, "isp_ && \"Failed to instantiate an ISP driver plugin\"", (void (*)(void *))sub_2194FF9C0);
        abort();
      }
      if (sub_219500E54(v80, *(void *)(a1 + 120), *a5, *a4, **(void **)(a1 + 136), (unint64_t *)&__p, 1u)) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = 3;
      }
      goto LABEL_98;
    }
    int8x16_t v103 = 0;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    uint64_t v69 = *a4;
    v102[0] = *a5;
    v102[1] = v69;
    v102[2] = **(void **)(a1 + 136);
    sub_21949D7A0(&v103, (char *)__p, v107, (v107 - (unsigned char *)__p) >> 3);
    unsigned int v70 = sub_2194F5B68(a1, (uint64_t)v102, a6, 1);
    *(_DWORD *)(a1 + 100) = v70;
    if (!v70)
    {
      uint64_t v15 = 0;
      uint64_t v71 = v103;
      if (!v103)
      {
LABEL_98:
        kdebug_trace();
        kdebug_trace();
        if (v15)
        {
          BOOL v81 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v81) {
            sub_2195069A4(v81, v82, v83, v84, v85, v86, v87, v88);
          }
        }
        goto LABEL_101;
      }
LABEL_97:
      uint64_t v104 = v71;
      operator delete(v71);
      goto LABEL_98;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      sub_219506A8C(a6, v70);
      if (v70 > 0x22) {
        goto LABEL_113;
      }
    }
    else if (v70 > 0x22)
    {
      goto LABEL_113;
    }
    if (((1 << v70) & 0x1FFFFC41ELL) != 0) {
      goto LABEL_88;
    }
    if (((1 << v70) & 0x400003AA0) != 0)
    {
      uint64_t v15 = 2;
      uint64_t v71 = v103;
      if (!v103) {
        goto LABEL_98;
      }
      goto LABEL_97;
    }
    if (((1 << v70) & 0x200000100) != 0)
    {
      BOOL v90 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v90)
      {
        sub_219506A50(v90, v91, v92, v93, v94, v95, v96, v97);
        uint64_t v15 = 1;
        uint64_t v71 = v103;
        if (!v103) {
          goto LABEL_98;
        }
      }
      else
      {
        uint64_t v15 = 1;
        uint64_t v71 = v103;
        if (!v103) {
          goto LABEL_98;
        }
      }
      goto LABEL_97;
    }
LABEL_113:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      sub_2195069E0();
    }
LABEL_88:
    uint64_t v15 = 3;
    uint64_t v71 = v103;
    if (!v103) {
      goto LABEL_98;
    }
    goto LABEL_97;
  }
LABEL_17:
  while (1)
  {
    uint64_t v23 = *v18;
    if (!*v18) {
      break;
    }
    if (v22 < v108)
    {
      *(void *)uint64_t v22 = v23;
      v22 += 8;
      int v107 = v22;
      if (++v18 == v17) {
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v24 = (char *)__p;
      int64_t v25 = v22 - (unsigned char *)__p;
      uint64_t v26 = (v22 - (unsigned char *)__p) >> 3;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61) {
        sub_219486AE4();
      }
      uint64_t v28 = v108 - (unsigned char *)__p;
      if ((v108 - (unsigned char *)__p) >> 2 > v27) {
        unint64_t v27 = v28 >> 2;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29)
      {
        if (v29 >> 61) {
          sub_219486AFC();
        }
        long long v30 = operator new(8 * v29);
        uint64_t v31 = &v30[8 * v26];
        *(void *)uint64_t v31 = v23;
        long long v32 = v31 + 8;
        if (v22 != v24)
        {
LABEL_28:
          unint64_t v33 = v22 - 8 - v24;
          if (v33 < 0x168)
          {
            uint64_t v34 = v22;
            goto LABEL_30;
          }
          if (&v30[v25 - 8 - (v33 & 0xFFFFFFFFFFFFFFF8)] > &v30[v25 - 8])
          {
            uint64_t v34 = v22;
            goto LABEL_30;
          }
          if (&v22[-(v33 & 0xFFFFFFFFFFFFFFF8) - 8] > v22 - 8)
          {
            uint64_t v34 = v22;
            goto LABEL_30;
          }
          if ((unint64_t)(v22 - v30 - v25) < 0x20)
          {
            uint64_t v34 = v22;
            goto LABEL_30;
          }
          uint64_t v36 = (v33 >> 3) + 1;
          uint64_t v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v34 = &v22[-v37];
          v31 -= v37;
          unint64_t v38 = &v30[8 * v26 - 16];
          unint64_t v39 = v22 - 16;
          uint64_t v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v41 = *(_OWORD *)v39;
            *(v38 - 1) = *((_OWORD *)v39 - 1);
            *unint64_t v38 = v41;
            v38 -= 2;
            v39 -= 32;
            v40 -= 4;
          }
          while (v40);
          if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_30:
              uint64_t v35 = *((void *)v34 - 1);
              v34 -= 8;
              *((void *)v31 - 1) = v35;
              v31 -= 8;
            }
            while (v34 != v24);
          }
          uint64_t v22 = (char *)__p;
          __p = v31;
          uint64_t v108 = &v30[8 * v29];
          if (!v22) {
            goto LABEL_36;
          }
LABEL_35:
          operator delete(v22);
          goto LABEL_36;
        }
      }
      else
      {
        long long v30 = 0;
        uint64_t v31 = (char *)(8 * v26);
        *(void *)(8 * v26) = v23;
        long long v32 = (char *)(8 * v26 + 8);
        if (v22 != v24) {
          goto LABEL_28;
        }
      }
      __p = v31;
      uint64_t v108 = &v30[8 * v29];
      if (v22) {
        goto LABEL_35;
      }
LABEL_36:
      uint64_t v22 = v32;
      int v107 = v32;
      if (++v18 == v17)
      {
LABEL_50:
        uint64_t v19 = *a3;
        uint64_t v20 = a3[1];
        if (*a3 == v20) {
          goto LABEL_83;
        }
LABEL_54:
        while (2)
        {
          uint64_t v51 = *v19;
          if (!*v19)
          {
            BOOL v72 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v72)
            {
              sub_219506B1C(v72, v73, v74, v75, v76, v77, v78, v79);
              uint64_t v15 = 4;
            }
            else
            {
LABEL_91:
              uint64_t v15 = 4;
            }
            goto LABEL_101;
          }
          if (v22 < v108)
          {
            *(void *)uint64_t v22 = v51;
            BOOL v50 = v22 + 8;
            goto LABEL_53;
          }
          unint64_t v52 = (char *)__p;
          int64_t v53 = v22 - (unsigned char *)__p;
          uint64_t v54 = (v22 - (unsigned char *)__p) >> 3;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 61) {
            sub_219486AE4();
          }
          uint64_t v56 = v108 - (unsigned char *)__p;
          if ((v108 - (unsigned char *)__p) >> 2 > v55) {
            unint64_t v55 = v56 >> 2;
          }
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v55;
          }
          if (v57)
          {
            if (v57 >> 61) {
              sub_219486AFC();
            }
            unint64_t v58 = operator new(8 * v57);
            unint64_t v59 = &v58[8 * v54];
            *(void *)unint64_t v59 = v51;
            BOOL v50 = v59 + 8;
            if (v22 != v52)
            {
LABEL_65:
              unint64_t v60 = v22 - 8 - v52;
              if (v60 < 0x168)
              {
                unint64_t v61 = v22;
                goto LABEL_67;
              }
              if (&v58[v53 - 8 - (v60 & 0xFFFFFFFFFFFFFFF8)] > &v58[v53 - 8])
              {
                unint64_t v61 = v22;
                goto LABEL_67;
              }
              if (&v22[-(v60 & 0xFFFFFFFFFFFFFFF8) - 8] > v22 - 8)
              {
                unint64_t v61 = v22;
                goto LABEL_67;
              }
              if ((unint64_t)(v22 - v58 - v53) < 0x20)
              {
                unint64_t v61 = v22;
                goto LABEL_67;
              }
              uint64_t v63 = (v60 >> 3) + 1;
              uint64_t v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v61 = &v22[-v64];
              v59 -= v64;
              uint64_t v65 = &v58[8 * v54 - 16];
              uint64_t v66 = v22 - 16;
              uint64_t v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v68 = *(_OWORD *)v66;
                *(v65 - 1) = *((_OWORD *)v66 - 1);
                *uint64_t v65 = v68;
                v65 -= 2;
                v66 -= 32;
                v67 -= 4;
              }
              while (v67);
              if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_67:
                  uint64_t v62 = *((void *)v61 - 1);
                  v61 -= 8;
                  *((void *)v59 - 1) = v62;
                  v59 -= 8;
                }
                while (v61 != v52);
              }
              uint64_t v22 = (char *)__p;
              __p = v59;
              uint64_t v108 = &v58[8 * v57];
              if (!v22)
              {
LABEL_53:
                int v107 = v50;
                ++v19;
                uint64_t v22 = v50;
                if (v19 == v20) {
                  goto LABEL_83;
                }
                continue;
              }
LABEL_72:
              operator delete(v22);
              goto LABEL_53;
            }
          }
          else
          {
            unint64_t v58 = 0;
            unint64_t v59 = (char *)(8 * v54);
            *(void *)(8 * v54) = v51;
            BOOL v50 = (char *)(8 * v54 + 8);
            if (v22 != v52) {
              goto LABEL_65;
            }
          }
          break;
        }
        __p = v59;
        uint64_t v108 = &v58[8 * v57];
        if (!v22) {
          goto LABEL_53;
        }
        goto LABEL_72;
      }
    }
  }
  BOOL v42 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (!v42) {
    goto LABEL_91;
  }
  sub_219506B58(v42, v43, v44, v45, v46, v47, v48, v49);
  uint64_t v15 = 4;
LABEL_101:
  if (__p)
  {
    int v107 = (char *)__p;
    operator delete(__p);
  }
  return v15;
}

void sub_21949D3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21949D428(const time_t *a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  BOOL v2 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v2) {
    sub_219506E14(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  uint64_t v10 = localtime(a1 + 4);
  strftime(v21, 0x64uLL, "%F %T", v10);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219506D94();
  }
  uint64_t v11 = localtime(a1 + 6);
  strftime(v21, 0x64uLL, "%F %T", v11);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    sub_219506D14();
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
  }
  else if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    goto LABEL_7;
  }
  sub_219506C9C((uint64_t)(a1 + 2), v12, v13, v14, v15, v16, v17, v18);
LABEL_7:
  uint64_t v19 = localtime(a1 + 8);
  strftime(v21, 0x64uLL, "%F %T", v19);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219506C18();
  }
  uint64_t v20 = localtime(a1 + 10);
  strftime(v21, 0x64uLL, "%F %T", v20);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219506B94();
  }
}

void sub_21949D5EC(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    uint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_219486AE4();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_219486AFC();
      }
      uint64_t v13 = operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    uint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      unint64_t v21 = &v13[8 * v9 - 16];
      uint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *unint64_t v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      uint64_t v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void *sub_21949D7A0(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_22:
    }
      sub_219486AE4();
    uint64_t v13 = v12;
    BOOL result = operator new(8 * v12);
    uint64_t v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      BOOL result = memcpy(result, v6, v14);
    }
    size_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  size_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    uint64_t v19 = (void *)*result;
LABEL_20:
    BOOL result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  unint64_t v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    BOOL result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *size_t v15 = &v9[v14];
  return result;
}

void sub_21949D8E8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_21949D94C()
{
}

void sub_21949DA7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_219499408((CVPixelBufferRef **)va);
  _Unwind_Resume(a1);
}

void sub_21949DA94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_219499408((CVPixelBufferRef **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21949DAA8(uint64_t a1, int a2)
{
  if (a2)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C33980, memory_order_acquire) & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_267C33980)) {
        operator new();
      }
    }
    uint64_t v3 = *(void *)qword_267C33978;
    uint64_t v4 = *(void *)(qword_267C33978 + 8);
    if (*(void *)qword_267C33978 != v4)
    {
      while (*(void *)v3 != a1)
      {
        v3 += 16;
        if (v3 == v4) {
          return 0;
        }
      }
    }
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C33990, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C33990))
    {
      operator new();
    }
    uint64_t v3 = *(void *)qword_267C33988;
    uint64_t v4 = *(void *)(qword_267C33988 + 8);
    if (*(void *)qword_267C33988 != v4)
    {
      while (*(void *)v3 != a1)
      {
        v3 += 16;
        if (v3 == v4) {
          return 0;
        }
      }
    }
  }
  if (v3 == v4) {
    return 0;
  }
  else {
    return **(void **)(v3 + 8);
  }
}

void sub_21949DBFC(_Unwind_Exception *a1)
{
}

void sub_21949DC14(_Unwind_Exception *a1)
{
}

void sub_21949DC2C()
{
}

void sub_21949DD54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_guard_abort(&qword_267C33990);
  sub_21949DD8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21949DD74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21949DD8C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21949DD8C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    BOOL v2 = *(CVPixelBufferRef **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v2)
    {
      CVPixelBufferUnlockBaseAddress(*v2, 0);
      CVPixelBufferRelease(*v2);
      MEMORY[0x21D48B5B0](v2, 0x20C4093837F09);
    }
  }
  return a1;
}

uint64_t sub_21949DDF4(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C33990, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C33990))
  {
    operator new();
  }
  uint64_t v2 = qword_267C33988;
  uint64_t v3 = *(uint64_t **)qword_267C33988;
  uint64_t v4 = *(uint64_t **)(qword_267C33988 + 8);
  if (*(uint64_t **)qword_267C33988 != v4)
  {
    while (*v3 != a1)
    {
      v3 += 2;
      if (v3 == v4) {
        goto LABEL_7;
      }
    }
  }
  if (v3 != v4) {
    goto LABEL_13;
  }
LABEL_7:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C33980, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_267C33980)) {
      operator new();
    }
  }
  uint64_t v2 = qword_267C33978;
  uint64_t v3 = *(uint64_t **)qword_267C33978;
  uint64_t v5 = *(uint64_t **)(qword_267C33978 + 8);
  if (*(uint64_t **)qword_267C33978 != v5)
  {
    while (*v3 != a1)
    {
      v3 += 2;
      if (v3 == v5) {
        return 0;
      }
    }
  }
  if (v3 != v5)
  {
LABEL_13:
    sub_21949DF7C(v2, v3);
    return 1;
  }
  return 0;
}

void sub_21949DF4C(_Unwind_Exception *a1)
{
}

void sub_21949DF64(_Unwind_Exception *a1)
{
}

uint64_t *sub_21949DF7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2 + 2;
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  if (a2 + 2 == v5)
  {
    uint64_t v6 = a2;
  }
  else
  {
    do
    {
      uint64_t v7 = *v4;
      uint64_t v8 = v4[1];
      v4[1] = 0;
      uint64_t v9 = (CVPixelBufferRef *)*(v4 - 1);
      *(v4 - 2) = v7;
      *(v4 - 1) = v8;
      if (v9)
      {
        CVPixelBufferUnlockBaseAddress(*v9, 0);
        CVPixelBufferRelease(*v9);
        MEMORY[0x21D48B5B0](v9, 0x20C4093837F09);
      }
      v4 += 2;
    }
    while (v4 != v5);
    uint64_t v6 = v4 - 2;
    uint64_t v4 = *(uint64_t **)(a1 + 8);
  }
  while (v4 != v6)
  {
    uint64_t v10 = (CVPixelBufferRef *)*(v4 - 1);
    *(v4 - 1) = 0;
    if (v10)
    {
      CVPixelBufferUnlockBaseAddress(*v10, 0);
      CVPixelBufferRelease(*v10);
      MEMORY[0x21D48B5B0](v10, 0x20C4093837F09);
    }
    v4 -= 2;
  }
  *(void *)(a1 + 8) = v6;
  return a2;
}

void sub_21949E07C(uint64_t a1, char a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  sub_2194BED58(a1 + 1608);
  *(_WORD *)(a1 + 2072) = 0;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(unsigned char *)(a1 + 2112) = 0;
  *(unsigned char *)(a1 + 2113) = a2;
  *(_DWORD *)(a1 + 2120) = 0;
  *(unsigned char *)(a1 + 2151) = 0;
  *(unsigned char *)(a1 + 2128) = 0;
  uint64_t v9 = 0;
  *(_OWORD *)__p = 0u;
  long long v8 = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_DWORD *)(a1 + 2184) = 1065353216;
  sub_2194A36E0(a1 + 2152, (uint64_t)__p, (uint64_t)__p);
  if (SBYTE7(v8) < 0) {
    operator delete(__p[0]);
  }
  *(_WORD *)(a1 + 2215) = 1;
  *(_WORD *)(a1 + 2192) = 0;
  uint64_t v4 = (int *)(a1 + 24);
  if (sub_2194C0128((int *)(a1 + 24)))
  {
    int v5 = *v4;
    if ((*v4 - 7) < 2) {
      operator new();
    }
    if (v5 == 9) {
      operator new();
    }
    if (v5 == 6) {
      operator new();
    }
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x21D48B2A0](exception, "Non-LACC Platform");
  }
  else
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x21D48B2A0](exception, "Non-accelerated Platform");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_21949E868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v15);
  if (*(char *)(v11 + 2215) < 0) {
    operator delete(*(void **)(v11 + 2192));
  }
  sub_21949EA0C(v14);
  if (*(char *)(v11 + 2151) < 0) {
    operator delete(*(void **)(v11 + 2128));
  }
  sub_21947E0B8(v11 + 2056);
  sub_219499408((CVPixelBufferRef **)(v11 + 2008));
  sub_219499408((CVPixelBufferRef **)(v11 + 2000));
  sub_219499408(v13);
  sub_219499408(v12);
  sub_21949EA78((uint64_t *)(v11 + 208));
  sub_219499DC4(v11 + 144);
  unint64_t v18 = *(void **)(v11 + 96);
  if (v18)
  {
    *(void *)(v11 + 104) = v18;
    operator delete(v18);
    uint64_t v19 = *v16;
    if (!*v16)
    {
LABEL_7:
      uint64_t v20 = *(void *)(v11 + 32);
      *(void *)(v11 + 32) = 0;
      if (!v20) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v19 = *v16;
    if (!*v16) {
      goto LABEL_7;
    }
  }
  *(void *)(v11 + 80) = v19;
  operator delete(v19);
  uint64_t v20 = *(void *)(v11 + 32);
  *(void *)(v11 + 32) = 0;
  if (!v20) {
LABEL_8:
  }
    _Unwind_Resume(a1);
LABEL_11:
  (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_21949EA0C(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      int v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t *sub_21949EA78(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = sub_21949AE18(v2);
    MEMORY[0x21D48B5A0](v3, 64);
  }
  return a1;
}

uint64_t sub_21949EAB8(uint64_t a1)
{
  if (*(char *)(a1 + 2215) < 0) {
    operator delete(*(void **)(a1 + 2192));
  }
  uint64_t v2 = *(void ***)(a1 + 2168);
  if (v2)
  {
    do
    {
      uint64_t v16 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v16;
    }
    while (v16);
  }
  uint64_t v3 = *(void **)(a1 + 2152);
  *(void *)(a1 + 2152) = 0;
  if (v3) {
    operator delete(v3);
  }
  if (*(char *)(a1 + 2151) < 0) {
    operator delete(*(void **)(a1 + 2128));
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 2064);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    int v5 = *(CVPixelBufferRef **)(a1 + 2008);
    *(void *)(a1 + 2008) = 0;
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  int v5 = *(CVPixelBufferRef **)(a1 + 2008);
  *(void *)(a1 + 2008) = 0;
  if (v5)
  {
LABEL_11:
    CVPixelBufferUnlockBaseAddress(*v5, 0);
    CVPixelBufferRelease(*v5);
    MEMORY[0x21D48B5B0](v5, 0x20C4093837F09);
  }
LABEL_12:
  uint64_t v6 = *(CVPixelBufferRef **)(a1 + 2000);
  *(void *)(a1 + 2000) = 0;
  if (v6)
  {
    CVPixelBufferUnlockBaseAddress(*v6, 0);
    CVPixelBufferRelease(*v6);
    MEMORY[0x21D48B5B0](v6, 0x20C4093837F09);
  }
  uint64_t v7 = *(CVPixelBufferRef **)(a1 + 1992);
  *(void *)(a1 + 1992) = 0;
  if (v7)
  {
    CVPixelBufferUnlockBaseAddress(*v7, 0);
    CVPixelBufferRelease(*v7);
    MEMORY[0x21D48B5B0](v7, 0x20C4093837F09);
  }
  long long v8 = *(CVPixelBufferRef **)(a1 + 1984);
  *(void *)(a1 + 1984) = 0;
  if (v8)
  {
    CVPixelBufferUnlockBaseAddress(*v8, 0);
    CVPixelBufferRelease(*v8);
    MEMORY[0x21D48B5B0](v8, 0x20C4093837F09);
  }
  uint64_t v9 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v9)
  {
    uint64_t v10 = sub_21949AE18(v9);
    MEMORY[0x21D48B5A0](v10, 64);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 200);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unint64_t v12 = *(void **)(a1 + 96);
  if (v12)
  {
    *(void *)(a1 + 104) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(a1 + 72);
  if (v13)
  {
    *(void *)(a1 + 80) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  return a1;
}

uint64_t sub_21949ED40(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 != 1) {
    return 4;
  }
  uint64_t v3 = a1 + 2120;
  *(_DWORD *)(a1 + 2120) = 1;
  uint64_t v4 = (std::string *)(a1 + 2128);
  std::string::operator=((std::string *)(a1 + 2128), (const std::string *)(a2 + 8));
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 152))(*(void *)(a1 + 32), v3, a1 + 40);
  if (!*(_DWORD *)(a1 + 52)) {
    return 4;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)a1 = v5;
  int v6 = *(_DWORD *)(a1 + 64) + v5;
  int v7 = *(_DWORD *)(a1 + 68) + v6;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v7;
  LODWORD(v5) = *(_DWORD *)(a1 + 56) + v5;
  int v8 = *(_DWORD *)(a1 + 60) + v5;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v8;
  if (!*(unsigned char *)(a1 + 2113) && !*(void *)(a1 + 2000)) {
    operator new();
  }
  int v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 72))(*(void *)(a1 + 32));
  *(unsigned char *)(a1 + 1936) = 1;
  *(_DWORD *)(a1 + 1956) = 128;
  *(_DWORD *)(a1 + 1960) = (v9 + 127) >> 7;
  *(void *)(a1 + 1964) = 0x8000000000080;
  if (!*(void *)(a1 + 2008)) {
    operator new();
  }
  int v12 = *(unsigned __int8 *)(a1 + 2113);
  *(unsigned char *)(a1 + 144) = v12;
  *(void *)(a1 + 2048) = *(void *)(a1 + 2040) + 0x80000;
  if (v12)
  {
    *(void *)(a1 + 160) = **(void **)(a1 + 1984);
    *(void *)(a1 + 152) = **(void **)(a1 + 1992);
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = **(void **)(a1 + 2008);
    if (*(void *)(a1 + 208)) {
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  sub_219500198(1, (uint64_t *)&__dst);
  long long v13 = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
  *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 2064);
  *(_OWORD *)(a1 + 2056) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  size = (std::__shared_weak_count *)__dst.__pn_.__r_.__value_.__l.__size_;
  if (__dst.__pn_.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__pn_.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
  uint64_t v16 = *(void *)(a1 + 2056);
  if (!v16) {
    sub_219506ED8();
  }
  uint64_t v17 = *(void *)(a1 + 2064);
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v18 = *(std::__shared_weak_count **)(a1 + 200);
  *(void *)(a1 + 192) = v16;
  *(void *)(a1 + 200) = v17;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  *(void *)(a1 + 1976) = 0;
  if (!*(void *)(a1 + 208))
  {
LABEL_27:
    uint64_t v19 = operator new(0x140uLL, (std::align_val_t)0x40uLL);
    sub_21949C18C(v19, a1 + 144);
    uint64_t v20 = *(void *)(a1 + 208);
    *(void *)(a1 + 208) = v19;
    if (v20)
    {
      uint64_t v21 = sub_21949AE18(v20);
      MEMORY[0x21D48B5A0](v21, 64);
    }
  }
LABEL_29:
  memset(&v37, 0, sizeof(v37));
  uint64_t v22 = *(unsigned __int8 *)(a1 + 2151);
  if ((v22 & 0x80u) == 0) {
    uint64_t v23 = v4;
  }
  else {
    uint64_t v23 = *(std::string **)(a1 + 2128);
  }
  if ((v22 & 0x80u) != 0) {
    uint64_t v22 = *(void *)(a1 + 2136);
  }
  sub_2194A3B54(&v37.__pn_, v23, (std::string *)((char *)v23 + v22));
  std::__fs::filesystem::path::__string_view v24 = std::__fs::filesystem::path::__filename(&v37);
  if (v24.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    sub_21947DF80();
  }
  if (v24.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v26 = (v24.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v26 = v24.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v27 = v26 + 1;
    p_dst = (std::__fs::filesystem::path *)operator new(v26 + 1);
    __dst.__pn_.__r_.__value_.__l.__size_ = v24.__size_;
    __dst.__pn_.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_41;
  }
  *((unsigned char *)&__dst.__pn_.__r_.__value_.__s + 23) = v24.__size_;
  p_dst = &__dst;
  if (v24.__size_) {
LABEL_41:
  }
    memmove(p_dst, v24.__data_, v24.__size_);
  p_dst->__pn_.__r_.__value_.__s.__data_[v24.__size_] = 0;
  uint64_t v28 = (void *)__dst.__pn_.__r_.__value_.__r.__words[0];
  int v34 = __dst.__pn_.__r_.__value_.__r.__words[2];
  HIBYTE(v34) = __dst.__pn_.__r_.__value_.__s.__data_[19];
  int v29 = SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2194A3460(&v35, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v35 = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
    LODWORD(v36) = v34;
    *(_DWORD *)((char *)&v36 + 3) = *(_DWORD *)((char *)&__dst.__pn_.__r_.__value_.__r.__words[2] + 3);
    HIBYTE(v36) = *((unsigned char *)&__dst.__pn_.__r_.__value_.__s + 23);
  }
  long long v30 = (void **)(a1 + 2192);
  if (*(char *)(a1 + 2215) < 0) {
    operator delete(*v30);
  }
  *(_OWORD *)long long v30 = v35;
  *(void *)(a1 + 2208) = v36;
  HIBYTE(v36) = 0;
  LOBYTE(v35) = 0;
  if (v29 < 0)
  {
    operator delete(v28);
    uint64_t v31 = *(void *)(a1 + 208);
    if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_49;
    }
  }
  else
  {
    uint64_t v31 = *(void *)(a1 + 208);
    if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_49:
      std::__fs::filesystem::path __dst = v37;
      goto LABEL_52;
    }
  }
  sub_2194A3460(&__dst, v37.__pn_.__r_.__value_.__l.__data_, v37.__pn_.__r_.__value_.__l.__size_);
LABEL_52:
  BOOL v32 = sub_21949C88C(v31, (uint64_t *)&__dst);
  BOOL v33 = v32;
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    if (v33)
    {
LABEL_54:
      uint64_t v10 = 0;
      *(unsigned char *)(a1 + 2216) = 0;
      if (SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_58;
      }
      return v10;
    }
  }
  else if (v32)
  {
    goto LABEL_54;
  }
  uint64_t v10 = 6;
  if (SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) < 0) {
LABEL_58:
  }
    operator delete(v37.__pn_.__r_.__value_.__l.__data_);
  return v10;
}

void sub_21949F3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21949F438(uint64_t a1, void *__src, size_t __len, unsigned int a4, unsigned int a5)
{
  if (!__src) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  if (v7 > a4) {
    return 0;
  }
  if (v7 > a5 || *(_DWORD *)(a1 + 12) <= a4) {
    return 0;
  }
  if (__len)
  {
    long long v13 = *(char **)(a1 + 72);
    size_t v15 = *(char **)(a1 + 80);
    uint64_t v14 = (void **)(a1 + 72);
    BOOL v16 = a4 != a5;
    uint64_t v17 = v13;
    if (a4 == a5)
    {
      if (v13 != v15)
      {
        uint64_t v17 = *(char **)(a1 + 72);
        while (*(_DWORD *)v17 != a4)
        {
          v17 += 16;
          if (v17 == v15) {
            goto LABEL_22;
          }
        }
      }
      if (v17 != v15) {
        BOOL v16 = 1;
      }
      unint64_t v18 = *(void *)(a1 + 88);
      if ((unint64_t)v15 < v18) {
        goto LABEL_23;
      }
    }
    else
    {
      if (v13 != v15)
      {
        uint64_t v17 = *(char **)(a1 + 72);
        while (*(_DWORD *)v17 != a4)
        {
          v17 += 16;
          if (v17 == v15) {
            goto LABEL_22;
          }
        }
      }
      if (v17 != v15) {
        v17[12] = 1;
      }
LABEL_22:
      unint64_t v18 = *(void *)(a1 + 88);
      if ((unint64_t)v15 < v18)
      {
LABEL_23:
        *(_DWORD *)size_t v15 = a4;
        *((_DWORD *)v15 + 1) = a5;
        *((_DWORD *)v15 + 2) = __len;
        uint64_t v19 = v15 + 16;
        v15[12] = v16;
LABEL_42:
        *(void *)(a1 + 80) = v19;
        memmove((void *)(*(void *)(a1 + 2032) + a5 - *(_DWORD *)(a1 + 8)), __src, __len);
        return 1;
      }
    }
    uint64_t v20 = (v15 - v13) >> 4;
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 60) {
      sub_219486AE4();
    }
    uint64_t v22 = v18 - (void)v13;
    if (v22 >> 3 > v21) {
      unint64_t v21 = v22 >> 3;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      BOOL v26 = v16;
      if (v23 >> 60) {
        sub_219486AFC();
      }
      std::__fs::filesystem::path::__string_view v24 = (char *)operator new(16 * v23);
      BOOL v16 = v26;
    }
    else
    {
      std::__fs::filesystem::path::__string_view v24 = 0;
    }
    uint64_t v25 = &v24[16 * v20];
    *(_DWORD *)uint64_t v25 = a4;
    *((_DWORD *)v25 + 1) = a5;
    *((_DWORD *)v25 + 2) = __len;
    v25[12] = v16;
    uint64_t v19 = v25 + 16;
    if (v13 != v15)
    {
      do
      {
        *((_OWORD *)v25 - 1) = *((_OWORD *)v15 - 1);
        v25 -= 16;
        v15 -= 16;
      }
      while (v15 != v13);
      long long v13 = (char *)*v14;
    }
    *(void *)(a1 + 72) = v25;
    *(void *)(a1 + 80) = v19;
    *(void *)(a1 + 88) = &v24[16 * v23];
    if (v13) {
      operator delete(v13);
    }
    goto LABEL_42;
  }
  return 1;
}

uint64_t sub_21949F644(uint64_t a1, void *__src, size_t __len, unsigned int a4, int a5)
{
  if (!__src || *(_DWORD *)(a1 + 16) > a4 || *(_DWORD *)(a1 + 20) <= a4) {
    return 0;
  }
  if (__len)
  {
    BOOL v10 = a4 != a5;
    int v12 = *(char **)(a1 + 104);
    unint64_t v11 = *(void *)(a1 + 112);
    if ((unint64_t)v12 >= v11)
    {
      size_t v15 = (char **)(a1 + 96);
      BOOL v16 = *(char **)(a1 + 96);
      uint64_t v17 = (v12 - v16) >> 4;
      unint64_t v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 60) {
        sub_219486AE4();
      }
      uint64_t v19 = v11 - (void)v16;
      if (v19 >> 3 > v18) {
        unint64_t v18 = v19 >> 3;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20)
      {
        uint64_t v25 = (char **)(a1 + 96);
        if (v20 >> 60) {
          sub_219486AFC();
        }
        unint64_t v21 = (char *)operator new(16 * v20);
        size_t v15 = v25;
      }
      else
      {
        unint64_t v21 = 0;
      }
      uint64_t v22 = &v21[16 * v17];
      *(_DWORD *)uint64_t v22 = a4;
      *((_DWORD *)v22 + 1) = a5;
      *((_DWORD *)v22 + 2) = __len;
      v22[12] = v10;
      long long v13 = v22 + 16;
      if (v12 != v16)
      {
        do
        {
          *((_OWORD *)v22 - 1) = *((_OWORD *)v12 - 1);
          v22 -= 16;
          v12 -= 16;
        }
        while (v12 != v16);
        int v12 = *v15;
      }
      *(void *)(a1 + 96) = v22;
      *(void *)(a1 + 104) = v13;
      *(void *)(a1 + 112) = &v21[16 * v20];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_DWORD *)int v12 = a4;
      *((_DWORD *)v12 + 1) = a5;
      *((_DWORD *)v12 + 2) = __len;
      long long v13 = v12 + 16;
      v12[12] = v10;
    }
    *(void *)(a1 + 104) = v13;
    unsigned int v23 = *(_DWORD *)(a1 + 128);
    unsigned int v24 = *(_DWORD *)(a1 + 132);
    if (v23 >= a4) {
      unsigned int v23 = a4;
    }
    if (v24 <= __len + a4) {
      unsigned int v24 = __len + a4;
    }
    *(_DWORD *)(a1 + 128) = v23;
    *(_DWORD *)(a1 + 132) = v24;
    memmove((void *)(*(void *)(a1 + 2040) + a4 - *(_DWORD *)(a1 + 16)), __src, __len);
  }
  return 1;
}

void sub_21949F7EC(uint64_t a1)
{
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 308) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  bzero((void *)(a1 + 360), 0x400uLL);
  *(void *)(a1 + 80) = *(void *)(a1 + 72);
  *(void *)(a1 + 104) = *(void *)(a1 + 96);
  unsigned int v2 = *(_DWORD *)(a1 + 20);
  *(void *)(a1 + 120) = *(unsigned int *)(a1 + 12);
  *(void *)(a1 + 128) = v2;
}

void sub_21949F864(uint64_t a1)
{
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 308) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  bzero((void *)(a1 + 360), 0x400uLL);
}

uint64_t sub_21949F898(uint64_t a1, const void *a2, size_t *a3, int a4)
{
  kdebug_trace();
  if (!a2) {
    return 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C33990, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C33990))
  {
    operator new();
  }
  uint64_t v8 = *(void *)qword_267C33988;
  uint64_t v9 = *(void *)(qword_267C33988 + 8);
  if (*(void *)qword_267C33988 != v9)
  {
    while (*(const void **)v8 != a2)
    {
      v8 += 16;
      if (v8 == v9) {
        goto LABEL_9;
      }
    }
  }
  if (v8 == v9) {
LABEL_9:
  }
    uint64_t v10 = 0;
  else {
    uint64_t v10 = **(void **)(v8 + 8);
  }
  if (a4) {
    uint64_t v11 = 2072;
  }
  else {
    uint64_t v11 = 2073;
  }
  *(unsigned char *)(a1 + v11) = v10 == 0;
  uint64_t v12 = 2088;
  if (a4)
  {
    uint64_t v12 = 2080;
    long long v13 = (const void **)(a1 + 2080);
  }
  else
  {
    long long v13 = (const void **)(a1 + 2088);
  }
  if (a4) {
    uint64_t v14 = (const void **)(a1 + 2088);
  }
  else {
    uint64_t v14 = (const void **)(a1 + 2080);
  }
  size_t v15 = (size_t *)(a1 + 2096);
  uint64_t v16 = 2104;
  if (a4) {
    uint64_t v16 = 2096;
  }
  uint64_t v27 = v16;
  if (a4) {
    uint64_t v17 = (size_t *)(a1 + 2096);
  }
  else {
    uint64_t v17 = (size_t *)(a1 + 2104);
  }
  if (a4) {
    size_t v15 = (size_t *)(a1 + 2104);
  }
  if (v10)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C33990, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C33990))
    {
      operator new();
    }
    uint64_t v18 = *(void *)qword_267C33988;
    uint64_t v19 = *(void *)(qword_267C33988 + 8);
    if (*(void *)qword_267C33988 != v19)
    {
      while (*(const void **)v18 != a2)
      {
        v18 += 16;
        if (v18 == v19)
        {
          unint64_t v20 = 0;
          int v21 = 0;
          goto LABEL_53;
        }
      }
    }
    int v21 = 0;
    if (v18 == v19) {
      goto LABEL_52;
    }
LABEL_50:
    unint64_t v20 = **(__CVBuffer ***)(v18 + 8);
    if ((v21 & 1) == 0) {
      goto LABEL_53;
    }
    goto LABEL_54;
  }
  if (*v13 == a2 && *v17 >= *a3)
  {
    int v21 = 0;
  }
  else if (*v14 == a2 && (size_t v22 = *v15, *v15 >= *a3))
  {
    if (*v13 == a2) {
      sub_219506FB8();
    }
    int v21 = 0;
    *(void *)(a1 + v12) = a2;
    *(void *)(a1 + v27) = v22;
    uint64_t v23 = 2072;
    if (a4) {
      uint64_t v23 = 2073;
    }
    *(unsigned char *)(a1 + v11) = *(unsigned char *)(a1 + v23);
    *(unsigned char *)(a1 + 2112) = 0;
  }
  else
  {
    int v21 = 1;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C33980, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C33980))
  {
    operator new();
  }
  uint64_t v18 = *(void *)qword_267C33978;
  uint64_t v24 = *(void *)(qword_267C33978 + 8);
  if (*(void *)qword_267C33978 != v24)
  {
    while (*(const void **)v18 != a2)
    {
      v18 += 16;
      if (v18 == v24) {
        goto LABEL_52;
      }
    }
  }
  if (v18 != v24) {
    goto LABEL_50;
  }
LABEL_52:
  unint64_t v20 = 0;
  if ((v21 & 1) == 0)
  {
LABEL_53:
    if (!v20) {
      sub_219506F80();
    }
  }
LABEL_54:
  if (v21)
  {
    *(unsigned char *)(a1 + 2112) = 0;
    if (v20)
    {
      if (*(void *)(a1 + 2080) == *(void *)(a1 + 2088))
      {
        *long long v13 = 0;
        if (*(unsigned char *)(a1 + v11)) {
LABEL_61:
        }
          sub_21949D94C();
LABEL_68:
        sub_219506F10();
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_INFO, "Releasing and re-allocating a DMA buffer :(", buf, 2u);
      }
      CVPixelBufferRelease(v20);
    }
    if (*(unsigned char *)(a1 + v11)) {
      goto LABEL_61;
    }
    goto LABEL_68;
  }
  *long long v13 = a2;
  *(void *)(a1 + v27) = *a3;
  if (*(unsigned char *)(a1 + v11))
  {
    BaseAddress = CVPixelBufferGetBaseAddress(v20);
    if (BaseAddress == a2) {
      sub_219506F48();
    }
    memcpy(BaseAddress, a2, *a3);
  }
  kdebug_trace();
  return 1;
}

void sub_21949FDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  __cxa_guard_abort(&qword_267C33980);
  sub_21949DD8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21949FDC0(_Unwind_Exception *a1)
{
}

void sub_21949FDD8(_Unwind_Exception *a1)
{
}

void sub_21949FDF0(_Unwind_Exception *a1)
{
}

void sub_21949FE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21949DD8C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21949FE28(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 <= a3) {
    sub_219507060();
  }
  *(void *)(result + 1776) = **(void **)(result + 2008);
  *(_DWORD *)(result + 1712) = 64;
  *(_DWORD *)(result + 1704) = 64;
  unsigned int v3 = (a2 - a3) & 0xFFFFFFC0;
  *(_DWORD *)(result + 136) = v3;
  *(_DWORD *)(result + 140) = a2;
  if ((a2 & 0x3F) != 0) {
    sub_219507028();
  }
  uint64_t v4 = a2 - v3;
  if ((((_BYTE)a2 - (_BYTE)v3) & 0x3F) != 0) {
    sub_219506FF0();
  }
  *(_DWORD *)(result + 1700) = v4;
  *(_DWORD *)(result + 1708) = (unint64_t)(v4 + 63) >> 6;
  *(_DWORD *)(result + 1716) = v3;
  *(unsigned char *)(result + 1684) = a2 != v3;
  return result;
}

uint64_t sub_21949FEA4(uint64_t a1, const void *a2, unsigned int a3, size_t __len)
{
  if (!a2) {
    sub_219507098();
  }
  uint64_t v4 = *(unsigned int *)(a1 + 136);
  if (a3 < v4) {
    return 0;
  }
  if (__len + a3 > *(unsigned int *)(a1 + 140)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 2040);
  if (!v6) {
    sub_2195070D0();
  }
  if (__len) {
    memmove((void *)(v6 + v4 + a3 - v4), a2, __len);
  }
  return 1;
}

BOOL sub_21949FF1C(uint64_t a1, unsigned int a2, void *__dst, size_t __len)
{
  if (!__dst) {
    sub_219507108();
  }
  if (*(_DWORD *)(a1 + 136) <= a2 && __len + a2 <= *(_DWORD *)(a1 + 140))
  {
    if (__len) {
      memmove(__dst, (const void *)(*(void *)(a1 + 2040) + a2), __len);
    }
    return 1;
  }
  else
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_219507140(result, v5, v6, v7, v8, v9, v10, v11);
      return 0;
    }
  }
  return result;
}

__n128 sub_21949FF9C(uint64_t a1, const void *a2, uint64_t a3)
{
  if (!a2) {
    sub_21950717C();
  }
  uint64_t v4 = a1 + 216;
  memmove((void *)(a1 + 228), a2, 0x80uLL);
  long long v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v4 + 144) = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 160) = v5;
  long long v6 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 176) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 192) = v6;
  long long v7 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v4 + 208) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v4 + 224) = v7;
  long long v8 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v4 + 240) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v4 + 256) = v8;
  long long v9 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(v4 + 272) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v4 + 288) = v9;
  long long v10 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)(v4 + 304) = *(_OWORD *)(a3 + 160);
  *(_OWORD *)(v4 + 320) = v10;
  long long v11 = *(_OWORD *)(a3 + 208);
  *(_OWORD *)(v4 + 336) = *(_OWORD *)(a3 + 192);
  *(_OWORD *)(v4 + 352) = v11;
  long long v12 = *(_OWORD *)(a3 + 240);
  *(_OWORD *)(v4 + 368) = *(_OWORD *)(a3 + 224);
  *(_OWORD *)(v4 + 384) = v12;
  long long v13 = *(_OWORD *)(a3 + 272);
  *(_OWORD *)(v4 + 400) = *(_OWORD *)(a3 + 256);
  *(_OWORD *)(v4 + 416) = v13;
  long long v14 = *(_OWORD *)(a3 + 304);
  *(_OWORD *)(v4 + 432) = *(_OWORD *)(a3 + 288);
  *(_OWORD *)(v4 + 448) = v14;
  long long v15 = *(_OWORD *)(a3 + 336);
  *(_OWORD *)(v4 + 464) = *(_OWORD *)(a3 + 320);
  *(_OWORD *)(v4 + 480) = v15;
  long long v16 = *(_OWORD *)(a3 + 368);
  *(_OWORD *)(v4 + 496) = *(_OWORD *)(a3 + 352);
  *(_OWORD *)(v4 + 512) = v16;
  long long v17 = *(_OWORD *)(a3 + 400);
  *(_OWORD *)(v4 + 528) = *(_OWORD *)(a3 + 384);
  *(_OWORD *)(v4 + 544) = v17;
  long long v18 = *(_OWORD *)(a3 + 432);
  *(_OWORD *)(v4 + 560) = *(_OWORD *)(a3 + 416);
  *(_OWORD *)(v4 + 576) = v18;
  long long v19 = *(_OWORD *)(a3 + 464);
  *(_OWORD *)(v4 + 592) = *(_OWORD *)(a3 + 448);
  *(_OWORD *)(v4 + 608) = v19;
  long long v20 = *(_OWORD *)(a3 + 496);
  *(_OWORD *)(v4 + 624) = *(_OWORD *)(a3 + 480);
  *(_OWORD *)(v4 + 640) = v20;
  long long v21 = *(_OWORD *)(a3 + 528);
  *(_OWORD *)(v4 + 656) = *(_OWORD *)(a3 + 512);
  *(_OWORD *)(v4 + 672) = v21;
  long long v22 = *(_OWORD *)(a3 + 560);
  *(_OWORD *)(v4 + 688) = *(_OWORD *)(a3 + 544);
  *(_OWORD *)(v4 + 704) = v22;
  long long v23 = *(_OWORD *)(a3 + 592);
  *(_OWORD *)(v4 + 720) = *(_OWORD *)(a3 + 576);
  *(_OWORD *)(v4 + 736) = v23;
  long long v24 = *(_OWORD *)(a3 + 624);
  *(_OWORD *)(v4 + 752) = *(_OWORD *)(a3 + 608);
  *(_OWORD *)(v4 + 768) = v24;
  long long v25 = *(_OWORD *)(a3 + 656);
  *(_OWORD *)(v4 + 784) = *(_OWORD *)(a3 + 640);
  *(_OWORD *)(v4 + 800) = v25;
  long long v26 = *(_OWORD *)(a3 + 688);
  *(_OWORD *)(v4 + 816) = *(_OWORD *)(a3 + 672);
  *(_OWORD *)(v4 + 832) = v26;
  long long v27 = *(_OWORD *)(a3 + 720);
  *(_OWORD *)(v4 + 848) = *(_OWORD *)(a3 + 704);
  *(_OWORD *)(v4 + 864) = v27;
  long long v28 = *(_OWORD *)(a3 + 752);
  *(_OWORD *)(v4 + 880) = *(_OWORD *)(a3 + 736);
  *(_OWORD *)(v4 + 896) = v28;
  long long v29 = *(_OWORD *)(a3 + 784);
  *(_OWORD *)(v4 + 912) = *(_OWORD *)(a3 + 768);
  *(_OWORD *)(v4 + 928) = v29;
  long long v30 = *(_OWORD *)(a3 + 816);
  *(_OWORD *)(v4 + 944) = *(_OWORD *)(a3 + 800);
  *(_OWORD *)(v4 + 960) = v30;
  long long v31 = *(_OWORD *)(a3 + 848);
  *(_OWORD *)(v4 + 976) = *(_OWORD *)(a3 + 832);
  *(_OWORD *)(v4 + 992) = v31;
  long long v32 = *(_OWORD *)(a3 + 880);
  *(_OWORD *)(v4 + 1008) = *(_OWORD *)(a3 + 864);
  *(_OWORD *)(v4 + 1024) = v32;
  long long v33 = *(_OWORD *)(a3 + 896);
  *(_OWORD *)(v4 + 1056) = *(_OWORD *)(a3 + 912);
  *(_OWORD *)(v4 + 1040) = v33;
  long long v34 = *(_OWORD *)(a3 + 928);
  *(_OWORD *)(v4 + 1088) = *(_OWORD *)(a3 + 944);
  *(_OWORD *)(v4 + 1072) = v34;
  long long v35 = *(_OWORD *)(a3 + 960);
  *(_OWORD *)(v4 + 1120) = *(_OWORD *)(a3 + 976);
  *(_OWORD *)(v4 + 1104) = v35;
  __n128 result = *(__n128 *)(a3 + 992);
  *(_OWORD *)(v4 + 1152) = *(_OWORD *)(a3 + 1008);
  *(__n128 *)(v4 + 1136) = result;
  return result;
}

uint64_t sub_2194A00E4(uint64_t result, unint64_t a2, int a3)
{
  if (a2 >= 0x20) {
    sub_2195071B4();
  }
  *(_DWORD *)(result + 4 * a2 + 228) = a3;
  return result;
}

void *sub_2194A010C(uint64_t a1, unint64_t a2, void *__src, unint64_t a4)
{
  if (!__src) {
    sub_2195071EC();
  }
  if (a2 >= 0x20) {
    sub_219507294();
  }
  if (!a4) {
    sub_219507224();
  }
  if (a4 >= 9) {
    sub_21950725C();
  }
  uint64_t v4 = (void *)(a1 + 32 * a2 + 360);

  return memmove(v4, __src, 4 * a4);
}

void *sub_2194A016C(uint64_t a1, unint64_t a2, void *__src, unint64_t a4)
{
  if (!__src) {
    sub_2195072CC();
  }
  if (a2 >= 0x20) {
    sub_219507374();
  }
  if (!a4) {
    sub_219507304();
  }
  if (a4 >= 5) {
    sub_21950733C();
  }
  uint64_t v4 = (void *)(a1 + 32 * a2 + 360);

  return memmove(v4, __src, 8 * a4);
}

uint64_t sub_2194A01CC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 2216)) {
    return (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 32) + 224))(*(void *)(a1 + 32), *(void *)(a1 + 2048), a2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_2194A0210(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*(unsigned char *)(result + 2216)) {
    return (*(uint64_t (**)(void, void, uint64_t, _DWORD *, uint64_t))(**(void **)(result + 32) + 232))(*(void *)(result + 32), *(void *)(result + 2048), a2, a3, a4);
  }
  *a3 = 2139095039;
  return result;
}

uint64_t sub_2194A0260(uint64_t result, uint64_t a2, void *a3, uint64_t a4)
{
  if (*(unsigned char *)(result + 2216)) {
    return (*(uint64_t (**)(void, void, uint64_t, void *, uint64_t))(**(void **)(result + 32) + 240))(*(void *)(result + 32), *(void *)(result + 2048), a2, a3, a4);
  }
  *a3 = 0x7FEFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_2194A02B0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 2216)) {
    return (*(uint64_t (**)(void, void, uint64_t, _DWORD *, uint64_t))(**(void **)(a1 + 32) + 248))(*(void *)(a1 + 32), *(void *)(a1 + 2048), a2, a3, a4);
  }
  *a3 = -1;
  return 0;
}

void sub_2194A0304(uint64_t a1, std::string::size_type a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v12.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "---- AppleCVHWA analytics output starts here ----", (uint8_t *)&v12, 2u);
  }
  int v4 = *(unsigned __int8 *)(a1 + 2112);
  BOOL v5 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_FAULT);
  if (v4)
  {
    if (!v5) {
      goto LABEL_15;
    }
    if (*(char *)(a2 + 23) >= 0) {
      std::string::size_type v9 = a2;
    }
    else {
      std::string::size_type v9 = *(void *)a2;
    }
    LODWORD(v12.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = v9;
    long long v7 = &_os_log_internal;
    long long v8 = "Cached accelerator offload failed due to %{public}s, aborting.";
  }
  else
  {
    if (!v5) {
      goto LABEL_15;
    }
    if (*(char *)(a2 + 23) >= 0) {
      std::string::size_type v6 = a2;
    }
    else {
      std::string::size_type v6 = *(void *)a2;
    }
    LODWORD(v12.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = v6;
    long long v7 = &_os_log_internal;
    long long v8 = "Uncached accelerator offload failed due to %{public}s, aborting.";
  }
  _os_log_fault_impl(&dword_219476000, v7, OS_LOG_TYPE_FAULT, v8, (uint8_t *)&v12, 0xCu);
LABEL_15:
  sub_21949D428(*(const time_t **)(a1 + 208));
  sub_2194BEF04((_DWORD *)(a1 + 216));
  if (*(unsigned char *)(a1 + 2216))
  {
    (*(void (**)(void, void))(**(void **)(a1 + 32) + 256))(*(void *)(a1 + 32), *(void *)(a1 + 2048));
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v12.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Metadata register values are stale, not reporting.", (uint8_t *)&v12, 2u);
  }
  long long v10 = sub_2194F5358(*(_DWORD *)(*(void *)(a1 + 208) + 100));
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&v12.__r_.__value_.__r.__words[1] = xmmword_21950C470;
  strcpy(v12.__r_.__value_.__l.__data_, "Original error reported by request utility function: ");
  std::string::append(&v12, v10);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v11 = &v12;
  }
  else {
    long long v11 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 666, (const char *)v11, (void (*)(void *))sub_2194FF9C0);
  abort();
}

void sub_2194A053C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2194A0564(uint64_t a1, int a2, int a3)
{
  uint64_t v145 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    *(void *)std::string buf = operator new(0x28uLL);
    *(_OWORD *)&uint8_t buf[8] = xmmword_21950C4C0;
    strcpy(*(char **)buf, "call with invalid return address");
    sub_2194A0304(a1, (std::string::size_type)buf);
  }
  kdebug_trace();
  uint64_t v6 = *(void *)a1;
  if ((unint64_t)(*(void *)a1 + 1) <= 1) {
    sub_2195075F8();
  }
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (!v7 || *(_DWORD *)(a1 + 20) <= v7) {
    sub_2195073AC();
  }
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if (!v8 || (unsigned int v9 = *(_DWORD *)(a1 + 12), v9 <= v8)) {
    sub_2195073E4();
  }
  *(unsigned char *)(a1 + 2216) = 0;
  int v10 = *(unsigned __int8 *)(a1 + 2113);
  if (!*(unsigned char *)(a1 + 2113))
  {
    uint64_t v21 = *(void *)(a1 + 72);
    uint64_t v20 = *(void *)(a1 + 80);
    if (v21 != v20)
    {
      uint64_t v22 = v21 + 8;
      char v23 = 1;
      do
      {
        uint64_t v24 = v22 - 8;
        unsigned int v25 = *(_DWORD *)(v22 - 8);
        if (!*(unsigned char *)(v22 + 4))
        {
          unsigned int v26 = *(_DWORD *)v22 + v25;
          if ((v23 & 1) == 0)
          {
            if (v25 >= *(_DWORD *)(a1 + 120)) {
              unsigned int v25 = *(_DWORD *)(a1 + 120);
            }
            if (*(_DWORD *)(a1 + 124) > v26) {
              unsigned int v26 = *(_DWORD *)(a1 + 124);
            }
          }
          char v23 = 0;
          *(_DWORD *)(a1 + 120) = v25;
          *(_DWORD *)(a1 + 124) = v26;
        }
        v22 += 16;
      }
      while (v24 + 16 != v20);
    }
    uint64_t v28 = *(void *)(a1 + 96);
    uint64_t v27 = *(void *)(a1 + 104);
    if (v28 != v27)
    {
      uint64_t v29 = v28 + 8;
      char v30 = 1;
      do
      {
        uint64_t v31 = v29 - 8;
        unsigned int v32 = *(_DWORD *)(v29 - 8);
        if (!*(unsigned char *)(v29 + 4))
        {
          unsigned int v33 = *(_DWORD *)v29 + v32;
          if ((v30 & 1) == 0)
          {
            if (v32 >= *(_DWORD *)(a1 + 128)) {
              unsigned int v32 = *(_DWORD *)(a1 + 128);
            }
            if (*(_DWORD *)(a1 + 132) > v33) {
              unsigned int v33 = *(_DWORD *)(a1 + 132);
            }
          }
          char v30 = 0;
          *(_DWORD *)(a1 + 128) = v32;
          *(_DWORD *)(a1 + 132) = v33;
        }
        v29 += 16;
      }
      while (v31 + 16 != v27);
    }
    unsigned int v35 = *(_DWORD *)(a1 + 120);
    unsigned int v34 = *(_DWORD *)(a1 + 124);
    if (v35 >= v34)
    {
      *(unsigned char *)(a1 + 1612) = 0;
      unsigned int v40 = *(_DWORD *)(a1 + 128);
      unsigned int v39 = *(_DWORD *)(a1 + 132);
      if (v40 >= v39)
      {
LABEL_37:
        *(unsigned char *)(a1 + 1648) = 0;
        if (*(_DWORD *)(a1 + 136)) {
          goto LABEL_41;
        }
        goto LABEL_9;
      }
    }
    else
    {
      *(void *)(a1 + 1760) = **(void **)(a1 + 2000);
      *(_DWORD *)(a1 + 1640) = 64;
      *(_DWORD *)(a1 + 1632) = 64;
      unsigned int v36 = v35 & 0xFFFFFFC0;
      unsigned int v37 = (v34 + 63) & 0xFFFFFFC0;
      *(_DWORD *)(a1 + 120) = v36;
      *(_DWORD *)(a1 + 124) = v37;
      unsigned int v38 = v37 - v36;
      *(_DWORD *)(a1 + 1628) = v38;
      *(_DWORD *)(a1 + 1636) = v38 >> 6;
      *(_DWORD *)(a1 + 1644) = v36 - v8;
      *(unsigned char *)(a1 + 1612) = 1;
      unsigned int v40 = *(_DWORD *)(a1 + 128);
      unsigned int v39 = *(_DWORD *)(a1 + 132);
      if (v40 >= v39) {
        goto LABEL_37;
      }
    }
    *(unsigned char *)(a1 + 1648) = 1;
    *(void *)(a1 + 1768) = **(void **)(a1 + 2008);
    *(_DWORD *)(a1 + 1676) = 64;
    *(_DWORD *)(a1 + 1668) = 64;
    unsigned int v41 = v40 & 0xFFFFFFC0;
    unsigned int v42 = (v39 + 63) & 0xFFFFFFC0;
    *(_DWORD *)(a1 + 128) = v41;
    *(_DWORD *)(a1 + 132) = v42;
    unsigned int v43 = v42 - v41;
    *(_DWORD *)(a1 + 1664) = v43;
    *(_DWORD *)(a1 + 1672) = v43 >> 6;
    *(_DWORD *)(a1 + 1680) = v41 - v7;
    if (*(_DWORD *)(a1 + 136)) {
      goto LABEL_41;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 136)) {
    goto LABEL_41;
  }
LABEL_9:
  if (!*(_DWORD *)(a1 + 140))
  {
    BOOL v11 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v11) {
      sub_21950741C(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    return 1;
  }
LABEL_41:
  if (v10)
  {
    uint64_t v44 = a1 + 1608;
    if (!*(unsigned char *)(a1 + 1684)) {
      goto LABEL_46;
    }
    goto LABEL_43;
  }
  uint64_t v52 = *(unsigned int *)(a1 + 128);
  uint64_t v53 = v6;
  if (*(unsigned char *)(a1 + 1612))
  {
    unint64_t v54 = v6 + *(unsigned int *)(a1 + 120);
    if (v54 < v6 + v8 || *(_DWORD *)(a1 + 124) > v9) {
      sub_2195075C0();
    }
    sub_2194BEE7C(a1 + 1608, 0, v54, 1);
    uint64_t v53 = *(void *)a1;
  }
  if (!*(unsigned char *)(a1 + 1648))
  {
    uint64_t v6 = v53;
    uint64_t v44 = a1 + 1608;
    if (!*(unsigned char *)(a1 + 1684)) {
      goto LABEL_46;
    }
    goto LABEL_43;
  }
  if (v6 + v52 < v53 + (unint64_t)*(unsigned int *)(a1 + 16) || *(_DWORD *)(a1 + 132) > *(_DWORD *)(a1 + 20)) {
    sub_219507588();
  }
  sub_2194BEE7C(a1 + 1608, 1u, v6 + v52, 1);
  uint64_t v6 = *(void *)a1;
  uint64_t v44 = a1 + 1608;
  if (*(unsigned char *)(a1 + 1684))
  {
LABEL_43:
    uint64_t v45 = *(unsigned int *)(a1 + 136);
    uint64_t v46 = v6 + v45;
    if (v6 + v45 < (unint64_t)*(unsigned int *)(a1 + 16)
      || (unsigned int v47 = *(_DWORD *)(a1 + 140), v47 > *(_DWORD *)(a1 + 20)))
    {
      sub_219507550();
    }
    int v48 = v47 - v45;
    int v49 = *(_DWORD *)(a1 + 1716);
    sub_2194BEE7C(v44, 2u, v46, 1);
    sub_2194BEEC0(v44, 0, v46, 1, v48, 0x40u, v49);
  }
LABEL_46:
  if (*(unsigned char *)(a1 + 2072))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C33980, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C33980))
    {
      operator new();
    }
    uint64_t v50 = *(void *)qword_267C33978;
    uint64_t v51 = *(void *)(qword_267C33978 + 8);
    if (*(void *)qword_267C33978 != v51)
    {
      while (*(void *)v50 != *(void *)(a1 + 2080))
      {
        v50 += 16;
        if (v50 == v51) {
          goto LABEL_73;
        }
      }
    }
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C33990, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C33990))
    {
      operator new();
    }
    uint64_t v50 = *(void *)qword_267C33988;
    uint64_t v51 = *(void *)(qword_267C33988 + 8);
    if (*(void *)qword_267C33988 != v51)
    {
      while (*(void *)v50 != *(void *)(a1 + 2080))
      {
        v50 += 16;
        if (v50 == v51) {
          goto LABEL_73;
        }
      }
    }
  }
  if (v50 == v51)
  {
LABEL_73:
    unint64_t v55 = 0;
    if (!*(unsigned char *)(a1 + 2073)) {
      goto LABEL_68;
    }
LABEL_74:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C33980, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267C33980))
    {
      operator new();
    }
    uint64_t v56 = *(void *)qword_267C33978;
    uint64_t v57 = *(void *)(qword_267C33978 + 8);
    if (*(void *)qword_267C33978 != v57)
    {
      while (*(void *)v56 != *(void *)(a1 + 2088))
      {
        v56 += 16;
        if (v56 == v57) {
          goto LABEL_82;
        }
      }
    }
    goto LABEL_79;
  }
  unint64_t v55 = **(__CVBuffer ***)(v50 + 8);
  if (*(unsigned char *)(a1 + 2073)) {
    goto LABEL_74;
  }
LABEL_68:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267C33990, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267C33990))
  {
    operator new();
  }
  uint64_t v56 = *(void *)qword_267C33988;
  uint64_t v57 = *(void *)(qword_267C33988 + 8);
  if (*(void *)qword_267C33988 != v57)
  {
    while (*(void *)v56 != *(void *)(a1 + 2088))
    {
      v56 += 16;
      if (v56 == v57) {
        goto LABEL_82;
      }
    }
  }
LABEL_79:
  if (v56 == v57)
  {
LABEL_82:
    unint64_t v58 = 0;
    if (!v55) {
      goto LABEL_84;
    }
    goto LABEL_83;
  }
  unint64_t v58 = **(__CVBuffer ***)(v56 + 8);
  if (v55)
  {
LABEL_83:
    CVPixelBufferGetDataSize(v55);
    int Width = CVPixelBufferGetWidth(v55);
    int Height = CVPixelBufferGetHeight(v55);
    *(void *)(a1 + 1784) = v55;
    *(_DWORD *)(a1 + 1752) = 0;
    *(_DWORD *)(a1 + 1740) = Width;
    *(_DWORD *)(a1 + 1744) = Height;
    *(_DWORD *)(a1 + 1748) = Width;
    *(_DWORD *)(a1 + 1736) = Height * Width;
    sub_2194BEE7C(v44, 3u, *(void *)a1, 0);
  }
LABEL_84:
  if (v58)
  {
    CVPixelBufferGetDataSize(v58);
    unsigned int v61 = CVPixelBufferGetWidth(v58);
    int v62 = CVPixelBufferGetHeight(v58);
    *(_DWORD *)(a1 + 1860) = 0;
    *(_DWORD *)(a1 + 1848) = v61;
    *(_DWORD *)(a1 + 1852) = v62;
    *(_DWORD *)(a1 + 1844) = v62 * v61;
    sub_2194BEEC0(v44, 1u, *(void *)a1, 0, *(_DWORD *)(a1 + 2104), v61, 0);
  }
  *(_DWORD *)(a1 + 1508) = a2 & 0xFFFFF;
  *(_DWORD *)(a1 + 1384) = a3 & 0xFFFFF;
  sub_2194A194C(a1);
  __p = 0;
  uint64_t v136 = 0;
  uint64_t v137 = 0;
  uint64_t v132 = 0;
  uint64_t v133 = 0;
  unint64_t v134 = 0;
  if (*(unsigned char *)(a1 + 2113))
  {
    if (v55)
    {
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      goto LABEL_92;
    }
  }
  else
  {
    uint64_t v65 = *(void **)(a1 + 2000);
    uint64_t v66 = (char *)operator new(8uLL);
    *(void *)uint64_t v66 = *v65;
    uint64_t v136 = (uint64_t)(v66 + 8);
    uint64_t v137 = v66 + 8;
    __p = v66;
    uint64_t v67 = *(uint64_t **)(a1 + 2008);
    uint64_t v63 = (char *)operator new(0x10uLL);
    uint64_t v64 = v63 + 16;
    uint64_t v68 = *v67;
    *(void *)uint64_t v63 = *(void *)v66;
    *((void *)v63 + 1) = v68;
    uint64_t v69 = __p;
    __p = v63;
    uint64_t v137 = v63 + 16;
    if (v69) {
      operator delete(v69);
    }
    uint64_t v136 = (uint64_t)(v63 + 16);
    if (v55)
    {
LABEL_92:
      uint64_t v70 = v64 - v63;
      uint64_t v71 = (v64 - v63) >> 3;
      unint64_t v72 = v71 + 1;
      if ((unint64_t)(v71 + 1) >> 61) {
        goto LABEL_219;
      }
      if (v70 >> 2 > v72) {
        unint64_t v72 = v70 >> 2;
      }
      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v73 = v72;
      }
      if (v73)
      {
        if (v73 >> 61) {
          goto LABEL_212;
        }
        uint64_t v74 = (char *)operator new(8 * v73);
        uint64_t v75 = (__CVBuffer **)&v74[8 * v71];
        uint64_t v76 = &v74[8 * v73];
        uint64_t *v75 = v55;
        uint64_t v77 = (uint64_t)(v75 + 1);
        int64_t v78 = v64 - v63;
        if (v64 != v63)
        {
LABEL_101:
          unint64_t v79 = v78 - 8;
          if (v79 >= 0x18)
          {
            uint64_t v102 = (v79 >> 3) + 1;
            uint64_t v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v80 = &v64[-v103];
            uint64_t v75 = (__CVBuffer **)((char *)v75 - v103);
            uint64_t v104 = &v74[8 * v71 - 16];
            uint64_t v105 = v64 - 16;
            uint64_t v106 = v102 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v107 = *(_OWORD *)v105;
              *((_OWORD *)v104 - 1) = *((_OWORD *)v105 - 1);
              *(_OWORD *)uint64_t v104 = v107;
              v104 -= 32;
              v105 -= 32;
              v106 -= 4;
            }
            while (v106);
            if (v102 == (v102 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_132:
              uint64_t v63 = (char *)__p;
              __p = v75;
              uint64_t v136 = v77;
              uint64_t v137 = v76;
              if (!v63) {
                goto LABEL_106;
              }
              goto LABEL_105;
            }
          }
          else
          {
            uint64_t v80 = v64;
          }
          do
          {
            uint64_t v108 = (__CVBuffer *)*((void *)v80 - 1);
            v80 -= 8;
            *--uint64_t v75 = v108;
          }
          while (v80 != v63);
          goto LABEL_132;
        }
      }
      else
      {
        uint64_t v74 = 0;
        uint64_t v75 = (__CVBuffer **)(8 * v71);
        uint64_t v76 = 0;
        *(void *)(8 * v71) = v55;
        uint64_t v77 = 8 * v71 + 8;
        int64_t v78 = v64 - v63;
        if (v64 != v63) {
          goto LABEL_101;
        }
      }
      __p = v75;
      uint64_t v136 = v77;
      uint64_t v137 = v76;
      if (!v63)
      {
LABEL_106:
        uint64_t v136 = v77;
        goto LABEL_107;
      }
LABEL_105:
      operator delete(v63);
      goto LABEL_106;
    }
  }
LABEL_107:
  if (v58 && v55 != v58)
  {
    BOOL v81 = v133;
    if ((unint64_t)v133 < v134)
    {
      *uint64_t v133 = v58;
      uint64_t v82 = (uint64_t)(v81 + 8);
LABEL_139:
      uint64_t v133 = (void *)v82;
      goto LABEL_140;
    }
    uint64_t v83 = v132;
    int64_t v84 = (char *)v133 - (unsigned char *)v132;
    uint64_t v85 = ((char *)v133 - (unsigned char *)v132) >> 3;
    unint64_t v86 = v85 + 1;
    if (!((unint64_t)(v85 + 1) >> 61))
    {
      uint64_t v87 = v134 - (void)v132;
      if ((uint64_t)(v134 - (void)v132) >> 2 > v86) {
        unint64_t v86 = v87 >> 2;
      }
      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v88 = v86;
      }
      if (!v88)
      {
        uint64_t v89 = 0;
        BOOL v90 = (__CVBuffer **)(8 * v85);
        uint64_t v91 = 0;
        *(void *)(8 * v85) = v58;
        uint64_t v82 = 8 * v85 + 8;
        int64_t v92 = v81 - v83;
        if (v81 != v83) {
          goto LABEL_120;
        }
        goto LABEL_137;
      }
      if (!(v88 >> 61))
      {
        uint64_t v89 = operator new(8 * v88);
        BOOL v90 = (__CVBuffer **)&v89[8 * v85];
        uint64_t v91 = &v89[8 * v88];
        char *v90 = v58;
        uint64_t v82 = (uint64_t)(v90 + 1);
        int64_t v92 = v81 - v83;
        if (v81 != v83)
        {
LABEL_120:
          unint64_t v93 = v92 - 8;
          if (v93 < 0x58) {
            goto LABEL_228;
          }
          if ((unint64_t)(v81 - v89 - v84) < 0x20) {
            goto LABEL_228;
          }
          uint64_t v94 = (v93 >> 3) + 1;
          uint64_t v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v96 = &v81[-v95];
          BOOL v90 = (__CVBuffer **)((char *)v90 - v95);
          uint64_t v97 = &v89[8 * v85 - 16];
          unsigned int v98 = (long long *)(v81 - 16);
          uint64_t v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v100 = *v98;
            *(v97 - 1) = *(v98 - 1);
            _OWORD *v97 = v100;
            v97 -= 2;
            v98 -= 2;
            v99 -= 4;
          }
          while (v99);
          BOOL v81 = v96;
          if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_228:
            do
            {
              unint64_t v101 = (__CVBuffer *)*((void *)v81 - 1);
              v81 -= 8;
              *--BOOL v90 = v101;
            }
            while (v81 != v83);
          }
          BOOL v81 = v132;
          uint64_t v132 = v90;
          unint64_t v134 = (unint64_t)v91;
          if (!v81) {
            goto LABEL_139;
          }
          goto LABEL_138;
        }
LABEL_137:
        uint64_t v132 = v90;
        unint64_t v134 = (unint64_t)v91;
        if (!v81) {
          goto LABEL_139;
        }
LABEL_138:
        operator delete(v81);
        goto LABEL_139;
      }
LABEL_212:
      sub_219486AFC();
    }
LABEL_219:
    sub_219486AE4();
  }
LABEL_140:
  int v109 = sub_21949CC68(*(void *)(a1 + 208), (uint64_t **)&__p, (uint64_t **)&v132, *(uint64_t **)(a1 + 1984), *(uint64_t **)(a1 + 1992), *(unsigned char *)(a1 + 2112));
  if ((v109 - 1) < 2)
  {
    *(unsigned char *)(a1 + 2112) = 0;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 1;
      _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Offload call failed with transient error -- number of retries left: %d.", buf, 8u);
    }
    if (v109 == 1)
    {
      if (!sub_21949CAD0(*(void *)(a1 + 208), a1 + 144))
      {
        BOOL v113 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v113) {
          sub_219507514(v113, v114, v115, v116, v117, v118, v119, v120);
        }
        *(void *)std::string buf = operator new(0x30uLL);
        *(_OWORD *)&uint8_t buf[8] = xmmword_21950C480;
        strcpy(*(char **)buf, "incomplete offload call -- unable to reconnect");
        sub_2194A0304(a1, (std::string::size_type)buf);
      }
      if (*(char *)(a1 + 2151) < 0)
      {
        sub_2194A3460(buf, *(void **)(a1 + 2128), *(void *)(a1 + 2136));
      }
      else
      {
        *(_OWORD *)std::string buf = *(_OWORD *)(a1 + 2128);
        *(void *)&buf[16] = *(void *)(a1 + 2144);
      }
      if (!sub_21949C88C(*(void *)(a1 + 208), (uint64_t *)buf))
      {
        BOOL v121 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v121) {
          sub_2195074D8(v121, v122, v123, v124, v125, v126, v127, v128);
        }
        BOOL v130 = (char *)operator new(0x38uLL);
        long long v131 = xmmword_21950C490;
        strcpy(v130, "incomplete offload call -- unable to load program");
        sub_2194A0304(a1, (std::string::size_type)&v130);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    int v109 = sub_21949CC68(*(void *)(a1 + 208), (uint64_t **)&__p, (uint64_t **)&v132, *(uint64_t **)(a1 + 1984), *(uint64_t **)(a1 + 1992), *(unsigned char *)(a1 + 2112));
  }
  if (v109)
  {
    *(unsigned char *)(a1 + 2112) = 0;
    *(void *)std::string buf = operator new(0x19uLL);
    *(_OWORD *)&uint8_t buf[8] = xmmword_21950C4A0;
    strcpy(*(char **)buf, "incomplete offload call");
    sub_2194A0304(a1, (std::string::size_type)buf);
  }
  *(unsigned char *)(a1 + 2112) = 1;
  *(unsigned char *)(a1 + 2216) = 1;
  LODWORD(v130) = 0;
  (*(void (**)(void, void, uint64_t, unsigned char *, char **))(**(void **)(a1 + 32) + 248))(*(void *)(a1 + 32), *(void *)(a1 + 2048), 10052, buf, &v130);
  if (!*(unsigned char *)(a1 + 2216))
  {
    *(_DWORD *)&uint8_t buf[4] = -1;
    goto LABEL_166;
  }
  (*(void (**)(void, void, uint64_t, unsigned char *, char **))(**(void **)(a1 + 32) + 248))(*(void *)(a1 + 32), *(void *)(a1 + 2048), 10056, &buf[4], &v130);
  if (!*(unsigned char *)(a1 + 2216))
  {
LABEL_166:
    *(_DWORD *)&uint8_t buf[8] = -1;
    goto LABEL_167;
  }
  (*(void (**)(void, void, uint64_t, unsigned char *, char **))(**(void **)(a1 + 32) + 248))(*(void *)(a1 + 32), *(void *)(a1 + 2048), 10000, &buf[8], &v130);
  if (!*(unsigned char *)(a1 + 2216))
  {
LABEL_167:
    *(_DWORD *)&buf[12] = -1;
    goto LABEL_168;
  }
  (*(void (**)(void, void, uint64_t, unsigned char *, char **))(**(void **)(a1 + 32) + 248))(*(void *)(a1 + 32), *(void *)(a1 + 2048), 10060, &buf[12], &v130);
  if (!*(unsigned char *)(a1 + 2216))
  {
LABEL_168:
    *(_DWORD *)&buf[16] = -1;
    goto LABEL_169;
  }
  (*(void (**)(void, void, uint64_t, unsigned char *, char **))(**(void **)(a1 + 32) + 248))(*(void *)(a1 + 32), *(void *)(a1 + 2048), 10004, &buf[16], &v130);
  if (!*(unsigned char *)(a1 + 2216))
  {
LABEL_169:
    *(_DWORD *)&buf[20] = -1;
    goto LABEL_170;
  }
  (*(void (**)(void, void, uint64_t, unsigned char *, char **))(**(void **)(a1 + 32) + 248))(*(void *)(a1 + 32), *(void *)(a1 + 2048), 10064, &buf[20], &v130);
  if (!*(unsigned char *)(a1 + 2216))
  {
LABEL_170:
    int v139 = -1;
    goto LABEL_171;
  }
  (*(void (**)(void, void, uint64_t, int *, char **))(**(void **)(a1 + 32) + 248))(*(void *)(a1 + 32), *(void *)(a1 + 2048), 10068, &v139, &v130);
  if (!*(unsigned char *)(a1 + 2216))
  {
LABEL_171:
    int v140 = -1;
    goto LABEL_172;
  }
  (*(void (**)(void, void, uint64_t, int *, char **))(**(void **)(a1 + 32) + 248))(*(void *)(a1 + 32), *(void *)(a1 + 2048), 10072, &v140, &v130);
  if (!*(unsigned char *)(a1 + 2216))
  {
LABEL_172:
    int v141 = -1;
    goto LABEL_173;
  }
  (*(void (**)(void, void, uint64_t, int *, char **))(**(void **)(a1 + 32) + 248))(*(void *)(a1 + 32), *(void *)(a1 + 2048), 10008, &v141, &v130);
  if (!*(unsigned char *)(a1 + 2216))
  {
LABEL_173:
    int v142 = -1;
    goto LABEL_174;
  }
  (*(void (**)(void, void, uint64_t, int *, char **))(**(void **)(a1 + 32) + 248))(*(void *)(a1 + 32), *(void *)(a1 + 2048), 10076, &v142, &v130);
  if (!*(unsigned char *)(a1 + 2216))
  {
LABEL_174:
    int v143 = -1;
    goto LABEL_175;
  }
  (*(void (**)(void, void, uint64_t, int *, char **))(**(void **)(a1 + 32) + 248))(*(void *)(a1 + 32), *(void *)(a1 + 2048), 10080, &v143, &v130);
  if (*(unsigned char *)(a1 + 2216))
  {
    (*(void (**)(void, void, uint64_t, int *, char **))(**(void **)(a1 + 32) + 248))(*(void *)(a1 + 32), *(void *)(a1 + 2048), 10084, v144, &v130);
    goto LABEL_176;
  }
LABEL_175:
  v144[0] = -1;
LABEL_176:
  kdebug_trace();
  kdebug_trace();
  kdebug_trace();
  if ((*(_DWORD *)(a1 + 24) - 7) > 2) {
    goto LABEL_183;
  }
  uint64_t v129 = 0;
  if (!*(unsigned char *)(a1 + 2216))
  {
    LODWORD(v129) = -1;
    goto LABEL_181;
  }
  (*(void (**)(void, void, uint64_t, uint64_t *, char **))(**(void **)(a1 + 32) + 248))(*(void *)(a1 + 32), *(void *)(a1 + 2048), 10028, &v129, &v130);
  if (!*(unsigned char *)(a1 + 2216))
  {
LABEL_181:
    HIDWORD(v129) = -1;
    goto LABEL_182;
  }
  (*(void (**)(void, void, uint64_t, char *, char **))(**(void **)(a1 + 32) + 248))(*(void *)(a1 + 32), *(void *)(a1 + 2048), 10020, (char *)&v129 + 4, &v130);
LABEL_182:
  kdebug_trace();
LABEL_183:
  if (*(unsigned char *)(a1 + 2073) && v58 && *(void *)(a1 + 2088))
  {
    kdebug_trace();
    BaseAddress = CVPixelBufferGetBaseAddress(v58);
    memcpy(*(void **)(a1 + 2088), BaseAddress, *(void *)(a1 + 2104));
    kdebug_trace();
  }
  HIDWORD(v129) = 0;
  LODWORD(v130) = 0;
  if (*(unsigned char *)(a1 + 2216))
  {
    (*(void (**)(void, void, uint64_t, char **, char *))(**(void **)(a1 + 32) + 248))(*(void *)(a1 + 32), *(void *)(a1 + 2048), 2000, &v130, (char *)&v129 + 4);
    int v111 = (int)v130;
  }
  else
  {
    int v111 = -1;
    LODWORD(v130) = -1;
  }
  int v112 = *(_DWORD *)(a1 + 1384);
  if ((*(_DWORD *)(a1 + 24) - 7) < 3) {
    v112 += 4;
  }
  if (v111 != v112)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      sub_219507458(v111);
    }
    *(void *)std::string buf = operator new(0x50uLL);
    *(_OWORD *)&uint8_t buf[8] = xmmword_21950C4B0;
    strcpy(*(char **)buf, "an unexpected halt address -- possibly an assertion in the accelerator kernel.");
    sub_2194A0304(a1, (std::string::size_type)buf);
  }
  kdebug_trace();
  if (v132)
  {
    uint64_t v133 = v132;
    operator delete(v132);
  }
  if (__p)
  {
    uint64_t v136 = (uint64_t)__p;
    operator delete(__p);
  }
  return 0;
}

void sub_2194A17EC(_Unwind_Exception *a1)
{
}

void sub_2194A1804(_Unwind_Exception *a1)
{
}

void sub_2194A181C(_Unwind_Exception *a1)
{
}

void sub_2194A1834(_Unwind_Exception *a1)
{
}

void sub_2194A184C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    uint64_t v28 = a16;
    if (a16)
    {
LABEL_9:
      operator delete(v28);
      uint64_t v29 = a19;
      if (a19)
      {
LABEL_10:
        operator delete(v29);
        _Unwind_Resume(a1);
      }
LABEL_11:
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v28 = a16;
    if (a16) {
      goto LABEL_9;
    }
  }
  uint64_t v29 = a19;
  if (a19) {
    goto LABEL_10;
  }
  goto LABEL_11;
}

uint64_t sub_2194A194C(uint64_t a1)
{
  uint64_t v2 = sub_21949DAA8(*(void *)(a1 + 2080), *(unsigned __int8 *)(a1 + 2072));
  uint64_t v3 = sub_21949DAA8(*(void *)(a1 + 2088), *(unsigned __int8 *)(a1 + 2073));
  if (v2 | v3)
  {
    int v4 = 2;
    if (v2 != v3)
    {
      int v5 = 2 * (v2 != 0);
      if (v2) {
        int v6 = 3;
      }
      else {
        int v6 = 2;
      }
      if (v3) {
        int v4 = v6;
      }
      else {
        int v4 = 0;
      }
      if (!*(unsigned char *)(a1 + 1648)) {
        goto LABEL_23;
      }
LABEL_12:
      BOOL v7 = *(unsigned char *)(a1 + 1649) != 0;
      BOOL v8 = *(unsigned char *)(a1 + 1649) == 0;
      if (*(unsigned char *)(a1 + 1684))
      {
        if (!*(unsigned char *)(a1 + 1649))
        {
          BOOL v7 = 0;
          BOOL v8 = *(unsigned char *)(a1 + 1685) == 0;
          if (*(unsigned char *)(a1 + 1720)) {
            goto LABEL_16;
          }
LABEL_27:
          BOOL v9 = v8;
LABEL_28:
          uint64_t v10 = a1 + 1792;
          if (*(unsigned char *)(a1 + 1792)) {
            goto LABEL_29;
          }
LABEL_61:
          char v11 = 1;
          BOOL v12 = v9;
          if (!*(unsigned char *)(a1 + 1828)) {
            goto LABEL_62;
          }
          goto LABEL_36;
        }
        BOOL v8 = 0;
        BOOL v7 = *(unsigned char *)(a1 + 1685) != 0;
      }
      if (*(unsigned char *)(a1 + 1720)) {
        goto LABEL_16;
      }
      goto LABEL_27;
    }
    int v5 = 2;
    if (*(unsigned char *)(a1 + 1648)) {
      goto LABEL_12;
    }
  }
  else
  {
    int v4 = 0;
    int v5 = 0;
    if (*(unsigned char *)(a1 + 1648)) {
      goto LABEL_12;
    }
  }
LABEL_23:
  if (!*(unsigned char *)(a1 + 1684))
  {
    if (!*(unsigned char *)(a1 + 1720))
    {
      uint64_t v10 = a1 + 1792;
      if (!*(unsigned char *)(a1 + 1792))
      {
        if (!*(unsigned char *)(a1 + 1828))
        {
          if (!*(unsigned char *)(a1 + 1864))
          {
            if (*(unsigned char *)(a1 + 1900))
            {
              BOOL v7 = *(unsigned char *)(a1 + 1901) != 0;
              char v13 = 1;
              char v11 = 1;
              char v15 = 1;
              char v17 = 0;
              if (*(unsigned char *)(a1 + 1901)) {
                goto LABEL_82;
              }
            }
            else
            {
              BOOL v7 = 1;
              char v15 = 1;
              char v11 = 1;
              char v13 = 1;
              char v17 = 1;
            }
LABEL_65:
            if (v7) {
              char v20 = 1;
            }
            else {
              char v20 = 3;
            }
            *(unsigned char *)(a1 + 216) = v20;
            uint64_t v18 = a1 + 216;
            char v19 = *(unsigned char *)(a1 + 1612);
            if (!v19) {
              goto LABEL_69;
            }
LABEL_86:
            if (*(unsigned char *)(a1 + 1613)) {
              char v26 = 1;
            }
            else {
              char v26 = 2;
            }
            int v27 = *(_DWORD *)(a1 + 1624);
            int v28 = *(_DWORD *)(a1 + 1620);
            int v29 = *(_DWORD *)(a1 + 1628);
            *(unsigned char *)(a1 + 218) = v26;
            *(_DWORD *)(a1 + 1512) = v27;
            *(_DWORD *)(a1 + 1516) = v28;
            *(_DWORD *)(a1 + 1520) = v29;
            if ((v11 & 1) == 0) {
              goto LABEL_70;
            }
LABEL_90:
            char v21 = 0;
            int v22 = 0;
            int v23 = 0;
            int v24 = 0;
            goto LABEL_91;
          }
          BOOL v7 = *(unsigned char *)(a1 + 1865) != 0;
          char v11 = 1;
          char v13 = 1;
          goto LABEL_48;
        }
        BOOL v7 = *(unsigned char *)(a1 + 1829) != 0;
        char v11 = 1;
        goto LABEL_41;
      }
      BOOL v7 = *(unsigned char *)(a1 + 1793) != 0;
      goto LABEL_34;
    }
    BOOL v7 = *(unsigned char *)(a1 + 1721) != 0;
    goto LABEL_60;
  }
  BOOL v7 = *(unsigned char *)(a1 + 1685) != 0;
  BOOL v8 = *(unsigned char *)(a1 + 1685) == 0;
  if (!*(unsigned char *)(a1 + 1720)) {
    goto LABEL_27;
  }
LABEL_16:
  if (v7)
  {
    BOOL v7 = *(unsigned char *)(a1 + 1721) != 0;
    if (!v8)
    {
      BOOL v9 = 0;
      uint64_t v10 = a1 + 1792;
      if (*(unsigned char *)(a1 + 1792)) {
        goto LABEL_29;
      }
      goto LABEL_61;
    }
  }
  else
  {
    BOOL v9 = 0;
    if (!v8) {
      goto LABEL_28;
    }
  }
LABEL_60:
  BOOL v9 = *(unsigned char *)(a1 + 1721) == 0;
  uint64_t v10 = a1 + 1792;
  if (!*(unsigned char *)(a1 + 1792)) {
    goto LABEL_61;
  }
LABEL_29:
  if (!v7)
  {
    char v11 = 0;
    BOOL v12 = 0;
    if (!v9) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  BOOL v7 = *(unsigned char *)(a1 + 1793) != 0;
  if (v9)
  {
LABEL_34:
    char v11 = 0;
    BOOL v12 = *(unsigned char *)(a1 + 1793) == 0;
LABEL_35:
    if (!*(unsigned char *)(a1 + 1828)) {
      goto LABEL_62;
    }
    goto LABEL_36;
  }
  char v11 = 0;
  BOOL v12 = 0;
  if (!*(unsigned char *)(a1 + 1828))
  {
LABEL_62:
    char v13 = 1;
    BOOL v14 = v12;
    if (!*(unsigned char *)(a1 + 1864)) {
      goto LABEL_63;
    }
    goto LABEL_43;
  }
LABEL_36:
  if (!v7)
  {
    char v13 = 0;
    BOOL v14 = 0;
    if (!v12) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  BOOL v7 = *(unsigned char *)(a1 + 1829) != 0;
  if (v12)
  {
LABEL_41:
    char v13 = 0;
    BOOL v14 = *(unsigned char *)(a1 + 1829) == 0;
LABEL_42:
    if (!*(unsigned char *)(a1 + 1864)) {
      goto LABEL_63;
    }
    goto LABEL_43;
  }
  char v13 = 0;
  BOOL v14 = 0;
  if (!*(unsigned char *)(a1 + 1864))
  {
LABEL_63:
    char v15 = 1;
    BOOL v16 = v14;
    if (!*(unsigned char *)(a1 + 1900)) {
      goto LABEL_64;
    }
    goto LABEL_50;
  }
LABEL_43:
  if (!v7)
  {
    char v15 = 0;
    BOOL v16 = 0;
    if (!v14) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  BOOL v7 = *(unsigned char *)(a1 + 1865) != 0;
  if (v14)
  {
LABEL_48:
    char v15 = 0;
    BOOL v16 = *(unsigned char *)(a1 + 1865) == 0;
LABEL_49:
    if (!*(unsigned char *)(a1 + 1900)) {
      goto LABEL_64;
    }
    goto LABEL_50;
  }
  char v15 = 0;
  BOOL v16 = 0;
  if (!*(unsigned char *)(a1 + 1900))
  {
LABEL_64:
    char v17 = 1;
    if (v16) {
      goto LABEL_65;
    }
    goto LABEL_82;
  }
LABEL_50:
  if (v7)
  {
    BOOL v7 = *(unsigned char *)(a1 + 1901) != 0;
    if (!v16)
    {
      char v17 = 0;
      goto LABEL_82;
    }
  }
  else if (!v16)
  {
    char v17 = 0;
    *(unsigned char *)(a1 + 216) = 2;
    uint64_t v18 = a1 + 216;
    char v19 = *(unsigned char *)(a1 + 1612);
    if (!v19) {
      goto LABEL_69;
    }
    goto LABEL_86;
  }
  char v17 = 0;
  if (!*(unsigned char *)(a1 + 1901)) {
    goto LABEL_65;
  }
LABEL_82:
  if (v7) {
    char v25 = 1;
  }
  else {
    char v25 = 2;
  }
  *(unsigned char *)(a1 + 216) = v25;
  uint64_t v18 = a1 + 216;
  char v19 = *(unsigned char *)(a1 + 1612);
  if (v19) {
    goto LABEL_86;
  }
LABEL_69:
  *(unsigned char *)(a1 + 218) = v19;
  *(_DWORD *)(a1 + 1512) = 0;
  *(_DWORD *)(a1 + 1516) = 0;
  *(_DWORD *)(a1 + 1520) = 0;
  if (v11) {
    goto LABEL_90;
  }
LABEL_70:
  if (*(unsigned char *)(a1 + 1793)) {
    char v21 = 1;
  }
  else {
    char v21 = 2;
  }
  int v22 = *(_DWORD *)(a1 + 1804);
  int v23 = *(_DWORD *)(a1 + 1800);
  int v24 = *(_DWORD *)(a1 + 1808);
LABEL_91:
  char v30 = (int32x2_t *)(a1 + 1524);
  *(unsigned char *)(a1 + 222) = v21;
  *(_DWORD *)(a1 + 1560) = v22;
  *(_DWORD *)(a1 + 1564) = v23;
  *(_DWORD *)(a1 + 1568) = v24;
  if (*(unsigned char *)(a1 + 1648))
  {
    if (*(unsigned char *)(a1 + 1649)) {
      char v31 = 1;
    }
    else {
      char v31 = 2;
    }
    int32x2_t v32 = *(int32x2_t *)(a1 + 1656);
    int v33 = *(_DWORD *)(a1 + 1664);
    *(unsigned char *)(a1 + 219) = v31;
    *char v30 = vrev64_s32(v32);
    *(_DWORD *)(a1 + 1532) = v33;
    if (v13)
    {
LABEL_96:
      *(unsigned char *)(a1 + 223) = 0;
      *(_DWORD *)(a1 + 1572) = 0;
      *(_DWORD *)(a1 + 1576) = 0;
      *(_DWORD *)(a1 + 1580) = 0;
      char v34 = *(unsigned char *)(a1 + 1684);
      if (v34) {
        goto LABEL_97;
      }
LABEL_112:
      *(unsigned char *)(a1 + 220) = v34;
      *(_DWORD *)(a1 + 1536) = 0;
      *(_DWORD *)(a1 + 1540) = 0;
      *(_DWORD *)(a1 + 1544) = 0;
      if (v15) {
        goto LABEL_101;
      }
      goto LABEL_113;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 219) = 0;
    *char v30 = vrev64_s32(0);
    *(_DWORD *)(a1 + 1532) = 0;
    if (v13) {
      goto LABEL_96;
    }
  }
  if (*(unsigned char *)(a1 + 1829)) {
    char v47 = 1;
  }
  else {
    char v47 = 2;
  }
  int v48 = *(_DWORD *)(a1 + 1840);
  int v49 = *(_DWORD *)(a1 + 1836);
  int v50 = *(_DWORD *)(a1 + 1844);
  *(unsigned char *)(a1 + 223) = v47;
  *(_DWORD *)(a1 + 1572) = v48;
  *(_DWORD *)(a1 + 1576) = v49;
  *(_DWORD *)(a1 + 1580) = v50;
  char v34 = *(unsigned char *)(a1 + 1684);
  if (!v34) {
    goto LABEL_112;
  }
LABEL_97:
  if (*(unsigned char *)(a1 + 1685)) {
    char v35 = 1;
  }
  else {
    char v35 = 2;
  }
  int v36 = *(_DWORD *)(a1 + 1696);
  int v37 = *(_DWORD *)(a1 + 1692);
  int v38 = *(_DWORD *)(a1 + 1700);
  *(unsigned char *)(a1 + 220) = v35;
  *(_DWORD *)(a1 + 1536) = v36;
  *(_DWORD *)(a1 + 1540) = v37;
  *(_DWORD *)(a1 + 1544) = v38;
  if (v15)
  {
LABEL_101:
    *(unsigned char *)(a1 + 224) = 0;
    *(_DWORD *)(a1 + 1584) = 0;
    *(_DWORD *)(a1 + 1588) = 0;
    *(_DWORD *)(a1 + 1592) = 0;
    char v39 = *(unsigned char *)(a1 + 1720);
    if (v39) {
      goto LABEL_102;
    }
    goto LABEL_117;
  }
LABEL_113:
  if (*(unsigned char *)(a1 + 1865)) {
    char v51 = 1;
  }
  else {
    char v51 = 2;
  }
  int v52 = *(_DWORD *)(a1 + 1876);
  int v53 = *(_DWORD *)(a1 + 1872);
  int v54 = *(_DWORD *)(a1 + 1880);
  *(unsigned char *)(a1 + 224) = v51;
  *(_DWORD *)(a1 + 1584) = v52;
  *(_DWORD *)(a1 + 1588) = v53;
  *(_DWORD *)(a1 + 1592) = v54;
  char v39 = *(unsigned char *)(a1 + 1720);
  if (v39)
  {
LABEL_102:
    if (*(unsigned char *)(a1 + 1721)) {
      char v40 = 1;
    }
    else {
      char v40 = 2;
    }
    int32x2_t v41 = *(int32x2_t *)(a1 + 1728);
    int v42 = *(_DWORD *)(a1 + 1736);
    *(unsigned char *)(a1 + 221) = v40;
    *(int32x2_t *)(a1 + 1548) = vrev64_s32(v41);
    *(_DWORD *)(a1 + 1556) = v42;
    if (v17) {
      goto LABEL_106;
    }
    goto LABEL_118;
  }
LABEL_117:
  *(unsigned char *)(a1 + 221) = v39;
  *(int32x2_t *)(a1 + 1548) = vrev64_s32(0);
  *(_DWORD *)(a1 + 1556) = 0;
  if (v17)
  {
LABEL_106:
    char v43 = 0;
    int v44 = 0;
    int v45 = 0;
    int v46 = 0;
    goto LABEL_122;
  }
LABEL_118:
  if (*(unsigned char *)(a1 + 1901)) {
    char v43 = 1;
  }
  else {
    char v43 = 2;
  }
  int v44 = *(_DWORD *)(a1 + 1912);
  int v45 = *(_DWORD *)(a1 + 1908);
  int v46 = *(_DWORD *)(a1 + 1916);
LABEL_122:
  *(unsigned char *)(a1 + 225) = v43;
  *(_DWORD *)(a1 + 1596) = v44;
  *(_DWORD *)(a1 + 1600) = v45;
  *(_DWORD *)(a1 + 1604) = v46;
  *(_DWORD *)(a1 + 1388) = 0x80000000;
  *(void *)(a1 + 1392) = 0;
  int v55 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 160))(*(void *)(a1 + 32));
  *(_DWORD *)(a1 + 1404) = v55;
  *(_DWORD *)(a1 + 1408) = v55;
  *(_DWORD *)(a1 + 1496) = 0;
  *(_WORD *)(a1 + 1500) = 0;
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 32) + 176))(*(void *)(a1 + 32), *(void *)(a1 + 2024), v18);
  uint64_t v57 = *(void *)(a1 + 2016) + *(unsigned int *)(*(void *)(a1 + 2016) + 4);
  if (*(unsigned __int8 *)(v57 + 144) <= *(unsigned __int8 *)(a1 + 1614)) {
    goto LABEL_157;
  }
  if (*(unsigned char *)(a1 + 1612))
  {
    uint64_t v58 = v57 + 84 * *(unsigned __int8 *)(a1 + 1614);
    *(_DWORD *)(v58 + 152) &= 0x80000000;
    *(_WORD *)(v58 + 166) = *(_WORD *)(a1 + 1616);
    *(_WORD *)(v58 + 164) = *(_DWORD *)(a1 + 1632);
    *(_WORD *)(v58 + 162) = *(_DWORD *)(a1 + 1636);
    *(_WORD *)(v58 + 160) = *(_DWORD *)(a1 + 1640);
    *(_DWORD *)(v58 + 156) = *(_DWORD *)(a1 + 1644);
  }
  uint64_t v59 = *(void *)(a1 + 2016) + *(unsigned int *)(*(void *)(a1 + 2016) + 4);
  if (*(unsigned __int8 *)(v59 + 144) <= *(unsigned __int8 *)(a1 + 1794)) {
LABEL_158:
  }
    sub_219503364();
  if (*(unsigned char *)v10)
  {
    uint64_t v60 = v59 + 84 * *(unsigned __int8 *)(a1 + 1794);
    *(_DWORD *)(v60 + 152) = *(_DWORD *)(v60 + 152) & 0x80000000 | 1;
    *(_WORD *)(v60 + 166) = *(_WORD *)(a1 + 1796);
    *(_WORD *)(v60 + 164) = *(_DWORD *)(a1 + 1812);
    *(_WORD *)(v60 + 162) = *(_DWORD *)(a1 + 1816);
    *(_WORD *)(v60 + 160) = *(_DWORD *)(a1 + 1820);
    *(_DWORD *)(v60 + 156) = *(_DWORD *)(a1 + 1824);
  }
  uint64_t v61 = *(void *)(a1 + 2016) + *(unsigned int *)(*(void *)(a1 + 2016) + 4);
  if (*(unsigned __int8 *)(v61 + 144) <= *(unsigned __int8 *)(a1 + 1650)) {
    goto LABEL_157;
  }
  if (*(unsigned char *)(a1 + 1648))
  {
    uint64_t v62 = v61 + 84 * *(unsigned __int8 *)(a1 + 1650);
    *(_DWORD *)(v62 + 152) = *(_DWORD *)(v62 + 152) & 0x80000000 | 1;
    *(_WORD *)(v62 + 166) = *(_WORD *)(a1 + 1652);
    *(_WORD *)(v62 + 164) = *(_DWORD *)(a1 + 1668);
    *(_WORD *)(v62 + 162) = *(_DWORD *)(a1 + 1672);
    *(_WORD *)(v62 + 160) = *(_DWORD *)(a1 + 1676);
    *(_DWORD *)(v62 + 156) = *(_DWORD *)(a1 + 1680);
  }
  if (*(unsigned char *)(v10 + 36) && !v4) {
    goto LABEL_159;
  }
  uint64_t v63 = *(void *)(a1 + 2016) + *(unsigned int *)(*(void *)(a1 + 2016) + 4);
  if (*(unsigned __int8 *)(v63 + 144) <= *(unsigned __int8 *)(v10 + 38)) {
    goto LABEL_158;
  }
  if (*(unsigned char *)(v10 + 36))
  {
    uint64_t v64 = v63 + 84 * *(unsigned __int8 *)(v10 + 38);
    *(_DWORD *)(v64 + 152) = *(_DWORD *)(v64 + 152) & 0x80000000 | v4 & 0x7FFFFFFF;
    *(_WORD *)(v64 + 166) = *(_WORD *)(v10 + 40);
    int v65 = *(_DWORD *)(v10 + 60);
    *(_WORD *)(v64 + 164) = *(_DWORD *)(v10 + 56);
    *(_WORD *)(v64 + 162) = v65;
    int v66 = *(_DWORD *)(v10 + 68);
    *(_WORD *)(v64 + 160) = *(_DWORD *)(v10 + 64);
    *(_DWORD *)(v64 + 156) = v66;
  }
  uint64_t v67 = *(void *)(a1 + 2016) + *(unsigned int *)(*(void *)(a1 + 2016) + 4);
  if (*(unsigned __int8 *)(v67 + 144) <= *(unsigned __int8 *)(a1 + 1686)) {
    goto LABEL_157;
  }
  if (*(unsigned char *)(a1 + 1684))
  {
    uint64_t v68 = v67 + 84 * *(unsigned __int8 *)(a1 + 1686);
    *(_DWORD *)(v68 + 152) = *(_DWORD *)(v68 + 152) & 0x80000000 | 1;
    *(_WORD *)(v68 + 166) = *(_WORD *)(a1 + 1688);
    *(_WORD *)(v68 + 164) = *(_DWORD *)(a1 + 1704);
    *(_WORD *)(v68 + 162) = *(_DWORD *)(a1 + 1708);
    *(_WORD *)(v68 + 160) = *(_DWORD *)(a1 + 1712);
    *(_DWORD *)(v68 + 156) = *(_DWORD *)(a1 + 1716);
  }
  if (*(unsigned char *)(v10 + 72)) {
LABEL_159:
  }
    sub_219507630();
  uint64_t v69 = *(void *)(a1 + 2016) + *(unsigned int *)(*(void *)(a1 + 2016) + 4);
  if (*(unsigned __int8 *)(v69 + 144) <= *(unsigned __int8 *)(v10 + 74)) {
    goto LABEL_158;
  }
  if (*(unsigned char *)(v10 + 72))
  {
    uint64_t v70 = v69 + 84 * *(unsigned __int8 *)(v10 + 74);
    *(_DWORD *)(v70 + 152) &= 0x80000000;
    *(_WORD *)(v70 + 166) = *(_WORD *)(v10 + 76);
    int v71 = *(_DWORD *)(v10 + 96);
    *(_WORD *)(v70 + 164) = *(_DWORD *)(v10 + 92);
    *(_WORD *)(v70 + 162) = v71;
    int v72 = *(_DWORD *)(v10 + 104);
    *(_WORD *)(v70 + 160) = *(_DWORD *)(v10 + 100);
    *(_DWORD *)(v70 + 156) = v72;
  }
  if (*(unsigned char *)(a1 + 1720) && !v5) {
    sub_219507668();
  }
  uint64_t v73 = *(void *)(a1 + 2016) + *(unsigned int *)(*(void *)(a1 + 2016) + 4);
  if (*(unsigned __int8 *)(v73 + 144) <= *(unsigned __int8 *)(a1 + 1722)) {
LABEL_157:
  }
    sub_219503364();
  if (*(unsigned char *)(a1 + 1720))
  {
    uint64_t v74 = v73 + 84 * *(unsigned __int8 *)(a1 + 1722);
    *(_DWORD *)(v74 + 152) = *(_DWORD *)(v74 + 152) & 0x80000000 | v5;
    *(_WORD *)(v74 + 166) = *(_WORD *)(a1 + 1724);
    *(_WORD *)(v74 + 164) = *(_DWORD *)(a1 + 1740);
    *(_WORD *)(v74 + 162) = *(_DWORD *)(a1 + 1744);
    *(_WORD *)(v74 + 160) = *(_DWORD *)(a1 + 1748);
    *(_DWORD *)(v74 + 156) = *(_DWORD *)(a1 + 1752);
  }
  if (*(unsigned char *)(v10 + 108)) {
    goto LABEL_159;
  }
  uint64_t v75 = *(void *)(a1 + 2016) + *(unsigned int *)(*(void *)(a1 + 2016) + 4);
  if (*(unsigned __int8 *)(v75 + 144) <= *(unsigned __int8 *)(v10 + 110)) {
    goto LABEL_158;
  }
  if (*(unsigned char *)(v10 + 108))
  {
    uint64_t v76 = v75 + 84 * *(unsigned __int8 *)(v10 + 110);
    *(_DWORD *)(v76 + 152) &= 0x80000000;
    *(_WORD *)(v76 + 166) = *(_WORD *)(v10 + 112);
    int v77 = *(_DWORD *)(v10 + 132);
    *(_WORD *)(v76 + 164) = *(_DWORD *)(v10 + 128);
    *(_WORD *)(v76 + 162) = v77;
    int v78 = *(_DWORD *)(v10 + 140);
    *(_WORD *)(v76 + 160) = *(_DWORD *)(v10 + 136);
    *(_DWORD *)(v76 + 156) = v78;
  }
  uint64_t v79 = *(void *)(a1 + 2016) + *(unsigned int *)(*(void *)(a1 + 2016) + 4);
  if (*(unsigned __int8 *)(v79 + 144) <= *(unsigned __int8 *)(a1 + 1938)) {
    sub_219503364();
  }
  if (*(unsigned char *)(a1 + 1936))
  {
    uint64_t v80 = v79 + 84 * *(unsigned __int8 *)(a1 + 1938);
    *(_DWORD *)(v80 + 152) = *(_DWORD *)(v80 + 152) & 0x80000000 | 1;
    *(_WORD *)(v80 + 166) = *(_WORD *)(a1 + 1940);
    *(_WORD *)(v80 + 164) = *(_DWORD *)(a1 + 1956);
    *(_WORD *)(v80 + 162) = *(_DWORD *)(a1 + 1960);
    *(_WORD *)(v80 + 160) = *(_DWORD *)(a1 + 1964);
    *(_DWORD *)(v80 + 156) = *(_DWORD *)(a1 + 1968);
  }
  return result;
}

uint64_t sub_2194A2388(uint64_t a1, const void **a2, const void **a3)
{
  if (!*(unsigned char *)(a1 + 2113)) {
    return 5;
  }
  unsigned int v48 = 0;
  int v47 = 0;
  uint64_t v46 = 0;
  int v45 = 0;
  int v5 = *((char *)a2 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  int v7 = *(char *)(a1 + 2215);
  if (v7 >= 0) {
    size_t v8 = *(unsigned __int8 *)(a1 + 2215);
  }
  else {
    size_t v8 = *(void *)(a1 + 2200);
  }
  unint64_t v9 = v8 + v6;
  if (v8 + v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_21947DF80();
  }
  uint64_t v10 = a3;
  if (v9 <= 0x16)
  {
    size_t v43 = 0;
    unint64_t v44 = 0;
    std::__fs::filesystem::path __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v44) = v8 + v6;
    BOOL v12 = (const void **)(a1 + 2192);
    if (!v6) {
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17) {
    uint64_t v14 = v9 | 7;
  }
  int v15 = *(char *)(a1 + 2215);
  uint64_t v17 = v14 + 1;
  p_dst = (void **)operator new(v14 + 1);
  unint64_t v18 = v17 | 0x8000000000000000;
  uint64_t v10 = a3;
  int v7 = v15;
  size_t v43 = v8 + v6;
  unint64_t v44 = v18;
  std::__fs::filesystem::path __dst = p_dst;
  BOOL v12 = (const void **)(a1 + 2192);
  if (v6)
  {
LABEL_16:
    if (v5 >= 0) {
      char v19 = a2;
    }
    else {
      char v19 = *a2;
    }
    memmove(p_dst, v19, v6);
  }
LABEL_20:
  char v20 = (char *)p_dst + v6;
  if (v8)
  {
    if (v7 >= 0) {
      char v21 = v12;
    }
    else {
      char v21 = *v12;
    }
    memmove(v20, v21, v8);
  }
  v20[v8] = 0;
  int v22 = *((char *)v10 + 23);
  if (v22 >= 0) {
    size_t v23 = *((unsigned __int8 *)v10 + 23);
  }
  else {
    size_t v23 = (size_t)v10[1];
  }
  unint64_t v24 = v23 + v8;
  if (v23 + v8 > 0x7FFFFFFFFFFFFFF7) {
    sub_21947DF80();
  }
  if (v24 <= 0x16)
  {
    size_t v40 = 0;
    unint64_t v41 = 0;
    __p = 0;
    p_p = (char *)&__p;
    HIBYTE(v41) = v23 + v8;
    if (!v23) {
      goto LABEL_35;
    }
    goto LABEL_31;
  }
  int v37 = v7;
  char v31 = v10;
  uint64_t v32 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v24 | 7) != 0x17) {
    uint64_t v32 = v24 | 7;
  }
  uint64_t v33 = v32 + 1;
  p_p = (char *)operator new(v32 + 1);
  size_t v40 = v23 + v8;
  unint64_t v41 = v33 | 0x8000000000000000;
  __p = p_p;
  uint64_t v10 = v31;
  int v7 = v37;
  if (v23)
  {
LABEL_31:
    if (v22 >= 0) {
      char v26 = v10;
    }
    else {
      char v26 = *v10;
    }
    memmove(p_p, v26, v23);
  }
LABEL_35:
  int v27 = &p_p[v23];
  if (v8)
  {
    if (v7 >= 0) {
      int v28 = v12;
    }
    else {
      int v28 = *v12;
    }
    memmove(v27, v28, v8);
  }
  v27[v8] = 0;
  v38[0] = a1;
  v38[1] = &v48;
  int v29 = sub_2194A3DB8((void *)(a1 + 2152), (uint64_t)&__dst);
  if (v29)
  {
    uint64_t v30 = v29[5];
    HIDWORD(v46) = v29[6];
    int v47 = v30;
  }
  else if (!sub_2194A26D0(v38, (uint64_t *)a2, (uint64_t)&__dst, &v47, (_DWORD *)&v46 + 1))
  {
    goto LABEL_56;
  }
  char v34 = sub_2194A3DB8((void *)(a1 + 2152), (uint64_t)&__p);
  if (v34)
  {
    int v35 = *((_DWORD *)v34 + 10);
    int v45 = v34[6];
    LODWORD(v46) = v35;
    goto LABEL_51;
  }
  if (sub_2194A26D0(v38, (uint64_t *)v10, (uint64_t)&__p, &v46, &v45))
  {
    int v35 = v46;
LABEL_51:
    uint64_t v13 = sub_2194A0564(a1, v47, v35);
    if ((SHIBYTE(v41) & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
LABEL_56:
  uint64_t v13 = v48;
  if (SHIBYTE(v41) < 0) {
LABEL_52:
  }
    operator delete(__p);
LABEL_53:
  if (SHIBYTE(v44) < 0) {
    operator delete(__dst);
  }
  return v13;
}

void sub_2194A2680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a18);
  _Unwind_Resume(a1);
}

BOOL sub_2194A26D0(void *a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v10 = *a1;
  unsigned __int16 v11 = sub_21949CA68(*(void *)(*a1 + 208), (uint64_t)a2, a4, a5);
  if (v11 > 0xFFu)
  {
LABEL_17:
    if ((_BYTE)v11)
    {
      __p.__r_.__value_.__r.__words[0] = a3;
      int v27 = sub_2194A29A0(v10 + 2152, a3, (uint64_t)&unk_21950C4D0, (long long **)&__p);
      v27[5] = *a4;
      v27[6] = *a5;
      return 1;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      sub_2195076DC(a2);
    }
    BOOL result = 0;
    int v28 = (int *)a1[1];
    int v29 = 8;
    goto LABEL_29;
  }
  BOOL v12 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v12)
  {
    sub_2195077A8(v12, v13, v14, v15, v16, v17, v18, v19);
    BOOL result = sub_21949CAD0(*(void *)(v10 + 208), v10 + 144);
    if (result)
    {
LABEL_4:
      memset(&__p, 0, sizeof(__p));
      int v21 = *(char *)(v10 + 2151);
      if (v21 >= 0) {
        int v22 = (std::string *)(v10 + 2128);
      }
      else {
        int v22 = *(std::string **)(v10 + 2128);
      }
      uint64_t v23 = *(void *)(v10 + 2136);
      if (v21 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(v10 + 2151);
      }
      sub_2194A3B54(&__p, v22, (std::string *)((char *)v22 + v23));
      uint64_t v24 = *(void *)(v10 + 208);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        sub_2194A3460(&v46, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v46 = __p;
      }
      BOOL v25 = sub_21949C88C(v24, (uint64_t *)&v46);
      BOOL v26 = v25;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v46.__r_.__value_.__l.__data_);
        if (v26) {
          goto LABEL_14;
        }
      }
      else if (v25)
      {
LABEL_14:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        unsigned __int16 v11 = sub_21949CA68(*(void *)(v10 + 208), (uint64_t)a2, a4, a5);
        if (v11 <= 0xFFu)
        {
          BOOL v38 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v38) {
            sub_2195076A0(v38, v39, v40, v41, v42, v43, v44, v45);
          }
          *(_DWORD *)a1[1] = 8;
          sub_2194A2954();
        }
        goto LABEL_17;
      }
      *(_DWORD *)a1[1] = 6;
      BOOL v30 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v30)
      {
        sub_21950776C(v30, v31, v32, v33, v34, v35, v36, v37);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return 0;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        return 0;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      return 0;
    }
  }
  else
  {
    BOOL result = sub_21949CAD0(*(void *)(v10 + 208), v10 + 144);
    if (result) {
      goto LABEL_4;
    }
  }
  int v28 = (int *)a1[1];
  int v29 = 7;
LABEL_29:
  *int v28 = v29;
  return result;
}

void sub_2194A291C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2194A2954()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3B0] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C200], MEMORY[0x263F8C088]);
}

uint64_t *sub_2194A29A0(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  size_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_2194A2E64((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          size_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  BOOL v26 = operator new(0x38uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *BOOL v26 = 0;
  v26[1] = v11;
  int v27 = v26 + 2;
  int v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_2194A3460(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)int v27 = v29;
  }
  v26[5] = 0;
  v26[6] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_2194A32B0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      uint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v33 = *v32;
  *uint64_t v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_2194A2DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2194A2E14((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2194A2DFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2194A2E14((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2194A2E14(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_2194A2E64(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v30 = v26 + v28;
      unint64_t v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      unint64_t v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      unint64_t v33 = v27 + a3 + v26 + v23;
      uint64_t v34 = v33 + v24;
      unint64_t v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      uint64_t v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v37 = v36 + v25 + v28;
      uint64_t v38 = __ROR8__(v37, 44);
      uint64_t v39 = v37 + v29;
      uint64_t v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      uint64_t v42 = *a2;
      uint64_t v41 = a2 + 4;
      unint64_t v43 = v42 - 0x4B6D499041670D8DLL * v24;
      uint64_t v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v45 = *(v41 - 3);
        uint64_t v46 = v43 + v34 + v30 + v45;
        uint64_t v47 = v41[2];
        uint64_t v48 = v41[3];
        uint64_t v49 = v41[1];
        unint64_t v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        uint64_t v50 = v32 + v39;
        uint64_t v51 = *(v41 - 2);
        uint64_t v52 = *(v41 - 1);
        uint64_t v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        uint64_t v54 = v53 + v39 + v52;
        uint64_t v55 = v53 + v45 + v51;
        uint64_t v34 = v55 + v52;
        uint64_t v56 = __ROR8__(v55, 44) + v53;
        unint64_t v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        unint64_t v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        unint64_t v35 = v56 + __ROR8__(v54 + v57, 21);
        unint64_t v58 = v43 + v40 + *v41;
        uint64_t v39 = v58 + v49 + v47 + v48;
        uint64_t v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        unint64_t v32 = v57;
        v44 += 64;
      }
      while (v44);
      unint64_t v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      unint64_t v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v10 = __ROR8__(v7 + v8, 52);
      uint64_t v11 = v7 + a2[1];
      uint64_t v12 = __ROR8__(v11, 7);
      uint64_t v13 = v11 + v9;
      uint64_t v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      uint64_t v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      uint64_t v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      unint64_t v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    uint64_t v18 = a2[1];
    unint64_t v19 = 0xB492B66FBE98F273 * *a2;
    uint64_t v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    unint64_t v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        unint64_t v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      uint64_t v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      unint64_t v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    uint64_t v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

void sub_2194A32B0(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    uint64_t v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    sub_219486AFC();
  }
  uint64_t v4 = operator new(8 * a2);
  int v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  uint64_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        uint64_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          uint64_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          *uint64_t v7 = *v12;
          uint64_t v14 = 8 * v13;
          void *v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          uint64_t v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    uint64_t v16 = (void *)*v7;
    if (*v7)
    {
      while (1)
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 == v9) {
          goto LABEL_25;
        }
        if (*(void *)(*(void *)a1 + 8 * v18))
        {
          *uint64_t v7 = *v16;
          uint64_t v17 = 8 * v18;
          *uint64_t v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          uint64_t v16 = v7;
LABEL_25:
          uint64_t v7 = v16;
          uint64_t v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v18) = v7;
          uint64_t v7 = v16;
          uint64_t v16 = (void *)*v16;
          unint64_t v9 = v18;
          if (!v16) {
            return;
          }
        }
      }
    }
  }
}

void *sub_2194A3460(unsigned char *__dst, void *__src, unint64_t a3)
{
  int v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21947DF80();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    void *v5 = v8;
    int v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

_OWORD *sub_2194A3500(void *a1, long long *a2)
{
  uint64_t v3 = a1[1] - *a1;
  unint64_t v4 = (v3 >> 4) + 1;
  if (v4 >> 60) {
    sub_219486AE4();
  }
  uint64_t v5 = a1[2] - *a1;
  if (v5 >> 3 > v4) {
    unint64_t v4 = v5 >> 3;
  }
  BOOL v17 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  if (!v17) {
    unint64_t v6 = v4;
  }
  if (v6 >> 60) {
    sub_219486AFC();
  }
  uint64_t v8 = 16 * v6;
  unint64_t v9 = (char *)operator new(16 * v6);
  unint64_t v10 = &v9[16 * (v3 >> 4)];
  uint64_t v11 = &v9[v8];
  long long v12 = *a2;
  *((void *)a2 + 1) = 0;
  *(_OWORD *)unint64_t v10 = v12;
  uint64_t v13 = v10 + 16;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15) {
      return v13;
    }
    goto LABEL_26;
  }
  unint64_t v16 = (unint64_t)&v15[-*a1 - 16];
  if (v16 < 0x90) {
    goto LABEL_17;
  }
  BOOL v17 = &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] >= v15 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF0) - 16] >= v10;
  if (!v17) {
    goto LABEL_17;
  }
  uint64_t v18 = (v16 >> 4) + 1;
  uint64_t v19 = 16 * (v18 & 0x1FFFFFFFFFFFFFFELL);
  uint64_t v20 = &v10[-v19];
  unint64_t v21 = &v15[-v19];
  unint64_t v22 = (double *)(v10 - 32);
  uint64_t v23 = (const double *)(v15 - 32);
  uint64_t v24 = v18 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    float64x2x2_t v30 = vld2q_f64(v23);
    v23[3] = 0.0;
    v23[1] = 0.0;
    vst2q_f64(v22, v30);
    v23 -= 4;
    v22 -= 4;
    v24 -= 2;
  }
  while (v24);
  unint64_t v10 = v20;
  uint64_t v15 = v21;
  if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_17:
    uint64_t v20 = v10;
    do
    {
      uint64_t v25 = *((void *)v15 - 2);
      v15 -= 16;
      *((void *)v20 - 2) = v25;
      v20 -= 16;
      uint64_t v26 = *((void *)v15 + 1);
      *((void *)v15 + 1) = 0;
      *((void *)v20 + 1) = v26;
    }
    while (v15 != v14);
  }
  uint64_t v27 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  *a1 = v20;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v27)
  {
    do
    {
      uint64_t v28 = (CVPixelBufferRef *)*((void *)v15 - 1);
      *((void *)v15 - 1) = 0;
      if (v28)
      {
        CVPixelBufferUnlockBaseAddress(*v28, 0);
        CVPixelBufferRelease(*v28);
        MEMORY[0x21D48B5B0](v28, 0x20C4093837F09);
      }
      v15 -= 16;
    }
    while (v15 != v27);
    uint64_t v15 = v27;
  }
  if (v15) {
LABEL_26:
  }
    operator delete(v15);
  return v13;
}

uint64_t *sub_2194A36E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_2194A2E64((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = (char *)operator new(0x38uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = v10;
  uint64_t v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_2194A3460(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_2194A32B0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        float64x2x2_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        float64x2x2_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      float64x2x2_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *float64x2x2_t v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  float64x2x2_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *float64x2x2_t v30 = *v29;
  *uint64_t v29 = v42[0];
LABEL_92:
  uint64_t v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_2194A3B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2194A2E14((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2194A3B3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2194A2E14((uint64_t *)va);
  _Unwind_Resume(a1);
}

std::string *sub_2194A3B54(std::string *this, std::string *__src, std::string *a3)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  size_t v7 = (char *)a3 - (char *)__src;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == __src) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    unint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
    if (this->__r_.__value_.__r.__words[0] > (unint64_t)__src) {
      goto LABEL_12;
    }
  }
  else
  {
    if (a3 == __src) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    unint64_t v10 = this;
    if (this > __src)
    {
LABEL_12:
      if (v9 - size < v7)
      {
        std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
        this->__r_.__value_.__l.__size_ = size;
        uint64_t v13 = this;
        if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_14:
          uint64_t v14 = (char *)v13 + size;
          if (a3 == __src) {
            goto LABEL_38;
          }
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v13 = this;
        if ((v6 & 0x80) == 0) {
          goto LABEL_14;
        }
      }
      uint64_t v13 = (std::string *)this->__r_.__value_.__r.__words[0];
      uint64_t v14 = (std::string::value_type *)(this->__r_.__value_.__r.__words[0] + size);
      if (a3 == __src) {
        goto LABEL_38;
      }
LABEL_18:
      if (v7 >= 0x20)
      {
        uint64_t v20 = (char *)v13 + size;
        if ((unint64_t)((char *)v13 + size - (char *)__src) >= 0x20)
        {
          char v15 = (std::string *)((char *)__src + (v7 & 0xFFFFFFFFFFFFFFE0));
          v14 += v7 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v21 = v20 + 16;
          uint64_t v22 = &__src->__r_.__value_.__r.__words[2];
          unint64_t v23 = v7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v24 = *(_OWORD *)v22;
            *(v21 - 1) = *((_OWORD *)v22 - 1);
            *uint64_t v21 = v24;
            v21 += 2;
            v22 += 4;
            v23 -= 32;
          }
          while (v23);
          if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0)) {
            goto LABEL_38;
          }
        }
        else
        {
          char v15 = __src;
        }
      }
      else
      {
        char v15 = __src;
      }
      do
      {
        std::string::value_type v25 = v15->__r_.__value_.__s.__data_[0];
        char v15 = (std::string *)((char *)v15 + 1);
        *v14++ = v25;
      }
      while (v15 != a3);
LABEL_38:
      std::string::value_type *v14 = 0;
      std::string::size_type v26 = v7 + size;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        this->__r_.__value_.__l.__size_ = v26;
      }
      else {
        *((unsigned char *)&this->__r_.__value_.__s + 23) = v26 & 0x7F;
      }
      return this;
    }
  }
  if ((std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= __src) {
    goto LABEL_12;
  }
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21947DF80();
  }
  if (v7 > 0x16)
  {
    uint64_t v16 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v16 = v7 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    size_t v29 = v7;
    int64_t v30 = v17 | 0x8000000000000000;
    std::__fs::filesystem::path __dst = p_dst;
    if (a3 == __src) {
      goto LABEL_24;
    }
  }
  else
  {
    HIBYTE(v30) = v7;
    p_dst = (void **)&__dst;
    if (a3 == __src) {
      goto LABEL_24;
    }
  }
  memcpy(p_dst, __src, v7);
  p_dst = (void **)((char *)p_dst + v7);
LABEL_24:
  *(unsigned char *)p_dst = 0;
  if (v30 >= 0) {
    uint64_t v18 = (const std::string::value_type *)&__dst;
  }
  else {
    uint64_t v18 = (const std::string::value_type *)__dst;
  }
  if (v30 >= 0) {
    std::string::size_type v19 = HIBYTE(v30);
  }
  else {
    std::string::size_type v19 = v29;
  }
  std::string::append(this, v18, v19);
  if (SHIBYTE(v30) < 0) {
    operator delete(__dst);
  }
  return this;
}

void sub_2194A3D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2194A3DB8(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_2194A2E64((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          unint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        unint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

BOOL sub_2194A3FE8(uint64_t a1)
{
  return *(void *)(a1 + 584) != 0;
}

void sub_2194A3FF8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  *(void *)a1 = *(void *)a2;
  int v10 = *(unsigned __int16 *)(a2 + 50);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 24);
  int v11 = *(unsigned __int8 *)(a2 + 68);
  *(unsigned char *)(a1 + 20) = v11;
  BOOL v12 = v11 != 1;
  BOOL v13 = v11 == 1;
  if (*(unsigned char *)(a2 + 84)) {
    char v14 = 1;
  }
  else {
    char v14 = v13;
  }
  *(unsigned char *)(a1 + 384) = v14;
  if (*(unsigned char *)(a2 + 89)) {
    int v15 = 1;
  }
  else {
    int v15 = v13;
  }
  *(unsigned char *)(a1 + 385) = v15;
  if (*(unsigned char *)(a2 + 88)) {
    BOOL v13 = 1;
  }
  *(unsigned char *)(a1 + 386) = v13;
  if (!*(unsigned char *)(a2 + 154)) {
    BOOL v12 = 0;
  }
  *(unsigned char *)(a1 + 388) = v12;
  if (*(_DWORD *)(a2 + 64) < 7u)
  {
    if (!v13) {
      goto LABEL_20;
    }
    char v16 = 1;
LABEL_19:
    *(unsigned char *)(a1 + 387) = v16;
    goto LABEL_20;
  }
  if (!v15)
  {
    if (!v13) {
      goto LABEL_20;
    }
    char v16 = 0;
    goto LABEL_19;
  }
  if (v13) {
    sub_2195077E4();
  }
LABEL_20:
  *(unsigned char *)(a1 + 389) = *(unsigned char *)(a2 + 92);
  *(unsigned char *)(a1 + 390) = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 128))(a3);
  *(unsigned char *)(a1 + 391) = *(unsigned char *)(a2 + 156);
  uint64_t v17 = *(unsigned int *)(*(void *)(a1 + 472) + 4);
  *(void *)(a1 + 392) = *a5 + 1;
  int v18 = v17 - *a4;
  if (v17 <= *a4) {
    v18 += 0x7FFFFFFF;
  }
  if (*a4 != -1 && v18 != 1)
  {
    kdebug_trace();
    ++*(void *)(a1 + 392);
  }
  *a4 = v17;
  *a5 = *(void *)(a1 + 392);
  sub_2194A43AC(a1, a3);
  int v19 = *(unsigned __int8 *)(a1 + 20);
  if (v19 == 2)
  {
    if (*(unsigned char *)(a2 + 84)) {
      sub_2194A4614(a1, a3);
    }
    if (*(unsigned char *)(a2 + 85)) {
      sub_2194A5254(a1, a3);
    }
    sub_2194A5A94(a1, a3);
    sub_2194A5BA4(a1, a3);
    if (*(unsigned char *)(a1 + 20) != 2) {
      sub_2195078C4();
    }
    uint64_t v20 = *(void *)(a1 + 472);
    if (*(_DWORD *)(v20 + 8) <= 1u) {
      sub_219507854();
    }
    uint64_t v21 = *(unsigned int *)(v20 + 40);
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 104))(a3, 11, 0);
    if (*(unsigned char *)v22)
    {
      *(void *)(a1 + 272) = v20 + v21 + *(unsigned int *)(v22 + 16);
      *(_DWORD *)(a1 + 264) = *(_DWORD *)(*(void *)(a1 + 296) + 96);
    }
    if (*(unsigned char *)(a1 + 20) != 2) {
      sub_21950788C();
    }
    uint64_t v23 = *(void *)(a1 + 472);
    if (*(_DWORD *)(v23 + 8) <= 1u) {
      sub_219507854();
    }
    uint64_t v24 = *(unsigned int *)(v23 + 40);
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 104))(a3, 10, 0);
    if (*(unsigned char *)v25)
    {
      *(void *)(a1 + 256) = v23 + v24 + *(unsigned int *)(v25 + 16);
      *(_DWORD *)(a1 + 248) = *(_DWORD *)(*(void *)(a1 + 296) + 92);
    }
    if (*(unsigned __int8 *)(a2 + 153) | *(unsigned __int8 *)(a2 + 92))
    {
      sub_2194A5CB4(a1, a3);
      if (*(unsigned char *)(a2 + 92))
      {
        sub_2194A5D5C(a1, a3);
        uint64_t v26 = *(void *)(a1 + 584);
        if (!v26) {
          uint64_t v26 = *(void *)(a1 + 472);
        }
        if (*(_DWORD *)(v26 + 8) <= 2u) {
          sub_21950781C();
        }
        uint64_t v27 = v26 + *(unsigned int *)(v26 + 48);
        *(_DWORD *)(a1 + 352) = 576;
        unsigned int v28 = ((8 * *(_DWORD *)(a1 + 16) + 63) & 0xFFFFFFC0) + 576;
        *(_DWORD *)(a1 + 368) = v28;
        *(void *)(a1 + 360) = v27 + 576;
        *(void *)(a1 + 376) = v27 + (v28 & 0xFFFFFFC0);
      }
    }
  }
  else if (v19 == 1)
  {
    sub_2194A4614(a1, a3);
    sub_2194A5254(a1, a3);
    sub_2194A5838(a1, a3);
  }
  sub_2194A5E04(a1);
  sub_2194A5EDC(a1, a3);
}

void sub_2194A43AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 472);
  if (*(_DWORD *)(v2 + 8) <= 1u) {
    sub_219507854();
  }
  uint64_t v5 = v2 + *(unsigned int *)(v2 + 40);
  int v6 = *(unsigned __int8 *)(a1 + 20);
  if (v6 == 2)
  {
    BOOL v12 = (void *)(a1 + 296);
    uint64_t v14 = *(void *)(a1 + 296);
    uint64_t v13 = *(void *)(a1 + 304);
    unint64_t v15 = 0xF128CFC4A33F128DLL * ((v13 - v14) >> 3);
    if (v13 == v14)
    {
      sub_2194A8960((uint64_t *)(a1 + 296), 1 - v15);
    }
    else if (v15 >= 2)
    {
      uint64_t v16 = v14 + 552;
      if (v13 != v14 + 552)
      {
        do
        {
          uint64_t v17 = v13 - 552;
          sub_21949AABC(v13 - 312);
          uint64_t v13 = v17;
        }
        while (v17 != v16);
      }
      *(void *)(a1 + 304) = v16;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 104))(a2, 5, 0);
    if (*(unsigned char *)v23) {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)a2 + 80))(a2, v5 + *(unsigned int *)(v23 + 16), *v12);
    }
    kdebug_trace();
  }
  else if (v6 == 1)
  {
    int8x8_t v7 = (void *)(a1 + 296);
    unint64_t v8 = *(unsigned int *)(a1 + 12);
    uint64_t v10 = *(void *)(a1 + 296);
    uint64_t v9 = *(void *)(a1 + 304);
    unint64_t v11 = 0xF128CFC4A33F128DLL * ((v9 - v10) >> 3);
    if (v8 <= v11)
    {
      if (v8 < v11)
      {
        uint64_t v18 = v10 + 552 * v8;
        if (v9 != v18)
        {
          do
          {
            uint64_t v19 = v9 - 552;
            sub_21949AABC(v9 - 312);
            uint64_t v9 = v19;
          }
          while (v19 != v18);
        }
        *(void *)(a1 + 304) = v18;
      }
    }
    else
    {
      sub_2194A8960((uint64_t *)(a1 + 296), v8 - v11);
    }
    if (*(_DWORD *)(a1 + 12))
    {
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      do
      {
        uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 104))(a2, 5, (unsigned __int16)v21);
        if (*(unsigned char *)v22) {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v5 + *(unsigned int *)(v22 + 16), *v7 + v20);
        }
        ++v21;
        v20 += 552;
      }
      while (v21 < *(unsigned int *)(a1 + 12));
    }
  }
}

void sub_2194A4614(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 472);
  if (*(_DWORD *)(v2 + 8) <= 1u) {
    sub_219507854();
  }
  uint64_t v5 = *(unsigned int *)(v2 + 40);
  BOOL v81 = (void **)(a1 + 24);
  sub_2194A66EC((char **)(a1 + 24), (2 * *(_DWORD *)(a1 + 12)));
  sub_2194A66EC((char **)(a1 + 48), *(unsigned int *)(a1 + 12));
  if (*(_DWORD *)(a1 + 12))
  {
    unsigned int v6 = 0;
    uint64_t v7 = v2 + v5;
    int64x2_t v80 = vdupq_n_s64(1uLL);
    while (1)
    {
      int v8 = *(unsigned __int8 *)(a1 + 20);
      if (v8 != 2) {
        break;
      }
      uint64_t v14 = (unsigned char *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 104))(a2, 0, (unsigned __int16)v6);
      if (*v14)
      {
        unint64_t v15 = v14;
        unsigned int v16 = sub_2194E2288(*(_DWORD *)a1, v6);
        uint64_t v17 = v7 + *((unsigned int *)v15 + 4);
        uint64_t v18 = *(std::__shared_weak_count **)(a1 + 496);
        uint64_t v88 = v17;
        uint64_t v89 = v18;
        if (v18)
        {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v19 = *((void *)v15 + 1);
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          uint64_t v19 = *((void *)v15 + 1);
        }
        v82[0] = 0;
        *(_OWORD *)&v82[8] = xmmword_21950C4E0;
        uint64_t v29 = v16;
        v30.i64[0] = v19;
        v30.i64[1] = HIDWORD(v19);
        *(void *)&v82[24] = v16;
        int8x16_t v83 = vextq_s8(v30, v30, 8uLL);
        int64x2_t v84 = v80;
        *(void *)&long long v85 = v17;
        *((void *)&v85 + 1) = v18;
        long long v86 = 0uLL;
        LOBYTE(v87) = 0;
        BYTE8(v87) = 0;
        BOOL v31 = *(_OWORD **)(a1 + 32);
        if ((unint64_t)v31 >= *(void *)(a1 + 40))
        {
          unint64_t v36 = sub_2194A8724(v81, (uint64_t)v82);
          uint8x8_t v37 = (std::__shared_weak_count *)*((void *)&v86 + 1);
          *(void *)(a1 + 32) = v36;
          if (!v37 || atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            int8x8_t v35 = (std::__shared_weak_count *)*((void *)&v85 + 1);
            if (!*((void *)&v85 + 1)) {
              goto LABEL_34;
            }
            goto LABEL_32;
          }
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
          int8x8_t v35 = (std::__shared_weak_count *)*((void *)&v85 + 1);
          if (*((void *)&v85 + 1)) {
            goto LABEL_32;
          }
        }
        else
        {
          long long v32 = *(_OWORD *)v82;
          long long v33 = *(_OWORD *)&v82[16];
          int64x2_t v34 = v84;
          v31[2] = v83;
          v31[3] = v34;
          *BOOL v31 = v32;
          v31[1] = v33;
          v31[4] = v85;
          long long v85 = 0uLL;
          v31[5] = v86;
          long long v86 = 0uLL;
          v31[6] = v87;
          *(void *)(a1 + 32) = v31 + 7;
          int8x8_t v35 = (std::__shared_weak_count *)*((void *)&v85 + 1);
          if (!*((void *)&v85 + 1)) {
            goto LABEL_34;
          }
LABEL_32:
          if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
LABEL_34:
        uint64_t v38 = *((unsigned int *)v15 + 4);
        unint64_t v39 = *(std::__shared_weak_count **)(a1 + 496);
        if (v39) {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v40 = v89;
        uint64_t v88 = v2 + v5 + 1 + v38;
        uint64_t v89 = v39;
        if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
          uint64_t v42 = *((unsigned int *)v15 + 2);
          uint64_t v41 = *((unsigned int *)v15 + 3);
          uint64_t v44 = v88;
          char v43 = v89;
          if (v89) {
LABEL_39:
          }
            atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          uint64_t v42 = *((unsigned int *)v15 + 2);
          uint64_t v41 = *((unsigned int *)v15 + 3);
          uint64_t v44 = v88;
          char v43 = v89;
          if (v89) {
            goto LABEL_39;
          }
        }
        v82[0] = 0;
        *(_OWORD *)&v82[8] = xmmword_21950C4E0;
        *(void *)&v82[24] = v29;
        v83.i64[0] = v41;
        v83.i64[1] = v42;
        int64x2_t v84 = vdupq_n_s64(1uLL);
        *(void *)&long long v85 = v44;
        *((void *)&v85 + 1) = v43;
        long long v86 = 0uLL;
        LOBYTE(v87) = 0;
        BYTE8(v87) = 0;
        uint64_t v45 = *(_OWORD **)(a1 + 32);
        if ((unint64_t)v45 >= *(void *)(a1 + 40))
        {
          uint64_t v50 = sub_2194A8724(v81, (uint64_t)v82);
          uint64_t v7 = v2 + v5;
          uint64_t v51 = (std::__shared_weak_count *)*((void *)&v86 + 1);
          *(void *)(a1 + 32) = v50;
          if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
            uint64_t v49 = (std::__shared_weak_count *)*((void *)&v85 + 1);
            if (!*((void *)&v85 + 1)) {
              goto LABEL_79;
            }
          }
          else
          {
            uint64_t v49 = (std::__shared_weak_count *)*((void *)&v85 + 1);
            if (!*((void *)&v85 + 1)) {
              goto LABEL_79;
            }
          }
        }
        else
        {
          long long v46 = *(_OWORD *)v82;
          long long v47 = *(_OWORD *)&v82[16];
          int64x2_t v48 = v84;
          void v45[2] = v83;
          v45[3] = v48;
          *uint64_t v45 = v46;
          v45[1] = v47;
          v45[4] = v85;
          long long v85 = 0uLL;
          v45[5] = v86;
          long long v86 = 0uLL;
          v45[6] = v87;
          *(void *)(a1 + 32) = v45 + 7;
          uint64_t v7 = v2 + v5;
          uint64_t v49 = (std::__shared_weak_count *)*((void *)&v85 + 1);
          if (!*((void *)&v85 + 1)) {
            goto LABEL_79;
          }
        }
        if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
        goto LABEL_79;
      }
LABEL_4:
      if (++v6 >= *(_DWORD *)(a1 + 12)) {
        return;
      }
    }
    if (v8 != 1) {
      goto LABEL_4;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 104))(a2, 0, (unsigned __int16)v6);
    if (!*(unsigned char *)v9)
    {
LABEL_49:
      uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 104))(a2, 1, (unsigned __int16)v6);
      if (!*(unsigned char *)v52) {
        goto LABEL_66;
      }
      uint64_t v53 = v7 + *(unsigned int *)(v52 + 16);
      uint64_t v54 = *(std::__shared_weak_count **)(a1 + 496);
      uint64_t v88 = v53;
      uint64_t v89 = v54;
      if (v54)
      {
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
        unsigned int v55 = *(_DWORD *)a1;
        uint64_t v56 = *(void *)(v52 + 8);
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        unsigned int v55 = *(_DWORD *)a1;
        uint64_t v56 = *(void *)(v52 + 8);
      }
      v57.i64[0] = v56;
      v57.i64[1] = HIDWORD(v56);
      v82[0] = 0;
      *(_OWORD *)&v82[8] = xmmword_21950C4E0;
      *(void *)&v82[24] = v55 >> v6;
      int8x16_t v83 = vextq_s8(v57, v57, 8uLL);
      int64x2_t v84 = vdupq_n_s64(1uLL);
      *(void *)&long long v85 = v53;
      *((void *)&v85 + 1) = v54;
      long long v86 = 0uLL;
      LOBYTE(v87) = 0;
      BYTE8(v87) = 0;
      unint64_t v58 = *(_OWORD **)(a1 + 32);
      if ((unint64_t)v58 >= *(void *)(a1 + 40))
      {
        unint64_t v63 = sub_2194A8724(v81, (uint64_t)v82);
        uint64_t v64 = (std::__shared_weak_count *)*((void *)&v86 + 1);
        *(void *)(a1 + 32) = v63;
        if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
          unint64_t v62 = (std::__shared_weak_count *)*((void *)&v85 + 1);
          if (!*((void *)&v85 + 1)) {
            goto LABEL_61;
          }
        }
        else
        {
          unint64_t v62 = (std::__shared_weak_count *)*((void *)&v85 + 1);
          if (!*((void *)&v85 + 1))
          {
LABEL_61:
            int v65 = v89;
            if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
LABEL_66:
            uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 104))(a2, 2, (unsigned __int16)v6);
            if (*(unsigned char *)v66)
            {
              uint64_t v67 = v7 + *(unsigned int *)(v66 + 16);
              uint64_t v68 = *(std::__shared_weak_count **)(a1 + 496);
              uint64_t v88 = v67;
              uint64_t v89 = v68;
              if (v68) {
                atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              unsigned int v69 = *(_DWORD *)a1;
              uint64_t v70 = *(void *)(v66 + 8);
              if (v68) {
                atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v71.i64[0] = v70;
              v71.i64[1] = HIDWORD(v70);
              v82[0] = 0;
              *(_OWORD *)&v82[8] = xmmword_21950C4E0;
              *(void *)&v82[24] = 2 * (v69 >> (v6 + 1));
              int8x16_t v83 = vextq_s8(v71, v71, 8uLL);
              int64x2_t v84 = vdupq_n_s64(1uLL);
              *(void *)&long long v85 = v67;
              *((void *)&v85 + 1) = v68;
              long long v86 = 0uLL;
              LOBYTE(v87) = 0;
              BYTE8(v87) = 0;
              int v72 = *(_OWORD **)(a1 + 56);
              if ((unint64_t)v72 < *(void *)(a1 + 64))
              {
                long long v73 = *(_OWORD *)v82;
                long long v74 = *(_OWORD *)&v82[16];
                int64x2_t v75 = v84;
                v72[2] = v83;
                v72[3] = v75;
                _OWORD *v72 = v73;
                v72[1] = v74;
                v72[4] = v85;
                long long v85 = 0uLL;
                v72[5] = v86;
                long long v86 = 0uLL;
                v72[6] = v87;
                *(void *)(a1 + 56) = v72 + 7;
                uint64_t v76 = (std::__shared_weak_count *)*((void *)&v85 + 1);
                if (!*((void *)&v85 + 1)) {
                  goto LABEL_79;
                }
LABEL_77:
                if (!atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
                goto LABEL_79;
              }
              int v77 = sub_2194A8724((void **)(a1 + 48), (uint64_t)v82);
              int v78 = (std::__shared_weak_count *)*((void *)&v86 + 1);
              *(void *)(a1 + 56) = v77;
              if (!v78 || atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                uint64_t v76 = (std::__shared_weak_count *)*((void *)&v85 + 1);
                if (!*((void *)&v85 + 1)) {
                  goto LABEL_79;
                }
                goto LABEL_77;
              }
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
              uint64_t v76 = (std::__shared_weak_count *)*((void *)&v85 + 1);
              if (*((void *)&v85 + 1)) {
                goto LABEL_77;
              }
LABEL_79:
              uint64_t v79 = v89;
              if (v89)
              {
                if (!atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                  std::__shared_weak_count::__release_weak(v79);
                }
              }
              goto LABEL_4;
            }
            goto LABEL_4;
          }
        }
      }
      else
      {
        long long v59 = *(_OWORD *)v82;
        long long v60 = *(_OWORD *)&v82[16];
        int64x2_t v61 = v84;
        v58[2] = v83;
        v58[3] = v61;
        *unint64_t v58 = v59;
        v58[1] = v60;
        v58[4] = v85;
        long long v85 = 0uLL;
        void v58[5] = v86;
        long long v86 = 0uLL;
        v58[6] = v87;
        *(void *)(a1 + 32) = v58 + 7;
        unint64_t v62 = (std::__shared_weak_count *)*((void *)&v85 + 1);
        if (!*((void *)&v85 + 1)) {
          goto LABEL_61;
        }
      }
      if (!atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
      goto LABEL_61;
    }
    uint64_t v10 = v7 + *(unsigned int *)(v9 + 16);
    unint64_t v11 = *(std::__shared_weak_count **)(a1 + 496);
    uint64_t v88 = v10;
    uint64_t v89 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unsigned int v12 = *(_DWORD *)a1;
      uint64_t v13 = *(void *)(v9 + 8);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      unsigned int v12 = *(_DWORD *)a1;
      uint64_t v13 = *(void *)(v9 + 8);
    }
    v20.i64[0] = v13;
    v20.i64[1] = HIDWORD(v13);
    v82[0] = 0;
    *(_OWORD *)&v82[8] = xmmword_21950C4E0;
    *(void *)&v82[24] = v12 >> v6;
    int8x16_t v83 = vextq_s8(v20, v20, 8uLL);
    int64x2_t v84 = vdupq_n_s64(1uLL);
    *(void *)&long long v85 = v10;
    *((void *)&v85 + 1) = v11;
    long long v86 = 0uLL;
    LOBYTE(v87) = 0;
    BYTE8(v87) = 0;
    unint64_t v21 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v21 >= *(void *)(a1 + 40))
    {
      uint64_t v26 = sub_2194A8724(v81, (uint64_t)v82);
      uint64_t v27 = (std::__shared_weak_count *)*((void *)&v86 + 1);
      *(void *)(a1 + 32) = v26;
      if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
        uint64_t v25 = (std::__shared_weak_count *)*((void *)&v85 + 1);
        if (!*((void *)&v85 + 1)) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v25 = (std::__shared_weak_count *)*((void *)&v85 + 1);
        if (!*((void *)&v85 + 1))
        {
LABEL_22:
          unsigned int v28 = v89;
          if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          goto LABEL_49;
        }
      }
    }
    else
    {
      long long v22 = *(_OWORD *)v82;
      long long v23 = *(_OWORD *)&v82[16];
      int64x2_t v24 = v84;
      v21[2] = v83;
      v21[3] = v24;
      *unint64_t v21 = v22;
      v21[1] = v23;
      v21[4] = v85;
      long long v85 = 0uLL;
      v21[5] = v86;
      long long v86 = 0uLL;
      v21[6] = v87;
      *(void *)(a1 + 32) = v21 + 7;
      uint64_t v25 = (std::__shared_weak_count *)*((void *)&v85 + 1);
      if (!*((void *)&v85 + 1)) {
        goto LABEL_22;
      }
    }
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    goto LABEL_22;
  }
}

void sub_2194A51A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_2194A65B0((uint64_t)&a30);
  sub_21947E0B8((uint64_t)&a24);
  sub_21947E0B8(v30 - 104);
  _Unwind_Resume(a1);
}

void sub_2194A51C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_2194A65B0((uint64_t)&a30);
  sub_21947E0B8((uint64_t)&a26);
  sub_21947E0B8(v30 - 104);
  _Unwind_Resume(a1);
}

void sub_2194A51E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_2194A65B0((uint64_t)&a30);
  sub_21947E0B8((uint64_t)&a20);
  sub_21947E0B8(v30 - 104);
  _Unwind_Resume(a1);
}

void sub_2194A520C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_2194A65B0((uint64_t)&a30);
  sub_21947E0B8((uint64_t)&a22);
  sub_21947E0B8(v30 - 104);
  _Unwind_Resume(a1);
}

void sub_2194A5230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  sub_2194A65B0((uint64_t)&a30);
  sub_21947E0B8((uint64_t)&a28);
  sub_21947E0B8(v30 - 104);
  _Unwind_Resume(a1);
}

void sub_2194A5254(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 472);
  if (*(_DWORD *)(v2 + 8) <= 1u) {
    sub_219507854();
  }
  uint64_t v5 = *(unsigned int *)(v2 + 40);
  uint64_t v41 = (void **)(a1 + 72);
  sub_2194A66EC((char **)(a1 + 72), (2 * *(_DWORD *)(a1 + 12)));
  if (*(_DWORD *)(a1 + 12))
  {
    unsigned int v6 = 0;
    uint64_t v40 = v2 + v5;
    uint64_t v38 = v2 + v5 + 2;
    int64x2_t v39 = vdupq_n_s64(2uLL);
    while (1)
    {
      uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 104))(a2, 3, (unsigned __int16)v6);
      if (*(unsigned char *)v7) {
        break;
      }
LABEL_4:
      if (++v6 >= *(_DWORD *)(a1 + 12)) {
        return;
      }
    }
    int v8 = v7;
    unsigned int v9 = *(_DWORD *)a1;
    if (*(unsigned char *)(a1 + 20) == 1)
    {
      unsigned int v10 = v9 >> v6;
      uint64_t v11 = v40 + v8[4];
      unsigned int v12 = *(std::__shared_weak_count **)(a1 + 496);
      uint64_t v48 = v11;
      uint64_t v49 = v12;
      if (!v12)
      {
LABEL_11:
        unint64_t v13 = v8[3];
        if (v13)
        {
          sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 312, "lp01_info.stride % sizeof(LaplacianDataType) == 0 && \"Width step is not a multiple of scalar data type\"", (void (*)(void *))sub_2194FF9C0);
          abort();
        }
        uint64_t v14 = v8[2];
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v42[0] = 0;
        *(_OWORD *)&v42[8] = xmmword_21950C4E0;
        uint64_t v15 = v10;
        *(void *)&v42[24] = v10;
        *(void *)&long long v43 = v13 >> 1;
        *((void *)&v43 + 1) = v14;
        int64x2_t v44 = v39;
        *(void *)&long long v45 = v11;
        *((void *)&v45 + 1) = v12;
        long long v46 = 0uLL;
        LOBYTE(v47) = 0;
        BYTE8(v47) = 0;
        unsigned int v16 = *(_OWORD **)(a1 + 80);
        if ((unint64_t)v16 >= *(void *)(a1 + 88))
        {
          unint64_t v21 = sub_2194A8724(v41, (uint64_t)v42);
          long long v22 = (std::__shared_weak_count *)*((void *)&v46 + 1);
          *(void *)(a1 + 80) = v21;
          if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
            int8x16_t v20 = (std::__shared_weak_count *)*((void *)&v45 + 1);
            if (!*((void *)&v45 + 1)) {
              goto LABEL_22;
            }
          }
          else
          {
            int8x16_t v20 = (std::__shared_weak_count *)*((void *)&v45 + 1);
            if (!*((void *)&v45 + 1)) {
              goto LABEL_22;
            }
          }
        }
        else
        {
          long long v17 = *(_OWORD *)v42;
          long long v18 = *(_OWORD *)&v42[16];
          int64x2_t v19 = v44;
          v16[2] = v43;
          v16[3] = v19;
          *unsigned int v16 = v17;
          v16[1] = v18;
          v16[4] = v45;
          long long v45 = 0uLL;
          v16[5] = v46;
          long long v46 = 0uLL;
          v16[6] = v47;
          *(void *)(a1 + 80) = v16 + 7;
          int8x16_t v20 = (std::__shared_weak_count *)*((void *)&v45 + 1);
          if (!*((void *)&v45 + 1)) {
            goto LABEL_22;
          }
        }
        if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
LABEL_22:
        uint64_t v23 = v8[4];
        int64x2_t v24 = *(std::__shared_weak_count **)(a1 + 496);
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v25 = v49;
        uint64_t v48 = v38 + v23;
        uint64_t v49 = v24;
        if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
          uint64_t v26 = v8[2];
          unint64_t v27 = v8[3];
          uint64_t v29 = v48;
          unsigned int v28 = v49;
          if (!v49)
          {
LABEL_28:
            v42[0] = 0;
            *(_OWORD *)&v42[8] = xmmword_21950C4E0;
            *(void *)&v42[24] = v15;
            *(void *)&long long v43 = v27 >> 1;
            *((void *)&v43 + 1) = v26;
            int64x2_t v44 = vdupq_n_s64(2uLL);
            *(void *)&long long v45 = v29;
            *((void *)&v45 + 1) = v28;
            long long v46 = 0uLL;
            LOBYTE(v47) = 0;
            BYTE8(v47) = 0;
            uint64_t v30 = *(_OWORD **)(a1 + 80);
            if ((unint64_t)v30 >= *(void *)(a1 + 88))
            {
              int8x8_t v35 = sub_2194A8724(v41, (uint64_t)v42);
              unint64_t v36 = (std::__shared_weak_count *)*((void *)&v46 + 1);
              *(void *)(a1 + 80) = v35;
              if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
                int64x2_t v34 = (std::__shared_weak_count *)*((void *)&v45 + 1);
                if (!*((void *)&v45 + 1))
                {
LABEL_36:
                  uint8x8_t v37 = v49;
                  if (v49)
                  {
                    if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                      std::__shared_weak_count::__release_weak(v37);
                    }
                  }
                  goto LABEL_4;
                }
              }
              else
              {
                int64x2_t v34 = (std::__shared_weak_count *)*((void *)&v45 + 1);
                if (!*((void *)&v45 + 1)) {
                  goto LABEL_36;
                }
              }
            }
            else
            {
              long long v31 = *(_OWORD *)v42;
              long long v32 = *(_OWORD *)&v42[16];
              int64x2_t v33 = v44;
              v30[2] = v43;
              v30[3] = v33;
              *uint64_t v30 = v31;
              v30[1] = v32;
              v30[4] = v45;
              long long v45 = 0uLL;
              v30[5] = v46;
              long long v46 = 0uLL;
              v30[6] = v47;
              *(void *)(a1 + 80) = v30 + 7;
              int64x2_t v34 = (std::__shared_weak_count *)*((void *)&v45 + 1);
              if (!*((void *)&v45 + 1)) {
                goto LABEL_36;
              }
            }
            if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
            goto LABEL_36;
          }
        }
        else
        {
          uint64_t v26 = v8[2];
          unint64_t v27 = v8[3];
          uint64_t v29 = v48;
          unsigned int v28 = v49;
          if (!v49) {
            goto LABEL_28;
          }
        }
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_28;
      }
    }
    else
    {
      unsigned int v10 = sub_2194E2288(v9, v6);
      uint64_t v11 = v40 + v8[4];
      unsigned int v12 = *(std::__shared_weak_count **)(a1 + 496);
      uint64_t v48 = v11;
      uint64_t v49 = v12;
      if (!v12) {
        goto LABEL_11;
      }
    }
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_11;
  }
}

void sub_2194A57EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  sub_2194A65B0((uint64_t)va1);
  sub_21947E0B8((uint64_t)va);
  sub_21947E0B8(v10 - 104);
  _Unwind_Resume(a1);
}

void sub_2194A5824(_Unwind_Exception *a1)
{
  sub_21947E0B8(v1 - 104);
  _Unwind_Resume(a1);
}

void sub_2194A5838(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20) != 1) {
    sub_2195078FC();
  }
  uint64_t v3 = *(void *)(a1 + 472);
  if (*(_DWORD *)(v3 + 8) <= 1u) {
    sub_219507854();
  }
  uint64_t v5 = *(unsigned int *)(v3 + 40);
  unsigned int v6 = *(unsigned char **)(a1 + 96);
  unint64_t v7 = *(unsigned int *)(a1 + 12);
  int64x2_t v33 = (void **)(a1 + 96);
  if (v7 > (uint64_t)(*(void *)(a1 + 112) - (void)v6) >> 4)
  {
    int v8 = *(unsigned char **)(a1 + 104);
    unsigned int v9 = (char *)operator new(16 * v7);
    uint64_t v10 = &v9[(v8 - v6) & 0xFFFFFFFFFFFFFFF0];
    uint64_t v11 = v10;
    if (v8 != v6)
    {
      uint64_t v12 = &v9[(v8 - v6) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        uint64_t v11 = v12 - 16;
        *((_OWORD *)v12 - 1) = *((_OWORD *)v8 - 1);
        v8 -= 16;
        v12 -= 16;
      }
      while (v8 != v6);
    }
    *(void *)(a1 + 96) = v11;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v9[16 * v7];
    if (v6)
    {
      operator delete(v6);
      LODWORD(v7) = *(_DWORD *)(a1 + 12);
    }
  }
  if (v7)
  {
    unint64_t v13 = 0;
    uint64_t v14 = v3 + v5;
    uint64_t v32 = a2;
    do
    {
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 104))(a2, 4, (unsigned __int16)v13);
      if (*(unsigned char *)v16)
      {
        uint64_t v17 = v14 + *(unsigned int *)(v16 + 16);
        uint64_t v18 = *(void *)(a1 + 296) + 552 * v13;
        int v19 = *(_DWORD *)(v18 + 92);
        int v20 = *(_DWORD *)(v18 + 52);
        long long v22 = *(char **)(a1 + 104);
        unint64_t v21 = *(void *)(a1 + 112);
        if ((unint64_t)v22 < v21)
        {
          *(_DWORD *)long long v22 = v19;
          *((_DWORD *)v22 + 1) = v20;
          uint64_t v15 = v22 + 16;
          *((void *)v22 + 1) = v17;
        }
        else
        {
          uint64_t v23 = v14;
          int64x2_t v24 = (char *)*v33;
          uint64_t v25 = (v22 - (unsigned char *)*v33) >> 4;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 60) {
            sub_219486AE4();
          }
          uint64_t v27 = v21 - (void)v24;
          if (v27 >> 3 > v26) {
            unint64_t v26 = v27 >> 3;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            if (v28 >> 60) {
              sub_219486AFC();
            }
            uint64_t v29 = (char *)operator new(16 * v28);
          }
          else
          {
            uint64_t v29 = 0;
          }
          uint64_t v30 = &v29[16 * v25];
          *(_DWORD *)uint64_t v30 = v19;
          *((_DWORD *)v30 + 1) = v20;
          *((void *)v30 + 1) = v17;
          long long v31 = v30;
          uint64_t v14 = v23;
          if (v22 != v24)
          {
            do
            {
              *((_OWORD *)v31 - 1) = *((_OWORD *)v22 - 1);
              v31 -= 16;
              v22 -= 16;
            }
            while (v22 != v24);
            long long v22 = (char *)*v33;
          }
          a2 = v32;
          uint64_t v15 = v30 + 16;
          *(void *)(a1 + 96) = v31;
          *(void *)(a1 + 104) = v30 + 16;
          *(void *)(a1 + 112) = &v29[16 * v28];
          if (v22) {
            operator delete(v22);
          }
        }
        *(void *)(a1 + 104) = v15;
      }
      ++v13;
    }
    while (v13 < *(unsigned int *)(a1 + 12));
  }
}

uint64_t sub_2194A5A94(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20) != 2) {
    sub_219507934();
  }
  uint64_t v3 = *(void *)(a1 + 472);
  if (*(_DWORD *)(v3 + 8) <= 1u) {
    sub_219507854();
  }
  uint64_t v5 = v3 + *(unsigned int *)(v3 + 40);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 104))(a2, 6, 0);
  if (*(unsigned char *)v6)
  {
    uint64_t v7 = *(unsigned int *)(v6 + 16);
    *(void *)(a1 + 168) = v5 + v7;
    int v8 = *(_DWORD *)(v6 + 8) * *(_DWORD *)(v6 + 12);
    *(_DWORD *)(a1 + 152) = v7;
    *(_DWORD *)(a1 + 156) = v8;
    *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(void *)(a1 + 296) + 92);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 104))(a2, 7, 0);
  if (*(unsigned char *)result)
  {
    uint64_t v10 = *(unsigned int *)(result + 16);
    *(void *)(a1 + 192) = v5 + v10;
    int v11 = *(_DWORD *)(result + 8) * *(_DWORD *)(result + 12);
    *(_DWORD *)(a1 + 176) = v10;
    *(_DWORD *)(a1 + 180) = v11;
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(void *)(a1 + 296) + 96);
  }
  return result;
}

uint64_t sub_2194A5BA4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20) != 2) {
    sub_21950796C();
  }
  uint64_t v3 = *(void *)(a1 + 472);
  if (*(_DWORD *)(v3 + 8) <= 1u) {
    sub_219507854();
  }
  uint64_t v5 = v3 + *(unsigned int *)(v3 + 40);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 104))(a2, 8, 0);
  if (*(unsigned char *)v6)
  {
    uint64_t v7 = *(unsigned int *)(v6 + 16);
    *(void *)(a1 + 216) = v5 + v7;
    int v8 = *(_DWORD *)(v6 + 8) * *(_DWORD *)(v6 + 12);
    *(_DWORD *)(a1 + 200) = v7;
    *(_DWORD *)(a1 + 204) = v8;
    *(_DWORD *)(a1 + 208) = *(_DWORD *)(*(void *)(a1 + 296) + 100);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 104))(a2, 9, 0);
  if (*(unsigned char *)result)
  {
    uint64_t v10 = *(unsigned int *)(result + 16);
    *(void *)(a1 + 240) = v5 + v10;
    int v11 = *(_DWORD *)(result + 8) * *(_DWORD *)(result + 12);
    *(_DWORD *)(a1 + 224) = v10;
    *(_DWORD *)(a1 + 228) = v11;
    *(_DWORD *)(a1 + 232) = *(_DWORD *)(*(void *)(a1 + 296) + 104);
  }
  return result;
}

uint64_t sub_2194A5CB4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20) != 2) {
    sub_2195079A4();
  }
  uint64_t v3 = *(void *)(a1 + 472);
  if (*(_DWORD *)(v3 + 8) <= 1u) {
    sub_219507854();
  }
  uint64_t v4 = *(unsigned int *)(v3 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 104))(a2, 12, 0);
  if (*(unsigned char *)result)
  {
    uint64_t v6 = *(unsigned int *)(result + 16);
    *(void *)(a1 + 328) = v3 + v4 + v6;
    *(_DWORD *)(a1 + 320) = v6;
    *(_DWORD *)(a1 + 324) = *(_DWORD *)(result + 8) * *(_DWORD *)(result + 12);
  }
  return result;
}

uint64_t sub_2194A5D5C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20) != 2) {
    sub_2195079DC();
  }
  uint64_t v3 = *(void *)(a1 + 472);
  if (*(_DWORD *)(v3 + 8) <= 1u) {
    sub_219507854();
  }
  uint64_t v4 = *(unsigned int *)(v3 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 104))(a2, 13, 0);
  if (*(unsigned char *)result)
  {
    uint64_t v6 = *(unsigned int *)(result + 16);
    *(void *)(a1 + 344) = v3 + v4 + v6;
    *(_DWORD *)(a1 + 336) = v6;
    *(_DWORD *)(a1 + 340) = *(_DWORD *)(result + 8) * *(_DWORD *)(result + 12);
  }
  return result;
}

uint64_t sub_2194A5E04(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 20);
  if (v1 == 1)
  {
    uint64_t v6 = *(void *)(result + 584);
    if (!v6) {
      uint64_t v6 = *(void *)(result + 472);
    }
    if (*(_DWORD *)(v6 + 8) <= 2u) {
      sub_21950781C();
    }
    uint64_t v3 = v6 + *(unsigned int *)(v6 + 48);
    unsigned int v4 = 576;
    *(_DWORD *)(result + 120) = 576;
    unsigned int v5 = ((24 * *(_DWORD *)(result + 16) + 63) & 0xFFFFFFC0) + 576;
    goto LABEL_11;
  }
  if (v1 == 2)
  {
    uint64_t v2 = *(void *)(result + 584);
    if (!v2) {
      uint64_t v2 = *(void *)(result + 472);
    }
    if (*(_DWORD *)(v2 + 8) <= 1u) {
      sub_219507A14();
    }
    uint64_t v3 = v2 + *(unsigned int *)(v2 + 40);
    unsigned int v4 = *(_DWORD *)(result + 176);
    *(_DWORD *)(result + 120) = v4;
    unsigned int v5 = *(_DWORD *)(result + 152);
LABEL_11:
    *(_DWORD *)(result + 136) = v5;
    *(void *)(result + 128) = v3 + v4;
    *(void *)(result + 144) = v3 + v5;
    return result;
  }
  unsigned int v7 = *(_DWORD *)(result + 136);
  *(void *)(result + 128) = *(unsigned int *)(result + 120);
  *(void *)(result + 144) = v7;
  return result;
}

void sub_2194A5EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 584);
  if (!v4) {
    uint64_t v4 = *(void *)(a1 + 472);
  }
  if (*(_DWORD *)(v4 + 8) <= 2u) {
    sub_219507ABC();
  }
  unsigned int v5 = (void *)(v4 + *(unsigned int *)(v4 + 48));
  *(void *)(a1 + 400) = v5;
  bzero(v5, 0x240uLL);
  uint64_t v6 = *(void *)(a1 + 400);
  *(_WORD *)(v6 + 2) = 1;
  *(void *)(v6 + 20) = *(void *)a1;
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v6 + 12) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(v6 + 16) = v7;
  *(_WORD *)uint64_t v6 = *(_DWORD *)(a1 + 16);
  int v9 = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(v6 + 4) = 0;
  *(_DWORD *)(v6 + 8) = v9;
  *(void *)(v6 + 76) = v8;
  *(unsigned char *)(v6 + 84) = *(unsigned char *)(a1 + 20);
  int v10 = *(unsigned __int8 *)(a1 + 384);
  *(unsigned char *)(v6 + 85) = v10;
  if (v7)
  {
    if (v10)
    {
      unint64_t v11 = 0;
      do
      {
        int v12 = *(unsigned __int8 *)(a1 + 384);
        if (*(unsigned char *)(a1 + 384))
        {
          *(_DWORD *)(*(void *)(a1 + 400) + 4 * v11 + 28) = *(_DWORD *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 104))(a2, 0, (unsigned __int16)v11)+ 16);
          unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 104);
          if (*(unsigned char *)(a1 + 20) == 1) {
            int v12 = *(_DWORD *)(v13(a2, 1, (unsigned __int16)v11) + 16);
          }
          else {
            int v12 = *(_DWORD *)(v13(a2, 0, (unsigned __int16)v11) + 16) + 1;
          }
          uint64_t v6 = *(void *)(a1 + 400);
        }
        else
        {
          *(_DWORD *)(v6 + 4 * v11 + 28) = 0;
        }
        *(_DWORD *)(v6 + 4 * v11++ + 52) = v12;
      }
      while (v11 < *(unsigned int *)(a1 + 12));
    }
    else
    {
      unint64_t v14 = 0;
      do
      {
        uint64_t v15 = v6 + 4 * v14;
        *(_DWORD *)(v15 + 28) = 0;
        *(_DWORD *)(v15 + 52) = 0;
        ++v14;
      }
      while (v14 < *(unsigned int *)(a1 + 12));
    }
  }
  *(_WORD *)(v6 + 86) = *(_WORD *)(a1 + 389);
  int v16 = *(_DWORD *)(a1 + 352);
  *(_DWORD *)(v6 + 88) = 0;
  *(_DWORD *)(v6 + 92) = v16;
  *(_DWORD *)(v6 + 96) = *(_DWORD *)(a1 + 368);
  *(void *)&long long v17 = *(void *)(a1 + 320);
  *((void *)&v17 + 1) = *(void *)(a1 + 336);
  *(_OWORD *)(v6 + 100) = v17;
  uint64_t v18 = HIDWORD(*(void *)(a1 + 392));
  *(_DWORD *)(v6 + 116) = (unsigned __int16)*(void *)(a1 + 392);
  *(_DWORD *)(v6 + 120) = v18;
  char v19 = *(unsigned char *)(a1 + 391);
  if (v19) {
    char v19 = *(_DWORD *)a1 > 0x280u;
  }
  *(unsigned char *)(v6 + 124) = v19;
  unsigned int v20 = *(_DWORD *)(v6 + 76);
  if ((v20 & 0x3F) != 0) {
    sub_219507A84();
  }
  if (v20 < *(_DWORD *)(v6 + 20)) {
    sub_219507A4C();
  }
}

uint64_t sub_2194A60F8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(unsigned char *)(a1 + 384) = 0;
  *(void *)(a1 + 376) = 0;
  *(_WORD *)(a1 + 385) = 1;
  *(unsigned char *)(a1 + 387) = 1;
  int v12 = (_OWORD *)(a1 + 408);
  *(unsigned char *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 489) = 0u;
  unint64_t v13 = (_OWORD *)(a1 + 520);
  *(unsigned char *)(a1 + 520) = 0;
  *(unsigned char *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 601) = 0u;
  *(void *)(a1 + 396) = 0;
  *(void *)(a1 + 388) = 0;
  *(void *)(a1 + 401) = 0;
  sub_2194F35D8(&v34, *a2, 1);
  unint64_t v14 = (const void **)(a1 + 472);
  long long v15 = v35;
  _OWORD *v12 = v34;
  v12[1] = v15;
  long long v16 = v37;
  v12[2] = v36;
  v12[3] = v16;
  long long v17 = v38;
  long long v38 = 0uLL;
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 480);
  *(_OWORD *)(a1 + 472) = v17;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  long long v19 = v39;
  long long v39 = 0uLL;
  unsigned int v20 = *(std::__shared_weak_count **)(a1 + 496);
  *(_OWORD *)(a1 + 488) = v19;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  unint64_t v21 = (std::__shared_weak_count *)*((void *)&v39 + 1);
  *(void *)(a1 + 504) = v40;
  *(unsigned char *)(a1 + 512) = v41;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  long long v22 = (std::__shared_weak_count *)*((void *)&v38 + 1);
  if (*((void *)&v38 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (!a7) {
      goto LABEL_29;
    }
  }
  else if (!a7)
  {
    goto LABEL_29;
  }
  sub_2194F35D8(&v34, a7, 1);
  long long v23 = v35;
  *unint64_t v13 = v34;
  v13[1] = v23;
  long long v24 = v37;
  v13[2] = v36;
  void v13[3] = v24;
  long long v25 = v38;
  long long v38 = 0uLL;
  unint64_t v26 = *(std::__shared_weak_count **)(a1 + 592);
  *(_OWORD *)(a1 + 584) = v25;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  long long v27 = v39;
  long long v39 = 0uLL;
  unint64_t v28 = *(std::__shared_weak_count **)(a1 + 608);
  *(_OWORD *)(a1 + 600) = v27;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  uint64_t v29 = (std::__shared_weak_count *)*((void *)&v39 + 1);
  *(void *)(a1 + 616) = v40;
  *(unsigned char *)(a1 + 624) = v41;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  uint64_t v30 = (std::__shared_weak_count *)*((void *)&v38 + 1);
  if (*((void *)&v38 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  if (*(void *)(a1 + 584)) {
    long long v31 = *(void **)(a1 + 584);
  }
  else {
    long long v31 = (void *)*v14;
  }
  memcpy(v31, *v14, 8 * *((unsigned int *)*v14 + 2) + 32);
LABEL_29:
  sub_2194A3FF8(a1, a3, a4, a5, a6);
  return a1;
}

void sub_2194A6544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  sub_2194A65B0(v13);
  sub_2194A65B0(v12);
  sub_2194A6680((void **)(v11 + 296));
  long long v15 = *(void **)(v11 + 96);
  if (v15)
  {
    *(void *)(v11 + 104) = v15;
    operator delete(v15);
  }
  a11 = (void **)(v11 + 72);
  sub_21949AB60(&a11);
  a11 = (void **)(v11 + 48);
  sub_21949AB60(&a11);
  sub_21949AB60(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_2194A65B0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v3) {
      return a1;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v3) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void **sub_2194A6680(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unsigned int v5 = v3 - 552;
        sub_21949AABC((uint64_t)(v3 - 312));
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2194A66EC(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x24924924924924ALL) {
    sub_219486AE4();
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = 112 * a2;
  uint64_t v6 = (char *)operator new(112 * a2);
  int v7 = &v6[v5];
  unsigned int v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_18;
  }
  int v9 = &v6[v4 - v2];
  do
  {
    long long v10 = *((_OWORD *)v4 - 7);
    long long v11 = *((_OWORD *)v4 - 6);
    long long v12 = *((_OWORD *)v4 - 4);
    *((_OWORD *)v9 - 5) = *((_OWORD *)v4 - 5);
    *((_OWORD *)v9 - 4) = v12;
    *((_OWORD *)v9 - 7) = v10;
    *((_OWORD *)v9 - 6) = v11;
    *((_OWORD *)v9 - 3) = *((_OWORD *)v4 - 3);
    *((void *)v4 - 6) = 0;
    *((void *)v4 - 5) = 0;
    *((_OWORD *)v9 - 2) = *((_OWORD *)v4 - 2);
    *((void *)v4 - 4) = 0;
    *((void *)v4 - 3) = 0;
    *((_OWORD *)v9 - 1) = *((_OWORD *)v4 - 1);
    v9 -= 112;
    v4 -= 112;
  }
  while (v4 != v2);
  uint64_t v13 = *a1;
  uint64_t v2 = a1[1];
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v13)
  {
    while (1)
    {
      unint64_t v14 = (std::__shared_weak_count *)*((void *)v2 - 3);
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        long long v15 = (std::__shared_weak_count *)*((void *)v2 - 5);
        if (v15)
        {
LABEL_12:
          if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
      else
      {
        long long v15 = (std::__shared_weak_count *)*((void *)v2 - 5);
        if (v15) {
          goto LABEL_12;
        }
      }
      v2 -= 112;
      if (v2 == v13)
      {
        uint64_t v2 = v13;
        break;
      }
    }
  }
  if (v2)
  {
LABEL_18:
    operator delete(v2);
  }
}

__n128 sub_2194A68C4(uint64_t a1, char a2, uint64_t a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(a1 + 400);
  unsigned int v9 = *(_DWORD *)(v8 + 4);
  if (v9 >= *(_DWORD *)(a1 + 16)) {
    sub_219507B64();
  }
  if (*(_DWORD *)(v8 + 80)) {
    sub_219507B2C();
  }
  uint64_t v10 = *(void *)(a1 + 128);
  if (!v10 || !*(void *)(a1 + 144)) {
    sub_219507AF4();
  }
  uint64_t v11 = v10 + 24 * v9;
  *(float *)uint64_t v11 = a4;
  *(float *)(v11 + 4) = a5;
  *(float *)(v11 + 8) = a6;
  *(float *)(v11 + 12) = a7;
  *(unsigned char *)(v11 + 16) = a2;
  *(float *)(v11 + 20) = a8;
  unint64_t v12 = *(void *)(a1 + 144) + ((unint64_t)*(unsigned int *)(*(void *)(a1 + 400) + 4) << 6);
  __n128 result = *(__n128 *)a3;
  long long v14 = *(_OWORD *)(a3 + 16);
  long long v15 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v12 + 48) = v15;
  *(__n128 *)unint64_t v12 = result;
  *(_OWORD *)(v12 + 16) = v14;
  ++*(_DWORD *)(*(void *)(a1 + 400) + 4);
  return result;
}

uint64_t sub_2194A6958(uint64_t result, int a2, int a3)
{
  uint64_t v3 = *(void *)(result + 400);
  uint64_t v4 = *(unsigned int *)(v3 + 88);
  if (v4 >= *(_DWORD *)(result + 16)) {
    sub_219507B9C();
  }
  uint64_t v5 = (_DWORD *)(*(void *)(result + 360) + 8 * v4);
  _DWORD *v5 = a2;
  v5[1] = a3;
  ++*(_DWORD *)(v3 + 88);
  return result;
}

uint64_t sub_2194A699C(uint64_t result, int a2, unsigned int a3)
{
  unsigned int v3 = *(_DWORD *)(result + 16);
  if (*(_DWORD *)(result + 372) < v3)
  {
    BOOL v4 = v3 >= a3;
    BOOL v5 = v3 == a3;
  }
  else
  {
    BOOL v4 = 0;
    BOOL v5 = 0;
  }
  if (v5 || !v4) {
    sub_219507BD4();
  }
  *(_DWORD *)(*(void *)(result + 376) + 4 * a3) = a2;
  ++*(_DWORD *)(result + 372);
  return result;
}

unsigned __int8 *sub_2194A69DC(unsigned __int8 *result, uint64_t a2)
{
  int v2 = result[15] & 4;
  *(unsigned char *)a2 = v2;
  int v3 = v2 | (result[17] << 7);
  *(unsigned char *)a2 = v3;
  int v4 = (result[18] >> 4) & 8 | v3;
  *(unsigned char *)a2 = v4;
  int v5 = (result[18] >> 5) & 2 | v4;
  *(unsigned char *)a2 = v5;
  unsigned int v6 = v5 & 0xFFFFFFBF | (((result[26] >> 5) & 1) << 6);
  *(unsigned char *)a2 = v6;
  LOBYTE(v6) = v6 & 0xEF | (16 * (result[34] & 1));
  *(unsigned char *)a2 = v6;
  LOBYTE(v6) = v6 & 0xFE | ((result[34] & 2) != 0);
  *(unsigned char *)a2 = v6;
  *(unsigned char *)a2 = v6 | result[37] & 0x20;
  LOBYTE(v6) = (4 * result[14]) & 0x40;
  *(unsigned char *)(a2 + 1) = v6;
  LOBYTE(v6) = v6 & 0xFE | ((result[17] & 2) != 0);
  *(unsigned char *)(a2 + 1) = v6;
  int v7 = v6 & 0x7F | (result[19] >> 6 << 7);
  *(unsigned char *)(a2 + 1) = v7;
  int v8 = v7 | result[19] & 0x20;
  *(unsigned char *)(a2 + 1) = v8;
  int v9 = (result[26] >> 3) & 2 | v8;
  *(unsigned char *)(a2 + 1) = v9;
  int v10 = (result[33] >> 1) & 0x10 | v9;
  *(unsigned char *)(a2 + 1) = v10;
  *(unsigned char *)(a2 + 1) = v10 & 0xF3 | (4 * ((result[35] >> 1) & 3));
  int v11 = (result[15] >> 3) & 0x18;
  *(unsigned char *)(a2 + 2) = v11;
  unsigned int v12 = v11 & 0xFFFFFFDF | (32 * ((result[27] >> 2) & 1));
  *(unsigned char *)(a2 + 2) = v12;
  unsigned int v13 = v12 & 0xFFFFFFFB | (4 * ((result[27] >> 1) & 1));
  *(unsigned char *)(a2 + 2) = v13;
  LOBYTE(v13) = v13 & 0xFE | ((result[33] & 0x10) != 0);
  *(unsigned char *)(a2 + 2) = v13;
  LOBYTE(v13) = v13 & 0x3F | (result[37] >> 3 << 6);
  *(unsigned char *)(a2 + 2) = v13;
  *(unsigned char *)(a2 + 2) = (result[39] >> 3) & 2 | v13;
  int v14 = (result[15] >> 3) & 4;
  *(unsigned char *)(a2 + 3) = v14;
  int v15 = result[17] & 0x80 | v14;
  *(unsigned char *)(a2 + 3) = v15;
  int v16 = (result[19] >> 1) & 8 | v15;
  *(unsigned char *)(a2 + 3) = v16;
  int v17 = (result[19] >> 2) & 2 | v16;
  *(unsigned char *)(a2 + 3) = v17;
  unsigned int v18 = v17 & 0xFFFFFFBF | (((result[28] >> 5) & 1) << 6);
  *(unsigned char *)(a2 + 3) = v18;
  int v19 = v18 | (result[34] >> 7);
  *(unsigned char *)(a2 + 3) = v19;
  LOBYTE(v19) = v19 & 0xEF | (16 * (result[35] & 1));
  *(unsigned char *)(a2 + 3) = v19;
  *(unsigned char *)(a2 + 3) = (32 * (result[38] & 1)) | v19;
  int v20 = result[18] & 1;
  *(unsigned char *)(a2 + 4) = v20;
  unsigned int v21 = v20 & 0xFFFFFFBF | (((result[19] >> 2) & 1) << 6);
  *(unsigned char *)(a2 + 4) = v21;
  int v22 = v21 | (result[21] << 7);
  *(unsigned char *)(a2 + 4) = v22;
  unsigned int v23 = v22 & 0xFFFFFFDF | (32 * ((result[21] >> 1) & 1));
  *(unsigned char *)(a2 + 4) = v23;
  int v24 = (result[28] >> 1) & 2 | v23;
  *(unsigned char *)(a2 + 4) = v24;
  unsigned int v25 = v24 & 0xFFFFFFEF | (16 * ((result[33] >> 2) & 1));
  *(unsigned char *)(a2 + 4) = v25;
  LOBYTE(v25) = v25 & 0xF7 | (8 * ((result[36] & 2) != 0));
  *(unsigned char *)(a2 + 4) = v25;
  *(unsigned char *)(a2 + 4) = v25 | result[36] & 4;
  int v26 = result[5] & 0x10;
  *(unsigned char *)(a2 + 5) = v26;
  int v27 = (result[4] >> 1) & 8 | v26;
  *(unsigned char *)(a2 + 5) = v27;
  LOBYTE(v27) = v27 & 0xFB | (4 * ((result[7] & 2) != 0));
  *(unsigned char *)(a2 + 5) = v27;
  int v28 = v27 & 0x7F | (result[13] >> 3 << 7);
  *(unsigned char *)(a2 + 5) = v28;
  unsigned int v29 = v28 & 0xFFFFFFDF | (32 * ((result[24] >> 3) & 1));
  *(unsigned char *)(a2 + 5) = v29;
  LOBYTE(v29) = v29 & 0xFE | ((result[33] & 8) != 0);
  *(unsigned char *)(a2 + 5) = v29;
  LOBYTE(v29) = (result[35] >> 5) & 2 | v29;
  *(unsigned char *)(a2 + 5) = v29;
  *(unsigned char *)(a2 + 5) = (16 * result[40]) & 0x40 | v29;
  unsigned int v30 = result[25];
  *(unsigned char *)(a2 + 6) = (v30 & 2) != 0;
  int v31 = (result[39] >> 3) & 8 | (v30 >> 1) & 1;
  *(unsigned char *)(a2 + 6) = v31;
  LOBYTE(v31) = v31 & 0xBF | (((result[48] & 0x10) != 0) << 6);
  *(unsigned char *)(a2 + 6) = v31;
  int v32 = v31 & 0x7F | (result[51] >> 6 << 7);
  *(unsigned char *)(a2 + 6) = v32;
  LOBYTE(v30) = v32 | result[51] & 2;
  *(unsigned char *)(a2 + 6) = v30;
  LOBYTE(v30) = v30 & 0xFB | (4 * (result[52] & 1));
  *(unsigned char *)(a2 + 6) = v30;
  LOBYTE(v30) = (result[52] >> 1) & 0x10 | v30;
  *(unsigned char *)(a2 + 6) = v30;
  *(unsigned char *)(a2 + 6) = (result[55] >> 1) & 0x20 | v30;
  int v33 = (result[7] >> 3) & 4;
  *(unsigned char *)(a2 + 7) = v33;
  int v34 = result[8] & 2 | v33;
  *(unsigned char *)(a2 + 7) = v34;
  unsigned int v35 = v34 & 0xFFFFFFBF | (((result[25] >> 3) & 1) << 6);
  *(unsigned char *)(a2 + 7) = v35;
  int v36 = (result[25] >> 1) & 8 | v35;
  *(unsigned char *)(a2 + 7) = v36;
  LOBYTE(v36) = v36 & 0xFE | ((result[40] & 8) != 0);
  *(unsigned char *)(a2 + 7) = v36;
  LOBYTE(v36) = (result[46] >> 1) & 0x20 | v36;
  *(unsigned char *)(a2 + 7) = v36;
  LOBYTE(v36) = v36 & 0x7F | (result[47] >> 5 << 7);
  *(unsigned char *)(a2 + 7) = v36;
  *(unsigned char *)(a2 + 7) = (result[47] >> 3) & 0x10 | v36;
  unsigned int v37 = result[24];
  *(unsigned char *)(a2 + 8) = (4 * v37) & 0x80;
  int v38 = result[46] & 4 | (v37 >> 5 << 7);
  *(unsigned char *)(a2 + 8) = v38;
  int v39 = (result[46] >> 2) & 0x20 | v38;
  *(unsigned char *)(a2 + 8) = v39;
  int v40 = v39 | result[47] & 0x40;
  *(unsigned char *)(a2 + 8) = v40;
  int v41 = (result[54] >> 4) & 8 | v40;
  *(unsigned char *)(a2 + 8) = v41;
  LOBYTE(v41) = v41 & 0xFD | (2 * (result[55] & 1));
  *(unsigned char *)(a2 + 8) = v41;
  LOBYTE(v41) = v41 & 0xEF | (16 * ((result[56] & 8) != 0));
  *(unsigned char *)(a2 + 8) = v41;
  *(unsigned char *)(a2 + 8) = ((result[56] & 0x10) != 0) | v41;
  int v42 = *result & 4;
  *(unsigned char *)(a2 + 9) = v42;
  int v43 = (*result >> 2) & 2 | v42;
  *(unsigned char *)(a2 + 9) = v43;
  unsigned int v44 = v43 & 0xFFFFFFFE | (result[2] >> 6) & 1;
  *(unsigned char *)(a2 + 9) = v44;
  unsigned int v45 = v44 & 0xFFFFFFDF | (32 * ((result[12] >> 1) & 1));
  *(unsigned char *)(a2 + 9) = v45;
  LOBYTE(v45) = v45 & 0xF7 | (8 * ((result[24] & 2) != 0));
  *(unsigned char *)(a2 + 9) = v45;
  LOBYTE(v45) = (result[24] >> 1) & 0x40 | v45;
  *(unsigned char *)(a2 + 9) = v45;
  LOBYTE(v45) = v45 | result[42] & 0x10;
  *(unsigned char *)(a2 + 9) = v45;
  *(unsigned char *)(a2 + 9) = result[57] & 0x80 | v45;
  int v46 = result[6] << 7;
  *(unsigned char *)(a2 + 10) = v46;
  unsigned int v47 = v46 & 0xFFFFFFBF | (((result[42] >> 5) & 1) << 6);
  *(unsigned char *)(a2 + 10) = v47;
  int v48 = (result[42] >> 2) & 2 | v47;
  *(unsigned char *)(a2 + 10) = v48;
  unsigned int v49 = v48 & 0xFFFFFFEF | (16 * ((result[54] >> 1) & 1));
  *(unsigned char *)(a2 + 10) = v49;
  unsigned int v50 = v49 & 0xFFFFFFDF | (32 * ((result[57] >> 3) & 1));
  *(unsigned char *)(a2 + 10) = v50;
  LOBYTE(v50) = v50 | result[57] & 4;
  *(unsigned char *)(a2 + 10) = v50;
  LOBYTE(v50) = v50 & 0xFE | ((result[57] & 0x10) != 0);
  *(unsigned char *)(a2 + 10) = v50;
  *(unsigned char *)(a2 + 10) = (result[58] >> 3) & 8 | v50;
  unsigned int v51 = result[5];
  *(unsigned char *)(a2 + 11) = (v51 & 0x40) != 0;
  int v52 = ((v51 >> 6) | (16 * result[25])) & 0x11;
  *(unsigned char *)(a2 + 11) = v52;
  LOBYTE(v52) = v52 | result[26] & 2;
  *(unsigned char *)(a2 + 11) = v52;
  LOBYTE(v52) = v52 & 0xF7 | (8 * ((result[49] & 2) != 0));
  *(unsigned char *)(a2 + 11) = v52;
  LOBYTE(v52) = (result[49] >> 2) & 4 | v52;
  *(unsigned char *)(a2 + 11) = v52;
  LOBYTE(v52) = v52 | result[50] & 0x20;
  *(unsigned char *)(a2 + 11) = v52;
  int v53 = v52 & 0x7F | (result[57] >> 6 << 7);
  *(unsigned char *)(a2 + 11) = v53;
  *(unsigned char *)(a2 + 11) = v53 & 0xBF | (((result[58] & 0x20) != 0) << 6);
  int v54 = (8 * result[3]) & 0xFF80;
  *(unsigned char *)(a2 + 12) = (8 * result[3]) & 0x80;
  unsigned int v55 = v54 & 0xFFFFFFBF | (((result[4] >> 3) & 1) << 6);
  *(unsigned char *)(a2 + 12) = v55;
  unsigned int v56 = v55 & 0xFFFFFFDF | (32 * (result[26] & 1));
  *(unsigned char *)(a2 + 12) = v56;
  unsigned int v57 = v56 & 0xFFFFFFF7 | (8 * (result[49] & 1));
  *(unsigned char *)(a2 + 12) = v57;
  int v58 = (result[49] >> 1) & 0x10 | v57;
  *(unsigned char *)(a2 + 12) = v58;
  LOBYTE(v58) = v58 & 0xFE | ((result[50] & 4) != 0);
  *(unsigned char *)(a2 + 12) = v58;
  LOBYTE(v58) = (result[57] >> 4) & 2 | v58;
  *(unsigned char *)(a2 + 12) = v58;
  *(unsigned char *)(a2 + 12) = (result[58] >> 2) & 4 | v58;
  unsigned int v59 = result[4];
  *(unsigned char *)(a2 + 13) = (v59 & 0x20) != 0;
  int v60 = ((v59 >> 5) | (2 * result[14])) & 9;
  *(unsigned char *)(a2 + 13) = v60;
  int v61 = (result[23] >> 3) & 0x12 | v60;
  *(unsigned char *)(a2 + 13) = v61;
  LOBYTE(v61) = v61 & 0xFB | (4 * ((result[38] & 2) != 0));
  *(unsigned char *)(a2 + 13) = v61;
  int v62 = v61 & 0x7F | (result[39] >> 1 << 7);
  *(unsigned char *)(a2 + 13) = v62;
  LOBYTE(v62) = v62 & 0xDF | (32 * ((result[52] & 4) != 0));
  *(unsigned char *)(a2 + 13) = v62;
  *(unsigned char *)(a2 + 13) = (result[52] >> 1) & 0x40 | v62;
  LOBYTE(v62) = result[10];
  *(unsigned char *)(a2 + 14) = (8 * v62) & 0x40;
  LOBYTE(v62) = result[12] & 0x20 | (((v62 & 8) != 0) << 6);
  *(unsigned char *)(a2 + 14) = v62;
  int v63 = v62 & 0x7F | (result[23] >> 5 << 7);
  *(unsigned char *)(a2 + 14) = v63;
  int v64 = v63 | result[38] & 0x10;
  *(unsigned char *)(a2 + 14) = v64;
  int v65 = (result[52] >> 4) & 4 | v64;
  *(unsigned char *)(a2 + 14) = v65;
  LOBYTE(v65) = v65 & 0xF7 | (8 * (result[53] & 1));
  *(unsigned char *)(a2 + 14) = v65;
  LOBYTE(v65) = v65 & 0xFE | ((result[53] & 2) != 0);
  *(unsigned char *)(a2 + 14) = v65;
  *(unsigned char *)(a2 + 14) = (result[53] >> 6) & 2 | v65;
  int v66 = result[25] & 4;
  *(unsigned char *)(a2 + 15) = v66;
  int v67 = result[40] & 2 | v66;
  *(unsigned char *)(a2 + 15) = v67;
  unsigned int v68 = v67 & 0xFFFFFFBF | (((result[41] >> 4) & 1) << 6);
  *(unsigned char *)(a2 + 15) = v68;
  int v69 = v68 | (result[42] >> 7);
  *(unsigned char *)(a2 + 15) = v69;
  int v70 = (result[43] >> 1) & 8 | v69;
  *(unsigned char *)(a2 + 15) = v70;
  LOBYTE(v70) = v70 & 0xEF | (16 * ((result[48] & 8) != 0));
  *(unsigned char *)(a2 + 15) = v70;
  LOBYTE(v70) = v70 | result[48] & 0x80;
  *(unsigned char *)(a2 + 15) = v70;
  *(unsigned char *)(a2 + 15) = (result[48] >> 1) & 0x20 | v70;
  LOBYTE(v70) = result[11] & 0x10;
  *(unsigned char *)(a2 + 16) = v70;
  LOBYTE(v70) = v70 & 0xDF | (32 * ((result[12] & 4) != 0));
  *(unsigned char *)(a2 + 16) = v70;
  LOBYTE(v70) = v70 | result[12] & 0x40;
  *(unsigned char *)(a2 + 16) = v70;
  int v71 = v70 & 0x7F | (result[24] >> 2 << 7);
  *(unsigned char *)(a2 + 16) = v71;
  int v72 = (result[25] >> 2) & 8 | v71;
  *(unsigned char *)(a2 + 16) = v72;
  LOBYTE(v72) = v72 & 0xFD | (2 * (result[40] & 1));
  *(unsigned char *)(a2 + 16) = v72;
  LOBYTE(v72) = (result[42] >> 4) & 4 | v72;
  *(unsigned char *)(a2 + 16) = v72;
  *(unsigned char *)(a2 + 16) = ((result[48] & 0x20) != 0) | v72;
  int v73 = (result[18] >> 4) & 2;
  *(unsigned char *)(a2 + 17) = v73;
  int v74 = (result[25] >> 5) & 4 | v73;
  *(unsigned char *)(a2 + 17) = v74;
  int v75 = v74 | (result[33] >> 7);
  *(unsigned char *)(a2 + 17) = v75;
  unsigned int v76 = v75 & 0xFFFFFFDF | (32 * ((result[34] >> 4) & 1));
  *(unsigned char *)(a2 + 17) = v76;
  unsigned int v77 = v76 & 0xFFFFFFF7 | (8 * ((result[41] >> 2) & 1));
  *(unsigned char *)(a2 + 17) = v77;
  LOBYTE(v77) = (16 * result[42]) & 0x50 | v77;
  *(unsigned char *)(a2 + 17) = v77;
  *(unsigned char *)(a2 + 17) = v77 & 0x7F | (((result[43] & 2) != 0) << 7);
  LOBYTE(v77) = (8 * result[4]) & 0x20;
  *(unsigned char *)(a2 + 18) = v77;
  LOBYTE(v77) = v77 & 0xEF | (16 * (result[5] & 1));
  *(unsigned char *)(a2 + 18) = v77;
  LOBYTE(v77) = v77 & 0xBF | (((result[12] & 8) != 0) << 6);
  *(unsigned char *)(a2 + 18) = v77;
  LOBYTE(v77) = (result[13] >> 3) & 8 | v77;
  *(unsigned char *)(a2 + 18) = v77;
  LOBYTE(v77) = (result[33] >> 4) & 4 | v77;
  *(unsigned char *)(a2 + 18) = v77;
  LOBYTE(v77) = v77 & 0x7F | (result[37] >> 1 << 7);
  *(unsigned char *)(a2 + 18) = v77;
  LOBYTE(v77) = v77 | result[42] & 2;
  *(unsigned char *)(a2 + 18) = v77;
  *(unsigned char *)(a2 + 18) = ((result[43] & 4) != 0) | v77;
  int v78 = (result[12] >> 5) & 4;
  *(unsigned char *)(a2 + 19) = v78;
  unsigned int v79 = v78 & 0xFFFFFFF7 | (8 * ((result[16] >> 1) & 1));
  *(unsigned char *)(a2 + 19) = v79;
  int v80 = (result[38] >> 6) & 2 | v79;
  *(unsigned char *)(a2 + 19) = v80;
  LOBYTE(v80) = v80 & 0xFE | ((result[40] & 0x10) != 0);
  *(unsigned char *)(a2 + 19) = v80;
  LOBYTE(v80) = (result[41] >> 1) & 0x10 | v80;
  *(unsigned char *)(a2 + 19) = v80;
  int v81 = v80 & 0x7F | (result[44] >> 2 << 7);
  *(unsigned char *)(a2 + 19) = v81;
  LOBYTE(v81) = v81 & 0xBF | (((result[50] & 0x10) != 0) << 6);
  *(unsigned char *)(a2 + 19) = v81;
  *(unsigned char *)(a2 + 19) = (16 * result[52]) & 0x20 | v81;
  int v82 = result[13] << 7;
  *(unsigned char *)(a2 + 20) = v82;
  unsigned int v83 = v82 & 0xFFFFFFBF | ((result[16] & 1) << 6);
  *(unsigned char *)(a2 + 20) = v83;
  int v84 = v83 | (result[30] >> 7);
  *(unsigned char *)(a2 + 20) = v84;
  LOBYTE(v84) = v84 & 0xFD | (2 * (result[31] & 1));
  *(unsigned char *)(a2 + 20) = v84;
  LOBYTE(v84) = v84 & 0xDF | (32 * ((result[41] & 8) != 0));
  *(unsigned char *)(a2 + 20) = v84;
  LOBYTE(v84) = (result[44] >> 2) & 4 | v84;
  *(unsigned char *)(a2 + 20) = v84;
  LOBYTE(v84) = (result[54] >> 1) & 0x10 | v84;
  *(unsigned char *)(a2 + 20) = v84;
  *(unsigned char *)(a2 + 20) = (result[54] >> 3) & 8 | v84;
  LOBYTE(v84) = (8 * result[4]) & 0x10;
  *(unsigned char *)(a2 + 21) = v84;
  LOBYTE(v84) = v84 & 0xDF | (32 * ((result[5] & 2) != 0));
  *(unsigned char *)(a2 + 21) = v84;
  LOBYTE(v84) = (result[12] >> 1) & 8 | v84;
  *(unsigned char *)(a2 + 21) = v84;
  LOBYTE(v84) = (result[13] >> 1) & 0x40 | v84;
  *(unsigned char *)(a2 + 21) = v84;
  LOBYTE(v84) = v84 & 0xFE | result[39] & 1;
  *(unsigned char *)(a2 + 21) = v84;
  LOBYTE(v84) = result[40] & 0x80 | v84;
  *(unsigned char *)(a2 + 21) = v84;
  LOBYTE(v84) = (result[50] >> 2) & 2 | v84;
  *(unsigned char *)(a2 + 21) = v84;
  *(unsigned char *)(a2 + 21) = (result[51] >> 5) & 4 | v84;
  int v85 = (result[1] >> 4) & 4;
  *(unsigned char *)(a2 + 22) = v85;
  unsigned int v86 = v85 & 0xFFFFFFF7 | (8 * ((result[2] >> 2) & 1));
  *(unsigned char *)(a2 + 22) = v86;
  unsigned int v87 = v86 & 0xFFFFFFEF | (16 * (result[9] & 1));
  *(unsigned char *)(a2 + 22) = v87;
  int v88 = v87 | result[9] & 2;
  *(unsigned char *)(a2 + 22) = v88;
  int v89 = result[21] & 0x60 | v88;
  *(unsigned char *)(a2 + 22) = v89;
  unsigned int v90 = v89 & 0xFFFFFFFE | (result[37] >> 2) & 1;
  *(unsigned char *)(a2 + 22) = v90;
  *(unsigned char *)(a2 + 22) = v90 & 0x7F | (((result[46] & 2) != 0) << 7);
  int v91 = (result[6] >> 6) & 2;
  *(unsigned char *)(a2 + 23) = v91;
  int v92 = (result[7] >> 2) & 4 | v91;
  *(unsigned char *)(a2 + 23) = v92;
  unsigned int v93 = v92 & 0xFFFFFFFE | (result[8] >> 6) & 1;
  *(unsigned char *)(a2 + 23) = v93;
  LOBYTE(v93) = v93 | (result[15] << 7);
  *(unsigned char *)(a2 + 23) = v93;
  LOBYTE(v93) = result[34] & 0x40 | v93;
  *(unsigned char *)(a2 + 23) = v93;
  LOBYTE(v93) = result[47] & 8 | v93;
  *(unsigned char *)(a2 + 23) = v93;
  LOBYTE(v93) = v93 & 0xEF | (16 * ((result[49] & 4) != 0));
  *(unsigned char *)(a2 + 23) = v93;
  *(unsigned char *)(a2 + 23) = (8 * result[54]) & 0x20 | v93;
  int v94 = (result[14] >> 1) & 0x20;
  *(unsigned char *)(a2 + 24) = v94;
  unsigned int v95 = v94 & 0xFFFFFFEF | (16 * (result[32] & 1));
  *(unsigned char *)(a2 + 24) = v95;
  unsigned int v96 = v95 & 0xFFFFFFFE | (result[32] >> 1) & 1;
  *(unsigned char *)(a2 + 24) = v96;
  unsigned int v97 = v96 & 0xFFFFFFBF | (((result[34] >> 5) & 1) << 6);
  *(unsigned char *)(a2 + 24) = v97;
  LOBYTE(v97) = v97 | (result[54] << 7);
  *(unsigned char *)(a2 + 24) = v97;
  LOBYTE(v97) = v97 & 0xF7 | (8 * (result[56] & 1));
  *(unsigned char *)(a2 + 24) = v97;
  LOBYTE(v97) = v97 | result[56] & 2;
  *(unsigned char *)(a2 + 24) = v97;
  *(unsigned char *)(a2 + 24) = (2 * result[57]) & 4 | v97;
  LOBYTE(v97) = (result[6] >> 3) & 8;
  *(unsigned char *)(a2 + 25) = v97;
  LOBYTE(v97) = (result[7] >> 1) & 4 | v97;
  *(unsigned char *)(a2 + 25) = v97;
  LOBYTE(v97) = (result[8] >> 3) & 0x10 | v97;
  *(unsigned char *)(a2 + 25) = v97;
  int v98 = v97 & 0x7F | (result[20] >> 5 << 7);
  *(unsigned char *)(a2 + 25) = v98;
  int v99 = (result[45] >> 2) & 0x20 | v98;
  *(unsigned char *)(a2 + 25) = v99;
  int v100 = (result[47] >> 3) & 2 | v99;
  *(unsigned char *)(a2 + 25) = v100;
  LOBYTE(v100) = v100 & 0xBF | (((result[49] & 8) != 0) << 6);
  *(unsigned char *)(a2 + 25) = v100;
  *(unsigned char *)(a2 + 25) = v100 | result[57] & 1;
  unsigned int v101 = *result;
  *(unsigned char *)(a2 + 26) = (2 * v101) & 0x80;
  int v102 = (*result >> 6) & 2 | (v101 >> 6 << 7);
  *(unsigned char *)(a2 + 26) = v102;
  unsigned int v103 = v102 & 0xFFFFFFFE | (result[1] >> 4) & 1;
  *(unsigned char *)(a2 + 26) = v103;
  unsigned int v104 = v103 & 0xFFFFFFBF | ((result[3] & 1) << 6);
  *(unsigned char *)(a2 + 26) = v104;
  unsigned int v105 = v104 & 0xFFFFFFFB | (4 * ((result[3] >> 1) & 1));
  *(unsigned char *)(a2 + 26) = v105;
  unsigned int v106 = v105 & 0xFFFFFFDF | (32 * ((result[18] >> 2) & 1));
  *(unsigned char *)(a2 + 26) = v106;
  LOBYTE(v106) = v106 & 0xF7 | (8 * ((result[18] & 2) != 0));
  *(unsigned char *)(a2 + 26) = v106;
  *(unsigned char *)(a2 + 26) = (result[38] >> 2) & 0x10 | v106;
  int v107 = *result & 0x20;
  *(unsigned char *)(a2 + 27) = v107;
  unsigned int v108 = v107 & 0xFFFFFFFE | (result[1] >> 5) & 1;
  *(unsigned char *)(a2 + 27) = v108;
  int v109 = v108 | result[2] & 0x10;
  *(unsigned char *)(a2 + 27) = v109;
  unsigned int v110 = v109 & 0xFFFFFFBF | (((result[9] >> 4) & 1) << 6);
  *(unsigned char *)(a2 + 27) = v110;
  LOBYTE(v110) = v110 & 0xF7 | (8 * ((result[9] & 4) != 0));
  *(unsigned char *)(a2 + 27) = v110;
  LOBYTE(v110) = (result[20] >> 2) & 2 | v110;
  *(unsigned char *)(a2 + 27) = v110;
  LOBYTE(v110) = v110 & 0x7F | (result[36] >> 5 << 7);
  *(unsigned char *)(a2 + 27) = v110;
  *(unsigned char *)(a2 + 27) = (result[38] >> 3) & 4 | v110;
  unsigned int v111 = result[15];
  *(unsigned char *)(a2 + 28) = (2 * v111) & 4;
  int v112 = (result[17] >> 1) & 8 | (4 * ((v111 >> 1) & 1));
  *(unsigned char *)(a2 + 28) = v112;
  LOBYTE(v112) = v112 & 0xFE | ((result[39] & 8) != 0);
  *(unsigned char *)(a2 + 28) = v112;
  LOBYTE(v112) = (result[46] >> 1) & 0x10 | v112;
  *(unsigned char *)(a2 + 28) = v112;
  LOBYTE(v112) = (result[47] >> 1) & 2 | v112;
  *(unsigned char *)(a2 + 28) = v112;
  int v113 = v112 & 0x7F | (result[51] >> 4 << 7);
  *(unsigned char *)(a2 + 28) = v113;
  LOBYTE(v113) = v113 & 0xBF | (((result[55] & 8) != 0) << 6);
  *(unsigned char *)(a2 + 28) = v113;
  *(unsigned char *)(a2 + 28) = (32 * (result[58] & 1)) | v113;
  int v114 = result[14] & 0x80;
  *(unsigned char *)(a2 + 29) = v114;
  int v115 = result[16] & 0x40 | v114;
  *(unsigned char *)(a2 + 29) = v115;
  int v116 = (result[36] >> 6) & 2 | v115;
  *(unsigned char *)(a2 + 29) = v116;
  unsigned int v117 = v116 & 0xFFFFFFFE | result[37] & 1;
  *(unsigned char *)(a2 + 29) = v117;
  unsigned int v118 = v117 & 0xFFFFFFDF | (32 * ((result[46] >> 4) & 1));
  *(unsigned char *)(a2 + 29) = v118;
  int v119 = (result[51] >> 3) & 4 | v118;
  *(unsigned char *)(a2 + 29) = v119;
  *(unsigned char *)(a2 + 29) = v119 & 0xE7 | (8 * ((result[58] >> 2) & 3));
  LOBYTE(v119) = *result & 0x10;
  *(unsigned char *)(a2 + 30) = v119;
  LOBYTE(v119) = result[2] & 0x20 | v119;
  *(unsigned char *)(a2 + 30) = v119;
  LOBYTE(v119) = v119 & 0xBF | (((result[9] & 8) != 0) << 6);
  *(unsigned char *)(a2 + 30) = v119;
  LOBYTE(v119) = (result[9] >> 2) & 8 | v119;
  *(unsigned char *)(a2 + 30) = v119;
  LOBYTE(v119) = v119 & 0x7F | (result[39] >> 2 << 7);
  *(unsigned char *)(a2 + 30) = v119;
  LOBYTE(v119) = v119 & 0xFE | result[47] & 1;
  *(unsigned char *)(a2 + 30) = v119;
  LOBYTE(v119) = result[55] & 2 | v119;
  *(unsigned char *)(a2 + 30) = v119;
  *(unsigned char *)(a2 + 30) = (2 * result[58]) & 4 | v119;
  LOBYTE(v119) = *result;
  *(unsigned char *)(a2 + 31) = 4 * (*result & 3);
  int v120 = (result[5] >> 3) & 0x10 | (4 * (v119 & 3));
  *(unsigned char *)(a2 + 31) = v120;
  int v121 = (result[5] >> 4) & 2 | v120;
  *(unsigned char *)(a2 + 31) = v121;
  unsigned int v122 = v121 & 0xFFFFFFDF | (32 * ((result[16] >> 4) & 1));
  *(unsigned char *)(a2 + 31) = v122;
  int v123 = (result[16] >> 1) & 0x40 | v122;
  *(unsigned char *)(a2 + 31) = v123;
  unsigned int v124 = v123 & 0xFFFFFFFE | (result[36] >> 6) & 1;
  *(unsigned char *)(a2 + 31) = v124;
  *(unsigned char *)(a2 + 31) = v124 & 0x7F | (((result[43] & 8) != 0) << 7);
  int v125 = (result[8] >> 3) & 6;
  *(unsigned char *)(a2 + 32) = v125;
  LOBYTE(v125) = v125 & 0xFE | ((result[11] & 8) != 0);
  *(unsigned char *)(a2 + 32) = v125;
  int v126 = v125 & 0x7F | (result[20] >> 6 << 7);
  *(unsigned char *)(a2 + 32) = v126;
  int v127 = (result[39] >> 1) & 0x40 | v126;
  *(unsigned char *)(a2 + 32) = v127;
  int v128 = v127 | result[45] & 0x10;
  *(unsigned char *)(a2 + 32) = v128;
  int v129 = (result[45] >> 3) & 8 | v128;
  *(unsigned char *)(a2 + 32) = v129;
  *(unsigned char *)(a2 + 32) = v129 & 0xDF | (32 * ((result[54] & 0x10) != 0));
  unsigned int v130 = result[20];
  *(unsigned char *)(a2 + 33) = (2 * v130) & 0x20;
  int v131 = (result[35] >> 1) & 0x10 | (32 * ((v130 >> 4) & 1));
  *(unsigned char *)(a2 + 33) = v131;
  unsigned int v132 = v131 & 0xFFFFFFFE | (result[35] >> 4) & 1;
  *(unsigned char *)(a2 + 33) = v132;
  LOBYTE(v132) = v132 & 0xBF | (((result[39] & 0x20) != 0) << 6);
  *(unsigned char *)(a2 + 33) = v132;
  LOBYTE(v132) = v132 & 0x7F | (result[54] >> 3 << 7);
  *(unsigned char *)(a2 + 33) = v132;
  LOBYTE(v132) = (result[55] >> 2) & 0xC | v132;
  *(unsigned char *)(a2 + 33) = v132;
  *(unsigned char *)(a2 + 33) = (result[55] >> 6) & 2 | v132;
  LOBYTE(v132) = result[8] & 0xC;
  *(unsigned char *)(a2 + 34) = v132;
  LOBYTE(v132) = v132 & 0xEF | (16 * ((result[11] & 4) != 0));
  *(unsigned char *)(a2 + 34) = v132;
  int v133 = v132 & 0x7F | (result[18] >> 4 << 7);
  *(unsigned char *)(a2 + 34) = v133;
  unsigned int v134 = v133 & 0xFFFFFFDF | (32 * (result[43] & 1));
  *(unsigned char *)(a2 + 34) = v134;
  unsigned int v135 = v134 & 0xFFFFFFBF | (((result[45] >> 1) & 1) << 6);
  *(unsigned char *)(a2 + 34) = v135;
  int v136 = (result[45] >> 4) & 2 | v135;
  *(unsigned char *)(a2 + 34) = v136;
  *(unsigned char *)(a2 + 34) = v136 & 0xFE | ((result[55] & 4) != 0);
  int v137 = result[1] & 0x80;
  *(unsigned char *)(a2 + 35) = v137;
  int v138 = result[2] & 2 | v137;
  *(unsigned char *)(a2 + 35) = v138;
  int v139 = (result[2] >> 1) & 0x40 | v138;
  *(unsigned char *)(a2 + 35) = v139;
  unsigned int v140 = v139 & 0xFFFFFFFE | (result[2] >> 3) & 1;
  *(unsigned char *)(a2 + 35) = v140;
  LOBYTE(v140) = v140 | result[3] & 4;
  *(unsigned char *)(a2 + 35) = v140;
  LOBYTE(v140) = v140 & 0xDF | (32 * ((result[15] & 8) != 0));
  *(unsigned char *)(a2 + 35) = v140;
  LOBYTE(v140) = (result[15] >> 1) & 8 | v140;
  *(unsigned char *)(a2 + 35) = v140;
  *(unsigned char *)(a2 + 35) = (result[32] >> 1) & 0x10 | v140;
  int v141 = result[2] & 1;
  *(unsigned char *)(a2 + 36) = v141;
  unsigned int v142 = v141 & 0xFFFFFFEF | (16 * ((result[6] >> 2) & 1));
  *(unsigned char *)(a2 + 36) = v142;
  LOBYTE(v142) = v142 | result[6] & 0x20;
  *(unsigned char *)(a2 + 36) = v142;
  LOBYTE(v142) = result[11] & 0x40 | v142;
  *(unsigned char *)(a2 + 36) = v142;
  LOBYTE(v142) = v142 & 0xF7 | (8 * (result[14] & 1));
  *(unsigned char *)(a2 + 36) = v142;
  LOBYTE(v142) = (result[18] >> 2) & 2 | v142;
  *(unsigned char *)(a2 + 36) = v142;
  LOBYTE(v142) = v142 & 0x7F | (result[31] >> 4 << 7);
  *(unsigned char *)(a2 + 36) = v142;
  *(unsigned char *)(a2 + 36) = (result[32] >> 2) & 4 | v142;
  LOBYTE(v142) = result[19];
  *(unsigned char *)(a2 + 37) = 4 * (v142 & 1);
  LOBYTE(v120) = (2 * result[21]) & 8 | (4 * (v142 & 1));
  *(unsigned char *)(a2 + 37) = v120;
  LOBYTE(v120) = v120 & 0xFE | ((result[34] & 4) != 0);
  *(unsigned char *)(a2 + 37) = v120;
  LOBYTE(v142) = v120 | result[41] & 2;
  *(unsigned char *)(a2 + 37) = v142;
  LOBYTE(v142) = (result[43] >> 1) & 0x10 | v142;
  *(unsigned char *)(a2 + 37) = v142;
  LOBYTE(v142) = v142 | result[44] & 0x80;
  *(unsigned char *)(a2 + 37) = v142;
  LOBYTE(v142) = (result[49] >> 1) & 0x20 | v142;
  *(unsigned char *)(a2 + 37) = v142;
  *(unsigned char *)(a2 + 37) = ((result[50] & 1) << 6) | v142;
  unsigned int v143 = result[19];
  *(unsigned char *)(a2 + 38) = ((_BYTE)v143 << 6) & 0x80;
  int v144 = (result[20] >> 1) & 0x40 | (v143 >> 1 << 7);
  *(unsigned char *)(a2 + 38) = v144;
  int v145 = (result[36] >> 2) & 2 | v144;
  *(unsigned char *)(a2 + 38) = v145;
  unsigned int v146 = v145 & 0xFFFFFFFE | (result[36] >> 4) & 1;
  *(unsigned char *)(a2 + 38) = v146;
  int v147 = (result[43] >> 1) & 0x20 | v146;
  *(unsigned char *)(a2 + 38) = v147;
  int v148 = (result[44] >> 3) & 4 | v147;
  *(unsigned char *)(a2 + 38) = v148;
  LOBYTE(v148) = v148 & 0xEF | (16 * ((result[52] & 8) != 0));
  *(unsigned char *)(a2 + 38) = v148;
  *(unsigned char *)(a2 + 38) = (result[52] >> 1) & 8 | v148;
  LOBYTE(v148) = (16 * result[6]) & 0x20;
  *(unsigned char *)(a2 + 39) = v148;
  LOBYTE(v148) = v148 & 0xEF | (16 * (result[7] & 1));
  *(unsigned char *)(a2 + 39) = v148;
  LOBYTE(v148) = v148 & 0xF7 | (8 * (result[12] & 1));
  *(unsigned char *)(a2 + 39) = v148;
  LOBYTE(v148) = v148 & 0xBF | (((result[14] & 2) != 0) << 6);
  *(unsigned char *)(a2 + 39) = v148;
  int v149 = v148 & 0x7F | (result[34] >> 3 << 7);
  *(unsigned char *)(a2 + 39) = v149;
  LOBYTE(v149) = v149 & 0xFE | ((result[40] & 0x40) != 0);
  *(unsigned char *)(a2 + 39) = v149;
  LOBYTE(v149) = (result[49] >> 5) & 4 | v149;
  *(unsigned char *)(a2 + 39) = v149;
  *(unsigned char *)(a2 + 39) = v149 | result[50] & 2;
  int v150 = (result[4] >> 3) & 8;
  *(unsigned char *)(a2 + 40) = v150;
  int v151 = (result[4] >> 5) & 4 | v150;
  *(unsigned char *)(a2 + 40) = v151;
  int v152 = (result[10] >> 3) & 0x10 | v151;
  *(unsigned char *)(a2 + 40) = v152;
  int v153 = (result[10] >> 5) & 2 | v152;
  *(unsigned char *)(a2 + 40) = v153;
  unsigned int v154 = v153 & 0xFFFFFFDF | (32 * ((result[17] >> 2) & 1));
  *(unsigned char *)(a2 + 40) = v154;
  unsigned int v155 = v154 & 0xFFFFFFBF | (((result[17] >> 5) & 1) << 6);
  *(unsigned char *)(a2 + 40) = v155;
  LOBYTE(v155) = v155 & 0xFE | ((result[31] & 0x40) != 0);
  *(unsigned char *)(a2 + 40) = v155;
  *(unsigned char *)(a2 + 40) = v155 | result[35] & 0x80;
  unsigned int v156 = result[13];
  *(unsigned char *)(a2 + 41) = (2 * v156) & 4;
  int v157 = (result[14] >> 2) & 2 | (4 * ((v156 >> 1) & 1));
  *(unsigned char *)(a2 + 41) = v157;
  LOBYTE(v157) = v157 & 0xFE | ((result[16] & 0x20) != 0);
  *(unsigned char *)(a2 + 41) = v157;
  int v158 = v157 & 0x7F | (result[22] >> 5 << 7);
  *(unsigned char *)(a2 + 41) = v158;
  int v159 = v158 | result[37] & 0x40;
  *(unsigned char *)(a2 + 41) = v159;
  unsigned int v160 = v159 & 0xFFFFFFEF | (16 * ((result[38] >> 2) & 1));
  *(unsigned char *)(a2 + 41) = v160;
  LOBYTE(v160) = v160 & 0xF7 | (8 * (result[41] & 1));
  *(unsigned char *)(a2 + 41) = v160;
  *(unsigned char *)(a2 + 41) = (32 * (result[46] & 1)) | v160;
  unsigned int v161 = result[22];
  *(unsigned char *)(a2 + 42) = (2 * v161) & 0x20;
  int v162 = (result[32] >> 2) & 0x10 | (32 * ((v161 >> 4) & 1));
  *(unsigned char *)(a2 + 42) = v162;
  int v163 = v162 | (result[32] >> 7);
  *(unsigned char *)(a2 + 42) = v163;
  int v164 = (result[37] >> 1) & 0x40 | v163;
  *(unsigned char *)(a2 + 42) = v164;
  LOBYTE(v164) = v164 & 0xF7 | (8 * ((result[44] & 2) != 0));
  *(unsigned char *)(a2 + 42) = v164;
  LOBYTE(v164) = (result[44] >> 2) & 2 | v164;
  *(unsigned char *)(a2 + 42) = v164;
  LOBYTE(v164) = v164 | result[45] & 4;
  *(unsigned char *)(a2 + 42) = v164;
  *(unsigned char *)(a2 + 42) = (16 * result[46]) & 0x80 | v164;
  int v165 = result[13] & 4;
  *(unsigned char *)(a2 + 43) = v165;
  int v166 = (result[14] >> 2) & 8 | v165;
  *(unsigned char *)(a2 + 43) = v166;
  LOBYTE(v166) = v166 & 0xEF | (16 * ((result[17] & 8) != 0));
  *(unsigned char *)(a2 + 43) = v166;
  int v167 = v166 & 0x7F | (result[20] >> 2 << 7);
  *(unsigned char *)(a2 + 43) = v167;
  LOBYTE(v167) = v167 & 0xDF | (32 * (result[36] & 1));
  *(unsigned char *)(a2 + 43) = v167;
  LOBYTE(v167) = v167 & 0xBF | (((result[38] & 8) != 0) << 6);
  *(unsigned char *)(a2 + 43) = v167;
  LOBYTE(v167) = (result[40] >> 4) & 2 | v167;
  *(unsigned char *)(a2 + 43) = v167;
  *(unsigned char *)(a2 + 43) = ((result[45] & 8) != 0) | v167;
  int v168 = result[9] >> 5;
  *(unsigned char *)(a2 + 44) = v168 & 4;
  LOBYTE(v168) = (v168 | (result[10] << 6)) & 0x7C;
  *(unsigned char *)(a2 + 44) = v168;
  LOBYTE(v168) = v168 | (result[10] >> 2 << 7);
  *(unsigned char *)(a2 + 44) = v168;
  LOBYTE(v168) = v168 | result[10] & 2;
  *(unsigned char *)(a2 + 44) = v168;
  LOBYTE(v168) = ((result[10] & 0x20) != 0) | v168;
  *(unsigned char *)(a2 + 44) = v168;
  LOBYTE(v168) = (4 * result[16]) & 0x20 | v168;
  *(unsigned char *)(a2 + 44) = v168;
  LOBYTE(v168) = (2 * result[16]) & 8 | v168;
  *(unsigned char *)(a2 + 44) = v168;
  *(unsigned char *)(a2 + 44) = (4 * result[30]) & 0x10 | v168;
  unsigned int v169 = result[10];
  *(unsigned char *)(a2 + 45) = (v169 & 0x10) != 0;
  int v170 = (result[17] >> 1) & 0x20 | (v169 >> 4) & 1;
  *(unsigned char *)(a2 + 45) = v170;
  int v171 = (result[19] >> 1) & 0x40 | v170;
  *(unsigned char *)(a2 + 45) = v171;
  LOBYTE(v171) = v171 & 0xEF | (16 * (result[20] & 1));
  *(unsigned char *)(a2 + 45) = v171;
  LOBYTE(v171) = v171 | result[20] & 2;
  *(unsigned char *)(a2 + 45) = v171;
  LOBYTE(v171) = v171 & 0xFB | (4 * (result[30] & 1));
  *(unsigned char *)(a2 + 45) = v171;
  LOBYTE(v171) = v171 & 0x7F | (result[33] >> 1 << 7);
  *(unsigned char *)(a2 + 45) = v171;
  *(unsigned char *)(a2 + 45) = (8 * (result[33] & 1)) | v171;
  LOBYTE(v171) = result[1];
  *(unsigned char *)(a2 + 46) = (v171 & 1) << 6;
  LOBYTE(v170) = (8 * result[5]) & 0x20 | ((v171 & 1) << 6);
  *(unsigned char *)(a2 + 46) = v170;
  LOBYTE(v171) = (result[5] >> 2) & 2 | v170;
  *(unsigned char *)(a2 + 46) = v171;
  int v172 = v171 & 0x7F | (result[31] >> 5 << 7);
  *(unsigned char *)(a2 + 46) = v172;
  unsigned int v173 = v172 & 0xFFFFFFFE | (result[35] >> 3) & 1;
  *(unsigned char *)(a2 + 46) = v173;
  int v174 = (result[50] >> 2) & 0x10 | v173;
  *(unsigned char *)(a2 + 46) = v174;
  LOBYTE(v174) = v174 & 0xFB | (4 * (result[51] & 1));
  *(unsigned char *)(a2 + 46) = v174;
  *(unsigned char *)(a2 + 46) = (2 * result[56]) & 8 | v174;
  LOBYTE(v174) = result[8];
  *(unsigned char *)(a2 + 47) = 32 * (v174 & 1);
  unsigned int v175 = (result[21] >> 7) & 0xFFFFFFDF | (32 * (v174 & 1));
  *(unsigned char *)(a2 + 47) = v175;
  LOBYTE(v175) = v175 & 0xFB | (4 * (result[22] & 1));
  *(unsigned char *)(a2 + 47) = v175;
  LOBYTE(v174) = v175 | result[22] & 2;
  *(unsigned char *)(a2 + 47) = v174;
  LOBYTE(v174) = v174 & 0xEF | (16 * ((result[31] & 2) != 0));
  *(unsigned char *)(a2 + 47) = v174;
  LOBYTE(v174) = (result[31] >> 4) & 8 | v174;
  *(unsigned char *)(a2 + 47) = v174;
  LOBYTE(v174) = (32 * result[48]) & 0x40 | v174;
  *(unsigned char *)(a2 + 47) = v174;
  *(unsigned char *)(a2 + 47) = (8 * result[53]) & 0x80 | v174;
  int v176 = result[48] & 1;
  *(unsigned char *)(a2 + 48) = v176;
  int v177 = v176 | (4 * ((result[3] >> 3) & 1));
  *(unsigned char *)(a2 + 48) = v177;
  int v178 = (result[7] >> 6) & 2 | v177;
  *(unsigned char *)(a2 + 48) = v178;
  int v179 = (result[24] >> 2) & 0x10 | v178;
  *(unsigned char *)(a2 + 48) = v179;
  LOBYTE(v179) = v179 | result[25] & 0x40;
  *(unsigned char *)(a2 + 48) = v179;
  LOBYTE(v179) = v179 & 0xDF | (32 * ((result[28] & 8) != 0));
  *(unsigned char *)(a2 + 48) = v179;
  LOBYTE(v179) = v179 & 0x7F | (result[29] >> 6 << 7);
  *(unsigned char *)(a2 + 48) = v179;
  *(unsigned char *)(a2 + 48) = (result[29] >> 2) & 8 | v179;
  LOBYTE(v179) = result[9] & 0x40;
  *(unsigned char *)(a2 + 49) = v179;
  LOBYTE(v179) = result[13] & 0x20 | v179;
  *(unsigned char *)(a2 + 49) = v179;
  LOBYTE(v179) = (result[13] >> 3) & 2 | v179;
  *(unsigned char *)(a2 + 49) = v179;
  LOBYTE(v179) = v179 & 0x7F | (result[26] >> 6 << 7);
  *(unsigned char *)(a2 + 49) = v179;
  LOBYTE(v179) = v179 | (result[26] >> 7);
  *(unsigned char *)(a2 + 49) = v179;
  LOBYTE(v179) = (result[41] >> 2) & 0x10 | v179;
  *(unsigned char *)(a2 + 49) = v179;
  LOBYTE(v179) = (result[41] >> 5) & 4 | v179;
  *(unsigned char *)(a2 + 49) = v179;
  *(unsigned char *)(a2 + 49) = (4 * result[47]) & 8 | v179;
  int v180 = (result[21] >> 3) & 3;
  *(unsigned char *)(a2 + 50) = v180;
  unsigned int v181 = v180 & 0xFFFFFFFB | (4 * (result[27] & 1));
  *(unsigned char *)(a2 + 50) = v181;
  int v182 = (result[27] >> 1) & 0x20 | v181;
  *(unsigned char *)(a2 + 50) = v182;
  LOBYTE(v182) = v182 & 0xEF | (16 * ((result[32] & 4) != 0));
  *(unsigned char *)(a2 + 50) = v182;
  LOBYTE(v182) = v182 | result[32] & 8;
  *(unsigned char *)(a2 + 50) = v182;
  LOBYTE(v182) = v182 & 0x7F | (result[56] >> 6 << 7);
  *(unsigned char *)(a2 + 50) = v182;
  *(unsigned char *)(a2 + 50) = (result[56] >> 1) & 0x40 | v182;
  int v183 = result[1] & 6;
  *(unsigned char *)(a2 + 51) = v183;
  unsigned int v184 = v183 & 0xFFFFFFDF | (32 * ((result[26] >> 2) & 1));
  *(unsigned char *)(a2 + 51) = v184;
  unsigned int v185 = v184 & 0xFFFFFFEF | (16 * ((result[26] >> 3) & 1));
  *(unsigned char *)(a2 + 51) = v185;
  unsigned int v186 = v185 & 0xFFFFFFFE | (result[27] >> 5) & 1;
  *(unsigned char *)(a2 + 51) = v186;
  unsigned int v187 = v186 & 0xFFFFFFBF | (((result[28] >> 1) & 1) << 6);
  *(unsigned char *)(a2 + 51) = v187;
  int v188 = (result[28] >> 1) & 8 | v187;
  *(unsigned char *)(a2 + 51) = v188;
  *(unsigned char *)(a2 + 51) = v188 & 0x7F | (((result[29] & 4) != 0) << 7);
  LOBYTE(v188) = result[6];
  *(unsigned char *)(a2 + 52) = (4 * v188) & 0x60;
  LOBYTE(v188) = (result[28] >> 6) & 2 | (4 * v188) & 0x62;
  *(unsigned char *)(a2 + 52) = v188;
  int v189 = v188 & 0x7F | (result[29] >> 3 << 7);
  *(unsigned char *)(a2 + 52) = v189;
  unsigned int v190 = v189 & 0xFFFFFFEF | (16 * ((result[29] >> 1) & 1));
  *(unsigned char *)(a2 + 52) = v190;
  LOBYTE(v190) = v190 & 0xFE | result[29] & 1;
  *(unsigned char *)(a2 + 52) = v190;
  LOBYTE(v190) = v190 & 0xF7 | (8 * ((result[51] & 4) != 0));
  *(unsigned char *)(a2 + 52) = v190;
  *(unsigned char *)(a2 + 52) = (result[51] >> 1) & 4 | v190;
  LOBYTE(v190) = result[53] & 0x40;
  *(unsigned char *)(a2 + 53) = v190;
  LOBYTE(v190) = result[3] & 0x20 | v190;
  *(unsigned char *)(a2 + 53) = v190;
  LOBYTE(v190) = (result[23] >> 4) & 4 | v190;
  *(unsigned char *)(a2 + 53) = v190;
  LOBYTE(v190) = v190 | result[24] & 0x11;
  *(unsigned char *)(a2 + 53) = v190;
  LOBYTE(v190) = (result[28] >> 5) & 2 | v190;
  *(unsigned char *)(a2 + 53) = v190;
  LOBYTE(v190) = (result[29] >> 1) & 8 | v190;
  *(unsigned char *)(a2 + 53) = v190;
  *(unsigned char *)(a2 + 53) = (4 * result[56]) & 0x80 | v190;
  LOBYTE(v190) = (result[1] >> 1) & 4;
  *(unsigned char *)(a2 + 54) = v190;
  LOBYTE(v190) = (result[3] >> 6) & 2 | v190;
  *(unsigned char *)(a2 + 54) = v190;
  int v191 = v190 & 0x7F | (result[23] >> 3 << 7);
  *(unsigned char *)(a2 + 54) = v191;
  unsigned int v192 = v191 & 0xFFFFFFF7 | (8 * ((result[23] >> 2) & 1));
  *(unsigned char *)(a2 + 54) = v192;
  unsigned int v193 = v192 & 0xFFFFFFBF | (((result[30] >> 4) & 1) << 6);
  *(unsigned char *)(a2 + 54) = v193;
  unsigned int v194 = v193 & 0xFFFFFFEF | (16 * ((result[30] >> 3) & 1));
  *(unsigned char *)(a2 + 54) = v194;
  LOBYTE(v194) = v194 & 0xDF | (32 * ((result[31] & 8) != 0));
  *(unsigned char *)(a2 + 54) = v194;
  *(unsigned char *)(a2 + 54) = ((result[53] & 0x20) != 0) | v194;
  unsigned int v195 = result[7];
  *(unsigned char *)(a2 + 55) = (16 * v195) & 0x40;
  int v196 = (result[11] >> 2) & 0x20 | (((v195 >> 2) & 1) << 6);
  *(unsigned char *)(a2 + 55) = v196;
  int v197 = (result[11] >> 4) & 2 | v196;
  *(unsigned char *)(a2 + 55) = v197;
  unsigned int v198 = v197 & 0xFFFFFFFE | (result[22] >> 3) & 1;
  *(unsigned char *)(a2 + 55) = v198;
  int v199 = v198 | (result[28] << 7);
  *(unsigned char *)(a2 + 55) = v199;
  int v200 = (result[44] >> 2) & 0x10 | v199;
  *(unsigned char *)(a2 + 55) = v200;
  LOBYTE(v200) = v200 & 0xFB | (4 * (result[45] & 1));
  *(unsigned char *)(a2 + 55) = v200;
  *(unsigned char *)(a2 + 55) = (result[50] >> 4) & 8 | v200;
  int v201 = (result[22] >> 2) & 0x10;
  *(unsigned char *)(a2 + 56) = v201;
  int v202 = (result[22] >> 4) & 8 | v201;
  *(unsigned char *)(a2 + 56) = v202;
  unsigned int v203 = v202 & 0xFFFFFFDF | (32 * ((result[27] >> 4) & 1));
  *(unsigned char *)(a2 + 56) = v203;
  int v204 = (result[27] >> 5) & 4 | v203;
  *(unsigned char *)(a2 + 56) = v204;
  int v205 = (result[29] >> 6) & 2 | v204;
  *(unsigned char *)(a2 + 56) = v205;
  LOBYTE(v205) = v205 & 0xFE | ((result[30] & 2) != 0);
  *(unsigned char *)(a2 + 56) = v205;
  LOBYTE(v205) = v205 & 0x7F | (result[53] >> 2 << 7);
  *(unsigned char *)(a2 + 56) = v205;
  *(unsigned char *)(a2 + 56) = (8 * result[53]) & 0x40 | v205;
  int v206 = (result[3] >> 4) & 4;
  *(unsigned char *)(a2 + 57) = v206;
  LOBYTE(v206) = v206 & 0xFD | (2 * (result[4] & 1));
  *(unsigned char *)(a2 + 57) = v206;
  int v207 = v206 & 0x7F | (result[23] >> 1 << 7);
  *(unsigned char *)(a2 + 57) = v207;
  LOBYTE(v207) = v207 & 0xF7 | (8 * (result[23] & 1));
  *(unsigned char *)(a2 + 57) = v207;
  LOBYTE(v207) = v207 & 0xFE | ((result[27] & 8) != 0);
  *(unsigned char *)(a2 + 57) = v207;
  LOBYTE(v207) = v207 | result[30] & 0x40;
  *(unsigned char *)(a2 + 57) = v207;
  LOBYTE(v207) = (result[30] >> 1) & 0x10 | v207;
  *(unsigned char *)(a2 + 57) = v207;
  *(unsigned char *)(a2 + 57) = (8 * result[31]) & 0x20 | v207;
  int v208 = result[7] & 0x40;
  *(unsigned char *)(a2 + 58) = v208;
  unsigned int v209 = v208 & 0xFFFFFFDF | (32 * ((result[11] >> 1) & 1));
  *(unsigned char *)(a2 + 58) = v209;
  unsigned int v210 = v209 & 0xFFFFFFFD | (2 * (result[11] & 1));
  *(unsigned char *)(a2 + 58) = v210;
  unsigned int v211 = v210 & 0xFFFFFFFE | (result[22] >> 2) & 1;
  *(unsigned char *)(a2 + 58) = v211;
  int v212 = (result[43] >> 3) & 0x10 | v211;
  *(unsigned char *)(a2 + 58) = v212;
  LOBYTE(v212) = v212 & 0xFB | (4 * (result[44] & 1));
  *(unsigned char *)(a2 + 58) = v212;
  *(unsigned char *)(a2 + 58) = v212 & 0xF7 | (8 * ((result[48] & 4) != 0));
  *(_DWORD *)(a2 + 59) = 0;
  *(unsigned char *)(a2 + 63) = 0;
  return result;
}

_OWORD *sub_2194A8724(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x249249249249249) {
    sub_219486AE4();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)) >= 0x124924924924924) {
    unint64_t v6 = 0x249249249249249;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x249249249249249) {
      sub_219486AFC();
    }
    int v7 = (char *)operator new(112 * v6);
  }
  else
  {
    int v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  int v9 = &v7[112 * v3];
  *(_OWORD *)int v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  int v10 = &v7[112 * v6];
  long long v11 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v9 + 3) = v11;
  long long v12 = *(_OWORD *)(a2 + 64);
  long long v13 = *(_OWORD *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *((_OWORD *)v9 + 4) = v12;
  *((_OWORD *)v9 + 5) = v13;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *((_OWORD *)v9 + 6) = *(_OWORD *)(a2 + 96);
  int v14 = v9 + 112;
  int v15 = (char *)*a1;
  int v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v9;
    a1[1] = v14;
    a1[2] = v10;
    if (!v16) {
      return v14;
    }
    goto LABEL_25;
  }
  do
  {
    long long v17 = *((_OWORD *)v16 - 7);
    long long v18 = *((_OWORD *)v16 - 6);
    long long v19 = *((_OWORD *)v16 - 4);
    *((_OWORD *)v9 - 5) = *((_OWORD *)v16 - 5);
    *((_OWORD *)v9 - 4) = v19;
    *((_OWORD *)v9 - 7) = v17;
    *((_OWORD *)v9 - 6) = v18;
    *((_OWORD *)v9 - 3) = *((_OWORD *)v16 - 3);
    *((void *)v16 - 6) = 0;
    *((void *)v16 - 5) = 0;
    *((_OWORD *)v9 - 2) = *((_OWORD *)v16 - 2);
    *((void *)v16 - 4) = 0;
    *((void *)v16 - 3) = 0;
    *((_OWORD *)v9 - 1) = *((_OWORD *)v16 - 1);
    v9 -= 112;
    v16 -= 112;
  }
  while (v16 != v15);
  int v20 = (char *)*a1;
  int v16 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v14;
  a1[2] = v10;
  if (v16 != v20)
  {
    while (1)
    {
      unsigned int v21 = (std::__shared_weak_count *)*((void *)v16 - 3);
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        int v22 = (std::__shared_weak_count *)*((void *)v16 - 5);
        if (v22)
        {
LABEL_19:
          if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }
      else
      {
        int v22 = (std::__shared_weak_count *)*((void *)v16 - 5);
        if (v22) {
          goto LABEL_19;
        }
      }
      v16 -= 112;
      if (v16 == v20)
      {
        int v16 = v20;
        break;
      }
    }
  }
  if (v16) {
LABEL_25:
  }
    operator delete(v16);
  return v14;
}

void sub_2194A8960(uint64_t *a1, unint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[1];
  if (0xF128CFC4A33F128DLL * ((v4 - v6) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v12 = v6 + 552 * a2;
      uint64_t v13 = 552 * a2;
      do
      {
        sub_2194A8BC8(v6);
        v6 += 552;
        v13 -= 552;
      }
      while (v13);
      uint64_t v6 = v12;
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = 0xF128CFC4A33F128DLL * ((v6 - *a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x76B981DAE6076BLL) {
      sub_219486AE4();
    }
    unint64_t v9 = 0xF128CFC4A33F128DLL * ((v4 - *a1) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3B5CC0ED7303B5) {
      unint64_t v10 = 0x76B981DAE6076BLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x76B981DAE6076BLL) {
        sub_219486AFC();
      }
      long long v11 = (char *)operator new(552 * v10);
    }
    else
    {
      long long v11 = 0;
    }
    uint64_t v14 = (uint64_t)&v11[552 * v7];
    uint64_t v21 = v14;
    int v22 = &v11[552 * v10];
    uint64_t v15 = 552 * a2;
    unint64_t v16 = v14 + 552 * a2;
    do
    {
      sub_2194A8BC8(v14);
      v14 += 552;
      v15 -= 552;
    }
    while (v15);
    sub_2194A8D8C(v5, a1[1], a1[1], *a1, *a1, v21, v21);
    long long v18 = (char *)*a1;
    long long v17 = (char *)a1[1];
    *a1 = v19;
    a1[1] = v16;
    a1[2] = (uint64_t)v22;
    if (v17 != v18)
    {
      do
      {
        int v20 = v17 - 552;
        sub_21949AABC((uint64_t)(v17 - 312));
        long long v17 = v20;
      }
      while (v20 != v18);
    }
    if (v18) {
      operator delete(v18);
    }
  }
}

void sub_2194A8B3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2194A8B70((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2194A8B50(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2194A8B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2194A8B70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2194A8B70(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 552;
    sub_21949AABC(i - 312);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2194A8BC8(uint64_t a1)
{
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  sub_219488D70(a1 + 240, 0x40uLL);
  uint64_t v2 = *(void *)(a1 + 264);
  unint64_t v3 = *(void *)(a1 + 272) - v2;
  if (v3 >= 0x100)
  {
    if (v3 != 256) {
      *(void *)(a1 + 272) = v2 + 256;
    }
  }
  else
  {
    sub_219488D70(a1 + 264, 64 - (v3 >> 2));
  }
  uint64_t v4 = *(void *)(a1 + 288);
  unint64_t v5 = *(void *)(a1 + 296) - v4;
  if (v5 >= 0x100)
  {
    if (v5 != 256) {
      *(void *)(a1 + 296) = v4 + 256;
    }
  }
  else
  {
    sub_219488D70(a1 + 288, 64 - (v5 >> 2));
  }
  uint64_t v6 = *(void *)(a1 + 312);
  unint64_t v7 = *(void *)(a1 + 320) - v6;
  if (v7 >= 0x100)
  {
    if (v7 != 256) {
      *(void *)(a1 + 320) = v6 + 256;
    }
  }
  else
  {
    sub_219488D70(a1 + 312, 64 - (v7 >> 2));
  }
  uint64_t v8 = *(void *)(a1 + 336);
  unint64_t v9 = *(void *)(a1 + 344) - v8;
  if (v9 >= 0x100)
  {
    if (v9 != 256) {
      *(void *)(a1 + 344) = v8 + 256;
    }
  }
  else
  {
    sub_219488D70(a1 + 336, 64 - (v9 >> 2));
  }
  uint64_t v10 = *(void *)(a1 + 360);
  unint64_t v11 = *(void *)(a1 + 368) - v10;
  if (v11 >= 0x100)
  {
    if (v11 != 256) {
      *(void *)(a1 + 368) = v10 + 256;
    }
  }
  else
  {
    sub_219488D70(a1 + 360, 64 - (v11 >> 2));
  }
  uint64_t v12 = *(void *)(a1 + 384);
  unint64_t v13 = *(void *)(a1 + 392) - v12;
  if (v13 >= 0x100)
  {
    if (v13 != 256) {
      *(void *)(a1 + 392) = v12 + 256;
    }
  }
  else
  {
    sub_219488D70(a1 + 384, 64 - (v13 >> 2));
  }
  uint64_t v14 = *(void *)(a1 + 408);
  unint64_t v15 = *(void *)(a1 + 416) - v14;
  if (v15 < 0x100)
  {
    sub_219488D70(a1 + 408, 64 - (v15 >> 2));
    return a1;
  }
  if (v15 == 256) {
    return a1;
  }
  *(void *)(a1 + 416) = v14 + 256;
  return a1;
}

void sub_2194A8D78(_Unwind_Exception *a1)
{
  sub_21949AABC(v1);
  _Unwind_Resume(a1);
}

__n128 sub_2194A8D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      uint64_t v10 = (_OWORD *)(a7 + v7 - 552);
      long long v11 = *(_OWORD *)(a3 + v7 - 552);
      long long v12 = *(_OWORD *)(a3 + v7 - 520);
      v10[1] = *(_OWORD *)(a3 + v7 - 536);
      v10[2] = v12;
      _OWORD *v10 = v11;
      long long v13 = *(_OWORD *)(a3 + v7 - 504);
      long long v14 = *(_OWORD *)(a3 + v7 - 488);
      long long v15 = *(_OWORD *)(a3 + v7 - 456);
      v10[5] = *(_OWORD *)(a3 + v7 - 472);
      v10[6] = v15;
      v10[3] = v13;
      v10[4] = v14;
      long long v16 = *(_OWORD *)(a3 + v7 - 440);
      long long v17 = *(_OWORD *)(a3 + v7 - 424);
      long long v18 = *(_OWORD *)(a3 + v7 - 392);
      v10[9] = *(_OWORD *)(a3 + v7 - 408);
      v10[10] = v18;
      v10[7] = v16;
      v10[8] = v17;
      long long v19 = *(_OWORD *)(a3 + v7 - 376);
      long long v20 = *(_OWORD *)(a3 + v7 - 360);
      long long v21 = *(_OWORD *)(a3 + v7 - 328);
      int v22 = (void *)(a7 + v7 - 312);
      v10[13] = *(_OWORD *)(a3 + v7 - 344);
      v10[14] = v21;
      uint64_t v23 = a3 + v7 - 312;
      *(void *)(a7 + v7 - 304) = 0;
      *int v22 = 0;
      _OWORD v10[11] = v19;
      v10[12] = v20;
      v22[2] = 0;
      *(_OWORD *)int v22 = *(_OWORD *)v23;
      *(void *)(a7 + v7 - 296) = *(void *)(a3 + v7 - 296);
      *(void *)(a3 + v7 - 304) = 0;
      *(void *)uint64_t v23 = 0;
      int v24 = (void *)(a7 + v7 - 288);
      *(void *)(v23 + 16) = 0;
      uint64_t v25 = a3 + v7 - 288;
      *(void *)(a7 + v7 - 280) = 0;
      *int v24 = 0;
      v24[2] = 0;
      *(_OWORD *)int v24 = *(_OWORD *)v25;
      *(void *)(a7 + v7 - 272) = *(void *)(a3 + v7 - 272);
      *(void *)(a3 + v7 - 280) = 0;
      *(void *)uint64_t v25 = 0;
      *(void *)(v25 + 16) = 0;
      int v26 = (void *)(a7 + v7 - 264);
      int v27 = (_OWORD *)(a3 + v7 - 264);
      *int v26 = 0;
      *(void *)(v8 - 256) = 0;
      *(void *)(v8 - 248) = 0;
      *(_OWORD *)int v26 = *v27;
      *(void *)(v8 - 248) = *(void *)(a3 + v7 - 248);
      *(void *)int v27 = 0;
      *(void *)(v9 - 256) = 0;
      *(void *)(v9 - 248) = 0;
      *(void *)(v8 - 240) = 0;
      *(void *)(v8 - 232) = 0;
      *(void *)(v8 - 224) = 0;
      *(_OWORD *)(v8 - 240) = *(_OWORD *)(a3 + v7 - 240);
      *(void *)(v8 - 224) = *(void *)(a3 + v7 - 224);
      *(void *)(v9 - 240) = 0;
      *(void *)(v9 - 232) = 0;
      *(void *)(v9 - 224) = 0;
      *(void *)(v8 - 216) = 0;
      *(void *)(v8 - 208) = 0;
      *(void *)(v8 - 200) = 0;
      *(_OWORD *)(v8 - 216) = *(_OWORD *)(a3 + v7 - 216);
      *(void *)(v8 - 200) = *(void *)(a3 + v7 - 200);
      *(void *)(v9 - 216) = 0;
      *(void *)(v9 - 208) = 0;
      *(void *)(v9 - 200) = 0;
      *(void *)(v8 - 192) = 0;
      *(void *)(v8 - 184) = 0;
      *(void *)(v8 - 176) = 0;
      *(_OWORD *)(v8 - 192) = *(_OWORD *)(a3 + v7 - 192);
      *(void *)(v8 - 176) = *(void *)(a3 + v7 - 176);
      *(void *)(v9 - 192) = 0;
      *(void *)(v9 - 184) = 0;
      *(void *)(v9 - 176) = 0;
      *(void *)(v8 - 168) = 0;
      *(void *)(v8 - 160) = 0;
      *(void *)(v8 - 152) = 0;
      *(_OWORD *)(v8 - 168) = *(_OWORD *)(a3 + v7 - 168);
      *(void *)(v8 - 152) = *(void *)(a3 + v7 - 152);
      *(void *)(v9 - 168) = 0;
      *(void *)(v9 - 160) = 0;
      *(void *)(v9 - 152) = 0;
      *(void *)(v8 - 144) = 0;
      *(void *)(v8 - 136) = 0;
      *(void *)(v8 - 128) = 0;
      *(_OWORD *)(v8 - 144) = *(_OWORD *)(a3 + v7 - 144);
      *(void *)(v8 - 128) = *(void *)(a3 + v7 - 128);
      *(void *)(v9 - 136) = 0;
      *(void *)(v9 - 128) = 0;
      *(void *)(v9 - 144) = 0;
      long long v28 = *(_OWORD *)(a3 + v7 - 40);
      long long v29 = *(_OWORD *)(a3 + v7 - 24);
      uint64_t v30 = *(void *)(a3 + v7 - 8);
      *(_OWORD *)(v8 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(void *)(v8 - 8) = v30;
      *(_OWORD *)(v8 - 24) = v29;
      *(_OWORD *)(v8 - 40) = v28;
      __n128 result = *(__n128 *)(a3 + v7 - 120);
      long long v32 = *(_OWORD *)(a3 + v7 - 104);
      long long v33 = *(_OWORD *)(a3 + v7 - 88);
      *(_OWORD *)(v8 - 72) = *(_OWORD *)(a3 + v7 - 72);
      *(_OWORD *)(v8 - 88) = v33;
      *(_OWORD *)(v8 - 104) = v32;
      *(__n128 *)(v8 - 120) = result;
      v7 -= 552;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t sub_2194A8F90(unsigned int *a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a2 + 50);
  BOOL v3 = v2 > 6 || a1[5] > v2;
  unsigned int v4 = *(_DWORD *)a2;
  unsigned int v5 = *(_DWORD *)(a2 + 4);
  BOOL v7 = v3 || v4 > *a1 || v5 > a1[1];
  int v8 = *(__int16 *)(a2 + 14);
  unsigned int v9 = *(__int16 *)(a2 + 18);
  signed int v10 = *(__int16 *)(a2 + 12);
  unsigned int v11 = ((v8 | v10) >> 15) & 1;
  if (v7) {
    LOWORD(v11) = 1;
  }
  if (v8 > (int)v9) {
    __int16 v12 = 1;
  }
  else {
    __int16 v12 = v11;
  }
  BOOL v15 = v4 >= v9;
  unsigned int v13 = *(__int16 *)(a2 + 16);
  if (!v15) {
    __int16 v12 = 1;
  }
  if (v10 > (int)v13) {
    __int16 v12 = 1;
  }
  if (v5 < v13) {
    __int16 v12 = 1;
  }
  char v14 = v2 - 1;
  if (v12) {
    BOOL v15 = 0;
  }
  else {
    BOOL v15 = v4 >> v14 >= a1[2];
  }
  unsigned int v16 = v5 >> v14;
  BOOL v18 = v15 && v16 >= a1[3] && a1[10] >= *(unsigned __int16 *)(a2 + 46);
  unsigned int v19 = *(_DWORD *)(a2 + 24);
  int v21 = !v18 || *(_DWORD *)(a2 + 28) > v19;
  if (*(unsigned char *)(a2 + 42))
  {
    unsigned int v22 = *(unsigned __int16 *)(a2 + 38);
    BOOL v23 = a1[6] <= v22 && a1[8] >= v22;
    unsigned int v24 = *(unsigned __int16 *)(a2 + 40);
    BOOL v25 = !v23 || a1[7] > v24;
    BOOL v26 = !v25 && a1[9] >= v24;
    unsigned int v27 = 2 * v22;
    BOOL v28 = v26 && v4 >= v27;
    if (!v28 || v5 < 2 * v24) {
      int v21 = 1;
    }
  }
  if (v19 <= a1[14]) {
    return ((*(unsigned char *)(a2 + 68) & 0xFD) != 0) & ~v21;
  }
  else {
    return 0;
  }
}

void sub_2194A9080(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v4 = *(unsigned __int16 *)(a2 + 38);
  if (*(_DWORD *)(a1 + 24) > v4 || *(_DWORD *)(a1 + 32) < v4) {
    sub_219507C0C();
  }
  unsigned int v8 = *(unsigned __int16 *)(a2 + 40);
  if (*(_DWORD *)(a1 + 28) > v8 || *(_DWORD *)(a1 + 36) < v8) {
    sub_219507C44();
  }
  char v11 = a3;
  *(void *)(a4 + 152) = 0;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 8) = 0u;
  *(void *)a4 = 626;
  unint64_t v12 = ((unint64_t)*(unsigned __int8 *)(a2 + 42) << 10) | 0x18272;
  *(void *)a4 = v12;
  uint64_t v13 = 0x300000000;
  if (*(unsigned __int16 *)(a2 + 50) - 1 == a3) {
    uint64_t v13 = 0x200000000;
  }
  uint64_t v14 = 0xE2400000000;
  if (!a3) {
    uint64_t v14 = 0xF4000000000;
  }
  unint64_t v15 = v14 | v12 | v13;
  *(void *)a4 = v15;
  unint64_t v16 = v15 | ((unint64_t)*(unsigned __int8 *)(a2 + 43) << 44);
  *(void *)a4 = v16;
  *(void *)a4 = v16 | ((unint64_t)(*(_WORD *)(a2 + 46) & 0x3F) << 45);
  sub_2194A92E0(a1, a2, a3, (_WORD *)a4);
  *(_WORD *)(a4 + 66) = *(_WORD *)(a4 + 66) & 0xFC00 | 0x10;
  *(_DWORD *)(a4 + 68) = *(_DWORD *)(a4 + 68) & 0xFFFFC000 | 0x20;
  unsigned int v17 = *(_DWORD *)a2 >> v11;
  *(_DWORD *)(a4 + 72) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a4 + 76) = v17;
  *(_DWORD *)(a4 + 80) = *(_DWORD *)(a4 + 8);
  int v18 = *(unsigned __int16 *)(a2 + 38);
  *(_WORD *)(a4 + 88) = v18;
  int v19 = *(unsigned __int16 *)(a2 + 40);
  *(_WORD *)(a4 + 90) = v19;
  int v20 = *(unsigned __int16 *)(a1 + 48);
  int v21 = (v18 + v20 * *(unsigned __int16 *)(a4 + 12) - 1) / v18;
  if (v21 <= 2) {
    LOWORD(v21) = 2;
  }
  *(_WORD *)(a4 + 84) = v21;
  int v22 = (v19 + *(unsigned __int16 *)(a4 + 14) * v20 - 1) / v19;
  if (v22 <= 2) {
    LOWORD(v22) = 2;
  }
  *(_WORD *)(a4 + 86) = v22;
  if (v20)
  {
    unint64_t v23 = 0;
    uint64_t v24 = a4 + 16;
    LODWORD(v25) = 1;
    do
    {
      if (v25)
      {
        unint64_t v26 = 0;
        do
        {
          *(_WORD *)(v24 + 2 * v26++) = *(_WORD *)(a2 + 20);
          unint64_t v25 = *(unsigned __int16 *)(a1 + 48);
        }
        while (v26 < v25);
      }
      ++v23;
      v24 += 10;
    }
    while (v23 < v25);
  }
  if ((*(unsigned char *)(a4 + 1) & 4) != 0)
  {
    uint64_t v27 = sub_2194C6708(*(unsigned __int16 *)(a4 + 88), *(unsigned __int16 *)(a4 + 84), *(unsigned __int16 *)(a4 + 86));
    *(void *)a4 = *(void *)a4 & 0xFFFFFFFFFFF1FFFFLL | ((log2((double)(unint64_t)v27) & 7) << 17);
    unsigned int v17 = *(_DWORD *)a2 >> v11;
  }
  if (5 * *(unsigned __int16 *)(a4 + 12) + *(unsigned __int16 *)(a4 + 8) > v17) {
    sub_219507C7C();
  }
  if (5 * *(unsigned __int16 *)(a4 + 14) + *(unsigned __int16 *)(a4 + 10) > *(_DWORD *)(a2 + 4) >> v11) {
    sub_219507CB4();
  }
}

uint64_t sub_2194A92E0(uint64_t a1, uint64_t a2, char a3, _WORD *a4)
{
  if (*(_DWORD *)(a1 + 16) != 4) {
    sub_219507D24();
  }
  if (*(_WORD *)(a1 + 48) != 5) {
    sub_219507CEC();
  }
  int v5 = *(__int16 *)(a2 + 14);
  uint64_t v6 = (*(_DWORD *)(a2 + 4) >> a3);
  if (*(_WORD *)(a2 + 16)) {
    int v7 = *(__int16 *)(a2 + 16) >> a3;
  }
  else {
    int v7 = *(_DWORD *)(a2 + 4) >> a3;
  }
  uint64_t v8 = (*(_DWORD *)a2 >> a3);
  if (*(_WORD *)(a2 + 18)) {
    int v9 = *(__int16 *)(a2 + 18) >> a3;
  }
  else {
    int v9 = *(_DWORD *)a2 >> a3;
  }
  signed int v10 = *(__int16 *)(a2 + 12) >> a3;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  sub_2194C65E4(v8, (unsigned int *)&v13 + 1, (signed int *)&v13, v5 >> a3, v9);
  uint64_t result = sub_2194C65E4(v6, (unsigned int *)&v12 + 1, (signed int *)&v12, v10, v7);
  a4[4] = WORD2(v13);
  a4[6] = v13;
  a4[5] = WORD2(v12);
  a4[7] = v12;
  return result;
}

void sub_2194A93B4(uint64_t a1, long long *a2)
{
  *(_OWORD *)a1 = xmmword_21950C4F0;
  *(_DWORD *)(a1 + 16) = 1000;
  *(void *)(a1 + 20) = 0x4100000042340000;
  *(_OWORD *)(a1 + 28) = xmmword_21950C3D0;
  *(void *)(a1 + 44) = 0x3E8000001388;
  *(_DWORD *)(a1 + 52) = 16777217;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0;
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)a1 = v2;
  if (*((unsigned char *)a2 + 55)) {
    sub_2194BDDD4(*(_DWORD *)a1, *(_DWORD *)(a1 + 4));
  }
  operator new();
}

void sub_2194A94F4(_Unwind_Exception *exception_object)
{
  long long v4 = (void *)v1[11];
  if (v4)
  {
    v1[12] = v4;
    operator delete(v4);
    int v5 = (void *)v1[8];
    if (!v5)
    {
LABEL_3:
      uint64_t v6 = (void *)*v2;
      void *v2 = 0;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int v5 = (void *)v1[8];
    if (!v5) {
      goto LABEL_3;
    }
  }
  v1[9] = v5;
  operator delete(v5);
  uint64_t v6 = (void *)*v2;
  void *v2 = 0;
  if (!v6) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  sub_21949AD2C((uint64_t)v2, v6);
  _Unwind_Resume(exception_object);
}

void sub_2194A957C(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 44))
  {
    *(_OWORD *)unsigned int v56 = 0u;
    long long v57 = 0u;
    uint64_t v45 = 0x3E4CCCCD3DCCCCCDLL;
    long long v46 = xmmword_21950C500;
    *(int64x2_t *)unsigned int v47 = vdupq_n_s64(3uLL);
    *(void *)&v47[16] = 1;
    *(_WORD *)&v47[24] = 0;
    *(_OWORD *)int v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    uint64_t v51 = 0x404000003F800000;
    float v52 = 0.0;
    *(void *)&v44[16] = 1;
    *(_WORD *)&v44[24] = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)&long long v5 = *(void *)a1;
    *((void *)&v5 + 1) = HIDWORD(*(void *)a1);
    long long v6 = v5;
    *(void *)&long long v5 = (int)v4;
    *((void *)&v5 + 1) = SHIDWORD(v4);
    long long v43 = v6;
    *(_OWORD *)unsigned int v44 = v5;
    *(_OWORD *)((char *)v54 + 10) = *(_OWORD *)&v44[10];
    v54[0] = v5;
    *(_OWORD *)unsigned int v55 = 0u;
    long long v53 = v6;
    sub_2194B18D4((uint64_t)&v53, (uint64_t *)(a2 + 72));
    long long v46 = v43;
    *(_OWORD *)unsigned int v47 = v5;
    *(_OWORD *)&v47[10] = *(_OWORD *)&v44[10];
    sub_2194B2C6C((uint64_t)&v46, (uint64_t *)(a2 + 24));
    uint64_t v45 = 0x3F80000000000000;
    *((float *)&v51 + 1) = (float)(unint64_t)sub_2194F4090((uint64_t)&v43) / 0.69315;
    uint64_t v7 = sub_2194F4090((uint64_t)&v43);
    LODWORD(v51) = exp2f(1.0 / (float)(unint64_t)v7);
    float v52 = logf(*((float *)&v45 + 1));
    kdebug_trace();
    sub_2194B8640(*(void *)(a1 + 56), (uint64_t)&v45, &v53, (void *)(a2 + 96), a1 + 64, a1 + 88);
    kdebug_trace();
    if (*(unsigned char *)(a1 + 53))
    {
      unint64_t v9 = *(unsigned int *)(a1 + 44);
      unint64_t v10 = *(void *)(a1 + 64);
      char v11 = *(float **)(a1 + 72);
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v11 - v10) >> 4);
      if (v12 > v9)
      {
        unint64_t v13 = 126 - 2 * __clz(v12);
        uint64_t v14 = v11 == (float *)v10 ? 0 : v13;
        v8.n128_f64[0] = sub_2194B3FF8(v10, v11, (uint64_t)v58, v14, 1, v8);
        uint64_t v15 = *(void *)(a1 + 64);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 72) - v15) >> 4) > v9) {
          *(void *)(a1 + 72) = v15 + 48 * v9;
        }
      }
    }
    if (*(_DWORD *)a1 == 640 && *(_DWORD *)(a1 + 4) == 480)
    {
      unint64_t v16 = *(unsigned int *)(a1 + 16);
      unint64_t v17 = *(void *)(a1 + 64);
      int v18 = *(float **)(a1 + 72);
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v18 - v17) >> 4);
      if (v19 > v16)
      {
        unint64_t v20 = 126 - 2 * __clz(v19);
        uint64_t v21 = v18 == (float *)v17 ? 0 : v20;
        sub_2194B3FF8(v17, v18, (uint64_t)v58, v21, 1, v8);
        uint64_t v22 = *(void *)(a1 + 64);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 72) - v22) >> 4) > v16) {
          *(void *)(a1 + 72) = v22 + 48 * v16;
        }
      }
    }
    kdebug_trace();
    if (*(unsigned char *)(a1 + 52))
    {
      sub_2194A9BC0((float **)(a1 + 64), (uint64_t)&v45, 1);
      sub_2194A9BC0((float **)(a1 + 88), (uint64_t)&v45, 1);
    }
    kdebug_trace();
    kdebug_trace();
    uint64_t v23 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 72) != v23)
    {
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      do
      {
        if (sub_2194ABB88((uint64_t)v58, (uint64_t)&v45, *(float *)(v23 + v24 + 16), *(float *)(v23 + v24 + 20), *(float *)(v23 + v24 + 40), *(float *)(v23 + v24 + 12), 2.0, 1.0))sub_2194A68C4(a2, *(unsigned char *)(v23 + v24 + 28), (uint64_t)v58, *(float *)(v23 + v24 + 16), *(float *)(v23 + v24 + 20), *(float *)(v23 + v24 + 40), *(float *)(v23 + v24 + 12), *(float *)(v23 + v24 + 44)); {
        ++v25;
        }
        uint64_t v23 = *(void *)(a1 + 64);
        v24 += 48;
      }
      while (v25 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 72) - v23) >> 4));
    }
    uint64_t v26 = *(void *)(a1 + 88);
    if (*(void *)(a1 + 96) == v26)
    {
      int v29 = 0;
    }
    else
    {
      uint64_t v27 = 0;
      unint64_t v28 = 0;
      int v29 = 0;
      do
      {
        if (*(_DWORD *)(*(void *)(a2 + 400) + 4) >= *(_DWORD *)(a2 + 16)) {
          break;
        }
        if (sub_2194ABB88((uint64_t)v58, (uint64_t)&v45, *(float *)(v26 + v27 + 16), *(float *)(v26 + v27 + 20), *(float *)(v26 + v27 + 40), *(float *)(v26 + v27 + 12), 2.0, 1.0))
        {
          sub_2194A68C4(a2, *(unsigned char *)(v26 + v27 + 28), (uint64_t)v58, *(float *)(v26 + v27 + 16), *(float *)(v26 + v27 + 20), *(float *)(v26 + v27 + 40), *(float *)(v26 + v27 + 12), *(float *)(v26 + v27 + 44));
          ++v29;
        }
        ++v28;
        uint64_t v26 = *(void *)(a1 + 88);
        v27 += 48;
      }
      while (v28 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 96) - v26) >> 4));
    }
    *(_DWORD *)(*(void *)(a2 + 400) + 80) = v29;
    kdebug_trace();
    if (*((void *)&v49 + 1))
    {
      *(void *)&long long v50 = *((void *)&v49 + 1);
      operator delete(*((void **)&v49 + 1));
    }
    uint64_t v30 = (char *)v48[0];
    if (v48[0])
    {
      int v31 = v48[0];
      if (v48[1] != v48[0])
      {
        long long v32 = (char *)v48[1] - 144;
        long long v33 = (char *)v48[1] - 144;
        int v34 = (void (***)(char *))((char *)v48[1] - 144);
        do
        {
          unsigned int v35 = *v34;
          v34 -= 18;
          (*v35)(v33);
          v32 -= 144;
          BOOL v36 = v33 == v30;
          long long v33 = (char *)v34;
        }
        while (!v36);
        int v31 = v48[0];
      }
      v48[1] = v30;
      operator delete(v31);
    }
    if (v56[1])
    {
      *(void **)&long long v57 = v56[1];
      operator delete(v56[1]);
    }
    unsigned int v37 = (char *)v55[0];
    if (v55[0])
    {
      int v38 = v55[0];
      if (v55[1] != v55[0])
      {
        int v39 = (char *)v55[1] - 144;
        int v40 = (char *)v55[1] - 144;
        int v41 = (void (***)(char *))((char *)v55[1] - 144);
        do
        {
          int v42 = *v41;
          v41 -= 18;
          (*v42)(v40);
          v39 -= 144;
          BOOL v36 = v40 == v37;
          int v40 = (char *)v41;
        }
        while (!v36);
        int v38 = v55[0];
      }
      v55[1] = v37;
      operator delete(v38);
    }
  }
}

void sub_2194A9B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2) {
    sub_21947E028(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_2194A9BC0(float **a1, uint64_t a2, int a3)
{
  if (a3)
  {
    v625[0].i32[0] = 1191181824;
    uint64_t result = (unsigned __int8 *)memcpy((char *)v625 + 4, "\b", 0x21CuLL);
    long long v6 = *a1;
    v623 = a1[1];
    if (*a1 != v623)
    {
      float32x4_t v624 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      do
      {
        float v12 = v6[4];
        float v13 = v6[5];
        float v14 = v6[3];
        long long v632 = 0u;
        memset(v633, 0, sizeof(v633));
        long long v630 = 0u;
        long long v631 = 0u;
        long long v628 = 0u;
        long long v629 = 0u;
        long long v627 = 0u;
        int v15 = *(_DWORD *)(a2 + 24);
        int v16 = *(_DWORD *)(a2 + 32);
        int v17 = sub_2194F4090(a2 + 8);
        float v18 = (float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v14) & 0x807FFFFF | 0x3F800000) * -0.33333)
                                            + 2.0)
                                    * COERCE_FLOAT(LODWORD(v14) & 0x807FFFFF | 0x3F800000))
                            + -1.6667)
                    + (float)((LODWORD(v14) >> 23) - 127))
            * 0.69315;
        int v19 = vcvtms_s32_f32(*(float *)(a2 + 108) * (float)(v18 - *(float *)(a2 + 112)));
        if (v19 < 0)
        {
          int v20 = 0;
          int v21 = 0;
        }
        else if (v17 * v15 <= v19)
        {
          int v20 = v15 - 1;
          int v21 = v16 - 1;
        }
        else
        {
          int v20 = v19 / v17;
          int v21 = v19 % v17;
        }
        float v22 = v14 + v14;
        float v23 = 1.0 / (float)(1 << v20);
        float v24 = v12 * v23;
        float v25 = v13 * v23;
        uint64_t v26 = *(void *)(a2 + 32);
        uint64_t v27 = (void *)(*(void *)(a2 + 56) + 144 * (v26 * v20 + v21));
        uint64_t v28 = v27[9];
        unint64_t v30 = v27[4];
        uint64_t v29 = v27[5];
        unint64_t v31 = v27[6];
        float v32 = v24 + 0.0;
        float v33 = (float)v30 + -1.001;
        if (v33 >= v32) {
          float v33 = v32;
        }
        if (v32 >= 0.0) {
          float v34 = v33;
        }
        else {
          float v34 = 0.0;
        }
        float v35 = v25 + 0.0;
        float v36 = (float)v31 + -1.001;
        if (v36 >= v35) {
          float v36 = v35;
        }
        if (v35 >= 0.0) {
          float v37 = v36;
        }
        else {
          float v37 = 0.0;
        }
        uint64_t v38 = v34;
        uint64_t v39 = v37;
        uint64_t v40 = (v38 + 1);
        uint64_t v41 = v28 + v29 * v39;
        uint64_t v42 = v41 + v29;
        float v43 = (float)v40 - v34;
        float v44 = (float)(v39 + 1) - v37;
        float v45 = v43 * v44;
        *(float *)&unsigned int v46 = v34 - (float)v34;
        float v47 = *(float *)&v46 * v44;
        *(float *)&unsigned int v48 = (float)v37;
        float v49 = v37 - *(float *)&v48;
        *(float *)&unsigned int v50 = v43 * v49;
        float v51 = *(float *)&v46 * v49;
        LOBYTE(v46) = *(unsigned char *)(v41 + v38);
        LOBYTE(v48) = *(unsigned char *)(v41 + v40);
        *(float *)&unsigned int v52 = v47 * (float)v48;
        float v53 = *(float *)&v52 + (float)(v45 * (float)v46);
        LOBYTE(v52) = *(unsigned char *)(v42 + v38);
        float v54 = v53 + (float)(*(float *)&v50 * (float)v52);
        LOBYTE(v50) = *(unsigned char *)(v42 + v40);
        v626[0] = (int)(float)((float)(v54 + (float)(v51 * (float)v50)) * 255.0);
        int v55 = *(_DWORD *)(a2 + 24);
        int v56 = sub_2194F4090(a2 + 8);
        int v62 = vcvtms_s32_f32((float)(v18 - *(float *)(a2 + 112)) * *(float *)(a2 + 108));
        if (v62 < 0)
        {
          int v64 = 0;
          int v63 = 0;
        }
        else if (v56 * v55 <= v62)
        {
          int v63 = v55 - 1;
          int v64 = v26 - 1;
        }
        else
        {
          int v63 = v62 / v56;
          int v64 = v62 % v56;
        }
        float v65 = (float)(1 << v63);
        *(float *)v58.i32 = v12 * (float)(1.0 / v65);
        *(float *)v59.i32 = v13 * (float)(1.0 / v65);
        float v66 = v22 / v65;
        uint64_t v67 = *(void *)(a2 + 32);
        unsigned int v68 = (void *)(*(void *)(a2 + 56) + 144 * (v67 * v63 + v64));
        uint64_t v69 = v68[9];
        unint64_t v71 = v68[4];
        uint64_t v70 = v68[5];
        unint64_t v72 = v68[6];
        *(float *)v57.i32 = (float)v71 + -1.001;
        float v73 = *(float *)v59.i32 + (float)(v66 * 0.70711);
        *(float *)v60.i32 = (float)v72 + -1.001;
        if (*(float *)v60.i32 >= v73) {
          float v74 = *(float *)v59.i32 + (float)(v66 * 0.70711);
        }
        else {
          float v74 = (float)v72 + -1.001;
        }
        if (v73 < 0.0) {
          float v74 = 0.0;
        }
        uint64_t v75 = v74;
        uint64_t v76 = v69 + v70 * v75;
        float v77 = (float)(v75 + 1) - v74;
        float v78 = v74 - (float)v74;
        v79.f32[0] = v66 + *(float *)v58.i32;
        v79.f32[1] = *(float *)v58.i32 + (float)(v66 * 0.5);
        *(float32x2_t *)&v79.u32[2] = vmla_n_f32((float32x2_t)vdup_lane_s32(v58, 0), (float32x2_t)0xBF000000BF800000, v66);
        float32x4_t v80 = (float32x4_t)vdupq_lane_s32(v57, 0);
        float32x4_t v81 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v79, v80), (int8x16_t)v80, (int8x16_t)v79), (int8x16_t)vcltzq_f32(v79));
        int32x4_t v82 = (int32x4_t)vcvtq_u32_f32(v81);
        v80.i64[0] = 0x100000001;
        v80.i64[1] = 0x100000001;
        int32x4_t v83 = vaddq_s32(v82, (int32x4_t)v80);
        float32x4_t v84 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)v83), v81);
        float32x4_t v85 = vsubq_f32(v81, vcvtq_f32_u32((uint32x4_t)v82));
        *(float *)&unsigned int v86 = vmuls_lane_f32(v78, v84, 3);
        int8x16_t v87 = (int8x16_t)vtrn2q_s32(v82, v83);
        int8x16_t v88 = vextq_s8(v87, v87, 8uLL);
        *(void *)&long long v89 = v88.u32[2];
        *((void *)&v89 + 1) = v88.u32[3];
        long long v90 = v89;
        *(void *)&long long v89 = v88.u32[0];
        v88.i8[0] = *(unsigned char *)(v76 + v88.u32[0]);
        LOBYTE(v61) = *(unsigned char *)(v76 + v88.u32[1]);
        *(float *)&unsigned int v91 = vmuls_lane_f32(v77, v85, 3) * (float)v61;
        float v92 = *(float *)&v91 + (float)(vmuls_lane_f32(v77, v84, 3) * (float)v88.u32[0]);
        LOBYTE(v91) = *(unsigned char *)(v76 + v70 + v89);
        *(float *)&unsigned int v93 = (float)v91;
        float v94 = v92 + (float)(*(float *)&v86 * *(float *)&v93);
        LOBYTE(v93) = *(unsigned char *)(v76 + v70 + v88.u32[1]);
        *(float *)&unsigned int v95 = (float)(v94 + (float)(vmuls_lane_f32(v78, v85, 3) * (float)v93)) * 255.0;
        HIWORD(v627) = (int)*(float *)&v95;
        LOBYTE(v95) = *(unsigned char *)(v76 + v90);
        *(float *)&unsigned int v96 = (float)v95;
        LOBYTE(v86) = *(unsigned char *)(v76 + *((void *)&v90 + 1));
        float v97 = (float)(vmuls_lane_f32(v77, *(float32x2_t *)v85.f32, 1) * (float)v86)
            + (float)(vmuls_lane_f32(v77, *(float32x2_t *)v84.f32, 1) * *(float *)&v96);
        LOBYTE(v96) = *(unsigned char *)(v76 + v70 + v90);
        *(float *)&unsigned int v98 = (float)v96;
        float v99 = v97 + (float)(vmuls_lane_f32(v78, *(float32x2_t *)v84.f32, 1) * *(float *)&v98);
        LOBYTE(v98) = *(unsigned char *)(v76 + v70 + *((void *)&v90 + 1));
        LODWORD(v75) = (int)(float)((float)(v99 + (float)(vmuls_lane_f32(v78, *(float32x2_t *)v85.f32, 1) * (float)v98))
                                  * 255.0);
        float32x2_t v100 = vmla_n_f32((float32x2_t)vdup_lane_s32(v59, 0), (float32x2_t)0xBF3504F300000000, v66);
        float32x2_t v101 = (float32x2_t)vdup_lane_s32(v60, 0);
        float32x2_t v102 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v100, v101), (int8x8_t)v101, (int8x8_t)v100), (int8x8_t)vcltz_f32(v100));
        int32x2_t v103 = (int32x2_t)vcvt_u32_f32(v102);
        uint64_t v104 = v69 + v70 * v103.u32[0];
        unsigned int v105 = (unsigned __int8 *)(v104 + v70 + v82.u32[0]);
        unsigned int v106 = (unsigned __int8 *)(v104 + v70 + v83.u32[0]);
        uint64_t v107 = v69 + v70 * v103.u32[1];
        *(float32x2_t *)v108.f32 = vsub_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v103, (int32x2_t)0x100000001)), v102);
        v108.i64[1] = v108.i64[0];
        *(float32x2_t *)v109.f32 = vsub_f32(v102, vcvt_f32_u32((uint32x2_t)v103));
        v109.i64[1] = v109.i64[0];
        float32x4_t v110 = vmulq_f32(v84, v108);
        float32x4_t v111 = vmulq_f32(v84, v109);
        float32x4_t v112 = vmulq_f32(v85, v109);
        v82.i16[0] = *(unsigned __int8 *)(v104 + v82.u32[0]);
        v82.i16[1] = *(unsigned __int8 *)(v107 + v90);
        v82.i16[2] = *(unsigned __int8 *)(v104 + v82.u32[2]);
        v82.i16[3] = *(unsigned __int8 *)(v107 + v89);
        uint64_t v113 = v83.u32[2];
        v83.i16[0] = *(unsigned __int8 *)(v104 + v83.u32[0]);
        v83.i16[1] = *(unsigned __int8 *)(v107 + *((void *)&v90 + 1));
        v83.i16[2] = *(unsigned __int8 *)(v104 + v83.u32[2]);
        v83.i16[3] = *(unsigned __int8 *)(v107 + v88.u32[1]);
        float32x4_t v114 = vmlaq_f32(vmulq_f32(vmulq_f32(v85, v108), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v83.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v82.i8)), v110);
        v82.i16[0] = *v105;
        v82.i16[1] = *(unsigned __int8 *)(v107 + v70 + v90);
        v82.i16[2] = *(unsigned __int8 *)(v104 + v70 + v82.u32[2]);
        v82.i16[3] = *(unsigned __int8 *)(v107 + v70 + v89);
        v85.i16[0] = *v106;
        v85.i16[1] = *(unsigned __int8 *)(v107 + v70 + *((void *)&v90 + 1));
        v85.i16[2] = *(unsigned __int8 *)(v104 + v70 + v113);
        v85.i16[3] = *(unsigned __int8 *)(v107 + v70 + v88.u32[1]);
        *(int16x4_t *)v114.f32 = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(vmlaq_f32(v114, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v82.i8)), v111), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v85.f32)), v112), v624)));
        *(int16x4_t *)v112.f32 = vrev32_s16(*(int16x4_t *)v114.f32);
        v112.i32[0] = v114.i32[0];
        LOWORD(v628) = v75;
        *(void *)((char *)&v628 + 2) = v112.i64[0];
        float v115 = v22 * 1.4142;
        float v116 = v14 * 1.4142;
        int v117 = *(_DWORD *)(a2 + 24);
        int v118 = sub_2194F4090(a2 + 8);
        int v123 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v116) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v116) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v116) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
        if (v123 < 0)
        {
          int v124 = 0;
          int v125 = 0;
        }
        else if (v118 * v117 <= v123)
        {
          int v124 = v117 - 1;
          int v125 = v67 - 1;
        }
        else
        {
          int v124 = v123 / v118;
          int v125 = v123 % v118;
        }
        float v126 = (float)(1 << v124);
        float v127 = v12 * (float)(1.0 / v126);
        float v128 = v13 * (float)(1.0 / v126);
        float v129 = v115 / v126;
        uint64_t v130 = *(void *)(a2 + 32);
        int v131 = (void *)(*(void *)(a2 + 56) + 144 * (v130 * v124 + v125));
        uint64_t v132 = v131[9];
        unint64_t v133 = v131[4];
        uint64_t v134 = v131[5];
        unint64_t v135 = v131[6];
        float v136 = v127 + (float)(v129 * 0.0);
        float v137 = (float)v133 + -1.001;
        if (v137 >= v136) {
          float v138 = v127 + (float)(v129 * 0.0);
        }
        else {
          float v138 = (float)v133 + -1.001;
        }
        if (v136 >= 0.0) {
          float v139 = v138;
        }
        else {
          float v139 = 0.0;
        }
        float v140 = (float)v135 + -1.001;
        if (v140 >= (float)(v128 - v129)) {
          float v141 = v128 - v129;
        }
        else {
          float v141 = (float)v135 + -1.001;
        }
        if ((float)(v128 - v129) < 0.0) {
          float v141 = 0.0;
        }
        uint64_t v142 = v139;
        uint64_t v143 = v141;
        uint64_t v144 = (v142 + 1);
        unsigned int v145 = v143 + 1;
        uint64_t v146 = v132 + v134 * v143;
        float v147 = (float)v144 - v139;
        float v148 = (float)v145 - v141;
        *(float *)&unsigned int v149 = v147 * v148;
        float v150 = v139 - (float)v139;
        float v151 = v150 * v148;
        float v152 = v141 - (float)v141;
        *(float *)&unsigned int v153 = v147 * v152;
        LOBYTE(v119) = *(unsigned char *)(v146 + v142);
        LOBYTE(v120) = *(unsigned char *)(v146 + v144);
        float v154 = (float)(v151 * (float)v120) + (float)(*(float *)&v149 * (float)v119);
        LOBYTE(v149) = *(unsigned char *)(v146 + v134 + v142);
        LOBYTE(v153) = *(unsigned char *)(v146 + v134 + v144);
        HIWORD(v628) = (int)(float)((float)((float)(v154 + (float)((float)(v147 * v152) * (float)v149))
                                          + (float)((float)(v150 * v152) * (float)v153))
                                  * 255.0);
        float v155 = v127 + (float)(v129 * 0.70711);
        if (v137 >= v155) {
          float v156 = v127 + (float)(v129 * 0.70711);
        }
        else {
          float v156 = v137;
        }
        if (v155 < 0.0) {
          float v156 = 0.0;
        }
        float v157 = v128 + (float)(v129 * 0.5);
        if (v140 >= v157) {
          float v158 = v128 + (float)(v129 * 0.5);
        }
        else {
          float v158 = v140;
        }
        if (v157 < 0.0) {
          float v158 = 0.0;
        }
        uint64_t v159 = v156;
        uint64_t v160 = v158;
        uint64_t v161 = (v159 + 1);
        unsigned int v162 = v160 + 1;
        uint64_t v163 = v132 + v134 * v160;
        uint64_t v164 = v163 + v134;
        float v165 = (float)v161 - v156;
        float v166 = (float)v162 - v158;
        float v167 = v156 - (float)v156;
        float v168 = v158 - (float)v158;
        LOBYTE(v121) = *(unsigned char *)(v163 + v159);
        LOBYTE(v122) = *(unsigned char *)(v163 + v161);
        float v169 = (float)v122;
        *(float *)&unsigned int v170 = (float)(v167 * v166) * v169;
        *(float *)&unsigned int v171 = *(float *)&v170 + (float)((float)(v165 * v166) * (float)v121);
        LOBYTE(v170) = *(unsigned char *)(v163 + v134 + v159);
        float v172 = *(float *)&v171 + (float)((float)(v165 * v168) * (float)v170);
        LOBYTE(v171) = *(unsigned char *)(v163 + v134 + v161);
        LOWORD(v629) = (int)(float)((float)(v172 + (float)((float)(v167 * v168) * (float)v171)) * 255.0);
        float v173 = v128 + (float)(v129 * -0.5);
        if (v140 >= v173) {
          float v174 = v128 + (float)(v129 * -0.5);
        }
        else {
          float v174 = v140;
        }
        if (v173 < 0.0) {
          float v174 = 0.0;
        }
        uint64_t v175 = v174;
        unsigned int v176 = v175 + 1;
        uint64_t v177 = v132 + v134 * v175;
        uint64_t v178 = v177 + v134;
        float v179 = (float)v176 - v174;
        *(float *)&unsigned int v180 = (float)v174;
        float v181 = v174 - *(float *)&v180;
        LOBYTE(v180) = *(unsigned char *)(v177 + v159);
        *(float *)&unsigned int v182 = (float)v180;
        LOBYTE(v169) = *(unsigned char *)(v177 + v161);
        *(float *)&unsigned int v183 = (float)(v167 * v179) * (float)LODWORD(v169);
        float v184 = *(float *)&v183 + (float)((float)(v165 * v179) * *(float *)&v182);
        LOBYTE(v183) = *(unsigned char *)(v177 + v134 + v159);
        LOBYTE(v182) = *(unsigned char *)(v177 + v134 + v161);
        WORD1(v629) = (int)(float)((float)((float)(v184 + (float)((float)(v165 * v181) * (float)v183))
                                         + (float)((float)(v167 * v181) * (float)v182))
                                 * 255.0);
        float v185 = v129 + v128;
        if (v140 >= v185) {
          float v140 = v185;
        }
        if (v185 >= 0.0) {
          float v186 = v140;
        }
        else {
          float v186 = 0.0;
        }
        uint64_t v187 = v186;
        uint64_t v188 = v132 + v134 * v187;
        uint64_t v189 = v188 + v134;
        float v190 = (float)(v187 + 1) - v186;
        float v191 = v147 * v190;
        float v192 = v150 * v190;
        *(float *)&unsigned int v193 = (float)v186;
        float v194 = v186 - *(float *)&v193;
        float v195 = v147 * v194;
        float v196 = v150 * v194;
        LOBYTE(v150) = *(unsigned char *)(v188 + v142);
        LOBYTE(v193) = *(unsigned char *)(v188 + v144);
        *(float *)&unsigned int v197 = (float)v193;
        float v198 = v192 * *(float *)&v197;
        LOBYTE(v197) = *(unsigned char *)(v189 + v142);
        *(float *)&unsigned int v199 = v198 + (float)(v191 * (float)LODWORD(v150));
        float v200 = *(float *)&v199 + (float)(v195 * (float)v197);
        LOBYTE(v199) = *(unsigned char *)(v189 + v144);
        float v201 = (float)v199;
        int v202 = (int)(float)((float)(v200 + (float)(v196 * v201)) * 255.0);
        float v203 = v127 + (float)(v129 * -0.70711);
        if (v137 >= v203) {
          float v204 = v203;
        }
        else {
          float v204 = v137;
        }
        if (v203 >= 0.0) {
          float v205 = v204;
        }
        else {
          float v205 = 0.0;
        }
        uint64_t v206 = v205;
        uint64_t v207 = (v206 + 1);
        float v208 = (float)v207 - v205;
        float v209 = v208 * v179;
        float v210 = v205 - (float)v205;
        float v211 = v210 * v179;
        *(float *)&unsigned int v212 = v208 * v181;
        LOBYTE(v201) = *(unsigned char *)(v177 + v206);
        *(float *)&unsigned int v213 = (float)LODWORD(v201);
        LOBYTE(v179) = *(unsigned char *)(v177 + v207);
        *(float *)&unsigned int v214 = v211 * (float)LODWORD(v179);
        float v215 = *(float *)&v214 + (float)(v209 * *(float *)&v213);
        LOBYTE(v214) = *(unsigned char *)(v178 + v206);
        LOBYTE(v213) = *(unsigned char *)(v178 + v207);
        int v216 = (int)(float)((float)((float)(v215 + (float)((float)(v208 * v181) * (float)v214))
                                  + (float)((float)(v210 * v181) * (float)v213))
                          * 255.0);
        WORD2(v629) = v202;
        float v217 = v208 * v166;
        float v218 = v210 * v166;
        LOBYTE(v166) = *(unsigned char *)(v163 + v206);
        *(float *)&unsigned int v219 = (float)LODWORD(v166);
        LOBYTE(v212) = *(unsigned char *)(v163 + v207);
        *(float *)&unsigned int v220 = v218 * (float)v212;
        float v221 = *(float *)&v220 + (float)(v217 * *(float *)&v219);
        LOBYTE(v220) = *(unsigned char *)(v164 + v206);
        LOBYTE(v219) = *(unsigned char *)(v164 + v207);
        WORD3(v629) = v216;
        WORD4(v629) = (int)(float)((float)((float)(v221 + (float)((float)(v208 * v168) * (float)v220))
                                         + (float)((float)(v210 * v168) * (float)v219))
                                 * 255.0);
        float v222 = v115 * 1.4142;
        float v223 = v116 * 1.4142;
        int v224 = *(_DWORD *)(a2 + 24);
        int v225 = sub_2194F4090(a2 + 8);
        int v231 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v223) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v223) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v223) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
        if (v231 < 0)
        {
          int v232 = 0;
          int v233 = 0;
        }
        else if (v225 * v224 <= v231)
        {
          int v232 = v224 - 1;
          int v233 = v130 - 1;
        }
        else
        {
          int v232 = v231 / v225;
          int v233 = v231 % v225;
        }
        float v234 = (float)(1 << v232);
        *(float *)v227.i32 = v12 * (float)(1.0 / v234);
        *(float *)v228.i32 = v13 * (float)(1.0 / v234);
        float v235 = v222 / v234;
        uint64_t v236 = *(void *)(a2 + 32);
        int v237 = (void *)(*(void *)(a2 + 56) + 144 * (v236 * v232 + v233));
        uint64_t v238 = v237[9];
        unint64_t v240 = v237[4];
        uint64_t v239 = v237[5];
        unint64_t v241 = v237[6];
        *(float *)v226.i32 = (float)v240 + -1.001;
        float v242 = *(float *)v228.i32 + (float)(v235 * 0.70711);
        *(float *)v229.i32 = (float)v241 + -1.001;
        if (*(float *)v229.i32 >= v242) {
          float v243 = *(float *)v228.i32 + (float)(v235 * 0.70711);
        }
        else {
          float v243 = (float)v241 + -1.001;
        }
        if (v242 < 0.0) {
          float v243 = 0.0;
        }
        uint64_t v244 = v243;
        uint64_t v245 = v238 + v239 * v244;
        float v246 = (float)(v244 + 1) - v243;
        float v247 = v243 - (float)v243;
        v248.f32[0] = v235 + *(float *)v227.i32;
        v248.f32[1] = *(float *)v227.i32 + (float)(v235 * 0.5);
        *(float32x2_t *)&v248.u32[2] = vmla_n_f32((float32x2_t)vdup_lane_s32(v227, 0), (float32x2_t)0xBF000000BF800000, v235);
        float32x4_t v249 = (float32x4_t)vdupq_lane_s32(v226, 0);
        float32x4_t v250 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v248, v249), (int8x16_t)v249, (int8x16_t)v248), (int8x16_t)vcltzq_f32(v248));
        int32x4_t v251 = (int32x4_t)vcvtq_u32_f32(v250);
        v249.i64[0] = 0x100000001;
        v249.i64[1] = 0x100000001;
        int32x4_t v252 = vaddq_s32(v251, (int32x4_t)v249);
        float32x4_t v253 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)v252), v250);
        float32x4_t v254 = vsubq_f32(v250, vcvtq_f32_u32((uint32x4_t)v251));
        *(float *)&unsigned int v255 = vmuls_lane_f32(v247, v253, 3);
        int8x16_t v256 = (int8x16_t)vtrn2q_s32(v251, v252);
        int8x16_t v257 = vextq_s8(v256, v256, 8uLL);
        *(void *)&long long v258 = v257.u32[2];
        *((void *)&v258 + 1) = v257.u32[3];
        long long v259 = v258;
        *(void *)&long long v258 = v257.u32[0];
        v257.i8[0] = *(unsigned char *)(v245 + v257.u32[0]);
        LOBYTE(v230) = *(unsigned char *)(v245 + v257.u32[1]);
        *(float *)&unsigned int v260 = vmuls_lane_f32(v246, v254, 3) * (float)v230;
        float v261 = *(float *)&v260 + (float)(vmuls_lane_f32(v246, v253, 3) * (float)v257.u32[0]);
        LOBYTE(v260) = *(unsigned char *)(v245 + v239 + v258);
        *(float *)&unsigned int v262 = (float)v260;
        float v263 = v261 + (float)(*(float *)&v255 * *(float *)&v262);
        LOBYTE(v262) = *(unsigned char *)(v245 + v239 + v257.u32[1]);
        *(float *)&unsigned int v264 = (float)(v263 + (float)(vmuls_lane_f32(v247, v254, 3) * (float)v262)) * 255.0;
        HIWORD(v629) = (int)*(float *)&v264;
        LOBYTE(v264) = *(unsigned char *)(v245 + v259);
        *(float *)&unsigned int v265 = (float)v264;
        LOBYTE(v255) = *(unsigned char *)(v245 + *((void *)&v259 + 1));
        float v266 = (float)(vmuls_lane_f32(v246, *(float32x2_t *)v254.f32, 1) * (float)v255)
             + (float)(vmuls_lane_f32(v246, *(float32x2_t *)v253.f32, 1) * *(float *)&v265);
        LOBYTE(v265) = *(unsigned char *)(v245 + v239 + v259);
        *(float *)&unsigned int v267 = (float)v265;
        float v268 = v266 + (float)(vmuls_lane_f32(v247, *(float32x2_t *)v253.f32, 1) * *(float *)&v267);
        LOBYTE(v267) = *(unsigned char *)(v245 + v239 + *((void *)&v259 + 1));
        LODWORD(v244) = (int)(float)((float)(v268
                                           + (float)(vmuls_lane_f32(v247, *(float32x2_t *)v254.f32, 1) * (float)v267))
                                   * 255.0);
        float32x2_t v269 = vmla_n_f32((float32x2_t)vdup_lane_s32(v228, 0), (float32x2_t)0xBF3504F300000000, v235);
        float32x2_t v270 = (float32x2_t)vdup_lane_s32(v229, 0);
        float32x2_t v271 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v269, v270), (int8x8_t)v270, (int8x8_t)v269), (int8x8_t)vcltz_f32(v269));
        int32x2_t v272 = (int32x2_t)vcvt_u32_f32(v271);
        uint64_t v273 = v238 + v239 * v272.u32[0];
        v274 = (unsigned __int8 *)(v273 + v239 + v251.u32[0]);
        v275 = (unsigned __int8 *)(v273 + v239 + v252.u32[0]);
        uint64_t v276 = v238 + v239 * v272.u32[1];
        *(float32x2_t *)v277.f32 = vsub_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v272, (int32x2_t)0x100000001)), v271);
        v277.i64[1] = v277.i64[0];
        *(float32x2_t *)v278.f32 = vsub_f32(v271, vcvt_f32_u32((uint32x2_t)v272));
        v278.i64[1] = v278.i64[0];
        float32x4_t v279 = vmulq_f32(v253, v277);
        float32x4_t v280 = vmulq_f32(v253, v278);
        float32x4_t v281 = vmulq_f32(v254, v278);
        v251.i16[0] = *(unsigned __int8 *)(v273 + v251.u32[0]);
        v251.i16[1] = *(unsigned __int8 *)(v276 + v259);
        v251.i16[2] = *(unsigned __int8 *)(v273 + v251.u32[2]);
        v251.i16[3] = *(unsigned __int8 *)(v276 + v258);
        uint64_t v282 = v252.u32[2];
        v252.i16[0] = *(unsigned __int8 *)(v273 + v252.u32[0]);
        v252.i16[1] = *(unsigned __int8 *)(v276 + *((void *)&v259 + 1));
        v252.i16[2] = *(unsigned __int8 *)(v273 + v252.u32[2]);
        v252.i16[3] = *(unsigned __int8 *)(v276 + v257.u32[1]);
        float32x4_t v283 = vmlaq_f32(vmulq_f32(vmulq_f32(v254, v277), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v252.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v251.i8)), v279);
        v251.i16[0] = *v274;
        v251.i16[1] = *(unsigned __int8 *)(v276 + v239 + v259);
        v251.i16[2] = *(unsigned __int8 *)(v273 + v239 + v251.u32[2]);
        v251.i16[3] = *(unsigned __int8 *)(v276 + v239 + v258);
        v254.i16[0] = *v275;
        v254.i16[1] = *(unsigned __int8 *)(v276 + v239 + *((void *)&v259 + 1));
        v254.i16[2] = *(unsigned __int8 *)(v273 + v239 + v282);
        v254.i16[3] = *(unsigned __int8 *)(v276 + v239 + v257.u32[1]);
        *(int16x4_t *)v283.f32 = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(vmlaq_f32(v283, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v251.i8)), v280), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v254.f32)), v281), v624)));
        *(int16x4_t *)v281.f32 = vrev32_s16(*(int16x4_t *)v283.f32);
        v281.i32[0] = v283.i32[0];
        LOWORD(v630) = v244;
        *(void *)((char *)&v630 + 2) = v281.i64[0];
        float v284 = v222 * 1.4142;
        float v285 = v223 * 1.4142;
        int v286 = *(_DWORD *)(a2 + 24);
        int v287 = sub_2194F4090(a2 + 8);
        int v292 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v285) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v285) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v285) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
        if (v292 < 0)
        {
          int v293 = 0;
          int v294 = 0;
        }
        else if (v287 * v286 <= v292)
        {
          int v293 = v286 - 1;
          int v294 = v236 - 1;
        }
        else
        {
          int v293 = v292 / v287;
          int v294 = v292 % v287;
        }
        float v295 = (float)(1 << v293);
        float v296 = v12 * (float)(1.0 / v295);
        float v297 = v13 * (float)(1.0 / v295);
        float v298 = v284 / v295;
        uint64_t v299 = *(void *)(a2 + 32);
        v300 = (void *)(*(void *)(a2 + 56) + 144 * (v299 * v293 + v294));
        uint64_t v301 = v300[9];
        unint64_t v302 = v300[4];
        uint64_t v303 = v300[5];
        unint64_t v304 = v300[6];
        float v305 = v296 + (float)(v298 * 0.0);
        float v306 = (float)v302 + -1.001;
        if (v306 >= v305) {
          float v307 = v296 + (float)(v298 * 0.0);
        }
        else {
          float v307 = (float)v302 + -1.001;
        }
        if (v305 >= 0.0) {
          float v308 = v307;
        }
        else {
          float v308 = 0.0;
        }
        float v309 = (float)v304 + -1.001;
        if (v309 >= (float)(v297 - v298)) {
          float v310 = v297 - v298;
        }
        else {
          float v310 = (float)v304 + -1.001;
        }
        if ((float)(v297 - v298) < 0.0) {
          float v310 = 0.0;
        }
        uint64_t v311 = v308;
        uint64_t v312 = v310;
        uint64_t v313 = (v311 + 1);
        unsigned int v314 = v312 + 1;
        uint64_t v315 = v301 + v303 * v312;
        float v316 = (float)v313 - v308;
        float v317 = (float)v314 - v310;
        *(float *)&unsigned int v318 = v316 * v317;
        float v319 = v308 - (float)v308;
        float v320 = v319 * v317;
        float v321 = v310 - (float)v310;
        *(float *)&unsigned int v322 = v316 * v321;
        LOBYTE(v288) = *(unsigned char *)(v315 + v311);
        LOBYTE(v289) = *(unsigned char *)(v315 + v313);
        float v323 = (float)(v320 * (float)v289) + (float)(*(float *)&v318 * (float)v288);
        LOBYTE(v318) = *(unsigned char *)(v315 + v303 + v311);
        LOBYTE(v322) = *(unsigned char *)(v315 + v303 + v313);
        HIWORD(v630) = (int)(float)((float)((float)(v323 + (float)((float)(v316 * v321) * (float)v318))
                                          + (float)((float)(v319 * v321) * (float)v322))
                                  * 255.0);
        float v324 = v296 + (float)(v298 * 0.70711);
        if (v306 >= v324) {
          float v325 = v296 + (float)(v298 * 0.70711);
        }
        else {
          float v325 = v306;
        }
        if (v324 < 0.0) {
          float v325 = 0.0;
        }
        float v326 = v297 + (float)(v298 * 0.5);
        if (v309 >= v326) {
          float v327 = v297 + (float)(v298 * 0.5);
        }
        else {
          float v327 = v309;
        }
        if (v326 < 0.0) {
          float v327 = 0.0;
        }
        uint64_t v328 = v325;
        uint64_t v329 = v327;
        uint64_t v330 = (v328 + 1);
        unsigned int v331 = v329 + 1;
        uint64_t v332 = v301 + v303 * v329;
        uint64_t v333 = v332 + v303;
        float v334 = (float)v330 - v325;
        float v335 = (float)v331 - v327;
        float v336 = v325 - (float)v325;
        float v337 = v327 - (float)v327;
        LOBYTE(v290) = *(unsigned char *)(v332 + v328);
        LOBYTE(v291) = *(unsigned char *)(v332 + v330);
        float v338 = (float)v291;
        *(float *)&unsigned int v339 = (float)(v336 * v335) * v338;
        *(float *)&unsigned int v340 = *(float *)&v339 + (float)((float)(v334 * v335) * (float)v290);
        LOBYTE(v339) = *(unsigned char *)(v332 + v303 + v328);
        float v341 = *(float *)&v340 + (float)((float)(v334 * v337) * (float)v339);
        LOBYTE(v340) = *(unsigned char *)(v332 + v303 + v330);
        LOWORD(v631) = (int)(float)((float)(v341 + (float)((float)(v336 * v337) * (float)v340)) * 255.0);
        float v342 = v297 + (float)(v298 * -0.5);
        if (v309 >= v342) {
          float v343 = v297 + (float)(v298 * -0.5);
        }
        else {
          float v343 = v309;
        }
        if (v342 < 0.0) {
          float v343 = 0.0;
        }
        uint64_t v344 = v343;
        unsigned int v345 = v344 + 1;
        uint64_t v346 = v301 + v303 * v344;
        uint64_t v347 = v346 + v303;
        float v348 = (float)v345 - v343;
        *(float *)&unsigned int v349 = (float)v343;
        float v350 = v343 - *(float *)&v349;
        LOBYTE(v349) = *(unsigned char *)(v346 + v328);
        *(float *)&unsigned int v351 = (float)v349;
        LOBYTE(v338) = *(unsigned char *)(v346 + v330);
        *(float *)&unsigned int v352 = (float)(v336 * v348) * (float)LODWORD(v338);
        float v353 = *(float *)&v352 + (float)((float)(v334 * v348) * *(float *)&v351);
        LOBYTE(v352) = *(unsigned char *)(v346 + v303 + v328);
        LOBYTE(v351) = *(unsigned char *)(v346 + v303 + v330);
        WORD1(v631) = (int)(float)((float)((float)(v353 + (float)((float)(v334 * v350) * (float)v352))
                                         + (float)((float)(v336 * v350) * (float)v351))
                                 * 255.0);
        float v354 = v298 + v297;
        if (v309 >= v354) {
          float v309 = v354;
        }
        if (v354 >= 0.0) {
          float v355 = v309;
        }
        else {
          float v355 = 0.0;
        }
        uint64_t v356 = v355;
        uint64_t v357 = v301 + v303 * v356;
        uint64_t v358 = v357 + v303;
        float v359 = (float)(v356 + 1) - v355;
        float v360 = v316 * v359;
        float v361 = v319 * v359;
        *(float *)&unsigned int v362 = (float)v355;
        float v363 = v355 - *(float *)&v362;
        float v364 = v316 * v363;
        float v365 = v319 * v363;
        LOBYTE(v319) = *(unsigned char *)(v357 + v311);
        LOBYTE(v362) = *(unsigned char *)(v357 + v313);
        *(float *)&unsigned int v366 = (float)v362;
        float v367 = v361 * *(float *)&v366;
        LOBYTE(v366) = *(unsigned char *)(v358 + v311);
        *(float *)&unsigned int v368 = v367 + (float)(v360 * (float)LODWORD(v319));
        float v369 = *(float *)&v368 + (float)(v364 * (float)v366);
        LOBYTE(v368) = *(unsigned char *)(v358 + v313);
        float v370 = (float)v368;
        int v371 = (int)(float)((float)(v369 + (float)(v365 * v370)) * 255.0);
        float v372 = v296 + (float)(v298 * -0.70711);
        if (v306 >= v372) {
          float v373 = v372;
        }
        else {
          float v373 = v306;
        }
        if (v372 >= 0.0) {
          float v374 = v373;
        }
        else {
          float v374 = 0.0;
        }
        uint64_t v375 = v374;
        uint64_t v376 = (v375 + 1);
        float v377 = (float)v376 - v374;
        float v378 = v377 * v348;
        float v379 = v374 - (float)v374;
        float v380 = v379 * v348;
        *(float *)&unsigned int v381 = v377 * v350;
        LOBYTE(v370) = *(unsigned char *)(v346 + v375);
        *(float *)&unsigned int v382 = (float)LODWORD(v370);
        LOBYTE(v348) = *(unsigned char *)(v346 + v376);
        *(float *)&unsigned int v383 = v380 * (float)LODWORD(v348);
        float v384 = *(float *)&v383 + (float)(v378 * *(float *)&v382);
        LOBYTE(v383) = *(unsigned char *)(v347 + v375);
        LOBYTE(v382) = *(unsigned char *)(v347 + v376);
        int v385 = (int)(float)((float)((float)(v384 + (float)((float)(v377 * v350) * (float)v383))
                                  + (float)((float)(v379 * v350) * (float)v382))
                          * 255.0);
        WORD2(v631) = v371;
        float v386 = v377 * v335;
        float v387 = v379 * v335;
        LOBYTE(v335) = *(unsigned char *)(v332 + v375);
        *(float *)&unsigned int v388 = (float)LODWORD(v335);
        LOBYTE(v381) = *(unsigned char *)(v332 + v376);
        *(float *)&unsigned int v389 = v387 * (float)v381;
        float v390 = *(float *)&v389 + (float)(v386 * *(float *)&v388);
        LOBYTE(v389) = *(unsigned char *)(v333 + v375);
        LOBYTE(v388) = *(unsigned char *)(v333 + v376);
        WORD3(v631) = v385;
        WORD4(v631) = (int)(float)((float)((float)(v390 + (float)((float)(v377 * v337) * (float)v389))
                                         + (float)((float)(v379 * v337) * (float)v388))
                                 * 255.0);
        float v391 = v284 * 1.4142;
        float v392 = v285 * 1.4142;
        int v393 = *(_DWORD *)(a2 + 24);
        int v394 = sub_2194F4090(a2 + 8);
        int v400 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v392) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v392) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v392) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
        if (v400 < 0)
        {
          int v401 = 0;
          int v402 = 0;
        }
        else if (v394 * v393 <= v400)
        {
          int v401 = v393 - 1;
          int v402 = v299 - 1;
        }
        else
        {
          int v401 = v400 / v394;
          int v402 = v400 % v394;
        }
        float v403 = (float)(1 << v401);
        *(float *)v396.i32 = v12 * (float)(1.0 / v403);
        *(float *)v397.i32 = v13 * (float)(1.0 / v403);
        float v404 = v391 / v403;
        uint64_t v405 = *(void *)(a2 + 32);
        v406 = (void *)(*(void *)(a2 + 56) + 144 * (v405 * v401 + v402));
        uint64_t v407 = v406[9];
        unint64_t v409 = v406[4];
        uint64_t v408 = v406[5];
        unint64_t v410 = v406[6];
        *(float *)v395.i32 = (float)v409 + -1.001;
        float v411 = *(float *)v397.i32 + (float)(v404 * 0.70711);
        *(float *)v398.i32 = (float)v410 + -1.001;
        if (*(float *)v398.i32 >= v411) {
          float v412 = *(float *)v397.i32 + (float)(v404 * 0.70711);
        }
        else {
          float v412 = (float)v410 + -1.001;
        }
        if (v411 < 0.0) {
          float v412 = 0.0;
        }
        uint64_t v413 = v412;
        uint64_t v414 = v407 + v408 * v413;
        float v415 = (float)(v413 + 1) - v412;
        float v416 = v412 - (float)v412;
        v417.f32[0] = v404 + *(float *)v396.i32;
        v417.f32[1] = *(float *)v396.i32 + (float)(v404 * 0.5);
        *(float32x2_t *)&v417.u32[2] = vmla_n_f32((float32x2_t)vdup_lane_s32(v396, 0), (float32x2_t)0xBF000000BF800000, v404);
        float32x4_t v418 = (float32x4_t)vdupq_lane_s32(v395, 0);
        float32x4_t v419 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v417, v418), (int8x16_t)v418, (int8x16_t)v417), (int8x16_t)vcltzq_f32(v417));
        int32x4_t v420 = (int32x4_t)vcvtq_u32_f32(v419);
        v418.i64[0] = 0x100000001;
        v418.i64[1] = 0x100000001;
        int32x4_t v421 = vaddq_s32(v420, (int32x4_t)v418);
        float32x4_t v422 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)v421), v419);
        float32x4_t v423 = vsubq_f32(v419, vcvtq_f32_u32((uint32x4_t)v420));
        *(float *)&unsigned int v424 = vmuls_lane_f32(v416, v422, 3);
        int8x16_t v425 = (int8x16_t)vtrn2q_s32(v420, v421);
        int8x16_t v426 = vextq_s8(v425, v425, 8uLL);
        *(void *)&long long v427 = v426.u32[2];
        *((void *)&v427 + 1) = v426.u32[3];
        long long v428 = v427;
        *(void *)&long long v427 = v426.u32[0];
        v426.i8[0] = *(unsigned char *)(v414 + v426.u32[0]);
        LOBYTE(v399) = *(unsigned char *)(v414 + v426.u32[1]);
        *(float *)&unsigned int v429 = vmuls_lane_f32(v415, v423, 3) * (float)v399;
        float v430 = *(float *)&v429 + (float)(vmuls_lane_f32(v415, v422, 3) * (float)v426.u32[0]);
        LOBYTE(v429) = *(unsigned char *)(v414 + v408 + v427);
        *(float *)&unsigned int v431 = (float)v429;
        float v432 = v430 + (float)(*(float *)&v424 * *(float *)&v431);
        LOBYTE(v431) = *(unsigned char *)(v414 + v408 + v426.u32[1]);
        *(float *)&unsigned int v433 = (float)(v432 + (float)(vmuls_lane_f32(v416, v423, 3) * (float)v431)) * 255.0;
        HIWORD(v631) = (int)*(float *)&v433;
        LOBYTE(v433) = *(unsigned char *)(v414 + v428);
        *(float *)&unsigned int v434 = (float)v433;
        LOBYTE(v424) = *(unsigned char *)(v414 + *((void *)&v428 + 1));
        float v435 = (float)(vmuls_lane_f32(v415, *(float32x2_t *)v423.f32, 1) * (float)v424)
             + (float)(vmuls_lane_f32(v415, *(float32x2_t *)v422.f32, 1) * *(float *)&v434);
        LOBYTE(v434) = *(unsigned char *)(v414 + v408 + v428);
        *(float *)&unsigned int v436 = (float)v434;
        float v437 = v435 + (float)(vmuls_lane_f32(v416, *(float32x2_t *)v422.f32, 1) * *(float *)&v436);
        LOBYTE(v436) = *(unsigned char *)(v414 + v408 + *((void *)&v428 + 1));
        LODWORD(v413) = (int)(float)((float)(v437
                                           + (float)(vmuls_lane_f32(v416, *(float32x2_t *)v423.f32, 1) * (float)v436))
                                   * 255.0);
        float32x2_t v438 = vmla_n_f32((float32x2_t)vdup_lane_s32(v397, 0), (float32x2_t)0xBF3504F300000000, v404);
        float32x2_t v439 = (float32x2_t)vdup_lane_s32(v398, 0);
        float32x2_t v440 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v438, v439), (int8x8_t)v439, (int8x8_t)v438), (int8x8_t)vcltz_f32(v438));
        int32x2_t v441 = (int32x2_t)vcvt_u32_f32(v440);
        uint64_t v442 = v407 + v408 * v441.u32[0];
        v443 = (unsigned __int8 *)(v442 + v408 + v420.u32[0]);
        v444 = (unsigned __int8 *)(v442 + v408 + v421.u32[0]);
        uint64_t v445 = v407 + v408 * v441.u32[1];
        *(float32x2_t *)v446.f32 = vsub_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v441, (int32x2_t)0x100000001)), v440);
        v446.i64[1] = v446.i64[0];
        *(float32x2_t *)v447.f32 = vsub_f32(v440, vcvt_f32_u32((uint32x2_t)v441));
        v447.i64[1] = v447.i64[0];
        float32x4_t v448 = vmulq_f32(v422, v446);
        float32x4_t v449 = vmulq_f32(v422, v447);
        float32x4_t v450 = vmulq_f32(v423, v447);
        v420.i16[0] = *(unsigned __int8 *)(v442 + v420.u32[0]);
        v420.i16[1] = *(unsigned __int8 *)(v445 + v428);
        v420.i16[2] = *(unsigned __int8 *)(v442 + v420.u32[2]);
        v420.i16[3] = *(unsigned __int8 *)(v445 + v427);
        uint64_t v451 = v421.u32[2];
        v421.i16[0] = *(unsigned __int8 *)(v442 + v421.u32[0]);
        v421.i16[1] = *(unsigned __int8 *)(v445 + *((void *)&v428 + 1));
        v421.i16[2] = *(unsigned __int8 *)(v442 + v421.u32[2]);
        v421.i16[3] = *(unsigned __int8 *)(v445 + v426.u32[1]);
        float32x4_t v452 = vmlaq_f32(vmulq_f32(vmulq_f32(v423, v446), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v421.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v420.i8)), v448);
        v420.i16[0] = *v443;
        v420.i16[1] = *(unsigned __int8 *)(v445 + v408 + v428);
        v420.i16[2] = *(unsigned __int8 *)(v442 + v408 + v420.u32[2]);
        v420.i16[3] = *(unsigned __int8 *)(v445 + v408 + v427);
        v423.i16[0] = *v444;
        v423.i16[1] = *(unsigned __int8 *)(v445 + v408 + *((void *)&v428 + 1));
        v423.i16[2] = *(unsigned __int8 *)(v442 + v408 + v451);
        v423.i16[3] = *(unsigned __int8 *)(v445 + v408 + v426.u32[1]);
        *(int16x4_t *)v452.f32 = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(vmlaq_f32(v452, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v420.i8)), v449), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v423.f32)), v450), v624)));
        *(int16x4_t *)v450.f32 = vrev32_s16(*(int16x4_t *)v452.f32);
        v450.i32[0] = v452.i32[0];
        LOWORD(v632) = v413;
        *(void *)((char *)&v632 + 2) = v450.i64[0];
        float v453 = v391 * 1.4142;
        float v454 = v392 * 1.4142;
        int v455 = *(_DWORD *)(a2 + 24);
        int v456 = sub_2194F4090(a2 + 8);
        int v461 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v454) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v454) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v454) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
        if (v461 < 0)
        {
          int v462 = 0;
          int v463 = 0;
        }
        else if (v456 * v455 <= v461)
        {
          int v462 = v455 - 1;
          int v463 = v405 - 1;
        }
        else
        {
          int v462 = v461 / v456;
          int v463 = v461 % v456;
        }
        float v464 = (float)(1 << v462);
        float v465 = v12 * (float)(1.0 / v464);
        float v466 = v13 * (float)(1.0 / v464);
        float v467 = v453 / v464;
        uint64_t v468 = *(void *)(a2 + 32);
        v469 = (void *)(*(void *)(a2 + 56) + 144 * (v468 * v462 + v463));
        uint64_t v470 = v469[9];
        unint64_t v471 = v469[4];
        uint64_t v472 = v469[5];
        unint64_t v473 = v469[6];
        float v474 = v465 + (float)(v467 * 0.0);
        float v475 = (float)v471 + -1.001;
        if (v475 >= v474) {
          float v476 = v465 + (float)(v467 * 0.0);
        }
        else {
          float v476 = (float)v471 + -1.001;
        }
        if (v474 >= 0.0) {
          float v477 = v476;
        }
        else {
          float v477 = 0.0;
        }
        float v478 = (float)v473 + -1.001;
        if (v478 >= (float)(v466 - v467)) {
          float v479 = v466 - v467;
        }
        else {
          float v479 = (float)v473 + -1.001;
        }
        if ((float)(v466 - v467) < 0.0) {
          float v479 = 0.0;
        }
        uint64_t v480 = v477;
        uint64_t v481 = v479;
        uint64_t v482 = (v480 + 1);
        unsigned int v483 = v481 + 1;
        uint64_t v484 = v470 + v472 * v481;
        float v485 = (float)v482 - v477;
        float v486 = (float)v483 - v479;
        *(float *)&unsigned int v487 = v485 * v486;
        float v488 = v477 - (float)v477;
        float v489 = v488 * v486;
        float v490 = v479 - (float)v479;
        *(float *)&unsigned int v491 = v485 * v490;
        LOBYTE(v457) = *(unsigned char *)(v484 + v480);
        LOBYTE(v458) = *(unsigned char *)(v484 + v482);
        float v492 = (float)(v489 * (float)v458) + (float)(*(float *)&v487 * (float)v457);
        LOBYTE(v487) = *(unsigned char *)(v484 + v472 + v480);
        LOBYTE(v491) = *(unsigned char *)(v484 + v472 + v482);
        HIWORD(v632) = (int)(float)((float)((float)(v492 + (float)((float)(v485 * v490) * (float)v487))
                                          + (float)((float)(v488 * v490) * (float)v491))
                                  * 255.0);
        float v493 = v465 + (float)(v467 * 0.70711);
        if (v475 >= v493) {
          float v494 = v465 + (float)(v467 * 0.70711);
        }
        else {
          float v494 = v475;
        }
        if (v493 < 0.0) {
          float v494 = 0.0;
        }
        float v495 = v466 + (float)(v467 * 0.5);
        if (v478 >= v495) {
          float v496 = v466 + (float)(v467 * 0.5);
        }
        else {
          float v496 = v478;
        }
        if (v495 < 0.0) {
          float v496 = 0.0;
        }
        uint64_t v497 = v494;
        uint64_t v498 = v496;
        uint64_t v499 = (v497 + 1);
        unsigned int v500 = v498 + 1;
        uint64_t v501 = v470 + v472 * v498;
        uint64_t v502 = v501 + v472;
        float v503 = (float)v499 - v494;
        float v504 = (float)v500 - v496;
        float v505 = v494 - (float)v494;
        float v506 = v496 - (float)v496;
        LOBYTE(v459) = *(unsigned char *)(v501 + v497);
        LOBYTE(v460) = *(unsigned char *)(v501 + v499);
        float v507 = (float)v460;
        *(float *)&unsigned int v508 = (float)(v505 * v504) * v507;
        *(float *)&unsigned int v509 = *(float *)&v508 + (float)((float)(v503 * v504) * (float)v459);
        LOBYTE(v508) = *(unsigned char *)(v501 + v472 + v497);
        float v510 = *(float *)&v509 + (float)((float)(v503 * v506) * (float)v508);
        LOBYTE(v509) = *(unsigned char *)(v501 + v472 + v499);
        v633[0] = (int)(float)((float)(v510 + (float)((float)(v505 * v506) * (float)v509)) * 255.0);
        float v511 = v466 + (float)(v467 * -0.5);
        if (v478 >= v511) {
          float v512 = v466 + (float)(v467 * -0.5);
        }
        else {
          float v512 = v478;
        }
        if (v511 < 0.0) {
          float v512 = 0.0;
        }
        uint64_t v513 = v512;
        unsigned int v514 = v513 + 1;
        uint64_t v515 = v470 + v472 * v513;
        uint64_t v516 = v515 + v472;
        float v517 = (float)v514 - v512;
        *(float *)&unsigned int v518 = (float)v512;
        float v519 = v512 - *(float *)&v518;
        LOBYTE(v518) = *(unsigned char *)(v515 + v497);
        *(float *)&unsigned int v520 = (float)v518;
        LOBYTE(v507) = *(unsigned char *)(v515 + v499);
        *(float *)&unsigned int v521 = (float)(v505 * v517) * (float)LODWORD(v507);
        float v522 = *(float *)&v521 + (float)((float)(v503 * v517) * *(float *)&v520);
        LOBYTE(v521) = *(unsigned char *)(v515 + v472 + v497);
        LOBYTE(v520) = *(unsigned char *)(v515 + v472 + v499);
        v633[1] = (int)(float)((float)((float)(v522 + (float)((float)(v503 * v519) * (float)v521))
                                     + (float)((float)(v505 * v519) * (float)v520))
                             * 255.0);
        float v523 = v467 + v466;
        if (v478 >= v523) {
          float v478 = v523;
        }
        if (v523 >= 0.0) {
          float v524 = v478;
        }
        else {
          float v524 = 0.0;
        }
        uint64_t v525 = v524;
        uint64_t v526 = v470 + v472 * v525;
        uint64_t v527 = v526 + v472;
        float v528 = (float)(v525 + 1) - v524;
        float v529 = v485 * v528;
        float v530 = v488 * v528;
        *(float *)&unsigned int v531 = (float)v524;
        float v532 = v524 - *(float *)&v531;
        float v533 = v485 * v532;
        float v534 = v488 * v532;
        LOBYTE(v488) = *(unsigned char *)(v526 + v480);
        LOBYTE(v531) = *(unsigned char *)(v526 + v482);
        *(float *)&unsigned int v535 = (float)v531;
        float v536 = v530 * *(float *)&v535;
        LOBYTE(v535) = *(unsigned char *)(v527 + v480);
        *(float *)&unsigned int v537 = v536 + (float)(v529 * (float)LODWORD(v488));
        float v538 = *(float *)&v537 + (float)(v533 * (float)v535);
        LOBYTE(v537) = *(unsigned char *)(v527 + v482);
        float v539 = (float)v537;
        int v540 = (int)(float)((float)(v538 + (float)(v534 * v539)) * 255.0);
        float v541 = v465 + (float)(v467 * -0.70711);
        if (v475 >= v541) {
          float v542 = v541;
        }
        else {
          float v542 = v475;
        }
        if (v541 >= 0.0) {
          float v543 = v542;
        }
        else {
          float v543 = 0.0;
        }
        uint64_t v544 = v543;
        uint64_t v545 = (v544 + 1);
        float v546 = (float)v545 - v543;
        float v547 = v546 * v517;
        float v548 = v543 - (float)v543;
        float v549 = v548 * v517;
        *(float *)&unsigned int v550 = v546 * v519;
        LOBYTE(v539) = *(unsigned char *)(v515 + v544);
        *(float *)&unsigned int v551 = (float)LODWORD(v539);
        LOBYTE(v517) = *(unsigned char *)(v515 + v545);
        *(float *)&unsigned int v552 = v549 * (float)LODWORD(v517);
        float v553 = *(float *)&v552 + (float)(v547 * *(float *)&v551);
        LOBYTE(v552) = *(unsigned char *)(v516 + v544);
        LOBYTE(v551) = *(unsigned char *)(v516 + v545);
        int v554 = (int)(float)((float)((float)(v553 + (float)((float)(v546 * v519) * (float)v552))
                                  + (float)((float)(v548 * v519) * (float)v551))
                          * 255.0);
        v633[2] = v540;
        float v555 = v546 * v504;
        float v556 = v548 * v504;
        LOBYTE(v504) = *(unsigned char *)(v501 + v544);
        *(float *)&unsigned int v557 = (float)LODWORD(v504);
        LOBYTE(v550) = *(unsigned char *)(v501 + v545);
        *(float *)&unsigned int v558 = v556 * (float)v550;
        float v559 = *(float *)&v558 + (float)(v555 * *(float *)&v557);
        LOBYTE(v558) = *(unsigned char *)(v502 + v544);
        LOBYTE(v557) = *(unsigned char *)(v502 + v545);
        v633[3] = v554;
        v633[4] = (int)(float)((float)((float)(v559 + (float)((float)(v546 * v506) * (float)v558))
                                     + (float)((float)(v548 * v506) * (float)v557))
                             * 255.0);
        float v560 = v453 * 1.4142;
        int v561 = *(_DWORD *)(a2 + 24);
        int v562 = sub_2194F4090(a2 + 8);
        int v568 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v454 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v454 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v454 * 1.4142) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
        if (v568 < 0)
        {
          int v569 = 0;
          int v570 = 0;
        }
        else if (v562 * v561 <= v568)
        {
          int v569 = v561 - 1;
          int v570 = v468 - 1;
        }
        else
        {
          int v569 = v568 / v562;
          int v570 = v568 % v562;
        }
        uint64_t v571 = 0;
        float v572 = (float)(1 << v569);
        *(float *)v565.i32 = v12 * (float)(1.0 / v572);
        *(float *)v564.i32 = v13 * (float)(1.0 / v572);
        float v573 = v560 / v572;
        v574 = (void *)(*(void *)(a2 + 56) + 144 * (*(void *)(a2 + 32) * v569 + v570));
        uint64_t v575 = v574[9];
        unint64_t v577 = v574[4];
        uint64_t v576 = v574[5];
        unint64_t v578 = v574[6];
        float v579 = *(float *)v564.i32 + (float)((float)(v560 / v572) * 0.70711);
        *(float *)v566.i32 = (float)v578 + -1.001;
        if (*(float *)v566.i32 >= v579) {
          float v580 = *(float *)v564.i32 + (float)(v573 * 0.70711);
        }
        else {
          float v580 = (float)v578 + -1.001;
        }
        if (v579 >= 0.0) {
          float v581 = v580;
        }
        else {
          float v581 = 0.0;
        }
        uint64_t v582 = v581;
        *(float *)v563.i32 = (float)v577 + -1.001;
        uint64_t v583 = v575 + v576 * v582;
        float v584 = (float)(v582 + 1) - v581;
        float32_t v585 = *(float *)v565.i32 + (float)(v573 * 0.5);
        float32x2_t v586 = (float32x2_t)vdup_lane_s32(v565, 0);
        v587.f32[0] = v573 + *(float *)v565.i32;
        v587.f32[1] = v585;
        *(float32x2_t *)&v587.u32[2] = vmla_n_f32(v586, (float32x2_t)0xBF000000BF800000, v573);
        float v588 = v581 - (float)v581;
        float32x4_t v589 = (float32x4_t)vdupq_lane_s32(v563, 0);
        float32x4_t v590 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v587, v589), (int8x16_t)v589, (int8x16_t)v587), (int8x16_t)vcltzq_f32(v587));
        int32x4_t v591 = (int32x4_t)vcvtq_u32_f32(v590);
        v589.i64[0] = 0x100000001;
        v589.i64[1] = 0x100000001;
        int32x4_t v592 = vaddq_s32(v591, (int32x4_t)v589);
        float32x4_t v593 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)v592), v590);
        float32x4_t v594 = vsubq_f32(v590, vcvtq_f32_u32((uint32x4_t)v591));
        *(float *)&unsigned int v595 = vmuls_lane_f32(v588, v593, 3);
        int8x16_t v596 = (int8x16_t)vtrn2q_s32(v591, v592);
        int8x16_t v597 = vextq_s8(v596, v596, 8uLL);
        *(void *)&long long v598 = v597.u32[2];
        *((void *)&v598 + 1) = v597.u32[3];
        long long v599 = v598;
        *(void *)&long long v598 = v597.u32[0];
        v597.i8[0] = *(unsigned char *)(v583 + v597.u32[0]);
        LOBYTE(v567) = *(unsigned char *)(v583 + v597.u32[1]);
        *(float *)&unsigned int v600 = vmuls_lane_f32(v584, v594, 3) * (float)v567;
        v586.f32[0] = *(float *)&v600 + (float)(vmuls_lane_f32(v584, v593, 3) * (float)v597.u32[0]);
        LOBYTE(v600) = *(unsigned char *)(v583 + v576 + v598);
        *(float *)&unsigned int v601 = (float)v600;
        v586.f32[0] = v586.f32[0] + (float)(*(float *)&v595 * *(float *)&v601);
        LOBYTE(v601) = *(unsigned char *)(v583 + v576 + v597.u32[1]);
        v586.f32[0] = (float)(v586.f32[0] + (float)(vmuls_lane_f32(v588, v594, 3) * (float)v601)) * 255.0;
        v633[7] = (int)v586.f32[0];
        v586.i8[0] = *(unsigned char *)(v583 + v599);
        v586.f32[0] = (float)v586.u32[0];
        LOBYTE(v595) = *(unsigned char *)(v583 + *((void *)&v599 + 1));
        float v602 = (float)(vmuls_lane_f32(v584, *(float32x2_t *)v594.f32, 1) * (float)v595)
             + (float)(vmuls_lane_f32(v584, *(float32x2_t *)v593.f32, 1) * v586.f32[0]);
        v586.i8[0] = *(unsigned char *)(v583 + v576 + v599);
        v586.f32[0] = (float)v586.u32[0];
        float v603 = v602 + (float)(vmuls_lane_f32(v588, *(float32x2_t *)v593.f32, 1) * v586.f32[0]);
        v586.i8[0] = *(unsigned char *)(v583 + v576 + *((void *)&v599 + 1));
        v633[8] = (int)(float)((float)(v603
                                     + (float)(vmuls_lane_f32(v588, *(float32x2_t *)v594.f32, 1) * (float)v586.u32[0]))
                             * 255.0);
        float32x2_t v604 = vmla_n_f32((float32x2_t)vdup_lane_s32(v564, 0), (float32x2_t)0xBF3504F300000000, v573);
        float32x2_t v605 = (float32x2_t)vdup_lane_s32(v566, 0);
        float32x2_t v606 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v604, v605), (int8x8_t)v605, (int8x8_t)v604), (int8x8_t)vcltz_f32(v604));
        int32x2_t v607 = (int32x2_t)vcvt_u32_f32(v606);
        uint64_t v608 = v575 + v576 * v607.u32[0];
        v609 = (unsigned __int8 *)(v608 + v576 + v591.u32[0]);
        v610 = (unsigned __int8 *)(v608 + v576 + v592.u32[0]);
        uint64_t v611 = v575 + v576 * v607.u32[1];
        *(float32x2_t *)v612.f32 = vsub_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v607, (int32x2_t)0x100000001)), v606);
        v612.i64[1] = v612.i64[0];
        *(float32x2_t *)v613.f32 = vsub_f32(v606, vcvt_f32_u32((uint32x2_t)v607));
        v613.i64[1] = v613.i64[0];
        uint64_t result = (unsigned __int8 *)(v611 + v576 + v599);
        float32x4_t v614 = vmulq_f32(v593, v612);
        float32x4_t v615 = vmulq_f32(v594, v612);
        float32x4_t v616 = vmulq_f32(v593, v613);
        float32x4_t v617 = vmulq_f32(v594, v613);
        v591.i16[0] = *(unsigned __int8 *)(v608 + v591.u32[0]);
        v591.i16[1] = *(unsigned __int8 *)(v611 + v599);
        v591.i16[2] = *(unsigned __int8 *)(v608 + v591.u32[2]);
        v591.i16[3] = *(unsigned __int8 *)(v611 + v598);
        uint64_t v618 = v592.u32[2];
        v592.i16[0] = *(unsigned __int8 *)(v608 + v592.u32[0]);
        v592.i16[1] = *(unsigned __int8 *)(v611 + *((void *)&v599 + 1));
        v592.i16[2] = *(unsigned __int8 *)(v608 + v592.u32[2]);
        v592.i16[3] = *(unsigned __int8 *)(v611 + v597.u32[1]);
        v613.i16[0] = *v609;
        v613.i16[1] = *result;
        v613.i16[2] = *(unsigned __int8 *)(v608 + v576 + v591.u32[2]);
        v613.i16[3] = *(unsigned __int8 *)(v611 + v576 + v598);
        float32x4_t v619 = vmlaq_f32(vmlaq_f32(vmulq_f32(v615, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v592.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v591.i8)), v614), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v613.f32)), v616);
        v616.i16[0] = *v610;
        v616.i16[1] = *(unsigned __int8 *)(v611 + v576 + *((void *)&v599 + 1));
        v616.i16[2] = *(unsigned __int8 *)(v608 + v576 + v618);
        v616.i16[3] = *(unsigned __int8 *)(v611 + v576 + v597.u32[1]);
        *(int16x4_t *)v619.f32 = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(v619, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v616.f32)), v617), v624)));
        *(int16x4_t *)v617.f32 = vrev32_s16(*(int16x4_t *)v619.f32);
        v617.i32[0] = v619.i32[0];
        *(void *)&v633[9] = v617.i64[0];
        int32x2_t v10 = 0;
        do
        {
          int32x2_t v10 = vsra_n_s32(v10, vmul_s32(vdup_n_s32((unsigned __int16)v626[v625[0].u16[v571 + 2]]- (unsigned __int16)v626[v625[0].u16[v571 + 3]]), *(int32x2_t *)((char *)&v625[1] + v571 * 2)), 0xFuLL);
          v571 += 6;
        }
        while (v571 != 270);
        int v620 = v10.i32[0];
        if (v10)
        {
          float v7 = fabsf((float)v10.i32[1]) + 0.0000001;
          float v8 = v7 + (float)v620;
          float v9 = v8 / (float)(v7 - (float)v620);
          *(float *)v10.i32 = (float)((float)v620 - v7) / v8;
          float v11 = 0.7854;
          if (v620 < 1)
          {
            float v11 = 2.3562;
            *(float *)v10.i32 = v9;
          }
          *(float *)v10.i32 = v11
                            + (float)((float)((float)((float)(*(float *)v10.i32 * 0.1821) * *(float *)v10.i32) + -0.9675)
                                    * *(float *)v10.i32);
          if (v10.i32[1] < 0) {
            *(float *)v10.i32 = 6.2832 - *(float *)v10.i32;
          }
        }
        else
        {
          v10.i32[0] = 0;
        }
        if (*(float *)v10.i32 < 0.0) {
          *(float *)v10.i32 = 0.0;
        }
        if (*(float *)v10.i32 > 6.2832) {
          *(float *)v10.i32 = 6.2832;
        }
        v6[10] = *(float *)v10.i32;
        v6 += 12;
      }
      while (v6 != v623);
    }
  }
  else
  {
    v625[0].i32[0] = 1191181824;
    uint64_t result = (unsigned __int8 *)memcpy((char *)v625 + 4, &unk_21950C788, 0x21CuLL);
    v622 = *a1;
    for (uint64_t i = a1[1]; v622 != i; v622 += 12)
      uint64_t result = (unsigned __int8 *)sub_2194B5A70(v622 + 10, v625, a2, v622[4], v622[5], v622[3], 2.0, 1.0);
  }
  return result;
}

uint64_t sub_2194ABB88(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6, float a7, float a8)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  float v11 = a6 * a8;
  __float2 v12 = __sincosf_stret(a5);
  int v13 = *(_DWORD *)(a2 + 24);
  int v14 = *(_DWORD *)(a2 + 32);
  int v15 = sub_2194F4090(a2 + 8);
  float v1192 = v11;
  float v16 = (float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v11) & 0x807FFFFF | 0x3F800000) * -0.33333) + 2.0)
                              * COERCE_FLOAT(LODWORD(v11) & 0x807FFFFF | 0x3F800000))
                      + -1.6667)
              + (float)((LODWORD(v11) >> 23) - 127))
      * 0.69315;
  int v17 = vcvtms_s32_f32((float)(v16 - *(float *)(a2 + 112)) * *(float *)(a2 + 108));
  if (v17 < 0)
  {
    int v18 = 0;
    int v19 = 0;
  }
  else if (v15 * v13 <= v17)
  {
    int v18 = v13 - 1;
    int v19 = v14 - 1;
  }
  else
  {
    int v18 = v17 / v15;
    int v19 = v17 % v15;
  }
  float v20 = a6 * a7;
  float v1273 = -v12.__sinval;
  float v21 = 1.0 / (float)(1 << v18);
  float v22 = v21 * a3;
  float v23 = v21 * a4;
  uint64_t v24 = *(void *)(a2 + 32);
  float v25 = (void *)(*(void *)(a2 + 56) + 144 * (v24 * v18 + v19));
  uint64_t v26 = v25[9];
  unint64_t v28 = v25[4];
  uint64_t v27 = v25[5];
  unint64_t v29 = v25[6];
  float v30 = (float)(v22 + (float)((float)(v12.__cosval * 0.0) * 0.0)) + (float)((float)(v12.__sinval * -0.0) * 0.0);
  float v31 = (float)v28 + -1.001;
  if (v31 >= v30) {
    float v31 = v30;
  }
  if (v30 >= 0.0) {
    float v32 = v31;
  }
  else {
    float v32 = 0.0;
  }
  float v33 = (float)(v23 + (float)((float)(v12.__sinval * 0.0) * 0.0)) + (float)((float)(v12.__cosval * 0.0) * 0.0);
  float v34 = (float)v29 + -1.001;
  if (v34 >= v33) {
    float v34 = v33;
  }
  if (v33 >= 0.0) {
    float v35 = v34;
  }
  else {
    float v35 = 0.0;
  }
  uint64_t v36 = v32;
  uint64_t v37 = v35;
  uint64_t v38 = (v36 + 1);
  uint64_t v39 = v26 + v27 * v37;
  uint64_t v40 = v39 + v27;
  float v1270 = (float)v38 - v32;
  float v41 = (float)(v37 + 1) - v35;
  float v1054 = v32 - (float)v32;
  unsigned int v42 = v35;
  LOBYTE(v42) = *(unsigned char *)(v39 + v36);
  unsigned int v1177 = v42;
  LOBYTE(v42) = *(unsigned char *)(v39 + v38);
  float v43 = (float)v42;
  LOBYTE(v42) = *(unsigned char *)(v40 + v36);
  unsigned int v1117 = v42;
  LOBYTE(v42) = *(unsigned char *)(v40 + v38);
  unsigned int v1033 = v42;
  int v44 = *(_DWORD *)(a2 + 24);
  int v45 = sub_2194F4090(a2 + 8);
  int v46 = vcvtms_s32_f32((float)(v16 - *(float *)(a2 + 112)) * *(float *)(a2 + 108));
  if (v46 < 0)
  {
    int v48 = 0;
    int v47 = 0;
  }
  else if (v45 * v44 <= v46)
  {
    int v47 = v44 - 1;
    int v48 = v24 - 1;
  }
  else
  {
    int v47 = v46 / v45;
    int v48 = v46 % v45;
  }
  float v49 = v35 - (float)v35;
  float v50 = (float)(1 << v47);
  float v1170 = (float)(v1054 * v41) * v43;
  float v51 = (float)(1.0 / v50) * a3;
  float v52 = (float)(1.0 / v50) * a4;
  float v53 = v20 / v50;
  uint64_t v54 = *(void *)(a2 + 32);
  int v55 = (unint64_t *)(*(void *)(a2 + 56) + 144 * (v54 * v47 + v48));
  float v57 = v12.__cosval * (float)(v20 / v50);
  float v58 = v51 + (float)(v57 * -0.5);
  float v59 = v53 * v1273;
  float v60 = v58 + (float)((float)(v53 * v1273) * 0.70711);
  float v61 = (float)v55[4] + -1.001;
  if (v61 >= v60) {
    float v62 = v58 + (float)(v59 * 0.70711);
  }
  else {
    float v62 = (float)v55[4] + -1.001;
  }
  if (v60 >= 0.0) {
    float v63 = v62;
  }
  else {
    float v63 = 0.0;
  }
  float v64 = v12.__sinval * v53;
  float v65 = v52 + (float)((float)(v12.__sinval * v53) * -0.5);
  float v66 = v65 + (float)(v57 * 0.70711);
  unint64_t v56 = v55[6];
  float v67 = (float)v56 + -1.001;
  if (v67 >= v66) {
    float v68 = v65 + (float)(v57 * 0.70711);
  }
  else {
    float v68 = (float)v56 + -1.001;
  }
  if (v66 >= 0.0) {
    float v69 = v68;
  }
  else {
    float v69 = 0.0;
  }
  float v70 = v51 + (float)(v57 * 0.5);
  float v71 = v70 + (float)(v59 * 0.70711);
  if (v61 >= v71) {
    float v72 = v70 + (float)(v59 * 0.70711);
  }
  else {
    float v72 = (float)v55[4] + -1.001;
  }
  if (v71 >= 0.0) {
    float v73 = v72;
  }
  else {
    float v73 = 0.0;
  }
  float v74 = v52 + (float)(v64 * 0.5);
  float v75 = v74 + (float)(v57 * 0.70711);
  if (v67 >= v75) {
    float v76 = v74 + (float)(v57 * 0.70711);
  }
  else {
    float v76 = (float)v56 + -1.001;
  }
  if (v75 >= 0.0) {
    float v77 = v76;
  }
  else {
    float v77 = 0.0;
  }
  float v78 = (float)(v57 + v51) + (float)(v59 * 0.0);
  if (v61 >= v78) {
    float v79 = (float)(v57 + v51) + (float)(v59 * 0.0);
  }
  else {
    float v79 = (float)v55[4] + -1.001;
  }
  if (v78 >= 0.0) {
    float v80 = v79;
  }
  else {
    float v80 = 0.0;
  }
  float v81 = (float)(v64 + v52) + (float)(v57 * 0.0);
  if (v67 >= v81) {
    float v82 = (float)(v64 + v52) + (float)(v57 * 0.0);
  }
  else {
    float v82 = (float)v56 + -1.001;
  }
  if (v81 >= 0.0) {
    float v83 = v82;
  }
  else {
    float v83 = 0.0;
  }
  float v84 = v70 + (float)(v59 * -0.70711);
  if (v61 >= v84) {
    float v85 = v84;
  }
  else {
    float v85 = (float)v55[4] + -1.001;
  }
  if (v84 < 0.0) {
    float v85 = 0.0;
  }
  float v86 = v74 + (float)(v57 * -0.70711);
  if (v67 >= v86) {
    float v87 = v74 + (float)(v57 * -0.70711);
  }
  else {
    float v87 = (float)v56 + -1.001;
  }
  if (v86 < 0.0) {
    float v87 = 0.0;
  }
  float v88 = v58 + (float)(v59 * -0.70711);
  if (v61 >= v88) {
    float v89 = v88;
  }
  else {
    float v89 = (float)v55[4] + -1.001;
  }
  if (v88 < 0.0) {
    float v89 = 0.0;
  }
  float v90 = v65 + (float)(v57 * -0.70711);
  if (v67 >= v90) {
    float v91 = v65 + (float)(v57 * -0.70711);
  }
  else {
    float v91 = (float)v56 + -1.001;
  }
  unint64_t v92 = v55[5];
  unint64_t v93 = v55[9];
  float v1266 = v63;
  float v1268 = v69;
  uint64_t v94 = v63;
  uint64_t v95 = (v94 + 1);
  uint64_t v1258 = v69;
  unint64_t v96 = v93 + v92 * v1258;
  unsigned int v1255 = *(unsigned __int8 *)(v96 + v94);
  unsigned int v1252 = *(unsigned __int8 *)(v96 + v95);
  unsigned int v1246 = v63;
  unsigned int v1248 = v94 + 1;
  unsigned int v1256 = *(unsigned __int8 *)(v96 + v92 + v94);
  float v97 = (float)(v51 - v57) + (float)(v59 * 0.0);
  unsigned int v1250 = *(unsigned __int8 *)(v96 + v92 + v95);
  if (v90 >= 0.0) {
    float v98 = v91;
  }
  else {
    float v98 = 0.0;
  }
  if (v61 >= v97) {
    float v99 = v97;
  }
  else {
    float v99 = v61;
  }
  float v1262 = v73;
  float v1264 = v77;
  uint64_t v100 = v73;
  uint64_t v101 = (v100 + 1);
  uint64_t v1244 = v77;
  unint64_t v102 = v93 + v92 * v1244;
  unsigned int v1238 = *(unsigned __int8 *)(v102 + v100);
  unsigned int v1236 = *(unsigned __int8 *)(v102 + v101);
  unsigned int v1227 = v73;
  unsigned int v1240 = *(unsigned __int8 *)(v102 + v92 + v100);
  unsigned int v1229 = v100 + 1;
  unsigned int v1242 = *(unsigned __int8 *)(v102 + v92 + v101);
  float v1253 = v80;
  uint64_t v103 = v80;
  float v1260 = v83;
  uint64_t v104 = (v103 + 1);
  uint64_t v1225 = v83;
  unint64_t v105 = v93 + v92 * v1225;
  unsigned int v1219 = *(unsigned __int8 *)(v105 + v103);
  unsigned int v1217 = *(unsigned __int8 *)(v105 + v104);
  unsigned int v1213 = v80;
  unsigned int v1221 = *(unsigned __int8 *)(v105 + v92 + v103);
  unsigned int v1215 = v103 + 1;
  unsigned int v1223 = *(unsigned __int8 *)(v105 + v92 + v104);
  float v1231 = v85;
  uint64_t v106 = v85;
  float v1233 = v87;
  float v107 = (float)(v52 - v64) + (float)(v57 * 0.0);
  uint64_t v108 = (v106 + 1);
  uint64_t v1209 = v87;
  unint64_t v109 = v93 + v92 * v1209;
  unint64_t v110 = v109 + v92;
  unsigned int v1207 = *(unsigned __int8 *)(v109 + v106);
  unsigned int v1205 = *(unsigned __int8 *)(v109 + v108);
  if (v97 >= 0.0) {
    float v111 = v99;
  }
  else {
    float v111 = 0.0;
  }
  if (v67 >= v107) {
    float v112 = v107;
  }
  else {
    float v112 = v67;
  }
  unsigned int v1195 = v85;
  unsigned int v1199 = *(unsigned __int8 *)(v110 + v106);
  unsigned int v1197 = v106 + 1;
  unsigned int v1201 = *(unsigned __int8 *)(v110 + v108);
  if (v107 < 0.0) {
    float v112 = 0.0;
  }
  float v113 = v20 * 1.4142;
  float v1211 = v89;
  uint64_t v114 = v89;
  float v1203 = v98;
  float v115 = v1192 * 1.4142;
  uint64_t v116 = (v114 + 1);
  uint64_t v1193 = v98;
  unint64_t v117 = v93 + v92 * v1193;
  unsigned int v1186 = *(unsigned __int8 *)(v117 + v114);
  unsigned int v1184 = *(unsigned __int8 *)(v117 + v116);
  unsigned int v1182 = v89;
  unsigned int v1188 = *(unsigned __int8 *)(v117 + v92 + v114);
  unsigned int v1183 = v114 + 1;
  unsigned int v1190 = *(unsigned __int8 *)(v117 + v92 + v116);
  float v118 = v1270 * v41;
  float v1181 = v112;
  uint64_t v1179 = v112;
  unint64_t v119 = v93 + v92 * v1179;
  float v1180 = v111;
  uint64_t v120 = v111;
  unint64_t v121 = v119 + v92;
  uint64_t v122 = (v120 + 1);
  unsigned int v1175 = *(unsigned __int8 *)(v119 + v120);
  unsigned int v1174 = *(unsigned __int8 *)(v119 + v122);
  float v123 = (float)v1177;
  unsigned int v1172 = v111;
  unsigned int v1176 = *(unsigned __int8 *)(v121 + v120);
  unsigned int v1173 = v120 + 1;
  unsigned int v1178 = *(unsigned __int8 *)(v121 + v122);
  int v124 = *(_DWORD *)(a2 + 24);
  int v125 = sub_2194F4090(a2 + 8);
  int v126 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v115) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v115) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v115) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
  if (v126 < 0)
  {
    int v128 = 0;
    int v127 = 0;
  }
  else if (v125 * v124 <= v126)
  {
    int v127 = v124 - 1;
    int v128 = v54 - 1;
  }
  else
  {
    int v127 = v126 / v125;
    int v128 = v126 % v125;
  }
  float v1062 = v1170 + (float)(v118 * v123);
  float v129 = (float)(1 << v127);
  float v130 = (float)(1.0 / v129) * a3;
  float v131 = (float)(1.0 / v129) * a4;
  float v132 = v113 / v129;
  uint64_t v133 = *(void *)(a2 + 32);
  uint64_t v134 = (unint64_t *)(*(void *)(a2 + 56) + 144 * (v133 * v127 + v128));
  float v136 = v12.__cosval * (float)(v113 / v129);
  float v137 = v130 + (float)(v136 * 0.0);
  float v138 = (float)(v113 / v129) * v1273;
  float v139 = (float)v134[4] + -1.001;
  if (v139 >= (float)(v137 - v138)) {
    float v140 = v137 - v138;
  }
  else {
    float v140 = (float)v134[4] + -1.001;
  }
  if ((float)(v137 - v138) >= 0.0) {
    float v141 = v140;
  }
  else {
    float v141 = 0.0;
  }
  float v142 = v12.__sinval * v132;
  float v143 = v131 + (float)((float)(v12.__sinval * v132) * 0.0);
  unint64_t v135 = v134[6];
  float v144 = (float)v135 + -1.001;
  if (v144 >= (float)(v143 - v136)) {
    float v145 = v143 - v136;
  }
  else {
    float v145 = (float)v135 + -1.001;
  }
  if ((float)(v143 - v136) >= 0.0) {
    float v146 = v145;
  }
  else {
    float v146 = 0.0;
  }
  float v147 = v130 + (float)(v136 * 0.70711);
  float v148 = v147 + (float)(v138 * 0.5);
  if (v139 >= v148) {
    float v149 = v147 + (float)(v138 * 0.5);
  }
  else {
    float v149 = (float)v134[4] + -1.001;
  }
  if (v148 >= 0.0) {
    float v150 = v149;
  }
  else {
    float v150 = 0.0;
  }
  float v151 = v131 + (float)(v142 * 0.70711);
  float v152 = v151 + (float)(v136 * 0.5);
  if (v144 >= v152) {
    float v153 = v151 + (float)(v136 * 0.5);
  }
  else {
    float v153 = (float)v135 + -1.001;
  }
  if (v152 < 0.0) {
    float v153 = 0.0;
  }
  float v154 = v147 + (float)(v138 * -0.5);
  if (v139 >= v154) {
    float v155 = v154;
  }
  else {
    float v155 = (float)v134[4] + -1.001;
  }
  if (v154 < 0.0) {
    float v155 = 0.0;
  }
  float v156 = v151 + (float)(v136 * -0.5);
  if (v144 >= v156) {
    float v157 = v156;
  }
  else {
    float v157 = (float)v135 + -1.001;
  }
  if (v156 < 0.0) {
    float v157 = 0.0;
  }
  float v158 = v138 + v137;
  if (v139 >= v158) {
    float v159 = v158;
  }
  else {
    float v159 = (float)v134[4] + -1.001;
  }
  float v160 = v131 + (float)(v142 * -0.70711);
  float v161 = v130 + (float)(v136 * -0.70711);
  float v162 = v161 + (float)(v138 * -0.5);
  float v163 = v161 + (float)(v138 * 0.5);
  float v164 = v160 + (float)(v136 * -0.5);
  float v165 = v160 + (float)(v136 * 0.5);
  unint64_t v166 = v134[5];
  unint64_t v167 = v134[9];
  float v1169 = v141;
  uint64_t v168 = v141;
  float v1171 = v146;
  uint64_t v169 = (v168 + 1);
  uint64_t v1163 = v146;
  unint64_t v170 = v167 + v166 * v1163;
  unsigned int v1160 = *(unsigned __int8 *)(v170 + v168);
  unsigned int v1158 = *(unsigned __int8 *)(v170 + v169);
  unsigned int v1154 = v141;
  unsigned int v1161 = *(unsigned __int8 *)(v170 + v166 + v168);
  unsigned int v1156 = v168 + 1;
  unsigned int v1162 = *(unsigned __int8 *)(v170 + v166 + v169);
  float v1167 = v150;
  uint64_t v171 = v150;
  if (v158 >= 0.0) {
    float v172 = v159;
  }
  else {
    float v172 = 0.0;
  }
  float v173 = v136 + v143;
  if (v144 >= v173) {
    float v174 = v173;
  }
  else {
    float v174 = v144;
  }
  if (v173 < 0.0) {
    float v174 = 0.0;
  }
  if (v139 >= v162) {
    float v175 = v162;
  }
  else {
    float v175 = v139;
  }
  if (v162 >= 0.0) {
    float v176 = v175;
  }
  else {
    float v176 = 0.0;
  }
  if (v144 >= v164) {
    float v177 = v164;
  }
  else {
    float v177 = v144;
  }
  float v1168 = v153;
  uint64_t v178 = (v171 + 1);
  uint64_t v1152 = v153;
  unint64_t v179 = v167 + v166 * v1152;
  unsigned int v1149 = *(unsigned __int8 *)(v179 + v171);
  unsigned int v1148 = *(unsigned __int8 *)(v179 + v178);
  unsigned int v1147 = v150;
  unsigned int v1150 = *(unsigned __int8 *)(v179 + v166 + v171);
  unsigned int v1146 = v171 + 1;
  unsigned int v1151 = *(unsigned __int8 *)(v179 + v166 + v178);
  float v1164 = v155;
  uint64_t v180 = v155;
  float v1166 = v157;
  uint64_t v181 = (v180 + 1);
  uint64_t v1145 = v157;
  unint64_t v182 = v167 + v166 * v1145;
  unsigned int v1143 = *(unsigned __int8 *)(v182 + v180);
  unsigned int v1141 = *(unsigned __int8 *)(v182 + v181);
  unint64_t v183 = v182 + v166;
  unsigned int v1138 = v155;
  unsigned int v1144 = *(unsigned __int8 *)(v183 + v180);
  if (v164 < 0.0) {
    float v177 = 0.0;
  }
  if (v139 >= v163) {
    float v139 = v163;
  }
  unsigned int v1140 = v180 + 1;
  unsigned int v1142 = *(unsigned __int8 *)(v183 + v181);
  float v1137 = v172;
  uint64_t v184 = v172;
  if (v163 >= 0.0) {
    float v185 = v139;
  }
  else {
    float v185 = 0.0;
  }
  if (v144 >= v165) {
    float v186 = v165;
  }
  else {
    float v186 = v144;
  }
  float v187 = v113 * 1.4142;
  float v188 = v115 * 1.4142;
  float v1139 = v174;
  uint64_t v189 = (v184 + 1);
  uint64_t v1136 = v174;
  unint64_t v190 = v167 + v166 * v1136;
  unsigned int v1133 = *(unsigned __int8 *)(v190 + v184);
  unsigned int v1132 = *(unsigned __int8 *)(v190 + v189);
  unsigned int v1130 = v172;
  unsigned int v1134 = *(unsigned __int8 *)(v190 + v166 + v184);
  unsigned int v1128 = v184 + 1;
  unsigned int v1135 = *(unsigned __int8 *)(v190 + v166 + v189);
  float v1131 = v176;
  uint64_t v191 = v176;
  float v1129 = v177;
  float v192 = v49;
  float v193 = v1270 * v49;
  uint64_t v194 = (v191 + 1);
  uint64_t v1271 = v177;
  unint64_t v195 = v167 + v166 * v1271;
  unsigned int v1125 = *(unsigned __int8 *)(v195 + v191);
  unsigned int v1124 = *(unsigned __int8 *)(v195 + v194);
  unsigned int v1122 = v176;
  unsigned int v1126 = *(unsigned __int8 *)(v195 + v166 + v191);
  unsigned int v1123 = v191 + 1;
  unsigned int v1127 = *(unsigned __int8 *)(v195 + v166 + v194);
  if (v165 < 0.0) {
    float v186 = 0.0;
  }
  float v1120 = v186;
  uint64_t v1119 = v186;
  unint64_t v196 = v167 + v166 * v1119;
  float v1121 = v185;
  uint64_t v197 = v185;
  unint64_t v198 = v196 + v166;
  uint64_t v199 = (v197 + 1);
  unsigned int v1115 = *(unsigned __int8 *)(v196 + v197);
  unsigned int v1114 = *(unsigned __int8 *)(v196 + v199);
  float v200 = (float)v1117;
  unsigned int v1110 = v185;
  unsigned int v1116 = *(unsigned __int8 *)(v198 + v197);
  unsigned int v1113 = v197 + 1;
  unsigned int v1118 = *(unsigned __int8 *)(v198 + v199);
  int v201 = *(_DWORD *)(a2 + 24);
  int v202 = sub_2194F4090(a2 + 8);
  int v203 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v188) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v188) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v188) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
  if (v203 < 0)
  {
    int v204 = 0;
    int v205 = 0;
  }
  else if (v202 * v201 <= v203)
  {
    int v204 = v201 - 1;
    int v205 = v133 - 1;
  }
  else
  {
    int v204 = v203 / v202;
    int v205 = v203 % v202;
  }
  float v206 = (float)(1 << v204);
  float v207 = (float)(1.0 / v206) * a3;
  float v208 = (float)(1.0 / v206) * a4;
  float v209 = v187 / v206;
  uint64_t v210 = *(void *)(a2 + 32);
  float v211 = (unint64_t *)(*(void *)(a2 + 56) + 144 * (v210 * v204 + v205));
  unint64_t v212 = v211[5];
  float v214 = v12.__cosval * (float)(v187 / v206);
  float v215 = v207 + (float)(v214 * -0.5);
  float v216 = v209 * v1273;
  float v217 = v215 + (float)((float)(v209 * v1273) * 0.70711);
  float v218 = (float)v211[4] + -1.001;
  if (v218 >= v217) {
    float v219 = v215 + (float)(v216 * 0.70711);
  }
  else {
    float v219 = (float)v211[4] + -1.001;
  }
  if (v217 >= 0.0) {
    float v220 = v219;
  }
  else {
    float v220 = 0.0;
  }
  float v221 = v12.__sinval * v209;
  float v222 = v208 + (float)(v221 * -0.5);
  float v223 = v222 + (float)(v214 * 0.70711);
  unint64_t v213 = v211[6];
  float v224 = (float)v213 + -1.001;
  if (v224 >= v223) {
    float v225 = v222 + (float)(v214 * 0.70711);
  }
  else {
    float v225 = (float)v213 + -1.001;
  }
  if (v223 < 0.0) {
    float v225 = 0.0;
  }
  float v1107 = v220;
  uint64_t v226 = v220;
  float v1109 = v225;
  unint64_t v227 = v211[9];
  uint64_t v228 = (v226 + 1);
  uint64_t v1108 = v225;
  unint64_t v229 = v227 + v212 * v1108;
  unsigned int v1105 = *(unsigned __int8 *)(v229 + v226);
  unsigned int v1101 = *(unsigned __int8 *)(v229 + v228);
  unsigned int v1099 = v220;
  unsigned int v1103 = *(unsigned __int8 *)(v229 + v212 + v226);
  unsigned int v1100 = v226 + 1;
  unsigned int v1104 = *(unsigned __int8 *)(v229 + v212 + v228);
  float v230 = v207 + (float)(v214 * 0.5);
  float v231 = v230 + (float)(v216 * 0.70711);
  if (v218 >= v231) {
    float v232 = v230 + (float)(v216 * 0.70711);
  }
  else {
    float v232 = v218;
  }
  if (v231 >= 0.0) {
    float v233 = v232;
  }
  else {
    float v233 = 0.0;
  }
  float v234 = v208 + (float)(v221 * 0.5);
  float v235 = v234 + (float)(v214 * 0.70711);
  if (v224 >= v235) {
    float v236 = v234 + (float)(v214 * 0.70711);
  }
  else {
    float v236 = (float)v213 + -1.001;
  }
  if (v235 >= 0.0) {
    float v237 = v236;
  }
  else {
    float v237 = 0.0;
  }
  float v1093 = v233;
  uint64_t v238 = v233;
  float v1096 = v237;
  uint64_t v239 = (v238 + 1);
  uint64_t v1094 = v237;
  unint64_t v240 = v227 + v212 * v1094;
  unsigned int v1092 = *(unsigned __int8 *)(v240 + v238);
  unsigned int v1087 = *(unsigned __int8 *)(v240 + v239);
  unint64_t v241 = v240 + v212;
  unsigned int v1084 = v233;
  unsigned int v1088 = *(unsigned __int8 *)(v241 + v238);
  unsigned int v1086 = v238 + 1;
  unsigned int v1090 = *(unsigned __int8 *)(v241 + v239);
  float v242 = (float)(v214 + v207) + (float)(v216 * 0.0);
  if (v218 >= v242) {
    float v243 = (float)(v214 + v207) + (float)(v216 * 0.0);
  }
  else {
    float v243 = v218;
  }
  if (v242 >= 0.0) {
    float v244 = v243;
  }
  else {
    float v244 = 0.0;
  }
  float v245 = (float)(v221 + v208) + (float)(v214 * 0.0);
  if (v224 >= v245) {
    float v246 = (float)(v221 + v208) + (float)(v214 * 0.0);
  }
  else {
    float v246 = (float)v213 + -1.001;
  }
  float v1079 = v244;
  uint64_t v247 = v244;
  if (v245 >= 0.0) {
    float v248 = v246;
  }
  else {
    float v248 = 0.0;
  }
  float v1081 = v248;
  uint64_t v249 = (v247 + 1);
  uint64_t v1080 = v248;
  unint64_t v250 = v227 + v212 * v1080;
  unsigned int v1077 = *(unsigned __int8 *)(v250 + v247);
  unsigned int v1071 = *(unsigned __int8 *)(v250 + v249);
  unsigned int v1068 = v244;
  unsigned int v1073 = *(unsigned __int8 *)(v250 + v212 + v247);
  unsigned int v1069 = v247 + 1;
  unsigned int v1075 = *(unsigned __int8 *)(v250 + v212 + v249);
  float v251 = v230 + (float)(v216 * -0.70711);
  if (v218 >= v251) {
    float v252 = v251;
  }
  else {
    float v252 = v218;
  }
  if (v251 < 0.0) {
    float v252 = 0.0;
  }
  float v253 = v234 + (float)(v214 * -0.70711);
  if (v224 >= v253) {
    float v254 = v234 + (float)(v214 * -0.70711);
  }
  else {
    float v254 = (float)v213 + -1.001;
  }
  if (v253 >= 0.0) {
    float v255 = v254;
  }
  else {
    float v255 = 0.0;
  }
  float v1060 = v252;
  uint64_t v256 = v252;
  float v1065 = v255;
  float v1022 = v1062 + (float)(v193 * v200);
  uint64_t v257 = (v256 + 1);
  uint64_t v1063 = v255;
  unint64_t v258 = v227 + v212 * v1063;
  unsigned int v1058 = *(unsigned __int8 *)(v258 + v256);
  unsigned int v1056 = *(unsigned __int8 *)(v258 + v257);
  unsigned int v1053 = v252;
  unsigned int v1050 = *(unsigned __int8 *)(v258 + v212 + v256);
  float v259 = v1054 * v192;
  unsigned int v1055 = v256 + 1;
  unsigned int v1051 = *(unsigned __int8 *)(v258 + v212 + v257);
  float v260 = v215 + (float)(v216 * -0.70711);
  if (v218 >= v260) {
    float v261 = v260;
  }
  else {
    float v261 = v218;
  }
  if (v260 < 0.0) {
    float v261 = 0.0;
  }
  float v262 = v222 + (float)(v214 * -0.70711);
  if (v224 >= v262) {
    float v263 = v222 + (float)(v214 * -0.70711);
  }
  else {
    float v263 = (float)v213 + -1.001;
  }
  if (v262 >= 0.0) {
    float v264 = v263;
  }
  else {
    float v264 = 0.0;
  }
  float v1040 = v261;
  uint64_t v265 = v261;
  float v1048 = v264;
  uint64_t v266 = (v265 + 1);
  uint64_t v1046 = v264;
  unint64_t v267 = v227 + v212 * v1046;
  unsigned int v1042 = *(unsigned __int8 *)(v267 + v265);
  unsigned int v1039 = *(unsigned __int8 *)(v267 + v266);
  unsigned int v1037 = v261;
  unsigned int v1043 = *(unsigned __int8 *)(v267 + v212 + v265);
  unsigned int v1038 = v265 + 1;
  unsigned int v1045 = *(unsigned __int8 *)(v267 + v212 + v266);
  float v268 = (float)(v207 - v214) + (float)(v216 * 0.0);
  if (v218 >= v268) {
    float v269 = v268;
  }
  else {
    float v269 = v218;
  }
  if (v268 < 0.0) {
    float v269 = 0.0;
  }
  float v270 = (float)(v208 - v221) + (float)(v214 * 0.0);
  if (v224 >= v270) {
    float v271 = v270;
  }
  else {
    float v271 = (float)v213 + -1.001;
  }
  if (v270 >= 0.0) {
    float v272 = v271;
  }
  else {
    float v272 = 0.0;
  }
  float v1035 = v272;
  float v273 = (float)v1033;
  uint64_t v1034 = v272;
  unint64_t v274 = v227 + v212 * v1034;
  unint64_t v275 = v274 + v212;
  float v1028 = v269;
  uint64_t v276 = v269;
  uint64_t v277 = (v276 + 1);
  unsigned int v1030 = *(unsigned __int8 *)(v274 + v276);
  unsigned int v1029 = *(unsigned __int8 *)(v274 + v277);
  unsigned int v1025 = v269;
  unsigned int v1031 = *(unsigned __int8 *)(v275 + v276);
  unsigned int v1027 = v276 + 1;
  unsigned int v1032 = *(unsigned __int8 *)(v275 + v277);
  float v278 = v187 * 1.4142;
  float v279 = v188 * 1.4142;
  int v280 = *(_DWORD *)(a2 + 24);
  int v281 = sub_2194F4090(a2 + 8);
  int v282 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v279) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v279) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v279) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
  if (v282 < 0)
  {
    int v283 = 0;
    int v284 = 0;
  }
  else if (v281 * v280 <= v282)
  {
    int v283 = v280 - 1;
    int v284 = v210 - 1;
  }
  else
  {
    int v283 = v282 / v281;
    int v284 = v282 % v281;
  }
  float v285 = (float)(1 << v283);
  float v286 = (float)(1.0 / v285) * a3;
  float v287 = (float)(1.0 / v285) * a4;
  float v288 = v278 / v285;
  uint64_t v289 = *(void *)(a2 + 32);
  unsigned int v290 = (void *)(*(void *)(a2 + 56) + 144 * (v289 * v283 + v284));
  uint64_t v291 = v290[9];
  unint64_t v293 = v290[4];
  uint64_t v292 = v290[5];
  unint64_t v294 = v290[6];
  float v295 = v12.__cosval * (float)(v278 / v285);
  float v296 = v286 + (float)(v295 * 0.0);
  float v297 = v288 * v1273;
  float v298 = (float)v293 + -1.001;
  if (v298 >= (float)(v296 - (float)(v288 * v1273))) {
    float v299 = v296 - v297;
  }
  else {
    float v299 = (float)v293 + -1.001;
  }
  if ((float)(v296 - (float)(v288 * v1273)) >= 0.0) {
    float v300 = v299;
  }
  else {
    float v300 = 0.0;
  }
  float v301 = v12.__sinval * v288;
  float v302 = v287 + (float)((float)(v12.__sinval * v288) * 0.0);
  float v303 = (float)v294 + -1.001;
  if (v303 >= (float)(v302 - v295)) {
    float v304 = v302 - v295;
  }
  else {
    float v304 = (float)v294 + -1.001;
  }
  float v1012 = v300;
  uint64_t v305 = v300;
  if ((float)(v302 - v295) < 0.0) {
    float v304 = 0.0;
  }
  float v1014 = v304;
  uint64_t v306 = (v305 + 1);
  uint64_t v1013 = v304;
  uint64_t v307 = v291 + v292 * v1013;
  unsigned int v1011 = *(unsigned __int8 *)(v307 + v305);
  unsigned int v1002 = *(unsigned __int8 *)(v307 + v306);
  unsigned int v998 = v300;
  unsigned int v1007 = *(unsigned __int8 *)(v307 + v292 + v305);
  unsigned int v1000 = v305 + 1;
  unsigned int v1009 = *(unsigned __int8 *)(v307 + v292 + v306);
  float v308 = v286 + (float)(v295 * 0.70711);
  float v309 = v308 + (float)(v297 * 0.5);
  if (v298 >= v309) {
    float v310 = v308 + (float)(v297 * 0.5);
  }
  else {
    float v310 = (float)v293 + -1.001;
  }
  if (v309 >= 0.0) {
    float v311 = v310;
  }
  else {
    float v311 = 0.0;
  }
  float v312 = v287 + (float)(v301 * 0.70711);
  float v313 = v312 + (float)(v295 * 0.5);
  if (v303 >= v313) {
    float v314 = v312 + (float)(v295 * 0.5);
  }
  else {
    float v314 = v303;
  }
  float v992 = v311;
  uint64_t v315 = v311;
  if (v313 >= 0.0) {
    float v316 = v314;
  }
  else {
    float v316 = 0.0;
  }
  float v994 = v316;
  uint64_t v317 = (v315 + 1);
  uint64_t v993 = v316;
  uint64_t v318 = v291 + v292 * v993;
  unsigned int v991 = *(unsigned __int8 *)(v318 + v315);
  unsigned int v986 = *(unsigned __int8 *)(v318 + v317);
  unsigned int v984 = v311;
  unsigned int v987 = *(unsigned __int8 *)(v318 + v292 + v315);
  unsigned int v985 = v315 + 1;
  unsigned int v988 = *(unsigned __int8 *)(v318 + v292 + v317);
  float v319 = v308 + (float)(v297 * -0.5);
  if (v298 >= v319) {
    float v320 = v319;
  }
  else {
    float v320 = (float)v293 + -1.001;
  }
  if (v319 < 0.0) {
    float v320 = 0.0;
  }
  float v321 = v312 + (float)(v295 * -0.5);
  if (v303 >= v321) {
    float v322 = v321;
  }
  else {
    float v322 = v303;
  }
  if (v321 >= 0.0) {
    float v323 = v322;
  }
  else {
    float v323 = 0.0;
  }
  float v978 = v320;
  uint64_t v324 = v320;
  float v980 = v323;
  uint64_t v325 = (v324 + 1);
  uint64_t v979 = v323;
  uint64_t v326 = v291 + v292 * v979;
  unsigned int v975 = *(unsigned __int8 *)(v326 + v324);
  unsigned int v972 = *(unsigned __int8 *)(v326 + v325);
  unsigned int v970 = v320;
  unsigned int v973 = *(unsigned __int8 *)(v326 + v292 + v324);
  unsigned int v971 = v324 + 1;
  unsigned int v974 = *(unsigned __int8 *)(v326 + v292 + v325);
  float v327 = v297 + v296;
  if (v298 >= v327) {
    float v328 = v327;
  }
  else {
    float v328 = (float)v293 + -1.001;
  }
  if (v327 < 0.0) {
    float v328 = 0.0;
  }
  float v329 = v295 + v302;
  if (v303 >= (float)(v295 + v302)) {
    float v330 = v295 + v302;
  }
  else {
    float v330 = v303;
  }
  if (v329 >= 0.0) {
    float v331 = v330;
  }
  else {
    float v331 = 0.0;
  }
  float v964 = v328;
  uint64_t v332 = v328;
  float v966 = v331;
  uint64_t v333 = (v332 + 1);
  uint64_t v965 = v331;
  uint64_t v334 = v291 + v292 * v965;
  unsigned int v959 = *(unsigned __int8 *)(v334 + v332);
  unsigned int v957 = *(unsigned __int8 *)(v334 + v333);
  unsigned int v956 = v328;
  unsigned int v960 = *(unsigned __int8 *)(v334 + v292 + v332);
  unsigned int v958 = v332 + 1;
  unsigned int v961 = *(unsigned __int8 *)(v334 + v292 + v333);
  float v335 = v286 + (float)(v295 * -0.70711);
  float v336 = v287 + (float)(v301 * -0.70711);
  float v337 = v335 + (float)(v297 * -0.5);
  if (v298 >= v337) {
    float v338 = v335 + (float)(v297 * -0.5);
  }
  else {
    float v338 = (float)v293 + -1.001;
  }
  if (v337 >= 0.0) {
    float v339 = v338;
  }
  else {
    float v339 = 0.0;
  }
  float v340 = v336 + (float)(v295 * -0.5);
  if (v303 >= v340) {
    float v341 = v336 + (float)(v295 * -0.5);
  }
  else {
    float v341 = v303;
  }
  if (v340 >= 0.0) {
    float v342 = v341;
  }
  else {
    float v342 = 0.0;
  }
  float v950 = v339;
  uint64_t v343 = v339;
  float v952 = v342;
  uint64_t v344 = (v343 + 1);
  uint64_t v951 = v342;
  uint64_t v345 = v291 + v292 * v951;
  unsigned int v947 = *(unsigned __int8 *)(v345 + v343);
  unsigned int v943 = *(unsigned __int8 *)(v345 + v344);
  uint64_t v346 = v345 + v292;
  unsigned int v942 = v339;
  unsigned int v945 = *(unsigned __int8 *)(v346 + v343);
  unsigned int v944 = v343 + 1;
  unsigned int v946 = *(unsigned __int8 *)(v346 + v344);
  float v347 = v335 + (float)(v297 * 0.5);
  if (v298 >= v347) {
    float v298 = v347;
  }
  if (v347 >= 0.0) {
    float v348 = v298;
  }
  else {
    float v348 = 0.0;
  }
  float v349 = v336 + (float)(v295 * 0.5);
  if (v303 >= v349) {
    float v350 = v349;
  }
  else {
    float v350 = v303;
  }
  if (v349 >= 0.0) {
    float v351 = v350;
  }
  else {
    float v351 = 0.0;
  }
  float v948 = v351;
  uint64_t v941 = v351;
  uint64_t v352 = v291 + v292 * v941;
  uint64_t v353 = v352 + v292;
  float v940 = v348;
  uint64_t v354 = v348;
  uint64_t v355 = (v354 + 1);
  unsigned int v937 = *(unsigned __int8 *)(v352 + v354);
  unsigned int v936 = *(unsigned __int8 *)(v352 + v355);
  unsigned int v954 = v348;
  unsigned int v938 = *(unsigned __int8 *)(v353 + v354);
  float v356 = v1022 + (float)(v259 * v273);
  unsigned int v935 = v354 + 1;
  unsigned int v939 = *(unsigned __int8 *)(v353 + v355);
  float v357 = v278 * 1.4142;
  float v358 = v279 * 1.4142;
  int v359 = *(_DWORD *)(a2 + 24);
  int v360 = sub_2194F4090(a2 + 8);
  int v361 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v358) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v358) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v358) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
  if (v361 < 0)
  {
    int v362 = 0;
    int v363 = 0;
  }
  else if (v360 * v359 <= v361)
  {
    int v362 = v359 - 1;
    int v363 = v289 - 1;
  }
  else
  {
    int v362 = v361 / v360;
    int v363 = v361 % v360;
  }
  float v364 = (float)(1 << v362);
  float v365 = (float)(1.0 / v364) * a3;
  float v366 = (float)(1.0 / v364) * a4;
  float v367 = v357 / v364;
  uint64_t v368 = *(void *)(a2 + 32);
  float v369 = (unint64_t *)(*(void *)(a2 + 56) + 144 * (v368 * v362 + v363));
  unint64_t v370 = v369[5];
  float v372 = v12.__cosval * (float)(v357 / v364);
  float v373 = v365 + (float)(v372 * -0.5);
  float v374 = v367 * v1273;
  float v375 = v373 + (float)((float)(v367 * v1273) * 0.70711);
  float v376 = (float)v369[4] + -1.001;
  if (v376 >= v375) {
    float v377 = v373 + (float)(v374 * 0.70711);
  }
  else {
    float v377 = (float)v369[4] + -1.001;
  }
  if (v375 >= 0.0) {
    float v378 = v377;
  }
  else {
    float v378 = 0.0;
  }
  float v379 = v12.__sinval * v367;
  float v380 = v366 + (float)(v379 * -0.5);
  float v381 = v380 + (float)(v372 * 0.70711);
  unint64_t v371 = v369[6];
  float v382 = (float)v371 + -1.001;
  if (v382 >= v381) {
    float v383 = v380 + (float)(v372 * 0.70711);
  }
  else {
    float v383 = (float)v371 + -1.001;
  }
  if (v381 < 0.0) {
    float v383 = 0.0;
  }
  float v933 = v378;
  uint64_t v384 = v378;
  float v934 = v383;
  unint64_t v385 = v369[9];
  uint64_t v386 = (v384 + 1);
  uint64_t v878 = v383;
  unint64_t v387 = v385 + v370 * v878;
  unsigned int v932 = *(unsigned __int8 *)(v387 + v384);
  unsigned int v929 = *(unsigned __int8 *)(v387 + v386);
  unsigned int v927 = v378;
  unsigned int v930 = *(unsigned __int8 *)(v387 + v370 + v384);
  unsigned int v928 = v384 + 1;
  unsigned int v931 = *(unsigned __int8 *)(v387 + v370 + v386);
  float v388 = v365 + (float)(v372 * 0.5);
  float v389 = v388 + (float)(v374 * 0.70711);
  if (v376 >= v389) {
    float v390 = v388 + (float)(v374 * 0.70711);
  }
  else {
    float v390 = v376;
  }
  if (v389 >= 0.0) {
    float v391 = v390;
  }
  else {
    float v391 = 0.0;
  }
  float v392 = v366 + (float)(v379 * 0.5);
  float v393 = v392 + (float)(v372 * 0.70711);
  if (v382 >= v393) {
    float v394 = v392 + (float)(v372 * 0.70711);
  }
  else {
    float v394 = (float)v371 + -1.001;
  }
  if (v393 >= 0.0) {
    float v395 = v394;
  }
  else {
    float v395 = 0.0;
  }
  float v924 = v391;
  uint64_t v396 = v391;
  float v962 = v395;
  uint64_t v397 = (v396 + 1);
  uint64_t v925 = v395;
  unint64_t v398 = v385 + v370 * v925;
  unsigned int v923 = *(unsigned __int8 *)(v398 + v396);
  unsigned int v920 = *(unsigned __int8 *)(v398 + v397);
  unsigned int v917 = v391;
  unsigned int v921 = *(unsigned __int8 *)(v398 + v370 + v396);
  unsigned int v918 = v396 + 1;
  unsigned int v922 = *(unsigned __int8 *)(v398 + v370 + v397);
  float v399 = (float)(v372 + v365) + (float)(v374 * 0.0);
  if (v376 >= v399) {
    float v400 = (float)(v372 + v365) + (float)(v374 * 0.0);
  }
  else {
    float v400 = v376;
  }
  if (v399 >= 0.0) {
    float v401 = v400;
  }
  else {
    float v401 = 0.0;
  }
  float v402 = (float)(v379 + v366) + (float)(v372 * 0.0);
  if (v382 >= v402) {
    float v403 = (float)(v379 + v366) + (float)(v372 * 0.0);
  }
  else {
    float v403 = (float)v371 + -1.001;
  }
  if (v402 >= 0.0) {
    float v404 = v403;
  }
  else {
    float v404 = 0.0;
  }
  float v916 = v401;
  uint64_t v405 = v401;
  float v406 = v388 + (float)(v374 * -0.70711);
  if (v376 >= v406) {
    float v407 = v406;
  }
  else {
    float v407 = v376;
  }
  if (v406 < 0.0) {
    float v407 = 0.0;
  }
  float v408 = v392 + (float)(v372 * -0.70711);
  if (v382 >= v408) {
    float v409 = v392 + (float)(v372 * -0.70711);
  }
  else {
    float v409 = (float)v371 + -1.001;
  }
  if (v408 < 0.0) {
    float v409 = 0.0;
  }
  float v410 = v373 + (float)(v374 * -0.70711);
  if (v376 >= v410) {
    float v411 = v410;
  }
  else {
    float v411 = v376;
  }
  float v968 = v404;
  uint64_t v412 = (v405 + 1);
  uint64_t v914 = v404;
  unint64_t v413 = v385 + v370 * v914;
  unsigned int v910 = *(unsigned __int8 *)(v413 + v405);
  unsigned int v909 = *(unsigned __int8 *)(v413 + v412);
  unsigned int v915 = v401;
  unsigned int v911 = *(unsigned __int8 *)(v413 + v370 + v405);
  unsigned int v907 = v405 + 1;
  unsigned int v913 = *(unsigned __int8 *)(v413 + v370 + v412);
  float v908 = v407;
  uint64_t v414 = v407;
  float v976 = v409;
  uint64_t v415 = (v414 + 1);
  uint64_t v906 = v409;
  unint64_t v416 = v385 + v370 * v906;
  unsigned int v902 = *(unsigned __int8 *)(v416 + v414);
  unsigned int v901 = *(unsigned __int8 *)(v416 + v415);
  unint64_t v417 = v416 + v370;
  unsigned int v899 = v407;
  unsigned int v903 = *(unsigned __int8 *)(v417 + v414);
  unsigned int v900 = v414 + 1;
  unsigned int v904 = *(unsigned __int8 *)(v417 + v415);
  if (v410 < 0.0) {
    float v411 = 0.0;
  }
  float v418 = v380 + (float)(v372 * -0.70711);
  if (v382 >= v418) {
    float v419 = v380 + (float)(v372 * -0.70711);
  }
  else {
    float v419 = (float)v371 + -1.001;
  }
  float v895 = v411;
  uint64_t v420 = v411;
  if (v418 >= 0.0) {
    float v421 = v419;
  }
  else {
    float v421 = 0.0;
  }
  float v982 = v421;
  uint64_t v422 = (v420 + 1);
  uint64_t v897 = v421;
  unint64_t v423 = v385 + v370 * v897;
  unsigned int v893 = *(unsigned __int8 *)(v423 + v420);
  unsigned int v892 = *(unsigned __int8 *)(v423 + v422);
  unsigned int v889 = v411;
  unsigned int v894 = *(unsigned __int8 *)(v423 + v370 + v420);
  unsigned int v890 = v420 + 1;
  unsigned int v896 = *(unsigned __int8 *)(v423 + v370 + v422);
  float v424 = (float)(v365 - v372) + (float)(v374 * 0.0);
  if (v376 >= v424) {
    float v425 = v424;
  }
  else {
    float v425 = v376;
  }
  if (v424 < 0.0) {
    float v425 = 0.0;
  }
  float v426 = (float)(v366 - v379) + (float)(v372 * 0.0);
  if (v382 >= v426) {
    float v427 = v426;
  }
  else {
    float v427 = (float)v371 + -1.001;
  }
  if (v426 >= 0.0) {
    float v428 = v427;
  }
  else {
    float v428 = 0.0;
  }
  float v989 = v428;
  uint64_t v888 = v428;
  unint64_t v429 = v385 + v370 * v888;
  unint64_t v430 = v429 + v370;
  float v887 = v425;
  uint64_t v431 = v425;
  uint64_t v432 = (v431 + 1);
  unsigned int v882 = *(unsigned __int8 *)(v429 + v431);
  unsigned int v881 = *(unsigned __int8 *)(v429 + v432);
  unsigned int v996 = v425;
  unsigned int v884 = *(unsigned __int8 *)(v430 + v431);
  float v1023 = v356 * 255.0;
  unsigned int v880 = v431 + 1;
  unsigned int v886 = *(unsigned __int8 *)(v430 + v432);
  float v433 = v357 * 1.4142;
  int v434 = *(_DWORD *)(a2 + 24);
  int v435 = sub_2194F4090(a2 + 8);
  float v436 = v358 * 1.4142;
  int v437 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v358 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v358 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v358 * 1.4142) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
  if (v437 < 0)
  {
    uint64_t v438 = a2 + 8;
    int v439 = 0;
    int v440 = 0;
  }
  else
  {
    uint64_t v438 = a2 + 8;
    if (v435 * v434 <= v437)
    {
      int v439 = v434 - 1;
      int v440 = v368 - 1;
    }
    else
    {
      int v439 = v437 / v435;
      int v440 = v437 % v435;
    }
  }
  float v441 = (float)(1 << v439);
  float v442 = (float)(1.0 / v441) * a3;
  float v443 = (float)(1.0 / v441) * a4;
  float v1019 = v357 * 1.4142;
  float v444 = v433 / v441;
  uint64_t v827 = *(void *)(a2 + 32);
  uint64_t v445 = (void *)(*(void *)(a2 + 56) + 144 * (v827 * v439 + v440));
  uint64_t v446 = v445[9];
  unint64_t v448 = v445[4];
  uint64_t v447 = v445[5];
  unint64_t v449 = v445[6];
  float v450 = v12.__cosval * (float)(v433 / v441);
  float v451 = v442 + (float)(v450 * 0.0);
  float v452 = v444 * v1273;
  float v453 = (float)v448 + -1.001;
  if (v453 >= (float)(v451 - (float)(v444 * v1273))) {
    float v454 = v451 - v452;
  }
  else {
    float v454 = (float)v448 + -1.001;
  }
  if ((float)(v451 - (float)(v444 * v1273)) >= 0.0) {
    float v455 = v454;
  }
  else {
    float v455 = 0.0;
  }
  float v456 = v12.__sinval * v444;
  float v457 = v443 + (float)((float)(v12.__sinval * v444) * 0.0);
  float v458 = (float)v449 + -1.001;
  if (v458 >= (float)(v457 - v450)) {
    float v459 = v457 - v450;
  }
  else {
    float v459 = (float)v449 + -1.001;
  }
  float v876 = v455;
  uint64_t v460 = v455;
  if ((float)(v457 - v450) < 0.0) {
    float v459 = 0.0;
  }
  float v879 = v459;
  uint64_t v461 = (v460 + 1);
  uint64_t v870 = v459;
  uint64_t v462 = v446 + v447 * v870;
  unsigned int v874 = *(unsigned __int8 *)(v462 + v460);
  unsigned int v871 = *(unsigned __int8 *)(v462 + v461);
  unsigned int v866 = v455;
  unsigned int v872 = *(unsigned __int8 *)(v462 + v447 + v460);
  unsigned int v868 = v460 + 1;
  unsigned int v873 = *(unsigned __int8 *)(v462 + v447 + v461);
  float v463 = v442 + (float)(v450 * 0.70711);
  float v464 = v463 + (float)(v452 * 0.5);
  if (v453 >= v464) {
    float v465 = v463 + (float)(v452 * 0.5);
  }
  else {
    float v465 = (float)v448 + -1.001;
  }
  if (v464 >= 0.0) {
    float v466 = v465;
  }
  else {
    float v466 = 0.0;
  }
  float v467 = v443 + (float)(v456 * 0.70711);
  float v468 = v467 + (float)(v450 * 0.5);
  if (v458 >= v468) {
    float v469 = v467 + (float)(v450 * 0.5);
  }
  else {
    float v469 = v458;
  }
  float v865 = v466;
  uint64_t v470 = v466;
  if (v468 >= 0.0) {
    float v471 = v469;
  }
  else {
    float v471 = 0.0;
  }
  float v1004 = v471;
  uint64_t v472 = (v470 + 1);
  uint64_t v855 = v471;
  uint64_t v473 = v446 + v447 * v855;
  unsigned int v864 = *(unsigned __int8 *)(v473 + v470);
  unsigned int v858 = *(unsigned __int8 *)(v473 + v472);
  unsigned int v851 = v466;
  unsigned int v860 = *(unsigned __int8 *)(v473 + v447 + v470);
  unsigned int v853 = v470 + 1;
  unsigned int v862 = *(unsigned __int8 *)(v473 + v447 + v472);
  float v474 = v463 + (float)(v452 * -0.5);
  if (v453 >= v474) {
    float v475 = v474;
  }
  else {
    float v475 = (float)v448 + -1.001;
  }
  if (v474 >= 0.0) {
    float v476 = v475;
  }
  else {
    float v476 = 0.0;
  }
  float v477 = v467 + (float)(v450 * -0.5);
  if (v458 >= v477) {
    float v478 = v477;
  }
  else {
    float v478 = v458;
  }
  if (v477 >= 0.0) {
    float v479 = v478;
  }
  else {
    float v479 = 0.0;
  }
  uint64_t v480 = v476;
  float v1015 = v479;
  uint64_t v481 = (v480 + 1);
  uint64_t v844 = v479;
  uint64_t v482 = v446 + v447 * v844;
  unsigned int v850 = *(unsigned __int8 *)(v482 + v480);
  unsigned int v845 = *(unsigned __int8 *)(v482 + v481);
  unsigned int v847 = *(unsigned __int8 *)(v482 + v447 + v480);
  unsigned int v843 = v480 + 1;
  unsigned int v849 = *(unsigned __int8 *)(v482 + v447 + v481);
  float v483 = v452 + v451;
  if (v453 >= v483) {
    float v484 = v483;
  }
  else {
    float v484 = (float)v448 + -1.001;
  }
  if (v483 >= 0.0) {
    float v485 = v484;
  }
  else {
    float v485 = 0.0;
  }
  float v486 = v450 + v457;
  if (v458 >= (float)(v450 + v457)) {
    float v487 = v450 + v457;
  }
  else {
    float v487 = v458;
  }
  if (v486 >= 0.0) {
    float v488 = v487;
  }
  else {
    float v488 = 0.0;
  }
  uint64_t v489 = v485;
  uint64_t v490 = (v489 + 1);
  uint64_t v839 = v488;
  uint64_t v491 = v446 + v447 * v839;
  unsigned int v841 = *(unsigned __int8 *)(v491 + v489);
  unsigned int v837 = *(unsigned __int8 *)(v491 + v490);
  unsigned int v842 = *(unsigned __int8 *)(v491 + v447 + v489);
  unsigned int v1017 = *(unsigned __int8 *)(v491 + v447 + v490);
  float v492 = v442 + (float)(v450 * -0.70711);
  float v493 = v492 + (float)(v452 * -0.5);
  if (v453 >= v493) {
    float v494 = v492 + (float)(v452 * -0.5);
  }
  else {
    float v494 = (float)v448 + -1.001;
  }
  if (v493 >= 0.0) {
    float v495 = v494;
  }
  else {
    float v495 = 0.0;
  }
  float v496 = v443 + (float)(v456 * -0.70711);
  float v497 = v496 + (float)(v450 * -0.5);
  if (v458 >= v497) {
    float v498 = v496 + (float)(v450 * -0.5);
  }
  else {
    float v498 = v458;
  }
  if (v497 >= 0.0) {
    float v499 = v498;
  }
  else {
    float v499 = 0.0;
  }
  uint64_t v500 = v495;
  uint64_t v501 = (v500 + 1);
  uint64_t v502 = v499;
  uint64_t v503 = v446 + v447 * v502;
  unsigned int v1020 = *(unsigned __int8 *)(v503 + v500);
  unsigned int v833 = *(unsigned __int8 *)(v503 + v501);
  uint64_t v504 = v503 + v447;
  unsigned int v835 = *(unsigned __int8 *)(v504 + v500);
  unsigned int v836 = *(unsigned __int8 *)(v504 + v501);
  float v505 = v492 + (float)(v452 * 0.5);
  if (v453 >= v505) {
    float v453 = v505;
  }
  if (v505 >= 0.0) {
    float v506 = v453;
  }
  else {
    float v506 = 0.0;
  }
  float v507 = v496 + (float)(v450 * 0.5);
  if (v458 >= v507) {
    float v508 = v507;
  }
  else {
    float v508 = v458;
  }
  if (v507 >= 0.0) {
    float v509 = v508;
  }
  else {
    float v509 = 0.0;
  }
  uint64_t v510 = v509;
  uint64_t v511 = v446 + v447 * v510;
  uint64_t v512 = v511 + v447;
  uint64_t v513 = v506;
  uint64_t v514 = (v513 + 1);
  unsigned int v830 = *(unsigned __int8 *)(v511 + v513);
  unsigned int v828 = *(unsigned __int8 *)(v511 + v514);
  unsigned int v831 = *(unsigned __int8 *)(v512 + v513);
  unsigned int v832 = *(unsigned __int8 *)(v512 + v514);
  float v515 = v436 * 1.4142;
  unsigned int v516 = (int)v1023;
  int v517 = *(_DWORD *)(a2 + 24);
  int v518 = sub_2194F4090(v438);
  int v521 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v515) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v515) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v515) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
  if (v521 < 0)
  {
    int v522 = 0;
    int v523 = 0;
  }
  else if (v518 * v517 <= v521)
  {
    int v522 = v517 - 1;
    int v523 = v827 - 1;
  }
  else
  {
    int v522 = v521 / v518;
    int v523 = v521 % v518;
  }
  float v1024 = (float)((float)((float)((float)((float)(v506 - (float)v513)
                                        * (float)((float)(v510 + 1) - v509))
                                * (float)v828)
                        + (float)((float)((float)((float)v514 - v506)
                                        * (float)((float)(v510 + 1) - v509))
                                * (float)v830))
                + (float)((float)((float)((float)v514 - v506) * (float)(v509 - (float)v510))
                        * (float)v831))
        + (float)((float)((float)(v506 - (float)v513) * (float)(v509 - (float)v510))
                * (float)v832);
  float v1021 = (float)((float)((float)((float)((float)(v495 - (float)v500)
                                        * (float)((float)(v502 + 1) - v499))
                                * (float)v833)
                        + (float)((float)((float)((float)v501 - v495)
                                        * (float)((float)(v502 + 1) - v499))
                                * (float)v1020))
                + (float)((float)((float)((float)v501 - v495) * (float)(v499 - (float)v502))
                        * (float)v835))
        + (float)((float)((float)(v495 - (float)v500) * (float)(v499 - (float)v502))
                * (float)v836);
  float v1018 = (float)((float)((float)((float)((float)(v485 - (float)v489)
                                        * (float)((float)(v839 + 1) - v488))
                                * (float)v837)
                        + (float)((float)((float)((float)(v489 + 1) - v485)
                                        * (float)((float)(v839 + 1) - v488))
                                * (float)v841))
                + (float)((float)((float)((float)(v489 + 1) - v485)
                                * (float)(v488 - (float)v839))
                        * (float)v842))
        + (float)((float)((float)(v485 - (float)v489) * (float)(v488 - (float)v839))
                * (float)v1017);
  float v1016 = (float)((float)((float)((float)((float)(v476 - (float)v476)
                                        * (float)((float)(v844 + 1) - v1015))
                                * (float)v845)
                        + (float)((float)((float)((float)v843 - v476) * (float)((float)(v844 + 1) - v1015))
                                * (float)v850))
                + (float)((float)((float)((float)v843 - v476) * (float)(v1015 - (float)v844)) * (float)v847))
        + (float)((float)((float)(v476 - (float)v476) * (float)(v1015 - (float)v844))
                * (float)v849);
  float v1005 = (float)((float)((float)((float)((float)(v865 - (float)v851) * (float)((float)(v855 + 1) - v1004))
                                * (float)v858)
                        + (float)((float)((float)((float)v853 - v865) * (float)((float)(v855 + 1) - v1004))
                                * (float)v864))
                + (float)((float)((float)((float)v853 - v865) * (float)(v1004 - (float)v855)) * (float)v860))
        + (float)((float)((float)(v865 - (float)v851) * (float)(v1004 - (float)v855)) * (float)v862);
  float v524 = v876 - (float)v866;
  float v525 = v879 - (float)v870;
  float v526 = (float)((float)((float)(v524 * (float)((float)(v870 + 1) - v879)) * (float)v871)
               + (float)((float)((float)((float)v868 - v876) * (float)((float)(v870 + 1) - v879))
                       * (float)v874))
       + (float)((float)((float)((float)v868 - v876) * v525) * (float)v872);
  float v527 = v524 * v525;
  float v528 = (float)v996;
  float v997 = v526 + (float)(v527 * (float)v873);
  float v990 = (float)((float)((float)((float)((float)(v887 - v528) * (float)((float)(v888 + 1) - v989))
                               * (float)v881)
                       + (float)((float)((float)((float)v880 - v887) * (float)((float)(v888 + 1) - v989))
                               * (float)v882))
               + (float)((float)((float)((float)v880 - v887) * (float)(v989 - (float)v888)) * (float)v884))
       + (float)((float)((float)(v887 - v528) * (float)(v989 - (float)v888)) * (float)v886);
  float v983 = (float)((float)((float)((float)((float)(v895 - (float)v889) * (float)((float)(v897 + 1) - v982))
                               * (float)v892)
                       + (float)((float)((float)((float)v890 - v895) * (float)((float)(v897 + 1) - v982))
                               * (float)v893))
               + (float)((float)((float)((float)v890 - v895) * (float)(v982 - (float)v897)) * (float)v894))
       + (float)((float)((float)(v895 - (float)v889) * (float)(v982 - (float)v897)) * (float)v896);
  float v977 = (float)((float)((float)((float)((float)(v908 - (float)v899) * (float)((float)(v906 + 1) - v976))
                               * (float)v901)
                       + (float)((float)((float)((float)v900 - v908) * (float)((float)(v906 + 1) - v976))
                               * (float)v902))
               + (float)((float)((float)((float)v900 - v908) * (float)(v976 - (float)v906)) * (float)v903))
       + (float)((float)((float)(v908 - (float)v899) * (float)(v976 - (float)v906)) * (float)v904);
  float v969 = (float)((float)((float)((float)((float)(v916 - (float)v915) * (float)((float)(v914 + 1) - v968))
                               * (float)v909)
                       + (float)((float)((float)((float)v907 - v916) * (float)((float)(v914 + 1) - v968))
                               * (float)v910))
               + (float)((float)((float)((float)v907 - v916) * (float)(v968 - (float)v914)) * (float)v911))
       + (float)((float)((float)(v916 - (float)v915) * (float)(v968 - (float)v914)) * (float)v913);
  float v963 = (float)((float)((float)((float)((float)(v924 - (float)v917) * (float)((float)(v925 + 1) - v962))
                               * (float)v920)
                       + (float)((float)((float)((float)v918 - v924) * (float)((float)(v925 + 1) - v962))
                               * (float)v923))
               + (float)((float)((float)((float)v918 - v924) * (float)(v962 - (float)v925)) * (float)v921))
       + (float)((float)((float)(v924 - (float)v917) * (float)(v962 - (float)v925)) * (float)v922);
  float v529 = v933 - (float)v927;
  float v530 = v934 - (float)v878;
  float v531 = (float)((float)((float)(v529 * (float)((float)(v878 + 1) - v934)) * (float)v929)
               + (float)((float)((float)((float)v928 - v933) * (float)((float)(v878 + 1) - v934))
                       * (float)v932))
       + (float)((float)((float)((float)v928 - v933) * v530) * (float)v930);
  float v532 = v529 * v530;
  float v533 = (float)v954;
  float v955 = v531 + (float)(v532 * (float)v931);
  float v949 = (float)((float)((float)((float)((float)(v940 - v533) * (float)((float)(v941 + 1) - v948))
                               * (float)v936)
                       + (float)((float)((float)((float)v935 - v940) * (float)((float)(v941 + 1) - v948))
                               * (float)v937))
               + (float)((float)((float)((float)v935 - v940) * (float)(v948 - (float)v941)) * (float)v938))
       + (float)((float)((float)(v940 - v533) * (float)(v948 - (float)v941)) * (float)v939);
  float v953 = (float)((float)((float)((float)((float)(v950 - (float)v942) * (float)((float)(v951 + 1) - v952))
                               * (float)v943)
                       + (float)((float)((float)((float)v944 - v950) * (float)((float)(v951 + 1) - v952))
                               * (float)v947))
               + (float)((float)((float)((float)v944 - v950) * (float)(v952 - (float)v951)) * (float)v945))
       + (float)((float)((float)(v950 - (float)v942) * (float)(v952 - (float)v951)) * (float)v946);
  float v967 = (float)((float)((float)((float)((float)(v964 - (float)v956) * (float)((float)(v965 + 1) - v966))
                               * (float)v957)
                       + (float)((float)((float)((float)v958 - v964) * (float)((float)(v965 + 1) - v966))
                               * (float)v959))
               + (float)((float)((float)((float)v958 - v964) * (float)(v966 - (float)v965)) * (float)v960))
       + (float)((float)((float)(v964 - (float)v956) * (float)(v966 - (float)v965)) * (float)v961);
  float v981 = (float)((float)((float)((float)((float)(v978 - (float)v970) * (float)((float)(v979 + 1) - v980))
                               * (float)v972)
                       + (float)((float)((float)((float)v971 - v978) * (float)((float)(v979 + 1) - v980))
                               * (float)v975))
               + (float)((float)((float)((float)v971 - v978) * (float)(v980 - (float)v979)) * (float)v973))
       + (float)((float)((float)(v978 - (float)v970) * (float)(v980 - (float)v979)) * (float)v974);
  float v995 = (float)((float)((float)((float)((float)(v992 - (float)v984) * (float)((float)(v993 + 1) - v994))
                               * (float)v986)
                       + (float)((float)((float)((float)v985 - v992) * (float)((float)(v993 + 1) - v994))
                               * (float)v991))
               + (float)((float)((float)((float)v985 - v992) * (float)(v994 - (float)v993)) * (float)v987))
       + (float)((float)((float)(v992 - (float)v984) * (float)(v994 - (float)v993)) * (float)v988);
  float v534 = v1012 - (float)v998;
  float v535 = v1014 - (float)v1013;
  float v536 = (float)((float)((float)(v534 * (float)((float)(v1013 + 1) - v1014)) * (float)v1002)
               + (float)((float)((float)((float)v1000 - v1012) * (float)((float)(v1013 + 1) - v1014))
                       * (float)v1011))
       + (float)((float)((float)((float)v1000 - v1012) * v535) * (float)v1007);
  float v537 = v534 * v535;
  float v538 = (float)v1025;
  float v1026 = v536 + (float)(v537 * (float)v1009);
  float v1036 = (float)((float)((float)((float)((float)(v1028 - v538) * (float)((float)(v1034 + 1) - v1035))
                                * (float)v1029)
                        + (float)((float)((float)((float)v1027 - v1028)
                                        * (float)((float)(v1034 + 1) - v1035))
                                * (float)v1030))
                + (float)((float)((float)((float)v1027 - v1028) * (float)(v1035 - (float)v1034))
                        * (float)v1031))
        + (float)((float)((float)(v1028 - v538) * (float)(v1035 - (float)v1034)) * (float)v1032);
  float v1049 = (float)((float)((float)((float)((float)(v1040 - (float)v1037)
                                        * (float)((float)(v1046 + 1) - v1048))
                                * (float)v1039)
                        + (float)((float)((float)((float)v1038 - v1040)
                                        * (float)((float)(v1046 + 1) - v1048))
                                * (float)v1042))
                + (float)((float)((float)((float)v1038 - v1040) * (float)(v1048 - (float)v1046))
                        * (float)v1043))
        + (float)((float)((float)(v1040 - (float)v1037) * (float)(v1048 - (float)v1046)) * (float)v1045);
  float v1066 = (float)((float)((float)((float)((float)(v1060 - (float)v1053)
                                        * (float)((float)(v1063 + 1) - v1065))
                                * (float)v1056)
                        + (float)((float)((float)((float)v1055 - v1060)
                                        * (float)((float)(v1063 + 1) - v1065))
                                * (float)v1058))
                + (float)((float)((float)((float)v1055 - v1060) * (float)(v1065 - (float)v1063))
                        * (float)v1050))
        + (float)((float)((float)(v1060 - (float)v1053) * (float)(v1065 - (float)v1063)) * (float)v1051);
  float v1082 = (float)((float)((float)((float)((float)(v1079 - (float)v1068)
                                        * (float)((float)(v1080 + 1) - v1081))
                                * (float)v1071)
                        + (float)((float)((float)((float)v1069 - v1079)
                                        * (float)((float)(v1080 + 1) - v1081))
                                * (float)v1077))
                + (float)((float)((float)((float)v1069 - v1079) * (float)(v1081 - (float)v1080))
                        * (float)v1073))
        + (float)((float)((float)(v1079 - (float)v1068) * (float)(v1081 - (float)v1080)) * (float)v1075);
  float v1097 = (float)((float)((float)((float)((float)(v1093 - (float)v1084)
                                        * (float)((float)(v1094 + 1) - v1096))
                                * (float)v1087)
                        + (float)((float)((float)((float)v1086 - v1093)
                                        * (float)((float)(v1094 + 1) - v1096))
                                * (float)v1092))
                + (float)((float)((float)((float)v1086 - v1093) * (float)(v1096 - (float)v1094))
                        * (float)v1088))
        + (float)((float)((float)(v1093 - (float)v1084) * (float)(v1096 - (float)v1094)) * (float)v1090);
  float v539 = v1107 - (float)v1099;
  float v540 = v1109 - (float)v1108;
  float v541 = (float)((float)((float)(v539 * (float)((float)(v1108 + 1) - v1109)) * (float)v1101)
               + (float)((float)((float)((float)v1100 - v1107) * (float)((float)(v1108 + 1) - v1109))
                       * (float)v1105))
       + (float)((float)((float)((float)v1100 - v1107) * v540) * (float)v1103);
  float v542 = v539 * v540;
  float v543 = (float)v1110;
  float v1111 = v541 + (float)(v542 * (float)v1104);
  float v544 = (float)((float)((float)((float)((float)(v1121 - v543) * (float)((float)(v1119 + 1) - v1120))
                               * (float)v1114)
                       + (float)((float)((float)((float)v1113 - v1121)
                                       * (float)((float)(v1119 + 1) - v1120))
                               * (float)v1115))
               + (float)((float)((float)((float)v1113 - v1121) * (float)(v1120 - (float)v1119))
                       * (float)v1116))
       + (float)((float)((float)(v1121 - v543) * (float)(v1120 - (float)v1119)) * (float)v1118);
  float v545 = (float)(1 << v522);
  float v546 = (float)(1.0 / v545) * a3;
  float v547 = (float)(1.0 / v545) * a4;
  float v548 = (float)(v1019 * 1.4142) / v545;
  float v549 = (unint64_t *)(*(void *)(a2 + 56) + 144 * (*(void *)(a2 + 32) * v522 + v523));
  float v550 = v12.__cosval * v548;
  float v551 = v548 * v1273;
  float v552 = (float)v549[4] + -1.001;
  float v553 = v546 + (float)((float)(v12.__cosval * v548) * -0.5);
  float v554 = v553 + (float)((float)(v548 * v1273) * 0.70711);
  if (v552 >= v554) {
    float v555 = v553 + (float)(v551 * 0.70711);
  }
  else {
    float v555 = (float)v549[4] + -1.001;
  }
  float v556 = v12.__sinval * v548;
  unint64_t v557 = v549[6];
  float v558 = (float)v557 + -1.001;
  if (v554 >= 0.0) {
    float v559 = v555;
  }
  else {
    float v559 = 0.0;
  }
  float v560 = v547 + (float)(v556 * -0.5);
  float v561 = v560 + (float)(v550 * 0.70711);
  if (v558 >= v561) {
    float v562 = v560 + (float)(v550 * 0.70711);
  }
  else {
    float v562 = (float)v557 + -1.001;
  }
  BOOL v563 = v561 < 0.0;
  uint64_t v564 = v559;
  uint64_t v565 = (v564 + 1);
  float v566 = (float)v565 - v559;
  float v567 = v559 - (float)v559;
  unint64_t v568 = v549[5];
  unint64_t v569 = v549[9];
  if (v563) {
    float v562 = 0.0;
  }
  uint64_t v570 = v562;
  unsigned int v571 = v570 + 1;
  unint64_t v572 = v569 + v568 * v570;
  float v573 = (float)v571 - v562;
  LOBYTE(v519) = *(unsigned char *)(v572 + v565);
  *(float *)&unsigned int v574 = v567 * v573;
  LOBYTE(v574) = *(unsigned char *)(v572 + v564);
  float v575 = (float)((float)(v567 * v573) * (float)v519) + (float)((float)(v566 * v573) * (float)v574);
  *(float *)&unsigned int v576 = (float)v562;
  *(float *)&unsigned int v577 = v562 - *(float *)&v576;
  unint64_t v578 = v572 + v568;
  LOBYTE(v576) = *(unsigned char *)(v578 + v564);
  float v579 = v575 + (float)((float)(v566 * *(float *)&v577) * (float)v576);
  float v580 = v567 * *(float *)&v577;
  LOBYTE(v577) = *(unsigned char *)(v578 + v565);
  float v581 = v579 + (float)(v580 * (float)v577);
  float v582 = v546 + (float)(v550 * 0.5);
  float v583 = v582 + (float)(v551 * 0.70711);
  if (v552 >= v583) {
    float v584 = v582 + (float)(v551 * 0.70711);
  }
  else {
    float v584 = v552;
  }
  if (v583 >= 0.0) {
    float v585 = v584;
  }
  else {
    float v585 = 0.0;
  }
  float v586 = v547 + (float)(v556 * 0.5);
  float v587 = v586 + (float)(v550 * 0.70711);
  uint64_t v588 = v585;
  uint64_t v589 = (v588 + 1);
  if (v558 >= v587) {
    float v590 = v586 + (float)(v550 * 0.70711);
  }
  else {
    float v590 = v558;
  }
  BOOL v563 = v587 < 0.0;
  float v591 = (float)v589 - v585;
  float v592 = v585 - (float)v585;
  if (v563) {
    float v590 = 0.0;
  }
  uint64_t v593 = v590;
  unsigned int v594 = v593 + 1;
  unint64_t v595 = v569 + v568 * v593;
  float v596 = (float)v594 - v590;
  LOBYTE(v520) = *(unsigned char *)(v595 + v589);
  *(float *)&unsigned int v597 = v592 * v596;
  LOBYTE(v597) = *(unsigned char *)(v595 + v588);
  float v598 = (float)v597;
  float v599 = (float)((float)(v592 * v596) * (float)v520) + (float)((float)(v591 * v596) * v598);
  *(float *)&unsigned int v600 = (float)v590;
  *(float *)&unsigned int v601 = v590 - *(float *)&v600;
  unint64_t v602 = v595 + v568;
  LOBYTE(v600) = *(unsigned char *)(v602 + v588);
  float v603 = v599 + (float)((float)(v591 * *(float *)&v601) * (float)v600);
  float v604 = v592 * *(float *)&v601;
  LOBYTE(v601) = *(unsigned char *)(v602 + v589);
  float v605 = v603 + (float)(v604 * (float)v601);
  float v606 = (float)(v550 + v546) + (float)(v551 * 0.0);
  if (v552 >= v606) {
    float v607 = (float)(v550 + v546) + (float)(v551 * 0.0);
  }
  else {
    float v607 = v552;
  }
  if (v606 >= 0.0) {
    float v608 = v607;
  }
  else {
    float v608 = 0.0;
  }
  float v609 = (float)(v556 + v547) + (float)(v550 * 0.0);
  if (v558 >= v609) {
    float v610 = (float)(v556 + v547) + (float)(v550 * 0.0);
  }
  else {
    float v610 = v558;
  }
  BOOL v563 = v609 < 0.0;
  uint64_t v611 = v608;
  uint64_t v612 = (v611 + 1);
  float v613 = (float)v612 - v608;
  float v614 = v608 - (float)v608;
  if (v563) {
    float v610 = 0.0;
  }
  uint64_t v615 = v610;
  unsigned int v616 = v615 + 1;
  unint64_t v617 = v569 + v568 * v615;
  LOBYTE(v598) = *(unsigned char *)(v617 + v612);
  float v618 = (float)v616 - v610;
  *(float *)&unsigned int v619 = v614 * v618;
  LOBYTE(v619) = *(unsigned char *)(v617 + v611);
  float v620 = (float)((float)(v614 * v618) * (float)LODWORD(v598)) + (float)((float)(v613 * v618) * (float)v619);
  *(float *)&unsigned int v621 = (float)v610;
  *(float *)&unsigned int v622 = v610 - *(float *)&v621;
  unint64_t v623 = v617 + v568;
  LOBYTE(v621) = *(unsigned char *)(v623 + v611);
  float v624 = (float)v621;
  float v625 = v620 + (float)((float)(v613 * *(float *)&v622) * v624);
  float v626 = v614 * *(float *)&v622;
  LOBYTE(v622) = *(unsigned char *)(v623 + v612);
  float v627 = v625 + (float)(v626 * (float)v622);
  float v628 = v582 + (float)(v551 * -0.70711);
  if (v552 >= v628) {
    float v629 = v628;
  }
  else {
    float v629 = v552;
  }
  if (v628 >= 0.0) {
    float v630 = v629;
  }
  else {
    float v630 = 0.0;
  }
  float v631 = v586 + (float)(v550 * -0.70711);
  if (v558 >= v631) {
    float v632 = v631;
  }
  else {
    float v632 = v558;
  }
  BOOL v563 = v631 < 0.0;
  uint64_t v633 = v630;
  uint64_t v634 = (v633 + 1);
  float v635 = (float)v634 - v630;
  float v636 = v630 - (float)v630;
  if (v563) {
    float v632 = 0.0;
  }
  uint64_t v637 = v632;
  unsigned int v638 = v637 + 1;
  unint64_t v639 = v569 + v568 * v637;
  float v640 = (float)v638 - v632;
  LOBYTE(v624) = *(unsigned char *)(v639 + v634);
  *(float *)&unsigned int v641 = v636 * v640;
  LOBYTE(v641) = *(unsigned char *)(v639 + v633);
  float v646 = (float)((float)(v636 * v640) * (float)LODWORD(v624)) + (float)((float)(v635 * v640) * (float)v641);
  *(float *)&unsigned int v642 = (float)v632;
  float v643 = v632 - *(float *)&v642;
  unint64_t v644 = v639 + v568;
  LOBYTE(v642) = *(unsigned char *)(v644 + v633);
  float v645 = v646 + (float)((float)(v635 * v643) * (float)v642);
  LOBYTE(v646) = *(unsigned char *)(v644 + v634);
  float v647 = v645 + (float)((float)(v636 * v643) * (float)LODWORD(v646));
  float v648 = v553 + (float)(v551 * -0.70711);
  if (v552 >= v648) {
    float v649 = v553 + (float)(v551 * -0.70711);
  }
  else {
    float v649 = v552;
  }
  BOOL v563 = v648 < 0.0;
  float v650 = v560 + (float)(v550 * -0.70711);
  if (v563) {
    float v649 = 0.0;
  }
  if (v558 >= v650) {
    float v651 = v560 + (float)(v550 * -0.70711);
  }
  else {
    float v651 = v558;
  }
  BOOL v563 = v650 < 0.0;
  uint64_t v652 = v649;
  uint64_t v653 = (v652 + 1);
  float v654 = (float)v653 - v649;
  float v655 = v649 - (float)v649;
  if (v563) {
    float v651 = 0.0;
  }
  uint64_t v656 = v651;
  unsigned int v657 = v656 + 1;
  unint64_t v658 = v569 + v568 * v656;
  LOBYTE(v646) = *(unsigned char *)(v658 + v653);
  float v659 = (float)v657 - v651;
  *(float *)&unsigned int v660 = v655 * v659;
  LOBYTE(v660) = *(unsigned char *)(v658 + v652);
  float v661 = (float)((float)(v655 * v659) * (float)LODWORD(v646)) + (float)((float)(v654 * v659) * (float)v660);
  *(float *)&unsigned int v662 = (float)v651;
  *(float *)&unsigned int v663 = v651 - *(float *)&v662;
  unint64_t v664 = v658 + v568;
  LOBYTE(v662) = *(unsigned char *)(v664 + v652);
  float v665 = (float)v662;
  float v666 = v661 + (float)((float)(v654 * *(float *)&v663) * v665);
  float v667 = v655 * *(float *)&v663;
  LOBYTE(v663) = *(unsigned char *)(v664 + v653);
  float v668 = v666 + (float)(v667 * (float)v663);
  float v669 = (float)(v546 - v550) + (float)(v551 * 0.0);
  if (v552 >= v669) {
    float v670 = (float)(v546 - v550) + (float)(v551 * 0.0);
  }
  else {
    float v670 = v552;
  }
  float v671 = (float)(v547 - v556) + (float)(v550 * 0.0);
  if (v669 >= 0.0) {
    float v672 = v670;
  }
  else {
    float v672 = 0.0;
  }
  if (v558 >= v671) {
    float v673 = v671;
  }
  else {
    float v673 = v558;
  }
  uint64_t v674 = v672;
  if (v671 >= 0.0) {
    float v675 = v673;
  }
  else {
    float v675 = 0.0;
  }
  uint64_t v676 = (v674 + 1);
  float v677 = (float)v676 - v672;
  float v678 = v672 - (float)v672;
  uint64_t v679 = v675;
  unint64_t v680 = v569 + v568 * v679;
  float v681 = (float)(v679 + 1) - v675;
  LOBYTE(v665) = *(unsigned char *)(v680 + v676);
  *(float *)&unsigned int v682 = v678 * v681;
  LOBYTE(v682) = *(unsigned char *)(v680 + v674);
  *(float *)&unsigned int v683 = (float)((float)(v678 * v681) * (float)LODWORD(v665)) + (float)((float)(v677 * v681) * (float)v682);
  *(float *)&unsigned int v684 = (float)v675;
  float v685 = v675 - *(float *)&v684;
  unint64_t v686 = v680 + v568;
  LOBYTE(v684) = *(unsigned char *)(v686 + v674);
  float v687 = *(float *)&v683 + (float)((float)(v677 * v685) * (float)v684);
  LOBYTE(v683) = *(unsigned char *)(v686 + v676);
  unsigned int v688 = (int)(float)(v1082 * 255.0);
  unsigned int v689 = (int)(float)(v1097 * 255.0);
  unsigned int v690 = (int)(float)(v1111 * 255.0);
  unsigned int v691 = (int)(float)(v544 * 255.0);
  unsigned int v692 = (int)(float)((float)((float)((float)((float)((float)((float)(v1131 - (float)v1122)
                                                            * (float)((float)(v1271 + 1) - v1129))
                                                    * (float)v1124)
                                            + (float)((float)((float)((float)v1123 - v1131)
                                                            * (float)((float)(v1271 + 1) - v1129))
                                                    * (float)v1125))
                                    + (float)((float)((float)((float)v1123 - v1131)
                                                    * (float)(v1129 - (float)v1271))
                                            * (float)v1126))
                            + (float)((float)((float)(v1131 - (float)v1122) * (float)(v1129 - (float)v1271))
                                    * (float)v1127))
                    * 255.0);
  unsigned int v693 = (int)(float)((float)((float)((float)((float)((float)((float)(v1137 - (float)v1130)
                                                            * (float)((float)(v1136 + 1) - v1139))
                                                    * (float)v1132)
                                            + (float)((float)((float)((float)v1128 - v1137)
                                                            * (float)((float)(v1136 + 1) - v1139))
                                                    * (float)v1133))
                                    + (float)((float)((float)((float)v1128 - v1137)
                                                    * (float)(v1139 - (float)v1136))
                                            * (float)v1134))
                            + (float)((float)((float)(v1137 - (float)v1130) * (float)(v1139 - (float)v1136))
                                    * (float)v1135))
                    * 255.0);
  unsigned int v694 = (int)(float)((float)((float)((float)((float)((float)((float)(v1164 - (float)v1138)
                                                            * (float)((float)(v1145 + 1) - v1166))
                                                    * (float)v1141)
                                            + (float)((float)((float)((float)v1140 - v1164)
                                                            * (float)((float)(v1145 + 1) - v1166))
                                                    * (float)v1143))
                                    + (float)((float)((float)((float)v1140 - v1164)
                                                    * (float)(v1166 - (float)v1145))
                                            * (float)v1144))
                            + (float)((float)((float)(v1164 - (float)v1138) * (float)(v1166 - (float)v1145))
                                    * (float)v1142))
                    * 255.0);
  LODWORD(v676) = (int)(float)((float)((float)((float)((float)((float)((float)(v1167 - (float)v1147)
                                                                     * (float)((float)(v1152 + 1) - v1168))
                                                             * (float)v1148)
                                                     + (float)((float)((float)((float)v1146 - v1167)
                                                                     * (float)((float)(v1152 + 1) - v1168))
                                                             * (float)v1149))
                                             + (float)((float)((float)((float)v1146 - v1167)
                                                             * (float)(v1168 - (float)v1152))
                                                     * (float)v1150))
                                     + (float)((float)((float)(v1167 - (float)v1147)
                                                     * (float)(v1168 - (float)v1152))
                                             * (float)v1151))
                             * 255.0);
  unsigned int v695 = (int)(float)((float)((float)((float)((float)((float)((float)(v1169 - (float)v1154)
                                                            * (float)((float)(v1163 + 1) - v1171))
                                                    * (float)v1158)
                                            + (float)((float)((float)((float)v1156 - v1169)
                                                            * (float)((float)(v1163 + 1) - v1171))
                                                    * (float)v1160))
                                    + (float)((float)((float)((float)v1156 - v1169)
                                                    * (float)(v1171 - (float)v1163))
                                            * (float)v1161))
                            + (float)((float)((float)(v1169 - (float)v1154) * (float)(v1171 - (float)v1163))
                                    * (float)v1162))
                    * 255.0);
  unsigned int v696 = (int)(float)((float)((float)((float)((float)((float)((float)(v1180 - (float)v1172)
                                                            * (float)((float)(v1179 + 1) - v1181))
                                                    * (float)v1174)
                                            + (float)((float)((float)((float)v1173 - v1180)
                                                            * (float)((float)(v1179 + 1) - v1181))
                                                    * (float)v1175))
                                    + (float)((float)((float)((float)v1173 - v1180)
                                                    * (float)(v1181 - (float)v1179))
                                            * (float)v1176))
                            + (float)((float)((float)(v1180 - (float)v1172) * (float)(v1181 - (float)v1179))
                                    * (float)v1178))
                    * 255.0);
  unsigned int v697 = (int)(float)((float)((float)((float)((float)((float)((float)(v1211 - (float)v1182)
                                                            * (float)((float)(v1193 + 1) - v1203))
                                                    * (float)v1184)
                                            + (float)((float)((float)((float)v1183 - v1211)
                                                            * (float)((float)(v1193 + 1) - v1203))
                                                    * (float)v1186))
                                    + (float)((float)((float)((float)v1183 - v1211)
                                                    * (float)(v1203 - (float)v1193))
                                            * (float)v1188))
                            + (float)((float)((float)(v1211 - (float)v1182) * (float)(v1203 - (float)v1193))
                                    * (float)v1190))
                    * 255.0);
  unsigned int v698 = (int)(float)((float)((float)((float)((float)((float)((float)(v1231 - (float)v1195)
                                                            * (float)((float)(v1209 + 1) - v1233))
                                                    * (float)v1205)
                                            + (float)((float)((float)((float)v1197 - v1231)
                                                            * (float)((float)(v1209 + 1) - v1233))
                                                    * (float)v1207))
                                    + (float)((float)((float)((float)v1197 - v1231)
                                                    * (float)(v1233 - (float)v1209))
                                            * (float)v1199))
                            + (float)((float)((float)(v1231 - (float)v1195) * (float)(v1233 - (float)v1209))
                                    * (float)v1201))
                    * 255.0);
  unsigned int v699 = (int)(float)((float)((float)((float)((float)((float)((float)(v1253 - (float)v1213)
                                                            * (float)((float)(v1225 + 1) - v1260))
                                                    * (float)v1217)
                                            + (float)((float)((float)((float)v1215 - v1253)
                                                            * (float)((float)(v1225 + 1) - v1260))
                                                    * (float)v1219))
                                    + (float)((float)((float)((float)v1215 - v1253)
                                                    * (float)(v1260 - (float)v1225))
                                            * (float)v1221))
                            + (float)((float)((float)(v1253 - (float)v1213) * (float)(v1260 - (float)v1225))
                                    * (float)v1223))
                    * 255.0);
  unsigned int v700 = (int)(float)((float)((float)((float)((float)((float)((float)(v1262 - (float)v1227)
                                                            * (float)((float)(v1244 + 1) - v1264))
                                                    * (float)v1236)
                                            + (float)((float)((float)((float)v1229 - v1262)
                                                            * (float)((float)(v1244 + 1) - v1264))
                                                    * (float)v1238))
                                    + (float)((float)((float)((float)v1229 - v1262)
                                                    * (float)(v1264 - (float)v1244))
                                            * (float)v1240))
                            + (float)((float)((float)(v1262 - (float)v1227) * (float)(v1264 - (float)v1244))
                                    * (float)v1242))
                    * 255.0);
  unsigned int v701 = (int)(float)((float)((float)((float)((float)((float)((float)(v1266 - (float)v1246)
                                                            * (float)((float)(v1258 + 1) - v1268))
                                                    * (float)v1252)
                                            + (float)((float)((float)((float)v1248 - v1266)
                                                            * (float)((float)(v1258 + 1) - v1268))
                                                    * (float)v1255))
                                    + (float)((float)((float)((float)v1248 - v1266)
                                                    * (float)(v1268 - (float)v1258))
                                            * (float)v1256))
                            + (float)((float)((float)(v1266 - (float)v1246) * (float)(v1268 - (float)v1258))
                                    * (float)v1250))
                    * 255.0);
  float v702 = v1005 * 255.0;
  float v703 = v1026 * 255.0;
  float v704 = v581 * 255.0;
  float v705 = v605 * 255.0;
  float v706 = v627 * 255.0;
  BOOL v1234 = v700 > v516;
  unsigned int v707 = (int)(float)(v1066 * 255.0);
  unsigned int v708 = (int)(float)(v1049 * 255.0);
  unsigned int v709 = (int)(float)(v1036 * 255.0);
  LODWORD(v680) = (int)(float)(v1026 * 255.0);
  LODWORD(v686) = (int)(float)(v995 * 255.0);
  unsigned int v1280 = (int)(float)(v981 * 255.0);
  unsigned int v1267 = (int)(float)(v967 * 255.0);
  unsigned int v1277 = (int)(float)(v953 * 255.0);
  unsigned int v1279 = (int)(float)(v949 * 255.0);
  unsigned int v1243 = (int)(float)(v955 * 255.0);
  unsigned int v1239 = (int)(float)(v963 * 255.0);
  unsigned int v1251 = (int)(float)(v969 * 255.0);
  unsigned int v1241 = (int)(float)(v977 * 255.0);
  unsigned int v1276 = (int)(float)(v997 * 255.0);
  unsigned int v1274 = (int)(float)(v1005 * 255.0);
  unsigned int v1245 = (int)(float)(v1016 * 255.0);
  unsigned int v710 = (int)(float)(v1018 * 255.0);
  unsigned int v1272 = (int)(float)(v1021 * 255.0);
  unsigned int v1269 = (int)(float)(v1024 * 255.0);
  BOOL v1165 = v701 < v700;
  char v1159 = v700 < v699;
  BOOL v1157 = v700 < v698;
  BOOL v1155 = v700 < v697;
  BOOL v1153 = v700 < v696;
  BOOL v1112 = v680 < v1267;
  BOOL v1106 = v686 < v1267;
  BOOL v1102 = v1280 < v1267;
  BOOL v1098 = v1267 < v1277;
  BOOL v1095 = v1267 < v1279;
  char v1091 = v1243 < v1251;
  BOOL v1089 = v1243 < v1241;
  BOOL v1085 = v1239 < v1251;
  BOOL v1083 = v1239 < v1241;
  char v1078 = v1251 < v1241;
  BOOL v1076 = v1251 < (int)(float)(v983 * 255.0);
  BOOL v1074 = v1251 < (int)(float)(v990 * 255.0);
  BOOL v1072 = v1241 < (int)(float)(v983 * 255.0);
  BOOL v1070 = v1241 < (int)(float)(v990 * 255.0);
  BOOL v1067 = v1276 < v1274;
  char v1064 = v1276 < v1245;
  char v1061 = v1276 < v710;
  BOOL v1059 = v1276 < v1272;
  BOOL v1057 = v1276 < v1269;
  BOOL v1052 = v1274 < v1272;
  char v1047 = v1245 < v1272;
  BOOL v1044 = v710 < v1272;
  BOOL v1041 = v1272 < v1269;
  unsigned int v809 = v700;
  BOOL v1010 = v695 > v700;
  BOOL v1008 = v676 > v700;
  BOOL v1006 = v694 > v700;
  BOOL v1003 = v693 > v700;
  BOOL v1001 = v692 > v700;
  char v999 = v691 > v700;
  unsigned int v795 = v691;
  char v926 = v1267 > v690;
  BOOL v919 = v1267 > v689;
  BOOL v912 = v1267 > v688;
  BOOL v905 = v1267 > v707;
  char v898 = v1267 > v708;
  BOOL v891 = v1267 > v709;
  BOOL v885 = v1251 > v680;
  BOOL v883 = v1241 > v680;
  char v877 = v1251 > v686;
  BOOL v875 = v1241 > v686;
  BOOL v869 = v1251 > v1280;
  char v867 = v1241 > v1280;
  BOOL v863 = v1243 > v1267;
  BOOL v861 = v1239 > v1267;
  BOOL v859 = v1251 > v1267;
  BOOL v856 = v1241 > v1267;
  BOOL v854 = (int)(float)(v983 * 255.0) > v1267;
  char v852 = (int)(float)(v990 * 255.0) > v1267;
  BOOL v848 = v1251 > v1277;
  BOOL v846 = v1241 > v1277;
  char v840 = v1251 > v1279;
  BOOL v838 = v1241 > v1279;
  BOOL v834 = v1276 > v1243;
  char v829 = v1272 > v1243;
  BOOL v826 = v1276 > v1239;
  BOOL v825 = v1272 > v1239;
  char v824 = v1276 > v1251;
  BOOL v823 = v1274 > v1251;
  BOOL v822 = v1245 > v1251;
  BOOL v821 = v710 > v1251;
  BOOL v820 = v1272 > v1251;
  BOOL v819 = v1269 > v1251;
  BOOL v818 = v1276 > v1241;
  char v817 = v1274 > v1241;
  char v816 = v1245 > v1241;
  BOOL v815 = v710 > v1241;
  BOOL v814 = v1272 > v1241;
  BOOL v812 = v1269 > v1241;
  BOOL v811 = v1276 > (int)(float)(v983 * 255.0);
  char v810 = v1272 > (int)(float)(v983 * 255.0);
  BOOL v807 = v1276 > (int)(float)(v990 * 255.0);
  BOOL v805 = v1272 > (int)(float)(v990 * 255.0);
  char v804 = (int)v704 > v1276;
  BOOL v803 = (int)v705 > v1276;
  BOOL v802 = (int)v706 > v1276;
  BOOL v801 = (int)(float)(v647 * 255.0) > v1276;
  BOOL v799 = (int)(float)(v668 * 255.0) > v1276;
  unsigned int v711 = (int)(float)((float)(v687 + (float)((float)(v678 * v685) * (float)v683)) * 255.0);
  BOOL v798 = v711 > v1276;
  BOOL v796 = v711 > v1274;
  BOOL v794 = v711 > v1245;
  char v793 = v711 > v710;
  char v792 = (int)v704 > v1272;
  BOOL v791 = (int)v705 > v1272;
  BOOL v790 = (int)v706 > v1272;
  BOOL v789 = (int)(float)(v647 * 255.0) > v1272;
  BOOL v788 = (int)(float)(v668 * 255.0) > v1272;
  BOOL v787 = v711 > v1272;
  BOOL v786 = v711 > v1269;
  BOOL v785 = v701 < v690;
  BOOL v784 = v809 < v689;
  BOOL v783 = v699 < v688;
  char v782 = v698 < v707;
  char v781 = v697 < v708;
  BOOL v780 = v701 < v707;
  BOOL v779 = v699 < v709;
  BOOL v778 = v698 < v690;
  BOOL v777 = v697 < v689;
  char v776 = v696 < v688;
  char v775 = v701 < v1243;
  BOOL v774 = v699 < v1251;
  BOOL v773 = v698 < v1241;
  unsigned int v720 = (int)(float)(v990 * 255.0);
  unsigned int v721 = (int)(float)(v983 * 255.0);
  BOOL v772 = v697 < v721;
  BOOL v771 = v701 < v1241;
  BOOL v769 = v698 < v1243;
  char v770 = v699 < v720;
  BOOL v767 = v696 < v1251;
  BOOL v768 = v697 < v1239;
  BOOL v766 = v701 < (int)v704;
  char v764 = v698 < (int)(float)(v647 * 255.0);
  BOOL v765 = v699 < (int)v706;
  BOOL v762 = v696 < v711;
  char v763 = v697 < (int)(float)(v668 * 255.0);
  BOOL v1265 = v701 < (int)(float)(v647 * 255.0);
  BOOL v1261 = v698 < (int)v704;
  BOOL v1263 = v699 < v711;
  BOOL v1257 = v697 < (int)v705;
  char v761 = v695 < v680;
  BOOL v760 = v676 < v686;
  BOOL v759 = v694 < v1280;
  BOOL v758 = v693 < v1267;
  BOOL v757 = v692 < v1277;
  BOOL v756 = v695 < v1267;
  char v754 = v694 < v1279;
  char v755 = v676 < v1277;
  BOOL v752 = v692 < v686;
  BOOL v753 = v693 < v680;
  BOOL v751 = v695 < v1276;
  BOOL v750 = v676 < v1274;
  BOOL v749 = v694 < v1245;
  char v748 = v693 < v710;
  char v747 = v692 < v1272;
  BOOL v813 = v695 < v710;
  BOOL v808 = v676 < v1272;
  BOOL v806 = v694 < v1269;
  BOOL v800 = v693 < v1276;
  BOOL v797 = v692 < v1274;
  BOOL v745 = v689 < v1239;
  char v746 = v690 < v1243;
  BOOL v743 = v707 < v1241;
  BOOL v744 = v688 < v1251;
  char v741 = v689 < v721;
  BOOL v742 = v690 < v1241;
  char v740 = v688 < v720;
  BOOL v739 = v709 < v1251;
  BOOL v737 = v689 < (int)v705;
  BOOL v738 = v690 < (int)v704;
  char v735 = v707 < (int)(float)(v647 * 255.0);
  BOOL v736 = v688 < (int)v706;
  char v734 = v708 < (int)(float)(v668 * 255.0);
  BOOL v732 = v709 < v711;
  BOOL v731 = v690 < (int)(float)(v647 * 255.0);
  BOOL v728 = v688 < v711;
  BOOL v729 = v689 < (int)(float)(v668 * 255.0);
  BOOL v726 = v707 < (int)v704;
  char v724 = v709 < (int)v706;
  BOOL v725 = v708 < (int)v705;
  char v723 = v680 < v1276;
  BOOL v733 = v686 < v1274;
  BOOL v730 = v1267 < v710;
  BOOL v727 = v1277 < v1272;
  BOOL v1249 = v680 < v710;
  LOBYTE(v1276) = v1267 < v1276;
  LOBYTE(v1272) = v686 < v1272;
  LOBYTE(v1267) = v1251 < (int)v706;
  char v1247 = v1241 < (int)(float)(v647 * 255.0);
  BOOL v722 = v720 < v711;
  LOBYTE(v1251) = v1251 < v711;
  BOOL v1259 = v1241 < (int)v704;
  char v712 = (v701 > v516) | (2 * v1234) | (4 * (v699 > v516)) | (8 * (v698 > v516)) | (16 * (v697 > v516)) | (32 * (v696 > v516)) | ((v695 > v516) << 6) | ((v676 > v516) << 7);
  char v1254 = (v694 > v516) | (2 * (v693 > v516)) | (4 * (v692 > v516)) | (8 * (v691 > v516)) | (16 * (v690 > v516)) | (32 * (v689 > v516)) | ((v688 > v516) << 6) | ((v707 > v516) << 7);
  LOBYTE(v1241) = (v708 > v516) | (2 * (v709 > v516)) | (4 * (v680 > v516)) | (8
                                                                                           * (v686 > v516)) | (16 * (v1280 > v516)) | (32 * ((int)(float)(v967 * 255.0) > v516)) | ((v1277 > v516) << 6) | ((v1279 > v516) << 7);
  *(_OWORD *)(a1 + 3) = 0u;
  char v1237 = *(unsigned char *)(a1 + 3) | (v1243 > v516) | (2 * (v1239 > v516)) | (4 * ((int)(float)(v969 * 255.0) > v516)) | (8 * ((int)(float)(v977 * 255.0) > v516)) | (16 * (v721 > v516)) | (32 * (v720 > v516)) | (((int)(float)(v997 * 255.0) > v516) << 6) | (((int)v702 > v516) << 7);
  char v1235 = *(unsigned char *)(a1 + 4) | (v1245 > v516) | (2 * (v710 > v516)) | (4 * ((int)(float)(v1021 * 255.0) > v516)) | (8 * (v1269 > v516)) | (16 * ((int)v704 > v516)) | (32 * ((int)v705 > v516)) | (((int)v706 > v516) << 6) | (((int)(float)(v647 * 255.0) > v516) << 7);
  char v1232 = *(unsigned char *)(a1 + 5) | ((int)(float)(v668 * 255.0) > v516) | (2 * (v711 > v516)) | (4 * v1165) | (8 * (v701 < v699)) | (16 * (v701 < v698)) | (32 * (v701 < v697)) | ((v701 < v696) << 6) | (v1159 << 7);
  char v1230 = *(unsigned char *)(a1 + 6) | v1157 | (2 * v1155) | (4 * v1153) | (8 * (v699 < v698)) | (16 * (v699 < v697)) | (32 * (v699 < v696)) | ((v698 < v697) << 6) | ((v698 < v696) << 7);
  char v1228 = *(unsigned char *)(a1 + 7) | (v697 < v696) | (2 * (v695 < v676)) | (4 * (v695 < v694)) | (8 * (v695 < v693)) | (16 * (v695 < v692)) | (32 * (v695 < v691)) | ((v676 < v694) << 6) | ((v676 < v693) << 7);
  char v1226 = *(unsigned char *)(a1 + 8) | (v676 < v692) | (2 * (v676 < v691)) | (4 * (v694 < v693)) | (8 * (v694 < v692)) | (16 * (v694 < v691)) | (32 * (v693 < v692)) | ((v693 < v691) << 6) | ((v692 < v691) << 7);
  char v1224 = *(unsigned char *)(a1 + 9) | (v690 < v689) | (2 * (v690 < v688)) | (4 * (v690 < v707)) | (8 * (v690 < v708)) | (16 * (v690 < v709)) | (32 * (v689 < v688)) | ((v689 < v707) << 6) | ((v689 < v708) << 7);
  char v1222 = *(unsigned char *)(a1 + 10) | (v689 < v709) | (2 * (v688 < v707)) | (4 * (v688 < v708)) | (8 * (v688 < v709)) | (16 * (v707 < v708)) | (32 * (v707 < v709)) | ((v708 < v709) << 6) | ((v680 < v686) << 7);
  char v1220 = *(unsigned char *)(a1 + 11) | (v680 < v1280) | (2 * v1112) | (4 * (v680 < v1277)) | (8 * (v680 < v1279)) | (16 * (v686 < v1280)) | (32 * v1106) | ((v686 < v1277) << 6) | ((v686 < v1279) << 7);
  char v1218 = *(unsigned char *)(a1 + 12) | v1102 | (2 * (v1280 < v1277)) | (4 * (v1280 < v1279)) | (8 * v1098) | (16 * v1095) | (32 * (v1277 < v1279)) | ((v1243 < v1239) << 6) | (v1091 << 7);
  char v1216 = *(unsigned char *)(a1 + 13) | v1089 | (2 * (v1243 < v721)) | (4 * (v1243 < v720)) | (8 * v1085) | (16 * v1083) | (32 * (v1239 < v721)) | ((v1239 < v720) << 6) | (v1078 << 7);
  char v1214 = *(unsigned char *)(a1 + 14) | v1076 | (2 * v1074) | (4 * v1072) | (8 * v1070) | (16 * (v721 < v720)) | (32 * v1067) | (v1064 << 6) | (v1061 << 7);
  char v1212 = *(unsigned char *)(a1 + 15) | v1059 | (2 * v1057) | (4 * (v1274 < v1245)) | (8 * (v1274 < v710)) | (16 * v1052) | (32 * (v1274 < v1269)) | ((v1245 < v710) << 6) | (v1047 << 7);
  char v1210 = *(unsigned char *)(a1 + 16) | (v1245 < v1269) | (2 * v1044) | (4 * (v710 < v1269)) | (8 * v1041) | (16 * ((int)v704 < (int)v705)) | (32 * ((int)v704 < (int)v706)) | (((int)v704 < (int)(float)(v647 * 255.0)) << 6) | (((int)v704 < (int)(float)(v668 * 255.0)) << 7);
  char v1208 = *(unsigned char *)(a1 + 17) | ((int)v704 < v711) | (2 * ((int)v705 < (int)v706)) | (4
                                                                                                  * ((int)v705 < (int)(float)(v647 * 255.0))) | (8 * ((int)v705 < (int)(float)(v668 * 255.0))) | (16 * ((int)v705 < v711)) | (32 * ((int)v706 < (int)(float)(v647 * 255.0))) | (((int)v706 < (int)(float)(v668 * 255.0)) << 6) | (((int)v706 < v711) << 7);
  char v1206 = *(unsigned char *)(a1 + 18) | ((int)(float)(v647 * 255.0) < (int)(float)(v668 * 255.0)) | (2 * ((int)(float)(v647 * 255.0) < v711)) | (4 * ((int)(float)(v668 * 255.0) < v711)) | (8 * (v695 > v701)) | (16 * (v676 > v701)) | (32 * (v694 > v701)) | ((v693 > v701) << 6) | ((v692 > v701) << 7);
  *(_OWORD *)(a1 + 19) = 0u;
  char v1204 = *(unsigned char *)(a1 + 19) | (v691 > v701) | (2 * v1010) | (4 * v1008) | (8 * v1006) | (16 * v1003) | (32 * v1001) | (v999 << 6) | ((v695 > v699) << 7);
  char v1202 = *(unsigned char *)(a1 + 20) | (v676 > v699) | (2 * (v694 > v699)) | (4 * (v693 > v699)) | (8 * (v692 > v699)) | (16 * (v691 > v699)) | (32 * (v695 > v698)) | ((v676 > v698) << 6) | ((v694 > v698) << 7);
  char v1200 = *(unsigned char *)(a1 + 21) | (v693 > v698) | (2 * (v692 > v698)) | (4 * (v691 > v698)) | (8 * (v695 > v697)) | (16 * (v676 > v697)) | (32 * (v694 > v697)) | ((v693 > v697) << 6) | ((v692 > v697) << 7);
  char v1198 = *(unsigned char *)(a1 + 22) | (v691 > v697) | (2 * (v695 > v696)) | (4 * (v676 > v696)) | (8 * (v694 > v696)) | (16 * (v693 > v696)) | (32 * (v692 > v696)) | ((v691 > v696) << 6) | ((v690 > v695) << 7);
  char v1196 = *(unsigned char *)(a1 + 23) | (v689 > v695) | (2 * (v688 > v695)) | (4 * (v707 > v695)) | (8 * (v708 > v695)) | (16 * (v709 > v695)) | (32 * (v690 > v676)) | ((v689 > v676) << 6) | ((v688 > v676) << 7);
  char v1194 = *(unsigned char *)(a1 + 24) | (v707 > v676) | (2 * (v708 > v676)) | (4
                                                                                                 * (v709 > v676)) | (8 * (v690 > v694)) | (16 * (v689 > v694)) | (32 * (v688 > v694)) | ((v707 > v694) << 6) | ((v708 > v694) << 7);
  char v1191 = *(unsigned char *)(a1 + 25) | (v709 > v694) | (2 * (v690 > v693)) | (4 * (v689 > v693)) | (8 * (v688 > v693)) | (16 * (v707 > v693)) | (32 * (v708 > v693)) | ((v709 > v693) << 6) | ((v690 > v692) << 7);
  char v1189 = *(unsigned char *)(a1 + 26) | (v689 > v692) | (2 * (v688 > v692)) | (4 * (v707 > v692)) | (8 * (v708 > v692)) | (16 * (v709 > v692)) | (32 * (v690 > v691)) | ((v689 > v691) << 6) | ((v688 > v691) << 7);
  char v1187 = *(unsigned char *)(a1 + 27) | (v707 > v691) | (2 * (v708 > v691)) | (4 * (v709 > v691)) | (8
                                                                                           * (v680 > v690)) | (16 * (v686 > v690)) | (32 * (v1280 > v690)) | (v926 << 6) | ((v1277 > v690) << 7);
  char v1185 = *(unsigned char *)(a1 + 28) | (v1279 > v690) | (2 * ((int)v703 > v689)) | (4 * (v686 > v689)) | (8 * (v1280 > v689)) | (16 * v919) | (32 * (v1277 > v689)) | ((v1279 > v689) << 6) | (((int)v703 > v688) << 7);
  char v713 = *(unsigned char *)(a1 + 29) | (v686 > v688) | (2 * (v1280 > v688)) | (4 * v912) | (8 * (v1277 > v688)) | (16 * (v1279 > v688)) | (32 * (v680 > v707)) | ((v686 > v707) << 6) | ((v1280 > v707) << 7);
  char v714 = *(unsigned char *)(a1 + 30) | v905 | (2 * (v1277 > v707)) | (4 * (v1279 > v707)) | (8 * (v680 > v708)) | (16 * (v686 > v708)) | (32 * (v1280 > v708)) | (v898 << 6) | ((v1277 > v708) << 7);
  LOBYTE(v688) = *(unsigned char *)(a1 + 31) | (v1279 > v708) | (2 * (v680 > v709)) | (4
                                                                                           * (v686 > v709)) | (8 * (v1280 > v709)) | (16 * v891) | (32 * (v1277 > v709)) | ((v1279 > v709) << 6) | ((v1243 > v680) << 7);
  LOBYTE(v689) = *(unsigned char *)(a1 + 32) | (v1239 > v680) | (2 * v885) | (4 * v883) | (8 * (v721 > (int)v703)) | (16 * (v720 > (int)v703)) | (32 * (v1243 > v686)) | ((v1239 > v686) << 6) | (v877 << 7);
  LOBYTE(v691) = *(unsigned char *)(a1 + 33) | v875 | (2 * (v721 > v686)) | (4 * (v720 > v686)) | (8 * (v1243 > v1280)) | (16 * (v1239 > v1280)) | (32 * v869) | (v867 << 6) | ((v721 > v1280) << 7);
  LOBYTE(v697) = *(unsigned char *)(a1 + 34) | (v720 > v1280) | (2 * v863) | (4 * v861) | (8 * v859) | (16 * v856) | (32 * v854) | (v852 << 6) | ((v1243 > v1277) << 7);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 35) = 0u;
  LOBYTE(v692) = *(unsigned char *)(a1 + 35) | (v1239 > v1277) | (2 * v848) | (4 * v846) | (8 * (v721 > v1277)) | (16 * (v720 > v1277)) | (32 * (v1243 > v1279)) | ((v1239 > v1279) << 6) | (v840 << 7);
  LOBYTE(v698) = *(unsigned char *)(a1 + 36) | v838 | (2 * (v721 > v1279)) | (4 * (v720 > v1279)) | (8 * v834) | (16 * (v1274 > v1243)) | (32 * (v1245 > v1243)) | ((v710 > v1243) << 6) | (v829 << 7);
  LOBYTE(v699) = *(unsigned char *)(a1 + 37) | (v1269 > v1243) | (2 * v826) | (4 * (v1274 > v1239)) | (8 * (v1245 > v1239)) | (16 * (v710 > v1239)) | (32 * v825) | ((v1269 > v1239) << 6) | (v824 << 7);
  LOBYTE(v711) = *(unsigned char *)(a1 + 38) | v823 | (2 * v822) | (4 * v821) | (8 * v820) | (16 * v819) | (32 * v818) | (v817 << 6) | (v816 << 7);
  LOBYTE(v701) = *(unsigned char *)(a1 + 39) | v815 | (2 * v814) | (4 * v812) | (8 * v811) | (16 * (v1274 > v721)) | (32 * (v1245 > v721)) | ((v710 > v721) << 6) | (v810 << 7);
  LOBYTE(v693) = *(unsigned char *)(a1 + 40) | (v1269 > v721) | (2 * v807) | (4 * (v1274 > v720)) | (8 * (v1245 > v720)) | (16 * (v710 > v720)) | (32 * v805) | ((v1269 > v720) << 6) | (v804 << 7);
  LOBYTE(v694) = *(unsigned char *)(a1 + 41) | v803 | (2 * v802) | (4 * v801) | (8 * v799) | (16 * v798) | (32
                                                                                                  * ((int)v704 > v1274)) | (((int)v705 > v1274) << 6) | (((int)v706 > v1274) << 7);
  char v715 = *(unsigned char *)(a1 + 42) | ((int)(float)(v647 * 255.0) > v1274) | (2 * ((int)(float)(v668 * 255.0) > v1274)) | (4 * v796) | (8 * ((int)v704 > v1245)) | (16 * ((int)v705 > v1245)) | (32 * ((int)v706 > v1245)) | (((int)(float)(v647 * 255.0) > v1245) << 6) | (((int)(float)(v668 * 255.0) > v1245) << 7);
  LOBYTE(v679) = *(unsigned char *)(a1 + 43) | v794 | (2 * ((int)v704 > v710)) | (4 * ((int)v705 > v710)) | (8 * ((int)v706 > v710)) | (16 * ((int)(float)(v647 * 255.0) > v710)) | (32 * ((int)(float)(v668 * 255.0) > v710)) | (v793 << 6) | (v792 << 7);
  LOBYTE(v676) = *(unsigned char *)(a1 + 44) | v791 | (2 * v790) | (4 * v789) | (8 * v788) | (16 * v787) | (32
                                                                                                  * ((int)v704 > v1269)) | (((int)v705 > v1269) << 6) | (((int)v706 > v1269) << 7);
  LOBYTE(v710) = *(unsigned char *)(a1 + 45) | ((int)(float)(v647 * 255.0) > v1269) | (2 * ((int)(float)(v668 * 255.0) > v1269)) | (4 * v786) | (8 * v785) | (16 * v784) | (32 * v783) | (v782 << 6) | (v781 << 7);
  LOBYTE(v680) = *(unsigned char *)(a1 + 46) | (v696 < v709) | (2 * v780) | (4 * (v809 < v708)) | (8 * v779) | (16 * v778) | (32 * v777) | (v776 << 6) | (v775 << 7);
  LOBYTE(v686) = *(unsigned char *)(a1 + 47) | (v809 < v1239) | (2 * v774) | (4 * v773) | (8 * v772) | (16 * (v696 < v720)) | (32 * v771) | ((v809 < v721) << 6) | (v770 << 7);
  LOBYTE(v695) = *(unsigned char *)(a1 + 48) | v769 | (2 * v768) | (4 * v767) | (8 * v766) | (16 * (v809 < (int)v705)) | (32 * v765) | (v764 << 6) | (v763 << 7);
  char v716 = *(unsigned char *)(a1 + 49) | v762 | (2 * v1265) | (4 * (v809 < (int)(float)(v668 * 255.0))) | (8 * v1263) | (16 * v1261) | (32 * v1257) | ((v696 < (int)v706) << 6) | (v761 << 7);
  LOBYTE(v690) = *(unsigned char *)(a1 + 50) | v760 | (2 * v759) | (4 * v758) | (8 * v757) | (16 * (v795 < v1279)) | (32 * v756) | (v755 << 6) | (v754 << 7);
  char v717 = *(unsigned char *)(a1 + 51) | v753 | (2 * v752) | (4 * (v795 < v1280)) | (8 * v751) | (16 * v750) | (32 * v749) | (v748 << 6) | (v747 << 7);
  char v718 = *(unsigned char *)(a1 + 52) | (v795 < v1269) | (2 * v813) | (4 * v808) | (8 * v806) | (16 * v800) | (32 * v797) | ((v795 < v1245) << 6) | (v746 << 7);
  LOBYTE(v709) = *(unsigned char *)(a1 + 53) | v745 | (2 * v744) | (4 * v743) | (8 * (v708 < v721)) | (16 * (v709 < v720)) | (32 * v742) | (v741 << 6) | (v740 << 7);
  LOBYTE(v708) = *(unsigned char *)(a1 + 54) | (v707 < v1243) | (2 * (v708 < v1239)) | (4 * v739) | (8 * v738);
  *(unsigned char *)a1 = v712;
  *(unsigned char *)(a1 + 1) = v1254;
  *(unsigned char *)(a1 + 2) = v1241;
  *(unsigned char *)(a1 + 3) = v1237;
  *(unsigned char *)(a1 + 4) = v1235;
  *(unsigned char *)(a1 + 5) = v1232;
  *(unsigned char *)(a1 + 6) = v1230;
  *(unsigned char *)(a1 + 7) = v1228;
  *(unsigned char *)(a1 + 8) = v1226;
  LOBYTE(v707) = *(unsigned char *)(a1 + 55) | v732 | (2 * v731);
  *(unsigned char *)(a1 + 9) = v1224;
  *(unsigned char *)(a1 + 10) = v1222;
  *(unsigned char *)(a1 + 11) = v1220;
  *(unsigned char *)(a1 + 12) = v1218;
  *(unsigned char *)(a1 + 13) = v1216;
  *(unsigned char *)(a1 + 14) = v1214;
  *(unsigned char *)(a1 + 15) = v1212;
  *(unsigned char *)(a1 + 16) = v1210;
  *(unsigned char *)(a1 + 17) = v1208;
  *(unsigned char *)(a1 + 18) = v1206;
  *(unsigned char *)(a1 + 19) = v1204;
  *(unsigned char *)(a1 + 20) = v1202;
  *(unsigned char *)(a1 + 21) = v1200;
  *(unsigned char *)(a1 + 22) = v1198;
  *(unsigned char *)(a1 + 23) = v1196;
  *(unsigned char *)(a1 + 24) = v1194;
  *(unsigned char *)(a1 + 25) = v1191;
  *(unsigned char *)(a1 + 26) = v1189;
  *(unsigned char *)(a1 + 27) = v1187;
  *(unsigned char *)(a1 + 28) = v1185;
  *(unsigned char *)(a1 + 29) = v713;
  *(unsigned char *)(a1 + 30) = v714;
  *(unsigned char *)(a1 + 31) = v688;
  *(unsigned char *)(a1 + 32) = v689;
  *(unsigned char *)(a1 + 33) = v691;
  *(unsigned char *)(a1 + 34) = v697;
  *(unsigned char *)(a1 + 35) = v692;
  *(unsigned char *)(a1 + 36) = v698;
  *(unsigned char *)(a1 + 37) = v699;
  *(unsigned char *)(a1 + 38) = v711;
  *(unsigned char *)(a1 + 39) = v701;
  *(unsigned char *)(a1 + 40) = v693;
  *(unsigned char *)(a1 + 41) = v694;
  *(unsigned char *)(a1 + 42) = v715;
  *(unsigned char *)(a1 + 43) = v679;
  *(unsigned char *)(a1 + 44) = v676;
  *(unsigned char *)(a1 + 45) = v710;
  *(unsigned char *)(a1 + 46) = v680;
  *(unsigned char *)(a1 + 47) = v686;
  *(unsigned char *)(a1 + 48) = v695;
  *(unsigned char *)(a1 + 49) = v716;
  *(unsigned char *)(a1 + 50) = v690;
  *(unsigned char *)(a1 + 51) = v717;
  *(unsigned char *)(a1 + 52) = v718;
  *(unsigned char *)(a1 + 53) = v709;
  *(unsigned char *)(a1 + 54) = v708 | (16 * v737) | (32 * v736) | (v735 << 6) | (v734 << 7);
  *(unsigned char *)(a1 + 55) = v707 | (4 * v729) | (8 * v728) | (16 * v726) | (32 * v725) | (v724 << 6) | (v723 << 7);
  *(unsigned char *)(a1 + 56) |= v733 | (2 * (v1280 < v1245)) | (4 * v730) | (8 * v727) | (16 * (v1279 < v1269)) | (32 * v1249) | ((_BYTE)v1272 << 6) | ((v1280 < v1269) << 7);
  *(unsigned char *)(a1 + 57) |= v1276 | (2 * (v1277 < v1274)) | (4 * (v1279 < v1245)) | (8 * (v1243 < (int)v704)) | (16 * (v1239 < (int)v705)) | (32 * v1267) | (v1247 << 6) | ((v721 < (int)(float)(v668 * 255.0)) << 7);
  *(unsigned char *)(a1 + 58) |= v722 | (2 * (v1243 < (int)(float)(v647 * 255.0))) | (4 * (v1239 < (int)(float)(v668 * 255.0))) | (8 * v1251) | (16 * v1259) | (32 * (v721 < (int)v705)) | ((v720 < (int)v706) << 6);
  return 1;
}

void *sub_2194B177C(void *a1)
{
  long long v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  long long v3 = (void (***)(void))a1[7];
  if (v3)
  {
    uint64_t v4 = (void (***)(void))a1[8];
    long long v5 = (void *)a1[7];
    if (v4 != v3)
    {
      long long v6 = v4 - 18;
      float v7 = v4 - 18;
      float v8 = v4 - 18;
      do
      {
        float v9 = *v8;
        v8 -= 18;
        (*v9)(v7);
        v6 -= 18;
        BOOL v10 = v7 == v3;
        float v7 = v8;
      }
      while (!v10);
      long long v5 = (void *)a1[7];
    }
    a1[8] = v3;
    operator delete(v5);
  }
  return a1;
}

void *sub_2194B1828(void *a1)
{
  long long v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  long long v3 = (void (***)(void))a1[6];
  if (v3)
  {
    uint64_t v4 = (void (***)(void))a1[7];
    long long v5 = (void *)a1[6];
    if (v4 != v3)
    {
      long long v6 = v4 - 18;
      float v7 = v4 - 18;
      float v8 = v4 - 18;
      do
      {
        float v9 = *v8;
        v8 -= 18;
        (*v9)(v7);
        v6 -= 18;
        BOOL v10 = v7 == v3;
        float v7 = v8;
      }
      while (!v10);
      long long v5 = (void *)a1[6];
    }
    a1[7] = v3;
    operator delete(v5);
  }
  return a1;
}

void sub_2194B18D4(uint64_t a1, uint64_t *a2)
{
  long long v2 = (void *)a1;
  long long v3 = *(void (****)(void))(a1 + 48);
  uint64_t v95 = (char **)(a1 + 48);
  uint64_t v4 = *(void (****)(void))(a1 + 56);
  if (v4 != v3)
  {
    long long v5 = v4 - 18;
    long long v6 = v4 - 18;
    float v7 = v4 - 18;
    do
    {
      float v8 = *v7;
      v7 -= 18;
      (*v8)(v6);
      v5 -= 18;
      BOOL v9 = v6 == v3;
      long long v6 = v7;
    }
    while (!v9);
  }
  v2[7] = v3;
  sub_2194B232C(v95, v2[3] * v2[2]);
  if (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4) != 0x8E38E38E38E38E39 * ((uint64_t)(v2[8] - v2[6]) >> 4)) {
    sub_219507DCC();
  }
  unint64_t v10 = v2[2];
  if (v10)
  {
    unint64_t v11 = v2[3];
    if (v11)
    {
      uint64_t v99 = 0;
      uint64_t v100 = v2;
      while (!v11)
      {
LABEL_10:
        if (++v99 >= v10) {
          return;
        }
      }
      unint64_t v12 = 0;
      uint64_t v98 = *v2 >> v99;
      uint64_t v97 = v2[1] >> v99;
      while (1)
      {
        unint64_t v13 = v12 + v11 * v99;
        uint64_t v14 = *a2;
        int v15 = (unsigned __int8 *)(*a2 + 112 * v13);
        float v16 = (uint64_t *)(v15 + 24);
        if (*((void *)v15 + 3) != v98) {
          sub_219507D94();
        }
        uint64_t v17 = v14 + 112 * v13;
        uint64_t v19 = *(void *)(v17 + 40);
        int v18 = (unint64_t *)(v17 + 40);
        if (v19 != v97) {
          sub_219507D5C();
        }
        uint64_t v101 = &unk_26CAD65B0;
        unsigned __int8 v102 = 0;
        char v107 = 0;
        long long v103 = 0u;
        long long v104 = 0u;
        long long v105 = 0u;
        memset(v106, 0, 41);
        unint64_t v109 = 0;
        unint64_t v110 = 0;
        std::string __p = 0;
        uint64_t v20 = v14 + 112 * v13;
        uint64_t v21 = *(void *)(v20 + 64);
        uint64_t v111 = v21;
        float v22 = *(std::__shared_weak_count **)(v20 + 72);
        float v112 = v22;
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v23 = *v16;
        uint64_t v24 = v14 + 112 * v13;
        unint64_t v25 = *(void *)(v24 + 32);
        uint64_t v27 = *(void *)(v24 + 8);
        uint64_t v26 = *(void *)(v24 + 16);
        uint64_t v28 = *v15;
        if (*v15) {
          uint64_t v29 = *v16;
        }
        else {
          uint64_t v29 = 0;
        }
        if (v26 + v27 * v23 + v29 > v25)
        {
          sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_2194FF9C0);
          abort();
        }
        unint64_t v30 = *v18;
        uint64_t v111 = 0;
        float v112 = 0;
        float v31 = *(std::__shared_weak_count **)&v106[16];
        *(void *)&v106[8] = v21;
        *(void *)&v106[16] = v22;
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
        unsigned __int8 v102 = v28;
        *(void *)&long long v104 = v23;
        *((void *)&v104 + 1) = v25;
        *(void *)&long long v105 = v30;
        *(void *)&long long v103 = v27;
        *((void *)&v103 + 1) = v26;
        uint64_t v32 = *(void *)(v24 + 96);
        char v107 = *(unsigned char *)(v24 + 104);
        *(void *)&v106[40] = v32;
        *((void *)&v105 + 1) = (v28 | (2 * v27)) + v26;
        *(void *)uint64_t v106 = v28 | (2 * v27);
        float v33 = (char *)__p;
        float v34 = v109;
        int64_t v35 = v109 - (unsigned char *)__p;
        unint64_t v36 = (v109 - (unsigned char *)__p) >> 3;
        unint64_t v37 = v30 - v36;
        if (v30 > v36) {
          break;
        }
        if (v30 < v36) {
          unint64_t v109 = (char *)__p + 8 * v30;
        }
        if (v30) {
          goto LABEL_50;
        }
LABEL_52:
        uint64_t v54 = v112;
        if (v112 && !atomic_fetch_add(&v112->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
          long long v2 = v100;
          unint64_t v55 = v100[7];
          if (v55 < v100[8])
          {
LABEL_55:
            *(void *)unint64_t v55 = &unk_26CAD65B0;
            *(unsigned char *)(v55 + 8) = 0;
            *(unsigned char *)(v55 + 112) = 0;
            *(_OWORD *)(v55 + 16) = 0u;
            *(_OWORD *)(v55 + 32) = 0u;
            *(_OWORD *)(v55 + 48) = 0u;
            *(_OWORD *)(v55 + 64) = 0u;
            *(_OWORD *)(v55 + 80) = 0u;
            *(_OWORD *)(v55 + 89) = 0u;
            *(void *)(v55 + 120) = 0;
            *(void *)(v55 + 128) = 0;
            *(void *)(v55 + 136) = 0;
            long long v56 = v104;
            long long v57 = v103;
            uint64_t v58 = v102;
            if (v102) {
              uint64_t v59 = v104;
            }
            else {
              uint64_t v59 = 0;
            }
            if ((unint64_t)(*((void *)&v103 + 1) + v103 * v104 + v59) > *((void *)&v104 + 1))
            {
              sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_2194FF9C0);
              abort();
            }
            unint64_t v60 = v105;
            long long v61 = *(_OWORD *)&v106[8];
            *(_OWORD *)&v106[8] = 0uLL;
            float v62 = *(std::__shared_weak_count **)(v55 + 80);
            *(_OWORD *)(v55 + 72) = v61;
            if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
            *(unsigned char *)(v55 + 8) = v58;
            *(_OWORD *)(v55 + 32) = v56;
            *(void *)(v55 + 48) = v60;
            *(_OWORD *)(v55 + 16) = v57;
            uint64_t v63 = *(void *)&v106[40];
            *(unsigned char *)(v55 + 112) = v107;
            *(void *)(v55 + 104) = v63;
            uint64_t v64 = v58 | (2 * v57);
            *(void *)(v55 + 56) = v64 + *((void *)&v57 + 1);
            *(void *)(v55 + 64) = v64;
            float v65 = *(unsigned char **)(v55 + 120);
            float v66 = *(char **)(v55 + 128);
            unint64_t v67 = (v66 - v65) >> 3;
            unint64_t v68 = v60 - v67;
            if (v60 <= v67)
            {
              if (v60 < v67) {
                *(void *)(v55 + 128) = &v65[8 * v60];
              }
              if (v60) {
                goto LABEL_97;
              }
            }
            else
            {
              uint64_t v69 = *(void *)(v55 + 136);
              if (v68 <= (v69 - (uint64_t)v66) >> 3)
              {
                bzero(*(void **)(v55 + 128), 8 * v68);
                *(void *)(v55 + 128) = &v66[8 * v68];
              }
              else
              {
                if (v60 >> 61) {
                  sub_219486AE4();
                }
                uint64_t v70 = v69 - (void)v65;
                unint64_t v71 = v70 >> 2;
                if (v70 >> 2 <= v60) {
                  unint64_t v71 = v60;
                }
                if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
                }
                if (v71 >> 61) {
                  sub_219486AFC();
                }
                unint64_t v94 = v71;
                float v72 = (char *)operator new(8 * v71);
                size_t v73 = 8 * v68;
                float v91 = v72;
                uint64_t v92 = 8 * v68;
                float v74 = &v72[8 * v67];
                bzero(v74, v73);
                if (v66 == v65)
                {
                  float v76 = v74;
                  float v77 = v91;
                }
                else
                {
                  unint64_t v75 = v66 - 8 - v65;
                  if (v75 < 0x58)
                  {
                    float v76 = v74;
                    float v77 = v91;
                    goto LABEL_93;
                  }
                  float v77 = v91;
                  float v76 = v74;
                  if ((unint64_t)(v65 - v91) < 0x20) {
                    goto LABEL_113;
                  }
                  uint64_t v81 = (v75 >> 3) + 1;
                  uint64_t v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
                  float v83 = &v66[-v82];
                  float v76 = &v74[-v82];
                  float v84 = &v91[8 * v67 - 16];
                  float v85 = v66 - 16;
                  uint64_t v86 = v81 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v87 = *(_OWORD *)v85;
                    *((_OWORD *)v84 - 1) = *((_OWORD *)v85 - 1);
                    *(_OWORD *)float v84 = v87;
                    v84 -= 32;
                    v85 -= 32;
                    v86 -= 4;
                  }
                  while (v86);
                  float v66 = v83;
                  if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_113:
                    do
                    {
LABEL_93:
                      uint64_t v88 = *((void *)v66 - 1);
                      v66 -= 8;
                      *((void *)v76 - 1) = v88;
                      v76 -= 8;
                    }
                    while (v66 != v65);
                  }
                  float v66 = *(char **)(v55 + 120);
                }
                *(void *)(v55 + 120) = v76;
                *(void *)(v55 + 128) = &v74[v92];
                *(void *)(v55 + 136) = &v77[8 * v94];
                if (v66) {
                  operator delete(v66);
                }
              }
LABEL_97:
              uint64_t v89 = 0;
              uint64_t v90 = 0;
              do
              {
                *(void *)(*(void *)(v55 + 120) + 8 * v90++) = *(void *)(v55 + 72) + v89;
                v89 += 2 * *((void *)&v56 + 1);
              }
              while (v60 != v90);
            }
            long long v104 = 0uLL;
            *(void *)&long long v105 = 0;
            long long v2 = v100;
            v100[7] = v55 + 144;
            v100[7] = v55 + 144;
            uint64_t v101 = &unk_26CAD65B0;
            float v78 = (char *)__p;
            if (!__p) {
              goto LABEL_80;
            }
LABEL_79:
            unint64_t v109 = v78;
            operator delete(v78);
            goto LABEL_80;
          }
        }
        else
        {
          long long v2 = v100;
          unint64_t v55 = v100[7];
          if (v55 < v100[8]) {
            goto LABEL_55;
          }
        }
        v2[7] = sub_2194B29B8(v95, (uint64_t)&v101);
        uint64_t v101 = &unk_26CAD65B0;
        float v78 = (char *)__p;
        if (__p) {
          goto LABEL_79;
        }
LABEL_80:
        float v79 = *(std::__shared_weak_count **)&v106[32];
        if (*(void *)&v106[32]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v106[32] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
          float v80 = *(std::__shared_weak_count **)&v106[16];
          if (*(void *)&v106[16])
          {
LABEL_83:
            if (!atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
        }
        else
        {
          float v80 = *(std::__shared_weak_count **)&v106[16];
          if (*(void *)&v106[16]) {
            goto LABEL_83;
          }
        }
        ++v12;
        unint64_t v11 = v2[3];
        if (v12 >= v11)
        {
          unint64_t v10 = v2[2];
          goto LABEL_10;
        }
      }
      if (v37 <= (v110 - v109) >> 3)
      {
        bzero(v109, 8 * v37);
        unint64_t v109 = &v34[8 * v37];
        goto LABEL_50;
      }
      if (v30 >> 61) {
        sub_219486AE4();
      }
      unint64_t v38 = (v110 - (unsigned char *)__p) >> 2;
      if (v38 <= v30) {
        unint64_t v38 = v30;
      }
      if ((unint64_t)(v110 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v38 >> 61) {
        sub_219486AFC();
      }
      unint64_t v93 = v38;
      uint64_t v39 = operator new(8 * v38);
      uint64_t v40 = &v39[8 * v36];
      size_t v41 = 8 * v37;
      bzero(v40, v41);
      if (v34 == v33)
      {
        std::string __p = &v39[8 * v36];
        unint64_t v109 = &v40[v41];
        unint64_t v110 = &v39[8 * v93];
        if (!v34)
        {
LABEL_50:
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          do
          {
            *((void *)__p + v53++) = *(void *)&v106[8] + v52;
            v52 += 2 * v25;
          }
          while (v30 != v53);
          goto LABEL_52;
        }
LABEL_49:
        operator delete(v34);
        goto LABEL_50;
      }
      unint64_t v42 = v34 - 8 - v33;
      if (v42 >= 0x58)
      {
        float v43 = &v39[8 * v36];
        if ((unint64_t)(&v34[-v35] - v39) >= 0x20)
        {
          uint64_t v44 = (v42 >> 3) + 1;
          uint64_t v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
          int v46 = &v34[-v45];
          float v43 = &v40[-v45];
          int v47 = &v39[8 * v36 - 16];
          int v48 = v34 - 16;
          uint64_t v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            *int v47 = v50;
            v47 -= 2;
            v48 -= 32;
            v49 -= 4;
          }
          while (v49);
          float v34 = v46;
          if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_48:
            float v34 = (char *)__p;
            std::string __p = v43;
            unint64_t v109 = &v40[v41];
            unint64_t v110 = &v39[8 * v93];
            if (!v34) {
              goto LABEL_50;
            }
            goto LABEL_49;
          }
        }
      }
      else
      {
        float v43 = &v39[8 * v36];
      }
      do
      {
        uint64_t v51 = *((void *)v34 - 1);
        v34 -= 8;
        *((void *)v43 - 1) = v51;
        v43 -= 8;
      }
      while (v34 != v33);
      goto LABEL_48;
    }
  }
}

void sub_2194B2224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42)
{
  uint64_t v45 = *v43;
  if (*v43)
  {
    v42[16] = v45;
    operator delete(v45);
  }
  int v46 = (std::__shared_weak_count *)v42[12];
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  int v47 = (std::__shared_weak_count *)v42[10];
  if (v47)
  {
    if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  *(void *)(a23 + 56) = v42;
  sub_2194B249C(&a26);
  _Unwind_Resume(a1);
}

void sub_2194B232C(char **a1, unint64_t a2)
{
  long long v2 = *a1;
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 4) < a2)
  {
    if (a2 >= 0x1C71C71C71C71C8) {
      sub_219486AE4();
    }
    uint64_t v4 = a1[1];
    uint64_t v5 = 144 * a2;
    long long v6 = (char *)operator new(144 * a2);
    uint64_t v7 = 0;
    float v8 = &v6[v4 - v2];
    *(void *)&long long v17 = v8;
    *((void *)&v17 + 1) = &v6[v5];
    while (&v4[v7] != v2)
    {
      v7 -= 144;
      sub_2194B2608((uint64_t)&v8[v7], (uint64_t)&v4[v7]);
    }
    BOOL v9 = &v8[v7];
    unint64_t v11 = *a1;
    unint64_t v10 = a1[1];
    *a1 = v9;
    *(_OWORD *)(a1 + 1) = v17;
    if (v10 != v11)
    {
      unint64_t v12 = v10 - 144;
      unint64_t v13 = v10 - 144;
      uint64_t v14 = v10 - 144;
      do
      {
        int v15 = *(void (***)(char *))v14;
        v14 -= 144;
        (*v15)(v13);
        v12 -= 144;
        BOOL v16 = v13 == v11;
        unint64_t v13 = v14;
      }
      while (!v16);
    }
    if (v11) {
      operator delete(v11);
    }
  }
}

void *sub_2194B249C(void *a1)
{
  *a1 = &unk_26CAD65B0;
  long long v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  long long v3 = (std::__shared_weak_count *)a1[12];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)a1[10];
    if (!v4) {
      return a1;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)a1[10];
    if (!v4) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t sub_2194B2598(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 144);
    *(void *)(a1 + 16) = i - 144;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2194B2608(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &unk_26CAD65B0;
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v3 = *(void *)(a2 + 80);
  *(void *)&long long v6 = *(void *)(a2 + 72);
  *((void *)&v6 + 1) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  sub_2194B2750(a1, &v6, *(void *)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 16), *(void *)(a2 + 24), *(unsigned __int8 *)(a2 + 8), (uint64_t *)(a2 + 104));
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (!*((void *)&v6 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v6 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_2194B2720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  long long v6 = v5;
  sub_21947E0B8((uint64_t)va);
  float v8 = *v6;
  if (*v6)
  {
    *(void *)(v3 + 128) = v8;
    operator delete(v8);
  }
  sub_2194A65B0(v4);
  _Unwind_Resume(a1);
}

void sub_2194B2750(uint64_t a1, long long *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t *a9)
{
  if (a8) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = 0;
  }
  if (a7 + a6 * a3 + v9 > a4) {
    sub_219507E54();
  }
  char v10 = a8;
  uint64_t v17 = a8;
  long long v18 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v18;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = *(void *)(a1 + 120);
  *(unsigned char *)(a1 + 8) = v10;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = a5;
  *(void *)(a1 + 16) = a6;
  *(void *)(a1 + 24) = a7;
  uint64_t v21 = *a9;
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a9 + 8);
  *(void *)(a1 + 104) = v21;
  uint64_t v22 = v17 | (2 * a6);
  *(void *)(a1 + 56) = v22 + a7;
  *(void *)(a1 + 64) = v22;
  unint64_t v23 = (*(void *)(a1 + 128) - v20) >> 3;
  if (a5 > v23)
  {
    sub_21949D5EC((void **)(a1 + 120), a5 - v23);
LABEL_13:
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    do
    {
      *(void *)(*(void *)(a1 + 120) + 8 * v25++) = *(void *)(a1 + 72) + v24;
      v24 += 2 * a4;
    }
    while (a5 != v25);
    return;
  }
  if (a5 < v23) {
    *(void *)(a1 + 128) = v20 + 8 * a5;
  }
  if (a5) {
    goto LABEL_13;
  }
}

void sub_2194B28AC(void *a1)
{
  *a1 = &unk_26CAD65B0;
  long long v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[12];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)a1[10];
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)a1[10];
    if (!v4) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_9:

  JUMPOUT(0x21D48B5B0);
}

uint64_t sub_2194B29B8(void *a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7) {
    sub_219486AE4();
  }
  if (0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v6 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7) {
      sub_219486AFC();
    }
    uint64_t v7 = (char *)operator new(144 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v19 = (uint64_t)&v7[144 * v3];
  *((void *)&v20 + 1) = &v7[144 * v6];
  sub_2194B2BA4(v19, a2);
  uint64_t v8 = 0;
  char v10 = (char *)*a1;
  for (uint64_t i = a1[1]; (char *)(i + v8) != v10; sub_2194B2608(v8 + v19, v8 + i))
    v8 -= 144;
  unint64_t v12 = (char *)*a1;
  unint64_t v11 = (char *)a1[1];
  *a1 = v19 + v8;
  *(void *)&long long v20 = v19 + 144;
  *(_OWORD *)(a1 + 1) = v20;
  if (v11 != v12)
  {
    unint64_t v13 = v11 - 144;
    uint64_t v14 = v11 - 144;
    int v15 = v11 - 144;
    do
    {
      BOOL v16 = *(void (***)(char *))v15;
      v15 -= 144;
      (*v16)(v14);
      v13 -= 144;
      BOOL v17 = v14 == v12;
      uint64_t v14 = v15;
    }
    while (!v17);
  }
  if (v12) {
    operator delete(v12);
  }
  return v19 + 144;
}

void sub_2194B2B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2194B2598((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2194B2BA4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26CAD65B0;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 89) = 0u;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  unint64_t v3 = (void *)(a2 + 32);
  sub_2194B2750(a1, (long long *)(a2 + 72), *(void *)(a2 + 32), v3[1], v3[2], *(v3 - 2), *(v3 - 1), *((unsigned __int8 *)v3 - 24), v3 + 9);
  *unint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  return a1;
}

void sub_2194B2C48(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 128) = v4;
    operator delete(v4);
  }
  sub_219507E8C(v1);
  _Unwind_Resume(a1);
}

void sub_2194B2C6C(uint64_t a1, uint64_t *a2)
{
  long long v2 = (void *)a1;
  unint64_t v3 = *(void (****)(void))(a1 + 48);
  unint64_t v94 = (char **)(a1 + 48);
  unint64_t v4 = *(void (****)(void))(a1 + 56);
  if (v4 != v3)
  {
    uint64_t v5 = v4 - 18;
    unint64_t v6 = v4 - 18;
    uint64_t v7 = v4 - 18;
    do
    {
      uint64_t v8 = *v7;
      v7 -= 18;
      (*v8)(v6);
      v5 -= 18;
      BOOL v9 = v6 == v3;
      unint64_t v6 = v7;
    }
    while (!v9);
  }
  v2[7] = v3;
  sub_2194B36BC(v94, v2[3] * v2[2]);
  if (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4) != 0x8E38E38E38E38E39 * ((uint64_t)(v2[8] - v2[6]) >> 4)) {
    sub_219507DCC();
  }
  unint64_t v10 = v2[2];
  if (v10)
  {
    unint64_t v11 = v2[3];
    if (v11)
    {
      uint64_t v98 = 0;
      uint64_t v99 = v2;
      while (!v11)
      {
LABEL_10:
        if (++v98 >= v10) {
          return;
        }
      }
      unint64_t v12 = 0;
      uint64_t v97 = *v2 >> v98;
      uint64_t v96 = v2[1] >> v98;
      while (1)
      {
        unint64_t v13 = v12 + v11 * v98;
        uint64_t v14 = *a2;
        int v15 = (unsigned __int8 *)(*a2 + 112 * v13);
        BOOL v16 = (uint64_t *)(v15 + 24);
        if (*((void *)v15 + 3) != v97) {
          sub_219507D94();
        }
        uint64_t v17 = v14 + 112 * v13;
        uint64_t v19 = *(void *)(v17 + 40);
        long long v18 = (unint64_t *)(v17 + 40);
        if (v19 != v96) {
          sub_219507D5C();
        }
        uint64_t v100 = &unk_26CAD65E0;
        unsigned __int8 v101 = 0;
        char v106 = 0;
        long long v102 = 0u;
        long long v103 = 0u;
        long long v104 = 0u;
        memset(v105, 0, 41);
        uint64_t v108 = 0;
        unint64_t v109 = 0;
        std::string __p = 0;
        uint64_t v20 = v14 + 112 * v13;
        uint64_t v21 = *(void *)(v20 + 64);
        uint64_t v110 = v21;
        uint64_t v22 = *(std::__shared_weak_count **)(v20 + 72);
        uint64_t v111 = v22;
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v23 = *v16;
        uint64_t v24 = v14 + 112 * v13;
        unint64_t v25 = *(void *)(v24 + 32);
        uint64_t v27 = *(void *)(v24 + 8);
        uint64_t v26 = *(void *)(v24 + 16);
        uint64_t v28 = *v15;
        if (*v15) {
          uint64_t v29 = *v16;
        }
        else {
          uint64_t v29 = 0;
        }
        if (v26 + v27 * v23 + v29 > v25)
        {
          sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_2194FF9C0);
          abort();
        }
        unint64_t v30 = *v18;
        uint64_t v110 = 0;
        uint64_t v111 = 0;
        float v31 = *(std::__shared_weak_count **)&v105[16];
        *(void *)&v105[8] = v21;
        *(void *)&v105[16] = v22;
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
        unsigned __int8 v101 = v28;
        *(void *)&long long v103 = v23;
        *((void *)&v103 + 1) = v25;
        *(void *)&long long v104 = v30;
        *(void *)&long long v102 = v27;
        *((void *)&v102 + 1) = v26;
        uint64_t v32 = *(void *)(v24 + 96);
        char v106 = *(unsigned char *)(v24 + 104);
        *(void *)&v105[40] = v32;
        *((void *)&v104 + 1) = v27 + v28 + v26;
        *(void *)long long v105 = v27 + v28;
        float v33 = (char *)__p;
        float v34 = v108;
        int64_t v35 = v108 - (unsigned char *)__p;
        unint64_t v36 = (v108 - (unsigned char *)__p) >> 3;
        unint64_t v37 = v30 - v36;
        if (v30 > v36) {
          break;
        }
        if (v30 < v36) {
          uint64_t v108 = (char *)__p + 8 * v30;
        }
        if (v30) {
          goto LABEL_50;
        }
LABEL_52:
        uint64_t v54 = v111;
        if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
          long long v2 = v99;
          unint64_t v55 = v99[7];
          if (v55 < v99[8])
          {
LABEL_55:
            *(void *)unint64_t v55 = &unk_26CAD65E0;
            *(unsigned char *)(v55 + 8) = 0;
            *(unsigned char *)(v55 + 112) = 0;
            *(_OWORD *)(v55 + 16) = 0u;
            *(_OWORD *)(v55 + 32) = 0u;
            *(_OWORD *)(v55 + 48) = 0u;
            *(_OWORD *)(v55 + 64) = 0u;
            *(_OWORD *)(v55 + 80) = 0u;
            *(_OWORD *)(v55 + 89) = 0u;
            *(void *)(v55 + 120) = 0;
            *(void *)(v55 + 128) = 0;
            *(void *)(v55 + 136) = 0;
            long long v56 = v103;
            long long v57 = v102;
            uint64_t v58 = v101;
            if (v101) {
              uint64_t v59 = v103;
            }
            else {
              uint64_t v59 = 0;
            }
            if ((unint64_t)(*((void *)&v102 + 1) + v102 * v103 + v59) > *((void *)&v103 + 1))
            {
              sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_2194FF9C0);
              abort();
            }
            unint64_t v60 = v104;
            long long v61 = *(_OWORD *)&v105[8];
            *(_OWORD *)&v105[8] = 0uLL;
            float v62 = *(std::__shared_weak_count **)(v55 + 80);
            *(_OWORD *)(v55 + 72) = v61;
            if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
            *(unsigned char *)(v55 + 8) = v58;
            *(_OWORD *)(v55 + 32) = v56;
            *(void *)(v55 + 48) = v60;
            *(_OWORD *)(v55 + 16) = v57;
            uint64_t v63 = *(void *)&v105[40];
            *(unsigned char *)(v55 + 112) = v106;
            *(void *)(v55 + 104) = v63;
            *(void *)(v55 + 56) = v57 + v58 + *((void *)&v57 + 1);
            *(void *)(v55 + 64) = v57 + v58;
            uint64_t v64 = *(unsigned char **)(v55 + 120);
            float v65 = *(char **)(v55 + 128);
            unint64_t v66 = (v65 - v64) >> 3;
            unint64_t v67 = v60 - v66;
            if (v60 <= v66)
            {
              if (v60 < v66) {
                *(void *)(v55 + 128) = &v64[8 * v60];
              }
              if (v60) {
                goto LABEL_97;
              }
            }
            else
            {
              uint64_t v68 = *(void *)(v55 + 136);
              if (v67 <= (v68 - (uint64_t)v65) >> 3)
              {
                bzero(*(void **)(v55 + 128), 8 * v67);
                *(void *)(v55 + 128) = &v65[8 * v67];
              }
              else
              {
                if (v60 >> 61) {
                  sub_219486AE4();
                }
                uint64_t v69 = v68 - (void)v64;
                unint64_t v70 = v69 >> 2;
                if (v69 >> 2 <= v60) {
                  unint64_t v70 = v60;
                }
                if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
                }
                if (v70 >> 61) {
                  sub_219486AFC();
                }
                unint64_t v93 = v70;
                unint64_t v71 = (char *)operator new(8 * v70);
                size_t v72 = 8 * v67;
                uint64_t v90 = v71;
                uint64_t v91 = 8 * v67;
                size_t v73 = &v71[8 * v66];
                bzero(v73, v72);
                if (v65 == v64)
                {
                  unint64_t v75 = v73;
                  float v76 = v90;
                }
                else
                {
                  unint64_t v74 = v65 - 8 - v64;
                  if (v74 < 0x58)
                  {
                    unint64_t v75 = v73;
                    float v76 = v90;
                    goto LABEL_93;
                  }
                  float v76 = v90;
                  unint64_t v75 = v73;
                  if ((unint64_t)(v64 - v90) < 0x20) {
                    goto LABEL_113;
                  }
                  uint64_t v80 = (v74 >> 3) + 1;
                  uint64_t v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v82 = &v65[-v81];
                  unint64_t v75 = &v73[-v81];
                  float v83 = &v90[8 * v66 - 16];
                  float v84 = v65 - 16;
                  uint64_t v85 = v80 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v86 = *(_OWORD *)v84;
                    *((_OWORD *)v83 - 1) = *((_OWORD *)v84 - 1);
                    *(_OWORD *)float v83 = v86;
                    v83 -= 32;
                    v84 -= 32;
                    v85 -= 4;
                  }
                  while (v85);
                  float v65 = v82;
                  if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_113:
                    do
                    {
LABEL_93:
                      uint64_t v87 = *((void *)v65 - 1);
                      v65 -= 8;
                      *((void *)v75 - 1) = v87;
                      v75 -= 8;
                    }
                    while (v65 != v64);
                  }
                  float v65 = *(char **)(v55 + 120);
                }
                *(void *)(v55 + 120) = v75;
                *(void *)(v55 + 128) = &v73[v91];
                *(void *)(v55 + 136) = &v76[8 * v93];
                if (v65) {
                  operator delete(v65);
                }
              }
LABEL_97:
              uint64_t v88 = 0;
              uint64_t v89 = 0;
              do
              {
                *(void *)(*(void *)(v55 + 120) + 8 * v89++) = *(void *)(v55 + 72) + v88;
                v88 += *((void *)&v56 + 1);
              }
              while (v60 != v89);
            }
            long long v103 = 0uLL;
            *(void *)&long long v104 = 0;
            long long v2 = v99;
            v99[7] = v55 + 144;
            v99[7] = v55 + 144;
            uint64_t v100 = &unk_26CAD65E0;
            float v77 = (char *)__p;
            if (!__p) {
              goto LABEL_80;
            }
LABEL_79:
            uint64_t v108 = v77;
            operator delete(v77);
            goto LABEL_80;
          }
        }
        else
        {
          long long v2 = v99;
          unint64_t v55 = v99[7];
          if (v55 < v99[8]) {
            goto LABEL_55;
          }
        }
        v2[7] = sub_2194B3D44(v94, (uint64_t)&v100);
        uint64_t v100 = &unk_26CAD65E0;
        float v77 = (char *)__p;
        if (__p) {
          goto LABEL_79;
        }
LABEL_80:
        float v78 = *(std::__shared_weak_count **)&v105[32];
        if (*(void *)&v105[32]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v105[32] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
          float v79 = *(std::__shared_weak_count **)&v105[16];
          if (*(void *)&v105[16])
          {
LABEL_83:
            if (!atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
        }
        else
        {
          float v79 = *(std::__shared_weak_count **)&v105[16];
          if (*(void *)&v105[16]) {
            goto LABEL_83;
          }
        }
        ++v12;
        unint64_t v11 = v2[3];
        if (v12 >= v11)
        {
          unint64_t v10 = v2[2];
          goto LABEL_10;
        }
      }
      if (v37 <= (v109 - v108) >> 3)
      {
        bzero(v108, 8 * v37);
        uint64_t v108 = &v34[8 * v37];
        goto LABEL_50;
      }
      if (v30 >> 61) {
        sub_219486AE4();
      }
      unint64_t v38 = (v109 - (unsigned char *)__p) >> 2;
      if (v38 <= v30) {
        unint64_t v38 = v30;
      }
      if ((unint64_t)(v109 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v38 >> 61) {
        sub_219486AFC();
      }
      unint64_t v92 = v38;
      uint64_t v39 = operator new(8 * v38);
      uint64_t v40 = &v39[8 * v36];
      size_t v41 = 8 * v37;
      bzero(v40, v41);
      if (v34 == v33)
      {
        std::string __p = &v39[8 * v36];
        uint64_t v108 = &v40[v41];
        unint64_t v109 = &v39[8 * v92];
        if (!v34)
        {
LABEL_50:
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          do
          {
            *((void *)__p + v53++) = *(void *)&v105[8] + v52;
            v52 += v25;
          }
          while (v30 != v53);
          goto LABEL_52;
        }
LABEL_49:
        operator delete(v34);
        goto LABEL_50;
      }
      unint64_t v42 = v34 - 8 - v33;
      if (v42 >= 0x58)
      {
        float v43 = &v39[8 * v36];
        if ((unint64_t)(&v34[-v35] - v39) >= 0x20)
        {
          uint64_t v44 = (v42 >> 3) + 1;
          uint64_t v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
          int v46 = &v34[-v45];
          float v43 = &v40[-v45];
          int v47 = &v39[8 * v36 - 16];
          int v48 = v34 - 16;
          uint64_t v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            *int v47 = v50;
            v47 -= 2;
            v48 -= 32;
            v49 -= 4;
          }
          while (v49);
          float v34 = v46;
          if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_48:
            float v34 = (char *)__p;
            std::string __p = v43;
            uint64_t v108 = &v40[v41];
            unint64_t v109 = &v39[8 * v92];
            if (!v34) {
              goto LABEL_50;
            }
            goto LABEL_49;
          }
        }
      }
      else
      {
        float v43 = &v39[8 * v36];
      }
      do
      {
        uint64_t v51 = *((void *)v34 - 1);
        v34 -= 8;
        *((void *)v43 - 1) = v51;
        v43 -= 8;
      }
      while (v34 != v33);
      goto LABEL_48;
    }
  }
}

void sub_2194B35B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42)
{
  uint64_t v45 = *v43;
  if (*v43)
  {
    v42[16] = v45;
    operator delete(v45);
  }
  int v46 = (std::__shared_weak_count *)v42[12];
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  int v47 = (std::__shared_weak_count *)v42[10];
  if (v47)
  {
    if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  *(void *)(a23 + 56) = v42;
  sub_2194B382C(&a26);
  _Unwind_Resume(a1);
}

void sub_2194B36BC(char **a1, unint64_t a2)
{
  long long v2 = *a1;
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 4) < a2)
  {
    if (a2 >= 0x1C71C71C71C71C8) {
      sub_219486AE4();
    }
    unint64_t v4 = a1[1];
    uint64_t v5 = 144 * a2;
    unint64_t v6 = (char *)operator new(144 * a2);
    uint64_t v7 = 0;
    uint64_t v8 = &v6[v4 - v2];
    *(void *)&long long v17 = v8;
    *((void *)&v17 + 1) = &v6[v5];
    while (&v4[v7] != v2)
    {
      v7 -= 144;
      sub_2194B3998((uint64_t)&v8[v7], (uint64_t)&v4[v7]);
    }
    BOOL v9 = &v8[v7];
    unint64_t v11 = *a1;
    unint64_t v10 = a1[1];
    *a1 = v9;
    *(_OWORD *)(a1 + 1) = v17;
    if (v10 != v11)
    {
      unint64_t v12 = v10 - 144;
      unint64_t v13 = v10 - 144;
      uint64_t v14 = v10 - 144;
      do
      {
        int v15 = *(void (***)(char *))v14;
        v14 -= 144;
        (*v15)(v13);
        v12 -= 144;
        BOOL v16 = v13 == v11;
        unint64_t v13 = v14;
      }
      while (!v16);
    }
    if (v11) {
      operator delete(v11);
    }
  }
}

void *sub_2194B382C(void *a1)
{
  *a1 = &unk_26CAD65E0;
  long long v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[12];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    unint64_t v4 = (std::__shared_weak_count *)a1[10];
    if (!v4) {
      return a1;
    }
  }
  else
  {
    unint64_t v4 = (std::__shared_weak_count *)a1[10];
    if (!v4) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t sub_2194B3928(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 144);
    *(void *)(a1 + 16) = i - 144;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2194B3998(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &unk_26CAD65E0;
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v3 = *(void *)(a2 + 80);
  *(void *)&long long v6 = *(void *)(a2 + 72);
  *((void *)&v6 + 1) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  sub_2194B3AE0(a1, &v6, *(void *)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 16), *(void *)(a2 + 24), *(unsigned __int8 *)(a2 + 8), (uint64_t *)(a2 + 104));
  unint64_t v4 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (!*((void *)&v6 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v6 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_2194B3AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  long long v6 = v5;
  sub_21947E0B8((uint64_t)va);
  uint64_t v8 = *v6;
  if (*v6)
  {
    *(void *)(v3 + 128) = v8;
    operator delete(v8);
  }
  sub_2194A65B0(v4);
  _Unwind_Resume(a1);
}

void sub_2194B3AE0(uint64_t a1, long long *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t *a9)
{
  if (a8) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = 0;
  }
  if (a7 + a6 * a3 + v9 > a4) {
    sub_219507E54();
  }
  char v10 = a8;
  uint64_t v17 = a8;
  long long v18 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v18;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = *(void *)(a1 + 120);
  *(unsigned char *)(a1 + 8) = v10;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = a5;
  *(void *)(a1 + 16) = a6;
  *(void *)(a1 + 24) = a7;
  uint64_t v21 = *a9;
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a9 + 8);
  *(void *)(a1 + 104) = v21;
  *(void *)(a1 + 56) = v17 + a6 + a7;
  *(void *)(a1 + 64) = v17 + a6;
  unint64_t v22 = (*(void *)(a1 + 128) - v20) >> 3;
  if (a5 > v22)
  {
    sub_21949D5EC((void **)(a1 + 120), a5 - v22);
LABEL_13:
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    do
    {
      *(void *)(*(void *)(a1 + 120) + 8 * v24++) = *(void *)(a1 + 72) + v23;
      v23 += a4;
    }
    while (a5 != v24);
    return;
  }
  if (a5 < v22) {
    *(void *)(a1 + 128) = v20 + 8 * a5;
  }
  if (a5) {
    goto LABEL_13;
  }
}

void sub_2194B3C38(void *a1)
{
  *a1 = &unk_26CAD65E0;
  long long v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[12];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)a1[10];
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)a1[10];
    if (!v4) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_9:

  JUMPOUT(0x21D48B5B0);
}

uint64_t sub_2194B3D44(void *a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7) {
    sub_219486AE4();
  }
  if (0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v6 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7) {
      sub_219486AFC();
    }
    uint64_t v7 = (char *)operator new(144 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v19 = (uint64_t)&v7[144 * v3];
  *((void *)&v20 + 1) = &v7[144 * v6];
  sub_2194B3F30(v19, a2);
  uint64_t v8 = 0;
  char v10 = (char *)*a1;
  for (uint64_t i = a1[1]; (char *)(i + v8) != v10; sub_2194B3998(v8 + v19, v8 + i))
    v8 -= 144;
  unint64_t v12 = (char *)*a1;
  unint64_t v11 = (char *)a1[1];
  *a1 = v19 + v8;
  *(void *)&long long v20 = v19 + 144;
  *(_OWORD *)(a1 + 1) = v20;
  if (v11 != v12)
  {
    unint64_t v13 = v11 - 144;
    uint64_t v14 = v11 - 144;
    int v15 = v11 - 144;
    do
    {
      BOOL v16 = *(void (***)(char *))v15;
      v15 -= 144;
      (*v16)(v14);
      v13 -= 144;
      BOOL v17 = v14 == v12;
      uint64_t v14 = v15;
    }
    while (!v17);
  }
  if (v12) {
    operator delete(v12);
  }
  return v19 + 144;
}

void sub_2194B3EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2194B3928((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2194B3F30(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26CAD65E0;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 89) = 0u;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  unint64_t v3 = (void *)(a2 + 32);
  sub_2194B3AE0(a1, (long long *)(a2 + 72), *(void *)(a2 + 32), v3[1], v3[2], *(v3 - 2), *(v3 - 1), *((unsigned __int8 *)v3 - 24), v3 + 9);
  *unint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  return a1;
}

void sub_2194B3FD4(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 128) = v4;
    operator delete(v4);
  }
  sub_219507E8C(v1);
  _Unwind_Resume(a1);
}

double sub_2194B3FF8(unint64_t a1, float *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  while (2)
  {
    unint64_t v12 = (__n128 *)(a2 - 12);
    unint64_t v13 = a2 - 24;
    uint64_t v14 = a2 - 36;
    unint64_t v15 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v15;
          uint64_t v16 = (uint64_t)a2 - v15;
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v15) >> 4);
          if (v7 || !v6)
          {
            switch(v17)
            {
              case 0uLL:
              case 1uLL:
                return a6.n128_f64[0];
              case 2uLL:
                a6.n128_f32[0] = *(a2 - 1);
                if (a6.n128_f32[0] > *(float *)(v15 + 44))
                {
                  long long v237 = *(_OWORD *)(v15 + 16);
                  __n128 v267 = *(__n128 *)(v15 + 32);
                  __n128 v205 = *(__n128 *)v15;
                  a6 = *(__n128 *)(a2 - 12);
                  long long v134 = *((_OWORD *)a2 - 1);
                  *(_OWORD *)(v15 + 16) = *((_OWORD *)a2 - 2);
                  *(_OWORD *)(v15 + 32) = v134;
                  *(__n128 *)unint64_t v15 = a6;
                  a6.n128_u64[0] = v205.n128_u64[0];
                  *((_OWORD *)a2 - 2) = v237;
                  *((__n128 *)a2 - 1) = v267;
                  *((__n128 *)a2 - 3) = v205;
                }
                return a6.n128_f64[0];
              case 3uLL:
                unint64_t v135 = v15 + 48;
                a6.n128_u32[0] = *(_DWORD *)(v15 + 92);
                float v136 = *(a2 - 1);
                if (a6.n128_f32[0] <= *(float *)(v15 + 44))
                {
                  if (v136 <= a6.n128_f32[0]) {
                    return a6.n128_f64[0];
                  }
                  a6 = *(__n128 *)v135;
                  long long v241 = *(_OWORD *)(v15 + 64);
                  long long v155 = *(_OWORD *)(v15 + 80);
                  __n128 v156 = *v12;
                  long long v157 = *((_OWORD *)a2 - 1);
                  *(_OWORD *)(v15 + 64) = *((_OWORD *)a2 - 2);
                  *(_OWORD *)(v15 + 80) = v157;
                  *(__n128 *)unint64_t v135 = v156;
                  *((_OWORD *)a2 - 2) = v241;
                  *((_OWORD *)a2 - 1) = v155;
                  __n128 *v12 = a6;
                  goto LABEL_152;
                }
                if (v136 <= a6.n128_f32[0])
                {
                  long long v244 = *(_OWORD *)(v15 + 16);
                  __n128 v271 = *(__n128 *)(v15 + 32);
                  __n128 v211 = *(__n128 *)v15;
                  long long v166 = *(_OWORD *)(v15 + 64);
                  *(_OWORD *)unint64_t v15 = *(_OWORD *)v135;
                  *(_OWORD *)(v15 + 16) = v166;
                  *(_OWORD *)(v15 + 32) = *(_OWORD *)(v15 + 80);
                  *(__n128 *)unint64_t v135 = v211;
                  *(_OWORD *)(v15 + 64) = v244;
                  a6.n128_u32[1] = v271.n128_u32[1];
                  *(__n128 *)(v15 + 80) = v271;
                  a6.n128_f32[0] = *(a2 - 1);
                  if (a6.n128_f32[0] <= *(float *)(v15 + 92)) {
                    return a6.n128_f64[0];
                  }
                  a6 = *(__n128 *)v135;
                  long long v139 = *(_OWORD *)(v15 + 64);
                  __n128 v140 = *(__n128 *)(v15 + 80);
                  __n128 v167 = *v12;
                  long long v168 = *((_OWORD *)a2 - 1);
                  *(_OWORD *)(v15 + 64) = *((_OWORD *)a2 - 2);
                  *(_OWORD *)(v15 + 80) = v168;
                  *(__n128 *)unint64_t v135 = v167;
                }
                else
                {
                  long long v238 = *(_OWORD *)(v15 + 16);
                  __n128 v268 = *(__n128 *)(v15 + 32);
                  __n128 v206 = *(__n128 *)v15;
                  __n128 v137 = *v12;
                  long long v138 = *((_OWORD *)a2 - 1);
                  *(_OWORD *)(v15 + 16) = *((_OWORD *)a2 - 2);
                  *(_OWORD *)(v15 + 32) = v138;
                  *(__n128 *)unint64_t v15 = v137;
                  a6 = v206;
                  long long v139 = v238;
                  __n128 v140 = v268;
                }
                *((_OWORD *)a2 - 2) = v139;
                *((__n128 *)a2 - 1) = v140;
                __n128 *v12 = a6;
                return a6.n128_f64[0];
              case 4uLL:
                unint64_t v135 = v15 + 48;
                float v141 = (__n128 *)(v15 + 96);
                float v142 = *(float *)(v15 + 92);
                float v143 = *(float *)(v15 + 140);
                if (v142 <= *(float *)(v15 + 44))
                {
                  if (v143 > v142)
                  {
                    long long v158 = *(_OWORD *)(v15 + 64);
                    a6 = *(__n128 *)(v15 + 80);
                    __n128 v159 = *(__n128 *)v135;
                    long long v160 = *(_OWORD *)(v15 + 112);
                    *(__n128 *)unint64_t v135 = *v141;
                    *(_OWORD *)(v15 + 64) = v160;
                    *(_OWORD *)(v15 + 80) = *(_OWORD *)(v15 + 128);
                    *float v141 = v159;
                    *(_OWORD *)(v15 + 112) = v158;
                    *(__n128 *)(v15 + 128) = a6;
                    if (*(float *)(v15 + 92) > *(float *)(v15 + 44))
                    {
                      long long v242 = *(_OWORD *)(v15 + 16);
                      __n128 v270 = *(__n128 *)(v15 + 32);
                      __n128 v209 = *(__n128 *)v15;
                      long long v161 = *(_OWORD *)(v15 + 64);
                      *(_OWORD *)unint64_t v15 = *(_OWORD *)v135;
                      *(_OWORD *)(v15 + 16) = v161;
                      *(_OWORD *)(v15 + 32) = *(_OWORD *)(v15 + 80);
                      *(__n128 *)unint64_t v135 = v209;
                      *(_OWORD *)(v15 + 64) = v242;
                      a6.n128_u32[1] = v270.n128_u32[1];
                      *(__n128 *)(v15 + 80) = v270;
                    }
                  }
                }
                else
                {
                  if (v143 <= v142)
                  {
                    long long v245 = *(_OWORD *)(v15 + 16);
                    __n128 v272 = *(__n128 *)(v15 + 32);
                    __n128 v212 = *(__n128 *)v15;
                    long long v169 = *(_OWORD *)(v15 + 64);
                    *(_OWORD *)unint64_t v15 = *(_OWORD *)v135;
                    *(_OWORD *)(v15 + 16) = v169;
                    *(_OWORD *)(v15 + 32) = *(_OWORD *)(v15 + 80);
                    *(__n128 *)unint64_t v135 = v212;
                    *(_OWORD *)(v15 + 64) = v245;
                    *(__n128 *)(v15 + 80) = v272;
                    if (v143 <= *(float *)(v15 + 92)) {
                      goto LABEL_149;
                    }
                    long long v170 = *(_OWORD *)(v15 + 64);
                    a6 = *(__n128 *)(v15 + 80);
                    __n128 v171 = *(__n128 *)v135;
                    long long v172 = *(_OWORD *)(v15 + 112);
                    *(__n128 *)unint64_t v135 = *v141;
                    *(_OWORD *)(v15 + 64) = v172;
                    *(_OWORD *)(v15 + 80) = *(_OWORD *)(v15 + 128);
                    *float v141 = v171;
                    *(_OWORD *)(v15 + 112) = v170;
                  }
                  else
                  {
                    long long v239 = *(_OWORD *)(v15 + 16);
                    __n128 v269 = *(__n128 *)(v15 + 32);
                    __n128 v207 = *(__n128 *)v15;
                    long long v144 = *(_OWORD *)(v15 + 112);
                    *(__n128 *)unint64_t v15 = *v141;
                    *(_OWORD *)(v15 + 16) = v144;
                    *(_OWORD *)(v15 + 32) = *(_OWORD *)(v15 + 128);
                    *float v141 = v207;
                    *(_OWORD *)(v15 + 112) = v239;
                    a6 = v269;
                  }
                  *(__n128 *)(v15 + 128) = a6;
                }
LABEL_149:
                a6.n128_f32[0] = *(a2 - 1);
                if (a6.n128_f32[0] > *(float *)(v15 + 140))
                {
                  a6 = *v141;
                  long long v246 = *(_OWORD *)(v15 + 112);
                  long long v173 = *(_OWORD *)(v15 + 128);
                  __n128 v174 = *v12;
                  long long v175 = *((_OWORD *)a2 - 1);
                  *(_OWORD *)(v15 + 112) = *((_OWORD *)a2 - 2);
                  *(_OWORD *)(v15 + 128) = v175;
                  *float v141 = v174;
                  *((_OWORD *)a2 - 2) = v246;
                  *((_OWORD *)a2 - 1) = v173;
                  __n128 *v12 = a6;
                  a6.n128_u32[0] = *(_DWORD *)(v15 + 140);
                  if (a6.n128_f32[0] > *(float *)(v15 + 92))
                  {
                    long long v176 = *(_OWORD *)(v15 + 64);
                    a6 = *(__n128 *)(v15 + 80);
                    __n128 v177 = *(__n128 *)v135;
                    long long v178 = *(_OWORD *)(v15 + 112);
                    *(__n128 *)unint64_t v135 = *v141;
                    *(_OWORD *)(v15 + 64) = v178;
                    *(_OWORD *)(v15 + 80) = *(_OWORD *)(v15 + 128);
                    *float v141 = v177;
                    *(_OWORD *)(v15 + 112) = v176;
                    *(__n128 *)(v15 + 128) = a6;
LABEL_152:
                    a6.n128_u32[0] = *(_DWORD *)(v15 + 92);
                    if (a6.n128_f32[0] > *(float *)(v15 + 44))
                    {
                      long long v247 = *(_OWORD *)(v15 + 16);
                      __n128 v273 = *(__n128 *)(v15 + 32);
                      __n128 v213 = *(__n128 *)v15;
                      long long v179 = *(_OWORD *)(v135 + 16);
                      *(_OWORD *)unint64_t v15 = *(_OWORD *)v135;
                      *(_OWORD *)(v15 + 16) = v179;
                      *(_OWORD *)(v15 + 32) = *(_OWORD *)(v135 + 32);
                      *(__n128 *)unint64_t v135 = v213;
                      *(_OWORD *)(v135 + 16) = v247;
                      a6.n128_u64[0] = v273.n128_u64[0];
                      *(__n128 *)(v135 + 32) = v273;
                    }
                  }
                }
                break;
              case 5uLL:
                a6.n128_u64[0] = sub_2194B53BC(v15, v15 + 48, v15 + 96, v15 + 144, (uint64_t)(a2 - 12), a6).n128_u64[0];
                return a6.n128_f64[0];
              default:
                JUMPOUT(0);
            }
            return a6.n128_f64[0];
          }
          if (v16 <= 1151)
          {
            float v145 = (float *)(v15 + 48);
            BOOL v147 = (float *)v15 == a2 || v145 == a2;
            if (a5)
            {
              if (!v147)
              {
                uint64_t v148 = 0;
                float v149 = (float *)v15;
                do
                {
                  a6.n128_f32[0] = v149[23];
                  float v151 = v149[11];
                  float v149 = v145;
                  if (a6.n128_f32[0] > v151)
                  {
                    *(_OWORD *)&v240[12] = *(_OWORD *)(v145 + 7);
                    long long v208 = *(_OWORD *)v145;
                    *(_OWORD *)unint64_t v240 = *((_OWORD *)v145 + 1);
                    uint64_t v152 = v148;
                    do
                    {
                      float v153 = (float *)(v15 + v152);
                      long long v154 = *(_OWORD *)(v15 + v152 + 16);
                      *((_OWORD *)v153 + 3) = *(_OWORD *)(v15 + v152);
                      *((_OWORD *)v153 + 4) = v154;
                      *((_OWORD *)v153 + 5) = *(_OWORD *)(v15 + v152 + 32);
                      if (!v152)
                      {
                        uint64_t v150 = v15;
                        goto LABEL_120;
                      }
                      v152 -= 48;
                    }
                    while (a6.n128_f32[0] > *(v153 - 1));
                    uint64_t v150 = v15 + v152 + 48;
LABEL_120:
                    *(_OWORD *)(v150 + 28) = *(_OWORD *)&v240[12];
                    *(_OWORD *)uint64_t v150 = v208;
                    *(_OWORD *)(v150 + 16) = *(_OWORD *)v240;
                    *(_DWORD *)(v150 + 44) = a6.n128_u32[0];
                  }
                  float v145 = v149 + 12;
                  v148 += 48;
                }
                while (v149 + 12 != a2);
              }
            }
            else if (!v147)
            {
              do
              {
                a6.n128_u32[0] = *(_DWORD *)(a1 + 92);
                float v162 = *(float *)(a1 + 44);
                a1 = (unint64_t)v145;
                if (a6.n128_f32[0] > v162)
                {
                  *(_OWORD *)&v243[12] = *(_OWORD *)(v145 + 7);
                  long long v210 = *(_OWORD *)v145;
                  *(_OWORD *)float v243 = *((_OWORD *)v145 + 1);
                  float v163 = v145;
                  do
                  {
                    long long v164 = *((_OWORD *)v163 - 2);
                    *(_OWORD *)float v163 = *((_OWORD *)v163 - 3);
                    *((_OWORD *)v163 + 1) = v164;
                    *((_OWORD *)v163 + 2) = *((_OWORD *)v163 - 1);
                    float v165 = *(v163 - 13);
                    v163 -= 12;
                  }
                  while (a6.n128_f32[0] > v165);
                  *(_OWORD *)(v163 + 7) = *(_OWORD *)&v243[12];
                  *(_OWORD *)float v163 = v210;
                  *((_OWORD *)v163 + 1) = *(_OWORD *)v243;
                  v163[11] = a6.n128_f32[0];
                }
                v145 += 12;
              }
              while ((float *)(a1 + 48) != a2);
            }
            return a6.n128_f64[0];
          }
          if (!a4)
          {
            if ((float *)v15 != a2)
            {
              sub_2194B5604((float *)v15, a2, a2);
            }
            return a6.n128_f64[0];
          }
          unint64_t v18 = v17 >> 1;
          uint64_t v19 = (__n128 *)(v15 + 48 * (v17 >> 1));
          float v20 = *(a2 - 1);
          if ((unint64_t)v16 >= 0x1801) {
            break;
          }
          float v25 = *(float *)(v15 + 44);
          uint64_t v26 = (float *)(v15 + 44 + 48 * v18);
          if (v25 > *v26)
          {
            if (v20 <= v25)
            {
              __n128 v223 = v19[1];
              __n128 v256 = v19[2];
              __n128 v194 = *v19;
              __n128 v59 = *(__n128 *)v15;
              __n128 v60 = *(__n128 *)(v15 + 32);
              v19[1] = *(__n128 *)(v15 + 16);
              v19[2] = v60;
              *uint64_t v19 = v59;
              a6 = v194;
              *(__n128 *)(v15 + 16) = v223;
              *(__n128 *)(v15 + 32) = v256;
              *(__n128 *)unint64_t v15 = v194;
              if (*(a2 - 1) <= *(float *)(v15 + 44)) {
                goto LABEL_32;
              }
              __n128 v215 = *(__n128 *)(v15 + 16);
              __n128 v249 = *(__n128 *)(v15 + 32);
              __n128 v187 = *(__n128 *)v15;
              __n128 v61 = *v12;
              long long v62 = *((_OWORD *)a2 - 1);
              *(_OWORD *)(v15 + 16) = *((_OWORD *)a2 - 2);
              *(_OWORD *)(v15 + 32) = v62;
              *(__n128 *)unint64_t v15 = v61;
            }
            else
            {
              __n128 v215 = v19[1];
              __n128 v249 = v19[2];
              __n128 v187 = *v19;
              __n128 v27 = *v12;
              __n128 v28 = *(__n128 *)(a2 - 4);
              v19[1] = *(__n128 *)(a2 - 8);
              v19[2] = v28;
              *uint64_t v19 = v27;
            }
            a6 = v187;
            *((__n128 *)a2 - 2) = v215;
            *((__n128 *)a2 - 1) = v249;
            __n128 *v12 = v187;
LABEL_32:
            --a4;
            if ((a5 & 1) == 0) {
              goto LABEL_56;
            }
            goto LABEL_33;
          }
          if (v20 <= v25) {
            goto LABEL_32;
          }
          long long v218 = *(_OWORD *)(v15 + 16);
          __n128 v252 = *(__n128 *)(v15 + 32);
          __n128 v190 = *(__n128 *)v15;
          __n128 v33 = *v12;
          long long v34 = *((_OWORD *)a2 - 1);
          *(_OWORD *)(v15 + 16) = *((_OWORD *)a2 - 2);
          *(_OWORD *)(v15 + 32) = v34;
          *(__n128 *)unint64_t v15 = v33;
          a6 = v190;
          *((_OWORD *)a2 - 2) = v218;
          *((__n128 *)a2 - 1) = v252;
          __n128 *v12 = v190;
          if (*(float *)(v15 + 44) <= *v26) {
            goto LABEL_32;
          }
          __n128 v219 = v19[1];
          __n128 v253 = v19[2];
          __n128 v191 = *v19;
          __n128 v35 = *(__n128 *)v15;
          __n128 v36 = *(__n128 *)(v15 + 32);
          v19[1] = *(__n128 *)(v15 + 16);
          v19[2] = v36;
          *uint64_t v19 = v35;
          a6 = v191;
          *(__n128 *)(v15 + 16) = v219;
          *(__n128 *)(v15 + 32) = v253;
          *(__n128 *)unint64_t v15 = v191;
          --a4;
          if (a5) {
            goto LABEL_33;
          }
LABEL_56:
          a6.n128_u32[0] = *(_DWORD *)(v15 + 44);
          if (*(float *)(v15 - 4) > a6.n128_f32[0]) {
            goto LABEL_57;
          }
          *(_OWORD *)&v185[12] = *(_OWORD *)(v15 + 28);
          __n128 v183 = *(__n128 *)v15;
          *(_OWORD *)float v185 = *(_OWORD *)(v15 + 16);
          if (a6.n128_f32[0] <= *(a2 - 1))
          {
            unint64_t v122 = v15 + 48;
            do
            {
              unint64_t v15 = v122;
              if (v122 >= (unint64_t)a2) {
                break;
              }
              float v123 = *(float *)(v122 + 44);
              v122 += 48;
            }
            while (a6.n128_f32[0] <= v123);
          }
          else
          {
            unint64_t v120 = v15;
            do
            {
              unint64_t v15 = v120 + 48;
              float v121 = *(float *)(v120 + 92);
              v120 += 48;
            }
            while (a6.n128_f32[0] <= v121);
          }
          int v124 = a2;
          if (v15 < (unint64_t)a2)
          {
            int v125 = a2;
            do
            {
              int v124 = v125 - 12;
              float v126 = *(v125 - 1);
              v125 -= 12;
            }
            while (a6.n128_f32[0] > v126);
          }
          while (v15 < (unint64_t)v124)
          {
            long long v236 = *(_OWORD *)(v15 + 16);
            __n128 v266 = *(__n128 *)(v15 + 32);
            __n128 v204 = *(__n128 *)v15;
            long long v127 = *(_OWORD *)v124;
            long long v128 = *((_OWORD *)v124 + 2);
            *(_OWORD *)(v15 + 16) = *((_OWORD *)v124 + 1);
            *(_OWORD *)(v15 + 32) = v128;
            *(_OWORD *)unint64_t v15 = v127;
            *((_OWORD *)v124 + 1) = v236;
            *((__n128 *)v124 + 2) = v266;
            *(__n128 *)int v124 = v204;
            do
            {
              float v129 = *(float *)(v15 + 92);
              v15 += 48;
            }
            while (a6.n128_f32[0] <= v129);
            do
            {
              float v130 = *(v124 - 1);
              v124 -= 12;
            }
            while (a6.n128_f32[0] > v130);
          }
          float v131 = (__n128 *)(v15 - 48);
          BOOL v6 = v15 - 48 >= a1;
          BOOL v7 = v15 - 48 == a1;
          if (v15 - 48 != a1)
          {
            __n128 v132 = *v131;
            long long v133 = *(_OWORD *)(v15 - 16);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v15 - 32);
            *(_OWORD *)(a1 + 32) = v133;
            *(__n128 *)a1 = v132;
          }
          a5 = 0;
          *(_OWORD *)(v15 - 20) = *(_OWORD *)&v185[12];
          *float v131 = v183;
          *(_OWORD *)(v15 - 32) = *(_OWORD *)v185;
          *(_DWORD *)(v15 - 4) = a6.n128_u32[0];
        }
        uint64_t v21 = (float *)(v15 + 44 + 48 * v18);
        float v22 = *v21;
        if (*v21 <= *(float *)(v15 + 44))
        {
          if (v20 > v22)
          {
            __n128 v216 = v19[1];
            __n128 v250 = v19[2];
            __n128 v188 = *v19;
            __n128 v29 = *v12;
            __n128 v30 = *(__n128 *)(a2 - 4);
            v19[1] = *(__n128 *)(a2 - 8);
            v19[2] = v30;
            *uint64_t v19 = v29;
            *((__n128 *)a2 - 2) = v216;
            *((__n128 *)a2 - 1) = v250;
            __n128 *v12 = v188;
            if (*v21 > *(float *)(v15 + 44))
            {
              __n128 v217 = *(__n128 *)(v15 + 16);
              __n128 v251 = *(__n128 *)(v15 + 32);
              __n128 v189 = *(__n128 *)v15;
              __n128 v31 = *v19;
              __n128 v32 = v19[2];
              *(__n128 *)(v15 + 16) = v19[1];
              *(__n128 *)(v15 + 32) = v32;
              *(__n128 *)unint64_t v15 = v31;
              v19[1] = v217;
              v19[2] = v251;
              *uint64_t v19 = v189;
            }
          }
        }
        else
        {
          if (v20 <= v22)
          {
            __n128 v220 = *(__n128 *)(v15 + 16);
            __n128 v254 = *(__n128 *)(v15 + 32);
            __n128 v192 = *(__n128 *)v15;
            __n128 v37 = *v19;
            __n128 v38 = v19[2];
            *(__n128 *)(v15 + 16) = v19[1];
            *(__n128 *)(v15 + 32) = v38;
            *(__n128 *)unint64_t v15 = v37;
            v19[1] = v220;
            v19[2] = v254;
            *uint64_t v19 = v192;
            if (*(a2 - 1) <= *v21) {
              goto LABEL_23;
            }
            __n128 v214 = v19[1];
            __n128 v248 = v19[2];
            __n128 v186 = *v19;
            __n128 v39 = *v12;
            __n128 v40 = *(__n128 *)(a2 - 4);
            v19[1] = *(__n128 *)(a2 - 8);
            v19[2] = v40;
            *uint64_t v19 = v39;
          }
          else
          {
            __n128 v214 = *(__n128 *)(v15 + 16);
            __n128 v248 = *(__n128 *)(v15 + 32);
            __n128 v186 = *(__n128 *)v15;
            __n128 v23 = *v12;
            long long v24 = *((_OWORD *)a2 - 1);
            *(_OWORD *)(v15 + 16) = *((_OWORD *)a2 - 2);
            *(_OWORD *)(v15 + 32) = v24;
            *(__n128 *)unint64_t v15 = v23;
          }
          *((__n128 *)a2 - 2) = v214;
          *((__n128 *)a2 - 1) = v248;
          __n128 *v12 = v186;
        }
LABEL_23:
        size_t v41 = (long long *)(v15 + 48);
        unint64_t v42 = v15 + 48 * v18;
        float v44 = *(float *)(v42 - 4);
        float v43 = (float *)(v42 - 4);
        float v45 = v44;
        int v46 = v43 - 11;
        float v47 = *(a2 - 13);
        if (v44 <= *(float *)(v15 + 92))
        {
          if (v47 > v45)
          {
            long long v221 = *(_OWORD *)(v43 - 7);
            __n128 v255 = *(__n128 *)(v43 - 3);
            __n128 v193 = *(__n128 *)v46;
            long long v53 = *(_OWORD *)v13;
            long long v54 = *((_OWORD *)a2 - 4);
            *(_OWORD *)(v43 - 7) = *((_OWORD *)a2 - 5);
            *(_OWORD *)(v43 - 3) = v54;
            *(_OWORD *)int v46 = v53;
            *((_OWORD *)a2 - 5) = v221;
            *((__n128 *)a2 - 4) = v255;
            *(__n128 *)unint64_t v13 = v193;
            if (*v43 > *(float *)(v15 + 92))
            {
              long long v55 = *v41;
              long long v222 = *(_OWORD *)(v15 + 64);
              long long v56 = *(_OWORD *)(v15 + 80);
              __n128 v57 = *(__n128 *)v46;
              long long v58 = *(_OWORD *)(v43 - 3);
              *(_OWORD *)(v15 + 64) = *(_OWORD *)(v43 - 7);
              *(_OWORD *)(v15 + 80) = v58;
              *size_t v41 = (__int128)v57;
              *(_OWORD *)(v43 - 7) = v222;
              *(_OWORD *)(v43 - 3) = v56;
              *(_OWORD *)int v46 = v55;
            }
          }
        }
        else
        {
          if (v47 <= v45)
          {
            long long v63 = *v41;
            long long v224 = *(_OWORD *)(v15 + 64);
            long long v64 = *(_OWORD *)(v15 + 80);
            __n128 v65 = *(__n128 *)v46;
            long long v66 = *(_OWORD *)(v43 - 3);
            *(_OWORD *)(v15 + 64) = *(_OWORD *)(v43 - 7);
            *(_OWORD *)(v15 + 80) = v66;
            *size_t v41 = (__int128)v65;
            *(_OWORD *)(v43 - 7) = v224;
            *(_OWORD *)(v43 - 3) = v64;
            *(_OWORD *)int v46 = v63;
            if (*(a2 - 13) <= *v43) {
              goto LABEL_37;
            }
            long long v225 = *(_OWORD *)(v43 - 7);
            __n128 v257 = *(__n128 *)(v43 - 3);
            long long v195 = *(_OWORD *)v46;
            long long v67 = *(_OWORD *)v13;
            long long v68 = *((_OWORD *)a2 - 4);
            *(_OWORD *)(v43 - 7) = *((_OWORD *)a2 - 5);
            *(_OWORD *)(v43 - 3) = v68;
            *(_OWORD *)int v46 = v67;
            long long v48 = v195;
            long long v49 = v225;
            __n128 v50 = v257;
          }
          else
          {
            long long v48 = *v41;
            long long v49 = *(_OWORD *)(v15 + 64);
            __n128 v50 = *(__n128 *)(v15 + 80);
            long long v51 = *(_OWORD *)v13;
            long long v52 = *((_OWORD *)a2 - 4);
            *(_OWORD *)(v15 + 64) = *((_OWORD *)a2 - 5);
            *(_OWORD *)(v15 + 80) = v52;
            *size_t v41 = v51;
          }
          *((_OWORD *)a2 - 5) = v49;
          *((__n128 *)a2 - 4) = v50;
          *(_OWORD *)unint64_t v13 = v48;
        }
LABEL_37:
        uint64_t v69 = (long long *)(v15 + 96);
        unint64_t v70 = v15 + 48 * v18;
        float v72 = *(float *)(v70 + 92);
        unint64_t v71 = (float *)(v70 + 92);
        float v73 = v72;
        unint64_t v74 = v71 - 11;
        float v75 = *(a2 - 25);
        if (v72 <= *(float *)(v15 + 140))
        {
          if (v75 > v73)
          {
            long long v226 = *(_OWORD *)(v71 - 7);
            __n128 v258 = *(__n128 *)(v71 - 3);
            __n128 v196 = *(__n128 *)v74;
            long long v81 = *(_OWORD *)v14;
            long long v82 = *((_OWORD *)a2 - 7);
            *(_OWORD *)(v71 - 7) = *((_OWORD *)a2 - 8);
            *(_OWORD *)(v71 - 3) = v82;
            *(_OWORD *)unint64_t v74 = v81;
            *((_OWORD *)a2 - 8) = v226;
            *((__n128 *)a2 - 7) = v258;
            *(__n128 *)uint64_t v14 = v196;
            if (*v71 > *(float *)(v15 + 140))
            {
              long long v83 = *v69;
              long long v227 = *(_OWORD *)(v15 + 112);
              long long v84 = *(_OWORD *)(v15 + 128);
              __n128 v85 = *(__n128 *)v74;
              long long v86 = *(_OWORD *)(v71 - 3);
              *(_OWORD *)(v15 + 112) = *(_OWORD *)(v71 - 7);
              *(_OWORD *)(v15 + 128) = v86;
              *uint64_t v69 = (__int128)v85;
              *(_OWORD *)(v71 - 7) = v227;
              *(_OWORD *)(v71 - 3) = v84;
              *(_OWORD *)unint64_t v74 = v83;
            }
          }
        }
        else
        {
          if (v75 <= v73)
          {
            long long v87 = *v69;
            long long v228 = *(_OWORD *)(v15 + 112);
            long long v88 = *(_OWORD *)(v15 + 128);
            __n128 v89 = *(__n128 *)v74;
            long long v90 = *(_OWORD *)(v71 - 3);
            *(_OWORD *)(v15 + 112) = *(_OWORD *)(v71 - 7);
            *(_OWORD *)(v15 + 128) = v90;
            *uint64_t v69 = (__int128)v89;
            *(_OWORD *)(v71 - 7) = v228;
            *(_OWORD *)(v71 - 3) = v88;
            *(_OWORD *)unint64_t v74 = v87;
            if (*(a2 - 25) <= *v71) {
              goto LABEL_46;
            }
            long long v229 = *(_OWORD *)(v71 - 7);
            __n128 v259 = *(__n128 *)(v71 - 3);
            long long v197 = *(_OWORD *)v74;
            long long v91 = *(_OWORD *)v14;
            long long v92 = *((_OWORD *)a2 - 7);
            *(_OWORD *)(v71 - 7) = *((_OWORD *)a2 - 8);
            *(_OWORD *)(v71 - 3) = v92;
            *(_OWORD *)unint64_t v74 = v91;
            long long v76 = v197;
            long long v77 = v229;
            __n128 v78 = v259;
          }
          else
          {
            long long v76 = *v69;
            long long v77 = *(_OWORD *)(v15 + 112);
            __n128 v78 = *(__n128 *)(v15 + 128);
            long long v79 = *(_OWORD *)v14;
            long long v80 = *((_OWORD *)a2 - 7);
            *(_OWORD *)(v15 + 112) = *((_OWORD *)a2 - 8);
            *(_OWORD *)(v15 + 128) = v80;
            *uint64_t v69 = v79;
          }
          *((_OWORD *)a2 - 8) = v77;
          *((__n128 *)a2 - 7) = v78;
          *(_OWORD *)uint64_t v14 = v76;
        }
LABEL_46:
        float v93 = *v21;
        float v94 = *v71;
        if (*v21 <= *v43)
        {
          if (v94 > v93)
          {
            __n128 v231 = v19[1];
            __n128 v261 = v19[2];
            __n128 v199 = *v19;
            __n128 v96 = *(__n128 *)(v71 - 7);
            *uint64_t v19 = *(__n128 *)v74;
            v19[1] = v96;
            v19[2] = *(__n128 *)(v71 - 3);
            *(__n128 *)(v71 - 7) = v231;
            *(__n128 *)(v71 - 3) = v261;
            *(__n128 *)unint64_t v74 = v199;
            if (*v21 > *v43)
            {
              __n128 v232 = *(__n128 *)(v43 - 7);
              __n128 v262 = *(__n128 *)(v43 - 3);
              __n128 v200 = *(__n128 *)v46;
              __n128 v97 = v19[1];
              *(__n128 *)int v46 = *v19;
              *(__n128 *)(v43 - 7) = v97;
              *(__n128 *)(v43 - 3) = v19[2];
              v19[1] = v232;
              v19[2] = v262;
              *uint64_t v19 = v200;
            }
          }
        }
        else
        {
          if (v94 <= v93)
          {
            __n128 v233 = *(__n128 *)(v43 - 7);
            __n128 v263 = *(__n128 *)(v43 - 3);
            __n128 v201 = *(__n128 *)v46;
            __n128 v98 = v19[1];
            *(__n128 *)int v46 = *v19;
            *(__n128 *)(v43 - 7) = v98;
            *(__n128 *)(v43 - 3) = v19[2];
            v19[1] = v233;
            v19[2] = v263;
            *uint64_t v19 = v201;
            if (*v71 <= *v21) {
              goto LABEL_55;
            }
            __n128 v230 = v19[1];
            __n128 v260 = v19[2];
            __n128 v198 = *v19;
            __n128 v99 = *(__n128 *)(v71 - 7);
            *uint64_t v19 = *(__n128 *)v74;
            v19[1] = v99;
            v19[2] = *(__n128 *)(v71 - 3);
          }
          else
          {
            __n128 v230 = *(__n128 *)(v43 - 7);
            __n128 v260 = *(__n128 *)(v43 - 3);
            __n128 v198 = *(__n128 *)v46;
            long long v95 = *(_OWORD *)(v71 - 7);
            *(_OWORD *)int v46 = *(_OWORD *)v74;
            *(_OWORD *)(v43 - 7) = v95;
            *(_OWORD *)(v43 - 3) = *(_OWORD *)(v71 - 3);
          }
          *(__n128 *)(v71 - 7) = v230;
          *(__n128 *)(v71 - 3) = v260;
          *(__n128 *)unint64_t v74 = v198;
        }
LABEL_55:
        __n128 v234 = *(__n128 *)(v15 + 16);
        __n128 v264 = *(__n128 *)(v15 + 32);
        __n128 v202 = *(__n128 *)v15;
        __n128 v100 = *v19;
        __n128 v101 = v19[2];
        *(__n128 *)(v15 + 16) = v19[1];
        *(__n128 *)(v15 + 32) = v101;
        *(__n128 *)unint64_t v15 = v100;
        a6 = v202;
        v19[1] = v234;
        v19[2] = v264;
        *uint64_t v19 = v202;
        --a4;
        if ((a5 & 1) == 0) {
          goto LABEL_56;
        }
LABEL_33:
        a6.n128_u32[0] = *(_DWORD *)(v15 + 44);
LABEL_57:
        uint64_t v102 = 0;
        *(_OWORD *)&v184[12] = *(_OWORD *)(v15 + 28);
        __n128 v182 = *(__n128 *)v15;
        *(_OWORD *)uint64_t v184 = *(_OWORD *)(v15 + 16);
        do
        {
          float v103 = *(float *)(v15 + v102 + 92);
          v102 += 48;
        }
        while (v103 > a6.n128_f32[0]);
        unint64_t v104 = v15 + v102;
        long long v105 = a2;
        if (v102 == 48)
        {
          uint64_t v108 = a2;
          while (v104 < (unint64_t)v108)
          {
            char v106 = v108 - 12;
            float v109 = *(v108 - 1);
            v108 -= 12;
            if (v109 > a6.n128_f32[0]) {
              goto LABEL_65;
            }
          }
          char v106 = v108;
          unint64_t v15 = v104;
        }
        else
        {
          do
          {
            char v106 = v105 - 12;
            float v107 = *(v105 - 1);
            v105 -= 12;
          }
          while (v107 <= a6.n128_f32[0]);
LABEL_65:
          unint64_t v15 = v104;
          if (v104 < (unint64_t)v106)
          {
            uint64_t v110 = v106;
            do
            {
              long long v235 = *(_OWORD *)(v15 + 16);
              __n128 v265 = *(__n128 *)(v15 + 32);
              __n128 v203 = *(__n128 *)v15;
              long long v111 = *(_OWORD *)v110;
              long long v112 = *((_OWORD *)v110 + 2);
              *(_OWORD *)(v15 + 16) = *((_OWORD *)v110 + 1);
              *(_OWORD *)(v15 + 32) = v112;
              *(_OWORD *)unint64_t v15 = v111;
              *((_OWORD *)v110 + 1) = v235;
              *((__n128 *)v110 + 2) = v265;
              *(__n128 *)uint64_t v110 = v203;
              do
              {
                float v113 = *(float *)(v15 + 92);
                v15 += 48;
              }
              while (v113 > a6.n128_f32[0]);
              do
              {
                float v114 = *(v110 - 1);
                v110 -= 12;
              }
              while (v114 <= a6.n128_f32[0]);
            }
            while (v15 < (unint64_t)v110);
          }
        }
        float v115 = (__n128 *)(v15 - 48);
        if (v15 - 48 != a1)
        {
          __n128 v116 = *v115;
          long long v117 = *(_OWORD *)(v15 - 16);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(v15 - 32);
          *(_OWORD *)(a1 + 32) = v117;
          *(__n128 *)a1 = v116;
        }
        *(_OWORD *)(v15 - 20) = *(_OWORD *)&v184[12];
        *float v115 = v182;
        *(_OWORD *)(v15 - 32) = *(_OWORD *)v184;
        *(_DWORD *)(v15 - 4) = a6.n128_u32[0];
        if (v104 >= (unint64_t)v106) {
          break;
        }
LABEL_76:
        sub_2194B3FF8(a1, v15 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v118 = sub_2194B4E6C(a1, v15 - 48, a6);
      if (sub_2194B4E6C(v15, (uint64_t)a2, v119)) {
        break;
      }
      if (!v118) {
        goto LABEL_76;
      }
    }
    a2 = (float *)(v15 - 48);
    if (!v118) {
      continue;
    }
    return a6.n128_f64[0];
  }
}

BOOL sub_2194B4E6C(uint64_t a1, uint64_t a2, __n128 a3)
{
  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      if (*(float *)(a2 - 4) <= *(float *)(a1 + 44)) {
        return 1;
      }
      long long v13 = *(_OWORD *)a1;
      long long v14 = *(_OWORD *)(a1 + 16);
      long long v15 = *(_OWORD *)(a1 + 32);
      long long v17 = *(_OWORD *)(a2 - 32);
      long long v16 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
      *(_OWORD *)(a1 + 16) = v17;
      *(_OWORD *)(a1 + 32) = v16;
      *(_OWORD *)(a2 - 32) = v14;
      *(_OWORD *)(a2 - 16) = v15;
      *(_OWORD *)(a2 - 48) = v13;
      return 1;
    case 3uLL:
      unint64_t v18 = (long long *)(a1 + 48);
      uint64_t v19 = (long long *)(a2 - 48);
      float v20 = *(float *)(a1 + 92);
      float v21 = *(float *)(a2 - 4);
      if (v20 <= *(float *)(a1 + 44))
      {
        if (v21 > v20)
        {
          long long v43 = *v18;
          long long v44 = *(_OWORD *)(a1 + 64);
          long long v45 = *(_OWORD *)(a1 + 80);
          long long v47 = *(_OWORD *)(a2 - 32);
          long long v46 = *(_OWORD *)(a2 - 16);
          *unint64_t v18 = *v19;
          *(_OWORD *)(a1 + 64) = v47;
          *(_OWORD *)(a1 + 80) = v46;
          *(_OWORD *)(a2 - 32) = v44;
          *(_OWORD *)(a2 - 16) = v45;
          *uint64_t v19 = v43;
          if (*(float *)(a1 + 92) > *(float *)(a1 + 44))
          {
LABEL_20:
            long long v49 = *(_OWORD *)(a1 + 16);
            long long v48 = *(_OWORD *)(a1 + 32);
            long long v50 = *(_OWORD *)a1;
            long long v51 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)a1 = *v18;
            *(_OWORD *)(a1 + 16) = v51;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
            *unint64_t v18 = v50;
            *(_OWORD *)(a1 + 64) = v49;
            *(_OWORD *)(a1 + 80) = v48;
            return 1;
          }
        }
        return 1;
      }
      if (v21 <= v20)
      {
        long long v74 = *(_OWORD *)(a1 + 16);
        long long v73 = *(_OWORD *)(a1 + 32);
        long long v75 = *(_OWORD *)a1;
        long long v76 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)a1 = *v18;
        *(_OWORD *)(a1 + 16) = v76;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
        *unint64_t v18 = v75;
        *(_OWORD *)(a1 + 64) = v74;
        *(_OWORD *)(a1 + 80) = v73;
        if (*(float *)(a2 - 4) > *(float *)(a1 + 92))
        {
          long long v22 = *v18;
          long long v23 = *(_OWORD *)(a1 + 64);
          long long v24 = *(_OWORD *)(a1 + 80);
          long long v78 = *(_OWORD *)(a2 - 32);
          long long v77 = *(_OWORD *)(a2 - 16);
          *unint64_t v18 = *v19;
          *(_OWORD *)(a1 + 64) = v78;
          *(_OWORD *)(a1 + 80) = v77;
          goto LABEL_39;
        }
        return 1;
      }
      long long v22 = *(_OWORD *)a1;
      long long v23 = *(_OWORD *)(a1 + 16);
      long long v24 = *(_OWORD *)(a1 + 32);
      long long v26 = *(_OWORD *)(a2 - 32);
      long long v25 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)a1 = *v19;
      *(_OWORD *)(a1 + 16) = v26;
      *(_OWORD *)(a1 + 32) = v25;
LABEL_39:
      *(_OWORD *)(a2 - 32) = v23;
      *(_OWORD *)(a2 - 16) = v24;
      *uint64_t v19 = v22;
      return 1;
    case 4uLL:
      unint64_t v18 = (long long *)(a1 + 48);
      __n128 v27 = (long long *)(a1 + 96);
      float v28 = *(float *)(a1 + 92);
      float v29 = *(float *)(a1 + 44);
      float v30 = *(float *)(a1 + 140);
      if (v28 <= v29)
      {
        if (v30 > v28)
        {
          long long v53 = *(_OWORD *)(a1 + 64);
          long long v52 = *(_OWORD *)(a1 + 80);
          long long v54 = *v18;
          long long v55 = *(_OWORD *)(a1 + 112);
          *unint64_t v18 = *v27;
          *(_OWORD *)(a1 + 64) = v55;
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
          *__n128 v27 = v54;
          *(_OWORD *)(a1 + 112) = v53;
          *(_OWORD *)(a1 + 128) = v52;
          if (*(float *)(a1 + 92) > v29)
          {
            long long v57 = *(_OWORD *)(a1 + 16);
            long long v56 = *(_OWORD *)(a1 + 32);
            long long v58 = *(_OWORD *)a1;
            long long v59 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)a1 = *v18;
            *(_OWORD *)(a1 + 16) = v59;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
            *unint64_t v18 = v58;
            *(_OWORD *)(a1 + 64) = v57;
            *(_OWORD *)(a1 + 80) = v56;
          }
        }
      }
      else
      {
        if (v30 <= v28)
        {
          long long v80 = *(_OWORD *)(a1 + 16);
          long long v79 = *(_OWORD *)(a1 + 32);
          long long v81 = *(_OWORD *)a1;
          long long v82 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)a1 = *v18;
          *(_OWORD *)(a1 + 16) = v82;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
          *unint64_t v18 = v81;
          *(_OWORD *)(a1 + 64) = v80;
          *(_OWORD *)(a1 + 80) = v79;
          if (v30 <= *(float *)(a1 + 92)) {
            goto LABEL_43;
          }
          long long v32 = *(_OWORD *)(a1 + 64);
          long long v31 = *(_OWORD *)(a1 + 80);
          long long v33 = *v18;
          long long v83 = *(_OWORD *)(a1 + 112);
          *unint64_t v18 = *v27;
          *(_OWORD *)(a1 + 64) = v83;
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
        }
        else
        {
          long long v32 = *(_OWORD *)(a1 + 16);
          long long v31 = *(_OWORD *)(a1 + 32);
          long long v33 = *(_OWORD *)a1;
          long long v34 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)a1 = *v27;
          *(_OWORD *)(a1 + 16) = v34;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 128);
        }
        *__n128 v27 = v33;
        *(_OWORD *)(a1 + 112) = v32;
        *(_OWORD *)(a1 + 128) = v31;
      }
LABEL_43:
      if (*(float *)(a2 - 4) <= *(float *)(a1 + 140)) {
        return 1;
      }
      long long v84 = (_OWORD *)(a2 - 48);
      long long v85 = *v27;
      long long v86 = *(_OWORD *)(a1 + 112);
      long long v87 = *(_OWORD *)(a1 + 128);
      long long v89 = *(_OWORD *)(a2 - 32);
      long long v88 = *(_OWORD *)(a2 - 16);
      *__n128 v27 = *(_OWORD *)(a2 - 48);
      *(_OWORD *)(a1 + 112) = v89;
      *(_OWORD *)(a1 + 128) = v88;
      v84[1] = v86;
      v84[2] = v87;
      _OWORD *v84 = v85;
      if (*(float *)(a1 + 140) <= *(float *)(a1 + 92)) {
        return 1;
      }
      long long v91 = *(_OWORD *)(a1 + 64);
      long long v90 = *(_OWORD *)(a1 + 80);
      long long v92 = *v18;
      long long v93 = *(_OWORD *)(a1 + 112);
      *unint64_t v18 = *v27;
      *(_OWORD *)(a1 + 64) = v93;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
      *__n128 v27 = v92;
      *(_OWORD *)(a1 + 112) = v91;
      *(_OWORD *)(a1 + 128) = v90;
      if (*(float *)(a1 + 92) <= *(float *)(a1 + 44)) {
        return 1;
      }
      goto LABEL_20;
    case 5uLL:
      sub_2194B53BC(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v4 = a1 + 96;
      uint64_t v5 = (long long *)(a1 + 48);
      float v6 = *(float *)(a1 + 92);
      float v7 = *(float *)(a1 + 44);
      float v8 = *(float *)(a1 + 140);
      if (v6 <= v7)
      {
        if (v8 > v6)
        {
          long long v36 = *(_OWORD *)(a1 + 64);
          long long v35 = *(_OWORD *)(a1 + 80);
          long long v37 = *v5;
          long long v38 = *(_OWORD *)(a1 + 112);
          long long *v5 = *(_OWORD *)v4;
          *(_OWORD *)(a1 + 64) = v38;
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
          *(_OWORD *)uint64_t v4 = v37;
          *(_OWORD *)(a1 + 112) = v36;
          *(_OWORD *)(a1 + 128) = v35;
          if (*(float *)(a1 + 92) > v7)
          {
            long long v40 = *(_OWORD *)(a1 + 16);
            long long v39 = *(_OWORD *)(a1 + 32);
            long long v41 = *(_OWORD *)a1;
            long long v42 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)a1 = *v5;
            *(_OWORD *)(a1 + 16) = v42;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
            long long *v5 = v41;
            *(_OWORD *)(a1 + 64) = v40;
            *(_OWORD *)(a1 + 80) = v39;
          }
        }
      }
      else
      {
        if (v8 <= v6)
        {
          long long v61 = *(_OWORD *)(a1 + 16);
          long long v60 = *(_OWORD *)(a1 + 32);
          long long v62 = *(_OWORD *)a1;
          long long v63 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)a1 = *v5;
          *(_OWORD *)(a1 + 16) = v63;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
          long long *v5 = v62;
          *(_OWORD *)(a1 + 64) = v61;
          *(_OWORD *)(a1 + 80) = v60;
          if (v8 <= *(float *)(a1 + 92)) {
            goto LABEL_27;
          }
          long long v10 = *(_OWORD *)(a1 + 64);
          long long v9 = *(_OWORD *)(a1 + 80);
          long long v11 = *v5;
          long long v64 = *(_OWORD *)(a1 + 112);
          long long *v5 = *(_OWORD *)v4;
          *(_OWORD *)(a1 + 64) = v64;
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
        }
        else
        {
          long long v10 = *(_OWORD *)(a1 + 16);
          long long v9 = *(_OWORD *)(a1 + 32);
          long long v11 = *(_OWORD *)a1;
          long long v12 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)a1 = *(_OWORD *)v4;
          *(_OWORD *)(a1 + 16) = v12;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 128);
        }
        *(_OWORD *)uint64_t v4 = v11;
        *(_OWORD *)(a1 + 112) = v10;
        *(_OWORD *)(a1 + 128) = v9;
      }
LABEL_27:
      uint64_t v65 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v66 = 0;
      int v67 = 0;
      while (1)
      {
        float v69 = *(float *)(v65 + 44);
        if (v69 > *(float *)(v4 + 44))
        {
          long long v94 = *(_OWORD *)v65;
          *(_OWORD *)long long v95 = *(_OWORD *)(v65 + 16);
          *(_OWORD *)&v95[12] = *(_OWORD *)(v65 + 28);
          uint64_t v70 = v66;
          do
          {
            uint64_t v71 = a1 + v70;
            long long v72 = *(_OWORD *)(a1 + v70 + 112);
            *(_OWORD *)(v71 + 144) = *(_OWORD *)(a1 + v70 + 96);
            *(_OWORD *)(v71 + 160) = v72;
            *(_OWORD *)(v71 + 176) = *(_OWORD *)(a1 + v70 + 128);
            if (v70 == -96)
            {
              uint64_t v68 = a1;
              goto LABEL_30;
            }
            v70 -= 48;
          }
          while (v69 > *(float *)(v71 + 92));
          uint64_t v68 = a1 + v70 + 144;
LABEL_30:
          *(_OWORD *)uint64_t v68 = v94;
          *(_OWORD *)(v68 + 16) = *(_OWORD *)v95;
          *(_OWORD *)(v68 + 28) = *(_OWORD *)&v95[12];
          *(float *)(v68 + 44) = v69;
          if (++v67 == 8) {
            return v65 + 48 == a2;
          }
        }
        uint64_t v4 = v65;
        v66 += 48;
        v65 += 48;
        if (v65 == a2) {
          return 1;
        }
      }
  }
}

__n128 sub_2194B53BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  float v6 = *(float *)(a2 + 44);
  float v7 = *(float *)(a3 + 44);
  if (v6 <= *(float *)(a1 + 44))
  {
    if (v7 > v6)
    {
      uint64_t result = *(__n128 *)a2;
      long long v12 = *(_OWORD *)(a2 + 16);
      long long v13 = *(_OWORD *)(a2 + 32);
      long long v15 = *(_OWORD *)(a3 + 16);
      long long v14 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v15;
      *(_OWORD *)(a2 + 32) = v14;
      *(_OWORD *)(a3 + 16) = v12;
      *(_OWORD *)(a3 + 32) = v13;
      *(__n128 *)a3 = result;
      if (*(float *)(a2 + 44) > *(float *)(a1 + 44))
      {
        uint64_t result = *(__n128 *)a1;
        long long v16 = *(_OWORD *)(a1 + 16);
        long long v17 = *(_OWORD *)(a1 + 32);
        long long v19 = *(_OWORD *)(a2 + 16);
        long long v18 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v19;
        *(_OWORD *)(a1 + 32) = v18;
        *(_OWORD *)(a2 + 16) = v16;
        *(_OWORD *)(a2 + 32) = v17;
        *(__n128 *)a2 = result;
      }
    }
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = *(__n128 *)a1;
      long long v8 = *(_OWORD *)(a1 + 16);
      long long v9 = *(_OWORD *)(a1 + 32);
      long long v11 = *(_OWORD *)(a3 + 16);
      long long v10 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v11;
      *(_OWORD *)(a1 + 32) = v10;
LABEL_9:
      *(_OWORD *)(a3 + 16) = v8;
      *(_OWORD *)(a3 + 32) = v9;
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    uint64_t result = *(__n128 *)a1;
    long long v20 = *(_OWORD *)(a1 + 16);
    long long v21 = *(_OWORD *)(a1 + 32);
    long long v23 = *(_OWORD *)(a2 + 16);
    long long v22 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v23;
    *(_OWORD *)(a1 + 32) = v22;
    *(_OWORD *)(a2 + 16) = v20;
    *(_OWORD *)(a2 + 32) = v21;
    *(__n128 *)a2 = result;
    if (*(float *)(a3 + 44) > *(float *)(a2 + 44))
    {
      uint64_t result = *(__n128 *)a2;
      long long v8 = *(_OWORD *)(a2 + 16);
      long long v9 = *(_OWORD *)(a2 + 32);
      long long v25 = *(_OWORD *)(a3 + 16);
      long long v24 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v25;
      *(_OWORD *)(a2 + 32) = v24;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(float *)(a4 + 44) > *(float *)(a3 + 44))
  {
    uint64_t result = *(__n128 *)a3;
    long long v26 = *(_OWORD *)(a3 + 16);
    long long v27 = *(_OWORD *)(a3 + 32);
    long long v29 = *(_OWORD *)(a4 + 16);
    long long v28 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v29;
    *(_OWORD *)(a3 + 32) = v28;
    *(_OWORD *)(a4 + 16) = v26;
    *(_OWORD *)(a4 + 32) = v27;
    *(__n128 *)a4 = result;
    if (*(float *)(a3 + 44) > *(float *)(a2 + 44))
    {
      uint64_t result = *(__n128 *)a2;
      long long v30 = *(_OWORD *)(a2 + 16);
      long long v31 = *(_OWORD *)(a2 + 32);
      long long v33 = *(_OWORD *)(a3 + 16);
      long long v32 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v33;
      *(_OWORD *)(a2 + 32) = v32;
      *(_OWORD *)(a3 + 16) = v30;
      *(_OWORD *)(a3 + 32) = v31;
      *(__n128 *)a3 = result;
      if (*(float *)(a2 + 44) > *(float *)(a1 + 44))
      {
        uint64_t result = *(__n128 *)a1;
        long long v34 = *(_OWORD *)(a1 + 16);
        long long v35 = *(_OWORD *)(a1 + 32);
        long long v37 = *(_OWORD *)(a2 + 16);
        long long v36 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v37;
        *(_OWORD *)(a1 + 32) = v36;
        *(_OWORD *)(a2 + 16) = v34;
        *(_OWORD *)(a2 + 32) = v35;
        *(__n128 *)a2 = result;
      }
    }
  }
  result.n128_u32[0] = *(_DWORD *)(a5 + 44);
  if (result.n128_f32[0] > *(float *)(a4 + 44))
  {
    uint64_t result = *(__n128 *)a4;
    long long v38 = *(_OWORD *)(a4 + 16);
    long long v39 = *(_OWORD *)(a4 + 32);
    long long v41 = *(_OWORD *)(a5 + 16);
    long long v40 = *(_OWORD *)(a5 + 32);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v41;
    *(_OWORD *)(a4 + 32) = v40;
    *(_OWORD *)(a5 + 16) = v38;
    *(_OWORD *)(a5 + 32) = v39;
    *(__n128 *)a5 = result;
    result.n128_u32[0] = *(_DWORD *)(a4 + 44);
    if (result.n128_f32[0] > *(float *)(a3 + 44))
    {
      uint64_t result = *(__n128 *)a3;
      long long v42 = *(_OWORD *)(a3 + 16);
      long long v43 = *(_OWORD *)(a3 + 32);
      long long v45 = *(_OWORD *)(a4 + 16);
      long long v44 = *(_OWORD *)(a4 + 32);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v45;
      *(_OWORD *)(a3 + 32) = v44;
      *(_OWORD *)(a4 + 16) = v42;
      *(_OWORD *)(a4 + 32) = v43;
      *(__n128 *)a4 = result;
      result.n128_u32[0] = *(_DWORD *)(a3 + 44);
      if (result.n128_f32[0] > *(float *)(a2 + 44))
      {
        uint64_t result = *(__n128 *)a2;
        long long v46 = *(_OWORD *)(a2 + 16);
        long long v47 = *(_OWORD *)(a2 + 32);
        long long v49 = *(_OWORD *)(a3 + 16);
        long long v48 = *(_OWORD *)(a3 + 32);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v49;
        *(_OWORD *)(a2 + 32) = v48;
        *(_OWORD *)(a3 + 16) = v46;
        *(_OWORD *)(a3 + 32) = v47;
        *(__n128 *)a3 = result;
        result.n128_u32[0] = *(_DWORD *)(a2 + 44);
        if (result.n128_f32[0] > *(float *)(a1 + 44))
        {
          uint64_t result = *(__n128 *)a1;
          long long v50 = *(_OWORD *)(a1 + 16);
          long long v51 = *(_OWORD *)(a1 + 32);
          long long v53 = *(_OWORD *)(a2 + 16);
          long long v52 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v53;
          *(_OWORD *)(a1 + 32) = v52;
          *(_OWORD *)(a2 + 16) = v50;
          *(_OWORD *)(a2 + 32) = v51;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

float *sub_2194B5604(float *a1, float *a2, float *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = (char *)a2 - (char *)a1;
  uint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 4);
  if ((char *)a2 - (char *)a1 >= 49 && (unint64_t)v3 >= 0x60)
  {
    int64_t v46 = (unint64_t)(v4 - 2) >> 1;
    int64_t v47 = v46;
    do
    {
      if (v46 >= v47)
      {
        uint64_t v48 = (2 * v47) | 1;
        long long v49 = (long long *)&a1[12 * v48];
        if (2 * v47 + 2 < v4 && a1[12 * v48 + 11] > *((float *)v49 + 23))
        {
          v49 += 3;
          uint64_t v48 = 2 * v47 + 2;
        }
        float v50 = a1[12 * v47 + 11];
        if (*((float *)v49 + 11) <= v50)
        {
          long long v51 = (long long *)&a1[12 * v47];
          long long v59 = *v51;
          *(_OWORD *)long long v62 = v51[1];
          *(_OWORD *)&v62[12] = *(long long *)((char *)v51 + 28);
          do
          {
            long long v52 = v51;
            long long v51 = v49;
            long long v53 = *v49;
            long long v54 = v49[2];
            v52[1] = v49[1];
            v52[2] = v54;
            *long long v52 = v53;
            if (v46 < v48) {
              break;
            }
            uint64_t v55 = (2 * v48) | 1;
            long long v49 = (long long *)&a1[12 * v55];
            uint64_t v56 = 2 * v48 + 2;
            if (v56 < v4 && a1[12 * v55 + 11] > *((float *)v49 + 23))
            {
              v49 += 3;
              uint64_t v55 = v56;
            }
            uint64_t v48 = v55;
          }
          while (*((float *)v49 + 11) <= v50);
          *(long long *)((char *)v51 + 28) = *(_OWORD *)&v62[12];
          *long long v51 = v59;
          v51[1] = *(_OWORD *)v62;
          *((float *)v51 + 11) = v50;
        }
      }
      BOOL v28 = v47-- <= 0;
    }
    while (!v28);
  }
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 96)
    {
      float v6 = a2;
      do
      {
        if (v6[11] > a1[11])
        {
          long long v7 = *(_OWORD *)v6;
          long long v8 = *((_OWORD *)v6 + 1);
          long long v9 = *((_OWORD *)v6 + 2);
          long long v11 = *((_OWORD *)a1 + 1);
          long long v10 = *((_OWORD *)a1 + 2);
          *(_OWORD *)float v6 = *(_OWORD *)a1;
          *((_OWORD *)v6 + 1) = v11;
          *((_OWORD *)v6 + 2) = v10;
          *((_OWORD *)a1 + 1) = v8;
          *((_OWORD *)a1 + 2) = v9;
          *(_OWORD *)a1 = v7;
        }
        v6 += 12;
      }
      while (v6 != a3);
LABEL_25:
      uint64_t v5 = a3;
      goto LABEL_26;
    }
    long long v12 = a2;
    while (1)
    {
      if (v12[11] > a1[11])
      {
        long long v13 = *(_OWORD *)v12;
        long long v14 = *((_OWORD *)v12 + 1);
        long long v15 = *((_OWORD *)v12 + 2);
        long long v17 = *((_OWORD *)a1 + 1);
        long long v16 = *((_OWORD *)a1 + 2);
        *(_OWORD *)long long v12 = *(_OWORD *)a1;
        *((_OWORD *)v12 + 1) = v17;
        *((_OWORD *)v12 + 2) = v16;
        *((_OWORD *)a1 + 1) = v14;
        *((_OWORD *)a1 + 2) = v15;
        *(_OWORD *)a1 = v13;
        if ((unint64_t)v4 < 3 || a1[23] <= a1[35])
        {
          long long v18 = a1 + 12;
          int64_t v19 = 1;
          float v20 = a1[11];
          if (a1[23] <= v20)
          {
LABEL_19:
            long long v57 = *(_OWORD *)a1;
            *(_OWORD *)long long v60 = *((_OWORD *)a1 + 1);
            *(_OWORD *)&v60[12] = *(_OWORD *)(a1 + 7);
            long long v21 = a1;
            do
            {
              long long v22 = v21;
              long long v21 = v18;
              long long v23 = *(_OWORD *)v18;
              long long v24 = *((_OWORD *)v18 + 2);
              *((_OWORD *)v22 + 1) = *((_OWORD *)v18 + 1);
              *((_OWORD *)v22 + 2) = v24;
              *(_OWORD *)long long v22 = v23;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v19) {
                break;
              }
              uint64_t v25 = (2 * v19) | 1;
              long long v18 = &a1[12 * v25];
              uint64_t v26 = 2 * v19 + 2;
              if (v26 < v4 && a1[12 * v25 + 11] > v18[23])
              {
                v18 += 12;
                uint64_t v25 = v26;
              }
              int64_t v19 = v25;
            }
            while (v18[11] <= v20);
            *(_OWORD *)(v21 + 7) = *(_OWORD *)&v60[12];
            *(_OWORD *)long long v21 = v57;
            *((_OWORD *)v21 + 1) = *(_OWORD *)v60;
            v21[11] = v20;
          }
        }
        else
        {
          long long v18 = a1 + 24;
          int64_t v19 = 2;
          float v20 = a1[11];
          if (a1[35] <= v20) {
            goto LABEL_19;
          }
        }
      }
      v12 += 12;
      if (v12 == a3) {
        goto LABEL_25;
      }
    }
  }
LABEL_26:
  if (v3 >= 49)
  {
    int64_t v27 = v3 / 0x30uLL;
    do
    {
      uint64_t v29 = 0;
      long long v58 = *(_OWORD *)a1;
      long long v61 = *((_OWORD *)a1 + 1);
      long long v63 = *((_OWORD *)a1 + 2);
      long long v30 = a1;
      do
      {
        long long v33 = v30;
        uint64_t v34 = v29 + 1;
        v30 += 12 * v29 + 12;
        uint64_t v35 = 2 * v29;
        uint64_t v29 = (2 * v29) | 1;
        int64_t v36 = v35 + 2;
        if (v36 < v27 && v33[12 * v34 + 11] > v30[23])
        {
          v30 += 12;
          uint64_t v29 = v36;
        }
        long long v31 = *(_OWORD *)v30;
        long long v32 = *((_OWORD *)v30 + 2);
        *((_OWORD *)v33 + 1) = *((_OWORD *)v30 + 1);
        *((_OWORD *)v33 + 2) = v32;
        *(_OWORD *)long long v33 = v31;
      }
      while (v29 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
      a2 -= 12;
      if (v30 == a2)
      {
        *((_OWORD *)v30 + 1) = v61;
        *((_OWORD *)v30 + 2) = v63;
        *(_OWORD *)long long v30 = v58;
      }
      else
      {
        long long v37 = *(_OWORD *)a2;
        long long v38 = *((_OWORD *)a2 + 2);
        *((_OWORD *)v30 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)v30 + 2) = v38;
        *(_OWORD *)long long v30 = v37;
        *(_OWORD *)a2 = v58;
        *((_OWORD *)a2 + 1) = v61;
        *((_OWORD *)a2 + 2) = v63;
        uint64_t v39 = (char *)v30 - (char *)a1 + 48;
        if (v39 >= 49)
        {
          unint64_t v40 = (v39 / 0x30uLL - 2) >> 1;
          float v41 = v30[11];
          if (a1[12 * v40 + 11] > v41)
          {
            *(_OWORD *)&v65[12] = *(_OWORD *)(v30 + 7);
            long long v64 = *(_OWORD *)v30;
            *(_OWORD *)uint64_t v65 = *((_OWORD *)v30 + 1);
            do
            {
              long long v42 = v30;
              long long v30 = &a1[12 * v40];
              long long v43 = *(_OWORD *)v30;
              long long v44 = *((_OWORD *)v30 + 2);
              *((_OWORD *)v42 + 1) = *((_OWORD *)v30 + 1);
              *((_OWORD *)v42 + 2) = v44;
              *(_OWORD *)long long v42 = v43;
              if (!v40) {
                break;
              }
              unint64_t v40 = (v40 - 1) >> 1;
            }
            while (a1[12 * v40 + 11] > v41);
            *(_OWORD *)long long v30 = v64;
            *((_OWORD *)v30 + 1) = *(_OWORD *)v65;
            *(_OWORD *)(v30 + 7) = *(_OWORD *)&v65[12];
            v30[11] = v41;
          }
        }
      }
      BOOL v28 = v27-- <= 2;
    }
    while (!v28);
  }
  return v5;
}

uint64_t sub_2194B5A70(float *a1, float32x2_t *a2, uint64_t a3, float a4, float a5, float a6, float a7, float a8)
{
  memset(v1203, 0, sizeof(v1203));
  float v14 = a6 * a8;
  long long v1202 = 0u;
  long long v1201 = 0u;
  long long v1200 = 0u;
  long long v1199 = 0u;
  long long v1198 = 0u;
  long long v1197 = 0u;
  uint64_t v15 = a3 + 8;
  int v16 = *(_DWORD *)(a3 + 24);
  int v17 = *(_DWORD *)(a3 + 32);
  int v18 = sub_2194F4090(a3 + 8);
  float v19 = (float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v14) & 0x807FFFFF | 0x3F800000) * -0.33333) + 2.0)
                              * COERCE_FLOAT(LODWORD(v14) & 0x807FFFFF | 0x3F800000))
                      + -1.6667)
              + (float)((LODWORD(v14) >> 23) - 127))
      * 0.69315;
  int v20 = vcvtms_s32_f32((float)(v19 - *(float *)(a3 + 112)) * *(float *)(a3 + 108));
  if (v20 < 0)
  {
    int v21 = 0;
    int v22 = 0;
  }
  else if (v18 * v16 <= v20)
  {
    int v21 = v16 - 1;
    int v22 = v17 - 1;
  }
  else
  {
    int v21 = v20 / v18;
    int v22 = v20 % v18;
  }
  float v23 = a6 * a7;
  float v24 = 1.0 / (float)(1 << v21);
  float v25 = v24 * a4;
  float v26 = v24 * a5;
  uint64_t v27 = *(void *)(a3 + 32);
  BOOL v28 = (void *)(*(void *)(a3 + 56) + 144 * (v27 * v21 + v22));
  uint64_t v29 = v28[9];
  unint64_t v31 = v28[4];
  uint64_t v30 = v28[5];
  unint64_t v32 = v28[6];
  float v33 = v25 + 0.0;
  float v34 = (float)v31 + -1.001;
  if (v34 >= v33) {
    float v34 = v33;
  }
  if (v33 >= 0.0) {
    float v35 = v34;
  }
  else {
    float v35 = 0.0;
  }
  float v36 = v26 + 0.0;
  float v37 = (float)v32 + -1.001;
  if (v37 >= v36) {
    float v37 = v36;
  }
  if (v36 >= 0.0) {
    float v38 = v37;
  }
  else {
    float v38 = 0.0;
  }
  uint64_t v39 = v35;
  uint64_t v40 = v38;
  uint64_t v41 = (v39 + 1);
  uint64_t v42 = v29 + v30 * v40;
  uint64_t v43 = v42 + v30;
  float v44 = (float)v41 - v35;
  float v45 = (float)(v40 + 1) - v38;
  float v46 = v44 * v45;
  *(float *)&unsigned int v47 = v35 - (float)v35;
  float v48 = *(float *)&v47 * v45;
  *(float *)&unsigned int v49 = (float)v38;
  float v50 = v38 - *(float *)&v49;
  *(float *)&unsigned int v51 = v44 * v50;
  float v52 = *(float *)&v47 * v50;
  LOBYTE(v47) = *(unsigned char *)(v42 + v39);
  LOBYTE(v49) = *(unsigned char *)(v42 + v41);
  *(float *)&unsigned int v53 = v48 * (float)v49;
  float v54 = *(float *)&v53 + (float)(v46 * (float)v47);
  LOBYTE(v53) = *(unsigned char *)(v43 + v39);
  float v55 = v54 + (float)(*(float *)&v51 * (float)v53);
  LOBYTE(v51) = *(unsigned char *)(v43 + v41);
  __int16 v1196 = (int)(float)((float)(v55 + (float)(v52 * (float)v51)) * 255.0);
  int v56 = *(_DWORD *)(a3 + 24);
  int v57 = sub_2194F4090(v15);
  int v58 = vcvtms_s32_f32((float)(v19 - *(float *)(a3 + 112)) * *(float *)(a3 + 108));
  if (v58 < 0)
  {
    int v60 = 0;
    int v59 = 0;
  }
  else if (v57 * v56 <= v58)
  {
    int v59 = v56 - 1;
    int v60 = v27 - 1;
  }
  else
  {
    int v59 = v58 / v57;
    int v60 = v58 % v57;
  }
  float v61 = (float)(1 << v59);
  float v62 = (float)(1.0 / v61) * a4;
  float v63 = (float)(1.0 / v61) * a5;
  float v64 = v23 / v61;
  uint64_t v65 = *(void *)(a3 + 32);
  uint64_t v66 = (void *)(*(void *)(a3 + 56) + 144 * (v65 * v59 + v60));
  uint64_t v67 = v66[9];
  unint64_t v69 = v66[4];
  uint64_t v68 = v66[5];
  unint64_t v70 = v66[6];
  float v71 = v62 + (float)(v64 * -0.5);
  float v72 = v64 * 0.0;
  float v73 = v71 + (float)((float)(v64 * 0.0) * 0.70711);
  float v74 = (float)v69 + -1.001;
  if (v74 >= v73) {
    float v75 = v71 + (float)((float)(v64 * 0.0) * 0.70711);
  }
  else {
    float v75 = (float)v69 + -1.001;
  }
  if (v73 >= 0.0) {
    float v76 = v75;
  }
  else {
    float v76 = 0.0;
  }
  float v77 = v63 + (float)(v72 * -0.5);
  float v78 = v77 + (float)(v64 * 0.70711);
  float v79 = (float)v70 + -1.001;
  if (v79 >= v78) {
    float v80 = v77 + (float)(v64 * 0.70711);
  }
  else {
    float v80 = (float)v70 + -1.001;
  }
  if (v78 < 0.0) {
    float v80 = 0.0;
  }
  uint64_t v81 = v76;
  uint64_t v82 = v80;
  uint64_t v83 = (v81 + 1);
  unsigned int v84 = v82 + 1;
  uint64_t v85 = v67 + v68 * v82;
  float v86 = (float)v83 - v76;
  float v87 = (float)v84 - v80;
  float v88 = v86 * v87;
  *(float *)&unsigned int v89 = v76 - (float)v76;
  float v90 = *(float *)&v89 * v87;
  *(float *)&unsigned int v91 = (float)v80;
  float v92 = v80 - *(float *)&v91;
  *(float *)&unsigned int v93 = v86 * v92;
  float v94 = *(float *)&v89 * v92;
  LOBYTE(v89) = *(unsigned char *)(v85 + v81);
  LOBYTE(v91) = *(unsigned char *)(v85 + v83);
  *(float *)&unsigned int v95 = v90 * (float)v91;
  float v96 = *(float *)&v95 + (float)(v88 * (float)v89);
  LOBYTE(v95) = *(unsigned char *)(v85 + v68 + v81);
  float v97 = v96 + (float)(*(float *)&v93 * (float)v95);
  LOBYTE(v93) = *(unsigned char *)(v85 + v68 + v83);
  HIWORD(v1197) = (int)(float)((float)(v97 + (float)(v94 * (float)v93)) * 255.0);
  float v98 = v62 + (float)(v64 * 0.5);
  float v99 = v98 + (float)(v72 * 0.70711);
  if (v74 >= v99) {
    float v100 = v98 + (float)(v72 * 0.70711);
  }
  else {
    float v100 = v74;
  }
  if (v99 < 0.0) {
    float v100 = 0.0;
  }
  float v101 = v63 + (float)(v72 * 0.5);
  float v102 = v101 + (float)(v64 * 0.70711);
  if (v79 >= v102) {
    float v103 = v101 + (float)(v64 * 0.70711);
  }
  else {
    float v103 = v79;
  }
  uint64_t v104 = v100;
  if (v102 >= 0.0) {
    float v105 = v103;
  }
  else {
    float v105 = 0.0;
  }
  uint64_t v106 = v105;
  uint64_t v107 = (v104 + 1);
  unsigned int v108 = v106 + 1;
  uint64_t v109 = v67 + v68 * v106;
  float v110 = (float)v107 - v100;
  float v111 = (float)v108 - v105;
  *(float *)&unsigned int v112 = v110 * v111;
  float v113 = v100 - (float)v100;
  float v114 = v113 * v111;
  *(float *)&unsigned int v115 = (float)v105;
  float v116 = v105 - *(float *)&v115;
  float v117 = v110 * v116;
  LOBYTE(v115) = *(unsigned char *)(v109 + v104);
  float v118 = v113 * v116;
  float v119 = (float)v115;
  LOBYTE(v115) = *(unsigned char *)(v109 + v107);
  *(float *)&unsigned int v120 = v114 * (float)v115;
  float v121 = *(float *)&v120 + (float)(*(float *)&v112 * v119);
  LOBYTE(v120) = *(unsigned char *)(v109 + v68 + v104);
  LOBYTE(v112) = *(unsigned char *)(v109 + v68 + v107);
  LOWORD(v1198) = (int)(float)((float)((float)(v121 + (float)(v117 * (float)v120)) + (float)(v118 * (float)v112)) * 255.0);
  float v122 = (float)(v64 + v62) + (float)(v72 * 0.0);
  if (v74 >= v122) {
    float v123 = (float)(v64 + v62) + (float)(v72 * 0.0);
  }
  else {
    float v123 = v74;
  }
  if (v122 >= 0.0) {
    float v124 = v123;
  }
  else {
    float v124 = 0.0;
  }
  float v125 = (float)(v72 + v63) + (float)(v64 * 0.0);
  if (v79 >= v125) {
    float v126 = (float)(v72 + v63) + (float)(v64 * 0.0);
  }
  else {
    float v126 = v79;
  }
  if (v125 >= 0.0) {
    float v127 = v126;
  }
  else {
    float v127 = 0.0;
  }
  uint64_t v128 = v124;
  uint64_t v129 = v127;
  uint64_t v130 = (v128 + 1);
  unsigned int v131 = v129 + 1;
  uint64_t v132 = v67 + v68 * v129;
  float v133 = (float)v130 - v124;
  float v134 = (float)v131 - v127;
  float v135 = v133 * v134;
  float v136 = v124 - (float)v124;
  float v137 = v136 * v134;
  *(float *)&unsigned int v138 = (float)v127;
  *(float *)&unsigned int v139 = v127 - *(float *)&v138;
  *(float *)&unsigned int v140 = v133 * *(float *)&v139;
  float v141 = v136 * *(float *)&v139;
  LOBYTE(v139) = *(unsigned char *)(v132 + v128);
  LOBYTE(v138) = *(unsigned char *)(v132 + v130);
  *(float *)&unsigned int v142 = v137 * (float)v138;
  float v143 = *(float *)&v142 + (float)(v135 * (float)v139);
  LOBYTE(v142) = *(unsigned char *)(v132 + v68 + v128);
  float v144 = v143 + (float)(*(float *)&v140 * (float)v142);
  LOBYTE(v140) = *(unsigned char *)(v132 + v68 + v130);
  int v145 = (int)(float)((float)(v144 + (float)(v141 * (float)v140)) * 255.0);
  float v146 = v98 + (float)(v72 * -0.70711);
  if (v74 >= v146) {
    float v147 = v146;
  }
  else {
    float v147 = v74;
  }
  if (v146 >= 0.0) {
    float v148 = v147;
  }
  else {
    float v148 = 0.0;
  }
  float v149 = v101 + (float)(v64 * -0.70711);
  if (v79 >= v149) {
    float v150 = v149;
  }
  else {
    float v150 = v79;
  }
  if (v149 >= 0.0) {
    float v151 = v150;
  }
  else {
    float v151 = 0.0;
  }
  uint64_t v152 = v148;
  uint64_t v153 = v151;
  WORD1(v1198) = v145;
  uint64_t v154 = (v152 + 1);
  unsigned int v155 = v153 + 1;
  uint64_t v156 = v67 + v68 * v153;
  float v157 = (float)v154 - v148;
  float v158 = (float)v155 - v151;
  float v159 = v157 * v158;
  float v160 = v148 - (float)v148;
  float v161 = v160 * v158;
  *(float *)&unsigned int v162 = (float)v151;
  *(float *)&unsigned int v163 = v151 - *(float *)&v162;
  *(float *)&unsigned int v164 = v157 * *(float *)&v163;
  float v165 = v160 * *(float *)&v163;
  LOBYTE(v163) = *(unsigned char *)(v156 + v152);
  LOBYTE(v162) = *(unsigned char *)(v156 + v154);
  *(float *)&unsigned int v166 = (float)v162;
  float v167 = v161 * *(float *)&v166;
  LOBYTE(v166) = *(unsigned char *)(v156 + v68 + v152);
  float v168 = (float)(v167 + (float)(v159 * (float)v163)) + (float)(*(float *)&v164 * (float)v166);
  LOBYTE(v164) = *(unsigned char *)(v156 + v68 + v154);
  int v169 = (int)(float)((float)(v168 + (float)(v165 * (float)v164)) * 255.0);
  float v170 = v71 + (float)(v72 * -0.70711);
  if (v74 >= v170) {
    float v171 = v170;
  }
  else {
    float v171 = v74;
  }
  if (v170 >= 0.0) {
    float v172 = v171;
  }
  else {
    float v172 = 0.0;
  }
  float v173 = v77 + (float)(v64 * -0.70711);
  if (v79 >= v173) {
    float v174 = v173;
  }
  else {
    float v174 = v79;
  }
  if (v173 >= 0.0) {
    float v175 = v174;
  }
  else {
    float v175 = 0.0;
  }
  uint64_t v176 = v172;
  uint64_t v177 = v175;
  WORD2(v1198) = v169;
  uint64_t v178 = (v176 + 1);
  unsigned int v179 = v177 + 1;
  uint64_t v180 = v67 + v68 * v177;
  float v181 = (float)v178 - v172;
  float v182 = (float)v179 - v175;
  float v183 = v181 * v182;
  float v184 = v172 - (float)v172;
  float v185 = v184 * v182;
  *(float *)&unsigned int v186 = (float)v175;
  *(float *)&unsigned int v187 = v175 - *(float *)&v186;
  *(float *)&unsigned int v188 = v181 * *(float *)&v187;
  float v189 = v184 * *(float *)&v187;
  LOBYTE(v187) = *(unsigned char *)(v180 + v176);
  LOBYTE(v186) = *(unsigned char *)(v180 + v178);
  *(float *)&unsigned int v190 = (float)v186;
  float v191 = v185 * *(float *)&v190;
  LOBYTE(v190) = *(unsigned char *)(v180 + v68 + v176);
  float v192 = (float)(v191 + (float)(v183 * (float)v187)) + (float)(*(float *)&v188 * (float)v190);
  LOBYTE(v188) = *(unsigned char *)(v180 + v68 + v178);
  WORD3(v1198) = (int)(float)((float)(v192 + (float)(v189 * (float)v188)) * 255.0);
  float v193 = (float)(v62 - v64) + (float)(v72 * 0.0);
  if (v74 >= v193) {
    float v74 = v193;
  }
  if (v193 >= 0.0) {
    float v194 = v74;
  }
  else {
    float v194 = 0.0;
  }
  float v195 = (float)(v63 - v72) + (float)(v64 * 0.0);
  if (v79 >= v195) {
    float v196 = v195;
  }
  else {
    float v196 = v79;
  }
  uint64_t v197 = v194;
  if (v195 >= 0.0) {
    float v198 = v196;
  }
  else {
    float v198 = 0.0;
  }
  uint64_t v199 = v198;
  uint64_t v200 = (v197 + 1);
  uint64_t v201 = v67 + v68 * v199;
  uint64_t v202 = v201 + v68;
  float v203 = (float)v200 - v194;
  float v204 = (float)(v199 + 1) - v198;
  *(float *)&unsigned int v205 = v203 * v204;
  float v206 = v194 - (float)v194;
  float v207 = v206 * v204;
  *(float *)&unsigned int v208 = (float)v198;
  float v209 = v198 - *(float *)&v208;
  float v210 = v203 * v209;
  LOBYTE(v208) = *(unsigned char *)(v201 + v197);
  float v211 = v206 * v209;
  float v212 = (float)v208;
  LOBYTE(v208) = *(unsigned char *)(v201 + v200);
  *(float *)&unsigned int v213 = v207 * (float)v208;
  float v214 = *(float *)&v213 + (float)(*(float *)&v205 * v212);
  LOBYTE(v213) = *(unsigned char *)(v202 + v197);
  LOBYTE(v205) = *(unsigned char *)(v202 + v200);
  WORD4(v1198) = (int)(float)((float)((float)(v214 + (float)(v210 * (float)v213)) + (float)(v211 * (float)v205)) * 255.0);
  float v215 = v23 * 1.4142;
  float v216 = v14 * 1.4142;
  int v217 = *(_DWORD *)(a3 + 24);
  int v218 = sub_2194F4090(v15);
  int v219 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v216) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v216) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v216) >> 23) - 127))* 0.69315)- *(float *)(a3 + 112))* *(float *)(a3 + 108));
  if (v219 < 0)
  {
    int v221 = 0;
    int v220 = 0;
  }
  else if (v218 * v217 <= v219)
  {
    int v220 = v217 - 1;
    int v221 = v65 - 1;
  }
  else
  {
    int v220 = v219 / v218;
    int v221 = v219 % v218;
  }
  float v222 = (float)(1 << v220);
  float v223 = (float)(1.0 / v222) * a4;
  float v224 = (float)(1.0 / v222) * a5;
  float v225 = v215 / v222;
  uint64_t v226 = *(void *)(a3 + 32);
  long long v227 = (void *)(*(void *)(a3 + 56) + 144 * (v226 * v220 + v221));
  uint64_t v228 = v227[9];
  unint64_t v230 = v227[4];
  uint64_t v229 = v227[5];
  unint64_t v231 = v227[6];
  float v232 = v223 + (float)(v225 * 0.0);
  float v233 = v225 * 0.0;
  float v234 = v232 - (float)(v225 * 0.0);
  float v235 = (float)v230 + -1.001;
  if (v235 >= v234) {
    float v236 = v232 - (float)(v225 * 0.0);
  }
  else {
    float v236 = (float)v230 + -1.001;
  }
  if (v234 >= 0.0) {
    float v237 = v236;
  }
  else {
    float v237 = 0.0;
  }
  float v238 = v224 + (float)(v233 * 0.0);
  float v239 = (float)v231 + -1.001;
  if (v239 >= (float)(v238 - v225)) {
    float v240 = v238 - v225;
  }
  else {
    float v240 = (float)v231 + -1.001;
  }
  if ((float)(v238 - v225) < 0.0) {
    float v240 = 0.0;
  }
  uint64_t v241 = v237;
  uint64_t v242 = v240;
  uint64_t v243 = (v241 + 1);
  unsigned int v244 = v242 + 1;
  uint64_t v245 = v228 + v229 * v242;
  float v246 = (float)v243 - v237;
  float v247 = (float)v244 - v240;
  float v248 = v246 * v247;
  *(float *)&unsigned int v249 = v237 - (float)v237;
  float v250 = *(float *)&v249 * v247;
  *(float *)&unsigned int v251 = (float)v240;
  float v252 = v240 - *(float *)&v251;
  *(float *)&unsigned int v253 = v246 * v252;
  float v254 = *(float *)&v249 * v252;
  LOBYTE(v249) = *(unsigned char *)(v245 + v241);
  LOBYTE(v251) = *(unsigned char *)(v245 + v243);
  *(float *)&unsigned int v255 = v250 * (float)v251;
  float v256 = *(float *)&v255 + (float)(v248 * (float)v249);
  LOBYTE(v255) = *(unsigned char *)(v245 + v229 + v241);
  float v257 = v256 + (float)(*(float *)&v253 * (float)v255);
  LOBYTE(v253) = *(unsigned char *)(v245 + v229 + v243);
  HIWORD(v1198) = (int)(float)((float)(v257 + (float)(v254 * (float)v253)) * 255.0);
  float v258 = v223 + (float)(v225 * 0.70711);
  float v259 = v258 + (float)(v233 * 0.5);
  if (v235 >= v259) {
    float v260 = v258 + (float)(v233 * 0.5);
  }
  else {
    float v260 = v235;
  }
  if (v259 >= 0.0) {
    float v261 = v260;
  }
  else {
    float v261 = 0.0;
  }
  float v262 = v224 + (float)(v233 * 0.70711);
  float v263 = v262 + (float)(v225 * 0.5);
  if (v239 >= v263) {
    float v264 = v262 + (float)(v225 * 0.5);
  }
  else {
    float v264 = v239;
  }
  if (v263 >= 0.0) {
    float v265 = v264;
  }
  else {
    float v265 = 0.0;
  }
  uint64_t v266 = v261;
  uint64_t v267 = v265;
  uint64_t v268 = (v266 + 1);
  unsigned int v269 = v267 + 1;
  uint64_t v270 = v228 + v229 * v267;
  float v271 = (float)v268 - v261;
  float v272 = (float)v269 - v265;
  float v273 = v271 * v272;
  float v274 = v261 - (float)v261;
  float v275 = v274 * v272;
  *(float *)&unsigned int v276 = (float)v265;
  *(float *)&unsigned int v277 = v265 - *(float *)&v276;
  *(float *)&unsigned int v278 = v271 * *(float *)&v277;
  float v279 = v274 * *(float *)&v277;
  LOBYTE(v277) = *(unsigned char *)(v270 + v266);
  LOBYTE(v276) = *(unsigned char *)(v270 + v268);
  *(float *)&unsigned int v280 = v275 * (float)v276;
  float v281 = *(float *)&v280 + (float)(v273 * (float)v277);
  LOBYTE(v280) = *(unsigned char *)(v270 + v229 + v266);
  float v282 = v281 + (float)(*(float *)&v278 * (float)v280);
  LOBYTE(v278) = *(unsigned char *)(v270 + v229 + v268);
  LOWORD(v1199) = (int)(float)((float)(v282 + (float)(v279 * (float)v278)) * 255.0);
  float v283 = v258 + (float)(v233 * -0.5);
  if (v235 >= v283) {
    float v284 = v283;
  }
  else {
    float v284 = v235;
  }
  if (v283 >= 0.0) {
    float v285 = v284;
  }
  else {
    float v285 = 0.0;
  }
  float v286 = v262 + (float)(v225 * -0.5);
  if (v239 >= v286) {
    float v287 = v286;
  }
  else {
    float v287 = v239;
  }
  if (v286 >= 0.0) {
    float v288 = v287;
  }
  else {
    float v288 = 0.0;
  }
  uint64_t v289 = v285;
  uint64_t v290 = v288;
  uint64_t v291 = (v289 + 1);
  unsigned int v292 = v290 + 1;
  uint64_t v293 = v228 + v229 * v290;
  float v294 = (float)v291 - v285;
  float v295 = (float)v292 - v288;
  float v296 = v294 * v295;
  *(float *)&unsigned int v297 = v285 - (float)v285;
  float v298 = *(float *)&v297 * v295;
  *(float *)&unsigned int v299 = (float)v288;
  float v300 = v288 - *(float *)&v299;
  *(float *)&unsigned int v301 = v294 * v300;
  float v302 = *(float *)&v297 * v300;
  LOBYTE(v297) = *(unsigned char *)(v293 + v289);
  LOBYTE(v299) = *(unsigned char *)(v293 + v291);
  *(float *)&unsigned int v303 = v298 * (float)v299;
  float v304 = *(float *)&v303 + (float)(v296 * (float)v297);
  LOBYTE(v303) = *(unsigned char *)(v293 + v229 + v289);
  float v305 = v304 + (float)(*(float *)&v301 * (float)v303);
  LOBYTE(v301) = *(unsigned char *)(v293 + v229 + v291);
  WORD1(v1199) = (int)(float)((float)(v305 + (float)(v302 * (float)v301)) * 255.0);
  float v306 = v233 + v232;
  if (v235 >= v306) {
    float v307 = v306;
  }
  else {
    float v307 = v235;
  }
  if (v306 >= 0.0) {
    float v308 = v307;
  }
  else {
    float v308 = 0.0;
  }
  float v309 = v225 + v238;
  if (v239 >= v309) {
    float v310 = v309;
  }
  else {
    float v310 = v239;
  }
  if (v309 >= 0.0) {
    float v311 = v310;
  }
  else {
    float v311 = 0.0;
  }
  uint64_t v312 = v308;
  uint64_t v313 = v311;
  uint64_t v314 = (v312 + 1);
  unsigned int v315 = v313 + 1;
  uint64_t v316 = v228 + v229 * v313;
  float v317 = (float)v314 - v308;
  float v318 = (float)v315 - v311;
  float v319 = v317 * v318;
  float v320 = v308 - (float)v308;
  float v321 = v320 * v318;
  *(float *)&unsigned int v322 = (float)v311;
  *(float *)&unsigned int v323 = v311 - *(float *)&v322;
  *(float *)&unsigned int v324 = v317 * *(float *)&v323;
  float v325 = v320 * *(float *)&v323;
  LOBYTE(v323) = *(unsigned char *)(v316 + v312);
  LOBYTE(v322) = *(unsigned char *)(v316 + v314);
  *(float *)&unsigned int v326 = v321 * (float)v322;
  float v327 = *(float *)&v326 + (float)(v319 * (float)v323);
  LOBYTE(v326) = *(unsigned char *)(v316 + v229 + v312);
  float v328 = v327 + (float)(*(float *)&v324 * (float)v326);
  LOBYTE(v324) = *(unsigned char *)(v316 + v229 + v314);
  WORD2(v1199) = (int)(float)((float)(v328 + (float)(v325 * (float)v324)) * 255.0);
  float v329 = v223 + (float)(v225 * -0.70711);
  float v330 = v329 + (float)(v233 * -0.5);
  if (v235 >= v330) {
    float v331 = v329 + (float)(v233 * -0.5);
  }
  else {
    float v331 = v235;
  }
  if (v330 >= 0.0) {
    float v332 = v331;
  }
  else {
    float v332 = 0.0;
  }
  float v333 = v224 + (float)(v233 * -0.70711);
  float v334 = v333 + (float)(v225 * -0.5);
  if (v239 >= v334) {
    float v335 = v333 + (float)(v225 * -0.5);
  }
  else {
    float v335 = v239;
  }
  uint64_t v336 = v332;
  if (v334 >= 0.0) {
    float v337 = v335;
  }
  else {
    float v337 = 0.0;
  }
  uint64_t v338 = v337;
  uint64_t v339 = (v336 + 1);
  unsigned int v340 = v338 + 1;
  uint64_t v341 = v228 + v229 * v338;
  float v342 = (float)v339 - v332;
  float v343 = (float)v340 - v337;
  *(float *)&unsigned int v344 = v342 * v343;
  float v345 = v332 - (float)v332;
  float v346 = v345 * v343;
  *(float *)&unsigned int v347 = (float)v337;
  float v348 = v337 - *(float *)&v347;
  float v349 = v342 * v348;
  LOBYTE(v347) = *(unsigned char *)(v341 + v336);
  float v350 = v345 * v348;
  float v351 = (float)v347;
  LOBYTE(v347) = *(unsigned char *)(v341 + v339);
  *(float *)&unsigned int v352 = v346 * (float)v347;
  float v353 = *(float *)&v352 + (float)(*(float *)&v344 * v351);
  LOBYTE(v352) = *(unsigned char *)(v341 + v229 + v336);
  LOBYTE(v344) = *(unsigned char *)(v341 + v229 + v339);
  WORD3(v1199) = (int)(float)((float)((float)(v353 + (float)(v349 * (float)v352)) + (float)(v350 * (float)v344)) * 255.0);
  float v354 = v329 + (float)(v233 * 0.5);
  if (v235 >= v354) {
    float v235 = v354;
  }
  if (v354 >= 0.0) {
    float v355 = v235;
  }
  else {
    float v355 = 0.0;
  }
  float v356 = v333 + (float)(v225 * 0.5);
  if (v239 >= v356) {
    float v357 = v356;
  }
  else {
    float v357 = v239;
  }
  uint64_t v358 = v355;
  if (v356 >= 0.0) {
    float v359 = v357;
  }
  else {
    float v359 = 0.0;
  }
  uint64_t v360 = v359;
  uint64_t v361 = (v358 + 1);
  uint64_t v362 = v228 + v229 * v360;
  uint64_t v363 = v362 + v229;
  float v364 = (float)v361 - v355;
  float v365 = (float)(v360 + 1) - v359;
  *(float *)&unsigned int v366 = v364 * v365;
  float v367 = v355 - (float)v355;
  float v368 = v367 * v365;
  *(float *)&unsigned int v369 = (float)v359;
  float v370 = v359 - *(float *)&v369;
  float v371 = v364 * v370;
  LOBYTE(v369) = *(unsigned char *)(v362 + v358);
  float v372 = v367 * v370;
  float v373 = (float)v369;
  LOBYTE(v369) = *(unsigned char *)(v362 + v361);
  *(float *)&unsigned int v374 = v368 * (float)v369;
  float v375 = *(float *)&v374 + (float)(*(float *)&v366 * v373);
  LOBYTE(v374) = *(unsigned char *)(v363 + v358);
  LOBYTE(v366) = *(unsigned char *)(v363 + v361);
  WORD4(v1199) = (int)(float)((float)((float)(v375 + (float)(v371 * (float)v374)) + (float)(v372 * (float)v366)) * 255.0);
  float v376 = v215 * 1.4142;
  float v377 = v216 * 1.4142;
  int v378 = *(_DWORD *)(a3 + 24);
  int v379 = sub_2194F4090(v15);
  int v380 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v377) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v377) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v377) >> 23) - 127))* 0.69315)- *(float *)(a3 + 112))* *(float *)(a3 + 108));
  if (v380 < 0)
  {
    int v382 = 0;
    int v381 = 0;
  }
  else if (v379 * v378 <= v380)
  {
    int v381 = v378 - 1;
    int v382 = v226 - 1;
  }
  else
  {
    int v381 = v380 / v379;
    int v382 = v380 % v379;
  }
  float v383 = (float)(1 << v381);
  float v384 = (float)(1.0 / v383) * a4;
  float v385 = (float)(1.0 / v383) * a5;
  float v386 = v376 / v383;
  uint64_t v387 = *(void *)(a3 + 32);
  float v388 = (void *)(*(void *)(a3 + 56) + 144 * (v387 * v381 + v382));
  uint64_t v389 = v388[9];
  unint64_t v391 = v388[4];
  uint64_t v390 = v388[5];
  unint64_t v392 = v388[6];
  float v393 = v384 + (float)(v386 * -0.5);
  float v394 = v386 * 0.0;
  float v395 = v393 + (float)((float)(v386 * 0.0) * 0.70711);
  float v396 = (float)v391 + -1.001;
  if (v396 >= v395) {
    float v397 = v393 + (float)((float)(v386 * 0.0) * 0.70711);
  }
  else {
    float v397 = (float)v391 + -1.001;
  }
  if (v395 >= 0.0) {
    float v398 = v397;
  }
  else {
    float v398 = 0.0;
  }
  float v399 = v385 + (float)(v394 * -0.5);
  float v400 = v399 + (float)(v386 * 0.70711);
  float v401 = (float)v392 + -1.001;
  if (v401 >= v400) {
    float v402 = v399 + (float)(v386 * 0.70711);
  }
  else {
    float v402 = (float)v392 + -1.001;
  }
  if (v400 < 0.0) {
    float v402 = 0.0;
  }
  uint64_t v403 = v398;
  uint64_t v404 = v402;
  uint64_t v405 = (v403 + 1);
  unsigned int v406 = v404 + 1;
  uint64_t v407 = v389 + v390 * v404;
  float v408 = (float)v405 - v398;
  float v409 = (float)v406 - v402;
  float v410 = v408 * v409;
  *(float *)&unsigned int v411 = v398 - (float)v398;
  float v412 = *(float *)&v411 * v409;
  *(float *)&unsigned int v413 = (float)v402;
  float v414 = v402 - *(float *)&v413;
  *(float *)&unsigned int v415 = v408 * v414;
  float v416 = *(float *)&v411 * v414;
  LOBYTE(v411) = *(unsigned char *)(v407 + v403);
  LOBYTE(v413) = *(unsigned char *)(v407 + v405);
  *(float *)&unsigned int v417 = v412 * (float)v413;
  float v418 = *(float *)&v417 + (float)(v410 * (float)v411);
  LOBYTE(v417) = *(unsigned char *)(v407 + v390 + v403);
  float v419 = v418 + (float)(*(float *)&v415 * (float)v417);
  LOBYTE(v415) = *(unsigned char *)(v407 + v390 + v405);
  HIWORD(v1199) = (int)(float)((float)(v419 + (float)(v416 * (float)v415)) * 255.0);
  float v420 = v384 + (float)(v386 * 0.5);
  float v421 = v420 + (float)(v394 * 0.70711);
  if (v396 >= v421) {
    float v422 = v420 + (float)(v394 * 0.70711);
  }
  else {
    float v422 = v396;
  }
  if (v421 < 0.0) {
    float v422 = 0.0;
  }
  float v423 = v385 + (float)(v394 * 0.5);
  float v424 = v423 + (float)(v386 * 0.70711);
  if (v401 >= v424) {
    float v425 = v423 + (float)(v386 * 0.70711);
  }
  else {
    float v425 = v401;
  }
  uint64_t v426 = v422;
  if (v424 >= 0.0) {
    float v427 = v425;
  }
  else {
    float v427 = 0.0;
  }
  uint64_t v428 = v427;
  uint64_t v429 = (v426 + 1);
  unsigned int v430 = v428 + 1;
  uint64_t v431 = v389 + v390 * v428;
  float v432 = (float)v429 - v422;
  float v433 = (float)v430 - v427;
  *(float *)&unsigned int v434 = v432 * v433;
  float v435 = v422 - (float)v422;
  float v436 = v435 * v433;
  *(float *)&unsigned int v437 = (float)v427;
  float v438 = v427 - *(float *)&v437;
  float v439 = v432 * v438;
  LOBYTE(v437) = *(unsigned char *)(v431 + v426);
  float v440 = v435 * v438;
  float v441 = (float)v437;
  LOBYTE(v437) = *(unsigned char *)(v431 + v429);
  *(float *)&unsigned int v442 = v436 * (float)v437;
  float v443 = *(float *)&v442 + (float)(*(float *)&v434 * v441);
  LOBYTE(v442) = *(unsigned char *)(v431 + v390 + v426);
  LOBYTE(v434) = *(unsigned char *)(v431 + v390 + v429);
  LOWORD(v1200) = (int)(float)((float)((float)(v443 + (float)(v439 * (float)v442)) + (float)(v440 * (float)v434)) * 255.0);
  float v444 = (float)(v386 + v384) + (float)(v394 * 0.0);
  if (v396 >= v444) {
    float v445 = (float)(v386 + v384) + (float)(v394 * 0.0);
  }
  else {
    float v445 = v396;
  }
  if (v444 >= 0.0) {
    float v446 = v445;
  }
  else {
    float v446 = 0.0;
  }
  float v447 = (float)(v394 + v385) + (float)(v386 * 0.0);
  if (v401 >= v447) {
    float v448 = (float)(v394 + v385) + (float)(v386 * 0.0);
  }
  else {
    float v448 = v401;
  }
  if (v447 >= 0.0) {
    float v449 = v448;
  }
  else {
    float v449 = 0.0;
  }
  uint64_t v450 = v446;
  uint64_t v451 = v449;
  uint64_t v452 = (v450 + 1);
  unsigned int v453 = v451 + 1;
  uint64_t v454 = v389 + v390 * v451;
  float v455 = (float)v452 - v446;
  float v456 = (float)v453 - v449;
  float v457 = v455 * v456;
  float v458 = v446 - (float)v446;
  float v459 = v458 * v456;
  *(float *)&unsigned int v460 = (float)v449;
  *(float *)&unsigned int v461 = v449 - *(float *)&v460;
  *(float *)&unsigned int v462 = v455 * *(float *)&v461;
  float v463 = v458 * *(float *)&v461;
  LOBYTE(v461) = *(unsigned char *)(v454 + v450);
  LOBYTE(v460) = *(unsigned char *)(v454 + v452);
  *(float *)&unsigned int v464 = v459 * (float)v460;
  float v465 = *(float *)&v464 + (float)(v457 * (float)v461);
  LOBYTE(v464) = *(unsigned char *)(v454 + v390 + v450);
  float v466 = v465 + (float)(*(float *)&v462 * (float)v464);
  LOBYTE(v462) = *(unsigned char *)(v454 + v390 + v452);
  int v467 = (int)(float)((float)(v466 + (float)(v463 * (float)v462)) * 255.0);
  float v468 = v420 + (float)(v394 * -0.70711);
  if (v396 >= v468) {
    float v469 = v468;
  }
  else {
    float v469 = v396;
  }
  if (v468 >= 0.0) {
    float v470 = v469;
  }
  else {
    float v470 = 0.0;
  }
  float v471 = v423 + (float)(v386 * -0.70711);
  if (v401 >= v471) {
    float v472 = v471;
  }
  else {
    float v472 = v401;
  }
  if (v471 >= 0.0) {
    float v473 = v472;
  }
  else {
    float v473 = 0.0;
  }
  uint64_t v474 = v470;
  uint64_t v475 = v473;
  WORD1(v1200) = v467;
  uint64_t v476 = (v474 + 1);
  unsigned int v477 = v475 + 1;
  uint64_t v478 = v389 + v390 * v475;
  float v479 = (float)v476 - v470;
  float v480 = (float)v477 - v473;
  float v481 = v479 * v480;
  float v482 = v470 - (float)v470;
  float v483 = v482 * v480;
  *(float *)&unsigned int v484 = (float)v473;
  *(float *)&unsigned int v485 = v473 - *(float *)&v484;
  *(float *)&unsigned int v486 = v479 * *(float *)&v485;
  float v487 = v482 * *(float *)&v485;
  LOBYTE(v485) = *(unsigned char *)(v478 + v474);
  LOBYTE(v484) = *(unsigned char *)(v478 + v476);
  *(float *)&unsigned int v488 = (float)v484;
  float v489 = v483 * *(float *)&v488;
  LOBYTE(v488) = *(unsigned char *)(v478 + v390 + v474);
  float v490 = (float)(v489 + (float)(v481 * (float)v485)) + (float)(*(float *)&v486 * (float)v488);
  LOBYTE(v486) = *(unsigned char *)(v478 + v390 + v476);
  int v491 = (int)(float)((float)(v490 + (float)(v487 * (float)v486)) * 255.0);
  float v492 = v393 + (float)(v394 * -0.70711);
  if (v396 >= v492) {
    float v493 = v492;
  }
  else {
    float v493 = v396;
  }
  if (v492 >= 0.0) {
    float v494 = v493;
  }
  else {
    float v494 = 0.0;
  }
  float v495 = v399 + (float)(v386 * -0.70711);
  if (v401 >= v495) {
    float v496 = v495;
  }
  else {
    float v496 = v401;
  }
  if (v495 >= 0.0) {
    float v497 = v496;
  }
  else {
    float v497 = 0.0;
  }
  uint64_t v498 = v494;
  uint64_t v499 = v497;
  WORD2(v1200) = v491;
  uint64_t v500 = (v498 + 1);
  unsigned int v501 = v499 + 1;
  uint64_t v502 = v389 + v390 * v499;
  float v503 = (float)v500 - v494;
  float v504 = (float)v501 - v497;
  float v505 = v503 * v504;
  float v506 = v494 - (float)v494;
  float v507 = v506 * v504;
  *(float *)&unsigned int v508 = (float)v497;
  *(float *)&unsigned int v509 = v497 - *(float *)&v508;
  *(float *)&unsigned int v510 = v503 * *(float *)&v509;
  float v511 = v506 * *(float *)&v509;
  LOBYTE(v509) = *(unsigned char *)(v502 + v498);
  LOBYTE(v508) = *(unsigned char *)(v502 + v500);
  *(float *)&unsigned int v512 = (float)v508;
  float v513 = v507 * *(float *)&v512;
  LOBYTE(v512) = *(unsigned char *)(v502 + v390 + v498);
  float v514 = (float)(v513 + (float)(v505 * (float)v509)) + (float)(*(float *)&v510 * (float)v512);
  LOBYTE(v510) = *(unsigned char *)(v502 + v390 + v500);
  WORD3(v1200) = (int)(float)((float)(v514 + (float)(v511 * (float)v510)) * 255.0);
  float v515 = (float)(v384 - v386) + (float)(v394 * 0.0);
  if (v396 >= v515) {
    float v396 = v515;
  }
  if (v515 >= 0.0) {
    float v516 = v396;
  }
  else {
    float v516 = 0.0;
  }
  float v517 = (float)(v385 - v394) + (float)(v386 * 0.0);
  if (v401 >= v517) {
    float v518 = v517;
  }
  else {
    float v518 = v401;
  }
  uint64_t v519 = v516;
  if (v517 >= 0.0) {
    float v520 = v518;
  }
  else {
    float v520 = 0.0;
  }
  uint64_t v521 = v520;
  uint64_t v522 = (v519 + 1);
  uint64_t v523 = v389 + v390 * v521;
  uint64_t v524 = v523 + v390;
  float v525 = (float)v522 - v516;
  float v526 = (float)(v521 + 1) - v520;
  *(float *)&unsigned int v527 = v525 * v526;
  float v528 = v516 - (float)v516;
  float v529 = v528 * v526;
  *(float *)&unsigned int v530 = (float)v520;
  float v531 = v520 - *(float *)&v530;
  float v532 = v525 * v531;
  LOBYTE(v530) = *(unsigned char *)(v523 + v519);
  float v533 = v528 * v531;
  float v534 = (float)v530;
  LOBYTE(v530) = *(unsigned char *)(v523 + v522);
  *(float *)&unsigned int v535 = v529 * (float)v530;
  float v536 = *(float *)&v535 + (float)(*(float *)&v527 * v534);
  LOBYTE(v535) = *(unsigned char *)(v524 + v519);
  LOBYTE(v527) = *(unsigned char *)(v524 + v522);
  WORD4(v1200) = (int)(float)((float)((float)(v536 + (float)(v532 * (float)v535)) + (float)(v533 * (float)v527)) * 255.0);
  float v537 = v376 * 1.4142;
  float v538 = v377 * 1.4142;
  int v539 = *(_DWORD *)(a3 + 24);
  int v540 = sub_2194F4090(v15);
  int v541 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v538) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v538) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v538) >> 23) - 127))* 0.69315)- *(float *)(a3 + 112))* *(float *)(a3 + 108));
  if (v541 < 0)
  {
    int v542 = 0;
    int v543 = 0;
  }
  else if (v540 * v539 <= v541)
  {
    int v542 = v539 - 1;
    int v543 = v387 - 1;
  }
  else
  {
    int v542 = v541 / v540;
    int v543 = v541 % v540;
  }
  float v544 = (float)(1 << v542);
  float v545 = (float)(1.0 / v544) * a4;
  float v546 = (float)(1.0 / v544) * a5;
  float v547 = v537 / v544;
  uint64_t v548 = *(void *)(a3 + 32);
  float v549 = (void *)(*(void *)(a3 + 56) + 144 * (v548 * v542 + v543));
  uint64_t v550 = v549[9];
  unint64_t v552 = v549[4];
  uint64_t v551 = v549[5];
  unint64_t v553 = v549[6];
  float v554 = v545 + (float)(v547 * 0.0);
  float v555 = v547 * 0.0;
  float v556 = v554 - (float)(v547 * 0.0);
  float v557 = (float)v552 + -1.001;
  if (v557 >= v556) {
    float v558 = v554 - (float)(v547 * 0.0);
  }
  else {
    float v558 = (float)v552 + -1.001;
  }
  if (v556 >= 0.0) {
    float v559 = v558;
  }
  else {
    float v559 = 0.0;
  }
  float v560 = v546 + (float)(v555 * 0.0);
  float v561 = (float)v553 + -1.001;
  if (v561 >= (float)(v560 - v547)) {
    float v562 = v560 - v547;
  }
  else {
    float v562 = (float)v553 + -1.001;
  }
  if ((float)(v560 - v547) < 0.0) {
    float v562 = 0.0;
  }
  uint64_t v563 = v559;
  uint64_t v564 = v562;
  uint64_t v565 = (v563 + 1);
  unsigned int v566 = v564 + 1;
  uint64_t v567 = v550 + v551 * v564;
  float v568 = (float)v565 - v559;
  float v569 = (float)v566 - v562;
  float v570 = v568 * v569;
  *(float *)&unsigned int v571 = v559 - (float)v559;
  float v572 = *(float *)&v571 * v569;
  *(float *)&unsigned int v573 = (float)v562;
  float v574 = v562 - *(float *)&v573;
  *(float *)&unsigned int v575 = v568 * v574;
  float v576 = *(float *)&v571 * v574;
  LOBYTE(v571) = *(unsigned char *)(v567 + v563);
  LOBYTE(v573) = *(unsigned char *)(v567 + v565);
  *(float *)&unsigned int v577 = v572 * (float)v573;
  float v578 = *(float *)&v577 + (float)(v570 * (float)v571);
  LOBYTE(v577) = *(unsigned char *)(v567 + v551 + v563);
  float v579 = v578 + (float)(*(float *)&v575 * (float)v577);
  LOBYTE(v575) = *(unsigned char *)(v567 + v551 + v565);
  HIWORD(v1200) = (int)(float)((float)(v579 + (float)(v576 * (float)v575)) * 255.0);
  float v580 = v545 + (float)(v547 * 0.70711);
  float v581 = v580 + (float)(v555 * 0.5);
  if (v557 >= v581) {
    float v582 = v580 + (float)(v555 * 0.5);
  }
  else {
    float v582 = v557;
  }
  if (v581 >= 0.0) {
    float v583 = v582;
  }
  else {
    float v583 = 0.0;
  }
  float v584 = v546 + (float)(v555 * 0.70711);
  float v585 = v584 + (float)(v547 * 0.5);
  if (v561 >= v585) {
    float v586 = v584 + (float)(v547 * 0.5);
  }
  else {
    float v586 = v561;
  }
  if (v585 >= 0.0) {
    float v587 = v586;
  }
  else {
    float v587 = 0.0;
  }
  uint64_t v588 = v583;
  uint64_t v589 = v587;
  uint64_t v590 = (v588 + 1);
  unsigned int v591 = v589 + 1;
  uint64_t v592 = v550 + v551 * v589;
  float v593 = (float)v590 - v583;
  float v594 = (float)v591 - v587;
  float v595 = v593 * v594;
  float v596 = v583 - (float)v583;
  float v597 = v596 * v594;
  *(float *)&unsigned int v598 = (float)v587;
  *(float *)&unsigned int v599 = v587 - *(float *)&v598;
  *(float *)&unsigned int v600 = v593 * *(float *)&v599;
  float v601 = v596 * *(float *)&v599;
  LOBYTE(v599) = *(unsigned char *)(v592 + v588);
  LOBYTE(v598) = *(unsigned char *)(v592 + v590);
  *(float *)&unsigned int v602 = v597 * (float)v598;
  float v603 = *(float *)&v602 + (float)(v595 * (float)v599);
  LOBYTE(v602) = *(unsigned char *)(v592 + v551 + v588);
  float v604 = v603 + (float)(*(float *)&v600 * (float)v602);
  LOBYTE(v600) = *(unsigned char *)(v592 + v551 + v590);
  LOWORD(v1201) = (int)(float)((float)(v604 + (float)(v601 * (float)v600)) * 255.0);
  float v605 = v580 + (float)(v555 * -0.5);
  if (v557 >= v605) {
    float v606 = v605;
  }
  else {
    float v606 = v557;
  }
  if (v605 >= 0.0) {
    float v607 = v606;
  }
  else {
    float v607 = 0.0;
  }
  float v608 = v584 + (float)(v547 * -0.5);
  if (v561 >= v608) {
    float v609 = v608;
  }
  else {
    float v609 = v561;
  }
  if (v608 >= 0.0) {
    float v610 = v609;
  }
  else {
    float v610 = 0.0;
  }
  uint64_t v611 = v607;
  uint64_t v612 = v610;
  uint64_t v613 = (v611 + 1);
  unsigned int v614 = v612 + 1;
  uint64_t v615 = v550 + v551 * v612;
  float v616 = (float)v613 - v607;
  float v617 = (float)v614 - v610;
  float v618 = v616 * v617;
  *(float *)&unsigned int v619 = v607 - (float)v607;
  float v620 = *(float *)&v619 * v617;
  *(float *)&unsigned int v621 = (float)v610;
  float v622 = v610 - *(float *)&v621;
  *(float *)&unsigned int v623 = v616 * v622;
  float v624 = *(float *)&v619 * v622;
  LOBYTE(v619) = *(unsigned char *)(v615 + v611);
  LOBYTE(v621) = *(unsigned char *)(v615 + v613);
  *(float *)&unsigned int v625 = v620 * (float)v621;
  float v626 = *(float *)&v625 + (float)(v618 * (float)v619);
  LOBYTE(v625) = *(unsigned char *)(v615 + v551 + v611);
  float v627 = v626 + (float)(*(float *)&v623 * (float)v625);
  LOBYTE(v623) = *(unsigned char *)(v615 + v551 + v613);
  WORD1(v1201) = (int)(float)((float)(v627 + (float)(v624 * (float)v623)) * 255.0);
  float v628 = v555 + v554;
  if (v557 >= v628) {
    float v629 = v628;
  }
  else {
    float v629 = v557;
  }
  if (v628 >= 0.0) {
    float v630 = v629;
  }
  else {
    float v630 = 0.0;
  }
  float v631 = v547 + v560;
  if (v561 >= v631) {
    float v632 = v631;
  }
  else {
    float v632 = v561;
  }
  if (v631 >= 0.0) {
    float v633 = v632;
  }
  else {
    float v633 = 0.0;
  }
  uint64_t v634 = v630;
  uint64_t v635 = v633;
  uint64_t v636 = (v634 + 1);
  unsigned int v637 = v635 + 1;
  uint64_t v638 = v550 + v551 * v635;
  float v639 = (float)v636 - v630;
  float v640 = (float)v637 - v633;
  float v641 = v639 * v640;
  float v642 = v630 - (float)v630;
  float v643 = v642 * v640;
  *(float *)&unsigned int v644 = (float)v633;
  *(float *)&unsigned int v645 = v633 - *(float *)&v644;
  *(float *)&unsigned int v646 = v639 * *(float *)&v645;
  float v647 = v642 * *(float *)&v645;
  LOBYTE(v645) = *(unsigned char *)(v638 + v634);
  LOBYTE(v644) = *(unsigned char *)(v638 + v636);
  *(float *)&unsigned int v648 = v643 * (float)v644;
  float v649 = *(float *)&v648 + (float)(v641 * (float)v645);
  LOBYTE(v648) = *(unsigned char *)(v638 + v551 + v634);
  float v650 = v649 + (float)(*(float *)&v646 * (float)v648);
  LOBYTE(v646) = *(unsigned char *)(v638 + v551 + v636);
  WORD2(v1201) = (int)(float)((float)(v650 + (float)(v647 * (float)v646)) * 255.0);
  float v651 = v545 + (float)(v547 * -0.70711);
  float v652 = v651 + (float)(v555 * -0.5);
  if (v557 >= v652) {
    float v653 = v651 + (float)(v555 * -0.5);
  }
  else {
    float v653 = v557;
  }
  if (v652 >= 0.0) {
    float v654 = v653;
  }
  else {
    float v654 = 0.0;
  }
  float v655 = v546 + (float)(v555 * -0.70711);
  float v656 = v655 + (float)(v547 * -0.5);
  if (v561 >= v656) {
    float v657 = v655 + (float)(v547 * -0.5);
  }
  else {
    float v657 = v561;
  }
  uint64_t v658 = v654;
  if (v656 >= 0.0) {
    float v659 = v657;
  }
  else {
    float v659 = 0.0;
  }
  uint64_t v660 = v659;
  uint64_t v661 = (v658 + 1);
  unsigned int v662 = v660 + 1;
  uint64_t v663 = v550 + v551 * v660;
  float v664 = (float)v661 - v654;
  float v665 = (float)v662 - v659;
  *(float *)&unsigned int v666 = v664 * v665;
  float v667 = v654 - (float)v654;
  float v668 = v667 * v665;
  *(float *)&unsigned int v669 = (float)v659;
  float v670 = v659 - *(float *)&v669;
  float v671 = v664 * v670;
  LOBYTE(v669) = *(unsigned char *)(v663 + v658);
  float v672 = v667 * v670;
  float v673 = (float)v669;
  LOBYTE(v669) = *(unsigned char *)(v663 + v661);
  *(float *)&unsigned int v674 = v668 * (float)v669;
  float v675 = *(float *)&v674 + (float)(*(float *)&v666 * v673);
  LOBYTE(v674) = *(unsigned char *)(v663 + v551 + v658);
  LOBYTE(v666) = *(unsigned char *)(v663 + v551 + v661);
  WORD3(v1201) = (int)(float)((float)((float)(v675 + (float)(v671 * (float)v674)) + (float)(v672 * (float)v666)) * 255.0);
  float v676 = v651 + (float)(v555 * 0.5);
  if (v557 >= v676) {
    float v557 = v676;
  }
  if (v676 >= 0.0) {
    float v677 = v557;
  }
  else {
    float v677 = 0.0;
  }
  float v678 = v655 + (float)(v547 * 0.5);
  if (v561 >= v678) {
    float v679 = v678;
  }
  else {
    float v679 = v561;
  }
  uint64_t v680 = v677;
  if (v678 >= 0.0) {
    float v681 = v679;
  }
  else {
    float v681 = 0.0;
  }
  uint64_t v682 = v681;
  uint64_t v683 = (v680 + 1);
  uint64_t v684 = v550 + v551 * v682;
  uint64_t v685 = v684 + v551;
  float v686 = (float)v683 - v677;
  float v687 = (float)(v682 + 1) - v681;
  *(float *)&unsigned int v688 = v686 * v687;
  float v689 = v677 - (float)v677;
  float v690 = v689 * v687;
  *(float *)&unsigned int v691 = (float)v681;
  float v692 = v681 - *(float *)&v691;
  float v693 = v686 * v692;
  LOBYTE(v691) = *(unsigned char *)(v684 + v680);
  float v694 = v689 * v692;
  float v695 = (float)v691;
  LOBYTE(v691) = *(unsigned char *)(v684 + v683);
  *(float *)&unsigned int v696 = v690 * (float)v691;
  float v697 = *(float *)&v696 + (float)(*(float *)&v688 * v695);
  LOBYTE(v696) = *(unsigned char *)(v685 + v680);
  LOBYTE(v688) = *(unsigned char *)(v685 + v683);
  WORD4(v1201) = (int)(float)((float)((float)(v697 + (float)(v693 * (float)v696)) + (float)(v694 * (float)v688)) * 255.0);
  float v698 = v537 * 1.4142;
  float v699 = v538 * 1.4142;
  int v700 = *(_DWORD *)(a3 + 24);
  int v701 = sub_2194F4090(v15);
  int v702 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v699) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v699) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v699) >> 23) - 127))* 0.69315)- *(float *)(a3 + 112))* *(float *)(a3 + 108));
  if (v702 < 0)
  {
    int v703 = 0;
    int v704 = 0;
  }
  else if (v701 * v700 <= v702)
  {
    int v703 = v700 - 1;
    int v704 = v548 - 1;
  }
  else
  {
    int v703 = v702 / v701;
    int v704 = v702 % v701;
  }
  float v705 = (float)(1 << v703);
  float v706 = (float)(1.0 / v705) * a4;
  float v707 = (float)(1.0 / v705) * a5;
  float v708 = v698 / v705;
  uint64_t v709 = *(void *)(a3 + 32);
  unsigned int v710 = (void *)(*(void *)(a3 + 56) + 144 * (v709 * v703 + v704));
  uint64_t v711 = v710[9];
  unint64_t v713 = v710[4];
  uint64_t v712 = v710[5];
  unint64_t v714 = v710[6];
  float v715 = v706 + (float)(v708 * -0.5);
  float v716 = v708 * 0.0;
  float v717 = v715 + (float)((float)(v708 * 0.0) * 0.70711);
  float v718 = (float)v713 + -1.001;
  if (v718 >= v717) {
    float v719 = v715 + (float)((float)(v708 * 0.0) * 0.70711);
  }
  else {
    float v719 = (float)v713 + -1.001;
  }
  if (v717 >= 0.0) {
    float v720 = v719;
  }
  else {
    float v720 = 0.0;
  }
  float v721 = v707 + (float)(v716 * -0.5);
  float v722 = v721 + (float)(v708 * 0.70711);
  float v723 = (float)v714 + -1.001;
  if (v723 >= v722) {
    float v724 = v721 + (float)(v708 * 0.70711);
  }
  else {
    float v724 = (float)v714 + -1.001;
  }
  if (v722 < 0.0) {
    float v724 = 0.0;
  }
  uint64_t v725 = v720;
  uint64_t v726 = v724;
  uint64_t v727 = (v725 + 1);
  unsigned int v728 = v726 + 1;
  uint64_t v729 = v711 + v712 * v726;
  float v730 = (float)v727 - v720;
  float v731 = (float)v728 - v724;
  float v732 = v730 * v731;
  *(float *)&unsigned int v733 = v720 - (float)v720;
  float v734 = *(float *)&v733 * v731;
  *(float *)&unsigned int v735 = (float)v724;
  float v736 = v724 - *(float *)&v735;
  *(float *)&unsigned int v737 = v730 * v736;
  float v738 = *(float *)&v733 * v736;
  LOBYTE(v733) = *(unsigned char *)(v729 + v725);
  LOBYTE(v735) = *(unsigned char *)(v729 + v727);
  *(float *)&unsigned int v739 = v734 * (float)v735;
  float v740 = *(float *)&v739 + (float)(v732 * (float)v733);
  LOBYTE(v739) = *(unsigned char *)(v729 + v712 + v725);
  float v741 = v740 + (float)(*(float *)&v737 * (float)v739);
  LOBYTE(v737) = *(unsigned char *)(v729 + v712 + v727);
  HIWORD(v1201) = (int)(float)((float)(v741 + (float)(v738 * (float)v737)) * 255.0);
  float v742 = v706 + (float)(v708 * 0.5);
  float v743 = v742 + (float)(v716 * 0.70711);
  if (v718 >= v743) {
    float v744 = v742 + (float)(v716 * 0.70711);
  }
  else {
    float v744 = v718;
  }
  if (v743 < 0.0) {
    float v744 = 0.0;
  }
  float v745 = v707 + (float)(v716 * 0.5);
  float v746 = v745 + (float)(v708 * 0.70711);
  if (v723 >= v746) {
    float v747 = v745 + (float)(v708 * 0.70711);
  }
  else {
    float v747 = v723;
  }
  uint64_t v748 = v744;
  if (v746 >= 0.0) {
    float v749 = v747;
  }
  else {
    float v749 = 0.0;
  }
  uint64_t v750 = v749;
  uint64_t v751 = (v748 + 1);
  unsigned int v752 = v750 + 1;
  uint64_t v753 = v711 + v712 * v750;
  float v754 = (float)v751 - v744;
  float v755 = (float)v752 - v749;
  *(float *)&unsigned int v756 = v754 * v755;
  float v757 = v744 - (float)v744;
  float v758 = v757 * v755;
  *(float *)&unsigned int v759 = (float)v749;
  float v760 = v749 - *(float *)&v759;
  float v761 = v754 * v760;
  LOBYTE(v759) = *(unsigned char *)(v753 + v748);
  float v762 = v757 * v760;
  float v763 = (float)v759;
  LOBYTE(v759) = *(unsigned char *)(v753 + v751);
  *(float *)&unsigned int v764 = v758 * (float)v759;
  float v765 = *(float *)&v764 + (float)(*(float *)&v756 * v763);
  LOBYTE(v764) = *(unsigned char *)(v753 + v712 + v748);
  LOBYTE(v756) = *(unsigned char *)(v753 + v712 + v751);
  LOWORD(v1202) = (int)(float)((float)((float)(v765 + (float)(v761 * (float)v764)) + (float)(v762 * (float)v756)) * 255.0);
  float v766 = (float)(v708 + v706) + (float)(v716 * 0.0);
  if (v718 >= v766) {
    float v767 = (float)(v708 + v706) + (float)(v716 * 0.0);
  }
  else {
    float v767 = v718;
  }
  if (v766 >= 0.0) {
    float v768 = v767;
  }
  else {
    float v768 = 0.0;
  }
  float v769 = (float)(v716 + v707) + (float)(v708 * 0.0);
  if (v723 >= v769) {
    float v770 = (float)(v716 + v707) + (float)(v708 * 0.0);
  }
  else {
    float v770 = v723;
  }
  if (v769 >= 0.0) {
    float v771 = v770;
  }
  else {
    float v771 = 0.0;
  }
  uint64_t v772 = v768;
  uint64_t v773 = v771;
  uint64_t v774 = (v772 + 1);
  unsigned int v775 = v773 + 1;
  uint64_t v776 = v711 + v712 * v773;
  float v777 = (float)v774 - v768;
  float v778 = (float)v775 - v771;
  float v779 = v777 * v778;
  float v780 = v768 - (float)v768;
  float v781 = v780 * v778;
  *(float *)&unsigned int v782 = (float)v771;
  *(float *)&unsigned int v783 = v771 - *(float *)&v782;
  *(float *)&unsigned int v784 = v777 * *(float *)&v783;
  float v785 = v780 * *(float *)&v783;
  LOBYTE(v783) = *(unsigned char *)(v776 + v772);
  LOBYTE(v782) = *(unsigned char *)(v776 + v774);
  *(float *)&unsigned int v786 = v781 * (float)v782;
  float v787 = *(float *)&v786 + (float)(v779 * (float)v783);
  LOBYTE(v786) = *(unsigned char *)(v776 + v712 + v772);
  float v788 = v787 + (float)(*(float *)&v784 * (float)v786);
  LOBYTE(v784) = *(unsigned char *)(v776 + v712 + v774);
  int v789 = (int)(float)((float)(v788 + (float)(v785 * (float)v784)) * 255.0);
  float v790 = v742 + (float)(v716 * -0.70711);
  if (v718 >= v790) {
    float v791 = v790;
  }
  else {
    float v791 = v718;
  }
  if (v790 >= 0.0) {
    float v792 = v791;
  }
  else {
    float v792 = 0.0;
  }
  float v793 = v745 + (float)(v708 * -0.70711);
  if (v723 >= v793) {
    float v794 = v793;
  }
  else {
    float v794 = v723;
  }
  if (v793 >= 0.0) {
    float v795 = v794;
  }
  else {
    float v795 = 0.0;
  }
  uint64_t v796 = v792;
  uint64_t v797 = v795;
  WORD1(v1202) = v789;
  uint64_t v798 = (v796 + 1);
  unsigned int v799 = v797 + 1;
  uint64_t v800 = v711 + v712 * v797;
  float v801 = (float)v798 - v792;
  float v802 = (float)v799 - v795;
  float v803 = v801 * v802;
  float v804 = v792 - (float)v792;
  float v805 = v804 * v802;
  *(float *)&unsigned int v806 = (float)v795;
  *(float *)&unsigned int v807 = v795 - *(float *)&v806;
  *(float *)&unsigned int v808 = v801 * *(float *)&v807;
  float v809 = v804 * *(float *)&v807;
  LOBYTE(v807) = *(unsigned char *)(v800 + v796);
  LOBYTE(v806) = *(unsigned char *)(v800 + v798);
  *(float *)&unsigned int v810 = (float)v806;
  float v811 = v805 * *(float *)&v810;
  LOBYTE(v810) = *(unsigned char *)(v800 + v712 + v796);
  float v812 = (float)(v811 + (float)(v803 * (float)v807)) + (float)(*(float *)&v808 * (float)v810);
  LOBYTE(v808) = *(unsigned char *)(v800 + v712 + v798);
  int v813 = (int)(float)((float)(v812 + (float)(v809 * (float)v808)) * 255.0);
  float v814 = v715 + (float)(v716 * -0.70711);
  if (v718 >= v814) {
    float v815 = v814;
  }
  else {
    float v815 = v718;
  }
  if (v814 >= 0.0) {
    float v816 = v815;
  }
  else {
    float v816 = 0.0;
  }
  float v817 = v721 + (float)(v708 * -0.70711);
  if (v723 >= v817) {
    float v818 = v817;
  }
  else {
    float v818 = v723;
  }
  if (v817 >= 0.0) {
    float v819 = v818;
  }
  else {
    float v819 = 0.0;
  }
  uint64_t v820 = v816;
  uint64_t v821 = v819;
  WORD2(v1202) = v813;
  uint64_t v822 = (v820 + 1);
  unsigned int v823 = v821 + 1;
  uint64_t v824 = v711 + v712 * v821;
  float v825 = (float)v822 - v816;
  float v826 = (float)v823 - v819;
  float v827 = v825 * v826;
  float v828 = v816 - (float)v816;
  float v829 = v828 * v826;
  *(float *)&unsigned int v830 = (float)v819;
  *(float *)&unsigned int v831 = v819 - *(float *)&v830;
  *(float *)&unsigned int v832 = v825 * *(float *)&v831;
  float v833 = v828 * *(float *)&v831;
  LOBYTE(v831) = *(unsigned char *)(v824 + v820);
  LOBYTE(v830) = *(unsigned char *)(v824 + v822);
  *(float *)&unsigned int v834 = (float)v830;
  float v835 = v829 * *(float *)&v834;
  LOBYTE(v834) = *(unsigned char *)(v824 + v712 + v820);
  float v836 = (float)(v835 + (float)(v827 * (float)v831)) + (float)(*(float *)&v832 * (float)v834);
  LOBYTE(v832) = *(unsigned char *)(v824 + v712 + v822);
  WORD3(v1202) = (int)(float)((float)(v836 + (float)(v833 * (float)v832)) * 255.0);
  float v837 = (float)(v706 - v708) + (float)(v716 * 0.0);
  if (v718 >= v837) {
    float v718 = v837;
  }
  if (v837 >= 0.0) {
    float v838 = v718;
  }
  else {
    float v838 = 0.0;
  }
  float v839 = (float)(v707 - v716) + (float)(v708 * 0.0);
  if (v723 >= v839) {
    float v840 = v839;
  }
  else {
    float v840 = v723;
  }
  uint64_t v841 = v838;
  if (v839 >= 0.0) {
    float v842 = v840;
  }
  else {
    float v842 = 0.0;
  }
  uint64_t v843 = v842;
  uint64_t v844 = (v841 + 1);
  uint64_t v845 = v711 + v712 * v843;
  uint64_t v846 = v845 + v712;
  float v847 = (float)v844 - v838;
  float v848 = (float)(v843 + 1) - v842;
  *(float *)&unsigned int v849 = v847 * v848;
  float v850 = v838 - (float)v838;
  float v851 = v850 * v848;
  *(float *)&unsigned int v852 = (float)v842;
  float v853 = v842 - *(float *)&v852;
  float v854 = v847 * v853;
  LOBYTE(v852) = *(unsigned char *)(v845 + v841);
  float v855 = v850 * v853;
  float v856 = (float)v852;
  LOBYTE(v852) = *(unsigned char *)(v845 + v844);
  *(float *)&unsigned int v857 = v851 * (float)v852;
  float v858 = *(float *)&v857 + (float)(*(float *)&v849 * v856);
  LOBYTE(v857) = *(unsigned char *)(v846 + v841);
  LOBYTE(v849) = *(unsigned char *)(v846 + v844);
  WORD4(v1202) = (int)(float)((float)((float)(v858 + (float)(v854 * (float)v857)) + (float)(v855 * (float)v849)) * 255.0);
  float v859 = v698 * 1.4142;
  float v860 = v699 * 1.4142;
  int v861 = *(_DWORD *)(a3 + 24);
  int v862 = sub_2194F4090(v15);
  int v863 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v860) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v860) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v860) >> 23) - 127))* 0.69315)- *(float *)(a3 + 112))* *(float *)(a3 + 108));
  if (v863 < 0)
  {
    int v864 = 0;
    int v865 = 0;
  }
  else if (v862 * v861 <= v863)
  {
    int v864 = v861 - 1;
    int v865 = v709 - 1;
  }
  else
  {
    int v864 = v863 / v862;
    int v865 = v863 % v862;
  }
  float v866 = (float)(1 << v864);
  float v867 = (float)(1.0 / v866) * a4;
  float v868 = (float)(1.0 / v866) * a5;
  float v869 = v859 / v866;
  uint64_t v870 = *(void *)(a3 + 32);
  unsigned int v871 = (void *)(*(void *)(a3 + 56) + 144 * (v870 * v864 + v865));
  uint64_t v872 = v871[9];
  unint64_t v874 = v871[4];
  uint64_t v873 = v871[5];
  unint64_t v875 = v871[6];
  float v876 = v867 + (float)(v869 * 0.0);
  float v877 = v869 * 0.0;
  float v878 = v876 - (float)(v869 * 0.0);
  float v879 = (float)v874 + -1.001;
  if (v879 >= v878) {
    float v880 = v876 - (float)(v869 * 0.0);
  }
  else {
    float v880 = (float)v874 + -1.001;
  }
  if (v878 >= 0.0) {
    float v881 = v880;
  }
  else {
    float v881 = 0.0;
  }
  float v882 = v868 + (float)(v877 * 0.0);
  float v883 = (float)v875 + -1.001;
  if (v883 >= (float)(v882 - v869)) {
    float v884 = v882 - v869;
  }
  else {
    float v884 = (float)v875 + -1.001;
  }
  if ((float)(v882 - v869) < 0.0) {
    float v884 = 0.0;
  }
  uint64_t v885 = v881;
  uint64_t v886 = v884;
  uint64_t v887 = (v885 + 1);
  unsigned int v888 = v886 + 1;
  uint64_t v889 = v872 + v873 * v886;
  float v890 = (float)v887 - v881;
  float v891 = (float)v888 - v884;
  float v892 = v890 * v891;
  *(float *)&unsigned int v893 = v881 - (float)v881;
  float v894 = *(float *)&v893 * v891;
  *(float *)&unsigned int v895 = (float)v884;
  float v896 = v884 - *(float *)&v895;
  *(float *)&unsigned int v897 = v890 * v896;
  float v898 = *(float *)&v893 * v896;
  LOBYTE(v893) = *(unsigned char *)(v889 + v885);
  LOBYTE(v895) = *(unsigned char *)(v889 + v887);
  *(float *)&unsigned int v899 = v894 * (float)v895;
  float v900 = *(float *)&v899 + (float)(v892 * (float)v893);
  LOBYTE(v899) = *(unsigned char *)(v889 + v873 + v885);
  float v901 = v900 + (float)(*(float *)&v897 * (float)v899);
  LOBYTE(v897) = *(unsigned char *)(v889 + v873 + v887);
  HIWORD(v1202) = (int)(float)((float)(v901 + (float)(v898 * (float)v897)) * 255.0);
  float v902 = v867 + (float)(v869 * 0.70711);
  float v903 = v902 + (float)(v877 * 0.5);
  if (v879 >= v903) {
    float v904 = v902 + (float)(v877 * 0.5);
  }
  else {
    float v904 = v879;
  }
  if (v903 >= 0.0) {
    float v905 = v904;
  }
  else {
    float v905 = 0.0;
  }
  float v906 = v868 + (float)(v877 * 0.70711);
  float v907 = v906 + (float)(v869 * 0.5);
  if (v883 >= v907) {
    float v908 = v906 + (float)(v869 * 0.5);
  }
  else {
    float v908 = v883;
  }
  if (v907 >= 0.0) {
    float v909 = v908;
  }
  else {
    float v909 = 0.0;
  }
  uint64_t v910 = v905;
  uint64_t v911 = v909;
  uint64_t v912 = (v910 + 1);
  unsigned int v913 = v911 + 1;
  uint64_t v914 = v872 + v873 * v911;
  float v915 = (float)v912 - v905;
  float v916 = (float)v913 - v909;
  float v917 = v915 * v916;
  float v918 = v905 - (float)v905;
  float v919 = v918 * v916;
  *(float *)&unsigned int v920 = (float)v909;
  *(float *)&unsigned int v921 = v909 - *(float *)&v920;
  *(float *)&unsigned int v922 = v915 * *(float *)&v921;
  float v923 = v918 * *(float *)&v921;
  LOBYTE(v921) = *(unsigned char *)(v914 + v910);
  LOBYTE(v920) = *(unsigned char *)(v914 + v912);
  *(float *)&unsigned int v924 = v919 * (float)v920;
  float v925 = *(float *)&v924 + (float)(v917 * (float)v921);
  LOBYTE(v924) = *(unsigned char *)(v914 + v873 + v910);
  float v926 = v925 + (float)(*(float *)&v922 * (float)v924);
  LOBYTE(v922) = *(unsigned char *)(v914 + v873 + v912);
  v1203[0] = (int)(float)((float)(v926 + (float)(v923 * (float)v922)) * 255.0);
  float v927 = v902 + (float)(v877 * -0.5);
  if (v879 >= v927) {
    float v928 = v927;
  }
  else {
    float v928 = v879;
  }
  if (v927 >= 0.0) {
    float v929 = v928;
  }
  else {
    float v929 = 0.0;
  }
  float v930 = v906 + (float)(v869 * -0.5);
  if (v883 >= v930) {
    float v931 = v930;
  }
  else {
    float v931 = v883;
  }
  if (v930 >= 0.0) {
    float v932 = v931;
  }
  else {
    float v932 = 0.0;
  }
  uint64_t v933 = v929;
  uint64_t v934 = v932;
  uint64_t v935 = (v933 + 1);
  unsigned int v936 = v934 + 1;
  uint64_t v937 = v872 + v873 * v934;
  float v938 = (float)v935 - v929;
  float v939 = (float)v936 - v932;
  float v940 = v938 * v939;
  *(float *)&unsigned int v941 = v929 - (float)v929;
  float v942 = *(float *)&v941 * v939;
  *(float *)&unsigned int v943 = (float)v932;
  float v944 = v932 - *(float *)&v943;
  *(float *)&unsigned int v945 = v938 * v944;
  float v946 = *(float *)&v941 * v944;
  LOBYTE(v941) = *(unsigned char *)(v937 + v933);
  LOBYTE(v943) = *(unsigned char *)(v937 + v935);
  *(float *)&unsigned int v947 = v942 * (float)v943;
  float v948 = *(float *)&v947 + (float)(v940 * (float)v941);
  LOBYTE(v947) = *(unsigned char *)(v937 + v873 + v933);
  float v949 = v948 + (float)(*(float *)&v945 * (float)v947);
  LOBYTE(v945) = *(unsigned char *)(v937 + v873 + v935);
  v1203[1] = (int)(float)((float)(v949 + (float)(v946 * (float)v945)) * 255.0);
  float v950 = v877 + v876;
  if (v879 >= v950) {
    float v951 = v950;
  }
  else {
    float v951 = v879;
  }
  if (v950 >= 0.0) {
    float v952 = v951;
  }
  else {
    float v952 = 0.0;
  }
  float v953 = v869 + v882;
  if (v883 >= v953) {
    float v954 = v953;
  }
  else {
    float v954 = v883;
  }
  if (v953 >= 0.0) {
    float v955 = v954;
  }
  else {
    float v955 = 0.0;
  }
  uint64_t v956 = v952;
  uint64_t v957 = v955;
  uint64_t v958 = (v956 + 1);
  unsigned int v959 = v957 + 1;
  uint64_t v960 = v872 + v873 * v957;
  float v961 = (float)v958 - v952;
  float v962 = (float)v959 - v955;
  float v963 = v961 * v962;
  float v964 = v952 - (float)v952;
  float v965 = v964 * v962;
  *(float *)&unsigned int v966 = (float)v955;
  *(float *)&unsigned int v967 = v955 - *(float *)&v966;
  *(float *)&unsigned int v968 = v961 * *(float *)&v967;
  float v969 = v964 * *(float *)&v967;
  LOBYTE(v967) = *(unsigned char *)(v960 + v956);
  LOBYTE(v966) = *(unsigned char *)(v960 + v958);
  *(float *)&unsigned int v970 = v965 * (float)v966;
  float v971 = *(float *)&v970 + (float)(v963 * (float)v967);
  LOBYTE(v970) = *(unsigned char *)(v960 + v873 + v956);
  float v972 = v971 + (float)(*(float *)&v968 * (float)v970);
  LOBYTE(v968) = *(unsigned char *)(v960 + v873 + v958);
  v1203[2] = (int)(float)((float)(v972 + (float)(v969 * (float)v968)) * 255.0);
  float v973 = v867 + (float)(v869 * -0.70711);
  float v974 = v973 + (float)(v877 * -0.5);
  if (v879 >= v974) {
    float v975 = v973 + (float)(v877 * -0.5);
  }
  else {
    float v975 = v879;
  }
  if (v974 >= 0.0) {
    float v976 = v975;
  }
  else {
    float v976 = 0.0;
  }
  float v977 = v868 + (float)(v877 * -0.70711);
  float v978 = v977 + (float)(v869 * -0.5);
  if (v883 >= v978) {
    float v979 = v977 + (float)(v869 * -0.5);
  }
  else {
    float v979 = v883;
  }
  uint64_t v980 = v976;
  if (v978 >= 0.0) {
    float v981 = v979;
  }
  else {
    float v981 = 0.0;
  }
  uint64_t v982 = v981;
  uint64_t v983 = (v980 + 1);
  unsigned int v984 = v982 + 1;
  uint64_t v985 = v872 + v873 * v982;
  float v986 = (float)v983 - v976;
  float v987 = (float)v984 - v981;
  *(float *)&unsigned int v988 = v986 * v987;
  float v989 = v976 - (float)v976;
  float v990 = v989 * v987;
  *(float *)&unsigned int v991 = (float)v981;
  float v992 = v981 - *(float *)&v991;
  float v993 = v986 * v992;
  LOBYTE(v991) = *(unsigned char *)(v985 + v980);
  float v994 = v989 * v992;
  float v995 = (float)v991;
  LOBYTE(v991) = *(unsigned char *)(v985 + v983);
  *(float *)&unsigned int v996 = v990 * (float)v991;
  float v997 = *(float *)&v996 + (float)(*(float *)&v988 * v995);
  LOBYTE(v996) = *(unsigned char *)(v985 + v873 + v980);
  LOBYTE(v988) = *(unsigned char *)(v985 + v873 + v983);
  v1203[3] = (int)(float)((float)((float)(v997 + (float)(v993 * (float)v996)) + (float)(v994 * (float)v988)) * 255.0);
  float v998 = v973 + (float)(v877 * 0.5);
  if (v879 >= v998) {
    float v879 = v998;
  }
  if (v998 >= 0.0) {
    float v999 = v879;
  }
  else {
    float v999 = 0.0;
  }
  float v1000 = v977 + (float)(v869 * 0.5);
  if (v883 >= v1000) {
    float v1001 = v1000;
  }
  else {
    float v1001 = v883;
  }
  uint64_t v1002 = v999;
  if (v1000 >= 0.0) {
    float v1003 = v1001;
  }
  else {
    float v1003 = 0.0;
  }
  uint64_t v1004 = v1003;
  uint64_t v1005 = (v1002 + 1);
  uint64_t v1006 = v872 + v873 * v1004;
  uint64_t v1007 = v1006 + v873;
  float v1008 = (float)v1005 - v999;
  float v1009 = (float)(v1004 + 1) - v1003;
  *(float *)&unsigned int v1010 = v1008 * v1009;
  float v1011 = v999 - (float)v999;
  float v1012 = v1011 * v1009;
  *(float *)&unsigned int v1013 = (float)v1003;
  float v1014 = v1003 - *(float *)&v1013;
  float v1015 = v1008 * v1014;
  LOBYTE(v1013) = *(unsigned char *)(v1006 + v1002);
  float v1016 = v1011 * v1014;
  float v1017 = (float)v1013;
  LOBYTE(v1013) = *(unsigned char *)(v1006 + v1005);
  *(float *)&unsigned int v1018 = v1012 * (float)v1013;
  float v1019 = *(float *)&v1018 + (float)(*(float *)&v1010 * v1017);
  LOBYTE(v1018) = *(unsigned char *)(v1007 + v1002);
  LOBYTE(v1010) = *(unsigned char *)(v1007 + v1005);
  v1203[4] = (int)(float)((float)((float)(v1019 + (float)(v1015 * (float)v1018)) + (float)(v1016 * (float)v1010)) * 255.0);
  int v1020 = *(_DWORD *)(a3 + 24);
  int v1021 = sub_2194F4090(v15);
  int v1022 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v860 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v860 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v860 * 1.4142) >> 23) - 127))* 0.69315)- *(float *)(a3 + 112))* *(float *)(a3 + 108));
  if (v1022 < 0)
  {
    int v1023 = 0;
    int v1024 = 0;
  }
  else if (v1021 * v1020 <= v1022)
  {
    int v1023 = v1020 - 1;
    int v1024 = v870 - 1;
  }
  else
  {
    int v1023 = v1022 / v1021;
    int v1024 = v1022 % v1021;
  }
  uint64_t v1025 = 0;
  float v1026 = (float)(1 << v1023);
  float v1027 = (float)(1.0 / v1026) * a4;
  float v1028 = (float)(1.0 / v1026) * a5;
  float v1029 = (float)(v859 * 1.4142) / v1026;
  unsigned int v1030 = (void *)(*(void *)(a3 + 56) + 144 * (*(void *)(a3 + 32) * v1023 + v1024));
  uint64_t v1031 = v1030[9];
  unint64_t v1033 = v1030[4];
  uint64_t v1032 = v1030[5];
  unint64_t v1034 = v1030[6];
  float v1035 = v1027 + (float)(v1029 * -0.5);
  float v1036 = v1029 * 0.0;
  float v1037 = v1035 + (float)((float)(v1029 * 0.0) * 0.70711);
  float v1038 = (float)v1033 + -1.001;
  if (v1038 >= v1037) {
    float v1039 = v1035 + (float)((float)(v1029 * 0.0) * 0.70711);
  }
  else {
    float v1039 = (float)v1033 + -1.001;
  }
  if (v1037 >= 0.0) {
    float v1040 = v1039;
  }
  else {
    float v1040 = 0.0;
  }
  float v1041 = v1028 + (float)(v1036 * -0.5);
  float v1042 = v1041 + (float)(v1029 * 0.70711);
  float v1043 = (float)v1034 + -1.001;
  if (v1043 >= v1042) {
    float v1044 = v1041 + (float)(v1029 * 0.70711);
  }
  else {
    float v1044 = (float)v1034 + -1.001;
  }
  if (v1042 < 0.0) {
    float v1044 = 0.0;
  }
  uint64_t v1045 = v1040;
  uint64_t v1046 = v1044;
  uint64_t v1047 = (v1045 + 1);
  unsigned int v1048 = v1046 + 1;
  uint64_t v1049 = v1031 + v1032 * v1046;
  float v1050 = (float)v1047 - v1040;
  float v1051 = (float)v1048 - v1044;
  float v1052 = v1050 * v1051;
  float v1053 = v1040 - (float)v1040;
  float v1054 = v1053 * v1051;
  *(float *)&unsigned int v1055 = (float)v1044;
  *(float *)&unsigned int v1056 = v1044 - *(float *)&v1055;
  float v1057 = v1050 * *(float *)&v1056;
  float v1058 = v1053 * *(float *)&v1056;
  LOBYTE(v1056) = *(unsigned char *)(v1049 + v1045);
  LOBYTE(v1055) = *(unsigned char *)(v1049 + v1047);
  *(float *)&unsigned int v1059 = v1054 * (float)v1055;
  float v1060 = *(float *)&v1059 + (float)(v1052 * (float)v1056);
  LOBYTE(v1059) = *(unsigned char *)(v1049 + v1032 + v1045);
  *(float *)&unsigned int v1061 = (float)v1059;
  float v1062 = v1060 + (float)(v1057 * *(float *)&v1061);
  LOBYTE(v1061) = *(unsigned char *)(v1049 + v1032 + v1047);
  v1203[7] = (int)(float)((float)(v1062 + (float)(v1058 * (float)v1061)) * 255.0);
  float v1063 = v1027 + (float)(v1029 * 0.5);
  float v1064 = v1063 + (float)(v1036 * 0.70711);
  if (v1038 >= v1064) {
    float v1065 = v1063 + (float)(v1036 * 0.70711);
  }
  else {
    float v1065 = v1038;
  }
  if (v1064 >= 0.0) {
    float v1066 = v1065;
  }
  else {
    float v1066 = 0.0;
  }
  float v1067 = v1028 + (float)(v1036 * 0.5);
  float v1068 = v1067 + (float)(v1029 * 0.70711);
  if (v1043 >= v1068) {
    float v1069 = v1067 + (float)(v1029 * 0.70711);
  }
  else {
    float v1069 = v1043;
  }
  if (v1068 >= 0.0) {
    float v1070 = v1069;
  }
  else {
    float v1070 = 0.0;
  }
  uint64_t v1071 = v1066;
  uint64_t v1072 = v1070;
  uint64_t v1073 = (v1071 + 1);
  unsigned int v1074 = v1072 + 1;
  uint64_t v1075 = v1031 + v1032 * v1072;
  float v1076 = (float)v1073 - v1066;
  float v1077 = (float)v1074 - v1070;
  float v1078 = v1076 * v1077;
  *(float *)&unsigned int v1079 = v1066 - (float)v1066;
  float v1080 = *(float *)&v1079 * v1077;
  *(float *)&unsigned int v1081 = (float)v1070;
  float v1082 = v1070 - *(float *)&v1081;
  *(float *)&unsigned int v1083 = v1076 * v1082;
  float v1084 = *(float *)&v1079 * v1082;
  LOBYTE(v1079) = *(unsigned char *)(v1075 + v1071);
  LOBYTE(v1081) = *(unsigned char *)(v1075 + v1073);
  *(float *)&unsigned int v1085 = v1080 * (float)v1081;
  float v1086 = *(float *)&v1085 + (float)(v1078 * (float)v1079);
  LOBYTE(v1085) = *(unsigned char *)(v1075 + v1032 + v1071);
  float v1087 = v1086 + (float)(*(float *)&v1083 * (float)v1085);
  LOBYTE(v1083) = *(unsigned char *)(v1075 + v1032 + v1073);
  int v1088 = (int)(float)((float)(v1087 + (float)(v1084 * (float)v1083)) * 255.0);
  float v1089 = (float)(v1029 + v1027) + (float)(v1036 * 0.0);
  if (v1038 >= v1089) {
    float v1090 = (float)(v1029 + v1027) + (float)(v1036 * 0.0);
  }
  else {
    float v1090 = v1038;
  }
  if (v1089 >= 0.0) {
    float v1091 = v1090;
  }
  else {
    float v1091 = 0.0;
  }
  float v1092 = (float)(v1036 + v1028) + (float)(v1029 * 0.0);
  if (v1043 >= v1092) {
    float v1093 = (float)(v1036 + v1028) + (float)(v1029 * 0.0);
  }
  else {
    float v1093 = v1043;
  }
  if (v1092 >= 0.0) {
    float v1094 = v1093;
  }
  else {
    float v1094 = 0.0;
  }
  uint64_t v1095 = v1091;
  uint64_t v1096 = v1094;
  v1203[8] = v1088;
  uint64_t v1097 = (v1095 + 1);
  unsigned int v1098 = v1096 + 1;
  uint64_t v1099 = v1031 + v1032 * v1096;
  float v1100 = (float)v1097 - v1091;
  float v1101 = (float)v1098 - v1094;
  float v1102 = v1100 * v1101;
  float v1103 = v1091 - (float)v1091;
  float v1104 = v1103 * v1101;
  *(float *)&unsigned int v1105 = (float)v1094;
  *(float *)&unsigned int v1106 = v1094 - *(float *)&v1105;
  float v1107 = v1100 * *(float *)&v1106;
  float v1108 = v1103 * *(float *)&v1106;
  LOBYTE(v1106) = *(unsigned char *)(v1099 + v1095);
  LOBYTE(v1105) = *(unsigned char *)(v1099 + v1097);
  *(float *)&unsigned int v1109 = (float)v1105;
  float v1110 = v1104 * *(float *)&v1109;
  LOBYTE(v1109) = *(unsigned char *)(v1099 + v1032 + v1095);
  float v1111 = v1110 + (float)(v1102 * (float)v1106);
  *(float *)&unsigned int v1112 = (float)v1109;
  LOBYTE(v1112) = *(unsigned char *)(v1099 + v1032 + v1097);
  v1203[9] = (int)(float)((float)((float)(v1111 + (float)(v1107 * (float)v1109)) + (float)(v1108 * (float)v1112)) * 255.0);
  float v1113 = v1063 + (float)(v1036 * -0.70711);
  if (v1038 >= v1113) {
    float v1114 = v1113;
  }
  else {
    float v1114 = v1038;
  }
  if (v1113 >= 0.0) {
    float v1115 = v1114;
  }
  else {
    float v1115 = 0.0;
  }
  float v1116 = v1067 + (float)(v1029 * -0.70711);
  if (v1043 >= v1116) {
    float v1117 = v1116;
  }
  else {
    float v1117 = v1043;
  }
  uint64_t v1118 = v1115;
  if (v1116 >= 0.0) {
    float v1119 = v1117;
  }
  else {
    float v1119 = 0.0;
  }
  uint64_t v1120 = v1119;
  uint64_t v1121 = (v1118 + 1);
  unsigned int v1122 = v1120 + 1;
  uint64_t v1123 = v1031 + v1032 * v1120;
  float v1124 = (float)v1121 - v1115;
  float v1125 = (float)v1122 - v1119;
  *(float *)&unsigned int v1126 = v1124 * v1125;
  float v1127 = v1115 - (float)v1115;
  float v1128 = v1127 * v1125;
  *(float *)&unsigned int v1129 = (float)v1119;
  float v1130 = v1119 - *(float *)&v1129;
  float v1131 = v1124 * v1130;
  LOBYTE(v1129) = *(unsigned char *)(v1123 + v1118);
  float v1132 = v1127 * v1130;
  float v1133 = (float)v1129;
  LOBYTE(v1129) = *(unsigned char *)(v1123 + v1121);
  *(float *)&unsigned int v1134 = v1128 * (float)v1129;
  float v1135 = *(float *)&v1134 + (float)(*(float *)&v1126 * v1133);
  LOBYTE(v1134) = *(unsigned char *)(v1123 + v1032 + v1118);
  LOBYTE(v1126) = *(unsigned char *)(v1123 + v1032 + v1121);
  v1203[10] = (int)(float)((float)((float)(v1135 + (float)(v1131 * (float)v1134)) + (float)(v1132 * (float)v1126))
                         * 255.0);
  float v1136 = v1035 + (float)(v1036 * -0.70711);
  if (v1038 >= v1136) {
    float v1137 = v1136;
  }
  else {
    float v1137 = v1038;
  }
  if (v1136 >= 0.0) {
    float v1138 = v1137;
  }
  else {
    float v1138 = 0.0;
  }
  float v1139 = v1041 + (float)(v1029 * -0.70711);
  if (v1043 >= v1139) {
    float v1140 = v1139;
  }
  else {
    float v1140 = v1043;
  }
  uint64_t v1141 = v1138;
  if (v1139 >= 0.0) {
    float v1142 = v1140;
  }
  else {
    float v1142 = 0.0;
  }
  uint64_t v1143 = v1142;
  uint64_t v1144 = (v1141 + 1);
  unsigned int v1145 = v1143 + 1;
  uint64_t v1146 = v1031 + v1032 * v1143;
  float v1147 = (float)v1144 - v1138;
  float v1148 = (float)v1145 - v1142;
  *(float *)&unsigned int v1149 = v1147 * v1148;
  float v1150 = v1138 - (float)v1138;
  float v1151 = v1150 * v1148;
  *(float *)&unsigned int v1152 = (float)v1142;
  float v1153 = v1142 - *(float *)&v1152;
  float v1154 = v1147 * v1153;
  LOBYTE(v1152) = *(unsigned char *)(v1146 + v1141);
  float v1155 = v1150 * v1153;
  float v1156 = (float)v1152;
  LOBYTE(v1152) = *(unsigned char *)(v1146 + v1144);
  *(float *)&unsigned int v1157 = v1151 * (float)v1152;
  float v1158 = *(float *)&v1157 + (float)(*(float *)&v1149 * v1156);
  LOBYTE(v1157) = *(unsigned char *)(v1146 + v1032 + v1141);
  LOBYTE(v1149) = *(unsigned char *)(v1146 + v1032 + v1144);
  v1203[11] = (int)(float)((float)((float)(v1158 + (float)(v1154 * (float)v1157)) + (float)(v1155 * (float)v1149))
                         * 255.0);
  float v1159 = (float)(v1027 - v1029) + (float)(v1036 * 0.0);
  if (v1038 >= v1159) {
    float v1038 = v1159;
  }
  if (v1159 >= 0.0) {
    float v1160 = v1038;
  }
  else {
    float v1160 = 0.0;
  }
  float v1161 = (float)(v1028 - v1036) + (float)(v1029 * 0.0);
  if (v1043 >= v1161) {
    float v1162 = v1161;
  }
  else {
    float v1162 = v1043;
  }
  if (v1161 >= 0.0) {
    float v1163 = v1162;
  }
  else {
    float v1163 = 0.0;
  }
  uint64_t v1164 = v1160;
  uint64_t v1165 = v1163;
  uint64_t v1166 = (v1164 + 1);
  uint64_t v1167 = v1031 + v1032 * v1165;
  uint64_t v1168 = v1167 + v1032;
  float v1169 = (float)v1166 - v1160;
  float v1170 = (float)(v1165 + 1) - v1163;
  v1171.f32[0] = v1169 * v1170;
  *(float *)&unsigned int v1172 = v1160 - (float)v1160;
  float v1173 = *(float *)&v1172 * v1170;
  *(float *)&unsigned int v1174 = (float)v1163;
  float v1175 = v1163 - *(float *)&v1174;
  float v1176 = v1169 * v1175;
  float v1177 = *(float *)&v1172 * v1175;
  LOBYTE(v1172) = *(unsigned char *)(v1167 + v1164);
  LOBYTE(v1174) = *(unsigned char *)(v1167 + v1166);
  *(float *)&unsigned int v1178 = v1173 * (float)v1174;
  *(float *)&unsigned int v1179 = *(float *)&v1178 + (float)(v1171.f32[0] * (float)v1172);
  LOBYTE(v1178) = *(unsigned char *)(v1168 + v1164);
  v1180.f32[0] = (float)v1178;
  v1181.f32[0] = *(float *)&v1179 + (float)(v1176 * v1180.f32[0]);
  LOBYTE(v1179) = *(unsigned char *)(v1168 + v1166);
  v1182.f32[0] = (float)v1179;
  v1203[12] = (int)(float)((float)(v1181.f32[0] + (float)(v1177 * v1182.f32[0])) * 255.0);
  float32x2_t v1183 = 0;
  do
  {
    v1181.i16[0] = *(&v1196 + a2[v1025].u16[2]);
    v1182.i16[0] = *(&v1196 + a2[v1025 + 2].u16[0]);
    v1180.i16[0] = *(&v1196 + a2[v1025].u16[3]);
    v1171.i16[0] = *(&v1196 + a2[v1025 + 2].u16[1]);
    float v1184 = (float)v1181.u32[0] - (float)v1180.u32[0];
    float v1185 = (float)v1182.u32[0] - (float)v1171.u32[0];
    float32x2_t v1180 = a2[v1025 + 1];
    float32x2_t v1171 = *(float32x2_t *)((char *)&a2[v1025 + 2] + 4);
    float32x2_t v1181 = vmul_n_f32(v1180, v1184);
    float32x2_t v1182 = vmul_n_f32(v1171, v1185);
    float32x2_t v1183 = vadd_f32(vadd_f32(v1183, v1181), v1182);
    v1025 += 3;
  }
  while (v1025 != 66);
  v1181.i16[0] = *(&v1196 + a2[66].u16[2]);
  v1182.i16[0] = *(&v1196 + a2[66].u16[3]);
  float32x2_t v1186 = vmla_n_f32(v1183, a2[67], (float)v1181.u32[0] - (float)v1182.u32[0]);
  int32x2_t v1187 = vceqz_f32(v1186);
  float v1188 = 0.0;
  if ((vand_s8((int8x8_t)vdup_lane_s32(v1187, 1), (int8x8_t)v1187).u8[0] & 1) == 0)
  {
    float v1189 = fabsf(v1186.f32[1]) + 0.0000001;
    BOOL v1190 = v1186.f32[0] <= 0.0;
    float v1191 = (float)(v1186.f32[0] + v1189) / (float)(v1189 - v1186.f32[0]);
    v1186.f32[0] = (float)(v1186.f32[0] - v1189) / (float)(v1186.f32[0] + v1189);
    float v1192 = 0.7854;
    if (v1190)
    {
      float v1192 = 2.3562;
      v1186.f32[0] = v1191;
    }
    v1186.f32[0] = v1192
                 + (float)((float)((float)((float)(v1186.f32[0] * 0.1821) * v1186.f32[0]) + -0.9675) * v1186.f32[0]);
    if (v1186.f32[1] >= 0.0) {
      float v1188 = v1186.f32[0];
    }
    else {
      float v1188 = 6.2832 - v1186.f32[0];
    }
  }
  if (v1188 >= 0.0) {
    float v1193 = v1188;
  }
  else {
    float v1193 = 0.0;
  }
  if (v1193 > 6.2832) {
    float v1193 = 6.2832;
  }
  *a1 = v1193;
  return 1;
}

uint64_t sub_2194B84D0()
{
  return v0;
}

void sub_2194B84EC(atomic_ullong *a1@<X8>)
{
}

uint64_t sub_2194B8504(uint64_t a1, long long *a2)
{
  *(void *)a1 = 0x4120000042A00000;
  *(_OWORD *)(a1 + 8) = xmmword_21950C3D0;
  *(void *)(a1 + 24) = 0x3E8000000064;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 36) = 0xC800000050;
  *(unsigned char *)(a1 + 44) = 0;
  *(void *)(a1 + 48) = 0x3F96E9DD3F5425F2;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  long long v3 = *a2;
  long long v4 = a2[1];
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 44) = *(long long *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v3;
  *(float *)(a1 + 60) = (float)(int)*(float *)(a1 + 60);
  *(_DWORD *)(a1 + 112) = 1115684864;
  uint64_t v6 = *((int *)a2 + 4) * (uint64_t)*((int *)a2 + 3);
  uint64_t v7 = *((int *)a2 + 5);
  uint64_t v8 = v6 * v7;
  if (v6 * v7)
  {
    sub_2194BC1C8(a1 + 88, v6 * v7);
    uint64_t v9 = 0;
    do
    {
      long long v10 = (void *)(*(void *)(a1 + 88) + v9);
      v10[1] = *v10;
      int v12 = 0;
      sub_2194BC3D0((uint64_t)v10, 0x200uLL, (const float *)&v12);
      v9 += 24;
      --v8;
    }
    while (v8);
  }
  return a1;
}

void sub_2194B861C(_Unwind_Exception *a1)
{
  sub_21948B590(v2);
  sub_21948B590(v1);
  _Unwind_Resume(a1);
}

void sub_2194B8640(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a5 + 8) = *(void *)a5;
  *(void *)(a6 + 8) = *(void *)a6;
  sub_2194B8760(a1, a2, a3, a4, (float **)a5, a6);
  sub_2194B8CC0((float *)a1, a2, (uint64_t)a3, (char **)a5, v11, v12, v13, v14, v15, v16, v17, v18);
  sub_2194B8CC0((float *)a1, a2, (uint64_t)a3, (char **)a6, v19, v20, v21, v22, v23, v24, v25, v26);
  if (*(void *)a6 != *(void *)(a6 + 8)) {
    sub_2194B9FB0((char **)a6, 0, 0, *(int *)(a1 + 40), 0, 0);
  }
  if (*(unsigned char *)(a1 + 44))
  {
    v27.n128_u32[0] = *(_DWORD *)(a1 + 112);
    sub_2194BAEC4((uint64_t *)a5, (uint64_t *)(a1 + 88), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20), *(int *)(a1 + 24), *(void *)(a2 + 8), *(void *)(a2 + 16), v27, *(float *)a1, *(float *)(a1 + 48), *(float *)(a1 + 52), *(float *)(a1 + 56), 1, 0);
  }
  else
  {
    sub_2194BB8D4((void **)a5, (uint64_t *)(a1 + 64), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *(void *)(a2 + 8), *(void *)(a2 + 16), 1u);
  }
}

void sub_2194B8760(uint64_t a1, uint64_t a2, void *a3, void *a4, float **a5, uint64_t a6)
{
  uint64_t v6 = (uint64_t)a5;
  uint64_t v8 = a3[6];
  uint64_t v7 = a3[7];
  float v72 = 0;
  float v73 = 0;
  float v74 = 0;
  unint64_t v9 = a3[2];
  if (v9)
  {
    long long v10 = 0;
    uint64_t v11 = 0;
    double v12 = 0;
    int v13 = 954437177 * ((unint64_t)(v7 - v8) >> 4) - 1;
    uint64_t v14 = *a4;
    uint64_t v65 = a4;
    int v64 = v13;
    while (1)
    {
      uint64_t v15 = 16 * v11;
      if (*(_DWORD *)(v14 + 16 * v11)) {
        break;
      }
LABEL_4:
      if (++v11 >= v9) {
        goto LABEL_55;
      }
    }
    unint64_t v16 = 0;
    int v17 = 2 * v11;
    float v18 = (float)(1 << v11);
    std::string __p = (float *)v12;
    uint64_t v70 = v11;
    uint64_t v68 = 16 * v11;
    int v67 = 2 * v11;
    while (1)
    {
      unint64_t v20 = *(unsigned int *)(*(void *)(v14 + 16 * v11 + 8) + 4 * v16);
      signed int v21 = (v20 >> 21) & 1;
      int v22 = v21 | v17;
      if (v21 | v17) {
        BOOL v23 = v22 == v13;
      }
      else {
        BOOL v23 = 1;
      }
      if (v23) {
        goto LABEL_9;
      }
      int v24 = v20 & 0x7FF;
      uint64_t v25 = (v20 >> 11) & 0x3FF;
      uint64_t v26 = *(void *)(*(void *)(a3[6] + 144 * v22 + 120) + 8 * v25);
      unsigned int v27 = *(unsigned __int16 *)(v26 + 4 * (v20 & 0x7FF));
      float v28 = *(float *)(a2 + 4);
      float v29 = (float)(v28 * powf(*(float *)(a2 + 104), (float)v21)) * v18;
      unsigned int v30 = *(unsigned __int16 *)(v26 + 2 * (2 * v24 + 2));
      if (v22 == 1 && *(unsigned char *)(a1 + 32))
      {
        BOOL v31 = v27 < v30;
        int v76 = 0;
        uint64_t v75 = 0;
        float v32 = (float)v24;
        float v33 = (float)(int)v25;
        float v34 = (float)v27;
        if (v10 < (float *)v74)
        {
          float *v10 = v32;
          v10[1] = v33;
          *((_DWORD *)v10 + 2) = 1;
          v10[3] = v29;
          *((void *)v10 + 2) = v75;
          *((_DWORD *)v10 + 6) = v76;
          *((unsigned char *)v10 + 28) = v31;
          uint64_t v11 = v70;
          uint64_t v6 = (uint64_t)a5;
          *((_DWORD *)v10 + 8) = v70;
          *((_DWORD *)v10 + 9) = v21;
          v10[10] = 0.0;
          _OWORD v10[11] = v34;
          v10 += 12;
LABEL_52:
          a4 = v65;
          int v13 = v64;
          uint64_t v15 = v68;
          int v17 = v67;
          float v73 = (char *)v10;
          goto LABEL_9;
        }
        unsigned int v47 = __p;
        unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)__p) >> 4) + 1;
        uint64_t v11 = v70;
        if (v48 > 0x555555555555555) {
LABEL_61:
        }
          sub_219486AE4();
        if (0x5555555555555556 * ((v74 - (char *)__p) >> 4) > v48) {
          unint64_t v48 = 0x5555555555555556 * ((v74 - (char *)__p) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v74 - (char *)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v49 = 0x555555555555555;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49)
        {
          if (v49 > 0x555555555555555) {
LABEL_60:
          }
            sub_219486AFC();
          float v50 = (char *)operator new(48 * v49);
          uint64_t v11 = v70;
          unsigned int v47 = __p;
        }
        else
        {
          float v50 = 0;
        }
        int v57 = (float *)&v50[16 * (((char *)v10 - (char *)__p) >> 4)];
        *int v57 = v32;
        v57[1] = v33;
        *((_DWORD *)v57 + 2) = 1;
        v57[3] = v29;
        *((void *)v57 + 2) = 0;
        v57[6] = 0.0;
        *((unsigned char *)v57 + 28) = v31;
        *((_DWORD *)v57 + 8) = v11;
        *((_DWORD *)v57 + 9) = v21;
        v57[10] = 0.0;
        v57[11] = v34;
        if (v10 == v47)
        {
          double v12 = &v50[16 * (((char *)v10 - (char *)__p) >> 4)];
          uint64_t v6 = (uint64_t)a5;
          long long v10 = v57 + 12;
          float v72 = v57;
          float v74 = &v50[48 * v49];
          if (v47) {
            goto LABEL_50;
          }
        }
        else
        {
          int v58 = &v50[16 * (((char *)v10 - (char *)__p) >> 4)];
          uint64_t v6 = (uint64_t)a5;
          do
          {
            long long v59 = *((_OWORD *)v10 - 3);
            long long v60 = *((_OWORD *)v10 - 1);
            double v12 = v58 - 48;
            *((_OWORD *)v58 - 2) = *((_OWORD *)v10 - 2);
            *((_OWORD *)v58 - 1) = v60;
            *((_OWORD *)v58 - 3) = v59;
            v10 -= 12;
            v58 -= 48;
          }
          while (v10 != v47);
          long long v10 = v57 + 12;
          float v72 = v12;
          float v74 = &v50[48 * v49];
          if (v47) {
LABEL_50:
          }
            operator delete(v47);
        }
        std::string __p = (float *)v12;
        goto LABEL_52;
      }
      float v35 = (float)v24;
      float v36 = (float)(int)v25;
      BOOL v37 = v27 < v30;
      float v38 = (float)v27;
      uint64_t v6 = (uint64_t)a5;
      uint64_t v40 = a5[1];
      unint64_t v39 = (unint64_t)a5[2];
      if ((unint64_t)v40 < v39)
      {
        *uint64_t v40 = v35;
        v40[1] = v36;
        *((_DWORD *)v40 + 2) = v22;
        v40[3] = v29;
        *((void *)v40 + 2) = 0;
        v40[6] = 0.0;
        *((unsigned char *)v40 + 28) = v37;
        uint64_t v11 = v70;
        *((_DWORD *)v40 + 8) = v70;
        *((_DWORD *)v40 + 9) = v21;
        v40[10] = 0.0;
        __n128 v19 = (char *)(v40 + 12);
        v40[11] = v38;
      }
      else
      {
        uint64_t v41 = *a5;
        unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v40 - (char *)*a5) >> 4);
        unint64_t v43 = v42 + 1;
        if (v42 + 1 > 0x555555555555555) {
          goto LABEL_61;
        }
        unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (void)v41) >> 4);
        if (2 * v44 > v43) {
          unint64_t v43 = 2 * v44;
        }
        if (v44 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v45 = 0x555555555555555;
        }
        else {
          unint64_t v45 = v43;
        }
        if (v45)
        {
          if (v45 > 0x555555555555555) {
            goto LABEL_60;
          }
          float v46 = (char *)operator new(48 * v45);
        }
        else
        {
          float v46 = 0;
        }
        unsigned int v51 = &v46[48 * v42];
        *(float *)unsigned int v51 = v35;
        *((float *)v51 + 1) = v36;
        *((_DWORD *)v51 + 2) = v22;
        *((float *)v51 + 3) = v29;
        *((void *)v51 + 2) = 0;
        *((_DWORD *)v51 + 6) = 0;
        v51[28] = v37;
        uint64_t v11 = v70;
        *((_DWORD *)v51 + 8) = v70;
        *((_DWORD *)v51 + 9) = v21;
        *((_DWORD *)v51 + 10) = 0;
        *((float *)v51 + 11) = v38;
        float v52 = v51;
        if (v40 != v41)
        {
          uint64_t v6 = (uint64_t)a5;
          do
          {
            long long v53 = *((_OWORD *)v40 - 3);
            long long v54 = *((_OWORD *)v40 - 1);
            *((_OWORD *)v52 - 2) = *((_OWORD *)v40 - 2);
            *((_OWORD *)v52 - 1) = v54;
            *((_OWORD *)v52 - 3) = v53;
            v52 -= 48;
            v40 -= 12;
          }
          while (v40 != v41);
          uint64_t v40 = *a5;
          float v55 = &v46[48 * v45];
          __n128 v19 = v51 + 48;
          *a5 = (float *)v52;
          a5[1] = (float *)(v51 + 48);
          a5[2] = (float *)v55;
          if (!v40) {
            goto LABEL_8;
          }
LABEL_44:
          operator delete(v40);
          goto LABEL_8;
        }
        uint64_t v6 = (uint64_t)a5;
        int v56 = &v46[48 * v45];
        __n128 v19 = v51 + 48;
        *a5 = (float *)v51;
        a5[1] = (float *)(v51 + 48);
        a5[2] = (float *)v56;
        if (v40) {
          goto LABEL_44;
        }
      }
LABEL_8:
      a4 = v65;
      int v13 = v64;
      uint64_t v15 = v68;
      int v17 = v67;
      *(void *)(v6 + 8) = v19;
LABEL_9:
      ++v16;
      uint64_t v14 = *a4;
      if (v16 >= *(unsigned int *)(*a4 + v15))
      {
        unint64_t v9 = a3[2];
        goto LABEL_4;
      }
    }
  }
LABEL_55:
  if (*(unsigned char *)(a1 + 32))
  {
    sub_2194B9FB0((char **)&v72, a6, 1, *(int *)(a1 + 36), 2 * *(int *)(a1 + 40), 0x8000u);
    sub_2194BD900(v6, *(void *)(v6 + 8), (char *)v72, v73, 0xAAAAAAAAAAAAAAABLL * ((v73 - (unsigned char *)v72) >> 4));
  }
  if (v72)
  {
    float v73 = (char *)v72;
    operator delete(v72);
  }
}

void sub_2194B8C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2194B8CC0(float *a1, uint64_t a2, uint64_t a3, char **a4, __n128 a5, double a6, __n128 a7, double a8, double a9, double a10, double a11, double a12)
{
  uint64_t v416 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24) != 2) {
    sub_219507F94();
  }
  unint64_t v16 = a4;
  uint64_t v17 = a4[1] - *a4;
  if (v17)
  {
    uint64_t v18 = 0;
    unint64_t v394 = 0;
    unint64_t v19 = v17 / 48;
    if (v19 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v19;
    }
    while (1)
    {
      signed int v21 = *v16;
      uint64_t v22 = (uint64_t)&(*v16)[v18];
      int v23 = (int)(float)(*(float *)v22 + 0.5);
      int v24 = (int)(float)(*(float *)(v22 + 4) + 0.5);
      a5.n128_u32[0] = *(_DWORD *)(v22 + 44);
      unsigned int v25 = (int)a5.n128_f32[0];
      int v26 = *(_DWORD *)(v22 + 8);
      uint64_t v27 = v26 - 1;
      uint64_t v28 = *(void *)(a3 + 48);
      int v29 = v26 + 1;
      unint64_t v30 = *(void *)(v28 + 144 * v27 + 32);
      if (v30 == *(void *)(v28 + 144 * v26 + 32))
      {
        unint64_t v31 = *(void *)(v28 + 144 * v29 + 32);
        if (v31 < v30) {
          break;
        }
      }
      float v401 = *v16;
      uint64_t v403 = (uint64_t)&(*v16)[v18];
      uint64_t v207 = *(void *)(v28 + 144 * v29 + 120);
      uint64_t v208 = v24 - 1;
      uint64_t v209 = *(void *)(v207 + 8 * v208);
      int v210 = 2 * v24;
      uint64_t v211 = *(void *)(v207 + 8 * v24);
      uint64_t v212 = v24 + 1;
      uint64_t v213 = *(void *)(v207 + 8 * v212);
      uint64_t v214 = 2 * v23;
      uint64_t v215 = v214 - 2;
      unsigned int v216 = *(unsigned __int16 *)(v209 + 2 * (v214 - 2));
      unsigned int v217 = *(unsigned __int16 *)(v209 + 2 * v214);
      uint64_t v218 = v214 + 2;
      unsigned int v219 = *(unsigned __int16 *)(v209 + 2 * (v214 + 2));
      if (v216 >= v25 || v217 >= v25 || v219 >= v25) {
        goto LABEL_122;
      }
      unsigned int v222 = *(unsigned __int16 *)(v211 + 2 * v215);
      unsigned int v223 = *(unsigned __int16 *)(v211 + 4 * v23);
      unsigned int v224 = *(unsigned __int16 *)(v211 + 2 * v218);
      BOOL v225 = v222 >= v25 || v223 >= v25;
      if (v225 || v224 >= v25) {
        goto LABEL_122;
      }
      unsigned int v227 = *(unsigned __int16 *)(v213 + 2 * v214);
      BOOL v228 = *(unsigned __int16 *)(v213 + 2 * v215) >= v25 || v227 >= v25;
      if (v228 || *(unsigned __int16 *)(v213 + 2 * v218) >= v25) {
        goto LABEL_122;
      }
      uint64_t v230 = v28 + 144 * (int)v27;
      uint64_t v396 = *(void *)(v230 + 40);
      uint64_t v398 = *(void *)(v230 + 72);
      uint64_t v231 = v398 + 2 * (v210 - 2) * (int)v396;
      uint64_t v232 = 4 * v23;
      uint64_t v233 = v232 - 4;
      unint64_t v16 = a4;
      if (*(unsigned __int16 *)(v231 + 2 * (v232 - 4)) >= v25 || *(unsigned __int16 *)(v231 + 2 * v232) >= v25) {
        goto LABEL_122;
      }
      int v235 = v232 + 4;
      if (*(unsigned __int16 *)(v231 + 2 * ((int)v232 + 4)) >= v25) {
        goto LABEL_122;
      }
      uint64_t v236 = v398 + 2 * v210 * (int)v396;
      unsigned int v389 = *(unsigned __int16 *)(v236 + 2 * v233);
      unsigned int v391 = *(unsigned __int16 *)(v236 + 2 * v232);
      unsigned int v237 = *(unsigned __int16 *)(v236 + 2 * v235);
      BOOL v238 = v389 >= v25 || v391 >= v25;
      BOOL v239 = v238 || v237 >= v25;
      unint64_t v16 = a4;
      if (v239
        || ((uint64_t v240 = v398 + 2 * (v210 + 2) * (int)v396,
             unsigned int v241 = *(unsigned __int16 *)(v240 + 2 * v233),
             unsigned int v242 = *(unsigned __int16 *)(v240 + 2 * v232),
             unsigned int v243 = *(unsigned __int16 *)(v240 + 2 * v235),
             v241 < v25)
          ? (BOOL v244 = v242 >= v25)
          : (BOOL v244 = 1),
            (unint64_t v16 = a4, !v244) ? (v245 = v243 >= v25) : (v245 = 1),
            v245))
      {
LABEL_122:
        if (v216 <= v25 || v217 <= v25 || v219 <= v25) {
          goto LABEL_7;
        }
        unsigned int v222 = *(unsigned __int16 *)(v211 + 2 * v215);
        unsigned int v223 = *(unsigned __int16 *)(v211 + 2 * v214);
        unsigned int v224 = *(unsigned __int16 *)(v211 + 2 * v218);
        BOOL v248 = v222 > v25 && v223 > v25;
        if (!v248 || v224 <= v25) {
          goto LABEL_7;
        }
        unsigned int v227 = *(unsigned __int16 *)(v213 + 2 * v214);
        BOOL v250 = *(unsigned __int16 *)(v213 + 2 * v215) > v25 && v227 > v25;
        if (!v250 || *(unsigned __int16 *)(v213 + 2 * v218) <= v25) {
          goto LABEL_7;
        }
        uint64_t v252 = v28 + 144 * (int)v27;
        uint64_t v275 = *(void *)(v252 + 72);
        uint64_t v276 = *(void *)(v252 + 40);
        uint64_t v253 = v275 + 2 * (v210 - 2) * (int)v276;
        uint64_t v254 = 4 * v23;
        uint64_t v255 = v254 - 4;
        unsigned int v256 = *(unsigned __int16 *)(v253 + 2 * (v254 - 4));
        unsigned int v257 = *(unsigned __int16 *)(v253 + 2 * v254);
        uint64_t v258 = v254 + 4;
        unsigned int v259 = *(unsigned __int16 *)(v253 + 2 * (v254 + 4));
        BOOL v260 = v256 > v25 && v257 > v25;
        if (!v260 || v259 <= v25) {
          goto LABEL_7;
        }
        uint64_t v262 = v275 + 2 * v210 * (int)v276;
        unsigned int v263 = *(unsigned __int16 *)(v262 + 2 * v255);
        unsigned int v264 = *(unsigned __int16 *)(v262 + 2 * v254);
        unsigned int v265 = *(unsigned __int16 *)(v262 + 2 * v258);
        BOOL v266 = v263 > v25 && v264 > v25;
        if (!v266 || v265 <= v25) {
          goto LABEL_7;
        }
        uint64_t v268 = v275 + 2 * (v210 + 2) * (int)v276;
        unsigned int v269 = *(unsigned __int16 *)(v268 + 2 * v255);
        unsigned int v270 = *(unsigned __int16 *)(v268 + 2 * v254);
        unsigned int v271 = *(unsigned __int16 *)(v268 + 2 * v258);
        BOOL v272 = v269 > v25 && v270 > v25;
        if (!v272 || v271 <= v25) {
          goto LABEL_7;
        }
        uint64_t v274 = a2;
      }
      else
      {
        uint64_t v274 = a2;
        uint64_t v276 = v396;
        uint64_t v275 = v398;
      }
      uint64_t v277 = *(void *)(v28 + 144 * v26 + 120);
      uint64_t v278 = *(void *)(v277 + 8 * v24);
      a5.n128_u16[0] = *(_WORD *)(v278 + 2 * v214);
      float v279 = (float)a5.n128_u32[0];
      float v280 = (float)v23;
      a5.n128_f32[0] = (float)v24;
      LOWORD(a8) = *(_WORD *)(v278 + 2 * v215);
      *(float *)&a11 = (float)LODWORD(a8);
      LOWORD(a8) = *(_WORD *)(v278 + 2 * v218);
      uint64_t v281 = *(void *)(v277 + 8 * v208);
      LOWORD(a9) = *(_WORD *)(v281 + 2 * v215);
      *(float *)&a12 = (float)LODWORD(a8);
      float v282 = (float)LODWORD(a9);
      LOWORD(a8) = *(_WORD *)(v281 + 2 * v214);
      LOWORD(a9) = *(_WORD *)(v281 + 2 * v218);
      float v283 = (float)LODWORD(a8);
      float v284 = (float)LODWORD(a9);
      uint64_t v285 = *(void *)(v277 + 8 * v212);
      LOWORD(a8) = *(_WORD *)(v285 + 2 * v215);
      float v286 = (float)LODWORD(a8);
      LOWORD(a8) = *(_WORD *)(v285 + 2 * v214);
      float v287 = (float)LODWORD(a8);
      LOWORD(a8) = *(_WORD *)(v285 + 2 * v218);
      float v288 = (float)LODWORD(a8);
      *(float *)&a9 = *(float *)&a12 - *(float *)&a11;
      *(float *)&a8 = v287 - v283;
      *(float *)&a12 = (float)(*(float *)&a11 + (float)(v279 * -2.0)) + *(float *)&a12;
      *(float *)&a11 = (float)(v283 + (float)(v279 * -2.0)) + v287;
      LODWORD(v285) = (float)(v280 + v280);
      float v289 = (float)((float)(v282 + v288) - (float)(v284 + v286)) * 0.25;
      uint64_t v290 = (float)(a5.n128_f32[0] + a5.n128_f32[0]);
      uint64_t v291 = v275 + 2 * v276 * v290;
      uint64_t v292 = v291 + 2 * v276;
      float v293 = (float)(v285 + 1) - (float)(v280 + v280);
      float v294 = (float)(v290 + 1) - (float)(a5.n128_f32[0] + a5.n128_f32[0]);
      *(float *)&unsigned int v295 = (float)(v280 + v280) - (float)v285;
      *(float *)&unsigned int v296 = (float)(a5.n128_f32[0] + a5.n128_f32[0])
                      - (float)(float)(a5.n128_f32[0] + a5.n128_f32[0]);
      uint64_t v297 = 2 * (2 * v285);
      LOWORD(v15) = *(_WORD *)(v291 + v297);
      *(float *)&unsigned int v298 = (float)v15;
      uint64_t v299 = 2 * (2 * (v285 + 1));
      LOWORD(v12) = *(_WORD *)(v291 + v299);
      *(float *)&unsigned int v300 = (float)LODWORD(v12);
      *(float *)&unsigned int v301 = (float)(*(float *)&v295 * v294) * *(float *)&v300;
      float v302 = *(float *)&v301 + (float)((float)(v293 * v294) * *(float *)&v298);
      LOWORD(v301) = *(_WORD *)(v292 + v297);
      LOWORD(v298) = *(_WORD *)(v292 + v299);
      float v303 = (float)(v302 + (float)((float)(v293 * *(float *)&v296) * (float)v301))
           + (float)((float)(*(float *)&v295 * *(float *)&v296) * (float)v298);
      float v304 = (float)v223 - v303;
      *(float *)&unsigned __int32 v305 = (float)(v303 + (float)(v279 * -2.0)) + (float)v223;
      float v306 = (float)(v280 + v280) + -2.0;
      LODWORD(v285) = v306;
      LODWORD(v290) = v306 + 1;
      float v307 = (float)v290 - v306;
      float v308 = v306 - (float)v306;
      uint64_t v309 = 2 * (2 * v285);
      LOWORD(v298) = *(_WORD *)(v291 + v309);
      uint64_t v310 = 2 * (2 * v290);
      LOWORD(v300) = *(_WORD *)(v291 + v310);
      float v12 = (float)v300;
      *(float *)&unsigned int v311 = (float)(v308 * v294) * v12;
      *(float *)&unsigned int v312 = *(float *)&v311 + (float)((float)(v307 * v294) * (float)v298);
      LOWORD(v311) = *(_WORD *)(v292 + v309);
      float v313 = *(float *)&v312 + (float)((float)(*(float *)&v296 * v307) * (float)v311);
      LOWORD(v312) = *(_WORD *)(v292 + v310);
      float v314 = (float)(v313 + (float)((float)(v308 * *(float *)&v296) * (float)v312)) + (float)v224;
      float v315 = (float)(v280 + v280) + 2.0;
      LODWORD(v309) = v315;
      LODWORD(v310) = v315 + 1;
      float v316 = (float)v310 - v315;
      *(float *)&unsigned int v317 = v316 * v294;
      *(float *)&unsigned int v318 = (float)v315;
      float v319 = v315 - *(float *)&v318;
      float v320 = v319 * v294;
      float v321 = *(float *)&v296 * v316;
      float v322 = v319 * *(float *)&v296;
      uint64_t v323 = 2 * (2 * v309);
      LOWORD(v296) = *(_WORD *)(v291 + v323);
      *(float *)&unsigned int v324 = (float)v296;
      uint64_t v325 = 2 * (2 * v310);
      LOWORD(v318) = *(_WORD *)(v291 + v325);
      float v326 = (float)(v320 * (float)v318) + (float)(*(float *)&v317 * *(float *)&v324);
      LOWORD(v324) = *(_WORD *)(v292 + v323);
      *(float *)&unsigned int v327 = (float)v324;
      LOWORD(v317) = *(_WORD *)(v292 + v325);
      float v328 = (float)(v314
                   - (float)((float)((float)(v326 + (float)(v321 * *(float *)&v327)) + (float)(v322 * (float)v317))
                           + (float)v222))
           * 0.25;
      float v329 = (float)(a5.n128_f32[0] + a5.n128_f32[0]) + -2.0;
      uint64_t v330 = v329;
      LODWORD(v325) = v330 + 1;
      uint64_t v331 = v275 + 2 * v276 * v330;
      uint64_t v332 = v331 + 2 * v276;
      float v333 = (float)v325 - v329;
      *(float *)&unsigned int v334 = v293 * v333;
      LOWORD(v327) = *(_WORD *)(v331 + v297);
      *(float *)&unsigned int v335 = (float)v327;
      LOWORD(v317) = *(_WORD *)(v331 + v299);
      float v336 = (float)((float)(*(float *)&v295 * v333) * (float)v317) + (float)((float)(v293 * v333) * *(float *)&v335);
      LOWORD(v334) = *(_WORD *)(v332 + v297);
      LOWORD(v335) = *(_WORD *)(v332 + v299);
      float v337 = (float)(a5.n128_f32[0] + a5.n128_f32[0]) + 2.0;
      uint64_t v338 = v337;
      *(float *)&a10 = (float)((float)(v336
                                     + (float)((float)(v293 * (float)(v329 - (float)v329)) * (float)v334))
                             + (float)((float)(*(float *)&v295 * (float)(v329 - (float)v329)) * (float)v335))
                     + (float)v227;
      LODWORD(v325) = v338 + 1;
      uint64_t v339 = v275 + 2 * v276 * v338;
      float v340 = (float)v325;
      uint64_t v341 = v339 + 2 * v276;
      float v342 = v340 - v337;
      float v343 = v293 * v342;
      float v344 = *(float *)&v295 * v342;
      *(float *)&unsigned int v345 = (float)v337;
      float v346 = v337 - *(float *)&v345;
      float v347 = v293 * v346;
      float v348 = *(float *)&v295 * v346;
      LOWORD(v295) = *(_WORD *)(v339 + v297);
      LOWORD(v345) = *(_WORD *)(v339 + v299);
      *(float *)&unsigned int v349 = (float)v345;
      float v350 = v344 * *(float *)&v349;
      LOWORD(v349) = *(_WORD *)(v341 + v297);
      *(float *)&unsigned int v351 = v350 + (float)(v343 * (float)v295);
      float v352 = *(float *)&v351 + (float)(v347 * (float)v349);
      LOWORD(v351) = *(_WORD *)(v341 + v299);
      int v407 = LODWORD(a12);
      float v408 = v289;
      float v409 = v328;
      float v410 = v289;
      float v411 = *(float *)&a11;
      float v412 = (float)(*(float *)&a10 - (float)((float)(v352 + (float)(v348 * (float)v351)) + (float)v217)) * 0.25;
      float v413 = v328;
      float v414 = v412;
      unsigned __int32 v415 = v305;
      LODWORD(a10) = -0.5;
      *(float *)&a8 = *(float *)&a8 * -0.5;
      v405.f32[0] = *(float *)&a9 * -0.5;
      v405.i32[1] = LODWORD(a8);
      float v406 = v304 * -0.5;
      uint64_t v22 = v403;
      a7.n128_f32[0] = (float)(1 << *(_DWORD *)&v401[v18 + 32]);
      *(float *)&v401[v18] = (float)v23 * a7.n128_f32[0];
      *(float *)(v403 + 4) = a5.n128_f32[0] * a7.n128_f32[0];
      a5.n128_u32[0] = 1.0;
      if (sub_2194BBF8C(v403, v274, a3, (float *)&v407, &v405, 0x8000u, a5.n128_f64[0], *a1, a7.n128_f64[0], a8, a9, a10, a11, a12))goto LABEL_172; {
LABEL_7:
      }
      v18 += 48;
      if (!--v20)
      {
        unint64_t v354 = 0xAAAAAAAAAAAAAAABLL * ((v16[1] - *v16) >> 4);
        if (v394 <= v354)
        {
          if (v394 < v354) {
            v16[1] = &(*v16)[48 * v394];
          }
        }
        else
        {
          sub_2194BDB84(v16, v394 - v354);
        }
        return;
      }
    }
    float v32 = (float)v24;
    float v33 = (float)v24 * 0.5;
    float v34 = v33 + -0.5;
    if ((float)(v33 + -0.5) < 1.0) {
      goto LABEL_7;
    }
    float v35 = (float)v23;
    float v36 = (float)v23 * 0.5;
    float v12 = v33 + 0.5;
    float v37 = v36 + -0.5;
    BOOL v38 = (float)(v33 + 0.5) > (float)(unint64_t)(*(void *)(v28 + 144 * v29 + 48) - 2) || v37 < 1.0;
    if (v38 || (float)(v36 + 0.5) > (float)(v31 - 2)) {
      goto LABEL_7;
    }
    float v395 = v36 + 0.5;
    uint64_t v39 = v28 + 144 * (v26 + 1);
    uint64_t v40 = v28 + 144 * (int)v27;
    uint64_t v41 = *(void *)(v40 + 120);
    uint64_t v390 = (void *)(v40 + 120);
    uint64_t v387 = v24 - 1;
    uint64_t v42 = *(void *)(v41 + 8 * v387);
    uint64_t v402 = *(void *)(v41 + 8 * v24);
    uint64_t v386 = v24;
    uint64_t v388 = v24 + 1;
    uint64_t v397 = *(void *)(v41 + 8 * v388);
    uint64_t v43 = 2 * v23;
    uint64_t v44 = v43 - 2;
    uint64_t v45 = v43 + 2;
    uint64_t v400 = v42;
    BOOL v46 = *(unsigned __int16 *)(v42 + 2 * (v43 - 2)) >= v25 || *(unsigned __int16 *)(v42 + 2 * v43) >= v25;
    if (v46 || *(unsigned __int16 *)(v42 + 2 * (v43 + 2)) >= v25) {
      goto LABEL_46;
    }
    BOOL v48 = *(unsigned __int16 *)(v402 + 2 * v44) >= v25 || *(unsigned __int16 *)(v402 + 2 * v43) >= v25;
    if (v48 || *(unsigned __int16 *)(v402 + 2 * v45) >= v25) {
      goto LABEL_46;
    }
    BOOL v50 = *(unsigned __int16 *)(v397 + 2 * v44) >= v25 || *(unsigned __int16 *)(v397 + 2 * v43) >= v25;
    if (v50 || *(unsigned __int16 *)(v397 + 2 * v45) >= v25) {
      goto LABEL_46;
    }
    float v52 = (float)v25;
    uint64_t v53 = v28 + 144 * v29;
    uint64_t v54 = *(void *)(v53 + 72);
    uint64_t v55 = *(void *)(v53 + 40);
    uint64_t v56 = v34;
    unsigned int v57 = v37 + 1;
    unsigned int v58 = v56 + 1;
    uint64_t v380 = v56;
    uint64_t v59 = v54 + 2 * v55 * v56;
    uint64_t v60 = v59 + 2 * v55;
    float v61 = (float)v57 - v37;
    float v62 = (float)v58 - v34;
    float v63 = v37 - (float)v37;
    *(float *)&a8 = v34 - (float)v34;
    uint64_t v384 = 2 * v37;
    uint64_t v385 = 2 * v57;
    LOWORD(v13) = *(_WORD *)(v59 + 2 * v384);
    float v13 = (float)LODWORD(v13);
    LOWORD(v14) = *(_WORD *)(v59 + 2 * v385);
    float v14 = (float)LODWORD(v14);
    *(float *)&unsigned int v64 = (float)(v63 * v62) * v14;
    float v65 = *(float *)&v64 + (float)((float)(v61 * v62) * v13);
    LOWORD(v64) = *(_WORD *)(v60 + 2 * v384);
    *(float *)&unsigned int v66 = (float)v64;
    float v67 = v65 + (float)((float)(v61 * *(float *)&a8) * *(float *)&v66);
    LOWORD(v66) = *(_WORD *)(v60 + 2 * v385);
    *(float *)&a9 = v67 + (float)((float)(v63 * *(float *)&a8) * (float)v66);
    if (*(float *)&a9 >= (float)v25) {
      goto LABEL_46;
    }
    unsigned int v68 = v36 + 1;
    *(float *)&unsigned int v69 = (float)v68 - v36;
    float v70 = *(float *)&v69 * v62;
    *(float *)&unsigned int v71 = v36 - (float)v36;
    float v14 = *(float *)&v71 * v62;
    unsigned int v378 = v71;
    unsigned int v379 = v69;
    float v13 = *(float *)&v69 * *(float *)&a8;
    float v72 = *(float *)&v71 * *(float *)&a8;
    uint64_t v376 = 2 * v68;
    uint64_t v377 = 2 * v36;
    LOWORD(v71) = *(_WORD *)(v59 + 2 * v377);
    LOWORD(v69) = *(_WORD *)(v59 + 2 * v376);
    float v372 = v14;
    float v373 = v13;
    *(float *)&unsigned int v73 = v14 * (float)v69;
    float v374 = v72;
    float v375 = v70;
    float v74 = *(float *)&v73 + (float)(v70 * (float)v71);
    LOWORD(v73) = *(_WORD *)(v60 + 2 * v377);
    *(float *)&unsigned int v75 = (float)v73;
    float v76 = v74 + (float)(v13 * *(float *)&v75);
    LOWORD(v75) = *(_WORD *)(v60 + 2 * v376);
    *(float *)&a9 = v76 + (float)(v72 * (float)v75);
    if (*(float *)&a9 >= v52) {
      goto LABEL_46;
    }
    unsigned int v77 = v395 + 1;
    *(float *)&unsigned int v78 = (float)v77 - v395;
    *(float *)&unsigned int v79 = *(float *)&v78 * v62;
    *(float *)&unsigned int v80 = v395 - (float)v395;
    float v81 = *(float *)&v80 * v62;
    unsigned int v370 = v80;
    unsigned int v371 = v78;
    float v82 = *(float *)&v78 * *(float *)&a8;
    *(float *)&a8 = *(float *)&v80 * *(float *)&a8;
    uint64_t v368 = 2 * v395;
    uint64_t v369 = 2 * v77;
    LOWORD(v80) = *(_WORD *)(v59 + 2 * v368);
    LOWORD(v78) = *(_WORD *)(v59 + 2 * v369);
    float v83 = (float)(v81 * (float)v78) + (float)(*(float *)&v79 * (float)v80);
    LOWORD(v79) = *(_WORD *)(v60 + 2 * v368);
    *(float *)&unsigned int v84 = (float)v79;
    float v85 = v83 + (float)(v82 * *(float *)&v84);
    LOWORD(v84) = *(_WORD *)(v60 + 2 * v369);
    *(float *)&a9 = (float)v84;
    if ((float)(v85 + (float)(*(float *)&a8 * *(float *)&a9)) >= v52) {
      goto LABEL_46;
    }
    uint64_t v86 = v33;
    unsigned int v87 = v86 + 1;
    uint64_t v363 = v86;
    uint64_t v88 = v54 + 2 * v55 * v86;
    uint64_t v89 = v88 + 2 * v55;
    float v90 = (float)v87 - v33;
    *(float *)&a8 = v61 * v90;
    *(float *)&a9 = v63 * v90;
    float v91 = v33 - (float)v33;
    float v92 = v91 * v61;
    float v93 = v63 * v91;
    LOWORD(v61) = *(_WORD *)(v88 + 2 * v384);
    LOWORD(v63) = *(_WORD *)(v88 + 2 * v385);
    float v366 = *(float *)&a9;
    float v367 = *(float *)&a8;
    *(float *)&unsigned int v94 = *(float *)&a9 * (float)LODWORD(v63);
    float v95 = *(float *)&v94 + (float)(*(float *)&a8 * (float)LODWORD(v61));
    LOWORD(v94) = *(_WORD *)(v89 + 2 * v384);
    *(float *)&unsigned int v96 = (float)v94;
    float v364 = v92;
    float v365 = v93;
    float v97 = v95 + (float)(v92 * *(float *)&v96);
    LOWORD(v96) = *(_WORD *)(v89 + 2 * v385);
    if ((float)(v97 + (float)(v93 * (float)v96)) >= v52) {
      goto LABEL_46;
    }
    HIWORD(v99) = HIWORD(v378);
    HIWORD(v98) = HIWORD(v379);
    *(float *)&a9 = *(float *)&v379 * v90;
    *(float *)&a8 = *(float *)&v379 * v91;
    LOWORD(v98) = *(_WORD *)(v88 + 2 * v377);
    LOWORD(v99) = *(_WORD *)(v88 + 2 * v376);
    float v359 = *(float *)&v378 * v90;
    float v360 = *(float *)&v379 * v90;
    *(float *)&unsigned int v100 = (float)(*(float *)&v378 * v90) * (float)v99;
    float v101 = *(float *)&v100 + (float)((float)(*(float *)&v379 * v90) * (float)v98);
    LOWORD(v100) = *(_WORD *)(v89 + 2 * v377);
    *(float *)&unsigned int v102 = (float)v100;
    float v361 = *(float *)&v379 * v91;
    float v362 = *(float *)&v378 * v91;
    float v103 = v101 + (float)((float)(*(float *)&v379 * v91) * *(float *)&v102);
    LOWORD(v102) = *(_WORD *)(v89 + 2 * v376);
    if ((float)(v103 + (float)((float)(*(float *)&v378 * v91) * (float)v102)) >= v52) {
      goto LABEL_46;
    }
    float v355 = (float)v25;
    float v357 = v33 - (float)v33;
    float v358 = (float)v87 - v33;
    uint64_t v381 = v43 + 2;
    uint64_t v382 = v43 - 2;
    uint64_t v383 = v43;
    uint64_t v356 = v28 + 144 * (v26 + 1);
    a5.n128_f32[0] = sub_2194BDD34(v39, v395, v33);
    uint64_t v44 = v382;
    uint64_t v43 = v383;
    uint64_t v45 = v381;
    uint64_t v39 = v356;
    if (a5.n128_f32[0] >= (float)v25) {
      goto LABEL_46;
    }
    a5.n128_f32[0] = sub_2194BDD34(v356, v37, v33 + 0.5);
    uint64_t v44 = v382;
    uint64_t v43 = v383;
    uint64_t v45 = v381;
    uint64_t v39 = v28 + 144 * (v26 + 1);
    if (a5.n128_f32[0] >= v355) {
      goto LABEL_46;
    }
    a5.n128_f32[0] = sub_2194BDD34(v356, v36, v33 + 0.5);
    uint64_t v44 = v382;
    uint64_t v43 = v383;
    uint64_t v45 = v381;
    uint64_t v39 = v28 + 144 * (v26 + 1);
    if (a5.n128_f32[0] >= v355
      || (a5.n128_f32[0] = sub_2194BDD34(v356, v395, v33 + 0.5),
          uint64_t v44 = v382,
          uint64_t v43 = v383,
          uint64_t v45 = v381,
          uint64_t v39 = v28 + 144 * (v26 + 1),
          a5.n128_f32[0] >= v355))
    {
LABEL_46:
      BOOL v104 = *(unsigned __int16 *)(v400 + 2 * v44) > v25 && *(unsigned __int16 *)(v400 + 2 * v43) > v25;
      if (!v104 || *(unsigned __int16 *)(v400 + 2 * v45) <= v25) {
        goto LABEL_7;
      }
      BOOL v106 = *(unsigned __int16 *)(v402 + 2 * v44) > v25 && *(unsigned __int16 *)(v402 + 2 * v43) > v25;
      if (!v106 || *(unsigned __int16 *)(v402 + 2 * v45) <= v25) {
        goto LABEL_7;
      }
      uint64_t v382 = v44;
      uint64_t v383 = v43;
      uint64_t v381 = v45;
      BOOL v108 = *(unsigned __int16 *)(v397 + 2 * v44) > v25 && *(unsigned __int16 *)(v397 + 2 * v43) > v25;
      if (!v108 || *(unsigned __int16 *)(v397 + 2 * v45) <= v25) {
        goto LABEL_7;
      }
      uint64_t v110 = v28 + 144 * v29;
      uint64_t v111 = *(void *)(v110 + 72);
      uint64_t v112 = *(void *)(v110 + 40);
      uint64_t v113 = v34;
      unsigned int v114 = v37 + 1;
      unsigned int v115 = v113 + 1;
      uint64_t v380 = v113;
      uint64_t v116 = v111 + 2 * v112 * v113;
      uint64_t v117 = v116 + 2 * v112;
      float v118 = (float)v114 - v37;
      float v119 = (float)v115 - v34;
      float v120 = v37 - (float)v37;
      *(float *)&a8 = v34 - (float)v34;
      float v121 = (float)v25;
      uint64_t v384 = 2 * v37;
      uint64_t v385 = 2 * v114;
      LOWORD(v13) = *(_WORD *)(v116 + 2 * v384);
      float v13 = (float)LODWORD(v13);
      LOWORD(v14) = *(_WORD *)(v116 + 2 * v385);
      float v14 = (float)LODWORD(v14);
      *(float *)&unsigned int v122 = (float)(v120 * v119) * v14;
      float v123 = *(float *)&v122 + (float)((float)(v118 * v119) * v13);
      LOWORD(v122) = *(_WORD *)(v117 + 2 * v384);
      *(float *)&unsigned int v124 = (float)v122;
      float v125 = v123 + (float)((float)(v118 * *(float *)&a8) * *(float *)&v124);
      LOWORD(v124) = *(_WORD *)(v117 + 2 * v385);
      *(float *)&a9 = v125 + (float)((float)(v120 * *(float *)&a8) * (float)v124);
      if (*(float *)&a9 <= (float)v25) {
        goto LABEL_7;
      }
      unsigned int v126 = v36 + 1;
      *(float *)&unsigned int v127 = (float)v126 - v36;
      float v128 = *(float *)&v127 * v119;
      *(float *)&unsigned int v129 = v36 - (float)v36;
      float v14 = *(float *)&v129 * v119;
      unsigned int v378 = v129;
      unsigned int v379 = v127;
      float v13 = *(float *)&v127 * *(float *)&a8;
      float v130 = *(float *)&v129 * *(float *)&a8;
      uint64_t v376 = 2 * v126;
      uint64_t v377 = 2 * v36;
      LOWORD(v129) = *(_WORD *)(v116 + 2 * v377);
      LOWORD(v127) = *(_WORD *)(v116 + 2 * v376);
      float v372 = v14;
      float v373 = v13;
      *(float *)&unsigned int v131 = v14 * (float)v127;
      float v374 = v130;
      float v375 = v128;
      float v132 = *(float *)&v131 + (float)(v128 * (float)v129);
      LOWORD(v131) = *(_WORD *)(v117 + 2 * v377);
      *(float *)&unsigned int v133 = (float)v131;
      float v134 = v132 + (float)(v13 * *(float *)&v133);
      LOWORD(v133) = *(_WORD *)(v117 + 2 * v376);
      *(float *)&a9 = v134 + (float)(v130 * (float)v133);
      if (*(float *)&a9 <= v121) {
        goto LABEL_7;
      }
      unsigned int v135 = v395 + 1;
      *(float *)&unsigned int v136 = (float)v135 - v395;
      *(float *)&unsigned int v137 = *(float *)&v136 * v119;
      *(float *)&unsigned int v138 = v395 - (float)v395;
      float v139 = *(float *)&v138 * v119;
      unsigned int v370 = v138;
      unsigned int v371 = v136;
      float v140 = *(float *)&v136 * *(float *)&a8;
      *(float *)&a8 = *(float *)&v138 * *(float *)&a8;
      uint64_t v368 = 2 * v395;
      uint64_t v369 = 2 * v135;
      LOWORD(v138) = *(_WORD *)(v116 + 2 * v368);
      LOWORD(v136) = *(_WORD *)(v116 + 2 * v369);
      float v141 = (float)(v139 * (float)v136) + (float)(*(float *)&v137 * (float)v138);
      LOWORD(v137) = *(_WORD *)(v117 + 2 * v368);
      *(float *)&unsigned int v142 = (float)v137;
      float v143 = v141 + (float)(v140 * *(float *)&v142);
      LOWORD(v142) = *(_WORD *)(v117 + 2 * v369);
      *(float *)&a9 = (float)v142;
      if ((float)(v143 + (float)(*(float *)&a8 * *(float *)&a9)) <= v121) {
        goto LABEL_7;
      }
      uint64_t v144 = v33;
      unsigned int v145 = v144 + 1;
      uint64_t v363 = v144;
      uint64_t v146 = v111 + 2 * v112 * v144;
      uint64_t v147 = v146 + 2 * v112;
      float v148 = (float)v145 - v33;
      *(float *)&a8 = v118 * v148;
      *(float *)&a9 = v120 * v148;
      float v149 = v33 - (float)v33;
      float v150 = v149 * v118;
      float v151 = v120 * v149;
      LOWORD(v118) = *(_WORD *)(v146 + 2 * v384);
      LOWORD(v120) = *(_WORD *)(v146 + 2 * v385);
      float v366 = *(float *)&a9;
      float v367 = *(float *)&a8;
      *(float *)&unsigned int v152 = *(float *)&a9 * (float)LODWORD(v120);
      float v153 = *(float *)&v152 + (float)(*(float *)&a8 * (float)LODWORD(v118));
      LOWORD(v152) = *(_WORD *)(v147 + 2 * v384);
      *(float *)&unsigned int v154 = (float)v152;
      float v364 = v150;
      float v365 = v151;
      float v155 = v153 + (float)(v150 * *(float *)&v154);
      LOWORD(v154) = *(_WORD *)(v147 + 2 * v385);
      if ((float)(v155 + (float)(v151 * (float)v154)) <= v121) {
        goto LABEL_7;
      }
      HIWORD(v157) = HIWORD(v378);
      HIWORD(v156) = HIWORD(v379);
      *(float *)&a9 = *(float *)&v379 * v148;
      float v357 = v33 - (float)v33;
      float v358 = (float)v145 - v33;
      *(float *)&a8 = *(float *)&v379 * v149;
      LOWORD(v156) = *(_WORD *)(v146 + 2 * v377);
      LOWORD(v157) = *(_WORD *)(v146 + 2 * v376);
      float v359 = *(float *)&v378 * v148;
      float v360 = *(float *)&v379 * v148;
      *(float *)&unsigned int v158 = (float)(*(float *)&v378 * v148) * (float)v157;
      float v159 = *(float *)&v158 + (float)((float)(*(float *)&v379 * v148) * (float)v156);
      LOWORD(v158) = *(_WORD *)(v147 + 2 * v377);
      *(float *)&unsigned int v160 = (float)v158;
      float v361 = *(float *)&v379 * v149;
      float v362 = *(float *)&v378 * v149;
      float v161 = v159 + (float)((float)(*(float *)&v379 * v149) * *(float *)&v160);
      LOWORD(v160) = *(_WORD *)(v147 + 2 * v376);
      if ((float)(v161 + (float)((float)(*(float *)&v378 * v149) * (float)v160)) <= v121) {
        goto LABEL_7;
      }
      uint64_t v162 = v39;
      if (sub_2194BDD34(v39, v395, v33) <= v121) {
        goto LABEL_7;
      }
      if (sub_2194BDD34(v162, v37, v33 + 0.5) <= v121) {
        goto LABEL_7;
      }
      if (sub_2194BDD34(v162, v36, v33 + 0.5) <= v121) {
        goto LABEL_7;
      }
      a5.n128_f32[0] = sub_2194BDD34(v162, v395, v33 + 0.5);
      if (a5.n128_f32[0] <= v121) {
        goto LABEL_7;
      }
    }
    uint64_t v163 = v28 + 144 * v29;
    uint64_t v164 = *(void *)(v163 + 72);
    uint64_t v165 = *(void *)(v163 + 40);
    uint64_t v166 = v164 + 2 * v165 * v363;
    uint64_t v167 = v166 + 2 * v165;
    a5.n128_u16[0] = *(_WORD *)(v166 + 2 * v376);
    HIWORD(v168) = HIWORD(v359);
    a7.n128_u16[1] = HIWORD(v360);
    LOWORD(v168) = *(_WORD *)(v166 + 2 * v377);
    *(float *)&unsigned int v169 = (float)v168;
    a5.n128_f32[0] = (float)(v359 * (float)a5.n128_u32[0]) + (float)(v360 * *(float *)&v169);
    LOWORD(v169) = *(_WORD *)(v167 + 2 * v377);
    a7.n128_u16[0] = *(_WORD *)(v167 + 2 * v376);
    a5.n128_f32[0] = a5.n128_f32[0] + (float)(v361 * (float)v169);
    float v170 = (float)a7.n128_u32[0];
    a7.n128_u16[1] = HIWORD(v362);
    a5.n128_f32[0] = a5.n128_f32[0] + (float)(v362 * v170);
    WORD1(a10) = HIWORD(v370);
    a7.n128_u16[0] = *(_WORD *)(v166 + 2 * v369);
    a7.n128_f32[0] = (float)a7.n128_u32[0];
    float v171 = (float)(*(float *)&v370 * v358) * a7.n128_f32[0];
    a7.n128_u16[0] = *(_WORD *)(v166 + 2 * v368);
    a7.n128_f32[0] = (float)a7.n128_u32[0];
    float v172 = v171 + (float)((float)(*(float *)&v371 * v358) * a7.n128_f32[0]);
    a7.n128_u16[0] = *(_WORD *)(v167 + 2 * v368);
    *(float *)&a8 = v357 * *(float *)&v371;
    float v173 = v172 + (float)((float)(v357 * *(float *)&v371) * (float)a7.n128_u32[0]);
    a7.n128_f32[0] = *(float *)&v370 * v357;
    LOWORD(a8) = *(_WORD *)(v167 + 2 * v369);
    float v174 = v173 + (float)((float)(*(float *)&v370 * v357) * (float)LODWORD(a8));
    a7.n128_u16[0] = *(_WORD *)(v166 + 2 * v385);
    WORD1(a8) = HIWORD(v366);
    LOWORD(a8) = *(_WORD *)(v166 + 2 * v384);
    *(float *)&a8 = (float)LODWORD(a8);
    a7.n128_f32[0] = (float)(v366 * (float)a7.n128_u32[0]) + (float)(v367 * *(float *)&a8);
    uint64_t v175 = *(void *)(v28 + 144 * v26 + 120);
    uint64_t v176 = *(void *)(v175 + 8 * v386);
    LOWORD(a8) = *(_WORD *)(v167 + 2 * v384);
    *(float *)&a8 = (float)LODWORD(a8);
    a7.n128_f32[0] = a7.n128_f32[0] + (float)(v364 * *(float *)&a8);
    LOWORD(a8) = *(_WORD *)(v167 + 2 * v385);
    a7.n128_f32[0] = a7.n128_f32[0] + (float)(v365 * (float)LODWORD(a8));
    uint64_t v177 = v12;
    unsigned int v178 = v177 + 1;
    uint64_t v179 = v164 + 2 * v165 * v177;
    *(float *)&a8 = (float)v178 - v12;
    HIWORD(v180) = HIWORD(v378);
    *(float *)&a9 = *(float *)&v379 * *(float *)&a8;
    LOWORD(a10) = *(_WORD *)(v179 + 2 * v376);
    *(float *)&a10 = (float)LODWORD(a10);
    *(float *)&a8 = (float)(*(float *)&v378 * *(float *)&a8) * *(float *)&a10;
    LOWORD(a10) = *(_WORD *)(v179 + 2 * v377);
    *(float *)&a8 = *(float *)&a8 + (float)(*(float *)&a9 * (float)LODWORD(a10));
    LOWORD(a9) = *(_WORD *)(v176 + 2 * v383);
    uint64_t v181 = v179 + 2 * v165;
    *(float *)&a10 = v12 - (float)v12;
    *(float *)&a11 = *(float *)&v379 * *(float *)&a10;
    LOWORD(a12) = *(_WORD *)(v181 + 2 * v377);
    *(float *)&a12 = (float)LODWORD(a12);
    *(float *)&a8 = *(float *)&a8 + (float)((float)(*(float *)&v379 * *(float *)&a10) * *(float *)&a12);
    LOWORD(a11) = *(_WORD *)(v176 + 2 * v382);
    *(float *)&a9 = (float)LODWORD(a9);
    *(float *)&a11 = (float)LODWORD(a11);
    LOWORD(a12) = *(_WORD *)(v176 + 2 * v381);
    uint64_t v182 = *(void *)(v175 + 8 * v387);
    *(float *)&a12 = (float)LODWORD(a12);
    *(float *)&a10 = *(float *)&v378 * *(float *)&a10;
    LOWORD(v180) = *(_WORD *)(v181 + 2 * v376);
    *(float *)&unsigned int v183 = (float)v180;
    *(float *)&a8 = *(float *)&a8 + (float)(*(float *)&a10 * *(float *)&v183);
    LOWORD(a10) = *(_WORD *)(v182 + 2 * v382);
    uint64_t v184 = v164 + 2 * v165 * v380;
    LOWORD(v183) = *(_WORD *)(v184 + 2 * v376);
    HIWORD(v185) = HIWORD(v372);
    HIWORD(v186) = HIWORD(v373);
    LOWORD(v185) = *(_WORD *)(v184 + 2 * v377);
    *(float *)&unsigned int v187 = (float)v185;
    HIWORD(v188) = HIWORD(v375);
    float v189 = (float)(v372 * (float)v183) + (float)(v375 * *(float *)&v187);
    LOWORD(v187) = *(_WORD *)(v182 + 2 * v383);
    uint64_t v190 = v184 + 2 * v165;
    LOWORD(v188) = *(_WORD *)(v190 + 2 * v377);
    float v191 = (float)v187;
    *(float *)&unsigned int v192 = (float)v188;
    float v193 = v189 + (float)(v373 * *(float *)&v192);
    LOWORD(v192) = *(_WORD *)(v182 + 2 * v381);
    uint64_t v194 = *(void *)(v175 + 8 * v388);
    LOWORD(v186) = *(_WORD *)(v190 + 2 * v376);
    *(float *)&unsigned int v195 = (float)v186;
    float v196 = v193 + (float)(v374 * *(float *)&v195);
    LOWORD(v195) = *(_WORD *)(v194 + 2 * v383);
    *(float *)&unsigned int v197 = (float)v195;
    float v198 = *(float *)&a12 - *(float *)&a11;
    *(float *)&a11 = (float)(*(float *)&a11 + (float)(*(float *)&a9 * -2.0)) + *(float *)&a12;
    *(float *)&a12 = *(float *)&v197 - v191;
    float v199 = (float)(v191 + (float)(*(float *)&a9 * -2.0)) + *(float *)&v197;
    LOWORD(v197) = *(_WORD *)(v194 + 2 * v381);
    *(float *)&unsigned int v200 = (float)v197;
    *(float *)&a10 = (float)LODWORD(a10) + *(float *)&v200;
    LOWORD(v200) = *(_WORD *)(v194 + 2 * v382);
    *(float *)&unsigned int v201 = (float)v192 + (float)v200;
    uint64_t v202 = *(void *)(*v390 + 8 * v386);
    *(float *)&a10 = *(float *)&a10 - *(float *)&v201;
    LOWORD(v201) = *(_WORD *)(v202 + 2 * v383);
    float v203 = (float)v201;
    *(float *)&a9 = v203 + (float)(*(float *)&a9 * -2.0);
    float v204 = a5.n128_f32[0] - v203;
    a5.n128_f32[0] = *(float *)&a9 + a5.n128_f32[0];
    LOWORD(a9) = *(_WORD *)(v202 + 2 * v382);
    *(float *)&a9 = (float)LODWORD(a9);
    float v205 = v174 + *(float *)&a9;
    LOWORD(a9) = *(_WORD *)(v202 + 2 * v381);
    a7.n128_f32[0] = a7.n128_f32[0] + (float)LODWORD(a9);
    float v206 = v205 - a7.n128_f32[0];
    a7.n128_u16[0] = *(_WORD *)(*(void *)(*v390 + 8 * v387) + 2 * v383);
    a7.n128_f32[0] = *(float *)&a8 + (float)a7.n128_u32[0];
    LOWORD(a8) = *(_WORD *)(*(void *)(*v390 + 8 * v388) + 2 * v383);
    a7.n128_f32[0] = a7.n128_f32[0] - (float)(v196 + (float)LODWORD(a8));
    LODWORD(a9) = 0.25;
    *(float *)&a8 = *(float *)&a10 * 0.25;
    int v407 = LODWORD(a11);
    float v408 = *(float *)&a10 * 0.25;
    float v409 = v206 * 0.25;
    float v410 = *(float *)&a10 * 0.25;
    float v412 = a7.n128_f32[0] * 0.25;
    float v413 = v206 * 0.25;
    float v411 = v199;
    float v414 = a7.n128_f32[0] * 0.25;
    unsigned __int32 v415 = a5.n128_u32[0];
    a7.n128_u32[0] = -0.5;
    v405.f32[0] = v198 * -0.5;
    v405.f32[1] = *(float *)&a12 * -0.5;
    float v406 = v204 * -0.5;
    LODWORD(v202) = 1 << *(_DWORD *)&v21[v18 + 32];
    *(float *)&v21[v18] = v35 * (float)(int)v202;
    *(float *)(v22 + 4) = v32 * (float)(int)v202;
    a5.n128_u32[0] = 1.0;
    if ((sub_2194BBF8C(v22, a2, a3, (float *)&v407, &v405, 0x8000u, a5.n128_f64[0], *a1, a7.n128_f64[0], a8, a9, a10, a11, a12) & 1) == 0)goto LABEL_7; {
LABEL_172:
    }
    uint64_t v353 = (uint64_t)&(*v16)[48 * v394];
    a5 = *(__n128 *)v22;
    a7 = *(__n128 *)(v22 + 32);
    *(_OWORD *)(v353 + 16) = *(_OWORD *)(v22 + 16);
    *(__n128 *)(v353 + 32) = a7;
    *(__n128 *)uint64_t v353 = a5;
    ++v394;
    goto LABEL_7;
  }
}

void sub_2194B9FB0(char **a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4) <= a4) {
    return;
  }
  long long v10 = &v6[48 * a4];
  if (v10 == v7) {
    goto LABEL_89;
  }
  float v11 = (float)a6;
  while (1)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 4);
    if (v12 < 2) {
      goto LABEL_89;
    }
    if (v12 == 3) {
      break;
    }
    if (v12 == 2)
    {
      if (vabds_f32(*((float *)v7 - 1), v11) > vabds_f32(*((float *)v6 + 11), v11))
      {
        long long v203 = *((_OWORD *)v6 + 1);
        long long v235 = *((_OWORD *)v6 + 2);
        long long v173 = *(_OWORD *)v6;
        long long v68 = *((_OWORD *)v7 - 3);
        long long v69 = *((_OWORD *)v7 - 1);
        *((_OWORD *)v6 + 1) = *((_OWORD *)v7 - 2);
        *((_OWORD *)v6 + 2) = v69;
        *(_OWORD *)uint64_t v6 = v68;
        *((_OWORD *)v7 - 2) = v203;
        *((_OWORD *)v7 - 1) = v235;
        *((_OWORD *)v7 - 3) = v173;
      }
      goto LABEL_89;
    }
    if (v7 - v6 <= 383)
    {
      if (v7 - 48 == v6) {
        goto LABEL_89;
      }
      while (2)
      {
        float v70 = v7;
        if (v6 == v7)
        {
LABEL_81:
          if (v70 != v6)
          {
            long long v204 = *((_OWORD *)v6 + 1);
            long long v236 = *((_OWORD *)v6 + 2);
            long long v174 = *(_OWORD *)v6;
            long long v72 = *(_OWORD *)v70;
            long long v73 = *((_OWORD *)v70 + 2);
            *((_OWORD *)v6 + 1) = *((_OWORD *)v70 + 1);
            *((_OWORD *)v6 + 2) = v73;
            *(_OWORD *)uint64_t v6 = v72;
            *((_OWORD *)v70 + 1) = v204;
            *((_OWORD *)v70 + 2) = v236;
            *(_OWORD *)float v70 = v174;
          }
        }
        else
        {
          unsigned int v71 = v6 + 48;
          if (v6 + 48 != v7)
          {
            float v70 = v6;
            do
            {
              if (vabds_f32(*((float *)v71 + 11), v11) > vabds_f32(*((float *)v70 + 11), v11)) {
                float v70 = v71;
              }
              v71 += 48;
            }
            while (v71 != v7);
            goto LABEL_81;
          }
        }
        v6 += 48;
        if (v6 == v7 - 48) {
          goto LABEL_89;
        }
        continue;
      }
    }
    float v13 = &v6[48 * (v12 >> 1)];
    float v14 = (float *)(v7 - 48);
    float v15 = vabds_f32(*((float *)v13 + 11), v11);
    float v16 = vabds_f32(*((float *)v7 - 1), v11);
    if (v15 > vabds_f32(*((float *)v6 + 11), v11))
    {
      if (v16 <= v15)
      {
        long long v195 = *((_OWORD *)v6 + 1);
        long long v227 = *((_OWORD *)v6 + 2);
        long long v165 = *(_OWORD *)v6;
        long long v23 = *(_OWORD *)v13;
        long long v24 = *((_OWORD *)v13 + 2);
        *((_OWORD *)v6 + 1) = *((_OWORD *)v13 + 1);
        *((_OWORD *)v6 + 2) = v24;
        *(_OWORD *)uint64_t v6 = v23;
        *((_OWORD *)v13 + 1) = v195;
        *((_OWORD *)v13 + 2) = v227;
        *(_OWORD *)float v13 = v165;
        if (vabds_f32(*((float *)v7 - 1), v11) > vabds_f32(*((float *)v13 + 11), v11))
        {
          long long v196 = *((_OWORD *)v13 + 1);
          long long v228 = *((_OWORD *)v13 + 2);
          long long v166 = *(_OWORD *)v13;
          long long v25 = *(_OWORD *)v14;
          long long v26 = *((_OWORD *)v7 - 1);
          *((_OWORD *)v13 + 1) = *((_OWORD *)v7 - 2);
          *((_OWORD *)v13 + 2) = v26;
          *(_OWORD *)float v13 = v25;
          *((_OWORD *)v7 - 2) = v196;
          *((_OWORD *)v7 - 1) = v228;
          *(_OWORD *)float v14 = v166;
LABEL_16:
          int v27 = 2;
          float v28 = vabds_f32(*((float *)v6 + 11), v11);
          float v29 = vabds_f32(*((float *)v13 + 11), v11);
          if (v28 <= v29) {
            goto LABEL_30;
          }
          goto LABEL_19;
        }
      }
      else
      {
        long long v192 = *((_OWORD *)v6 + 1);
        long long v224 = *((_OWORD *)v6 + 2);
        long long v162 = *(_OWORD *)v6;
        long long v17 = *(_OWORD *)v14;
        long long v18 = *((_OWORD *)v7 - 1);
        *((_OWORD *)v6 + 1) = *((_OWORD *)v7 - 2);
        *((_OWORD *)v6 + 2) = v18;
        *(_OWORD *)uint64_t v6 = v17;
        *((_OWORD *)v7 - 2) = v192;
        *((_OWORD *)v7 - 1) = v224;
        *(_OWORD *)float v14 = v162;
      }
LABEL_18:
      int v27 = 1;
      float v28 = vabds_f32(*((float *)v6 + 11), v11);
      float v29 = vabds_f32(*((float *)v13 + 11), v11);
      if (v28 <= v29) {
        goto LABEL_30;
      }
      goto LABEL_19;
    }
    if (v16 > v15)
    {
      long long v193 = *((_OWORD *)v13 + 1);
      long long v225 = *((_OWORD *)v13 + 2);
      long long v163 = *(_OWORD *)v13;
      long long v19 = *(_OWORD *)v14;
      long long v20 = *((_OWORD *)v7 - 1);
      *((_OWORD *)v13 + 1) = *((_OWORD *)v7 - 2);
      *((_OWORD *)v13 + 2) = v20;
      *(_OWORD *)float v13 = v19;
      *((_OWORD *)v7 - 2) = v193;
      *((_OWORD *)v7 - 1) = v225;
      *(_OWORD *)float v14 = v163;
      if (vabds_f32(*((float *)v13 + 11), v11) > vabds_f32(*((float *)v6 + 11), v11))
      {
        long long v194 = *((_OWORD *)v6 + 1);
        long long v226 = *((_OWORD *)v6 + 2);
        long long v164 = *(_OWORD *)v6;
        long long v21 = *(_OWORD *)v13;
        long long v22 = *((_OWORD *)v13 + 2);
        *((_OWORD *)v6 + 1) = *((_OWORD *)v13 + 1);
        *((_OWORD *)v6 + 2) = v22;
        *(_OWORD *)uint64_t v6 = v21;
        *((_OWORD *)v13 + 1) = v194;
        *((_OWORD *)v13 + 2) = v226;
        *(_OWORD *)float v13 = v164;
        goto LABEL_16;
      }
      goto LABEL_18;
    }
    int v27 = 0;
    float v28 = vabds_f32(*((float *)v6 + 11), v11);
    float v29 = vabds_f32(*((float *)v13 + 11), v11);
    if (v28 <= v29)
    {
LABEL_30:
      uint64_t v39 = v7 - 48;
      while (1)
      {
        unint64_t v30 = v39 - 48;
        if (v39 - 48 == v6) {
          break;
        }
        float v40 = vabds_f32(*((float *)v39 - 1), v11);
        v39 -= 48;
        if (v40 > v29)
        {
          long long v198 = *((_OWORD *)v6 + 1);
          long long v230 = *((_OWORD *)v6 + 2);
          long long v168 = *(_OWORD *)v6;
          long long v41 = *(_OWORD *)v30;
          long long v42 = *((_OWORD *)v30 + 2);
          *((_OWORD *)v6 + 1) = *((_OWORD *)v30 + 1);
          *((_OWORD *)v6 + 2) = v42;
          *(_OWORD *)uint64_t v6 = v41;
          *((_OWORD *)v30 + 1) = v198;
          *((_OWORD *)v30 + 2) = v230;
          *(_OWORD *)unint64_t v30 = v168;
          ++v27;
          unint64_t v31 = v6 + 48;
          if (v6 + 48 < v30) {
            goto LABEL_20;
          }
          goto LABEL_34;
        }
      }
      BOOL v48 = v6 + 48;
      if (v28 <= vabds_f32(*((float *)v7 - 1), v11))
      {
        if (v48 == (char *)v14) {
          goto LABEL_89;
        }
        while (v28 <= vabds_f32(*((float *)v48 + 11), v11))
        {
          v48 += 48;
          if (v48 == (char *)v14) {
            goto LABEL_89;
          }
        }
        long long v200 = *((_OWORD *)v48 + 1);
        long long v232 = *((_OWORD *)v48 + 2);
        long long v170 = *(_OWORD *)v48;
        long long v52 = *(_OWORD *)v14;
        long long v53 = *((_OWORD *)v7 - 1);
        *((_OWORD *)v48 + 1) = *((_OWORD *)v7 - 2);
        *((_OWORD *)v48 + 2) = v53;
        *(_OWORD *)BOOL v48 = v52;
        v48 += 48;
        *((_OWORD *)v7 - 2) = v200;
        *((_OWORD *)v7 - 1) = v232;
        *(_OWORD *)float v14 = v170;
      }
      if (v48 == (char *)v14) {
        goto LABEL_89;
      }
      while (1)
      {
        float v54 = vabds_f32(*((float *)v6 + 11), v11);
        uint64_t v45 = v48 - 48;
        do
        {
          float v55 = vabds_f32(*((float *)v45 + 23), v11);
          v45 += 48;
        }
        while (v54 <= v55);
        BOOL v48 = v45 + 48;
        do
        {
          float v56 = *(v14 - 1);
          v14 -= 12;
        }
        while (v54 > vabds_f32(v56, v11));
        if (v45 >= (char *)v14) {
          break;
        }
        long long v201 = *((_OWORD *)v45 + 1);
        long long v233 = *((_OWORD *)v45 + 2);
        long long v171 = *(_OWORD *)v45;
        long long v57 = *(_OWORD *)v14;
        long long v58 = *((_OWORD *)v14 + 2);
        *((_OWORD *)v45 + 1) = *((_OWORD *)v14 + 1);
        *((_OWORD *)v45 + 2) = v58;
        *(_OWORD *)uint64_t v45 = v57;
        *((_OWORD *)v14 + 1) = v201;
        *((_OWORD *)v14 + 2) = v233;
        *(_OWORD *)float v14 = v171;
      }
      if (v45 > v10) {
        goto LABEL_89;
      }
      goto LABEL_65;
    }
LABEL_19:
    unint64_t v30 = v7 - 48;
    unint64_t v31 = v6 + 48;
    if (v6 + 48 >= v7 - 48)
    {
LABEL_34:
      unint64_t v34 = (unint64_t)v31;
    }
    else
    {
LABEL_20:
      float v32 = v31;
      while (1)
      {
        float v33 = vabds_f32(*((float *)v13 + 11), v11);
        unint64_t v34 = (unint64_t)(v32 - 48);
        do
        {
          float v35 = vabds_f32(*(float *)(v34 + 92), v11);
          v34 += 48;
        }
        while (v35 > v33);
        float v32 = (char *)(v34 + 48);
        do
        {
          float v36 = *((float *)v30 - 1);
          v30 -= 48;
        }
        while (vabds_f32(v36, v11) <= v33);
        if (v34 >= (unint64_t)v30) {
          break;
        }
        long long v197 = *(_OWORD *)(v34 + 16);
        long long v229 = *(_OWORD *)(v34 + 32);
        long long v167 = *(_OWORD *)v34;
        long long v37 = *(_OWORD *)v30;
        long long v38 = *((_OWORD *)v30 + 2);
        *(_OWORD *)(v34 + 16) = *((_OWORD *)v30 + 1);
        *(_OWORD *)(v34 + 32) = v38;
        *(_OWORD *)unint64_t v34 = v37;
        *((_OWORD *)v30 + 1) = v197;
        *((_OWORD *)v30 + 2) = v229;
        *(_OWORD *)unint64_t v30 = v167;
        ++v27;
        if ((char *)v34 == v13) {
          float v13 = v30;
        }
      }
    }
    if ((char *)v34 != v13 && vabds_f32(*((float *)v13 + 11), v11) > vabds_f32(*(float *)(v34 + 44), v11))
    {
      long long v199 = *(_OWORD *)(v34 + 16);
      long long v231 = *(_OWORD *)(v34 + 32);
      long long v169 = *(_OWORD *)v34;
      long long v43 = *(_OWORD *)v13;
      long long v44 = *((_OWORD *)v13 + 2);
      *(_OWORD *)(v34 + 16) = *((_OWORD *)v13 + 1);
      *(_OWORD *)(v34 + 32) = v44;
      *(_OWORD *)unint64_t v34 = v43;
      *((_OWORD *)v13 + 1) = v199;
      *((_OWORD *)v13 + 2) = v231;
      *(_OWORD *)float v13 = v169;
      ++v27;
    }
    if ((char *)v34 == v10) {
      goto LABEL_89;
    }
    if (!v27)
    {
      if (v34 <= (unint64_t)v10)
      {
        unint64_t v49 = v34 + 48;
        while ((char *)v49 != v7)
        {
          float v50 = vabds_f32(*(float *)(v49 + 44), v11);
          float v51 = vabds_f32(*(float *)(v49 - 4), v11);
          v49 += 48;
          if (v50 > v51) {
            goto LABEL_40;
          }
        }
      }
      else
      {
        while (v31 != (char *)v34)
        {
          float v46 = vabds_f32(*((float *)v31 + 11), v11);
          float v47 = vabds_f32(*((float *)v31 - 1), v11);
          v31 += 48;
          if (v46 > v47) {
            goto LABEL_40;
          }
        }
      }
      goto LABEL_89;
    }
LABEL_40:
    if (v34 <= (unint64_t)v10)
    {
      uint64_t v45 = (char *)(v34 + 48);
    }
    else
    {
      uint64_t v7 = (char *)v34;
      uint64_t v45 = v6;
    }
LABEL_65:
    uint64_t v6 = v45;
    if (v7 == v10) {
      goto LABEL_89;
    }
  }
  uint64_t v59 = (long long *)(v6 + 48);
  uint64_t v60 = v7 - 48;
  float v61 = vabds_f32(*((float *)v6 + 23), v11);
  float v62 = vabds_f32(*((float *)v7 - 1), v11);
  if (v61 <= vabds_f32(*((float *)v6 + 11), v11))
  {
    if (v62 > v61)
    {
      long long v74 = *v59;
      long long v205 = *((_OWORD *)v6 + 4);
      long long v75 = *((_OWORD *)v6 + 5);
      long long v76 = *(_OWORD *)v60;
      long long v77 = *((_OWORD *)v7 - 1);
      *((_OWORD *)v6 + 4) = *((_OWORD *)v7 - 2);
      *((_OWORD *)v6 + 5) = v77;
      *uint64_t v59 = v76;
      *((_OWORD *)v7 - 2) = v205;
      *((_OWORD *)v7 - 1) = v75;
      *(_OWORD *)uint64_t v60 = v74;
      if (vabds_f32(*((float *)v6 + 23), v11) > vabds_f32(*((float *)v6 + 11), v11))
      {
        long long v206 = *((_OWORD *)v6 + 1);
        long long v237 = *((_OWORD *)v6 + 2);
        long long v175 = *(_OWORD *)v6;
        long long v78 = *((_OWORD *)v6 + 4);
        *(_OWORD *)uint64_t v6 = *v59;
        *((_OWORD *)v6 + 1) = v78;
        *((_OWORD *)v6 + 2) = *((_OWORD *)v6 + 5);
        *uint64_t v59 = v175;
        *((_OWORD *)v6 + 4) = v206;
        *((_OWORD *)v6 + 5) = v237;
      }
    }
  }
  else
  {
    if (v62 <= v61)
    {
      long long v207 = *((_OWORD *)v6 + 1);
      long long v238 = *((_OWORD *)v6 + 2);
      long long v176 = *(_OWORD *)v6;
      long long v79 = *((_OWORD *)v6 + 4);
      *(_OWORD *)uint64_t v6 = *v59;
      *((_OWORD *)v6 + 1) = v79;
      *((_OWORD *)v6 + 2) = *((_OWORD *)v6 + 5);
      *uint64_t v59 = v176;
      *((_OWORD *)v6 + 4) = v207;
      *((_OWORD *)v6 + 5) = v238;
      if (vabds_f32(*((float *)v7 - 1), v11) <= vabds_f32(*((float *)v6 + 23), v11)) {
        goto LABEL_89;
      }
      long long v65 = *v59;
      long long v66 = *((_OWORD *)v6 + 4);
      long long v67 = *((_OWORD *)v6 + 5);
      long long v80 = *(_OWORD *)v60;
      long long v81 = *((_OWORD *)v7 - 1);
      *((_OWORD *)v6 + 4) = *((_OWORD *)v7 - 2);
      *((_OWORD *)v6 + 5) = v81;
      *uint64_t v59 = v80;
    }
    else
    {
      long long v202 = *((_OWORD *)v6 + 1);
      long long v234 = *((_OWORD *)v6 + 2);
      long long v172 = *(_OWORD *)v6;
      long long v63 = *(_OWORD *)v60;
      long long v64 = *((_OWORD *)v7 - 1);
      *((_OWORD *)v6 + 1) = *((_OWORD *)v7 - 2);
      *((_OWORD *)v6 + 2) = v64;
      *(_OWORD *)uint64_t v6 = v63;
      long long v65 = v172;
      long long v66 = v202;
      long long v67 = v234;
    }
    *((_OWORD *)v7 - 2) = v66;
    *((_OWORD *)v7 - 1) = v67;
    *(_OWORD *)uint64_t v60 = v65;
  }
LABEL_89:
  if (!a3) {
    goto LABEL_182;
  }
  uint64_t v82 = a5 + a4;
  unsigned int v84 = *a1;
  float v83 = a1[1];
  if (a5 + a4 >= 0xAAAAAAAAAAAAAAABLL * ((v83 - *a1) >> 4))
  {
    uint64_t v135 = *(void *)(a2 + 8);
    unsigned int v136 = &v84[48 * a4];
    uint64_t v137 = (v83 - v136) >> 4;
    goto LABEL_181;
  }
  float v85 = &v84[48 * v82];
  if (v85 == v83) {
    goto LABEL_180;
  }
  unint64_t v86 = (unint64_t)&v84[48 * a4];
  float v87 = (float)a6;
  while (2)
  {
    unint64_t v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v83[-v86] >> 4);
    if (v88 < 2) {
      goto LABEL_180;
    }
    if (v88 != 3)
    {
      if (v88 == 2)
      {
        if (vabds_f32(*((float *)v83 - 1), v87) > vabds_f32(*(float *)(v86 + 44), v87))
        {
          long long v219 = *(_OWORD *)(v86 + 16);
          long long v250 = *(_OWORD *)(v86 + 32);
          long long v188 = *(_OWORD *)v86;
          long long v147 = *((_OWORD *)v83 - 3);
          long long v148 = *((_OWORD *)v83 - 1);
          *(_OWORD *)(v86 + 16) = *((_OWORD *)v83 - 2);
          *(_OWORD *)(v86 + 32) = v148;
          *(_OWORD *)unint64_t v86 = v147;
          *((_OWORD *)v83 - 2) = v219;
          *((_OWORD *)v83 - 1) = v250;
          *((_OWORD *)v83 - 3) = v188;
        }
        goto LABEL_180;
      }
      if ((uint64_t)&v83[-v86] <= 383)
      {
        if (v83 - 48 == (char *)v86) {
          goto LABEL_180;
        }
        while (2)
        {
          float v149 = v83;
          if ((char *)v86 == v83)
          {
LABEL_172:
            if (v149 != (char *)v86)
            {
              long long v220 = *(_OWORD *)(v86 + 16);
              long long v251 = *(_OWORD *)(v86 + 32);
              long long v189 = *(_OWORD *)v86;
              long long v151 = *(_OWORD *)v149;
              long long v152 = *((_OWORD *)v149 + 2);
              *(_OWORD *)(v86 + 16) = *((_OWORD *)v149 + 1);
              *(_OWORD *)(v86 + 32) = v152;
              *(_OWORD *)unint64_t v86 = v151;
              *((_OWORD *)v149 + 1) = v220;
              *((_OWORD *)v149 + 2) = v251;
              *(_OWORD *)float v149 = v189;
            }
          }
          else
          {
            unint64_t v150 = v86 + 48;
            if ((char *)(v86 + 48) != v83)
            {
              float v149 = (char *)v86;
              do
              {
                if (vabds_f32(*(float *)(v150 + 44), v87) > vabds_f32(*((float *)v149 + 11), v87)) {
                  float v149 = (char *)v150;
                }
                v150 += 48;
              }
              while ((char *)v150 != v83);
              goto LABEL_172;
            }
          }
          v86 += 48;
          if ((char *)v86 == v83 - 48) {
            goto LABEL_180;
          }
          continue;
        }
      }
      uint64_t v89 = (float *)(v86 + 48 * (v88 >> 1));
      float v90 = (float *)(v83 - 48);
      float v91 = vabds_f32(v89[11], v87);
      float v92 = vabds_f32(*((float *)v83 - 1), v87);
      if (v91 <= vabds_f32(*(float *)(v86 + 44), v87))
      {
        if (v92 <= v91)
        {
          int v103 = 0;
          float v104 = vabds_f32(*(float *)(v86 + 44), v87);
          float v105 = vabds_f32(v89[11], v87);
          if (v104 <= v105) {
            goto LABEL_119;
          }
          goto LABEL_108;
        }
        long long v209 = *((_OWORD *)v89 + 1);
        long long v240 = *((_OWORD *)v89 + 2);
        long long v178 = *(_OWORD *)v89;
        long long v95 = *(_OWORD *)v90;
        long long v96 = *((_OWORD *)v83 - 1);
        *((_OWORD *)v89 + 1) = *((_OWORD *)v83 - 2);
        *((_OWORD *)v89 + 2) = v96;
        *(_OWORD *)uint64_t v89 = v95;
        *((_OWORD *)v83 - 2) = v209;
        *((_OWORD *)v83 - 1) = v240;
        *(_OWORD *)float v90 = v178;
        if (vabds_f32(v89[11], v87) > vabds_f32(*(float *)(v86 + 44), v87))
        {
          long long v210 = *(_OWORD *)(v86 + 16);
          long long v241 = *(_OWORD *)(v86 + 32);
          long long v179 = *(_OWORD *)v86;
          long long v97 = *(_OWORD *)v89;
          long long v98 = *((_OWORD *)v89 + 2);
          *(_OWORD *)(v86 + 16) = *((_OWORD *)v89 + 1);
          *(_OWORD *)(v86 + 32) = v98;
          *(_OWORD *)unint64_t v86 = v97;
          *((_OWORD *)v89 + 1) = v210;
          *((_OWORD *)v89 + 2) = v241;
          *(_OWORD *)uint64_t v89 = v179;
          goto LABEL_105;
        }
      }
      else
      {
        if (v92 > v91)
        {
          long long v208 = *(_OWORD *)(v86 + 16);
          long long v239 = *(_OWORD *)(v86 + 32);
          long long v177 = *(_OWORD *)v86;
          long long v93 = *(_OWORD *)v90;
          long long v94 = *((_OWORD *)v83 - 1);
          *(_OWORD *)(v86 + 16) = *((_OWORD *)v83 - 2);
          *(_OWORD *)(v86 + 32) = v94;
          *(_OWORD *)unint64_t v86 = v93;
          *((_OWORD *)v83 - 2) = v208;
          *((_OWORD *)v83 - 1) = v239;
          *(_OWORD *)float v90 = v177;
          goto LABEL_107;
        }
        long long v211 = *(_OWORD *)(v86 + 16);
        long long v242 = *(_OWORD *)(v86 + 32);
        long long v180 = *(_OWORD *)v86;
        long long v99 = *(_OWORD *)v89;
        long long v100 = *((_OWORD *)v89 + 2);
        *(_OWORD *)(v86 + 16) = *((_OWORD *)v89 + 1);
        *(_OWORD *)(v86 + 32) = v100;
        *(_OWORD *)unint64_t v86 = v99;
        *((_OWORD *)v89 + 1) = v211;
        *((_OWORD *)v89 + 2) = v242;
        *(_OWORD *)uint64_t v89 = v180;
        if (vabds_f32(*((float *)v83 - 1), v87) > vabds_f32(v89[11], v87))
        {
          long long v212 = *((_OWORD *)v89 + 1);
          long long v243 = *((_OWORD *)v89 + 2);
          long long v181 = *(_OWORD *)v89;
          long long v101 = *(_OWORD *)v90;
          long long v102 = *((_OWORD *)v83 - 1);
          *((_OWORD *)v89 + 1) = *((_OWORD *)v83 - 2);
          *((_OWORD *)v89 + 2) = v102;
          *(_OWORD *)uint64_t v89 = v101;
          *((_OWORD *)v83 - 2) = v212;
          *((_OWORD *)v83 - 1) = v243;
          *(_OWORD *)float v90 = v181;
LABEL_105:
          int v103 = 2;
          float v104 = vabds_f32(*(float *)(v86 + 44), v87);
          float v105 = vabds_f32(v89[11], v87);
          if (v104 <= v105)
          {
LABEL_119:
            unsigned int v115 = v83 - 48;
            while (1)
            {
              BOOL v106 = (float *)(v115 - 48);
              if (v115 - 48 == (char *)v86) {
                break;
              }
              float v116 = vabds_f32(*((float *)v115 - 1), v87);
              v115 -= 48;
              if (v116 > v105)
              {
                long long v214 = *(_OWORD *)(v86 + 16);
                long long v245 = *(_OWORD *)(v86 + 32);
                long long v183 = *(_OWORD *)v86;
                long long v117 = *(_OWORD *)v106;
                long long v118 = *((_OWORD *)v106 + 2);
                *(_OWORD *)(v86 + 16) = *((_OWORD *)v106 + 1);
                *(_OWORD *)(v86 + 32) = v118;
                *(_OWORD *)unint64_t v86 = v117;
                *((_OWORD *)v106 + 1) = v214;
                *((_OWORD *)v106 + 2) = v245;
                *(_OWORD *)BOOL v106 = v183;
                ++v103;
                unint64_t v107 = v86 + 48;
                if (v86 + 48 < (unint64_t)v106) {
                  goto LABEL_109;
                }
                goto LABEL_123;
              }
            }
            unint64_t v124 = v86 + 48;
            if (v104 <= vabds_f32(*((float *)v83 - 1), v87))
            {
              if ((float *)v124 == v90) {
                goto LABEL_180;
              }
              while (v104 <= vabds_f32(*(float *)(v124 + 44), v87))
              {
                v124 += 48;
                if ((float *)v124 == v90) {
                  goto LABEL_180;
                }
              }
              long long v216 = *(_OWORD *)(v124 + 16);
              long long v247 = *(_OWORD *)(v124 + 32);
              long long v185 = *(_OWORD *)v124;
              long long v128 = *(_OWORD *)v90;
              long long v129 = *((_OWORD *)v83 - 1);
              *(_OWORD *)(v124 + 16) = *((_OWORD *)v83 - 2);
              *(_OWORD *)(v124 + 32) = v129;
              *(_OWORD *)unint64_t v124 = v128;
              v124 += 48;
              *((_OWORD *)v83 - 2) = v216;
              *((_OWORD *)v83 - 1) = v247;
              *(_OWORD *)float v90 = v185;
            }
            if ((float *)v124 == v90) {
              goto LABEL_180;
            }
            while (1)
            {
              float v132 = vabds_f32(*(float *)(v86 + 44), v87);
              unint64_t v121 = v124 - 48;
              do
              {
                float v133 = vabds_f32(*(float *)(v121 + 92), v87);
                v121 += 48;
              }
              while (v132 <= v133);
              unint64_t v124 = v121 + 48;
              do
              {
                float v134 = *(v90 - 1);
                v90 -= 12;
              }
              while (v132 > vabds_f32(v134, v87));
              if (v121 >= (unint64_t)v90) {
                break;
              }
              long long v217 = *(_OWORD *)(v121 + 16);
              long long v248 = *(_OWORD *)(v121 + 32);
              long long v186 = *(_OWORD *)v121;
              long long v130 = *(_OWORD *)v90;
              long long v131 = *((_OWORD *)v90 + 2);
              *(_OWORD *)(v121 + 16) = *((_OWORD *)v90 + 1);
              *(_OWORD *)(v121 + 32) = v131;
              *(_OWORD *)unint64_t v121 = v130;
              *((_OWORD *)v90 + 1) = v217;
              *((_OWORD *)v90 + 2) = v248;
              *(_OWORD *)float v90 = v186;
            }
            if (v121 > (unint64_t)v85) {
              goto LABEL_180;
            }
LABEL_155:
            unint64_t v86 = v121;
            if (v83 == v85) {
              goto LABEL_180;
            }
            continue;
          }
LABEL_108:
          BOOL v106 = (float *)(v83 - 48);
          unint64_t v107 = v86 + 48;
          if (v86 + 48 >= (unint64_t)(v83 - 48))
          {
LABEL_123:
            unint64_t v110 = v107;
          }
          else
          {
LABEL_109:
            unint64_t v108 = v107;
            while (1)
            {
              float v109 = vabds_f32(v89[11], v87);
              unint64_t v110 = v108 - 48;
              do
              {
                float v111 = vabds_f32(*(float *)(v110 + 92), v87);
                v110 += 48;
              }
              while (v111 > v109);
              unint64_t v108 = v110 + 48;
              do
              {
                float v112 = *(v106 - 1);
                v106 -= 12;
              }
              while (vabds_f32(v112, v87) <= v109);
              if (v110 >= (unint64_t)v106) {
                break;
              }
              long long v213 = *(_OWORD *)(v110 + 16);
              long long v244 = *(_OWORD *)(v110 + 32);
              long long v182 = *(_OWORD *)v110;
              long long v113 = *(_OWORD *)v106;
              long long v114 = *((_OWORD *)v106 + 2);
              *(_OWORD *)(v110 + 16) = *((_OWORD *)v106 + 1);
              *(_OWORD *)(v110 + 32) = v114;
              *(_OWORD *)unint64_t v110 = v113;
              *((_OWORD *)v106 + 1) = v213;
              *((_OWORD *)v106 + 2) = v244;
              *(_OWORD *)BOOL v106 = v182;
              ++v103;
              if ((float *)v110 == v89) {
                uint64_t v89 = v106;
              }
            }
          }
          if ((float *)v110 != v89 && vabds_f32(v89[11], v87) > vabds_f32(*(float *)(v110 + 44), v87))
          {
            long long v215 = *(_OWORD *)(v110 + 16);
            long long v246 = *(_OWORD *)(v110 + 32);
            long long v184 = *(_OWORD *)v110;
            long long v119 = *(_OWORD *)v89;
            long long v120 = *((_OWORD *)v89 + 2);
            *(_OWORD *)(v110 + 16) = *((_OWORD *)v89 + 1);
            *(_OWORD *)(v110 + 32) = v120;
            *(_OWORD *)unint64_t v110 = v119;
            *((_OWORD *)v89 + 1) = v215;
            *((_OWORD *)v89 + 2) = v246;
            *(_OWORD *)uint64_t v89 = v184;
            ++v103;
          }
          if ((char *)v110 == v85) {
            goto LABEL_180;
          }
          if (!v103)
          {
            if (v110 <= (unint64_t)v85)
            {
              unint64_t v125 = v110 + 48;
              while ((char *)v125 != v83)
              {
                float v126 = vabds_f32(*(float *)(v125 + 44), v87);
                float v127 = vabds_f32(*(float *)(v125 - 4), v87);
                v125 += 48;
                if (v126 > v127) {
                  goto LABEL_129;
                }
              }
            }
            else
            {
              while (v107 != v110)
              {
                float v122 = vabds_f32(*(float *)(v107 + 44), v87);
                float v123 = vabds_f32(*(float *)(v107 - 4), v87);
                v107 += 48;
                if (v122 > v123) {
                  goto LABEL_129;
                }
              }
            }
            goto LABEL_180;
          }
LABEL_129:
          if (v110 <= (unint64_t)v85)
          {
            unint64_t v121 = v110 + 48;
          }
          else
          {
            float v83 = (char *)v110;
            unint64_t v121 = v86;
          }
          goto LABEL_155;
        }
      }
LABEL_107:
      int v103 = 1;
      float v104 = vabds_f32(*(float *)(v86 + 44), v87);
      float v105 = vabds_f32(v89[11], v87);
      if (v104 <= v105) {
        goto LABEL_119;
      }
      goto LABEL_108;
    }
    break;
  }
  unsigned int v138 = (long long *)(v86 + 48);
  float v139 = v83 - 48;
  float v140 = vabds_f32(*(float *)(v86 + 92), v87);
  float v141 = vabds_f32(*((float *)v83 - 1), v87);
  if (v140 <= vabds_f32(*(float *)(v86 + 44), v87))
  {
    if (v141 > v140)
    {
      long long v153 = *v138;
      long long v221 = *(_OWORD *)(v86 + 64);
      long long v154 = *(_OWORD *)(v86 + 80);
      long long v155 = *(_OWORD *)v139;
      long long v156 = *((_OWORD *)v83 - 1);
      *(_OWORD *)(v86 + 64) = *((_OWORD *)v83 - 2);
      *(_OWORD *)(v86 + 80) = v156;
      *unsigned int v138 = v155;
      *((_OWORD *)v83 - 2) = v221;
      *((_OWORD *)v83 - 1) = v154;
      *(_OWORD *)float v139 = v153;
      if (vabds_f32(*(float *)(v86 + 92), v87) > vabds_f32(*(float *)(v86 + 44), v87))
      {
        long long v222 = *(_OWORD *)(v86 + 16);
        long long v252 = *(_OWORD *)(v86 + 32);
        long long v190 = *(_OWORD *)v86;
        long long v157 = *(_OWORD *)(v86 + 64);
        *(_OWORD *)unint64_t v86 = *v138;
        *(_OWORD *)(v86 + 16) = v157;
        *(_OWORD *)(v86 + 32) = *(_OWORD *)(v86 + 80);
        *unsigned int v138 = v190;
        *(_OWORD *)(v86 + 64) = v222;
        *(_OWORD *)(v86 + 80) = v252;
      }
    }
  }
  else
  {
    if (v141 <= v140)
    {
      long long v223 = *(_OWORD *)(v86 + 16);
      long long v253 = *(_OWORD *)(v86 + 32);
      long long v191 = *(_OWORD *)v86;
      long long v158 = *(_OWORD *)(v86 + 64);
      *(_OWORD *)unint64_t v86 = *v138;
      *(_OWORD *)(v86 + 16) = v158;
      *(_OWORD *)(v86 + 32) = *(_OWORD *)(v86 + 80);
      *unsigned int v138 = v191;
      *(_OWORD *)(v86 + 64) = v223;
      *(_OWORD *)(v86 + 80) = v253;
      if (vabds_f32(*((float *)v83 - 1), v87) <= vabds_f32(*(float *)(v86 + 92), v87)) {
        goto LABEL_180;
      }
      long long v144 = *v138;
      long long v145 = *(_OWORD *)(v86 + 64);
      long long v146 = *(_OWORD *)(v86 + 80);
      long long v159 = *(_OWORD *)v139;
      long long v160 = *((_OWORD *)v83 - 1);
      *(_OWORD *)(v86 + 64) = *((_OWORD *)v83 - 2);
      *(_OWORD *)(v86 + 80) = v160;
      *unsigned int v138 = v159;
    }
    else
    {
      long long v218 = *(_OWORD *)(v86 + 16);
      long long v249 = *(_OWORD *)(v86 + 32);
      long long v187 = *(_OWORD *)v86;
      long long v142 = *(_OWORD *)v139;
      long long v143 = *((_OWORD *)v83 - 1);
      *(_OWORD *)(v86 + 16) = *((_OWORD *)v83 - 2);
      *(_OWORD *)(v86 + 32) = v143;
      *(_OWORD *)unint64_t v86 = v142;
      long long v144 = v187;
      long long v145 = v218;
      long long v146 = v249;
    }
    *((_OWORD *)v83 - 2) = v145;
    *((_OWORD *)v83 - 1) = v146;
    *(_OWORD *)float v139 = v144;
  }
LABEL_180:
  uint64_t v135 = *(void *)(a2 + 8);
  unsigned int v136 = &(*a1)[48 * a4];
  float v83 = &(*a1)[48 * v82];
  uint64_t v137 = (48 * a5) >> 4;
LABEL_181:
  sub_2194BD900(a2, v135, v136, v83, 0xAAAAAAAAAAAAAAABLL * v137);
LABEL_182:
  unint64_t v161 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  if (a4 <= v161)
  {
    if (a4 < v161) {
      a1[1] = &(*a1)[48 * a4];
    }
  }
  else
  {
    sub_2194BDB84(a1, a4 - v161);
  }
}

void sub_2194BAEC4(uint64_t *a1, uint64_t *a2, int a3, int a4, signed int a5, unint64_t a6, unint64_t a7, unint64_t a8, __n128 a9, float a10, float a11, float a12, float a13, char a14, char a15)
{
  if (a3 != 1 || a4 != 1) {
    sub_219508004();
  }
  float v22 = a9.n128_f32[0];
  uint64_t v23 = *a1;
  long long v24 = (long long *)a1[1];
  if ((uint64_t)v24 - *a1 < 6145)
  {
    int v27 = 0;
LABEL_9:
    unint64_t v26 = 0;
  }
  else
  {
    long long v25 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v24 - v23) >> 4);
    while (1)
    {
      int v27 = (int *)operator new(48 * v26, v25);
      if (v27) {
        break;
      }
      BOOL v28 = v26 > 1;
      v26 >>= 1;
      if (!v28) {
        goto LABEL_9;
      }
    }
  }
  sub_2194BC644(v23, v24, (uint64_t)&__p, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v24 - v23) >> 4), v27, v26, a9);
  unint64_t v135 = a6;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v29 = *a2;
  uint64_t v30 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v30 - *a2) >> 3) != a5) {
    sub_219507FCC();
  }
  if ((float)(a12 + -1.0) >= 0.0) {
    float v31 = a12 + -1.0;
  }
  else {
    float v31 = 0.0;
  }
  float v32 = (float)a7;
  float v33 = (float)a8;
  uint64_t v35 = *a1;
  uint64_t v34 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v34 - *a1) >> 4) <= v135 && a15 != 0)
  {
    if (v29 != v30)
    {
      uint64_t v55 = *a2;
      do
      {
        uint64_t v56 = *(void *)(v55 + 8) - *(void *)v55;
        if (v56 >= 1) {
          bzero(*(void **)v55, 4 * (((unint64_t)v56 >> 2) - ((unint64_t)v56 > 3)) + 4);
        }
        v55 += 24;
      }
      while (v55 != v30);
    }
    for (; v35 != v34; v35 += 48)
    {
      uint64_t v62 = (int)(float)(*(float *)(v35 + 20) / v33) + (int)(float)(*(float *)(v35 + 16) / v32);
      if (a14)
      {
        int v63 = *(_DWORD *)(v35 + 32);
        if (v63 >= 0) {
          int v64 = *(_DWORD *)(v35 + 32);
        }
        else {
          int v64 = v63 + 1;
        }
        float v65 = (float)(v64 >> 1);
        if (v65 > (float)(a5 - 1)) {
          float v65 = (float)(a5 - 1);
        }
        if (v63 < -1) {
          float v65 = 0.0;
        }
        v62 += (int)v65;
      }
      long long v58 = (uint64_t *)(v29 + 24 * v62);
      uint64_t v57 = *v58;
      uint64_t v59 = (v58[1] - *v58) >> 2;
      float v60 = *(float *)(v35 + 44);
      if (v60 < a10) {
        float v60 = a10;
      }
      unint64_t v61 = v59 - 1;
      if (v61 >= (unint64_t)(float)((float)(v60 - a10) / v22)) {
        unint64_t v61 = (unint64_t)(float)((float)(v60 - a10) / v22);
      }
      ++*(_DWORD *)(v57 + 4 * v61);
    }
    return;
  }
  sub_2194BD6B4(&__p, a2);
  if (a5 < 0) {
    sub_219486AE4();
  }
  unint64_t v37 = v135;
  long long v38 = operator new(8 * a5);
  bzero(v38, 8 * a5);
  unint64_t v39 = v135;
  if (a5 >= 2)
  {
    uint64_t v40 = a5 - 1;
    long long v41 = (unint64_t *)v38;
    unint64_t v39 = v135;
    do
    {
      unint64_t v42 = (unint64_t)(float)((float)v39 * a11);
      if (v42 >= 0x3E8) {
        unint64_t v42 = 1000;
      }
      v39 -= v42;
      if (v42 <= 0x64) {
        unint64_t v43 = 100;
      }
      else {
        unint64_t v43 = v42;
      }
      unint64_t v44 = v42 + (unint64_t)(float)(v31 * (float)v43);
      if (v44 >= 0x3E8) {
        unint64_t v44 = 1000;
      }
      *v41++ = v44;
      --v40;
    }
    while (v40);
  }
  unint64_t v45 = 100;
  if (v39 > 0x64) {
    unint64_t v45 = v39;
  }
  *((void *)v38 + a5 - 1) = v39 + (unint64_t)(float)(v31 * (float)v45);
  if (!a5)
  {
    long long v68 = 0;
    goto LABEL_68;
  }
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = a5;
  uint64_t v49 = *a2;
  do
  {
    float v50 = *(unsigned int **)(v49 + 24 * v47);
    float v51 = *(unsigned int **)(v49 + 24 * v47 + 8);
    if (v51 != v50)
    {
      long long v52 = v51 - 1;
      if (v52 != v50)
      {
        unsigned int v53 = *v52;
        do
        {
          int v54 = *--v52;
          v53 += v54;
          *long long v52 = v53;
        }
        while (v52 != v50);
      }
    }
    v46 += *v50;
    ++v47;
  }
  while (v47 != a5);
  if (a13 > 0.0 && v46)
  {
    if (a5 >= 2)
    {
      uint64_t v103 = 0;
      uint64_t v104 = 0;
      unint64_t v67 = a5 & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v105 = v67;
      BOOL v106 = (_DWORD **)*a2;
      do
      {
        LODWORD(v107) = **v106;
        LODWORD(v108) = *v106[3];
        if (v107 >= 0x3E8) {
          uint64_t v107 = 1000;
        }
        else {
          uint64_t v107 = v107;
        }
        if (v108 >= 0x3E8) {
          uint64_t v108 = 1000;
        }
        else {
          uint64_t v108 = v108;
        }
        v103 += v107;
        v104 += v108;
        v106 += 6;
        v105 -= 2;
      }
      while (v105);
      unint64_t v66 = v104 + v103;
      if (v67 == a5) {
        goto LABEL_142;
      }
    }
    else
    {
      unint64_t v66 = 0;
      unint64_t v67 = 0;
    }
    unint64_t v109 = a5 - v67;
    unint64_t v110 = (_DWORD **)(*a2 + 24 * (int)v67);
    do
    {
      float v111 = *v110;
      v110 += 3;
      LODWORD(v112) = *v111;
      if (*v111 >= 0x3E8u) {
        uint64_t v112 = 1000;
      }
      else {
        uint64_t v112 = v112;
      }
      v66 += v112;
      --v109;
    }
    while (v109);
LABEL_142:
    float v113 = 1.0;
    if (v66 > v135) {
      float v113 = (float)v135 / (float)v66;
    }
    long long v114 = (unsigned int **)*a2;
    unsigned int v115 = (unint64_t *)v38;
    do
    {
      float v116 = *v114;
      v114 += 3;
      unsigned int v117 = *v116;
      if (*v116 >= 0x3E8) {
        unsigned int v117 = 1000;
      }
      float v118 = v113 * (float)v117;
      if ((unint64_t)v118 <= 0x64) {
        unint64_t v119 = 100;
      }
      else {
        unint64_t v119 = (unint64_t)v118;
      }
      *unsigned int v115 = (unint64_t)(float)((float)((float)(1.0 - a13) * (float)*v115)
                                      + (float)((float)((unint64_t)(float)(v31 * (float)v119)
                                                      + (unint64_t)v118)
                                              * a13));
      ++v115;
      --v48;
    }
    while (v48);
  }
  long long v68 = operator new(4 * a5);
  bzero(v68, 4 * a5);
  uint64_t v120 = 0;
  uint64_t v121 = *a2;
  do
  {
    uint64_t v122 = v121 + 24 * v120;
    float v123 = *(unsigned int **)v122;
    unint64_t v124 = *(unsigned int **)(v122 + 8);
    float v125 = a10;
    if (v123 != v124)
    {
      unsigned int v126 = (float)*((unint64_t *)v38 + v120);
      float v125 = a10;
      if (*v123 > v126)
      {
        float v127 = v22 + a10;
        if ((unint64_t)((char *)v124 - (char *)v123) < 5)
        {
LABEL_162:
          float v131 = (float)v126 * v22;
          float v132 = (float)*(v124 - 1);
        }
        else
        {
          if ((unint64_t)(v124 - v123) <= 2) {
            uint64_t v128 = 2;
          }
          else {
            uint64_t v128 = v124 - v123;
          }
          long long v129 = v123 + 1;
          uint64_t v130 = v128 - 1;
          float v127 = v22 + a10;
          while (v126 < *v129)
          {
            float v127 = v127 + v22;
            ++v129;
            if (!--v130) {
              goto LABEL_162;
            }
          }
          float v131 = (float)(v126 - *v129) * v22;
          float v132 = (float)(*(v129 - 1) - *v129);
        }
        float v125 = v127 - (float)(v131 / v132);
      }
    }
    *((float *)v68 + v120) = v125;
    uint64_t v133 = (char *)v124 - (char *)v123;
    if (v133 >= 1) {
      bzero(v123, 4 * (((unint64_t)v133 >> 2) - ((unint64_t)v133 > 3)) + 4);
    }
    ++v120;
  }
  while (v120 != a5);
LABEL_68:
  unsigned int v138 = 0;
  float v139 = 0;
  if (v135)
  {
    if (v135 > 0x555555555555555) {
      sub_219486AE4();
    }
    long long v69 = (char *)operator new(48 * v135);
    float v70 = &v69[48 * v135];
    unsigned int v138 = v69;
    float v139 = v70;
    unsigned int v71 = (char *)*a1;
    long long v72 = (char *)a1[1];
    if ((char *)*a1 != v72)
    {
      while (1)
      {
LABEL_79:
        uint64_t v79 = (int)(float)(*((float *)v71 + 5) / v33) + (int)(float)(*((float *)v71 + 4) / v32);
        if (a14)
        {
          int v80 = *((_DWORD *)v71 + 8);
          if (v80 >= 0) {
            int v81 = *((_DWORD *)v71 + 8);
          }
          else {
            int v81 = v80 + 1;
          }
          float v82 = (float)(v81 >> 1);
          if (v82 > (float)(a5 - 1)) {
            float v82 = (float)(a5 - 1);
          }
          if (v80 < -1) {
            float v82 = 0.0;
          }
          v79 += (int)v82;
        }
        float v75 = *((float *)v71 + 11);
        uint64_t v83 = *((void *)v38 + v79);
        if (v75 < *((float *)v68 + v79) || v83 == 0) {
          goto LABEL_74;
        }
        float v85 = v138;
        unint64_t v86 = 0xAAAAAAAAAAAAAAABLL * ((v69 - v138) >> 4);
        if (v86 >= v37) {
          goto LABEL_74;
        }
        *((void *)v38 + v79) = v83 - 1;
        if (v69 >= v139) {
          break;
        }
        long long v73 = *(_OWORD *)v71;
        long long v74 = *((_OWORD *)v71 + 2);
        *((_OWORD *)v69 + 1) = *((_OWORD *)v71 + 1);
        *((_OWORD *)v69 + 2) = v74;
        *(_OWORD *)long long v69 = v73;
        v69 += 48;
LABEL_73:
        float v75 = *((float *)v71 + 11);
LABEL_74:
        uint64_t v76 = *(void *)(*a2 + 24 * v79);
        if (v75 < a10) {
          float v75 = a10;
        }
        float v77 = (float)(v75 - a10) / v22;
        unint64_t v78 = ((*(void *)(*a2 + 24 * v79 + 8) - v76) >> 2) - 1;
        if (v78 >= (unint64_t)v77) {
          unint64_t v78 = (unint64_t)v77;
        }
        ++*(_DWORD *)(v76 + 4 * v78);
        v71 += 48;
        if (v71 == v72)
        {
          unsigned int v71 = (char *)*a1;
          *a1 = (uint64_t)v138;
          a1[1] = (uint64_t)v69;
          a1[2] = (uint64_t)v139;
          if (v71) {
            goto LABEL_113;
          }
          goto LABEL_114;
        }
      }
      unint64_t v87 = v86 + 1;
      if (v86 + 1 > 0x555555555555555) {
        sub_219486AE4();
      }
      if (0x5555555555555556 * ((v139 - v138) >> 4) > v87) {
        unint64_t v87 = 0x5555555555555556 * ((v139 - v138) >> 4);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v139 - v138) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v88 = 0x555555555555555;
      }
      else {
        unint64_t v88 = v87;
      }
      if (v88)
      {
        if (v88 > 0x555555555555555) {
          sub_219486AFC();
        }
        uint64_t v89 = (char *)operator new(48 * v88);
      }
      else
      {
        uint64_t v89 = 0;
      }
      float v90 = &v89[16 * ((v69 - v138) >> 4)];
      long long v91 = *(_OWORD *)v71;
      long long v92 = *((_OWORD *)v71 + 2);
      *((_OWORD *)v90 + 1) = *((_OWORD *)v71 + 1);
      *((_OWORD *)v90 + 2) = v92;
      *(_OWORD *)float v90 = v91;
      if (v69 == v138)
      {
        long long v69 = v90 + 48;
        unsigned int v138 = &v89[48 * v86];
        float v139 = &v89[48 * v88];
        if (!v85) {
          goto LABEL_109;
        }
      }
      else
      {
        long long v93 = &v89[16 * ((v69 - v138) >> 4)];
        do
        {
          long long v94 = *((_OWORD *)v69 - 3);
          long long v95 = *((_OWORD *)v69 - 1);
          long long v96 = v93 - 48;
          *((_OWORD *)v93 - 2) = *((_OWORD *)v69 - 2);
          *((_OWORD *)v93 - 1) = v95;
          *((_OWORD *)v93 - 3) = v94;
          v69 -= 48;
          v93 -= 48;
        }
        while (v69 != v138);
        long long v69 = v90 + 48;
        unsigned int v138 = v96;
        float v139 = &v89[48 * v88];
        if (!v85) {
          goto LABEL_109;
        }
      }
      operator delete(v85);
LABEL_109:
      unint64_t v37 = v135;
      goto LABEL_73;
    }
  }
  else
  {
    float v70 = 0;
    long long v69 = 0;
    unsigned int v71 = (char *)*a1;
    long long v72 = (char *)a1[1];
    if ((char *)*a1 != v72) {
      goto LABEL_79;
    }
  }
  *a1 = (uint64_t)v69;
  a1[1] = (uint64_t)v69;
  a1[2] = (uint64_t)v70;
  if (v71) {
LABEL_113:
  }
    operator delete(v71);
LABEL_114:
  if (v68) {
    operator delete(v68);
  }
  operator delete(v38);
  long long v97 = (char *)__p;
  if (__p)
  {
    long long v98 = v141;
    long long v99 = __p;
    if (v141 != __p)
    {
      long long v100 = v141;
      do
      {
        long long v102 = (void *)*((void *)v100 - 3);
        v100 -= 24;
        long long v101 = v102;
        if (v102)
        {
          *((void *)v98 - 2) = v101;
          operator delete(v101);
        }
        long long v98 = v100;
      }
      while (v100 != v97);
      long long v99 = __p;
    }
    float v141 = v97;
    operator delete(v99);
  }
}

void sub_2194BB860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  operator delete(v19);
  sub_21948B590(&a19);
  _Unwind_Resume(a1);
}

void sub_2194BB8D4(void **a1, uint64_t *a2, int a3, int a4, int a5, int a6, unint64_t a7, unint64_t a8, unsigned __int8 a9)
{
  int v14 = a3;
  int v97 = a4 * a3;
  unint64_t v17 = a4 * a3 * a5;
  uint64_t v18 = a2[1];
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - *a2) >> 3);
  int v95 = a4 * a3 * a5;
  if (v17 <= v19)
  {
    if (v17 >= v19)
    {
      uint64_t v21 = a2[1];
      uint64_t v20 = *a2;
      uint64_t v22 = v21 - *a2;
      if (v21 == *a2) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v21 = *a2 + 24 * (int)v17;
      if (v18 != v21)
      {
        uint64_t v23 = a2[1];
        do
        {
          long long v25 = *(void **)(v23 - 24);
          v23 -= 24;
          long long v24 = v25;
          if (v25)
          {
            *(void *)(v18 - 16) = v24;
            operator delete(v24);
          }
          uint64_t v18 = v23;
        }
        while (v23 != v21);
      }
      a2[1] = v21;
      uint64_t v20 = *a2;
      uint64_t v22 = v21 - *a2;
      if (v21 == *a2) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    sub_2194BC1C8((uint64_t)a2, v17 - v19);
    uint64_t v20 = *a2;
    uint64_t v21 = a2[1];
    uint64_t v22 = v21 - *a2;
    if (v21 == *a2) {
      goto LABEL_22;
    }
  }
  unint64_t v26 = v22 / 24;
  if (v26 <= 1) {
    unint64_t v26 = 1;
  }
  if (v26 >= 2)
  {
    unint64_t v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
    BOOL v28 = (uint64_t *)(v20 + 24);
    unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v30 = *v28;
      *(v28 - 2) = *(v28 - 3);
      v28[1] = v30;
      v28 += 6;
      v29 -= 2;
    }
    while (v29);
    if (v26 == v27) {
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v27 = 0;
  }
  unint64_t v31 = v26 - v27;
  float v32 = (void *)(v20 + 24 * v27 + 8);
  do
  {
    *float v32 = *(v32 - 1);
    v32 += 3;
    --v31;
  }
  while (v31);
LABEL_22:
  float v33 = (float *)a1[1];
  long long v98 = a1;
  if (v33 == *a1)
  {
    unsigned int v71 = a2;
    long long v100 = 0;
    long long v101 = 0;
    long long v102 = 0;
    if (v21 != v20) {
      goto LABEL_58;
    }
    goto LABEL_92;
  }
  int v94 = a6;
  unint64_t v34 = 0;
  float v35 = (float)a4;
  uint64_t v36 = a9;
  float v37 = (float)a7 / (float)v14;
  float v38 = (float)(a5 - 1);
  float v39 = (float)a8 / v35;
  float v33 = (float *)*a1;
  int v96 = v14;
  do
  {
    signed int v41 = vcvtms_s32_f32(v33[12 * v34 + 4] / v37) + vcvtms_s32_f32(v33[12 * v34 + 5] / v39) * v14;
    if (v36)
    {
      int v42 = LODWORD(v33[12 * v34 + 8]);
      if (v42 >= 0) {
        int v43 = LODWORD(v33[12 * v34 + 8]);
      }
      else {
        int v43 = v42 + 1;
      }
      float v44 = (float)(v43 >> 1);
      if (v42 < -1) {
        float v44 = 0.0;
      }
      if (v44 > v38) {
        float v44 = v38;
      }
      v41 += v97 * vcvtms_s32_f32(v44);
    }
    unint64_t v45 = (void *)(*a2 + 24 * v41);
    float v46 = v33[12 * v34 + 11];
    uint64_t v48 = v45 + 1;
    uint64_t v47 = (char *)v45[1];
    unint64_t v49 = v45[2];
    if ((unint64_t)v47 < v49)
    {
      *(float *)uint64_t v47 = v46;
      *((_DWORD *)v47 + 1) = v34;
      uint64_t v40 = v47 + 8;
      goto LABEL_25;
    }
    uint64_t v50 = v36;
    float v51 = (char *)*v45;
    uint64_t v52 = (uint64_t)&v47[-*v45];
    uint64_t v53 = v52 >> 3;
    unint64_t v54 = (v52 >> 3) + 1;
    if (v54 >> 61) {
      sub_219486AE4();
    }
    uint64_t v55 = v49 - (void)v51;
    if (v55 >> 2 > v54) {
      unint64_t v54 = v55 >> 2;
    }
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v56 = v54;
    }
    if (v56)
    {
      if (v56 >> 61) {
        sub_219486AFC();
      }
      uint64_t v57 = operator new(8 * v56);
      long long v58 = &v57[8 * v53];
      *(float *)long long v58 = v46;
      v58[1] = v34;
      if (v47 == v51)
      {
LABEL_48:
        float v60 = v58;
        uint64_t v36 = v50;
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v57 = 0;
      long long v58 = (_DWORD *)(8 * v53);
      *(float *)long long v58 = v46;
      v58[1] = v34;
      if (v47 == v51) {
        goto LABEL_48;
      }
    }
    unint64_t v59 = v47 - 8 - v51;
    if (v59 >= 0x58)
    {
      unint64_t v61 = v47 - &v57[v52];
      float v60 = v58;
      uint64_t v36 = v50;
      if (v61 >= 0x20)
      {
        uint64_t v62 = (v59 >> 3) + 1;
        uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        int v64 = &v47[-v63];
        float v60 = &v58[v63 / 0xFFFFFFFFFFFFFFFCLL];
        float v65 = &v57[8 * v53 - 16];
        unint64_t v66 = v47 - 16;
        uint64_t v67 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v68 = *(_OWORD *)v66;
          *(v65 - 1) = *((_OWORD *)v66 - 1);
          *float v65 = v68;
          v65 -= 2;
          v66 -= 32;
          v67 -= 4;
        }
        while (v67);
        uint64_t v47 = v64;
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      float v60 = v58;
      uint64_t v36 = v50;
    }
    do
    {
      uint64_t v69 = *((void *)v47 - 1);
      v47 -= 8;
      *((void *)v60 - 1) = v69;
      v60 -= 2;
    }
    while (v47 != v51);
LABEL_54:
    uint64_t v47 = (char *)*v45;
LABEL_55:
    float v70 = &v57[8 * v56];
    *unint64_t v45 = v60;
    uint64_t v40 = v58 + 2;
    *uint64_t v48 = v58 + 2;
    void v45[2] = v70;
    a1 = v98;
    int v14 = v96;
    if (v47) {
      operator delete(v47);
    }
LABEL_25:
    *uint64_t v48 = v40;
    ++v34;
    float v33 = (float *)*a1;
  }
  while (v34 < 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4));
  unsigned int v71 = a2;
  uint64_t v20 = *a2;
  a6 = v94;
  long long v100 = 0;
  long long v101 = 0;
  long long v102 = 0;
  if (a2[1] != *a2)
  {
LABEL_58:
    long long v72 = 0;
    unint64_t v73 = 0;
    while (1)
    {
      long long v74 = (float **)(v20 + 24 * v73);
      float v75 = *v74;
      uint64_t v76 = v74[1];
      unint64_t v77 = ((char *)v76 - (char *)*v74) >> 3;
      if (v77 >= a6 / v95) {
        unint64_t v78 = a6 / v95;
      }
      else {
        unint64_t v78 = v77;
      }
      uint64_t v79 = &v75[2 * v78];
      if (v79 != v76) {
        sub_21948B608(v75, v79, v76);
      }
      if (v78) {
        break;
      }
LABEL_59:
      ++v73;
      uint64_t v20 = *v71;
      if (v73 >= 0xAAAAAAAAAAAAAAABLL * ((v71[1] - *v71) >> 3))
      {
        float v33 = (float *)*a1;
        if (*a1) {
          goto LABEL_89;
        }
        goto LABEL_90;
      }
    }
    uint64_t v80 = 0;
    int v81 = v72;
    while (2)
    {
      while (1)
      {
        unsigned int v84 = (long long *)((char *)*a1 + 48 * *(int *)(*(void *)(*v71 + 24 * v73) + 8 * v80 + 4));
        if (v81 >= v102) {
          break;
        }
        long long v82 = *v84;
        long long v83 = v84[2];
        *((_OWORD *)v81 + 1) = v84[1];
        *((_OWORD *)v81 + 2) = v83;
        *(_OWORD *)int v81 = v82;
        long long v72 = v81 + 48;
        long long v101 = v81 + 48;
        ++v80;
        v81 += 48;
        if (v80 == v78) {
          goto LABEL_59;
        }
      }
      unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * ((v81 - v100) >> 4) + 1;
      if (v85 > 0x555555555555555) {
        sub_219486AE4();
      }
      if (0x5555555555555556 * ((v102 - v100) >> 4) > v85) {
        unint64_t v85 = 0x5555555555555556 * ((v102 - v100) >> 4);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v102 - v100) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v86 = 0x555555555555555;
      }
      else {
        unint64_t v86 = v85;
      }
      if (v86)
      {
        if (v86 > 0x555555555555555) {
          sub_219486AFC();
        }
        unint64_t v87 = (char *)operator new(48 * v86);
      }
      else
      {
        unint64_t v87 = 0;
      }
      unint64_t v88 = &v87[16 * ((v81 - v100) >> 4)];
      long long v89 = *v84;
      long long v90 = v84[2];
      *((_OWORD *)v88 + 1) = v84[1];
      *((_OWORD *)v88 + 2) = v90;
      *(_OWORD *)unint64_t v88 = v89;
      long long v91 = v88;
      if (v81 == v100)
      {
        unsigned int v71 = a2;
        long long v72 = v88 + 48;
        long long v100 = &v87[16 * ((v81 - v100) >> 4)];
        long long v102 = &v87[48 * v86];
        if (v81) {
          goto LABEL_83;
        }
      }
      else
      {
        unsigned int v71 = a2;
        do
        {
          long long v92 = *((_OWORD *)v81 - 3);
          long long v93 = *((_OWORD *)v81 - 1);
          *((_OWORD *)v91 - 2) = *((_OWORD *)v81 - 2);
          *((_OWORD *)v91 - 1) = v93;
          *((_OWORD *)v91 - 3) = v92;
          v91 -= 48;
          v81 -= 48;
        }
        while (v81 != v100);
        int v81 = v100;
        long long v72 = v88 + 48;
        long long v100 = v91;
        long long v102 = &v87[48 * v86];
        if (v81) {
LABEL_83:
        }
          operator delete(v81);
      }
      a1 = v98;
      long long v101 = v72;
      ++v80;
      int v81 = v72;
      if (v80 == v78) {
        goto LABEL_59;
      }
      continue;
    }
  }
LABEL_92:
  long long v72 = 0;
  if (v33)
  {
LABEL_89:
    a1[1] = v33;
    operator delete(v33);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    long long v72 = v101;
  }
LABEL_90:
  *a1 = v100;
  a1[1] = v72;
  a1[2] = v102;
}

void sub_2194BBF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2194BBF8C(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float32x2_t *a5, unsigned int a6, double a7, float a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  float v14 = a4[8];
  float v16 = *a4;
  float v15 = a4[1];
  float v17 = a4[2];
  float v18 = a4[4];
  float v19 = a4[5];
  float v20 = (float)((float)((float)((float)((float)((float)(v15 + v15) * v17) * v19) - (float)(v14 * (float)(v15 * v15)))
                      - (float)((float)(v17 * v17) * v18))
              - (float)((float)(v19 * v19) * *a4))
      + (float)(v14 * (float)(v18 * *a4));
  v21.i32[1] = 872415232;
  if (fabsf(v20) <= 0.00000011921) {
    return 0;
  }
  float v22 = 1.0 / v20;
  v23.f32[0] = (float)((float)(v18 * v14) - (float)(v19 * v19)) * v22;
  v24.f32[0] = v22 * (float)((float)(v17 * a4[7]) - (float)(v15 * v14));
  *(float *)&a11 = (float)((float)(v15 * v19) - (float)(v17 * v18)) * v22;
  float32_t v25 = (float)((float)(v16 * v14) - (float)(v17 * v17)) * v22;
  *(float *)&a14 = v22 * (float)((float)(v17 * a4[3]) - (float)(v16 * v19));
  v23.i32[1] = v24.i32[0];
  float32x2_t v26 = *a5;
  v24.f32[1] = v25;
  v21.i32[0] = a5[1].i32[0];
  float32x2_t v27 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v23, COERCE_FLOAT(*a5)), v24, *a5, 1), (float32x2_t)__PAIR64__(LODWORD(a14), LODWORD(a11)), v21.f32[0]);
  if (fabsf(v27.f32[0]) > *(float *)&a7) {
    return 0;
  }
  if (fabsf(v27.f32[1]) > *(float *)&a7) {
    return 0;
  }
  uint64_t result = 0;
  int v30 = 1 << *(_DWORD *)(a1 + 32);
  *(float *)&a7 = (float)((float)(v16 * v18) - (float)(v15 * v15)) * v22;
  float v31 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&a11, v26), *(float32x2_t *)&a14, v26, 1), v21, *(float32x2_t *)&a7).f32[0];
  float v32 = vabds_f32(*(float *)(a1 + 44) - (float)a6, vmlas_n_f32((float)(v27.f32[1] * v26.f32[1]) + (float)(v26.f32[0] * v27.f32[0]), v21.f32[0], v31));
  *(float *)(a1 + 44) = v32;
  float v33 = *(float *)(a1 + 4);
  float v34 = *(float *)a1 + (float)(v27.f32[0] * (float)v30);
  *(float *)(a1 + 16) = v34;
  float v35 = v33 + (float)(v27.f32[1] * (float)v30);
  *(float *)(a1 + 20) = v35;
  float v36 = v31 + (float)*(int *)(a1 + 8);
  *(float *)(a1 + 24) = v36;
  if (v32 > a8 && v34 >= 0.0)
  {
    uint64_t result = 0;
    if (v34 < (float)*(unint64_t *)(a2 + 8) && v35 >= 0.0)
    {
      uint64_t result = 0;
      if (v35 < (float)*(unint64_t *)(a2 + 16) && v36 >= 0.0)
      {
        if (v36 < (float)(0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a3 + 56) - *(void *)(a3 + 48)) >> 4)))
        {
          float v37 = *(float *)(a2 + 4);
          *(float *)(a1 + 12) = v37 * powf(*(float *)(a2 + 104), v36);
          return 1;
        }
        return 0;
      }
    }
  }
  return result;
}

void sub_2194BC1C8(uint64_t a1, unint64_t a2)
{
  long long v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      long long v5 = (void *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(void **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_219486AE4();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_219486AFC();
      }
      float v11 = (char *)operator new(24 * v10);
    }
    else
    {
      float v11 = 0;
    }
    float v13 = &v11[24 * v7];
    float v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    float v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v5) {
        return;
      }
      goto LABEL_24;
    }
    do
    {
      float v17 = v13;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      long long v18 = *(_OWORD *)(v5 - 3);
      v5 -= 3;
      *(_OWORD *)(v13 - 24) = v18;
      v13 -= 24;
      *((void *)v17 - 1) = v5[2];
      void *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    while (v5 != v6);
    float v19 = *(void **)a1;
    long long v5 = *(void **)(a1 + 8);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5 != v19)
    {
      float v20 = v5;
      do
      {
        float v22 = (void *)*(v20 - 3);
        v20 -= 3;
        float32x2_t v21 = v22;
        if (v22)
        {
          *(v5 - 2) = v21;
          operator delete(v21);
        }
        long long v5 = v20;
      }
      while (v20 != v19);
      long long v5 = v19;
    }
    if (v5)
    {
LABEL_24:
      operator delete(v5);
    }
  }
}

void sub_2194BC3D0(uint64_t a1, unint64_t a2, const float *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      unint64_t v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3) {
        goto LABEL_45;
      }
      unint64_t v17 = v16 + 1;
      unint64_t v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      float32x4_t v18 = vld1q_dup_f32(a3);
      float v19 = (float32x4_t *)(v7 + 16);
      uint64_t v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *float v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      unint64_t v8 = (_DWORD *)(v7 + 4 * a2);
    }
    *(void *)(a1 + 8) = v8;
  }
  else
  {
    unint64_t v9 = *(_DWORD **)a1;
    uint64_t v10 = v7 - *(void *)a1;
    uint64_t v11 = v10 >> 2;
    unint64_t v12 = (v10 >> 2) + a2;
    if (v12 >> 62) {
      sub_219486AE4();
    }
    uint64_t v13 = v6 - (void)v9;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 62) {
        sub_219486AFC();
      }
      size_t v15 = (char *)operator new(4 * v14);
    }
    else
    {
      size_t v15 = 0;
    }
    unint64_t v21 = (unint64_t)&v15[4 * v11];
    float v22 = (char *)(v21 + 4 * a2);
    unint64_t v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    float32x2_t v24 = (char *)v21;
    if (v23 < 0x13) {
      goto LABEL_46;
    }
    if (v21 < (unint64_t)(a3 + 1))
    {
      float32x2_t v24 = &v15[4 * v11];
      if (&v15[4 * a2 + v10] > (char *)a3) {
        goto LABEL_46;
      }
    }
    unint64_t v25 = v23 + 1;
    float32x2_t v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    float32x4_t v26 = vld1q_dup_f32(a3);
    float32x2_t v27 = (float32x4_t *)&v15[4 * v11 + 16];
    uint64_t v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *float32x2_t v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_46:
      do
      {
        *(float *)float32x2_t v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    if ((_DWORD *)v7 != v9)
    {
      unint64_t v29 = v7 - (void)v9 - 4;
      if (v29 < 0x2C) {
        goto LABEL_47;
      }
      if (v7 - (unint64_t)&v15[v10] < 0x20) {
        goto LABEL_47;
      }
      uint64_t v30 = (v29 >> 2) + 1;
      uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v8 = (_DWORD *)(v7 - v31);
      v21 -= v31;
      float v32 = &v15[4 * v11 - 16];
      float v33 = (long long *)(v7 - 16);
      uint64_t v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)float v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_47:
        do
        {
          int v36 = *--v8;
          *(_DWORD *)(v21 - 4) = v36;
          v21 -= 4;
        }
        while (v8 != v9);
      }
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v22;
    *(void *)(a1 + 16) = &v15[4 * v14];
    if (v9)
    {
      operator delete(v9);
    }
  }
}

__n128 sub_2194BC644(uint64_t a1, long long *a2, uint64_t a3, unint64_t a4, int *a5, uint64_t a6, __n128 result)
{
  if (a4 >= 2)
  {
    uint64_t v8 = a1;
    if (a4 == 2)
    {
      unsigned int v9 = *(_DWORD *)(a2 - 1) & ~(*((int *)a2 - 4) >> 31);
      if (v9 >= 7) {
        unsigned int v9 = 7;
      }
      uint64_t v10 = v9;
      int v11 = dword_21950C9A4[v10];
      int v12 = dword_21950C9C4[v10];
      if ((*(_DWORD *)(a1 + 32) & ~(*(int *)(a1 + 32) >> 31)) >= 7) {
        int v13 = 7;
      }
      else {
        int v13 = *(_DWORD *)(a1 + 32) & ~(*(int *)(a1 + 32) >> 31);
      }
      result.n128_u32[0] = *(_DWORD *)(a1 + 4);
      if (v11 + v12 * (int)*((float *)a2 - 11) < dword_21950C9A4[v13] + dword_21950C9C4[v13] * (int)result.n128_f32[0])
      {
        uint64_t result = *(__n128 *)a1;
        long long v14 = *(_OWORD *)(a1 + 16);
        long long v15 = *(_OWORD *)(a1 + 32);
        long long v17 = *(a2 - 2);
        long long v16 = *(a2 - 1);
        *(_OWORD *)a1 = *(a2 - 3);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 32) = v16;
        *(a2 - 2) = v14;
        *(a2 - 1) = v15;
        *(a2 - 3) = (__int128)result;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      float v38 = a5;
      unint64_t v40 = a4 >> 1;
      uint64_t v41 = a1 + 48 * (a4 >> 1);
      unint64_t v42 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_2194BCA74(a1, v41, a3, v42, a5);
        int v43 = &v38[12 * v40];
        sub_2194BCA74(v8 + 48 * (a4 >> 1), (uint64_t)a2, a3, a4 - (a4 >> 1), v43);
        float v44 = &v38[12 * a4];
        unint64_t v45 = v43;
        while (v45 != v44)
        {
          unsigned int v47 = v45[8] & ~(v45[8] >> 31);
          if (v47 >= 7) {
            unsigned int v47 = 7;
          }
          unsigned int v48 = v38[8] & ~(v38[8] >> 31);
          uint64_t v49 = v47;
          int v50 = dword_21950C9A4[v49];
          int v51 = dword_21950C9C4[v49];
          if (v48 >= 7) {
            unsigned int v48 = 7;
          }
          if (v50 + v51 * (int)*((float *)v45 + 1) >= dword_21950C9A4[v48]
                                                     + dword_21950C9C4[v48] * (int)*((float *)v38 + 1))
          {
            uint64_t result = *(__n128 *)v38;
            long long v46 = *((_OWORD *)v38 + 2);
            *(_OWORD *)(v8 + 16) = *((_OWORD *)v38 + 1);
            *(_OWORD *)(v8 + 32) = v46;
            *(__n128 *)uint64_t v8 = result;
            v8 += 48;
            v38 += 12;
            if (v38 == v43) {
              goto LABEL_42;
            }
          }
          else
          {
            uint64_t result = *(__n128 *)v45;
            long long v52 = *((_OWORD *)v45 + 2);
            *(_OWORD *)(v8 + 16) = *((_OWORD *)v45 + 1);
            *(_OWORD *)(v8 + 32) = v52;
            *(__n128 *)uint64_t v8 = result;
            v8 += 48;
            v45 += 12;
            if (v38 == v43)
            {
LABEL_42:
              if (v45 != v44)
              {
                uint64_t v53 = 0;
                do
                {
                  uint64_t v54 = v8 + v53 * 4;
                  uint64_t result = *(__n128 *)&v45[v53];
                  long long v55 = *(_OWORD *)&v45[v53 + 8];
                  *(_OWORD *)(v54 + 16) = *(_OWORD *)&v45[v53 + 4];
                  *(_OWORD *)(v54 + 32) = v55;
                  *(__n128 *)uint64_t v54 = result;
                  v53 += 12;
                }
                while (&v45[v53] != v44);
              }
              return result;
            }
          }
        }
        if (v38 != v43)
        {
          uint64_t v56 = 0;
          do
          {
            uint64_t v57 = v8 + v56 * 4;
            uint64_t result = *(__n128 *)&v38[v56];
            long long v58 = *(_OWORD *)&v38[v56 + 8];
            *(_OWORD *)(v57 + 16) = *(_OWORD *)&v38[v56 + 4];
            *(_OWORD *)(v57 + 32) = v58;
            *(__n128 *)uint64_t v57 = result;
            v56 += 12;
          }
          while (&v38[v56] != v43);
        }
      }
      else
      {
        sub_2194BC644(a1, v41, a3, v42, a5, a6);
        sub_2194BC644(v8 + 48 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v38, a6);
        result.n128_u64[0] = sub_2194BCD54((int *)v8, (__n128 *)(v8 + 48 * (a4 >> 1)), a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)v38, a6).n128_u64[0];
      }
    }
    else if ((long long *)a1 != a2)
    {
      float v19 = (_DWORD *)(a1 + 48);
      if ((long long *)(a1 + 48) != a2)
      {
        uint64_t v20 = 0;
        uint64_t v21 = a1;
        do
        {
          int v23 = *(_DWORD *)(v21 + 80);
          unsigned int v24 = v23 & ~(v23 >> 31);
          if (v24 >= 7) {
            unsigned int v24 = 7;
          }
          uint64_t v25 = v24;
          if ((*(_DWORD *)(v21 + 32) & ~(*(int *)(v21 + 32) >> 31)) >= 7) {
            unsigned int v26 = 7;
          }
          else {
            unsigned int v26 = *(_DWORD *)(v21 + 32) & ~(*(int *)(v21 + 32) >> 31);
          }
          result.n128_u32[0] = *(_DWORD *)(v21 + 52);
          int v27 = dword_21950C9A4[v25] + dword_21950C9C4[v25] * (int)result.n128_f32[0];
          uint64_t v28 = v26;
          int v29 = dword_21950C9A4[v28];
          int v30 = dword_21950C9C4[v28];
          uint64_t v31 = v19;
          if (v27 < v29 + v30 * (int)*(float *)(v21 + 4))
          {
            int v32 = *v19;
            __n128 v61 = *(__n128 *)(v21 + 56);
            uint64_t v62 = *(void *)(v21 + 72);
            uint64_t v59 = *(void *)(v21 + 84);
            int v60 = *(_DWORD *)(v21 + 92);
            uint64_t v33 = v20;
            do
            {
              uint64_t v34 = (int *)(v8 + v33);
              long long v35 = *(_OWORD *)(v8 + v33 + 16);
              *((_OWORD *)v34 + 3) = *(_OWORD *)(v8 + v33);
              *((_OWORD *)v34 + 4) = v35;
              *((_OWORD *)v34 + 5) = *(_OWORD *)(v8 + v33 + 32);
              if (!v33)
              {
                uint64_t v22 = v8;
                goto LABEL_15;
              }
              unsigned int v36 = *(v34 - 4) & ~(*(v34 - 4) >> 31);
              if (v36 >= 7) {
                unsigned int v36 = 7;
              }
              v33 -= 48;
            }
            while (v27 < dword_21950C9A4[v36] + dword_21950C9C4[v36] * (int)*((float *)v34 - 11));
            uint64_t v22 = v8 + v33 + 48;
LABEL_15:
            *(_DWORD *)uint64_t v22 = v32;
            *(_DWORD *)(v22 + 4) = result.n128_u32[0];
            uint64_t result = v61;
            *(__n128 *)(v22 + 8) = v61;
            *(void *)(v22 + 24) = v62;
            *(_DWORD *)(v22 + 32) = v23;
            *(void *)(v22 + 36) = v59;
            *(_DWORD *)(v22 + 44) = v60;
          }
          float v19 = v31 + 12;
          v20 += 48;
          uint64_t v21 = (uint64_t)v31;
        }
        while (v31 + 12 != (_DWORD *)a2);
      }
    }
  }
  return result;
}

void sub_2194BCA74(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _OWORD *a5)
{
  if (a4)
  {
    long long v5 = a5;
    uint64_t v8 = a1;
    if (a4 == 2)
    {
      unsigned int v11 = *(_DWORD *)(a2 - 16) & ~(*(int *)(a2 - 16) >> 31);
      if (v11 >= 7) {
        unsigned int v11 = 7;
      }
      unsigned int v12 = *(_DWORD *)(a1 + 32) & ~(*(int *)(a1 + 32) >> 31);
      if (v12 >= 7) {
        unsigned int v12 = 7;
      }
      int v13 = (long long *)(a2 - 48);
      if (dword_21950C9A4[v11] + dword_21950C9C4[v11] * (int)*(float *)(a2 - 44) >= dword_21950C9A4[v12]
                                                                                   + dword_21950C9C4[v12]
                                                                                   * (int)*(float *)(a1 + 4))
      {
        long long v20 = *(_OWORD *)a1;
        long long v21 = *(_OWORD *)(a1 + 32);
        a5[1] = *(_OWORD *)(a1 + 16);
        a5[2] = v21;
        *a5 = v20;
        long long v16 = *v13;
        long long v17 = *(_OWORD *)(a2 - 32);
        long long v18 = *(_OWORD *)(a2 - 16);
      }
      else
      {
        long long v14 = *v13;
        long long v15 = *(_OWORD *)(a2 - 16);
        a5[1] = *(_OWORD *)(a2 - 32);
        a5[2] = v15;
        *a5 = v14;
        long long v16 = *(_OWORD *)a1;
        long long v17 = *(_OWORD *)(a1 + 16);
        long long v18 = *(_OWORD *)(a1 + 32);
      }
      a5[4] = v17;
      a5[5] = v18;
      a5[3] = v16;
    }
    else if (a4 == 1)
    {
      long long v9 = *(_OWORD *)a1;
      long long v10 = *(_OWORD *)(a1 + 32);
      a5[1] = *(_OWORD *)(a1 + 16);
      a5[2] = v10;
      *a5 = v9;
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v22 = a4 >> 1;
      uint64_t v23 = 48 * (a4 >> 1);
      uint64_t v24 = a1 + v23;
      sub_2194BC644(a1, a1 + v23, a3, a4 >> 1, a5, a4 >> 1);
      sub_2194BC644(v8 + v23, a2, a3, a4 - v22, &v5[(unint64_t)v23 / 0x10], a4 - v22);
      uint64_t v25 = v8 + v23;
      while (v25 != a2)
      {
        unsigned int v28 = *(_DWORD *)(v25 + 32) & ~(*(int *)(v25 + 32) >> 31);
        if (v28 >= 7) {
          unsigned int v28 = 7;
        }
        unsigned int v29 = *(_DWORD *)(v8 + 32) & ~(*(int *)(v8 + 32) >> 31);
        uint64_t v30 = v28;
        int v31 = dword_21950C9A4[v30];
        int v32 = dword_21950C9C4[v30];
        if (v29 >= 7) {
          unsigned int v29 = 7;
        }
        if (v31 + v32 * (int)*(float *)(v25 + 4) >= dword_21950C9A4[v29]
                                                   + dword_21950C9C4[v29] * (int)*(float *)(v8 + 4))
        {
          long long v26 = *(_OWORD *)v8;
          long long v27 = *(_OWORD *)(v8 + 32);
          v5[1] = *(_OWORD *)(v8 + 16);
          v5[2] = v27;
          _OWORD *v5 = v26;
          v5 += 3;
          v8 += 48;
          if (v8 == v24) {
            goto LABEL_27;
          }
        }
        else
        {
          long long v33 = *(_OWORD *)v25;
          long long v34 = *(_OWORD *)(v25 + 32);
          v5[1] = *(_OWORD *)(v25 + 16);
          v5[2] = v34;
          _OWORD *v5 = v33;
          v5 += 3;
          v25 += 48;
          if (v8 == v24)
          {
LABEL_27:
            if (v25 != a2)
            {
              unint64_t v35 = 0;
              do
              {
                unsigned int v36 = &v5[v35 / 0x10];
                long long v37 = *(_OWORD *)(v25 + v35);
                long long v38 = *(_OWORD *)(v25 + v35 + 32);
                v36[1] = *(_OWORD *)(v25 + v35 + 16);
                v36[2] = v38;
                *unsigned int v36 = v37;
                v35 += 48;
              }
              while (v25 + v35 != a2);
            }
            return;
          }
        }
      }
      if (v8 != v24)
      {
        unint64_t v39 = 0;
        do
        {
          unint64_t v40 = &v5[v39 / 0x10];
          long long v41 = *(_OWORD *)(v8 + v39);
          long long v42 = *(_OWORD *)(v8 + v39 + 32);
          v40[1] = *(_OWORD *)(v8 + v39 + 16);
          v40[2] = v42;
          *unint64_t v40 = v41;
          v39 += 48;
        }
        while (v8 + v39 != v24);
      }
    }
    else
    {
      sub_2194BD120(a1, a2, (int *)a5);
    }
  }
}

__n128 sub_2194BCD54(int *a1, __n128 *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (a6)
  {
    while (a6 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      unint64_t v10 = 0;
      unsigned int v11 = a2[2].n128_u32[0] & ~(a2[2].n128_i32[0] >> 31);
      if (v11 >= 7) {
        unsigned int v11 = 7;
      }
      int v12 = dword_21950C9A4[v11] + dword_21950C9C4[v11] * (int)a2->n128_f32[1];
      uint64_t v13 = -a5;
      while (1)
      {
        unsigned int v14 = a1[v10 / 4 + 8] & ~(a1[v10 / 4 + 8] >> 31);
        if (v14 >= 7) {
          unsigned int v14 = 7;
        }
        result.n128_u32[0] = a1[v10 / 4 + 1];
        if (v12 < dword_21950C9A4[v14] + dword_21950C9C4[v14] * (int)result.n128_f32[0]) {
          break;
        }
        v10 += 48;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v17 = -v13;
      long long v55 = a3;
      uint64_t v56 = a8;
      if (-v13 >= a6)
      {
        if (v13 == -1)
        {
          unsigned int v48 = &a1[v10 / 4];
          __n128 v60 = *(__n128 *)&a1[v10 / 4 + 4];
          __n128 v61 = *(__n128 *)&a1[v10 / 4 + 8];
          __n128 v59 = *(__n128 *)&a1[v10 / 4];
          __n128 v49 = *a2;
          __n128 v50 = a2[2];
          *((__n128 *)v48 + 1) = a2[1];
          *((__n128 *)v48 + 2) = v50;
          *(__n128 *)unsigned int v48 = v49;
          *a2 = v59;
          a2[1] = v60;
          __n128 result = v61;
          a2[2] = v61;
          return result;
        }
        if (v13 > 0) {
          uint64_t v17 = 1 - v13;
        }
        uint64_t v34 = v17 >> 1;
        long long v33 = (char *)a2;
        if (a2 != (__n128 *)a3)
        {
          unint64_t v35 = &a1[12 * v34 + v10 / 4];
          unsigned int v36 = v35[8] & ~(v35[8] >> 31);
          if (v36 >= 7) {
            unsigned int v36 = 7;
          }
          unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 4);
          int v38 = dword_21950C9A4[v36] + dword_21950C9C4[v36] * (int)*((float *)v35 + 1);
          long long v33 = (char *)a2;
          do
          {
            unint64_t v39 = v37 >> 1;
            unint64_t v40 = &v33[48 * (v37 >> 1)];
            unsigned int v41 = *((_DWORD *)v40 + 8) & ~(*((int *)v40 + 8) >> 31);
            if (v41 >= 7) {
              unsigned int v41 = 7;
            }
            int v42 = dword_21950C9A4[v41] + dword_21950C9C4[v41] * (int)*((float *)v40 + 1);
            int v43 = v40 + 48;
            v37 += ~v39;
            if (v42 < v38) {
              long long v33 = v43;
            }
            else {
              unint64_t v37 = v39;
            }
          }
          while (v37);
        }
        long long v20 = (char *)&a1[12 * v34 + v10 / 4];
        uint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v33 - (char *)a2) >> 4);
      }
      else
      {
        if (a6 >= 0) {
          uint64_t v18 = a6;
        }
        else {
          uint64_t v18 = a6 + 1;
        }
        uint64_t v19 = v18 >> 1;
        long long v20 = (char *)a2;
        if ((char *)a2 - (char *)a1 != v10)
        {
          long long v21 = (char *)&a2[3 * v19];
          unsigned int v22 = *((_DWORD *)v21 + 8) & ~(*((int *)v21 + 8) >> 31);
          if (v22 >= 7) {
            unsigned int v22 = 7;
          }
          uint64_t v23 = v22;
          int v24 = dword_21950C9A4[v23];
          int v25 = dword_21950C9C4[v23];
          unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((char *)a2 - (char *)a1 - v10) >> 4);
          int v27 = v24 + v25 * (int)*((float *)v21 + 1);
          long long v20 = (char *)&a1[v10 / 4];
          do
          {
            unint64_t v28 = v26 >> 1;
            unsigned int v29 = &v20[48 * (v26 >> 1)];
            unsigned int v30 = *((_DWORD *)v29 + 8) & ~(*((int *)v29 + 8) >> 31);
            if (v30 >= 7) {
              unsigned int v30 = 7;
            }
            int v31 = dword_21950C9A4[v30] + dword_21950C9C4[v30] * (int)*((float *)v29 + 1);
            int v32 = v29 + 48;
            v26 += ~v28;
            if (v27 < v31) {
              unint64_t v26 = v28;
            }
            else {
              long long v20 = v32;
            }
          }
          while (v26);
        }
        long long v33 = (char *)&a2[3 * v19];
        uint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (char *)a1 - v10) >> 4);
      }
      uint64_t v53 = a6;
      uint64_t v54 = v19;
      uint64_t v52 = -v34 - v13;
      uint64_t v51 = a6 - v19;
      float v44 = sub_2194BD4AC(v20, (char *)a2, v33);
      if (v34 + v54 >= v53 - (v34 + v54) - v13)
      {
        unsigned int v47 = (long long *)v44;
        sub_2194BCD54(v44, v33, v55, a4, v52, v51, a7, v56);
        a2 = (__n128 *)v20;
        a8 = v56;
        a5 = v34;
        a3 = v47;
        a6 = v54;
        a1 = (int *)((char *)a1 + v10);
        if (!v54) {
          return result;
        }
      }
      else
      {
        unint64_t v45 = v20;
        long long v46 = (int *)v44;
        a8 = v56;
        sub_2194BCD54(&a1[v10 / 4], v45, v44, a4, v34, v54, a7, v56);
        a2 = (__n128 *)v33;
        a3 = v55;
        a5 = -v34 - v13;
        a6 = v51;
        a1 = v46;
        if (!v51) {
          return result;
        }
      }
    }
    sub_2194BD290(a1, (int *)a2, a3, a4, a5, a6, a7);
  }
  return result;
}

__n128 sub_2194BD120(uint64_t a1, uint64_t a2, int *a3)
{
  if (a1 != a2)
  {
    __n128 result = *(__n128 *)a1;
    long long v4 = *(_OWORD *)(a1 + 32);
    *((_OWORD *)a3 + 1) = *(_OWORD *)(a1 + 16);
    *((_OWORD *)a3 + 2) = v4;
    *(__n128 *)a3 = result;
    uint64_t v5 = a1 + 48;
    if (a1 + 48 != a2)
    {
      uint64_t v6 = 0;
      unint64_t v7 = a3;
      do
      {
        uint64_t v9 = a1;
        unint64_t v10 = v7;
        a1 = v5;
        v7 += 12;
        unsigned int v11 = *(_DWORD *)(v9 + 80) & ~(*(int *)(v9 + 80) >> 31);
        if (v11 >= 7) {
          unsigned int v11 = 7;
        }
        unsigned int v12 = v10[8] & ~(v10[8] >> 31);
        uint64_t v13 = v11;
        if (v12 >= 7) {
          unsigned int v12 = 7;
        }
        int v14 = dword_21950C9A4[v13] + dword_21950C9C4[v13] * (int)*(float *)(v9 + 52);
        long long v15 = v7;
        if (v14 < dword_21950C9A4[v12] + dword_21950C9C4[v12] * (int)*((float *)v10 + 1))
        {
          long long v16 = *((_OWORD *)v10 + 1);
          *(_OWORD *)unint64_t v7 = *(_OWORD *)v10;
          *((_OWORD *)v7 + 1) = v16;
          *((_OWORD *)v7 + 2) = *((_OWORD *)v10 + 2);
          long long v15 = a3;
          if (v10 != a3)
          {
            uint64_t v17 = v6;
            while (1)
            {
              long long v15 = (int *)((char *)a3 + v17);
              unsigned int v18 = *(_DWORD *)(v9 + 80) & ~(*(int *)(v9 + 80) >> 31);
              if (v18 >= 7) {
                unsigned int v18 = 7;
              }
              unsigned int v19 = *(v15 - 4) & ~(*(v15 - 4) >> 31);
              uint64_t v20 = v18;
              int v21 = dword_21950C9A4[v20];
              int v22 = dword_21950C9C4[v20];
              if (v19 >= 7) {
                unsigned int v19 = 7;
              }
              if (v21 + v22 * (int)*(float *)(v9 + 52) >= dword_21950C9A4[v19]
                                                         + dword_21950C9C4[v19] * (int)*((float *)v15 - 11))
                break;
              long long v23 = *((_OWORD *)v15 - 2);
              *(_OWORD *)long long v15 = *((_OWORD *)v15 - 3);
              *((_OWORD *)v15 + 1) = v23;
              *((_OWORD *)v15 + 2) = *((_OWORD *)v15 - 1);
              v17 -= 48;
              if (!v17)
              {
                long long v15 = a3;
                break;
              }
            }
          }
        }
        __n128 result = *(__n128 *)a1;
        long long v8 = *(_OWORD *)(a1 + 32);
        *((_OWORD *)v15 + 1) = *(_OWORD *)(a1 + 16);
        *((_OWORD *)v15 + 2) = v8;
        *(__n128 *)long long v15 = result;
        uint64_t v5 = a1 + 48;
        v6 += 48;
      }
      while (a1 + 48 != a2);
    }
  }
  return result;
}

int *sub_2194BD290(int *result, int *a2, long long *a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  if (a5 <= a6)
  {
    if (result != a2)
    {
      uint64_t v21 = 0;
      do
      {
        int v22 = &__src[v21 * 4];
        long long v23 = *(_OWORD *)&result[v21];
        long long v24 = *(_OWORD *)&result[v21 + 8];
        *((_OWORD *)v22 + 1) = *(_OWORD *)&result[v21 + 4];
        *((_OWORD *)v22 + 2) = v24;
        *(_OWORD *)int v22 = v23;
        v21 += 12;
      }
      while (&result[v21] != a2);
      if (v21 * 4)
      {
        int v25 = &__src[v21 * 4];
        unint64_t v26 = __src;
        while (a2 != (int *)a3)
        {
          unsigned int v29 = a2[8] & ~(a2[8] >> 31);
          if (v29 >= 7) {
            unsigned int v29 = 7;
          }
          unsigned int v30 = *((_DWORD *)v26 + 8) & ~(*((int *)v26 + 8) >> 31);
          uint64_t v31 = v29;
          int v32 = dword_21950C9A4[v31];
          int v33 = dword_21950C9C4[v31];
          if (v30 >= 7) {
            unsigned int v30 = 7;
          }
          if (v32 + v33 * (int)*((float *)a2 + 1) >= dword_21950C9A4[v30]
                                                    + dword_21950C9C4[v30] * (int)*((float *)v26 + 1))
          {
            long long v27 = *(_OWORD *)v26;
            long long v28 = *((_OWORD *)v26 + 2);
            *((_OWORD *)result + 1) = *((_OWORD *)v26 + 1);
            *((_OWORD *)result + 2) = v28;
            *(_OWORD *)__n128 result = v27;
            result += 12;
            v26 += 48;
            if (v25 == v26) {
              return result;
            }
          }
          else
          {
            long long v34 = *(_OWORD *)a2;
            long long v35 = *((_OWORD *)a2 + 2);
            *((_OWORD *)result + 1) = *((_OWORD *)a2 + 1);
            *((_OWORD *)result + 2) = v35;
            *(_OWORD *)__n128 result = v34;
            result += 12;
            a2 += 12;
            if (v25 == v26) {
              return result;
            }
          }
        }
        return (int *)memmove(result, v26, __src - v26 + v21 * 4);
      }
    }
  }
  else if (a2 != (int *)a3)
  {
    uint64_t v7 = 0;
    do
    {
      long long v8 = &__src[v7 * 4];
      long long v9 = *(_OWORD *)&a2[v7];
      long long v10 = *(_OWORD *)&a2[v7 + 8];
      *((_OWORD *)v8 + 1) = *(_OWORD *)&a2[v7 + 4];
      *((_OWORD *)v8 + 2) = v10;
      *(_OWORD *)long long v8 = v9;
      v7 += 12;
    }
    while (&a2[v7] != (int *)a3);
    if (v7 * 4)
    {
      unsigned int v11 = &__src[v7 * 4];
      unsigned int v12 = a3 - 3;
      while (a2 != result)
      {
        unsigned int v13 = *((_DWORD *)v11 - 4) & ~(*((int *)v11 - 4) >> 31);
        if (v13 >= 7) {
          unsigned int v13 = 7;
        }
        unsigned int v14 = *(a2 - 4) & ~(*(a2 - 4) >> 31);
        if (v14 >= 7) {
          unsigned int v14 = 7;
        }
        int v15 = dword_21950C9A4[v13] + dword_21950C9C4[v13] * (int)*((float *)v11 - 11);
        int v16 = dword_21950C9A4[v14] + dword_21950C9C4[v14] * (int)*((float *)a2 - 11);
        BOOL v17 = v15 < v16;
        if (v15 >= v16) {
          unsigned int v18 = v11 - 48;
        }
        else {
          unsigned int v18 = (char *)(a2 - 12);
        }
        if (v17) {
          a2 -= 12;
        }
        else {
          v11 -= 48;
        }
        long long v19 = *(_OWORD *)v18;
        long long v20 = *((_OWORD *)v18 + 2);
        v12[1] = *((_OWORD *)v18 + 1);
        v12[2] = v20;
        long long *v12 = v19;
        v12 -= 3;
        if (v11 == __src) {
          return result;
        }
      }
      unint64_t v36 = 0;
      do
      {
        unint64_t v37 = &v12[v36 / 0x10];
        long long v38 = *(_OWORD *)&v11[v36 - 48];
        long long v39 = *(_OWORD *)&v11[v36 - 16];
        v37[1] = *(_OWORD *)&v11[v36 - 32];
        v37[2] = v39;
        *unint64_t v37 = v38;
        v36 -= 48;
      }
      while (&v11[v36] != __src);
    }
  }
  return result;
}

char *sub_2194BD4AC(char *__src, char *a2, char *a3)
{
  long long v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 48 == a2)
    {
      long long v35 = *(_OWORD *)__src;
      long long v38 = *((_OWORD *)__src + 1);
      long long v40 = *((_OWORD *)__src + 2);
      int64_t v15 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      long long v4 = &__src[v15];
      *(_OWORD *)long long v4 = v35;
      *((_OWORD *)v4 + 1) = v38;
      *((_OWORD *)v4 + 2) = v40;
    }
    else if (a2 + 48 == a3)
    {
      long long v4 = __src + 48;
      long long v36 = *((_OWORD *)a3 - 3);
      long long v39 = *((_OWORD *)a3 - 2);
      long long v41 = *((_OWORD *)a3 - 1);
      size_t v16 = a3 - 48 - __src;
      if (a3 - 48 != __src) {
        memmove(__src + 48, __src, v16);
      }
      *(_OWORD *)__src = v36;
      *((_OWORD *)__src + 1) = v39;
      *((_OWORD *)__src + 2) = v41;
    }
    else
    {
      unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - __src) >> 4);
      if (v6 == 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 4))
      {
        uint64_t v7 = __src + 48;
        long long v8 = a2 + 48;
        do
        {
          long long v9 = *((_OWORD *)v7 - 3);
          long long v10 = *((_OWORD *)v7 - 2);
          long long v11 = *((_OWORD *)v7 - 1);
          long long v13 = *((_OWORD *)v8 - 2);
          long long v12 = *((_OWORD *)v8 - 1);
          *((_OWORD *)v7 - 3) = *((_OWORD *)v8 - 3);
          *((_OWORD *)v7 - 2) = v13;
          *((_OWORD *)v7 - 1) = v12;
          *((_OWORD *)v8 - 2) = v10;
          *((_OWORD *)v8 - 1) = v11;
          *((_OWORD *)v8 - 3) = v9;
          if (v7 == a2) {
            break;
          }
          v7 += 48;
          BOOL v14 = v8 == a3;
          v8 += 48;
        }
        while (!v14);
        return a2;
      }
      else
      {
        uint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 4);
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((a2 - __src) >> 4);
        do
        {
          uint64_t v19 = v18;
          unint64_t v18 = v17;
          uint64_t v17 = v19 % v17;
        }
        while (v17);
        if (v18)
        {
          long long v20 = &__src[48 * v18];
          do
          {
            long long v21 = *((_OWORD *)v20 - 3);
            long long v22 = *((_OWORD *)v20 - 2);
            long long v23 = *((_OWORD *)v20 - 1);
            v20 -= 48;
            long long v37 = v21;
            long long v42 = v23;
            long long v24 = &v20[16 * ((a2 - __src) >> 4)];
            int v25 = v20;
            do
            {
              unint64_t v26 = v24;
              long long v27 = *(_OWORD *)v24;
              long long v28 = *((_OWORD *)v24 + 2);
              *((_OWORD *)v25 + 1) = *((_OWORD *)v24 + 1);
              *((_OWORD *)v25 + 2) = v28;
              *(_OWORD *)int v25 = v27;
              unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((a3 - v24) >> 4);
              v24 += 16 * ((a2 - __src) >> 4);
              BOOL v30 = __OFSUB__(v6, v29);
              uint64_t v32 = v6 - v29;
              char v31 = (v32 < 0) ^ v30;
              int v33 = &__src[48 * v32];
              if (!v31) {
                long long v24 = v33;
              }
              int v25 = v26;
            }
            while (v24 != v20);
            *((_OWORD *)v26 + 1) = v22;
            *((_OWORD *)v26 + 2) = v42;
            *(_OWORD *)unint64_t v26 = v37;
          }
          while (v20 != __src);
        }
        return &__src[16 * ((a3 - a2) >> 4)];
      }
    }
  }
  return v4;
}

void *sub_2194BD6B4(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      sub_219486AE4();
    }
    long long v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_2194BD78C(v3, v4, v5, v8);
  }
  return a1;
}

void sub_2194BD760(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_219504480((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2194BD78C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      long long v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      int64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          sub_219486AE4();
        }
        long long v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        unint64_t v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_2194BD858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2194BD86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_2194BD890((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2194BD890(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    if (v3 != v4)
    {
      uint64_t v5 = **(void **)(a1 + 16);
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

char *sub_2194BD900(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = *(char **)a1;
  uint64_t v6 = (a2 - *(void *)a1) / 48;
  unint64_t v7 = (char *)(*(void *)a1 + 48 * v6);
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = __src;
  long long v12 = *(long long **)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v12) >> 4)) < a5)
  {
    unint64_t v13 = a5 - 0x5555555555555555 * (((char *)v12 - v5) >> 4);
    if (v13 > 0x555555555555555) {
      sub_219486AE4();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v5) >> 4);
    uint64_t v15 = 2 * v14;
    if (2 * v14 <= v13) {
      uint64_t v15 = v13;
    }
    if (v14 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x555555555555555;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 > 0x555555555555555) {
        sub_219486AFC();
      }
      uint64_t v17 = (char *)operator new(48 * v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    unint64_t v26 = &v17[48 * v6];
    uint64_t v27 = 48 * a5;
    long long v28 = &v26[48 * a5];
    unint64_t v29 = v26;
    do
    {
      long long v30 = *(_OWORD *)v9;
      long long v31 = *((_OWORD *)v9 + 2);
      *((_OWORD *)v29 + 1) = *((_OWORD *)v9 + 1);
      *((_OWORD *)v29 + 2) = v31;
      *(_OWORD *)unint64_t v29 = v30;
      v29 += 48;
      v9 += 48;
      v27 -= 48;
    }
    while (v27);
    uint64_t v32 = 48 * v16;
    int v33 = *(char **)a1;
    long long v34 = v26;
    if (*(char **)a1 != v7)
    {
      long long v35 = v7;
      long long v34 = v26;
      do
      {
        long long v36 = *((_OWORD *)v35 - 3);
        long long v37 = *((_OWORD *)v35 - 1);
        *((_OWORD *)v34 - 2) = *((_OWORD *)v35 - 2);
        *((_OWORD *)v34 - 1) = v37;
        *((_OWORD *)v34 - 3) = v36;
        v34 -= 48;
        v35 -= 48;
      }
      while (v35 != v33);
      long long v12 = *(long long **)(a1 + 8);
    }
    long long v38 = &v17[v32];
    if (v12 != (long long *)v7) {
      memmove(v28, v7, (char *)v12 - v7);
    }
    long long v39 = *(char **)a1;
    *(void *)a1 = v34;
    *(void *)(a1 + 8) = &v28[(char *)v12 - v7];
    *(void *)(a1 + 16) = v38;
    if (v39) {
      operator delete(v39);
    }
    return v26;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - v7) >> 4)) >= a5)
  {
    unint64_t v18 = &__src[48 * a5];
    long long v20 = *(char **)(a1 + 8);
LABEL_18:
    long long v21 = &v7[48 * a5];
    long long v22 = (long long *)&v20[-48 * a5];
    long long v23 = v20;
    if (v22 < v12)
    {
      long long v23 = v20;
      do
      {
        long long v24 = *v22;
        long long v25 = v22[2];
        *((_OWORD *)v23 + 1) = v22[1];
        *((_OWORD *)v23 + 2) = v25;
        *(_OWORD *)long long v23 = v24;
        v23 += 48;
        v22 += 3;
      }
      while (v22 < v12);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&v7[48 * a5], v7, v20 - v21);
    }
    if (v18 != v9) {
      memmove(v7, v9, v18 - v9);
    }
    return v7;
  }
  unint64_t v18 = &__src[16 * (((char *)v12 - v7) >> 4)];
  int64_t v19 = a4 - v18;
  if (a4 != v18) {
    memmove(*(void **)(a1 + 8), &__src[16 * (((char *)v12 - v7) >> 4)], a4 - v18);
  }
  long long v20 = (char *)v12 + v19;
  *(void *)(a1 + 8) = (char *)v12 + v19;
  if ((char *)v12 - v7 >= 1) {
    goto LABEL_18;
  }
  return v7;
}

void sub_2194BDB84(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v12 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555) {
      sub_219486AE4();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x555555555555555;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x555555555555555) {
        sub_219486AFC();
      }
      uint64_t v11 = (char *)operator new(48 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    unint64_t v13 = &v11[48 * v7];
    unint64_t v14 = &v11[48 * v10];
    size_t v15 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v13, v15);
    unint64_t v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        long long v17 = *((_OWORD *)v5 - 3);
        long long v18 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v18;
        *((_OWORD *)v13 - 3) = v17;
        v13 -= 48;
        v5 -= 48;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

float sub_2194BDD34(uint64_t a1, float a2, float a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  unsigned int v4 = a2;
  uint64_t v5 = a3;
  unsigned int v6 = a2 + 1;
  uint64_t v7 = *(void *)(a1 + 72) + 2 * v3 * v5;
  uint64_t v8 = v7 + 2 * v3;
  float v9 = (float)v6 - a2;
  float v10 = (float)(v5 + 1) - a3;
  float v11 = v9 * v10;
  float v12 = a2 - (float)a2;
  float v13 = v12 * v10;
  *(float *)&unsigned int v14 = (float)a3;
  *(float *)&unsigned int v15 = a3 - *(float *)&v14;
  *(float *)&unsigned int v16 = v9 * *(float *)&v15;
  float v17 = v12 * *(float *)&v15;
  uint64_t v18 = 4 * v4;
  LOWORD(v15) = *(_WORD *)(v7 + v18);
  uint64_t v19 = 4 * v6;
  LOWORD(v14) = *(_WORD *)(v7 + v19);
  *(float *)&unsigned int v20 = v13 * (float)v14;
  float v21 = *(float *)&v20 + (float)(v11 * (float)v15);
  LOWORD(v20) = *(_WORD *)(v8 + v18);
  float v22 = v21 + (float)(*(float *)&v16 * (float)v20);
  LOWORD(v16) = *(_WORD *)(v8 + v19);
  return v22 + (float)(v17 * (float)v16);
}

uint64_t sub_2194BDDD4(int a1, int a2)
{
  BOOL v3 = a1 == 640 && a2 == 480;
  return (a2 == 270 || a2 == 360) && a1 == 480 || v3;
}

uint64_t sub_2194BDDFC()
{
  return 740;
}

uint64_t sub_2194BDE04(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 64);
  if (v2 > 3) {
    return 0;
  }
  *(unsigned char *)(a1 + 256) = 0xF0C0907u >> (8 * v2);
  unint64_t v4 = *(unsigned int *)(a1 + 180);
  if (v4 != *(_DWORD *)(a1 + 184)) {
    sub_21950811C();
  }
  unsigned __int16 v6 = sub_2194C67D0(*(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(unsigned __int16 *)(a2 + 50), v4);
  *(_WORD *)(a2 + 50) = v6;
  if (v6 >= 7u) {
    sub_2195080E4();
  }
  if (!v6) {
    sub_21950803C();
  }
  if (*(_DWORD *)a2 >> (v6 - 1) < *(_DWORD *)(a1 + 180)) {
    sub_219508074();
  }
  if (*(_DWORD *)(a2 + 4) >> (v6 - 1) < *(_DWORD *)(a1 + 184)) {
    sub_2195080AC();
  }
  uint64_t v7 = a1 + 172;
  uint64_t result = sub_2194A8F90((unsigned int *)(a1 + 172), a2);
  if (result)
  {
    uint64_t v9 = *(void *)(a1 + 8);
    *(void *)(a1 + 152) = *(void *)a2;
    unint64_t v10 = *(unsigned __int16 *)(a2 + 50);
    *(_WORD *)(a1 + 160) = v10;
    int v11 = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 168) = v11;
    unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 16) - v9) >> 2);
    if (v10 <= v12)
    {
      if (v10 < v12) {
        *(void *)(a1 + 16) = v9 + 28 * v10;
      }
    }
    else
    {
      sub_219492AB4((char **)(a1 + 8), v10 - v12);
      unint64_t v10 = *(unsigned __int16 *)(a2 + 50);
    }
    uint64_t v13 = *(void *)(a1 + 32);
    unint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 40) - v13) >> 2);
    if (v10 <= v14)
    {
      if (v10 < v14) {
        *(void *)(a1 + 40) = v13 + 28 * v10;
      }
    }
    else
    {
      sub_219492AB4((char **)(a1 + 32), v10 - v14);
      unint64_t v10 = *(unsigned __int16 *)(a2 + 50);
    }
    uint64_t v15 = *(void *)(a1 + 56);
    unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 64) - v15) >> 2);
    if (v10 <= v16)
    {
      if (v10 < v16) {
        *(void *)(a1 + 64) = v15 + 28 * v10;
      }
    }
    else
    {
      sub_219492AB4((char **)(a1 + 56), v10 - v16);
      unint64_t v10 = *(unsigned __int16 *)(a2 + 50);
    }
    uint64_t v17 = *(void *)(a1 + 80);
    unint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 88) - v17) >> 2);
    if (v10 <= v18)
    {
      if (v10 < v18) {
        *(void *)(a1 + 88) = v17 + 28 * v10;
      }
    }
    else
    {
      sub_219492AB4((char **)(a1 + 80), v10 - v18);
      unint64_t v10 = *(unsigned __int16 *)(a2 + 50);
    }
    uint64_t v19 = *(void *)(a1 + 104);
    unint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 112) - v19) >> 2);
    if (v10 <= v20)
    {
      if (v10 < v20) {
        *(void *)(a1 + 112) = v19 + 28 * v10;
      }
    }
    else
    {
      sub_219492AB4((char **)(a1 + 104), v10 - v20);
      unint64_t v10 = *(unsigned __int16 *)(a2 + 50);
    }
    uint64_t v21 = *(void *)(a1 + 128);
    unint64_t v22 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 136) - v21) >> 2);
    if (v10 <= v22)
    {
      if (v10 < v22) {
        *(void *)(a1 + 136) = v21 + 28 * v10;
      }
    }
    else
    {
      sub_219492AB4((char **)(a1 + 128), v10 - v22);
      unint64_t v10 = *(unsigned __int16 *)(a2 + 50);
    }
    uint64_t v23 = *(void *)(a1 + 232);
    long long v24 = (void *)(a1 + 232);
    unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 240) - v23) >> 5);
    if (v10 <= v25)
    {
      if (v10 < v25) {
        *(void *)(a1 + 240) = v23 + 160 * v10;
      }
    }
    else
    {
      sub_2194BEAFC((char **)(a1 + 232), v10 - v25);
      LODWORD(v10) = *(unsigned __int16 *)(a2 + 50);
    }
    if (v10)
    {
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      do
      {
        sub_2194A9080(v7, a2, v27++, *v24 + v26);
        v26 += 160;
      }
      while (v27 < *(unsigned __int16 *)(a2 + 50));
    }
    return 1;
  }
  return result;
}

uint64_t sub_2194BE140(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7)
{
  if (*(unsigned __int16 *)(a1 + 160) <= a7) {
    sub_21950818C();
  }
  uint64_t v13 = a7;
  size_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  bzero(a2, v14);
  *a2 = -1;
  a2[1] = a3 | 0x80000000;
  *((void *)a2 + 1) = 0;
  uint64_t v15 = (uint64_t)(a2 + 38);
  a2[38] |= 0x7FFFFFFFu;
  int v16 = a2[59];
  *((void *)a2 + 18) = 0x100000007;
  a2[59] = v16 | 0x7FFFFFFF;
  a2[80] |= 0x7FFFFFFFu;
  a2[101] |= 0x7FFFFFFFu;
  a2[122] |= 0x7FFFFFFFu;
  a2[143] |= 0x7FFFFFFFu;
  a2[164] |= 0x7FFFFFFFu;
  if (v13)
  {
    uint64_t v17 = *(void *)(a1 + 56);
    if (!*(unsigned char *)(v17 + 28 * (v13 - 1))) {
      sub_219508154();
    }
    sub_2194BFF28(v15, *(_DWORD *)(v17 + 28 * (v13 - 1) + 4), *(_DWORD *)(v17 + 28 * (v13 - 1) + 8), *(_DWORD *)(v17 + 28 * (v13 - 1) + 12), 4, 1, *(_DWORD *)(a1 + 168) + *(_DWORD *)(v17 + 28 * (v13 - 1) + 16));
    unint64_t v18 = *(unsigned char **)(a1 + 8);
    if (v18[28 * v13]) {
      goto LABEL_5;
    }
  }
  else
  {
    sub_2194BFF28(v15, a4, a5, a6, 8, 0, 0);
    unint64_t v18 = *(unsigned char **)(a1 + 8);
    if (*v18) {
LABEL_5:
    }
      sub_2194BFF28((uint64_t)(a2 + 122), *(_DWORD *)&v18[28 * v13 + 4], *(_DWORD *)&v18[28 * v13 + 8], *(_DWORD *)&v18[28 * v13 + 12], 8, 1, *(_DWORD *)(a1 + 168) + *(_DWORD *)&v18[28 * v13 + 16]);
  }
  uint64_t v19 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v19 + 28 * v13)) {
    sub_2194BFF28((uint64_t)(a2 + 143), *(_DWORD *)(v19 + 28 * v13 + 4), *(_DWORD *)(v19 + 28 * v13 + 8), *(_DWORD *)(v19 + 28 * v13 + 12), 8, 1, *(_DWORD *)(a1 + 168) + *(_DWORD *)(v19 + 28 * v13 + 16));
  }
  uint64_t v20 = *(void *)(a1 + 56);
  if (*(unsigned char *)(v20 + 28 * v13)) {
    sub_2194BFF28((uint64_t)(a2 + 59), *(_DWORD *)(v20 + 28 * v13 + 4), *(_DWORD *)(v20 + 28 * v13 + 8), *(_DWORD *)(v20 + 28 * v13 + 12), 4, 1, *(_DWORD *)(a1 + 168) + *(_DWORD *)(v20 + 28 * v13 + 16));
  }
  uint64_t v21 = *(void *)(a1 + 80);
  if (*(unsigned char *)(v21 + 28 * v13)) {
    sub_2194BFF28((uint64_t)(a2 + 101), *(_DWORD *)(v21 + 28 * v13 + 4), *(_DWORD *)(v21 + 28 * v13 + 8), *(_DWORD *)(v21 + 28 * v13 + 12), 4, 1, *(_DWORD *)(a1 + 168) + *(_DWORD *)(v21 + 28 * v13 + 16));
  }
  sub_2194BFF28((uint64_t)(a2 + 80), *(_DWORD *)(*(void *)(a1 + 104) + 28 * v13 + 4), *(_DWORD *)(*(void *)(a1 + 104) + 28 * v13 + 8), *(_DWORD *)(*(void *)(a1 + 104) + 28 * v13 + 12), 8, 1, *(_DWORD *)(a1 + 168) + *(_DWORD *)(*(void *)(a1 + 104) + 28 * v13 + 16));
  unint64_t v22 = (_DWORD *)(*(void *)(a1 + 128) + 28 * v13);
  unsigned int v23 = v22[1];
  unsigned int v24 = v22[2];
  unsigned int v25 = v22[3];
  int v26 = *(_DWORD *)(a1 + 168) + v22[4];

  return sub_2194BFF28((uint64_t)(a2 + 164), v23, v24, v25, 8, 1, v26);
}

uint64_t sub_2194BE41C(void *a1, int a2, unsigned int a3)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[1] + 28 * a3;
      break;
    case 1:
      uint64_t result = a1[4] + 28 * a3;
      break;
    case 2:
      uint64_t result = a1[7] + 28 * a3;
      break;
    case 3:
      uint64_t result = a1[10] + 28 * a3;
      break;
    case 4:
      uint64_t result = a1[13] + 28 * a3;
      break;
    case 5:
      uint64_t result = a1[16] + 28 * a3;
      break;
    default:
      sub_2195081C4();
  }
  return result;
}

uint64_t sub_2194BE500()
{
  return 64;
}

uint64_t sub_2194BE508()
{
  return 256;
}

__n128 sub_2194BE510(uint32x2_t *a1, uint64_t a2, unsigned int a3, int a4)
{
  int v4 = a1[32].u8[0];
  *(_DWORD *)a2 = -1;
  *(_DWORD *)(a2 + 4) = v4;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(void *)(a2 + 12) = 0x200000100;
  *(uint32x2_t *)(a2 + 20) = vshl_u32(a1[19], (uint32x2_t)vneg_s32(vdup_n_s32(a3)));
  *(_DWORD *)(a2 + 28) = a4;
  *(_DWORD *)(a2 + 32) = 1;
  uint64_t v5 = *(void *)&a1[29] + 160 * a3;
  *(void *)uint64_t v5 = *(void *)v5 & 0xFFFFFFFBFFFFFFFFLL | ((unint64_t)(a4 == 4) << 34);
  long long v6 = *(_OWORD *)(v5 + 32);
  long long v7 = *(_OWORD *)(v5 + 48);
  long long v8 = *(_OWORD *)(v5 + 64);
  *(_OWORD *)(a2 + 156) = *(_OWORD *)(v5 + 80);
  *(_OWORD *)(a2 + 140) = v8;
  *(_OWORD *)(a2 + 124) = v7;
  *(_OWORD *)(a2 + 108) = v6;
  long long v9 = *(_OWORD *)(v5 + 96);
  long long v10 = *(_OWORD *)(v5 + 112);
  long long v11 = *(_OWORD *)(v5 + 128);
  *(_OWORD *)(a2 + 220) = *(_OWORD *)(v5 + 144);
  *(_OWORD *)(a2 + 204) = v11;
  *(_OWORD *)(a2 + 188) = v10;
  *(_OWORD *)(a2 + 172) = v9;
  __n128 result = *(__n128 *)v5;
  *(_OWORD *)(a2 + 92) = *(_OWORD *)(v5 + 16);
  *(__n128 *)(a2 + 76) = result;
  return result;
}

uint64_t sub_2194BE5C8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 232);
  uint64_t v7 = *(void *)(a1 + 240);
  for (int i = *(_DWORD *)(v6 + 72); v6 != v7; v6 += 160)
  {
    if (*(_DWORD *)(v6 + 72) != i) {
      sub_21950826C();
    }
  }
  if (!*(_WORD *)(a1 + 160)) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  LODWORD(v12) = 0;
  unsigned int v13 = 4 * i;
  do
  {
    uint64_t v17 = *(void *)(*(void *)(a1 + 232) + v10);
    if ((v17 & 0x40000000000) != 0)
    {
      if (a2 >> v11 == -1) {
        sub_2195081FC();
      }
      int v18 = ((a2 >> v11) & 1) + (a2 >> v11);
      if (v18) {
        sub_219508234();
      }
      LODWORD(v12) = sub_2194C0260(*(void *)(a1 + 8) + v9, v18, a3 >> v11, v12, 8) + v12;
      uint64_t v17 = *(void *)(*(void *)(a1 + 232) + v10);
    }
    if ((~v17 & 0x80200000000) == 0)
    {
      if (a2 >> v11 == -1) {
        sub_2195081FC();
      }
      int v19 = ((a2 >> v11) & 1) + (a2 >> v11);
      if (v19) {
        sub_219508234();
      }
      LODWORD(v12) = sub_2194C0260(*(void *)(a1 + 32) + v9, v19, a3 >> v11, v12, 8) + v12;
      uint64_t v17 = *(void *)(*(void *)(a1 + 232) + v10);
    }
    if ((~v17 & 0x300000000) == 0)
    {
      LODWORD(v12) = sub_2194C0260(*(void *)(a1 + 56) + v9, a2 >> (v11 + 1), a3 >> (v11 + 1), v12, 4) + v12;
      uint64_t v17 = *(void *)(*(void *)(a1 + 232) + v10);
    }
    if ((v17 & 0x8000) != 0) {
      LODWORD(v12) = sub_2194C0214(*(void *)(a1 + 80) + v9, a2 >> v11, a3 >> v11, v12) + v12;
    }
    int v14 = sub_2194C02DC(v13, v12, 64, *(void *)(a1 + 104) + v9) + v12;
    uint64_t v15 = *(void *)(a1 + 128) + v9;
    int v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
    uint64_t v12 = sub_2194C0260(v15, (v16 + 63) & 0xFFFFFFC0, 1, v14, 8) + v14;
    ++v11;
    v10 += 160;
    v9 += 28;
  }
  while (v11 < *(unsigned __int16 *)(a1 + 160));
  return v12;
}

uint64_t sub_2194BE7E4(uint64_t a1, int a2)
{
  return ((24 * a2 + 63) & 0xFFFFFFC0) + (a2 << 6) + 576;
}

void sub_2194BE800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 52) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a3 + 92) = *(_DWORD *)a2;
  *(_WORD *)a3 = *(_WORD *)(a2 + 8);
  *(_WORD *)(a3 + 2) = *(_WORD *)(a2 + 10);
  *(_WORD *)(a3 + 4) = *(_WORD *)(a2 + 12);
  *(_WORD *)(a3 + 6) = *(_WORD *)(a2 + 14);
  *(_WORD *)(a3 + 8) = *(_WORD *)(a2 + 16);
  *(_WORD *)(a3 + 10) = *(_WORD *)(a2 + 18);
  *(_WORD *)(a3 + 12) = *(_WORD *)(a2 + 20);
  *(_WORD *)(a3 + 14) = *(_WORD *)(a2 + 22);
  *(_WORD *)(a3 + 16) = *(_WORD *)(a2 + 24);
  *(_WORD *)(a3 + 18) = *(_WORD *)(a2 + 26);
  *(_WORD *)(a3 + 20) = *(_WORD *)(a2 + 28);
  *(_WORD *)(a3 + 22) = *(_WORD *)(a2 + 30);
  *(_WORD *)(a3 + 24) = *(_WORD *)(a2 + 32);
  *(_WORD *)(a3 + 26) = *(_WORD *)(a2 + 34);
  *(_WORD *)(a3 + 28) = *(_WORD *)(a2 + 36);
  *(_WORD *)(a3 + 30) = *(_WORD *)(a2 + 38);
  *(_WORD *)(a3 + 32) = *(_WORD *)(a2 + 40);
  *(_WORD *)(a3 + 34) = *(_WORD *)(a2 + 42);
  *(_WORD *)(a3 + 36) = *(_WORD *)(a2 + 44);
  *(_WORD *)(a3 + 38) = *(_WORD *)(a2 + 46);
  *(_WORD *)(a3 + 40) = *(_WORD *)(a2 + 48);
  *(_WORD *)(a3 + 42) = *(_WORD *)(a2 + 50);
  *(_WORD *)(a3 + 44) = *(_WORD *)(a2 + 52);
  *(_WORD *)(a3 + 46) = *(_WORD *)(a2 + 54);
  *(_WORD *)(a3 + 48) = *(_WORD *)(a2 + 56);
}

void sub_2194BE8DC()
{
}

void sub_2194BE914()
{
}

void sub_2194BE94C()
{
}

uint64_t sub_2194BE984()
{
  return 0;
}

uint64_t sub_2194BE98C()
{
  return 0;
}

void sub_2194BE994()
{
}

void sub_2194BE9D0(void *a1)
{
  sub_2194BEA3C(a1);

  JUMPOUT(0x21D48B5B0);
}

uint64_t sub_2194BEA20()
{
  return 0;
}

uint64_t sub_2194BEA30()
{
  return 0;
}

uint64_t sub_2194BEA3C(void *a1)
{
  *a1 = &unk_26CAD6610;
  unsigned int v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  BOOL v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  long long v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }

  return nullsub_14(a1);
}

void sub_2194BEAFC(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  int v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 5) >= a2)
  {
    if (a2)
    {
      size_t v12 = 160 * ((160 * a2 - 160) / 0xA0) + 160;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 5);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x199999999999999) {
      sub_219486AE4();
    }
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 5);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0xCCCCCCCCCCCCCCLL) {
      unint64_t v10 = 0x199999999999999;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x199999999999999) {
        sub_219486AFC();
      }
      unint64_t v11 = (char *)operator new(160 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    unsigned int v13 = &v11[160 * v7];
    int v14 = &v11[160 * v10];
    size_t v15 = 160 * ((160 * a2 - 160) / 0xA0) + 160;
    bzero(v13, v15);
    int v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        long long v17 = *((_OWORD *)v5 - 9);
        *((_OWORD *)v13 - 10) = *((_OWORD *)v5 - 10);
        *((_OWORD *)v13 - 9) = v17;
        long long v18 = *((_OWORD *)v5 - 8);
        long long v19 = *((_OWORD *)v5 - 7);
        long long v20 = *((_OWORD *)v5 - 5);
        *((_OWORD *)v13 - 6) = *((_OWORD *)v5 - 6);
        *((_OWORD *)v13 - 5) = v20;
        *((_OWORD *)v13 - 8) = v18;
        *((_OWORD *)v13 - 7) = v19;
        long long v21 = *((_OWORD *)v5 - 4);
        long long v22 = *((_OWORD *)v5 - 3);
        long long v23 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v23;
        *((_OWORD *)v13 - 4) = v21;
        *((_OWORD *)v13 - 3) = v22;
        v13 -= 160;
        v5 -= 160;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

unsigned char *sub_2194BECC4(unsigned char *result, _DWORD *a2)
{
  BOOL v2 = (*a2 - 7) >= 3;
  result[6] = 0;
  if (v2) {
    char v3 = 13;
  }
  else {
    char v3 = 11;
  }
  if (v2) {
    char v4 = 14;
  }
  else {
    char v4 = 12;
  }
  result[42] = v3;
  result[78] = v4;
  if (v2) {
    char v5 = 15;
  }
  else {
    char v5 = 13;
  }
  if (v2) {
    char v6 = 12;
  }
  else {
    char v6 = 10;
  }
  result[114] = v5;
  result[186] = v6;
  if (v2) {
    char v7 = 16;
  }
  else {
    char v7 = 14;
  }
  if (v2) {
    char v8 = 17;
  }
  else {
    char v8 = 15;
  }
  if (v2) {
    char v9 = 18;
  }
  else {
    char v9 = 16;
  }
  result[222] = v7;
  result[258] = v8;
  if (v2) {
    char v10 = 19;
  }
  else {
    char v10 = 17;
  }
  result[294] = v9;
  result[330] = v10;
  return result;
}

double sub_2194BED58(uint64_t a1)
{
  *(_WORD *)(a1 + 4) = 256;
  *(_WORD *)(a1 + 8) = 0;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 20) = 0;
  *(void *)(a1 + 33) = 0;
  *(unsigned char *)(a1 + 41) = 1;
  *(_WORD *)(a1 + 44) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 69) = 0;
  *(unsigned char *)(a1 + 77) = 1;
  *(_WORD *)(a1 + 80) = 0;
  *(void *)(a1 + 84) = 0;
  *(void *)(a1 + 100) = 0;
  *(void *)(a1 + 92) = 0;
  *(void *)(a1 + 105) = 0;
  *(unsigned char *)(a1 + 113) = 1;
  *(_WORD *)(a1 + 116) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_WORD *)(a1 + 188) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 213) = 0;
  *(void *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 221) = 1;
  *(_WORD *)(a1 + 224) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 249) = 0;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 236) = 0;
  *(unsigned char *)(a1 + 257) = 1;
  *(_WORD *)(a1 + 260) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 293) = 1;
  *(_WORD *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 329) = 1;
  *(_WORD *)(a1 + 332) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(void *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 6) = 0;
  *(unsigned char *)(a1 + 42) = 13;
  *(unsigned char *)(a1 + 78) = 14;
  *(unsigned char *)(a1 + 114) = 15;
  *(unsigned char *)(a1 + 186) = 12;
  *(unsigned char *)(a1 + 222) = 16;
  *(unsigned char *)(a1 + 258) = 17;
  *(unsigned char *)(a1 + 294) = 18;
  *(unsigned char *)(a1 + 330) = 19;
  *(_WORD *)(a1 + 184) = 256;
  *(void *)(a1 + 285) = 0;
  *(void *)(a1 + 316) = 0;
  *(void *)(a1 + 321) = 0;
  *(void *)(a1 + 300) = 0;
  *(void *)(a1 + 308) = 0;
  return result;
}

uint64_t sub_2194BEE7C(uint64_t result, unsigned int a2, uint64_t a3, char a4)
{
  if (a2 >= 4) {
    sub_2195082A4();
  }
  uint64_t v4 = result + 36 * a2;
  *(unsigned char *)(v4 + 4) = 1;
  *(unsigned char *)(v4 + 5) = a4;
  *(_DWORD *)(v4 + 12) = HIDWORD(a3);
  *(_DWORD *)(v4 + 16) = a3;
  *(_WORD *)(v4 + 8) = 8;
  return result;
}

uint64_t sub_2194BEEC0(uint64_t result, unsigned int a2, uint64_t a3, char a4, int a5, unsigned int a6, int a7)
{
  unsigned int v7 = (a5 + a6 - 1) / a6;
  uint64_t v8 = result + 36 * a2;
  *(unsigned char *)(v8 + 184) = 1;
  *(unsigned char *)(v8 + 185) = a4;
  *(_DWORD *)(v8 + 192) = HIDWORD(a3);
  *(_DWORD *)(v8 + 196) = a3;
  *(_DWORD *)(v8 + 208) = v7;
  *(_DWORD *)(v8 + 212) = a6;
  *(_DWORD *)(v8 + 200) = v7 * a6;
  *(_DWORD *)(v8 + 204) = a6;
  *(_DWORD *)(v8 + 216) = a7;
  *(_WORD *)(v8 + 188) = 8;
  return result;
}

uint64_t sub_2194BEF04(_DWORD *a1)
{
  *(void *)((char *)&v73[2] + 4) = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219508C00();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219508B1C();
  }
  sub_2194885C0((uint64_t)v58, 16);
  uint64_t v1 = (const std::ios_base *)((char *)v58 + *(void *)(v58[0] - 24));
  if (v1[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v1);
    BOOL v2 = std::locale::use_facet((const std::locale *)v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 32);
    std::locale::~locale((std::locale *)v62);
  }
  uint64_t v3 = 0;
  v1[1].__fmtflags_ = 48;
  uint64_t v4 = a1 + 43;
  do
  {
    sub_2194889DC(v59, (uint64_t)"GRF ", 4);
    char v5 = (void *)std::ostream::operator<<();
    char v6 = sub_2194889DC(v5, (uint64_t)" = 0x", 5);
    uint64_t v7 = *v6;
    *(_DWORD *)((char *)v6 + *(void *)(*v6 - 24) + 8) = *(_DWORD *)((unsigned char *)v6 + *(void *)(*v6 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v6 + *(void *)(v7 - 24) + 24) = 8;
    uint64_t v8 = (void *)std::ostream::operator<<();
    char v9 = sub_2194889DC(v8, (uint64_t)"\t\tVRF ", 6);
    *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 8) = *(_DWORD *)((unsigned char *)v9 + *(void *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 2;
    char v10 = (void *)std::ostream::operator<<();
    sub_2194889DC(v10, (uint64_t)" = (", 4);
    unint64_t v11 = sub_2194889DC(v59, (uint64_t)"0x", 2);
    uint64_t v12 = *v11;
    *(_DWORD *)((char *)v11 + *(void *)(*v11 - 24) + 8) = *(_DWORD *)((unsigned char *)v11 + *(void *)(*v11 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v11 + *(void *)(v12 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v59, (uint64_t)", ", 2);
    unsigned int v13 = sub_2194889DC(v59, (uint64_t)"0x", 2);
    uint64_t v14 = *v13;
    *(_DWORD *)((char *)v13 + *(void *)(*v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v13 + *(void *)(v14 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v59, (uint64_t)", ", 2);
    size_t v15 = sub_2194889DC(v59, (uint64_t)"0x", 2);
    uint64_t v16 = *v15;
    *(_DWORD *)((char *)v15 + *(void *)(*v15 - 24) + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v15 + *(void *)(v16 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v59, (uint64_t)", ", 2);
    long long v17 = sub_2194889DC(v59, (uint64_t)"0x", 2);
    uint64_t v18 = *v17;
    *(_DWORD *)((char *)v17 + *(void *)(*v17 - 24) + 8) = *(_DWORD *)((unsigned char *)v17 + *(void *)(*v17 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v17 + *(void *)(v18 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v59, (uint64_t)", ", 2);
    long long v19 = sub_2194889DC(v59, (uint64_t)"0x", 2);
    uint64_t v20 = *v19;
    *(_DWORD *)((char *)v19 + *(void *)(*v19 - 24) + 8) = *(_DWORD *)((unsigned char *)v19 + *(void *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v19 + *(void *)(v20 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v59, (uint64_t)", ", 2);
    long long v21 = sub_2194889DC(v59, (uint64_t)"0x", 2);
    uint64_t v22 = *v21;
    *(_DWORD *)((char *)v21 + *(void *)(*v21 - 24) + 8) = *(_DWORD *)((unsigned char *)v21 + *(void *)(*v21 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v21 + *(void *)(v22 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v59, (uint64_t)", ", 2);
    long long v23 = sub_2194889DC(v59, (uint64_t)"0x", 2);
    uint64_t v24 = *v23;
    *(_DWORD *)((char *)v23 + *(void *)(*v23 - 24) + 8) = *(_DWORD *)((unsigned char *)v23 + *(void *)(*v23 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v23 + *(void *)(v24 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v59, (uint64_t)", ", 2);
    unsigned int v25 = sub_2194889DC(v59, (uint64_t)"0x", 2);
    uint64_t v26 = *v25;
    *(_DWORD *)((char *)v25 + *(void *)(*v25 - 24) + 8) = *(_DWORD *)((unsigned char *)v25 + *(void *)(*v25 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v25 + *(void *)(v26 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v59, (uint64_t)")", 1);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str();
      sub_219508AA8(&v57, &v56, v72, v73);
    }
    HIBYTE(v66) = 0;
    v62[0] = 0;
    std::stringbuf::str();
    if (SHIBYTE(v66) < 0) {
      operator delete(*(void **)v62);
    }
    ++v3;
    v4 += 8;
  }
  while (v3 != 32);
  std::ios_base::clear((std::ios_base *)((char *)v58 + *(void *)(v58[0] - 24)), 0);
  unint64_t v27 = (const std::ios_base *)((char *)v58 + *(void *)(v58[0] - 24));
  if (v27[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v27);
    long long v28 = std::locale::use_facet((const std::locale *)v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 32);
    std::locale::~locale((std::locale *)v62);
  }
  v27[1].__fmtflags_ = 48;
  unint64_t v29 = sub_2194889DC(v59, (uint64_t)"RET = 0x", 8);
  uint64_t v30 = *v29;
  *(_DWORD *)((char *)v29 + *(void *)(*v29 - 24) + 8) = *(_DWORD *)((unsigned char *)v29 + *(void *)(*v29 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(uint64_t *)((char *)v29 + *(void *)(v30 - 24) + 24) = 8;
  std::ostream::operator<<();
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    std::stringbuf::str();
    sub_219508A38(v55, (uint64_t)v71, v31);
  }
  HIBYTE(v66) = 0;
  v62[0] = 0;
  std::stringbuf::str();
  if (SHIBYTE(v66) < 0) {
    operator delete(*(void **)v62);
  }
  std::ios_base::clear((std::ios_base *)((char *)v58 + *(void *)(v58[0] - 24)), 0);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_2195089C4();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219508950();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_2195088DC();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219508868();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_2195087EC();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219508770();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_2195086FC();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219508680();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219508604();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219508588();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219508514();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219508498();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_2195083FC();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219508368();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219508324(v69, &v70, v32);
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_2195082DC(v69, &v70, v33);
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    int v36 = a1[332];
    int v37 = a1[331];
    int v38 = a1[330];
    *(_DWORD *)uint64_t v62 = 134218752;
    *(void *)&v62[4] = 2;
    __int16 v63 = 1024;
    int v64 = v37;
    __int16 v65 = 1024;
    int v66 = v38;
    __int16 v67 = 1024;
    int v68 = v36;
    _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "RMA%zu base 0x%08x_%08x, size %d", v62, 0x1Eu);
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
LABEL_53:
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        goto LABEL_54;
      }
      goto LABEL_62;
    }
  }
  else if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    goto LABEL_53;
  }
  int v39 = a1[335];
  int v40 = a1[334];
  int v41 = a1[333];
  *(_DWORD *)uint64_t v62 = 134218752;
  *(void *)&v62[4] = 3;
  __int16 v63 = 1024;
  int v64 = v40;
  __int16 v65 = 1024;
  int v66 = v41;
  __int16 v67 = 1024;
  int v68 = v39;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "RMA%zu base 0x%08x_%08x, size %d", v62, 0x1Eu);
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_54:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_55;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v42 = a1[338];
  int v43 = a1[337];
  int v44 = a1[336];
  *(_DWORD *)uint64_t v62 = 134218752;
  *(void *)&v62[4] = 0;
  __int16 v63 = 1024;
  int v64 = v43;
  __int16 v65 = 1024;
  int v66 = v44;
  __int16 v67 = 1024;
  int v68 = v42;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "WMA%zu start 0x%08x_%08x, size %d", v62, 0x1Eu);
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_55:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_56;
    }
LABEL_64:
    int v48 = a1[344];
    int v49 = a1[343];
    int v50 = a1[342];
    *(_DWORD *)uint64_t v62 = 134218752;
    *(void *)&v62[4] = 2;
    __int16 v63 = 1024;
    int v64 = v49;
    __int16 v65 = 1024;
    int v66 = v50;
    __int16 v67 = 1024;
    int v68 = v48;
    _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "WMA%zu start 0x%08x_%08x, size %d", v62, 0x1Eu);
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_57;
    }
    goto LABEL_65;
  }
LABEL_63:
  int v45 = a1[341];
  int v46 = a1[340];
  int v47 = a1[339];
  *(_DWORD *)uint64_t v62 = 134218752;
  *(void *)&v62[4] = 1;
  __int16 v63 = 1024;
  int v64 = v46;
  __int16 v65 = 1024;
  int v66 = v47;
  __int16 v67 = 1024;
  int v68 = v45;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "WMA%zu start 0x%08x_%08x, size %d", v62, 0x1Eu);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    goto LABEL_64;
  }
LABEL_56:
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    goto LABEL_57;
  }
LABEL_65:
  int v51 = a1[347];
  int v52 = a1[346];
  int v53 = a1[345];
  *(_DWORD *)uint64_t v62 = 134218752;
  *(void *)&v62[4] = 3;
  __int16 v63 = 1024;
  int v64 = v52;
  __int16 v65 = 1024;
  int v66 = v53;
  __int16 v67 = 1024;
  int v68 = v51;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "WMA%zu start 0x%08x_%08x, size %d", v62, 0x1Eu);
LABEL_57:
  v58[0] = *MEMORY[0x263F8C2B8];
  uint64_t v34 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v58 + *(void *)(v58[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v59[0] = v34;
  v59[1] = MEMORY[0x263F8C318] + 16;
  if (v60 < 0) {
    operator delete((void *)v59[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21D48B530](&v61);
}

void sub_2194BFE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_2194888A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2194BFEE8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Au);
}

void sub_2194BFF04(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

uint64_t sub_2194BFF28(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, __int16 a5, int a6, int a7)
{
  if (a2 >= 0x10000) {
    sub_219508CEC();
  }
  if (a3 >= 0x10000) {
    sub_219508CB4();
  }
  if (a4 >= 0x10000) {
    sub_219508C7C();
  }
  if (a6 < 0) {
    sub_219508C44();
  }
  unsigned int v7 = *(_DWORD *)result & 0x80000000 | a6;
  *(_WORD *)(result + 14) = a5;
  *(_WORD *)(result + 10) = a3;
  *(_WORD *)(result + 12) = a2;
  *(_WORD *)(result + 8) = a4;
  *(_DWORD *)double result = v7;
  *(_DWORD *)(result + 4) = a7;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t CVHWAGetFeatureDetectionSupported_0()
{
  if ((sub_2194C6034() & 1) != 0
    || (sub_2194C612C() & 1) != 0
    || (sub_2194C619C() & 1) != 0
    || (sub_2194C6268() & 1) != 0
    || (sub_2194C62E4() & 1) != 0
    || (sub_2194C6360() & 1) != 0
    || (sub_2194C63A8() & 1) != 0
    || (sub_2194C63F0() & 1) != 0)
  {
    return 1;
  }

  return sub_2194C6438();
}

uint64_t CVHWAGetFeatureMatchingSupported_0()
{
  if (sub_2194C6360() & 1) != 0 || (sub_2194C63A8() & 1) != 0 || (sub_2194C63F0()) {
    return 1;
  }

  return sub_2194C6438();
}

uint64_t CVHWAGetFeatureDetectionFlowSupported_0(int a1)
{
  if (a1 != 2)
  {
    if (a1 != 1) {
      return 0;
    }
    if ((sub_2194C6034() & 1) == 0
      && (sub_2194C612C() & 1) == 0
      && (sub_2194C619C() & 1) == 0
      && (sub_2194C6268() & 1) == 0)
    {
      return sub_2194C62E4();
    }
    return 1;
  }
  if ((sub_2194C62E4() & 1) != 0
    || (sub_2194C6360() & 1) != 0
    || (sub_2194C63A8() & 1) != 0
    || (sub_2194C63F0() & 1) != 0)
  {
    return 1;
  }

  return sub_2194C6438();
}

uint64_t sub_2194C00E8()
{
  if (sub_2194C63A8() & 1) != 0 || (sub_2194C63F0()) {
    return 1;
  }

  return sub_2194C6438();
}

uint64_t sub_2194C0128(int *a1)
{
  if (sub_2194C6034())
  {
    int v2 = 0;
  }
  else if (sub_2194C612C())
  {
    int v2 = 1;
  }
  else if (sub_2194C619C())
  {
    int v2 = 2;
  }
  else if (sub_2194C6268())
  {
    int v2 = 3;
  }
  else if (sub_2194C62E4())
  {
    int v2 = 4;
  }
  else if (sub_2194C6360())
  {
    int v2 = 6;
  }
  else if (sub_2194C63A8())
  {
    int v2 = 7;
  }
  else if (sub_2194C63F0())
  {
    int v2 = 8;
  }
  else
  {
    uint64_t result = sub_2194C6438();
    if (!result) {
      return result;
    }
    int v2 = 9;
  }
  *a1 = v2;
  return 1;
}

double sub_2194C01DC(uint64_t a1, int a2, int a3)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 8) = 3;
  *(void *)&double result = 0x4000000000;
  *(void *)(a1 + 36) = 0x4000000000;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = ((a2 + 63) & 0xFFFFFFC0) + 64;
  *(_DWORD *)(a1 + 52) = a3;
  return result;
}

uint64_t sub_2194C0214(uint64_t a1, int a2, int a3, int a4)
{
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 2 * a2;
  *(_DWORD *)(a1 + 8) = a3;
  unsigned int v4 = (4 * a2 + 63) & 0xFFFFFFC0;
  *(_DWORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = a4;
  return v4 * a3;
}

uint64_t sub_2194C023C(uint64_t a1, int a2, int a3, int a4)
{
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 2 * a2;
  *(_DWORD *)(a1 + 8) = a3;
  unsigned int v4 = (2 * a2 + 63) & 0xFFFFFFC0;
  *(_DWORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = a4;
  return v4 * a3;
}

uint64_t sub_2194C0260(uint64_t a1, int a2, int a3, int a4, int a5)
{
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a1 + 4) = a2;
  *(_DWORD *)(a1 + 8) = a3;
  unsigned int v5 = ((a2 << (a5 == 4)) + 63) & 0xFFFFFFC0;
  *(_DWORD *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 16) = a4;
  return v5 * a3;
}

uint64_t sub_2194C028C(unsigned int a1, int a2, uint64_t a3)
{
  unsigned int v3 = (a1 + 63) & 0xFFFFFFC0;
  unsigned int v4 = (a1 + 65471) / 0xFFC0;
  if (a1 >= 0xFFC1) {
    unsigned int v3 = 65472;
  }
  else {
    unsigned int v4 = 1;
  }
  *(unsigned char *)a3 = 1;
  *(_DWORD *)(a3 + 4) = v3;
  *(_DWORD *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 12) = v3;
  *(_DWORD *)(a3 + 16) = a2;
  return v3 * v4;
}

uint64_t sub_2194C02DC(unsigned int a1, int a2, int a3, uint64_t a4)
{
  unsigned int v4 = (a3 + sqrt((double)a1) - 1) & -a3;
  if (v4 >= 0x10000) {
    sub_219508D5C();
  }
  unsigned int v5 = (a1 + v4 - 1) / v4;
  if (v5 * v4 < a1) {
    sub_219508D24();
  }
  *(unsigned char *)a4 = 1;
  *(_DWORD *)(a4 + 4) = v4;
  *(_DWORD *)(a4 + 8) = v5;
  unsigned int v6 = (v4 + 63) & 0xFFFFFFC0;
  *(_DWORD *)(a4 + 12) = v6;
  *(_DWORD *)(a4 + 16) = a2;
  return v5 * v6;
}

uint64_t sub_2194C0350()
{
  return 0;
}

double sub_2194C0358(uint64_t a1, int a2)
{
  *(void *)a1 = &unk_26CAD6750;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 20) = 0;
  *(_WORD *)(a1 + 28) = 2;
  *(_DWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 180) = 0u;
  *(unsigned char *)(a1 + 196) = 0;
  *(_WORD *)(a1 + 204) = 0;
  *(_DWORD *)(a1 + 228) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(unsigned char *)(a1 + 224) = 0;
  *(_WORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 236) = 0u;
  *(unsigned char *)(a1 + 252) = 0;
  *(_WORD *)(a1 + 260) = 0;
  *(_DWORD *)(a1 + 284) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_WORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 292) = 0u;
  *(unsigned char *)(a1 + 308) = 0;
  *(_WORD *)(a1 + 316) = 0;
  *(_DWORD *)(a1 + 340) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(unsigned char *)(a1 + 336) = 0;
  *(_WORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 348) = 0u;
  *(unsigned char *)(a1 + 364) = 0;
  *(_WORD *)(a1 + 372) = 0;
  *(_DWORD *)(a1 + 396) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(unsigned char *)(a1 + 392) = 0;
  *(_WORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 420) = 0;
  *(_OWORD *)(a1 + 404) = 0u;
  *(_WORD *)(a1 + 428) = 0;
  *(_DWORD *)(a1 + 452) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(unsigned char *)(a1 + 448) = 0;
  *(_WORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 460) = 0u;
  *(unsigned char *)(a1 + 476) = 0;
  *(_WORD *)(a1 + 484) = 0;
  *(_DWORD *)(a1 + 508) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(unsigned char *)(a1 + 504) = 0;
  *(_WORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 532) = 0;
  *(_OWORD *)(a1 + 516) = 0u;
  *(_WORD *)(a1 + 540) = 0;
  *(_DWORD *)(a1 + 564) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(unsigned char *)(a1 + 560) = 0;
  *(_WORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 572) = 0u;
  *(unsigned char *)(a1 + 588) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_WORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 660) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 680) = xmmword_21950BF20;
  *(_OWORD *)(a1 + 696) = xmmword_21950BF30;
  *(_OWORD *)(a1 + 712) = xmmword_21950BF40;
  *(_OWORD *)(a1 + 728) = xmmword_21950BF50;
  *(_DWORD *)(a1 + 744) = 4;
  *(_WORD *)(a1 + 748) = 5;
  *(void *)(a1 + 752) = 0xFFFF0000003FLL;
  *(_OWORD *)(a1 + 760) = xmmword_21950BF60;
  *(void *)(a1 + 776) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 784) = 511;
  *(void *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(unsigned char *)(a1 + 816) = 29;
  *(void *)(a1 + 824) = 0;
  if (a2 != 9)
  {
    sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 48, "0 && \"unsupported platform\"", (void (*)(void *))sub_2194FF9C0);
    abort();
  }
  *(void *)(a1 + 824) = 0x323000000;
  *(void *)&double result = 0x323300000;
  *(_OWORD *)(a1 + 656) = xmmword_21950CA80;
  *(unsigned char *)(a1 + 816) = 29;
  return result;
}

void sub_2194C05D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (*a10)
  {
    *(void *)(v10 + 800) = *a10;
    MEMORY[0x21D48B5A0]();
  }
  sub_219482F84(v11);
  nullsub_14(v10);
  _Unwind_Resume(a1);
}

BOOL sub_2194C0608(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 68) != 2) {
    return 0;
  }
  *(_WORD *)(a2 + 50) = sub_2194E223C(*(_DWORD *)a2, *(_DWORD *)(a2 + 4));
  BOOL result = sub_219493C54(a1 + 680, a2);
  if (result)
  {
    BOOL result = sub_2194C0754(a1, a2);
    if (result)
    {
      *(void *)(a1 + 8) = *(void *)a2;
      unsigned int v5 = *(unsigned __int16 *)(a2 + 50);
      *(_WORD *)(a1 + 16) = v5;
      int v6 = *(_DWORD *)(a2 + 72);
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 24) = v6;
      int v7 = *(unsigned __int8 *)(a2 + 68);
      *(unsigned char *)(a1 + 28) = v7;
      sub_21949287C(a1 + 32, v5, v7);
      if (*(unsigned char *)(a1 + 28) == 2)
      {
        uint64_t v8 = *(char **)(a1 + 792);
        unint64_t v9 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a1 + 800) - (void)v8) >> 7);
        if (*(char **)(a1 + 800) == v8)
        {
          sub_2194868F8((char **)(a1 + 792), 1 - v9);
          uint64_t v8 = *(char **)(a1 + 792);
        }
        else if (v9 >= 2)
        {
          *(void *)(a1 + 800) = v8 + 6528;
        }
        sub_2194C0C18(a1 + 680, a2, v8, a1 + 600, a1 + 32);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_2194C0754(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a2 + 92)) {
    return *(void *)(a2 + 168) == 0;
  }
  if (*(unsigned char *)(a2 + 165) != 1)
  {
    CVPixelBufferRef pixelBuffer = 0;
    *(_DWORD *)(a1 + 608) = (unsigned __int16)word_267C2B304;
    uint64_t v9 = dword_267C2B318;
    if (!dword_267C2B318)
    {
      unint64_t v11 = 96;
LABEL_24:
      if (v11 < dword_267C2B904) {
        sub_219508D94();
      }
      if (sub_219501564(v11, 1u, 0x4C303038u, &pixelBuffer, 16, 16, 0, 1, 0)) {
        return 0;
      }
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      uint64_t v14 = pixelBuffer;
      size_t v15 = operator new(0x20uLL);
      *size_t v15 = &unk_26CAD6260;
      v15[1] = MEMORY[0x263F03DE8];
      v15[2] = v14;
      *((_DWORD *)v15 + 6) = 0;
      long long v19 = (uint8_t *)v15;
      BaseAddress = CVPixelBufferGetBaseAddress(v14);
      memcpy(BaseAddress, &unk_267C2B2FC, dword_267C2B904);
      *(void *)(a1 + 600) = pixelBuffer;
      *(unsigned char *)(a1 + 29) = 1;
      if (!v19) {
        sub_2194867AC();
      }
      (*(void (**)(uint8_t *))(*(void *)v19 + 48))(v19);
      if (v19 == buf)
      {
        (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
      }
      else if (v19)
      {
        (*(void (**)(void))(*(void *)v19 + 40))();
      }
      return 1;
    }
    uint64_t v10 = aText_0;
    unint64_t v11 = 96;
    while (1)
    {
      if (!strncmp(v10, "ro", 7uLL))
      {
        *(_DWORD *)(a1 + 624) = *(_DWORD *)(v10 - 5);
        uint64_t v12 = *(unsigned int *)(v10 - 9);
        *(_DWORD *)(a1 + 628) = v12;
        *(_DWORD *)(a1 + 632) = 1;
      }
      else
      {
        if (strncmp(v10, "text", 7uLL)) {
          goto LABEL_19;
        }
        *(_DWORD *)(a1 + 612) = *(_DWORD *)(v10 - 5);
        *(_DWORD *)(a1 + 616) = 64;
        unsigned int v13 = *(_DWORD *)(v10 - 9) + 63;
        *(_DWORD *)(a1 + 620) = v13 >> 6;
        uint64_t v12 = v13 & 0xFFFFFFC0;
      }
      v11 += v12;
LABEL_19:
      v10 += 16;
      if (!--v9) {
        goto LABEL_24;
      }
    }
  }
  unsigned int v4 = *(__CVBuffer **)(a2 + 168);
  if (!v4) {
    return 1;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Lacc config and metadata received\n", buf, 2u);
    unsigned int v4 = *(__CVBuffer **)(a2 + 168);
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int Width = CVPixelBufferGetWidth(v4);
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = Width;
    _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "width = %d", buf, 8u);
    unsigned int v4 = *(__CVBuffer **)(a2 + 168);
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int Height = CVPixelBufferGetHeight(v4);
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = Height;
    _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "height = %d", buf, 8u);
    unsigned int v4 = *(__CVBuffer **)(a2 + 168);
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int BytesPerRow = CVPixelBufferGetBytesPerRow(v4);
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = BytesPerRow;
    _os_log_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "stride = %d", buf, 8u);
    unsigned int v4 = *(__CVBuffer **)(a2 + 168);
  }
  *(void *)(a1 + 600) = v4;
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 624) = 0x4000000000;
  *(_DWORD *)(a1 + 632) = 64;
  *(void *)(a1 + 612) = 0x4000001000;
  *(_DWORD *)(a1 + 620) = (*(_DWORD *)(a2 + 180) + 63) >> 6;
  BOOL result = 1;
  *(unsigned char *)(a1 + 29) = 1;
  return result;
}

void sub_2194C0BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2194838AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2194C0BFC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_21947E028(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_2194C0C18(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  bzero(a3, 0x1980uLL);
  *(_DWORD *)(a4 + 72) = (*(void *)a4 != 0) << 12;
  int v10 = *(_DWORD *)(a4 + 20) * *(_DWORD *)(a4 + 16);
  sub_2194C3168(a1, a2, a3 + 64, a4, a5);
  unsigned int v12 = *((_DWORD *)a3 + 1) & 0xFFFFFFFC | (v10 != 0);
  *((_DWORD *)a3 + 1) = v12;
  if (v10)
  {
    *(unsigned char *)(a5 + 472) = 1;
    *(_DWORD *)(a5 + 476) = 0;
    if (sub_2194C0260(a5 + 452, *(_DWORD *)(a4 + 16), *(_DWORD *)(a4 + 20), *(_DWORD *)(a4 + 12), 8) != v10) {
      sub_219502B84();
    }
    unsigned int v12 = *((_DWORD *)a3 + 1) & 0xFFFFFFF3 | 4;
    *((_DWORD *)a3 + 1) = v12;
    *((void *)a3 + 797) = *(void *)(a4 + 56);
    *((_DWORD *)a3 + 1596) = v10;
  }
  int v13 = *(_DWORD *)(a4 + 28);
  int v14 = *(_DWORD *)(a4 + 32);
  int v15 = v14 * v13;
  if (v14 * v13)
  {
    *(unsigned char *)(a5 + 500) = 1;
    *(_DWORD *)(a5 + 504) = 0;
    if (sub_2194C0260(a5 + 480, v13, v14, *(_DWORD *)(a4 + 24), 8) != v15) {
      sub_219502B4C();
    }
    unsigned int v12 = *((_DWORD *)a3 + 1) & 0xFFFFFFCF | 0x10;
    *((_DWORD *)a3 + 1) = v12;
    *(void *)(a3 + 6388) = *(void *)(a4 + 64);
    *((_DWORD *)a3 + 1599) = v15;
  }
  int v16 = *(_DWORD *)(a4 + 40);
  int v17 = *(_DWORD *)(a4 + 44);
  int v18 = v17 * v16;
  if (v17 * v16)
  {
    *(unsigned char *)(a5 + 528) = 1;
    *(_DWORD *)(a5 + 532) = *(_DWORD *)(a4 + 72);
    if (sub_2194C0260(a5 + 508, v16, v17, *(_DWORD *)(a4 + 36), 8) != v18) {
      sub_219502B14();
    }
    *(_DWORD *)(a4 + 72) += v18;
    uint64_t v19 = *(void *)(a4 + 64) + *(unsigned int *)(a5 + 532);
    unsigned int v12 = *((_DWORD *)a3 + 1) & 0xFFFFFF3F | 0x40;
    *((_DWORD *)a3 + 1) = v12;
    *((void *)a3 + 800) = v19;
    *((_DWORD *)a3 + 1602) = v18;
  }
  if (*(unsigned char *)(a5 + 360))
  {
    uint64_t v20 = *(void *)(a4 + 64) + *(unsigned int *)(a5 + 364);
    unsigned int v12 = v12 & 0xFFFFF3FF | 0x400;
    *((_DWORD *)a3 + 1) = v12;
    *((void *)a3 + 803) = v20;
    *((_DWORD *)a3 + 1608) = *(_DWORD *)(a5 + 348) * *(_DWORD *)(a5 + 352);
  }
  if (*(unsigned char *)(a5 + 388))
  {
    uint64_t v21 = *(void *)(a4 + 64) + *(unsigned int *)(a5 + 392);
    *((_DWORD *)a3 + 1) = v12 & 0xFFFFCFFF | 0x1000;
    *(void *)(a3 + 6436) = v21;
    *((_DWORD *)a3 + 1611) = *(_DWORD *)(a5 + 376) * *(_DWORD *)(a5 + 380);
  }
  if (v10)
  {
    *((_DWORD *)a3 + 1334) = *(_DWORD *)(a4 + 8);
    *((_DWORD *)a3 + 1335) = 0x80000000;
    *((void *)a3 + 668) = 0;
    *(void *)&double result = 0x600000006;
    *((void *)a3 + 651) = 0x600000006;
    *((_DWORD *)a3 + 1295) = 0x80000;
  }
  return result;
}

uint64_t sub_2194C0E78()
{
  return 3776;
}

uint64_t sub_2194C0E80()
{
  return 6528;
}

uint64_t sub_2194C0E88()
{
  return 1664;
}

double sub_2194C0E90(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v6 = *(_DWORD **)(a1 + 792);
  unsigned int v7 = *(unsigned __int16 *)(a1 + 16);
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);

  *(void *)&double result = sub_2194C0F1C(v6, v7, v8, a2, a3, (void *)(a1 + 32)).n128_u64[0];
  return result;
}

__n128 sub_2194C0F1C(_DWORD *a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, void *a6)
{
  if (a2)
  {
    uint64_t v9 = 0;
    char v10 = 0;
    int v11 = 0;
    uint64_t v12 = 0;
    uint64_t v27 = a2;
    do
    {
      uint64_t v13 = 3 << (v10 & 0xFE);
      if ((v13 & a1[101]) != 0)
      {
        uint64_t v14 = *a6 + v9;
        int v15 = sub_2194E2288(a4, v12);
        int v16 = sub_2194E2288(a5, v12);
        v11 += sub_2194C023C(v14, v15, v16, v11);
      }
      if ((v13 & a1[102]) != 0)
      {
        uint64_t v17 = a6[9] + v9;
        int v18 = sub_2194E2288(a4, v12);
        int v19 = sub_2194E2288(a5, v12);
        v11 += sub_2194C0214(v17, v18, v19, v11);
      }
      ++v12;
      v10 += 2;
      v9 += 28;
    }
    while (v27 != v12);
  }
  else
  {
    int v11 = 0;
  }
  if (a1[545])
  {
    uint64_t v20 = a6;
    v11 += sub_2194C02DC(0x186A00u, v11, 64, (uint64_t)(a6 + 32));
    if (!a1[103]) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v20 = a6;
  if (a1[103]) {
LABEL_11:
  }
    v11 += sub_2194C02DC(8 * a1[486], v11, 64, (uint64_t)v20 + 284);
LABEL_12:
  unint64_t v21 = (((unint64_t)a1[544] >> 2) & 3) - 1;
  if (v21 <= 2)
  {
    int v22 = dword_21950CACC[v21];
    int v23 = sub_2194C028C(a1[486] * v22, v11, (uint64_t)v20 + 172) + v11;
    int v11 = sub_2194C028C(a1[486] * v22, v23, (uint64_t)(v20 + 18)) + v23;
  }
  int v24 = sub_2194C0260(v20[15], (a3 + 63) & 0xFFFFFFC0, 1, v11, 8) + v11;
  if (*((unsigned char *)v20 + 340))
  {
    *((_DWORD *)v20 + 89) = v24;
    v24 += *((_DWORD *)v20 + 87) * *((_DWORD *)v20 + 88);
  }
  if (*((unsigned char *)v20 + 368))
  {
    *((_DWORD *)v20 + 96) = v24;
    v20[41] = *(void *)((char *)v20 + 356);
    __n128 result = *(__n128 *)((char *)v20 + 340);
    *(__n128 *)(v20 + 39) = result;
    *((unsigned char *)v20 + 332) = 0;
    *((_DWORD *)v20 + 84) = 0;
  }
  return result;
}

uint64_t sub_2194C1178(uint64_t a1, int a2)
{
  return ((8 * a2 + 63) & 0xFFFFFFC0) + ((4 * a2 + 63) & 0xFFFFFFC0) + 576;
}

void *sub_2194C119C(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  if (a4 != 8) {
    sub_219508DCC();
  }
  if (a3 || (unsigned int v4 = *(const void **)(a1 + 792), *(void *)(a1 + 800) - (void)v4 != 6528)) {
    sub_219502C64();
  }
  int v5 = *(unsigned __int8 *)(a1 + 816);
  *a2 = -1;
  a2[1] = v5;
  a2[3] = 6528;

  return memcpy(a2 + 4, v4, 0x1980uLL);
}

uint64_t sub_2194C1208(unsigned int *a1, _DWORD *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7)
{
  if (a7) {
    sub_219508E04();
  }
  size_t v13 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 56))(a1);
  int v14 = a1[6];

  return sub_219483DA4(a2, v13, a3, a4, a5, a6, v14, a1 + 8);
}

__n128 sub_2194C12A8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  *(void *)(a3 + 92) = *(uint64_t *)((char *)a2 + 100);
  uint64_t v4 = *a2;
  *(_WORD *)(a3 + 8) = *((_WORD *)a2 + 4);
  *(void *)a3 = v4;
  uint64_t v5 = *(uint64_t *)((char *)a2 + 10);
  *(_WORD *)(a3 + 18) = *((_WORD *)a2 + 9);
  *(void *)(a3 + 10) = v5;
  uint64_t v6 = *(uint64_t *)((char *)a2 + 20);
  *(_WORD *)(a3 + 28) = *((_WORD *)a2 + 14);
  *(void *)(a3 + 20) = v6;
  uint64_t v7 = *(uint64_t *)((char *)a2 + 30);
  *(_WORD *)(a3 + 38) = *((_WORD *)a2 + 19);
  *(void *)(a3 + 30) = v7;
  uint64_t v8 = a2[5];
  *(_WORD *)(a3 + 48) = *((_WORD *)a2 + 24);
  *(void *)(a3 + 40) = v8;
  long long v9 = *(_OWORD *)((char *)a2 + 52);
  long long v10 = *(_OWORD *)((char *)a2 + 68);
  *(void *)(a3 + 84) = *(uint64_t *)((char *)a2 + 84);
  *(_OWORD *)(a3 + 68) = v10;
  *(_OWORD *)(a3 + 52) = v9;
  long long v11 = *(_OWORD *)((char *)a2 + 126);
  *(_WORD *)(a3 + 124) = *((_WORD *)a2 + 71);
  *(_OWORD *)(a3 + 108) = v11;
  long long v12 = *(_OWORD *)((char *)a2 + 108);
  *(_WORD *)(a3 + 142) = *((_WORD *)a2 + 62);
  *(_OWORD *)(a3 + 126) = v12;
  long long v13 = *((_OWORD *)a2 + 82);
  *(_OWORD *)(a3 + 144) = *((_OWORD *)a2 + 81);
  *(_OWORD *)(a3 + 160) = v13;
  int v14 = (uint16x4_t *)(a2 + 49);
  do
  {
    int v15 = *(uint32x4_t **)(a3 + 240 + v3);
    uint32x4_t v16 = vmovl_u16(v14[-14]);
    *int v15 = vmovl_u16(v14[-15]);
    v15[1] = v16;
    uint32x4_t v17 = vmovl_u16(v14[-12]);
    v15[2] = vmovl_u16(v14[-13]);
    v15[3] = v17;
    uint32x4_t v18 = vmovl_u16(v14[-10]);
    v15[4] = vmovl_u16(v14[-11]);
    v15[5] = v18;
    uint32x4_t v19 = vmovl_u16(v14[-8]);
    v15[6] = vmovl_u16(v14[-9]);
    v15[7] = v19;
    uint32x4_t v20 = vmovl_u16(v14[-6]);
    v15[8] = vmovl_u16(v14[-7]);
    v15[9] = v20;
    uint32x4_t v21 = vmovl_u16(v14[-4]);
    v15[10] = vmovl_u16(v14[-5]);
    v15[11] = v21;
    uint32x4_t v22 = vmovl_u16(v14[-2]);
    v15[12] = vmovl_u16(v14[-3]);
    v15[13] = v22;
    uint32x4_t v23 = vmovl_u16(v14[-1]);
    uint32x4_t v24 = vmovl_u16(*v14);
    v3 += 24;
    v14 += 16;
    v15[14] = v23;
    v15[15] = v24;
  }
  while (v3 != 192);
  *(_WORD *)(a3 + 176) = *((_WORD *)a2 + 664);
  *(_DWORD *)(a3 + 436) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a3 + 180) = *((_OWORD *)a2 + 100);
  *(_OWORD *)(a3 + 196) = *((_OWORD *)a2 + 101);
  *(_OWORD *)(a3 + 212) = *((_OWORD *)a2 + 102);
  *(void *)(a3 + 228) = a2[206];
  *(_DWORD *)(a3 + 236) = *((_DWORD *)a2 + 414);
  *(_DWORD *)(a3 + 432) = *((_DWORD *)a2 + 866);
  *(_DWORD *)(a3 + 440) = *((_DWORD *)a2 + 23);
  long long v25 = *(_OWORD *)((char *)a2 + 1660);
  long long v26 = *(_OWORD *)((char *)a2 + 1676);
  *(_DWORD *)(a3 + 512) = *((_DWORD *)a2 + 423);
  *(_OWORD *)(a3 + 480) = v25;
  *(_OWORD *)(a3 + 496) = v26;
  __n128 result = *((__n128 *)a2 + 106);
  long long v28 = *((_OWORD *)a2 + 107);
  *(_DWORD *)(a3 + 548) = *((_DWORD *)a2 + 432);
  *(__n128 *)(a3 + 516) = result;
  *(_OWORD *)(a3 + 532) = v28;
  return result;
}

uint64_t sub_2194C145C(uint64_t a1, int a2, unsigned int a3)
{
  switch(a2)
  {
    case 0:
      uint64_t result = *(void *)(a1 + 32) + 28 * a3;
      break;
    case 1:
      if (*(unsigned char *)(a1 + 28) != 1) {
        sub_219508E74();
      }
      uint64_t result = *(void *)(a1 + 56) + 28 * a3;
      break;
    case 2:
      if (*(unsigned char *)(a1 + 28) != 1) {
        sub_219508EAC();
      }
      uint64_t result = *(void *)(a1 + 80) + 28 * a3;
      break;
    case 3:
      uint64_t result = *(void *)(a1 + 104) + 28 * a3;
      break;
    case 4:
      if (*(unsigned char *)(a1 + 28) != 1) {
        sub_219508EE4();
      }
      uint64_t result = *(void *)(a1 + 128) + 28 * a3;
      break;
    case 5:
      int v4 = *(unsigned __int8 *)(a1 + 28);
      if (v4 != 1 && (a3 || v4 != 2)) {
        sub_219508F1C();
      }
      uint64_t result = *(void *)(a1 + 152) + 28 * a3;
      break;
    case 6:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_219508F8C();
      }
      if (a3) {
        sub_219508F54();
      }
      uint64_t result = a1 + 176;
      break;
    case 7:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_219508FFC();
      }
      if (a3) {
        sub_219508FC4();
      }
      uint64_t result = a1 + 204;
      break;
    case 8:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_21950906C();
      }
      if (a3) {
        sub_219509034();
      }
      uint64_t result = a1 + 232;
      break;
    case 9:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_2195090DC();
      }
      if (a3) {
        sub_2195090A4();
      }
      uint64_t result = a1 + 260;
      break;
    case 10:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_21950914C();
      }
      if (a3) {
        sub_219509114();
      }
      uint64_t result = a1 + 288;
      break;
    case 11:
      if (*(unsigned char *)(a1 + 28) != 2) {
        sub_2195091BC();
      }
      if (a3) {
        sub_219509184();
      }
      uint64_t result = a1 + 316;
      break;
    case 12:
      if (a3) {
        sub_2195091F4();
      }
      uint64_t result = a1 + 372;
      break;
    case 13:
      if (a3) {
        sub_21950922C();
      }
      uint64_t result = a1 + 400;
      break;
    default:
      sub_219508E3C();
  }
  return result;
}

uint64_t sub_2194C1694(uint64_t result, int32x4_t *a2)
{
  if (*(unsigned char *)(result + 28) != 2) {
    sub_219509264();
  }
  uint64_t v2 = *(unsigned __int16 *)(result + 16);
  uint64_t v3 = 2 * v2 - 2;
  if (2 * v2 != 2)
  {
    uint64_t v4 = *(void *)(result + 792);
    if (v3 < 0x10)
    {
      unint64_t v5 = 0;
LABEL_8:
      uint64_t v11 = v5 - 2 * v2 + 2;
      long long v12 = (__int16 *)(v4 + 2 * v5 + 2354);
      long long v13 = &a2->i16[4 * v5];
      do
      {
        __int16 v14 = *v13;
        v13 += 4;
        v12[9] = v14;
        *v12++ = v14;
      }
      while (!__CFADD__(v11++, 1));
      return result;
    }
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v6 = (int16x8_t *)(v4 + 2388);
    uint64_t v7 = a2 + 4;
    unint64_t v8 = v3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v9 = vuzp1q_s16((int16x8_t)vuzp1q_s32(v7[-4], v7[-3]), (int16x8_t)vuzp1q_s32(v7[-2], v7[-1]));
      int16x8_t v10 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v7, v7[1]), (int16x8_t)vuzp1q_s32(v7[2], v7[3]));
      v6[-1] = v9;
      int16x8_t *v6 = v10;
      *(int16x8_t *)((char *)v6 - 34) = v9;
      *(int16x8_t *)((char *)v6 - 18) = v10;
      v6 += 2;
      v7 += 8;
      v8 -= 16;
    }
    while (v8);
    if (v5 != v3) {
      goto LABEL_8;
    }
  }
  return result;
}

void sub_2194C1760()
{
}

__n128 sub_2194C1798@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2 = (void *)(*(void *)(a1 + 792) + 2188);
  uint64_t v3 = *(void *)(*(void *)(a1 + 792) + 2196);
  v4.n128_u64[0] = *v2;
  v4.n128_u64[1] = HIDWORD(*v2);
  __n128 v5 = v4;
  v4.n128_u64[0] = v3;
  v4.n128_u64[1] = HIDWORD(v3);
  *a2 = v5;
  a2[1] = v4;
  v5.n128_u64[0] = v2[2];
  uint64_t v6 = v2[3];
  v4.n128_u64[0] = v5.n128_u32[0];
  v4.n128_u64[1] = v5.n128_u32[1];
  __n128 result = v4;
  v4.n128_u64[0] = v6;
  v4.n128_u64[1] = HIDWORD(v6);
  a2[2] = result;
  a2[3] = v4;
  return result;
}

uint64_t sub_2194C17C4(uint64_t a1)
{
  return *(void *)(a1 + 600);
}

uint64_t sub_2194C17CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 29);
}

uint64_t sub_2194C17D4(uint64_t result, int a2)
{
  if (*(unsigned char *)(result + 28) != 2) {
    sub_21950929C();
  }
  *(_DWORD *)(*(void *)(result + 792) + 3908) = a2;
  return result;
}

void sub_2194C1800(uint64_t a1, _DWORD *a2)
{
  *a2 = 1;
}

double sub_2194C180C(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  *(_DWORD *)(a3 + 8) = 2;
  *(_DWORD *)(a3 + 12) = v3;
  if (*a2 == 1)
  {
    int v6 = 0x20000;
    unsigned int v4 = 0x80000;
    uint64_t v5 = 0x200000;
    goto LABEL_5;
  }
  if (*a2 == 2)
  {
    unsigned int v4 = 98304;
    uint64_t v5 = 0x400000;
    int v6 = 98304;
LABEL_5:
    *(void *)&double result = v4 | 0x10000000000000;
    *(void *)a3 = *(void *)(a1 + 824) + v5;
    *(_DWORD *)(a3 + 16) = 0;
    *(double *)(a3 + 20) = result;
    *(_DWORD *)(a3 + 28) = v6;
    return result;
  }
  double result = 0.0;
  *(void *)a3 = -1;
  *(_DWORD *)(a3 + 16) = -1;
  *(void *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 28) = 0;
  return result;
}

double sub_2194C1894(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    sub_2195031DC();
  }
  *(_OWORD *)a2 = xmmword_21950CA90;
  *(void *)&double result = 0x198000000000;
  *(void *)(a2 + 16) = 0x198000000000;
  return result;
}

double sub_2194C18C8(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  return sub_2194C18E4(a2 + *(unsigned int *)(a2 + 4) + 16, a3, 1, 1);
}

double sub_2194C18E4(uint64_t a1, unsigned __int8 *a2, int a3, char a4)
{
  if ((sub_2194C6438() & 1) == 0) {
    sub_2195092D4();
  }
  if (!a3 || (a4 & 1) == 0) {
    sub_2195032BC();
  }
  unsigned int v8 = *a2;
  if (v8 >= 4) {
    sub_219503284();
  }
  unsigned int v9 = *(_DWORD *)(a1 + 4) & 0xFFFFFFFC | v8;
  *(_DWORD *)(a1 + 4) = v9;
  *(_DWORD *)(a1 + 64) &= ~1u;
  *(void *)(a1 + 128) |= 1uLL;
  *(_DWORD *)(a1 + 3840) |= 1u;
  unsigned int v10 = a2[2];
  if (v10 >= 3) {
    goto LABEL_32;
  }
  if (a2[6] >= 3u) {
    goto LABEL_33;
  }
  unsigned int v11 = a2[3];
  if (v11 > 2) {
    goto LABEL_32;
  }
  if (a2[7] > 2u) {
    goto LABEL_33;
  }
  if (a2[4] > 2u) {
    goto LABEL_32;
  }
  if (a2[8] > 2u) {
    goto LABEL_33;
  }
  if (a2[5] > 2u) {
LABEL_32:
  }
    sub_21950324C();
  if (a2[9] > 2u) {
LABEL_33:
  }
    sub_219503214();
  if (a2[2])
  {
    unsigned int v9 = v9 & 0xFFFFFFF3 | (4 * (v10 & 3));
    *(_DWORD *)(a1 + 4) = v9;
    *(void *)(a1 + 6376) = *((void *)a2 + 162);
    *(_DWORD *)(a1 + 6384) = *((_DWORD *)a2 + 326);
    unsigned int v11 = a2[3];
  }
  if (v11)
  {
    unsigned int v9 = v9 & 0xFFFFFFCF | (16 * (v11 & 3));
    *(_DWORD *)(a1 + 4) = v9;
    *(_DWORD *)(a1 + 6388) = *((_DWORD *)a2 + 327);
    *(void *)(a1 + 6392) = *((void *)a2 + 164);
  }
  if (a2[4])
  {
    unsigned int v9 = v9 & 0xFFFFFF3F | ((a2[4] & 3) << 6);
    *(_DWORD *)(a1 + 4) = v9;
    *(void *)(a1 + 6400) = *((void *)a2 + 165);
    *(_DWORD *)(a1 + 6408) = *((_DWORD *)a2 + 332);
  }
  if (a2[5])
  {
    unsigned int v9 = v9 & 0xFFFFFCFF | ((a2[5] & 3) << 8);
    *(_DWORD *)(a1 + 4) = v9;
    *(_DWORD *)(a1 + 6412) = *((_DWORD *)a2 + 333);
    *(void *)(a1 + 6416) = *((void *)a2 + 167);
  }
  if (a2[6])
  {
    unsigned int v9 = v9 & 0xFFFFF3FF | ((a2[6] & 3) << 10);
    *(_DWORD *)(a1 + 4) = v9;
    *(void *)(a1 + 6424) = *((void *)a2 + 168);
    *(_DWORD *)(a1 + 6432) = *((_DWORD *)a2 + 338);
  }
  if (a2[7])
  {
    unsigned int v9 = v9 & 0xFFFFCFFF | ((a2[7] & 3) << 12);
    *(_DWORD *)(a1 + 4) = v9;
    *(_DWORD *)(a1 + 6436) = *((_DWORD *)a2 + 339);
    *(void *)(a1 + 6440) = *((void *)a2 + 170);
  }
  if (a2[8])
  {
    unsigned int v9 = v9 & 0xFFFF3FFF | ((a2[8] & 3) << 14);
    *(_DWORD *)(a1 + 4) = v9;
    *(void *)(a1 + 6448) = *((void *)a2 + 171);
    *(_DWORD *)(a1 + 6456) = *((_DWORD *)a2 + 344);
  }
  if (a2[9])
  {
    *(_DWORD *)(a1 + 4) = v9 & 0xFFFCFFFF | ((a2[9] & 3) << 16);
    *(_DWORD *)(a1 + 6460) = *((_DWORD *)a2 + 345);
    *(void *)(a1 + 6464) = *((void *)a2 + 173);
  }
  uint64_t v12 = 0;
  long long v13 = a2 + 144;
  uint64_t v14 = a1 + 4032;
  uint64_t v15 = -128;
  do
  {
    *(_DWORD *)(v14 + v15 + 1152) = *(_DWORD *)&v13[v15 - 4];
    uint32x4_t v16 = (_DWORD *)(v14 + v12);
    *uint32x4_t v16 = *(_DWORD *)&v13[v12];
    v16[1] = *(_DWORD *)&v13[v12 + 4];
    v16[2] = *(_DWORD *)&v13[v12 + 8];
    v16[3] = *(_DWORD *)&v13[v12 + 12];
    v16[4] = *(_DWORD *)&v13[v12 + 16];
    v16[5] = *(_DWORD *)&v13[v12 + 20];
    v16[6] = *(_DWORD *)&v13[v12 + 24];
    v16[7] = *(_DWORD *)&v13[v12 + 28];
    v12 += 32;
    v15 += 4;
  }
  while (v15);
  *(_DWORD *)(a1 + 5200) = *((_DWORD *)a2 + 292);
  *(_DWORD *)(a1 + 5340) = *((_DWORD *)a2 + 293);
  *(_DWORD *)(a1 + 5344) = *((_DWORD *)a2 + 294);
  *(_DWORD *)(a1 + 5348) = *((_DWORD *)a2 + 295);
  *(_DWORD *)(a1 + 5204) = a2[1184];
  double result = *(double *)(a2 + 1188);
  *(double *)(a1 + 5208) = result;
  *(_DWORD *)(a1 + 5216) = a2[1196];
  *(_DWORD *)(a1 + 5220) = *((_DWORD *)a2 + 300);
  *(_DWORD *)(a1 + 5236) = a2[1216];
  *(_DWORD *)(a1 + 5252) = *((_DWORD *)a2 + 306);
  *(_DWORD *)(a1 + 5268) = *((_DWORD *)a2 + 310);
  *(_DWORD *)(a1 + 5284) = a2[1256];
  *(_DWORD *)(a1 + 5300) = *((_DWORD *)a2 + 316);
  *(_DWORD *)(a1 + 5224) = *((_DWORD *)a2 + 301);
  *(_DWORD *)(a1 + 5240) = a2[1217];
  *(_DWORD *)(a1 + 5256) = *((_DWORD *)a2 + 307);
  *(_DWORD *)(a1 + 5272) = *((_DWORD *)a2 + 311);
  *(_DWORD *)(a1 + 5288) = a2[1257];
  *(_DWORD *)(a1 + 5304) = *((_DWORD *)a2 + 317);
  *(_DWORD *)(a1 + 5228) = *((_DWORD *)a2 + 302);
  *(_DWORD *)(a1 + 5244) = a2[1218];
  *(_DWORD *)(a1 + 5260) = *((_DWORD *)a2 + 308);
  *(_DWORD *)(a1 + 5276) = *((_DWORD *)a2 + 312);
  *(_DWORD *)(a1 + 5292) = a2[1258];
  *(_DWORD *)(a1 + 5308) = *((_DWORD *)a2 + 318);
  *(_DWORD *)(a1 + 5232) = *((_DWORD *)a2 + 303);
  *(_DWORD *)(a1 + 5248) = a2[1219];
  *(_DWORD *)(a1 + 5264) = *((_DWORD *)a2 + 309);
  *(_DWORD *)(a1 + 5280) = *((_DWORD *)a2 + 313);
  *(_DWORD *)(a1 + 5296) = a2[1259];
  int v18 = *((_DWORD *)a2 + 323);
  *(_DWORD *)(a1 + 5316) = *((_DWORD *)a2 + 320);
  *(_DWORD *)(a1 + 5320) = a2[1284];
  *(_DWORD *)(a1 + 5324) = a2[1286];
  *(_DWORD *)(a1 + 5328) = a2[1287];
  *(_DWORD *)(a1 + 5332) = a2[1288];
  *(_DWORD *)(a1 + 5336) = v18;
  return result;
}

double sub_2194C1C70(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    sub_21950332C();
  }
  *(_OWORD *)a2 = xmmword_21950BFA0;
  *(void *)(a2 + 16) = 0;
  *(void *)&double result = 0x100000012;
  *(void *)(a2 + 152) = 0x100000012;
  *(_DWORD *)(a2 + 160) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 244) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 328) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 412) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 496) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 580) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 664) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 748) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 832) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 916) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1000) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1084) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1168) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1252) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1336) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1420) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1504) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1588) |= 0x7FFFFFFFu;
  return result;
}

void sub_2194C1D80(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = a2 + *(unsigned int *)(a2 + 4);
  if (*(unsigned __int8 *)(v4 + 144) <= *(unsigned __int8 *)(a3 + 2)) {
    sub_219503364();
  }
  if (*(unsigned char *)a3)
  {
    uint64_t v5 = v4 + 84 * *(unsigned __int8 *)(a3 + 2);
    *(_DWORD *)(v5 + 152) = *(_DWORD *)(v5 + 152) & 0x80000000 | a4 & 0x7FFFFFFF;
    *(_WORD *)(v5 + 166) = *(_WORD *)(a3 + 4);
    int v6 = *(_DWORD *)(a3 + 24);
    *(_WORD *)(v5 + 164) = *(_DWORD *)(a3 + 20);
    *(_WORD *)(v5 + 162) = v6;
    int v7 = *(_DWORD *)(a3 + 32);
    *(_WORD *)(v5 + 160) = *(_DWORD *)(a3 + 28);
    *(_DWORD *)(v5 + 156) = v7;
  }
}

uint64_t sub_2194C1DEC(uint64_t a1, _OWORD *a2, unint64_t a3)
{
  long long v3 = a2[201];
  v8[4] = a2[200];
  v8[5] = v3;
  long long v4 = a2[203];
  v8[6] = a2[202];
  v8[7] = v4;
  long long v5 = a2[197];
  v8[0] = a2[196];
  v8[1] = v5;
  long long v6 = a2[199];
  v8[2] = a2[198];
  void v8[3] = v6;
  if (a3 >= 0x20) {
    sub_21950339C();
  }
  return *((unsigned int *)v8 + a3);
}

uint64_t sub_2194C1E58(uint64_t a1, _DWORD *a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (!a4) {
    sub_219503594();
  }
  *a5 = 0;
  if (a3 <= 0x7F)
  {
    int v5 = *(_DWORD *)((char *)a2 + (a3 & 0xFFFFFFFFFFFFFFFCLL) + 3136);
LABEL_7:
    *(_DWORD *)a4 = v5;
    *a5 = 4;
    return 1;
  }
  if (a3 == 2004)
  {
    *a5 = 4;
    int v6 = a2[834];
LABEL_11:
    *(_DWORD *)a4 = v6;
    return 1;
  }
  if (a3 == 2000)
  {
    int v5 = a2[835];
    goto LABEL_7;
  }
  if (a3 - 2008 <= 0xB)
  {
    *a5 = 4;
    int v6 = *(_DWORD *)((char *)a2 + ((a3 + 1336) & 0xFFFFFFFC));
    goto LABEL_11;
  }
  if (a3 - 6000 <= 0x3FF)
  {
    *a5 = 32;
    unsigned int v8 = (_OWORD *)((char *)a2 + ((a3 - 6000) & 0xFFFFFFFFFFFFFFE0) + ((8 * a3 - 13952) & 0xFFFFFFE0));
    long long v9 = v8[1];
    *(_OWORD *)a4 = *v8;
    *(_OWORD *)(a4 + 16) = v9;
    return 1;
  }
  uint64_t result = 0;
  *((void *)&v10 + 1) = a3;
  *(void *)&long long v10 = a3 - 10000;
  switch((unint64_t)(v10 >> 2))
  {
    case 0uLL:
      *a5 = 4;
      int v6 = a2[848];
      goto LABEL_11;
    case 1uLL:
      *a5 = 4;
      int v6 = a2[850];
      goto LABEL_11;
    case 2uLL:
      *a5 = 4;
      int v6 = a2[854];
      goto LABEL_11;
    case 5uLL:
      *a5 = 4;
      int v6 = a2[857];
      goto LABEL_11;
    case 7uLL:
      *a5 = 4;
      int v6 = a2[856];
      goto LABEL_11;
    case 0xDuLL:
      *a5 = 4;
      int v6 = a2[846];
      goto LABEL_11;
    case 0xEuLL:
      *a5 = 4;
      int v6 = a2[847];
      goto LABEL_11;
    case 0xFuLL:
      *a5 = 4;
      int v6 = a2[849];
      goto LABEL_11;
    case 0x10uLL:
      *a5 = 4;
      int v6 = a2[851];
      goto LABEL_11;
    case 0x11uLL:
      *a5 = 4;
      int v6 = a2[852];
      goto LABEL_11;
    case 0x12uLL:
      *a5 = 4;
      int v6 = a2[853];
      goto LABEL_11;
    case 0x13uLL:
      *a5 = 4;
      int v6 = a2[855];
      goto LABEL_11;
    case 0x14uLL:
      *a5 = 4;
      int v6 = a2[858];
      goto LABEL_11;
    case 0x15uLL:
      *a5 = 4;
      int v6 = a2[859];
      goto LABEL_11;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2194C2098(uint64_t a1, _DWORD *a2)
{
  return sub_2194C20A0(a2);
}

uint64_t sub_2194C20A0(_DWORD *a1)
{
  *(void *)((char *)&v58[2] + 4) = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503F30();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503EBC();
  }
  sub_2194885C0((uint64_t)v46, 16);
  uint64_t v1 = 0;
  uint64_t v2 = a1 + 535;
  do
  {
    long long v3 = (char *)v46 + *(void *)(v46[0] - 24);
    if (*((_DWORD *)v3 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(v46[0] - 24)));
      long long v4 = std::locale::use_facet(&v50, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
      std::locale::~locale(&v50);
    }
    *((_DWORD *)v3 + 36) = 48;
    sub_2194889DC(v47, (uint64_t)"GRF ", 4);
    int v5 = (void *)std::ostream::operator<<();
    int v6 = sub_2194889DC(v5, (uint64_t)" = 0x", 5);
    uint64_t v7 = *v6;
    *(_DWORD *)((char *)v6 + *(void *)(*v6 - 24) + 8) = *(_DWORD *)((unsigned char *)v6 + *(void *)(*v6 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v6 + *(void *)(v7 - 24) + 24) = 8;
    unsigned int v8 = (void *)std::ostream::operator<<();
    long long v9 = sub_2194889DC(v8, (uint64_t)"\t\t", 2);
    *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 8) = *(_DWORD *)((unsigned char *)v9 + *(void *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 2;
    long long v10 = (void *)std::ostream::operator<<();
    sub_2194889DC(v10, (uint64_t)" = (", 4);
    unsigned int v11 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v12 = *v11;
    *(_DWORD *)((char *)v11 + *(void *)(*v11 - 24) + 8) = *(_DWORD *)((unsigned char *)v11 + *(void *)(*v11 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v11 + *(void *)(v12 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    long long v13 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v14 = *v13;
    *(_DWORD *)((char *)v13 + *(void *)(*v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v13 + *(void *)(v14 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    uint64_t v15 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v16 = *v15;
    *(_DWORD *)((char *)v15 + *(void *)(*v15 - 24) + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v15 + *(void *)(v16 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    uint32x4_t v17 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v18 = *v17;
    *(_DWORD *)((char *)v17 + *(void *)(*v17 - 24) + 8) = *(_DWORD *)((unsigned char *)v17 + *(void *)(*v17 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v17 + *(void *)(v18 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    uint32x4_t v19 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v20 = *v19;
    *(_DWORD *)((char *)v19 + *(void *)(*v19 - 24) + 8) = *(_DWORD *)((unsigned char *)v19 + *(void *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v19 + *(void *)(v20 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    uint32x4_t v21 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v22 = *v21;
    *(_DWORD *)((char *)v21 + *(void *)(*v21 - 24) + 8) = *(_DWORD *)((unsigned char *)v21 + *(void *)(*v21 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v21 + *(void *)(v22 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    uint32x4_t v23 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v24 = *v23;
    *(_DWORD *)((char *)v23 + *(void *)(*v23 - 24) + 8) = *(_DWORD *)((unsigned char *)v23 + *(void *)(*v23 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v23 + *(void *)(v24 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)", ", 2);
    long long v25 = sub_2194889DC(v47, (uint64_t)"0x", 2);
    uint64_t v26 = *v25;
    *(_DWORD *)((char *)v25 + *(void *)(*v25 - 24) + 8) = *(_DWORD *)((unsigned char *)v25 + *(void *)(*v25 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v25 + *(void *)(v26 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_2194889DC(v47, (uint64_t)")", 1);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str();
      sub_219503E40(&v45, &v44, buf, v58);
    }
    BYTE1(v56) = 0;
    LOBYTE(v50.__locale_) = 0;
    std::stringbuf::str();
    if (SBYTE1(v56) < 0) {
      operator delete(v50.__locale_);
    }
    ++v1;
    v2 += 8;
  }
  while (v1 != 32);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    int v29 = a1[816];
    int v30 = a1[823];
    v50.__locale_ = (std::locale::__imp *)67109888;
    __int16 v51 = 1024;
    int v52 = v29;
    __int16 v53 = 1024;
    int v54 = 0;
    __int16 v55 = 1024;
    int v56 = v30;
    _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
LABEL_15:
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      goto LABEL_61;
    }
  }
  else if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    goto LABEL_15;
  }
  int v31 = a1[817];
  int v32 = a1[824];
  v50.__locale_ = (std::locale::__imp *)0x104000400;
  __int16 v51 = 1024;
  int v52 = v31;
  __int16 v53 = 1024;
  int v54 = 1;
  __int16 v55 = 1024;
  int v56 = v32;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_16:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v33 = a1[818];
  int v34 = a1[825];
  v50.__locale_ = (std::locale::__imp *)0x204000400;
  __int16 v51 = 1024;
  int v52 = v33;
  __int16 v53 = 1024;
  int v54 = 2;
  __int16 v55 = 1024;
  int v56 = v34;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_17:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v35 = a1[819];
  int v36 = a1[826];
  v50.__locale_ = (std::locale::__imp *)0x304000400;
  __int16 v51 = 1024;
  int v52 = v35;
  __int16 v53 = 1024;
  int v54 = 3;
  __int16 v55 = 1024;
  int v56 = v36;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_18:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_19;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v37 = a1[820];
  int v38 = a1[827];
  v50.__locale_ = (std::locale::__imp *)0x404000400;
  __int16 v51 = 1024;
  int v52 = v37;
  __int16 v53 = 1024;
  int v54 = 4;
  __int16 v55 = 1024;
  int v56 = v38;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_19:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v39 = a1[821];
  int v40 = a1[828];
  v50.__locale_ = (std::locale::__imp *)0x504000400;
  __int16 v51 = 1024;
  int v52 = v39;
  __int16 v53 = 1024;
  int v54 = 5;
  __int16 v55 = 1024;
  int v56 = v40;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
LABEL_20:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_65:
  int v41 = a1[822];
  int v42 = a1[829];
  v50.__locale_ = (std::locale::__imp *)0x604000400;
  __int16 v51 = 1024;
  int v52 = v41;
  __int16 v53 = 1024;
  int v54 = 6;
  __int16 v55 = 1024;
  int v56 = v42;
  _os_log_error_impl(&dword_219476000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
LABEL_21:
  }
    sub_219503DA8();
LABEL_22:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503D20();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503C98();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503C24();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503BB0();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503B3C();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503AC8();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503A54();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_2195039E0();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_21950396C();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_2195038F8();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503884();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503810();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_21950379C();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503728();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_2195036B4();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_219503640();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    sub_2195035CC();
  }
  v46[0] = *MEMORY[0x263F8C2B8];
  uint64_t v27 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v46 + *(void *)(v46[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v47[0] = v27;
  v47[1] = MEMORY[0x263F8C318] + 16;
  if (v48 < 0) {
    operator delete((void *)v47[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21D48B530](&v49);
}

void sub_2194C2E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2194888A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2194C2E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::locale::~locale((std::locale *)(v6 - 160));
  sub_2194888A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2194C2EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (*(char *)(v6 - 137) < 0)
  {
    operator delete(*(void **)(v6 - 160));
    sub_2194888A4((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_2194888A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2194C2F28(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = (((unint64_t)*(unsigned int *)(a3 + 2192) >> 2) & 3) - 1;
  if (v4 >= 3) {
    sub_21950930C();
  }
  int v5 = dword_21950CACC[v4];
  *(_DWORD *)(a4 + 4) = *(unsigned __int16 *)(a1 + 16);
  *(_DWORD *)(a4 + 8) = v5;

  return sub_2194860B8(a2, a3, a4);
}

uint64_t sub_2194C2F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_219486434(a2, a3, a4);
}

void *sub_2194C2F94(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v5 = a2 + a3[2].u32[1];
  int32x2_t v6 = *(int32x2_t *)(v5 + 100);
  a3[29] = vadd_s32(a3[29], v6);
  uint64_t v7 = a3[30].u32[0];
  uint64_t v8 = a3[30].u32[1];
  if (v7 == v8)
  {
    uint64_t v9 = a3[31].u32[0];
    uint64_t v10 = a3[31].u32[1];
    if (v9 == v10) {
      goto LABEL_3;
    }
  }
  else
  {
    __int32 v12 = v6.i32[1];
    uint64_t result = memcpy((void *)(a2 + v7), (const void *)(a2 + v8), (a3[1].i32[0] * v6.i32[0]));
    v6.i32[1] = v12;
    uint64_t v9 = a3[31].u32[0];
    uint64_t v10 = a3[31].u32[1];
    if (v9 == v10)
    {
LABEL_3:
      if (!a3[32].i8[0]) {
        return result;
      }
      goto LABEL_4;
    }
  }
  uint64_t result = memcpy((void *)(a2 + v9), (const void *)(a2 + v10), (a3[1].i32[0] * v6.i32[1]));
  if (!a3[32].i8[0]) {
    return result;
  }
LABEL_4:
  *(_DWORD *)(v5 + 100) = a3[29].i32[0];
  *(_DWORD *)(v5 + 104) = a3[29].i32[1];
  return result;
}

void sub_2194C3064(void *a1)
{
  sub_2194C30A4(a1);

  JUMPOUT(0x21D48B5B0);
}

uint64_t sub_2194C309C()
{
  return 0x3FFFLL;
}

uint64_t sub_2194C30A4(void *a1)
{
  *a1 = &unk_26CAD6750;
  uint64_t v2 = a1[99];
  if (v2)
  {
    a1[100] = v2;
    MEMORY[0x21D48B5A0]();
  }
  long long v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[16];
  if (v4)
  {
    a1[17] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  int32x2_t v6 = (void *)a1[10];
  if (v6)
  {
    a1[11] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[7];
  if (v7)
  {
    a1[8] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }

  return nullsub_14(a1);
}

void sub_2194C3168(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  bzero(a3, 0xF80uLL);
  *(_DWORD *)a3 = *(unsigned __int8 *)(a2 + 92);
  unsigned int v10 = *(_DWORD *)a2;
  int v11 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 >= 0x280u) {
    unsigned int v10 = 640;
  }
  *((_DWORD *)a3 + 1) = v10;
  *((_DWORD *)a3 + 2) = v11;
  *((_DWORD *)a3 + 3) = 8;
  sub_2194C3458(a1, a2, (unint64_t *)a3 + 8, a4, a5);
  int v12 = *((_DWORD *)a3 + 944);
  if (*(unsigned char *)(a2 + 92))
  {
    *((_DWORD *)a3 + 944) = v12 & 0xFFFFFFFE;
    *((_DWORD *)a3 + 960) = *((_DWORD *)a3 + 960) & 0xFFFFC000 | sub_2194952FC(*(_DWORD *)(a2 + 24)) & 0x3FFF;
    int v13 = *((_DWORD *)a3 + 944) & 0xFFFE00FF | ((sub_21949531C(*(_DWORD *)(a2 + 24)) & 0x1FF) << 8);
    *((_DWORD *)a3 + 944) = v13;
    *((_DWORD *)a3 + 944) = v13 & 0xFCFFFFFF | ((*(unsigned char *)(a2 + 132) & 3) << 24);
    *(void *)(a3 + 3780) = *((void *)a3 + 301);
    *(void *)(a3 + 3804) = *((void *)a3 + 302);
    *((_DWORD *)a3 + 947) = sub_219495340(*(unsigned __int8 *)(a2 + 132)) << 7;
    *((_DWORD *)a3 + 948) = 32 * sub_2194970A8(*(unsigned __int8 *)(a2 + 132));
    int v14 = *((_DWORD *)a3 + 945) & 0x7FFFF;
    *((_DWORD *)a3 + 949) = v14 + 384;
    *((_DWORD *)a3 + 950) = v14 + 512;
    *((_DWORD *)a3 + 953) = *((_DWORD *)a3 + 606);
    uint64_t v15 = *(unsigned int *)(a4 + 72);
    uint64_t v16 = *(void *)(a4 + 64) + v15;
    *((void *)a3 + 477) = v16;
    uint64_t v17 = v16 + 4 * (*((_DWORD *)a3 + 960) & 0x3FFF);
    LODWORD(v15) = 4 * (*((_DWORD *)a3 + 960) & 0x3FFF) + v15;
    *(_DWORD *)(a4 + 72) = v15;
    *((void *)a3 + 478) = v17;
    uint64_t v18 = 16 * (*((_DWORD *)a3 + 960) & 0x3FFF);
    LODWORD(v15) = 16 * (*((_DWORD *)a3 + 960) & 0x3FFF) + v15;
    *(_DWORD *)(a4 + 72) = v15;
    *((void *)a3 + 479) = v17 + v18;
    *(unsigned char *)(a5 + 388) = 1;
    *(_DWORD *)(a5 + 392) = v15;
    *(_DWORD *)(a4 + 72) += sub_2194C02DC(32 * (*((_DWORD *)a3 + 960) & 0x3FFFu) + 32, 0, 64, a5 + 368);
    *((_DWORD *)a3 + 960) &= 0xC0FFFFFF;
    *((_DWORD *)a3 + 961) = 1;
    float32x4_t v19 = *(float32x4_t *)(a2 + 96);
    float32x4_t v20 = *(float32x4_t *)(a2 + 112);
    *(uint32x4_t *)(a3 + 3848) = vcvtq_u32_f32(v19);
    v21.i64[0] = 0x300000003;
    v21.i64[1] = 0x300000003;
    *(int8x16_t *)(a3 + 3884) = vandq_s8((int8x16_t)vcvtq_n_u32_f32(vabsq_f32(v19), 0x12uLL), v21);
    *(uint32x4_t *)(a3 + 3864) = vcvtq_u32_f32(v20);
    *(int8x16_t *)(a3 + 3900) = vandq_s8((int8x16_t)vcvtq_n_u32_f32(vabsq_f32(v20), 0x12uLL), v21);
    v19.i32[0] = *(_DWORD *)(a2 + 128);
    *((_DWORD *)a3 + 970) = v19.f32[0];
    *((_DWORD *)a3 + 979) = vcvts_n_u32_f32(fabsf(v19.f32[0]), 0x12uLL) & 0x3FFFF;
    int v22 = *((_DWORD *)a3 + 982);
    uint64_t v23 = *((void *)a3 + 490);
    *((void *)a3 + 490) = v23 & 0xFFFFFFFFC000E000;
    unint64_t v24 = v23 & 0xFFFFE000C000E000 | ((unint64_t)(*(_DWORD *)a2 & 0x1FFF) << 32);
    *((void *)a3 + 490) = v24;
    unint64_t v25 = v24 & 0xC000FFFFFFFFFFFFLL | ((unint64_t)(*(_DWORD *)(a2 + 4) & 0x3FFF) << 48);
    *((void *)a3 + 490) = v25;
    unsigned int v26 = vcvtas_u32_f32((float)(*(float *)(a2 + 136) * 256.0) / 360.0) | v22 & 0xFFFFFF00;
    *((void *)a3 + 490) = v25;
    *((_DWORD *)a3 + 982) = v26;
    __int16 v27 = vcvtas_u32_f32(*(float *)(a2 + 140) * 512.0);
    *((void *)a3 + 490) = v25;
    *((_DWORD *)a3 + 982) = v26 & 0xFEC000FF | ((v27 & 0x3FFF) << 8);
    *((_DWORD *)a3 + 983) = (float)(*(float *)(a2 + 144)
                                                * (float)((float)(*(float *)(a2 + 144) * (float)*(unsigned int *)a2)
                                                        * (float)*(unsigned int *)a2));
    *((_DWORD *)a3 + 984) = *(_DWORD *)(a2 + 148);
  }
  else
  {
    *((_DWORD *)a3 + 944) = v12 | 1;
  }
}

void sub_2194C3458(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  int v5 = *(unsigned __int16 *)(a2 + 50);
  if ((v5 & 0xFFFE) != 4) {
    sub_219504090();
  }
  if (sub_2194E223C(*(_DWORD *)a2, *(_DWORD *)(a2 + 4)) != v5) {
    sub_219504058();
  }
  uint64_t v11 = *(unsigned __int16 *)(a2 + 50);
  unint64_t v12 = 2 * v11;
  bzero(a3, 0xE80uLL);
  *a3 = 4128;
  unsigned int v13 = *(_DWORD *)a2;
  int v14 = *(_DWORD *)(a2 + 4);
  *(_OWORD *)((char *)a3 + 12) = 0u;
  if (v13 >= 0x280) {
    LOWORD(v13) = 640;
  }
  *((_WORD *)a3 + 4) = v13;
  *((_WORD *)a3 + 5) = v14;
  *(unint64_t *)((char *)a3 + 268) = 0;
  *(_OWORD *)((char *)a3 + 236) = 0uLL;
  *(_OWORD *)((char *)a3 + 252) = 0uLL;
  *(_OWORD *)((char *)a3 + 204) = 0uLL;
  *(_OWORD *)((char *)a3 + 220) = 0uLL;
  *(_OWORD *)((char *)a3 + 172) = 0uLL;
  *(_OWORD *)((char *)a3 + 188) = 0uLL;
  *(_OWORD *)((char *)a3 + 140) = 0uLL;
  *(_OWORD *)((char *)a3 + 156) = 0uLL;
  *(_OWORD *)((char *)a3 + 108) = 0uLL;
  *(_OWORD *)((char *)a3 + 124) = 0uLL;
  *(_OWORD *)((char *)a3 + 76) = 0uLL;
  *(_OWORD *)((char *)a3 + 92) = 0uLL;
  *(_OWORD *)((char *)a3 + 44) = 0uLL;
  *(_OWORD *)((char *)a3 + 60) = 0uLL;
  *(_OWORD *)((char *)a3 + 28) = 0uLL;
  if (*(_WORD *)(a2 + 50) == 5) {
    int v15 = 1023;
  }
  else {
    int v15 = 255;
  }
  if (*(unsigned char *)(a2 + 84)) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  *((_DWORD *)a3 + 69) = v16;
  if (*(_WORD *)(a2 + 50) == 5) {
    int v17 = 1023;
  }
  else {
    int v17 = 255;
  }
  if (*(unsigned char *)(a2 + 85)) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  *((_DWORD *)a3 + 70) = v18;
  char v19 = *(unsigned char *)(a2 + 86);
  if (*(_WORD *)(a2 + 50) == 5) {
    int v20 = 510;
  }
  else {
    int v20 = 126;
  }
  if (!*(unsigned char *)(a2 + 86)) {
    int v20 = 0;
  }
  *((_DWORD *)a3 + 71) = v20;
  char v21 = v19 | *(unsigned char *)(a2 + 87) | *(unsigned char *)(a2 + 88) | *(unsigned char *)(a2 + 89) | *(unsigned char *)(a2 + 153) | *(unsigned char *)(a2 + 92);
  if (*(_WORD *)(a2 + 50) == 5) {
    int v22 = 510;
  }
  else {
    int v22 = 126;
  }
  if (v21) {
    int v23 = v22;
  }
  else {
    int v23 = 0;
  }
  *((_DWORD *)a3 + 72) = v23;
  if (v11)
  {
    if (v12 <= 1) {
      unint64_t v24 = 1;
    }
    else {
      unint64_t v24 = 2 * v11;
    }
    if (v24 >= 8)
    {
      unsigned int v26 = (char *)a3 + 292;
      int64x2_t v27 = (int64x2_t)xmmword_21950BFB0;
      int64x2_t v28 = (int64x2_t)xmmword_21950BFC0;
      int64x2_t v29 = (int64x2_t)xmmword_21950BFD0;
      int64x2_t v30 = (int64x2_t)xmmword_21950BFE0;
      uint64_t v25 = v24 & 0x1FFF8;
      *(void *)&long long v31 = 0x3000300030003;
      *((void *)&v31 + 1) = 0x3000300030003;
      int8x16_t v32 = (int8x16_t)vdupq_n_s64(1uLL);
      v33.i64[0] = 0x20002000200020;
      v33.i64[1] = 0x20002000200020;
      v34.i64[0] = 0x10001000100010;
      v34.i64[1] = 0x10001000100010;
      int64x2_t v35 = vdupq_n_s64(8uLL);
      uint64_t v36 = v24 & 0x1FFF8;
      do
      {
        *(_OWORD *)unsigned int v26 = v31;
        *(int8x16_t *)(v26 + 124) = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v30, v32)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v29, v32))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v28, v32)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v27, v32)))), v34, v33);
        int64x2_t v28 = vaddq_s64(v28, v35);
        int64x2_t v29 = vaddq_s64(v29, v35);
        int64x2_t v30 = vaddq_s64(v30, v35);
        int64x2_t v27 = vaddq_s64(v27, v35);
        v26 += 16;
        v36 -= 8;
      }
      while (v36);
      if (v24 == v25) {
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v25 = 0;
    }
    do
    {
      int v37 = (char *)a3 + 2 * v25;
      *((_WORD *)v37 + 146) = 3;
      if (v25) {
        __int16 v38 = 32;
      }
      else {
        __int16 v38 = 16;
      }
      *((_WORD *)v37 + 208) = v38;
      ++v25;
    }
    while (v24 != v25);
  }
LABEL_41:
  *((_DWORD *)a3 + 78) = 0;
  uint64_t v39 = *(unsigned __int16 *)(a1 + 68);
  if (*(_WORD *)(a1 + 68))
  {
    uint64_t v40 = 0;
    unsigned int v41 = *(unsigned __int16 *)(a2 + 20);
    int32x4_t v42 = vdupq_n_s32(v41);
    int v43 = (_OWORD *)((char *)a3 + 316);
    do
    {
      if (v39 >= 8)
      {
        uint64_t v45 = (unsigned __int16)v39 & 0xFFF8;
        int v46 = (int32x4_t *)v43;
        do
        {
          int32x4_t *v46 = v42;
          v46[1] = v42;
          v46 += 2;
          v45 -= 8;
        }
        while (v45);
        uint64_t v44 = (unsigned __int16)v39 & 0xFFF8;
        if (v44 == v39) {
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v44 = 0;
      }
      do
        *((_DWORD *)v43 + v44++) = v41;
      while (v39 != v44);
LABEL_43:
      ++v40;
      int v43 = (_OWORD *)((char *)v43 + 20);
    }
    while (v40 != v39);
  }
  *((_DWORD *)a3 + 454) = *(_DWORD *)(a2 + 24);
  *((_DWORD *)a3 + 455) = 2047;
  *((_DWORD *)a3 + 456) = sub_2194E2288(*(_DWORD *)a2, 0);
  int v47 = sub_2194E2288(*(_DWORD *)a2, 1u);
  *((_DWORD *)a3 + 457) = v47;
  *((_DWORD *)a3 + 458) = v47;
  int v48 = sub_2194E2288(*(_DWORD *)a2, 2u);
  *((_DWORD *)a3 + 459) = v48;
  *((_DWORD *)a3 + 460) = v48;
  int v49 = sub_2194E2288(*(_DWORD *)a2, 3u);
  *((_DWORD *)a3 + 461) = v49;
  if (*(_WORD *)(a2 + 50) == 5)
  {
    *((_DWORD *)a3 + 462) = v49;
    *((_DWORD *)a3 + 463) = sub_2194E2288(*(_DWORD *)a2, 4u);
  }
  *((_DWORD *)a3 + 480) = 1023;
  *(_OWORD *)((char *)a3 + 1924) = xmmword_21950BFF0;
  *((_DWORD *)a3 + 485) = 9437297;
  if (v11 >= 2)
  {
    std::locale v50 = a3 + 243;
    unint64_t v51 = 2;
    do
    {
      *(_OWORD *)std::locale v50 = xmmword_21950C000;
      *((_DWORD *)v50 + 4) = 9830514;
      v51 += 2;
      std::locale v50 = (void *)((char *)v50 + 20);
    }
    while (v51 < v12);
  }
  int v52 = *((_DWORD *)a3 + 512);
  unsigned int v53 = v52 & 0xFFFFFFFD;
  *((_DWORD *)a3 + 512) = v52 & 0xFFFFFFFD;
  if (*(unsigned char *)(a2 + 88)) {
    _ZF = *(unsigned char *)(a2 + 89) == 0;
  }
  else {
    _ZF = 1;
  }
  if (!_ZF) {
    sub_219504020();
  }
  unsigned int v55 = v52 & 0xFFFFFFF1;
  *((_DWORD *)a3 + 512) = v55;
  if (*(unsigned char *)(a2 + 89))
  {
    unsigned int v55 = v53 | 0xC;
  }
  else if (*(unsigned char *)(a2 + 88))
  {
    if (*(unsigned char *)(a2 + 91))
    {
      if (*(unsigned char *)(a2 + 91) == 1) {
        v55 |= 8u;
      }
    }
    else
    {
      v55 |= 4u;
    }
  }
  *((_DWORD *)a3 + 512) = v55 & 0xFFE0018F | 0x88000;
  if (*(_WORD *)(a2 + 50) == 5) {
    int v56 = 510;
  }
  else {
    int v56 = 126;
  }
  if (*(unsigned char *)(a2 + 87)) {
    int v57 = v56;
  }
  else {
    int v57 = 0;
  }
  *((_DWORD *)a3 + 513) = v57;
  unint64_t v58 = *(unsigned int *)(a2 + 28);
  v287[0] = v58;
  v287[1] = v58;
  v287[2] = v58;
  v287[3] = v58;
  v288[0] = v58;
  v288[1] = v58;
  v288[2] = v58;
  v288[3] = v58;
  if (*(unsigned char *)(a2 + 76)) {
    sub_2194E1EE8(v58, 2 * v11, v287);
  }
  unint64_t v59 = v12 - 1;
  if (v12 != 2)
  {
    unint64_t v60 = 2;
    if (v59 > 2) {
      unint64_t v60 = v12 - 1;
    }
    if (v60 < 9)
    {
      uint64_t v61 = 1;
LABEL_83:
      unint64_t v70 = v60 - v61;
      unsigned int v71 = &v287[v61 - 1];
      long long v72 = (_DWORD *)a3 + v61 + 514;
      do
      {
        uint64_t v73 = *v71++;
        *v72++ = v73;
        --v70;
      }
      while (v70);
      goto LABEL_85;
    }
    unint64_t v62 = (v60 - 1) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v61 = v62 | 1;
    __int16 v63 = (int32x4_t *)v288;
    int v64 = (int32x4_t *)((char *)a3 + 2060);
    unint64_t v65 = v62;
    do
    {
      int32x4_t v67 = v63[-2];
      int32x4_t v66 = v63[-1];
      int32x4_t v69 = *v63;
      int32x4_t v68 = v63[1];
      v63 += 4;
      int32x4_t *v64 = vuzp1q_s32(v67, v66);
      v64[1] = vuzp1q_s32(v69, v68);
      v64 += 2;
      v65 -= 8;
    }
    while (v65);
    if (v60 - 1 != v62) {
      goto LABEL_83;
    }
  }
LABEL_85:
  unsigned int v74 = *((_DWORD *)a3 + 523) & 0xFFFFFC00 | *(_DWORD *)a2 & 0x3FF;
  *((_DWORD *)a3 + 523) = v74;
  *((_DWORD *)a3 + 523) = v74 & 0xE000FFFF | ((*(_DWORD *)(a2 + 4) & 0x1FFF) << 16);
  *((_OWORD *)a3 + 131) = xmmword_21950C010;
  *((_OWORD *)a3 + 132) = xmmword_21950C020;
  *((_OWORD *)a3 + 133) = xmmword_21950C030;
  *((_OWORD *)a3 + 134) = xmmword_21950C040;
  a3[270] = 0x1D002E00230039;
  float v75 = (const __int16 *)(a2 + 20);
  if (v59 > 7 && ((unint64_t)a3 + 2188 >= a2 + 22 || v75 >= (const __int16 *)a3 + 2 * v11 + 1120))
  {
    unint64_t v76 = v59 & 0xFFFFFFFFFFFFFFF8;
    int16x8_t v77 = vld1q_dup_s16(v75);
    unint64_t v78 = (int16x8_t *)((char *)a3 + 2242);
    v79.i64[0] = 0x1000100010001;
    v79.i64[1] = 0x1000100010001;
    v80.i64[0] = -1;
    v80.i64[1] = -1;
    unint64_t v81 = v59 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      *(int16x8_t *)((char *)v78 - 54) = v79;
      *(int16x8_t *)((char *)v78 - 36) = v80;
      int16x8_t *v78 = v77;
      *(int16x8_t *)((char *)v78++ - 18) = v77;
      v81 -= 8;
    }
    while (v81);
  }
  else
  {
    unint64_t v76 = 0;
  }
  uint64_t v82 = v76 - v12 + 1;
  long long v83 = (__int16 *)a3 + v76 + 1121;
  do
  {
    *(v83 - 27) = 1;
    *(v83 - 18) = -1;
    __int16 *v83 = *v75;
    *(v83 - 9) = *v75;
    ++v83;
    _CF = __CFADD__(v82++, 1);
  }
  while (!_CF);
  unint64_t v85 = (const char *)(a2 + 22);
  if (v59 >= 8 && ((unint64_t)a3 + 2260 >= a2 + 23 || v85 >= (const char *)&a3[v11 + 282]))
  {
    if (v59 >= 0x10)
    {
      unint64_t v86 = v59 & 0xFFFFFFFFFFFFFFF0;
      uint8x16_t v87 = (uint8x16_t)vld1q_dup_s8(v85);
      uint16x8_t v88 = vmovl_high_u8(v87);
      int8x16_t v89 = (int8x16_t)vmovl_high_u16(v88);
      int8x16_t v90 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v88.i8);
      uint16x8_t v91 = vmovl_u8(*(uint8x8_t *)v87.i8);
      int8x16_t v92 = (int8x16_t)vmovl_high_u16(v91);
      int8x16_t v93 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v91.i8);
      int v94 = (char *)a3 + 2260;
      unint64_t v95 = v59 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        unsigned long long v96 = *((_OWORD *)v94 + 2) & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00);
        v97.i64[0] = __PAIR64__(HIDWORD(*(void *)v94), *(_OWORD *)v94) & 0xFFFFFF00FFFFFF00;
        v97.i32[2] = *((void *)v94 + 1) & 0xFFFFFF00;
        v97.i32[3] = HIDWORD(*(void *)v94) & 0xFFFFFF00;
        unsigned long long v98 = *((_OWORD *)v94 + 1) & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00);
        unsigned long long v99 = *((_OWORD *)v94 + 3) & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00);
        *(int8x16_t *)int v94 = vorrq_s8(v97, v93);
        *((int8x16_t *)v94 + 1) = vorrq_s8((int8x16_t)v98, v92);
        *((int8x16_t *)v94 + 2) = vorrq_s8((int8x16_t)v96, v90);
        *((int8x16_t *)v94 + 3) = vorrq_s8((int8x16_t)v99, v89);
        v94 += 64;
        v95 -= 16;
      }
      while (v95);
      if ((v59 & 8) == 0) {
        goto LABEL_105;
      }
    }
    else
    {
      unint64_t v86 = 0;
    }
    unint64_t v100 = v86;
    unint64_t v86 = v59 & 0xFFFFFFFFFFFFFFF8;
    uint8x8_t v101 = (uint8x8_t)vld1_dup_s8(v85);
    uint16x8_t v102 = vmovl_u8(v101);
    int8x16_t v103 = (int8x16_t)vmovl_high_u16(v102);
    int8x16_t v104 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v102.i8);
    uint64_t v105 = (uint64_t)a3 + 4 * v100 + 2260;
    unint64_t v106 = v100 - (v59 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v107.i64[0] = __PAIR64__(HIDWORD(*(void *)v105), *(_OWORD *)v105) & 0xFFFFFF00FFFFFF00;
      v107.i32[2] = *(void *)(v105 + 8) & 0xFFFFFF00;
      v107.i32[3] = HIDWORD(*(void *)v105) & 0xFFFFFF00;
      unsigned long long v108 = *(_OWORD *)(v105 + 16) & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00);
      *(int8x16_t *)uint64_t v105 = vorrq_s8(v107, v104);
      *(int8x16_t *)(v105 + 16) = vorrq_s8((int8x16_t)v108, v103);
      v105 += 32;
      v106 += 8;
    }
    while (v106);
  }
  else
  {
    unint64_t v86 = 0;
  }
  do
LABEL_105:
    *((unsigned char *)a3 + 4 * v86++ + 2260) = *v85;
  while (v59 != v86);
  *(_OWORD *)(a3 + 287) = xmmword_21950C050;
  a3[289] = 0;
  int v109 = *(unsigned __int16 *)(a2 + 50);
  if (v109 == 5) {
    int v110 = 15;
  }
  else {
    int v110 = 7;
  }
  *((_DWORD *)a3 + 580) = v110;
  if (v109 != 1)
  {
    unint64_t v111 = 0;
    uint64_t v112 = (char *)a3 + 2326;
    do
    {
      *(_DWORD *)(v112 - 2) = 19267693;
      ++v111;
      v112 += 4;
    }
    while (v111 < (unint64_t)*(unsigned __int16 *)(a2 + 50) - 1);
  }
  if (v59 >= 8)
  {
    if ((unint64_t)a3 + 436 >= a2 + 48 || a2 + 43 >= (unint64_t)&a3[v11 + 54])
    {
      if (v59 >= 0x10)
      {
        unint64_t v113 = v59 & 0xFFFFFFFFFFFFFFF0;
        long long v114 = (const char *)(a2 + 43);
        uint8x16_t v115 = (uint8x16_t)vld1q_dup_s8(v114);
        uint16x8_t v116 = vmovl_high_u8(v115);
        int8x16_t v117 = (int8x16_t)vmovl_high_u16(v116);
        int8x16_t v118 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v116.i8);
        uint16x8_t v119 = vmovl_u8(*(uint8x8_t *)v115.i8);
        int8x16_t v120 = (int8x16_t)vmovl_high_u16(v119);
        _Q1 = vdupq_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)(a2 + 46), (int8x8_t)0x3F003F003F003FLL), 0);
        int8x16_t v122 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v119.i8);
        __asm { SHLL2           V6.4S, V1.8H, #0x10 }
        int8x16_t v126 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
        int8x16_t v127 = (int8x16_t)vdupq_n_s32(0xFFC0FFFE);
        int8x16_t v128 = vorrq_s8(_Q6, v117);
        int8x16_t v129 = vorrq_s8(_Q6, v120);
        int8x16_t v130 = vorrq_s8(v126, v122);
        int8x16_t v131 = vorrq_s8(v126, v118);
        unint64_t v132 = v59 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v133 = (int8x16_t *)((char *)a3 + 436);
        do
        {
          int8x16_t v134 = vorrq_s8(v128, vandq_s8(v133[3], v127));
          int8x16_t v135 = vorrq_s8(v129, vandq_s8(v133[1], v127));
          int8x16_t v136 = vorrq_s8(v131, vandq_s8(v133[2], v127));
          *uint64_t v133 = vorrq_s8(v130, vandq_s8(*v133, v127));
          v133[1] = v135;
          v133[2] = v136;
          v133[3] = v134;
          v133 += 4;
          v132 -= 16;
        }
        while (v132);
        if ((v59 & 8) == 0) {
          goto LABEL_124;
        }
      }
      else
      {
        unint64_t v113 = 0;
      }
      unint64_t v137 = v113;
      unint64_t v113 = v59 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v138 = (const char *)(a2 + 43);
      uint8x8_t v139 = (uint8x8_t)vld1_dup_s8(v138);
      uint16x8_t v140 = vmovl_u8(v139);
      int8x16_t v141 = (int8x16_t)vmovl_high_u16(v140);
      int8x16_t v142 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v140.i8);
      v143.i64[0] = 0x3F003F003F003FLL;
      v143.i64[1] = 0x3F003F003F003FLL;
      _Q0 = vdupq_lane_s16((int16x4_t)*(_OWORD *)&vandq_s8(*(int8x16_t *)(a2 + 46), v143), 0);
      __asm { SHLL2           V3.4S, V0.8H, #0x10 }
      int8x16_t v146 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
      long long v147 = (int8x16_t *)((char *)a3 + 4 * v137 + 436);
      unint64_t v148 = v137 - (v59 & 0xFFFFFFFFFFFFFFF8);
      int8x16_t v149 = (int8x16_t)vdupq_n_s32(0xFFC0FFFE);
      int8x16_t v150 = vorrq_s8(_Q3, v141);
      int8x16_t v151 = vorrq_s8(v146, v142);
      do
      {
        int8x16_t v152 = vorrq_s8(v150, vandq_s8(v147[1], v149));
        *long long v147 = vorrq_s8(v151, vandq_s8(*v147, v149));
        v147[1] = v152;
        v147 += 2;
        v148 += 8;
      }
      while (v148);
    }
    else
    {
      unint64_t v113 = 0;
    }
  }
  else
  {
    unint64_t v113 = 0;
  }
  do
  {
LABEL_124:
    long long v153 = (char *)a3 + 4 * v113;
    unsigned int v154 = *((_DWORD *)v153 + 109) & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 43);
    *((_DWORD *)v153 + 109) = v154;
    *((_DWORD *)v153 + 109) = v154 & 0xFFC0FFFF | ((*(_WORD *)(a2 + 46) & 0x3F) << 16);
    ++v113;
  }
  while (v59 != v113);
  *((_DWORD *)a3 + 585) = *((_DWORD *)a3 + 585) & 0xFFFFFFFE | ((*(unsigned __int8 *)(a2 + 92) | *(unsigned __int8 *)(a2 + 153)) != 0);
  if (*(unsigned __int8 *)(a2 + 92) | *(unsigned __int8 *)(a2 + 153))
  {
    int v155 = *((_DWORD *)a3 + 585) & 0xFFFE00FF | ((sub_21949531C(*(_DWORD *)(a2 + 24)) & 0x1FF) << 8);
    *((_DWORD *)a3 + 585) = v155;
    *((_DWORD *)a3 + 585) = v155 & 0xF8FFFFFF | ((*(unsigned char *)(a2 + 132) & 3) << 24);
    *((_DWORD *)a3 + 590) = sub_219495388(*(_DWORD *)(a2 + 24));
    uint64_t v156 = *(unsigned int *)(a4 + 72);
    unint64_t v157 = *(void *)(a4 + 64) + v156;
    a3[293] = v157;
    *(unsigned char *)(a5 + 360) = 1;
    *(_DWORD *)(a5 + 364) = v156;
    unsigned int v158 = sub_2194970C8(*(_DWORD *)(a2 + 24), *(unsigned __int8 *)(a2 + 132));
    if (sub_2194C02DC(v158, 0, 64, a5 + 340) >= 0x4B001) {
      sub_219503FE8();
    }
    int v159 = *(_DWORD *)(a4 + 72) + 307200;
    a3[294] = v157 + 307200;
    *(_DWORD *)(a4 + 72) = v159 + (*((_DWORD *)a3 + 590) << 6);
  }
  *(int8x16_t *)(a3 + 179) = vandq_s8(*(int8x16_t *)(a3 + 179), (int8x16_t)xmmword_21950C060);
  *((_OWORD *)a3 + 111) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 111), (int8x16_t)vdupq_n_s32(0xE000F000)) | __PAIR128__(0x10001000100010, 0x10001000100010);
  a3[181] &= 0xFFFFFFF0FFFFFFF0;
  *((int8x16_t *)a3 + 112) = vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 112), (int8x16_t)xmmword_21950C070), (int8x16_t)xmmword_21950C080);
  long long v160 = (int8x16_t *)((char *)a3 + 1436);
  a3[226] = (unint64_t)vorr_s8(vand_s8((int8x8_t)a3[226], (int8x8_t)vdup_n_s32(0xFFFF8080)), (int8x8_t)vdup_n_s32(0x101u));
  int8x16_t v161 = (int8x16_t)vdupq_n_s32(0xF000F800);
  *((_OWORD *)a3 + 91) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 91), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 368) = a3[184] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1476) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1476), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 373) = *((_DWORD *)a3 + 373) & 0xF000F800 | 0x50005;
  *(_OWORD *)(a3 + 187) = *(_OWORD *)&vandq_s8(*(int8x16_t *)(a3 + 187), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 378) = a3[189] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1516) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1516), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 383) = *((_DWORD *)a3 + 383) & 0xF000F800 | 0x50005;
  *((_OWORD *)a3 + 96) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 96), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 388) = a3[194] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1556) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1556), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 393) = *((_DWORD *)a3 + 393) & 0xF000F800 | 0x50005;
  *(_OWORD *)(a3 + 197) = *(_OWORD *)&vandq_s8(*(int8x16_t *)(a3 + 197), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 398) = a3[199] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1596) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1596), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 403) = *((_DWORD *)a3 + 403) & 0xF000F800 | 0x50005;
  *((_OWORD *)a3 + 101) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 101), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 408) = a3[204] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1636) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1636), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 413) = *((_DWORD *)a3 + 413) & 0xF000F800 | 0x50005;
  *(_OWORD *)(a3 + 207) = *(_OWORD *)&vandq_s8(*(int8x16_t *)(a3 + 207), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 418) = a3[209] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1676) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1676), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 423) = *((_DWORD *)a3 + 423) & 0xF000F800 | 0x50005;
  *((_OWORD *)a3 + 106) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 106), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 428) = a3[214] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1716) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1716), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 433) = *((_DWORD *)a3 + 433) & 0xF000F800 | 0x50005;
  *(_OWORD *)(a3 + 217) = *(_OWORD *)&vandq_s8(*(int8x16_t *)(a3 + 217), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 438) = a3[219] & 0xF000F800 | 0x50005;
  int8x16_t v162 = *(int8x16_t *)((char *)a3 + 1756);
  unsigned long long v163 = *(_OWORD *)&vandq_s8(v162, v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *(_OWORD *)((char *)a3 + 1756) = v163;
  *((_DWORD *)a3 + 443) = *((_DWORD *)a3 + 443) & 0xF000F800 | 0x50005;
  if (*(_DWORD *)a2 <= 0x280u)
  {
    *a3 = *a3 & 0xFFFFFFE0FFFFFFFFLL | 0x100000000;
    int8x16_t v164 = (int8x16_t)vdupq_n_s32(0xC000E000);
    *((int8x16_t *)a3 + 116) = vandq_s8(*((int8x16_t *)a3 + 116), v164);
    *((int8x16_t *)a3 + 117) = vandq_s8(*((int8x16_t *)a3 + 117), v164);
    *((int8x16_t *)a3 + 118) = vandq_s8(*((int8x16_t *)a3 + 118), v164);
    *((int8x16_t *)a3 + 119) = vandq_s8(*((int8x16_t *)a3 + 119), v164);
    sub_2194882FC(a1, a2, (uint64_t)a3, 1);
    *((_DWORD *)a3 + 358) = a3[179] & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 42);
    if (*(unsigned char *)(a2 + 42))
    {
      bzero(v243, 0x824uLL);
      unsigned int v165 = *((_DWORD *)a3 + 118);
      v242[0] = 1;
      int v244 = v165 & 0x7FF;
      unsigned int v166 = *((_DWORD *)a3 + 198);
      int v255 = 5 * (HIWORD(v166) & 0x1FFF);
      int v167 = (a3[139] & 0x3FF) + 5 * (v166 & 0x3FF);
      unsigned int v168 = *((_DWORD *)a3 + 119);
      int v245 = HIWORD(v165) & 0x1FFF;
      int v246 = v168 & 0x7FF;
      int v169 = HIWORD(v168) & 0x1FFF;
      unsigned int v170 = *((_DWORD *)a3 + 199);
      int v257 = 5 * (HIWORD(v170) & 0x1FFF);
      int v256 = (*((_DWORD *)a3 + 279) & 0x3FF) + 5 * (v170 & 0x3FF);
      unsigned int v171 = *((_DWORD *)a3 + 120);
      int v247 = v169;
      int v248 = v171 & 0x7FF;
      int v172 = HIWORD(v171) & 0x1FFF;
      unsigned int v173 = *((_DWORD *)a3 + 200);
      int v259 = 5 * (HIWORD(v173) & 0x1FFF);
      int v258 = (a3[140] & 0x3FF) + 5 * (v173 & 0x3FF);
      unsigned int v174 = *((_DWORD *)a3 + 121);
      int v249 = v172;
      int v250 = v174 & 0x7FF;
      int v175 = HIWORD(v174) & 0x1FFF;
      unsigned int v176 = *((_DWORD *)a3 + 201);
      int v261 = 5 * (HIWORD(v176) & 0x1FFF);
      int v260 = (*((_DWORD *)a3 + 281) & 0x3FF) + 5 * (v176 & 0x3FF);
      unsigned int v177 = *((_DWORD *)a3 + 122);
      int v251 = v175;
      int v252 = v177 & 0x7FF;
      int v254 = v167;
      v253[0] = HIWORD(v177) & 0x1FFF;
      unsigned int v178 = *((_DWORD *)a3 + 202);
      v263[0] = 5 * (HIWORD(v178) & 0x1FFF);
      int v262 = (a3[141] & 0x3FF) + 5 * (v178 & 0x3FF);
      sub_2194E22C8(0x280u, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), 1, v242, v179, v180);
      unsigned int v181 = v266;
      unsigned int v182 = v267;
      v183.i64[0] = __PAIR64__(v278, v276);
      v184.i64[0] = __PAIR64__(v279, v277);
      v185.i64[0] = __PAIR64__(v263[153], v263[151]);
      v186.i64[0] = __PAIR64__(v263[154], v263[152]);
      unsigned int v187 = v268;
      unsigned int v188 = v269;
      unsigned int v189 = v270;
      unsigned int v190 = v271;
      v191.i32[0] = v272;
      v192.i32[0] = v273;
      v183.i64[1] = __PAIR64__(v282, v280);
      v193.i64[0] = 0xF0000000FLL;
      v193.i64[1] = 0xF0000000FLL;
      v184.i64[1] = __PAIR64__(v283, v281);
      v185.i32[2] = v263[155];
      v186.i32[2] = v263[156];
      *((int8x16_t *)a3 + 111) = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v184, 0x10uLL) & __PAIR128__(0x1FFFFFFF1FFFFFFFLL, 0x1FFFFFFF1FFFFFFFLL)), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 111), (int8x16_t)vdupq_n_s32(0xE000F000)), vandq_s8(v183, v193)));
      v194.i64[0] = 0xF0000000FLL;
      v194.i64[1] = 0xF0000000FLL;
      *long long v160 = vbslq_s8(v194, *v160, *(int8x16_t *)&v285[1]);
      v185.i32[3] = v263[157];
      v184.i64[0] = 0x700000007;
      v184.i64[1] = 0x700000007;
      v186.i32[3] = v263[158];
      *((int8x16_t *)a3 + 91) = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v186, 0x10uLL) & __PAIR128__(0xFFFFFFF0FFFFFFFLL, 0xFFFFFFF0FFFFFFFLL)), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 91), (int8x16_t)vdupq_n_s32(0xF000F800)), vandq_s8(v185, (int8x16_t)v184)));
      v191.i32[1] = v274;
      v192.i32[1] = v275;
      a3[226] = (unint64_t)vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v192, 8uLL), (int8x8_t)0x7F0000007F00), vorr_s8(vand_s8((int8x8_t)a3[226], (int8x8_t)vdup_n_s32(0xFFFF8080)), vand_s8(v191, (int8x8_t)0x7F0000007FLL)));
      v195.i64[0] = __PAIR64__(v181, v284);
      v186.i64[0] = __PAIR64__(v182, v285[0]);
      v195.i64[1] = __PAIR64__(v189, v187);
      v186.i64[1] = __PAIR64__(v190, v188);
      *((int8x16_t *)a3 + 112) = vorrq_s8(vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)v186, (uint32x4_t)xmmword_21950C0A0), (int8x16_t)xmmword_21950C0B0), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 112), (int8x16_t)xmmword_21950C070), vandq_s8(v195, (int8x16_t)xmmword_21950C090)));
      *((_DWORD *)a3 + 363) = *((_DWORD *)a3 + 363) & 0xFFFFFFF0 | v286 & 0xF;
      *((_DWORD *)a3 + 368) = ((v265 & 0xFFF) << 16) | a3[184] & 0xF000F800 | v264 & 0x7FF;
    }
    return;
  }
  sub_2194E22C8(0x280u, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(unsigned __int8 *)(a2 + 42), v242, *(double *)&v163, (uint32x4_t)v162);
  int v196 = v242[0] & 0x1F;
  unint64_t v197 = *a3 & 0xFFFFFFE0FFFFFFFFLL | ((unint64_t)(v242[0] & 0x1F) << 32);
  *a3 = v197;
  unint64_t v198 = HIDWORD(v197) & 0x1F;
  if (v196)
  {
    unint64_t v199 = 0;
    uint64_t v200 = 0;
    v201.i64[0] = 0x700000007;
    v201.i64[1] = 0x700000007;
    int8x16_t v202 = (int8x16_t)vdupq_n_s32(0xE000F800);
    long long v203 = a3;
    do
    {
      *(_DWORD *)((char *)a3 + v200 * 4 + 1856) = *(_DWORD *)((unsigned char *)a3 + v200 * 4 + 1856) & 0xFFFFE000 | v242[v200 + 1] & 0x1FFF;
      int v204 = *(int *)((char *)&v254 + v199);
      *((_DWORD *)v203 + 198) = ((((unsigned __int16)((unint64_t)(1717986919 * *(int *)((char *)&v255 + v199)) >> 33)
                                 + ((unint64_t)(1717986919 * *(int *)((char *)&v255 + v199)) >> 63)) & 0x1FFF) << 16) | v203[99] & 0xE000FC00 | (v204 / 5) & 0x3FF;
      *((_DWORD *)v203 + 278) = v203[139] & 0xFFFFFC00 | (v204 % 5) & 0x3FF;
      int v205 = *(int *)((char *)&v256 + v199);
      *((_DWORD *)v203 + 199) = ((((unsigned __int16)((unint64_t)(1717986919 * *(int *)((char *)&v257 + v199)) >> 33)
                                 + ((unint64_t)(1717986919 * *(int *)((char *)&v257 + v199)) >> 63)) & 0x1FFF) << 16) | *((_DWORD *)v203 + 199) & 0xE000FC00 | (v205 / 5) & 0x3FF;
      *((_DWORD *)v203 + 279) = *((_DWORD *)v203 + 279) & 0xFFFFFC00 | (v205 % 5) & 0x3FF;
      v206.i32[0] = *(int *)((char *)&v244 + v199);
      v207.i32[0] = *(int *)((char *)&v245 + v199);
      v206.i32[1] = *(int *)((char *)&v246 + v199);
      v207.i32[1] = *(int *)((char *)&v247 + v199);
      int v208 = *(int *)((char *)&v258 + v199);
      v206.i32[2] = *(int *)((char *)&v248 + v199);
      v207.i32[2] = *(int *)((char *)&v249 + v199);
      *((_DWORD *)v203 + 200) = ((((unsigned __int16)((unint64_t)(1717986919 * *(int *)((char *)&v259 + v199)) >> 33)
                                 + ((unint64_t)(1717986919 * *(int *)((char *)&v259 + v199)) >> 63)) & 0x1FFF) << 16) | v203[100] & 0xE000FC00 | (v208 / 5) & 0x3FF;
      *((_DWORD *)v203 + 280) = v203[140] & 0xFFFFFC00 | (v208 % 5) & 0x3FF;
      v206.i32[3] = *(int *)((char *)&v250 + v199);
      v207.i32[3] = *(int *)((char *)&v251 + v199);
      *(int8x16_t *)(v203 + 59) = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v207, 0x10uLL) & __PAIR128__(0x1FFFFFFF1FFFFFFFLL, 0x1FFFFFFF1FFFFFFFLL)), vorrq_s8(vandq_s8(*(int8x16_t *)(v203 + 59), v202), vandq_s8(v206, v201)));
      int v209 = *(int *)((char *)&v260 + v199);
      *((_DWORD *)v203 + 201) = ((((unsigned __int16)((unint64_t)(1717986919 * *(int *)((char *)&v261 + v199)) >> 33)
                                 + ((unint64_t)(1717986919 * *(int *)((char *)&v261 + v199)) >> 63)) & 0x1FFF) << 16) | *((_DWORD *)v203 + 201) & 0xE000FC00 | (v209 / 5) & 0x3FF;
      *((_DWORD *)v203 + 281) = *((_DWORD *)v203 + 281) & 0xFFFFFC00 | (v209 % 5) & 0x3FF;
      *((_DWORD *)v203 + 122) = ((v253[v199 / 4] & 0x1FFF) << 16) | v203[61] & 0xE000F800 | v253[v199 / 4 - 1] & 0x7FF;
      int v210 = v263[v199 / 4 - 1];
      *((_DWORD *)v203 + 202) = ((((unsigned __int16)((unint64_t)(1717986919 * (int)v263[v199 / 4]) >> 33)
                                 + ((unint64_t)(1717986919 * (int)v263[v199 / 4]) >> 63)) & 0x1FFF) << 16) | v203[101] & 0xE000FC00 | (v210 / 5) & 0x3FF;
      *((_DWORD *)v203 + 282) = v203[141] & 0xFFFFFC00 | (v210 % 5) & 0x3FF;
      ++v200;
      v199 += 40;
      long long v203 = (unint64_t *)((char *)v203 + 20);
    }
    while (40 * v198 != v199);
  }
  *((_DWORD *)a3 + 358) = a3[179] & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 42);
  if (*(unsigned char *)(a2 + 42))
  {
    unsigned int v211 = v266;
    unsigned int v212 = v267;
    v213.i64[0] = __PAIR64__(v278, v276);
    v214.i64[0] = __PAIR64__(v279, v277);
    unsigned int v215 = v268;
    unsigned int v216 = v269;
    unsigned int v217 = v270;
    unsigned int v218 = v271;
    v219.i32[0] = v272;
    v220.i32[0] = v273;
    v213.i64[1] = __PAIR64__(v282, v280);
    v221.i64[0] = 0xF0000000FLL;
    v221.i64[1] = 0xF0000000FLL;
    v214.i64[1] = __PAIR64__(v283, v281);
    *((int8x16_t *)a3 + 111) = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v214, 0x10uLL) & __PAIR128__(0x1FFFFFFF1FFFFFFFLL, 0x1FFFFFFF1FFFFFFFLL)), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 111), (int8x16_t)vdupq_n_s32(0xE000F000)), vandq_s8(v213, v221)));
    v222.i64[0] = 0xF0000000FLL;
    v222.i64[1] = 0xF0000000FLL;
    *long long v160 = vbslq_s8(v222, *v160, *(int8x16_t *)&v285[1]);
    v219.i32[1] = v274;
    v220.i32[1] = v275;
    a3[226] = (unint64_t)vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v220, 8uLL), (int8x8_t)0x7F0000007F00), vorr_s8(vand_s8((int8x8_t)a3[226], (int8x8_t)vdup_n_s32(0xFFFF8080)), vand_s8(v219, (int8x8_t)0x7F0000007FLL)));
    v213.i64[0] = __PAIR64__(v211, v284);
    v214.i64[0] = __PAIR64__(v212, v285[0]);
    v213.i64[1] = __PAIR64__(v217, v215);
    v214.i64[1] = __PAIR64__(v218, v216);
    *((int8x16_t *)a3 + 112) = vorrq_s8(vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)v214, (uint32x4_t)xmmword_21950C0A0), (int8x16_t)xmmword_21950C0B0), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 112), (int8x16_t)xmmword_21950C070), vandq_s8(v213, (int8x16_t)xmmword_21950C090)));
    *((_DWORD *)a3 + 363) = *((_DWORD *)a3 + 363) & 0xFFFFFFF0 | v286 & 0xF;
    if (v196)
    {
      long long v223 = &v265;
      long long v224 = (int8x16_t *)(a3 + 184);
      v225.i64[0] = 0x700000007;
      v225.i64[1] = 0x700000007;
      int8x16_t v226 = (int8x16_t)vdupq_n_s32(0xF000F800);
      uint64_t v227 = HIDWORD(v197) & 0x1F;
      do
      {
        v228.i32[0] = *(v223 - 9);
        v228.i32[1] = *(v223 - 7);
        v228.i32[2] = *(v223 - 5);
        v228.i32[3] = *(v223 - 3);
        int8x16_t v229 = vorrq_s8(vandq_s8(v224[-1], v226), vandq_s8(v228, v225));
        v228.i32[0] = *(v223 - 8);
        v228.i32[1] = *(v223 - 6);
        v228.i32[2] = *(v223 - 4);
        v228.i32[3] = *(v223 - 2);
        v224[-1] = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32((int32x4_t)v228, 0x10uLL) & __PAIR128__(0xFFFFFFF0FFFFFFFLL, 0xFFFFFFF0FFFFFFFLL)), v229);
        unsigned int v230 = v224->i32[0] & 0xF000F800 | *(v223 - 1) & 0x7FF;
        int v231 = *v223;
        v223 += 10;
        v224->i32[0] = ((v231 & 0xFFF) << 16) | v230;
        long long v224 = (int8x16_t *)((char *)v224 + 20);
        --v227;
      }
      while (v227);
    }
  }
  *((_DWORD *)a3 + 592) = a3[296] & 0xE0000000 | (2 * (a3[1] & 0x3FFF)) & 0x7FFF | ((*((_WORD *)a3 + 5) & 0x3FFF) << 15) | 1;
  *((_DWORD *)a3 + 593) = v196;
  if (v198)
  {
    if (v198 < 8)
    {
      unint64_t v232 = 0;
LABEL_144:
      unint64_t v240 = v232 - v198;
      long long v241 = (_DWORD *)a3 + v232 + 464;
      do
      {
        v241[131] = *v241 & 0x1FFF;
        ++v241;
        _CF = __CFADD__(v240++, 1);
      }
      while (!_CF);
      return;
    }
    uint64_t v233 = HIDWORD(v197) & 7;
    unint64_t v232 = v198 - v233;
    long long v234 = a3 + 232;
    v235.i64[0] = 0x1F0000001FLL;
    v235.i64[1] = 0x1F0000001FLL;
    unint64_t v236 = v198 - v233;
    do
    {
      long long v237 = (int8x16_t *)((char *)v234 + 524);
      int8x16_t v238 = *(int8x16_t *)v234;
      int8x16_t v239 = *((int8x16_t *)v234 + 1);
      v234 += 2;
      *long long v237 = vandq_s8(v238, v235);
      v237[1] = vandq_s8(v239, v235);
      v236 -= 8;
    }
    while (v236);
    if (v233) {
      goto LABEL_144;
    }
  }
}

uint64_t sub_2194C4A2C(__CVBuffer *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,long long a27,long long a28,long long a29,long long a30,long long a31,long long a32,long long a33,long long a34,long long a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char __dst,int a46,int a47,int a48,int a49)
{
  STACK[0x4D8] = *MEMORY[0x263EF8340];
  if (!a1) {
    return 2;
  }
  BaseAddress = (unsigned int *)CVPixelBufferGetBaseAddress(a1);
  if (!BaseAddress) {
    return 1;
  }
  int v52 = BaseAddress;
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  uint64_t v55 = v52[2];
  if (v55 < 2) {
    return 5;
  }
  size_t v57 = Height;
  memcpy(&__dst, v52 + 8, 8 * v55);
  unint64_t v58 = LODWORD(STACK[0x4C8]);
  uint64_t result = 5;
  if (v58)
  {
    unint64_t v59 = v57 * BytesPerRow;
    if (v59 >= v58)
    {
      unint64_t v60 = LODWORD(STACK[0x4C0]);
      if (v60)
      {
        if (v59 >= v60 && v58 + 576 <= v59)
        {
          long long vars0 = 0u;
          long long v67 = 0u;
          long long v68 = 0u;
          long long v65 = 0u;
          long long v66 = 0u;
          sub_2194C579C((uint64_t)v52 + v58, (uint64_t)&v65);
          if (!sub_2194C533C((uint64_t)&v65)) {
            return 6;
          }
          *(void *)(a2 + 32) = *(void *)((char *)&v66 + 4);
          int v61 = (unsigned __int16)v66;
          *(_WORD *)a2 = v66;
          if ((v61 - 7) < 0xFFFFFFFA) {
            return 6;
          }
          unsigned int v62 = (unsigned __int16)v65;
          uint64_t v63 = DWORD1(v65);
          *(_DWORD *)(a2 + 4) = DWORD1(v65);
          *(_DWORD *)(a2 + 8) = 0;
          *(_DWORD *)(a2 + 12) = 0;
          *(unsigned char *)(a2 + 18) = 0;
          *(unsigned char *)(a2 + 16) = 0;
          *(unsigned char *)(a2 + 17) = 0;
          *(unsigned char *)(a2 + 19) = 0;
          *(void *)(a2 + 24) = 0;
          if (v63 <= v62)
          {
            if (v63)
            {
              if ((DWORD2(v65) + v60) + 24 * (unint64_t)v63 > v59) {
                return 5;
              }
              int v64 = (char *)v52 + v60;
              *(void *)(a2 + 136) = &v64[DWORD2(v65)];
              if ((unint64_t)(HIDWORD(v65) + v60) + (v63 << 6) > v59) {
                return 5;
              }
              *(void *)(a2 + 144) = &v64[HIDWORD(v65)];
            }
            else
            {
              *(void *)(a2 + 136) = 0;
              *(void *)(a2 + 144) = 0;
            }
            *(void *)(a2 + 152) = 0;
            uint64_t result = 0;
            *(void *)(a2 + 160) = 0;
          }
          else
          {
            return 6;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CVHWAFeatureExtractionExtractKeyPoints_0(uint64_t a1)
{
  __int16 v15 = 0;
  int v14 = 0x10000;
  v2[0] = 0;
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_2194C53C8(a1, &v14, (uint64_t)v2);
  return v12;
}

uint64_t CVHWAFeatureExtractionExtractDescriptors_0(uint64_t a1)
{
  __int16 v15 = 0;
  int v14 = 0x1000000;
  v2[0] = 0;
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_2194C53C8(a1, &v14, (uint64_t)v2);
  return *((void *)&v12 + 1);
}

uint64_t CVHWAFeatureExtractionExtractNumberOfOctaves_0(uint64_t a1)
{
  __int16 v15 = 0;
  int v14 = 0;
  v2[0] = 0;
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_2194C53C8(a1, &v14, (uint64_t)v2);
  return v2[0];
}

uint64_t CVHWAFeatureExtractionExtractNumberOfKeypoints_0(uint64_t a1)
{
  __int16 v15 = 0;
  int v14 = 0;
  v2[0] = 0;
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_2194C53C8(a1, &v14, (uint64_t)v2);
  return v3;
}

uint64_t CVHWAFeatureExtractionExtractNumberOfPrunedKeypointsAtTopLevel_0(uint64_t a1)
{
  __int16 v15 = 0;
  int v14 = 0;
  v2[0] = 0;
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_2194C53C8(a1, &v14, (uint64_t)v2);
  return v4;
}

uint64_t CVHWAFeatureExtractionExtractInputImageWidth_0(uint64_t a1)
{
  __int16 v15 = 0;
  int v14 = 0;
  v2[0] = 0;
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_2194C53C8(a1, &v14, (uint64_t)v2);
  return DWORD2(v5);
}

uint64_t CVHWAFeatureExtractionExtractInputImageHeight_0(uint64_t a1)
{
  __int16 v15 = 0;
  int v14 = 0;
  v2[0] = 0;
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_2194C53C8(a1, &v14, (uint64_t)v2);
  return HIDWORD(v5);
}

uint64_t CVHWAFeatureExtractionExtractMatchedPairs_0(uint64_t a1)
{
  __int16 v15 = 1;
  int v14 = 0;
  v2[0] = 0;
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_2194C53C8(a1, &v14, (uint64_t)v2);
  return v13;
}

uint64_t CVHWAFeatureExtractionExtractNumberOfFeatureMatches_0(uint64_t a1)
{
  __int16 v15 = 0;
  int v14 = 0;
  v2[0] = 0;
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_2194C53C8(a1, &v14, (uint64_t)v2);
  return HIDWORD(v3);
}

uint64_t CVHWAFeatureExtractionExtractTids_0(uint64_t a1)
{
  __int16 v15 = 256;
  int v14 = 0;
  v2[0] = 0;
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_2194C53C8(a1, &v14, (uint64_t)v2);
  return *((void *)&v13 + 1);
}

uint64_t CVHWAFeatureExtractionExtractFeatureMatchingEnabled_0(uint64_t a1)
{
  __int16 v15 = 0;
  int v14 = 0;
  v2[0] = 0;
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_2194C53C8(a1, &v14, (uint64_t)v2);
  return BYTE6(v4);
}

uint64_t CVHWAFeatureExtractionExtractGaussianOutputEnabled_0(uint64_t a1)
{
  __int16 v15 = 0;
  int v14 = 0;
  v2[0] = 0;
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_2194C53C8(a1, &v14, (uint64_t)v2);
  return BYTE4(v4);
}

uint64_t CVHWAFeatureExtractionExtractFlowType_0(uint64_t a1)
{
  __int16 v15 = 0;
  int v14 = 0;
  v2[0] = 0;
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_2194C53C8(a1, &v14, (uint64_t)v2);
  return BYTE5(v4);
}

uint64_t CVHWAFeatureExtractionExtractLaccEnabled_0(uint64_t a1)
{
  __int16 v15 = 0;
  int v14 = 0;
  v2[0] = 0;
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_2194C53C8(a1, &v14, (uint64_t)v2);
  return HIBYTE(v4);
}

uint64_t CVHWAFeatureExtractionExtractFrameId_0(uint64_t a1)
{
  __int16 v15 = 0;
  int v14 = 0;
  v2[0] = 0;
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_2194C53C8(a1, &v14, (uint64_t)v2);
  return v5;
}

BOOL sub_2194C533C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 84);
  if (!*(unsigned char *)(a1 + 84)) {
    return 0;
  }
  if (v1 != 1)
  {
    if (v1 != 2) {
      return 1;
    }
    unsigned int v2 = *(_DWORD *)(a1 + 20);
    if (v2 >= 0xA0)
    {
      unsigned int v3 = *(unsigned char *)(a1 + 124) ? 4097 : 641;
      if (v2 < v3 && (*(_DWORD *)(a1 + 24) - 8193) >= 0xFFFFE09F) {
        return 1;
      }
    }
    return 0;
  }
  return (*(_DWORD *)(a1 + 20) - 1281) >= 0xFFFFFB1B
      && (*(_DWORD *)(a1 + 24) - 1025) >= 0xFFFFFC1B;
}

uint64_t sub_2194C53C8(uint64_t result, unsigned char *a2, uint64_t a3)
{
  if (result)
  {
    long long v5 = (__CVBuffer *)result;
    *(_WORD *)a3 = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
    *(_OWORD *)(a3 + 120) = 0u;
    *(_OWORD *)(a3 + 136) = 0u;
    uint64_t result = (uint64_t)CVPixelBufferGetBaseAddress((CVPixelBufferRef)result);
    if (result)
    {
      long long v6 = (_DWORD *)result;
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v5);
      size_t Height = CVPixelBufferGetHeight(v5);
      if (v6[2] < 2u) {
        return 0;
      }
      size_t v9 = Height;
      uint64_t result = 0;
      unint64_t v10 = v6[12];
      if (v10)
      {
        unint64_t v11 = v9 * BytesPerRow;
        if (v11 >= v10)
        {
          uint64_t result = 0;
          unint64_t v12 = v6[10];
          if (v12)
          {
            if (v11 >= v12)
            {
              long long v13 = (char *)v6 + v10;
              long long v37 = 0u;
              *(_OWORD *)&v35[12] = 0u;
              *(_OWORD *)long long vars0 = 0u;
              unsigned int v14 = *(unsigned __int16 *)((char *)v6 + v10);
              v32[0] = *(_DWORD *)((char *)v6 + v10);
              uint64_t v15 = *(unsigned int *)((char *)v6 + v10 + 4);
              uint64_t v16 = *(unsigned int *)((char *)v6 + v10 + 8);
              v32[1] = *(_DWORD *)((char *)v6 + v10 + 4);
              v32[2] = v16;
              uint64_t v17 = *(unsigned int *)((char *)v6 + v10 + 12);
              int v18 = *(_DWORD *)((char *)v6 + v10 + 16);
              v32[3] = *(_DWORD *)((char *)v6 + v10 + 12);
              v32[4] = v18;
              unsigned int v19 = *(_DWORD *)((char *)v6 + v10 + 20);
              int v20 = *(_DWORD *)((char *)v6 + v10 + 24);
              v32[5] = v19;
              v32[6] = v20;
              long long v21 = *(_OWORD *)((char *)v6 + v10 + 28);
              uint64_t v34 = *(void *)((char *)v6 + v10 + 44);
              long long v33 = v21;
              *(void *)&v35[16] = *(void *)((char *)v6 + v10 + 68);
              *(_OWORD *)int64x2_t v35 = *(_OWORD *)((char *)v6 + v10 + 52);
              int v22 = *(_DWORD *)((char *)v6 + v10 + 80);
              *(_DWORD *)&v35[24] = *(_DWORD *)((char *)v6 + v10 + 76);
              *(_DWORD *)long long vars0 = v22;
              if (HIWORD(v32[0]) != 1)
              {
                if (HIWORD(v32[0])) {
                  return 0;
                }
                *(_WORD *)&vars0[4] = 257;
                goto LABEL_24;
              }
              *(_OWORD *)&vars0[4] = *(_OWORD *)(v13 + 84);
              long long v37 = *((_OWORD *)v13 + 7);
              int v23 = vars0[4];
              if (!vars0[4]) {
                return 0;
              }
              if (vars0[4] == 1)
              {
LABEL_24:
                uint64_t result = 0;
                if (v19 - 1281 < 0xFFFFFB1B || (v20 - 1025) < 0xFFFFFC1B) {
                  return result;
                }
                int v23 = 1;
                goto LABEL_27;
              }
              if (vars0[4] != 2)
              {
LABEL_27:
                *(_DWORD *)(a3 + 32) = v19;
                *(_DWORD *)(a3 + 36) = v20;
                *(_WORD *)a3 = v18;
                if ((unsigned __int16)v18 - 7 < 0xFFFFFFFA) {
                  return 0;
                }
                goto LABEL_28;
              }
              if (v19 < 0xA0) {
                return 0;
              }
              uint64_t result = 0;
              if (BYTE12(v37)) {
                unsigned int v24 = 4097;
              }
              else {
                unsigned int v24 = 641;
              }
              if (v19 < v24 && (v20 - 8193) >= 0xFFFFE09F)
              {
                int v23 = 2;
                *(_DWORD *)(a3 + 32) = v19;
                *(_DWORD *)(a3 + 36) = v20;
                *(_WORD *)a3 = v18;
                if ((unsigned __int16)v18 - 7 < 0xFFFFFFFA) {
                  return 0;
                }
LABEL_28:
                uint64_t v25 = *(unsigned int *)&vars0[8];
                *(_DWORD *)(a3 + 4) = v15;
                *(_DWORD *)(a3 + 8) = v25;
                *(_DWORD *)(a3 + 12) = v22;
                int v26 = vars0[6];
                *(unsigned char *)(a3 + 18) = vars0[6] != 0;
                *(unsigned char *)(a3 + 16) = vars0[5] != 0;
                *(unsigned char *)(a3 + 17) = v23;
                *(unsigned char *)(a3 + 19) = vars0[7] != 0;
                *(void *)(a3 + 24) = *(void *)((char *)&v37 + 4);
                if (v15 > v14) {
                  return 0;
                }
                if (v23 == 1) {
                  unsigned int v27 = v10;
                }
                else {
                  unsigned int v27 = v12;
                }
                if (a2[2])
                {
                  if (!v15)
                  {
                    int64x2_t v28 = 0;
                    *(void *)(a3 + 136) = 0;
                    if (!a2[3]) {
                      goto LABEL_44;
                    }
                    goto LABEL_43;
                  }
                  if (v27 + v16 + 24 * (unint64_t)v15 > v11) {
                    return 0;
                  }
                  *(void *)(a3 + 136) = (char *)v6 + v27 + v16;
                }
                if (!a2[3])
                {
LABEL_44:
                  if (!*a2 || (uint64_t result = sub_2194C585C(v5, v12, (uint64_t)v32, (unsigned __int16 *)a3), result))
                  {
                    if (a2[4])
                    {
                      int64x2_t v29 = 0;
                      if (v26 && *(_DWORD *)(a3 + 8))
                      {
                        if (v10 + 8 * v25 + *(unsigned int *)&vars0[12] > v11) {
                          return 0;
                        }
                        int64x2_t v29 = &v13[*(unsigned int *)&vars0[12]];
                      }
                      *(void *)(a3 + 152) = v29;
                    }
                    if (a2[5])
                    {
                      if (v26 && (uint64_t v30 = *(unsigned int *)(a3 + 4), v30))
                      {
                        if (v10 + 4 * v30 > v11) {
                          return 0;
                        }
                        long long v31 = (char *)v6 + v10;
                      }
                      else
                      {
                        long long v31 = 0;
                      }
                      *(void *)(a3 + 160) = v31;
                    }
                    return 1;
                  }
                  return result;
                }
                if (v15)
                {
                  if ((unint64_t)(v27 + v17) + (v15 << 6) > v11) {
                    return 0;
                  }
                  int64x2_t v28 = (char *)v6 + v27 + v17;
                }
                else
                {
                  int64x2_t v28 = 0;
                }
LABEL_43:
                *(void *)(a3 + 144) = v28;
                goto LABEL_44;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 sub_2194C579C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 544) = 0u;
  *(_OWORD *)(a2 + 560) = 0u;
  *(_OWORD *)(a2 + 512) = 0u;
  *(_OWORD *)(a2 + 528) = 0u;
  *(_OWORD *)(a2 + 480) = 0u;
  *(_OWORD *)(a2 + 496) = 0u;
  *(_OWORD *)(a2 + 448) = 0u;
  *(_OWORD *)(a2 + 464) = 0u;
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_WORD *)a2 = *(_WORD *)a1;
  int v2 = *(unsigned __int16 *)(a1 + 2);
  *(_WORD *)(a2 + 2) = v2;
  *(_OWORD *)(a2 + 4) = *(_OWORD *)(a1 + 4);
  *(void *)(a2 + 20) = *(void *)(a1 + 20);
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(a1 + 28);
  *(void *)(a2 + 44) = *(void *)(a1 + 44);
  *(_OWORD *)(a2 + 52) = *(_OWORD *)(a1 + 52);
  *(void *)(a2 + 68) = *(void *)(a1 + 68);
  result.n128_u64[0] = *(void *)(a1 + 76);
  *(void *)(a2 + 76) = result.n128_u64[0];
  if (v2 == 1)
  {
    *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 84);
    *(_OWORD *)(a2 + 100) = *(_OWORD *)(a1 + 100);
    __n128 result = *(__n128 *)(a1 + 112);
    *(__n128 *)(a2 + 112) = result;
  }
  else if (!v2)
  {
    *(_WORD *)(a2 + 84) = 257;
  }
  return result;
}

uint64_t sub_2194C585C(__CVBuffer *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  uint64_t result = (uint64_t)CVPixelBufferGetBaseAddress(a1);
  if (result)
  {
    uint64_t v9 = result;
    size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
    size_t Height = CVPixelBufferGetHeight(a1);
    int v12 = *(unsigned __int8 *)(a3 + 84);
    if (*(unsigned char *)(a3 + 84))
    {
      unsigned int v25 = *((_DWORD *)a4 + 9);
      unsigned int v26 = *((_DWORD *)a4 + 8);
      if (v12 != 1)
      {
        if (v12 == 2)
        {
          unsigned int v13 = *(_DWORD *)(a3 + 20);
          if (v13 < 0xA0) {
            return 0;
          }
          unsigned int v14 = *(unsigned char *)(a3 + 124) ? 4097 : 641;
          if (v13 >= v14 || (*(_DWORD *)(a3 + 24) - 8193) < 0xFFFFE09F) {
            return 0;
          }
        }
LABEL_14:
        if (!*a4) {
          return 1;
        }
        unint64_t v15 = 0;
        uint64_t v27 = v9 + a2;
        size_t v28 = Height * BytesPerRow;
        uint64_t v16 = (unsigned int *)(a3 + 52);
        for (int i = (CVPixelBufferRef *)(a4 + 24); ; i += 2)
        {
          size_t v18 = v26 >> v15;
          size_t v19 = v25 >> v15;
          uint64_t v20 = *(v16 - 6);
          uint64_t v21 = ((v18 + 63) & 0xFFFFFFC0) * v19 + a2;
          if (v21 + v20 > v28) {
            break;
          }
          if (v21 + (unint64_t)*v16 > v28) {
            break;
          }
          if (CVPixelBufferCreateWithBytes(0, v26 >> v15, v25 >> v15, 0x4C303038u, (void *)(v27 + v20), (v18 + 63) & 0xFFFFFFC0, (CVPixelBufferReleaseBytesCallback)j__CVPixelBufferRelease, a1, 0, i - 1))
          {
            break;
          }
          if (!*(i - 1)) {
            break;
          }
          CVPixelBufferRetain(a1);
          if (CVPixelBufferCreateWithBytes(0, v18, v19, 0x4C303038u, (void *)(v27 + *v16), (v18 + 63) & 0xFFFFFFC0, (CVPixelBufferReleaseBytesCallback)j__CVPixelBufferRelease, a1, 0, i))
          {
            if (!*i) {
              break;
            }
          }
          CVPixelBufferRetain(a1);
          ++v15;
          ++v16;
          uint64_t result = 1;
          if (v15 >= *a4) {
            return result;
          }
        }
        if (*a4)
        {
          unint64_t v22 = 0;
          int v23 = (__CVBuffer **)(a4 + 24);
          do
          {
            CVPixelBufferRelease(*(v23 - 1));
            unsigned int v24 = *v23;
            v23 += 2;
            CVPixelBufferRelease(v24);
            ++v22;
          }
          while (v22 < *a4);
        }
        return 0;
      }
      if ((*(_DWORD *)(a3 + 20) - 1281) >= 0xFFFFFB1B
        && (*(_DWORD *)(a3 + 24) - 1025) >= 0xFFFFFC1B)
      {
        goto LABEL_14;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_2194C5AC8(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (*(unsigned char *)(result + 12))
  {
    int v3 = *(_DWORD *)(result + 8);
    if (v3 == 2)
    {
      if (!a2) {
        return result;
      }
      uint64_t v9 = *(void *)(result + 584);
      if (a2 >= 4)
      {
        uint64_t v10 = a2 & 0xFFFFFFFC;
        size_t v28 = (__int32 *)(v9 + 120);
        int32x2_t v29 = (int32x2_t)0x100000000;
        uint64_t v30 = (float *)(a3 + 16);
        uint64_t v31 = v10;
        do
        {
          v39.val[0] = (float32x2_t)vadd_s32(v29, (int32x2_t)0x200000002);
          v39.val[1].i32[0] = *v28;
          v39.val[1].i32[1] = v28[13];
          int v32 = *(v28 - 26);
          int v33 = *(v28 - 13);
          uint64_t v34 = v30 - 4;
          vst2_f32(v34, *(float32x2x2_t *)v29.i8);
          vst2_f32(v30, v39);
          int32x2_t v29 = vadd_s32(v29, (int32x2_t)0x400000004);
          v28 += 52;
          v30 += 8;
          v31 -= 4;
        }
        while (v31);
        if (v10 == a2) {
          return result;
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      int64x2_t v35 = (_DWORD *)(a3 + 8 * v10 + 4);
      uint64_t v36 = (int *)(v9 + 52 * v10 + 16);
      do
      {
        *(v35 - 1) = v10;
        int v37 = *v36;
        v36 += 13;
        *int64x2_t v35 = v37;
        v35 += 2;
        ++v10;
      }
      while (a2 != v10);
      return result;
    }
    if (v3 == 3 && a2 != 0)
    {
      uint64_t v5 = *(void *)(result + 584);
      if (a2 == 1)
      {
        uint64_t v6 = 0;
LABEL_25:
        unsigned int v25 = (_DWORD *)(a3 + 8 * v6 + 4);
        unsigned int v26 = (_DWORD *)(v5 + 52 * v6 + 36);
        uint64_t v27 = a2 - v6;
        do
        {
          *(v25 - 1) = *v26;
          *unsigned int v25 = *(v26 - 5);
          v25 += 2;
          v26 += 13;
          --v27;
        }
        while (v27);
        return result;
      }
      uint64_t v6 = a2 & 0xFFFFFFFE;
      unint64_t v22 = (__int32 *)(v5 + 68);
      uint64_t v23 = v6;
      unsigned int v24 = (float *)a3;
      do
      {
        v38.val[0].i32[0] = *(v22 - 8);
        v38.val[0].i32[1] = v22[5];
        v38.val[1].i32[0] = *(v22 - 13);
        v38.val[1].i32[1] = *v22;
        vst2_f32(v24, v38);
        v24 += 4;
        v22 += 26;
        v23 -= 2;
      }
      while (v23);
      if (v6 != a2) {
        goto LABEL_25;
      }
    }
  }
  else
  {
    if (!*(_DWORD *)(result + 8)) {
      sub_219509344();
    }
    if (a2)
    {
      uint64_t v7 = *(void *)(result + 488);
      if (a2 >= 8)
      {
        uint64_t v8 = a2 & 0xFFFFFFF8;
        unint64_t v11 = (_OWORD *)(a3 + 32);
        int v12 = (long long *)(v7 + 32);
        uint64_t v13 = v8;
        do
        {
          long long v15 = *(v12 - 2);
          long long v14 = *(v12 - 1);
          long long v17 = *v12;
          long long v16 = v12[1];
          v12 += 4;
          *(v11 - 2) = v15;
          *(v11 - 1) = v14;
          *unint64_t v11 = v17;
          v11[1] = v16;
          v11 += 4;
          v13 -= 8;
        }
        while (v13);
        if (v8 == a2) {
          return result;
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      size_t v18 = (void *)(a3 + 8 * v8);
      size_t v19 = (uint64_t *)(v7 + 8 * v8);
      uint64_t v20 = a2 - v8;
      do
      {
        uint64_t v21 = *v19++;
        *v18++ = v21;
        --v20;
      }
      while (v20);
    }
  }
  return result;
}

uint64_t sub_2194C5CBC(int64x2_t *a1, CVPixelBufferRef *a2)
{
  unint64_t v4 = a1[28].i64[0] - a1[27].i64[1];
  uint64_t v5 = a1[20].i64[0];
  int v6 = sub_2194DCCC8((uint64_t)a1);
  unint64_t v7 = (24 * (v4 >> 8) + ((v4 >> 2) & 0xFFFFFFC0) + 127) & 0xFFFFFFC0;
  uint64_t v8 = (8 * v6 + 576);
  int v9 = a1[14].u8[8];
  unint64_t v41 = v4 >> 8;
  CVPixelBufferRef pixelBufferOut = 0;
  if (v9) {
    int v10 = 4 * (v4 >> 8);
  }
  else {
    int v10 = 0;
  }
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (v10 + v8 + v7), 1uLL, 0x4C303038u, 0, &pixelBufferOut))
  {
    sub_2195093B4();
  }
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(pixelBufferOut);
  if (!BaseAddress) {
    sub_21950937C();
  }
  int v12 = BaseAddress;
  unsigned int v13 = (24 * (v4 >> 8) + 63) & 0xFFFFFFC0;
  BaseAddress[2] = 3;
  BaseAddress[10] = 64;
  BaseAddress[12] = v7;
  long long v14 = (char *)BaseAddress + v7;
  bzero((char *)BaseAddress + v7, 0x240uLL);
  *((_WORD *)v14 + 1) = 1;
  v14[84] = 2;
  *((_DWORD *)v14 + 29) = v5 & 0xFFFFFFF;
  *((_DWORD *)v14 + 30) = HIDWORD(v5);
  v14[124] = a1->i32[2] == 3;
  *(int32x2_t *)(v14 + 20) = vmovn_s64(a1[1]);
  *(_WORD *)long long v14 = a1[5].i64[0];
  *((_DWORD *)v14 + 22) = v6;
  int v15 = a1[14].u8[8];
  v14[86] = v15;
  *(void *)(v14 + 4) = v41;
  *((_DWORD *)v14 + 3) = v13;
  *((_DWORD *)v14 + 4) = 6;
  if (v41)
  {
    uint64_t v16 = a1[27].i64[1];
    uint64_t v17 = (v4 >> 8);
    size_t v18 = (float *)(v12 + 21);
    do
    {
      *(v18 - 5) = (float)*(unsigned int *)v16 * 0.015625;
      *(v18 - 4) = (float)*(unsigned int *)(v16 + 4) * 0.015625;
      float v19 = (float)*(unsigned int *)(v16 + 12) * 3.14159265 * 0.0078125;
      *(v18 - 3) = v19;
      float v20 = pow(1.41421356, (float)((float)*(unsigned int *)(v16 + 8) * 0.0625));
      *(v18 - 2) = v20;
      *size_t v18 = (float)*(unsigned int *)(v16 + 28);
      *((unsigned char *)v18 - 4) = *(unsigned char *)(v16 + 24) != 0;
      v16 += 256;
      v18 += 6;
      --v17;
    }
    while (v17);
    uint64_t v21 = 0;
    unint64_t v22 = (_OWORD *)((char *)v12 + v13 + 64);
    do
    {
      uint64_t v23 = (_OWORD *)(a1[27].i64[1] + v21);
      long long v24 = v23[8];
      long long v25 = v23[9];
      long long v26 = v23[11];
      v22[2] = v23[10];
      v22[3] = v26;
      *unint64_t v22 = v24;
      v22[1] = v25;
      v22 += 4;
      v21 += 256;
    }
    while ((unint64_t)(v4 >> 8) << 8 != v21);
    int v15 = v14[86];
    unint64_t v7 = (24 * (v4 >> 8) + ((v4 >> 2) & 0xFFFFFFC0) + 127) & 0xFFFFFFC0;
  }
  if (v15)
  {
    unsigned int v27 = *((_DWORD *)v14 + 22);
    if (v27)
    {
      *((_DWORD *)v14 + 23) = 576;
      sub_2194C5AC8((uint64_t)a1, v27, (uint64_t)(v14 + 576));
    }
    if (v41 && !a1->i8[12])
    {
      *((_DWORD *)v14 + 24) = v8;
      uint64_t v28 = a1[29].i64[0];
      unint64_t v29 = (v4 >> 8);
      if (v29 < 8 || (unint64_t)v12 + v7 + v8 - v28 < 0x20)
      {
        unint64_t v30 = 0;
LABEL_20:
        uint64_t v31 = (_DWORD *)((char *)&v12[v30] + v8 + v7);
        int v32 = (int *)(v28 + 4 * v30);
        unint64_t v33 = v29 - v30;
        do
        {
          int v34 = *v32++;
          *v31++ = v34;
          --v33;
        }
        while (v33);
        goto LABEL_22;
      }
      uint64_t v36 = (v4 >> 8) & 7;
      unint64_t v30 = v29 - v36;
      int v37 = (long long *)(v28 + 16);
      float32x2x2_t v38 = (_OWORD *)((char *)v12 + v7 + v8 + 16);
      unint64_t v39 = v29 - v36;
      do
      {
        long long v40 = *v37;
        *(v38 - 1) = *(v37 - 1);
        *float32x2x2_t v38 = v40;
        v37 += 2;
        v38 += 2;
        v39 -= 8;
      }
      while (v39);
      if (v36) {
        goto LABEL_20;
      }
    }
  }
LABEL_22:
  uint64_t result = CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  *a2 = pixelBufferOut;
  return result;
}

uint64_t sub_2194C6034()
{
  unint64_t v0 = MGGetProductType();
  int64x2_t v1 = vdupq_n_s64(v0);
  uint8x16_t v2 = (uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CAE0), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CAF0)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CB00), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CB10))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CB20), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CB30)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CB40), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CB50))));
  v2.i8[0] = vmaxvq_u8(v2);
  __int32 v3 = v2.i32[0];
  *(int16x4_t *)v2.i8 = vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CB60), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CB70)));
  v2.i16[0] = vmaxv_u16(*(uint16x4_t *)v2.i8);
  return (v3 | v2.i32[0]) & 1 | (v0 == 3599094683) | (v0 == 3863625342);
}

uint64_t sub_2194C612C()
{
  unint64_t v0 = MGGetProductType();
  int64x2_t v1 = vdupq_n_s64(v0);
  return vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CB80), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CB90)))) & 1 | (v0 == 3397214291) | (v0 == 3215673114);
}

uint64_t sub_2194C619C()
{
  unint64_t v0 = MGGetProductType();
  int64x2_t v1 = vdupq_n_s64(v0);
  return vmaxvq_u8((uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CBA0), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CBB0)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CBC0), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CBD0))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CBE0), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CBF0)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CC00), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CC10))))) & 1 | (v0 == 4242862982) | (v0 == 1878257790);
}

uint64_t sub_2194C6268()
{
  unint64_t v0 = MGGetProductType();
  int64x2_t v1 = vdupq_n_s64(v0);
  return vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CC20), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CC30)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CC40), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CC50))))) & 1 | (v0 == 2021146989);
}

uint64_t sub_2194C62E4()
{
  unint64_t v0 = MGGetProductType();
  int64x2_t v1 = vdupq_n_s64(v0);
  return vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CC60), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CC70)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CC80), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_21950CC90))))) & 1 | (v0 == 2089455188);
}

uint64_t sub_2194C6360()
{
  int64x2_t v0 = vdupq_n_s64(MGGetProductType());
  return vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v0, (int64x2_t)xmmword_21950CCA0), (int32x4_t)vceqq_s64(v0, (int64x2_t)xmmword_21950CCB0)))) & 1;
}

uint64_t sub_2194C63A8()
{
  int64x2_t v0 = vdupq_n_s64(MGGetProductType());
  return vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v0, (int64x2_t)xmmword_21950CCC0), (int32x4_t)vceqq_s64(v0, (int64x2_t)xmmword_21950CCD0)))) & 1;
}

uint64_t sub_2194C63F0()
{
  int64x2_t v0 = vdupq_n_s64(MGGetProductType());
  return vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v0, (int64x2_t)xmmword_21950CCE0), (int32x4_t)vceqq_s64(v0, (int64x2_t)xmmword_21950CCF0)))) & 1;
}

uint64_t sub_2194C6438()
{
  int64x2_t v0 = vdupq_n_s64(MGGetProductType());
  return vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v0, (int64x2_t)xmmword_21950CD00), (int32x4_t)vceqq_s64(v0, (int64x2_t)xmmword_21950CD10)))) & 1;
}

uint64_t CVHWAGetLaccMatchSupported_0()
{
  uint64_t v0 = MGGetProductType();
  if (v0 > 2940697644)
  {
    if (v0 == 2940697645 || v0 == 3825599860) {
      return 1;
    }
  }
  else if (v0 == 2688879999 || v0 == 2793418701)
  {
    return 1;
  }
  uint64_t v2 = MGGetProductType();
  if (v2 > 2941181570)
  {
    if (v2 == 2941181571 || v2 == 2959111092) {
      return 1;
    }
  }
  else if (v2 == 133314240 || v2 == 2566016329)
  {
    return 1;
  }
  uint64_t v3 = MGGetProductType();
  if (v3 <= 2619317133)
  {
    if (v3 != 555503454)
    {
      uint64_t v4 = 2487868872;
      goto LABEL_18;
    }
    return 1;
  }
  if (v3 == 2619317134) {
    return 1;
  }
  uint64_t v4 = 3241053352;
LABEL_18:
  if (v3 == v4) {
    return 1;
  }
  int64x2_t v5 = vdupq_n_s64(MGGetProductType());
  return vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v5, (int64x2_t)xmmword_21950CD00), (int32x4_t)vceqq_s64(v5, (int64x2_t)xmmword_21950CD10)))) & 1;
}

uint64_t sub_2194C65E4(uint64_t result, unsigned int *a2, signed int *a3, signed int a4, int a5)
{
  if ((int)result <= 0) {
    sub_219509504();
  }
  if ((a5 & a4) == 0xFFFFFFFF || !a4 && a5 == result)
  {
    signed int v5 = result / 5;
    *a2 = (result % 5) >> 1;
    *a3 = result / 5;
    a4 = *a2;
  }
  else
  {
    if (a5 > (int)result || a4 < 0 || (int v6 = a5 - a4, a5 <= a4)) {
      sub_219509494();
    }
    if (v6 >= 16) {
      int v7 = (v6 + 4) / 5;
    }
    else {
      int v7 = 4;
    }
    if (v7 >= (unsigned __int16)(result / 5)) {
      int v7 = (unsigned __int16)(result / 5);
    }
    *a3 = v7;
    *a2 = a4;
    signed int v5 = *a3;
    int v8 = 5 * *a3 + a4;
    if (v8 >= (int)result)
    {
      a4 = result - 5 * *a3;
      *a2 = a4;
      signed int v5 = *a3;
      int v8 = 5 * *a3 + a4;
    }
    if (v8 < a5) {
      sub_2195094CC();
    }
  }
  if (a4 < 0) {
    sub_21950945C();
  }
  if (5 * v5 + a4 > (int)result) {
    sub_2195093EC();
  }
  if (v5 <= 3) {
    sub_219509424();
  }
  return result;
}

uint64_t sub_2194C6708(int a1, int a2, int a3)
{
  float v5 = log2f(256.0 / (float)a1);
  float v6 = log2f((float)(a3 * a2));
  float v7 = log2f((float)a2) + -1.0;
  double v8 = fmin((double)(int)fmin(fmin((double)(int)(float)(v5 + -1.0), (double)(int)(float)(v6 + -1.0)), (double)((int)v7 - ((float)((float)(int)v7 - v7) == 0.0))), 4.0);
  if ((int)v8 >= 0) {
    return (1 << (int)v8);
  }
  else {
    return 0;
  }
}

uint64_t sub_2194C67D0(unsigned int a1, unsigned int a2, int a3, unint64_t a4)
{
  float v6 = (float)a4;
  int v7 = (int)fmaxf(log2f((float)a2 / (float)a4) + 1.0, 0.0);
  int v8 = (int)fmaxf(log2f((float)a1 / v6) + 1.0, 0.0);
  if (v8 >= v7) {
    int v8 = v7;
  }
  if (v8 <= a3) {
    uint64_t result = v8;
  }
  else {
    uint64_t result = a3;
  }
  if ((int)result > a3) {
    sub_21950953C();
  }
  return result;
}

uint64_t sub_2194C6864(uint64_t a1, void *a2, int a3, int a4)
{
  float v6 = a2;
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  uint64_t v8 = *a2;
  uint64_t v9 = -1030792151 * ((a2[1] - *a2) >> 3) - 1;
  int v10 = operator new(0x180uLL);
  _OWORD *v10 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  v10[6] = 0u;
  v10[7] = 0u;
  v10[8] = 0u;
  v10[9] = 0u;
  v10[10] = 0u;
  _OWORD v10[11] = 0u;
  v10[12] = 0u;
  v10[13] = 0u;
  v10[14] = 0u;
  v10[15] = 0u;
  v10[16] = 0u;
  v10[17] = 0u;
  v10[18] = 0u;
  v10[19] = 0u;
  v10[20] = 0u;
  v10[21] = 0u;
  v10[22] = 0u;
  v10[23] = 0u;
  if (v9)
  {
    int v79 = a4;
    unsigned int v80 = v7;
    uint64_t v11 = 0;
    unint64_t v81 = v6;
    uint64_t v82 = v9;
    while (1)
    {
      uint64_t v13 = *v6 + 200 * v11;
      if (*(_DWORD *)(v13 + 16) == 0x3FFF) {
        goto LABEL_5;
      }
      unsigned int v14 = (*(_DWORD *)(v13 + 12) >> 5) + 8 * *(unsigned __int8 *)(v13 + 24);
      int v15 = (char *)v10 + 24 * v14;
      uint64_t v16 = *(int64x2_t **)v15;
      uint64_t v17 = (uint64_t *)(v15 + 8);
      size_t v18 = (unint64_t *)*((void *)v15 + 1);
      unint64_t v19 = v11 >> 5;
      if (*(unint64_t **)v15 != v18) {
        break;
      }
LABEL_17:
      unint64_t v30 = (char *)v10 + 24 * v14;
      unint64_t v33 = *((void *)v30 + 2);
      uint64_t v31 = v30 + 16;
      unint64_t v32 = v33;
      if ((unint64_t)v18 >= v33)
      {
        long long v83 = (uint64_t *)(v15 + 8);
        int64_t v34 = (char *)v18 - (char *)v16;
        uint64_t v35 = ((char *)v18 - (char *)v16) >> 3;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61) {
          sub_219486AE4();
        }
        uint64_t v37 = v32 - (void)v16;
        if (v37 >> 2 > v36) {
          unint64_t v36 = v37 >> 2;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          if (v38 >> 61) {
            sub_219486AFC();
          }
          unint64_t v39 = v10;
          long long v40 = v31;
          unint64_t v41 = v15;
          unint64_t v42 = v38;
          int v43 = operator new(8 * v38);
          int v15 = v41;
          uint64_t v31 = v40;
          unint64_t v38 = v42;
          int v10 = v39;
          uint64_t v35 = ((char *)v18 - (char *)v16) >> 3;
          int64_t v34 = (char *)v18 - (char *)v16;
          uint64_t v44 = (unint64_t *)&v43[8 * v35];
          *uint64_t v44 = v19;
          uint64_t v12 = (uint64_t)(v44 + 1);
          if (v16 != (int64x2_t *)v18)
          {
LABEL_27:
            unint64_t v45 = (char *)(v18 - 1) - (char *)v16;
            if (v45 < 0x58)
            {
              float v6 = v81;
              uint64_t v9 = v82;
              goto LABEL_35;
            }
            float v6 = v81;
            uint64_t v9 = v82;
            if ((unint64_t)((char *)v18 - &v43[v34]) < 0x20) {
              goto LABEL_92;
            }
            uint64_t v46 = (v45 >> 3) + 1;
            uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
            int v48 = &v18[v47 / 0xFFFFFFFFFFFFFFF8];
            uint64_t v44 = (unint64_t *)((char *)v44 - v47);
            int v49 = &v43[8 * v35 - 16];
            std::locale v50 = v18 - 2;
            uint64_t v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v52 = *(_OWORD *)v50;
              *(v49 - 1) = *((_OWORD *)v50 - 1);
              *int v49 = v52;
              v49 -= 2;
              v50 -= 4;
              v51 -= 4;
            }
            while (v51);
            size_t v18 = v48;
            if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_92:
              do
              {
LABEL_35:
                unint64_t v53 = *--v18;
                *--uint64_t v44 = v53;
              }
              while (v18 != (unint64_t *)v16);
            }
LABEL_36:
            *(void *)int v15 = v44;
            uint64_t v17 = v83;
            uint64_t *v83 = v12;
            *uint64_t v31 = &v43[8 * v38];
            if (v16) {
              operator delete(v16);
            }
            goto LABEL_4;
          }
        }
        else
        {
          int v43 = 0;
          uint64_t v44 = (unint64_t *)(8 * v35);
          *(void *)(8 * v35) = v19;
          uint64_t v12 = 8 * v35 + 8;
          if (v16 != (int64x2_t *)v18) {
            goto LABEL_27;
          }
        }
        float v6 = v81;
        uint64_t v9 = v82;
        goto LABEL_36;
      }
      *size_t v18 = v19;
      uint64_t v12 = (uint64_t)(v18 + 1);
LABEL_4:
      *uint64_t v17 = v12;
LABEL_5:
      if (++v11 == v9)
      {
        uint64_t v8 = *v6;
        a4 = v79;
        unsigned int v7 = v80;
        goto LABEL_40;
      }
    }
    unint64_t v20 = (char *)v18 - (char *)v16 - 8;
    if (v20 >= 0x18)
    {
      uint64_t v23 = (v20 >> 3) + 1;
      unint64_t v22 = (unint64_t *)v16 + (v23 & 0x3FFFFFFFFFFFFFFCLL);
      int64x2_t v24 = vdupq_n_s64(v19);
      long long v25 = v16 + 1;
      int64x2_t v26 = 0uLL;
      uint64_t v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      int64x2_t v28 = 0uLL;
      do
      {
        int64x2_t v26 = vsubq_s64(v26, vceqq_s64(v25[-1], v24));
        int64x2_t v28 = vsubq_s64(v28, vceqq_s64(*v25, v24));
        v25 += 2;
        v27 -= 4;
      }
      while (v27);
      uint64_t v21 = vaddvq_s64(vaddq_s64(v28, v26));
      if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v21 = 0;
      unint64_t v22 = *(unint64_t **)v15;
    }
    do
    {
      uint64_t v29 = *v22++;
      if (v29 == v19) {
        ++v21;
      }
    }
    while (v22 != v18);
LABEL_16:
    if (v21) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_40:
  uint64_t v54 = 0;
  int v55 = 3 * (a4 + a3);
  if (v7 > (v55 ^ 0x7FFFFFFFu)) {
    unsigned int v7 = 1;
  }
  do
  {
    int v56 = (char *)v10 + 24 * v54;
    size_t v57 = *(void **)v56;
    unint64_t v58 = (void *)*((void *)v56 + 1);
    while (v57 != v58)
    {
      unint64_t v59 = (_DWORD *)(v8 + 128 + 6400 * (*v57 & 0x7FFFFFFLL));
      uint64_t v60 = 32;
      do
      {
        if (*((unsigned char *)v59 - 104)) {
          int v61 = a3;
        }
        else {
          int v61 = 0;
        }
        if (*(v59 - 28) == 0x3FFF) {
          break;
        }
        if (!*v59) {
          *unint64_t v59 = 3 * (*(v59 - 24) + v61) + v7;
        }
        v59 += 50;
        --v60;
      }
      while (v60);
      ++v57;
    }
    ++v54;
  }
  while (v54 != 16);
  unsigned int v62 = (void *)*((void *)v10 + 45);
  if (v62)
  {
    *((void *)v10 + 46) = v62;
    operator delete(v62);
  }
  uint64_t v63 = (void *)*((void *)v10 + 42);
  if (v63)
  {
    *((void *)v10 + 43) = v63;
    operator delete(v63);
  }
  int v64 = (void *)*((void *)v10 + 39);
  if (v64)
  {
    *((void *)v10 + 40) = v64;
    operator delete(v64);
  }
  long long v65 = (void *)*((void *)v10 + 36);
  if (v65)
  {
    *((void *)v10 + 37) = v65;
    operator delete(v65);
  }
  long long v66 = (void *)*((void *)v10 + 33);
  if (v66)
  {
    *((void *)v10 + 34) = v66;
    operator delete(v66);
  }
  long long v67 = (void *)*((void *)v10 + 30);
  if (v67)
  {
    *((void *)v10 + 31) = v67;
    operator delete(v67);
  }
  long long v68 = (void *)*((void *)v10 + 27);
  if (v68)
  {
    *((void *)v10 + 28) = v68;
    operator delete(v68);
  }
  int32x4_t v69 = (void *)*((void *)v10 + 24);
  if (v69)
  {
    *((void *)v10 + 25) = v69;
    operator delete(v69);
  }
  unint64_t v70 = (void *)*((void *)v10 + 21);
  if (v70)
  {
    *((void *)v10 + 22) = v70;
    operator delete(v70);
  }
  unsigned int v71 = (void *)*((void *)v10 + 18);
  if (v71)
  {
    *((void *)v10 + 19) = v71;
    operator delete(v71);
  }
  long long v72 = (void *)*((void *)v10 + 15);
  if (v72)
  {
    *((void *)v10 + 16) = v72;
    operator delete(v72);
  }
  uint64_t v73 = (void *)*((void *)v10 + 12);
  if (v73)
  {
    *((void *)v10 + 13) = v73;
    operator delete(v73);
  }
  unsigned int v74 = (void *)*((void *)v10 + 9);
  if (v74)
  {
    *((void *)v10 + 10) = v74;
    operator delete(v74);
  }
  float v75 = (void *)*((void *)v10 + 6);
  if (v75)
  {
    *((void *)v10 + 7) = v75;
    operator delete(v75);
  }
  unint64_t v76 = (void *)*((void *)v10 + 3);
  if (v76)
  {
    *((void *)v10 + 4) = v76;
    operator delete(v76);
  }
  int16x8_t v77 = *(void **)v10;
  if (*(void *)v10)
  {
    *((void *)v10 + 1) = v77;
    operator delete(v77);
  }
  operator delete(v10);
  return v7 + v55;
}

void sub_2194C6D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_2194C6D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_2194C6D9C()
{
}

int32x2_t sub_2194C6DB0(uint64_t a1, int a2, int a3, void *a4, _DWORD *a5, void *a6, void *a7)
{
  *(void *)(a1 + 432) = 0x400000004;
  *(_OWORD *)(a1 + 400) = xmmword_21950CD60;
  *(_OWORD *)(a1 + 416) = unk_21950CD70;
  *(void *)(a1 + 576) = 0x3C00000024;
  *(_OWORD *)(a1 + 544) = xmmword_21950CD88;
  *(_OWORD *)(a1 + 560) = unk_21950CD98;
  *(unsigned char *)(a1 + 1012) = 1;
  int v7 = a2 + 2;
  if (a2 >= -1) {
    int v7 = a2 + 1;
  }
  int v8 = v7 >> 1;
  int v9 = a3 + 2;
  if (a3 >= -1) {
    int v9 = a3 + 1;
  }
  int v10 = v9 >> 1;
  *(_DWORD *)(a1 + 164) = a3;
  *(_DWORD *)(a1 + 168) = v10;
  int v11 = v8 + 2;
  if (v8 >= -1) {
    int v11 = v8 + 1;
  }
  int v12 = v11 >> 1;
  *(_DWORD *)(a1 + 188) = v8;
  *(_DWORD *)(a1 + 192) = v12;
  int v13 = v10 + 2;
  if (v10 >= -1) {
    int v13 = v10 + 1;
  }
  int v14 = v13 >> 1;
  int v15 = v12 + 2;
  if (v12 >= -1) {
    int v15 = v12 + 1;
  }
  int v16 = v15 >> 1;
  int v17 = v14 + 2;
  if (v14 >= -1) {
    int v17 = v14 + 1;
  }
  int v18 = v17 >> 1;
  *(_DWORD *)(a1 + 172) = v14;
  *(_DWORD *)(a1 + 176) = v18;
  int v19 = v16 + 2;
  if (v16 >= -1) {
    int v19 = v16 + 1;
  }
  *(_DWORD *)(a1 + 196) = v16;
  *(_DWORD *)(a1 + 200) = v19 >> 1;
  int v20 = v18 + 2;
  if (v18 >= -1) {
    int v20 = v18 + 1;
  }
  *(_DWORD *)(a1 + 180) = v20 >> 1;
  *(_DWORD *)(a1 + 184) = a2;
  BOOL v22 = a2 < 321 || a3 < 321;
  *(unsigned char *)(a1 + 160) = v22;
  if (v22) {
    unsigned int v23 = 8;
  }
  else {
    unsigned int v23 = 10;
  }
  *(_DWORD *)(a1 + 204) = v23;
  *(_DWORD *)(a1 + 208) = v23 >> 1;
  int32x2_t result = vadd_s32(vdup_n_s32(v23), (int32x2_t)-2);
  *(int32x2_t *)(a1 + 212) = result;
  *(void *)a1 = *a4;
  int v25 = a5[1];
  *(_DWORD *)(a1 + 40) = *a5 / 5;
  *(_DWORD *)(a1 + 44) = v25;
  *(void *)(a1 + 80) = *a6;
  *(void *)(a1 + 120) = *a7;
  *(void *)(a1 + 8) = a4[1];
  int v26 = a5[3];
  *(_DWORD *)(a1 + 48) = a5[2] / 5;
  *(_DWORD *)(a1 + 52) = v26;
  *(void *)(a1 + 88) = a6[1];
  *(void *)(a1 + 128) = a7[1];
  *(void *)(a1 + 16) = a4[2];
  int v27 = a5[5];
  *(_DWORD *)(a1 + 56) = a5[4] / 5;
  *(_DWORD *)(a1 + 60) = v27;
  *(void *)(a1 + 96) = a6[2];
  *(void *)(a1 + 136) = a7[2];
  *(void *)(a1 + 24) = a4[3];
  int v28 = a5[7];
  *(_DWORD *)(a1 + 64) = a5[6] / 5;
  *(_DWORD *)(a1 + 68) = v28;
  *(void *)(a1 + 104) = a6[3];
  *(void *)(a1 + 144) = a7[3];
  *(void *)(a1 + 32) = a4[4];
  int v29 = a5[9];
  *(_DWORD *)(a1 + 72) = a5[8] / 5;
  *(_DWORD *)(a1 + 76) = v29;
  *(void *)(a1 + 112) = a6[4];
  *(void *)(a1 + 152) = a7[4];
  return result;
}

double sub_2194C6FD4(uint64_t a1)
{
  unint64_t v1 = 0;
  *(_DWORD *)(a1 + 124) = 1;
  *(_DWORD *)(a1 + 132) = 1;
  int32x2_t v2 = vdup_n_s32(0x989680u);
  *(int32x2_t *)(a1 + 992) = v2;
  *(_DWORD *)(a1 + 140) = 1;
  *(_DWORD *)(a1 + 148) = 1;
  *(int32x2_t *)(a1 + 1000) = v2;
  v3.i64[0] = -1;
  v3.i64[1] = -1;
  *(int32x4_t *)(a1 + 444) = v3;
  *(int32x4_t *)(a1 + 300) = v3;
  *(_DWORD *)(a1 + 156) = 1;
  *(_DWORD *)(a1 + 1008) = 10000000;
  *(_DWORD *)(a1 + 460) = -1;
  *(_DWORD *)(a1 + 316) = -1;
  v3.i64[0] = 0x100000001;
  v3.i64[1] = 0x100000001;
  int32x4_t v4 = vsubq_s32(v3, *(int32x4_t *)(a1 + 560));
  *(int32x4_t *)(a1 + 464) = vsubq_s32(v3, *(int32x4_t *)(a1 + 544));
  *(int32x4_t *)(a1 + 480) = v4;
  int32x4_t v5 = vsubq_s32(v3, *(int32x4_t *)(a1 + 400));
  int32x4_t v6 = vsubq_s32(v3, *(int32x4_t *)(a1 + 416));
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(int32x4_t *)(a1 + 320) = v5;
  *(int32x4_t *)(a1 + 336) = v6;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(int32x2_t *)(a1 + 496) = vsub_s32((int32x2_t)0x100000001, *(int32x2_t *)(a1 + 576));
  *(int32x2_t *)(a1 + 352) = vsub_s32((int32x2_t)0x100000001, *(int32x2_t *)(a1 + 432));
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  uint64_t v7 = 588;
  uint64_t v8 = 712;
  *(_DWORD *)(a1 + 440) = 0;
  do
  {
    unint64_t v9 = v1 >> 1;
    int v10 = (_DWORD *)(a1 + 8 * (v1 >> 1));
    uint64_t v11 = a1 + 4 * v1;
    *(_DWORD *)(v11 + 260) = v10[21];
    *(_DWORD *)(v11 + 220) = v10[31];
    int v12 = (_DWORD *)(a1 + v7);
    _DWORD *v12 = 0;
    int v13 = v10[1];
    v12[10] = v13;
    int v14 = v10[1] + v10[11] - 1;
    if (v14 >= *(_DWORD *)(a1 + 4 * (v1 >> 1) + 164) - 1) {
      int v14 = *(_DWORD *)(a1 + 4 * (v1 >> 1) + 164) - 1;
    }
    uint64_t v15 = a1 + v8;
    *(void *)uint64_t v15 = 0;
    v12[20] = v14;
    double result = (double)(v13 << v9);
    *(double *)(v15 + 80) = result;
    *(double *)(v15 + 160) = (double)(v14 << v9);
    v12[91] = 10000000;
    ++v1;
    v7 += 4;
    v8 += 8;
  }
  while (v1 != 10);
  return result;
}

void sub_2194C7124(_DWORD *a1)
{
  memset_pattern16(a1 + 126, &unk_21950CDB0, 0x28uLL);
  int v2 = a1[53];
  if (v2 >= 2)
  {
    int v3 = 0;
    for (uint64_t i = 1; i < v2; ++i)
    {
      int32x4_t v5 = (double *)&a1[2 * i];
      double v6 = v5[89];
      if (v6 <= v5[109])
      {
        int v7 = 1;
        double v8 = v6 - (double)(1 << (i >> 1));
        do
        {
          unsigned int v9 = v3 + v7;
          if (a1[54] >= v3 + v7) {
            int v10 = v3 + v7;
          }
          else {
            int v10 = a1[54];
          }
          double v11 = floor(v8 / (double)(1 << (v10 >> 1)) * 128.0 + 0.5) * 0.0078125;
          if (v9) {
            double v12 = 1.9375;
          }
          else {
            double v12 = 0.9375;
          }
          int v13 = vcvtmd_s64_f64(floor((v11- floor(floor(pow(1.41421356, v12) * 4096.0 + 0.5)* 0.000244140625* (double)(1 << ((v9 >> 1) - (v10 >> 1) + 1))* 128.0+ 0.5)* 0.0078125)* 64.0+ 0.5)* 0.015625);
          int v14 = &a1[v10];
          int v15 = v13 & ~(v13 >> 31);
          if (v15 >= v14[126]) {
            int v15 = v14[126];
          }
          v14[126] = v15;
          ++v7;
        }
        while (v7 != 8);
        int v2 = a1[53];
      }
      ++v3;
    }
  }
}

uint64_t sub_2194C72E4(_DWORD *a1)
{
  sub_2194C7124(a1);
  memset_pattern16(a1 + 90, &unk_21950CDB0, 0x28uLL);
  uint64_t v2 = a1[53];
  if ((int)v2 >= 2)
  {
    for (uint64_t i = 1; i != v2; a1[i + 90] = v13)
    {
      while (1)
      {
        int32x4_t v4 = &a1[i];
        int v5 = v4[147];
        if (v5 <= v4[167]) {
          break;
        }
        if (++i == v2) {
          goto LABEL_19;
        }
      }
      if (i)
      {
        if (v5 >= 1) {
          int v9 = v5 - 1;
        }
        else {
          int v9 = v4[147];
        }
        int v10 = v9 >> 1;
        int32x2_t v7 = vdup_n_s32(v5 - 1);
        if (v5 >= 0) {
          int v11 = v4[147];
        }
        else {
          int v11 = v5 + 1;
        }
        int v12 = (v11 >> 1) - 1;
        if (v5) {
          int v8 = v10;
        }
        else {
          int v8 = v12;
        }
      }
      else
      {
        v6.i32[0] = 2 * v5;
        v6.i32[1] = v4[147];
        int32x2_t v7 = vadd_s32(v6, (int32x2_t)-2);
        int v8 = v7.i32[1];
      }
      *(int32x2_t *)&a1[i + 89] = vmin_s32(vmax_s32(v7, 0), *(int32x2_t *)&a1[i + 89]);
      ++i;
      int v13 = v8 & ~(v8 >> 31);
      if (v13 >= a1[i + 90]) {
        int v13 = a1[i + 90];
      }
    }
  }
LABEL_19:
  int v14 = a1[111] + 1;
  a1[111] = v14;
  uint64_t v15 = a1[52];
  if ((int)v15 > 1)
  {
    uint64_t v16 = v15 - 1;
    int v17 = a1 + 112;
    do
    {
      int v19 = v14 - 5;
      BOOL v18 = v14 < 5;
      int v20 = v14 - 4;
      if (!v18) {
        int v20 = v19;
      }
      int v14 = v20 >> 1;
      if (v14 < 0) {
        int v14 = -1;
      }
      *v17++ = v14;
      --v16;
    }
    while (v16);
  }
  if ((int)v15 >= 1)
  {
    if (v15 < 8)
    {
      uint64_t v21 = 0;
LABEL_32:
      uint64_t v26 = v15 - v21;
      int v27 = &a1[v21 + 111];
      do
      {
        *(v27 - 36) = (*v27 & ~(*v27 >> 31)) - 1;
        ++v27;
        --v26;
      }
      while (v26);
      goto LABEL_34;
    }
    uint64_t v21 = v15 & 0x7FFFFFF8;
    BOOL v22 = (int32x4_t *)(a1 + 75);
    v23.i64[0] = -1;
    v23.i64[1] = -1;
    uint64_t v24 = v15 & 0xFFFFFFF8;
    do
    {
      int32x4_t v25 = vaddq_s32(vmaxq_s32(v22[10], (int32x4_t)0), v23);
      *BOOL v22 = vaddq_s32(vmaxq_s32(v22[9], (int32x4_t)0), v23);
      v22[1] = v25;
      v22 += 2;
      v24 -= 8;
    }
    while (v24);
    if (v21 != v15) {
      goto LABEL_32;
    }
  }
LABEL_34:
  uint64_t v28 = a1[54];
  if ((int)v28 >= 1)
  {
    for (uint64_t j = 0; j != v28; ++j)
      a1[j + 117] = a1[((j + 1) >> 1) + 111] - a1[j + 137] + 1;
  }
  if ((v28 & 0x80000000) == 0)
  {
    uint64_t v30 = 0;
    uint64_t v31 = v28 + 1;
    do
    {
      a1[v30 + 80] = a1[(v30 >> 1) + 75] - a1[v30 + 100] + 1;
      ++v30;
    }
    while (v31 != v30);
  }
  return 1;
}

uint64_t sub_2194C7518(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 212);
  if ((int)v1 < 1)
  {
    char v3 = 0;
  }
  else
  {
    uint64_t v2 = 0;
    char v3 = 0;
    uint64_t v4 = 592;
    do
    {
      uint64_t v6 = v2 + 1;
      int v7 = *(_DWORD *)(a1 + v4);
      int v8 = *(_DWORD *)(a1 + v4 + 80);
      if (v7 <= v8)
      {
        if (v7 >= -1) {
          int v9 = v7 + 1;
        }
        else {
          int v9 = v7 + 2;
        }
        int v10 = v9 >> 1;
        if (v7 >= 0) {
          int v11 = *(_DWORD *)(a1 + v4);
        }
        else {
          int v11 = v7 + 1;
        }
        int v12 = v11 >> 1;
        if (v7) {
          int v13 = v10;
        }
        else {
          int v13 = v12 + 1;
        }
        int v14 = 2 * v7 + 2;
        int v15 = v7 + 1;
        if (v6)
        {
          int v14 = v7 + 1;
          int v16 = v13;
        }
        else
        {
          int v16 = v7 + 1;
        }
        uint64_t v17 = v2 >> 1;
        uint64_t v18 = v6 >> 1;
        if (*(unsigned char *)(a1 + 1012))
        {
          uint64_t v19 = a1 + 164;
          if (v14 >= *(_DWORD *)(a1 + 164 + 4 * v17) - 1) {
            int v14 = *(_DWORD *)(a1 + 164 + 4 * v17) - 1;
          }
          if (v15 >= *(_DWORD *)(v19 + 4 * v18) - 1) {
            int v15 = *(_DWORD *)(v19 + 4 * v18) - 1;
          }
          int v20 = *(_DWORD *)(v19 + 4 * ((v2 + 2) >> 1)) - 1;
          if (v16 >= v20) {
            int v16 = v20;
          }
        }
        if (*(_DWORD *)(a1 + 4 * v17 + 300) >= v14
          && *(_DWORD *)(a1 + 4 * v18 + 300) >= v15
          && *(_DWORD *)(a1 + 4 * ((v2 + 2) >> 1) + 300) >= v16)
        {
          int v5 = v7 + 1;
          *(_DWORD *)(a1 + v4) = v7 + 1;
          uint64_t v21 = a1 + 4 * v2;
          if (v7 + 1 == *(_DWORD *)(v21 + 224) + *(_DWORD *)(v21 + 264) || v7 >= v8)
          {
            if (v7 >= v8) {
              int v5 = 1000000;
            }
            *(_DWORD *)(v21 + 264) = v5;
          }
          char v3 = 1;
        }
      }
      v4 += 4;
      uint64_t v2 = v6;
    }
    while (v1 != v6);
  }
  return v3 & 1;
}

BOOL sub_2194C7668(uint64_t a1, int a2, double a3)
{
  if (a2 >= 0) {
    int v3 = a2;
  }
  else {
    int v3 = a2 + 1;
  }
  int v4 = v3 >> 1;
  int v5 = (int)a3 >> v4;
  if (v5 >= *(_DWORD *)(a1 + 4 * a2 + 588) || v5 >= *(_DWORD *)(a1 + 4 * a2 + 260)) {
    return 0;
  }
  int v8 = 0;
  double v9 = *(double *)(a1 + 8 * a2 + 712) + (double)(1 << v4);
  int v10 = *(_DWORD *)(a1 + 216);
  int v11 = *(unsigned __int8 *)(a1 + 1012);
  do
  {
    int v15 = a2 + v8;
    if (v10 >= a2 + v8) {
      int v16 = a2 + v8;
    }
    else {
      int v16 = v10;
    }
    double v17 = floor(v9 / (double)(1 << (v16 >> 1)) * 128.0 + 0.5) * 0.0078125;
    if (v15) {
      double v18 = 1.9375;
    }
    else {
      double v18 = 0.9375;
    }
    signed int v19 = vcvtpd_s64_f64(floor((v17+ floor(floor(pow(1.41421356, v18) * 4096.0 + 0.5)* 0.000244140625* (double)(1 << ((v15 >> 1) - (v16 >> 1) + 1))* 128.0+ 0.5)* 0.0078125)* 64.0+ 0.5)* 0.015625);
    uint64_t v20 = (uint64_t)v16 >> 1;
    if (v11 && *(_DWORD *)(a1 + 4 * v20 + 164) - 1 < v19) {
      signed int v19 = *(_DWORD *)(a1 + 4 * v20 + 164) - 1;
    }
    signed int v12 = *(_DWORD *)(a1 + 4 * v20 + 444);
    BOOL result = v12 >= v19;
  }
  while (v12 >= v19 && v8++ != 6);
  return result;
}

uint64_t sub_2194C782C(uint64_t a1, uint64_t **a2)
{
  if (*(int *)(a1 + 212) >= 1)
  {
    char v4 = 0;
    uint64_t v5 = 1;
    while (1)
    {
      uint64_t v10 = a1 + 8 * v5;
      double v11 = *(double *)(v10 + 712);
      if (v11 <= *(double *)(v10 + 872) && sub_2194C7668(a1, v5, *(double *)(v10 + 712))) {
        break;
      }
LABEL_6:
      if (v5++ >= *(int *)(a1 + 212)) {
        return v4 & 1;
      }
    }
    if (v11 < *(double *)(a1 + 8 * v5 + 792))
    {
LABEL_35:
      unsigned int v33 = v5 >> 1;
      double v34 = *(double *)(v10 + 712) + (double)(1 << (v5 >> 1));
      *(double *)(v10 + 712) = v34;
      uint64_t v35 = (_DWORD *)(a1 + 4 * v5);
      int v36 = v35[147];
      if (v36 <= v35[167])
      {
        int v37 = v36 + ~((int)v34 >> v33);
        if (v37 >= v35[238]) {
          int v37 = v35[238];
        }
        v35[238] = v37;
      }
      uint64_t v6 = a1 + 4 * (v5 & 0xFFFFFFFE);
      int v7 = *(_DWORD *)(v6 + 956);
      int v8 = *(_DWORD *)(v6 + 952);
      if (v7 < v8) {
        int v8 = v7;
      }
      *(_DWORD *)(a1 + 4 * v33 + 992) = v8;
      char v4 = 1;
      goto LABEL_6;
    }
    uint64_t v12 = (int)v11;
    int v14 = a2[1];
    unint64_t v13 = (unint64_t)a2[2];
    if ((unint64_t)v14 < v13)
    {
      uint64_t *v14 = v12 | (v5 << 32);
      uint64_t v15 = (uint64_t)(v14 + 1);
LABEL_34:
      a2[1] = (uint64_t *)v15;
      goto LABEL_35;
    }
    int v16 = *a2;
    uint64_t v17 = (char *)v14 - (char *)*a2;
    uint64_t v18 = v17 >> 3;
    unint64_t v19 = (v17 >> 3) + 1;
    if (v19 >> 61) {
      sub_219486AE4();
    }
    uint64_t v20 = v13 - (void)v16;
    if (v20 >> 2 > v19) {
      unint64_t v19 = v20 >> 2;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 >> 61) {
        sub_219486AFC();
      }
      BOOL v22 = operator new(8 * v21);
      int32x4_t v23 = (uint64_t *)&v22[8 * v18];
      *int32x4_t v23 = v12 | (v5 << 32);
      uint64_t v15 = (uint64_t)(v23 + 1);
      if (v14 != v16)
      {
LABEL_22:
        unint64_t v24 = (char *)(v14 - 1) - (char *)v16;
        if (v24 < 0x58) {
          goto LABEL_45;
        }
        if ((unint64_t)((char *)v14 - &v22[v17]) < 0x20) {
          goto LABEL_45;
        }
        uint64_t v25 = (v24 >> 3) + 1;
        uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        int v27 = &v14[v26 / 0xFFFFFFFFFFFFFFF8];
        int32x4_t v23 = (uint64_t *)((char *)v23 - v26);
        uint64_t v28 = &v22[8 * v18 - 16];
        int v29 = v14 - 2;
        uint64_t v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v31 = *(_OWORD *)v29;
          *(v28 - 1) = *((_OWORD *)v29 - 1);
          *uint64_t v28 = v31;
          v28 -= 2;
          v29 -= 4;
          v30 -= 4;
        }
        while (v30);
        int v14 = v27;
        if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_45:
          do
          {
            uint64_t v32 = *--v14;
            *--int32x4_t v23 = v32;
          }
          while (v14 != v16);
        }
        int v14 = *a2;
        *a2 = v23;
        a2[1] = (uint64_t *)v15;
        a2[2] = (uint64_t *)&v22[8 * v21];
        if (!v14) {
          goto LABEL_34;
        }
LABEL_33:
        operator delete(v14);
        goto LABEL_34;
      }
    }
    else
    {
      BOOL v22 = 0;
      int32x4_t v23 = (uint64_t *)(8 * v18);
      *(void *)(8 * v18) = v12 | (v5 << 32);
      uint64_t v15 = 8 * v18 + 8;
      if (v14 != v16) {
        goto LABEL_22;
      }
    }
    *a2 = v23;
    a2[1] = (uint64_t *)v15;
    a2[2] = (uint64_t *)&v22[8 * v21];
    if (!v14) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  char v4 = 0;
  return v4 & 1;
}

void sub_2194C7AD0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_2194C6FD4(a1);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  while (1)
  {
    unint64_t v4 = *(unsigned int *)(a1 + 212);
    if ((int)v4 < 1) {
      break;
    }
    if (*(double *)(a1 + 720) > *(double *)(a1 + 880))
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = v5;
        if ((v4 + 1) - 2 == v5) {
          break;
        }
        uint64_t v7 = a1 + 8 * v5;
        double v8 = *(double *)(v7 + 728);
        double v9 = *(double *)(v7 + 888);
        uint64_t v5 = v6 + 1;
      }
      while (v8 > v9);
      if (v6 + 1 >= v4) {
        break;
      }
    }
    sub_2194C72E4((_DWORD *)a1);
    sub_2194C7518(a1);
    sub_2194C782C(a1, (uint64_t **)a2);
  }
}

void sub_2194C7B7C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2194C7B98(uint64_t a1, long long *a2)
{
}

void sub_2194C7BCC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v133 = *MEMORY[0x263EF8340];
  if (!a7)
  {
    uint64_t v9 = *(void *)(a6 + 8) - *(void *)a6;
    if (v9 >= 1) {
      bzero(*(void **)a6, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
    }
    uint64_t v10 = *(void **)(a6 + 24);
    uint64_t v11 = *(void *)(a6 + 32) - (void)v10;
    if (v11 >= 1) {
      bzero(v10, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
    }
    uint64_t v12 = *(void **)(a6 + 48);
    uint64_t v13 = *(void *)(a6 + 56) - (void)v12;
    if (v13 >= 1) {
      bzero(v12, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
    }
    int v14 = *(void **)(a6 + 72);
    uint64_t v15 = *(void *)(a6 + 80) - (void)v14;
    if (v15 >= 1) {
      bzero(v14, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
    }
    int v16 = *(void **)(a6 + 96);
    uint64_t v17 = *(void *)(a6 + 104) - (void)v16;
    if (v17 >= 1) {
      bzero(v16, 4 * (((unint64_t)v17 >> 2) - ((unint64_t)v17 > 3)) + 4);
    }
    uint64_t v18 = *(void **)(a6 + 120);
    uint64_t v19 = *(void *)(a6 + 128) - (void)v18;
    if (v19 >= 1) {
      bzero(v18, 4 * (((unint64_t)v19 >> 2) - ((unint64_t)v19 > 3)) + 4);
    }
    uint64_t v20 = *(void **)(a6 + 144);
    uint64_t v21 = *(void *)(a6 + 152) - (void)v20;
    if (v21 >= 1) {
      bzero(v20, 4 * (((unint64_t)v21 >> 2) - ((unint64_t)v21 > 3)) + 4);
    }
    BOOL v22 = *(void **)(a6 + 168);
    uint64_t v23 = *(void *)(a6 + 176) - (void)v22;
    if (v23 >= 1) {
      bzero(v22, 4 * (((unint64_t)v23 >> 2) - ((unint64_t)v23 > 3)) + 4);
    }
  }
  int8x16_t v129 = 0;
  int8x16_t v130 = 0;
  uint64_t v131 = 0;
  uint64_t v24 = *(int *)(a1 + 16);
  if (v24 != 2) {
    sub_2194BC1C8((uint64_t)&v129, v24 - 2);
  }
  unint64_t v25 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 4);
  uint64_t v117 = a1;
  if ((int)v25 >= 3)
  {
    uint64_t v112 = (v25 - 1);
    uint64_t v26 = 1;
    uint64_t v115 = a4;
    while (1)
    {
      uint64_t v118 = v26 - 1;
      int v27 = (void *)(*a3 + 24 * (v26 - 1));
      uint64_t v28 = v27[1] - *v27;
      if (v28) {
        break;
      }
LABEL_22:
      if (++v26 == v112) {
        goto LABEL_60;
      }
    }
    uint64_t v29 = 0;
    unint64_t v30 = v28 / 20;
    uint16x8_t v116 = (void *)(a6 + 24 * v118);
    if (v30 <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = v30;
    }
    while (1)
    {
      uint64_t v39 = *v27 + 20 * v29;
      uint64_t v40 = *(unsigned int *)(v39 + 8);
      if (v26 != v40)
      {
        sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKPValidatorAndRefiner.cpp", 63, "scale == kp_scale && \"scale mismatch\"", (void (*)(void *))sub_2194FF9C0);
        abort();
      }
      int v41 = *(unsigned __int8 *)(v39 + 12);
      int v42 = *(_DWORD *)(v39 + 16);
      int v43 = (int)v40 >> 1;
      uint64_t v44 = (int *)(*v27 + 20 * v29);
      int v45 = *v44 >> v43;
      int v46 = v44[1] >> v43;
      if (!sub_2194DD394(a1, v45, v46, v26, *(unsigned char *)(v39 + 12) != 0, a2, v132)) {
        goto LABEL_29;
      }
      unint64_t v47 = v42 >= 0 ? v42 : -v42;
      if (*(void *)(a4 + 8 * v118) > v47) {
        goto LABEL_29;
      }
      sub_2194DD494(a1, v132, v45, v46, v26, v41 != 0, (uint64_t)&v121);
      if (!v48) {
        goto LABEL_29;
      }
      LODWORD(v49) = HIDWORD(v122) >> 5;
      if (HIDWORD(v122) >> 5 >= 0x3F) {
        uint64_t v49 = 63;
      }
      else {
        uint64_t v49 = v49;
      }
      unsigned int v50 = *(_DWORD *)(*v116 + 4 * v49);
      if (v50 <= 0xFFE) {
        *(_DWORD *)(*v116 + 4 * v49) = v50 + 1;
      }
      uint64_t v51 = (char **)&v129[24 * v118];
      long long v52 = v51 + 1;
      unint64_t v53 = v51[1];
      int v55 = v51 + 2;
      unint64_t v54 = (unint64_t)v51[2];
      if ((unint64_t)v53 < v54)
      {
        long long v32 = v121;
        long long v33 = v122;
        long long v34 = v124;
        *((_OWORD *)v53 + 2) = v123;
        *((_OWORD *)v53 + 3) = v34;
        *(_OWORD *)unint64_t v53 = v32;
        *((_OWORD *)v53 + 1) = v33;
        long long v35 = v125;
        long long v36 = v126;
        long long v37 = v128;
        *((_OWORD *)v53 + 6) = v127;
        *((_OWORD *)v53 + 7) = v37;
        *((_OWORD *)v53 + 4) = v35;
        *((_OWORD *)v53 + 5) = v36;
        unint64_t v38 = v53 + 128;
      }
      else
      {
        int v56 = *v51;
        uint64_t v57 = (v53 - *v51) >> 7;
        unint64_t v58 = v57 + 1;
        if ((unint64_t)(v57 + 1) >> 57) {
          sub_219486AE4();
        }
        uint64_t v59 = v54 - (void)v56;
        if (v59 >> 6 > v58) {
          unint64_t v58 = v59 >> 6;
        }
        if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFF80) {
          unint64_t v60 = 0x1FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v60 = v58;
        }
        if (v60)
        {
          long long v114 = (char **)&v129[24 * v118];
          if (v60 >> 57) {
            sub_219486AFC();
          }
          uint64_t v61 = v31;
          unsigned int v62 = v51 + 1;
          unint64_t v63 = v60;
          int v64 = (char *)operator new(v60 << 7);
          unint64_t v60 = v63;
          long long v52 = v62;
          uint64_t v31 = v61;
          uint64_t v51 = v114;
        }
        else
        {
          int v64 = 0;
        }
        long long v65 = v126;
        long long v66 = &v64[128 * v57];
        *((_OWORD *)v66 + 4) = v125;
        *((_OWORD *)v66 + 5) = v65;
        long long v67 = v128;
        *((_OWORD *)v66 + 6) = v127;
        *((_OWORD *)v66 + 7) = v67;
        long long v68 = v122;
        *(_OWORD *)long long v66 = v121;
        *((_OWORD *)v66 + 1) = v68;
        long long v69 = v124;
        *((_OWORD *)v66 + 2) = v123;
        *((_OWORD *)v66 + 3) = v69;
        unint64_t v70 = v66;
        if (v53 != v56)
        {
          a1 = v117;
          do
          {
            long long v71 = *((_OWORD *)v53 - 8);
            long long v72 = *((_OWORD *)v53 - 7);
            long long v73 = *((_OWORD *)v53 - 5);
            *((_OWORD *)v70 - 6) = *((_OWORD *)v53 - 6);
            *((_OWORD *)v70 - 5) = v73;
            *((_OWORD *)v70 - 8) = v71;
            *((_OWORD *)v70 - 7) = v72;
            long long v74 = *((_OWORD *)v53 - 4);
            long long v75 = *((_OWORD *)v53 - 3);
            long long v76 = *((_OWORD *)v53 - 1);
            *((_OWORD *)v70 - 2) = *((_OWORD *)v53 - 2);
            *((_OWORD *)v70 - 1) = v76;
            *((_OWORD *)v70 - 4) = v74;
            *((_OWORD *)v70 - 3) = v75;
            v70 -= 128;
            v53 -= 128;
          }
          while (v53 != v56);
          unint64_t v53 = *v51;
          *uint64_t v51 = v70;
          unint64_t v38 = v66 + 128;
          *long long v52 = v66 + 128;
          *int v55 = &v64[128 * v60];
          if (!v53) {
            goto LABEL_28;
          }
LABEL_59:
          operator delete(v53);
          goto LABEL_28;
        }
        a1 = v117;
        *uint64_t v51 = v66;
        unint64_t v38 = v66 + 128;
        *long long v52 = v66 + 128;
        *int v55 = &v64[128 * v60];
        if (v53) {
          goto LABEL_59;
        }
      }
LABEL_28:
      *long long v52 = v38;
      a4 = v115;
LABEL_29:
      if (++v29 == v31) {
        goto LABEL_22;
      }
    }
  }
LABEL_60:
  if (*(unsigned char *)(a1 + 160)) {
    sub_2194C8438(a1, (uint64_t *)&v129, a7);
  }
  int16x8_t v77 = *(uint64_t **)(a1 + 8);
  v77[17] = 0;
  v77[18] = 0;
  unint64_t v78 = v77[1];
  if (v78 <= 1) {
    unint64_t v78 = 1;
  }
  v77[19] = v78 - 1;
  int v79 = (void *)v77[20];
  uint64_t v80 = v77[21] - (void)v79;
  if (v80 >= 1) {
    bzero(v79, 8 * (((unint64_t)v80 >> 3) - ((unint64_t)v80 > 7)) + 8);
  }
  v77[23] = 0;
  v77[24] = 0;
  uint64_t v81 = *v77;
  if (*v77)
  {
    uint64_t v82 = v77[25];
    if (v81 == 1)
    {
      unint64_t v83 = 0;
LABEL_72:
      uint64_t v87 = v81 - v83;
      uint16x8_t v88 = (void *)(v82 + 24 * v83 + 8);
      do
      {
        void *v88 = *(v88 - 1);
        v88 += 3;
        --v87;
      }
      while (v87);
      goto LABEL_74;
    }
    unint64_t v83 = v81 & 0xFFFFFFFFFFFFFFFELL;
    unsigned int v84 = (uint64_t *)(v82 + 24);
    unint64_t v85 = v81 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v86 = *v84;
      *(v84 - 2) = *(v84 - 3);
      v84[1] = v86;
      v84 += 6;
      v85 -= 2;
    }
    while (v85);
    if (v81 != v83) {
      goto LABEL_72;
    }
  }
LABEL_74:
  int8x16_t v89 = (void *)v77[28];
  uint64_t v90 = v77[29] - (void)v89;
  if (v90 >= 1) {
    bzero(v89, 8 * (((unint64_t)v90 >> 3) - ((unint64_t)v90 > 7)) + 8);
  }
  uint64_t v92 = (uint64_t)v129;
  uint16x8_t v91 = v130;
  if (v130 == v129)
  {
    uint64_t v92 = (uint64_t)v130;
  }
  else
  {
    unint64_t v93 = 0;
    do
    {
      int v94 = (long long **)(v92 + 24 * v93);
      unint64_t v95 = *v94;
      unsigned long long v96 = v94[1];
      if (*v94 != v96)
      {
        uint64_t v97 = *(void *)(*(void *)(v117 + 8) + 224);
        unint64_t v98 = *(void *)(a5 + 8 * v93);
        if (*(void *)(v97 + 8 * v93) < v98)
        {
          do
          {
            if (*(void *)(v97 + 8 * v93) < v98)
            {
              unsigned long long v99 = *(void **)(v117 + 8);
              long long v100 = v95[3];
              long long v102 = *v95;
              long long v101 = v95[1];
              v120[2] = v95[2];
              v120[3] = v100;
              v120[0] = v102;
              v120[1] = v101;
              long long v103 = v95[7];
              long long v105 = v95[4];
              long long v104 = v95[5];
              v120[6] = v95[6];
              v120[7] = v103;
              v120[4] = v105;
              v120[5] = v104;
              sub_2194C9458(v99, v120, v93, *((unsigned int *)v95 + 10), 1);
            }
            v95 += 8;
          }
          while (v95 != v96);
          uint64_t v92 = (uint64_t)v129;
          uint16x8_t v91 = v130;
        }
      }
      ++v93;
    }
    while (v93 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v91[-v92] >> 3));
  }
  if (v92)
  {
    if (v91 != (char *)v92)
    {
      unint64_t v106 = v91;
      do
      {
        unsigned long long v108 = (void *)*((void *)v106 - 3);
        v106 -= 24;
        int8x16_t v107 = v108;
        if (v108)
        {
          *((void *)v91 - 2) = v107;
          operator delete(v107);
        }
        uint16x8_t v91 = v106;
      }
      while (v106 != (char *)v92);
      uint16x8_t v91 = v129;
    }
    int8x16_t v130 = (char *)v92;
    operator delete(v91);
  }
}

void sub_2194C8398(_Unwind_Exception *a1)
{
  sub_21948B590((void **)(v1 - 232));
  _Unwind_Resume(a1);
}

void sub_2194C83AC(_Unwind_Exception *a1)
{
  sub_21948B590((void **)(v1 - 232));
  _Unwind_Resume(a1);
}

void sub_2194C83C0(_Unwind_Exception *a1)
{
  sub_21948B590((void **)(v1 - 232));
  _Unwind_Resume(a1);
}

void sub_2194C83D4(_Unwind_Exception *a1)
{
  sub_21948B590((void **)(v1 - 232));
  _Unwind_Resume(a1);
}

void sub_2194C83E8(_Unwind_Exception *a1)
{
  sub_21948B590((void **)(v1 - 232));
  _Unwind_Resume(a1);
}

void sub_2194C83FC(_Unwind_Exception *a1)
{
  sub_21948B590((void **)(v1 - 232));
  _Unwind_Resume(a1);
}

void sub_2194C8410(_Unwind_Exception *a1)
{
  sub_21948B590((void **)(v1 - 232));
  _Unwind_Resume(a1);
}

void sub_2194C8424(_Unwind_Exception *a1)
{
  sub_21948B590((void **)(v1 - 232));
  _Unwind_Resume(a1);
}

void sub_2194C8438(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v259 = 0;
  int v260 = 0;
  uint64_t v261 = 0;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5 != *a2)
  {
    sub_2194C9B70((uint64_t)&v259, 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3));
    uint64_t v6 = *a2;
    uint64_t v5 = a2[1];
  }
  if (v5 != v6)
  {
    unint64_t v7 = 0;
    uint64_t v237 = a1 + 204;
    uint64_t v238 = a1 + 164;
    unsigned int v236 = a3;
    long long v242 = a2;
    do
    {
      unint64_t v241 = v7 + 1;
      uint64_t v12 = 8 * ((v7 + 1) >> 1);
      unint64_t v13 = *(unsigned int *)(v238 + v12 + 4);
      unint64_t v252 = *(unsigned int *)(v238 + v12);
      int v14 = *(_DWORD *)(v237 + v12);
      int v253 = *(_DWORD *)(v237 + v12 + 4);
      uint64_t v15 = (int *)(*(void *)(a1 + 264) + 40 * v236 + v12);
      unsigned int v245 = v15[1];
      int v246 = *v15;
      int v16 = *(_DWORD *)(a1 + 244 + 4 * ((v7 + 1) >> 1));
      long long v257 = 0uLL;
      int v258 = 0;
      std::string __p = 0;
      int v255 = 0;
      uint64_t v256 = 0;
      if (v13)
      {
        sub_2194C9D6C((uint64_t)&v257, v13);
        uint64_t v17 = __p;
        uint64_t v18 = v255;
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
      }
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - v17) >> 3);
      unint64_t v244 = v13;
      int v243 = v14;
      if (v13 <= v19)
      {
        if (v13 < v19)
        {
          unint64_t v20 = v7;
          unint64_t v13 = (unint64_t)&v17[24 * v13];
          if (v18 != (void **)v13)
          {
            uint64_t v21 = v18;
            do
            {
              uint64_t v24 = (char *)*(v21 - 3);
              v21 -= 3;
              uint64_t v23 = v24;
              if (v24)
              {
                unint64_t v25 = (char *)*(v18 - 2);
                BOOL v22 = v23;
                if (v25 != v23)
                {
                  uint64_t v26 = (char *)*(v18 - 2);
                  do
                  {
                    uint64_t v28 = (void *)*((void *)v26 - 3);
                    v26 -= 24;
                    int v27 = v28;
                    if (v28)
                    {
                      *((void *)v25 - 2) = v27;
                      operator delete(v27);
                    }
                    unint64_t v25 = v26;
                  }
                  while (v26 != v23);
                  BOOL v22 = *v21;
                }
                *(v18 - 2) = v23;
                operator delete(v22);
              }
              uint64_t v18 = v21;
            }
            while (v21 != (void **)v13);
          }
          int v255 = (void **)v13;
          unint64_t v7 = v20;
          LODWORD(v13) = v244;
          int v14 = v243;
        }
      }
      else
      {
        sub_2194C9D6C((uint64_t)&__p, v13 - v19);
      }
      unint64_t v240 = v7;
      unint64_t v29 = 1 << v16;
      if (v13)
      {
        uint64_t v30 = 0;
        uint64_t v249 = 1 << v16;
        uint64_t v250 = 4 * v29 - 4;
        do
        {
          uint64_t v31 = (char **)(v257 + 24 * v30);
          long long v32 = v31 + 1;
          long long v33 = v31[1];
          long long v34 = *v31;
          unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v33 - *v31) >> 3);
          unint64_t v36 = v252 - v35;
          uint64_t v251 = v30;
          if (v252 <= v35)
          {
            if (v252 < v35)
            {
              int v55 = &v34[24 * v252];
              if (v33 != v55)
              {
                int v56 = v31[1];
                do
                {
                  unint64_t v58 = (void *)*((void *)v56 - 3);
                  v56 -= 24;
                  uint64_t v57 = v58;
                  if (v58)
                  {
                    *((void *)v33 - 2) = v57;
                    operator delete(v57);
                  }
                  long long v33 = v56;
                }
                while (v56 != v55);
              }
              *long long v32 = v55;
            }
          }
          else
          {
            uint64_t v37 = v257 + 24 * v30;
            uint64_t v40 = *(void *)(v37 + 16);
            uint64_t v39 = (char **)(v37 + 16);
            uint64_t v38 = v40;
            if (0xAAAAAAAAAAAAAAABLL * ((v40 - (uint64_t)v33) >> 3) >= v36)
            {
              bzero(v33, 24 * ((24 * v36 - 24) / 0x18) + 24);
              *long long v32 = &v33[24 * ((24 * v36 - 24) / 0x18) + 24];
            }
            else
            {
              unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((v38 - (uint64_t)v34) >> 3);
              uint64_t v42 = 2 * v41;
              if (2 * v41 <= v252) {
                uint64_t v42 = v252;
              }
              if (v41 >= 0x555555555555555) {
                unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v43 = v42;
              }
              if (v43 > 0xAAAAAAAAAAAAAAALL) {
LABEL_225:
              }
                sub_219486AFC();
              uint64_t v44 = (char *)operator new(24 * v43);
              int v45 = &v44[24 * v35];
              int v46 = &v44[24 * v43];
              size_t v47 = 24 * ((24 * v36 - 24) / 0x18) + 24;
              bzero(v45, v47);
              int v48 = &v45[v47];
              if (v33 == v34)
              {
                *uint64_t v31 = v45;
                *long long v32 = v48;
                *uint64_t v39 = v46;
                uint64_t v30 = v251;
              }
              else
              {
                do
                {
                  uint64_t v49 = v45;
                  *((void *)v45 - 2) = 0;
                  *((void *)v45 - 1) = 0;
                  long long v50 = *(_OWORD *)(v33 - 24);
                  v33 -= 24;
                  *(_OWORD *)(v45 - 24) = v50;
                  v45 -= 24;
                  *((void *)v49 - 1) = *((void *)v33 + 2);
                  *(void *)long long v33 = 0;
                  *((void *)v33 + 1) = 0;
                  *((void *)v33 + 2) = 0;
                }
                while (v33 != v34);
                long long v33 = *v31;
                uint64_t v51 = *v32;
                *uint64_t v31 = v45;
                *long long v32 = v48;
                *uint64_t v39 = v46;
                uint64_t v30 = v251;
                if (v51 != v33)
                {
                  long long v52 = v51;
                  do
                  {
                    unint64_t v54 = (void *)*((void *)v52 - 3);
                    v52 -= 24;
                    unint64_t v53 = v54;
                    if (v54)
                    {
                      *((void *)v51 - 2) = v53;
                      operator delete(v53);
                    }
                    uint64_t v51 = v52;
                  }
                  while (v52 != v33);
                }
              }
              if (v33) {
                operator delete(v33);
              }
            }
          }
          uint64_t v59 = (char **)((char *)__p + 24 * v30);
          unint64_t v60 = v59 + 1;
          uint64_t v61 = v59[1];
          unsigned int v62 = *v59;
          unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((v61 - *v59) >> 3);
          unint64_t v64 = v252 - v63;
          if (v252 <= v63)
          {
            if (v252 < v63)
            {
              unint64_t v83 = &v62[24 * v252];
              if (v61 != v83)
              {
                unsigned int v84 = v59[1];
                do
                {
                  uint64_t v86 = (void *)*((void *)v84 - 3);
                  v84 -= 24;
                  unint64_t v85 = v86;
                  if (v86)
                  {
                    *((void *)v61 - 2) = v85;
                    operator delete(v85);
                  }
                  uint64_t v61 = v84;
                }
                while (v84 != v83);
              }
              *unint64_t v60 = v83;
            }
          }
          else
          {
            long long v65 = (char *)__p + 24 * v30;
            uint64_t v68 = *((void *)v65 + 2);
            long long v67 = (char **)(v65 + 16);
            uint64_t v66 = v68;
            if (0xAAAAAAAAAAAAAAABLL * ((v68 - (uint64_t)v61) >> 3) >= v64)
            {
              bzero(v61, 24 * ((24 * v64 - 24) / 0x18) + 24);
              *unint64_t v60 = &v61[24 * ((24 * v64 - 24) / 0x18) + 24];
            }
            else
            {
              unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * ((v66 - (uint64_t)v62) >> 3);
              uint64_t v70 = 2 * v69;
              if (2 * v69 <= v252) {
                uint64_t v70 = v252;
              }
              if (v69 >= 0x555555555555555) {
                unint64_t v71 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v71 = v70;
              }
              if (v71 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_225;
              }
              long long v72 = (char *)operator new(24 * v71);
              long long v73 = &v72[24 * v63];
              long long v74 = &v72[24 * v71];
              size_t v75 = 24 * ((24 * v64 - 24) / 0x18) + 24;
              bzero(v73, v75);
              long long v76 = &v73[v75];
              if (v61 == v62)
              {
                *uint64_t v59 = v73;
                *unint64_t v60 = v76;
                *long long v67 = v74;
                uint64_t v30 = v251;
              }
              else
              {
                uint64_t v30 = v251;
                do
                {
                  int16x8_t v77 = v73;
                  *((void *)v73 - 2) = 0;
                  *((void *)v73 - 1) = 0;
                  long long v78 = *(_OWORD *)(v61 - 24);
                  v61 -= 24;
                  *(_OWORD *)(v73 - 24) = v78;
                  v73 -= 24;
                  *((void *)v77 - 1) = *((void *)v61 + 2);
                  *(void *)uint64_t v61 = 0;
                  *((void *)v61 + 1) = 0;
                  *((void *)v61 + 2) = 0;
                }
                while (v61 != v62);
                uint64_t v61 = *v59;
                int v79 = *v60;
                *uint64_t v59 = v73;
                *unint64_t v60 = v76;
                *long long v67 = v74;
                if (v79 != v61)
                {
                  uint64_t v80 = v79;
                  do
                  {
                    uint64_t v82 = (void *)*((void *)v80 - 3);
                    v80 -= 24;
                    uint64_t v81 = v82;
                    if (v82)
                    {
                      *((void *)v79 - 2) = v81;
                      operator delete(v81);
                    }
                    int v79 = v80;
                  }
                  while (v80 != v61);
                }
              }
              if (v61) {
                operator delete(v61);
              }
            }
          }
          unint64_t v29 = v249;
          if (v252)
          {
            for (uint64_t i = 0; i != v252; ++i)
            {
              uint64_t v89 = *(void *)(v257 + 24 * v30);
              uint64_t v90 = (char **)(v89 + 24 * i);
              uint16x8_t v91 = v90 + 1;
              uint64_t v92 = v90[1];
              unint64_t v93 = *v90;
              uint64_t v94 = v92 - *v90;
              uint64_t v95 = v94 >> 2;
              unint64_t v96 = v29 - (v94 >> 2);
              if (v29 <= v94 >> 2)
              {
                if (v29 < v94 >> 2) {
                  *uint16x8_t v91 = &v93[4 * v29];
                }
              }
              else
              {
                uint64_t v97 = v89 + 24 * i;
                uint64_t v100 = *(void *)(v97 + 16);
                unsigned long long v99 = (void *)(v97 + 16);
                uint64_t v98 = v100;
                if (v96 <= (v100 - (uint64_t)v92) >> 2)
                {
                  uint64_t v115 = &v92[4 * v96];
                  memset(v92, 255, ((v250 - v94) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                  *uint16x8_t v91 = v115;
                  uint64_t v30 = v251;
                }
                else
                {
                  unint64_t v101 = v98 - (void)v93;
                  unint64_t v102 = (v98 - (uint64_t)v93) >> 1;
                  if (v102 <= v29) {
                    unint64_t v102 = v29;
                  }
                  if (v101 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v103 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v103 = v102;
                  }
                  if (v103 >> 62) {
                    sub_219486AFC();
                  }
                  long long v104 = operator new(4 * v103);
                  unint64_t v247 = v103;
                  long long v105 = &v104[4 * v95];
                  memset(v105, 255, ((v250 - v94) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                  if (v92 != v93)
                  {
                    unint64_t v106 = v92 - 4 - v93;
                    if (v106 < 0x2C) {
                      goto LABEL_230;
                    }
                    if ((unint64_t)(&v92[-v94] - v104) < 0x20) {
                      goto LABEL_230;
                    }
                    uint64_t v107 = (v106 >> 2) + 1;
                    uint64_t v108 = 4 * (v107 & 0x7FFFFFFFFFFFFFF8);
                    int v109 = &v92[-v108];
                    v105 -= v108;
                    int v110 = &v104[4 * v95 - 16];
                    unint64_t v111 = v92 - 16;
                    uint64_t v112 = v107 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v113 = *(_OWORD *)v111;
                      *(v110 - 1) = *((_OWORD *)v111 - 1);
                      *int v110 = v113;
                      v110 -= 2;
                      v111 -= 32;
                      v112 -= 8;
                    }
                    while (v112);
                    uint64_t v92 = v109;
                    if (v107 != (v107 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_230:
                      do
                      {
                        int v114 = *((_DWORD *)v92 - 1);
                        v92 -= 4;
                        *((_DWORD *)v105 - 1) = v114;
                        v105 -= 4;
                      }
                      while (v92 != v93);
                    }
                  }
                  char *v90 = v105;
                  unint64_t v29 = v249;
                  *uint16x8_t v91 = &v104[4 * v249];
                  void *v99 = &v104[4 * v247];
                  uint64_t v30 = v251;
                  if (v93) {
                    operator delete(v93);
                  }
                }
              }
              uint64_t v116 = *((void *)__p + 3 * v30);
              uint64_t v117 = (char **)(v116 + 24 * i);
              uint64_t v118 = v117 + 1;
              uint16x8_t v119 = v117[1];
              int8x16_t v120 = *v117;
              uint64_t v121 = v119 - *v117;
              uint64_t v122 = v121 >> 2;
              unint64_t v123 = v29 - (v121 >> 2);
              if (v29 <= v121 >> 2)
              {
                if (v29 < v121 >> 2) {
                  *uint64_t v118 = &v120[4 * v29];
                }
              }
              else
              {
                uint64_t v124 = v116 + 24 * i;
                uint64_t v127 = *(void *)(v124 + 16);
                long long v126 = (void *)(v124 + 16);
                uint64_t v125 = v127;
                if (v123 <= (v127 - (uint64_t)v119) >> 2)
                {
                  uint16x8_t v88 = &v119[4 * v123];
                  memset(v119, 255, ((v250 - v121) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                  *uint64_t v118 = v88;
                  uint64_t v30 = v251;
                }
                else
                {
                  unint64_t v128 = v125 - (void)v120;
                  unint64_t v129 = (v125 - (uint64_t)v120) >> 1;
                  if (v129 <= v29) {
                    unint64_t v129 = v29;
                  }
                  if (v128 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v130 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v130 = v129;
                  }
                  if (v130 >> 62) {
                    sub_219486AFC();
                  }
                  uint64_t v131 = operator new(4 * v130);
                  unint64_t v248 = v130;
                  unint64_t v132 = &v131[4 * v122];
                  memset(v132, 255, ((v250 - v121) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                  if (v119 != v120)
                  {
                    unint64_t v133 = v119 - 4 - v120;
                    if (v133 < 0x2C) {
                      goto LABEL_231;
                    }
                    if ((unint64_t)(v119 - &v131[v121]) < 0x20) {
                      goto LABEL_231;
                    }
                    uint64_t v134 = (v133 >> 2) + 1;
                    uint64_t v135 = 4 * (v134 & 0x7FFFFFFFFFFFFFF8);
                    int8x16_t v136 = &v119[-v135];
                    v132 -= v135;
                    unint64_t v137 = &v131[4 * v122 - 16];
                    unsigned int v138 = v119 - 16;
                    uint64_t v139 = v134 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v140 = *(_OWORD *)v138;
                      *(v137 - 1) = *((_OWORD *)v138 - 1);
                      *unint64_t v137 = v140;
                      v137 -= 2;
                      v138 -= 32;
                      v139 -= 8;
                    }
                    while (v139);
                    uint16x8_t v119 = v136;
                    if (v134 != (v134 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_231:
                      do
                      {
                        int v141 = *((_DWORD *)v119 - 1);
                        v119 -= 4;
                        *((_DWORD *)v132 - 1) = v141;
                        v132 -= 4;
                      }
                      while (v119 != v120);
                    }
                  }
                  *uint64_t v117 = v132;
                  unint64_t v29 = v249;
                  *uint64_t v118 = &v131[4 * v249];
                  *long long v126 = &v131[4 * v248];
                  uint64_t v30 = v251;
                  if (v120) {
                    operator delete(v120);
                  }
                }
              }
            }
          }
          ++v30;
          LODWORD(v13) = v244;
          int v14 = v243;
        }
        while (v30 != v244);
      }
      uint64_t v9 = v242;
      sub_2194C9710((uint64_t)&v259[3 * v240], (uint64_t)(*(void *)(*v242 + 24 * v240 + 8) - *(void *)(*v242 + 24 * v240)) >> 7, 0);
      int8x16_t v142 = (uint64_t *)(*v242 + 24 * v240);
      uint64_t v143 = *v142;
      if (v142[1] != *v142)
      {
        unint64_t v144 = 0;
        unint64_t v145 = (v29 - 1);
        if (v252) {
          BOOL v146 = v13 == 0;
        }
        else {
          BOOL v146 = 1;
        }
        char v147 = v146;
        uint64_t v148 = 4 * (v29 - 1);
        do
        {
          if (v147)
          {
LABEL_133:
            *(void *)(v259[3 * v240] + ((v144 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v144;
            uint64_t v149 = *v242;
            uint64_t v143 = *(void *)(*v242 + 24 * v240);
          }
          else
          {
            unsigned int v150 = 0;
            uint64_t v151 = v143 + (v144 << 7);
            unsigned int v152 = *(_DWORD *)(v151 + 36);
            unsigned int v153 = *(_DWORD *)(v151 + 40);
            while (1)
            {
              unsigned int v154 = v150 + 1;
              if (v152 >= v246 + v150 * v14 && v152 < v246 + (v150 + 1) * v14) {
                break;
              }
LABEL_137:
              ++v150;
              if (v154 >= v252) {
                goto LABEL_133;
              }
            }
            uint64_t v156 = 0;
            unsigned int v157 = 0;
            unsigned int v158 = v245;
            while (v153 < v158 || v153 >= v253 + v158)
            {
              ++v157;
              v156 += 24;
              v158 += v253;
              if (v157 >= v13) {
                goto LABEL_137;
              }
            }
            unint64_t v159 = 0;
            *(_DWORD *)(*(void *)(*v242 + 24 * v240) + (v144 << 7) + 44) = v150;
            *(_DWORD *)(*(void *)(*v242 + 24 * v240) + (v144 << 7) + 48) = v157;
            uint64_t v160 = *(void *)(*(void *)(v257 + v156) + 24 * v150);
            uint64_t v149 = *v242;
            uint64_t v143 = *(void *)(*v242 + 24 * v240);
            int v161 = *(_DWORD *)(v143 + (v144 << 7) + 28);
            while (v161 <= *(_DWORD *)(v160 + 4 * v159))
            {
              if (v29 == ++v159)
              {
                *(void *)(v259[3 * v240] + ((v144 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v144;
                goto LABEL_134;
              }
            }
            uint64_t v162 = *(void *)(*(void *)((char *)__p + v156) + 24 * v150);
            unsigned long long v163 = (_DWORD *)(v162 + 4 * v145);
            unint64_t v164 = *v163;
            if (v164 != -1) {
              *(void *)(v259[3 * v240] + ((v164 >> 3) & 0x1FFFFFF8)) |= 1 << v164;
            }
            if (v159 < v145)
            {
              unsigned int v165 = (_DWORD *)(v160 + v148);
              unint64_t v166 = (v29 - 1);
              int v167 = (_DWORD *)(v160 + v148);
              unsigned int v168 = (_DWORD *)(v162 + 4 * v145);
              do
              {
                --v166;
                int v169 = *--v167;
                *unsigned int v165 = v169;
                int v170 = *--v168;
                *unsigned long long v163 = v170;
                unsigned int v165 = v167;
                unsigned long long v163 = v168;
              }
              while (v166 > v159);
            }
            uint64_t v171 = 4 * v159;
            *(_DWORD *)(v160 + v171) = v161;
            *(_DWORD *)(v162 + v171) = v144;
          }
LABEL_134:
          ++v144;
        }
        while (v144 < (*(void *)(v149 + 24 * v240 + 8) - v143) >> 7);
      }
      int v172 = (void **)__p;
      if (__p)
      {
        unsigned int v173 = v255;
        unsigned int v174 = __p;
        if (v255 != __p)
        {
          int v175 = v255;
          do
          {
            unsigned int v178 = (char *)*(v175 - 3);
            v175 -= 3;
            unsigned int v177 = v178;
            if (v178)
            {
              double v179 = (char *)*(v173 - 2);
              unsigned int v176 = v177;
              if (v179 != v177)
              {
                uint32x4_t v180 = (char *)*(v173 - 2);
                do
                {
                  unsigned int v182 = (void *)*((void *)v180 - 3);
                  v180 -= 24;
                  unsigned int v181 = v182;
                  if (v182)
                  {
                    *((void *)v179 - 2) = v181;
                    operator delete(v181);
                  }
                  double v179 = v180;
                }
                while (v180 != v177);
                unsigned int v176 = *v175;
              }
              *(v173 - 2) = v177;
              operator delete(v176);
            }
            unsigned int v173 = v175;
          }
          while (v175 != v172);
          unsigned int v174 = __p;
          uint64_t v9 = v242;
        }
        int v255 = v172;
        operator delete(v174);
      }
      int8x16_t v183 = (void **)v257;
      if ((void)v257)
      {
        int32x4_t v184 = (void **)*((void *)&v257 + 1);
        double v8 = (void *)v257;
        if (*((void *)&v257 + 1) != (void)v257)
        {
          int8x16_t v185 = (void **)*((void *)&v257 + 1);
          do
          {
            unsigned int v188 = (char *)*(v185 - 3);
            v185 -= 3;
            unsigned int v187 = v188;
            if (v188)
            {
              unsigned int v189 = (char *)*(v184 - 2);
              int32x4_t v186 = v187;
              if (v189 != v187)
              {
                unsigned int v190 = (char *)*(v184 - 2);
                do
                {
                  int32x2_t v192 = (void *)*((void *)v190 - 3);
                  v190 -= 24;
                  int8x8_t v191 = v192;
                  if (v192)
                  {
                    *((void *)v189 - 2) = v191;
                    operator delete(v191);
                  }
                  unsigned int v189 = v190;
                }
                while (v190 != v187);
                int32x4_t v186 = *v185;
              }
              *(v184 - 2) = v187;
              operator delete(v186);
            }
            int32x4_t v184 = v185;
          }
          while (v185 != v183);
          double v8 = (void *)v257;
          uint64_t v9 = v242;
        }
        *((void *)&v257 + 1) = v183;
        operator delete(v8);
      }
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      unint64_t v7 = v241;
    }
    while (v241 < 0xAAAAAAAAAAAAAAABLL * ((v11 - *v9) >> 3));
    long long v257 = 0uLL;
    int v258 = 0;
    if (v11 != v10)
    {
      unint64_t v193 = 0;
      do
      {
        uint64_t v194 = *(void *)(v10 + 24 * v193);
        if (*(void *)(v10 + 24 * v193 + 8) == v194)
        {
          int8x16_t v195 = 0;
          unint64_t v225 = 0;
        }
        else
        {
          int8x16_t v195 = 0;
          int v196 = 0;
          unint64_t v197 = 0;
          do
          {
            if (((*(void *)(v259[3 * v193] + ((v197 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v197) & 1) == 0)
            {
              int v204 = (long long *)(v194 + (v197 << 7));
              if (v196 < v258)
              {
                long long v198 = *v204;
                long long v199 = v204[1];
                long long v200 = v204[3];
                v196[2] = v204[2];
                v196[3] = v200;
                *int v196 = v198;
                v196[1] = v199;
                long long v201 = v204[4];
                long long v202 = v204[5];
                long long v203 = v204[7];
                v196[6] = v204[6];
                v196[7] = v203;
                v196[4] = v201;
                v196[5] = v202;
                int8x16_t v195 = v196 + 8;
              }
              else
              {
                int v205 = (long long *)v257;
                uint64_t v206 = (uint64_t)((uint64_t)v196 - v257) >> 7;
                unint64_t v207 = v206 + 1;
                if ((unint64_t)(v206 + 1) >> 57) {
                  sub_219486AE4();
                }
                uint64_t v208 = (uint64_t)v258 - v257;
                if ((uint64_t)((uint64_t)v258 - v257) >> 6 > v207) {
                  unint64_t v207 = v208 >> 6;
                }
                if ((unint64_t)v208 >= 0x7FFFFFFFFFFFFF80) {
                  unint64_t v209 = 0x1FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v209 = v207;
                }
                if (v209)
                {
                  if (v209 >> 57) {
                    sub_219486AFC();
                  }
                  int v210 = (char *)operator new(v209 << 7);
                }
                else
                {
                  int v210 = 0;
                }
                unsigned int v211 = &v210[128 * v206];
                long long v212 = *v204;
                long long v213 = v204[1];
                long long v214 = v204[3];
                *((_OWORD *)v211 + 2) = v204[2];
                *((_OWORD *)v211 + 3) = v214;
                *(_OWORD *)unsigned int v211 = v212;
                *((_OWORD *)v211 + 1) = v213;
                long long v215 = v204[4];
                long long v216 = v204[5];
                long long v217 = v204[7];
                *((_OWORD *)v211 + 6) = v204[6];
                *((_OWORD *)v211 + 7) = v217;
                *((_OWORD *)v211 + 4) = v215;
                *((_OWORD *)v211 + 5) = v216;
                unsigned int v218 = v211;
                if (v196 != v205)
                {
                  do
                  {
                    long long v219 = *(v196 - 8);
                    long long v220 = *(v196 - 7);
                    long long v221 = *(v196 - 5);
                    *((_OWORD *)v218 - 6) = *(v196 - 6);
                    *((_OWORD *)v218 - 5) = v221;
                    *((_OWORD *)v218 - 8) = v219;
                    *((_OWORD *)v218 - 7) = v220;
                    long long v222 = *(v196 - 4);
                    long long v223 = *(v196 - 3);
                    long long v224 = *(v196 - 1);
                    *((_OWORD *)v218 - 2) = *(v196 - 2);
                    *((_OWORD *)v218 - 1) = v224;
                    *((_OWORD *)v218 - 4) = v222;
                    *((_OWORD *)v218 - 3) = v223;
                    v218 -= 128;
                    v196 -= 8;
                  }
                  while (v196 != v205);
                  int v196 = v205;
                }
                int8x16_t v195 = (long long *)(v211 + 128);
                *(void *)&long long v257 = v218;
                *((void *)&v257 + 1) = v211 + 128;
                int v258 = (long long *)&v210[128 * v209];
                if (v196) {
                  operator delete(v196);
                }
              }
              *((void *)&v257 + 1) = v195;
              uint64_t v10 = *v242;
              int v196 = v195;
            }
            ++v197;
            uint64_t v194 = *(void *)(v10 + 24 * v193);
          }
          while (v197 < (*(void *)(v10 + 24 * v193 + 8) - v194) >> 7);
          unint64_t v225 = v257;
        }
        unint64_t v226 = 126 - 2 * __clz((uint64_t)((uint64_t)v195 - v225) >> 7);
        std::string __p = sub_2194C997C;
        if (v195 == (long long *)v225) {
          uint64_t v227 = 0;
        }
        else {
          uint64_t v227 = v226;
        }
        sub_2194CA0C0(v225, v195, (unsigned int (**)(long long *, long long *))&__p, v227, 1);
        uint64_t v228 = *v242;
        uint64_t v229 = *v242 + 24 * v193;
        unsigned int v230 = *(void **)v229;
        if (*(void *)v229)
        {
          *(void *)(v228 + 24 * v193 + 8) = v230;
          operator delete(v230);
          *(void *)uint64_t v229 = 0;
          *(void *)(v229 + 8) = 0;
          *(void *)(v229 + 16) = 0;
        }
        *(_OWORD *)uint64_t v229 = v257;
        *(void *)(v228 + 24 * v193 + 16) = v258;
        long long v257 = 0uLL;
        int v258 = 0;
        ++v193;
        uint64_t v10 = *v242;
      }
      while (v193 < 0xAAAAAAAAAAAAAAABLL * ((v242[1] - *v242) >> 3));
    }
  }
  int v231 = v259;
  if (v259)
  {
    unint64_t v232 = v260;
    uint64_t v233 = v259;
    if (v260 != v259)
    {
      do
      {
        int8x16_t v235 = (void *)*(v232 - 3);
        v232 -= 3;
        long long v234 = v235;
        if (v235) {
          operator delete(v234);
        }
      }
      while (v232 != v231);
      uint64_t v233 = v259;
    }
    int v260 = v231;
    operator delete(v233);
  }
}

void sub_2194C93C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v28 = *(void *)(v26 - 112);
  if (v28) {
    sub_219509610(v26 - 104, v28);
  }
  _Unwind_Resume(exception_object);
}

void sub_2194C9458(void *a1, _OWORD *a2, unint64_t a3, unint64_t a4, int a5)
{
  if (a1[24] >= a3)
  {
    unint64_t v12 = a1[23];
    if (v12 >= a4) {
      goto LABEL_5;
    }
LABEL_8:
    uint64_t v13 = a1[17];
    uint64_t v14 = a1[18];
    uint64_t v16 = a1[19];
    uint64_t v15 = a1[20];
    a1[23] = v12 + 1;
    a1[18] = v14 + v13;
    a1[19] = v16 + 1;
    *(void *)(v15 + 8 * v16) = v13;
    uint64_t v17 = a1[18];
    for (uint64_t i = a1[19] % a1[a3 + 1]; ; uint64_t i = a1[19] % a1[a3 + 1])
    {
      a1[19] = i;
      a1[17] = 0;
      unint64_t v19 = v17 - *(void *)(v15 + 8 * i);
      a1[18] = v19;
      unint64_t v20 = a1[23];
      if (v20 >= a4) {
        break;
      }
      a1[23] = v20 + 1;
      a1[18] = v19;
      a1[19] = i + 1;
      *(void *)(v15 + 8 * i) = 0;
      uint64_t v17 = a1[18];
    }
    if (v19 >= a1[a3 + 9]) {
      return;
    }
    goto LABEL_12;
  }
  a1[24] = a3;
  uint64_t v10 = (void *)a1[20];
  uint64_t v11 = a1[21] - (void)v10;
  if (v11 >= 1) {
    bzero(v10, 8 * (((unint64_t)v11 >> 3) - ((unint64_t)v11 > 7)) + 8);
  }
  unint64_t v12 = 0;
  a1[23] = 0;
  a1[18] = 0;
  a1[19] = 0;
  a1[17] = 0;
  if (a4) {
    goto LABEL_8;
  }
LABEL_5:
  if (a1[17] + a1[18] >= a1[a3 + 9]) {
    return;
  }
LABEL_12:
  if (a5)
  {
    uint64_t v21 = (char **)(a1[25] + 24 * a3);
    uint64_t v23 = v21 + 1;
    BOOL v22 = v21[1];
    unint64_t v24 = (unint64_t)v21[2];
    if ((unint64_t)v22 >= v24)
    {
      long long v32 = *v21;
      uint64_t v33 = (v22 - *v21) >> 7;
      unint64_t v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 57) {
        sub_219486AE4();
      }
      uint64_t v35 = v24 - (void)v32;
      if (v35 >> 6 > v34) {
        unint64_t v34 = v35 >> 6;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFF80) {
        unint64_t v36 = 0x1FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36)
      {
        if (v36 >> 57) {
          sub_219486AFC();
        }
        uint64_t v37 = (char *)operator new(v36 << 7);
      }
      else
      {
        uint64_t v37 = 0;
      }
      long long v38 = a2[5];
      uint64_t v39 = &v37[128 * v33];
      *((_OWORD *)v39 + 4) = a2[4];
      *((_OWORD *)v39 + 5) = v38;
      long long v40 = a2[7];
      *((_OWORD *)v39 + 6) = a2[6];
      *((_OWORD *)v39 + 7) = v40;
      long long v41 = a2[1];
      *(_OWORD *)uint64_t v39 = *a2;
      *((_OWORD *)v39 + 1) = v41;
      long long v42 = a2[2];
      long long v43 = a2[3];
      uint64_t v31 = v39 + 128;
      *((_OWORD *)v39 + 2) = v42;
      *((_OWORD *)v39 + 3) = v43;
      if (v22 != v32)
      {
        do
        {
          long long v44 = *((_OWORD *)v22 - 8);
          long long v45 = *((_OWORD *)v22 - 7);
          long long v46 = *((_OWORD *)v22 - 5);
          *((_OWORD *)v39 - 6) = *((_OWORD *)v22 - 6);
          *((_OWORD *)v39 - 5) = v46;
          *((_OWORD *)v39 - 8) = v44;
          *((_OWORD *)v39 - 7) = v45;
          long long v47 = *((_OWORD *)v22 - 4);
          long long v48 = *((_OWORD *)v22 - 3);
          long long v49 = *((_OWORD *)v22 - 1);
          *((_OWORD *)v39 - 2) = *((_OWORD *)v22 - 2);
          *((_OWORD *)v39 - 1) = v49;
          *((_OWORD *)v39 - 4) = v47;
          *((_OWORD *)v39 - 3) = v48;
          v39 -= 128;
          v22 -= 128;
        }
        while (v22 != v32);
        BOOL v22 = *v21;
      }
      *uint64_t v21 = v39;
      *uint64_t v23 = v31;
      v21[2] = &v37[128 * v36];
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      long long v25 = *a2;
      long long v26 = a2[1];
      long long v27 = a2[3];
      *((_OWORD *)v22 + 2) = a2[2];
      *((_OWORD *)v22 + 3) = v27;
      *(_OWORD *)BOOL v22 = v25;
      *((_OWORD *)v22 + 1) = v26;
      long long v28 = a2[4];
      long long v29 = a2[5];
      long long v30 = a2[7];
      *((_OWORD *)v22 + 6) = a2[6];
      *((_OWORD *)v22 + 7) = v30;
      *((_OWORD *)v22 + 4) = v28;
      *((_OWORD *)v22 + 5) = v29;
      uint64_t v31 = v22 + 128;
    }
    *uint64_t v23 = v31;
  }
  ++a1[17];
  ++*(void *)(a1[28] + 8 * a3);
}

void sub_2194C9710(uint64_t a1, unint64_t a2, size_t __len)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(void *)(a1 + 8) = a2;
    return;
  }
  int v6 = __len;
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = v7 << 6;
  if (v7 << 6 < v5 || v4 > (v7 << 6) - v5)
  {
    std::__fs::filesystem::path __dst = 0;
    long long v23 = 0uLL;
    if ((a2 & 0x8000000000000000) != 0) {
      sub_219486AE4();
    }
    unint64_t v10 = v7 << 7;
    if (v10 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
      unint64_t v10 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    }
    if (v8 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_2194C9FAC((uint64_t)&__dst, v11);
    unint64_t v12 = *(void **)a1;
    uint64_t v13 = *(void *)(a1 + 8);
    *(void *)&long long v23 = v13 + v5;
    uint64_t v15 = __dst;
    if (v13 < 1)
    {
      LODWORD(v16) = 0;
    }
    else
    {
      unint64_t v14 = (unint64_t)v13 >> 6;
      if ((unint64_t)v13 >= 0x40) {
        memmove(__dst, v12, 8 * v14);
      }
      v15 += v14;
      uint64_t v16 = v13 & 0x3F;
      if (v16) {
        *uint64_t v15 = *v15 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v16) | *((void *)v12 + v14) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v16);
      }
      unint64_t v12 = *(void **)a1;
    }
    *(void *)a1 = __dst;
    std::__fs::filesystem::path __dst = v12;
    long long v17 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v23;
    long long v23 = v17;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    uint64_t v15 = (void *)(*(void *)a1 + 8 * (v4 >> 6));
    uint64_t v16 = *(void *)(a1 + 8) & 0x3FLL;
    *(void *)(a1 + 8) = a2;
  }
  if (v5)
  {
    if (v6)
    {
      if (v16)
      {
        if ((64 - v16) >= v5) {
          unint64_t v18 = v5;
        }
        else {
          unint64_t v18 = (64 - v16);
        }
        *v15++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v16 - v18)) & (-1 << v16);
        v5 -= v18;
      }
      uint64_t v19 = v5 >> 6;
      if (v5 >= 0x40) {
        memset(v15, 255, 8 * (v5 >> 6));
      }
      if ((v5 & 0x3F) != 0)
      {
        unint64_t v20 = v15[v19] | (0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
LABEL_43:
        v15[v19] = v20;
      }
    }
    else
    {
      if (v16)
      {
        if ((64 - v16) >= v5) {
          unint64_t v21 = v5;
        }
        else {
          unint64_t v21 = (64 - v16);
        }
        *v15++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v16 - v21)) & (-1 << v16));
        v5 -= v21;
      }
      uint64_t v19 = v5 >> 6;
      if (v5 >= 0x40) {
        bzero(v15, 8 * (v5 >> 6));
      }
      if ((v5 & 0x3F) != 0)
      {
        unint64_t v20 = v15[v19] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
        goto LABEL_43;
      }
    }
  }
}

void sub_2194C9964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2194C997C(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2 = a1[10];
  unsigned int v3 = a2[10];
  BOOL v4 = v2 >= v3;
  if (v2 == v3)
  {
    if (a1[11] == a2[11])
    {
      unsigned int v5 = a1[7];
      unsigned int v6 = a2[7];
      if (v5 != v6) {
        return v5 > v6;
      }
    }
    BOOL v4 = a1[9] >= a2[9];
  }
  return !v4;
}

void *sub_2194C99C8(void *a1)
{
  *a1 = &unk_26CAD6AE8;
  unsigned int v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)a1[1];
  a1[1] = 0;
  if (v3) {
    sub_2194C9AB0((uint64_t)(a1 + 1), v3);
  }
  return a1;
}

void sub_2194C9A2C(void *a1)
{
  *a1 = &unk_26CAD6AE8;
  unsigned int v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)a1[1];
  a1[1] = 0;
  if (v3) {
    sub_2194C9AB0((uint64_t)(a1 + 1), v3);
  }

  JUMPOUT(0x21D48B5B0);
}

void sub_2194C9AB0(uint64_t a1, void *a2)
{
  if (a2)
  {
    unsigned int v3 = (void *)a2[28];
    if (v3)
    {
      a2[29] = v3;
      operator delete(v3);
    }
    uint64_t v4 = a2[25];
    if (v4)
    {
      uint64_t v5 = a2[26];
      unsigned int v6 = (void *)a2[25];
      if (v5 != v4)
      {
        uint64_t v7 = a2[26];
        do
        {
          uint64_t v9 = *(void **)(v7 - 24);
          v7 -= 24;
          unint64_t v8 = v9;
          if (v9)
          {
            *(void *)(v5 - 16) = v8;
            operator delete(v8);
          }
          uint64_t v5 = v7;
        }
        while (v7 != v4);
        unsigned int v6 = (void *)a2[25];
      }
      a2[26] = v4;
      operator delete(v6);
    }
    unint64_t v10 = (void *)a2[20];
    if (v10)
    {
      a2[21] = v10;
      operator delete(v10);
    }
    JUMPOUT(0x21D48B5B0);
  }
}

void sub_2194C9B70(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      uint64_t v5 = (void *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    unsigned int v6 = *(void **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_219486AE4();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_219486AFC();
      }
      unint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    uint64_t v13 = &v11[24 * v7];
    unint64_t v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v5) {
        return;
      }
      goto LABEL_24;
    }
    do
    {
      uint64_t v17 = *(v5 - 3);
      v5 -= 3;
      *((void *)v13 - 3) = v17;
      v13 -= 24;
      *((void *)v13 + 1) = v5[1];
      *((void *)v13 + 2) = v5[2];
      void *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    while (v5 != v6);
    unint64_t v18 = *(void **)a1;
    uint64_t v5 = *(void **)(a1 + 8);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5 != v18)
    {
      do
      {
        unint64_t v20 = (void *)*(v5 - 3);
        v5 -= 3;
        uint64_t v19 = v20;
        if (v20) {
          operator delete(v19);
        }
      }
      while (v5 != v18);
      uint64_t v5 = v18;
    }
    if (v5)
    {
LABEL_24:
      operator delete(v5);
    }
  }
}

void sub_2194C9D6C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void ***)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      uint64_t v5 = (void **)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    unsigned int v6 = *(void ***)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_219486AE4();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_219486AFC();
      }
      unint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    uint64_t v13 = &v11[24 * v7];
    unint64_t v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v5) {
        return;
      }
      goto LABEL_30;
    }
    do
    {
      uint64_t v17 = v13;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      long long v18 = *(_OWORD *)(v5 - 3);
      v5 -= 3;
      *(_OWORD *)(v13 - 24) = v18;
      v13 -= 24;
      *((void *)v17 - 1) = v5[2];
      void *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    while (v5 != v6);
    uint64_t v19 = *(void ***)a1;
    uint64_t v5 = *(void ***)(a1 + 8);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5 != v19)
    {
      unint64_t v20 = v5;
      do
      {
        long long v23 = (char *)*(v20 - 3);
        v20 -= 3;
        BOOL v22 = v23;
        if (v23)
        {
          unint64_t v24 = (char *)*(v5 - 2);
          unint64_t v21 = v22;
          if (v24 != v22)
          {
            long long v25 = (char *)*(v5 - 2);
            do
            {
              long long v27 = (void *)*((void *)v25 - 3);
              v25 -= 24;
              long long v26 = v27;
              if (v27)
              {
                *((void *)v24 - 2) = v26;
                operator delete(v26);
              }
              unint64_t v24 = v25;
            }
            while (v25 != v22);
            unint64_t v21 = *v20;
          }
          *(v5 - 2) = v22;
          operator delete(v21);
        }
        uint64_t v5 = v20;
      }
      while (v20 != v19);
      uint64_t v5 = v19;
    }
    if (v5)
    {
LABEL_30:
      operator delete(v5);
    }
  }
}

void sub_2194C9FAC(uint64_t a1, unint64_t a2)
{
  if (a2 > *(void *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      sub_219486AE4();
    }
    unint64_t v3 = ((a2 - 1) >> 6) + 1;
    uint64_t v4 = (uint64_t *)operator new(8 * v3);
    uint64_t v5 = *(void **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    int v7 = v6 & 0x3F;
    unint64_t v8 = (v6 - 1) >> 6;
    if (v6 < 0x41) {
      unint64_t v8 = 0;
    }
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      int v9 = 0;
      int v10 = 0;
      unint64_t v11 = &v5[v6 >> 6];
      size_t v12 = v4;
      uint64_t v13 = v5;
      do
      {
        uint64_t v14 = 1 << v9;
        if ((*v13 >> v10)) {
          uint64_t v15 = *v12 | v14;
        }
        else {
          uint64_t v15 = *v12 & ~v14;
        }
        uint64_t *v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63) {
          int v10 = 0;
        }
        else {
          ++v10;
        }
        v12 += v9 == 63;
        if (v9 == 63) {
          int v9 = 0;
        }
        else {
          ++v9;
        }
      }
      while (v10 != v7 || v13 != v11);
    }
    *(void *)a1 = v4;
    *(void *)(a1 + 16) = v3;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_2194CA0C0(unint64_t a1, long long *a2, unsigned int (**a3)(long long *, long long *), uint64_t a4, char a5)
{
  uint64_t v726 = *MEMORY[0x263EF8340];
LABEL_2:
  int v10 = a2 - 8;
  unint64_t v11 = a2 - 16;
  size_t v12 = a2 - 24;
  unint64_t n128_u64 = a1;
  float v707 = a2;
  while (1)
  {
    a1 = n128_u64;
    uint64_t v14 = (uint64_t)a2 - n128_u64;
    unint64_t v15 = (uint64_t)((uint64_t)a2 - n128_u64) >> 7;
    if (v6 || !v5) {
      break;
    }
    if (v14 <= 3071)
    {
      float v604 = (long long *)(n128_u64 + 128);
      BOOL v606 = (long long *)n128_u64 == a2 || v604 == a2;
      if (a5)
      {
        if (!v606)
        {
          uint64_t v607 = 0;
          float v608 = (long long *)n128_u64;
          do
          {
            float v616 = v608;
            float v608 = v604;
            if ((*a3)(v604, v616))
            {
              long long v617 = *v608;
              long long v618 = v608[1];
              long long v619 = v608[3];
              long long v720 = v608[2];
              long long v721 = v619;
              long long v718 = v617;
              long long v719 = v618;
              long long v620 = v608[4];
              long long v621 = v608[5];
              long long v622 = v608[7];
              long long v724 = v608[6];
              long long v725 = v622;
              long long v722 = v620;
              long long v723 = v621;
              uint64_t v623 = v607;
              do
              {
                float v624 = (_OWORD *)(n128_u64 + v623);
                long long v625 = *(_OWORD *)(n128_u64 + v623 + 80);
                v624[12] = *(_OWORD *)(n128_u64 + v623 + 64);
                v624[13] = v625;
                long long v626 = *(_OWORD *)(n128_u64 + v623 + 112);
                v624[14] = *(_OWORD *)(n128_u64 + v623 + 96);
                v624[15] = v626;
                long long v627 = *(_OWORD *)(n128_u64 + v623 + 16);
                v624[8] = *(_OWORD *)(n128_u64 + v623);
                v624[9] = v627;
                long long v628 = *(_OWORD *)(n128_u64 + v623 + 48);
                v624[10] = *(_OWORD *)(n128_u64 + v623 + 32);
                v624[11] = v628;
                if (!v623)
                {
                  float v609 = (_OWORD *)n128_u64;
                  goto LABEL_123;
                }
                v623 -= 128;
              }
              while ((((uint64_t (*)(long long *, unint64_t))*a3)(&v718, v623 + n128_u64) & 1) != 0);
              float v609 = (_OWORD *)(n128_u64 + v623 + 128);
LABEL_123:
              long long v610 = v718;
              long long v611 = v719;
              long long v612 = v721;
              v609[2] = v720;
              v609[3] = v612;
              _OWORD *v609 = v610;
              v609[1] = v611;
              long long v613 = v722;
              long long v614 = v723;
              long long v615 = v725;
              v609[6] = v724;
              v609[7] = v615;
              v609[4] = v613;
              v609[5] = v614;
            }
            float v604 = v608 + 8;
            v607 += 128;
          }
          while (v608 + 8 != a2);
        }
      }
      else if (!v606)
      {
        uint64_t v661 = (long long *)(n128_u64 - 128);
        do
        {
          unsigned int v662 = (long long *)a1;
          a1 = (unint64_t)v604;
          if ((*a3)(v604, v662))
          {
            __n128 v663 = *(__n128 *)a1;
            long long v664 = *(_OWORD *)(a1 + 16);
            long long v665 = *(_OWORD *)(a1 + 48);
            long long v720 = *(_OWORD *)(a1 + 32);
            long long v721 = v665;
            long long v718 = (__int128)v663;
            long long v719 = v664;
            long long v666 = *(_OWORD *)(a1 + 64);
            long long v667 = *(_OWORD *)(a1 + 80);
            long long v668 = *(_OWORD *)(a1 + 112);
            long long v724 = *(_OWORD *)(a1 + 96);
            long long v725 = v668;
            long long v722 = v666;
            long long v723 = v667;
            unsigned int v669 = v661;
            do
            {
              long long v670 = v669[13];
              v669[20] = v669[12];
              v669[21] = v670;
              long long v671 = v669[15];
              v669[22] = v669[14];
              v669[23] = v671;
              long long v672 = v669[9];
              v669[16] = v669[8];
              v669[17] = v672;
              long long v673 = v669[11];
              v669[18] = v669[10];
              v669[19] = v673;
              char v674 = (*a3)(&v718, v669);
              v669 -= 8;
            }
            while ((v674 & 1) != 0);
            long long v675 = v718;
            long long v676 = v719;
            long long v677 = v721;
            v669[18] = v720;
            v669[19] = v677;
            v669[16] = v675;
            v669[17] = v676;
            long long v678 = v722;
            long long v679 = v723;
            long long v680 = v725;
            v669[22] = v724;
            v669[23] = v680;
            v669[20] = v678;
            v669[21] = v679;
          }
          float v604 = (long long *)(a1 + 128);
          v661 += 8;
        }
        while ((long long *)(a1 + 128) != a2);
      }
      return;
    }
    if (!a4)
    {
      if ((long long *)n128_u64 != a2) {
        sub_2194CC2E0((long long *)n128_u64, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = (long long *)(n128_u64 + (v15 >> 1 << 7));
    long long v18 = *a3;
    if ((unint64_t)v14 > 0x4000)
    {
      char v19 = v18((long long *)(n128_u64 + (v15 >> 1 << 7)), (long long *)n128_u64);
      unsigned int v20 = (*a3)(v10, v17);
      if (v19)
      {
        if (v20)
        {
          long long v21 = *(_OWORD *)n128_u64;
          long long v22 = *(_OWORD *)(n128_u64 + 16);
          long long v23 = *(_OWORD *)(n128_u64 + 48);
          long long v720 = *(_OWORD *)(n128_u64 + 32);
          long long v721 = v23;
          long long v718 = v21;
          long long v719 = v22;
          long long v24 = *(_OWORD *)(n128_u64 + 64);
          long long v25 = *(_OWORD *)(n128_u64 + 80);
          long long v26 = *(_OWORD *)(n128_u64 + 112);
          long long v724 = *(_OWORD *)(n128_u64 + 96);
          long long v725 = v26;
          long long v722 = v24;
          long long v723 = v25;
          long long v27 = v10[7];
          long long v29 = v10[4];
          long long v28 = v10[5];
          *(_OWORD *)(n128_u64 + 96) = v10[6];
          *(_OWORD *)(n128_u64 + 112) = v27;
          *(_OWORD *)(n128_u64 + 64) = v29;
          *(_OWORD *)(n128_u64 + 80) = v28;
          __n128 v30 = (__n128)*v10;
          long long v31 = v10[1];
          long long v32 = v10[3];
          *(_OWORD *)(n128_u64 + 32) = v10[2];
          *(_OWORD *)(n128_u64 + 48) = v32;
          *(__n128 *)unint64_t n128_u64 = v30;
          *(_OWORD *)(n128_u64 + 16) = v31;
        }
        else
        {
          long long v119 = *(_OWORD *)n128_u64;
          long long v120 = *(_OWORD *)(n128_u64 + 16);
          long long v121 = *(_OWORD *)(n128_u64 + 48);
          long long v720 = *(_OWORD *)(n128_u64 + 32);
          long long v721 = v121;
          long long v718 = v119;
          long long v719 = v120;
          long long v122 = *(_OWORD *)(n128_u64 + 64);
          long long v123 = *(_OWORD *)(n128_u64 + 80);
          long long v124 = *(_OWORD *)(n128_u64 + 112);
          long long v724 = *(_OWORD *)(n128_u64 + 96);
          long long v725 = v124;
          long long v722 = v122;
          long long v723 = v123;
          long long v125 = v17[7];
          long long v127 = v17[4];
          long long v126 = v17[5];
          *(_OWORD *)(n128_u64 + 96) = v17[6];
          *(_OWORD *)(n128_u64 + 112) = v125;
          *(_OWORD *)(n128_u64 + 64) = v127;
          *(_OWORD *)(n128_u64 + 80) = v126;
          long long v128 = *v17;
          long long v129 = v17[1];
          long long v130 = v17[3];
          *(_OWORD *)(n128_u64 + 32) = v17[2];
          *(_OWORD *)(n128_u64 + 48) = v130;
          *(_OWORD *)unint64_t n128_u64 = v128;
          *(_OWORD *)(n128_u64 + 16) = v129;
          long long v131 = v718;
          long long v132 = v719;
          long long v133 = v721;
          v17[2] = v720;
          v17[3] = v133;
          *uint64_t v17 = v131;
          v17[1] = v132;
          long long v134 = v722;
          long long v135 = v723;
          long long v136 = v725;
          v17[6] = v724;
          v17[7] = v136;
          v17[4] = v134;
          v17[5] = v135;
          if (!(*a3)(v10, v17)) {
            goto LABEL_25;
          }
          long long v137 = *v17;
          long long v138 = v17[1];
          long long v139 = v17[3];
          long long v720 = v17[2];
          long long v721 = v139;
          long long v718 = v137;
          long long v719 = v138;
          long long v140 = v17[4];
          long long v141 = v17[5];
          long long v142 = v17[7];
          long long v724 = v17[6];
          long long v725 = v142;
          long long v722 = v140;
          long long v723 = v141;
          long long v143 = v10[7];
          long long v145 = v10[4];
          long long v144 = v10[5];
          v17[6] = v10[6];
          v17[7] = v143;
          v17[4] = v145;
          v17[5] = v144;
          long long v146 = *v10;
          long long v147 = v10[1];
          long long v148 = v10[3];
          v17[2] = v10[2];
          v17[3] = v148;
          *uint64_t v17 = v146;
          v17[1] = v147;
        }
        long long v149 = v718;
        long long v150 = v719;
        long long v151 = v721;
        v10[2] = v720;
        v10[3] = v151;
        long long *v10 = v149;
        v10[1] = v150;
        long long v152 = v722;
        long long v153 = v723;
        long long v154 = v725;
        v10[6] = v724;
        v10[7] = v154;
        v10[4] = v152;
        v10[5] = v153;
      }
      else if (v20)
      {
        long long v47 = *v17;
        long long v48 = v17[1];
        long long v49 = v17[3];
        long long v720 = v17[2];
        long long v721 = v49;
        long long v718 = v47;
        long long v719 = v48;
        long long v50 = v17[4];
        long long v51 = v17[5];
        long long v52 = v17[7];
        long long v724 = v17[6];
        long long v725 = v52;
        long long v722 = v50;
        long long v723 = v51;
        long long v53 = v10[7];
        long long v55 = v10[4];
        long long v54 = v10[5];
        v17[6] = v10[6];
        v17[7] = v53;
        v17[4] = v55;
        v17[5] = v54;
        long long v56 = *v10;
        long long v57 = v10[1];
        long long v58 = v10[3];
        v17[2] = v10[2];
        v17[3] = v58;
        *uint64_t v17 = v56;
        v17[1] = v57;
        long long v59 = v718;
        long long v60 = v719;
        long long v61 = v721;
        v10[2] = v720;
        v10[3] = v61;
        long long *v10 = v59;
        v10[1] = v60;
        long long v62 = v722;
        long long v63 = v723;
        long long v64 = v725;
        v10[6] = v724;
        v10[7] = v64;
        v10[4] = v62;
        v10[5] = v63;
        if ((*a3)(v17, (long long *)n128_u64))
        {
          long long v65 = *(_OWORD *)n128_u64;
          long long v66 = *(_OWORD *)(n128_u64 + 16);
          long long v67 = *(_OWORD *)(n128_u64 + 48);
          long long v720 = *(_OWORD *)(n128_u64 + 32);
          long long v721 = v67;
          long long v718 = v65;
          long long v719 = v66;
          long long v68 = *(_OWORD *)(n128_u64 + 64);
          long long v69 = *(_OWORD *)(n128_u64 + 80);
          long long v70 = *(_OWORD *)(n128_u64 + 112);
          long long v724 = *(_OWORD *)(n128_u64 + 96);
          long long v725 = v70;
          long long v722 = v68;
          long long v723 = v69;
          long long v71 = v17[7];
          long long v73 = v17[4];
          long long v72 = v17[5];
          *(_OWORD *)(n128_u64 + 96) = v17[6];
          *(_OWORD *)(n128_u64 + 112) = v71;
          *(_OWORD *)(n128_u64 + 64) = v73;
          *(_OWORD *)(n128_u64 + 80) = v72;
          long long v74 = *v17;
          long long v75 = v17[1];
          long long v76 = v17[3];
          *(_OWORD *)(n128_u64 + 32) = v17[2];
          *(_OWORD *)(n128_u64 + 48) = v76;
          *(_OWORD *)unint64_t n128_u64 = v74;
          *(_OWORD *)(n128_u64 + 16) = v75;
          long long v77 = v718;
          long long v78 = v719;
          long long v79 = v721;
          v17[2] = v720;
          v17[3] = v79;
          *uint64_t v17 = v77;
          v17[1] = v78;
          long long v80 = v722;
          long long v81 = v723;
          long long v82 = v725;
          v17[6] = v724;
          v17[7] = v82;
          v17[4] = v80;
          v17[5] = v81;
        }
      }
LABEL_25:
      int v155 = (long long *)(n128_u64 + 128);
      uint64_t v156 = (long long *)(a1 + (v16 << 7) - 128);
      char v157 = (*a3)(v156, (long long *)(a1 + 128));
      unsigned int v158 = (*a3)(v11, v156);
      if (v157)
      {
        if (v158)
        {
          long long v159 = *(_OWORD *)(a1 + 208);
          long long v722 = *(_OWORD *)(a1 + 192);
          long long v723 = v159;
          long long v160 = *(_OWORD *)(a1 + 240);
          long long v724 = *(_OWORD *)(a1 + 224);
          long long v725 = v160;
          long long v161 = *(_OWORD *)(a1 + 144);
          long long v718 = *v155;
          long long v719 = v161;
          long long v162 = *(_OWORD *)(a1 + 176);
          long long v720 = *(_OWORD *)(a1 + 160);
          long long v721 = v162;
          long long v163 = *v11;
          long long v164 = v11[1];
          long long v165 = v11[3];
          *(_OWORD *)(a1 + 160) = v11[2];
          *(_OWORD *)(a1 + 176) = v165;
          *int v155 = v163;
          *(_OWORD *)(a1 + 144) = v164;
          long long v167 = v11[6];
          long long v166 = v11[7];
          long long v168 = v11[5];
          *(_OWORD *)(a1 + 192) = v11[4];
          *(_OWORD *)(a1 + 208) = v168;
          *(_OWORD *)(a1 + 224) = v167;
          *(_OWORD *)(a1 + 240) = v166;
        }
        else
        {
          long long v239 = *(_OWORD *)(a1 + 208);
          long long v722 = *(_OWORD *)(a1 + 192);
          long long v723 = v239;
          long long v240 = *(_OWORD *)(a1 + 240);
          long long v724 = *(_OWORD *)(a1 + 224);
          long long v725 = v240;
          long long v241 = *(_OWORD *)(a1 + 144);
          long long v718 = *v155;
          long long v719 = v241;
          long long v242 = *(_OWORD *)(a1 + 176);
          long long v720 = *(_OWORD *)(a1 + 160);
          long long v721 = v242;
          long long v243 = *v156;
          long long v244 = *(_OWORD *)(a1 + (v16 << 7) - 112);
          long long v245 = *(_OWORD *)(a1 + (v16 << 7) - 80);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + (v16 << 7) - 96);
          *(_OWORD *)(a1 + 176) = v245;
          *int v155 = v243;
          *(_OWORD *)(a1 + 144) = v244;
          long long v247 = *(_OWORD *)(a1 + (v16 << 7) - 32);
          long long v246 = *(_OWORD *)(a1 + (v16 << 7) - 16);
          long long v248 = *(_OWORD *)(a1 + (v16 << 7) - 48);
          *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + (v16 << 7) - 64);
          *(_OWORD *)(a1 + 208) = v248;
          *(_OWORD *)(a1 + 224) = v247;
          *(_OWORD *)(a1 + 240) = v246;
          long long v249 = v718;
          long long v250 = v719;
          long long v251 = v721;
          *(_OWORD *)(a1 + (v16 << 7) - 96) = v720;
          *(_OWORD *)(a1 + (v16 << 7) - 80) = v251;
          *uint64_t v156 = v249;
          *(_OWORD *)(a1 + (v16 << 7) - 112) = v250;
          long long v252 = v722;
          long long v253 = v723;
          long long v254 = v725;
          *(_OWORD *)(a1 + (v16 << 7) - 32) = v724;
          *(_OWORD *)(a1 + (v16 << 7) - 16) = v254;
          *(_OWORD *)(a1 + (v16 << 7) - 64) = v252;
          *(_OWORD *)(a1 + (v16 << 7) - 48) = v253;
          if (!(*a3)(v11, (long long *)(a1 + (v16 << 7) - 128))) {
            goto LABEL_39;
          }
          long long v255 = *v156;
          long long v256 = *(_OWORD *)(a1 + (v16 << 7) - 112);
          long long v257 = *(_OWORD *)(a1 + (v16 << 7) - 80);
          long long v720 = *(_OWORD *)(a1 + (v16 << 7) - 96);
          long long v721 = v257;
          long long v718 = v255;
          long long v719 = v256;
          long long v258 = *(_OWORD *)(a1 + (v16 << 7) - 64);
          long long v259 = *(_OWORD *)(a1 + (v16 << 7) - 48);
          long long v260 = *(_OWORD *)(a1 + (v16 << 7) - 16);
          long long v724 = *(_OWORD *)(a1 + (v16 << 7) - 32);
          long long v725 = v260;
          long long v722 = v258;
          long long v723 = v259;
          long long v261 = v11[7];
          long long v263 = v11[4];
          long long v262 = v11[5];
          *(_OWORD *)(a1 + (v16 << 7) - 32) = v11[6];
          *(_OWORD *)(a1 + (v16 << 7) - 16) = v261;
          *(_OWORD *)(a1 + (v16 << 7) - 64) = v263;
          *(_OWORD *)(a1 + (v16 << 7) - 48) = v262;
          long long v264 = *v11;
          long long v265 = v11[1];
          long long v266 = v11[3];
          *(_OWORD *)(a1 + (v16 << 7) - 96) = v11[2];
          *(_OWORD *)(a1 + (v16 << 7) - 80) = v266;
          *uint64_t v156 = v264;
          *(_OWORD *)(a1 + (v16 << 7) - 112) = v265;
        }
        long long v267 = v718;
        long long v268 = v719;
        long long v269 = v721;
        v11[2] = v720;
        void v11[3] = v269;
        *unint64_t v11 = v267;
        v11[1] = v268;
        long long v270 = v722;
        long long v271 = v723;
        long long v272 = v725;
        v11[6] = v724;
        v11[7] = v272;
        v11[4] = v270;
        v11[5] = v271;
      }
      else if (v158)
      {
        long long v169 = *v156;
        long long v170 = *(_OWORD *)(a1 + (v16 << 7) - 112);
        long long v171 = *(_OWORD *)(a1 + (v16 << 7) - 80);
        long long v720 = *(_OWORD *)(a1 + (v16 << 7) - 96);
        long long v721 = v171;
        long long v718 = v169;
        long long v719 = v170;
        long long v172 = *(_OWORD *)(a1 + (v16 << 7) - 64);
        long long v173 = *(_OWORD *)(a1 + (v16 << 7) - 48);
        long long v174 = *(_OWORD *)(a1 + (v16 << 7) - 16);
        long long v724 = *(_OWORD *)(a1 + (v16 << 7) - 32);
        long long v725 = v174;
        long long v722 = v172;
        long long v723 = v173;
        long long v175 = v11[7];
        long long v177 = v11[4];
        long long v176 = v11[5];
        *(_OWORD *)(a1 + (v16 << 7) - 32) = v11[6];
        *(_OWORD *)(a1 + (v16 << 7) - 16) = v175;
        *(_OWORD *)(a1 + (v16 << 7) - 64) = v177;
        *(_OWORD *)(a1 + (v16 << 7) - 48) = v176;
        long long v178 = *v11;
        long long v179 = v11[1];
        long long v180 = v11[3];
        *(_OWORD *)(a1 + (v16 << 7) - 96) = v11[2];
        *(_OWORD *)(a1 + (v16 << 7) - 80) = v180;
        *uint64_t v156 = v178;
        *(_OWORD *)(a1 + (v16 << 7) - 112) = v179;
        long long v181 = v718;
        long long v182 = v719;
        long long v183 = v721;
        v11[2] = v720;
        void v11[3] = v183;
        *unint64_t v11 = v181;
        v11[1] = v182;
        long long v184 = v722;
        long long v185 = v723;
        long long v186 = v725;
        v11[6] = v724;
        v11[7] = v186;
        v11[4] = v184;
        v11[5] = v185;
        if ((*a3)((long long *)(a1 + (v16 << 7) - 128), (long long *)(a1 + 128)))
        {
          long long v187 = *(_OWORD *)(a1 + 208);
          long long v722 = *(_OWORD *)(a1 + 192);
          long long v723 = v187;
          long long v188 = *(_OWORD *)(a1 + 240);
          long long v724 = *(_OWORD *)(a1 + 224);
          long long v725 = v188;
          long long v189 = *(_OWORD *)(a1 + 144);
          long long v718 = *v155;
          long long v719 = v189;
          long long v190 = *(_OWORD *)(a1 + 176);
          long long v720 = *(_OWORD *)(a1 + 160);
          long long v721 = v190;
          long long v191 = *v156;
          long long v192 = *(_OWORD *)(a1 + (v16 << 7) - 112);
          long long v193 = *(_OWORD *)(a1 + (v16 << 7) - 80);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + (v16 << 7) - 96);
          *(_OWORD *)(a1 + 176) = v193;
          *int v155 = v191;
          *(_OWORD *)(a1 + 144) = v192;
          long long v195 = *(_OWORD *)(a1 + (v16 << 7) - 32);
          long long v194 = *(_OWORD *)(a1 + (v16 << 7) - 16);
          long long v196 = *(_OWORD *)(a1 + (v16 << 7) - 48);
          *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + (v16 << 7) - 64);
          *(_OWORD *)(a1 + 208) = v196;
          *(_OWORD *)(a1 + 224) = v195;
          *(_OWORD *)(a1 + 240) = v194;
          long long v197 = v718;
          long long v198 = v719;
          long long v199 = v721;
          *(_OWORD *)(a1 + (v16 << 7) - 96) = v720;
          *(_OWORD *)(a1 + (v16 << 7) - 80) = v199;
          *uint64_t v156 = v197;
          *(_OWORD *)(a1 + (v16 << 7) - 112) = v198;
          long long v200 = v722;
          long long v201 = v723;
          long long v202 = v725;
          *(_OWORD *)(a1 + (v16 << 7) - 32) = v724;
          *(_OWORD *)(a1 + (v16 << 7) - 16) = v202;
          *(_OWORD *)(a1 + (v16 << 7) - 64) = v200;
          *(_OWORD *)(a1 + (v16 << 7) - 48) = v201;
        }
      }
LABEL_39:
      __int32 v273 = (long long *)(a1 + 256);
      __int32 v274 = (long long *)(a1 + (v16 << 7) + 128);
      char v275 = (*a3)(v274, (long long *)(a1 + 256));
      unsigned int v276 = (*a3)(v12, v274);
      if (v275)
      {
        if (v276)
        {
          long long v277 = *(_OWORD *)(a1 + 336);
          long long v722 = *(_OWORD *)(a1 + 320);
          long long v723 = v277;
          long long v278 = *(_OWORD *)(a1 + 368);
          long long v724 = *(_OWORD *)(a1 + 352);
          long long v725 = v278;
          long long v279 = *(_OWORD *)(a1 + 272);
          long long v718 = *v273;
          long long v719 = v279;
          long long v280 = *(_OWORD *)(a1 + 304);
          long long v720 = *(_OWORD *)(a1 + 288);
          long long v721 = v280;
          long long v281 = *v12;
          long long v282 = v12[1];
          long long v283 = v12[3];
          *(_OWORD *)(a1 + 288) = v12[2];
          *(_OWORD *)(a1 + 304) = v283;
          *__int32 v273 = v281;
          *(_OWORD *)(a1 + 272) = v282;
          long long v285 = v12[6];
          long long v284 = v12[7];
          long long v286 = v12[5];
          *(_OWORD *)(a1 + 320) = v12[4];
          *(_OWORD *)(a1 + 336) = v286;
          *(_OWORD *)(a1 + 352) = v285;
          *(_OWORD *)(a1 + 368) = v284;
        }
        else
        {
          long long v321 = *(_OWORD *)(a1 + 336);
          long long v722 = *(_OWORD *)(a1 + 320);
          long long v723 = v321;
          long long v322 = *(_OWORD *)(a1 + 368);
          long long v724 = *(_OWORD *)(a1 + 352);
          long long v725 = v322;
          long long v323 = *(_OWORD *)(a1 + 272);
          long long v718 = *v273;
          long long v719 = v323;
          long long v324 = *(_OWORD *)(a1 + 304);
          long long v720 = *(_OWORD *)(a1 + 288);
          long long v721 = v324;
          long long v325 = *v274;
          long long v326 = v274[1];
          long long v327 = v274[3];
          *(_OWORD *)(a1 + 288) = v274[2];
          *(_OWORD *)(a1 + 304) = v327;
          *__int32 v273 = v325;
          *(_OWORD *)(a1 + 272) = v326;
          long long v329 = v274[6];
          long long v328 = v274[7];
          long long v330 = v274[5];
          *(_OWORD *)(a1 + 320) = v274[4];
          *(_OWORD *)(a1 + 336) = v330;
          *(_OWORD *)(a1 + 352) = v329;
          *(_OWORD *)(a1 + 368) = v328;
          long long v331 = v718;
          long long v332 = v719;
          long long v333 = v721;
          v274[2] = v720;
          v274[3] = v333;
          long long *v274 = v331;
          v274[1] = v332;
          long long v334 = v722;
          long long v335 = v723;
          long long v336 = v725;
          v274[6] = v724;
          v274[7] = v336;
          v274[4] = v334;
          v274[5] = v335;
          if (!(*a3)(v12, v274)) {
            goto LABEL_48;
          }
          long long v337 = *v274;
          long long v338 = v274[1];
          long long v339 = v274[3];
          long long v720 = v274[2];
          long long v721 = v339;
          long long v718 = v337;
          long long v719 = v338;
          long long v340 = v274[4];
          long long v341 = v274[5];
          long long v342 = v274[7];
          long long v724 = v274[6];
          long long v725 = v342;
          long long v722 = v340;
          long long v723 = v341;
          long long v343 = v12[7];
          long long v345 = v12[4];
          long long v344 = v12[5];
          v274[6] = v12[6];
          v274[7] = v343;
          v274[4] = v345;
          v274[5] = v344;
          long long v346 = *v12;
          long long v347 = v12[1];
          long long v348 = v12[3];
          v274[2] = v12[2];
          v274[3] = v348;
          long long *v274 = v346;
          v274[1] = v347;
        }
        long long v349 = v718;
        long long v350 = v719;
        long long v351 = v721;
        v12[2] = v720;
        v12[3] = v351;
        long long *v12 = v349;
        v12[1] = v350;
        long long v352 = v722;
        long long v353 = v723;
        long long v354 = v725;
        v12[6] = v724;
        v12[7] = v354;
        v12[4] = v352;
        v12[5] = v353;
      }
      else if (v276)
      {
        long long v287 = *v274;
        long long v288 = v274[1];
        long long v289 = v274[3];
        long long v720 = v274[2];
        long long v721 = v289;
        long long v718 = v287;
        long long v719 = v288;
        long long v290 = v274[4];
        long long v291 = v274[5];
        long long v292 = v274[7];
        long long v724 = v274[6];
        long long v725 = v292;
        long long v722 = v290;
        long long v723 = v291;
        long long v293 = v12[7];
        long long v295 = v12[4];
        long long v294 = v12[5];
        v274[6] = v12[6];
        v274[7] = v293;
        v274[4] = v295;
        v274[5] = v294;
        long long v296 = *v12;
        long long v297 = v12[1];
        long long v298 = v12[3];
        v274[2] = v12[2];
        v274[3] = v298;
        long long *v274 = v296;
        v274[1] = v297;
        long long v299 = v718;
        long long v300 = v719;
        long long v301 = v721;
        v12[2] = v720;
        v12[3] = v301;
        long long *v12 = v299;
        v12[1] = v300;
        long long v302 = v722;
        long long v303 = v723;
        long long v304 = v725;
        v12[6] = v724;
        v12[7] = v304;
        v12[4] = v302;
        v12[5] = v303;
        if ((*a3)(v274, (long long *)(a1 + 256)))
        {
          long long v305 = *(_OWORD *)(a1 + 336);
          long long v722 = *(_OWORD *)(a1 + 320);
          long long v723 = v305;
          long long v306 = *(_OWORD *)(a1 + 368);
          long long v724 = *(_OWORD *)(a1 + 352);
          long long v725 = v306;
          long long v307 = *(_OWORD *)(a1 + 272);
          long long v718 = *v273;
          long long v719 = v307;
          long long v308 = *(_OWORD *)(a1 + 304);
          long long v720 = *(_OWORD *)(a1 + 288);
          long long v721 = v308;
          long long v309 = *v274;
          long long v310 = v274[1];
          long long v311 = v274[3];
          *(_OWORD *)(a1 + 288) = v274[2];
          *(_OWORD *)(a1 + 304) = v311;
          *__int32 v273 = v309;
          *(_OWORD *)(a1 + 272) = v310;
          long long v313 = v274[6];
          long long v312 = v274[7];
          long long v314 = v274[5];
          *(_OWORD *)(a1 + 320) = v274[4];
          *(_OWORD *)(a1 + 336) = v314;
          *(_OWORD *)(a1 + 352) = v313;
          *(_OWORD *)(a1 + 368) = v312;
          long long v315 = v718;
          long long v316 = v719;
          long long v317 = v721;
          v274[2] = v720;
          v274[3] = v317;
          long long *v274 = v315;
          v274[1] = v316;
          long long v318 = v722;
          long long v319 = v723;
          long long v320 = v725;
          v274[6] = v724;
          v274[7] = v320;
          v274[4] = v318;
          v274[5] = v319;
        }
      }
LABEL_48:
      char v355 = (*a3)(v17, v156);
      unsigned int v356 = (*a3)(v274, v17);
      if (v355)
      {
        if (v356)
        {
          long long v357 = *v156;
          long long v358 = v156[1];
          long long v359 = v156[3];
          long long v720 = v156[2];
          long long v721 = v359;
          long long v718 = v357;
          long long v719 = v358;
          long long v360 = v156[4];
          long long v361 = v156[5];
          long long v362 = v156[7];
          long long v724 = v156[6];
          long long v725 = v362;
          long long v722 = v360;
          long long v723 = v361;
          long long v363 = v274[5];
          v156[4] = v274[4];
          v156[5] = v363;
          long long v364 = v274[7];
          v156[6] = v274[6];
          v156[7] = v364;
          long long v365 = v274[1];
          *uint64_t v156 = *v274;
          v156[1] = v365;
          long long v366 = v274[3];
          v156[2] = v274[2];
          v156[3] = v366;
        }
        else
        {
          long long v399 = *v156;
          long long v400 = v156[1];
          long long v401 = v156[3];
          long long v720 = v156[2];
          long long v721 = v401;
          long long v718 = v399;
          long long v719 = v400;
          long long v402 = v156[4];
          long long v403 = v156[5];
          long long v404 = v156[7];
          long long v724 = v156[6];
          long long v725 = v404;
          long long v722 = v402;
          long long v723 = v403;
          long long v405 = v17[5];
          v156[4] = v17[4];
          v156[5] = v405;
          long long v406 = v17[7];
          v156[6] = v17[6];
          v156[7] = v406;
          long long v407 = v17[1];
          *uint64_t v156 = *v17;
          v156[1] = v407;
          long long v408 = v17[3];
          v156[2] = v17[2];
          v156[3] = v408;
          long long v409 = v718;
          long long v410 = v719;
          long long v411 = v721;
          v17[2] = v720;
          v17[3] = v411;
          *uint64_t v17 = v409;
          v17[1] = v410;
          long long v412 = v722;
          long long v413 = v723;
          long long v414 = v725;
          v17[6] = v724;
          v17[7] = v414;
          v17[4] = v412;
          v17[5] = v413;
          if (!(*a3)(v274, v17)) {
            goto LABEL_57;
          }
          long long v415 = *v17;
          long long v416 = v17[1];
          long long v417 = v17[3];
          long long v720 = v17[2];
          long long v721 = v417;
          long long v718 = v415;
          long long v719 = v416;
          long long v418 = v17[4];
          long long v419 = v17[5];
          long long v420 = v17[7];
          long long v724 = v17[6];
          long long v725 = v420;
          long long v722 = v418;
          long long v723 = v419;
          long long v421 = v274[5];
          v17[4] = v274[4];
          v17[5] = v421;
          long long v422 = v274[7];
          v17[6] = v274[6];
          v17[7] = v422;
          long long v423 = v274[1];
          *uint64_t v17 = *v274;
          v17[1] = v423;
          long long v424 = v274[3];
          v17[2] = v274[2];
          v17[3] = v424;
        }
        long long v425 = v718;
        long long v426 = v719;
        long long v427 = v721;
        v274[2] = v720;
        v274[3] = v427;
        long long *v274 = v425;
        v274[1] = v426;
        long long v428 = v722;
        long long v429 = v723;
        long long v430 = v725;
        v274[6] = v724;
        v274[7] = v430;
        v274[4] = v428;
        v274[5] = v429;
      }
      else if (v356)
      {
        long long v367 = *v17;
        long long v368 = v17[1];
        long long v369 = v17[3];
        long long v720 = v17[2];
        long long v721 = v369;
        long long v718 = v367;
        long long v719 = v368;
        long long v370 = v17[4];
        long long v371 = v17[5];
        long long v372 = v17[7];
        long long v724 = v17[6];
        long long v725 = v372;
        long long v722 = v370;
        long long v723 = v371;
        long long v373 = v274[5];
        v17[4] = v274[4];
        v17[5] = v373;
        long long v374 = v274[7];
        v17[6] = v274[6];
        v17[7] = v374;
        long long v375 = v274[1];
        *uint64_t v17 = *v274;
        v17[1] = v375;
        long long v376 = v274[3];
        v17[2] = v274[2];
        v17[3] = v376;
        long long v377 = v718;
        long long v378 = v719;
        long long v379 = v721;
        v274[2] = v720;
        v274[3] = v379;
        long long *v274 = v377;
        v274[1] = v378;
        long long v380 = v722;
        long long v381 = v723;
        long long v382 = v725;
        v274[6] = v724;
        v274[7] = v382;
        v274[4] = v380;
        v274[5] = v381;
        if ((*a3)(v17, v156))
        {
          long long v383 = *v156;
          long long v384 = v156[1];
          long long v385 = v156[3];
          long long v720 = v156[2];
          long long v721 = v385;
          long long v718 = v383;
          long long v719 = v384;
          long long v386 = v156[4];
          long long v387 = v156[5];
          long long v388 = v156[7];
          long long v724 = v156[6];
          long long v725 = v388;
          long long v722 = v386;
          long long v723 = v387;
          long long v389 = v17[5];
          v156[4] = v17[4];
          v156[5] = v389;
          long long v390 = v17[7];
          v156[6] = v17[6];
          v156[7] = v390;
          long long v391 = v17[1];
          *uint64_t v156 = *v17;
          v156[1] = v391;
          long long v392 = v17[3];
          v156[2] = v17[2];
          v156[3] = v392;
          long long v393 = v718;
          long long v394 = v719;
          long long v395 = v721;
          v17[2] = v720;
          v17[3] = v395;
          *uint64_t v17 = v393;
          v17[1] = v394;
          long long v396 = v722;
          long long v397 = v723;
          long long v398 = v725;
          v17[6] = v724;
          v17[7] = v398;
          v17[4] = v396;
          v17[5] = v397;
        }
      }
LABEL_57:
      __n128 v431 = *(__n128 *)a1;
      long long v432 = *(_OWORD *)(a1 + 16);
      long long v433 = *(_OWORD *)(a1 + 48);
      long long v720 = *(_OWORD *)(a1 + 32);
      long long v721 = v433;
      long long v718 = (__int128)v431;
      long long v719 = v432;
      long long v434 = *(_OWORD *)(a1 + 64);
      long long v435 = *(_OWORD *)(a1 + 80);
      long long v436 = *(_OWORD *)(a1 + 112);
      long long v724 = *(_OWORD *)(a1 + 96);
      long long v725 = v436;
      long long v722 = v434;
      long long v723 = v435;
      long long v437 = v17[7];
      long long v439 = v17[4];
      long long v438 = v17[5];
      *(_OWORD *)(a1 + 96) = v17[6];
      *(_OWORD *)(a1 + 112) = v437;
      *(_OWORD *)(a1 + 64) = v439;
      *(_OWORD *)(a1 + 80) = v438;
      long long v440 = *v17;
      long long v441 = v17[1];
      long long v442 = v17[3];
      *(_OWORD *)(a1 + 32) = v17[2];
      *(_OWORD *)(a1 + 48) = v442;
      *(_OWORD *)a1 = v440;
      *(_OWORD *)(a1 + 16) = v441;
      long long v443 = v718;
      long long v444 = v719;
      long long v445 = v721;
      v17[2] = v720;
      v17[3] = v445;
      *uint64_t v17 = v443;
      v17[1] = v444;
      long long v446 = v722;
      long long v447 = v723;
      long long v448 = v725;
      v17[6] = v724;
      v17[7] = v448;
      v17[4] = v446;
      v17[5] = v447;
      a2 = v707;
      --a4;
      if ((a5 & 1) == 0) {
        goto LABEL_58;
      }
LABEL_59:
      uint64_t v449 = 0;
      __n128 v450 = *(__n128 *)a1;
      __n128 v451 = *(__n128 *)(a1 + 16);
      __n128 v452 = *(__n128 *)(a1 + 48);
      __n128 v712 = *(__n128 *)(a1 + 32);
      __n128 v713 = v452;
      __n128 v710 = v450;
      __n128 v711 = v451;
      __n128 v453 = *(__n128 *)(a1 + 64);
      __n128 v454 = *(__n128 *)(a1 + 80);
      __n128 v455 = *(__n128 *)(a1 + 112);
      __n128 v716 = *(__n128 *)(a1 + 96);
      __n128 v717 = v455;
      __n128 v714 = v453;
      __n128 v715 = v454;
      do
        v449 += 128;
      while ((((uint64_t (*)(unint64_t, __n128 *))*a3)(v449 + a1, &v710) & 1) != 0);
      unint64_t v456 = a1 + v449;
      float v457 = a2;
      if (v449 == 128)
      {
        float v457 = a2;
        do
        {
          if (v456 >= (unint64_t)v457) {
            break;
          }
          v457 -= 8;
        }
        while ((((uint64_t (*)(long long *, __n128 *))*a3)(v457, &v710) & 1) == 0);
      }
      else
      {
        do
          v457 -= 8;
        while (!(*a3)(v457, (long long *)&v710));
      }
      if (v456 >= (unint64_t)v457)
      {
        uint64_t v478 = (__n128 *)(v456 - 128);
        if (v456 - 128 == a1) {
          goto LABEL_77;
        }
LABEL_76:
        __n128 v479 = *v478;
        __n128 v480 = v478[1];
        __n128 v481 = v478[3];
        *(__n128 *)(a1 + 32) = v478[2];
        *(__n128 *)(a1 + 48) = v481;
        *(__n128 *)a1 = v479;
        *(__n128 *)(a1 + 16) = v480;
        __n128 v482 = v478[4];
        __n128 v483 = v478[5];
        __n128 v484 = v478[7];
        *(__n128 *)(a1 + 96) = v478[6];
        *(__n128 *)(a1 + 112) = v484;
        *(__n128 *)(a1 + 64) = v482;
        *(__n128 *)(a1 + 80) = v483;
        goto LABEL_77;
      }
      float v458 = (long long *)(a1 + v449);
      float v459 = v457;
      do
      {
        long long v460 = *v458;
        long long v461 = v458[1];
        long long v462 = v458[3];
        long long v720 = v458[2];
        long long v721 = v462;
        long long v718 = v460;
        long long v719 = v461;
        long long v463 = v458[4];
        long long v464 = v458[5];
        long long v465 = v458[7];
        long long v724 = v458[6];
        long long v725 = v465;
        long long v722 = v463;
        long long v723 = v464;
        long long v466 = v459[7];
        long long v468 = v459[4];
        long long v467 = v459[5];
        v458[6] = v459[6];
        v458[7] = v466;
        v458[4] = v468;
        v458[5] = v467;
        long long v469 = *v459;
        long long v470 = v459[1];
        long long v471 = v459[3];
        v458[2] = v459[2];
        v458[3] = v471;
        *float v458 = v469;
        v458[1] = v470;
        long long v472 = v718;
        long long v473 = v719;
        long long v474 = v721;
        v459[2] = v720;
        v459[3] = v474;
        *float v459 = v472;
        v459[1] = v473;
        long long v475 = v722;
        long long v476 = v723;
        long long v477 = v725;
        v459[6] = v724;
        v459[7] = v477;
        v459[4] = v475;
        v459[5] = v476;
        do
          v458 += 8;
        while ((((uint64_t (*)(long long *, __n128 *))*a3)(v458, &v710) & 1) != 0);
        do
          v459 -= 8;
        while (!(*a3)(v459, (long long *)&v710));
      }
      while (v458 < v459);
      uint64_t v478 = (__n128 *)(v458 - 8);
      if (v478 != (__n128 *)a1) {
        goto LABEL_76;
      }
LABEL_77:
      __n128 v485 = v710;
      __n128 v486 = v711;
      __n128 v487 = v713;
      v478[2] = v712;
      v478[3] = v487;
      *uint64_t v478 = v485;
      v478[1] = v486;
      __n128 v488 = v714;
      __n128 v489 = v715;
      __n128 v490 = v717;
      v478[6] = v716;
      v478[7] = v490;
      v478[4] = v488;
      v478[5] = v489;
      if (v456 < (unint64_t)v457) {
        goto LABEL_80;
      }
      BOOL v491 = sub_2194CB658((__n128 *)a1, v478, (uint64_t (**)(__n128 *, __n128 *))a3);
      unint64_t n128_u64 = (unint64_t)v478[8].n128_u64;
      if (sub_2194CB658(v478 + 8, (__n128 *)a2, (uint64_t (**)(__n128 *, __n128 *))a3))
      {
        a2 = (long long *)v478;
        if (v491) {
          return;
        }
        goto LABEL_2;
      }
      if (!v491)
      {
LABEL_80:
        sub_2194CA0C0(a1, v478, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t n128_u64 = (unint64_t)v478[8].n128_u64;
      }
    }
    else
    {
      char v33 = v18((long long *)n128_u64, (long long *)(n128_u64 + (v15 >> 1 << 7)));
      unsigned int v34 = (*a3)(v10, (long long *)n128_u64);
      if (v33)
      {
        if (v34)
        {
          long long v35 = *v17;
          long long v36 = v17[1];
          long long v37 = v17[3];
          long long v720 = v17[2];
          long long v721 = v37;
          long long v718 = v35;
          long long v719 = v36;
          long long v38 = v17[4];
          long long v39 = v17[5];
          long long v40 = v17[7];
          long long v724 = v17[6];
          long long v725 = v40;
          long long v722 = v38;
          long long v723 = v39;
          long long v41 = v10[7];
          long long v43 = v10[4];
          long long v42 = v10[5];
          v17[6] = v10[6];
          v17[7] = v41;
          v17[4] = v43;
          v17[5] = v42;
          long long v44 = *v10;
          long long v45 = v10[1];
          long long v46 = v10[3];
          v17[2] = v10[2];
          v17[3] = v46;
          *uint64_t v17 = v44;
          v17[1] = v45;
          goto LABEL_33;
        }
        long long v203 = *v17;
        long long v204 = v17[1];
        long long v205 = v17[3];
        long long v720 = v17[2];
        long long v721 = v205;
        long long v718 = v203;
        long long v719 = v204;
        long long v206 = v17[4];
        long long v207 = v17[5];
        long long v208 = v17[7];
        long long v724 = v17[6];
        long long v725 = v208;
        long long v722 = v206;
        long long v723 = v207;
        long long v209 = *(_OWORD *)(n128_u64 + 112);
        long long v211 = *(_OWORD *)(n128_u64 + 64);
        long long v210 = *(_OWORD *)(n128_u64 + 80);
        v17[6] = *(_OWORD *)(n128_u64 + 96);
        v17[7] = v209;
        v17[4] = v211;
        v17[5] = v210;
        long long v212 = *(_OWORD *)n128_u64;
        long long v213 = *(_OWORD *)(n128_u64 + 16);
        long long v214 = *(_OWORD *)(n128_u64 + 48);
        v17[2] = *(_OWORD *)(n128_u64 + 32);
        v17[3] = v214;
        *uint64_t v17 = v212;
        v17[1] = v213;
        long long v215 = v718;
        long long v216 = v719;
        long long v217 = v721;
        *(_OWORD *)(n128_u64 + 32) = v720;
        *(_OWORD *)(n128_u64 + 48) = v217;
        *(_OWORD *)unint64_t n128_u64 = v215;
        *(_OWORD *)(n128_u64 + 16) = v216;
        long long v218 = v722;
        long long v219 = v723;
        long long v220 = v725;
        *(_OWORD *)(n128_u64 + 96) = v724;
        *(_OWORD *)(n128_u64 + 112) = v220;
        *(_OWORD *)(n128_u64 + 64) = v218;
        *(_OWORD *)(n128_u64 + 80) = v219;
        if ((*a3)(v10, (long long *)n128_u64))
        {
          long long v221 = *(_OWORD *)n128_u64;
          long long v222 = *(_OWORD *)(n128_u64 + 16);
          long long v223 = *(_OWORD *)(n128_u64 + 48);
          long long v720 = *(_OWORD *)(n128_u64 + 32);
          long long v721 = v223;
          long long v718 = v221;
          long long v719 = v222;
          long long v224 = *(_OWORD *)(n128_u64 + 64);
          long long v225 = *(_OWORD *)(n128_u64 + 80);
          long long v226 = *(_OWORD *)(n128_u64 + 112);
          long long v724 = *(_OWORD *)(n128_u64 + 96);
          long long v725 = v226;
          long long v722 = v224;
          long long v723 = v225;
          long long v227 = v10[7];
          long long v229 = v10[4];
          long long v228 = v10[5];
          *(_OWORD *)(n128_u64 + 96) = v10[6];
          *(_OWORD *)(n128_u64 + 112) = v227;
          *(_OWORD *)(n128_u64 + 64) = v229;
          *(_OWORD *)(n128_u64 + 80) = v228;
          long long v230 = *v10;
          long long v231 = v10[1];
          long long v232 = v10[3];
          *(_OWORD *)(n128_u64 + 32) = v10[2];
          *(_OWORD *)(n128_u64 + 48) = v232;
          *(_OWORD *)unint64_t n128_u64 = v230;
          *(_OWORD *)(n128_u64 + 16) = v231;
LABEL_33:
          long long v233 = v718;
          long long v234 = v719;
          long long v235 = v721;
          v10[2] = v720;
          v10[3] = v235;
          long long *v10 = v233;
          v10[1] = v234;
          long long v236 = v722;
          long long v237 = v723;
          long long v238 = v725;
          v10[6] = v724;
          v10[7] = v238;
          v10[4] = v236;
          v10[5] = v237;
        }
LABEL_34:
        --a4;
        if (a5) {
          goto LABEL_59;
        }
        goto LABEL_58;
      }
      if (!v34) {
        goto LABEL_34;
      }
      long long v83 = *(_OWORD *)n128_u64;
      long long v84 = *(_OWORD *)(n128_u64 + 16);
      long long v85 = *(_OWORD *)(n128_u64 + 48);
      long long v720 = *(_OWORD *)(n128_u64 + 32);
      long long v721 = v85;
      long long v718 = v83;
      long long v719 = v84;
      long long v86 = *(_OWORD *)(n128_u64 + 64);
      long long v87 = *(_OWORD *)(n128_u64 + 80);
      long long v88 = *(_OWORD *)(n128_u64 + 112);
      long long v724 = *(_OWORD *)(n128_u64 + 96);
      long long v725 = v88;
      long long v722 = v86;
      long long v723 = v87;
      long long v89 = v10[7];
      long long v91 = v10[4];
      long long v90 = v10[5];
      *(_OWORD *)(n128_u64 + 96) = v10[6];
      *(_OWORD *)(n128_u64 + 112) = v89;
      *(_OWORD *)(n128_u64 + 64) = v91;
      *(_OWORD *)(n128_u64 + 80) = v90;
      long long v92 = *v10;
      long long v93 = v10[1];
      long long v94 = v10[3];
      *(_OWORD *)(n128_u64 + 32) = v10[2];
      *(_OWORD *)(n128_u64 + 48) = v94;
      *(_OWORD *)unint64_t n128_u64 = v92;
      *(_OWORD *)(n128_u64 + 16) = v93;
      long long v95 = v718;
      long long v96 = v719;
      long long v97 = v721;
      v10[2] = v720;
      v10[3] = v97;
      long long *v10 = v95;
      v10[1] = v96;
      long long v98 = v722;
      long long v99 = v723;
      long long v100 = v725;
      v10[6] = v724;
      v10[7] = v100;
      v10[4] = v98;
      v10[5] = v99;
      if (!(*a3)((long long *)n128_u64, v17)) {
        goto LABEL_34;
      }
      long long v101 = *v17;
      long long v102 = v17[1];
      long long v103 = v17[3];
      long long v720 = v17[2];
      long long v721 = v103;
      long long v718 = v101;
      long long v719 = v102;
      long long v104 = v17[4];
      long long v105 = v17[5];
      long long v106 = v17[7];
      long long v724 = v17[6];
      long long v725 = v106;
      long long v722 = v104;
      long long v723 = v105;
      long long v107 = *(_OWORD *)(n128_u64 + 112);
      long long v109 = *(_OWORD *)(n128_u64 + 64);
      long long v108 = *(_OWORD *)(n128_u64 + 80);
      v17[6] = *(_OWORD *)(n128_u64 + 96);
      v17[7] = v107;
      v17[4] = v109;
      v17[5] = v108;
      long long v110 = *(_OWORD *)n128_u64;
      long long v111 = *(_OWORD *)(n128_u64 + 16);
      long long v112 = *(_OWORD *)(n128_u64 + 48);
      v17[2] = *(_OWORD *)(n128_u64 + 32);
      v17[3] = v112;
      *uint64_t v17 = v110;
      v17[1] = v111;
      long long v113 = v718;
      long long v114 = v719;
      long long v115 = v721;
      *(_OWORD *)(n128_u64 + 32) = v720;
      *(_OWORD *)(n128_u64 + 48) = v115;
      *(_OWORD *)unint64_t n128_u64 = v113;
      *(_OWORD *)(n128_u64 + 16) = v114;
      long long v116 = v722;
      long long v117 = v723;
      long long v118 = v725;
      *(_OWORD *)(n128_u64 + 96) = v724;
      *(_OWORD *)(n128_u64 + 112) = v118;
      *(_OWORD *)(n128_u64 + 64) = v116;
      *(_OWORD *)(n128_u64 + 80) = v117;
      --a4;
      if (a5) {
        goto LABEL_59;
      }
LABEL_58:
      if (((uint64_t (*)(unint64_t, unint64_t))*a3)(a1 - 128, a1)) {
        goto LABEL_59;
      }
      __n128 v492 = *(__n128 *)a1;
      __n128 v493 = *(__n128 *)(a1 + 16);
      __n128 v494 = *(__n128 *)(a1 + 48);
      __n128 v712 = *(__n128 *)(a1 + 32);
      __n128 v713 = v494;
      __n128 v710 = v492;
      __n128 v711 = v493;
      __n128 v495 = *(__n128 *)(a1 + 64);
      __n128 v496 = *(__n128 *)(a1 + 80);
      __n128 v497 = *(__n128 *)(a1 + 112);
      __n128 v716 = *(__n128 *)(a1 + 96);
      __n128 v717 = v497;
      __n128 v714 = v495;
      __n128 v715 = v496;
      if (((uint64_t (*)(__n128 *, long long *))*a3)(&v710, v10))
      {
        unint64_t n128_u64 = a1;
        do
          n128_u64 += 128;
        while ((((uint64_t (*)(__n128 *, unint64_t))*a3)(&v710, n128_u64) & 1) == 0);
      }
      else
      {
        uint64_t v498 = (long long *)(a1 + 128);
        do
        {
          unint64_t n128_u64 = (unint64_t)v498;
          if (v498 >= a2) {
            break;
          }
          unsigned int v499 = (*a3)((long long *)&v710, v498);
          uint64_t v498 = (long long *)(n128_u64 + 128);
        }
        while (!v499);
      }
      uint64_t v500 = a2;
      if (n128_u64 < (unint64_t)a2)
      {
        uint64_t v500 = a2;
        do
          v500 -= 8;
        while ((((uint64_t (*)(__n128 *, long long *))*a3)(&v710, v500) & 1) != 0);
      }
      while (n128_u64 < (unint64_t)v500)
      {
        long long v501 = *(_OWORD *)n128_u64;
        long long v502 = *(_OWORD *)(n128_u64 + 16);
        long long v503 = *(_OWORD *)(n128_u64 + 48);
        long long v720 = *(_OWORD *)(n128_u64 + 32);
        long long v721 = v503;
        long long v718 = v501;
        long long v719 = v502;
        long long v504 = *(_OWORD *)(n128_u64 + 64);
        long long v505 = *(_OWORD *)(n128_u64 + 80);
        long long v506 = *(_OWORD *)(n128_u64 + 112);
        long long v724 = *(_OWORD *)(n128_u64 + 96);
        long long v725 = v506;
        long long v722 = v504;
        long long v723 = v505;
        long long v507 = v500[7];
        long long v509 = v500[4];
        long long v508 = v500[5];
        *(_OWORD *)(n128_u64 + 96) = v500[6];
        *(_OWORD *)(n128_u64 + 112) = v507;
        *(_OWORD *)(n128_u64 + 64) = v509;
        *(_OWORD *)(n128_u64 + 80) = v508;
        long long v510 = *v500;
        long long v511 = v500[1];
        long long v512 = v500[3];
        *(_OWORD *)(n128_u64 + 32) = v500[2];
        *(_OWORD *)(n128_u64 + 48) = v512;
        *(_OWORD *)unint64_t n128_u64 = v510;
        *(_OWORD *)(n128_u64 + 16) = v511;
        long long v513 = v718;
        long long v514 = v719;
        long long v515 = v721;
        v500[2] = v720;
        v500[3] = v515;
        *uint64_t v500 = v513;
        v500[1] = v514;
        long long v516 = v722;
        long long v517 = v723;
        long long v518 = v725;
        v500[6] = v724;
        v500[7] = v518;
        v500[4] = v516;
        v500[5] = v517;
        do
          n128_u64 += 128;
        while (!(*a3)((long long *)&v710, (long long *)n128_u64));
        do
          v500 -= 8;
        while ((((uint64_t (*)(__n128 *, long long *))*a3)(&v710, v500) & 1) != 0);
      }
      uint64_t v519 = (__n128 *)(n128_u64 - 128);
      BOOL v5 = n128_u64 - 128 >= a1;
      BOOL v6 = n128_u64 - 128 == a1;
      if (n128_u64 - 128 != a1)
      {
        __n128 v520 = *v519;
        long long v521 = *(_OWORD *)(n128_u64 - 112);
        long long v522 = *(_OWORD *)(n128_u64 - 80);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(n128_u64 - 96);
        *(_OWORD *)(a1 + 48) = v522;
        *(__n128 *)a1 = v520;
        *(_OWORD *)(a1 + 16) = v521;
        long long v523 = *(_OWORD *)(n128_u64 - 64);
        long long v524 = *(_OWORD *)(n128_u64 - 48);
        long long v525 = *(_OWORD *)(n128_u64 - 16);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(n128_u64 - 32);
        *(_OWORD *)(a1 + 112) = v525;
        *(_OWORD *)(a1 + 64) = v523;
        *(_OWORD *)(a1 + 80) = v524;
      }
      a5 = 0;
      __n128 v526 = v710;
      __n128 v527 = v711;
      __n128 v528 = v713;
      *(__n128 *)(n128_u64 - 96) = v712;
      *(__n128 *)(n128_u64 - 80) = v528;
      *uint64_t v519 = v526;
      *(__n128 *)(n128_u64 - 112) = v527;
      __n128 v529 = v714;
      __n128 v530 = v715;
      __n128 v531 = v717;
      *(__n128 *)(n128_u64 - 32) = v716;
      *(__n128 *)(n128_u64 - 16) = v531;
      *(__n128 *)(n128_u64 - 64) = v529;
      *(__n128 *)(n128_u64 - 48) = v530;
    }
  }
  switch(v15)
  {
    case 0uLL:
    case 1uLL:
      return;
    case 2uLL:
      if (!(*a3)(v10, (long long *)n128_u64)) {
        return;
      }
      goto LABEL_106;
    case 3uLL:
      float v532 = (long long *)(n128_u64 + 128);
      char v533 = (*a3)((long long *)(n128_u64 + 128), (long long *)n128_u64);
      unsigned int v534 = (*a3)(v10, (long long *)(n128_u64 + 128));
      if (v533)
      {
        if (v534)
        {
LABEL_106:
          long long v535 = *(_OWORD *)n128_u64;
          long long v536 = *(_OWORD *)(n128_u64 + 16);
          long long v537 = *(_OWORD *)(n128_u64 + 48);
          long long v720 = *(_OWORD *)(n128_u64 + 32);
          long long v721 = v537;
          long long v718 = v535;
          long long v719 = v536;
          long long v538 = *(_OWORD *)(n128_u64 + 64);
          long long v539 = *(_OWORD *)(n128_u64 + 80);
          long long v540 = *(_OWORD *)(n128_u64 + 112);
          long long v724 = *(_OWORD *)(n128_u64 + 96);
          long long v725 = v540;
          long long v722 = v538;
          long long v723 = v539;
          long long v541 = v10[7];
          long long v543 = v10[4];
          long long v542 = v10[5];
          *(_OWORD *)(n128_u64 + 96) = v10[6];
          *(_OWORD *)(n128_u64 + 112) = v541;
          *(_OWORD *)(n128_u64 + 64) = v543;
          *(_OWORD *)(n128_u64 + 80) = v542;
          long long v544 = *v10;
          long long v545 = v10[1];
          long long v546 = v10[3];
          *(_OWORD *)(n128_u64 + 32) = v10[2];
          *(_OWORD *)(n128_u64 + 48) = v546;
          *(_OWORD *)unint64_t n128_u64 = v544;
          *(_OWORD *)(n128_u64 + 16) = v545;
        }
        else
        {
          long long v681 = *(_OWORD *)n128_u64;
          long long v682 = *(_OWORD *)(n128_u64 + 16);
          long long v683 = *(_OWORD *)(n128_u64 + 48);
          long long v720 = *(_OWORD *)(n128_u64 + 32);
          long long v721 = v683;
          long long v718 = v681;
          long long v719 = v682;
          long long v684 = *(_OWORD *)(n128_u64 + 64);
          long long v685 = *(_OWORD *)(n128_u64 + 80);
          long long v686 = *(_OWORD *)(n128_u64 + 112);
          long long v724 = *(_OWORD *)(n128_u64 + 96);
          long long v725 = v686;
          long long v722 = v684;
          long long v723 = v685;
          long long v687 = *(_OWORD *)(n128_u64 + 208);
          *(_OWORD *)(n128_u64 + 64) = *(_OWORD *)(n128_u64 + 192);
          *(_OWORD *)(n128_u64 + 80) = v687;
          long long v688 = *(_OWORD *)(n128_u64 + 240);
          *(_OWORD *)(n128_u64 + 96) = *(_OWORD *)(n128_u64 + 224);
          *(_OWORD *)(n128_u64 + 112) = v688;
          long long v689 = *(_OWORD *)(n128_u64 + 144);
          *(_OWORD *)unint64_t n128_u64 = *v532;
          *(_OWORD *)(n128_u64 + 16) = v689;
          long long v690 = *(_OWORD *)(n128_u64 + 176);
          *(_OWORD *)(n128_u64 + 32) = *(_OWORD *)(n128_u64 + 160);
          *(_OWORD *)(n128_u64 + 48) = v690;
          long long v691 = v718;
          long long v692 = v719;
          long long v693 = v721;
          *(_OWORD *)(n128_u64 + 160) = v720;
          *(_OWORD *)(n128_u64 + 176) = v693;
          *float v532 = v691;
          *(_OWORD *)(n128_u64 + 144) = v692;
          long long v694 = v722;
          long long v695 = v723;
          long long v696 = v725;
          *(_OWORD *)(n128_u64 + 224) = v724;
          *(_OWORD *)(n128_u64 + 240) = v696;
          *(_OWORD *)(n128_u64 + 192) = v694;
          *(_OWORD *)(n128_u64 + 208) = v695;
          if (!(*a3)(v10, (long long *)(n128_u64 + 128))) {
            return;
          }
          long long v697 = *(_OWORD *)(n128_u64 + 208);
          long long v722 = *(_OWORD *)(n128_u64 + 192);
          long long v723 = v697;
          long long v698 = *(_OWORD *)(n128_u64 + 240);
          long long v724 = *(_OWORD *)(n128_u64 + 224);
          long long v725 = v698;
          long long v699 = *(_OWORD *)(n128_u64 + 144);
          long long v718 = *v532;
          long long v719 = v699;
          long long v700 = *(_OWORD *)(n128_u64 + 176);
          long long v720 = *(_OWORD *)(n128_u64 + 160);
          long long v721 = v700;
          long long v701 = *v10;
          long long v702 = v10[1];
          long long v703 = v10[3];
          *(_OWORD *)(n128_u64 + 160) = v10[2];
          *(_OWORD *)(n128_u64 + 176) = v703;
          *float v532 = v701;
          *(_OWORD *)(n128_u64 + 144) = v702;
          long long v705 = v10[6];
          long long v704 = v10[7];
          long long v706 = v10[5];
          *(_OWORD *)(n128_u64 + 192) = v10[4];
          *(_OWORD *)(n128_u64 + 208) = v706;
          *(_OWORD *)(n128_u64 + 224) = v705;
          *(_OWORD *)(n128_u64 + 240) = v704;
        }
        long long v547 = v718;
        long long v548 = v719;
        long long v549 = v721;
        v10[2] = v720;
        v10[3] = v549;
        long long *v10 = v547;
        v10[1] = v548;
        long long v550 = v722;
        long long v551 = v723;
        long long v552 = v725;
        v10[6] = v724;
        v10[7] = v552;
        v10[4] = v550;
        v10[5] = v551;
        return;
      }
      if (v534)
      {
        long long v629 = *(_OWORD *)(n128_u64 + 208);
        long long v722 = *(_OWORD *)(n128_u64 + 192);
        long long v723 = v629;
        long long v630 = *(_OWORD *)(n128_u64 + 240);
        long long v724 = *(_OWORD *)(n128_u64 + 224);
        long long v725 = v630;
        long long v631 = *(_OWORD *)(n128_u64 + 144);
        long long v718 = *v532;
        long long v719 = v631;
        long long v632 = *(_OWORD *)(n128_u64 + 176);
        long long v720 = *(_OWORD *)(n128_u64 + 160);
        long long v721 = v632;
        long long v633 = *v10;
        long long v634 = v10[1];
        long long v635 = v10[3];
        *(_OWORD *)(n128_u64 + 160) = v10[2];
        *(_OWORD *)(n128_u64 + 176) = v635;
        *float v532 = v633;
        *(_OWORD *)(n128_u64 + 144) = v634;
        long long v637 = v10[6];
        long long v636 = v10[7];
        long long v638 = v10[5];
        *(_OWORD *)(n128_u64 + 192) = v10[4];
        *(_OWORD *)(n128_u64 + 208) = v638;
        *(_OWORD *)(n128_u64 + 224) = v637;
        *(_OWORD *)(n128_u64 + 240) = v636;
        long long v639 = v718;
        long long v640 = v719;
        long long v641 = v721;
        v10[2] = v720;
        v10[3] = v641;
        long long *v10 = v639;
        v10[1] = v640;
        long long v642 = v722;
        long long v643 = v723;
        long long v644 = v725;
        v10[6] = v724;
        v10[7] = v644;
        v10[4] = v642;
        v10[5] = v643;
LABEL_134:
        if ((*a3)(v532, (long long *)n128_u64))
        {
          long long v645 = *(_OWORD *)n128_u64;
          long long v646 = *(_OWORD *)(n128_u64 + 16);
          long long v647 = *(_OWORD *)(n128_u64 + 48);
          long long v720 = *(_OWORD *)(n128_u64 + 32);
          long long v721 = v647;
          long long v718 = v645;
          long long v719 = v646;
          long long v648 = *(_OWORD *)(n128_u64 + 64);
          long long v649 = *(_OWORD *)(n128_u64 + 80);
          long long v650 = *(_OWORD *)(n128_u64 + 112);
          long long v724 = *(_OWORD *)(n128_u64 + 96);
          long long v725 = v650;
          long long v722 = v648;
          long long v723 = v649;
          long long v651 = v532[5];
          *(_OWORD *)(n128_u64 + 64) = v532[4];
          *(_OWORD *)(n128_u64 + 80) = v651;
          long long v652 = v532[7];
          *(_OWORD *)(n128_u64 + 96) = v532[6];
          *(_OWORD *)(n128_u64 + 112) = v652;
          long long v653 = v532[1];
          *(_OWORD *)unint64_t n128_u64 = *v532;
          *(_OWORD *)(n128_u64 + 16) = v653;
          long long v654 = v532[3];
          *(_OWORD *)(n128_u64 + 32) = v532[2];
          *(_OWORD *)(n128_u64 + 48) = v654;
          long long v655 = v718;
          long long v656 = v719;
          long long v657 = v721;
          v532[2] = v720;
          v532[3] = v657;
          *float v532 = v655;
          v532[1] = v656;
          long long v658 = v722;
          long long v659 = v723;
          long long v660 = v725;
          v532[6] = v724;
          v532[7] = v660;
          v532[4] = v658;
          v532[5] = v659;
        }
      }
      break;
    case 4uLL:
      sub_2194CBEF0((__n128 *)n128_u64, (__n128 *)(n128_u64 + 128), (__n128 *)(n128_u64 + 256), (__n128 *)v10, (uint64_t (**)(__n128 *, __n128 *))a3);
      return;
    case 5uLL:
      float v532 = (long long *)(n128_u64 + 128);
      unint64_t v553 = (long long *)(n128_u64 + 256);
      float v554 = (__n128 *)(n128_u64 + 384);
      __n128 v555 = sub_2194CBEF0((__n128 *)n128_u64, (__n128 *)(n128_u64 + 128), (__n128 *)(n128_u64 + 256), (__n128 *)(n128_u64 + 384), (uint64_t (**)(__n128 *, __n128 *))a3);
      if (!((unsigned int (*)(long long *, unint64_t, __n128))*a3)(v10, n128_u64 + 384, v555)) {
        return;
      }
      long long v556 = *(_OWORD *)(n128_u64 + 464);
      long long v722 = *(_OWORD *)(n128_u64 + 448);
      long long v723 = v556;
      long long v557 = *(_OWORD *)(n128_u64 + 496);
      long long v724 = *(_OWORD *)(n128_u64 + 480);
      long long v725 = v557;
      long long v558 = *(_OWORD *)(n128_u64 + 400);
      long long v718 = (__int128)*v554;
      long long v719 = v558;
      long long v559 = *(_OWORD *)(n128_u64 + 432);
      long long v720 = *(_OWORD *)(n128_u64 + 416);
      long long v721 = v559;
      __n128 v560 = (__n128)*v10;
      long long v561 = v10[1];
      long long v562 = v10[3];
      *(_OWORD *)(n128_u64 + 416) = v10[2];
      *(_OWORD *)(n128_u64 + 432) = v562;
      *float v554 = v560;
      *(_OWORD *)(n128_u64 + 400) = v561;
      long long v564 = v10[6];
      long long v563 = v10[7];
      long long v565 = v10[5];
      *(_OWORD *)(n128_u64 + 448) = v10[4];
      *(_OWORD *)(n128_u64 + 464) = v565;
      *(_OWORD *)(n128_u64 + 480) = v564;
      *(_OWORD *)(n128_u64 + 496) = v563;
      long long v566 = v718;
      long long v567 = v719;
      long long v568 = v721;
      v10[2] = v720;
      v10[3] = v568;
      long long *v10 = v566;
      v10[1] = v567;
      long long v569 = v722;
      long long v570 = v723;
      long long v571 = v725;
      v10[6] = v724;
      v10[7] = v571;
      v10[4] = v569;
      v10[5] = v570;
      if (!(*a3)((long long *)(n128_u64 + 384), (long long *)(n128_u64 + 256))) {
        return;
      }
      long long v572 = *(_OWORD *)(n128_u64 + 336);
      long long v722 = *(_OWORD *)(n128_u64 + 320);
      long long v723 = v572;
      long long v573 = *(_OWORD *)(n128_u64 + 368);
      long long v724 = *(_OWORD *)(n128_u64 + 352);
      long long v725 = v573;
      long long v574 = *(_OWORD *)(n128_u64 + 272);
      long long v718 = *v553;
      long long v719 = v574;
      long long v575 = *(_OWORD *)(n128_u64 + 304);
      long long v720 = *(_OWORD *)(n128_u64 + 288);
      long long v721 = v575;
      __n128 v576 = *v554;
      long long v577 = *(_OWORD *)(n128_u64 + 400);
      long long v578 = *(_OWORD *)(n128_u64 + 432);
      *(_OWORD *)(n128_u64 + 288) = *(_OWORD *)(n128_u64 + 416);
      *(_OWORD *)(n128_u64 + 304) = v578;
      *unint64_t v553 = (__int128)v576;
      *(_OWORD *)(n128_u64 + 272) = v577;
      long long v579 = *(_OWORD *)(n128_u64 + 448);
      long long v580 = *(_OWORD *)(n128_u64 + 464);
      long long v581 = *(_OWORD *)(n128_u64 + 496);
      *(_OWORD *)(n128_u64 + 352) = *(_OWORD *)(n128_u64 + 480);
      *(_OWORD *)(n128_u64 + 368) = v581;
      *(_OWORD *)(n128_u64 + 320) = v579;
      *(_OWORD *)(n128_u64 + 336) = v580;
      long long v582 = v718;
      long long v583 = v719;
      long long v584 = v721;
      *(_OWORD *)(n128_u64 + 416) = v720;
      *(_OWORD *)(n128_u64 + 432) = v584;
      *float v554 = (__n128)v582;
      *(_OWORD *)(n128_u64 + 400) = v583;
      long long v585 = v722;
      long long v586 = v723;
      long long v587 = v725;
      *(_OWORD *)(n128_u64 + 480) = v724;
      *(_OWORD *)(n128_u64 + 496) = v587;
      *(_OWORD *)(n128_u64 + 448) = v585;
      *(_OWORD *)(n128_u64 + 464) = v586;
      if (!(*a3)((long long *)(n128_u64 + 256), (long long *)(n128_u64 + 128))) {
        return;
      }
      long long v588 = *(_OWORD *)(n128_u64 + 208);
      long long v722 = *(_OWORD *)(n128_u64 + 192);
      long long v723 = v588;
      long long v589 = *(_OWORD *)(n128_u64 + 240);
      long long v724 = *(_OWORD *)(n128_u64 + 224);
      long long v725 = v589;
      long long v590 = *(_OWORD *)(n128_u64 + 144);
      long long v718 = *v532;
      long long v719 = v590;
      long long v591 = *(_OWORD *)(n128_u64 + 176);
      long long v720 = *(_OWORD *)(n128_u64 + 160);
      long long v721 = v591;
      long long v592 = *v553;
      long long v593 = *(_OWORD *)(n128_u64 + 272);
      long long v594 = *(_OWORD *)(n128_u64 + 304);
      *(_OWORD *)(n128_u64 + 160) = *(_OWORD *)(n128_u64 + 288);
      *(_OWORD *)(n128_u64 + 176) = v594;
      *float v532 = v592;
      *(_OWORD *)(n128_u64 + 144) = v593;
      long long v595 = *(_OWORD *)(n128_u64 + 320);
      long long v596 = *(_OWORD *)(n128_u64 + 336);
      long long v597 = *(_OWORD *)(n128_u64 + 368);
      *(_OWORD *)(n128_u64 + 224) = *(_OWORD *)(n128_u64 + 352);
      *(_OWORD *)(n128_u64 + 240) = v597;
      *(_OWORD *)(n128_u64 + 192) = v595;
      *(_OWORD *)(n128_u64 + 208) = v596;
      long long v598 = v718;
      long long v599 = v719;
      long long v600 = v721;
      *(_OWORD *)(n128_u64 + 288) = v720;
      *(_OWORD *)(n128_u64 + 304) = v600;
      *unint64_t v553 = v598;
      *(_OWORD *)(n128_u64 + 272) = v599;
      long long v601 = v722;
      long long v602 = v723;
      long long v603 = v725;
      *(_OWORD *)(n128_u64 + 352) = v724;
      *(_OWORD *)(n128_u64 + 368) = v603;
      *(_OWORD *)(n128_u64 + 320) = v601;
      *(_OWORD *)(n128_u64 + 336) = v602;
      goto LABEL_134;
    default:
      JUMPOUT(0);
  }
}

BOOL sub_2194CB658(__n128 *a1, __n128 *a2, uint64_t (**a3)(__n128 *, __n128 *))
{
  uint64_t v251 = *MEMORY[0x263EF8340];
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 7;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v8 = a2 - 8;
      if (!(*a3)(a2 - 8, a1)) {
        return 1;
      }
      __n128 v9 = a1[5];
      __n128 v247 = a1[4];
      __n128 v248 = v9;
      __n128 v10 = a1[7];
      __n128 v249 = a1[6];
      __n128 v250 = v10;
      __n128 v11 = a1[1];
      __n128 v243 = *a1;
      __n128 v244 = v11;
      __n128 v12 = a1[3];
      __n128 v245 = a1[2];
      __n128 v246 = v12;
      __n128 v13 = a2[-4];
      __n128 v14 = a2[-3];
      __n128 v15 = a2[-1];
      a1[6] = a2[-2];
      a1[7] = v15;
      a1[4] = v13;
      a1[5] = v14;
      __n128 v16 = *v8;
      __n128 v17 = a2[-7];
      __n128 v18 = a2[-5];
      a1[2] = a2[-6];
      a1[3] = v18;
      *a1 = v16;
      a1[1] = v17;
      __n128 v19 = v246;
      a2[-6] = v245;
      a2[-5] = v19;
      __n128 v20 = v244;
      *unint64_t v8 = v243;
      a2[-7] = v20;
      __n128 v21 = v250;
      a2[-2] = v249;
      a2[-1] = v21;
      __n128 v22 = v248;
      BOOL result = 1;
      a2[-4] = v247;
      a2[-3] = v22;
      return result;
    case 3:
      long long v37 = a1 + 8;
      long long v38 = a2 - 8;
      char v39 = (*a3)(a1 + 8, a1);
      int v40 = (*a3)(v38, a1 + 8);
      if ((v39 & 1) == 0)
      {
        if (!v40) {
          return 1;
        }
        __n128 v133 = a1[13];
        __n128 v247 = a1[12];
        __n128 v248 = v133;
        __n128 v134 = a1[15];
        __n128 v249 = a1[14];
        __n128 v250 = v134;
        __n128 v135 = a1[9];
        __n128 v243 = *v37;
        __n128 v244 = v135;
        __n128 v136 = a1[11];
        __n128 v245 = a1[10];
        __n128 v246 = v136;
        __n128 v137 = v38[4];
        __n128 v138 = v38[5];
        __n128 v139 = v38[7];
        a1[14] = v38[6];
        a1[15] = v139;
        a1[12] = v137;
        a1[13] = v138;
        __n128 v140 = *v38;
        __n128 v141 = v38[1];
        __n128 v142 = v38[3];
        a1[10] = v38[2];
        a1[11] = v142;
        *long long v37 = v140;
        a1[9] = v141;
        __n128 v143 = v246;
        void v38[2] = v245;
        v38[3] = v143;
        __n128 v144 = v244;
        *long long v38 = v243;
        v38[1] = v144;
        __n128 v145 = v250;
        v38[6] = v249;
        v38[7] = v145;
        __n128 v146 = v248;
        v38[4] = v247;
        v38[5] = v146;
        goto LABEL_20;
      }
      if (v40)
      {
        __n128 v41 = a1[5];
        __n128 v247 = a1[4];
        __n128 v248 = v41;
        __n128 v42 = a1[7];
        __n128 v249 = a1[6];
        __n128 v250 = v42;
        __n128 v43 = a1[1];
        __n128 v243 = *a1;
        __n128 v244 = v43;
        __n128 v44 = a1[3];
        __n128 v245 = a1[2];
        __n128 v246 = v44;
        __n128 v45 = v38[4];
        __n128 v46 = v38[5];
        __n128 v47 = v38[7];
        a1[6] = v38[6];
        a1[7] = v47;
        a1[4] = v45;
        a1[5] = v46;
        __n128 v48 = *v38;
        __n128 v49 = v38[1];
        __n128 v50 = v38[3];
        a1[2] = v38[2];
        a1[3] = v50;
        *a1 = v48;
        a1[1] = v49;
      }
      else
      {
        __n128 v213 = a1[5];
        __n128 v247 = a1[4];
        __n128 v248 = v213;
        __n128 v214 = a1[7];
        __n128 v249 = a1[6];
        __n128 v250 = v214;
        __n128 v215 = a1[1];
        __n128 v243 = *a1;
        __n128 v244 = v215;
        __n128 v216 = a1[3];
        __n128 v245 = a1[2];
        __n128 v246 = v216;
        __n128 v217 = *v37;
        __n128 v218 = a1[9];
        __n128 v219 = a1[11];
        a1[2] = a1[10];
        a1[3] = v219;
        *a1 = v217;
        a1[1] = v218;
        __n128 v220 = a1[12];
        __n128 v221 = a1[13];
        __n128 v222 = a1[15];
        a1[6] = a1[14];
        a1[7] = v222;
        a1[4] = v220;
        a1[5] = v221;
        __n128 v223 = v243;
        __n128 v224 = v244;
        __n128 v225 = v246;
        a1[10] = v245;
        a1[11] = v225;
        *long long v37 = v223;
        a1[9] = v224;
        __n128 v226 = v247;
        __n128 v227 = v248;
        __n128 v228 = v250;
        a1[14] = v249;
        a1[15] = v228;
        a1[12] = v226;
        a1[13] = v227;
        if (!(*a3)(v38, a1 + 8)) {
          return 1;
        }
        __n128 v229 = a1[13];
        __n128 v247 = a1[12];
        __n128 v248 = v229;
        __n128 v230 = a1[15];
        __n128 v249 = a1[14];
        __n128 v250 = v230;
        __n128 v231 = a1[9];
        __n128 v243 = *v37;
        __n128 v244 = v231;
        __n128 v232 = a1[11];
        __n128 v245 = a1[10];
        __n128 v246 = v232;
        __n128 v233 = v38[4];
        __n128 v234 = v38[5];
        __n128 v235 = v38[7];
        a1[14] = v38[6];
        a1[15] = v235;
        a1[12] = v233;
        a1[13] = v234;
        __n128 v236 = *v38;
        __n128 v237 = v38[1];
        __n128 v238 = v38[3];
        a1[10] = v38[2];
        a1[11] = v238;
        *long long v37 = v236;
        a1[9] = v237;
      }
      __n128 v239 = v246;
      void v38[2] = v245;
      v38[3] = v239;
      __n128 v240 = v244;
      *long long v38 = v243;
      v38[1] = v240;
      __n128 v241 = v250;
      v38[6] = v249;
      v38[7] = v241;
      __n128 v242 = v248;
      BOOL result = 1;
      v38[4] = v247;
      v38[5] = v242;
      return result;
    case 4:
      sub_2194CBEF0(a1, a1 + 8, a1 + 16, a2 - 8, a3);
      return 1;
    case 5:
      long long v37 = a1 + 8;
      long long v51 = a1 + 16;
      long long v52 = a1 + 24;
      long long v53 = a2 - 8;
      __n128 v54 = sub_2194CBEF0(a1, a1 + 8, a1 + 16, a1 + 24, a3);
      if (!((unsigned int (*)(__n128 *, __n128 *, __n128))*a3)(v53, &a1[24], v54)) {
        return 1;
      }
      __n128 v55 = a1[29];
      __n128 v247 = a1[28];
      __n128 v248 = v55;
      __n128 v56 = a1[31];
      __n128 v249 = a1[30];
      __n128 v250 = v56;
      __n128 v57 = a1[25];
      __n128 v243 = *v52;
      __n128 v244 = v57;
      __n128 v58 = a1[27];
      __n128 v245 = a1[26];
      __n128 v246 = v58;
      __n128 v59 = v53[4];
      __n128 v60 = v53[5];
      __n128 v61 = v53[7];
      a1[30] = v53[6];
      a1[31] = v61;
      a1[28] = v59;
      a1[29] = v60;
      __n128 v62 = *v53;
      __n128 v63 = v53[1];
      __n128 v64 = v53[3];
      a1[26] = v53[2];
      a1[27] = v64;
      *long long v52 = v62;
      a1[25] = v63;
      __n128 v65 = v246;
      v53[2] = v245;
      v53[3] = v65;
      __n128 v66 = v244;
      *long long v53 = v243;
      v53[1] = v66;
      __n128 v67 = v250;
      v53[6] = v249;
      v53[7] = v67;
      __n128 v68 = v248;
      v53[4] = v247;
      v53[5] = v68;
      if (!(*a3)(a1 + 24, a1 + 16)) {
        return 1;
      }
      __n128 v69 = a1[21];
      __n128 v247 = a1[20];
      __n128 v248 = v69;
      __n128 v70 = a1[23];
      __n128 v249 = a1[22];
      __n128 v250 = v70;
      __n128 v71 = a1[17];
      __n128 v243 = *v51;
      __n128 v244 = v71;
      __n128 v72 = a1[19];
      __n128 v245 = a1[18];
      __n128 v246 = v72;
      __n128 v73 = *v52;
      __n128 v74 = a1[25];
      __n128 v75 = a1[27];
      a1[18] = a1[26];
      a1[19] = v75;
      *long long v51 = v73;
      a1[17] = v74;
      __n128 v76 = a1[28];
      __n128 v77 = a1[29];
      __n128 v78 = a1[31];
      a1[22] = a1[30];
      a1[23] = v78;
      a1[20] = v76;
      a1[21] = v77;
      __n128 v79 = v243;
      __n128 v80 = v244;
      __n128 v81 = v246;
      a1[26] = v245;
      a1[27] = v81;
      *long long v52 = v79;
      a1[25] = v80;
      __n128 v82 = v247;
      __n128 v83 = v248;
      __n128 v84 = v250;
      a1[30] = v249;
      a1[31] = v84;
      a1[28] = v82;
      a1[29] = v83;
      if (!(*a3)(a1 + 16, a1 + 8)) {
        return 1;
      }
      __n128 v85 = a1[13];
      __n128 v247 = a1[12];
      __n128 v248 = v85;
      __n128 v86 = a1[15];
      __n128 v249 = a1[14];
      __n128 v250 = v86;
      __n128 v87 = a1[9];
      __n128 v243 = *v37;
      __n128 v244 = v87;
      __n128 v88 = a1[11];
      __n128 v245 = a1[10];
      __n128 v246 = v88;
      __n128 v89 = *v51;
      __n128 v90 = a1[17];
      __n128 v91 = a1[19];
      a1[10] = a1[18];
      a1[11] = v91;
      *long long v37 = v89;
      a1[9] = v90;
      __n128 v92 = a1[20];
      __n128 v93 = a1[21];
      __n128 v94 = a1[23];
      a1[14] = a1[22];
      a1[15] = v94;
      a1[12] = v92;
      a1[13] = v93;
      __n128 v95 = v243;
      __n128 v96 = v244;
      __n128 v97 = v246;
      a1[18] = v245;
      a1[19] = v97;
      *long long v51 = v95;
      a1[17] = v96;
      __n128 v98 = v247;
      __n128 v99 = v248;
      __n128 v100 = v250;
      a1[22] = v249;
      a1[23] = v100;
      a1[20] = v98;
      a1[21] = v99;
LABEL_20:
      if (!(*a3)(v37, a1)) {
        return 1;
      }
      __n128 v147 = a1[5];
      __n128 v247 = a1[4];
      __n128 v248 = v147;
      __n128 v148 = a1[7];
      __n128 v249 = a1[6];
      __n128 v250 = v148;
      __n128 v149 = a1[1];
      __n128 v243 = *a1;
      __n128 v244 = v149;
      __n128 v150 = a1[3];
      __n128 v245 = a1[2];
      __n128 v246 = v150;
      __n128 v151 = *v37;
      __n128 v152 = v37[1];
      __n128 v153 = v37[3];
      a1[2] = v37[2];
      a1[3] = v153;
      *a1 = v151;
      a1[1] = v152;
      __n128 v154 = v37[4];
      __n128 v155 = v37[5];
      __n128 v156 = v37[7];
      a1[6] = v37[6];
      a1[7] = v156;
      a1[4] = v154;
      a1[5] = v155;
      __n128 v157 = v243;
      __n128 v158 = v244;
      __n128 v159 = v246;
      v37[2] = v245;
      v37[3] = v159;
      *long long v37 = v157;
      v37[1] = v158;
      __n128 v160 = v247;
      __n128 v161 = v248;
      __n128 v162 = v250;
      v37[6] = v249;
      v37[7] = v162;
      BOOL result = 1;
      v37[4] = v160;
      v37[5] = v161;
      return result;
    default:
      long long v23 = a1 + 16;
      long long v24 = a1 + 8;
      char v25 = (*a3)(a1 + 8, a1);
      int v26 = (*a3)(a1 + 16, a1 + 8);
      if (v25)
      {
        if (v26)
        {
          __n128 v27 = a1[5];
          __n128 v247 = a1[4];
          __n128 v248 = v27;
          __n128 v28 = a1[7];
          __n128 v249 = a1[6];
          __n128 v250 = v28;
          __n128 v29 = a1[1];
          __n128 v243 = *a1;
          __n128 v244 = v29;
          __n128 v30 = a1[3];
          __n128 v245 = a1[2];
          __n128 v246 = v30;
          __n128 v31 = *v23;
          __n128 v32 = a1[17];
          __n128 v33 = a1[19];
          a1[2] = a1[18];
          a1[3] = v33;
          *a1 = v31;
          a1[1] = v32;
          __n128 v34 = a1[20];
          __n128 v35 = a1[21];
          __n128 v36 = a1[23];
          a1[6] = a1[22];
          a1[7] = v36;
          a1[4] = v34;
          a1[5] = v35;
        }
        else
        {
          __n128 v163 = a1[5];
          __n128 v247 = a1[4];
          __n128 v248 = v163;
          __n128 v164 = a1[7];
          __n128 v249 = a1[6];
          __n128 v250 = v164;
          __n128 v165 = a1[1];
          __n128 v243 = *a1;
          __n128 v244 = v165;
          __n128 v166 = a1[3];
          __n128 v245 = a1[2];
          __n128 v246 = v166;
          __n128 v167 = *v24;
          __n128 v168 = a1[9];
          __n128 v169 = a1[11];
          a1[2] = a1[10];
          a1[3] = v169;
          *a1 = v167;
          a1[1] = v168;
          __n128 v170 = a1[12];
          __n128 v171 = a1[13];
          __n128 v172 = a1[15];
          a1[6] = a1[14];
          a1[7] = v172;
          a1[4] = v170;
          a1[5] = v171;
          __n128 v173 = v243;
          __n128 v174 = v244;
          __n128 v175 = v246;
          a1[10] = v245;
          a1[11] = v175;
          *long long v24 = v173;
          a1[9] = v174;
          __n128 v176 = v247;
          __n128 v177 = v248;
          __n128 v178 = v250;
          a1[14] = v249;
          a1[15] = v178;
          a1[12] = v176;
          a1[13] = v177;
          if (!(*a3)(a1 + 16, a1 + 8)) {
            goto LABEL_25;
          }
          __n128 v179 = a1[13];
          __n128 v247 = a1[12];
          __n128 v248 = v179;
          __n128 v180 = a1[15];
          __n128 v249 = a1[14];
          __n128 v250 = v180;
          __n128 v181 = a1[9];
          __n128 v243 = *v24;
          __n128 v244 = v181;
          __n128 v182 = a1[11];
          __n128 v245 = a1[10];
          __n128 v246 = v182;
          __n128 v183 = *v23;
          __n128 v184 = a1[17];
          __n128 v185 = a1[19];
          a1[10] = a1[18];
          a1[11] = v185;
          *long long v24 = v183;
          a1[9] = v184;
          __n128 v186 = a1[20];
          __n128 v187 = a1[21];
          __n128 v188 = a1[23];
          a1[14] = a1[22];
          a1[15] = v188;
          a1[12] = v186;
          a1[13] = v187;
        }
        __n128 v189 = v243;
        __n128 v190 = v244;
        __n128 v191 = v246;
        a1[18] = v245;
        a1[19] = v191;
        *long long v23 = v189;
        a1[17] = v190;
        __n128 v192 = v247;
        __n128 v193 = v248;
        __n128 v194 = v250;
        a1[22] = v249;
        a1[23] = v194;
        a1[20] = v192;
        a1[21] = v193;
      }
      else if (v26)
      {
        __n128 v101 = a1[13];
        __n128 v247 = a1[12];
        __n128 v248 = v101;
        __n128 v102 = a1[15];
        __n128 v249 = a1[14];
        __n128 v250 = v102;
        __n128 v103 = a1[9];
        __n128 v243 = *v24;
        __n128 v244 = v103;
        __n128 v104 = a1[11];
        __n128 v245 = a1[10];
        __n128 v246 = v104;
        __n128 v105 = *v23;
        __n128 v106 = a1[17];
        __n128 v107 = a1[19];
        a1[10] = a1[18];
        a1[11] = v107;
        *long long v24 = v105;
        a1[9] = v106;
        __n128 v108 = a1[20];
        __n128 v109 = a1[21];
        __n128 v110 = a1[23];
        a1[14] = a1[22];
        a1[15] = v110;
        a1[12] = v108;
        a1[13] = v109;
        __n128 v111 = v243;
        __n128 v112 = v244;
        __n128 v113 = v246;
        a1[18] = v245;
        a1[19] = v113;
        *long long v23 = v111;
        a1[17] = v112;
        __n128 v114 = v247;
        __n128 v115 = v248;
        __n128 v116 = v250;
        a1[22] = v249;
        a1[23] = v116;
        a1[20] = v114;
        a1[21] = v115;
        if ((*a3)(a1 + 8, a1))
        {
          __n128 v117 = a1[5];
          __n128 v247 = a1[4];
          __n128 v248 = v117;
          __n128 v118 = a1[7];
          __n128 v249 = a1[6];
          __n128 v250 = v118;
          __n128 v119 = a1[1];
          __n128 v243 = *a1;
          __n128 v244 = v119;
          __n128 v120 = a1[3];
          __n128 v245 = a1[2];
          __n128 v246 = v120;
          __n128 v121 = *v24;
          __n128 v122 = a1[9];
          __n128 v123 = a1[11];
          a1[2] = a1[10];
          a1[3] = v123;
          *a1 = v121;
          a1[1] = v122;
          __n128 v124 = a1[12];
          __n128 v125 = a1[13];
          __n128 v126 = a1[15];
          a1[6] = a1[14];
          a1[7] = v126;
          a1[4] = v124;
          a1[5] = v125;
          __n128 v127 = v243;
          __n128 v128 = v244;
          __n128 v129 = v246;
          a1[10] = v245;
          a1[11] = v129;
          *long long v24 = v127;
          a1[9] = v128;
          __n128 v130 = v247;
          __n128 v131 = v248;
          __n128 v132 = v250;
          a1[14] = v249;
          a1[15] = v132;
          a1[12] = v130;
          a1[13] = v131;
        }
      }
LABEL_25:
      long long v195 = a1 + 24;
      if (&a1[24] == a2) {
        return 1;
      }
      uint64_t v196 = 0;
      int v197 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v195, v23))
    {
      __n128 v203 = v195[5];
      __n128 v247 = v195[4];
      __n128 v248 = v203;
      __n128 v204 = v195[7];
      __n128 v249 = v195[6];
      __n128 v250 = v204;
      __n128 v205 = v195[1];
      __n128 v243 = *v195;
      __n128 v244 = v205;
      __n128 v206 = v195[3];
      uint64_t v207 = v196;
      __n128 v245 = v195[2];
      __n128 v246 = v206;
      do
      {
        long long v208 = (__n128 *)((char *)a1 + v207);
        __n128 v209 = *(__n128 *)((char *)a1 + v207 + 336);
        v208[28] = *(__n128 *)((char *)a1 + v207 + 320);
        v208[29] = v209;
        __n128 v210 = *(__n128 *)((char *)a1 + v207 + 368);
        v208[30] = *(__n128 *)((char *)a1 + v207 + 352);
        v208[31] = v210;
        __n128 v211 = *(__n128 *)((char *)a1 + v207 + 272);
        v208[24] = *(__n128 *)((char *)a1 + v207 + 256);
        v208[25] = v211;
        __n128 v212 = *(__n128 *)((char *)a1 + v207 + 304);
        v208[26] = *(__n128 *)((char *)a1 + v207 + 288);
        v208[27] = v212;
        if (v207 == -256)
        {
          long long v198 = a1;
          goto LABEL_28;
        }
        v207 -= 128;
      }
      while (((*a3)(&v243, v208 + 8) & 1) != 0);
      long long v198 = (__n128 *)((char *)a1 + v207 + 384);
LABEL_28:
      __n128 v199 = v248;
      v198[4] = v247;
      v198[5] = v199;
      __n128 v200 = v250;
      v198[6] = v249;
      v198[7] = v200;
      __n128 v201 = v244;
      *long long v198 = v243;
      v198[1] = v201;
      __n128 v202 = v246;
      ++v197;
      v198[2] = v245;
      v198[3] = v202;
      if (v197 == 8) {
        return &v195[8] == a2;
      }
    }
    long long v23 = v195;
    v196 += 128;
    v195 += 8;
    if (v195 == a2) {
      return 1;
    }
  }
}

__n128 sub_2194CBEF0(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, uint64_t (**a5)(__n128 *, __n128 *))
{
  char v10 = (*a5)(a2, a1);
  int v11 = (*a5)(a3, a2);
  if (v10)
  {
    if (v11)
    {
      __n128 v89 = a1[4];
      __n128 v96 = a1[5];
      __n128 v103 = a1[6];
      __n128 v110 = a1[7];
      __n128 v61 = *a1;
      __n128 v68 = a1[1];
      __n128 v75 = a1[2];
      __n128 v82 = a1[3];
      __n128 v12 = a3[4];
      __n128 v13 = a3[5];
      __n128 v14 = a3[7];
      a1[6] = a3[6];
      a1[7] = v14;
      a1[4] = v12;
      a1[5] = v13;
      __n128 v15 = *a3;
      __n128 v16 = a3[1];
      __n128 v17 = a3[3];
      a1[2] = a3[2];
      a1[3] = v17;
      *a1 = v15;
      a1[1] = v16;
LABEL_9:
      a3[2] = v75;
      a3[3] = v82;
      *a3 = v61;
      a3[1] = v68;
      a3[6] = v103;
      a3[7] = v110;
      a3[4] = v89;
      a3[5] = v96;
      goto LABEL_10;
    }
    __n128 v92 = a1[4];
    __n128 v99 = a1[5];
    __n128 v106 = a1[6];
    __n128 v113 = a1[7];
    __n128 v64 = *a1;
    __n128 v71 = a1[1];
    __n128 v78 = a1[2];
    __n128 v85 = a1[3];
    __n128 v30 = a2[4];
    __n128 v31 = a2[5];
    __n128 v32 = a2[7];
    a1[6] = a2[6];
    a1[7] = v32;
    a1[4] = v30;
    a1[5] = v31;
    __n128 v33 = *a2;
    __n128 v34 = a2[1];
    __n128 v35 = a2[3];
    a1[2] = a2[2];
    a1[3] = v35;
    *a1 = v33;
    a1[1] = v34;
    a2[2] = v78;
    a2[3] = v85;
    *a2 = v64;
    a2[1] = v71;
    a2[6] = v106;
    a2[7] = v113;
    a2[4] = v92;
    a2[5] = v99;
    if ((*a5)(a3, a2))
    {
      __n128 v89 = a2[4];
      __n128 v96 = a2[5];
      __n128 v103 = a2[6];
      __n128 v110 = a2[7];
      __n128 v61 = *a2;
      __n128 v68 = a2[1];
      __n128 v75 = a2[2];
      __n128 v82 = a2[3];
      __n128 v36 = a3[4];
      __n128 v37 = a3[5];
      __n128 v38 = a3[7];
      a2[6] = a3[6];
      a2[7] = v38;
      a2[4] = v36;
      a2[5] = v37;
      __n128 v39 = *a3;
      __n128 v40 = a3[1];
      __n128 v41 = a3[3];
      a2[2] = a3[2];
      a2[3] = v41;
      *a2 = v39;
      a2[1] = v40;
      goto LABEL_9;
    }
  }
  else if (v11)
  {
    __n128 v90 = a2[4];
    __n128 v97 = a2[5];
    __n128 v104 = a2[6];
    __n128 v111 = a2[7];
    __n128 v62 = *a2;
    __n128 v69 = a2[1];
    __n128 v76 = a2[2];
    __n128 v83 = a2[3];
    __n128 v18 = a3[4];
    __n128 v19 = a3[5];
    __n128 v20 = a3[7];
    a2[6] = a3[6];
    a2[7] = v20;
    a2[4] = v18;
    a2[5] = v19;
    __n128 v21 = *a3;
    __n128 v22 = a3[1];
    __n128 v23 = a3[3];
    a2[2] = a3[2];
    a2[3] = v23;
    *a2 = v21;
    a2[1] = v22;
    a3[2] = v76;
    a3[3] = v83;
    *a3 = v62;
    a3[1] = v69;
    a3[6] = v104;
    a3[7] = v111;
    a3[4] = v90;
    a3[5] = v97;
    if ((*a5)(a2, a1))
    {
      __n128 v91 = a1[4];
      __n128 v98 = a1[5];
      __n128 v105 = a1[6];
      __n128 v112 = a1[7];
      __n128 v63 = *a1;
      __n128 v70 = a1[1];
      __n128 v77 = a1[2];
      __n128 v84 = a1[3];
      __n128 v24 = a2[4];
      __n128 v25 = a2[5];
      __n128 v26 = a2[7];
      a1[6] = a2[6];
      a1[7] = v26;
      a1[4] = v24;
      a1[5] = v25;
      __n128 v27 = *a2;
      __n128 v28 = a2[1];
      __n128 v29 = a2[3];
      a1[2] = a2[2];
      a1[3] = v29;
      *a1 = v27;
      a1[1] = v28;
      a2[2] = v77;
      a2[3] = v84;
      *a2 = v63;
      a2[1] = v70;
      a2[6] = v105;
      a2[7] = v112;
      a2[4] = v91;
      a2[5] = v98;
    }
  }
LABEL_10:
  if ((*a5)(a4, a3))
  {
    __n128 v93 = a3[4];
    __n128 v100 = a3[5];
    __n128 v107 = a3[6];
    __n128 v114 = a3[7];
    __n128 v65 = *a3;
    __n128 v72 = a3[1];
    __n128 v79 = a3[2];
    __n128 v86 = a3[3];
    __n128 v43 = a4[4];
    __n128 v44 = a4[5];
    __n128 v45 = a4[7];
    a3[6] = a4[6];
    a3[7] = v45;
    a3[4] = v43;
    a3[5] = v44;
    __n128 v46 = *a4;
    __n128 v47 = a4[1];
    __n128 v48 = a4[3];
    a3[2] = a4[2];
    a3[3] = v48;
    *a3 = v46;
    a3[1] = v47;
    a4[2] = v79;
    a4[3] = v86;
    *a4 = v65;
    a4[1] = v72;
    a4[6] = v107;
    a4[7] = v114;
    a4[4] = v93;
    a4[5] = v100;
    if ((*a5)(a3, a2))
    {
      __n128 v94 = a2[4];
      __n128 v101 = a2[5];
      __n128 v108 = a2[6];
      __n128 v115 = a2[7];
      __n128 v66 = *a2;
      __n128 v73 = a2[1];
      __n128 v80 = a2[2];
      __n128 v87 = a2[3];
      __n128 v49 = a3[4];
      __n128 v50 = a3[5];
      __n128 v51 = a3[7];
      a2[6] = a3[6];
      a2[7] = v51;
      a2[4] = v49;
      a2[5] = v50;
      __n128 v52 = *a3;
      __n128 v53 = a3[1];
      __n128 v54 = a3[3];
      a2[2] = a3[2];
      a2[3] = v54;
      *a2 = v52;
      a2[1] = v53;
      a3[2] = v80;
      a3[3] = v87;
      *a3 = v66;
      a3[1] = v73;
      a3[6] = v108;
      a3[7] = v115;
      a3[4] = v94;
      a3[5] = v101;
      if ((*a5)(a2, a1))
      {
        __n128 v95 = a1[4];
        __n128 v102 = a1[5];
        __n128 v109 = a1[6];
        __n128 v116 = a1[7];
        __n128 v67 = *a1;
        __n128 v74 = a1[1];
        __n128 v81 = a1[2];
        __n128 v88 = a1[3];
        __n128 v55 = a2[4];
        __n128 v56 = a2[5];
        __n128 v57 = a2[7];
        a1[6] = a2[6];
        a1[7] = v57;
        a1[4] = v55;
        a1[5] = v56;
        __n128 v58 = *a2;
        __n128 v59 = a2[1];
        __n128 v60 = a2[3];
        a1[2] = a2[2];
        a1[3] = v60;
        *a1 = v58;
        a1[1] = v59;
        a2[2] = v81;
        a2[3] = v88;
        *a2 = v67;
        a2[1] = v74;
        a2[6] = v109;
        a2[7] = v116;
        __n128 result = v102;
        a2[4] = v95;
        a2[5] = v102;
      }
    }
  }
  return result;
}

long long *sub_2194CC2E0(long long *a1, long long *a2, long long *a3, unsigned int (**a4)(long long *, long long *))
{
  uint64_t v146 = *MEMORY[0x263EF8340];
  if (a1 == a2) {
    return a3;
  }
  BOOL v5 = a2;
  uint64_t v128 = ((char *)a2 - (char *)a1) >> 7;
  __n128 v126 = a3;
  uint64_t v127 = (char *)a2 - (char *)a1;
  if ((char *)a2 - (char *)a1 >= 129 && (unint64_t)v127 >= 0x100)
  {
    int64_t v102 = (unint64_t)(v128 - 2) >> 1;
    int64_t v103 = v102;
    do
    {
      if (v102 >= v103)
      {
        uint64_t v110 = (2 * v103) | 1;
        __n128 v111 = &a1[8 * v110];
        if (2 * v103 + 2 < v128 && (*a4)(&a1[8 * v110], v111 + 8))
        {
          v111 += 8;
          uint64_t v110 = 2 * v103 + 2;
        }
        __n128 v112 = &a1[8 * v103];
        if ((((uint64_t (*)(long long *, long long *))*a4)(v111, v112) & 1) == 0)
        {
          long long v113 = v112[5];
          long long v142 = v112[4];
          long long v143 = v113;
          long long v114 = v112[7];
          long long v144 = v112[6];
          long long v145 = v114;
          long long v115 = v112[1];
          long long v138 = *v112;
          long long v139 = v115;
          long long v116 = v112[3];
          long long v140 = v112[2];
          long long v141 = v116;
          do
          {
            __n128 v117 = v111;
            long long v118 = *v111;
            long long v119 = v111[1];
            long long v120 = v111[3];
            v112[2] = v111[2];
            v112[3] = v120;
            *__n128 v112 = v118;
            v112[1] = v119;
            long long v121 = v111[4];
            long long v122 = v111[5];
            long long v123 = v111[7];
            v112[6] = v111[6];
            v112[7] = v123;
            v112[4] = v121;
            v112[5] = v122;
            if (v102 < v110) {
              break;
            }
            uint64_t v124 = (2 * v110) | 1;
            __n128 v111 = &a1[8 * v124];
            uint64_t v125 = 2 * v110 + 2;
            if (v125 < v128 && (*a4)(&a1[8 * v124], v111 + 8))
            {
              v111 += 8;
              uint64_t v124 = v125;
            }
            __n128 v112 = v117;
            uint64_t v110 = v124;
          }
          while (!(*a4)(v111, &v138));
          long long v104 = v138;
          long long v105 = v139;
          long long v106 = v141;
          v117[2] = v140;
          v117[3] = v106;
          *__n128 v117 = v104;
          v117[1] = v105;
          long long v107 = v142;
          long long v108 = v143;
          long long v109 = v145;
          v117[6] = v144;
          v117[7] = v109;
          v117[4] = v107;
          v117[5] = v108;
        }
      }
      BOOL v63 = v103-- <= 0;
    }
    while (!v63);
  }
  a3 = v5;
  int v7 = v126;
  uint64_t v8 = v127;
  if (v5 != v126)
  {
    if (v127 < 256)
    {
      __n128 v9 = v5;
      do
      {
        if (((unsigned int (*)(long long *, long long *, long long *))*a4)(v9, a1, a3))
        {
          long long v10 = v9[5];
          long long v142 = v9[4];
          long long v143 = v10;
          long long v11 = v9[7];
          long long v144 = v9[6];
          long long v145 = v11;
          long long v12 = v9[1];
          long long v138 = *v9;
          long long v139 = v12;
          long long v13 = v9[3];
          long long v140 = v9[2];
          long long v141 = v13;
          long long v14 = a1[4];
          long long v15 = a1[5];
          long long v16 = a1[7];
          v9[6] = a1[6];
          v9[7] = v16;
          v9[4] = v14;
          v9[5] = v15;
          long long v17 = *a1;
          long long v18 = a1[1];
          long long v19 = a1[3];
          v9[2] = a1[2];
          v9[3] = v19;
          *__n128 v9 = v17;
          v9[1] = v18;
          long long v20 = v141;
          a1[2] = v140;
          a1[3] = v20;
          long long v21 = v139;
          *a1 = v138;
          a1[1] = v21;
          long long v22 = v145;
          a1[6] = v144;
          a1[7] = v22;
          long long v23 = v143;
          a1[4] = v142;
          a1[5] = v23;
        }
        v9 += 8;
      }
      while (v9 != v126);
LABEL_28:
      a3 = v7;
      goto LABEL_29;
    }
    __n128 v24 = a1 + 8;
    __n128 v25 = v5;
    while (1)
    {
      if (((unsigned int (*)(long long *, long long *, long long *))*a4)(v25, a1, a3))
      {
        long long v32 = v25[5];
        long long v142 = v25[4];
        long long v143 = v32;
        long long v33 = v25[7];
        long long v144 = v25[6];
        long long v145 = v33;
        long long v34 = v25[1];
        long long v138 = *v25;
        long long v139 = v34;
        long long v35 = v25[3];
        long long v140 = v25[2];
        long long v141 = v35;
        long long v36 = a1[4];
        long long v37 = a1[5];
        long long v38 = a1[7];
        v25[6] = a1[6];
        v25[7] = v38;
        v25[4] = v36;
        v25[5] = v37;
        long long v39 = *a1;
        long long v40 = a1[1];
        long long v41 = a1[3];
        v25[2] = a1[2];
        _OWORD v25[3] = v41;
        *__n128 v25 = v39;
        v25[1] = v40;
        long long v42 = v141;
        a1[2] = v140;
        a1[3] = v42;
        long long v43 = v139;
        *a1 = v138;
        a1[1] = v43;
        long long v44 = v145;
        a1[6] = v144;
        a1[7] = v44;
        long long v45 = v143;
        a1[4] = v142;
        a1[5] = v45;
        if (v8 == 256)
        {
          __n128 v46 = v24;
          int64_t v47 = 1;
          if ((((uint64_t (*)(long long *, long long *))*a4)(v24, a1) & 1) == 0) {
            goto LABEL_21;
          }
        }
        else
        {
          __n128 v46 = a1 + 16;
          if ((*a4)(v24, a1 + 16))
          {
            int64_t v47 = 2;
          }
          else
          {
            __n128 v46 = v24;
            int64_t v47 = 1;
          }
          if ((((uint64_t (*)(long long *, long long *))*a4)(v46, a1) & 1) == 0)
          {
LABEL_21:
            long long v48 = a1[5];
            long long v142 = a1[4];
            long long v143 = v48;
            long long v49 = a1[7];
            long long v144 = a1[6];
            long long v145 = v49;
            long long v50 = a1[1];
            long long v138 = *a1;
            long long v139 = v50;
            long long v51 = a1[3];
            __n128 v52 = a1;
            long long v140 = a1[2];
            long long v141 = v51;
            do
            {
              __n128 v54 = v46;
              long long v55 = *v46;
              long long v56 = v46[1];
              long long v57 = v46[3];
              v52[2] = v46[2];
              v52[3] = v57;
              *__n128 v52 = v55;
              v52[1] = v56;
              long long v58 = v46[4];
              long long v59 = v46[5];
              long long v60 = v46[7];
              v52[6] = v46[6];
              v52[7] = v60;
              v52[4] = v58;
              v52[5] = v59;
              if ((uint64_t)((unint64_t)(v128 - 2) >> 1) < v47) {
                break;
              }
              uint64_t v61 = (2 * v47) | 1;
              __n128 v46 = &a1[8 * v61];
              if (2 * v47 + 2 < v128 && (*a4)(&a1[8 * v61], v46 + 8))
              {
                v46 += 8;
                uint64_t v61 = 2 * v47 + 2;
              }
              unsigned int v53 = (*a4)(v46, &v138);
              __n128 v52 = v54;
              int64_t v47 = v61;
            }
            while (!v53);
            long long v26 = v138;
            long long v27 = v139;
            long long v28 = v141;
            _OWORD v54[2] = v140;
            v54[3] = v28;
            *__n128 v54 = v26;
            v54[1] = v27;
            long long v29 = v142;
            long long v30 = v143;
            long long v31 = v145;
            v54[6] = v144;
            v54[7] = v31;
            v54[4] = v29;
            v54[5] = v30;
            int v7 = v126;
            uint64_t v8 = v127;
            __n128 v24 = a1 + 8;
          }
        }
      }
      v25 += 8;
      if (v25 == v7) {
        goto LABEL_28;
      }
    }
  }
LABEL_29:
  if (v8 >= 129)
  {
    __n128 v129 = a3;
    uint64_t v62 = (unint64_t)v8 >> 7;
    do
    {
      uint64_t v64 = 0;
      long long v134 = a1[4];
      long long v135 = a1[5];
      long long v136 = a1[6];
      long long v137 = a1[7];
      long long v130 = *a1;
      long long v131 = a1[1];
      __n128 v65 = a1;
      long long v132 = a1[2];
      long long v133 = a1[3];
      do
      {
        __n128 v72 = &v65[8 * v64 + 8];
        uint64_t v73 = (2 * v64) | 1;
        uint64_t v74 = 2 * v64 + 2;
        if (v74 < v62 && (*a4)(&v65[8 * v64 + 8], &v65[8 * v64 + 16]))
        {
          v72 += 8;
          uint64_t v73 = v74;
        }
        long long v66 = *v72;
        long long v67 = v72[1];
        long long v68 = v72[3];
        v65[2] = v72[2];
        v65[3] = v68;
        *__n128 v65 = v66;
        v65[1] = v67;
        long long v69 = v72[4];
        long long v70 = v72[5];
        long long v71 = v72[7];
        v65[6] = v72[6];
        v65[7] = v71;
        v65[4] = v69;
        v65[5] = v70;
        __n128 v65 = v72;
        uint64_t v64 = v73;
      }
      while (v73 <= (uint64_t)((unint64_t)(v62 - 2) >> 1));
      v5 -= 8;
      if (v72 == v5)
      {
        v72[2] = v132;
        v72[3] = v133;
        long long *v72 = v130;
        v72[1] = v131;
        v72[6] = v136;
        v72[7] = v137;
        uint8_t v72[4] = v134;
        v72[5] = v135;
      }
      else
      {
        long long v75 = *v5;
        long long v76 = v5[1];
        long long v77 = v5[3];
        v72[2] = v5[2];
        v72[3] = v77;
        long long *v72 = v75;
        v72[1] = v76;
        long long v78 = v5[4];
        long long v79 = v5[5];
        long long v80 = v5[7];
        v72[6] = v5[6];
        v72[7] = v80;
        uint8_t v72[4] = v78;
        v72[5] = v79;
        v5[4] = v134;
        v5[5] = v135;
        v5[6] = v136;
        v5[7] = v137;
        long long *v5 = v130;
        v5[1] = v131;
        uint64_t v81 = (char *)v72 - (char *)a1 + 128;
        v5[2] = v132;
        void v5[3] = v133;
        if (v81 >= 129)
        {
          unint64_t v82 = (((unint64_t)v81 >> 7) - 2) >> 1;
          __n128 v83 = &a1[8 * v82];
          if ((*a4)(v83, v72))
          {
            long long v84 = *v72;
            long long v85 = v72[1];
            long long v86 = v72[3];
            long long v140 = v72[2];
            long long v141 = v86;
            long long v138 = v84;
            long long v139 = v85;
            long long v87 = v72[4];
            long long v88 = v72[5];
            long long v89 = v72[7];
            long long v144 = v72[6];
            long long v145 = v89;
            long long v142 = v87;
            long long v143 = v88;
            do
            {
              __n128 v90 = v83;
              long long v91 = *v83;
              long long v92 = v83[1];
              long long v93 = v83[3];
              v72[2] = v83[2];
              v72[3] = v93;
              long long *v72 = v91;
              v72[1] = v92;
              long long v94 = v83[4];
              long long v95 = v83[5];
              long long v96 = v83[7];
              v72[6] = v83[6];
              v72[7] = v96;
              uint8_t v72[4] = v94;
              v72[5] = v95;
              if (!v82) {
                break;
              }
              unint64_t v82 = (v82 - 1) >> 1;
              __n128 v83 = &a1[8 * v82];
              __n128 v72 = v90;
            }
            while ((((uint64_t (*)(long long *, long long *))*a4)(v83, &v138) & 1) != 0);
            long long v97 = v143;
            v90[4] = v142;
            v90[5] = v97;
            long long v98 = v145;
            v90[6] = v144;
            v90[7] = v98;
            long long v99 = v139;
            long long *v90 = v138;
            v90[1] = v99;
            long long v100 = v141;
            v90[2] = v140;
            v90[3] = v100;
          }
        }
      }
      BOOL v63 = v62-- <= 2;
    }
    while (!v63);
    return v129;
  }
  return a3;
}

uint64_t sub_2194CC964(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_2194CC97C(uint64_t a1, _OWORD *a2)
{
  __n128 result = (void *)sub_2194E3004(a1, a2);
  *__n128 result = &unk_26CAD6900;
  return result;
}

void sub_2194CC9B0(_DWORD *a1, unsigned int *a2, int *a3, _DWORD *a4)
{
  unint64_t v6 = (unint64_t)*a2 >> 6;
  unint64_t v7 = (unint64_t)a2[1] >> 6;
  int v8 = a1[9];
  int v9 = a1[10];
  if (v8 < 0) {
    int v10 = -(-v8 >> 14);
  }
  else {
    int v10 = v8 >> 14;
  }
  if (v8 < 0) {
    int v8 = -v8;
  }
  unint64_t v11 = (16 * (v8 & 0x3FFFu)) | (unint64_t)((uint64_t)v10 << 18);
  if (v9 < 0) {
    int v12 = -(-v9 >> 14);
  }
  else {
    int v12 = v9 >> 14;
  }
  if (v9 < 0) {
    int v9 = -v9;
  }
  unint64_t v13 = (16 * (v9 & 0x3FFFu)) | (unint64_t)((uint64_t)v12 << 18);
  int v14 = a1[11];
  int v15 = a1[12];
  if (v14 < 0) {
    int v16 = -(-v14 >> 14);
  }
  else {
    int v16 = v14 >> 14;
  }
  if (v14 < 0) {
    int v14 = -v14;
  }
  unint64_t v17 = (16 * (v14 & 0x3FFFu)) | (unint64_t)((uint64_t)v16 << 18);
  if (v15 < 0) {
    int v18 = -(-v15 >> 14);
  }
  else {
    int v18 = v15 >> 14;
  }
  if (v15 < 0) {
    int v15 = -v15;
  }
  unint64_t v19 = (16 * (v15 & 0x3FFFu)) | (unint64_t)((uint64_t)v18 << 18);
  int v20 = a1[13];
  int v21 = a1[14];
  if (v20 < 0) {
    int v22 = -(-v20 >> 14);
  }
  else {
    int v22 = v20 >> 14;
  }
  if (v20 < 0) {
    int v20 = -v20;
  }
  unint64_t v23 = (16 * (v20 & 0x3FFFu)) | (unint64_t)((uint64_t)v22 << 18);
  if (v21 < 0) {
    int v24 = -(-v21 >> 14);
  }
  else {
    int v24 = v21 >> 14;
  }
  if (v21 < 0) {
    int v21 = -v21;
  }
  unint64_t v25 = (16 * (v21 & 0x3FFFu)) | (unint64_t)((uint64_t)v24 << 18);
  int v26 = a1[15];
  int v27 = a1[16];
  if (v26 < 0) {
    int v28 = -(-v26 >> 14);
  }
  else {
    int v28 = v26 >> 14;
  }
  if (v26 < 0) {
    int v26 = -v26;
  }
  unint64_t v29 = (16 * (v26 & 0x3FFFu)) | (unint64_t)((uint64_t)v28 << 18);
  if (v27 < 0) {
    int v30 = -(-v27 >> 14);
  }
  else {
    int v30 = v27 >> 14;
  }
  if (v27 < 0) {
    int v27 = -v27;
  }
  unint64_t v31 = (16 * (v27 & 0x3FFFu)) | (unint64_t)((uint64_t)v30 << 18);
  int v32 = a1[17];
  if (v32 < 0) {
    int v33 = -(-v32 >> 14);
  }
  else {
    int v33 = v32 >> 14;
  }
  if (v32 < 0) {
    int v32 = -v32;
  }
  uint64_t v34 = v13 * v7 + v11 * v6 + v17;
  uint64_t v35 = v23 * v7 + v19 * v6 + v25;
  int64_t v36 = v31 * v7 + v29 * v6 + ((16 * (v32 & 0x3FFFu)) | (unint64_t)((uint64_t)v33 << 18));
  if (v36)
  {
    double v37 = sub_2194F4294(18, (double)v34);
    double v38 = sub_2194F4294(18, (double)v35);
    double v39 = sub_2194F4294(18, (double)v36);
    sub_2194F4398(v39);
    double v41 = v37 * v40;
    double v42 = v38 * v40;
    uint64_t v43 = (uint64_t)sub_2194F4294(18, v41);
    uint64_t v44 = (uint64_t)sub_2194F4294(18, v42);
  }
  else
  {
    if (v34 <= 0) {
      uint64_t v43 = -(uint64_t)((unint64_t)-v34 >> 18);
    }
    else {
      uint64_t v43 = (unint64_t)v34 >> 18;
    }
    uint64_t v44 = (unint64_t)v35 >> 18;
    if (v35 <= 0) {
      uint64_t v44 = -(uint64_t)((unint64_t)-v35 >> 18);
    }
  }
  if ((int)v43 >= 4095) {
    int v45 = 4095;
  }
  else {
    int v45 = v43;
  }
  if (v45 <= -4096) {
    int v45 = -4096;
  }
  if ((int)v44 >= 0x1FFF) {
    LODWORD(v44) = 0x1FFF;
  }
  if ((int)v44 <= -8192) {
    LODWORD(v44) = -8192;
  }
  *a3 = v45;
  *a4 = v44;
}

uint64_t sub_2194CCC2C(uint64_t result, int *a2, uint64_t a3, unsigned int *a4, int32x4_t a5)
{
  uint64_t v5 = *(unsigned int *)(result + 548);
  if (v5 > 0x10) {
    sub_219509698();
  }
  if (!v5)
  {
    *a4 = 0;
    goto LABEL_12;
  }
  if (v5 < 8)
  {
    uint64_t v6 = 0;
    unsigned int v7 = 0;
LABEL_15:
    uint64_t v18 = v5 - v6;
    uint64_t v19 = 4 * v6 + 132;
    int v20 = (int *)((char *)a2 + v19);
    int v21 = (int *)(a3 + v19);
    do
    {
      int v23 = *v21++;
      int v22 = v23;
      int v24 = *v20++;
      int v25 = v24 ^ v22;
      if (v25)
      {
        a5.i32[0] = v25;
        *(int8x8_t *)a5.i8 = vcnt_s8(*(int8x8_t *)a5.i8);
        a5.i16[0] = vaddlv_u8(*(uint8x8_t *)a5.i8);
        v7 += a5.i32[0];
      }
      --v18;
    }
    while (v18);
    goto LABEL_9;
  }
  uint64_t v6 = v5 & 0x18;
  int32x4_t v8 = (int32x4_t)veorq_s8(*(int8x16_t *)(a2 + 33), *(int8x16_t *)(a3 + 132));
  int32x4_t v9 = (int32x4_t)veorq_s8(*(int8x16_t *)(a2 + 37), *(int8x16_t *)(a3 + 148));
  int32x4_t v10 = (int32x4_t)vbicq_s8((int8x16_t)vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)v8))), (int8x16_t)vceqzq_s32(v8));
  int32x4_t v11 = (int32x4_t)vbicq_s8((int8x16_t)vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)v9))), (int8x16_t)vceqzq_s32(v9));
  if ((v5 & 0xFFFFFFF8) != 8)
  {
    int32x4_t v12 = (int32x4_t)veorq_s8(*(int8x16_t *)(a2 + 41), *(int8x16_t *)(a3 + 164));
    int32x4_t v13 = (int32x4_t)veorq_s8(*(int8x16_t *)(a2 + 45), *(int8x16_t *)(a3 + 180));
    int32x4_t v10 = vaddq_s32(v10, (int32x4_t)vbicq_s8((int8x16_t)vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)v12))), (int8x16_t)vceqzq_s32(v12)));
    int32x4_t v11 = vaddq_s32(v11, (int32x4_t)vbicq_s8((int8x16_t)vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)v13))), (int8x16_t)vceqzq_s32(v13)));
  }
  a5 = vaddq_s32(v11, v10);
  unsigned int v7 = vaddvq_s32(a5);
  if (v6 != v5) {
    goto LABEL_15;
  }
LABEL_9:
  *a4 = v7;
  if (v7 >= 0x1D8) {
    sub_219509660();
  }
  if (v7 > *(_DWORD *)(result + 20))
  {
    ++*(_DWORD *)(result + 584);
    return result;
  }
LABEL_12:
  ++*(_DWORD *)(result + 580);
  unsigned int v14 = *a4;
  uint64_t v15 = *(unsigned int *)(a3 + 196);
  uint64_t v16 = *(void *)(result + 496);
  unint64_t v17 = (unsigned int *)(v16 + 16 * v15);
  if (*a4 < *v17)
  {
    if (v17[1] == 0xFFFFF) {
      ++*(_DWORD *)(result + 596);
    }
    else {
      ++*(_DWORD *)(result + 600);
    }
    *unint64_t v17 = *a4;
    v17[1] = (*(void *)(result + 608) + (unint64_t)(16 * a2[49])) >> 4;
    *(_DWORD *)(v16 + 16 * v15 + 8) = a2[5];
LABEL_26:
    *(_DWORD *)(v16 + 16 * v15 + 12) = (a2[3] >> 5) + 8 * *((unsigned __int8 *)a2 + 24);
    goto LABEL_27;
  }
  if (v14 == *v17)
  {
    uint64_t v26 = v16 + 16 * v15;
    int v27 = (_DWORD *)(v26 + 8);
    if (a2[5] < *(_DWORD *)(v26 + 8))
    {
      int v29 = *(_DWORD *)(v26 + 4);
      int v28 = (_DWORD *)(v26 + 4);
      if (v29 == 0xFFFFF)
      {
        ++*(_DWORD *)(result + 596);
        unsigned int v14 = *a4;
      }
      *unint64_t v17 = v14;
      *int v28 = (*(void *)(result + 608) + (unint64_t)(16 * a2[49])) >> 4;
      *int v27 = a2[5];
      goto LABEL_26;
    }
  }
LABEL_27:
  unsigned int v30 = *a4;
  unsigned int v31 = a2[49];
  uint64_t v32 = *(void *)(result + 472);
  int v33 = (unsigned int *)(v32 + 36 * v31);
  if (*a4 < *v33)
  {
    uint64_t v34 = v32 + 36 * v31;
    int v36 = *(_DWORD *)(v34 + 4);
    uint64_t v35 = (_DWORD *)(v34 + 4);
    if (v36 == 0xFFFFF) {
      ++*(_DWORD *)(result + 588);
    }
    else {
      ++*(_DWORD *)(result + 592);
    }
    *int v33 = *a4;
    *uint64_t v35 = *(_DWORD *)(result + 616) + 4 * v15;
    uint64_t v44 = v32 + 36 * v31;
    *(_DWORD *)(v44 + 8) = *(_DWORD *)(a3 + 20);
    int v43 = *a2;
LABEL_37:
    *(_DWORD *)(v44 + 12) = v43;
    int v45 = a2[32];
    *(_DWORD *)(v44 + 16) = a2[1];
    *(_DWORD *)(v44 + 20) = v45;
    *(_DWORD *)(v44 + 24) = v31;
    *(_DWORD *)(v44 + 28) = a2[8];
    *(unsigned char *)(v44 + 32) = *((unsigned char *)a2 + 24);
    return result;
  }
  if (v30 == *v33)
  {
    uint64_t v37 = v32 + 36 * v31;
    unsigned int v39 = *(_DWORD *)(v37 + 8);
    double v38 = (_DWORD *)(v37 + 8);
    if (*(_DWORD *)(a3 + 20) < v39)
    {
      uint64_t v40 = v32 + 36 * v31;
      int v42 = *(_DWORD *)(v40 + 4);
      double v41 = (_DWORD *)(v40 + 4);
      if (v42 == 0xFFFFF)
      {
        ++*(_DWORD *)(result + 588);
        unsigned int v30 = *a4;
      }
      *int v33 = v30;
      *double v41 = *(_DWORD *)(result + 616) + 4 * v15;
      *double v38 = *(_DWORD *)(a3 + 20);
      int v43 = *a2;
      uint64_t v44 = v32 + 36 * v31;
      goto LABEL_37;
    }
  }
  return result;
}

void sub_2194CCFA0(void *a1)
{
  sub_2194CCFD8(a1);

  JUMPOUT(0x21D48B5B0);
}

void *sub_2194CCFD8(void *a1)
{
  *a1 = &unk_26CAD6B70;
  unsigned int v2 = (void *)a1[65];
  if (v2)
  {
    a1[66] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[62];
  if (v3)
  {
    a1[63] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[59];
  if (v4)
  {
    a1[60] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[56];
  if (v5)
  {
    a1[57] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[53];
  if (v6)
  {
    a1[54] = v6;
    operator delete(v6);
  }
  unsigned int v7 = (void *)a1[50];
  if (v7)
  {
    a1[51] = v7;
    operator delete(v7);
  }
  int32x4_t v8 = (void *)a1[47];
  if (v8)
  {
    a1[48] = v8;
    operator delete(v8);
  }
  int32x4_t v9 = (void *)a1[44];
  if (v9)
  {
    a1[45] = v9;
    operator delete(v9);
  }
  int32x4_t v10 = (void *)a1[41];
  if (v10)
  {
    a1[42] = v10;
    operator delete(v10);
  }
  int32x4_t v11 = (void *)a1[38];
  if (v11)
  {
    a1[39] = v11;
    operator delete(v11);
  }
  int32x4_t v12 = (void *)a1[35];
  if (v12)
  {
    a1[36] = v12;
    operator delete(v12);
  }
  int32x4_t v13 = (void *)a1[32];
  if (v13)
  {
    a1[33] = v13;
    operator delete(v13);
  }
  unsigned int v14 = (void *)a1[29];
  if (v14)
  {
    a1[30] = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)a1[26];
  if (v15)
  {
    a1[27] = v15;
    operator delete(v15);
  }
  uint64_t v16 = (void *)a1[23];
  if (v16)
  {
    a1[24] = v16;
    operator delete(v16);
  }
  unint64_t v17 = (void *)a1[20];
  if (v17)
  {
    a1[21] = v17;
    operator delete(v17);
  }
  uint64_t v18 = (void *)a1[17];
  if (v18)
  {
    a1[18] = v18;
    operator delete(v18);
  }
  uint64_t v19 = (void *)a1[14];
  if (v19)
  {
    a1[15] = v19;
    operator delete(v19);
  }
  int v20 = (void *)a1[11];
  if (v20)
  {
    a1[12] = v20;
    operator delete(v20);
  }
  return a1;
}

uint64_t sub_2194CD148(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2194E8E6C(a1, a2);
  *(void *)uint64_t v4 = &unk_26CAD6948;
  *(_DWORD *)(v4 + 5312) = 0xFFFFF;
  uint64_t v5 = (uint64_t *)(v4 + 5320);
  *(void *)(v4 + 5608) = 0;
  uint64_t v6 = v4 + 5584;
  *(_OWORD *)(v4 + 5320) = 0u;
  *(_OWORD *)(v4 + 5336) = 0u;
  *(_OWORD *)(v4 + 5352) = 0u;
  *(_OWORD *)(v4 + 5368) = 0u;
  *(_OWORD *)(v4 + 5384) = 0u;
  *(_OWORD *)(v4 + 5400) = 0u;
  *(_OWORD *)(v4 + 5416) = 0u;
  *(_OWORD *)(v4 + 5432) = 0u;
  *(_OWORD *)(v4 + 5448) = 0u;
  *(_OWORD *)(v4 + 5464) = 0u;
  *(_OWORD *)(v4 + 5480) = 0u;
  *(_OWORD *)(v4 + 5496) = 0u;
  *(_OWORD *)(v4 + 5512) = 0u;
  *(_OWORD *)(v4 + 5528) = 0u;
  *(_OWORD *)(v4 + 5544) = 0u;
  *(_OWORD *)(v4 + 5560) = 0u;
  *(_OWORD *)(v4 + 5576) = 0u;
  *(_OWORD *)(v4 + 5592) = 0u;
  unint64_t v7 = *(void *)(v4 + 64);
  if (v7) {
    sub_2194BC1C8(v4 + 5320, v7);
  }
  if (*(unsigned char *)(a1 + 56))
  {
    unint64_t v8 = *(void *)(a1 + 64);
    uint64_t v9 = *(void *)(a1 + 5592);
    uint64_t v10 = *(void *)(a1 + 5584);
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
    if (v8 <= v11)
    {
      if (v8 < v11)
      {
        uint64_t v12 = v10 + 24 * v8;
        if (v9 != v12)
        {
          uint64_t v13 = *(void *)(a1 + 5592);
          do
          {
            uint64_t v15 = *(void **)(v13 - 24);
            v13 -= 24;
            unsigned int v14 = v15;
            if (v15)
            {
              *(void *)(v9 - 16) = v14;
              operator delete(v14);
            }
            uint64_t v9 = v13;
          }
          while (v13 != v12);
        }
        *(void *)(a1 + 5592) = v12;
      }
    }
    else
    {
      sub_2194BC1C8(v6, v8 - v11);
    }
  }
  if (*(void *)(a1 + 64) == 1)
  {
    uint64_t v16 = *(void *)(a1 + 104);
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 112) - v16) >> 3);
    if (*(void *)(a1 + 112) == v16)
    {
      sub_2194D06E4((char **)(a1 + 104), 1 - v17);
    }
    else if (v17 >= 2)
    {
      *(void *)(a1 + 112) = v16 + 40;
    }
    uint64_t v18 = *(int **)(a1 + 128);
    unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 136) - (void)v18) >> 3);
    if (*(int **)(a1 + 136) == v18)
    {
      sub_2194D06E4((char **)(a1 + 128), 1 - v19);
      uint64_t v18 = *(int **)(a1 + 128);
    }
    else if (v19 >= 2)
    {
      *(void *)(a1 + 136) = v18 + 10;
    }
    uint64_t v20 = *(void *)(a1 + 104);
    *(void *)(v20 + 32) = 0;
    *(_OWORD *)uint64_t v20 = 0u;
    *(_OWORD *)(v20 + 16) = 0u;
    int v21 = *(_DWORD **)(a1 + 80);
    int v22 = *(_DWORD *)(a1 + 8);
    *uint64_t v18 = v22;
    int v23 = *(_DWORD *)(a1 + 16);
    if (v22 >= -1) {
      int v24 = v22 + 1;
    }
    else {
      int v24 = v22 + 2;
    }
    int v25 = v24 >> 1;
    v18[1] = v23;
    v18[2] = v25;
    if (v23 >= -1) {
      int v26 = v23 + 1;
    }
    else {
      int v26 = v23 + 2;
    }
    int v27 = v26 >> 1;
    if (v25 >= -1) {
      int v28 = v25 + 1;
    }
    else {
      int v28 = v25 + 2;
    }
    int v29 = v28 >> 1;
    v18[3] = v27;
    v18[4] = v29;
    if (v27 >= -1) {
      int v30 = v27 + 1;
    }
    else {
      int v30 = v27 + 2;
    }
    int v31 = v30 >> 1;
    if (v29 >= -1) {
      int v32 = v29 + 1;
    }
    else {
      int v32 = v29 + 2;
    }
    int v33 = v32 >> 1;
    v18[5] = v31;
    v18[6] = v33;
    if (v31 >= -1) {
      int v34 = v31 + 1;
    }
    else {
      int v34 = v31 + 2;
    }
    int v35 = v34 >> 1;
    if (v33 >= -1) {
      int v36 = v33 + 1;
    }
    else {
      int v36 = v33 + 2;
    }
    v18[7] = v35;
    v18[8] = v36 >> 1;
    int v37 = v35 + 2;
    if (v35 >= -1) {
      int v37 = v35 + 1;
    }
    v18[9] = v37 >> 1;
    unint64_t v38 = *(void *)(a1 + 88) - (void)v21;
    if (v38)
    {
      if (v38 >= 5) {
        *(void *)(a1 + 88) = v21 + 1;
      }
    }
    else
    {
      sub_219488D70(a1 + 80, 1uLL);
      int v21 = *(_DWORD **)(a1 + 80);
    }
    *int v21 = 0;
  }
  if (*(unsigned char *)(a1 + 152))
  {
    if (!*(void *)(a2 + 56)) {
      return a1;
    }
    goto LABEL_61;
  }
  uint64_t v39 = *(void *)(a1 + 200);
  unint64_t v40 = *(void *)(a1 + 64);
  unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 208) - v39) >> 3);
  if (v40 <= v41)
  {
    if (v40 < v41) {
      *(void *)(a1 + 208) = v39 + 40 * v40;
    }
  }
  else
  {
    sub_2194D06E4((char **)(a1 + 200), v40 - v41);
    unint64_t v40 = *(void *)(a1 + 64);
  }
  if (v40)
  {
    int v42 = *(char **)(a1 + 200);
    do
    {
      memset_pattern16(v42, &unk_21950CE60, 0x28uLL);
      v42 += 40;
      --v40;
    }
    while (v40);
  }
  memset_pattern16((void *)(a1 + 156), &unk_21950CE70, 0x28uLL);
  if (*(void *)(a2 + 56))
  {
LABEL_61:
    unint64_t v43 = 0;
    unsigned int v44 = 1;
    do
    {
      sub_2194C6FD0((uint64_t)v51, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), (void *)(*(void *)(a1 + 104) + 40 * v43), (_DWORD *)(*(void *)(a1 + 128) + 40 * v43), (void *)(*(void *)(a1 + 200) + 40 * v43), (void *)(a1 + 156));
      sub_2194C7AD0((uint64_t)v51, (uint64_t)&v49);
      uint64_t v45 = *v5;
      uint64_t v46 = *v5 + 24 * v43;
      int64_t v47 = *(void **)v46;
      if (*(void *)v46)
      {
        *(void *)(v45 + 24 * v43 + 8) = v47;
        operator delete(v47);
        *(void *)uint64_t v46 = 0;
        *(void *)(v46 + 8) = 0;
        *(void *)(v46 + 16) = 0;
      }
      *(_OWORD *)uint64_t v46 = v49;
      *(void *)(v45 + 24 * v43 + 16) = v50;
      unint64_t v43 = v44++;
    }
    while (*(void *)(a2 + 56) > v43);
  }
  return a1;
}

void sub_2194CD558(_Unwind_Exception *a1)
{
  sub_21948B590(v3);
  uint64_t v5 = (void *)v1[695];
  if (v5)
  {
    v1[696] = v5;
    operator delete(v5);
    uint64_t v6 = (void *)v1[692];
    if (!v6)
    {
LABEL_3:
      unint64_t v7 = (void *)v1[689];
      if (!v7) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v6 = (void *)v1[692];
    if (!v6) {
      goto LABEL_3;
    }
  }
  v1[693] = v6;
  operator delete(v6);
  unint64_t v7 = (void *)v1[689];
  if (!v7)
  {
LABEL_4:
    unint64_t v8 = (void *)v1[686];
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  v1[690] = v7;
  operator delete(v7);
  unint64_t v8 = (void *)v1[686];
  if (!v8)
  {
LABEL_5:
    uint64_t v9 = (void *)v1[683];
    if (!v9) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  v1[687] = v8;
  operator delete(v8);
  uint64_t v9 = (void *)v1[683];
  if (!v9)
  {
LABEL_6:
    uint64_t v10 = (void *)v1[680];
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  v1[684] = v9;
  operator delete(v9);
  uint64_t v10 = (void *)v1[680];
  if (!v10)
  {
LABEL_7:
    unint64_t v11 = (void *)v1[677];
    if (!v11) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  v1[681] = v10;
  operator delete(v10);
  unint64_t v11 = (void *)v1[677];
  if (!v11)
  {
LABEL_8:
    uint64_t v12 = (void *)v1[674];
    if (!v12) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  v1[678] = v11;
  operator delete(v11);
  uint64_t v12 = (void *)v1[674];
  if (!v12)
  {
LABEL_9:
    uint64_t v13 = (void *)v1[671];
    if (!v13) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  v1[675] = v12;
  operator delete(v12);
  uint64_t v13 = (void *)v1[671];
  if (!v13)
  {
LABEL_10:
    unsigned int v14 = (void *)v1[668];
    if (!v14) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  v1[672] = v13;
  operator delete(v13);
  unsigned int v14 = (void *)v1[668];
  if (!v14)
  {
LABEL_11:
    sub_21948B590(v2);
    sub_2194CD684((uint64_t)v1);
    _Unwind_Resume(a1);
  }
LABEL_21:
  v1[669] = v14;
  operator delete(v14);
  sub_21948B590(v2);
  sub_2194CD684((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2194CD684(uint64_t a1)
{
  *(void *)a1 = &unk_26CAD6BB0;
  sub_21948CFDC(a1 + 488, *(void **)(a1 + 496));
  sub_2194D00E8((void **)(a1 + 224));
  unsigned int v2 = *(void **)(a1 + 200);
  if (v2)
  {
    *(void *)(a1 + 208) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 128);
  if (v3)
  {
    *(void *)(a1 + 136) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 104);
  if (v4)
  {
    *(void *)(a1 + 112) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 80);
  if (v5)
  {
    *(void *)(a1 + 88) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_2194CD71C(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  if (*(void *)(a1 + 64) <= (unint64_t)a3) {
    sub_2195096D0();
  }
  uint64_t v6 = a2;
  sub_2194CE2EC(&v177, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  sub_2194CE2EC(&v175, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[1] - *v6) >> 3));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  __n128 v167 = a4;
  if (v8 == *v6)
  {
    uint64_t v7 = v6[1];
  }
  else
  {
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      unint64_t v11 = &v177[v9 / 8];
      unint64_t v12 = (uint64_t)(*(void *)(v7 + v9 + 8) - *(void *)(v7 + v9)) >> 7;
      LOBYTE(__p) = 0;
      unint64_t v13 = v11[1] - *v11;
      if (v12 <= v13)
      {
        if (v12 < v13) {
          v11[1] = *v11 + v12;
        }
      }
      else
      {
        sub_2194D089C(v11, v12 - v13, (const char *)&__p);
        uint64_t v7 = *v6;
        unint64_t v12 = (uint64_t)(*(void *)(*v6 + v9 + 8) - *(void *)(*v6 + v9)) >> 7;
      }
      unsigned int v14 = (unint64_t *)((char *)v175 + v9);
      LOBYTE(__p) = 0;
      uint64_t v15 = *(void *)((char *)v175 + v9);
      unint64_t v16 = *(void *)((char *)v175 + v9 + 8) - v15;
      if (v12 <= v16)
      {
        if (v12 < v16) {
          v14[1] = v15 + v12;
        }
      }
      else
      {
        sub_2194D089C(v14, v12 - v16, (const char *)&__p);
        uint64_t v7 = *v6;
      }
      *(void *)(a1 + v9 + 5352) = *(void *)(a1 + v9 + 5344);
      ++v10;
      uint64_t v8 = v6[1];
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3));
  }
  std::string __p = 0;
  uint64_t v173 = 0;
  __n128 v174 = 0;
  unsigned int v161 = a3;
  uint64_t v17 = *(void *)(a1 + 5320) + 24 * a3;
  uint64_t v18 = *(_DWORD **)v17;
  __n128 v163 = *(_DWORD **)(v17 + 8);
  __n128 v168 = v6;
  if (*(_DWORD **)v17 != v163)
  {
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = 0;
    int v22 = 0;
    while (1)
    {
      unsigned int v23 = v18[1];
      unsigned int v24 = v23 - 1;
      uint64_t v25 = *(void *)(v7 + 24 * (v23 - 1));
      if (*(void *)(v7 + 24 * (v23 - 1) + 8) != v25)
      {
        unsigned int v26 = (*v18 & 0x1FFFu) >> (v23 >> 1);
        if (*(_DWORD *)(v25 + 40) <= v26) {
          break;
        }
      }
LABEL_16:
      v18 += 2;
      if (v18 == v163)
      {
        uint64_t v8 = v6[1];
        goto LABEL_78;
      }
    }
    unint64_t v27 = 0;
    uint64_t v28 = a1 + 24 * v24;
    __n128 v166 = (void **)(v28 + 5344);
    int v29 = (uint64_t *)(v28 + 5352);
    __n128 v170 = (void *)(v28 + 5360);
    unsigned int v164 = (*v18 & 0x1FFFu) >> (v23 >> 1);
    __n128 v165 = (uint64_t *)(v28 + 5352);
    while (1)
    {
      if (*(unsigned char *)(v177[3 * v24] + v27)) {
        goto LABEL_64;
      }
      if (v22 < *(_DWORD *)(a1 + 5312)) {
        break;
      }
      *(unsigned char *)(*((void *)v175 + 3 * v24) + v27) = 1;
LABEL_63:
      *(unsigned char *)(v177[3 * v24] + v27) = 1;
      uint64_t v7 = *v6;
LABEL_64:
      ++v27;
      uint64_t v72 = *(void *)(v7 + 24 * v24);
      if (v27 >= (*(void *)(v7 + 24 * v24 + 8) - v72) >> 7 || *(_DWORD *)(v72 + (v27 << 7) + 40) > v26) {
        goto LABEL_16;
      }
    }
    int v30 = (char *)*v29;
    if ((unint64_t)*v29 < *v170)
    {
      *(_DWORD *)int v30 = v22;
      *int v29 = (uint64_t)(v30 + 4);
      if (v21 < v20)
      {
LABEL_24:
        *(_DWORD *)int v21 = v27;
        uint64_t v31 = (uint64_t)(v21 + 4);
LABEL_62:
        ++v22;
        uint64_t v173 = v31;
        int v21 = (char *)v31;
        uint64_t v6 = v168;
        goto LABEL_63;
      }
LABEL_47:
      long long v58 = (char *)(v21 - v19);
      uint64_t v59 = (v21 - v19) >> 2;
      unint64_t v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 62) {
        sub_219486AE4();
      }
      if ((v20 - v19) >> 1 > v60) {
        unint64_t v60 = (v20 - v19) >> 1;
      }
      if ((unint64_t)(v20 - v19) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v61 = v60;
      }
      if (v61)
      {
        if (v61 >> 62) {
          sub_219486AFC();
        }
        uint64_t v62 = v21;
        int v63 = v22;
        uint64_t v64 = operator new(4 * v61);
        int v22 = v63;
        int v21 = v62;
        __n128 v65 = (char *)v64 + 4 * v59;
        *__n128 v65 = v27;
        uint64_t v31 = (uint64_t)(v65 + 1);
        if (v21 != v19)
        {
LABEL_56:
          unint64_t v66 = v21 - 4 - v19;
          if (v66 < 0xBC
            || &v58[(void)v64 - 4 - (v66 & 0xFFFFFFFFFFFFFFFCLL)] > &v58[(void)v64 - 4]
            || &v21[-(v66 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v21 - 4
            || (unint64_t)(v21 - &v58[(void)v64]) < 0x20)
          {
            long long v67 = v21;
            int v29 = v165;
          }
          else
          {
            uint64_t v73 = (v66 >> 2) + 1;
            uint64_t v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
            long long v67 = &v21[-v74];
            __n128 v65 = (_DWORD *)((char *)v65 - v74);
            long long v75 = (char *)v64 + 4 * v59 - 16;
            long long v76 = v21 - 16;
            uint64_t v77 = v73 & 0x7FFFFFFFFFFFFFF8;
            int v29 = v165;
            do
            {
              long long v78 = *(_OWORD *)v76;
              *(v75 - 1) = *((_OWORD *)v76 - 1);
              _OWORD *v75 = v78;
              v75 -= 2;
              v76 -= 32;
              v77 -= 8;
            }
            while (v77);
            if (v73 == (v73 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_59:
              uint64_t v20 = (char *)v64 + 4 * v61;
              std::string __p = v65;
              uint64_t v173 = v31;
              __n128 v174 = v20;
              if (!v19)
              {
LABEL_61:
                unint64_t v19 = (char *)v65;
                unsigned int v26 = v164;
                goto LABEL_62;
              }
LABEL_60:
              long long v69 = v20;
              long long v70 = v19;
              int v71 = v22;
              operator delete(v70);
              uint64_t v20 = v69;
              int v22 = v71;
              goto LABEL_61;
            }
          }
          do
          {
            int v68 = *((_DWORD *)v67 - 1);
            v67 -= 4;
            *--__n128 v65 = v68;
          }
          while (v67 != v19);
          goto LABEL_59;
        }
      }
      else
      {
        uint64_t v64 = 0;
        __n128 v65 = (_DWORD *)(4 * v59);
        *(_DWORD *)(4 * v59) = v27;
        uint64_t v31 = 4 * v59 + 4;
        if (v21 != v19) {
          goto LABEL_56;
        }
      }
      int v29 = v165;
      uint64_t v20 = (char *)v64 + 4 * v61;
      std::string __p = v65;
      uint64_t v173 = v31;
      __n128 v174 = v20;
      if (!v19) {
        goto LABEL_61;
      }
      goto LABEL_60;
    }
    int v32 = (char *)*v166;
    uint64_t v33 = v30 - (unsigned char *)*v166;
    uint64_t v34 = v33 >> 2;
    unint64_t v35 = (v33 >> 2) + 1;
    if (v35 >> 62) {
      sub_219486AE4();
    }
    uint64_t v36 = *v170 - (void)v32;
    if (v36 >> 1 > v35) {
      unint64_t v35 = v36 >> 1;
    }
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v35;
    }
    unint64_t v162 = (unint64_t)v20;
    if (v37)
    {
      if (v37 >> 62) {
        sub_219486AFC();
      }
      unint64_t v38 = v19;
      uint64_t v39 = v18;
      unint64_t v40 = v21;
      int v41 = v22;
      unint64_t v42 = v37;
      unint64_t v43 = operator new(4 * v37);
      int v22 = v41;
      int v21 = v40;
      unint64_t v37 = v42;
      uint64_t v18 = v39;
      unint64_t v19 = v38;
      uint64_t v34 = v33 >> 2;
      unsigned int v44 = &v43[4 * (v33 >> 2)];
      *unsigned int v44 = v41;
      uint64_t v45 = (uint64_t)(v44 + 1);
      if (v30 == v32)
      {
LABEL_44:
        int v29 = v165;
        *__n128 v166 = v44;
        *__n128 v165 = v45;
        *__n128 v170 = &v43[4 * v37];
        if (v32)
        {
          long long v55 = v32;
          int v56 = v22;
          long long v57 = v21;
          operator delete(v55);
          int v21 = v57;
          int v22 = v56;
        }
        unsigned int v26 = v164;
        uint64_t v20 = (char *)v162;
        *__n128 v165 = v45;
        if ((unint64_t)v21 < v162) {
          goto LABEL_24;
        }
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v43 = 0;
      unsigned int v44 = (_DWORD *)(4 * v34);
      *(_DWORD *)(4 * v34) = v22;
      uint64_t v45 = 4 * v34 + 4;
      if (v30 == v32) {
        goto LABEL_44;
      }
    }
    unint64_t v46 = v30 - 4 - v32;
    if (v46 < 0x2C) {
      goto LABEL_162;
    }
    if ((unint64_t)(v30 - &v43[v33]) < 0x20) {
      goto LABEL_162;
    }
    uint64_t v47 = (v46 >> 2) + 1;
    uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
    long long v49 = &v30[-v48];
    unsigned int v44 = (_DWORD *)((char *)v44 - v48);
    uint64_t v50 = &v43[4 * v34 - 16];
    long long v51 = (long long *)(v30 - 16);
    uint64_t v52 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v53 = *v51;
      *(v50 - 1) = *(v51 - 1);
      *uint64_t v50 = v53;
      v50 -= 2;
      v51 -= 2;
      v52 -= 8;
    }
    while (v52);
    int v30 = v49;
    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_162:
      do
      {
        int v54 = *((_DWORD *)v30 - 1);
        v30 -= 4;
        *--unsigned int v44 = v54;
      }
      while (v30 != v32);
    }
    goto LABEL_44;
  }
LABEL_78:
  long long v79 = v167;
  sub_2194CE3B8(v167, 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3));
  uint64_t v80 = *v6;
  uint64_t v81 = v6[1];
  if (v81 == *v6) {
    goto LABEL_111;
  }
  unint64_t v82 = 0;
  unint64_t v83 = 0;
  do
  {
    uint64_t v84 = *(void *)(v80 + 24 * v82);
    if (*(void *)(v80 + 24 * v82 + 8) != v84)
    {
      unint64_t v85 = 0;
      while (1)
      {
        if (*(unsigned char *)(*((void *)v175 + 3 * v82) + v85)) {
          goto LABEL_86;
        }
        long long v94 = (char **)(*v79 + 24 * v82);
        long long v95 = (long long *)(v84 + (v85 << 7));
        long long v97 = v94 + 1;
        long long v96 = v94[1];
        long long v99 = v94 + 2;
        unint64_t v98 = (unint64_t)v94[2];
        if ((unint64_t)v96 >= v98) {
          break;
        }
        long long v86 = *v95;
        long long v87 = v95[1];
        long long v88 = v95[3];
        *((_OWORD *)v96 + 2) = v95[2];
        *((_OWORD *)v96 + 3) = v88;
        *(_OWORD *)long long v96 = v86;
        *((_OWORD *)v96 + 1) = v87;
        long long v89 = v95[4];
        long long v90 = v95[5];
        long long v91 = v95[7];
        *((_OWORD *)v96 + 6) = v95[6];
        *((_OWORD *)v96 + 7) = v91;
        *((_OWORD *)v96 + 4) = v89;
        *((_OWORD *)v96 + 5) = v90;
        long long v92 = v96 + 128;
LABEL_85:
        void *v97 = v92;
        ++v83;
        uint64_t v80 = *v6;
LABEL_86:
        ++v85;
        long long v93 = (uint64_t *)(v80 + 24 * v82);
        uint64_t v84 = *v93;
        if (v85 >= (v93[1] - *v93) >> 7)
        {
          uint64_t v81 = v6[1];
          goto LABEL_81;
        }
      }
      long long v100 = *v94;
      uint64_t v101 = (v96 - *v94) >> 7;
      unint64_t v102 = v101 + 1;
      if ((unint64_t)(v101 + 1) >> 57) {
        sub_219486AE4();
      }
      uint64_t v103 = v98 - (void)v100;
      if (v103 >> 6 > v102) {
        unint64_t v102 = v103 >> 6;
      }
      if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFF80) {
        unint64_t v104 = 0x1FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v104 = v102;
      }
      unint64_t v171 = v83;
      if (v104)
      {
        if (v104 >> 57) {
          sub_219486AFC();
        }
        long long v105 = (char *)operator new(v104 << 7);
      }
      else
      {
        long long v105 = 0;
      }
      long long v106 = &v105[128 * v101];
      long long v107 = *v95;
      long long v108 = v95[1];
      long long v109 = v95[3];
      *((_OWORD *)v106 + 2) = v95[2];
      *((_OWORD *)v106 + 3) = v109;
      *(_OWORD *)long long v106 = v107;
      *((_OWORD *)v106 + 1) = v108;
      long long v110 = v95[4];
      long long v111 = v95[5];
      long long v112 = v95[7];
      *((_OWORD *)v106 + 6) = v95[6];
      *((_OWORD *)v106 + 7) = v112;
      *((_OWORD *)v106 + 4) = v110;
      *((_OWORD *)v106 + 5) = v111;
      long long v113 = v106;
      if (v96 == v100)
      {
        uint64_t v6 = v168;
        *long long v94 = v106;
        long long v92 = v106 + 128;
        void *v97 = v106 + 128;
        void *v99 = &v105[128 * v104];
        if (!v96) {
          goto LABEL_104;
        }
      }
      else
      {
        uint64_t v6 = v168;
        do
        {
          long long v114 = *((_OWORD *)v96 - 8);
          long long v115 = *((_OWORD *)v96 - 7);
          long long v116 = *((_OWORD *)v96 - 5);
          *((_OWORD *)v113 - 6) = *((_OWORD *)v96 - 6);
          *((_OWORD *)v113 - 5) = v116;
          *((_OWORD *)v113 - 8) = v114;
          *((_OWORD *)v113 - 7) = v115;
          long long v117 = *((_OWORD *)v96 - 4);
          long long v118 = *((_OWORD *)v96 - 3);
          long long v119 = *((_OWORD *)v96 - 1);
          *((_OWORD *)v113 - 2) = *((_OWORD *)v96 - 2);
          *((_OWORD *)v113 - 1) = v119;
          *((_OWORD *)v113 - 4) = v117;
          *((_OWORD *)v113 - 3) = v118;
          v113 -= 128;
          v96 -= 128;
        }
        while (v96 != v100);
        long long v96 = *v94;
        *long long v94 = v113;
        long long v92 = v106 + 128;
        void *v97 = v106 + 128;
        void *v99 = &v105[128 * v104];
        if (!v96) {
          goto LABEL_104;
        }
      }
      operator delete(v96);
LABEL_104:
      long long v79 = v167;
      unint64_t v83 = v171;
      goto LABEL_85;
    }
LABEL_81:
    ++v82;
  }
  while (v82 < 0xAAAAAAAAAAAAAAABLL * ((v81 - v80) >> 3));
  *(_DWORD *)(a1 + 5312) -= v83;
  if (!v83)
  {
LABEL_111:
    unint64_t v123 = 0;
    uint64_t v124 = 0;
    long long v122 = 0;
    uint64_t v125 = *v79;
    uint64_t v128 = v79[1];
    uint64_t v127 = v128 - *v79;
    if (v128 == *v79) {
      goto LABEL_120;
    }
    goto LABEL_112;
  }
  if (v83 >> 57) {
    sub_219486AE4();
  }
  size_t v120 = v83 << 7;
  unint64_t v121 = v83;
  long long v122 = (char *)operator new(v83 << 7);
  unint64_t v123 = v121;
  bzero(v122, v120);
  uint64_t v124 = &v122[v120];
  uint64_t v125 = *v79;
  uint64_t v126 = v79[1];
  uint64_t v127 = v126 - *v79;
  if (v126 != *v79)
  {
LABEL_112:
    uint64_t v129 = 0;
    unint64_t v130 = v127 / 24;
    if (v130 <= 1) {
      unint64_t v130 = 1;
    }
    do
    {
      long long v131 = (uint64_t *)(v125 + 24 * v129);
      uint64_t v132 = *v131;
      if (v131[1] != *v131)
      {
        uint64_t v133 = 0;
        unint64_t v134 = 0;
        uint64_t v135 = *(void *)(a1 + 24 * v129 + 5344);
        do
        {
          long long v136 = (long long *)(v132 + v133);
          long long v137 = &v122[128 * (unint64_t)*(unsigned int *)(v135 + 4 * v134)];
          long long v138 = *v136;
          long long v139 = v136[1];
          long long v140 = v136[3];
          *((_OWORD *)v137 + 2) = v136[2];
          *((_OWORD *)v137 + 3) = v140;
          *(_OWORD *)long long v137 = v138;
          *((_OWORD *)v137 + 1) = v139;
          long long v141 = v136[4];
          long long v142 = v136[5];
          long long v143 = v136[7];
          *((_OWORD *)v137 + 6) = v136[6];
          *((_OWORD *)v137 + 7) = v143;
          *((_OWORD *)v137 + 4) = v141;
          *((_OWORD *)v137 + 5) = v142;
          ++v134;
          uint64_t v132 = *v131;
          v133 += 128;
        }
        while (v134 < (v131[1] - *v131) >> 7);
      }
      ++v129;
    }
    while (v129 != v130);
  }
LABEL_120:
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v144 = *(void *)(a1 + 5584) + 24 * v161;
    unint64_t v145 = (uint64_t)(*(void *)(v144 + 8) - *(void *)v144) >> 8;
    if (v123 <= v145)
    {
      if (v123 < v145) {
        *(void *)(v144 + 8) = *(void *)v144 + (v123 << 8);
      }
    }
    else
    {
      sub_2194D0570((char **)v144, v123 - v145);
    }
  }
  if (v124 == v122)
  {
    if (v122) {
      goto LABEL_132;
    }
  }
  else
  {
    unint64_t v146 = 0;
    __n128 v147 = v122 + 24;
    do
    {
      if (*v147)
      {
        int v148 = *(_DWORD *)(a1 + 5608);
        *(_DWORD *)(a1 + 5608) = v148 + 1;
      }
      else
      {
        int v148 = *(_DWORD *)(a1 + 5612);
        *(_DWORD *)(a1 + 5612) = v148 + 1;
      }
      *(_DWORD *)(*(void *)(*v79 + 24 * *((unsigned int *)v147 - 1))
                + ((unint64_t)*((unsigned int *)__p + v146++) << 7)
                + 32) = v148;
      v147 += 128;
    }
    while (v146 < (v124 - v122) >> 7);
LABEL_132:
    operator delete(v122);
  }
  if (__p) {
    operator delete(__p);
  }
  __n128 v149 = (char *)v175;
  if (v175)
  {
    __n128 v150 = v176;
    __n128 v151 = v175;
    if (v176 != v175)
    {
      __n128 v152 = v176;
      do
      {
        __n128 v154 = (void *)*((void *)v152 - 3);
        v152 -= 24;
        __n128 v153 = v154;
        if (v154)
        {
          *((void *)v150 - 2) = v153;
          operator delete(v153);
        }
        __n128 v150 = v152;
      }
      while (v152 != v149);
      __n128 v151 = v175;
    }
    __n128 v176 = v149;
    operator delete(v151);
  }
  __n128 v155 = v177;
  if (v177)
  {
    __n128 v156 = v178;
    __n128 v157 = v177;
    if (v178 != v177)
    {
      __n128 v158 = v178;
      do
      {
        __n128 v160 = (void *)*(v158 - 3);
        v158 -= 3;
        __n128 v159 = v160;
        if (v160)
        {
          *(v156 - 2) = v159;
          operator delete(v159);
        }
        __n128 v156 = v158;
      }
      while (v158 != v155);
      __n128 v157 = v177;
    }
    __n128 v178 = v155;
    operator delete(v157);
  }
}

void sub_2194CE238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26)
{
  if (v26) {
    operator delete(v26);
  }
  sub_21948B590(v27);
  if (__p) {
    operator delete(__p);
  }
  sub_21948B590(&a26);
  sub_21948B590((void **)(v28 - 112));
  _Unwind_Resume(a1);
}

void *sub_2194CE2EC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_219486AE4();
    }
    uint64_t v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2194CE398(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_219509708((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2194CE3B8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_219486AE4();
    }
    uint64_t v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2194CE464(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_219509708((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2194CE484(uint64_t a1, void *a2, uint64_t a3, void *a4, unsigned int a5)
{
  uint64_t v292 = *MEMORY[0x263EF8340];
  *(void *)__n128 v227 = a5;
  if (*(void *)(a1 + 64) <= (unint64_t)a5) {
    sub_219509770();
  }
  uint64_t v5 = a1;
  uint64_t v273 = 0;
  long long v271 = 0u;
  long long v272 = 0u;
  long long v269 = 0u;
  long long v270 = 0u;
  long long v267 = 0u;
  long long v268 = 0u;
  long long v266 = 0u;
  long long v264 = 0u;
  memset(v265, 0, 28);
  long long v262 = 0u;
  long long v263 = 0u;
  long long v260 = 0u;
  long long v261 = 0u;
  long long v258 = 0u;
  long long v259 = 0u;
  long long v256 = 0u;
  long long v257 = 0u;
  if (a5)
  {
    sub_2194CD71C(a1, a2, a5, (uint64_t *)&__p);
  }
  else
  {
    *(_DWORD *)(a1 + 5312) = *(_DWORD *)(a1 + 72);
    *(void *)(a1 + 5608) = 0;
    uint64_t v6 = *(void *)(a1 + 368);
    uint64_t v7 = *(void *)(a1 + 376) - v6;
    if (v7)
    {
      unint64_t v8 = v7 / 24;
      if (v8 <= 1) {
        unint64_t v8 = 1;
      }
      unint64_t v9 = (void *)(*(void *)(a1 + 224) + 8);
      unint64_t v10 = (void *)(*(void *)(a1 + 416) + 8);
      unint64_t v11 = (void *)(*(void *)(a1 + 248) + 8);
      unint64_t v12 = (void *)(*(void *)(a1 + 392) + 8);
      unint64_t v13 = (void *)(*(void *)(a1 + 272) + 8);
      unsigned int v14 = (void *)(v6 + 8);
      uint64_t v15 = (void *)(*(void *)(a1 + 296) + 8);
      unint64_t v16 = (void *)(*(void *)(a1 + 344) + 8);
      uint64_t v17 = (void *)(*(void *)(a1 + 320) + 8);
      do
      {
        *unint64_t v9 = *(v9 - 1);
        v9 += 3;
        *unint64_t v11 = *(v11 - 1);
        v11 += 3;
        *unint64_t v13 = *(v13 - 1);
        v13 += 3;
        *uint64_t v15 = *(v15 - 1);
        v15 += 3;
        *uint64_t v17 = *(v17 - 1);
        v17 += 3;
        *unint64_t v16 = *(v16 - 1);
        v16 += 3;
        void *v14 = *(v14 - 1);
        v14 += 3;
        void *v12 = *(v12 - 1);
        v12 += 3;
        void *v10 = *(v10 - 1);
        v10 += 3;
        --v8;
      }
      while (v8);
    }
    sub_2194CD71C(a1, a2, 0, (uint64_t *)&__p);
  }
  int v18 = *(_DWORD *)(v5 + 24);
  uint64_t v242 = v5;
  if ((v18 - 3) <= 0xFFFFFFFD)
  {
    __n128 v235 = (void *)(v5 + 224);
    int v231 = *(_DWORD *)(*(void *)(v5 + 80) + 4 * *(void *)v227) << 6;
    unint64_t v19 = 1;
    do
    {
      uint64_t v20 = v19 - 1;
      uint64_t v21 = *((void *)__p + 3 * v19 - 2) - *((void *)__p + 3 * v19 - 3);
      if (v21)
      {
        unint64_t v22 = 0;
        unint64_t v23 = v21 >> 7;
        uint64_t v24 = v5 + 24 * v20;
        __n128 v229 = (void *)(v24 + 5344);
        __n128 v228 = (void *)(v24 + 5352);
        if (v23 <= 1) {
          unint64_t v23 = 1;
        }
        unint64_t v233 = v23;
        unint64_t v238 = v19;
        uint64_t v240 = v19 - 1;
        do
        {
          uint64_t v36 = (long long *)(*((void *)__p + 3 * v20) + (v22 << 7));
          long long v37 = v36[3];
          long long v39 = *v36;
          long long v38 = v36[1];
          long long v248 = v36[2];
          long long v249 = v37;
          long long v246 = v39;
          long long v247 = v38;
          long long v40 = v36[6];
          long long v42 = v36[4];
          long long v41 = v36[5];
          long long v253 = v36[7];
          long long v251 = v41;
          long long v252 = v40;
          long long v250 = v42;
          LODWORD(v40) = v246;
          double v43 = (double)(unint64_t)v40 * 0.015625;
          double v44 = (double)__PAIR64__(DWORD1(v253), DWORD1(v246)) * 0.015625;
          int v45 = DWORD2(v246);
          sub_2194EB19C(v5, a3, SDWORD2(v246), v19, (unsigned int *)&v266, v43, v44);
          unint64_t v46 = (char **)(*v235 + 24 * v20);
          uint64_t v47 = v46 + 1;
          uint64_t v48 = v46[1];
          unint64_t v49 = (unint64_t)v46[2];
          if ((unint64_t)v48 >= v49)
          {
            long long v57 = *v46;
            unint64_t v58 = 0xEEEEEEEEEEEEEEEFLL * ((v48 - *v46) >> 3);
            unint64_t v59 = v58 + 1;
            if (v58 + 1 > 0x222222222222222) {
              sub_219486AE4();
            }
            unint64_t v60 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v49 - (void)v57) >> 3);
            if (2 * v60 > v59) {
              unint64_t v59 = 2 * v60;
            }
            if (v60 >= 0x111111111111111) {
              unint64_t v61 = 0x222222222222222;
            }
            else {
              unint64_t v61 = v59;
            }
            if (v61)
            {
              if (v61 > 0x222222222222222) {
                sub_219486AFC();
              }
              uint64_t v62 = (char *)operator new(120 * v61);
            }
            else
            {
              uint64_t v62 = 0;
            }
            long long v63 = v271;
            uint64_t v64 = &v62[120 * v58];
            *((_OWORD *)v64 + 4) = v270;
            *((_OWORD *)v64 + 5) = v63;
            *((_OWORD *)v64 + 6) = v272;
            *((void *)v64 + 14) = v273;
            long long v65 = v267;
            *(_OWORD *)uint64_t v64 = v266;
            *((_OWORD *)v64 + 1) = v65;
            long long v66 = v269;
            *((_OWORD *)v64 + 2) = v268;
            *((_OWORD *)v64 + 3) = v66;
            long long v67 = v64;
            if (v48 != v57)
            {
              do
              {
                long long v68 = *(_OWORD *)(v48 - 120);
                long long v69 = *(_OWORD *)(v48 - 104);
                long long v70 = *(_OWORD *)(v48 - 88);
                *(_OWORD *)(v67 - 72) = *(_OWORD *)(v48 - 72);
                *(_OWORD *)(v67 - 88) = v70;
                *(_OWORD *)(v67 - 104) = v69;
                *(_OWORD *)(v67 - 120) = v68;
                long long v71 = *(_OWORD *)(v48 - 56);
                long long v72 = *(_OWORD *)(v48 - 40);
                long long v73 = *(_OWORD *)(v48 - 24);
                *((void *)v67 - 1) = *((void *)v48 - 1);
                *(_OWORD *)(v67 - 24) = v73;
                *(_OWORD *)(v67 - 40) = v72;
                *(_OWORD *)(v67 - 56) = v71;
                v67 -= 120;
                v48 -= 120;
              }
              while (v48 != v57);
              uint64_t v48 = *v46;
            }
            long long *v46 = v67;
            int v56 = v64 + 120;
            *uint64_t v47 = v64 + 120;
            void v46[2] = &v62[120 * v61];
            if (v48) {
              operator delete(v48);
            }
          }
          else
          {
            long long v50 = v266;
            long long v51 = v267;
            long long v52 = v269;
            *((_OWORD *)v48 + 2) = v268;
            *((_OWORD *)v48 + 3) = v52;
            *(_OWORD *)uint64_t v48 = v50;
            *((_OWORD *)v48 + 1) = v51;
            long long v53 = v270;
            long long v54 = v271;
            long long v55 = v272;
            *((void *)v48 + 14) = v273;
            *((_OWORD *)v48 + 5) = v54;
            *((_OWORD *)v48 + 6) = v55;
            *((_OWORD *)v48 + 4) = v53;
            int v56 = v48 + 120;
          }
          *uint64_t v47 = v56;
          double v244 = 0.0;
          double v245 = 0.0;
          double v243 = 0.0;
          sub_2194EB520(v242, &v266, &v245, &v244, &v243);
          if ((int)v245 >= 0x1000)
          {
            sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKeyPointToDescriptor.cpp", 196, "orientation >= 0 && orientation < 256 && \"orientation overflow\"", (void (*)(void *))sub_2194FF9C0);
            abort();
          }
          HIDWORD(v246) = (int)v245 >> 4;
          LODWORD(v246) = v246 + v231;
          LOWORD(v247) = sub_2194EA030(v242, DWORD2(v246)) & 0x3FFF;
          LODWORD(v247) = (unsigned __int16)v247;
          sub_2194EB754(v242, a3, v45, v238, (unsigned int *)&v256, v43, v44, v244, v243);
          uint64_t v74 = (void *)(*(void *)(v242 + 248) + 24 * v240);
          long long v76 = v74 + 1;
          long long v75 = (_OWORD *)v74[1];
          unint64_t v77 = v74[2];
          if ((unint64_t)v75 >= v77)
          {
            long long v87 = (_OWORD *)*v74;
            unint64_t v88 = 0x82FA0BE82FA0BE83 * (((uint64_t)v75 - *v74) >> 2);
            unint64_t v89 = v88 + 1;
            if (v88 + 1 > 0x17D05F417D05F41) {
              sub_219486AE4();
            }
            unint64_t v90 = 0x82FA0BE82FA0BE83 * ((uint64_t)(v77 - (void)v87) >> 2);
            if (2 * v90 > v89) {
              unint64_t v89 = 2 * v90;
            }
            if (v90 >= 0xBE82FA0BE82FA0) {
              unint64_t v91 = 0x17D05F417D05F41;
            }
            else {
              unint64_t v91 = v89;
            }
            if (v91)
            {
              if (v91 > 0x17D05F417D05F41) {
                sub_219486AFC();
              }
              long long v92 = (char *)operator new(172 * v91);
            }
            else
            {
              long long v92 = 0;
            }
            long long v93 = v265[0];
            long long v94 = &v92[172 * v88];
            *((_OWORD *)v94 + 8) = v264;
            *((_OWORD *)v94 + 9) = v93;
            *(_OWORD *)(v94 + 156) = *(_OWORD *)((char *)v265 + 12);
            long long v95 = v261;
            *((_OWORD *)v94 + 4) = v260;
            *((_OWORD *)v94 + 5) = v95;
            long long v96 = v263;
            *((_OWORD *)v94 + 6) = v262;
            *((_OWORD *)v94 + 7) = v96;
            long long v97 = v257;
            *(_OWORD *)long long v94 = v256;
            *((_OWORD *)v94 + 1) = v97;
            long long v98 = v259;
            *((_OWORD *)v94 + 2) = v258;
            *((_OWORD *)v94 + 3) = v98;
            long long v99 = v94;
            if (v75 != v87)
            {
              do
              {
                long long v100 = *(_OWORD *)((char *)v75 - 172);
                long long v101 = *(_OWORD *)((char *)v75 - 156);
                *(_OWORD *)((char *)v99 - 140) = *(_OWORD *)((char *)v75 - 140);
                *(_OWORD *)((char *)v99 - 156) = v101;
                *(_OWORD *)((char *)v99 - 172) = v100;
                long long v102 = *(_OWORD *)((char *)v75 - 124);
                long long v103 = *(_OWORD *)((char *)v75 - 108);
                long long v104 = *(_OWORD *)((char *)v75 - 92);
                *(_OWORD *)((char *)v99 - 76) = *(_OWORD *)((char *)v75 - 76);
                *(_OWORD *)((char *)v99 - 92) = v104;
                *(_OWORD *)((char *)v99 - 108) = v103;
                *(_OWORD *)((char *)v99 - 124) = v102;
                long long v105 = *(_OWORD *)((char *)v75 - 60);
                long long v106 = *(_OWORD *)((char *)v75 - 44);
                long long v107 = *(_OWORD *)((char *)v75 - 28);
                *(v99 - 1) = *(v75 - 1);
                *(_OWORD *)((char *)v99 - 28) = v107;
                *(_OWORD *)((char *)v99 - 44) = v106;
                *(_OWORD *)((char *)v99 - 60) = v105;
                long long v99 = (_OWORD *)((char *)v99 - 172);
                long long v75 = (_OWORD *)((char *)v75 - 172);
              }
              while (v75 != v87);
              long long v75 = (_OWORD *)*v74;
            }
            *uint64_t v74 = v99;
            long long v86 = v94 + 172;
            *long long v76 = v94 + 172;
            v74[2] = &v92[172 * v91];
            if (v75) {
              operator delete(v75);
            }
          }
          else
          {
            long long v78 = v256;
            long long v79 = v258;
            v75[1] = v257;
            v75[2] = v79;
            _OWORD *v75 = v78;
            long long v80 = v259;
            long long v81 = v260;
            long long v82 = v262;
            v75[5] = v261;
            v75[6] = v82;
            v75[3] = v80;
            v75[4] = v81;
            long long v83 = v263;
            long long v84 = v264;
            long long v85 = v265[0];
            *(_OWORD *)((char *)v75 + 156) = *(_OWORD *)((char *)v265 + 12);
            v75[8] = v84;
            v75[9] = v85;
            v75[7] = v83;
            long long v86 = (char *)v75 + 172;
          }
          *long long v76 = v86;
          uint64_t v5 = v242;
          sub_2194EA054(v242, (uint64_t)&v256, v291);
          sub_2194EDC24((uint64_t)v290, (unsigned __int8 *)v291);
          uint64_t v20 = v240;
          sub_2194CF56C(v235, &v246, v291, v290, v240);
          unint64_t v19 = v238;
          if (*(unsigned char *)(v242 + 56))
          {
            if (v22 >= (uint64_t)(*v228 - *v229) >> 2) {
              sub_2194D0B64();
            }
            unint64_t v108 = *(unsigned int *)(*v229 + 4 * v22);
            uint64_t v109 = *(void *)(*(void *)(v242 + 5584) + 24 * v227[0]);
            if (v108 >= (*(void *)(*(void *)(v242 + 5584) + 24 * v227[0] + 8) - v109) >> 8)
            {
              sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKeyPointToDescriptor.cpp", 214, "reorder_index < kp_desc_desmatch_[stripe_id].size()", (void (*)(void *))sub_2194FF9C0);
              abort();
            }
            long long v278 = v250;
            long long v279 = v251;
            long long v280 = v252;
            long long v281 = v253;
            long long v274 = v246;
            long long v275 = v247;
            long long v276 = v248;
            long long v277 = v249;
            long long v284 = v291[2];
            long long v285 = v291[3];
            long long v282 = v291[0];
            long long v283 = v291[1];
            long long v286 = v290[0];
            long long v287 = v290[1];
            long long v288 = v290[2];
            long long v289 = v290[3];
            uint64_t v25 = (_OWORD *)(v109 + (v108 << 8));
            long long v26 = v249;
            v25[2] = v248;
            _OWORD v25[3] = v26;
            long long v27 = v279;
            v25[4] = v278;
            v25[5] = v27;
            long long v28 = v275;
            *uint64_t v25 = v274;
            v25[1] = v28;
            long long v29 = v281;
            v25[6] = v280;
            v25[7] = v29;
            long long v30 = v282;
            long long v31 = v283;
            long long v32 = v285;
            v25[10] = v284;
            v25[11] = v32;
            v25[8] = v30;
            v25[9] = v31;
            long long v33 = v286;
            long long v34 = v287;
            long long v35 = v289;
            v25[14] = v288;
            v25[15] = v35;
            v25[12] = v33;
            v25[13] = v34;
          }
          ++v22;
        }
        while (v22 != v233);
        int v18 = *(_DWORD *)(v242 + 24);
      }
      ++v19;
    }
    while (v19 < v18 - 1);
  }
  if (*(void *)(v5 + 64) - 1 != *(void *)v227) {
    goto LABEL_123;
  }
  uint64_t v110 = *(void *)(v5 + 368);
  unint64_t v111 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v5 + 376) - v110) >> 3);
  if (v111 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 400) - *(void *)(v5 + 392)) >> 3)
    || v111 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 424) - *(void *)(v5 + 416)) >> 3))
  {
    sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKeyPointToDescriptor.cpp", 228, "kp.size() == desc.size() && kp.size() == desc_reorder.size()", (void (*)(void *))sub_2194FF9C0);
    abort();
  }
  uint64_t v112 = v18 - 2;
  uint64_t v113 = *(void *)(v5 + 440);
  *(void *)(v5 + 448) = v113;
  uint64_t v114 = *(void *)(v5 + 464);
  *(void *)(v5 + 472) = v114;
  a4[11] = a4[10];
  a4[17] = a4[16];
  uint64_t v115 = a4[4];
  a4[14] = a4[13];
  a4[5] = v115;
  __n128 v241 = a4 + 10;
  a4[8] = a4[7];
  if (!v112)
  {
    unint64_t v117 = 0;
    unint64_t v118 = 0;
    unint64_t v129 = (*(void *)(v5 + 448) - v113) >> 8;
    goto LABEL_82;
  }
  uint64_t v116 = 0;
  unint64_t v117 = 0;
  unint64_t v118 = 0;
  do
  {
    long long v119 = (uint64_t *)(v110 + 24 * v116);
    uint64_t v120 = *v119;
    uint64_t v121 = v119[1];
    if (v120 == v121) {
      goto LABEL_64;
    }
    unint64_t v122 = v121 - v120 - 128;
    if (v122 < 0x80)
    {
      uint64_t v123 = v120;
      do
      {
LABEL_75:
        v118 += *(unsigned __int8 *)(v123 + 24);
        if (!*(unsigned char *)(v123 + 24)) {
          ++v117;
        }
        v123 += 128;
      }
      while (v123 != v121);
      goto LABEL_64;
    }
    uint64_t v124 = 0;
    uint64_t v125 = 0;
    uint64_t v126 = (v122 >> 7) + 1;
    uint64_t v123 = v120 + ((v126 & 0x3FFFFFFFFFFFFFELL) << 7);
    uint64_t v127 = (unsigned char *)(v120 + 152);
    uint64_t v128 = v126 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      if (!*(v127 - 128)) {
        ++v117;
      }
      v118 += *(v127 - 128);
      v125 += *v127;
      if (!*v127) {
        ++v124;
      }
      v127 += 256;
      v128 -= 2;
    }
    while (v128);
    v118 += v125;
    v117 += v124;
    if (v126 != (v126 & 0x3FFFFFFFFFFFFFELL)) {
      goto LABEL_75;
    }
LABEL_64:
    ++v116;
  }
  while (v116 != v112);
  unint64_t v129 = (*(void *)(v5 + 448) - v113) >> 8;
  if (v118 > v129)
  {
    sub_2194D0570((char **)(v5 + 440), v118 - v129);
    uint64_t v114 = *(void *)(v5 + 464);
    goto LABEL_84;
  }
LABEL_82:
  if (v129 > v118) {
    *(void *)(v5 + 448) = v113 + (v118 << 8);
  }
LABEL_84:
  unint64_t v130 = (*(void *)(v5 + 472) - v114) >> 8;
  if (v117 <= v130)
  {
    if (v117 < v130) {
      *(void *)(v5 + 472) = v114 + (v117 << 8);
    }
  }
  else
  {
    sub_2194D0570((char **)(v5 + 464), v117 - v130);
  }
  uint64_t v131 = a4[10];
  if (v117 + v118 < (a4[11] - v131) >> 8) {
    a4[11] = v131 + ((v117 + v118) << 8);
  }
  if (v112)
  {
    uint64_t v132 = 0;
    uint64_t v133 = *(void *)(v5 + 368);
    unint64_t v237 = v118;
    unint64_t v232 = v117;
    uint64_t v230 = v112;
    do
    {
      uint64_t v134 = *(void *)(v133 + 24 * v132);
      uint64_t v135 = *(void *)(v133 + 24 * v132 + 8);
      uint64_t v136 = (v135 - v134) >> 7;
      if (v136 != (uint64_t)(*(void *)(*(void *)(v5 + 392) + 24 * v132 + 8)
                           - *(void *)(*(void *)(v5 + 392) + 24 * v132)) >> 6
        || v136 != (uint64_t)(*(void *)(*(void *)(v5 + 416) + 24 * v132 + 8)
                           - *(void *)(*(void *)(v5 + 416) + 24 * v132)) >> 6)
      {
        sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKeyPointToDescriptor.cpp", 253, "kp[scale].size() == desc[scale].size() && kp[scale].size() == desc_reorder[scale].size()", (void (*)(void *))sub_2194FF9C0);
        abort();
      }
      if (v135 != v134)
      {
        unint64_t v137 = 0;
        uint64_t v239 = v132;
        do
        {
          __n128 v158 = (long long *)(v134 + (v137 << 7));
          unint64_t v159 = v137 << 6;
          __n128 v160 = (long long *)(*(void *)(*(void *)(v5 + 392) + 24 * v132) + (v137 << 6));
          unsigned int v161 = (long long *)(*(void *)(*(void *)(v5 + 416) + 24 * v132) + (v137 << 6));
          __n128 v163 = (_OWORD *)a4[11];
          unint64_t v162 = a4[12];
          if ((unint64_t)v163 >= v162)
          {
            __n128 v177 = (_OWORD *)*v241;
            uint64_t v178 = ((uint64_t)v163 - *v241) >> 8;
            unint64_t v179 = v178 + 1;
            if ((unint64_t)(v178 + 1) >> 56) {
              sub_219486AE4();
            }
            uint64_t v180 = v162 - (void)v177;
            if (v180 >> 7 > v179) {
              unint64_t v179 = v180 >> 7;
            }
            if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFF00) {
              unint64_t v181 = 0xFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v181 = v179;
            }
            if (v181)
            {
              if (HIBYTE(v181)) {
                sub_219486AFC();
              }
              __n128 v182 = (char *)operator new(v181 << 8);
            }
            else
            {
              __n128 v182 = 0;
            }
            __n128 v183 = &v182[256 * v178];
            long long v184 = *v158;
            long long v185 = v158[1];
            long long v186 = v158[3];
            *((_OWORD *)v183 + 2) = v158[2];
            *((_OWORD *)v183 + 3) = v186;
            *(_OWORD *)__n128 v183 = v184;
            *((_OWORD *)v183 + 1) = v185;
            long long v187 = v158[4];
            long long v188 = v158[5];
            long long v189 = v158[7];
            *((_OWORD *)v183 + 6) = v158[6];
            *((_OWORD *)v183 + 7) = v189;
            *((_OWORD *)v183 + 4) = v187;
            *((_OWORD *)v183 + 5) = v188;
            long long v190 = *v160;
            long long v191 = v160[1];
            long long v192 = v160[3];
            *((_OWORD *)v183 + 10) = v160[2];
            *((_OWORD *)v183 + 11) = v192;
            *((_OWORD *)v183 + 8) = v190;
            *((_OWORD *)v183 + 9) = v191;
            long long v193 = *v161;
            long long v194 = v161[1];
            long long v195 = v161[3];
            *((_OWORD *)v183 + 14) = v161[2];
            *((_OWORD *)v183 + 15) = v195;
            *((_OWORD *)v183 + 12) = v193;
            *((_OWORD *)v183 + 13) = v194;
            uint64_t v196 = v183;
            if (v163 != v177)
            {
              do
              {
                long long v197 = *(v163 - 16);
                long long v198 = *(v163 - 15);
                long long v199 = *(v163 - 13);
                *((_OWORD *)v196 - 14) = *(v163 - 14);
                *((_OWORD *)v196 - 13) = v199;
                *((_OWORD *)v196 - 16) = v197;
                *((_OWORD *)v196 - 15) = v198;
                long long v200 = *(v163 - 12);
                long long v201 = *(v163 - 11);
                long long v202 = *(v163 - 9);
                *((_OWORD *)v196 - 10) = *(v163 - 10);
                *((_OWORD *)v196 - 9) = v202;
                *((_OWORD *)v196 - 12) = v200;
                *((_OWORD *)v196 - 11) = v201;
                long long v203 = *(v163 - 8);
                long long v204 = *(v163 - 7);
                long long v205 = *(v163 - 5);
                *((_OWORD *)v196 - 6) = *(v163 - 6);
                *((_OWORD *)v196 - 5) = v205;
                *((_OWORD *)v196 - 8) = v203;
                *((_OWORD *)v196 - 7) = v204;
                long long v206 = *(v163 - 4);
                long long v207 = *(v163 - 3);
                long long v208 = *(v163 - 1);
                *((_OWORD *)v196 - 2) = *(v163 - 2);
                *((_OWORD *)v196 - 1) = v208;
                *((_OWORD *)v196 - 4) = v206;
                *((_OWORD *)v196 - 3) = v207;
                v196 -= 256;
                v163 -= 16;
              }
              while (v163 != v177);
              __n128 v163 = (_OWORD *)*v241;
            }
            __n128 v176 = v183 + 256;
            a4[10] = v196;
            a4[11] = v183 + 256;
            a4[12] = &v182[256 * v181];
            if (v163) {
              operator delete(v163);
            }
            unint64_t v118 = v237;
            uint64_t v132 = v239;
          }
          else
          {
            long long v164 = *v158;
            long long v165 = v158[1];
            long long v166 = v158[3];
            v163[2] = v158[2];
            v163[3] = v166;
            *__n128 v163 = v164;
            v163[1] = v165;
            long long v167 = v158[4];
            long long v168 = v158[5];
            long long v169 = v158[7];
            v163[6] = v158[6];
            v163[7] = v169;
            v163[4] = v167;
            v163[5] = v168;
            long long v170 = *v160;
            long long v171 = v160[1];
            long long v172 = v160[3];
            v163[10] = v160[2];
            v163[11] = v172;
            v163[8] = v170;
            v163[9] = v171;
            long long v173 = *v161;
            long long v174 = v161[1];
            long long v175 = v161[3];
            v163[14] = v161[2];
            v163[15] = v175;
            v163[12] = v173;
            v163[13] = v174;
            __n128 v176 = v163 + 16;
          }
          a4[11] = v176;
          uint64_t v5 = v242;
          unint64_t v209 = *(void *)(*(void *)(v242 + 368) + 24 * v132) + (v137 << 7);
          unint64_t v210 = *(unsigned int *)(v209 + 32);
          if (*(unsigned char *)(v209 + 24))
          {
            if (v118 <= v210)
            {
              sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKeyPointToDescriptor.cpp", 258, "min_idx < minima_cnt", (void (*)(void *))sub_2194FF9C0);
              abort();
            }
            __n128 v211 = (long long *)(*(void *)(*(void *)(v242 + 392) + 24 * v132) + v159);
            __n128 v212 = (long long *)(*(void *)(*(void *)(v242 + 416) + 24 * v132) + v159);
            long long v213 = *(_OWORD *)(v209 + 80);
            long long v278 = *(_OWORD *)(v209 + 64);
            long long v279 = v213;
            long long v214 = *(_OWORD *)(v209 + 112);
            long long v280 = *(_OWORD *)(v209 + 96);
            long long v281 = v214;
            long long v215 = *(_OWORD *)(v209 + 16);
            long long v274 = *(_OWORD *)v209;
            long long v275 = v215;
            long long v216 = *(_OWORD *)(v209 + 48);
            long long v276 = *(_OWORD *)(v209 + 32);
            long long v277 = v216;
            long long v217 = v211[3];
            long long v284 = v211[2];
            long long v285 = v217;
            long long v218 = v211[1];
            long long v282 = *v211;
            long long v283 = v218;
            long long v219 = v212[1];
            long long v286 = *v212;
            long long v287 = v219;
            long long v220 = v212[3];
            long long v288 = v212[2];
            long long v289 = v220;
            uint64_t v148 = *(void *)(v242 + 440);
          }
          else
          {
            if (v232 <= v210)
            {
              sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKeyPointToDescriptor.cpp", 262, "max_idx < maxima_cnt", (void (*)(void *))sub_2194FF9C0);
              abort();
            }
            long long v138 = (long long *)(*(void *)(*(void *)(v242 + 392) + 24 * v132) + v159);
            long long v139 = (long long *)(*(void *)(*(void *)(v242 + 416) + 24 * v132) + v159);
            long long v140 = *(_OWORD *)(v209 + 80);
            long long v278 = *(_OWORD *)(v209 + 64);
            long long v279 = v140;
            long long v141 = *(_OWORD *)(v209 + 112);
            long long v280 = *(_OWORD *)(v209 + 96);
            long long v281 = v141;
            long long v142 = *(_OWORD *)(v209 + 16);
            long long v274 = *(_OWORD *)v209;
            long long v275 = v142;
            long long v143 = *(_OWORD *)(v209 + 48);
            long long v276 = *(_OWORD *)(v209 + 32);
            long long v277 = v143;
            long long v144 = v138[3];
            long long v284 = v138[2];
            long long v285 = v144;
            long long v145 = v138[1];
            long long v282 = *v138;
            long long v283 = v145;
            long long v146 = v139[1];
            long long v286 = *v139;
            long long v287 = v146;
            long long v147 = v139[3];
            long long v288 = v139[2];
            long long v289 = v147;
            uint64_t v148 = *(void *)(v242 + 464);
          }
          __n128 v149 = (_OWORD *)(v148 + (v210 << 8));
          long long v150 = v277;
          v149[2] = v276;
          v149[3] = v150;
          long long v151 = v275;
          *__n128 v149 = v274;
          v149[1] = v151;
          long long v152 = v281;
          v149[6] = v280;
          v149[7] = v152;
          long long v153 = v279;
          v149[4] = v278;
          v149[5] = v153;
          long long v154 = v285;
          v149[10] = v284;
          v149[11] = v154;
          long long v155 = v283;
          v149[8] = v282;
          v149[9] = v155;
          long long v156 = v289;
          v149[14] = v288;
          v149[15] = v156;
          long long v157 = v287;
          v149[12] = v286;
          v149[13] = v157;
          ++v137;
          uint64_t v133 = *(void *)(v242 + 368);
          uint64_t v134 = *(void *)(v133 + 24 * v132);
        }
        while (v137 < (*(void *)(v133 + 24 * v132 + 8) - v134) >> 7);
        uint64_t v112 = v230;
      }
      ++v132;
    }
    while (v132 != v112);
  }
  sub_2194D0C0C(a4 + 4, *(char **)(v5 + 464), *(char **)(v5 + 472), (uint64_t)(*(void *)(v5 + 472) - *(void *)(v5 + 464)) >> 8);
  sub_2194D0C0C(a4 + 7, *(char **)(v5 + 440), *(char **)(v5 + 448), (uint64_t)(*(void *)(v5 + 448) - *(void *)(v5 + 440)) >> 8);
LABEL_123:
  __n128 v221 = (char *)__p;
  if (__p)
  {
    __n128 v222 = v255;
    __n128 v223 = __p;
    if (v255 != __p)
    {
      __n128 v224 = v255;
      do
      {
        __n128 v226 = (void *)*((void *)v224 - 3);
        v224 -= 24;
        __n128 v225 = v226;
        if (v226)
        {
          *((void *)v222 - 2) = v225;
          operator delete(v225);
        }
        __n128 v222 = v224;
      }
      while (v224 != v221);
      __n128 v223 = __p;
    }
    long long v255 = v221;
    operator delete(v223);
  }
}

void sub_2194CF428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
}

void sub_2194CF43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
}

void sub_2194CF450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
}

void sub_2194CF468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
}

void sub_2194CF47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
}

void sub_2194CF490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
}

void sub_2194CF4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
}

void sub_2194CF4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
}

void sub_2194CF4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
}

void sub_2194CF4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
}

void sub_2194CF4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
}

void sub_2194CF508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
}

void sub_2194CF51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
}

void sub_2194CF530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
}

void sub_2194CF544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
}

void sub_2194CF558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
}

void sub_2194CF56C(void *a1, _OWORD *a2, _OWORD *a3, long long *a4, uint64_t a5)
{
  uint64_t v5 = a5;
  unint64_t v9 = (char **)(a1[18] + 24 * a5);
  unint64_t v11 = v9 + 1;
  unint64_t v10 = v9[1];
  unint64_t v12 = (unint64_t)v9[2];
  long long v79 = a1;
  if ((unint64_t)v10 >= v12)
  {
    uint64_t v20 = *v9;
    uint64_t v21 = (v10 - *v9) >> 7;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 57) {
      sub_219486AE4();
    }
    uint64_t v23 = v12 - (void)v20;
    if (v23 >> 6 > v22) {
      unint64_t v22 = v23 >> 6;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      if (v24 >> 57) {
        goto LABEL_55;
      }
      uint64_t v25 = (char *)operator new(v24 << 7);
    }
    else
    {
      uint64_t v25 = 0;
    }
    long long v26 = a2[5];
    long long v27 = &v25[128 * v21];
    *((_OWORD *)v27 + 4) = a2[4];
    *((_OWORD *)v27 + 5) = v26;
    long long v28 = a2[7];
    *((_OWORD *)v27 + 6) = a2[6];
    *((_OWORD *)v27 + 7) = v28;
    long long v29 = a2[1];
    *(_OWORD *)long long v27 = *a2;
    *((_OWORD *)v27 + 1) = v29;
    long long v30 = a2[2];
    long long v31 = a2[3];
    unint64_t v19 = v27 + 128;
    *((_OWORD *)v27 + 2) = v30;
    *((_OWORD *)v27 + 3) = v31;
    if (v10 != v20)
    {
      do
      {
        long long v32 = *((_OWORD *)v10 - 8);
        long long v33 = *((_OWORD *)v10 - 7);
        long long v34 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v27 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v27 - 5) = v34;
        *((_OWORD *)v27 - 8) = v32;
        *((_OWORD *)v27 - 7) = v33;
        long long v35 = *((_OWORD *)v10 - 4);
        long long v36 = *((_OWORD *)v10 - 3);
        long long v37 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v27 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v27 - 1) = v37;
        *((_OWORD *)v27 - 4) = v35;
        *((_OWORD *)v27 - 3) = v36;
        v27 -= 128;
        v10 -= 128;
      }
      while (v10 != v20);
      unint64_t v10 = *v9;
    }
    *unint64_t v9 = v27;
    *unint64_t v11 = v19;
    v9[2] = &v25[128 * v24];
    uint64_t v5 = a5;
    if (v10) {
      operator delete(v10);
    }
    a1 = v79;
  }
  else
  {
    long long v13 = *a2;
    long long v14 = a2[1];
    long long v15 = a2[3];
    *((_OWORD *)v10 + 2) = a2[2];
    *((_OWORD *)v10 + 3) = v15;
    *(_OWORD *)unint64_t v10 = v13;
    *((_OWORD *)v10 + 1) = v14;
    long long v16 = a2[4];
    long long v17 = a2[5];
    long long v18 = a2[7];
    *((_OWORD *)v10 + 6) = a2[6];
    *((_OWORD *)v10 + 7) = v18;
    *((_OWORD *)v10 + 4) = v16;
    *((_OWORD *)v10 + 5) = v17;
    unint64_t v19 = v10 + 128;
  }
  *unint64_t v11 = v19;
  long long v38 = (char **)(a1[21] + 24 * v5);
  long long v40 = v38 + 1;
  long long v39 = v38[1];
  unint64_t v41 = (unint64_t)v38[2];
  if ((unint64_t)v39 >= v41)
  {
    unint64_t v46 = *v38;
    uint64_t v47 = (v39 - *v38) >> 6;
    unint64_t v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 58) {
      sub_219486AE4();
    }
    uint64_t v49 = v41 - (void)v46;
    if (v49 >> 5 > v48) {
      unint64_t v48 = v49 >> 5;
    }
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v50 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v50 = v48;
    }
    if (v50)
    {
      if (v50 >> 58) {
        goto LABEL_55;
      }
      long long v51 = (char *)operator new(v50 << 6);
    }
    else
    {
      long long v51 = 0;
    }
    long long v52 = &v51[64 * v47];
    long long v53 = a3[1];
    *(_OWORD *)long long v52 = *a3;
    *((_OWORD *)v52 + 1) = v53;
    long long v54 = a3[3];
    *((_OWORD *)v52 + 2) = a3[2];
    *((_OWORD *)v52 + 3) = v54;
    int v45 = v52 + 64;
    if (v39 != v46)
    {
      do
      {
        long long v55 = *((_OWORD *)v39 - 4);
        long long v56 = *((_OWORD *)v39 - 3);
        long long v57 = *((_OWORD *)v39 - 1);
        *((_OWORD *)v52 - 2) = *((_OWORD *)v39 - 2);
        *((_OWORD *)v52 - 1) = v57;
        *((_OWORD *)v52 - 4) = v55;
        *((_OWORD *)v52 - 3) = v56;
        v52 -= 64;
        v39 -= 64;
      }
      while (v39 != v46);
      long long v39 = *v38;
    }
    *long long v38 = v52;
    *long long v40 = v45;
    void v38[2] = &v51[64 * v50];
    if (v39) {
      operator delete(v39);
    }
    a1 = v79;
  }
  else
  {
    long long v42 = *a3;
    long long v43 = a3[1];
    long long v44 = a3[3];
    *((_OWORD *)v39 + 2) = a3[2];
    *((_OWORD *)v39 + 3) = v44;
    *(_OWORD *)long long v39 = v42;
    *((_OWORD *)v39 + 1) = v43;
    int v45 = v39 + 64;
  }
  *long long v40 = v45;
  unint64_t v58 = (char **)(a1[24] + 24 * v5);
  unint64_t v60 = v58 + 1;
  unint64_t v59 = v58[1];
  unint64_t v61 = (unint64_t)v58[2];
  if ((unint64_t)v59 < v61)
  {
    long long v62 = *a4;
    long long v63 = a4[1];
    long long v64 = a4[3];
    *((_OWORD *)v59 + 2) = a4[2];
    *((_OWORD *)v59 + 3) = v64;
    *(_OWORD *)unint64_t v59 = v62;
    *((_OWORD *)v59 + 1) = v63;
    long long v65 = v59 + 64;
    goto LABEL_54;
  }
  long long v66 = *v58;
  uint64_t v67 = (v59 - *v58) >> 6;
  unint64_t v68 = v67 + 1;
  if ((unint64_t)(v67 + 1) >> 58) {
    sub_219486AE4();
  }
  uint64_t v69 = v61 - (void)v66;
  if (v69 >> 5 > v68) {
    unint64_t v68 = v69 >> 5;
  }
  if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v70 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v70 = v68;
  }
  if (!v70)
  {
    long long v71 = 0;
    goto LABEL_49;
  }
  if (v70 >> 58) {
LABEL_55:
  }
    sub_219486AFC();
  long long v71 = (char *)operator new(v70 << 6);
LABEL_49:
  long long v72 = &v71[64 * v67];
  long long v73 = a4[1];
  *(_OWORD *)long long v72 = *a4;
  *((_OWORD *)v72 + 1) = v73;
  long long v74 = a4[3];
  *((_OWORD *)v72 + 2) = a4[2];
  *((_OWORD *)v72 + 3) = v74;
  long long v65 = v72 + 64;
  if (v59 != v66)
  {
    do
    {
      long long v75 = *((_OWORD *)v59 - 4);
      long long v76 = *((_OWORD *)v59 - 3);
      long long v77 = *((_OWORD *)v59 - 1);
      *((_OWORD *)v72 - 2) = *((_OWORD *)v59 - 2);
      *((_OWORD *)v72 - 1) = v77;
      *((_OWORD *)v72 - 4) = v75;
      *((_OWORD *)v72 - 3) = v76;
      v72 -= 64;
      v59 -= 64;
    }
    while (v59 != v66);
    unint64_t v59 = *v58;
  }
  *unint64_t v58 = v72;
  *unint64_t v60 = v65;
  void v58[2] = &v71[64 * v70];
  if (v59) {
    operator delete(v59);
  }
LABEL_54:
  *unint64_t v60 = v65;
}

void sub_2194CF900(void *a1, uint64_t a2)
{
  unint64_t v3 = a1;
  uint64_t v112 = *MEMORY[0x263EF8340];
  unint64_t v91 = a1[6];
  unint64_t v96 = a1[4];
  unint64_t v97 = a1[5];
  unint64_t v89 = (v96 & 0xFFFFFFFFFFFFFFE0) + 128;
  unint64_t v4 = v89 * v97;
  uint64_t v5 = *(char **)(a2 + 152);
  uint64_t v6 = *(char **)(a2 + 160);
  uint64_t v7 = (void *)(a2 + 152);
  unint64_t v8 = (v6 - v5) >> 2;
  if (v89 * v97 <= v8)
  {
    if (v4 < v8)
    {
      uint64_t v6 = &v5[4 * v4];
      *(void *)(a2 + 160) = v6;
    }
  }
  else
  {
    sub_219488D70((uint64_t)v7, v89 * v97 - v8);
    uint64_t v5 = *(char **)(a2 + 152);
    uint64_t v6 = *(char **)(a2 + 160);
  }
  uint64_t v9 = v6 - v5;
  if (v9 >= 1) {
    bzero(v5, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
  }
  int32x4_t v103 = 0u;
  int32x4_t v104 = 0u;
  int32x4_t v101 = 0u;
  int32x4_t v102 = 0u;
  memset(v100, 0, sizeof(v100));
  memset(v99, 0, sizeof(v99));
  memset(v98, 0, sizeof(v98));
  uint64_t v10 = *(void *)(a2 + 176);
  uint64_t v11 = *(void *)(a2 + 184);
  unint64_t v12 = (void **)(a2 + 176);
  unint64_t v13 = 0x8F5C28F5C28F5C29 * ((v11 - v10) >> 3);
  if (32 * v97 <= v13)
  {
    if (32 * v97 < v13)
    {
      uint64_t v11 = v10 + 6400 * v97;
      *(void *)(a2 + 184) = v11;
    }
  }
  else
  {
    sub_2194D0D58((void **)(a2 + 176), 32 * v97 - v13);
    uint64_t v10 = *(void *)(a2 + 176);
    uint64_t v11 = *(void *)(a2 + 184);
  }
  memset(&v111[12], 0, 72);
  uint64_t v14 = v11 - v10;
  if (v14 >= 1)
  {
    unint64_t v15 = v14 / 0xC8uLL + 1;
    uint64_t v16 = v10 + 20;
    do
    {
      *(_DWORD *)(v16 - 4) = 0x3FFF;
      long long v17 = __dst;
      long long v18 = v106;
      long long v19 = v108;
      *(_OWORD *)(v16 + 32) = v107;
      *(_OWORD *)(v16 + 48) = v19;
      *(_OWORD *)uint64_t v16 = v17;
      *(_OWORD *)(v16 + 16) = v18;
      long long v20 = v109;
      long long v21 = v110;
      long long v22 = *(_OWORD *)&v111[16];
      *(_OWORD *)(v16 + 96) = *(_OWORD *)v111;
      *(_OWORD *)(v16 + 112) = v22;
      *(_OWORD *)(v16 + 64) = v20;
      *(_OWORD *)(v16 + 80) = v21;
      long long v23 = *(_OWORD *)&v111[32];
      long long v24 = *(_OWORD *)&v111[48];
      long long v25 = *(_OWORD *)&v111[64];
      *(_DWORD *)(v16 + 176) = *(_DWORD *)&v111[80];
      *(_OWORD *)(v16 + 144) = v24;
      *(_OWORD *)(v16 + 160) = v25;
      *(_OWORD *)(v16 + 128) = v23;
      --v15;
      v16 += 200;
    }
    while (v15 > 1);
  }
  unint64_t v26 = v3[8];
  if (!v26)
  {
    unint64_t v30 = 0;
    goto LABEL_60;
  }
  long long v95 = v3;
  uint64_t v27 = 0;
  char v28 = 0;
  unsigned int v29 = 0;
  unint64_t v30 = 0;
  unint64_t v31 = v96 >> 5;
  if (v96 >> 5 <= 1) {
    uint64_t v32 = 1;
  }
  else {
    uint64_t v32 = v96 >> 5;
  }
  uint64_t __n = 4 * v32;
  unint64_t v93 = v32;
  uint64_t v90 = v32 & 0x7FFFFFFFFFFFFF8;
  long long v94 = v7;
  do
  {
    uint64_t v33 = *(void *)(v3[698] + 24 * v27 + 8) - *(void *)(v3[698] + 24 * v27);
    if (v33)
    {
      unsigned int v88 = v29;
      uint64_t v34 = 0;
      if ((unint64_t)(v33 >> 8) <= 1) {
        uint64_t v35 = 1;
      }
      else {
        uint64_t v35 = v33 >> 8;
      }
      while (1)
      {
        long long v36 = (long long *)(*(void *)(v3[698] + 24 * v27) + (v34 << 8));
        unint64_t v37 = *((unsigned __int8 *)v36 + 12);
        unint64_t v38 = *(_DWORD *)v36 & 0x3FFFF | ((unint64_t)(*((_DWORD *)v36 + 1) & 0x7FFFF) << 32) | (*((_DWORD *)v36 + 4) << 18);
        unint64_t v39 = ((unint64_t)(*((_DWORD *)v36 + 5) & 7) << 60) | ((unint64_t)*((unsigned __int8 *)v36 + 24) << 63) | v38 | (v37 << 52);
        int v41 = *((_DWORD *)v36 + 7);
        int v40 = *((_DWORD *)v36 + 8);
        uint64_t v42 = (v39 >> 60) & 8 | (v37 >> 5);
        uint64_t v43 = v101.u32[v42];
        if (v43)
        {
          if ((v28 & 1) == 0)
          {
            unsigned int v44 = *((_DWORD *)v99 + v42);
            goto LABEL_35;
          }
LABEL_25:
          char v28 = 1;
          if (++v34 == v35) {
            goto LABEL_19;
          }
        }
        else
        {
          if (v28 & 1 | (v30 >= v97)) {
            goto LABEL_25;
          }
          unint64_t v45 = *((unsigned int *)v100 + v42);
          if (v91 <= v45) {
            goto LABEL_25;
          }
          uint64_t v46 = 4 * v42;
          unsigned int v44 = v30 * v89;
          *(_DWORD *)((char *)v99 + v46) = v30 * v89;
          *(_DWORD *)((char *)v98 + v46) = 32 * v30++;
          *(_DWORD *)((char *)v100 + v46) = v45 + 1;
LABEL_35:
          unsigned int v47 = v44 + 2 * v43;
          uint64_t v48 = *v7;
          *(_DWORD *)(*v7 + 4 * v47) = v38;
          *(_DWORD *)(v48 + 4 * (v47 + 1)) = HIDWORD(v39);
          *(_DWORD *)(v48 + 4 * (v43 + v44 + 64)) = v41 & 0x7FFF | ((v40 & 0x1FFF) << 16);
          *(_DWORD *)(v48 + 4 * (v43 + v44 + 96)) = 0;
          if (v31 == 16) {
            uint64_t v49 = v36 + 8;
          }
          else {
            uint64_t v49 = v36 + 12;
          }
          if (v96 > 0x1F)
          {
            unint64_t v51 = v31 * v43;
            uint64_t v52 = v44;
            if (v93 < 0xC || (uint64_t v53 = v48 + 4 * (v51 + v44), (unint64_t)(v53 - (void)v49 + 512) < 0x20))
            {
              uint64_t v54 = 0;
              goto LABEL_43;
            }
            long long v62 = v49 + 1;
            long long v63 = (_OWORD *)(v53 + 528);
            uint64_t v64 = v90;
            do
            {
              long long v65 = *v62;
              *(v63 - 1) = *(v62 - 1);
              _OWORD *v63 = v65;
              v62 += 2;
              v63 += 2;
              v64 -= 8;
            }
            while (v64);
            uint64_t v54 = v90;
            if (v93 != v90)
            {
LABEL_43:
              unint64_t v55 = v93 - v54;
              long long v56 = (_DWORD *)(v48 + 4 * (v54 + v51 + v52) + 512);
              long long v57 = (int *)v49 + v54;
              do
              {
                int v58 = *v57++;
                *v56++ = v58;
                --v55;
              }
              while (v55);
            }
            unint64_t v50 = v30;
            long long v107 = 0u;
            long long v108 = 0u;
            long long __dst = 0u;
            long long v106 = 0u;
            memcpy(&__dst, v49, __n);
            goto LABEL_46;
          }
          unint64_t v50 = v30;
          long long v107 = 0u;
          long long v108 = 0u;
          long long __dst = 0u;
          long long v106 = 0u;
LABEL_46:
          uint64_t v59 = *(void *)(a2 + 176) + 200 * (*((_DWORD *)v98 + v42) + v43);
          memmove((void *)v59, v36, 0x80uLL);
          *(_DWORD *)(v59 + 128) = 0;
          long long v60 = v106;
          *(_OWORD *)(v59 + 132) = __dst;
          *(_OWORD *)(v59 + 148) = v60;
          long long v61 = v108;
          *(_OWORD *)(v59 + 164) = v107;
          *(_OWORD *)(v59 + 180) = v61;
          *(_DWORD *)(v59 + 196) = 0;
          v101.i32[v42] = v43 + 1;
          unint64_t v30 = v50;
          unint64_t v3 = v95;
          if (v43 == 31)
          {
            if (v30 > v97) {
              sub_2195097E0();
            }
            v101.i32[v42] = 0;
          }
          char v28 = 0;
          unint64_t v31 = v96 >> 5;
          uint64_t v7 = v94;
          if (++v34 == v35)
          {
LABEL_19:
            unint64_t v26 = v3[8];
            unsigned int v29 = v88;
            break;
          }
        }
      }
    }
    uint64_t v27 = ++v29;
  }
  while (v26 > v29);
  if (v30 > v97)
  {
    unint64_t v12 = (void **)(a2 + 176);
    if (vmaxvq_u8((uint8x16_t)vmvnq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v101), (int16x8_t)vceqzq_s32(v102)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v103), (int16x8_t)vceqzq_s32(v104))))))sub_2195097A8(); {
    goto LABEL_55;
    }
  }
  unint64_t v12 = (void **)(a2 + 176);
LABEL_60:
  for (uint64_t i = 0; i != 16; ++i)
  {
    __int32 v70 = v101.i32[i];
    if (v70)
    {
      uint64_t v71 = *v7;
      unsigned int v72 = *(_DWORD *)((char *)v99 + i * 4) + 2 * v70;
      *(_DWORD *)(*v7 + 4 * v72) = -1;
      *(_DWORD *)(v71 + 4 * (v72 + 1)) = -1;
      memset(&v111[12], 0, 72);
      uint64_t v73 = (uint64_t)*v12 + 200 * (*(_DWORD *)((char *)v98 + i * 4) + v70);
      long long v74 = v107;
      *(_OWORD *)(v73 + 68) = v108;
      *(_OWORD *)(v73 + 52) = v74;
      long long v75 = __dst;
      *(_OWORD *)(v73 + 36) = v106;
      *(_OWORD *)(v73 + 20) = v75;
      long long v76 = *(_OWORD *)v111;
      *(_OWORD *)(v73 + 132) = *(_OWORD *)&v111[16];
      *(_OWORD *)(v73 + 116) = v76;
      long long v77 = v109;
      *(_OWORD *)(v73 + 100) = v110;
      *(_OWORD *)(v73 + 84) = v77;
      *(_OWORD *)(v73 + 180) = *(_OWORD *)&v111[64];
      long long v78 = *(_OWORD *)&v111[32];
      *(_OWORD *)(v73 + 164) = *(_OWORD *)&v111[48];
      *(_DWORD *)(v73 + 16) = 0x3FFF;
      *(_DWORD *)(v73 + 196) = *(_DWORD *)&v111[80];
      *(_OWORD *)(v73 + 148) = v78;
    }
  }
LABEL_55:
  if (v30 < v97)
  {
    uint64_t v66 = *(void *)(a2 + 152);
    *(void *)(v66 + 4 * v30 * v89) = -1;
    unint64_t v67 = (v30 * v89) | 2;
    unint64_t v68 = (*(void *)(a2 + 160) - v66) >> 2;
    if (v67 <= v68)
    {
      if (v67 < v68) {
        *(void *)(a2 + 160) = v66 + 4 * v67;
      }
    }
    else
    {
      sub_219488D70((uint64_t)v7, v67 - v68);
    }
    memset(&v111[12], 0, 72);
    uint64_t v79 = *(void *)(a2 + 176) + 6400 * v30;
    long long v80 = v107;
    *(_OWORD *)(v79 + 68) = v108;
    *(_OWORD *)(v79 + 52) = v80;
    long long v81 = __dst;
    *(_OWORD *)(v79 + 36) = v106;
    *(_OWORD *)(v79 + 20) = v81;
    long long v82 = *(_OWORD *)v111;
    *(_OWORD *)(v79 + 132) = *(_OWORD *)&v111[16];
    *(_OWORD *)(v79 + 116) = v82;
    long long v83 = v109;
    *(_OWORD *)(v79 + 100) = v110;
    *(_OWORD *)(v79 + 84) = v83;
    *(_OWORD *)(v79 + 180) = *(_OWORD *)&v111[64];
    long long v84 = *(_OWORD *)&v111[32];
    *(_OWORD *)(v79 + 164) = *(_OWORD *)&v111[48];
    *(_DWORD *)(v79 + 16) = 0x3FFF;
    *(_DWORD *)(v79 + 196) = *(_DWORD *)&v111[80];
    *(_OWORD *)(v79 + 148) = v84;
    unint64_t v85 = (32 * v30) | 1;
    uint64_t v86 = *(void *)(a2 + 176);
    unint64_t v87 = 0x8F5C28F5C28F5C29 * ((*(void *)(a2 + 184) - v86) >> 3);
    if (v85 <= v87)
    {
      if (v85 < v87) {
        *(void *)(a2 + 184) = v86 + 200 * v85;
      }
    }
    else
    {
      sub_2194D0D58(v12, v85 - v87);
    }
  }
}

void sub_2194D00B0(void *a1)
{
  sub_2194D03E0(a1);

  JUMPOUT(0x21D48B5B0);
}

void **sub_2194D00E8(void **a1)
{
  unsigned int v2 = a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  unint64_t v3 = a1[27];
  if (v3)
  {
    a1[28] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (char *)a1[24];
  if (v4)
  {
    uint64_t v5 = (char *)a1[25];
    uint64_t v6 = a1[24];
    if (v5 != v4)
    {
      uint64_t v7 = (char *)a1[25];
      do
      {
        uint64_t v9 = (void *)*((void *)v7 - 3);
        v7 -= 24;
        unint64_t v8 = v9;
        if (v9)
        {
          *((void *)v5 - 2) = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      uint64_t v6 = a1[24];
    }
    a1[25] = v4;
    operator delete(v6);
  }
  uint64_t v10 = (char *)a1[21];
  if (v10)
  {
    uint64_t v11 = (char *)a1[22];
    unint64_t v12 = a1[21];
    if (v11 != v10)
    {
      unint64_t v13 = (char *)a1[22];
      do
      {
        unint64_t v15 = (void *)*((void *)v13 - 3);
        v13 -= 24;
        uint64_t v14 = v15;
        if (v15)
        {
          *((void *)v11 - 2) = v14;
          operator delete(v14);
        }
        uint64_t v11 = v13;
      }
      while (v13 != v10);
      unint64_t v12 = a1[21];
    }
    a1[22] = v10;
    operator delete(v12);
  }
  uint64_t v16 = (char *)a1[18];
  if (v16)
  {
    long long v17 = (char *)a1[19];
    long long v18 = a1[18];
    if (v17 != v16)
    {
      long long v19 = (char *)a1[19];
      do
      {
        long long v21 = (void *)*((void *)v19 - 3);
        v19 -= 24;
        long long v20 = v21;
        if (v21)
        {
          *((void *)v17 - 2) = v20;
          operator delete(v20);
        }
        long long v17 = v19;
      }
      while (v19 != v16);
      long long v18 = a1[18];
    }
    a1[19] = v16;
    operator delete(v18);
  }
  long long v22 = (char *)a1[15];
  if (v22)
  {
    long long v23 = (char *)a1[16];
    long long v24 = a1[15];
    if (v23 != v22)
    {
      long long v25 = (char *)a1[16];
      do
      {
        uint64_t v27 = (void *)*((void *)v25 - 3);
        v25 -= 24;
        unint64_t v26 = v27;
        if (v27)
        {
          *((void *)v23 - 2) = v26;
          operator delete(v26);
        }
        long long v23 = v25;
      }
      while (v25 != v22);
      long long v24 = a1[15];
    }
    a1[16] = v22;
    operator delete(v24);
  }
  char v28 = (char *)a1[12];
  if (v28)
  {
    unsigned int v29 = (char *)a1[13];
    unint64_t v30 = a1[12];
    if (v29 != v28)
    {
      unint64_t v31 = (char *)a1[13];
      do
      {
        uint64_t v33 = (void *)*((void *)v31 - 3);
        v31 -= 24;
        uint64_t v32 = v33;
        if (v33)
        {
          *((void *)v29 - 2) = v32;
          operator delete(v32);
        }
        unsigned int v29 = v31;
      }
      while (v31 != v28);
      unint64_t v30 = a1[12];
    }
    a1[13] = v28;
    operator delete(v30);
  }
  uint64_t v34 = (char *)a1[9];
  if (v34)
  {
    uint64_t v35 = (char *)a1[10];
    long long v36 = a1[9];
    if (v35 != v34)
    {
      unint64_t v37 = (char *)a1[10];
      do
      {
        unint64_t v39 = (void *)*((void *)v37 - 3);
        v37 -= 24;
        unint64_t v38 = v39;
        if (v39)
        {
          *((void *)v35 - 2) = v38;
          operator delete(v38);
        }
        uint64_t v35 = v37;
      }
      while (v37 != v34);
      long long v36 = a1[9];
    }
    a1[10] = v34;
    operator delete(v36);
  }
  int v40 = (char *)a1[6];
  if (v40)
  {
    int v41 = (char *)a1[7];
    uint64_t v42 = a1[6];
    if (v41 != v40)
    {
      uint64_t v43 = (char *)a1[7];
      do
      {
        unint64_t v45 = (void *)*((void *)v43 - 3);
        v43 -= 24;
        unsigned int v44 = v45;
        if (v45)
        {
          *((void *)v41 - 2) = v44;
          operator delete(v44);
        }
        int v41 = v43;
      }
      while (v43 != v40);
      uint64_t v42 = a1[6];
    }
    a1[7] = v40;
    operator delete(v42);
  }
  uint64_t v46 = (char *)a1[3];
  if (v46)
  {
    unsigned int v47 = (char *)a1[4];
    uint64_t v48 = a1[3];
    if (v47 != v46)
    {
      uint64_t v49 = (char *)a1[4];
      do
      {
        unint64_t v51 = (void *)*((void *)v49 - 3);
        v49 -= 24;
        unint64_t v50 = v51;
        if (v51)
        {
          *((void *)v47 - 2) = v50;
          operator delete(v50);
        }
        unsigned int v47 = v49;
      }
      while (v49 != v46);
      uint64_t v48 = a1[3];
    }
    a1[4] = v46;
    operator delete(v48);
  }
  uint64_t v52 = (char *)*a1;
  if (*a1)
  {
    uint64_t v53 = (char *)a1[1];
    uint64_t v54 = *a1;
    if (v53 != v52)
    {
      unint64_t v55 = (char *)a1[1];
      do
      {
        long long v57 = (void *)*((void *)v55 - 3);
        v55 -= 24;
        long long v56 = v57;
        if (v57)
        {
          *((void *)v53 - 2) = v56;
          operator delete(v56);
        }
        uint64_t v53 = v55;
      }
      while (v55 != v52);
      uint64_t v54 = *a1;
    }
    a1[1] = v52;
    operator delete(v54);
  }
  return a1;
}

uint64_t sub_2194D03E0(void *a1)
{
  *a1 = &unk_26CAD6948;
  uint64_t v2 = a1[698];
  if (v2)
  {
    uint64_t v3 = a1[699];
    unint64_t v4 = (void *)a1[698];
    if (v3 != v2)
    {
      uint64_t v5 = a1[699];
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      unint64_t v4 = (void *)a1[698];
    }
    a1[699] = v2;
    operator delete(v4);
  }
  unint64_t v8 = (void *)a1[695];
  if (v8)
  {
    a1[696] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[692];
  if (v9)
  {
    a1[693] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)a1[689];
  if (v10)
  {
    a1[690] = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)a1[686];
  if (v11)
  {
    a1[687] = v11;
    operator delete(v11);
  }
  unint64_t v12 = (void *)a1[683];
  if (v12)
  {
    a1[684] = v12;
    operator delete(v12);
  }
  unint64_t v13 = (void *)a1[680];
  if (v13)
  {
    a1[681] = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)a1[677];
  if (v14)
  {
    a1[678] = v14;
    operator delete(v14);
  }
  unint64_t v15 = (void *)a1[674];
  if (v15)
  {
    a1[675] = v15;
    operator delete(v15);
  }
  uint64_t v16 = (void *)a1[671];
  if (v16)
  {
    a1[672] = v16;
    operator delete(v16);
  }
  long long v17 = (void *)a1[668];
  if (v17)
  {
    a1[669] = v17;
    operator delete(v17);
  }
  uint64_t v18 = a1[665];
  if (v18)
  {
    uint64_t v19 = a1[666];
    long long v20 = (void *)a1[665];
    if (v19 != v18)
    {
      uint64_t v21 = a1[666];
      do
      {
        long long v23 = *(void **)(v21 - 24);
        v21 -= 24;
        long long v22 = v23;
        if (v23)
        {
          *(void *)(v19 - 16) = v22;
          operator delete(v22);
        }
        uint64_t v19 = v21;
      }
      while (v21 != v18);
      long long v20 = (void *)a1[665];
    }
    a1[666] = v18;
    operator delete(v20);
  }

  return sub_2194CD684((uint64_t)a1);
}

void sub_2194D0570(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 8)
  {
    if (a2)
    {
      unint64_t v12 = a2 << 8;
      bzero(a1[1], a2 << 8);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (v5 - *a1) >> 8;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 56) {
      sub_219486AE4();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 7 > v8) {
      unint64_t v8 = v9 >> 7;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFF00) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (HIBYTE(v10)) {
        sub_219486AFC();
      }
      uint64_t v11 = (char *)operator new(v10 << 8);
    }
    else
    {
      uint64_t v11 = 0;
    }
    unint64_t v13 = &v11[256 * v7];
    size_t v14 = a2 << 8;
    unint64_t v15 = &v11[256 * v10];
    bzero(v13, v14);
    uint64_t v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        long long v17 = *((_OWORD *)v5 - 16);
        long long v18 = *((_OWORD *)v5 - 15);
        long long v19 = *((_OWORD *)v5 - 13);
        *((_OWORD *)v13 - 14) = *((_OWORD *)v5 - 14);
        *((_OWORD *)v13 - 13) = v19;
        *((_OWORD *)v13 - 16) = v17;
        *((_OWORD *)v13 - 15) = v18;
        long long v20 = *((_OWORD *)v5 - 12);
        long long v21 = *((_OWORD *)v5 - 11);
        long long v22 = *((_OWORD *)v5 - 9);
        *((_OWORD *)v13 - 10) = *((_OWORD *)v5 - 10);
        *((_OWORD *)v13 - 9) = v22;
        *((_OWORD *)v13 - 12) = v20;
        *((_OWORD *)v13 - 11) = v21;
        long long v23 = *((_OWORD *)v5 - 8);
        long long v24 = *((_OWORD *)v5 - 7);
        long long v25 = *((_OWORD *)v5 - 5);
        *((_OWORD *)v13 - 6) = *((_OWORD *)v5 - 6);
        *((_OWORD *)v13 - 5) = v25;
        *((_OWORD *)v13 - 8) = v23;
        *((_OWORD *)v13 - 7) = v24;
        long long v26 = *((_OWORD *)v5 - 4);
        long long v27 = *((_OWORD *)v5 - 3);
        long long v28 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v28;
        *((_OWORD *)v13 - 4) = v26;
        *((_OWORD *)v13 - 3) = v27;
        v13 -= 256;
        v5 -= 256;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_2194D06E4(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x666666666666666) {
      sub_219486AE4();
    }
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x333333333333333) {
      unint64_t v10 = 0x666666666666666;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x666666666666666) {
        sub_219486AFC();
      }
      uint64_t v11 = (char *)operator new(40 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    unint64_t v13 = &v11[40 * v7];
    size_t v14 = &v11[40 * v10];
    size_t v15 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        long long v17 = *(_OWORD *)(v5 - 40);
        long long v18 = *(_OWORD *)(v5 - 24);
        *((void *)v13 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v18;
        *(_OWORD *)(v13 - 40) = v17;
        v13 -= 40;
        v5 -= 40;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_2194D089C(unint64_t *a1, unint64_t a2, const char *a3)
{
  unint64_t v7 = a1[1];
  unint64_t v6 = a1[2];
  unint64_t v8 = (char *)v7;
  if (v6 - v7 >= a2)
  {
    if (!a2)
    {
LABEL_57:
      a1[1] = (unint64_t)v8;
      return;
    }
    long long v18 = (char *)(v7 + a2);
    if (a2 >= 8 && (v7 >= (unint64_t)(a3 + 1) || v18 <= a3))
    {
      if (a2 < 0x20)
      {
        unint64_t v20 = 0;
        goto LABEL_36;
      }
      unint64_t v20 = a2 & 0xFFFFFFFFFFFFFFE0;
      int8x16_t v28 = vld1q_dup_s8(a3);
      unsigned int v29 = (int8x16_t *)(v7 + 16);
      unint64_t v30 = a2 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v29[-1] = v28;
        *unsigned int v29 = v28;
        v29 += 2;
        v30 -= 32;
      }
      while (v30);
      if (v20 == a2) {
        goto LABEL_56;
      }
      if ((a2 & 0x18) != 0)
      {
LABEL_36:
        unint64_t v8 = (char *)(v7 + (a2 & 0xFFFFFFFFFFFFFFF8));
        int8x8_t v31 = vld1_dup_s8(a3);
        uint64_t v32 = (int8x8_t *)(v7 + v20);
        unint64_t v33 = v20 - (a2 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          *v32++ = v31;
          v33 += 8;
        }
        while (v33);
        if ((a2 & 0xFFFFFFFFFFFFFFF8) == a2) {
          goto LABEL_56;
        }
        goto LABEL_55;
      }
      unint64_t v8 = (char *)(v7 + v20);
    }
    do
LABEL_55:
      *v8++ = *a3;
    while (v8 != v18);
LABEL_56:
    unint64_t v8 = (char *)(v7 + a2);
    goto LABEL_57;
  }
  unint64_t v9 = (char *)*a1;
  unint64_t v10 = v7 - *a1;
  unint64_t v11 = v10 + a2;
  if ((uint64_t)(v10 + a2) < 0) {
    sub_219486AE4();
  }
  unint64_t v12 = v6 - (void)v9;
  if (2 * v12 > v11) {
    unint64_t v11 = 2 * v12;
  }
  if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v13 = v11;
  }
  if (v13)
  {
    size_t v14 = (char *)operator new(v13);
    unint64_t v15 = (unint64_t)&v14[v10];
    uint64_t v16 = &v14[v10 + a2];
    long long v17 = &v14[v10];
    if (a2 < 8) {
      goto LABEL_41;
    }
  }
  else
  {
    size_t v14 = 0;
    unint64_t v15 = v7 - *a1;
    uint64_t v16 = (char *)(v10 + a2);
    long long v17 = (char *)v15;
    if (a2 < 8) {
      goto LABEL_41;
    }
  }
  if (v15 >= (unint64_t)(a3 + 1) || (long long v17 = (char *)v15, v16 <= a3))
  {
    if (a2 < 0x20)
    {
      unint64_t v21 = 0;
      goto LABEL_28;
    }
    unint64_t v21 = a2 & 0xFFFFFFFFFFFFFFE0;
    int8x16_t v22 = vld1q_dup_s8(a3);
    long long v23 = (int8x16_t *)&v14[v10 + 16];
    unint64_t v24 = a2 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v23[-1] = v22;
      *long long v23 = v22;
      v23 += 2;
      v24 -= 32;
    }
    while (v24);
    if (v21 == a2) {
      goto LABEL_42;
    }
    if ((a2 & 0x18) != 0)
    {
LABEL_28:
      long long v17 = (char *)(v15 + (a2 & 0xFFFFFFFFFFFFFFF8));
      int8x8_t v25 = vld1_dup_s8(a3);
      long long v26 = (int8x8_t *)&v14[v21 + v7 - (void)v9];
      unint64_t v27 = v21 - (a2 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *v26++ = v25;
        v27 += 8;
      }
      while (v27);
      if ((a2 & 0xFFFFFFFFFFFFFFF8) == a2) {
        goto LABEL_42;
      }
      goto LABEL_41;
    }
    long long v17 = (char *)(v15 + v21);
  }
  do
LABEL_41:
    *v17++ = *a3;
  while (v17 != v16);
LABEL_42:
  uint64_t v34 = (char *)*a1;
  unint64_t v35 = v7 - *a1;
  if (v7 != *a1)
  {
    if (v35 < 0x20) {
      goto LABEL_62;
    }
    if ((unint64_t)(v9 - v14) < 0x20) {
      goto LABEL_62;
    }
    unint64_t v8 = (char *)(v7 - (v35 & 0xFFFFFFFFFFFFFFE0));
    v15 -= v35 & 0xFFFFFFFFFFFFFFE0;
    long long v36 = (long long *)(v7 - 16);
    unint64_t v37 = &v14[v7 - 16 - (void)v9];
    unint64_t v38 = v35 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v39 = *v36;
      *((_OWORD *)v37 - 1) = *(v36 - 1);
      *(_OWORD *)unint64_t v37 = v39;
      v37 -= 32;
      v36 -= 2;
      v38 -= 32;
    }
    while (v38);
    if (v35 != (v35 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_62:
      do
      {
        char v40 = *--v8;
        *(unsigned char *)--unint64_t v15 = v40;
      }
      while (v8 != v34);
    }
    unint64_t v8 = (char *)*a1;
  }
  *a1 = v15;
  a1[1] = (unint64_t)v16;
  a1[2] = (unint64_t)&v14[v13];
  if (v8)
  {
    operator delete(v8);
  }
}

void sub_2194D0B64()
{
}

void sub_2194D0B7C(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_2194D0BD8(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2643A58A0, MEMORY[0x263F8C068]);
}

void sub_2194D0BC4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_2194D0BD8(std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void *sub_2194D0C0C(void *result, char *__src, char *a3, size_t __sz)
{
  unint64_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 8)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (HIBYTE(__sz)) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 7;
    if (v8 >> 7 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFF00;
    unint64_t v12 = 0xFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (HIBYTE(v12)) {
LABEL_22:
    }
      sub_219486AE4();
    unint64_t v13 = v12 << 8;
    __n128 result = operator new(v12 << 8);
    unint64_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      __n128 result = memmove(result, v6, v14);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  unint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 8;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    long long v19 = (void *)*result;
LABEL_20:
    __n128 result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  long long v18 = &__src[256 * v17];
  if (v16 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v17 << 8);
    unint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    long long v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *unint64_t v15 = &v9[v14];
  return result;
}

void sub_2194D0D58(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  unint64_t v4 = a1[2];
  if (0x8F5C28F5C28F5C29 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      BOOL v11 = &v5[200 * a2];
      uint64_t v12 = 200 * a2;
      unint64_t v13 = v5 + 128;
      do
      {
        *((void *)v13 + 8) = 0;
        *((_OWORD *)v13 + 2) = 0uLL;
        *((_OWORD *)v13 + 3) = 0uLL;
        *(_OWORD *)unint64_t v13 = 0uLL;
        *((_OWORD *)v13 + 1) = 0uLL;
        *((_DWORD *)v13 - 28) = 0x3FFF;
        v13 += 200;
        v12 -= 200;
      }
      while (v12);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v5;
    }
  }
  else
  {
    unint64_t v6 = 0x8F5C28F5C28F5C29 * ((v5 - (unsigned char *)*a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x147AE147AE147AELL) {
      sub_219486AE4();
    }
    unint64_t v8 = 0x8F5C28F5C28F5C29 * ((v4 - (unsigned char *)*a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0xA3D70A3D70A3D7) {
      unint64_t v9 = 0x147AE147AE147AELL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x147AE147AE147AELL) {
        sub_219486AFC();
      }
      uint64_t v10 = (char *)operator new(200 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    size_t v14 = &v10[200 * v6];
    uint64_t v15 = 200 * a2;
    uint64_t v16 = &v14[200 * a2];
    unint64_t v17 = v14 + 128;
    do
    {
      *((void *)v17 + 8) = 0;
      *((_OWORD *)v17 + 2) = 0uLL;
      *((_OWORD *)v17 + 3) = 0uLL;
      *(_OWORD *)unint64_t v17 = 0uLL;
      *((_OWORD *)v17 + 1) = 0uLL;
      *((_DWORD *)v17 - 28) = 0x3FFF;
      v17 += 200;
      v15 -= 200;
    }
    while (v15);
    long long v18 = &v10[200 * v9];
    unint64_t v20 = (char *)*a1;
    long long v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        *(_OWORD *)(v14 - 200) = *(_OWORD *)(v19 - 200);
        long long v21 = *(_OWORD *)(v19 - 184);
        long long v22 = *(_OWORD *)(v19 - 168);
        long long v23 = *(_OWORD *)(v19 - 152);
        *(_OWORD *)(v14 - 136) = *(_OWORD *)(v19 - 136);
        *(_OWORD *)(v14 - 152) = v23;
        *(_OWORD *)(v14 - 168) = v22;
        *(_OWORD *)(v14 - 184) = v21;
        long long v24 = *(_OWORD *)(v19 - 120);
        long long v25 = *(_OWORD *)(v19 - 104);
        long long v26 = *(_OWORD *)(v19 - 88);
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v19 - 72);
        *(_OWORD *)(v14 - 88) = v26;
        *(_OWORD *)(v14 - 104) = v25;
        *(_OWORD *)(v14 - 120) = v24;
        long long v27 = *(_OWORD *)(v19 - 56);
        long long v28 = *(_OWORD *)(v19 - 40);
        long long v29 = *(_OWORD *)(v19 - 24);
        *((void *)v14 - 1) = *((void *)v19 - 1);
        *(_OWORD *)(v14 - 24) = v29;
        *(_OWORD *)(v14 - 40) = v28;
        *(_OWORD *)(v14 - 56) = v27;
        v14 -= 200;
        v19 -= 200;
      }
      while (v19 != v20);
      long long v19 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
    {
      operator delete(v19);
    }
  }
}

uint64_t sub_2194D0F84(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_2194D0F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5, char *__s)
{
  v67[2] = *MEMORY[0x263EF8340];
  uint64_t result = sub_2194D17D8(*(void **)(a1 + 48), __s);
  if (!result) {
    return result;
  }
  uint64_t result = sub_2194D1C44(*(void **)(a1 + 56), __s);
  if (!result) {
    return result;
  }
  uint64_t result = sub_2194D20B0(*(void *)(a1 + 64), __s);
  if (!result) {
    return result;
  }
  uint64_t result = sub_2194D24E4(*(void **)(a2 + 248), __s);
  if (!result) {
    return result;
  }
  uint64_t v13 = *(void *)(a2 + 256);
  uint64_t v15 = *(uint64_t **)(v13 + 200);
  size_t v14 = *(uint64_t **)(v13 + 208);
  std::string __p = 0;
  long long v66 = 0uLL;
  int v16 = 1;
  unint64_t v64 = 1;
  uint64_t v59 = v14;
  if (v15 == v14)
  {
LABEL_44:
    if (SHIBYTE(v66) < 0) {
      goto LABEL_45;
    }
    goto LABEL_46;
  }
  do
  {
    size_t v17 = strlen(__s);
    if (v17 > 0x7FFFFFFFFFFFFFF7) {
      sub_21947DF80();
    }
    std::string::size_type v18 = v17;
    if (v17 >= 0x17)
    {
      uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17) {
        uint64_t v20 = v17 | 7;
      }
      uint64_t v21 = v20 + 1;
      p_dst = (std::string *)operator new(v20 + 1);
      __dst.__r_.__value_.__l.__size_ = v18;
      __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_13:
      memcpy(p_dst, __s, v18);
      goto LABEL_14;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v17;
    p_dst = &__dst;
    if (v17) {
      goto LABEL_13;
    }
LABEL_14:
    p_dst->__r_.__value_.__s.__data_[v18] = 0;
    long long v22 = std::string::append(&__dst, "/DesGenKPC");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    sub_2194D62CC(&v64, &v60);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v24 = &v60;
    }
    else {
      long long v24 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v60.__r_.__value_.__l.__size_;
    }
    long long v26 = std::string::append(&__ptr, (const std::string::value_type *)v24, size);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    long long v28 = std::string::append(&v63, "Out.rslt");
    long long v29 = (void *)v28->__r_.__value_.__r.__words[0];
    v67[0] = v28->__r_.__value_.__l.__size_;
    *(void *)((char *)v67 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
    char v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v66) < 0) {
      operator delete(__p);
    }
    std::string __p = v29;
    *(void *)&long long v66 = v67[0];
    *(void *)((char *)&v66 + 7) = *(void *)((char *)v67 + 7);
    HIBYTE(v66) = v30;
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v63.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_24:
        if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_39;
        }
        goto LABEL_25;
      }
    }
    else if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_39:
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_26;
      }
      goto LABEL_40;
    }
LABEL_25:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
LABEL_40:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_26:
    v63.__r_.__value_.__r.__words[0] = 0;
    if (v66 >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if (sub_2194F61F0((FILE **)&v63, p_p, "wb")) {
      goto LABEL_41;
    }
    uint64_t v32 = *v15;
    uint64_t v33 = v15[1];
    if (*v15 != v33)
    {
      while (1)
      {
        __ptr.__r_.__value_.__r.__words[0] = 0;
        __ptr.__r_.__value_.__r.__words[0] = *(_DWORD *)v32 & 0x3FF | ((*(_DWORD *)(v32 + 4) & 0x1FFF) << 10) & 0xF87FFFFF | ((*(_DWORD *)(v32 + 8) & 0xF) << 23) | ((unint64_t)*(unsigned __int8 *)(v32 + 12) << 43) | ((unint64_t)*(unsigned __int16 *)(v32 + 16) << 27);
        if (fwrite(&__ptr, 8uLL, 1uLL, (FILE *)v63.__r_.__value_.__l.__data_) != 1) {
          break;
        }
        v32 += 20;
        if (v32 == v33) {
          goto LABEL_33;
        }
      }
LABEL_41:
      unint64_t v35 = (FILE *)v63.__r_.__value_.__r.__words[0];
      v63.__r_.__value_.__r.__words[0] = 0;
      if (v35) {
        fclose(v35);
      }
      int v16 = 0;
      goto LABEL_44;
    }
LABEL_33:
    ++v64;
    uint64_t v34 = (FILE *)v63.__r_.__value_.__r.__words[0];
    v63.__r_.__value_.__r.__words[0] = 0;
    if (v34) {
      fclose(v34);
    }
    v15 += 3;
  }
  while (v15 != v59);
  int v16 = 1;
  if ((SHIBYTE(v66) & 0x80000000) == 0) {
    goto LABEL_46;
  }
LABEL_45:
  operator delete(__p);
LABEL_46:
  if (!v16) {
    return 0;
  }
  uint64_t v36 = *(void *)(a3 + 8);
  unint64_t v38 = *(unsigned __int16 ***)(v36 + 200);
  unint64_t v37 = *(unsigned __int16 ***)(v36 + 208);
  std::string __p = 0;
  long long v66 = 0uLL;
  int v39 = 1;
  unint64_t v64 = 1;
  if (v38 == v37)
  {
LABEL_86:
    if (SHIBYTE(v66) < 0) {
      goto LABEL_87;
    }
    goto LABEL_88;
  }
  while (2)
  {
    size_t v40 = strlen(__s);
    if (v40 > 0x7FFFFFFFFFFFFFF7) {
      sub_21947DF80();
    }
    std::string::size_type v41 = v40;
    if (v40 >= 0x17)
    {
      uint64_t v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17) {
        uint64_t v43 = v40 | 7;
      }
      uint64_t v44 = v43 + 1;
      uint64_t v42 = (std::string *)operator new(v43 + 1);
      __dst.__r_.__value_.__l.__size_ = v41;
      __dst.__r_.__value_.__r.__words[2] = v44 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      goto LABEL_55;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v40;
    uint64_t v42 = &__dst;
    if (v40) {
LABEL_55:
    }
      memcpy(v42, __s, v41);
    v42->__r_.__value_.__s.__data_[v41] = 0;
    unint64_t v45 = std::string::append(&__dst, "/DesGenKP0Mem");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    sub_2194D62CC(&v64, &v60);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v47 = &v60;
    }
    else {
      unsigned int v47 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v48 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v48 = v60.__r_.__value_.__l.__size_;
    }
    uint64_t v49 = std::string::append(&__ptr, (const std::string::value_type *)v47, v48);
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    unint64_t v51 = std::string::append(&v63, "Out.rslt");
    uint64_t v52 = (void *)v51->__r_.__value_.__r.__words[0];
    v67[0] = v51->__r_.__value_.__l.__size_;
    *(void *)((char *)v67 + 7) = *(std::string::size_type *)((char *)&v51->__r_.__value_.__r.__words[1] + 7);
    char v53 = HIBYTE(v51->__r_.__value_.__r.__words[2]);
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v66) < 0) {
      operator delete(__p);
    }
    std::string __p = v52;
    *(void *)&long long v66 = v67[0];
    *(void *)((char *)&v66 + 7) = *(void *)((char *)v67 + 7);
    HIBYTE(v66) = v53;
    if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_66;
      }
LABEL_80:
      operator delete(v60.__r_.__value_.__l.__data_);
      if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_81;
      }
LABEL_67:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_68;
      }
LABEL_82:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_68;
    }
    operator delete(v63.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_80;
    }
LABEL_66:
    if ((SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_67;
    }
LABEL_81:
    operator delete(__ptr.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_82;
    }
LABEL_68:
    v63.__r_.__value_.__r.__words[0] = 0;
    if (v66 >= 0) {
      uint64_t v54 = (char *)&__p;
    }
    else {
      uint64_t v54 = (char *)__p;
    }
    if (sub_2194F61F0((FILE **)&v63, v54, "wb")) {
      goto LABEL_83;
    }
    unint64_t v55 = *v38;
    long long v56 = v38[1];
    if (*v38 != v56)
    {
      while (1)
      {
        __ptr.__r_.__value_.__r.__words[0] = 0;
        __ptr.__r_.__value_.__r.__words[0] = *v55 | (*((_DWORD *)v55 + 1) << 16) | ((unint64_t)*((unsigned __int8 *)v55 + 12) << 32) | ((unint64_t)*((unsigned __int8 *)v55 + 8) << 40) | ((unint64_t)(*((_DWORD *)v55 + 7) & 0x7FFF) << 48) | ((unint64_t)*((unsigned __int8 *)v55 + 24) << 63);
        if (fwrite(&__ptr, 1uLL, 8uLL, (FILE *)v63.__r_.__value_.__l.__data_) != 8) {
          break;
        }
        v55 += 64;
        if (v55 == v56) {
          goto LABEL_75;
        }
      }
LABEL_83:
      int v58 = (FILE *)v63.__r_.__value_.__r.__words[0];
      v63.__r_.__value_.__r.__words[0] = 0;
      if (v58) {
        fclose(v58);
      }
      int v39 = 0;
      goto LABEL_86;
    }
LABEL_75:
    ++v64;
    long long v57 = (FILE *)v63.__r_.__value_.__r.__words[0];
    v63.__r_.__value_.__r.__words[0] = 0;
    if (v57) {
      fclose(v57);
    }
    v38 += 3;
    if (v38 != v37) {
      continue;
    }
    break;
  }
  int v39 = 1;
  if ((SHIBYTE(v66) & 0x80000000) == 0) {
    goto LABEL_88;
  }
LABEL_87:
  operator delete(__p);
LABEL_88:
  if (!v39) {
    return 0;
  }
  uint64_t result = sub_2194D2950(*(double ***)(a4 + 272), *(double ***)(a4 + 280), (double ***)(a4 + 296), __s);
  if (result)
  {
    uint64_t result = sub_2194D37AC((void *)(a4 + 368), *(uint64_t **)(a4 + 320), *(uint64_t **)(a4 + 328), (uint64_t **)(a4 + 344), __s);
    if (result)
    {
      uint64_t result = sub_2194D4180(*(char ***)(a4 + 224), *(char ***)(a4 + 232), (char ***)(a4 + 248), __s);
      if (result)
      {
        uint64_t result = sub_2194D4884(*(unsigned __int16 ***)(a4 + 368), *(unsigned __int16 ***)(a4 + 376), __s);
        if (result)
        {
          uint64_t result = sub_2194D4CA0(*(char ***)(a4 + 392), *(char ***)(a4 + 400), __s);
          if (result)
          {
            uint64_t result = sub_2194D5070(*(char ***)(a4 + 416), *(char ***)(a4 + 424), __s);
            if (result) {
              return sub_2194D5440(a5, 0x8E38E38E38E38E39* ((uint64_t)(*(void *)(*(void *)(a1 + 48) + 56) - *(void *)(*(void *)(a1 + 48) + 48)) >> 4), __s);
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_2194D16B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,FILE *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2194D17D8(void *a1, char *__s)
{
  v49[2] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  long long v48 = 0uLL;
  unint64_t v2 = a1[2];
  if (!v2 || (unint64_t v4 = a1[3]) == 0)
  {
LABEL_51:
    uint64_t v40 = 1;
    if (SHIBYTE(v48) < 0) {
      goto LABEL_52;
    }
    return v40;
  }
  uint64_t v6 = 0;
  while (!v4)
  {
LABEL_4:
    if (++v6 >= v2) {
      goto LABEL_51;
    }
  }
  unint64_t v7 = 0;
  while (1)
  {
    unint64_t v46 = v7 + v4 * v6;
    size_t v8 = strlen(__s);
    if (v8 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21947DF80();
    }
    std::string::size_type v9 = v8;
    if (v8 >= 0x17)
    {
      uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v11 = v8 | 7;
      }
      uint64_t v12 = v11 + 1;
      p_dst = (std::string *)operator new(v11 + 1);
      __dst.__r_.__value_.__l.__size_ = v9;
      __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_14:
      memcpy(p_dst, __s, v9);
      goto LABEL_15;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8;
    p_dst = &__dst;
    if (v8) {
      goto LABEL_14;
    }
LABEL_15:
    p_dst->__r_.__value_.__s.__data_[v9] = 0;
    uint64_t v13 = std::string::append(&__dst, "/DesGenGP");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    sub_2194D62CC(&v46, &v42);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v42;
    }
    else {
      uint64_t v15 = (std::string *)v42.__r_.__value_.__r.__words[0];
    }
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v42.__r_.__value_.__l.__size_;
    }
    size_t v17 = std::string::append(&__ptr, (const std::string::value_type *)v15, size);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    long long v19 = std::string::append(&v45, "Out.rslt");
    uint64_t v20 = (void *)v19->__r_.__value_.__r.__words[0];
    v49[0] = v19->__r_.__value_.__l.__size_;
    *(void *)((char *)v49 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
    char v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v48) < 0) {
      operator delete(__p);
    }
    std::string __p = v20;
    *(void *)&long long v48 = v49[0];
    *(void *)((char *)&v48 + 7) = *(void *)((char *)v49 + 7);
    HIBYTE(v48) = v21;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_34;
        }
        goto LABEL_26;
      }
    }
    else if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_34:
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_35;
    }
LABEL_26:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_35:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_27:
    uint64_t v22 = a1[3];
    uint64_t v23 = a1[6];
    v45.__r_.__value_.__r.__words[0] = 0;
    if (v48 >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if (sub_2194F61F0((FILE **)&v45, p_p, "wb")) {
      goto LABEL_31;
    }
    unint64_t v26 = v7 + v22 * v6;
    uint64_t v27 = v23 + 144 * v26;
    unint64_t v30 = *(void *)(v27 + 48);
    long long v29 = (unint64_t *)(v27 + 48);
    unint64_t v28 = v30;
    if (v30)
    {
      uint64_t v31 = v23 + 144 * v26;
      uint64_t v33 = *(void *)(v31 + 32);
      uint64_t v32 = (uint64_t *)(v31 + 32);
      if (v33)
      {
        unint64_t v34 = 0;
        unint64_t v35 = v32 + 1;
        uint64_t v36 = *(void *)(v23 + 144 * v26 + 72);
        uint64_t v37 = 1;
        while (!v37)
        {
LABEL_39:
          ++v34;
          v36 += *v35;
          char v25 = 1;
          if (v34 >= v28) {
            goto LABEL_46;
          }
        }
        unint64_t v38 = 0;
        while (1)
        {
          LODWORD(__ptr.__r_.__value_.__l.__data_) = 0;
          LODWORD(__ptr.__r_.__value_.__l.__data_) = *(unsigned __int8 *)(v36 + v38);
          if (fwrite(&__ptr, 4uLL, 1uLL, (FILE *)v45.__r_.__value_.__l.__data_) != 1) {
            break;
          }
          ++v38;
          uint64_t v37 = *v32;
          if (v38 >= *v32)
          {
            unint64_t v28 = *v29;
            unint64_t v35 = v32 + 1;
            goto LABEL_39;
          }
        }
LABEL_31:
        char v25 = 0;
        goto LABEL_46;
      }
    }
    char v25 = 1;
LABEL_46:
    int v39 = (FILE *)v45.__r_.__value_.__r.__words[0];
    v45.__r_.__value_.__r.__words[0] = 0;
    if (v39) {
      fclose(v39);
    }
    if ((v25 & 1) == 0) {
      break;
    }
    ++v7;
    unint64_t v4 = a1[3];
    if (v7 >= v4)
    {
      unint64_t v2 = a1[2];
      goto LABEL_4;
    }
  }
  uint64_t v40 = 0;
  if (SHIBYTE(v48) < 0) {
LABEL_52:
  }
    operator delete(__p);
  return v40;
}

void sub_2194D1B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,FILE *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2194D1C44(void *a1, char *__s)
{
  v49[2] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  long long v48 = 0uLL;
  unint64_t v2 = a1[2];
  if (!v2 || (unint64_t v4 = a1[3]) == 0)
  {
LABEL_51:
    uint64_t v40 = 1;
    if (SHIBYTE(v48) < 0) {
      goto LABEL_52;
    }
    return v40;
  }
  uint64_t v6 = 0;
  while (!v4)
  {
LABEL_4:
    if (++v6 >= v2) {
      goto LABEL_51;
    }
  }
  unint64_t v7 = 0;
  while (1)
  {
    unint64_t v46 = v7 + v4 * v6;
    size_t v8 = strlen(__s);
    if (v8 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21947DF80();
    }
    std::string::size_type v9 = v8;
    if (v8 >= 0x17)
    {
      uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v11 = v8 | 7;
      }
      uint64_t v12 = v11 + 1;
      p_dst = (std::string *)operator new(v11 + 1);
      __dst.__r_.__value_.__l.__size_ = v9;
      __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_14:
      memcpy(p_dst, __s, v9);
      goto LABEL_15;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8;
    p_dst = &__dst;
    if (v8) {
      goto LABEL_14;
    }
LABEL_15:
    p_dst->__r_.__value_.__s.__data_[v9] = 0;
    uint64_t v13 = std::string::append(&__dst, "/DesGenBlur");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    sub_2194D62CC(&v46, &v42);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v42;
    }
    else {
      uint64_t v15 = (std::string *)v42.__r_.__value_.__r.__words[0];
    }
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v42.__r_.__value_.__l.__size_;
    }
    size_t v17 = std::string::append(&__ptr, (const std::string::value_type *)v15, size);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    long long v19 = std::string::append(&v45, "Out.rslt");
    uint64_t v20 = (void *)v19->__r_.__value_.__r.__words[0];
    v49[0] = v19->__r_.__value_.__l.__size_;
    *(void *)((char *)v49 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
    char v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v48) < 0) {
      operator delete(__p);
    }
    std::string __p = v20;
    *(void *)&long long v48 = v49[0];
    *(void *)((char *)&v48 + 7) = *(void *)((char *)v49 + 7);
    HIBYTE(v48) = v21;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_34;
        }
        goto LABEL_26;
      }
    }
    else if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_34:
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_35;
    }
LABEL_26:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_35:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_27:
    uint64_t v22 = a1[3];
    uint64_t v23 = a1[6];
    v45.__r_.__value_.__r.__words[0] = 0;
    if (v48 >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if (sub_2194F61F0((FILE **)&v45, p_p, "wb")) {
      goto LABEL_31;
    }
    unint64_t v26 = v7 + v22 * v6;
    uint64_t v27 = v23 + 144 * v26;
    unint64_t v30 = *(void *)(v27 + 48);
    long long v29 = (unint64_t *)(v27 + 48);
    unint64_t v28 = v30;
    if (v30)
    {
      uint64_t v31 = v23 + 144 * v26;
      uint64_t v33 = *(void *)(v31 + 32);
      uint64_t v32 = (uint64_t *)(v31 + 32);
      if (v33)
      {
        unint64_t v34 = 0;
        unint64_t v35 = v32 + 1;
        uint64_t v36 = *(void *)(v23 + 144 * v26 + 72);
        uint64_t v37 = 1;
        while (!v37)
        {
LABEL_39:
          ++v34;
          v36 += 2 * *v35;
          char v25 = 1;
          if (v34 >= v28) {
            goto LABEL_46;
          }
        }
        unint64_t v38 = 0;
        while (1)
        {
          LODWORD(__ptr.__r_.__value_.__l.__data_) = 0;
          LODWORD(__ptr.__r_.__value_.__l.__data_) = *(unsigned __int16 *)(v36 + 2 * v38);
          if (fwrite(&__ptr, 4uLL, 1uLL, (FILE *)v45.__r_.__value_.__l.__data_) != 1) {
            break;
          }
          ++v38;
          uint64_t v37 = *v32;
          if (v38 >= *v32)
          {
            unint64_t v28 = *v29;
            unint64_t v35 = v32 + 1;
            goto LABEL_39;
          }
        }
LABEL_31:
        char v25 = 0;
        goto LABEL_46;
      }
    }
    char v25 = 1;
LABEL_46:
    int v39 = (FILE *)v45.__r_.__value_.__r.__words[0];
    v45.__r_.__value_.__r.__words[0] = 0;
    if (v39) {
      fclose(v39);
    }
    if ((v25 & 1) == 0) {
      break;
    }
    ++v7;
    unint64_t v4 = a1[3];
    if (v7 >= v4)
    {
      unint64_t v2 = a1[2];
      goto LABEL_4;
    }
  }
  uint64_t v40 = 0;
  if (SHIBYTE(v48) < 0) {
LABEL_52:
  }
    operator delete(__p);
  return v40;
}

void sub_2194D1FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,FILE *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2194D20B0(uint64_t a1, char *__s)
{
  v43[2] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  long long v42 = 0uLL;
  unint64_t v40 = 0;
  if (!*(void *)(a1 + 16))
  {
LABEL_48:
    uint64_t v34 = 1;
    if (SHIBYTE(v42) < 0) {
      goto LABEL_46;
    }
    return v34;
  }
  while (1)
  {
    size_t v4 = strlen(__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21947DF80();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v7 = v4 | 7;
      }
      uint64_t v8 = v7 + 1;
      p_dst = (std::string *)operator new(v7 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_9:
      memcpy(p_dst, __s, v5);
      goto LABEL_10;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
    p_dst = &__dst;
    if (v4) {
      goto LABEL_9;
    }
LABEL_10:
    p_dst->__r_.__value_.__s.__data_[v5] = 0;
    std::string::size_type v9 = std::string::append(&__dst, "/DesGen3x3");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    sub_2194D62CC(&v40, &v36);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v36;
    }
    else {
      uint64_t v11 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v36.__r_.__value_.__l.__size_;
    }
    uint64_t v13 = std::string::append(&__ptr, (const std::string::value_type *)v11, size);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    uint64_t v15 = std::string::append(&v39, "Out.rslt");
    int v16 = (void *)v15->__r_.__value_.__r.__words[0];
    v43[0] = v15->__r_.__value_.__l.__size_;
    *(void *)((char *)v43 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
    char v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v42) < 0) {
      operator delete(__p);
    }
    std::string __p = v16;
    *(void *)&long long v42 = v43[0];
    *(void *)((char *)&v42 + 7) = *(void *)((char *)v43 + 7);
    HIBYTE(v42) = v17;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v39.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_20:
        if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_41;
        }
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_41:
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_42;
    }
LABEL_21:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_42:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_22:
    unint64_t v18 = v40;
    uint64_t v19 = *(void *)(a1 + 48);
    v39.__r_.__value_.__r.__words[0] = 0;
    if (v42 >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if (sub_2194F61F0((FILE **)&v39, p_p, "wb")) {
      goto LABEL_43;
    }
    uint64_t v21 = v19 + 144 * v18;
    unint64_t v24 = *(void *)(v21 + 48);
    uint64_t v23 = (unint64_t *)(v21 + 48);
    unint64_t v22 = v24;
    if (v24)
    {
      uint64_t v25 = v19 + 144 * v18;
      uint64_t v27 = *(void *)(v25 + 32);
      unint64_t v26 = (uint64_t *)(v25 + 32);
      if (v27) {
        break;
      }
    }
LABEL_35:
    uint64_t v32 = (FILE *)v39.__r_.__value_.__r.__words[0];
    v39.__r_.__value_.__r.__words[0] = 0;
    if (v32) {
      fclose(v32);
    }
    if (++v40 >= *(void *)(a1 + 16)) {
      goto LABEL_48;
    }
  }
  unint64_t v28 = 0;
  uint64_t v29 = *(void *)(v19 + 144 * v18 + 72);
  uint64_t v30 = 1;
  while (!v30)
  {
LABEL_29:
    ++v28;
    v29 += v26[1];
    if (v28 >= v22) {
      goto LABEL_35;
    }
  }
  unint64_t v31 = 0;
  while (1)
  {
    LODWORD(__ptr.__r_.__value_.__l.__data_) = 0;
    LODWORD(__ptr.__r_.__value_.__l.__data_) = *(unsigned __int8 *)(v29 + v31);
    if (fwrite(&__ptr, 4uLL, 1uLL, (FILE *)v39.__r_.__value_.__l.__data_) != 1) {
      break;
    }
    ++v31;
    uint64_t v30 = *v26;
    if (v31 >= *v26)
    {
      unint64_t v22 = *v23;
      goto LABEL_29;
    }
  }
LABEL_43:
  uint64_t v33 = (FILE *)v39.__r_.__value_.__r.__words[0];
  v39.__r_.__value_.__r.__words[0] = 0;
  if (v33) {
    fclose(v33);
  }
  uint64_t v34 = 0;
  if (SHIBYTE(v42) < 0) {
LABEL_46:
  }
    operator delete(__p);
  return v34;
}

void sub_2194D2414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,FILE *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2194D24E4(void *a1, char *__s)
{
  v49[2] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  long long v48 = 0uLL;
  unint64_t v2 = a1[2];
  if (!v2 || (unint64_t v4 = a1[3]) == 0)
  {
LABEL_51:
    uint64_t v40 = 1;
    if (SHIBYTE(v48) < 0) {
      goto LABEL_52;
    }
    return v40;
  }
  uint64_t v6 = 0;
  while (!v4)
  {
LABEL_4:
    if (++v6 >= v2) {
      goto LABEL_51;
    }
  }
  unint64_t v7 = 0;
  while (1)
  {
    unint64_t v46 = v7 + v4 * v6;
    size_t v8 = strlen(__s);
    if (v8 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21947DF80();
    }
    std::string::size_type v9 = v8;
    if (v8 >= 0x17)
    {
      uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v11 = v8 | 7;
      }
      uint64_t v12 = v11 + 1;
      p_dst = (std::string *)operator new(v11 + 1);
      __dst.__r_.__value_.__l.__size_ = v9;
      __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_14:
      memcpy(p_dst, __s, v9);
      goto LABEL_15;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8;
    p_dst = &__dst;
    if (v8) {
      goto LABEL_14;
    }
LABEL_15:
    p_dst->__r_.__value_.__s.__data_[v9] = 0;
    uint64_t v13 = std::string::append(&__dst, "/DesGenRM");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    sub_2194D62CC(&v46, &v42);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v42;
    }
    else {
      uint64_t v15 = (std::string *)v42.__r_.__value_.__r.__words[0];
    }
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v42.__r_.__value_.__l.__size_;
    }
    char v17 = std::string::append(&__ptr, (const std::string::value_type *)v15, size);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = std::string::append(&v45, "Out.rslt");
    uint64_t v20 = (void *)v19->__r_.__value_.__r.__words[0];
    v49[0] = v19->__r_.__value_.__l.__size_;
    *(void *)((char *)v49 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
    char v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v48) < 0) {
      operator delete(__p);
    }
    std::string __p = v20;
    *(void *)&long long v48 = v49[0];
    *(void *)((char *)&v48 + 7) = *(void *)((char *)v49 + 7);
    HIBYTE(v48) = v21;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_34;
        }
        goto LABEL_26;
      }
    }
    else if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_34:
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_35;
    }
LABEL_26:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_35:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_27:
    uint64_t v22 = a1[3];
    uint64_t v23 = a1[6];
    v45.__r_.__value_.__r.__words[0] = 0;
    if (v48 >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if (sub_2194F61F0((FILE **)&v45, p_p, "wb")) {
      goto LABEL_31;
    }
    unint64_t v26 = v7 + v22 * v6;
    uint64_t v27 = v23 + 144 * v26;
    unint64_t v30 = *(void *)(v27 + 48);
    uint64_t v29 = (unint64_t *)(v27 + 48);
    unint64_t v28 = v30;
    if (v30)
    {
      uint64_t v31 = v23 + 144 * v26;
      uint64_t v33 = *(void *)(v31 + 32);
      uint64_t v32 = (uint64_t *)(v31 + 32);
      if (v33)
      {
        unint64_t v34 = 0;
        unint64_t v35 = v32 + 1;
        uint64_t v36 = *(void *)(v23 + 144 * v26 + 72);
        uint64_t v37 = 1;
        while (!v37)
        {
LABEL_39:
          ++v34;
          v36 += 2 * *v35;
          char v25 = 1;
          if (v34 >= v28) {
            goto LABEL_46;
          }
        }
        unint64_t v38 = 0;
        while (1)
        {
          LODWORD(__ptr.__r_.__value_.__l.__data_) = 0;
          LODWORD(__ptr.__r_.__value_.__l.__data_) = *(__int16 *)(v36 + 2 * v38);
          if (fwrite(&__ptr, 4uLL, 1uLL, (FILE *)v45.__r_.__value_.__l.__data_) != 1) {
            break;
          }
          ++v38;
          uint64_t v37 = *v32;
          if (v38 >= *v32)
          {
            unint64_t v28 = *v29;
            unint64_t v35 = v32 + 1;
            goto LABEL_39;
          }
        }
LABEL_31:
        char v25 = 0;
        goto LABEL_46;
      }
    }
    char v25 = 1;
LABEL_46:
    std::string v39 = (FILE *)v45.__r_.__value_.__r.__words[0];
    v45.__r_.__value_.__r.__words[0] = 0;
    if (v39) {
      fclose(v39);
    }
    if ((v25 & 1) == 0) {
      break;
    }
    ++v7;
    unint64_t v4 = a1[3];
    if (v7 >= v4)
    {
      unint64_t v2 = a1[2];
      goto LABEL_4;
    }
  }
  uint64_t v40 = 0;
  if (SHIBYTE(v48) < 0) {
LABEL_52:
  }
    operator delete(__p);
  return v40;
}

void sub_2194D287C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,FILE *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2194D2950(double **a1, double **a2, double ***a3, char *__s)
{
  v64[2] = *MEMORY[0x263EF8340];
  long long v62 = 0;
  long long v63 = 0uLL;
  std::string v60 = 0;
  long long v61 = 0uLL;
  __stream = 0;
  unint64_t v59 = 1;
  long long v57 = 0;
  if (a1 != a2)
  {
    uint64_t v6 = a1;
    unint64_t v7 = "/DesGenCoordXFirst";
    while (1)
    {
      size_t v8 = strlen(__s);
      if (v8 > 0x7FFFFFFFFFFFFFF7) {
        sub_21947DF80();
      }
      std::string::size_type v9 = v8;
      if (v8 >= 0x17) {
        break;
      }
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8;
      p_dst = &__dst;
      if (v8) {
        goto LABEL_11;
      }
LABEL_12:
      p_dst->__r_.__value_.__s.__data_[v9] = 0;
      long long v14 = std::string::append(&__dst, v7);
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      sub_2194D62CC(&v59, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      long long v18 = std::string::append(&v55, (const std::string::value_type *)p_p, size);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      __ptr.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      uint64_t v20 = std::string::append(&__ptr, "Out.rslt");
      char v21 = (void *)v20->__r_.__value_.__r.__words[0];
      v64[0] = v20->__r_.__value_.__l.__size_;
      *(void *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v63) < 0) {
        operator delete(v62);
      }
      long long v62 = v21;
      *(void *)&long long v63 = v64[0];
      *(void *)((char *)&v63 + 7) = *(void *)((char *)v64 + 7);
      HIBYTE(v63) = v22;
      if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__ptr.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_22:
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_33;
          }
          goto LABEL_23;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_22;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_33:
        operator delete(v55.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_24;
        }
        goto LABEL_34;
      }
LABEL_23:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_24;
      }
LABEL_34:
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
      if (v63 >= 0) {
        uint64_t v23 = (char *)&v62;
      }
      else {
        uint64_t v23 = (char *)v62;
      }
      if (sub_2194F61F0(&__stream, v23, "wb"))
      {
        BOOL v26 = 0;
        goto LABEL_70;
      }
      unint64_t v24 = *v6;
      char v25 = v6[1];
      if (*v6 != v25)
      {
        do
        {
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*v24, 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[1], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[2], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[3], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[4], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[5], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[6], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[7], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[8], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[9], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[10], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[11], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[12], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[13], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[14], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[15], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[16], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[17], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[18], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[19], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[20], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[21], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[22], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[23], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[24], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[25], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[26], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[27], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[28], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[29], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          v24 += 30;
        }
        while (v24 != v25);
      }
      ++v59;
      v6 += 3;
      if (v6 == a2) {
        goto LABEL_35;
      }
    }
    uint64_t v11 = v7;
    uint64_t v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v12 = v8 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v9;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    unint64_t v7 = v11;
LABEL_11:
    memcpy(p_dst, __s, v9);
    goto LABEL_12;
  }
LABEL_35:
  BOOL v26 = 1;
  unint64_t v59 = 1;
  uint64_t v27 = *a3;
  unint64_t v28 = a3[1];
  if (*a3 == v28)
  {
LABEL_70:
    uint64_t v49 = v57;
    long long v57 = 0;
    if (!v49) {
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  uint64_t v29 = "/DesGenCoordYFirst";
  do
  {
    size_t v30 = strlen(__s);
    if (v30 > 0x7FFFFFFFFFFFFFF7) {
      sub_21947DF80();
    }
    std::string::size_type v31 = v30;
    if (v30 >= 0x17)
    {
      uint64_t v33 = v29;
      uint64_t v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17) {
        uint64_t v34 = v30 | 7;
      }
      uint64_t v35 = v34 + 1;
      uint64_t v32 = (std::string *)operator new(v34 + 1);
      __dst.__r_.__value_.__l.__size_ = v31;
      __dst.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      uint64_t v29 = v33;
LABEL_45:
      memcpy(v32, __s, v31);
      goto LABEL_46;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v30;
    uint64_t v32 = &__dst;
    if (v30) {
      goto LABEL_45;
    }
LABEL_46:
    v32->__r_.__value_.__s.__data_[v31] = 0;
    uint64_t v36 = std::string::append(&__dst, v29);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    sub_2194D62CC(&v59, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v38 = &__p;
    }
    else {
      unint64_t v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v39 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v40 = std::string::append(&v55, (const std::string::value_type *)v38, v39);
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::string v42 = std::string::append(&__ptr, "Out.rslt");
    uint64_t v43 = (void *)v42->__r_.__value_.__r.__words[0];
    v64[0] = v42->__r_.__value_.__l.__size_;
    *(void *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
    char v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v61) < 0) {
      operator delete(v60);
    }
    std::string v60 = v43;
    *(void *)&long long v61 = v64[0];
    *(void *)((char *)&v61 + 7) = *(void *)((char *)v64 + 7);
    HIBYTE(v61) = v44;
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_56:
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_67;
        }
        goto LABEL_57;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_56;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_67:
      operator delete(v55.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_58;
      }
      goto LABEL_68;
    }
LABEL_57:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_58;
    }
LABEL_68:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_58:
    if (v61 >= 0) {
      std::string v45 = (char *)&v60;
    }
    else {
      std::string v45 = (char *)v60;
    }
    int v46 = sub_2194F61F0(&v57, v45, "wb");
    BOOL v26 = v46 == 0;
    if (v46) {
      goto LABEL_70;
    }
    unsigned int v47 = *v27;
    long long v48 = v27[1];
    if (*v27 != v48)
    {
      do
      {
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*v47, 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[1], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[2], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[3], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[4], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[5], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[6], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[7], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[8], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[9], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[10], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[11], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[12], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[13], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[14], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[15], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[16], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[17], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[18], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[19], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[20], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[21], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[22], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[23], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[24], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[25], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[26], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[27], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[28], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[29], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        v47 += 30;
      }
      while (v47 != v48);
    }
    ++v59;
    v27 += 3;
  }
  while (v27 != v28);
  BOOL v26 = 1;
  uint64_t v49 = v57;
  long long v57 = 0;
  if (v49) {
LABEL_71:
  }
    fclose(v49);
LABEL_72:
  long long v50 = __stream;
  __stream = 0;
  if (v50) {
    fclose(v50);
  }
  if (SHIBYTE(v61) < 0)
  {
    operator delete(v60);
    if ((SHIBYTE(v63) & 0x80000000) == 0) {
      return v26;
    }
LABEL_78:
    operator delete(v62);
    return v26;
  }
  if (SHIBYTE(v63) < 0) {
    goto LABEL_78;
  }
  return v26;
}

void sub_2194D3644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,FILE *a37,FILE *a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a37)
  {
    fclose(a37);
    int v46 = a38;
    if (a38)
    {
LABEL_8:
      fclose(v46);
      if (a45 < 0)
      {
LABEL_9:
        operator delete(__p);
        if (*(char *)(v45 - 121) < 0)
        {
LABEL_10:
          operator delete(*(void **)(v45 - 144));
          _Unwind_Resume(exception_object);
        }
LABEL_5:
        _Unwind_Resume(exception_object);
      }
LABEL_4:
      if (*(char *)(v45 - 121) < 0) {
        goto LABEL_10;
      }
      goto LABEL_5;
    }
  }
  else
  {
    int v46 = a38;
    if (a38) {
      goto LABEL_8;
    }
  }
  if (a45 < 0) {
    goto LABEL_9;
  }
  goto LABEL_4;
}

uint64_t sub_2194D37AC(void *a1, uint64_t *a2, uint64_t *a3, uint64_t **a4, const char *a5)
{
  v73[2] = *MEMORY[0x263EF8340];
  uint64_t v71 = 0;
  long long v72 = 0uLL;
  uint64_t v69 = 0;
  long long v70 = 0uLL;
  __stream = 0;
  unint64_t v68 = 1;
  long long v66 = 0;
  if (a2 == a3)
  {
LABEL_38:
    uint64_t v57 = 1;
    unint64_t v68 = 1;
    uint64_t v29 = *a4;
    unint64_t v59 = a4[1];
    if (*a4 == v59) {
      goto LABEL_76;
    }
    while (1)
    {
      size_t v30 = strlen(a5);
      if (v30 > 0x7FFFFFFFFFFFFFF7) {
        sub_21947DF80();
      }
      std::string::size_type v31 = v30;
      if (v30 >= 0x17) {
        break;
      }
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v30;
      p_dst = &__dst;
      if (v30) {
        goto LABEL_48;
      }
LABEL_49:
      p_dst->__r_.__value_.__s.__data_[v31] = 0;
      uint64_t v35 = std::string::append(&__dst, "/DesGenCoordYSecond");
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      sub_2194D62CC(&v68, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::size_type v39 = std::string::append(&v64, (const std::string::value_type *)p_p, size);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      __ptr.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      long long v41 = std::string::append(&__ptr, "Out.rslt");
      std::string v42 = (void *)v41->__r_.__value_.__r.__words[0];
      v73[0] = v41->__r_.__value_.__l.__size_;
      *(void *)((char *)v73 + 7) = *(std::string::size_type *)((char *)&v41->__r_.__value_.__r.__words[1] + 7);
      char v43 = HIBYTE(v41->__r_.__value_.__r.__words[2]);
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v70) < 0) {
        operator delete(v69);
      }
      uint64_t v69 = v42;
      *(void *)&long long v70 = v73[0];
      *(void *)((char *)&v70 + 7) = *(void *)((char *)v73 + 7);
      HIBYTE(v70) = v43;
      if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__ptr.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_59:
          if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_60;
          }
          goto LABEL_73;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_59;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_60:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_74;
        }
        goto LABEL_61;
      }
LABEL_73:
      operator delete(v64.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_74:
      }
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_61:
      if (v70 >= 0) {
        char v44 = (char *)&v69;
      }
      else {
        char v44 = (char *)v69;
      }
      if (sub_2194F61F0(&v66, v44, "wb"))
      {
        uint64_t v57 = 0;
        char v53 = v66;
        long long v66 = 0;
        if (v53) {
          goto LABEL_77;
        }
        goto LABEL_78;
      }
      unint64_t v46 = v68;
      uint64_t v47 = *v29;
      uint64_t v48 = v29[1];
      if (*v29 != v48)
      {
        uint64_t v49 = 0;
        long long v50 = (void *)(*a1 + 24 * v68 - 24);
        double v51 = (double)(1 << ((v68 >> 1) + 6));
        do
        {
          LODWORD(__ptr.__r_.__value_.__l.__data_) = 0;
          LODWORD(v45) = *(_DWORD *)(*v50 + (v49 << 7) + 4);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(floor((double)v45 / v51 * 64.0 + 0.5) * 0.015625, 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v66);
          for (uint64_t i = 40; i != 376; i += 48)
          {
            LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v47 + i - 40), 6uLL);
            fwrite(&__ptr, 4uLL, 1uLL, v66);
            LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v47 + i - 32), 6uLL);
            fwrite(&__ptr, 4uLL, 1uLL, v66);
            LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v47 + i - 24), 6uLL);
            fwrite(&__ptr, 4uLL, 1uLL, v66);
            LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v47 + i - 16), 6uLL);
            fwrite(&__ptr, 4uLL, 1uLL, v66);
            LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v47 + i - 8), 6uLL);
            fwrite(&__ptr, 4uLL, 1uLL, v66);
            LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v47 + i), 6uLL);
            fwrite(&__ptr, 4uLL, 1uLL, v66);
          }
          ++v49;
          v47 += 336;
        }
        while (v47 != v48);
        unint64_t v46 = v68;
      }
      unint64_t v68 = v46 + 1;
      v29 += 3;
      if (v29 == v59)
      {
        uint64_t v57 = 1;
        char v53 = v66;
        long long v66 = 0;
        if (v53) {
          goto LABEL_77;
        }
        goto LABEL_78;
      }
    }
    uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v33 = v30 | 7;
    }
    uint64_t v34 = v33 + 1;
    p_dst = (std::string *)operator new(v33 + 1);
    __dst.__r_.__value_.__l.__size_ = v31;
    __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_48:
    memcpy(p_dst, a5, v31);
    goto LABEL_49;
  }
  std::string::size_type v5 = a2;
  while (1)
  {
    size_t v6 = strlen(a5);
    if (v6 > 0x7FFFFFFFFFFFFFF7) {
      sub_21947DF80();
    }
    std::string::size_type v7 = v6;
    if (v6 >= 0x17)
    {
      uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v9 = v6 | 7;
      }
      uint64_t v10 = v9 + 1;
      size_t v8 = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v7;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
LABEL_11:
      memcpy(v8, a5, v7);
      goto LABEL_12;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6;
    size_t v8 = &__dst;
    if (v6) {
      goto LABEL_11;
    }
LABEL_12:
    v8->__r_.__value_.__s.__data_[v7] = 0;
    uint64_t v11 = std::string::append(&__dst, "/DesGenCoordXSecond");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    sub_2194D62CC(&v68, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v13 = &__p;
    }
    else {
      uint64_t v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
    }
    long long v15 = std::string::append(&v64, (const std::string::value_type *)v13, v14);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    char v17 = std::string::append(&__ptr, "Out.rslt");
    long long v18 = (void **)v17->__r_.__value_.__r.__words[0];
    v73[0] = v17->__r_.__value_.__l.__size_;
    *(void *)((char *)v73 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
    char v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v72) < 0) {
      operator delete(v71);
    }
    uint64_t v71 = v18;
    *(void *)&long long v72 = v73[0];
    *(void *)((char *)&v72 + 7) = *(void *)((char *)v73 + 7);
    HIBYTE(v72) = v19;
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_22:
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_36;
        }
        goto LABEL_23;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_36:
      operator delete(v64.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_37;
    }
LABEL_23:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_37:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
    uint64_t v20 = v72 >= 0 ? (char *)&v71 : (char *)v71;
    if (sub_2194F61F0(&__stream, v20, "wb")) {
      break;
    }
    unint64_t v22 = v68;
    uint64_t v23 = *v5;
    uint64_t v24 = v5[1];
    if (*v5 != v24)
    {
      uint64_t v25 = 0;
      BOOL v26 = (void *)(*a1 + 24 * v68 - 24);
      double v27 = (double)(1 << ((v68 >> 1) + 6));
      do
      {
        LODWORD(__ptr.__r_.__value_.__l.__data_) = 0;
        LODWORD(v21) = *(_DWORD *)(*v26 + (v25 << 7));
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(floor((double)v21 / v27 * 64.0 + 0.5) * 0.015625, 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, __stream);
        for (uint64_t j = 40; j != 376; j += 48)
        {
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v23 + j - 40), 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v23 + j - 32), 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v23 + j - 24), 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v23 + j - 16), 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v23 + j - 8), 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v23 + j), 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
        }
        ++v25;
        v23 += 336;
      }
      while (v23 != v24);
      unint64_t v22 = v68;
    }
    unint64_t v68 = v22 + 1;
    v5 += 3;
    if (v5 == a3) {
      goto LABEL_38;
    }
  }
  uint64_t v57 = 0;
LABEL_76:
  char v53 = v66;
  long long v66 = 0;
  if (v53) {
LABEL_77:
  }
    fclose(v53);
LABEL_78:
  uint64_t v54 = __stream;
  __stream = 0;
  if (v54) {
    fclose(v54);
  }
  if (SHIBYTE(v70) < 0)
  {
    operator delete(v69);
    if ((SHIBYTE(v72) & 0x80000000) == 0) {
      return v57;
    }
LABEL_84:
    operator delete(v71);
    return v57;
  }
  if (SHIBYTE(v72) < 0) {
    goto LABEL_84;
  }
  return v57;
}

void sub_2194D4010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,FILE *a41,FILE *a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a41)
  {
    fclose(a41);
    long long v50 = a42;
    if (a42)
    {
LABEL_8:
      fclose(v50);
      if (a49 < 0)
      {
LABEL_9:
        operator delete(__p);
        if (*(char *)(v49 - 137) < 0)
        {
LABEL_10:
          operator delete(*(void **)(v49 - 160));
          _Unwind_Resume(exception_object);
        }
LABEL_5:
        _Unwind_Resume(exception_object);
      }
LABEL_4:
      if (*(char *)(v49 - 137) < 0) {
        goto LABEL_10;
      }
      goto LABEL_5;
    }
  }
  else
  {
    long long v50 = a42;
    if (a42) {
      goto LABEL_8;
    }
  }
  if (a49 < 0) {
    goto LABEL_9;
  }
  goto LABEL_4;
}

BOOL sub_2194D4180(char **a1, char **a2, char ***a3, char *__s)
{
  v64[2] = *MEMORY[0x263EF8340];
  long long v62 = 0;
  long long v63 = 0uLL;
  std::string v60 = 0;
  long long v61 = 0uLL;
  __stream = 0;
  unint64_t v59 = 1;
  uint64_t v57 = 0;
  if (a1 != a2)
  {
    size_t v6 = a1;
    std::string::size_type v7 = "/DesGenRetinaFirst";
    while (1)
    {
      size_t v8 = strlen(__s);
      if (v8 > 0x7FFFFFFFFFFFFFF7) {
        sub_21947DF80();
      }
      std::string::size_type v9 = v8;
      if (v8 >= 0x17) {
        break;
      }
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8;
      p_dst = &__dst;
      if (v8) {
        goto LABEL_11;
      }
LABEL_12:
      p_dst->__r_.__value_.__s.__data_[v9] = 0;
      std::string::size_type v14 = std::string::append(&__dst, v7);
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      sub_2194D62CC(&v59, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      long long v18 = std::string::append(&v55, (const std::string::value_type *)p_p, size);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      uint64_t v20 = std::string::append(&v56, "Out.rslt");
      unint64_t v21 = (void *)v20->__r_.__value_.__r.__words[0];
      v64[0] = v20->__r_.__value_.__l.__size_;
      *(void *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v63) < 0) {
        operator delete(v62);
      }
      long long v62 = v21;
      *(void *)&long long v63 = v64[0];
      *(void *)((char *)&v63 + 7) = *(void *)((char *)v64 + 7);
      HIBYTE(v63) = v22;
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v56.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_22:
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_33;
          }
          goto LABEL_23;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_22;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_33:
        operator delete(v55.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_24;
        }
        goto LABEL_34;
      }
LABEL_23:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_24;
      }
LABEL_34:
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
      if (v63 >= 0) {
        uint64_t v23 = (char *)&v62;
      }
      else {
        uint64_t v23 = (char *)v62;
      }
      if (sub_2194F61F0(&__stream, v23, "wb"))
      {
        BOOL v26 = 0;
        goto LABEL_70;
      }
      uint64_t v24 = *v6;
      uint64_t v25 = v6[1];
      if (*v6 != v25)
      {
        do
        {
          fwrite(v24, 4uLL, 0x1EuLL, __stream);
          v24 += 120;
        }
        while (v24 != v25);
      }
      ++v59;
      v6 += 3;
      if (v6 == a2) {
        goto LABEL_35;
      }
    }
    uint64_t v11 = v7;
    uint64_t v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v12 = v8 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v9;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    std::string::size_type v7 = v11;
LABEL_11:
    memcpy(p_dst, __s, v9);
    goto LABEL_12;
  }
LABEL_35:
  BOOL v26 = 1;
  unint64_t v59 = 1;
  double v27 = *a3;
  unint64_t v28 = a3[1];
  if (*a3 == v28)
  {
LABEL_70:
    uint64_t v49 = v57;
    uint64_t v57 = 0;
    if (!v49) {
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  uint64_t v29 = "/DesGenRetinaSecond";
  do
  {
    size_t v30 = strlen(__s);
    if (v30 > 0x7FFFFFFFFFFFFFF7) {
      sub_21947DF80();
    }
    std::string::size_type v31 = v30;
    if (v30 >= 0x17)
    {
      uint64_t v33 = v29;
      uint64_t v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17) {
        uint64_t v34 = v30 | 7;
      }
      uint64_t v35 = v34 + 1;
      uint64_t v32 = (std::string *)operator new(v34 + 1);
      __dst.__r_.__value_.__l.__size_ = v31;
      __dst.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      uint64_t v29 = v33;
LABEL_45:
      memcpy(v32, __s, v31);
      goto LABEL_46;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v30;
    uint64_t v32 = &__dst;
    if (v30) {
      goto LABEL_45;
    }
LABEL_46:
    v32->__r_.__value_.__s.__data_[v31] = 0;
    long long v36 = std::string::append(&__dst, v29);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    sub_2194D62CC(&v59, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v38 = &__p;
    }
    else {
      unint64_t v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v39 = __p.__r_.__value_.__l.__size_;
    }
    long long v40 = std::string::append(&v55, (const std::string::value_type *)v38, v39);
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::string v42 = std::string::append(&v56, "Out.rslt");
    char v43 = (void *)v42->__r_.__value_.__r.__words[0];
    v64[0] = v42->__r_.__value_.__l.__size_;
    *(void *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
    char v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v61) < 0) {
      operator delete(v60);
    }
    std::string v60 = v43;
    *(void *)&long long v61 = v64[0];
    *(void *)((char *)&v61 + 7) = *(void *)((char *)v64 + 7);
    HIBYTE(v61) = v44;
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v56.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_56:
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_67;
        }
        goto LABEL_57;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_56;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_67:
      operator delete(v55.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_58;
      }
      goto LABEL_68;
    }
LABEL_57:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_58;
    }
LABEL_68:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_58:
    if (v61 >= 0) {
      unint64_t v45 = (char *)&v60;
    }
    else {
      unint64_t v45 = (char *)v60;
    }
    int v46 = sub_2194F61F0(&v57, v45, "wb");
    BOOL v26 = v46 == 0;
    if (v46) {
      goto LABEL_70;
    }
    uint64_t v47 = *v27;
    uint64_t v48 = v27[1];
    if (*v27 != v48)
    {
      do
      {
        fwrite(v47, 4uLL, 0x2BuLL, v57);
        v47 += 172;
      }
      while (v47 != v48);
    }
    ++v59;
    v27 += 3;
  }
  while (v27 != v28);
  BOOL v26 = 1;
  uint64_t v49 = v57;
  uint64_t v57 = 0;
  if (v49) {
LABEL_71:
  }
    fclose(v49);
LABEL_72:
  long long v50 = __stream;
  __stream = 0;
  if (v50) {
    fclose(v50);
  }
  if (SHIBYTE(v61) < 0)
  {
    operator delete(v60);
    if ((SHIBYTE(v63) & 0x80000000) == 0) {
      return v26;
    }
LABEL_78:
    operator delete(v62);
    return v26;
  }
  if (SHIBYTE(v63) < 0) {
    goto LABEL_78;
  }
  return v26;
}

void sub_2194D471C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,FILE *a37,FILE *a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a37)
  {
    fclose(a37);
    int v46 = a38;
    if (a38)
    {
LABEL_8:
      fclose(v46);
      if (a45 < 0)
      {
LABEL_9:
        operator delete(__p);
        if (*(char *)(v45 - 121) < 0)
        {
LABEL_10:
          operator delete(*(void **)(v45 - 144));
          _Unwind_Resume(exception_object);
        }
LABEL_5:
        _Unwind_Resume(exception_object);
      }
LABEL_4:
      if (*(char *)(v45 - 121) < 0) {
        goto LABEL_10;
      }
      goto LABEL_5;
    }
  }
  else
  {
    int v46 = a38;
    if (a38) {
      goto LABEL_8;
    }
  }
  if (a45 < 0) {
    goto LABEL_9;
  }
  goto LABEL_4;
}

uint64_t sub_2194D4884(unsigned __int16 **a1, unsigned __int16 **a2, char *__s)
{
  v36[2] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  long long v35 = 0uLL;
  uint64_t v3 = 1;
  unint64_t v33 = 1;
  if (a1 == a2)
  {
LABEL_41:
    if (SHIBYTE(v35) < 0) {
      goto LABEL_42;
    }
    return v3;
  }
  size_t v6 = a1;
  std::string::size_type v7 = "/DesGenKPMem";
  do
  {
    size_t v8 = strlen(__s);
    if (v8 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21947DF80();
    }
    std::string::size_type v9 = v8;
    if (v8 >= 0x17)
    {
      uint64_t v11 = v7;
      uint64_t v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v12 = v8 | 7;
      }
      uint64_t v13 = v12 + 1;
      p_dst = (std::string *)operator new(v12 + 1);
      __dst.__r_.__value_.__l.__size_ = v9;
      __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      std::string::size_type v7 = v11;
LABEL_10:
      memcpy(p_dst, __s, v9);
      goto LABEL_11;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8;
    p_dst = &__dst;
    if (v8) {
      goto LABEL_10;
    }
LABEL_11:
    p_dst->__r_.__value_.__s.__data_[v9] = 0;
    std::string::size_type v14 = std::string::append(&__dst, v7);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_2194D62CC(&v33, &v29);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v16 = &v29;
    }
    else {
      long long v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v29.__r_.__value_.__l.__size_;
    }
    long long v18 = std::string::append(&__ptr, (const std::string::value_type *)v16, size);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = std::string::append(&v32, "Out.rslt");
    unint64_t v21 = (void *)v20->__r_.__value_.__r.__words[0];
    v36[0] = v20->__r_.__value_.__l.__size_;
    *(void *)((char *)v36 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
    char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }
    std::string __p = v21;
    *(void *)&long long v35 = v36[0];
    *(void *)((char *)&v35 + 7) = *(void *)((char *)v36 + 7);
    HIBYTE(v35) = v22;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v32.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_21:
        if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_36;
        }
        goto LABEL_22;
      }
    }
    else if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_36:
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_37;
    }
LABEL_22:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_37:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_23:
    v32.__r_.__value_.__r.__words[0] = 0;
    if (v35 >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if (sub_2194F61F0((FILE **)&v32, p_p, "wb")) {
      goto LABEL_38;
    }
    uint64_t v24 = *v6;
    uint64_t v25 = v6[1];
    if (*v6 != v25)
    {
      while (1)
      {
        __ptr.__r_.__value_.__r.__words[0] = 0;
        __ptr.__r_.__value_.__r.__words[0] = *v24 | (*((_DWORD *)v24 + 1) << 16) | ((unint64_t)*((unsigned __int8 *)v24 + 12) << 32) | ((unint64_t)*((unsigned __int8 *)v24 + 8) << 40) | ((unint64_t)(*((_DWORD *)v24 + 7) & 0x7FFF) << 48) | ((unint64_t)*((unsigned __int8 *)v24 + 24) << 63);
        if (fwrite(&__ptr, 1uLL, 8uLL, (FILE *)v32.__r_.__value_.__l.__data_) != 8) {
          break;
        }
        v24 += 64;
        if (v24 == v25) {
          goto LABEL_30;
        }
      }
LABEL_38:
      double v27 = (FILE *)v32.__r_.__value_.__r.__words[0];
      v32.__r_.__value_.__r.__words[0] = 0;
      if (v27) {
        fclose(v27);
      }
      uint64_t v3 = 0;
      goto LABEL_41;
    }
LABEL_30:
    ++v33;
    BOOL v26 = (FILE *)v32.__r_.__value_.__r.__words[0];
    v32.__r_.__value_.__r.__words[0] = 0;
    if (v26) {
      fclose(v26);
    }
    v6 += 3;
  }
  while (v6 != a2);
  uint64_t v3 = 1;
  if ((SHIBYTE(v35) & 0x80000000) == 0) {
    return v3;
  }
LABEL_42:
  operator delete(__p);
  return v3;
}

void sub_2194D4BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,FILE *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2194D4CA0(char **a1, char **a2, char *__s)
{
  v35[2] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  long long v34 = 0uLL;
  BOOL v3 = 1;
  __stream = 0;
  unint64_t v32 = 1;
  if (a1 == a2) {
    goto LABEL_37;
  }
  size_t v6 = a1;
  do
  {
    size_t v7 = strlen(__s);
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21947DF80();
    }
    std::string::size_type v8 = v7;
    if (v7 >= 0x17)
    {
      uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v10 = v7 | 7;
      }
      uint64_t v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v8;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_11:
      memcpy(p_dst, __s, v8);
      goto LABEL_12;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v7;
    p_dst = &__dst;
    if (v7) {
      goto LABEL_11;
    }
LABEL_12:
    p_dst->__r_.__value_.__s.__data_[v8] = 0;
    uint64_t v12 = std::string::append(&__dst, "/DesGenDescLong");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    sub_2194D62CC(&v32, &v27);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v14 = &v27;
    }
    else {
      std::string::size_type v14 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v27.__r_.__value_.__l.__size_;
    }
    long long v16 = std::string::append(&v29, (const std::string::value_type *)v14, size);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    long long v18 = std::string::append(&v30, "Out.rslt");
    long long v19 = (void *)v18->__r_.__value_.__r.__words[0];
    v35[0] = v18->__r_.__value_.__l.__size_;
    *(void *)((char *)v35 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v34) < 0) {
      operator delete(__p);
    }
    std::string __p = v19;
    *(void *)&long long v34 = v35[0];
    *(void *)((char *)&v34 + 7) = *(void *)((char *)v35 + 7);
    HIBYTE(v34) = v20;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_22:
        if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_23;
        }
        goto LABEL_33;
      }
    }
    else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_34;
      }
      goto LABEL_24;
    }
LABEL_33:
    operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_34:
    }
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
    if (v34 >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    int v22 = sub_2194F61F0(&__stream, p_p, "wb");
    BOOL v3 = v22 == 0;
    if (v22) {
      break;
    }
    uint64_t v23 = *v6;
    uint64_t v24 = v6[1];
    if (*v6 != v24)
    {
      do
      {
        fwrite(v23, 4uLL, 0x10uLL, __stream);
        v23 += 64;
      }
      while (v23 != v24);
    }
    ++v32;
    v6 += 3;
  }
  while (v6 != a2);
  uint64_t v25 = __stream;
  __stream = 0;
  if (v25) {
    fclose(v25);
  }
LABEL_37:
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  return v3;
}

void sub_2194D4F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,FILE *a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a35)
  {
    fclose(a35);
    if (a42 < 0)
    {
LABEL_6:
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  else if (a42 < 0)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2194D5070(char **a1, char **a2, char *__s)
{
  v35[2] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  long long v34 = 0uLL;
  BOOL v3 = 1;
  __stream = 0;
  unint64_t v32 = 1;
  if (a1 == a2) {
    goto LABEL_37;
  }
  size_t v6 = a1;
  do
  {
    size_t v7 = strlen(__s);
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21947DF80();
    }
    std::string::size_type v8 = v7;
    if (v7 >= 0x17)
    {
      uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v10 = v7 | 7;
      }
      uint64_t v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v8;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_11:
      memcpy(p_dst, __s, v8);
      goto LABEL_12;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v7;
    p_dst = &__dst;
    if (v7) {
      goto LABEL_11;
    }
LABEL_12:
    p_dst->__r_.__value_.__s.__data_[v8] = 0;
    uint64_t v12 = std::string::append(&__dst, "/DesGenDescShort");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    sub_2194D62CC(&v32, &v27);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v14 = &v27;
    }
    else {
      std::string::size_type v14 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v27.__r_.__value_.__l.__size_;
    }
    long long v16 = std::string::append(&v29, (const std::string::value_type *)v14, size);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    long long v18 = std::string::append(&v30, "Out.rslt");
    long long v19 = (void *)v18->__r_.__value_.__r.__words[0];
    v35[0] = v18->__r_.__value_.__l.__size_;
    *(void *)((char *)v35 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v34) < 0) {
      operator delete(__p);
    }
    std::string __p = v19;
    *(void *)&long long v34 = v35[0];
    *(void *)((char *)&v34 + 7) = *(void *)((char *)v35 + 7);
    HIBYTE(v34) = v20;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_22:
        if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_23;
        }
        goto LABEL_33;
      }
    }
    else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_34;
      }
      goto LABEL_24;
    }
LABEL_33:
    operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_34:
    }
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
    if (v34 >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    int v22 = sub_2194F61F0(&__stream, p_p, "wb");
    BOOL v3 = v22 == 0;
    if (v22) {
      break;
    }
    uint64_t v23 = *v6;
    uint64_t v24 = v6[1];
    if (*v6 != v24)
    {
      do
      {
        fwrite(v23, 4uLL, 8uLL, __stream);
        v23 += 64;
      }
      while (v23 != v24);
    }
    ++v32;
    v6 += 3;
  }
  while (v6 != a2);
  uint64_t v25 = __stream;
  __stream = 0;
  if (v25) {
    fclose(v25);
  }
LABEL_37:
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  return v3;
}

void sub_2194D5350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,FILE *a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a35)
  {
    fclose(a35);
    if (a42 < 0)
    {
LABEL_6:
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  else if (a42 < 0)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2194D5440(const void **a1, uint64_t a2, char *__s)
{
  __stream = 0;
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21947DF80();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6) {
LABEL_8:
  }
    memcpy(p_dst, __s, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  uint64_t v11 = std::string::append(&__dst, "/DesGenHistogramOut.rslt");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v21 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (v21 >= 0) {
    long long v13 = (char *)__p;
  }
  else {
    long long v13 = (char *)__p[0];
  }
  int v14 = sub_2194F61F0(&__stream, v13, "wb");
  if (!v14)
  {
    uint64_t v15 = 64;
    do
    {
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      fwrite(&__dst, 4uLL, 1uLL, __stream);
      --v15;
    }
    while (v15);
    if ((unint64_t)(a2 - 1) >= 2)
    {
      uint64_t v16 = a2 - 2;
      do
      {
        fwrite(*a1, 4uLL, 0x40uLL, __stream);
        a1 += 3;
        --v16;
      }
      while (v16);
    }
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  long long v17 = __stream;
  __stream = 0;
  if (v17) {
    fclose(v17);
  }
  return v14 == 0;
}

void sub_2194D55E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,FILE *a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a22) {
    fclose(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2194D5634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5, char *__s)
{
  v68[2] = *MEMORY[0x263EF8340];
  uint64_t result = sub_2194D17D8(*(void **)(a1 + 48), __s);
  if (!result) {
    return result;
  }
  uint64_t result = sub_2194D1C44(*(void **)(a1 + 56), __s);
  if (!result) {
    return result;
  }
  uint64_t result = sub_2194D20B0(*(void *)(a1 + 64), __s);
  if (!result) {
    return result;
  }
  uint64_t result = sub_2194D24E4(*(void **)(a2 + 248), __s);
  if (!result) {
    return result;
  }
  uint64_t v13 = *(void *)(a2 + 256);
  uint64_t v15 = *(uint64_t **)(v13 + 200);
  int v14 = *(uint64_t **)(v13 + 208);
  std::string __p = 0;
  long long v67 = 0uLL;
  int v16 = 1;
  unint64_t v65 = 1;
  std::string v60 = v14;
  if (v15 == v14)
  {
LABEL_44:
    if (SHIBYTE(v67) < 0) {
      goto LABEL_45;
    }
    goto LABEL_46;
  }
  do
  {
    size_t v17 = strlen(__s);
    if (v17 > 0x7FFFFFFFFFFFFFF7) {
      sub_21947DF80();
    }
    std::string::size_type v18 = v17;
    if (v17 >= 0x17)
    {
      uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17) {
        uint64_t v20 = v17 | 7;
      }
      uint64_t v21 = v20 + 1;
      p_dst = (std::string *)operator new(v20 + 1);
      __dst.__r_.__value_.__l.__size_ = v18;
      __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_13:
      memcpy(p_dst, __s, v18);
      goto LABEL_14;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v17;
    p_dst = &__dst;
    if (v17) {
      goto LABEL_13;
    }
LABEL_14:
    p_dst->__r_.__value_.__s.__data_[v18] = 0;
    int v22 = std::string::append(&__dst, "/DesGenKPC");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    sub_2194D62CC(&v65, &v61);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v24 = &v61;
    }
    else {
      uint64_t v24 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v61.__r_.__value_.__l.__size_;
    }
    BOOL v26 = std::string::append(&__ptr, (const std::string::value_type *)v24, size);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    unint64_t v28 = std::string::append(&v64, "Out.rslt");
    std::string v29 = (void *)v28->__r_.__value_.__r.__words[0];
    v68[0] = v28->__r_.__value_.__l.__size_;
    *(void *)((char *)v68 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
    char v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v67) < 0) {
      operator delete(__p);
    }
    std::string __p = v29;
    *(void *)&long long v67 = v68[0];
    *(void *)((char *)&v67 + 7) = *(void *)((char *)v68 + 7);
    HIBYTE(v67) = v30;
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v64.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_24:
        if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_39;
        }
        goto LABEL_25;
      }
    }
    else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_39:
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_26;
      }
      goto LABEL_40;
    }
LABEL_25:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
LABEL_40:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_26:
    v64.__r_.__value_.__r.__words[0] = 0;
    if (v67 >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if (sub_2194F61F0((FILE **)&v64, p_p, "wb")) {
      goto LABEL_41;
    }
    uint64_t v32 = *v15;
    uint64_t v33 = v15[1];
    if (*v15 != v33)
    {
      while (1)
      {
        __ptr.__r_.__value_.__r.__words[0] = 0;
        __ptr.__r_.__value_.__r.__words[0] = *(_DWORD *)v32 & 0xFFF | ((*(_DWORD *)(v32 + 4) & 0x1FFF) << 12) & 0xE1FFFFFF | ((*(_DWORD *)(v32 + 8) & 0xF) << 25) | ((unint64_t)*(unsigned __int8 *)(v32 + 12) << 45) | ((unint64_t)*(unsigned __int16 *)(v32 + 16) << 29);
        if (fwrite(&__ptr, 8uLL, 1uLL, (FILE *)v64.__r_.__value_.__l.__data_) != 1) {
          break;
        }
        v32 += 20;
        if (v32 == v33) {
          goto LABEL_33;
        }
      }
LABEL_41:
      long long v35 = (FILE *)v64.__r_.__value_.__r.__words[0];
      v64.__r_.__value_.__r.__words[0] = 0;
      if (v35) {
        fclose(v35);
      }
      int v16 = 0;
      goto LABEL_44;
    }
LABEL_33:
    ++v65;
    long long v34 = (FILE *)v64.__r_.__value_.__r.__words[0];
    v64.__r_.__value_.__r.__words[0] = 0;
    if (v34) {
      fclose(v34);
    }
    v15 += 3;
  }
  while (v15 != v60);
  int v16 = 1;
  if ((SHIBYTE(v67) & 0x80000000) == 0) {
    goto LABEL_46;
  }
LABEL_45:
  operator delete(__p);
LABEL_46:
  if (!v16) {
    return 0;
  }
  uint64_t v36 = *(void *)(a3 + 8);
  unint64_t v38 = *(uint64_t **)(v36 + 200);
  long long v37 = *(uint64_t **)(v36 + 208);
  std::string __p = 0;
  long long v67 = 0uLL;
  int v39 = 1;
  unint64_t v65 = 1;
  if (v38 == v37)
  {
LABEL_86:
    if (SHIBYTE(v67) < 0) {
      goto LABEL_87;
    }
    goto LABEL_88;
  }
  while (2)
  {
    size_t v40 = strlen(__s);
    if (v40 > 0x7FFFFFFFFFFFFFF7) {
      sub_21947DF80();
    }
    std::string::size_type v41 = v40;
    if (v40 >= 0x17)
    {
      uint64_t v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17) {
        uint64_t v43 = v40 | 7;
      }
      uint64_t v44 = v43 + 1;
      std::string v42 = (std::string *)operator new(v43 + 1);
      __dst.__r_.__value_.__l.__size_ = v41;
      __dst.__r_.__value_.__r.__words[2] = v44 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      goto LABEL_55;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v40;
    std::string v42 = &__dst;
    if (v40) {
LABEL_55:
    }
      memcpy(v42, __s, v41);
    v42->__r_.__value_.__s.__data_[v41] = 0;
    uint64_t v45 = std::string::append(&__dst, "/DesGenKP0Mem");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    sub_2194D62CC(&v65, &v61);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v47 = &v61;
    }
    else {
      uint64_t v47 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v48 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v48 = v61.__r_.__value_.__l.__size_;
    }
    uint64_t v49 = std::string::append(&__ptr, (const std::string::value_type *)v47, v48);
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    double v51 = std::string::append(&v64, "Out.rslt");
    uint64_t v52 = (void *)v51->__r_.__value_.__r.__words[0];
    v68[0] = v51->__r_.__value_.__l.__size_;
    *(void *)((char *)v68 + 7) = *(std::string::size_type *)((char *)&v51->__r_.__value_.__r.__words[1] + 7);
    char v53 = HIBYTE(v51->__r_.__value_.__r.__words[2]);
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v67) < 0) {
      operator delete(__p);
    }
    std::string __p = v52;
    *(void *)&long long v67 = v68[0];
    *(void *)((char *)&v67 + 7) = *(void *)((char *)v68 + 7);
    HIBYTE(v67) = v53;
    if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_66;
      }
LABEL_80:
      operator delete(v61.__r_.__value_.__l.__data_);
      if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_81;
      }
LABEL_67:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_68;
      }
LABEL_82:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_68;
    }
    operator delete(v64.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_80;
    }
LABEL_66:
    if ((SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_67;
    }
LABEL_81:
    operator delete(__ptr.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_82;
    }
LABEL_68:
    __ptr.__r_.__value_.__r.__words[0] = 0;
    if (v67 >= 0) {
      uint64_t v54 = (char *)&__p;
    }
    else {
      uint64_t v54 = (char *)__p;
    }
    if (sub_2194F61F0((FILE **)&__ptr, v54, "wb")) {
      goto LABEL_83;
    }
    uint64_t v55 = *v38;
    uint64_t v56 = v38[1];
    if (*v38 != v56)
    {
      while (1)
      {
        LODWORD(v64.__r_.__value_.__r.__words[1]) = 0;
        v64.__r_.__value_.__r.__words[0] = 0;
        int v57 = *(_DWORD *)(v55 + 28) & 0x7FFF | ((*(_DWORD *)(v55 + 32) & 0x1FFF) << 16);
        v64.__r_.__value_.__r.__words[0] = *(_DWORD *)v55 & 0x3FFFFLL | ((unint64_t)(*(_DWORD *)(v55 + 4) & 0x7FFFF) << 32) | ((unint64_t)*(unsigned __int8 *)(v55 + 12) << 52) | ((unint64_t)*(_DWORD *)(v55 + 8) << 23) | ((unint64_t)(*(_DWORD *)(v55 + 20) & 7) << 60) | ((unint64_t)*(unsigned __int8 *)(v55 + 24) << 63);
        LODWORD(v64.__r_.__value_.__r.__words[1]) = v57;
        if (fwrite(&v64, 1uLL, 0xCuLL, (FILE *)__ptr.__r_.__value_.__l.__data_) != 12) {
          break;
        }
        v55 += 128;
        if (v55 == v56) {
          goto LABEL_75;
        }
      }
LABEL_83:
      unint64_t v59 = (FILE *)__ptr.__r_.__value_.__r.__words[0];
      __ptr.__r_.__value_.__r.__words[0] = 0;
      if (v59) {
        fclose(v59);
      }
      int v39 = 0;
      goto LABEL_86;
    }
LABEL_75:
    ++v65;
    int v58 = (FILE *)__ptr.__r_.__value_.__r.__words[0];
    __ptr.__r_.__value_.__r.__words[0] = 0;
    if (v58) {
      fclose(v58);
    }
    v38 += 3;
    if (v38 != v37) {
      continue;
    }
    break;
  }
  int v39 = 1;
  if ((SHIBYTE(v67) & 0x80000000) == 0) {
    goto LABEL_88;
  }
LABEL_87:
  operator delete(__p);
LABEL_88:
  if (!v39) {
    return 0;
  }
  uint64_t result = sub_2194D2950(*(double ***)(a4 + 272), *(double ***)(a4 + 280), (double ***)(a4 + 296), __s);
  if (result)
  {
    uint64_t result = sub_2194D37AC((void *)(a4 + 368), *(uint64_t **)(a4 + 320), *(uint64_t **)(a4 + 328), (uint64_t **)(a4 + 344), __s);
    if (result)
    {
      uint64_t result = sub_2194D4180(*(char ***)(a4 + 224), *(char ***)(a4 + 232), (char ***)(a4 + 248), __s);
      if (result)
      {
        uint64_t result = sub_2194D5E98(*(uint64_t **)(a4 + 368), *(uint64_t **)(a4 + 376), __s);
        if (result)
        {
          uint64_t result = sub_2194D4CA0(*(char ***)(a4 + 392), *(char ***)(a4 + 400), __s);
          if (result)
          {
            uint64_t result = sub_2194D5070(*(char ***)(a4 + 416), *(char ***)(a4 + 424), __s);
            if (result) {
              return sub_2194D5440(a5, 0x8E38E38E38E38E39* ((uint64_t)(*(void *)(*(void *)(a1 + 48) + 56) - *(void *)(*(void *)(a1 + 48) + 48)) >> 4), __s);
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_2194D5D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,FILE *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2194D5E98(uint64_t *a1, uint64_t *a2, char *__s)
{
  v37[2] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  long long v36 = 0uLL;
  uint64_t v3 = 1;
  unint64_t v34 = 1;
  if (a1 == a2)
  {
LABEL_41:
    if (SHIBYTE(v36) < 0) {
      goto LABEL_42;
    }
    return v3;
  }
  size_t v6 = a1;
  std::string::size_type v7 = "/DesGenKPMem";
  do
  {
    size_t v8 = strlen(__s);
    if (v8 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21947DF80();
    }
    std::string::size_type v9 = v8;
    if (v8 >= 0x17)
    {
      uint64_t v11 = v7;
      uint64_t v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v12 = v8 | 7;
      }
      uint64_t v13 = v12 + 1;
      p_dst = (std::string *)operator new(v12 + 1);
      __dst.__r_.__value_.__l.__size_ = v9;
      __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      std::string::size_type v7 = v11;
LABEL_10:
      memcpy(p_dst, __s, v9);
      goto LABEL_11;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8;
    p_dst = &__dst;
    if (v8) {
      goto LABEL_10;
    }
LABEL_11:
    p_dst->__r_.__value_.__s.__data_[v9] = 0;
    int v14 = std::string::append(&__dst, v7);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_2194D62CC(&v34, &v30);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v16 = &v30;
    }
    else {
      int v16 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v30.__r_.__value_.__l.__size_;
    }
    std::string::size_type v18 = std::string::append(&v32, (const std::string::value_type *)v16, size);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = std::string::append(&__ptr, "Out.rslt");
    uint64_t v21 = (void *)v20->__r_.__value_.__r.__words[0];
    v37[0] = v20->__r_.__value_.__l.__size_;
    *(void *)((char *)v37 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
    char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v36) < 0) {
      operator delete(__p);
    }
    std::string __p = v21;
    *(void *)&long long v36 = v37[0];
    *(void *)((char *)&v36 + 7) = *(void *)((char *)v37 + 7);
    HIBYTE(v36) = v22;
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_21:
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_36;
        }
        goto LABEL_22;
      }
    }
    else if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_36:
      operator delete(v32.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_37;
    }
LABEL_22:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_37:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_23:
    v32.__r_.__value_.__r.__words[0] = 0;
    if (v36 >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if (sub_2194F61F0((FILE **)&v32, p_p, "wb")) {
      goto LABEL_38;
    }
    uint64_t v24 = *v6;
    uint64_t v25 = v6[1];
    if (*v6 != v25)
    {
      while (1)
      {
        LODWORD(__ptr.__r_.__value_.__r.__words[1]) = 0;
        __ptr.__r_.__value_.__r.__words[0] = 0;
        int v26 = *(_DWORD *)(v24 + 28) & 0x7FFF | ((*(_DWORD *)(v24 + 32) & 0x1FFF) << 16);
        __ptr.__r_.__value_.__r.__words[0] = *(_DWORD *)v24 & 0x3FFFFLL | ((unint64_t)(*(_DWORD *)(v24 + 4) & 0x7FFFF) << 32) | ((unint64_t)*(unsigned __int8 *)(v24 + 12) << 52) | ((unint64_t)*(_DWORD *)(v24 + 8) << 23) | ((unint64_t)(*(_DWORD *)(v24 + 20) & 7) << 60) | ((unint64_t)*(unsigned __int8 *)(v24 + 24) << 63);
        LODWORD(__ptr.__r_.__value_.__r.__words[1]) = v26;
        if (fwrite(&__ptr, 1uLL, 0xCuLL, (FILE *)v32.__r_.__value_.__l.__data_) != 12) {
          break;
        }
        v24 += 128;
        if (v24 == v25) {
          goto LABEL_30;
        }
      }
LABEL_38:
      unint64_t v28 = (FILE *)v32.__r_.__value_.__r.__words[0];
      v32.__r_.__value_.__r.__words[0] = 0;
      if (v28) {
        fclose(v28);
      }
      uint64_t v3 = 0;
      goto LABEL_41;
    }
LABEL_30:
    ++v34;
    long long v27 = (FILE *)v32.__r_.__value_.__r.__words[0];
    v32.__r_.__value_.__r.__words[0] = 0;
    if (v27) {
      fclose(v27);
    }
    v6 += 3;
  }
  while (v6 != a2);
  uint64_t v3 = 1;
  if ((SHIBYTE(v36) & 0x80000000) == 0) {
    return v3;
  }
LABEL_42:
  operator delete(__p);
  return v3;
}

void sub_2194D61F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,FILE *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2194D62CC(unint64_t *a1@<X0>, std::string *a2@<X8>)
{
  std::string __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::to_string(&v12, *a1);
  uint64_t v3 = sub_2194D6478(&__p, (uint64_t)&v12);
  uint64_t v10 = v3;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    uint64_t v3 = v10;
  }
  *((unsigned char *)&v12.__r_.__value_.__s + 23) = 0;
  v12.__r_.__value_.__s.__data_[0] = 0;
  sub_2194D65E4((uint64_t)__p, (uint64_t)v3, (uint64_t)&v12, a2, v4, v5);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  size_t v6 = (char *)__p;
  if (__p)
  {
    std::string::size_type v7 = (void **)v10;
    size_t v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != (void **)v6);
      size_t v8 = __p;
    }
    uint64_t v10 = v6;
    operator delete(v8);
  }
}

void sub_2194D63C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_2194D6404((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_2194D6404((void **)&a9);
  _Unwind_Resume(a1);
}

void **sub_2194D6404(void **a1)
{
  unint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    int64x2_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      int64x2_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_2194D6478(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_219486AE4();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_219486AFC();
    }
    std::string::size_type v7 = (char *)operator new(24 * v6);
  }
  else
  {
    std::string::size_type v7 = 0;
  }
  size_t v8 = &v7[24 * v3];
  std::string::size_type v9 = &v7[24 * v6];
  *(_OWORD *)size_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v10 = v8 + 24;
  uint64_t v11 = (char *)*a1;
  std::string v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12) {
      return v10;
    }
    goto LABEL_20;
  }
  do
  {
    long long v13 = *(_OWORD *)(v12 - 24);
    *((void *)v8 - 1) = *((void *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((void *)v12 - 2) = 0;
    *((void *)v12 - 1) = 0;
    *((void *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  int v14 = (char *)*a1;
  std::string v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0) {
        operator delete(*((void **)v12 - 3));
      }
      v12 -= 24;
    }
    while (v12 != v14);
    std::string v12 = v14;
  }
  if (v12) {
LABEL_20:
  }
    operator delete(v12);
  return v10;
}

void sub_2194D65E4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>, int64x2_t a5@<Q3>, int8x16_t a6@<Q5>)
{
  int64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  }
  unint64_t v12 = v11 - 1;
  uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(a3 + 8);
  }
  unint64_t v14 = v13 * v12;
  uint64_t v15 = a2 - a1;
  if (a2 == a1)
  {
    uint64_t v16 = 0;
  }
  else
  {
    if ((unint64_t)(v15 - 24) >= 0x60)
    {
      unint64_t v18 = (v15 - 24) / 0x18uLL + 1;
      uint64_t v19 = v18 & 3;
      if ((v18 & 3) == 0) {
        uint64_t v19 = 4;
      }
      unint64_t v20 = v18 - v19;
      uint64_t v17 = a1 + 24 * v20;
      uint64_t v21 = (unsigned __int8 *)(a1 + 47);
      int64x2_t v22 = 0uLL;
      v23.i64[0] = 255;
      v23.i64[1] = 255;
      int64x2_t v24 = 0uLL;
      do
      {
        a5.i8[0] = *(v21 - 24);
        a5.i8[4] = *v21;
        a6.i8[0] = v21[24];
        a6.i8[4] = v21[48];
        uint64_t v25 = (const double *)(v21 - 39);
        int v26 = (const double *)(v21 + 9);
        unsigned long long v27 = (unsigned __int128)vld3q_f64(v25);
        unsigned long long v28 = (unsigned __int128)vld3q_f64(v26);
        int32x2_t v29 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a5.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v29.i32[0];
        v30.i64[1] = v29.i32[1];
        int8x16_t v31 = v30;
        int32x2_t v32 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v32.i32[0];
        v30.i64[1] = v32.i32[1];
        int8x16_t v33 = v30;
        v30.i64[0] = a5.u32[0];
        v30.i64[1] = a5.u32[1];
        int8x16_t v34 = vbicq_s8(v30, v31);
        v30.i64[0] = a6.u32[0];
        v30.i64[1] = a6.u32[1];
        a5 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v27, v31), vandq_s8(v34, v23));
        a6 = vandq_s8((int8x16_t)v28, v33);
        int64x2_t v22 = vaddq_s64(a5, v22);
        int64x2_t v24 = vaddq_s64((int64x2_t)vorrq_s8(a6, vandq_s8(vbicq_s8(v30, v33), v23)), v24);
        v21 += 96;
        v20 -= 4;
      }
      while (v20);
      uint64_t v16 = vaddvq_s64(vaddq_s64(v24, v22));
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = a1;
    }
    do
    {
      uint64_t v35 = *(unsigned __int8 *)(v17 + 23);
      if ((v35 & 0x80u) != 0) {
        uint64_t v35 = *(void *)(v17 + 8);
      }
      v16 += v35;
      v17 += 24;
    }
    while (v17 != a2);
  }
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a4, v16 + v14);
  if (v15 >= 1)
  {
    int v36 = *(char *)(a1 + 23);
    long long v37 = v36 >= 0 ? (const std::string::value_type *)a1 : *(const std::string::value_type **)a1;
    std::string::size_type v38 = v36 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(void *)(a1 + 8);
    std::string::append(a4, v37, v38);
    if ((unint64_t)v10 >= 2)
    {
      for (uint64_t i = a1 + 24; i != a2; i += 24)
      {
        int v40 = *(char *)(a3 + 23);
        if (v40 >= 0) {
          std::string::size_type v41 = (const std::string::value_type *)a3;
        }
        else {
          std::string::size_type v41 = *(const std::string::value_type **)a3;
        }
        if (v40 >= 0) {
          std::string::size_type v42 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          std::string::size_type v42 = *(void *)(a3 + 8);
        }
        std::string::append(a4, v41, v42);
        int v43 = *(char *)(i + 23);
        if (v43 >= 0) {
          uint64_t v44 = (const std::string::value_type *)i;
        }
        else {
          uint64_t v44 = *(const std::string::value_type **)i;
        }
        if (v43 >= 0) {
          std::string::size_type v45 = *(unsigned __int8 *)(i + 23);
        }
        else {
          std::string::size_type v45 = *(void *)(i + 8);
        }
        std::string::append(a4, v44, v45);
      }
    }
  }
}

void sub_2194D680C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2194D6830(uint64_t result, int a2)
{
  *(void *)uint64_t result = &unk_26CAD6990;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_2194D6854(uint64_t a1, void *a2)
{
  unint64_t v2 = a2;
  uint64_t v102 = *MEMORY[0x263EF8340];
  if (*(int *)(a1 + 8) > 2147446783) {
    LODWORD(v3) = 1;
  }
  else {
    LODWORD(v3) = *(_DWORD *)(a1 + 8);
  }
  uint64_t v4 = *a2;
  uint64_t v5 = -1030792151 * ((a2[1] - *a2) >> 3) - 1;
  unint64_t v6 = (void **)operator new(0x180uLL);
  std::string::size_type v7 = v6;
  long long v8 = 0uLL;
  *(_OWORD *)unint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  *((_OWORD *)v6 + 10) = 0u;
  *((_OWORD *)v6 + 11) = 0u;
  *((_OWORD *)v6 + 12) = 0u;
  *((_OWORD *)v6 + 13) = 0u;
  *((_OWORD *)v6 + 14) = 0u;
  *((_OWORD *)v6 + 15) = 0u;
  *((_OWORD *)v6 + 16) = 0u;
  *((_OWORD *)v6 + 17) = 0u;
  *((_OWORD *)v6 + 18) = 0u;
  *((_OWORD *)v6 + 19) = 0u;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  if (!v5) {
    goto LABEL_43;
  }
  uint64_t v9 = 0;
  unint64_t v96 = v6;
  uint64_t v97 = v5;
  long long v95 = v2;
  do
  {
    uint64_t v11 = *v2 + 200 * v9;
    if (*(_DWORD *)(v11 + 16) == 0x3FFF) {
      goto LABEL_8;
    }
    unsigned int v12 = (*(_DWORD *)(v11 + 12) >> 5) + 8 * *(unsigned __int8 *)(v11 + 24);
    uint64_t v13 = &v7[3 * v12];
    unint64_t v14 = (int64x2_t *)*v13;
    uint64_t v16 = (uint64_t *)(v13 + 1);
    uint64_t v15 = (unint64_t *)v13[1];
    unint64_t v17 = v9 >> 5;
    if (*v13 == v15) {
      goto LABEL_20;
    }
    unint64_t v18 = (char *)v15 - (char *)v14 - 8;
    if (v18 >= 0x18)
    {
      uint64_t v21 = (v18 >> 3) + 1;
      unint64_t v20 = (unint64_t *)v14 + (v21 & 0x3FFFFFFFFFFFFFFCLL);
      int64x2_t v22 = vdupq_n_s64(v17);
      int8x16_t v23 = v14 + 1;
      int64x2_t v24 = 0uLL;
      uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      int64x2_t v26 = 0uLL;
      do
      {
        int64x2_t v24 = vsubq_s64(v24, vceqq_s64(v23[-1], v22));
        int64x2_t v26 = vsubq_s64(v26, vceqq_s64(*v23, v22));
        v23 += 2;
        v25 -= 4;
      }
      while (v25);
      uint64_t v19 = vaddvq_s64(vaddq_s64(v26, v24));
      if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v19 = 0;
      unint64_t v20 = (unint64_t *)*v13;
    }
    do
    {
      uint64_t v27 = *v20++;
      if (v27 == v17) {
        ++v19;
      }
    }
    while (v20 != v15);
LABEL_19:
    if (!v19)
    {
LABEL_20:
      unsigned long long v28 = &v7[3 * v12];
      unint64_t v31 = (unint64_t)v28[2];
      int32x2_t v29 = v28 + 2;
      unint64_t v30 = v31;
      if ((unint64_t)v15 >= v31)
      {
        long long v98 = (uint64_t *)(v13 + 1);
        uint64_t v32 = ((char *)v15 - (char *)v14) >> 3;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61) {
          sub_219486AE4();
        }
        uint64_t v34 = v30 - (void)v14;
        if (v34 >> 2 > v33) {
          unint64_t v33 = v34 >> 2;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          if (v35 >> 61) {
            sub_219486AFC();
          }
          int v36 = v29;
          long long v37 = (char *)v13;
          unint64_t v38 = v35;
          int v39 = operator new(8 * v35);
          long long v8 = 0uLL;
          uint64_t v13 = (void **)v37;
          int32x2_t v29 = v36;
          unint64_t v35 = v38;
          int v40 = (unint64_t *)&v39[8 * v32];
          *int v40 = v17;
          uint64_t v10 = (uint64_t)(v40 + 1);
          if (v14 != (int64x2_t *)v15)
          {
LABEL_30:
            unint64_t v41 = (char *)(v15 - 1) - (char *)v14;
            if (v41 < 0x58)
            {
              unint64_t v2 = v95;
              std::string::size_type v7 = v96;
              uint64_t v5 = v97;
              goto LABEL_38;
            }
            unint64_t v2 = v95;
            std::string::size_type v7 = v96;
            uint64_t v5 = v97;
            if ((unint64_t)((char *)v14 - v39) < 0x20) {
              goto LABEL_103;
            }
            uint64_t v42 = (v41 >> 3) + 1;
            uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v44 = &v15[v43 / 0xFFFFFFFFFFFFFFF8];
            int v40 = (unint64_t *)((char *)v40 - v43);
            std::string::size_type v45 = &v39[8 * v32 - 16];
            long long v46 = v15 - 2;
            uint64_t v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v48 = *(_OWORD *)v46;
              *(v45 - 1) = *((_OWORD *)v46 - 1);
              *std::string::size_type v45 = v48;
              v45 -= 2;
              v46 -= 4;
              v47 -= 4;
            }
            while (v47);
            uint64_t v15 = v44;
            if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_103:
              do
              {
LABEL_38:
                unint64_t v49 = *--v15;
                *--int v40 = v49;
              }
              while (v15 != (unint64_t *)v14);
            }
LABEL_39:
            *uint64_t v13 = v40;
            uint64_t v16 = v98;
            *long long v98 = v10;
            *int32x2_t v29 = &v39[8 * v35];
            if (v14)
            {
              operator delete(v14);
              long long v8 = 0uLL;
            }
LABEL_7:
            *uint64_t v16 = v10;
            goto LABEL_8;
          }
        }
        else
        {
          int v39 = 0;
          int v40 = (unint64_t *)(8 * v32);
          *(void *)(8 * v32) = v17;
          uint64_t v10 = 8 * v32 + 8;
          if (v14 != (int64x2_t *)v15) {
            goto LABEL_30;
          }
        }
        unint64_t v2 = v95;
        std::string::size_type v7 = v96;
        uint64_t v5 = v97;
        goto LABEL_39;
      }
      *uint64_t v15 = v17;
      uint64_t v10 = (uint64_t)(v15 + 1);
      goto LABEL_7;
    }
LABEL_8:
    ++v9;
  }
  while (v9 != v5);
  uint64_t v4 = *v2;
LABEL_43:
  for (uint64_t i = 0; i != 16; ++i)
  {
    int v101 = 0;
    long long v99 = v8;
    long long v100 = v8;
    double v51 = &v7[3 * i];
    uint64_t v52 = *v51;
    char v53 = v51[1];
    if (v52 == v53)
    {
      int v66 = 0;
      int v65 = 0;
      int v64 = 0;
      int v62 = 0;
      int v63 = 0;
      int v60 = 0;
      int v61 = 0;
      int v54 = 0;
      int v67 = 0;
    }
    else
    {
      int v54 = 0;
      uint64_t v55 = v52;
      do
      {
LABEL_47:
        uint64_t v56 = 0;
        uint64_t v57 = 32 * *v55;
        do
        {
          uint64_t v58 = v4 + 200 * (v57 + v56);
          if (*(_DWORD *)(v58 + 16) == 0x3FFF)
          {
            v54 += v56;
            if (++v55 == v53) {
              goto LABEL_51;
            }
            goto LABEL_47;
          }
          uint64_t v59 = 4 * (*(_DWORD *)(v58 + 20) + 1);
          ++*(_DWORD *)((char *)&v99 + v59);
          ++v56;
        }
        while (v56 != 32);
        v54 += 32;
        ++v55;
      }
      while (v55 != v53);
LABEL_51:
      int v61 = DWORD2(v99);
      int v60 = HIDWORD(v99);
      int v63 = v100;
      int v62 = DWORD1(v100);
      int v64 = DWORD2(v100);
      int v65 = HIDWORD(v100);
      int v66 = v101;
      int v67 = DWORD1(v99) + v99;
    }
    DWORD1(v99) = v67;
    DWORD2(v99) = v61 + v67;
    HIDWORD(v99) = v60 + v61 + v67;
    LODWORD(v100) = v63 + HIDWORD(v99);
    DWORD1(v100) = v62 + v63 + HIDWORD(v99);
    DWORD2(v100) = v64 + DWORD1(v100);
    HIDWORD(v100) = v65 + v64 + DWORD1(v100);
    int v101 = v66 + HIDWORD(v100);
    if (v52 == v53)
    {
      int v69 = 0;
    }
    else
    {
      int v68 = 0;
      do
      {
        uint64_t v70 = 0;
        uint64_t v71 = 32 * *v52;
        int v69 = v68 + 32;
        while (1)
        {
          uint64_t v72 = v4 + 200 * (v71 + v70);
          if (*(_DWORD *)(v72 + 16) == 0x3FFF) {
            break;
          }
          uint64_t v73 = v4 + 200 * (v71 + v70);
          int v75 = *(_DWORD *)(v73 + 128);
          long long v74 = (_DWORD *)(v73 + 128);
          if (!v75)
          {
            uint64_t v76 = 4 * *(unsigned int *)(v72 + 20);
            int v77 = *(_DWORD *)((char *)&v99 + v76);
            *long long v74 = 3 * v77 + v3;
            *(_DWORD *)((char *)&v99 + v76) = v77 + 1;
          }
          if (++v70 == 32) {
            goto LABEL_56;
          }
        }
        int v69 = v68 + v70;
LABEL_56:
        ++v52;
        int v68 = v69;
      }
      while (v52 != v53);
    }
    if (v54 != v69)
    {
      sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/DescriptorTidAssignment.cpp", 106, "total_count == assigned_tids && \"total count should be same\"", (void (*)(void *))sub_2194FF9C0);
      abort();
    }
    uint64_t v3 = (3 * v54 + v3);
  }
  long long v78 = v7[45];
  if (v78)
  {
    v7[46] = v78;
    operator delete(v78);
  }
  uint64_t v79 = v7[42];
  if (v79)
  {
    v7[43] = v79;
    operator delete(v79);
  }
  long long v80 = v7[39];
  if (v80)
  {
    v7[40] = v80;
    operator delete(v80);
  }
  long long v81 = v7[36];
  if (v81)
  {
    v7[37] = v81;
    operator delete(v81);
  }
  long long v82 = v7[33];
  if (v82)
  {
    v7[34] = v82;
    operator delete(v82);
  }
  long long v83 = v7[30];
  if (v83)
  {
    v7[31] = v83;
    operator delete(v83);
  }
  long long v84 = v7[27];
  if (v84)
  {
    v7[28] = v84;
    operator delete(v84);
  }
  unint64_t v85 = v7[24];
  if (v85)
  {
    v7[25] = v85;
    operator delete(v85);
  }
  uint64_t v86 = v7[21];
  if (v86)
  {
    v7[22] = v86;
    operator delete(v86);
  }
  unint64_t v87 = v7[18];
  if (v87)
  {
    v7[19] = v87;
    operator delete(v87);
  }
  unsigned int v88 = v7[15];
  if (v88)
  {
    v7[16] = v88;
    operator delete(v88);
  }
  unint64_t v89 = v7[12];
  if (v89)
  {
    v7[13] = v89;
    operator delete(v89);
  }
  uint64_t v90 = v7[9];
  if (v90)
  {
    v7[10] = v90;
    operator delete(v90);
  }
  unint64_t v91 = v7[6];
  if (v91)
  {
    v7[7] = v91;
    operator delete(v91);
  }
  long long v92 = v7[3];
  if (v92)
  {
    v7[4] = v92;
    operator delete(v92);
  }
  unint64_t v93 = *v7;
  if (*v7)
  {
    v7[1] = v93;
    operator delete(v93);
  }
  operator delete(v7);
  return v3;
}

void sub_2194D6EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_2194D6EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_2194D6EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21948B590((void **)va);
  _Unwind_Resume(a1);
}

void sub_2194D6F08()
{
}

void sub_2194D6F1C(uint64_t a1, unint64_t *a2)
{
  *(_OWORD *)a1 = xmmword_21950C500;
  *(int64x2_t *)(a1 + 16) = vdupq_n_s64(3uLL);
  *(void *)(a1 + 32) = 1;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_26CAD69C8;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 161) = 0u;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  long long v2 = *(_OWORD *)a2;
  long long v3 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  if (sub_2194DC2F0(a2)) {
    operator new();
  }
  sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/GaussianPyramidGenerator.cpp", 34, "IsGaussianPyramidGeneratorConfigValid(config) && \"Invalid configuration\"", (void (*)(void *))sub_2194FF9C0);
  abort();
}

void sub_2194D7380(_Unwind_Exception *a1)
{
  sub_2194D7548(v4);
  sub_2194D7644(v3);
  sub_2194D7714(v2);
  sub_2194D7644(v1);
  _Unwind_Resume(a1);
}

void sub_2194D73B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1[4] = a2;
  a1[5] = a3;
  a1[6] = a4;
  a1[2] = a5;
  operator new[]();
}

void sub_2194D74FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21947E0B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2194D7510(void *a1)
{
  __cxa_begin_catch(a1);
  MEMORY[0x21D48B570](v1, 0x1000C8052888210);
  __cxa_rethrow();
}

void sub_2194D7534(_Unwind_Exception *a1)
{
}

void *sub_2194D7548(void *a1)
{
  *a1 = &unk_26CAD69C8;
  long long v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  long long v3 = (std::__shared_weak_count *)a1[12];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)a1[10];
    if (!v4) {
      return a1;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)a1[10];
    if (!v4) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void *sub_2194D7644(void *a1)
{
  long long v2 = (void *)*a1;
  *a1 = 0;
  if (v2)
  {
    long long v3 = (void *)v2[9];
    if (v3)
    {
      v2[10] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void (***)(void))v2[6];
    if (v4)
    {
      uint64_t v5 = (void (***)(void))v2[7];
      unint64_t v6 = (void *)v2[6];
      if (v5 != v4)
      {
        std::string::size_type v7 = v5 - 18;
        long long v8 = v5 - 18;
        uint64_t v9 = v5 - 18;
        do
        {
          uint64_t v10 = *v9;
          v9 -= 18;
          (*v10)(v8);
          v7 -= 18;
          BOOL v11 = v8 == v4;
          long long v8 = v9;
        }
        while (!v11);
        unint64_t v6 = (void *)v2[6];
      }
      v2[7] = v4;
      operator delete(v6);
    }
    MEMORY[0x21D48B5B0](v2, 0x1020C4024B85F43);
  }
  return a1;
}

void *sub_2194D7714(void *a1)
{
  long long v2 = (void *)*a1;
  *a1 = 0;
  if (v2)
  {
    long long v3 = (void *)v2[9];
    if (v3)
    {
      v2[10] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void (***)(void))v2[6];
    if (v4)
    {
      uint64_t v5 = (void (***)(void))v2[7];
      unint64_t v6 = (void *)v2[6];
      if (v5 != v4)
      {
        std::string::size_type v7 = v5 - 18;
        long long v8 = v5 - 18;
        uint64_t v9 = v5 - 18;
        do
        {
          uint64_t v10 = *v9;
          v9 -= 18;
          (*v10)(v8);
          v7 -= 18;
          BOOL v11 = v8 == v4;
          long long v8 = v9;
        }
        while (!v11);
        unint64_t v6 = (void *)v2[6];
      }
      v2[7] = v4;
      operator delete(v6);
    }
    MEMORY[0x21D48B5B0](v2, 0x1020C4024B85F43);
  }
  return a1;
}

unsigned __int8 *sub_2194D77E8(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  __int16 v29 = 0;
  long long v28 = xmmword_21950CF10;
  long long v26 = xmmword_21950CF22;
  __int16 v27 = 3;
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  sub_2194D792C(*(int8x16_t **)(a2 + 72), *(unsigned int **)(a1 + 144), *(_WORD **)(*(void *)(v12 + 48) + 72), *(void *)(a2 + 32), *(void *)(a2 + 40), *(void *)(*(void *)(v12 + 48) + 40), *(void *)(a2 + 48), (unsigned __int16 *)&v28, 1.5131222e-306, a4, a5, a6, a7, a8, a9, a10);
  sub_2194DC280(*(void *)(*(void *)(v12 + 48) + 72), *(void *)(*(void *)(v13 + 48) + 72), *(void *)(*(void *)(v12 + 48) + 32), *(void *)(*(void *)(v12 + 48) + 40), *(void *)(*(void *)(v13 + 48) + 40), *(void *)(*(void *)(v12 + 48) + 48));
  sub_2194D792C(*(int8x16_t **)(a2 + 72), *(unsigned int **)(a1 + 144), *(_WORD **)(*(void *)(v12 + 48) + 216), *(void *)(a2 + 32), *(void *)(a2 + 40), *(void *)(*(void *)(v12 + 48) + 184), *(void *)(a2 + 48), (unsigned __int16 *)&v26, v15, v16, v17, v18, v19, v20, v21, v22);
  uint64_t result = (unsigned __int8 *)sub_2194DC280(*(void *)(*(void *)(v12 + 48) + 216), *(void *)(*(void *)(v13 + 48) + 216), *(void *)(*(void *)(v12 + 48) + 176), *(void *)(*(void *)(v12 + 48) + 184), *(void *)(*(void *)(v13 + 48) + 184), *(void *)(a2 + 48));
  if (*(void *)(*(void *)(a1 + 48) + 16) >= 2uLL)
  {
    __int16 v25 = 109;
    int v24 = 19267693;
    return sub_2194D9070(*(unsigned __int8 **)(a2 + 72), *(unsigned int **)(a1 + 144), *(void *)(*(void *)(v14 + 48) + 72), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 40), *(_DWORD *)(*(void *)(v14 + 48) + 40), *(_DWORD *)(a2 + 48), (const __int16 *)&v24);
  }
  return result;
}

uint64_t sub_2194D792C(int8x16_t *a1, unsigned int *a2, _WORD *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int16 *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, int8x16_t a16)
{
  double v18 = a8;
  uint64_t v19 = a7;
  uint64_t v20 = a6;
  int v21 = a4;
  int8x16_t v22 = a3;
  uint64_t v23 = a7 * a6;
  uint64_t v24 = (int)a5;
  __int16 v25 = &a1->u8[(int)a5];
  long long v649 = a1;
  unint64_t v26 = a4;
  uint64_t v27 = 2 * v20;
  uint64_t v640 = v20;
  unint64_t v645 = a4;
  uint64_t v632 = (int)a5;
  uint64_t v655 = v23;
  if (!a4)
  {
    sub_2194DBEDC(a3, a2, 0, a8);
    sub_2194DBEDC((_WORD *)((char *)v22 + v27), a2, 0, v18);
    sub_2194DBEDC((_WORD *)((char *)v22 + v27 + v27), a2, 0, v18);
    uint64_t result = sub_2194DBEDC((_WORD *)((char *)v22 + v27 + v27 + v27), a2, 0, v18);
    goto LABEL_64;
  }
  uint64_t v651 = 2 * v20;
  long long v28 = &v25[(int)a5];
  __int16 v29 = &v28[(int)a5];
  unint64_t v30 = &v29[(int)a5];
  unint64_t v31 = &v30[(int)a5];
  unsigned int v32 = *a8;
  unsigned int v33 = a8[1];
  unsigned int v34 = a8[2];
  unsigned int v35 = a8[3];
  unsigned int v36 = a8[4];
  long long v660 = v31;
  if (a4 < 8uLL)
  {
    unint64_t v37 = 0;
    unint64_t v38 = (unsigned __int8 *)a1;
    int v39 = &v29[(int)a5];
    int v40 = &v25[(int)a5 + (int)a5];
    unint64_t v41 = &v25[(int)a5];
    uint64_t v42 = &a1->u8[(int)a5];
    goto LABEL_16;
  }
  int32x4_t v45 = vdupq_n_s32(v32);
  int32x4_t v46 = vdupq_n_s32(v33);
  int32x4_t v47 = vdupq_n_s32(v34);
  int32x4_t v48 = vdupq_n_s32(v35);
  int32x4_t v49 = vdupq_n_s32(v36);
  if (a4 >= 0x10uLL)
  {
    unint64_t v52 = a4 & 0xF;
    unint64_t v37 = a4 - v52;
    a16.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
    unint64_t v53 = v37;
    int v54 = v649;
    uint64_t v55 = (int32x4_t *)a2;
    do
    {
      int32x4_t v56 = (int32x4_t)vqtbl1q_s8(*v54, (int8x16_t)xmmword_21950CEB0);
      int32x4_t v16 = (int32x4_t)vqtbl1q_s8(*v54, (int8x16_t)xmmword_21950CEC0);
      int32x4_t v57 = (int32x4_t)vqtbl1q_s8(*v54, (int8x16_t)xmmword_21950CED0);
      int8x16_t v58 = *(int8x16_t *)((char *)v54 + 4 * v24);
      int32x4_t v17 = (int32x4_t)vqtbl1q_s8(*v54, (int8x16_t)xmmword_21950CEE0);
      int8x16_t v59 = *(int8x16_t *)((char *)v54 + 3 * v24);
      int32x4_t v60 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_21950CEE0), v17), v45), vaddq_s32((int32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_21950CEE0), v17), v46);
      int32x4_t v61 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_21950CED0), v57), v45), vaddq_s32((int32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_21950CED0), v57), v46);
      int32x4_t v62 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_21950CEC0), v16), v45), vaddq_s32((int32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_21950CEC0), v16), v46);
      int32x4_t v63 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_21950CEB0), v56), v45), vaddq_s32((int32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_21950CEB0), v56), v46);
      int8x16_t v64 = *(int8x16_t *)((char *)v54 + 2 * v24);
      int32x4_t v65 = (int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_21950CEE0);
      int32x4_t v66 = vmlaq_s32(v63, vaddq_s32((int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_21950CEB0), v56), v47);
      int32x4_t v67 = vmlaq_s32(v62, vaddq_s32((int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_21950CEC0), v16), v47);
      int32x4_t v68 = vmlaq_s32(v61, vaddq_s32((int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_21950CED0), v57), v47);
      int8x16_t v69 = *(int8x16_t *)((char *)v54 + v24);
      v55[2] = vmlaq_s32(vmlaq_s32(v68, vaddq_s32((int32x4_t)vqtbl1q_s8(v69, (int8x16_t)xmmword_21950CED0), v57), v48), v49, v57);
      v55[3] = vmlaq_s32(vmlaq_s32(vmlaq_s32(v60, vaddq_s32(v65, v17), v47), vaddq_s32((int32x4_t)vqtbl1q_s8(v69, (int8x16_t)xmmword_21950CEE0), v17), v48), v49, v17);
      *uint64_t v55 = vmlaq_s32(vmlaq_s32(v66, vaddq_s32((int32x4_t)vqtbl1q_s8(v69, (int8x16_t)xmmword_21950CEB0), v56), v48), v49, v56);
      v55[1] = vmlaq_s32(vmlaq_s32(v67, vaddq_s32((int32x4_t)vqtbl1q_s8(v69, (int8x16_t)xmmword_21950CEC0), v16), v48), v49, v16);
      v55 += 4;
      ++v54;
      v53 -= 16;
    }
    while (v53);
    if (!v52) {
      goto LABEL_18;
    }
    if (v52 < 8)
    {
      unint64_t v38 = &v649->u8[v37];
      uint64_t v42 = &v25[v37];
      unint64_t v41 = &v28[v37];
      int v40 = &v29[v37];
      int v39 = &v30[v37];
LABEL_16:
      unint64_t v88 = v26 - v37;
      unint64_t v89 = v38;
      uint64_t v90 = v38;
      unint64_t v91 = v38;
      long long v92 = v38;
      unint64_t v93 = &a2[v37];
      do
      {
        int v95 = *v38++;
        int v94 = v95;
        int v96 = *v39++;
        int v97 = (v96 + v94) * v32;
        int v99 = *v89++;
        int v98 = v99;
        int v100 = *v40++;
        unsigned int v101 = v97 + (v100 + v98) * v33;
        int v103 = *v90++;
        int v102 = v103;
        int v104 = *v41++;
        unsigned int v105 = v101 + (v104 + v102) * v34;
        int v107 = *v92++;
        int v106 = v107;
        int v108 = *v42++;
        unsigned int v109 = v105 + (v108 + v106) * v35;
        int v110 = *v91++;
        *v93++ = v109 + v110 * v36;
        --v88;
      }
      while (v88);
      goto LABEL_18;
    }
    long long v50 = a3;
    unint64_t v51 = v26 - (v21 & 0xF);
    LOBYTE(v21) = a4;
  }
  else
  {
    long long v50 = a3;
    unint64_t v51 = 0;
  }
  unint64_t v37 = v26 - (v21 & 7);
  unint64_t v38 = &v649->u8[v37];
  int v39 = &v30[v37];
  int v40 = &v29[v37];
  unint64_t v41 = &v28[v37];
  uint64_t v42 = &v25[v37];
  unint64_t v70 = v37;
  uint64_t v71 = v649;
  uint64_t v72 = &v29[v24];
  uint64_t v73 = v29;
  long long v74 = v28;
  int v75 = v25;
  uint64_t v76 = (int32x4_t *)&a2[v51];
  do
  {
    a16.i64[0] = *(uint64_t *)((char *)v71->i64 + v51);
    int32x4_t v77 = (int32x4_t)vqtbl1q_s8(a16, (int8x16_t)xmmword_21950CEB0);
    a16 = vqtbl1q_s8(a16, (int8x16_t)xmmword_21950CEC0);
    v16.i64[0] = *(void *)&v72[v51];
    int32x4_t v78 = (int32x4_t)vqtbl1q_s8((int8x16_t)v16, (int8x16_t)xmmword_21950CEB0);
    v17.i64[0] = *(void *)&v73[v51];
    int32x4_t v79 = (int32x4_t)vqtbl1q_s8((int8x16_t)v17, (int8x16_t)xmmword_21950CEB0);
    int32x4_t v80 = vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v17, (int8x16_t)xmmword_21950CEC0), (int32x4_t)a16);
    int32x4_t v81 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v16, (int8x16_t)xmmword_21950CEC0), (int32x4_t)a16), v45), v80, v46);
    int32x4_t v82 = vmlaq_s32(vmulq_s32(vaddq_s32(v78, v77), v45), vaddq_s32(v79, v77), v46);
    v80.i64[0] = *(void *)&v74[v51];
    int32x4_t v83 = (int32x4_t)vqtbl1q_s8((int8x16_t)v80, (int8x16_t)xmmword_21950CEC0);
    int32x4_t v84 = vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v80, (int8x16_t)xmmword_21950CEB0), v77);
    int32x4_t v85 = vmlaq_s32(v82, v84, v47);
    int32x4_t v86 = vmlaq_s32(v81, vaddq_s32(v83, (int32x4_t)a16), v47);
    v84.i64[0] = *(void *)&v75[v51];
    int32x4_t v87 = (int32x4_t)vqtbl1q_s8((int8x16_t)v84, (int8x16_t)xmmword_21950CEB0);
    int32x4_t v17 = vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v84, (int8x16_t)xmmword_21950CEC0), (int32x4_t)a16);
    int32x4_t v16 = vmlaq_s32(vmlaq_s32(v86, v17, v48), v49, (int32x4_t)a16);
    *uint64_t v76 = vmlaq_s32(vmlaq_s32(v85, vaddq_s32(v87, v77), v48), v49, v77);
    v76[1] = v16;
    v76 += 2;
    v75 += 8;
    v74 += 8;
    v73 += 8;
    v72 += 8;
    uint64_t v71 = (int8x16_t *)((char *)v71 + 8);
    v70 -= 8;
  }
  while (v51 != v70);
  int8x16_t v22 = v50;
  unint64_t v31 = v660;
  if ((v21 & 7) != 0) {
    goto LABEL_16;
  }
LABEL_18:
  unint64_t v111 = v26;
  uint64_t v112 = &v31[v632];
  sub_2194DBEDC(v22, a2, a4, v18);
  unsigned int v116 = *v18;
  unsigned int v117 = v18[1];
  unsigned int v118 = v18[2];
  unsigned int v119 = v18[3];
  unsigned int v120 = v18[4];
  long long v653 = v22;
  if (v111 < 8)
  {
    unint64_t v121 = 0;
    unint64_t v122 = v649;
    uint64_t v123 = v31;
    uint64_t v124 = v30;
    uint64_t v125 = v29;
    uint64_t v126 = v28;
    uint64_t v127 = v25;
    int v21 = a4;
    goto LABEL_31;
  }
  int32x4_t v128 = vdupq_n_s32(v116);
  int32x4_t v129 = vdupq_n_s32(v117);
  int32x4_t v130 = vdupq_n_s32(v118);
  int32x4_t v131 = vdupq_n_s32(v119);
  uint16x8_t v132 = (uint16x8_t)vdupq_n_s16(v120);
  if (v111 >= 0x10)
  {
    unint64_t v135 = a4 & 0xF;
    unint64_t v121 = v111 - v135;
    v113.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
    unint64_t v136 = v111 - v135;
    unint64_t v137 = v649;
    long long v138 = a2;
    do
    {
      int32x4_t v139 = (int32x4_t)vqtbl1q_s8(*v137, (int8x16_t)xmmword_21950CEB0);
      int32x4_t v140 = (int32x4_t)vqtbl1q_s8(*v137, (int8x16_t)xmmword_21950CEC0);
      int32x4_t v141 = (int32x4_t)vqtbl1q_s8(*v137, (int8x16_t)xmmword_21950CED0);
      int32x4_t v142 = (int32x4_t)vqtbl1q_s8(*v137, (int8x16_t)xmmword_21950CEE0);
      int8x16_t v143 = *(int8x16_t *)((char *)v137 + 5 * v632);
      int8x16_t v144 = *(int8x16_t *)((char *)v137 + 4 * v632);
      int32x4_t v145 = (int32x4_t)vqtbl1q_s8(v144, (int8x16_t)xmmword_21950CEB0);
      int32x4_t v146 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v143, (int8x16_t)xmmword_21950CEE0), v142), v128), vaddq_s32((int32x4_t)vqtbl1q_s8(v144, (int8x16_t)xmmword_21950CEE0), v142), v129);
      int32x4_t v147 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v143, (int8x16_t)xmmword_21950CED0), v141), v128), vaddq_s32((int32x4_t)vqtbl1q_s8(v144, (int8x16_t)xmmword_21950CED0), v141), v129);
      int32x4_t v148 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v143, (int8x16_t)xmmword_21950CEC0), v140), v128), vaddq_s32((int32x4_t)vqtbl1q_s8(v144, (int8x16_t)xmmword_21950CEC0), v140), v129);
      int8x16_t v149 = *(int8x16_t *)((char *)v137 + 3 * v632);
      int32x4_t v150 = vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v143, (int8x16_t)xmmword_21950CEB0), v139), v128), vaddq_s32(v145, v139), v129), vaddq_s32((int32x4_t)vqtbl1q_s8(v149, (int8x16_t)xmmword_21950CEB0), v139), v130);
      int32x4_t v151 = vmlaq_s32(v148, vaddq_s32((int32x4_t)vqtbl1q_s8(v149, (int8x16_t)xmmword_21950CEC0), v140), v130);
      int32x4_t v152 = vmlaq_s32(v147, vaddq_s32((int32x4_t)vqtbl1q_s8(v149, (int8x16_t)xmmword_21950CED0), v141), v130);
      int32x4_t v153 = vmlaq_s32(v146, vaddq_s32((int32x4_t)vqtbl1q_s8(v149, (int8x16_t)xmmword_21950CEE0), v142), v130);
      int8x16_t v154 = *(int8x16_t *)((char *)v137 + 2 * v632);
      uint32x4_t v155 = (uint32x4_t)vmlaq_s32(v151, vaddq_s32((int32x4_t)vqtbl1q_s8(v154, (int8x16_t)xmmword_21950CEC0), v140), v131);
      uint32x4_t v156 = (uint32x4_t)vmlaq_s32(v150, vaddq_s32((int32x4_t)vqtbl1q_s8(v154, (int8x16_t)xmmword_21950CEB0), v139), v131);
      uint8x16_t v157 = *(uint8x16_t *)((char *)v137 + v632);
      uint16x8_t v158 = vmovl_high_u8(v157);
      uint16x8_t v159 = vmovl_u8(*(uint8x8_t *)v157.i8);
      int8x16_t v114 = (int8x16_t)vmlal_u16(v156, *(uint16x4_t *)v132.i8, *(uint16x4_t *)v159.i8);
      int32x4_t v115 = (int32x4_t)vmlal_u16((uint32x4_t)vmlaq_s32(v152, vaddq_s32((int32x4_t)vqtbl1q_s8(v154, (int8x16_t)xmmword_21950CED0), v141), v131), *(uint16x4_t *)v132.i8, *(uint16x4_t *)v158.i8);
      *((int32x4_t *)v138 + 2) = v115;
      *((uint32x4_t *)v138 + 3) = vmlal_high_u16((uint32x4_t)vmlaq_s32(v153, vaddq_s32((int32x4_t)vqtbl1q_s8(v154, (int8x16_t)xmmword_21950CEE0), v142), v131), v132, v158);
      *(int8x16_t *)long long v138 = v114;
      *((uint32x4_t *)v138 + 1) = vmlal_high_u16(v155, v132, v159);
      v138 += 16;
      ++v137;
      v136 -= 16;
    }
    while (v136);
    uint64_t v134 = v660;
    int v21 = a4;
    if ((a4 & 0xF) == 0) {
      goto LABEL_33;
    }
    if (v135 < 8)
    {
      unint64_t v122 = (int8x16_t *)((char *)v649 + v121);
      uint64_t v127 = &v25[v121];
      uint64_t v126 = &v28[v121];
      uint64_t v125 = &v29[v121];
      uint64_t v124 = &v30[v121];
      uint64_t v123 = &v660[v121];
LABEL_31:
      unint64_t v181 = v645 - v121;
      __n128 v182 = v122;
      __n128 v183 = v122;
      long long v184 = v122;
      long long v185 = &a2[v121];
      do
      {
        int v187 = v122->u8[0];
        unint64_t v122 = (int8x16_t *)((char *)v122 + 1);
        int v186 = v187;
        int v188 = *v123++;
        int v189 = (v188 + v186) * v116;
        int v191 = v182->u8[0];
        __n128 v182 = (int8x16_t *)((char *)v182 + 1);
        int v190 = v191;
        int v192 = *v124++;
        unsigned int v193 = v189 + (v192 + v190) * v117;
        int v195 = v183->u8[0];
        __n128 v183 = (int8x16_t *)((char *)v183 + 1);
        int v194 = v195;
        int v196 = *v125++;
        unsigned int v197 = v193 + (v196 + v194) * v118;
        int v199 = v184->u8[0];
        long long v184 = (int8x16_t *)((char *)v184 + 1);
        int v198 = v199;
        int v200 = *v126++;
        unsigned int v201 = v197 + (v200 + v198) * v119;
        int v202 = *v127++;
        *v185++ = v201 + v202 * v120;
        --v181;
      }
      while (v181);
      goto LABEL_33;
    }
    unint64_t v133 = v111 - v135;
  }
  else
  {
    unint64_t v133 = 0;
    uint64_t v134 = v660;
    LOBYTE(v21) = a4;
  }
  uint64_t v160 = v21 & 7;
  unint64_t v121 = v645 - v160;
  unsigned int v161 = v649;
  unint64_t v122 = (int8x16_t *)((char *)v649 + v121);
  uint64_t v123 = &v660[v121];
  uint64_t v124 = &v30[v121];
  uint64_t v125 = &v29[v121];
  uint64_t v126 = &v28[v121];
  uint64_t v127 = &v25[v121];
  unint64_t v162 = v121;
  __n128 v163 = v30;
  long long v164 = v29;
  long long v165 = v28;
  long long v166 = v25;
  long long v167 = &a2[v133];
  do
  {
    v113.i64[0] = *(uint64_t *)((char *)v161->i64 + v133);
    int32x4_t v168 = (int32x4_t)vqtbl1q_s8(v113, (int8x16_t)xmmword_21950CEB0);
    int32x4_t v169 = (int32x4_t)vqtbl1q_s8(v113, (int8x16_t)xmmword_21950CEC0);
    v114.i64[0] = *(void *)&v134[v133];
    int32x4_t v170 = (int32x4_t)vqtbl1q_s8(v114, (int8x16_t)xmmword_21950CEB0);
    v115.i64[0] = *(void *)&v163[v133];
    int32x4_t v171 = (int32x4_t)vqtbl1q_s8((int8x16_t)v115, (int8x16_t)xmmword_21950CEB0);
    int32x4_t v172 = vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v115, (int8x16_t)xmmword_21950CEC0), v169);
    int32x4_t v173 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v114, (int8x16_t)xmmword_21950CEC0), v169), v128), v172, v129);
    int32x4_t v174 = vmlaq_s32(vmulq_s32(vaddq_s32(v170, v168), v128), vaddq_s32(v171, v168), v129);
    v172.i64[0] = *(void *)&v164[v133];
    int32x4_t v175 = (int32x4_t)vqtbl1q_s8((int8x16_t)v172, (int8x16_t)xmmword_21950CEC0);
    int32x4_t v176 = vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v172, (int8x16_t)xmmword_21950CEB0), v168);
    int32x4_t v177 = vmlaq_s32(v174, v176, v130);
    int32x4_t v178 = vmlaq_s32(v173, vaddq_s32(v175, v169), v130);
    v176.i64[0] = *(void *)&v165[v133];
    int32x4_t v179 = (int32x4_t)vqtbl1q_s8((int8x16_t)v176, (int8x16_t)xmmword_21950CEB0);
    int32x4_t v115 = (int32x4_t)vqtbl1q_s8((int8x16_t)v176, (int8x16_t)xmmword_21950CEC0);
    uint32x4_t v180 = (uint32x4_t)vmlaq_s32(v178, vaddq_s32(v115, v169), v131);
    int8x16_t v113 = (int8x16_t)vmovl_u8(*(uint8x8_t *)&v166[v133]);
    int8x16_t v114 = (int8x16_t)vmlal_high_u16(v180, v132, (uint16x8_t)v113);
    *(uint32x4_t *)long long v167 = vmlal_u16((uint32x4_t)vmlaq_s32(v177, vaddq_s32(v179, v168), v131), *(uint16x4_t *)v132.i8, *(uint16x4_t *)v113.i8);
    *((int8x16_t *)v167 + 1) = v114;
    v167 += 8;
    v166 += 8;
    v165 += 8;
    v164 += 8;
    v163 += 8;
    v134 += 8;
    unsigned int v161 = (int8x16_t *)((char *)v161 + 8);
    v162 -= 8;
  }
  while (v133 != v162);
  double v18 = a8;
  int v21 = a4;
  if (v160) {
    goto LABEL_31;
  }
LABEL_33:
  long long v203 = &v112[v632];
  long long v642 = &v653[v20];
  sub_2194DBEDC(v642, a2, v21, v18);
  unsigned int v207 = *v18;
  unsigned int v208 = v18[1];
  unsigned int v209 = v18[2];
  unsigned int v210 = v18[3];
  unsigned int v211 = v18[4];
  if (v645 < 8)
  {
    unint64_t v212 = 0;
    long long v213 = v649;
    long long v214 = &v31[v632];
    long long v215 = v660;
    long long v216 = v30;
    long long v217 = v29;
    long long v218 = v28;
    long long v219 = v25;
    goto LABEL_46;
  }
  int32x4_t v220 = vdupq_n_s32(v207);
  int32x4_t v221 = vdupq_n_s32(v208);
  int32x4_t v222 = vdupq_n_s32(v209);
  int16x8_t v223 = (int16x8_t)vdupq_n_s32(v210);
  uint16x8_t v224 = (uint16x8_t)vdupq_n_s16(v211);
  if (v645 >= 0x10)
  {
    unint64_t v212 = v645 - (v21 & 0xF);
    v204.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
    int8x16_t v205 = (int8x16_t)vuzp1q_s16(v223, v223);
    unint64_t v226 = v212;
    __n128 v227 = v649;
    __n128 v228 = a2;
    do
    {
      int32x4_t v229 = (int32x4_t)vqtbl1q_s8(*v227, (int8x16_t)xmmword_21950CEB0);
      int32x4_t v230 = (int32x4_t)vqtbl1q_s8(*v227, (int8x16_t)xmmword_21950CEC0);
      int32x4_t v231 = (int32x4_t)vqtbl1q_s8(*v227, (int8x16_t)xmmword_21950CED0);
      int8x16_t v232 = *(int8x16_t *)((char *)v227 + 6 * v632);
      int32x4_t v233 = (int32x4_t)vqtbl1q_s8(*v227, (int8x16_t)xmmword_21950CEE0);
      int32x4_t v234 = (int32x4_t)vqtbl1q_s8(v232, (int8x16_t)xmmword_21950CEB0);
      int8x16_t v235 = *(int8x16_t *)((char *)v227 + 5 * v632);
      int32x4_t v236 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v232, (int8x16_t)xmmword_21950CEE0), v233), v220), vaddq_s32((int32x4_t)vqtbl1q_s8(v235, (int8x16_t)xmmword_21950CEE0), v233), v221);
      int32x4_t v237 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v232, (int8x16_t)xmmword_21950CED0), v231), v220), vaddq_s32((int32x4_t)vqtbl1q_s8(v235, (int8x16_t)xmmword_21950CED0), v231), v221);
      int32x4_t v238 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v232, (int8x16_t)xmmword_21950CEC0), v230), v220), vaddq_s32((int32x4_t)vqtbl1q_s8(v235, (int8x16_t)xmmword_21950CEC0), v230), v221);
      int32x4_t v239 = vmlaq_s32(vmulq_s32(vaddq_s32(v234, v229), v220), vaddq_s32((int32x4_t)vqtbl1q_s8(v235, (int8x16_t)xmmword_21950CEB0), v229), v221);
      int8x16_t v240 = *(int8x16_t *)((char *)v227 + 4 * v632);
      uint32x4_t v241 = (uint32x4_t)vmlaq_s32(v239, vaddq_s32((int32x4_t)vqtbl1q_s8(v240, (int8x16_t)xmmword_21950CEB0), v229), v222);
      uint32x4_t v242 = (uint32x4_t)vmlaq_s32(v238, vaddq_s32((int32x4_t)vqtbl1q_s8(v240, (int8x16_t)xmmword_21950CEC0), v230), v222);
      uint32x4_t v243 = (uint32x4_t)vmlaq_s32(v237, vaddq_s32((int32x4_t)vqtbl1q_s8(v240, (int8x16_t)xmmword_21950CED0), v231), v222);
      uint8x16_t v244 = *(uint8x16_t *)((char *)v227 + v632);
      uint8x16_t v245 = *(uint8x16_t *)((char *)v227 + 3 * v632);
      uint16x8_t v246 = vaddl_u8(*(uint8x8_t *)v245.i8, *(uint8x8_t *)v244.i8);
      uint16x8_t v247 = vaddl_high_u8(v245, v244);
      uint32x4_t v248 = vmlal_high_u16((uint32x4_t)vmlaq_s32(v236, vaddq_s32((int32x4_t)vqtbl1q_s8(v240, (int8x16_t)xmmword_21950CEE0), v233), v222), v247, (uint16x8_t)v205);
      uint32x4_t v249 = vmlal_u16(v243, *(uint16x4_t *)v247.i8, *(uint16x4_t *)v205.i8);
      uint8x16_t v250 = *(uint8x16_t *)((char *)v227 + 2 * v632);
      uint16x8_t v251 = vmovl_high_u8(v250);
      uint16x8_t v252 = vmovl_u8(*(uint8x8_t *)v250.i8);
      *((uint32x4_t *)v228 + 2) = vmlal_u16(v249, *(uint16x4_t *)v224.i8, *(uint16x4_t *)v251.i8);
      *((uint32x4_t *)v228 + 3) = vmlal_high_u16(v248, v224, v251);
      int32x4_t v206 = (int32x4_t)vmlal_high_u16(vmlal_high_u16(v242, v246, (uint16x8_t)v205), v224, v252);
      *(uint32x4_t *)__n128 v228 = vmlal_u16(vmlal_u16(v241, *(uint16x4_t *)v246.i8, *(uint16x4_t *)v205.i8), *(uint16x4_t *)v224.i8, *(uint16x4_t *)v252.i8);
      *((int32x4_t *)v228 + 1) = v206;
      v228 += 16;
      ++v227;
      v226 -= 16;
    }
    while (v226);
    if ((v21 & 0xF) == 0) {
      goto LABEL_48;
    }
    if ((v21 & 0xFu) < 8uLL)
    {
      long long v219 = &v25[v212];
      long long v218 = &v28[v212];
      long long v217 = &v29[v212];
      long long v216 = &v30[v212];
      long long v215 = &v660[v212];
      long long v214 = &v112[v212];
      long long v213 = (int8x16_t *)((char *)v649 + v212);
LABEL_46:
      unint64_t v275 = v645 - v212;
      long long v276 = v213;
      long long v277 = v213;
      long long v278 = &a2[v212];
      do
      {
        int v280 = v213->u8[0];
        long long v213 = (int8x16_t *)((char *)v213 + 1);
        int v279 = v280;
        int v281 = *v214++;
        int v282 = (v281 + v279) * v207;
        int v284 = v276->u8[0];
        long long v276 = (int8x16_t *)((char *)v276 + 1);
        int v283 = v284;
        int v285 = *v215++;
        unsigned int v286 = v282 + (v285 + v283) * v208;
        int v288 = v277->u8[0];
        long long v277 = (int8x16_t *)((char *)v277 + 1);
        int v287 = v288;
        int v289 = *v216++;
        unsigned int v290 = v286 + (v289 + v287) * v209;
        int v292 = *v219++;
        int v291 = v292;
        int v293 = *v217++;
        unsigned int v294 = v290 + (v293 + v291) * v210;
        int v295 = *v218++;
        *v278++ = v294 + v295 * v211;
        --v275;
      }
      while (v275);
      goto LABEL_48;
    }
    unint64_t v225 = v645 - (v21 & 0xF);
  }
  else
  {
    unint64_t v225 = 0;
  }
  uint64_t v637 = v21 & 7;
  unint64_t v212 = v645 - v637;
  long long v253 = v649;
  long long v213 = (int8x16_t *)((char *)v649 + v212);
  long long v214 = &v112[v212];
  long long v215 = &v660[v212];
  long long v216 = &v30[v212];
  long long v217 = &v29[v212];
  long long v218 = &v28[v212];
  long long v219 = &v25[v212];
  uint16x8_t v254 = (uint16x8_t)vuzp1q_s16(v223, v223);
  unint64_t v255 = v212;
  long long v256 = &v31[v632];
  long long v257 = v660;
  long long v258 = v30;
  long long v259 = v29;
  long long v260 = v28;
  long long v261 = v25;
  long long v262 = &a2[v225];
  do
  {
    v204.i64[0] = *(uint64_t *)((char *)v253->i64 + v225);
    int32x4_t v263 = (int32x4_t)vqtbl1q_s8(v204, (int8x16_t)xmmword_21950CEB0);
    int32x4_t v264 = (int32x4_t)vqtbl1q_s8(v204, (int8x16_t)xmmword_21950CEC0);
    v205.i64[0] = *(void *)&v256[v225];
    int32x4_t v265 = (int32x4_t)vqtbl1q_s8(v205, (int8x16_t)xmmword_21950CEB0);
    v206.i64[0] = *(void *)&v257[v225];
    int32x4_t v266 = (int32x4_t)vqtbl1q_s8((int8x16_t)v206, (int8x16_t)xmmword_21950CEB0);
    int32x4_t v267 = vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v206, (int8x16_t)xmmword_21950CEC0), v264);
    int32x4_t v268 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v205, (int8x16_t)xmmword_21950CEC0), v264), v220), v267, v221);
    int32x4_t v269 = vmlaq_s32(vmulq_s32(vaddq_s32(v265, v263), v220), vaddq_s32(v266, v263), v221);
    v267.i64[0] = *(void *)&v258[v225];
    int32x4_t v270 = (int32x4_t)vqtbl1q_s8((int8x16_t)v267, (int8x16_t)xmmword_21950CEC0);
    int32x4_t v206 = (int32x4_t)vqtbl1q_s8((int8x16_t)v267, (int8x16_t)xmmword_21950CEB0);
    uint32x4_t v271 = (uint32x4_t)vmlaq_s32(v268, vaddq_s32(v270, v264), v222);
    uint16x8_t v272 = vaddl_u8(*(uint8x8_t *)&v259[v225], *(uint8x8_t *)&v261[v225]);
    uint32x4_t v273 = vmlal_high_u16(v271, v272, v254);
    uint32x4_t v274 = vmlal_u16((uint32x4_t)vmlaq_s32(v269, vaddq_s32(v206, v263), v222), *(uint16x4_t *)v272.i8, *(uint16x4_t *)v254.i8);
    int8x16_t v204 = (int8x16_t)vmovl_u8(*(uint8x8_t *)&v260[v225]);
    int8x16_t v205 = (int8x16_t)vmlal_high_u16(v273, v224, (uint16x8_t)v204);
    *(uint32x4_t *)long long v262 = vmlal_u16(v274, *(uint16x4_t *)v224.i8, *(uint16x4_t *)v204.i8);
    *((int8x16_t *)v262 + 1) = v205;
    v262 += 8;
    v261 += 8;
    v260 += 8;
    v259 += 8;
    v258 += 8;
    v257 += 8;
    v256 += 8;
    long long v253 = (int8x16_t *)((char *)v253 + 8);
    v255 -= 8;
  }
  while (v225 != v255);
  double v18 = a8;
  uint64_t v20 = v640;
  int v21 = a4;
  if (v637) {
    goto LABEL_46;
  }
LABEL_48:
  sub_2194DBEDC(&v642[v20], a2, v21, v18);
  unsigned int v299 = *v18;
  unsigned int v300 = v18[1];
  unsigned int v301 = v18[2];
  unsigned int v302 = v18[3];
  unsigned int v303 = v18[4];
  long long v643 = &v642[v20];
  if (v645 < 8)
  {
    unint64_t v304 = 0;
    long long v305 = v649;
    long long v306 = v25;
    long long v307 = &v112[v632];
    long long v308 = v112;
    long long v309 = v660;
    long long v310 = v30;
    long long v311 = v29;
    long long v312 = v28;
    goto LABEL_61;
  }
  int32x4_t v313 = vdupq_n_s32(v299);
  int32x4_t v314 = vdupq_n_s32(v300);
  int16x8_t v315 = (int16x8_t)vdupq_n_s32(v301);
  int16x8_t v316 = (int16x8_t)vdupq_n_s32(v302);
  uint16x8_t v317 = (uint16x8_t)vdupq_n_s16(v303);
  long long v318 = v660;
  if (v645 < 0x10)
  {
    unint64_t v319 = 0;
LABEL_58:
    unint64_t v304 = v645 - (v21 & 7);
    long long v351 = v649;
    long long v305 = (int8x16_t *)((char *)v649 + v304);
    long long v306 = &v25[v304];
    long long v307 = &v203[v304];
    long long v308 = &v112[v304];
    long long v309 = &v660[v304];
    long long v310 = &v30[v304];
    long long v311 = &v29[v304];
    long long v312 = &v28[v304];
    uint16x8_t v352 = (uint16x8_t)vuzp1q_s16(v315, v315);
    uint16x8_t v353 = (uint16x8_t)vuzp1q_s16(v316, v316);
    unint64_t v354 = v304;
    char v355 = &a2[v319];
    do
    {
      v296.i64[0] = *(uint64_t *)((char *)v351->i64 + v319);
      int32x4_t v356 = (int32x4_t)vqtbl1q_s8(v296, (int8x16_t)xmmword_21950CEB0);
      int32x4_t v357 = (int32x4_t)vqtbl1q_s8(v296, (int8x16_t)xmmword_21950CEC0);
      v297.i64[0] = *(void *)&v203[v319];
      int32x4_t v358 = (int32x4_t)vqtbl1q_s8(v297, (int8x16_t)xmmword_21950CEB0);
      v298.i64[0] = *(void *)&v112[v319];
      int32x4_t v359 = (int32x4_t)vqtbl1q_s8((int8x16_t)v298, (int8x16_t)xmmword_21950CEB0);
      int32x4_t v298 = (int32x4_t)vqtbl1q_s8((int8x16_t)v298, (int8x16_t)xmmword_21950CEC0);
      uint32x4_t v360 = (uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v297, (int8x16_t)xmmword_21950CEC0), v357), v313), vaddq_s32(v298, v357), v314);
      uint16x8_t v361 = vaddl_u8(*(uint8x8_t *)&v318[v319], *(uint8x8_t *)&v25[v319]);
      uint32x4_t v362 = vmlal_u16((uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32(v358, v356), v313), vaddq_s32(v359, v356), v314), *(uint16x4_t *)v361.i8, *(uint16x4_t *)v352.i8);
      uint32x4_t v363 = vmlal_high_u16(v360, v361, v352);
      uint16x8_t v364 = vaddl_u8(*(uint8x8_t *)&v30[v319], *(uint8x8_t *)&v28[v319]);
      uint32x4_t v365 = vmlal_high_u16(v363, v364, v353);
      uint32x4_t v366 = vmlal_u16(v362, *(uint16x4_t *)v364.i8, *(uint16x4_t *)v353.i8);
      int8x16_t v296 = (int8x16_t)vmovl_u8(*(uint8x8_t *)&v29[v319]);
      int8x16_t v297 = (int8x16_t)vmlal_high_u16(v365, v317, (uint16x8_t)v296);
      *(uint32x4_t *)char v355 = vmlal_u16(v366, *(uint16x4_t *)v317.i8, *(uint16x4_t *)v296.i8);
      *((int8x16_t *)v355 + 1) = v297;
      v355 += 8;
      v28 += 8;
      v29 += 8;
      v30 += 8;
      v318 += 8;
      v112 += 8;
      v203 += 8;
      v25 += 8;
      long long v351 = (int8x16_t *)((char *)v351 + 8);
      v354 -= 8;
    }
    while (v319 != v354);
    if ((v21 & 7) == 0) {
      goto LABEL_63;
    }
    goto LABEL_61;
  }
  unint64_t v320 = 0;
  unint64_t v304 = v645 - (v21 & 0xF);
  v296.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
  int8x16_t v297 = (int8x16_t)vuzp1q_s16(v315, v315);
  uint16x8_t v321 = (uint16x8_t)vuzp1q_s16(v316, v316);
  long long v322 = a2;
  do
  {
    int8x16_t v323 = v649[v320 / 0x10];
    int32x4_t v324 = (int32x4_t)vqtbl1q_s8(v323, (int8x16_t)xmmword_21950CEB0);
    int32x4_t v325 = (int32x4_t)vqtbl1q_s8(v323, (int8x16_t)xmmword_21950CEC0);
    int32x4_t v326 = (int32x4_t)vqtbl1q_s8(v323, (int8x16_t)xmmword_21950CED0);
    int32x4_t v327 = (int32x4_t)vqtbl1q_s8(v323, (int8x16_t)xmmword_21950CEE0);
    int8x16_t v328 = *(int8x16_t *)&v203[v320];
    int32x4_t v329 = vaddq_s32((int32x4_t)vqtbl1q_s8(v328, (int8x16_t)xmmword_21950CEE0), v327);
    int8x16_t v330 = *(int8x16_t *)&v112[v320];
    uint32x4_t v331 = (uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v328, (int8x16_t)xmmword_21950CED0), v326), v313), vaddq_s32((int32x4_t)vqtbl1q_s8(v330, (int8x16_t)xmmword_21950CED0), v326), v314);
    uint32x4_t v332 = (uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v328, (int8x16_t)xmmword_21950CEC0), v325), v313), vaddq_s32((int32x4_t)vqtbl1q_s8(v330, (int8x16_t)xmmword_21950CEC0), v325), v314);
    uint32x4_t v333 = (uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v328, (int8x16_t)xmmword_21950CEB0), v324), v313), vaddq_s32((int32x4_t)vqtbl1q_s8(v330, (int8x16_t)xmmword_21950CEB0), v324), v314);
    uint8x16_t v334 = *(uint8x16_t *)&v25[v320];
    uint8x16_t v335 = *(uint8x16_t *)&v660[v320];
    uint16x8_t v336 = vaddl_high_u8(v335, v334);
    uint16x8_t v337 = vaddl_u8(*(uint8x8_t *)v335.i8, *(uint8x8_t *)v334.i8);
    uint32x4_t v338 = vmlal_u16(v333, *(uint16x4_t *)v337.i8, *(uint16x4_t *)v297.i8);
    uint32x4_t v339 = vmlal_high_u16(v332, v337, (uint16x8_t)v297);
    uint32x4_t v340 = vmlal_u16(v331, *(uint16x4_t *)v336.i8, *(uint16x4_t *)v297.i8);
    uint8x16_t v341 = *(uint8x16_t *)&v28[v320];
    uint32x4_t v342 = vmlal_high_u16((uint32x4_t)vmlaq_s32(vmulq_s32(v329, v313), vaddq_s32((int32x4_t)vqtbl1q_s8(v330, (int8x16_t)xmmword_21950CEE0), v327), v314), v336, (uint16x8_t)v297);
    uint8x16_t v343 = *(uint8x16_t *)&v30[v320];
    uint16x8_t v344 = vaddl_u8(*(uint8x8_t *)v343.i8, *(uint8x8_t *)v341.i8);
    uint16x8_t v345 = vaddl_high_u8(v343, v341);
    uint32x4_t v346 = vmlal_high_u16(v342, v345, v321);
    uint32x4_t v347 = vmlal_u16(v340, *(uint16x4_t *)v345.i8, *(uint16x4_t *)v321.i8);
    uint8x16_t v348 = *(uint8x16_t *)&v29[v320];
    uint16x8_t v349 = vmovl_high_u8(v348);
    uint16x8_t v350 = vmovl_u8(*(uint8x8_t *)v348.i8);
    int32x4_t v298 = (int32x4_t)vmlal_u16(vmlal_u16(v338, *(uint16x4_t *)v344.i8, *(uint16x4_t *)v321.i8), *(uint16x4_t *)v317.i8, *(uint16x4_t *)v350.i8);
    *((uint32x4_t *)v322 + 2) = vmlal_u16(v347, *(uint16x4_t *)v317.i8, *(uint16x4_t *)v349.i8);
    *((uint32x4_t *)v322 + 3) = vmlal_high_u16(v346, v317, v349);
    *(int32x4_t *)long long v322 = v298;
    *((uint32x4_t *)v322 + 1) = vmlal_high_u16(vmlal_high_u16(v339, v344, v321), v317, v350);
    v322 += 16;
    v320 += 16;
  }
  while (v304 != v320);
  if ((v21 & 0xF) == 0) {
    goto LABEL_63;
  }
  if ((v21 & 0xFu) >= 8uLL)
  {
    unint64_t v319 = v645 - (v21 & 0xF);
    goto LABEL_58;
  }
  long long v312 = &v28[v304];
  long long v311 = &v29[v304];
  long long v310 = &v30[v304];
  long long v309 = &v660[v304];
  long long v308 = &v112[v304];
  long long v307 = &v203[v304];
  long long v306 = &v25[v304];
  long long v305 = (int8x16_t *)((char *)v649 + v304);
LABEL_61:
  unint64_t v367 = v645 - v304;
  long long v368 = &a2[v304];
  long long v369 = v305;
  do
  {
    int v371 = v305->u8[0];
    long long v305 = (int8x16_t *)((char *)v305 + 1);
    int v370 = v371;
    int v372 = *v307++;
    int v373 = (v372 + v370) * v299;
    int v375 = v369->u8[0];
    long long v369 = (int8x16_t *)((char *)v369 + 1);
    int v374 = v375;
    int v376 = *v308++;
    unsigned int v377 = v373 + (v376 + v374) * v300;
    int v379 = *v306++;
    int v378 = v379;
    int v380 = *v309++;
    unsigned int v381 = v377 + (v380 + v378) * v301;
    int v383 = *v312++;
    int v382 = v383;
    int v384 = *v310++;
    unsigned int v385 = v381 + (v384 + v382) * v302;
    int v386 = *v311++;
    *v368++ = v385 + v386 * v303;
    --v367;
  }
  while (v367);
LABEL_63:
  uint64_t result = sub_2194DBEDC(&v643[v20], a2, v21, v18);
  uint64_t v27 = v651;
  int8x16_t v22 = v653;
  uint64_t v19 = a7;
LABEL_64:
  long long v644 = &v22[v655];
  long long v387 = (_WORD *)((char *)&v22[v27] + v27 + v27);
  uint64_t v388 = v19 - 4;
  if ((unint64_t)(v19 - 4) < 5)
  {
    long long v647 = (_WORD *)((char *)&v22[v27] + v27 + v27);
  }
  else
  {
    if (v21)
    {
      long long v647 = (_WORD *)((char *)&v22[v27] + v27 + v27);
      uint64_t v389 = a5;
      unint64_t v634 = v21 & 0xF;
      unint64_t v635 = v645 - v634;
      uint64_t v633 = v21 & 7;
      long long v390 = &v649->i8[3 * a5];
      long long v391 = &v649->i8[4 * a5];
      long long v392 = &v649->i8[5 * a5];
      long long v393 = &v649->i8[6 * a5];
      long long v394 = &v649->i8[7 * a5];
      long long v395 = &v649->i8[8 * a5];
      long long v396 = &v649->i8[2 * a5];
      long long v397 = v18;
      long long v398 = &v649->i8[a5];
      uint64_t v399 = 4;
      uint64_t v656 = v388;
      while (1)
      {
        long long v400 = v649;
        long long v401 = (int8x16_t *)((char *)v649 + v389);
        long long v402 = (int8x16_t *)((char *)v649 + 8 * a5);
        long long v403 = (int8x16_t *)((char *)v649 + 7 * a5);
        long long v404 = (int8x16_t *)((char *)v649 + 6 * a5);
        long long v405 = (int8x16_t *)((char *)v649 + 5 * a5);
        long long v406 = (int8x16_t *)((char *)v649 + 4 * a5);
        long long v407 = (int8x16_t *)((char *)v649 + 3 * a5);
        unsigned int v408 = *v397;
        unsigned int v409 = v397[1];
        unsigned int v410 = v397[2];
        unsigned int v411 = v397[3];
        long long v412 = (int8x16_t *)((char *)v649 + 2 * a5);
        unsigned int v413 = v397[4];
        long long v649 = v401;
        uint64_t v661 = v399;
        if (v645 >= 8)
        {
          int16x8_t v416 = (int16x8_t)vdupq_n_s32(v408);
          int16x8_t v417 = (int16x8_t)vdupq_n_s32(v409);
          int16x8_t v418 = (int16x8_t)vdupq_n_s32(v410);
          int16x8_t v419 = (int16x8_t)vdupq_n_s32(v411);
          uint16x8_t v420 = (uint16x8_t)vdupq_n_s16(v413);
          unint64_t v421 = v645 - v633;
          if (v645 < 0x10)
          {
            unint64_t v422 = 0;
LABEL_77:
            long long v415 = &v400->u8[v421];
            long long v401 = (int8x16_t *)((char *)v649 + v421);
            long long v412 = (int8x16_t *)((char *)v412 + v421);
            long long v402 = (int8x16_t *)((char *)v402 + v421);
            long long v403 = (int8x16_t *)((char *)v403 + v421);
            long long v404 = (int8x16_t *)((char *)v404 + v421);
            long long v405 = (int8x16_t *)((char *)v405 + v421);
            long long v406 = (int8x16_t *)((char *)v406 + v421);
            long long v407 = (int8x16_t *)((char *)v407 + v421);
            long long v462 = (uint32x4_t *)&a2[v422];
            do
            {
              uint16x8_t v463 = vaddl_u8(*(uint8x8_t *)&v395[v422], *(uint8x8_t *)&v400->i8[v422]);
              uint16x8_t v464 = (uint16x8_t)vuzp1q_s16(v416, v416);
              uint16x8_t v465 = vaddl_u8(*(uint8x8_t *)&v394[v422], *(uint8x8_t *)&v398[v422]);
              uint16x8_t v466 = (uint16x8_t)vuzp1q_s16(v417, v417);
              uint32x4_t v467 = vmull_u16(*(uint16x4_t *)v465.i8, *(uint16x4_t *)v466.i8);
              uint32x4_t v468 = vmlal_high_u16(vmull_high_u16(v465, v466), v463, v464);
              uint32x4_t v469 = vmlal_u16(v467, *(uint16x4_t *)v463.i8, *(uint16x4_t *)v464.i8);
              uint16x8_t v470 = vaddl_u8(*(uint8x8_t *)&v393[v422], *(uint8x8_t *)&v396[v422]);
              uint16x8_t v471 = (uint16x8_t)vuzp1q_s16(v418, v418);
              uint32x4_t v472 = vmlal_u16(v469, *(uint16x4_t *)v470.i8, *(uint16x4_t *)v471.i8);
              uint32x4_t v473 = vmlal_high_u16(v468, v470, v471);
              uint16x8_t v474 = vaddl_u8(*(uint8x8_t *)&v392[v422], *(uint8x8_t *)&v390[v422]);
              uint16x8_t v475 = (uint16x8_t)vuzp1q_s16(v419, v419);
              uint32x4_t v476 = vmlal_high_u16(v473, v474, v475);
              uint32x4_t v477 = vmlal_u16(v472, *(uint16x4_t *)v474.i8, *(uint16x4_t *)v475.i8);
              uint16x8_t v478 = vmovl_u8(*(uint8x8_t *)&v391[v422]);
              *long long v462 = vmlal_u16(v477, *(uint16x4_t *)v420.i8, *(uint16x4_t *)v478.i8);
              v462[1] = vmlal_high_u16(v476, v420, v478);
              v462 += 2;
              v422 += 8;
            }
            while (v421 != v422);
            unint64_t v414 = v421;
            if (!v633) {
              goto LABEL_67;
            }
            goto LABEL_80;
          }
          unint64_t v423 = 0;
          long long v424 = (uint32x4_t *)a2;
          do
          {
            uint8x16_t v425 = (uint8x16_t)v400[v423 / 0x10];
            uint8x16_t v426 = *(uint8x16_t *)&v395[v423];
            uint16x8_t v427 = vaddl_high_u8(v426, v425);
            uint16x8_t v428 = vaddl_u8(*(uint8x8_t *)v426.i8, *(uint8x8_t *)v425.i8);
            uint16x8_t v429 = (uint16x8_t)vuzp1q_s16(v416, v416);
            uint8x16_t v430 = *(uint8x16_t *)&v398[v423];
            uint8x16_t v431 = *(uint8x16_t *)&v394[v423];
            uint16x8_t v432 = vaddl_u8(*(uint8x8_t *)v431.i8, *(uint8x8_t *)v430.i8);
            uint16x8_t v433 = vaddl_high_u8(v431, v430);
            uint16x8_t v434 = (uint16x8_t)vuzp1q_s16(v417, v417);
            uint32x4_t v435 = vmull_u16(*(uint16x4_t *)v433.i8, *(uint16x4_t *)v434.i8);
            uint32x4_t v436 = vmull_u16(*(uint16x4_t *)v432.i8, *(uint16x4_t *)v434.i8);
            uint32x4_t v437 = vmlal_high_u16(vmull_high_u16(v432, v434), v428, v429);
            uint32x4_t v438 = vmlal_high_u16(vmull_high_u16(v433, v434), v427, v429);
            uint32x4_t v439 = vmlal_u16(v436, *(uint16x4_t *)v428.i8, *(uint16x4_t *)v429.i8);
            uint8x16_t v440 = *(uint8x16_t *)&v396[v423];
            uint32x4_t v441 = vmlal_u16(v435, *(uint16x4_t *)v427.i8, *(uint16x4_t *)v429.i8);
            uint8x16_t v442 = *(uint8x16_t *)&v393[v423];
            uint16x8_t v443 = vaddl_u8(*(uint8x8_t *)v442.i8, *(uint8x8_t *)v440.i8);
            uint16x8_t v444 = vaddl_high_u8(v442, v440);
            uint16x8_t v445 = (uint16x8_t)vuzp1q_s16(v418, v418);
            uint32x4_t v446 = vmlal_u16(v441, *(uint16x4_t *)v444.i8, *(uint16x4_t *)v445.i8);
            uint32x4_t v447 = vmlal_u16(v439, *(uint16x4_t *)v443.i8, *(uint16x4_t *)v445.i8);
            uint32x4_t v448 = vmlal_high_u16(v438, v444, v445);
            uint32x4_t v449 = vmlal_high_u16(v437, v443, v445);
            uint8x16_t v450 = *(uint8x16_t *)&v390[v423];
            uint8x16_t v451 = *(uint8x16_t *)&v392[v423];
            uint16x8_t v452 = vaddl_high_u8(v451, v450);
            uint16x8_t v453 = vaddl_u8(*(uint8x8_t *)v451.i8, *(uint8x8_t *)v450.i8);
            uint16x8_t v454 = (uint16x8_t)vuzp1q_s16(v419, v419);
            uint32x4_t v455 = vmlal_high_u16(v449, v453, v454);
            uint32x4_t v456 = vmlal_high_u16(v448, v452, v454);
            uint32x4_t v457 = vmlal_u16(v447, *(uint16x4_t *)v453.i8, *(uint16x4_t *)v454.i8);
            uint32x4_t v458 = vmlal_u16(v446, *(uint16x4_t *)v452.i8, *(uint16x4_t *)v454.i8);
            uint8x16_t v459 = *(uint8x16_t *)&v391[v423];
            uint16x8_t v460 = vmovl_u8(*(uint8x8_t *)v459.i8);
            uint16x8_t v461 = vmovl_high_u8(v459);
            *long long v424 = vmlal_u16(v457, *(uint16x4_t *)v420.i8, *(uint16x4_t *)v460.i8);
            v424[1] = vmlal_high_u16(v455, v420, v460);
            v424[2] = vmlal_u16(v458, *(uint16x4_t *)v420.i8, *(uint16x4_t *)v461.i8);
            v424[3] = vmlal_high_u16(v456, v420, v461);
            v423 += 16;
            v424 += 4;
          }
          while (v635 != v423);
          if (!v634) {
            goto LABEL_67;
          }
          unint64_t v421 = v645 - v633;
          unint64_t v422 = v645 - v634;
          if (v634 >= 8) {
            goto LABEL_77;
          }
          long long v407 = (int8x16_t *)((char *)v407 + v635);
          long long v406 = (int8x16_t *)((char *)v406 + v635);
          long long v405 = (int8x16_t *)((char *)v405 + v635);
          long long v404 = (int8x16_t *)((char *)v404 + v635);
          long long v403 = (int8x16_t *)((char *)v403 + v635);
          long long v402 = (int8x16_t *)((char *)v402 + v635);
          long long v412 = (int8x16_t *)((char *)v412 + v635);
          long long v401 = (int8x16_t *)((char *)v649 + v635);
          long long v415 = &v400->u8[v635];
          unint64_t v414 = v645 - v634;
        }
        else
        {
          unint64_t v414 = 0;
          long long v415 = (unsigned __int8 *)v400;
        }
LABEL_80:
        unint64_t v479 = v645 - v414;
        __n128 v480 = &a2[v414];
        do
        {
          int v482 = *v415++;
          int v481 = v482;
          int v483 = v402->u8[0];
          long long v402 = (int8x16_t *)((char *)v402 + 1);
          int v484 = (v483 + v481) * v408;
          int v486 = v401->u8[0];
          long long v401 = (int8x16_t *)((char *)v401 + 1);
          int v485 = v486;
          int v487 = v403->u8[0];
          long long v403 = (int8x16_t *)((char *)v403 + 1);
          unsigned int v488 = v484 + (v487 + v485) * v409;
          int v490 = v412->u8[0];
          long long v412 = (int8x16_t *)((char *)v412 + 1);
          int v489 = v490;
          int v491 = v404->u8[0];
          long long v404 = (int8x16_t *)((char *)v404 + 1);
          unsigned int v492 = v488 + (v491 + v489) * v410;
          int v494 = v407->u8[0];
          long long v407 = (int8x16_t *)((char *)v407 + 1);
          int v493 = v494;
          int v495 = v405->u8[0];
          long long v405 = (int8x16_t *)((char *)v405 + 1);
          unsigned int v496 = v492 + (v495 + v493) * v411;
          int v497 = v406->u8[0];
          long long v406 = (int8x16_t *)((char *)v406 + 1);
          *v480++ = v496 + v497 * v413;
          --v479;
        }
        while (v479);
LABEL_67:
        long long v397 = a8;
        uint64_t result = sub_2194DBEDC(v647, a2, a4, a8);
        v647 += v640;
        uint64_t v389 = a5;
        uint64_t v399 = v661 + 1;
        v390 += a5;
        v391 += a5;
        v392 += a5;
        v393 += a5;
        v394 += a5;
        v395 += a5;
        v396 += a5;
        v398 += a5;
        if (v661 + 1 == v656) {
          goto LABEL_88;
        }
      }
    }
    uint64_t v498 = v19 - 8;
    uint64_t v499 = (v19 - 8) * a5;
    do
    {
      uint64_t result = sub_2194DBEDC(v387, a2, 0, v18);
      long long v387 = (_WORD *)((char *)v387 + v27);
      --v498;
    }
    while (v498);
    long long v647 = v387;
    long long v649 = (int8x16_t *)((char *)v649 + v499);
  }
  long long v397 = v18;
LABEL_88:
  uint64_t v500 = v649;
  long long v501 = (int8x16_t *)((char *)v649 + v632);
  long long v502 = (uint8x16_t *)&v649->i8[v632 + v632];
  long long v659 = (uint8x16_t *)((char *)v502 + v632);
  unsigned int v662 = v502;
  long long v503 = (uint8x16_t *)((char *)v502 + v632 + v632);
  long long v654 = (uint8x16_t *)((char *)v503 + v632);
  long long v657 = v503;
  long long v504 = (uint8x16_t *)((char *)v503 + v632 + v632);
  long long v505 = (uint8x16_t *)((char *)v504 + v632);
  long long v652 = v504;
  v664[0] = (char *)v504 + v632;
  v664[1] = (char *)v504 + v632;
  v664[2] = (char *)v504 + v632;
  v664[3] = (char *)v504 + v632;
  unint64_t v506 = v645;
  long long v507 = v647;
  int v508 = a4;
  uint64_t v509 = v640;
  if (v647 < v644)
  {
    uint64_t v510 = 0;
    unint64_t v636 = v645 - (a4 & 0xF);
    unint64_t v638 = v645 - (a4 & 7);
    while (1)
    {
      long long v511 = (uint8x16_t *)v500;
      uint64_t v500 = v501;
      long long v512 = v659;
      long long v513 = v662;
      long long v659 = v657;
      unsigned int v662 = v512;
      long long v514 = v654;
      long long v654 = v652;
      long long v657 = v514;
      long long v652 = v505;
      long long v505 = (uint8x16_t *)v664[v510];
      long long v501 = (int8x16_t *)v513;
      if (v508) {
        break;
      }
LABEL_90:
      ++v510;
      uint64_t result = sub_2194DBEDC(v507, a2, v508, v397);
      v507 += v509;
      if (v507 >= v644) {
        return result;
      }
    }
    unsigned int v515 = *v397;
    unsigned int v516 = v397[1];
    unsigned int v517 = v397[2];
    unsigned int v518 = v397[3];
    unsigned int v519 = v397[4];
    if (v506 < 8)
    {
      unint64_t v520 = 0;
      long long v521 = (unsigned __int8 *)v511;
      long long v522 = (unsigned __int8 *)v500;
      long long v523 = (unsigned __int8 *)v662;
      long long v524 = (unsigned __int8 *)v664[v510];
      long long v525 = (unsigned __int8 *)v652;
      __n128 v526 = (unsigned __int8 *)v654;
      __n128 v527 = (unsigned __int8 *)v657;
      __n128 v528 = (unsigned __int8 *)v659;
      __n128 v529 = (unsigned __int8 *)v662;
      goto LABEL_104;
    }
    int16x8_t v530 = (int16x8_t)vdupq_n_s32(v515);
    int16x8_t v531 = (int16x8_t)vdupq_n_s32(v516);
    int16x8_t v532 = (int16x8_t)vdupq_n_s32(v517);
    int16x8_t v533 = (int16x8_t)vdupq_n_s32(v518);
    uint16x8_t v534 = (uint16x8_t)vdupq_n_s16(v519);
    if (v506 >= 0x10)
    {
      unint64_t v536 = v645 - (a4 & 0xF);
      long long v537 = v511;
      long long v538 = (uint8x16_t *)v500;
      long long v539 = v662;
      long long v540 = (uint8x16_t *)v664[v510];
      long long v541 = v652;
      long long v542 = v654;
      long long v543 = v657;
      long long v544 = v659;
      long long v545 = v662;
      long long v546 = (uint32x4_t *)a2;
      do
      {
        uint8x16_t v547 = *v537++;
        uint8x16_t v548 = v547;
        uint8x16_t v549 = *v540++;
        uint16x8_t v550 = vaddl_high_u8(v549, v548);
        uint16x8_t v551 = vaddl_u8(*(uint8x8_t *)v549.i8, *(uint8x8_t *)v548.i8);
        uint8x16_t v552 = *v538++;
        uint8x16_t v553 = v552;
        uint8x16_t v554 = *v541++;
        uint16x8_t v555 = (uint16x8_t)vuzp1q_s16(v530, v530);
        uint16x8_t v556 = vaddl_u8(*(uint8x8_t *)v554.i8, *(uint8x8_t *)v553.i8);
        uint16x8_t v557 = vaddl_high_u8(v554, v553);
        uint16x8_t v558 = (uint16x8_t)vuzp1q_s16(v531, v531);
        uint32x4_t v559 = vmull_u16(*(uint16x4_t *)v557.i8, *(uint16x4_t *)v558.i8);
        uint32x4_t v560 = vmull_u16(*(uint16x4_t *)v556.i8, *(uint16x4_t *)v558.i8);
        uint32x4_t v561 = vmlal_high_u16(vmull_high_u16(v556, v558), v551, v555);
        uint32x4_t v562 = vmlal_high_u16(vmull_high_u16(v557, v558), v550, v555);
        uint32x4_t v563 = vmlal_u16(v560, *(uint16x4_t *)v551.i8, *(uint16x4_t *)v555.i8);
        uint32x4_t v564 = vmlal_u16(v559, *(uint16x4_t *)v550.i8, *(uint16x4_t *)v555.i8);
        uint8x16_t v565 = *v539++;
        uint8x16_t v566 = v565;
        uint8x16_t v567 = *v542++;
        uint16x8_t v568 = vaddl_u8(*(uint8x8_t *)v567.i8, *(uint8x8_t *)v566.i8);
        uint16x8_t v569 = vaddl_high_u8(v567, v566);
        uint16x8_t v570 = (uint16x8_t)vuzp1q_s16(v532, v532);
        uint32x4_t v571 = vmlal_u16(v564, *(uint16x4_t *)v569.i8, *(uint16x4_t *)v570.i8);
        uint32x4_t v572 = vmlal_u16(v563, *(uint16x4_t *)v568.i8, *(uint16x4_t *)v570.i8);
        uint32x4_t v573 = vmlal_high_u16(v562, v569, v570);
        uint8x16_t v574 = *v545++;
        uint8x16_t v575 = v574;
        uint32x4_t v576 = vmlal_high_u16(v561, v568, v570);
        uint8x16_t v577 = *v543++;
        uint16x8_t v578 = vaddl_high_u8(v577, v575);
        uint16x8_t v579 = vaddl_u8(*(uint8x8_t *)v577.i8, *(uint8x8_t *)v575.i8);
        uint16x8_t v580 = (uint16x8_t)vuzp1q_s16(v533, v533);
        uint32x4_t v581 = vmlal_high_u16(v576, v579, v580);
        uint32x4_t v582 = vmlal_high_u16(v573, v578, v580);
        uint32x4_t v583 = vmlal_u16(v572, *(uint16x4_t *)v579.i8, *(uint16x4_t *)v580.i8);
        uint32x4_t v584 = vmlal_u16(v571, *(uint16x4_t *)v578.i8, *(uint16x4_t *)v580.i8);
        uint8x16_t v585 = *v544++;
        uint16x8_t v586 = vmovl_u8(*(uint8x8_t *)v585.i8);
        uint16x8_t v587 = vmovl_high_u8(v585);
        *long long v546 = vmlal_u16(v583, *(uint16x4_t *)v534.i8, *(uint16x4_t *)v586.i8);
        v546[1] = vmlal_high_u16(v581, v534, v586);
        v546[2] = vmlal_u16(v584, *(uint16x4_t *)v534.i8, *(uint16x4_t *)v587.i8);
        v546[3] = vmlal_high_u16(v582, v534, v587);
        v546 += 4;
        v536 -= 16;
      }
      while (v536);
      if ((a4 & 0xF) == 0) {
        goto LABEL_90;
      }
      unint64_t v535 = v645 - (a4 & 0xF);
      if ((a4 & 0xF) < 8uLL)
      {
        unint64_t v520 = v645 - (a4 & 0xF);
        __n128 v529 = &v662->u8[v636];
        __n128 v528 = &v659->u8[v636];
        __n128 v527 = &v657->u8[v636];
        __n128 v526 = &v654->u8[v636];
        long long v525 = &v652->u8[v636];
        long long v524 = &v505->u8[v636];
        long long v523 = &v662->u8[v636];
        long long v522 = &v500->u8[v636];
        long long v521 = &v511->u8[v636];
LABEL_104:
        unint64_t v613 = v506 - v520;
        long long v614 = &a2[v520];
        do
        {
          int v616 = *v521++;
          int v615 = v616;
          int v617 = *v524++;
          int v618 = (v617 + v615) * v515;
          int v620 = *v522++;
          int v619 = v620;
          int v621 = *v525++;
          unsigned int v622 = v618 + (v621 + v619) * v516;
          int v624 = *v523++;
          int v623 = v624;
          int v625 = *v526++;
          unsigned int v626 = v622 + (v625 + v623) * v517;
          int v628 = *v529++;
          int v627 = v628;
          int v629 = *v527++;
          unsigned int v630 = v626 + (v629 + v627) * v518;
          int v631 = *v528++;
          *v614++ = v630 + v631 * v519;
          --v613;
        }
        while (v613);
        goto LABEL_90;
      }
    }
    else
    {
      unint64_t v535 = 0;
    }
    long long v648 = v507;
    long long v650 = v500;
    unint64_t v588 = v645 - (a4 & 7);
    long long v521 = &v511->u8[v638];
    long long v522 = &v500->u8[v638];
    long long v523 = &v662->u8[v638];
    long long v524 = &v505->u8[v638];
    long long v590 = v652;
    long long v589 = v654;
    long long v525 = &v652->u8[v638];
    __n128 v526 = &v654->u8[v638];
    long long v592 = v657;
    long long v591 = v659;
    __n128 v527 = &v657->u8[v638];
    __n128 v528 = &v659->u8[v638];
    long long v593 = v662;
    __n128 v529 = &v662->u8[v638];
    long long v594 = v500;
    long long v595 = v505;
    long long v596 = (uint32x4_t *)&a2[v535];
    do
    {
      uint16x8_t v597 = vaddl_u8(*(uint8x8_t *)&v595->i8[v535], *(uint8x8_t *)&v511->i8[v535]);
      uint16x8_t v598 = (uint16x8_t)vuzp1q_s16(v530, v530);
      uint16x8_t v599 = vaddl_u8(*(uint8x8_t *)&v590->i8[v535], *(uint8x8_t *)&v594->i8[v535]);
      uint16x8_t v600 = (uint16x8_t)vuzp1q_s16(v531, v531);
      uint32x4_t v601 = vmull_u16(*(uint16x4_t *)v599.i8, *(uint16x4_t *)v600.i8);
      uint32x4_t v602 = vmlal_high_u16(vmull_high_u16(v599, v600), v597, v598);
      uint32x4_t v603 = vmlal_u16(v601, *(uint16x4_t *)v597.i8, *(uint16x4_t *)v598.i8);
      uint16x8_t v604 = vaddl_u8(*(uint8x8_t *)&v589->i8[v535], *(uint8x8_t *)&v513->i8[v535]);
      uint16x8_t v605 = (uint16x8_t)vuzp1q_s16(v532, v532);
      uint32x4_t v606 = vmlal_u16(v603, *(uint16x4_t *)v604.i8, *(uint16x4_t *)v605.i8);
      uint32x4_t v607 = vmlal_high_u16(v602, v604, v605);
      uint16x8_t v608 = vaddl_u8(*(uint8x8_t *)&v592->i8[v535], *(uint8x8_t *)&v593->i8[v535]);
      uint16x8_t v609 = (uint16x8_t)vuzp1q_s16(v533, v533);
      uint32x4_t v610 = vmlal_high_u16(v607, v608, v609);
      uint32x4_t v611 = vmlal_u16(v606, *(uint16x4_t *)v608.i8, *(uint16x4_t *)v609.i8);
      uint16x8_t v612 = vmovl_u8(*(uint8x8_t *)&v591->i8[v535]);
      *long long v596 = vmlal_u16(v611, *(uint16x4_t *)v534.i8, *(uint16x4_t *)v612.i8);
      v596[1] = vmlal_high_u16(v610, v534, v612);
      v596 += 2;
      long long v593 = (uint8x16_t *)((char *)v593 + 8);
      long long v591 = (uint8x16_t *)((char *)v591 + 8);
      long long v592 = (uint8x16_t *)((char *)v592 + 8);
      long long v589 = (uint8x16_t *)((char *)v589 + 8);
      long long v590 = (uint8x16_t *)((char *)v590 + 8);
      long long v595 = (uint8x16_t *)((char *)v595 + 8);
      long long v513 = (uint8x16_t *)((char *)v513 + 8);
      long long v594 = (int8x16_t *)((char *)v594 + 8);
      long long v511 = (uint8x16_t *)((char *)v511 + 8);
      v588 -= 8;
    }
    while (v535 != v588);
    unint64_t v520 = v645 - (a4 & 7);
    long long v397 = a8;
    uint64_t v509 = v640;
    int v508 = a4;
    unint64_t v506 = v645;
    long long v507 = v648;
    uint64_t v500 = v650;
    if ((a4 & 7) == 0) {
      goto LABEL_90;
    }
    goto LABEL_104;
  }
  return result;
}

unsigned __int8 *sub_2194D9070(unsigned __int8 *result, unsigned int *a2, unint64_t a3, int a4, int a5, unsigned int a6, int a7, const __int16 *a8)
{
  int v8 = a4;
  uint64_t v9 = (a4 + 1) >> 1;
  uint64_t v10 = &a2[v9];
  v287[0] = a2;
  v287[1] = v10;
  unsigned int v286 = a4 + 1;
  BOOL v11 = &a2[(a4 + 1) & 0xFFFFFFFE];
  v287[2] = v11;
  unint64_t v282 = (unint64_t)(result + 1);
  unsigned int v12 = *(unsigned __int16 *)a8;
  unsigned int v13 = *((unsigned __int16 *)a8 + 1);
  *a2 = (v13 * *result + 2 * result[1] * v12 + 256) >> 9;
  uint64_t v14 = (uint32x4_t *)(a2 + 1);
  unint64_t v15 = (a4 - 1);
  if (v15 < 3)
  {
    int v33 = 2 * v12;
    if (a4 == 3) {
LABEL_19:
    }
      v14->i32[0] = (result[v15] * v13 + v33 * result[a4 - 2] + 256) >> 9;
  }
  else
  {
    unint64_t v16 = v15 - 3;
    if (v15 - 3 >= 0x20
      && (v14 < (uint32x4_t *)&result[(v16 & 0xFFFFFFFFFFFFFFFELL) + 4]
        ? (BOOL v17 = v282 >= (unint64_t)a2 + ((2 * v16) & 0x7FFFFFFFFFFFFFFCLL) + 8)
        : (BOOL v17 = 1),
          v17))
    {
      uint64_t v18 = (v16 >> 1) + 1;
      uint64_t v19 = v18 & 0xF;
      if ((v18 & 0xF) == 0) {
        uint64_t v19 = 16;
      }
      uint64_t v20 = v18 - v19;
      uint64_t v21 = 2 * v20 + 2;
      int16x8_t v22 = (int16x8_t)vdupq_n_s32(v12);
      uint64_t v23 = (uint32x4_t *)((char *)v14 + 4 * v20);
      uint64_t v24 = (const char *)(result + 2);
      uint16x8_t v25 = (uint16x8_t)vuzp1q_s16(v22, v22);
      uint16x8_t v26 = (uint16x8_t)vdupq_n_s16(v13);
      v27.i64[0] = 0x10000000100;
      v27.i64[1] = 0x10000000100;
      do
      {
        long long v28 = v24 - 1;
        unsigned long long v29 = (unsigned __int128)vld2q_s8(v28);
        int8x16x2_t v289 = vld2q_s8(v24);
        v24 += 32;
        uint16x8_t v30 = vaddl_high_u8((uint8x16_t)v289.val[1], (uint8x16_t)v29);
        uint16x8_t v31 = vaddl_u8(*(uint8x8_t *)v289.val[1].i8, *(uint8x8_t *)&v29);
        uint16x8_t v32 = vmovl_u8(*(uint8x8_t *)v289.val[0].i8);
        v289.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v289.val[0]);
        v14[2] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v289.val[0].i8), *(uint16x4_t *)v30.i8, *(uint16x4_t *)v25.i8), v27), 9uLL);
        v14[3] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v26, (uint16x8_t)v289.val[0]), v30, v25), v27), 9uLL);
        uint32x4_t *v14 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v32.i8), *(uint16x4_t *)v31.i8, *(uint16x4_t *)v25.i8), v27), 9uLL);
        v14[1] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v26, v32), v31, v25), v27), 9uLL);
        v14 += 4;
        v20 -= 16;
      }
      while (v20);
      uint64_t v14 = v23;
    }
    else
    {
      uint64_t v21 = 2;
    }
    uint64_t v34 = 0;
    do
    {
      v14->i32[0] = ((result[(v21 + v34) | 1] + result[v21 - 1 + v34]) * v12 + result[v21 + v34] * v13 + 256) >> 9;
      uint64_t v14 = (uint32x4_t *)((char *)v14 + 4);
      v34 += 2;
    }
    while (v21 + v34 < v15);
    int v35 = v21 + v34;
    int v33 = 2 * v12;
    if (v35 == v15) {
      goto LABEL_19;
    }
  }
  unsigned int v36 = &result[a5];
  unsigned int *v10 = (*v36 * v13 + v33 * v36[1] + 256) >> 9;
  unint64_t v37 = (uint32x4_t *)(v10 + 1);
  if (v15 < 3)
  {
    if (a4 == 3) {
LABEL_35:
    }
      v37->i32[0] = (v36[v15] * v13 + v33 * v36[v8 - 2] + 256) >> 9;
  }
  else
  {
    unint64_t v38 = v15 - 3;
    if (v15 - 3 >= 0x20
      && ((unint64_t v39 = v38 >> 1, v40 = &result[a5], v37 >= (uint32x4_t *)&v40[(v38 & 0xFFFFFFFFFFFFFFFELL) + 4])
       || v40 + 1 >= (unsigned __int8 *)&a2[v39 + 2 + v9]))
    {
      unint64_t v42 = v39 + 1;
      uint64_t v43 = (v39 + 1) & 0xF;
      if (!v43) {
        uint64_t v43 = 16;
      }
      unint64_t v44 = v42 - v43;
      uint64_t v41 = 2 * v44 + 2;
      int16x8_t v45 = (int16x8_t)vdupq_n_s32(v12);
      int32x4_t v46 = (uint32x4_t *)((char *)v37 + 4 * v44);
      int32x4_t v47 = (const char *)(v40 + 2);
      uint16x8_t v48 = (uint16x8_t)vuzp1q_s16(v45, v45);
      uint16x8_t v49 = (uint16x8_t)vdupq_n_s16(v13);
      v50.i64[0] = 0x10000000100;
      v50.i64[1] = 0x10000000100;
      do
      {
        unint64_t v51 = v47 - 1;
        unsigned long long v52 = (unsigned __int128)vld2q_s8(v51);
        int8x16x2_t v290 = vld2q_s8(v47);
        v47 += 32;
        uint16x8_t v53 = vaddl_high_u8((uint8x16_t)v290.val[1], (uint8x16_t)v52);
        uint16x8_t v54 = vaddl_u8(*(uint8x8_t *)v290.val[1].i8, *(uint8x8_t *)&v52);
        uint16x8_t v55 = vmovl_u8(*(uint8x8_t *)v290.val[0].i8);
        v290.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v290.val[0]);
        v37[2] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v49.i8, *(uint16x4_t *)v290.val[0].i8), *(uint16x4_t *)v53.i8, *(uint16x4_t *)v48.i8), v50), 9uLL);
        v37[3] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v49, (uint16x8_t)v290.val[0]), v53, v48), v50), 9uLL);
        *unint64_t v37 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v49.i8, *(uint16x4_t *)v55.i8), *(uint16x4_t *)v54.i8, *(uint16x4_t *)v48.i8), v50), 9uLL);
        v37[1] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v49, v55), v54, v48), v50), 9uLL);
        v37 += 4;
        v44 -= 16;
      }
      while (v44);
      unint64_t v37 = v46;
    }
    else
    {
      uint64_t v41 = 2;
    }
    uint64_t v56 = 0;
    do
    {
      v37->i32[0] = ((v36[(v41 + v56) | 1] + v36[v41 - 1 + v56]) * v12 + v36[v41 + v56] * v13 + 256) >> 9;
      unint64_t v37 = (uint32x4_t *)((char *)v37 + 4);
      v56 += 2;
    }
    while (v41 + v56 < v15);
    if (v41 + v56 == v15) {
      goto LABEL_35;
    }
  }
  if (v286 >= 2)
  {
    if (v286 >= 0x10)
    {
      uint64_t v57 = 0;
      unint64_t v58 = a3 + v9;
      BOOL v60 = (unint64_t)&a2[2 * v9] > a3 && (unint64_t)v10 < v58;
      BOOL v62 = (unint64_t)(a8 + 2) > a3 && v58 > (unint64_t)a8;
      BOOL v63 = v58 > (unint64_t)a2 && (unint64_t)v10 > a3;
      if (!v63 && !v60 && !v62)
      {
        uint64_t v64 = 4 * v9;
        if (v286 >= 0x20)
        {
          uint32x4_t v241 = a8;
          uint16x4_t v242 = (uint16x4_t)vld1_dup_s16(v241++);
          uint64_t v57 = v9 & 0x7FFFFFF0;
          int32x4_t v243 = (int32x4_t)vmovl_u16(v242);
          uint16x4_t v244 = (uint16x4_t)vld1_dup_s16(v241);
          int32x4_t v245 = (int32x4_t)vmovl_u16(v244);
          v246.i64[0] = 0x10000000100;
          v246.i64[1] = 0x10000000100;
          uint64_t v247 = v57;
          uint32x4_t v248 = (int32x4_t *)a2;
          uint32x4_t v249 = (int8x16_t *)a3;
          do
          {
            int32x4_t v250 = vmulq_s32(*(int32x4_t *)((char *)&v248[3] + v64), v243);
            int32x4_t v251 = vmulq_s32(*(int32x4_t *)((char *)v248 + 4 * v9), v243);
            int32x4_t v252 = vmulq_s32(*(int32x4_t *)((char *)&v248[1] + v64), v243);
            int32x4_t v253 = vmulq_s32(*(int32x4_t *)((char *)&v248[2] + v64), v243);
            v297.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v253, v253), v248[2], v245), v246), 9uLL);
            v297.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v252, v252), v248[1], v245), v246), 9uLL);
            v297.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v251, v251), *v248, v245), v246), 9uLL);
            v297.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v250, v250), v248[3], v245), v246), 9uLL);
            *v249++ = vqtbl4q_s8(v297, (int8x16_t)xmmword_21950CEF0);
            v248 += 4;
            v247 -= 16;
          }
          while (v247);
          if (v57 == v9) {
            goto LABEL_66;
          }
          if ((v9 & 8) == 0)
          {
            int32x4_t v68 = &a2[v57];
            v10 += v57;
LABEL_64:
            uint64_t v81 = v9 - v57;
            int32x4_t v82 = (unsigned char *)(a3 + v57);
            do
            {
              int v83 = *v10++;
              int v84 = v83 * *(unsigned __int16 *)a8;
              int v85 = *v68++;
              *v82++ = (v85 * *((unsigned __int16 *)a8 + 1) + 2 * v84 + 256) >> 9;
              --v81;
            }
            while (v81);
            goto LABEL_66;
          }
        }
        else
        {
          uint64_t v57 = 0;
        }
        uint64_t v65 = v57;
        uint64_t v57 = v9 & 0x7FFFFFF8;
        int32x4_t v66 = a8;
        uint16x4_t v67 = (uint16x4_t)vld1_dup_s16(v66++);
        v10 += v57;
        int32x4_t v68 = &a2[v57];
        int32x4_t v69 = (int32x4_t)vmovl_u16(v67);
        uint16x4_t v70 = (uint16x4_t)vld1_dup_s16(v66);
        int32x4_t v71 = (int32x4_t)vmovl_u16(v70);
        uint64_t v72 = (void *)(a3 + v65);
        uint64_t v73 = (int32x4_t *)&a2[v65];
        uint64_t v74 = v65 - v57;
        v75.i64[0] = 0x10000000100;
        v75.i64[1] = 0x10000000100;
        do
        {
          int32x4_t v76 = vmulq_s32(*(int32x4_t *)((char *)v73 + 4 * v9), v69);
          int32x4_t v77 = vmulq_s32(*(int32x4_t *)((char *)&v73[1] + v64), v69);
          int32x4_t v79 = *v73;
          int32x4_t v78 = v73[1];
          v73 += 2;
          uint32x4_t v80 = (uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v76, v76), v79, v71), v75);
          v294.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v77, v77), v78, v71), v75), 9uLL);
          v294.val[0] = (int8x16_t)vshrq_n_u32(v80, 9uLL);
          *v72++ = vqtbl2q_s8(v294, (int8x16_t)xmmword_21950CF00).u64[0];
          v74 += 8;
        }
        while (v74);
        if (v57 == v9) {
          goto LABEL_66;
        }
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v57 = 0;
    }
    int32x4_t v68 = a2;
    goto LABEL_64;
  }
LABEL_66:
  uint64_t v86 = a6;
  unint64_t v87 = a3 + a6;
  unint64_t v285 = (a7 - 1);
  if (v285 < 3)
  {
    unint64_t v99 = 2;
    if (a7 == 3) {
      goto LABEL_154;
    }
    return result;
  }
  int v269 = a7;
  unsigned int v270 = a6;
  uint64_t v88 = 0;
  int v271 = v8;
  uint64_t v284 = (v8 - 2);
  uint64_t v278 = v9 + a6;
  uint64_t v277 = v9;
  unint64_t v281 = ((2 * (v15 - 3)) & 0xFFFFFFFFFFFFFFFCLL) + 8;
  int v89 = 2 * a5;
  unsigned int v90 = 3 * a5;
  unint64_t v280 = (unint64_t)&result[((v15 - 3) & 0xFFFFFFFFFFFFFFFELL) + 4];
  unint64_t v283 = v15 - 3;
  unint64_t v91 = ((v15 - 3) >> 1) + 1;
  uint64_t v92 = v91 & 0xF;
  if ((v91 & 0xF) == 0) {
    uint64_t v92 = 16;
  }
  unint64_t v93 = v91 - v92;
  uint64_t v275 = 2 * v93 + 2;
  unint64_t v276 = v93;
  uint64_t v274 = 4 * v93;
  uint64_t v94 = v9 & 0x7FFFFFF0;
  uint64_t v268 = v94;
  uint64_t v95 = v9 & 0x7FFFFFF8;
  uint64_t v272 = v95;
  uint32x4_t v273 = result + 2;
  unint64_t v96 = 2;
  v97.i64[0] = 0x10000000100;
  v97.i64[1] = 0x10000000100;
  unsigned int v98 = 2 * a5;
  unint64_t v99 = 2;
  do
  {
    int v100 = v11;
    int v101 = v89 * v88;
    int v102 = &result[(v96 * a5)];
    unsigned int v103 = *(unsigned __int16 *)a8;
    unsigned int v104 = *((unsigned __int16 *)a8 + 1);
    *int v100 = (v104 * *v102 + 2 * v102[1] * v103 + 256) >> 9;
    unsigned int v105 = (uint32x4_t *)(v100 + 1);
    uint16x8_t v106 = (uint16x8_t)vdupq_n_s16(v104);
    if (v15 < 3)
    {
      if (v15 != 2) {
        goto LABEL_82;
      }
    }
    else
    {
      if (v283 >= 0x20
        && ((uint64_t v107 = (v89 + v101), (unint64_t)v105 < v280 + v107)
          ? (BOOL v108 = v282 + v107 >= (unint64_t)v100 + v281)
          : (BOOL v108 = 1),
            v108))
      {
        unsigned int v109 = (const char *)&v273[v98];
        int v110 = (uint32x4_t *)((char *)v105 + v274);
        int16x8_t v111 = (int16x8_t)vdupq_n_s32(v103);
        unint64_t v112 = v276;
        do
        {
          int8x16_t v113 = v109 - 1;
          unsigned long long v114 = (unsigned __int128)vld2q_s8(v113);
          int8x16x2_t v291 = vld2q_s8(v109);
          v109 += 32;
          uint16x8_t v115 = vaddl_high_u8((uint8x16_t)v291.val[1], (uint8x16_t)v114);
          uint16x8_t v116 = vaddl_u8(*(uint8x8_t *)v291.val[1].i8, *(uint8x8_t *)&v114);
          uint16x8_t v117 = (uint16x8_t)vuzp1q_s16(v111, v111);
          uint16x8_t v118 = vmovl_u8(*(uint8x8_t *)v291.val[0].i8);
          v291.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v291.val[0]);
          v105[2] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v106.i8, *(uint16x4_t *)v291.val[0].i8), *(uint16x4_t *)v115.i8, *(uint16x4_t *)v117.i8), v97), 9uLL);
          v105[3] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v106, (uint16x8_t)v291.val[0]), v115, v117), v97), 9uLL);
          *unsigned int v105 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v106.i8, *(uint16x4_t *)v118.i8), *(uint16x4_t *)v116.i8, *(uint16x4_t *)v117.i8), v97), 9uLL);
          v105[1] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v106, v118), v116, v117), v97), 9uLL);
          v105 += 4;
          v112 -= 16;
        }
        while (v112);
        uint64_t v119 = v275;
        unsigned int v105 = v110;
      }
      else
      {
        uint64_t v119 = 2;
      }
      uint64_t v121 = 0;
      do
      {
        v105->i32[0] = ((v102[(v119 + v121) | 1] + result[v98 - 1 + v119 + v121]) * v103
                      + result[v98 + v119 + v121] * v104
                      + 256) >> 9;
        unsigned int v105 = (uint32x4_t *)((char *)v105 + 4);
        v121 += 2;
      }
      while (v119 + v121 < v15);
      if (v119 + v121 != v15)
      {
LABEL_82:
        int v120 = 2 * v103;
        goto LABEL_88;
      }
    }
    int v120 = 2 * v103;
    v105->i32[0] = (v102[v15] * v104 + 2 * v103 * v102[v284] + 256) >> 9;
LABEL_88:
    if (v99 == 2) {
      unint64_t v122 = 0;
    }
    else {
      unint64_t v122 = v99 + 1;
    }
    uint64_t v123 = (unsigned int *)v287[v122];
    uint64_t v124 = &result[(v96 | 1) * a5];
    unsigned int *v123 = (*v124 * v104 + v120 * v124[1] + 256) >> 9;
    uint64_t v125 = (uint32x4_t *)(v123 + 1);
    if (v15 < 3)
    {
      if (v15 == 2) {
        goto LABEL_107;
      }
    }
    else
    {
      if (v283 >= 0x20
        && ((uint64_t v126 = (v101 + 3 * a5), (unint64_t)v125 < v280 + v126)
          ? (BOOL v127 = v282 + v126 >= (unint64_t)v123 + v281)
          : (BOOL v127 = 1),
            v127))
      {
        int32x4_t v128 = (const char *)&v273[v90];
        int32x4_t v129 = (uint32x4_t *)((char *)v125 + v274);
        int16x8_t v130 = (int16x8_t)vdupq_n_s32(v103);
        unint64_t v131 = v276;
        do
        {
          uint16x8_t v132 = v128 - 1;
          unsigned long long v133 = (unsigned __int128)vld2q_s8(v132);
          int8x16x2_t v292 = vld2q_s8(v128);
          v128 += 32;
          uint16x8_t v134 = vaddl_high_u8((uint8x16_t)v292.val[1], (uint8x16_t)v133);
          uint16x8_t v135 = vaddl_u8(*(uint8x8_t *)v292.val[1].i8, *(uint8x8_t *)&v133);
          uint16x8_t v136 = (uint16x8_t)vuzp1q_s16(v130, v130);
          uint16x8_t v137 = vmovl_u8(*(uint8x8_t *)v292.val[0].i8);
          v292.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v292.val[0]);
          v125[2] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v106.i8, *(uint16x4_t *)v292.val[0].i8), *(uint16x4_t *)v134.i8, *(uint16x4_t *)v136.i8), v97), 9uLL);
          v125[3] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v106, (uint16x8_t)v292.val[0]), v134, v136), v97), 9uLL);
          *uint64_t v125 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v106.i8, *(uint16x4_t *)v137.i8), *(uint16x4_t *)v135.i8, *(uint16x4_t *)v136.i8), v97), 9uLL);
          v125[1] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v106, v137), v135, v136), v97), 9uLL);
          v125 += 4;
          v131 -= 16;
        }
        while (v131);
        uint64_t v138 = v275;
        uint64_t v125 = v129;
      }
      else
      {
        uint64_t v138 = 2;
      }
      uint64_t v139 = 0;
      do
      {
        v125->i32[0] = ((v124[(v138 + v139) | 1] + result[v90 - 1 + v138 + v139]) * v103
                      + result[v90 + v138 + v139] * v104
                      + 256) >> 9;
        uint64_t v125 = (uint32x4_t *)((char *)v125 + 4);
        v139 += 2;
      }
      while (v138 + v139 < v15);
      if (v138 + v139 == v15) {
LABEL_107:
      }
        v125->i32[0] = (v124[v15] * v104 + v120 * v124[v284] + 256) >> 9;
    }
    unint64_t v99 = (v99 + 2) % 3;
    BOOL v11 = (unsigned int *)v287[v99];
    if (v286 < 2) {
      goto LABEL_70;
    }
    if (v286 < 0x10)
    {
      uint64_t v140 = 0;
LABEL_111:
      int32x4_t v141 = (unsigned int *)v287[v99];
      int32x4_t v142 = v100;
      int8x16_t v143 = v123;
      do
      {
LABEL_112:
        int v145 = *v141++;
        int v144 = v145;
        int v146 = *v143++;
        int v147 = v146 + v144;
        int v148 = *v142++;
        *(unsigned char *)(v87 + v140++) = (v148 * *((unsigned __int16 *)a8 + 1)
                                  + v147 * *(unsigned __int16 *)a8
                                  + 256) >> 9;
      }
      while (v9 != v140);
      goto LABEL_70;
    }
    uint64_t v140 = 0;
    unint64_t v149 = a3 + v278 + v88 * v86;
    BOOL v151 = v87 < (unint64_t)&v123[v277] && (unint64_t)v123 < v149;
    BOOL v153 = v87 < (unint64_t)(a8 + 2) && v149 > (unint64_t)a8;
    BOOL v155 = v87 < (unint64_t)&v100[v277] && (unint64_t)v100 < v149;
    BOOL v156 = (unint64_t)v11 >= v149 || v87 >= (unint64_t)&v11[v277];
    if (!v156 || v151 || v153 || v155) {
      goto LABEL_111;
    }
    if (v286 >= 0x20)
    {
      uint64_t v174 = 0;
      int32x4_t v175 = a8;
      uint16x4_t v176 = (uint16x4_t)vld1_dup_s16(v175++);
      int32x4_t v177 = (int32x4_t)vmovl_u16(v176);
      uint16x4_t v178 = (uint16x4_t)vld1_dup_s16(v175);
      int32x4_t v179 = (int32x4_t)vmovl_u16(v178);
      uint32x4_t v180 = (int32x4_t *)v287[v99];
      unint64_t v181 = (int32x4_t *)v100;
      __n128 v182 = (int32x4_t *)v123;
      do
      {
        v296.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(v181[2], v179), vaddq_s32(v182[2], v180[2]), v177), v97), 9uLL);
        v296.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(v181[1], v179), vaddq_s32(v182[1], v180[1]), v177), v97), 9uLL);
        v296.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(*v181, v179), vaddq_s32(*v182, *v180), v177), v97), 9uLL);
        v296.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(v181[3], v179), vaddq_s32(v182[3], v180[3]), v177), v97), 9uLL);
        *(int8x16_t *)(v87 + v174) = vqtbl4q_s8(v296, (int8x16_t)xmmword_21950CEF0);
        v174 += 16;
        v182 += 4;
        v181 += 4;
        v180 += 4;
      }
      while (v94 != v174);
      if (v94 == v9) {
        goto LABEL_70;
      }
      uint64_t v157 = v9 & 0x7FFFFFF0;
      if ((v9 & 8) == 0)
      {
        int8x16_t v143 = &v123[v268];
        int32x4_t v142 = &v100[v268];
        int32x4_t v141 = &v11[v268];
        uint64_t v140 = v9 & 0x7FFFFFF0;
        goto LABEL_112;
      }
    }
    else
    {
      uint64_t v157 = 0;
    }
    int32x4_t v141 = &v11[v272];
    int32x4_t v142 = &v100[v272];
    int8x16_t v143 = &v123[v272];
    uint16x8_t v158 = a8;
    uint16x4_t v159 = (uint16x4_t)vld1_dup_s16(v158++);
    uint16x4_t v160 = (uint16x4_t)vld1_dup_s16(v158);
    int32x4_t v161 = (int32x4_t)vmovl_u16(v159);
    int32x4_t v162 = (int32x4_t)vmovl_u16(v160);
    __n128 v163 = (int32x4_t *)&v123[v157];
    long long v164 = (int32x4_t *)&v100[v157];
    long long v165 = (int32x4_t *)&v11[v157];
    do
    {
      int32x4_t v166 = *v165;
      int32x4_t v167 = v165[1];
      v165 += 2;
      int32x4_t v168 = *v163;
      int32x4_t v169 = v163[1];
      v163 += 2;
      int32x4_t v170 = vaddq_s32(v169, v167);
      int32x4_t v171 = vaddq_s32(v168, v166);
      int32x4_t v173 = *v164;
      int32x4_t v172 = v164[1];
      v164 += 2;
      v288.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(v172, v162), v170, v161), v97), 9uLL);
      v288.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(v173, v162), v171, v161), v97), 9uLL);
      *(void *)(v87 + v157) = vqtbl2q_s8(v288, (int8x16_t)xmmword_21950CF00).u64[0];
      v157 += 8;
    }
    while (v95 != v157);
    uint64_t v140 = v9 & 0x7FFFFFF8;
    if (v95 != v9) {
      goto LABEL_112;
    }
LABEL_70:
    v96 += 2;
    v87 += v86;
    ++v88;
    v98 += v89;
    v90 += v89;
  }
  while (v96 < v285);
  a6 = v270;
  int v8 = v271;
  a7 = v269;
  if (v96 != v285) {
    return result;
  }
LABEL_154:
  if (v87 >= a3 + ((a7 + 1) >> 1) * a6) {
    sub_219509818();
  }
  __n128 v183 = (unsigned int *)v287[v99];
  uint64_t v184 = (v285 * a5);
  long long v185 = &result[v184];
  unsigned int v186 = *(unsigned __int16 *)a8;
  unsigned int v187 = *((unsigned __int16 *)a8 + 1);
  *__n128 v183 = (v187 * result[v184] + 2 * result[v184 + 1] * v186 + 256) >> 9;
  int v188 = (uint32x4_t *)(v183 + 1);
  if (v15 < 3)
  {
    if (v15 == 2) {
      goto LABEL_173;
    }
  }
  else
  {
    unint64_t v189 = v15 - 3;
    if (v15 - 3 >= 0x20
      && ((int v190 = &result[v184],
           unint64_t v191 = (unint64_t)&result[v184 + 1],
           v188 < (uint32x4_t *)&v190[(v189 & 0xFFFFFFFFFFFFFFFELL) + 4])
        ? (BOOL v192 = v191 >= (unint64_t)v183 + ((2 * v189) & 0x7FFFFFFFFFFFFFFCLL) + 8)
        : (BOOL v192 = 1),
          v192))
    {
      uint64_t v193 = (v189 >> 1) + 1;
      uint64_t v194 = v193 & 0xF;
      if ((v193 & 0xF) == 0) {
        uint64_t v194 = 16;
      }
      uint64_t v195 = v193 - v194;
      uint64_t v196 = 2 * v195 + 2;
      int16x8_t v197 = (int16x8_t)vdupq_n_s32(v186);
      int v198 = (uint32x4_t *)((char *)v188 + 4 * v195);
      int v199 = (const char *)(v190 + 2);
      uint16x8_t v200 = (uint16x8_t)vuzp1q_s16(v197, v197);
      uint16x8_t v201 = (uint16x8_t)vdupq_n_s16(v187);
      v202.i64[0] = 0x10000000100;
      v202.i64[1] = 0x10000000100;
      do
      {
        long long v203 = v199 - 1;
        unsigned long long v204 = (unsigned __int128)vld2q_s8(v203);
        int8x16x2_t v293 = vld2q_s8(v199);
        v199 += 32;
        uint16x8_t v205 = vaddl_high_u8((uint8x16_t)v293.val[1], (uint8x16_t)v204);
        uint16x8_t v206 = vaddl_u8(*(uint8x8_t *)v293.val[1].i8, *(uint8x8_t *)&v204);
        uint16x8_t v207 = vmovl_u8(*(uint8x8_t *)v293.val[0].i8);
        v293.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v293.val[0]);
        v188[2] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v201.i8, *(uint16x4_t *)v293.val[0].i8), *(uint16x4_t *)v205.i8, *(uint16x4_t *)v200.i8), v202), 9uLL);
        v188[3] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v201, (uint16x8_t)v293.val[0]), v205, v200), v202), 9uLL);
        *int v188 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v201.i8, *(uint16x4_t *)v207.i8), *(uint16x4_t *)v206.i8, *(uint16x4_t *)v200.i8), v202), 9uLL);
        v188[1] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v201, v207), v206, v200), v202), 9uLL);
        v188 += 4;
        v195 -= 16;
      }
      while (v195);
      int v188 = v198;
    }
    else
    {
      uint64_t v196 = 2;
    }
    uint64_t result = 0;
    do
    {
      v188->i32[0] = ((v185[(unint64_t)&result[v196] | 1] + v185[v196 - 1 + (void)result]) * v186
                    + v185[v196 + (void)result] * v187
                    + 256) >> 9;
      int v188 = (uint32x4_t *)((char *)v188 + 4);
      result += 2;
    }
    while ((unint64_t)&result[v196] < v15);
    if (v196 + result == v15) {
LABEL_173:
    }
      v188->i32[0] = (v185[v15] * v187 + 2 * v186 * v185[v8 - 2] + 256) >> 9;
  }
  if (v286 >= 2)
  {
    unsigned int v208 = (int32x4_t *)v287[(v99 + 2) % 3];
    if (v286 < 0x10)
    {
      uint64_t v209 = 0;
      goto LABEL_177;
    }
    uint64_t v209 = 0;
    unint64_t v217 = v87 + v9;
    BOOL v219 = v87 < (unint64_t)(a8 + 2) && v217 > (unint64_t)a8;
    BOOL v221 = v87 < (unint64_t)&v183[v9] && (unint64_t)v183 < v217;
    BOOL v222 = (unint64_t)v208 >= v217 || v87 >= (unint64_t)v208 + 4 * v9;
    if (!v222 || v219 || v221)
    {
LABEL_177:
      unsigned int v210 = v208;
      unsigned int v211 = v183;
    }
    else if (v286 >= 0x20)
    {
      uint16x8_t v254 = a8;
      uint16x4_t v255 = (uint16x4_t)vld1_dup_s16(v254++);
      uint64_t v209 = v9 & 0x7FFFFFF0;
      int32x4_t v256 = (int32x4_t)vmovl_u16(v255);
      uint16x4_t v257 = (uint16x4_t)vld1_dup_s16(v254);
      int32x4_t v258 = (int32x4_t)vmovl_u16(v257);
      v259.i64[0] = 0x10000000100;
      v259.i64[1] = 0x10000000100;
      uint64_t v260 = v209;
      long long v261 = v208;
      long long v262 = (int32x4_t *)v183;
      int32x4_t v263 = (int8x16_t *)v87;
      do
      {
        int32x4_t v264 = vmulq_s32(v261[3], v256);
        int32x4_t v265 = vmulq_s32(v261[2], v256);
        int32x4_t v266 = vmulq_s32(*v261, v256);
        int32x4_t v267 = vmulq_s32(v261[1], v256);
        v298.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v267, v267), v262[1], v258), v259), 9uLL);
        v298.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v266, v266), *v262, v258), v259), 9uLL);
        v298.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v265, v265), v262[2], v258), v259), 9uLL);
        v298.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v264, v264), v262[3], v258), v259), 9uLL);
        *v263++ = vqtbl4q_s8(v298, (int8x16_t)xmmword_21950CEF0);
        v262 += 4;
        v261 += 4;
        v260 -= 16;
      }
      while (v260);
      if (v209 == v9) {
        return result;
      }
      if ((v9 & 8) != 0) {
        goto LABEL_202;
      }
      unsigned int v211 = &v183[v209];
      unsigned int v210 = (int32x4_t *)((char *)v208 + 4 * v209);
    }
    else
    {
      uint64_t v209 = 0;
LABEL_202:
      uint64_t v223 = v209;
      uint64_t v209 = v9 & 0x7FFFFFF8;
      unsigned int v210 = (int32x4_t *)((char *)v208 + 4 * v209);
      unsigned int v211 = &v183[v209];
      uint16x8_t v224 = a8;
      uint16x4_t v225 = (uint16x4_t)vld1_dup_s16(v224++);
      int32x4_t v226 = (int32x4_t)vmovl_u16(v225);
      uint16x4_t v227 = (uint16x4_t)vld1_dup_s16(v224);
      int32x4_t v228 = (int32x4_t)vmovl_u16(v227);
      int32x4_t v229 = (void *)(v87 + v223);
      int32x4_t v230 = (int32x4_t *)&v183[v223];
      int32x4_t v231 = (int32x4_t *)((char *)v208 + 4 * v223);
      uint64_t v232 = v223 - v209;
      v233.i64[0] = 0x10000000100;
      v233.i64[1] = 0x10000000100;
      do
      {
        int32x4_t v235 = *v231;
        int32x4_t v234 = v231[1];
        v231 += 2;
        int32x4_t v236 = vmulq_s32(v235, v226);
        int32x4_t v237 = vmulq_s32(v234, v226);
        int32x4_t v239 = *v230;
        int32x4_t v238 = v230[1];
        v230 += 2;
        uint32x4_t v240 = (uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v236, v236), v239, v228), v233);
        v295.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v237, v237), v238, v228), v233), 9uLL);
        v295.val[0] = (int8x16_t)vshrq_n_u32(v240, 9uLL);
        *v229++ = vqtbl2q_s8(v295, (int8x16_t)xmmword_21950CF00).u64[0];
        v232 += 8;
      }
      while (v232);
      if (v209 == v9) {
        return result;
      }
    }
    uint64_t v212 = v9 - v209;
    long long v213 = (unsigned char *)(v87 + v209);
    do
    {
      __int32 v214 = v210->i32[0];
      unsigned int v210 = (int32x4_t *)((char *)v210 + 4);
      int v215 = v214 * *(unsigned __int16 *)a8;
      int v216 = *v211++;
      *v213++ = (v216 * *((unsigned __int16 *)a8 + 1) + 2 * v215 + 256) >> 9;
      --v212;
    }
    while (v212);
  }
  return result;
}

unint64_t *sub_2194DA11C(unint64_t *result, double a2, double a3, double a4, double a5, double a6, double a7, double a8, int8x16_t a9)
{
  __int16 v33 = 0;
  long long v32 = xmmword_21950CF34;
  __int16 v31 = 2;
  double v9 = 1.60212244e-306;
  long long v30 = xmmword_21950CF46;
  uint64_t v10 = (void *)result[6];
  if (v10[2] >= 2uLL)
  {
    BOOL v11 = result;
    uint64_t v12 = 0;
    unint64_t v13 = *result;
    unint64_t v14 = result[1];
    unint64_t v15 = 1;
    unint64_t v17 = result[7];
    unint64_t v16 = result[8];
    do
    {
      unint64_t v14 = (v14 + 1) >> 1;
      unint64_t v13 = (v13 + 1) >> 1;
      uint64_t v18 = 144 * v10[3] * v15;
      sub_2194D792C(*(int8x16_t **)(*(void *)(v16 + 48) + v12 + 72), (unsigned int *)v11[18], *(_WORD **)(*(void *)(v17 + 48) + v18 + 72), v13, *(void *)(*(void *)(v16 + 48) + v12 + 40), *(void *)(*(void *)(v17 + 48) + v18 + 40), v14, (unsigned __int16 *)&v32, v9, a3, a4, a5, a6, a7, a8, a9);
      sub_2194DC280(*(void *)(*(void *)(v17 + 48) + v18 + 72), *(void *)(v10[6] + v18 + 72), v13, *(void *)(*(void *)(v17 + 48) + v18 + 40), *(void *)(v10[6] + v18 + 40), v14);
      v18 += 144;
      sub_2194D792C(*(int8x16_t **)(*(void *)(v16 + 48) + v12 + 72), (unsigned int *)v11[18], *(_WORD **)(*(void *)(v17 + 48) + v18 + 72), v13, *(void *)(*(void *)(v16 + 48) + v12 + 40), *(void *)(*(void *)(v17 + 48) + v18 + 40), v14, (unsigned __int16 *)&v30, v19, v20, v21, v22, v23, v24, v25, v26);
      uint64_t result = (unint64_t *)sub_2194DC280(*(void *)(*(void *)(v17 + 48) + v18 + 72), *(void *)(v10[6] + v18 + 72), v13, *(void *)(*(void *)(v17 + 48) + v18 + 40), *(void *)(v10[6] + v18 + 40), v14);
      unint64_t v27 = v10[2];
      if (v15 < v27 - 1)
      {
        __int16 v29 = 109;
        int v28 = 19267693;
        uint64_t result = (unint64_t *)sub_2194D9070(*(unsigned __int8 **)(*(void *)(v16 + 48) + v12 + 72), (unsigned int *)v11[18], *(void *)(*(void *)(v16 + 48) + v12 + 216), v13, *(_DWORD *)(*(void *)(v16 + 48) + v12 + 40), *(_DWORD *)(*(void *)(v16 + 48) + v12 + 184), v14, (const __int16 *)&v28);
        unint64_t v27 = v10[2];
      }
      ++v15;
      v12 += 144;
    }
    while (v15 < v27);
  }
  return result;
}

unint64_t *sub_2194DA300(unint64_t *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  sub_2194D77E8((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

  return sub_2194DA11C(a1, v11, v12, v13, v14, v15, v16, v17, v18);
}

void sub_2194DA338(void *a1)
{
  *a1 = &unk_26CAD69C8;
  long long v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  long long v3 = (std::__shared_weak_count *)a1[12];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)a1[10];
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)a1[10];
    if (!v4) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_9:

  JUMPOUT(0x21D48B5B0);
}

void *sub_2194DA444(void *result)
{
  if (result[2])
  {
    if (result[3])
    {
      MEMORY[0x21D48B9F0](&v1, result[1], *result, 8, 0);
      operator new();
    }
  }
  return result;
}

void sub_2194DABFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  long long v32 = *v28;
  if (*v28)
  {
    v29[16] = v32;
    operator delete(v32);
  }
  __int16 v33 = (std::__shared_weak_count *)v29[12];
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  uint64_t v34 = (std::__shared_weak_count *)v29[10];
  if (v34)
  {
    if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  *(void *)(a19 + 56) = v29;
  sub_2194B382C(&a28);
  sub_21947E0B8(v30 - 136);
  _Unwind_Resume(a1);
}

void sub_2194DACDC(void *a1)
{
  __cxa_begin_catch(a1);
  free(v1);
  __cxa_rethrow();
}

void sub_2194DACF0(_Unwind_Exception *a1)
{
}

void sub_2194DAD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  if (__p)
  {
    a44 = (uint64_t)__p;
    operator delete(__p);
  }
  int32x4_t v46 = a40;
  if (a40 && !atomic_fetch_add(&a40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  int32x4_t v47 = a38;
  if (a38)
  {
    if (!atomic_fetch_add(&a38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  sub_21947E0B8((uint64_t)&a26);
  sub_21947E0B8(v44 - 136);
  _Unwind_Resume(a1);
}

void sub_2194DADC4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D48B5B0);
}

void sub_2194DADFC(uint64_t a1)
{
}

uint64_t sub_2194DAE04(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio16image_processing17ScaleSpacePyramidIhE23MakevImage_BufferSharedEPvEUlPhE_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3vio16image_processing17ScaleSpacePyramidIhE23MakevImage_BufferSharedEPvEUlPhE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio16image_processing17ScaleSpacePyramidIhE23MakevImage_BufferSharedEPvEUlPhE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio16image_processing17ScaleSpacePyramidIhE23MakevImage_BufferSharedEPvEUlPhE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t sub_2194DAE78(void *a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7) {
    sub_219486AE4();
  }
  if (0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v6 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7) {
      sub_219486AFC();
    }
    std::string::size_type v7 = (char *)operator new(144 * v6);
  }
  else
  {
    std::string::size_type v7 = 0;
  }
  uint64_t v19 = (uint64_t)&v7[144 * v3];
  *((void *)&v20 + 1) = &v7[144 * v6];
  sub_2194B3F30(v19, a2);
  uint64_t v8 = 0;
  uint64_t v10 = (char *)*a1;
  for (uint64_t i = a1[1]; (char *)(i + v8) != v10; sub_2194B3998(v8 + v19, v8 + i))
    v8 -= 144;
  double v12 = (char *)*a1;
  double v11 = (char *)a1[1];
  *a1 = v19 + v8;
  *(void *)&long long v20 = v19 + 144;
  *(_OWORD *)(a1 + 1) = v20;
  if (v11 != v12)
  {
    double v13 = v11 - 144;
    double v14 = v11 - 144;
    double v15 = v11 - 144;
    do
    {
      double v16 = *(void (***)(char *))v15;
      v15 -= 144;
      (*v16)(v14);
      v13 -= 144;
      BOOL v17 = v14 == v12;
      double v14 = v15;
    }
    while (!v17);
  }
  if (v12) {
    operator delete(v12);
  }
  return v19 + 144;
}

void sub_2194DB024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2194B3928((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2194DB064(void *result)
{
  if (result[2])
  {
    if (result[3])
    {
      MEMORY[0x21D48B9F0](&v1, result[1], *result, 16, 0);
      operator new();
    }
  }
  return result;
}

void sub_2194DB850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __int16 v33 = *v29;
  if (*v29)
  {
    v30[16] = v33;
    operator delete(v33);
  }
  uint64_t v34 = (std::__shared_weak_count *)v30[12];
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  int v35 = (std::__shared_weak_count *)v30[10];
  if (v35)
  {
    if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  *(void *)(v28 + 56) = v30;
  sub_2194B249C(&a28);
  sub_21947E0B8(v31 - 136);
  _Unwind_Resume(a1);
}

void sub_2194DB928(void *a1)
{
  __cxa_begin_catch(a1);
  free(v1);
  __cxa_rethrow();
}

void sub_2194DB93C(_Unwind_Exception *a1)
{
}

void sub_2194DB950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  if (__p)
  {
    a44 = (uint64_t)__p;
    operator delete(__p);
  }
  int32x4_t v46 = a40;
  if (a40 && !atomic_fetch_add(&a40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  int32x4_t v47 = a38;
  if (a38)
  {
    if (!atomic_fetch_add(&a38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  sub_21947E0B8((uint64_t)&a26);
  sub_21947E0B8(v44 - 136);
  _Unwind_Resume(a1);
}

void sub_2194DBA10(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D48B5B0);
}

void sub_2194DBA48(uint64_t a1)
{
}

uint64_t sub_2194DBA50(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio16image_processing17ScaleSpacePyramidItE23MakevImage_BufferSharedEPvEUlPtE_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3vio16image_processing17ScaleSpacePyramidItE23MakevImage_BufferSharedEPvEUlPtE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio16image_processing17ScaleSpacePyramidItE23MakevImage_BufferSharedEPvEUlPtE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio16image_processing17ScaleSpacePyramidItE23MakevImage_BufferSharedEPvEUlPtE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t sub_2194DBAC4(void *a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7) {
    sub_219486AE4();
  }
  if (0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v6 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7) {
      sub_219486AFC();
    }
    std::string::size_type v7 = (char *)operator new(144 * v6);
  }
  else
  {
    std::string::size_type v7 = 0;
  }
  uint64_t v19 = (uint64_t)&v7[144 * v3];
  *((void *)&v20 + 1) = &v7[144 * v6];
  sub_2194B2BA4(v19, a2);
  uint64_t v8 = 0;
  uint64_t v10 = (char *)*a1;
  for (uint64_t i = a1[1]; (char *)(i + v8) != v10; sub_2194B2608(v8 + v19, v8 + i))
    v8 -= 144;
  double v12 = (char *)*a1;
  double v11 = (char *)a1[1];
  *a1 = v19 + v8;
  *(void *)&long long v20 = v19 + 144;
  *(_OWORD *)(a1 + 1) = v20;
  if (v11 != v12)
  {
    double v13 = v11 - 144;
    double v14 = v11 - 144;
    double v15 = v11 - 144;
    do
    {
      double v16 = *(void (***)(char *))v15;
      v15 -= 144;
      (*v16)(v14);
      v13 -= 144;
      BOOL v17 = v14 == v12;
      double v14 = v15;
    }
    while (!v17);
  }
  if (v12) {
    operator delete(v12);
  }
  return v19 + 144;
}

void sub_2194DBC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2194B2598((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2194DBCB0(uint64_t a1, long long *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t *a9)
{
  if (a8) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = 0;
  }
  if (a7 + a6 * a3 + v9 > a4) {
    sub_219507E54();
  }
  char v10 = a8;
  uint64_t v17 = a8;
  long long v18 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v18;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = *(void *)(a1 + 120);
  *(unsigned char *)(a1 + 8) = v10;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = a5;
  *(void *)(a1 + 16) = a6;
  *(void *)(a1 + 24) = a7;
  uint64_t v21 = *a9;
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a9 + 8);
  *(void *)(a1 + 104) = v21;
  uint64_t v22 = v17 | (4 * a6);
  *(void *)(a1 + 56) = v22 + a7;
  *(void *)(a1 + 64) = v22;
  unint64_t v23 = (*(void *)(a1 + 128) - v20) >> 3;
  if (a5 > v23)
  {
    sub_21949D5EC((void **)(a1 + 120), a5 - v23);
LABEL_13:
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    do
    {
      *(void *)(*(void *)(a1 + 120) + 8 * v25++) = *(void *)(a1 + 72) + v24;
      v24 += 4 * a4;
    }
    while (a5 != v25);
    return;
  }
  if (a5 < v23) {
    *(void *)(a1 + 128) = v20 + 8 * a5;
  }
  if (a5) {
    goto LABEL_13;
  }
}

void sub_2194DBE10(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D48B5B0);
}

uint64_t sub_2194DBE48(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x21D48B570);
  }
  return result;
}

uint64_t sub_2194DBE68(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3vio8cv_types12ArrayDeleterIjEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"N4cv3d3vio8cv_types12ArrayDeleterIjEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3vio8cv_types12ArrayDeleterIjEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3vio8cv_types12ArrayDeleterIjEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t sub_2194DBEDC(_WORD *a1, unsigned int *a2, int a3, unsigned __int16 *a4)
{
  unsigned int v4 = *a2;
  unsigned int v5 = a2[1];
  unsigned int v7 = a2[4];
  unsigned int v6 = a2[5];
  unsigned int v8 = *a4;
  unsigned int v10 = a2[2];
  unsigned int v9 = a2[3];
  unsigned int v11 = a4[1];
  unsigned int v12 = a4[2];
  unsigned int v13 = a4[3];
  unsigned int v14 = a4[4];
  *a1 = ((v9 + *a2) * v11 + (v7 + *a2) * v8 + (v10 + *a2) * v12 + (v5 + *a2) * v13 + *a2 * v14 + 512) >> 10;
  a1[1] = ((v9 + v4) * v12 + (v7 + v4) * v11 + (v10 + v4) * v13 + v5 * v14 + (v6 + v4) * v8 + 512) >> 10;
  unsigned int v15 = a2[7];
  unsigned int v16 = a2[6] + v4;
  a1[2] = ((v5 + v9) * v13 + (v7 + v4) * v12 + v10 * v14 + (v6 + v4) * v11 + v16 * v8 + 512) >> 10;
  uint64_t v17 = (int16x8_t *)(a1 + 4);
  a1[3] = (v9 * v14 + (v10 + v7) * v13 + (v6 + v5) * v12 + v16 * v11 + (v15 + v4) * v8 + 512) >> 10;
  uint64_t v18 = (a3 - 4);
  if (v18 >= 5)
  {
    uint64_t v19 = v18 - 4;
    if ((unint64_t)(v18 - 4) >= 8)
    {
      unint64_t v20 = 4;
      if ((~(a3 - 9) & 0xFFFFFFF8) != 0 && (a3 - 9) <= 0xFFFFFFF8)
      {
        uint64_t v21 = 0;
        unint64_t v22 = v19 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFF8 | 4;
        int32x4_t v23 = vdupq_n_s32(v7);
        int32x4_t v24 = vdupq_n_s32(v9);
        int8x16_t v25 = (int8x16_t)vdupq_n_s32(v10);
        int8x16_t v26 = (int8x16_t)vdupq_n_s32(v5);
        int8x16_t v27 = (int8x16_t)vdupq_n_s32(v4);
        int32x4_t v28 = vdupq_n_s32(v8);
        int32x4_t v29 = vdupq_n_s32(v11);
        int32x4_t v30 = vdupq_n_s32(v12);
        uint64_t v31 = (int16x8_t *)((char *)v17 + 2 * (v19 & 0xFFFFFFFFFFFFFFF8));
        int32x4_t v32 = vdupq_n_s32(v13);
        __int16 v33 = a2 + 5;
        int32x4_t v34 = vdupq_n_s32(v14);
        do
        {
          int v35 = &a2[v21 & 0xFFFFFFF8];
          int32x4_t v36 = vuzp2q_s32(vuzp2q_s32(v24, v23), v24);
          int32x4_t v37 = (int32x4_t)vextq_s8(v25, (int8x16_t)v36, 0xCuLL);
          int32x4_t v38 = (int32x4_t)vextq_s8(v26, (int8x16_t)v37, 0xCuLL);
          int32x4_t v39 = (int32x4_t)vextq_s8(v27, (int8x16_t)v38, 0xCuLL);
          int8x16_t v27 = *(int8x16_t *)v33;
          int32x4_t v40 = (int32x4_t)vextq_s8((int8x16_t)v23, *(int8x16_t *)v33, 0xCuLL);
          int32x4_t v23 = *((int32x4_t *)v33 + 1);
          int32x4_t v41 = (int32x4_t)vextq_s8(*(int8x16_t *)v33, (int8x16_t)v23, 0xCuLL);
          v36.i64[1] = *(void *)v33;
          int32x4_t v42 = (int32x4_t)vextq_s8(*(int8x16_t *)v33, (int8x16_t)v23, 8uLL);
          int32x4_t v43 = (int32x4_t)vextq_s8(*(int8x16_t *)v33, (int8x16_t)v23, 4uLL);
          v37.i32[3] = *(_OWORD *)v33;
          *v17++ = vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(*(int32x4_t *)(v35 + 7), v38), v29), vaddq_s32(*(int32x4_t *)&a2[(v21 + 8) & 0xFFFFFFF8], v39), v28), vaddq_s32(*(int32x4_t *)(v35 + 6), v37), v30), vaddq_s32(*(int32x4_t *)v33, v36), v32), v40, v34), 0xAuLL), vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(
                             vmulq_s32(vaddq_s32(*(int32x4_t *)(v35 + 11), *(int32x4_t *)v33), v29),
                             vaddq_s32(*(int32x4_t *)&a2[((v21 + 8) & 0xFFFFFFF8) + 4], v40),
                             v28),
                           vaddq_s32(*(int32x4_t *)(v35 + 10), v43),
                           v30),
                         vaddq_s32(v23, v42),
                         v32),
                       v41,
                       v34),
                     0xAuLL);
          v33 += 8;
          v21 += 8;
          int32x4_t v24 = v41;
          int8x16_t v25 = (int8x16_t)v42;
          int8x16_t v26 = (int8x16_t)v43;
        }
        while (v22 != v21);
        if (v19 == v22) {
          goto LABEL_13;
        }
        unsigned int v7 = v23.u32[3];
        unsigned int v9 = v23.u32[2];
        unsigned int v10 = v23.u32[1];
        unsigned int v5 = v23.i32[0];
        uint64_t v17 = v31;
        unsigned int v4 = v27.u32[3];
      }
    }
    else
    {
      unint64_t v20 = 4;
    }
    uint64_t v31 = v17;
    do
    {
      unsigned int v44 = a2[(v20 + 4)] + v4;
      unsigned int v45 = a2[(v20 + 3)] + v5;
      unsigned int v4 = v5;
      unsigned int v5 = v10;
      unsigned int v10 = v9;
      unsigned int v9 = v7;
      unsigned int v7 = a2[v20 + 1];
      v31->i16[0] = (v45 * v11 + v44 * v8 + (a2[(v20 + 2)] + v5) * v12 + (v7 + v10) * v13 + v9 * v14 + 512) >> 10;
      uint64_t v31 = (int16x8_t *)((char *)v31 + 2);
      ++v20;
    }
    while (v18 != v20);
LABEL_13:
    unsigned int v7 = a2[v18];
    uint64_t v17 = v31;
    goto LABEL_14;
  }
  LODWORD(v18) = 4;
LABEL_14:
  unsigned int v46 = a2[(v18 + 3)];
  unsigned int v47 = v46 + a2[(v18 - 4)];
  unsigned int v48 = a2[(v18 - 3)] + v46;
  unsigned int v49 = a2[(v18 - 2)];
  unsigned int v50 = a2[(v18 + 2)];
  unsigned int v51 = a2[(v18 - 1)];
  unsigned int v52 = a2[(v18 + 1)];
  v17->i16[0] = (v48 * v11 + v47 * v8 + (v50 + v49) * v12 + (v52 + v51) * v13 + v7 * v14 + 512) >> 10;
  v17->i16[1] = ((v49 + v46) * v11 + v48 * v8 + (v51 + v46) * v12 + v52 * v14 + (v7 + v50) * v13 + 512) >> 10;
  unsigned int v53 = v7 + v46;
  unsigned int v54 = v52 + v46;
  uint64_t result = v50 * v14;
  v17->i16[2] = (result + (v49 + v46) * v8 + (v51 + v46) * v11 + v54 * v13 + v53 * v12 + 512) >> 10;
  v17->i16[3] = ((v50 + v46) * v13 + v46 * v14 + (v51 + v46) * v8 + v54 * v12 + v53 * v11 + 512) >> 10;
  return result;
}

uint64_t sub_2194DC280(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6 && a3)
  {
    for (uint64_t i = 0; i != a6; ++i)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 2 * a3;
      do
      {
        unsigned int v9 = *(unsigned __int16 *)(result + 2 * v7);
        if (v9 >= 0xFF01) {
          sub_219509918();
        }
        *(unsigned char *)(a2 + v7++) = (unsigned __int16)(v9 + 128) >> 8;
        v8 -= 2;
      }
      while (v8);
      a2 += a5;
      result += 2 * a4;
    }
  }
  return result;
}

BOOL sub_2194DC2F0(unint64_t *a1)
{
  if (a1[4] != 1 || a1[3] != 2) {
    return 0;
  }
  unint64_t v2 = *a1;
  if (*a1 < 0xA0) {
    return 0;
  }
  unint64_t v3 = a1[1];
  if (v3 < 0xA0) {
    return 0;
  }
  BOOL v4 = v3 > 0x140 && v2 > 0x140;
  unint64_t v5 = a1[2];
  if (!v4 && v5 != 4) {
    return 0;
  }
  return v2 < 0x141 || v3 < 0x141 || v5 == 5;
}

uint64_t sub_2194DC350(void *a1)
{
  if (!a1) {
    return 2;
  }
  unint64_t v2 = operator new(0x2C8uLL, MEMORY[0x263F8C180]);
  if (!v2) {
    return 3;
  }
  unint64_t v3 = v2;
  sub_2194DCD1C((uint64_t)v2);
  uint64_t result = 0;
  *a1 = v3;
  return result;
}

void sub_2194DC3B8(_Unwind_Exception *a1)
{
  MEMORY[0x21D48B590](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

uint64_t sub_2194DC3D4(uint64_t a1)
{
  if (a1)
  {
    sub_2194E5128(a1 + 360);
    sub_21948CFDC(a1 + 336, *(void **)(a1 + 344));
    if (*(char *)(a1 + 63) < 0)
    {
      operator delete(*(void **)(a1 + 40));
      uint64_t v2 = *(void *)a1;
      *(void *)a1 = 0;
      if (!v2) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v2 = *(void *)a1;
      *(void *)a1 = 0;
      if (!v2)
      {
LABEL_5:
        MEMORY[0x21D48B5B0](a1, 0x10B2C403B92AAD9);
        return 0;
      }
    }
    uint64_t v3 = sub_2194DCF60(v2);
    MEMORY[0x21D48B5B0](v3, 0x10B2C40FE7A4E93);
    goto LABEL_5;
  }
  return 2;
}

uint64_t sub_2194DC478(uint64_t a1, int *a2)
{
  if (!a1) {
    return 4;
  }
  uint64x2_t v4 = *(uint64x2_t *)(a2 + 2);
  int v5 = *a2;
  double v6 = 1.0;
  if (!*a2) {
    goto LABEL_6;
  }
  if (v5 == 3)
  {
    if (v4.i64[0] <= 0x1000uLL && v4.i64[1] <= 0x2000uLL) {
      goto LABEL_19;
    }
    float64x2_t v12 = vcvtq_f64_u64(v4);
    float64x2_t v13 = vdivq_f64((float64x2_t)xmmword_21950D1C0, v12);
    if (v13.f64[1] >= v13.f64[0]) {
      double v6 = v13.f64[0];
    }
    else {
      double v6 = v13.f64[1];
    }
    int8x16_t v9 = (int8x16_t)vcvtq_u64_f64(vrndaq_f64(vmulq_n_f64(v12, v6)));
    int8x16_t v10 = (int8x16_t)xmmword_21950D1D0;
LABEL_18:
    uint64x2_t v4 = (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v10, (uint64x2_t)v9), v9, v10);
    goto LABEL_19;
  }
  if (v5 == 2)
  {
LABEL_6:
    if (v4.i64[0] <= 0x280uLL && v4.i64[1] <= 0x2000uLL) {
      goto LABEL_19;
    }
    float64x2_t v7 = vcvtq_f64_u64(v4);
    float64x2_t v8 = vdivq_f64((float64x2_t)xmmword_21950D1E0, v7);
    if (v8.f64[1] >= v8.f64[0]) {
      double v6 = v8.f64[0];
    }
    else {
      double v6 = v8.f64[1];
    }
    int8x16_t v9 = (int8x16_t)vcvtq_u64_f64(vrndaq_f64(vmulq_n_f64(v7, v6)));
    int8x16_t v10 = (int8x16_t)xmmword_21950D1F0;
    goto LABEL_18;
  }
LABEL_19:
  unint64_t v14 = v4.i64[0];
  if (v4.i64[0] <= 0x9FuLL) {
    sub_219509988();
  }
  uint64_t v15 = v4.i64[1];
  if (v4.i64[1] <= 0x9FuLL) {
    sub_219509950();
  }
  v26[0] = *(_OWORD *)a2;
  *(_OWORD *)((char *)v26 + 9) = *(_OWORD *)((char *)a2 + 9);
  if (*((char *)a2 + 55) < 0)
  {
    double v25 = v6;
    sub_2194A3460(&__p, *((void **)a2 + 4), *((void *)a2 + 5));
    double v6 = v25;
  }
  else
  {
    std::string __p = *(std::string *)(a2 + 8);
  }
  long long v16 = *(_OWORD *)(a2 + 70);
  long long v41 = *(_OWORD *)(a2 + 66);
  long long v42 = v16;
  long long v40 = *(_OWORD *)(a2 + 62);
  float v43 = *((float *)a2 + 74);
  long long v36 = *(_OWORD *)(a2 + 46);
  long long v37 = *(_OWORD *)(a2 + 50);
  long long v38 = *(_OWORD *)(a2 + 54);
  long long v39 = *(_OWORD *)(a2 + 58);
  long long v32 = *(_OWORD *)(a2 + 30);
  long long v33 = *(_OWORD *)(a2 + 34);
  long long v34 = *(_OWORD *)(a2 + 38);
  long long v35 = *(_OWORD *)(a2 + 42);
  long long v28 = *(_OWORD *)(a2 + 14);
  long long v29 = *(_OWORD *)(a2 + 18);
  long long v30 = *(_OWORD *)(a2 + 22);
  long long v31 = *(_OWORD *)(a2 + 26);
  *((void *)&v26[0] + 1) = v14;
  *(void *)&v26[1] = v15;
  DWORD1(v39) = (float)(v43 * (float)((float)(v43 * (float)v14) * (float)v14));
  *(double *)(a1 + 312) = v6;
  if (sub_2194E1DD0((uint64_t)v26))
  {
    *(_OWORD *)(a1 + 8) = v26[0];
    *(_OWORD *)(a1 + 17) = *(_OWORD *)((char *)v26 + 9);
    std::string::operator=((std::string *)(a1 + 40), &__p);
    long long v17 = v41;
    *(_OWORD *)(a1 + 256) = v40;
    *(_OWORD *)(a1 + 272) = v17;
    *(_OWORD *)(a1 + 288) = v42;
    *(float *)(a1 + 304) = v43;
    long long v18 = v37;
    *(_OWORD *)(a1 + 192) = v36;
    *(_OWORD *)(a1 + 208) = v18;
    long long v19 = v39;
    *(_OWORD *)(a1 + 224) = v38;
    *(_OWORD *)(a1 + 240) = v19;
    long long v20 = v33;
    *(_OWORD *)(a1 + 128) = v32;
    *(_OWORD *)(a1 + 144) = v20;
    long long v21 = v35;
    *(_OWORD *)(a1 + 160) = v34;
    *(_OWORD *)(a1 + 176) = v21;
    long long v22 = v29;
    *(_OWORD *)(a1 + 64) = v28;
    *(_OWORD *)(a1 + 80) = v22;
    long long v23 = v31;
    *(_OWORD *)(a1 + 96) = v30;
    *(_OWORD *)(a1 + 112) = v23;
    operator new();
  }
  uint64_t v11 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_2194DC77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  MEMORY[0x21D48B5B0](v20, 0x10B2C40FE7A4E93);
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_2194DC7BC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = sub_2194DCF60(v2);
    MEMORY[0x21D48B5B0](v3, 0x10B2C40FE7A4E93);
  }
  return a1;
}

void sub_2194DC804(size_t width@<X2>, size_t height@<X3>, VTPixelTransferSessionRef *a3@<X0>, __CVBuffer *a4@<X1>, unsigned char *a5@<X8>)
{
  CVPixelBufferRef pixelBufferOut = 0;
  CVPixelBufferCreate(0, width, height, 0x4C303038u, 0, &pixelBufferOut);
  if (a4 && pixelBufferOut)
  {
    if (!sub_2194F34D8(a3, a4, pixelBufferOut)) {
      sub_2195099C0();
    }
    sub_2194F35D8(v17, pixelBufferOut, 1);
    sub_2194DD06C((uint64_t)v12, v17);
    CVPixelBufferRelease(pixelBufferOut);
    sub_2194B3F30((uint64_t)a5, (uint64_t)v12);
    a5[144] = 1;
    v12[0] = &unk_26CAD65E0;
    if (__p)
    {
      long long v16 = __p;
      operator delete(__p);
    }
    float64x2_t v8 = v14;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    int8x16_t v9 = v13;
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    int8x16_t v10 = v19;
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v11 = v18;
    if (v18)
    {
      if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    *a5 = 0;
    a5[144] = 0;
  }
}

void sub_2194DCA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_2194DCA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t sub_2194DCA68(uint64_t a1)
{
  if (a1) {
    operator new();
  }
  return 4;
}

void sub_2194DCC14(_Unwind_Exception *a1)
{
  sub_2194DCC68((uint64_t **)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_2194DCC28(_Unwind_Exception *a1)
{
  MEMORY[0x21D48B5B0](v1, 0xA0C40AFF93C70);
  _Unwind_Resume(a1);
}

void sub_2194DCC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2194DCE68((uint64_t)&a9);
  sub_2194DCC68((uint64_t **)(v9 - 40));
  _Unwind_Resume(a1);
}

uint64_t **sub_2194DCC68(uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t *v2 = 0;
    if (v3) {
      ((void (*)(void))v2[1])();
    }
    MEMORY[0x21D48B5B0](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t sub_2194DCCC8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 12)) {
    return (*(void *)(a1 + 496) - *(void *)(a1 + 488)) >> 3;
  }
  unint64_t v1 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 2);
  if (v1 < 2) {
    return 0;
  }
  else {
    return (v1 - 1);
  }
}

uint64_t sub_2194DCD1C(uint64_t a1)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 2;
  *(unsigned char *)(a1 + 12) = 0;
  *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0x280uLL);
  *(unsigned char *)(a1 + 32) = 0;
  strcpy((char *)(a1 + 40), "/tmp/");
  *(_WORD *)(a1 + 63) = 261;
  *(void *)(a1 + 68) = 0x90000002DLL;
  *(void *)(a1 + 80) = 5000;
  *(unsigned char *)(a1 + 88) = 1;
  *(_DWORD *)(a1 + 92) = 1061997773;
  *(unsigned char *)(a1 + 96) = 0;
  *(int64x2_t *)(a1 + 104) = vdupq_n_s64(1uLL);
  *(void *)(a1 + 120) = 5;
  *(_WORD *)(a1 + 128) = 256;
  *(_WORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 236) = xmmword_21950BE60;
  *(_OWORD *)(a1 + 252) = xmmword_21950BE70;
  *(void *)(a1 + 300) = 0x3E4CCCCD00004000;
  *(_OWORD *)(a1 + 268) = xmmword_21950D200;
  *(_OWORD *)(a1 + 284) = unk_21950D210;
  *(void *)(a1 + 312) = 0x3FF0000000000000;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = a1 + 344;
  *(void *)(a1 + 344) = 0;
  sub_2194E5004(a1 + 360);
  return a1;
}

void sub_2194DCE34(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;
  sub_21948CFDC(v4, *(void **)(v1 + 344));
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v3);
  }
  sub_2194DC7BC((uint64_t *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2194DCE68(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 144)) {
    return a1;
  }
  *(void *)a1 = &unk_26CAD65E0;
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 96);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t sub_2194DCF60(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 864);
  if (v2)
  {
    *(void *)(a1 + 872) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 736);
  if (v3)
  {
    *(void *)(a1 + 744) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 712);
  if (v4)
  {
    *(void *)(a1 + 720) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 688);
  if (v5)
  {
    *(void *)(a1 + 696) = v5;
    operator delete(v5);
  }
  sub_2194DD010(a1 + 648, *(void **)(a1 + 656));
  sub_21949AABC(a1 + 456);
  uint64_t v6 = *(void *)(a1 + 304);
  *(void *)(a1 + 304) = 0;
  if (v6) {
    (*(void (**)(void))(a1 + 312))();
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_2194DD010(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2194DD010(a1, *a2);
    sub_2194DD010(a1, a2[1]);
    sub_21949AABC((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

uint64_t sub_2194DD06C(uint64_t a1, void *a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &unk_26CAD65E0;
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v3 = a2[9];
  *(void *)&long long v6 = a2[8];
  *((void *)&v6 + 1) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  sub_2194B3AE0(a1, &v6, a2[3], a2[4], a2[5], a2[1], a2[2], *(unsigned __int8 *)a2, a2 + 12);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (!*((void *)&v6 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v6 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_2194DD184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  long long v6 = v5;
  sub_21947E0B8((uint64_t)va);
  float64x2_t v8 = *v6;
  if (*v6)
  {
    *(void *)(v3 + 128) = v8;
    operator delete(v8);
  }
  sub_2194A65B0(v4);
  _Unwind_Resume(a1);
}

void sub_2194DD1B4(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_26CAD6AE8;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = xmmword_21950D258;
  *(_OWORD *)(a1 + 40) = unk_21950D268;
  *(_OWORD *)(a1 + 56) = xmmword_21950D278;
  *(_OWORD *)(a1 + 72) = unk_21950D288;
  *(_OWORD *)(a1 + 88) = xmmword_21950D298;
  *(_OWORD *)(a1 + 104) = unk_21950D2A8;
  *(_OWORD *)(a1 + 120) = xmmword_21950D2B8;
  *(_OWORD *)(a1 + 136) = unk_21950D2C8;
  *(void *)(a1 + 152) = 1;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 48) = a2[2];
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 16) = v2;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 112) = a2[6];
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 176) = a2[10];
  *(_OWORD *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 160) = v9;
  long long v11 = a2[12];
  long long v12 = a2[13];
  long long v13 = a2[14];
  *(void *)(a1 + 256) = *((void *)a2 + 30);
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 240) = v13;
  *(_OWORD *)(a1 + 208) = v11;
  if ((long long *)(a1 + 16) != a2) {
    sub_2194DDD20((void *)(a1 + 264), *((char **)a2 + 31), *((char **)a2 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 32) - *((void *)a2 + 31)) >> 3));
  }
  operator new();
}

void sub_2194DD324(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 272) = v5;
    operator delete(v5);
    long long v6 = (void *)*v1;
    void *v1 = 0;
    if (!v6) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    long long v6 = (void *)*v1;
    void *v1 = 0;
    if (!v6) {
      goto LABEL_3;
    }
  }
  sub_2194C9AB0((uint64_t)v1, v6);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2194DD394(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, _DWORD *a7)
{
  if (a2 < 1 || a3 < 1) {
    return 0;
  }
  char v7 = a4;
  uint64_t v10 = *(void *)(a6 + 48);
  long long v8 = (uint64_t *)(a6 + 48);
  uint64_t v9 = v10;
  uint64_t v11 = v10 + 144 * a4;
  if (*(_DWORD *)(v11 + 32) - 1 <= a2 || *(_DWORD *)(v11 + 48) - 1 <= a3) {
    return 0;
  }
  signed int v15 = *(__int16 *)(*(void *)(*(void *)(v9 + 144 * a4 + 120) + 8 * a3) + 2 * a2);
  sub_2194DE6E0(a2, a3, a4, v8, a7);
  if (a7[13] != v15) {
    sub_2195099F8();
  }
  long long v16 = (int32x4_t *)&a7[18 * (v7 & 1)];
  if (a5)
  {
    return sub_2194DE3A4(v15, v16);
  }
  else
  {
    return sub_2194DE370(v15, v16);
  }
}

int32x2_t sub_2194DD494(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, int a5, char a6, uint64_t a7)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  sub_2194DEE90(a2, (uint64_t)v22, &v21);
  if (sub_2194DE524((uint64_t)v22, (uint64_t *)&v21, (uint64_t)&v20))
  {
    int v14 = a5 >> 1;
    if (sub_2194DE61C(&v20, &v21, a5 >> 1, (int32x2_t *)&v17))
    {
      int v15 = a2[13];
      *(unsigned char *)(a7 + 27) = 0;
      *(_WORD *)(a7 + 25) = 0;
      *(_OWORD *)(a7 + 44) = 0u;
      *(_OWORD *)(a7 + 60) = 0u;
      *(_OWORD *)(a7 + 76) = 0u;
      *(_OWORD *)(a7 + 92) = 0u;
      *(_OWORD *)(a7 + 108) = 0u;
      *(_DWORD *)(a7 + 124) = 0;
      int v16 = v19 + v15;
      if (v16 < 0) {
        int v16 = -v16;
      }
      *(_DWORD *)a7 = v17 + (a3 << (v14 + 6));
      int32x2_t result = vadd_s32(v18, (int32x2_t)vshl_u32((uint32x2_t)__PAIR64__(a5, a4), (uint32x2_t)((v14 + 6) | 0x400000000)));
      *(int32x2_t *)(a7 + 4) = result;
      *(void *)(a7 + 12) = 0;
      *(_DWORD *)(a7 + 20) = a5 - 1;
      *(unsigned char *)(a7 + 24) = a6;
      *(_DWORD *)(a7 + 28) = v16;
      *(_DWORD *)(a7 + 32) = 0;
      *(_DWORD *)(a7 + 36) = a3;
      *(_DWORD *)(a7 + 40) = a4;
    }
  }
  return result;
}

void sub_2194DD5D4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = (uint64_t *)(a2 + 48);
  uint64_t v11 = *(uint64_t **)(a1 + 8);
  v11[17] = 0;
  v11[18] = 0;
  unint64_t v12 = v11[1];
  if (v12 <= 1) {
    unint64_t v12 = 1;
  }
  v11[19] = v12 - 1;
  long long v13 = (void *)v11[20];
  uint64_t v14 = v11[21] - (void)v13;
  if (v14 >= 1) {
    bzero(v13, 8 * (((unint64_t)v14 >> 3) - ((unint64_t)v14 > 7)) + 8);
  }
  v11[23] = 0;
  v11[24] = 0;
  uint64_t v15 = *v11;
  if (*v11)
  {
    uint64_t v16 = v11[25];
    if (v15 == 1)
    {
      unint64_t v17 = 0;
LABEL_11:
      uint64_t v21 = v15 - v17;
      long long v22 = (void *)(v16 + 24 * v17 + 8);
      do
      {
        *long long v22 = *(v22 - 1);
        v22 += 3;
        --v21;
      }
      while (v21);
      goto LABEL_13;
    }
    unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
    int32x2_t v18 = (uint64_t *)(v16 + 24);
    unint64_t v19 = v15 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v20 = *v18;
      *(v18 - 2) = *(v18 - 3);
      v18[1] = v20;
      v18 += 6;
      v19 -= 2;
    }
    while (v19);
    if (v15 != v17) {
      goto LABEL_11;
    }
  }
LABEL_13:
  uint64_t v23 = (void *)v11[28];
  uint64_t v24 = v11[29] - (void)v23;
  if (v24 >= 1) {
    bzero(v23, 8 * (((unint64_t)v24 >> 3) - ((unint64_t)v24 > 7)) + 8);
  }
  if ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) > 0) {
    bzero(*(void **)a6, 4 * (((*(void *)(a6 + 8) - *(void *)a6) >> 2) - (*(void *)(a6 + 8) - *(void *)a6 > 3uLL)) + 4);
  }
  double v25 = *(void **)(a6 + 24);
  uint64_t v26 = *(void *)(a6 + 32) - (void)v25;
  if (v26 >= 1) {
    bzero(v25, 4 * (((unint64_t)v26 >> 2) - ((unint64_t)v26 > 3)) + 4);
  }
  int8x16_t v27 = *(void **)(a6 + 48);
  uint64_t v28 = *(void *)(a6 + 56) - (void)v27;
  if (v28 >= 1) {
    bzero(v27, 4 * (((unint64_t)v28 >> 2) - ((unint64_t)v28 > 3)) + 4);
  }
  long long v29 = *(void **)(a6 + 72);
  uint64_t v30 = *(void *)(a6 + 80) - (void)v29;
  if (v30 >= 1) {
    bzero(v29, 4 * (((unint64_t)v30 >> 2) - ((unint64_t)v30 > 3)) + 4);
  }
  uint64_t v31 = v9 - v8;
  long long v32 = *(void **)(a6 + 96);
  uint64_t v33 = *(void *)(a6 + 104) - (void)v32;
  if (v33 >= 1) {
    bzero(v32, 4 * (((unint64_t)v33 >> 2) - ((unint64_t)v33 > 3)) + 4);
  }
  uint64_t v34 = v31 >> 4;
  long long v35 = *(void **)(a6 + 120);
  uint64_t v36 = *(void *)(a6 + 128) - (void)v35;
  if (v36 >= 1) {
    bzero(v35, 4 * (((unint64_t)v36 >> 2) - ((unint64_t)v36 > 3)) + 4);
  }
  int v37 = 954437177 * v34;
  long long v38 = *(void **)(a6 + 144);
  uint64_t v39 = *(void *)(a6 + 152) - (void)v38;
  if (v39 >= 1) {
    bzero(v38, 4 * (((unint64_t)v39 >> 2) - ((unint64_t)v39 > 3)) + 4);
  }
  long long v40 = *(void **)(a6 + 168);
  uint64_t v41 = *(void *)(a6 + 176) - (void)v40;
  if (v41 >= 1) {
    bzero(v40, 4 * (((unint64_t)v41 >> 2) - ((unint64_t)v41 > 3)) + 4);
  }
  if (v37 > 2)
  {
    uint64_t v75 = (v37 - 1);
    uint64_t v42 = 1;
    while (1)
    {
      uint64_t v43 = v42 - 1;
      unsigned int v44 = (void *)(*a3 + 24 * (v42 - 1));
      uint64_t v45 = v44[1] - *v44;
      if (v45) {
        break;
      }
LABEL_33:
      if (++v42 == v75) {
        return;
      }
    }
    uint64_t v46 = 0;
    unint64_t v78 = *(void *)(a5 + 8 * v43);
    unint64_t v47 = v45 / 20;
    int v83 = (int32x4_t *)&v109[18 * (v42 & 1)];
    uint32x4_t v80 = (void *)(a6 + 24 * v43);
    unint64_t v81 = v42 - 1;
    uint32x2_t v48 = (uint32x2_t)vdup_n_s32((v42 >> 1) + 6);
    if (v47 <= 1) {
      uint64_t v49 = 1;
    }
    else {
      uint64_t v49 = v47;
    }
    while (1)
    {
      uint64_t v52 = *v44 + v46;
      uint64_t v53 = *(unsigned int *)(v52 + 8);
      if (v42 != v53) {
        sub_219509A30();
      }
      int32x2_t v54 = vshl_s32(*(int32x2_t *)(*v44 + v46), vneg_s32(vdup_n_s32((int)v53 >> 1)));
      if (v54.i32[0] < 1) {
        goto LABEL_40;
      }
      unint64_t v55 = v54.i32[1];
      uint64_t v56 = *v10 + 144 * v42;
      int v57 = *(_DWORD *)(v56 + 48);
      int v58 = *(_DWORD *)(v56 + 32) - 1;
      __int32 v59 = v57 - 1;
      BOOL v60 = v54.i32[1] < 1 || v58 <= v54.i32[0];
      if (v60 || v59 <= v54.i32[1]) {
        goto LABEL_40;
      }
      uint64_t v62 = *(void *)(*(void *)(a1 + 8) + 200);
      int v63 = *(unsigned __int8 *)(v52 + 12);
      int v64 = *(_DWORD *)(v52 + 16);
      uint32x2_t v82 = (uint32x2_t)v54;
      signed int v65 = *(__int16 *)(*(void *)(*(void *)(*v10 + 144 * v42 + 120) + 8 * v54.i32[1]) + 2 * v54.i32[0]);
      sub_2194DE6E0(v54.i32[0], v54.i32[1], v42, v10, v109);
      if (v110 != v65) {
        sub_2195099F8();
      }
      if (v63)
      {
        if (sub_2194DE3A4(v65, v83)) {
          goto LABEL_55;
        }
      }
      else if (sub_2194DE370(v65, v83))
      {
LABEL_55:
        if (v64 >= 0) {
          unint64_t v66 = v64;
        }
        else {
          unint64_t v66 = -v64;
        }
        uint64_t v67 = v66 >> 5;
        if (v66 >> 5 >= 0x3F) {
          uint64_t v67 = 63;
        }
        unsigned int v68 = *(_DWORD *)(*v80 + 4 * v67);
        if (v68 <= 0xFFE) {
          *(_DWORD *)(*v80 + 4 * v67) = v68 + 1;
        }
        if (*(void *)(a4 + 8 * v81) <= v66
          && v78 > (uint64_t)(*(void *)(v62 + 24 * v81 + 8) - *(void *)(v62 + 24 * v81)) >> 7)
        {
          sub_2194DEE90(v109, (uint64_t)v116, &v115);
          if (sub_2194DE524((uint64_t)v116, (uint64_t *)&v115, (uint64_t)&v114))
          {
            int v50 = sub_2194DE61C(&v114, &v115, v42 >> 1, &v111);
            if (v50)
            {
              __int16 v101 = 0;
              char v102 = 0;
              long long v103 = 0u;
              long long v104 = 0u;
              long long v105 = 0u;
              long long v106 = 0u;
              long long v107 = 0u;
              int v108 = 0;
              int v69 = v113 + v110;
              int32x2_t v6 = vadd_s32(v111, (int32x2_t)vshl_u32(v82, v48));
              if (v113 + v110 < 0) {
                int v69 = -v69;
              }
              int v73 = v69;
              int v74 = v112 + 16 * v42;
              char v71 = v63;
              int v72 = v42 - 1;
              uint32x2_t v7 = v82;
            }
          }
          else
          {
            int v50 = 0;
          }
          unsigned int v51 = *(void **)(a1 + 8);
          int32x2_t v85 = v6;
          int v86 = v74;
          uint64_t v87 = 0;
          int v88 = v72;
          char v89 = v71;
          __int16 v90 = v101;
          char v91 = v102;
          int v92 = v73;
          int v93 = 0;
          uint32x2_t v94 = v7;
          long long v97 = v105;
          long long v98 = v106;
          long long v99 = v107;
          int v100 = v108;
          long long v95 = v103;
          long long v96 = v104;
          sub_2194C9458(v51, &v85, v81, v55, v50);
        }
      }
LABEL_40:
      v46 += 20;
      if (!--v49) {
        goto LABEL_33;
      }
    }
  }
}

void *sub_2194DDC38(void *a1)
{
  *a1 = &unk_26CAD6AE8;
  uint64_t v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  long long v3 = (void *)a1[1];
  a1[1] = 0;
  if (v3) {
    sub_2194C9AB0((uint64_t)(a1 + 1), v3);
  }
  return a1;
}

void sub_2194DDC9C(void *a1)
{
  *a1 = &unk_26CAD6AE8;
  uint64_t v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  long long v3 = (void *)a1[1];
  a1[1] = 0;
  if (v3) {
    sub_2194C9AB0((uint64_t)(a1 + 1), v3);
  }

  JUMPOUT(0x21D48B5B0);
}

void *sub_2194DDD20(void *result, char *__src, char *a3, size_t __sz)
{
  int32x2_t v6 = __src;
  uint32x2_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint32x2_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x666666666666666) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666) {
LABEL_23:
    }
      sub_219486AE4();
    uint64_t v13 = 5 * v12;
    int32x2_t result = operator new(40 * v12);
    uint64_t v9 = (char *)result;
    *uint32x2_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      int32x2_t result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  uint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 3) >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    int32x2_t v18 = (void *)*result;
LABEL_21:
    int32x2_t result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  unint64_t v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    int32x2_t result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    int32x2_t v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *uint64_t v15 = &v9[v14];
  return result;
}

uint64_t sub_2194DDE9C(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  *(void *)a1 = 8;
  *(_OWORD *)(a1 + 200) = 0u;
  uint64_t v5 = a1 + 200;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  long long v6 = *a2;
  long long v7 = a2[1];
  long long v8 = a2[2];
  *(_OWORD *)(a1 + 56) = a2[3];
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 8) = v6;
  long long v9 = *a3;
  long long v10 = a3[1];
  long long v11 = a3[2];
  *(_OWORD *)(a1 + 120) = a3[3];
  *(_OWORD *)(a1 + 104) = v11;
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 72) = v9;
  unint64_t v12 = a4 - 2;
  *(void *)a1 = a4 - 2;
  unint64_t v13 = *(void *)a2;
  unint64_t v14 = *((void *)a2 + 1);
  if (*(void *)a2 <= v14) {
    unint64_t v13 = *((void *)a2 + 1);
  }
  uint64_t v15 = 8 * (*(void *)a2 < v14);
  unint64_t v16 = *((void *)a2 + 2);
  unint64_t v17 = *((void *)a2 + 3);
  BOOL v18 = v13 >= v16;
  if (v13 <= v16) {
    unint64_t v13 = *((void *)a2 + 2);
  }
  if (!v18) {
    uint64_t v15 = 16;
  }
  BOOL v19 = v13 >= v17;
  if (v13 <= v17) {
    unint64_t v13 = *((void *)a2 + 3);
  }
  if (!v19) {
    uint64_t v15 = 24;
  }
  unint64_t v20 = *((void *)a2 + 4);
  unint64_t v21 = *((void *)a2 + 5);
  BOOL v22 = v13 >= v20;
  if (v13 <= v20) {
    unint64_t v13 = *((void *)a2 + 4);
  }
  if (!v22) {
    uint64_t v15 = 32;
  }
  BOOL v23 = v13 >= v21;
  if (v13 <= v21) {
    unint64_t v13 = *((void *)a2 + 5);
  }
  if (!v23) {
    uint64_t v15 = 40;
  }
  unint64_t v24 = *((void *)a2 + 6);
  BOOL v25 = v13 >= v24;
  if (v13 <= v24) {
    unint64_t v13 = *((void *)a2 + 6);
  }
  if (!v25) {
    uint64_t v15 = 48;
  }
  uint64_t v26 = a1 + 224;
  BOOL v18 = v13 >= *((void *)a2 + 7);
  uint64_t v27 = 56;
  if (v18) {
    uint64_t v27 = v15;
  }
  unint64_t v28 = *(void *)((char *)a2 + v27);
  uint64_t v41 = 0;
  if (v28)
  {
    sub_2194DE0F4(a1 + 160, v28, &v41);
    unint64_t v12 = *(void *)a1;
    uint64_t v30 = *(void *)(a1 + 200);
    uint64_t v29 = *(void *)(a1 + 208);
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v29 = 0;
  }
  unint64_t v31 = *(void *)(a1 + 8);
  if (v31 <= 1) {
    unint64_t v31 = 1;
  }
  *(void *)(a1 + 152) = v31 - 1;
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v30) >> 3);
  if (v12 <= v32)
  {
    if (v12 < v32)
    {
      uint64_t v33 = v30 + 24 * v12;
      if (v29 != v33)
      {
        uint64_t v34 = v29;
        do
        {
          uint64_t v36 = *(void **)(v34 - 24);
          v34 -= 24;
          long long v35 = v36;
          if (v36)
          {
            *(void *)(v29 - 16) = v35;
            operator delete(v35);
          }
          uint64_t v29 = v34;
        }
        while (v34 != v33);
      }
      *(void *)(a1 + 208) = v33;
    }
  }
  else
  {
    sub_2194BC1C8(v5, v12 - v32);
  }
  unint64_t v37 = *(void *)a1;
  uint64_t v41 = 0;
  uint64_t v38 = *(void *)(a1 + 224);
  unint64_t v39 = (*(void *)(a1 + 232) - v38) >> 3;
  if (v37 <= v39)
  {
    if (v37 < v39) {
      *(void *)(a1 + 232) = v38 + 8 * v37;
    }
  }
  else
  {
    sub_2194DE0F4(v26, v37 - v39, &v41);
  }
  return a1;
}

void sub_2194DE0A0(_Unwind_Exception *a1)
{
  long long v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 232) = v6;
    operator delete(v6);
    sub_21948B590(v3);
    long long v7 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_21948B590(v3);
    long long v7 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 168) = v7;
  operator delete(v7);
  _Unwind_Resume(a1);
}

void sub_2194DE0F4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  long long v8 = (uint64_t *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      unint64_t v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3) {
        goto LABEL_45;
      }
      unint64_t v17 = v16 + 1;
      long long v8 = (uint64_t *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      int64x2_t v18 = vdupq_lane_s64(*a3, 0);
      BOOL v19 = (int64x2_t *)(v7 + 16);
      uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        *BOOL v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_45:
        do
          *v8++ = *a3;
        while (v8 != (uint64_t *)(v7 + 8 * a2));
      }
      long long v8 = (uint64_t *)(v7 + 8 * a2);
    }
    *(void *)(a1 + 8) = v8;
  }
  else
  {
    long long v9 = *(uint64_t **)a1;
    uint64_t v10 = v7 - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + a2;
    if (v12 >> 61) {
      sub_219486AE4();
    }
    uint64_t v13 = v6 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_219486AFC();
      }
      uint64_t v15 = (char *)operator new(8 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v21 = (unint64_t)&v15[8 * v11];
    BOOL v22 = (uint64_t *)(v21 + 8 * a2);
    unint64_t v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    unint64_t v24 = (uint64_t *)v21;
    if (v23 < 0x13) {
      goto LABEL_46;
    }
    if (v21 < (unint64_t)(a3 + 1))
    {
      unint64_t v24 = (uint64_t *)&v15[8 * v11];
      if (&v15[8 * a2 + v10] > (char *)a3) {
        goto LABEL_46;
      }
    }
    unint64_t v25 = v23 + 1;
    unint64_t v24 = (uint64_t *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    int64x2_t v26 = vdupq_lane_s64(*a3, 0);
    uint64_t v27 = (int64x2_t *)&v15[8 * v11 + 16];
    uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *uint64_t v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_46:
      do
        *v24++ = *a3;
      while (v24 != v22);
    }
    if ((uint64_t *)v7 != v9)
    {
      unint64_t v29 = v7 - (void)v9 - 8;
      if (v29 < 0x58) {
        goto LABEL_47;
      }
      if (v7 - (unint64_t)&v15[v10] < 0x20) {
        goto LABEL_47;
      }
      uint64_t v30 = (v29 >> 3) + 1;
      uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      long long v8 = (uint64_t *)(v7 - v31);
      v21 -= v31;
      unint64_t v32 = &v15[8 * v11 - 16];
      uint64_t v33 = (long long *)(v7 - 16);
      uint64_t v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)unint64_t v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_47:
        do
        {
          uint64_t v36 = *--v8;
          *(void *)(v21 - 8) = v36;
          v21 -= 8;
        }
        while (v8 != v9);
      }
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v22;
    *(void *)(a1 + 16) = &v15[8 * v14];
    if (v9)
    {
      operator delete(v9);
    }
  }
}

uint64_t sub_2194DE370(signed int a1, int32x4_t *a2)
{
  int32x4_t v2 = vdupq_n_s32(a1);
  *(int8x8_t *)v2.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vcgeq_s32(*a2, v2), (int16x8_t)vcgeq_s32(a2[1], v2)));
  v2.i8[0] = vmaxv_u8(*(uint8x8_t *)v2.i8);
  return (a2[2].i32[0] < a1) & ~v2.i32[0];
}

uint64_t sub_2194DE3A4(signed int a1, int32x4_t *a2)
{
  int32x4_t v2 = vdupq_n_s32(a1);
  *(int8x8_t *)v2.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vcgeq_s32(v2, *a2), (int16x8_t)vcgeq_s32(v2, a2[1])));
  v2.i8[0] = vmaxv_u8(*(uint8x8_t *)v2.i8);
  return (a2[2].i32[0] > a1) & ~v2.i32[0];
}

BOOL sub_2194DE3D8(_DWORD *a1, _DWORD *a2, double *a3)
{
  int v3 = a1[3] * *a1;
  if (v3 + 0x40000000 < 0) {
    sub_219509AA0();
  }
  int v5 = a1[2] * a1[1];
  if (v5 + 0x40000000 < 0) {
    sub_219509A68();
  }
  if (v3 != v5)
  {
    double v8 = sub_2194F4294(16, (double)(v3 - v5));
    sub_2194F42E0(v8);
    int v10 = a1[3] * *a2;
    if (v10 + 0x40000000 < 0) {
      sub_219509AA0();
    }
    int v11 = a2[1] * a1[1];
    if (v11 + 0x40000000 < 0) {
      sub_219509A68();
    }
    double v12 = v9;
    double v13 = sub_2194F4294(16, (double)(v10 - v11));
    int v14 = a2[1] * *a1;
    if (v14 + 0x40000000 < 0) {
      sub_219509AA0();
    }
    int v15 = a1[2] * *a2;
    if (v15 + 0x40000000 < 0) {
      sub_219509A68();
    }
    double v16 = v13;
    double v17 = sub_2194F4294(16, (double)(v14 - v15));
    *a3 = sub_2194F4294(16, v12 * v16);
    a3[1] = sub_2194F4294(16, v12 * v17);
  }
  return v3 != v5;
}

BOOL sub_2194DE524(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)(a1 + 32)) {
    return 0;
  }
  *(void *)&long long v6 = *(void *)a1;
  *((void *)&v6 + 1) = *(void *)(a1 + 12);
  long long v15 = v6;
  uint64_t v14 = *a2;
  BOOL v7 = sub_2194DE3D8(&v15, &v14, v13);
  if (v7)
  {
    *(_OWORD *)a3 = *(_OWORD *)v13;
    double v8 = sub_2194F4294(16, (double)*(int *)(a1 + 32));
    sub_2194F42E0(v8);
    double v10 = v9;
    double v11 = sub_2194F4294(16, (double)*((int *)a2 + 2));
    *(double *)(a3 + 16) = sub_2194F4294(16, v10 * v11);
  }
  return v7;
}

uint64_t sub_2194DE61C(float64x2_t *a1, _DWORD *a2, char a3, int32x2_t *a4)
{
  int32x2_t v4 = vmin_s32(vmax_s32(vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(*a1, (double)(1 << (a3 + 4)))))), (int32x2_t)0x700000007), (int32x2_t)0x700000007);
  int32x2_t v5 = vcge_s32(vdup_n_s32(64 << a3), vabs_s32(v4));
  if (v5.i8[0] & v5.i8[4])
  {
    int v6 = llround(a1[1].f64[0] * 4.0);
    if (v6 <= -15) {
      int v6 = -15;
    }
    if (v6 >= 15) {
      int v6 = 15;
    }
    int v7 = 32 - (a2[1] * (v4.i32[1] >> a3) + 4 * a2[2] * v6 + *a2 * (v4.i32[0] >> a3));
    *a4 = v4;
    a4[1].i32[0] = v6;
    a4[1].i32[1] = v7 >> 6;
  }
  return v5.i8[0] & v5.i8[4] & 1;
}

uint64_t sub_2194DE6E0(int a1, int a2, int a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v5 = *a4;
  uint64_t v6 = *a4 + 144 * a3;
  uint64_t v7 = *(void *)(v6 - 72);
  uint64_t v8 = *(void *)(v6 + 72);
  uint64_t v9 = *(void *)(v6 + 216);
  int v10 = *(_DWORD *)(v6 + 40);
  int v11 = a1 - 1;
  int v12 = a2 - 1;
  if (a3)
  {
    int v58 = (_DWORD *)(v5 + 144 * (a3 + 1));
    int v59 = v58[10];
    int v60 = v58[8] - 1;
    int v61 = v58[12] - 1;
    int v62 = v12 * v10;
    int v63 = v12 >> 1;
    if (v61 < v12 >> 1) {
      int v63 = v61;
    }
    if (v61 >= v63 + 1) {
      int v64 = v63 + 1;
    }
    else {
      int v64 = v61;
    }
    uint64_t v65 = v9 + 2 * v63 * v59;
    uint64_t v66 = v9 + 2 * v64 * v59;
    int v67 = v10 * a2;
    int v68 = a2 >> 1;
    if (v61 < a2 >> 1) {
      int v68 = v61;
    }
    if (v61 >= v68 + 1) {
      int v69 = v68 + 1;
    }
    else {
      int v69 = v61;
    }
    int v70 = v68 * v59;
    int v71 = v69 * v59;
    int v72 = a2 + 1;
    if (v61 >= (a2 + 1) >> 1) {
      int v73 = (a2 + 1) >> 1;
    }
    else {
      int v73 = v61;
    }
    if (v61 >= v73 + 1) {
      int v74 = v73 + 1;
    }
    else {
      int v74 = v61;
    }
    int v75 = v11 >> 1;
    if (v60 < v11 >> 1) {
      int v75 = v60;
    }
    if (v60 >= v75 + 1) {
      int v76 = v75 + 1;
    }
    else {
      int v76 = v60;
    }
    uint64_t v77 = 2 * (v62 + v11);
    int v78 = *(__int16 *)(v7 + v77);
    int v79 = *(__int16 *)(v8 + v77);
    int v80 = v11 & 1;
    *a5 = v78;
    a5[9] = v79;
    if (v12 & v11)
    {
      int v81 = (*(__int16 *)(v65 + 2 * v75)
           + *(__int16 *)(v65 + 2 * v76)
           + *(__int16 *)(v66 + 2 * v75)
           + *(__int16 *)(v66 + 2 * v76)
           + 2) >> 2;
      goto LABEL_46;
    }
    if (v11 & 1) == 0 || (v12)
    {
      int v81 = *(__int16 *)(v65 + 2 * v75);
      if ((v11 & 1) != 0 || (v12 & 1) == 0)
      {
LABEL_46:
        int v83 = v73 * v59;
        int v84 = v74 * v59;
        uint64_t v85 = v9 + 2 * v70;
        uint64_t v86 = v9 + 2 * v71;
        int v87 = v72 * v10;
        uint64_t v88 = 2 * (v67 + v11);
        int v89 = *(__int16 *)(v7 + v88);
        a5[18] = v81;
        a5[3] = v89;
        a5[12] = *(__int16 *)(v8 + v88);
        if ((v80 & a2) != 0)
        {
          int v90 = (*(__int16 *)(v85 + 2 * v75)
               + *(__int16 *)(v85 + 2 * v76)
               + *(__int16 *)(v86 + 2 * v75)
               + *(__int16 *)(v86 + 2 * v76)
               + 2) >> 2;
          goto LABEL_55;
        }
        if (v11 & 1) == 0 || (a2)
        {
          int v90 = *(__int16 *)(v85 + 2 * v75);
          if ((v11 & 1) != 0 || (a2 & 1) == 0)
          {
LABEL_55:
            uint64_t v92 = v9 + 2 * v83;
            uint64_t v93 = v9 + 2 * v84;
            uint64_t v94 = 2 * (v87 + v11);
            int v95 = *(__int16 *)(v7 + v94);
            a5[21] = v90;
            a5[6] = v95;
            a5[15] = *(__int16 *)(v8 + v94);
            if ((v72 & v80) != 0)
            {
              int v96 = (*(__int16 *)(v92 + 2 * v75)
                   + *(__int16 *)(v92 + 2 * v76)
                   + *(__int16 *)(v93 + 2 * v75)
                   + *(__int16 *)(v93 + 2 * v76)
                   + 2) >> 2;
              goto LABEL_64;
            }
            if (!v80 || (v72 & 1) != 0)
            {
              int v96 = *(__int16 *)(v92 + 2 * v75);
              if (v80 || (v72 & 1) == 0)
              {
LABEL_64:
                a5[24] = v96;
                int v98 = a1 >> 1;
                if (v60 < a1 >> 1) {
                  int v98 = v60;
                }
                if (v60 >= v98 + 1) {
                  int v99 = v98 + 1;
                }
                else {
                  int v99 = v60;
                }
                uint64_t v100 = 2 * (v62 + a1);
                int v101 = *(__int16 *)(v7 + v100);
                int v102 = *(__int16 *)(v8 + v100);
                int v103 = a1 & 1;
                a5[1] = v101;
                a5[10] = v102;
                if (v12 & a1)
                {
                  int v104 = (*(__int16 *)(v65 + 2 * v98)
                        + *(__int16 *)(v65 + 2 * v99)
                        + *(__int16 *)(v66 + 2 * v98)
                        + *(__int16 *)(v66 + 2 * v99)
                        + 2) >> 2;
                  goto LABEL_78;
                }
                if (a1 & 1) == 0 || (v12)
                {
                  int v104 = *(__int16 *)(v65 + 2 * v98);
                  if ((a1 & 1) != 0 || (v12 & 1) == 0)
                  {
LABEL_78:
                    uint64_t v106 = 2 * (v67 + a1);
                    int v107 = *(__int16 *)(v7 + v106);
                    a5[19] = v104;
                    a5[4] = v107;
                    a5[13] = *(__int16 *)(v8 + v106);
                    if ((v103 & a2) != 0)
                    {
                      int v108 = (*(__int16 *)(v85 + 2 * v98)
                            + *(__int16 *)(v85 + 2 * v99)
                            + *(__int16 *)(v86 + 2 * v98)
                            + *(__int16 *)(v86 + 2 * v99)
                            + 2) >> 2;
                      goto LABEL_87;
                    }
                    if (a1 & 1) == 0 || (a2)
                    {
                      int v108 = *(__int16 *)(v85 + 2 * v98);
                      if ((a1 & 1) != 0 || (a2 & 1) == 0)
                      {
LABEL_87:
                        uint64_t v110 = 2 * (v87 + a1);
                        int v111 = *(__int16 *)(v7 + v110);
                        a5[22] = v108;
                        a5[7] = v111;
                        a5[16] = *(__int16 *)(v8 + v110);
                        if ((v72 & v103) != 0)
                        {
                          int v112 = (*(__int16 *)(v92 + 2 * v98)
                                + *(__int16 *)(v92 + 2 * v99)
                                + *(__int16 *)(v93 + 2 * v98)
                                + *(__int16 *)(v93 + 2 * v99)
                                + 2) >> 2;
                          goto LABEL_96;
                        }
                        if (a1 & 1) == 0 || (v72)
                        {
                          int v112 = *(__int16 *)(v92 + 2 * v98);
                          if ((a1 & 1) != 0 || (v72 & 1) == 0)
                          {
LABEL_96:
                            a5[25] = v112;
                            int v114 = a1 + 1;
                            int v115 = (a1 + 1) >> 1;
                            if (v60 < v115) {
                              int v115 = v60;
                            }
                            if (v60 >= v115 + 1) {
                              int v116 = v115 + 1;
                            }
                            else {
                              int v116 = v60;
                            }
                            uint64_t v117 = v115;
                            uint64_t result = v116;
                            uint64_t v118 = 2 * (v62 + v114);
                            int v119 = *(__int16 *)(v7 + v118);
                            int v120 = *(__int16 *)(v8 + v118);
                            int v121 = v114 & 1;
                            a5[2] = v119;
                            a5[11] = v120;
                            if (v12 & v114)
                            {
                              int v122 = (*(__int16 *)(v65 + 2 * v117)
                                    + *(__int16 *)(v65 + 2 * result)
                                    + *(__int16 *)(v66 + 2 * v117)
                                    + *(__int16 *)(v66 + 2 * result)
                                    + 2) >> 2;
                              goto LABEL_110;
                            }
                            int v123 = v12 & 1;
                            if (v114 & 1) == 0 || (v12)
                            {
                              int v122 = *(__int16 *)(v65 + 2 * v117);
                              if ((v114 & 1) != 0 || !v123)
                              {
LABEL_110:
                                uint64_t v125 = 2 * (v67 + v114);
                                int v126 = *(__int16 *)(v7 + v125);
                                a5[20] = v122;
                                a5[5] = v126;
                                a5[14] = *(__int16 *)(v8 + v125);
                                if ((v121 & a2) != 0)
                                {
                                  int v127 = (*(__int16 *)(v85 + 2 * v117)
                                        + *(__int16 *)(v85 + 2 * result)
                                        + *(__int16 *)(v86 + 2 * v117)
                                        + *(__int16 *)(v86 + 2 * result)
                                        + 2) >> 2;
                                  goto LABEL_119;
                                }
                                if (v114 & 1) == 0 || (a2)
                                {
                                  int v127 = *(__int16 *)(v85 + 2 * v117);
                                  if ((v114 & 1) != 0 || (a2 & 1) == 0)
                                  {
LABEL_119:
                                    uint64_t v129 = 2 * (v87 + v114);
                                    int v130 = *(__int16 *)(v7 + v129);
                                    a5[23] = v127;
                                    a5[8] = v130;
                                    a5[17] = *(__int16 *)(v8 + v129);
                                    if ((v72 & v121) != 0)
                                    {
                                      int v57 = (*(__int16 *)(v92 + 2 * v117)
                                           + *(__int16 *)(v92 + 2 * result)
                                           + *(__int16 *)(v93 + 2 * v117)
                                           + *(__int16 *)(v93 + 2 * result)
                                           + 2) >> 2;
                                      goto LABEL_128;
                                    }
                                    if (v114 & 1) == 0 || (v72)
                                    {
                                      int v57 = *(__int16 *)(v92 + 2 * v117);
                                      if ((v114 & 1) != 0 || (v72 & 1) == 0) {
                                        goto LABEL_128;
                                      }
                                      int v131 = *(__int16 *)(v93 + 2 * v117);
                                    }
                                    else
                                    {
                                      int v57 = *(__int16 *)(v92 + 2 * v117);
                                      int v131 = *(__int16 *)(v92 + 2 * result);
                                    }
                                    int v57 = (v57 + v131 + 1) >> 1;
                                    goto LABEL_128;
                                  }
                                  int v128 = *(__int16 *)(v86 + 2 * v117);
                                }
                                else
                                {
                                  int v127 = *(__int16 *)(v85 + 2 * v117);
                                  int v128 = *(__int16 *)(v85 + 2 * result);
                                }
                                int v127 = (v127 + v128 + 1) >> 1;
                                goto LABEL_119;
                              }
                              int v124 = *(__int16 *)(v66 + 2 * v117);
                            }
                            else
                            {
                              int v122 = *(__int16 *)(v65 + 2 * v117);
                              int v124 = *(__int16 *)(v65 + 2 * result);
                            }
                            int v122 = (v122 + v124 + 1) >> 1;
                            goto LABEL_110;
                          }
                          int v113 = v112 + *(__int16 *)(v93 + 2 * v98);
                        }
                        else
                        {
                          int v113 = *(__int16 *)(v92 + 2 * v98) + *(__int16 *)(v92 + 2 * v99);
                        }
                        int v112 = (v113 + 1) >> 1;
                        goto LABEL_96;
                      }
                      int v109 = *(__int16 *)(v86 + 2 * v98);
                    }
                    else
                    {
                      int v108 = *(__int16 *)(v85 + 2 * v98);
                      int v109 = *(__int16 *)(v85 + 2 * v99);
                    }
                    int v108 = (v108 + v109 + 1) >> 1;
                    goto LABEL_87;
                  }
                  int v105 = *(__int16 *)(v66 + 2 * v98);
                }
                else
                {
                  int v104 = *(__int16 *)(v65 + 2 * v98);
                  int v105 = *(__int16 *)(v65 + 2 * v99);
                }
                int v104 = (v104 + v105 + 1) >> 1;
                goto LABEL_78;
              }
              int v97 = *(__int16 *)(v93 + 2 * v75);
            }
            else
            {
              int v96 = *(__int16 *)(v92 + 2 * v75);
              int v97 = *(__int16 *)(v92 + 2 * v76);
            }
            int v96 = (v96 + v97 + 1) >> 1;
            goto LABEL_64;
          }
          int v91 = v90 + *(__int16 *)(v86 + 2 * v75);
        }
        else
        {
          int v91 = *(__int16 *)(v85 + 2 * v75) + *(__int16 *)(v85 + 2 * v76);
        }
        int v90 = (v91 + 1) >> 1;
        goto LABEL_55;
      }
      int v82 = *(__int16 *)(v66 + 2 * v75);
    }
    else
    {
      int v81 = *(__int16 *)(v65 + 2 * v75);
      int v82 = *(__int16 *)(v65 + 2 * v76);
    }
    int v81 = (v81 + v82 + 1) >> 1;
    goto LABEL_46;
  }
  double v13 = (void *)(v5 + 144 * (a3 - 1));
  uint64_t v14 = v13[5];
  unint64_t v15 = v13[4] - 1;
  unint64_t v16 = v13[6] - 1;
  unint64_t v17 = 2 * v12;
  if (v16 < v17) {
    unint64_t v17 = v16;
  }
  unint64_t v18 = v17 * v14;
  if (v15 >= 2 * v11) {
    uint64_t v19 = 2 * v11;
  }
  else {
    uint64_t v19 = v15;
  }
  int v20 = *(__int16 *)(v7 + 2 * (v18 + v19));
  int v21 = v12 * v10;
  uint64_t v22 = 2 * (v21 + v11);
  int v23 = *(__int16 *)(v8 + v22);
  int v24 = *(__int16 *)(v9 + v22);
  unint64_t v25 = 2 * a2;
  if (v16 < v25) {
    unint64_t v25 = v16;
  }
  unint64_t v26 = v25 * v14;
  int v27 = *(__int16 *)(v7 + 2 * (v26 + v19));
  int v28 = v10 * a2;
  uint64_t v29 = 2 * (v10 * a2 + v11);
  int v30 = *(__int16 *)(v8 + v29);
  int v31 = *(__int16 *)(v9 + v29);
  int v32 = a2 + 1;
  if (v16 >= 2 * v32) {
    unint64_t v16 = 2 * v32;
  }
  unint64_t v33 = v16 * v14;
  int v34 = *(__int16 *)(v7 + 2 * (v33 + v19));
  int v35 = v32 * v10;
  uint64_t v36 = 2 * (v35 + v11);
  int v37 = *(__int16 *)(v8 + v36);
  int v38 = *(__int16 *)(v9 + v36);
  unint64_t v39 = 2 * a1;
  if (v15 < v39) {
    unint64_t v39 = v15;
  }
  int v40 = *(__int16 *)(v7 + 2 * (v18 + v39));
  *a5 = v20;
  a5[1] = v40;
  uint64_t v41 = 2 * (v21 + a1);
  int v42 = *(__int16 *)(v8 + v41);
  LODWORD(v41) = *(__int16 *)(v9 + v41);
  a5[18] = v24;
  a5[19] = v41;
  int v43 = *(__int16 *)(v7 + 2 * (v26 + v39));
  uint64_t v44 = 2 * (v28 + a1);
  int v45 = *(__int16 *)(v8 + v44);
  int v46 = *(__int16 *)(v7 + 2 * (v33 + v39));
  a5[12] = v30;
  a5[13] = v45;
  uint64_t v47 = 2 * (v35 + a1);
  int v48 = *(__int16 *)(v9 + v47);
  a5[6] = v34;
  a5[7] = v46;
  a5[24] = v38;
  a5[25] = v48;
  uint64_t result = (a1 + 1);
  if (v15 >= 2 * (int)result) {
    unint64_t v15 = 2 * (int)result;
  }
  int v50 = *(__int16 *)(v9 + v44);
  int v51 = *(__int16 *)(v8 + v47);
  a5[2] = *(__int16 *)(v7 + 2 * (v18 + v15));
  a5[3] = v27;
  uint64_t v52 = 2 * (v21 + (int)result);
  int v53 = *(__int16 *)(v8 + v52);
  a5[10] = v42;
  a5[11] = v53;
  a5[20] = *(__int16 *)(v9 + v52);
  a5[21] = v31;
  LODWORD(v52) = *(__int16 *)(v7 + 2 * (v26 + v15));
  a5[4] = v43;
  a5[5] = v52;
  uint64_t v54 = 2 * (v28 + (int)result);
  a5[14] = *(__int16 *)(v8 + v54);
  a5[15] = v37;
  LODWORD(v54) = *(__int16 *)(v9 + v54);
  a5[22] = v50;
  a5[23] = v54;
  a5[8] = *(__int16 *)(v7 + 2 * (v33 + v15));
  a5[9] = v23;
  uint64_t v55 = 2 * (v35 + (int)result);
  int v56 = *(__int16 *)(v8 + v55);
  a5[16] = v51;
  a5[17] = v56;
  int v57 = *(__int16 *)(v9 + v55);
LABEL_128:
  a5[26] = v57;
  return result;
}

double sub_2194DEE90(_DWORD *a1, uint64_t a2, int32x2_t *a3)
{
  a3->i32[0] = (a1[14] - a1[12] + 1) >> 1;
  a3->i32[1] = (a1[16] - a1[10] + 1) >> 1;
  a3[1].i32[0] = (a1[22] - a1[4] + 1) >> 1;
  *(_DWORD *)a2 = (a1[14] + a1[12] - 2 * a1[13] + 2) >> 2;
  *(_DWORD *)(a2 + 16) = (a1[16] + a1[10] - 2 * a1[13] + 2) >> 2;
  *(_DWORD *)(a2 + 32) = (a1[4] + a1[22] - 2 * a1[13] + 2) >> 2;
  int v3 = (__int32 *)(a2 + 4);
  *(_DWORD *)(a2 + 4) = (a1[9] + a1[17] - (a1[11] + a1[15]) + 8) >> 4;
  *(_DWORD *)(a2 + 24) = (a1[3] + a1[23] - (a1[5] + a1[21]) + 8) >> 4;
  *(_DWORD *)(a2 + 20) = (a1[1] + a1[25] - (a1[7] + a1[19]) + 8) >> 4;
  *a3 = vneg_s32(vmin_s32(vmax_s32(*a3, (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL));
  int v4 = a3[1].i32[0];
  if (v4 <= -32768) {
    int v4 = -32768;
  }
  if (v4 >= 0x7FFF) {
    int v4 = 0x7FFF;
  }
  a3[1].i32[0] = -v4;
  int v5 = *(_DWORD *)a2;
  if (*(int *)a2 <= -32768) {
    int v5 = -32768;
  }
  if (v5 >= 0x7FFF) {
    int v5 = 0x7FFF;
  }
  *(_DWORD *)a2 = v5;
  int v6 = *(_DWORD *)(a2 + 32);
  if (v6 <= -32768) {
    int v6 = -32768;
  }
  if (v6 >= 0x7FFF) {
    int v6 = 0x7FFF;
  }
  v7.i32[0] = *(_DWORD *)(a2 + 24);
  v7.i32[1] = *v3;
  v7.i64[1] = *(void *)(a2 + 16);
  v8.i64[0] = 0x7F0000007FLL;
  v8.i64[1] = 0x7F0000007FLL;
  int32x4_t v9 = vmaxq_s32(v7, v8);
  v7.i64[0] = 0x7F0000007FLL;
  v7.i64[1] = 0x7F0000007FLL;
  int8x16_t v10 = (int8x16_t)vminq_s32(v9, v7);
  *int v3 = v10.i32[1];
  *(_DWORD *)(a2 + 32) = v6;
  *(int8x16_t *)(a2 + 8) = v10;
  v10.i32[1] = vextq_s8(v10, v10, 8uLL).i32[1];
  *(void *)(a2 + 24) = v10.i64[0];
  return *(double *)v10.i64;
}

void sub_2194DF058(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 2;
  *(unsigned char *)(a1 + 4) = 0;
  *(int64x2_t *)(a1 + 8) = vdupq_n_s64(0x280uLL);
  *(unsigned char *)(a1 + 24) = 0;
  strcpy((char *)(a1 + 32), "/tmp/");
  *(_WORD *)(a1 + 55) = 261;
  *(void *)(a1 + 60) = 0x90000002DLL;
  *(void *)(a1 + 72) = 5000;
  *(unsigned char *)(a1 + 80) = 1;
  *(_DWORD *)(a1 + 84) = 1061997773;
  *(unsigned char *)(a1 + 88) = 0;
  *(int64x2_t *)(a1 + 96) = vdupq_n_s64(1uLL);
  *(void *)(a1 + 112) = 5;
  *(_WORD *)(a1 + 120) = 256;
  *(_WORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 228) = xmmword_21950BE60;
  *(_OWORD *)(a1 + 244) = xmmword_21950BE70;
  *(void *)(a1 + 292) = 0x3E4CCCCD00004000;
  *(_OWORD *)(a1 + 260) = xmmword_21950D468;
  *(_OWORD *)(a1 + 276) = unk_21950D478;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = sub_2194E1520;
  *(void *)(a1 + 320) = 5;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(void *)(a1 + 648) = a1 + 656;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = xmmword_21950D330;
  *(void *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 745) = 0u;
  long long v4 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)a1 = v4;
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  long long v5 = *(_OWORD *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 72);
  long long v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 72) = v6;
  long long v8 = *(_OWORD *)(a2 + 120);
  long long v9 = *(_OWORD *)(a2 + 136);
  long long v10 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v10;
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 136) = v9;
  long long v11 = *(_OWORD *)(a2 + 184);
  long long v12 = *(_OWORD *)(a2 + 200);
  long long v13 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v13;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 200) = v12;
  long long v14 = *(_OWORD *)(a2 + 248);
  long long v15 = *(_OWORD *)(a2 + 264);
  long long v16 = *(_OWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 264) = v15;
  *(_OWORD *)(a1 + 280) = v16;
  *(_OWORD *)(a1 + 248) = v14;
  if (sub_2194E1E6C(a2))
  {
    if (*(void *)(a1 + 680) >= 0x141uLL)
    {
      uint64_t v19 = 4;
      if (*(void *)(a1 + 16) >= 0x141uLL) {
        uint64_t v19 = 5;
      }
    }
    else
    {
      uint64_t v19 = 4;
    }
    *(void *)(a1 + 320) = v19;
    sub_2194DFC6C(a1, v17, v18);
    operator new();
  }
  sub_2194FF760("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGenerator.cpp", 71, "IsKeyPointAndDescriptorGeneratorConfigValid(config) && \"Invalid configuration\"", (void (*)(void *))sub_2194FF9C0);
  abort();
}

void sub_2194DFA70(_Unwind_Exception *a1, uint64_t a2, void **a3, void **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x21D48B5B0](v17, 0x10A1C400185FAF4);
  sub_2194E0A5C(va);
  int v21 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v21;
    operator delete(v21);
  }
  sub_2194E0AC0(&STACK[0x250]);
  uint64_t v22 = *v19;
  if (*v19)
  {
    *(void *)(v14 + 872) = v22;
    operator delete(v22);
    int v23 = *a3;
    if (!*a3)
    {
LABEL_5:
      uint64_t v24 = v14 + 648;
      unint64_t v25 = *a4;
      if (!*a4) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else
  {
    int v23 = *a3;
    if (!*a3) {
      goto LABEL_5;
    }
  }
  *(void *)(v14 + 744) = v23;
  operator delete(v23);
  uint64_t v24 = v14 + 648;
  unint64_t v25 = *a4;
  if (!*a4)
  {
LABEL_6:
    unint64_t v26 = *v18;
    if (!*v18) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  *(void *)(v14 + 720) = v25;
  operator delete(v25);
  unint64_t v26 = *v18;
  if (!*v18)
  {
LABEL_8:
    sub_2194DD010(v24, *(void **)(v14 + 656));
    sub_21949AABC(v16);
    uint64_t v27 = *(void *)(v14 + 304);
    *(void *)(v14 + 304) = 0;
    if (v27) {
      (*(void (**)(void))(v14 + 312))();
    }
    if (*(char *)(v14 + 55) < 0) {
      operator delete(*v15);
    }
    _Unwind_Resume(a1);
  }
LABEL_7:
  *(void *)(v14 + 696) = v26;
  operator delete(v26);
  goto LABEL_8;
}

void sub_2194DFC6C(uint64_t a1, double a2, uint32x4_t a3)
{
  long long v4 = (_OWORD *)(a1 + 764);
  long long v5 = v173;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 <= 0x280)
  {
    *(void *)(a1 + 672) = 1;
    *(void *)(a1 + 680) = v6;
    long long v7 = *(char **)(a1 + 744);
    unint64_t v8 = *(void *)(a1 + 752);
    if ((unint64_t)v7 < v8)
    {
      *(_DWORD *)long long v7 = 0;
      uint64_t v9 = (uint64_t)(v7 + 4);
LABEL_82:
      *(void *)(a1 + 744) = v9;
      uint64_t v81 = *(void *)(a1 + 688);
      unint64_t v82 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 696) - v81) >> 3);
      if (*(void *)(a1 + 696) == v81)
      {
        sub_2194D06E4((char **)(a1 + 688), 1 - v82);
      }
      else if (v82 >= 2)
      {
        *(void *)(a1 + 696) = v81 + 40;
      }
      int v83 = *(signed __int32 **)(a1 + 712);
      unint64_t v84 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 720) - (void)v83) >> 3);
      if (*(signed __int32 **)(a1 + 720) == v83)
      {
        sub_2194D06E4((char **)(a1 + 712), 1 - v84);
        int v83 = *(signed __int32 **)(a1 + 712);
      }
      else if (v84 >= 2)
      {
        *(void *)(a1 + 720) = v83 + 10;
      }
      uint64_t v85 = *(long long **)(a1 + 688);
      *((void *)v85 + 4) = 0;
      *uint64_t v85 = 0u;
      v85[1] = 0u;
      signed __int32 v86 = *(_DWORD *)(a1 + 8);
      signed __int32 *v83 = v86;
      int v87 = *(_DWORD *)(a1 + 16);
      int v88 = v86 + 2;
      if (v86 >= -1) {
        int v88 = v86 + 1;
      }
      int v89 = v88 >> 1;
      v83[1] = v87;
      v83[2] = v89;
      int v90 = v87 + 2;
      if (v87 >= -1) {
        int v90 = v87 + 1;
      }
      int v91 = v90 >> 1;
      if (v89 >= -1) {
        int v92 = v89 + 1;
      }
      else {
        int v92 = v89 + 2;
      }
      int v93 = v92 >> 1;
      v83[3] = v91;
      void v83[4] = v93;
      if (v91 >= -1) {
        int v94 = v91 + 1;
      }
      else {
        int v94 = v91 + 2;
      }
      int v95 = v94 >> 1;
      if (v93 >= -1) {
        int v96 = v93 + 1;
      }
      else {
        int v96 = v93 + 2;
      }
      int v97 = v96 >> 1;
      v83[5] = v95;
      v83[6] = v97;
      if (v95 >= -1) {
        int v98 = v95 + 1;
      }
      else {
        int v98 = v95 + 2;
      }
      int v99 = v98 >> 1;
      if (v97 >= -1) {
        int v100 = v97 + 1;
      }
      else {
        int v100 = v97 + 2;
      }
      v83[7] = v99;
      v83[8] = v100 >> 1;
      int v101 = v99 + 2;
      if (v99 >= -1) {
        int v101 = v99 + 1;
      }
      v83[9] = v101 >> 1;
      int v102 = *(unsigned __int8 *)(a1 + 120);
      *(unsigned char *)(a1 + 760) = v102;
      if (v102)
      {
        bzero(v165, 0x824uLL);
        v164[0] = 1;
        uint64_t v169 = *(void *)v83;
        long long v166 = *v85;
        long long v170 = *(_OWORD *)(v83 + 2);
        long long v167 = v85[1];
        uint64_t v171 = *((void *)v83 + 3);
        v168[0] = *((void *)v85 + 4);
        v172[0] = *((double *)v83 + 4);
        sub_2194E22C8(0x280u, v86, v87, 1, v164, v172[0], v103);
        int v104 = *(void **)(a1 + 864);
        unint64_t v105 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 872) - (void)v104) >> 3);
        if (*(void **)(a1 + 872) == v104)
        {
          sub_2194D06E4((char **)(a1 + 864), 1 - v105);
          int v104 = *(void **)(a1 + 864);
        }
        else if (v105 >= 2)
        {
          *(void *)(a1 + 872) = v104 + 5;
        }
        *(_DWORD *)(a1 + 844) = v179;
        *int v104 = v173[0];
        *long long v4 = v174;
        *(_DWORD *)(a1 + 848) = DWORD1(v179);
        v104[1] = v173[1];
        void v4[3] = v177;
        *(_DWORD *)(a1 + 852) = DWORD2(v179);
        v104[2] = v173[2];
        v4[1] = v175;
        *(_DWORD *)(a1 + 856) = HIDWORD(v179);
        v104[3] = v173[3];
        v4[2] = v176;
        v4[4] = v178;
        *(_DWORD *)(a1 + 860) = v180;
        v104[4] = v173[4];
      }
      return;
    }
    long long v12 = *(char **)(a1 + 736);
    uint64_t v13 = (v7 - v12) >> 2;
    unint64_t v14 = v13 + 1;
    if (!((unint64_t)(v13 + 1) >> 62))
    {
      uint64_t v15 = v8 - (void)v12;
      if (v15 >> 1 > v14) {
        unint64_t v14 = v15 >> 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (!v16)
      {
        uint64_t v17 = 0;
        uint32x4_t v18 = (_DWORD *)(4 * v13);
        uint64_t v19 = 0;
        *(_DWORD *)(4 * v13) = 0;
        uint64_t v9 = 4 * v13 + 4;
        int64_t v20 = v7 - v12;
        if (v7 == v12) {
          goto LABEL_80;
        }
        goto LABEL_74;
      }
      if (!(v16 >> 62))
      {
        uint64_t v17 = operator new(4 * v16);
        uint32x4_t v18 = &v17[4 * v13];
        uint64_t v19 = &v17[4 * v16];
        *uint32x4_t v18 = 0;
        uint64_t v9 = (uint64_t)(v18 + 1);
        int64_t v20 = v7 - v12;
        if (v7 == v12)
        {
LABEL_80:
          *(void *)(a1 + 736) = v18;
          *(void *)(a1 + 744) = v9;
          *(void *)(a1 + 752) = v19;
          if (v12) {
            operator delete(v12);
          }
          goto LABEL_82;
        }
LABEL_74:
        unint64_t v72 = v20 - 4;
        if (v72 < 0x2C) {
          goto LABEL_206;
        }
        if ((unint64_t)(v12 - v17) < 0x20) {
          goto LABEL_206;
        }
        uint64_t v73 = (v72 >> 2) + 1;
        uint64_t v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
        int v75 = &v7[-v74];
        uint32x4_t v18 = (_DWORD *)((char *)v18 - v74);
        int v76 = &v17[4 * v13 - 16];
        uint64_t v77 = v7 - 16;
        uint64_t v78 = v73 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v79 = *(_OWORD *)v77;
          *(v76 - 1) = *((_OWORD *)v77 - 1);
          *int v76 = v79;
          v76 -= 2;
          v77 -= 32;
          v78 -= 8;
        }
        while (v78);
        long long v7 = v75;
        if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_206:
          do
          {
            int v80 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *--uint32x4_t v18 = v80;
          }
          while (v7 != v12);
        }
        goto LABEL_80;
      }
LABEL_202:
      sub_219486AFC();
    }
LABEL_203:
    sub_219486AE4();
  }
  *(void *)(a1 + 680) = 640;
  if (*(unsigned char *)(a1 + 120))
  {
    BOOL v10 = *(unsigned char *)(a1 + 121) == 0;
    uint64_t v11 = *(void *)(a1 + 16);
    if (v6 != 1056)
    {
LABEL_22:
      sub_2194E22C8(0x280u, v6, v11, *(unsigned __int8 *)(a1 + 120) != 0, v164, a2, a3);
      unint64_t v25 = v164[0];
      *(void *)(a1 + 672) = v164[0];
      if (!*(unsigned char *)(a1 + 121))
      {
        unint64_t v26 = *(void *)(a1 + 320);
        if (v26)
        {
          uint64_t v27 = 0;
          unsigned int v28 = 0;
          int v29 = *(_DWORD *)(a1 + 16);
          do
          {
            if (v28)
            {
              if (v29 >= -1) {
                int v30 = v29 + 1;
              }
              else {
                int v30 = v29 + 2;
              }
              int v29 = v30 >> 1;
            }
            signed int v31 = 0x280u >> v28;
            int v32 = (_DWORD *)(a1 + 4 * v27);
            unint64_t v33 = (_DWORD *)&v176 + 2 * v27 + 2;
            *unint64_t v33 = v32[31];
            v33[1] = v32[36];
            int v34 = v33 + 1;
            int v35 = (int *)&v174 + 2 * v27;
            *int v35 = v32[41];
            v35[1] = v32[46];
            uint64_t v36 = v35 + 1;
            unsigned int v37 = v32[51];
            *((_DWORD *)&v179 + v27) = v37;
            int v38 = *((_DWORD *)&v176 + 2 * v27 + 2);
            BOOL v39 = v38 < 2 || v38 > v31;
            if (v39) {
              sub_219509AD8();
            }
            int v40 = *v34;
            if (v40 < 2 || v40 > dword_21950D454[v27]) {
              sub_219509B10();
            }
            int v41 = *v35;
            int v42 = *v35 - 1;
            if (v41 < 1 || v41 > dword_21950D440[v27]) {
              sub_219509B48();
            }
            int v43 = *v36;
            if ((v43 - 1) >= 0x100) {
              sub_219509C98();
            }
            if (v41 * v38 < v31) {
              sub_219509B80();
            }
            if (v42 * v38 >= v31) {
              sub_219509C60();
            }
            if (v43 * v40 < v29) {
              sub_219509BB8();
            }
            if ((v43 - 1) * v40 >= v29) {
              sub_219509C28();
            }
            if (v37 >= 4) {
              sub_219509BF0();
            }
            uint64_t v27 = ++v28;
          }
          while (v26 > v28);
        }
      }
      *(unsigned char *)(a1 + 760) = *(unsigned char *)(a1 + 120);
      uint64_t v44 = *(void *)(a1 + 736);
      unint64_t v45 = (*(void *)(a1 + 744) - v44) >> 2;
      if (v25 <= v45)
      {
        if (v25 < v45) {
          *(void *)(a1 + 744) = v44 + 4 * v25;
        }
      }
      else
      {
        sub_219488D70(a1 + 736, v25 - v45);
        unint64_t v25 = *(void *)(a1 + 672);
      }
      uint64_t v55 = *(void *)(a1 + 688);
      unint64_t v56 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 696) - v55) >> 3);
      if (v25 <= v56)
      {
        if (v25 < v56) {
          *(void *)(a1 + 696) = v55 + 40 * v25;
        }
      }
      else
      {
        sub_2194D06E4((char **)(a1 + 688), v25 - v56);
        unint64_t v25 = *(void *)(a1 + 672);
      }
      uint64_t v57 = *(void *)(a1 + 712);
      unint64_t v58 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 720) - v57) >> 3);
      if (v25 <= v58)
      {
        if (v25 < v58) {
          *(void *)(a1 + 720) = v57 + 40 * v25;
        }
      }
      else
      {
        sub_2194D06E4((char **)(a1 + 712), v25 - v58);
        unint64_t v25 = *(void *)(a1 + 672);
      }
      if (v25)
      {
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        uint64_t v61 = *(void *)(a1 + 736);
        uint64_t v62 = *(void *)(a1 + 688);
        uint64_t v63 = *(void *)(a1 + 712);
        do
        {
          *(_DWORD *)(v61 + 4 * v60) = v164[v60 + 1];
          uint64_t v64 = v63 + v59 * 8;
          *(void *)uint64_t v64 = *(uint64_t *)((char *)&v169 + v59 * 8);
          uint64_t v65 = v62 + v59 * 8;
          *(_OWORD *)uint64_t v65 = *(long long *)((char *)&v166 + v59 * 8);
          *(_OWORD *)(v64 + 8) = *(long long *)((char *)&v170 + v59 * 8);
          *(_OWORD *)(v65 + 16) = *(_OWORD *)&v168[v59 - 2];
          *(void *)(v64 + 24) = *(uint64_t *)&v172[v59 - 1];
          *(void *)(v65 + 32) = v168[v59];
          uint64_t v66 = &v172[v59];
          ++v60;
          v59 += 5;
          *(double *)(v64 + 32) = *v66;
        }
        while (v25 > v60);
      }
      if (*(unsigned char *)(a1 + 760))
      {
        long long v67 = v175;
        *long long v4 = v174;
        v4[1] = v67;
        long long v68 = v177;
        v4[2] = v176;
        void v4[3] = v68;
        long long v69 = v179;
        v4[4] = v178;
        v4[5] = v69;
        *(_DWORD *)(a1 + 860) = v180;
        uint64_t v70 = *(void *)(a1 + 864);
        unint64_t v71 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 872) - v70) >> 3);
        if (v25 <= v71)
        {
          if (v25 < v71) {
            *(void *)(a1 + 872) = v70 + 40 * v25;
          }
        }
        else
        {
          sub_2194D06E4((char **)(a1 + 864), v25 - v71);
        }
        unint64_t v106 = *(void *)(a1 + 672);
        if (v106)
        {
          int v107 = (void *)(*(void *)(a1 + 864) + 32);
          uint64_t v108 = 1;
          do
          {
            *((_OWORD *)v107 - 2) = *(_OWORD *)v5;
            *((_OWORD *)v107 - 1) = *((_OWORD *)v5 + 1);
            *int v107 = v5[4];
            v107 += 5;
            BOOL v39 = v106 > v108++;
            v5 += 5;
          }
          while (v39);
        }
      }
      return;
    }
  }
  else
  {
    BOOL v10 = 0;
    uint64_t v11 = *(void *)(a1 + 16);
    if (v6 != 1056) {
      goto LABEL_22;
    }
  }
  if (v10 || v11 != 756) {
    goto LABEL_22;
  }
  *(void *)(a1 + 672) = 3;
  int v21 = (void **)(a1 + 736);
  uint64_t v22 = *(char **)(a1 + 744);
  int v23 = *(char **)(a1 + 752);
  if (v22 < v23)
  {
    *(_DWORD *)uint64_t v22 = 0;
    uint64_t v24 = v22 + 4;
    goto LABEL_132;
  }
  int v46 = *v21;
  uint64_t v47 = v22 - (unsigned char *)*v21;
  uint64_t v48 = v47 >> 2;
  unint64_t v49 = (v47 >> 2) + 1;
  if (v49 >> 62) {
    goto LABEL_203;
  }
  uint64_t v50 = v23 - v46;
  if (v50 >> 1 > v49) {
    unint64_t v49 = v50 >> 1;
  }
  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v51 = v49;
  }
  if (v51)
  {
    if (v51 >> 62) {
      goto LABEL_202;
    }
    uint64_t v52 = operator new(4 * v51);
    int v53 = &v52[4 * v48];
    int v23 = &v52[4 * v51];
    *int v53 = 0;
    uint64_t v24 = (char *)(v53 + 1);
    int64_t v54 = v22 - v46;
    if (v22 == v46) {
      goto LABEL_130;
    }
    goto LABEL_124;
  }
  uint64_t v52 = 0;
  int v53 = (_DWORD *)(4 * v48);
  int v23 = 0;
  *(_DWORD *)(4 * v48) = 0;
  uint64_t v24 = (char *)(4 * v48 + 4);
  int64_t v54 = v22 - v46;
  if (v22 != v46)
  {
LABEL_124:
    unint64_t v109 = v54 - 4;
    if (v109 < 0x2C) {
      goto LABEL_207;
    }
    if ((unint64_t)(v22 - v52 - v47) < 0x20) {
      goto LABEL_207;
    }
    uint64_t v110 = (v109 >> 2) + 1;
    uint64_t v111 = 4 * (v110 & 0x7FFFFFFFFFFFFFF8);
    int v112 = &v22[-v111];
    int v53 = (_DWORD *)((char *)v53 - v111);
    int v113 = &v52[4 * v48 - 16];
    int v114 = (long long *)(v22 - 16);
    uint64_t v115 = v110 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v116 = *v114;
      *(v113 - 1) = *(v114 - 1);
      *int v113 = v116;
      v113 -= 2;
      v114 -= 2;
      v115 -= 8;
    }
    while (v115);
    uint64_t v22 = v112;
    if (v110 != (v110 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_207:
      do
      {
        int v117 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *--int v53 = v117;
      }
      while (v22 != v46);
    }
  }
LABEL_130:
  *(void *)(a1 + 736) = v53;
  *(void *)(a1 + 744) = v24;
  *(void *)(a1 + 752) = v23;
  if (v46)
  {
    operator delete(v46);
    int v23 = *(char **)(a1 + 752);
  }
LABEL_132:
  *(void *)(a1 + 744) = v24;
  if (v24 < v23)
  {
    *(_DWORD *)uint64_t v24 = 208;
    uint64_t v118 = v24 + 4;
    goto LABEL_155;
  }
  int v119 = (char *)*v21;
  uint64_t v120 = v24 - (unsigned char *)*v21;
  uint64_t v121 = v120 >> 2;
  unint64_t v122 = (v120 >> 2) + 1;
  if (v122 >> 62) {
    goto LABEL_203;
  }
  uint64_t v123 = v23 - v119;
  if (v123 >> 1 > v122) {
    unint64_t v122 = v123 >> 1;
  }
  if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v124 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v124 = v122;
  }
  if (v124)
  {
    if (v124 >> 62) {
      goto LABEL_202;
    }
    uint64_t v125 = operator new(4 * v124);
  }
  else
  {
    uint64_t v125 = 0;
  }
  int v126 = &v125[4 * v121];
  int v23 = &v125[4 * v124];
  *int v126 = 208;
  uint64_t v118 = (char *)(v126 + 1);
  if (v24 != v119)
  {
    unint64_t v127 = v24 - v119 - 4;
    if (v127 < 0x2C)
    {
      int v128 = v24;
      goto LABEL_152;
    }
    if ((unint64_t)(v24 - v125 - v120) < 0x20)
    {
      int v128 = v24;
      do
      {
LABEL_152:
        int v135 = *((_DWORD *)v128 - 1);
        v128 -= 4;
        *--int v126 = v135;
      }
      while (v128 != v119);
      goto LABEL_153;
    }
    uint64_t v129 = (v127 >> 2) + 1;
    uint64_t v130 = 4 * (v129 & 0x7FFFFFFFFFFFFFF8);
    int v128 = &v24[-v130];
    int v126 = (_DWORD *)((char *)v126 - v130);
    int v131 = &v125[4 * v121 - 16];
    uint16x8_t v132 = (long long *)(v24 - 16);
    uint64_t v133 = v129 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v134 = *v132;
      *(v131 - 1) = *(v132 - 1);
      *int v131 = v134;
      v131 -= 2;
      v132 -= 2;
      v133 -= 8;
    }
    while (v133);
    if (v129 != (v129 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_152;
    }
  }
LABEL_153:
  *(void *)(a1 + 736) = v126;
  *(void *)(a1 + 744) = v118;
  *(void *)(a1 + 752) = v23;
  if (v119)
  {
    operator delete(v119);
    int v23 = *(char **)(a1 + 752);
  }
LABEL_155:
  *(void *)(a1 + 744) = v118;
  if (v118 >= v23)
  {
    uint16x8_t v137 = (char *)*v21;
    uint64_t v138 = v118 - (unsigned char *)*v21;
    uint64_t v139 = v138 >> 2;
    unint64_t v140 = (v138 >> 2) + 1;
    if (v140 >> 62) {
      goto LABEL_203;
    }
    uint64_t v141 = v23 - v137;
    if (v141 >> 1 > v140) {
      unint64_t v140 = v141 >> 1;
    }
    if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v142 = v140;
    }
    if (v142)
    {
      if (v142 >> 62) {
        goto LABEL_202;
      }
      int8x16_t v143 = operator new(4 * v142);
    }
    else
    {
      int8x16_t v143 = 0;
    }
    int v144 = &v143[4 * v139];
    int v145 = &v143[4 * v142];
    *int v144 = 416;
    uint16x8_t v136 = v144 + 1;
    if (v118 == v137) {
      goto LABEL_176;
    }
    unint64_t v146 = v118 - v137 - 4;
    if (v146 >= 0x2C)
    {
      if ((unint64_t)(v118 - v143 - v138) >= 0x20)
      {
        uint64_t v148 = (v146 >> 2) + 1;
        uint64_t v149 = 4 * (v148 & 0x7FFFFFFFFFFFFFF8);
        int v147 = &v118[-v149];
        int v144 = (_DWORD *)((char *)v144 - v149);
        int32x4_t v150 = &v143[4 * v139 - 16];
        BOOL v151 = v118 - 16;
        uint64_t v152 = v148 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v153 = *(_OWORD *)v151;
          *(v150 - 1) = *((_OWORD *)v151 - 1);
          *int32x4_t v150 = v153;
          v150 -= 2;
          v151 -= 32;
          v152 -= 8;
        }
        while (v152);
        if (v148 == (v148 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_176:
          *(void *)(a1 + 736) = v144;
          *(void *)(a1 + 744) = v136;
          *(void *)(a1 + 752) = v145;
          if (v137) {
            operator delete(v137);
          }
          goto LABEL_178;
        }
      }
      else
      {
        int v147 = v118;
      }
    }
    else
    {
      int v147 = v118;
    }
    do
    {
      int v154 = *((_DWORD *)v147 - 1);
      v147 -= 4;
      *--int v144 = v154;
    }
    while (v147 != v137);
    goto LABEL_176;
  }
  *(_DWORD *)uint64_t v118 = 416;
  uint16x8_t v136 = v118 + 4;
LABEL_178:
  *(void *)(a1 + 744) = v136;
  unint64_t v155 = *(void *)(a1 + 672);
  uint64_t v156 = *(void *)(a1 + 688);
  unint64_t v157 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 696) - v156) >> 3);
  if (v155 <= v157)
  {
    if (v155 < v157) {
      *(void *)(a1 + 696) = v156 + 40 * v155;
    }
  }
  else
  {
    sub_2194D06E4((char **)(a1 + 688), v155 - v157);
    unint64_t v155 = *(void *)(a1 + 672);
  }
  uint64_t v158 = *(void *)(a1 + 712);
  unint64_t v159 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 720) - v158) >> 3);
  if (v155 <= v159)
  {
    if (v155 < v159) {
      *(void *)(a1 + 720) = v158 + 40 * v155;
    }
  }
  else
  {
    sub_2194D06E4((char **)(a1 + 712), v155 - v159);
    uint64_t v158 = *(void *)(a1 + 712);
  }
  uint64_t v160 = *(void *)(a1 + 688);
  *(void *)(v160 + 32) = 0;
  *(_OWORD *)uint64_t v160 = 0u;
  *(_OWORD *)(v160 + 16) = 0u;
  *(_OWORD *)uint64_t v158 = xmmword_21950D360;
  *(_OWORD *)(v158 + 16) = xmmword_21950D370;
  *(_OWORD *)(v160 + 40) = xmmword_21950D380;
  *(_OWORD *)(v160 + 56) = xmmword_21950D390;
  *(void *)(v160 + 72) = 12;
  *(_OWORD *)(v158 + 32) = xmmword_21950D3A0;
  *(_OWORD *)(v158 + 48) = xmmword_21950D3B0;
  *(_OWORD *)(v158 + 64) = xmmword_21950D3C0;
  *(_OWORD *)(v160 + 80) = xmmword_21950D3D0;
  *(_OWORD *)(v160 + 96) = xmmword_21950D3E0;
  *(void *)(v160 + 112) = 13;
  *(_OWORD *)(v158 + 80) = xmmword_21950D360;
  *(_OWORD *)(v158 + 96) = xmmword_21950D370;
  *(void *)(v158 + 112) = 0x320000001BLL;
  if (*(unsigned char *)(a1 + 120))
  {
    *(unsigned char *)(a1 + 760) = 1;
    unint64_t v161 = *(void *)(a1 + 672);
    int32x4_t v162 = *(void **)(a1 + 864);
    unint64_t v163 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 872) - (void)v162) >> 3);
    if (v161 <= v163)
    {
      if (v161 < v163) {
        *(void *)(a1 + 872) = &v162[5 * v161];
      }
    }
    else
    {
      sub_2194D06E4((char **)(a1 + 864), v161 - v163);
      int32x4_t v162 = *(void **)(a1 + 864);
    }
    *int32x4_t v162 = 0;
    v162[5] = 214;
    v162[10] = 216;
    *(_DWORD *)(a1 + 844) = 0;
    *long long v4 = xmmword_21950D3F0;
    v162[1] = 0;
    v162[6] = 106;
    v162[11] = 108;
    *(_DWORD *)(a1 + 848) = 0;
    void v4[3] = xmmword_21950D400;
    v162[2] = 0;
    v162[7] = 52;
    v162[12] = 54;
    *(_DWORD *)(a1 + 852) = 0;
    v4[1] = xmmword_21950D410;
    v162[3] = 0;
    v162[8] = 25;
    v162[13] = 27;
    *(_DWORD *)(a1 + 856) = 2;
    v4[2] = xmmword_21950D420;
    v4[4] = xmmword_21950D430;
    v162[4] = 0;
    v162[9] = 12;
    v162[14] = 13;
    *(_DWORD *)(a1 + 860) = 2;
  }
}

void *sub_2194E0A5C(void *a1)
{
  int32x4_t v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  long long v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  long long v5 = (void *)a1[9];
  if (v5)
  {
    a1[10] = v5;
    operator delete(v5);
  }
  return a1;
}

void *sub_2194E0AC0(void *a1)
{
  int32x4_t v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[25];
  if (v3)
  {
    a1[26] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_2194E0B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, int8x16_t a13)
{
  sub_2194DA300(**(unint64_t ***)(a1 + 304), a2, a6, a7, a8, a9, a10, a11, a12, a13);
  sub_2194F1004(*(unsigned __int16 **)(*(void *)(a1 + 304) + 8), *(void **)(**(void **)(a1 + 304) + 56), a4);
  uint64_t v17 = *(unsigned int **)(a1 + 656);
  if (!v17)
  {
    uint32x4_t v18 = (uint64_t **)(a1 + 656);
    uint64_t v19 = (char *)(a1 + 656);
    goto LABEL_13;
  }
  do
  {
    while (1)
    {
      uint64_t v19 = (char *)v17;
      unsigned int v20 = v17[8];
      if (v20 > a3) {
        goto LABEL_3;
      }
      if (v20 != a3) {
        break;
      }
      unsigned int v21 = *((_DWORD *)v19 + 9);
      if (v21 <= HIDWORD(a3))
      {
        if (v21 >= HIDWORD(a3)) {
          goto LABEL_16;
        }
        goto LABEL_10;
      }
LABEL_3:
      uint64_t v17 = *(unsigned int **)v19;
      uint32x4_t v18 = (uint64_t **)v19;
      if (!*(void *)v19) {
        goto LABEL_13;
      }
    }
    if (v20 >= a3) {
      goto LABEL_16;
    }
LABEL_10:
    uint64_t v17 = (unsigned int *)*((void *)v19 + 1);
  }
  while (v17);
  uint32x4_t v18 = (uint64_t **)(v19 + 8);
LABEL_13:
  uint64_t v22 = v19;
  uint64_t v19 = (char *)operator new(0xE8uLL);
  *((void *)v19 + 4) = a3;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_OWORD *)(v19 + 104) = 0u;
  *(_OWORD *)(v19 + 120) = 0u;
  *(_OWORD *)(v19 + 136) = 0u;
  *(_OWORD *)(v19 + 152) = 0u;
  *(_OWORD *)(v19 + 168) = 0u;
  *(_OWORD *)(v19 + 184) = 0u;
  *(_OWORD *)(v19 + 200) = 0u;
  *(_OWORD *)(v19 + 216) = 0u;
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 2) = v22;
  *uint32x4_t v18 = (uint64_t *)v19;
  int v23 = (uint64_t *)v19;
  uint64_t v24 = **(void **)(a1 + 648);
  if (v24)
  {
    *(void *)(a1 + 648) = v24;
    int v23 = *v18;
  }
  sub_21948D030(*(uint64_t **)(a1 + 656), v23);
  ++*(void *)(a1 + 664);
LABEL_16:
  unint64_t v25 = (const void **)(v19 + 40);
  (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, const void **, uint64_t))(**(void **)(*(void *)(a1 + 304) + 16)
                                                                                            + 16))(*(void *)(*(void *)(a1 + 304) + 16), *(void *)(*(void *)(*(void *)(a1 + 304) + 8) + 248), *(void *)(*(void *)(*(void *)(a1 + 304) + 8) + 256) + 200, a1 + 392, a1 + 328, v25, a4);
  uint64_t result = (*(uint64_t (**)(void, uint64_t, void, uint64_t, uint64_t))(**(void **)(*(void *)(a1 + 304)
                                                                                              + 24)
                                                                                + 16))(*(void *)(*(void *)(a1 + 304) + 24), *(void *)(*(void *)(*(void *)(a1 + 304) + 16) + 8) + 200, *(void *)(**(void **)(a1 + 304) + 48), a5, a4);
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(_DWORD *)a1 | 2) == 2)
    {
      uint64_t v27 = (char *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v27 = *(char **)v27;
      }
      uint64_t result = sub_2194D0F9C(**(void **)(a1 + 304), *(void *)(*(void *)(a1 + 304) + 8), *(void *)(*(void *)(a1 + 304) + 16), *(void *)(*(void *)(a1 + 304) + 24), v25, v27);
      if ((result & 1) == 0) {
        sub_219509D08();
      }
    }
    else
    {
      unsigned int v28 = (char *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        unsigned int v28 = *(char **)v28;
      }
      uint64_t result = sub_2194D5634(**(void **)(a1 + 304), *(void *)(*(void *)(a1 + 304) + 8), *(void *)(*(void *)(a1 + 304) + 16), *(void *)(*(void *)(a1 + 304) + 24), v25, v28);
      if ((result & 1) == 0) {
        sub_219509CD0();
      }
    }
  }
  return result;
}

void sub_2194E0D4C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, int8x16_t a12)
{
  unint64_t v16 = HIDWORD(a3);
  *(void *)(a4 + 88) = *(void *)(a4 + 80);
  *(void *)(a4 + 136) = *(void *)(a4 + 128);
  *(void *)(a4 + 112) = *(void *)(a4 + 104);
  *(void *)(a4 + 40) = *(void *)(a4 + 32);
  *(void *)(a4 + 64) = *(void *)(a4 + 56);
  uint64_t v17 = (unsigned int **)(a1 + 656);
  uint32x4_t v18 = *(unsigned int **)(a1 + 656);
  if (v18)
  {
    uint64_t v19 = *(uint64_t **)(a1 + 656);
    while (1)
    {
      unsigned int v21 = *((_DWORD *)v19 + 8);
      if (v21 <= a3)
      {
        if (v21 != a3)
        {
          BOOL v20 = v21 >= a3;
LABEL_3:
          if (v20) {
            goto LABEL_27;
          }
          ++v19;
          goto LABEL_5;
        }
        unsigned int v22 = *((_DWORD *)v19 + 9);
        BOOL v20 = v22 >= HIDWORD(a3);
        if (v22 <= HIDWORD(a3)) {
          goto LABEL_3;
        }
      }
LABEL_5:
      uint64_t v19 = (uint64_t *)*v19;
      if (!v19)
      {
        int v23 = (char **)(a1 + 456);
        while (1)
        {
          uint64_t v24 = (char *)v18;
          unsigned int v25 = v18[8];
          if (v25 > a3) {
            goto LABEL_12;
          }
          if (v25 != a3)
          {
            if (v25 >= a3) {
              goto LABEL_26;
            }
            goto LABEL_19;
          }
          unsigned int v26 = *((_DWORD *)v24 + 9);
          if (v26 > HIDWORD(a3))
          {
LABEL_12:
            uint32x4_t v18 = *(unsigned int **)v24;
            if (!*(void *)v24)
            {
              uint64_t v27 = (uint64_t **)v24;
              goto LABEL_23;
            }
          }
          else
          {
            if (v26 >= HIDWORD(a3)) {
              goto LABEL_26;
            }
LABEL_19:
            uint32x4_t v18 = (unsigned int *)*((void *)v24 + 1);
            if (!v18)
            {
              uint64_t v27 = (uint64_t **)(v24 + 8);
              goto LABEL_23;
            }
          }
        }
      }
    }
  }
  int v23 = (char **)(a1 + 456);
  uint64_t v27 = (uint64_t **)(a1 + 656);
  uint64_t v24 = (char *)(a1 + 656);
LABEL_23:
  unsigned int v28 = v24;
  uint64_t v24 = (char *)operator new(0xE8uLL);
  *((void *)v24 + 4) = a3;
  *(_OWORD *)(v24 + 40) = 0u;
  *(_OWORD *)(v24 + 56) = 0u;
  *(_OWORD *)(v24 + 72) = 0u;
  *(_OWORD *)(v24 + 88) = 0u;
  *(_OWORD *)(v24 + 104) = 0u;
  *(_OWORD *)(v24 + 120) = 0u;
  *(_OWORD *)(v24 + 136) = 0u;
  *(_OWORD *)(v24 + 152) = 0u;
  *(_OWORD *)(v24 + 168) = 0u;
  *(_OWORD *)(v24 + 184) = 0u;
  *(_OWORD *)(v24 + 200) = 0u;
  *(_OWORD *)(v24 + 216) = 0u;
  *(void *)uint64_t v24 = 0;
  *((void *)v24 + 1) = 0;
  *((void *)v24 + 2) = v28;
  *uint64_t v27 = (uint64_t *)v24;
  int v29 = (uint64_t *)v24;
  uint64_t v30 = **(void **)(a1 + 648);
  if (v30)
  {
    *(void *)(a1 + 648) = v30;
    int v29 = *v27;
  }
  sub_21948D030(*(uint64_t **)(a1 + 656), v29);
  ++*(void *)(a1 + 664);
LABEL_26:
  sub_2194E12C4((char **)v24 + 5, v23);
LABEL_27:
  if (*(void *)(a1 + 672) != 1)
  {
    uint64_t v44 = &unk_26CAD65E0;
    char v45 = 0;
    char v51 = 0;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    memset(v50, 0, 25);
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    std::string __p = 0;
    sub_2194E1398(&v44, *(void *)(a1 + 680), *(void *)(a1 + 680), *(void *)(a1 + 16), 1);
  }
  sub_2194E0B08(a1, a2, a3, 0, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  if (!*(unsigned char *)(a1 + 80)) {
    goto LABEL_46;
  }
  signed int v31 = *v17;
  int v32 = (char *)v17;
  if (!*v17) {
    goto LABEL_42;
  }
  do
  {
    while (1)
    {
      int v32 = (char *)v31;
      unsigned int v33 = v31[8];
      if (v33 > a3) {
        goto LABEL_33;
      }
      if (v33 != a3) {
        break;
      }
      unsigned int v34 = *((_DWORD *)v32 + 9);
      if (v34 <= v16)
      {
        if (v34 >= v16) {
          goto LABEL_45;
        }
        goto LABEL_40;
      }
LABEL_33:
      signed int v31 = *(unsigned int **)v32;
      uint64_t v17 = (unsigned int **)v32;
      if (!*(void *)v32) {
        goto LABEL_42;
      }
    }
    if (v33 >= a3) {
      goto LABEL_45;
    }
LABEL_40:
    signed int v31 = (unsigned int *)*((void *)v32 + 1);
  }
  while (v31);
  uint64_t v17 = (unsigned int **)(v32 + 8);
LABEL_42:
  int v35 = v32;
  int v32 = (char *)operator new(0xE8uLL);
  *((void *)v32 + 4) = a3;
  *(_OWORD *)(v32 + 40) = 0u;
  *(_OWORD *)(v32 + 56) = 0u;
  *(_OWORD *)(v32 + 72) = 0u;
  *(_OWORD *)(v32 + 88) = 0u;
  *(_OWORD *)(v32 + 104) = 0u;
  *(_OWORD *)(v32 + 120) = 0u;
  *(_OWORD *)(v32 + 136) = 0u;
  *(_OWORD *)(v32 + 152) = 0u;
  *(_OWORD *)(v32 + 168) = 0u;
  *(_OWORD *)(v32 + 184) = 0u;
  *(_OWORD *)(v32 + 200) = 0u;
  *(_OWORD *)(v32 + 216) = 0u;
  *(void *)int v32 = 0;
  *((void *)v32 + 1) = 0;
  *((void *)v32 + 2) = v35;
  *uint64_t v17 = (unsigned int *)v32;
  uint64_t v36 = (uint64_t *)v32;
  uint64_t v37 = **(void **)(a1 + 648);
  if (v37)
  {
    *(void *)(a1 + 648) = v37;
    uint64_t v36 = (uint64_t *)*v17;
  }
  sub_21948D030(*(uint64_t **)(a1 + 656), v36);
  ++*(void *)(a1 + 664);
LABEL_45:
  sub_2194E2040(a1 + 328, (uint64_t)(v32 + 40), 2 * *(void *)(a1 + 320), *(_DWORD *)(a1 + 60), a1 + 392, *(float *)(a1 + 84));
LABEL_46:
  if (*(unsigned char *)(a1 + 224))
  {
    (*(void (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 304) + 24) + 24))(*(void *)(*(void *)(a1 + 304) + 24), a4);
    if (*(unsigned char *)(a1 + 225))
    {
      unint64_t v38 = *(void *)(a4 + 208);
      if (v38 == *(void *)(a4 + 200))
      {
        int64x2_t v41 = vdupq_n_s64(v38);
      }
      else
      {
        uint64_t v39 = *(void *)(*(void *)(a1 + 304) + 32);
        *(_DWORD *)(v39 + 544) = *(_DWORD *)a4;
        sub_2194E322C(v39, a4 + 200, (uint64_t *)(a4 + 176));
        uint64_t v40 = *(void *)(*(void *)(a1 + 304) + 32);
        if (a4 + 224 != v40 + 520)
        {
          sub_2194E1644((void *)(a4 + 224), *(char **)(v40 + 520), *(char **)(v40 + 528), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(v40 + 528) - *(void *)(v40 + 520)) >> 2));
          uint64_t v40 = *(void *)(*(void *)(a1 + 304) + 32);
        }
        *(_DWORD *)a4 = *(_DWORD *)(v40 + 544);
        int64x2_t v41 = *(int64x2_t *)(a4 + 200);
      }
      long long v42 = *(_OWORD *)(a4 + 176);
      *(int64x2_t *)(a4 + 176) = v41;
      *(_OWORD *)(a4 + 200) = v42;
      uint64_t v43 = *(void *)(a4 + 192);
      *(void *)(a4 + 192) = *(void *)(a4 + 216);
      *(void *)(a4 + 216) = v43;
    }
  }
}

void sub_2194E129C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2194E12B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **sub_2194E12C4(char **a1, char **a2)
{
  if (a1 != a2)
  {
    sub_2194E1BB8(a1, *a2, a2[1], (a2[1] - *a2) >> 2);
    sub_2194E1BB8(a1 + 3, a2[3], a2[4], (a2[4] - a2[3]) >> 2);
    sub_2194E1BB8(a1 + 6, a2[6], a2[7], (a2[7] - a2[6]) >> 2);
    sub_2194E1BB8(a1 + 9, a2[9], a2[10], (a2[10] - a2[9]) >> 2);
    sub_2194E1BB8(a1 + 12, a2[12], a2[13], (a2[13] - a2[12]) >> 2);
    sub_2194E1BB8(a1 + 15, a2[15], a2[16], (a2[16] - a2[15]) >> 2);
    sub_2194E1BB8(a1 + 18, a2[18], a2[19], (a2[19] - a2[18]) >> 2);
    sub_2194E1BB8(a1 + 21, a2[21], a2[22], (a2[22] - a2[21]) >> 2);
  }
  return a1;
}

void sub_2194E1398(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1[4] = a2;
  a1[5] = a3;
  a1[6] = a4;
  a1[2] = a5;
  operator new[]();
}

void sub_2194E14D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21947E0B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2194E14E8(void *a1)
{
  __cxa_begin_catch(a1);
  MEMORY[0x21D48B570](v1, 0x1000C8077774924);
  __cxa_rethrow();
}

void sub_2194E150C(_Unwind_Exception *a1)
{
}

uint64_t sub_2194E1520(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 32);
    *(void *)(v1 + 32) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *(void *)(v1 + 24);
    *(void *)(v1 + 24) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *(void *)(v1 + 16);
    *(void *)(v1 + 16) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    long long v5 = *(void **)(v1 + 8);
    *(void *)(v1 + 8) = 0;
    if (v5)
    {
      unint64_t v6 = sub_2194E1AB4(v5);
      MEMORY[0x21D48B5B0](v6, 0x1020C40EB8A5903);
    }
    long long v7 = *(void **)v1;
    *(void *)uint64_t v1 = 0;
    if (v7)
    {
      unint64_t v8 = sub_2194E17E0(v7);
      MEMORY[0x21D48B5B0](v8, 0x10B0C40401BBC4ELL);
    }
    JUMPOUT(0x21D48B5B0);
  }
  return result;
}

void *sub_2194E1644(void *result, char *__src, char *a3, unint64_t a4)
{
  unint64_t v6 = __src;
  long long v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - *result) >> 2) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x4EC4EC4EC4EC4ECLL) {
      goto LABEL_23;
    }
    unint64_t v10 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0x276276276276276 ? 0x4EC4EC4EC4EC4ECLL : v11;
    if (v12 > 0x4EC4EC4EC4EC4ECLL) {
LABEL_23:
    }
      sub_219486AE4();
    uint64_t v13 = 52 * v12;
    uint64_t result = operator new(52 * v12);
    uint64_t v9 = (char *)result;
    *long long v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  uint64_t v15 = (void **)(result + 1);
  unint64_t v16 = (unsigned char *)result[1];
  if (0x4EC4EC4EC4EC4EC5 * ((v16 - v9) >> 2) >= a4)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    uint32x4_t v18 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  uint64_t v17 = &__src[4 * ((v16 - v9) >> 2)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    uint32x4_t v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *uint64_t v15 = &v9[v14];
  return result;
}

void *sub_2194E17E0(void *a1)
{
  a1[9] = &unk_26CAD69C8;
  uint64_t v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[21];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)a1[19];
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)a1[19];
    if (!v4) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_9:
  long long v5 = (void *)a1[8];
  a1[8] = 0;
  if (v5)
  {
    unint64_t v6 = (void *)v5[9];
    if (v6)
    {
      v5[10] = v6;
      operator delete(v6);
    }
    long long v7 = (void (***)(void))v5[6];
    if (v7)
    {
      uint64_t v8 = (void (***)(void))v5[7];
      uint64_t v9 = (void *)v5[6];
      if (v8 != v7)
      {
        unint64_t v10 = v8 - 18;
        uint64_t v11 = v8 - 18;
        unint64_t v12 = v8 - 18;
        do
        {
          uint64_t v13 = *v12;
          v12 -= 18;
          (*v13)(v11);
          v10 -= 18;
          BOOL v14 = v11 == v7;
          uint64_t v11 = v12;
        }
        while (!v14);
        uint64_t v9 = (void *)v5[6];
      }
      v5[7] = v7;
      operator delete(v9);
    }
    MEMORY[0x21D48B5B0](v5, 0x1020C4024B85F43);
  }
  uint64_t v15 = (void *)a1[7];
  a1[7] = 0;
  if (v15)
  {
    unint64_t v16 = (void *)v15[9];
    if (v16)
    {
      v15[10] = v16;
      operator delete(v16);
    }
    uint64_t v17 = (void (***)(void))v15[6];
    if (v17)
    {
      uint32x4_t v18 = (void (***)(void))v15[7];
      uint64_t v19 = (void *)v15[6];
      if (v18 != v17)
      {
        BOOL v20 = v18 - 18;
        unsigned int v21 = v18 - 18;
        unsigned int v22 = v18 - 18;
        do
        {
          int v23 = *v22;
          v22 -= 18;
          (*v23)(v21);
          v20 -= 18;
          BOOL v14 = v21 == v17;
          unsigned int v21 = v22;
        }
        while (!v14);
        uint64_t v19 = (void *)v15[6];
      }
      v15[7] = v17;
      operator delete(v19);
    }
    MEMORY[0x21D48B5B0](v15, 0x1020C4024B85F43);
  }
  uint64_t v24 = (void *)a1[6];
  a1[6] = 0;
  if (v24)
  {
    unsigned int v25 = (void *)v24[9];
    if (v25)
    {
      v24[10] = v25;
      operator delete(v25);
    }
    unsigned int v26 = (void (***)(void))v24[6];
    if (v26)
    {
      uint64_t v27 = (void (***)(void))v24[7];
      unsigned int v28 = (void *)v24[6];
      if (v27 != v26)
      {
        int v29 = v27 - 18;
        uint64_t v30 = v27 - 18;
        signed int v31 = v27 - 18;
        do
        {
          int v32 = *v31;
          v31 -= 18;
          (*v32)(v30);
          v29 -= 18;
          BOOL v14 = v30 == v26;
          uint64_t v30 = v31;
        }
        while (!v14);
        unsigned int v28 = (void *)v24[6];
      }
      v24[7] = v26;
      operator delete(v28);
    }
    MEMORY[0x21D48B5B0](v24, 0x1020C4024B85F43);
  }
  return a1;
}