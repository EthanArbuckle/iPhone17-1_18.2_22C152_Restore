void one-time initialization function for allCases()
{
  static NCProtoConversationAVMode.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoConversationState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoConversationLetMeInRequestState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoContactHandleAnonym.AnonymType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoContinuityCall.Status.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoSuggestionAdvertisement.SuggestionType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoAddMemberRequest.NearbyConversationPullContext.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoPullLagunaSessionToTVRequest.Reason.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoStartLagunaSessionRequest.RecentCallFetchType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoGetDestinationCapabilitiesRequest.DestinationType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoDeviceTokenRequest.ConversationHandoffType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoDisconnectRequest.DisconnectReason.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t static NCProtoConversationAVMode.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoConversationAVMode.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoConversationAVMode(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

uint64_t static NCProtoConversationState.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationState@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoConversationState.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoConversationState(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type NCProtoConversationState and conformance NCProtoConversationState();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t static NCProtoConversationLetMeInRequestState.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationLetMeInRequestState@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoConversationLetMeInRequestState.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoConversationLetMeInRequestState(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type NCProtoConversationLetMeInRequestState and conformance NCProtoConversationLetMeInRequestState();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t NCProtoContactInfo.namePrefix.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NCProtoContactInfo.namePrefix.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*NCProtoContactInfo.namePrefix.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactInfo.givenName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NCProtoContactInfo.givenName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*NCProtoContactInfo.givenName.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactInfo.middleName.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NCProtoContactInfo.middleName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*NCProtoContactInfo.middleName.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactInfo.familyName.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NCProtoContactInfo.familyName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*NCProtoContactInfo.familyName.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactInfo.nameSuffix.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NCProtoContactInfo.nameSuffix.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

uint64_t (*NCProtoContactInfo.nameSuffix.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactInfo.nickname.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NCProtoContactInfo.nickname.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return result;
}

uint64_t (*NCProtoContactInfo.nickname.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactInfo.imageData.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 104));
  return v1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t (*NCProtoContactInfo.imageData.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactInfo.organizationName.getter()
{
  return NCProtoContactInfo.organizationName.getter(type metadata accessor for NCProtoContactInfo);
}

uint64_t type metadata accessor for NCProtoContactInfo(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoContactInfo);
}

uint64_t key path getter for NCProtoContactInfo.organizationName : NCProtoContactInfo@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for NCProtoContactInfo.organizationName : NCProtoContactInfo(a1, type metadata accessor for NCProtoContactInfo, a2);
}

uint64_t key path setter for NCProtoContactInfo.organizationName : NCProtoContactInfo(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContactInfo.organizationName : NCProtoContactInfo(a1, a2, a3, a4, type metadata accessor for NCProtoContactInfo);
}

uint64_t NCProtoContactInfo.organizationName.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoContactInfo.organizationName.setter(a1, a2, type metadata accessor for NCProtoContactInfo);
}

uint64_t (*NCProtoContactInfo.organizationName.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoContactInfo(0) + 48);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoContactInfo.hasOrganizationName.getter()
{
  return NCProtoContactInfo.hasOrganizationName.getter(type metadata accessor for NCProtoContactInfo);
}

Swift::Void __swiftcall NCProtoContactInfo.clearOrganizationName()()
{
}

uint64_t NCProtoContactInfo.identifier.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NCProtoContactInfo(0) + 52));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for NCProtoContactInfo.identifier : NCProtoContactInfo@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NCProtoContactInfo(0) + 52));
  unint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v5 = *v3;
    unint64_t v6 = v4;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;

  return swift_bridgeObjectRetain();
}

uint64_t key path setter for NCProtoContactInfo.identifier : NCProtoContactInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = (void *)(a2 + *(int *)(type metadata accessor for NCProtoContactInfo(0) + 52));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t NCProtoContactInfo.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for NCProtoContactInfo(0) + 52));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*NCProtoContactInfo.identifier.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoContactInfo(0) + 52);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoContactInfo.hasIdentifier.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NCProtoContactInfo(0) + 52) + 8) != 0;
}

Swift::Void __swiftcall NCProtoContactInfo.clearIdentifier()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for NCProtoContactInfo(0) + 52));
  swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t NCProtoContactInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NCProtoContactInfo(0) + 44);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t NCProtoContactInfo.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NCProtoContactInfo(0) + 44);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*NCProtoContactInfo.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactInfo.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0xE000000000000000;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0xE000000000000000;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0xE000000000000000;
  *(_OWORD *)(a1 + 96) = xmmword_25743E3B0;
  uint64_t v2 = type metadata accessor for NCProtoContactInfo(0);
  uint64_t result = UnknownStorage.init()();
  uint64_t v4 = (void *)(a1 + *(int *)(v2 + 48));
  *uint64_t v4 = 0;
  v4[1] = 0;
  unint64_t v5 = (void *)(a1 + *(int *)(v2 + 52));
  *unint64_t v5 = 0;
  v5[1] = 0;
  return result;
}

uint64_t (*NCProtoContactHandleAnonym.identifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

void NCProtoContactHandleAnonym.type.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 24);
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t NCProtoContactHandleAnonym.type.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 16) = *(void *)result;
  *(unsigned char *)(v1 + 24) = v2;
  return result;
}

uint64_t (*NCProtoContactHandleAnonym.type.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoContactHandleAnonym.localizedLabel.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoContactHandleAnonym.label.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactHandleAnonym.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContactHandleAnonym.unknownFields.getter(type metadata accessor for NCProtoContactHandleAnonym, a1);
}

uint64_t type metadata accessor for NCProtoContactHandleAnonym(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoContactHandleAnonym);
}

uint64_t NCProtoContactHandleAnonym.unknownFields.setter(uint64_t a1)
{
  return NCProtoContactHandleAnonym.unknownFields.setter(a1, type metadata accessor for NCProtoContactHandleAnonym);
}

uint64_t (*NCProtoContactHandleAnonym.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

unint64_t NCProtoContactHandleAnonym.AnonymType.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t static NCProtoContactHandleAnonym.AnonymType.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance NCProtoContactHandleAnonym.AnonymType@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoContactHandleAnonym.AnonymType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoContactHandleAnonym.AnonymType.allCases, a1);
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance NCProtoContactHandleAnonym.AnonymType@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 3uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoContactHandleAnonym.AnonymType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t NCProtoContactHandleAnonym.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0xE000000000000000;
  type metadata accessor for NCProtoContactHandleAnonym(0);
  return UnknownStorage.init()();
}

uint64_t NCProtoContinuityFavorite.contactInfo.getter@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  MEMORY[0x270FA5388]();
  unint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NCProtoContinuityFavorite(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 32), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoContactInfo?);
  uint64_t v6 = type metadata accessor for NCProtoContactInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, a1, type metadata accessor for NCProtoContactInfo);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0xE000000000000000;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0xE000000000000000;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0xE000000000000000;
  *(_OWORD *)(a1 + 96) = xmmword_25743E3B0;
  UnknownStorage.init()();
  unint64_t v7 = (void *)(a1 + *(int *)(v6 + 48));
  *unint64_t v7 = 0;
  v7[1] = 0;
  v8 = (void *)(a1 + *(int *)(v6 + 52));
  void *v8 = 0;
  v8[1] = 0;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoContactInfo?);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for NCProtoContinuityFavorite(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoContinuityFavorite);
}

uint64_t key path getter for NCProtoContinuityFavorite.contactInfo : NCProtoContinuityFavorite@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityFavorite.contactInfo.getter(a1);
}

uint64_t key path setter for NCProtoContinuityFavorite.contactInfo : NCProtoContinuityFavorite(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NCProtoContactInfo(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  unint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v7, type metadata accessor for NCProtoContactInfo);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for NCProtoContinuityFavorite(0) + 32);
  outlined destroy of NCProtoContactInfo?(v8, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, v8, type metadata accessor for NCProtoContactInfo);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t NCProtoContinuityFavorite.contactInfo.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NCProtoContinuityFavorite(0) + 32);
  outlined destroy of NCProtoContactInfo?(v3, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined init with take of NCProtoContactInfo(a1, v3, type metadata accessor for NCProtoContactInfo);
  uint64_t v4 = type metadata accessor for NCProtoContactInfo(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 0, 1, v4);
}

void (*NCProtoContinuityFavorite.contactInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for NCProtoContactInfo(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for NCProtoContinuityFavorite(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of NCProtoContactInfo?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoContactInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0xE000000000000000;
    v10[2] = 0;
    v10[3] = 0xE000000000000000;
    v10[4] = 0;
    v10[5] = 0xE000000000000000;
    v10[6] = 0;
    v10[7] = 0xE000000000000000;
    v10[8] = 0;
    v10[9] = 0xE000000000000000;
    v10[10] = 0;
    v10[11] = 0xE000000000000000;
    *((_OWORD *)v10 + 6) = xmmword_25743E3B0;
    UnknownStorage.init()();
    v12 = (void *)((char *)v10 + *(int *)(v6 + 48));
    void *v12 = 0;
    v12[1] = 0;
    v13 = (void *)((char *)v10 + *(int *)(v6 + 52));
    void *v13 = 0;
    v13[1] = 0;
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoContactInfo?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for NCProtoContactInfo);
  }
  return NCProtoContinuityFavorite.contactInfo.modify;
}

void NCProtoContinuityFavorite.contactInfo.modify(uint64_t a1, char a2)
{
}

BOOL NCProtoContinuityFavorite.hasContactInfo.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  MEMORY[0x270FA5388]();
  BOOL v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for NCProtoContinuityFavorite(0);
  outlined init with copy of NCProtoContactInfo?(v0 + *(int *)(v3 + 32), (uint64_t)v2, &demangling cache variable for type metadata for NCProtoContactInfo?);
  uint64_t v4 = type metadata accessor for NCProtoContactInfo(0);
  BOOL v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v2, 1, v4) != 1;
  outlined destroy of NCProtoContactInfo?((uint64_t)v2, &demangling cache variable for type metadata for NCProtoContactInfo?);
  return v5;
}

Swift::Void __swiftcall NCProtoContinuityFavorite.clearContactInfo()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NCProtoContinuityFavorite(0) + 32);
  outlined destroy of NCProtoContactInfo?(v1, &demangling cache variable for type metadata for NCProtoContactInfo?);
  uint64_t v2 = type metadata accessor for NCProtoContactInfo(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  v3(v1, 1, 1, v2);
}

uint64_t (*NCProtoContinuityFavorite.contactIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContinuityFavorite.anonym.getter@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  MEMORY[0x270FA5388]();
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NCProtoContinuityFavorite(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 36), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  uint64_t v6 = type metadata accessor for NCProtoContactHandleAnonym(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, a1, type metadata accessor for NCProtoContactHandleAnonym);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0xE000000000000000;
  UnknownStorage.init()();
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
}

uint64_t outlined init with take of NCProtoContactInfo(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t key path getter for NCProtoContinuityFavorite.anonym : NCProtoContinuityFavorite@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  MEMORY[0x270FA5388]();
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NCProtoContinuityFavorite(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  uint64_t v7 = type metadata accessor for NCProtoContactHandleAnonym(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v5, a2, type metadata accessor for NCProtoContactHandleAnonym);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0xE000000000000000;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0xE000000000000000;
  UnknownStorage.init()();
  return outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
}

uint64_t key path setter for NCProtoContinuityFavorite.anonym : NCProtoContinuityFavorite(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NCProtoContactHandleAnonym(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v7, type metadata accessor for NCProtoContactHandleAnonym);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for NCProtoContinuityFavorite(0) + 36);
  outlined destroy of NCProtoContactInfo?(v8, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, v8, type metadata accessor for NCProtoContactHandleAnonym);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t NCProtoContinuityFavorite.anonym.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NCProtoContinuityFavorite(0) + 36);
  outlined destroy of NCProtoContactInfo?(v3, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  outlined init with take of NCProtoContactInfo(a1, v3, type metadata accessor for NCProtoContactHandleAnonym);
  uint64_t v4 = type metadata accessor for NCProtoContactHandleAnonym(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 0, 1, v4);
}

void (*NCProtoContinuityFavorite.anonym.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for NCProtoContactHandleAnonym(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for NCProtoContinuityFavorite(0) + 36);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of NCProtoContactInfo?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0xE000000000000000;
    v10[2] = 0;
    *((unsigned char *)v10 + 24) = 1;
    v10[4] = 0;
    v10[5] = 0xE000000000000000;
    v10[6] = 0;
    v10[7] = 0xE000000000000000;
    UnknownStorage.init()();
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for NCProtoContactHandleAnonym);
  }
  return NCProtoContinuityFavorite.anonym.modify;
}

void NCProtoContinuityFavorite.anonym.modify(uint64_t a1, char a2)
{
}

uint64_t outlined init with copy of NCProtoContactInfo(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of NCProtoContactInfo(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL NCProtoContinuityFavorite.hasAnonym.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  MEMORY[0x270FA5388]();
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for NCProtoContinuityFavorite(0);
  outlined init with copy of NCProtoContactInfo?(v0 + *(int *)(v3 + 36), (uint64_t)v2, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  uint64_t v4 = type metadata accessor for NCProtoContactHandleAnonym(0);
  BOOL v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v2, 1, v4) != 1;
  outlined destroy of NCProtoContactInfo?((uint64_t)v2, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  return v5;
}

Swift::Void __swiftcall NCProtoContinuityFavorite.clearAnonym()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NCProtoContinuityFavorite(0) + 36);
  outlined destroy of NCProtoContactInfo?(v1, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  uint64_t v2 = type metadata accessor for NCProtoContactHandleAnonym(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  v3(v1, 1, 1, v2);
}

uint64_t (*NCProtoContinuityFavorite.actionType.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoContinuityFavorite.bundleIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContinuityFavorite.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityFavorite.unknownFields.getter(type metadata accessor for NCProtoContinuityFavorite, a1);
}

uint64_t NCProtoContinuityFavorite.unknownFields.setter(uint64_t a1)
{
  return NCProtoContinuityFavorite.unknownFields.setter(a1, type metadata accessor for NCProtoContinuityFavorite);
}

uint64_t (*NCProtoContinuityFavorite.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContinuityFavorite.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  uint64_t v2 = type metadata accessor for NCProtoContinuityFavorite(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 32);
  uint64_t v4 = type metadata accessor for NCProtoContactInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  BOOL v5 = (char *)a1 + *(int *)(v2 + 36);
  uint64_t v6 = type metadata accessor for NCProtoContactHandleAnonym(0);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, 1, 1, v6);
}

uint64_t NCProtoAddressableContact.contactInfo.getter@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  MEMORY[0x270FA5388]();
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NCProtoAddressableContact(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 28), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoContactInfo?);
  uint64_t v6 = type metadata accessor for NCProtoContactInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, a1, type metadata accessor for NCProtoContactInfo);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0xE000000000000000;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0xE000000000000000;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0xE000000000000000;
  *(_OWORD *)(a1 + 96) = xmmword_25743E3B0;
  UnknownStorage.init()();
  uint64_t v7 = (void *)(a1 + *(int *)(v6 + 48));
  *uint64_t v7 = 0;
  v7[1] = 0;
  uint64_t v8 = (void *)(a1 + *(int *)(v6 + 52));
  void *v8 = 0;
  v8[1] = 0;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoContactInfo?);
}

uint64_t type metadata accessor for NCProtoAddressableContact(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoAddressableContact);
}

uint64_t key path getter for NCProtoAddressableContact.contactInfo : NCProtoAddressableContact@<X0>(uint64_t a1@<X8>)
{
  return NCProtoAddressableContact.contactInfo.getter(a1);
}

uint64_t key path setter for NCProtoAddressableContact.contactInfo : NCProtoAddressableContact(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NCProtoContactInfo(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v7, type metadata accessor for NCProtoContactInfo);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for NCProtoAddressableContact(0) + 28);
  outlined destroy of NCProtoContactInfo?(v8, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, v8, type metadata accessor for NCProtoContactInfo);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t NCProtoAddressableContact.contactInfo.setter(uint64_t a1)
{
  return NCProtoAddressableContact.contactInfo.setter(a1, type metadata accessor for NCProtoAddressableContact, &demangling cache variable for type metadata for NCProtoContactInfo?, type metadata accessor for NCProtoContactInfo, type metadata accessor for NCProtoContactInfo);
}

void (*NCProtoAddressableContact.contactInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for NCProtoContactInfo(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for NCProtoAddressableContact(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of NCProtoContactInfo?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoContactInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0xE000000000000000;
    v10[2] = 0;
    v10[3] = 0xE000000000000000;
    v10[4] = 0;
    v10[5] = 0xE000000000000000;
    v10[6] = 0;
    v10[7] = 0xE000000000000000;
    v10[8] = 0;
    v10[9] = 0xE000000000000000;
    v10[10] = 0;
    v10[11] = 0xE000000000000000;
    *((_OWORD *)v10 + 6) = xmmword_25743E3B0;
    UnknownStorage.init()();
    v12 = (void *)((char *)v10 + *(int *)(v6 + 48));
    void *v12 = 0;
    v12[1] = 0;
    v13 = (void *)((char *)v10 + *(int *)(v6 + 52));
    void *v13 = 0;
    v13[1] = 0;
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoContactInfo?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for NCProtoContactInfo);
  }
  return NCProtoContinuityFavorite.contactInfo.modify;
}

BOOL NCProtoAddressableContact.hasContactInfo.getter()
{
  return NCProtoAddressableContact.hasContactInfo.getter(&demangling cache variable for type metadata for NCProtoContactInfo?, type metadata accessor for NCProtoAddressableContact, type metadata accessor for NCProtoContactInfo);
}

Swift::Void __swiftcall NCProtoAddressableContact.clearContactInfo()()
{
}

uint64_t (*NCProtoAddressableContact.handleAnonyms.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoAddressableContact.contactIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoAddressableContact.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoAddressableContact.unknownFields.getter(type metadata accessor for NCProtoAddressableContact, a1);
}

uint64_t NCProtoAddressableContact.unknownFields.setter(uint64_t a1)
{
  return NCProtoAddressableContact.unknownFields.setter(a1, type metadata accessor for NCProtoAddressableContact);
}

uint64_t (*NCProtoAddressableContact.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoAddressableContact.init()@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = 0;
  a1[2] = 0xE000000000000000;
  uint64_t v2 = type metadata accessor for NCProtoAddressableContact(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for NCProtoContactInfo(0);
  uint64_t v5 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 1, 1, v4);
}

uint64_t NCProtoActiveConversation.uuidString.getter()
{
  return NCProtoActiveConversation.uuidString.getter(type metadata accessor for NCProtoActiveConversation);
}

uint64_t type metadata accessor for NCProtoActiveConversation(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoActiveConversation);
}

uint64_t key path getter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(a1, type metadata accessor for NCProtoActiveConversation, a2);
}

uint64_t key path setter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(a1, a2, a3, a4, type metadata accessor for NCProtoActiveConversation);
}

uint64_t NCProtoActiveConversation.uuidString.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoActiveConversation.uuidString.setter(a1, a2, type metadata accessor for NCProtoActiveConversation);
}

uint64_t (*NCProtoActiveConversation.uuidString.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoActiveConversation.hasUuidString.getter()
{
  return NCProtoActiveConversation.hasUuidString.getter(type metadata accessor for NCProtoActiveConversation);
}

Swift::Void __swiftcall NCProtoActiveConversation.clearUuidString()()
{
}

uint64_t NCProtoActiveConversation.displayName.getter()
{
  return NCProtoActiveConversation.displayName.getter(type metadata accessor for NCProtoActiveConversation);
}

uint64_t key path getter for NCProtoActiveConversation.displayName : NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for NCProtoActiveConversation.displayName : NCProtoActiveConversation(a1, type metadata accessor for NCProtoActiveConversation, a2);
}

uint64_t key path setter for NCProtoActiveConversation.displayName : NCProtoActiveConversation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoActiveConversation.displayName : NCProtoActiveConversation(a1, a2, a3, a4, type metadata accessor for NCProtoActiveConversation);
}

uint64_t NCProtoActiveConversation.displayName.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoActiveConversation.displayName.setter(a1, a2, type metadata accessor for NCProtoActiveConversation);
}

uint64_t (*NCProtoActiveConversation.displayName.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoActiveConversation.hasDisplayName.getter()
{
  return NCProtoActiveConversation.hasDisplayName.getter(type metadata accessor for NCProtoActiveConversation);
}

Swift::Void __swiftcall NCProtoActiveConversation.clearDisplayName()()
{
}

uint64_t NCProtoActiveConversation.avMode.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.avMode.getter(type metadata accessor for NCProtoActiveConversation, a1);
}

uint64_t key path getter for NCProtoActiveConversation.avMode : NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for NCProtoActiveConversation.avMode : NCProtoActiveConversation(a1, type metadata accessor for NCProtoActiveConversation, a2);
}

uint64_t key path setter for NCProtoActiveConversation.avMode : NCProtoActiveConversation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoActiveConversation.avMode : NCProtoActiveConversation(a1, a2, a3, a4, type metadata accessor for NCProtoActiveConversation);
}

uint64_t NCProtoActiveConversation.avMode.setter(uint64_t *a1)
{
  return NCProtoActiveConversation.avMode.setter(a1, type metadata accessor for NCProtoActiveConversation);
}

uint64_t (*NCProtoActiveConversation.avMode.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 9))
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  else
  {
    char v7 = *((unsigned char *)v4 + 8);
    uint64_t v5 = *v4;
    char v6 = v7 & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

BOOL NCProtoActiveConversation.hasAvMode.getter()
{
  return NCProtoActiveConversation.hasAvMode.getter(type metadata accessor for NCProtoActiveConversation);
}

Swift::Void __swiftcall NCProtoActiveConversation.clearAvMode()()
{
}

uint64_t NCProtoActiveConversation.remoteMemberCount.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 36));
  if (v1[8]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t key path getter for NCProtoActiveConversation.remoteMemberCount : NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = type metadata accessor for NCProtoActiveConversation(0);
  uint64_t v5 = (uint64_t *)(a1 + *(int *)(result + 36));
  if (*((unsigned char *)v5 + 8)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v5;
  }
  *a2 = v6;
  return result;
}

uint64_t key path setter for NCProtoActiveConversation.remoteMemberCount : NCProtoActiveConversation(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t result = type metadata accessor for NCProtoActiveConversation(0);
  uint64_t v5 = a2 + *(int *)(result + 36);
  *(void *)uint64_t v5 = v3;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t NCProtoActiveConversation.remoteMemberCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoActiveConversation(0);
  uint64_t v4 = v1 + *(int *)(result + 36);
  *(void *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*NCProtoActiveConversation.remoteMemberCount.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return NCProtoActiveConversation.remoteMemberCount.modify;
}

BOOL NCProtoActiveConversation.hasRemoteMemberCount.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 36) + 8) & 1) == 0;
}

Swift::Void __swiftcall NCProtoActiveConversation.clearRemoteMemberCount()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 36);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

uint64_t (*NCProtoActiveConversation.remoteMemberContactIdentifiers.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoActiveConversation.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for NCProtoActiveConversation(0);
  uint64_t v4 = (uint64_t *)(v1 + *(int *)(result + 40));
  if (*((unsigned char *)v4 + 9))
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  else
  {
    char v7 = *((unsigned char *)v4 + 8);
    uint64_t v5 = *v4;
    char v6 = v7 & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return result;
}

uint64_t key path getter for NCProtoActiveConversation.state : NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = type metadata accessor for NCProtoActiveConversation(0);
  uint64_t v5 = (uint64_t *)(a1 + *(int *)(result + 40));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)v5 + 8);
  int v8 = *((unsigned __int8 *)v5 + 9);
  if (v8) {
    uint64_t v6 = 0;
  }
  *(void *)a2 = v6;
  *(unsigned char *)(a2 + 8) = (v8 | v7) & 1;
  return result;
}

uint64_t key path setter for NCProtoActiveConversation.state : NCProtoActiveConversation(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t result = type metadata accessor for NCProtoActiveConversation(0);
  uint64_t v6 = a2 + *(int *)(result + 40);
  *(void *)uint64_t v6 = v3;
  *(unsigned char *)(v6 + 8) = v4;
  *(unsigned char *)(v6 + 9) = 0;
  return result;
}

uint64_t NCProtoActiveConversation.state.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = type metadata accessor for NCProtoActiveConversation(0);
  uint64_t v5 = v1 + *(int *)(result + 40);
  *(void *)uint64_t v5 = v2;
  *(unsigned char *)(v5 + 8) = v3;
  *(unsigned char *)(v5 + 9) = 0;
  return result;
}

uint64_t (*NCProtoActiveConversation.state.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  char v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 9))
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  else
  {
    char v7 = *((unsigned char *)v4 + 8);
    uint64_t v5 = *v4;
    char v6 = v7 & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

BOOL NCProtoActiveConversation.hasState.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 40) + 9) & 1) == 0;
}

Swift::Void __swiftcall NCProtoActiveConversation.clearState()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 40);
  *(void *)uint64_t v1 = 0;
  *(_WORD *)(v1 + 8) = 256;
}

uint64_t NCProtoActiveConversation.letMeInRequestState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for NCProtoActiveConversation(0);
  char v4 = (uint64_t *)(v1 + *(int *)(result + 44));
  if (*((unsigned char *)v4 + 9))
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  else
  {
    char v7 = *((unsigned char *)v4 + 8);
    uint64_t v5 = *v4;
    char v6 = v7 & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return result;
}

uint64_t key path getter for NCProtoActiveConversation.letMeInRequestState : NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = type metadata accessor for NCProtoActiveConversation(0);
  uint64_t v5 = (uint64_t *)(a1 + *(int *)(result + 44));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)v5 + 8);
  int v8 = *((unsigned __int8 *)v5 + 9);
  if (v8) {
    uint64_t v6 = 0;
  }
  *(void *)a2 = v6;
  *(unsigned char *)(a2 + 8) = (v8 | v7) & 1;
  return result;
}

uint64_t key path setter for NCProtoActiveConversation.letMeInRequestState : NCProtoActiveConversation(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t result = type metadata accessor for NCProtoActiveConversation(0);
  uint64_t v6 = a2 + *(int *)(result + 44);
  *(void *)uint64_t v6 = v3;
  *(unsigned char *)(v6 + 8) = v4;
  *(unsigned char *)(v6 + 9) = 0;
  return result;
}

uint64_t NCProtoActiveConversation.letMeInRequestState.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = type metadata accessor for NCProtoActiveConversation(0);
  uint64_t v5 = v1 + *(int *)(result + 44);
  *(void *)uint64_t v5 = v2;
  *(unsigned char *)(v5 + 8) = v3;
  *(unsigned char *)(v5 + 9) = 0;
  return result;
}

uint64_t (*NCProtoActiveConversation.letMeInRequestState.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 44);
  *(_DWORD *)(a1 + 12) = v3;
  char v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 9))
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  else
  {
    char v7 = *((unsigned char *)v4 + 8);
    uint64_t v5 = *v4;
    char v6 = v7 & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

BOOL NCProtoActiveConversation.hasLetMeInRequestState.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 44) + 9) & 1) == 0;
}

Swift::Void __swiftcall NCProtoActiveConversation.clearLetMeInRequestState()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 44);
  *(void *)uint64_t v1 = 0;
  *(_WORD *)(v1 + 8) = 256;
}

uint64_t NCProtoActiveConversation.handlesHash.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 48));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *v1;
  }
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t key path getter for NCProtoActiveConversation.handlesHash : NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 48));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  if (v5 >> 60 == 15) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v3;
  }
  unint64_t v7 = 0xC000000000000000;
  if (v5 >> 60 != 15) {
    unint64_t v7 = v5;
  }
  *a2 = v6;
  a2[1] = v7;

  return outlined copy of Data?(v4, v5);
}

uint64_t key path setter for NCProtoActiveConversation.handlesHash : NCProtoActiveConversation(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 48));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  uint64_t result = outlined consume of Data?(v5, v6);
  *uint64_t v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t NCProtoActiveConversation.handlesHash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 48);
  uint64_t result = outlined consume of Data?(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t (*NCProtoActiveConversation.handlesHash.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 48);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NCProtoActiveConversation.handlesHash.modify;
}

BOOL NCProtoActiveConversation.hasHandlesHash.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 48) + 8) >> 60 != 15;
}

Swift::Void __swiftcall NCProtoActiveConversation.clearHandlesHash()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NCProtoActiveConversation(0) + 48);
  outlined consume of Data?(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_25743E3C0;
}

uint64_t NCProtoActiveConversation.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoActiveConversation, a1);
}

uint64_t NCProtoActiveConversation.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoActiveConversation);
}

uint64_t (*NCProtoActiveConversation.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

double NCProtoActiveConversation.init()@<D0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  active = (int *)type metadata accessor for NCProtoActiveConversation(0);
  UnknownStorage.init()();
  uint64_t v3 = (void *)((char *)a1 + active[6]);
  *uint64_t v3 = 0;
  v3[1] = 0;
  uint64_t v4 = (void *)((char *)a1 + active[7]);
  *uint64_t v4 = 0;
  v4[1] = 0;
  uint64_t v5 = (char *)a1 + active[8];
  *(void *)uint64_t v5 = 0;
  *((_WORD *)v5 + 4) = 256;
  unint64_t v6 = (char *)a1 + active[9];
  *(void *)unint64_t v6 = 0;
  v6[8] = 1;
  uint64_t v7 = (char *)a1 + active[10];
  *(void *)uint64_t v7 = 0;
  *((_WORD *)v7 + 4) = 256;
  unint64_t v8 = (char *)a1 + active[11];
  *(void *)unint64_t v8 = 0;
  *((_WORD *)v8 + 4) = 256;
  double result = 0.0;
  *(_OWORD *)((char *)a1 + active[12]) = xmmword_25743E3C0;
  return result;
}

uint64_t NCProtoContinuityCall.uuidString.getter()
{
  return NCProtoContinuityCall.uuidString.getter(type metadata accessor for NCProtoContinuityCall);
}

uint64_t type metadata accessor for NCProtoContinuityCall(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoContinuityCall);
}

uint64_t key path getter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, type metadata accessor for NCProtoContinuityCall, a2);
}

uint64_t key path setter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoContinuityCall);
}

uint64_t NCProtoContinuityCall.uuidString.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoContinuityCall.uuidString.setter(a1, a2, type metadata accessor for NCProtoContinuityCall);
}

uint64_t (*NCProtoContinuityCall.uuidString.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoContinuityCall.hasUuidString.getter()
{
  return NCProtoContinuityCall.hasUuidString.getter(type metadata accessor for NCProtoContinuityCall);
}

Swift::Void __swiftcall NCProtoContinuityCall.clearUuidString()()
{
}

uint64_t NCProtoContinuityCall.displayName.getter()
{
  return NCProtoActiveConversation.uuidString.getter(type metadata accessor for NCProtoContinuityCall);
}

uint64_t NCProtoActiveConversation.uuidString.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 24));
  if (v2[1]) {
    uint64_t v3 = *v2;
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t key path getter for NCProtoContinuityCall.displayName : NCProtoContinuityCall@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(a1, type metadata accessor for NCProtoContinuityCall, a2);
}

uint64_t key path getter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, void *a3@<X8>)
{
  uint64_t v4 = (uint64_t *)(a1 + *(int *)(a2(0) + 24));
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *a3 = v6;
  a3[1] = v7;

  return swift_bridgeObjectRetain();
}

uint64_t key path setter for NCProtoContinuityCall.displayName : NCProtoContinuityCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(a1, a2, a3, a4, type metadata accessor for NCProtoContinuityCall);
}

uint64_t key path setter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = (void *)(a2 + *(int *)(a5(0) + 24));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v7 = v6;
  v7[1] = v5;
  return result;
}

uint64_t NCProtoContinuityCall.displayName.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoActiveConversation.uuidString.setter(a1, a2, type metadata accessor for NCProtoContinuityCall);
}

uint64_t NCProtoActiveConversation.uuidString.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3(0) + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*NCProtoContinuityCall.displayName.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoContinuityCall.hasDisplayName.getter()
{
  return NCProtoActiveConversation.hasUuidString.getter(type metadata accessor for NCProtoContinuityCall);
}

BOOL NCProtoActiveConversation.hasUuidString.getter(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0) + 24) + 8) != 0;
}

Swift::Void __swiftcall NCProtoContinuityCall.clearDisplayName()()
{
}

uint64_t NCProtoActiveConversation.clearUuidString()(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)(v1 + *(int *)(a1(0) + 24));
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t NCProtoContinuityCall.status.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityCall.status.getter(type metadata accessor for NCProtoContinuityCall, a1);
}

uint64_t key path getter for NCProtoContinuityCall.status : NCProtoContinuityCall@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.status : NCProtoContinuityCall(a1, type metadata accessor for NCProtoContinuityCall, a2);
}

uint64_t key path setter for NCProtoContinuityCall.status : NCProtoContinuityCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.status : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoContinuityCall);
}

uint64_t NCProtoContinuityCall.status.setter(uint64_t *a1)
{
  return NCProtoContinuityCall.status.setter(a1, type metadata accessor for NCProtoContinuityCall);
}

uint64_t (*NCProtoContinuityCall.status.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 9))
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  else
  {
    char v7 = *((unsigned char *)v4 + 8);
    uint64_t v5 = *v4;
    char v6 = v7 & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

BOOL NCProtoContinuityCall.hasStatus.getter()
{
  return NCProtoContinuityCall.hasStatus.getter(type metadata accessor for NCProtoContinuityCall);
}

Swift::Void __swiftcall NCProtoContinuityCall.clearStatus()()
{
}

uint64_t NCProtoContinuityCall.conversationUuidString.getter()
{
  return NCProtoContinuityCall.conversationUuidString.getter(type metadata accessor for NCProtoContinuityCall);
}

uint64_t key path getter for NCProtoContinuityCall.conversationUuidString : NCProtoContinuityCall@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.conversationUuidString : NCProtoContinuityCall(a1, type metadata accessor for NCProtoContinuityCall, a2);
}

uint64_t key path setter for NCProtoContinuityCall.conversationUuidString : NCProtoContinuityCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.conversationUuidString : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoContinuityCall);
}

uint64_t NCProtoContinuityCall.conversationUuidString.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoContinuityCall.conversationUuidString.setter(a1, a2, type metadata accessor for NCProtoContinuityCall);
}

uint64_t (*NCProtoContinuityCall.conversationUuidString.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoContinuityCall.hasConversationUuidString.getter()
{
  return NCProtoContinuityCall.hasConversationUuidString.getter(type metadata accessor for NCProtoContinuityCall);
}

Swift::Void __swiftcall NCProtoContinuityCall.clearConversationUuidString()()
{
}

uint64_t NCProtoContinuityCall.isMuted.getter()
{
  return NCProtoContinuityCall.isMuted.getter(type metadata accessor for NCProtoContinuityCall);
}

uint64_t key path getter for NCProtoContinuityCall.isMuted : NCProtoContinuityCall@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.isMuted : NCProtoContinuityCall(a1, type metadata accessor for NCProtoContinuityCall, a2);
}

uint64_t key path setter for NCProtoContinuityCall.isMuted : NCProtoContinuityCall(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.isMuted : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoContinuityCall);
}

uint64_t NCProtoContinuityCall.isMuted.setter(char a1)
{
  return NCProtoContinuityCall.isMuted.setter(a1, type metadata accessor for NCProtoContinuityCall);
}

uint64_t (*NCProtoContinuityCall.isMuted.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return NCProtoContinuityCall.isMuted.modify;
}

BOOL NCProtoContinuityCall.hasIsMuted.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 36)) != 2;
}

Swift::Void __swiftcall NCProtoContinuityCall.clearIsMuted()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 36)) = 2;
}

uint64_t NCProtoContinuityCall.isCameraEnabled.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 40)) & 1;
}

uint64_t key path getter for NCProtoContinuityCall.isCameraEnabled : NCProtoContinuityCall@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = type metadata accessor for NCProtoContinuityCall(0);
  *a2 = *(unsigned char *)(a1 + *(int *)(result + 40)) & 1;
  return result;
}

uint64_t key path setter for NCProtoContinuityCall.isCameraEnabled : NCProtoContinuityCall(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t result = type metadata accessor for NCProtoContinuityCall(0);
  *(unsigned char *)(a2 + *(int *)(result + 40)) = v3;
  return result;
}

uint64_t NCProtoContinuityCall.isCameraEnabled.setter(char a1)
{
  uint64_t result = type metadata accessor for NCProtoContinuityCall(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*NCProtoContinuityCall.isCameraEnabled.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 40);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return NCProtoContinuityCall.isMuted.modify;
}

BOOL NCProtoContinuityCall.hasIsCameraEnabled.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 40)) != 2;
}

Swift::Void __swiftcall NCProtoContinuityCall.clearIsCameraEnabled()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 40)) = 2;
}

uint64_t NCProtoContinuityCall.info.getter@<X0>(unint64_t *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
  MEMORY[0x270FA5388]();
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NCProtoContinuityCall(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 44), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoCallInfo?);
  uint64_t v6 = (int *)type metadata accessor for NCProtoCallInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v6 - 1) + 48))(v4, 1, v6) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, (uint64_t)a1, type metadata accessor for NCProtoCallInfo);
  }
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  UnknownStorage.init()();
  unint64_t v7 = (unint64_t *)((char *)a1 + v6[6]);
  *unint64_t v7 = 0;
  v7[1] = 0;
  unint64_t v8 = (unint64_t *)((char *)a1 + v6[7]);
  void *v8 = 0;
  v8[1] = 0;
  size_t v9 = (unint64_t *)((char *)a1 + v6[8]);
  *size_t v9 = 0;
  v9[1] = 0;
  *((unsigned char *)a1 + v6[9]) = 2;
  uint64_t v10 = (char *)a1 + v6[10];
  uint64_t v11 = type metadata accessor for NCProtoSenderIdentity(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *(_OWORD *)((char *)a1 + v6[11]) = xmmword_25743E3C0;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoCallInfo?);
}

uint64_t key path getter for NCProtoContinuityCall.info : NCProtoContinuityCall@<X0>(unint64_t *a1@<X8>)
{
  return NCProtoContinuityCall.info.getter(a1);
}

uint64_t key path setter for NCProtoContinuityCall.info : NCProtoContinuityCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NCProtoCallInfo(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  unint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v7, type metadata accessor for NCProtoCallInfo);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 44);
  outlined destroy of NCProtoContactInfo?(v8, &demangling cache variable for type metadata for NCProtoCallInfo?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, v8, type metadata accessor for NCProtoCallInfo);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t NCProtoContinuityCall.info.setter(uint64_t a1)
{
  return NCProtoContinuityCall.info.setter(a1, type metadata accessor for NCProtoContinuityCall, &demangling cache variable for type metadata for NCProtoCallInfo?, type metadata accessor for NCProtoCallInfo, type metadata accessor for NCProtoCallInfo);
}

double NCProtoCallInfo.init()@<D0>(unint64_t *a1@<X8>)
{
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v2 = (int *)type metadata accessor for NCProtoCallInfo(0);
  UnknownStorage.init()();
  uint64_t v3 = (unint64_t *)((char *)a1 + v2[6]);
  *uint64_t v3 = 0;
  v3[1] = 0;
  uint64_t v4 = (unint64_t *)((char *)a1 + v2[7]);
  *uint64_t v4 = 0;
  v4[1] = 0;
  uint64_t v5 = (unint64_t *)((char *)a1 + v2[8]);
  *uint64_t v5 = 0;
  v5[1] = 0;
  *((unsigned char *)a1 + v2[9]) = 2;
  uint64_t v6 = (char *)a1 + v2[10];
  uint64_t v7 = type metadata accessor for NCProtoSenderIdentity(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  double result = 0.0;
  *(_OWORD *)((char *)a1 + v2[11]) = xmmword_25743E3C0;
  return result;
}

uint64_t type metadata accessor for NCProtoCallInfo(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoCallInfo);
}

void (*NCProtoContinuityCall.info.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for NCProtoCallInfo(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 44);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of NCProtoContactInfo?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    UnknownStorage.init()();
    v12 = (void *)((char *)v10 + v6[6]);
    void *v12 = 0;
    v12[1] = 0;
    uint64_t v13 = (void *)((char *)v10 + v6[7]);
    void *v13 = 0;
    v13[1] = 0;
    v14 = (void *)((char *)v10 + v6[8]);
    void *v14 = 0;
    v14[1] = 0;
    *((unsigned char *)v10 + v6[9]) = 2;
    v15 = (char *)v10 + v6[10];
    uint64_t v16 = type metadata accessor for NCProtoSenderIdentity(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
    *(_OWORD *)((char *)v10 + v6[11]) = xmmword_25743E3C0;
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallInfo?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for NCProtoCallInfo);
  }
  return NCProtoContinuityCall.info.modify;
}

void NCProtoContinuityCall.info.modify(uint64_t a1, char a2)
{
}

BOOL NCProtoContinuityCall.hasInfo.getter()
{
  return NCProtoContinuityCall.hasInfo.getter(&demangling cache variable for type metadata for NCProtoCallInfo?, type metadata accessor for NCProtoContinuityCall, type metadata accessor for NCProtoCallInfo);
}

Swift::Void __swiftcall NCProtoContinuityCall.clearInfo()()
{
}

uint64_t NCProtoContinuityCall.callGroupUuidString.getter()
{
  return NCProtoContactInfo.organizationName.getter(type metadata accessor for NCProtoContinuityCall);
}

uint64_t NCProtoContactInfo.organizationName.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 48));
  if (v2[1]) {
    uint64_t v3 = *v2;
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t key path getter for NCProtoContinuityCall.callGroupUuidString : NCProtoContinuityCall@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for NCProtoContactInfo.organizationName : NCProtoContactInfo(a1, type metadata accessor for NCProtoContinuityCall, a2);
}

uint64_t key path getter for NCProtoContactInfo.organizationName : NCProtoContactInfo@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, void *a3@<X8>)
{
  uint64_t v4 = (uint64_t *)(a1 + *(int *)(a2(0) + 48));
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *a3 = v6;
  a3[1] = v7;

  return swift_bridgeObjectRetain();
}

uint64_t key path setter for NCProtoContinuityCall.callGroupUuidString : NCProtoContinuityCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContactInfo.organizationName : NCProtoContactInfo(a1, a2, a3, a4, type metadata accessor for NCProtoContinuityCall);
}

uint64_t key path setter for NCProtoContactInfo.organizationName : NCProtoContactInfo(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = (void *)(a2 + *(int *)(a5(0) + 48));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v7 = v6;
  v7[1] = v5;
  return result;
}

uint64_t NCProtoContinuityCall.callGroupUuidString.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoContactInfo.organizationName.setter(a1, a2, type metadata accessor for NCProtoContinuityCall);
}

uint64_t NCProtoContactInfo.organizationName.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3(0) + 48));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*NCProtoContinuityCall.callGroupUuidString.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoContinuityCall(0) + 48);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoContinuityCall.hasCallGroupUuidString.getter()
{
  return NCProtoContactInfo.hasOrganizationName.getter(type metadata accessor for NCProtoContinuityCall);
}

BOOL NCProtoContactInfo.hasOrganizationName.getter(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0) + 48) + 8) != 0;
}

Swift::Void __swiftcall NCProtoContinuityCall.clearCallGroupUuidString()()
{
}

uint64_t NCProtoContactInfo.clearOrganizationName()(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)(v1 + *(int *)(a1(0) + 48));
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t (*NCProtoContinuityCall.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

void NCProtoContinuityCall.Status.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

unint64_t NCProtoContinuityCall.Status.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 8;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t NCProtoContinuityCall.Status.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t static NCProtoContinuityCall.Status.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

void protocol witness for Enum.init() in conformance NCProtoContinuityCall.Status(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance NCProtoContinuityCall.Status()
{
  return *(void *)v0;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoContinuityCall.Status@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoContinuityCall.Status.allCases, a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NCProtoContinuityCall.Status@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return NCProtoContinuityCall.Status.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NCProtoContinuityCall.Status(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoContinuityCall.Status(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoContinuityCall.Status(uint64_t a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

uint64_t NCProtoContinuityCall.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for NCProtoContinuityCall(0);
  uint64_t v3 = (void *)(a1 + v2[5]);
  *uint64_t v3 = 0;
  v3[1] = 0;
  unint64_t v4 = (void *)(a1 + v2[6]);
  *unint64_t v4 = 0;
  v4[1] = 0;
  uint64_t v5 = a1 + v2[7];
  *(void *)uint64_t v5 = 0;
  *(_WORD *)(v5 + 8) = 256;
  uint64_t v6 = (void *)(a1 + v2[8]);
  *uint64_t v6 = 0;
  v6[1] = 0;
  *(unsigned char *)(a1 + v2[9]) = 2;
  *(unsigned char *)(a1 + v2[10]) = 2;
  uint64_t v7 = a1 + v2[11];
  uint64_t v8 = type metadata accessor for NCProtoCallInfo(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v10 = (void *)(a1 + v2[12]);
  *uint64_t v10 = 0;
  v10[1] = 0;
  return result;
}

uint64_t (*NCProtoStartedSessionEvent.identifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoStartedSessionEvent.userAccountInfoData.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoStartedSessionEvent.memberAssociationPrimaryInfo.getter@<X0>(void *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  MEMORY[0x270FA5388]();
  unint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NCProtoStartedSessionEvent(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 28), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  uint64_t v6 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v6 - 1) + 48))(v4, 1, v6) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, (uint64_t)a1, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  }
  *a1 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  uint64_t v7 = (void *)((char *)a1 + v6[6]);
  *uint64_t v7 = 0;
  v7[1] = 0;
  *(_OWORD *)((char *)a1 + v6[7]) = xmmword_25743E3C0;
  uint64_t v8 = (char *)a1 + v6[8];
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  size_t v9 = (void *)((char *)a1 + v6[9]);
  *size_t v9 = 0;
  v9[1] = 0;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
}

uint64_t key path getter for NCProtoStartedSessionEvent.memberAssociationPrimaryInfo : NCProtoStartedSessionEvent@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  MEMORY[0x270FA5388]();
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NCProtoStartedSessionEvent(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  uint64_t v7 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)a2, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  }
  *a2 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  uint64_t v8 = (void *)((char *)a2 + v7[6]);
  void *v8 = 0;
  v8[1] = 0;
  *(_OWORD *)((char *)a2 + v7[7]) = xmmword_25743E3C0;
  size_t v9 = (char *)a2 + v7[8];
  *(void *)size_t v9 = 0;
  v9[8] = 1;
  uint64_t v10 = (void *)((char *)a2 + v7[9]);
  *uint64_t v10 = 0;
  v10[1] = 0;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
}

uint64_t key path setter for NCProtoStartedSessionEvent.memberAssociationPrimaryInfo : NCProtoStartedSessionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v7, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for NCProtoStartedSessionEvent(0) + 28);
  outlined destroy of NCProtoContactInfo?(v8, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, v8, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t NCProtoStartedSessionEvent.memberAssociationPrimaryInfo.setter(uint64_t a1)
{
  return NCProtoAddressableContact.contactInfo.setter(a1, type metadata accessor for NCProtoStartedSessionEvent, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?, type metadata accessor for NCProtoMemberAssociationPrimaryInfo, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

double NCProtoMemberAssociationPrimaryInfo.init()@<D0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  uint64_t v2 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  UnknownStorage.init()();
  uint64_t v3 = (void *)((char *)a1 + v2[6]);
  *uint64_t v3 = 0;
  v3[1] = 0;
  double result = 0.0;
  *(_OWORD *)((char *)a1 + v2[7]) = xmmword_25743E3C0;
  uint64_t v5 = (char *)a1 + v2[8];
  *(void *)uint64_t v5 = 0;
  v5[8] = 1;
  uint64_t v6 = (void *)((char *)a1 + v2[9]);
  *uint64_t v6 = 0;
  v6[1] = 0;
  return result;
}

void (*NCProtoStartedSessionEvent.memberAssociationPrimaryInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for NCProtoStartedSessionEvent(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of NCProtoContactInfo?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = MEMORY[0x263F8EE78];
    UnknownStorage.init()();
    uint64_t v12 = (void *)((char *)v10 + v6[6]);
    void *v12 = 0;
    v12[1] = 0;
    *(_OWORD *)((char *)v10 + v6[7]) = xmmword_25743E3C0;
    uint64_t v13 = (char *)v10 + v6[8];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    v14 = (void *)((char *)v10 + v6[9]);
    void *v14 = 0;
    v14[1] = 0;
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  }
  return NCProtoStartedSessionEvent.memberAssociationPrimaryInfo.modify;
}

void NCProtoStartedSessionEvent.memberAssociationPrimaryInfo.modify(uint64_t a1, char a2)
{
}

BOOL NCProtoStartedSessionEvent.hasMemberAssociationPrimaryInfo.getter()
{
  return NCProtoAddressableContact.hasContactInfo.getter(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?, type metadata accessor for NCProtoStartedSessionEvent, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

BOOL NCProtoAddressableContact.hasContactInfo.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388]();
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2(0);
  outlined init with copy of NCProtoContactInfo?(v3 + *(int *)(v9 + 28), (uint64_t)v8, a1);
  uint64_t v10 = a3(0);
  BOOL v11 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v8, 1, v10) != 1;
  outlined destroy of NCProtoContactInfo?((uint64_t)v8, a1);
  return v11;
}

Swift::Void __swiftcall NCProtoStartedSessionEvent.clearMemberAssociationPrimaryInfo()()
{
}

uint64_t NCProtoAddressableContact.clearContactInfo()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 28);
  outlined destroy of NCProtoContactInfo?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t NCProtoStartedSessionEvent.avMode.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.avMode.getter(type metadata accessor for NCProtoStartedSessionEvent, a1);
}

uint64_t NCProtoActiveConversation.avMode.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = a1(0);
  uint64_t v5 = (uint64_t *)(v2 + *(int *)(result + 32));
  if (*((unsigned char *)v5 + 9))
  {
    uint64_t v6 = 0;
    char v7 = 1;
  }
  else
  {
    char v8 = *((unsigned char *)v5 + 8);
    uint64_t v6 = *v5;
    char v7 = v8 & 1;
  }
  *(void *)a2 = v6;
  *(unsigned char *)(a2 + 8) = v7;
  return result;
}

uint64_t key path getter for NCProtoStartedSessionEvent.avMode : NCProtoStartedSessionEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for NCProtoActiveConversation.avMode : NCProtoActiveConversation(a1, type metadata accessor for NCProtoStartedSessionEvent, a2);
}

uint64_t key path getter for NCProtoActiveConversation.avMode : NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(0);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(result + 32));
  uint64_t v7 = *v6;
  char v8 = *((unsigned char *)v6 + 8);
  int v9 = *((unsigned __int8 *)v6 + 9);
  if (v9) {
    uint64_t v7 = 0;
  }
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 8) = (v9 | v8) & 1;
  return result;
}

uint64_t key path setter for NCProtoStartedSessionEvent.avMode : NCProtoStartedSessionEvent(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoActiveConversation.avMode : NCProtoActiveConversation(a1, a2, a3, a4, type metadata accessor for NCProtoStartedSessionEvent);
}

uint64_t key path setter for NCProtoActiveConversation.avMode : NCProtoActiveConversation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = *a1;
  char v7 = *((unsigned char *)a1 + 8);
  uint64_t result = a5(0);
  uint64_t v9 = a2 + *(int *)(result + 32);
  *(void *)uint64_t v9 = v6;
  *(unsigned char *)(v9 + 8) = v7;
  *(unsigned char *)(v9 + 9) = 0;
  return result;
}

uint64_t NCProtoStartedSessionEvent.avMode.setter(uint64_t *a1)
{
  return NCProtoActiveConversation.avMode.setter(a1, type metadata accessor for NCProtoStartedSessionEvent);
}

uint64_t NCProtoActiveConversation.avMode.setter(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t result = a2(0);
  uint64_t v6 = v2 + *(int *)(result + 32);
  *(void *)uint64_t v6 = v3;
  *(unsigned char *)(v6 + 8) = v4;
  *(unsigned char *)(v6 + 9) = 0;
  return result;
}

uint64_t (*NCProtoStartedSessionEvent.avMode.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoStartedSessionEvent(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  char v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 9))
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  else
  {
    char v7 = *((unsigned char *)v4 + 8);
    uint64_t v5 = *v4;
    char v6 = v7 & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

BOOL NCProtoStartedSessionEvent.hasAvMode.getter()
{
  return NCProtoActiveConversation.hasAvMode.getter(type metadata accessor for NCProtoStartedSessionEvent);
}

BOOL NCProtoActiveConversation.hasAvMode.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 32) + 9) & 1) == 0;
}

Swift::Void __swiftcall NCProtoStartedSessionEvent.clearAvMode()()
{
}

uint64_t NCProtoActiveConversation.clearAvMode()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 32);
  *(void *)uint64_t v3 = 0;
  *(_WORD *)(v3 + 8) = 256;
  return result;
}

uint64_t NCProtoStartedSessionEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoAddressableContact.unknownFields.getter(type metadata accessor for NCProtoStartedSessionEvent, a1);
}

uint64_t NCProtoAddressableContact.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  char v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t NCProtoStartedSessionEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoAddressableContact.unknownFields.setter(a1, type metadata accessor for NCProtoStartedSessionEvent);
}

uint64_t NCProtoAddressableContact.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  char v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*NCProtoStartedSessionEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoStartedSessionEvent.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(_OWORD *)(a1 + 16) = xmmword_25743E3B0;
  uint64_t v2 = type metadata accessor for NCProtoStartedSessionEvent(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v6 = a1 + *(int *)(v2 + 32);
  *(void *)uint64_t v6 = 0;
  *(_WORD *)(v6 + 8) = 256;
  return result;
}

uint64_t (*NCProtoEndedSessionEvent.identifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoEndedSessionEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoEndedSessionEvent, a1);
}

uint64_t NCProtoActiveConversation.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t NCProtoEndedSessionEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoEndedSessionEvent);
}

uint64_t NCProtoActiveConversation.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*NCProtoEndedSessionEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoEndedSessionEvent.init()@<X0>(void *a1@<X8>)
{
  return NCProtoEndedSessionEvent.init()((void (*)(void))type metadata accessor for NCProtoEndedSessionEvent, a1);
}

uint64_t (*NCProtoPendingConversationDisconnectedEvent.uuidString.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoPendingConversationDisconnectedEvent.disconnectedReason.getter()
{
  return *(unsigned int *)(v0 + 16);
}

uint64_t NCProtoPendingConversationDisconnectedEvent.disconnectedReason.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*NCProtoPendingConversationDisconnectedEvent.disconnectedReason.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoPendingConversationDisconnectedEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoAddressableContact.unknownFields.getter(type metadata accessor for NCProtoPendingConversationDisconnectedEvent, a1);
}

uint64_t NCProtoPendingConversationDisconnectedEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoAddressableContact.unknownFields.setter(a1, type metadata accessor for NCProtoPendingConversationDisconnectedEvent);
}

uint64_t (*NCProtoPendingConversationDisconnectedEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoPendingConversationDisconnectedEvent.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(_DWORD *)(a1 + 16) = 0;
  type metadata accessor for NCProtoPendingConversationDisconnectedEvent(0);
  return UnknownStorage.init()();
}

uint64_t (*NCProtoContactUpdateEvent.identifierHash.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v11 = (uint64_t *)(v2[6] + 16 * result);
    *BOOL v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    void *v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Bool>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    BOOL v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  void v25[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Google_Protobuf_Value));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Google_Protobuf_Value>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (char *)v5 + *(int *)(v2 + 48);
  char v10 = v6 + 64;
  BOOL v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of NCProtoContactInfo?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (String, Google_Protobuf_Value));
    BOOL v14 = *v5;
    uint64_t v15 = v5[1];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v15);
    if (v17) {
      break;
    }
    v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = (uint64_t *)(v7[6] + 16 * result);
    *v19 = v14;
    v19[1] = v15;
    v20 = v7[7];
    v21 = type metadata accessor for Google_Protobuf_Value();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, v9, v21);
    v22 = v7[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for NCProtoSenderIdentity(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoSenderIdentity);
}

uint64_t type metadata accessor for NCProtoStartedSessionEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoStartedSessionEvent);
}

uint64_t type metadata accessor for NCProtoMemberAssociationPrimaryInfo(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t type metadata accessor for NCProtoEndedSessionEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoEndedSessionEvent);
}

uint64_t type metadata accessor for NCProtoPendingConversationDisconnectedEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoPendingConversationDisconnectedEvent);
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  v31 = a4;
  v32 = a5;
  v33 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388]();
  char v10 = (uint64_t *)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v12 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v11 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v12 = (void *)v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v12;
  }
  uint64_t v14 = (uint64_t)v10 + *(int *)(v7 + 48);
  uint64_t v15 = v11 + 64;
  unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v30 = a1;
  uint64_t v17 = a1 + v16;
  uint64_t v18 = *(void *)(v8 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of NCProtoContactInfo?(v17, (uint64_t)v10, v33);
    uint64_t v20 = *v10;
    uint64_t v19 = v10[1];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v10, v19);
    if (v22) {
      break;
    }
    unint64_t v23 = result;
    *(void *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v24 = (uint64_t *)(v12[6] + 16 * result);
    uint64_t *v24 = v20;
    v24[1] = v19;
    uint64_t v25 = v12[7];
    uint64_t v26 = v31(0);
    unint64_t result = outlined init with take of NCProtoContactInfo(v14, v25 + *(void *)(*(void *)(v26 - 8) + 72) * v23, v32);
    uint64_t v27 = v12[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_11;
    }
    v12[2] = v29;
    v17 += v18;
    if (!--v13)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t (*NCProtoContactUpdateEvent.contacts.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactUpdateEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoAddressableContact.unknownFields.getter(type metadata accessor for NCProtoContactUpdateEvent, a1);
}

uint64_t type metadata accessor for NCProtoContactUpdateEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoContactUpdateEvent);
}

uint64_t NCProtoContactUpdateEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoAddressableContact.unknownFields.setter(a1, type metadata accessor for NCProtoContactUpdateEvent);
}

uint64_t (*NCProtoContactUpdateEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactUpdateEvent.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_25743E3B0;
  *(void *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78], &demangling cache variable for type metadata for (String, NCProtoContactInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoContactInfo>, type metadata accessor for NCProtoContactInfo, type metadata accessor for NCProtoContactInfo);
  type metadata accessor for NCProtoContactUpdateEvent(0);
  return UnknownStorage.init()();
}

uint64_t NCProtoJoinEvent.identifierHash.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data._Representation(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t NCProtoJoinEvent.identifierHash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*NCProtoJoinEvent.identifierHash.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoJoinEvent.userAccountInfoData.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t (*NCProtoJoinEvent.userAccountInfoData.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoJoinEvent.policyInfos.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoJoinEvent.policyInfos.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*NCProtoJoinEvent.policyInfos.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoJoinEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityFavorite.unknownFields.getter(type metadata accessor for NCProtoJoinEvent, a1);
}

uint64_t NCProtoContinuityFavorite.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t type metadata accessor for NCProtoJoinEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoJoinEvent);
}

uint64_t NCProtoJoinEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoContinuityFavorite.unknownFields.setter(a1, type metadata accessor for NCProtoJoinEvent);
}

uint64_t NCProtoContinuityFavorite.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*NCProtoJoinEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoJoinEvent.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_25743E3B0;
  *(_OWORD *)(a1 + 16) = xmmword_25743E3B0;
  *(void *)(a1 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for NCProtoJoinEvent(0);
  return UnknownStorage.init()();
}

uint64_t (*NCProtoRecentCallsDidChangeEvent.recentCalls.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoRecentCallsDidChangeEvent.contactInfos.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoRecentCallsDidChangeEvent.recentCallsInfo.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoRecentCallsDidChangeEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityFavorite.unknownFields.getter(type metadata accessor for NCProtoRecentCallsDidChangeEvent, a1);
}

uint64_t type metadata accessor for NCProtoRecentCallsDidChangeEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoRecentCallsDidChangeEvent);
}

uint64_t NCProtoRecentCallsDidChangeEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoContinuityFavorite.unknownFields.setter(a1, type metadata accessor for NCProtoRecentCallsDidChangeEvent);
}

uint64_t (*NCProtoRecentCallsDidChangeEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoRecentCallsDidChangeEvent.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoContactInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoContactInfo>, type metadata accessor for NCProtoContactInfo, type metadata accessor for NCProtoContactInfo);
  a1[2] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoCallInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoCallInfo>, type metadata accessor for NCProtoCallInfo, type metadata accessor for NCProtoCallInfo);
  type metadata accessor for NCProtoRecentCallsDidChangeEvent(0);
  return UnknownStorage.init()();
}

uint64_t (*NCProtoFavoritesDidChangeEvent.favorites.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoFavoritesDidChangeEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoFavoritesDidChangeEvent, a1);
}

uint64_t type metadata accessor for NCProtoFavoritesDidChangeEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoFavoritesDidChangeEvent);
}

uint64_t NCProtoFavoritesDidChangeEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoFavoritesDidChangeEvent);
}

uint64_t (*NCProtoFavoritesDidChangeEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoFavoritesDidChangeEvent.init()@<X0>(void *a1@<X8>)
{
  return NCProtoFavoritesDidChangeEvent.init()((void (*)(void))type metadata accessor for NCProtoFavoritesDidChangeEvent, a1);
}

uint64_t (*NCProtoActiveConversationsDidChangeEvent.activeConversations.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoActiveConversationsDidChangeEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoActiveConversationsDidChangeEvent, a1);
}

uint64_t type metadata accessor for NCProtoActiveConversationsDidChangeEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoActiveConversationsDidChangeEvent);
}

uint64_t NCProtoActiveConversationsDidChangeEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoActiveConversationsDidChangeEvent);
}

uint64_t (*NCProtoActiveConversationsDidChangeEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoActiveConversationsDidChangeEvent.init()@<X0>(void *a1@<X8>)
{
  return NCProtoFavoritesDidChangeEvent.init()((void (*)(void))type metadata accessor for NCProtoActiveConversationsDidChangeEvent, a1);
}

uint64_t NCProtoFavoritesDidChangeEvent.init()@<X0>(void (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  a1(0);
  return UnknownStorage.init()();
}

uint64_t (*NCProtoContinuityCallsDidChangeEvent.continuityCalls.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContinuityCallsDidChangeEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoContinuityCallsDidChangeEvent, a1);
}

uint64_t type metadata accessor for NCProtoContinuityCallsDidChangeEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoContinuityCallsDidChangeEvent);
}

uint64_t NCProtoContinuityCallsDidChangeEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoContinuityCallsDidChangeEvent);
}

uint64_t (*NCProtoContinuityCallsDidChangeEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContinuityCallsDidChangeEvent.init()@<X0>(void *a1@<X8>)
{
  return NCProtoFavoritesDidChangeEvent.init()((void (*)(void))type metadata accessor for NCProtoContinuityCallsDidChangeEvent, a1);
}

uint64_t (*NCProtoSuggestionAdvertisement.suggestionIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoSuggestionAdvertisement.deviceIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoSuggestionAdvertisement.type.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoSuggestionAdvertisement.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityFavorite.unknownFields.getter(type metadata accessor for NCProtoSuggestionAdvertisement, a1);
}

uint64_t type metadata accessor for NCProtoSuggestionAdvertisement(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoSuggestionAdvertisement);
}

uint64_t NCProtoSuggestionAdvertisement.unknownFields.setter(uint64_t a1)
{
  return NCProtoContinuityFavorite.unknownFields.setter(a1, type metadata accessor for NCProtoSuggestionAdvertisement);
}

uint64_t (*NCProtoSuggestionAdvertisement.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

unint64_t NCProtoSuggestionAdvertisement.SuggestionType.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 2;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t NCProtoSuggestionAdvertisement.SuggestionType.rawValue.getter()
{
  if (v0[8]) {
    return *(void *)v0 != 0;
  }
  else {
    return *(void *)v0;
  }
}

uint64_t static NCProtoSuggestionAdvertisement.SuggestionType.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance NCProtoSuggestionAdvertisement.SuggestionType@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 2;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance NCProtoSuggestionAdvertisement.SuggestionType()
{
  if (v0[8]) {
    return *(void *)v0 != 0;
  }
  else {
    return *(void *)v0;
  }
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoSuggestionAdvertisement.SuggestionType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoSuggestionAdvertisement.SuggestionType.allCases, a1);
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance NCProtoSuggestionAdvertisement.SuggestionType@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 2uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NCProtoSuggestionAdvertisement.SuggestionType(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8)) {
    uint64_t v2 = *v1 != 0;
  }
  *a1 = v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoSuggestionAdvertisement.SuggestionType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t NCProtoSuggestionAdvertisement.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  type metadata accessor for NCProtoSuggestionAdvertisement(0);
  return UnknownStorage.init()();
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.getter@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  MEMORY[0x270FA5388]();
  unint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 20), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  uint64_t v6 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, a1, type metadata accessor for NCProtoSuggestionAdvertisement);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  UnknownStorage.init()();
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
}

uint64_t type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoSuggestionAdvertisementDidChangeEvent);
}

uint64_t key path getter for NCProtoSuggestionAdvertisementDidChangeEvent.advertisement : NCProtoSuggestionAdvertisementDidChangeEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  MEMORY[0x270FA5388]();
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  uint64_t v7 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v5, a2, type metadata accessor for NCProtoSuggestionAdvertisement);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 1;
  UnknownStorage.init()();
  return outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
}

uint64_t key path setter for NCProtoSuggestionAdvertisementDidChangeEvent.advertisement : NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v7, type metadata accessor for NCProtoSuggestionAdvertisement);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent(0) + 20);
  outlined destroy of NCProtoContactInfo?(v8, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, v8, type metadata accessor for NCProtoSuggestionAdvertisement);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.setter(uint64_t a1)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.setter(a1, type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?, type metadata accessor for NCProtoSuggestionAdvertisement, type metadata accessor for NCProtoSuggestionAdvertisement);
}

void (*NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of NCProtoContactInfo?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0xE000000000000000;
    v10[2] = 0;
    v10[3] = 0xE000000000000000;
    v10[4] = 0;
    *((unsigned char *)v10 + 40) = 1;
    UnknownStorage.init()();
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for NCProtoSuggestionAdvertisement);
  }
  return NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.modify;
}

void NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.modify(uint64_t a1, char a2)
{
}

BOOL NCProtoSuggestionAdvertisementDidChangeEvent.hasAdvertisement.getter()
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.hasAdvertisement.getter(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?, type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent, type metadata accessor for NCProtoSuggestionAdvertisement);
}

Swift::Void __swiftcall NCProtoSuggestionAdvertisementDidChangeEvent.clearAdvertisement()()
{
}

uint64_t (*NCProtoSuggestionAdvertisementDidChangeEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.init()@<X0>(uint64_t a1@<X8>)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.init()(type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent, type metadata accessor for NCProtoSuggestionAdvertisement, a1);
}

uint64_t (*NCProtoLagunaConnectionRequest.recentCalls.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoLagunaConnectionRequest.contactInfos.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoLagunaConnectionRequest.contactInfos.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*NCProtoLagunaConnectionRequest.contactInfos.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoLagunaConnectionRequest.callState.getter@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x270FA5388]();
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NCProtoLagunaConnectionRequest(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 44), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoCallState?);
  uint64_t v6 = (int *)type metadata accessor for NCProtoCallState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v6 - 1) + 48))(v4, 1, v6) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, a1, type metadata accessor for NCProtoCallState);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v6[5]) = 2;
  *(unsigned char *)(a1 + v6[6]) = 2;
  uint64_t v7 = a1 + v6[7];
  *(void *)uint64_t v7 = 0;
  *(_WORD *)(v7 + 8) = 256;
  *(unsigned char *)(a1 + v6[8]) = 2;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoCallState?);
}

uint64_t key path getter for NCProtoLagunaConnectionRequest.callState : NCProtoLagunaConnectionRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x270FA5388]();
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NCProtoLagunaConnectionRequest(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v6 + 44), (uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
  uint64_t v7 = (int *)type metadata accessor for NCProtoCallState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v5, a2, type metadata accessor for NCProtoCallState);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a2 + v7[5]) = 2;
  *(unsigned char *)(a2 + v7[6]) = 2;
  uint64_t v8 = a2 + v7[7];
  *(void *)uint64_t v8 = 0;
  *(_WORD *)(v8 + 8) = 256;
  *(unsigned char *)(a2 + v7[8]) = 2;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
}

uint64_t key path setter for NCProtoLagunaConnectionRequest.callState : NCProtoLagunaConnectionRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NCProtoCallState(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v7, type metadata accessor for NCProtoCallState);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for NCProtoLagunaConnectionRequest(0) + 44);
  outlined destroy of NCProtoContactInfo?(v8, &demangling cache variable for type metadata for NCProtoCallState?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, v8, type metadata accessor for NCProtoCallState);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t NCProtoLagunaConnectionRequest.callState.setter(uint64_t a1)
{
  return NCProtoContinuityCall.info.setter(a1, type metadata accessor for NCProtoLagunaConnectionRequest, &demangling cache variable for type metadata for NCProtoCallState?, type metadata accessor for NCProtoCallState, type metadata accessor for NCProtoCallState);
}

uint64_t NCProtoContinuityCall.info.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 44);
  outlined destroy of NCProtoContactInfo?(v10, a3);
  outlined init with take of NCProtoContactInfo(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(v10, 0, 1, v11);
}

int *NCProtoCallState.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for NCProtoCallState(0);
  *(unsigned char *)(a1 + result[5]) = 2;
  *(unsigned char *)(a1 + result[6]) = 2;
  uint64_t v3 = a1 + result[7];
  *(void *)uint64_t v3 = 0;
  *(_WORD *)(v3 + 8) = 256;
  *(unsigned char *)(a1 + result[8]) = 2;
  return result;
}

uint64_t type metadata accessor for NCProtoLagunaConnectionRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoLagunaConnectionRequest);
}

uint64_t type metadata accessor for NCProtoCallState(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoCallState);
}

void (*NCProtoLagunaConnectionRequest.callState.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for NCProtoCallState(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for NCProtoLagunaConnectionRequest(0) + 44);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of NCProtoContactInfo?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v10[v6[5]] = 2;
    v10[v6[6]] = 2;
    uint64_t v12 = &v10[v6[7]];
    *(void *)uint64_t v12 = 0;
    *((_WORD *)v12 + 4) = 256;
    v10[v6[8]] = 2;
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for NCProtoCallState);
  }
  return NCProtoLagunaConnectionRequest.callState.modify;
}

void NCProtoLagunaConnectionRequest.callState.modify(uint64_t a1, char a2)
{
}

BOOL NCProtoLagunaConnectionRequest.hasCallState.getter()
{
  return NCProtoContinuityCall.hasInfo.getter(&demangling cache variable for type metadata for NCProtoCallState?, type metadata accessor for NCProtoLagunaConnectionRequest, type metadata accessor for NCProtoCallState);
}

BOOL NCProtoContinuityCall.hasInfo.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388]();
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2(0);
  outlined init with copy of NCProtoContactInfo?(v3 + *(int *)(v9 + 44), (uint64_t)v8, a1);
  uint64_t v10 = a3(0);
  BOOL v11 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v8, 1, v10) != 1;
  outlined destroy of NCProtoContactInfo?((uint64_t)v8, a1);
  return v11;
}

Swift::Void __swiftcall NCProtoLagunaConnectionRequest.clearCallState()()
{
}

uint64_t NCProtoContinuityCall.clearInfo()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 44);
  outlined destroy of NCProtoContactInfo?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t (*NCProtoLagunaConnectionRequest.activeConversations.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoLagunaConnectionRequest.favorites.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoLagunaConnectionRequest.favorites.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*NCProtoLagunaConnectionRequest.favorites.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoLagunaConnectionRequest.continuityCalls.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoLagunaConnectionRequest.recentCallsInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoLagunaConnectionRequest.recentCallsInfo.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*NCProtoLagunaConnectionRequest.recentCallsInfo.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoLagunaConnectionRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoLagunaConnectionRequest.unknownFields.getter(type metadata accessor for NCProtoLagunaConnectionRequest, a1);
}

uint64_t NCProtoLagunaConnectionRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoLagunaConnectionRequest.unknownFields.setter(a1, type metadata accessor for NCProtoLagunaConnectionRequest);
}

uint64_t (*NCProtoLagunaConnectionRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoLagunaConnectionRequest.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoContactInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoContactInfo>, type metadata accessor for NCProtoContactInfo, type metadata accessor for NCProtoContactInfo);
  a1[2] = v2;
  a1[3] = v2;
  a1[4] = v2;
  a1[5] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoCallInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoCallInfo>, type metadata accessor for NCProtoCallInfo, type metadata accessor for NCProtoCallInfo);
  uint64_t v3 = type metadata accessor for NCProtoLagunaConnectionRequest(0);
  UnknownStorage.init()();
  uint64_t v4 = (char *)a1 + *(int *)(v3 + 44);
  uint64_t v5 = type metadata accessor for NCProtoCallState(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v4, 1, 1, v5);
}

uint64_t (*NCProtoLagunaConnectionResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoDeviceLaunchedEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoTVLaunchedEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoCancelAddMemberEvent.conversationIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoCancelAddMemberEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoCancelAddMemberEvent, a1);
}

uint64_t type metadata accessor for NCProtoCancelAddMemberEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoCancelAddMemberEvent);
}

uint64_t NCProtoCancelAddMemberEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoCancelAddMemberEvent);
}

uint64_t (*NCProtoCancelAddMemberEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoCancelAddMemberEvent.init()@<X0>(void *a1@<X8>)
{
  return NCProtoEndedSessionEvent.init()((void (*)(void))type metadata accessor for NCProtoCancelAddMemberEvent, a1);
}

uint64_t NCProtoEndedSessionEvent.init()@<X0>(void (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t (*NCProtoEndLagunaSessionEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoPolicyInfoUpdatedEvent.policyInfos.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoPolicyInfoUpdatedEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoPolicyInfoUpdatedEvent, a1);
}

uint64_t type metadata accessor for NCProtoPolicyInfoUpdatedEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoPolicyInfoUpdatedEvent);
}

uint64_t NCProtoPolicyInfoUpdatedEvent.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoPolicyInfoUpdatedEvent);
}

uint64_t (*NCProtoPolicyInfoUpdatedEvent.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoPolicyInfoUpdatedEvent.init()@<X0>(unint64_t *a1@<X8>)
{
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for NCProtoPolicyInfoUpdatedEvent(0);
  return UnknownStorage.init()();
}

uint64_t (*NCProtoAddMemberRequest.memberToken.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoAddMemberRequest.conversationIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

void NCProtoAddMemberRequest.context.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 40);
  *(void *)a1 = *(void *)(v1 + 32);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t NCProtoAddMemberRequest.context.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 32) = *(void *)result;
  *(unsigned char *)(v1 + 40) = v2;
  return result;
}

uint64_t (*NCProtoAddMemberRequest.context.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoAddMemberRequest.associationVoucherData.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NCProtoAddMemberRequest(0) + 32));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *v1;
  }
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t type metadata accessor for NCProtoAddMemberRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoAddMemberRequest);
}

uint64_t key path getter for NCProtoAddMemberRequest.associationVoucherData : NCProtoAddMemberRequest@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NCProtoAddMemberRequest(0) + 32));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  if (v5 >> 60 == 15) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v3;
  }
  unint64_t v7 = 0xC000000000000000;
  if (v5 >> 60 != 15) {
    unint64_t v7 = v5;
  }
  *a2 = v6;
  a2[1] = v7;

  return outlined copy of Data?(v4, v5);
}

uint64_t key path setter for NCProtoAddMemberRequest.associationVoucherData : NCProtoAddMemberRequest(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for NCProtoAddMemberRequest(0) + 32));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  uint64_t result = outlined consume of Data?(v5, v6);
  *uint64_t v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t NCProtoAddMemberRequest.associationVoucherData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NCProtoAddMemberRequest(0) + 32);
  uint64_t result = outlined consume of Data?(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*NCProtoAddMemberRequest.associationVoucherData.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoAddMemberRequest(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NCProtoActiveConversation.handlesHash.modify;
}

BOOL NCProtoAddMemberRequest.hasAssociationVoucherData.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NCProtoAddMemberRequest(0) + 32) + 8) >> 60 != 15;
}

Swift::Void __swiftcall NCProtoAddMemberRequest.clearAssociationVoucherData()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NCProtoAddMemberRequest(0) + 32);
  outlined consume of Data?(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_25743E3C0;
}

uint64_t NCProtoAddMemberRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityFavorite.unknownFields.getter(type metadata accessor for NCProtoAddMemberRequest, a1);
}

uint64_t NCProtoAddMemberRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoContinuityFavorite.unknownFields.setter(a1, type metadata accessor for NCProtoAddMemberRequest);
}

uint64_t (*NCProtoAddMemberRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

unint64_t NCProtoAddMemberRequest.NearbyConversationPullContext.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 6;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t static NCProtoAddMemberRequest.NearbyConversationPullContext.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoAddMemberRequest.NearbyConversationPullContext@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoAddMemberRequest.NearbyConversationPullContext.allCases, a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NCProtoAddMemberRequest.NearbyConversationPullContext@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return NCProtoAddMemberRequest.NearbyConversationPullContext.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoAddMemberRequest.NearbyConversationPullContext(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoAddMemberRequest.NearbyConversationPullContext(void *a1, void *a2)
{
  return *a1 == *a2;
}

double NCProtoAddMemberRequest.init()@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  uint64_t v2 = type metadata accessor for NCProtoAddMemberRequest(0);
  UnknownStorage.init()();
  double result = 0.0;
  *(_OWORD *)(a1 + *(int *)(v2 + 32)) = xmmword_25743E3C0;
  return result;
}

uint64_t (*NCProtoAddMemberResponse.identifierHash.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoAddMemberResponse.policyInfos.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoAddMemberResponse.policyInfos.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*NCProtoAddMemberResponse.policyInfos.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoAddMemberResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoAddressableContact.unknownFields.getter(type metadata accessor for NCProtoAddMemberResponse, a1);
}

uint64_t type metadata accessor for NCProtoAddMemberResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoAddMemberResponse);
}

uint64_t NCProtoAddMemberResponse.unknownFields.setter(uint64_t a1)
{
  return NCProtoAddressableContact.unknownFields.setter(a1, type metadata accessor for NCProtoAddMemberResponse);
}

uint64_t (*NCProtoAddMemberResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoAddMemberResponse.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_25743E3B0;
  *(void *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for NCProtoAddMemberResponse(0);
  return UnknownStorage.init()();
}

uint64_t (*NCProtoPullLagunaSessionToTVRequest.conversationIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoPullLagunaSessionToTVRequest.reason.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoPullLagunaSessionToTVRequest.reason.getter(type metadata accessor for NCProtoPullLagunaSessionToTVRequest, a1);
}

uint64_t type metadata accessor for NCProtoPullLagunaSessionToTVRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoPullLagunaSessionToTVRequest);
}

uint64_t key path getter for NCProtoPullLagunaSessionToTVRequest.reason : NCProtoPullLagunaSessionToTVRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for NCProtoPullLagunaSessionToTVRequest.reason : NCProtoPullLagunaSessionToTVRequest(a1, type metadata accessor for NCProtoPullLagunaSessionToTVRequest, a2);
}

uint64_t key path setter for NCProtoPullLagunaSessionToTVRequest.reason : NCProtoPullLagunaSessionToTVRequest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoPullLagunaSessionToTVRequest.reason : NCProtoPullLagunaSessionToTVRequest(a1, a2, a3, a4, type metadata accessor for NCProtoPullLagunaSessionToTVRequest);
}

uint64_t NCProtoPullLagunaSessionToTVRequest.reason.setter(uint64_t *a1)
{
  return NCProtoPullLagunaSessionToTVRequest.reason.setter(a1, type metadata accessor for NCProtoPullLagunaSessionToTVRequest);
}

uint64_t (*NCProtoPullLagunaSessionToTVRequest.reason.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoPullLagunaSessionToTVRequest(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 9))
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  else
  {
    char v7 = *((unsigned char *)v4 + 8);
    uint64_t v5 = *v4;
    char v6 = v7 & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

BOOL NCProtoPullLagunaSessionToTVRequest.hasReason.getter()
{
  return NCProtoPullLagunaSessionToTVRequest.hasReason.getter(type metadata accessor for NCProtoPullLagunaSessionToTVRequest);
}

Swift::Void __swiftcall NCProtoPullLagunaSessionToTVRequest.clearReason()()
{
}

uint64_t NCProtoPullLagunaSessionToTVRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoPullLagunaSessionToTVRequest, a1);
}

uint64_t NCProtoPullLagunaSessionToTVRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoPullLagunaSessionToTVRequest);
}

uint64_t (*NCProtoPullLagunaSessionToTVRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t static NCProtoPullLagunaSessionToTVRequest.Reason.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoPullLagunaSessionToTVRequest.Reason@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoPullLagunaSessionToTVRequest.Reason.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoPullLagunaSessionToTVRequest.Reason(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t NCProtoPullLagunaSessionToTVRequest.init()@<X0>(void *a1@<X8>)
{
  return NCProtoPullLagunaSessionToTVRequest.init()(type metadata accessor for NCProtoPullLagunaSessionToTVRequest, a1);
}

uint64_t (*NCProtoPullLagunaSessionToTVResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoTransferActiveConversationRequest.activeConversationUuidString.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoTransferActiveConversationRequest.isAudioEnabled.getter()
{
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.getter(type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t type metadata accessor for NCProtoTransferActiveConversationRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoTransferActiveConversationRequest);
}

uint64_t key path getter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(a1, type metadata accessor for NCProtoTransferActiveConversationRequest, a2);
}

uint64_t key path setter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(a1, a2, a3, a4, type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t NCProtoTransferActiveConversationRequest.isAudioEnabled.setter(char a1)
{
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.setter(a1, type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t (*NCProtoTransferActiveConversationRequest.isAudioEnabled.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoTransferActiveConversationRequest(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return NCProtoContinuityCall.isMuted.modify;
}

BOOL NCProtoTransferActiveConversationRequest.hasIsAudioEnabled.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoTransferActiveConversationRequest(0) + 24)) != 2;
}

Swift::Void __swiftcall NCProtoTransferActiveConversationRequest.clearIsAudioEnabled()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoTransferActiveConversationRequest(0) + 24)) = 2;
}

uint64_t NCProtoTransferActiveConversationRequest.isVideoEnabled.getter()
{
  return NCProtoTransferActiveConversationRequest.isVideoEnabled.getter(type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t key path getter for NCProtoTransferActiveConversationRequest.isVideoEnabled : NCProtoTransferActiveConversationRequest@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for NCProtoTransferActiveConversationRequest.isVideoEnabled : NCProtoTransferActiveConversationRequest(a1, type metadata accessor for NCProtoTransferActiveConversationRequest, a2);
}

uint64_t key path setter for NCProtoTransferActiveConversationRequest.isVideoEnabled : NCProtoTransferActiveConversationRequest(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoTransferActiveConversationRequest.isVideoEnabled : NCProtoTransferActiveConversationRequest(a1, a2, a3, a4, type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t NCProtoTransferActiveConversationRequest.isVideoEnabled.setter(char a1)
{
  return NCProtoTransferActiveConversationRequest.isVideoEnabled.setter(a1, type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t (*NCProtoTransferActiveConversationRequest.isVideoEnabled.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoTransferActiveConversationRequest(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return NCProtoContinuityCall.isMuted.modify;
}

BOOL NCProtoTransferActiveConversationRequest.hasIsVideoEnabled.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoTransferActiveConversationRequest(0) + 28)) != 2;
}

Swift::Void __swiftcall NCProtoTransferActiveConversationRequest.clearIsVideoEnabled()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoTransferActiveConversationRequest(0) + 28)) = 2;
}

uint64_t NCProtoTransferActiveConversationRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoTransferActiveConversationRequest, a1);
}

uint64_t NCProtoTransferActiveConversationRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t (*NCProtoTransferActiveConversationRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoTransferActiveConversationRequest.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t active = type metadata accessor for NCProtoTransferActiveConversationRequest(0);
  uint64_t result = UnknownStorage.init()();
  *((unsigned char *)a1 + *(int *)(active + 24)) = 2;
  *((unsigned char *)a1 + *(int *)(active + 28)) = 2;
  return result;
}

uint64_t (*NCProtoTransferActiveConversationResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoTransferContinuityCallRequest.uuidString.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoTransferContinuityCallRequest.isAudioEnabled.getter()
{
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.getter(type metadata accessor for NCProtoTransferContinuityCallRequest);
}

uint64_t NCProtoTransferActiveConversationRequest.isAudioEnabled.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 24)) & 1;
}

uint64_t type metadata accessor for NCProtoTransferContinuityCallRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoTransferContinuityCallRequest);
}

uint64_t key path getter for NCProtoTransferContinuityCallRequest.isAudioEnabled : NCProtoTransferContinuityCallRequest@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(a1, type metadata accessor for NCProtoTransferContinuityCallRequest, a2);
}

uint64_t key path getter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, unsigned char *a3@<X8>)
{
  uint64_t result = a2(0);
  *a3 = *(unsigned char *)(a1 + *(int *)(result + 24)) & 1;
  return result;
}

uint64_t key path setter for NCProtoTransferContinuityCallRequest.isAudioEnabled : NCProtoTransferContinuityCallRequest(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(a1, a2, a3, a4, type metadata accessor for NCProtoTransferContinuityCallRequest);
}

uint64_t key path setter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  char v6 = *a1;
  uint64_t result = a5(0);
  *(unsigned char *)(a2 + *(int *)(result + 24)) = v6;
  return result;
}

uint64_t NCProtoTransferContinuityCallRequest.isAudioEnabled.setter(char a1)
{
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.setter(a1, type metadata accessor for NCProtoTransferContinuityCallRequest);
}

uint64_t NCProtoTransferActiveConversationRequest.isAudioEnabled.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*NCProtoTransferContinuityCallRequest.isAudioEnabled.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoTransferContinuityCallRequest(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return NCProtoContinuityCall.isMuted.modify;
}

BOOL NCProtoTransferContinuityCallRequest.hasIsAudioEnabled.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoTransferContinuityCallRequest(0) + 24)) != 2;
}

Swift::Void __swiftcall NCProtoTransferContinuityCallRequest.clearIsAudioEnabled()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoTransferContinuityCallRequest(0) + 24)) = 2;
}

uint64_t NCProtoTransferContinuityCallRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoTransferContinuityCallRequest, a1);
}

uint64_t NCProtoTransferContinuityCallRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoTransferContinuityCallRequest);
}

uint64_t (*NCProtoTransferContinuityCallRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoTransferContinuityCallRequest.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v2 = type metadata accessor for NCProtoTransferContinuityCallRequest(0);
  uint64_t result = UnknownStorage.init()();
  *((unsigned char *)a1 + *(int *)(v2 + 24)) = 2;
  return result;
}

uint64_t (*NCProtoTransferContinuityCallResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoStartLagunaSessionRequest.recentCallFetchTypes.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoStartLagunaSessionRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoStartLagunaSessionRequest, a1);
}

uint64_t type metadata accessor for NCProtoStartLagunaSessionRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoStartLagunaSessionRequest);
}

uint64_t NCProtoStartLagunaSessionRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoStartLagunaSessionRequest);
}

uint64_t (*NCProtoStartLagunaSessionRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t static NCProtoStartLagunaSessionRequest.RecentCallFetchType.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoStartLagunaSessionRequest.RecentCallFetchType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t NCProtoStartLagunaSessionRequest.init()@<X0>(void *a1@<X8>)
{
  return NCProtoFavoritesDidChangeEvent.init()((void (*)(void))type metadata accessor for NCProtoStartLagunaSessionRequest, a1);
}

uint64_t (*NCProtoSenderIdentity.shortName.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoSenderIdentity.name.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoSenderIdentity.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoAddressableContact.unknownFields.getter(type metadata accessor for NCProtoSenderIdentity, a1);
}

uint64_t NCProtoSenderIdentity.unknownFields.setter(uint64_t a1)
{
  return NCProtoAddressableContact.unknownFields.setter(a1, type metadata accessor for NCProtoSenderIdentity);
}

uint64_t (*NCProtoSenderIdentity.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoSenderIdentity.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  type metadata accessor for NCProtoSenderIdentity(0);
  return UnknownStorage.init()();
}

uint64_t NCProtoCallInfo.callerIDSubstring.getter()
{
  return NCProtoActiveConversation.uuidString.getter(type metadata accessor for NCProtoCallInfo);
}

uint64_t key path getter for NCProtoCallInfo.callerIDSubstring : NCProtoCallInfo@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(a1, type metadata accessor for NCProtoCallInfo, a2);
}

uint64_t key path setter for NCProtoCallInfo.callerIDSubstring : NCProtoCallInfo(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(a1, a2, a3, a4, type metadata accessor for NCProtoCallInfo);
}

uint64_t NCProtoCallInfo.callerIDSubstring.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoActiveConversation.uuidString.setter(a1, a2, type metadata accessor for NCProtoCallInfo);
}

uint64_t (*NCProtoCallInfo.callerIDSubstring.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoCallInfo(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoCallInfo.hasCallerIDSubstring.getter()
{
  return NCProtoActiveConversation.hasUuidString.getter(type metadata accessor for NCProtoCallInfo);
}

Swift::Void __swiftcall NCProtoCallInfo.clearCallerIDSubstring()()
{
}

uint64_t NCProtoCallInfo.callIdentifier.getter()
{
  return NCProtoActiveConversation.displayName.getter(type metadata accessor for NCProtoCallInfo);
}

uint64_t NCProtoActiveConversation.displayName.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 28));
  if (v2[1]) {
    uint64_t v3 = *v2;
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t key path getter for NCProtoCallInfo.callIdentifier : NCProtoCallInfo@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for NCProtoActiveConversation.displayName : NCProtoActiveConversation(a1, type metadata accessor for NCProtoCallInfo, a2);
}

uint64_t key path getter for NCProtoActiveConversation.displayName : NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, void *a3@<X8>)
{
  unint64_t v4 = (uint64_t *)(a1 + *(int *)(a2(0) + 28));
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *a3 = v6;
  a3[1] = v7;

  return swift_bridgeObjectRetain();
}

uint64_t key path setter for NCProtoCallInfo.callIdentifier : NCProtoCallInfo(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoActiveConversation.displayName : NCProtoActiveConversation(a1, a2, a3, a4, type metadata accessor for NCProtoCallInfo);
}

uint64_t key path setter for NCProtoActiveConversation.displayName : NCProtoActiveConversation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = (void *)(a2 + *(int *)(a5(0) + 28));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v7 = v6;
  v7[1] = v5;
  return result;
}

uint64_t NCProtoCallInfo.callIdentifier.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoActiveConversation.displayName.setter(a1, a2, type metadata accessor for NCProtoCallInfo);
}

uint64_t NCProtoActiveConversation.displayName.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3(0) + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*NCProtoCallInfo.callIdentifier.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoCallInfo(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoCallInfo.hasCallIdentifier.getter()
{
  return NCProtoActiveConversation.hasDisplayName.getter(type metadata accessor for NCProtoCallInfo);
}

BOOL NCProtoActiveConversation.hasDisplayName.getter(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0) + 28) + 8) != 0;
}

Swift::Void __swiftcall NCProtoCallInfo.clearCallIdentifier()()
{
}

uint64_t NCProtoActiveConversation.clearDisplayName()(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)(v1 + *(int *)(a1(0) + 28));
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t NCProtoCallInfo.displayName.getter()
{
  return NCProtoContinuityCall.conversationUuidString.getter(type metadata accessor for NCProtoCallInfo);
}

uint64_t NCProtoContinuityCall.conversationUuidString.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 32));
  if (v2[1]) {
    uint64_t v3 = *v2;
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t key path getter for NCProtoCallInfo.displayName : NCProtoCallInfo@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.conversationUuidString : NCProtoContinuityCall(a1, type metadata accessor for NCProtoCallInfo, a2);
}

uint64_t key path getter for NCProtoContinuityCall.conversationUuidString : NCProtoContinuityCall@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, void *a3@<X8>)
{
  unint64_t v4 = (uint64_t *)(a1 + *(int *)(a2(0) + 32));
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *a3 = v6;
  a3[1] = v7;

  return swift_bridgeObjectRetain();
}

uint64_t key path setter for NCProtoCallInfo.displayName : NCProtoCallInfo(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.conversationUuidString : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoCallInfo);
}

uint64_t key path setter for NCProtoContinuityCall.conversationUuidString : NCProtoContinuityCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = (void *)(a2 + *(int *)(a5(0) + 32));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v7 = v6;
  v7[1] = v5;
  return result;
}

uint64_t NCProtoCallInfo.displayName.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoContinuityCall.conversationUuidString.setter(a1, a2, type metadata accessor for NCProtoCallInfo);
}

uint64_t NCProtoContinuityCall.conversationUuidString.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3(0) + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*NCProtoCallInfo.displayName.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoCallInfo(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoCallInfo.hasDisplayName.getter()
{
  return NCProtoContinuityCall.hasConversationUuidString.getter(type metadata accessor for NCProtoCallInfo);
}

BOOL NCProtoContinuityCall.hasConversationUuidString.getter(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0) + 32) + 8) != 0;
}

Swift::Void __swiftcall NCProtoCallInfo.clearDisplayName()()
{
}

uint64_t NCProtoContinuityCall.clearConversationUuidString()(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)(v1 + *(int *)(a1(0) + 32));
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t NCProtoCallInfo.isBranded.getter()
{
  return NCProtoContinuityCall.isMuted.getter(type metadata accessor for NCProtoCallInfo);
}

uint64_t NCProtoContinuityCall.isMuted.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 36)) & 1;
}

uint64_t key path getter for NCProtoCallInfo.isBranded : NCProtoCallInfo@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.isMuted : NCProtoContinuityCall(a1, type metadata accessor for NCProtoCallInfo, a2);
}

uint64_t key path getter for NCProtoContinuityCall.isMuted : NCProtoContinuityCall@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, unsigned char *a3@<X8>)
{
  uint64_t result = a2(0);
  *a3 = *(unsigned char *)(a1 + *(int *)(result + 36)) & 1;
  return result;
}

uint64_t key path setter for NCProtoCallInfo.isBranded : NCProtoCallInfo(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.isMuted : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoCallInfo);
}

uint64_t key path setter for NCProtoContinuityCall.isMuted : NCProtoContinuityCall(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  char v6 = *a1;
  uint64_t result = a5(0);
  *(unsigned char *)(a2 + *(int *)(result + 36)) = v6;
  return result;
}

uint64_t NCProtoCallInfo.isBranded.setter(char a1)
{
  return NCProtoContinuityCall.isMuted.setter(a1, type metadata accessor for NCProtoCallInfo);
}

uint64_t NCProtoContinuityCall.isMuted.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*NCProtoCallInfo.isBranded.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoCallInfo(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return NCProtoContinuityCall.isMuted.modify;
}

BOOL NCProtoCallInfo.hasIsBranded.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoCallInfo(0) + 36)) != 2;
}

Swift::Void __swiftcall NCProtoCallInfo.clearIsBranded()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoCallInfo(0) + 36)) = 2;
}

uint64_t NCProtoCallInfo.contactIdentifiersByHandle.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoCallInfo.contactIdentifiersByHandle.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*NCProtoCallInfo.contactIdentifiersByHandle.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoCallInfo.senderIdentity.getter@<X0>(void *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
  MEMORY[0x270FA5388]();
  unint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NCProtoCallInfo(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 40), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
  uint64_t v6 = type metadata accessor for NCProtoSenderIdentity(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, (uint64_t)a1, type metadata accessor for NCProtoSenderIdentity);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  UnknownStorage.init()();
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
}

uint64_t key path getter for NCProtoCallInfo.senderIdentity : NCProtoCallInfo@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
  MEMORY[0x270FA5388]();
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NCProtoCallInfo(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
  uint64_t v7 = type metadata accessor for NCProtoSenderIdentity(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)a2, type metadata accessor for NCProtoSenderIdentity);
  }
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  UnknownStorage.init()();
  return outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
}

uint64_t key path setter for NCProtoCallInfo.senderIdentity : NCProtoCallInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NCProtoSenderIdentity(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v7, type metadata accessor for NCProtoSenderIdentity);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for NCProtoCallInfo(0) + 40);
  outlined destroy of NCProtoContactInfo?(v8, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, v8, type metadata accessor for NCProtoSenderIdentity);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t NCProtoCallInfo.senderIdentity.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NCProtoCallInfo(0) + 40);
  outlined destroy of NCProtoContactInfo?(v3, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
  outlined init with take of NCProtoContactInfo(a1, v3, type metadata accessor for NCProtoSenderIdentity);
  uint64_t v4 = type metadata accessor for NCProtoSenderIdentity(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 0, 1, v4);
}

void (*NCProtoCallInfo.senderIdentity.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for NCProtoSenderIdentity(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for NCProtoCallInfo(0) + 40);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of NCProtoContactInfo?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0xE000000000000000;
    v10[2] = 0;
    v10[3] = 0xE000000000000000;
    UnknownStorage.init()();
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for NCProtoSenderIdentity);
  }
  return NCProtoCallInfo.senderIdentity.modify;
}

void NCProtoCallInfo.senderIdentity.modify(uint64_t a1, char a2)
{
}

BOOL NCProtoCallInfo.hasSenderIdentity.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
  MEMORY[0x270FA5388]();
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for NCProtoCallInfo(0);
  outlined init with copy of NCProtoContactInfo?(v0 + *(int *)(v3 + 40), (uint64_t)v2, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
  uint64_t v4 = type metadata accessor for NCProtoSenderIdentity(0);
  BOOL v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v2, 1, v4) != 1;
  outlined destroy of NCProtoContactInfo?((uint64_t)v2, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
  return v5;
}

Swift::Void __swiftcall NCProtoCallInfo.clearSenderIdentity()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NCProtoCallInfo(0) + 40);
  outlined destroy of NCProtoContactInfo?(v1, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
  uint64_t v2 = type metadata accessor for NCProtoSenderIdentity(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  v3(v1, 1, 1, v2);
}

uint64_t NCProtoCallInfo.handlesHash.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NCProtoCallInfo(0) + 44));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *v1;
  }
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t key path getter for NCProtoCallInfo.handlesHash : NCProtoCallInfo@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NCProtoCallInfo(0) + 44));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  if (v5 >> 60 == 15) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v3;
  }
  unint64_t v7 = 0xC000000000000000;
  if (v5 >> 60 != 15) {
    unint64_t v7 = v5;
  }
  *a2 = v6;
  a2[1] = v7;

  return outlined copy of Data?(v4, v5);
}

uint64_t key path setter for NCProtoCallInfo.handlesHash : NCProtoCallInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for NCProtoCallInfo(0) + 44));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  uint64_t result = outlined consume of Data?(v5, v6);
  *uint64_t v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t NCProtoCallInfo.handlesHash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NCProtoCallInfo(0) + 44);
  uint64_t result = outlined consume of Data?(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*NCProtoCallInfo.handlesHash.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoCallInfo(0) + 44);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NCProtoActiveConversation.handlesHash.modify;
}

BOOL NCProtoCallInfo.hasHandlesHash.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NCProtoCallInfo(0) + 44) + 8) >> 60 != 15;
}

Swift::Void __swiftcall NCProtoCallInfo.clearHandlesHash()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NCProtoCallInfo(0) + 44);
  outlined consume of Data?(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_25743E3C0;
}

uint64_t NCProtoCallInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoCallInfo, a1);
}

uint64_t NCProtoCallInfo.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoCallInfo);
}

uint64_t (*NCProtoCallInfo.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoStartLagunaSessionResponse.recentCalls.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoStartLagunaSessionResponse.contactInfos.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoStartLagunaSessionResponse.activeConversations.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoStartLagunaSessionResponse.favorites.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoStartLagunaSessionResponse.continuityCalls.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoStartLagunaSessionResponse.recentCallsInfo.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoStartLagunaSessionResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoLagunaConnectionRequest.unknownFields.getter(type metadata accessor for NCProtoStartLagunaSessionResponse, a1);
}

uint64_t NCProtoLagunaConnectionRequest.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t type metadata accessor for NCProtoStartLagunaSessionResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoStartLagunaSessionResponse);
}

uint64_t NCProtoStartLagunaSessionResponse.unknownFields.setter(uint64_t a1)
{
  return NCProtoLagunaConnectionRequest.unknownFields.setter(a1, type metadata accessor for NCProtoStartLagunaSessionResponse);
}

uint64_t NCProtoLagunaConnectionRequest.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*NCProtoStartLagunaSessionResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoStartLagunaSessionResponse.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoContactInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoContactInfo>, type metadata accessor for NCProtoContactInfo, type metadata accessor for NCProtoContactInfo);
  a1[2] = v2;
  a1[3] = v2;
  a1[4] = v2;
  a1[5] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoCallInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoCallInfo>, type metadata accessor for NCProtoCallInfo, type metadata accessor for NCProtoCallInfo);
  type metadata accessor for NCProtoStartLagunaSessionResponse(0);
  return UnknownStorage.init()();
}

uint64_t NCProtoStartConversationRequest.avMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for NCProtoStartConversationRequest(0);
  uint64_t v4 = (uint64_t *)(v1 + *(int *)(result + 20));
  if (*((unsigned char *)v4 + 9))
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  else
  {
    char v7 = *((unsigned char *)v4 + 8);
    uint64_t v5 = *v4;
    char v6 = v7 & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return result;
}

uint64_t type metadata accessor for NCProtoStartConversationRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoStartConversationRequest);
}

uint64_t key path getter for NCProtoStartConversationRequest.avMode : NCProtoStartConversationRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = type metadata accessor for NCProtoStartConversationRequest(0);
  uint64_t v5 = (uint64_t *)(a1 + *(int *)(result + 20));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)v5 + 8);
  int v8 = *((unsigned __int8 *)v5 + 9);
  if (v8) {
    uint64_t v6 = 0;
  }
  *(void *)a2 = v6;
  *(unsigned char *)(a2 + 8) = (v8 | v7) & 1;
  return result;
}

uint64_t key path setter for NCProtoStartConversationRequest.avMode : NCProtoStartConversationRequest(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t result = type metadata accessor for NCProtoStartConversationRequest(0);
  uint64_t v6 = a2 + *(int *)(result + 20);
  *(void *)uint64_t v6 = v3;
  *(unsigned char *)(v6 + 8) = v4;
  *(unsigned char *)(v6 + 9) = 0;
  return result;
}

uint64_t NCProtoStartConversationRequest.avMode.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = type metadata accessor for NCProtoStartConversationRequest(0);
  uint64_t v5 = v1 + *(int *)(result + 20);
  *(void *)uint64_t v5 = v2;
  *(unsigned char *)(v5 + 8) = v3;
  *(unsigned char *)(v5 + 9) = 0;
  return result;
}

uint64_t (*NCProtoStartConversationRequest.avMode.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoStartConversationRequest(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  char v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 9))
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  else
  {
    char v7 = *((unsigned char *)v4 + 8);
    uint64_t v5 = *v4;
    char v6 = v7 & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

BOOL NCProtoStartConversationRequest.hasAvMode.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoStartConversationRequest(0) + 20) + 9) & 1) == 0;
}

Swift::Void __swiftcall NCProtoStartConversationRequest.clearAvMode()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NCProtoStartConversationRequest(0) + 20);
  *(void *)uint64_t v1 = 0;
  *(_WORD *)(v1 + 8) = 256;
}

uint64_t (*NCProtoStartConversationRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoStartConversationRequest.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = type metadata accessor for NCProtoStartConversationRequest(0);
  uint64_t v3 = a1 + *(int *)(result + 20);
  *(void *)uint64_t v3 = 0;
  *(_WORD *)(v3 + 8) = 256;
  return result;
}

uint64_t (*NCProtoStartConversationResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoJoinActiveConversationRequest.activeConversationUuidString.getter()
{
  return NCProtoContinuityCall.uuidString.getter(type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t NCProtoContinuityCall.uuidString.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 20));
  if (v2[1]) {
    uint64_t v3 = *v2;
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t type metadata accessor for NCProtoJoinActiveConversationRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoJoinActiveConversationRequest);
}

uint64_t key path getter for NCProtoJoinActiveConversationRequest.activeConversationUuidString : NCProtoJoinActiveConversationRequest@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, type metadata accessor for NCProtoJoinActiveConversationRequest, a2);
}

uint64_t key path getter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, void *a3@<X8>)
{
  char v4 = (uint64_t *)(a1 + *(int *)(a2(0) + 20));
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *a3 = v6;
  a3[1] = v7;

  return swift_bridgeObjectRetain();
}

uint64_t key path setter for NCProtoJoinActiveConversationRequest.activeConversationUuidString : NCProtoJoinActiveConversationRequest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t key path setter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = (void *)(a2 + *(int *)(a5(0) + 20));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v7 = v6;
  v7[1] = v5;
  return result;
}

uint64_t NCProtoJoinActiveConversationRequest.activeConversationUuidString.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoContinuityCall.uuidString.setter(a1, a2, type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t NCProtoContinuityCall.uuidString.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3(0) + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*NCProtoJoinActiveConversationRequest.activeConversationUuidString.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoJoinActiveConversationRequest(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  char v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoJoinActiveConversationRequest.hasActiveConversationUuidString.getter()
{
  return NCProtoContinuityCall.hasUuidString.getter(type metadata accessor for NCProtoJoinActiveConversationRequest);
}

BOOL NCProtoContinuityCall.hasUuidString.getter(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0) + 20) + 8) != 0;
}

Swift::Void __swiftcall NCProtoJoinActiveConversationRequest.clearActiveConversationUuidString()()
{
}

uint64_t NCProtoContinuityCall.clearUuidString()(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)(v1 + *(int *)(a1(0) + 20));
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t NCProtoJoinActiveConversationRequest.isAudioEnabled.getter()
{
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.getter(type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t key path getter for NCProtoJoinActiveConversationRequest.isAudioEnabled : NCProtoJoinActiveConversationRequest@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(a1, type metadata accessor for NCProtoJoinActiveConversationRequest, a2);
}

uint64_t key path setter for NCProtoJoinActiveConversationRequest.isAudioEnabled : NCProtoJoinActiveConversationRequest(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(a1, a2, a3, a4, type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t NCProtoJoinActiveConversationRequest.isAudioEnabled.setter(char a1)
{
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.setter(a1, type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t (*NCProtoJoinActiveConversationRequest.isAudioEnabled.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoJoinActiveConversationRequest(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return NCProtoContinuityCall.isMuted.modify;
}

BOOL NCProtoJoinActiveConversationRequest.hasIsAudioEnabled.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoJoinActiveConversationRequest(0) + 24)) != 2;
}

Swift::Void __swiftcall NCProtoJoinActiveConversationRequest.clearIsAudioEnabled()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoJoinActiveConversationRequest(0) + 24)) = 2;
}

uint64_t NCProtoJoinActiveConversationRequest.isVideoEnabled.getter()
{
  return NCProtoTransferActiveConversationRequest.isVideoEnabled.getter(type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t NCProtoTransferActiveConversationRequest.isVideoEnabled.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 28)) & 1;
}

uint64_t key path getter for NCProtoJoinActiveConversationRequest.isVideoEnabled : NCProtoJoinActiveConversationRequest@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for NCProtoTransferActiveConversationRequest.isVideoEnabled : NCProtoTransferActiveConversationRequest(a1, type metadata accessor for NCProtoJoinActiveConversationRequest, a2);
}

uint64_t key path getter for NCProtoTransferActiveConversationRequest.isVideoEnabled : NCProtoTransferActiveConversationRequest@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, unsigned char *a3@<X8>)
{
  uint64_t result = a2(0);
  *a3 = *(unsigned char *)(a1 + *(int *)(result + 28)) & 1;
  return result;
}

uint64_t key path setter for NCProtoJoinActiveConversationRequest.isVideoEnabled : NCProtoJoinActiveConversationRequest(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoTransferActiveConversationRequest.isVideoEnabled : NCProtoTransferActiveConversationRequest(a1, a2, a3, a4, type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t key path setter for NCProtoTransferActiveConversationRequest.isVideoEnabled : NCProtoTransferActiveConversationRequest(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  char v6 = *a1;
  uint64_t result = a5(0);
  *(unsigned char *)(a2 + *(int *)(result + 28)) = v6;
  return result;
}

uint64_t NCProtoJoinActiveConversationRequest.isVideoEnabled.setter(char a1)
{
  return NCProtoTransferActiveConversationRequest.isVideoEnabled.setter(a1, type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t NCProtoTransferActiveConversationRequest.isVideoEnabled.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*NCProtoJoinActiveConversationRequest.isVideoEnabled.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoJoinActiveConversationRequest(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return NCProtoContinuityCall.isMuted.modify;
}

BOOL NCProtoJoinActiveConversationRequest.hasIsVideoEnabled.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoJoinActiveConversationRequest(0) + 28)) != 2;
}

Swift::Void __swiftcall NCProtoJoinActiveConversationRequest.clearIsVideoEnabled()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoJoinActiveConversationRequest(0) + 28)) = 2;
}

uint64_t (*NCProtoJoinActiveConversationRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

int *NCProtoJoinActiveConversationRequest.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for NCProtoJoinActiveConversationRequest(0);
  uint64_t v3 = (void *)(a1 + result[5]);
  *uint64_t v3 = 0;
  v3[1] = 0;
  *(unsigned char *)(a1 + result[6]) = 2;
  *(unsigned char *)(a1 + result[7]) = 2;
  return result;
}

uint64_t (*NCProtoJoinActiveConversationResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoCreateLinkConversationRequest.conversationURLString.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoCreateLinkConversationRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoCreateLinkConversationRequest, a1);
}

uint64_t type metadata accessor for NCProtoCreateLinkConversationRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoCreateLinkConversationRequest);
}

uint64_t NCProtoCreateLinkConversationRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoCreateLinkConversationRequest);
}

uint64_t (*NCProtoCreateLinkConversationRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoCreateLinkConversationRequest.init()@<X0>(void *a1@<X8>)
{
  return NCProtoEndedSessionEvent.init()((void (*)(void))type metadata accessor for NCProtoCreateLinkConversationRequest, a1);
}

uint64_t NCProtoCreateLinkConversationResponse.uuidString.getter()
{
  return NCProtoContinuityCall.uuidString.getter(type metadata accessor for NCProtoCreateLinkConversationResponse);
}

uint64_t type metadata accessor for NCProtoCreateLinkConversationResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoCreateLinkConversationResponse);
}

uint64_t key path getter for NCProtoCreateLinkConversationResponse.uuidString : NCProtoCreateLinkConversationResponse@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, type metadata accessor for NCProtoCreateLinkConversationResponse, a2);
}

uint64_t key path setter for NCProtoCreateLinkConversationResponse.uuidString : NCProtoCreateLinkConversationResponse(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoCreateLinkConversationResponse);
}

uint64_t NCProtoCreateLinkConversationResponse.uuidString.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoContinuityCall.uuidString.setter(a1, a2, type metadata accessor for NCProtoCreateLinkConversationResponse);
}

uint64_t (*NCProtoCreateLinkConversationResponse.uuidString.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoCreateLinkConversationResponse(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  char v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoCreateLinkConversationResponse.hasUuidString.getter()
{
  return NCProtoContinuityCall.hasUuidString.getter(type metadata accessor for NCProtoCreateLinkConversationResponse);
}

Swift::Void __swiftcall NCProtoCreateLinkConversationResponse.clearUuidString()()
{
}

uint64_t (*NCProtoCreateLinkConversationResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoCreateLinkConversationResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return NCProtoCreateLinkConversationResponse.init()(type metadata accessor for NCProtoCreateLinkConversationResponse, a1);
}

uint64_t NCProtoLinkConversationSendLetMeInRequest.uuidString.getter()
{
  return NCProtoContinuityCall.uuidString.getter(type metadata accessor for NCProtoLinkConversationSendLetMeInRequest);
}

uint64_t type metadata accessor for NCProtoLinkConversationSendLetMeInRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoLinkConversationSendLetMeInRequest);
}

uint64_t key path getter for NCProtoLinkConversationSendLetMeInRequest.uuidString : NCProtoLinkConversationSendLetMeInRequest@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, type metadata accessor for NCProtoLinkConversationSendLetMeInRequest, a2);
}

uint64_t key path setter for NCProtoLinkConversationSendLetMeInRequest.uuidString : NCProtoLinkConversationSendLetMeInRequest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoLinkConversationSendLetMeInRequest);
}

uint64_t NCProtoLinkConversationSendLetMeInRequest.uuidString.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoContinuityCall.uuidString.setter(a1, a2, type metadata accessor for NCProtoLinkConversationSendLetMeInRequest);
}

uint64_t (*NCProtoLinkConversationSendLetMeInRequest.uuidString.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoLinkConversationSendLetMeInRequest(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  char v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoLinkConversationSendLetMeInRequest.hasUuidString.getter()
{
  return NCProtoContinuityCall.hasUuidString.getter(type metadata accessor for NCProtoLinkConversationSendLetMeInRequest);
}

Swift::Void __swiftcall NCProtoLinkConversationSendLetMeInRequest.clearUuidString()()
{
}

uint64_t (*NCProtoLinkConversationSendLetMeInRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoLinkConversationSendLetMeInRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return NCProtoCreateLinkConversationResponse.init()(type metadata accessor for NCProtoLinkConversationSendLetMeInRequest, a1);
}

uint64_t NCProtoCreateLinkConversationResponse.init()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = a1(0);
  unint64_t v5 = (void *)(a2 + *(int *)(result + 20));
  *unint64_t v5 = 0;
  v5[1] = 0;
  return result;
}

uint64_t (*NCProtoLinkConversationSendLetMeInResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoLinkConversationCancelRequest.uuidString.getter()
{
  return NCProtoContinuityCall.uuidString.getter(type metadata accessor for NCProtoLinkConversationCancelRequest);
}

uint64_t type metadata accessor for NCProtoLinkConversationCancelRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoLinkConversationCancelRequest);
}

uint64_t key path getter for NCProtoLinkConversationCancelRequest.uuidString : NCProtoLinkConversationCancelRequest@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, type metadata accessor for NCProtoLinkConversationCancelRequest, a2);
}

uint64_t key path setter for NCProtoLinkConversationCancelRequest.uuidString : NCProtoLinkConversationCancelRequest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoLinkConversationCancelRequest);
}

uint64_t NCProtoLinkConversationCancelRequest.uuidString.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoContinuityCall.uuidString.setter(a1, a2, type metadata accessor for NCProtoLinkConversationCancelRequest);
}

uint64_t (*NCProtoLinkConversationCancelRequest.uuidString.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoLinkConversationCancelRequest(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  char v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoLinkConversationCancelRequest.hasUuidString.getter()
{
  return NCProtoContinuityCall.hasUuidString.getter(type metadata accessor for NCProtoLinkConversationCancelRequest);
}

Swift::Void __swiftcall NCProtoLinkConversationCancelRequest.clearUuidString()()
{
}

uint64_t (*NCProtoLinkConversationCancelRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoLinkConversationCancelRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return NCProtoCreateLinkConversationResponse.init()(type metadata accessor for NCProtoLinkConversationCancelRequest, a1);
}

uint64_t (*NCProtoLinkConversationCancelResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoDeclineContinuityCallRequest.uuidString.getter()
{
  return NCProtoContinuityCall.uuidString.getter(type metadata accessor for NCProtoDeclineContinuityCallRequest);
}

uint64_t type metadata accessor for NCProtoDeclineContinuityCallRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoDeclineContinuityCallRequest);
}

uint64_t key path getter for NCProtoDeclineContinuityCallRequest.uuidString : NCProtoDeclineContinuityCallRequest@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, type metadata accessor for NCProtoDeclineContinuityCallRequest, a2);
}

uint64_t key path setter for NCProtoDeclineContinuityCallRequest.uuidString : NCProtoDeclineContinuityCallRequest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoDeclineContinuityCallRequest);
}

uint64_t NCProtoDeclineContinuityCallRequest.uuidString.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoContinuityCall.uuidString.setter(a1, a2, type metadata accessor for NCProtoDeclineContinuityCallRequest);
}

uint64_t (*NCProtoDeclineContinuityCallRequest.uuidString.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoDeclineContinuityCallRequest(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  char v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoDeclineContinuityCallRequest.hasUuidString.getter()
{
  return NCProtoContinuityCall.hasUuidString.getter(type metadata accessor for NCProtoDeclineContinuityCallRequest);
}

Swift::Void __swiftcall NCProtoDeclineContinuityCallRequest.clearUuidString()()
{
}

uint64_t (*NCProtoDeclineContinuityCallRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoDeclineContinuityCallRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return NCProtoCreateLinkConversationResponse.init()(type metadata accessor for NCProtoDeclineContinuityCallRequest, a1);
}

uint64_t (*NCProtoDeclineContinuityCallResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoGetAddressableContactsRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoGetAddressableContactsResponse.contacts.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoGetAddressableContactsResponse.contactSortOrder.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoGetAddressableContactsResponse(0) + 24));
  if (v1[8]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t type metadata accessor for NCProtoGetAddressableContactsResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoGetAddressableContactsResponse);
}

uint64_t key path getter for NCProtoGetAddressableContactsResponse.contactSortOrder : NCProtoGetAddressableContactsResponse@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = type metadata accessor for NCProtoGetAddressableContactsResponse(0);
  unint64_t v5 = (uint64_t *)(a1 + *(int *)(result + 24));
  if (*((unsigned char *)v5 + 8)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v5;
  }
  *a2 = v6;
  return result;
}

uint64_t key path setter for NCProtoGetAddressableContactsResponse.contactSortOrder : NCProtoGetAddressableContactsResponse(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t result = type metadata accessor for NCProtoGetAddressableContactsResponse(0);
  uint64_t v5 = a2 + *(int *)(result + 24);
  *(void *)uint64_t v5 = v3;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t NCProtoGetAddressableContactsResponse.contactSortOrder.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoGetAddressableContactsResponse(0);
  uint64_t v4 = v1 + *(int *)(result + 24);
  *(void *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*NCProtoGetAddressableContactsResponse.contactSortOrder.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoGetAddressableContactsResponse(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return NCProtoActiveConversation.remoteMemberCount.modify;
}

BOOL NCProtoGetAddressableContactsResponse.hasContactSortOrder.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoGetAddressableContactsResponse(0) + 24) + 8) & 1) == 0;
}

Swift::Void __swiftcall NCProtoGetAddressableContactsResponse.clearContactSortOrder()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NCProtoGetAddressableContactsResponse(0) + 24);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

uint64_t NCProtoGetAddressableContactsResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoGetAddressableContactsResponse, a1);
}

uint64_t NCProtoGetAddressableContactsResponse.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoGetAddressableContactsResponse);
}

uint64_t (*NCProtoGetAddressableContactsResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoGetAddressableContactsResponse.init()@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  uint64_t AddressableContactsResponse = type metadata accessor for NCProtoGetAddressableContactsResponse(0);
  uint64_t result = UnknownStorage.init()();
  uint64_t v4 = (char *)a1 + *(int *)(AddressableContactsResponse + 24);
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  return result;
}

uint64_t (*NCProtoGetImageForContactRequest.contactIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoGetImageForContactRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoGetImageForContactRequest, a1);
}

uint64_t type metadata accessor for NCProtoGetImageForContactRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoGetImageForContactRequest);
}

uint64_t NCProtoGetImageForContactRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoGetImageForContactRequest);
}

uint64_t (*NCProtoGetImageForContactRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoGetImageForContactRequest.init()@<X0>(void *a1@<X8>)
{
  return NCProtoEndedSessionEvent.init()((void (*)(void))type metadata accessor for NCProtoGetImageForContactRequest, a1);
}

uint64_t NCProtoGetImageForContactResponse.imageData.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NCProtoGetImageForContactResponse(0) + 20));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *v1;
  }
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t type metadata accessor for NCProtoGetImageForContactResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoGetImageForContactResponse);
}

uint64_t key path getter for NCProtoGetImageForContactResponse.imageData : NCProtoGetImageForContactResponse@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NCProtoGetImageForContactResponse(0) + 20));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  if (v5 >> 60 == 15) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v3;
  }
  unint64_t v7 = 0xC000000000000000;
  if (v5 >> 60 != 15) {
    unint64_t v7 = v5;
  }
  *a2 = v6;
  a2[1] = v7;

  return outlined copy of Data?(v4, v5);
}

uint64_t key path setter for NCProtoGetImageForContactResponse.imageData : NCProtoGetImageForContactResponse(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for NCProtoGetImageForContactResponse(0) + 20));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  uint64_t result = outlined consume of Data?(v5, v6);
  *uint64_t v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t NCProtoGetImageForContactResponse.imageData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NCProtoGetImageForContactResponse(0) + 20);
  uint64_t result = outlined consume of Data?(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*NCProtoGetImageForContactResponse.imageData.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoGetImageForContactResponse(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NCProtoActiveConversation.handlesHash.modify;
}

BOOL NCProtoGetImageForContactResponse.hasImageData.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NCProtoGetImageForContactResponse(0) + 20) + 8) >> 60 != 15;
}

Swift::Void __swiftcall NCProtoGetImageForContactResponse.clearImageData()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NCProtoGetImageForContactResponse(0) + 20);
  outlined consume of Data?(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_25743E3C0;
}

uint64_t (*NCProtoGetImageForContactResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

double NCProtoGetImageForContactResponse.init()@<D0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t ImageForContactResponse = type metadata accessor for NCProtoGetImageForContactResponse(0);
  double result = 0.0;
  *(_OWORD *)(a1 + *(int *)(ImageForContactResponse + 20)) = xmmword_25743E3C0;
  return result;
}

uint64_t (*NCProtoAddConversationParticipantsRequest.handleValues.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoAddConversationParticipantsRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoAddConversationParticipantsRequest, a1);
}

uint64_t type metadata accessor for NCProtoAddConversationParticipantsRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoAddConversationParticipantsRequest);
}

uint64_t NCProtoAddConversationParticipantsRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoAddConversationParticipantsRequest);
}

uint64_t (*NCProtoAddConversationParticipantsRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoAddConversationParticipantsRequest.init()@<X0>(void *a1@<X8>)
{
  return NCProtoFavoritesDidChangeEvent.init()((void (*)(void))type metadata accessor for NCProtoAddConversationParticipantsRequest, a1);
}

uint64_t (*NCProtoAddConversationParticipantsResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoGetCallDisplayDetailsRequest.callUuid.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoGetCallDisplayDetailsRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoGetCallDisplayDetailsRequest, a1);
}

uint64_t type metadata accessor for NCProtoGetCallDisplayDetailsRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoGetCallDisplayDetailsRequest);
}

uint64_t NCProtoGetCallDisplayDetailsRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoGetCallDisplayDetailsRequest);
}

uint64_t (*NCProtoGetCallDisplayDetailsRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoGetCallDisplayDetailsRequest.init()@<X0>(void *a1@<X8>)
{
  return NCProtoEndedSessionEvent.init()((void (*)(void))type metadata accessor for NCProtoGetCallDisplayDetailsRequest, a1);
}

uint64_t NCProtoGetCallDisplayDetailsResponse.callInfo.getter@<X0>(unint64_t *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
  MEMORY[0x270FA5388]();
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NCProtoGetCallDisplayDetailsResponse(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 20), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoCallInfo?);
  unint64_t v6 = (int *)type metadata accessor for NCProtoCallInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v6 - 1) + 48))(v4, 1, v6) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, (uint64_t)a1, type metadata accessor for NCProtoCallInfo);
  }
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  UnknownStorage.init()();
  uint64_t v7 = (unint64_t *)((char *)a1 + v6[6]);
  *uint64_t v7 = 0;
  v7[1] = 0;
  unint64_t v8 = (unint64_t *)((char *)a1 + v6[7]);
  void *v8 = 0;
  v8[1] = 0;
  size_t v9 = (unint64_t *)((char *)a1 + v6[8]);
  *size_t v9 = 0;
  v9[1] = 0;
  *((unsigned char *)a1 + v6[9]) = 2;
  uint64_t v10 = (char *)a1 + v6[10];
  uint64_t v11 = type metadata accessor for NCProtoSenderIdentity(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *(_OWORD *)((char *)a1 + v6[11]) = xmmword_25743E3C0;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoCallInfo?);
}

uint64_t type metadata accessor for NCProtoGetCallDisplayDetailsResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoGetCallDisplayDetailsResponse);
}

uint64_t key path getter for NCProtoGetCallDisplayDetailsResponse.callInfo : NCProtoGetCallDisplayDetailsResponse@<X0>(unint64_t *a1@<X8>)
{
  return NCProtoGetCallDisplayDetailsResponse.callInfo.getter(a1);
}

uint64_t key path setter for NCProtoGetCallDisplayDetailsResponse.callInfo : NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NCProtoCallInfo(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v7, type metadata accessor for NCProtoCallInfo);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for NCProtoGetCallDisplayDetailsResponse(0) + 20);
  outlined destroy of NCProtoContactInfo?(v8, &demangling cache variable for type metadata for NCProtoCallInfo?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, v8, type metadata accessor for NCProtoCallInfo);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t NCProtoGetCallDisplayDetailsResponse.callInfo.setter(uint64_t a1)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.setter(a1, type metadata accessor for NCProtoGetCallDisplayDetailsResponse, &demangling cache variable for type metadata for NCProtoCallInfo?, type metadata accessor for NCProtoCallInfo, type metadata accessor for NCProtoCallInfo);
}

void (*NCProtoGetCallDisplayDetailsResponse.callInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for NCProtoCallInfo(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for NCProtoGetCallDisplayDetailsResponse(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of NCProtoContactInfo?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    UnknownStorage.init()();
    uint64_t v12 = (void *)((char *)v10 + v6[6]);
    void *v12 = 0;
    v12[1] = 0;
    uint64_t v13 = (void *)((char *)v10 + v6[7]);
    void *v13 = 0;
    v13[1] = 0;
    uint64_t v14 = (void *)((char *)v10 + v6[8]);
    void *v14 = 0;
    v14[1] = 0;
    *((unsigned char *)v10 + v6[9]) = 2;
    uint64_t v15 = (char *)v10 + v6[10];
    uint64_t v16 = type metadata accessor for NCProtoSenderIdentity(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
    *(_OWORD *)((char *)v10 + v6[11]) = xmmword_25743E3C0;
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallInfo?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for NCProtoCallInfo);
  }
  return NCProtoContinuityCall.info.modify;
}

BOOL NCProtoGetCallDisplayDetailsResponse.hasCallInfo.getter()
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.hasAdvertisement.getter(&demangling cache variable for type metadata for NCProtoCallInfo?, type metadata accessor for NCProtoGetCallDisplayDetailsResponse, type metadata accessor for NCProtoCallInfo);
}

BOOL NCProtoSuggestionAdvertisementDidChangeEvent.hasAdvertisement.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388]();
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2(0);
  outlined init with copy of NCProtoContactInfo?(v3 + *(int *)(v9 + 20), (uint64_t)v8, a1);
  uint64_t v10 = a3(0);
  BOOL v11 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v8, 1, v10) != 1;
  outlined destroy of NCProtoContactInfo?((uint64_t)v8, a1);
  return v11;
}

Swift::Void __swiftcall NCProtoGetCallDisplayDetailsResponse.clearCallInfo()()
{
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.clearAdvertisement()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 20);
  outlined destroy of NCProtoContactInfo?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t (*NCProtoGetCallDisplayDetailsResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoGetCallDisplayDetailsResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.init()(type metadata accessor for NCProtoGetCallDisplayDetailsResponse, type metadata accessor for NCProtoCallInfo, a1);
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.init()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  UnknownStorage.init()();
  uint64_t v6 = a3 + *(int *)(a1(0) + 20);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t (*NCProtoDestinationCapabilities.supportsTelephonyCalls.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoDestinationCapabilities.supportsFaceTimeAudio.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t NCProtoDestinationCapabilities.supportsFaceTimeAudio.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*NCProtoDestinationCapabilities.supportsFaceTimeAudio.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoDestinationCapabilities.supportsFaceTimeVideo.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t NCProtoDestinationCapabilities.supportsFaceTimeVideo.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 2) = result;
  return result;
}

uint64_t (*NCProtoDestinationCapabilities.supportsFaceTimeVideo.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoDestinationCapabilities.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityFavorite.unknownFields.getter(type metadata accessor for NCProtoDestinationCapabilities, a1);
}

uint64_t type metadata accessor for NCProtoDestinationCapabilities(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoDestinationCapabilities);
}

uint64_t NCProtoDestinationCapabilities.unknownFields.setter(uint64_t a1)
{
  return NCProtoContinuityFavorite.unknownFields.setter(a1, type metadata accessor for NCProtoDestinationCapabilities);
}

uint64_t (*NCProtoDestinationCapabilities.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoDestinationCapabilities.init()@<X0>(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 0;
  type metadata accessor for NCProtoDestinationCapabilities(0);
  return UnknownStorage.init()();
}

uint64_t (*NCProtoGetDestinationCapabilitiesRequest.destinationIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoGetDestinationCapabilitiesRequest.destinationType.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoPullLagunaSessionToTVRequest.reason.getter(type metadata accessor for NCProtoGetDestinationCapabilitiesRequest, a1);
}

uint64_t NCProtoPullLagunaSessionToTVRequest.reason.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = a1(0);
  uint64_t v5 = (uint64_t *)(v2 + *(int *)(result + 24));
  if (*((unsigned char *)v5 + 9))
  {
    uint64_t v6 = 0;
    char v7 = 1;
  }
  else
  {
    char v8 = *((unsigned char *)v5 + 8);
    uint64_t v6 = *v5;
    char v7 = v8 & 1;
  }
  *(void *)a2 = v6;
  *(unsigned char *)(a2 + 8) = v7;
  return result;
}

uint64_t type metadata accessor for NCProtoGetDestinationCapabilitiesRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoGetDestinationCapabilitiesRequest);
}

uint64_t key path getter for NCProtoGetDestinationCapabilitiesRequest.destinationType : NCProtoGetDestinationCapabilitiesRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for NCProtoPullLagunaSessionToTVRequest.reason : NCProtoPullLagunaSessionToTVRequest(a1, type metadata accessor for NCProtoGetDestinationCapabilitiesRequest, a2);
}

uint64_t key path getter for NCProtoPullLagunaSessionToTVRequest.reason : NCProtoPullLagunaSessionToTVRequest@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(0);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(result + 24));
  uint64_t v7 = *v6;
  char v8 = *((unsigned char *)v6 + 8);
  int v9 = *((unsigned __int8 *)v6 + 9);
  if (v9) {
    uint64_t v7 = 0;
  }
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 8) = (v9 | v8) & 1;
  return result;
}

uint64_t key path setter for NCProtoGetDestinationCapabilitiesRequest.destinationType : NCProtoGetDestinationCapabilitiesRequest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoPullLagunaSessionToTVRequest.reason : NCProtoPullLagunaSessionToTVRequest(a1, a2, a3, a4, type metadata accessor for NCProtoGetDestinationCapabilitiesRequest);
}

uint64_t key path setter for NCProtoPullLagunaSessionToTVRequest.reason : NCProtoPullLagunaSessionToTVRequest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = *a1;
  char v7 = *((unsigned char *)a1 + 8);
  uint64_t result = a5(0);
  uint64_t v9 = a2 + *(int *)(result + 24);
  *(void *)uint64_t v9 = v6;
  *(unsigned char *)(v9 + 8) = v7;
  *(unsigned char *)(v9 + 9) = 0;
  return result;
}

uint64_t NCProtoGetDestinationCapabilitiesRequest.destinationType.setter(uint64_t *a1)
{
  return NCProtoPullLagunaSessionToTVRequest.reason.setter(a1, type metadata accessor for NCProtoGetDestinationCapabilitiesRequest);
}

uint64_t NCProtoPullLagunaSessionToTVRequest.reason.setter(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t result = a2(0);
  uint64_t v6 = v2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = v3;
  *(unsigned char *)(v6 + 8) = v4;
  *(unsigned char *)(v6 + 9) = 0;
  return result;
}

uint64_t (*NCProtoGetDestinationCapabilitiesRequest.destinationType.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoGetDestinationCapabilitiesRequest(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  char v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 9))
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  else
  {
    char v7 = *((unsigned char *)v4 + 8);
    uint64_t v5 = *v4;
    char v6 = v7 & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

BOOL NCProtoGetDestinationCapabilitiesRequest.hasDestinationType.getter()
{
  return NCProtoPullLagunaSessionToTVRequest.hasReason.getter(type metadata accessor for NCProtoGetDestinationCapabilitiesRequest);
}

BOOL NCProtoPullLagunaSessionToTVRequest.hasReason.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 24) + 9) & 1) == 0;
}

Swift::Void __swiftcall NCProtoGetDestinationCapabilitiesRequest.clearDestinationType()()
{
}

uint64_t NCProtoPullLagunaSessionToTVRequest.clearReason()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 24);
  *(void *)uint64_t v3 = 0;
  *(_WORD *)(v3 + 8) = 256;
  return result;
}

uint64_t NCProtoGetDestinationCapabilitiesRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoGetDestinationCapabilitiesRequest, a1);
}

uint64_t NCProtoGetDestinationCapabilitiesRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoGetDestinationCapabilitiesRequest);
}

uint64_t (*NCProtoGetDestinationCapabilitiesRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t static NCProtoGetDestinationCapabilitiesRequest.DestinationType.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoGetDestinationCapabilitiesRequest.DestinationType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType(uint64_t a1, uint64_t a2)
{
  unint64_t DestinationCapabilities = lazy protocol witness table accessor for type NCProtoGetDestinationCapabilitiesRequest.DestinationType and conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType();

  return MEMORY[0x270F44AF0](a1, a2, DestinationCapabilities);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoSuggestionAdvertisement.SuggestionType(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((unsigned char *)a1 + 8)) {
    uint64_t v2 = *a1 != 0;
  }
  uint64_t v3 = *a2 != 0;
  if (!*((unsigned char *)a2 + 8)) {
    uint64_t v3 = *a2;
  }
  return v2 == v3;
}

uint64_t NCProtoGetDestinationCapabilitiesRequest.init()@<X0>(void *a1@<X8>)
{
  return NCProtoPullLagunaSessionToTVRequest.init()(type metadata accessor for NCProtoGetDestinationCapabilitiesRequest, a1);
}

uint64_t NCProtoPullLagunaSessionToTVRequest.init()@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  uint64_t v3 = a1(0);
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = (char *)a2 + *(int *)(v3 + 24);
  *(void *)uint64_t v5 = 0;
  *((_WORD *)v5 + 4) = 256;
  return result;
}

uint64_t NCProtoGetDestinationCapabilitiesResponse.capabilities.getter@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
  MEMORY[0x270FA5388]();
  char v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t DestinationCapabilitiesResponse = type metadata accessor for NCProtoGetDestinationCapabilitiesResponse(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(DestinationCapabilitiesResponse + 20), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
  uint64_t v6 = type metadata accessor for NCProtoDestinationCapabilities(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, a1, type metadata accessor for NCProtoDestinationCapabilities);
  }
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 0;
  UnknownStorage.init()();
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
}

uint64_t type metadata accessor for NCProtoGetDestinationCapabilitiesResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoGetDestinationCapabilitiesResponse);
}

uint64_t key path getter for NCProtoGetDestinationCapabilitiesResponse.capabilities : NCProtoGetDestinationCapabilitiesResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
  MEMORY[0x270FA5388]();
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t DestinationCapabilitiesResponse = type metadata accessor for NCProtoGetDestinationCapabilitiesResponse(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(DestinationCapabilitiesResponse + 20), (uint64_t)v5, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
  uint64_t v7 = type metadata accessor for NCProtoDestinationCapabilities(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v5, a2, type metadata accessor for NCProtoDestinationCapabilities);
  }
  *(_WORD *)a2 = 0;
  *(unsigned char *)(a2 + 2) = 0;
  UnknownStorage.init()();
  return outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
}

uint64_t key path setter for NCProtoGetDestinationCapabilitiesResponse.capabilities : NCProtoGetDestinationCapabilitiesResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NCProtoDestinationCapabilities(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v7, type metadata accessor for NCProtoDestinationCapabilities);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for NCProtoGetDestinationCapabilitiesResponse(0) + 20);
  outlined destroy of NCProtoContactInfo?(v8, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, v8, type metadata accessor for NCProtoDestinationCapabilities);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t NCProtoGetDestinationCapabilitiesResponse.capabilities.setter(uint64_t a1)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.setter(a1, type metadata accessor for NCProtoGetDestinationCapabilitiesResponse, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?, type metadata accessor for NCProtoDestinationCapabilities, type metadata accessor for NCProtoDestinationCapabilities);
}

void (*NCProtoGetDestinationCapabilitiesResponse.capabilities.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for NCProtoDestinationCapabilities(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for NCProtoGetDestinationCapabilitiesResponse(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of NCProtoContactInfo?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *(_WORD *)uint64_t v10 = 0;
    v10[2] = 0;
    UnknownStorage.init()();
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for NCProtoDestinationCapabilities);
  }
  return NCProtoGetDestinationCapabilitiesResponse.capabilities.modify;
}

void NCProtoGetDestinationCapabilitiesResponse.capabilities.modify(uint64_t a1, char a2)
{
}

BOOL NCProtoGetDestinationCapabilitiesResponse.hasCapabilities.getter()
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.hasAdvertisement.getter(&demangling cache variable for type metadata for NCProtoDestinationCapabilities?, type metadata accessor for NCProtoGetDestinationCapabilitiesResponse, type metadata accessor for NCProtoDestinationCapabilities);
}

Swift::Void __swiftcall NCProtoGetDestinationCapabilitiesResponse.clearCapabilities()()
{
}

uint64_t (*NCProtoGetDestinationCapabilitiesResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoGetDestinationCapabilitiesResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.init()(type metadata accessor for NCProtoGetDestinationCapabilitiesResponse, type metadata accessor for NCProtoDestinationCapabilities, a1);
}

uint64_t NCProtoCallState.isVideoEnabled.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoCallState(0) + 20)) & 1;
}

uint64_t key path getter for NCProtoCallState.isVideoEnabled : NCProtoCallState@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = type metadata accessor for NCProtoCallState(0);
  *a2 = *(unsigned char *)(a1 + *(int *)(result + 20)) & 1;
  return result;
}

uint64_t key path setter for NCProtoCallState.isVideoEnabled : NCProtoCallState(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t result = type metadata accessor for NCProtoCallState(0);
  *(unsigned char *)(a2 + *(int *)(result + 20)) = v3;
  return result;
}

uint64_t NCProtoCallState.isVideoEnabled.setter(char a1)
{
  uint64_t result = type metadata accessor for NCProtoCallState(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*NCProtoCallState.isVideoEnabled.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoCallState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return NCProtoContinuityCall.isMuted.modify;
}

BOOL NCProtoCallState.hasIsVideoEnabled.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoCallState(0) + 20)) != 2;
}

Swift::Void __swiftcall NCProtoCallState.clearIsVideoEnabled()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoCallState(0) + 20)) = 2;
}

uint64_t NCProtoCallState.isAudioEnabled.getter()
{
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.getter(type metadata accessor for NCProtoCallState);
}

uint64_t key path getter for NCProtoCallState.isAudioEnabled : NCProtoCallState@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(a1, type metadata accessor for NCProtoCallState, a2);
}

uint64_t key path setter for NCProtoCallState.isAudioEnabled : NCProtoCallState(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(a1, a2, a3, a4, type metadata accessor for NCProtoCallState);
}

uint64_t NCProtoCallState.isAudioEnabled.setter(char a1)
{
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.setter(a1, type metadata accessor for NCProtoCallState);
}

uint64_t (*NCProtoCallState.isAudioEnabled.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoCallState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return NCProtoContinuityCall.isMuted.modify;
}

BOOL NCProtoCallState.hasIsAudioEnabled.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoCallState(0) + 24)) != 2;
}

Swift::Void __swiftcall NCProtoCallState.clearIsAudioEnabled()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoCallState(0) + 24)) = 2;
}

uint64_t NCProtoCallState.avMode.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityCall.status.getter(type metadata accessor for NCProtoCallState, a1);
}

uint64_t NCProtoContinuityCall.status.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = a1(0);
  uint64_t v5 = (uint64_t *)(v2 + *(int *)(result + 28));
  if (*((unsigned char *)v5 + 9))
  {
    uint64_t v6 = 0;
    char v7 = 1;
  }
  else
  {
    char v8 = *((unsigned char *)v5 + 8);
    uint64_t v6 = *v5;
    char v7 = v8 & 1;
  }
  *(void *)a2 = v6;
  *(unsigned char *)(a2 + 8) = v7;
  return result;
}

uint64_t key path getter for NCProtoCallState.avMode : NCProtoCallState@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.status : NCProtoContinuityCall(a1, type metadata accessor for NCProtoCallState, a2);
}

uint64_t key path getter for NCProtoContinuityCall.status : NCProtoContinuityCall@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(0);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(result + 28));
  uint64_t v7 = *v6;
  char v8 = *((unsigned char *)v6 + 8);
  int v9 = *((unsigned __int8 *)v6 + 9);
  if (v9) {
    uint64_t v7 = 0;
  }
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 8) = (v9 | v8) & 1;
  return result;
}

uint64_t key path setter for NCProtoCallState.avMode : NCProtoCallState(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.status : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoCallState);
}

uint64_t key path setter for NCProtoContinuityCall.status : NCProtoContinuityCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = *a1;
  char v7 = *((unsigned char *)a1 + 8);
  uint64_t result = a5(0);
  uint64_t v9 = a2 + *(int *)(result + 28);
  *(void *)uint64_t v9 = v6;
  *(unsigned char *)(v9 + 8) = v7;
  *(unsigned char *)(v9 + 9) = 0;
  return result;
}

uint64_t NCProtoCallState.avMode.setter(uint64_t *a1)
{
  return NCProtoContinuityCall.status.setter(a1, type metadata accessor for NCProtoCallState);
}

uint64_t NCProtoContinuityCall.status.setter(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t result = a2(0);
  uint64_t v6 = v2 + *(int *)(result + 28);
  *(void *)uint64_t v6 = v3;
  *(unsigned char *)(v6 + 8) = v4;
  *(unsigned char *)(v6 + 9) = 0;
  return result;
}

uint64_t (*NCProtoCallState.avMode.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoCallState(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  char v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 9))
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  else
  {
    char v7 = *((unsigned char *)v4 + 8);
    uint64_t v5 = *v4;
    char v6 = v7 & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

BOOL NCProtoCallState.hasAvMode.getter()
{
  return NCProtoContinuityCall.hasStatus.getter(type metadata accessor for NCProtoCallState);
}

BOOL NCProtoContinuityCall.hasStatus.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 28) + 9) & 1) == 0;
}

Swift::Void __swiftcall NCProtoCallState.clearAvMode()()
{
}

uint64_t NCProtoContinuityCall.clearStatus()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 28);
  *(void *)uint64_t v3 = 0;
  *(_WORD *)(v3 + 8) = 256;
  return result;
}

uint64_t NCProtoCallState.isCaptioningEnabled.getter()
{
  return NCProtoCallState.isCaptioningEnabled.getter(type metadata accessor for NCProtoCallState);
}

uint64_t key path getter for NCProtoCallState.isCaptioningEnabled : NCProtoCallState@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for NCProtoCallState.isCaptioningEnabled : NCProtoCallState(a1, type metadata accessor for NCProtoCallState, a2);
}

uint64_t key path setter for NCProtoCallState.isCaptioningEnabled : NCProtoCallState(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoCallState.isCaptioningEnabled : NCProtoCallState(a1, a2, a3, a4, type metadata accessor for NCProtoCallState);
}

uint64_t NCProtoCallState.isCaptioningEnabled.setter(char a1)
{
  return NCProtoCallState.isCaptioningEnabled.setter(a1, type metadata accessor for NCProtoCallState);
}

uint64_t (*NCProtoCallState.isCaptioningEnabled.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoCallState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return NCProtoContinuityCall.isMuted.modify;
}

BOOL NCProtoCallState.hasIsCaptioningEnabled.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoCallState(0) + 32)) != 2;
}

Swift::Void __swiftcall NCProtoCallState.clearIsCaptioningEnabled()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoCallState(0) + 32)) = 2;
}

uint64_t (*NCProtoCallState.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoCallStateRequest.identifierHash.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoCallStateRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoCallStateRequest, a1);
}

uint64_t type metadata accessor for NCProtoCallStateRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoCallStateRequest);
}

uint64_t NCProtoCallStateRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoCallStateRequest);
}

uint64_t (*NCProtoCallStateRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoCallStateRequest.init()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_25743E3B0;
  type metadata accessor for NCProtoCallStateRequest(0);
  return UnknownStorage.init()();
}

uint64_t NCProtoCallStateResponse.callState.getter@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x270FA5388]();
  char v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NCProtoCallStateResponse(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 20), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoCallState?);
  char v6 = (int *)type metadata accessor for NCProtoCallState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v6 - 1) + 48))(v4, 1, v6) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, a1, type metadata accessor for NCProtoCallState);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v6[5]) = 2;
  *(unsigned char *)(a1 + v6[6]) = 2;
  uint64_t v7 = a1 + v6[7];
  *(void *)uint64_t v7 = 0;
  *(_WORD *)(v7 + 8) = 256;
  *(unsigned char *)(a1 + v6[8]) = 2;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoCallState?);
}

uint64_t type metadata accessor for NCProtoCallStateResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoCallStateResponse);
}

uint64_t key path getter for NCProtoCallStateResponse.callState : NCProtoCallStateResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x270FA5388]();
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NCProtoCallStateResponse(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
  uint64_t v7 = (int *)type metadata accessor for NCProtoCallState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v5, a2, type metadata accessor for NCProtoCallState);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a2 + v7[5]) = 2;
  *(unsigned char *)(a2 + v7[6]) = 2;
  uint64_t v8 = a2 + v7[7];
  *(void *)uint64_t v8 = 0;
  *(_WORD *)(v8 + 8) = 256;
  *(unsigned char *)(a2 + v7[8]) = 2;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
}

uint64_t key path setter for NCProtoCallStateResponse.callState : NCProtoCallStateResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NCProtoCallState(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v7, type metadata accessor for NCProtoCallState);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for NCProtoCallStateResponse(0) + 20);
  outlined destroy of NCProtoContactInfo?(v8, &demangling cache variable for type metadata for NCProtoCallState?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, v8, type metadata accessor for NCProtoCallState);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t NCProtoCallStateResponse.callState.setter(uint64_t a1)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.setter(a1, type metadata accessor for NCProtoCallStateResponse, &demangling cache variable for type metadata for NCProtoCallState?, type metadata accessor for NCProtoCallState, type metadata accessor for NCProtoCallState);
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 20);
  outlined destroy of NCProtoContactInfo?(v10, a3);
  outlined init with take of NCProtoContactInfo(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(v10, 0, 1, v11);
}

void (*NCProtoCallStateResponse.callState.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for NCProtoCallState(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for NCProtoCallStateResponse(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of NCProtoContactInfo?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v10[v6[5]] = 2;
    v10[v6[6]] = 2;
    uint64_t v12 = &v10[v6[7]];
    *(void *)uint64_t v12 = 0;
    *((_WORD *)v12 + 4) = 256;
    v10[v6[8]] = 2;
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for NCProtoCallState);
  }
  return NCProtoLagunaConnectionRequest.callState.modify;
}

BOOL NCProtoCallStateResponse.hasCallState.getter()
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.hasAdvertisement.getter(&demangling cache variable for type metadata for NCProtoCallState?, type metadata accessor for NCProtoCallStateResponse, type metadata accessor for NCProtoCallState);
}

Swift::Void __swiftcall NCProtoCallStateResponse.clearCallState()()
{
}

uint64_t (*NCProtoCallStateResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoCallStateResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.init()(type metadata accessor for NCProtoCallStateResponse, type metadata accessor for NCProtoCallState, a1);
}

uint64_t (*NCProtoDeviceTokenRequest.conversationIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoDeviceTokenRequest.memberAssociationPrimaryInfo.getter@<X0>(void *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  MEMORY[0x270FA5388]();
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NCProtoDeviceTokenRequest(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 24), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  uint64_t v6 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v6 - 1) + 48))(v4, 1, v6) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, (uint64_t)a1, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  }
  *a1 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  uint64_t v7 = (void *)((char *)a1 + v6[6]);
  *uint64_t v7 = 0;
  v7[1] = 0;
  *(_OWORD *)((char *)a1 + v6[7]) = xmmword_25743E3C0;
  uint64_t v8 = (char *)a1 + v6[8];
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  size_t v9 = (void *)((char *)a1 + v6[9]);
  *size_t v9 = 0;
  v9[1] = 0;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
}

uint64_t type metadata accessor for NCProtoDeviceTokenRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoDeviceTokenRequest);
}

uint64_t key path getter for NCProtoDeviceTokenRequest.memberAssociationPrimaryInfo : NCProtoDeviceTokenRequest@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  MEMORY[0x270FA5388]();
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NCProtoDeviceTokenRequest(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  uint64_t v7 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)a2, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  }
  *a2 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  uint64_t v8 = (void *)((char *)a2 + v7[6]);
  void *v8 = 0;
  v8[1] = 0;
  *(_OWORD *)((char *)a2 + v7[7]) = xmmword_25743E3C0;
  size_t v9 = (char *)a2 + v7[8];
  *(void *)size_t v9 = 0;
  v9[8] = 1;
  uint64_t v10 = (void *)((char *)a2 + v7[9]);
  *uint64_t v10 = 0;
  v10[1] = 0;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
}

uint64_t key path setter for NCProtoDeviceTokenRequest.memberAssociationPrimaryInfo : NCProtoDeviceTokenRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v7, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 24);
  outlined destroy of NCProtoContactInfo?(v8, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, v8, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t NCProtoDeviceTokenRequest.memberAssociationPrimaryInfo.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 24);
  outlined destroy of NCProtoContactInfo?(v3, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  outlined init with take of NCProtoContactInfo(a1, v3, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  uint64_t v4 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 0, 1, v4);
}

void (*NCProtoDeviceTokenRequest.memberAssociationPrimaryInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of NCProtoContactInfo?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = MEMORY[0x263F8EE78];
    UnknownStorage.init()();
    uint64_t v12 = (void *)((char *)v10 + v6[6]);
    void *v12 = 0;
    v12[1] = 0;
    *(_OWORD *)((char *)v10 + v6[7]) = xmmword_25743E3C0;
    uint64_t v13 = (char *)v10 + v6[8];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = (void *)((char *)v10 + v6[9]);
    void *v14 = 0;
    v14[1] = 0;
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  }
  return NCProtoStartedSessionEvent.memberAssociationPrimaryInfo.modify;
}

BOOL NCProtoDeviceTokenRequest.hasMemberAssociationPrimaryInfo.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  MEMORY[0x270FA5388]();
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for NCProtoDeviceTokenRequest(0);
  outlined init with copy of NCProtoContactInfo?(v0 + *(int *)(v3 + 24), (uint64_t)v2, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  uint64_t v4 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  BOOL v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v2, 1, v4) != 1;
  outlined destroy of NCProtoContactInfo?((uint64_t)v2, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  return v5;
}

Swift::Void __swiftcall NCProtoDeviceTokenRequest.clearMemberAssociationPrimaryInfo()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 24);
  outlined destroy of NCProtoContactInfo?(v1, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  uint64_t v2 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  v3(v1, 1, 1, v2);
}

uint64_t NCProtoDeviceTokenRequest.callState.getter@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x270FA5388]();
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NCProtoDeviceTokenRequest(0);
  outlined init with copy of NCProtoContactInfo?(v1 + *(int *)(v5 + 28), (uint64_t)v4, &demangling cache variable for type metadata for NCProtoCallState?);
  uint64_t v6 = (int *)type metadata accessor for NCProtoCallState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v6 - 1) + 48))(v4, 1, v6) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v4, a1, type metadata accessor for NCProtoCallState);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v6[5]) = 2;
  *(unsigned char *)(a1 + v6[6]) = 2;
  uint64_t v7 = a1 + v6[7];
  *(void *)uint64_t v7 = 0;
  *(_WORD *)(v7 + 8) = 256;
  *(unsigned char *)(a1 + v6[8]) = 2;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoCallState?);
}

uint64_t key path getter for NCProtoDeviceTokenRequest.callState : NCProtoDeviceTokenRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x270FA5388]();
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NCProtoDeviceTokenRequest(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
  uint64_t v7 = (int *)type metadata accessor for NCProtoCallState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of NCProtoContactInfo((uint64_t)v5, a2, type metadata accessor for NCProtoCallState);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a2 + v7[5]) = 2;
  *(unsigned char *)(a2 + v7[6]) = 2;
  uint64_t v8 = a2 + v7[7];
  *(void *)uint64_t v8 = 0;
  *(_WORD *)(v8 + 8) = 256;
  *(unsigned char *)(a2 + v7[8]) = 2;
  return outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
}

uint64_t key path setter for NCProtoDeviceTokenRequest.callState : NCProtoDeviceTokenRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NCProtoCallState(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v7, type metadata accessor for NCProtoCallState);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 28);
  outlined destroy of NCProtoContactInfo?(v8, &demangling cache variable for type metadata for NCProtoCallState?);
  outlined init with take of NCProtoContactInfo((uint64_t)v7, v8, type metadata accessor for NCProtoCallState);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t NCProtoDeviceTokenRequest.callState.setter(uint64_t a1)
{
  return NCProtoAddressableContact.contactInfo.setter(a1, type metadata accessor for NCProtoDeviceTokenRequest, &demangling cache variable for type metadata for NCProtoCallState?, type metadata accessor for NCProtoCallState, type metadata accessor for NCProtoCallState);
}

uint64_t NCProtoAddressableContact.contactInfo.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 28);
  outlined destroy of NCProtoContactInfo?(v10, a3);
  outlined init with take of NCProtoContactInfo(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(v10, 0, 1, v11);
}

void (*NCProtoDeviceTokenRequest.callState.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for NCProtoCallState(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of NCProtoContactInfo?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v10[v6[5]] = 2;
    v10[v6[6]] = 2;
    uint64_t v12 = &v10[v6[7]];
    *(void *)uint64_t v12 = 0;
    *((_WORD *)v12 + 4) = 256;
    v10[v6[8]] = 2;
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoCallState?);
  }
  else
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for NCProtoCallState);
  }
  return NCProtoLagunaConnectionRequest.callState.modify;
}

void NCProtoContinuityFavorite.contactInfo.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(int *)(*(void *)a1 + 48);
  uint64_t v10 = *(void **)(*(void *)a1 + 32);
  uint64_t v11 = *(void **)(*(void *)a1 + 40);
  uint64_t v12 = *(void *)(*(void *)a1 + 16);
  uint64_t v13 = *(void *)(*(void *)a1 + 24);
  uint64_t v14 = *(void **)(*(void *)a1 + 8);
  uint64_t v15 = **(void **)a1 + v9;
  if (a2)
  {
    outlined init with copy of NCProtoContactInfo(*(void *)(*(void *)a1 + 40), (uint64_t)v10, a5);
    outlined destroy of NCProtoContactInfo?(v15, a3);
    outlined init with take of NCProtoContactInfo((uint64_t)v10, v15, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
    outlined destroy of NCProtoContactInfo((uint64_t)v11, a6);
  }
  else
  {
    outlined destroy of NCProtoContactInfo?(**(void **)a1 + v9, a3);
    outlined init with take of NCProtoContactInfo((uint64_t)v11, v15, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
  }
  free(v11);
  free(v10);
  free(v14);

  free(v8);
}

BOOL NCProtoDeviceTokenRequest.hasCallState.getter()
{
  return NCProtoAddressableContact.hasContactInfo.getter(&demangling cache variable for type metadata for NCProtoCallState?, type metadata accessor for NCProtoDeviceTokenRequest, type metadata accessor for NCProtoCallState);
}

Swift::Void __swiftcall NCProtoDeviceTokenRequest.clearCallState()()
{
}

uint64_t NCProtoDeviceTokenRequest.shouldLaunchFaceTime.getter()
{
  return NCProtoCallState.isCaptioningEnabled.getter(type metadata accessor for NCProtoDeviceTokenRequest);
}

uint64_t NCProtoCallState.isCaptioningEnabled.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 32)) & 1;
}

uint64_t key path getter for NCProtoDeviceTokenRequest.shouldLaunchFaceTime : NCProtoDeviceTokenRequest@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for NCProtoCallState.isCaptioningEnabled : NCProtoCallState(a1, type metadata accessor for NCProtoDeviceTokenRequest, a2);
}

uint64_t key path getter for NCProtoCallState.isCaptioningEnabled : NCProtoCallState@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, unsigned char *a3@<X8>)
{
  uint64_t result = a2(0);
  *a3 = *(unsigned char *)(a1 + *(int *)(result + 32)) & 1;
  return result;
}

uint64_t key path setter for NCProtoDeviceTokenRequest.shouldLaunchFaceTime : NCProtoDeviceTokenRequest(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoCallState.isCaptioningEnabled : NCProtoCallState(a1, a2, a3, a4, type metadata accessor for NCProtoDeviceTokenRequest);
}

uint64_t key path setter for NCProtoCallState.isCaptioningEnabled : NCProtoCallState(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  char v6 = *a1;
  uint64_t result = a5(0);
  *(unsigned char *)(a2 + *(int *)(result + 32)) = v6;
  return result;
}

uint64_t NCProtoDeviceTokenRequest.shouldLaunchFaceTime.setter(char a1)
{
  return NCProtoCallState.isCaptioningEnabled.setter(a1, type metadata accessor for NCProtoDeviceTokenRequest);
}

uint64_t NCProtoCallState.isCaptioningEnabled.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*NCProtoDeviceTokenRequest.shouldLaunchFaceTime.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return NCProtoContinuityCall.isMuted.modify;
}

BOOL NCProtoDeviceTokenRequest.hasShouldLaunchFaceTime.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 32)) != 2;
}

Swift::Void __swiftcall NCProtoDeviceTokenRequest.clearShouldLaunchFaceTime()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 32)) = 2;
}

uint64_t NCProtoDeviceTokenRequest.conversationHandoffType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for NCProtoDeviceTokenRequest(0);
  uint64_t v4 = (uint64_t *)(v1 + *(int *)(result + 36));
  if (*((unsigned char *)v4 + 9))
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  else
  {
    char v7 = *((unsigned char *)v4 + 8);
    uint64_t v5 = *v4;
    char v6 = v7 & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return result;
}

uint64_t key path getter for NCProtoDeviceTokenRequest.conversationHandoffType : NCProtoDeviceTokenRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = type metadata accessor for NCProtoDeviceTokenRequest(0);
  uint64_t v5 = (uint64_t *)(a1 + *(int *)(result + 36));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)v5 + 8);
  int v8 = *((unsigned __int8 *)v5 + 9);
  if (v8) {
    uint64_t v6 = 0;
  }
  *(void *)a2 = v6;
  *(unsigned char *)(a2 + 8) = (v8 | v7) & 1;
  return result;
}

uint64_t key path setter for NCProtoDeviceTokenRequest.conversationHandoffType : NCProtoDeviceTokenRequest(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t result = type metadata accessor for NCProtoDeviceTokenRequest(0);
  uint64_t v6 = a2 + *(int *)(result + 36);
  *(void *)uint64_t v6 = v3;
  *(unsigned char *)(v6 + 8) = v4;
  *(unsigned char *)(v6 + 9) = 0;
  return result;
}

uint64_t NCProtoDeviceTokenRequest.conversationHandoffType.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = type metadata accessor for NCProtoDeviceTokenRequest(0);
  uint64_t v5 = v1 + *(int *)(result + 36);
  *(void *)uint64_t v5 = v2;
  *(unsigned char *)(v5 + 8) = v3;
  *(unsigned char *)(v5 + 9) = 0;
  return result;
}

uint64_t (*NCProtoDeviceTokenRequest.conversationHandoffType.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  char v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 9))
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  else
  {
    char v7 = *((unsigned char *)v4 + 8);
    uint64_t v5 = *v4;
    char v6 = v7 & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

BOOL NCProtoDeviceTokenRequest.hasConversationHandoffType.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 36) + 9) & 1) == 0;
}

Swift::Void __swiftcall NCProtoDeviceTokenRequest.clearConversationHandoffType()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NCProtoDeviceTokenRequest(0) + 36);
  *(void *)uint64_t v1 = 0;
  *(_WORD *)(v1 + 8) = 256;
}

uint64_t NCProtoDeviceTokenRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoDeviceTokenRequest, a1);
}

uint64_t NCProtoDeviceTokenRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoDeviceTokenRequest);
}

uint64_t (*NCProtoDeviceTokenRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

unint64_t NCProtoDeviceTokenRequest.ConversationHandoffType.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 5;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t static NCProtoDeviceTokenRequest.ConversationHandoffType.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoDeviceTokenRequest.ConversationHandoffType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoDeviceTokenRequest.ConversationHandoffType.allCases, a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NCProtoDeviceTokenRequest.ConversationHandoffType@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return NCProtoDeviceTokenRequest.ConversationHandoffType.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDeviceTokenRequest.ConversationHandoffType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t NCProtoDeviceTokenRequest.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v2 = (int *)type metadata accessor for NCProtoDeviceTokenRequest(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + v2[6];
  uint64_t v4 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = (char *)a1 + v2[7];
  uint64_t v6 = type metadata accessor for NCProtoCallState(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *((unsigned char *)a1 + v2[8]) = 2;
  int v8 = (char *)a1 + v2[9];
  *(void *)int v8 = 0;
  *((_WORD *)v8 + 4) = 256;
  return result;
}

uint64_t (*NCProtoDeviceTokenResponse.deviceToken.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoDeviceTokenResponse.associationVoucherData.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NCProtoDeviceTokenResponse(0) + 24));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *v1;
  }
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t type metadata accessor for NCProtoDeviceTokenResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoDeviceTokenResponse);
}

uint64_t key path getter for NCProtoDeviceTokenResponse.associationVoucherData : NCProtoDeviceTokenResponse@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NCProtoDeviceTokenResponse(0) + 24));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  if (v5 >> 60 == 15) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v3;
  }
  unint64_t v7 = 0xC000000000000000;
  if (v5 >> 60 != 15) {
    unint64_t v7 = v5;
  }
  *a2 = v6;
  a2[1] = v7;

  return outlined copy of Data?(v4, v5);
}

uint64_t key path setter for NCProtoDeviceTokenResponse.associationVoucherData : NCProtoDeviceTokenResponse(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for NCProtoDeviceTokenResponse(0) + 24));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  uint64_t result = outlined consume of Data?(v5, v6);
  *uint64_t v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t NCProtoDeviceTokenResponse.associationVoucherData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NCProtoDeviceTokenResponse(0) + 24);
  uint64_t result = outlined consume of Data?(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*NCProtoDeviceTokenResponse.associationVoucherData.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoDeviceTokenResponse(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NCProtoActiveConversation.handlesHash.modify;
}

BOOL NCProtoDeviceTokenResponse.hasAssociationVoucherData.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NCProtoDeviceTokenResponse(0) + 24) + 8) >> 60 != 15;
}

Swift::Void __swiftcall NCProtoDeviceTokenResponse.clearAssociationVoucherData()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NCProtoDeviceTokenResponse(0) + 24);
  outlined consume of Data?(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_25743E3C0;
}

uint64_t NCProtoDeviceTokenResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoDeviceTokenResponse, a1);
}

uint64_t NCProtoDeviceTokenResponse.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoDeviceTokenResponse);
}

uint64_t (*NCProtoDeviceTokenResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

double NCProtoDeviceTokenResponse.init()@<D0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v2 = type metadata accessor for NCProtoDeviceTokenResponse(0);
  UnknownStorage.init()();
  double result = 0.0;
  *(_OWORD *)((char *)a1 + *(int *)(v2 + 24)) = xmmword_25743E3C0;
  return result;
}

uint64_t (*NCProtoDisconnectRequest.identifierHash.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoDisconnectRequest.isPullingBackToPhone.getter()
{
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.getter(type metadata accessor for NCProtoDisconnectRequest);
}

uint64_t type metadata accessor for NCProtoDisconnectRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoDisconnectRequest);
}

uint64_t key path getter for NCProtoDisconnectRequest.isPullingBackToPhone : NCProtoDisconnectRequest@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(a1, type metadata accessor for NCProtoDisconnectRequest, a2);
}

uint64_t key path setter for NCProtoDisconnectRequest.isPullingBackToPhone : NCProtoDisconnectRequest(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoTransferActiveConversationRequest.isAudioEnabled : NCProtoTransferActiveConversationRequest(a1, a2, a3, a4, type metadata accessor for NCProtoDisconnectRequest);
}

uint64_t NCProtoDisconnectRequest.isPullingBackToPhone.setter(char a1)
{
  return NCProtoTransferActiveConversationRequest.isAudioEnabled.setter(a1, type metadata accessor for NCProtoDisconnectRequest);
}

uint64_t (*NCProtoDisconnectRequest.isPullingBackToPhone.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoDisconnectRequest(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return NCProtoContinuityCall.isMuted.modify;
}

uint64_t NCProtoContinuityCall.isMuted.modify(uint64_t result)
{
  *(unsigned char *)(*(void *)result + *(int *)(result + 8)) = *(unsigned char *)(result + 12);
  return result;
}

BOOL NCProtoDisconnectRequest.hasIsPullingBackToPhone.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoDisconnectRequest(0) + 24)) != 2;
}

Swift::Void __swiftcall NCProtoDisconnectRequest.clearIsPullingBackToPhone()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoDisconnectRequest(0) + 24)) = 2;
}

uint64_t NCProtoDisconnectRequest.disconnectReason.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityCall.status.getter(type metadata accessor for NCProtoDisconnectRequest, a1);
}

uint64_t key path getter for NCProtoDisconnectRequest.disconnectReason : NCProtoDisconnectRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.status : NCProtoContinuityCall(a1, type metadata accessor for NCProtoDisconnectRequest, a2);
}

uint64_t key path setter for NCProtoDisconnectRequest.disconnectReason : NCProtoDisconnectRequest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.status : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoDisconnectRequest);
}

uint64_t NCProtoDisconnectRequest.disconnectReason.setter(uint64_t *a1)
{
  return NCProtoContinuityCall.status.setter(a1, type metadata accessor for NCProtoDisconnectRequest);
}

uint64_t (*NCProtoDisconnectRequest.disconnectReason.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoDisconnectRequest(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 9))
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  else
  {
    char v7 = *((unsigned char *)v4 + 8);
    uint64_t v5 = *v4;
    char v6 = v7 & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return NCProtoActiveConversation.avMode.modify;
}

uint64_t NCProtoActiveConversation.avMode.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16) + *(int *)(result + 12);
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)uint64_t v1 = *(void *)result;
  *(_WORD *)(v1 + 8) = v2;
  return result;
}

BOOL NCProtoDisconnectRequest.hasDisconnectReason.getter()
{
  return NCProtoContinuityCall.hasStatus.getter(type metadata accessor for NCProtoDisconnectRequest);
}

Swift::Void __swiftcall NCProtoDisconnectRequest.clearDisconnectReason()()
{
}

uint64_t NCProtoDisconnectRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoDisconnectRequest, a1);
}

uint64_t NCProtoDisconnectRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoDisconnectRequest);
}

uint64_t (*NCProtoDisconnectRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

unint64_t NCProtoDisconnectRequest.DisconnectReason.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 4;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t static NCProtoDisconnectRequest.DisconnectReason.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoDisconnectRequest.DisconnectReason@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoDisconnectRequest.DisconnectReason.allCases, a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NCProtoDisconnectRequest.DisconnectReason@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return NCProtoDisconnectRequest.DisconnectReason.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDisconnectRequest.DisconnectReason(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t NCProtoDisconnectRequest.init()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_25743E3B0;
  uint64_t v2 = type metadata accessor for NCProtoDisconnectRequest(0);
  uint64_t result = UnknownStorage.init()();
  *((unsigned char *)a1 + *(int *)(v2 + 24)) = 2;
  unint64_t v4 = (char *)a1 + *(int *)(v2 + 28);
  *(void *)unint64_t v4 = 0;
  *((_WORD *)v4 + 4) = 256;
  return result;
}

uint64_t NCProtoDisconnectResponse.success.getter()
{
  return *v0;
}

uint64_t NCProtoDisconnectResponse.success.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*NCProtoDisconnectResponse.success.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoDisconnectResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoDisconnectResponse, a1);
}

uint64_t type metadata accessor for NCProtoDisconnectResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoDisconnectResponse);
}

uint64_t NCProtoDisconnectResponse.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoDisconnectResponse);
}

uint64_t (*NCProtoDisconnectResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoDisconnectResponse.init()@<X0>(unsigned char *a1@<X8>)
{
  *a1 = 0;
  type metadata accessor for NCProtoDisconnectResponse(0);
  return UnknownStorage.init()();
}

uint64_t NCProtoPrepareTransferRequest.activeConversationUuidString.getter()
{
  return NCProtoContinuityCall.uuidString.getter(type metadata accessor for NCProtoPrepareTransferRequest);
}

uint64_t type metadata accessor for NCProtoPrepareTransferRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoPrepareTransferRequest);
}

uint64_t key path getter for NCProtoPrepareTransferRequest.activeConversationUuidString : NCProtoPrepareTransferRequest@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, type metadata accessor for NCProtoPrepareTransferRequest, a2);
}

uint64_t key path setter for NCProtoPrepareTransferRequest.activeConversationUuidString : NCProtoPrepareTransferRequest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoContinuityCall.uuidString : NCProtoContinuityCall(a1, a2, a3, a4, type metadata accessor for NCProtoPrepareTransferRequest);
}

uint64_t NCProtoPrepareTransferRequest.activeConversationUuidString.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoContinuityCall.uuidString.setter(a1, a2, type metadata accessor for NCProtoPrepareTransferRequest);
}

uint64_t (*NCProtoPrepareTransferRequest.activeConversationUuidString.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoPrepareTransferRequest(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoPrepareTransferRequest.hasActiveConversationUuidString.getter()
{
  return NCProtoContinuityCall.hasUuidString.getter(type metadata accessor for NCProtoPrepareTransferRequest);
}

Swift::Void __swiftcall NCProtoPrepareTransferRequest.clearActiveConversationUuidString()()
{
}

uint64_t (*NCProtoPrepareTransferRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoPrepareTransferRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return NCProtoCreateLinkConversationResponse.init()(type metadata accessor for NCProtoPrepareTransferRequest, a1);
}

uint64_t (*NCProtoPrepareTransferResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoAudioRouteTransferRequest.routeIdentifier.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoAudioRouteTransferRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoAudioRouteTransferRequest, a1);
}

uint64_t type metadata accessor for NCProtoAudioRouteTransferRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoAudioRouteTransferRequest);
}

uint64_t NCProtoAudioRouteTransferRequest.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoAudioRouteTransferRequest);
}

uint64_t (*NCProtoAudioRouteTransferRequest.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoAudioRouteTransferRequest.init()@<X0>(void *a1@<X8>)
{
  return NCProtoEndedSessionEvent.init()((void (*)(void))type metadata accessor for NCProtoAudioRouteTransferRequest, a1);
}

uint64_t NCProtoContinuityCall.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t NCProtoContinuityCall.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*NCProtoAudioRouteTransferResponse.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoMemberAssociationPrimaryInfo.conversationGroupUuidString.getter()
{
  return NCProtoActiveConversation.uuidString.getter(type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t key path getter for NCProtoMemberAssociationPrimaryInfo.conversationGroupUuidString : NCProtoMemberAssociationPrimaryInfo@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(a1, type metadata accessor for NCProtoMemberAssociationPrimaryInfo, a2);
}

uint64_t key path setter for NCProtoMemberAssociationPrimaryInfo.conversationGroupUuidString : NCProtoMemberAssociationPrimaryInfo(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoActiveConversation.uuidString : NCProtoActiveConversation(a1, a2, a3, a4, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t NCProtoMemberAssociationPrimaryInfo.conversationGroupUuidString.setter(uint64_t a1, uint64_t a2)
{
  return NCProtoActiveConversation.uuidString.setter(a1, a2, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t (*NCProtoMemberAssociationPrimaryInfo.conversationGroupUuidString.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

BOOL NCProtoMemberAssociationPrimaryInfo.hasConversationGroupUuidString.getter()
{
  return NCProtoActiveConversation.hasUuidString.getter(type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

Swift::Void __swiftcall NCProtoMemberAssociationPrimaryInfo.clearConversationGroupUuidString()()
{
}

uint64_t NCProtoMemberAssociationPrimaryInfo.handleData.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 28));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *v1;
  }
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t key path getter for NCProtoMemberAssociationPrimaryInfo.handleData : NCProtoMemberAssociationPrimaryInfo@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 28));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  if (v5 >> 60 == 15) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v3;
  }
  unint64_t v7 = 0xC000000000000000;
  if (v5 >> 60 != 15) {
    unint64_t v7 = v5;
  }
  *a2 = v6;
  a2[1] = v7;

  return outlined copy of Data?(v4, v5);
}

uint64_t key path setter for NCProtoMemberAssociationPrimaryInfo.handleData : NCProtoMemberAssociationPrimaryInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 28));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  uint64_t result = outlined consume of Data?(v5, v6);
  *uint64_t v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t NCProtoMemberAssociationPrimaryInfo.handleData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 28);
  uint64_t result = outlined consume of Data?(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*NCProtoMemberAssociationPrimaryInfo.handleData.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NCProtoActiveConversation.handlesHash.modify;
}

uint64_t NCProtoActiveConversation.handlesHash.modify(uint64_t a1, char a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16) + *(int *)(a1 + 24);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)v3;
  unint64_t v6 = *(void *)(v3 + 8);
  if (a2)
  {
    outlined copy of Data._Representation(*(void *)a1, v2);
    outlined consume of Data?(v5, v6);
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = v2;
    return outlined consume of Data._Representation(v4, v2);
  }
  else
  {
    uint64_t result = outlined consume of Data?(*(void *)v3, *(void *)(v3 + 8));
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = v2;
  }
  return result;
}

BOOL NCProtoMemberAssociationPrimaryInfo.hasHandleData.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 28) + 8) >> 60 != 15;
}

Swift::Void __swiftcall NCProtoMemberAssociationPrimaryInfo.clearHandleData()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 28);
  outlined consume of Data?(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_25743E3C0;
}

uint64_t NCProtoMemberAssociationPrimaryInfo.identifier.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 32));
  if (v1[8]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t key path getter for NCProtoMemberAssociationPrimaryInfo.identifier : NCProtoMemberAssociationPrimaryInfo@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v5 = (uint64_t *)(a1 + *(int *)(result + 32));
  if (*((unsigned char *)v5 + 8)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v5;
  }
  *a2 = v6;
  return result;
}

uint64_t key path setter for NCProtoMemberAssociationPrimaryInfo.identifier : NCProtoMemberAssociationPrimaryInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t result = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v5 = a2 + *(int *)(result + 32);
  *(void *)uint64_t v5 = v3;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t NCProtoMemberAssociationPrimaryInfo.identifier.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v4 = v1 + *(int *)(result + 32);
  *(void *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*NCProtoMemberAssociationPrimaryInfo.identifier.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return NCProtoActiveConversation.remoteMemberCount.modify;
}

uint64_t NCProtoActiveConversation.remoteMemberCount.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8) + *(int *)(result + 16);
  *(void *)uint64_t v1 = *(void *)result;
  *(unsigned char *)(v1 + 8) = 0;
  return result;
}

BOOL NCProtoMemberAssociationPrimaryInfo.hasIdentifier.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 32) + 8) & 1) == 0;
}

Swift::Void __swiftcall NCProtoMemberAssociationPrimaryInfo.clearIdentifier()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 32);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

uint64_t NCProtoMemberAssociationPrimaryInfo.avcIdentifier.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 36));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for NCProtoMemberAssociationPrimaryInfo.avcIdentifier : NCProtoMemberAssociationPrimaryInfo@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 36));
  unint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v5 = *v3;
    unint64_t v6 = v4;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;

  return swift_bridgeObjectRetain();
}

uint64_t key path setter for NCProtoMemberAssociationPrimaryInfo.avcIdentifier : NCProtoMemberAssociationPrimaryInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = (void *)(a2 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 36));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t NCProtoMemberAssociationPrimaryInfo.avcIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 36));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*NCProtoMemberAssociationPrimaryInfo.avcIdentifier.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 36);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NCProtoContactInfo.organizationName.modify;
}

uint64_t NCProtoContactInfo.organizationName.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)(a1[2] + *((int *)a1 + 6));
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
  }
  return result;
}

BOOL NCProtoMemberAssociationPrimaryInfo.hasAvcIdentifier.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 36) + 8) != 0;
}

Swift::Void __swiftcall NCProtoMemberAssociationPrimaryInfo.clearAvcIdentifier()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0) + 36));
  swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t (*NCProtoMemberAssociationPrimaryInfo.supportedTypes.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoMemberAssociationPrimaryInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoMemberAssociationPrimaryInfo, a1);
}

uint64_t NCProtoMemberAssociationPrimaryInfo.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t (*NCProtoMemberAssociationPrimaryInfo.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType.allCases.getter()
{
  return static NCProtoConversationAVMode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static NCProtoConversationAVMode.allCases.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode(&one-time initialization token for allCases, &static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType.allCases, a1);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NCProtoConversationAVMode@<X0>(void *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  *a3 = *a2;

  return swift_bridgeObjectRetain();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NCProtoConversationAVMode()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NCProtoConversationAVMode()
{
  return Hasher._finalize()();
}

uint64_t NCProtoIDSProxyMessage.message.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of NCProtoContactInfo?(v1, a1, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
}

uint64_t NCProtoIDSProxyMessage.message.setter(uint64_t a1)
{
  return outlined assign with take of NCProtoIDSProxyMessage.OneOf_Message?(a1, v1);
}

uint64_t outlined assign with take of NCProtoIDSProxyMessage.OneOf_Message?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*NCProtoIDSProxyMessage.message.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.rawData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x270FA5388]();
  unint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo?(v2, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v6 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
LABEL_5:
    *(_OWORD *)a1 = xmmword_25743E3B0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0xE000000000000000;
    *(void *)(a1 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    type metadata accessor for NCProtoIDSProxyMessage.RawData(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of NCProtoContactInfo((uint64_t)v5, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    goto LABEL_5;
  }
  return outlined init with take of NCProtoContactInfo((uint64_t)v5, a1, type metadata accessor for NCProtoIDSProxyMessage.RawData);
}

uint64_t key path getter for NCProtoIDSProxyMessage.rawData : NCProtoIDSProxyMessage@<X0>(uint64_t a1@<X8>)
{
  return NCProtoIDSProxyMessage.rawData.getter(a1);
}

uint64_t key path setter for NCProtoIDSProxyMessage.rawData : NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoIDSProxyMessage.rawData : NCProtoIDSProxyMessage(a1, a2, a3, a4, (void (*)(void))type metadata accessor for NCProtoIDSProxyMessage.RawData, type metadata accessor for NCProtoIDSProxyMessage.RawData, type metadata accessor for NCProtoIDSProxyMessage.RawData);
}

uint64_t NCProtoIDSProxyMessage.rawData.setter(uint64_t a1)
{
  return NCProtoIDSProxyMessage.rawData.setter(a1, type metadata accessor for NCProtoIDSProxyMessage.RawData);
}

uint64_t NCProtoIDSProxyMessage.RawData.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_25743E3B0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for NCProtoIDSProxyMessage.RawData(0);
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoIDSProxyMessage.OneOf_Message);
}

uint64_t type metadata accessor for NCProtoIDSProxyMessage.RawData(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoIDSProxyMessage.RawData);
}

void (*NCProtoIDSProxyMessage.rawData.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) - 8) + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of NCProtoContactInfo?(v2, (uint64_t)v6, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v9 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v6, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of NCProtoContactInfo((uint64_t)v6, (uint64_t)v8, type metadata accessor for NCProtoIDSProxyMessage.RawData);
      return NCProtoIDSProxyMessage.rawData.modify;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v6, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  }
  *(_OWORD *)uint64_t v8 = xmmword_25743E3B0;
  v8[2] = 0;
  v8[3] = 0xE000000000000000;
  v8[4] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  UnknownStorage.init()();
  return NCProtoIDSProxyMessage.rawData.modify;
}

void NCProtoIDSProxyMessage.rawData.modify(uint64_t **a1, char a2)
{
}

uint64_t NCProtoIDSProxyMessage.groupUpdate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x270FA5388]();
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo?(v2, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v6 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of NCProtoContactInfo((uint64_t)v5, a1, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v5, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  }
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0xE000000000000000;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_25743E3D0;
  uint64_t v8 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 104) = 0xC000000000000000;
  *(void *)(a1 + 112) = v8;
  *(void *)(a1 + 120) = specialized Dictionary.init(dictionaryLiteral:)(v8, &demangling cache variable for type metadata for (String, NCProtoIDSProxyMessage.ParticipantIDList), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoIDSProxyMessage.ParticipantIDList>, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0xE000000000000000;
  type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for NCProtoIDSProxyMessage.groupUpdate : NCProtoIDSProxyMessage@<X0>(uint64_t a1@<X8>)
{
  return NCProtoIDSProxyMessage.groupUpdate.getter(a1);
}

uint64_t key path setter for NCProtoIDSProxyMessage.groupUpdate : NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoIDSProxyMessage.rawData : NCProtoIDSProxyMessage(a1, a2, a3, a4, (void (*)(void))type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
}

uint64_t NCProtoIDSProxyMessage.groupUpdate.setter(uint64_t a1)
{
  return NCProtoIDSProxyMessage.rawData.setter(a1, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.init()@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0xE000000000000000;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_25743E3D0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 104) = 0xC000000000000000;
  *(void *)(a1 + 112) = v2;
  *(void *)(a1 + 120) = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoIDSProxyMessage.ParticipantIDList), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoIDSProxyMessage.ParticipantIDList>, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0xE000000000000000;
  type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0);
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoIDSProxyMessage.GroupUpdate);
}

void (*NCProtoIDSProxyMessage.groupUpdate.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) - 8) + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = (char *)malloc(v7);
  v4[3] = v8;
  outlined init with copy of NCProtoContactInfo?(v2, (uint64_t)v6, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v9 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v6, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
LABEL_6:
    char *v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0xE000000000000000;
    *((void *)v8 + 3) = 0;
    *((void *)v8 + 4) = 0;
    *((void *)v8 + 6) = 0;
    *((void *)v8 + 7) = 0;
    *((void *)v8 + 5) = 0xE000000000000000;
    v8[64] = 0;
    *((void *)v8 + 9) = 0;
    *((void *)v8 + 10) = 0;
    *(_OWORD *)(v8 + 88) = xmmword_25743E3D0;
    uint64_t v11 = MEMORY[0x263F8EE78];
    *((void *)v8 + 13) = 0xC000000000000000;
    *((void *)v8 + 14) = v11;
    *((void *)v8 + 15) = specialized Dictionary.init(dictionaryLiteral:)(v11, &demangling cache variable for type metadata for (String, NCProtoIDSProxyMessage.ParticipantIDList), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoIDSProxyMessage.ParticipantIDList>, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
    *((void *)v8 + 16) = 0;
    *((void *)v8 + 17) = 0xE000000000000000;
    UnknownStorage.init()();
    return NCProtoIDSProxyMessage.groupUpdate.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of NCProtoContactInfo((uint64_t)v6, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    goto LABEL_6;
  }
  outlined init with take of NCProtoContactInfo((uint64_t)v6, (uint64_t)v8, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
  return NCProtoIDSProxyMessage.groupUpdate.modify;
}

void NCProtoIDSProxyMessage.groupUpdate.modify(uint64_t **a1, char a2)
{
}

uint64_t NCProtoIDSProxyMessage.resource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x270FA5388]();
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo?(v2, (uint64_t)v5, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v6 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      return outlined init with take of NCProtoContactInfo((uint64_t)v5, a1, type metadata accessor for NCProtoIDSProxyMessage.Resource);
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v5, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  }
  *(_OWORD *)a1 = xmmword_25743E3B0;
  *(_OWORD *)(a1 + 16) = xmmword_25743E3B0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(void *)(a1 + 48) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for NCProtoIDSProxyMessage.Resource(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for NCProtoIDSProxyMessage.resource : NCProtoIDSProxyMessage@<X0>(uint64_t a1@<X8>)
{
  return NCProtoIDSProxyMessage.resource.getter(a1);
}

uint64_t key path setter for NCProtoIDSProxyMessage.resource : NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NCProtoIDSProxyMessage.rawData : NCProtoIDSProxyMessage(a1, a2, a3, a4, (void (*)(void))type metadata accessor for NCProtoIDSProxyMessage.Resource, type metadata accessor for NCProtoIDSProxyMessage.Resource, type metadata accessor for NCProtoIDSProxyMessage.Resource);
}

uint64_t key path setter for NCProtoIDSProxyMessage.rawData : NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  a5(0);
  MEMORY[0x270FA5388]();
  uint64_t v12 = (char *)&v15 - v11;
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)&v15 - v11, a6);
  outlined destroy of NCProtoContactInfo?(a2, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  outlined init with take of NCProtoContactInfo((uint64_t)v12, a2, a7);
  uint64_t v13 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a2, 0, 1, v13);
}

uint64_t NCProtoIDSProxyMessage.resource.setter(uint64_t a1)
{
  return NCProtoIDSProxyMessage.rawData.setter(a1, type metadata accessor for NCProtoIDSProxyMessage.Resource);
}

uint64_t NCProtoIDSProxyMessage.rawData.setter(uint64_t a1, uint64_t (*a2)(void))
{
  outlined destroy of NCProtoContactInfo?(v2, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  outlined init with take of NCProtoContactInfo(a1, v2, a2);
  uint64_t v5 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v2, 0, 1, v5);
}

uint64_t NCProtoIDSProxyMessage.Resource.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_25743E3B0;
  *(_OWORD *)(a1 + 16) = xmmword_25743E3B0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(void *)(a1 + 48) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for NCProtoIDSProxyMessage.Resource(0);
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for NCProtoIDSProxyMessage.Resource(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoIDSProxyMessage.Resource);
}

void (*NCProtoIDSProxyMessage.resource.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) - 8) + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of NCProtoContactInfo?(v2, (uint64_t)v6, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v9 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v6, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
LABEL_6:
    _OWORD *v8 = xmmword_25743E3B0;
    v8[1] = xmmword_25743E3B0;
    *((void *)v8 + 4) = 0;
    *((void *)v8 + 5) = 0xE000000000000000;
    *((void *)v8 + 6) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    UnknownStorage.init()();
    return NCProtoIDSProxyMessage.resource.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of NCProtoContactInfo((uint64_t)v6, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    goto LABEL_6;
  }
  outlined init with take of NCProtoContactInfo((uint64_t)v6, (uint64_t)v8, type metadata accessor for NCProtoIDSProxyMessage.Resource);
  return NCProtoIDSProxyMessage.resource.modify;
}

void NCProtoIDSProxyMessage.resource.modify(uint64_t **a1, char a2)
{
}

void NCProtoIDSProxyMessage.rawData.modify(uint64_t **a1, char a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  size_t v7 = *a1;
  uint64_t v8 = (*a1)[4];
  uint64_t v9 = (*a1)[5];
  uint64_t v10 = (void *)(*a1)[2];
  uint64_t v11 = (void *)(*a1)[3];
  uint64_t v13 = **a1;
  uint64_t v12 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of NCProtoContactInfo((*a1)[3], (uint64_t)v10, a5);
    outlined destroy of NCProtoContactInfo?(v13, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    outlined init with take of NCProtoContactInfo((uint64_t)v10, v13, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
    outlined destroy of NCProtoContactInfo((uint64_t)v11, a6);
  }
  else
  {
    outlined destroy of NCProtoContactInfo?(**a1, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    outlined init with take of NCProtoContactInfo((uint64_t)v11, v13, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  free(v11);
  free(v10);
  free(v12);

  free(v7);
}

uint64_t NCProtoIDSProxyMessage.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoIDSProxyMessage, a1);
}

uint64_t type metadata accessor for NCProtoIDSProxyMessage(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoIDSProxyMessage);
}

uint64_t NCProtoIDSProxyMessage.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoIDSProxyMessage);
}

uint64_t (*NCProtoIDSProxyMessage.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoIDSProxyMessage.RawData.messageData.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoIDSProxyMessage.RawData.fromID.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoIDSProxyMessage.RawData.context.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.RawData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContinuityFavorite.unknownFields.getter(type metadata accessor for NCProtoIDSProxyMessage.RawData, a1);
}

uint64_t NCProtoIDSProxyMessage.RawData.unknownFields.setter(uint64_t a1)
{
  return NCProtoContinuityFavorite.unknownFields.setter(a1, type metadata accessor for NCProtoIDSProxyMessage.RawData);
}

uint64_t (*NCProtoIDSProxyMessage.RawData.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoIDSProxyMessage.Resource.resourceData.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoStartedSessionEvent.userAccountInfoData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 16), *(void *)(v2 + 24));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.Resource.metadata.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoIDSProxyMessage.Resource.fromID.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.Resource.context.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoIDSProxyMessage.Resource.context.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.Resource.context.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.Resource.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoContactHandleAnonym.unknownFields.getter(type metadata accessor for NCProtoIDSProxyMessage.Resource, a1);
}

uint64_t NCProtoContactHandleAnonym.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t NCProtoIDSProxyMessage.Resource.unknownFields.setter(uint64_t a1)
{
  return NCProtoContactHandleAnonym.unknownFields.setter(a1, type metadata accessor for NCProtoIDSProxyMessage.Resource);
}

uint64_t NCProtoContactHandleAnonym.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*NCProtoIDSProxyMessage.Resource.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.isInitiator.getter()
{
  return *v0;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.isInitiator.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.isInitiator.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.groupUuid.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.groupUuid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.groupUuid.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.participantID.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.participantID.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.participantID.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.participantDestinationID.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.updateType.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.updateType.setter(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.updateType.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.updateSubtype.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.updateSubtype.setter(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.updateSubtype.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.fromServer.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.fromServer.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 64) = result;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.fromServer.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

double NCProtoIDSProxyMessage.GroupUpdate.serverDate.getter()
{
  return *(double *)(v0 + 72);
}

void NCProtoIDSProxyMessage.GroupUpdate.serverDate.setter(double a1)
{
  *(double *)(v1 + 72) = a1;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.serverDate.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.participantData.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 88));
  return v1;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.participantData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 80), *(void *)(v2 + 88));
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.participantData.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoContactInfo.imageData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 96), *(void *)(v2 + 104));
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.clientContextData.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.members.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.members.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 112) = a1;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.members.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.participantIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.participantIds.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 120) = a1;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.participantIds.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.relaySessionID.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.relaySessionID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return result;
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.relaySessionID.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*NCProtoIDSProxyMessage.GroupUpdate.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t (*NCProtoIDSProxyMessage.ParticipantIDList.identifiers.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.ParticipantIDList.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NCProtoActiveConversation.unknownFields.getter(type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, a1);
}

uint64_t NCProtoIDSProxyMessage.ParticipantIDList.unknownFields.setter(uint64_t a1)
{
  return NCProtoActiveConversation.unknownFields.setter(a1, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
}

uint64_t (*NCProtoIDSProxyMessage.ParticipantIDList.unknownFields.modify())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t NCProtoIDSProxyMessage.ParticipantIDList.init()@<X0>(void *a1@<X8>)
{
  return NCProtoFavoritesDidChangeEvent.init()((void (*)(void))type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, a1);
}

uint64_t NCProtoIDSProxyMessage.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  type metadata accessor for NCProtoIDSProxyMessage(0);
  return UnknownStorage.init()();
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoConversationAVMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoConversationAVMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E3E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "Unknown";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "None";
  *(void *)(v10 + 8) = 4;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "Audio";
  *((void *)v12 + 1) = 5;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "Video";
  *((void *)v14 + 1) = 5;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoConversationState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoConversationState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E3F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "UnknownState";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "Waiting";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "Preparing";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "Joining";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  char *v15 = 4;
  *(void *)uint64_t v16 = "Joined";
  *((void *)v16 + 1) = 6;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "Leaving";
  *((void *)v18 + 1) = 7;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoConversationLetMeInRequestState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoConversationLetMeInRequestState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_25743E400;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 0;
  *(void *)unint64_t v5 = "UnknownLmiState";
  *(void *)(v5 + 8) = 15;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  uint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)uint64_t v9 = "NoneLmiState";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "NotRequested";
  *((void *)v11 + 1) = 12;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  char *v12 = 3;
  *(void *)uint64_t v13 = "Requested";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 4;
  *(void *)uint64_t v14 = "Approved";
  *(void *)(v14 + 8) = 8;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoContactInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoContactInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_25743E410;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "namePrefix";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  uint64_t v9 = v24 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)uint64_t v9 = "givenName";
  *(void *)(v9 + 8) = 9;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v24 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "middleName";
  *((void *)v11 + 1) = 10;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v24 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  char *v12 = 4;
  *(void *)uint64_t v13 = "familyName";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v24 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "nameSuffix";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v24 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "nickname";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v24 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "imageData";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v24 + v3 + 7 * v2);
  v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)v21 = "organizationName";
  *((void *)v21 + 1) = 16;
  v21[16] = 2;
  v8();
  char v22 = v24 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)char v22 = "identifier";
  *(void *)(v22 + 8) = 10;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoContactHandleAnonym._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoContactHandleAnonym._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E3E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "identifier";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "type";
  *(void *)(v10 + 8) = 4;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "localizedLabel";
  *((void *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "label";
  *((void *)v14 + 1) = 5;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoContactHandleAnonym.AnonymType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoContactHandleAnonym.AnonymType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E420;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "Unknown";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "PhoneNumber";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "EmailAddress";
  *(void *)(v11 + 8) = 12;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoContinuityFavorite._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoContinuityFavorite._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E400;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "contactInfo";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "contactIdentifier";
  *(void *)(v10 + 8) = 17;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "anonym";
  *((void *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "actionType";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "bundleIdentifier";
  *(void *)(v15 + 8) = 16;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoAddressableContact._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoAddressableContact._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E420;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "contactInfo";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "handleAnonyms";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "contactIdentifier";
  *(void *)(v11 + 8) = 17;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoActiveConversation._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoActiveConversation._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_25743E430;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "uuidString";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  uint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)uint64_t v9 = "displayName";
  *(void *)(v9 + 8) = 11;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "avMode";
  *((void *)v11 + 1) = 6;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  char *v12 = 4;
  *(void *)uint64_t v13 = "remoteMemberCount";
  *((void *)v13 + 1) = 17;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "remoteMemberContactIdentifiers";
  *((void *)v15 + 1) = 30;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "state";
  *((void *)v17 + 1) = 5;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "letMeInRequestState";
  *((void *)v19 + 1) = 19;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)v21 = "handlesHash";
  *((void *)v21 + 1) = 11;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoContinuityCall._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoContinuityCall._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_25743E430;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "uuidString";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  uint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)uint64_t v9 = "displayName";
  *(void *)(v9 + 8) = 11;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "status";
  *((void *)v11 + 1) = 6;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  char *v12 = 4;
  *(void *)uint64_t v13 = "conversationUuidString";
  *((void *)v13 + 1) = 22;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "isMuted";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "isCameraEnabled";
  *((void *)v17 + 1) = 15;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "info";
  *((void *)v19 + 1) = 4;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)v21 = "callGroupUuidString";
  *((void *)v21 + 1) = 19;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoContinuityCall.Status._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoContinuityCall.Status._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_25743E430;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 0;
  *(void *)unint64_t v5 = "Unknown";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  uint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)uint64_t v9 = "Ringing";
  *(void *)(v9 + 8) = 7;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "Active";
  *((void *)v11 + 1) = 6;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  char *v12 = 3;
  *(void *)uint64_t v13 = "Sending";
  *((void *)v13 + 1) = 7;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "Idle";
  *((void *)v15 + 1) = 4;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "Held";
  *((void *)v17 + 1) = 4;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "Disconnecting";
  *((void *)v19 + 1) = 13;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 7;
  *(void *)v21 = "Disconnected";
  *((void *)v21 + 1) = 12;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoStartedSessionEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoStartedSessionEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E3E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "identifier";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "userAccountInfoData";
  *(void *)(v10 + 8) = 19;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "memberAssociationPrimaryInfo";
  *((void *)v12 + 1) = 28;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "avMode";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoPendingConversationDisconnectedEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoPendingConversationDisconnectedEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E440;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "uuidString";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "disconnectedReason";
  *((void *)v10 + 1) = 18;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoContactUpdateEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoContactUpdateEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E440;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "identifierHash";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "contacts";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoJoinEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoJoinEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E420;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "identifierHash";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "userAccountInfoData";
  *((void *)v10 + 1) = 19;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "policyInfos";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoRecentCallsDidChangeEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoRecentCallsDidChangeEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E420;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "recentCalls";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "contactInfos";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "recentCallsInfo";
  *(void *)(v11 + 8) = 15;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoSuggestionAdvertisement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoSuggestionAdvertisement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E420;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "suggestionIdentifier";
  *(void *)(v6 + 8) = 20;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "deviceIdentifier";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "type";
  *(void *)(v11 + 8) = 4;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoSuggestionAdvertisement.SuggestionType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoSuggestionAdvertisement.SuggestionType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E440;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "PullRequest";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "IntelligentRoutingRecommendation";
  *((void *)v10 + 1) = 32;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoLagunaConnectionRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoLagunaConnectionRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_25743E450;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "recentCalls";
  *(void *)(v4 + 8) = 11;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50718];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "contactInfos";
  *(void *)(v8 + 8) = 12;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *uint64_t v9 = 3;
  *(void *)unint64_t v10 = "callState";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "activeConversations";
  *((void *)v12 + 1) = 19;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 5;
  *(void *)uint64_t v14 = "favorites";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  char *v15 = 6;
  *(void *)uint64_t v16 = "continuityCalls";
  *((void *)v16 + 1) = 15;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "recentCallsInfo";
  *((void *)v18 + 1) = 15;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoAddMemberRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoAddMemberRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E3E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "memberToken";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "conversationIdentifier";
  *(void *)(v10 + 8) = 22;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "context";
  *((void *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "associationVoucherData";
  *((void *)v14 + 1) = 22;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoAddMemberRequest.NearbyConversationPullContext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoAddMemberRequest.NearbyConversationPullContext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E3F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "Unknown";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "PointOfPlayback";
  *(void *)(v10 + 8) = 15;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "ControlCenterWithActivity";
  *((void *)v12 + 1) = 25;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "ControlCenterWithoutActivity";
  *((void *)v14 + 1) = 28;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  char *v15 = 4;
  *(void *)uint64_t v16 = "SystemWake";
  *((void *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "FaceTimeApp";
  *((void *)v18 + 1) = 11;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoAddMemberResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoAddMemberResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E440;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "identifierHash";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "policyInfos";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoPullLagunaSessionToTVRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoPullLagunaSessionToTVRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E440;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "conversationIdentifier";
  *(void *)(v6 + 8) = 22;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "reason";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoPullLagunaSessionToTVRequest.Reason._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoPullLagunaSessionToTVRequest.Reason._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E3E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "Unknown";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "UserInitiated";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "SystemWake";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "Perception";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoTransferActiveConversationRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoTransferActiveConversationRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E420;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "activeConversationUuidString";
  *(void *)(v6 + 8) = 28;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "isAudioEnabled";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "isVideoEnabled";
  *(void *)(v11 + 8) = 14;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoTransferContinuityCallRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoTransferContinuityCallRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E440;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "uuidString";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "isAudioEnabled";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoStartLagunaSessionRequest.RecentCallFetchType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoStartLagunaSessionRequest.RecentCallFetchType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E420;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "Default";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "FaceTime";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "Telephony";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoSenderIdentity._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoSenderIdentity._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E440;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "shortName";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "name";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoCallInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoCallInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E450;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "callerIdSubstring";
  *(void *)(v6 + 8) = 17;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "callIdentifier";
  *(void *)(v10 + 8) = 14;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "displayName";
  *((void *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "isBranded";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  char *v15 = 5;
  *(void *)uint64_t v16 = "contactIdentifiersByHandle";
  *((void *)v16 + 1) = 26;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "SenderIdentity";
  *((void *)v18 + 1) = 14;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  uint64_t v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 7;
  *(void *)uint64_t v20 = "handlesHash";
  *((void *)v20 + 1) = 11;
  v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoStartLagunaSessionResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoStartLagunaSessionResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_25743E3F0;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)uint64_t v4 = "recentCalls";
  *(void *)(v4 + 8) = 11;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50718];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "contactInfos";
  *(void *)(v8 + 8) = 12;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *uint64_t v9 = 3;
  *(void *)unint64_t v10 = "activeConversations";
  *((void *)v10 + 1) = 19;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "favorites";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 5;
  *(void *)uint64_t v14 = "continuityCalls";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  char *v15 = 6;
  *(void *)uint64_t v16 = "recentCallsInfo";
  *((void *)v16 + 1) = 15;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoJoinActiveConversationRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoJoinActiveConversationRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E420;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "activeConversationUuidString";
  *(void *)(v6 + 8) = 28;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "isAudioEnabled";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "isVideoEnabled";
  *(void *)(v11 + 8) = 14;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoGetAddressableContactsResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoGetAddressableContactsResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E440;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "contacts";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "contactSortOrder";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoDestinationCapabilities._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoDestinationCapabilities._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E420;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "supportsTelephonyCalls";
  *(void *)(v6 + 8) = 22;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "supportsFaceTimeAudio";
  *((void *)v10 + 1) = 21;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "supportsFaceTimeVideo";
  *(void *)(v11 + 8) = 21;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoGetDestinationCapabilitiesRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoGetDestinationCapabilitiesRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E440;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "destinationIdentifier";
  *(void *)(v6 + 8) = 21;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "destinationType";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoGetDestinationCapabilitiesRequest.DestinationType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoGetDestinationCapabilitiesRequest.DestinationType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E440;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "Unknown";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "Handle";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoCallState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoCallState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E3E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "isVideoEnabled";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "isAudioEnabled";
  *(void *)(v10 + 8) = 14;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "avMode";
  *((void *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "isCaptioningEnabled";
  *((void *)v14 + 1) = 19;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoDeviceTokenRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoDeviceTokenRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E400;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "conversationIdentifier";
  *(void *)(v6 + 8) = 22;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "memberAssociationPrimaryInfo";
  *(void *)(v10 + 8) = 28;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "callState";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "shouldLaunchFaceTime";
  *((void *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "conversationHandoffType";
  *(void *)(v15 + 8) = 23;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoDeviceTokenRequest.ConversationHandoffType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoDeviceTokenRequest.ConversationHandoffType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E400;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "Unknown";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "Pull";
  *(void *)(v10 + 8) = 4;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "Push";
  *((void *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "Incoming";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "Outgoing";
  *(void *)(v15 + 8) = 8;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoDeviceTokenResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoDeviceTokenResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E440;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "deviceToken";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "associationVoucherData";
  *((void *)v10 + 1) = 22;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoDisconnectRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoDisconnectRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E420;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "identifierHash";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "isPullingBackToPhone";
  *((void *)v10 + 1) = 20;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "disconnectReason";
  *(void *)(v11 + 8) = 16;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoDisconnectRequest.DisconnectReason._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoDisconnectRequest.DisconnectReason._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E3E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "Unknown";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "EndingHandoff";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "PullingBackToPhone";
  *((void *)v12 + 1) = 18;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "BlockedContact";
  *((void *)v14 + 1) = 14;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoMemberAssociationPrimaryInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoMemberAssociationPrimaryInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_25743E400;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "conversationGroupUuidString";
  *(void *)(v5 + 8) = 27;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  uint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)uint64_t v9 = "handleData";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "identifier";
  *((void *)v11 + 1) = 10;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  char *v12 = 4;
  *(void *)uint64_t v13 = "avcIdentifier";
  *((void *)v13 + 1) = 13;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "supportedTypes";
  *(void *)(v14 + 8) = 14;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E420;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "Unknown";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "Expanse";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "IdentityClaiming";
  *(void *)(v11 + 8) = 16;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoIDSProxyMessage._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoIDSProxyMessage._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E420;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "rawData";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "groupUpdate";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "resource";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoIDSProxyMessage.RawData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoIDSProxyMessage.RawData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E420;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "messageData";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "fromID";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "context";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoIDSProxyMessage.Resource._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoIDSProxyMessage.Resource._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25743E3E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "resourceData";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "metadata";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "fromID";
  *((void *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "context";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  uint64_t v32;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NCProtoIDSProxyMessage.GroupUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NCProtoIDSProxyMessage.GroupUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_25743E460;
  uint64_t v4 = v32 + v3;
  unint64_t v5 = v32 + v3 + v1[14];
  *(void *)(v32 + v3) = 1;
  *(void *)unint64_t v5 = "isInitiator";
  *(void *)(v5 + 8) = 11;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  uint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)uint64_t v9 = "groupUUID";
  *(void *)(v9 + 8) = 9;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "participantID";
  *((void *)v11 + 1) = 13;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  char *v12 = 4;
  *(void *)uint64_t v13 = "participantDestinationID";
  *((void *)v13 + 1) = 24;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "updateType";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "updateSubtype";
  *((void *)v17 + 1) = 13;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "fromServer";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)v21 = "serverDate";
  *((void *)v21 + 1) = 10;
  v21[16] = 2;
  v8();
  char v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)char v22 = "participantData";
  *(void *)(v22 + 8) = 15;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  unint64_t v23 = (void *)(v4 + 9 * v2);
  v24 = (char *)v23 + v1[14];
  *unint64_t v23 = 10;
  *(void *)v24 = "clientContextData";
  *((void *)v24 + 1) = 17;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "members";
  *((void *)v26 + 1) = 7;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  BOOL v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)BOOL v28 = "participantIDs";
  *((void *)v28 + 1) = 14;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v4 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 13;
  *(void *)uint64_t v30 = "relaySessionID";
  *((void *)v30 + 1) = 14;
  v30[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t static NCProtoConversationAVMode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoConversationAVMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoConversationAVMode._protobuf_nameMap, a1);
}

uint64_t static NCProtoConversationState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoConversationState._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoConversationState._protobuf_nameMap, a1);
}

uint64_t static NCProtoConversationLetMeInRequestState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoConversationLetMeInRequestState._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationLetMeInRequestState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoConversationLetMeInRequestState._protobuf_nameMap, a1);
}

unint64_t static NCProtoContactInfo.protoMessageName.getter()
{
  return 0xD000000000000013;
}

uint64_t static NCProtoContactInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContactInfo._protobuf_nameMap, a1);
}

uint64_t NCProtoContactInfo.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_8;
        case 7:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_8;
        case 8:
        case 9:
          type metadata accessor for NCProtoContactInfo(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_8:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoContactInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = v3;
  unint64_t v9 = v5[1];
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v10 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    unint64_t v12 = v5[3];
    uint64_t v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0) {
      uint64_t v13 = v5[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v13 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
    {
      unint64_t v14 = v5[5];
      uint64_t v15 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000) == 0) {
        uint64_t v15 = v5[4] & 0xFFFFFFFFFFFFLL;
      }
      if (!v15 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
      {
        unint64_t v16 = v5[7];
        uint64_t v17 = HIBYTE(v16) & 0xF;
        if ((v16 & 0x2000000000000000) == 0) {
          uint64_t v17 = v5[6] & 0xFFFFFFFFFFFFLL;
        }
        if (!v17 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
        {
          unint64_t v18 = v5[9];
          uint64_t v19 = HIBYTE(v18) & 0xF;
          if ((v18 & 0x2000000000000000) == 0) {
            uint64_t v19 = v5[8] & 0xFFFFFFFFFFFFLL;
          }
          if (!v19 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
          {
            unint64_t v20 = v5[11];
            uint64_t v21 = HIBYTE(v20) & 0xF;
            if ((v20 & 0x2000000000000000) == 0) {
              uint64_t v21 = v5[10] & 0xFFFFFFFFFFFFLL;
            }
            if (!v21 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
            {
              uint64_t v22 = v5[12];
              unint64_t v23 = v5[13];
              switch(v23 >> 62)
              {
                case 1uLL:
                  uint64_t v24 = (int)v22;
                  uint64_t v25 = v22 >> 32;
                  goto LABEL_30;
                case 2uLL:
                  uint64_t v24 = *(void *)(v22 + 16);
                  uint64_t v25 = *(void *)(v22 + 24);
LABEL_30:
                  if (v24 != v25) {
                    goto LABEL_31;
                  }
                  goto LABEL_32;
                case 3uLL:
                  goto LABEL_32;
                default:
                  if ((v23 & 0xFF000000000000) == 0) {
                    goto LABEL_32;
                  }
LABEL_31:
                  uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
                  if (!v4)
                  {
LABEL_32:
                    uint64_t result = closure #1 in NCProtoContactInfo.traverse<A>(visitor:)((uint64_t)v5, a1, a2, a3, type metadata accessor for NCProtoContactInfo);
                    if (!v4)
                    {
                      closure #2 in NCProtoContactInfo.traverse<A>(visitor:)((uint64_t)v5);
                      type metadata accessor for NCProtoContactInfo(0);
                      uint64_t result = UnknownStorage.traverse<A>(visitor:)();
                    }
                  }
                  break;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t closure #2 in NCProtoContactInfo.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoContactInfo(0);
  if (*(void *)(a1 + *(int *)(result + 52) + 8)) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NCProtoContactInfo.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoContactInfo, &lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo);
}

uint64_t protocol witness for Message.init() in conformance NCProtoContactInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0xE000000000000000;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0xE000000000000000;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0xE000000000000000;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0xE000000000000000;
  *(_OWORD *)(a2 + 96) = xmmword_25743E3B0;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 52);
  unint64_t v6 = (void *)(a2 + *(int *)(a1 + 48));
  *unint64_t v6 = 0;
  v6[1] = 0;
  uint64_t v7 = (void *)(a2 + v5);
  *uint64_t v7 = 0;
  v7[1] = 0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoContactInfo()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.isInitialized.getter in conformance NCProtoContactInfo()
{
  return MEMORY[0x270F44C98]();
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NCProtoContactInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NCProtoContactInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance NCProtoContactInfo())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoContactInfo()
{
  return NCProtoContactInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoContactInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoContactInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance NCProtoContactInfo()
{
  return MEMORY[0x270F44CD8]();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoContactInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance NCProtoContactInfo()
{
  return MEMORY[0x270F44AD8]();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoContactInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContactInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoContactInfo(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoContactInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoContactHandleAnonym.protoMessageName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t static NCProtoContactHandleAnonym._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContactHandleAnonym._protobuf_nameMap, a1);
}

uint64_t NCProtoContactHandleAnonym.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
          lazy protocol witness table accessor for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoContactHandleAnonym.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!v0[2]
      || (lazy protocol witness table accessor for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      unint64_t v5 = v0[5];
      uint64_t v6 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0) {
        uint64_t v6 = v0[4] & 0xFFFFFFFFFFFFLL;
      }
      if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        unint64_t v7 = v0[7];
        uint64_t v8 = HIBYTE(v7) & 0xF;
        if ((v7 & 0x2000000000000000) == 0) {
          uint64_t v8 = v0[6] & 0xFFFFFFFFFFFFLL;
        }
        if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for NCProtoContactHandleAnonym(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

Swift::Int NCProtoContactHandleAnonym.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoContactHandleAnonym, &lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, (void (*)(uint64_t))type metadata accessor for NCProtoContactHandleAnonym);
}

uint64_t protocol witness for Message.init() in conformance NCProtoContactHandleAnonym@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0xE000000000000000;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoContactHandleAnonym()
{
  return 0xD00000000000001BLL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance NCProtoContactHandleAnonym())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoContactHandleAnonym()
{
  return NCProtoContactHandleAnonym.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoContactHandleAnonym()
{
  return NCProtoContactHandleAnonym.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoContactHandleAnonym(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, (void (*)(uint64_t))type metadata accessor for NCProtoContactHandleAnonym);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoContactHandleAnonym@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContactHandleAnonym._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoContactHandleAnonym(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, (void (*)(uint64_t))type metadata accessor for NCProtoContactHandleAnonym);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoContactHandleAnonym(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, (void (*)(uint64_t))type metadata accessor for NCProtoContactHandleAnonym);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t static NCProtoContactHandleAnonym.AnonymType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContactHandleAnonym.AnonymType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoContactHandleAnonym.AnonymType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContactHandleAnonym.AnonymType._protobuf_nameMap, a1);
}

unint64_t static NCProtoContinuityFavorite.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static NCProtoContinuityFavorite._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContinuityFavorite._protobuf_nameMap, a1);
}

uint64_t NCProtoContinuityFavorite.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in NCProtoContinuityFavorite.decodeMessage<A>(decoder:)();
          break;
        case 2:
        case 4:
        case 5:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
          closure #3 in NCProtoContinuityFavorite.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoContinuityFavorite.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in NCProtoContinuityFavorite.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t NCProtoContinuityFavorite.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in NCProtoContinuityFavorite.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    unint64_t v9 = v3[1];
    uint64_t v10 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0) {
      uint64_t v10 = *v3 & 0xFFFFFFFFFFFFLL;
    }
    if (v10) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    }
    closure #2 in NCProtoContinuityFavorite.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    unint64_t v11 = v3[3];
    uint64_t v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0) {
      uint64_t v12 = v3[2] & 0xFFFFFFFFFFFFLL;
    }
    if (v12) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    }
    unint64_t v13 = v3[5];
    uint64_t v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0) {
      uint64_t v14 = v3[4] & 0xFFFFFFFFFFFFLL;
    }
    if (v14) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    }
    type metadata accessor for NCProtoContinuityFavorite(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in NCProtoContinuityFavorite.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  MEMORY[0x270FA5388]();
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NCProtoContactInfo(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NCProtoContinuityFavorite(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v11 + 32), (uint64_t)v6, &demangling cache variable for type metadata for NCProtoContactInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return outlined destroy of NCProtoContactInfo?((uint64_t)v6, &demangling cache variable for type metadata for NCProtoContactInfo?);
  }
  outlined init with take of NCProtoContactInfo((uint64_t)v6, (uint64_t)v10, type metadata accessor for NCProtoContactInfo);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoContactInfo);
}

uint64_t closure #2 in NCProtoContinuityFavorite.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  MEMORY[0x270FA5388]();
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NCProtoContactHandleAnonym(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NCProtoContinuityFavorite(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v11 + 36), (uint64_t)v6, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return outlined destroy of NCProtoContactInfo?((uint64_t)v6, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  }
  outlined init with take of NCProtoContactInfo((uint64_t)v6, (uint64_t)v10, type metadata accessor for NCProtoContactHandleAnonym);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, (void (*)(uint64_t))type metadata accessor for NCProtoContactHandleAnonym);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoContactHandleAnonym);
}

Swift::Int NCProtoContinuityFavorite.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoContinuityFavorite, &lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityFavorite);
}

uint64_t protocol witness for Message.init() in conformance NCProtoContinuityFavorite@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  a2[4] = 0;
  a2[5] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for NCProtoContactInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = (char *)a2 + *(int *)(a1 + 36);
  uint64_t v7 = type metadata accessor for NCProtoContactHandleAnonym(0);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoContinuityFavorite()
{
  return 0xD00000000000001ALL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance NCProtoContinuityFavorite())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoContinuityFavorite()
{
  return NCProtoContinuityFavorite.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoContinuityFavorite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoContinuityFavorite.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoContinuityFavorite(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityFavorite);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoContinuityFavorite@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContinuityFavorite._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoContinuityFavorite(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityFavorite);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoContinuityFavorite(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityFavorite);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoAddressableContact.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static NCProtoAddressableContact._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddressableContact._protobuf_nameMap, a1);
}

uint64_t NCProtoAddressableContact.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for NCProtoContactHandleAnonym(0);
        lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, (void (*)(uint64_t))type metadata accessor for NCProtoContactHandleAnonym);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        closure #1 in NCProtoAddressableContact.decodeMessage<A>(decoder:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t closure #1 in NCProtoAddressableContact.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t NCProtoAddressableContact.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in NCProtoAddressableContact.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*v3 + 16))
    {
      type metadata accessor for NCProtoContactHandleAnonym(0);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, (void (*)(uint64_t))type metadata accessor for NCProtoContactHandleAnonym);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    unint64_t v6 = v3[2];
    uint64_t v7 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000) == 0) {
      uint64_t v7 = v3[1] & 0xFFFFFFFFFFFFLL;
    }
    if (v7) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    }
    type metadata accessor for NCProtoAddressableContact(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in NCProtoAddressableContact.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  MEMORY[0x270FA5388]();
  unint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NCProtoContactInfo(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NCProtoAddressableContact(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v11 + 28), (uint64_t)v6, &demangling cache variable for type metadata for NCProtoContactInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return outlined destroy of NCProtoContactInfo?((uint64_t)v6, &demangling cache variable for type metadata for NCProtoContactInfo?);
  }
  outlined init with take of NCProtoContactInfo((uint64_t)v6, (uint64_t)v10, type metadata accessor for NCProtoContactInfo);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoContactInfo);
}

Swift::Int NCProtoAddressableContact.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoAddressableContact, &lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, (void (*)(uint64_t))type metadata accessor for NCProtoAddressableContact);
}

uint64_t protocol witness for Message.init() in conformance NCProtoAddressableContact@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  a2[1] = 0;
  a2[2] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for NCProtoContactInfo(0);
  unint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoAddressableContact()
{
  return 0xD00000000000001ALL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance NCProtoAddressableContact())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoAddressableContact()
{
  return NCProtoAddressableContact.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoAddressableContact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoAddressableContact.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoAddressableContact(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, (void (*)(uint64_t))type metadata accessor for NCProtoAddressableContact);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoAddressableContact@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddressableContact._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoAddressableContact(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, (void (*)(uint64_t))type metadata accessor for NCProtoAddressableContact);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoAddressableContact(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, (void (*)(uint64_t))type metadata accessor for NCProtoAddressableContact);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoActiveConversation.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static NCProtoActiveConversation._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoActiveConversation._protobuf_nameMap, a1);
}

uint64_t NCProtoActiveConversation.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
        type metadata accessor for NCProtoActiveConversation(0);
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        break;
      case 3:
        closure #3 in NCProtoActiveConversation.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(void))type metadata accessor for NCProtoActiveConversation);
        break;
      case 4:
        type metadata accessor for NCProtoActiveConversation(0);
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
        break;
      case 5:
        dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
        break;
      case 6:
        closure #6 in NCProtoActiveConversation.decodeMessage<A>(decoder:)();
        break;
      case 7:
        closure #7 in NCProtoActiveConversation.decodeMessage<A>(decoder:)();
        break;
      case 8:
        type metadata accessor for NCProtoActiveConversation(0);
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t closure #6 in NCProtoActiveConversation.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t closure #7 in NCProtoActiveConversation.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t NCProtoActiveConversation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in NCProtoActiveConversation.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoActiveConversation);
  if (!v4)
  {
    closure #2 in NCProtoActiveConversation.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoActiveConversation);
    closure #3 in NCProtoActiveConversation.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoActiveConversation);
    closure #4 in NCProtoActiveConversation.traverse<A>(visitor:)(v3);
    if (*(void *)(*(void *)v3 + 16)) {
      dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)();
    }
    closure #5 in NCProtoActiveConversation.traverse<A>(visitor:)(v3);
    closure #6 in NCProtoActiveConversation.traverse<A>(visitor:)(v3);
    closure #7 in NCProtoActiveConversation.traverse<A>(visitor:)(v3);
    type metadata accessor for NCProtoActiveConversation(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #4 in NCProtoActiveConversation.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoActiveConversation(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 36) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #5 in NCProtoActiveConversation.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoActiveConversation(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 40) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type NCProtoConversationState and conformance NCProtoConversationState();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #6 in NCProtoActiveConversation.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoActiveConversation(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 44) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type NCProtoConversationLetMeInRequestState and conformance NCProtoConversationLetMeInRequestState();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #7 in NCProtoActiveConversation.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoActiveConversation(0);
  uint64_t v3 = a1 + *(int *)(result + 48);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

Swift::Int NCProtoActiveConversation.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoActiveConversation, &lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversation);
}

double protocol witness for Message.init() in conformance NCProtoActiveConversation@<D0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  uint64_t v4 = a1[7];
  uint64_t v5 = (void *)((char *)a2 + a1[6]);
  *uint64_t v5 = 0;
  v5[1] = 0;
  unint64_t v6 = (void *)((char *)a2 + v4);
  *unint64_t v6 = 0;
  v6[1] = 0;
  uint64_t v7 = a1[9];
  uint64_t v8 = (char *)a2 + a1[8];
  *(void *)uint64_t v8 = 0;
  *((_WORD *)v8 + 4) = 256;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  uint64_t v10 = a1[11];
  uint64_t v11 = (char *)a2 + a1[10];
  *(void *)uint64_t v11 = 0;
  *((_WORD *)v11 + 4) = 256;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v12 = 0;
  *((_WORD *)v12 + 4) = 256;
  double result = 0.0;
  *(_OWORD *)((char *)a2 + a1[12]) = xmmword_25743E3C0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoActiveConversation()
{
  return 0xD00000000000001ALL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance NCProtoActiveConversation())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoActiveConversation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoActiveConversation.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoActiveConversation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoActiveConversation.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoActiveConversation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversation);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoActiveConversation@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoActiveConversation._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoActiveConversation(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversation);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoActiveConversation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversation);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoContinuityCall.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t static NCProtoContinuityCall._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContinuityCall._protobuf_nameMap, a1);
}

uint64_t NCProtoContinuityCall.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 4:
        case 8:
          type metadata accessor for NCProtoContinuityCall(0);
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_9;
        case 3:
          uint64_t v12 = v11;
          closure #3 in NCProtoContinuityCall.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(void))type metadata accessor for NCProtoContinuityCall, (void (*)(void))lazy protocol witness table accessor for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status);
          goto LABEL_9;
        case 5:
        case 6:
          type metadata accessor for NCProtoContinuityCall(0);
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_9;
        case 7:
          uint64_t v12 = v11;
          closure #7 in NCProtoContinuityCall.decodeMessage<A>(decoder:)();
LABEL_9:
          uint64_t v11 = v12;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #7 in NCProtoContinuityCall.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t NCProtoContinuityCall.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in NCProtoContinuityCall.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoContinuityCall);
  if (!v4)
  {
    closure #1 in NCProtoActiveConversation.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoContinuityCall);
    closure #3 in NCProtoContinuityCall.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoContinuityCall, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status);
    closure #4 in NCProtoContinuityCall.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoContinuityCall);
    closure #5 in NCProtoContinuityCall.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoContinuityCall);
    closure #6 in NCProtoContinuityCall.traverse<A>(visitor:)(v3);
    closure #7 in NCProtoContinuityCall.traverse<A>(visitor:)(v3, a1, a2, a3);
    closure #1 in NCProtoContactInfo.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoContinuityCall);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in NCProtoActiveConversation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(void *)(a1 + *(int *)(result + 24) + 8)) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #6 in NCProtoContinuityCall.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoContinuityCall(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 40)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #7 in NCProtoContinuityCall.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
  MEMORY[0x270FA5388]();
  unint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NCProtoCallInfo(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388]();
  char v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NCProtoContinuityCall(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v11 + 44), (uint64_t)v6, &demangling cache variable for type metadata for NCProtoCallInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return outlined destroy of NCProtoContactInfo?((uint64_t)v6, &demangling cache variable for type metadata for NCProtoCallInfo?);
  }
  outlined init with take of NCProtoContactInfo((uint64_t)v6, (uint64_t)v10, type metadata accessor for NCProtoCallInfo);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, (void (*)(uint64_t))type metadata accessor for NCProtoCallInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoCallInfo);
}

uint64_t closure #1 in NCProtoContactInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(void *)(a1 + *(int *)(result + 48) + 8)) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NCProtoContinuityCall.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoContinuityCall, &lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCall);
}

uint64_t protocol witness for Message.init() in conformance NCProtoContinuityCall@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = (void *)(a2 + a1[5]);
  *uint64_t v5 = 0;
  v5[1] = 0;
  unint64_t v6 = (void *)(a2 + v4);
  *unint64_t v6 = 0;
  v6[1] = 0;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(void *)uint64_t v8 = 0;
  *(_WORD *)(v8 + 8) = 256;
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v9 = 0;
  v9[1] = 0;
  uint64_t v10 = a1[10];
  *(unsigned char *)(a2 + a1[9]) = 2;
  *(unsigned char *)(a2 + v10) = 2;
  uint64_t v11 = a2 + a1[11];
  uint64_t v12 = type metadata accessor for NCProtoCallInfo(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v14 = (void *)(a2 + a1[12]);
  void *v14 = 0;
  v14[1] = 0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoContinuityCall()
{
  return 0xD000000000000016;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance NCProtoContinuityCall())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoContinuityCall(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoContinuityCall.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoContinuityCall(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoContinuityCall.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoContinuityCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCall);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoContinuityCall@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContinuityCall._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoContinuityCall(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCall);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoContinuityCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCall);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t static NCProtoContinuityCall.Status._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContinuityCall.Status._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoContinuityCall.Status@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContinuityCall.Status._protobuf_nameMap, a1);
}

unint64_t static NCProtoStartedSessionEvent.protoMessageName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t static NCProtoStartedSessionEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartedSessionEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoStartedSessionEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 3:
          closure #3 in NCProtoStartedSessionEvent.decodeMessage<A>(decoder:)();
          break;
        case 4:
          closure #3 in NCProtoActiveConversation.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(void))type metadata accessor for NCProtoStartedSessionEvent);
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in NCProtoStartedSessionEvent.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in NCProtoActiveConversation.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t NCProtoStartedSessionEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t v11 = v3[2];
    unint64_t v12 = v3[3];
    switch(v12 >> 62)
    {
      case 1uLL:
        if ((int)v11 != v11 >> 32) {
          goto LABEL_11;
        }
        goto LABEL_12;
      case 2uLL:
        if (*(void *)(v11 + 16) != *(void *)(v11 + 24)) {
          goto LABEL_11;
        }
        goto LABEL_12;
      case 3uLL:
        goto LABEL_12;
      default:
        if ((v12 & 0xFF000000000000) == 0) {
          goto LABEL_12;
        }
LABEL_11:
        uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
        if (!v4)
        {
LABEL_12:
          uint64_t result = closure #1 in NCProtoStartedSessionEvent.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
          if (!v4)
          {
            closure #3 in NCProtoActiveConversation.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for NCProtoStartedSessionEvent);
            type metadata accessor for NCProtoStartedSessionEvent(0);
            uint64_t result = UnknownStorage.traverse<A>(visitor:)();
          }
        }
        break;
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoStartedSessionEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  MEMORY[0x270FA5388]();
  unint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388]();
  char v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NCProtoStartedSessionEvent(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v11 + 28), (uint64_t)v6, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return outlined destroy of NCProtoContactInfo?((uint64_t)v6, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  }
  outlined init with take of NCProtoContactInfo((uint64_t)v6, (uint64_t)v10, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, (void (*)(uint64_t))type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t closure #3 in NCProtoActiveConversation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 32) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NCProtoStartedSessionEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoStartedSessionEvent, &lazy protocol witness table cache variable for type NCProtoStartedSessionEvent and conformance NCProtoStartedSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoStartedSessionEvent);
}

uint64_t protocol witness for Message.init() in conformance NCProtoStartedSessionEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(_OWORD *)(a2 + 16) = xmmword_25743E3B0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a2 + *(int *)(a1 + 32);
  *(void *)uint64_t v7 = 0;
  *(_WORD *)(v7 + 8) = 256;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoStartedSessionEvent()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoStartedSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoStartedSessionEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoStartedSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoStartedSessionEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoStartedSessionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartedSessionEvent and conformance NCProtoStartedSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoStartedSessionEvent);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoStartedSessionEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartedSessionEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoStartedSessionEvent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartedSessionEvent and conformance NCProtoStartedSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoStartedSessionEvent);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoStartedSessionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartedSessionEvent and conformance NCProtoStartedSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoStartedSessionEvent);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoEndedSessionEvent.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1)
{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoEndedSessionEvent._protobuf_nameMap, (uint64_t)"identifier", 10);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoFavoritesDidChangeEvent._protobuf_nameMap, (uint64_t)"favorites", 9);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoActiveConversationsDidChangeEvent._protobuf_nameMap, (uint64_t)"activeConversations", 19);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoContinuityCallsDidChangeEvent._protobuf_nameMap, (uint64_t)"continuityCalls", 15);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoSuggestionAdvertisementDidChangeEvent._protobuf_nameMap, (uint64_t)"advertisement", 13);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoLagunaConnectionResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoDeviceLaunchedEvent._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoTVLaunchedEvent._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoCancelAddMemberEvent._protobuf_nameMap, (uint64_t)"conversationIdentifier", 22);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoEndLagunaSessionEvent._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoPolicyInfoUpdatedEvent._protobuf_nameMap, (uint64_t)"policyInfos", 11);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoPullLagunaSessionToTVResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoTransferActiveConversationResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoTransferContinuityCallResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoStartLagunaSessionRequest._protobuf_nameMap, (uint64_t)"recentCallFetchTypes", 20);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoStartConversationRequest._protobuf_nameMap, (uint64_t)"avMode", 6);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoStartConversationResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoJoinActiveConversationResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoCreateLinkConversationRequest._protobuf_nameMap, (uint64_t)"conversationUrlString", 21);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoCreateLinkConversationResponse._protobuf_nameMap, (uint64_t)"uuidString", 10);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoLinkConversationSendLetMeInRequest._protobuf_nameMap, (uint64_t)"uuidString", 10);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoLinkConversationSendLetMeInResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoLinkConversationCancelRequest._protobuf_nameMap, (uint64_t)"uuidString", 10);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoLinkConversationCancelResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoDeclineContinuityCallRequest._protobuf_nameMap, (uint64_t)"uuidString", 10);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoDeclineContinuityCallResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoGetAddressableContactsRequest._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoGetImageForContactRequest._protobuf_nameMap, (uint64_t)"contactIdentifier", 17);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoGetImageForContactResponse._protobuf_nameMap, (uint64_t)"imageData", 9);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoAddConversationParticipantsRequest._protobuf_nameMap, (uint64_t)"handleValues", 12);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoAddConversationParticipantsResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoGetCallDisplayDetailsRequest._protobuf_nameMap, (uint64_t)"callUUID", 8);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoGetCallDisplayDetailsResponse._protobuf_nameMap, (uint64_t)"callInfo", 8);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoGetDestinationCapabilitiesResponse._protobuf_nameMap, (uint64_t)"capabilities", 12);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoCallStateRequest._protobuf_nameMap, (uint64_t)"identifierHash", 14);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoCallStateResponse._protobuf_nameMap, (uint64_t)"callState", 9);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoDisconnectResponse._protobuf_nameMap, (uint64_t)"success", 7);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoPrepareTransferRequest._protobuf_nameMap, (uint64_t)"activeConversationUuidString", 28);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoPrepareTransferResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoAudioRouteTransferRequest._protobuf_nameMap, (uint64_t)"routeIdentifier", 15);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoAudioRouteTransferResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NCProtoIDSProxyMessage.ParticipantIDList._protobuf_nameMap, (uint64_t)"identifiers", 11);
}

uint64_t static NCProtoEndedSessionEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoEndedSessionEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x263F50660]);
}

uint64_t NCProtoEndedSessionEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for NCProtoEndedSessionEvent);
}

uint64_t static NCProtoEndedSessionEvent.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static NCProtoCreateLinkConversationRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoEndedSessionEvent) & 1;
}

Swift::Int NCProtoEndedSessionEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoEndedSessionEvent, &lazy protocol witness table cache variable for type NCProtoEndedSessionEvent and conformance NCProtoEndedSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoEndedSessionEvent);
}

uint64_t protocol witness for Message.init() in conformance NCProtoEndedSessionEvent@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoEndedSessionEvent()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoEndedSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoEndedSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoEndedSessionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndedSessionEvent and conformance NCProtoEndedSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoEndedSessionEvent);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoEndedSessionEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoEndedSessionEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoEndedSessionEvent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndedSessionEvent and conformance NCProtoEndedSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoEndedSessionEvent);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoEndedSessionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndedSessionEvent and conformance NCProtoEndedSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoEndedSessionEvent);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoEndedSessionEvent(char *a1, char *a2)
{
  return specialized static NCProtoCreateLinkConversationRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoEndedSessionEvent) & 1;
}

unint64_t static NCProtoPendingConversationDisconnectedEvent.protoMessageName.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t static NCProtoPendingConversationDisconnectedEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPendingConversationDisconnectedEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoPendingConversationDisconnectedEvent.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoPendingConversationDisconnectedEvent.traverse<A>(visitor:)()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(_DWORD *)(v0 + 16)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for NCProtoPendingConversationDisconnectedEvent(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int NCProtoPendingConversationDisconnectedEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoPendingConversationDisconnectedEvent, &lazy protocol witness table cache variable for type NCProtoPendingConversationDisconnectedEvent and conformance NCProtoPendingConversationDisconnectedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoPendingConversationDisconnectedEvent);
}

uint64_t protocol witness for Message.init() in conformance NCProtoPendingConversationDisconnectedEvent@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(_DWORD *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoPendingConversationDisconnectedEvent()
{
  return 0xD00000000000002CLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoPendingConversationDisconnectedEvent()
{
  return NCProtoPendingConversationDisconnectedEvent.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoPendingConversationDisconnectedEvent()
{
  return NCProtoPendingConversationDisconnectedEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoPendingConversationDisconnectedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPendingConversationDisconnectedEvent and conformance NCProtoPendingConversationDisconnectedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoPendingConversationDisconnectedEvent);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoPendingConversationDisconnectedEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPendingConversationDisconnectedEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoPendingConversationDisconnectedEvent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPendingConversationDisconnectedEvent and conformance NCProtoPendingConversationDisconnectedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoPendingConversationDisconnectedEvent);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoPendingConversationDisconnectedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPendingConversationDisconnectedEvent and conformance NCProtoPendingConversationDisconnectedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoPendingConversationDisconnectedEvent);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoContactUpdateEvent.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static NCProtoContactUpdateEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContactUpdateEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoContactUpdateEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoContactUpdateEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in NCProtoContactUpdateEvent.decodeMessage<A>(decoder:));
}

uint64_t closure #2 in NCProtoContactUpdateEvent.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t NCProtoContactUpdateEvent.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        if (!*(void *)(v0[2] + 16)
          || (type metadata accessor for ProtobufString(),
              type metadata accessor for NCProtoContactInfo(0),
              lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo), lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo), uint64_t result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
        {
          type metadata accessor for NCProtoContactUpdateEvent(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
      return result;
  }
}

uint64_t static NCProtoContactUpdateEvent.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static NCProtoContactUpdateEvent.== infix(_:_:)(a1, a2, specialized static Dictionary<>.== infix(_:_:), type metadata accessor for NCProtoContactUpdateEvent) & 1;
}

Swift::Int NCProtoContactUpdateEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoContactUpdateEvent, &lazy protocol witness table cache variable for type NCProtoContactUpdateEvent and conformance NCProtoContactUpdateEvent, (void (*)(uint64_t))type metadata accessor for NCProtoContactUpdateEvent);
}

uint64_t protocol witness for Message.init() in conformance NCProtoContactUpdateEvent@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_25743E3B0;
  *(void *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78], &demangling cache variable for type metadata for (String, NCProtoContactInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoContactInfo>, type metadata accessor for NCProtoContactInfo, type metadata accessor for NCProtoContactInfo);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoContactUpdateEvent()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoContactUpdateEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoContactUpdateEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoContactUpdateEvent()
{
  return NCProtoContactUpdateEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoContactUpdateEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactUpdateEvent and conformance NCProtoContactUpdateEvent, (void (*)(uint64_t))type metadata accessor for NCProtoContactUpdateEvent);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoContactUpdateEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContactUpdateEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoContactUpdateEvent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactUpdateEvent and conformance NCProtoContactUpdateEvent, (void (*)(uint64_t))type metadata accessor for NCProtoContactUpdateEvent);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoContactUpdateEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactUpdateEvent and conformance NCProtoContactUpdateEvent, (void (*)(uint64_t))type metadata accessor for NCProtoContactUpdateEvent);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoContactUpdateEvent(uint64_t *a1, uint64_t *a2)
{
  return specialized static NCProtoContactUpdateEvent.== infix(_:_:)(a1, a2, specialized static Dictionary<>.== infix(_:_:), type metadata accessor for NCProtoContactUpdateEvent) & 1;
}

unint64_t static NCProtoJoinEvent.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t static NCProtoJoinEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoJoinEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoJoinEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoJoinEvent.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x263F505F0], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in NCProtoJoinEvent.decodeMessage<A>(decoder:));
}

uint64_t closure #3 in NCProtoJoinEvent.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t NCProtoJoinEvent.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        uint64_t v5 = v0[2];
        unint64_t v6 = v0[3];
        switch(v6 >> 62)
        {
          case 1uLL:
            if ((int)v5 != v5 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v6 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
            if (!v1)
            {
LABEL_15:
              if (!*(void *)(v0[4] + 16)
                || (type metadata accessor for ProtobufString(),
                    type metadata accessor for ProtobufBool(),
                    uint64_t result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(),
                    !v1))
              {
                type metadata accessor for NCProtoJoinEvent(0);
                uint64_t result = UnknownStorage.traverse<A>(visitor:)();
              }
            }
            break;
        }
      }
      return result;
  }
}

Swift::Int NCProtoJoinEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoJoinEvent, &lazy protocol witness table cache variable for type NCProtoJoinEvent and conformance NCProtoJoinEvent, (void (*)(uint64_t))type metadata accessor for NCProtoJoinEvent);
}

uint64_t protocol witness for Message.init() in conformance NCProtoJoinEvent@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_25743E3B0;
  *(_OWORD *)(a1 + 16) = xmmword_25743E3B0;
  *(void *)(a1 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoJoinEvent()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoJoinEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoJoinEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoJoinEvent()
{
  return NCProtoJoinEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoJoinEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinEvent and conformance NCProtoJoinEvent, (void (*)(uint64_t))type metadata accessor for NCProtoJoinEvent);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoJoinEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoJoinEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoJoinEvent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinEvent and conformance NCProtoJoinEvent, (void (*)(uint64_t))type metadata accessor for NCProtoJoinEvent);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoJoinEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinEvent and conformance NCProtoJoinEvent, (void (*)(uint64_t))type metadata accessor for NCProtoJoinEvent);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoRecentCallsDidChangeEvent.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static NCProtoRecentCallsDidChangeEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoRecentCallsDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoRecentCallsDidChangeEvent.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3:
        closure #3 in NCProtoRecentCallsDidChangeEvent.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in NCProtoRecentCallsDidChangeEvent.decodeMessage<A>(decoder:)();
        break;
      case 1:
        dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
        break;
    }
  }
  return result;
}

uint64_t closure #3 in NCProtoRecentCallsDidChangeEvent.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t NCProtoRecentCallsDidChangeEvent.traverse<A>(visitor:)()
{
  if (!*(void *)(*v0 + 16)
    || (uint64_t result = dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(v0[1] + 16)
      || (type metadata accessor for ProtobufString(),
          type metadata accessor for NCProtoContactInfo(0),
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo), lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo), uint64_t result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0[2] + 16)
        || (type metadata accessor for ProtobufString(),
            type metadata accessor for NCProtoCallInfo(0),
            lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, (void (*)(uint64_t))type metadata accessor for NCProtoCallInfo), lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, (void (*)(uint64_t))type metadata accessor for NCProtoCallInfo), uint64_t result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
      {
        type metadata accessor for NCProtoRecentCallsDidChangeEvent(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int NCProtoRecentCallsDidChangeEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoRecentCallsDidChangeEvent, &lazy protocol witness table cache variable for type NCProtoRecentCallsDidChangeEvent and conformance NCProtoRecentCallsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoRecentCallsDidChangeEvent);
}

uint64_t protocol witness for Message.init() in conformance NCProtoRecentCallsDidChangeEvent@<X0>(void *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoContactInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoContactInfo>, type metadata accessor for NCProtoContactInfo, type metadata accessor for NCProtoContactInfo);
  a1[2] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoCallInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoCallInfo>, type metadata accessor for NCProtoCallInfo, type metadata accessor for NCProtoCallInfo);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoRecentCallsDidChangeEvent()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoRecentCallsDidChangeEvent()
{
  return NCProtoRecentCallsDidChangeEvent.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoRecentCallsDidChangeEvent()
{
  return NCProtoRecentCallsDidChangeEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoRecentCallsDidChangeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoRecentCallsDidChangeEvent and conformance NCProtoRecentCallsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoRecentCallsDidChangeEvent);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoRecentCallsDidChangeEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoRecentCallsDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoRecentCallsDidChangeEvent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoRecentCallsDidChangeEvent and conformance NCProtoRecentCallsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoRecentCallsDidChangeEvent);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoRecentCallsDidChangeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoRecentCallsDidChangeEvent and conformance NCProtoRecentCallsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoRecentCallsDidChangeEvent);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoFavoritesDidChangeEvent.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t static NCProtoFavoritesDidChangeEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoFavoritesDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoFavoritesDidChangeEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoFavoritesDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for NCProtoContinuityFavorite, &lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityFavorite);
}

uint64_t NCProtoFavoritesDidChangeEvent.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for NCProtoContinuityFavorite(0),
        lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityFavorite), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for NCProtoFavoritesDidChangeEvent(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int NCProtoFavoritesDidChangeEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoFavoritesDidChangeEvent, &lazy protocol witness table cache variable for type NCProtoFavoritesDidChangeEvent and conformance NCProtoFavoritesDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoFavoritesDidChangeEvent);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoFavoritesDidChangeEvent()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoFavoritesDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoFavoritesDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoFavoritesDidChangeEvent()
{
  return NCProtoFavoritesDidChangeEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoFavoritesDidChangeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoFavoritesDidChangeEvent and conformance NCProtoFavoritesDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoFavoritesDidChangeEvent);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoFavoritesDidChangeEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoFavoritesDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoFavoritesDidChangeEvent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoFavoritesDidChangeEvent and conformance NCProtoFavoritesDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoFavoritesDidChangeEvent);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoFavoritesDidChangeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoFavoritesDidChangeEvent and conformance NCProtoFavoritesDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoFavoritesDidChangeEvent);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoActiveConversationsDidChangeEvent.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t static NCProtoActiveConversationsDidChangeEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoActiveConversationsDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoActiveConversationsDidChangeEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoFavoritesDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for NCProtoActiveConversation, &lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversation);
}

uint64_t NCProtoActiveConversationsDidChangeEvent.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for NCProtoActiveConversation(0),
        lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversation), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for NCProtoActiveConversationsDidChangeEvent(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int NCProtoActiveConversationsDidChangeEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoActiveConversationsDidChangeEvent, &lazy protocol witness table cache variable for type NCProtoActiveConversationsDidChangeEvent and conformance NCProtoActiveConversationsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversationsDidChangeEvent);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoActiveConversationsDidChangeEvent()
{
  return 0xD000000000000029;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoActiveConversationsDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoActiveConversationsDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoActiveConversationsDidChangeEvent()
{
  return NCProtoActiveConversationsDidChangeEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoActiveConversationsDidChangeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversationsDidChangeEvent and conformance NCProtoActiveConversationsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversationsDidChangeEvent);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoActiveConversationsDidChangeEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoActiveConversationsDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoActiveConversationsDidChangeEvent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversationsDidChangeEvent and conformance NCProtoActiveConversationsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversationsDidChangeEvent);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoActiveConversationsDidChangeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversationsDidChangeEvent and conformance NCProtoActiveConversationsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversationsDidChangeEvent);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoContinuityCallsDidChangeEvent.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t static NCProtoContinuityCallsDidChangeEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContinuityCallsDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoContinuityCallsDidChangeEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoFavoritesDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for NCProtoContinuityCall, &lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCall);
}

uint64_t NCProtoFavoritesDidChangeEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v6)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 1)
      {
        a4(0);
        lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(a5, a6);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoContinuityCallsDidChangeEvent.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for NCProtoContinuityCall(0),
        lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCall), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for NCProtoContinuityCallsDidChangeEvent(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int NCProtoContinuityCallsDidChangeEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoContinuityCallsDidChangeEvent, &lazy protocol witness table cache variable for type NCProtoContinuityCallsDidChangeEvent and conformance NCProtoContinuityCallsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCallsDidChangeEvent);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoContinuityCallsDidChangeEvent()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoContinuityCallsDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoContinuityCallsDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoContinuityCallsDidChangeEvent()
{
  return NCProtoContinuityCallsDidChangeEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoContinuityCallsDidChangeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCallsDidChangeEvent and conformance NCProtoContinuityCallsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCallsDidChangeEvent);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoContinuityCallsDidChangeEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoContinuityCallsDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoContinuityCallsDidChangeEvent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCallsDidChangeEvent and conformance NCProtoContinuityCallsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCallsDidChangeEvent);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoContinuityCallsDidChangeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCallsDidChangeEvent and conformance NCProtoContinuityCallsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCallsDidChangeEvent);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoSuggestionAdvertisement.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t static NCProtoSuggestionAdvertisement._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoSuggestionAdvertisement._protobuf_nameMap, a1);
}

uint64_t NCProtoSuggestionAdvertisement.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        lazy protocol witness table accessor for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 2 || result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoSuggestionAdvertisement.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = v0[3];
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!v0[4]
        || (lazy protocol witness table accessor for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType(),
            uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        type metadata accessor for NCProtoSuggestionAdvertisement(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int NCProtoSuggestionAdvertisement.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoSuggestionAdvertisement, &lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, (void (*)(uint64_t))type metadata accessor for NCProtoSuggestionAdvertisement);
}

uint64_t protocol witness for Message.init() in conformance NCProtoSuggestionAdvertisement@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoSuggestionAdvertisement()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoSuggestionAdvertisement()
{
  return NCProtoSuggestionAdvertisement.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoSuggestionAdvertisement()
{
  return NCProtoSuggestionAdvertisement.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoSuggestionAdvertisement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, (void (*)(uint64_t))type metadata accessor for NCProtoSuggestionAdvertisement);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoSuggestionAdvertisement@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoSuggestionAdvertisement._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoSuggestionAdvertisement(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, (void (*)(uint64_t))type metadata accessor for NCProtoSuggestionAdvertisement);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoSuggestionAdvertisement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, (void (*)(uint64_t))type metadata accessor for NCProtoSuggestionAdvertisement);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t static NCProtoSuggestionAdvertisement.SuggestionType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoSuggestionAdvertisement.SuggestionType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoSuggestionAdvertisement.SuggestionType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoSuggestionAdvertisement.SuggestionType._protobuf_nameMap, a1);
}

unint64_t static NCProtoSuggestionAdvertisementDidChangeEvent.protoMessageName.getter()
{
  return 0xD00000000000002DLL;
}

uint64_t static NCProtoSuggestionAdvertisementDidChangeEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoSuggestionAdvertisementDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3, closure #1 in NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:));
}

uint64_t closure #1 in NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of NCProtoContactInfo?((uint64_t)v7, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  }
  outlined init with take of NCProtoContactInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for NCProtoSuggestionAdvertisement);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, (void (*)(uint64_t))type metadata accessor for NCProtoSuggestionAdvertisement);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v11, type metadata accessor for NCProtoSuggestionAdvertisement);
}

Swift::Int NCProtoSuggestionAdvertisementDidChangeEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent, &lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisementDidChangeEvent and conformance NCProtoSuggestionAdvertisementDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent);
}

uint64_t protocol witness for Message.init() in conformance NCProtoSuggestionAdvertisementDidChangeEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance NCProtoSuggestionAdvertisementDidChangeEvent(a1, type metadata accessor for NCProtoSuggestionAdvertisement, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoSuggestionAdvertisementDidChangeEvent()
{
  return 0xD00000000000002DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisementDidChangeEvent and conformance NCProtoSuggestionAdvertisementDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoSuggestionAdvertisementDidChangeEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoSuggestionAdvertisementDidChangeEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisementDidChangeEvent and conformance NCProtoSuggestionAdvertisementDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisementDidChangeEvent and conformance NCProtoSuggestionAdvertisementDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoLagunaConnectionRequest.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t static NCProtoLagunaConnectionRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoLagunaConnectionRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoLagunaConnectionRequest.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
          break;
        case 2:
          closure #2 in NCProtoRecentCallsDidChangeEvent.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in NCProtoLagunaConnectionRequest.decodeMessage<A>(decoder:)();
          break;
        case 4:
          type metadata accessor for NCProtoActiveConversation(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversation);
          goto LABEL_11;
        case 5:
          type metadata accessor for NCProtoContinuityFavorite(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityFavorite);
          goto LABEL_11;
        case 6:
          type metadata accessor for NCProtoContinuityCall(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCall);
LABEL_11:
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 7:
          closure #7 in NCProtoLagunaConnectionRequest.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in NCProtoLagunaConnectionRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t NCProtoLagunaConnectionRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (!*(void *)(*v5 + 16)
    || (uint64_t result = dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)(), !v4))
  {
    if (!*(void *)(v5[1] + 16)
      || (type metadata accessor for ProtobufString(),
          type metadata accessor for NCProtoContactInfo(0),
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo), lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo), uint64_t result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v4))
    {
      uint64_t result = closure #1 in NCProtoLagunaConnectionRequest.traverse<A>(visitor:)((uint64_t)v5, a1, a2, a3);
      if (!v4)
      {
        if (*(void *)(v5[2] + 16))
        {
          type metadata accessor for NCProtoActiveConversation(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversation);
          dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
        }
        if (*(void *)(v5[3] + 16))
        {
          type metadata accessor for NCProtoContinuityFavorite(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityFavorite);
          dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
        }
        if (*(void *)(v5[4] + 16))
        {
          type metadata accessor for NCProtoContinuityCall(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCall);
          dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
        }
        if (*(void *)(v5[5] + 16))
        {
          type metadata accessor for ProtobufString();
          type metadata accessor for NCProtoCallInfo(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, (void (*)(uint64_t))type metadata accessor for NCProtoCallInfo);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, (void (*)(uint64_t))type metadata accessor for NCProtoCallInfo);
          dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)();
        }
        type metadata accessor for NCProtoLagunaConnectionRequest(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoLagunaConnectionRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NCProtoCallState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NCProtoLagunaConnectionRequest(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v12 + 44), (uint64_t)v7, &demangling cache variable for type metadata for NCProtoCallState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of NCProtoContactInfo?((uint64_t)v7, &demangling cache variable for type metadata for NCProtoCallState?);
  }
  outlined init with take of NCProtoContactInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for NCProtoCallState);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, (void (*)(uint64_t))type metadata accessor for NCProtoCallState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v11, type metadata accessor for NCProtoCallState);
}

Swift::Int NCProtoLagunaConnectionRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoLagunaConnectionRequest, &lazy protocol witness table cache variable for type NCProtoLagunaConnectionRequest and conformance NCProtoLagunaConnectionRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLagunaConnectionRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoLagunaConnectionRequest@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = MEMORY[0x263F8EE78];
  *a2 = MEMORY[0x263F8EE78];
  a2[1] = specialized Dictionary.init(dictionaryLiteral:)(v4, &demangling cache variable for type metadata for (String, NCProtoContactInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoContactInfo>, type metadata accessor for NCProtoContactInfo, type metadata accessor for NCProtoContactInfo);
  a2[2] = v4;
  a2[3] = v4;
  a2[4] = v4;
  a2[5] = specialized Dictionary.init(dictionaryLiteral:)(v4, &demangling cache variable for type metadata for (String, NCProtoCallInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoCallInfo>, type metadata accessor for NCProtoCallInfo, type metadata accessor for NCProtoCallInfo);
  UnknownStorage.init()();
  uint64_t v5 = (char *)a2 + *(int *)(a1 + 44);
  uint64_t v6 = type metadata accessor for NCProtoCallState(0);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, 1, 1, v6);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoLagunaConnectionRequest()
{
  return 0xD00000000000001FLL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance NCProtoLagunaConnectionRequest())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoLagunaConnectionRequest()
{
  return NCProtoLagunaConnectionRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoLagunaConnectionRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoLagunaConnectionRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoLagunaConnectionRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionRequest and conformance NCProtoLagunaConnectionRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLagunaConnectionRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoLagunaConnectionRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoLagunaConnectionRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoLagunaConnectionRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionRequest and conformance NCProtoLagunaConnectionRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLagunaConnectionRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoLagunaConnectionRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionRequest and conformance NCProtoLagunaConnectionRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLagunaConnectionRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoLagunaConnectionResponse.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t static NCProtoLagunaConnectionResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoLagunaConnectionResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  do
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

Swift::Int NCProtoLagunaConnectionResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoLagunaConnectionResponse, &lazy protocol witness table cache variable for type NCProtoLagunaConnectionResponse and conformance NCProtoLagunaConnectionResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLagunaConnectionResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoLagunaConnectionResponse()
{
  return 0xD000000000000020;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoLagunaConnectionResponse()
{
  return NCProtoTVLaunchedEvent.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoLagunaConnectionResponse()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoLagunaConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionResponse and conformance NCProtoLagunaConnectionResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLagunaConnectionResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoLagunaConnectionResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoLagunaConnectionResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoLagunaConnectionResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionResponse and conformance NCProtoLagunaConnectionResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLagunaConnectionResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoLagunaConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionResponse and conformance NCProtoLagunaConnectionResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLagunaConnectionResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoDeviceLaunchedEvent.protoMessageName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t static NCProtoDeviceLaunchedEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeviceLaunchedEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoDeviceLaunchedEvent.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoDeviceLaunchedEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoDeviceLaunchedEvent, &lazy protocol witness table cache variable for type NCProtoDeviceLaunchedEvent and conformance NCProtoDeviceLaunchedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceLaunchedEvent);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoDeviceLaunchedEvent()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoDeviceLaunchedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceLaunchedEvent and conformance NCProtoDeviceLaunchedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceLaunchedEvent);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDeviceLaunchedEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeviceLaunchedEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoDeviceLaunchedEvent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceLaunchedEvent and conformance NCProtoDeviceLaunchedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceLaunchedEvent);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDeviceLaunchedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceLaunchedEvent and conformance NCProtoDeviceLaunchedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceLaunchedEvent);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoTVLaunchedEvent.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t static NCProtoTVLaunchedEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoTVLaunchedEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoTVLaunchedEvent.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

uint64_t NCProtoTVLaunchedEvent.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

Swift::Int NCProtoTVLaunchedEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoTVLaunchedEvent, &lazy protocol witness table cache variable for type NCProtoTVLaunchedEvent and conformance NCProtoTVLaunchedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoTVLaunchedEvent);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoTVLaunchedEvent()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoTVLaunchedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTVLaunchedEvent and conformance NCProtoTVLaunchedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoTVLaunchedEvent);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoTVLaunchedEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoTVLaunchedEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoTVLaunchedEvent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTVLaunchedEvent and conformance NCProtoTVLaunchedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoTVLaunchedEvent);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoTVLaunchedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTVLaunchedEvent and conformance NCProtoTVLaunchedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoTVLaunchedEvent);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoCancelAddMemberEvent.protoMessageName.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t static NCProtoCancelAddMemberEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCancelAddMemberEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoCancelAddMemberEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x263F50660]);
}

uint64_t NCProtoCancelAddMemberEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for NCProtoCancelAddMemberEvent);
}

uint64_t NCProtoEndedSessionEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  unint64_t v7 = v4[1];
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v8 = *v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    a4(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static NCProtoCancelAddMemberEvent.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static NCProtoCreateLinkConversationRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoCancelAddMemberEvent) & 1;
}

Swift::Int NCProtoCancelAddMemberEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoCancelAddMemberEvent, &lazy protocol witness table cache variable for type NCProtoCancelAddMemberEvent and conformance NCProtoCancelAddMemberEvent, (void (*)(uint64_t))type metadata accessor for NCProtoCancelAddMemberEvent);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoCancelAddMemberEvent()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoCancelAddMemberEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCancelAddMemberEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoCancelAddMemberEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCancelAddMemberEvent and conformance NCProtoCancelAddMemberEvent, (void (*)(uint64_t))type metadata accessor for NCProtoCancelAddMemberEvent);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoCancelAddMemberEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCancelAddMemberEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoCancelAddMemberEvent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCancelAddMemberEvent and conformance NCProtoCancelAddMemberEvent, (void (*)(uint64_t))type metadata accessor for NCProtoCancelAddMemberEvent);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoCancelAddMemberEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCancelAddMemberEvent and conformance NCProtoCancelAddMemberEvent, (void (*)(uint64_t))type metadata accessor for NCProtoCancelAddMemberEvent);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoCancelAddMemberEvent(char *a1, char *a2)
{
  return specialized static NCProtoCreateLinkConversationRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoCancelAddMemberEvent) & 1;
}

unint64_t static NCProtoEndLagunaSessionEvent.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t static NCProtoEndLagunaSessionEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoEndLagunaSessionEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoEndLagunaSessionEvent.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoEndLagunaSessionEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoEndLagunaSessionEvent, &lazy protocol witness table cache variable for type NCProtoEndLagunaSessionEvent and conformance NCProtoEndLagunaSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoEndLagunaSessionEvent);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoEndLagunaSessionEvent()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoEndLagunaSessionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndLagunaSessionEvent and conformance NCProtoEndLagunaSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoEndLagunaSessionEvent);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoEndLagunaSessionEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoEndLagunaSessionEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoEndLagunaSessionEvent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndLagunaSessionEvent and conformance NCProtoEndLagunaSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoEndLagunaSessionEvent);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoEndLagunaSessionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndLagunaSessionEvent and conformance NCProtoEndLagunaSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoEndLagunaSessionEvent);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoPolicyInfoUpdatedEvent.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t static NCProtoPolicyInfoUpdatedEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPolicyInfoUpdatedEvent._protobuf_nameMap, a1);
}

uint64_t NCProtoPolicyInfoUpdatedEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in NCProtoPolicyInfoUpdatedEvent.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in NCProtoPolicyInfoUpdatedEvent.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t NCProtoPolicyInfoUpdatedEvent.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for ProtobufString(),
        type metadata accessor for ProtobufBool(),
        uint64_t result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(),
        !v1))
  {
    type metadata accessor for NCProtoPolicyInfoUpdatedEvent(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static NCProtoPolicyInfoUpdatedEvent.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static NCProtoAddConversationParticipantsRequest.== infix(_:_:)(a1, a2, specialized static Dictionary<>.== infix(_:_:), type metadata accessor for NCProtoPolicyInfoUpdatedEvent) & 1;
}

Swift::Int NCProtoPolicyInfoUpdatedEvent.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoPolicyInfoUpdatedEvent, &lazy protocol witness table cache variable for type NCProtoPolicyInfoUpdatedEvent and conformance NCProtoPolicyInfoUpdatedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoPolicyInfoUpdatedEvent);
}

uint64_t protocol witness for Message.init() in conformance NCProtoPolicyInfoUpdatedEvent@<X0>(unint64_t *a1@<X8>)
{
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoPolicyInfoUpdatedEvent()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoPolicyInfoUpdatedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoPolicyInfoUpdatedEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoPolicyInfoUpdatedEvent()
{
  return NCProtoPolicyInfoUpdatedEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoPolicyInfoUpdatedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPolicyInfoUpdatedEvent and conformance NCProtoPolicyInfoUpdatedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoPolicyInfoUpdatedEvent);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoPolicyInfoUpdatedEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPolicyInfoUpdatedEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoPolicyInfoUpdatedEvent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPolicyInfoUpdatedEvent and conformance NCProtoPolicyInfoUpdatedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoPolicyInfoUpdatedEvent);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoPolicyInfoUpdatedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPolicyInfoUpdatedEvent and conformance NCProtoPolicyInfoUpdatedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoPolicyInfoUpdatedEvent);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoPolicyInfoUpdatedEvent(char *a1, char *a2)
{
  return specialized static NCProtoAddConversationParticipantsRequest.== infix(_:_:)(a1, a2, specialized static Dictionary<>.== infix(_:_:), type metadata accessor for NCProtoPolicyInfoUpdatedEvent) & 1;
}

unint64_t static NCProtoAddMemberRequest.protoMessageName.getter()
{
  return 0xD000000000000018;
}

uint64_t static NCProtoAddMemberRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddMemberRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoAddMemberRequest.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
          lazy protocol witness table accessor for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for NCProtoAddMemberRequest(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoAddMemberRequest.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = v0[3];
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!v0[4]
        || (lazy protocol witness table accessor for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext(),
            uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        uint64_t result = closure #1 in NCProtoAddMemberRequest.traverse<A>(visitor:)((uint64_t)v0);
        if (!v1)
        {
          type metadata accessor for NCProtoAddMemberRequest(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoAddMemberRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoAddMemberRequest(0);
  uint64_t v3 = a1 + *(int *)(result + 32);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

Swift::Int NCProtoAddMemberRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoAddMemberRequest, &lazy protocol witness table cache variable for type NCProtoAddMemberRequest and conformance NCProtoAddMemberRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAddMemberRequest);
}

double protocol witness for Message.init() in conformance NCProtoAddMemberRequest@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 1;
  UnknownStorage.init()();
  double result = 0.0;
  *(_OWORD *)(a2 + *(int *)(a1 + 32)) = xmmword_25743E3C0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoAddMemberRequest()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoAddMemberRequest()
{
  return NCProtoAddMemberRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoAddMemberRequest()
{
  return NCProtoAddMemberRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoAddMemberRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberRequest and conformance NCProtoAddMemberRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAddMemberRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoAddMemberRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddMemberRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoAddMemberRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberRequest and conformance NCProtoAddMemberRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAddMemberRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoAddMemberRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberRequest and conformance NCProtoAddMemberRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAddMemberRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t static NCProtoAddMemberRequest.NearbyConversationPullContext._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddMemberRequest.NearbyConversationPullContext._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoAddMemberRequest.NearbyConversationPullContext@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddMemberRequest.NearbyConversationPullContext._protobuf_nameMap, a1);
}

unint64_t static NCProtoAddMemberResponse.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t static NCProtoAddMemberResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddMemberResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoAddMemberResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoContactUpdateEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in NCProtoAddMemberResponse.decodeMessage<A>(decoder:));
}

uint64_t NCProtoContactUpdateEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = v4;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v5 || (v12 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      a4(a1, v7, a2, a3);
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
  }
  return result;
}

uint64_t closure #2 in NCProtoAddMemberResponse.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t NCProtoAddMemberResponse.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        if (!*(void *)(v0[2] + 16)
          || (type metadata accessor for ProtobufString(),
              type metadata accessor for ProtobufBool(),
              uint64_t result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(),
              !v1))
        {
          type metadata accessor for NCProtoAddMemberResponse(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
      return result;
  }
}

uint64_t static NCProtoAddMemberResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static NCProtoContactUpdateEvent.== infix(_:_:)(a1, a2, specialized static Dictionary<>.== infix(_:_:), type metadata accessor for NCProtoAddMemberResponse) & 1;
}

Swift::Int NCProtoAddMemberResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoAddMemberResponse, &lazy protocol witness table cache variable for type NCProtoAddMemberResponse and conformance NCProtoAddMemberResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAddMemberResponse);
}

uint64_t protocol witness for Message.init() in conformance NCProtoAddMemberResponse@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_25743E3B0;
  *(void *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoAddMemberResponse()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoAddMemberResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoAddMemberResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoAddMemberResponse()
{
  return NCProtoAddMemberResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoAddMemberResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberResponse and conformance NCProtoAddMemberResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAddMemberResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoAddMemberResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddMemberResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoAddMemberResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberResponse and conformance NCProtoAddMemberResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAddMemberResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoAddMemberResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberResponse and conformance NCProtoAddMemberResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAddMemberResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoAddMemberResponse(uint64_t *a1, uint64_t *a2)
{
  return specialized static NCProtoContactUpdateEvent.== infix(_:_:)(a1, a2, specialized static Dictionary<>.== infix(_:_:), type metadata accessor for NCProtoAddMemberResponse) & 1;
}

unint64_t static NCProtoPullLagunaSessionToTVRequest.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t static NCProtoPullLagunaSessionToTVRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPullLagunaSessionToTVRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoPullLagunaSessionToTVRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoPullLagunaSessionToTVRequest.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for NCProtoPullLagunaSessionToTVRequest, (void (*)(void))lazy protocol witness table accessor for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason);
}

uint64_t NCProtoPullLagunaSessionToTVRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoPullLagunaSessionToTVRequest.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for NCProtoPullLagunaSessionToTVRequest, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason, (uint64_t)&type metadata for NCProtoPullLagunaSessionToTVRequest.Reason, (void (*)(void))type metadata accessor for NCProtoPullLagunaSessionToTVRequest);
}

Swift::Int NCProtoPullLagunaSessionToTVRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoPullLagunaSessionToTVRequest, &lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest and conformance NCProtoPullLagunaSessionToTVRequest, (void (*)(uint64_t))type metadata accessor for NCProtoPullLagunaSessionToTVRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoPullLagunaSessionToTVRequest()
{
  return 0xD000000000000024;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoPullLagunaSessionToTVRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoPullLagunaSessionToTVRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoPullLagunaSessionToTVRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoPullLagunaSessionToTVRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoPullLagunaSessionToTVRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest and conformance NCProtoPullLagunaSessionToTVRequest, (void (*)(uint64_t))type metadata accessor for NCProtoPullLagunaSessionToTVRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoPullLagunaSessionToTVRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPullLagunaSessionToTVRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoPullLagunaSessionToTVRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest and conformance NCProtoPullLagunaSessionToTVRequest, (void (*)(uint64_t))type metadata accessor for NCProtoPullLagunaSessionToTVRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoPullLagunaSessionToTVRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest and conformance NCProtoPullLagunaSessionToTVRequest, (void (*)(uint64_t))type metadata accessor for NCProtoPullLagunaSessionToTVRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t static NCProtoPullLagunaSessionToTVRequest.Reason._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPullLagunaSessionToTVRequest.Reason._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoPullLagunaSessionToTVRequest.Reason@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPullLagunaSessionToTVRequest.Reason._protobuf_nameMap, a1);
}

unint64_t static NCProtoPullLagunaSessionToTVResponse.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t static NCProtoPullLagunaSessionToTVResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPullLagunaSessionToTVResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoPullLagunaSessionToTVResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoPullLagunaSessionToTVResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoPullLagunaSessionToTVResponse, &lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVResponse and conformance NCProtoPullLagunaSessionToTVResponse, (void (*)(uint64_t))type metadata accessor for NCProtoPullLagunaSessionToTVResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoPullLagunaSessionToTVResponse()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoPullLagunaSessionToTVResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVResponse and conformance NCProtoPullLagunaSessionToTVResponse, (void (*)(uint64_t))type metadata accessor for NCProtoPullLagunaSessionToTVResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoPullLagunaSessionToTVResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPullLagunaSessionToTVResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoPullLagunaSessionToTVResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVResponse and conformance NCProtoPullLagunaSessionToTVResponse, (void (*)(uint64_t))type metadata accessor for NCProtoPullLagunaSessionToTVResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoPullLagunaSessionToTVResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVResponse and conformance NCProtoPullLagunaSessionToTVResponse, (void (*)(uint64_t))type metadata accessor for NCProtoPullLagunaSessionToTVResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoTransferActiveConversationRequest.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t static NCProtoTransferActiveConversationRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoTransferActiveConversationRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoTransferActiveConversationRequest.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 3 || result == 2)
    {
      type metadata accessor for NCProtoTransferActiveConversationRequest(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t result = closure #1 in NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for NCProtoTransferActiveConversationRequest);
    if (!v4)
    {
      closure #2 in NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for NCProtoTransferActiveConversationRequest);
      type metadata accessor for NCProtoTransferActiveConversationRequest(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int NCProtoTransferActiveConversationRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoTransferActiveConversationRequest, &lazy protocol witness table cache variable for type NCProtoTransferActiveConversationRequest and conformance NCProtoTransferActiveConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoTransferActiveConversationRequest@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 28);
  *((unsigned char *)a2 + *(int *)(a1 + 24)) = 2;
  *((unsigned char *)a2 + v5) = 2;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoTransferActiveConversationRequest()
{
  return 0xD000000000000029;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoTransferActiveConversationRequest()
{
  return NCProtoTransferActiveConversationRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoTransferActiveConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoTransferActiveConversationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationRequest and conformance NCProtoTransferActiveConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoTransferActiveConversationRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoTransferActiveConversationRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoTransferActiveConversationRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoTransferActiveConversationRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationRequest and conformance NCProtoTransferActiveConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoTransferActiveConversationRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoTransferActiveConversationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationRequest and conformance NCProtoTransferActiveConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoTransferActiveConversationRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoTransferActiveConversationResponse.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t static NCProtoTransferActiveConversationResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoTransferActiveConversationResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoTransferActiveConversationResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoTransferActiveConversationResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoTransferActiveConversationResponse, &lazy protocol witness table cache variable for type NCProtoTransferActiveConversationResponse and conformance NCProtoTransferActiveConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoTransferActiveConversationResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoTransferActiveConversationResponse()
{
  return 0xD00000000000002ALL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoTransferActiveConversationResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationResponse and conformance NCProtoTransferActiveConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoTransferActiveConversationResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoTransferActiveConversationResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoTransferActiveConversationResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoTransferActiveConversationResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationResponse and conformance NCProtoTransferActiveConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoTransferActiveConversationResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoTransferActiveConversationResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationResponse and conformance NCProtoTransferActiveConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoTransferActiveConversationResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoTransferContinuityCallRequest.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t static NCProtoTransferContinuityCallRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoTransferContinuityCallRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoTransferContinuityCallRequest.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      type metadata accessor for NCProtoTransferContinuityCallRequest(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t NCProtoTransferContinuityCallRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t result = closure #1 in NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for NCProtoTransferContinuityCallRequest);
    if (!v4)
    {
      type metadata accessor for NCProtoTransferContinuityCallRequest(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 24)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NCProtoTransferContinuityCallRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoTransferContinuityCallRequest, &lazy protocol witness table cache variable for type NCProtoTransferContinuityCallRequest and conformance NCProtoTransferContinuityCallRequest, (void (*)(uint64_t))type metadata accessor for NCProtoTransferContinuityCallRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoTransferContinuityCallRequest@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  uint64_t result = UnknownStorage.init()();
  *((unsigned char *)a2 + *(int *)(a1 + 24)) = 2;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoTransferContinuityCallRequest()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoTransferContinuityCallRequest()
{
  return NCProtoTransferContinuityCallRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoTransferContinuityCallRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoTransferContinuityCallRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoTransferContinuityCallRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferContinuityCallRequest and conformance NCProtoTransferContinuityCallRequest, (void (*)(uint64_t))type metadata accessor for NCProtoTransferContinuityCallRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoTransferContinuityCallRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoTransferContinuityCallRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoTransferContinuityCallRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferContinuityCallRequest and conformance NCProtoTransferContinuityCallRequest, (void (*)(uint64_t))type metadata accessor for NCProtoTransferContinuityCallRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoTransferContinuityCallRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferContinuityCallRequest and conformance NCProtoTransferContinuityCallRequest, (void (*)(uint64_t))type metadata accessor for NCProtoTransferContinuityCallRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoTransferContinuityCallResponse.protoMessageName.getter()
{
  return 0xD000000000000026;
}

uint64_t static NCProtoTransferContinuityCallResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoTransferContinuityCallResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoTransferContinuityCallResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoTransferContinuityCallResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoTransferContinuityCallResponse, &lazy protocol witness table cache variable for type NCProtoTransferContinuityCallResponse and conformance NCProtoTransferContinuityCallResponse, (void (*)(uint64_t))type metadata accessor for NCProtoTransferContinuityCallResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoTransferContinuityCallResponse()
{
  return 0xD000000000000026;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoTransferContinuityCallResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferContinuityCallResponse and conformance NCProtoTransferContinuityCallResponse, (void (*)(uint64_t))type metadata accessor for NCProtoTransferContinuityCallResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoTransferContinuityCallResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoTransferContinuityCallResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoTransferContinuityCallResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferContinuityCallResponse and conformance NCProtoTransferContinuityCallResponse, (void (*)(uint64_t))type metadata accessor for NCProtoTransferContinuityCallResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoTransferContinuityCallResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferContinuityCallResponse and conformance NCProtoTransferContinuityCallResponse, (void (*)(uint64_t))type metadata accessor for NCProtoTransferContinuityCallResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoStartLagunaSessionRequest.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static NCProtoStartLagunaSessionRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartLagunaSessionRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoStartLagunaSessionRequest.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        lazy protocol witness table accessor for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType();
        dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoStartLagunaSessionRequest.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (lazy protocol witness table accessor for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType(),
        uint64_t result = dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    type metadata accessor for NCProtoStartLagunaSessionRequest(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int NCProtoStartLagunaSessionRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoStartLagunaSessionRequest, &lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest and conformance NCProtoStartLagunaSessionRequest, (void (*)(uint64_t))type metadata accessor for NCProtoStartLagunaSessionRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoStartLagunaSessionRequest()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoStartLagunaSessionRequest()
{
  return NCProtoStartLagunaSessionRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoStartLagunaSessionRequest()
{
  return NCProtoStartLagunaSessionRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoStartLagunaSessionRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest and conformance NCProtoStartLagunaSessionRequest, (void (*)(uint64_t))type metadata accessor for NCProtoStartLagunaSessionRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoStartLagunaSessionRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartLagunaSessionRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoStartLagunaSessionRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest and conformance NCProtoStartLagunaSessionRequest, (void (*)(uint64_t))type metadata accessor for NCProtoStartLagunaSessionRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoStartLagunaSessionRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest and conformance NCProtoStartLagunaSessionRequest, (void (*)(uint64_t))type metadata accessor for NCProtoStartLagunaSessionRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t static NCProtoStartLagunaSessionRequest.RecentCallFetchType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartLagunaSessionRequest.RecentCallFetchType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartLagunaSessionRequest.RecentCallFetchType._protobuf_nameMap, a1);
}

unint64_t static NCProtoSenderIdentity.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t static NCProtoSenderIdentity._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoSenderIdentity._protobuf_nameMap, a1);
}

uint64_t NCProtoSenderIdentity.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1) {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoSenderIdentity.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = v0[3];
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for NCProtoSenderIdentity(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int NCProtoSenderIdentity.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoSenderIdentity, &lazy protocol witness table cache variable for type NCProtoSenderIdentity and conformance NCProtoSenderIdentity, (void (*)(uint64_t))type metadata accessor for NCProtoSenderIdentity);
}

uint64_t protocol witness for Message.init() in conformance NCProtoSenderIdentity@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoSenderIdentity()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NCProtoAddressableContact@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NCProtoAddressableContact(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoSenderIdentity()
{
  return NCProtoSenderIdentity.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoSenderIdentity()
{
  return NCProtoSenderIdentity.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoSenderIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSenderIdentity and conformance NCProtoSenderIdentity, (void (*)(uint64_t))type metadata accessor for NCProtoSenderIdentity);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoSenderIdentity@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoSenderIdentity._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoSenderIdentity(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSenderIdentity and conformance NCProtoSenderIdentity, (void (*)(uint64_t))type metadata accessor for NCProtoSenderIdentity);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoSenderIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSenderIdentity and conformance NCProtoSenderIdentity, (void (*)(uint64_t))type metadata accessor for NCProtoSenderIdentity);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoCallInfo.protoMessageName.getter()
{
  return 0xD000000000000010;
}

uint64_t static NCProtoCallInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCallInfo._protobuf_nameMap, a1);
}

uint64_t NCProtoCallInfo.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          type metadata accessor for NCProtoCallInfo(0);
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 4:
          type metadata accessor for NCProtoCallInfo(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 5:
          type metadata accessor for ProtobufString();
          dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
          break;
        case 6:
          closure #6 in NCProtoCallInfo.decodeMessage<A>(decoder:)();
          break;
        case 7:
          type metadata accessor for NCProtoCallInfo(0);
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #6 in NCProtoCallInfo.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t NCProtoCallInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in NCProtoActiveConversation.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoCallInfo);
  if (!v4)
  {
    closure #2 in NCProtoActiveConversation.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoCallInfo);
    closure #4 in NCProtoContinuityCall.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoCallInfo);
    closure #5 in NCProtoContinuityCall.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoCallInfo);
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for ProtobufString();
      dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)();
    }
    closure #5 in NCProtoCallInfo.traverse<A>(visitor:)(v3, a1, a2, a3);
    closure #6 in NCProtoCallInfo.traverse<A>(visitor:)(v3);
    type metadata accessor for NCProtoCallInfo(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in NCProtoActiveConversation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(void *)(a1 + *(int *)(result + 28) + 8)) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #4 in NCProtoContinuityCall.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(void *)(a1 + *(int *)(result + 32) + 8)) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #5 in NCProtoContinuityCall.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 36)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #5 in NCProtoCallInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NCProtoSenderIdentity(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NCProtoCallInfo(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of NCProtoContactInfo?((uint64_t)v7, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
  }
  outlined init with take of NCProtoContactInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for NCProtoSenderIdentity);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSenderIdentity and conformance NCProtoSenderIdentity, (void (*)(uint64_t))type metadata accessor for NCProtoSenderIdentity);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v11, type metadata accessor for NCProtoSenderIdentity);
}

uint64_t closure #6 in NCProtoCallInfo.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoCallInfo(0);
  uint64_t v3 = a1 + *(int *)(result + 44);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

Swift::Int NCProtoCallInfo.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoCallInfo, &lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, (void (*)(uint64_t))type metadata accessor for NCProtoCallInfo);
}

double protocol witness for Message.init() in conformance NCProtoCallInfo@<D0>(int *a1@<X0>, unint64_t *a2@<X8>)
{
  *a2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  UnknownStorage.init()();
  uint64_t v4 = a1[7];
  uint64_t v5 = (unint64_t *)((char *)a2 + a1[6]);
  *uint64_t v5 = 0;
  v5[1] = 0;
  uint64_t v6 = (unint64_t *)((char *)a2 + v4);
  *uint64_t v6 = 0;
  v6[1] = 0;
  uint64_t v7 = a1[9];
  uint64_t v8 = (unint64_t *)((char *)a2 + a1[8]);
  void *v8 = 0;
  v8[1] = 0;
  *((unsigned char *)a2 + v7) = 2;
  uint64_t v9 = (char *)a2 + a1[10];
  uint64_t v10 = type metadata accessor for NCProtoSenderIdentity(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  double result = 0.0;
  *(_OWORD *)((char *)a2 + a1[11]) = xmmword_25743E3C0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoCallInfo()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoCallInfo()
{
  return NCProtoCallInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoCallInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCallInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoCallInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, (void (*)(uint64_t))type metadata accessor for NCProtoCallInfo);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoCallInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCallInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoCallInfo(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, (void (*)(uint64_t))type metadata accessor for NCProtoCallInfo);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoCallInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, (void (*)(uint64_t))type metadata accessor for NCProtoCallInfo);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoStartLagunaSessionResponse.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t static NCProtoStartLagunaSessionResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartLagunaSessionResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoStartLagunaSessionResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
          goto LABEL_6;
        case 2:
          uint64_t v4 = v3;
          closure #2 in NCProtoRecentCallsDidChangeEvent.decodeMessage<A>(decoder:)();
          goto LABEL_6;
        case 3:
          type metadata accessor for NCProtoActiveConversation(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversation);
          goto LABEL_5;
        case 4:
          type metadata accessor for NCProtoContinuityFavorite(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityFavorite);
          goto LABEL_5;
        case 5:
          type metadata accessor for NCProtoContinuityCall(0);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCall);
LABEL_5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_6;
        case 6:
          uint64_t v4 = v3;
          closure #7 in NCProtoLagunaConnectionRequest.decodeMessage<A>(decoder:)();
LABEL_6:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in NCProtoRecentCallsDidChangeEvent.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t closure #7 in NCProtoLagunaConnectionRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t NCProtoStartLagunaSessionResponse.traverse<A>(visitor:)()
{
  if (!*(void *)(*v0 + 16)
    || (uint64_t result = dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(v0[1] + 16)
      || (type metadata accessor for ProtobufString(),
          type metadata accessor for NCProtoContactInfo(0),
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo), lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo), uint64_t result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0[2] + 16)
        || (type metadata accessor for NCProtoActiveConversation(0),
            lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversation), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (!*(void *)(v0[3] + 16)
          || (type metadata accessor for NCProtoContinuityFavorite(0),
              lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityFavorite), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          if (!*(void *)(v0[4] + 16)
            || (type metadata accessor for NCProtoContinuityCall(0),
                lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCall), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
          {
            if (!*(void *)(v0[5] + 16)
              || (type metadata accessor for ProtobufString(),
                  type metadata accessor for NCProtoCallInfo(0),
                  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, (void (*)(uint64_t))type metadata accessor for NCProtoCallInfo), lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, (void (*)(uint64_t))type metadata accessor for NCProtoCallInfo), uint64_t result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
            {
              type metadata accessor for NCProtoStartLagunaSessionResponse(0);
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int NCProtoStartLagunaSessionResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoStartLagunaSessionResponse, &lazy protocol witness table cache variable for type NCProtoStartLagunaSessionResponse and conformance NCProtoStartLagunaSessionResponse, (void (*)(uint64_t))type metadata accessor for NCProtoStartLagunaSessionResponse);
}

uint64_t protocol witness for Message.init() in conformance NCProtoStartLagunaSessionResponse@<X0>(void *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoContactInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoContactInfo>, type metadata accessor for NCProtoContactInfo, type metadata accessor for NCProtoContactInfo);
  a1[2] = v2;
  a1[3] = v2;
  a1[4] = v2;
  a1[5] = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoCallInfo), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoCallInfo>, type metadata accessor for NCProtoCallInfo, type metadata accessor for NCProtoCallInfo);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoStartLagunaSessionResponse()
{
  return 0xD000000000000022;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NCProtoLagunaConnectionRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NCProtoLagunaConnectionRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoStartLagunaSessionResponse()
{
  return NCProtoStartLagunaSessionResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoStartLagunaSessionResponse()
{
  return NCProtoStartLagunaSessionResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoStartLagunaSessionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionResponse and conformance NCProtoStartLagunaSessionResponse, (void (*)(uint64_t))type metadata accessor for NCProtoStartLagunaSessionResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoStartLagunaSessionResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartLagunaSessionResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoStartLagunaSessionResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionResponse and conformance NCProtoStartLagunaSessionResponse, (void (*)(uint64_t))type metadata accessor for NCProtoStartLagunaSessionResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoStartLagunaSessionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionResponse and conformance NCProtoStartLagunaSessionResponse, (void (*)(uint64_t))type metadata accessor for NCProtoStartLagunaSessionResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoStartConversationRequest.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t static NCProtoStartConversationRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartConversationRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoStartConversationRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in NCProtoStartConversationRequest.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in NCProtoStartConversationRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t NCProtoStartConversationRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in NCProtoStartConversationRequest.traverse<A>(visitor:));
}

uint64_t closure #1 in NCProtoStartConversationRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoStartConversationRequest(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 20) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NCProtoStartConversationRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoStartConversationRequest, &lazy protocol witness table cache variable for type NCProtoStartConversationRequest and conformance NCProtoStartConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoStartConversationRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoStartConversationRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a2 + *(int *)(a1 + 20);
  *(void *)uint64_t v5 = 0;
  *(_WORD *)(v5 + 8) = 256;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoStartConversationRequest()
{
  return 0xD000000000000020;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoStartConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoStartConversationRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoStartConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoStartConversationRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoStartConversationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationRequest and conformance NCProtoStartConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoStartConversationRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoStartConversationRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartConversationRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoStartConversationRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationRequest and conformance NCProtoStartConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoStartConversationRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoStartConversationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationRequest and conformance NCProtoStartConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoStartConversationRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoStartConversationResponse.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static NCProtoStartConversationResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartConversationResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoStartConversationResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoStartConversationResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoStartConversationResponse, &lazy protocol witness table cache variable for type NCProtoStartConversationResponse and conformance NCProtoStartConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoStartConversationResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoStartConversationResponse()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoStartConversationResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationResponse and conformance NCProtoStartConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoStartConversationResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoStartConversationResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoStartConversationResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoStartConversationResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationResponse and conformance NCProtoStartConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoStartConversationResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoStartConversationResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationResponse and conformance NCProtoStartConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoStartConversationResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoJoinActiveConversationRequest.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t static NCProtoJoinActiveConversationRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoJoinActiveConversationRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoJoinActiveConversationRequest.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 3 || result == 2)
    {
      type metadata accessor for NCProtoJoinActiveConversationRequest(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for NCProtoJoinActiveConversationRequest(0);
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t NCProtoJoinActiveConversationRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in NCProtoContinuityCall.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoJoinActiveConversationRequest);
  if (!v4)
  {
    closure #1 in NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoJoinActiveConversationRequest);
    closure #2 in NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoJoinActiveConversationRequest);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in NCProtoContinuityCall.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(void *)(a1 + *(int *)(result + 20) + 8)) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #2 in NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 28)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NCProtoJoinActiveConversationRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoJoinActiveConversationRequest, &lazy protocol witness table cache variable for type NCProtoJoinActiveConversationRequest and conformance NCProtoJoinActiveConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoJoinActiveConversationRequest@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = (void *)(a2 + a1[5]);
  *uint64_t v6 = 0;
  v6[1] = 0;
  *(unsigned char *)(a2 + v5) = 2;
  *(unsigned char *)(a2 + a1[7]) = 2;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoJoinActiveConversationRequest()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoJoinActiveConversationRequest()
{
  return NCProtoJoinActiveConversationRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoJoinActiveConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoJoinActiveConversationRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoJoinActiveConversationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationRequest and conformance NCProtoJoinActiveConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoJoinActiveConversationRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoJoinActiveConversationRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoJoinActiveConversationRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoJoinActiveConversationRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationRequest and conformance NCProtoJoinActiveConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoJoinActiveConversationRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoJoinActiveConversationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationRequest and conformance NCProtoJoinActiveConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoJoinActiveConversationRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoJoinActiveConversationResponse.protoMessageName.getter()
{
  return 0xD000000000000026;
}

uint64_t static NCProtoJoinActiveConversationResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoJoinActiveConversationResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoJoinActiveConversationResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoJoinActiveConversationResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoJoinActiveConversationResponse, &lazy protocol witness table cache variable for type NCProtoJoinActiveConversationResponse and conformance NCProtoJoinActiveConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoJoinActiveConversationResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoJoinActiveConversationResponse()
{
  return 0xD000000000000026;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoJoinActiveConversationResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationResponse and conformance NCProtoJoinActiveConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoJoinActiveConversationResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoJoinActiveConversationResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoJoinActiveConversationResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoJoinActiveConversationResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationResponse and conformance NCProtoJoinActiveConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoJoinActiveConversationResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoJoinActiveConversationResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationResponse and conformance NCProtoJoinActiveConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoJoinActiveConversationResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoCreateLinkConversationRequest.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t static NCProtoCreateLinkConversationRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCreateLinkConversationRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoCreateLinkConversationRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x263F50660]);
}

uint64_t NCProtoCreateLinkConversationRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for NCProtoCreateLinkConversationRequest);
}

uint64_t static NCProtoCreateLinkConversationRequest.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static NCProtoCreateLinkConversationRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoCreateLinkConversationRequest) & 1;
}

Swift::Int NCProtoCreateLinkConversationRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoCreateLinkConversationRequest, &lazy protocol witness table cache variable for type NCProtoCreateLinkConversationRequest and conformance NCProtoCreateLinkConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoCreateLinkConversationRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoCreateLinkConversationRequest()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoCreateLinkConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCreateLinkConversationRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoCreateLinkConversationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCreateLinkConversationRequest and conformance NCProtoCreateLinkConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoCreateLinkConversationRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoCreateLinkConversationRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCreateLinkConversationRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoCreateLinkConversationRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCreateLinkConversationRequest and conformance NCProtoCreateLinkConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoCreateLinkConversationRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoCreateLinkConversationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCreateLinkConversationRequest and conformance NCProtoCreateLinkConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoCreateLinkConversationRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoCreateLinkConversationRequest(char *a1, char *a2)
{
  return specialized static NCProtoCreateLinkConversationRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoCreateLinkConversationRequest) & 1;
}

unint64_t static NCProtoCreateLinkConversationResponse.protoMessageName.getter()
{
  return 0xD000000000000026;
}

uint64_t static NCProtoCreateLinkConversationResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCreateLinkConversationResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoCreateLinkConversationResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCreateLinkConversationResponse.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for NCProtoCreateLinkConversationResponse, MEMORY[0x263F50658]);
}

uint64_t NCProtoCreateLinkConversationResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCreateLinkConversationResponse.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for NCProtoCreateLinkConversationResponse);
}

uint64_t static NCProtoCreateLinkConversationResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static NCProtoLinkConversationSendLetMeInRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoCreateLinkConversationResponse) & 1;
}

Swift::Int NCProtoCreateLinkConversationResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoCreateLinkConversationResponse, &lazy protocol witness table cache variable for type NCProtoCreateLinkConversationResponse and conformance NCProtoCreateLinkConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoCreateLinkConversationResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoCreateLinkConversationResponse()
{
  return 0xD000000000000026;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoCreateLinkConversationResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCreateLinkConversationResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoCreateLinkConversationResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCreateLinkConversationResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoCreateLinkConversationResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCreateLinkConversationResponse and conformance NCProtoCreateLinkConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoCreateLinkConversationResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoCreateLinkConversationResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCreateLinkConversationResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoCreateLinkConversationResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCreateLinkConversationResponse and conformance NCProtoCreateLinkConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoCreateLinkConversationResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoCreateLinkConversationResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCreateLinkConversationResponse and conformance NCProtoCreateLinkConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoCreateLinkConversationResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoCreateLinkConversationResponse(uint64_t a1, uint64_t a2)
{
  return specialized static NCProtoLinkConversationSendLetMeInRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoCreateLinkConversationResponse) & 1;
}

unint64_t static NCProtoLinkConversationSendLetMeInRequest.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t static NCProtoLinkConversationSendLetMeInRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoLinkConversationSendLetMeInRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoLinkConversationSendLetMeInRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCreateLinkConversationResponse.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for NCProtoLinkConversationSendLetMeInRequest, MEMORY[0x263F50658]);
}

uint64_t NCProtoCreateLinkConversationResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v6 || (v12 & 1) != 0) {
      break;
    }
    if (result == 1)
    {
      uint64_t v13 = a4(0);
      a5(v5 + *(int *)(v13 + 20), a2, a3);
    }
    uint64_t v6 = 0;
  }
  return result;
}

uint64_t NCProtoLinkConversationSendLetMeInRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCreateLinkConversationResponse.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for NCProtoLinkConversationSendLetMeInRequest);
}

uint64_t static NCProtoLinkConversationSendLetMeInRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static NCProtoLinkConversationSendLetMeInRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoLinkConversationSendLetMeInRequest) & 1;
}

Swift::Int NCProtoLinkConversationSendLetMeInRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoLinkConversationSendLetMeInRequest, &lazy protocol witness table cache variable for type NCProtoLinkConversationSendLetMeInRequest and conformance NCProtoLinkConversationSendLetMeInRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationSendLetMeInRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoLinkConversationSendLetMeInRequest()
{
  return 0xD00000000000002ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoLinkConversationSendLetMeInRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoLinkConversationSendLetMeInRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoLinkConversationSendLetMeInRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoLinkConversationSendLetMeInRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoLinkConversationSendLetMeInRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationSendLetMeInRequest and conformance NCProtoLinkConversationSendLetMeInRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationSendLetMeInRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoLinkConversationSendLetMeInRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoLinkConversationSendLetMeInRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoLinkConversationSendLetMeInRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationSendLetMeInRequest and conformance NCProtoLinkConversationSendLetMeInRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationSendLetMeInRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoLinkConversationSendLetMeInRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationSendLetMeInRequest and conformance NCProtoLinkConversationSendLetMeInRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationSendLetMeInRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoLinkConversationSendLetMeInRequest(uint64_t a1, uint64_t a2)
{
  return specialized static NCProtoLinkConversationSendLetMeInRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoLinkConversationSendLetMeInRequest) & 1;
}

unint64_t static NCProtoLinkConversationSendLetMeInResponse.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t static NCProtoLinkConversationSendLetMeInResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoLinkConversationSendLetMeInResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoLinkConversationSendLetMeInResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoLinkConversationSendLetMeInResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoLinkConversationSendLetMeInResponse, &lazy protocol witness table cache variable for type NCProtoLinkConversationSendLetMeInResponse and conformance NCProtoLinkConversationSendLetMeInResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationSendLetMeInResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoLinkConversationSendLetMeInResponse()
{
  return 0xD00000000000002BLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoLinkConversationSendLetMeInResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationSendLetMeInResponse and conformance NCProtoLinkConversationSendLetMeInResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationSendLetMeInResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoLinkConversationSendLetMeInResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoLinkConversationSendLetMeInResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoLinkConversationSendLetMeInResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationSendLetMeInResponse and conformance NCProtoLinkConversationSendLetMeInResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationSendLetMeInResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoLinkConversationSendLetMeInResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationSendLetMeInResponse and conformance NCProtoLinkConversationSendLetMeInResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationSendLetMeInResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoLinkConversationCancelRequest.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t static NCProtoLinkConversationCancelRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoLinkConversationCancelRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoLinkConversationCancelRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCreateLinkConversationResponse.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for NCProtoLinkConversationCancelRequest, MEMORY[0x263F50658]);
}

uint64_t NCProtoLinkConversationCancelRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCreateLinkConversationResponse.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for NCProtoLinkConversationCancelRequest);
}

uint64_t static NCProtoLinkConversationCancelRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static NCProtoLinkConversationSendLetMeInRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoLinkConversationCancelRequest) & 1;
}

Swift::Int NCProtoLinkConversationCancelRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoLinkConversationCancelRequest, &lazy protocol witness table cache variable for type NCProtoLinkConversationCancelRequest and conformance NCProtoLinkConversationCancelRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationCancelRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoLinkConversationCancelRequest()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoLinkConversationCancelRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoLinkConversationCancelRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoLinkConversationCancelRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoLinkConversationCancelRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoLinkConversationCancelRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationCancelRequest and conformance NCProtoLinkConversationCancelRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationCancelRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoLinkConversationCancelRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoLinkConversationCancelRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoLinkConversationCancelRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationCancelRequest and conformance NCProtoLinkConversationCancelRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationCancelRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoLinkConversationCancelRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationCancelRequest and conformance NCProtoLinkConversationCancelRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationCancelRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoLinkConversationCancelRequest(uint64_t a1, uint64_t a2)
{
  return specialized static NCProtoLinkConversationSendLetMeInRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoLinkConversationCancelRequest) & 1;
}

unint64_t static NCProtoLinkConversationCancelResponse.protoMessageName.getter()
{
  return 0xD000000000000026;
}

uint64_t static NCProtoLinkConversationCancelResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoLinkConversationCancelResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoLinkConversationCancelResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoLinkConversationCancelResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoLinkConversationCancelResponse, &lazy protocol witness table cache variable for type NCProtoLinkConversationCancelResponse and conformance NCProtoLinkConversationCancelResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationCancelResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoLinkConversationCancelResponse()
{
  return 0xD000000000000026;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoLinkConversationCancelResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationCancelResponse and conformance NCProtoLinkConversationCancelResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationCancelResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoLinkConversationCancelResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoLinkConversationCancelResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoLinkConversationCancelResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationCancelResponse and conformance NCProtoLinkConversationCancelResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationCancelResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoLinkConversationCancelResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationCancelResponse and conformance NCProtoLinkConversationCancelResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationCancelResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoDeclineContinuityCallRequest.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t static NCProtoDeclineContinuityCallRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeclineContinuityCallRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoDeclineContinuityCallRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCreateLinkConversationResponse.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for NCProtoDeclineContinuityCallRequest, MEMORY[0x263F50658]);
}

uint64_t NCProtoDeclineContinuityCallRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCreateLinkConversationResponse.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for NCProtoDeclineContinuityCallRequest);
}

uint64_t static NCProtoDeclineContinuityCallRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static NCProtoLinkConversationSendLetMeInRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoDeclineContinuityCallRequest) & 1;
}

Swift::Int NCProtoDeclineContinuityCallRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoDeclineContinuityCallRequest, &lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallRequest and conformance NCProtoDeclineContinuityCallRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDeclineContinuityCallRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoDeclineContinuityCallRequest()
{
  return 0xD000000000000024;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoDeclineContinuityCallRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoDeclineContinuityCallRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoDeclineContinuityCallRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoDeclineContinuityCallRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoDeclineContinuityCallRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallRequest and conformance NCProtoDeclineContinuityCallRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDeclineContinuityCallRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDeclineContinuityCallRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeclineContinuityCallRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoDeclineContinuityCallRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallRequest and conformance NCProtoDeclineContinuityCallRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDeclineContinuityCallRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDeclineContinuityCallRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallRequest and conformance NCProtoDeclineContinuityCallRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDeclineContinuityCallRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoDeclineContinuityCallRequest(uint64_t a1, uint64_t a2)
{
  return specialized static NCProtoLinkConversationSendLetMeInRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoDeclineContinuityCallRequest) & 1;
}

unint64_t static NCProtoDeclineContinuityCallResponse.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t static NCProtoDeclineContinuityCallResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeclineContinuityCallResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoDeclineContinuityCallResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoDeclineContinuityCallResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoDeclineContinuityCallResponse, &lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallResponse and conformance NCProtoDeclineContinuityCallResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDeclineContinuityCallResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoDeclineContinuityCallResponse()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoDeclineContinuityCallResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallResponse and conformance NCProtoDeclineContinuityCallResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDeclineContinuityCallResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDeclineContinuityCallResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeclineContinuityCallResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoDeclineContinuityCallResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallResponse and conformance NCProtoDeclineContinuityCallResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDeclineContinuityCallResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDeclineContinuityCallResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallResponse and conformance NCProtoDeclineContinuityCallResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDeclineContinuityCallResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoGetAddressableContactsRequest.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t static NCProtoGetAddressableContactsRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetAddressableContactsRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoGetAddressableContactsRequest.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoGetAddressableContactsRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoGetAddressableContactsRequest, &lazy protocol witness table cache variable for type NCProtoGetAddressableContactsRequest and conformance NCProtoGetAddressableContactsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetAddressableContactsRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoGetAddressableContactsRequest()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoGetAddressableContactsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsRequest and conformance NCProtoGetAddressableContactsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetAddressableContactsRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoGetAddressableContactsRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetAddressableContactsRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoGetAddressableContactsRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsRequest and conformance NCProtoGetAddressableContactsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetAddressableContactsRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoGetAddressableContactsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsRequest and conformance NCProtoGetAddressableContactsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetAddressableContactsRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoGetAddressableContactsResponse.protoMessageName.getter()
{
  return 0xD000000000000026;
}

uint64_t static NCProtoGetAddressableContactsResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetAddressableContactsResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoGetAddressableContactsResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for NCProtoGetAddressableContactsResponse(0);
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for NCProtoAddressableContact(0);
        lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, (void (*)(uint64_t))type metadata accessor for NCProtoAddressableContact);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoGetAddressableContactsResponse.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for NCProtoAddressableContact(0),
        lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, (void (*)(uint64_t))type metadata accessor for NCProtoAddressableContact), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    uint64_t result = closure #1 in NCProtoGetAddressableContactsResponse.traverse<A>(visitor:)(v0);
    if (!v1)
    {
      type metadata accessor for NCProtoGetAddressableContactsResponse(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoGetAddressableContactsResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoGetAddressableContactsResponse(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 24) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NCProtoGetAddressableContactsResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoGetAddressableContactsResponse, &lazy protocol witness table cache variable for type NCProtoGetAddressableContactsResponse and conformance NCProtoGetAddressableContactsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetAddressableContactsResponse);
}

uint64_t protocol witness for Message.init() in conformance NCProtoGetAddressableContactsResponse@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = (char *)a2 + *(int *)(a1 + 24);
  *(void *)uint64_t v5 = 0;
  v5[8] = 1;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoGetAddressableContactsResponse()
{
  return 0xD000000000000026;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoGetAddressableContactsResponse()
{
  return NCProtoGetAddressableContactsResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoGetAddressableContactsResponse()
{
  return NCProtoGetAddressableContactsResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoGetAddressableContactsResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsResponse and conformance NCProtoGetAddressableContactsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetAddressableContactsResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoGetAddressableContactsResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetAddressableContactsResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoGetAddressableContactsResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsResponse and conformance NCProtoGetAddressableContactsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetAddressableContactsResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoGetAddressableContactsResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsResponse and conformance NCProtoGetAddressableContactsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetAddressableContactsResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoGetImageForContactRequest.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static NCProtoGetImageForContactRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetImageForContactRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoGetImageForContactRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x263F50660]);
}

uint64_t NCProtoGetImageForContactRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for NCProtoGetImageForContactRequest);
}

uint64_t static NCProtoGetImageForContactRequest.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static NCProtoCreateLinkConversationRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoGetImageForContactRequest) & 1;
}

Swift::Int NCProtoGetImageForContactRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoGetImageForContactRequest, &lazy protocol witness table cache variable for type NCProtoGetImageForContactRequest and conformance NCProtoGetImageForContactRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetImageForContactRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoGetImageForContactRequest()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoGetImageForContactRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoGetImageForContactRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoGetImageForContactRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactRequest and conformance NCProtoGetImageForContactRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetImageForContactRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoGetImageForContactRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetImageForContactRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoGetImageForContactRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactRequest and conformance NCProtoGetImageForContactRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetImageForContactRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoGetImageForContactRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactRequest and conformance NCProtoGetImageForContactRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetImageForContactRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoGetImageForContactRequest(char *a1, char *a2)
{
  return specialized static NCProtoCreateLinkConversationRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoGetImageForContactRequest) & 1;
}

unint64_t static NCProtoGetImageForContactResponse.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t static NCProtoGetImageForContactResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetImageForContactResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoGetImageForContactResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCreateLinkConversationResponse.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for NCProtoGetImageForContactResponse, MEMORY[0x263F505E8]);
}

uint64_t NCProtoGetImageForContactResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in NCProtoGetImageForContactResponse.traverse<A>(visitor:));
}

uint64_t closure #1 in NCProtoGetImageForContactResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoGetImageForContactResponse(0);
  uint64_t v3 = a1 + *(int *)(result + 20);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

Swift::Int NCProtoGetImageForContactResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoGetImageForContactResponse, &lazy protocol witness table cache variable for type NCProtoGetImageForContactResponse and conformance NCProtoGetImageForContactResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetImageForContactResponse);
}

double protocol witness for Message.init() in conformance NCProtoGetImageForContactResponse@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  double result = 0.0;
  *(_OWORD *)(a2 + *(int *)(a1 + 20)) = xmmword_25743E3C0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoGetImageForContactResponse()
{
  return 0xD000000000000022;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoGetImageForContactResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoGetImageForContactResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoGetImageForContactResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoGetImageForContactResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoGetImageForContactResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactResponse and conformance NCProtoGetImageForContactResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetImageForContactResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoGetImageForContactResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetImageForContactResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoGetImageForContactResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactResponse and conformance NCProtoGetImageForContactResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetImageForContactResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoGetImageForContactResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactResponse and conformance NCProtoGetImageForContactResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetImageForContactResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoAddConversationParticipantsRequest.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t static NCProtoAddConversationParticipantsRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddConversationParticipantsRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoAddConversationParticipantsRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoAddConversationParticipantsRequest.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x263F50630]);
}

uint64_t NCProtoAddConversationParticipantsRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoAddConversationParticipantsRequest.traverse<A>(visitor:)(a1, a2, a3, MEMORY[0x263F506F0], (void (*)(void))type metadata accessor for NCProtoAddConversationParticipantsRequest);
}

uint64_t static NCProtoAddConversationParticipantsRequest.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static NCProtoAddConversationParticipantsRequest.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void))specialized static Array<A>.== infix(_:_:), type metadata accessor for NCProtoAddConversationParticipantsRequest) & 1;
}

Swift::Int NCProtoAddConversationParticipantsRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoAddConversationParticipantsRequest, &lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsRequest and conformance NCProtoAddConversationParticipantsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAddConversationParticipantsRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoAddConversationParticipantsRequest()
{
  return 0xD00000000000002ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoAddConversationParticipantsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoAddConversationParticipantsRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoAddConversationParticipantsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoAddConversationParticipantsRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoAddConversationParticipantsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsRequest and conformance NCProtoAddConversationParticipantsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAddConversationParticipantsRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoAddConversationParticipantsRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddConversationParticipantsRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoAddConversationParticipantsRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsRequest and conformance NCProtoAddConversationParticipantsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAddConversationParticipantsRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoAddConversationParticipantsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsRequest and conformance NCProtoAddConversationParticipantsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAddConversationParticipantsRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoAddConversationParticipantsRequest(char *a1, char *a2)
{
  return specialized static NCProtoAddConversationParticipantsRequest.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void))specialized static Array<A>.== infix(_:_:), type metadata accessor for NCProtoAddConversationParticipantsRequest) & 1;
}

unint64_t static NCProtoAddConversationParticipantsResponse.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t static NCProtoAddConversationParticipantsResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddConversationParticipantsResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoAddConversationParticipantsResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoAddConversationParticipantsResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoAddConversationParticipantsResponse, &lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsResponse and conformance NCProtoAddConversationParticipantsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAddConversationParticipantsResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoAddConversationParticipantsResponse()
{
  return 0xD00000000000002BLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoAddConversationParticipantsResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsResponse and conformance NCProtoAddConversationParticipantsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAddConversationParticipantsResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoAddConversationParticipantsResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAddConversationParticipantsResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoAddConversationParticipantsResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsResponse and conformance NCProtoAddConversationParticipantsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAddConversationParticipantsResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoAddConversationParticipantsResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsResponse and conformance NCProtoAddConversationParticipantsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAddConversationParticipantsResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoGetCallDisplayDetailsRequest.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t static NCProtoGetCallDisplayDetailsRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetCallDisplayDetailsRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoGetCallDisplayDetailsRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x263F50660]);
}

uint64_t NCProtoGetCallDisplayDetailsRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for NCProtoGetCallDisplayDetailsRequest);
}

uint64_t static NCProtoGetCallDisplayDetailsRequest.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static NCProtoCreateLinkConversationRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoGetCallDisplayDetailsRequest) & 1;
}

Swift::Int NCProtoGetCallDisplayDetailsRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoGetCallDisplayDetailsRequest, &lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsRequest and conformance NCProtoGetCallDisplayDetailsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetCallDisplayDetailsRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoGetCallDisplayDetailsRequest()
{
  return 0xD000000000000024;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoGetCallDisplayDetailsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoGetCallDisplayDetailsRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoGetCallDisplayDetailsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsRequest and conformance NCProtoGetCallDisplayDetailsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetCallDisplayDetailsRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoGetCallDisplayDetailsRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetCallDisplayDetailsRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoGetCallDisplayDetailsRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsRequest and conformance NCProtoGetCallDisplayDetailsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetCallDisplayDetailsRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoGetCallDisplayDetailsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsRequest and conformance NCProtoGetCallDisplayDetailsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetCallDisplayDetailsRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoGetCallDisplayDetailsRequest(char *a1, char *a2)
{
  return specialized static NCProtoCreateLinkConversationRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoGetCallDisplayDetailsRequest) & 1;
}

unint64_t static NCProtoGetCallDisplayDetailsResponse.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t static NCProtoGetCallDisplayDetailsResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetCallDisplayDetailsResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoGetCallDisplayDetailsResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in NCProtoGetCallDisplayDetailsResponse.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in NCProtoGetCallDisplayDetailsResponse.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t NCProtoGetCallDisplayDetailsResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3, closure #1 in NCProtoGetCallDisplayDetailsResponse.traverse<A>(visitor:));
}

uint64_t closure #1 in NCProtoGetCallDisplayDetailsResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NCProtoCallInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NCProtoGetCallDisplayDetailsResponse(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for NCProtoCallInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of NCProtoContactInfo?((uint64_t)v7, &demangling cache variable for type metadata for NCProtoCallInfo?);
  }
  outlined init with take of NCProtoContactInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for NCProtoCallInfo);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, (void (*)(uint64_t))type metadata accessor for NCProtoCallInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v11, type metadata accessor for NCProtoCallInfo);
}

Swift::Int NCProtoGetCallDisplayDetailsResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoGetCallDisplayDetailsResponse, &lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsResponse and conformance NCProtoGetCallDisplayDetailsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetCallDisplayDetailsResponse);
}

uint64_t protocol witness for Message.init() in conformance NCProtoGetCallDisplayDetailsResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance NCProtoSuggestionAdvertisementDidChangeEvent(a1, type metadata accessor for NCProtoCallInfo, a2);
}

uint64_t protocol witness for Message.init() in conformance NCProtoSuggestionAdvertisementDidChangeEvent@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  UnknownStorage.init()();
  uint64_t v6 = a3 + *(int *)(a1 + 20);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoGetCallDisplayDetailsResponse()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoGetCallDisplayDetailsResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoGetCallDisplayDetailsResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsResponse and conformance NCProtoGetCallDisplayDetailsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetCallDisplayDetailsResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoGetCallDisplayDetailsResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetCallDisplayDetailsResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoGetCallDisplayDetailsResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsResponse and conformance NCProtoGetCallDisplayDetailsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetCallDisplayDetailsResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsResponse and conformance NCProtoGetCallDisplayDetailsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetCallDisplayDetailsResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoDestinationCapabilities.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t static NCProtoDestinationCapabilities._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDestinationCapabilities._protobuf_nameMap, a1);
}

uint64_t NCProtoDestinationCapabilities.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2 || result == 1) {
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoDestinationCapabilities.traverse<A>(visitor:)()
{
  if (*v0 != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
  {
    if (v0[1] != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (v0[2] != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for NCProtoDestinationCapabilities(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int NCProtoDestinationCapabilities.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoDestinationCapabilities, &lazy protocol witness table cache variable for type NCProtoDestinationCapabilities and conformance NCProtoDestinationCapabilities, (void (*)(uint64_t))type metadata accessor for NCProtoDestinationCapabilities);
}

uint64_t protocol witness for Message.init() in conformance NCProtoDestinationCapabilities@<X0>(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoDestinationCapabilities()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoDestinationCapabilities()
{
  return NCProtoDestinationCapabilities.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoDestinationCapabilities()
{
  return NCProtoDestinationCapabilities.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoDestinationCapabilities(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDestinationCapabilities and conformance NCProtoDestinationCapabilities, (void (*)(uint64_t))type metadata accessor for NCProtoDestinationCapabilities);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDestinationCapabilities@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDestinationCapabilities._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoDestinationCapabilities(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDestinationCapabilities and conformance NCProtoDestinationCapabilities, (void (*)(uint64_t))type metadata accessor for NCProtoDestinationCapabilities);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDestinationCapabilities(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDestinationCapabilities and conformance NCProtoDestinationCapabilities, (void (*)(uint64_t))type metadata accessor for NCProtoDestinationCapabilities);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoGetDestinationCapabilitiesRequest.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t static NCProtoGetDestinationCapabilitiesRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetDestinationCapabilitiesRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoGetDestinationCapabilitiesRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoPullLagunaSessionToTVRequest.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for NCProtoGetDestinationCapabilitiesRequest, (void (*)(void))lazy protocol witness table accessor for type NCProtoGetDestinationCapabilitiesRequest.DestinationType and conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType);
}

uint64_t NCProtoPullLagunaSessionToTVRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(void))
{
  uint64_t v9 = v5;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v6 || (v14 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      closure #2 in NCProtoPullLagunaSessionToTVRequest.decodeMessage<A>(decoder:)(a1, v9, a2, a3, a4, a5);
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
  }
  return result;
}

uint64_t closure #2 in NCProtoPullLagunaSessionToTVRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), void (*a6)(void))
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t NCProtoGetDestinationCapabilitiesRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoPullLagunaSessionToTVRequest.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for NCProtoGetDestinationCapabilitiesRequest, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type NCProtoGetDestinationCapabilitiesRequest.DestinationType and conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType, (uint64_t)&type metadata for NCProtoGetDestinationCapabilitiesRequest.DestinationType, (void (*)(void))type metadata accessor for NCProtoGetDestinationCapabilitiesRequest);
}

uint64_t NCProtoPullLagunaSessionToTVRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(uint64_t, uint64_t), uint64_t a6, void (*a7)(void))
{
  unint64_t v14 = v7[1];
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v15 = *v7 & 0xFFFFFFFFFFFFLL;
  }
  if (!v15 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v8))
  {
    uint64_t result = closure #1 in NCProtoPullLagunaSessionToTVRequest.traverse<A>(visitor:)((uint64_t)v7, a1, a2, a3, a4, a5);
    if (!v8)
    {
      a7(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoPullLagunaSessionToTVRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(uint64_t, uint64_t))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 24) + 9) & 1) == 0)
  {
    a6(result, v9);
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NCProtoGetDestinationCapabilitiesRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoGetDestinationCapabilitiesRequest, &lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest and conformance NCProtoGetDestinationCapabilitiesRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetDestinationCapabilitiesRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoPullLagunaSessionToTVRequest@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = (char *)a2 + *(int *)(a1 + 24);
  *(void *)uint64_t v5 = 0;
  *((_WORD *)v5 + 4) = 256;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoGetDestinationCapabilitiesRequest()
{
  return 0xD000000000000029;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoGetDestinationCapabilitiesRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoGetDestinationCapabilitiesRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoGetDestinationCapabilitiesRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoGetDestinationCapabilitiesRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoGetDestinationCapabilitiesRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest and conformance NCProtoGetDestinationCapabilitiesRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetDestinationCapabilitiesRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoGetDestinationCapabilitiesRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetDestinationCapabilitiesRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoGetDestinationCapabilitiesRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest and conformance NCProtoGetDestinationCapabilitiesRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetDestinationCapabilitiesRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoGetDestinationCapabilitiesRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest and conformance NCProtoGetDestinationCapabilitiesRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetDestinationCapabilitiesRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t static NCProtoGetDestinationCapabilitiesRequest.DestinationType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetDestinationCapabilitiesRequest.DestinationType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetDestinationCapabilitiesRequest.DestinationType._protobuf_nameMap, a1);
}

unint64_t static NCProtoGetDestinationCapabilitiesResponse.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t static NCProtoGetDestinationCapabilitiesResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetDestinationCapabilitiesResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoGetDestinationCapabilitiesResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in NCProtoGetDestinationCapabilitiesResponse.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in NCProtoGetDestinationCapabilitiesResponse.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t NCProtoGetDestinationCapabilitiesResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3, closure #1 in NCProtoGetDestinationCapabilitiesResponse.traverse<A>(visitor:));
}

uint64_t closure #1 in NCProtoGetDestinationCapabilitiesResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NCProtoDestinationCapabilities(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t DestinationCapabilitiesResponse = type metadata accessor for NCProtoGetDestinationCapabilitiesResponse(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(DestinationCapabilitiesResponse + 20), (uint64_t)v7, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of NCProtoContactInfo?((uint64_t)v7, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
  }
  outlined init with take of NCProtoContactInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for NCProtoDestinationCapabilities);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDestinationCapabilities and conformance NCProtoDestinationCapabilities, (void (*)(uint64_t))type metadata accessor for NCProtoDestinationCapabilities);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v11, type metadata accessor for NCProtoDestinationCapabilities);
}

Swift::Int NCProtoGetDestinationCapabilitiesResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoGetDestinationCapabilitiesResponse, &lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesResponse and conformance NCProtoGetDestinationCapabilitiesResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetDestinationCapabilitiesResponse);
}

uint64_t protocol witness for Message.init() in conformance NCProtoGetDestinationCapabilitiesResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance NCProtoSuggestionAdvertisementDidChangeEvent(a1, type metadata accessor for NCProtoDestinationCapabilities, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoGetDestinationCapabilitiesResponse()
{
  return 0xD00000000000002ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoGetDestinationCapabilitiesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoGetDestinationCapabilitiesResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoGetDestinationCapabilitiesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoGetDestinationCapabilitiesResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoGetDestinationCapabilitiesResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesResponse and conformance NCProtoGetDestinationCapabilitiesResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetDestinationCapabilitiesResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoGetDestinationCapabilitiesResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoGetDestinationCapabilitiesResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoGetDestinationCapabilitiesResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesResponse and conformance NCProtoGetDestinationCapabilitiesResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetDestinationCapabilitiesResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoGetDestinationCapabilitiesResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesResponse and conformance NCProtoGetDestinationCapabilitiesResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetDestinationCapabilitiesResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoCallState.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t static NCProtoCallState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCallState._protobuf_nameMap, a1);
}

uint64_t NCProtoCallState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 4:
          type metadata accessor for NCProtoCallState(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 3:
          closure #3 in NCProtoContinuityCall.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(void))type metadata accessor for NCProtoCallState, (void (*)(void))lazy protocol witness table accessor for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode);
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in NCProtoContinuityCall.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), void (*a6)(void))
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t NCProtoCallState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in NCProtoCallState.traverse<A>(visitor:)(v3);
  if (!v4)
  {
    closure #1 in NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoCallState);
    closure #3 in NCProtoContinuityCall.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoCallState, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode);
    closure #4 in NCProtoCallState.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoCallState);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in NCProtoCallState.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoCallState(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 20)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #3 in NCProtoContinuityCall.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(uint64_t, uint64_t))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 28) + 9) & 1) == 0)
  {
    a6(result, v9);
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NCProtoCallState.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoCallState, &lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, (void (*)(uint64_t))type metadata accessor for NCProtoCallState);
}

uint64_t protocol witness for Message.init() in conformance NCProtoCallState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 2;
  *(unsigned char *)(a2 + v5) = 2;
  uint64_t v6 = a1[8];
  uint64_t v7 = a2 + a1[7];
  *(void *)uint64_t v7 = 0;
  *(_WORD *)(v7 + 8) = 256;
  *(unsigned char *)(a2 + v6) = 2;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoCallState()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoCallState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCallState.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoCallState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCallState.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoCallState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, (void (*)(uint64_t))type metadata accessor for NCProtoCallState);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoCallState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCallState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoCallState(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, (void (*)(uint64_t))type metadata accessor for NCProtoCallState);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoCallState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, (void (*)(uint64_t))type metadata accessor for NCProtoCallState);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoCallStateRequest.protoMessageName.getter()
{
  return 0xD000000000000018;
}

uint64_t static NCProtoCallStateRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCallStateRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoCallStateRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x263F505F0]);
}

uint64_t NCProtoCallStateRequest.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        type metadata accessor for NCProtoCallStateRequest(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
      return result;
  }
}

Swift::Int NCProtoCallStateRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoCallStateRequest, &lazy protocol witness table cache variable for type NCProtoCallStateRequest and conformance NCProtoCallStateRequest, (void (*)(uint64_t))type metadata accessor for NCProtoCallStateRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoCallStateRequest@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_25743E3B0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoCallStateRequest()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoCallStateRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCallStateRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoCallStateRequest()
{
  return NCProtoCallStateRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoCallStateRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateRequest and conformance NCProtoCallStateRequest, (void (*)(uint64_t))type metadata accessor for NCProtoCallStateRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoCallStateRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCallStateRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoCallStateRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateRequest and conformance NCProtoCallStateRequest, (void (*)(uint64_t))type metadata accessor for NCProtoCallStateRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoCallStateRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateRequest and conformance NCProtoCallStateRequest, (void (*)(uint64_t))type metadata accessor for NCProtoCallStateRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoCallStateResponse.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t static NCProtoCallStateResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCallStateResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoCallStateResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in NCProtoCallStateResponse.decodeMessage<A>(decoder:));
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = v4;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v5 || (v12 & 1) != 0) {
      break;
    }
    if (result == 1) {
      a4(a1, v7, a2, a3);
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoCallStateResponse.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t NCProtoCallStateResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(a1, a2, a3, closure #1 in NCProtoCallStateResponse.traverse<A>(visitor:));
}

uint64_t NCProtoSuggestionAdvertisementDidChangeEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a4(v4, a1, a2, a3);
  if (!v5) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in NCProtoCallStateResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NCProtoCallState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NCProtoCallStateResponse(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for NCProtoCallState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of NCProtoContactInfo?((uint64_t)v7, &demangling cache variable for type metadata for NCProtoCallState?);
  }
  outlined init with take of NCProtoContactInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for NCProtoCallState);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, (void (*)(uint64_t))type metadata accessor for NCProtoCallState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v11, type metadata accessor for NCProtoCallState);
}

Swift::Int NCProtoCallStateResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoCallStateResponse, &lazy protocol witness table cache variable for type NCProtoCallStateResponse and conformance NCProtoCallStateResponse, (void (*)(uint64_t))type metadata accessor for NCProtoCallStateResponse);
}

uint64_t protocol witness for Message.init() in conformance NCProtoCallStateResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance NCProtoSuggestionAdvertisementDidChangeEvent(a1, type metadata accessor for NCProtoCallState, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoCallStateResponse()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoCallStateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCallStateResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoCallStateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCallStateResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoCallStateResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateResponse and conformance NCProtoCallStateResponse, (void (*)(uint64_t))type metadata accessor for NCProtoCallStateResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoCallStateResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoCallStateResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoCallStateResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateResponse and conformance NCProtoCallStateResponse, (void (*)(uint64_t))type metadata accessor for NCProtoCallStateResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoCallStateResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateResponse and conformance NCProtoCallStateResponse, (void (*)(uint64_t))type metadata accessor for NCProtoCallStateResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoDeviceTokenRequest.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static NCProtoDeviceTokenRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeviceTokenRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoDeviceTokenRequest.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        break;
      case 2:
        closure #2 in NCProtoDeviceTokenRequest.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in NCProtoDeviceTokenRequest.decodeMessage<A>(decoder:)();
        break;
      case 4:
        type metadata accessor for NCProtoDeviceTokenRequest(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        break;
      case 5:
        closure #5 in NCProtoDeviceTokenRequest.decodeMessage<A>(decoder:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t closure #2 in NCProtoDeviceTokenRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in NCProtoDeviceTokenRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #5 in NCProtoDeviceTokenRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t NCProtoDeviceTokenRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t result = closure #1 in NCProtoDeviceTokenRequest.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      closure #2 in NCProtoDeviceTokenRequest.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
      closure #4 in NCProtoCallState.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for NCProtoDeviceTokenRequest);
      closure #4 in NCProtoDeviceTokenRequest.traverse<A>(visitor:)((uint64_t)v3);
      type metadata accessor for NCProtoDeviceTokenRequest(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoDeviceTokenRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NCProtoDeviceTokenRequest(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of NCProtoContactInfo?((uint64_t)v7, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  }
  outlined init with take of NCProtoContactInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, (void (*)(uint64_t))type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v11, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t closure #2 in NCProtoDeviceTokenRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NCProtoCallState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NCProtoDeviceTokenRequest(0);
  outlined init with copy of NCProtoContactInfo?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for NCProtoCallState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of NCProtoContactInfo?((uint64_t)v7, &demangling cache variable for type metadata for NCProtoCallState?);
  }
  outlined init with take of NCProtoContactInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for NCProtoCallState);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, (void (*)(uint64_t))type metadata accessor for NCProtoCallState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of NCProtoContactInfo((uint64_t)v11, type metadata accessor for NCProtoCallState);
}

uint64_t closure #4 in NCProtoCallState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 32)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #4 in NCProtoDeviceTokenRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoDeviceTokenRequest(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 36) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NCProtoDeviceTokenRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoDeviceTokenRequest, &lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest and conformance NCProtoDeviceTokenRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceTokenRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoDeviceTokenRequest@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + a1[6];
  uint64_t v5 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = (char *)a2 + a1[7];
  uint64_t v7 = type metadata accessor for NCProtoCallState(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v9 = a1[9];
  *((unsigned char *)a2 + a1[8]) = 2;
  uint64_t v10 = (char *)a2 + v9;
  *(void *)uint64_t v10 = 0;
  *((_WORD *)v10 + 4) = 256;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoDeviceTokenRequest()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoDeviceTokenRequest()
{
  return NCProtoDeviceTokenRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoDeviceTokenRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoDeviceTokenRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoDeviceTokenRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest and conformance NCProtoDeviceTokenRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceTokenRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDeviceTokenRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeviceTokenRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoDeviceTokenRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest and conformance NCProtoDeviceTokenRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceTokenRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDeviceTokenRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest and conformance NCProtoDeviceTokenRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceTokenRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t static NCProtoDeviceTokenRequest.ConversationHandoffType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeviceTokenRequest.ConversationHandoffType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDeviceTokenRequest.ConversationHandoffType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeviceTokenRequest.ConversationHandoffType._protobuf_nameMap, a1);
}

unint64_t static NCProtoDeviceTokenResponse.protoMessageName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t static NCProtoDeviceTokenResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeviceTokenResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoDeviceTokenResponse.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      type metadata accessor for NCProtoDeviceTokenResponse(0);
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t NCProtoDeviceTokenResponse.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    uint64_t result = closure #1 in NCProtoDeviceTokenResponse.traverse<A>(visitor:)((uint64_t)v0);
    if (!v1)
    {
      type metadata accessor for NCProtoDeviceTokenResponse(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoDeviceTokenResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoDeviceTokenResponse(0);
  uint64_t v3 = a1 + *(int *)(result + 24);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

Swift::Int NCProtoDeviceTokenResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoDeviceTokenResponse, &lazy protocol witness table cache variable for type NCProtoDeviceTokenResponse and conformance NCProtoDeviceTokenResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceTokenResponse);
}

double protocol witness for Message.init() in conformance NCProtoDeviceTokenResponse@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  UnknownStorage.init()();
  double result = 0.0;
  *(_OWORD *)((char *)a2 + *(int *)(a1 + 24)) = xmmword_25743E3C0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoDeviceTokenResponse()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoDeviceTokenResponse()
{
  return NCProtoDeviceTokenResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoDeviceTokenResponse()
{
  return NCProtoDeviceTokenResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoDeviceTokenResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenResponse and conformance NCProtoDeviceTokenResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceTokenResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDeviceTokenResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDeviceTokenResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoDeviceTokenResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenResponse and conformance NCProtoDeviceTokenResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceTokenResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDeviceTokenResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenResponse and conformance NCProtoDeviceTokenResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceTokenResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoDisconnectRequest.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t static NCProtoDisconnectRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDisconnectRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoDisconnectRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v11 = v4;
  if (!v4)
  {
    while (1)
    {
      if (v10) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for NCProtoDisconnectRequest(0);
        uint64_t v12 = v11;
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v12 = v11;
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v12 = v11;
    closure #3 in NCProtoContinuityCall.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(void))type metadata accessor for NCProtoDisconnectRequest, (void (*)(void))lazy protocol witness table accessor for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason);
LABEL_5:
    uint64_t v11 = v12;
    goto LABEL_6;
  }
  return result;
}

uint64_t NCProtoDisconnectRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  unint64_t v8 = v3[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      if ((int)v7 != v7 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v8 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v4)
      {
LABEL_8:
        uint64_t result = closure #1 in NCProtoTransferActiveConversationRequest.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for NCProtoDisconnectRequest);
        if (!v4)
        {
          closure #3 in NCProtoContinuityCall.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for NCProtoDisconnectRequest, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason);
          type metadata accessor for NCProtoDisconnectRequest(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
      return result;
  }
}

Swift::Int NCProtoDisconnectRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoDisconnectRequest, &lazy protocol witness table cache variable for type NCProtoDisconnectRequest and conformance NCProtoDisconnectRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDisconnectRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoDisconnectRequest@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = xmmword_25743E3B0;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 28);
  *((unsigned char *)a2 + *(int *)(a1 + 24)) = 2;
  uint64_t v6 = (char *)a2 + v5;
  *(void *)uint64_t v6 = 0;
  *((_WORD *)v6 + 4) = 256;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoDisconnectRequest()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoDisconnectRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoDisconnectRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoDisconnectRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoDisconnectRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoDisconnectRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectRequest and conformance NCProtoDisconnectRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDisconnectRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDisconnectRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDisconnectRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoDisconnectRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectRequest and conformance NCProtoDisconnectRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDisconnectRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDisconnectRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectRequest and conformance NCProtoDisconnectRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDisconnectRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t static NCProtoDisconnectRequest.DisconnectReason._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDisconnectRequest.DisconnectReason._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDisconnectRequest.DisconnectReason@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDisconnectRequest.DisconnectReason._protobuf_nameMap, a1);
}

unint64_t static NCProtoDisconnectResponse.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static NCProtoDisconnectResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDisconnectResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoDisconnectResponse.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
  }
  return result;
}

uint64_t NCProtoDisconnectResponse.traverse<A>(visitor:)()
{
  if (*v0 != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for NCProtoDisconnectResponse(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int NCProtoDisconnectResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoDisconnectResponse, &lazy protocol witness table cache variable for type NCProtoDisconnectResponse and conformance NCProtoDisconnectResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDisconnectResponse);
}

uint64_t protocol witness for Message.init() in conformance NCProtoDisconnectResponse@<X0>(unsigned char *a1@<X8>)
{
  *a1 = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoDisconnectResponse()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoDisconnectResponse()
{
  return NCProtoDisconnectResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoDisconnectResponse()
{
  return NCProtoDisconnectResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoDisconnectResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectResponse and conformance NCProtoDisconnectResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDisconnectResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoDisconnectResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoDisconnectResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoDisconnectResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectResponse and conformance NCProtoDisconnectResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDisconnectResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoDisconnectResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectResponse and conformance NCProtoDisconnectResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDisconnectResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoPrepareTransferRequest.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t static NCProtoPrepareTransferRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPrepareTransferRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoPrepareTransferRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCreateLinkConversationResponse.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for NCProtoPrepareTransferRequest, MEMORY[0x263F50658]);
}

uint64_t NCProtoPrepareTransferRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoCreateLinkConversationResponse.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for NCProtoPrepareTransferRequest);
}

uint64_t NCProtoCreateLinkConversationResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = closure #1 in NCProtoContinuityCall.traverse<A>(visitor:)(v4, a1, a2, a3, a4);
  if (!v5) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static NCProtoPrepareTransferRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static NCProtoLinkConversationSendLetMeInRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoPrepareTransferRequest) & 1;
}

Swift::Int NCProtoPrepareTransferRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoPrepareTransferRequest, &lazy protocol witness table cache variable for type NCProtoPrepareTransferRequest and conformance NCProtoPrepareTransferRequest, (void (*)(uint64_t))type metadata accessor for NCProtoPrepareTransferRequest);
}

uint64_t protocol witness for Message.init() in conformance NCProtoPrepareTransferRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = (void *)(a2 + *(int *)(a1 + 20));
  *uint64_t v5 = 0;
  v5[1] = 0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoPrepareTransferRequest()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoPrepareTransferRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoPrepareTransferRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoPrepareTransferRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoPrepareTransferRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoPrepareTransferRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferRequest and conformance NCProtoPrepareTransferRequest, (void (*)(uint64_t))type metadata accessor for NCProtoPrepareTransferRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoPrepareTransferRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPrepareTransferRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoPrepareTransferRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferRequest and conformance NCProtoPrepareTransferRequest, (void (*)(uint64_t))type metadata accessor for NCProtoPrepareTransferRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoPrepareTransferRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferRequest and conformance NCProtoPrepareTransferRequest, (void (*)(uint64_t))type metadata accessor for NCProtoPrepareTransferRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoPrepareTransferRequest(uint64_t a1, uint64_t a2)
{
  return specialized static NCProtoLinkConversationSendLetMeInRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoPrepareTransferRequest) & 1;
}

unint64_t static NCProtoPrepareTransferResponse.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t static NCProtoPrepareTransferResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPrepareTransferResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoPrepareTransferResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

Swift::Int NCProtoPrepareTransferResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoPrepareTransferResponse, &lazy protocol witness table cache variable for type NCProtoPrepareTransferResponse and conformance NCProtoPrepareTransferResponse, (void (*)(uint64_t))type metadata accessor for NCProtoPrepareTransferResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoPrepareTransferResponse()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoPrepareTransferResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferResponse and conformance NCProtoPrepareTransferResponse, (void (*)(uint64_t))type metadata accessor for NCProtoPrepareTransferResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoPrepareTransferResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoPrepareTransferResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoPrepareTransferResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferResponse and conformance NCProtoPrepareTransferResponse, (void (*)(uint64_t))type metadata accessor for NCProtoPrepareTransferResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoPrepareTransferResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferResponse and conformance NCProtoPrepareTransferResponse, (void (*)(uint64_t))type metadata accessor for NCProtoPrepareTransferResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoAudioRouteTransferRequest.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static NCProtoAudioRouteTransferRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAudioRouteTransferRequest._protobuf_nameMap, a1);
}

uint64_t NCProtoAudioRouteTransferRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x263F50660]);
}

uint64_t NCProtoEndedSessionEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v5 || (v10 & 1) != 0) {
      break;
    }
    if (result == 1) {
      a4(v4, a2, a3);
    }
  }
  return result;
}

uint64_t NCProtoAudioRouteTransferRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoEndedSessionEvent.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for NCProtoAudioRouteTransferRequest);
}

uint64_t static NCProtoAudioRouteTransferRequest.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static NCProtoCreateLinkConversationRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoAudioRouteTransferRequest) & 1;
}

Swift::Int NCProtoAudioRouteTransferRequest.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoAudioRouteTransferRequest, &lazy protocol witness table cache variable for type NCProtoAudioRouteTransferRequest and conformance NCProtoAudioRouteTransferRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAudioRouteTransferRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoAudioRouteTransferRequest()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoAudioRouteTransferRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoAudioRouteTransferRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoAudioRouteTransferRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAudioRouteTransferRequest and conformance NCProtoAudioRouteTransferRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAudioRouteTransferRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoAudioRouteTransferRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAudioRouteTransferRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoAudioRouteTransferRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAudioRouteTransferRequest and conformance NCProtoAudioRouteTransferRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAudioRouteTransferRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoAudioRouteTransferRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAudioRouteTransferRequest and conformance NCProtoAudioRouteTransferRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAudioRouteTransferRequest);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoAudioRouteTransferRequest(char *a1, char *a2)
{
  return specialized static NCProtoCreateLinkConversationRequest.== infix(_:_:)(a1, a2, type metadata accessor for NCProtoAudioRouteTransferRequest) & 1;
}

unint64_t static NCProtoAudioRouteTransferResponse.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return _NameMap.init()();
}

uint64_t static NCProtoAudioRouteTransferResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAudioRouteTransferResponse._protobuf_nameMap, a1);
}

uint64_t NCProtoAudioRouteTransferResponse.decodeMessage<A>(decoder:)()
{
  return NCProtoLagunaConnectionResponse.decodeMessage<A>(decoder:)();
}

uint64_t static NCProtoLagunaConnectionResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  unint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  char v10 = (char *)&v14 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v14 - v9, a1, v4);
  v11(v8, a2, v4);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  return a2 & 1;
}

Swift::Int NCProtoAudioRouteTransferResponse.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoAudioRouteTransferResponse, &lazy protocol witness table cache variable for type NCProtoAudioRouteTransferResponse and conformance NCProtoAudioRouteTransferResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAudioRouteTransferResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoAudioRouteTransferResponse()
{
  return 0xD000000000000022;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoAudioRouteTransferResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAudioRouteTransferResponse and conformance NCProtoAudioRouteTransferResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAudioRouteTransferResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoAudioRouteTransferResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoAudioRouteTransferResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoAudioRouteTransferResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAudioRouteTransferResponse and conformance NCProtoAudioRouteTransferResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAudioRouteTransferResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoAudioRouteTransferResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAudioRouteTransferResponse and conformance NCProtoAudioRouteTransferResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAudioRouteTransferResponse);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

unint64_t static NCProtoMemberAssociationPrimaryInfo.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t static NCProtoMemberAssociationPrimaryInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoMemberAssociationPrimaryInfo._protobuf_nameMap, a1);
}

uint64_t NCProtoMemberAssociationPrimaryInfo.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
          type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_5;
        case 5:
          lazy protocol witness table accessor for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NCProtoMemberAssociationPrimaryInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in NCProtoActiveConversation.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
  if (!v4)
  {
    closure #2 in NCProtoMemberAssociationPrimaryInfo.traverse<A>(visitor:)(v3);
    closure #3 in NCProtoMemberAssociationPrimaryInfo.traverse<A>(visitor:)(v3);
    closure #4 in NCProtoMemberAssociationPrimaryInfo.traverse<A>(visitor:)(v3);
    if (*(void *)(*(void *)v3 + 16))
    {
      lazy protocol witness table accessor for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType();
      dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)();
    }
    type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in NCProtoMemberAssociationPrimaryInfo.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v3 = a1 + *(int *)(result + 28);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #3 in NCProtoMemberAssociationPrimaryInfo.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 32) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #4 in NCProtoMemberAssociationPrimaryInfo.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  if (*(void *)(a1 + *(int *)(result + 36) + 8)) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NCProtoMemberAssociationPrimaryInfo.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoMemberAssociationPrimaryInfo, &lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, (void (*)(uint64_t))type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

double protocol witness for Message.init() in conformance NCProtoMemberAssociationPrimaryInfo@<D0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  uint64_t v4 = a1[7];
  uint64_t v5 = (void *)((char *)a2 + a1[6]);
  *uint64_t v5 = 0;
  v5[1] = 0;
  double result = 0.0;
  *(_OWORD *)((char *)a2 + v4) = xmmword_25743E3C0;
  uint64_t v7 = a1[9];
  unint64_t v8 = (char *)a2 + a1[8];
  *(void *)unint64_t v8 = 0;
  v8[8] = 1;
  uint64_t v9 = (void *)((char *)a2 + v7);
  *uint64_t v9 = 0;
  v9[1] = 0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoMemberAssociationPrimaryInfo()
{
  return 0xD000000000000024;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoMemberAssociationPrimaryInfo()
{
  return NCProtoMemberAssociationPrimaryInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoMemberAssociationPrimaryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoMemberAssociationPrimaryInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoMemberAssociationPrimaryInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, (void (*)(uint64_t))type metadata accessor for NCProtoMemberAssociationPrimaryInfo);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoMemberAssociationPrimaryInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoMemberAssociationPrimaryInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoMemberAssociationPrimaryInfo(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, (void (*)(uint64_t))type metadata accessor for NCProtoMemberAssociationPrimaryInfo);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoMemberAssociationPrimaryInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, (void (*)(uint64_t))type metadata accessor for NCProtoMemberAssociationPrimaryInfo);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoMemberAssociationPrimaryInfo.MemberAssociationType._protobuf_nameMap, a1);
}

unint64_t static NCProtoIDSProxyMessage.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t static NCProtoIDSProxyMessage._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage._protobuf_nameMap, a1);
}

uint64_t NCProtoIDSProxyMessage.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3:
        closure #3 in NCProtoIDSProxyMessage.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 2:
        closure #2 in NCProtoIDSProxyMessage.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 1:
        closure #1 in NCProtoIDSProxyMessage.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
    }
  }
  return result;
}

uint64_t closure #1 in NCProtoIDSProxyMessage.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for NCProtoIDSProxyMessage.RawData(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.RawData?);
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of NCProtoContactInfo?(a1, (uint64_t)v12, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v12, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    uint64_t v29 = v13;
    uint64_t v30 = v46;
  }
  else
  {
    v38 = v27;
    uint64_t v31 = (uint64_t)v44;
    outlined init with take of NCProtoContactInfo((uint64_t)v12, (uint64_t)v19, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    outlined init with take of NCProtoContactInfo((uint64_t)v19, (uint64_t)v17, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of NCProtoContactInfo((uint64_t)v17, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
      uint64_t v30 = v46;
    }
    else
    {
      outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.RawData?);
      outlined init with take of NCProtoContactInfo((uint64_t)v17, v31, type metadata accessor for NCProtoIDSProxyMessage.RawData);
      outlined init with take of NCProtoContactInfo(v31, (uint64_t)v24, type metadata accessor for NCProtoIDSProxyMessage.RawData);
      uint64_t v30 = v46;
      v38(v24, 0, 1, v46);
    }
  }
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.RawData);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.RawData?);
  }
  uint64_t v34 = v42;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v24, v42, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.RawData?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v30) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.RawData?);
    return outlined destroy of NCProtoContactInfo?(v34, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.RawData?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of NCProtoContactInfo(v34, v41, type metadata accessor for NCProtoIDSProxyMessage.RawData);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.RawData?);
    uint64_t v36 = v40;
    outlined destroy of NCProtoContactInfo?(v40, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    outlined init with take of NCProtoContactInfo(v35, v36, type metadata accessor for NCProtoIDSProxyMessage.RawData);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #2 in NCProtoIDSProxyMessage.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.GroupUpdate?);
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of NCProtoContactInfo?(a1, (uint64_t)v12, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v12, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    uint64_t v29 = v13;
  }
  else
  {
    v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of NCProtoContactInfo((uint64_t)v12, (uint64_t)v19, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    outlined init with take of NCProtoContactInfo((uint64_t)v19, (uint64_t)v17, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.GroupUpdate?);
      outlined init with take of NCProtoContactInfo((uint64_t)v17, v30, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
      outlined init with take of NCProtoContactInfo(v30, (uint64_t)v24, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v17, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.GroupUpdate?);
  }
  uint64_t v34 = v42;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v24, v42, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.GroupUpdate?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.GroupUpdate?);
    return outlined destroy of NCProtoContactInfo?(v34, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.GroupUpdate?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of NCProtoContactInfo(v34, v41, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.GroupUpdate?);
    uint64_t v36 = v40;
    outlined destroy of NCProtoContactInfo?(v40, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    outlined init with take of NCProtoContactInfo(v35, v36, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #3 in NCProtoIDSProxyMessage.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for NCProtoIDSProxyMessage.Resource(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.Resource?);
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of NCProtoContactInfo?(a1, (uint64_t)v12, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v12, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    uint64_t v29 = v13;
  }
  else
  {
    v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of NCProtoContactInfo((uint64_t)v12, (uint64_t)v19, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    outlined init with take of NCProtoContactInfo((uint64_t)v19, (uint64_t)v17, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.Resource?);
      outlined init with take of NCProtoContactInfo((uint64_t)v17, v30, type metadata accessor for NCProtoIDSProxyMessage.Resource);
      outlined init with take of NCProtoContactInfo(v30, (uint64_t)v24, type metadata accessor for NCProtoIDSProxyMessage.Resource);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v17, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.Resource);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.Resource?);
  }
  uint64_t v34 = v42;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v24, v42, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.Resource?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.Resource?);
    return outlined destroy of NCProtoContactInfo?(v34, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.Resource?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of NCProtoContactInfo(v34, v41, type metadata accessor for NCProtoIDSProxyMessage.Resource);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of NCProtoContactInfo?((uint64_t)v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.Resource?);
    uint64_t v36 = v40;
    outlined destroy of NCProtoContactInfo?(v40, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    outlined init with take of NCProtoContactInfo(v35, v36, type metadata accessor for NCProtoIDSProxyMessage.Resource);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t NCProtoIDSProxyMessage.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo?(v0, (uint64_t)v4, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v5 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1) {
    goto LABEL_8;
  }
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1) {
      closure #2 in NCProtoIDSProxyMessage.traverse<A>(visitor:)(v0);
    }
    else {
      closure #3 in NCProtoIDSProxyMessage.traverse<A>(visitor:)(v0);
    }
  }
  else
  {
    closure #1 in NCProtoIDSProxyMessage.traverse<A>(visitor:)(v0);
  }
  uint64_t result = outlined destroy of NCProtoContactInfo((uint64_t)v4, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  if (!v1)
  {
LABEL_8:
    type metadata accessor for NCProtoIDSProxyMessage(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in NCProtoIDSProxyMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NCProtoIDSProxyMessage.RawData(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo?(a1, (uint64_t)v4, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v8 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v4, (uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.RawData);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.RawData);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of NCProtoContactInfo((uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.RawData);
  }
  uint64_t result = outlined destroy of NCProtoContactInfo((uint64_t)v4, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  __break(1u);
  return result;
}

uint64_t closure #2 in NCProtoIDSProxyMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo?(a1, (uint64_t)v4, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v8 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v4, (uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of NCProtoContactInfo((uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
  }
  uint64_t result = outlined destroy of NCProtoContactInfo((uint64_t)v4, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  __break(1u);
  return result;
}

uint64_t closure #3 in NCProtoIDSProxyMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NCProtoIDSProxyMessage.Resource(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NCProtoContactInfo?(a1, (uint64_t)v4, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v8 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v4, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of NCProtoContactInfo((uint64_t)v4, (uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.Resource);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.Resource);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of NCProtoContactInfo((uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.Resource);
  }
  uint64_t result = outlined destroy of NCProtoContactInfo((uint64_t)v4, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  __break(1u);
  return result;
}

Swift::Int NCProtoIDSProxyMessage.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoIDSProxyMessage, &lazy protocol witness table cache variable for type NCProtoIDSProxyMessage and conformance NCProtoIDSProxyMessage, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage);
}

uint64_t protocol witness for Message.init() in conformance NCProtoIDSProxyMessage@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoIDSProxyMessage.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoIDSProxyMessage()
{
  return NCProtoIDSProxyMessage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage and conformance NCProtoIDSProxyMessage, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoIDSProxyMessage@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoIDSProxyMessage(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage and conformance NCProtoIDSProxyMessage, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage and conformance NCProtoIDSProxyMessage, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void one-time initialization function for protoMessageName(int a1)
{
  v1._countAndFlagsBits = 0x617461447761522ELL;
  v1._object = (void *)0xE800000000000000;
  one-time initialization function for protoMessageName(a1, v1, static NCProtoIDSProxyMessage.RawData.protoMessageName, &static NCProtoIDSProxyMessage.RawData.protoMessageName[1]);
}

{
  Swift::String v1;

  v1._countAndFlagsBits = 0x6372756F7365522ELL;
  v1._object = (void *)0xE900000000000065;
  one-time initialization function for protoMessageName(a1, v1, static NCProtoIDSProxyMessage.Resource.protoMessageName, &static NCProtoIDSProxyMessage.Resource.protoMessageName[1]);
}

{
  Swift::String v1;

  v1._countAndFlagsBits = 0x705570756F72472ELL;
  v1._object = (void *)0xEC00000065746164;
  one-time initialization function for protoMessageName(a1, v1, static NCProtoIDSProxyMessage.GroupUpdate.protoMessageName, &static NCProtoIDSProxyMessage.GroupUpdate.protoMessageName[1]);
}

{
  Swift::String v1;

  v1._object = (void *)0x80000002574489E0;
  v1._countAndFlagsBits = 0xD000000000000012;
  one-time initialization function for protoMessageName(a1, v1, static NCProtoIDSProxyMessage.ParticipantIDList.protoMessageName, &static NCProtoIDSProxyMessage.ParticipantIDList.protoMessageName[1]);
}

uint64_t static NCProtoIDSProxyMessage.RawData.protoMessageName.getter()
{
  return static NCProtoIDSProxyMessage.RawData.protoMessageName.getter(&one-time initialization token for protoMessageName, static NCProtoIDSProxyMessage.RawData.protoMessageName);
}

uint64_t static NCProtoIDSProxyMessage.RawData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage.RawData._protobuf_nameMap, a1);
}

uint64_t NCProtoIDSProxyMessage.RawData.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoJoinEvent.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x263F50660], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in NCProtoIDSProxyMessage.RawData.decodeMessage<A>(decoder:));
}

uint64_t NCProtoJoinEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = v5;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v6)
  {
    while ((v14 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          a5(a1, v9, a2, a3);
          break;
        case 2:
          a4(v9 + 16, a2, a3);
          break;
        case 1:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in NCProtoIDSProxyMessage.RawData.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufString();
  type metadata accessor for Google_Protobuf_Value();
  uint64_t v0 = (void (*)(uint64_t))MEMORY[0x263F50498];
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type Google_Protobuf_Value and conformance Google_Protobuf_Value, MEMORY[0x263F50498]);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type Google_Protobuf_Value and conformance Google_Protobuf_Value, v0);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t NCProtoIDSProxyMessage.RawData.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        unint64_t v5 = v0[3];
        uint64_t v6 = HIBYTE(v5) & 0xF;
        if ((v5 & 0x2000000000000000) == 0) {
          uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
        }
        if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          if (!*(void *)(v0[4] + 16)
            || (type metadata accessor for ProtobufString(),
                type metadata accessor for Google_Protobuf_Value(),
                uint64_t v7 = (void (*)(uint64_t))MEMORY[0x263F50498],
                lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type Google_Protobuf_Value and conformance Google_Protobuf_Value, MEMORY[0x263F50498]), lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type Google_Protobuf_Value and conformance Google_Protobuf_Value, v7), uint64_t result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
          {
            type metadata accessor for NCProtoIDSProxyMessage.RawData(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
      return result;
  }
}

Swift::Int NCProtoIDSProxyMessage.RawData.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoIDSProxyMessage.RawData, &lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.RawData);
}

uint64_t protocol witness for Message.init() in conformance NCProtoIDSProxyMessage.RawData@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_25743E3B0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage.RawData(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage.RawData(a1, a2, &one-time initialization token for protoMessageName, static NCProtoIDSProxyMessage.RawData.protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NCProtoContinuityFavorite@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NCProtoContinuityFavorite(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoIDSProxyMessage.RawData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoIDSProxyMessage.RawData.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoIDSProxyMessage.RawData()
{
  return NCProtoIDSProxyMessage.RawData.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoIDSProxyMessage.RawData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.RawData);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoIDSProxyMessage.RawData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage.RawData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoIDSProxyMessage.RawData(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.RawData);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoIDSProxyMessage.RawData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.RawData);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t static NCProtoIDSProxyMessage.Resource.protoMessageName.getter()
{
  return static NCProtoIDSProxyMessage.RawData.protoMessageName.getter(&one-time initialization token for protoMessageName, static NCProtoIDSProxyMessage.Resource.protoMessageName);
}

uint64_t static NCProtoIDSProxyMessage.Resource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage.Resource._protobuf_nameMap, a1);
}

uint64_t NCProtoIDSProxyMessage.Resource.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 3:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 4:
          closure #4 in NCProtoIDSProxyMessage.Resource.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #4 in NCProtoIDSProxyMessage.Resource.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufString();
  type metadata accessor for Google_Protobuf_Value();
  uint64_t v0 = (void (*)(uint64_t))MEMORY[0x263F50498];
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type Google_Protobuf_Value and conformance Google_Protobuf_Value, MEMORY[0x263F50498]);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type Google_Protobuf_Value and conformance Google_Protobuf_Value, v0);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t NCProtoIDSProxyMessage.Resource.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        uint64_t v5 = v0[2];
        unint64_t v6 = v0[3];
        switch(v6 >> 62)
        {
          case 1uLL:
            if ((int)v5 != v5 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v6 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
            if (!v1)
            {
LABEL_15:
              unint64_t v7 = v0[5];
              uint64_t v8 = HIBYTE(v7) & 0xF;
              if ((v7 & 0x2000000000000000) == 0) {
                uint64_t v8 = v0[4] & 0xFFFFFFFFFFFFLL;
              }
              if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
              {
                if (!*(void *)(v0[6] + 16)
                  || (type metadata accessor for ProtobufString(),
                      type metadata accessor for Google_Protobuf_Value(),
                      uint64_t v9 = (void (*)(uint64_t))MEMORY[0x263F50498],
                      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type Google_Protobuf_Value and conformance Google_Protobuf_Value, MEMORY[0x263F50498]), lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type Google_Protobuf_Value and conformance Google_Protobuf_Value, v9), uint64_t result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
                {
                  type metadata accessor for NCProtoIDSProxyMessage.Resource(0);
                  uint64_t result = UnknownStorage.traverse<A>(visitor:)();
                }
              }
            }
            break;
        }
      }
      return result;
  }
}

Swift::Int NCProtoIDSProxyMessage.Resource.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoIDSProxyMessage.Resource, &lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.Resource);
}

uint64_t protocol witness for Message.init() in conformance NCProtoIDSProxyMessage.Resource@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_25743E3B0;
  *(_OWORD *)(a1 + 16) = xmmword_25743E3B0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(void *)(a1 + 48) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage.Resource(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage.RawData(a1, a2, &one-time initialization token for protoMessageName, static NCProtoIDSProxyMessage.Resource.protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NCProtoContactHandleAnonym@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NCProtoContactHandleAnonym(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoIDSProxyMessage.Resource()
{
  return NCProtoIDSProxyMessage.Resource.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoIDSProxyMessage.Resource()
{
  return NCProtoIDSProxyMessage.Resource.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoIDSProxyMessage.Resource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.Resource);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoIDSProxyMessage.Resource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage.Resource._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoIDSProxyMessage.Resource(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.Resource);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoIDSProxyMessage.Resource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.Resource);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t static NCProtoIDSProxyMessage.GroupUpdate.protoMessageName.getter()
{
  return static NCProtoIDSProxyMessage.RawData.protoMessageName.getter(&one-time initialization token for protoMessageName, static NCProtoIDSProxyMessage.GroupUpdate.protoMessageName);
}

uint64_t static NCProtoIDSProxyMessage.GroupUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage.GroupUpdate._protobuf_nameMap, a1);
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 7:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 2:
        case 4:
        case 13:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
        case 5:
        case 6:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 8:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 9:
        case 10:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 11:
          dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
          break;
        case 12:
          closure #12 in NCProtoIDSProxyMessage.GroupUpdate.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #12 in NCProtoIDSProxyMessage.GroupUpdate.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t NCProtoIDSProxyMessage.GroupUpdate.traverse<A>(visitor:)()
{
  if (*(unsigned char *)v0 != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
  {
    unint64_t v3 = *(void *)(v0 + 16);
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = *(void *)(v0 + 8) & 0xFFFFFFFFFFFFLL;
    }
    if (!v4 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0 + 24)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
      {
        unint64_t v5 = *(void *)(v0 + 40);
        uint64_t v6 = HIBYTE(v5) & 0xF;
        if ((v5 & 0x2000000000000000) == 0) {
          uint64_t v6 = *(void *)(v0 + 32) & 0xFFFFFFFFFFFFLL;
        }
        if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          if (!*(void *)(v0 + 48)
            || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
          {
            if (!*(void *)(v0 + 56)
              || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
            {
              if (*(unsigned char *)(v0 + 64) != 1
                || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
              {
                if (!*(void *)(v0 + 72)
                  || (uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
                {
                  uint64_t v7 = *(void *)(v0 + 80);
                  unint64_t v8 = *(void *)(v0 + 88);
                  switch(v8 >> 62)
                  {
                    case 1uLL:
                      uint64_t v9 = (int)v7;
                      uint64_t v10 = v7 >> 32;
                      goto LABEL_26;
                    case 2uLL:
                      uint64_t v9 = *(void *)(v7 + 16);
                      uint64_t v10 = *(void *)(v7 + 24);
LABEL_26:
                      if (v9 != v10) {
                        goto LABEL_27;
                      }
                      goto LABEL_28;
                    case 3uLL:
                      goto LABEL_28;
                    default:
                      if ((v8 & 0xFF000000000000) == 0) {
                        goto LABEL_28;
                      }
LABEL_27:
                      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
                      if (!v1)
                      {
LABEL_28:
                        uint64_t v11 = *(void *)(v0 + 96);
                        unint64_t v12 = *(void *)(v0 + 104);
                        switch(v12 >> 62)
                        {
                          case 1uLL:
                            uint64_t v13 = (int)v11;
                            uint64_t v14 = v11 >> 32;
                            goto LABEL_33;
                          case 2uLL:
                            uint64_t v13 = *(void *)(v11 + 16);
                            uint64_t v14 = *(void *)(v11 + 24);
LABEL_33:
                            if (v13 != v14) {
                              goto LABEL_34;
                            }
                            goto LABEL_35;
                          case 3uLL:
                            goto LABEL_35;
                          default:
                            if ((v12 & 0xFF000000000000) == 0) {
                              goto LABEL_35;
                            }
LABEL_34:
                            uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
                            if (!v1)
                            {
LABEL_35:
                              if (!*(void *)(*(void *)(v0 + 112) + 16)
                                || (uint64_t result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(),
                                    !v1))
                              {
                                if (!*(void *)(*(void *)(v0 + 120) + 16)
                                  || (type metadata accessor for ProtobufString(),
                                      type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList(0),
                                      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList), lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList), uint64_t result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
                                {
                                  unint64_t v15 = *(void *)(v0 + 136);
                                  uint64_t v16 = HIBYTE(v15) & 0xF;
                                  if ((v15 & 0x2000000000000000) == 0) {
                                    uint64_t v16 = *(void *)(v0 + 128) & 0xFFFFFFFFFFFFLL;
                                  }
                                  if (!v16
                                    || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
                                        !v1))
                                  {
                                    type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0);
                                    uint64_t result = UnknownStorage.traverse<A>(visitor:)();
                                  }
                                }
                              }
                            }
                            break;
                        }
                      }
                      break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int NCProtoIDSProxyMessage.GroupUpdate.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate, &lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
}

uint64_t protocol witness for Message.init() in conformance NCProtoIDSProxyMessage.GroupUpdate@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0xE000000000000000;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_25743E3D0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 104) = 0xC000000000000000;
  *(void *)(a1 + 112) = v2;
  *(void *)(a1 + 120) = specialized Dictionary.init(dictionaryLiteral:)(v2, &demangling cache variable for type metadata for (String, NCProtoIDSProxyMessage.ParticipantIDList), &demangling cache variable for type metadata for _DictionaryStorage<String, NCProtoIDSProxyMessage.ParticipantIDList>, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage.RawData(a1, a2, &one-time initialization token for protoMessageName, static NCProtoIDSProxyMessage.GroupUpdate.protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NCProtoIDSProxyMessage.GroupUpdate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 68);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 68);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance NCProtoIDSProxyMessage.GroupUpdate())()
{
  return NCProtoContactInfo.namePrefix.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoIDSProxyMessage.GroupUpdate()
{
  return NCProtoIDSProxyMessage.GroupUpdate.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoIDSProxyMessage.GroupUpdate()
{
  return NCProtoIDSProxyMessage.GroupUpdate.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoIDSProxyMessage.GroupUpdate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage.GroupUpdate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void one-time initialization function for protoMessageName(int a1, Swift::String a2, void *a3, void *a4)
{
  *a3 = 0xD000000000000017;
  *a4 = 0x80000002574489B0;
}

uint64_t static NCProtoIDSProxyMessage.ParticipantIDList.protoMessageName.getter()
{
  return static NCProtoIDSProxyMessage.RawData.protoMessageName.getter(&one-time initialization token for protoMessageName, static NCProtoIDSProxyMessage.ParticipantIDList.protoMessageName);
}

uint64_t static NCProtoIDSProxyMessage.RawData.protoMessageName.getter(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  unint64_t v8 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  unint64_t v9 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_25743E470;
  unint64_t v11 = v10 + v9 + v8[14];
  *(void *)(v10 + v9) = 1;
  *(void *)unint64_t v11 = a3;
  *(void *)(v11 + 8) = a4;
  *(unsigned char *)(v11 + 16) = 2;
  uint64_t v12 = *MEMORY[0x263F50718];
  uint64_t v13 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v11, v12, v13);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t static NCProtoIDSProxyMessage.ParticipantIDList._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NCProtoConversationAVMode._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage.ParticipantIDList._protobuf_nameMap, a1);
}

uint64_t static NCProtoConversationAVMode._protobuf_nameMap.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t NCProtoIDSProxyMessage.ParticipantIDList.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoAddConversationParticipantsRequest.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x263F50640]);
}

uint64_t NCProtoAddConversationParticipantsRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v5 || (v10 & 1) != 0) {
      break;
    }
    if (result == 1) {
      a4(v4, a2, a3);
    }
  }
  return result;
}

uint64_t NCProtoIDSProxyMessage.ParticipantIDList.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoAddConversationParticipantsRequest.traverse<A>(visitor:)(a1, a2, a3, MEMORY[0x263F506B8], (void (*)(void))type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
}

uint64_t NCProtoAddConversationParticipantsRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(void))
{
  if (!*(void *)(*(void *)v5 + 16) || (uint64_t result = a4(), !v6))
  {
    a5(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static NCProtoIDSProxyMessage.ParticipantIDList.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static NCProtoAddConversationParticipantsRequest.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void))specialized static Array<A>.== infix(_:_:), type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList) & 1;
}

Swift::Int NCProtoIDSProxyMessage.ParticipantIDList.hashValue.getter()
{
  return NCProtoContactInfo.hashValue.getter((void (*)(void))type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList, &lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
}

Swift::Int NCProtoContactInfo.hashValue.getter(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance NCProtoIDSProxyMessage.ParticipantIDList@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage.ParticipantIDList(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage.RawData(a1, a2, &one-time initialization token for protoMessageName, static NCProtoIDSProxyMessage.ParticipantIDList.protoMessageName);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NCProtoIDSProxyMessage.RawData(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NCProtoActiveConversation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NCProtoActiveConversation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NCProtoIDSProxyMessage.ParticipantIDList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoIDSProxyMessage.ParticipantIDList.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NCProtoIDSProxyMessage.ParticipantIDList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NCProtoIDSProxyMessage.ParticipantIDList.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NCProtoIDSProxyMessage.ParticipantIDList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoIDSProxyMessage.ParticipantIDList@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NCProtoIDSProxyMessage.ParticipantIDList._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NCProtoConversationAVMode@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NCProtoIDSProxyMessage.ParticipantIDList(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);

  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NCProtoContactInfo()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NCProtoIDSProxyMessage.ParticipantIDList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);

  return MEMORY[0x270F44CD8](a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NCProtoContactInfo()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NCProtoIDSProxyMessage.ParticipantIDList(char *a1, char *a2)
{
  return specialized static NCProtoAddConversationParticipantsRequest.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void))specialized static Array<A>.== infix(_:_:), type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList) & 1;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for NCProtoContactInfo(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  unint64_t v8 = (int64_t *)((char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v6);
  char v10 = (int64_t *)((char *)&v76 - v9);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoContactInfo)?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (int64_t *)((char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (int64_t *)((char *)&v76 - v15);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v82 = 0;
  uint64_t v83 = v5;
  int64_t v17 = 0;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v79 = a1 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v80 = (unint64_t)(v19 + 63) >> 6;
  v81 = v14;
  int64_t v76 = v80 - 1;
  uint64_t v84 = v4;
  v88 = v16;
  while (2)
  {
    if (v21)
    {
      int64_t v86 = v17;
      uint64_t v87 = (v21 - 1) & v21;
      unint64_t v24 = __clz(__rbit64(v21)) | (v17 << 6);
      uint64_t v25 = v83;
LABEL_11:
      uint64_t v26 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v24);
      uint64_t v28 = *v26;
      uint64_t v27 = v26[1];
      uint64_t v29 = *(void *)(a1 + 56) + *(void *)(v25 + 72) * v24;
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoContactInfo));
      outlined init with copy of NCProtoContactInfo(v29, (uint64_t)v14 + *(int *)(v30 + 48), type metadata accessor for NCProtoContactInfo);
      void *v14 = v28;
      v14[1] = v27;
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v14, 0, 1, v30);
      swift_bridgeObjectRetain();
      uint64_t v4 = v84;
      uint64_t v16 = v88;
      goto LABEL_18;
    }
    int64_t v31 = v17 + 1;
    uint64_t v25 = v83;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
    }
    if (v31 >= v80)
    {
      int64_t v86 = v17;
    }
    else
    {
      unint64_t v32 = *(void *)(v79 + 8 * v31);
      if (v32) {
        goto LABEL_15;
      }
      int64_t v64 = v17 + 2;
      if (v17 + 2 >= v80)
      {
        int64_t v86 = v17 + 1;
      }
      else
      {
        unint64_t v32 = *(void *)(v79 + 8 * v64);
        if (v32) {
          goto LABEL_68;
        }
        if (v17 + 3 >= v80)
        {
          int64_t v86 = v17 + 2;
        }
        else
        {
          unint64_t v32 = *(void *)(v79 + 8 * (v17 + 3));
          if (v32)
          {
            int64_t v31 = v17 + 3;
            goto LABEL_15;
          }
          int64_t v64 = v17 + 4;
          if (v17 + 4 >= v80)
          {
            int64_t v86 = v17 + 3;
          }
          else
          {
            unint64_t v32 = *(void *)(v79 + 8 * v64);
            if (v32)
            {
LABEL_68:
              int64_t v31 = v64;
LABEL_15:
              int64_t v86 = v31;
              uint64_t v87 = (v32 - 1) & v32;
              unint64_t v24 = __clz(__rbit64(v32)) + (v31 << 6);
              goto LABEL_11;
            }
            while (1)
            {
              int64_t v31 = v64 + 1;
              if (__OFADD__(v64, 1)) {
                goto LABEL_112;
              }
              if (v31 >= v80) {
                break;
              }
              unint64_t v32 = *(void *)(v79 + 8 * v31);
              ++v64;
              if (v32) {
                goto LABEL_15;
              }
            }
            int64_t v86 = v76;
            uint64_t v4 = v84;
          }
        }
      }
    }
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoContactInfo));
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v14, 1, 1, v33);
    uint64_t v87 = 0;
LABEL_18:
    outlined init with take of (key: String, value: NCProtoCallInfo)?((uint64_t)v14, (uint64_t)v16, &demangling cache variable for type metadata for (key: String, value: NCProtoContactInfo)?);
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoContactInfo));
    BOOL v35 = (*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v16, 1, v34) == 1;
    uint64_t result = v35;
    if (v35) {
      return result;
    }
    BOOL v85 = v35;
    uint64_t v36 = (uint64_t)v16 + *(int *)(v34 + 48);
    uint64_t v37 = *v16;
    uint64_t v38 = v16[1];
    outlined init with take of NCProtoContactInfo(v36, (uint64_t)v10, type metadata accessor for NCProtoContactInfo);
    unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
    char v41 = v40;
    swift_bridgeObjectRelease();
    if ((v41 & 1) == 0) {
      goto LABEL_100;
    }
    outlined init with copy of NCProtoContactInfo(*(void *)(a2 + 56) + *(void *)(v25 + 72) * v39, (uint64_t)v8, type metadata accessor for NCProtoContactInfo);
    if ((*v8 != *v10 || v8[1] != v10[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      || (v8[2] != v10[2] || v8[3] != v10[3]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      || (v8[4] != v10[4] || v8[5] != v10[5]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      || (v8[6] != v10[6] || v8[7] != v10[7]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      || (v8[8] != v10[8] || v8[9] != v10[9]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      || (v8[10] != v10[10] || v8[11] != v10[11]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      goto LABEL_99;
    }
    uint64_t v42 = v8[12];
    unint64_t v43 = v8[13];
    uint64_t v45 = v10[12];
    unint64_t v44 = v10[13];
    uint64_t v46 = 0;
    switch(v43 >> 62)
    {
      case 1uLL:
        LODWORD(v46) = HIDWORD(v42) - v42;
        if (__OFSUB__(HIDWORD(v42), v42)) {
          goto LABEL_104;
        }
        uint64_t v46 = (int)v46;
LABEL_43:
        switch(v44 >> 62)
        {
          case 1uLL:
            LODWORD(v50) = HIDWORD(v45) - v45;
            if (__OFSUB__(HIDWORD(v45), v45)) {
              goto LABEL_106;
            }
            uint64_t v50 = (int)v50;
LABEL_48:
            if (v46 != v50) {
              goto LABEL_99;
            }
            if (v46 < 1) {
              goto LABEL_73;
            }
            break;
          case 2uLL:
            uint64_t v52 = *(void *)(v45 + 16);
            uint64_t v51 = *(void *)(v45 + 24);
            BOOL v49 = __OFSUB__(v51, v52);
            uint64_t v50 = v51 - v52;
            if (!v49) {
              goto LABEL_48;
            }
            goto LABEL_107;
          case 3uLL:
            if (v46) {
              goto LABEL_99;
            }
            goto LABEL_73;
          default:
            uint64_t v50 = BYTE6(v44);
            goto LABEL_48;
        }
        break;
      case 2uLL:
        uint64_t v48 = *(void *)(v42 + 16);
        uint64_t v47 = *(void *)(v42 + 24);
        BOOL v49 = __OFSUB__(v47, v48);
        uint64_t v46 = v47 - v48;
        if (!v49) {
          goto LABEL_43;
        }
        goto LABEL_105;
      case 3uLL:
        goto LABEL_43;
      default:
        uint64_t v46 = BYTE6(v43);
        goto LABEL_43;
    }
    switch(v43 >> 62)
    {
      case 1uLL:
        uint64_t v77 = a1;
        uint64_t v78 = a2;
        if (v42 >> 32 < (int)v42) {
          goto LABEL_108;
        }
        outlined copy of Data._Representation(v42, v43);
        uint64_t v53 = __DataStorage._bytes.getter();
        if (!v53) {
          goto LABEL_58;
        }
        uint64_t v54 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v42, v54)) {
          goto LABEL_110;
        }
        v53 += (int)v42 - v54;
LABEL_58:
        __DataStorage._length.getter();
        uint64_t v55 = v82;
        closure #1 in static Data.== infix(_:_:)(v53, v45, v44, (char *)__s1);
        uint64_t v82 = v55;
        outlined consume of Data._Representation(v42, v43);
        goto LABEL_71;
      case 2uLL:
        uint64_t v77 = a1;
        uint64_t v78 = a2;
        uint64_t v57 = *(void *)(v42 + 16);
        uint64_t v56 = *(void *)(v42 + 24);
        swift_retain();
        swift_retain();
        uint64_t v58 = __DataStorage._bytes.getter();
        if (v58)
        {
          uint64_t v59 = v58;
          uint64_t v60 = __DataStorage._offset.getter();
          if (__OFSUB__(v57, v60)) {
            goto LABEL_111;
          }
          uint64_t v61 = v59 + v57 - v60;
          if (__OFSUB__(v56, v57)) {
            goto LABEL_109;
          }
        }
        else
        {
          uint64_t v61 = 0;
          if (__OFSUB__(v56, v57)) {
            goto LABEL_109;
          }
        }
        __DataStorage._length.getter();
        uint64_t v65 = v82;
        closure #1 in static Data.== infix(_:_:)(v61, v45, v44, (char *)__s1);
        uint64_t v82 = v65;
        swift_release();
        swift_release();
LABEL_71:
        char v63 = __s1[0];
        a1 = v77;
        a2 = v78;
LABEL_72:
        uint64_t v4 = v84;
        if (v63)
        {
LABEL_73:
          uint64_t v66 = *(int *)(v4 + 48);
          v67 = (void *)((char *)v8 + v66);
          uint64_t v68 = *(void *)((char *)v8 + v66 + 8);
          v69 = (void *)((char *)v10 + v66);
          uint64_t v70 = v69[1];
          if (v68)
          {
            if (!v70 || (*v67 != *v69 || v68 != v70) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_99;
            }
          }
          else if (v70)
          {
            goto LABEL_99;
          }
          uint64_t v71 = *(int *)(v4 + 52);
          v72 = (void *)((char *)v8 + v71);
          uint64_t v73 = *(void *)((char *)v8 + v71 + 8);
          v74 = (void *)((char *)v10 + v71);
          uint64_t v75 = v74[1];
          if (v73)
          {
            if (!v75 || (*v72 != *v74 || v73 != v75) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_99;
            }
          }
          else if (v75)
          {
            goto LABEL_99;
          }
          type metadata accessor for UnknownStorage();
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of NCProtoContactInfo((uint64_t)v8, type metadata accessor for NCProtoContactInfo);
          outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoContactInfo);
          uint64_t v14 = v81;
          unint64_t v21 = v87;
          uint64_t v16 = v88;
          int64_t v17 = v86;
          uint64_t result = v85;
          if ((v23 & 1) == 0) {
            return result;
          }
          continue;
        }
LABEL_99:
        outlined destroy of NCProtoContactInfo((uint64_t)v8, type metadata accessor for NCProtoContactInfo);
LABEL_100:
        outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoContactInfo);
        return 0;
      case 3uLL:
        memset(__s1, 0, 14);
        goto LABEL_65;
      default:
        __s1[0] = v8[12];
        LOWORD(__s1[1]) = v43;
        BYTE2(__s1[1]) = BYTE2(v43);
        BYTE3(__s1[1]) = BYTE3(v43);
        BYTE4(__s1[1]) = BYTE4(v43);
        BYTE5(__s1[1]) = BYTE5(v43);
LABEL_65:
        uint64_t v62 = v82;
        closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v45, v44, &v89);
        uint64_t v82 = v62;
        char v63 = v89;
        goto LABEL_72;
    }
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;

  uint64_t v4 = type metadata accessor for NCProtoCallInfo(0);
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (int64_t *)((char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (int64_t *)((char *)&v40 - v8);
  char v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoCallInfo)?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (int64_t *)((char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (int64_t *)((char *)&v40 - v15);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  unint64_t v43 = a1;
  unint64_t v44 = 0;
  int64_t v17 = *(void *)(a1 + 64);
  char v41 = a1 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  uint64_t v20 = v19 & v17;
  uint64_t v42 = (unint64_t)(v18 + 63) >> 6;
  char v40 = v42 - 1;
  while (1)
  {
    if (v20)
    {
      unint64_t v21 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      uint64_t v22 = v21 | (v44 << 6);
LABEL_8:
      char v23 = (uint64_t *)(*(void *)(v43 + 48) + 16 * v22);
      unint64_t v24 = *v23;
      uint64_t v25 = v23[1];
      uint64_t v26 = *(void *)(v43 + 56) + *(void *)(v45 + 72) * v22;
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoCallInfo));
      outlined init with copy of NCProtoContactInfo(v26, (uint64_t)v13 + *(int *)(v27 + 48), type metadata accessor for NCProtoCallInfo);
      void *v13 = v24;
      v13[1] = v25;
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v13, 0, 1, v27);
      swift_bridgeObjectRetain();
      goto LABEL_27;
    }
    uint64_t v28 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v28 < v42)
    {
      uint64_t v29 = *(void *)(v41 + 8 * v28);
      if (v29) {
        goto LABEL_12;
      }
      uint64_t v30 = v44 + 2;
      ++v44;
      if (v28 + 1 < v42)
      {
        uint64_t v29 = *(void *)(v41 + 8 * v30);
        if (v29) {
          goto LABEL_15;
        }
        unint64_t v44 = v28 + 1;
        if (v28 + 2 < v42)
        {
          uint64_t v29 = *(void *)(v41 + 8 * (v28 + 2));
          if (v29)
          {
            v28 += 2;
            goto LABEL_12;
          }
          uint64_t v30 = v28 + 3;
          unint64_t v44 = v28 + 2;
          if (v28 + 3 < v42) {
            break;
          }
        }
      }
    }
LABEL_26:
    int64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoCallInfo));
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v13, 1, 1, v31);
    uint64_t v20 = 0;
LABEL_27:
    outlined init with take of (key: String, value: NCProtoCallInfo)?((uint64_t)v13, (uint64_t)v16, &demangling cache variable for type metadata for (key: String, value: NCProtoCallInfo)?);
    unint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoCallInfo));
    uint64_t v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v16, 1, v32);
    uint64_t v34 = v33 == 1;
    if (v33 == 1) {
      return v34;
    }
    uint64_t v36 = *v16;
    BOOL v35 = v16[1];
    outlined init with take of NCProtoContactInfo((uint64_t)v16 + *(int *)(v32 + 48), (uint64_t)v9, type metadata accessor for NCProtoCallInfo);
    uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v35);
    LOBYTE(v36) = v38;
    swift_bridgeObjectRelease();
    if ((v36 & 1) == 0)
    {
      outlined destroy of NCProtoContactInfo((uint64_t)v9, type metadata accessor for NCProtoCallInfo);
      return 0;
    }
    outlined init with copy of NCProtoContactInfo(*(void *)(a2 + 56) + *(void *)(v45 + 72) * v37, (uint64_t)v7, type metadata accessor for NCProtoCallInfo);
    unint64_t v39 = specialized static NCProtoCallInfo.== infix(_:_:)(v7, v9);
    outlined destroy of NCProtoContactInfo((uint64_t)v7, type metadata accessor for NCProtoCallInfo);
    uint64_t result = outlined destroy of NCProtoContactInfo((uint64_t)v9, type metadata accessor for NCProtoCallInfo);
    if ((v39 & 1) == 0) {
      return v34;
    }
  }
  uint64_t v29 = *(void *)(v41 + 8 * v30);
  if (v29)
  {
LABEL_15:
    uint64_t v28 = v30;
LABEL_12:
    uint64_t v20 = (v29 - 1) & v29;
    uint64_t v22 = __clz(__rbit64(v29)) + (v28 << 6);
    unint64_t v44 = v28;
    goto LABEL_8;
  }
  while (1)
  {
    uint64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v28 >= v42)
    {
      unint64_t v44 = v40;
      goto LABEL_26;
    }
    uint64_t v29 = *(void *)(v41 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_12;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  char v44;
  char v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char v49;
  void (*v50)(char *, uint64_t);
  int64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  void (**v55)(char *, char *, uint64_t);
  void (**v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t *v58;
  char *v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;

  uint64_t v4 = type metadata accessor for Google_Protobuf_Value();
  uint64_t v62 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v59 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v51 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Google_Protobuf_Value)?);
  char v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v10);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v58 = (int64_t *)((char *)&v51 - v14);
  uint64_t v54 = a1;
  int64_t v17 = *(void *)(a1 + 64);
  uint64_t v16 = a1 + 64;
  uint64_t v15 = v17;
  uint64_t v18 = 1 << *(unsigned char *)(v16 - 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  uint64_t v20 = v19 & v15;
  uint64_t v60 = 0;
  uint64_t v61 = v62 + 16;
  uint64_t v55 = (void (**)(char *, char *, uint64_t))(v62 + 32);
  uint64_t v56 = (void (**)(char *, uint64_t))(v62 + 8);
  uint64_t v52 = v16;
  uint64_t v53 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v51 = v53 - 1;
  uint64_t v57 = a2;
  while (1)
  {
    if (v20)
    {
      unint64_t v21 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      uint64_t v22 = v21 | (v60 << 6);
      char v23 = v58;
LABEL_8:
      unint64_t v24 = (uint64_t *)(*(void *)(v54 + 48) + 16 * v22);
      uint64_t v25 = *v24;
      uint64_t v26 = v24[1];
      uint64_t v27 = v62;
      uint64_t v28 = *(void *)(v54 + 56) + *(void *)(v62 + 72) * v22;
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Google_Protobuf_Value));
      (*(void (**)(char *, unint64_t, uint64_t))(v27 + 16))(&v12[*(int *)(v29 + 48)], v28, v4);
      *(void *)uint64_t v12 = v25;
      *((void *)v12 + 1) = v26;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v12, 0, 1, v29);
      swift_bridgeObjectRetain();
      goto LABEL_27;
    }
    uint64_t v30 = v60 + 1;
    char v23 = v58;
    if (__OFADD__(v60, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v30 < v53)
    {
      int64_t v31 = *(void *)(v52 + 8 * v30);
      if (v31) {
        goto LABEL_12;
      }
      unint64_t v32 = v60 + 2;
      ++v60;
      if (v30 + 1 < v53)
      {
        int64_t v31 = *(void *)(v52 + 8 * v32);
        if (v31) {
          goto LABEL_15;
        }
        uint64_t v60 = v30 + 1;
        if (v30 + 2 < v53)
        {
          int64_t v31 = *(void *)(v52 + 8 * (v30 + 2));
          if (v31)
          {
            v30 += 2;
            goto LABEL_12;
          }
          unint64_t v32 = v30 + 3;
          uint64_t v60 = v30 + 2;
          if (v30 + 3 < v53) {
            break;
          }
        }
      }
    }
LABEL_26:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Google_Protobuf_Value));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v12, 1, 1, v33);
    uint64_t v20 = 0;
LABEL_27:
    outlined init with take of (key: String, value: NCProtoCallInfo)?((uint64_t)v12, (uint64_t)v23, &demangling cache variable for type metadata for (key: String, value: Google_Protobuf_Value)?);
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Google_Protobuf_Value));
    BOOL v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v23, 1, v34);
    uint64_t v36 = v35 == 1;
    if (v35 == 1) {
      return v36;
    }
    uint64_t v37 = (char *)v23 + *(int *)(v34 + 48);
    uint64_t v38 = *v23;
    unint64_t v39 = v23[1];
    (*v55)(v8, v37, v4);
    char v40 = v38;
    char v41 = v57;
    uint64_t v42 = v8;
    unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v39);
    uint64_t v45 = v44;
    swift_bridgeObjectRelease();
    if ((v45 & 1) == 0)
    {
      (*v56)(v42, v4);
      return 0;
    }
    uint64_t v46 = v12;
    uint64_t v47 = v62;
    uint64_t v48 = v59;
    (*(void (**)(char *, unint64_t, uint64_t))(v62 + 16))(v59, *(void *)(v41 + 56) + *(void *)(v62 + 72) * v43, v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type Google_Protobuf_Value and conformance Google_Protobuf_Value, MEMORY[0x263F50498]);
    BOOL v49 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v50 = *(void (**)(char *, uint64_t))(v47 + 8);
    uint64_t v12 = v46;
    v50(v48, v4);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v50)(v42, v4);
    unint64_t v8 = v42;
    if ((v49 & 1) == 0) {
      return v36;
    }
  }
  int64_t v31 = *(void *)(v52 + 8 * v32);
  if (v31)
  {
LABEL_15:
    uint64_t v30 = v32;
LABEL_12:
    uint64_t v20 = (v31 - 1) & v31;
    uint64_t v22 = __clz(__rbit64(v31)) + (v30 << 6);
    uint64_t v60 = v30;
    goto LABEL_8;
  }
  while (1)
  {
    uint64_t v30 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v30 >= v53)
    {
      uint64_t v60 = v51;
      goto LABEL_26;
    }
    int64_t v31 = *(void *)(v52 + 8 * v30);
    ++v32;
    if (v31) {
      goto LABEL_12;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;

  uint64_t v4 = type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v60 = v4;
  uint64_t v61 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  unint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  char v10 = (char *)&v54 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoIDSProxyMessage.ParticipantIDList)?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (uint64_t *)((char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = MEMORY[0x270FA5388](v12);
  int64_t v17 = (uint64_t *)((char *)&v54 - v16);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v58 = a1;
  uint64_t v59 = 0;
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v19 = a1 + 64;
  uint64_t v18 = v20;
  unint64_t v21 = 1 << *(unsigned char *)(v19 - 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  char v23 = v22 & v18;
  uint64_t v56 = v19;
  uint64_t v57 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v55 = v57 - 1;
  while (1)
  {
    if (v23)
    {
      uint64_t v25 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      uint64_t v26 = v25 | (v59 << 6);
LABEL_9:
      uint64_t v27 = (uint64_t *)(*(void *)(v58 + 48) + 16 * v26);
      uint64_t v29 = *v27;
      uint64_t v28 = v27[1];
      uint64_t v30 = *(void *)(v58 + 56) + *(void *)(v61 + 72) * v26;
      int64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoIDSProxyMessage.ParticipantIDList));
      outlined init with copy of NCProtoContactInfo(v30, (uint64_t)v14 + *(int *)(v31 + 48), type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
      void *v14 = v29;
      v14[1] = v28;
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v14, 0, 1, v31);
      swift_bridgeObjectRetain();
      goto LABEL_28;
    }
    unint64_t v32 = v59 + 1;
    if (__OFADD__(v59, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v32 < v57)
    {
      uint64_t v33 = *(void *)(v56 + 8 * v32);
      if (v33) {
        goto LABEL_13;
      }
      uint64_t v34 = v59 + 2;
      ++v59;
      if (v32 + 1 < v57)
      {
        uint64_t v33 = *(void *)(v56 + 8 * v34);
        if (v33) {
          goto LABEL_16;
        }
        uint64_t v59 = v32 + 1;
        if (v32 + 2 < v57)
        {
          uint64_t v33 = *(void *)(v56 + 8 * (v32 + 2));
          if (v33)
          {
            v32 += 2;
            goto LABEL_13;
          }
          uint64_t v34 = v32 + 3;
          uint64_t v59 = v32 + 2;
          if (v32 + 3 < v57) {
            break;
          }
        }
      }
    }
LABEL_27:
    BOOL v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoIDSProxyMessage.ParticipantIDList));
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v14, 1, 1, v35);
    char v23 = 0;
LABEL_28:
    outlined init with take of (key: String, value: NCProtoCallInfo)?((uint64_t)v14, (uint64_t)v17, &demangling cache variable for type metadata for (key: String, value: NCProtoIDSProxyMessage.ParticipantIDList)?);
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: NCProtoIDSProxyMessage.ParticipantIDList));
    uint64_t v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48))(v17, 1, v36);
    uint64_t v38 = v37 == 1;
    if (v37 == 1) {
      return v38;
    }
    unint64_t v39 = (uint64_t)v17 + *(int *)(v36 + 48);
    char v40 = *v17;
    char v41 = v17[1];
    outlined init with take of NCProtoContactInfo(v39, (uint64_t)v10, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
    uint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
    unint64_t v44 = v43;
    swift_bridgeObjectRelease();
    if ((v44 & 1) == 0) {
      goto LABEL_40;
    }
    outlined init with copy of NCProtoContactInfo(*(void *)(a2 + 56) + *(void *)(v61 + 72) * v42, (uint64_t)v8, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
    uint64_t v45 = *(void **)v8;
    uint64_t v46 = *(void **)v10;
    uint64_t v47 = *(void *)(*(void *)v8 + 16);
    if (v47 != *(void *)(*(void *)v10 + 16)) {
      goto LABEL_39;
    }
    if (v47 && v45 != v46)
    {
      if (v45[4] != v46[4]) {
        goto LABEL_39;
      }
      if (v47 != 1)
      {
        if (v45[5] != v46[5])
        {
LABEL_39:
          outlined destroy of NCProtoContactInfo((uint64_t)v8, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
LABEL_40:
          outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
          return 0;
        }
        uint64_t v48 = v45 + 6;
        BOOL v49 = v46 + 6;
        uint64_t v50 = v47 - 2;
        while (v50)
        {
          uint64_t v52 = *v48++;
          uint64_t v51 = v52;
          uint64_t v53 = *v49++;
          --v50;
          if (v51 != v53) {
            goto LABEL_39;
          }
        }
      }
    }
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    unint64_t v24 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of NCProtoContactInfo((uint64_t)v8, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
    uint64_t result = outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
    if ((v24 & 1) == 0) {
      return v38;
    }
  }
  uint64_t v33 = *(void *)(v56 + 8 * v34);
  if (v33)
  {
LABEL_16:
    unint64_t v32 = v34;
LABEL_13:
    char v23 = (v33 - 1) & v33;
    uint64_t v26 = __clz(__rbit64(v33)) + (v32 << 6);
    uint64_t v59 = v32;
    goto LABEL_9;
  }
  while (1)
  {
    unint64_t v32 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v32 >= v57)
    {
      uint64_t v59 = v55;
      goto LABEL_27;
    }
    uint64_t v33 = *(void *)(v56 + 8 * v32);
    ++v34;
    if (v33) {
      goto LABEL_13;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    int v18 = *(unsigned __int8 *)(*(void *)(v3 + 56) + v11);
    swift_bridgeObjectRetain();
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    char v21 = v20;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || v18 != *(unsigned __int8 *)(*(void *)(a2 + 56) + v19)) {
      return 0;
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  void *v24;
  char v26;
  int64_t v27;

  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  uint64_t v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      int64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }
    unint64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v11 >= v27) {
      return 1;
    }
    int64_t v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v27) {
        return 1;
      }
      int64_t v12 = *(void *)(v5 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v27) {
          return 1;
        }
        int64_t v12 = *(void *)(v5 + 8 * v4);
        if (!v12)
        {
          int64_t v4 = v11 + 3;
          if (v11 + 3 >= v27) {
            return 1;
          }
          int64_t v12 = *(void *)(v5 + 8 * v4);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    int64_t v14 = 16 * v10;
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    int v18 = (uint64_t *)(*(void *)(v3 + 56) + v14);
    char v20 = *v18;
    unint64_t v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v21 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    char v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    unint64_t v24 = (void *)(*(void *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        return 0;
      }
    }
  }
  unint64_t v13 = v11 + 4;
  if (v13 >= v27) {
    return 1;
  }
  int64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v27) {
      return 1;
    }
    int64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t closure #1 in static Data.== infix(_:_:)@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      outlined copy of Data._Representation(a2, a3);
      unint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x257406CF0);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = outlined consume of Data._Representation(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NCProtoContactInfo(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoContactInfo?, NCProtoContactInfo?));
  MEMORY[0x270FA5388](v11);
  size_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for NCProtoAddressableContact(0);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (uint64_t *)((char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v21 = (uint64_t *)((char *)&v38 - v20);
  uint64_t v22 = *(void *)(a1 + 16);
  if (v22 != *(void *)(a2 + 16)) {
    goto LABEL_24;
  }
  uint64_t v41 = v11;
  uint64_t v46 = v4;
  if (!v22 || a1 == a2)
  {
    char v34 = 1;
    return v34 & 1;
  }
  uint64_t v47 = v18;
  unint64_t v39 = v7;
  char v40 = v10;
  unint64_t v23 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v42 = *(void *)(v19 + 72);
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  uint64_t v45 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v24 = v22 - 1;
  uint64_t v25 = v41;
  while (1)
  {
    outlined init with copy of NCProtoContactInfo(a1 + v23, (uint64_t)v21, type metadata accessor for NCProtoAddressableContact);
    outlined init with copy of NCProtoContactInfo(a2 + v23, (uint64_t)v17, type metadata accessor for NCProtoAddressableContact);
    uint64_t v26 = *(int *)(v47 + 28);
    uint64_t v27 = (uint64_t)v17 + v26;
    uint64_t v28 = (uint64_t)&v13[*(int *)(v25 + 48)];
    outlined init with copy of NCProtoContactInfo?((uint64_t)v21 + v26, (uint64_t)v13, &demangling cache variable for type metadata for NCProtoContactInfo?);
    outlined init with copy of NCProtoContactInfo?(v27, v28, &demangling cache variable for type metadata for NCProtoContactInfo?);
    uint64_t v29 = v46;
    char v30 = *v45;
    if ((*v45)(v13, 1, v46) != 1) {
      break;
    }
    if (v30((char *)v28, 1, v29) != 1) {
      goto LABEL_22;
    }
    outlined destroy of NCProtoContactInfo?((uint64_t)v13, &demangling cache variable for type metadata for NCProtoContactInfo?);
LABEL_10:
    if ((specialized static Array<A>.== infix(_:_:)(*v21, *v17) & 1) == 0
      || (v21[1] != v17[1] || v21[2] != v17[2]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      goto LABEL_23;
    }
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of NCProtoContactInfo((uint64_t)v17, type metadata accessor for NCProtoAddressableContact);
    outlined destroy of NCProtoContactInfo((uint64_t)v21, type metadata accessor for NCProtoAddressableContact);
    BOOL v36 = v24-- != 0;
    if (v34)
    {
      a1 = v43;
      v23 += v42;
      a2 = v44;
      if (v36) {
        continue;
      }
    }
    return v34 & 1;
  }
  uint64_t v31 = v40;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v13, (uint64_t)v40, &demangling cache variable for type metadata for NCProtoContactInfo?);
  if (v30((char *)v28, 1, v29) != 1)
  {
    unint64_t v32 = v39;
    outlined init with take of NCProtoContactInfo(v28, (uint64_t)v39, type metadata accessor for NCProtoContactInfo);
    char v33 = specialized static NCProtoContactInfo.== infix(_:_:)(v31, v32);
    outlined destroy of NCProtoContactInfo((uint64_t)v32, type metadata accessor for NCProtoContactInfo);
    outlined destroy of NCProtoContactInfo((uint64_t)v31, type metadata accessor for NCProtoContactInfo);
    outlined destroy of NCProtoContactInfo?((uint64_t)v13, &demangling cache variable for type metadata for NCProtoContactInfo?);
    uint64_t v25 = v41;
    if ((v33 & 1) == 0) {
      goto LABEL_23;
    }
    goto LABEL_10;
  }
  outlined destroy of NCProtoContactInfo((uint64_t)v31, type metadata accessor for NCProtoContactInfo);
LABEL_22:
  outlined destroy of NCProtoContactInfo?((uint64_t)v13, &demangling cache variable for type metadata for (NCProtoContactInfo?, NCProtoContactInfo?));
LABEL_23:
  outlined destroy of NCProtoContactInfo((uint64_t)v17, type metadata accessor for NCProtoAddressableContact);
  outlined destroy of NCProtoContactInfo((uint64_t)v21, type metadata accessor for NCProtoAddressableContact);
LABEL_24:
  char v34 = 0;
  return v34 & 1;
}

{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  int v38;
  void *v39;
  uint64_t *v40;
  size_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  void *v56;
  const void *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  size_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void *v73;
  char *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t *v77;
  uint64_t v78;
  __int16 v79;
  char v80;
  char v81;
  char v82;
  char v83;
  void __s1[3];

  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unint64_t *)(a1 + 40);
    uint64_t v4 = (unint64_t *)(a2 + 40);
    while (1)
    {
      uint64_t v6 = *(v3 - 1);
      uint64_t v5 = *v3;
      uint64_t v8 = *(v4 - 1);
      uint64_t v7 = *v4;
      uint64_t v9 = *v3 >> 62;
      v3 += 2;
      v4 += 2;
      unint64_t v10 = 0;
      switch(v9)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v6), v6))
          {
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
          }
          unint64_t v10 = HIDWORD(v6) - (int)v6;
LABEL_13:
          outlined copy of Data._Representation(v6, v5);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v6 + 16);
          uint64_t v11 = *(void *)(v6 + 24);
          unint64_t v10 = v11 - v12;
          if (!__OFSUB__(v11, v12)) {
            goto LABEL_13;
          }
          goto LABEL_124;
        case 3uLL:
          break;
        default:
          unint64_t v10 = BYTE6(v5);
          break;
      }
      size_t v13 = v7 >> 62;
      switch(v7 >> 62)
      {
        case 1uLL:
          LODWORD(v14) = HIDWORD(v8) - v8;
          if (__OFSUB__(HIDWORD(v8), v8)) {
            goto LABEL_125;
          }
          uint64_t v14 = (int)v14;
LABEL_19:
          if (v10 != v14) {
            goto LABEL_121;
          }
          if (v10 < 1)
          {
LABEL_6:
            outlined consume of Data._Representation(v6, v5);
          }
          else
          {
            switch((int)v9)
            {
              case 1:
                int64_t v76 = v3;
                if ((int)v6 > v6 >> 32) {
                  goto LABEL_127;
                }
                outlined copy of Data._Representation(v8, v7);
                unint64_t v23 = (char *)__DataStorage._bytes.getter();
                if (!v23) {
                  goto LABEL_33;
                }
                uint64_t v24 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v6, v24)) {
                  goto LABEL_129;
                }
                v23 += (int)v6 - v24;
LABEL_33:
                __DataStorage._length.getter();
                if (!v13)
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v23) {
                    goto LABEL_157;
                  }
                  uint64_t v41 = BYTE6(v7);
                  char v40 = __s1;
                  unint64_t v39 = v23;
LABEL_103:
                  uint64_t v29 = memcmp(v39, v40, v41);
                  goto LABEL_104;
                }
                if (v13 == 1)
                {
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_138;
                  }
                  swift_retain();
                  uint64_t v25 = (char *)__DataStorage._bytes.getter();
                  if (v25)
                  {
                    uint64_t v26 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v8, v26)) {
                      goto LABEL_145;
                    }
                    v25 += (int)v8 - v26;
                  }
                  uint64_t v27 = __DataStorage._length.getter();
                  if (v27 >= (v8 >> 32) - (int)v8) {
                    uint64_t v28 = (v8 >> 32) - (int)v8;
                  }
                  else {
                    uint64_t v28 = v27;
                  }
                  if (!v23) {
                    goto LABEL_147;
                  }
                  if (!v25) {
                    goto LABEL_148;
                  }
                  uint64_t v29 = memcmp(v23, v25, v28);
                  outlined consume of Data._Representation(v8, v7);
                  goto LABEL_72;
                }
                v67 = *(void *)(v8 + 16);
                v74 = *(char **)(v8 + 24);
                swift_retain();
                swift_retain();
                uint64_t v68 = __DataStorage._bytes.getter();
                if (v68)
                {
                  v69 = __DataStorage._offset.getter();
                  if (__OFSUB__(v67, v69)) {
                    goto LABEL_144;
                  }
                  v68 += v67 - v69;
                }
                if (__OFSUB__(v74, v67)) {
                  goto LABEL_139;
                }
                uint64_t v70 = __DataStorage._length.getter();
                if (v70 >= (uint64_t)&v74[-v67]) {
                  uint64_t v71 = &v74[-v67];
                }
                else {
                  uint64_t v71 = (char *)v70;
                }
                uint64_t v56 = v23;
                uint64_t v3 = v76;
                if (!v23) {
                  goto LABEL_158;
                }
                if (!v68) {
                  goto LABEL_159;
                }
                uint64_t v55 = (size_t)v71;
                uint64_t v57 = (const void *)v68;
LABEL_116:
                uint64_t v58 = memcmp(v56, v57, v55);
                swift_release();
                goto LABEL_117;
              case 2:
                uint64_t v77 = v3;
                char v30 = *(void *)(v6 + 16);
                outlined copy of Data._Representation(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v31 = __DataStorage._bytes.getter();
                if (v31)
                {
                  unint64_t v32 = v31;
                  char v33 = __DataStorage._offset.getter();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_128;
                  }
                  uint64_t v73 = (void *)(v32 + v30 - v33);
                }
                else
                {
                  uint64_t v73 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v3 = v77;
                if (v13)
                {
                  if (v13 == 1)
                  {
                    if (v8 >> 32 < (int)v8) {
                      goto LABEL_134;
                    }
                    swift_retain();
                    uint64_t v42 = (char *)__DataStorage._bytes.getter();
                    if (v42)
                    {
                      uint64_t v43 = __DataStorage._offset.getter();
                      if (__OFSUB__((int)v8, v43)) {
                        goto LABEL_143;
                      }
                      v42 += (int)v8 - v43;
                    }
                    uint64_t v44 = __DataStorage._length.getter();
                    if (v44 >= (v8 >> 32) - (int)v8) {
                      uint64_t v45 = (v8 >> 32) - (int)v8;
                    }
                    else {
                      uint64_t v45 = v44;
                    }
                    if (!v73) {
                      goto LABEL_150;
                    }
                    uint64_t v3 = v77;
                    if (!v42) {
                      goto LABEL_151;
                    }
                    uint64_t v29 = memcmp(v73, v42, v45);
                    outlined consume of Data._Representation(v8, v7);
                    swift_release();
                    swift_release();
LABEL_72:
                    outlined consume of Data._Representation(v8, v7);
LABEL_104:
                    outlined consume of Data._Representation(v6, v5);
                    if (v29) {
                      return 0;
                    }
                  }
                  else
                  {
                    uint64_t v60 = *(void *)(v8 + 16);
                    uint64_t v59 = *(void *)(v8 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v61 = (char *)__DataStorage._bytes.getter();
                    if (v61)
                    {
                      uint64_t v62 = __DataStorage._offset.getter();
                      if (__OFSUB__(v60, v62)) {
                        goto LABEL_142;
                      }
                      v61 += v60 - v62;
                    }
                    uint64_t v17 = __OFSUB__(v59, v60);
                    char v63 = v59 - v60;
                    if (v17) {
                      goto LABEL_137;
                    }
                    int64_t v64 = __DataStorage._length.getter();
                    if (v64 >= v63) {
                      uint64_t v65 = v63;
                    }
                    else {
                      uint64_t v65 = v64;
                    }
                    uint64_t v3 = v77;
                    if (!v73) {
                      goto LABEL_155;
                    }
                    if (!v61) {
                      goto LABEL_156;
                    }
                    uint64_t v66 = memcmp(v73, v61, v65);
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    outlined consume of Data._Representation(v8, v7);
                    outlined consume of Data._Representation(v6, v5);
                    if (v66) {
                      return 0;
                    }
                  }
                }
                else
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v73) {
                    goto LABEL_154;
                  }
                  uint64_t v58 = memcmp(v73, __s1, BYTE6(v7));
                  swift_release();
LABEL_117:
                  swift_release();
                  outlined consume of Data._Representation(v8, v7);
                  outlined consume of Data._Representation(v6, v5);
                  if (v58) {
                    return 0;
                  }
                }
                break;
              case 3:
                memset(__s1, 0, 14);
                if (!v13) {
                  goto LABEL_58;
                }
                uint64_t v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_131;
                  }
                  outlined copy of Data._Representation(v8, v7);
                  char v34 = __DataStorage._bytes.getter();
                  if (!v34) {
                    goto LABEL_149;
                  }
                  uint64_t v20 = v34;
                  BOOL v35 = __DataStorage._offset.getter();
                  uint64_t v22 = (int)v8 - v35;
                  if (__OFSUB__((int)v8, v35)) {
                    goto LABEL_133;
                  }
LABEL_53:
                  BOOL v36 = __DataStorage._length.getter();
                  if (v36 >= v18) {
                    uint64_t v37 = v18;
                  }
                  else {
                    uint64_t v37 = v36;
                  }
                  uint64_t v38 = memcmp(__s1, (const void *)(v20 + v22), v37);
                  outlined consume of Data._Representation(v8, v7);
                  outlined consume of Data._Representation(v6, v5);
                  uint64_t v3 = v75;
                  if (v38) {
                    return 0;
                  }
                  break;
                }
                uint64_t v52 = *(void *)(v8 + 16);
                uint64_t v53 = *(void *)(v8 + 24);
                outlined copy of Data._Representation(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v48 = __DataStorage._bytes.getter();
                if (v48)
                {
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v52, v54)) {
                    goto LABEL_141;
                  }
                  v48 += v52 - v54;
                }
                uint64_t v17 = __OFSUB__(v53, v52);
                uint64_t v50 = v53 - v52;
                if (v17) {
                  goto LABEL_136;
                }
                uint64_t v51 = __DataStorage._length.getter();
                uint64_t v3 = v75;
                if (!v48) {
                  goto LABEL_153;
                }
LABEL_84:
                if (v51 >= v50) {
                  uint64_t v55 = v50;
                }
                else {
                  uint64_t v55 = v51;
                }
                uint64_t v56 = __s1;
                uint64_t v57 = (const void *)v48;
                goto LABEL_116;
              default:
                __s1[0] = v6;
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = BYTE4(v5);
                BYTE5(__s1[1]) = BYTE5(v5);
                if (!v13)
                {
LABEL_58:
                  uint64_t v78 = v8;
                  uint64_t v79 = v7;
                  int64_t v80 = BYTE2(v7);
                  v81 = BYTE3(v7);
                  uint64_t v82 = BYTE4(v7);
                  uint64_t v83 = BYTE5(v7);
                  outlined copy of Data._Representation(v8, v7);
                  unint64_t v39 = __s1;
                  char v40 = &v78;
                  uint64_t v41 = BYTE6(v7);
                  goto LABEL_103;
                }
                uint64_t v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_130;
                  }
                  outlined copy of Data._Representation(v8, v7);
                  uint64_t v19 = __DataStorage._bytes.getter();
                  if (!v19)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
LABEL_159:
                    __break(1u);
                    JUMPOUT(0x257407C18);
                  }
                  uint64_t v20 = v19;
                  uint64_t v21 = __DataStorage._offset.getter();
                  uint64_t v22 = (int)v8 - v21;
                  if (__OFSUB__((int)v8, v21)) {
                    goto LABEL_132;
                  }
                  goto LABEL_53;
                }
                uint64_t v46 = *(void *)(v8 + 16);
                uint64_t v47 = *(void *)(v8 + 24);
                outlined copy of Data._Representation(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v48 = __DataStorage._bytes.getter();
                if (v48)
                {
                  BOOL v49 = __DataStorage._offset.getter();
                  if (__OFSUB__(v46, v49)) {
                    goto LABEL_140;
                  }
                  v48 += v46 - v49;
                }
                uint64_t v17 = __OFSUB__(v47, v46);
                uint64_t v50 = v47 - v46;
                if (v17) {
                  goto LABEL_135;
                }
                uint64_t v51 = __DataStorage._length.getter();
                uint64_t v3 = v75;
                if (!v48) {
                  goto LABEL_152;
                }
                goto LABEL_84;
            }
          }
          if (!--v2) {
            return 1;
          }
          break;
        case 2uLL:
          uint64_t v16 = *(void *)(v8 + 16);
          uint64_t v15 = *(void *)(v8 + 24);
          uint64_t v17 = __OFSUB__(v15, v16);
          uint64_t v14 = v15 - v16;
          if (!v17) {
            goto LABEL_19;
          }
          goto LABEL_126;
        case 3uLL:
          if (!v10) {
            goto LABEL_6;
          }
          outlined copy of Data._Representation(v8, v7);
LABEL_121:
          outlined consume of Data._Representation(v6, v5);
          return 0;
        default:
          uint64_t v14 = BYTE6(v7);
          goto LABEL_19;
      }
    }
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t *v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (uint64_t *)(a1 + 32);
    uint64_t v4 = (unsigned char *)(a2 + 40);
    do
    {
      uint64_t v6 = *v3;
      v3 += 2;
      uint64_t v5 = v6;
      uint64_t v7 = *((void *)v4 - 1);
      if (*v4 == 1)
      {
        if (v7)
        {
          if (v7 == 1)
          {
            if (v5 != 1) {
              return 0;
            }
          }
          else if (v5 != 2)
          {
            return 0;
          }
        }
        else if (v5)
        {
          return 0;
        }
      }
      else if (v5 != v7)
      {
        return 0;
      }
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  BOOL v19;
  uint64_t v21;
  uint64_t v22;

  uint64_t v4 = type metadata accessor for NCProtoContactHandleAnonym(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unint64_t v10 = (uint64_t *)((char *)&v21 - v9);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 != *(void *)(a2 + 16))
  {
LABEL_34:
    uint64_t v17 = 0;
    return v17 & 1;
  }
  if (v11 && a1 != a2)
  {
    uint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v22 = *(void *)(v8 + 72);
    size_t v13 = v11 - 1;
    while (1)
    {
      outlined init with copy of NCProtoContactInfo(a1 + v12, (uint64_t)v10, type metadata accessor for NCProtoContactHandleAnonym);
      outlined init with copy of NCProtoContactInfo(a2 + v12, (uint64_t)v7, type metadata accessor for NCProtoContactHandleAnonym);
      uint64_t v14 = *v10 == *(void *)v7 && v10[1] == *((void *)v7 + 1);
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      uint64_t v15 = v10[2];
      uint64_t v16 = *((void *)v7 + 2);
      if (v7[24] == 1)
      {
        if (v16)
        {
          if (v16 == 1)
          {
            if (v15 != 1) {
              break;
            }
          }
          else if (v15 != 2)
          {
            break;
          }
        }
        else if (v15)
        {
          break;
        }
      }
      else if (v15 != v16)
      {
        break;
      }
      if ((v10[4] != *((void *)v7 + 4) || v10[5] != *((void *)v7 + 5))
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || (v10[6] != *((void *)v7 + 6) || v10[7] != *((void *)v7 + 7))
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        break;
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      uint64_t v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of NCProtoContactInfo((uint64_t)v7, type metadata accessor for NCProtoContactHandleAnonym);
      outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoContactHandleAnonym);
      uint64_t v19 = v13-- != 0;
      if (v17)
      {
        v12 += v22;
        if (v19) {
          continue;
        }
      }
      return v17 & 1;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v7, type metadata accessor for NCProtoContactHandleAnonym);
    outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoContactHandleAnonym);
    goto LABEL_34;
  }
  uint64_t v17 = 1;
  return v17 & 1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(char *, char *), uint64_t (*a6)(void))
{
  uint64_t v11 = a3(0) - 8;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v27 - v16;
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18 == *(void *)(a2 + 16))
  {
    if (!v18 || a1 == a2)
    {
      char v23 = 1;
    }
    else
    {
      uint64_t v28 = a2;
      uint64_t v19 = a5;
      unint64_t v20 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      uint64_t v21 = *(void *)(v15 + 72);
      uint64_t v22 = v18 - 1;
      do
      {
        outlined init with copy of NCProtoContactInfo(a1 + v20, (uint64_t)v17, a4);
        outlined init with copy of NCProtoContactInfo(v28 + v20, (uint64_t)v14, a4);
        char v23 = v19(v17, v14);
        outlined destroy of NCProtoContactInfo((uint64_t)v14, a6);
        outlined destroy of NCProtoContactInfo((uint64_t)v17, a6);
        BOOL v25 = v22-- != 0;
        if ((v23 & 1) == 0) {
          break;
        }
        v20 += v21;
      }
      while (v25);
    }
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

BOOL specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  uint64_t v3 = a1 + 5;
  uint64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  closure #1 in static Data.== infix(_:_:)(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t specialized static Data.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x2574085B8);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  outlined copy of Data._Representation(a3, a4);
                  outlined copy of Data._Representation(a1, a2);
                  char v17 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  outlined consume of Data._Representation(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  outlined copy of Data._Representation(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v21, v22, v20, a3, a4);
                  outlined consume of Data._Representation(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  outlined copy of Data._Representation(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  outlined copy of Data._Representation(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              outlined consume of Data._Representation(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t specialized static NCProtoSuggestionAdvertisementDidChangeEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v43 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (char *)&v39 - v7;
  uint64_t v8 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v39 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoSuggestionAdvertisement?, NCProtoSuggestionAdvertisement?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v46 = (uint64_t)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v39 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v39 - v21;
  uint64_t v23 = type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent(0);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v40 = a1;
  outlined init with copy of NCProtoContactInfo?(a1 + v24, (uint64_t)v22, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  uint64_t v25 = *(int *)(v23 + 20);
  uint64_t v41 = a2;
  outlined init with copy of NCProtoContactInfo?(a2 + v25, (uint64_t)v20, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  uint64_t v26 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of NCProtoContactInfo?((uint64_t)v22, (uint64_t)v14, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  outlined init with copy of NCProtoContactInfo?((uint64_t)v20, v26, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v27((uint64_t)v14, 1, v8) != 1)
  {
    uint64_t v28 = v46;
    outlined init with copy of NCProtoContactInfo?((uint64_t)v14, v46, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
    if (v27(v26, 1, v8) != 1)
    {
      uint64_t v29 = v39;
      outlined init with take of NCProtoContactInfo(v26, v39, type metadata accessor for NCProtoSuggestionAdvertisement);
      char v30 = specialized static NCProtoSuggestionAdvertisement.== infix(_:_:)(v28, v29);
      outlined destroy of NCProtoContactInfo(v29, type metadata accessor for NCProtoSuggestionAdvertisement);
      outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
      outlined destroy of NCProtoContactInfo(v28, type metadata accessor for NCProtoSuggestionAdvertisement);
      outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
      if (v30) {
        goto LABEL_8;
      }
LABEL_9:
      char v36 = 0;
      return v36 & 1;
    }
    outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
    outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
    outlined destroy of NCProtoContactInfo(v28, type metadata accessor for NCProtoSuggestionAdvertisement);
LABEL_6:
    outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for (NCProtoSuggestionAdvertisement?, NCProtoSuggestionAdvertisement?));
    goto LABEL_9;
  }
  outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
  if (v27(v26, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
LABEL_8:
  uint64_t v32 = v44;
  uint64_t v31 = v45;
  char v33 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  char v34 = v42;
  v33(v42, v40, v45);
  BOOL v35 = v43;
  v33(v43, v41, v31);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v32 + 8);
  v37(v35, v31);
  v37(v34, v31);
  return v36 & 1;
}

uint64_t specialized static NCProtoPendingConversationDisconnectedEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v17 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
    {
      uint64_t v13 = type metadata accessor for NCProtoPendingConversationDisconnectedEvent(0);
      uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v14(v10, a1 + *(int *)(v13 + 24), v4);
      v14(v8, a2 + *(int *)(v13 + 24), v4);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      v15(v10, v4);
    }
    else
    {
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoGetDestinationCapabilitiesResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v43 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (char *)&v39 - v7;
  uint64_t v8 = type metadata accessor for NCProtoDestinationCapabilities(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v39 = (unsigned __int8 *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoDestinationCapabilities?, NCProtoDestinationCapabilities?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v46 = (unsigned __int8 *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v39 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v39 - v21;
  uint64_t DestinationCapabilitiesResponse = type metadata accessor for NCProtoGetDestinationCapabilitiesResponse(0);
  uint64_t v24 = *(int *)(DestinationCapabilitiesResponse + 20);
  uint64_t v40 = a1;
  outlined init with copy of NCProtoContactInfo?(a1 + v24, (uint64_t)v22, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
  uint64_t v25 = *(int *)(DestinationCapabilitiesResponse + 20);
  uint64_t v41 = a2;
  outlined init with copy of NCProtoContactInfo?(a2 + v25, (uint64_t)v20, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
  uint64_t v26 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of NCProtoContactInfo?((uint64_t)v22, (uint64_t)v14, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
  outlined init with copy of NCProtoContactInfo?((uint64_t)v20, v26, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v27((uint64_t)v14, 1, v8) != 1)
  {
    uint64_t v28 = v46;
    outlined init with copy of NCProtoContactInfo?((uint64_t)v14, (uint64_t)v46, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
    if (v27(v26, 1, v8) != 1)
    {
      uint64_t v29 = v39;
      outlined init with take of NCProtoContactInfo(v26, (uint64_t)v39, type metadata accessor for NCProtoDestinationCapabilities);
      char v30 = specialized static NCProtoDestinationCapabilities.== infix(_:_:)(v28, v29);
      outlined destroy of NCProtoContactInfo((uint64_t)v29, type metadata accessor for NCProtoDestinationCapabilities);
      outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
      outlined destroy of NCProtoContactInfo((uint64_t)v28, type metadata accessor for NCProtoDestinationCapabilities);
      outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
      if (v30) {
        goto LABEL_8;
      }
LABEL_9:
      char v36 = 0;
      return v36 & 1;
    }
    outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
    outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
    outlined destroy of NCProtoContactInfo((uint64_t)v28, type metadata accessor for NCProtoDestinationCapabilities);
LABEL_6:
    outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for (NCProtoDestinationCapabilities?, NCProtoDestinationCapabilities?));
    goto LABEL_9;
  }
  outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
  outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
  if (v27(v26, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
LABEL_8:
  uint64_t v32 = v44;
  uint64_t v31 = v45;
  char v33 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  char v34 = v42;
  v33(v42, v40, v45);
  BOOL v35 = v43;
  v33(v43, v41, v31);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v32 + 8);
  v37(v35, v31);
  v37(v34, v31);
  return v36 & 1;
}

uint64_t specialized static NCProtoTransferActiveConversationRequest.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v24 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t active = (int *)type metadata accessor for NCProtoTransferActiveConversationRequest(0);
    uint64_t v14 = active;
    uint64_t v15 = active[6];
    int v16 = a1[v15];
    int v17 = a2[v15];
    if (v16 == 2)
    {
      if (v17 != 2) {
        goto LABEL_17;
      }
    }
    else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
    {
      goto LABEL_17;
    }
    uint64_t v18 = active[7];
    int v19 = a1[v18];
    int v20 = a2[v18];
    if (v19 == 2)
    {
      if (v20 != 2)
      {
LABEL_17:
        char v12 = 0;
        return v12 & 1;
      }
    }
    else if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
    {
      goto LABEL_17;
    }
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v21(v10, &a1[active[5]], v4);
    v21(v8, &a2[v14[5]], v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v8, v4);
    v22(v10, v4);
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoGetDestinationCapabilitiesRequest.== infix(_:_:)(void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v27 - v9;
  BOOL v11 = *a1 == *(void *)a2 && a1[1] == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t DestinationCapabilitiesRequest = type metadata accessor for NCProtoGetDestinationCapabilitiesRequest(0);
    uint64_t v14 = DestinationCapabilitiesRequest;
    uint64_t v15 = *(int *)(DestinationCapabilitiesRequest + 24);
    int v16 = (char *)a1 + v15;
    char v17 = *((unsigned char *)a1 + v15 + 9);
    uint64_t v18 = &a2[v15];
    if (v17)
    {
      if (v18[9]) {
        goto LABEL_14;
      }
LABEL_17:
      char v12 = 0;
      return v12 & 1;
    }
    if (v18[9]) {
      goto LABEL_17;
    }
    uint64_t v19 = *(void *)v16;
    char v20 = v16[8];
    uint64_t v21 = *(void *)v18;
    char v22 = v18[8];
    uint64_t v23 = v19 != 0;
    if ((v20 & 1) == 0) {
      uint64_t v23 = v19;
    }
    if (v22)
    {
      if (!v21)
      {
        if (!v23) {
          goto LABEL_14;
        }
        goto LABEL_17;
      }
      if (v23 != 1) {
        goto LABEL_17;
      }
    }
    else if (v23 != v21)
    {
      goto LABEL_17;
    }
LABEL_14:
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v24(v10, (char *)a1 + *(int *)(DestinationCapabilitiesRequest + 20), v4);
    v24(v8, &a2[*(int *)(v14 + 20)], v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
    v25(v8, v4);
    v25(v10, v4);
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoActiveConversationsDidChangeEvent.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2, type metadata accessor for NCProtoActiveConversation, type metadata accessor for NCProtoActiveConversation, (uint64_t (*)(char *, char *))specialized static NCProtoActiveConversation.== infix(_:_:), type metadata accessor for NCProtoActiveConversation))
  {
    uint64_t v11 = type metadata accessor for NCProtoActiveConversationsDidChangeEvent(0);
    char v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 20), v4);
    v12(v8, (char *)a2 + *(int *)(v11 + 20), v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static NCProtoGetAddressableContactsResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v22 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    goto LABEL_4;
  }
  uint64_t AddressableContactsResponse = type metadata accessor for NCProtoGetAddressableContactsResponse(0);
  uint64_t v12 = AddressableContactsResponse;
  uint64_t v13 = *(int *)(AddressableContactsResponse + 24);
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  char v15 = *((unsigned char *)a1 + v13 + 8);
  uint64_t v16 = (uint64_t *)((char *)a2 + v13);
  int v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if ((v15 & 1) == 0)
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if (v17) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v19(v10, (char *)a1 + *(int *)(AddressableContactsResponse + 20), v4);
    v19(v8, (char *)a2 + *(int *)(v12 + 20), v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v20 = *(void (**)(char *, uint64_t))(v5 + 8);
    v20(v8, v4);
    v20(v10, v4);
    return v18 & 1;
  }
  if (v17) {
    goto LABEL_8;
  }
LABEL_4:
  char v18 = 0;
  return v18 & 1;
}

uint64_t specialized static NCProtoTransferContinuityCallRequest.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v21 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v13 = type metadata accessor for NCProtoTransferContinuityCallRequest(0);
    uint64_t v14 = v13;
    uint64_t v15 = *(int *)(v13 + 24);
    int v16 = a1[v15];
    int v17 = a2[v15];
    if (v16 == 2)
    {
      if (v17 != 2)
      {
LABEL_12:
        char v12 = 0;
        return v12 & 1;
      }
    }
    else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
    {
      goto LABEL_12;
    }
    char v18 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v18(v10, &a1[*(int *)(v13 + 20)], v4);
    v18(v8, &a2[*(int *)(v14 + 20)], v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v10, v4);
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoJoinActiveConversationRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t active = (int *)type metadata accessor for NCProtoJoinActiveConversationRequest(0);
  uint64_t v12 = active[5];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = *(void *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  if (!v14)
  {
    if (v16) {
      goto LABEL_21;
    }
    goto LABEL_10;
  }
  if (!v16) {
    goto LABEL_21;
  }
  BOOL v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (char v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    uint64_t v19 = active[6];
    int v20 = *(unsigned __int8 *)(a1 + v19);
    int v21 = *(unsigned __int8 *)(a2 + v19);
    if (v20 == 2)
    {
      if (v21 != 2) {
        goto LABEL_21;
      }
    }
    else if (v21 == 2 || ((((v21 & 1) == 0) ^ v20) & 1) == 0)
    {
      goto LABEL_21;
    }
    uint64_t v22 = active[7];
    int v23 = *(unsigned __int8 *)(a1 + v22);
    int v24 = *(unsigned __int8 *)(a2 + v22);
    if (v23 != 2)
    {
      if (v24 == 2 || ((((v24 & 1) == 0) ^ v23) & 1) == 0) {
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v25(v10, a1, v4);
      v25(v8, a2, v4);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v26 = *(void (**)(char *, uint64_t))(v5 + 8);
      v26(v8, v4);
      v26(v10, v4);
      return v18 & 1;
    }
    if (v24 == 2) {
      goto LABEL_20;
    }
LABEL_21:
    char v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static NCProtoGetCallDisplayDetailsResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v43 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (char *)&v39 - v7;
  uint64_t v8 = type metadata accessor for NCProtoCallInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v39 = (uint64_t *)((char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoCallInfo?, NCProtoCallInfo?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v46 = (uint64_t *)((char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  int v20 = (char *)&v39 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v39 - v21;
  uint64_t v23 = type metadata accessor for NCProtoGetCallDisplayDetailsResponse(0);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v40 = a1;
  outlined init with copy of NCProtoContactInfo?(a1 + v24, (uint64_t)v22, &demangling cache variable for type metadata for NCProtoCallInfo?);
  uint64_t v25 = *(int *)(v23 + 20);
  uint64_t v41 = a2;
  outlined init with copy of NCProtoContactInfo?(a2 + v25, (uint64_t)v20, &demangling cache variable for type metadata for NCProtoCallInfo?);
  uint64_t v26 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of NCProtoContactInfo?((uint64_t)v22, (uint64_t)v14, &demangling cache variable for type metadata for NCProtoCallInfo?);
  outlined init with copy of NCProtoContactInfo?((uint64_t)v20, v26, &demangling cache variable for type metadata for NCProtoCallInfo?);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v27((uint64_t)v14, 1, v8) != 1)
  {
    uint64_t v28 = v46;
    outlined init with copy of NCProtoContactInfo?((uint64_t)v14, (uint64_t)v46, &demangling cache variable for type metadata for NCProtoCallInfo?);
    if (v27(v26, 1, v8) != 1)
    {
      uint64_t v29 = v39;
      outlined init with take of NCProtoContactInfo(v26, (uint64_t)v39, type metadata accessor for NCProtoCallInfo);
      char v30 = specialized static NCProtoCallInfo.== infix(_:_:)(v28, v29);
      outlined destroy of NCProtoContactInfo((uint64_t)v29, type metadata accessor for NCProtoCallInfo);
      outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoCallInfo?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoCallInfo?);
      outlined destroy of NCProtoContactInfo((uint64_t)v28, type metadata accessor for NCProtoCallInfo);
      outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for NCProtoCallInfo?);
      if (v30) {
        goto LABEL_8;
      }
LABEL_9:
      char v36 = 0;
      return v36 & 1;
    }
    outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoCallInfo?);
    outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoCallInfo?);
    outlined destroy of NCProtoContactInfo((uint64_t)v28, type metadata accessor for NCProtoCallInfo);
LABEL_6:
    outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for (NCProtoCallInfo?, NCProtoCallInfo?));
    goto LABEL_9;
  }
  outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoCallInfo?);
  outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoCallInfo?);
  if (v27(v26, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for NCProtoCallInfo?);
LABEL_8:
  uint64_t v32 = v44;
  uint64_t v31 = v45;
  char v33 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  char v34 = v42;
  v33(v42, v40, v45);
  BOOL v35 = v43;
  v33(v43, v41, v31);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v32 + 8);
  v37(v35, v31);
  v37(v34, v31);
  return v36 & 1;
}

uint64_t specialized static NCProtoContinuityCallsDidChangeEvent.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2, type metadata accessor for NCProtoContinuityCall, type metadata accessor for NCProtoContinuityCall, (uint64_t (*)(char *, char *))specialized static NCProtoContinuityCall.== infix(_:_:), type metadata accessor for NCProtoContinuityCall))
  {
    uint64_t v11 = type metadata accessor for NCProtoContinuityCallsDidChangeEvent(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 20), v4);
    v12(v8, (char *)a2 + *(int *)(v11 + 20), v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static NCProtoPullLagunaSessionToTVRequest.== infix(_:_:)(void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v24 - v9;
  BOOL v11 = *a1 == *(void *)a2 && a1[1] == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v13 = type metadata accessor for NCProtoPullLagunaSessionToTVRequest(0);
    uint64_t v14 = v13;
    uint64_t v15 = *(int *)(v13 + 24);
    uint64_t v16 = (void *)((char *)a1 + v15);
    char v17 = *((unsigned char *)a1 + v15 + 9);
    uint64_t v18 = &a2[v15];
    if (v17)
    {
      if (v18[9])
      {
LABEL_12:
        uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
        v21(v10, (char *)a1 + *(int *)(v13 + 20), v4);
        v21(v8, &a2[*(int *)(v14 + 20)], v4);
        lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
        v22(v8, v4);
        v22(v10, v4);
        return v12 & 1;
      }
    }
    else if ((v18[9] & 1) == 0)
    {
      uint64_t v19 = *v16;
      uint64_t v20 = *(void *)v18;
      if (v18[8])
      {
        switch(v20)
        {
          case 1:
            if (v19 == 1) {
              goto LABEL_12;
            }
            goto LABEL_15;
          case 2:
            if (v19 == 2) {
              goto LABEL_12;
            }
            goto LABEL_15;
          case 3:
            if (v19 == 3) {
              goto LABEL_12;
            }
            goto LABEL_15;
          default:
            if (v19) {
              goto LABEL_15;
            }
            goto LABEL_12;
        }
      }
      if (v19 == v20) {
        goto LABEL_12;
      }
    }
LABEL_15:
    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoStartLagunaSessionResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0
    && (specialized static Dictionary<>.== infix(_:_:)(a1[1], a2[1]) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(a1[2], a2[2], type metadata accessor for NCProtoActiveConversation, type metadata accessor for NCProtoActiveConversation, (uint64_t (*)(char *, char *))specialized static NCProtoActiveConversation.== infix(_:_:), type metadata accessor for NCProtoActiveConversation) & 1) != 0&& (specialized static Array<A>.== infix(_:_:)(a1[3], a2[3], type metadata accessor for NCProtoContinuityFavorite, type metadata accessor for NCProtoContinuityFavorite, (uint64_t (*)(char *, char *))specialized static NCProtoContinuityFavorite.== infix(_:_:), type metadata accessor for NCProtoContinuityFavorite) & 1) != 0&& (specialized static Array<A>.== infix(_:_:)(a1[4], a2[4], type metadata accessor for NCProtoContinuityCall, type metadata accessor for NCProtoContinuityCall, (uint64_t (*)(char *, char *))specialized static NCProtoContinuityCall.== infix(_:_:),
          type metadata accessor for NCProtoContinuityCall) & 1) != 0
    && (specialized static Dictionary<>.== infix(_:_:)(a1[5], a2[5]) & 1) != 0)
  {
    uint64_t started = type metadata accessor for NCProtoStartLagunaSessionResponse(0);
    char v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(started + 40), v4);
    v12(v8, (char *)a2 + *(int *)(started + 40), v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static NCProtoGetImageForContactResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = &v21[-v9];
  uint64_t v11 = *(int *)(type metadata accessor for NCProtoGetImageForContactResponse(0) + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  unint64_t v13 = *(void *)(a1 + v11 + 8);
  uint64_t v14 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 == 15) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if (v16 >> 60 == 15)
  {
LABEL_5:
    outlined copy of Data?(v12, v13);
    outlined copy of Data?(v15, v16);
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v15, v16);
LABEL_8:
    char v18 = 0;
    return v18 & 1;
  }
  outlined copy of Data?(v12, v13);
  outlined copy of Data?(v15, v16);
  int v22 = specialized static Data.== infix(_:_:)(v12, v13, v15, v16);
  outlined consume of Data?(v15, v16);
  outlined consume of Data?(v12, v13);
  if ((v22 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_7:
  char v17 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16);
  v17(v10, a1, v4);
  v17(v8, a2, v4);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v19 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v19(v8, v4);
  v19(v10, v4);
  return v18 & 1;
}

uint64_t specialized static NCProtoStartLagunaSessionRequest.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2))
  {
    uint64_t started = type metadata accessor for NCProtoStartLagunaSessionRequest(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(started + 20), v4);
    v12(v8, (char *)a2 + *(int *)(started + 20), v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static NCProtoRecentCallsDidChangeEvent.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0
    && (specialized static Dictionary<>.== infix(_:_:)(a1[1], a2[1]) & 1) != 0
    && (specialized static Dictionary<>.== infix(_:_:)(a1[2], a2[2]) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for NCProtoRecentCallsDidChangeEvent(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 28), v4);
    v12(v8, (char *)a2 + *(int *)(v11 + 28), v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static NCProtoStartConversationRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for NCProtoStartConversationRequest(0) + 20);
  uint64_t v12 = (uint64_t *)(a1 + v11);
  char v13 = *(unsigned char *)(a1 + v11 + 9);
  uint64_t v14 = (uint64_t *)(a2 + v11);
  if ((v13 & 1) == 0)
  {
    if ((*((unsigned char *)v14 + 9) & 1) == 0)
    {
      uint64_t v15 = *v12;
      uint64_t v16 = *v14;
      if (v14[1])
      {
        switch(v16)
        {
          case 1:
            if (v15 == 1) {
              goto LABEL_7;
            }
            goto LABEL_10;
          case 2:
            if (v15 == 2) {
              goto LABEL_7;
            }
            goto LABEL_10;
          case 3:
            if (v15 == 3) {
              goto LABEL_7;
            }
            goto LABEL_10;
          default:
            if (v15) {
              goto LABEL_10;
            }
            goto LABEL_7;
        }
      }
      if (v15 == v16) {
        goto LABEL_7;
      }
    }
LABEL_10:
    char v18 = 0;
    return v18 & 1;
  }
  if ((*((unsigned char *)v14 + 9) & 1) == 0) {
    goto LABEL_10;
  }
LABEL_7:
  char v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v17(v10, a1, v4);
  v17(v8, a2, v4);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  v19(v8, v4);
  v19(v10, v4);
  return v18 & 1;
}

uint64_t specialized static NCProtoSuggestionAdvertisement.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v20 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(a2 + 32);
      if (*(unsigned char *)(a1 + 40)) {
        uint64_t v14 = v14 != 0;
      }
      if (*(unsigned char *)(a2 + 40) == 1)
      {
        if (v15)
        {
          if (v14 != 1)
          {
LABEL_16:
            char v12 = 0;
            return v12 & 1;
          }
        }
        else if (v14)
        {
          goto LABEL_16;
        }
      }
      else if (v14 != v15)
      {
        goto LABEL_16;
      }
      uint64_t v16 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
      char v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v17(v10, a1 + *(int *)(v16 + 28), v4);
      v17(v8, a2 + *(int *)(v16 + 28), v4);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v18 = *(void (**)(char *, uint64_t))(v5 + 8);
      v18(v8, v4);
      v18(v10, v4);
    }
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoLagunaConnectionRequest.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v59 = *(void *)(v4 - 8);
  uint64_t v60 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v58 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v57 = (char *)&v48 - v7;
  uint64_t v8 = type metadata accessor for NCProtoCallState(0);
  uint64_t v61 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoCallState?, NCProtoCallState?));
  MEMORY[0x270FA5388](v11);
  BOOL v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  char v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v48 - v19;
  MEMORY[0x270FA5388](v18);
  int v22 = (char *)&v48 - v21;
  uint64_t v23 = a1;
  uint64_t v24 = *a1;
  uint64_t v25 = a2;
  if ((specialized static Array<A>.== infix(_:_:)(v24, *a2) & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v53 = v11;
  uint64_t v54 = v20;
  uint64_t v55 = v22;
  uint64_t v56 = v13;
  uint64_t v51 = v10;
  uint64_t v52 = v17;
  uint64_t v26 = v61;
  if ((specialized static Dictionary<>.== infix(_:_:)(v23[1], a2[1]) & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v27 = v23;
  uint64_t v28 = type metadata accessor for NCProtoLagunaConnectionRequest(0);
  uint64_t v29 = (uint64_t)v55;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v23 + *(int *)(v28 + 44), (uint64_t)v55, &demangling cache variable for type metadata for NCProtoCallState?);
  uint64_t v49 = v28;
  uint64_t v50 = v25;
  uint64_t v30 = (uint64_t)v54;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v25 + *(int *)(v28 + 44), (uint64_t)v54, &demangling cache variable for type metadata for NCProtoCallState?);
  uint64_t v31 = (uint64_t)v56;
  uint64_t v32 = (uint64_t)&v56[*(int *)(v53 + 48)];
  outlined init with copy of NCProtoContactInfo?(v29, (uint64_t)v56, &demangling cache variable for type metadata for NCProtoCallState?);
  outlined init with copy of NCProtoContactInfo?(v30, v32, &demangling cache variable for type metadata for NCProtoCallState?);
  char v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  if (v33(v31, 1, v8) != 1)
  {
    uint64_t v34 = (uint64_t)v52;
    outlined init with copy of NCProtoContactInfo?(v31, (uint64_t)v52, &demangling cache variable for type metadata for NCProtoCallState?);
    if (v33(v32, 1, v8) != 1)
    {
      uint64_t v35 = v34;
      uint64_t v36 = (uint64_t)v51;
      outlined init with take of NCProtoContactInfo(v32, (uint64_t)v51, type metadata accessor for NCProtoCallState);
      char v37 = specialized static NCProtoCallState.== infix(_:_:)(v35, v36);
      outlined destroy of NCProtoContactInfo(v36, type metadata accessor for NCProtoCallState);
      outlined destroy of NCProtoContactInfo?(v30, &demangling cache variable for type metadata for NCProtoCallState?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v55, &demangling cache variable for type metadata for NCProtoCallState?);
      outlined destroy of NCProtoContactInfo(v35, type metadata accessor for NCProtoCallState);
      outlined destroy of NCProtoContactInfo?(v31, &demangling cache variable for type metadata for NCProtoCallState?);
      if (v37) {
        goto LABEL_10;
      }
LABEL_15:
      char v45 = 0;
      return v45 & 1;
    }
    outlined destroy of NCProtoContactInfo?(v30, &demangling cache variable for type metadata for NCProtoCallState?);
    outlined destroy of NCProtoContactInfo?((uint64_t)v55, &demangling cache variable for type metadata for NCProtoCallState?);
    outlined destroy of NCProtoContactInfo(v34, type metadata accessor for NCProtoCallState);
LABEL_8:
    outlined destroy of NCProtoContactInfo?(v31, &demangling cache variable for type metadata for (NCProtoCallState?, NCProtoCallState?));
    goto LABEL_15;
  }
  outlined destroy of NCProtoContactInfo?(v30, &demangling cache variable for type metadata for NCProtoCallState?);
  uint64_t v31 = (uint64_t)v56;
  outlined destroy of NCProtoContactInfo?(v29, &demangling cache variable for type metadata for NCProtoCallState?);
  if (v33(v32, 1, v8) != 1) {
    goto LABEL_8;
  }
  outlined destroy of NCProtoContactInfo?(v31, &demangling cache variable for type metadata for NCProtoCallState?);
LABEL_10:
  uint64_t v38 = v50;
  if ((specialized static Array<A>.== infix(_:_:)(v27[2], v50[2], type metadata accessor for NCProtoActiveConversation, type metadata accessor for NCProtoActiveConversation, (uint64_t (*)(char *, char *))specialized static NCProtoActiveConversation.== infix(_:_:), type metadata accessor for NCProtoActiveConversation) & 1) == 0|| (specialized static Array<A>.== infix(_:_:)(v27[3], v38[3], type metadata accessor for NCProtoContinuityFavorite, type metadata accessor for NCProtoContinuityFavorite, (uint64_t (*)(char *, char *))specialized static NCProtoContinuityFavorite.== infix(_:_:), type metadata accessor for NCProtoContinuityFavorite) & 1) == 0|| (specialized static Array<A>.== infix(_:_:)(v27[4], v38[4], type metadata accessor for NCProtoContinuityCall, type metadata accessor for NCProtoContinuityCall, (uint64_t (*)(char *, char *))specialized static NCProtoContinuityCall.== infix(_:_:),
          type metadata accessor for NCProtoContinuityCall) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v27[5], v38[5]) & 1) == 0)
  {
    goto LABEL_15;
  }
  uint64_t v39 = v49;
  uint64_t v41 = v59;
  uint64_t v40 = v60;
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
  uint64_t v43 = v57;
  v42(v57, (char *)v27 + *(int *)(v49 + 40), v60);
  uint64_t v44 = v58;
  v42(v58, (char *)v38 + *(int *)(v39 + 40), v40);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v46 = *(void (**)(char *, uint64_t))(v41 + 8);
  v46(v44, v40);
  v46(v43, v40);
  return v45 & 1;
}

uint64_t specialized static NCProtoFavoritesDidChangeEvent.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2, type metadata accessor for NCProtoContinuityFavorite, type metadata accessor for NCProtoContinuityFavorite, (uint64_t (*)(char *, char *))specialized static NCProtoContinuityFavorite.== infix(_:_:), type metadata accessor for NCProtoContinuityFavorite))
  {
    uint64_t v11 = type metadata accessor for NCProtoFavoritesDidChangeEvent(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 20), v4);
    v12(v8, (char *)a2 + *(int *)(v11 + 20), v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static NCProtoDestinationCapabilities.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2])
  {
    uint64_t v13 = type metadata accessor for NCProtoDestinationCapabilities(0);
    uint64_t v14 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16);
    v14(v10, &a1[*(int *)(v13 + 28)], v4);
    v14(v8, &a2[*(int *)(v13 + 28)], v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    char v11 = 0;
  }
  return v11 & 1;
}

uint64_t specialized static NCProtoLinkConversationSendLetMeInRequest.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v23 - v11;
  uint64_t v13 = *(int *)(a3(0) + 20);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = *(void *)(a1 + v13 + 8);
  uint64_t v16 = (void *)(a2 + v13);
  uint64_t v17 = v16[1];
  if (!v15)
  {
    if (!v17)
    {
LABEL_11:
      uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v20(v12, a1, v6);
      v20(v10, a2, v6);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v21 = *(void (**)(char *, uint64_t))(v7 + 8);
      v21(v10, v6);
      v21(v12, v6);
      return v19 & 1;
    }
LABEL_10:
    char v19 = 0;
    return v19 & 1;
  }
  if (!v17) {
    goto LABEL_10;
  }
  if (*v14 == *v16 && v15 == v17) {
    goto LABEL_11;
  }
  char v19 = 0;
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_11;
  }
  return v19 & 1;
}

uint64_t specialized static NCProtoAddConversationParticipantsRequest.== infix(_:_:)(char *a1, char *a2, uint64_t (*a3)(void, void), uint64_t (*a4)(void))
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v20 - v13;
  if (a3(*(void *)a1, *(void *)a2))
  {
    uint64_t v15 = a4(0);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v16(v14, &a1[*(int *)(v15 + 20)], v8);
    v16(v12, &a2[*(int *)(v15 + 20)], v8);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v12, v8);
    v18(v14, v8);
  }
  else
  {
    char v17 = 0;
  }
  return v17 & 1;
}

uint64_t specialized static NCProtoStartedSessionEvent.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v53 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v51 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v50 = (char *)&v47 - v7;
  uint64_t v8 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (uint64_t *)((char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoMemberAssociationPrimaryInfo?, NCProtoMemberAssociationPrimaryInfo?));
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v54 = (uint64_t *)((char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v47 - v19;
  MEMORY[0x270FA5388](v18);
  int v22 = (char *)&v47 - v21;
  if (*a1 == *a2 && a1[1] == a2[1] || (char v23 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Data.== infix(_:_:)(a1[2], a1[3], a2[2], a2[3]) & 1) == 0) {
      goto LABEL_21;
    }
    uint64_t v48 = v11;
    uint64_t v24 = v9;
    uint64_t v25 = type metadata accessor for NCProtoStartedSessionEvent(0);
    outlined init with copy of NCProtoContactInfo?((uint64_t)a1 + *(int *)(v25 + 28), (uint64_t)v22, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    uint64_t v49 = v25;
    outlined init with copy of NCProtoContactInfo?((uint64_t)a2 + *(int *)(v25 + 28), (uint64_t)v20, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    uint64_t v26 = (uint64_t)&v14[*(int *)(v12 + 48)];
    outlined init with copy of NCProtoContactInfo?((uint64_t)v22, (uint64_t)v14, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    outlined init with copy of NCProtoContactInfo?((uint64_t)v20, v26, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    if (v27((uint64_t)v14, 1, v8) == 1)
    {
      outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      if (v27(v26, 1, v8) == 1)
      {
        outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
LABEL_12:
        uint64_t v31 = v49;
        uint64_t v32 = *(int *)(v49 + 32);
        char v33 = (void *)((char *)a1 + v32);
        char v34 = *((unsigned char *)a1 + v32 + 9);
        uint64_t v35 = (char *)a2 + v32;
        if (v34)
        {
          if (v35[9])
          {
LABEL_18:
            uint64_t v38 = (char *)a1 + *(int *)(v49 + 24);
            uint64_t v40 = v52;
            uint64_t v39 = v53;
            uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
            uint64_t v42 = v50;
            v41(v50, v38, v53);
            uint64_t v43 = (char *)a2 + *(int *)(v31 + 24);
            uint64_t v44 = v51;
            v41(v51, v43, v39);
            lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
            char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
            char v45 = *(void (**)(char *, uint64_t))(v40 + 8);
            v45(v44, v39);
            v45(v42, v39);
            return v23 & 1;
          }
        }
        else if ((v35[9] & 1) == 0)
        {
          uint64_t v36 = *v33;
          uint64_t v37 = *(void *)v35;
          if (v35[8])
          {
            switch(v37)
            {
              case 1:
                if (v36 == 1) {
                  goto LABEL_18;
                }
                goto LABEL_21;
              case 2:
                if (v36 == 2) {
                  goto LABEL_18;
                }
                goto LABEL_21;
              case 3:
                if (v36 == 3) {
                  goto LABEL_18;
                }
                goto LABEL_21;
              default:
                if (v36) {
                  goto LABEL_21;
                }
                goto LABEL_18;
            }
          }
          if (v36 == v37) {
            goto LABEL_18;
          }
        }
LABEL_21:
        char v23 = 0;
        return v23 & 1;
      }
    }
    else
    {
      uint64_t v28 = v54;
      outlined init with copy of NCProtoContactInfo?((uint64_t)v14, (uint64_t)v54, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      if (v27(v26, 1, v8) != 1)
      {
        uint64_t v29 = v48;
        outlined init with take of NCProtoContactInfo(v26, (uint64_t)v48, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
        char v30 = specialized static NCProtoMemberAssociationPrimaryInfo.== infix(_:_:)(v28, v29);
        outlined destroy of NCProtoContactInfo((uint64_t)v29, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
        outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
        outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
        outlined destroy of NCProtoContactInfo((uint64_t)v28, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
        outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
        if ((v30 & 1) == 0) {
          goto LABEL_21;
        }
        goto LABEL_12;
      }
      outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      outlined destroy of NCProtoContactInfo((uint64_t)v28, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
    }
    outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for (NCProtoMemberAssociationPrimaryInfo?, NCProtoMemberAssociationPrimaryInfo?));
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t specialized static NCProtoDeviceTokenResponse.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = &v24[-v9];
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v26 = v5;
    uint64_t v13 = type metadata accessor for NCProtoDeviceTokenResponse(0);
    uint64_t v14 = *(int *)(v13 + 24);
    uint64_t v15 = *(void *)&a1[v14];
    unint64_t v16 = *(void *)&a1[v14 + 8];
    uint64_t v17 = (uint64_t *)&a2[v14];
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    if (v16 >> 60 == 15)
    {
      if (v19 >> 60 == 15) {
        goto LABEL_12;
      }
    }
    else if (v19 >> 60 != 15)
    {
      outlined copy of Data?(v15, v16);
      outlined copy of Data?(v18, v19);
      int v25 = specialized static Data.== infix(_:_:)(v15, v16, v18, v19);
      outlined consume of Data?(v18, v19);
      outlined consume of Data?(v15, v16);
      if (v25)
      {
LABEL_12:
        uint64_t v20 = v26;
        uint64_t v21 = *(void (**)(unsigned char *, char *, uint64_t))(v26 + 16);
        v21(v10, &a1[*(int *)(v13 + 20)], v4);
        v21(v8, &a2[*(int *)(v13 + 20)], v4);
        lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        int v22 = *(void (**)(unsigned char *, uint64_t))(v20 + 8);
        v22(v8, v4);
        v22(v10, v4);
        return v12 & 1;
      }
LABEL_13:
      char v12 = 0;
      return v12 & 1;
    }
    outlined copy of Data?(v15, v16);
    outlined copy of Data?(v18, v19);
    outlined consume of Data?(v15, v16);
    outlined consume of Data?(v18, v19);
    goto LABEL_13;
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoDisconnectResponse.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*a1 == *a2)
  {
    uint64_t v12 = type metadata accessor for NCProtoDisconnectResponse(0);
    uint64_t v13 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16);
    v13(v10, &a1[*(int *)(v12 + 20)], v4);
    v13(v8, &a2[*(int *)(v12 + 20)], v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v11 = 0;
  }
  return v11 & 1;
}

uint64_t specialized static NCProtoMemberAssociationPrimaryInfo.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = &v39[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = &v39[-v9];
  char v11 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v12 = v11[6];
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  uint64_t v14 = *(uint64_t *)((char *)a1 + v12 + 8);
  uint64_t v15 = (uint64_t *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  if (!v14)
  {
    if (v16) {
      goto LABEL_31;
    }
    goto LABEL_10;
  }
  if (!v16) {
    goto LABEL_31;
  }
  BOOL v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (char v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    uint64_t v41 = v5;
    uint64_t v19 = v11[7];
    uint64_t v20 = *(uint64_t *)((char *)a1 + v19);
    unint64_t v21 = *(uint64_t *)((char *)a1 + v19 + 8);
    int v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    if (v21 >> 60 == 15)
    {
      if (v24 >> 60 == 15)
      {
LABEL_16:
        uint64_t v25 = v11[8];
        uint64_t v26 = (uint64_t *)((char *)a1 + v25);
        char v27 = *((unsigned char *)a1 + v25 + 8);
        uint64_t v28 = (uint64_t *)((char *)a2 + v25);
        int v29 = *((unsigned __int8 *)a2 + v25 + 8);
        if (v27)
        {
          if (!v29) {
            goto LABEL_31;
          }
        }
        else
        {
          if (*v26 != *v28) {
            LOBYTE(v29) = 1;
          }
          if (v29) {
            goto LABEL_31;
          }
        }
        uint64_t v30 = v11[9];
        uint64_t v31 = (uint64_t *)((char *)a1 + v30);
        uint64_t v32 = *(uint64_t *)((char *)a1 + v30 + 8);
        char v33 = (uint64_t *)((char *)a2 + v30);
        uint64_t v34 = v33[1];
        if (v32)
        {
          uint64_t v35 = v41;
          if (!v34) {
            goto LABEL_31;
          }
          if (*v31 != *v33 || v32 != v34)
          {
            char v18 = 0;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              return v18 & 1;
            }
          }
        }
        else
        {
          uint64_t v35 = v41;
          if (v34) {
            goto LABEL_31;
          }
        }
        if (specialized static Array<A>.== infix(_:_:)(*a1, *a2))
        {
          uint64_t v36 = *(void (**)(unsigned char *, char *, uint64_t))(v35 + 16);
          v36(v10, (char *)a1 + v11[5], v4);
          v36(v8, (char *)a2 + v11[5], v4);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
          char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v37 = *(void (**)(unsigned char *, uint64_t))(v35 + 8);
          v37(v8, v4);
          v37(v10, v4);
          return v18 & 1;
        }
LABEL_31:
        char v18 = 0;
        return v18 & 1;
      }
    }
    else if (v24 >> 60 != 15)
    {
      outlined copy of Data?(v20, v21);
      outlined copy of Data?(v23, v24);
      int v40 = specialized static Data.== infix(_:_:)(v20, v21, v23, v24);
      outlined consume of Data?(v23, v24);
      outlined consume of Data?(v20, v21);
      if ((v40 & 1) == 0) {
        goto LABEL_31;
      }
      goto LABEL_16;
    }
    outlined copy of Data?(v20, v21);
    outlined copy of Data?(v23, v24);
    outlined consume of Data?(v20, v21);
    outlined consume of Data?(v23, v24);
    goto LABEL_31;
  }
  return v18 & 1;
}

uint64_t specialized static NCProtoDeviceTokenRequest.== infix(_:_:)(void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v74 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  v72 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v71 = (char *)&v71 - v7;
  uint64_t v8 = type metadata accessor for NCProtoCallState(0);
  uint64_t v80 = *(void *)(v8 - 8);
  uint64_t v81 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v76 = (uint64_t)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoCallState?, NCProtoCallState?));
  MEMORY[0x270FA5388](v78);
  uint64_t v82 = (uint64_t)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v77 = (uint64_t)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v83 = (uint64_t)&v71 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v79 = (uint64_t)&v71 - v16;
  uint64_t v17 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (uint64_t *)((char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoMemberAssociationPrimaryInfo?, NCProtoMemberAssociationPrimaryInfo?));
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  uint64_t v25 = MEMORY[0x270FA5388](v24 - 8);
  char v27 = (uint64_t *)((char *)&v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v28 = MEMORY[0x270FA5388](v25);
  uint64_t v30 = (char *)&v71 - v29;
  MEMORY[0x270FA5388](v28);
  uint64_t v32 = (char *)&v71 - v31;
  uint64_t v33 = *a1;
  uint64_t v34 = a1[1];
  uint64_t v35 = *(void *)a2;
  uint64_t v36 = *((void *)a2 + 1);
  uint64_t v84 = a2;
  if (v33 == v35 && v34 == v36 || (char v37 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v38 = (int *)type metadata accessor for NCProtoDeviceTokenRequest(0);
    uint64_t v39 = v38[6];
    uint64_t v75 = a1;
    outlined init with copy of NCProtoContactInfo?((uint64_t)a1 + v39, (uint64_t)v32, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    outlined init with copy of NCProtoContactInfo?((uint64_t)&v84[v38[6]], (uint64_t)v30, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    uint64_t v40 = (uint64_t)&v23[*(int *)(v21 + 48)];
    outlined init with copy of NCProtoContactInfo?((uint64_t)v32, (uint64_t)v23, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    outlined init with copy of NCProtoContactInfo?((uint64_t)v30, v40, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    uint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
    if (v41((uint64_t)v23, 1, v17) == 1)
    {
      outlined destroy of NCProtoContactInfo?((uint64_t)v30, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v32, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      if (v41(v40, 1, v17) == 1)
      {
        outlined destroy of NCProtoContactInfo?((uint64_t)v23, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
LABEL_11:
        char v45 = v75;
        uint64_t v46 = v79;
        outlined init with copy of NCProtoContactInfo?((uint64_t)v75 + v38[7], v79, &demangling cache variable for type metadata for NCProtoCallState?);
        uint64_t v47 = v83;
        outlined init with copy of NCProtoContactInfo?((uint64_t)&v84[v38[7]], v83, &demangling cache variable for type metadata for NCProtoCallState?);
        uint64_t v48 = v82;
        uint64_t v49 = v82 + *(int *)(v78 + 48);
        outlined init with copy of NCProtoContactInfo?(v46, v82, &demangling cache variable for type metadata for NCProtoCallState?);
        outlined init with copy of NCProtoContactInfo?(v47, v49, &demangling cache variable for type metadata for NCProtoCallState?);
        uint64_t v50 = v81;
        uint64_t v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
        if (v51(v48, 1, v81) == 1)
        {
          outlined destroy of NCProtoContactInfo?(v47, &demangling cache variable for type metadata for NCProtoCallState?);
          outlined destroy of NCProtoContactInfo?(v46, &demangling cache variable for type metadata for NCProtoCallState?);
          if (v51(v49, 1, v50) == 1)
          {
            outlined destroy of NCProtoContactInfo?(v48, &demangling cache variable for type metadata for NCProtoCallState?);
LABEL_21:
            uint64_t v56 = v38[8];
            int v57 = *((unsigned __int8 *)v45 + v56);
            int v58 = v84[v56];
            if (v57 == 2)
            {
              if (v58 == 2) {
                goto LABEL_26;
              }
            }
            else if (v58 != 2 && ((((v58 & 1) == 0) ^ v57) & 1) != 0)
            {
LABEL_26:
              uint64_t v59 = v38[9];
              uint64_t v60 = (void *)((char *)v45 + v59);
              char v61 = *((unsigned char *)v45 + v59 + 9);
              uint64_t v62 = &v84[v59];
              if (v61)
              {
                if (v62[9])
                {
LABEL_28:
                  uint64_t v64 = v73;
                  uint64_t v63 = v74;
                  uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
                  uint64_t v66 = v71;
                  v65(v71, (char *)v45 + v38[5], v74);
                  v67 = v72;
                  v65(v72, &v84[v38[5]], v63);
                  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
                  char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
                  uint64_t v68 = *(void (**)(char *, uint64_t))(v64 + 8);
                  v68(v67, v63);
                  v68(v66, v63);
                  return v37 & 1;
                }
              }
              else if ((v62[9] & 1) == 0)
              {
                uint64_t v69 = *v60;
                uint64_t v70 = *(void *)v62;
                if (v62[8])
                {
                  switch(v70)
                  {
                    case 1:
                      if (v69 == 1) {
                        goto LABEL_28;
                      }
                      goto LABEL_18;
                    case 2:
                      if (v69 == 2) {
                        goto LABEL_28;
                      }
                      goto LABEL_18;
                    case 3:
                      if (v69 == 3) {
                        goto LABEL_28;
                      }
                      goto LABEL_18;
                    case 4:
                      if (v69 == 4) {
                        goto LABEL_28;
                      }
                      goto LABEL_18;
                    default:
                      if (!v69) {
                        goto LABEL_28;
                      }
                      goto LABEL_18;
                  }
                }
                if (v69 == v70) {
                  goto LABEL_28;
                }
              }
            }
LABEL_18:
            char v37 = 0;
            return v37 & 1;
          }
        }
        else
        {
          uint64_t v52 = v77;
          outlined init with copy of NCProtoContactInfo?(v48, v77, &demangling cache variable for type metadata for NCProtoCallState?);
          if (v51(v49, 1, v50) != 1)
          {
            uint64_t v54 = v76;
            outlined init with take of NCProtoContactInfo(v49, v76, type metadata accessor for NCProtoCallState);
            char v55 = specialized static NCProtoCallState.== infix(_:_:)(v52, v54);
            outlined destroy of NCProtoContactInfo(v54, type metadata accessor for NCProtoCallState);
            outlined destroy of NCProtoContactInfo?(v83, &demangling cache variable for type metadata for NCProtoCallState?);
            outlined destroy of NCProtoContactInfo?(v46, &demangling cache variable for type metadata for NCProtoCallState?);
            outlined destroy of NCProtoContactInfo(v52, type metadata accessor for NCProtoCallState);
            outlined destroy of NCProtoContactInfo?(v48, &demangling cache variable for type metadata for NCProtoCallState?);
            if ((v55 & 1) == 0) {
              goto LABEL_18;
            }
            goto LABEL_21;
          }
          outlined destroy of NCProtoContactInfo?(v83, &demangling cache variable for type metadata for NCProtoCallState?);
          outlined destroy of NCProtoContactInfo?(v46, &demangling cache variable for type metadata for NCProtoCallState?);
          outlined destroy of NCProtoContactInfo(v52, type metadata accessor for NCProtoCallState);
        }
        uint64_t v42 = &demangling cache variable for type metadata for (NCProtoCallState?, NCProtoCallState?);
        uint64_t v43 = v48;
LABEL_17:
        outlined destroy of NCProtoContactInfo?(v43, v42);
        goto LABEL_18;
      }
    }
    else
    {
      outlined init with copy of NCProtoContactInfo?((uint64_t)v23, (uint64_t)v27, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      if (v41(v40, 1, v17) != 1)
      {
        outlined init with take of NCProtoContactInfo(v40, (uint64_t)v20, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
        char v44 = specialized static NCProtoMemberAssociationPrimaryInfo.== infix(_:_:)(v27, v20);
        outlined destroy of NCProtoContactInfo((uint64_t)v20, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
        outlined destroy of NCProtoContactInfo?((uint64_t)v30, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
        outlined destroy of NCProtoContactInfo?((uint64_t)v32, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
        outlined destroy of NCProtoContactInfo((uint64_t)v27, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
        outlined destroy of NCProtoContactInfo?((uint64_t)v23, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
        if ((v44 & 1) == 0) {
          goto LABEL_18;
        }
        goto LABEL_11;
      }
      outlined destroy of NCProtoContactInfo?((uint64_t)v30, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v32, &demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      outlined destroy of NCProtoContactInfo((uint64_t)v27, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
    }
    uint64_t v42 = &demangling cache variable for type metadata for (NCProtoMemberAssociationPrimaryInfo?, NCProtoMemberAssociationPrimaryInfo?);
    uint64_t v43 = (uint64_t)v23;
    goto LABEL_17;
  }
  return v37 & 1;
}

uint64_t specialized static NCProtoContactHandleAnonym.== infix(_:_:)(char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v19 - v9;
  if (*(void *)a1 != *(void *)a2 || *((void *)a1 + 1) != *(void *)(a2 + 8))
  {
    char v12 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return v12 & 1;
    }
  }
  uint64_t v13 = *((void *)a1 + 2);
  uint64_t v14 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 24) != 1)
  {
    if (v13 == v14) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
  if (!v14)
  {
    if (!v13) {
      goto LABEL_12;
    }
LABEL_20:
    char v12 = 0;
    return v12 & 1;
  }
  if (v14 == 1)
  {
    if (v13 != 1) {
      goto LABEL_20;
    }
    goto LABEL_12;
  }
  if (v13 != 2) {
    goto LABEL_20;
  }
LABEL_12:
  if (*((void *)a1 + 4) == *(void *)(a2 + 32) && *((void *)a1 + 5) == *(void *)(a2 + 40)
    || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*((void *)a1 + 6) == *(void *)(a2 + 48) && *((void *)a1 + 7) == *(void *)(a2 + 56)
      || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v15 = type metadata accessor for NCProtoContactHandleAnonym(0);
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v16(v10, &a1[*(int *)(v15 + 32)], v4);
      v16(v8, (char *)(a2 + *(int *)(v15 + 32)), v4);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
    }
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoContinuityFavorite.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v75 = a1;
  uint64_t v76 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v64 = *(void *)(v2 - 8);
  uint64_t v65 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v63 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v62 = (char *)&v61 - v5;
  uint64_t v6 = type metadata accessor for NCProtoContactHandleAnonym(0);
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v66 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoContactHandleAnonym?, NCProtoContactHandleAnonym?));
  MEMORY[0x270FA5388](v68);
  uint64_t v72 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  v67 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v74 = (uint64_t)&v61 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v69 = (uint64_t)&v61 - v14;
  uint64_t v15 = type metadata accessor for NCProtoContactInfo(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoContactInfo?, NCProtoContactInfo?));
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v26 = (char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v61 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v61 - v30;
  uint64_t v32 = type metadata accessor for NCProtoContinuityFavorite(0);
  outlined init with copy of NCProtoContactInfo?((uint64_t)v75 + *(int *)(v32 + 32), (uint64_t)v31, &demangling cache variable for type metadata for NCProtoContactInfo?);
  uint64_t v73 = v32;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v76 + *(int *)(v32 + 32), (uint64_t)v29, &demangling cache variable for type metadata for NCProtoContactInfo?);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  outlined init with copy of NCProtoContactInfo?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined init with copy of NCProtoContactInfo?((uint64_t)v29, v33, &demangling cache variable for type metadata for NCProtoContactInfo?);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v29, &demangling cache variable for type metadata for NCProtoContactInfo?);
    outlined destroy of NCProtoContactInfo?((uint64_t)v31, &demangling cache variable for type metadata for NCProtoContactInfo?);
    if (v34(v33, 1, v15) == 1)
    {
      outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoContactInfo?);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v35 = &demangling cache variable for type metadata for (NCProtoContactInfo?, NCProtoContactInfo?);
    uint64_t v36 = (uint64_t)v22;
LABEL_17:
    outlined destroy of NCProtoContactInfo?(v36, v35);
    goto LABEL_18;
  }
  outlined init with copy of NCProtoContactInfo?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for NCProtoContactInfo?);
  if (v34(v33, 1, v15) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v29, &demangling cache variable for type metadata for NCProtoContactInfo?);
    outlined destroy of NCProtoContactInfo?((uint64_t)v31, &demangling cache variable for type metadata for NCProtoContactInfo?);
    outlined destroy of NCProtoContactInfo((uint64_t)v26, type metadata accessor for NCProtoContactInfo);
    goto LABEL_6;
  }
  outlined init with take of NCProtoContactInfo(v33, (uint64_t)v18, type metadata accessor for NCProtoContactInfo);
  char v37 = specialized static NCProtoContactInfo.== infix(_:_:)(v26, v18);
  outlined destroy of NCProtoContactInfo((uint64_t)v18, type metadata accessor for NCProtoContactInfo);
  outlined destroy of NCProtoContactInfo?((uint64_t)v29, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined destroy of NCProtoContactInfo?((uint64_t)v31, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined destroy of NCProtoContactInfo((uint64_t)v26, type metadata accessor for NCProtoContactInfo);
  outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoContactInfo?);
  if ((v37 & 1) == 0)
  {
LABEL_18:
    char v40 = 0;
    return v40 & 1;
  }
LABEL_8:
  uint64_t v39 = v75;
  uint64_t v38 = v76;
  if (*v75 != *v76 || v75[1] != v76[1])
  {
    char v40 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return v40 & 1;
    }
  }
  uint64_t v41 = v73;
  uint64_t v42 = v69;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v39 + *(int *)(v73 + 36), v69, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  uint64_t v43 = v74;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v38 + *(int *)(v41 + 36), v74, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  uint64_t v44 = v72;
  uint64_t v45 = v72 + *(int *)(v68 + 48);
  outlined init with copy of NCProtoContactInfo?(v42, v72, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  outlined init with copy of NCProtoContactInfo?(v43, v45, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  uint64_t v46 = v71;
  uint64_t v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
  if (v47(v44, 1, v71) == 1)
  {
    outlined destroy of NCProtoContactInfo?(v43, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
    outlined destroy of NCProtoContactInfo?(v42, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
    if (v47(v45, 1, v46) == 1)
    {
      outlined destroy of NCProtoContactInfo?(v44, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  uint64_t v48 = v67;
  outlined init with copy of NCProtoContactInfo?(v44, (uint64_t)v67, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  if (v47(v45, 1, v46) == 1)
  {
    outlined destroy of NCProtoContactInfo?(v74, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
    outlined destroy of NCProtoContactInfo?(v42, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
    outlined destroy of NCProtoContactInfo((uint64_t)v48, type metadata accessor for NCProtoContactHandleAnonym);
LABEL_16:
    uint64_t v35 = &demangling cache variable for type metadata for (NCProtoContactHandleAnonym?, NCProtoContactHandleAnonym?);
    uint64_t v36 = v44;
    goto LABEL_17;
  }
  uint64_t v50 = v66;
  outlined init with take of NCProtoContactInfo(v45, v66, type metadata accessor for NCProtoContactHandleAnonym);
  char v51 = specialized static NCProtoContactHandleAnonym.== infix(_:_:)(v48, v50);
  outlined destroy of NCProtoContactInfo(v50, type metadata accessor for NCProtoContactHandleAnonym);
  outlined destroy of NCProtoContactInfo?(v74, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  outlined destroy of NCProtoContactInfo?(v42, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  outlined destroy of NCProtoContactInfo((uint64_t)v48, type metadata accessor for NCProtoContactHandleAnonym);
  outlined destroy of NCProtoContactInfo?(v44, &demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  if ((v51 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_21:
  if (v39[2] == v38[2] && v39[3] == v38[3] || (char v40 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (v39[4] == v38[4] && v39[5] == v38[5] || (char v40 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v52 = v73;
      uint64_t v53 = (char *)v39 + *(int *)(v73 + 28);
      uint64_t v55 = v64;
      uint64_t v54 = v65;
      uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
      int v57 = v62;
      v56(v62, v53, v65);
      int v58 = (char *)v38 + *(int *)(v52 + 28);
      uint64_t v59 = v63;
      v56(v63, v58, v54);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v60 = *(void (**)(char *, uint64_t))(v55 + 8);
      v60(v59, v54);
      v60(v57, v54);
    }
  }
  return v40 & 1;
}

uint64_t specialized static NCProtoAddressableContact.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v47 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v46 = (char *)&v45 - v7;
  uint64_t v8 = type metadata accessor for NCProtoContactInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v52 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoContactInfo?, NCProtoContactInfo?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v45 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v45 - v22;
  uint64_t v24 = type metadata accessor for NCProtoAddressableContact(0);
  uint64_t v25 = *(int *)(v24 + 28);
  uint64_t v50 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = v24;
  outlined init with copy of NCProtoContactInfo?(v26, (uint64_t)v23, &demangling cache variable for type metadata for NCProtoContactInfo?);
  uint64_t v28 = *(int *)(v27 + 28);
  char v51 = a2;
  outlined init with copy of NCProtoContactInfo?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for NCProtoContactInfo?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of NCProtoContactInfo?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined init with copy of NCProtoContactInfo?((uint64_t)v21, v29, &demangling cache variable for type metadata for NCProtoContactInfo?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoContactInfo?);
    outlined destroy of NCProtoContactInfo?((uint64_t)v23, &demangling cache variable for type metadata for NCProtoContactInfo?);
    if (v30(v29, 1, v8) == 1)
    {
      outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for NCProtoContactInfo?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  uint64_t v31 = v52;
  outlined init with copy of NCProtoContactInfo?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for NCProtoContactInfo?);
  if (v30(v29, 1, v8) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoContactInfo?);
    outlined destroy of NCProtoContactInfo?((uint64_t)v23, &demangling cache variable for type metadata for NCProtoContactInfo?);
    outlined destroy of NCProtoContactInfo((uint64_t)v18, type metadata accessor for NCProtoContactInfo);
LABEL_6:
    outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for (NCProtoContactInfo?, NCProtoContactInfo?));
LABEL_13:
    char v35 = 0;
    return v35 & 1;
  }
  outlined init with take of NCProtoContactInfo(v29, (uint64_t)v31, type metadata accessor for NCProtoContactInfo);
  char v32 = specialized static NCProtoContactInfo.== infix(_:_:)(v18, v31);
  outlined destroy of NCProtoContactInfo((uint64_t)v31, type metadata accessor for NCProtoContactInfo);
  outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined destroy of NCProtoContactInfo?((uint64_t)v23, &demangling cache variable for type metadata for NCProtoContactInfo?);
  outlined destroy of NCProtoContactInfo((uint64_t)v18, type metadata accessor for NCProtoContactInfo);
  outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for NCProtoContactInfo?);
  if ((v32 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v33 = v50;
  uint64_t v34 = v51;
  if ((specialized static Array<A>.== infix(_:_:)(*v50, *v51) & 1) == 0) {
    goto LABEL_13;
  }
  if (v33[1] == v34[1] && v33[2] == v34[2] || (char v35 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v36 = (char *)v33 + *(int *)(v27 + 24);
    uint64_t v38 = v48;
    uint64_t v37 = v49;
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
    char v40 = v46;
    v39(v46, v36, v49);
    uint64_t v41 = (char *)v34 + *(int *)(v27 + 24);
    uint64_t v42 = v47;
    v39(v47, v41, v37);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v43 = *(void (**)(char *, uint64_t))(v38 + 8);
    v43(v42, v37);
    v43(v40, v37);
  }
  return v35 & 1;
}

uint64_t specialized static NCProtoActiveConversation.== infix(_:_:)(void **a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = &v58[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = &v58[-v9];
  uint64_t active = (int *)type metadata accessor for NCProtoActiveConversation(0);
  uint64_t v12 = active[6];
  uint64_t v13 = (void **)((char *)a1 + v12);
  uint64_t v14 = *(uint64_t *)((char *)a1 + v12 + 8);
  uint64_t v15 = &a2[v12];
  uint64_t v16 = *((void *)v15 + 1);
  if (!v14)
  {
    if (v16) {
      goto LABEL_83;
    }
    goto LABEL_10;
  }
  if (!v16) {
    goto LABEL_83;
  }
  BOOL v17 = *v13 == *(void *)v15 && v14 == v16;
  if (v17 || (char v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    uint64_t v19 = active[7];
    uint64_t v20 = (void **)((char *)a1 + v19);
    uint64_t v21 = *(uint64_t *)((char *)a1 + v19 + 8);
    uint64_t v22 = &a2[v19];
    uint64_t v23 = *((void *)v22 + 1);
    if (v21)
    {
      if (!v23) {
        goto LABEL_83;
      }
      if (*v20 != *(void *)v22 || v21 != v23)
      {
        char v18 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return v18 & 1;
        }
      }
    }
    else if (v23)
    {
      goto LABEL_83;
    }
    uint64_t v25 = active[8];
    uint64_t v26 = (uint64_t *)((char *)a1 + v25);
    char v27 = *((unsigned char *)a1 + v25 + 9);
    uint64_t v28 = &a2[v25];
    if (v27)
    {
      if ((v28[9] & 1) == 0) {
        goto LABEL_83;
      }
    }
    else
    {
      if (v28[9]) {
        goto LABEL_83;
      }
      uint64_t v34 = *v26;
      uint64_t v35 = *(void *)v28;
      if (v28[8])
      {
        switch(v35)
        {
          case 1:
            if (v34 != 1) {
              goto LABEL_83;
            }
            goto LABEL_21;
          case 2:
            if (v34 != 2) {
              goto LABEL_83;
            }
            goto LABEL_21;
          case 3:
            if (v34 != 3) {
              goto LABEL_83;
            }
            goto LABEL_21;
          default:
            if (!v34) {
              goto LABEL_21;
            }
            goto LABEL_83;
        }
      }
      if (v34 != v35) {
        goto LABEL_83;
      }
    }
LABEL_21:
    uint64_t v29 = active[9];
    uint64_t v30 = (void **)((char *)a1 + v29);
    char v31 = *((unsigned char *)a1 + v29 + 8);
    char v32 = &a2[v29];
    int v33 = a2[v29 + 8];
    if (v31)
    {
      if (!v33) {
        goto LABEL_83;
      }
    }
    else
    {
      if (*v30 != *(void *)v32) {
        LOBYTE(v33) = 1;
      }
      if (v33) {
        goto LABEL_83;
      }
    }
    if (specialized static Array<A>.== infix(_:_:)(*a1, *(void **)a2))
    {
      uint64_t v36 = active[10];
      uint64_t v37 = (uint64_t *)((char *)a1 + v36);
      char v38 = *((unsigned char *)a1 + v36 + 9);
      uint64_t v39 = &a2[v36];
      if (v38)
      {
        if ((v39[9] & 1) == 0) {
          goto LABEL_83;
        }
      }
      else
      {
        if (v39[9]) {
          goto LABEL_83;
        }
        uint64_t v40 = *v37;
        uint64_t v41 = *(void *)v39;
        if (v39[8])
        {
          switch(v41)
          {
            case 1:
              if (v40 != 1) {
                goto LABEL_83;
              }
              goto LABEL_41;
            case 2:
              if (v40 != 2) {
                goto LABEL_83;
              }
              goto LABEL_41;
            case 3:
              if (v40 != 3) {
                goto LABEL_83;
              }
              goto LABEL_41;
            case 4:
              if (v40 != 4) {
                goto LABEL_83;
              }
              goto LABEL_41;
            case 5:
              if (v40 != 5) {
                goto LABEL_83;
              }
              goto LABEL_41;
            default:
              if (!v40) {
                goto LABEL_41;
              }
              goto LABEL_83;
          }
        }
        if (v40 != v41) {
          goto LABEL_83;
        }
      }
LABEL_41:
      uint64_t v42 = active[11];
      uint64_t v43 = (uint64_t *)((char *)a1 + v42);
      char v44 = *((unsigned char *)a1 + v42 + 9);
      uint64_t v45 = &a2[v42];
      if (v44)
      {
        if ((v45[9] & 1) == 0) {
          goto LABEL_83;
        }
      }
      else
      {
        if (v45[9]) {
          goto LABEL_83;
        }
        uint64_t v52 = *v43;
        uint64_t v53 = *(void *)v45;
        if (v45[8])
        {
          switch(v53)
          {
            case 1:
              if (v52 != 1) {
                goto LABEL_83;
              }
              goto LABEL_43;
            case 2:
              if (v52 != 2) {
                goto LABEL_83;
              }
              goto LABEL_43;
            case 3:
              if (v52 != 3) {
                goto LABEL_83;
              }
              goto LABEL_43;
            case 4:
              if (v52 != 4) {
                goto LABEL_83;
              }
              goto LABEL_43;
            default:
              if (!v52) {
                goto LABEL_43;
              }
              goto LABEL_83;
          }
        }
        if (v52 != v53) {
          goto LABEL_83;
        }
      }
LABEL_43:
      uint64_t v46 = active[12];
      uint64_t v47 = *(uint64_t *)((char *)a1 + v46);
      unint64_t v48 = *(unint64_t *)((char *)a1 + v46 + 8);
      uint64_t v49 = (uint64_t *)&a2[v46];
      uint64_t v50 = *v49;
      unint64_t v51 = v49[1];
      if (v48 >> 60 == 15)
      {
        if (v51 >> 60 == 15) {
          goto LABEL_65;
        }
        goto LABEL_60;
      }
      if (v51 >> 60 == 15)
      {
LABEL_60:
        uint64_t v54 = v47;
        outlined copy of Data?(v47, v48);
        outlined copy of Data?(v50, v51);
        outlined consume of Data?(v54, v48);
        outlined consume of Data?(v50, v51);
        goto LABEL_83;
      }
      uint64_t v60 = v47;
      outlined copy of Data?(v47, v48);
      outlined copy of Data?(v50, v51);
      int v59 = specialized static Data.== infix(_:_:)(v60, v48, v50, v51);
      outlined consume of Data?(v50, v51);
      outlined consume of Data?(v60, v48);
      if (v59)
      {
LABEL_65:
        uint64_t v55 = *(void (**)(unsigned char *, char *, uint64_t))(v5 + 16);
        v55(v10, (char *)a1 + active[5], v4);
        v55(v8, &a2[active[5]], v4);
        lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v56 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
        v56(v8, v4);
        v56(v10, v4);
        return v18 & 1;
      }
    }
LABEL_83:
    char v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static NCProtoCreateLinkConversationRequest.== infix(_:_:)(char *a1, char *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v19 - v11;
  BOOL v13 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v15 = a3(0);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v16(v12, &a1[*(int *)(v15 + 20)], v6);
    v16(v10, &a2[*(int *)(v15 + 20)], v6);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    BOOL v17 = *(void (**)(char *, uint64_t))(v7 + 8);
    v17(v10, v6);
    v17(v12, v6);
  }
  return v14 & 1;
}

uint64_t specialized static NCProtoDisconnectRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v26 - v9;
  if ((specialized static Data.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v11 = (int *)type metadata accessor for NCProtoDisconnectRequest(0);
  uint64_t v12 = v11;
  uint64_t v13 = v11[6];
  int v14 = *(unsigned __int8 *)(a1 + v13);
  int v15 = *(unsigned __int8 *)(a2 + v13);
  if (v14 == 2)
  {
    if (v15 != 2) {
      goto LABEL_16;
    }
  }
  else if (v15 == 2 || ((((v15 & 1) == 0) ^ v14) & 1) == 0)
  {
    goto LABEL_16;
  }
  uint64_t v16 = v11[7];
  BOOL v17 = (uint64_t *)(a1 + v16);
  char v18 = *(unsigned char *)(a1 + v16 + 9);
  uint64_t v19 = (uint64_t *)(a2 + v16);
  if (v18)
  {
    if ((*((unsigned char *)v19 + 9) & 1) == 0)
    {
LABEL_16:
      char v23 = 0;
      return v23 & 1;
    }
  }
  else
  {
    if (*((unsigned char *)v19 + 9)) {
      goto LABEL_16;
    }
    uint64_t v20 = *v17;
    uint64_t v21 = *v19;
    if (v19[1])
    {
      switch(v21)
      {
        case 1:
          if (v20 == 1) {
            goto LABEL_13;
          }
          goto LABEL_16;
        case 2:
          if (v20 == 2) {
            goto LABEL_13;
          }
          goto LABEL_16;
        case 3:
          if (v20 == 3) {
            goto LABEL_13;
          }
          goto LABEL_16;
        default:
          if (v20) {
            goto LABEL_16;
          }
          goto LABEL_13;
      }
    }
    if (v20 != v21) {
      goto LABEL_16;
    }
  }
LABEL_13:
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v22(v10, a1 + v11[5], v4);
  v22(v8, a2 + v12[5], v4);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v5 + 8);
  v24(v8, v4);
  v24(v10, v4);
  return v23 & 1;
}

uint64_t specialized static NCProtoCallStateResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v43 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (char *)&v39 - v7;
  uint64_t v8 = type metadata accessor for NCProtoCallState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v39 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoCallState?, NCProtoCallState?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  int v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v46 = (uint64_t)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v39 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v39 - v21;
  uint64_t v23 = type metadata accessor for NCProtoCallStateResponse(0);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v40 = a1;
  outlined init with copy of NCProtoContactInfo?(a1 + v24, (uint64_t)v22, &demangling cache variable for type metadata for NCProtoCallState?);
  uint64_t v25 = *(int *)(v23 + 20);
  uint64_t v41 = a2;
  outlined init with copy of NCProtoContactInfo?(a2 + v25, (uint64_t)v20, &demangling cache variable for type metadata for NCProtoCallState?);
  uint64_t v26 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of NCProtoContactInfo?((uint64_t)v22, (uint64_t)v14, &demangling cache variable for type metadata for NCProtoCallState?);
  outlined init with copy of NCProtoContactInfo?((uint64_t)v20, v26, &demangling cache variable for type metadata for NCProtoCallState?);
  char v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v27((uint64_t)v14, 1, v8) != 1)
  {
    uint64_t v28 = v46;
    outlined init with copy of NCProtoContactInfo?((uint64_t)v14, v46, &demangling cache variable for type metadata for NCProtoCallState?);
    if (v27(v26, 1, v8) != 1)
    {
      uint64_t v29 = v39;
      outlined init with take of NCProtoContactInfo(v26, v39, type metadata accessor for NCProtoCallState);
      char v30 = specialized static NCProtoCallState.== infix(_:_:)(v28, v29);
      outlined destroy of NCProtoContactInfo(v29, type metadata accessor for NCProtoCallState);
      outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoCallState?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoCallState?);
      outlined destroy of NCProtoContactInfo(v28, type metadata accessor for NCProtoCallState);
      outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for NCProtoCallState?);
      if (v30) {
        goto LABEL_8;
      }
LABEL_9:
      char v36 = 0;
      return v36 & 1;
    }
    outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoCallState?);
    outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoCallState?);
    outlined destroy of NCProtoContactInfo(v28, type metadata accessor for NCProtoCallState);
LABEL_6:
    outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for (NCProtoCallState?, NCProtoCallState?));
    goto LABEL_9;
  }
  outlined destroy of NCProtoContactInfo?((uint64_t)v20, &demangling cache variable for type metadata for NCProtoCallState?);
  outlined destroy of NCProtoContactInfo?((uint64_t)v22, &demangling cache variable for type metadata for NCProtoCallState?);
  if (v27(v26, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for NCProtoCallState?);
LABEL_8:
  uint64_t v32 = v44;
  uint64_t v31 = v45;
  int v33 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  uint64_t v34 = v42;
  v33(v42, v40, v45);
  uint64_t v35 = v43;
  v33(v43, v41, v31);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v32 + 8);
  v37(v35, v31);
  v37(v34, v31);
  return v36 & 1;
}

uint64_t specialized static NCProtoContactUpdateEvent.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t (*a4)(void))
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  int v14 = (char *)&v20 - v13;
  if (specialized static Data.== infix(_:_:)(*a1, a1[1], *a2, a2[1]) & 1) != 0 && (a3(a1[2], a2[2]))
  {
    uint64_t v15 = a4(0);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v16(v14, (char *)a1 + *(int *)(v15 + 24), v8);
    v16(v12, (char *)a2 + *(int *)(v15 + 24), v8);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v12, v8);
    v18(v14, v8);
  }
  else
  {
    char v17 = 0;
  }
  return v17 & 1;
}

uint64_t specialized static NCProtoCallStateRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (specialized static Data.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)))
  {
    uint64_t v11 = type metadata accessor for NCProtoCallStateRequest(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 20), v4);
    v12(v8, a2 + *(int *)(v11 + 20), v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static NCProtoAddMemberRequest.== infix(_:_:)(char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = &v27[-v9];
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *((void *)a1 + 2) == *(void *)(a2 + 16) && *((void *)a1 + 3) == *(void *)(a2 + 24);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v14 = *((void *)a1 + 4);
      uint64_t v15 = *(void *)(a2 + 32);
      if (*(unsigned char *)(a2 + 40) == 1)
      {
        switch(v15)
        {
          case 1:
            if (v14 != 1) {
              goto LABEL_21;
            }
            goto LABEL_16;
          case 2:
            if (v14 != 2) {
              goto LABEL_21;
            }
            goto LABEL_16;
          case 3:
            if (v14 != 3) {
              goto LABEL_21;
            }
            goto LABEL_16;
          case 4:
            if (v14 != 4) {
              goto LABEL_21;
            }
            goto LABEL_16;
          case 5:
            if (v14 != 5) {
              goto LABEL_21;
            }
            goto LABEL_16;
          default:
            if (!v14) {
              goto LABEL_16;
            }
            goto LABEL_21;
        }
      }
      if (v14 == v15)
      {
LABEL_16:
        uint64_t v29 = v5;
        uint64_t v16 = type metadata accessor for NCProtoAddMemberRequest(0);
        uint64_t v17 = *(int *)(v16 + 32);
        uint64_t v18 = *(void *)&a1[v17];
        unint64_t v19 = *(void *)&a1[v17 + 8];
        uint64_t v20 = (uint64_t *)(a2 + v17);
        uint64_t v21 = *v20;
        unint64_t v22 = v20[1];
        if (v19 >> 60 == 15)
        {
          if (v22 >> 60 == 15) {
            goto LABEL_24;
          }
        }
        else if (v22 >> 60 != 15)
        {
          outlined copy of Data?(v18, v19);
          outlined copy of Data?(v21, v22);
          int v28 = specialized static Data.== infix(_:_:)(v18, v19, v21, v22);
          outlined consume of Data?(v21, v22);
          outlined consume of Data?(v18, v19);
          if (v28)
          {
LABEL_24:
            uint64_t v24 = v29;
            uint64_t v25 = *(void (**)(unsigned char *, char *, uint64_t))(v29 + 16);
            v25(v10, &a1[*(int *)(v16 + 28)], v4);
            v25(v8, (char *)(a2 + *(int *)(v16 + 28)), v4);
            lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
            char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v26 = *(void (**)(unsigned char *, uint64_t))(v24 + 8);
            v26(v8, v4);
            v26(v10, v4);
            return v12 & 1;
          }
          goto LABEL_21;
        }
        outlined copy of Data?(v18, v19);
        outlined copy of Data?(v21, v22);
        outlined consume of Data?(v18, v19);
        outlined consume of Data?(v21, v22);
      }
LABEL_21:
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoIDSProxyMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v41 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoIDSProxyMessage.OneOf_Message?, NCProtoIDSProxyMessage.OneOf_Message?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v37 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  outlined init with copy of NCProtoContactInfo?(a1, (uint64_t)&v37 - v22, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v40 = a2;
  outlined init with copy of NCProtoContactInfo?(a2, (uint64_t)v21, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of NCProtoContactInfo?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  outlined init with copy of NCProtoContactInfo?((uint64_t)v21, v24, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of NCProtoContactInfo?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v38;
      outlined init with take of NCProtoContactInfo(v24, v38, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
      char v27 = specialized static NCProtoIDSProxyMessage.OneOf_Message.== infix(_:_:)((uint64_t)v18, v26);
      outlined destroy of NCProtoContactInfo(v26, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
      outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v23, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
      outlined destroy of NCProtoContactInfo((uint64_t)v18, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
      outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    outlined destroy of NCProtoContactInfo?((uint64_t)v23, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    outlined destroy of NCProtoContactInfo((uint64_t)v18, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
LABEL_6:
    outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for (NCProtoIDSProxyMessage.OneOf_Message?, NCProtoIDSProxyMessage.OneOf_Message?));
    goto LABEL_9;
  }
  outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  outlined destroy of NCProtoContactInfo?((uint64_t)v23, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of NCProtoContactInfo?((uint64_t)v14, &demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
LABEL_8:
  uint64_t v28 = type metadata accessor for NCProtoIDSProxyMessage(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  int v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static NCProtoIDSProxyMessage.Resource.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if ((specialized static Data.== infix(_:_:)(*a1, a1[1], *a2, a2[1]) & 1) == 0
    || (specialized static Data.== infix(_:_:)(a1[2], a1[3], a2[2], a2[3]) & 1) == 0)
  {
    goto LABEL_8;
  }
  if (a1[4] == a2[4] && a1[5] == a2[5] || (char v11 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (specialized static Dictionary<>.== infix(_:_:)(a1[6], a2[6]))
    {
      uint64_t v12 = type metadata accessor for NCProtoIDSProxyMessage.Resource(0);
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v13(v10, (char *)a1 + *(int *)(v12 + 32), v4);
      v13(v8, (char *)a2 + *(int *)(v12 + 32), v4);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
      v14(v8, v4);
      v14(v10, v4);
      return v11 & 1;
    }
LABEL_8:
    char v11 = 0;
  }
  return v11 & 1;
}

uint64_t specialized static NCProtoIDSProxyMessage.GroupUpdate.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v17 - v9;
  if (*a1 != *a2) {
    goto LABEL_23;
  }
  if (*((void *)a1 + 1) != *((void *)a2 + 1) || *((void *)a1 + 2) != *((void *)a2 + 2))
  {
    char v12 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return v12 & 1;
    }
  }
  if (*((void *)a1 + 3) != *((void *)a2 + 3)) {
    goto LABEL_23;
  }
  if (*((void *)a1 + 4) != *((void *)a2 + 4) || *((void *)a1 + 5) != *((void *)a2 + 5))
  {
    char v12 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return v12 & 1;
    }
  }
  if (*((void *)a1 + 6) != *((void *)a2 + 6)
    || *((void *)a1 + 7) != *((void *)a2 + 7)
    || a1[64] != a2[64]
    || *((double *)a1 + 9) != *((double *)a2 + 9)
    || (specialized static Data.== infix(_:_:)(*((void *)a1 + 10), *((void *)a1 + 11), *((void *)a2 + 10), *((void *)a2 + 11)) & 1) == 0|| (specialized static Data.== infix(_:_:)(*((void *)a1 + 12), *((void *)a1 + 13), *((void *)a2 + 12), *((void *)a2 + 13)) & 1) == 0|| (specialized static Array<A>.== infix(_:_:)(*((void **)a1 + 14), *((void **)a2 + 14)) & 1) == 0|| (specialized static Dictionary<>.== infix(_:_:)(*((void *)a1 + 15), *((void *)a2 + 15)) & 1) == 0)
  {
LABEL_23:
    char v12 = 0;
    return v12 & 1;
  }
  if (*((void *)a1 + 16) == *((void *)a2 + 16) && *((void *)a1 + 17) == *((void *)a2 + 17)
    || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v13 = type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0);
    uint64_t v14 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16);
    v14(v10, &a1[*(int *)(v13 + 68)], v4);
    v14(v8, &a2[*(int *)(v13 + 68)], v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoSenderIdentity.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v18 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v14 = type metadata accessor for NCProtoSenderIdentity(0);
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v15(v10, &a1[*(int *)(v14 + 24)], v4);
      v15(v8, &a2[*(int *)(v14 + 24)], v4);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoContinuityCall.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v71 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v70 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v69 = (char *)&v66 - v7;
  uint64_t v8 = type metadata accessor for NCProtoCallInfo(0);
  uint64_t v72 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoCallInfo?, NCProtoCallInfo?));
  MEMORY[0x270FA5388](v11);
  uint64_t v73 = (uint64_t)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (uint64_t *)((char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v66 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v66 - v20;
  uint64_t v22 = (int *)type metadata accessor for NCProtoContinuityCall(0);
  uint64_t v23 = v22[5];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = *(void *)(a1 + v23 + 8);
  uint64_t v26 = (void *)(a2 + v23);
  uint64_t v27 = v26[1];
  if (!v25)
  {
    uint64_t v68 = v4;
    if (v27) {
      goto LABEL_51;
    }
    goto LABEL_8;
  }
  if (!v27) {
    goto LABEL_51;
  }
  uint64_t v68 = v4;
  if (*v24 == *v26 && v25 == v27 || (char v28 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_8:
    uint64_t v29 = v22[6];
    uint64_t v30 = (void *)(a1 + v29);
    uint64_t v31 = *(void *)(a1 + v29 + 8);
    uint64_t v32 = (void *)(a2 + v29);
    uint64_t v33 = v32[1];
    if (v31)
    {
      if (!v33) {
        goto LABEL_51;
      }
      if (*v30 != *v32 || v31 != v33)
      {
        char v28 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return v28 & 1;
        }
      }
    }
    else if (v33)
    {
      goto LABEL_51;
    }
    uint64_t v34 = v22[7];
    uint64_t v35 = a1 + v34;
    char v36 = *(unsigned char *)(a1 + v34 + 9);
    uint64_t v37 = a2 + v34;
    if (v36)
    {
      if (!*(unsigned char *)(v37 + 9)) {
        goto LABEL_51;
      }
    }
    else if ((*(unsigned char *)(v37 + 9) & 1) != 0 {
           || !specialized == infix<A>(_:_:)(*(void *)v35, *(unsigned char *)(v35 + 8) & 1, *(void *)v37))
    }
    {
      goto LABEL_51;
    }
    uint64_t v38 = v22[8];
    uint64_t v39 = (void *)(a1 + v38);
    uint64_t v40 = *(void *)(a1 + v38 + 8);
    uint64_t v41 = (void *)(a2 + v38);
    uint64_t v42 = v41[1];
    if (v40)
    {
      if (!v42) {
        goto LABEL_51;
      }
      if (*v39 != *v41 || v40 != v42)
      {
        char v28 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return v28 & 1;
        }
      }
    }
    else if (v42)
    {
      goto LABEL_51;
    }
    uint64_t v43 = v22[9];
    int v44 = *(unsigned __int8 *)(a1 + v43);
    int v45 = *(unsigned __int8 *)(a2 + v43);
    if (v44 == 2)
    {
      if (v45 != 2) {
        goto LABEL_51;
      }
    }
    else if (v45 == 2 || ((((v45 & 1) == 0) ^ v44) & 1) == 0)
    {
      goto LABEL_51;
    }
    uint64_t v46 = v22[10];
    int v47 = *(unsigned __int8 *)(a1 + v46);
    int v48 = *(unsigned __int8 *)(a2 + v46);
    if (v47 == 2)
    {
      if (v48 != 2) {
        goto LABEL_51;
      }
    }
    else if (v48 == 2 || ((((v48 & 1) == 0) ^ v47) & 1) == 0)
    {
      goto LABEL_51;
    }
    outlined init with copy of NCProtoContactInfo?(a1 + v22[11], (uint64_t)v21, &demangling cache variable for type metadata for NCProtoCallInfo?);
    outlined init with copy of NCProtoContactInfo?(a2 + v22[11], (uint64_t)v19, &demangling cache variable for type metadata for NCProtoCallInfo?);
    uint64_t v49 = v73;
    uint64_t v50 = v73 + *(int *)(v11 + 48);
    outlined init with copy of NCProtoContactInfo?((uint64_t)v21, v73, &demangling cache variable for type metadata for NCProtoCallInfo?);
    uint64_t v67 = v50;
    outlined init with copy of NCProtoContactInfo?((uint64_t)v19, v50, &demangling cache variable for type metadata for NCProtoCallInfo?);
    uint64_t v51 = v49;
    uint64_t v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
    if (v52(v51, 1, v8) == 1)
    {
      outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoCallInfo?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoCallInfo?);
      if (v52(v67, 1, v8) == 1)
      {
        outlined destroy of NCProtoContactInfo?(v73, &demangling cache variable for type metadata for NCProtoCallInfo?);
LABEL_44:
        uint64_t v54 = v22[12];
        uint64_t v55 = (void *)(a1 + v54);
        uint64_t v56 = *(void *)(a1 + v54 + 8);
        int v57 = (void *)(a2 + v54);
        uint64_t v58 = v57[1];
        if (v56)
        {
          if (v58)
          {
            if (*v55 != *v57 || v56 != v58)
            {
              char v28 = 0;
              if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                return v28 & 1;
              }
            }
LABEL_53:
            uint64_t v60 = v71;
            uint64_t v61 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
            uint64_t v62 = v68;
            uint64_t v63 = v69;
            v61(v69, a1, v68);
            uint64_t v64 = v70;
            v61(v70, a2, v62);
            lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
            char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v65 = *(void (**)(char *, uint64_t))(v60 + 8);
            v65(v64, v62);
            v65(v63, v62);
            return v28 & 1;
          }
        }
        else if (!v58)
        {
          goto LABEL_53;
        }
LABEL_51:
        char v28 = 0;
        return v28 & 1;
      }
    }
    else
    {
      outlined init with copy of NCProtoContactInfo?(v73, (uint64_t)v16, &demangling cache variable for type metadata for NCProtoCallInfo?);
      if (v52(v67, 1, v8) != 1)
      {
        outlined init with take of NCProtoContactInfo(v67, (uint64_t)v10, type metadata accessor for NCProtoCallInfo);
        char v53 = specialized static NCProtoCallInfo.== infix(_:_:)(v16, v10);
        outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoCallInfo);
        outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoCallInfo?);
        outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoCallInfo?);
        outlined destroy of NCProtoContactInfo((uint64_t)v16, type metadata accessor for NCProtoCallInfo);
        outlined destroy of NCProtoContactInfo?(v73, &demangling cache variable for type metadata for NCProtoCallInfo?);
        if ((v53 & 1) == 0) {
          goto LABEL_51;
        }
        goto LABEL_44;
      }
      outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoCallInfo?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoCallInfo?);
      outlined destroy of NCProtoContactInfo((uint64_t)v16, type metadata accessor for NCProtoCallInfo);
    }
    outlined destroy of NCProtoContactInfo?(v73, &demangling cache variable for type metadata for (NCProtoCallInfo?, NCProtoCallInfo?));
    goto LABEL_51;
  }
  return v28 & 1;
}

uint64_t specialized static NCProtoContactInfo.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v28 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*((void *)a1 + 4) == *((void *)a2 + 4) && *((void *)a1 + 5) == *((void *)a2 + 5)
        || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (*((void *)a1 + 6) == *((void *)a2 + 6) && *((void *)a1 + 7) == *((void *)a2 + 7)
          || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          if (*((void *)a1 + 8) == *((void *)a2 + 8) && *((void *)a1 + 9) == *((void *)a2 + 9)
            || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
          {
            if (*((void *)a1 + 10) == *((void *)a2 + 10) && *((void *)a1 + 11) == *((void *)a2 + 11)
              || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
            {
              if (specialized static Data.== infix(_:_:)(*((void *)a1 + 12), *((void *)a1 + 13), *((void *)a2 + 12), *((void *)a2 + 13)))
              {
                uint64_t v14 = (int *)type metadata accessor for NCProtoContactInfo(0);
                uint64_t v15 = v14[12];
                uint64_t v16 = &a1[v15];
                uint64_t v17 = *(void *)&a1[v15 + 8];
                uint64_t v18 = &a2[v15];
                uint64_t v19 = *((void *)v18 + 1);
                if (v17)
                {
                  if (!v19) {
                    goto LABEL_38;
                  }
                  if (*(void *)v16 != *(void *)v18 || v17 != v19)
                  {
                    char v12 = 0;
                    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                      return v12 & 1;
                    }
                  }
                }
                else if (v19)
                {
                  goto LABEL_38;
                }
                uint64_t v20 = v14[13];
                uint64_t v21 = &a1[v20];
                uint64_t v22 = *(void *)&a1[v20 + 8];
                uint64_t v23 = &a2[v20];
                uint64_t v24 = *((void *)v23 + 1);
                if (v22)
                {
                  if (v24)
                  {
                    if (*(void *)v21 != *(void *)v23 || v22 != v24)
                    {
                      char v12 = 0;
                      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                        return v12 & 1;
                      }
                    }
LABEL_40:
                    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
                    v26(v10, &a1[v14[11]], v4);
                    v26(v8, &a2[v14[11]], v4);
                    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
                    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
                    uint64_t v27 = *(void (**)(char *, uint64_t))(v5 + 8);
                    v27(v8, v4);
                    v27(v10, v4);
                    return v12 & 1;
                  }
                }
                else if (!v24)
                {
                  goto LABEL_40;
                }
              }
LABEL_38:
              char v12 = 0;
            }
          }
        }
      }
    }
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoJoinEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if ((specialized static Data.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) != 0
    && (specialized static Data.== infix(_:_:)(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) != 0&& (specialized static Dictionary<>.== infix(_:_:)(*(void *)(a1 + 32), *(void *)(a2 + 32)) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for NCProtoJoinEvent(0);
    char v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 28), v4);
    v12(v8, a2 + *(int *)(v11 + 28), v4);
    lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static NCProtoCallState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = (int *)type metadata accessor for NCProtoCallState(0);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2) {
      goto LABEL_32;
    }
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_32;
  }
  uint64_t v15 = v11[6];
  int v16 = *(unsigned __int8 *)(a1 + v15);
  int v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2) {
      goto LABEL_32;
    }
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_32;
  }
  uint64_t v18 = v11[7];
  uint64_t v19 = (uint64_t *)(a1 + v18);
  char v20 = *(unsigned char *)(a1 + v18 + 9);
  uint64_t v21 = (uint64_t *)(a2 + v18);
  if (v20)
  {
    if ((*((unsigned char *)v21 + 9) & 1) == 0) {
      goto LABEL_32;
    }
  }
  else
  {
    if (*((unsigned char *)v21 + 9)) {
      goto LABEL_32;
    }
    uint64_t v22 = *v19;
    uint64_t v23 = *v21;
    if (v21[1])
    {
      switch(v23)
      {
        case 1:
          if (v22 == 1) {
            goto LABEL_26;
          }
          goto LABEL_32;
        case 2:
          if (v22 == 2) {
            goto LABEL_26;
          }
          goto LABEL_32;
        case 3:
          if (v22 == 3) {
            goto LABEL_26;
          }
          goto LABEL_32;
        default:
          if (!v22) {
            goto LABEL_26;
          }
          goto LABEL_32;
      }
    }
    if (v22 != v23) {
      goto LABEL_32;
    }
  }
LABEL_26:
  uint64_t v24 = v11[8];
  int v25 = *(unsigned __int8 *)(a1 + v24);
  int v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 == 2) {
      goto LABEL_31;
    }
LABEL_32:
    char v28 = 0;
    return v28 & 1;
  }
  if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0) {
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v27(v10, a1, v4);
  v27(v8, a2, v4);
  lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v5 + 8);
  v29(v8, v4);
  v29(v10, v4);
  return v28 & 1;
}

uint64_t specialized static NCProtoCallInfo.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v70 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v69 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v68 = (char *)&v65 - v7;
  uint64_t v8 = type metadata accessor for NCProtoSenderIdentity(0);
  uint64_t v71 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoSenderIdentity?, NCProtoSenderIdentity?));
  MEMORY[0x270FA5388](v11);
  uint64_t v72 = (uint64_t)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  int v16 = (uint64_t *)((char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v65 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v65 - v20;
  uint64_t v22 = (int *)type metadata accessor for NCProtoCallInfo(0);
  uint64_t v23 = v22[6];
  uint64_t v24 = (uint64_t *)((char *)a1 + v23);
  uint64_t v25 = *(uint64_t *)((char *)a1 + v23 + 8);
  int v26 = (uint64_t *)((char *)a2 + v23);
  uint64_t v27 = v26[1];
  if (!v25)
  {
    uint64_t v67 = v4;
    if (v27) {
      goto LABEL_47;
    }
    goto LABEL_8;
  }
  if (!v27) {
    goto LABEL_47;
  }
  uint64_t v67 = v4;
  if (*v24 == *v26 && v25 == v27 || (char v28 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_8:
    uint64_t v29 = v22[7];
    uint64_t v30 = (uint64_t *)((char *)a1 + v29);
    uint64_t v31 = *(uint64_t *)((char *)a1 + v29 + 8);
    uint64_t v32 = (uint64_t *)((char *)a2 + v29);
    uint64_t v33 = v32[1];
    if (v31)
    {
      if (!v33) {
        goto LABEL_47;
      }
      if (*v30 != *v32 || v31 != v33)
      {
        char v28 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return v28 & 1;
        }
      }
    }
    else if (v33)
    {
      goto LABEL_47;
    }
    uint64_t v34 = v22[8];
    uint64_t v35 = (uint64_t *)((char *)a1 + v34);
    uint64_t v36 = *(uint64_t *)((char *)a1 + v34 + 8);
    uint64_t v37 = (uint64_t *)((char *)a2 + v34);
    uint64_t v38 = v37[1];
    if (v36)
    {
      if (!v38) {
        goto LABEL_47;
      }
      if (*v35 != *v37 || v36 != v38)
      {
        char v28 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return v28 & 1;
        }
      }
    }
    else if (v38)
    {
      goto LABEL_47;
    }
    uint64_t v39 = v22[9];
    int v40 = *((unsigned __int8 *)a1 + v39);
    int v41 = *((unsigned __int8 *)a2 + v39);
    if (v40 == 2)
    {
      if (v41 != 2) {
        goto LABEL_47;
      }
    }
    else if (v41 == 2 || ((((v41 & 1) == 0) ^ v40) & 1) == 0)
    {
      goto LABEL_47;
    }
    if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) == 0)
    {
LABEL_47:
      char v28 = 0;
      return v28 & 1;
    }
    outlined init with copy of NCProtoContactInfo?((uint64_t)a1 + v22[10], (uint64_t)v21, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
    outlined init with copy of NCProtoContactInfo?((uint64_t)a2 + v22[10], (uint64_t)v19, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
    uint64_t v42 = *(int *)(v11 + 48);
    uint64_t v43 = v72;
    uint64_t v44 = v72 + v42;
    outlined init with copy of NCProtoContactInfo?((uint64_t)v21, v72, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
    uint64_t v66 = v44;
    outlined init with copy of NCProtoContactInfo?((uint64_t)v19, v44, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
    uint64_t v71 = *(void *)(v71 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v71)(v43, 1, v8) == 1)
    {
      outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v71)(v66, 1, v8) == 1)
      {
        outlined destroy of NCProtoContactInfo?(v72, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
LABEL_42:
        uint64_t v49 = v22[11];
        uint64_t v50 = *(uint64_t *)((char *)a1 + v49);
        unint64_t v51 = *(uint64_t *)((char *)a1 + v49 + 8);
        uint64_t v52 = (uint64_t *)((char *)a2 + v49);
        uint64_t v53 = *v52;
        unint64_t v54 = v52[1];
        if (v51 >> 60 == 15)
        {
          if (v54 >> 60 == 15) {
            goto LABEL_51;
          }
          goto LABEL_46;
        }
        if (v54 >> 60 == 15)
        {
LABEL_46:
          outlined copy of Data?(v50, v51);
          outlined copy of Data?(v53, v54);
          outlined consume of Data?(v50, v51);
          outlined consume of Data?(v53, v54);
          goto LABEL_47;
        }
        outlined copy of Data?(v50, v51);
        outlined copy of Data?(v53, v54);
        char v56 = specialized static Data.== infix(_:_:)(v50, v51, v53, v54);
        outlined consume of Data?(v53, v54);
        outlined consume of Data?(v50, v51);
        if (v56)
        {
LABEL_51:
          int v57 = (char *)a1 + v22[5];
          uint64_t v58 = v70;
          int v59 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
          uint64_t v60 = v67;
          uint64_t v61 = v68;
          v59(v68, v57, v67);
          uint64_t v62 = (char *)a2 + v22[5];
          uint64_t v63 = v69;
          v59(v69, v62, v60);
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
          char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v64 = *(void (**)(char *, uint64_t))(v58 + 8);
          v64(v63, v60);
          v64(v61, v60);
          return v28 & 1;
        }
        goto LABEL_47;
      }
    }
    else
    {
      outlined init with copy of NCProtoContactInfo?(v43, (uint64_t)v16, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
      uint64_t v45 = v66;
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v71)(v66, 1, v8) != 1)
      {
        outlined init with take of NCProtoContactInfo(v45, (uint64_t)v10, type metadata accessor for NCProtoSenderIdentity);
        if (*v16 == *v10 && v16[1] == v10[1] || (_stringCompareWithSmolCheck(_:_:expecting:)())
          && (v16[2] == v10[2] && v16[3] == v10[3] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
          char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoSenderIdentity);
          outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
          outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
          outlined destroy of NCProtoContactInfo((uint64_t)v16, type metadata accessor for NCProtoSenderIdentity);
          outlined destroy of NCProtoContactInfo?(v72, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
          if ((v48 & 1) == 0) {
            goto LABEL_47;
          }
          goto LABEL_42;
        }
        outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoSenderIdentity);
        outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
        outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
        outlined destroy of NCProtoContactInfo((uint64_t)v16, type metadata accessor for NCProtoSenderIdentity);
        uint64_t v47 = v72;
        uint64_t v46 = &demangling cache variable for type metadata for NCProtoSenderIdentity?;
LABEL_34:
        outlined destroy of NCProtoContactInfo?(v47, v46);
        goto LABEL_47;
      }
      outlined destroy of NCProtoContactInfo?((uint64_t)v19, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
      outlined destroy of NCProtoContactInfo?((uint64_t)v21, &demangling cache variable for type metadata for NCProtoSenderIdentity?);
      outlined destroy of NCProtoContactInfo((uint64_t)v16, type metadata accessor for NCProtoSenderIdentity);
    }
    uint64_t v46 = &demangling cache variable for type metadata for (NCProtoSenderIdentity?, NCProtoSenderIdentity?);
    uint64_t v47 = v72;
    goto LABEL_34;
  }
  return v28 & 1;
}

uint64_t specialized static NCProtoIDSProxyMessage.RawData.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v17 - v9;
  if ((specialized static Data.== infix(_:_:)(*a1, a1[1], *a2, a2[1]) & 1) == 0) {
    goto LABEL_9;
  }
  BOOL v11 = a1[2] == a2[2] && a1[3] == a2[3];
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (specialized static Dictionary<>.== infix(_:_:)(a1[4], a2[4]))
    {
      uint64_t v13 = type metadata accessor for NCProtoIDSProxyMessage.RawData(0);
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v14(v10, (char *)a1 + *(int *)(v13 + 28), v4);
      v14(v8, (char *)a2 + *(int *)(v13 + 28), v4);
      lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      v15(v10, v4);
      return v12 & 1;
    }
LABEL_9:
    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t specialized static NCProtoIDSProxyMessage.OneOf_Message.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for NCProtoIDSProxyMessage.Resource(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v34 = (uint64_t *)((char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (unsigned __int8 *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NCProtoIDSProxyMessage.RawData(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (unsigned __int8 *)&v34 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (uint64_t *)((char *)&v34 - v18);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NCProtoIDSProxyMessage.OneOf_Message, NCProtoIDSProxyMessage.OneOf_Message));
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (uint64_t)&v23[*(int *)(v21 + 56)];
  outlined init with copy of NCProtoContactInfo(a1, (uint64_t)v23, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  outlined init with copy of NCProtoContactInfo(v35, v24, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of NCProtoContactInfo((uint64_t)v23, (uint64_t)v17, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of NCProtoContactInfo(v24, (uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
        char v26 = specialized static NCProtoIDSProxyMessage.GroupUpdate.== infix(_:_:)(v17, v7);
        uint64_t v27 = type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate;
        outlined destroy of NCProtoContactInfo((uint64_t)v7, type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
        uint64_t v28 = (uint64_t)v17;
LABEL_9:
        uint64_t v32 = v27;
LABEL_14:
        outlined destroy of NCProtoContactInfo(v28, v32);
        outlined destroy of NCProtoContactInfo((uint64_t)v23, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
        return v26 & 1;
      }
      uint64_t v29 = type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate;
      uint64_t v30 = (uint64_t)v17;
    }
    else
    {
      outlined init with copy of NCProtoContactInfo((uint64_t)v23, (uint64_t)v14, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v31 = v34;
        outlined init with take of NCProtoContactInfo(v24, (uint64_t)v34, type metadata accessor for NCProtoIDSProxyMessage.Resource);
        char v26 = specialized static NCProtoIDSProxyMessage.Resource.== infix(_:_:)(v14, v31);
        uint64_t v27 = type metadata accessor for NCProtoIDSProxyMessage.Resource;
        outlined destroy of NCProtoContactInfo((uint64_t)v31, type metadata accessor for NCProtoIDSProxyMessage.Resource);
        uint64_t v28 = (uint64_t)v14;
        goto LABEL_9;
      }
      uint64_t v29 = type metadata accessor for NCProtoIDSProxyMessage.Resource;
      uint64_t v30 = (uint64_t)v14;
    }
  }
  else
  {
    outlined init with copy of NCProtoContactInfo((uint64_t)v23, (uint64_t)v19, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of NCProtoContactInfo(v24, (uint64_t)v10, type metadata accessor for NCProtoIDSProxyMessage.RawData);
      char v26 = specialized static NCProtoIDSProxyMessage.RawData.== infix(_:_:)(v19, v10);
      outlined destroy of NCProtoContactInfo((uint64_t)v10, type metadata accessor for NCProtoIDSProxyMessage.RawData);
      uint64_t v28 = (uint64_t)v19;
      uint64_t v32 = type metadata accessor for NCProtoIDSProxyMessage.RawData;
      goto LABEL_14;
    }
    uint64_t v29 = type metadata accessor for NCProtoIDSProxyMessage.RawData;
    uint64_t v30 = (uint64_t)v19;
  }
  outlined destroy of NCProtoContactInfo(v30, v29);
  outlined destroy of NCProtoContactInfo?((uint64_t)v23, &demangling cache variable for type metadata for (NCProtoIDSProxyMessage.OneOf_Message, NCProtoIDSProxyMessage.OneOf_Message));
  char v26 = 0;
  return v26 & 1;
}

uint64_t type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoIDSProxyMessage.ParticipantIDList);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType()
{
  unint64_t result = lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType;
  if (!lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType;
  if (!lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType;
  if (!lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType;
  if (!lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym.AnonymType and conformance NCProtoContactHandleAnonym.AnonymType);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType()
{
  unint64_t result = lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType;
  if (!lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType;
  if (!lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType;
  if (!lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType;
  if (!lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement.SuggestionType and conformance NCProtoSuggestionAdvertisement.SuggestionType);
  }
  return result;
}

uint64_t type metadata accessor for NCProtoLagunaConnectionResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoLagunaConnectionResponse);
}

uint64_t type metadata accessor for NCProtoDeviceLaunchedEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoDeviceLaunchedEvent);
}

uint64_t type metadata accessor for NCProtoTVLaunchedEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoTVLaunchedEvent);
}

uint64_t type metadata accessor for NCProtoEndLagunaSessionEvent(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoEndLagunaSessionEvent);
}

unint64_t lazy protocol witness table accessor for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext()
{
  unint64_t result = lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext;
  if (!lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext;
  if (!lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext;
  if (!lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext;
  if (!lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoAddMemberRequest.NearbyConversationPullContext and conformance NCProtoAddMemberRequest.NearbyConversationPullContext);
  }
  return result;
}

uint64_t type metadata accessor for NCProtoPullLagunaSessionToTVResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoPullLagunaSessionToTVResponse);
}

uint64_t type metadata accessor for NCProtoTransferActiveConversationResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoTransferActiveConversationResponse);
}

uint64_t type metadata accessor for NCProtoTransferContinuityCallResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoTransferContinuityCallResponse);
}

unint64_t lazy protocol witness table accessor for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType()
{
  unint64_t result = lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType;
  if (!lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType;
  if (!lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType;
  if (!lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType;
  if (!lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest.RecentCallFetchType and conformance NCProtoStartLagunaSessionRequest.RecentCallFetchType);
  }
  return result;
}

uint64_t type metadata accessor for NCProtoStartConversationResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoStartConversationResponse);
}

uint64_t type metadata accessor for NCProtoJoinActiveConversationResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoJoinActiveConversationResponse);
}

uint64_t type metadata accessor for NCProtoLinkConversationSendLetMeInResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoLinkConversationSendLetMeInResponse);
}

uint64_t type metadata accessor for NCProtoLinkConversationCancelResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoLinkConversationCancelResponse);
}

uint64_t type metadata accessor for NCProtoDeclineContinuityCallResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoDeclineContinuityCallResponse);
}

uint64_t type metadata accessor for NCProtoGetAddressableContactsRequest(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoGetAddressableContactsRequest);
}

uint64_t type metadata accessor for NCProtoAddConversationParticipantsResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoAddConversationParticipantsResponse);
}

uint64_t type metadata accessor for NCProtoPrepareTransferResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoPrepareTransferResponse);
}

uint64_t type metadata accessor for NCProtoAudioRouteTransferResponse(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NCProtoAudioRouteTransferResponse);
}

uint64_t type metadata accessor for NCProtoContactInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType()
{
  unint64_t result = lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType;
  if (!lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType;
  if (!lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType;
  if (!lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType;
  if (!lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo.MemberAssociationType and conformance NCProtoMemberAssociationPrimaryInfo.MemberAssociationType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode()
{
  unint64_t result = lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode;
  if (!lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode;
  if (!lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode;
  if (!lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode;
  if (!lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationAVMode and conformance NCProtoConversationAVMode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoConversationAVMode()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoConversationAVMode] and conformance [A], &demangling cache variable for type metadata for [NCProtoConversationAVMode]);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NCProtoConversationState and conformance NCProtoConversationState()
{
  unint64_t result = lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState;
  if (!lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState;
  if (!lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState;
  if (!lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState;
  if (!lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationState and conformance NCProtoConversationState);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoConversationState()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoConversationState] and conformance [A], &demangling cache variable for type metadata for [NCProtoConversationState]);
}

unint64_t lazy protocol witness table accessor for type NCProtoConversationLetMeInRequestState and conformance NCProtoConversationLetMeInRequestState()
{
  unint64_t result = lazy protocol witness table cache variable for type NCProtoConversationLetMeInRequestState and conformance NCProtoConversationLetMeInRequestState;
  if (!lazy protocol witness table cache variable for type NCProtoConversationLetMeInRequestState and conformance NCProtoConversationLetMeInRequestState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationLetMeInRequestState and conformance NCProtoConversationLetMeInRequestState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoConversationLetMeInRequestState and conformance NCProtoConversationLetMeInRequestState;
  if (!lazy protocol witness table cache variable for type NCProtoConversationLetMeInRequestState and conformance NCProtoConversationLetMeInRequestState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationLetMeInRequestState and conformance NCProtoConversationLetMeInRequestState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoConversationLetMeInRequestState and conformance NCProtoConversationLetMeInRequestState;
  if (!lazy protocol witness table cache variable for type NCProtoConversationLetMeInRequestState and conformance NCProtoConversationLetMeInRequestState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationLetMeInRequestState and conformance NCProtoConversationLetMeInRequestState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoConversationLetMeInRequestState and conformance NCProtoConversationLetMeInRequestState;
  if (!lazy protocol witness table cache variable for type NCProtoConversationLetMeInRequestState and conformance NCProtoConversationLetMeInRequestState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoConversationLetMeInRequestState and conformance NCProtoConversationLetMeInRequestState);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoConversationLetMeInRequestState()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoConversationLetMeInRequestState] and conformance [A], &demangling cache variable for type metadata for [NCProtoConversationLetMeInRequestState]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoContactHandleAnonym.AnonymType()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoContactHandleAnonym.AnonymType] and conformance [A], &demangling cache variable for type metadata for [NCProtoContactHandleAnonym.AnonymType]);
}

unint64_t lazy protocol witness table accessor for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status()
{
  unint64_t result = lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status;
  if (!lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status;
  if (!lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status;
  if (!lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status;
  if (!lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoContinuityCall.Status and conformance NCProtoContinuityCall.Status);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoContinuityCall.Status()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoContinuityCall.Status] and conformance [A], &demangling cache variable for type metadata for [NCProtoContinuityCall.Status]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoSuggestionAdvertisement.SuggestionType()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoSuggestionAdvertisement.SuggestionType] and conformance [A], &demangling cache variable for type metadata for [NCProtoSuggestionAdvertisement.SuggestionType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoAddMemberRequest.NearbyConversationPullContext()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoAddMemberRequest.NearbyConversationPullContext] and conformance [A], &demangling cache variable for type metadata for [NCProtoAddMemberRequest.NearbyConversationPullContext]);
}

unint64_t lazy protocol witness table accessor for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason()
{
  unint64_t result = lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason;
  if (!lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason;
  if (!lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason;
  if (!lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason;
  if (!lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest.Reason and conformance NCProtoPullLagunaSessionToTVRequest.Reason);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoPullLagunaSessionToTVRequest.Reason()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoPullLagunaSessionToTVRequest.Reason] and conformance [A], &demangling cache variable for type metadata for [NCProtoPullLagunaSessionToTVRequest.Reason]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoStartLagunaSessionRequest.RecentCallFetchType()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoStartLagunaSessionRequest.RecentCallFetchType] and conformance [A], &demangling cache variable for type metadata for [NCProtoStartLagunaSessionRequest.RecentCallFetchType]);
}

unint64_t lazy protocol witness table accessor for type NCProtoGetDestinationCapabilitiesRequest.DestinationType and conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType()
{
  unint64_t result = lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest.DestinationType and conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType;
  if (!lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest.DestinationType and conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest.DestinationType and conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest.DestinationType and conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType;
  if (!lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest.DestinationType and conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest.DestinationType and conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest.DestinationType and conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType;
  if (!lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest.DestinationType and conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest.DestinationType and conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest.DestinationType and conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType;
  if (!lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest.DestinationType and conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest.DestinationType and conformance NCProtoGetDestinationCapabilitiesRequest.DestinationType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoGetDestinationCapabilitiesRequest.DestinationType()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoGetDestinationCapabilitiesRequest.DestinationType] and conformance [A], &demangling cache variable for type metadata for [NCProtoGetDestinationCapabilitiesRequest.DestinationType]);
}

unint64_t lazy protocol witness table accessor for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType()
{
  unint64_t result = lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType;
  if (!lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType;
  if (!lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType;
  if (!lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType;
  if (!lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest.ConversationHandoffType and conformance NCProtoDeviceTokenRequest.ConversationHandoffType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoDeviceTokenRequest.ConversationHandoffType()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoDeviceTokenRequest.ConversationHandoffType] and conformance [A], &demangling cache variable for type metadata for [NCProtoDeviceTokenRequest.ConversationHandoffType]);
}

unint64_t lazy protocol witness table accessor for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason()
{
  unint64_t result = lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason;
  if (!lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason;
  if (!lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason;
  if (!lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason;
  if (!lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NCProtoDisconnectRequest.DisconnectReason and conformance NCProtoDisconnectRequest.DisconnectReason);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoDisconnectRequest.DisconnectReason()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoDisconnectRequest.DisconnectReason] and conformance [A], &demangling cache variable for type metadata for [NCProtoDisconnectRequest.DisconnectReason]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in NCProtoMemberAssociationPrimaryInfo.MemberAssociationType()
{
  return lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](&lazy protocol witness table cache variable for type [NCProtoMemberAssociationPrimaryInfo.MemberAssociationType] and conformance [A], &demangling cache variable for type metadata for [NCProtoMemberAssociationPrimaryInfo.MemberAssociationType]);
}

uint64_t lazy protocol witness table accessor for type [NCProtoConversationAVMode] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoContactInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo);
}

uint64_t base witness table accessor for Message in NCProtoContactInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo);
}

uint64_t base witness table accessor for Hashable in NCProtoContactInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo);
}

uint64_t base witness table accessor for Equatable in NCProtoContactInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactInfo and conformance NCProtoContactInfo, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoContactHandleAnonym()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, (void (*)(uint64_t))type metadata accessor for NCProtoContactHandleAnonym);
}

uint64_t base witness table accessor for Message in NCProtoContactHandleAnonym()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, (void (*)(uint64_t))type metadata accessor for NCProtoContactHandleAnonym);
}

uint64_t base witness table accessor for Hashable in NCProtoContactHandleAnonym()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, (void (*)(uint64_t))type metadata accessor for NCProtoContactHandleAnonym);
}

uint64_t base witness table accessor for Equatable in NCProtoContactHandleAnonym()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactHandleAnonym and conformance NCProtoContactHandleAnonym, (void (*)(uint64_t))type metadata accessor for NCProtoContactHandleAnonym);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoContinuityFavorite()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityFavorite);
}

uint64_t base witness table accessor for Message in NCProtoContinuityFavorite()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityFavorite);
}

uint64_t base witness table accessor for Hashable in NCProtoContinuityFavorite()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityFavorite);
}

uint64_t base witness table accessor for Equatable in NCProtoContinuityFavorite()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityFavorite and conformance NCProtoContinuityFavorite, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityFavorite);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoAddressableContact()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, (void (*)(uint64_t))type metadata accessor for NCProtoAddressableContact);
}

uint64_t base witness table accessor for Message in NCProtoAddressableContact()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, (void (*)(uint64_t))type metadata accessor for NCProtoAddressableContact);
}

uint64_t base witness table accessor for Hashable in NCProtoAddressableContact()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, (void (*)(uint64_t))type metadata accessor for NCProtoAddressableContact);
}

uint64_t base witness table accessor for Equatable in NCProtoAddressableContact()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddressableContact and conformance NCProtoAddressableContact, (void (*)(uint64_t))type metadata accessor for NCProtoAddressableContact);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoActiveConversation()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversation);
}

uint64_t base witness table accessor for Message in NCProtoActiveConversation()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversation);
}

uint64_t base witness table accessor for Hashable in NCProtoActiveConversation()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversation);
}

uint64_t base witness table accessor for Equatable in NCProtoActiveConversation()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversation and conformance NCProtoActiveConversation, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversation);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoContinuityCall()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCall);
}

uint64_t base witness table accessor for Message in NCProtoContinuityCall()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCall);
}

uint64_t base witness table accessor for Hashable in NCProtoContinuityCall()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCall);
}

uint64_t base witness table accessor for Equatable in NCProtoContinuityCall()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCall and conformance NCProtoContinuityCall, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCall);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoStartedSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartedSessionEvent and conformance NCProtoStartedSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoStartedSessionEvent);
}

uint64_t base witness table accessor for Message in NCProtoStartedSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartedSessionEvent and conformance NCProtoStartedSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoStartedSessionEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoStartedSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartedSessionEvent and conformance NCProtoStartedSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoStartedSessionEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoStartedSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartedSessionEvent and conformance NCProtoStartedSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoStartedSessionEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoEndedSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndedSessionEvent and conformance NCProtoEndedSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoEndedSessionEvent);
}

uint64_t base witness table accessor for Message in NCProtoEndedSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndedSessionEvent and conformance NCProtoEndedSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoEndedSessionEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoEndedSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndedSessionEvent and conformance NCProtoEndedSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoEndedSessionEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoEndedSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndedSessionEvent and conformance NCProtoEndedSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoEndedSessionEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoPendingConversationDisconnectedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPendingConversationDisconnectedEvent and conformance NCProtoPendingConversationDisconnectedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoPendingConversationDisconnectedEvent);
}

uint64_t base witness table accessor for Message in NCProtoPendingConversationDisconnectedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPendingConversationDisconnectedEvent and conformance NCProtoPendingConversationDisconnectedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoPendingConversationDisconnectedEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoPendingConversationDisconnectedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPendingConversationDisconnectedEvent and conformance NCProtoPendingConversationDisconnectedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoPendingConversationDisconnectedEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoPendingConversationDisconnectedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPendingConversationDisconnectedEvent and conformance NCProtoPendingConversationDisconnectedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoPendingConversationDisconnectedEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoContactUpdateEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactUpdateEvent and conformance NCProtoContactUpdateEvent, (void (*)(uint64_t))type metadata accessor for NCProtoContactUpdateEvent);
}

uint64_t base witness table accessor for Message in NCProtoContactUpdateEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactUpdateEvent and conformance NCProtoContactUpdateEvent, (void (*)(uint64_t))type metadata accessor for NCProtoContactUpdateEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoContactUpdateEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactUpdateEvent and conformance NCProtoContactUpdateEvent, (void (*)(uint64_t))type metadata accessor for NCProtoContactUpdateEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoContactUpdateEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContactUpdateEvent and conformance NCProtoContactUpdateEvent, (void (*)(uint64_t))type metadata accessor for NCProtoContactUpdateEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoJoinEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinEvent and conformance NCProtoJoinEvent, (void (*)(uint64_t))type metadata accessor for NCProtoJoinEvent);
}

uint64_t base witness table accessor for Message in NCProtoJoinEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinEvent and conformance NCProtoJoinEvent, (void (*)(uint64_t))type metadata accessor for NCProtoJoinEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoJoinEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinEvent and conformance NCProtoJoinEvent, (void (*)(uint64_t))type metadata accessor for NCProtoJoinEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoJoinEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinEvent and conformance NCProtoJoinEvent, (void (*)(uint64_t))type metadata accessor for NCProtoJoinEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoRecentCallsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoRecentCallsDidChangeEvent and conformance NCProtoRecentCallsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoRecentCallsDidChangeEvent);
}

uint64_t base witness table accessor for Message in NCProtoRecentCallsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoRecentCallsDidChangeEvent and conformance NCProtoRecentCallsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoRecentCallsDidChangeEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoRecentCallsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoRecentCallsDidChangeEvent and conformance NCProtoRecentCallsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoRecentCallsDidChangeEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoRecentCallsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoRecentCallsDidChangeEvent and conformance NCProtoRecentCallsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoRecentCallsDidChangeEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoFavoritesDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoFavoritesDidChangeEvent and conformance NCProtoFavoritesDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoFavoritesDidChangeEvent);
}

uint64_t base witness table accessor for Message in NCProtoFavoritesDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoFavoritesDidChangeEvent and conformance NCProtoFavoritesDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoFavoritesDidChangeEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoFavoritesDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoFavoritesDidChangeEvent and conformance NCProtoFavoritesDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoFavoritesDidChangeEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoFavoritesDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoFavoritesDidChangeEvent and conformance NCProtoFavoritesDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoFavoritesDidChangeEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoActiveConversationsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversationsDidChangeEvent and conformance NCProtoActiveConversationsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversationsDidChangeEvent);
}

uint64_t base witness table accessor for Message in NCProtoActiveConversationsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversationsDidChangeEvent and conformance NCProtoActiveConversationsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversationsDidChangeEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoActiveConversationsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversationsDidChangeEvent and conformance NCProtoActiveConversationsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversationsDidChangeEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoActiveConversationsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoActiveConversationsDidChangeEvent and conformance NCProtoActiveConversationsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoActiveConversationsDidChangeEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoContinuityCallsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCallsDidChangeEvent and conformance NCProtoContinuityCallsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCallsDidChangeEvent);
}

uint64_t base witness table accessor for Message in NCProtoContinuityCallsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCallsDidChangeEvent and conformance NCProtoContinuityCallsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCallsDidChangeEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoContinuityCallsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCallsDidChangeEvent and conformance NCProtoContinuityCallsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCallsDidChangeEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoContinuityCallsDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoContinuityCallsDidChangeEvent and conformance NCProtoContinuityCallsDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoContinuityCallsDidChangeEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoSuggestionAdvertisement()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, (void (*)(uint64_t))type metadata accessor for NCProtoSuggestionAdvertisement);
}

uint64_t base witness table accessor for Message in NCProtoSuggestionAdvertisement()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, (void (*)(uint64_t))type metadata accessor for NCProtoSuggestionAdvertisement);
}

uint64_t base witness table accessor for Hashable in NCProtoSuggestionAdvertisement()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, (void (*)(uint64_t))type metadata accessor for NCProtoSuggestionAdvertisement);
}

uint64_t base witness table accessor for Equatable in NCProtoSuggestionAdvertisement()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisement and conformance NCProtoSuggestionAdvertisement, (void (*)(uint64_t))type metadata accessor for NCProtoSuggestionAdvertisement);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoSuggestionAdvertisementDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisementDidChangeEvent and conformance NCProtoSuggestionAdvertisementDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent);
}

uint64_t base witness table accessor for Message in NCProtoSuggestionAdvertisementDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisementDidChangeEvent and conformance NCProtoSuggestionAdvertisementDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoSuggestionAdvertisementDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisementDidChangeEvent and conformance NCProtoSuggestionAdvertisementDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoSuggestionAdvertisementDidChangeEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSuggestionAdvertisementDidChangeEvent and conformance NCProtoSuggestionAdvertisementDidChangeEvent, (void (*)(uint64_t))type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoLagunaConnectionRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionRequest and conformance NCProtoLagunaConnectionRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLagunaConnectionRequest);
}

uint64_t base witness table accessor for Message in NCProtoLagunaConnectionRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionRequest and conformance NCProtoLagunaConnectionRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLagunaConnectionRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoLagunaConnectionRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionRequest and conformance NCProtoLagunaConnectionRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLagunaConnectionRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoLagunaConnectionRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionRequest and conformance NCProtoLagunaConnectionRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLagunaConnectionRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoLagunaConnectionResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionResponse and conformance NCProtoLagunaConnectionResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLagunaConnectionResponse);
}

uint64_t base witness table accessor for Message in NCProtoLagunaConnectionResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionResponse and conformance NCProtoLagunaConnectionResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLagunaConnectionResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoLagunaConnectionResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionResponse and conformance NCProtoLagunaConnectionResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLagunaConnectionResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoLagunaConnectionResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLagunaConnectionResponse and conformance NCProtoLagunaConnectionResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLagunaConnectionResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoDeviceLaunchedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceLaunchedEvent and conformance NCProtoDeviceLaunchedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceLaunchedEvent);
}

uint64_t base witness table accessor for Message in NCProtoDeviceLaunchedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceLaunchedEvent and conformance NCProtoDeviceLaunchedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceLaunchedEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoDeviceLaunchedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceLaunchedEvent and conformance NCProtoDeviceLaunchedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceLaunchedEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoDeviceLaunchedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceLaunchedEvent and conformance NCProtoDeviceLaunchedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceLaunchedEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoTVLaunchedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTVLaunchedEvent and conformance NCProtoTVLaunchedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoTVLaunchedEvent);
}

uint64_t base witness table accessor for Message in NCProtoTVLaunchedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTVLaunchedEvent and conformance NCProtoTVLaunchedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoTVLaunchedEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoTVLaunchedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTVLaunchedEvent and conformance NCProtoTVLaunchedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoTVLaunchedEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoTVLaunchedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTVLaunchedEvent and conformance NCProtoTVLaunchedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoTVLaunchedEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoCancelAddMemberEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCancelAddMemberEvent and conformance NCProtoCancelAddMemberEvent, (void (*)(uint64_t))type metadata accessor for NCProtoCancelAddMemberEvent);
}

uint64_t base witness table accessor for Message in NCProtoCancelAddMemberEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCancelAddMemberEvent and conformance NCProtoCancelAddMemberEvent, (void (*)(uint64_t))type metadata accessor for NCProtoCancelAddMemberEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoCancelAddMemberEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCancelAddMemberEvent and conformance NCProtoCancelAddMemberEvent, (void (*)(uint64_t))type metadata accessor for NCProtoCancelAddMemberEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoCancelAddMemberEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCancelAddMemberEvent and conformance NCProtoCancelAddMemberEvent, (void (*)(uint64_t))type metadata accessor for NCProtoCancelAddMemberEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoEndLagunaSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndLagunaSessionEvent and conformance NCProtoEndLagunaSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoEndLagunaSessionEvent);
}

uint64_t base witness table accessor for Message in NCProtoEndLagunaSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndLagunaSessionEvent and conformance NCProtoEndLagunaSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoEndLagunaSessionEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoEndLagunaSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndLagunaSessionEvent and conformance NCProtoEndLagunaSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoEndLagunaSessionEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoEndLagunaSessionEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoEndLagunaSessionEvent and conformance NCProtoEndLagunaSessionEvent, (void (*)(uint64_t))type metadata accessor for NCProtoEndLagunaSessionEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoPolicyInfoUpdatedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPolicyInfoUpdatedEvent and conformance NCProtoPolicyInfoUpdatedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoPolicyInfoUpdatedEvent);
}

uint64_t base witness table accessor for Message in NCProtoPolicyInfoUpdatedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPolicyInfoUpdatedEvent and conformance NCProtoPolicyInfoUpdatedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoPolicyInfoUpdatedEvent);
}

uint64_t base witness table accessor for Hashable in NCProtoPolicyInfoUpdatedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPolicyInfoUpdatedEvent and conformance NCProtoPolicyInfoUpdatedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoPolicyInfoUpdatedEvent);
}

uint64_t base witness table accessor for Equatable in NCProtoPolicyInfoUpdatedEvent()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPolicyInfoUpdatedEvent and conformance NCProtoPolicyInfoUpdatedEvent, (void (*)(uint64_t))type metadata accessor for NCProtoPolicyInfoUpdatedEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoAddMemberRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberRequest and conformance NCProtoAddMemberRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAddMemberRequest);
}

uint64_t base witness table accessor for Message in NCProtoAddMemberRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberRequest and conformance NCProtoAddMemberRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAddMemberRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoAddMemberRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberRequest and conformance NCProtoAddMemberRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAddMemberRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoAddMemberRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberRequest and conformance NCProtoAddMemberRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAddMemberRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoAddMemberResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberResponse and conformance NCProtoAddMemberResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAddMemberResponse);
}

uint64_t base witness table accessor for Message in NCProtoAddMemberResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberResponse and conformance NCProtoAddMemberResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAddMemberResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoAddMemberResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberResponse and conformance NCProtoAddMemberResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAddMemberResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoAddMemberResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddMemberResponse and conformance NCProtoAddMemberResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAddMemberResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoPullLagunaSessionToTVRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest and conformance NCProtoPullLagunaSessionToTVRequest, (void (*)(uint64_t))type metadata accessor for NCProtoPullLagunaSessionToTVRequest);
}

uint64_t base witness table accessor for Message in NCProtoPullLagunaSessionToTVRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest and conformance NCProtoPullLagunaSessionToTVRequest, (void (*)(uint64_t))type metadata accessor for NCProtoPullLagunaSessionToTVRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoPullLagunaSessionToTVRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest and conformance NCProtoPullLagunaSessionToTVRequest, (void (*)(uint64_t))type metadata accessor for NCProtoPullLagunaSessionToTVRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoPullLagunaSessionToTVRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVRequest and conformance NCProtoPullLagunaSessionToTVRequest, (void (*)(uint64_t))type metadata accessor for NCProtoPullLagunaSessionToTVRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoPullLagunaSessionToTVResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVResponse and conformance NCProtoPullLagunaSessionToTVResponse, (void (*)(uint64_t))type metadata accessor for NCProtoPullLagunaSessionToTVResponse);
}

uint64_t base witness table accessor for Message in NCProtoPullLagunaSessionToTVResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVResponse and conformance NCProtoPullLagunaSessionToTVResponse, (void (*)(uint64_t))type metadata accessor for NCProtoPullLagunaSessionToTVResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoPullLagunaSessionToTVResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVResponse and conformance NCProtoPullLagunaSessionToTVResponse, (void (*)(uint64_t))type metadata accessor for NCProtoPullLagunaSessionToTVResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoPullLagunaSessionToTVResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPullLagunaSessionToTVResponse and conformance NCProtoPullLagunaSessionToTVResponse, (void (*)(uint64_t))type metadata accessor for NCProtoPullLagunaSessionToTVResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoTransferActiveConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationRequest and conformance NCProtoTransferActiveConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t base witness table accessor for Message in NCProtoTransferActiveConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationRequest and conformance NCProtoTransferActiveConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoTransferActiveConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationRequest and conformance NCProtoTransferActiveConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoTransferActiveConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationRequest and conformance NCProtoTransferActiveConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoTransferActiveConversationRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoTransferActiveConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationResponse and conformance NCProtoTransferActiveConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoTransferActiveConversationResponse);
}

uint64_t base witness table accessor for Message in NCProtoTransferActiveConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationResponse and conformance NCProtoTransferActiveConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoTransferActiveConversationResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoTransferActiveConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationResponse and conformance NCProtoTransferActiveConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoTransferActiveConversationResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoTransferActiveConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferActiveConversationResponse and conformance NCProtoTransferActiveConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoTransferActiveConversationResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoTransferContinuityCallRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferContinuityCallRequest and conformance NCProtoTransferContinuityCallRequest, (void (*)(uint64_t))type metadata accessor for NCProtoTransferContinuityCallRequest);
}

uint64_t base witness table accessor for Message in NCProtoTransferContinuityCallRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferContinuityCallRequest and conformance NCProtoTransferContinuityCallRequest, (void (*)(uint64_t))type metadata accessor for NCProtoTransferContinuityCallRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoTransferContinuityCallRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferContinuityCallRequest and conformance NCProtoTransferContinuityCallRequest, (void (*)(uint64_t))type metadata accessor for NCProtoTransferContinuityCallRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoTransferContinuityCallRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferContinuityCallRequest and conformance NCProtoTransferContinuityCallRequest, (void (*)(uint64_t))type metadata accessor for NCProtoTransferContinuityCallRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoTransferContinuityCallResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferContinuityCallResponse and conformance NCProtoTransferContinuityCallResponse, (void (*)(uint64_t))type metadata accessor for NCProtoTransferContinuityCallResponse);
}

uint64_t base witness table accessor for Message in NCProtoTransferContinuityCallResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferContinuityCallResponse and conformance NCProtoTransferContinuityCallResponse, (void (*)(uint64_t))type metadata accessor for NCProtoTransferContinuityCallResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoTransferContinuityCallResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferContinuityCallResponse and conformance NCProtoTransferContinuityCallResponse, (void (*)(uint64_t))type metadata accessor for NCProtoTransferContinuityCallResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoTransferContinuityCallResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoTransferContinuityCallResponse and conformance NCProtoTransferContinuityCallResponse, (void (*)(uint64_t))type metadata accessor for NCProtoTransferContinuityCallResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoStartLagunaSessionRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest and conformance NCProtoStartLagunaSessionRequest, (void (*)(uint64_t))type metadata accessor for NCProtoStartLagunaSessionRequest);
}

uint64_t base witness table accessor for Message in NCProtoStartLagunaSessionRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest and conformance NCProtoStartLagunaSessionRequest, (void (*)(uint64_t))type metadata accessor for NCProtoStartLagunaSessionRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoStartLagunaSessionRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest and conformance NCProtoStartLagunaSessionRequest, (void (*)(uint64_t))type metadata accessor for NCProtoStartLagunaSessionRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoStartLagunaSessionRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionRequest and conformance NCProtoStartLagunaSessionRequest, (void (*)(uint64_t))type metadata accessor for NCProtoStartLagunaSessionRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoSenderIdentity()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSenderIdentity and conformance NCProtoSenderIdentity, (void (*)(uint64_t))type metadata accessor for NCProtoSenderIdentity);
}

uint64_t base witness table accessor for Message in NCProtoSenderIdentity()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSenderIdentity and conformance NCProtoSenderIdentity, (void (*)(uint64_t))type metadata accessor for NCProtoSenderIdentity);
}

uint64_t base witness table accessor for Hashable in NCProtoSenderIdentity()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSenderIdentity and conformance NCProtoSenderIdentity, (void (*)(uint64_t))type metadata accessor for NCProtoSenderIdentity);
}

uint64_t base witness table accessor for Equatable in NCProtoSenderIdentity()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoSenderIdentity and conformance NCProtoSenderIdentity, (void (*)(uint64_t))type metadata accessor for NCProtoSenderIdentity);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoCallInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, (void (*)(uint64_t))type metadata accessor for NCProtoCallInfo);
}

uint64_t base witness table accessor for Message in NCProtoCallInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, (void (*)(uint64_t))type metadata accessor for NCProtoCallInfo);
}

uint64_t base witness table accessor for Hashable in NCProtoCallInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, (void (*)(uint64_t))type metadata accessor for NCProtoCallInfo);
}

uint64_t base witness table accessor for Equatable in NCProtoCallInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallInfo and conformance NCProtoCallInfo, (void (*)(uint64_t))type metadata accessor for NCProtoCallInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoStartLagunaSessionResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionResponse and conformance NCProtoStartLagunaSessionResponse, (void (*)(uint64_t))type metadata accessor for NCProtoStartLagunaSessionResponse);
}

uint64_t base witness table accessor for Message in NCProtoStartLagunaSessionResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionResponse and conformance NCProtoStartLagunaSessionResponse, (void (*)(uint64_t))type metadata accessor for NCProtoStartLagunaSessionResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoStartLagunaSessionResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionResponse and conformance NCProtoStartLagunaSessionResponse, (void (*)(uint64_t))type metadata accessor for NCProtoStartLagunaSessionResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoStartLagunaSessionResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartLagunaSessionResponse and conformance NCProtoStartLagunaSessionResponse, (void (*)(uint64_t))type metadata accessor for NCProtoStartLagunaSessionResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoStartConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationRequest and conformance NCProtoStartConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoStartConversationRequest);
}

uint64_t base witness table accessor for Message in NCProtoStartConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationRequest and conformance NCProtoStartConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoStartConversationRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoStartConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationRequest and conformance NCProtoStartConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoStartConversationRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoStartConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationRequest and conformance NCProtoStartConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoStartConversationRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoStartConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationResponse and conformance NCProtoStartConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoStartConversationResponse);
}

uint64_t base witness table accessor for Message in NCProtoStartConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationResponse and conformance NCProtoStartConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoStartConversationResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoStartConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationResponse and conformance NCProtoStartConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoStartConversationResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoStartConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoStartConversationResponse and conformance NCProtoStartConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoStartConversationResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoJoinActiveConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationRequest and conformance NCProtoJoinActiveConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t base witness table accessor for Message in NCProtoJoinActiveConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationRequest and conformance NCProtoJoinActiveConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoJoinActiveConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationRequest and conformance NCProtoJoinActiveConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoJoinActiveConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationRequest and conformance NCProtoJoinActiveConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoJoinActiveConversationRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoJoinActiveConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationResponse and conformance NCProtoJoinActiveConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoJoinActiveConversationResponse);
}

uint64_t base witness table accessor for Message in NCProtoJoinActiveConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationResponse and conformance NCProtoJoinActiveConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoJoinActiveConversationResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoJoinActiveConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationResponse and conformance NCProtoJoinActiveConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoJoinActiveConversationResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoJoinActiveConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoJoinActiveConversationResponse and conformance NCProtoJoinActiveConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoJoinActiveConversationResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoCreateLinkConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCreateLinkConversationRequest and conformance NCProtoCreateLinkConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoCreateLinkConversationRequest);
}

uint64_t base witness table accessor for Message in NCProtoCreateLinkConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCreateLinkConversationRequest and conformance NCProtoCreateLinkConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoCreateLinkConversationRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoCreateLinkConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCreateLinkConversationRequest and conformance NCProtoCreateLinkConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoCreateLinkConversationRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoCreateLinkConversationRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCreateLinkConversationRequest and conformance NCProtoCreateLinkConversationRequest, (void (*)(uint64_t))type metadata accessor for NCProtoCreateLinkConversationRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoCreateLinkConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCreateLinkConversationResponse and conformance NCProtoCreateLinkConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoCreateLinkConversationResponse);
}

uint64_t base witness table accessor for Message in NCProtoCreateLinkConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCreateLinkConversationResponse and conformance NCProtoCreateLinkConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoCreateLinkConversationResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoCreateLinkConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCreateLinkConversationResponse and conformance NCProtoCreateLinkConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoCreateLinkConversationResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoCreateLinkConversationResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCreateLinkConversationResponse and conformance NCProtoCreateLinkConversationResponse, (void (*)(uint64_t))type metadata accessor for NCProtoCreateLinkConversationResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoLinkConversationSendLetMeInRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationSendLetMeInRequest and conformance NCProtoLinkConversationSendLetMeInRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationSendLetMeInRequest);
}

uint64_t base witness table accessor for Message in NCProtoLinkConversationSendLetMeInRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationSendLetMeInRequest and conformance NCProtoLinkConversationSendLetMeInRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationSendLetMeInRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoLinkConversationSendLetMeInRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationSendLetMeInRequest and conformance NCProtoLinkConversationSendLetMeInRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationSendLetMeInRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoLinkConversationSendLetMeInRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationSendLetMeInRequest and conformance NCProtoLinkConversationSendLetMeInRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationSendLetMeInRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoLinkConversationSendLetMeInResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationSendLetMeInResponse and conformance NCProtoLinkConversationSendLetMeInResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationSendLetMeInResponse);
}

uint64_t base witness table accessor for Message in NCProtoLinkConversationSendLetMeInResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationSendLetMeInResponse and conformance NCProtoLinkConversationSendLetMeInResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationSendLetMeInResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoLinkConversationSendLetMeInResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationSendLetMeInResponse and conformance NCProtoLinkConversationSendLetMeInResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationSendLetMeInResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoLinkConversationSendLetMeInResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationSendLetMeInResponse and conformance NCProtoLinkConversationSendLetMeInResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationSendLetMeInResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoLinkConversationCancelRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationCancelRequest and conformance NCProtoLinkConversationCancelRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationCancelRequest);
}

uint64_t base witness table accessor for Message in NCProtoLinkConversationCancelRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationCancelRequest and conformance NCProtoLinkConversationCancelRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationCancelRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoLinkConversationCancelRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationCancelRequest and conformance NCProtoLinkConversationCancelRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationCancelRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoLinkConversationCancelRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationCancelRequest and conformance NCProtoLinkConversationCancelRequest, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationCancelRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoLinkConversationCancelResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationCancelResponse and conformance NCProtoLinkConversationCancelResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationCancelResponse);
}

uint64_t base witness table accessor for Message in NCProtoLinkConversationCancelResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationCancelResponse and conformance NCProtoLinkConversationCancelResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationCancelResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoLinkConversationCancelResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationCancelResponse and conformance NCProtoLinkConversationCancelResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationCancelResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoLinkConversationCancelResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoLinkConversationCancelResponse and conformance NCProtoLinkConversationCancelResponse, (void (*)(uint64_t))type metadata accessor for NCProtoLinkConversationCancelResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoDeclineContinuityCallRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallRequest and conformance NCProtoDeclineContinuityCallRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDeclineContinuityCallRequest);
}

uint64_t base witness table accessor for Message in NCProtoDeclineContinuityCallRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallRequest and conformance NCProtoDeclineContinuityCallRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDeclineContinuityCallRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoDeclineContinuityCallRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallRequest and conformance NCProtoDeclineContinuityCallRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDeclineContinuityCallRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoDeclineContinuityCallRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallRequest and conformance NCProtoDeclineContinuityCallRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDeclineContinuityCallRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoDeclineContinuityCallResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallResponse and conformance NCProtoDeclineContinuityCallResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDeclineContinuityCallResponse);
}

uint64_t base witness table accessor for Message in NCProtoDeclineContinuityCallResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallResponse and conformance NCProtoDeclineContinuityCallResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDeclineContinuityCallResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoDeclineContinuityCallResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallResponse and conformance NCProtoDeclineContinuityCallResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDeclineContinuityCallResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoDeclineContinuityCallResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeclineContinuityCallResponse and conformance NCProtoDeclineContinuityCallResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDeclineContinuityCallResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoGetAddressableContactsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsRequest and conformance NCProtoGetAddressableContactsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetAddressableContactsRequest);
}

uint64_t base witness table accessor for Message in NCProtoGetAddressableContactsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsRequest and conformance NCProtoGetAddressableContactsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetAddressableContactsRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoGetAddressableContactsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsRequest and conformance NCProtoGetAddressableContactsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetAddressableContactsRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoGetAddressableContactsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsRequest and conformance NCProtoGetAddressableContactsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetAddressableContactsRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoGetAddressableContactsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsResponse and conformance NCProtoGetAddressableContactsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetAddressableContactsResponse);
}

uint64_t base witness table accessor for Message in NCProtoGetAddressableContactsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsResponse and conformance NCProtoGetAddressableContactsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetAddressableContactsResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoGetAddressableContactsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsResponse and conformance NCProtoGetAddressableContactsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetAddressableContactsResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoGetAddressableContactsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetAddressableContactsResponse and conformance NCProtoGetAddressableContactsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetAddressableContactsResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoGetImageForContactRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactRequest and conformance NCProtoGetImageForContactRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetImageForContactRequest);
}

uint64_t base witness table accessor for Message in NCProtoGetImageForContactRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactRequest and conformance NCProtoGetImageForContactRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetImageForContactRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoGetImageForContactRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactRequest and conformance NCProtoGetImageForContactRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetImageForContactRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoGetImageForContactRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactRequest and conformance NCProtoGetImageForContactRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetImageForContactRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoGetImageForContactResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactResponse and conformance NCProtoGetImageForContactResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetImageForContactResponse);
}

uint64_t base witness table accessor for Message in NCProtoGetImageForContactResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactResponse and conformance NCProtoGetImageForContactResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetImageForContactResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoGetImageForContactResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactResponse and conformance NCProtoGetImageForContactResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetImageForContactResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoGetImageForContactResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetImageForContactResponse and conformance NCProtoGetImageForContactResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetImageForContactResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoAddConversationParticipantsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsRequest and conformance NCProtoAddConversationParticipantsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAddConversationParticipantsRequest);
}

uint64_t base witness table accessor for Message in NCProtoAddConversationParticipantsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsRequest and conformance NCProtoAddConversationParticipantsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAddConversationParticipantsRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoAddConversationParticipantsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsRequest and conformance NCProtoAddConversationParticipantsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAddConversationParticipantsRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoAddConversationParticipantsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsRequest and conformance NCProtoAddConversationParticipantsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAddConversationParticipantsRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoAddConversationParticipantsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsResponse and conformance NCProtoAddConversationParticipantsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAddConversationParticipantsResponse);
}

uint64_t base witness table accessor for Message in NCProtoAddConversationParticipantsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsResponse and conformance NCProtoAddConversationParticipantsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAddConversationParticipantsResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoAddConversationParticipantsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsResponse and conformance NCProtoAddConversationParticipantsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAddConversationParticipantsResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoAddConversationParticipantsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAddConversationParticipantsResponse and conformance NCProtoAddConversationParticipantsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAddConversationParticipantsResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoGetCallDisplayDetailsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsRequest and conformance NCProtoGetCallDisplayDetailsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetCallDisplayDetailsRequest);
}

uint64_t base witness table accessor for Message in NCProtoGetCallDisplayDetailsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsRequest and conformance NCProtoGetCallDisplayDetailsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetCallDisplayDetailsRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoGetCallDisplayDetailsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsRequest and conformance NCProtoGetCallDisplayDetailsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetCallDisplayDetailsRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoGetCallDisplayDetailsRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsRequest and conformance NCProtoGetCallDisplayDetailsRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetCallDisplayDetailsRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoGetCallDisplayDetailsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsResponse and conformance NCProtoGetCallDisplayDetailsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetCallDisplayDetailsResponse);
}

uint64_t base witness table accessor for Message in NCProtoGetCallDisplayDetailsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsResponse and conformance NCProtoGetCallDisplayDetailsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetCallDisplayDetailsResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoGetCallDisplayDetailsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsResponse and conformance NCProtoGetCallDisplayDetailsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetCallDisplayDetailsResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoGetCallDisplayDetailsResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetCallDisplayDetailsResponse and conformance NCProtoGetCallDisplayDetailsResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetCallDisplayDetailsResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoDestinationCapabilities()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDestinationCapabilities and conformance NCProtoDestinationCapabilities, (void (*)(uint64_t))type metadata accessor for NCProtoDestinationCapabilities);
}

uint64_t base witness table accessor for Message in NCProtoDestinationCapabilities()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDestinationCapabilities and conformance NCProtoDestinationCapabilities, (void (*)(uint64_t))type metadata accessor for NCProtoDestinationCapabilities);
}

uint64_t base witness table accessor for Hashable in NCProtoDestinationCapabilities()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDestinationCapabilities and conformance NCProtoDestinationCapabilities, (void (*)(uint64_t))type metadata accessor for NCProtoDestinationCapabilities);
}

uint64_t base witness table accessor for Equatable in NCProtoDestinationCapabilities()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDestinationCapabilities and conformance NCProtoDestinationCapabilities, (void (*)(uint64_t))type metadata accessor for NCProtoDestinationCapabilities);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoGetDestinationCapabilitiesRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest and conformance NCProtoGetDestinationCapabilitiesRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetDestinationCapabilitiesRequest);
}

uint64_t base witness table accessor for Message in NCProtoGetDestinationCapabilitiesRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest and conformance NCProtoGetDestinationCapabilitiesRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetDestinationCapabilitiesRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoGetDestinationCapabilitiesRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest and conformance NCProtoGetDestinationCapabilitiesRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetDestinationCapabilitiesRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoGetDestinationCapabilitiesRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesRequest and conformance NCProtoGetDestinationCapabilitiesRequest, (void (*)(uint64_t))type metadata accessor for NCProtoGetDestinationCapabilitiesRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoGetDestinationCapabilitiesResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesResponse and conformance NCProtoGetDestinationCapabilitiesResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetDestinationCapabilitiesResponse);
}

uint64_t base witness table accessor for Message in NCProtoGetDestinationCapabilitiesResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesResponse and conformance NCProtoGetDestinationCapabilitiesResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetDestinationCapabilitiesResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoGetDestinationCapabilitiesResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesResponse and conformance NCProtoGetDestinationCapabilitiesResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetDestinationCapabilitiesResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoGetDestinationCapabilitiesResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoGetDestinationCapabilitiesResponse and conformance NCProtoGetDestinationCapabilitiesResponse, (void (*)(uint64_t))type metadata accessor for NCProtoGetDestinationCapabilitiesResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoCallState()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, (void (*)(uint64_t))type metadata accessor for NCProtoCallState);
}

uint64_t base witness table accessor for Message in NCProtoCallState()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, (void (*)(uint64_t))type metadata accessor for NCProtoCallState);
}

uint64_t base witness table accessor for Hashable in NCProtoCallState()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, (void (*)(uint64_t))type metadata accessor for NCProtoCallState);
}

uint64_t base witness table accessor for Equatable in NCProtoCallState()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallState and conformance NCProtoCallState, (void (*)(uint64_t))type metadata accessor for NCProtoCallState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoCallStateRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateRequest and conformance NCProtoCallStateRequest, (void (*)(uint64_t))type metadata accessor for NCProtoCallStateRequest);
}

uint64_t base witness table accessor for Message in NCProtoCallStateRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateRequest and conformance NCProtoCallStateRequest, (void (*)(uint64_t))type metadata accessor for NCProtoCallStateRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoCallStateRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateRequest and conformance NCProtoCallStateRequest, (void (*)(uint64_t))type metadata accessor for NCProtoCallStateRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoCallStateRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateRequest and conformance NCProtoCallStateRequest, (void (*)(uint64_t))type metadata accessor for NCProtoCallStateRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoCallStateResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateResponse and conformance NCProtoCallStateResponse, (void (*)(uint64_t))type metadata accessor for NCProtoCallStateResponse);
}

uint64_t base witness table accessor for Message in NCProtoCallStateResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateResponse and conformance NCProtoCallStateResponse, (void (*)(uint64_t))type metadata accessor for NCProtoCallStateResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoCallStateResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateResponse and conformance NCProtoCallStateResponse, (void (*)(uint64_t))type metadata accessor for NCProtoCallStateResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoCallStateResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoCallStateResponse and conformance NCProtoCallStateResponse, (void (*)(uint64_t))type metadata accessor for NCProtoCallStateResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoDeviceTokenRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest and conformance NCProtoDeviceTokenRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceTokenRequest);
}

uint64_t base witness table accessor for Message in NCProtoDeviceTokenRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest and conformance NCProtoDeviceTokenRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceTokenRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoDeviceTokenRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest and conformance NCProtoDeviceTokenRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceTokenRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoDeviceTokenRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenRequest and conformance NCProtoDeviceTokenRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceTokenRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoDeviceTokenResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenResponse and conformance NCProtoDeviceTokenResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceTokenResponse);
}

uint64_t base witness table accessor for Message in NCProtoDeviceTokenResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenResponse and conformance NCProtoDeviceTokenResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceTokenResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoDeviceTokenResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenResponse and conformance NCProtoDeviceTokenResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceTokenResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoDeviceTokenResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDeviceTokenResponse and conformance NCProtoDeviceTokenResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDeviceTokenResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoDisconnectRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectRequest and conformance NCProtoDisconnectRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDisconnectRequest);
}

uint64_t base witness table accessor for Message in NCProtoDisconnectRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectRequest and conformance NCProtoDisconnectRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDisconnectRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoDisconnectRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectRequest and conformance NCProtoDisconnectRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDisconnectRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoDisconnectRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectRequest and conformance NCProtoDisconnectRequest, (void (*)(uint64_t))type metadata accessor for NCProtoDisconnectRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoDisconnectResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectResponse and conformance NCProtoDisconnectResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDisconnectResponse);
}

uint64_t base witness table accessor for Message in NCProtoDisconnectResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectResponse and conformance NCProtoDisconnectResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDisconnectResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoDisconnectResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectResponse and conformance NCProtoDisconnectResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDisconnectResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoDisconnectResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoDisconnectResponse and conformance NCProtoDisconnectResponse, (void (*)(uint64_t))type metadata accessor for NCProtoDisconnectResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoPrepareTransferRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferRequest and conformance NCProtoPrepareTransferRequest, (void (*)(uint64_t))type metadata accessor for NCProtoPrepareTransferRequest);
}

uint64_t base witness table accessor for Message in NCProtoPrepareTransferRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferRequest and conformance NCProtoPrepareTransferRequest, (void (*)(uint64_t))type metadata accessor for NCProtoPrepareTransferRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoPrepareTransferRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferRequest and conformance NCProtoPrepareTransferRequest, (void (*)(uint64_t))type metadata accessor for NCProtoPrepareTransferRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoPrepareTransferRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferRequest and conformance NCProtoPrepareTransferRequest, (void (*)(uint64_t))type metadata accessor for NCProtoPrepareTransferRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoPrepareTransferResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferResponse and conformance NCProtoPrepareTransferResponse, (void (*)(uint64_t))type metadata accessor for NCProtoPrepareTransferResponse);
}

uint64_t base witness table accessor for Message in NCProtoPrepareTransferResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferResponse and conformance NCProtoPrepareTransferResponse, (void (*)(uint64_t))type metadata accessor for NCProtoPrepareTransferResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoPrepareTransferResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferResponse and conformance NCProtoPrepareTransferResponse, (void (*)(uint64_t))type metadata accessor for NCProtoPrepareTransferResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoPrepareTransferResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoPrepareTransferResponse and conformance NCProtoPrepareTransferResponse, (void (*)(uint64_t))type metadata accessor for NCProtoPrepareTransferResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoAudioRouteTransferRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAudioRouteTransferRequest and conformance NCProtoAudioRouteTransferRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAudioRouteTransferRequest);
}

uint64_t base witness table accessor for Message in NCProtoAudioRouteTransferRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAudioRouteTransferRequest and conformance NCProtoAudioRouteTransferRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAudioRouteTransferRequest);
}

uint64_t base witness table accessor for Hashable in NCProtoAudioRouteTransferRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAudioRouteTransferRequest and conformance NCProtoAudioRouteTransferRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAudioRouteTransferRequest);
}

uint64_t base witness table accessor for Equatable in NCProtoAudioRouteTransferRequest()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAudioRouteTransferRequest and conformance NCProtoAudioRouteTransferRequest, (void (*)(uint64_t))type metadata accessor for NCProtoAudioRouteTransferRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoAudioRouteTransferResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAudioRouteTransferResponse and conformance NCProtoAudioRouteTransferResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAudioRouteTransferResponse);
}

uint64_t base witness table accessor for Message in NCProtoAudioRouteTransferResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAudioRouteTransferResponse and conformance NCProtoAudioRouteTransferResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAudioRouteTransferResponse);
}

uint64_t base witness table accessor for Hashable in NCProtoAudioRouteTransferResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAudioRouteTransferResponse and conformance NCProtoAudioRouteTransferResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAudioRouteTransferResponse);
}

uint64_t base witness table accessor for Equatable in NCProtoAudioRouteTransferResponse()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoAudioRouteTransferResponse and conformance NCProtoAudioRouteTransferResponse, (void (*)(uint64_t))type metadata accessor for NCProtoAudioRouteTransferResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoMemberAssociationPrimaryInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, (void (*)(uint64_t))type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t base witness table accessor for Message in NCProtoMemberAssociationPrimaryInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, (void (*)(uint64_t))type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t base witness table accessor for Hashable in NCProtoMemberAssociationPrimaryInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, (void (*)(uint64_t))type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t base witness table accessor for Equatable in NCProtoMemberAssociationPrimaryInfo()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoMemberAssociationPrimaryInfo and conformance NCProtoMemberAssociationPrimaryInfo, (void (*)(uint64_t))type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoIDSProxyMessage()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage and conformance NCProtoIDSProxyMessage, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage);
}

uint64_t base witness table accessor for Message in NCProtoIDSProxyMessage()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage and conformance NCProtoIDSProxyMessage, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage);
}

uint64_t base witness table accessor for Hashable in NCProtoIDSProxyMessage()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage and conformance NCProtoIDSProxyMessage, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage);
}

uint64_t base witness table accessor for Equatable in NCProtoIDSProxyMessage()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage and conformance NCProtoIDSProxyMessage, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoIDSProxyMessage.RawData()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.RawData);
}

uint64_t base witness table accessor for Message in NCProtoIDSProxyMessage.RawData()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.RawData);
}

uint64_t base witness table accessor for Hashable in NCProtoIDSProxyMessage.RawData()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.RawData);
}

uint64_t base witness table accessor for Equatable in NCProtoIDSProxyMessage.RawData()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.RawData and conformance NCProtoIDSProxyMessage.RawData, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.RawData);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoIDSProxyMessage.Resource()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.Resource);
}

uint64_t base witness table accessor for Message in NCProtoIDSProxyMessage.Resource()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.Resource);
}

uint64_t base witness table accessor for Hashable in NCProtoIDSProxyMessage.Resource()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.Resource);
}

uint64_t base witness table accessor for Equatable in NCProtoIDSProxyMessage.Resource()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.Resource and conformance NCProtoIDSProxyMessage.Resource, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.Resource);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoIDSProxyMessage.GroupUpdate()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
}

uint64_t base witness table accessor for Message in NCProtoIDSProxyMessage.GroupUpdate()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
}

uint64_t base witness table accessor for Hashable in NCProtoIDSProxyMessage.GroupUpdate()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
}

uint64_t base witness table accessor for Equatable in NCProtoIDSProxyMessage.GroupUpdate()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.GroupUpdate and conformance NCProtoIDSProxyMessage.GroupUpdate, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NCProtoIDSProxyMessage.ParticipantIDList()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
}

uint64_t base witness table accessor for Message in NCProtoIDSProxyMessage.ParticipantIDList()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
}

uint64_t base witness table accessor for Hashable in NCProtoIDSProxyMessage.ParticipantIDList()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
}

uint64_t base witness table accessor for Equatable in NCProtoIDSProxyMessage.ParticipantIDList()
{
  return lazy protocol witness table accessor for type NCProtoContactInfo and conformance NCProtoContactInfo(&lazy protocol witness table cache variable for type NCProtoIDSProxyMessage.ParticipantIDList and conformance NCProtoIDSProxyMessage.ParticipantIDList, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList);
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NCProtoConversationAVMode()
{
  return &type metadata for NCProtoConversationAVMode;
}

ValueMetadata *type metadata accessor for NCProtoConversationState()
{
  return &type metadata for NCProtoConversationState;
}

ValueMetadata *type metadata accessor for NCProtoConversationLetMeInRequestState()
{
  return &type metadata for NCProtoConversationLetMeInRequestState;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoContactInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    uint64_t v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    uint64_t v12 = a2[11];
    a1[10] = a2[10];
    a1[11] = v12;
    uint64_t v13 = a2[12];
    unint64_t v14 = a2[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v13, v14);
    a1[12] = v13;
    a1[13] = v14;
    uint64_t v15 = a3[11];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    uint64_t v19 = a3[12];
    uint64_t v20 = a3[13];
    uint64_t v21 = (uint64_t *)((char *)a1 + v19);
    uint64_t v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = (uint64_t *)((char *)a1 + v20);
    uint64_t v25 = (uint64_t *)((char *)a2 + v20);
    uint64_t v26 = v25[1];
    void *v24 = *v25;
    v24[1] = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for NCProtoContactInfo(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(a1 + 96), *(void *)(a1 + 104));
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for NCProtoContactInfo(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  uint64_t v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  uint64_t v11 = a2[11];
  a1[10] = a2[10];
  a1[11] = v11;
  uint64_t v12 = a2[12];
  unint64_t v13 = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v12, v13);
  a1[12] = v12;
  a1[13] = v13;
  uint64_t v14 = a3[11];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  uint64_t v18 = a3[12];
  uint64_t v19 = a3[13];
  uint64_t v20 = (void *)((char *)a1 + v18);
  uint64_t v21 = (void *)((char *)a2 + v18);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = (void *)((char *)a1 + v19);
  uint64_t v24 = (void *)((char *)a2 + v19);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for NCProtoContactInfo(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[12];
  unint64_t v7 = a2[13];
  outlined copy of Data._Representation(v6, v7);
  uint64_t v8 = a1[12];
  unint64_t v9 = a1[13];
  a1[12] = v6;
  a1[13] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = a3[11];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = a3[12];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  void *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[13];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for NCProtoContactInfo(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  long long v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v9 = a3[11];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  a1[6] = a2[6];
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  uint64_t v13 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  return a1;
}

void *assignWithTake for NCProtoContactInfo(void *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  a1[6] = *(void *)(a2 + 48);
  a1[7] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  a1[8] = *(void *)(a2 + 64);
  a1[9] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 88);
  a1[10] = *(void *)(a2 + 80);
  a1[11] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = a1[12];
  unint64_t v13 = a1[13];
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  outlined consume of Data._Representation(v12, v13);
  uint64_t v14 = a3[11];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
  uint64_t v18 = a3[12];
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *uint64_t v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[13];
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (uint64_t *)(a2 + v23);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  void *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoContactInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257419A4C);
}

uint64_t sub_257419A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoContactInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257419B10);
}

uint64_t sub_257419B10(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoContactInfo()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for NCProtoContactHandleAnonym(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v6 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v6;
    uint64_t v7 = a2[7];
    uint64_t v8 = *(int *)(a3 + 32);
    uint64_t v9 = (uint64_t)a2 + v8;
    uint64_t v10 = a1 + v8;
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v7;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
  }
  return v3;
}

uint64_t destroy for NCProtoContactHandleAnonym(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for NCProtoContactHandleAnonym(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a2 + v7;
  uint64_t v9 = a1 + v7;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

uint64_t assignWithCopy for NCProtoContactHandleAnonym(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for NCProtoContactHandleAnonym(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for NCProtoContactHandleAnonym(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoContactHandleAnonym(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25741A138);
}

uint64_t sub_25741A138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoContactHandleAnonym(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25741A1FC);
}

uint64_t sub_25741A1FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoContactHandleAnonym()
{
  return type metadata completion function for NCProtoContactHandleAnonym();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NCProtoContactHandleAnonym.AnonymType()
{
  return &type metadata for NCProtoContactHandleAnonym.AnonymType;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoContinuityFavorite(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v8 = a2[5];
    uint64_t v9 = a3[7];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    a1[4] = a2[4];
    a1[5] = v8;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(void, void, void))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v14 = v11;
    uint64_t v15 = v13;
    uint64_t v55 = v12;
    v13(v10, v14, v12);
    uint64_t v16 = a3[8];
    uint64_t v17 = (uint64_t *)((char *)v4 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = (int *)type metadata accessor for NCProtoContactInfo(0);
    uint64_t v20 = *((void *)v19 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v23 = v18[1];
      *uint64_t v17 = *v18;
      v17[1] = v23;
      uint64_t v24 = v18[3];
      v17[2] = v18[2];
      v17[3] = v24;
      uint64_t v53 = v20;
      unint64_t v54 = v15;
      uint64_t v25 = v18[5];
      v17[4] = v18[4];
      v17[5] = v25;
      uint64_t v26 = v18[7];
      v17[6] = v18[6];
      v17[7] = v26;
      uint64_t v27 = v18[9];
      v17[8] = v18[8];
      v17[9] = v27;
      uint64_t v28 = v18[11];
      v17[10] = v18[10];
      v17[11] = v28;
      uint64_t v52 = v18[12];
      unint64_t v51 = v18[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v15 = v54;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v52, v51);
      v17[12] = v52;
      v17[13] = v51;
      v54((char *)v17 + v19[11], (char *)v18 + v19[11], v55);
      uint64_t v29 = v19[12];
      uint64_t v30 = (void *)((char *)v17 + v29);
      uint64_t v31 = (void *)((char *)v18 + v29);
      uint64_t v32 = v31[1];
      *uint64_t v30 = *v31;
      v30[1] = v32;
      uint64_t v33 = v19[13];
      uint64_t v34 = (void *)((char *)v17 + v33);
      uint64_t v35 = (void *)((char *)v18 + v33);
      uint64_t v36 = v35[1];
      *uint64_t v34 = *v35;
      v34[1] = v36;
      uint64_t v37 = *(void (**)(void *, void, uint64_t, int *))(v53 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v17, 0, 1, v19);
    }
    uint64_t v38 = a3[9];
    uint64_t v39 = (uint64_t *)((char *)v4 + v38);
    int v40 = (uint64_t *)((char *)a2 + v38);
    uint64_t v41 = type metadata accessor for NCProtoContactHandleAnonym(0);
    uint64_t v42 = *(void *)(v41 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
      memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      uint64_t v44 = v40[1];
      *uint64_t v39 = *v40;
      v39[1] = v44;
      v39[2] = v40[2];
      *((unsigned char *)v39 + 24) = *((unsigned char *)v40 + 24);
      uint64_t v45 = v40[5];
      unsigned char v39[4] = v40[4];
      v39[5] = v45;
      uint64_t v46 = v40[7];
      v39[6] = v40[6];
      v39[7] = v46;
      uint64_t v47 = *(int *)(v41 + 32);
      char v48 = (char *)v39 + v47;
      uint64_t v49 = (char *)v40 + v47;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v15(v48, v49, v55);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
  }
  return v4;
}

uint64_t destroy for NCProtoContinuityFavorite(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[7];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + a2[8];
  uint64_t v7 = type metadata accessor for NCProtoContactInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(void *)(v6 + 96), *(void *)(v6 + 104));
    v12(v6 + *(int *)(v7 + 44), v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = a1 + a2[9];
  uint64_t v9 = type metadata accessor for NCProtoContactHandleAnonym(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v8 + *(int *)(v9 + 32);
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
  }
  return result;
}

void *initializeWithCopy for NCProtoContinuityFavorite(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = a1;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  uint64_t v9 = *(int *)(a3 + 28);
  char v56 = (char *)a1 + v9;
  uint64_t v10 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(void, void, void))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = v56;
  uint64_t v14 = v10;
  uint64_t v15 = v12;
  uint64_t v57 = v11;
  v12(v13, v14, v11);
  uint64_t v16 = *(int *)(v3 + 32);
  uint64_t v17 = (void *)((char *)v5 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v19 = (int *)type metadata accessor for NCProtoContactInfo(0);
  uint64_t v20 = *((void *)v19 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    uint64_t v22 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v22;
    uint64_t v23 = v18[3];
    v17[2] = v18[2];
    v17[3] = v23;
    unint64_t v54 = v5;
    uint64_t v55 = v15;
    uint64_t v24 = v18[5];
    v17[4] = v18[4];
    v17[5] = v24;
    uint64_t v25 = v18[7];
    v17[6] = v18[6];
    v17[7] = v25;
    uint64_t v52 = v20;
    uint64_t v53 = v3;
    uint64_t v26 = v18[9];
    v17[8] = v18[8];
    v17[9] = v26;
    uint64_t v27 = v18[11];
    v17[10] = v18[10];
    v17[11] = v27;
    uint64_t v28 = v18[12];
    unint64_t v51 = v18[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v15 = v55;
    swift_bridgeObjectRetain();
    uint64_t v5 = v54;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v28, v51);
    v17[12] = v28;
    v17[13] = v51;
    v55((char *)v17 + v19[11], (char *)v18 + v19[11], v57);
    uint64_t v29 = v19[12];
    uint64_t v30 = (void *)((char *)v17 + v29);
    uint64_t v31 = (void *)((char *)v18 + v29);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = v19[13];
    uint64_t v34 = (void *)((char *)v17 + v33);
    uint64_t v35 = (void *)((char *)v18 + v33);
    uint64_t v36 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v36;
    uint64_t v37 = *(void (**)(void *, void, uint64_t, int *))(v52 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = v53;
    swift_bridgeObjectRetain();
    v37(v17, 0, 1, v19);
  }
  uint64_t v38 = *(int *)(v3 + 36);
  uint64_t v39 = (void *)((char *)v5 + v38);
  int v40 = (void *)((char *)a2 + v38);
  uint64_t v41 = type metadata accessor for NCProtoContactHandleAnonym(0);
  uint64_t v42 = *(void *)(v41 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
    memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    uint64_t v44 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v44;
    v39[2] = v40[2];
    *((unsigned char *)v39 + 24) = *((unsigned char *)v40 + 24);
    uint64_t v45 = v40[5];
    unsigned char v39[4] = v40[4];
    v39[5] = v45;
    uint64_t v46 = v40[7];
    v39[6] = v40[6];
    v39[7] = v46;
    uint64_t v47 = *(int *)(v41 + 32);
    char v48 = (char *)v39 + v47;
    uint64_t v49 = (char *)v40 + v47;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v48, v49, v57);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  return v5;
}

void *assignWithCopy for NCProtoContinuityFavorite(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v55 = *(void *)(v9 - 8);
  uint64_t v56 = v9;
  unint64_t v54 = *(void (**)(char *, char *))(v55 + 24);
  v54(v7, v8);
  uint64_t v10 = a3[8];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = (int *)type metadata accessor for NCProtoContactInfo(0);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(void *)uint64_t v11 = *(void *)v12;
      *((void *)v11 + 1) = *((void *)v12 + 1);
      *((void *)v11 + 2) = *((void *)v12 + 2);
      *((void *)v11 + 3) = *((void *)v12 + 3);
      *((void *)v11 + 4) = *((void *)v12 + 4);
      *((void *)v11 + 5) = *((void *)v12 + 5);
      *((void *)v11 + 6) = *((void *)v12 + 6);
      *((void *)v11 + 7) = *((void *)v12 + 7);
      *((void *)v11 + 8) = *((void *)v12 + 8);
      *((void *)v11 + 9) = *((void *)v12 + 9);
      *((void *)v11 + 10) = *((void *)v12 + 10);
      *((void *)v11 + 11) = *((void *)v12 + 11);
      unint64_t v52 = *((void *)v12 + 13);
      uint64_t v53 = *((void *)v12 + 12);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v53, v52);
      *((void *)v11 + 12) = v53;
      *((void *)v11 + 13) = v52;
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(&v11[v13[11]], &v12[v13[11]], v56);
      uint64_t v18 = v13[12];
      uint64_t v19 = &v11[v18];
      uint64_t v20 = &v12[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      *((void *)v19 + 1) = *((void *)v20 + 1);
      uint64_t v21 = v13[13];
      uint64_t v22 = &v11[v21];
      uint64_t v23 = &v12[v21];
      *(void *)uint64_t v22 = *(void *)v23;
      *((void *)v22 + 1) = *((void *)v23 + 1);
      uint64_t v24 = *(void (**)(char *, void, uint64_t, int *))(v14 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v24(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of NCProtoContactInfo((uint64_t)v11, type metadata accessor for NCProtoContactInfo);
LABEL_6:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
    memcpy(v11, v12, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = *((void *)v12 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 2) = *((void *)v12 + 2);
  *((void *)v11 + 3) = *((void *)v12 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 4) = *((void *)v12 + 4);
  *((void *)v11 + 5) = *((void *)v12 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 6) = *((void *)v12 + 6);
  *((void *)v11 + 7) = *((void *)v12 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 8) = *((void *)v12 + 8);
  *((void *)v11 + 9) = *((void *)v12 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 10) = *((void *)v12 + 10);
  *((void *)v11 + 11) = *((void *)v12 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = *((void *)v12 + 12);
  unint64_t v42 = *((void *)v12 + 13);
  outlined copy of Data._Representation(v41, v42);
  uint64_t v43 = *((void *)v11 + 12);
  unint64_t v44 = *((void *)v11 + 13);
  *((void *)v11 + 12) = v41;
  *((void *)v11 + 13) = v42;
  outlined consume of Data._Representation(v43, v44);
  ((void (*)(char *, char *, uint64_t))v54)(&v11[v13[11]], &v12[v13[11]], v56);
  uint64_t v45 = v13[12];
  uint64_t v46 = &v11[v45];
  uint64_t v47 = &v12[v45];
  *(void *)uint64_t v46 = *(void *)v47;
  *((void *)v46 + 1) = *((void *)v47 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = v13[13];
  uint64_t v49 = &v11[v48];
  uint64_t v50 = &v12[v48];
  *(void *)uint64_t v49 = *(void *)v50;
  *((void *)v49 + 1) = *((void *)v50 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v26 = a3[9];
  uint64_t v27 = (uint64_t)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for NCProtoContactHandleAnonym(0);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
  int v32 = v31(v27, 1, v29);
  int v33 = v31((uint64_t)v28, 1, v29);
  if (!v32)
  {
    if (!v33)
    {
      *(void *)uint64_t v27 = *(void *)v28;
      *(void *)(v27 + 8) = *((void *)v28 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v51 = *((void *)v28 + 2);
      *(unsigned char *)(v27 + 24) = v28[24];
      *(void *)(v27 + 16) = v51;
      *(void *)(v27 + 32) = *((void *)v28 + 4);
      *(void *)(v27 + 40) = *((void *)v28 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v27 + 48) = *((void *)v28 + 6);
      *(void *)(v27 + 56) = *((void *)v28 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, char *, uint64_t))v54)(v27 + *(int *)(v29 + 32), &v28[*(int *)(v29 + 32)], v56);
      return a1;
    }
    outlined destroy of NCProtoContactInfo(v27, type metadata accessor for NCProtoContactHandleAnonym);
    goto LABEL_12;
  }
  if (v33)
  {
LABEL_12:
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
    memcpy((void *)v27, v28, *(void *)(*(void *)(v39 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v27 = *(void *)v28;
  *(void *)(v27 + 8) = *((void *)v28 + 1);
  uint64_t v34 = *((void *)v28 + 2);
  *(unsigned char *)(v27 + 24) = v28[24];
  *(void *)(v27 + 16) = v34;
  *(void *)(v27 + 32) = *((void *)v28 + 4);
  *(void *)(v27 + 40) = *((void *)v28 + 5);
  *(void *)(v27 + 48) = *((void *)v28 + 6);
  *(void *)(v27 + 56) = *((void *)v28 + 7);
  uint64_t v35 = *(int *)(v29 + 32);
  uint64_t v36 = v27 + v35;
  uint64_t v37 = &v28[v35];
  uint64_t v38 = *(void (**)(uint64_t, char *, uint64_t))(v55 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v38(v36, v37, v56);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  return a1;
}

_OWORD *initializeWithTake for NCProtoContinuityFavorite(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[7];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = a3[8];
  uint64_t v13 = (_OWORD *)((char *)a1 + v12);
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for NCProtoContactInfo(0);
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    long long v18 = v14[1];
    _OWORD *v13 = *v14;
    v13[1] = v18;
    long long v19 = v14[3];
    void v13[2] = v14[2];
    v13[3] = v19;
    long long v20 = v14[5];
    v13[4] = v14[4];
    v13[5] = v20;
    v13[6] = v14[6];
    v11((char *)v13 + v15[11], (char *)v14 + v15[11], v10);
    *(_OWORD *)((char *)v13 + v15[12]) = *(_OWORD *)((char *)v14 + v15[12]);
    *(_OWORD *)((char *)v13 + v15[13]) = *(_OWORD *)((char *)v14 + v15[13]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v21 = a3[9];
  uint64_t v22 = (_OWORD *)((char *)a1 + v21);
  uint64_t v23 = (_OWORD *)((char *)a2 + v21);
  uint64_t v24 = type metadata accessor for NCProtoContactHandleAnonym(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    *uint64_t v22 = *v23;
    *((void *)v22 + 2) = *((void *)v23 + 2);
    *((unsigned char *)v22 + 24) = *((unsigned char *)v23 + 24);
    long long v27 = v23[3];
    v22[2] = v23[2];
    v22[3] = v27;
    v11((char *)v22 + *(int *)(v24 + 32), (char *)v23 + *(int *)(v24 + 32), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return a1;
}

void *assignWithTake for NCProtoContinuityFavorite(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[7];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v58 = *(void *)(v12 - 8);
  uint64_t v59 = v12;
  uint64_t v57 = *(void (**)(char *, char *))(v58 + 40);
  v57(v10, v11);
  uint64_t v13 = a3[8];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = (int *)type metadata accessor for NCProtoContactInfo(0);
  uint64_t v17 = *((void *)v16 - 1);
  long long v18 = *(uint64_t (**)(char *, uint64_t, int *))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      long long v21 = *((_OWORD *)v15 + 1);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v21;
      long long v22 = *((_OWORD *)v15 + 3);
      *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
      *((_OWORD *)v14 + 3) = v22;
      long long v23 = *((_OWORD *)v15 + 5);
      *((_OWORD *)v14 + 4) = *((_OWORD *)v15 + 4);
      *((_OWORD *)v14 + 5) = v23;
      *((_OWORD *)v14 + 6) = *((_OWORD *)v15 + 6);
      (*(void (**)(char *, char *, uint64_t))(v58 + 32))(&v14[v16[11]], &v15[v16[11]], v59);
      *(_OWORD *)&v14[v16[12]] = *(_OWORD *)&v15[v16[12]];
      *(_OWORD *)&v14[v16[13]] = *(_OWORD *)&v15[v16[13]];
      (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    outlined destroy of NCProtoContactInfo((uint64_t)v14, type metadata accessor for NCProtoContactInfo);
LABEL_6:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
    memcpy(v14, v15, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v36 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v36;
  swift_bridgeObjectRelease();
  uint64_t v37 = *((void *)v15 + 3);
  *((void *)v14 + 2) = *((void *)v15 + 2);
  *((void *)v14 + 3) = v37;
  swift_bridgeObjectRelease();
  uint64_t v38 = *((void *)v15 + 5);
  *((void *)v14 + 4) = *((void *)v15 + 4);
  *((void *)v14 + 5) = v38;
  swift_bridgeObjectRelease();
  uint64_t v39 = *((void *)v15 + 7);
  *((void *)v14 + 6) = *((void *)v15 + 6);
  *((void *)v14 + 7) = v39;
  swift_bridgeObjectRelease();
  uint64_t v40 = *((void *)v15 + 9);
  *((void *)v14 + 8) = *((void *)v15 + 8);
  *((void *)v14 + 9) = v40;
  swift_bridgeObjectRelease();
  uint64_t v41 = *((void *)v15 + 11);
  *((void *)v14 + 10) = *((void *)v15 + 10);
  *((void *)v14 + 11) = v41;
  swift_bridgeObjectRelease();
  uint64_t v42 = *((void *)v14 + 12);
  unint64_t v43 = *((void *)v14 + 13);
  *((_OWORD *)v14 + 6) = *((_OWORD *)v15 + 6);
  outlined consume of Data._Representation(v42, v43);
  ((void (*)(char *, char *, uint64_t))v57)(&v14[v16[11]], &v15[v16[11]], v59);
  uint64_t v44 = v16[12];
  uint64_t v45 = &v14[v44];
  uint64_t v46 = &v15[v44];
  uint64_t v48 = *(void *)v46;
  uint64_t v47 = *((void *)v46 + 1);
  *(void *)uint64_t v45 = v48;
  *((void *)v45 + 1) = v47;
  swift_bridgeObjectRelease();
  uint64_t v49 = v16[13];
  uint64_t v50 = &v14[v49];
  uint64_t v51 = &v15[v49];
  uint64_t v53 = *(void *)v51;
  uint64_t v52 = *((void *)v51 + 1);
  *(void *)uint64_t v50 = v53;
  *((void *)v50 + 1) = v52;
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v25 = a3[9];
  uint64_t v26 = (uint64_t)a1 + v25;
  long long v27 = (char *)a2 + v25;
  uint64_t v28 = type metadata accessor for NCProtoContactHandleAnonym(0);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30((uint64_t)v27, 1, v28);
  if (!v31)
  {
    if (!v32)
    {
      uint64_t v54 = *((void *)v27 + 1);
      *(void *)uint64_t v26 = *(void *)v27;
      *(void *)(v26 + 8) = v54;
      swift_bridgeObjectRelease();
      *(void *)(v26 + 16) = *((void *)v27 + 2);
      *(unsigned char *)(v26 + 24) = v27[24];
      uint64_t v55 = *((void *)v27 + 5);
      *(void *)(v26 + 32) = *((void *)v27 + 4);
      *(void *)(v26 + 40) = v55;
      swift_bridgeObjectRelease();
      uint64_t v56 = *((void *)v27 + 7);
      *(void *)(v26 + 48) = *((void *)v27 + 6);
      *(void *)(v26 + 56) = v56;
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, char *, uint64_t))v57)(v26 + *(int *)(v28 + 32), &v27[*(int *)(v28 + 32)], v59);
      return a1;
    }
    outlined destroy of NCProtoContactInfo(v26, type metadata accessor for NCProtoContactHandleAnonym);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
    memcpy((void *)v26, v27, *(void *)(*(void *)(v34 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  *(void *)(v26 + 16) = *((void *)v27 + 2);
  *(unsigned char *)(v26 + 24) = v27[24];
  long long v33 = *((_OWORD *)v27 + 3);
  *(_OWORD *)(v26 + 32) = *((_OWORD *)v27 + 2);
  *(_OWORD *)(v26 + 48) = v33;
  (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v26 + *(int *)(v28 + 32), &v27[*(int *)(v28 + 32)], v59);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoContinuityFavorite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25741BA8C);
}

uint64_t sub_25741BA8C(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[7];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[9];

  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for NCProtoContinuityFavorite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25741BC20);
}

uint64_t sub_25741BC20(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[7];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactHandleAnonym?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[9];

  return v15(v17, a2, a2, v16);
}

void type metadata completion function for NCProtoContinuityFavorite()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for NCProtoContactInfo?(319, &lazy cache variable for type metadata for NCProtoContactInfo?, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo);
    if (v1 <= 0x3F)
    {
      type metadata accessor for NCProtoContactInfo?(319, &lazy cache variable for type metadata for NCProtoContactHandleAnonym?, (void (*)(uint64_t))type metadata accessor for NCProtoContactHandleAnonym);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for NCProtoContactInfo?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoAddressableContact(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 28);
    uint64_t v15 = (uint64_t *)((char *)v7 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = (int *)type metadata accessor for NCProtoContactInfo(0);
    uint64_t v18 = *((void *)v17 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v20 = v16[1];
      void *v15 = *v16;
      v15[1] = v20;
      uint64_t v38 = v13;
      uint64_t v39 = v18;
      uint64_t v21 = v16[3];
      v15[2] = v16[2];
      v15[3] = v21;
      uint64_t v22 = v16[5];
      v15[4] = v16[4];
      v15[5] = v22;
      uint64_t v23 = v16[7];
      v15[6] = v16[6];
      v15[7] = v23;
      uint64_t v24 = v16[9];
      v15[8] = v16[8];
      v15[9] = v24;
      uint64_t v25 = v16[11];
      v15[10] = v16[10];
      v15[11] = v25;
      unint64_t v36 = v16[13];
      uint64_t v37 = v16[12];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v37, v36);
      v15[12] = v37;
      v15[13] = v36;
      v38((char *)v15 + v17[11], (char *)v16 + v17[11], v12);
      uint64_t v26 = v17[12];
      long long v27 = (void *)((char *)v15 + v26);
      uint64_t v28 = (void *)((char *)v16 + v26);
      uint64_t v29 = v28[1];
      *long long v27 = *v28;
      v27[1] = v29;
      uint64_t v30 = v17[13];
      int v31 = (void *)((char *)v15 + v30);
      int v32 = (void *)((char *)v16 + v30);
      uint64_t v33 = v32[1];
      *int v31 = *v32;
      v31[1] = v33;
      uint64_t v34 = *(void (**)(void *, void, uint64_t, int *))(v39 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v34(v15, 0, 1, v17);
    }
  }
  return v7;
}

uint64_t destroy for NCProtoAddressableContact(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t v8 = type metadata accessor for NCProtoContactInfo(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(void *)(v7 + 96), *(void *)(v7 + 104));
    v6(v7 + *(int *)(v8 + 44), v5);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for NCProtoAddressableContact(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for NCProtoContactInfo(0);
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = v14[1];
    void *v13 = *v14;
    v13[1] = v18;
    unint64_t v36 = v11;
    uint64_t v37 = v16;
    uint64_t v19 = v14[3];
    void v13[2] = v14[2];
    v13[3] = v19;
    uint64_t v20 = v14[5];
    v13[4] = v14[4];
    v13[5] = v20;
    uint64_t v21 = v14[7];
    v13[6] = v14[6];
    v13[7] = v21;
    uint64_t v22 = v14[9];
    v13[8] = v14[8];
    v13[9] = v22;
    uint64_t v23 = v14[11];
    v13[10] = v14[10];
    v13[11] = v23;
    unint64_t v34 = v14[13];
    uint64_t v35 = v14[12];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v35, v34);
    v13[12] = v35;
    v13[13] = v34;
    v36((char *)v13 + v15[11], (char *)v14 + v15[11], v10);
    uint64_t v24 = v15[12];
    uint64_t v25 = (void *)((char *)v13 + v24);
    uint64_t v26 = (void *)((char *)v14 + v24);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = v15[13];
    uint64_t v29 = (void *)((char *)v13 + v28);
    uint64_t v30 = (void *)((char *)v14 + v28);
    uint64_t v31 = v30[1];
    *uint64_t v29 = *v30;
    v29[1] = v31;
    int v32 = *(void (**)(void *, void, uint64_t, int *))(v37 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32(v13, 0, 1, v15);
  }
  return a1;
}

void *assignWithCopy for NCProtoAddressableContact(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *))(v10 + 24);
  uint64_t v40 = v9;
  v11(v7, v8);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for NCProtoContactInfo(0);
  uint64_t v39 = *((void *)v15 - 1);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, int *))(v39 + 48);
  LODWORD(v8) = v16(v13, 1, v15);
  int v17 = v16(v14, 1, v15);
  if (!v8)
  {
    if (!v17)
    {
      void *v13 = *v14;
      v13[1] = v14[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      void v13[2] = v14[2];
      v13[3] = v14[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v13[4] = v14[4];
      v13[5] = v14[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v13[6] = v14[6];
      v13[7] = v14[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v13[8] = v14[8];
      v13[9] = v14[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v13[10] = v14[10];
      v13[11] = v14[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v28 = v14[12];
      unint64_t v29 = v14[13];
      outlined copy of Data._Representation(v28, v29);
      uint64_t v30 = v13[12];
      unint64_t v31 = v13[13];
      v13[12] = v28;
      v13[13] = v29;
      outlined consume of Data._Representation(v30, v31);
      ((void (*)(char *, char *, uint64_t))v11)((char *)v13 + v15[11], (char *)v14 + v15[11], v40);
      uint64_t v32 = v15[12];
      uint64_t v33 = (void *)((char *)v13 + v32);
      unint64_t v34 = (void *)((char *)v14 + v32);
      void *v33 = *v34;
      v33[1] = v34[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v35 = v15[13];
      unint64_t v36 = (void *)((char *)v13 + v35);
      uint64_t v37 = (void *)((char *)v14 + v35);
      *unint64_t v36 = *v37;
      v36[1] = v37[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v13, type metadata accessor for NCProtoContactInfo);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
    memcpy(v13, v14, *(void *)(*(void *)(v26 - 8) + 64));
    return a1;
  }
  void *v13 = *v14;
  v13[1] = v14[1];
  void v13[2] = v14[2];
  v13[3] = v14[3];
  v13[4] = v14[4];
  v13[5] = v14[5];
  v13[6] = v14[6];
  v13[7] = v14[7];
  v13[8] = v14[8];
  v13[9] = v14[9];
  v13[10] = v14[10];
  v13[11] = v14[11];
  uint64_t v18 = v14[12];
  unint64_t v38 = v14[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v18, v38);
  v13[12] = v18;
  v13[13] = v38;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v13 + v15[11], (char *)v14 + v15[11], v40);
  uint64_t v19 = v15[12];
  uint64_t v20 = (void *)((char *)v13 + v19);
  uint64_t v21 = (void *)((char *)v14 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  uint64_t v22 = v15[13];
  uint64_t v23 = (void *)((char *)v13 + v22);
  uint64_t v24 = (void *)((char *)v14 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  uint64_t v25 = *(void (**)(void *, void, uint64_t, int *))(v39 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25(v13, 0, 1, v15);
  return a1;
}

uint64_t initializeWithTake for NCProtoAddressableContact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for NCProtoContactInfo(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    _OWORD *v12 = *v13;
    v12[1] = v17;
    long long v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    long long v19 = v13[5];
    v12[4] = v13[4];
    v12[5] = v19;
    v12[6] = v13[6];
    v10((char *)v12 + v14[11], (char *)v13 + v14[11], v9);
    *(_OWORD *)((char *)v12 + v14[12]) = *(_OWORD *)((char *)v13 + v14[12]);
    *(_OWORD *)((char *)v12 + v14[13]) = *(_OWORD *)((char *)v13 + v14[13]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *assignWithTake for NCProtoAddressableContact(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v42 = *(void *)(v10 - 8);
  uint64_t v43 = v10;
  uint64_t v11 = *(void (**)(char *, char *))(v42 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for NCProtoContactInfo(0);
  uint64_t v16 = *((void *)v15 - 1);
  long long v17 = *(uint64_t (**)(_OWORD *, uint64_t, int *))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v9)
  {
    if (!v18)
    {
      uint64_t v24 = *((void *)v14 + 1);
      void *v13 = *(void *)v14;
      v13[1] = v24;
      swift_bridgeObjectRelease();
      uint64_t v25 = *((void *)v14 + 3);
      void v13[2] = *((void *)v14 + 2);
      v13[3] = v25;
      swift_bridgeObjectRelease();
      uint64_t v26 = *((void *)v14 + 5);
      v13[4] = *((void *)v14 + 4);
      v13[5] = v26;
      swift_bridgeObjectRelease();
      uint64_t v27 = *((void *)v14 + 7);
      v13[6] = *((void *)v14 + 6);
      v13[7] = v27;
      swift_bridgeObjectRelease();
      uint64_t v28 = *((void *)v14 + 9);
      v13[8] = *((void *)v14 + 8);
      v13[9] = v28;
      swift_bridgeObjectRelease();
      uint64_t v29 = *((void *)v14 + 11);
      v13[10] = *((void *)v14 + 10);
      v13[11] = v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = v13[12];
      unint64_t v31 = v13[13];
      *((_OWORD *)v13 + 6) = v14[6];
      outlined consume of Data._Representation(v30, v31);
      ((void (*)(char *, char *, uint64_t))v11)((char *)v13 + v15[11], (char *)v14 + v15[11], v43);
      uint64_t v32 = v15[12];
      uint64_t v33 = (void *)((char *)v13 + v32);
      unint64_t v34 = (uint64_t *)((char *)v14 + v32);
      uint64_t v36 = *v34;
      uint64_t v35 = v34[1];
      void *v33 = v36;
      v33[1] = v35;
      swift_bridgeObjectRelease();
      uint64_t v37 = v15[13];
      unint64_t v38 = (void *)((char *)v13 + v37);
      uint64_t v39 = (uint64_t *)((char *)v14 + v37);
      uint64_t v41 = *v39;
      uint64_t v40 = v39[1];
      *unint64_t v38 = v41;
      v38[1] = v40;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v13, type metadata accessor for NCProtoContactInfo);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
    memcpy(v13, v14, *(void *)(*(void *)(v22 - 8) + 64));
    return a1;
  }
  long long v19 = v14[1];
  *(_OWORD *)uint64_t v13 = *v14;
  *((_OWORD *)v13 + 1) = v19;
  long long v20 = v14[3];
  *((_OWORD *)v13 + 2) = v14[2];
  *((_OWORD *)v13 + 3) = v20;
  long long v21 = v14[5];
  *((_OWORD *)v13 + 4) = v14[4];
  *((_OWORD *)v13 + 5) = v21;
  *((_OWORD *)v13 + 6) = v14[6];
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))((char *)v13 + v15[11], (char *)v14 + v15[11], v43);
  *(_OWORD *)((char *)v13 + v15[12]) = *(_OWORD *)((char *)v14 + v15[12]);
  *(_OWORD *)((char *)v13 + v15[13]) = *(_OWORD *)((char *)v14 + v15[13]);
  (*(void (**)(void *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoAddressableContact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25741CE94);
}

uint64_t sub_25741CE94(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoAddressableContact(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25741CFD8);
}

void *sub_25741CFD8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoContactInfo?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 28);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for NCProtoAddressableContact()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for NCProtoContactInfo?(319, &lazy cache variable for type metadata for NCProtoContactInfo?, (void (*)(uint64_t))type metadata accessor for NCProtoContactInfo);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoActiveConversation(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)v7 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    int v18 = (uint64_t *)((char *)v7 + v14);
    long long v19 = (uint64_t *)((char *)a2 + v14);
    uint64_t v20 = v19[1];
    *int v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = a3[8];
    uint64_t v22 = a3[9];
    uint64_t v23 = (char *)v7 + v21;
    uint64_t v24 = (char *)a2 + v21;
    *(void *)uint64_t v23 = *(void *)v24;
    *((_WORD *)v23 + 4) = *((_WORD *)v24 + 4);
    uint64_t v25 = (char *)v7 + v22;
    uint64_t v26 = (char *)a2 + v22;
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    uint64_t v27 = a3[10];
    uint64_t v28 = a3[11];
    uint64_t v29 = (char *)v7 + v27;
    uint64_t v30 = (char *)a2 + v27;
    *(void *)uint64_t v29 = *(void *)v30;
    *((_WORD *)v29 + 4) = *((_WORD *)v30 + 4);
    unint64_t v31 = (char *)v7 + v28;
    uint64_t v32 = (char *)a2 + v28;
    *(void *)unint64_t v31 = *(void *)v32;
    *((_WORD *)v31 + 4) = *((_WORD *)v32 + 4);
    uint64_t v33 = a3[12];
    unint64_t v34 = (char *)v7 + v33;
    uint64_t v35 = (_OWORD *)((char *)a2 + v33);
    unint64_t v36 = *(uint64_t *)((char *)a2 + v33 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v36 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v34 = *v35;
    }
    else
    {
      uint64_t v37 = *(void *)v35;
      outlined copy of Data._Representation(v37, v36);
      *(void *)unint64_t v34 = v37;
      *((void *)v34 + 1) = v36;
    }
  }
  return v7;
}

uint64_t destroy for NCProtoActiveConversation(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(a2 + 48));
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *v7;
    return outlined consume of Data._Representation(v9, v8);
  }
  return result;
}

void *initializeWithCopy for NCProtoActiveConversation(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)((char *)a1 + v11);
  uint64_t v14 = (void *)((char *)a2 + v11);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = (void *)((char *)a1 + v12);
  uint64_t v17 = (void *)((char *)a2 + v12);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = (char *)a1 + v19;
  uint64_t v22 = (char *)a2 + v19;
  *(void *)uint64_t v21 = *(void *)v22;
  *((_WORD *)v21 + 4) = *((_WORD *)v22 + 4);
  uint64_t v23 = (char *)a1 + v20;
  uint64_t v24 = (char *)a2 + v20;
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  uint64_t v25 = a3[10];
  uint64_t v26 = a3[11];
  uint64_t v27 = (char *)a1 + v25;
  uint64_t v28 = (char *)a2 + v25;
  *(void *)uint64_t v27 = *(void *)v28;
  *((_WORD *)v27 + 4) = *((_WORD *)v28 + 4);
  uint64_t v29 = (char *)a1 + v26;
  uint64_t v30 = (char *)a2 + v26;
  *(void *)uint64_t v29 = *(void *)v30;
  *((_WORD *)v29 + 4) = *((_WORD *)v30 + 4);
  uint64_t v31 = a3[12];
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (_OWORD *)((char *)a2 + v31);
  unint64_t v34 = *(void *)((char *)a2 + v31 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v34 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v32 = *v33;
  }
  else
  {
    uint64_t v35 = *(void *)v33;
    outlined copy of Data._Representation(v35, v34);
    *(void *)uint64_t v32 = v35;
    *((void *)v32 + 1) = v34;
  }
  return a1;
}

void *assignWithCopy for NCProtoActiveConversation(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  void *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = *(void *)v18;
  *((_WORD *)v17 + 4) = *((_WORD *)v18 + 4);
  *(void *)uint64_t v17 = v19;
  uint64_t v20 = a3[9];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  LOBYTE(v19) = v22[8];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v19;
  uint64_t v23 = a3[10];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  LOWORD(v19) = *((_WORD *)v25 + 4);
  *(void *)uint64_t v24 = *(void *)v25;
  *((_WORD *)v24 + 4) = v19;
  uint64_t v26 = a3[11];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  LOWORD(v19) = *((_WORD *)v28 + 4);
  *(void *)uint64_t v27 = *(void *)v28;
  *((_WORD *)v27 + 4) = v19;
  uint64_t v29 = a3[12];
  uint64_t v30 = (void *)((char *)a1 + v29);
  uint64_t v31 = (void *)((char *)a2 + v29);
  unint64_t v32 = *(void *)((char *)a2 + v29 + 8);
  if (*(void *)((char *)a1 + v29 + 8) >> 60 != 15)
  {
    if (v32 >> 60 != 15)
    {
      uint64_t v34 = *v31;
      outlined copy of Data._Representation(v34, v32);
      uint64_t v35 = *v30;
      unint64_t v36 = v30[1];
      *uint64_t v30 = v34;
      v30[1] = v32;
      outlined consume of Data._Representation(v35, v36);
      return a1;
    }
    outlined destroy of Data((uint64_t)v30);
    goto LABEL_6;
  }
  if (v32 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
    return a1;
  }
  uint64_t v33 = *v31;
  outlined copy of Data._Representation(v33, v32);
  *uint64_t v30 = v33;
  v30[1] = v32;
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for NCProtoActiveConversation(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  uint64_t v11 = a3[8];
  uint64_t v12 = a3[9];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  *((_WORD *)v13 + 4) = *((_WORD *)v14 + 4);
  uint64_t v15 = (char *)a1 + v12;
  uint64_t v16 = (char *)a2 + v12;
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = a3[10];
  uint64_t v18 = a3[11];
  uint64_t v19 = (char *)a1 + v17;
  uint64_t v20 = (char *)a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  *((_WORD *)v19 + 4) = *((_WORD *)v20 + 4);
  uint64_t v21 = (char *)a1 + v18;
  uint64_t v22 = (char *)a2 + v18;
  uint64_t v23 = *(void *)v22;
  *((_WORD *)v21 + 4) = *((_WORD *)v22 + 4);
  *(void *)uint64_t v21 = v23;
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  return a1;
}

void *assignWithTake for NCProtoActiveConversation(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = (char *)a1 + v20;
  uint64_t v23 = (char *)a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  *((_WORD *)v22 + 4) = *((_WORD *)v23 + 4);
  uint64_t v24 = (char *)a1 + v21;
  uint64_t v25 = (char *)a2 + v21;
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  uint64_t v26 = a3[10];
  uint64_t v27 = a3[11];
  uint64_t v28 = (char *)a1 + v26;
  uint64_t v29 = (char *)a2 + v26;
  *(void *)uint64_t v28 = *(void *)v29;
  *((_WORD *)v28 + 4) = *((_WORD *)v29 + 4);
  uint64_t v30 = (char *)a1 + v27;
  uint64_t v31 = (char *)a2 + v27;
  *(void *)uint64_t v30 = *(void *)v31;
  *((_WORD *)v30 + 4) = *((_WORD *)v31 + 4);
  uint64_t v32 = a3[12];
  uint64_t v33 = (void *)((char *)a1 + v32);
  uint64_t v34 = (void *)((char *)a2 + v32);
  unint64_t v35 = *(void *)((char *)a1 + v32 + 8);
  if (v35 >> 60 != 15)
  {
    unint64_t v36 = v34[1];
    if (v36 >> 60 != 15)
    {
      uint64_t v37 = *v33;
      uint64_t *v33 = *v34;
      v33[1] = v36;
      outlined consume of Data._Representation(v37, v35);
      return a1;
    }
    outlined destroy of Data((uint64_t)v33);
  }
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoActiveConversation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_82Tm);
}

uint64_t storeEnumTagSinglePayload for NCProtoActiveConversation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_83Tm);
}

uint64_t type metadata completion function for NCProtoActiveConversation()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for NCProtoContinuityCall(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v32 = *a2;
    *a1 = *a2;
    a1 = (void *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v73 = type metadata accessor for UnknownStorage();
    uint64_t v74 = (void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 16);
    uint64_t v75 = *v74;
    ((void (*)(void *, void *))*v74)(a1, a2);
    uint64_t v7 = a3[5];
    uint64_t v8 = a3[6];
    uint64_t v9 = (void *)((char *)a1 + v7);
    uint64_t v10 = (void *)((char *)a2 + v7);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    uint64_t v12 = (void *)((char *)a1 + v8);
    uint64_t v13 = (void *)((char *)a2 + v8);
    uint64_t v14 = v13[1];
    void *v12 = *v13;
    v12[1] = v14;
    uint64_t v15 = a3[7];
    uint64_t v16 = a3[8];
    uint64_t v17 = (char *)a1 + v15;
    uint64_t v18 = (char *)a2 + v15;
    *(void *)uint64_t v17 = *(void *)v18;
    *((_WORD *)v17 + 4) = *((_WORD *)v18 + 4);
    uint64_t v19 = (void *)((char *)a1 + v16);
    uint64_t v20 = (void *)((char *)a2 + v16);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)a1 + v22) = *((unsigned char *)a2 + v22);
    uint64_t v76 = a3;
    uint64_t v77 = a2;
    uint64_t v23 = a3[11];
    uint64_t v24 = (void *)((char *)a1 + v23);
    uint64_t v25 = (void *)((char *)a2 + v23);
    uint64_t v26 = (int *)type metadata accessor for NCProtoCallInfo(0);
    uint64_t v27 = *((void *)v26 - 1);
    uint64_t v28 = *(unsigned int (**)(void *, uint64_t, int *))(v27 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v28(v25, 1, v26))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
      memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
      uint64_t v31 = v76;
      uint64_t v30 = v77;
    }
    else
    {
      uint64_t v69 = v27;
      void *v24 = *v25;
      uint64_t v33 = v26[5];
      uint64_t v34 = (char *)v24 + v33;
      unint64_t v35 = (char *)v25 + v33;
      swift_bridgeObjectRetain();
      v75(v34, v35, v73);
      uint64_t v36 = v26[6];
      uint64_t v37 = (void *)((char *)v24 + v36);
      unint64_t v38 = (void *)((char *)v25 + v36);
      uint64_t v39 = v38[1];
      *uint64_t v37 = *v38;
      v37[1] = v39;
      uint64_t v40 = v26[7];
      uint64_t v41 = (void *)((char *)v24 + v40);
      uint64_t v42 = (void *)((char *)v25 + v40);
      uint64_t v43 = v42[1];
      *uint64_t v41 = *v42;
      v41[1] = v43;
      uint64_t v44 = v26[8];
      uint64_t v45 = (void *)((char *)v24 + v44);
      uint64_t v46 = (void *)((char *)v25 + v44);
      uint64_t v47 = v46[1];
      *uint64_t v45 = *v46;
      v45[1] = v47;
      *((unsigned char *)v24 + v26[9]) = *((unsigned char *)v25 + v26[9]);
      uint64_t v71 = v26;
      uint64_t v48 = v26[10];
      uint64_t v72 = v24;
      uint64_t v49 = (void *)((char *)v24 + v48);
      uint64_t v50 = (void *)((char *)v25 + v48);
      uint64_t v51 = type metadata accessor for NCProtoSenderIdentity(0);
      uint64_t v52 = *(void *)(v51 - 8);
      uint64_t v70 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v52 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v70(v50, 1, v51))
      {
        uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
        memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
      }
      else
      {
        uint64_t v54 = v50[1];
        *uint64_t v49 = *v50;
        v49[1] = v54;
        uint64_t v55 = v50[3];
        v49[2] = v50[2];
        v49[3] = v55;
        uint64_t v56 = *(int *)(v51 + 24);
        uint64_t v57 = (char *)v49 + v56;
        uint64_t v58 = (char *)v50 + v56;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v75(v57, v58, v73);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      }
      uint64_t v59 = v71[11];
      uint64_t v60 = (char *)v72 + v59;
      uint64_t v61 = (char *)v25 + v59;
      unint64_t v62 = *((void *)v61 + 1);
      if (v62 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
      }
      else
      {
        uint64_t v63 = *(void *)v61;
        outlined copy of Data._Representation(*(void *)v61, *((void *)v61 + 1));
        *(void *)uint64_t v60 = v63;
        *((void *)v60 + 1) = v62;
      }
      uint64_t v31 = v76;
      uint64_t v30 = v77;
      (*(void (**)(void *, void, uint64_t, int *))(v69 + 56))(v72, 0, 1, v71);
    }
    uint64_t v64 = v31[12];
    uint64_t v65 = (void *)((char *)a1 + v64);
    uint64_t v66 = (void *)((char *)v30 + v64);
    uint64_t v67 = v66[1];
    *uint64_t v65 = *v66;
    v65[1] = v67;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for NCProtoContinuityCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 44);
  uint64_t v7 = (int *)type metadata accessor for NCProtoCallInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v7 - 1) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v5(v6 + v7[5], v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = v6 + v7[10];
    uint64_t v9 = type metadata accessor for NCProtoSenderIdentity(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5(v8 + *(int *)(v9 + 24), v4);
    }
    uint64_t v10 = (uint64_t *)(v6 + v7[11]);
    unint64_t v11 = v10[1];
    if (v11 >> 60 != 15) {
      outlined consume of Data._Representation(*v10, v11);
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NCProtoContinuityCall(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v71 = type metadata accessor for UnknownStorage();
  uint64_t v72 = (void (**)(uint64_t, uint64_t))(*(void *)(v71 - 8) + 16);
  uint64_t v73 = *v72;
  (*v72)(a1, a2);
  uint64_t v6 = a3[5];
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v6);
  uint64_t v9 = (void *)(a2 + v6);
  uint64_t v10 = v9[1];
  void *v8 = *v9;
  v8[1] = v10;
  unint64_t v11 = (void *)(a1 + v7);
  uint64_t v12 = (void *)(a2 + v7);
  uint64_t v13 = v12[1];
  *unint64_t v11 = *v12;
  v11[1] = v13;
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_WORD *)(v16 + 8) = *(_WORD *)(v17 + 8);
  uint64_t v18 = (void *)(a1 + v15);
  uint64_t v19 = (void *)(a2 + v15);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  uint64_t v74 = a2;
  uint64_t v75 = a3;
  uint64_t v22 = a3[11];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  uint64_t v25 = (int *)type metadata accessor for NCProtoCallInfo(0);
  uint64_t v26 = *((void *)v25 - 1);
  uint64_t v27 = *(unsigned int (**)(void *, uint64_t, int *))(v26 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v27(v24, 1, v25))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    uint64_t v29 = v74;
    uint64_t v30 = v75;
  }
  else
  {
    uint64_t v67 = v26;
    *uint64_t v23 = *v24;
    uint64_t v31 = v25[5];
    uint64_t v32 = (char *)v23 + v31;
    uint64_t v33 = (char *)v24 + v31;
    swift_bridgeObjectRetain();
    ((void (*)(char *, char *, uint64_t))v73)(v32, v33, v71);
    uint64_t v34 = v25[6];
    unint64_t v35 = (void *)((char *)v23 + v34);
    uint64_t v36 = (void *)((char *)v24 + v34);
    uint64_t v37 = v36[1];
    *unint64_t v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = v25[7];
    uint64_t v39 = (void *)((char *)v23 + v38);
    uint64_t v40 = (void *)((char *)v24 + v38);
    uint64_t v41 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v41;
    uint64_t v42 = v25[8];
    uint64_t v43 = (void *)((char *)v23 + v42);
    uint64_t v44 = (void *)((char *)v24 + v42);
    uint64_t v45 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v45;
    *((unsigned char *)v23 + v25[9]) = *((unsigned char *)v24 + v25[9]);
    uint64_t v69 = v25;
    uint64_t v46 = v25[10];
    uint64_t v70 = v23;
    uint64_t v47 = (void *)((char *)v23 + v46);
    uint64_t v48 = (void *)((char *)v24 + v46);
    uint64_t v49 = type metadata accessor for NCProtoSenderIdentity(0);
    uint64_t v50 = *(void *)(v49 - 8);
    uint64_t v68 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v50 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v68(v48, 1, v49))
    {
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
      memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      uint64_t v52 = v48[1];
      *uint64_t v47 = *v48;
      v47[1] = v52;
      uint64_t v53 = v48[3];
      v47[2] = v48[2];
      v47[3] = v53;
      uint64_t v54 = *(int *)(v49 + 24);
      uint64_t v55 = (char *)v47 + v54;
      uint64_t v56 = (char *)v48 + v54;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      ((void (*)(char *, char *, uint64_t))v73)(v55, v56, v71);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
    }
    uint64_t v57 = v69[11];
    uint64_t v58 = (char *)v70 + v57;
    uint64_t v59 = (char *)v24 + v57;
    unint64_t v60 = *((void *)v59 + 1);
    if (v60 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
    }
    else
    {
      uint64_t v61 = *(void *)v59;
      outlined copy of Data._Representation(*(void *)v59, *((void *)v59 + 1));
      *(void *)uint64_t v58 = v61;
      *((void *)v58 + 1) = v60;
    }
    uint64_t v29 = v74;
    uint64_t v30 = v75;
    (*(void (**)(void *, void, uint64_t, int *))(v67 + 56))(v70, 0, 1, v69);
  }
  uint64_t v62 = v30[12];
  uint64_t v63 = (void *)(a1 + v62);
  uint64_t v64 = (void *)(v29 + v62);
  uint64_t v65 = v64[1];
  *uint64_t v63 = *v64;
  v63[1] = v65;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NCProtoContinuityCall(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v94 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(v94 + 24);
  uint64_t v95 = v6;
  ((void (*)(uint64_t, uint64_t))v7)(a1, a2);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  void *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v17 = *v16;
  *(_WORD *)(v15 + 8) = *((_WORD *)v16 + 4);
  *(void *)uint64_t v15 = v17;
  uint64_t v18 = a3[8];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  v96 = a3;
  uint64_t v21 = a3[11];
  uint64_t v22 = (char *)(a1 + v21);
  uint64_t v23 = (char *)(a2 + v21);
  uint64_t v24 = (int *)type metadata accessor for NCProtoCallInfo(0);
  uint64_t v91 = *((void *)v24 - 1);
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, int *))(v91 + 48);
  int v26 = v25(v22, 1, v24);
  int v27 = v25(v23, 1, v24);
  if (!v26)
  {
    v92 = v7;
    if (v27)
    {
      outlined destroy of NCProtoContactInfo((uint64_t)v22, type metadata accessor for NCProtoCallInfo);
      goto LABEL_7;
    }
    *(void *)uint64_t v22 = *(void *)v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v7(&v22[v24[5]], &v23[v24[5]], v95);
    uint64_t v46 = v24[6];
    uint64_t v47 = &v22[v46];
    uint64_t v48 = &v23[v46];
    *(void *)uint64_t v47 = *(void *)v48;
    *((void *)v47 + 1) = *((void *)v48 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v49 = v24[7];
    uint64_t v50 = &v22[v49];
    uint64_t v51 = &v23[v49];
    *(void *)uint64_t v50 = *(void *)v51;
    *((void *)v50 + 1) = *((void *)v51 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v52 = v24[8];
    uint64_t v53 = &v22[v52];
    uint64_t v54 = &v23[v52];
    *(void *)uint64_t v53 = *(void *)v54;
    *((void *)v53 + 1) = *((void *)v54 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v22[v24[9]] = v23[v24[9]];
    uint64_t v55 = v24[10];
    uint64_t v56 = &v22[v55];
    uint64_t v57 = &v23[v55];
    uint64_t v58 = type metadata accessor for NCProtoSenderIdentity(0);
    uint64_t v85 = *(void *)(v58 - 8);
    uint64_t v87 = v56;
    uint64_t v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 48);
    LODWORD(v56) = v59(v56, 1, v58);
    int v60 = v59(v57, 1, v58);
    if (v56)
    {
      if (v60)
      {
        size_t v61 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?)
                                    - 8)
                        + 64);
        uint64_t v62 = v87;
LABEL_18:
        memcpy(v62, v57, v61);
        goto LABEL_21;
      }
      *uint64_t v87 = *(void *)v57;
      v87[1] = *((void *)v57 + 1);
      v87[2] = *((void *)v57 + 2);
      v87[3] = *((void *)v57 + 3);
      uint64_t v70 = *(int *)(v58 + 24);
      __dsta = &v57[v70];
      v93 = (char *)v87 + v70;
      uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v71(v93, __dsta, v95);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v85 + 56))(v87, 0, 1, v58);
    }
    else
    {
      if (v60)
      {
        outlined destroy of NCProtoContactInfo((uint64_t)v87, type metadata accessor for NCProtoSenderIdentity);
        size_t v61 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?)
                                    - 8)
                        + 64);
        uint64_t v62 = v87;
        goto LABEL_18;
      }
      *uint64_t v87 = *(void *)v57;
      v87[1] = *((void *)v57 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v87[2] = *((void *)v57 + 2);
      v87[3] = *((void *)v57 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v92((char *)v87 + *(int *)(v58 + 24), &v57[*(int *)(v58 + 24)], v95);
    }
LABEL_21:
    uint64_t v72 = v24[11];
    uint64_t v73 = (uint64_t *)&v22[v72];
    uint64_t v74 = (uint64_t *)&v23[v72];
    unint64_t v75 = *(void *)&v23[v72 + 8];
    if ((unint64_t)v73[1] >> 60 == 15)
    {
      if (v75 >> 60 != 15)
      {
        uint64_t v76 = *v74;
        outlined copy of Data._Representation(v76, v75);
        *uint64_t v73 = v76;
        v73[1] = v75;
        goto LABEL_28;
      }
    }
    else
    {
      if (v75 >> 60 != 15)
      {
        uint64_t v77 = *v74;
        outlined copy of Data._Representation(v77, v75);
        uint64_t v78 = *v73;
        unint64_t v79 = v73[1];
        *uint64_t v73 = v77;
        v73[1] = v75;
        outlined consume of Data._Representation(v78, v79);
        goto LABEL_28;
      }
      outlined destroy of Data((uint64_t)v73);
    }
    *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
    goto LABEL_28;
  }
  if (v27)
  {
LABEL_7:
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
    memcpy(v22, v23, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_28;
  }
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v28 = v24[5];
  uint64_t v29 = &v22[v28];
  uint64_t v30 = &v23[v28];
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
  swift_bridgeObjectRetain();
  v31(v29, v30, v95);
  uint64_t v32 = v24[6];
  uint64_t v33 = &v22[v32];
  uint64_t v34 = &v23[v32];
  *(void *)uint64_t v33 = *(void *)v34;
  *((void *)v33 + 1) = *((void *)v34 + 1);
  uint64_t v35 = v24[7];
  uint64_t v36 = &v22[v35];
  uint64_t v37 = &v23[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = *((void *)v37 + 1);
  uint64_t v38 = v24[8];
  uint64_t v39 = &v22[v38];
  uint64_t v40 = &v23[v38];
  *(void *)uint64_t v39 = *(void *)v40;
  *((void *)v39 + 1) = *((void *)v40 + 1);
  v22[v24[9]] = v23[v24[9]];
  uint64_t v41 = v24[10];
  __dst = &v22[v41];
  uint64_t v42 = &v23[v41];
  uint64_t v43 = type metadata accessor for NCProtoSenderIdentity(0);
  uint64_t v84 = *(void *)(v43 - 8);
  int64_t v86 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v86(v42, 1, v43))
  {
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
    memcpy(__dst, v42, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    *(void *)__dst = *(void *)v42;
    *((void *)__dst + 1) = *((void *)v42 + 1);
    *((void *)__dst + 2) = *((void *)v42 + 2);
    *((void *)__dst + 3) = *((void *)v42 + 3);
    uint64_t v63 = *(int *)(v43 + 24);
    __src = &__dst[v63];
    uint64_t v64 = &v42[v63];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31(__src, v64, v95);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(__dst, 0, 1, v43);
  }
  uint64_t v65 = v24[11];
  uint64_t v66 = &v22[v65];
  uint64_t v67 = &v23[v65];
  unint64_t v68 = *((void *)v67 + 1);
  if (v68 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
  }
  else
  {
    uint64_t v69 = *(void *)v67;
    outlined copy of Data._Representation(*(void *)v67, *((void *)v67 + 1));
    *(void *)uint64_t v66 = v69;
    *((void *)v66 + 1) = v68;
  }
  (*(void (**)(char *, void, uint64_t, int *))(v91 + 56))(v22, 0, 1, v24);
LABEL_28:
  uint64_t v80 = v96[12];
  uint64_t v81 = (void *)(a1 + v80);
  uint64_t v82 = (void *)(a2 + v80);
  void *v81 = *v82;
  v81[1] = v82[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for NCProtoContinuityCall(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  uint64_t v9 = a3[7];
  uint64_t v10 = a3[8];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  *((_WORD *)v11 + 4) = *((_WORD *)v12 + 4);
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  uint64_t v13 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v13] = a2[v13];
  uint64_t v14 = a3[11];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = (int *)type metadata accessor for NCProtoCallInfo(0);
  uint64_t v18 = *((void *)v17 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v15 = *(void *)v16;
    int v27 = v7;
    v7(&v15[v17[5]], &v16[v17[5]], v6);
    *(_OWORD *)&v15[v17[6]] = *(_OWORD *)&v16[v17[6]];
    *(_OWORD *)&v15[v17[7]] = *(_OWORD *)&v16[v17[7]];
    *(_OWORD *)&v15[v17[8]] = *(_OWORD *)&v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    uint64_t v20 = v17[10];
    __dst = &v15[v20];
    uint64_t v21 = &v16[v20];
    uint64_t v22 = type metadata accessor for NCProtoSenderIdentity(0);
    uint64_t v26 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v21, 1, v22))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
      memcpy(__dst, v21, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      long long v24 = *((_OWORD *)v21 + 1);
      *(_OWORD *)__dst = *(_OWORD *)v21;
      *((_OWORD *)__dst + 1) = v24;
      v27(&__dst[*(int *)(v22 + 24)], &v21[*(int *)(v22 + 24)], v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v22);
    }
    *(_OWORD *)&v15[v17[11]] = *(_OWORD *)&v16[v17[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  return a1;
}

uint64_t assignWithTake for NCProtoContinuityCall(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v89 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v89 + 40);
  uint64_t v91 = v6;
  v7(a1, a2);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  void *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v18;
  uint64_t v21 = a2 + v18;
  *(void *)uint64_t v20 = *(void *)v21;
  *(_WORD *)(v20 + 8) = *(_WORD *)(v21 + 8);
  uint64_t v22 = (void *)(a1 + v19);
  uint64_t v23 = (uint64_t *)(a2 + v19);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v26) = *(unsigned char *)(a2 + v26);
  uint64_t v92 = a2;
  v93 = a3;
  uint64_t v27 = a3[11];
  uint64_t v28 = (char *)(a1 + v27);
  uint64_t v29 = (char *)(a2 + v27);
  uint64_t v30 = (int *)type metadata accessor for NCProtoCallInfo(0);
  uint64_t v88 = *((void *)v30 - 1);
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t, int *))(v88 + 48);
  uint64_t v32 = v28;
  LODWORD(v28) = v31(v28, 1, v30);
  uint64_t v33 = v29;
  uint64_t v34 = v29;
  uint64_t v35 = v30;
  int v36 = v31(v34, 1, v30);
  if (v28)
  {
    if (!v36)
    {
      uint64_t v37 = v32;
      *(void *)uint64_t v32 = *(void *)v33;
      uint64_t v38 = v35;
      uint64_t v39 = v35[5];
      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v89 + 32);
      v40(&v37[v39], &v33[v39], v91);
      *(_OWORD *)&v37[v38[6]] = *(_OWORD *)&v33[v38[6]];
      *(_OWORD *)&v37[v38[7]] = *(_OWORD *)&v33[v38[7]];
      *(_OWORD *)&v37[v38[8]] = *(_OWORD *)&v33[v38[8]];
      v37[v38[9]] = v33[v38[9]];
      uint64_t v41 = v38[10];
      uint64_t v42 = &v37[v41];
      uint64_t v43 = &v33[v41];
      uint64_t v44 = type metadata accessor for NCProtoSenderIdentity(0);
      uint64_t v90 = *(void *)(v44 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v43, 1, v44))
      {
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
        memcpy(v42, v43, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        long long v71 = *((_OWORD *)v43 + 1);
        *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
        *((_OWORD *)v42 + 1) = v71;
        v40(&v42[*(int *)(v44 + 24)], &v43[*(int *)(v44 + 24)], v91);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v42, 0, 1, v44);
      }
      *(_OWORD *)&v37[v38[11]] = *(_OWORD *)&v33[v38[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v88 + 56))(v37, 0, 1, v38);
      goto LABEL_23;
    }
LABEL_7:
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
    memcpy(v32, v33, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_23;
  }
  if (v36)
  {
    outlined destroy of NCProtoContactInfo((uint64_t)v32, type metadata accessor for NCProtoCallInfo);
    goto LABEL_7;
  }
  *(void *)uint64_t v32 = *(void *)v33;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v7)(&v32[v30[5]], &v33[v30[5]], v91);
  uint64_t v47 = v30[6];
  uint64_t v48 = &v32[v47];
  uint64_t v49 = (uint64_t *)&v33[v47];
  uint64_t v51 = *v49;
  uint64_t v50 = v49[1];
  *(void *)uint64_t v48 = v51;
  *((void *)v48 + 1) = v50;
  swift_bridgeObjectRelease();
  uint64_t v52 = v30[7];
  uint64_t v53 = &v32[v52];
  uint64_t v54 = (uint64_t *)&v33[v52];
  uint64_t v56 = *v54;
  uint64_t v55 = v54[1];
  *(void *)uint64_t v53 = v56;
  *((void *)v53 + 1) = v55;
  swift_bridgeObjectRelease();
  uint64_t v57 = v30[8];
  uint64_t v58 = &v32[v57];
  uint64_t v59 = (uint64_t *)&v33[v57];
  uint64_t v61 = *v59;
  uint64_t v60 = v59[1];
  *(void *)uint64_t v58 = v61;
  *((void *)v58 + 1) = v60;
  swift_bridgeObjectRelease();
  v32[v30[9]] = v33[v30[9]];
  uint64_t v62 = v30[10];
  uint64_t v63 = &v32[v62];
  uint64_t v64 = &v33[v62];
  uint64_t v65 = type metadata accessor for NCProtoSenderIdentity(0);
  uint64_t v66 = *(void *)(v65 - 8);
  uint64_t v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
  uint64_t v87 = (uint64_t)v63;
  LODWORD(v63) = v67(v63, 1, v65);
  int v68 = v67(v64, 1, v65);
  if (v63)
  {
    if (!v68)
    {
      long long v72 = *((_OWORD *)v64 + 1);
      *(_OWORD *)uint64_t v87 = *(_OWORD *)v64;
      *(_OWORD *)(v87 + 16) = v72;
      (*(void (**)(uint64_t, char *, uint64_t))(v89 + 32))(v87 + *(int *)(v65 + 24), &v64[*(int *)(v65 + 24)], v91);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v87, 0, 1, v65);
      goto LABEL_18;
    }
    size_t v69 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?)
                                - 8)
                    + 64);
    uint64_t v70 = (void *)v87;
  }
  else
  {
    if (!v68)
    {
      uint64_t v73 = *((void *)v64 + 1);
      *(void *)uint64_t v87 = *(void *)v64;
      *(void *)(v87 + 8) = v73;
      swift_bridgeObjectRelease();
      uint64_t v74 = *((void *)v64 + 3);
      *(void *)(v87 + 16) = *((void *)v64 + 2);
      *(void *)(v87 + 24) = v74;
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, char *, uint64_t))v7)(v87 + *(int *)(v65 + 24), &v64[*(int *)(v65 + 24)], v91);
      goto LABEL_18;
    }
    outlined destroy of NCProtoContactInfo(v87, type metadata accessor for NCProtoSenderIdentity);
    size_t v69 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?)
                                - 8)
                    + 64);
    uint64_t v70 = (void *)v87;
  }
  memcpy(v70, v64, v69);
LABEL_18:
  uint64_t v75 = v30[11];
  uint64_t v76 = (uint64_t *)&v32[v75];
  uint64_t v77 = (uint64_t *)&v33[v75];
  unint64_t v78 = *(void *)&v32[v75 + 8];
  if (v78 >> 60 != 15)
  {
    unint64_t v79 = v77[1];
    if (v79 >> 60 != 15)
    {
      uint64_t v80 = *v76;
      *uint64_t v76 = *v77;
      v76[1] = v79;
      outlined consume of Data._Representation(v80, v78);
      goto LABEL_23;
    }
    outlined destroy of Data((uint64_t)v76);
  }
  *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
LABEL_23:
  uint64_t v81 = v93[12];
  uint64_t v82 = (void *)(a1 + v81);
  uint64_t v83 = (uint64_t *)(v92 + v81);
  uint64_t v85 = *v83;
  uint64_t v84 = v83[1];
  *uint64_t v82 = v85;
  v82[1] = v84;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoContinuityCall(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25741F774);
}

uint64_t sub_25741F774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 2147483646)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 44);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoContinuityCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25741F8C8);
}

uint64_t sub_25741F8C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 2147483646)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 44);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void type metadata completion function for NCProtoContinuityCall()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for NCProtoContactInfo?(319, &lazy cache variable for type metadata for NCProtoCallInfo?, (void (*)(uint64_t))type metadata accessor for NCProtoCallInfo);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for NCProtoContinuityCall.Status(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoContinuityCall.Status(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for NCProtoContinuityCall.Status(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for NCProtoContinuityCall.Status(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NCProtoContinuityCall.Status()
{
  return &type metadata for NCProtoContinuityCall.Status;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoStartedSessionEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[2];
    unint64_t v9 = a2[3];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v8, v9);
    a1[2] = v8;
    a1[3] = v9;
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    uint64_t v15 = a3[7];
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
    uint64_t v19 = *((void *)v18 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      *uint64_t v16 = *v17;
      uint64_t v22 = v18[5];
      uint64_t v44 = (char *)v17 + v22;
      uint64_t v45 = (char *)v16 + v22;
      swift_bridgeObjectRetain();
      v14(v45, v44, v13);
      uint64_t v23 = v18[6];
      uint64_t v24 = (void *)((char *)v16 + v23);
      uint64_t v25 = (void *)((char *)v17 + v23);
      uint64_t v26 = v25[1];
      void *v24 = *v25;
      v24[1] = v26;
      uint64_t v27 = v18[7];
      uint64_t v28 = (char *)v16 + v27;
      uint64_t v29 = (_OWORD *)((char *)v17 + v27);
      unint64_t v30 = *(void *)((char *)v17 + v27 + 8);
      swift_bridgeObjectRetain();
      if (v30 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v28 = *v29;
      }
      else
      {
        uint64_t v31 = *(void *)v29;
        outlined copy of Data._Representation(v31, v30);
        *(void *)uint64_t v28 = v31;
        *((void *)v28 + 1) = v30;
      }
      uint64_t v32 = v18[8];
      uint64_t v33 = (char *)v16 + v32;
      uint64_t v34 = (char *)v17 + v32;
      *(void *)uint64_t v33 = *(void *)v34;
      v33[8] = v34[8];
      uint64_t v35 = v18[9];
      int v36 = (void *)((char *)v16 + v35);
      uint64_t v37 = (void *)((char *)v17 + v35);
      uint64_t v38 = v37[1];
      *int v36 = *v37;
      v36[1] = v38;
      uint64_t v39 = *(void (**)(void *, void, uint64_t, int *))(v19 + 56);
      swift_bridgeObjectRetain();
      v39(v16, 0, 1, v18);
    }
    uint64_t v40 = a3[8];
    uint64_t v41 = (char *)a1 + v40;
    uint64_t v42 = (char *)a2 + v40;
    *(void *)uint64_t v41 = *(void *)v42;
    *((_WORD *)v41 + 4) = *((_WORD *)v42 + 4);
  }
  return a1;
}

uint64_t destroy for NCProtoStartedSessionEvent(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t v8 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  if (!result)
  {
    swift_bridgeObjectRelease();
    v6(v7 + *(int *)(v8 + 20), v5);
    swift_bridgeObjectRelease();
    uint64_t v10 = (uint64_t *)(v7 + *(int *)(v8 + 28));
    unint64_t v11 = v10[1];
    if (v11 >> 60 != 15) {
      outlined consume of Data._Representation(*v10, v11);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for NCProtoStartedSessionEvent(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[2];
  unint64_t v8 = a2[3];
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  uint64_t v9 = a3[6];
  uint64_t v10 = (char *)a1 + v9;
  unint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  v13(v10, v11, v12);
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v18 = *((void *)v17 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    void *v15 = *v16;
    uint64_t v20 = v17[5];
    uint64_t v43 = (char *)v15 + v20;
    uint64_t v44 = a3;
    uint64_t v21 = (char *)v16 + v20;
    swift_bridgeObjectRetain();
    v13(v43, v21, v12);
    uint64_t v22 = v17[6];
    uint64_t v23 = (void *)((char *)v15 + v22);
    uint64_t v24 = (void *)((char *)v16 + v22);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = v17[7];
    uint64_t v27 = (char *)v15 + v26;
    uint64_t v28 = (_OWORD *)((char *)v16 + v26);
    unint64_t v29 = *(void *)((char *)v16 + v26 + 8);
    swift_bridgeObjectRetain();
    if (v29 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v27 = *v28;
    }
    else
    {
      uint64_t v30 = *(void *)v28;
      outlined copy of Data._Representation(v30, v29);
      *(void *)uint64_t v27 = v30;
      *((void *)v27 + 1) = v29;
    }
    uint64_t v31 = v17[8];
    uint64_t v32 = (char *)v15 + v31;
    uint64_t v33 = (char *)v16 + v31;
    *(void *)uint64_t v32 = *(void *)v33;
    v32[8] = v33[8];
    uint64_t v34 = v17[9];
    uint64_t v35 = (void *)((char *)v15 + v34);
    int v36 = (void *)((char *)v16 + v34);
    uint64_t v37 = v36[1];
    *uint64_t v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = *(void (**)(void *, void, uint64_t, int *))(v18 + 56);
    swift_bridgeObjectRetain();
    v38(v15, 0, 1, v17);
    a3 = v44;
  }
  uint64_t v39 = a3[8];
  uint64_t v40 = (char *)a1 + v39;
  uint64_t v41 = (char *)a2 + v39;
  *(void *)uint64_t v40 = *(void *)v41;
  *((_WORD *)v40 + 4) = *((_WORD *)v41 + 4);
  return a1;
}

void *assignWithCopy for NCProtoStartedSessionEvent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  outlined copy of Data._Representation(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  a1[2] = v6;
  a1[3] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(char *, char *))(v14 + 24);
  uint64_t v70 = v13;
  v15(v11, v12);
  long long v71 = a2;
  uint64_t v72 = a3;
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v69 = *((void *)v19 - 1);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, int *))(v69 + 48);
  uint64_t v21 = v17;
  LODWORD(v17) = v20((char *)v17, 1, v19);
  __src = v18;
  int v22 = v20(v18, 1, v19);
  if (!v17)
  {
    if (v22)
    {
      outlined destroy of NCProtoContactInfo((uint64_t)v21, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
      goto LABEL_7;
    }
    *uint64_t v21 = *(void *)v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    ((void (*)(char *, char *, uint64_t))v15)((char *)v21 + v19[5], &v18[v19[5]], v70);
    uint64_t v37 = v19[6];
    uint64_t v38 = (void *)((char *)v21 + v37);
    uint64_t v39 = &v18[v37];
    *uint64_t v38 = *(void *)v39;
    v38[1] = *((void *)v39 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v40 = v19[7];
    uint64_t v41 = (void *)((char *)v21 + v40);
    uint64_t v42 = &v18[v40];
    unint64_t v43 = *(void *)&__src[v40 + 8];
    if (*(void *)((char *)v21 + v40 + 8) >> 60 == 15)
    {
      int v36 = v71;
      uint64_t v35 = v72;
      if (v43 >> 60 != 15)
      {
        uint64_t v44 = *(void *)v42;
        outlined copy of Data._Representation(*(void *)v42, *((void *)v42 + 1));
        *uint64_t v41 = v44;
        v41[1] = v43;
LABEL_17:
        uint64_t v57 = v19[8];
        uint64_t v58 = (char *)v21 + v57;
        uint64_t v59 = &__src[v57];
        uint64_t v60 = *(void *)v59;
        v58[8] = v59[8];
        *(void *)uint64_t v58 = v60;
        uint64_t v61 = v19[9];
        uint64_t v62 = (void *)((char *)v21 + v61);
        uint64_t v63 = &__src[v61];
        *uint64_t v62 = *(void *)v63;
        v62[1] = *((void *)v63 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
    }
    else
    {
      int v36 = v71;
      uint64_t v35 = v72;
      if (v43 >> 60 != 15)
      {
        uint64_t v54 = *(void *)v42;
        outlined copy of Data._Representation(*(void *)v42, *((void *)v42 + 1));
        uint64_t v55 = *v41;
        unint64_t v56 = v41[1];
        *uint64_t v41 = v54;
        v41[1] = v43;
        outlined consume of Data._Representation(v55, v56);
        goto LABEL_17;
      }
      outlined destroy of Data((uint64_t)v41);
    }
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    goto LABEL_17;
  }
  if (v22)
  {
LABEL_7:
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    memcpy(v21, v18, *(void *)(*(void *)(v34 - 8) + 64));
    int v36 = v71;
    uint64_t v35 = v72;
    goto LABEL_18;
  }
  *uint64_t v21 = *(void *)v18;
  uint64_t v23 = v19[5];
  uint64_t v24 = (char *)v21 + v23;
  uint64_t v25 = &v18[v23];
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  swift_bridgeObjectRetain();
  v26(v24, v25, v70);
  uint64_t v27 = v19[6];
  uint64_t v28 = (void *)((char *)v21 + v27);
  unint64_t v29 = &v18[v27];
  *uint64_t v28 = *(void *)v29;
  v28[1] = *((void *)v29 + 1);
  uint64_t v30 = v19[7];
  uint64_t v31 = (char *)v21 + v30;
  uint64_t v32 = &__src[v30];
  unint64_t v33 = *(void *)&__src[v30 + 8];
  swift_bridgeObjectRetain();
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  }
  else
  {
    uint64_t v45 = *(void *)v32;
    outlined copy of Data._Representation(v45, v33);
    *(void *)uint64_t v31 = v45;
    *((void *)v31 + 1) = v33;
  }
  int v36 = v71;
  uint64_t v35 = v72;
  uint64_t v46 = v19[8];
  uint64_t v47 = (char *)v21 + v46;
  uint64_t v48 = &__src[v46];
  uint64_t v49 = *(void *)v48;
  v47[8] = v48[8];
  *(void *)uint64_t v47 = v49;
  uint64_t v50 = v19[9];
  uint64_t v51 = (void *)((char *)v21 + v50);
  uint64_t v52 = &__src[v50];
  *uint64_t v51 = *(void *)v52;
  v51[1] = *((void *)v52 + 1);
  uint64_t v53 = *(void (**)(void *, void, uint64_t, int *))(v69 + 56);
  swift_bridgeObjectRetain();
  v53(v21, 0, 1, v19);
LABEL_18:
  uint64_t v64 = *(int *)(v35 + 32);
  uint64_t v65 = (char *)a1 + v64;
  uint64_t v66 = (void *)((char *)v36 + v64);
  uint64_t v67 = *v66;
  *((_WORD *)v65 + 4) = *((_WORD *)v66 + 4);
  *(void *)uint64_t v65 = v67;
  return a1;
}

_OWORD *initializeWithTake for NCProtoStartedSessionEvent(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  unint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    void *v13 = *v14;
    v11((char *)v13 + v15[5], (char *)v14 + v15[5], v10);
    *(_OWORD *)((char *)v13 + v15[6]) = *(_OWORD *)((char *)v14 + v15[6]);
    *(_OWORD *)((char *)v13 + v15[7]) = *(_OWORD *)((char *)v14 + v15[7]);
    uint64_t v18 = v15[8];
    uint64_t v19 = (char *)v13 + v18;
    uint64_t v20 = (char *)v14 + v18;
    v19[8] = v20[8];
    *(void *)uint64_t v19 = *(void *)v20;
    *(_OWORD *)((char *)v13 + v15[9]) = *(_OWORD *)((char *)v14 + v15[9]);
    (*(void (**)(void *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v21 = a3[8];
  int v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  *(void *)int v22 = *(void *)v23;
  *((_WORD *)v22 + 4) = *((_WORD *)v23 + 4);
  return a1;
}

void *assignWithTake for NCProtoStartedSessionEvent(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a1[2];
  unint64_t v8 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  outlined consume of Data._Representation(v7, v8);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v13 + 40);
  uint64_t v52 = v12;
  v14(v10, v11);
  uint64_t v53 = a3;
  uint64_t v54 = a2;
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)(a2 + v15);
  uint64_t v18 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v19 = *((void *)v18 - 1);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, int *))(v19 + 48);
  uint64_t v55 = v16;
  LODWORD(v16) = v20(v16, 1, v18);
  int v21 = v20(v17, 1, v18);
  if (v16)
  {
    if (!v21)
    {
      *(void *)uint64_t v55 = *(void *)v17;
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v55[v18[5]], &v17[v18[5]], v52);
      *(_OWORD *)&v55[v18[6]] = *(_OWORD *)&v17[v18[6]];
      *(_OWORD *)&v55[v18[7]] = *(_OWORD *)&v17[v18[7]];
      uint64_t v24 = v18[8];
      uint64_t v25 = &v55[v24];
      uint64_t v26 = &v17[v24];
      v25[8] = v26[8];
      *(void *)uint64_t v25 = *(void *)v26;
      *(_OWORD *)&v55[v18[9]] = *(_OWORD *)&v17[v18[9]];
      (*(void (**)(char *, void, uint64_t, int *))(v19 + 56))(v55, 0, 1, v18);
      goto LABEL_8;
    }
    size_t v22 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?)
                                - 8)
                    + 64);
    uint64_t v23 = v55;
LABEL_6:
    memcpy(v23, v17, v22);
LABEL_8:
    uint64_t v28 = v53;
    uint64_t v27 = v54;
    goto LABEL_9;
  }
  if (v21)
  {
    outlined destroy of NCProtoContactInfo((uint64_t)v55, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
    size_t v22 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?)
                                - 8)
                    + 64);
    uint64_t v23 = v55;
    goto LABEL_6;
  }
  *(void *)uint64_t v55 = *(void *)v17;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v14)(&v55[v18[5]], &v17[v18[5]], v52);
  uint64_t v33 = v18[6];
  uint64_t v34 = &v55[v33];
  uint64_t v35 = &v17[v33];
  uint64_t v37 = *(void *)v35;
  uint64_t v36 = *((void *)v35 + 1);
  *(void *)uint64_t v34 = v37;
  *((void *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = v18[7];
  uint64_t v39 = (uint64_t)&v55[v38];
  uint64_t v40 = &v17[v38];
  unint64_t v41 = *(void *)&v55[v38 + 8];
  if (v41 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
    uint64_t v28 = v53;
    uint64_t v27 = v54;
  }
  else
  {
    unint64_t v42 = *((void *)v40 + 1);
    uint64_t v28 = v53;
    uint64_t v27 = v54;
    if (v42 >> 60 == 15)
    {
      outlined destroy of Data(v39);
      *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
    }
    else
    {
      uint64_t v43 = *(void *)v39;
      *(void *)uint64_t v39 = *(void *)v40;
      *(void *)(v39 + 8) = v42;
      outlined consume of Data._Representation(v43, v41);
    }
  }
  uint64_t v44 = v18[8];
  uint64_t v45 = &v55[v44];
  uint64_t v46 = &v17[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  v45[8] = v46[8];
  uint64_t v47 = v18[9];
  uint64_t v48 = &v55[v47];
  uint64_t v49 = &v17[v47];
  uint64_t v51 = *(void *)v49;
  uint64_t v50 = *((void *)v49 + 1);
  *(void *)uint64_t v48 = v51;
  *((void *)v48 + 1) = v50;
  swift_bridgeObjectRelease();
LABEL_9:
  uint64_t v29 = *(int *)(v28 + 32);
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = v27 + v29;
  *(void *)uint64_t v30 = *(void *)v31;
  *((_WORD *)v30 + 4) = *(_WORD *)(v31 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoStartedSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257420B84);
}

uint64_t sub_257420B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoStartedSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257420CC8);
}

uint64_t sub_257420CC8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 28);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for NCProtoStartedSessionEvent()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for NCProtoContactInfo?(319, &lazy cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?, (void (*)(uint64_t))type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for NCProtoEndedSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_97Tm);
}

uint64_t storeEnumTagSinglePayload for NCProtoEndedSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_98Tm);
}

uint64_t type metadata completion function for NCProtoEndedSessionEvent()
{
  return type metadata completion function for NCProtoEndedSessionEvent();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for NCProtoPendingConversationDisconnectedEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *char v3 = *a2;
    char v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for NCProtoPendingConversationDisconnectedEvent(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for NCProtoPendingConversationDisconnectedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for NCProtoPendingConversationDisconnectedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for NCProtoPendingConversationDisconnectedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for NCProtoPendingConversationDisconnectedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoPendingConversationDisconnectedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_100Tm);
}

uint64_t storeEnumTagSinglePayload for NCProtoPendingConversationDisconnectedEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_101Tm);
}

uint64_t type metadata completion function for NCProtoPendingConversationDisconnectedEvent()
{
  return type metadata completion function for NCProtoPendingConversationDisconnectedEvent();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NCProtoContactUpdateEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_103Tm);
}

uint64_t storeEnumTagSinglePayload for NCProtoContactUpdateEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_104Tm);
}

uint64_t type metadata completion function for NCProtoContactUpdateEvent()
{
  return type metadata completion function for NCProtoPendingConversationDisconnectedEvent();
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoJoinEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    outlined copy of Data._Representation(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    a1[4] = a2[4];
    uint64_t v11 = *(int *)(a3 + 28);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UnknownStorage();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for NCProtoJoinEvent(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *initializeWithCopy for NCProtoJoinEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  outlined copy of Data._Representation(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = a2[4];
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  return a1;
}

uint64_t *assignWithCopy for NCProtoJoinEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  outlined copy of Data._Representation(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  outlined consume of Data._Representation(v12, v13);
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t *assignWithTake for NCProtoJoinEvent(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  outlined consume of Data._Representation(v8, v9);
  a1[4] = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 28);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoJoinEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2574217C0);
}

uint64_t sub_2574217C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoJoinEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257421884);
}

uint64_t sub_257421884(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoJoinEvent()
{
  return type metadata completion function for NCProtoJoinEvent();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoRecentCallsDidChangeEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t destroy for NCProtoRecentCallsDidChangeEvent(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for NCProtoRecentCallsDidChangeEvent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for NCProtoRecentCallsDidChangeEvent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for NCProtoRecentCallsDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for NCProtoRecentCallsDidChangeEvent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoRecentCallsDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257421D94);
}

uint64_t sub_257421D94(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoRecentCallsDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257421E58);
}

void *sub_257421E58(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoRecentCallsDidChangeEvent()
{
  return type metadata completion function for NCProtoJoinEvent();
}

uint64_t getEnumTagSinglePayload for NCProtoFavoritesDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_82Tm_0);
}

uint64_t storeEnumTagSinglePayload for NCProtoFavoritesDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_83Tm_0);
}

uint64_t type metadata completion function for NCProtoFavoritesDidChangeEvent()
{
  return type metadata completion function for NCProtoEndedSessionEvent();
}

uint64_t getEnumTagSinglePayload for NCProtoActiveConversationsDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_82Tm_1);
}

uint64_t storeEnumTagSinglePayload for NCProtoActiveConversationsDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_83Tm_1);
}

uint64_t getEnumTagSinglePayload for NCProtoContinuityCallsDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_82Tm_2);
}

uint64_t storeEnumTagSinglePayload for NCProtoContinuityCallsDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_83Tm_2);
}

void *initializeBufferWithCopyOfBuffer for NCProtoSuggestionAdvertisement(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = a2[4];
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (uint64_t)a2 + v7;
    uint64_t v9 = a1 + v7;
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v8, v10);
  }
  return v3;
}

uint64_t destroy for NCProtoSuggestionAdvertisement(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for NCProtoSuggestionAdvertisement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a2 + v6;
  uint64_t v8 = a1 + v6;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for NCProtoSuggestionAdvertisement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for NCProtoSuggestionAdvertisement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for NCProtoSuggestionAdvertisement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoSuggestionAdvertisement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_121Tm);
}

uint64_t storeEnumTagSinglePayload for NCProtoSuggestionAdvertisement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_122Tm);
}

uint64_t type metadata completion function for NCProtoSuggestionAdvertisement()
{
  return type metadata completion function for NCProtoJoinEvent();
}

ValueMetadata *type metadata accessor for NCProtoSuggestionAdvertisement.SuggestionType()
{
  return &type metadata for NCProtoSuggestionAdvertisement.SuggestionType;
}

char *initializeBufferWithCopyOfBuffer for NCProtoSuggestionAdvertisementDidChangeEvent(char *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, (char *)a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v16 = v11[1];
      *(void *)uint64_t v10 = *v11;
      *((void *)v10 + 1) = v16;
      uint64_t v17 = v11[3];
      *((void *)v10 + 2) = v11[2];
      *((void *)v10 + 3) = v17;
      *((void *)v10 + 4) = v11[4];
      v10[40] = *((unsigned char *)v11 + 40);
      uint64_t v18 = *(int *)(v12 + 28);
      uint64_t v19 = &v10[v18];
      uint64_t v20 = (char *)v11 + v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8(v19, v20, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v9(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = v5 + *(int *)(v6 + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v8, v4);
  }
  return result;
}

uint64_t initializeWithCopy for NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v14;
    uint64_t v15 = v10[3];
    v9[2] = v10[2];
    v9[3] = v15;
    v9[4] = v10[4];
    *((unsigned char *)v9 + 40) = *((unsigned char *)v10 + 40);
    uint64_t v16 = *(int *)(v11 + 28);
    uint64_t v17 = (char *)v9 + v16;
    uint64_t v18 = (char *)v10 + v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7((uint64_t)v17, (uint64_t)v18, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 24);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v25 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      *(void *)uint64_t v9 = *(void *)v10;
      *(void *)(v9 + 8) = *(void *)(v10 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v9 + 16) = *(void *)(v10 + 16);
      *(void *)(v9 + 24) = *(void *)(v10 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void *)(v10 + 32);
      *(unsigned char *)(v9 + 40) = *(unsigned char *)(v10 + 40);
      *(void *)(v9 + 32) = v23;
      v7(v9 + *(int *)(v11 + 28), v10 + *(int *)(v11 + 28), v6);
      return v25;
    }
    outlined destroy of NCProtoContactInfo(v9, type metadata accessor for NCProtoSuggestionAdvertisement);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
    memcpy((void *)v9, (const void *)v10, *(void *)(*(void *)(v21 - 8) + 64));
    return v25;
  }
  *(void *)uint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  *(void *)(v9 + 24) = *(void *)(v10 + 24);
  uint64_t v16 = *(void *)(v10 + 32);
  *(unsigned char *)(v9 + 40) = *(unsigned char *)(v10 + 40);
  *(void *)(v9 + 32) = v16;
  uint64_t v17 = *(int *)(v11 + 28);
  uint64_t v18 = v9 + v17;
  uint64_t v19 = v10 + v17;
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20(v18, v19, v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return v25;
}

char *initializeWithTake for NCProtoSuggestionAdvertisementDidChangeEvent(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    long long v14 = *((_OWORD *)v10 + 1);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v14;
    *((void *)v9 + 4) = *((void *)v10 + 4);
    v9[40] = v10[40];
    v7(&v9[*(int *)(v11 + 28)], &v10[*(int *)(v11 + 28)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v22 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for NCProtoSuggestionAdvertisement(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      uint64_t v19 = *(void *)(v10 + 8);
      *(void *)uint64_t v9 = *(void *)v10;
      *(void *)(v9 + 8) = v19;
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(v10 + 24);
      *(void *)(v9 + 16) = *(void *)(v10 + 16);
      *(void *)(v9 + 24) = v20;
      swift_bridgeObjectRelease();
      *(void *)(v9 + 32) = *(void *)(v10 + 32);
      *(unsigned char *)(v9 + 40) = *(unsigned char *)(v10 + 40);
      v7(v9 + *(int *)(v11 + 28), v10 + *(int *)(v11 + 28), v6);
      return v22;
    }
    outlined destroy of NCProtoContactInfo(v9, type metadata accessor for NCProtoSuggestionAdvertisement);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
    memcpy((void *)v9, (const void *)v10, *(void *)(*(void *)(v17 - 8) + 64));
    return v22;
  }
  long long v16 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v16;
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  *(unsigned char *)(v9 + 40) = *(unsigned char *)(v10 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v9 + *(int *)(v11 + 28), v10 + *(int *)(v11 + 28), v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return v22;
}

uint64_t getEnumTagSinglePayload for NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257422F50);
}

uint64_t sub_257422F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_130Tm(a1, a2, a3, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
}

uint64_t storeEnumTagSinglePayload for NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257422F70);
}

uint64_t sub_257422F70(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_131Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for NCProtoSuggestionAdvertisement?);
}

void type metadata completion function for NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoLagunaConnectionRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = a2[4];
    a1[3] = a2[3];
    a1[4] = v9;
    uint64_t v10 = *(int *)(a3 + 40);
    uint64_t v24 = (char *)a1 + v10;
    uint64_t v23 = (char *)a2 + v10;
    a1[5] = a2[5];
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v24, v23, v11);
    uint64_t v13 = *(int *)(a3 + 44);
    int v14 = (char *)v7 + v13;
    int v15 = (char *)a2 + v13;
    long long v16 = (int *)type metadata accessor for NCProtoCallState(0);
    uint64_t v17 = *((void *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      v14[v16[5]] = v15[v16[5]];
      v14[v16[6]] = v15[v16[6]];
      uint64_t v19 = v16[7];
      uint64_t v20 = &v14[v19];
      uint64_t v21 = &v15[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      *((_WORD *)v20 + 4) = *((_WORD *)v21 + 4);
      v14[v16[8]] = v15[v16[8]];
      (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v7;
}

uint64_t destroy for NCProtoLagunaConnectionRequest(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v9(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 44);
  uint64_t v7 = type metadata accessor for NCProtoCallState(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6, v5);
  }
  return result;
}

void *initializeWithCopy for NCProtoLagunaConnectionRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v22 = (char *)a1 + v7;
  uint64_t v20 = a2[5];
  uint64_t v21 = (char *)a2 + v7;
  a1[4] = a2[4];
  a1[5] = v20;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v22, v21, v8);
  uint64_t v10 = *(int *)(a3 + 44);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = (int *)type metadata accessor for NCProtoCallState(0);
  uint64_t v14 = *((void *)v13 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v9(v11, v12, v8);
    v11[v13[5]] = v12[v13[5]];
    v11[v13[6]] = v12[v13[6]];
    uint64_t v16 = v13[7];
    uint64_t v17 = &v11[v16];
    uint64_t v18 = &v12[v16];
    *(void *)uint64_t v17 = *(void *)v18;
    *((_WORD *)v17 + 4) = *((_WORD *)v18 + 4);
    v11[v13[8]] = v12[v13[8]];
    (*(void (**)(char *, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
  }
  return a1;
}

void *assignWithCopy for NCProtoLagunaConnectionRequest(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  uint64_t v12 = *(int *)(a3 + 44);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = (int *)type metadata accessor for NCProtoCallState(0);
  uint64_t v29 = *((void *)v15 - 1);
  uint64_t v30 = (uint64_t)v13;
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, int *))(v29 + 48);
  LODWORD(v13) = v16(v13, 1, v15);
  int v17 = v16(v14, 1, v15);
  if (v13)
  {
    if (!v17)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v30, v14, v9);
      *(unsigned char *)(v30 + v15[5]) = v14[v15[5]];
      *(unsigned char *)(v30 + v15[6]) = v14[v15[6]];
      uint64_t v20 = v15[7];
      uint64_t v21 = v30 + v20;
      uint64_t v22 = &v14[v20];
      __int16 v23 = *((_WORD *)v22 + 4);
      *(void *)uint64_t v21 = *(void *)v22;
      *(_WORD *)(v21 + 8) = v23;
      *(unsigned char *)(v30 + v15[8]) = v14[v15[8]];
      (*(void (**)(uint64_t, void, uint64_t, int *))(v29 + 56))(v30, 0, 1, v15);
      return a1;
    }
    size_t v18 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?)
                                - 8)
                    + 64);
    uint64_t v19 = (void *)v30;
  }
  else
  {
    if (!v17)
    {
      v11((char *)v30, v14, v9);
      *(unsigned char *)(v30 + v15[5]) = v14[v15[5]];
      *(unsigned char *)(v30 + v15[6]) = v14[v15[6]];
      uint64_t v24 = v15[7];
      uint64_t v25 = v30 + v24;
      uint64_t v26 = &v14[v24];
      __int16 v27 = *((_WORD *)v26 + 4);
      *(void *)uint64_t v25 = *(void *)v26;
      *(_WORD *)(v25 + 8) = v27;
      *(unsigned char *)(v30 + v15[8]) = v14[v15[8]];
      return a1;
    }
    outlined destroy of NCProtoContactInfo(v30, type metadata accessor for NCProtoCallState);
    size_t v18 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?)
                                - 8)
                    + 64);
    uint64_t v19 = (void *)v30;
  }
  memcpy(v19, v14, v18);
  return a1;
}

_OWORD *initializeWithTake for NCProtoLagunaConnectionRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 44);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = (int *)type metadata accessor for NCProtoCallState(0);
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    v13[v15[5]] = v14[v15[5]];
    v13[v15[6]] = v14[v15[6]];
    uint64_t v18 = v15[7];
    uint64_t v19 = &v13[v18];
    uint64_t v20 = &v14[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    *((_WORD *)v19 + 4) = *((_WORD *)v20 + 4);
    v13[v15[8]] = v14[v15[8]];
    (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

void *assignWithTake for NCProtoLagunaConnectionRequest(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  uint64_t v12 = *(int *)(a3 + 44);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = (int *)type metadata accessor for NCProtoCallState(0);
  uint64_t v27 = *((void *)v15 - 1);
  uint64_t v28 = (uint64_t)v13;
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, int *))(v27 + 48);
  LODWORD(v13) = v16(v13, 1, v15);
  int v17 = v16(v14, 1, v15);
  if (v13)
  {
    if (!v17)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v28, v14, v9);
      *(unsigned char *)(v28 + v15[5]) = v14[v15[5]];
      *(unsigned char *)(v28 + v15[6]) = v14[v15[6]];
      uint64_t v20 = v15[7];
      uint64_t v21 = v28 + v20;
      uint64_t v22 = &v14[v20];
      *(void *)uint64_t v21 = *(void *)v22;
      *(_WORD *)(v21 + 8) = *((_WORD *)v22 + 4);
      *(unsigned char *)(v28 + v15[8]) = v14[v15[8]];
      (*(void (**)(uint64_t, void, uint64_t, int *))(v27 + 56))(v28, 0, 1, v15);
      return a1;
    }
    size_t v18 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?)
                                - 8)
                    + 64);
    uint64_t v19 = (void *)v28;
  }
  else
  {
    if (!v17)
    {
      v11((char *)v28, v14, v9);
      *(unsigned char *)(v28 + v15[5]) = v14[v15[5]];
      *(unsigned char *)(v28 + v15[6]) = v14[v15[6]];
      uint64_t v23 = v15[7];
      uint64_t v24 = v28 + v23;
      uint64_t v25 = &v14[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      *(_WORD *)(v24 + 8) = *((_WORD *)v25 + 4);
      *(unsigned char *)(v28 + v15[8]) = v14[v15[8]];
      return a1;
    }
    outlined destroy of NCProtoContactInfo(v28, type metadata accessor for NCProtoCallState);
    size_t v18 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?)
                                - 8)
                    + 64);
    uint64_t v19 = (void *)v28;
  }
  memcpy(v19, v14, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoLagunaConnectionRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257423D14);
}

uint64_t sub_257423D14(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 40);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 44);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoLagunaConnectionRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257423E58);
}

void *sub_257423E58(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 40);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 44);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for NCProtoLagunaConnectionRequest()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for NCProtoContactInfo?(319, &lazy cache variable for type metadata for NCProtoCallState?, (void (*)(uint64_t))type metadata accessor for NCProtoCallState);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for NCProtoLagunaConnectionResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_136Tm);
}

uint64_t storeEnumTagSinglePayload for NCProtoLagunaConnectionResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_137Tm);
}

uint64_t getEnumTagSinglePayload for NCProtoDeviceLaunchedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_136Tm_0);
}

uint64_t storeEnumTagSinglePayload for NCProtoDeviceLaunchedEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_137Tm_0);
}

uint64_t getEnumTagSinglePayload for NCProtoTVLaunchedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_136Tm_1);
}

uint64_t storeEnumTagSinglePayload for NCProtoTVLaunchedEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_137Tm_1);
}

uint64_t getEnumTagSinglePayload for NCProtoCancelAddMemberEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_97Tm_0);
}

uint64_t storeEnumTagSinglePayload for NCProtoCancelAddMemberEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_98Tm_0);
}

uint64_t getEnumTagSinglePayload for NCProtoEndLagunaSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_136Tm_2);
}

uint64_t storeEnumTagSinglePayload for NCProtoEndLagunaSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_137Tm_2);
}

uint64_t getEnumTagSinglePayload for NCProtoPolicyInfoUpdatedEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_82Tm_3);
}

uint64_t storeEnumTagSinglePayload for NCProtoPolicyInfoUpdatedEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_83Tm_3);
}

void *initializeBufferWithCopyOfBuffer for NCProtoAddMemberRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[2];
    uint64_t v9 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v9;
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v10 = *(int *)(a3 + 28);
    uint64_t v11 = a1 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    *(void *)(a1 + 16) = v8;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    uint64_t v15 = *(int *)(a3 + 32);
    uint64_t v16 = (char *)v4 + v15;
    int v17 = (uint64_t *)((char *)a2 + v15);
    unint64_t v18 = v17[1];
    if (v18 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    }
    else
    {
      uint64_t v20 = *v17;
      outlined copy of Data._Representation(*v17, v17[1]);
      *(void *)uint64_t v16 = v20;
      *((void *)v16 + 1) = v18;
    }
  }
  return v4;
}

uint64_t destroy for NCProtoAddMemberRequest(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(a2 + 32));
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *v7;
    return outlined consume of Data._Representation(v9, v8);
  }
  return result;
}

uint64_t initializeWithCopy for NCProtoAddMemberRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(void *)(a1 + 16) = v7;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = (uint64_t *)(a2 + v14);
  unint64_t v17 = v16[1];
  if (v17 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  }
  else
  {
    uint64_t v18 = *v16;
    outlined copy of Data._Representation(*v16, v16[1]);
    *(void *)uint64_t v15 = v18;
    *(void *)(v15 + 8) = v17;
  }
  return a1;
}

uint64_t assignWithCopy for NCProtoAddMemberRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  unint64_t v14 = *(void *)(a2 + v11 + 8);
  if (*(void *)(a1 + v11 + 8) >> 60 != 15)
  {
    if (v14 >> 60 != 15)
    {
      uint64_t v16 = *v13;
      outlined copy of Data._Representation(v16, v14);
      uint64_t v17 = *v12;
      unint64_t v18 = v12[1];
      uint64_t *v12 = v16;
      v12[1] = v14;
      outlined consume of Data._Representation(v17, v18);
      return a1;
    }
    outlined destroy of Data((uint64_t)v12);
    goto LABEL_6;
  }
  if (v14 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    return a1;
  }
  uint64_t v15 = *v13;
  outlined copy of Data._Representation(v15, v14);
  uint64_t *v12 = v15;
  v12[1] = v14;
  return a1;
}

uint64_t initializeWithTake for NCProtoAddMemberRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(_OWORD *)(a1 + *(int *)(a3 + 32)) = *(_OWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithTake for NCProtoAddMemberRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (uint64_t *)(a1 + v12);
  unint64_t v14 = (uint64_t *)(a2 + v12);
  unint64_t v15 = *(void *)(a1 + v12 + 8);
  if (v15 >> 60 != 15)
  {
    unint64_t v16 = v14[1];
    if (v16 >> 60 != 15)
    {
      uint64_t v17 = *v13;
      uint64_t *v13 = *v14;
      v13[1] = v16;
      outlined consume of Data._Representation(v17, v15);
      return a1;
    }
    outlined destroy of Data((uint64_t)v13);
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoAddMemberRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2574247E4);
}

uint64_t __swift_get_extra_inhabitant_index_121Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoAddMemberRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2574248AC);
}

uint64_t __swift_store_extra_inhabitant_index_122Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoAddMemberRequest()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NCProtoAddMemberRequest.NearbyConversationPullContext()
{
  return &type metadata for NCProtoAddMemberRequest.NearbyConversationPullContext;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoContactUpdateEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    a1[2] = a2[2];
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for NCProtoContactUpdateEvent(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *initializeWithCopy for NCProtoContactUpdateEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = a2[2];
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  return a1;
}

uint64_t *assignWithCopy for NCProtoContactUpdateEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for NCProtoContactUpdateEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for NCProtoContactUpdateEvent(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoAddMemberResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257424E40);
}

uint64_t __swift_get_extra_inhabitant_index_103Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoAddMemberResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257424F08);
}

uint64_t __swift_store_extra_inhabitant_index_104Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NCProtoPullLagunaSessionToTVRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_97Tm_1);
}

uint64_t storeEnumTagSinglePayload for NCProtoPullLagunaSessionToTVRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_98Tm_1);
}

uint64_t type metadata completion function for NCProtoPullLagunaSessionToTVRequest()
{
  return type metadata completion function for NCProtoPullLagunaSessionToTVRequest();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NCProtoPullLagunaSessionToTVRequest.Reason()
{
  return &type metadata for NCProtoPullLagunaSessionToTVRequest.Reason;
}

uint64_t getEnumTagSinglePayload for NCProtoPullLagunaSessionToTVResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_136Tm_3);
}

uint64_t storeEnumTagSinglePayload for NCProtoPullLagunaSessionToTVResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_137Tm_3);
}

void *initializeBufferWithCopyOfBuffer for NCProtoTransferActiveConversationRequest(void *a1, void *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    *((unsigned char *)v4 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    *((unsigned char *)v4 + v13) = *((unsigned char *)a2 + v13);
  }
  return v4;
}

void *initializeWithCopy for NCProtoTransferActiveConversationRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  return a1;
}

void *assignWithCopy for NCProtoTransferActiveConversationRequest(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  return a1;
}

_OWORD *initializeWithTake for NCProtoTransferActiveConversationRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
  return a1;
}

void *assignWithTake for NCProtoTransferActiveConversationRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoTransferActiveConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_97Tm_2);
}

uint64_t storeEnumTagSinglePayload for NCProtoTransferActiveConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_98Tm_2);
}

uint64_t type metadata completion function for NCProtoTransferActiveConversationRequest()
{
  return type metadata completion function for NCProtoTransferActiveConversationRequest();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NCProtoTransferActiveConversationResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_136Tm_4);
}

uint64_t storeEnumTagSinglePayload for NCProtoTransferActiveConversationResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_137Tm_4);
}

void *initializeBufferWithCopyOfBuffer for NCProtoTransferContinuityCallRequest(void *a1, void *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    *((unsigned char *)v4 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

void *initializeWithCopy for NCProtoTransferContinuityCallRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithCopy for NCProtoTransferContinuityCallRequest(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *initializeWithTake for NCProtoTransferContinuityCallRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithTake for NCProtoTransferContinuityCallRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoTransferContinuityCallRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_97Tm_3);
}

uint64_t storeEnumTagSinglePayload for NCProtoTransferContinuityCallRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_98Tm_3);
}

uint64_t type metadata completion function for NCProtoTransferContinuityCallRequest()
{
  return type metadata completion function for NCProtoPullLagunaSessionToTVRequest();
}

uint64_t getEnumTagSinglePayload for NCProtoTransferContinuityCallResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_136Tm_5);
}

uint64_t storeEnumTagSinglePayload for NCProtoTransferContinuityCallResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_137Tm_5);
}

uint64_t getEnumTagSinglePayload for NCProtoStartLagunaSessionRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_82Tm_4);
}

uint64_t storeEnumTagSinglePayload for NCProtoStartLagunaSessionRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_83Tm_4);
}

ValueMetadata *type metadata accessor for NCProtoStartLagunaSessionRequest.RecentCallFetchType()
{
  return &type metadata for NCProtoStartLagunaSessionRequest.RecentCallFetchType;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoSenderIdentity(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for NCProtoSenderIdentity(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for NCProtoSenderIdentity(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

void *assignWithCopy for NCProtoSenderIdentity(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for NCProtoSenderIdentity(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *assignWithTake for NCProtoSenderIdentity(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoSenderIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257425CE8);
}

uint64_t __swift_get_extra_inhabitant_index_100Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoSenderIdentity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257425DB0);
}

uint64_t __swift_store_extra_inhabitant_index_101Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoSenderIdentity()
{
  return type metadata completion function for NCProtoPendingConversationDisconnectedEvent();
}

void *initializeBufferWithCopyOfBuffer for NCProtoCallInfo(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    uint64_t v44 = v12;
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    unint64_t v15 = (void *)((char *)v7 + v13);
    unint64_t v16 = (void *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    unint64_t v18 = (void *)((char *)v7 + v14);
    uint64_t v19 = (void *)((char *)a2 + v14);
    uint64_t v20 = v19[1];
    *unint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = a3[8];
    uint64_t v22 = a3[9];
    uint64_t v23 = (void *)((char *)v7 + v21);
    uint64_t v24 = (void *)((char *)a2 + v21);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    LOBYTE(v24) = *((unsigned char *)a2 + v22);
    *uint64_t v23 = v25;
    v23[1] = v26;
    *((unsigned char *)v7 + v22) = (_BYTE)v24;
    uint64_t v27 = a3[10];
    __dst = (void *)((char *)v7 + v27);
    uint64_t v28 = (void *)((char *)a2 + v27);
    uint64_t v29 = type metadata accessor for NCProtoSenderIdentity(0);
    uint64_t v43 = *(void *)(v29 - 8);
    uint64_t v30 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v43 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v30(v28, 1, v29))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
      memcpy(__dst, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      uint64_t v32 = v28[1];
      void *__dst = *v28;
      __dst[1] = v32;
      uint64_t v33 = v28[3];
      __dst[2] = v28[2];
      __dst[3] = v33;
      uint64_t v34 = *(int *)(v29 + 24);
      uint64_t v35 = (char *)__dst + v34;
      uint64_t v36 = (char *)v28 + v34;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v44(v35, v36, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(__dst, 0, 1, v29);
    }
    uint64_t v37 = a3[11];
    uint64_t v38 = (char *)v7 + v37;
    uint64_t v39 = (char *)a2 + v37;
    unint64_t v40 = *((void *)v39 + 1);
    if (v40 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
    }
    else
    {
      uint64_t v41 = *(void *)v39;
      outlined copy of Data._Representation(*(void *)v39, *((void *)v39 + 1));
      *(void *)uint64_t v38 = v41;
      *((void *)v38 + 1) = v40;
    }
  }
  return v7;
}

uint64_t destroy for NCProtoCallInfo(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + a2[10];
  uint64_t v8 = type metadata accessor for NCProtoSenderIdentity(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v6)(v7 + *(int *)(v8 + 24), v5);
  }
  uint64_t v10 = (uint64_t *)(a1 + a2[11]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15)
  {
    uint64_t v12 = *v10;
    return outlined consume of Data._Representation(v12, v11);
  }
  return result;
}

void *initializeWithCopy for NCProtoCallInfo(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  unint64_t v42 = v10;
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)((char *)a1 + v11);
  uint64_t v14 = (void *)((char *)a2 + v11);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  v13[1] = v15;
  unint64_t v16 = (void *)((char *)a1 + v12);
  uint64_t v17 = (void *)((char *)a2 + v12);
  uint64_t v18 = v17[1];
  *unint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = (void *)((char *)a1 + v19);
  uint64_t v22 = (void *)((char *)a2 + v19);
  uint64_t v23 = *v22;
  uint64_t v24 = v22[1];
  LOBYTE(v22) = *((unsigned char *)a2 + v20);
  *uint64_t v21 = v23;
  v21[1] = v24;
  *((unsigned char *)a1 + v20) = (_BYTE)v22;
  uint64_t v25 = a3[10];
  __dst = (void *)((char *)a1 + v25);
  uint64_t v26 = (void *)((char *)a2 + v25);
  uint64_t v27 = type metadata accessor for NCProtoSenderIdentity(0);
  uint64_t v41 = *(void *)(v27 - 8);
  uint64_t v28 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v41 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v28(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
    memcpy(__dst, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    uint64_t v30 = v26[1];
    void *__dst = *v26;
    __dst[1] = v30;
    uint64_t v31 = v26[3];
    __dst[2] = v26[2];
    __dst[3] = v31;
    uint64_t v32 = *(int *)(v27 + 24);
    uint64_t v33 = (char *)__dst + v32;
    uint64_t v34 = (char *)v26 + v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42(v33, v34, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(__dst, 0, 1, v27);
  }
  uint64_t v35 = a3[11];
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = (char *)a2 + v35;
  unint64_t v38 = *((void *)v37 + 1);
  if (v38 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
  }
  else
  {
    uint64_t v39 = *(void *)v37;
    outlined copy of Data._Representation(*(void *)v37, *((void *)v37 + 1));
    *(void *)uint64_t v36 = v39;
    *((void *)v36 + 1) = v38;
  }
  return a1;
}

void *assignWithCopy for NCProtoCallInfo(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v42 = type metadata accessor for UnknownStorage();
  uint64_t v40 = *(void *)(v42 - 8);
  uint64_t v41 = *(void (**)(char *, char *))(v40 + 24);
  v41(v7, v8);
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)((char *)a1 + v9);
  uint64_t v11 = (void *)((char *)a2 + v9);
  *uint64_t v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  void *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[8];
  unint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  *unint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  uint64_t v43 = a3;
  uint64_t v18 = a3[10];
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  uint64_t v21 = type metadata accessor for NCProtoSenderIdentity(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      *uint64_t v19 = *v20;
      v19[1] = v20[1];
      v19[2] = v20[2];
      v19[3] = v20[3];
      uint64_t v26 = *(int *)(v21 + 24);
      uint64_t v27 = (char *)v19 + v26;
      uint64_t v28 = (char *)v20 + v26;
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29(v27, v28, v42);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    outlined destroy of NCProtoContactInfo((uint64_t)v19, type metadata accessor for NCProtoSenderIdentity);
LABEL_6:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
    memcpy(v19, v20, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[2] = v20[2];
  v19[3] = v20[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v41)((char *)v19 + *(int *)(v21 + 24), (char *)v20 + *(int *)(v21 + 24), v42);
LABEL_7:
  uint64_t v31 = v43[11];
  uint64_t v32 = (void *)((char *)a1 + v31);
  uint64_t v33 = (void *)((char *)a2 + v31);
  unint64_t v34 = *(void *)((char *)a2 + v31 + 8);
  if (*(void *)((char *)a1 + v31 + 8) >> 60 != 15)
  {
    if (v34 >> 60 != 15)
    {
      uint64_t v36 = *v33;
      outlined copy of Data._Representation(v36, v34);
      uint64_t v37 = *v32;
      unint64_t v38 = v32[1];
      *uint64_t v32 = v36;
      v32[1] = v34;
      outlined consume of Data._Representation(v37, v38);
      return a1;
    }
    outlined destroy of Data((uint64_t)v32);
    goto LABEL_12;
  }
  if (v34 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    return a1;
  }
  uint64_t v35 = *v33;
  outlined copy of Data._Representation(v35, v34);
  *uint64_t v32 = v35;
  v32[1] = v34;
  return a1;
}

void *initializeWithTake for NCProtoCallInfo(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  uint64_t v12 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  uint64_t v13 = a3[10];
  uint64_t v14 = (_OWORD *)((char *)a1 + v13);
  uint64_t v15 = (_OWORD *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for NCProtoSenderIdentity(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    long long v19 = v15[1];
    _OWORD *v14 = *v15;
    v14[1] = v19;
    v10((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  return a1;
}

void *assignWithTake for NCProtoCallInfo(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v45 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v45 - 8);
  uint64_t v44 = *(void (**)(char *, char *))(v43 + 40);
  v44(v7, v8);
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)((char *)a1 + v9);
  uint64_t v11 = (void *)((char *)a2 + v9);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *uint64_t v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  void *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[8];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  int v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  uint64_t v27 = type metadata accessor for NCProtoSenderIdentity(0);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      long long v32 = *((_OWORD *)v26 + 1);
      *(_OWORD *)int v25 = *(_OWORD *)v26;
      *((_OWORD *)v25 + 1) = v32;
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v45);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v31)
  {
    outlined destroy of NCProtoContactInfo((uint64_t)v25, type metadata accessor for NCProtoSenderIdentity);
LABEL_6:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
    memcpy(v25, v26, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v41 = v26[1];
  *int v25 = *v26;
  v25[1] = v41;
  swift_bridgeObjectRelease();
  uint64_t v42 = v26[3];
  v25[2] = v26[2];
  v25[3] = v42;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v44)((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v45);
LABEL_7:
  uint64_t v34 = a3[11];
  uint64_t v35 = (void *)((char *)a1 + v34);
  uint64_t v36 = (void *)((char *)a2 + v34);
  unint64_t v37 = *(void *)((char *)a1 + v34 + 8);
  if (v37 >> 60 != 15)
  {
    unint64_t v38 = v36[1];
    if (v38 >> 60 != 15)
    {
      uint64_t v39 = *v35;
      *uint64_t v35 = *v36;
      v35[1] = v38;
      outlined consume of Data._Representation(v39, v37);
      return a1;
    }
    outlined destroy of Data((uint64_t)v35);
  }
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoCallInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257426DA4);
}

uint64_t sub_257426DA4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 40);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoCallInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257426EE8);
}

void *sub_257426EE8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 40);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for NCProtoCallInfo()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for NCProtoContactInfo?(319, &lazy cache variable for type metadata for NCProtoSenderIdentity?, (void (*)(uint64_t))type metadata accessor for NCProtoSenderIdentity);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoStartLagunaSessionResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    uint64_t v7 = a2[4];
    a1[3] = a2[3];
    a1[4] = v7;
    uint64_t v8 = *(int *)(a3 + 40);
    uint64_t v12 = (char *)a2 + v8;
    uint64_t v13 = (char *)a1 + v8;
    a1[5] = a2[5];
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v13, v12, v9);
  }
  return v5;
}

uint64_t destroy for NCProtoStartLagunaSessionResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for NCProtoStartLagunaSessionResponse(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v11 = (char *)a2 + v7;
  uint64_t v12 = (char *)a1 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v12, v11, v8);
  return a1;
}

void *assignWithCopy for NCProtoStartLagunaSessionResponse(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for NCProtoStartLagunaSessionResponse(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 40);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *assignWithTake for NCProtoStartLagunaSessionResponse(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoStartLagunaSessionResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257427660);
}

uint64_t sub_257427660(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoStartLagunaSessionResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257427724);
}

void *sub_257427724(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 40);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoStartLagunaSessionResponse()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoStartConversationRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(void *)uint64_t v9 = *(void *)v10;
    *((_WORD *)v9 + 4) = *((_WORD *)v10 + 4);
  }
  return a1;
}

uint64_t initializeWithCopy for NCProtoStartConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(_WORD *)(v8 + 8) = *(_WORD *)(v9 + 8);
  return a1;
}

uint64_t assignWithCopy for NCProtoStartConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  __int16 v10 = *(_WORD *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(_WORD *)(v8 + 8) = v10;
  return a1;
}

uint64_t initializeWithTake for NCProtoStartConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(_WORD *)(v8 + 8) = *(_WORD *)(v9 + 8);
  return a1;
}

uint64_t assignWithTake for NCProtoStartConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(_WORD *)(v8 + 8) = *(_WORD *)(v9 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoStartConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_136Tm_6);
}

uint64_t storeEnumTagSinglePayload for NCProtoStartConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_137Tm_6);
}

uint64_t type metadata completion function for NCProtoStartConversationRequest()
{
  return type metadata completion function for NCProtoStartConversationRequest();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NCProtoStartConversationResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_136Tm_7);
}

uint64_t storeEnumTagSinglePayload for NCProtoStartConversationResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_137Tm_7);
}

void *initializeBufferWithCopyOfBuffer for NCProtoJoinActiveConversationRequest(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    __int16 v10 = (void *)((char *)a1 + v8);
    uint64_t v11 = (void *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *__int16 v10 = *v11;
    v10[1] = v12;
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t initializeWithCopy for NCProtoJoinActiveConversationRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  __int16 v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NCProtoJoinActiveConversationRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for NCProtoJoinActiveConversationRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for NCProtoJoinActiveConversationRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  void *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoJoinActiveConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_214Tm);
}

uint64_t storeEnumTagSinglePayload for NCProtoJoinActiveConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_215Tm);
}

uint64_t type metadata completion function for NCProtoJoinActiveConversationRequest()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NCProtoJoinActiveConversationResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_136Tm_8);
}

uint64_t storeEnumTagSinglePayload for NCProtoJoinActiveConversationResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_137Tm_8);
}

uint64_t getEnumTagSinglePayload for NCProtoCreateLinkConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_97Tm_4);
}

uint64_t storeEnumTagSinglePayload for NCProtoCreateLinkConversationRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_98Tm_4);
}

uint64_t getEnumTagSinglePayload for NCProtoCreateLinkConversationResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_214Tm_0);
}

uint64_t storeEnumTagSinglePayload for NCProtoCreateLinkConversationResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_215Tm_0);
}

uint64_t type metadata completion function for NCProtoCreateLinkConversationResponse()
{
  return type metadata completion function for NCProtoStartConversationRequest();
}

uint64_t getEnumTagSinglePayload for NCProtoLinkConversationSendLetMeInRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_214Tm_1);
}

uint64_t storeEnumTagSinglePayload for NCProtoLinkConversationSendLetMeInRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_215Tm_1);
}

uint64_t getEnumTagSinglePayload for NCProtoLinkConversationSendLetMeInResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_136Tm_9);
}

uint64_t storeEnumTagSinglePayload for NCProtoLinkConversationSendLetMeInResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_137Tm_9);
}

uint64_t getEnumTagSinglePayload for NCProtoLinkConversationCancelRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_214Tm_2);
}

uint64_t storeEnumTagSinglePayload for NCProtoLinkConversationCancelRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_215Tm_2);
}

uint64_t getEnumTagSinglePayload for NCProtoLinkConversationCancelResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_136Tm_10);
}

uint64_t storeEnumTagSinglePayload for NCProtoLinkConversationCancelResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_137Tm_10);
}

uint64_t getEnumTagSinglePayload for NCProtoDeclineContinuityCallRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_214Tm_3);
}

uint64_t storeEnumTagSinglePayload for NCProtoDeclineContinuityCallRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_215Tm_3);
}

uint64_t getEnumTagSinglePayload for NCProtoDeclineContinuityCallResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_136Tm_11);
}

uint64_t storeEnumTagSinglePayload for NCProtoDeclineContinuityCallResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_137Tm_11);
}

uint64_t getEnumTagSinglePayload for NCProtoGetAddressableContactsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_136Tm_12);
}

uint64_t storeEnumTagSinglePayload for NCProtoGetAddressableContactsRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_137Tm_12);
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoGetAddressableContactsResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    *(void *)uint64_t v14 = *(void *)v15;
    v14[8] = v15[8];
  }
  return v7;
}

void *initializeWithCopy for NCProtoGetAddressableContactsResponse(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  return a1;
}

void *assignWithCopy for NCProtoGetAddressableContactsResponse(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  char v13 = v12[8];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v13;
  return a1;
}

void *initializeWithTake for NCProtoGetAddressableContactsResponse(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  return a1;
}

void *assignWithTake for NCProtoGetAddressableContactsResponse(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoGetAddressableContactsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_82Tm_5);
}

uint64_t storeEnumTagSinglePayload for NCProtoGetAddressableContactsResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_83Tm_5);
}

uint64_t type metadata completion function for NCProtoGetAddressableContactsResponse()
{
  return type metadata completion function for NCProtoPullLagunaSessionToTVRequest();
}

uint64_t getEnumTagSinglePayload for NCProtoGetImageForContactRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_97Tm_5);
}

uint64_t storeEnumTagSinglePayload for NCProtoGetImageForContactRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_98Tm_5);
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoGetImageForContactResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *(void *)v10;
      outlined copy of Data._Representation(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
  }
  return a1;
}

uint64_t destroy for NCProtoGetImageForContactResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15)
  {
    uint64_t v8 = *v6;
    return outlined consume of Data._Representation(v8, v7);
  }
  return result;
}

uint64_t initializeWithCopy for NCProtoGetImageForContactResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  return a1;
}

uint64_t assignWithCopy for NCProtoGetImageForContactResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v12 = *v9;
      outlined copy of Data._Representation(v12, v10);
      uint64_t v13 = *v8;
      unint64_t v14 = v8[1];
      uint64_t *v8 = v12;
      v8[1] = v10;
      outlined consume of Data._Representation(v13, v14);
      return a1;
    }
    outlined destroy of Data((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    return a1;
  }
  uint64_t v11 = *v9;
  outlined copy of Data._Representation(v11, v10);
  uint64_t *v8 = v11;
  v8[1] = v10;
  return a1;
}

uint64_t assignWithTake for NCProtoGetImageForContactResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v8;
      uint64_t *v8 = *v9;
      v8[1] = v11;
      outlined consume of Data._Representation(v12, v10);
      return a1;
    }
    outlined destroy of Data((uint64_t)v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoGetImageForContactResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257428A84);
}

uint64_t sub_257428A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    BOOL v11 = ((4 * v10) & 0xC) == 0;
    unsigned int v12 = ((4 * v10) & 0xC | (v10 >> 2)) ^ 0xF;
    if (v11) {
      return 0;
    }
    else {
      return v12;
    }
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoGetImageForContactResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257428B64);
}

uint64_t sub_257428B64(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    BOOL v11 = (void *)(a1 + *(int *)(a4 + 20));
    *BOOL v11 = 0;
    v11[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
  }
  return result;
}

uint64_t type metadata completion function for NCProtoGetImageForContactResponse()
{
  return type metadata completion function for NCProtoStartConversationRequest();
}

uint64_t getEnumTagSinglePayload for NCProtoAddConversationParticipantsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_82Tm_6);
}

uint64_t storeEnumTagSinglePayload for NCProtoAddConversationParticipantsRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_83Tm_6);
}

uint64_t getEnumTagSinglePayload for NCProtoAddConversationParticipantsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_136Tm_13);
}

uint64_t storeEnumTagSinglePayload for NCProtoAddConversationParticipantsResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_137Tm_13);
}

uint64_t getEnumTagSinglePayload for NCProtoGetCallDisplayDetailsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_97Tm_6);
}

uint64_t storeEnumTagSinglePayload for NCProtoGetCallDisplayDetailsRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_98Tm_6);
}

char *initializeBufferWithCopyOfBuffer for NCProtoGetCallDisplayDetailsResponse(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = &a1[v9];
    BOOL v11 = &a2[v9];
    unsigned int v12 = (int *)type metadata accessor for NCProtoCallInfo(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v47 = v13;
      *(void *)uint64_t v10 = *(void *)v11;
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      swift_bridgeObjectRetain();
      uint64_t v46 = v8;
      v8(v17, v18, v7);
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      uint64_t v50 = *((void *)v21 + 1);
      *(void *)uint64_t v20 = *(void *)v21;
      *((void *)v20 + 1) = v50;
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      uint64_t v25 = *((void *)v24 + 1);
      *(void *)uint64_t v23 = *(void *)v24;
      *((void *)v23 + 1) = v25;
      uint64_t v26 = v12[8];
      uint64_t v27 = &v10[v26];
      uint64_t v28 = &v11[v26];
      uint64_t v29 = *((void *)v28 + 1);
      *(void *)uint64_t v27 = *(void *)v28;
      *((void *)v27 + 1) = v29;
      v10[v12[9]] = v11[v12[9]];
      uint64_t v30 = v12[10];
      __dst = &v10[v30];
      int v31 = &v11[v30];
      uint64_t v32 = type metadata accessor for NCProtoSenderIdentity(0);
      uint64_t v45 = *(void *)(v32 - 8);
      uint64_t v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v49(v31, 1, v32))
      {
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
        memcpy(__dst, v31, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        uint64_t v34 = *((void *)v31 + 1);
        *(void *)__dst = *(void *)v31;
        *((void *)__dst + 1) = v34;
        uint64_t v35 = *((void *)v31 + 3);
        *((void *)__dst + 2) = *((void *)v31 + 2);
        *((void *)__dst + 3) = v35;
        uint64_t v36 = *(int *)(v32 + 24);
        unint64_t v37 = &__dst[v36];
        unint64_t v38 = &v31[v36];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v46(v37, v38, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(__dst, 0, 1, v32);
      }
      uint64_t v39 = v12[11];
      uint64_t v40 = &v10[v39];
      uint64_t v41 = &v11[v39];
      unint64_t v42 = *((void *)v41 + 1);
      if (v42 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
      }
      else
      {
        uint64_t v43 = *(void *)v41;
        outlined copy of Data._Representation(*(void *)v41, *((void *)v41 + 1));
        *(void *)uint64_t v40 = v43;
        *((void *)v40 + 1) = v42;
      }
      (*(void (**)(char *, void, uint64_t, int *))(v47 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = (int *)type metadata accessor for NCProtoCallInfo(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((void *)v7 - 1) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    v5(v6 + v7[5], v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + v7[10];
    uint64_t v10 = type metadata accessor for NCProtoSenderIdentity(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
    if (!result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v5)(v9 + *(int *)(v10 + 24), v4);
    }
    BOOL v11 = (uint64_t *)(v6 + v7[11]);
    unint64_t v12 = v11[1];
    if (v12 >> 60 != 15)
    {
      uint64_t v13 = *v11;
      return outlined consume of Data._Representation(v13, v12);
    }
  }
  return result;
}

char *initializeWithCopy for NCProtoGetCallDisplayDetailsResponse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  BOOL v11 = (int *)type metadata accessor for NCProtoCallInfo(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v46 = v12;
    *(void *)uint64_t v9 = *(void *)v10;
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    swift_bridgeObjectRetain();
    uint64_t v45 = v7;
    v7(v15, v16, v6);
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    uint64_t v20 = *((void *)v19 + 1);
    *(void *)uint64_t v18 = *(void *)v19;
    *((void *)v18 + 1) = v20;
    uint64_t v21 = v11[7];
    uint64_t v22 = &v9[v21];
    uint64_t v23 = &v10[v21];
    uint64_t v24 = *((void *)v23 + 1);
    *(void *)uint64_t v22 = *(void *)v23;
    *((void *)v22 + 1) = v24;
    uint64_t v25 = v11[8];
    uint64_t v26 = &v9[v25];
    uint64_t v27 = &v10[v25];
    uint64_t v28 = *((void *)v27 + 1);
    *(void *)uint64_t v26 = *(void *)v27;
    *((void *)v26 + 1) = v28;
    v9[v11[9]] = v10[v11[9]];
    uint64_t v29 = v11[10];
    __dst = &v9[v29];
    uint64_t v30 = &v10[v29];
    uint64_t v31 = type metadata accessor for NCProtoSenderIdentity(0);
    uint64_t v44 = *(void *)(v31 - 8);
    uint64_t v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v47(v30, 1, v31))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
      memcpy(__dst, v30, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      uint64_t v33 = *((void *)v30 + 1);
      *(void *)__dst = *(void *)v30;
      *((void *)__dst + 1) = v33;
      uint64_t v34 = *((void *)v30 + 3);
      *((void *)__dst + 2) = *((void *)v30 + 2);
      *((void *)__dst + 3) = v34;
      uint64_t v35 = *(int *)(v31 + 24);
      uint64_t v36 = &__dst[v35];
      unint64_t v37 = &v30[v35];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v45(v36, v37, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(__dst, 0, 1, v31);
    }
    uint64_t v38 = v11[11];
    uint64_t v39 = &v9[v38];
    uint64_t v40 = &v10[v38];
    unint64_t v41 = *((void *)v40 + 1);
    if (v41 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
    }
    else
    {
      uint64_t v42 = *(void *)v40;
      outlined copy of Data._Representation(*(void *)v40, *((void *)v40 + 1));
      *(void *)uint64_t v39 = v42;
      *((void *)v39 + 1) = v41;
    }
    (*(void (**)(char *, void, uint64_t, int *))(v46 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v81 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(v81 + 24);
  uint64_t v80 = v6;
  ((void (*)(uint64_t, uint64_t))v7)(a1, a2);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  BOOL v11 = (int *)type metadata accessor for NCProtoCallInfo(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      outlined destroy of NCProtoContactInfo((uint64_t)v9, type metadata accessor for NCProtoCallInfo);
      goto LABEL_7;
    }
    uint64_t v79 = a1;
    *(void *)uint64_t v9 = *(void *)v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v7(&v9[v11[5]], &v10[v11[5]], v80);
    uint64_t v34 = v11[6];
    uint64_t v35 = &v9[v34];
    uint64_t v36 = &v10[v34];
    *(void *)uint64_t v35 = *(void *)v36;
    *((void *)v35 + 1) = *((void *)v36 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v37 = v11[7];
    uint64_t v38 = &v9[v37];
    uint64_t v39 = &v10[v37];
    *(void *)uint64_t v38 = *(void *)v39;
    *((void *)v38 + 1) = *((void *)v39 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v40 = v11[8];
    unint64_t v41 = &v9[v40];
    uint64_t v42 = &v10[v40];
    *(void *)unint64_t v41 = *(void *)v42;
    *((void *)v41 + 1) = *((void *)v42 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v9[v11[9]] = v10[v11[9]];
    uint64_t v43 = v11[10];
    uint64_t v44 = &v9[v43];
    uint64_t v45 = &v10[v43];
    uint64_t v46 = type metadata accessor for NCProtoSenderIdentity(0);
    uint64_t v74 = *(void *)(v46 - 8);
    uint64_t v76 = v44;
    uint64_t v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48);
    LODWORD(v44) = v47(v44, 1, v46);
    int v48 = v47(v45, 1, v46);
    if (v44)
    {
      if (v48)
      {
        size_t v49 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?)
                                    - 8)
                        + 64);
        uint64_t v50 = v76;
LABEL_18:
        memcpy(v50, v45, v49);
        goto LABEL_21;
      }
      *uint64_t v76 = *(void *)v45;
      v76[1] = *((void *)v45 + 1);
      v76[2] = *((void *)v45 + 2);
      v76[3] = *((void *)v45 + 3);
      uint64_t v59 = *(int *)(v46 + 24);
      uint64_t v60 = (char *)v76 + v59;
      uint64_t v61 = &v45[v59];
      uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v62(v60, v61, v80);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v74 + 56))(v76, 0, 1, v46);
    }
    else
    {
      if (v48)
      {
        outlined destroy of NCProtoContactInfo((uint64_t)v76, type metadata accessor for NCProtoSenderIdentity);
        size_t v49 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?)
                                    - 8)
                        + 64);
        uint64_t v50 = v76;
        goto LABEL_18;
      }
      *uint64_t v76 = *(void *)v45;
      v76[1] = *((void *)v45 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v76[2] = *((void *)v45 + 2);
      v76[3] = *((void *)v45 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v7((char *)v76 + *(int *)(v46 + 24), &v45[*(int *)(v46 + 24)], v80);
    }
LABEL_21:
    uint64_t v63 = v11[11];
    uint64_t v64 = (uint64_t *)&v9[v63];
    uint64_t v65 = (uint64_t *)&v10[v63];
    unint64_t v66 = *(void *)&v10[v63 + 8];
    a1 = v79;
    if ((unint64_t)v64[1] >> 60 == 15)
    {
      if (v66 >> 60 != 15)
      {
        uint64_t v67 = *v65;
        outlined copy of Data._Representation(*v65, v66);
        *uint64_t v64 = v67;
        v64[1] = v66;
        return a1;
      }
    }
    else
    {
      if (v66 >> 60 != 15)
      {
        uint64_t v68 = *v65;
        outlined copy of Data._Representation(*v65, v66);
        uint64_t v69 = *v64;
        unint64_t v70 = v64[1];
        *uint64_t v64 = v68;
        v64[1] = v66;
        outlined consume of Data._Representation(v69, v70);
        return a1;
      }
      outlined destroy of Data((uint64_t)v64);
    }
    *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
    return a1;
  }
  if (v15)
  {
LABEL_7:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
    memcpy(v9, v10, *(void *)(*(void *)(v33 - 8) + 64));
    return a1;
  }
  uint64_t v78 = a1;
  *(void *)uint64_t v9 = *(void *)v10;
  uint64_t v16 = v11[5];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
  swift_bridgeObjectRetain();
  uint64_t v73 = v19;
  v19(v17, v18, v80);
  uint64_t v20 = v11[6];
  uint64_t v21 = &v9[v20];
  uint64_t v22 = &v10[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  *((void *)v21 + 1) = *((void *)v22 + 1);
  uint64_t v23 = v11[7];
  uint64_t v24 = &v9[v23];
  uint64_t v25 = &v10[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  *((void *)v24 + 1) = *((void *)v25 + 1);
  uint64_t v26 = v11[8];
  uint64_t v27 = &v9[v26];
  uint64_t v28 = &v10[v26];
  *(void *)uint64_t v27 = *(void *)v28;
  *((void *)v27 + 1) = *((void *)v28 + 1);
  v9[v11[9]] = v10[v11[9]];
  uint64_t v29 = v11[10];
  __dst = &v9[v29];
  uint64_t v30 = &v10[v29];
  uint64_t v31 = type metadata accessor for NCProtoSenderIdentity(0);
  uint64_t v72 = *(void *)(v31 - 8);
  uint64_t v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v75(v30, 1, v31))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
    memcpy(__dst, v30, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    *(void *)__dst = *(void *)v30;
    *((void *)__dst + 1) = *((void *)v30 + 1);
    *((void *)__dst + 2) = *((void *)v30 + 2);
    *((void *)__dst + 3) = *((void *)v30 + 3);
    uint64_t v51 = *(int *)(v31 + 24);
    uint64_t v52 = &__dst[v51];
    uint64_t v53 = &v30[v51];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v73(v52, v53, v80);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(__dst, 0, 1, v31);
  }
  uint64_t v54 = v11[11];
  uint64_t v55 = &v9[v54];
  unint64_t v56 = &v10[v54];
  unint64_t v57 = *((void *)v56 + 1);
  a1 = v78;
  if (v57 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
  }
  else
  {
    uint64_t v58 = *(void *)v56;
    outlined copy of Data._Representation(*(void *)v56, *((void *)v56 + 1));
    *(void *)uint64_t v55 = v58;
    *((void *)v55 + 1) = v57;
  }
  (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

char *initializeWithTake for NCProtoGetCallDisplayDetailsResponse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  BOOL v11 = (int *)type metadata accessor for NCProtoCallInfo(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v9 = *(void *)v10;
    v7(&v9[v11[5]], &v10[v11[5]], v6);
    *(_OWORD *)&v9[v11[6]] = *(_OWORD *)&v10[v11[6]];
    *(_OWORD *)&v9[v11[7]] = *(_OWORD *)&v10[v11[7]];
    *(_OWORD *)&v9[v11[8]] = *(_OWORD *)&v10[v11[8]];
    v9[v11[9]] = v10[v11[9]];
    uint64_t v14 = v11[10];
    __dst = &v9[v14];
    int v15 = &v10[v14];
    uint64_t v16 = type metadata accessor for NCProtoSenderIdentity(0);
    uint64_t v20 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v15, 1, v16))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
      memcpy(__dst, v15, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      long long v18 = *((_OWORD *)v15 + 1);
      *(_OWORD *)__dst = *(_OWORD *)v15;
      *((_OWORD *)__dst + 1) = v18;
      v7(&__dst[*(int *)(v16 + 24)], &v15[*(int *)(v16 + 24)], v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v16);
    }
    *(_OWORD *)&v9[v11[11]] = *(_OWORD *)&v10[v11[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v61 = a1;
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  BOOL v11 = (int *)type metadata accessor for NCProtoCallInfo(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      *(void *)uint64_t v9 = *(void *)v10;
      uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
      v60(&v9[v11[5]], &v10[v11[5]], v6);
      *(_OWORD *)&v9[v11[6]] = *(_OWORD *)&v10[v11[6]];
      *(_OWORD *)&v9[v11[7]] = *(_OWORD *)&v10[v11[7]];
      *(_OWORD *)&v9[v11[8]] = *(_OWORD *)&v10[v11[8]];
      v9[v11[9]] = v10[v11[9]];
      uint64_t v16 = v11[10];
      uint64_t v17 = &v9[v16];
      long long v18 = &v10[v16];
      uint64_t v19 = type metadata accessor for NCProtoSenderIdentity(0);
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        long long v45 = *((_OWORD *)v18 + 1);
        *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
        *((_OWORD *)v17 + 1) = v45;
        v60(&v17[*(int *)(v19 + 24)], &v18[*(int *)(v19 + 24)], v6);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      *(_OWORD *)&v9[v11[11]] = *(_OWORD *)&v10[v11[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
      return v61;
    }
LABEL_7:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallInfo?);
    memcpy(v9, v10, *(void *)(*(void *)(v22 - 8) + 64));
    return v61;
  }
  if (v15)
  {
    outlined destroy of NCProtoContactInfo((uint64_t)v9, type metadata accessor for NCProtoCallInfo);
    goto LABEL_7;
  }
  *(void *)uint64_t v9 = *(void *)v10;
  swift_bridgeObjectRelease();
  v7((uint64_t)&v9[v11[5]], (uint64_t)&v10[v11[5]], v6);
  uint64_t v23 = v11[6];
  uint64_t v24 = &v9[v23];
  uint64_t v25 = (uint64_t *)&v10[v23];
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *(void *)uint64_t v24 = v27;
  *((void *)v24 + 1) = v26;
  swift_bridgeObjectRelease();
  uint64_t v28 = v11[7];
  uint64_t v29 = &v9[v28];
  uint64_t v30 = (uint64_t *)&v10[v28];
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  *(void *)uint64_t v29 = v32;
  *((void *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = v11[8];
  uint64_t v34 = &v9[v33];
  uint64_t v35 = (uint64_t *)&v10[v33];
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *(void *)uint64_t v34 = v37;
  *((void *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  v9[v11[9]] = v10[v11[9]];
  uint64_t v38 = v11[10];
  uint64_t v39 = &v9[v38];
  __src = &v10[v38];
  uint64_t v40 = type metadata accessor for NCProtoSenderIdentity(0);
  uint64_t v56 = *(void *)(v40 - 8);
  uint64_t v57 = (uint64_t)v39;
  unint64_t v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 48);
  LODWORD(v39) = v41(v39, 1, v40);
  int v42 = v41(__src, 1, v40);
  if (v39)
  {
    if (!v42)
    {
      long long v46 = *((_OWORD *)__src + 1);
      *(_OWORD *)uint64_t v57 = *(_OWORD *)__src;
      *(_OWORD *)(v57 + 16) = v46;
      (*(void (**)(uint64_t, char *, uint64_t))(v59 + 32))(v57 + *(int *)(v40 + 24), &__src[*(int *)(v40 + 24)], v6);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v57, 0, 1, v40);
      goto LABEL_18;
    }
    size_t v43 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?)
                                - 8)
                    + 64);
    uint64_t v44 = (void *)v57;
  }
  else
  {
    if (!v42)
    {
      uint64_t v47 = *((void *)__src + 1);
      *(void *)uint64_t v57 = *(void *)__src;
      *(void *)(v57 + 8) = v47;
      swift_bridgeObjectRelease();
      uint64_t v48 = *((void *)__src + 3);
      *(void *)(v57 + 16) = *((void *)__src + 2);
      *(void *)(v57 + 24) = v48;
      swift_bridgeObjectRelease();
      v7(v57 + *(int *)(v40 + 24), (uint64_t)&__src[*(int *)(v40 + 24)], v6);
      goto LABEL_18;
    }
    outlined destroy of NCProtoContactInfo(v57, type metadata accessor for NCProtoSenderIdentity);
    size_t v43 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoSenderIdentity?)
                                - 8)
                    + 64);
    uint64_t v44 = (void *)v57;
  }
  memcpy(v44, __src, v43);
LABEL_18:
  uint64_t v49 = v11[11];
  uint64_t v50 = (uint64_t *)&v9[v49];
  uint64_t v51 = (uint64_t *)&v10[v49];
  unint64_t v52 = v50[1];
  if (v52 >> 60 != 15)
  {
    unint64_t v53 = v51[1];
    if (v53 >> 60 != 15)
    {
      uint64_t v54 = *v50;
      *uint64_t v50 = *v51;
      v50[1] = v53;
      outlined consume of Data._Representation(v54, v52);
      return v61;
    }
    outlined destroy of Data((uint64_t)v50);
  }
  *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
  return v61;
}

uint64_t getEnumTagSinglePayload for NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25742A490);
}

uint64_t sub_25742A490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_130Tm(a1, a2, a3, &demangling cache variable for type metadata for NCProtoCallInfo?);
}

uint64_t storeEnumTagSinglePayload for NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25742A4B0);
}

uint64_t sub_25742A4B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_131Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for NCProtoCallInfo?);
}

void type metadata completion function for NCProtoGetCallDisplayDetailsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void *initializeBufferWithCopyOfBuffer for NCProtoDestinationCapabilities(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(_WORD *)(a1 + 1) = *(_WORD *)((char *)a2 + 1);
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for NCProtoDestinationCapabilities(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t initializeWithCopy for NCProtoDestinationCapabilities(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

unsigned char *assignWithCopy for NCProtoDestinationCapabilities(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for NCProtoDestinationCapabilities(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

unsigned char *assignWithTake for NCProtoDestinationCapabilities(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoDestinationCapabilities(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25742A84C);
}

uint64_t sub_25742A84C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    BOOL v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = &a1[*(int *)(a3 + 28)];
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoDestinationCapabilities(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25742A910);
}

unsigned char *sub_25742A910(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 28)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoDestinationCapabilities()
{
  return type metadata completion function for NCProtoJoinEvent();
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoPullLagunaSessionToTVRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    int v14 = (char *)v4 + v13;
    int v15 = (char *)a2 + v13;
    *(void *)int v14 = *(void *)v15;
    *((_WORD *)v14 + 4) = *((_WORD *)v15 + 4);
  }
  return v4;
}

void *initializeWithCopy for NCProtoPullLagunaSessionToTVRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (char *)a1 + v12;
  int v14 = (char *)a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *((_WORD *)v13 + 4) = *((_WORD *)v14 + 4);
  return a1;
}

void *assignWithCopy for NCProtoPullLagunaSessionToTVRequest(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  __int16 v13 = *((_WORD *)v12 + 4);
  *(void *)uint64_t v11 = *(void *)v12;
  *((_WORD *)v11 + 4) = v13;
  return a1;
}

_OWORD *initializeWithTake for NCProtoPullLagunaSessionToTVRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  *((_WORD *)v11 + 4) = *((_WORD *)v12 + 4);
  return a1;
}

void *assignWithTake for NCProtoPullLagunaSessionToTVRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  __int16 v13 = (char *)a2 + v11;
  *(void *)uint64_t v12 = *(void *)v13;
  *((_WORD *)v12 + 4) = *((_WORD *)v13 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoGetDestinationCapabilitiesRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_97Tm_7);
}

uint64_t storeEnumTagSinglePayload for NCProtoGetDestinationCapabilitiesRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_98Tm_7);
}

ValueMetadata *type metadata accessor for NCProtoGetDestinationCapabilitiesRequest.DestinationType()
{
  return &type metadata for NCProtoGetDestinationCapabilitiesRequest.DestinationType;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoGetDestinationCapabilitiesResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for NCProtoDestinationCapabilities(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      *uint64_t v10 = *v11;
      *(_WORD *)(v10 + 1) = *(_WORD *)(v11 + 1);
      v8((uint64_t *)&v10[*(int *)(v12 + 28)], (uint64_t *)&v11[*(int *)(v12 + 28)], v7);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for NCProtoGetDestinationCapabilitiesResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v9(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for NCProtoDestinationCapabilities(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = v5 + *(int *)(v6 + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v8, v4);
  }
  return result;
}

unsigned char *initializeWithCopy for NCProtoGetDestinationCapabilitiesResponse(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for NCProtoDestinationCapabilities(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    *uint64_t v9 = *v10;
    *(_WORD *)(v9 + 1) = *(_WORD *)(v10 + 1);
    v7(&v9[*(int *)(v11 + 28)], &v10[*(int *)(v11 + 28)], v6);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for NCProtoGetDestinationCapabilitiesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v18 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 24);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v19 = a1;
  uint64_t v9 = (unsigned char *)(a1 + v8);
  uint64_t v10 = (unsigned char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for NCProtoDestinationCapabilities(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      *uint64_t v9 = *v10;
      v9[1] = v10[1];
      v9[2] = v10[2];
      v7((uint64_t)&v9[*(int *)(v11 + 28)], (uint64_t)&v10[*(int *)(v11 + 28)], v6);
      return v19;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v9, type metadata accessor for NCProtoDestinationCapabilities);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    return v19;
  }
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  v9[2] = v10[2];
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v18 + 16))(&v9[*(int *)(v11 + 28)], &v10[*(int *)(v11 + 28)], v6);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return v19;
}

unsigned char *initializeWithTake for NCProtoGetDestinationCapabilitiesResponse(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for NCProtoDestinationCapabilities(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    *uint64_t v9 = *v10;
    *(_WORD *)(v9 + 1) = *(_WORD *)(v10 + 1);
    v7(&v9[*(int *)(v11 + 28)], &v10[*(int *)(v11 + 28)], v6);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for NCProtoGetDestinationCapabilitiesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v18 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v19 = a1;
  uint64_t v9 = (unsigned char *)(a1 + v8);
  uint64_t v10 = (unsigned char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for NCProtoDestinationCapabilities(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      *uint64_t v9 = *v10;
      v9[1] = v10[1];
      v9[2] = v10[2];
      v7((uint64_t)&v9[*(int *)(v11 + 28)], (uint64_t)&v10[*(int *)(v11 + 28)], v6);
      return v19;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v9, type metadata accessor for NCProtoDestinationCapabilities);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    return v19;
  }
  *uint64_t v9 = *v10;
  *(_WORD *)(v9 + 1) = *(_WORD *)(v10 + 1);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v18 + 32))(&v9[*(int *)(v11 + 28)], &v10[*(int *)(v11 + 28)], v6);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return v19;
}

uint64_t getEnumTagSinglePayload for NCProtoGetDestinationCapabilitiesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25742B7E8);
}

uint64_t sub_25742B7E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_130Tm(a1, a2, a3, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
}

uint64_t storeEnumTagSinglePayload for NCProtoGetDestinationCapabilitiesResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25742B808);
}

uint64_t sub_25742B808(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_131Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for NCProtoDestinationCapabilities?);
}

void type metadata completion function for NCProtoGetDestinationCapabilitiesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void *initializeBufferWithCopyOfBuffer for NCProtoCallState(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    uint64_t v9 = a3[7];
    uint64_t v10 = a3[8];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(void *)uint64_t v11 = *(void *)v12;
    *((_WORD *)v11 + 4) = *((_WORD *)v12 + 4);
    *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
  }
  return a1;
}

uint64_t initializeWithCopy for NCProtoCallState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v11 + 8);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  return a1;
}

uint64_t assignWithCopy for NCProtoCallState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v7 = a3[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  __int16 v10 = *(_WORD *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(_WORD *)(v8 + 8) = v10;
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for NCProtoCallState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v11 + 8);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  return a1;
}

uint64_t assignWithTake for NCProtoCallState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v11 + 8);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoCallState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25742BBE8);
}

uint64_t sub_25742BBE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v11 = -2;
    }
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoCallState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25742BCD8);
}

uint64_t sub_25742BCD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  }
  return result;
}

uint64_t type metadata completion function for NCProtoCallState()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoCallStateRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    unsigned int v10 = (char *)a1 + v9;
    int v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t *initializeWithCopy for NCProtoCallStateRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  unsigned int v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *assignWithCopy for NCProtoCallStateRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t *assignWithTake for NCProtoCallStateRequest(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoCallStateRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25742C100);
}

uint64_t sub_25742C100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoCallStateRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25742C1D0);
}

void *sub_25742C1D0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoCallStateRequest()
{
  return type metadata completion function for NCProtoEndedSessionEvent();
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoCallStateResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for NCProtoCallState(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v10[v12[5]] = v11[v12[5]];
      v10[v12[6]] = v11[v12[6]];
      uint64_t v16 = v12[7];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      *((_WORD *)v17 + 4) = *((_WORD *)v18 + 4);
      v10[v12[8]] = v11[v12[8]];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for NCProtoCallStateResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v8(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for NCProtoCallState(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  }
  return result;
}

uint64_t initializeWithCopy for NCProtoCallStateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for NCProtoCallState(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v9[v11[5]] = v10[v11[5]];
    v9[v11[6]] = v10[v11[6]];
    uint64_t v14 = v11[7];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    *((_WORD *)v15 + 4) = *((_WORD *)v16 + 4);
    v9[v11[8]] = v10[v11[8]];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for NCProtoCallStateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v26 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 24);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v27 = a1;
  uint64_t v9 = (unsigned char *)(a1 + v8);
  uint64_t v10 = (unsigned char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for NCProtoCallState(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v7((uint64_t)v9, (uint64_t)v10, v6);
      v9[v11[5]] = v10[v11[5]];
      v9[v11[6]] = v10[v11[6]];
      uint64_t v22 = v11[7];
      uint64_t v23 = &v9[v22];
      uint64_t v24 = &v10[v22];
      __int16 v25 = *((_WORD *)v24 + 4);
      *(void *)uint64_t v23 = *(void *)v24;
      *((_WORD *)v23 + 4) = v25;
      v9[v11[8]] = v10[v11[8]];
      return v27;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v9, type metadata accessor for NCProtoCallState);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v9, v10, *(void *)(*(void *)(v20 - 8) + 64));
    return v27;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v26 + 16))(v9, v10, v6);
  v9[v11[5]] = v10[v11[5]];
  v9[v11[6]] = v10[v11[6]];
  uint64_t v16 = v11[7];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  __int16 v19 = *((_WORD *)v18 + 4);
  *(void *)uint64_t v17 = *(void *)v18;
  *((_WORD *)v17 + 4) = v19;
  v9[v11[8]] = v10[v11[8]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  return v27;
}

uint64_t initializeWithTake for NCProtoCallStateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for NCProtoCallState(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v9[v11[5]] = v10[v11[5]];
    v9[v11[6]] = v10[v11[6]];
    uint64_t v14 = v11[7];
    int v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)int v15 = *(void *)v16;
    *((_WORD *)v15 + 4) = *((_WORD *)v16 + 4);
    v9[v11[8]] = v10[v11[8]];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for NCProtoCallStateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v25 = a1;
  uint64_t v9 = (unsigned char *)(a1 + v8);
  uint64_t v10 = (unsigned char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for NCProtoCallState(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v7((uint64_t)v9, (uint64_t)v10, v6);
      v9[v11[5]] = v10[v11[5]];
      v9[v11[6]] = v10[v11[6]];
      uint64_t v21 = v11[7];
      uint64_t v22 = &v9[v21];
      uint64_t v23 = &v10[v21];
      *(void *)uint64_t v22 = *(void *)v23;
      *((_WORD *)v22 + 4) = *((_WORD *)v23 + 4);
      v9[v11[8]] = v10[v11[8]];
      return v25;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v9, type metadata accessor for NCProtoCallState);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v9, v10, *(void *)(*(void *)(v19 - 8) + 64));
    return v25;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v24 + 32))(v9, v10, v6);
  v9[v11[5]] = v10[v11[5]];
  v9[v11[6]] = v10[v11[6]];
  uint64_t v16 = v11[7];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  *((_WORD *)v17 + 4) = *((_WORD *)v18 + 4);
  v9[v11[8]] = v10[v11[8]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  return v25;
}

uint64_t getEnumTagSinglePayload for NCProtoCallStateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25742CD90);
}

uint64_t sub_25742CD90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_130Tm(a1, a2, a3, &demangling cache variable for type metadata for NCProtoCallState?);
}

uint64_t __swift_get_extra_inhabitant_index_130Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a2)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    return v10(a1, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a4);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 20);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoCallStateResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25742CEAC);
}

uint64_t sub_25742CEAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_131Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for NCProtoCallState?);
}

uint64_t __swift_store_extra_inhabitant_index_131Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    return v12(a1, a2, a2, v10);
  }
  else
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + *(int *)(a4 + 20);
    return v15(v17, a2, a2, v16);
  }
}

void type metadata completion function for NCProtoCallStateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for NCProtoSuggestionAdvertisementDidChangeEvent(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v7 <= 0x3F)
  {
    type metadata accessor for NCProtoContactInfo?(319, a4, a5);
    if (v8 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for NCProtoDeviceTokenRequest(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (void *)((char *)v4 + v13);
    uint64_t v15 = (void *)((char *)a2 + v13);
    uint64_t v16 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
    uint64_t v17 = *((void *)v16 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      void *v14 = *v15;
      uint64_t v20 = v16[5];
      unint64_t v53 = (char *)v15 + v20;
      uint64_t v55 = (char *)v14 + v20;
      swift_bridgeObjectRetain();
      uint64_t v22 = v53;
      uint64_t v21 = v55;
      uint64_t v54 = v12;
      uint64_t v56 = v11;
      v12(v21, v22, v11);
      uint64_t v23 = v16[6];
      uint64_t v24 = (void *)((char *)v14 + v23);
      uint64_t v25 = (void *)((char *)v15 + v23);
      uint64_t v26 = v25[1];
      void *v24 = *v25;
      v24[1] = v26;
      uint64_t v27 = v16[7];
      uint64_t v28 = (char *)v14 + v27;
      uint64_t v29 = (_OWORD *)((char *)v15 + v27);
      unint64_t v30 = *(void *)((char *)v15 + v27 + 8);
      swift_bridgeObjectRetain();
      if (v30 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v28 = *v29;
      }
      else
      {
        uint64_t v31 = *(void *)v29;
        outlined copy of Data._Representation(v31, v30);
        *(void *)uint64_t v28 = v31;
        *((void *)v28 + 1) = v30;
      }
      uint64_t v32 = v16[8];
      uint64_t v33 = (char *)v14 + v32;
      uint64_t v34 = (char *)v15 + v32;
      *(void *)uint64_t v33 = *(void *)v34;
      v33[8] = v34[8];
      uint64_t v35 = v16[9];
      uint64_t v36 = (void *)((char *)v14 + v35);
      uint64_t v37 = (void *)((char *)v15 + v35);
      uint64_t v38 = v37[1];
      *uint64_t v36 = *v37;
      v36[1] = v38;
      uint64_t v39 = *(void (**)(void *, void, uint64_t, int *))(v17 + 56);
      swift_bridgeObjectRetain();
      v39(v14, 0, 1, v16);
      uint64_t v12 = v54;
      uint64_t v11 = v56;
    }
    uint64_t v40 = a3[7];
    unint64_t v41 = (char *)v4 + v40;
    int v42 = (char *)a2 + v40;
    size_t v43 = (int *)type metadata accessor for NCProtoCallState(0);
    uint64_t v44 = *((void *)v43 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v44 + 48))(v42, 1, v43))
    {
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
      memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      v12(v41, v42, v11);
      v41[v43[5]] = v42[v43[5]];
      v41[v43[6]] = v42[v43[6]];
      uint64_t v46 = v43[7];
      uint64_t v47 = &v41[v46];
      uint64_t v48 = &v42[v46];
      *(void *)uint64_t v47 = *(void *)v48;
      *((_WORD *)v47 + 4) = *((_WORD *)v48 + 4);
      v41[v43[8]] = v42[v43[8]];
      (*(void (**)(char *, void, uint64_t, int *))(v44 + 56))(v41, 0, 1, v43);
    }
    uint64_t v49 = a3[9];
    *((unsigned char *)v4 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    uint64_t v50 = (char *)v4 + v49;
    uint64_t v51 = (char *)a2 + v49;
    *(void *)uint64_t v50 = *(void *)v51;
    *((_WORD *)v50 + 4) = *((_WORD *)v51 + 4);
  }
  return v4;
}

uint64_t destroy for NCProtoDeviceTokenRequest(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v13(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v13(v6 + *(int *)(v7 + 20), v5);
    swift_bridgeObjectRelease();
    uint64_t v8 = (uint64_t *)(v6 + *(int *)(v7 + 28));
    unint64_t v9 = v8[1];
    if (v9 >> 60 != 15) {
      outlined consume of Data._Representation(*v8, v9);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = a1 + a2[7];
  uint64_t v11 = type metadata accessor for NCProtoCallState(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(v10, v5);
  }
  return result;
}

void *initializeWithCopy for NCProtoDeviceTokenRequest(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = v3[6];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v51 = v3;
    void *v13 = *v14;
    uint64_t v18 = v15[5];
    unint64_t v53 = (char *)v13 + v18;
    uint64_t v19 = (char *)v14 + v18;
    swift_bridgeObjectRetain();
    uint64_t v20 = v53;
    unint64_t v52 = v11;
    uint64_t v54 = v10;
    v11(v20, v19, v10);
    uint64_t v21 = v15[6];
    uint64_t v22 = (void *)((char *)v13 + v21);
    uint64_t v23 = (void *)((char *)v14 + v21);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = v15[7];
    uint64_t v26 = (char *)v13 + v25;
    uint64_t v27 = (_OWORD *)((char *)v14 + v25);
    unint64_t v28 = *(void *)((char *)v14 + v25 + 8);
    swift_bridgeObjectRetain();
    if (v28 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v26 = *v27;
    }
    else
    {
      uint64_t v29 = *(void *)v27;
      outlined copy of Data._Representation(v29, v28);
      *(void *)uint64_t v26 = v29;
      *((void *)v26 + 1) = v28;
    }
    uint64_t v30 = v15[8];
    uint64_t v31 = (char *)v13 + v30;
    uint64_t v32 = (char *)v14 + v30;
    *(void *)uint64_t v31 = *(void *)v32;
    v31[8] = v32[8];
    uint64_t v33 = v15[9];
    uint64_t v34 = (void *)((char *)v13 + v33);
    uint64_t v35 = (void *)((char *)v14 + v33);
    uint64_t v36 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v36;
    uint64_t v37 = *(void (**)(void *, void, uint64_t, int *))(v16 + 56);
    swift_bridgeObjectRetain();
    v37(v13, 0, 1, v15);
    uint64_t v11 = v52;
    uint64_t v10 = v54;
    uint64_t v3 = v51;
  }
  uint64_t v38 = v3[7];
  uint64_t v39 = (char *)a1 + v38;
  uint64_t v40 = (char *)a2 + v38;
  unint64_t v41 = (int *)type metadata accessor for NCProtoCallState(0);
  uint64_t v42 = *((void *)v41 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v42 + 48))(v40, 1, v41))
  {
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    v11(v39, v40, v10);
    v39[v41[5]] = v40[v41[5]];
    v39[v41[6]] = v40[v41[6]];
    uint64_t v44 = v41[7];
    uint64_t v45 = &v39[v44];
    uint64_t v46 = &v40[v44];
    *(void *)uint64_t v45 = *(void *)v46;
    *((_WORD *)v45 + 4) = *((_WORD *)v46 + 4);
    v39[v41[8]] = v40[v41[8]];
    (*(void (**)(char *, void, uint64_t, int *))(v42 + 56))(v39, 0, 1, v41);
  }
  uint64_t v47 = v3[9];
  *((unsigned char *)a1 + v3[8]) = *((unsigned char *)a2 + v3[8]);
  uint64_t v48 = (char *)a1 + v47;
  uint64_t v49 = (char *)a2 + v47;
  *(void *)uint64_t v48 = *(void *)v49;
  *((_WORD *)v48 + 4) = *((_WORD *)v49 + 4);
  return a1;
}

void *assignWithCopy for NCProtoDeviceTokenRequest(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v81 = *(void *)(v9 - 8);
  uint64_t v82 = v9;
  uint64_t v80 = *(void (**)(char *, char *))(v81 + 24);
  v80(v7, v8);
  uint64_t v83 = a3;
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (v17)
    {
      outlined destroy of NCProtoContactInfo((uint64_t)v11, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
      goto LABEL_7;
    }
    *uint64_t v11 = *v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    ((void (*)(char *, char *, uint64_t))v80)((char *)v11 + v13[5], (char *)v12 + v13[5], v82);
    uint64_t v31 = v13[6];
    uint64_t v32 = (void *)((char *)v11 + v31);
    uint64_t v33 = (void *)((char *)v12 + v31);
    *uint64_t v32 = *v33;
    v32[1] = v33[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v34 = v13[7];
    uint64_t v35 = (void *)((char *)v11 + v34);
    uint64_t v36 = (void *)((char *)v12 + v34);
    unint64_t v37 = *(void *)((char *)v12 + v34 + 8);
    if (*(void *)((char *)v11 + v34 + 8) >> 60 == 15)
    {
      uint64_t v30 = a3;
      if (v37 >> 60 != 15)
      {
        uint64_t v38 = *v36;
        outlined copy of Data._Representation(*v36, v37);
        *uint64_t v35 = v38;
        v35[1] = v37;
LABEL_17:
        uint64_t v51 = v13[8];
        unint64_t v52 = (char *)v11 + v51;
        unint64_t v53 = (char *)v12 + v51;
        uint64_t v54 = *(void *)v53;
        v52[8] = v53[8];
        *(void *)unint64_t v52 = v54;
        uint64_t v55 = v13[9];
        uint64_t v56 = (void *)((char *)v11 + v55);
        uint64_t v57 = (void *)((char *)v12 + v55);
        *uint64_t v56 = *v57;
        v56[1] = v57[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v30 = a3;
      if (v37 >> 60 != 15)
      {
        uint64_t v48 = *v36;
        outlined copy of Data._Representation(*v36, v37);
        uint64_t v49 = *v35;
        unint64_t v50 = v35[1];
        *uint64_t v35 = v48;
        v35[1] = v37;
        outlined consume of Data._Representation(v49, v50);
        goto LABEL_17;
      }
      outlined destroy of Data((uint64_t)v35);
    }
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    goto LABEL_17;
  }
  if (v17)
  {
LABEL_7:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    memcpy(v11, v12, *(void *)(*(void *)(v29 - 8) + 64));
    uint64_t v30 = a3;
    goto LABEL_18;
  }
  *uint64_t v11 = *v12;
  uint64_t v18 = v13[5];
  uint64_t v19 = (char *)v11 + v18;
  uint64_t v20 = (char *)v12 + v18;
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
  swift_bridgeObjectRetain();
  v21(v19, v20, v82);
  uint64_t v22 = v13[6];
  uint64_t v23 = (void *)((char *)v11 + v22);
  uint64_t v24 = (void *)((char *)v12 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  uint64_t v25 = v13[7];
  uint64_t v26 = (char *)v11 + v25;
  uint64_t v27 = (void *)((char *)v12 + v25);
  unint64_t v28 = *(void *)((char *)v12 + v25 + 8);
  swift_bridgeObjectRetain();
  if (v28 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  }
  else
  {
    uint64_t v39 = *v27;
    outlined copy of Data._Representation(*v27, v28);
    *(void *)uint64_t v26 = v39;
    *((void *)v26 + 1) = v28;
  }
  uint64_t v30 = v83;
  uint64_t v40 = v13[8];
  unint64_t v41 = (char *)v11 + v40;
  uint64_t v42 = (char *)v12 + v40;
  uint64_t v43 = *(void *)v42;
  v41[8] = v42[8];
  *(void *)unint64_t v41 = v43;
  uint64_t v44 = v13[9];
  uint64_t v45 = (void *)((char *)v11 + v44);
  uint64_t v46 = (void *)((char *)v12 + v44);
  *uint64_t v45 = *v46;
  v45[1] = v46[1];
  uint64_t v47 = *(void (**)(void *, void, uint64_t, int *))(v14 + 56);
  swift_bridgeObjectRetain();
  v47(v11, 0, 1, v13);
LABEL_18:
  uint64_t v58 = v30[7];
  uint64_t v59 = (char *)a1 + v58;
  uint64_t v60 = (char *)a2 + v58;
  uint64_t v61 = (int *)type metadata accessor for NCProtoCallState(0);
  uint64_t v62 = *((void *)v61 - 1);
  uint64_t v63 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v62 + 48);
  int v64 = v63(v59, 1, v61);
  int v65 = v63(v60, 1, v61);
  if (!v64)
  {
    if (!v65)
    {
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v80)(v59, v60, v82);
      v59[v61[5]] = v60[v61[5]];
      v59[v61[6]] = v60[v61[6]];
      uint64_t v76 = v61[7];
      uint64_t v77 = &v59[v76];
      uint64_t v78 = &v60[v76];
      __int16 v79 = *((_WORD *)v78 + 4);
      *(void *)uint64_t v77 = *(void *)v78;
      *((_WORD *)v77 + 4) = v79;
      v59[v61[8]] = v60[v61[8]];
      goto LABEL_24;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v59, type metadata accessor for NCProtoCallState);
    goto LABEL_23;
  }
  if (v65)
  {
LABEL_23:
    uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v59, v60, *(void *)(*(void *)(v70 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v81 + 16))(v59, v60, v82);
  v59[v61[5]] = v60[v61[5]];
  v59[v61[6]] = v60[v61[6]];
  uint64_t v66 = v61[7];
  uint64_t v67 = &v59[v66];
  uint64_t v68 = &v60[v66];
  __int16 v69 = *((_WORD *)v68 + 4);
  *(void *)uint64_t v67 = *(void *)v68;
  *((_WORD *)v67 + 4) = v69;
  v59[v61[8]] = v60[v61[8]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v62 + 56))(v59, 0, 1, v61);
LABEL_24:
  *((unsigned char *)a1 + v30[8]) = *((unsigned char *)a2 + v30[8]);
  uint64_t v71 = v30[9];
  uint64_t v72 = (char *)a1 + v71;
  uint64_t v73 = (char *)a2 + v71;
  uint64_t v74 = *(void *)v73;
  *((_WORD *)v72 + 4) = *((_WORD *)v73 + 4);
  *(void *)uint64_t v72 = v74;
  return a1;
}

_OWORD *initializeWithTake for NCProtoDeviceTokenRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    void *v12 = *v13;
    v10((char *)v12 + v14[5], (char *)v13 + v14[5], v9);
    *(_OWORD *)((char *)v12 + v14[6]) = *(_OWORD *)((char *)v13 + v14[6]);
    *(_OWORD *)((char *)v12 + v14[7]) = *(_OWORD *)((char *)v13 + v14[7]);
    uint64_t v17 = v14[8];
    uint64_t v18 = (char *)v12 + v17;
    uint64_t v19 = (char *)v13 + v17;
    v18[8] = v19[8];
    *(void *)uint64_t v18 = *(void *)v19;
    *(_OWORD *)((char *)v12 + v14[9]) = *(_OWORD *)((char *)v13 + v14[9]);
    (*(void (**)(void *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v20 = a3[7];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = (int *)type metadata accessor for NCProtoCallState(0);
  uint64_t v24 = *((void *)v23 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    v10(v21, v22, v9);
    v21[v23[5]] = v22[v23[5]];
    v21[v23[6]] = v22[v23[6]];
    uint64_t v26 = v23[7];
    uint64_t v27 = &v21[v26];
    unint64_t v28 = &v22[v26];
    *(void *)uint64_t v27 = *(void *)v28;
    *((_WORD *)v27 + 4) = *((_WORD *)v28 + 4);
    v21[v23[8]] = v22[v23[8]];
    (*(void (**)(char *, void, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
  }
  uint64_t v29 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  *(void *)uint64_t v30 = *(void *)v31;
  *((_WORD *)v30 + 4) = *((_WORD *)v31 + 4);
  return a1;
}

void *assignWithTake for NCProtoDeviceTokenRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v62 = *(void *)(v10 - 8);
  uint64_t v63 = v10;
  uint64_t v61 = *(void (**)(char *, char *))(v62 + 40);
  v61(v8, v9);
  int v64 = a3;
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = (int *)type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      (*(void (**)(char *, char *, uint64_t))(v62 + 32))(&v12[v14[5]], &v13[v14[5]], v63);
      *(_OWORD *)&v12[v14[6]] = *(_OWORD *)&v13[v14[6]];
      *(_OWORD *)&v12[v14[7]] = *(_OWORD *)&v13[v14[7]];
      uint64_t v19 = v14[8];
      uint64_t v20 = &v12[v19];
      uint64_t v21 = &v13[v19];
      v20[8] = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      *(_OWORD *)&v12[v14[9]] = *(_OWORD *)&v13[v14[9]];
      (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of NCProtoContactInfo((uint64_t)v12, type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
    memcpy(v12, v13, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v61)(&v12[v14[5]], &v13[v14[5]], v63);
  uint64_t v39 = v14[6];
  uint64_t v40 = &v12[v39];
  unint64_t v41 = &v13[v39];
  uint64_t v43 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = v43;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  uint64_t v44 = v14[7];
  uint64_t v45 = (uint64_t *)&v12[v44];
  uint64_t v46 = (uint64_t *)&v13[v44];
  unint64_t v47 = *(void *)&v12[v44 + 8];
  if (v47 >> 60 != 15)
  {
    unint64_t v48 = v46[1];
    if (v48 >> 60 != 15)
    {
      uint64_t v52 = *v45;
      *uint64_t v45 = *v46;
      v45[1] = v48;
      outlined consume of Data._Representation(v52, v47);
      goto LABEL_20;
    }
    outlined destroy of Data((uint64_t)v45);
  }
  *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
LABEL_20:
  uint64_t v53 = v14[8];
  uint64_t v54 = &v12[v53];
  uint64_t v55 = &v13[v53];
  *(void *)uint64_t v54 = *(void *)v55;
  v54[8] = v55[8];
  uint64_t v56 = v14[9];
  uint64_t v57 = &v12[v56];
  uint64_t v58 = &v13[v56];
  uint64_t v60 = *(void *)v58;
  uint64_t v59 = *((void *)v58 + 1);
  *(void *)uint64_t v57 = v60;
  *((void *)v57 + 1) = v59;
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v23 = v64[7];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = (int *)type metadata accessor for NCProtoCallState(0);
  uint64_t v27 = *((void *)v26 - 1);
  unint64_t v28 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v61)(v24, v25, v63);
      v24[v26[5]] = v25[v26[5]];
      v24[v26[6]] = v25[v26[6]];
      uint64_t v49 = v26[7];
      unint64_t v50 = &v24[v49];
      uint64_t v51 = &v25[v49];
      *(void *)unint64_t v50 = *(void *)v51;
      *((_WORD *)v50 + 4) = *((_WORD *)v51 + 4);
      v24[v26[8]] = v25[v26[8]];
      goto LABEL_13;
    }
    outlined destroy of NCProtoContactInfo((uint64_t)v24, type metadata accessor for NCProtoCallState);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
    memcpy(v24, v25, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v62 + 32))(v24, v25, v63);
  v24[v26[5]] = v25[v26[5]];
  v24[v26[6]] = v25[v26[6]];
  uint64_t v31 = v26[7];
  uint64_t v32 = &v24[v31];
  uint64_t v33 = &v25[v31];
  *(void *)uint64_t v32 = *(void *)v33;
  *((_WORD *)v32 + 4) = *((_WORD *)v33 + 4);
  v24[v26[8]] = v25[v26[8]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
LABEL_13:
  uint64_t v35 = v64[9];
  *((unsigned char *)a1 + v64[8]) = *((unsigned char *)a2 + v64[8]);
  uint64_t v36 = (char *)a1 + v35;
  unint64_t v37 = (char *)a2 + v35;
  *(void *)uint64_t v36 = *(void *)v37;
  *((_WORD *)v36 + 4) = *((_WORD *)v37 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoDeviceTokenRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25742E7BC);
}

uint64_t sub_25742E7BC(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[7];

  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for NCProtoDeviceTokenRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25742E950);
}

uint64_t sub_25742E950(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoCallState?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[7];

  return v15(v17, a2, a2, v16);
}

void type metadata completion function for NCProtoDeviceTokenRequest()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for NCProtoContactInfo?(319, &lazy cache variable for type metadata for NCProtoMemberAssociationPrimaryInfo?, (void (*)(uint64_t))type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
    if (v1 <= 0x3F)
    {
      type metadata accessor for NCProtoContactInfo?(319, &lazy cache variable for type metadata for NCProtoCallState?, (void (*)(uint64_t))type metadata accessor for NCProtoCallState);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

ValueMetadata *type metadata accessor for NCProtoDeviceTokenRequest.ConversationHandoffType()
{
  return &type metadata for NCProtoDeviceTokenRequest.ConversationHandoffType;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoDeviceTokenResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    unint64_t v16 = *((void *)v15 + 1);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    }
    else
    {
      uint64_t v18 = *(void *)v15;
      outlined copy of Data._Representation(*(void *)v15, *((void *)v15 + 1));
      *(void *)uint64_t v14 = v18;
      *((void *)v14 + 1) = v16;
    }
  }
  return v4;
}

uint64_t destroy for NCProtoDeviceTokenResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *v7;
    return outlined consume of Data._Representation(v9, v8);
  }
  return result;
}

void *initializeWithCopy for NCProtoDeviceTokenResponse(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  unint64_t v15 = *((void *)v14 + 1);
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v16 = *(void *)v14;
    outlined copy of Data._Representation(*(void *)v14, *((void *)v14 + 1));
    *(void *)uint64_t v13 = v16;
    *((void *)v13 + 1) = v15;
  }
  return a1;
}

void *assignWithCopy for NCProtoDeviceTokenResponse(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  unint64_t v13 = *(void *)((char *)a2 + v10 + 8);
  if (*(void *)((char *)a1 + v10 + 8) >> 60 != 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v15 = *v12;
      outlined copy of Data._Representation(v15, v13);
      uint64_t v16 = *v11;
      unint64_t v17 = v11[1];
      *uint64_t v11 = v15;
      v11[1] = v13;
      outlined consume of Data._Representation(v16, v17);
      return a1;
    }
    outlined destroy of Data((uint64_t)v11);
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    return a1;
  }
  uint64_t v14 = *v12;
  outlined copy of Data._Representation(v14, v13);
  *uint64_t v11 = v14;
  v11[1] = v13;
  return a1;
}

_OWORD *initializeWithTake for NCProtoDeviceTokenResponse(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithTake for NCProtoDeviceTokenResponse(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  unint64_t v13 = (void *)((char *)a2 + v11);
  unint64_t v14 = *(void *)((char *)a1 + v11 + 8);
  if (v14 >> 60 != 15)
  {
    unint64_t v15 = v13[1];
    if (v15 >> 60 != 15)
    {
      uint64_t v16 = *v12;
      uint64_t *v12 = *v13;
      v12[1] = v15;
      outlined consume of Data._Representation(v16, v14);
      return a1;
    }
    outlined destroy of Data((uint64_t)v12);
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoDeviceTokenResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_97Tm_8);
}

uint64_t storeEnumTagSinglePayload for NCProtoDeviceTokenResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_98Tm_8);
}

uint64_t type metadata completion function for NCProtoDeviceTokenResponse()
{
  return type metadata completion function for NCProtoPullLagunaSessionToTVRequest();
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoDisconnectRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[7];
    *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    unint64_t v14 = (char *)a1 + v13;
    unint64_t v15 = (char *)a2 + v13;
    *(void *)unint64_t v14 = *(void *)v15;
    *((_WORD *)v14 + 4) = *((_WORD *)v15 + 4);
  }
  return a1;
}

uint64_t destroy for NCProtoCallStateRequest(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *initializeWithCopy for NCProtoDisconnectRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v13 = (char *)a1 + v12;
  unint64_t v14 = (char *)a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *((_WORD *)v13 + 4) = *((_WORD *)v14 + 4);
  return a1;
}

uint64_t *assignWithCopy for NCProtoDisconnectRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v14 = a3[7];
  unint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  __int16 v17 = *((_WORD *)v16 + 4);
  *(void *)unint64_t v15 = *(void *)v16;
  *((_WORD *)v15 + 4) = v17;
  return a1;
}

_OWORD *initializeWithTake for NCProtoDisconnectRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  *((_WORD *)v11 + 4) = *((_WORD *)v12 + 4);
  return a1;
}

uint64_t *assignWithTake for NCProtoDisconnectRequest(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *((_WORD *)v13 + 4) = *((_WORD *)v14 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoDisconnectRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25742F708);
}

uint64_t sub_25742F708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unsigned int v12 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    if (v12 >= 2) {
      int v13 = ((v12 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v13 = -2;
    }
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoDisconnectRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25742F7FC);
}

uint64_t sub_25742F7FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unsigned int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 2;
  }
  return result;
}

uint64_t type metadata completion function for NCProtoDisconnectRequest()
{
  return type metadata completion function for NCProtoTransferActiveConversationRequest();
}

ValueMetadata *type metadata accessor for NCProtoDisconnectRequest.DisconnectReason()
{
  return &type metadata for NCProtoDisconnectRequest.DisconnectReason;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoDisconnectResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for NCProtoDisconnectResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

unsigned char *initializeWithCopy for NCProtoDisconnectResponse(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

unsigned char *assignWithCopy for NCProtoDisconnectResponse(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

unsigned char *initializeWithTake for NCProtoDisconnectResponse(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

unsigned char *assignWithTake for NCProtoDisconnectResponse(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoDisconnectResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25742FCB8);
}

uint64_t sub_25742FCB8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    int v13 = &a1[*(int *)(a3 + 20)];
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoDisconnectResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25742FD7C);
}

unsigned char *sub_25742FD7C(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 20)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoDisconnectResponse()
{
  return type metadata completion function for NCProtoEndedSessionEvent();
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoCreateLinkConversationResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for NCProtoJoinActiveConversationRequest(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NCProtoCreateLinkConversationResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  void *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NCProtoCreateLinkConversationResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for NCProtoCreateLinkConversationResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for NCProtoCreateLinkConversationResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  void *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoPrepareTransferRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2574301BC);
}

uint64_t __swift_get_extra_inhabitant_index_214Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoPrepareTransferRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2574302A4);
}

uint64_t __swift_store_extra_inhabitant_index_215Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NCProtoPrepareTransferResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_136Tm_14);
}

uint64_t storeEnumTagSinglePayload for NCProtoPrepareTransferResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_137Tm_14);
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoEndedSessionEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    unint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for NCProtoEndedSessionEvent(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for NCProtoEndedSessionEvent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for NCProtoEndedSessionEvent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for NCProtoEndedSessionEvent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for NCProtoEndedSessionEvent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoAudioRouteTransferRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2574307D8);
}

uint64_t __swift_get_extra_inhabitant_index_97Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoAudioRouteTransferRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2574308A0);
}

uint64_t __swift_store_extra_inhabitant_index_98Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NCProtoLagunaConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for NCProtoLagunaConnectionResponse(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for NCProtoLagunaConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for NCProtoLagunaConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for NCProtoLagunaConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for NCProtoLagunaConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoAudioRouteTransferResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257430BC0);
}

uint64_t __swift_get_extra_inhabitant_index_136Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for NCProtoAudioRouteTransferResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257430C44);
}

uint64_t __swift_store_extra_inhabitant_index_137Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for NCProtoLagunaConnectionResponse()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoMemberAssociationPrimaryInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    unint64_t v15 = (uint64_t *)((char *)v7 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = (char *)v7 + v14;
    uint64_t v19 = (_OWORD *)((char *)a2 + v14);
    unint64_t v20 = *(uint64_t *)((char *)a2 + v14 + 8);
    swift_bridgeObjectRetain();
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v18 = *v19;
    }
    else
    {
      uint64_t v21 = *(void *)v19;
      outlined copy of Data._Representation(v21, v20);
      *(void *)uint64_t v18 = v21;
      *((void *)v18 + 1) = v20;
    }
    uint64_t v22 = a3[8];
    uint64_t v23 = a3[9];
    uint64_t v24 = (char *)v7 + v22;
    uint64_t v25 = (char *)a2 + v22;
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    uint64_t v26 = (uint64_t *)((char *)v7 + v23);
    uint64_t v27 = (uint64_t *)((char *)a2 + v23);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v28;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for NCProtoMemberAssociationPrimaryInfo(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    outlined consume of Data._Representation(*v6, v7);
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for NCProtoMemberAssociationPrimaryInfo(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)((char *)a1 + v11);
  uint64_t v14 = (void *)((char *)a2 + v11);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = (char *)a1 + v12;
  uint64_t v17 = (_OWORD *)((char *)a2 + v12);
  unint64_t v18 = *(void *)((char *)a2 + v12 + 8);
  swift_bridgeObjectRetain();
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v16 = *v17;
  }
  else
  {
    uint64_t v19 = *(void *)v17;
    outlined copy of Data._Representation(v19, v18);
    *(void *)uint64_t v16 = v19;
    *((void *)v16 + 1) = v18;
  }
  uint64_t v20 = a3[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = (char *)a1 + v20;
  uint64_t v23 = (char *)a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = (void *)((char *)a1 + v21);
  uint64_t v25 = (void *)((char *)a2 + v21);
  uint64_t v26 = v25[1];
  void *v24 = *v25;
  v24[1] = v26;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for NCProtoMemberAssociationPrimaryInfo(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  unint64_t v16 = *(void *)((char *)a2 + v13 + 8);
  if (*(void *)((char *)a1 + v13 + 8) >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      uint64_t v18 = *v15;
      outlined copy of Data._Representation(v18, v16);
      uint64_t v19 = *v14;
      unint64_t v20 = v14[1];
      uint64_t *v14 = v18;
      v14[1] = v16;
      outlined consume of Data._Representation(v19, v20);
      goto LABEL_8;
    }
    outlined destroy of Data((uint64_t)v14);
    goto LABEL_6;
  }
  if (v16 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    goto LABEL_8;
  }
  uint64_t v17 = *v15;
  outlined copy of Data._Representation(v17, v16);
  uint64_t *v14 = v17;
  v14[1] = v16;
LABEL_8:
  uint64_t v21 = a3[8];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = *(void *)v23;
  v22[8] = v23[8];
  *(void *)uint64_t v22 = v24;
  uint64_t v25 = a3[9];
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  *uint64_t v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for NCProtoMemberAssociationPrimaryInfo(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  uint64_t v11 = a3[8];
  uint64_t v12 = a3[9];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  return a1;
}

void *assignWithTake for NCProtoMemberAssociationPrimaryInfo(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  unint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  unint64_t v18 = *(void *)((char *)a1 + v15 + 8);
  if (v18 >> 60 != 15)
  {
    unint64_t v19 = v17[1];
    if (v19 >> 60 != 15)
    {
      uint64_t v20 = *v16;
      *unint64_t v16 = *v17;
      v16[1] = v19;
      outlined consume of Data._Representation(v20, v18);
      goto LABEL_6;
    }
    outlined destroy of Data((uint64_t)v16);
  }
  *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
LABEL_6:
  uint64_t v21 = a3[8];
  uint64_t v22 = a3[9];
  uint64_t v23 = (char *)a1 + v21;
  uint64_t v24 = (char *)a2 + v21;
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  uint64_t v25 = (void *)((char *)a1 + v22);
  uint64_t v26 = (void *)((char *)a2 + v22);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoMemberAssociationPrimaryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_82Tm_7);
}

uint64_t storeEnumTagSinglePayload for NCProtoMemberAssociationPrimaryInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_83Tm_7);
}

uint64_t type metadata completion function for NCProtoMemberAssociationPrimaryInfo()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType()
{
  return &type metadata for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoIDSProxyMessage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v7 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
LABEL_12:
      uint64_t v32 = *(int *)(a3 + 20);
      uint64_t v33 = (char *)a1 + v32;
      uint64_t v34 = (char *)a2 + v32;
      uint64_t v35 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
      return a1;
    }
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v21 = *a2;
      unint64_t v22 = a2[1];
      outlined copy of Data._Representation(*a2, v22);
      *a1 = v21;
      a1[1] = v22;
      uint64_t v23 = a2[2];
      unint64_t v24 = a2[3];
      outlined copy of Data._Representation(v23, v24);
      a1[2] = v23;
      a1[3] = v24;
      uint64_t v25 = a2[5];
      a1[4] = a2[4];
      a1[5] = v25;
      a1[6] = a2[6];
      uint64_t v26 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v12 = a2[2];
        a1[1] = a2[1];
        a1[2] = v12;
        *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
        a1[5] = a2[5];
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((unsigned char *)a1 + 64) = *((unsigned char *)a2 + 64);
        uint64_t v13 = a2[10];
        a1[9] = a2[9];
        unint64_t v14 = a2[11];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v13, v14);
        a1[10] = v13;
        a1[11] = v14;
        uint64_t v15 = a2[12];
        unint64_t v16 = a2[13];
        outlined copy of Data._Representation(v15, v16);
        a1[12] = v15;
        a1[13] = v16;
        uint64_t v17 = a2[15];
        a1[14] = a2[14];
        a1[15] = v17;
        uint64_t v18 = a2[17];
        a1[16] = a2[16];
        a1[17] = v18;
        uint64_t v19 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
        uint64_t v38 = (char *)a2 + v19;
        uint64_t v40 = (char *)a1 + v19;
        uint64_t v20 = type metadata accessor for UnknownStorage();
        unint64_t v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v37(v40, v38, v20);
LABEL_11:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
        goto LABEL_12;
      }
      uint64_t v27 = *a2;
      unint64_t v28 = a2[1];
      outlined copy of Data._Representation(*a2, v28);
      *a1 = v27;
      a1[1] = v28;
      uint64_t v29 = a2[3];
      a1[2] = a2[2];
      a1[3] = v29;
      a1[4] = a2[4];
      uint64_t v26 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
    }
    uint64_t v39 = (char *)a2 + v26;
    unint64_t v41 = (char *)a1 + v26;
    uint64_t v30 = type metadata accessor for UnknownStorage();
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31(v41, v39, v30);
    goto LABEL_11;
  }
  uint64_t v10 = *a2;
  *a1 = *a2;
  a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t destroy for NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
      outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(void *)(a1 + 80), *(void *)(a1 + 88));
      outlined consume of Data._Representation(*(void *)(a1 + 96), *(void *)(a1 + 104));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
    }
    else
    {
      if (EnumCaseMultiPayload) {
        goto LABEL_9;
      }
      outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
    }
    uint64_t v7 = a1 + v6;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
LABEL_9:
  uint64_t v9 = a1 + *(int *)(a2 + 20);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);

  return v11(v9, v10);
}

char *initializeWithCopy for NCProtoIDSProxyMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v19 = *(void *)a2;
      unint64_t v20 = *((void *)a2 + 1);
      outlined copy of Data._Representation(*(void *)a2, v20);
      *(void *)a1 = v19;
      *((void *)a1 + 1) = v20;
      uint64_t v21 = *((void *)a2 + 2);
      unint64_t v22 = *((void *)a2 + 3);
      outlined copy of Data._Representation(v21, v22);
      *((void *)a1 + 2) = v21;
      *((void *)a1 + 3) = v22;
      uint64_t v23 = *((void *)a2 + 5);
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *((void *)a1 + 5) = v23;
      *((void *)a1 + 6) = *((void *)a2 + 6);
      uint64_t v24 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *a1 = *a2;
        uint64_t v10 = *((void *)a2 + 2);
        *((void *)a1 + 1) = *((void *)a2 + 1);
        *((void *)a1 + 2) = v10;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *((void *)a1 + 5) = *((void *)a2 + 5);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        a1[64] = a2[64];
        uint64_t v11 = *((void *)a2 + 10);
        *((void *)a1 + 9) = *((void *)a2 + 9);
        unint64_t v12 = *((void *)a2 + 11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v11, v12);
        *((void *)a1 + 10) = v11;
        *((void *)a1 + 11) = v12;
        uint64_t v13 = *((void *)a2 + 12);
        unint64_t v14 = *((void *)a2 + 13);
        outlined copy of Data._Representation(v13, v14);
        *((void *)a1 + 12) = v13;
        *((void *)a1 + 13) = v14;
        uint64_t v15 = *((void *)a2 + 15);
        *((void *)a1 + 14) = *((void *)a2 + 14);
        *((void *)a1 + 15) = v15;
        uint64_t v16 = *((void *)a2 + 17);
        *((void *)a1 + 16) = *((void *)a2 + 16);
        *((void *)a1 + 17) = v16;
        uint64_t v17 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
        uint64_t v36 = &a2[v17];
        uint64_t v38 = &a1[v17];
        uint64_t v18 = type metadata accessor for UnknownStorage();
        uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v35(v38, v36, v18);
LABEL_9:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
        goto LABEL_10;
      }
      uint64_t v25 = *(void *)a2;
      unint64_t v26 = *((void *)a2 + 1);
      outlined copy of Data._Representation(*(void *)a2, v26);
      *(void *)a1 = v25;
      *((void *)a1 + 1) = v26;
      uint64_t v27 = *((void *)a2 + 3);
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *((void *)a1 + 3) = v27;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      uint64_t v24 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
    }
    unint64_t v37 = &a2[v24];
    uint64_t v39 = &a1[v24];
    uint64_t v28 = type metadata accessor for UnknownStorage();
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29(v39, v37, v28);
    goto LABEL_9;
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
LABEL_10:
  uint64_t v30 = *(int *)(a3 + 20);
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
  return a1;
}

uint64_t assignWithCopy for NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v71 = a3;
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v28 = *(void *)a2;
        unint64_t v29 = *(void *)(a2 + 8);
        outlined copy of Data._Representation(*(void *)a2, v29);
        *(void *)a1 = v28;
        *(void *)(a1 + 8) = v29;
        uint64_t v30 = *(void *)(a2 + 16);
        unint64_t v31 = *(void *)(a2 + 24);
        outlined copy of Data._Representation(v30, v31);
        *(void *)(a1 + 16) = v30;
        *(void *)(a1 + 24) = v31;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        uint64_t v32 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
        uint64_t v69 = a1 + v32;
        uint64_t v33 = a2 + v32;
        uint64_t v34 = type metadata accessor for UnknownStorage();
        uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v36 = v33;
        a3 = v71;
        v35(v69, v36, v34);
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          uint64_t v37 = *(void *)a2;
          unint64_t v38 = *(void *)(a2 + 8);
          outlined copy of Data._Representation(*(void *)a2, v38);
          *(void *)a1 = v37;
          *(void *)(a1 + 8) = v38;
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          uint64_t v39 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
          uint64_t v70 = a1 + v39;
          uint64_t v40 = a2 + v39;
          uint64_t v41 = type metadata accessor for UnknownStorage();
          uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v42(v70, v40, v41);
          swift_storeEnumTagMultiPayload();
          a3 = v71;
          goto LABEL_16;
        }
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        uint64_t v12 = *(void *)(a2 + 80);
        unint64_t v13 = *(void *)(a2 + 88);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v12, v13);
        *(void *)(a1 + 80) = v12;
        *(void *)(a1 + 88) = v13;
        uint64_t v14 = *(void *)(a2 + 96);
        unint64_t v15 = *(void *)(a2 + 104);
        outlined copy of Data._Representation(v14, v15);
        *(void *)(a1 + 96) = v14;
        *(void *)(a1 + 104) = v15;
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        *(void *)(a1 + 120) = *(void *)(a2 + 120);
        *(void *)(a1 + 128) = *(void *)(a2 + 128);
        *(void *)(a1 + 136) = *(void *)(a2 + 136);
        uint64_t v16 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
        uint64_t v65 = a2 + v16;
        uint64_t v67 = a1 + v16;
        uint64_t v17 = type metadata accessor for UnknownStorage();
        uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v18(v67, v65, v17);
        a3 = v71;
      }
      swift_storeEnumTagMultiPayload();
LABEL_16:
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_17;
    }
    goto LABEL_8;
  }
  if (v10)
  {
    outlined destroy of NCProtoContactInfo(a1, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
LABEL_8:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_17;
  }
  if (a1 != a2)
  {
    outlined destroy of NCProtoContactInfo(a1, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    int v20 = swift_getEnumCaseMultiPayload();
    if (v20 == 2)
    {
      uint64_t v48 = *(void *)a2;
      unint64_t v49 = *(void *)(a2 + 8);
      outlined copy of Data._Representation(*(void *)a2, v49);
      *(void *)a1 = v48;
      *(void *)(a1 + 8) = v49;
      uint64_t v50 = *(void *)(a2 + 16);
      unint64_t v51 = *(void *)(a2 + 24);
      outlined copy of Data._Representation(v50, v51);
      *(void *)(a1 + 16) = v50;
      *(void *)(a1 + 24) = v51;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      uint64_t v52 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
      uint64_t v53 = a1 + v52;
      uint64_t v72 = a3;
      uint64_t v54 = a2 + v52;
      uint64_t v55 = type metadata accessor for UnknownStorage();
      uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v57 = v54;
      a3 = v72;
      v56(v53, v57, v55);
      swift_storeEnumTagMultiPayload();
    }
    else if (v20 == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      uint64_t v21 = *(void *)(a2 + 80);
      unint64_t v22 = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v21, v22);
      *(void *)(a1 + 80) = v21;
      *(void *)(a1 + 88) = v22;
      uint64_t v23 = *(void *)(a2 + 96);
      unint64_t v24 = *(void *)(a2 + 104);
      outlined copy of Data._Representation(v23, v24);
      *(void *)(a1 + 96) = v23;
      *(void *)(a1 + 104) = v24;
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      uint64_t v25 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
      uint64_t v66 = a2 + v25;
      uint64_t v68 = a1 + v25;
      uint64_t v26 = type metadata accessor for UnknownStorage();
      uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27(v68, v66, v26);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v73 = a3;
      uint64_t v58 = *(void *)a2;
      unint64_t v59 = *(void *)(a2 + 8);
      outlined copy of Data._Representation(*(void *)a2, v59);
      *(void *)a1 = v58;
      *(void *)(a1 + 8) = v59;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v60 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
      uint64_t v61 = a1 + v60;
      uint64_t v62 = a2 + v60;
      uint64_t v63 = type metadata accessor for UnknownStorage();
      int v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v64(v61, v62, v63);
      swift_storeEnumTagMultiPayload();
      a3 = v73;
    }
  }
LABEL_17:
  uint64_t v43 = *(int *)(a3 + 20);
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  uint64_t v46 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 24))(v44, v45, v46);
  return a1;
}

_OWORD *initializeWithTake for NCProtoIDSProxyMessage(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      long long v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      a1[2] = a2[2];
      *((void *)a1 + 6) = *((void *)a2 + 6);
      uint64_t v18 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
      uint64_t v19 = (char *)a1 + v18;
      int v20 = (char *)a2 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
        *((void *)a1 + 3) = *((void *)a2 + 3);
        long long v10 = a2[3];
        a1[2] = a2[2];
        a1[3] = v10;
        *((unsigned char *)a1 + 64) = *((unsigned char *)a2 + 64);
        *((void *)a1 + 9) = *((void *)a2 + 9);
        long long v11 = a2[6];
        a1[5] = a2[5];
        a1[6] = v11;
        long long v12 = a2[8];
        a1[7] = a2[7];
        a1[8] = v12;
        uint64_t v13 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
      }
      else
      {
        long long v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        *((void *)a1 + 4) = *((void *)a2 + 4);
        uint64_t v13 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
      }
      uint64_t v14 = (char *)a1 + v13;
      unint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v23 = *(int *)(a3 + 20);
  unint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
  return a1;
}

uint64_t assignWithTake for NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        long long v28 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v28;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        uint64_t v29 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
        uint64_t v30 = a1 + v29;
        uint64_t v31 = a2 + v29;
        uint64_t v32 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          *(unsigned char *)a1 = *(unsigned char *)a2;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          long long v12 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 48) = v12;
          *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
          *(void *)(a1 + 72) = *(void *)(a2 + 72);
          long long v13 = *(_OWORD *)(a2 + 96);
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
          *(_OWORD *)(a1 + 96) = v13;
          long long v14 = *(_OWORD *)(a2 + 128);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 128) = v14;
          uint64_t v15 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
        }
        else
        {
          long long v33 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v33;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          uint64_t v15 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
        }
        uint64_t v16 = a1 + v15;
        uint64_t v17 = a2 + v15;
        uint64_t v18 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_18;
    }
LABEL_9:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_18;
  }
  if (v10)
  {
    outlined destroy of NCProtoContactInfo(a1, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    outlined destroy of NCProtoContactInfo(a1, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    int v20 = swift_getEnumCaseMultiPayload();
    if (v20 == 2)
    {
      long long v39 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v39;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      uint64_t v40 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
      uint64_t v41 = a1 + v40;
      uint64_t v42 = a2 + v40;
      uint64_t v43 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 32))(v41, v42, v43);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (v20 == 1)
      {
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        long long v21 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v21;
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        long long v22 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 96) = v22;
        long long v23 = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 128) = v23;
        uint64_t v24 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
      }
      else
      {
        long long v44 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v44;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v24 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
      }
      uint64_t v25 = a1 + v24;
      uint64_t v26 = a2 + v24;
      uint64_t v27 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_18:
  uint64_t v34 = *(int *)(a3 + 20);
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  uint64_t v37 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 40))(v35, v36, v37);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257432CF0);
}

uint64_t sub_257432CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    long long v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoIDSProxyMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257432E00);
}

uint64_t sub_257432E00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void type metadata completion function for NCProtoIDSProxyMessage()
{
  type metadata accessor for NCProtoContactInfo?(319, &lazy cache variable for type metadata for NCProtoIDSProxyMessage.OneOf_Message?, (void (*)(uint64_t))type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t initializeBufferWithCopyOfBuffer for NCProtoIDSProxyMessage.OneOf_Message(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v19 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v20 = *(void *)a2;
      unint64_t v21 = *(void *)(a2 + 8);
      outlined copy of Data._Representation(*(void *)a2, v21);
      *(void *)a1 = v20;
      *(void *)(a1 + 8) = v21;
      uint64_t v22 = *(void *)(a2 + 16);
      unint64_t v23 = *(void *)(a2 + 24);
      outlined copy of Data._Representation(v22, v23);
      *(void *)(a1 + 16) = v22;
      *(void *)(a1 + 24) = v23;
      uint64_t v24 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v24;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      uint64_t v25 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
      uint64_t v26 = a1 + v25;
      uint64_t v27 = a2 + v25;
      uint64_t v28 = type metadata accessor for UnknownStorage();
      uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29(v26, v27, v28);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      uint64_t v8 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      unint64_t v9 = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v8, v9);
      *(void *)(a1 + 80) = v8;
      *(void *)(a1 + 88) = v9;
      uint64_t v10 = *(void *)(a2 + 96);
      unint64_t v11 = *(void *)(a2 + 104);
      outlined copy of Data._Representation(v10, v11);
      *(void *)(a1 + 96) = v10;
      *(void *)(a1 + 104) = v11;
      uint64_t v12 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v12;
      uint64_t v13 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v13;
      uint64_t v14 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
      uint64_t v15 = a1 + v14;
      uint64_t v16 = a2 + v14;
      uint64_t v17 = type metadata accessor for UnknownStorage();
      uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18(v15, v16, v17);
    }
    else
    {
      uint64_t v30 = *(void *)a2;
      unint64_t v31 = *(void *)(a2 + 8);
      outlined copy of Data._Representation(*(void *)a2, v31);
      *(void *)a1 = v30;
      *(void *)(a1 + 8) = v31;
      uint64_t v32 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v32;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v33 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
      uint64_t v34 = a1 + v33;
      uint64_t v35 = a2 + v33;
      uint64_t v36 = type metadata accessor for UnknownStorage();
      uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v34, v35, v36);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for NCProtoIDSProxyMessage.OneOf_Message(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
    outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
  }
  else if (result == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(void *)(a1 + 80), *(void *)(a1 + 88));
    outlined consume of Data._Representation(*(void *)(a1 + 96), *(void *)(a1 + 104));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
  }
  else
  {
    if (result) {
      return result;
    }
    outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
  }
  uint64_t v4 = a1 + v3;
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for NCProtoIDSProxyMessage.OneOf_Message(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v16 = *(void *)a2;
    unint64_t v17 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v17);
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = v17;
    uint64_t v18 = *(void *)(a2 + 16);
    unint64_t v19 = *(void *)(a2 + 24);
    outlined copy of Data._Representation(v18, v19);
    *(void *)(a1 + 16) = v18;
    *(void *)(a1 + 24) = v19;
    uint64_t v20 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v20;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    uint64_t v21 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
    uint64_t v22 = a1 + v21;
    uint64_t v23 = a2 + v21;
    uint64_t v24 = type metadata accessor for UnknownStorage();
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25(v22, v23, v24);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    uint64_t v6 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    unint64_t v7 = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v6, v7);
    *(void *)(a1 + 80) = v6;
    *(void *)(a1 + 88) = v7;
    uint64_t v8 = *(void *)(a2 + 96);
    unint64_t v9 = *(void *)(a2 + 104);
    outlined copy of Data._Representation(v8, v9);
    *(void *)(a1 + 96) = v8;
    *(void *)(a1 + 104) = v9;
    uint64_t v10 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = v10;
    uint64_t v11 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = v11;
    uint64_t v12 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
    uint64_t v13 = a1 + v12;
    uint64_t v35 = a2 + v12;
    uint64_t v14 = type metadata accessor for UnknownStorage();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v13, v35, v14);
  }
  else
  {
    uint64_t v26 = *(void *)a2;
    unint64_t v27 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v27);
    *(void *)a1 = v26;
    *(void *)(a1 + 8) = v27;
    uint64_t v28 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v28;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    uint64_t v29 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
    uint64_t v30 = a1 + v29;
    uint64_t v31 = a2 + v29;
    uint64_t v32 = type metadata accessor for UnknownStorage();
    uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33(v30, v31, v32);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for NCProtoIDSProxyMessage.OneOf_Message(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of NCProtoContactInfo(a1, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v14 = *(void *)a2;
      unint64_t v15 = *(void *)(a2 + 8);
      outlined copy of Data._Representation(*(void *)a2, v15);
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v15;
      uint64_t v16 = *(void *)(a2 + 16);
      unint64_t v17 = *(void *)(a2 + 24);
      outlined copy of Data._Representation(v16, v17);
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = v17;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      uint64_t v18 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
      uint64_t v19 = a1 + v18;
      uint64_t v20 = a2 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22(v19, v20, v21);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      uint64_t v5 = *(void *)(a2 + 80);
      unint64_t v6 = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v5, v6);
      *(void *)(a1 + 80) = v5;
      *(void *)(a1 + 88) = v6;
      uint64_t v7 = *(void *)(a2 + 96);
      unint64_t v8 = *(void *)(a2 + 104);
      outlined copy of Data._Representation(v7, v8);
      *(void *)(a1 + 96) = v7;
      *(void *)(a1 + 104) = v8;
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      uint64_t v9 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
      uint64_t v10 = a1 + v9;
      uint64_t v11 = a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13(v10, v11, v12);
    }
    else
    {
      uint64_t v23 = *(void *)a2;
      unint64_t v24 = *(void *)(a2 + 8);
      outlined copy of Data._Representation(*(void *)a2, v24);
      *(void *)a1 = v23;
      *(void *)(a1 + 8) = v24;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v25 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
      uint64_t v26 = a1 + v25;
      uint64_t v27 = a2 + v25;
      uint64_t v28 = type metadata accessor for UnknownStorage();
      uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29(v26, v27, v28);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for NCProtoIDSProxyMessage.OneOf_Message(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    long long v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    uint64_t v13 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = a2 + v13;
    uint64_t v16 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      long long v5 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v5;
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      long long v6 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v6;
      long long v7 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v7;
      uint64_t v8 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
    }
    else
    {
      long long v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v17;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v8 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
    }
    uint64_t v9 = a1 + v8;
    uint64_t v10 = a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for NCProtoIDSProxyMessage.OneOf_Message(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of NCProtoContactInfo(a1, type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      long long v12 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v12;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      uint64_t v13 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.Resource(0) + 32);
      uint64_t v14 = a1 + v13;
      uint64_t v15 = a2 + v13;
      uint64_t v16 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        long long v5 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v5;
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        long long v6 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 96) = v6;
        long long v7 = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 128) = v7;
        uint64_t v8 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0) + 68);
      }
      else
      {
        long long v17 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v17;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v8 = *(int *)(type metadata accessor for NCProtoIDSProxyMessage.RawData(0) + 28);
      }
      uint64_t v9 = a1 + v8;
      uint64_t v10 = a2 + v8;
      uint64_t v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoIDSProxyMessage.OneOf_Message(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for NCProtoIDSProxyMessage.OneOf_Message(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for NCProtoIDSProxyMessage.OneOf_Message()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for NCProtoIDSProxyMessage.OneOf_Message()
{
  uint64_t result = type metadata accessor for NCProtoIDSProxyMessage.RawData(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for NCProtoIDSProxyMessage.Resource(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoIDSProxyMessage.RawData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    a1[4] = a2[4];
    uint64_t v10 = *(int *)(a3 + 28);
    uint64_t v11 = (char *)a1 + v10;
    long long v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
  }
  return a1;
}

uint64_t destroy for NCProtoIDSProxyMessage.RawData(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *initializeWithCopy for NCProtoIDSProxyMessage.RawData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  a1[4] = a2[4];
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  return a1;
}

uint64_t *assignWithCopy for NCProtoIDSProxyMessage.RawData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for NCProtoJoinEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for NCProtoIDSProxyMessage.RawData(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v8;
  swift_bridgeObjectRelease();
  a1[4] = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoIDSProxyMessage.RawData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257434370);
}

uint64_t sub_257434370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoIDSProxyMessage.RawData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257434434);
}

uint64_t sub_257434434(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoIDSProxyMessage.RawData()
{
  return type metadata completion function for NCProtoJoinEvent();
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoIDSProxyMessage.Resource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    outlined copy of Data._Representation(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a2[5];
    a1[4] = a2[4];
    a1[5] = v11;
    a1[6] = a2[6];
    uint64_t v12 = *(int *)(a3 + 32);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for UnknownStorage();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for NCProtoIDSProxyMessage.Resource(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *initializeWithCopy for NCProtoIDSProxyMessage.Resource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  outlined copy of Data._Representation(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a2[5];
  a1[4] = a2[4];
  a1[5] = v10;
  a1[6] = a2[6];
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  return a1;
}

uint64_t *assignWithCopy for NCProtoIDSProxyMessage.Resource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  outlined copy of Data._Representation(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  outlined consume of Data._Representation(v12, v13);
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t initializeWithTake for NCProtoIDSProxyMessage.Resource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for NCProtoIDSProxyMessage.Resource(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v10;
  swift_bridgeObjectRelease();
  a1[6] = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoIDSProxyMessage.Resource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257434A78);
}

uint64_t sub_257434A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoIDSProxyMessage.Resource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257434B3C);
}

uint64_t sub_257434B3C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 40) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoIDSProxyMessage.Resource()
{
  return type metadata completion function for NCProtoContactHandleAnonym();
}

unsigned char *initializeBufferWithCopyOfBuffer for NCProtoIDSProxyMessage.GroupUpdate(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *(void *)unint64_t v4 = *a2;
    unint64_t v4 = (unsigned char *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = a2[2];
    *((void *)v4 + 1) = a2[1];
    *((void *)v4 + 2) = v7;
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 3);
    *((void *)v4 + 5) = a2[5];
    *((_OWORD *)v4 + 3) = *((_OWORD *)a2 + 3);
    v4[64] = *((unsigned char *)a2 + 64);
    uint64_t v8 = a2[10];
    *((void *)v4 + 9) = a2[9];
    unint64_t v9 = a2[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v8, v9);
    *((void *)v4 + 10) = v8;
    *((void *)v4 + 11) = v9;
    uint64_t v10 = a2[12];
    unint64_t v11 = a2[13];
    outlined copy of Data._Representation(v10, v11);
    *((void *)v4 + 12) = v10;
    *((void *)v4 + 13) = v11;
    uint64_t v12 = a2[15];
    *((void *)v4 + 14) = a2[14];
    *((void *)v4 + 15) = v12;
    uint64_t v13 = a2[16];
    uint64_t v14 = a2[17];
    uint64_t v15 = *(int *)(a3 + 68);
    uint64_t v16 = &v4[v15];
    uint64_t v17 = (uint64_t)a2 + v15;
    *((void *)v4 + 16) = v13;
    *((void *)v4 + 17) = v14;
    uint64_t v18 = type metadata accessor for UnknownStorage();
    uint64_t v19 = *(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19(v16, v17, v18);
  }
  return v4;
}

uint64_t destroy for NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(a1 + 80), *(void *)(a1 + 88));
  outlined consume of Data._Representation(*(void *)(a1 + 96), *(void *)(a1 + 104));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 68);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  unint64_t v8 = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v7, v8);
  *(void *)(a1 + 80) = v7;
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 96);
  unint64_t v10 = *(void *)(a2 + 104);
  outlined copy of Data._Representation(v9, v10);
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = v10;
  uint64_t v11 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v11;
  uint64_t v12 = *(void *)(a2 + 128);
  uint64_t v13 = *(void *)(a2 + 136);
  uint64_t v14 = *(int *)(a3 + 68);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)(a1 + 128) = v12;
  *(void *)(a1 + 136) = v13;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18(v15, v16, v17);
  return a1;
}

uint64_t assignWithCopy for NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 80);
  unint64_t v7 = *(void *)(a2 + 88);
  outlined copy of Data._Representation(v6, v7);
  uint64_t v8 = *(void *)(a1 + 80);
  unint64_t v9 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(void *)(a2 + 96);
  unint64_t v11 = *(void *)(a2 + 104);
  outlined copy of Data._Representation(v10, v11);
  uint64_t v12 = *(void *)(a1 + 96);
  unint64_t v13 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = v10;
  *(void *)(a1 + 104) = v11;
  outlined consume of Data._Representation(v12, v13);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(int *)(a3 + 68);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t initializeWithTake for NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  long long v6 = *(_OWORD *)(a2 + 128);
  uint64_t v7 = *(int *)(a3 + 68);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  unint64_t v8 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  outlined consume of Data._Representation(v7, v8);
  uint64_t v9 = *(void *)(a1 + 96);
  unint64_t v10 = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  outlined consume of Data._Representation(v9, v10);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 68);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257435344);
}

uint64_t sub_257435344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 68);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoIDSProxyMessage.GroupUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257435408);
}

uint64_t sub_257435408(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 68);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for NCProtoIDSProxyMessage.GroupUpdate()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NCProtoFavoritesDidChangeEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for NCProtoFavoritesDidChangeEvent(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for NCProtoFavoritesDidChangeEvent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *assignWithCopy for NCProtoFavoritesDidChangeEvent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *initializeWithTake for NCProtoFavoritesDidChangeEvent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for NCProtoFavoritesDidChangeEvent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NCProtoIDSProxyMessage.ParticipantIDList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25743592C);
}

uint64_t __swift_get_extra_inhabitant_index_82Tm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NCProtoIDSProxyMessage.ParticipantIDList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2574359F4);
}

void *__swift_store_extra_inhabitant_index_83Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t outlined init with take of (key: String, value: NCProtoCallInfo)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of NCProtoContactInfo?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of NCProtoContactInfo?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t NCProtoLagunaConnectionResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoDeviceLaunchedEvent.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoEndLagunaSessionEvent.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoPullLagunaSessionToTVResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoTransferActiveConversationResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoTransferContinuityCallResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoStartConversationResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoJoinActiveConversationResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoLinkConversationSendLetMeInResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoLinkConversationCancelResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoDeclineContinuityCallResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoGetAddressableContactsRequest.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoAddConversationParticipantsResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoPrepareTransferResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t NCProtoAudioRouteTransferResponse.traverse<A>(visitor:)()
{
  return NCProtoTVLaunchedEvent.traverse<A>(visitor:)();
}

uint64_t IncomingHandoffContext.isAudioEnabled.getter()
{
  return *v0;
}

uint64_t IncomingHandoffContext.isVideoEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

void IncomingHandoffContext.callType.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 2);
}

uint64_t IncomingHandoffContext.isCaptioningEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 3);
}

uint64_t IncomingHandoffContext.skipPreviewBulletin.getter()
{
  return *(unsigned __int8 *)(v0 + 4);
}

NeighborhoodActivityConduit::IncomingHandoffContext __swiftcall IncomingHandoffContext.init(isAudioEnabled:isVideoEnabled:callType:isCaptioningEnabled:skipPreviewBulletin:)(Swift::Bool isAudioEnabled, Swift::Bool isVideoEnabled, NeighborhoodActivityConduit::CallType callType, Swift::Bool isCaptioningEnabled, Swift::Bool skipPreviewBulletin)
{
  char v6 = *(unsigned char *)callType;
  *uint64_t v5 = isAudioEnabled;
  v5[1] = isVideoEnabled;
  v5[2] = v6;
  v5[3] = isCaptioningEnabled;
  v5[4] = skipPreviewBulletin;
  result.isAudioEnabled = isAudioEnabled;
  return result;
}

uint64_t IncomingHandoffContext.description.getter()
{
  int v1 = *v0;
  int v2 = v0[1];
  int v3 = v0[2];
  int v4 = v0[3];
  int v26 = v0[4];
  _StringGuts.grow(_:)(118);
  v5._countAndFlagsBits = 0xD000000000000027;
  v5._object = (void *)0x8000000257449350;
  String.append(_:)(v5);
  if (v1) {
    uint64_t v6 = 1702195828;
  }
  else {
    uint64_t v6 = 0x65736C6166;
  }
  if (v1) {
    unint64_t v7 = 0xE400000000000000;
  }
  else {
    unint64_t v7 = 0xE500000000000000;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0xD000000000000010;
  v9._object = (void *)0x8000000257449380;
  String.append(_:)(v9);
  if (v2) {
    uint64_t v10 = 1702195828;
  }
  else {
    uint64_t v10 = 0x65736C6166;
  }
  if (v2) {
    unint64_t v11 = 0xE400000000000000;
  }
  else {
    unint64_t v11 = 0xE500000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x7079546C6C616320;
  v13._object = (void *)0xEA00000000003D65;
  String.append(_:)(v13);
  if (v3) {
    uint64_t v14 = 0x6F656469762ELL;
  }
  else {
    uint64_t v14 = 0x6F696475612ELL;
  }
  unint64_t v15 = 0xE600000000000000;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v16._object = (void *)0x80000002574493A0;
  v16._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v16);
  if (v4) {
    uint64_t v17 = 1702195828;
  }
  else {
    uint64_t v17 = 0x65736C6166;
  }
  if (v4) {
    unint64_t v18 = 0xE400000000000000;
  }
  else {
    unint64_t v18 = 0xE500000000000000;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._object = (void *)0x80000002574493C0;
  v20._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v20);
  if (v26) {
    uint64_t v21 = 1702195828;
  }
  else {
    uint64_t v21 = 0x65736C6166;
  }
  if (v26) {
    unint64_t v22 = 0xE400000000000000;
  }
  else {
    unint64_t v22 = 0xE500000000000000;
  }
  unint64_t v23 = v22;
  String.append(_:)(*(Swift::String *)&v21);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 62;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  return 0;
}

uint64_t IncomingHandoffContext.queryItem.getter()
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  lazy protocol witness table accessor for type IncomingHandoffContext and conformance IncomingHandoffContext();
  uint64_t v0 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v2 = v1;
  outlined copy of Data._Representation(v0, v1);
  Data.base64EncodedString(options:)(0);
  outlined consume of Data._Representation(v0, v2);
  swift_release();
  outlined consume of Data._Representation(v0, v2);
  URLQueryItem.init(name:value:)();
  return swift_bridgeObjectRelease();
}

unint64_t IncomingHandoffContext.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x456F696475417369;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x456F656469567369;
      break;
    case 2:
      unint64_t result = 0x657079546C6C6163;
      break;
    case 3:
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance IncomingHandoffContext.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void protocol witness for Hashable.hash(into:) in conformance IncomingHandoffContext.CodingKeys()
{
  Hasher._combine(_:)(*v0);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance IncomingHandoffContext.CodingKeys()
{
  return IncomingHandoffContext.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IncomingHandoffContext.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized IncomingHandoffContext.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance IncomingHandoffContext.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance IncomingHandoffContext.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IncomingHandoffContext.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IncomingHandoffContext.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t IncomingHandoffContext.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<IncomingHandoffContext.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v8 = v1[1];
  int v13 = v1[2];
  int v14 = v8;
  int v9 = v1[3];
  v12[0] = v1[4];
  v12[1] = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v10 = v13;
    char v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v18 = v10;
    char v17 = 2;
    lazy protocol witness table accessor for type CallType and conformance CallType();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v16 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v15 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t IncomingHandoffContext.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<IncomingHandoffContext.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v21 = 0;
    char v9 = KeyedDecodingContainer.decode(_:forKey:)();
    char v20 = 1;
    char v10 = KeyedDecodingContainer.decode(_:forKey:)();
    char v18 = 2;
    lazy protocol witness table accessor for type CallType and conformance CallType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v15 = v19;
    char v17 = 3;
    int v14 = KeyedDecodingContainer.decode(_:forKey:)();
    char v16 = 4;
    char v12 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9 & 1;
    a2[1] = v10 & 1;
    a2[2] = v15;
    a2[3] = v14 & 1;
    a2[4] = v12 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance IncomingHandoffContext@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return IncomingHandoffContext.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IncomingHandoffContext(void *a1)
{
  return IncomingHandoffContext.encode(to:)(a1);
}

uint64_t JoinFailureContext.nacErrorCode.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for JoinFailureContext(0) + 20));
}

uint64_t JoinFailureContext.init(conversationUUID:nacErrorCode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t result = type metadata accessor for JoinFailureContext(0);
  uint64_t v10 = a4 + *(int *)(result + 20);
  *(void *)uint64_t v10 = a2;
  *(unsigned char *)(v10 + 8) = a3 & 1;
  return result;
}

uint64_t JoinFailureContext.description.getter()
{
  _StringGuts.grow(_:)(56);
  v0._object = (void *)0x80000002574493E0;
  v0._countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v0);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x6F72724563616E20;
  v2._object = (void *)0xEE003D65646F4372;
  String.append(_:)(v2);
  type metadata accessor for JoinFailureContext(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  v3._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 62;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t JoinFailureContext.queryItem.getter()
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  type metadata accessor for JoinFailureContext(0);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type JoinFailureContext and conformance JoinFailureContext, (void (*)(uint64_t))type metadata accessor for JoinFailureContext);
  uint64_t v0 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v2 = v1;
  outlined copy of Data._Representation(v0, v1);
  Data.base64EncodedString(options:)(0);
  outlined consume of Data._Representation(v0, v2);
  swift_release();
  outlined consume of Data._Representation(v0, v2);
  URLQueryItem.init(name:value:)();

  return swift_bridgeObjectRelease();
}

uint64_t static JoinFailureContext.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for JoinFailureContext(0) + 20);
  uint64_t v5 = (void *)(a1 + v4);
  char v6 = *(unsigned char *)(a1 + v4 + 8);
  uint64_t v7 = (void *)(a2 + v4);
  char v8 = *(unsigned char *)(a2 + v4 + 8);
  if (v6)
  {
    if ((v8 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*v5 != *v7) {
      char v8 = 1;
    }
    if (v8) {
      return 0;
    }
  }
  return 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance JoinFailureContext.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance JoinFailureContext.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance JoinFailureContext.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance JoinFailureContext.CodingKeys()
{
  if (*v0) {
    return 0x726F72724563616ELL;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance JoinFailureContext.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized JoinFailureContext.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance JoinFailureContext.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance JoinFailureContext.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance JoinFailureContext.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t JoinFailureContext.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<JoinFailureContext.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for JoinFailureContext(0);
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t JoinFailureContext.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v25 = *(void *)(v4 - 8);
  uint64_t v26 = v4;
  MEMORY[0x270FA5388](v4);
  char v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<JoinFailureContext.CodingKeys>);
  uint64_t v24 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  char v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for JoinFailureContext(0);
  MEMORY[0x270FA5388](v9);
  unint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  unint64_t v22 = v11;
  uint64_t v12 = v24;
  uint64_t v13 = v25;
  char v29 = 0;
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v14 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v22, v6, v14);
  char v28 = 1;
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v17 = v16;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v27);
  uint64_t v19 = (uint64_t)v22;
  uint64_t v18 = v23;
  char v20 = &v22[*(int *)(v9 + 20)];
  *(void *)char v20 = v15;
  v20[8] = v17 & 1;
  outlined init with copy of JoinFailureContext(v19, v18, type metadata accessor for JoinFailureContext);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of JoinFailureContext(v19, type metadata accessor for JoinFailureContext);
}

uint64_t protocol witness for Decodable.init(from:) in conformance JoinFailureContext@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return JoinFailureContext.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance JoinFailureContext(void *a1)
{
  return JoinFailureContext.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance JoinFailureContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (static UUID.== infix(_:_:)())
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (void *)(a1 + v6);
    char v8 = *(unsigned char *)(a1 + v6 + 8);
    uint64_t v9 = (void *)(a2 + v6);
    int v10 = *(unsigned __int8 *)(a2 + v6 + 8);
    if (v8)
    {
      if (v10) {
        return 1;
      }
    }
    else
    {
      if (*v7 != *v9) {
        LOBYTE(v10) = 1;
      }
      if ((v10 & 1) == 0) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t JoinFailureContext.conversationUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t JoinContinuityConversationRequestContext.isAudioEnabled.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for JoinContinuityConversationRequestContext(0) + 20));
}

uint64_t JoinContinuityConversationRequestContext.isVideoEnabled.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for JoinContinuityConversationRequestContext(0) + 24));
}

uint64_t JoinContinuityConversationRequestContext.wantsStagingArea.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for JoinContinuityConversationRequestContext(0) + 28));
}

int *JoinContinuityConversationRequestContext.init(conversationUUID:isAudioEnabled:isVideoEnabled:wantsStagingArea:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  uint64_t result = (int *)type metadata accessor for JoinContinuityConversationRequestContext(0);
  *(unsigned char *)(a5 + result[5]) = a2;
  *(unsigned char *)(a5 + result[6]) = a3;
  *(unsigned char *)(a5 + result[7]) = a4;
  return result;
}

uint64_t JoinContinuityConversationRequestContext.description.getter()
{
  _StringGuts.grow(_:)(118);
  v1._countAndFlagsBits = 0xD00000000000003BLL;
  v1._object = (void *)0x8000000257449410;
  String.append(_:)(v1);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._object = (void *)0x8000000257449450;
  v3._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v3);
  uint64_t v4 = (int *)type metadata accessor for JoinContinuityConversationRequestContext(0);
  if (*(unsigned char *)(v0 + v4[5])) {
    uint64_t v5 = 1702195828;
  }
  else {
    uint64_t v5 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + v4[5])) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x8000000257449380;
  v8._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v8);
  if (*(unsigned char *)(v0 + v4[6])) {
    uint64_t v9 = 1702195828;
  }
  else {
    uint64_t v9 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + v4[6])) {
    unint64_t v10 = 0xE400000000000000;
  }
  else {
    unint64_t v10 = 0xE500000000000000;
  }
  unint64_t v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0xD000000000000012;
  v12._object = (void *)0x8000000257449470;
  String.append(_:)(v12);
  if (*(unsigned char *)(v0 + v4[7])) {
    uint64_t v13 = 1702195828;
  }
  else {
    uint64_t v13 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + v4[7])) {
    unint64_t v14 = 0xE400000000000000;
  }
  else {
    unint64_t v14 = 0xE500000000000000;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 62;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return 0;
}

uint64_t JoinContinuityConversationRequestContext.queryItem.getter()
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  type metadata accessor for JoinContinuityConversationRequestContext(0);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext and conformance JoinContinuityConversationRequestContext, (void (*)(uint64_t))type metadata accessor for JoinContinuityConversationRequestContext);
  uint64_t v0 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v2 = v1;
  outlined copy of Data._Representation(v0, v1);
  Data.base64EncodedString(options:)(0);
  outlined consume of Data._Representation(v0, v2);
  swift_release();
  outlined consume of Data._Representation(v0, v2);
  URLQueryItem.init(name:value:)();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance JoinContinuityConversationRequestContext.CodingKeys()
{
  uint64_t result = 0xD000000000000010;
  switch(*v0)
  {
    case 1:
      uint64_t v2 = 0x696475417369;
      goto LABEL_4;
    case 2:
      uint64_t v2 = 0x656469567369;
LABEL_4:
      uint64_t result = v2 & 0xFFFFFFFFFFFFLL | 0x456F000000000000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance JoinContinuityConversationRequestContext.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized JoinContinuityConversationRequestContext.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance JoinContinuityConversationRequestContext.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance JoinContinuityConversationRequestContext.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance JoinContinuityConversationRequestContext.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t JoinContinuityConversationRequestContext.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<JoinContinuityConversationRequestContext.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for JoinContinuityConversationRequestContext(0);
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t JoinContinuityConversationRequestContext.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v21 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<JoinContinuityConversationRequestContext.CodingKeys>);
  uint64_t v19 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v8 = (int *)type metadata accessor for JoinContinuityConversationRequestContext(0);
  MEMORY[0x270FA5388](v8);
  unint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v17 = a1;
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = v20;
  char v26 = 0;
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  unint64_t v14 = v21;
  uint64_t v13 = v22;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v14, v4);
  char v25 = 1;
  *(unsigned char *)(v11 + v8[5]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  char v24 = 2;
  *(unsigned char *)(v11 + v8[6]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  char v23 = 3;
  char v15 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v13);
  *(unsigned char *)(v11 + v8[7]) = v15 & 1;
  outlined init with copy of JoinFailureContext(v11, v18, type metadata accessor for JoinContinuityConversationRequestContext);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return outlined destroy of JoinFailureContext(v11, type metadata accessor for JoinContinuityConversationRequestContext);
}

uint64_t protocol witness for Decodable.init(from:) in conformance JoinContinuityConversationRequestContext@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return JoinContinuityConversationRequestContext.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance JoinContinuityConversationRequestContext(void *a1)
{
  return JoinContinuityConversationRequestContext.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type IncomingHandoffContext and conformance IncomingHandoffContext()
{
  unint64_t result = lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext;
  if (!lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext;
  if (!lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext;
  if (!lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext;
  if (!lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncomingHandoffContext and conformance IncomingHandoffContext);
  }
  return result;
}

BOOL specialized static IncomingHandoffContext.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a1[1] ^ a2[1] | a1[2] ^ a2[2] | a1[3] ^ a2[3] | a2[4] ^ a1[4]) & 1) == 0;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncomingHandoffContext.CodingKeys and conformance IncomingHandoffContext.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CallType and conformance CallType()
{
  unint64_t result = lazy protocol witness table cache variable for type CallType and conformance CallType;
  if (!lazy protocol witness table cache variable for type CallType and conformance CallType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType and conformance CallType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CallType and conformance CallType;
  if (!lazy protocol witness table cache variable for type CallType and conformance CallType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType and conformance CallType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CallType and conformance CallType;
  if (!lazy protocol witness table cache variable for type CallType and conformance CallType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType and conformance CallType);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t type metadata accessor for JoinFailureContext(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for JoinFailureContext);
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JoinFailureContext.CodingKeys and conformance JoinFailureContext.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for JoinContinuityConversationRequestContext(uint64_t a1)
{
  return type metadata accessor for NCProtoContactInfo(a1, (uint64_t *)&type metadata singleton initialization cache for JoinContinuityConversationRequestContext);
}

uint64_t specialized static JoinContinuityConversationRequestContext.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) != 0
    && (uint64_t v4 = (int *)type metadata accessor for JoinContinuityConversationRequestContext(0),
        *(unsigned __int8 *)(a1 + v4[5]) == *(unsigned __int8 *)(a2 + v4[5]))
    && *(unsigned __int8 *)(a1 + v4[6]) == *(unsigned __int8 *)(a2 + v4[6]))
  {
    char v5 = *(unsigned char *)(a1 + v4[7]) ^ *(unsigned char *)(a2 + v4[7]) ^ 1;
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

unint64_t lazy protocol witness table accessor for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext.CodingKeys and conformance JoinContinuityConversationRequestContext.CodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of JoinFailureContext(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of JoinFailureContext(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t instantiation function for generic protocol witness table for IncomingHandoffContext(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type IncomingHandoffContext and conformance IncomingHandoffContext();
  a1[2] = lazy protocol witness table accessor for type IncomingHandoffContext and conformance IncomingHandoffContext();
  a1[3] = lazy protocol witness table accessor for type IncomingHandoffContext and conformance IncomingHandoffContext();
  unint64_t result = lazy protocol witness table accessor for type IncomingHandoffContext and conformance IncomingHandoffContext();
  a1[4] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for JoinFailureContext(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type JoinFailureContext and conformance JoinFailureContext, (void (*)(uint64_t))type metadata accessor for JoinFailureContext);
  a1[2] = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type JoinFailureContext and conformance JoinFailureContext, (void (*)(uint64_t))type metadata accessor for JoinFailureContext);
  a1[3] = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type JoinFailureContext and conformance JoinFailureContext, (void (*)(uint64_t))type metadata accessor for JoinFailureContext);
  uint64_t result = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type JoinFailureContext and conformance JoinFailureContext, (void (*)(uint64_t))type metadata accessor for JoinFailureContext);
  a1[4] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for JoinContinuityConversationRequestContext(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext and conformance JoinContinuityConversationRequestContext, (void (*)(uint64_t))type metadata accessor for JoinContinuityConversationRequestContext);
  a1[2] = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext and conformance JoinContinuityConversationRequestContext, (void (*)(uint64_t))type metadata accessor for JoinContinuityConversationRequestContext);
  a1[3] = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext and conformance JoinContinuityConversationRequestContext, (void (*)(uint64_t))type metadata accessor for JoinContinuityConversationRequestContext);
  uint64_t result = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext and conformance JoinContinuityConversationRequestContext, (void (*)(uint64_t))type metadata accessor for JoinContinuityConversationRequestContext);
  a1[4] = result;
  return result;
}

uint64_t dispatch thunk of FaceTimeURLContext.queryItem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t __swift_memcpy5_1(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for IncomingHandoffContext(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[5]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IncomingHandoffContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IncomingHandoffContext()
{
  return &type metadata for IncomingHandoffContext;
}

uint64_t *initializeBufferWithCopyOfBuffer for JoinFailureContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    *(void *)uint64_t v9 = *(void *)v10;
    v9[8] = v10[8];
  }
  return a1;
}

uint64_t initializeWithCopy for JoinFailureContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t assignWithCopy for JoinFailureContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  return a1;
}

uint64_t initializeWithTake for JoinFailureContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t assignWithTake for JoinFailureContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for JoinFailureContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257439040);
}

uint64_t sub_257439040(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for JoinFailureContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2574390C0);
}

uint64_t sub_2574390C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for JoinFailureContext()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for JoinContinuityConversationRequestContext(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t destroy for JoinFailureContext(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for JoinContinuityConversationRequestContext(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for JoinContinuityConversationRequestContext(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for JoinContinuityConversationRequestContext(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for JoinContinuityConversationRequestContext(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for JoinContinuityConversationRequestContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257439560);
}

uint64_t sub_257439560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for JoinContinuityConversationRequestContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257439644);
}

uint64_t sub_257439644(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

uint64_t type metadata completion function for JoinContinuityConversationRequestContext()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for JoinContinuityConversationRequestContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for JoinContinuityConversationRequestContext.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257439900);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for JoinContinuityConversationRequestContext.CodingKeys()
{
  return &unk_270658E10;
}

uint64_t getEnumTagSinglePayload for JoinFailureContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for JoinFailureContext.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257439A94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for JoinFailureContext.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for JoinFailureContext.CodingKeys(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

void *type metadata accessor for JoinFailureContext.CodingKeys()
{
  return &unk_270658118;
}

uint64_t getEnumTagSinglePayload for IncomingHandoffContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IncomingHandoffContext.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257439C3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for IncomingHandoffContext.CodingKeys(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

void *type metadata accessor for IncomingHandoffContext.CodingKeys()
{
  return &unk_270658268;
}

uint64_t specialized IncomingHandoffContext.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x456F696475417369 && a2 == 0xEE0064656C62616ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x456F656469567369 && a2 == 0xEE0064656C62616ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657079546C6C6163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000257448D50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000257449490)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t specialized JoinFailureContext.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000002574494B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F72724563616ELL && a2 == 0xEC00000065646F43)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized JoinContinuityConversationRequestContext.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000002574494B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x456F696475417369 && a2 == 0xEE0064656C62616ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x456F656469567369 && a2 == 0xEE0064656C62616ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002574494D0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

BOOL static CallType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t CallType.description.getter()
{
  if (*v0) {
    return 0x6F656469762ELL;
  }
  else {
    return 0x6F696475612ELL;
  }
}

void CallType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CallType.AudioCodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CallType.AudioCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance CallType.AudioCodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CallType.AudioCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CallType.AudioCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CallType.CodingKeys()
{
  if (*v0) {
    return 0x6F65646976;
  }
  else {
    return 0x6F69647561;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CallType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CallType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CallType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CallType.CodingKeys and conformance CallType.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CallType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CallType.CodingKeys and conformance CallType.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CallType.VideoCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CallType.VideoCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t CallType.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CallType.VideoCodingKeys>);
  uint64_t v19 = *(void *)(v3 - 8);
  uint64_t v20 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v18 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CallType.AudioCodingKeys>);
  uint64_t v16 = *(void *)(v5 - 8);
  uint64_t v17 = v5;
  MEMORY[0x270FA5388](v5);
  BOOL v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CallType.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CallType.CodingKeys and conformance CallType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
  if (v12)
  {
    char v22 = 1;
    lazy protocol witness table accessor for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys();
    unint64_t v14 = v18;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v14, v20);
  }
  else
  {
    char v21 = 0;
    lazy protocol witness table accessor for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v17);
  }
  return (*v13)(v11, v8);
}

unint64_t lazy protocol witness table accessor for type CallType.CodingKeys and conformance CallType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.CodingKeys and conformance CallType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys;
  if (!lazy protocol witness table cache variable for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys);
  }
  return result;
}

Swift::Int CallType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t CallType.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CallType.VideoCodingKeys>);
  uint64_t v30 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CallType.AudioCodingKeys>);
  uint64_t v28 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  BOOL v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CallType.CodingKeys>);
  uint64_t v29 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CallType.CodingKeys and conformance CallType.CodingKeys();
  uint64_t v11 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11) {
    goto LABEL_6;
  }
  uint64_t v32 = a1;
  uint64_t v13 = v30;
  char v12 = v31;
  unint64_t v14 = v10;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v20 = type metadata accessor for DecodingError();
    swift_allocError();
    char v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *char v22 = &type metadata for CallType;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v22, *MEMORY[0x263F8DCB0], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v8);
    a1 = v32;
LABEL_6:
    uint64_t v23 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v23);
  }
  v26[1] = v15;
  char v16 = *(unsigned char *)(v15 + 32);
  if (v16)
  {
    char v17 = *(unsigned char *)(v15 + 32);
    char v34 = 1;
    lazy protocol witness table accessor for type CallType.VideoCodingKeys and conformance CallType.VideoCodingKeys();
    uint64_t v18 = v14;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v19 = v29;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v4, v27);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v18, v8);
    char v16 = v17;
  }
  else
  {
    char v33 = 0;
    lazy protocol witness table accessor for type CallType.AudioCodingKeys and conformance CallType.AudioCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v25 = v29;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v8);
  }
  unsigned char *v12 = v16;
  uint64_t v23 = (uint64_t)v32;
  return __swift_destroy_boxed_opaque_existential_1(v23);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CallType@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return CallType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CallType(void *a1)
{
  return CallType.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CallType()
{
  if (*v0) {
    return 0x6F656469762ELL;
  }
  else {
    return 0x6F696475612ELL;
  }
}

ValueMetadata *type metadata accessor for CallType()
{
  return &type metadata for CallType;
}

unsigned char *storeEnumTagSinglePayload for CallType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25743B130);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CallType.CodingKeys()
{
  return &unk_270658ED0;
}

void *type metadata accessor for CallType.AudioCodingKeys()
{
  return &unk_270658F60;
}

void *type metadata accessor for CallType.VideoCodingKeys()
{
  return &unk_270658F80;
}

uint64_t specialized CallType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F69647561 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F65646976 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t FaceTimeURLQueryItemName.rawValue.getter(char a1)
{
  if (!a1) {
    return 0xD000000000000020;
  }
  if (a1 == 1) {
    return 0xD00000000000001ELL;
  }
  return 0x676E696D6F636E69;
}

uint64_t static FaceTimeURL.from(url:allowCallLinks:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLComponents?);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  BOOL v7 = (char *)&v12 - v6;
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  outlined init with copy of URLComponents?((uint64_t)v7, (uint64_t)v5);
  uint64_t v8 = type metadata accessor for URLComponents();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of NCProtoContactInfo?((uint64_t)v5, &demangling cache variable for type metadata for URLComponents?);
LABEL_4:
    swift_bridgeObjectRelease();
    uint64_t v10 = MEMORY[0x263F8EE78];
    goto LABEL_5;
  }
  uint64_t v10 = URLComponents.queryItems.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v5, v8);
  if (!v10) {
    goto LABEL_4;
  }
LABEL_5:
  static FaceTimeURL.from(queryItems:)(v10, a1);
  swift_bridgeObjectRelease();
  return outlined destroy of NCProtoContactInfo?((uint64_t)v7, &demangling cache variable for type metadata for URLComponents?);
}

uint64_t outlined init with copy of URLComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static FaceTimeURL.from(queryItems:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for JoinFailureContext?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for JoinFailureContext(0);
  uint64_t v110 = *(void *)(v111 - 8);
  MEMORY[0x270FA5388](v111);
  uint64_t v108 = (uint64_t)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for JoinContinuityConversationRequestContext?);
  MEMORY[0x270FA5388](v8 - 8);
  v114 = (char *)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for JoinContinuityConversationRequestContext(0);
  uint64_t v112 = *(void *)(v113 - 8);
  MEMORY[0x270FA5388](v113);
  uint64_t v109 = (uint64_t)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for String.Encoding();
  uint64_t v122 = *(void *)(v11 - 8);
  uint64_t v123 = v11;
  MEMORY[0x270FA5388](v11);
  v121 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URLQueryItem();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  v127 = (char *)&v104 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v104 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  char v22 = (char *)&v104 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  v128 = (char *)&v104 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  v117 = (char *)&v104 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  v119 = (char *)&v104 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v104 - v30;
  uint64_t v32 = MEMORY[0x270FA5388](v29);
  v118 = (char *)&v104 - v33;
  MEMORY[0x270FA5388](v32);
  v120 = (char *)&v104 - v34;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v35 = JSONDecoder.init()();
  uint64_t v36 = *(void *)(a1 + 16);
  if (v36)
  {
    v106 = v19;
    v104 = v6;
    uint64_t v116 = v35;
    v107 = v22;
    uint64_t v105 = 0;
    v115 = a2;
    uint64_t v124 = v14;
    uint64_t v125 = a1;
    v131 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v132 = v14 + 16;
    uint64_t v37 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v129 = *(void *)(v14 + 72);
    v130 = (void (**)(char *, uint64_t))(v14 + 8);
    swift_bridgeObjectRetain();
    uint64_t v38 = v37;
    uint64_t v126 = v36;
    uint64_t v39 = v36;
    while (1)
    {
      v131(v31, v38, v13);
      if (URLQueryItem.name.getter() == 0xD000000000000020 && v40 == 0x8000000257447E00) {
        break;
      }
      char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v41) {
        goto LABEL_10;
      }
      uint64_t v42 = *v130;
      (*v130)(v31, v13);
      v38 += v129;
      if (!--v39)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v124 + 32);
    long long v44 = v118;
    v43(v118, v31, v13);
    uint64_t v45 = v120;
    v43(v120, v44, v13);
    URLQueryItem.value.getter();
    if (!v46) {
      goto LABEL_13;
    }
    unint64_t v47 = v121;
    static String.Encoding.utf8.getter();
    uint64_t v48 = String.data(using:allowLossyConversion:)();
    unint64_t v50 = v49;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v122 + 8))(v47, v123);
    if (v50 >> 60 == 15
      || (uint64_t v51 = Data.init(base64Encoded:options:)(), v53 = v52, outlined consume of Data?(v48, v50), v53 >> 60 == 15))
    {
LABEL_13:
      uint64_t v42 = *v130;
      (*v130)(v45, v13);
    }
    else
    {
      lazy protocol witness table accessor for type JoinFailureContext and conformance JoinFailureContext(&lazy protocol witness table cache variable for type JoinContinuityConversationRequestContext and conformance JoinContinuityConversationRequestContext, (void (*)(uint64_t))type metadata accessor for JoinContinuityConversationRequestContext);
      uint64_t v87 = (uint64_t)v114;
      uint64_t v88 = v113;
      uint64_t v89 = v105;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      if (!v89)
      {
        (*v130)(v120, v13);
        outlined consume of Data?(v51, v53);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v112 + 56))(v87, 0, 1, v88);
        swift_release();
        uint64_t v94 = v109;
        outlined init with take of JoinFailureContext(v87, v109, type metadata accessor for JoinContinuityConversationRequestContext);
        uint64_t v95 = v94;
        v96 = v115;
        outlined init with take of JoinFailureContext(v95, (uint64_t)v115, type metadata accessor for JoinContinuityConversationRequestContext);
        uint64_t v97 = type metadata accessor for FaceTimeURL();
        goto LABEL_49;
      }
      outlined consume of Data?(v51, v53);
      MEMORY[0x25A2B6D30](v89);
      uint64_t v42 = *v130;
      (*v130)(v120, v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v112 + 56))(v87, 1, 1, v88);
      outlined destroy of NCProtoContactInfo?(v87, &demangling cache variable for type metadata for JoinContinuityConversationRequestContext?);
      uint64_t v105 = 0;
    }
LABEL_14:
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v55 = 0;
    uint64_t v56 = v37;
    while (1)
    {
      uint64_t v57 = v55 + 1;
      if (__OFADD__(v55, 1))
      {
        __break(1u);
LABEL_51:
        __break(1u);
        return result;
      }
      v131(v128, v56, v13);
      if (URLQueryItem.name.getter() == 0xD00000000000001ELL && v58 == 0x8000000257447E30) {
        break;
      }
      char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v59) {
        goto LABEL_22;
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v42)(v128, v13);
      ++v55;
      v56 += v129;
      if (v57 == v126)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v124 + 32);
    uint64_t v61 = v117;
    v60(v117, v128, v13);
    uint64_t v62 = v119;
    v60(v119, v61, v13);
    URLQueryItem.value.getter();
    if (!v63) {
      goto LABEL_25;
    }
    int v64 = v121;
    static String.Encoding.utf8.getter();
    uint64_t v65 = String.data(using:allowLossyConversion:)();
    unint64_t v67 = v66;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v122 + 8))(v64, v123);
    if (v67 >> 60 == 15
      || (uint64_t v68 = Data.init(base64Encoded:options:)(), v70 = v69, outlined consume of Data?(v65, v67), v70 >> 60 == 15))
    {
LABEL_25:
      v42(v62, v13);
    }
    else
    {
      lazy protocol witness table accessor for type JoinFailureContext and conformance JoinFailureContext(&lazy protocol witness table cache variable for type JoinFailureContext and conformance JoinFailureContext, (void (*)(uint64_t))type metadata accessor for JoinFailureContext);
      uint64_t v90 = (uint64_t)v104;
      uint64_t v91 = v111;
      uint64_t v92 = v105;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      if (!v92)
      {
        v42(v119, v13);
        outlined consume of Data?(v68, v70);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v110 + 56))(v90, 0, 1, v91);
        swift_release();
        uint64_t v98 = v108;
        outlined init with take of JoinFailureContext(v90, v108, type metadata accessor for JoinFailureContext);
        uint64_t v99 = v98;
        v96 = v115;
        outlined init with take of JoinFailureContext(v99, (uint64_t)v115, type metadata accessor for JoinFailureContext);
        uint64_t v97 = type metadata accessor for FaceTimeURL();
        goto LABEL_49;
      }
      outlined consume of Data?(v68, v70);
      MEMORY[0x25A2B6D30](v92);
      v42(v119, v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56))(v90, 1, 1, v91);
      outlined destroy of NCProtoContactInfo?(v90, &demangling cache variable for type metadata for JoinFailureContext?);
      uint64_t v105 = 0;
    }
LABEL_26:
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v71 = 0;
    while (1)
    {
      uint64_t v72 = v71 + 1;
      if (__OFADD__(v71, 1)) {
        goto LABEL_51;
      }
      v131(v127, v37, v13);
      if (URLQueryItem.name.getter() == 0x676E696D6F636E69 && v73 == 0xEF66666F646E6148) {
        break;
      }
      char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v74) {
        goto LABEL_34;
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v42)(v127, v13);
      ++v71;
      v37 += v129;
      if (v72 == v126)
      {
        swift_release();
        swift_bridgeObjectRelease();
LABEL_38:
        a2 = v115;
        goto LABEL_39;
      }
    }
    swift_bridgeObjectRelease();
LABEL_34:
    swift_bridgeObjectRelease();
    uint64_t v75 = *(void (**)(char *, char *, uint64_t))(v124 + 32);
    uint64_t v76 = v106;
    v75(v106, v127, v13);
    uint64_t v77 = v107;
    v75(v107, v76, v13);
    URLQueryItem.value.getter();
    if (!v78) {
      goto LABEL_37;
    }
    __int16 v79 = v121;
    static String.Encoding.utf8.getter();
    uint64_t v80 = String.data(using:allowLossyConversion:)();
    unint64_t v82 = v81;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v122 + 8))(v79, v123);
    if (v82 >> 60 == 15
      || (uint64_t v83 = Data.init(base64Encoded:options:)(), v85 = v84, outlined consume of Data?(v80, v82), v85 >> 60 == 15))
    {
LABEL_37:
      v42(v77, v13);
      swift_release();
      goto LABEL_38;
    }
    lazy protocol witness table accessor for type IncomingHandoffContext and conformance IncomingHandoffContext();
    uint64_t v93 = v105;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    if (v93)
    {
      swift_release();
      outlined consume of Data?(v83, v85);
      MEMORY[0x25A2B6D30](v93);
      v42(v77, v13);
      goto LABEL_38;
    }
    v42(v77, v13);
    swift_release();
    outlined consume of Data?(v83, v85);
    char v100 = v134;
    char v101 = v135;
    char v102 = v136;
    char v103 = v137;
    v96 = v115;
    unsigned char *v115 = v133;
    v96[1] = v100;
    v96[2] = v101;
    v96[3] = v102;
    v96[4] = v103;
    uint64_t v97 = type metadata accessor for FaceTimeURL();
LABEL_49:
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v97 - 8) + 56))(v96, 0, 1, v97);
  }
  else
  {
    swift_release();
LABEL_39:
    uint64_t v86 = type metadata accessor for FaceTimeURL();
    return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(a2, 1, 1, v86);
  }
}

uint64_t type metadata accessor for FaceTimeURL()
{
  uint64_t result = type metadata singleton initialization cache for FaceTimeURL;
  if (!type metadata singleton initialization cache for FaceTimeURL) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type JoinFailureContext and conformance JoinFailureContext(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of JoinFailureContext(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FaceTimeURLQueryItemName(unsigned char *a1, unsigned char *a2)
{
  unint64_t v2 = 0xD00000000000001ELL;
  int v3 = *a1;
  unint64_t v4 = 0x8000000257447E30;
  unint64_t v5 = 0x676E696D6F636E69;
  unint64_t v6 = 0xEF66666F646E6148;
  if (v3 == 1)
  {
    unint64_t v5 = 0xD00000000000001ELL;
    unint64_t v6 = 0x8000000257447E30;
  }
  if (*a1) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = 0xD000000000000020;
  }
  if (v3) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = 0x8000000257447E00;
  }
  if (*a2 != 1)
  {
    unint64_t v2 = 0x676E696D6F636E69;
    unint64_t v4 = 0xEF66666F646E6148;
  }
  if (*a2) {
    unint64_t v9 = v2;
  }
  else {
    unint64_t v9 = 0xD000000000000020;
  }
  if (*a2) {
    unint64_t v10 = v4;
  }
  else {
    unint64_t v10 = 0x8000000257447E00;
  }
  if (v7 == v9 && v8 == v10) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FaceTimeURLQueryItemName()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FaceTimeURLQueryItemName()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FaceTimeURLQueryItemName()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FaceTimeURLQueryItemName@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized FaceTimeURLQueryItemName.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance FaceTimeURLQueryItemName(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD00000000000001ELL;
  unint64_t v3 = 0x8000000257447E30;
  if (*v1 != 1)
  {
    unint64_t v2 = 0x676E696D6F636E69;
    unint64_t v3 = 0xEF66666F646E6148;
  }
  if (*v1)
  {
    unint64_t v4 = v3;
  }
  else
  {
    unint64_t v2 = 0xD000000000000020;
    unint64_t v4 = 0x8000000257447E00;
  }
  *a1 = v2;
  a1[1] = v4;
}

BOOL specialized static FaceTimeURL.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = type metadata accessor for JoinFailureContext(0);
  MEMORY[0x270FA5388](v46);
  uint64_t v47 = (uint64_t)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = (int *)type metadata accessor for JoinContinuityConversationRequestContext(0);
  MEMORY[0x270FA5388](v5);
  unint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FaceTimeURL();
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  char v11 = (unsigned __int8 *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v46 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v46 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (FaceTimeURL, FaceTimeURL));
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (unsigned __int8 *)&v20[*(int *)(v18 + 56)];
  outlined init with copy of FaceTimeURL(a1, (uint64_t)v20);
  outlined init with copy of FaceTimeURL(a2, (uint64_t)v21);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with copy of FaceTimeURL((uint64_t)v20, (uint64_t)v16);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of JoinFailureContext((uint64_t)v21, (uint64_t)v7, type metadata accessor for JoinContinuityConversationRequestContext);
      if ((static UUID.== infix(_:_:)() & 1) == 0
        || v16[v5[5]] != v7[v5[5]]
        || v16[v5[6]] != v7[v5[6]]
        || v16[v5[7]] != v7[v5[7]])
      {
        outlined destroy of FaceTimeURL((uint64_t)v7, type metadata accessor for JoinContinuityConversationRequestContext);
        uint64_t v29 = (uint64_t)v16;
        uint64_t v30 = type metadata accessor for JoinContinuityConversationRequestContext;
        goto LABEL_20;
      }
      outlined destroy of FaceTimeURL((uint64_t)v7, type metadata accessor for JoinContinuityConversationRequestContext);
      uint64_t v44 = (uint64_t)v16;
      uint64_t v45 = type metadata accessor for JoinContinuityConversationRequestContext;
      goto LABEL_27;
    }
    uint64_t v31 = type metadata accessor for JoinContinuityConversationRequestContext;
    uint64_t v32 = (uint64_t)v16;
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with copy of FaceTimeURL((uint64_t)v20, (uint64_t)v14);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = v47;
      outlined init with take of JoinFailureContext((uint64_t)v21, v47, type metadata accessor for JoinFailureContext);
      if ((static UUID.== infix(_:_:)() & 1) == 0)
      {
LABEL_7:
        outlined destroy of FaceTimeURL(v23, type metadata accessor for JoinFailureContext);
        uint64_t v29 = (uint64_t)v14;
        uint64_t v30 = type metadata accessor for JoinFailureContext;
LABEL_20:
        outlined destroy of FaceTimeURL(v29, v30);
        outlined destroy of FaceTimeURL((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for FaceTimeURL);
        return 0;
      }
      uint64_t v24 = *(int *)(v46 + 20);
      uint64_t v25 = &v14[v24];
      char v26 = v14[v24 + 8];
      uint64_t v27 = (void *)(v23 + v24);
      int v28 = *(unsigned __int8 *)(v23 + v24 + 8);
      if (v26)
      {
        if (!v28) {
          goto LABEL_7;
        }
      }
      else
      {
        if (*(void *)v25 != *v27) {
          LOBYTE(v28) = 1;
        }
        if (v28) {
          goto LABEL_7;
        }
      }
      outlined destroy of FaceTimeURL(v23, type metadata accessor for JoinFailureContext);
      uint64_t v44 = (uint64_t)v14;
      uint64_t v45 = type metadata accessor for JoinFailureContext;
LABEL_27:
      outlined destroy of FaceTimeURL(v44, v45);
      outlined destroy of FaceTimeURL((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for FaceTimeURL);
      return 1;
    }
    uint64_t v31 = type metadata accessor for JoinFailureContext;
    uint64_t v32 = (uint64_t)v14;
LABEL_13:
    outlined destroy of FaceTimeURL(v32, v31);
    goto LABEL_14;
  }
  outlined init with copy of FaceTimeURL((uint64_t)v20, (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
LABEL_14:
    outlined destroy of NCProtoContactInfo?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for (FaceTimeURL, FaceTimeURL));
    return 0;
  }
  unsigned __int8 v33 = v11[4];
  unsigned __int8 v34 = v11[3];
  unsigned __int8 v35 = v11[2];
  unsigned __int8 v36 = v11[1];
  unsigned __int8 v37 = *v21;
  unsigned __int8 v38 = v21[1];
  unsigned __int8 v39 = v21[2];
  unsigned __int8 v40 = v21[3];
  unsigned __int8 v41 = v21[4];
  v49[0] = *v11;
  v49[1] = v36;
  v49[2] = v35;
  v49[3] = v34;
  v49[4] = v33;
  v48[0] = v37;
  v48[1] = v38;
  v48[2] = v39;
  v48[3] = v40;
  v48[4] = v41;
  BOOL v42 = specialized static IncomingHandoffContext.== infix(_:_:)(v49, v48);
  outlined destroy of FaceTimeURL((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for FaceTimeURL);
  return v42;
}

unint64_t specialized FaceTimeURLQueryItemName.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FaceTimeURLQueryItemName.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type FaceTimeURLQueryItemName and conformance FaceTimeURLQueryItemName()
{
  unint64_t result = lazy protocol witness table cache variable for type FaceTimeURLQueryItemName and conformance FaceTimeURLQueryItemName;
  if (!lazy protocol witness table cache variable for type FaceTimeURLQueryItemName and conformance FaceTimeURLQueryItemName)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FaceTimeURLQueryItemName and conformance FaceTimeURLQueryItemName);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FaceTimeURL(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      uint64_t v12 = *(int *)(type metadata accessor for JoinFailureContext(0) + 20);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      *(void *)uint64_t v13 = *(void *)v14;
      v13[8] = v14[8];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = (int *)type metadata accessor for JoinContinuityConversationRequestContext(0);
      *((unsigned char *)a1 + v9[5]) = *((unsigned char *)a2 + v9[5]);
      *((unsigned char *)a1 + v9[6]) = *((unsigned char *)a2 + v9[6]);
      *((unsigned char *)a1 + v9[7]) = *((unsigned char *)a2 + v9[7]);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for FaceTimeURL(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result <= 1)
  {
    uint64_t v3 = type metadata accessor for UUID();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

char *initializeWithCopy for FaceTimeURL(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    uint64_t v10 = *(int *)(type metadata accessor for JoinFailureContext(0) + 20);
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    *(void *)uint64_t v11 = *(void *)v12;
    v11[8] = v12[8];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for JoinContinuityConversationRequestContext(0);
    a1[v8[5]] = a2[v8[5]];
    a1[v8[6]] = a2[v8[6]];
    a1[v8[7]] = a2[v8[7]];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithCopy for FaceTimeURL(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of FaceTimeURL((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for FaceTimeURL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      uint64_t v10 = *(int *)(type metadata accessor for JoinFailureContext(0) + 20);
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      char v13 = v12[8];
      *(void *)uint64_t v11 = *(void *)v12;
      v11[8] = v13;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = (int *)type metadata accessor for JoinContinuityConversationRequestContext(0);
      a1[v8[5]] = a2[v8[5]];
      a1[v8[6]] = a2[v8[6]];
      a1[v8[7]] = a2[v8[7]];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

char *initializeWithTake for FaceTimeURL(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    uint64_t v10 = *(int *)(type metadata accessor for JoinFailureContext(0) + 20);
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    *(void *)uint64_t v11 = *(void *)v12;
    v11[8] = v12[8];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for JoinContinuityConversationRequestContext(0);
    a1[v8[5]] = a2[v8[5]];
    a1[v8[6]] = a2[v8[6]];
    a1[v8[7]] = a2[v8[7]];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for FaceTimeURL(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of FaceTimeURL((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for FaceTimeURL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      uint64_t v10 = *(int *)(type metadata accessor for JoinFailureContext(0) + 20);
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      *(void *)uint64_t v11 = *(void *)v12;
      v11[8] = v12[8];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = (int *)type metadata accessor for JoinContinuityConversationRequestContext(0);
      a1[v8[5]] = a2[v8[5]];
      a1[v8[6]] = a2[v8[6]];
      a1[v8[7]] = a2[v8[7]];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for FaceTimeURL()
{
  uint64_t result = type metadata accessor for JoinContinuityConversationRequestContext(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for JoinFailureContext(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FaceTimeURLQueryItemName(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FaceTimeURLQueryItemName(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25743DA34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FaceTimeURLQueryItemName()
{
  return &type metadata for FaceTimeURLQueryItemName;
}

uint64_t outlined init with copy of FaceTimeURL(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FaceTimeURL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of FaceTimeURL(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x270EEDDD0]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x270EEDE10]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x270EEDE18]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x270EEDEE8]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x270EEDF30]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x270EEDF38]();
}

uint64_t URLQueryItem.init(name:value:)()
{
  return MEMORY[0x270EEE3E0]();
}

uint64_t URLQueryItem.name.getter()
{
  return MEMORY[0x270EEE3F0]();
}

uint64_t URLQueryItem.value.getter()
{
  return MEMORY[0x270EEE408]();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return MEMORY[0x270EEE410]();
}

uint64_t URLComponents.queryItems.getter()
{
  return MEMORY[0x270EEE4B0]();
}

uint64_t URLComponents.init(url:resolvingAgainstBaseURL:)()
{
  return MEMORY[0x270EEE518]();
}

uint64_t type metadata accessor for URLComponents()
{
  return MEMORY[0x270EEE610]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x270EEE638]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x270EEE658]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x270EEE670]();
}

uint64_t Data.init(base64Encoded:options:)()
{
  return MEMORY[0x270EF0050]();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = MEMORY[0x270EF0130](options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x270EF0CB0]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t type metadata accessor for Google_Protobuf_Value()
{
  return MEMORY[0x270F449B0]();
}

uint64_t type metadata accessor for ProtobufBool()
{
  return MEMORY[0x270F449D0]();
}

uint64_t type metadata accessor for ProtobufString()
{
  return MEMORY[0x270F44A00]();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return MEMORY[0x270F44A18]();
}

uint64_t UnknownStorage.init()()
{
  return MEMORY[0x270F44A20]();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return MEMORY[0x270F44A28]();
}

uint64_t dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)()
{
  return MEMORY[0x270F44B00]();
}

{
  return MEMORY[0x270F44B08]();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return MEMORY[0x270F44B10]();
}

uint64_t dispatch thunk of Decoder.handleConflictingOneOf()()
{
  return MEMORY[0x270F44B20]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)()
{
  return MEMORY[0x270F44B30]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBoolField(value:)()
{
  return MEMORY[0x270F44B38]();
}

{
  return MEMORY[0x270F44B40]();
}

uint64_t dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)()
{
  return MEMORY[0x270F44B48]();
}

{
  return MEMORY[0x270F44B50]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedBytesField(value:)()
{
  return MEMORY[0x270F44B58]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBytesField(value:)()
{
  return MEMORY[0x270F44B78]();
}

{
  return MEMORY[0x270F44B80]();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt32Field(value:)()
{
  return MEMORY[0x270F44BA0]();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt64Field(value:)()
{
  return MEMORY[0x270F44BA8]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedStringField(value:)()
{
  return MEMORY[0x270F44BC0]();
}

uint64_t dispatch thunk of Decoder.decodeSingularDoubleField(value:)()
{
  return MEMORY[0x270F44BE0]();
}

uint64_t dispatch thunk of Decoder.decodeSingularStringField(value:)()
{
  return MEMORY[0x270F44BF0]();
}

{
  return MEMORY[0x270F44BF8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt64Field(value:)()
{
  return MEMORY[0x270F44C10]();
}

{
  return MEMORY[0x270F44C18]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)()
{
  return MEMORY[0x270F44C20]();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return MEMORY[0x270F44C38]();
}

uint64_t dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)()
{
  return MEMORY[0x270F44D00]();
}

{
  return MEMORY[0x270F44D08]();
}

uint64_t dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)()
{
  return MEMORY[0x270F44D20]();
}

uint64_t dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)()
{
  return MEMORY[0x270F44D60]();
}

uint64_t dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)()
{
  return MEMORY[0x270F44D68]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)()
{
  return MEMORY[0x270F44D70]();
}

uint64_t dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)()
{
  return MEMORY[0x270F44D88]();
}

uint64_t dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)()
{
  return MEMORY[0x270F44D98]();
}

uint64_t dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x270F44DA0]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)()
{
  return MEMORY[0x270F44DB0]();
}

uint64_t dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)()
{
  return MEMORY[0x270F44DC8]();
}

uint64_t dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)()
{
  return MEMORY[0x270F44DD8]();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x270F44DE8]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x270F44DF0]();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x270F44E00]();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return MEMORY[0x270F44E10]();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return MEMORY[0x270F44E18]();
}

uint64_t _NameMap.init()()
{
  return MEMORY[0x270F44E20]();
}

uint64_t type metadata accessor for _NameMap()
{
  return MEMORY[0x270F44E28]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x270F9D320]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x270F9D598]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x270EF19F8]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x270EF1AA8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x270EF1AD0]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x270F9D708]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x270F9E3C0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x270F9EA78]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x270F9EA98]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9F0B0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x270F9F230](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x270F9F250]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x270F9F258]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x270F9F290]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x270F9F2F0]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F318]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x270F9F360]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x270F9F390]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x270F9F3D0]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x270F9F430]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F458]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x270F9FC48]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD98]();
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}