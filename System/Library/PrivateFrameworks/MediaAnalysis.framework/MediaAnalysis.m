id start(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  void *v6;
  VCPMediaAnalysisDaemon *v7;
  id v8;

  xpc_transactions_enable();
  signal(15, (void (__cdecl *)(int))1);
  v4 = dispatch_get_global_queue(21, 0);
  v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0, v4);
  dispatch_source_set_event_handler(v5, &stru_100219678);
  dispatch_activate(v5);
  _set_user_dir_suffix();
  v7 = objc_alloc_init(VCPMediaAnalysisDaemon);
  v8 = (id)[(VCPMediaAnalysisDaemon *)v7 run:a1 argv:a2];

  return v8;
}

void sub_1000022B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000245C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3) {
    id v4 = [a3 code];
  }
  else {
    id v4 = 0;
  }
  v5 = *(uint64_t (**)(uint64_t, id))(v3 + 16);
  return v5(v3, v4);
}

void sub_100002698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000026B0(uint64_t a1)
{
  v1 = (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      v5[0] = 67109120;
      v5[1] = [v1 count];
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[Scene] Evaluating %d recently captured assets", (uint8_t *)v5, 8u);
    }
  }
  return v1;
}

uint64_t sub_1000027A4(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 8) + 16))(a2 * 0.5);
}

uint64_t sub_1000027C8(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

void sub_1000029C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000029D8(uint64_t a1)
{
  v1 = (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      v5[0] = 67109120;
      v5[1] = [v1 count];
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[Full] Evaluating %d recently captured assets", (uint8_t *)v5, 8u);
    }
  }
  return v1;
}

uint64_t sub_100002ACC(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 8) + 16))(a2 * 0.5 + 0.5);
}

uint64_t sub_100002AF4(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

PHFetchResult *__cdecl sub_100002E38(id a1, PHFetchOptions *a2)
{
  v2 = a2;
  os_log_type_t v3 = +[NSSortDescriptor sortDescriptorWithKey:@"creationDate" ascending:0];
  v8 = v3;
  id v4 = +[NSArray arrayWithObjects:&v8 count:1];
  [(PHFetchOptions *)v2 setSortDescriptors:v4];

  v5 = +[NSDate dateWithTimeIntervalSinceNow:-86400.0];
  v6 = +[PHAsset fetchAssetsFromCameraSinceDate:v5 options:v2];

  return (PHFetchResult *)v6;
}

void sub_10000301C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000034EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000039D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, uint64_t a11)
{
  _Unwind_Resume(a1);
}

BOOL sub_100003AB8(id a1)
{
  return 0;
}

void sub_100003D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100004370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const void **sub_100004484(const void **a1)
{
  v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_1000044B8(void *a1)
{
}

void sub_1000049B4(_Unwind_Exception *a1)
{
  v8 = v7;

  _Unwind_Resume(a1);
}

SCMLHandler *__cdecl sub_100004A38(id a1)
{
  id v1 = objc_alloc((Class)SCMLHandler);
  uint64_t v15 = SCMLUseAnyAvailableDevice;
  v16 = &__kCFBooleanTrue;
  v2 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
  id v10 = 0;
  id v3 = [v1 initWithOptions:v2 error:&v10];
  id v4 = v10;

  if (v4 && (int)MediaAnalysisLogLevel() >= 3)
  {
    v5 = VCPLogInstance();
    os_log_type_t v6 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (id)objc_opt_class();
      v8 = [v4 description];
      *(_DWORD *)buf = 138412546;
      id v12 = v7;
      __int16 v13 = 2112;
      v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "[VCPMADSceneAssetProcessingTask] Failed to create %@: %@", buf, 0x16u);
    }
  }

  return (SCMLHandler *)v3;
}

void sub_100004BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100004C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  id v10 = v9;

  a9.super_class = (Class)VCPMADSceneFetchProcessingTask;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100004EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

VIService *__cdecl sub_100005054(id a1)
{
  id v1 = objc_alloc_init((Class)VIService);
  return (VIService *)v1;
}

void sub_1000051A4()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  id v1 = (void *)qword_1002523B0;
  qword_1002523B0 = (uint64_t)v0;
}

void sub_100005664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t sub_1000056A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000056B8(uint64_t a1)
{
}

void sub_1000056C0(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  [*(id *)(*(void *)(a1[6] + 8) + 40) stop];
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    v5 = VCPLogInstance();
    os_log_type_t v6 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = a1[4];
      if (v4) {
        CFStringRef v8 = @"Interrupted";
      }
      else {
        CFStringRef v8 = @"Finished";
      }
      [*(id *)(*(void *)(a1[6] + 8) + 40) elapsedTimeSeconds];
      int v15 = 138413058;
      uint64_t v16 = v7;
      __int16 v17 = 2112;
      CFStringRef v18 = v8;
      __int16 v19 = 2048;
      uint64_t v20 = v9;
      __int16 v21 = 2048;
      id v22 = [v4 code];
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%@ %@ after %0.6fs (%ld)", (uint8_t *)&v15, 0x2Au);
    }
  }
  uint64_t v10 = *(void *)(a1[7] + 8);
  v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = 0;

  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    id v12 = VCPLogInstance();
    os_log_type_t v13 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = a1[4];
      int v15 = 138412290;
      uint64_t v16 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%@ Finished background processing", (uint8_t *)&v15, 0xCu);
    }
  }
  (*(void (**)(void, id))(a1[5] + 16))(a1[5], [v4 code]);
}

void sub_1000058A8(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

uint64_t sub_1000058F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000059A0()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  id v1 = (void *)qword_1002523C0;
  qword_1002523C0 = (uint64_t)v0;
}

void sub_100005B8C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "%@ task chain broke, rescheduling", (uint8_t *)&v2, 0xCu);
}

void sub_100006114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, const void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  sub_100004484(&a14);
  sub_100004484(&a15);
  objc_destroyWeak(v30);
  objc_destroyWeak(v29);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000061BC(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    int v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)os_log_type_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[MADServicePublic] XPC connection interrupted", v6, 2u);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained cancelAllRequests];
  }
}

void sub_100006264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100006274(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    int v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)CFStringRef v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[MADServicePublic] XPC connection invalidated", v8, 2u);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained cancelAllRequests];
    os_log_type_t v6 = (void *)v5[1];
    v5[1] = 0;

    uint64_t v7 = +[VCPClientManager sharedManager];
    [v7 removeClientHandler:v5];
  }
}

void sub_100006350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const void **sub_10000636C(const void **a1, const void **a2)
{
  id v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

void sub_100006408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000663C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100006AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26)
{
  sub_100004484((const void **)(v30 - 128));
  _Unwind_Resume(a1);
}

BOOL sub_100006BB4(id a1)
{
  return 0;
}

void sub_100006BBC(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = VCPSignPostLog();
  v5 = v4;
  os_signpost_id_t v6 = a1[7];
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    uint64_t v7 = a1[4];
    int v9 = 138412290;
    uint64_t v10 = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_END, v6, "VCPMADServicePublicClientHandler_IOSurface", "%@", (uint8_t *)&v9, 0xCu);
  }

  if (a1[8])
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  uint64_t v8 = a1[6];
  if (v3) {
    (*(void (**)(uint64_t, void, id))(v8 + 16))(v8, 0, v3);
  }
  else {
    (*(void (**)(uint64_t, void, void))(v8 + 16))(v8, a1[5], 0);
  }
}

void sub_100006CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100006D00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100007180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

BOOL sub_100007274(id a1)
{
  return 0;
}

void sub_10000727C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = VCPSignPostLog();
  v5 = v4;
  os_signpost_id_t v6 = a1[7];
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    uint64_t v7 = a1[4];
    int v9 = 138412290;
    uint64_t v10 = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_END, v6, "VCPMADServicePublicClientHandler_URL", "%@", (uint8_t *)&v9, 0xCu);
  }

  if (a1[8])
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  uint64_t v8 = a1[6];
  if (v3) {
    (*(void (**)(uint64_t, void, id))(v8 + 16))(v8, 0, v3);
  }
  else {
    (*(void (**)(uint64_t, void, void))(v8 + 16))(v8, a1[5], 0);
  }
  sandbox_extension_release();
}

void sub_1000073AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000073C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  sandbox_extension_release();
}

void sub_10000742C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100007878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_100007948(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

BOOL sub_100007964(id a1)
{
  return 0;
}

void sub_10000796C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = VCPSignPostLog();
  uint64_t v8 = v7;
  os_signpost_id_t v9 = a1[6];
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    uint64_t v10 = a1[4];
    int v11 = 138412290;
    uint64_t v12 = v10;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "VCPMADServicePublicClientHandler_VideoE2E", "%@", (uint8_t *)&v11, 0xCu);
  }

  if (a1[7])
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  (*(void (**)(void))(a1[5] + 16))();
  sandbox_extension_release();
}

void sub_100007AB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100007AD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  sandbox_extension_release();
}

void sub_100007B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100007BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100007FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000821C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100008ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100008F10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100008F8C(id a1)
{
  return 0;
}

void sub_100008F94(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = VCPSignPostLog();
  id v5 = v4;
  os_signpost_id_t v6 = a1[6];
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    uint64_t v7 = a1[4];
    int v8 = 138412290;
    uint64_t v9 = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_END, v6, "VCPMADServicePublicClientHandler_TextPrewarmingE2E", "%@", (uint8_t *)&v8, 0xCu);
  }

  if (a1[7])
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_1000090A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000090BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000093D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

BOOL sub_100009470(id a1)
{
  return 0;
}

void sub_100009478(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = VCPSignPostLog();
  int v8 = v7;
  os_signpost_id_t v9 = a1[6];
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    uint64_t v10 = a1[4];
    int v11 = 138412290;
    uint64_t v12 = v10;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "VCPMADServicePublicClientHandler_TextProcessingE2E", "%@", (uint8_t *)&v11, 0xCu);
  }

  if (a1[7])
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_1000095A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000095C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100009894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100009910(id a1)
{
  return 0;
}

void sub_100009918(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = VCPSignPostLog();
  id v5 = v4;
  os_signpost_id_t v6 = a1[6];
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    uint64_t v7 = a1[4];
    int v8 = 138412290;
    uint64_t v9 = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_END, v6, "VCPMADServicePublicClientHandler_MultiModalPrewarmingE2E", "%@", (uint8_t *)&v8, 0xCu);
  }

  if (a1[7])
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_100009A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100009A40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100009D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100009DA0(id a1)
{
  return 0;
}

void sub_100009DA8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = VCPSignPostLog();
  int v8 = v7;
  os_signpost_id_t v9 = a1[6];
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    uint64_t v10 = a1[4];
    int v11 = 138412290;
    uint64_t v12 = v10;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "VCPMADServicePublicClientHandler_MultiModalProcessingE2E", "%@", (uint8_t *)&v11, 0xCu);
  }

  if (a1[7])
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_100009ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100009EF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10000AD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, _Unwind_Exception *exception_objecta, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Block_object_dispose((const void *)(v31 - 240), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000AFF8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000B008(uint64_t a1)
{
}

uint64_t sub_10000B010(uint64_t a1, double a2)
{
  if (([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) started] & 1) == 0) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) start];
  }
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    id v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      int v7 = 134217984;
      double v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Scene Processing progress: %.2f%%", (uint8_t *)&v7, 0xCu);
    }
  }
  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16))((float)((float)(*(float *)(a1 + 56) * (float)*(unint64_t *)(a1 + 48)) * 100.0)+ a2 * *(float *)(a1 + 56));
}

void sub_10000B13C(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) stop];
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    int v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) elapsedTimeSeconds];
      int v5 = 134217984;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Scene Processing completed in %0.6fs", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_10000B220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000B238(uint64_t a1, double a2)
{
  if (([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) started] & 1) == 0) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) start];
  }
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      int v7 = 134217984;
      double v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Face Processing progress: %.2f%%", (uint8_t *)&v7, 0xCu);
    }
  }
  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16))((float)((float)(*(float *)(a1 + 56) * (float)*(unint64_t *)(a1 + 48)) * 100.0)+ a2 * *(float *)(a1 + 56));
}

void sub_10000B364(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) stop];
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    int v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) elapsedTimeSeconds];
      int v5 = 134217984;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Face Processing completed in %0.6fs", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_10000B448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000B460(uint64_t a1, double a2)
{
  if (([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) started] & 1) == 0) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) start];
  }
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      int v7 = 134217984;
      double v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "OCR Processing progress: %.2f%%", (uint8_t *)&v7, 0xCu);
    }
  }
  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16))((float)((float)(*(float *)(a1 + 56) * (float)*(unint64_t *)(a1 + 48)) * 100.0)+ a2 * *(float *)(a1 + 56));
}

void sub_10000B58C(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) stop];
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    int v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) elapsedTimeSeconds];
      int v5 = 134217984;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "OCR Processing completed in %0.6fs", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_10000B670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000B688(uint64_t a1, double a2)
{
  if (([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) started] & 1) == 0) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) start];
  }
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      int v7 = 134217984;
      double v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "VisualSearch Processing progress: %.2f%%", (uint8_t *)&v7, 0xCu);
    }
  }
  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16))((float)((float)(*(float *)(a1 + 56) * (float)*(unint64_t *)(a1 + 48)) * 100.0)+ a2 * *(float *)(a1 + 56));
}

void sub_10000B7B4(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) stop];
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    int v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) elapsedTimeSeconds];
      int v5 = 134217984;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "VisualSearch Processing completed in %0.6fs", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_10000B898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000B8B0(uint64_t a1, double a2)
{
  if (([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) started] & 1) == 0) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) start];
  }
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      int v7 = 134217984;
      double v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Full Analysis progress: %.2f%%", (uint8_t *)&v7, 0xCu);
    }
  }
  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16))((float)((float)(*(float *)(a1 + 56) * (float)*(unint64_t *)(a1 + 48)) * 100.0)+ a2 * *(float *)(a1 + 56));
}

void sub_10000B9DC(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) stop];
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    int v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) elapsedTimeSeconds];
      int v5 = 134217984;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Full Analysis completed in %0.6fs", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_10000BAC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000BAD8(uint64_t a1, double a2)
{
  if (([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) started] & 1) == 0) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) start];
  }
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      int v7 = 134217984;
      double v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unified Analysis progress: %.2f%%", (uint8_t *)&v7, 0xCu);
    }
  }
  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16))((float)((float)(*(float *)(a1 + 56) * (float)*(unint64_t *)(a1 + 48)) * 100.0)+ a2 * *(float *)(a1 + 56));
}

void sub_10000BC04(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) stop];
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    int v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) elapsedTimeSeconds];
      int v5 = 134217984;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unified Analysis completed in %0.6fs", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_10000BCE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000BD00(uint64_t a1, double a2)
{
  if (([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) started] & 1) == 0) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) start];
  }
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      int v7 = 134217984;
      double v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "PEC Processing progress: %.2f%%", (uint8_t *)&v7, 0xCu);
    }
  }
  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16))((float)((float)(*(float *)(a1 + 56) * (float)*(unint64_t *)(a1 + 48)) * 100.0)+ a2 * *(float *)(a1 + 56));
}

void sub_10000BE2C(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) stop];
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    int v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) elapsedTimeSeconds];
      int v5 = 134217984;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "PEC Processing completed in %0.6fs", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_10000BF10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id VCPTransactionWithName(uint64_t a1)
{
  id v1 = +[NSString stringWithFormat:@"com.apple.mediaanalysisd.%@", a1];
  [v1 UTF8String];
  int v2 = (void *)os_transaction_create();

  return v2;
}

void sub_10000BF98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id VCPIsRemoteIOSTask()
{
  return (id)+[MADBackgroundSystemTask runRemote];
}

id MADTaskIdentifierForBackgroundTask(uint64_t a1)
{
  switch(a1)
  {
    case 1:
      int v2 = MADPhotosFullBackgroundSystemTask;
      goto LABEL_14;
    case 2:
      int v2 = MADPhotosSceneBackgroundSystemTask;
      goto LABEL_14;
    case 3:
      int v2 = MADPhotosFaceBackgroundSystemTask;
      goto LABEL_14;
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
      goto LABEL_5;
    case 10:
      int v2 = MADPhotosOCRBackgroundSystemTask;
      goto LABEL_14;
    case 12:
      int v2 = MADPhotosVisualSearchBackgroundSystemTask;
      goto LABEL_14;
    default:
      if (a1 == 16)
      {
        int v2 = MADPhotosPECBackgroundSystemTask;
LABEL_14:
        int v5 = [(__objc2_class *)v2 identifier];
      }
      else
      {
LABEL_5:
        if ((int)MediaAnalysisLogLevel() >= 4)
        {
          os_log_type_t v3 = VCPLogInstance();
          os_log_type_t v4 = VCPLogToOSLogType[4];
          if (os_log_type_enabled(v3, v4))
          {
            int v7 = 134217984;
            uint64_t v8 = a1;
            _os_log_impl((void *)&_mh_execute_header, v3, v4, "MADTaskIdentifierForBackgroundTask: Unsupported analysis type %lu", (uint8_t *)&v7, 0xCu);
          }
        }
        int v5 = 0;
      }
      return v5;
  }
}

BOOL MADIsPECUnsupportedDomainError(void *a1)
{
  id v1 = a1;
  int v2 = [v1 domain];
  if ([v2 isEqualToString:@"VisualIntelligence.FlowError"]) {
    BOOL v3 = [v1 code] == (id)3;
  }
  else {
    BOOL v3 = 0;
  }

  return v3;
}

void sub_10000C1AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id MADAnyEncryptedSearchDomains(void *a1)
{
  id v1 = a1;
  int v2 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", kVIDomainLandmark, kVIDomainStorefront, kVIDomainNature, kVIDomainAnimals, kVIDomainCats, kVIDomainDogs, kVIDomainBirds, kVIDomainInsects, kVIDomainReptiles, kVIDomainMammals, 0);
  id v3 = [v1 intersectsSet:v2];

  return v3;
}

void sub_10000C2B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id StripMovieCurationResultsForEligibleAsset(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v41 = a3;
  v39 = v5;
  id v40 = v6;
  uint64_t v7 = (uint64_t)objc_msgSend(v40, "vcp_types");
  uint64_t v8 = v40;
  if ([v5 isVideo])
  {
    os_signpost_id_t v9 = [v5 mediaAnalysisProperties];
    id v10 = [v9 mediaAnalysisVersion];

    uint64_t v8 = v40;
    if ((unint64_t)v10 < 0x46)
    {
      int v11 = objc_msgSend(v40, "vcp_results");
      uint64_t v12 = [v11 objectForKeyedSubscript:@"MovieSummaryResults"];

      os_log_type_t v13 = v12;
      id v14 = [v12 count];
      id v15 = v40;
      if (v14)
      {
        memset(&v48, 0, sizeof(v48));
        v38 = v12;
        uint64_t v16 = [v12 objectAtIndexedSubscript:0];
        CFDictionaryRef v17 = [v16 objectForKeyedSubscript:@"start"];
        CMTimeMakeFromDictionary(&v48, v17);

        id v15 = v40;
        if ((v7 & 0x40000) != 0)
        {
          CMTime time1 = v48;
          CMTime time2 = kCMTimeZero;
          int32_t v18 = CMTimeCompare(&time1, &time2);
          id v15 = v40;
          if (v18 >= 1)
          {
            if ((int)MediaAnalysisLogLevel() >= 5)
            {
              __int16 v19 = VCPLogInstance();
              os_log_type_t v20 = VCPLogToOSLogType[5];
              if (os_log_type_enabled(v19, v20))
              {
                __int16 v21 = [v5 mediaAnalysisProperties];
                unsigned int v22 = [v21 mediaAnalysisVersion];
                v23 = MediaAnalysisTypeShortDescription(v7);
                *(_DWORD *)buf = 138412802;
                id v50 = v41;
                __int16 v51 = 1024;
                *(_DWORD *)v52 = v22;
                *(_WORD *)&v52[4] = 2112;
                *(void *)&v52[6] = v23;
                _os_log_impl((void *)&_mh_execute_header, v19, v20, "%@ Movie asset has non-zero keyframe time in existing outdated analysis (existing version %d, existing types %@), request movie curation reprocessing", buf, 0x1Cu);
              }
            }
            id v37 = [v40 mutableCopy];
            v24 = +[NSNumber numberWithUnsignedLongLong:v7 & 0xFFFFFFFFFFFBFFFFLL];
            [v37 setObject:v24 forKeyedSubscript:@"performedAnalysisTypes"];

            v25 = objc_msgSend(v37, "vcp_results");
            id v26 = [v25 mutableCopy];

            long long v44 = 0u;
            long long v45 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            v27 = MediaAnalysisResultsKeysForAnalysisTypes(0x40000);
            id v28 = [v27 countByEnumeratingWithState:&v42 objects:v53 count:16];
            if (v28)
            {
              uint64_t v29 = *(void *)v43;
              os_log_type_t v30 = VCPLogToOSLogType[7];
              do
              {
                for (i = 0; i != v28; i = (char *)i + 1)
                {
                  if (*(void *)v43 != v29) {
                    objc_enumerationMutation(v27);
                  }
                  uint64_t v32 = *(void *)(*((void *)&v42 + 1) + 8 * i);
                  if ((int)MediaAnalysisLogLevel() >= 7)
                  {
                    v33 = VCPLogInstance();
                    if (os_log_type_enabled(v33, v30))
                    {
                      v34 = [v26 objectForKeyedSubscript:v32];
                      *(_DWORD *)buf = 138412802;
                      id v50 = v41;
                      __int16 v51 = 2112;
                      *(void *)v52 = v32;
                      *(_WORD *)&v52[8] = 2112;
                      *(void *)&v52[10] = v34;
                      _os_log_impl((void *)&_mh_execute_header, v33, v30, "%@ Clearing result %@: %@", buf, 0x20u);
                    }
                  }
                  [v26 setObject:0 forKeyedSubscript:v32];
                }
                id v28 = [v27 countByEnumeratingWithState:&v42 objects:v53 count:16];
              }
              while (v28);
            }

            [v37 setObject:v26 forKeyedSubscript:@"metadataRanges"];
            id v15 = v37;
          }
        }
        os_log_type_t v13 = v38;
      }
      v35 = v15;

      uint64_t v8 = v35;
    }
  }

  return v8;
}

void sub_10000C738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, _Unwind_Exception *exception_object, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

id MergeKeyFrameResourceResultsIntoExistingAnalysis(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  id v6 = v4;
  if (v3)
  {
    id v6 = [v4 mutableCopy];
    uint64_t v7 = objc_msgSend(v5, "vcp_results");
    id v8 = [v7 mutableCopy];

    [v8 setObject:v3 forKeyedSubscript:@"KeyFrameResourceResults"];
    [v6 setObject:v8 forKeyedSubscript:@"metadataRanges"];
  }
  return v6;
}

void sub_10000C8F4(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void MediaAnalysisDaemonReleaseSharedDataStores(void *a1)
{
  id v1 = a1;
  +[MADVectorDatabaseManager releaseSharedDatabaseWithPhotoLibrary:](MADVectorDatabaseManager, "releaseSharedDatabaseWithPhotoLibrary:");
  +[MADVUWGalleryManager releaseSharedGalleryForPhotoLibrary:v1];
  +[VCPDatabaseManager releaseSharedDatabaseForPhotoLibrary:v1];
}

void sub_10000C9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10000CA0C(id a1)
{
  id v1 = objc_alloc_init((Class)NSOperationQueue);
  int v2 = (void *)qword_1002523D8;
  qword_1002523D8 = (uint64_t)v1;

  id v3 = (void *)qword_1002523D8;
  [v3 setMaxConcurrentOperationCount:1];
}

void sub_10000CAFC()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  id v1 = (void *)qword_1002523E0;
  qword_1002523E0 = (uint64_t)v0;
}

void sub_10000D114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000D358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000D5A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000D8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

VIService *__cdecl sub_10000D9E0(id a1)
{
  id v1 = objc_alloc_init((Class)VIService);
  return (VIService *)v1;
}

id sub_10000DBC8()
{
  id result = [(id)objc_opt_class() enabledByDefault];
  byte_1002523F0 = (char)result;
  return result;
}

void sub_10000E81C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10000E858(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    int v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v6 = 138412290;
      uint64_t v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%@ Updating scheduling history session log ...", (uint8_t *)&v6, 0xCu);
    }
  }
  id v5 = [(id)objc_opt_class() taskID];
  VCPCoreAnalyticsSessionLogDatabaseUpdate((uint64_t)v5, *(void **)(a1 + 48), 0, -1.0);
}

uint64_t sub_10000E93C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000E94C(uint64_t a1)
{
}

void sub_10000E954(uint64_t a1, double a2)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2048;
      double v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ %.2f%% complete", (uint8_t *)&v7, 0x16u);
    }
  }
}

uint64_t sub_10000EA34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10000EA44(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) timeIntervalSinceNow];
  double v5 = v4;
  double v6 = -v4;
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    int v7 = VCPLogInstance();
    os_log_type_t v8 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v7, v8))
    {
      CFStringRef v9 = @"Interrupted";
      uint64_t v10 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138413058;
      if (!a2) {
        CFStringRef v9 = @"Finished";
      }
      uint64_t v24 = v10;
      __int16 v25 = 2112;
      CFStringRef v26 = v9;
      __int16 v27 = 2048;
      double v28 = v6;
      __int16 v29 = 1024;
      int v30 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%@ %@ after %0.6fs (%d)", buf, 0x26u);
    }
  }
  if ((VCPIsRemoteIOSTask() & 1) == 0)
  {
    [*(id *)(a1 + 48) destroy];
    id v11 = [(id)objc_opt_class() taskID];
    VCPCoreAnalyticsSessionLogDatabaseUpdate((uint64_t)v11, *(void **)(a1 + 32), a2, v6);
    id v12 = [(id)objc_opt_class() taskID];
    VCPCoreAnalyticsReportEventDasScheduling((uint64_t)v12, a2, v6);
    VCPCoreAnalyticsSendAllAnalysisSession();
  }
  uint64_t v13 = *(void *)(*(void *)(a1 + 80) + 8);
  id v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = 0;

  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    id v15 = VCPLogInstance();
    os_log_type_t v16 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v24 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%@ Finished background processing", buf, 0xCu);
    }
  }
  if (v5 < -300.0)
  {
    if ([(id)objc_opt_class() taskID] == (id)2
      || [(id)objc_opt_class() taskID] == (id)3
      || [(id)objc_opt_class() taskID] == (id)10
      || [(id)objc_opt_class() taskID] == (id)12)
    {
      int32_t v18 = &off_100230290;
    }
    else
    {
      if ([(id)objc_opt_class() taskID] != (id)1) {
        return (*(uint64_t (**)(void))(*(void *)(a1 + 72) + 16))();
      }
      int32_t v18 = &off_1002302A8;
    }
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10000ED44;
    v21[3] = &unk_1002198A8;
    id v22 = *(id *)(a1 + 64);
    __int16 v19 = objc_retainBlock(v21);
    [(id)objc_opt_class() reportProgressForTasks:v18 cancelOrExtendTimeoutBlock:v19];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 72) + 16))();
}

uint64_t sub_10000ED44(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && ((*(uint64_t (**)(void))(v1 + 16))() & 1) != 0) {
    return 1;
  }
  os_log_type_t v3 = +[VCPWatchdog sharedWatchdog];
  [v3 pet];

  return 0;
}

uint64_t sub_10000EDA0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = [a3 code];
  double v5 = *(uint64_t (**)(uint64_t, id))(v3 + 16);
  return v5(v3, v4);
}

uint64_t sub_10000EDE8(uint64_t a1)
{
  int v2 = +[VCPMADQoSManager sharedManager];
  [v2 disable];

  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
  return v3();
}

uint64_t sub_10000F390(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 40);
  return result;
}

uint64_t sub_10000F460(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 44);
  return result;
}

void sub_10000F4FC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 != -23808)
  {
    if (*(_DWORD *)(*(void *)(a1 + 32) + 40)) {
      return;
    }
    int v6 = MediaAnalysisLogLevel();
    if (v2 == -128)
    {
      if (v6 >= 5)
      {
        int v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v7, v8))
        {
          uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 24);
          int v17 = 138412290;
          uint64_t v18 = v9;
          uint64_t v10 = "%@ Processing canceled; stopping";
          id v11 = v7;
          os_log_type_t v12 = v8;
          uint32_t v13 = 12;
LABEL_15:
          _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, (uint8_t *)&v17, v13);
          goto LABEL_16;
        }
        goto LABEL_16;
      }
    }
    else if (v6 >= 3)
    {
      int v7 = VCPLogInstance();
      os_log_type_t v14 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v7, v14))
      {
        uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 24);
        int v16 = *(_DWORD *)(a1 + 40);
        int v17 = 138412546;
        uint64_t v18 = v15;
        __int16 v19 = 1024;
        int v20 = v16;
        uint64_t v10 = "%@ Processing failed (%d); stopping";
        id v11 = v7;
        os_log_type_t v12 = v14;
        uint32_t v13 = 18;
        goto LABEL_15;
      }
LABEL_16:
    }
    *(_DWORD *)(*(void *)(a1 + 32) + 40) = *(_DWORD *)(a1 + 40);
    return;
  }
  if ((int)MediaAnalysisLogLevel() >= 4)
  {
    uint64_t v3 = VCPLogInstance();
    os_log_type_t v4 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 24);
      int v17 = 138412290;
      uint64_t v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%@ Processing failed due to download throttling; stopping downloads",
        (uint8_t *)&v17,
        0xCu);
    }
  }
  *(_DWORD *)(*(void *)(a1 + 32) + 44) = -23808;
}

void sub_1000108F0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100010938(uint64_t a1)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 104);
  id v3 = [*(id *)(a1 + 40) localIdentifier];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v2 containsObject:v3];
}

void sub_1000109A8(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 104);
  id v2 = [*(id *)(a1 + 40) localIdentifier];
  [v1 addObject:v2];
}

id sub_100011BA8(uint64_t a1, uint64_t a2)
{
  os_log_type_t v4 = +[NSMutableArray arrayWithArray:&off_1002302C0];
  if (objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "vcp_requiresDownloadForTask:", objc_msgSend(*(id *)(a1 + 32), "taskID")))objc_msgSend(v4, "addObjectsFromArray:", &off_1002302D8); {
  uint64_t v5 = *(void **)(a1 + 32);
  }
  int v6 = (void *)v5[2];
  id v11 = 0;
  id v7 = [v5 processingStatusTaskID];
  os_log_type_t v8 = [*(id *)(a1 + 32) mediaTypePredicatesString];
  [v6 fetchLocalIdentifiersEligibleForRetry:&v11 taskID:v7 excludingStatuses:v4 fetchLimit:a2 additionalPredicates:v8];
  id v9 = v11;

  return v9;
}

id sub_100011DF4(uint64_t a1, uint64_t a2)
{
  os_log_type_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)v4[2];
  id v10 = 0;
  id v6 = [v4 processingStatusTaskID];
  id v7 = [*(id *)(a1 + 32) mediaTypePredicatesString];
  [v5 fetchEligibleToRetryLocalIdentifiers:&v10 processingStatus:4 taskID:v6 fetchLimit:a2 additionalPredicates:v7];
  id v8 = v10;

  return v8;
}

id sub_100012058(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 64) addObject:*(void *)(a1 + 40)];
}

id sub_10001221C(uint64_t a1, uint64_t a2)
{
  os_log_type_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)v4[2];
  id v10 = 0;
  id v6 = [v4 processingStatusTaskID];
  id v7 = [*(id *)(a1 + 32) mediaTypePredicatesString];
  [v5 fetchLocalIdentifiers:&v10 processingStatus:2 taskID:v6 attempts:1 fetchLimit:a2 additionalPredicates:v7];
  id v8 = v10;

  return v8;
}

id sub_100012454(uint64_t a1, uint64_t a2)
{
  os_log_type_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)v4[2];
  id v10 = 0;
  id v6 = [v4 processingStatusTaskID];
  id v7 = [*(id *)(a1 + 32) mediaTypePredicatesString];
  [v5 fetchLocalIdentifiersEligibleForRetry:&v10 taskID:v6 includingStatuses:&off_1002302F0 fetchLimit:a2 additionalPredicates:v7];
  id v8 = v10;

  return v8;
}

void sub_10001283C(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 104);
  id v2 = [*(id *)(a1 + 40) assetLocalIdentifiers];
  [v1 minusSet:v2];
}

void sub_10001289C(uint64_t a1)
{
  unint64_t v2 = 0;
  if ([*(id *)(*(void *)(a1 + 32) + 64) count])
  {
    do
    {
      id v3 = [*(id *)(*(void *)(a1 + 32) + 64) objectAtIndexedSubscript:v2];
      os_log_type_t v4 = [v3 taskUUID];
      uint64_t v5 = [*(id *)(a1 + 40) uuid];
      unsigned __int8 v6 = [v4 isEqual:v5];

      if (v6) {
        break;
      }
      ++v2;
    }
    while (v2 < (unint64_t)[*(id *)(*(void *)(a1 + 32) + 64) count]);
  }
  if (v2 >= (unint64_t)[*(id *)(*(void *)(a1 + 32) + 64) count])
  {
    if ((int)MediaAnalysisLogLevel() >= 4)
    {
      id v11 = VCPLogInstance();
      os_log_type_t v12 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 24);
        os_log_type_t v14 = [*(id *)(a1 + 40) uuid];
        int v15 = 138412546;
        uint64_t v16 = v13;
        __int16 v17 = 2112;
        uint64_t v18 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "%@ unknown task retired (%@)", (uint8_t *)&v15, 0x16u);
      }
    }
  }
  else
  {
    if (v2 && (int)MediaAnalysisLogLevel() >= 4)
    {
      id v7 = VCPLogInstance();
      os_log_type_t v8 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 24);
        id v10 = [*(id *)(a1 + 40) uuid];
        int v15 = 138412546;
        uint64_t v16 = v9;
        __int16 v17 = 2112;
        uint64_t v18 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "%@ task retired in unexpected order (%@)", (uint8_t *)&v15, 0x16u);
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 64) removeObjectAtIndex:v2];
  }
}

void sub_100012DEC(id a1)
{
  uint64_t v1 = objc_alloc_init(VCPClientManager);
  unint64_t v2 = (void *)qword_100252408;
  qword_100252408 = (uint64_t)v1;
}

id sub_100012ED0(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) containsObject:*(void *)(a1 + 40)];
  if ((result & 1) == 0)
  {
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      id v3 = VCPLogInstance();
      os_log_type_t v4 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = *(void *)(a1 + 40);
        int v6 = 138412290;
        uint64_t v7 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "Adding client handler %@", (uint8_t *)&v6, 0xCu);
      }
    }
    return [*(id *)(*(void *)(a1 + 32) + 16) addObject:*(void *)(a1 + 40)];
  }
  return result;
}

void sub_10001305C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) containsObject:*(void *)(a1 + 40)])
  {
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      unint64_t v2 = VCPLogInstance();
      os_log_type_t v3 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v2, v3))
      {
        uint64_t v4 = *(void *)(a1 + 40);
        int v8 = 138412290;
        uint64_t v9 = v4;
        _os_log_impl((void *)&_mh_execute_header, v2, v3, "Removing client handler %@", (uint8_t *)&v8, 0xCu);
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 16) removeObject:*(void *)(a1 + 40)];
    if (![*(id *)(*(void *)(a1 + 32) + 16) count])
    {
      if ((int)MediaAnalysisLogLevel() >= 6)
      {
        uint64_t v5 = VCPLogInstance();
        os_log_type_t v6 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v5, v6))
        {
          LOWORD(v8) = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, v6, "No active clients; purging cached resources",
            (uint8_t *)&v8,
            2u);
        }
      }
      uint64_t v7 = +[VCPMADResourceManager sharedManager];
      [v7 purgeAllResources];
    }
  }
}

void sub_100013298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000137D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100013B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_100013BF0(id *a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      id v6 = a1[4];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Entering BGST task launch handler.", (uint8_t *)&buf, 0xCu);
    }
  }
  atomic_store(0, (unsigned __int8 *)a1[5] + 8);
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472;
  v51[2] = sub_100014434;
  v51[3] = &unk_100219D70;
  int8x16_t v42 = *((int8x16_t *)a1 + 2);
  id v7 = (id)v42.i64[0];
  int8x16_t v52 = vextq_s8(v42, v42, 8uLL);
  [v3 setExpirationHandler:v51];
  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3221225472;
  v50[2] = sub_10001450C;
  v50[3] = &unk_100219D98;
  v50[4] = a1[5];
  int v8 = objc_retainBlock(v50);
  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472;
  v44[2] = sub_100014520;
  v44[3] = &unk_100219DC0;
  id v45 = a1[6];
  uint64_t v9 = v8;
  id v49 = v9;
  id v46 = a1[4];
  id v10 = v3;
  id v11 = a1[5];
  id v47 = v10;
  id v48 = v11;
  os_log_type_t v12 = objc_retainBlock(v44);
  if (+[VCPDeviceInformation isHomePod])
  {
    if ((int)MediaAnalysisLogLevel() >= 5)
    {
      uint64_t v13 = VCPLogInstance();
      os_log_type_t v14 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v13, v14))
      {
        id v15 = a1[4];
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "%@[HomePod] Set xpc transaction exit clean", (uint8_t *)&buf, 0xCu);
      }
    }
    xpc_transaction_exit_clean();
  }
  if (os_variant_is_darwinos())
  {
    if ((int)MediaAnalysisLogLevel() >= 5)
    {
      uint64_t v16 = VCPLogInstance();
      os_log_type_t v17 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v16, v17))
      {
        id v18 = a1[4];
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v18;
        __int16 v19 = "%@ Platform not supported; quitting background processing";
LABEL_24:
        _os_log_impl((void *)&_mh_execute_header, v16, v17, v19, (uint8_t *)&buf, 0xCu);
        goto LABEL_25;
      }
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  if (MKBDeviceUnlockedSinceBoot() != 1)
  {
    if ((int)MediaAnalysisLogLevel() >= 5)
    {
      uint64_t v16 = VCPLogInstance();
      os_log_type_t v17 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v16, v17))
      {
        id v24 = a1[4];
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v24;
        __int16 v19 = "%@ Attempt to run prior to first unlock; quitting";
        goto LABEL_24;
      }
LABEL_25:
    }
LABEL_26:
    ((void (*)(void *, uint64_t))v12[2])(v12, 4294967278);
    goto LABEL_27;
  }
  uint32_t multiuser_mode = 0;
  mach_port_t v20 = mach_host_self();
  if (host_check_multiuser_mode(v20, &multiuser_mode))
  {
    if ((int)MediaAnalysisLogLevel() >= 4)
    {
      __int16 v21 = VCPLogInstance();
      os_log_type_t v22 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v21, v22))
      {
        id v23 = a1[4];
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "%@ Failed to query multi-user mode", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  else if (multiuser_mode)
  {
    if ((int)MediaAnalysisLogLevel() >= 5)
    {
      __int16 v25 = VCPLogInstance();
      os_log_type_t v26 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v25, v26))
      {
        id v27 = a1[4];
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v27;
        double v28 = "%@ Device configured for multi-user mode; quitting";
LABEL_40:
        _os_log_impl((void *)&_mh_execute_header, v25, v26, v28, (uint8_t *)&buf, 0xCu);
      }
LABEL_41:
    }
LABEL_42:
    ((void (*)(void *, uint64_t))v12[2])(v12, 4294967278);
    goto LABEL_27;
  }
  if ([(id)objc_opt_class() buddyCheckRequired])
  {
    uint64_t v53 = 0;
    v54 = &v53;
    uint64_t v55 = 0x2020000000;
    __int16 v29 = (unsigned int (*)(void))off_100252418;
    v56 = off_100252418;
    if (!off_100252418)
    {
      *(void *)&long long buf = _NSConcreteStackBlock;
      *((void *)&buf + 1) = 3221225472;
      v58 = sub_1000149C4;
      v59 = &unk_100219E10;
      v60 = &v53;
      sub_1000149C4((uint64_t)&buf);
      __int16 v29 = (unsigned int (*)(void))v54[3];
    }
    _Block_object_dispose(&v53, 8);
    if (!v29)
    {
      dlerror();
      abort_report_np();
      __break(1u);
    }
    if (v29())
    {
      if ((int)MediaAnalysisLogLevel() >= 5)
      {
        __int16 v25 = VCPLogInstance();
        os_log_type_t v26 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v25, v26))
        {
          id v30 = a1[4];
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v30;
          double v28 = "%@ Attempt to run before Setup Assisant (Buddy) completes; quitting";
          goto LABEL_40;
        }
        goto LABEL_41;
      }
      goto LABEL_42;
    }
  }
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v31 = VCPLogInstance();
    os_log_type_t v32 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v31, v32))
    {
      id v33 = a1[4];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v33;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "%@ Running background processing", (uint8_t *)&buf, 0xCu);
    }
  }
  v34 = +[MADStateHandler sharedStateHandler];
  [v34 addBreadcrumb:@"Running BGST %@", a1[6]];

  [a1[5] executeWithSystemTask:v10 cancelBlock:v9 completionHandler:v12];
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    v36 = VCPLogInstance();
    os_log_type_t v37 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v36, v37))
    {
      id v38 = a1[4];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v38;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "%@ Submitted background processing", (uint8_t *)&buf, 0xCu);
    }
  }
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    v39 = VCPLogInstance();
    os_log_type_t v40 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v39, v40))
    {
      id v41 = a1[4];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v41;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "%@ Exiting BGST task launch handler", (uint8_t *)&buf, 0xCu);
    }
  }
LABEL_27:
}

void sub_100014388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_100014434(uint64_t a1)
{
  atomic_store(1u, (unsigned __int8 *)(*(void *)(a1 + 32) + 8));
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    unint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%@ Cancelling by expirationHandler", (uint8_t *)&v5, 0xCu);
    }
  }
}

uint64_t sub_10001450C(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 8));
  return v1 & 1;
}

void sub_100014520(uint64_t a1, int a2)
{
  uint64_t v4 = +[MADStateHandler sharedStateHandler];
  [v4 addBreadcrumb:@"Finished BGST %@", *(void *)(a1 + 32)];

  if ((*(unsigned int (**)(void))(*(void *)(a1 + 64) + 16))())
  {
    if ((int)MediaAnalysisLogLevel() >= 5)
    {
      int v5 = VCPLogInstance();
      os_log_type_t v6 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v36 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "%@ Task is cancelled by DAS", buf, 0xCu);
      }
    }
    int v8 = *(void **)(a1 + 48);
    id v34 = 0;
    unsigned int v9 = [v8 setTaskExpiredWithRetryAfter:&v34 error:0.0];
    id v10 = v34;
    if (v9)
    {
      if ((int)MediaAnalysisLogLevel() >= 5)
      {
        id v11 = VCPLogInstance();
        os_log_type_t v12 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v11, v12))
        {
          uint64_t v13 = *(void *)(a1 + 40);
          *(_DWORD *)long long buf = 138412290;
          uint64_t v36 = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "%@ Set task retry after 0 seconds", buf, 0xCu);
        }
      }
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        id v27 = VCPLogInstance();
        os_log_type_t v28 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = *(void *)(a1 + 40);
          *(_DWORD *)long long buf = 138412546;
          uint64_t v36 = v29;
          __int16 v37 = 2112;
          id v38 = v10;
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "%@ Failed to expire task - %@", buf, 0x16u);
        }
      }
      [*(id *)(a1 + 48) setTaskCompleted];
    }
  }
  else
  {
    int v14 = MediaAnalysisLogLevel();
    if (a2 == -128)
    {
      if (v14 >= 5)
      {
        id v15 = VCPLogInstance();
        os_log_type_t v16 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v17 = *(void *)(a1 + 40);
          *(_DWORD *)long long buf = 138412290;
          uint64_t v36 = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "%@ Task is cancelled", buf, 0xCu);
        }
      }
      id v18 = *(void **)(a1 + 48);
      id v33 = 0;
      unsigned int v19 = [v18 setTaskExpiredWithRetryAfter:&v33 error:300.0];
      id v20 = v33;
      if (v19)
      {
        if ((int)MediaAnalysisLogLevel() >= 5)
        {
          __int16 v21 = VCPLogInstance();
          os_log_type_t v22 = VCPLogToOSLogType[5];
          if (os_log_type_enabled(v21, v22))
          {
            uint64_t v23 = *(void *)(a1 + 40);
            *(_DWORD *)long long buf = 138412546;
            uint64_t v36 = v23;
            __int16 v37 = 1024;
            LODWORD(v38) = 300;
            _os_log_impl((void *)&_mh_execute_header, v21, v22, "%@ Request retry after %d seconds", buf, 0x12u);
          }
        }
      }
      else
      {
        if ((int)MediaAnalysisLogLevel() >= 3)
        {
          id v30 = VCPLogInstance();
          os_log_type_t v31 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v30, v31))
          {
            uint64_t v32 = *(void *)(a1 + 40);
            *(_DWORD *)long long buf = 138412546;
            uint64_t v36 = v32;
            __int16 v37 = 2112;
            id v38 = v20;
            _os_log_impl((void *)&_mh_execute_header, v30, v31, "%@ Failed to expire task - %@", buf, 0x16u);
          }
        }
        [*(id *)(a1 + 48) setTaskCompleted];
      }
    }
    else
    {
      if (v14 >= 5)
      {
        id v24 = VCPLogInstance();
        os_log_type_t v25 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = *(void *)(a1 + 40);
          *(_DWORD *)long long buf = 138412546;
          uint64_t v36 = v26;
          __int16 v37 = 1024;
          LODWORD(v38) = a2;
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "%@ Task is completed (%d)", buf, 0x12u);
        }
      }
      [*(id *)(a1 + 48) setTaskCompleted];
      [(id)objc_opt_class() updateTask];
    }
  }
}

void sub_100014984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1000149C4(uint64_t a1)
{
  v5[0] = 0;
  if (!qword_100252420)
  {
    v5[1] = _NSConcreteStackBlock;
    _DWORD v5[2] = 3221225472;
    v5[3] = sub_100014B04;
    v5[4] = &unk_100219838;
    v5[5] = v5;
    long long v6 = off_100219E30;
    uint64_t v7 = 0;
    qword_100252420 = _sl_dlopen();
    os_log_type_t v3 = (void *)v5[0];
    unint64_t v2 = (void *)qword_100252420;
    if (qword_100252420)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      os_log_type_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  unint64_t v2 = (void *)qword_100252420;
LABEL_5:
  id result = dlsym(v2, "BYSetupAssistantNeedsToRun");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_100252418 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100014B04()
{
  uint64_t result = _sl_dlopen();
  qword_100252420 = result;
  return result;
}

void sub_100014BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100014C50(id a1)
{
  unsigned __int8 v1 = objc_alloc_init(VCPCPUMonitor);
  unint64_t v2 = (void *)qword_100252428;
  qword_100252428 = (uint64_t)v1;
}

void sub_100014D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPCPUMonitor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100015044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_1000154C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001563C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000156E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001596C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000159F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  id v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VCPMADTaskScheduler;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100015A7C(id a1)
{
  unsigned __int8 v1 = objc_alloc_init(VCPMADTaskScheduler);
  unint64_t v2 = (void *)qword_100252438;
  qword_100252438 = (uint64_t)v1;
}

void sub_100016288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1000166B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100016CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100016DEC(uint64_t a1)
{
  unint64_t v2 = [*(id *)(a1 + 32) task];
  id v3 = [v2 run];

  uint64_t v4 = [*(id *)(a1 + 32) completionHandler];

  if (v4)
  {
    int v5 = [*(id *)(a1 + 32) completionHandler];
    ((void (**)(void, id, id))v5)[2](v5, [*(id *)(a1 + 32) taskID], v3);
  }
  long long v6 = [*(id *)(a1 + 32) taskGroup];
  dispatch_group_leave(v6);

  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 40) + 8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100016F20;
  v10[3] = &unk_100219D70;
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v11 = v8;
  uint64_t v12 = v9;
  dispatch_sync(v7, v10);
}

void sub_100016F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100016F20(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    unint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = [*(id *)(a1 + 32) task];
      int v5 = (objc_class *)objc_opt_class();
      NSStringFromClass(v5);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v7 = [*(id *)(a1 + 32) taskID];
      unsigned int v8 = [*(id *)(a1 + 32) qos];
      int v16 = 138412802;
      id v17 = v6;
      __int16 v18 = 2048;
      id v19 = v7;
      __int16 v20 = 1024;
      unsigned int v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[Scheduler] Completed %@ (%lu) [QoS: %d]", (uint8_t *)&v16, 0x1Cu);
    }
  }
  [*(id *)(*(void *)(a1 + 40) + 24) removeObject:*(void *)(a1 + 32)];
  if (([*(id *)(a1 + 32) background] & 1) == 0)
  {
    uint64_t v9 = [*(id *)(a1 + 32) task];
    [v9 resourceRequirement];
    *(float *)(*(void *)(a1 + 40) + 48) = v10 + *(float *)(*(void *)(a1 + 40) + 48);
  }
  if (![*(id *)(*(void *)(a1 + 40) + 24) count])
  {
    id v11 = +[VCPCPUMonitor sharedCPUMonitor];
    [v11 cancelRequest:*(unsigned int *)(*(void *)(a1 + 40) + 52)];

    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void **)(v12 + 56);
    *(void *)(v12 + 56) = 0;

    int v14 = +[VCPMADQoSManager sharedManager];
    [v14 disable];
  }
  return [*(id *)(a1 + 40) _schedule];
}

void sub_1000170F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001727C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100017570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100017764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000178FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100017A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100017A70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 40);
  *(void *)(v2 + 40) = v3 + 1;
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v3;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      id v6 = (objc_class *)objc_opt_class();
      id v7 = NSStringFromClass(v6);
      uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
      int v9 = *(_DWORD *)(a1 + 64);
      [*(id *)(a1 + 40) resourceRequirement];
      int v16 = 138413058;
      id v17 = v7;
      __int16 v18 = 2048;
      uint64_t v19 = v8;
      __int16 v20 = 1024;
      int v21 = v9;
      __int16 v22 = 2048;
      double v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Scheduler] Add %@ (%lu) [QoS: %d Cost: %0.3f]", (uint8_t *)&v16, 0x26u);
    }
  }
  id v11 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v12 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 64)];
  uint64_t v13 = [v11 objectForKeyedSubscript:v12];
  int v14 = +[VCPMADTaskEntry entryWithTaskID:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) qos:*(unsigned int *)(a1 + 64) background:0 task:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
  [v13 addObject:v14];

  [*(id *)(a1 + 32) _checkBackgroundTasksForTask:*(void *)(a1 + 40)];
  return [*(id *)(a1 + 32) _schedule];
}

void sub_100017C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100017D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100017D98(uint64_t a1)
{
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id obj = *(id *)(*(void *)(a1 + 32) + 24);
  id v1 = [obj countByEnumeratingWithState:&v47 objects:v57 count:16];
  if (v1)
  {
    uint64_t v2 = *(void *)v48;
LABEL_3:
    uint64_t v3 = 0;
    while (1)
    {
      if (*(void *)v48 != v2) {
        objc_enumerationMutation(obj);
      }
      uint64_t v4 = *(void **)(*((void *)&v47 + 1) + 8 * v3);
      if ([v4 background]) {
        break;
      }
      os_log_type_t v5 = [v4 task];
      if ((objc_opt_respondsToSelector() & 1) == 0)
      {

LABEL_31:
        id v11 = VCPLogInstance();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
        {
          id v24 = (objc_class *)objc_opt_class();
          NSStringFromClass(v24);
          id v25 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v26 = [v4 task];
          id v27 = (objc_class *)objc_opt_class();
          os_log_type_t v28 = NSStringFromClass(v27);
          *(_DWORD *)long long buf = 138412546;
          id v54 = v25;
          __int16 v55 = 2112;
          v56 = v28;
          _os_log_fault_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "[Scheduler] DAS activity (%@) scheduled concurrently with foreground work (%@); quitting",
            buf,
            0x16u);
        }
LABEL_37:

        goto LABEL_38;
      }
      id v6 = [v4 task];
      unsigned int v7 = [v6 interruptBackgroundTasks];

      if (v7) {
        goto LABEL_31;
      }
      if (v1 == (id)++v3)
      {
        id v1 = [obj countByEnumeratingWithState:&v47 objects:v57 count:16];
        if (v1) {
          goto LABEL_3;
        }
        goto LABEL_11;
      }
    }
    id v11 = VCPLogInstance();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      __int16 v22 = (objc_class *)objc_opt_class();
      double v23 = NSStringFromClass(v22);
      sub_1000193E8(v23, buf, v11);
    }
    goto LABEL_37;
  }
LABEL_11:

  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id obj = [*(id *)(*(void *)(a1 + 32) + 32) allKeys];
  id v8 = [obj countByEnumeratingWithState:&v43 objects:v52 count:16];
  if (v8)
  {
    uint64_t v36 = *(void *)v44;
    do
    {
      id v35 = v8;
      for (i = 0; i != v35; i = (char *)i + 1)
      {
        if (*(void *)v44 != v36) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void *)(*((void *)&v43 + 1) + 8 * i);
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        id v11 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "objectForKeyedSubscript:", v10, v35);
        id v12 = [v11 countByEnumeratingWithState:&v39 objects:v51 count:16];
        if (v12)
        {
          uint64_t v13 = *(void *)v40;
          while (2)
          {
            for (j = 0; j != v12; j = (char *)j + 1)
            {
              if (*(void *)v40 != v13) {
                objc_enumerationMutation(v11);
              }
              id v15 = *(void **)(*((void *)&v39 + 1) + 8 * (void)j);
              int v16 = [v15 task];
              if ((objc_opt_respondsToSelector() & 1) == 0)
              {

LABEL_34:
                uint64_t v29 = VCPLogInstance();
                if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
                {
                  id v30 = (objc_class *)objc_opt_class();
                  NSStringFromClass(v30);
                  id v31 = (id)objc_claimAutoreleasedReturnValue();
                  uint64_t v32 = [v15 task];
                  id v33 = (objc_class *)objc_opt_class();
                  id v34 = NSStringFromClass(v33);
                  *(_DWORD *)long long buf = 138412546;
                  id v54 = v31;
                  __int16 v55 = 2112;
                  v56 = v34;
                  _os_log_fault_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "[Scheduler] DAS activity (%@) scheduled concurrently with foreground work (%@); quitting",
                    buf,
                    0x16u);
                }
                goto LABEL_37;
              }
              id v17 = [v15 task];
              unsigned int v18 = [v17 interruptBackgroundTasks];

              if (v18) {
                goto LABEL_34;
              }
            }
            id v12 = [v11 countByEnumeratingWithState:&v39 objects:v51 count:16];
            if (v12) {
              continue;
            }
            break;
          }
        }
      }
      id v8 = [obj countByEnumeratingWithState:&v43 objects:v52 count:16];
    }
    while (v8);
  }

  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v20 = *(void *)(v19 + 40);
  *(void *)(v19 + 40) = v20 + 1;
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v20;
  int v21 = *(void **)(a1 + 32);
  id obj = +[VCPMADTaskEntry entryWithTaskID:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) qos:*(unsigned int *)(a1 + 56) background:1 task:*(void *)(a1 + 40) completionHandler:0];
  [v21 _runTask:obj];
LABEL_38:
}

void sub_10001827C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_10001859C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1000185E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000185F4(uint64_t a1)
{
}

void sub_1000185FC(void *a1)
{
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v2 = *(id *)(a1[4] + 24);
  id v3 = [v2 countByEnumeratingWithState:&v36 objects:v44 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v37;
    while (2)
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v37 != v4) {
          objc_enumerationMutation(v2);
        }
        id v6 = *(void **)(*((void *)&v36 + 1) + 8 * i);
        if ([v6 taskID] == (id)a1[7])
        {
          if ((int)MediaAnalysisLogLevel() >= 5)
          {
            unsigned int v18 = VCPLogInstance();
            os_log_type_t v19 = VCPLogToOSLogType[5];
            if (os_log_type_enabled(v18, v19))
            {
              uint64_t v20 = a1[7];
              *(_DWORD *)long long buf = 134217984;
              uint64_t v43 = v20;
              _os_log_impl((void *)&_mh_execute_header, v18, v19, "[Scheduler] Cancelling running task (VCPMADTaskID %lu)", buf, 0xCu);
            }
          }
          int v21 = [v6 task];
          [v21 cancel];

          objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), v6);
          goto LABEL_37;
        }
      }
      id v3 = [v2 countByEnumeratingWithState:&v36 objects:v44 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }

  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v2 = [(id)objc_opt_class() qosArray];
  id v7 = [v2 countByEnumeratingWithState:&v32 objects:v41 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v33;
    do
    {
      for (j = 0; j != v7; j = (char *)j + 1)
      {
        if (*(void *)v33 != v8) {
          objc_enumerationMutation(v2);
        }
        uint64_t v10 = *(void *)(*((void *)&v32 + 1) + 8 * (void)j);
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        uint64_t v27 = v10;
        id v11 = objc_msgSend(*(id *)(a1[4] + 32), "objectForKeyedSubscript:");
        id v12 = [v11 countByEnumeratingWithState:&v28 objects:v40 count:16];
        if (v12)
        {
          uint64_t v13 = *(void *)v29;
          while (2)
          {
            for (k = 0; k != v12; k = (char *)k + 1)
            {
              if (*(void *)v29 != v13) {
                objc_enumerationMutation(v11);
              }
              id v15 = *(void **)(*((void *)&v28 + 1) + 8 * (void)k);
              if ([v15 taskID] == (id)a1[7])
              {
                if ((int)MediaAnalysisLogLevel() >= 5)
                {
                  __int16 v22 = VCPLogInstance();
                  os_log_type_t v23 = VCPLogToOSLogType[5];
                  if (os_log_type_enabled(v22, v23))
                  {
                    uint64_t v24 = a1[7];
                    *(_DWORD *)long long buf = 134217984;
                    uint64_t v43 = v24;
                    _os_log_impl((void *)&_mh_execute_header, v22, v23, "[Scheduler] Cancelling pending task (VCPMADTaskID %lu)", buf, 0xCu);
                  }
                }
                id v25 = [v15 task];
                [v25 cancel];

                objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v15);
                uint64_t v26 = [*(id *)(a1[4] + 32) objectForKeyedSubscript:v27];
                [v26 removeObject:v15];

                goto LABEL_37;
              }
            }
            id v12 = [v11 countByEnumeratingWithState:&v28 objects:v40 count:16];
            if (v12) {
              continue;
            }
            break;
          }
        }
      }
      id v7 = [v2 countByEnumeratingWithState:&v32 objects:v41 count:16];
    }
    while (v7);
  }

  if ((int)MediaAnalysisLogLevel() >= 4)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v16 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v2, v16))
    {
      uint64_t v17 = a1[7];
      *(_DWORD *)long long buf = 134217984;
      uint64_t v43 = v17;
      _os_log_impl((void *)&_mh_execute_header, v2, v16, "[Scheduler] Failed to find task %lu to cancel", buf, 0xCu);
    }
LABEL_37:
  }
}

void sub_100018A20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100018D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_100018D5C(uint64_t a1)
{
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 24);
  id v3 = [v2 countByEnumeratingWithState:&v28 objects:v34 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v29;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v29 != v4) {
          objc_enumerationMutation(v2);
        }
        id v6 = [*(id *)(*((void *)&v28 + 1) + 8 * i) task];
        [v6 cancel];
      }
      id v3 = [v2 countByEnumeratingWithState:&v28 objects:v34 count:16];
    }
    while (v3);
  }

  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v7 = [(id)objc_opt_class() qosArray];
  id v8 = [v7 countByEnumeratingWithState:&v24 objects:v33 count:16];
  if (v8)
  {
    uint64_t v18 = *(void *)v25;
    do
    {
      id v19 = v8;
      for (j = 0; j != v19; j = (char *)j + 1)
      {
        if (*(void *)v25 != v18) {
          objc_enumerationMutation(v7);
        }
        uint64_t v10 = *(void *)(*((void *)&v24 + 1) + 8 * (void)j);
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        id v11 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "objectForKeyedSubscript:", v10, v18);
        id v12 = [v11 countByEnumeratingWithState:&v20 objects:v32 count:16];
        if (v12)
        {
          uint64_t v13 = *(void *)v21;
          do
          {
            for (k = 0; k != v12; k = (char *)k + 1)
            {
              if (*(void *)v21 != v13) {
                objc_enumerationMutation(v11);
              }
              id v15 = *(void **)(*((void *)&v20 + 1) + 8 * (void)k);
              os_log_type_t v16 = [v15 task];
              [v16 cancel];

              [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v15];
            }
            id v12 = [v11 countByEnumeratingWithState:&v20 objects:v32 count:16];
          }
          while (v12);
        }

        uint64_t v17 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v10];
        [v17 removeAllObjects];
      }
      id v8 = [v7 countByEnumeratingWithState:&v24 objects:v33 count:16];
    }
    while (v8);
  }
}

void sub_100018FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000190FC(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += [*(id *)(*(void *)(a1 + 32) + 24) count];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v2 = objc_msgSend((id)objc_opt_class(), "qosArray", 0);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v8;
    do
    {
      os_log_type_t v5 = 0;
      do
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v2);
        }
        id v6 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:*(void *)(*((void *)&v7 + 1) + 8 * (void)v5)];
        *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += [v6 count];

        os_log_type_t v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v3);
  }
}

void sub_100019248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000192F0()
{
  sub_1000192DC();
  int v2 = 9;
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "[Scheduler] Invalid task QoS (%d); fallback to %d",
    v1,
    0xEu);
}

void sub_10001936C()
{
  sub_1000192DC();
  int v3 = v0;
  _os_log_fault_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "[Scheduler] Invalid task QoS (%d); fallback to %d",
    v2,
    0xEu);
}

void sub_1000193E8(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)long long buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "[Scheduler] Multiple intensive DAS activities scheduled concurrently; quitting %@",
    buf,
    0xCu);
}

void sub_100019724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  _Unwind_Resume(a1);
}

void sub_100019774(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained) {
    [WeakRetained _reportProgressWithBlock:*(void *)(a1 + 32)];
  }
}

void sub_1000197CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100019850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000198AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  long long v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VCPProgressReporter;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100019A54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100019A70(uint64_t a1)
{
  return (*(uint64_t (**)(void, double))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), (float)((float)((float)*(uint64_t *)(*(void *)(a1 + 32) + 24) * 100.0)/ (float)*(uint64_t *)(*(void *)(a1 + 32) + 40)));
}

void sub_100019BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100019BFC()
{
  int v0 = VCPLogInstance();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)os_log_t v1 = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Daemon appears to be hung; self-terminating",
      v1,
      2u);
  }

  exit(1);
}

void sub_100019CB0(id a1)
{
  os_log_t v1 = objc_alloc_init(VCPWatchdog);
  int v2 = (void *)qword_100252458;
  qword_100252458 = (uint64_t)v1;
}

void sub_100019E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100019E2C(uint64_t a1)
{
  objc_storeStrong(&qword_100252448, *(id *)(a1 + 32));
  os_log_t v1 = (void *)qword_100252450;
  qword_100252450 = 0;
}

void sub_100019EA4(id a1)
{
  os_log_t v1 = (void *)qword_100252450;
  qword_100252450 = 0;
}

void sub_100019F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100019F68(uint64_t a1)
{
  id v1 = objc_retainBlock(*(id *)(a1 + 32));
  int v2 = (void *)qword_100252450;
  qword_100252450 = (uint64_t)v1;
}

void sub_10001A6C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      id v6 = [*(id *)(a1 + 32) assetLocalIdentifier];
      long long v7 = [v3 path];
      long long v8 = [*(id *)(a1 + 40) path];
      *(_DWORD *)long long buf = 138412802;
      long long v21 = v6;
      __int16 v22 = 2112;
      long long v23 = v7;
      __int16 v24 = 2112;
      long long v25 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Resource][%@] Copying %@ to %@", buf, 0x20u);
    }
  }
  long long v9 = +[NSFileManager defaultManager];
  uint64_t v10 = *(void *)(a1 + 40);
  id v19 = 0;
  unsigned __int8 v11 = [v9 copyItemAtURL:v3 toURL:v10 error:&v19];
  id v12 = v19;

  if ((v11 & 1) == 0 && (int)MediaAnalysisLogLevel() >= 3)
  {
    uint64_t v13 = VCPLogInstance();
    os_log_type_t v14 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = [*(id *)(a1 + 32) assetLocalIdentifier];
      os_log_type_t v16 = [v3 path];
      uint64_t v17 = [*(id *)(a1 + 40) path];
      uint64_t v18 = [v12 description];
      *(_DWORD *)long long buf = 138413058;
      long long v21 = v15;
      __int16 v22 = 2112;
      long long v23 = v16;
      __int16 v24 = 2112;
      long long v25 = v17;
      __int16 v26 = 2112;
      long long v27 = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "[Resource][%@] Failed to copy %@ to %@ (%@)", buf, 0x2Au);
    }
  }
}

void sub_10001A90C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      id v6 = [*(id *)(a1 + 32) assetLocalIdentifier];
      int v8 = 138412546;
      long long v9 = v6;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Resource][%@] Request completed (error: %@)", (uint8_t *)&v8, 0x16u);
    }
  }
  if (v3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *(void *)(a1 + 40);
  }
  (*(void (**)(void, uint64_t, id))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v7, v3);
}

void sub_10001AA28(uint64_t a1, double a2)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      id v6 = [*(id *)(a1 + 32) assetLocalIdentifier];
      int v7 = 138412546;
      int v8 = v6;
      __int16 v9 = 2048;
      double v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Resource][%@] Download progress: %0.3f", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_10001B32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  _Block_object_dispose((const void *)(v25 - 128), 8);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001B3DC(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));

  if (WeakRetained)
  {
    id v3 = objc_loadWeakRetained(v1);
    [v3 cancelAllRequests];
  }
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "HomeKit analysis server XPC connection interrupted", v6, 2u);
    }
  }
}

void sub_10001B488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001B498(uint64_t a1)
{
  int v2 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));

  if (WeakRetained)
  {
    id v4 = objc_loadWeakRetained(v2);
    [v4 cancelAllRequests];
  }
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    os_log_type_t v5 = VCPLogInstance();
    os_log_type_t v6 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v5, v6))
    {
      *(_WORD *)__int16 v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "HomeKit analysis server XPC connection invalidated", v9, 2u);
    }
  }
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(void **)(v7 + 8);
  *(void *)(v7 + 8) = 0;
}

void sub_10001B568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001B5D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001B784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001B97C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001BCD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10001BD08(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001BD18(uint64_t a1)
{
}

id sub_10001BD20(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10001BD3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(NSObject **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10001BE30;
  v12[3] = &unk_10021A0B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[4] = v7;
  id v13 = v6;
  id v9 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v9;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, v12);
}

void sub_10001BE30(uint64_t a1)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  id v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      id v5 = VCPLogInstance();
      os_log_type_t v6 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v5, v6))
      {
        int v7 = *(_DWORD *)(a1 + 72);
        int v8 = *(void **)(a1 + 40);
        uint64_t v9 = [v8 description];
        id v10 = (void *)v9;
        id v11 = "failed";
        LODWORD(v16) = 67109634;
        HIDWORD(v16) = v7;
        if (!v8) {
          id v11 = "completed";
        }
        __int16 v17 = 2080;
        uint64_t v18 = v11;
        __int16 v19 = 2112;
        uint64_t v20 = v9;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Request %d %s, %@", (uint8_t *)&v16, 0x1Cu);
      }
    }
    id v12 = *(void **)(*(void *)(a1 + 32) + 32);
    id v13 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72), v16);
    [v12 removeObjectForKey:v13];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  uint64_t v14 = *(void *)(*(void *)(a1 + 64) + 8);
  id v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = 0;
}

void sub_10001BFEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001C014(uint64_t a1)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
  id v3 = objc_msgSend(v2, "objectForKeyedSubscript:");

  if (v3)
  {
    id v14 = +[NSString stringWithFormat:@"requestID %d already exists", *(unsigned int *)(a1 + 80)];
    uint64_t v4 = *(void *)(a1 + 56);
    id v5 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v14];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    id v15 = +[VCPHomeKitAnalysisServiceTask taskForFragmentData:*(void *)(a1 + 40) withProperties:*(void *)(a1 + 48) andProgressHandler:*(void *)(a1 + 64) andCompletionHandler:*(void *)(a1 + 72)];
    int v7 = +[VCPMADTaskScheduler sharedInstance];
    id v8 = [v7 addForegroundTask:v15 withQoS:25];

    if (v8)
    {
      uint64_t v9 = +[NSNumber numberWithUnsignedInteger:v8];
      id v10 = *(void **)(*(void *)(a1 + 32) + 32);
      id v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
      [v10 setObject:v9 forKeyedSubscript:v11];
    }
    else
    {
      uint64_t v9 = +[NSString stringWithFormat:@"Failed to create task for request %d", *(unsigned int *)(a1 + 80)];
      uint64_t v12 = *(void *)(a1 + 56);
      id v11 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v9];
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v11);
    }
  }
}

void sub_10001C238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10001C5B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10001C5E4(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10001C600(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10001C6F4;
  v12[3] = &unk_10021A0B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[4] = v7;
  id v13 = v6;
  id v9 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v9;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, v12);
}

void sub_10001C6F4(uint64_t a1)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      id v5 = VCPLogInstance();
      os_log_type_t v6 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v5, v6))
      {
        int v7 = *(_DWORD *)(a1 + 72);
        id v8 = *(void **)(a1 + 40);
        uint64_t v9 = [v8 description];
        id v10 = (void *)v9;
        id v11 = "failed";
        LODWORD(v16) = 67109634;
        HIDWORD(v16) = v7;
        if (!v8) {
          id v11 = "completed";
        }
        __int16 v17 = 2080;
        uint64_t v18 = v11;
        __int16 v19 = 2112;
        uint64_t v20 = v9;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Request %d %s, %@", (uint8_t *)&v16, 0x1Cu);
      }
    }
    uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 32);
    id v13 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72), v16);
    [v12 removeObjectForKey:v13];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  uint64_t v14 = *(void *)(*(void *)(a1 + 64) + 8);
  id v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = 0;
}

void sub_10001C8B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001C8D8(uint64_t a1)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
  id v3 = objc_msgSend(v2, "objectForKeyedSubscript:");

  if (v3)
  {
    id v14 = +[NSString stringWithFormat:@"requestID %d already exists", *(unsigned int *)(a1 + 80)];
    uint64_t v4 = *(void *)(a1 + 56);
    id v5 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v14];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    id v15 = +[VCPHomeKitAnalysisServiceTask taskForFragmentSurface:*(void *)(a1 + 40) withProperties:*(void *)(a1 + 48) andProgressHandler:*(void *)(a1 + 64) andCompletionHandler:*(void *)(a1 + 72)];
    int v7 = +[VCPMADTaskScheduler sharedInstance];
    id v8 = [v7 addForegroundTask:v15 withQoS:25];

    if (v8)
    {
      uint64_t v9 = +[NSNumber numberWithUnsignedInteger:v8];
      id v10 = *(void **)(*(void *)(a1 + 32) + 32);
      id v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
      [v10 setObject:v9 forKeyedSubscript:v11];
    }
    else
    {
      uint64_t v9 = +[NSString stringWithFormat:@"Failed to create task for request %d", *(unsigned int *)(a1 + 80)];
      uint64_t v12 = *(void *)(a1 + 56);
      id v11 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v9];
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v11);
    }
  }
}

void sub_10001CAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10001CDCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001CDFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10001CEF0;
  v12[3] = &unk_10021A0B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[4] = v7;
  id v13 = v6;
  id v9 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v9;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, v12);
}

void sub_10001CEF0(uint64_t a1)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    id v5 = *(void **)(*(void *)(a1 + 32) + 32);
    id v6 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
    [v5 removeObjectForKey:v6];
  }
  [*(id *)(a1 + 32) logStatusForRequest:*(unsigned int *)(a1 + 72) withError:*(void *)(a1 + 40)];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = 0;
}

void sub_10001CFD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001CFE8(uint64_t a1)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    NSErrorUserInfoKey v21 = NSLocalizedDescriptionKey;
    id v6 = +[NSString stringWithFormat:@"requestID %d already exists", *(unsigned int *)(a1 + 56)];
    __int16 v22 = v6;
    uint64_t v7 = +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
    id v8 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-50 userInfo:v7];
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v8);
  }
  else
  {
    id v10 = +[VCPHomeResidentMaintenanceTask taskWithOptions:*(void *)(a1 + 40) extendTimeoutBlock:&stru_10021A120 completionHandler:*(void *)(a1 + 48)];
    id v11 = +[VCPMADTaskScheduler sharedInstance];
    id v12 = [v11 addForegroundTask:v10 withQoS:25];

    if (v12)
    {
      id v13 = +[NSNumber numberWithUnsignedInteger:v12];
      id v14 = *(void **)(*(void *)(a1 + 32) + 32);
      id v15 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
      [v14 setObject:v13 forKeyedSubscript:v15];
    }
    else if ((int)MediaAnalysisLogLevel() >= 3)
    {
      uint64_t v16 = VCPLogInstance();
      os_log_type_t v17 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v16, v17))
      {
        int v18 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)long long buf = 67109120;
        int v20 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to schedule request %d; canceling", buf, 8u);
      }
    }
  }
}

void sub_10001D264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001D2C4(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_10001D314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10001D50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001D53C(uint64_t a1)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v4 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  id v3 = objc_msgSend(v2, "objectForKeyedSubscript:");
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v3 unsignedIntegerValue];
}

void sub_10001D5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10001D834(_Unwind_Exception *a1)
{
  int v2 = v1;

  _Unwind_Resume(a1);
}

void sub_10001D884(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 32) allValues];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10001D958(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("HMIAnalysisService");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252468 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_10001DB78();
    sub_10001D9B0();
  }
}

void sub_10001D9B0()
{
  v1[0] = 0;
  if (!qword_100252470)
  {
    v1[1] = _NSConcreteStackBlock;
    v1[2] = 3221225472;
    v1[3] = sub_10001DAAC;
    v1[4] = &unk_100219838;
    v1[5] = v1;
    long long v2 = off_10021A190;
    uint64_t v3 = 0;
    qword_100252470 = _sl_dlopen();
  }
  int v0 = (void *)v1[0];
  if (!qword_100252470)
  {
    int v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_10001DAAC()
{
  uint64_t result = _sl_dlopen();
  qword_100252470 = result;
  return result;
}

Class sub_10001DB20(uint64_t a1)
{
  sub_10001D9B0();
  Class result = objc_getClass("HMITaskService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252478 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_10001DBA0();
    return (Class)sub_10001DB78();
  }
  return result;
}

uint64_t sub_10001DB78()
{
  uint64_t v0 = abort_report_np();
  return sub_10001DBA0(v0);
}

BOOL sub_10001DBA0()
{
  uint64_t v0 = (void *)abort_report_np();
  return +[VCPHomeKitAnalysisServiceTask isPerFrameAnalysisEnabled];
}

void sub_10001DD3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10001DD64()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_100252480;
  uint64_t v7 = qword_100252480;
  if (!qword_100252480)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10001ED44;
    v3[3] = &unk_100219E10;
    v3[4] = &v4;
    sub_10001ED44((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10001DE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001DF98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001E070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001E13C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001E1D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 8))
  {
    *(unsigned char *)(v1 + 8) = 1;
    unsigned __int8 v3 = [(id)objc_opt_class() isPerFrameAnalysisEnabled];
    uint64_t v4 = *(void *)(a1 + 32);
    if ((v3 & 1) == 0 && *(_DWORD *)(v4 + 40) != -1)
    {
      objc_msgSend(*(id *)(v4 + 48), "cancelRequest:");
      uint64_t v4 = *(void *)(a1 + 32);
    }
    if (!*(unsigned char *)(v4 + 9))
    {
      uint64_t v5 = *(void *)(v4 + 72);
      uint64_t v6 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-128 userInfo:0];
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v6);

      *(unsigned char *)(*(void *)(a1 + 32) + 9) = 1;
    }
  }
}

void sub_10001E298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10001E390(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001E3A0(uint64_t a1)
{
}

uint64_t (**sub_10001E3A8(uint64_t a1))(double)
{
  uint64_t v2 = *(void *)(a1 + 32);
  Class result = *(uint64_t (***)(double))(v2 + 64);
  if (result)
  {
    Class result = (uint64_t (**)(double))result[2](0.0);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v4 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    return (uint64_t (**)(double))dispatch_semaphore_signal(v4);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 16);
    if (v5)
    {
      uint64_t v6 = *(void **)(v2 + 48);
      uint64_t v7 = *(void *)(v2 + 32);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_10001E584;
      v14[3] = &unk_10021A270;
      uint64_t v8 = *(void *)(a1 + 40);
      v14[4] = v2;
      v14[5] = v8;
      Class result = (uint64_t (**)(double))[v6 requestAnalysisForAssetData:v5 withProperties:v7 andCompletionHandler:v14];
      *(_DWORD *)(*(void *)(a1 + 32) + 40) = result;
    }
    else if (*(void *)(v2 + 24))
    {
      if ((int)MediaAnalysisLogLevel() >= 4)
      {
        id v9 = VCPLogInstance();
        os_log_type_t v10 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v9, v10))
        {
          *(_WORD *)id v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "IOSurface received, no analysis is implemented for now.", v13, 2u);
        }
      }
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 72);
      id v12 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-4 userInfo:0];
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0, v12);

      Class result = (uint64_t (**)(double))dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(*(void *)(a1 + 40) + 8)
                                                                                                  + 40));
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 9) = 1;
  }
  return result;
}

void sub_10001E56C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001E584(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(v6 + 64);
  if (v7)
  {
    (*(void (**)(double))(v7 + 16))(100.0);
    uint64_t v6 = *(void *)(a1 + 32);
  }
  (*(void (**)(void))(*(void *)(v6 + 72) + 16))();
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_10001E624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10001EA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);

  _Unwind_Resume(a1);
}

void sub_10001EB3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v8 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v7, v8))
      {
        int v9 = 138412290;
        id v10 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Per-frame analysis fails with error: %@", (uint8_t *)&v9, 0xCu);
      }
    }
  }
  else
  {
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v5];
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10001EC58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class sub_10001ED44(uint64_t a1)
{
  v4[0] = 0;
  if (!qword_100252488)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = 3221225472;
    v4[3] = sub_10001EE88;
    v4[4] = &unk_100219838;
    v4[5] = v4;
    long long v5 = off_10021A2B8;
    uint64_t v6 = 0;
    qword_100252488 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_100252488)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("HMIAnalysisService");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)sub_10001DB78();
LABEL_8:
    free(v2);
  }
  qword_100252480 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10001EE88()
{
  uint64_t result = _sl_dlopen();
  qword_100252488 = result;
  return result;
}

void sub_10001F2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

id sub_10001F350()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_100252490;
  uint64_t v7 = qword_100252490;
  if (!qword_100252490)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000212D8;
    v3[3] = &unk_100219E10;
    v3[4] = &v4;
    sub_1000212D8((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10001F41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001F434(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)int v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[HomeKit] Session XPC connection interrupted", v9, 2u);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  long long v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = (void *)WeakRetained[1];
    WeakRetained[1] = 0;

    uint64_t v7 = (void *)v5[6];
    void v5[6] = 0;

    [v5 cancelAllRequests];
    os_log_type_t v8 = +[VCPClientManager sharedManager];
    [v8 removeClientHandler:v5];
  }
}

void sub_10001F524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001F540(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)int v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[HomeKit] Session XPC connection invalidated", v9, 2u);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  long long v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = (void *)WeakRetained[1];
    WeakRetained[1] = 0;

    uint64_t v7 = (void *)v5[6];
    void v5[6] = 0;

    [v5 cancelAllRequests];
    os_log_type_t v8 = +[VCPClientManager sharedManager];
    [v8 removeClientHandler:v5];
  }
}

void sub_10001F630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001F6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001F8C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001F9EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001FA00(uint64_t a1)
{
  dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 80));
  dispatch_group_wait(*(dispatch_group_t *)(*(void *)(a1 + 32) + 72), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24);
  if (v2)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10001FC5C;
    v11[3] = &unk_10021A2D8;
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = *(id *)(a1 + 48);
    v11[4] = *(void *)(a1 + 32);
    id v12 = v4;
    [v2 handleMessageWithOptions:v3 completionHandler:v11];
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 4)
    {
      long long v5 = VCPLogInstance();
      os_log_type_t v6 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v5, v6))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "HMIVideoAnalyzer not initialized", buf, 2u);
      }
    }
    uint64_t v7 = *(void *)(a1 + 48);
    NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
    os_log_type_t v8 = +[NSString stringWithFormat:@"HMIVideoAnalyzer not initialized"];
    id v15 = v8;
    int v9 = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
    id v10 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-18 userInfo:v9];
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0, v10);

    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 80));
  }
}

void sub_10001FC20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001FC5C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 80);
  dispatch_group_leave(v2);
}

void sub_10001FF44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001FF60(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = a1[4];
  os_log_type_t v8 = *(NSObject **)(v7 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100020048;
  block[3] = &unk_10021A368;
  int v9 = (void *)a1[5];
  uint64_t v16 = a1[6];
  block[4] = v7;
  id v13 = v6;
  id v14 = v5;
  id v15 = v9;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, block);
}

void sub_100020048(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 64);
  uint64_t v3 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 64)];
  id v4 = [v2 objectForKeyedSubscript:v3];

  int v5 = MediaAnalysisLogLevel();
  if (v4)
  {
    if (v5 >= 6)
    {
      id v6 = VCPLogInstance();
      os_log_type_t v7 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = *(void *)(a1 + 64);
        int v9 = *(void **)(a1 + 40);
        uint64_t v10 = [v9 description];
        id v11 = (void *)v10;
        id v12 = "failed";
        *(_DWORD *)long long buf = 134218498;
        uint64_t v30 = v8;
        if (!v9) {
          id v12 = "completed";
        }
        __int16 v31 = 2080;
        long long v32 = v12;
        __int16 v33 = 2112;
        uint64_t v34 = v10;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Request %lu %s, %@", buf, 0x20u);
      }
    }
    id v13 = *(void **)(*(void *)(a1 + 32) + 64);
    id v14 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 64)];
    [v13 removeObjectForKey:v14];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    if (v5 >= 4)
    {
      id v15 = VCPLogInstance();
      os_log_type_t v16 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = *(void *)(a1 + 64);
        *(_DWORD *)long long buf = 134217984;
        uint64_t v30 = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Request %lu no longer exists", buf, 0xCu);
      }
    }
    uint64_t v18 = *(void *)(a1 + 56);
    __int16 v19 = +[NSString stringWithFormat:@"Request ID not valid", NSLocalizedDescriptionKey];
    long long v28 = v19;
    int v20 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
    NSErrorUserInfoKey v21 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-18 userInfo:v20];
    (*(void (**)(uint64_t, void, void *))(v18 + 16))(v18, 0, v21);
  }
  if ([*(id *)(a1 + 40) code] == (id)-23804)
  {
    __int16 v22 = [*(id *)(a1 + 40) domain];
    unsigned int v23 = [v22 isEqualToString:NSOSStatusErrorDomain];

    if (v23)
    {
      [*(id *)(*(void *)(a1 + 32) + 24) cancel];
      __int16 v24 = *(void **)(*(void *)(a1 + 32) + 24);
      *(void *)(*(void *)(a1 + 32) + 24) = 0;

      if ((int)MediaAnalysisLogLevel() >= 4)
      {
        uint64_t v25 = VCPLogInstance();
        os_log_type_t v26 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v25, v26))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "Handling asset time-out; re-initialize HMIVideoAnalyzer",
            buf,
            2u);
        }
      }
      [*(id *)(a1 + 32) startSessionWithProperties:0 andReply:&stru_10021A340];
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 72));
}

void sub_1000203EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100020444(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2 && (int)MediaAnalysisLogLevel() >= 3)
  {
    uint64_t v3 = VCPLogInstance();
    os_log_type_t v4 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v3, v4))
    {
      int v5 = 138412290;
      id v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error with re-initializing HMIVideoAnalyzer: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_100020514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100020530(void *a1)
{
  uint64_t v2 = *(void **)(a1[4] + 64);
  uint64_t v3 = +[NSNumber numberWithUnsignedInteger:a1[7]];
  os_log_type_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      int v5 = VCPLogInstance();
      os_log_type_t v6 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = a1[7];
        *(_DWORD *)long long buf = 134217984;
        uint64_t v17 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "taskID %lu already exists", buf, 0xCu);
      }
    }
    uint64_t v8 = a1[5];
    NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
    int v9 = +[NSString stringWithFormat:@"taskID already exists"];
    id v15 = v9;
    uint64_t v10 = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
    id v11 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-18 userInfo:v10];
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v11);

    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  }
  else
  {
    id v12 = *(void **)(a1[4] + 64);
    id v13 = +[NSNumber numberWithUnsignedInteger:a1[7]];
    [v12 setObject:&off_10022D978 forKeyedSubscript:v13];
  }
}

void sub_100020774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000207C0(void *a1)
{
  dispatch_group_enter(*(dispatch_group_t *)(a1[4] + 72));
  dispatch_group_wait(*(dispatch_group_t *)(a1[4] + 80), 0xFFFFFFFFFFFFFFFFLL);
  if (*(void *)(a1[4] + 24))
  {
    uint64_t v3 = +[VCPHomeKitFragmentProcessingTask taskForAssetData:a1[5] withAnalyzer:*(void *)(a1[4] + 24) withOptions:a1[6] andCompletionHandler:a1[8]];
    os_log_type_t v4 = +[VCPMADTaskScheduler sharedInstance];
    id v5 = [v4 addForegroundTask:v3 withQoS:25];

    uint64_t v6 = a1[4];
    uint64_t v7 = *(NSObject **)(v6 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100020B68;
    block[3] = &unk_10021A408;
    block[4] = v6;
    void block[5] = v5;
    block[6] = a1[9];
    dispatch_sync(v7, block);
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 4)
    {
      uint64_t v8 = VCPLogInstance();
      os_log_type_t v9 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v8, v9))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "HMIVideoAnalyzer not initialized", buf, 2u);
      }
    }
    uint64_t v10 = a1[4];
    id v11 = *(NSObject **)(v10 + 32);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100020AEC;
    v18[3] = &unk_10021A3E0;
    uint64_t v12 = a1[9];
    v18[4] = v10;
    v18[5] = v12;
    dispatch_sync(v11, v18);
    uint64_t v13 = a1[7];
    NSErrorUserInfoKey v20 = NSLocalizedDescriptionKey;
    NSErrorUserInfoKey v14 = +[NSString stringWithFormat:@"HMIVideoAnalyzer not initialized"];
    NSErrorUserInfoKey v21 = v14;
    id v15 = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
    os_log_type_t v16 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-18 userInfo:v15];
    (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0, v16);

    dispatch_group_leave(*(dispatch_group_t *)(a1[4] + 72));
  }
}

void sub_100020AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100020AEC(uint64_t a1)
{
  id v1 = *(void **)(*(void *)(a1 + 32) + 64);
  id v2 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 40)];
  objc_msgSend(v1, "removeObjectForKey:");
}

void sub_100020B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100020B68(void *a1)
{
  if (a1[5])
  {
    +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:");
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    id v2 = *(void **)(a1[4] + 64);
    uint64_t v3 = +[NSNumber numberWithUnsignedInteger:a1[6]];
    [v2 setObject:v9 forKeyedSubscript:v3];
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 4)
    {
      os_log_type_t v4 = VCPLogInstance();
      os_log_type_t v5 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = a1[5];
        *(_DWORD *)long long buf = 134217984;
        uint64_t v11 = v6;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to create task for MAD request %lu", buf, 0xCu);
      }
    }
    uint64_t v7 = *(void **)(a1[4] + 64);
    uint64_t v8 = +[NSNumber numberWithUnsignedInteger:a1[6]];
    [v7 removeObjectForKey:v8];
  }
}

void sub_100020CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100020D4C(id a1, NSError *a2)
{
  id v2 = a2;
  if (v2 && (int)MediaAnalysisLogLevel() >= 3)
  {
    uint64_t v3 = VCPLogInstance();
    os_log_type_t v4 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v3, v4))
    {
      os_log_type_t v5 = [(NSError *)v2 description];
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to publish results (%@)", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_100020E30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100021124(_Unwind_Exception *a1)
{
  id v2 = v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100021174(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100021184(uint64_t a1)
{
}

void sub_10002118C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 64) allValues];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  os_log_type_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

Class sub_1000212D8(uint64_t a1)
{
  v4[0] = 0;
  if (!qword_100252498)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = 3221225472;
    v4[3] = sub_10002141C;
    v4[4] = &unk_100219838;
    v4[5] = v4;
    long long v5 = off_10021A470;
    uint64_t v6 = 0;
    qword_100252498 = _sl_dlopen();
    uint64_t v2 = (VCPHomeKitFragmentProcessingTask *)v4[0];
    if (!qword_100252498)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("HMIVideoAnalyzer");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = sub_100021490();
LABEL_8:
    free(v2);
  }
  qword_100252490 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10002141C()
{
  uint64_t result = _sl_dlopen();
  qword_100252498 = result;
  return result;
}

VCPHomeKitFragmentProcessingTask *sub_100021490()
{
  uint64_t v0 = (VCPHomeKitFragmentProcessingTask *)abort_report_np();
  return [(VCPHomeKitFragmentProcessingTask *)v0 init];
}

void sub_1000215CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100021698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000217E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)VCPHomeKitFragmentProcessingTask;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_100021C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a24, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_100021CFC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100021D0C(uint64_t a1)
{
}

void sub_100021D14(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100021F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100022064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100022738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100022830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002289C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100022900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPAnalyzedAssets;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100022C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1000231B0(_Unwind_Exception *a1)
{
  uint64_t v8 = v7;

  _Unwind_Resume(a1);
}

SCMLHandler *__cdecl sub_10002324C(id a1)
{
  id v1 = objc_alloc((Class)SCMLHandler);
  uint64_t v15 = SCMLUseAnyAvailableDevice;
  os_log_type_t v16 = &__kCFBooleanTrue;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
  id v10 = 0;
  id v3 = [v1 initWithOptions:v2 error:&v10];
  id v4 = v10;

  if (v4 && (int)MediaAnalysisLogLevel() >= 3)
  {
    id v5 = VCPLogInstance();
    os_log_type_t v6 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (id)objc_opt_class();
      uint64_t v8 = [v4 description];
      *(_DWORD *)long long buf = 138412546;
      id v12 = v7;
      __int16 v13 = 2112;
      NSErrorUserInfoKey v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "[VCPMADSceneAssetProcessingTask] Failed to create %@: %@", buf, 0x16u);
    }
  }

  return (SCMLHandler *)v3;
}

void sub_1000233D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100023480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  id v10 = v9;

  a9.super_class = (Class)VCPMADSceneAssetProcessingTask;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1000236DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100023CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100023DA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100023EFC(_Unwind_Exception *a1)
{
}

void sub_100024268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1000243F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100024644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100024A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100024E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100025268(_Unwind_Exception *a1)
{
  uint64_t v8 = v5;

  _Unwind_Resume(a1);
}

BOOL sub_100025300(id a1)
{
  return 0;
}

void sub_1000258EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100025AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100025C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  unsigned int v23 = v22;

  _Unwind_Resume(a1);
}

void sub_100025CBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[PFSceneTaxonomy vcp_sharedTaxonomy];
  id v5 = [v3 labels];
  os_log_type_t v6 = [v5 firstObject];
  id v7 = [v6 identifier];
  uint64_t v8 = [v4 nodeForName:v7];

  if (v8)
  {
    uint64_t v9 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v8 extendedSceneClassId]);
    id v10 = [v9 stringValue];

    id v11 = [*(id *)(a1 + 32) objectForKeyedSubscript:v10];

    if (!v11)
    {
      id v12 = +[NSMutableArray array];
      [*(id *)(a1 + 32) setObject:v12 forKeyedSubscript:v10];
    }
    __int16 v13 = [*(id *)(a1 + 32) objectForKeyedSubscript:v10];
    v26[0] = @"Confidence";
    [v3 confidence];
    NSErrorUserInfoKey v14 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
    v27[0] = v14;
    v26[1] = @"BoundingBox";
    [v3 boundingBox];
    uint64_t v15 = NSStringFromRect(v28);
    v27[1] = v15;
    v26[2] = @"size";
    [v3 boundingBox];
    double v17 = v16;
    [v3 boundingBox];
    __int16 v19 = +[NSNumber numberWithDouble:v17 * v18];
    v27[2] = v19;
    NSErrorUserInfoKey v20 = +[NSDictionary dictionaryWithObjects:v27 forKeys:v26 count:3];
    [v13 addObject:v20];
  }
  else
  {
    NSErrorUserInfoKey v21 = [v3 labels];
    __int16 v22 = [v21 firstObject];
    id v10 = [v22 identifier];

    if ((int)MediaAnalysisLogLevel() < 3) {
      goto LABEL_6;
    }
    __int16 v13 = VCPLogInstance();
    os_log_type_t v23 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v13, v23))
    {
      int v24 = 138412290;
      uint64_t v25 = v10;
      _os_log_impl((void *)&_mh_execute_header, v13, v23, "[DO] Unsupported observation label in PFSceneTaxonomyNode %@", (uint8_t *)&v24, 0xCu);
    }
  }

LABEL_6:
}

void sub_100025FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100026088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = [*(id *)(a1 + 32) _processBoundingBoxFromDetectedObjects:a3 forSceneClassID:a2];
  objc_msgSend(*(id *)(a1 + 32), "_insertBoundingBox:toSortedBoundingBoxes:");
}

void sub_1000260E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000263BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_10002688C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_100026960(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v7 = v3;
  id v5 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v3 extendedSceneClassId]);
  os_log_type_t v6 = [v5 stringValue];
  [v4 addObject:v6];
}

void sub_1000269F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100026F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_10002711C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  id v7 = [v6 objectForKeyedSubscript:@"classID"];
  uint64_t v8 = [v6 objectForKeyedSubscript:@"BoundingBox"];
  if ([*(id *)(a1 + 32) containsObject:v7])
  {
    uint64_t v9 = [*(id *)(a1 + 40) objectForKeyedSubscript:v7];

    if (v9)
    {
      id v10 = [*(id *)(a1 + 40) objectForKeyedSubscript:v7];
      id v11 = [v10 mutableCopy];

      [v11 setObject:v8 forKeyedSubscript:@"BoundingBox"];
      [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:v7];
    }
    else
    {
      v13[0] = @"Confidence";
      v13[1] = @"BoundingBox";
      v14[0] = &off_100230848;
      v14[1] = v8;
      id v12 = +[NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:2];
      [*(id *)(a1 + 40) setObject:v12 forKeyedSubscript:v7];
    }
    if (++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) >= 5uLL) {
      *a4 = 1;
    }
  }
}

void sub_1000272C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100027320(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [v6 doubleValue];
  if (v7 >= 0.01)
  {
    uint64_t v8 = VCPSpecialLabelToExtendedSceneClassificationID(v5);
    if (v8)
    {
      CFStringRef v15 = @"Confidence";
      id v16 = v6;
      uint64_t v9 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
      id v10 = *(void **)(a1 + 32);
      id v11 = [v8 stringValue];
      [v10 setObject:v9 forKeyedSubscript:v11];
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() < 3) {
        goto LABEL_5;
      }
      uint64_t v9 = VCPLogInstance();
      os_log_type_t v12 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v9, v12))
      {
        int v13 = 138412290;
        id v14 = v5;
        _os_log_impl((void *)&_mh_execute_header, v9, v12, "Unsupported observation label in VCPSpecialLabelToExtendedSceneClassificationID %@", (uint8_t *)&v13, 0xCu);
      }
    }

LABEL_5:
  }
}

void sub_100027490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000274DC(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v5 = a3;
  id v6 = [v5 objectForKeyedSubscript:@"Confidence"];
  [v6 doubleValue];
  double v8 = v7;

  uint64_t v9 = [v5 objectForKeyedSubscript:@"BoundingBox"];

  if (v9)
  {
    id v10 = [v5 objectForKeyedSubscript:@"BoundingBox"];
    NSRect v19 = NSRectFromString(v10);
    double x = v19.origin.x;
    double y = v19.origin.y;
    double width = v19.size.width;
    double height = v19.size.height;

    id v15 = objc_msgSend(objc_alloc((Class)PHSceneClassification), "initWithExtendedSceneIdentifier:confidence:boundingBox:startTime:duration:classificationType:", objc_msgSend(v17, "longLongValue"), 0, v8, x, y, width, height, 0.0, 0.0);
  }
  else
  {
    +[PHSceneClassification vcp_instanceWithExtendedSceneIdentifier:confidence:](PHSceneClassification, "vcp_instanceWithExtendedSceneIdentifier:confidence:", [v17 longLongValue], v8);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
  }
  id v16 = v15;
  [*(id *)(a1 + 32) addObject:v15];
}

void sub_100027664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100028A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100029E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,const void *a46)
{
  sub_100004484(&a46);
  _Unwind_Resume(a1);
}

void sub_10002A0A4(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 4)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v2, v3))
    {
      id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:*(void *)(a1 + 40)];
      double v5 = *(double *)(a1 + 56);
      int v6 = (int)*(double *)(a1 + 48);
      int v7 = 138412802;
      double v8 = v4;
      __int16 v9 = 1024;
      int v10 = v6;
      __int16 v11 = 1024;
      int v12 = (int)v5;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unknown ideal dimension for VNRequests (%@), using image dimension %dx%d", (uint8_t *)&v7, 0x18u);
    }
  }
}

void sub_10002A19C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002A1B4(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 4)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v2, v3))
    {
      id v4 = [*(id *)(a1 + 32) objectAtIndexedSubscript:0];
      double v5 = objc_opt_class();
      int v6 = (int)*(double *)(a1 + 40);
      int v7 = (int)*(double *)(a1 + 48);
      int v9 = 138412802;
      int v10 = v5;
      __int16 v11 = 1024;
      int v12 = v6;
      __int16 v13 = 1024;
      int v14 = v7;
      id v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Only one VNRequest (%@) for dimension %dx%d; consider coalescing to common resolution",
        (uint8_t *)&v9,
        0x18u);
    }
  }
}

void sub_10002A2C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002AA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_10002AC60((uint64_t)&a24);
  sub_10002AC60((uint64_t)&a27);
  sub_100004484((const void **)(v30 - 152));

  _Unwind_Resume(a1);
}

BOOL sub_10002ABA4(id a1)
{
  return 0;
}

uint64_t sub_10002ABAC(void *a1)
{
  if (*(_DWORD *)a1)
  {
    BOOL v2 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v2) {
      sub_100030468(v2, v3, v4, v5, v6, v7, v8, v9);
    }
    return *(unsigned int *)a1;
  }
  int v12 = a1 + 1;
  __int16 v11 = (__CVBuffer *)a1[1];
  if (v11)
  {
    uint64_t result = CVPixelBufferUnlockBaseAddress(v11, a1[2]);
    *(_DWORD *)a1 = result;
    if (result)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1000303E4();
      }
      return *(unsigned int *)a1;
    }
    void *v12 = 0;
  }
  else
  {
    BOOL v13 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v13) {
      sub_1000303A8(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    return 4294967278;
  }
  return result;
}

uint64_t sub_10002AC60(uint64_t a1)
{
  BOOL v2 = *(__CVBuffer **)(a1 + 8);
  if (v2
    && !*(_DWORD *)a1
    && CVPixelBufferUnlockBaseAddress(v2, *(void *)(a1 + 16))
    && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1000302FC();
  }
  return a1;
}

BOOL sub_10002ACD8(id a1)
{
  return 0;
}

void sub_10002AEFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10002AF60(id a1)
{
  return 0;
}

void sub_10002B5FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);

  sub_10002AC60((uint64_t)va);
  sub_10002AC60((uint64_t)va1);
  sub_100004484((const void **)va2);

  _Unwind_Resume(a1);
}

void sub_10002BE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);

  sub_10002AC60((uint64_t)va);
  sub_10002AC60((uint64_t)va1);
  sub_100004484((const void **)va2);

  _Unwind_Resume(a1);
}

BOOL sub_10002BF50(id a1)
{
  return 0;
}

void sub_10002C84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,void *a30,void *a31,uint64_t a32,uint64_t a33,const void *a34,const void *a35)
{
  sub_100004484(&a34);
  sub_100004484(&a35);
  _Block_object_dispose((const void *)(v37 - 176), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_10002C9D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10002C9E8(uint64_t a1)
{
}

void sub_10002C9F0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) needsSceneProcessing])
  {
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      uint64_t v3 = VCPLogInstance();
      os_log_type_t v4 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v27 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "%@ Performing SceneNet analysis", buf, 0xCu);
      }
    }
    uint64_t v6 = +[VCPWatchdog sharedWatchdog];
    [v6 pet];

    uint64_t v7 = VCPSignPostLog();
    os_signpost_id_t v8 = os_signpost_id_generate(v7);

    uint64_t v9 = VCPSignPostLog();
    uint64_t v10 = v9;
    if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v8, "VCPMADSceneAssetEntryProcess_SceneNetAnalysis", (const char *)&unk_1001F3BD3, buf, 2u);
    }

    id v11 = [*(id *)(a1 + 48) _performSceneNetAnalysisForAssetEntry:*(void *)(a1 + 32) withImage:*(void *)(a1 + 56) andRequests:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
    uint64_t v12 = VCPSignPostLog();
    uint64_t v13 = v12;
    if (v8 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v12))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_INTERVAL_END, v8, "VCPMADSceneAssetEntryProcess_SceneNetAnalysis", (const char *)&unk_1001F3BD3, buf, 2u);
    }

    if (v11)
    {
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        uint64_t v14 = VCPLogInstance();
        os_log_type_t v15 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = *(void *)(a1 + 40);
          *(_DWORD *)long long buf = 138412290;
          uint64_t v27 = v16;
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "%@ Failed to perform SceneNet analysis", buf, 0xCu);
        }
      }
      [*(id *)(a1 + 32) setStatus:v11];
    }
  }
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(v17 + 96);
  uint64_t v18 = *(void *)(v17 + 104);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10002CD24;
  v22[3] = &unk_10021A668;
  id v20 = *(id *)(a1 + 32);
  uint64_t v21 = *(void *)(a1 + 48);
  id v23 = v20;
  uint64_t v24 = v21;
  id v25 = *(id *)(a1 + 64);
  (*(void (**)(uint64_t, const __CFString *, uint64_t, void *))(v18 + 16))(v18, @"AssetProcessCompletion", v19, v22);
}

void sub_10002CCF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10002CD24(uint64_t a1)
{
  [*(id *)(a1 + 32) setScenenetCompleted:1];
  id result = [*(id *)(a1 + 32) blurExposureRotationCompleted];
  if (result)
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 40));
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
    return (id)v3();
  }
  return result;
}

void sub_10002CD90(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v3 = VCPLogInstance();
    os_log_type_t v4 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v56 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%@ Performing non-SceneNet analysis", buf, 0xCu);
    }
  }
  uint64_t v6 = +[VCPWatchdog sharedWatchdog];
  [v6 pet];

  if (![*(id *)(a1 + 40) needsSceneProcessing]) {
    goto LABEL_37;
  }
  os_signpost_id_t v8 = VCPSignPostLog();
  os_signpost_id_t v9 = os_signpost_id_generate(v8);

  uint64_t v10 = VCPSignPostLog();
  id v11 = v10;
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_INTERVAL_BEGIN, v9, "VCPMADSceneAssetEntryProcess_BlurAnalysis", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  id v12 = [*(id *)(a1 + 48) _performBlurAnalysisForAssetEntry:*(void *)(a1 + 40) withLumaPixelBuffer:*(void *)(a1 + 64)];
  uint64_t v13 = VCPSignPostLog();
  uint64_t v14 = v13;
  if (v9 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v13))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, v9, "VCPMADSceneAssetEntryProcess_BlurAnalysis", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  if (v12)
  {
    [*(id *)(a1 + 40) setStatus:v12];
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      os_log_type_t v15 = VCPLogInstance();
      os_log_type_t v16 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v56 = v17;
        uint64_t v18 = "%@ Failed to perform Blur analysis";
LABEL_48:
        _os_log_impl((void *)&_mh_execute_header, v15, v16, v18, buf, 0xCu);
        goto LABEL_49;
      }
      goto LABEL_49;
    }
    goto LABEL_50;
  }
  uint64_t v19 = VCPSignPostLog();
  os_signpost_id_t v20 = os_signpost_id_generate(v19);

  uint64_t v21 = VCPSignPostLog();
  __int16 v22 = v21;
  if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v21))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_INTERVAL_BEGIN, v20, "VCPMADSceneAssetEntryProcess_ExposureAnalysis", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  id v23 = [*(id *)(a1 + 48) _performExposureAnalysisForAssetEntry:*(void *)(a1 + 40) withLumaPixelBuffer:*(void *)(a1 + 64)];
  uint64_t v24 = VCPSignPostLog();
  id v25 = v24;
  if (v20 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v24))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_INTERVAL_END, v20, "VCPMADSceneAssetEntryProcess_ExposureAnalysis", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  if (!v23)
  {
    uint64_t v27 = VCPSignPostLog();
    os_signpost_id_t v28 = os_signpost_id_generate(v27);

    long long v29 = VCPSignPostLog();
    uint64_t v30 = v29;
    if (v28 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v29))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, OS_SIGNPOST_INTERVAL_BEGIN, v28, "VCPMADSceneAssetEntryProcess_RotationAnalysis", (const char *)&unk_1001F3BD3, buf, 2u);
    }

    id v31 = [*(id *)(a1 + 48) _performRotationAnalysisForAssetEntry:*(void *)(a1 + 40) withColorPixelBuffer:*(void *)(a1 + 72)];
    long long v32 = VCPSignPostLog();
    __int16 v33 = v32;
    if (v28 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v32))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_INTERVAL_END, v28, "VCPMADSceneAssetEntryProcess_RotationAnalysis", (const char *)&unk_1001F3BD3, buf, 2u);
    }

    if (v31)
    {
      [*(id *)(a1 + 40) setStatus:v31];
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        os_log_type_t v15 = VCPLogInstance();
        os_log_type_t v16 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v34 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138412290;
          uint64_t v56 = v34;
          uint64_t v18 = "%@ Failed to perform Rotation analysis";
          goto LABEL_48;
        }
        goto LABEL_49;
      }
      goto LABEL_50;
    }
LABEL_37:
    if (![*(id *)(a1 + 40) needsEmbeddingProcessing]) {
      goto LABEL_51;
    }
    long long v35 = VCPSignPostLog();
    os_signpost_id_t v36 = os_signpost_id_generate(v35);

    uint64_t v37 = VCPSignPostLog();
    long long v38 = v37;
    if (v36 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v37))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v38, OS_SIGNPOST_INTERVAL_BEGIN, v36, "VCPMADSceneAssetEntryProcess_EmbeddingAnalysis", (const char *)&unk_1001F3BD3, buf, 2u);
    }

    id v39 = [*(id *)(a1 + 48) _performEmbeddingAnalysisForAssetEntry:*(void *)(a1 + 40) withColorPixelBuffer:*(void *)(a1 + 72)];
    long long v40 = VCPSignPostLog();
    long long v41 = v40;
    if (v36 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v40))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v41, OS_SIGNPOST_INTERVAL_END, v36, "VCPMADSceneAssetEntryProcess_EmbeddingAnalysis", (const char *)&unk_1001F3BD3, buf, 2u);
    }

    if (v39)
    {
      [*(id *)(a1 + 40) setStatus:v39];
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        os_log_type_t v15 = VCPLogInstance();
        os_log_type_t v16 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v42 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138412290;
          uint64_t v56 = v42;
          uint64_t v18 = "%@ Failed to perform Embedding analysis";
          goto LABEL_48;
        }
        goto LABEL_49;
      }
    }
    goto LABEL_50;
  }
  [*(id *)(a1 + 40) setStatus:v23];
  if ((int)MediaAnalysisLogLevel() >= 3)
  {
    os_log_type_t v15 = VCPLogInstance();
    os_log_type_t v16 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v26 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v56 = v26;
      uint64_t v18 = "%@ Failed to perform Exposure analysis";
      goto LABEL_48;
    }
LABEL_49:
  }
LABEL_50:
LABEL_51:
  uint64_t v43 = *(const void **)(a1 + 64);
  if (v43) {
    CFRelease(v43);
  }
  long long v44 = *(const void **)(a1 + 72);
  if (v44) {
    CFRelease(v44);
  }
  uint64_t v45 = *(void *)(a1 + 48);
  uint64_t v47 = *(void *)(v45 + 96);
  uint64_t v46 = *(void *)(v45 + 104);
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472;
  v51[2] = sub_10002D4D8;
  v51[3] = &unk_10021A668;
  id v48 = *(id *)(a1 + 40);
  uint64_t v49 = *(void *)(a1 + 48);
  long long v50 = *(void **)(a1 + 56);
  id v52 = v48;
  uint64_t v53 = v49;
  id v54 = v50;
  (*(void (**)(uint64_t, const __CFString *, uint64_t, void *))(v46 + 16))(v46, @"AssetProcessCompletion", v47, v51);
}

void sub_10002D4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

id sub_10002D4D8(uint64_t a1)
{
  [*(id *)(a1 + 32) setBlurExposureRotationCompleted:1];
  id result = [*(id *)(a1 + 32) scenenetCompleted];
  if (result)
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 40));
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
    return (id)v3();
  }
  return result;
}

void sub_10002DE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,id location)
{
  objc_destroyWeak(v53);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_10002DFB8(uint64_t a1)
{
  BOOL v2 = VCPSignPostLog();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_END, v4, "VCPMADSceneAssetEntry_ProcessAsset", (const char *)&unk_1001F3BD3, v5, 2u);
  }

  if (*(void *)(a1 + 40))
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
}

void sub_10002E068(uint64_t a1)
{
  id WeakRetained = (dispatch_group_t *)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    dispatch_group_wait(WeakRetained[9], 0xFFFFFFFFFFFFFFFFLL);
    dispatch_group_wait(v3[11], 0xFFFFFFFFFFFFFFFFLL);
    dispatch_group_wait(v3[12], 0xFFFFFFFFFFFFFFFFLL);
    [*(id *)(a1 + 32) timeIntervalSinceNow];
    *((double *)v3 + 4) = -v4;
    uint64_t v5 = VCPSignPostLog();
    uint64_t v6 = v5;
    os_signpost_id_t v7 = *(void *)(a1 + 48);
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      v8[0] = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_END, v7, "VCPMADSceneAssetBatch_Process", (const char *)&unk_1001F3BD3, (uint8_t *)v8, 2u);
    }

    if (*(void *)(a1 + 56))
    {
      mach_absolute_time();
      VCPPerformance_LogMeasurement();
    }
  }
}

void sub_10002E160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002F230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_10002F568(uint64_t a1)
{
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  id obj = *(id *)(*(void *)(a1 + 32) + 8);
  id v1 = [obj countByEnumeratingWithState:&v76 objects:v82 count:16];
  if (v1)
  {
    uint64_t v74 = *(void *)v77;
    os_log_type_t type = VCPLogToOSLogType[7];
    do
    {
      BOOL v2 = 0;
      id v75 = v1;
      do
      {
        if (*(void *)v77 != v74) {
          objc_enumerationMutation(obj);
        }
        uint64_t v3 = *(void **)(*((void *)&v76 + 1) + 8 * (void)v2);
        uint64_t v5 = [v3 asset];
        uint64_t v6 = [v5 localIdentifier];
        os_signpost_id_t v7 = +[NSString stringWithFormat:@"[Scene][%@]", v6];

        if ([v3 status] != -128
          && (([v3 needsSceneProcessing] & 1) != 0
           || ([v3 needsEmbeddingProcessing] & 1) != 0))
        {
          os_signpost_id_t v8 = [v3 asset];
          os_signpost_id_t v9 = +[PHAssetChangeRequest changeRequestForAsset:v8];

          if (![v3 needsSceneProcessing]) {
            goto LABEL_24;
          }
          if ((int)MediaAnalysisLogLevel() >= 7)
          {
            uint64_t v10 = VCPLogInstance();
            if (os_log_type_enabled(v10, type))
            {
              *(_DWORD *)long long buf = 138412290;
              v81 = v7;
              _os_log_impl((void *)&_mh_execute_header, v10, type, "%@ Persisting dedupping signals ... ", buf, 0xCu);
            }
          }
          id v11 = [v3 results];
          id v12 = [v11 duplicateMatchingFeature];
          if (v12)
          {
            uint64_t v13 = [v3 results];
            uint64_t v14 = [v13 duplicateMatchingAlternateFeature];
            BOOL v15 = v14 != 0;
          }
          else
          {
            BOOL v15 = 0;
          }

          os_log_type_t v16 = [v3 results];
          uint64_t v17 = [v16 duplicateMatchingFeature];
          uint64_t v18 = [v3 results];
          uint64_t v19 = [v18 duplicateMatchingAlternateFeature];
          [v9 setDuplicateMatchingData:v17 duplicateMatchingAlternateData:v19 processingSucceeded:v15];

          if (![v3 status])
          {
            if ((int)MediaAnalysisLogLevel() >= 7)
            {
              os_signpost_id_t v20 = VCPLogInstance();
              if (os_log_type_enabled(v20, type))
              {
                *(_DWORD *)long long buf = 138412290;
                v81 = v7;
                _os_log_impl((void *)&_mh_execute_header, v20, type, "%@ Persisting scene analysis results ... ", buf, 0xCu);
              }
            }
            uint64_t v21 = [v3 results];
            __int16 v22 = [v21 sceneClassifications];
            __int16 v23 = VCPPhotosSceneProcessingVersionInternal();
            uint64_t v24 = [v3 asset];
            id v25 = [v24 adjustmentVersion];
            [v9 setSceneClassifications:v22 ofType:0 version:v23 timestamp:v25];

            uint64_t v26 = [v3 results];
            [v26 overallAestheticScore];
            objc_msgSend(v9, "setOverallAestheticScore:");

            uint64_t v27 = [v3 results];
            [v27 wellFramedSubjectScore];
            objc_msgSend(v9, "setWellFramedSubjectScore:");

            os_signpost_id_t v28 = [v3 results];
            [v28 wellChosenSubjectScore];
            objc_msgSend(v9, "setWellChosenSubjectScore:");

            long long v29 = [v3 results];
            [v29 tastefullyBlurredScore];
            objc_msgSend(v9, "setTastefullyBlurredScore:");

            uint64_t v30 = [v3 results];
            [v30 sharplyFocusedSubjectScore];
            objc_msgSend(v9, "setSharplyFocusedSubjectScore:");

            id v31 = [v3 results];
            [v31 wellTimedShotScore];
            objc_msgSend(v9, "setWellTimedShotScore:");

            long long v32 = [v3 results];
            [v32 pleasantLightingScore];
            objc_msgSend(v9, "setPleasantLightingScore:");

            __int16 v33 = [v3 results];
            [v33 pleasantReflectionsScore];
            objc_msgSend(v9, "setPleasantReflectionsScore:");

            uint64_t v34 = [v3 results];
            [v34 harmoniousColorScore];
            objc_msgSend(v9, "setHarmoniousColorScore:");

            long long v35 = [v3 results];
            [v35 livelyColorScore];
            objc_msgSend(v9, "setLivelyColorScore:");

            os_signpost_id_t v36 = [v3 results];
            [v36 pleasantSymmetryScore];
            objc_msgSend(v9, "setPleasantSymmetryScore:");

            uint64_t v37 = [v3 results];
            [v37 pleasantPatternScore];
            objc_msgSend(v9, "setPleasantPatternScore:");

            long long v38 = [v3 results];
            [v38 immersivenessScore];
            objc_msgSend(v9, "setImmersivenessScore:");

            id v39 = [v3 results];
            [v39 pleasantPerspectiveScore];
            objc_msgSend(v9, "setPleasantPerspectiveScore:");

            long long v40 = [v3 results];
            [v40 pleasantPostProcessingScore];
            objc_msgSend(v9, "setPleasantPostProcessingScore:");

            long long v41 = [v3 results];
            [v41 noiseScore];
            objc_msgSend(v9, "setNoiseScore:");

            uint64_t v42 = [v3 results];
            [v42 failureScore];
            objc_msgSend(v9, "setFailureScore:");

            uint64_t v43 = [v3 results];
            [v43 pleasantCompositionScore];
            objc_msgSend(v9, "setPleasantCompositionScore:");

            long long v44 = [v3 results];
            [v44 interestingSubjectScore];
            objc_msgSend(v9, "setInterestingSubjectScore:");

            uint64_t v45 = [v3 results];
            [v45 intrusiveObjectPresenceScore];
            objc_msgSend(v9, "setIntrusiveObjectPresenceScore:");

            uint64_t v46 = [v3 results];
            [v46 pleasantCameraTiltScore];
            objc_msgSend(v9, "setPleasantCameraTiltScore:");

            uint64_t v47 = [v3 results];
            [v47 lowLight];
            objc_msgSend(v9, "setLowLight:");

            id v48 = [v3 results];
            [v48 preferredCropRect];
            objc_msgSend(v9, "setPreferredCropRectWithNormalizedRect:");

            uint64_t v49 = [v3 results];
            [v49 acceptableCropRect];
            objc_msgSend(v9, "setAcceptableCropRectWithNormalizedRect:");

            long long v50 = [v3 results];
            __int16 v51 = [v50 objectSaliencyRects];
            [v9 setObjectSaliencyRects:v51];

            id v52 = [v3 results];
            uint64_t v53 = [v52 sceneprintData];
            [v9 setSceneprintData:v53];

            id v54 = [v3 results];
            [v54 wallpaperScore];
            objc_msgSend(v9, "setWallpaperScore:");

            __int16 v55 = [v3 results];
            uint64_t v56 = [v55 colorNormalizationData];
            [v9 setColorNormalizationData:v56];

            v57 = [v3 results];
            [v57 iconicScore];
            [v9 setIconicScore:v58];

            v59 = [v3 results];
            [v59 blurrinessScore];
            objc_msgSend(v9, "setBlurrinessScore:");

            v60 = [v3 results];
            [v60 exposureScore];
            objc_msgSend(v9, "setExposureScore:");

            v61 = [v3 results];
            objc_msgSend(v9, "setProbableRotationDirection:", objc_msgSend(v61, "probableRotationDirection"));

            v62 = [v3 results];
            [v62 probableRotationDirectionConfidence];
            objc_msgSend(v9, "setProbableRotationDirectionConfidence:");

            v63 = [v3 asset];
            v64 = [v63 photoLibrary];
            LODWORD(v24) = objc_msgSend(v64, "vcp_isSyndicationLibrary");

            if (v24) {
              [v9 setCurationScore:0.0];
            }
LABEL_24:
            if ([v3 needsEmbeddingProcessing])
            {
              v65 = *(void **)(a1 + 40);
              v66 = [v3 asset];
              v67 = [v66 localIdentifier];
              LODWORD(v65) = [v65 containsObject:v67];

              if (v65) {
                [v9 setImageEmbeddingVersion:70];
              }
            }
            v68 = [v3 asset];
            unsigned int v69 = objc_msgSend(v68, "mad_isEligibleForComputeSync");

            if (v69)
            {
              v70 = [v3 asset];
              objc_msgSend(v9, "setLocalAnalysisStage:", objc_msgSend(v70, "mad_analysisStageAfterCompletingAnalysis:", 2));
            }
          }
        }
        BOOL v2 = (char *)v2 + 1;
      }
      while (v75 != v2);
      id v1 = [obj countByEnumeratingWithState:&v76 objects:v82 count:16];
    }
    while (v1);
  }
}

void sub_10002FE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100030150(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_1000301A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000302B8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_1000302D4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1000302F0(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1000302FC()
{
  sub_1000302F0(__stack_chk_guard);
  sub_1000302A0();
  sub_1000302B8((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to unlock CVPixelBuffer (%p, %d)", v1, v2, v3, v4, v5);
}

void sub_10003036C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000303A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
    a5,
    a6,
    a7,
    a8,
    0);
}

void sub_1000303E4()
{
  sub_1000302F0(__stack_chk_guard);
  sub_1000302B8((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to unlock CVPixelBuffer (%p, %d)", v1, v2, v3, v4, 0);
}

void sub_100030468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
    a5,
    a6,
    a7,
    a8,
    0);
}

void sub_100030544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003060C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100030668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VCPDatabaseWriter;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1000306F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100030C6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100031574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000316BC(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v2 = +[NSDate now];
    [v2 timeIntervalSinceReferenceDate];
    double v4 = v3;

    if (v4 - *(double *)&qword_1002524C0 <= 0.01) {
      return 1;
    }
    if ((int)MediaAnalysisLogLevel() < 4) {
      return 0;
    }
    uint8_t v5 = VCPLogInstance();
    os_log_type_t v6 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v5, v6))
    {
      *(_WORD *)id v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "[VCPDatabaseWriter] busy timeout has passed since first retry, stop retrying", v12, 2u);
    }
    uint64_t v7 = 0;
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 4)
    {
      os_signpost_id_t v8 = VCPLogInstance();
      os_log_type_t v9 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v8, v9))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "[VCPDatabaseWriter] Error SQLITE_BUSY encountered, attempting first retry", buf, 2u);
      }
    }
    uint8_t v5 = +[NSDate now];
    [v5 timeIntervalSinceReferenceDate];
    qword_1002524C0 = v10;
    uint64_t v7 = 1;
  }

  return v7;
}

void sub_100031820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100032518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1000328F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000331C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100033484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000334B8(sqlite3_stmt *a1, int a2, void *a3)
{
  id v5 = a3;
  os_log_type_t v6 = v5;
  if (v5) {
    uint64_t v7 = sqlite3_bind_text(a1, a2, (const char *)[v5 UTF8String], -1, 0);
  }
  else {
    uint64_t v7 = sqlite3_bind_null(a1, a2);
  }
  uint64_t v8 = v7;

  return v8;
}

void sub_100033530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100033750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100033910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100033F0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 24))
  {
    if (*(unsigned char *)(a1 + 64))
    {
      if (!*(unsigned char *)(v2 + 32))
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [(id)v2 beginTransaction];
        if (*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
        {
          if ((int)MediaAnalysisLogLevel() >= 3)
          {
            uint64_t v30 = VCPLogInstance();
            os_log_type_t v31 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v30, v31))
            {
              int v32 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
              *(_DWORD *)long long buf = 67109120;
              LODWORD(v42) = v32;
              _os_log_impl((void *)&_mh_execute_header, v30, v31, "[VCPDatabaseWriter] Database already opened, failed to begin write transaction: %d", buf, 8u);
            }
          }
        }
      }
    }
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
      {
        if ((int)MediaAnalysisLogLevel() >= 3)
        {
          uint64_t v21 = VCPLogInstance();
          os_log_type_t v22 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v21, v22))
          {
            int v23 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
            *(_DWORD *)long long buf = 67109120;
            LODWORD(v42) = v23;
            _os_log_impl((void *)&_mh_execute_header, v21, v22, "[VCPDatabaseWriter] Database already opened, failed to execute block: %d", buf, 8u);
          }
        }
      }
    }
  }
  uint64_t v3 = a1 + 56;
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
  int v6 = *(_DWORD *)(v4 + 24);
  uint64_t v5 = v4 + 24;
  uint64_t v7 = *(void **)(a1 + 32);
  if (v6)
  {
    if ([v7 shouldPropagateError:v5 finalAttempt:0]) {
      return;
    }
    uint64_t v7 = *(void **)(a1 + 32);
  }
  if (!v7[3] || *(_DWORD *)(*(void *)(*(void *)v3 + 8) + 24))
  {
    objc_msgSend(v7, "closeDatabase", v5);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 32) openDatabase];
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
    {
      if (*(unsigned char *)(a1 + 64))
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 32) beginTransaction];
        if (*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
        {
          if ((int)MediaAnalysisLogLevel() >= 3)
          {
            uint64_t v24 = VCPLogInstance();
            os_log_type_t v25 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v24, v25))
            {
              int v26 = *(_DWORD *)(*(void *)(*(void *)v3 + 8) + 24);
              *(_DWORD *)long long buf = 67109120;
              LODWORD(v42) = v26;
              _os_log_impl((void *)&_mh_execute_header, v24, v25, "[VCPDatabaseWriter] Failed to begin write transaction: %d", buf, 8u);
            }
          }
        }
      }
    }
    if (!*(_DWORD *)(*(void *)(*(void *)v3 + 8) + 24))
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
      {
        if ((int)MediaAnalysisLogLevel() >= 3)
        {
          uint64_t v27 = VCPLogInstance();
          os_log_type_t v28 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v27, v28))
          {
            int v29 = *(_DWORD *)(*(void *)(*(void *)v3 + 8) + 24);
            *(_DWORD *)long long buf = 67109120;
            LODWORD(v42) = v29;
            _os_log_impl((void *)&_mh_execute_header, v27, v28, "[VCPDatabaseWriter] Failed to execute block: %d", buf, 8u);
          }
        }
      }
    }
    uint64_t v8 = *(void *)(*(void *)v3 + 8);
    int v10 = *(_DWORD *)(v8 + 24);
    uint64_t v9 = v8 + 24;
    if (v10
      && ([*(id *)(a1 + 32) shouldPropagateError:v9 finalAttempt:1] & 1) == 0
      && *(_DWORD *)(*(void *)(*(void *)v3 + 8) + 24))
    {
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        id v11 = VCPLogInstance();
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          uint64_t v13 = +[NSThread callStackSymbols];
          *(_DWORD *)long long buf = 138412290;
          uint64_t v42 = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "%@", buf, 0xCu);
        }
      }
      uint64_t v14 = VCPLogInstance();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT)) {
        sub_10004B734(a1, a1 + 56, v14);
      }

      BOOL v15 = +[VCPMADCoreAnalyticsManager sharedManager];
      os_log_type_t v16 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 5 * ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "sizeBytes", @"DatabaseSize") / 0x500000));
      v40[0] = v16;
      v40[1] = &__kCFBooleanTrue;
      v39[1] = @"IsDatabaseRebuilt";
      v39[2] = @"PhotoLibraryScale";
      v40[2] = @"U";
      v39[3] = @"RebuiltErrorCode";
      uint64_t v17 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(*(void *)v3 + 8) + 24)];
      v40[3] = v17;
      uint64_t v18 = +[NSDictionary dictionaryWithObjects:v40 forKeys:v39 count:4];
      [v15 sendEvent:@"com.apple.mediaanalysisd.DatabaseInfomation" withAnalytics:v18];

      uint64_t v19 = +[VCPDataCollection sharedDataCollection];
      [v19 reportDatabaseCorruption];

      [*(id *)(a1 + 32) closeDatabase];
      os_signpost_id_t v20 = +[NSFileManager defaultManager];
      [v20 removeItemAtPath:*(void *)(*(void *)(a1 + 32) + 8) error:0];

      *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 32) openDatabase];
      if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) && *(void *)(a1 + 48))
      {
        if (*(unsigned char *)(a1 + 64))
        {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 32) beginTransaction];
          if (*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
          {
            if ((int)MediaAnalysisLogLevel() >= 3)
            {
              __int16 v33 = VCPLogInstance();
              os_log_type_t v34 = VCPLogToOSLogType[3];
              if (os_log_type_enabled(v33, v34))
              {
                int v35 = *(_DWORD *)(*(void *)(*(void *)v3 + 8) + 24);
                *(_DWORD *)long long buf = 67109120;
                LODWORD(v42) = v35;
                _os_log_impl((void *)&_mh_execute_header, v33, v34, "[VCPDatabaseWriter] Failed to begin write transaction for fallback block: %d", buf, 8u);
              }
            }
          }
        }
        if (!*(_DWORD *)(*(void *)(*(void *)v3 + 8) + 24))
        {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = (*(uint64_t (**)(void))(*(void *)(a1 + 48)
                                                                                             + 16))();
          if (*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
          {
            if ((int)MediaAnalysisLogLevel() >= 3)
            {
              os_signpost_id_t v36 = VCPLogInstance();
              os_log_type_t v37 = VCPLogToOSLogType[3];
              if (os_log_type_enabled(v36, v37))
              {
                int v38 = *(_DWORD *)(*(void *)(*(void *)v3 + 8) + 24);
                *(_DWORD *)long long buf = 67109120;
                LODWORD(v42) = v38;
                _os_log_impl((void *)&_mh_execute_header, v36, v37, "[VCPDatabaseWriter] Failed to execute fallback block: %d", buf, 8u);
              }
            }
          }
        }
      }
    }
  }
}

void sub_10003464C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003470C(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 32);
  if (v1[32]) {
    [v1 commitTransaction];
  }
  return 0;
}

id sub_1000347A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) closeDatabase];
}

void sub_100034814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000348B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100034960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100034C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100034C88(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100034C98(uint64_t a1)
{
}

uint64_t sub_100034CA0(void *a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(a1[4] + 24), "REPLACE INTO ChangeTokens (tokenID, tokenType, tokenData, date, version) VALUES ((?),(?),(?),(?),(?));",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, a1[6]);
    if (!v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, a1[7]);
      if (!v2)
      {
        uint64_t v3 = ppStmt;
        id v4 = *(id *)(*(void *)(a1[5] + 8) + 40);
        uint64_t v5 = v4;
        if (v4)
        {
          id v6 = v4;
          uint64_t v7 = sqlite3_bind_blob(v3, 3, [v6 bytes], (int)objc_msgSend(v6, "length"), 0);
        }
        else
        {
          uint64_t v7 = sqlite3_bind_null(v3, 3);
        }
        uint64_t v2 = v7;

        if (!v2)
        {
          uint64_t v8 = ppStmt;
          uint64_t v9 = +[NSDate date];
          uint64_t v2 = sub_100034EF8(v8, 4, v9);

          if (!v2)
          {
            int v10 = ppStmt;
            int v11 = VCPVersionForTask(a1[6]);
            uint64_t v2 = sqlite3_bind_int(v10, 5, v11);
            if (!v2)
            {
              os_log_type_t v12 = sqlite3_expanded_sql(ppStmt);
              if (v12)
              {
                if (MediaAnalysisEnableDatabaseLog())
                {
                  uint64_t v13 = VCPLogInstance();
                  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)long long buf = 136315650;
                    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                    __int16 v19 = 1024;
                    int v20 = 968;
                    __int16 v21 = 2080;
                    os_log_type_t v22 = v12;
                    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
                  }
                }
                sqlite3_free(v12);
              }
              unsigned int v14 = sqlite3_step(ppStmt);
              if (v14 == 101) {
                uint64_t v2 = 0;
              }
              else {
                uint64_t v2 = v14;
              }
            }
          }
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100034ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100034EF8(sqlite3_stmt *a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (v5)
  {
    [v5 timeIntervalSinceReferenceDate];
    uint64_t v8 = sqlite3_bind_double(a1, a2, v7);
  }
  else
  {
    uint64_t v8 = sqlite3_bind_null(a1, a2);
  }
  uint64_t v9 = v8;

  return v9;
}

void sub_100034F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000351AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000351F4(void *a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(a1[4] + 24), "UPDATE ChangeTokens SET tokenData=(?) WHERE tokenID=(?) AND tokenType=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v3 = ppStmt;
    id v4 = *(id *)(*(void *)(a1[5] + 8) + 40);
    id v5 = v4;
    if (v4)
    {
      id v6 = v4;
      uint64_t v7 = sqlite3_bind_blob(v3, 1, [v6 bytes], (int)objc_msgSend(v6, "length"), 0);
    }
    else
    {
      uint64_t v7 = sqlite3_bind_null(v3, 1);
    }
    uint64_t v2 = v7;

    if (!v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, a1[6]);
      if (!v2)
      {
        uint64_t v2 = sqlite3_bind_int64(ppStmt, 3, a1[7]);
        if (!v2)
        {
          uint64_t v8 = sqlite3_expanded_sql(ppStmt);
          if (v8)
          {
            if (MediaAnalysisEnableDatabaseLog())
            {
              uint64_t v9 = VCPLogInstance();
              if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 136315650;
                unsigned int v14 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v15 = 1024;
                int v16 = 998;
                __int16 v17 = 2080;
                uint64_t v18 = v8;
                _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
              }
            }
            sqlite3_free(v8);
          }
          unsigned int v10 = sqlite3_step(ppStmt);
          if (v10 == 101) {
            uint64_t v2 = 0;
          }
          else {
            uint64_t v2 = v10;
          }
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_1000353D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100035548(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "SELECT date, version, tokenData FROM ChangeTokens WHERE tokenID=(?) AND tokenType=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 40));
    if (!v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, *(void *)(a1 + 48));
      if (!v2)
      {
        uint64_t v3 = sqlite3_expanded_sql(ppStmt);
        if (v3)
        {
          if (MediaAnalysisEnableDatabaseLog())
          {
            id v4 = VCPLogInstance();
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 136315650;
              *(void *)os_log_type_t v28 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              *(_WORD *)&v28[8] = 1024;
              v29[0] = 1018;
              LOWORD(v29[1]) = 2080;
              *(void *)((char *)&v29[1] + 2) = v3;
              _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
            }
          }
          sqlite3_free(v3);
        }
        unsigned int v5 = sqlite3_step(ppStmt);
        if (v5 != 100) {
          goto LABEL_33;
        }
        id v6 = ppStmt;
        if (sqlite3_column_type(ppStmt, 0) == 5)
        {
          uint64_t v7 = 0;
        }
        else
        {
          uint64_t v7 = +[NSDate dateWithTimeIntervalSinceReferenceDate:sqlite3_column_double(v6, 0)];
        }
        int v8 = sqlite3_column_int(ppStmt, 1);
        uint64_t v9 = +[NSDate date];
        [v9 timeIntervalSinceDate:v7];
        double v11 = v10;
        [(id)objc_opt_class() _ageOutIntervalForChangeTokenType:*(void *)(a1 + 48)];
        BOOL v13 = v11 > v12;

        if (v13)
        {
          if ((int)MediaAnalysisLogLevel() >= 5)
          {
            unsigned int v14 = VCPLogInstance();
            os_log_type_t v15 = VCPLogToOSLogType[5];
            if (os_log_type_enabled(v14, v15))
            {
              *(_WORD *)long long buf = 0;
              int v16 = "Age-out interval reached; discarding change token data...";
LABEL_24:
              _os_log_impl((void *)&_mh_execute_header, v14, v15, v16, buf, 2u);
              goto LABEL_31;
            }
            goto LABEL_31;
          }
        }
        else
        {
          if (v8 == VCPVersionForTask(*(void *)(a1 + 40)))
          {
            if (*(void *)(a1 + 48) == 2)
            {
              __int16 v17 = sub_100035A40(ppStmt, 2);
              id v18 = [objc_alloc((Class)NSData) initWithBase64EncodedData:v17 options:0];
              unsigned int v14 = 0;
            }
            else
            {
              uint64_t v19 = objc_opt_class();
              __int16 v17 = sub_100035A40(ppStmt, 2);
              id v25 = 0;
              id v18 = +[NSKeyedUnarchiver unarchivedObjectOfClass:v19 fromData:v17 error:&v25];
              unsigned int v14 = v25;
            }
            **(void **)(a1 + 56) = v18;

            if (!**(void **)(a1 + 56) && (int)MediaAnalysisLogLevel() >= 4)
            {
              int v20 = VCPLogInstance();
              os_log_type_t v21 = VCPLogToOSLogType[4];
              if (os_log_type_enabled(v20, v21))
              {
                uint64_t v22 = *(void *)(a1 + 40);
                uint64_t v23 = *(void *)(a1 + 48);
                *(_DWORD *)long long buf = 67109634;
                *(_DWORD *)os_log_type_t v28 = v22;
                *(_WORD *)&v28[4] = 1024;
                *(_DWORD *)&v28[6] = v23;
                LOWORD(v29[0]) = 2112;
                *(void *)((char *)v29 + 2) = v14;
                _os_log_impl((void *)&_mh_execute_header, v20, v21, "TaskID:%d (%d) queryChangeToken error - %@", buf, 0x18u);
              }
            }
            goto LABEL_31;
          }
          if ((int)MediaAnalysisLogLevel() >= 5)
          {
            unsigned int v14 = VCPLogInstance();
            os_log_type_t v15 = VCPLogToOSLogType[5];
            if (os_log_type_enabled(v14, v15))
            {
              *(_WORD *)long long buf = 0;
              int v16 = "Analysis version updated; discarding change token data...";
              goto LABEL_24;
            }
LABEL_31:
          }
        }
        unsigned int v5 = sqlite3_step(ppStmt);

LABEL_33:
        if (v5 == 101) {
          uint64_t v2 = 0;
        }
        else {
          uint64_t v2 = v5;
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100035970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000359D0(sqlite3_stmt *a1, int a2)
{
  if (sqlite3_column_type(a1, a2) == 5)
  {
    id v4 = 0;
  }
  else
  {
    id v4 = +[NSDate dateWithTimeIntervalSinceReferenceDate:sqlite3_column_double(a1, a2)];
  }
  return v4;
}

id sub_100035A40(sqlite3_stmt *a1, int a2)
{
  if (sqlite3_column_type(a1, a2) == 5)
  {
    id v4 = 0;
  }
  else
  {
    unsigned int v5 = sqlite3_column_blob(a1, a2);
    id v4 = +[NSData dataWithBytesNoCopy:v5 length:sqlite3_column_bytes(a1, a2) freeWhenDone:0];
  }
  return v4;
}

uint64_t sub_100035C1C(void *a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(a1[4] + 24), "DELETE FROM ChangeTokens WHERE tokenID=(?) AND tokenType=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, a1[5]);
    if (!v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, a1[6]);
      if (!v2)
      {
        uint64_t v3 = sqlite3_expanded_sql(ppStmt);
        if (v3)
        {
          id v4 = v3;
          if (MediaAnalysisEnableDatabaseLog())
          {
            unsigned int v5 = VCPLogInstance();
            if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 136315650;
              double v10 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v11 = 1024;
              int v12 = 1064;
              __int16 v13 = 2080;
              unsigned int v14 = v4;
              _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
            }
          }
          sqlite3_free(v4);
        }
        unsigned int v6 = sqlite3_step(ppStmt);
        if (v6 == 101) {
          uint64_t v2 = 0;
        }
        else {
          uint64_t v2 = v6;
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

uint64_t sub_100035EC4(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "DELETE FROM ChangeTokens WHERE tokenID=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 40));
    if (!v2)
    {
      uint64_t v3 = sqlite3_expanded_sql(ppStmt);
      if (v3)
      {
        id v4 = v3;
        if (MediaAnalysisEnableDatabaseLog())
        {
          unsigned int v5 = VCPLogInstance();
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 136315650;
            double v10 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v11 = 1024;
            int v12 = 1080;
            __int16 v13 = 2080;
            unsigned int v14 = v4;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
          }
        }
        sqlite3_free(v4);
      }
      unsigned int v6 = sqlite3_step(ppStmt);
      if (v6 == 101) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = v6;
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100036178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000361A4(uint64_t a1)
{
  ppStmt = 0;
  int v2 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v3 = *(sqlite3 **)(*(void *)(a1 + 32) + 24);
  if (v2) {
    uint64_t v4 = sqlite3_prepare_v2(v3, "UPDATE Assets SET flags=flags | (?), dateAnalyzed=(?) WHERE localIdentifier=(?)", -1, &ppStmt, 0);
  }
  else {
    uint64_t v4 = sqlite3_prepare_v2(v3, "UPDATE Assets SET flags=flags & ~(?), dateAnalyzed=(?) WHERE localIdentifier=(?)", -1, &ppStmt, 0);
  }
  uint64_t v5 = v4;
  if (!v4)
  {
    uint64_t v5 = sqlite3_bind_int(ppStmt, 1, 0x40000000);
    if (!v5)
    {
      unsigned int v6 = ppStmt;
      id v7 = +[NSDate date];
      int v8 = v7;
      if (v7)
      {
        [v7 timeIntervalSinceReferenceDate];
        uint64_t v10 = sqlite3_bind_double(v6, 2, v9);
      }
      else
      {
        uint64_t v10 = sqlite3_bind_null(v6, 2);
      }
      uint64_t v5 = v10;

      if (!v5)
      {
        __int16 v11 = ppStmt;
        id v12 = *(id *)(a1 + 40);
        __int16 v13 = v12;
        uint64_t v14 = v12
            ? sqlite3_bind_text(v11, 3, (const char *)[v12 UTF8String], -1, 0)
            : sqlite3_bind_null(v11, 3);
        uint64_t v5 = v14;

        if (!v5)
        {
          os_log_type_t v15 = sqlite3_expanded_sql(ppStmt);
          if (v15)
          {
            if (MediaAnalysisEnableDatabaseLog())
            {
              int v16 = VCPLogInstance();
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 136315650;
                os_log_type_t v21 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v22 = 1024;
                int v23 = 1112;
                __int16 v24 = 2080;
                id v25 = v15;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
              }
            }
            sqlite3_free(v15);
          }
          unsigned int v17 = sqlite3_step(ppStmt);
          if (v17 == 101) {
            uint64_t v5 = 0;
          }
          else {
            uint64_t v5 = v17;
          }
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v5;
}

void sub_1000363C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100036578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000365B0(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "UPDATE Assets SET masterFingerprint=(?), adjustedFingerprint=(?) WHERE localIdentifier=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v3 = ppStmt;
    id v4 = [*(id *)(a1 + 40) master];
    uint64_t v5 = v4;
    uint64_t v6 = v4
       ? sqlite3_bind_text(v3, 1, (const char *)[v4 UTF8String], -1, 0)
       : sqlite3_bind_null(v3, 1);
    uint64_t v2 = v6;

    if (!v2)
    {
      id v7 = ppStmt;
      id v8 = [*(id *)(a1 + 40) adjusted];
      double v9 = v8;
      uint64_t v10 = v8
          ? sqlite3_bind_text(v7, 2, (const char *)[v8 UTF8String], -1, 0)
          : sqlite3_bind_null(v7, 2);
      uint64_t v2 = v10;

      if (!v2)
      {
        __int16 v11 = ppStmt;
        id v12 = [*(id *)(a1 + 48) localIdentifier];
        __int16 v13 = v12;
        uint64_t v14 = v12
            ? sqlite3_bind_text(v11, 3, (const char *)[v12 UTF8String], -1, 0)
            : sqlite3_bind_null(v11, 3);
        uint64_t v2 = v14;

        if (!v2)
        {
          os_log_type_t v15 = sqlite3_expanded_sql(ppStmt);
          if (v15)
          {
            if (MediaAnalysisEnableDatabaseLog())
            {
              int v16 = VCPLogInstance();
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 136315650;
                os_log_type_t v21 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v22 = 1024;
                int v23 = 1131;
                __int16 v24 = 2080;
                id v25 = v15;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
              }
            }
            sqlite3_free(v15);
          }
          unsigned int v17 = sqlite3_step(ppStmt);
          if (v17 == 101) {
            uint64_t v2 = 0;
          }
          else {
            uint64_t v2 = v17;
          }
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100036808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000369BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000369F4(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "UPDATE Assets SET localIdentifier=(?), flags=flags & ~(?) WHERE localIdentifier=(?);",
         -1,
         &ppStmt,
         0);
  uint64_t v3 = ppStmt;
  if (v2) {
    goto LABEL_12;
  }
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = v4;
  if (v4) {
    uint64_t v6 = sqlite3_bind_text(v3, 1, (const char *)[v4 UTF8String], -1, 0);
  }
  else {
    uint64_t v6 = sqlite3_bind_null(v3, 1);
  }
  uint64_t v2 = v6;

  if (v2
    || (uint64_t v2 = sqlite3_bind_int(ppStmt, 2, 0x40000000), v2)
    || ((id v7 = ppStmt, v8 = *(id *)(a1 + 48), (v9 = v8) == 0)
      ? (uint64_t v10 = sqlite3_bind_null(v7, 3))
      : (uint64_t v10 = sqlite3_bind_text(v7, 3, (const char *)[v8 UTF8String], -1, 0)),
        uint64_t v2 = v10,
        v9,
        v2))
  {
    uint64_t v3 = ppStmt;
LABEL_12:
    sqlite3_finalize(v3);
LABEL_13:
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      __int16 v11 = VCPLogInstance();
      os_log_type_t v12 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v11, v12))
      {
        __int16 v13 = *(const char **)(a1 + 48);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v19 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to update local identifier for asset %@", buf, 0xCu);
      }
    }
    return v2;
  }
  os_log_type_t v15 = sqlite3_expanded_sql(ppStmt);
  if (v15)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      int v16 = VCPLogInstance();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v20 = 1024;
        int v21 = 1150;
        __int16 v22 = 2080;
        int v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v15);
  }
  uint64_t v2 = sqlite3_step(ppStmt);
  sqlite3_finalize(ppStmt);
  uint64_t result = 0;
  if (v2 && v2 != 101) {
    goto LABEL_13;
  }
  return result;
}

void sub_100036C74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100036DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100036E20(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "UPDATE Assets SET dateModified=(?) WHERE localIdentifier=(?);",
         -1,
         &ppStmt,
         0);
  uint64_t v3 = ppStmt;
  if (v2) {
    goto LABEL_11;
  }
  objc_msgSend(*(id *)(a1 + 40), "vcp_modificationDate");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v5 = v4;
  if (v4)
  {
    [v4 timeIntervalSinceReferenceDate];
    uint64_t v7 = sqlite3_bind_double(v3, 1, v6);
  }
  else
  {
    uint64_t v7 = sqlite3_bind_null(v3, 1);
  }
  uint64_t v2 = v7;

  if (v2) {
    goto LABEL_10;
  }
  id v8 = ppStmt;
  id v9 = [*(id *)(a1 + 40) localIdentifier];
  uint64_t v10 = v9;
  uint64_t v11 = v9
      ? sqlite3_bind_text(v8, 2, (const char *)[v9 UTF8String], -1, 0)
      : sqlite3_bind_null(v8, 2);
  uint64_t v2 = v11;

  if (v2)
  {
LABEL_10:
    uint64_t v3 = ppStmt;
LABEL_11:
    sqlite3_finalize(v3);
LABEL_12:
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      os_log_type_t v12 = VCPLogInstance();
      os_log_type_t v13 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = [*(id *)(a1 + 40) localIdentifier];
        *(_DWORD *)long long buf = 138412290;
        __int16 v20 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to update dateModified for asset %@", buf, 0xCu);
      }
    }
    return v2;
  }
  int v16 = sqlite3_expanded_sql(ppStmt);
  if (v16)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      unsigned int v17 = VCPLogInstance();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        __int16 v20 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v21 = 1024;
        int v22 = 1169;
        __int16 v23 = 2080;
        __int16 v24 = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v16);
  }
  uint64_t v2 = sqlite3_step(ppStmt);
  sqlite3_finalize(ppStmt);
  uint64_t result = 0;
  if (v2 && v2 != 101) {
    goto LABEL_12;
  }
  return result;
}

void sub_1000370A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100037280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000372AC(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "SELECT count(*) FROM Assets WHERE localIdentifier=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v3 = ppStmt;
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = v4;
    uint64_t v6 = v4
       ? sqlite3_bind_text(v3, 1, (const char *)[v4 UTF8String], -1, 0)
       : sqlite3_bind_null(v3, 1);
    uint64_t v2 = v6;

    if (!v2)
    {
      uint64_t v7 = sqlite3_expanded_sql(ppStmt);
      if (v7)
      {
        if (MediaAnalysisEnableDatabaseLog())
        {
          id v8 = VCPLogInstance();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 136315650;
            os_log_type_t v12 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v13 = 1024;
            int v14 = 1187;
            __int16 v15 = 2080;
            int v16 = v7;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
          }
        }
        sqlite3_free(v7);
      }
      uint64_t v2 = sqlite3_step(ppStmt);
      if (v2 == 100)
      {
        uint64_t v2 = 0;
        **(unsigned char **)(a1 + 48) = sqlite3_column_int(ppStmt, 0) > 0;
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003745C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100037474(uint64_t a1)
{
  **(unsigned char **)(a1 + 32) = 0;
  return 0;
}

void sub_100037668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000376A8(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "SELECT version FROM Assets WHERE localIdentifier=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v3 = ppStmt;
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = v4;
    uint64_t v6 = v4
       ? sqlite3_bind_text(v3, 1, (const char *)[v4 UTF8String], -1, 0)
       : sqlite3_bind_null(v3, 1);
    uint64_t v2 = v6;

    if (!v2)
    {
      uint64_t v7 = sqlite3_expanded_sql(ppStmt);
      if (v7)
      {
        if (MediaAnalysisEnableDatabaseLog())
        {
          id v8 = VCPLogInstance();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 136315650;
            int v16 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v17 = 1024;
            int v18 = 1211;
            __int16 v19 = 2080;
            __int16 v20 = v7;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
          }
        }
        sqlite3_free(v7);
      }
      unsigned int v9 = sqlite3_step(ppStmt);
      if (v9 == 100)
      {
        uint64_t v10 = +[NSNumber numberWithInt:sqlite3_column_int(ppStmt, 0)];
        uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
        os_log_type_t v12 = *(void **)(v11 + 40);
        *(void *)(v11 + 40) = v10;

        unsigned int v9 = sqlite3_step(ppStmt);
      }
      if (v9 == 101) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = v9;
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003787C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int sub_100037894(id a1)
{
  return 0;
}

void sub_100037C88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100037E70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100038214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000384F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100038538(sqlite3_stmt *a1, uint64_t a2)
{
  id v10 = 0;
  uint64_t v3 = +[NSPropertyListSerialization dataWithPropertyList:a2 format:200 options:0 error:&v10];
  id v4 = v10;
  if (v3)
  {
    uint64_t v5 = v3;
    uint64_t v6 = sqlite3_bind_blob(a1, 3, [v5 bytes], (int)[v5 length], 0);
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() < 3)
    {
      uint64_t v6 = 4294967246;
      goto LABEL_8;
    }
    uint64_t v5 = VCPLogInstance();
    os_log_type_t v7 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v5, v7))
    {
      id v8 = [v4 description];
      *(_DWORD *)long long buf = 138412290;
      os_log_type_t v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, v7, "Failed to bind NSArray (%@)", buf, 0xCu);
    }
    uint64_t v6 = 4294967246;
  }

LABEL_8:
  return v6;
}

void sub_1000386A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000388D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100038B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100038E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100039534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_100039A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100039DD8(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

id sub_100039E58(uint64_t a1)
{
  id v19 = 0;
  uint64_t v20 = 0;
  id v2 = [*(id *)(a1 + 32) _queryPropertiesForAsset:*(void *)(a1 + 40) assetId:&v20 analysis:&v19];
  id v3 = v19;
  id v4 = v3;
  if (v2) {
    goto LABEL_2;
  }
  unsigned int v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 48);
  if (!v3)
  {
    __int16 v15 = [*(id *)(a1 + 56) localIdentifier];
    id v2 = [v9 _storeAnalysis:v10 forLocalIdentifier:v15];

LABEL_14:
    if (!v2) {
      goto LABEL_6;
    }
    goto LABEL_2;
  }
  id v11 = [*(id *)(a1 + 32) compareExistingAnalysis:v3 toNewAnalysis:*(void *)(a1 + 48) forAsset:*(void *)(a1 + 56)];
  if (!v11)
  {
    id v2 = [*(id *)(a1 + 32) _updateAnalysis:v4 withAnalysis:*(void *)(a1 + 48) forAsset:*(void *)(a1 + 56) withAssetId:v20];
    if (!v2) {
      goto LABEL_6;
    }
    goto LABEL_2;
  }
  if (v11 == (id)2)
  {
    uint64_t v5 = +[NSMutableDictionary dictionaryWithDictionary:v4];
    if (!v5 || (id v2 = [*(id *)(a1 + 32) _queryResultsForAssetId:v20 analysis:v5], !v2))
    {
      int v16 = MediaAnalysisInsertMissingResultsFromDegradedAnalysis();
      id v2 = [*(id *)(a1 + 32) _deleteAsset:*(void *)(a1 + 40)];
      if (!v2)
      {
        __int16 v17 = *(void **)(a1 + 32);
        int v18 = [*(id *)(a1 + 56) localIdentifier];
        id v2 = [v17 _storeAnalysis:v16 forLocalIdentifier:v18];

        if (!v2)
        {

          id v2 = 0;
LABEL_5:

          goto LABEL_6;
        }
      }
    }
  }
  else
  {
    if (v11 != (id)1)
    {
      id v2 = 0;
      goto LABEL_6;
    }
    id v2 = [*(id *)(a1 + 32) _deleteAsset:*(void *)(a1 + 40)];
    if (!v2)
    {
      os_log_type_t v12 = *(void **)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 48);
      int v14 = [*(id *)(a1 + 56) localIdentifier];
      id v2 = [v12 _storeAnalysis:v13 forLocalIdentifier:v14];

      goto LABEL_14;
    }
  }
LABEL_2:
  if ((int)MediaAnalysisLogLevel() >= 3)
  {
    uint64_t v5 = VCPLogInstance();
    os_log_type_t v6 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to store asset %@", buf, 0xCu);
    }
    goto LABEL_5;
  }
LABEL_6:

  return v2;
}

void sub_10003A0C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10003A138(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 48) localIdentifier];
  id v5 = [v2 _storeAnalysis:v3 forLocalIdentifier:v4];

  if (v5 && (int)MediaAnalysisLogLevel() >= 3)
  {
    os_log_type_t v6 = VCPLogInstance();
    os_log_type_t v7 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(a1 + 56);
      int v10 = 138412290;
      uint64_t v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to store asset %@", (uint8_t *)&v10, 0xCu);
    }
  }
  return v5;
}

void sub_10003A234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003A3B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003A3DC(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "UPDATE Assets SET version=(?) WHERE  localIdentifier=(?);",
         -1,
         &ppStmt,
         0);
  if (v2) {
    goto LABEL_7;
  }
  uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, 70);
  if (v2) {
    goto LABEL_7;
  }
  uint64_t v3 = ppStmt;
  id v4 = *(id *)(a1 + 40);
  id v5 = v4;
  uint64_t v6 = v4
     ? sqlite3_bind_text(v3, 2, (const char *)[v4 UTF8String], -1, 0)
     : sqlite3_bind_null(v3, 2);
  uint64_t v2 = v6;

  if (v2) {
    goto LABEL_7;
  }
  os_log_type_t v12 = sqlite3_expanded_sql(ppStmt);
  if (v12)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      uint64_t v13 = VCPLogInstance();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        __int16 v17 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v18 = 1024;
        int v19 = 1611;
        __int16 v20 = 2080;
        __int16 v21 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v12);
  }
  uint64_t v14 = sqlite3_step(ppStmt);
  uint64_t v2 = v14;
  uint64_t v10 = 0;
  if (v14)
  {
    if (v14 != 101)
    {
LABEL_7:
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        os_log_type_t v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v7, v8))
        {
          unsigned int v9 = *(const char **)(a1 + 40);
          *(_DWORD *)long long buf = 138412290;
          __int16 v17 = v9;
          _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to bump version for asset %@", buf, 0xCu);
        }
      }
      uint64_t v10 = v2;
    }
  }
  sqlite3_finalize(ppStmt);
  return v10;
}

void sub_10003A608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003AC00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003AF64(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

id sub_10003AFD0(sqlite3_stmt *a1, int a2)
{
  if (sqlite3_column_type(a1, a2) == 5
    || (id v4 = sqlite3_column_blob(a1, a2),
        +[NSData dataWithBytesNoCopy:v4 length:sqlite3_column_bytes(a1, a2) freeWhenDone:0], (id v5 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    uint64_t v6 = 0;
  }
  else
  {
    id v12 = 0;
    uint64_t v6 = +[NSPropertyListSerialization propertyListWithData:v5 options:0 format:0 error:&v12];
    id v7 = v12;
    if (!v6 && (int)MediaAnalysisLogLevel() >= 3)
    {
      os_log_type_t v8 = VCPLogInstance();
      os_log_type_t v9 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = [v7 description];
        *(_DWORD *)long long buf = 67109378;
        int v14 = a2;
        __int16 v15 = 2112;
        int v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to extract NSArray from column %d (%@)", buf, 0x12u);
      }
    }
  }
  return v6;
}

void sub_10003B174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003B314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10003B340(uint64_t a1)
{
  uint64_t v7 = 0;
  **(void **)(a1 + 48) = 0;
  id v2 = [*(id *)(a1 + 32) _queryPropertiesForAsset:*(void *)(a1 + 40) assetId:&v7 analysis:*(void *)(a1 + 48)];
  if (!v2)
  {
    if (!**(void **)(a1 + 48)) {
      return 0;
    }
    id v2 = objc_msgSend(*(id *)(a1 + 32), "_queryResultsForAssetId:analysis:", v7);
    if (!v2) {
      return v2;
    }
  }
  if ((int)MediaAnalysisLogLevel() >= 3)
  {
    uint64_t v3 = VCPLogInstance();
    os_log_type_t v4 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to query asset %@", buf, 0xCu);
    }
  }
  **(void **)(a1 + 48) = 0;
  return v2;
}

void sub_10003B5C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10003B5F4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _deleteAsset:*(void *)(a1 + 40)];
  if (v2 && (int)MediaAnalysisLogLevel() >= 3)
  {
    uint64_t v3 = VCPLogInstance();
    os_log_type_t v4 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v7 = 138412290;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to delete asset %@", (uint8_t *)&v7, 0xCu);
    }
  }
  return v2;
}

void sub_10003B850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003B87C(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "SELECT results FROM Results WHERE resultsType=(?) AND assetId IN (SELECT id FROM Assets WHERE localIdentifier=(?));",
         -1,
         &ppStmt,
         0);
  if (v2) {
    goto LABEL_7;
  }
  uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
  if (v2) {
    goto LABEL_7;
  }
  uint64_t v3 = ppStmt;
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = v4;
  uint64_t v6 = v4
     ? sqlite3_bind_text(v3, 2, (const char *)[v4 UTF8String], -1, 0)
     : sqlite3_bind_null(v3, 2);
  uint64_t v2 = v6;

  if (v2) {
    goto LABEL_7;
  }
  id v12 = sqlite3_expanded_sql(ppStmt);
  if (v12)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      uint64_t v13 = VCPLogInstance();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        int v16 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v17 = 1024;
        int v18 = 1767;
        __int16 v19 = 2080;
        __int16 v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v12);
  }
  uint64_t v2 = sqlite3_step(ppStmt);
  if (v2 != 100)
  {
LABEL_22:
    uint64_t v10 = 0;
    if (!v2 || v2 == 101) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  sub_10003AFD0(ppStmt, 0);
  **(void **)(a1 + 56) = (id)objc_claimAutoreleasedReturnValue();
  if (**(void **)(a1 + 56))
  {
    uint64_t v2 = sqlite3_step(ppStmt);
    goto LABEL_22;
  }
  uint64_t v2 = 4294967278;
LABEL_7:
  if ((int)MediaAnalysisLogLevel() >= 3)
  {
    int v7 = VCPLogInstance();
    os_log_type_t v8 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = *(const char **)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      int v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to query result for asset %@", buf, 0xCu);
    }
  }
  uint64_t v10 = v2;
LABEL_12:
  sqlite3_finalize(ppStmt);
  return v10;
}

void sub_10003BAE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003BCD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003BD04(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = +[NSMutableDictionary dictionary];
  uint64_t v3 = +[NSMutableString stringWithString:](NSMutableString, "stringWithString:", @"SELECT Assets.localIdentifier, Results.resultsType, Results.results FROM Assets JOIN Results ON Assets.id = Results.assetId WHERE Assets.localIdentifier IN (?");
  for (unint64_t i = 1; i < (unint64_t)[*(id *)(a1 + 32) count]; ++i)
    [v3 appendString:@",?"];
  [v3 appendString:@";"]);
  uint64_t v5 = *(sqlite3 **)(*(void *)(a1 + 40) + 24);
  id v6 = v3;
  uint64_t v7 = sqlite3_prepare_v2(v5, (const char *)[v6 UTF8String], -1, &ppStmt, 0);
  if (!v7)
  {
    unint64_t v8 = 0;
    while (1)
    {
      id v9 = [*(id *)(a1 + 32) count];
      uint64_t v10 = ppStmt;
      if (v8 >= (unint64_t)v9) {
        break;
      }
      id v11 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v8];
      id v12 = v11;
      if (v11) {
        uint64_t v13 = sqlite3_bind_text(v10, v8 + 1, (const char *)[v11 UTF8String], -1, 0);
      }
      else {
        uint64_t v13 = sqlite3_bind_null(v10, v8 + 1);
      }
      uint64_t v7 = v13;

      ++v8;
      if (v7) {
        goto LABEL_43;
      }
    }
    int v14 = sqlite3_expanded_sql(ppStmt);
    if (v14)
    {
      if (MediaAnalysisEnableDatabaseLog())
      {
        __int16 v15 = VCPLogInstance();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 136315650;
          id v39 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
          __int16 v40 = 1024;
          LODWORD(v41[0]) = 1816;
          WORD2(v41[0]) = 2080;
          *(void *)((char *)v41 + 6) = v14;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
        }
      }
      sqlite3_free(v14);
    }
    unsigned int v16 = sqlite3_step(ppStmt);
    while (v16 == 100)
    {
      __int16 v17 = ppStmt;
      if (sqlite3_column_type(ppStmt, 0) == 5)
      {
        int v18 = 0;
      }
      else
      {
        int v18 = +[NSString stringWithUTF8String:sqlite3_column_text(v17, 0)];
      }
      int v19 = sqlite3_column_int(ppStmt, 1);
      __int16 v20 = sub_10003AFD0(ppStmt, 2);
      __int16 v21 = MediaAnalysisResultsTypeToKey(v19);
      if (!v21)
      {
        if ((int)MediaAnalysisLogLevel() >= 3)
        {
          int v32 = VCPLogInstance();
          os_log_type_t v33 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v32, v33))
          {
            *(_DWORD *)long long buf = 138412546;
            id v39 = v18;
            __int16 v40 = 1024;
            LODWORD(v41[0]) = v19;
            _os_log_impl((void *)&_mh_execute_header, v32, v33, "[%@] No results key for type %d", buf, 0x12u);
          }
LABEL_40:
        }
LABEL_42:

        uint64_t v7 = 4294967278;
        goto LABEL_43;
      }
      if (!v20)
      {
        if ((int)MediaAnalysisLogLevel() >= 3)
        {
          int v32 = VCPLogInstance();
          os_log_type_t v34 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v32, v34))
          {
            *(_DWORD *)long long buf = 138412546;
            id v39 = v18;
            __int16 v40 = 2112;
            v41[0] = v21;
            _os_log_impl((void *)&_mh_execute_header, v32, v34, "[%@] Cannot load result type: %@", buf, 0x16u);
          }
          __int16 v20 = 0;
          goto LABEL_40;
        }
        __int16 v20 = 0;
        goto LABEL_42;
      }
      uint64_t v22 = [v2 objectForKeyedSubscript:v18];
      BOOL v23 = v22 == 0;

      if (v23)
      {
        __int16 v24 = +[NSMutableDictionary dictionary];
        [v2 setObject:v24 forKeyedSubscript:v18];
      }
      id v25 = [v2 objectForKeyedSubscript:v18];
      int v26 = [v25 objectForKeyedSubscript:@"metadataRanges"];
      BOOL v27 = v26 == 0;

      if (v27)
      {
        os_log_type_t v28 = +[NSMutableDictionary dictionary];
        int v29 = [v2 objectForKeyedSubscript:v18];
        [v29 setObject:v28 forKeyedSubscript:@"metadataRanges"];
      }
      uint64_t v30 = [v2 objectForKeyedSubscript:v18];
      os_log_type_t v31 = [v30 objectForKeyedSubscript:@"metadataRanges"];
      [v31 setObject:v20 forKeyedSubscript:v21];

      unsigned int v16 = sqlite3_step(ppStmt);
    }
    if (v16 == 101) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v16;
    }
  }
LABEL_43:
  sqlite3_finalize(ppStmt);
  id v35 = v2;
  **(void **)(a1 + 48) = v35;

  return v7;
}

void sub_10003C224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003C49C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003C638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003C664(uint64_t a1)
{
  if (![*(id *)(a1 + 32) _getBlacklistExpiredCount:*(void *)(a1 + 40) count:*(void *)(a1 + 48)]&& **(int **)(a1 + 48) < 1)
  {
    return 0;
  }
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "DELETE FROM Blacklist WHERE date<=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v3 = ppStmt;
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = v4;
    if (v4)
    {
      [v4 timeIntervalSinceReferenceDate];
      uint64_t v7 = sqlite3_bind_double(v3, 1, v6);
    }
    else
    {
      uint64_t v7 = sqlite3_bind_null(v3, 1);
    }
    uint64_t v2 = v7;

    if (!v2)
    {
      unint64_t v8 = sqlite3_expanded_sql(ppStmt);
      if (v8)
      {
        if (MediaAnalysisEnableDatabaseLog())
        {
          id v9 = VCPLogInstance();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 136315650;
            int v14 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v15 = 1024;
            int v16 = 1885;
            __int16 v17 = 2080;
            int v18 = v8;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
          }
        }
        sqlite3_free(v8);
      }
      unsigned int v10 = sqlite3_step(ppStmt);
      if (v10 == 101) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = v10;
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003C800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003C9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003CBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10003CBDC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _getBlacklistCountForLocalIdentifier:*(void *)(a1 + 40) count:*(void *)(*(void *)(a1 + 48) + 8) + 24];
}

void sub_10003CD68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003CD98(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "REPLACE INTO Blacklist (localIdentifier, date, count) VALUES ((?), (?), COALESCE((SELECT count FROM Blacklist WHERE localIdentifier=(?)), 0) + 1);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v3 = ppStmt;
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = v4;
    uint64_t v6 = v4
       ? sqlite3_bind_text(v3, 1, (const char *)[v4 UTF8String], -1, 0)
       : sqlite3_bind_null(v3, 1);
    uint64_t v2 = v6;

    if (!v2)
    {
      uint64_t v7 = ppStmt;
      id v8 = +[NSDate date];
      id v9 = v8;
      if (v8)
      {
        [v8 timeIntervalSinceReferenceDate];
        uint64_t v11 = sqlite3_bind_double(v7, 2, v10);
      }
      else
      {
        uint64_t v11 = sqlite3_bind_null(v7, 2);
      }
      uint64_t v2 = v11;

      if (!v2)
      {
        id v12 = ppStmt;
        id v13 = *(id *)(a1 + 40);
        int v14 = v13;
        uint64_t v15 = v13
            ? sqlite3_bind_text(v12, 3, (const char *)[v13 UTF8String], -1, 0)
            : sqlite3_bind_null(v12, 3);
        uint64_t v2 = v15;

        if (!v2)
        {
          int v16 = sqlite3_expanded_sql(ppStmt);
          if (v16)
          {
            if (MediaAnalysisEnableDatabaseLog())
            {
              __int16 v17 = VCPLogInstance();
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 136315650;
                uint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v23 = 1024;
                int v24 = 1939;
                __int16 v25 = 2080;
                int v26 = v16;
                _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
              }
            }
            sqlite3_free(v16);
          }
          unsigned int v18 = sqlite3_step(ppStmt);
          if (v18 == 101) {
            uint64_t v2 = 0;
          }
          else {
            uint64_t v2 = v18;
          }
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003CFCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003D168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003D194(uint64_t a1)
{
  int v21 = 0;
  if (![*(id *)(a1 + 32) _getBlacklistCountForLocalIdentifier:*(void *)(a1 + 40) count:&v21])
  {
    pStmt = 0;
    if (v21 < 2)
    {
      if (v21 != 1)
      {
        uint64_t v5 = 0;
LABEL_17:
        sqlite3_finalize(pStmt);
        return v5;
      }
      uint64_t v5 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "DELETE FROM Blacklist WHERE localIdentifier=(?);",
             -1,
             &pStmt,
             0);
      if (v5) {
        goto LABEL_17;
      }
      double v10 = pStmt;
      id v11 = *(id *)(a1 + 40);
      id v12 = v11;
      uint64_t v13 = v11
          ? sqlite3_bind_text(v10, 1, (const char *)[v11 UTF8String], -1, 0)
          : sqlite3_bind_null(v10, 1);
      uint64_t v5 = v13;

      if (v5) {
        goto LABEL_17;
      }
      uint64_t v15 = sqlite3_expanded_sql(pStmt);
      if (v15)
      {
        if (MediaAnalysisEnableDatabaseLog())
        {
          int v16 = VCPLogInstance();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 136315650;
            __int16 v23 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v24 = 1024;
            int v25 = 1981;
            __int16 v26 = 2080;
            BOOL v27 = v15;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
          }
        }
        sqlite3_free(v15);
      }
    }
    else
    {
      uint64_t v5 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "UPDATE Blacklist SET count=(?) WHERE localIdentifier=(?);",
             -1,
             &pStmt,
             0);
      if (v5) {
        goto LABEL_17;
      }
      uint64_t v5 = sqlite3_bind_int(pStmt, 1, v21 - 1);
      if (v5) {
        goto LABEL_17;
      }
      uint64_t v6 = pStmt;
      id v7 = *(id *)(a1 + 40);
      id v8 = v7;
      uint64_t v9 = v7
         ? sqlite3_bind_text(v6, 2, (const char *)[v7 UTF8String], -1, 0)
         : sqlite3_bind_null(v6, 2);
      uint64_t v5 = v9;

      if (v5) {
        goto LABEL_17;
      }
      __int16 v17 = sqlite3_expanded_sql(pStmt);
      if (v17)
      {
        if (MediaAnalysisEnableDatabaseLog())
        {
          unsigned int v18 = VCPLogInstance();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 136315650;
            __int16 v23 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v24 = 1024;
            int v25 = 1974;
            __int16 v26 = 2080;
            BOOL v27 = v17;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
          }
        }
        sqlite3_free(v17);
      }
    }
    unsigned int v19 = sqlite3_step(pStmt);
    if (v19 == 101) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = v19;
    }
    goto LABEL_17;
  }
  if ((int)MediaAnalysisLogLevel() >= 4)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v2, v3))
    {
      id v4 = *(const char **)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      __int16 v23 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "  [%@] Failed to query blacklist count", buf, 0xCu);
    }
  }
  return 0;
}

void sub_10003D500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003D680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003D6AC(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "DELETE FROM Blacklist WHERE localIdentifier=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    os_log_type_t v3 = ppStmt;
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = v4;
    uint64_t v6 = v4
       ? sqlite3_bind_text(v3, 1, (const char *)[v4 UTF8String], -1, 0)
       : sqlite3_bind_null(v3, 1);
    uint64_t v2 = v6;

    if (!v2)
    {
      id v7 = sqlite3_expanded_sql(ppStmt);
      if (v7)
      {
        if (MediaAnalysisEnableDatabaseLog())
        {
          id v8 = VCPLogInstance();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 136315650;
            uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v14 = 1024;
            int v15 = 1998;
            __int16 v16 = 2080;
            __int16 v17 = v7;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
          }
        }
        sqlite3_free(v7);
      }
      unsigned int v9 = sqlite3_step(ppStmt);
      if (v9 == 101) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = v9;
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003D830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003D99C(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "SELECT count(*) FROM Blacklist WHERE count >= (?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int(ppStmt, 1, *(_DWORD *)(a1 + 48));
    if (!v2)
    {
      os_log_type_t v3 = sqlite3_expanded_sql(ppStmt);
      if (v3)
      {
        id v4 = v3;
        if (MediaAnalysisEnableDatabaseLog())
        {
          uint64_t v5 = VCPLogInstance();
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 136315650;
            unsigned int v9 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v10 = 1024;
            int v11 = 2015;
            __int16 v12 = 2080;
            uint64_t v13 = v4;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
          }
        }
        sqlite3_free(v4);
      }
      uint64_t v2 = sqlite3_step(ppStmt);
      if (v2 == 100)
      {
        uint64_t v2 = 0;
        **(void **)(a1 + 40) = sqlite3_column_int(ppStmt, 0);
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

int sub_10003DB0C(id a1)
{
  return -19;
}

void sub_10003DCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003DD04(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "SELECT localIdentifier FROM Blacklist WHERE count=(?);",
         -1,
         &ppStmt,
         0);
  if (v2) {
    goto LABEL_3;
  }
  uint64_t v2 = sqlite3_bind_int(ppStmt, 1, *(_DWORD *)(a1 + 48));
  if (v2) {
    goto LABEL_3;
  }
  uint64_t v6 = sqlite3_expanded_sql(ppStmt);
  if (v6)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      id v7 = VCPLogInstance();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        __int16 v14 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v15 = 1024;
        int v16 = 2035;
        __int16 v17 = 2080;
        unsigned int v18 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v6);
  }
  uint64_t v2 = sqlite3_step(ppStmt);
  os_log_type_t v8 = VCPLogToOSLogType[4];
  while (v2 == 100)
  {
    unsigned int v9 = ppStmt;
    if (sqlite3_column_type(ppStmt, 0) == 5
      || (+[NSString stringWithUTF8String:sqlite3_column_text(v9, 0)],
          (__int16 v10 = objc_claimAutoreleasedReturnValue()) == 0))
    {
      if ((int)MediaAnalysisLogLevel() >= 4)
      {
        int v11 = VCPLogInstance();
        if (os_log_type_enabled(v11, v8))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, v8, "Detected bad local identifier in blacklist", buf, 2u);
        }
      }
      __int16 v10 = 0;
    }
    else
    {
      [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v10];
    }
    uint64_t v2 = sqlite3_step(ppStmt);
  }
  if (v2 && v2 != 101)
  {
LABEL_3:
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
    id v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = 0;
  }
  else
  {
    uint64_t v2 = 0;
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003DF6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003E044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003E1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003E1E8(void *a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(a1[4] + 24), "SELECT count(*) FROM ProcessingStatus WHERE taskID=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, a1[6]);
    if (!v2)
    {
      uint64_t v3 = sqlite3_expanded_sql(ppStmt);
      if (v3)
      {
        id v4 = v3;
        if (MediaAnalysisEnableDatabaseLog())
        {
          uint64_t v5 = VCPLogInstance();
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 136315650;
            __int16 v10 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v11 = 1024;
            int v12 = 2091;
            __int16 v13 = 2080;
            __int16 v14 = v4;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
          }
        }
        sqlite3_free(v4);
      }
      unsigned int v6 = sqlite3_step(ppStmt);
      if (v6 == 100)
      {
        *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = sqlite3_column_int(ppStmt, 0);
        unsigned int v6 = sqlite3_step(ppStmt);
      }
      if (v6 == 101) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = v6;
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003E4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003E4F8(void *a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(a1[4] + 24), "SELECT count(*) FROM ProcessingStatus WHERE taskID=(?) AND status=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, a1[6]);
    if (!v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, a1[7]);
      if (!v2)
      {
        uint64_t v3 = sqlite3_expanded_sql(ppStmt);
        if (v3)
        {
          id v4 = v3;
          if (MediaAnalysisEnableDatabaseLog())
          {
            uint64_t v5 = VCPLogInstance();
            if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 136315650;
              __int16 v10 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v11 = 1024;
              int v12 = 2117;
              __int16 v13 = 2080;
              __int16 v14 = v4;
              _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
            }
          }
          sqlite3_free(v4);
        }
        unsigned int v6 = sqlite3_step(ppStmt);
        if (v6 == 100)
        {
          *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = sqlite3_column_int(ppStmt, 0);
          unsigned int v6 = sqlite3_step(ppStmt);
        }
        if (v6 == 101) {
          uint64_t v2 = 0;
        }
        else {
          uint64_t v2 = v6;
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003E810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003E830(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "SELECT count(*) FROM ProcessingStatus WHERE taskID=(?) AND status=(?) AND attempts=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
    if (!v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, *(void *)(a1 + 56));
      if (!v2)
      {
        uint64_t v2 = sqlite3_bind_int(ppStmt, 3, *(_DWORD *)(a1 + 64));
        if (!v2)
        {
          uint64_t v3 = sqlite3_expanded_sql(ppStmt);
          if (v3)
          {
            id v4 = v3;
            if (MediaAnalysisEnableDatabaseLog())
            {
              uint64_t v5 = VCPLogInstance();
              if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 136315650;
                __int16 v10 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v11 = 1024;
                int v12 = 2144;
                __int16 v13 = 2080;
                __int16 v14 = v4;
                _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
              }
            }
            sqlite3_free(v4);
          }
          unsigned int v6 = sqlite3_step(ppStmt);
          if (v6 == 100)
          {
            *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sqlite3_column_int(ppStmt, 0);
            unsigned int v6 = sqlite3_step(ppStmt);
          }
          if (v6 == 101) {
            uint64_t v2 = 0;
          }
          else {
            uint64_t v2 = v6;
          }
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003EB6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003EBA4(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "SELECT attempts FROM ProcessingStatus WHERE taskID=(?) AND localIdentifier=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 56));
    if (!v2)
    {
      uint64_t v3 = ppStmt;
      id v4 = *(id *)(a1 + 40);
      uint64_t v5 = v4;
      uint64_t v6 = v4
         ? sqlite3_bind_text(v3, 2, (const char *)[v4 UTF8String], -1, 0)
         : sqlite3_bind_null(v3, 2);
      uint64_t v2 = v6;

      if (!v2)
      {
        id v7 = sqlite3_expanded_sql(ppStmt);
        if (v7)
        {
          if (MediaAnalysisEnableDatabaseLog())
          {
            os_log_type_t v8 = VCPLogInstance();
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 136315650;
              __int16 v13 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v14 = 1024;
              int v15 = 2170;
              __int16 v16 = 2080;
              __int16 v17 = v7;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
            }
          }
          sqlite3_free(v7);
        }
        uint64_t v9 = sqlite3_step(ppStmt);
        uint64_t v2 = v9;
        if (v9 == 100)
        {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = sqlite3_column_int(ppStmt, 0);
          uint64_t v2 = sqlite3_step(ppStmt);
          if (v2 == 101) {
            goto LABEL_17;
          }
        }
        else if (v9 == 101)
        {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
LABEL_17:
          uint64_t v2 = 0;
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003ED94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003EF40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003EF6C(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), (const char *)objc_msgSend(@"SELECT status, attempts, lastAttemptDate, nextAttemptDate FROM ProcessingStatus WHERE taskID=(?) AND localIdentifier=(?);",
                         "UTF8String"),
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
    if (!v2)
    {
      uint64_t v3 = ppStmt;
      id v4 = *(id *)(a1 + 40);
      uint64_t v5 = v4;
      uint64_t v6 = v4
         ? sqlite3_bind_text(v3, 2, (const char *)[v4 UTF8String], -1, 0)
         : sqlite3_bind_null(v3, 2);
      uint64_t v2 = v6;

      if (!v2)
      {
        id v7 = sqlite3_expanded_sql(ppStmt);
        if (v7)
        {
          if (MediaAnalysisEnableDatabaseLog())
          {
            os_log_type_t v8 = VCPLogInstance();
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 136315650;
              int v15 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v16 = 1024;
              int v17 = 2204;
              __int16 v18 = 2080;
              unsigned int v19 = v7;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
            }
          }
          sqlite3_free(v7);
        }
        unsigned int v9 = sqlite3_step(ppStmt);
        __int16 v10 = *(void **)(a1 + 56);
        if (v9 == 100)
        {
          if (v10) {
            **(void **)(a1 + 56) = sqlite3_column_int64(ppStmt, 0);
          }
          if (*(void *)(a1 + 64)) {
            **(_DWORD **)(a1 + 64) = sqlite3_column_int(ppStmt, 1);
          }
          if (*(void *)(a1 + 72))
          {
            sub_1000359D0(ppStmt, 2);
            **(void **)(a1 + 72) = (id)objc_claimAutoreleasedReturnValue();
          }
          if (*(void *)(a1 + 80))
          {
            sub_1000359D0(ppStmt, 3);
            **(void **)(a1 + 80) = (id)objc_claimAutoreleasedReturnValue();
          }
          unsigned int v9 = sqlite3_step(ppStmt);
        }
        else
        {
          if (v10) {
            *__int16 v10 = 0;
          }
          __int16 v11 = *(_DWORD **)(a1 + 64);
          if (v11) {
            _DWORD *v11 = 0;
          }
          if (*(void *)(a1 + 72))
          {
            **(void **)(a1 + 72) = +[NSDate now];
          }
          if (*(void *)(a1 + 80))
          {
            **(void **)(a1 + 80) = +[NSDate now];
          }
        }
        if (v9 == 101) {
          uint64_t v2 = 0;
        }
        else {
          uint64_t v2 = v9;
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003F210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003F554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003F574(void *a1)
{
  ppStmt = 0;
  uint64_t v2 = +[NSString stringWithFormat:@"SELECT count(*) FROM ProcessingStatus WHERE taskID=(?) AND status=(?) AND nextAttemptDate<(?)"];;
  uint64_t v3 = *(sqlite3 **)(a1[4] + 24);
  id v4 = v2;
  uint64_t v5 = sqlite3_prepare_v2(v3, (const char *)[v4 UTF8String], -1, &ppStmt, 0);
  if (!v5)
  {
    uint64_t v5 = sqlite3_bind_int64(ppStmt, 1, a1[6]);
    if (!v5)
    {
      uint64_t v5 = sqlite3_bind_int64(ppStmt, 2, a1[7]);
      if (!v5)
      {
        uint64_t v6 = ppStmt;
        id v7 = +[NSDate now];
        os_log_type_t v8 = v7;
        if (v7)
        {
          [v7 timeIntervalSinceReferenceDate];
          uint64_t v10 = sqlite3_bind_double(v6, 3, v9);
        }
        else
        {
          uint64_t v10 = sqlite3_bind_null(v6, 3);
        }
        uint64_t v5 = v10;

        if (!v5)
        {
          LODWORD(v5) = sqlite3_step(ppStmt);
          __int16 v11 = sqlite3_expanded_sql(ppStmt);
          if (v11)
          {
            if (MediaAnalysisEnableDatabaseLog())
            {
              int v12 = VCPLogInstance();
              if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 136315650;
                __int16 v16 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v17 = 1024;
                int v18 = 2252;
                __int16 v19 = 2080;
                __int16 v20 = v11;
                _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
              }
            }
            sqlite3_free(v11);
          }
          if (v5 == 100)
          {
            *(void *)(*(void *)(a1[5] + 8) + 24) = sqlite3_column_int(ppStmt, 0);
            LODWORD(v5) = sqlite3_step(ppStmt);
          }
          if (v5 == 101) {
            uint64_t v5 = 0;
          }
          else {
            uint64_t v5 = v5;
          }
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  if (v5) {
    *(void *)(*(void *)(a1[5] + 8) + 24) = 0;
  }

  return v5;
}

void sub_10003F7A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003F974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003F9A0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  ppStmt = 0;
  uint64_t v3 = +[NSMutableString stringWithFormat:@"SELECT localIdentifier FROM ProcessingStatus "];
  id v4 = +[NSMutableString stringWithFormat:@"WHERE taskID=(?) AND status=(?) AND nextAttemptDate<(?) "];
  uint64_t v5 = v4;
  if (*(void *)(a1 + 32)) {
    objc_msgSend(v4, "appendString:");
  }
  [v3 appendString:v5];
  [v3 appendFormat:@"ORDER BY id ASC LIMIT (?);"];
  uint64_t v6 = *(sqlite3 **)(*(void *)(a1 + 40) + 24);
  id v7 = v3;
  uint64_t v8 = sqlite3_prepare_v2(v6, (const char *)[v7 UTF8String], -1, &ppStmt, 0);
  if (v8) {
    goto LABEL_11;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
  if (v8) {
    goto LABEL_11;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 2, *(void *)(a1 + 56));
  if (v8) {
    goto LABEL_11;
  }
  double v9 = ppStmt;
  id v10 = +[NSDate now];
  __int16 v11 = v10;
  if (v10)
  {
    [v10 timeIntervalSinceReferenceDate];
    uint64_t v13 = sqlite3_bind_double(v9, 3, v12);
  }
  else
  {
    uint64_t v13 = sqlite3_bind_null(v9, 3);
  }
  uint64_t v8 = v13;

  if (v8) {
    goto LABEL_11;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 4, *(void *)(a1 + 64));
  if (v8) {
    goto LABEL_11;
  }
  __int16 v16 = sqlite3_expanded_sql(ppStmt);
  if (v16)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      __int16 v17 = VCPLogInstance();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        __int16 v24 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v25 = 1024;
        int v26 = 2291;
        __int16 v27 = 2080;
        os_log_type_t v28 = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v16);
  }
  uint64_t v8 = sqlite3_step(ppStmt);
  os_log_type_t v18 = VCPLogToOSLogType[4];
  while (v8 == 100)
  {
    __int16 v19 = ppStmt;
    if (sqlite3_column_type(ppStmt, 0) == 5
      || (+[NSString stringWithUTF8String:sqlite3_column_text(v19, 0)], (__int16 v20 = objc_claimAutoreleasedReturnValue()) == 0))
    {
      if ((int)MediaAnalysisLogLevel() >= 4)
      {
        int v21 = VCPLogInstance();
        if (os_log_type_enabled(v21, v18))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, v18, "Detected bad localIdentifier in ProcessingStatus", buf, 2u);
        }
      }
      __int16 v20 = 0;
    }
    else
    {
      [v2 addObject:v20];
    }
    uint64_t v8 = sqlite3_step(ppStmt);
  }
  if (v8 && v8 != 101)
  {
LABEL_11:

    id v2 = 0;
  }
  else
  {
    uint64_t v8 = 0;
  }
  sqlite3_finalize(ppStmt);
  id v14 = v2;
  **(void **)(a1 + 72) = v14;

  return v8;
}

void sub_10003FD1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003FEF0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  ppStmt = 0;
  uint64_t v3 = +[NSString stringWithFormat:@"SELECT localIdentifier FROM ProcessingStatus WHERE taskID=(?) AND nextAttemptDate<(?) ORDER BY id ASC LIMIT (?)"];;
  id v4 = *(sqlite3 **)(*(void *)(a1 + 32) + 24);
  id v5 = v3;
  uint64_t v6 = sqlite3_prepare_v2(v4, (const char *)[v5 UTF8String], -1, &ppStmt, 0);
  if (v6) {
    goto LABEL_8;
  }
  uint64_t v6 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 40));
  if (v6) {
    goto LABEL_8;
  }
  id v7 = ppStmt;
  id v8 = +[NSDate now];
  double v9 = v8;
  if (v8)
  {
    [v8 timeIntervalSinceReferenceDate];
    uint64_t v11 = sqlite3_bind_double(v7, 2, v10);
  }
  else
  {
    uint64_t v11 = sqlite3_bind_null(v7, 2);
  }
  uint64_t v6 = v11;

  if (v6) {
    goto LABEL_8;
  }
  uint64_t v6 = sqlite3_bind_int64(ppStmt, 3, *(void *)(a1 + 48));
  if (v6) {
    goto LABEL_8;
  }
  id v14 = sqlite3_expanded_sql(ppStmt);
  if (v14)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      int v15 = VCPLogInstance();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        uint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v23 = 1024;
        int v24 = 2339;
        __int16 v25 = 2080;
        int v26 = v14;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v14);
  }
  uint64_t v6 = sqlite3_step(ppStmt);
  os_log_type_t v16 = VCPLogToOSLogType[4];
  while (v6 == 100)
  {
    __int16 v17 = ppStmt;
    if (sqlite3_column_type(ppStmt, 0) == 5
      || (+[NSString stringWithUTF8String:sqlite3_column_text(v17, 0)], (os_log_type_t v18 = objc_claimAutoreleasedReturnValue()) == 0))
    {
      if ((int)MediaAnalysisLogLevel() >= 4)
      {
        __int16 v19 = VCPLogInstance();
        if (os_log_type_enabled(v19, v16))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, v16, "Detected bad localIdentifier in ProcessingStatus", buf, 2u);
        }
      }
      os_log_type_t v18 = 0;
    }
    else
    {
      [v2 addObject:v18];
    }
    uint64_t v6 = sqlite3_step(ppStmt);
  }
  if (v6 && v6 != 101)
  {
LABEL_8:

    id v2 = 0;
  }
  else
  {
    uint64_t v6 = 0;
  }
  sqlite3_finalize(ppStmt);
  id v12 = v2;
  **(void **)(a1 + 56) = v12;

  return v6;
}

void sub_100040204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100040410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100040448(uint64_t a1)
{
  id v28 = +[NSMutableArray array];
  id v2 = +[NSMutableString stringWithFormat:@"SELECT localIdentifier FROM ProcessingStatus "];
  uint64_t v3 = +[NSMutableString stringWithFormat:](NSMutableString, "stringWithFormat:", @"WHERE taskID=(?) AND status IN (?");
  for (unint64_t i = 1; i < (unint64_t)[*(id *)(a1 + 32) count]; ++i)
    [v3 appendString:@", ?"];
  [v3 appendFormat:@" AND nextAttemptDate<(?) "]);
  if (*(void *)(a1 + 40)) {
    objc_msgSend(v3, "appendString:");
  }
  [v2 appendString:v3];
  [v2 appendFormat:@"ORDER BY id ASC LIMIT (?);"];
  ppStmt = 0;
  id v5 = *(sqlite3 **)(*(void *)(a1 + 48) + 24);
  id v6 = v2;
  uint64_t v7 = sqlite3_prepare_v2(v5, (const char *)[v6 UTF8String], -1, &ppStmt, 0);
  if (v7) {
    goto LABEL_24;
  }
  uint64_t v7 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 56));
  if (v7) {
    goto LABEL_24;
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v8 = *(id *)(a1 + 32);
  id v9 = [v8 countByEnumeratingWithState:&v29 objects:v40 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v30;
    int v11 = 2;
    while (2)
    {
      id v12 = 0;
      int v13 = v11;
      do
      {
        if (*(void *)v30 != v10) {
          objc_enumerationMutation(v8);
        }
        uint64_t v7 = sqlite3_bind_int64(ppStmt, v13 + v12, (int)[*(id *)(*((void *)&v29 + 1) + 8 * (void)v12) intValue]);
        if (v7)
        {

          goto LABEL_24;
        }
        id v12 = (char *)v12 + 1;
      }
      while (v9 != v12);
      id v9 = [v8 countByEnumeratingWithState:&v29 objects:v40 count:16];
      int v11 = v13 + v12;
      if (v9) {
        continue;
      }
      break;
    }
    int v14 = v13 + v12;
  }
  else
  {
    int v14 = 2;
  }

  int v15 = ppStmt;
  id v16 = +[NSDate now];
  __int16 v17 = v16;
  if (v16)
  {
    [v16 timeIntervalSinceReferenceDate];
    uint64_t v19 = sqlite3_bind_double(v15, v14, v18);
  }
  else
  {
    uint64_t v19 = sqlite3_bind_null(v15, v14);
  }
  uint64_t v7 = v19;

  if (v7) {
    goto LABEL_24;
  }
  uint64_t v7 = sqlite3_bind_int64(ppStmt, v14 + 1, *(void *)(a1 + 64));
  if (v7) {
    goto LABEL_24;
  }
  uint64_t v22 = sqlite3_expanded_sql(ppStmt);
  if (v22)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      __int16 v23 = VCPLogInstance();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        id v35 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v36 = 1024;
        int v37 = 2389;
        __int16 v38 = 2080;
        id v39 = v22;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v22);
  }
  uint64_t v7 = sqlite3_step(ppStmt);
  os_log_type_t v24 = VCPLogToOSLogType[4];
  while (v7 == 100)
  {
    __int16 v25 = ppStmt;
    if (sqlite3_column_type(ppStmt, 0) == 5
      || (+[NSString stringWithUTF8String:sqlite3_column_text(v25, 0)], (int v26 = objc_claimAutoreleasedReturnValue()) == 0))
    {
      if ((int)MediaAnalysisLogLevel() >= 4)
      {
        __int16 v27 = VCPLogInstance();
        if (os_log_type_enabled(v27, v24))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, v24, "Detected bad localIdentifier in ProcessingStatus", buf, 2u);
        }
      }
      int v26 = 0;
    }
    else
    {
      [v28 addObject:v26];
    }
    uint64_t v7 = sqlite3_step(ppStmt);
  }
  if (v7 && v7 != 101)
  {
LABEL_24:

    id v28 = 0;
  }
  else
  {
    uint64_t v7 = 0;
  }
  sqlite3_finalize(ppStmt);
  id v20 = v28;
  **(void **)(a1 + 72) = v20;

  return v7;
}

void sub_1000408C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100040B08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100040B40(uint64_t a1)
{
  id v28 = +[NSMutableArray array];
  id v2 = +[NSMutableString stringWithFormat:@"SELECT localIdentifier FROM ProcessingStatus "];
  uint64_t v3 = +[NSMutableString stringWithFormat:](NSMutableString, "stringWithFormat:", @"WHERE taskID=(?) AND status NOT IN (?");
  for (unint64_t i = 1; i < (unint64_t)[*(id *)(a1 + 32) count]; ++i)
    [v3 appendString:@", ?"];
  [v3 appendFormat:@" AND nextAttemptDate<(?) "]);
  if (*(void *)(a1 + 40)) {
    objc_msgSend(v3, "appendString:");
  }
  [v2 appendString:v3];
  [v2 appendFormat:@"ORDER BY id ASC LIMIT (?);"];
  ppStmt = 0;
  id v5 = *(sqlite3 **)(*(void *)(a1 + 48) + 24);
  id v6 = v2;
  uint64_t v7 = sqlite3_prepare_v2(v5, (const char *)[v6 UTF8String], -1, &ppStmt, 0);
  if (v7) {
    goto LABEL_24;
  }
  uint64_t v7 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 56));
  if (v7) {
    goto LABEL_24;
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v8 = *(id *)(a1 + 32);
  id v9 = [v8 countByEnumeratingWithState:&v29 objects:v40 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v30;
    int v11 = 2;
    while (2)
    {
      id v12 = 0;
      int v13 = v11;
      do
      {
        if (*(void *)v30 != v10) {
          objc_enumerationMutation(v8);
        }
        uint64_t v7 = sqlite3_bind_int64(ppStmt, v13 + v12, (int)[*(id *)(*((void *)&v29 + 1) + 8 * (void)v12) intValue]);
        if (v7)
        {

          goto LABEL_24;
        }
        id v12 = (char *)v12 + 1;
      }
      while (v9 != v12);
      id v9 = [v8 countByEnumeratingWithState:&v29 objects:v40 count:16];
      int v11 = v13 + v12;
      if (v9) {
        continue;
      }
      break;
    }
    int v14 = v13 + v12;
  }
  else
  {
    int v14 = 2;
  }

  int v15 = ppStmt;
  id v16 = +[NSDate now];
  __int16 v17 = v16;
  if (v16)
  {
    [v16 timeIntervalSinceReferenceDate];
    uint64_t v19 = sqlite3_bind_double(v15, v14, v18);
  }
  else
  {
    uint64_t v19 = sqlite3_bind_null(v15, v14);
  }
  uint64_t v7 = v19;

  if (v7) {
    goto LABEL_24;
  }
  uint64_t v7 = sqlite3_bind_int64(ppStmt, v14 + 1, *(void *)(a1 + 64));
  if (v7) {
    goto LABEL_24;
  }
  uint64_t v22 = sqlite3_expanded_sql(ppStmt);
  if (v22)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      __int16 v23 = VCPLogInstance();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        id v35 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v36 = 1024;
        int v37 = 2450;
        __int16 v38 = 2080;
        id v39 = v22;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v22);
  }
  uint64_t v7 = sqlite3_step(ppStmt);
  os_log_type_t v24 = VCPLogToOSLogType[4];
  while (v7 == 100)
  {
    __int16 v25 = ppStmt;
    if (sqlite3_column_type(ppStmt, 0) == 5
      || (+[NSString stringWithUTF8String:sqlite3_column_text(v25, 0)], (int v26 = objc_claimAutoreleasedReturnValue()) == 0))
    {
      if ((int)MediaAnalysisLogLevel() >= 4)
      {
        __int16 v27 = VCPLogInstance();
        if (os_log_type_enabled(v27, v24))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, v24, "Detected bad localIdentifier in ProcessingStatus", buf, 2u);
        }
      }
      int v26 = 0;
    }
    else
    {
      [v28 addObject:v26];
    }
    uint64_t v7 = sqlite3_step(ppStmt);
  }
  if (v7 && v7 != 101)
  {
LABEL_24:

    id v28 = 0;
  }
  else
  {
    uint64_t v7 = 0;
  }
  sqlite3_finalize(ppStmt);
  id v20 = v28;
  **(void **)(a1 + 72) = v20;

  return v7;
}

void sub_100040FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1000411EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100041218(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  ppStmt = 0;
  uint64_t v3 = +[NSMutableString stringWithFormat:@"SELECT localIdentifier FROM ProcessingStatus "];
  id v4 = +[NSMutableString stringWithFormat:@"WHERE taskID=(?) AND status=(?) AND attempts=(?) "];
  id v5 = v4;
  if (*(void *)(a1 + 32)) {
    objc_msgSend(v4, "appendString:");
  }
  [v3 appendString:v5];
  [v3 appendFormat:@"ORDER BY id ASC LIMIT (?);"];
  id v6 = *(sqlite3 **)(*(void *)(a1 + 40) + 24);
  id v7 = v3;
  uint64_t v8 = sqlite3_prepare_v2(v6, (const char *)[v7 UTF8String], -1, &ppStmt, 0);
  if (v8) {
    goto LABEL_8;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
  if (v8) {
    goto LABEL_8;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 2, *(void *)(a1 + 56));
  if (v8) {
    goto LABEL_8;
  }
  uint64_t v8 = sqlite3_bind_int(ppStmt, 3, *(_DWORD *)(a1 + 80));
  if (v8) {
    goto LABEL_8;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 4, *(void *)(a1 + 64));
  if (v8) {
    goto LABEL_8;
  }
  int v11 = sqlite3_expanded_sql(ppStmt);
  if (v11)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      id v12 = VCPLogInstance();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v20 = 1024;
        int v21 = 2507;
        __int16 v22 = 2080;
        __int16 v23 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v11);
  }
  uint64_t v8 = sqlite3_step(ppStmt);
  os_log_type_t v13 = VCPLogToOSLogType[4];
  while (v8 == 100)
  {
    int v14 = ppStmt;
    if (sqlite3_column_type(ppStmt, 0) == 5
      || (+[NSString stringWithUTF8String:sqlite3_column_text(v14, 0)], (int v15 = objc_claimAutoreleasedReturnValue()) == 0))
    {
      if ((int)MediaAnalysisLogLevel() >= 4)
      {
        id v16 = VCPLogInstance();
        if (os_log_type_enabled(v16, v13))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, v13, "Detected bad localIdentifier in ProcessingStatus", buf, 2u);
        }
      }
      int v15 = 0;
    }
    else
    {
      [v2 addObject:v15];
    }
    uint64_t v8 = sqlite3_step(ppStmt);
  }
  if (v8 && v8 != 101)
  {
LABEL_8:

    id v2 = 0;
  }
  else
  {
    uint64_t v8 = 0;
  }
  sqlite3_finalize(ppStmt);
  id v9 = v2;
  **(void **)(a1 + 72) = v9;

  return v8;
}

void sub_100041558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100041744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100041770(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  ppStmt = 0;
  uint64_t v3 = +[NSMutableString stringWithFormat:@"SELECT localIdentifier FROM ProcessingStatus "];
  id v4 = +[NSMutableString stringWithFormat:@"WHERE taskID=(?) AND status=(?) "];
  id v5 = v4;
  if (*(void *)(a1 + 32)) {
    objc_msgSend(v4, "appendString:");
  }
  [v3 appendString:v5];
  [v3 appendFormat:@"ORDER BY id ASC;"];
  id v6 = *(sqlite3 **)(*(void *)(a1 + 40) + 24);
  id v7 = v3;
  uint64_t v8 = sqlite3_prepare_v2(v6, (const char *)[v7 UTF8String], -1, &ppStmt, 0);
  if (v8) {
    goto LABEL_6;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
  if (v8) {
    goto LABEL_6;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 2, *(void *)(a1 + 56));
  if (v8) {
    goto LABEL_6;
  }
  int v11 = sqlite3_expanded_sql(ppStmt);
  if (v11)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      id v12 = VCPLogInstance();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v20 = 1024;
        int v21 = 2562;
        __int16 v22 = 2080;
        __int16 v23 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v11);
  }
  uint64_t v8 = sqlite3_step(ppStmt);
  os_log_type_t v13 = VCPLogToOSLogType[4];
  while (v8 == 100)
  {
    int v14 = ppStmt;
    if (sqlite3_column_type(ppStmt, 0) == 5
      || (+[NSString stringWithUTF8String:sqlite3_column_text(v14, 0)], (int v15 = objc_claimAutoreleasedReturnValue()) == 0))
    {
      if ((int)MediaAnalysisLogLevel() >= 4)
      {
        id v16 = VCPLogInstance();
        if (os_log_type_enabled(v16, v13))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, v13, "Detected bad localIdentifier in ProcessingStatus", buf, 2u);
        }
      }
      int v15 = 0;
    }
    else
    {
      [v2 addObject:v15];
    }
    uint64_t v8 = sqlite3_step(ppStmt);
  }
  if (v8 && v8 != 101)
  {
LABEL_6:

    id v2 = 0;
  }
  else
  {
    uint64_t v8 = 0;
  }
  sqlite3_finalize(ppStmt);
  id v9 = v2;
  **(void **)(a1 + 64) = v9;

  return v8;
}

void sub_100041A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100041C94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100041CCC(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  ppStmt = 0;
  uint64_t v3 = +[NSMutableString stringWithFormat:@"SELECT localIdentifier FROM ProcessingStatus "];
  id v4 = +[NSMutableString stringWithFormat:@"WHERE taskID=(?) AND status=(?) AND errorCode=(?) AND lastAttemptDate>=(?)"];
  id v5 = v4;
  if (*(void *)(a1 + 32)) {
    objc_msgSend(v4, "appendString:");
  }
  [v3 appendString:v5];
  [v3 appendFormat:@"ORDER BY id ASC;"];
  id v6 = *(sqlite3 **)(*(void *)(a1 + 40) + 24);
  id v7 = v3;
  uint64_t v8 = sqlite3_prepare_v2(v6, (const char *)[v7 UTF8String], -1, &ppStmt, 0);
  if (v8) {
    goto LABEL_8;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 56));
  if (v8) {
    goto LABEL_8;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 2, *(void *)(a1 + 64));
  if (v8) {
    goto LABEL_8;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 3, *(void *)(a1 + 72));
  if (v8) {
    goto LABEL_8;
  }
  uint64_t v8 = sub_100034EF8(ppStmt, 4, *(void **)(a1 + 48));
  if (v8) {
    goto LABEL_8;
  }
  int v11 = sqlite3_expanded_sql(ppStmt);
  if (v11)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      id v12 = VCPLogInstance();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v20 = 1024;
        int v21 = 2617;
        __int16 v22 = 2080;
        __int16 v23 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v11);
  }
  uint64_t v8 = sqlite3_step(ppStmt);
  os_log_type_t v13 = VCPLogToOSLogType[4];
  while (v8 == 100)
  {
    int v14 = ppStmt;
    if (sqlite3_column_type(ppStmt, 0) == 5
      || (+[NSString stringWithUTF8String:sqlite3_column_text(v14, 0)], (int v15 = objc_claimAutoreleasedReturnValue()) == 0))
    {
      if ((int)MediaAnalysisLogLevel() >= 4)
      {
        id v16 = VCPLogInstance();
        if (os_log_type_enabled(v16, v13))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, v13, "Detected bad localIdentifier in ProcessingStatus", buf, 2u);
        }
      }
      int v15 = 0;
    }
    else
    {
      [v2 addObject:v15];
    }
    uint64_t v8 = sqlite3_step(ppStmt);
  }
  if (v8 && v8 != 101)
  {
LABEL_8:

    id v2 = 0;
  }
  else
  {
    uint64_t v8 = 0;
  }
  sqlite3_finalize(ppStmt);
  id v9 = v2;
  **(void **)(a1 + 80) = v9;

  return v8;
}

void sub_10004200C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000421FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100042228(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), (const char *)objc_msgSend(@"SELECT errorCode, errorLine FROM ProcessingStatus WHERE taskID=(?) AND localIdentifier=(?);",
                         "UTF8String"),
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
    if (!v2)
    {
      uint64_t v3 = ppStmt;
      id v4 = *(id *)(a1 + 40);
      id v5 = v4;
      uint64_t v6 = v4
         ? sqlite3_bind_text(v3, 2, (const char *)[v4 UTF8String], -1, 0)
         : sqlite3_bind_null(v3, 2);
      uint64_t v2 = v6;

      if (!v2)
      {
        id v7 = sqlite3_expanded_sql(ppStmt);
        if (v7)
        {
          if (MediaAnalysisEnableDatabaseLog())
          {
            uint64_t v8 = VCPLogInstance();
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 136315650;
              os_log_type_t v13 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v14 = 1024;
              int v15 = 2668;
              __int16 v16 = 2080;
              __int16 v17 = v7;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
            }
          }
          sqlite3_free(v7);
        }
        unsigned int v9 = sqlite3_step(ppStmt);
        if (v9 == 100)
        {
          **(void **)(a1 + 56) = sqlite3_column_int64(ppStmt, 0);
          **(void **)(a1 + 64) = sqlite3_column_int64(ppStmt, 1);
          unsigned int v9 = sqlite3_step(ppStmt);
        }
        if (v9 == 101) {
          uint64_t v2 = 0;
        }
        else {
          uint64_t v2 = v9;
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100042410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000425C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100042600(uint64_t a1)
{
  uint64_t v2 = +[NSMutableDictionary dictionary];
  ppStmt = 0;
  uint64_t v3 = +[NSMutableString stringWithFormat:@"SELECT errorCode, count(*) FROM ProcessingStatus "];
  id v4 = +[NSMutableString stringWithFormat:@"WHERE taskID=(?) AND lastAttemptDate>=(?) "];
  id v5 = v4;
  if (*(void *)(a1 + 32)) {
    objc_msgSend(v4, "appendString:");
  }
  [v3 appendString:v5];
  [v3 appendFormat:@"GROUP BY errorCode;"];
  uint64_t v6 = *(sqlite3 **)(*(void *)(a1 + 40) + 24);
  id v7 = v3;
  uint64_t v8 = sqlite3_prepare_v2(v6, (const char *)[v7 UTF8String], -1, &ppStmt, 0);
  if (v8) {
    goto LABEL_9;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 56));
  if (v8) {
    goto LABEL_9;
  }
  unsigned int v9 = ppStmt;
  id v10 = *(id *)(a1 + 48);
  int v11 = v10;
  if (v10)
  {
    [v10 timeIntervalSinceReferenceDate];
    uint64_t v13 = sqlite3_bind_double(v9, 2, v12);
  }
  else
  {
    uint64_t v13 = sqlite3_bind_null(v9, 2);
  }
  uint64_t v8 = v13;

  if (v8) {
    goto LABEL_9;
  }
  __int16 v16 = sqlite3_expanded_sql(ppStmt);
  if (v16)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      __int16 v17 = VCPLogInstance();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        __int16 v25 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v26 = 1024;
        LODWORD(v27[0]) = 2706;
        WORD2(v27[0]) = 2080;
        *(void *)((char *)v27 + 6) = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v16);
  }
  uint64_t v8 = sqlite3_step(ppStmt);
  os_log_type_t v18 = VCPLogToOSLogType[4];
  while (v8 == 100)
  {
    unint64_t v19 = sqlite3_column_int64(ppStmt, 0);
    sqlite3_int64 v20 = sqlite3_column_int64(ppStmt, 1);
    if (v19 < 0x63)
    {
      int v21 = +[NSNumber numberWithLongLong:v20];
      __int16 v22 = +[NSNumber numberWithLongLong:v19];
      [v2 setObject:v21 forKey:v22];
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() < 4) {
        goto LABEL_25;
      }
      int v21 = VCPLogInstance();
      if (os_log_type_enabled(v21, v18))
      {
        *(_DWORD *)long long buf = 134218240;
        __int16 v25 = (const char *)v19;
        __int16 v26 = 2048;
        v27[0] = v20;
        _os_log_impl((void *)&_mh_execute_header, v21, v18, "Detected bad errorCode %lld in ProcessingStatus with count %lld", buf, 0x16u);
      }
    }

LABEL_25:
    uint64_t v8 = sqlite3_step(ppStmt);
  }
  if (!v8 || v8 == 101)
  {
    uint64_t v8 = 0;
    goto LABEL_10;
  }
LABEL_9:

  uint64_t v2 = 0;
LABEL_10:
  sqlite3_finalize(ppStmt);
  id v14 = v2;
  **(void **)(a1 + 64) = v14;

  return v8;
}

void sub_100042968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100042BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100042C54(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "REPLACE INTO ProcessingStatus (taskID, localIdentifier, lastAttemptDate, nextAttemptDate, errorCode, errorLine, mediaType, mediaSubtypes, attempts, status) VALUES ((?), (?), (?), (?), (?), (?), (?), (?), (?), (?));",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 64));
    if (!v2)
    {
      uint64_t v3 = ppStmt;
      id v4 = [*(id *)(a1 + 40) localIdentifier];
      id v5 = v4;
      uint64_t v6 = v4
         ? sqlite3_bind_text(v3, 2, (const char *)[v4 UTF8String], -1, 0)
         : sqlite3_bind_null(v3, 2);
      uint64_t v2 = v6;

      if (!v2)
      {
        id v7 = ppStmt;
        id v8 = *(id *)(a1 + 48);
        unsigned int v9 = v8;
        if (v8)
        {
          [v8 timeIntervalSinceReferenceDate];
          uint64_t v11 = sqlite3_bind_double(v7, 3, v10);
        }
        else
        {
          uint64_t v11 = sqlite3_bind_null(v7, 3);
        }
        uint64_t v2 = v11;

        if (!v2)
        {
          uint64_t v2 = sub_100034EF8(ppStmt, 4, *(void **)(a1 + 56));
          if (!v2)
          {
            uint64_t v2 = sqlite3_bind_int64(ppStmt, 5, *(void *)(a1 + 72));
            if (!v2)
            {
              uint64_t v2 = sqlite3_bind_int64(ppStmt, 6, *(void *)(a1 + 80));
              if (!v2)
              {
                uint64_t v2 = sqlite3_bind_int64(ppStmt, 7, *(void *)(a1 + 88));
                if (!v2)
                {
                  uint64_t v2 = sqlite3_bind_int64(ppStmt, 8, *(void *)(a1 + 96));
                  if (!v2)
                  {
                    uint64_t v2 = sqlite3_bind_int64(ppStmt, 9, *(void *)(a1 + 104));
                    if (!v2)
                    {
                      uint64_t v2 = sqlite3_bind_int64(ppStmt, 10, *(void *)(a1 + 112));
                      if (!v2)
                      {
                        double v12 = sqlite3_expanded_sql(ppStmt);
                        if (v12)
                        {
                          if (MediaAnalysisEnableDatabaseLog())
                          {
                            uint64_t v13 = VCPLogInstance();
                            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
                            {
                              *(_DWORD *)long long buf = 136315650;
                              os_log_type_t v18 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                              __int16 v19 = 1024;
                              int v20 = 2759;
                              __int16 v21 = 2080;
                              __int16 v22 = v12;
                              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
                            }
                          }
                          sqlite3_free(v12);
                        }
                        unsigned int v14 = sqlite3_step(ppStmt);
                        if (v14 == 101) {
                          uint64_t v2 = 0;
                        }
                        else {
                          uint64_t v2 = v14;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100042EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000430E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100043110(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "DELETE FROM ProcessingStatus WHERE taskID=(?) AND localIdentifier=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
    if (!v2)
    {
      uint64_t v3 = ppStmt;
      id v4 = *(id *)(a1 + 40);
      id v5 = v4;
      uint64_t v6 = v4
         ? sqlite3_bind_text(v3, 2, (const char *)[v4 UTF8String], -1, 0)
         : sqlite3_bind_null(v3, 2);
      uint64_t v2 = v6;

      if (!v2)
      {
        id v7 = sqlite3_expanded_sql(ppStmt);
        if (v7)
        {
          if (MediaAnalysisEnableDatabaseLog())
          {
            id v8 = VCPLogInstance();
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 136315650;
              uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v14 = 1024;
              int v15 = 2812;
              __int16 v16 = 2080;
              __int16 v17 = v7;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
            }
          }
          sqlite3_free(v7);
        }
        unsigned int v9 = sqlite3_step(ppStmt);
        if (v9 == 101) {
          uint64_t v2 = 0;
        }
        else {
          uint64_t v2 = v9;
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_1000432AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10004340C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeAllProcessingStatusForTaskID:*(void *)(a1 + 40)];
}

uint64_t sub_100043574(void *a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(a1[4] + 24), "DELETE FROM ProcessingStatus WHERE taskID=(?) AND mediaType=(?) AND mediaSubtypes=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, a1[5]);
    if (!v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, a1[6]);
      if (!v2)
      {
        uint64_t v2 = sqlite3_bind_int64(ppStmt, 3, a1[7]);
        if (!v2)
        {
          uint64_t v3 = sqlite3_expanded_sql(ppStmt);
          if (v3)
          {
            id v4 = v3;
            if (MediaAnalysisEnableDatabaseLog())
            {
              id v5 = VCPLogInstance();
              if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 136315650;
                double v10 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v11 = 1024;
                int v12 = 2840;
                __int16 v13 = 2080;
                __int16 v14 = v4;
                _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
              }
            }
            sqlite3_free(v4);
          }
          unsigned int v6 = sqlite3_step(ppStmt);
          if (v6 == 101) {
            uint64_t v2 = 0;
          }
          else {
            uint64_t v2 = v6;
          }
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_1000438B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000438EC(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "UPDATE ProcessingStatus SET status=(?), nextAttemptDate=(?), errorCode=(?), errorLine=(?) WHERE taskID=(?) AND localIdentifier=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 56));
    if (!v2)
    {
      uint64_t v3 = ppStmt;
      id v4 = *(id *)(a1 + 40);
      id v5 = v4;
      if (v4)
      {
        [v4 timeIntervalSinceReferenceDate];
        uint64_t v7 = sqlite3_bind_double(v3, 2, v6);
      }
      else
      {
        uint64_t v7 = sqlite3_bind_null(v3, 2);
      }
      uint64_t v2 = v7;

      if (!v2)
      {
        uint64_t v2 = sqlite3_bind_int64(ppStmt, 3, *(void *)(a1 + 64));
        if (!v2)
        {
          uint64_t v2 = sqlite3_bind_int64(ppStmt, 4, *(void *)(a1 + 72));
          if (!v2)
          {
            uint64_t v2 = sqlite3_bind_int64(ppStmt, 5, *(void *)(a1 + 80));
            if (!v2)
            {
              uint64_t v2 = sub_1000334B8(ppStmt, 6, *(void **)(a1 + 48));
              if (!v2)
              {
                id v8 = sqlite3_expanded_sql(ppStmt);
                if (v8)
                {
                  if (MediaAnalysisEnableDatabaseLog())
                  {
                    unsigned int v9 = VCPLogInstance();
                    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)long long buf = 136315650;
                      __int16 v14 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                      __int16 v15 = 1024;
                      int v16 = 2868;
                      __int16 v17 = 2080;
                      os_log_type_t v18 = v8;
                      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
                    }
                  }
                  sqlite3_free(v8);
                }
                unsigned int v10 = sqlite3_step(ppStmt);
                if (v10 == 101) {
                  uint64_t v2 = 0;
                }
                else {
                  uint64_t v2 = v10;
                }
              }
            }
          }
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100043AE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100043C84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100043CB4(void *a1)
{
  ppStmt = 0;
  uint64_t v2 = +[NSMutableString stringWithFormat:@"UPDATE ProcessingStatus SET status=(?) "];
  uint64_t v3 = +[NSMutableString stringWithFormat:@"WHERE taskID=(?) "];
  id v4 = v3;
  if (a1[4]) {
    objc_msgSend(v3, "appendString:");
  }
  [v4 appendFormat:@"AND status=(?);"];
  [v2 appendString:v4];
  id v5 = *(sqlite3 **)(a1[5] + 24);
  id v6 = v2;
  uint64_t v7 = sqlite3_prepare_v2(v5, (const char *)[v6 UTF8String], -1, &ppStmt, 0);
  if (!v7)
  {
    uint64_t v7 = sqlite3_bind_int64(ppStmt, 1, 4);
    if (!v7)
    {
      uint64_t v7 = sqlite3_bind_int64(ppStmt, 2, a1[6]);
      if (!v7)
      {
        uint64_t v7 = sqlite3_bind_int64(ppStmt, 3, 1);
        if (!v7)
        {
          id v8 = sqlite3_expanded_sql(ppStmt);
          if (v8)
          {
            if (MediaAnalysisEnableDatabaseLog())
            {
              unsigned int v9 = VCPLogInstance();
              if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 136315650;
                __int16 v14 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v15 = 1024;
                int v16 = 2907;
                __int16 v17 = 2080;
                os_log_type_t v18 = v8;
                _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
              }
            }
            sqlite3_free(v8);
          }
          unsigned int v10 = sqlite3_step(ppStmt);
          if (v10 == 101) {
            uint64_t v7 = 0;
          }
          else {
            uint64_t v7 = v10;
          }
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);

  return v7;
}

void sub_100043EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000440F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000443A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000445B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000445E4(uint64_t a1)
{
  uint64_t v2 = +[NSDate dateWithTimeIntervalSinceNow:-2592000.0];
  id v3 = [*(id *)(a1 + 32) _removeSchedulingHistoryForStartTimeBefore:v2];
  if (!v3) {
    id v3 = [*(id *)(a1 + 32) _storeSchedulingHistoryForActivityID:*(void *)(a1 + 48) andStartTime:*(void *)(a1 + 40)];
  }

  return v3;
}

void sub_100044654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100044668(uint64_t a1)
{
  return [*(id *)(a1 + 32) _storeSchedulingHistoryForActivityID:*(void *)(a1 + 48) andStartTime:*(void *)(a1 + 40)];
}

void sub_100044838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100044874(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "REPLACE INTO BackgroundActivitySchedulingHistory (activityID, startTime, duration, exitStatus, sessionLog) VALUES ((?), (?), (?), (?), (?));",
         -1,
         &ppStmt,
         0);
  if (v2) {
    goto LABEL_10;
  }
  uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 56));
  if (v2) {
    goto LABEL_10;
  }
  id v3 = ppStmt;
  id v4 = *(id *)(a1 + 40);
  id v5 = v4;
  if (v4)
  {
    [v4 timeIntervalSinceReferenceDate];
    uint64_t v7 = sqlite3_bind_double(v3, 2, v6);
  }
  else
  {
    uint64_t v7 = sqlite3_bind_null(v3, 2);
  }
  uint64_t v2 = v7;

  if (v2) {
    goto LABEL_10;
  }
  uint64_t v2 = sqlite3_bind_double(ppStmt, 3, *(double *)(a1 + 64));
  if (v2) {
    goto LABEL_10;
  }
  uint64_t v2 = sqlite3_bind_int64(ppStmt, 4, *(int *)(a1 + 72));
  if (v2) {
    goto LABEL_10;
  }
  uint64_t v2 = sub_1000334B8(ppStmt, 5, *(void **)(a1 + 48));
  if (v2) {
    goto LABEL_10;
  }
  int v16 = sqlite3_expanded_sql(ppStmt);
  if (v16)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      __int16 v17 = VCPLogInstance();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        __int16 v21 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v22 = 1024;
        int v23 = 3006;
        __int16 v24 = 2080;
        __int16 v25 = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v16);
  }
  uint64_t v18 = sqlite3_step(ppStmt);
  uint64_t v2 = v18;
  uint64_t v14 = 0;
  if (v18)
  {
    if (v18 != 101)
    {
LABEL_10:
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        id v8 = VCPLogInstance();
        os_log_type_t v9 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v8, v9))
        {
          int v10 = *(_DWORD *)(a1 + 72);
          __int16 v11 = *(const char **)(a1 + 64);
          VCPTaskIDDescription(*(void *)(a1 + 56));
          int v12 = (char *)objc_claimAutoreleasedReturnValue();
          uint64_t v13 = *(void *)(a1 + 40);
          *(_DWORD *)long long buf = 134218754;
          __int16 v21 = v11;
          __int16 v22 = 1024;
          int v23 = v10;
          __int16 v24 = 2112;
          __int16 v25 = v12;
          __int16 v26 = 2112;
          uint64_t v27 = v13;
          _os_log_impl((void *)&_mh_execute_header, v8, v9, "[SchedulingHistory] Failed to update (duration: %f, exitStatus: %d) for background activity %@ and start time %@", buf, 0x26u);
        }
      }
      uint64_t v14 = v2;
    }
  }
  sqlite3_finalize(ppStmt);
  return v14;
}

void sub_100044B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100044D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100044D6C(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "SELECT activityID, startTime, duration, exitStatus, sessionLog FROM BackgroundActivitySchedulingHistory WHERE activityID=(?) AND startTime>=(?);",
         -1,
         &ppStmt,
         0);
  if (v2) {
    goto LABEL_7;
  }
  uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 56));
  if (v2) {
    goto LABEL_7;
  }
  id v3 = ppStmt;
  id v4 = *(id *)(a1 + 40);
  id v5 = v4;
  if (v4)
  {
    [v4 timeIntervalSinceReferenceDate];
    uint64_t v7 = sqlite3_bind_double(v3, 2, v6);
  }
  else
  {
    uint64_t v7 = sqlite3_bind_null(v3, 2);
  }
  uint64_t v2 = v7;

  if (v2) {
    goto LABEL_7;
  }
  uint64_t v14 = sqlite3_expanded_sql(ppStmt);
  if (v14)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      __int16 v15 = VCPLogInstance();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        int v23 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v24 = 1024;
        int v25 = 3033;
        __int16 v26 = 2080;
        uint64_t v27 = v14;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v14);
  }
  uint64_t v2 = sqlite3_step(ppStmt);
  while (v2 == 100)
  {
    id v16 = objc_alloc_init((Class)MADActivitySchedulingRecord);
    [v16 setActivityID:*(void *)(a1 + 56)];
    __int16 v17 = ppStmt;
    if (sqlite3_column_type(ppStmt, 1) == 5)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = +[NSDate dateWithTimeIntervalSinceReferenceDate:sqlite3_column_double(v17, 1)];
    }
    [v16 setStartTime:v18];

    objc_msgSend(v16, "setDuration:", sqlite3_column_double(ppStmt, 2));
    objc_msgSend(v16, "setExitStatus:", sqlite3_column_int64(ppStmt, 3));
    __int16 v19 = ppStmt;
    if (sqlite3_column_type(ppStmt, 4) == 5)
    {
      int v20 = 0;
    }
    else
    {
      int v20 = +[NSString stringWithUTF8String:sqlite3_column_text(v19, 4)];
    }
    [v16 setSessionLog:v20];

    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v16];
    uint64_t v2 = sqlite3_step(ppStmt);
  }
  if (v2 && v2 != 101)
  {
LABEL_7:
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      id v8 = VCPLogInstance();
      os_log_type_t v9 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v8, v9))
      {
        VCPTaskIDDescription(*(void *)(a1 + 56));
        int v10 = (char *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 138412546;
        int v23 = v10;
        __int16 v24 = 1024;
        int v25 = v2;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "[SchedulingHistory] Failed to query history %@ (%d)", buf, 0x12u);
      }
    }
    uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
    int v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = 0;
  }
  else
  {
    uint64_t v2 = 0;
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_1000450DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100045264(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "DELETE FROM BackgroundActivitySchedulingHistory WHERE activityID=(?) AND id NOT IN (SELECT id FROM BackgroundActivitySchedulingHistory WHERE activityID=(?) ORDER BY startTime DESC LIMIT (?));",
         -1,
         &ppStmt,
         0);
  if (v2) {
    goto LABEL_5;
  }
  uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 40));
  if (v2) {
    goto LABEL_5;
  }
  uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, *(void *)(a1 + 40));
  if (v2) {
    goto LABEL_5;
  }
  uint64_t v2 = sqlite3_bind_int64(ppStmt, 3, 500);
  if (v2) {
    goto LABEL_5;
  }
  id v8 = sqlite3_expanded_sql(ppStmt);
  if (v8)
  {
    os_log_type_t v9 = v8;
    if (MediaAnalysisEnableDatabaseLog())
    {
      int v10 = VCPLogInstance();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v15 = 1024;
        LODWORD(v16[0]) = 3077;
        WORD2(v16[0]) = 2080;
        *(void *)((char *)v16 + 6) = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v9);
  }
  uint64_t v11 = sqlite3_step(ppStmt);
  uint64_t v6 = 0;
  if (v11)
  {
    uint64_t v2 = v11;
    if (v11 != 101)
    {
LABEL_5:
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        id v3 = VCPLogInstance();
        os_log_type_t v4 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v3, v4))
        {
          id v5 = *(const char **)(a1 + 40);
          *(_DWORD *)long long buf = 134218240;
          uint64_t v14 = v5;
          __int16 v15 = 2048;
          v16[0] = 500;
          _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to remove scheduling history for background activity %lu over limit %lu", buf, 0x16u);
        }
      }
      uint64_t v6 = v2;
    }
  }
  sqlite3_finalize(ppStmt);
  return v6;
}

void sub_100045758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000459A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100045D54(uint64_t a1)
{
  return [*(id *)(a1 + 32) _storeProgressForActivityID:*(void *)(a1 + 40) withAnalysisSubtype:*(void *)(a1 + 48) version:*(void *)(a1 + 56) processedAssetCount:*(void *)(a1 + 64) totalAssetCount:*(void *)(a1 + 72)];
}

id sub_100045D68(uint64_t a1)
{
  return [*(id *)(a1 + 32) _storeProgressForActivityID:*(void *)(a1 + 40) withAnalysisSubtype:*(void *)(a1 + 48) version:*(void *)(a1 + 56) processedAssetCount:*(void *)(a1 + 64) totalAssetCount:*(void *)(a1 + 72)];
}

id sub_100045EB8(uint64_t a1)
{
  uint64_t v2 = +[NSDate dateWithTimeIntervalSinceNow:-2592000.0];
  id v3 = [*(id *)(a1 + 32) _removeProgressRecordsBeforeDate:v2];
  if (!v3) {
    id v3 = [*(id *)(a1 + 32) _removeProgressRecordsBeyondMaximum:500];
  }

  return v3;
}

void sub_100045F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000460C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000460F4(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "REPLACE INTO PrioritizedAssets  (localIdentifier, mediaType, mediaSubtype) VALUES ((?), (?), (?));",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    id v3 = ppStmt;
    id v4 = *(id *)(a1 + 40);
    id v5 = v4;
    uint64_t v6 = v4
       ? sqlite3_bind_text(v3, 1, (const char *)[v4 UTF8String], -1, 0)
       : sqlite3_bind_null(v3, 1);
    uint64_t v2 = v6;

    if (!v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, *(void *)(a1 + 48));
      if (!v2)
      {
        uint64_t v2 = sqlite3_bind_int64(ppStmt, 3, *(void *)(a1 + 56));
        if (!v2)
        {
          uint64_t v7 = sqlite3_expanded_sql(ppStmt);
          if (v7)
          {
            if (MediaAnalysisEnableDatabaseLog())
            {
              id v8 = VCPLogInstance();
              if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 136315650;
                uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v14 = 1024;
                int v15 = 3225;
                __int16 v16 = 2080;
                __int16 v17 = v7;
                _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
              }
            }
            sqlite3_free(v7);
          }
          unsigned int v9 = sqlite3_step(ppStmt);
          if (v9 == 101) {
            uint64_t v2 = 0;
          }
          else {
            uint64_t v2 = v9;
          }
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_1000462B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004643C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10004646C(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "DELETE FROM PrioritizedAssets  WHERE localIdentifier=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    id v3 = ppStmt;
    id v4 = *(id *)(a1 + 40);
    id v5 = v4;
    uint64_t v6 = v4
       ? sqlite3_bind_text(v3, 1, (const char *)[v4 UTF8String], -1, 0)
       : sqlite3_bind_null(v3, 1);
    uint64_t v2 = v6;

    if (!v2)
    {
      uint64_t v7 = sqlite3_expanded_sql(ppStmt);
      if (v7)
      {
        if (MediaAnalysisEnableDatabaseLog())
        {
          id v8 = VCPLogInstance();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 136315650;
            uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v14 = 1024;
            int v15 = 3244;
            __int16 v16 = 2080;
            __int16 v17 = v7;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
          }
        }
        sqlite3_free(v7);
      }
      unsigned int v9 = sqlite3_step(ppStmt);
      if (v9 == 101) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = v9;
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_1000465F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000467F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10004681C(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = +[NSMutableString stringWithFormat:@"SELECT localIdentifier FROM PrioritizedAssets WHERE mediaType=(?) AND "];
  id v3 = v2;
  if (*(unsigned char *)(a1 + 72)) {
    [v2 appendString:@"NOT "];
  }
  [v3 appendString:@"(mediaSubtype & (?)) LIMIT (?);"];
  id v4 = *(sqlite3 **)(*(void *)(a1 + 32) + 24);
  id v5 = v3;
  uint64_t v6 = sqlite3_prepare_v2(v4, (const char *)[v5 UTF8String], -1, &ppStmt, 0);
  if (!v6)
  {
    uint64_t v6 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
    if (!v6)
    {
      uint64_t v6 = sqlite3_bind_int64(ppStmt, 2, *(void *)(a1 + 56));
      if (!v6)
      {
        uint64_t v6 = sqlite3_bind_int64(ppStmt, 3, *(void *)(a1 + 64));
        if (!v6)
        {
          uint64_t v7 = sqlite3_expanded_sql(ppStmt);
          if (v7)
          {
            if (MediaAnalysisEnableDatabaseLog())
            {
              id v8 = VCPLogInstance();
              if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 136315650;
                int v15 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v16 = 1024;
                int v17 = 3272;
                __int16 v18 = 2080;
                __int16 v19 = v7;
                _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
              }
            }
            sqlite3_free(v7);
          }
          unsigned int v9 = sqlite3_step(ppStmt);
          while (v9 == 100)
          {
            int v10 = ppStmt;
            if (sqlite3_column_type(ppStmt, 0) == 5)
            {
              uint64_t v11 = 0;
            }
            else
            {
              uint64_t v11 = +[NSString stringWithUTF8String:sqlite3_column_text(v10, 0)];
            }
            [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v11];
            unsigned int v9 = sqlite3_step(ppStmt);
          }
          if (v9 == 101) {
            uint64_t v6 = 0;
          }
          else {
            uint64_t v6 = v9;
          }
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);

  return v6;
}

void sub_100046A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100046C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100046C84(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "SELECT count(*) FROM PrioritizedAssets WHERE localIdentifier=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    id v3 = ppStmt;
    id v4 = *(id *)(a1 + 40);
    id v5 = v4;
    uint64_t v6 = v4
       ? sqlite3_bind_text(v3, 1, (const char *)[v4 UTF8String], -1, 0)
       : sqlite3_bind_null(v3, 1);
    uint64_t v2 = v6;

    if (!v2)
    {
      uint64_t v7 = sqlite3_expanded_sql(ppStmt);
      if (v7)
      {
        if (MediaAnalysisEnableDatabaseLog())
        {
          id v8 = VCPLogInstance();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 136315650;
            uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v14 = 1024;
            int v15 = 3300;
            __int16 v16 = 2080;
            int v17 = v7;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
          }
        }
        sqlite3_free(v7);
      }
      unsigned int v9 = sqlite3_step(ppStmt);
      if (v9 == 100)
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = sqlite3_column_int(ppStmt, 0);
        unsigned int v9 = sqlite3_step(ppStmt);
      }
      if (v9 == 101) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = v9;
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100046E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100046F9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100046FB4(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v1 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "DELETE FROM PrioritizedAssets;",
         -1,
         &ppStmt,
         0);
  if (!v1)
  {
    uint64_t v2 = sqlite3_expanded_sql(ppStmt);
    if (v2)
    {
      id v3 = v2;
      if (MediaAnalysisEnableDatabaseLog())
      {
        id v4 = VCPLogInstance();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 136315650;
          unsigned int v9 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
          __int16 v10 = 1024;
          int v11 = 3323;
          __int16 v12 = 2080;
          uint64_t v13 = v3;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
        }
      }
      sqlite3_free(v3);
    }
    unsigned int v5 = sqlite3_step(ppStmt);
    if (v5 == 101) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = v5;
    }
  }
  sqlite3_finalize(ppStmt);
  return v1;
}

void sub_100047474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000476CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100047708(id *a1)
{
  ppStmt = 0;
  uint64_t v2 = +[NSMutableString stringWithString:](NSMutableString, "stringWithString:", @"SELECT localIdentifier, version, dateModified, dateAnalyzed, analysisTypes, flags, statsFlags, quality, masterFingerprint, adjustedFingerprint FROM Assets WHERE localIdentifier IN (?");
  for (unint64_t i = 1; i < (unint64_t)[a1[4] count]; ++i)
    [v2 appendString:@",?"];
  [v2 appendString:@";"]);
  id v4 = (sqlite3 *)*((void *)a1[5] + 3);
  id v22 = v2;
  uint64_t v5 = sqlite3_prepare_v2(v4, (const char *)[v22 UTF8String], -1, &ppStmt, 0);
  if (!v5)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v6 = a1[4];
    id v7 = [v6 countByEnumeratingWithState:&v23 objects:v34 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v24;
      int v9 = 1;
      while (2)
      {
        for (j = 0; j != v7; j = (char *)j + 1)
        {
          if (*(void *)v24 != v8) {
            objc_enumerationMutation(v6);
          }
          int v11 = ppStmt;
          id v12 = *(id *)(*((void *)&v23 + 1) + 8 * (void)j);
          uint64_t v13 = v12;
          if (v12) {
            uint64_t v14 = sqlite3_bind_text(v11, v9 + j, (const char *)[v12 UTF8String], -1, 0);
          }
          else {
            uint64_t v14 = sqlite3_bind_null(v11, v9 + j);
          }
          uint64_t v5 = v14;

          if (v5)
          {

            goto LABEL_34;
          }
        }
        id v7 = [v6 countByEnumeratingWithState:&v23 objects:v34 count:16];
        v9 += (int)j;
        if (v7) {
          continue;
        }
        break;
      }
    }

    int v15 = sqlite3_expanded_sql(ppStmt);
    if (v15)
    {
      if (MediaAnalysisEnableDatabaseLog())
      {
        __int16 v16 = VCPLogInstance();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 136315650;
          long long v29 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
          __int16 v30 = 1024;
          int v31 = 3393;
          __int16 v32 = 2080;
          os_log_type_t v33 = v15;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
        }
      }
      sqlite3_free(v15);
    }
    int v17 = sqlite3_step(ppStmt);
    while (v17 == 100)
    {
      __int16 v18 = ppStmt;
      if (sqlite3_column_type(ppStmt, 0) == 5)
      {
        __int16 v19 = 0;
      }
      else
      {
        __int16 v19 = +[NSString stringWithUTF8String:sqlite3_column_text(v18, 0)];
      }
      int v20 = +[NSMutableDictionary dictionary];
      uint64_t v5 = (uint64_t)[a1[5] parseHeader:ppStmt startColumn:1 analysis:v20];
      if (v5)
      {

        goto LABEL_34;
      }
      [a1[6] setObject:v20 forKeyedSubscript:v19];
      int v17 = sqlite3_step(ppStmt);
    }
    if (v17 == 101) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = 4294967278;
    }
  }
LABEL_34:
  sqlite3_finalize(ppStmt);

  return v5;
}

void sub_100047A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100047C44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100047C70(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "SELECT key, value FROM KeyValueStore;",
         -1,
         &ppStmt,
         0);
  if (v2) {
    goto LABEL_2;
  }
  uint64_t v5 = sqlite3_expanded_sql(ppStmt);
  if (v5)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      id v6 = VCPLogInstance();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v15 = 1024;
        int v16 = 3422;
        __int16 v17 = 2080;
        __int16 v18 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v5);
  }
  uint64_t v2 = sqlite3_step(ppStmt);
  os_log_type_t v7 = VCPLogToOSLogType[4];
  while (v2 == 100)
  {
    uint64_t v8 = ppStmt;
    if (sqlite3_column_type(ppStmt, 0) != 5)
    {
      int v9 = +[NSString stringWithUTF8String:sqlite3_column_text(v8, 0)];
      if (v9)
      {
        __int16 v10 = +[NSNumber numberWithLongLong:sqlite3_column_int64(ppStmt, 1)];
        [*(id *)(a1 + 40) setObject:v10 forKeyedSubscript:v9];
LABEL_21:

        goto LABEL_23;
      }
    }
    if ((int)MediaAnalysisLogLevel() >= 4)
    {
      __int16 v10 = VCPLogInstance();
      if (os_log_type_enabled(v10, v7))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v7, "Parsed a value without key specified; skipping this value",
          buf,
          2u);
      }
      int v9 = 0;
      goto LABEL_21;
    }
    int v9 = 0;
LABEL_23:
    uint64_t v2 = sqlite3_step(ppStmt);
  }
  if (!v2 || v2 == 101)
  {
    uint64_t v2 = 0;
    goto LABEL_27;
  }
LABEL_2:
  if ((int)MediaAnalysisLogLevel() >= 3)
  {
    id v3 = VCPLogInstance();
    os_log_type_t v4 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v3, v4))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to query KeyValueStore", buf, 2u);
    }
  }
LABEL_27:
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100047F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000480F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10004812C(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "SELECT * FROM KeyValueStore WHERE key = (?);",
         -1,
         &ppStmt,
         0);
  if (v2) {
    goto LABEL_6;
  }
  id v3 = ppStmt;
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = v4;
  uint64_t v6 = v4
     ? sqlite3_bind_text(v3, 1, (const char *)[v4 UTF8String], -1, 0)
     : sqlite3_bind_null(v3, 1);
  uint64_t v2 = v6;

  if (v2) {
    goto LABEL_6;
  }
  id v12 = sqlite3_expanded_sql(ppStmt);
  if (v12)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      uint64_t v13 = VCPLogInstance();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        int v16 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v17 = 1024;
        int v18 = 3455;
        __int16 v19 = 2080;
        int v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v12);
  }
  uint64_t v2 = sqlite3_step(ppStmt);
  if (v2 == 100)
  {
    uint64_t v2 = sqlite3_step(ppStmt);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  uint64_t v10 = 0;
  if (v2)
  {
    if (v2 != 101)
    {
LABEL_6:
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        os_log_type_t v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v7, v8))
        {
          int v9 = *(const char **)(a1 + 40);
          *(_DWORD *)long long buf = 138412290;
          int v16 = v9;
          _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to check if key %@ exists in KeyValueStore", buf, 0xCu);
        }
      }
      uint64_t v10 = v2;
    }
  }
  sqlite3_finalize(ppStmt);
  return v10;
}

void sub_10004835C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004850C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100048544(uint64_t a1)
{
  return [*(id *)(a1 + 32) _queryValue:*(void *)(*(void *)(a1 + 48) + 8) + 24 forKey:*(void *)(a1 + 40)];
}

void sub_1000486D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000486FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setValue:*(void *)(a1 + 48) forKey:*(void *)(a1 + 40)];
}

void sub_100048878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000488A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeKey:*(void *)(a1 + 40)];
}

void sub_100048A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100048A50(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "UPDATE Assets SET statsFlags=(?) WHERE localIdentifier=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
    if (!v2)
    {
      id v3 = ppStmt;
      id v4 = *(id *)(a1 + 40);
      uint64_t v5 = v4;
      uint64_t v6 = v4
         ? sqlite3_bind_text(v3, 2, (const char *)[v4 UTF8String], -1, 0)
         : sqlite3_bind_null(v3, 2);
      uint64_t v2 = v6;

      if (!v2)
      {
        os_log_type_t v7 = sqlite3_expanded_sql(ppStmt);
        if (v7)
        {
          if (MediaAnalysisEnableDatabaseLog())
          {
            os_log_type_t v8 = VCPLogInstance();
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 136315650;
              uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v14 = 1024;
              int v15 = 3511;
              __int16 v16 = 2080;
              __int16 v17 = v7;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
            }
          }
          sqlite3_free(v7);
        }
        unsigned int v9 = sqlite3_step(ppStmt);
        if (v9 == 101) {
          uint64_t v2 = 0;
        }
        else {
          uint64_t v2 = v9;
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100048BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100048D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100048D98(void *a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(a1[4] + 24), "SELECT count(*) FROM Assets WHERE (statsFlags & (?))=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, a1[6]);
    if (!v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, a1[6]);
      if (!v2)
      {
        id v3 = sqlite3_expanded_sql(ppStmt);
        if (v3)
        {
          id v4 = v3;
          if (MediaAnalysisEnableDatabaseLog())
          {
            uint64_t v5 = VCPLogInstance();
            if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 136315650;
              unsigned int v9 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v10 = 1024;
              int v11 = 3530;
              __int16 v12 = 2080;
              uint64_t v13 = v4;
              _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
            }
          }
          sqlite3_free(v4);
        }
        uint64_t v2 = sqlite3_step(ppStmt);
        if (v2 == 100)
        {
          uint64_t v2 = 0;
          *(void *)(*(void *)(a1[5] + 8) + 24) = sqlite3_column_int(ppStmt, 0);
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10004909C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000490BC(void *a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(a1[4] + 24), "SELECT count(*) FROM Assets WHERE (statsFlags & (?))=(?) AND statsFlags & (?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, a1[6]);
    if (!v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, a1[6]);
      if (!v2)
      {
        uint64_t v2 = sqlite3_bind_int64(ppStmt, 3, a1[7]);
        if (!v2)
        {
          id v3 = sqlite3_expanded_sql(ppStmt);
          if (v3)
          {
            id v4 = v3;
            if (MediaAnalysisEnableDatabaseLog())
            {
              uint64_t v5 = VCPLogInstance();
              if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 136315650;
                unsigned int v9 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v10 = 1024;
                int v11 = 3553;
                __int16 v12 = 2080;
                uint64_t v13 = v4;
                _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
              }
            }
            sqlite3_free(v4);
          }
          uint64_t v2 = sqlite3_step(ppStmt);
          if (v2 == 100)
          {
            uint64_t v2 = 0;
            *(void *)(*(void *)(a1[5] + 8) + 24) = sqlite3_column_int(ppStmt, 0);
          }
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_1000493D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000493F8(void *a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(a1[4] + 24), "SELECT count(*) FROM Assets WHERE (statsFlags & (?))=(?) AND (analysisTypes & (?))=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, a1[6]);
    if (!v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, a1[6]);
      if (!v2)
      {
        uint64_t v2 = sqlite3_bind_int64(ppStmt, 3, a1[7]);
        if (!v2)
        {
          uint64_t v2 = sqlite3_bind_int64(ppStmt, 4, a1[7]);
          if (!v2)
          {
            id v3 = sqlite3_expanded_sql(ppStmt);
            if (v3)
            {
              id v4 = v3;
              if (MediaAnalysisEnableDatabaseLog())
              {
                uint64_t v5 = VCPLogInstance();
                if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)long long buf = 136315650;
                  unsigned int v9 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                  __int16 v10 = 1024;
                  int v11 = 3577;
                  __int16 v12 = 2080;
                  uint64_t v13 = v4;
                  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
                }
              }
              sqlite3_free(v4);
            }
            uint64_t v2 = sqlite3_step(ppStmt);
            if (v2 == 100)
            {
              uint64_t v2 = 0;
              *(void *)(*(void *)(a1[5] + 8) + 24) = sqlite3_column_int(ppStmt, 0);
            }
          }
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100049878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100049908(id a1)
{
  uint64_t v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];

  return 0;
}

void sub_100049944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100049A94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100049CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100049CCC(void *a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(a1[4] + 24), "SELECT COUNT(*) FROM Results WHERE resultsType=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, a1[6]);
    if (!v2)
    {
      id v3 = sqlite3_expanded_sql(ppStmt);
      if (v3)
      {
        id v4 = v3;
        if (MediaAnalysisEnableDatabaseLog())
        {
          uint64_t v5 = VCPLogInstance();
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 136315650;
            unsigned int v9 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v10 = 1024;
            int v11 = 3636;
            __int16 v12 = 2080;
            uint64_t v13 = v4;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
          }
        }
        sqlite3_free(v4);
      }
      uint64_t v2 = sqlite3_step(ppStmt);
      if (v2 == 100)
      {
        uint64_t v2 = 0;
        *(void *)(*(void *)(a1[5] + 8) + 24) = sqlite3_column_int(ppStmt, 0);
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100049E98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004A03C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10004A074(uint64_t a1)
{
  return [*(id *)(a1 + 32) _storeAnalysis:*(void *)(a1 + 40) forLocalIdentifier:*(void *)(a1 + 48)];
}

int sub_10004A084(id a1)
{
  return -50;
}

void sub_10004A200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004A220(uint64_t a1)
{
  if (sqlite3_wal_checkpoint(*(sqlite3 **)(*(void *)(a1 + 32) + 24), 0)) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = -18;
  }
  return 0;
}

void sub_10004A3F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10004A42C(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "SELECT count(*) FROM Assets WHERE dateAnalyzed >= (?) AND dateAnalyzed <= (?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    id v3 = ppStmt;
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = v4;
    if (v4)
    {
      [v4 timeIntervalSinceReferenceDate];
      uint64_t v7 = sqlite3_bind_double(v3, 1, v6);
    }
    else
    {
      uint64_t v7 = sqlite3_bind_null(v3, 1);
    }
    uint64_t v2 = v7;

    if (!v2)
    {
      os_log_type_t v8 = ppStmt;
      id v9 = +[NSDate date];
      __int16 v10 = v9;
      if (v9)
      {
        [v9 timeIntervalSinceReferenceDate];
        uint64_t v12 = sqlite3_bind_double(v8, 2, v11);
      }
      else
      {
        uint64_t v12 = sqlite3_bind_null(v8, 2);
      }
      uint64_t v2 = v12;

      if (!v2)
      {
        uint64_t v13 = sqlite3_expanded_sql(ppStmt);
        if (v13)
        {
          if (MediaAnalysisEnableDatabaseLog())
          {
            __int16 v14 = VCPLogInstance();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 136315650;
              int v18 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v19 = 1024;
              int v20 = 3698;
              __int16 v21 = 2080;
              id v22 = v13;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
            }
          }
          sqlite3_free(v13);
        }
        uint64_t v2 = sqlite3_step(ppStmt);
        if (v2 == 100)
        {
          uint64_t v2 = 0;
          *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = sqlite3_column_int(ppStmt, 0);
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10004A620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10004A798(uint64_t a1)
{
  uint64_t v2 = +[NSMutableArray array];
  ppStmt = 0;
  id v3 = +[NSString stringWithFormat:@"SELECT localIdentifier, requestDate FROM MomentsScheduledAssets WHERE taskID=(?)"];;
  id v4 = *(sqlite3 **)(*(void *)(a1 + 32) + 24);
  id v5 = v3;
  uint64_t v6 = sqlite3_prepare_v2(v4, (const char *)[v5 UTF8String], -1, &ppStmt, 0);
  if (v6) {
    goto LABEL_3;
  }
  uint64_t v6 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 40));
  if (v6) {
    goto LABEL_3;
  }
  id v9 = sqlite3_expanded_sql(ppStmt);
  if (v9)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      __int16 v10 = VCPLogInstance();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        __int16 v19 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v20 = 1024;
        int v21 = 3727;
        __int16 v22 = 2080;
        long long v23 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v9);
  }
  uint64_t v6 = sqlite3_step(ppStmt);
  os_log_type_t v11 = VCPLogToOSLogType[4];
  while (v6 == 100)
  {
    uint64_t v12 = ppStmt;
    if (sqlite3_column_type(ppStmt, 0) == 5)
    {
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v13 = +[NSString stringWithUTF8String:sqlite3_column_text(v12, 0)];
    }
    __int16 v14 = ppStmt;
    if (sqlite3_column_type(ppStmt, 1) == 5)
    {
      int v15 = 0;
      if (v13) {
        goto LABEL_18;
      }
    }
    else
    {
      int v15 = +[NSDate dateWithTimeIntervalSinceReferenceDate:sqlite3_column_double(v14, 1)];
      if (v13)
      {
LABEL_18:
        __int16 v16 = +[MADDeferredProcessingEntry entryWithLocalIdentifier:v13 requestDate:v15];
        [v2 addObject:v16];
LABEL_19:

        goto LABEL_20;
      }
    }
    if ((int)MediaAnalysisLogLevel() >= 4)
    {
      __int16 v16 = VCPLogInstance();
      if (os_log_type_enabled(v16, v11))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v11, "Detected bad localIdentifier in MomentsScheduledAssets", buf, 2u);
      }
      goto LABEL_19;
    }
LABEL_20:
    uint64_t v6 = sqlite3_step(ppStmt);
  }
  if (!v6 || v6 == 101)
  {
    uint64_t v6 = 0;
    goto LABEL_4;
  }
LABEL_3:

  uint64_t v2 = 0;
LABEL_4:
  sqlite3_finalize(ppStmt);
  id v7 = v2;
  **(void **)(a1 + 48) = v7;

  return v6;
}

void sub_10004AAA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10004AC48(uint64_t a1)
{
  uint64_t v2 = +[NSMutableDictionary dictionary];
  ppStmt = 0;
  id v3 = +[NSString stringWithFormat:@"SELECT localIdentifier, taskID FROM MomentsScheduledAssets;"];
  id v4 = *(sqlite3 **)(*(void *)(a1 + 32) + 24);
  id v5 = v3;
  uint64_t v6 = sqlite3_prepare_v2(v4, (const char *)[v5 UTF8String], -1, &ppStmt, 0);
  if (v6) {
    goto LABEL_2;
  }
  id v7 = sqlite3_expanded_sql(ppStmt);
  if (v7)
  {
    if (MediaAnalysisEnableDatabaseLog())
    {
      os_log_type_t v8 = VCPLogInstance();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        __int16 v20 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v21 = 1024;
        int v22 = 3761;
        __int16 v23 = 2080;
        long long v24 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
      }
    }
    sqlite3_free(v7);
  }
  uint64_t v6 = sqlite3_step(ppStmt);
  os_log_type_t v9 = VCPLogToOSLogType[4];
  while (v6 == 100)
  {
    __int16 v10 = ppStmt;
    if (sqlite3_column_type(ppStmt, 0) == 5
      || (+[NSString stringWithUTF8String:sqlite3_column_text(v10, 0)], (os_log_type_t v11 = objc_claimAutoreleasedReturnValue()) == 0))
    {
      if ((int)MediaAnalysisLogLevel() < 4)
      {
        os_log_type_t v11 = 0;
        goto LABEL_22;
      }
      __int16 v14 = VCPLogInstance();
      if (os_log_type_enabled(v14, v9))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v9, "Detected bad localIdentifier in MomentsScheduledAssets", buf, 2u);
      }
      os_log_type_t v11 = 0;
    }
    else
    {
      sqlite3_int64 v12 = sqlite3_column_int64(ppStmt, 1);
      uint64_t v13 = [v2 objectForKeyedSubscript:v11];
      __int16 v14 = v13;
      if (v13)
      {
        [v13 addIndex:v12];
      }
      else
      {
        uint64_t v15 = +[NSMutableIndexSet indexSetWithIndex:v12];
        [v2 setObject:v15 forKeyedSubscript:v11];
        __int16 v14 = v15;
      }
    }

LABEL_22:
    uint64_t v6 = sqlite3_step(ppStmt);
  }
  if (!v6 || v6 == 101)
  {
    uint64_t v6 = 0;
    goto LABEL_26;
  }
LABEL_2:

  uint64_t v2 = 0;
LABEL_26:
  sqlite3_finalize(ppStmt);
  id v16 = v2;
  **(void **)(a1 + 40) = v16;

  return v6;
}

void sub_10004AF40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004B128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10004B158(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "REPLACE INTO MomentsScheduledAssets (taskID, localIdentifier, requestDate) VALUES ((?), (?), (?));",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
    if (!v2)
    {
      id v3 = ppStmt;
      id v4 = *(id *)(a1 + 40);
      id v5 = v4;
      uint64_t v6 = v4
         ? sqlite3_bind_text(v3, 2, (const char *)[v4 UTF8String], -1, 0)
         : sqlite3_bind_null(v3, 2);
      uint64_t v2 = v6;

      if (!v2)
      {
        id v7 = ppStmt;
        id v8 = +[NSDate now];
        os_log_type_t v9 = v8;
        if (v8)
        {
          [v8 timeIntervalSinceReferenceDate];
          uint64_t v11 = sqlite3_bind_double(v7, 3, v10);
        }
        else
        {
          uint64_t v11 = sqlite3_bind_null(v7, 3);
        }
        uint64_t v2 = v11;

        if (!v2)
        {
          sqlite3_int64 v12 = sqlite3_expanded_sql(ppStmt);
          if (v12)
          {
            if (MediaAnalysisEnableDatabaseLog())
            {
              uint64_t v13 = VCPLogInstance();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 136315650;
                int v18 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v19 = 1024;
                int v20 = 3802;
                __int16 v21 = 2080;
                int v22 = v12;
                _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
              }
            }
            sqlite3_free(v12);
          }
          unsigned int v14 = sqlite3_step(ppStmt);
          if (v14 == 101) {
            uint64_t v2 = 0;
          }
          else {
            uint64_t v2 = v14;
          }
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10004B348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004B4DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10004B508(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "DELETE FROM MomentsScheduledAssets WHERE taskID=(?) AND localIdentifier=(?);",
         -1,
         &ppStmt,
         0);
  if (!v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
    if (!v2)
    {
      id v3 = ppStmt;
      id v4 = *(id *)(a1 + 40);
      id v5 = v4;
      uint64_t v6 = v4
         ? sqlite3_bind_text(v3, 2, (const char *)[v4 UTF8String], -1, 0)
         : sqlite3_bind_null(v3, 2);
      uint64_t v2 = v6;

      if (!v2)
      {
        id v7 = sqlite3_expanded_sql(ppStmt);
        if (v7)
        {
          if (MediaAnalysisEnableDatabaseLog())
          {
            id v8 = VCPLogInstance();
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 136315650;
              uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v14 = 1024;
              int v15 = 3821;
              __int16 v16 = 2080;
              __int16 v17 = v7;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[MADB] Statement: %s[line:%d]: %s", buf, 0x1Cu);
            }
          }
          sqlite3_free(v7);
        }
        unsigned int v9 = sqlite3_step(ppStmt);
        if (v9 == 101) {
          uint64_t v2 = 0;
        }
        else {
          uint64_t v2 = v9;
        }
      }
    }
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10004B6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004B6BC(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "[VCPDatabaseWriter] Failed to set busy handler: %d", (uint8_t *)v2, 8u);
}

void sub_10004B734(uint64_t a1, uint64_t a2, os_log_t log)
{
  if (*(unsigned char *)(a1 + 64)) {
    id v3 = "write";
  }
  else {
    id v3 = "read";
  }
  int v4 = *(_DWORD *)(*(void *)(*(void *)a2 + 8) + 24);
  int v5 = 136315394;
  uint64_t v6 = v3;
  __int16 v7 = 1024;
  int v8 = v4;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Multiple %s database errors (%d); re-creating",
    (uint8_t *)&v5,
    0x12u);
}

void sub_10004BA10()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  uint64_t v1 = (void *)qword_1002524C8;
  qword_1002524C8 = (uint64_t)v0;
}

uint64_t sub_10004BC00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10004BD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_10004BD58(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v4 code]);
}

void sub_10004BDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10004BE54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004BF40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004C0B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004C6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_10004D614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10004D87C(void *a1, double a2)
{
  return (*(uint64_t (**)(void, double))(*(void *)(a1[4] + 8) + 16))(*(void *)(a1[4] + 8), (a2 + (double)(unint64_t)(a1[5] - 1) * 100.0) / (double)(unint64_t)a1[6]);
}

id sub_10004D8BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

id sub_10004D8C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

void sub_10004DCC8(id a1)
{
  uint64_t v1 = objc_alloc_init(VCPDataCollection);
  uint64_t v2 = (void *)qword_1002524D8;
  qword_1002524D8 = (uint64_t)v1;
}

void sub_10004DE70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004E13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10004E4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10004EE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10004F134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

__CFString *MADLastAnalysisRestoreTimestampKeyForTask(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9) {
    return 0;
  }
  else {
    return off_10021B238[a1 - 1];
  }
}

__CFString *MADAnalysisRestoreAttemptsKeyForTask(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9) {
    return 0;
  }
  else {
    return off_10021B288[a1 - 1];
  }
}

__CFString *MADLastAnalysisBackupTimestampKeyForTask(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9) {
    return 0;
  }
  else {
    return off_10021B2D8[a1 - 1];
  }
}

id MADAssetProtoClassForTask(uint64_t a1)
{
  if (a1 == 2 || a1 == 10 || a1 == 3)
  {
    uint64_t v2 = objc_opt_class();
  }
  else
  {
    uint64_t v2 = 0;
  }
  return v2;
}

void sub_10004F440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004F688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004F7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002AC60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10004F8B4()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  uint64_t v1 = (void *)qword_1002524E8;
  qword_1002524E8 = (uint64_t)v0;
}

void sub_100050364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100050504(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 && ((*(uint64_t (**)(void))(v2 + 16))() & 1) != 0) {
    return 1;
  }
  [*(id *)(a1 + 32) pet];
  return 0;
}

intptr_t sub_100050550(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 17));
}

id sub_100050564(uint64_t a1)
{
  return [*(id *)(a1 + 32) run];
}

void sub_1000505FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  double v10 = v9;

  a9.super_class = (Class)MADPreheatBackgroundSystemTask;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1000506B0()
{
  sub_1000506A0();
  sub_1000302B8((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to unlock CVPixelBuffer (%p, %d)", v1, v2, v3, v4, 0);
}

void sub_10005072C()
{
  sub_1000506A0();
  sub_1000302B8((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to lock CVPixelBuffer (%p, %d)", v1, v2, v3, v4, 0);
}

void sub_1000509FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100050A20(id a1)
{
  return 0;
}

void sub_100050AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000514A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100051920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100051AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100051B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100051CAC(_Unwind_Exception *a1)
{
}

void sub_100051F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100051FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005220C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000525FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_10005295C(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_100052EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100052F40(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processAssetEntry:*(void *)(a1 + 40)];
}

void sub_100053668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  _Unwind_Resume(a1);
}

void sub_100053770(uint64_t a1)
{
  __int16 v40 = +[NSMutableDictionary dictionary];
  id v39 = [*(id *)(a1 + 32) librarySpecificFetchOptions];
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  id obj = *(id *)(*(void *)(a1 + 40) + 8);
  id v32 = [obj countByEnumeratingWithState:&v45 objects:v58 count:16];
  if (v32)
  {
    uint64_t v3 = 0;
    uint64_t v35 = 0;
    uint64_t v31 = *(void *)v46;
    os_log_type_t type = VCPLogToOSLogType[7];
    *(void *)&long long v2 = 134218240;
    long long v28 = v2;
    do
    {
      for (unint64_t i = 0; i != v32; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v46 != v31) {
          objc_enumerationMutation(obj);
        }
        __int16 v36 = *(void **)(*((void *)&v45 + 1) + 8 * i);
        if (![v36 status])
        {
          uint64_t v4 = [v36 asset];
          int v37 = +[PHAssetChangeRequest changeRequestForAsset:v4];

          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          id v38 = [v36 detectedFaces];
          id v5 = [v38 countByEnumeratingWithState:&v41 objects:v57 count:16];
          if (!v5) {
            goto LABEL_27;
          }
          uint64_t v6 = *(void *)v42;
          while (1)
          {
            __int16 v7 = 0;
            v35 += (uint64_t)v5;
            do
            {
              if (*(void *)v42 != v6) {
                objc_enumerationMutation(v38);
              }
              int v8 = *(void **)(*((void *)&v41 + 1) + 8 * (void)v7);
              unsigned int v9 = objc_msgSend(v8, "personLocalIdentifier", v28);
              BOOL v10 = v9 == 0;

              if (v10)
              {
                sqlite3_int64 v12 = 0;
              }
              else
              {
                uint64_t v11 = [v8 personLocalIdentifier];
                sqlite3_int64 v12 = [v40 objectForKeyedSubscript:v11];

                ++v3;
                if (!v12)
                {
                  uint64_t v13 = [v36 detectedPersons];
                  __int16 v14 = [v8 personLocalIdentifier];
                  int v15 = [v13 objectForKeyedSubscript:v14];

                  if (v15)
                  {
                    sqlite3_int64 v12 = +[PHPersonChangeRequest changeRequestForPerson:v15];
                    __int16 v16 = [v8 personLocalIdentifier];
                    [v40 setObject:v12 forKeyedSubscript:v16];
                  }
                  else
                  {
                    sqlite3_int64 v12 = 0;
                  }
                }
              }
              __int16 v17 = [v8 localIdentifier];
              BOOL v18 = v17 == 0;

              if (v18)
              {
                __int16 v21 = +[PHFaceChangeRequest creationRequestForFace];
                int v22 = [v21 placeholderForCreatedFace];
                +[VCPFaceUtils assignPropertiesOfVCPPhotosFace:v8 toPHFaceChangeRequest:v21];
                [v21 setNameSource:6];
                id v54 = v22;
                long long v25 = +[NSArray arrayWithObjects:&v54 count:1];
                [v37 addFaces:v25];

                if (!v12) {
                  goto LABEL_25;
                }
                uint64_t v53 = v22;
                __int16 v23 = +[NSArray arrayWithObjects:&v53 count:1];
                [v12 addFaces:v23];
              }
              else
              {
                __int16 v19 = [v8 localIdentifier];
                uint64_t v56 = v19;
                int v20 = +[NSArray arrayWithObjects:&v56 count:1];
                __int16 v21 = +[PHFace fetchFacesWithLocalIdentifiers:v20 options:v39];

                int v22 = [v21 firstObject];
                __int16 v23 = +[PHFaceChangeRequest changeRequestForFace:v22];
                +[VCPFaceUtils assignPropertiesOfVCPPhotosFace:v8 toPHFaceChangeRequest:v23];
                [v23 setNameSource:6];
                if (v12)
                {
                  __int16 v55 = v22;
                  long long v24 = +[NSArray arrayWithObjects:&v55 count:1];
                  [v12 addFaces:v24];
                }
              }

LABEL_25:
              __int16 v7 = (char *)v7 + 1;
            }
            while (v5 != v7);
            id v5 = [v38 countByEnumeratingWithState:&v41 objects:v57 count:16];
            if (!v5)
            {
LABEL_27:

              long long v26 = +[PHAsset quickClassificationFaceAdjustmentVersion];
              [v37 setFaceAdjustmentVersion:v26];

              if ((int)MediaAnalysisLogLevel() >= 7)
              {
                uint64_t v27 = VCPLogInstance();
                if (os_log_type_enabled(v27, type))
                {
                  *(_DWORD *)long long buf = v28;
                  uint64_t v50 = v35;
                  __int16 v51 = 2048;
                  uint64_t v52 = v3;
                  _os_log_impl((void *)&_mh_execute_header, v27, type, "[QuickFaceID] Persisted %lu faces (%lu identified)", buf, 0x16u);
                }
              }
              break;
            }
          }
        }
      }
      id v32 = [obj countByEnumeratingWithState:&v45 objects:v58 count:16];
    }
    while (v32);
  }
}

void sub_100053CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_100053E64(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_100053EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000544F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  sub_100004484(&a16);
  sub_100004484(&a17);
  objc_destroyWeak(v31);
  objc_destroyWeak(location);

  objc_destroyWeak(&a28);
  _Unwind_Resume(a1);
}

void sub_1000545B8(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    long long v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[MAClientHandler] XPC connection interrupted", v6, 2u);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained cancelAllRequests];
  }
}

void sub_100054660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100054670(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    long long v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[MAClientHandler] XPC connection invalidated", v8, 2u);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained cancelAllRequests];
    uint64_t v6 = (void *)v5[1];
    v5[1] = 0;

    __int16 v7 = +[VCPClientManager sharedManager];
    [v7 removeClientHandler:v5];
  }
}

void sub_10005474C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000547C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005498C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100054C60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100054EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005537C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25)
{
  sub_100004484((const void **)(v29 - 128));
  _Unwind_Resume(a1);
}

BOOL sub_100055468(id a1)
{
  return 0;
}

void sub_100055470(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v4, v5))
    {
      int v6 = *(_DWORD *)(a1 + 72);
      int v12 = 67109120;
      LODWORD(v13) = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MAClientHandler] Completed MADRequestID %d", (uint8_t *)&v12, 8u);
    }
  }
  __int16 v7 = VCPSignPostLog();
  int v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 56);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v12 = 138412290;
    uint64_t v13 = v10;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "VCPMediaAnalysisClientHandler_IOSurface", "%@", (uint8_t *)&v12, 0xCu);
  }

  if (*(void *)(a1 + 64))
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  uint64_t v11 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t, void, id))(v11 + 16))(v11, 0, v3);
  }
  else {
    (*(void (**)(uint64_t, void, void))(v11 + 16))(v11, *(void *)(a1 + 40), 0);
  }
}

void sub_100055604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100055624(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100055AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

BOOL sub_100055B9C(id a1)
{
  return 0;
}

void sub_100055BA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v4, v5))
    {
      int v6 = *(_DWORD *)(a1 + 80);
      int v12 = 67109120;
      LODWORD(v13) = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MAClientHandler] Completed MADRequestID %d", (uint8_t *)&v12, 8u);
    }
  }
  __int16 v7 = VCPSignPostLog();
  int v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 56);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v12 = 138412290;
    uint64_t v13 = v10;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "VCPMediaAnalysisClientHandler_URL", "%@", (uint8_t *)&v12, 0xCu);
  }

  if (*(void *)(a1 + 64))
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  uint64_t v11 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t, void, id))(v11 + 16))(v11, 0, v3);
  }
  else {
    (*(void (**)(uint64_t, void, void))(v11 + 16))(v11, *(void *)(a1 + 40), 0);
  }
  sandbox_extension_release();
}

void sub_100055D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100055D60(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  sandbox_extension_release();
}

void sub_100055DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100056188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

BOOL sub_100056248(id a1)
{
  return 0;
}

void sub_100056250(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v4, v5))
    {
      int v6 = *(_DWORD *)(a1 + 72);
      int v12 = 67109120;
      LODWORD(v13) = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MAClientHandler] Completed MADRequestID %d", (uint8_t *)&v12, 8u);
    }
  }
  __int16 v7 = VCPSignPostLog();
  int v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 56);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v12 = 138412290;
    uint64_t v13 = v10;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "VCPMediaAnalysisClientHandler_URL", "%@", (uint8_t *)&v12, 0xCu);
  }

  if (*(void *)(a1 + 64))
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  uint64_t v11 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t, void, id))(v11 + 16))(v11, 0, v3);
  }
  else {
    (*(void (**)(uint64_t, void, void))(v11 + 16))(v11, *(void *)(a1 + 40), 0);
  }
}

void sub_1000563E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100056404(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000569FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100056EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

BOOL sub_100056FA0(id a1)
{
  return 0;
}

void sub_100056FA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v4, v5))
    {
      int v6 = *(_DWORD *)(a1 + 72);
      int v12 = 67109120;
      LODWORD(v13) = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MAClientHandler] Completed MADRequestID %d", (uint8_t *)&v12, 8u);
    }
  }
  __int16 v7 = VCPSignPostLog();
  int v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 56);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v12 = 138412290;
    uint64_t v13 = v10;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "VCPMediaAnalysisClientHandler_PHAsset", "%@", (uint8_t *)&v12, 0xCu);
  }

  if (*(void *)(a1 + 64))
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  uint64_t v11 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t, void, id))(v11 + 16))(v11, 0, v3);
  }
  else {
    (*(void (**)(uint64_t, void, void))(v11 + 16))(v11, *(void *)(a1 + 40), 0);
  }
}

void sub_10005713C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10005715C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100057638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,void *a28)
{
  sub_100004484((const void **)(v33 - 152));
  _Unwind_Resume(a1);
}

BOOL sub_100057748(id a1)
{
  return 0;
}

void sub_100057750(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v4, v5))
    {
      int v6 = *(_DWORD *)(a1 + 72);
      int v12 = 67109120;
      LODWORD(v13) = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MAClientHandler] Completed MADRequestID %d", (uint8_t *)&v12, 8u);
    }
  }
  __int16 v7 = VCPSignPostLog();
  int v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 56);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v12 = 138412290;
    uint64_t v13 = v10;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "VCPMediaAnalysisClientHandler_PHAsset", "%@", (uint8_t *)&v12, 0xCu);
  }

  if (*(void *)(a1 + 64))
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  uint64_t v11 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t, void, id))(v11 + 16))(v11, 0, v3);
  }
  else {
    (*(void (**)(uint64_t, void, void))(v11 + 16))(v11, *(void *)(a1 + 40), 0);
  }
}

void sub_1000578E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100057904(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100057F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

BOOL sub_10005809C(id a1)
{
  return 0;
}

void sub_1000580A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v4, v5))
    {
      int v6 = *(_DWORD *)(a1 + 80);
      int v19 = 67109120;
      LODWORD(v20) = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MAClientHandler] Completed MADRequestID %d", (uint8_t *)&v19, 8u);
    }
  }
  __int16 v7 = VCPSignPostLog();
  int v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 64);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v19 = 138412290;
    uint64_t v20 = v10;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "VCPMediaAnalysisClientHandler_PHAsset", "%@", (uint8_t *)&v19, 0xCu);
  }

  if (*(void *)(a1 + 72))
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  if (v3)
  {
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      uint64_t v11 = VCPLogInstance();
      os_log_type_t v12 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = *(void *)(a1 + 40);
        int v14 = *(_DWORD *)(a1 + 80);
        int v19 = 138412802;
        uint64_t v20 = v13;
        __int16 v21 = 1024;
        int v22 = v14;
        __int16 v23 = 2112;
        id v24 = v3;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "[MAClientHandler] Failed to process asset (%@) for MADRequestID %d - %@", (uint8_t *)&v19, 0x1Cu);
      }
    }
  }
  else if ((int)MediaAnalysisLogLevel() >= 7)
  {
    int v15 = VCPLogInstance();
    os_log_type_t v16 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = *(void *)(a1 + 40);
      int v18 = *(_DWORD *)(a1 + 80);
      int v19 = 138412546;
      uint64_t v20 = v17;
      __int16 v21 = 1024;
      int v22 = v18;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "[MAClientHandler] Finished processing asset (%@) for MADRequestID %d", (uint8_t *)&v19, 0x12u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100058340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100058368(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 3)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = *(_DWORD *)(a1 + 48);
      int v8 = 138412802;
      uint64_t v9 = v6;
      __int16 v10 = 1024;
      int v11 = v7;
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MAClientHandler] Failed to schedule processing asset (%@) for MADRequestID %d - %@", (uint8_t *)&v8, 0x1Cu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100058470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005882C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000588D4(id a1)
{
  return 0;
}

void sub_1000588DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      uint64_t v4 = VCPLogInstance();
      os_log_type_t v5 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v4, v5))
      {
        int v6 = *(_DWORD *)(a1 + 48);
        int v10 = 67109378;
        int v11 = v6;
        __int16 v12 = 2112;
        id v13 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MAClientHandler] Failed to process for MADRequestID %d - %@", (uint8_t *)&v10, 0x12u);
      }
    }
  }
  else if ((int)MediaAnalysisLogLevel() >= 6)
  {
    int v7 = VCPLogInstance();
    os_log_type_t v8 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v7, v8))
    {
      int v9 = *(_DWORD *)(a1 + 48);
      int v10 = 67109120;
      int v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[MAClientHandler] Completed MADRequestID %d", (uint8_t *)&v10, 8u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100058A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100058A78(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 3)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v4, v5))
    {
      id v6 = [*(id *)(a1 + 32) count];
      int v7 = *(_DWORD *)(a1 + 48);
      int v8 = 134218498;
      id v9 = v6;
      __int16 v10 = 1024;
      int v11 = v7;
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MAClientHandler] Failed to schedule processing %lu assets MADRequestID %d - %@", (uint8_t *)&v8, 0x1Cu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100058B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100058F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

id sub_100058F90(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

id sub_100058FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) handleResult:a2 atRequestIdx:a3 forRequestID:*(unsigned int *)(a1 + 40)];
}

BOOL sub_100058FD0(id a1)
{
  return 0;
}

void sub_100058FD8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    int v7 = VCPLogInstance();
    os_log_type_t v8 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v7, v8))
    {
      int v9 = *(_DWORD *)(a1 + 64);
      int v14 = 67109120;
      LODWORD(v15) = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[MAClientHandler] Completed MADRequestID %d", (uint8_t *)&v14, 8u);
    }
  }
  __int16 v10 = VCPSignPostLog();
  int v11 = v10;
  os_signpost_id_t v12 = *(void *)(a1 + 48);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = 138412290;
    uint64_t v15 = v13;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_INTERVAL_END, v12, "VCPMediaAnalysisClientHandler_VideoE2E", "%@", (uint8_t *)&v14, 0xCu);
  }

  if (*(void *)(a1 + 56))
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100059180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000591A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10005941C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100059488(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  sandbox_extension_release();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000594FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100059660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100059E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10005A634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10005AAE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005AF20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005B01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005B1B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005B428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005B640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

id sub_10005B674(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10005B690(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    if ((int)MediaAnalysisLogLevel() < 6)
    {
      int v9 = 0;
      goto LABEL_11;
    }
    id v5 = VCPLogInstance();
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v5, v7))
    {
      int v8 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v13) = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, v7, "[MAClientHandler] MADRequestID %d completed", buf, 8u);
    }
    uint64_t v4 = 0;
    goto LABEL_9;
  }
  uint64_t v4 = +[NSString stringWithFormat:@"MADRequestID %d failed %d", *(unsigned int *)(a1 + 48), a2];
  if ((int)MediaAnalysisLogLevel() >= 3)
  {
    id v5 = VCPLogInstance();
    os_log_type_t v6 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v5, v6))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "[MAClientHandler] %@", buf, 0xCu);
    }
LABEL_9:
  }
  int v9 = (void *)v4;
LABEL_11:
  uint64_t v10 = *(void *)(a1 + 40);
  int v11 = [(id)objc_opt_class() errorForStatus:a2 withDescription:v9];
  (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v11);
}

void sub_10005B848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10005B878(id a1)
{
  return 0;
}

uint64_t sub_10005B880(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10005C0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10005C520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10005C59C(id a1)
{
  return 0;
}

void sub_10005C5A4(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = VCPSignPostLog();
  id v5 = v4;
  os_signpost_id_t v6 = a1[6];
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    uint64_t v7 = a1[4];
    int v8 = 138412290;
    uint64_t v9 = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_END, v6, "VCPMediaAnalysisClientHandler_TextPrewarmingE2E", "%@", (uint8_t *)&v8, 0xCu);
  }

  if (a1[7])
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_10005C6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10005C6CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10005C9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

BOOL sub_10005CA80(id a1)
{
  return 0;
}

void sub_10005CA88(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = VCPSignPostLog();
  int v8 = v7;
  os_signpost_id_t v9 = a1[6];
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    uint64_t v10 = a1[4];
    int v11 = 138412290;
    uint64_t v12 = v10;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "VCPMediaAnalysisClientHandler_TextProcessingE2E", "%@", (uint8_t *)&v11, 0xCu);
  }

  if (a1[7])
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_10005CBB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10005CBD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10005CEA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10005CF20(id a1)
{
  return 0;
}

void sub_10005CF28(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = VCPSignPostLog();
  id v5 = v4;
  os_signpost_id_t v6 = a1[6];
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    uint64_t v7 = a1[4];
    int v8 = 138412290;
    uint64_t v9 = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_END, v6, "VCPMediaAnalysisClientHandler_MultiModalPrewarmingE2E", "%@", (uint8_t *)&v8, 0xCu);
  }

  if (a1[7])
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_10005D034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10005D050(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10005D330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10005D3B0(id a1)
{
  return 0;
}

void sub_10005D3B8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = VCPSignPostLog();
  int v8 = v7;
  os_signpost_id_t v9 = a1[6];
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    uint64_t v10 = a1[4];
    int v11 = 138412290;
    uint64_t v12 = v10;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "VCPMediaAnalysisClientHandler_MultiModalProcessingE2E", "%@", (uint8_t *)&v11, 0xCu);
  }

  if (a1[7])
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_10005D4E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10005D500(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10005DE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24)
{
  _Block_object_dispose((const void *)(v25 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005DFF8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10005E008(uint64_t a1)
{
}

void sub_10005E010(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_10005E130;
  v13[3] = &unk_10021B730;
  id v14 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  id v15 = v8;
  uint64_t v16 = v9;
  int v21 = *(_DWORD *)(a1 + 72);
  id v17 = v6;
  id v10 = *(id *)(a1 + 56);
  id v18 = v5;
  id v19 = v10;
  uint64_t v20 = *(void *)(a1 + 64);
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v7, v13);
}

void sub_10005E130(uint64_t a1)
{
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10005E3C4;
  v20[3] = &unk_10021B708;
  long long v2 = *(void **)(a1 + 32);
  id v21 = *(id *)(a1 + 40);
  [v2 enumerateObjectsUsingBlock:v20];
  id v3 = *(void **)(*(void *)(a1 + 48) + 32);
  uint64_t v4 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 88)];
  id v5 = [v3 objectForKeyedSubscript:v4];
  LOBYTE(v3) = v5 == 0;

  if ((v3 & 1) == 0)
  {
    if (*(void *)(a1 + 56))
    {
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        id v6 = VCPLogInstance();
        os_log_type_t v7 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v6, v7))
        {
          int v8 = *(_DWORD *)(a1 + 88);
          uint64_t v9 = *(void *)(a1 + 56);
          *(_DWORD *)long long buf = 67109378;
          int v23 = v8;
          __int16 v24 = 2112;
          uint64_t v25 = v9;
          id v10 = "[MAClientHandler] MADRequestID %d failed %@";
          id v11 = v6;
          os_log_type_t v12 = v7;
          uint32_t v13 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, buf, v13);
          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else if ((int)MediaAnalysisLogLevel() >= 6)
    {
      id v6 = VCPLogInstance();
      os_log_type_t v14 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v6, v14))
      {
        int v15 = *(_DWORD *)(a1 + 88);
        *(_DWORD *)long long buf = 67109120;
        int v23 = v15;
        id v10 = "[MAClientHandler] MADRequestID %d completed";
        id v11 = v6;
        os_log_type_t v12 = v14;
        uint32_t v13 = 8;
        goto LABEL_9;
      }
LABEL_10:
    }
    uint64_t v16 = *(void **)(*(void *)(a1 + 48) + 32);
    id v17 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 88)];
    [v16 removeObjectForKey:v17];

    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  uint64_t v18 = *(void *)(*(void *)(a1 + 80) + 8);
  id v19 = *(void **)(v18 + 40);
  *(void *)(v18 + 40) = 0;
}

void sub_10005E384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10005E3C4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v6 = VCPLogInstance();
    os_log_type_t v7 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v6, v7))
    {
      int v8 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a3];
      int v9 = 138412290;
      id v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[MAClientHandler] Releasing sandbox extension for %@", (uint8_t *)&v9, 0xCu);
    }
  }
  [v5 longLongValue];
  sandbox_extension_release();
}

void sub_10005E4C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10005E4EC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10005E508(uint64_t a1)
{
  long long v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 88)];
  id v3 = objc_msgSend(v2, "objectForKeyedSubscript:");

  if (v3)
  {
    id v14 = +[NSString stringWithFormat:@"MADRequestID %d already exists", *(unsigned int *)(a1 + 88)];
    uint64_t v4 = *(void *)(a1 + 56);
    id v5 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v14];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    id v15 = +[VCPFullAnalysisURLProcessingTask taskForURLAsset:*(void *)(a1 + 40) withOptions:*(void *)(a1 + 48) analysisTypes:*(void *)(a1 + 80) progressHandler:*(void *)(a1 + 64) completionHandler:*(void *)(a1 + 72)];
    os_log_type_t v7 = +[VCPMADTaskScheduler sharedInstance];
    id v8 = [v7 addForegroundTask:v15 withQoS:25];

    if (v8)
    {
      int v9 = +[NSNumber numberWithUnsignedInteger:v8];
      id v10 = *(void **)(*(void *)(a1 + 32) + 32);
      id v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 88)];
      [v10 setObject:v9 forKeyedSubscript:v11];
    }
    else
    {
      int v9 = +[NSString stringWithFormat:@"Failed to create task for MADRequestID %d", *(unsigned int *)(a1 + 88)];
      uint64_t v12 = *(void *)(a1 + 56);
      id v11 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v9];
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v11);
    }
  }
}

void sub_10005E730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005EC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  _Block_object_dispose((const void *)(v42 - 160), 8);
  _Unwind_Resume(a1);
}

id sub_10005ED24(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10005ED40(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10005EE34;
  v12[3] = &unk_10021A0B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[4] = v7;
  id v13 = v6;
  id v9 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v9;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, v12);
}

void sub_10005EE34(uint64_t a1)
{
  long long v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = MediaAnalysisLogLevel();
    if (v5)
    {
      if (v6 >= 3)
      {
        uint64_t v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v7, v8))
        {
          int v9 = *(_DWORD *)(a1 + 72);
          uint64_t v10 = *(void *)(a1 + 40);
          LODWORD(v21) = 67109378;
          HIDWORD(v21) = v9;
          LOWORD(v22) = 2112;
          *(void *)((char *)&v22 + 2) = v10;
          id v11 = "[MAClientHandler] MADRequestID %d failed %@";
          uint64_t v12 = v7;
          os_log_type_t v13 = v8;
          uint32_t v14 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)&v21, v14);
          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else if (v6 >= 6)
    {
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v15))
      {
        int v16 = *(_DWORD *)(a1 + 72);
        LODWORD(v21) = 67109120;
        HIDWORD(v21) = v16;
        id v11 = "[MAClientHandler] MADRequestID %d completed";
        uint64_t v12 = v7;
        os_log_type_t v13 = v15;
        uint32_t v14 = 8;
        goto LABEL_9;
      }
LABEL_10:
    }
    int v17 = *(void **)(*(void *)(a1 + 32) + 32);
    uint64_t v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72), v21, v22);
    [v17 removeObjectForKey:v18];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = 0;
}

void sub_10005F01C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005F040(uint64_t a1)
{
  long long v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 88)];
  id v3 = objc_msgSend(v2, "objectForKeyedSubscript:");

  if (v3)
  {
    id v14 = +[NSString stringWithFormat:@"MADRequestID %d already exists", *(unsigned int *)(a1 + 88)];
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v14];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    id v15 = +[VCPFullAnalysisAssetProcessingTask taskWithAsset:*(void *)(a1 + 40) andAnalysisTypes:*(void *)(a1 + 80) andOptions:*(void *)(a1 + 48) andProgressHandler:*(void *)(a1 + 64) andCompletionHandler:*(void *)(a1 + 72)];
    uint64_t v7 = +[VCPMADTaskScheduler sharedInstance];
    id v8 = [v7 addForegroundTask:v15 withQoS:25];

    if (v8)
    {
      int v9 = +[NSNumber numberWithUnsignedInteger:v8];
      uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 32);
      id v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 88)];
      [v10 setObject:v9 forKeyedSubscript:v11];
    }
    else
    {
      int v9 = +[NSString stringWithFormat:@"Failed to create task for MADRequestID %d", *(unsigned int *)(a1 + 88)];
      uint64_t v12 = *(void *)(a1 + 56);
      id v11 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v9];
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v11);
    }
  }
}

void sub_10005F268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005F770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_10005F810(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10005F82C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(NSObject **)(v6 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005F904;
  block[3] = &unk_10021B7A8;
  block[4] = v6;
  int v14 = *(_DWORD *)(a1 + 56);
  int v15 = a3;
  id v8 = *(id *)(a1 + 40);
  id v11 = v5;
  id v12 = v8;
  uint64_t v13 = *(void *)(a1 + 48);
  id v9 = v5;
  dispatch_async(v7, block);
}

void sub_10005F904(uint64_t a1)
{
  long long v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 68);
    if (v5)
    {
      uint64_t v6 = +[NSString stringWithFormat:@"MADRequestID %d failed %d", *(unsigned int *)(a1 + 64), v5];
      if ((int)MediaAnalysisLogLevel() < 3)
      {
LABEL_11:
        id v11 = (void *)v6;
LABEL_12:
        id v12 = *(void **)(*(void *)(a1 + 32) + 32);
        uint64_t v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
        [v12 removeObjectForKey:v13];

        uint64_t v15 = *(void *)(a1 + 40);
        uint64_t v14 = *(void *)(a1 + 48);
        int v16 = [(id)objc_opt_class() errorForStatus:*(unsigned int *)(a1 + 68) withDescription:v11];
        (*(void (**)(uint64_t, uint64_t, void *))(v14 + 16))(v14, v15, v16);

        goto LABEL_13;
      }
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v8 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v7, v8))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v20 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "[MAClientHandler] %@", buf, 0xCu);
      }
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() < 6)
      {
        id v11 = 0;
        goto LABEL_12;
      }
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v9 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v9))
      {
        int v10 = *(_DWORD *)(a1 + 64);
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v20) = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, v9, "[MAClientHandler] MADRequestID %d completed", buf, 8u);
      }
      uint64_t v6 = 0;
    }

    goto LABEL_11;
  }
LABEL_13:
  uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v18 = *(void **)(v17 + 40);
  *(void *)(v17 + 40) = 0;
}

void sub_10005FB4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005FB9C(uint64_t a1)
{
  long long v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
  id v3 = objc_msgSend(v2, "objectForKeyedSubscript:");

  if (v3)
  {
    id v14 = +[NSString stringWithFormat:@"MADRequestID %d already exists", *(unsigned int *)(a1 + 80)];
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v14];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    id v15 = +[VCPMediaAnalysisServiceTask taskForPhotoLibrary:*(void *)(a1 + 40) withAssetLocalIdentifiers:*(void *)(a1 + 48) realTime:*(unsigned __int8 *)(a1 + 84) progressHandler:*(void *)(a1 + 64) completionHandler:*(void *)(a1 + 72)];
    uint64_t v7 = +[VCPMADTaskScheduler sharedInstance];
    id v8 = [v7 addForegroundTask:v15 withQoS:25];

    if (v8)
    {
      os_log_type_t v9 = +[NSNumber numberWithUnsignedInteger:v8];
      int v10 = *(void **)(*(void *)(a1 + 32) + 32);
      id v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
      [v10 setObject:v9 forKeyedSubscript:v11];
    }
    else
    {
      os_log_type_t v9 = +[NSString stringWithFormat:@"Failed to create task for MADRequestID %d", *(unsigned int *)(a1 + 80)];
      uint64_t v12 = *(void *)(a1 + 56);
      id v11 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v9];
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v11);
    }
  }
}

void sub_10005FDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006025C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_100060660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100060BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_100060CA0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100060CBC(uint64_t a1, int a2)
{
  uint64_t v4 = +[VCPMADQoSManager sharedManager];
  [v4 disable];

  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(NSObject **)(v5 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100060DB0;
  block[3] = &unk_10021B820;
  block[4] = v5;
  int v12 = *(_DWORD *)(a1 + 64);
  int v13 = a2;
  long long v8 = *(_OWORD *)(a1 + 40);
  id v7 = (id)v8;
  long long v10 = v8;
  uint64_t v11 = *(void *)(a1 + 56);
  dispatch_async(v6, block);
}

void sub_100060DA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100060DB0(uint64_t a1)
{
  long long v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) stop];
    uint64_t v5 = *(unsigned int *)(a1 + 68);
    uint64_t v6 = *(unsigned int *)(a1 + 64);
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) elapsedTimeSeconds];
    long long v8 = +[NSString stringWithFormat:@"MADRequestID %d failed (err: %d) in %0.6fs", v6, v5, v7];
    if (*(_DWORD *)(a1 + 68))
    {
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        os_log_type_t v9 = VCPLogInstance();
        os_log_type_t v10 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v9, v10))
        {
          *(_DWORD *)long long buf = 138412290;
          v25[0] = v8;
          uint64_t v11 = "[MAClientHandler] %@";
          int v12 = v9;
          os_log_type_t v13 = v10;
          uint32_t v14 = 12;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, buf, v14);
          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else if ((int)MediaAnalysisLogLevel() >= 6)
    {
      os_log_type_t v9 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v9, v15))
      {
        int v16 = *(_DWORD *)(a1 + 64);
        [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) elapsedTimeSeconds];
        *(_DWORD *)long long buf = 67109376;
        LODWORD(v25[0]) = v16;
        WORD2(v25[0]) = 2048;
        *(void *)((char *)v25 + 6) = v17;
        uint64_t v11 = "[MAClientHandler] MADRequestID %d completed in %0.6fs";
        int v12 = v9;
        os_log_type_t v13 = v15;
        uint32_t v14 = 18;
        goto LABEL_9;
      }
LABEL_10:
    }
    uint64_t v18 = *(void **)(*(void *)(a1 + 32) + 32);
    uint64_t v19 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
    [v18 removeObjectForKey:v19];

    uint64_t v20 = *(void *)(a1 + 40);
    uint64_t v21 = [(id)objc_opt_class() errorForStatus:*(unsigned int *)(a1 + 68) withDescription:v8];
    (*(void (**)(uint64_t, void *))(v20 + 16))(v20, v21);
  }
  uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8);
  int v23 = *(void **)(v22 + 40);
  *(void *)(v22 + 40) = 0;
}

void sub_100061024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100061074(uint64_t a1)
{
  long long v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 88)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    id v56 = +[NSString stringWithFormat:@"MADRequestID %d already exists", *(unsigned int *)(a1 + 88)];
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v56];
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }
  else
  {
    long long v8 = 0;
    switch(*(void *)(a1 + 80))
    {
      case 1:
        os_log_type_t v9 = [*(id *)(a1 + 40) objectForKeyedSubscript:VCPPhotosProcessing_ForceFullScanKey];
        unsigned int v10 = [v9 BOOLValue];

        if (v10) {
          [*(id *)(a1 + 32) _resetProcessingStatusForTaskID:1 andPhotoLibrary:*(void *)(a1 + 48)];
        }
        uint64_t v68 = *(void *)(a1 + 48);
        uint64_t v11 = +[NSArray arrayWithObjects:&v68 count:1];
        uint64_t v12 = +[VCPLibraryProcessingTask taskWithPhotoLibraries:v11 andOptions:*(void *)(a1 + 40) andProgressHandler:*(void *)(a1 + 64) andCompletionHandler:*(void *)(a1 + 72) andCancelBlock:&stru_10021B8C8];
        goto LABEL_42;
      case 2:
        os_log_type_t v13 = [*(id *)(a1 + 40) objectForKeyedSubscript:VCPPhotosProcessing_ForceFullScanKey];
        unsigned int v14 = [v13 BOOLValue];

        if (v14) {
          [*(id *)(a1 + 32) _resetProcessingStatusForTaskID:2 andPhotoLibrary:*(void *)(a1 + 48)];
        }
        uint64_t v74 = *(void *)(a1 + 48);
        uint64_t v11 = +[NSArray arrayWithObjects:&v74 count:1];
        uint64_t v12 = +[VCPMADSceneLibraryProcessingTask taskWithPhotoLibraries:v11 cancelBlock:&stru_10021B868 progressHandler:*(void *)(a1 + 64) andCompletionHandler:*(void *)(a1 + 72)];
        goto LABEL_42;
      case 3:
        os_log_type_t v15 = [*(id *)(a1 + 40) objectForKeyedSubscript:VCPPhotosProcessing_ForceFullScanKey];
        unsigned int v16 = [v15 BOOLValue];

        if (v16) {
          [*(id *)(a1 + 32) _resetProcessingStatusForTaskID:3 andPhotoLibrary:*(void *)(a1 + 48)];
        }
        uint64_t v73 = *(void *)(a1 + 48);
        uint64_t v11 = +[NSArray arrayWithObjects:&v73 count:1];
        uint64_t v12 = +[VCPFaceLibraryProcessingTask taskWithPhotoLibraries:v11 andOptions:*(void *)(a1 + 40) andProgressHandler:*(void *)(a1 + 64) andCompletionHandler:*(void *)(a1 + 72) andCancelBlock:&stru_10021B888];
        goto LABEL_42;
      case 7:
        uint64_t v11 = [*(id *)(a1 + 40) objectForKeyedSubscript:VCPTurboProcessing_VCPTaskIDsKey];
        if (!v11)
        {
          if ((int)MediaAnalysisLogLevel() >= 5)
          {
            uint64_t v17 = VCPLogInstance();
            os_log_type_t v18 = VCPLogToOSLogType[5];
            if (os_log_type_enabled(v17, v18))
            {
              int v19 = *(_DWORD *)(a1 + 88);
              *(_DWORD *)long long buf = 67109378;
              *(_DWORD *)v71 = v19;
              *(_WORD *)&v71[4] = 2112;
              *(void *)&v71[6] = VCPTurboProcessing_VCPTaskIDsKey;
              _os_log_impl((void *)&_mh_execute_header, v17, v18, "[MAClientHandler] MADRequestID %d: %@ not specified; added Photos Scene and Face Processing",
                buf,
                0x12u);
            }
          }
          uint64_t v11 = &off_100230380;
        }
        uint64_t v20 = [*(id *)(a1 + 40) objectForKeyedSubscript:VCPPhotosProcessing_ForceFullScanKey];
        unsigned int v21 = [v20 BOOLValue];

        if (v21)
        {
          long long v65 = 0u;
          long long v63 = 0u;
          long long v64 = 0u;
          long long v62 = 0u;
          uint64_t v22 = v11;
          id v23 = [v22 countByEnumeratingWithState:&v62 objects:v72 count:16];
          if (v23)
          {
            uint64_t v24 = *(void *)v63;
            do
            {
              for (unint64_t i = 0; i != v23; unint64_t i = (char *)i + 1)
              {
                if (*(void *)v63 != v24) {
                  objc_enumerationMutation(v22);
                }
                objc_msgSend(*(id *)(a1 + 32), "_resetProcessingStatusForTaskID:andPhotoLibrary:", objc_msgSend(*(id *)(*((void *)&v62 + 1) + 8 * i), "unsignedIntValue"), *(void *)(a1 + 48));
              }
              id v23 = [v22 countByEnumeratingWithState:&v62 objects:v72 count:16];
            }
            while (v23);
          }

          if ([v22 containsObject:&off_10022DAE0])
          {
            [*(id *)(a1 + 32) _resetProcessingStatusForTaskID:2 andPhotoLibrary:*(void *)(a1 + 48)];
            [*(id *)(a1 + 32) _resetProcessingStatusForTaskID:3 andPhotoLibrary:*(void *)(a1 + 48)];
            [*(id *)(a1 + 32) _resetProcessingStatusForTaskID:10 andPhotoLibrary:*(void *)(a1 + 48)];
            [*(id *)(a1 + 32) _resetProcessingStatusForTaskID:12 andPhotoLibrary:*(void *)(a1 + 48)];
          }
          if ([v22 containsObject:&off_10022DAF8]) {
            [*(id *)(a1 + 32) _resetPECFailureVersionForPhotoLibrary:*(void *)(a1 + 48)];
          }
        }
        v60[0] = _NSConcreteStackBlock;
        v60[1] = 3221225472;
        v60[2] = sub_100061D1C;
        v60[3] = &unk_100219940;
        id v61 = *(id *)(a1 + 72);
        long long v26 = objc_retainBlock(v60);
        long long v8 = +[VCPCompoundMADTask taskWithPhotoLibrary:*(void *)(a1 + 48) forVCPTaskIDs:v11 andOptions:*(void *)(a1 + 40) andProgressHandler:*(void *)(a1 + 64) andCompletionHandler:v26 andCancelBlock:&stru_10021B8A8];

        goto LABEL_43;
      case 8:
        if ([(id)objc_opt_class() disablePhotosPostCaptureProcessing])
        {
          uint64_t v27 = +[NSString stringWithFormat:@"Photos post-capture processing has been disabled - %d", *(unsigned int *)(a1 + 88)];
          uint64_t v28 = *(void *)(a1 + 56);
          uint64_t v29 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v27];
          (*(void (**)(uint64_t, void *))(v28 + 16))(v28, v29);
        }
        else
        {
          uint64_t v50 = +[MADPhotosDeferredBackgroundSystemTask sharedTask];
          id v59 = 0;
          [v50 submitTask:&v59];
          id v51 = v59;

          if (v51)
          {
            if ((int)MediaAnalysisLogLevel() >= 3)
            {
              uint64_t v52 = VCPLogInstance();
              os_log_type_t v53 = VCPLogToOSLogType[3];
              if (os_log_type_enabled(v52, v53))
              {
                id v54 = +[MADPhotosDeferredBackgroundSystemTask identifier];
                *(_DWORD *)long long buf = 138412546;
                *(void *)v71 = v54;
                *(_WORD *)&v71[8] = 2112;
                *(void *)&v71[10] = v51;
                _os_log_impl((void *)&_mh_execute_header, v52, v53, "[MAClientHandler][%@] Failed to submit the BGST task with error: %@", buf, 0x16u);
              }
            }
            (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
          }
          else
          {
            uint64_t v69 = *(void *)(a1 + 48);
            __int16 v55 = +[NSArray arrayWithObjects:&v69 count:1];
            v57[0] = _NSConcreteStackBlock;
            v57[1] = 3221225472;
            v57[2] = sub_100061D98;
            v57[3] = &unk_100219940;
            float v58 = (_UNKNOWN **)*(id *)(a1 + 72);
            long long v8 = +[VCPPhotosCaptureProcessingTask taskWithPhotoLibraries:v55 andCompletionHandler:v57];

            uint64_t v11 = v58;
LABEL_43:

LABEL_44:
            os_log_type_t v34 = [*(id *)(a1 + 40) objectForKeyedSubscript:VCPTurboProcessing_QualityOfServiceKey];
            uint64_t v35 = v34;
            if (v34) {
              uint64_t v36 = (uint64_t)[v34 unsignedIntValue];
            }
            else {
              uint64_t v36 = 21;
            }
            int v37 = [*(id *)(a1 + 40) objectForKeyedSubscript:VCPTurboProcessing_DutyCyclingKey];
            id v38 = v37;
            if (v37)
            {
              if ([v37 BOOLValue])
              {
                NSSelectorFromString(@"qosBlock");
                if (objc_opt_respondsToSelector())
                {
                  if ((int)MediaAnalysisLogLevel() >= 6)
                  {
                    id v39 = VCPLogInstance();
                    os_log_type_t v40 = VCPLogToOSLogType[6];
                    if (os_log_type_enabled(v39, v40))
                    {
                      *(_WORD *)long long buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v39, v40, "[MAClientHandler] DAS duty cycling enabled", buf, 2u);
                    }
                  }
                  long long v41 = +[VCPMADQoSManager sharedManager];
                  [v41 enable];
                }
              }
            }
            uint64_t v42 = +[VCPMADTaskScheduler sharedInstance];
            id v43 = [v42 addForegroundTask:v8 withQoS:v36];

            if (v43)
            {
              long long v44 = +[NSNumber numberWithUnsignedInteger:v43];
              long long v45 = *(void **)(*(void *)(a1 + 32) + 32);
              long long v46 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 88)];
              [v45 setObject:v44 forKeyedSubscript:v46];
            }
            else
            {
              uint64_t v47 = *(unsigned int *)(a1 + 88);
              long long v48 = VCPTaskIDDescription(*(void *)(a1 + 80));
              long long v44 = +[NSString stringWithFormat:@"Failed to create task for MADRequestID %d for task %@(%lu)", v47, v48, *(void *)(a1 + 80)];

              uint64_t v49 = *(void *)(a1 + 56);
              long long v46 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v44];
              (*(void (**)(uint64_t, void *))(v49 + 16))(v49, v46);
            }
          }
        }
        break;
      case 0xALL:
        __int16 v30 = [*(id *)(a1 + 40) objectForKeyedSubscript:VCPPhotosProcessing_ForceFullScanKey];
        unsigned int v31 = [v30 BOOLValue];

        if (v31) {
          [*(id *)(a1 + 32) _resetProcessingStatusForTaskID:10 andPhotoLibrary:*(void *)(a1 + 48)];
        }
        uint64_t v67 = *(void *)(a1 + 48);
        uint64_t v11 = +[NSArray arrayWithObjects:&v67 count:1];
        uint64_t v12 = +[VCPMADOCRLibraryProcessingTask taskWithPhotoLibraries:v11 cancelBlock:&stru_10021B8E8 progressHandler:*(void *)(a1 + 64) andCompletionHandler:*(void *)(a1 + 72)];
        goto LABEL_42;
      case 0xCLL:
        id v32 = [*(id *)(a1 + 40) objectForKeyedSubscript:VCPPhotosProcessing_ForceFullScanKey];
        unsigned int v33 = [v32 BOOLValue];

        if (v33) {
          [*(id *)(a1 + 32) _resetProcessingStatusForTaskID:12 andPhotoLibrary:*(void *)(a1 + 48)];
        }
        uint64_t v66 = *(void *)(a1 + 48);
        uint64_t v11 = +[NSArray arrayWithObjects:&v66 count:1];
        uint64_t v12 = +[VCPMADVisualSearchLibraryProcessingTask taskWithPhotoLibraries:v11 cancelBlock:&stru_10021B908 progressHandler:*(void *)(a1 + 64) andCompletionHandler:*(void *)(a1 + 72)];
LABEL_42:
        long long v8 = (void *)v12;
        goto LABEL_43;
      default:
        goto LABEL_44;
    }
  }
}

void sub_100061B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _Unwind_Resume(a1);
}

BOOL sub_100061D0C(id a1)
{
  return 0;
}

BOOL sub_100061D14(id a1)
{
  return 0;
}

void sub_100061D1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v3 code]);
}

void sub_100061D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_100061D90(id a1)
{
  return 0;
}

void sub_100061D98(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v3 code]);
}

void sub_100061DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_100061E0C(id a1)
{
  return 0;
}

BOOL sub_100061E14(id a1)
{
  return 0;
}

BOOL sub_100061E1C(id a1)
{
  return 0;
}

void sub_1000621F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10006226C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  long long v8 = *(NSObject **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100062360;
  v12[3] = &unk_10021A0B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[4] = v7;
  id v13 = v6;
  id v9 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v9;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, v12);
}

void sub_100062360(uint64_t a1)
{
  long long v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = MediaAnalysisLogLevel();
    if (v5)
    {
      if (v6 >= 3)
      {
        uint64_t v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v7, v8))
        {
          int v9 = *(_DWORD *)(a1 + 72);
          uint64_t v10 = *(void *)(a1 + 40);
          LODWORD(v21) = 67109378;
          HIDWORD(v21) = v9;
          LOWORD(v22) = 2112;
          *(void *)((char *)&v22 + 2) = v10;
          id v11 = "[MAClientHandler] MADRequestID %d failed %@";
          uint64_t v12 = v7;
          os_log_type_t v13 = v8;
          uint32_t v14 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)&v21, v14);
          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else if (v6 >= 6)
    {
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v15))
      {
        int v16 = *(_DWORD *)(a1 + 72);
        LODWORD(v21) = 67109120;
        HIDWORD(v21) = v16;
        id v11 = "[MAClientHandler] MADRequestID %d completed";
        uint64_t v12 = v7;
        os_log_type_t v13 = v15;
        uint32_t v14 = 8;
        goto LABEL_9;
      }
LABEL_10:
    }
    int v17 = *(void **)(*(void *)(a1 + 32) + 32);
    os_log_type_t v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72), v21, v22);
    [v17 removeObjectForKey:v18];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = 0;
}

void sub_100062548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006256C(uint64_t a1)
{
  long long v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    id v22 = +[NSString stringWithFormat:@"MADRequestID %d already exists", *(unsigned int *)(a1 + 80)];
    uint64_t v5 = *(void *)(a1 + 56);
    int v6 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v22];
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v6);
  }
  else
  {
    memset(&v24, 0, sizeof(v24));
    CFDictionaryRef v8 = [*(id *)(a1 + 40) objectForKeyedSubscript:VCPVideoFramesCaption_TimeRangeKey];
    CMTimeRangeMakeFromDictionary(&v24, v8);

    int v9 = [*(id *)(a1 + 40) objectForKeyedSubscript:VCPVideoFramesCaption_FrameRateKey];
    [v9 floatValue];
    unsigned int v11 = v10;

    uint64_t v12 = *(void *)(a1 + 48);
    CMTimeRange v23 = v24;
    os_log_type_t v13 = +[VCPVideoFramesCaptionTask taskWithFrames:v12 frameRate:&v23 timeRange:*(void *)(a1 + 64) andCompletionHandler:COERCE_DOUBLE(__PAIR64__(v24.duration.flags, v11))];
    uint32_t v14 = +[VCPMADTaskScheduler sharedInstance];
    id v15 = [v14 addForegroundTask:v13 withQoS:25];

    if (v15)
    {
      int v16 = +[NSNumber numberWithUnsignedInteger:v15];
      int v17 = *(void **)(*(void *)(a1 + 32) + 32);
      os_log_type_t v18 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
      [v17 setObject:v16 forKeyedSubscript:v18];
    }
    else
    {
      uint64_t v19 = *(unsigned int *)(a1 + 80);
      uint64_t v20 = VCPTaskIDDescription(*(void *)(a1 + 72));
      int v16 = +[NSString stringWithFormat:@"Failed to create task for MADRequestID %d for task %@(%lu)", v19, v20, *(void *)(a1 + 72)];

      uint64_t v21 = *(void *)(a1 + 56);
      os_log_type_t v18 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v16];
      (*(void (**)(uint64_t, void, void *))(v21 + 16))(v21, 0, v18);
    }
  }
}

void sub_100062828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_100062EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  _Block_object_dispose((const void *)(v52 - 176), 8);
  _Unwind_Resume(a1);
}

id sub_100063048(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100063064(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  CFDictionaryRef v8 = *(NSObject **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100063158;
  v12[3] = &unk_10021A0B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[4] = v7;
  id v13 = v6;
  id v9 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v9;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, v12);
}

void sub_100063158(uint64_t a1)
{
  long long v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = MediaAnalysisLogLevel();
    if (v5)
    {
      if (v6 >= 3)
      {
        uint64_t v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v7, v8))
        {
          int v9 = *(_DWORD *)(a1 + 72);
          id v10 = [*(id *)(a1 + 40) description];
          int v17 = 67109378;
          int v18 = v9;
          __int16 v19 = 2112;
          uint64_t v20 = v10;
          _os_log_impl((void *)&_mh_execute_header, v7, v8, "[MAClientHandler] MADRequestID %d failed %@", (uint8_t *)&v17, 0x12u);
        }
LABEL_9:
      }
    }
    else if (v6 >= 6)
    {
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v11 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v11))
      {
        int v12 = *(_DWORD *)(a1 + 72);
        int v17 = 67109120;
        int v18 = v12;
        _os_log_impl((void *)&_mh_execute_header, v7, v11, "[MAClientHandler] MADRequestID %d completed", (uint8_t *)&v17, 8u);
      }
      goto LABEL_9;
    }
    id v13 = *(void **)(*(void *)(a1 + 32) + 32);
    id v14 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
    [v13 removeObjectForKey:v14];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = 0;
}

void sub_10006335C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100063384(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [(id)objc_opt_class() errorForStatus:a2 withDescription:@"Scene Analysis Failed"];
  (*(void (**)(uint64_t, void))(v2 + 16))(v2, 0);
}

void sub_1000633F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006340C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v16 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 112)];
  id v3 = objc_msgSend(v2, "objectForKeyedSubscript:");

  if (v3)
  {
    id v17 = +[NSString stringWithFormat:@"MADRequestID %d already exists", *(unsigned int *)(a1 + 112)];
    uint64_t v4 = *(void *)(a1 + 72);
    uint64_t v5 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v17];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    switch(*(void *)(a1 + 104))
    {
      case 2:
        uint64_t v7 = [[VCPMADSceneAssetProcessingTask alloc] initWithLocalIdentifiers:*(void *)(a1 + 48) fromPhotoLibraryWithURL:*(void *)(a1 + 56) cancelBlock:&stru_10021B978 progressHandler:*(void *)(a1 + 80) completionHandler:*(void *)(a1 + 96)];
        goto LABEL_12;
      case 3:
        uint64_t v7 = +[VCPFaceAssetProcessingTask taskWithAssets:*(void *)(a1 + 40) andProgressHandler:*(void *)(a1 + 80) andCompletionHandler:*(void *)(a1 + 88)];
        goto LABEL_12;
      case 4:
        uint64_t v7 = +[VCPEffectsAssetProcessingTask taskWithAssets:*(void *)(a1 + 40) progressHandler:*(void *)(a1 + 80) andCompletionHandler:*(void *)(a1 + 88)];
        goto LABEL_12;
      case 5:
        uint64_t v7 = +[VCPPhotosSceneprintAssetProcessingTask taskWithAssets:*(void *)(a1 + 40) options:*(void *)(a1 + 64) andCompletionHandler:*(void *)(a1 + 88)];
        goto LABEL_12;
      case 6:
        uint64_t v7 = +[VCPVideoStabilizationAssetProcessingTask taskWithAssets:*(void *)(a1 + 40) andOptions:*(void *)(a1 + 64) andCompletionHandler:*(void *)(a1 + 88)];
LABEL_12:
        int v18 = v7;
        break;
      default:
        int v18 = 0;
        break;
    }
    os_log_type_t v8 = +[VCPMADTaskScheduler sharedInstance];
    id v9 = [v8 addForegroundTask:v18 withQoS:25];

    if (v9)
    {
      id v10 = +[NSNumber numberWithUnsignedInteger:v9];
      os_log_type_t v11 = *(void **)(*(void *)(a1 + 32) + 32);
      int v12 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 112)];
      [v11 setObject:v10 forKeyedSubscript:v12];
    }
    else
    {
      uint64_t v13 = *(unsigned int *)(a1 + 112);
      id v14 = VCPTaskIDDescription(*(void *)(a1 + 104));
      id v10 = +[NSString stringWithFormat:@"Failed to create task for MADRequestID %d for task %@(%lu)", v13, v14, *(void *)(a1 + 104)];

      uint64_t v15 = *(void *)(a1 + 72);
      int v12 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v10];
      (*(void (**)(uint64_t, void, void *))(v15 + 16))(v15, 0, v12);
    }
  }
}

void sub_10006370C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

BOOL sub_10006377C(id a1)
{
  return 0;
}

void sub_100063EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_100064014(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    int v6 = VCPLogInstance();
    os_log_type_t v7 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t v8 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a3];
      int v9 = 138412290;
      id v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[MAClientHandler] Releasing sandbox extension for %@", (uint8_t *)&v9, 0xCu);
    }
  }
  [v5 longLongValue];
  sandbox_extension_release();
}

void sub_100064114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100064584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10006461C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100064638(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(NSObject **)(v3 + 24);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000646E4;
  v7[3] = &unk_10021A3B8;
  v7[4] = v3;
  int v10 = *(_DWORD *)(a1 + 56);
  int v11 = a2;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v8 = v5;
  uint64_t v9 = v6;
  dispatch_async(v4, v7);
}

void sub_1000646E4(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    id v5 = *(void **)(*(void *)(a1 + 32) + 32);
    uint64_t v6 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
    [v5 removeObjectForKey:v6];

    LODWORD(v6) = *(_DWORD *)(a1 + 60);
    int v7 = MediaAnalysisLogLevel();
    if (v6)
    {
      if (v7 >= 3)
      {
        id v8 = VCPLogInstance();
        os_log_type_t v9 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v8, v9))
        {
          int v10 = *(_DWORD *)(a1 + 56);
          int v11 = *(_DWORD *)(a1 + 60);
          *(_DWORD *)long long buf = 67109376;
          int v25 = v10;
          __int16 v26 = 1024;
          int v27 = v11;
          _os_log_impl((void *)&_mh_execute_header, v8, v9, "[MAClientHandler] MADRequestID %d failed %d", buf, 0xEu);
        }
      }
      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v13 = *(int *)(a1 + 60);
      id v14 = +[NSString stringWithFormat:@"Recents processing failed", NSLocalizedDescriptionKey];
      CMTimeRange v23 = v14;
      uint64_t v15 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
      id v16 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:v13 userInfo:v15];
      (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v16);
    }
    else
    {
      if (v7 >= 6)
      {
        id v17 = VCPLogInstance();
        os_log_type_t v18 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v17, v18))
        {
          int v19 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)long long buf = 67109120;
          int v25 = v19;
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "[MAClientHandler] MADRequestID %d completed", buf, 8u);
        }
      }
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
  uint64_t v20 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v21 = *(void **)(v20 + 40);
  *(void *)(v20 + 40) = 0;
}

void sub_100064974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000649B4(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (!v4)
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100064D58;
    v22[3] = &unk_10021B9E8;
    void v22[4] = *(void *)(a1 + 72);
    id v8 = objc_retainBlock(v22);
    uint64_t v9 = *(void *)(a1 + 72);
    if (v9 == 12)
    {
      int v10 = [[VCPMADVisualSearchFetchProcessingTask alloc] initWithFetchBlock:v8 photoLibraryWithURL:*(void *)(a1 + 40) cancelBlock:&stru_10021BA08 progressHandler:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 64)];
      if (v10)
      {
        int v11 = +[VCPMADTaskScheduler sharedInstance];
        id v12 = [v11 addForegroundTask:v10 withQoS:25];

        if (v12)
        {
          uint64_t v13 = +[NSNumber numberWithUnsignedInteger:v12];
          id v14 = *(void **)(*(void *)(a1 + 32) + 32);
          uint64_t v15 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
          [v14 setObject:v13 forKeyedSubscript:v15];
        }
        else
        {
          uint64_t v18 = *(unsigned int *)(a1 + 80);
          int v19 = VCPTaskIDDescription(*(void *)(a1 + 72));
          uint64_t v13 = +[NSString stringWithFormat:@"Failed to create task for MADRequestID %d for task %@(%lu)", v18, v19, *(void *)(a1 + 72)];

          uint64_t v20 = *(void *)(a1 + 48);
          uint64_t v15 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v13];
          (*(void (**)(uint64_t, void *))(v20 + 16))(v20, v15);
        }

        goto LABEL_13;
      }
      uint64_t v9 = *(void *)(a1 + 72);
    }
    id v16 = VCPTaskIDDescription(v9);
    int v10 = +[NSString stringWithFormat:@"%@ not supported on this platform", v16];

    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v13 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v10];
    (*(void (**)(uint64_t, void *))(v17 + 16))(v17, v13);
LABEL_13:

    return;
  }
  id v21 = +[NSString stringWithFormat:@"MADRequestID %d already exists", *(unsigned int *)(a1 + 80)];
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v21];
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
}

void sub_100064CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

id sub_100064D58(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[NSSortDescriptor sortDescriptorWithKey:@"creationDate" ascending:0];
  id v16 = v4;
  uint64_t v5 = +[NSArray arrayWithObjects:&v16 count:1];
  [v3 setSortDescriptors:v5];

  uint64_t v6 = +[NSDate dateWithTimeIntervalSinceNow:-86400.0];
  int v7 = +[PHAsset fetchAssetsFromCameraSinceDate:v6 options:v3];
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    id v8 = VCPLogInstance();
    os_log_type_t v9 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v8, v9))
    {
      int v10 = VCPTaskIDDescription(*(void *)(a1 + 32));
      int v12 = 138412546;
      uint64_t v13 = v10;
      __int16 v14 = 1024;
      unsigned int v15 = [v7 count];
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%@] Evaluating %d recently captured assets", (uint8_t *)&v12, 0x12u);
    }
  }

  return v7;
}

void sub_100064EFC(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

BOOL sub_100064F68(id a1)
{
  return 0;
}

void sub_1000651A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Unwind_Resume(a1);
}

void sub_1000651DC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v6 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  uint64_t v3 = objc_msgSend(v2, "objectForKeyedSubscript:");
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100065264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100065538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_100065590(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 32) allValues];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10006578C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000658F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000659BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100065D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100065D74(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100065D90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100065E84;
  v12[3] = &unk_10021A0B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[4] = v7;
  id v13 = v6;
  id v9 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v9;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, v12);
}

void sub_100065E84(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = MediaAnalysisLogLevel();
    if (v5)
    {
      if (v6 >= 3)
      {
        uint64_t v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v7, v8))
        {
          int v9 = *(_DWORD *)(a1 + 72);
          uint64_t v10 = *(void *)(a1 + 40);
          LODWORD(v21) = 67109378;
          HIDWORD(v21) = v9;
          LOWORD(v22) = 2112;
          *(void *)((char *)&v22 + 2) = v10;
          id v11 = "[MAClientHandler] MADRequestID %d failed %@";
          int v12 = v7;
          os_log_type_t v13 = v8;
          uint32_t v14 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)&v21, v14);
          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else if (v6 >= 6)
    {
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v15))
      {
        int v16 = *(_DWORD *)(a1 + 72);
        LODWORD(v21) = 67109120;
        HIDWORD(v21) = v16;
        id v11 = "[MAClientHandler] MADRequestID %d completed";
        int v12 = v7;
        os_log_type_t v13 = v15;
        uint32_t v14 = 8;
        goto LABEL_9;
      }
LABEL_10:
    }
    int v17 = *(void **)(*(void *)(a1 + 32) + 32);
    uint64_t v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72), v21, v22);
    [v17 removeObjectForKey:v18];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = 0;
}

void sub_10006606C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100066090(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 96)];
  uint64_t v3 = objc_msgSend(v2, "objectForKeyedSubscript:");

  if (v3)
  {
    id v14 = +[NSString stringWithFormat:@"MADRequestID %d already exists", *(unsigned int *)(a1 + 96)];
    uint64_t v4 = *(void *)(a1 + 72);
    uint64_t v5 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v14];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    id v15 = +[VCPRequestSuggestedPersonsTask taskWithPersonWithLocalIdentifier:*(void *)(a1 + 40) toBeConfirmedPersonSuggestions:*(void *)(a1 + 48) toBeRejectedPersonSuggestions:*(void *)(a1 + 56) andPhotoLibraryURL:*(void *)(a1 + 64) andProgressHandler:*(void *)(a1 + 80) andReply:*(void *)(a1 + 88)];
    uint64_t v7 = +[VCPMADTaskScheduler sharedInstance];
    id v8 = [v7 addForegroundTask:v15 withQoS:25];

    if (v8)
    {
      int v9 = +[NSNumber numberWithUnsignedInteger:v8];
      uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 32);
      id v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 96)];
      [v10 setObject:v9 forKeyedSubscript:v11];
    }
    else
    {
      int v9 = +[NSString stringWithFormat:@"Failed to create task for MADRequestID %d", *(unsigned int *)(a1 + 96)];
      uint64_t v12 = *(void *)(a1 + 72);
      id v11 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v9];
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v11);
    }
  }
}

void sub_1000662B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100066628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100066650(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10006666C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(NSObject **)(v6 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100066744;
  block[3] = &unk_10021BAA8;
  int v15 = *(_DWORD *)(a1 + 56);
  block[4] = v6;
  id v12 = v5;
  id v8 = *(id *)(a1 + 40);
  char v16 = a2;
  uint64_t v9 = *(void *)(a1 + 48);
  id v13 = v8;
  uint64_t v14 = v9;
  id v10 = v5;
  dispatch_async(v7, block);
}

void sub_100066744(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = MediaAnalysisLogLevel();
    if (v5)
    {
      if (v6 >= 3)
      {
        uint64_t v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v7, v8))
        {
          int v9 = *(_DWORD *)(a1 + 64);
          uint64_t v10 = *(void *)(a1 + 40);
          LODWORD(v21) = 67109378;
          HIDWORD(v21) = v9;
          LOWORD(v22) = 2112;
          *(void *)((char *)&v22 + 2) = v10;
          id v11 = "[MAClientHandler] MADRequestID %d failed %@";
          id v12 = v7;
          os_log_type_t v13 = v8;
          uint32_t v14 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)&v21, v14);
          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else if (v6 >= 6)
    {
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v15))
      {
        int v16 = *(_DWORD *)(a1 + 64);
        LODWORD(v21) = 67109120;
        HIDWORD(v21) = v16;
        id v11 = "[MAClientHandler] MADRequestID %d completed";
        id v12 = v7;
        os_log_type_t v13 = v15;
        uint32_t v14 = 8;
        goto LABEL_9;
      }
LABEL_10:
    }
    int v17 = *(void **)(*(void *)(a1 + 32) + 32);
    uint64_t v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64), v21, v22);
    [v17 removeObjectForKey:v18];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = 0;
}

void sub_10006692C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100066950(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
  uint64_t v3 = objc_msgSend(v2, "objectForKeyedSubscript:");

  if (v3)
  {
    id v14 = +[NSString stringWithFormat:@"MADRequestID %d already exists", *(unsigned int *)(a1 + 80)];
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v14];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    id v15 = +[VCPRequestUpdateKeyFacesOfPersonsTask taskWithLocalIdentifiers:*(void *)(a1 + 40) andForceUpdate:*(unsigned __int8 *)(a1 + 84) andPhotoLibraryURL:*(void *)(a1 + 48) andProgressHandler:*(void *)(a1 + 64) andReply:*(void *)(a1 + 72)];
    uint64_t v7 = +[VCPMADTaskScheduler sharedInstance];
    id v8 = [v7 addForegroundTask:v15 withQoS:25];

    if (v8)
    {
      int v9 = +[NSNumber numberWithUnsignedInteger:v8];
      uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 32);
      id v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
      [v10 setObject:v9 forKeyedSubscript:v11];
    }
    else
    {
      int v9 = +[NSString stringWithFormat:@"Failed to create task for MADRequestID %d", *(unsigned int *)(a1 + 80)];
      uint64_t v12 = *(void *)(a1 + 56);
      id v11 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v9];
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v11);
    }
  }
}

void sub_100066B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100066EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100066F08(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100066F24(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100067018;
  v12[3] = &unk_10021A0B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[4] = v7;
  id v13 = v6;
  id v9 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v9;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, v12);
}

void sub_100067018(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = MediaAnalysisLogLevel();
    if (v5)
    {
      if (v6 >= 3)
      {
        uint64_t v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v7, v8))
        {
          int v9 = *(_DWORD *)(a1 + 72);
          uint64_t v10 = *(void *)(a1 + 40);
          LODWORD(v21) = 67109378;
          HIDWORD(v21) = v9;
          LOWORD(v22) = 2112;
          *(void *)((char *)&v22 + 2) = v10;
          id v11 = "[MAClientHandler] MADRequestID %d failed %@";
          uint64_t v12 = v7;
          os_log_type_t v13 = v8;
          uint32_t v14 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)&v21, v14);
          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else if (v6 >= 6)
    {
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v15))
      {
        int v16 = *(_DWORD *)(a1 + 72);
        LODWORD(v21) = 67109120;
        HIDWORD(v21) = v16;
        id v11 = "[MAClientHandler] MADRequestID %d completed";
        uint64_t v12 = v7;
        os_log_type_t v13 = v15;
        uint32_t v14 = 8;
        goto LABEL_9;
      }
LABEL_10:
    }
    int v17 = *(void **)(*(void *)(a1 + 32) + 32);
    uint64_t v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72), v21, v22);
    [v17 removeObjectForKey:v18];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = 0;
}

void sub_100067200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100067224(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
  uint64_t v3 = objc_msgSend(v2, "objectForKeyedSubscript:");

  if (v3)
  {
    id v14 = +[NSString stringWithFormat:@"MADRequestID %d already exists", *(unsigned int *)(a1 + 80)];
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v14];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    id v15 = +[VCPRequestFaceCandidatesforKeyFaceForPersonTask taskWithLocalIdentifiers:*(void *)(a1 + 40) andPhotoLibraryURL:*(void *)(a1 + 48) andProgressHandler:*(void *)(a1 + 64) andReply:*(void *)(a1 + 72)];
    uint64_t v7 = +[VCPMADTaskScheduler sharedInstance];
    id v8 = [v7 addForegroundTask:v15 withQoS:25];

    if (v8)
    {
      int v9 = +[NSNumber numberWithUnsignedInteger:v8];
      uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 32);
      id v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
      [v10 setObject:v9 forKeyedSubscript:v11];
    }
    else
    {
      int v9 = +[NSString stringWithFormat:@"Failed to create task for MADRequestID %d", *(unsigned int *)(a1 + 80)];
      uint64_t v12 = *(void *)(a1 + 56);
      id v11 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v9];
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v11);
    }
  }
}

void sub_100067448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006777C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000677A0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_1000677BC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(NSObject **)(v6 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100067894;
  block[3] = &unk_10021BAA8;
  int v15 = *(_DWORD *)(a1 + 56);
  block[4] = v6;
  id v12 = v5;
  id v8 = *(id *)(a1 + 40);
  char v16 = a2;
  uint64_t v9 = *(void *)(a1 + 48);
  id v13 = v8;
  uint64_t v14 = v9;
  id v10 = v5;
  dispatch_async(v7, block);
}

void sub_100067894(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = MediaAnalysisLogLevel();
    if (v5)
    {
      if (v6 >= 3)
      {
        uint64_t v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v7, v8))
        {
          int v9 = *(_DWORD *)(a1 + 64);
          uint64_t v10 = *(void *)(a1 + 40);
          LODWORD(v21) = 67109378;
          HIDWORD(v21) = v9;
          LOWORD(v22) = 2112;
          *(void *)((char *)&v22 + 2) = v10;
          id v11 = "[MAClientHandler] MADRequestID %d failed %@";
          id v12 = v7;
          os_log_type_t v13 = v8;
          uint32_t v14 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)&v21, v14);
          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else if (v6 >= 6)
    {
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v15))
      {
        int v16 = *(_DWORD *)(a1 + 64);
        LODWORD(v21) = 67109120;
        HIDWORD(v21) = v16;
        id v11 = "[MAClientHandler] MADRequestID %d completed";
        id v12 = v7;
        os_log_type_t v13 = v15;
        uint32_t v14 = 8;
        goto LABEL_9;
      }
LABEL_10:
    }
    int v17 = *(void **)(*(void *)(a1 + 32) + 32);
    uint64_t v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64), v21, v22);
    [v17 removeObjectForKey:v18];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = 0;
}

void sub_100067A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100067AA0(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  uint64_t v3 = objc_msgSend(v2, "objectForKeyedSubscript:");

  if (v3)
  {
    id v14 = +[NSString stringWithFormat:@"MADRequestID %d already exists", *(unsigned int *)(a1 + 72)];
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v14];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    id v15 = +[VCPRequestResetPersonsTask taskWithPhotoLibraryURL:*(void *)(a1 + 40) andProgressHandler:*(void *)(a1 + 56) andReply:*(void *)(a1 + 64)];
    uint64_t v7 = +[VCPMADTaskScheduler sharedInstance];
    id v8 = [v7 addForegroundTask:v15 withQoS:25];

    if (v8)
    {
      int v9 = +[NSNumber numberWithUnsignedInteger:v8];
      uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 32);
      id v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
      [v10 setObject:v9 forKeyedSubscript:v11];
    }
    else
    {
      int v9 = +[NSString stringWithFormat:@"Failed to create task for MADRequestID %d", *(unsigned int *)(a1 + 72)];
      uint64_t v12 = *(void *)(a1 + 48);
      id v11 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v9];
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v11);
    }
  }
}

void sub_100067CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100067FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10006801C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100068038(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(NSObject **)(v6 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100068110;
  block[3] = &unk_10021BAA8;
  int v15 = *(_DWORD *)(a1 + 56);
  block[4] = v6;
  id v12 = v5;
  id v8 = *(id *)(a1 + 40);
  char v16 = a2;
  uint64_t v9 = *(void *)(a1 + 48);
  id v13 = v8;
  uint64_t v14 = v9;
  id v10 = v5;
  dispatch_async(v7, block);
}

void sub_100068110(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = MediaAnalysisLogLevel();
    if (v5)
    {
      if (v6 >= 3)
      {
        uint64_t v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v7, v8))
        {
          int v9 = *(_DWORD *)(a1 + 64);
          uint64_t v10 = *(void *)(a1 + 40);
          LODWORD(v21) = 67109378;
          HIDWORD(v21) = v9;
          LOWORD(v22) = 2112;
          *(void *)((char *)&v22 + 2) = v10;
          id v11 = "[MAClientHandler] MADRequestID %d failed %@";
          id v12 = v7;
          os_log_type_t v13 = v8;
          uint32_t v14 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)&v21, v14);
          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else if (v6 >= 6)
    {
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v15))
      {
        int v16 = *(_DWORD *)(a1 + 64);
        LODWORD(v21) = 67109120;
        HIDWORD(v21) = v16;
        id v11 = "[MAClientHandler] MADRequestID %d completed";
        id v12 = v7;
        os_log_type_t v13 = v15;
        uint32_t v14 = 8;
        goto LABEL_9;
      }
LABEL_10:
    }
    int v17 = *(void **)(*(void *)(a1 + 32) + 32);
    uint64_t v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64), v21, v22);
    [v17 removeObjectForKey:v18];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = 0;
}

void sub_1000682F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006831C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  uint64_t v3 = objc_msgSend(v2, "objectForKeyedSubscript:");

  if (v3)
  {
    id v14 = +[NSString stringWithFormat:@"MADRequestID %d already exists", *(unsigned int *)(a1 + 72)];
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v14];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    id v15 = +[VCPRequestResetFaceClassificationModelTask taskWithPhotoLibraryURL:*(void *)(a1 + 40) andProgressHandler:*(void *)(a1 + 56) andReply:*(void *)(a1 + 64)];
    uint64_t v7 = +[VCPMADTaskScheduler sharedInstance];
    id v8 = [v7 addForegroundTask:v15 withQoS:25];

    if (v8)
    {
      int v9 = +[NSNumber numberWithUnsignedInteger:v8];
      uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 32);
      id v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
      [v10 setObject:v9 forKeyedSubscript:v11];
    }
    else
    {
      int v9 = +[NSString stringWithFormat:@"Failed to create task for MADRequestID %d", *(unsigned int *)(a1 + 72)];
      uint64_t v12 = *(void *)(a1 + 48);
      id v11 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v9];
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v11);
    }
  }
}

void sub_100068540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100068874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100068898(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_1000688B4(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(NSObject **)(v6 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006898C;
  block[3] = &unk_10021BAA8;
  int v15 = *(_DWORD *)(a1 + 56);
  block[4] = v6;
  id v12 = v5;
  id v8 = *(id *)(a1 + 40);
  char v16 = a2;
  uint64_t v9 = *(void *)(a1 + 48);
  id v13 = v8;
  uint64_t v14 = v9;
  id v10 = v5;
  dispatch_async(v7, block);
}

void sub_10006898C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = MediaAnalysisLogLevel();
    if (v5)
    {
      if (v6 >= 3)
      {
        uint64_t v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v7, v8))
        {
          int v9 = *(_DWORD *)(a1 + 64);
          uint64_t v10 = *(void *)(a1 + 40);
          LODWORD(v21) = 67109378;
          HIDWORD(v21) = v9;
          LOWORD(v22) = 2112;
          *(void *)((char *)&v22 + 2) = v10;
          id v11 = "[MAClientHandler] MADRequestID %d failed %@";
          id v12 = v7;
          os_log_type_t v13 = v8;
          uint32_t v14 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)&v21, v14);
          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else if (v6 >= 6)
    {
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v15))
      {
        int v16 = *(_DWORD *)(a1 + 64);
        LODWORD(v21) = 67109120;
        HIDWORD(v21) = v16;
        id v11 = "[MAClientHandler] MADRequestID %d completed";
        id v12 = v7;
        os_log_type_t v13 = v15;
        uint32_t v14 = 8;
        goto LABEL_9;
      }
LABEL_10:
    }
    int v17 = *(void **)(*(void *)(a1 + 32) + 32);
    uint64_t v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64), v21, v22);
    [v17 removeObjectForKey:v18];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = 0;
}

void sub_100068B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100068B98(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  uint64_t v3 = objc_msgSend(v2, "objectForKeyedSubscript:");

  if (v3)
  {
    id v14 = +[NSString stringWithFormat:@"MADRequestID %d already exists", *(unsigned int *)(a1 + 72)];
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v14];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    id v15 = +[VCPResetPetClassificationModelTask taskWithPhotoLibraryURL:*(void *)(a1 + 40) andProgressHandler:*(void *)(a1 + 56) andReply:*(void *)(a1 + 64)];
    uint64_t v7 = +[VCPMADTaskScheduler sharedInstance];
    id v8 = [v7 addForegroundTask:v15 withQoS:25];

    if (v8)
    {
      int v9 = +[NSNumber numberWithUnsignedInteger:v8];
      uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 32);
      id v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
      [v10 setObject:v9 forKeyedSubscript:v11];
    }
    else
    {
      int v9 = +[NSString stringWithFormat:@"Failed to create task for MADRequestID %d", *(unsigned int *)(a1 + 72)];
      uint64_t v12 = *(void *)(a1 + 48);
      id v11 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v9];
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v11);
    }
  }
}

void sub_100068DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100069124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10006914C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100069168(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10006925C;
  v12[3] = &unk_10021A0B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[4] = v7;
  id v13 = v6;
  id v9 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v9;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, v12);
}

void sub_10006925C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = MediaAnalysisLogLevel();
    if (v5)
    {
      if (v6 >= 3)
      {
        uint64_t v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v7, v8))
        {
          int v9 = *(_DWORD *)(a1 + 72);
          uint64_t v10 = *(void *)(a1 + 40);
          LODWORD(v21) = 67109378;
          HIDWORD(v21) = v9;
          LOWORD(v22) = 2112;
          *(void *)((char *)&v22 + 2) = v10;
          id v11 = "[MAClientHandler] MADRequestID %d failed %@";
          uint64_t v12 = v7;
          os_log_type_t v13 = v8;
          uint32_t v14 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)&v21, v14);
          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else if (v6 >= 6)
    {
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v15))
      {
        int v16 = *(_DWORD *)(a1 + 72);
        LODWORD(v21) = 67109120;
        HIDWORD(v21) = v16;
        id v11 = "[MAClientHandler] MADRequestID %d completed";
        uint64_t v12 = v7;
        os_log_type_t v13 = v15;
        uint32_t v14 = 8;
        goto LABEL_9;
      }
LABEL_10:
    }
    int v17 = *(void **)(*(void *)(a1 + 32) + 32);
    uint64_t v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72), v21, v22);
    [v17 removeObjectForKey:v18];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = 0;
}

void sub_100069444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100069468(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
  uint64_t v3 = objc_msgSend(v2, "objectForKeyedSubscript:");

  if (v3)
  {
    id v14 = +[NSString stringWithFormat:@"MADRequestID %d already exists", *(unsigned int *)(a1 + 80)];
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v14];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    id v15 = +[VCPRequestSuggestedMePersonIdentifierTask taskWithContext:*(void *)(a1 + 40) andPhotoLibraryURL:*(void *)(a1 + 48) andProgressHandler:*(void *)(a1 + 64) andReply:*(void *)(a1 + 72)];
    uint64_t v7 = +[VCPMADTaskScheduler sharedInstance];
    id v8 = [v7 addForegroundTask:v15 withQoS:25];

    if (v8)
    {
      int v9 = +[NSNumber numberWithUnsignedInteger:v8];
      uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 32);
      id v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
      [v10 setObject:v9 forKeyedSubscript:v11];
    }
    else
    {
      int v9 = +[NSString stringWithFormat:@"Failed to create task for MADRequestID %d", *(unsigned int *)(a1 + 80)];
      uint64_t v12 = *(void *)(a1 + 56);
      id v11 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v9];
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v11);
    }
  }
}

void sub_10006968C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006985C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100069894(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100069B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100069BB8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100069BD4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100069CC8;
  v12[3] = &unk_10021A0B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[4] = v7;
  id v13 = v6;
  id v9 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v9;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, v12);
}

void sub_100069CC8(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = MediaAnalysisLogLevel();
    if (v5)
    {
      if (v6 >= 3)
      {
        uint64_t v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v7, v8))
        {
          int v9 = *(_DWORD *)(a1 + 72);
          uint64_t v10 = *(void *)(a1 + 40);
          LODWORD(v21) = 67109378;
          HIDWORD(v21) = v9;
          LOWORD(v22) = 2112;
          *(void *)((char *)&v22 + 2) = v10;
          id v11 = "[MAClientHandler] MADRequestID %d failed %@";
          uint64_t v12 = v7;
          os_log_type_t v13 = v8;
          uint32_t v14 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)&v21, v14);
          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else if (v6 >= 6)
    {
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v15))
      {
        int v16 = *(_DWORD *)(a1 + 72);
        LODWORD(v21) = 67109120;
        HIDWORD(v21) = v16;
        id v11 = "[MAClientHandler] MADRequestID %d completed";
        uint64_t v12 = v7;
        os_log_type_t v13 = v15;
        uint32_t v14 = 8;
        goto LABEL_9;
      }
LABEL_10:
    }
    int v17 = *(void **)(*(void *)(a1 + 32) + 32);
    uint64_t v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72), v21, v22);
    [v17 removeObjectForKey:v18];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = 0;
}

void sub_100069EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100069ED4(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  uint64_t v3 = objc_msgSend(v2, "objectForKeyedSubscript:");

  if (v3)
  {
    id v14 = +[NSString stringWithFormat:@"MADRequestID %d already exists", *(unsigned int *)(a1 + 72)];
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v14];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    id v15 = +[VCPRequestClusterCacheValidationTask taskWithPhotoLibraryURL:*(void *)(a1 + 40) andProgressHandler:*(void *)(a1 + 56) andReply:*(void *)(a1 + 64)];
    uint64_t v7 = +[VCPMADTaskScheduler sharedInstance];
    id v8 = [v7 addForegroundTask:v15 withQoS:25];

    if (v8)
    {
      int v9 = +[NSNumber numberWithUnsignedInteger:v8];
      uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 32);
      id v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
      [v10 setObject:v9 forKeyedSubscript:v11];
    }
    else
    {
      int v9 = +[NSString stringWithFormat:@"Failed to create task for MADRequestID %d", *(unsigned int *)(a1 + 72)];
      uint64_t v12 = *(void *)(a1 + 48);
      id v11 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v9];
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v11);
    }
  }
}

void sub_10006A0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006A42C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10006A450(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10006A46C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(NSObject **)(v6 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006A544;
  block[3] = &unk_10021BAA8;
  int v15 = *(_DWORD *)(a1 + 56);
  block[4] = v6;
  id v12 = v5;
  id v8 = *(id *)(a1 + 40);
  char v16 = a2;
  uint64_t v9 = *(void *)(a1 + 48);
  id v13 = v8;
  uint64_t v14 = v9;
  id v10 = v5;
  dispatch_async(v7, block);
}

void sub_10006A544(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = MediaAnalysisLogLevel();
    if (v5)
    {
      if (v6 >= 3)
      {
        uint64_t v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v7, v8))
        {
          int v9 = *(_DWORD *)(a1 + 64);
          uint64_t v10 = *(void *)(a1 + 40);
          LODWORD(v21) = 67109378;
          HIDWORD(v21) = v9;
          LOWORD(v22) = 2112;
          *(void *)((char *)&v22 + 2) = v10;
          id v11 = "[MAClientHandler] MADRequestID %d failed %@";
          id v12 = v7;
          os_log_type_t v13 = v8;
          uint32_t v14 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)&v21, v14);
          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else if (v6 >= 6)
    {
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v15))
      {
        int v16 = *(_DWORD *)(a1 + 64);
        LODWORD(v21) = 67109120;
        HIDWORD(v21) = v16;
        id v11 = "[MAClientHandler] MADRequestID %d completed";
        id v12 = v7;
        os_log_type_t v13 = v15;
        uint32_t v14 = 8;
        goto LABEL_9;
      }
LABEL_10:
    }
    int v17 = *(void **)(*(void *)(a1 + 32) + 32);
    uint64_t v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64), v21, v22);
    [v17 removeObjectForKey:v18];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = 0;
}

void sub_10006A72C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006A750(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  uint64_t v3 = objc_msgSend(v2, "objectForKeyedSubscript:");

  if (v3)
  {
    id v14 = +[NSString stringWithFormat:@"MADRequestID %d already exists", *(unsigned int *)(a1 + 72)];
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v14];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    id v15 = +[VCPRequestResetFaceClusteringStateTask taskWithPhotoLibraryURL:*(void *)(a1 + 40) andProgressHandler:*(void *)(a1 + 56) andReply:*(void *)(a1 + 64)];
    uint64_t v7 = +[VCPMADTaskScheduler sharedInstance];
    id v8 = [v7 addForegroundTask:v15 withQoS:25];

    if (v8)
    {
      int v9 = +[NSNumber numberWithUnsignedInteger:v8];
      uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 32);
      id v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
      [v10 setObject:v9 forKeyedSubscript:v11];
    }
    else
    {
      int v9 = +[NSString stringWithFormat:@"Failed to create task for MADRequestID %d", *(unsigned int *)(a1 + 72)];
      uint64_t v12 = *(void *)(a1 + 48);
      id v11 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v9];
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v11);
    }
  }
}

void sub_10006A974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006ACA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10006ACCC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10006ACE8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(NSObject **)(v6 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006ADC0;
  block[3] = &unk_10021BAA8;
  int v15 = *(_DWORD *)(a1 + 56);
  block[4] = v6;
  id v12 = v5;
  id v8 = *(id *)(a1 + 40);
  char v16 = a2;
  uint64_t v9 = *(void *)(a1 + 48);
  id v13 = v8;
  uint64_t v14 = v9;
  id v10 = v5;
  dispatch_async(v7, block);
}

void sub_10006ADC0(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = MediaAnalysisLogLevel();
    if (v5)
    {
      if (v6 >= 3)
      {
        uint64_t v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v7, v8))
        {
          int v9 = *(_DWORD *)(a1 + 64);
          uint64_t v10 = *(void *)(a1 + 40);
          LODWORD(v21) = 67109378;
          HIDWORD(v21) = v9;
          LOWORD(v22) = 2112;
          *(void *)((char *)&v22 + 2) = v10;
          id v11 = "[MAClientHandler] MADRequestID %d failed %@";
          id v12 = v7;
          os_log_type_t v13 = v8;
          uint32_t v14 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)&v21, v14);
          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else if (v6 >= 6)
    {
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v15))
      {
        int v16 = *(_DWORD *)(a1 + 64);
        LODWORD(v21) = 67109120;
        HIDWORD(v21) = v16;
        id v11 = "[MAClientHandler] MADRequestID %d completed";
        id v12 = v7;
        os_log_type_t v13 = v15;
        uint32_t v14 = 8;
        goto LABEL_9;
      }
LABEL_10:
    }
    int v17 = *(void **)(*(void *)(a1 + 32) + 32);
    uint64_t v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64), v21, v22);
    [v17 removeObjectForKey:v18];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = 0;
}

void sub_10006AFA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006AFCC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  uint64_t v3 = objc_msgSend(v2, "objectForKeyedSubscript:");

  if (v3)
  {
    id v14 = +[NSString stringWithFormat:@"MADRequestID %d already exists", *(unsigned int *)(a1 + 72)];
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v14];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    id v15 = +[VCPRequestReclusterFacesTask taskWithPhotoLibraryURL:*(void *)(a1 + 40) andProgressHandler:*(void *)(a1 + 56) andReply:*(void *)(a1 + 64)];
    uint64_t v7 = +[VCPMADTaskScheduler sharedInstance];
    id v8 = [v7 addForegroundTask:v15 withQoS:25];

    if (v8)
    {
      int v9 = +[NSNumber numberWithUnsignedInteger:v8];
      uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 32);
      id v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
      [v10 setObject:v9 forKeyedSubscript:v11];
    }
    else
    {
      int v9 = +[NSString stringWithFormat:@"Failed to create task for MADRequestID %d", *(unsigned int *)(a1 + 72)];
      uint64_t v12 = *(void *)(a1 + 48);
      id v11 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v9];
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v11);
    }
  }
}

void sub_10006B1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006B54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10006B574(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10006B590(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(NSObject **)(v6 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006B668;
  block[3] = &unk_10021BAA8;
  int v15 = *(_DWORD *)(a1 + 56);
  block[4] = v6;
  id v12 = v5;
  id v8 = *(id *)(a1 + 40);
  char v16 = a2;
  uint64_t v9 = *(void *)(a1 + 48);
  id v13 = v8;
  uint64_t v14 = v9;
  id v10 = v5;
  dispatch_async(v7, block);
}

void sub_10006B668(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = MediaAnalysisLogLevel();
    if (v5)
    {
      if (v6 >= 3)
      {
        uint64_t v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v7, v8))
        {
          int v9 = *(_DWORD *)(a1 + 64);
          uint64_t v10 = *(void *)(a1 + 40);
          LODWORD(v21) = 67109378;
          HIDWORD(v21) = v9;
          LOWORD(v22) = 2112;
          *(void *)((char *)&v22 + 2) = v10;
          id v11 = "[MAClientHandler] MADRequestID %d failed %@";
          id v12 = v7;
          os_log_type_t v13 = v8;
          uint32_t v14 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)&v21, v14);
          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else if (v6 >= 6)
    {
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v15))
      {
        int v16 = *(_DWORD *)(a1 + 64);
        LODWORD(v21) = 67109120;
        HIDWORD(v21) = v16;
        id v11 = "[MAClientHandler] MADRequestID %d completed";
        id v12 = v7;
        os_log_type_t v13 = v15;
        uint32_t v14 = 8;
        goto LABEL_9;
      }
LABEL_10:
    }
    int v17 = *(void **)(*(void *)(a1 + 32) + 32);
    uint64_t v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64), v21, v22);
    [v17 removeObjectForKey:v18];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = 0;
}

void sub_10006B850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006B874(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
  uint64_t v3 = objc_msgSend(v2, "objectForKeyedSubscript:");

  if (v3)
  {
    id v14 = +[NSString stringWithFormat:@"MADRequestID %d already exists", *(unsigned int *)(a1 + 80)];
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = [(id)objc_opt_class() errorForStatus:4294967246 withDescription:v14];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    id v15 = +[VCPRequestRebuildPersonsTask taskWithLocalIdentifiers:*(void *)(a1 + 40) andPhotoLibraryURL:*(void *)(a1 + 48) andProgressHandler:*(void *)(a1 + 64) andReply:*(void *)(a1 + 72)];
    uint64_t v7 = +[VCPMADTaskScheduler sharedInstance];
    id v8 = [v7 addForegroundTask:v15 withQoS:25];

    if (v8)
    {
      int v9 = +[NSNumber numberWithUnsignedInteger:v8];
      uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 32);
      id v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
      [v10 setObject:v9 forKeyedSubscript:v11];
    }
    else
    {
      int v9 = +[NSString stringWithFormat:@"Failed to create task for MADRequestID %d", *(unsigned int *)(a1 + 80)];
      uint64_t v12 = *(void *)(a1 + 56);
      id v11 = [(id)objc_opt_class() errorForStatus:4294967278 withDescription:v9];
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v11);
    }
  }
}

void sub_10006BA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006BC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006BE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006C43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

id sub_10006C54C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10006C568(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006C60C;
  block[3] = &unk_10021BB48;
  block[4] = v2;
  int v6 = *(_DWORD *)(a1 + 48);
  int v7 = a2;
  id v5 = *(id *)(a1 + 40);
  dispatch_async(v3, block);
}

void sub_10006C60C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 52);
    if (v5)
    {
      uint64_t v6 = +[NSString stringWithFormat:@"MADRequestID %d failed %d", *(unsigned int *)(a1 + 48), v5];
      if ((int)MediaAnalysisLogLevel() < 3)
      {
LABEL_11:
        id v11 = (void *)v6;
LABEL_12:
        uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 32);
        id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
        [v12 removeObjectForKey:v13];

        uint64_t v14 = *(void *)(a1 + 40);
        id v15 = [(id)objc_opt_class() errorForStatus:*(unsigned int *)(a1 + 52) withDescription:v11];
        (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v15);

        return;
      }
      int v7 = VCPLogInstance();
      os_log_type_t v8 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v7, v8))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v17 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "[MAClientHandler] %@", buf, 0xCu);
      }
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() < 6)
      {
        id v11 = 0;
        goto LABEL_12;
      }
      int v7 = VCPLogInstance();
      os_log_type_t v9 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v9))
      {
        int v10 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v17) = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, v9, "[MAClientHandler] MADRequestID %d completed", buf, 8u);
      }
      uint64_t v6 = 0;
    }

    goto LABEL_11;
  }
}

void sub_10006C838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10006C88C(id a1)
{
  return 0;
}

void sub_10006CC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

id sub_10006CD50(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10006CD6C(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006CE10;
  block[3] = &unk_10021BB48;
  block[4] = v2;
  int v6 = *(_DWORD *)(a1 + 48);
  int v7 = a2;
  id v5 = *(id *)(a1 + 40);
  dispatch_async(v3, block);
}

void sub_10006CE10(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 52);
    if (v5)
    {
      uint64_t v6 = +[NSString stringWithFormat:@"MADRequestID %d failed %d", *(unsigned int *)(a1 + 48), v5];
      if ((int)MediaAnalysisLogLevel() < 3)
      {
LABEL_11:
        id v11 = (void *)v6;
LABEL_12:
        uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 32);
        id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
        [v12 removeObjectForKey:v13];

        uint64_t v14 = *(void *)(a1 + 40);
        id v15 = [(id)objc_opt_class() errorForStatus:*(unsigned int *)(a1 + 52) withDescription:v11];
        (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v15);

        return;
      }
      int v7 = VCPLogInstance();
      os_log_type_t v8 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v7, v8))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v17 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "[MAClientHandler] %@", buf, 0xCu);
      }
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() < 6)
      {
        id v11 = 0;
        goto LABEL_12;
      }
      int v7 = VCPLogInstance();
      os_log_type_t v9 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v9))
      {
        int v10 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v17) = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, v9, "[MAClientHandler] MADRequestID %d completed", buf, 8u);
      }
      uint64_t v6 = 0;
    }

    goto LABEL_11;
  }
}

void sub_10006D03C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10006D090(id a1)
{
  return 0;
}

void sub_10006D46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

id sub_10006D554(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10006D570(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006D614;
  block[3] = &unk_10021BB48;
  block[4] = v2;
  int v6 = *(_DWORD *)(a1 + 48);
  int v7 = a2;
  id v5 = *(id *)(a1 + 40);
  dispatch_async(v3, block);
}

void sub_10006D614(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 52);
    if (v5)
    {
      uint64_t v6 = +[NSString stringWithFormat:@"MADRequestID %d failed %d", *(unsigned int *)(a1 + 48), v5];
      if ((int)MediaAnalysisLogLevel() < 3)
      {
LABEL_11:
        id v11 = (void *)v6;
LABEL_12:
        uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 32);
        id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
        [v12 removeObjectForKey:v13];

        uint64_t v14 = *(void *)(a1 + 40);
        id v15 = [(id)objc_opt_class() errorForStatus:*(unsigned int *)(a1 + 52) withDescription:v11];
        (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v15);

        return;
      }
      int v7 = VCPLogInstance();
      os_log_type_t v8 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v7, v8))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v17 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "[MAClientHandler] %@", buf, 0xCu);
      }
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() < 6)
      {
        id v11 = 0;
        goto LABEL_12;
      }
      int v7 = VCPLogInstance();
      os_log_type_t v9 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v9))
      {
        int v10 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v17) = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, v9, "[MAClientHandler] MADRequestID %d completed", buf, 8u);
      }
      uint64_t v6 = 0;
    }

    goto LABEL_11;
  }
}

void sub_10006D840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10006D894(id a1)
{
  return 0;
}

void sub_10006DB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_10006DBD4(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10006DBF0(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006DC94;
  block[3] = &unk_10021BB48;
  block[4] = v2;
  int v6 = *(_DWORD *)(a1 + 48);
  int v7 = a2;
  id v5 = *(id *)(a1 + 40);
  dispatch_async(v3, block);
}

void sub_10006DC94(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 52);
    if (v5)
    {
      uint64_t v6 = +[NSString stringWithFormat:@"MADRequestID %d failed %d", *(unsigned int *)(a1 + 48), v5];
      if ((int)MediaAnalysisLogLevel() < 3)
      {
LABEL_11:
        id v11 = (void *)v6;
LABEL_12:
        uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 32);
        id v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
        [v12 removeObjectForKey:v13];

        uint64_t v14 = *(void *)(a1 + 40);
        id v15 = [(id)objc_opt_class() errorForStatus:*(unsigned int *)(a1 + 52) withDescription:v11];
        (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v15);

        return;
      }
      int v7 = VCPLogInstance();
      os_log_type_t v8 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v7, v8))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v17 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "[MAClientHandler] %@", buf, 0xCu);
      }
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() < 6)
      {
        id v11 = 0;
        goto LABEL_12;
      }
      int v7 = VCPLogInstance();
      os_log_type_t v9 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v9))
      {
        int v10 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v17) = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, v9, "[MAClientHandler] MADRequestID %d completed", buf, 8u);
      }
      uint64_t v6 = 0;
    }

    goto LABEL_11;
  }
}

void sub_10006DEC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10006DF14(id a1)
{
  return 0;
}

void sub_10006E268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_10006E2F0(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  int v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v8 + 40);
  id v9 = [v7 optInStatus:v6 error:&obj];
  objc_storeStrong((id *)(v8 + 40), obj);
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    *a4 = 1;
  }
  else
  {
    CFStringRef v13 = @"OptInStatus";
    int v10 = +[NSNumber numberWithBool:v9];
    uint64_t v14 = v10;
    id v11 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
    [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:v6];
  }
}

void sub_10006E414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006E790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_10006E818(void *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  int v7 = (void *)a1[4];
  uint64_t v8 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v8 + 40);
  id v9 = [v7 optInUserPickedPerson:v6 error:&obj extendTimeoutBlock:&stru_10021BC38 cancelBlock:&stru_10021BC58];
  objc_storeStrong((id *)(v8 + 40), obj);
  if (*(void *)(*(void *)(a1[6] + 8) + 40))
  {
    *a4 = 1;
  }
  else
  {
    CFStringRef v15 = @"OptInStatus";
    int v10 = +[NSNumber numberWithBool:v9];
    int v16 = v10;
    id v11 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
    uint64_t v12 = (void *)a1[5];
    CFStringRef v13 = [v6 objectForKeyedSubscript:@"PersonIdentifier"];
    [v12 setObject:v11 forKeyedSubscript:v13];
  }
}

void sub_10006E970(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_10006E9B0(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_10006EA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_10006EA14(id a1)
{
  return 0;
}

void sub_10006ED74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006EDF0(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_10006EE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_10006EE54(id a1)
{
  return 0;
}

void sub_10006EE5C(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_10006EEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_10006EEC0(id a1)
{
  return 0;
}

void sub_10006F3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_10006F478(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_10006F4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_10006F4DC(id a1)
{
  return 0;
}

void sub_10006F86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_10006F908(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_10006F958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_10006F96C(id a1)
{
  return 0;
}

void sub_10006FC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_10006FCAC(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_10006FCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_10006FD10(id a1)
{
  return 0;
}

void sub_100070024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1000700A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
}

void sub_1000700B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    int v7 = VCPLogInstance();
    os_log_type_t v8 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v7, v8))
    {
      int v9 = *(_DWORD *)(a1 + 48);
      v10[0] = 67109120;
      v10[1] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[MAClientHandler] Completed MADRequestID %d", (uint8_t *)v10, 8u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000701CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000701EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100070258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000704E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100070534(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100070550(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    id v5 = VCPLogInstance();
    os_log_type_t v6 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = *(_DWORD *)(a1 + 40);
      v8[0] = 67109120;
      v8[1] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "[MAClientHandler] Completed MADRequestID %d", (uint8_t *)v8, 8u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100070638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100070654(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100070BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_100070CA0(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v6 = *(id *)(a1 + 32);
  id v7 = [v6 countByEnumeratingWithState:&v21 objects:v31 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v22;
    while (2)
    {
      for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v8) {
          objc_enumerationMutation(v6);
        }
        uint64_t v10 = *(void *)(*((void *)&v21 + 1) + 8 * i);
        signed int v11 = [*(id *)(a1 + 40) setMomentsScheduledAssetWithLocalIdentifier:v10 andTaskID:a2];
        if (v11)
        {
          if ((int)MediaAnalysisLogLevel() >= 3)
          {
            uint64_t v12 = VCPLogInstance();
            os_log_type_t v13 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v12, v13))
            {
              uint64_t v14 = VCPTaskIDDescription(a2);
              *(_DWORD *)long long buf = 138412546;
              uint64_t v28 = v10;
              __int16 v29 = 2112;
              __int16 v30 = v14;
              _os_log_impl((void *)&_mh_execute_header, v12, v13, "[MAClientHandler] Failed to schedule asset %@ for Moments deferred processing (type %@)", buf, 0x16u);
            }
          }
          NSErrorUserInfoKey v25 = NSLocalizedDescriptionKey;
          CFStringRef v15 = VCPTaskIDDescription(a2);
          int v16 = +[NSString stringWithFormat:@"[MAClientHandler] Failed to schedule asset %@ for Moments deferred processing (type %@)", v10, v15, (void)v21];
          __int16 v26 = v16;
          uint64_t v17 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
          uint64_t v18 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:v11 userInfo:v17];
          uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 8);
          uint64_t v20 = *(void **)(v19 + 40);
          *(void *)(v19 + 40) = v18;

          *a3 = 1;
          goto LABEL_15;
        }
      }
      id v7 = [v6 countByEnumeratingWithState:&v21 objects:v31 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
LABEL_15:
}

void sub_100070F00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100071174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000711B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_1000711D0(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    if ((int)MediaAnalysisLogLevel() < 6)
    {
      int v9 = 0;
      goto LABEL_11;
    }
    id v5 = VCPLogInstance();
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v5, v7))
    {
      int v8 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v13) = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, v7, "[MAClientHandler] MADRequestID %d completed", buf, 8u);
    }
    uint64_t v4 = 0;
    goto LABEL_9;
  }
  uint64_t v4 = +[NSString stringWithFormat:@"MADRequestID %d failed %d", *(unsigned int *)(a1 + 48), a2];
  if ((int)MediaAnalysisLogLevel() >= 3)
  {
    id v5 = VCPLogInstance();
    os_log_type_t v6 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v5, v6))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "[MAClientHandler] %@", buf, 0xCu);
    }
LABEL_9:
  }
  int v9 = (void *)v4;
LABEL_11:
  uint64_t v10 = *(void *)(a1 + 40);
  signed int v11 = [(id)objc_opt_class() errorForStatus:a2 withDescription:v9];
  (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v11);
}

void sub_100071388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000713B8(id a1)
{
  return 0;
}

uint64_t sub_1000713C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100071778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000719BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100071D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100071DF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v4, v5))
    {
      int v6 = *(_DWORD *)(a1 + 40);
      v7[0] = 67109120;
      v7[1] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MAClientHandler] Completed MADRequestID %d", (uint8_t *)v7, 8u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100071EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100071EFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000720FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_10007212C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v4 code]);
}

void sub_10007218C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100072228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100072BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100072D5C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) cancelBlock];
  if (v2)
  {
    id v3 = (void *)v2;
    id v4 = [*(id *)(a1 + 32) cancelBlock];
    char v5 = v4[2]();

    if (v5) {
      return 1;
    }
  }
  os_log_type_t v7 = +[VCPWatchdog sharedWatchdog];
  [v7 pet];

  return 0;
}

void sub_100072DEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100072EC4()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  uint64_t v1 = (void *)qword_100252518;
  qword_100252518 = (uint64_t)v0;
}

void sub_100073390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v42 - 192), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_100073460(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100073470(uint64_t a1)
{
}

void sub_100073478(uint64_t a1, double a2)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    id v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2048;
      double v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ %.2f%% complete", (uint8_t *)&v7, 0x16u);
    }
  }
}

uint64_t sub_100073558(void *a1)
{
  [*(id *)(*(void *)(a1[6] + 8) + 40) stop];
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = a1[4];
      [*(id *)(*(void *)(a1[6] + 8) + 40) elapsedTimeSeconds];
      int v12 = 138412546;
      uint64_t v13 = v4;
      __int16 v14 = 2048;
      uint64_t v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%@ Ran for %0.6fs", (uint8_t *)&v12, 0x16u);
    }
  }
  uint64_t v6 = *(void *)(a1[7] + 8);
  int v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0;

  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v8 = VCPLogInstance();
    os_log_type_t v9 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = a1[4];
      int v12 = 138412290;
      uint64_t v13 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%@ Finished background processing", (uint8_t *)&v12, 0xCu);
    }
  }
  return (*(uint64_t (**)(void))(a1[5] + 16))();
}

void sub_1000736EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100073704(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000737B4()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  uint64_t v1 = (void *)qword_100252528;
  qword_100252528 = (uint64_t)v0;
}

uint64_t sub_100073DF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100073F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1000740AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100074330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100074618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1000746A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)MADPhotosFullAssetProcessingTask;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100074834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100074FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_10007594C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_100075AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100075B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100075C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100076060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000769A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_100076C90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100077240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_100078010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100078D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100079008(uint64_t a1)
{
  uint64_t v2 = +[VCPWatchdog sharedWatchdog];
  [v2 pet];

  os_log_type_t v3 = [*(id *)(a1 + 32) cancelBlock];
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) cancelBlock];
    uint64_t v5 = v4[2]();
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_100079094(_Unwind_Exception *a1)
{
  os_log_type_t v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1000790B8(uint64_t a1)
{
  uint64_t v2 = +[VCPWatchdog sharedWatchdog];
  [v2 pet];

  os_log_type_t v3 = [*(id *)(a1 + 32) cancelBlock];
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) cancelBlock];
    uint64_t v5 = v4[2]();
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_100079144(_Unwind_Exception *a1)
{
  os_log_type_t v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100079168(uint64_t a1)
{
  uint64_t v2 = +[VCPWatchdog sharedWatchdog];
  [v2 pet];

  os_log_type_t v3 = [*(id *)(a1 + 32) cancelBlock];
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) cancelBlock];
    uint64_t v5 = v4[2]();
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_1000791F4(_Unwind_Exception *a1)
{
  os_log_type_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1000794E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

intptr_t sub_10007953C(uint64_t a1)
{
  uint64_t v2 = VCPSignPostLog();
  os_signpost_id_t v3 = os_signpost_id_generate(v2);

  uint64_t v4 = VCPSignPostLog();
  uint64_t v5 = v4;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_BEGIN, v3, "MADPhotosFullAssetProcessingTask_ProcessAsset", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  [*(id *)(a1 + 32) processAssetEntry:*(void *)(a1 + 40)];
  uint64_t v6 = VCPSignPostLog();
  int v7 = v6;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)os_log_type_t v9 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_END, v3, "MADPhotosFullAssetProcessingTask_ProcessAsset", (const char *)&unk_1001F3BD3, v9, 2u);
  }

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1000798C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100079D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10007A0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10007A150(void *a1)
{
  id v2 = +[PHAssetChangeRequest changeRequestForAsset:a1[4]];
  [v2 setVariationSuggestionStates:a1[5] forVariationType:1];
  [v2 setVariationSuggestionStates:a1[6] forVariationType:3];
}

void sub_10007A1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10007BB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  _Unwind_Resume(a1);
}

void sub_10007C618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007CAB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007CDE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007CEAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007CF58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007D088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007DB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10007DCF8(uint64_t a1)
{
  id v2 = +[VCPWatchdog sharedWatchdog];
  [v2 pet];

  os_signpost_id_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
  return v3();
}

void sub_10007DD50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10007DD60(uint64_t a1)
{
  id v2 = +[VCPWatchdog sharedWatchdog];
  [v2 pet];

  os_signpost_id_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
  return v3();
}

void sub_10007DDB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10007DDC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10007E154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

BOOL sub_10007E1E8(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 32) + 24) || [*(id *)(a1 + 40) recommendedState] != (id)2;
}

void sub_10007E330()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  uint64_t v1 = (void *)qword_1002525A0;
  qword_1002525A0 = (uint64_t)v0;
}

uint64_t sub_10007E524(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10007E670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007E714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007E9C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007EA2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007EBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)MADPhotosOCRAssetProcessingTask;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_10007ED74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007F024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_10007F148(uint64_t a1)
{
  id v2 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  os_signpost_id_t v3 = *(void **)(*(void *)(a1 + 32) + 96);
  uint64_t v4 = [*(id *)(a1 + 40) localIdentifier];
  [v3 setObject:v2 forKeyedSubscript:v4];

  uint64_t v5 = +[NSDate now];
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(void **)(v6 + 104);
  *(void *)(v6 + 104) = v5;
}

void sub_10007F1F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007F2E0(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(_DWORD *)(*(void *)(a1 + 32) + 112);
  id v2 = *(void **)(*(void *)(a1 + 32) + 96);
  os_signpost_id_t v3 = [*(id *)(a1 + 40) localIdentifier];
  [v2 removeObjectForKey:v3];

  uint64_t v4 = +[NSDate now];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 104);
  *(void *)(v5 + 104) = v4;

  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    int v7 = VCPLogInstance();
    os_log_type_t v8 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v7, v8))
    {
      unsigned int v9 = [*(id *)(*(void *)(a1 + 32) + 96) count];
      v10[0] = 67109120;
      v10[1] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[OCR] %d downloads pending", (uint8_t *)v10, 8u);
    }
  }
}

void sub_10007F420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007F4F0(uint64_t a1)
{
  id v3 = +[NSDate now];
  [v3 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 104)];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
}

void sub_10007F560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10007F610(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 112) = *(_DWORD *)(a1 + 40);
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      unsigned int v4 = [*(id *)(*(void *)(a1 + 32) + 96) count];
      int v5 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)long long buf = 67109376;
      unsigned int v18 = v4;
      __int16 v19 = 1024;
      int v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[OCR][Download] Canceling %d download requests (%d)", buf, 0xEu);
    }
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v6 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 96), "allValues", 0);
  id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v13;
    do
    {
      for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v6);
        }
        uint64_t v10 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        signed int v11 = +[PHAssetResourceManager defaultManager];
        objc_msgSend(v11, "cancelDataRequest:", objc_msgSend(v10, "intValue"));
      }
      id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }
}

void sub_10007F7DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008030C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000804F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[VCPWatchdog sharedWatchdog];
  [v7 pet];

  uint64_t v8 = *(void **)(a1 + 32);
  unsigned int v9 = [*(id *)(a1 + 40) asset];
  uint64_t v10 = (uint64_t)[v8 removeDownloadRequestIDForAsset:v9];

  if (v6)
  {
    if (!v10)
    {
      if (objc_msgSend(v6, "mad_isDownloadThrottling"))
      {
        if ((int)MediaAnalysisLogLevel() < 3)
        {
          uint64_t v10 = 4294943488;
          goto LABEL_16;
        }
        signed int v11 = VCPLogInstance();
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          long long v13 = [*(id *)(a1 + 40) asset];
          long long v14 = [v13 localIdentifier];
          long long v15 = [v6 description];
          int v20 = 138412546;
          long long v21 = v14;
          __int16 v22 = 2112;
          long long v23 = v15;
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "[OCR][Download][%@] Resource download throttled (%@)", (uint8_t *)&v20, 0x16u);
        }
        uint64_t v10 = 4294943488;
      }
      else
      {
        if ((int)MediaAnalysisLogLevel() < 3)
        {
          uint64_t v10 = 4294943494;
          goto LABEL_16;
        }
        signed int v11 = VCPLogInstance();
        os_log_type_t v16 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v16))
        {
          uint64_t v17 = [*(id *)(a1 + 40) asset];
          unsigned int v18 = [v17 localIdentifier];
          __int16 v19 = [v6 description];
          int v20 = 138412546;
          long long v21 = v18;
          __int16 v22 = 2112;
          long long v23 = v19;
          _os_log_impl((void *)&_mh_execute_header, v11, v16, "[OCR][Download][%@] Resource download failed (%@)", (uint8_t *)&v20, 0x16u);
        }
        uint64_t v10 = 4294943494;
      }
    }
LABEL_16:
    [*(id *)(a1 + 40) setStatus:v10];
    goto LABEL_17;
  }
  [*(id *)(a1 + 40) setDownloadURL:v5];
LABEL_17:
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 80));
}

void sub_10008076C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100080BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_10008101C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  long long v15 = v13;

  _Unwind_Resume(a1);
}

void sub_1000811F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000813DC(_Unwind_Exception *a1)
{
  unsigned int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100082208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100082DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_100082F60(uint64_t a1)
{
  return [*(id *)(a1 + 32) processAssetEntry:*(void *)(a1 + 40) resource:*(void *)(a1 + 48) resourceURL:*(void *)(a1 + 56)];
}

void sub_100083978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_100083B24(uint64_t a1)
{
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id obj = *(id *)(*(void *)(a1 + 32) + 56);
  id v1 = [obj countByEnumeratingWithState:&v26 objects:v32 count:16];
  if (v1)
  {
    uint64_t v25 = *(void *)v27;
    os_log_type_t type = VCPLogToOSLogType[6];
    *(void *)&long long v2 = 138412290;
    long long v22 = v2;
    do
    {
      for (unint64_t i = 0; i != v1; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v27 != v25) {
          objc_enumerationMutation(obj);
        }
        unsigned int v4 = *(void **)(*((void *)&v26 + 1) + 8 * i);
        if (![v4 status])
        {
          if ([v4 isAnalysisCompleteFromComputeSync])
          {
            if ((int)MediaAnalysisLogLevel() < 6) {
              goto LABEL_19;
            }
            id v6 = VCPLogInstance();
            if (os_log_type_enabled(v6, type))
            {
              id v7 = [v4 asset];
              uint64_t v8 = [v7 localIdentifier];
              *(_DWORD *)long long buf = v22;
              unsigned int v31 = v8;
              _os_log_impl((void *)&_mh_execute_header, v6, type, "   [%@] Analysis already complete from compute sync ingestion; skip publishing",
                buf,
                0xCu);
            }
            goto LABEL_18;
          }
          if ([v4 version] != 0x7FFF
            || ([v4 asset],
                unsigned int v9 = objc_claimAutoreleasedReturnValue(),
                [v9 characterRecognitionProperties],
                uint64_t v10 = objc_claimAutoreleasedReturnValue(),
                BOOL v11 = [v10 algorithmVersion] == 0,
                v10,
                v9,
                v11))
          {
            os_log_type_t v12 = objc_msgSend(v4, "asset", v22);
            id v6 = +[PHAssetChangeRequest changeRequestForAsset:v12];

            long long v13 = [v4 ocrData];
            long long v14 = [v4 mrcData];
            signed int v15 = [v4 version];
            os_log_type_t v16 = [v4 asset];
            uint64_t v17 = [v16 adjustmentVersion];
            [v6 setCharacterRecognitionData:v13 machineReadableCodeData:v14 algorithmVersion:v15 adjustmentVersion:v17];

            unsigned int v18 = [v4 asset];
            LODWORD(v16) = objc_msgSend(v18, "mad_isEligibleForComputeSync");

            if (v16)
            {
              __int16 v19 = [v4 asset];
              int v20 = objc_msgSend(v19, "mad_refetchAsset");

              if (v20)
              {
                -[NSObject setLocalAnalysisStage:](v6, "setLocalAnalysisStage:", objc_msgSend(v20, "mad_analysisStageAfterCompletingAnalysis:", 10));
              }
              else
              {
                long long v21 = [v4 asset];
                -[NSObject setLocalAnalysisStage:](v6, "setLocalAnalysisStage:", objc_msgSend(v21, "mad_analysisStageAfterCompletingAnalysis:", 10));
              }
            }
LABEL_18:
          }
        }
LABEL_19:
      }
      id v1 = [obj countByEnumeratingWithState:&v26 objects:v32 count:16];
    }
    while (v1);
  }
}

void sub_100083E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100083F54(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_100083FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10008419C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

VIService *__cdecl sub_1000841BC(id a1)
{
  id v1 = objc_alloc_init((Class)VIService);
  return (VIService *)v1;
}

void sub_100084290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100084320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)VCPMADPECLibraryProcessingTask;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100084A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_100084DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_100084E00(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v4 code]);
}

void sub_100084E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100084EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100085100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100085128(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) publish];
  if (v2)
  {
    unsigned int v3 = v2;
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      id v4 = VCPLogInstance();
      os_log_type_t v5 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        int v13 = 138412290;
        uint64_t v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to publish batch: %@", (uint8_t *)&v13, 0xCu);
      }
    }
    *(_DWORD *)(*(void *)(a1 + 40) + 24) = v3;
  }
  else
  {
    *(void *)(*(void *)(a1 + 40) + 32) += [*(id *)(a1 + 32) count];
    id v7 = *(unint64_t **)(a1 + 40);
    double v8 = 100.0;
    double v9 = (double)v7[5];
    v10.n128_f64[0] = (double)v7[4] * 100.0 / v9;
    if (v10.n128_f64[0] < 100.0) {
      double v8 = (double)v7[4] * 100.0 / v9;
    }
    BOOL v11 = v10.n128_f64[0] > 0.0;
    v10.n128_u64[0] = 0;
    if (v11) {
      v10.n128_f64[0] = v8;
    }
    os_log_type_t v12 = *(void (**)(__n128))(v7[6] + 16);
    v12(v10);
  }
}

void sub_100085700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100085784(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _processAssetsInBatch:*(void *)(a1 + 40)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void sub_100085AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100085D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100085DAC(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    unsigned int v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[MADEmbeddingStoreClientHandler] XPC connection interrupted", v6, 2u);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  os_log_type_t v5 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained cancelAllRequests];
  }
}

void sub_100085E54(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    unsigned int v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)double v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[MADEmbeddingStoreClientHandler] XPC connection invalidated", v8, 2u);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  os_log_type_t v5 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained cancelAllRequests];
    uint64_t v6 = (void *)v5[1];
    v5[1] = 0;

    id v7 = +[VCPClientManager sharedManager];
    [v7 removeClientHandler:v5];
  }
}

void sub_10008697C()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  id v1 = (void *)qword_1002525B0;
  qword_1002525B0 = (uint64_t)v0;
}

void sub_100086AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100086B14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100086BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100086CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100086DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000870FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  uint64_t v25 = v24;

  _Unwind_Resume(a1);
}

void sub_1000871EC(void *a1)
{
  id v2 = +[PHAssetCreationRequest creationRequestForAssetCopyFromAsset:a1[4] options:a1[5]];
  [v2 addResourceWithType:9 fileURL:a1[6] options:0];
}

void sub_100087250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100087990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100087F18(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = [a3 code];
  os_log_type_t v5 = *(uint64_t (**)(uint64_t, id))(v3 + 16);
  return v5(v3, v4);
}

void sub_100088698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100088720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008887C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)VCPPhotosCaptureProcessingTask;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_100088B28(_Unwind_Exception *a1)
{
}

void sub_100088BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100088DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100088E30(uint64_t a1)
{
  uint64_t v19 = 0;
  int v20 = &v19;
  uint64_t v21 = 0x2020000000;
  uint64_t v22 = 0;
  uint64_t v15 = 0;
  os_log_type_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v18 = 0;
  id v2 = +[NSMutableDictionary dictionary];
  uint64_t v3 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100089054;
  v9[3] = &unk_10021C128;
  int v13 = &v19;
  uint64_t v14 = &v15;
  id v4 = v2;
  id v10 = v4;
  id v11 = *(id *)(a1 + 40);
  id v12 = *(id *)(a1 + 48);
  [v3 enumerateKeysAndObjectsUsingBlock:v9];
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    os_log_type_t v5 = VCPLogInstance();
    os_log_type_t v6 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = v20[3];
      uint64_t v8 = v16[3];
      *(_DWORD *)long long buf = 134218240;
      uint64_t v24 = v7;
      __int16 v25 = 2048;
      uint64_t v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "[PhotosCapture] Persisted %lu faces (%lu identified)", buf, 0x16u);
    }
  }
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
}

void sub_100088FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v12 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100089054(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  unsigned int v31 = +[PHAssetChangeRequest changeRequestForAsset:](PHAssetChangeRequest, "changeRequestForAsset:", a2, v5);
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id obj = v5;
  id v6 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v34;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v34 != v7) {
          objc_enumerationMutation(obj);
        }
        double v9 = *(void **)(*((void *)&v33 + 1) + 8 * (void)v8);
        ++*(void *)(*(void *)(a1[7] + 8) + 24);
        id v10 = [v9 personLocalIdentifier];
        BOOL v11 = v10 == 0;

        if (v11)
        {
          uint64_t v14 = 0;
        }
        else
        {
          ++*(void *)(*(void *)(a1[8] + 8) + 24);
          uint64_t v12 = (void *)a1[4];
          int v13 = [v9 personLocalIdentifier];
          uint64_t v14 = [v12 objectForKeyedSubscript:v13];

          if (!v14)
          {
            uint64_t v15 = (void *)a1[5];
            os_log_type_t v16 = [v9 personLocalIdentifier];
            uint64_t v17 = [v15 objectForKeyedSubscript:v16];

            if (v17)
            {
              uint64_t v14 = +[PHPersonChangeRequest changeRequestForPerson:v17];
              uint64_t v18 = (void *)a1[4];
              uint64_t v19 = [v9 personLocalIdentifier];
              [v18 setObject:v14 forKeyedSubscript:v19];
            }
            else
            {
              uint64_t v14 = 0;
            }
          }
        }
        int v20 = [v9 localIdentifier];
        BOOL v21 = v20 == 0;

        if (v21)
        {
          uint64_t v24 = +[PHFaceChangeRequest creationRequestForFace];
          __int16 v25 = [v24 placeholderForCreatedFace];
          +[VCPFaceUtils assignPropertiesOfVCPPhotosFace:v9 toPHFaceChangeRequest:v24];
          [v24 setNameSource:6];
          id v38 = v25;
          long long v28 = +[NSArray arrayWithObjects:&v38 count:1];
          [v31 addFaces:v28];

          if (!v14) {
            goto LABEL_19;
          }
          int v37 = v25;
          uint64_t v26 = +[NSArray arrayWithObjects:&v37 count:1];
          [v14 addFaces:v26];
        }
        else
        {
          uint64_t v22 = [v9 localIdentifier];
          os_log_type_t v40 = v22;
          long long v23 = +[NSArray arrayWithObjects:&v40 count:1];
          uint64_t v24 = +[PHFace fetchFacesWithLocalIdentifiers:v23 options:a1[6]];

          __int16 v25 = [v24 firstObject];
          uint64_t v26 = +[PHFaceChangeRequest changeRequestForFace:v25];
          +[VCPFaceUtils assignPropertiesOfVCPPhotosFace:v9 toPHFaceChangeRequest:v26];
          [v26 setNameSource:6];
          if (v14)
          {
            id v39 = v25;
            long long v27 = +[NSArray arrayWithObjects:&v39 count:1];
            [v14 addFaces:v27];
          }
        }

LABEL_19:
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
    }
    while (v6);
  }

  long long v29 = +[PHAsset quickClassificationFaceAdjustmentVersion];
  [v31 setFaceAdjustmentVersion:v29];
}

void sub_100089464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_100089B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_100089C44(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  id v11 = 0;
  id v12 = 0;
  unsigned int v7 = [v6 processAsset:v5 onDemandDetection:a3 detectedFaces:&v12 detectedPersons:&v11];
  id v8 = v12;
  id v9 = v11;
  if (!v7)
  {
    id v10 = *(id *)(a1 + 40);
    objc_sync_enter(v10);
    if ([v8 count])
    {
      if ((a3 & 1) == 0) {
        ++*(void *)(*(void *)(a1 + 40) + 72);
      }
      ++*(void *)(*(void *)(a1 + 40) + 56);
      ++*(void *)(*(void *)(a1 + 40) + 64);
      *(void *)(*(void *)(a1 + 40) + 80) += [v9 count];
      *(void *)(*(void *)(a1 + 40) + 88) += [v8 count];
      [*(id *)(a1 + 48) setObject:v8 forKeyedSubscript:v5];
      [*(id *)(a1 + 56) addEntriesFromDictionary:v9];
    }
    else if (a3)
    {
      ++*(void *)(*(void *)(a1 + 40) + 56);
    }
    objc_sync_exit(v10);
  }
}

void sub_100089D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100089DBC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 26));
  if ((v2 & 1) == 0)
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 25));
    if ((v5 & 1) == 0 || !*(unsigned char *)(a1 + 64))
    {
      unsigned int v7 = [*(id *)(a1 + 40) objectAtIndexedSubscript:a2];
      unsigned int v8 = objc_msgSend(v7, "vcp_isPano");
      id v9 = *(void **)(a1 + 32);
      if (v8)
      {
        id v10 = v9;
        objc_sync_enter(v10);
        [*(id *)(a1 + 48) addObject:v7];
        objc_sync_exit(v10);
      }
      else if ([v9 isAssetEligible:v7])
      {
        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      }
    }
  }
}

void sub_100089EB0(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_100089ED4(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  uint64_t v3 = VCPSignPostLog();
  os_signpost_id_t v4 = os_signpost_id_generate(v3);

  unsigned __int8 v5 = VCPSignPostLog();
  id v6 = v5;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_BEGIN, v4, "VCPJIT_Face_PersistBatch", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  [*(id *)(a1 + 32) _persistClassifiedFaces:*(void *)(a1 + 40) withDetectedPersons:*(void *)(a1 + 48)];
  unsigned int v7 = VCPSignPostLog();
  unsigned int v8 = v7;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)id v9 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v4, "VCPJIT_Face_PersistBatch", (const char *)&unk_1001F3BD3, v9, 2u);
  }

  if (v2)
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
}

void sub_10008A4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10008A5D8(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 26));
  if (v1) {
    return 1;
  }
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 25));
  return v2 & 1;
}

unint64_t sub_10008A604(uint64_t a1, void *a2)
{
  id v2 = a2;
  unint64_t v3 = (unint64_t)[v2 prepare];
  if (!v3)
  {
    id v4 = [v2 process];
    unint64_t v3 = (unint64_t)v4;
    if (v4 == -128 || !v4)
    {
      unsigned int v5 = [v2 publish];
      if (v5) {
        unint64_t v3 = v5;
      }
      else {
        unint64_t v3 = v3;
      }
    }
  }

  return v3;
}

void sub_10008A664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008B678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38)
{
  _Unwind_Resume(a1);
}

void sub_10008BBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12)
{
  objc_sync_exit(v12);

  _Unwind_Resume(a1);
}

void sub_10008BE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10008BFD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008C03C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008C524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008CFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

id sub_10008D118(uint64_t a1)
{
  return [*(id *)(a1 + 32) resetAnalysisVersionForMediaProcessingTaskID:*(void *)(a1 + 48) assetIdentifiers:*(void *)(a1 + 40)];
}

id sub_10008D128(uint64_t a1)
{
  return [*(id *)(a1 + 32) resetAnalysisVersionForMediaProcessingTaskID:*(void *)(a1 + 48) assetIdentifiers:*(void *)(a1 + 40)];
}

void sub_10008D33C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008D504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008D74C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008D7F8(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10008D9F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008EDC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008F348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id a42)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);

  _Block_object_dispose((const void *)(v46 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008F440(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10008F450(uint64_t a1)
{
}

void sub_10008F458(uint64_t a1, double a2)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    id v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2048;
      double v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ %.2f%% complete", (uint8_t *)&v7, 0x16u);
    }
  }
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
}

void sub_10008F544(void *a1, int a2)
{
  [*(id *)(*(void *)(a1[8] + 8) + 40) stop];
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    unint64_t v3 = VCPLogInstance();
    os_log_type_t v4 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = a1[4];
      [*(id *)(*(void *)(a1[8] + 8) + 40) elapsedTimeSeconds];
      CFStringRef v7 = @"interrupted";
      *(_DWORD *)long long buf = 138413058;
      uint64_t v71 = v5;
      __int16 v72 = 2112;
      if (!a2) {
        CFStringRef v7 = @"finished";
      }
      uint64_t v73 = (uint64_t)v7;
      __int16 v74 = 2048;
      id v75 = v6;
      __int16 v76 = 1024;
      LODWORD(v77) = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%@ processing %@ after %0.6fs (%d)", buf, 0x26u);
    }
  }
  if (a2 != -128 && a2)
  {
    uint64_t v8 = VCPLogInstance();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
      sub_10008FDF0((uint64_t)a1, a2, v8);
    }
  }
  if (a1[5])
  {
    __int16 v9 = +[NSMutableSet set];
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    double v10 = [(id)objc_opt_class() producedResultIdentifiers];
    id v11 = [v10 countByEnumeratingWithState:&v66 objects:v79 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v67;
      os_log_type_t v13 = VCPLogToOSLogType[5];
      do
      {
        for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v67 != v12) {
            objc_enumerationMutation(v10);
          }
          uint64_t v15 = *(void *)(*((void *)&v66 + 1) + 8 * i);
          if ((int)MediaAnalysisLogLevel() >= 5)
          {
            os_log_type_t v16 = VCPLogInstance();
            if (os_log_type_enabled(v16, v13))
            {
              uint64_t v17 = a1[4];
              int v18 = (int)*(double *)(*(void *)(a1[9] + 8) + 24);
              *(_DWORD *)long long buf = 138412802;
              uint64_t v71 = v17;
              __int16 v72 = 2112;
              uint64_t v73 = v15;
              __int16 v74 = 1024;
              LODWORD(v75) = v18;
              _os_log_impl((void *)&_mh_execute_header, v16, v13, "%@ Collecting produced results %@: %d", buf, 0x1Cu);
            }
          }
          id v19 = [objc_alloc((Class)BGSystemTaskResult) initWithIdentifier:v15 cumulativeProductionCount:(int)*(double *)(*(void *)(a1[9] + 8) + 24)];
          [v9 addObject:v19];
        }
        id v11 = [v10 countByEnumeratingWithState:&v66 objects:v79 count:16];
      }
      while (v11);
    }

    if ([v9 count])
    {
      if ((int)MediaAnalysisLogLevel() >= 5)
      {
        int v20 = VCPLogInstance();
        os_log_type_t v21 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = a1[4];
          *(_DWORD *)long long buf = 138412290;
          uint64_t v71 = v22;
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "%@ Reporting produced results ...", buf, 0xCu);
        }
      }
      long long v23 = (void *)a1[5];
      id v65 = 0;
      unsigned __int8 v24 = [v23 producedCumulativeResults:v9 error:&v65];
      id v25 = v65;
      if ((v24 & 1) == 0 && (int)MediaAnalysisLogLevel() >= 3)
      {
        uint64_t v26 = VCPLogInstance();
        os_log_type_t v27 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = a1[4];
          *(_DWORD *)long long buf = 138412546;
          uint64_t v71 = v28;
          __int16 v72 = 2112;
          uint64_t v73 = (uint64_t)v25;
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "%@ Failed to report produced results - %@", buf, 0x16u);
        }
      }
    }
    if (!a2)
    {
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v29 = [(id)objc_opt_class() featureCodes];
      id v30 = [v29 countByEnumeratingWithState:&v61 objects:v78 count:16];
      if (!v30) {
        goto LABEL_52;
      }
      uint64_t v31 = *(void *)v62;
      os_log_type_t type = VCPLogToOSLogType[3];
      os_log_type_t v32 = VCPLogToOSLogType[5];
      while (1)
      {
        for (j = 0; j != v30; j = (char *)j + 1)
        {
          if (*(void *)v62 != v31) {
            objc_enumerationMutation(v29);
          }
          long long v34 = *(void **)(*((void *)&v61 + 1) + 8 * (void)j);
          id v35 = [v34 unsignedIntegerValue];
          id v60 = 0;
          unsigned __int8 v36 = +[BGSystemTaskCheckpoints reportFeatureCheckpoint:30 forFeature:v35 error:&v60];
          id v37 = v60;
          if (v36)
          {
            if ((int)MediaAnalysisLogLevel() < 5) {
              goto LABEL_50;
            }
            id v38 = VCPLogInstance();
            if (!os_log_type_enabled(v38, v32)) {
              goto LABEL_49;
            }
            uint64_t v39 = a1[4];
            *(_DWORD *)long long buf = 138412802;
            uint64_t v71 = v39;
            __int16 v72 = 2048;
            uint64_t v73 = 30;
            __int16 v74 = 2112;
            id v75 = v34;
            os_log_type_t v40 = v38;
            os_log_type_t v41 = v32;
            uint64_t v42 = "%@ Reported checkpoint %lu for %@";
            uint32_t v43 = 32;
            goto LABEL_48;
          }
          if ((int)MediaAnalysisLogLevel() < 3) {
            goto LABEL_50;
          }
          id v38 = VCPLogInstance();
          if (os_log_type_enabled(v38, type))
          {
            uint64_t v44 = a1[4];
            *(_DWORD *)long long buf = 138413058;
            uint64_t v71 = v44;
            __int16 v72 = 2048;
            uint64_t v73 = 30;
            __int16 v74 = 2112;
            id v75 = v34;
            __int16 v76 = 2112;
            id v77 = v37;
            os_log_type_t v40 = v38;
            os_log_type_t v41 = type;
            uint64_t v42 = "%@ Failed to report checkpoint %lu for %@ - %@";
            uint32_t v43 = 42;
LABEL_48:
            _os_log_impl((void *)&_mh_execute_header, v40, v41, v42, buf, v43);
          }
LABEL_49:

LABEL_50:
        }
        id v30 = [v29 countByEnumeratingWithState:&v61 objects:v78 count:16];
        if (!v30)
        {
LABEL_52:

          break;
        }
      }
    }
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() < 3) {
      goto LABEL_57;
    }
    __int16 v9 = VCPLogInstance();
    os_log_type_t v45 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v9, v45))
    {
      uint64_t v46 = a1[4];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v71 = v46;
      _os_log_impl((void *)&_mh_execute_header, v9, v45, "%@ systemTask is nil; skip reporting progress", buf, 0xCu);
    }
  }

LABEL_57:
  uint64_t v47 = *(void *)(a1[10] + 8);
  long long v48 = *(void **)(v47 + 40);
  *(void *)(v47 + 40) = 0;

  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v49 = VCPLogInstance();
    os_log_type_t v50 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = a1[4];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v71 = v51;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "%@ exiting processing task ...", buf, 0xCu);
    }
  }
  uint64_t v52 = +[MADProgressReporterBackgroundSystemTask sharedTask];
  id v59 = 0;
  [v52 submitTask:&v59];
  id v53 = v59;

  if (v53 && (int)MediaAnalysisLogLevel() >= 5)
  {
    id v54 = VCPLogInstance();
    os_log_type_t v55 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = a1[4];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v71 = v56;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "%@ Failed to request workload progress report task", buf, 0xCu);
    }
  }
  (*(void (**)(void))(a1[7] + 16))();
}

void sub_10008FD40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008FDF0(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 1024;
  int v7 = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "%@ processing failed (%d)", (uint8_t *)&v4, 0x12u);
}

void sub_100090078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000900C4(id a1)
{
  return 0;
}

void sub_1000901E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000903F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

BOOL sub_100090430(id a1)
{
  return 0;
}

void sub_10009053C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100090748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100090974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100090B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_100090BFC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  double v10 = +[NSString stringWithFormat:@"[MACS][ResultFor%@][%@]", *(void *)(a1 + 32), v7];
  if (v9)
  {
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      id v11 = VCPLogInstance();
      os_log_type_t v12 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v11, v12))
      {
        *(_DWORD *)long long buf = 138412546;
        uint64_t v26 = v10;
        __int16 v27 = 2112;
        id v28 = v9;
        os_log_type_t v13 = "%@ Failed to process %@";
        uint64_t v14 = v11;
        os_log_type_t v15 = v12;
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, buf, 0x16u);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
  }
  else
  {
    if ([*(id *)(a1 + 40) startAccessingSecurityScopedResource])
    {
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        os_log_type_t v16 = VCPLogInstance();
        os_log_type_t v17 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v16, v17))
        {
          int v18 = *(void **)(a1 + 40);
          *(_DWORD *)long long buf = 138412546;
          uint64_t v26 = v10;
          __int16 v27 = 2112;
          id v28 = v18;
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "%@ Consuming secure scoped result URL %@", buf, 0x16u);
        }
      }
      uint64_t v19 = *(void *)(a1 + 32);
      id v20 = [v7 hash];
      os_log_type_t v21 = +[NSDate now];
      id v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"result-%@-%lu-%lu.data", v19, v20, [v21 hash]);

      uint64_t v22 = [*(id *)(a1 + 40) URLByAppendingPathComponent:v11];
      [*(id *)(a1 + 56) _saveResult:v8 fileURL:v22];
      [*(id *)(a1 + 40) stopAccessingSecurityScopedResource];

      goto LABEL_15;
    }
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      id v11 = VCPLogInstance();
      os_log_type_t v23 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v11, v23))
      {
        unsigned __int8 v24 = *(void **)(a1 + 40);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v26 = v10;
        __int16 v27 = 2112;
        id v28 = v24;
        os_log_type_t v13 = "%@ Failed to open secure scoped result URL %@; exit";
        uint64_t v14 = v11;
        os_log_type_t v15 = v23;
        goto LABEL_14;
      }
LABEL_15:
    }
  }
}

void sub_100090ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000910CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_100091114(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  double v10 = +[NSString stringWithFormat:@"[MACS][ResultFor%@][%@]", *(void *)(a1 + 32), v7];
  if (v9)
  {
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      id v11 = VCPLogInstance();
      os_log_type_t v12 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v11, v12))
      {
        *(_DWORD *)long long buf = 138412546;
        __int16 v27 = v10;
        __int16 v28 = 2112;
        id v29 = v9;
        os_log_type_t v13 = "%@ Failed to process %@";
        uint64_t v14 = v11;
        os_log_type_t v15 = v12;
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, buf, 0x16u);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
  }
  else
  {
    if ([*(id *)(a1 + 40) startAccessingSecurityScopedResource])
    {
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        os_log_type_t v16 = VCPLogInstance();
        os_log_type_t v17 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v16, v17))
        {
          int v18 = *(void **)(a1 + 40);
          *(_DWORD *)long long buf = 138412546;
          __int16 v27 = v10;
          __int16 v28 = 2112;
          id v29 = v18;
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "%@ Consuming secure scoped result URL %@", buf, 0x16u);
        }
      }
      uint64_t v19 = *(void *)(a1 + 32);
      id v20 = [v7 absoluteString];
      id v21 = [v20 hash];
      uint64_t v22 = +[NSDate now];
      id v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"result-%@-%lu-%lu.data", v19, v21, [v22 hash]);

      os_log_type_t v23 = [*(id *)(a1 + 40) URLByAppendingPathComponent:v11];
      [*(id *)(a1 + 56) _saveResult:v8 fileURL:v23];
      [*(id *)(a1 + 40) stopAccessingSecurityScopedResource];

      goto LABEL_15;
    }
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      id v11 = VCPLogInstance();
      os_log_type_t v24 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v11, v24))
      {
        id v25 = *(void **)(a1 + 40);
        *(_DWORD *)long long buf = 138412546;
        __int16 v27 = v10;
        __int16 v28 = 2112;
        id v29 = v25;
        os_log_type_t v13 = "%@ Failed to open secure scoped result URL %@; exit";
        uint64_t v14 = v11;
        os_log_type_t v15 = v24;
        goto LABEL_14;
      }
LABEL_15:
    }
  }
}

void sub_1000913F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000920E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1000923E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v26 objects:v34 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v27;
    if (v3) {
      uint64_t v7 = 3;
    }
    else {
      uint64_t v7 = 0x7FFFLL;
    }
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v27 != v6) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v26 + 1) + 8 * i);
        [v9 setStatus:v7];
      }
      id v5 = [v4 countByEnumeratingWithState:&v26 objects:v34 count:16];
    }
    while (v5);
  }

  id v11 = +[MADSystemDataStore systemDataStore];
  id v25 = 0;
  unsigned __int8 v12 = [v11 commitChangesOrRollback:&v25];
  id v13 = v25;

  if ((v12 & 1) == 0)
  {
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      uint64_t v14 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v31 = v16;
        __int16 v32 = 2112;
        id v33 = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "%@ Failed to commit changes - %@", buf, 0x16u);
      }
    }
    id v17 = v13;

    id v3 = v17;
  }
  int v18 = [*(id *)(a1 + 32) firstObject];
  uint64_t v19 = [v18 resultDirectoryURL];
  [v19 stopAccessingSecurityScopedResource];

  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v20 = VCPLogInstance();
    os_log_type_t v21 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = *(void *)(a1 + 40);
      os_log_type_t v23 = [*(id *)(a1 + 32) firstObject];
      os_log_type_t v24 = [v23 resultDirectoryURL];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v31 = v22;
      __int16 v32 = 2112;
      id v33 = v24;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%@ Closing secure scoped result URL %@", buf, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000926B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100092720(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v16 objects:v24 count:16];
  if (v5)
  {
    uint64_t v7 = *(void *)v17;
    os_log_type_t v8 = VCPLogToOSLogType[7];
    *(void *)&long long v6 = 138412546;
    long long v15 = v6;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(v4);
        }
        double v10 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        id v11 = objc_msgSend(v10, "assetURL", v15, (void)v16);
        [v11 stopAccessingSecurityScopedResource];

        if ((int)MediaAnalysisLogLevel() >= 7)
        {
          unsigned __int8 v12 = VCPLogInstance();
          if (os_log_type_enabled(v12, v8))
          {
            uint64_t v13 = *(void *)(a1 + 40);
            uint64_t v14 = [v10 assetURL];
            *(_DWORD *)long long buf = v15;
            uint64_t v21 = v13;
            __int16 v22 = 2112;
            os_log_type_t v23 = v14;
            _os_log_impl((void *)&_mh_execute_header, v12, v8, "%@ Closing secure scoped URL %@", buf, 0x16u);
          }
        }
      }
      id v5 = [v4 countByEnumeratingWithState:&v16 objects:v24 count:16];
    }
    while (v5);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000928E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100092B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_100092C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)MADComputeServiceProcessingTask;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_100092E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009312C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100093860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  _Unwind_Resume(a1);
}

id sub_100093978(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_100093980(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSErrorUserInfoKey v24 = NSLocalizedDescriptionKey;
    id v3 = +[NSString stringWithFormat:@"%@ Analysis failed - %d", *(void *)(a1 + 40), a2];
    id v25 = v3;
    id v4 = +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1];
    long long v17 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-18 userInfo:v4];

    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      id v5 = VCPLogInstance();
      os_log_type_t v6 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v5, v6))
      {
        *(_DWORD *)long long buf = 138412290;
        os_log_type_t v23 = v17;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "%@", buf, 0xCu);
      }
    }
    *(double *)(*(void *)(a1 + 32) + 80) = *(double *)(*(void *)(a1 + 32) + 80)
                                             + (double)(unint64_t)[*(id *)(*(void *)(a1 + 32) + 24) count];
    (*(void (**)(double))(*(void *)(*(void *)(a1 + 32) + 88) + 16))(*(double *)(*(void *)(a1 + 32)
                                                                                                 + 80) / *(double *)(*(void *)(a1 + 32) + 72));
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 96) + 16))();
  }
  else
  {
    long long v17 = [*(id *)(a1 + 32) _loadAssetsForTaskID:2];
    uint64_t v7 = +[PHSceneClassification fetchSceneClassificationsGroupedByAssetLocalIdentifierForAssets:v17];
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v8 = *(id *)(*(void *)(a1 + 32) + 24);
    id v9 = [v8 countByEnumeratingWithState:&v18 objects:v26 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v19;
      do
      {
        for (unint64_t i = 0; i != v9; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v10) {
            objc_enumerationMutation(v8);
          }
          uint64_t v12 = *(void *)(*((void *)&v18 + 1) + 8 * i);
          uint64_t v14 = *(void **)(a1 + 32);
          long long v15 = [v7 objectForKeyedSubscript:v12];
          long long v16 = [v14 _prepareSceneResultWithClassifications:v15];

          *(double *)(*(void *)(a1 + 32) + 80) = *(double *)(*(void *)(a1 + 32) + 80) + 1.0;
          (*(void (**)(double))(*(void *)(*(void *)(a1 + 32) + 88) + 16))(*(double *)(*(void *)(a1 + 32) + 80) / *(double *)(*(void *)(a1 + 32) + 72));
          (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 96) + 16))();
        }
        id v9 = [v8 countByEnumeratingWithState:&v18 objects:v26 count:16];
      }
      while (v9);
    }
  }
}

void sub_100093CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100094024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100094758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  _Unwind_Resume(a1);
}

id sub_1000948A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000948B0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
    id v3 = +[NSString stringWithFormat:@"%@ Analysis failed - %d", *(void *)(a1 + 40), a2];
    id v30 = v3;
    id v4 = +[NSDictionary dictionaryWithObjects:&v30 forKeys:&v29 count:1];
    long long v21 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-18 userInfo:v4];

    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      id v5 = VCPLogInstance();
      os_log_type_t v6 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v5, v6))
      {
        *(_DWORD *)long long buf = 138412290;
        long long v28 = v21;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "%@", buf, 0xCu);
      }
    }
    *(double *)(*(void *)(a1 + 32) + 80) = *(double *)(*(void *)(a1 + 32) + 80)
                                             + (double)(unint64_t)[*(id *)(*(void *)(a1 + 32) + 24) count];
    (*(void (**)(double))(*(void *)(*(void *)(a1 + 32) + 88) + 16))(*(double *)(*(void *)(a1 + 32)
                                                                                                 + 80) / *(double *)(*(void *)(a1 + 32) + 72));
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 96) + 16))();
  }
  else
  {
    long long v21 = [*(id *)(a1 + 32) _loadAssetsForTaskID:3];
    uint64_t v7 = [v21 firstObject];
    id v8 = [v7 photoLibrary];
    uint64_t v9 = [v8 librarySpecificFetchOptions];

    long long v20 = (void *)v9;
    uint64_t v10 = +[PHFace fetchFacesGroupedByAssetLocalIdentifierForAssets:v21 options:v9];
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id obj = *(id *)(*(void *)(a1 + 32) + 24);
    id v11 = [obj countByEnumeratingWithState:&v23 objects:v31 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v24;
      do
      {
        for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v24 != v12) {
            objc_enumerationMutation(obj);
          }
          uint64_t v14 = *(void *)(*((void *)&v23 + 1) + 8 * i);
          long long v16 = *(void **)(a1 + 32);
          long long v17 = [v10 objectForKeyedSubscript:v14];
          long long v18 = [v17 fetchedObjects];
          long long v19 = [v16 _prepareFaceResultWithFaces:v18];

          *(double *)(*(void *)(a1 + 32) + 80) = *(double *)(*(void *)(a1 + 32) + 80) + 1.0;
          (*(void (**)(double))(*(void *)(*(void *)(a1 + 32) + 88) + 16))(*(double *)(*(void *)(a1 + 32) + 80) / *(double *)(*(void *)(a1 + 32) + 72));
          (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 96) + 16))();
        }
        id v11 = [obj countByEnumeratingWithState:&v23 objects:v31 count:16];
      }
      while (v11);
    }
  }
}

void sub_100094C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1000950AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100095558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_100096BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, _Unwind_Exception *exception_objecta, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

id sub_100097058(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v1 = *(id *)(*(void *)(a1 + 32) + 8);
  id v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (unint64_t i = 0; i != v2; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v1);
        }
        id v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if (objc_opt_isKindOfClass())
        {
          id v6 = v5;
          goto LABEL_11;
        }
      }
      id v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  id v6 = 0;
LABEL_11:

  return v6;
}

void sub_100097184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000971A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[MADSceneClassification entryWithLabel:confidence:boundingBox:videoEntries:](MADSceneClassification, "entryWithLabel:confidence:boundingBox:videoEntries:", v5, v6, 1.0, CGRectNull.origin.x, CGRectNull.origin.y, CGRectNull.size.width, CGRectNull.size.height);
  if (v7)
  {
    [*(id *)(a1 + 32) addObject:v7];
  }
  else if ((int)MediaAnalysisLogLevel() >= 3)
  {
    long long v8 = VCPLogInstance();
    os_log_type_t v9 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      int v11 = 138412802;
      uint64_t v12 = v10;
      __int16 v13 = 2112;
      id v14 = v5;
      __int16 v15 = 2112;
      id v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%@ Failed to create classification for label %@ from %@; skip",
        (uint8_t *)&v11,
        0x20u);
    }
  }
}

void sub_1000972EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100097318(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[MADDetectedFace entryWithFaceID:confidence:boundingBox:videoEntries:](MADDetectedFace, "entryWithFaceID:confidence:boundingBox:videoEntries:", [v5 intValue], v6, 1.0, CGRectNull.origin.x, CGRectNull.origin.y, CGRectNull.size.width, CGRectNull.size.height);
  if (v7)
  {
    [*(id *)(a1 + 32) addObject:v7];
  }
  else if ((int)MediaAnalysisLogLevel() >= 3)
  {
    long long v8 = VCPLogInstance();
    os_log_type_t v9 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v8, v9))
    {
      int v10 = 138412546;
      id v11 = v5;
      __int16 v12 = 2112;
      id v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[MADComputeServiceProcessingTask] Failed to create face %@ from %@; skip",
        (uint8_t *)&v10,
        0x16u);
    }
  }
}

void sub_100097460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100097624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100097664(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v1 = *(id *)(*(void *)(a1 + 32) + 8);
  id v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (unint64_t i = 0; i != v2; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v1);
        }
        id v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if (objc_opt_isKindOfClass())
        {
          id v6 = v5;
          goto LABEL_11;
        }
      }
      id v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  id v6 = 0;
LABEL_11:

  return v6;
}

void sub_100097790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100097828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100097E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100098308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100098D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100098ED4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100098EE4(uint64_t a1)
{
}

void sub_100098EEC(void *a1)
{
  id v2 = (void *)a1[4];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100098F8C;
  v6[3] = &unk_100219D98;
  v6[4] = a1[5];
  uint64_t v3 = [v2 analyzeAsset:v6 streamed:0];
  uint64_t v4 = *(void *)(a1[6] + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_100098F8C(uint64_t a1)
{
  id v2 = +[VCPWatchdog sharedWatchdog];
  [v2 pet];

  uint64_t v3 = *(void **)(a1 + 32);
  return [v3 isCancelled];
}

void sub_100098FDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100098FEC(void *a1)
{
  id v2 = (void *)a1[4];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10009908C;
  v6[3] = &unk_100219D98;
  v6[4] = a1[5];
  uint64_t v3 = [v2 analyzeAsset:v6 withOptions:0];
  uint64_t v4 = *(void *)(a1[6] + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_10009908C(uint64_t a1)
{
  id v2 = +[VCPWatchdog sharedWatchdog];
  [v2 pet];

  uint64_t v3 = *(void **)(a1 + 32);
  return [v3 isCancelled];
}

void sub_1000990DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100099D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100099EFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v8 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        int v17 = 138412546;
        uint64_t v18 = v9;
        __int16 v19 = 2112;
        id v20 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "%@ Request failed with error: %@", (uint8_t *)&v17, 0x16u);
      }
    }
    long long v10 = (void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    long long v11 = v6;
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      __int16 v12 = VCPLogInstance();
      os_log_type_t v13 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        int v17 = 138412546;
        uint64_t v18 = v14;
        __int16 v19 = 2112;
        id v20 = v5;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "%@ Request completed with analysis for assets %@", (uint8_t *)&v17, 0x16u);
      }
    }
    long long v10 = (void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    long long v11 = v5;
  }
  id v15 = v11;
  id v16 = *v10;
  *long long v10 = v15;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10009A0AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10009A0D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_10009A734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009A7F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v8 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        int v17 = 138412546;
        uint64_t v18 = v9;
        __int16 v19 = 2112;
        id v20 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "%@ Request failed with error: %@", (uint8_t *)&v17, 0x16u);
      }
    }
    long long v10 = (void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    long long v11 = v6;
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      __int16 v12 = VCPLogInstance();
      os_log_type_t v13 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        int v17 = 138412546;
        uint64_t v18 = v14;
        __int16 v19 = 2112;
        id v20 = v5;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "%@ Request completed with analysis for assets %@", (uint8_t *)&v17, 0x16u);
      }
    }
    long long v10 = (void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    long long v11 = v5;
  }
  id v15 = v11;
  id v16 = *v10;
  *long long v10 = v15;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10009A9A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10009A9C8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    id v2 = +[VCPWatchdog sharedWatchdog];
    [v2 pet];
  }
  return v1;
}

void sub_10009AA14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009AE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_10009C300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34)
{
  _Unwind_Resume(a1);
}

void sub_10009CBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void *a15, const void *a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,id location)
{
  sub_100004484(&a15);
  sub_100004484(&a16);
  sub_100004484(&a17);
  objc_destroyWeak(v32);

  objc_destroyWeak(v30);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_10009CCC4(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    id v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)os_log_type_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[MADComputeServiceClientHandler] XPC connection interrupted", v8, 2u);
    }
  }
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 16);
  *(void *)(v4 + 16) = 0;

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v7 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained cancelAllRequests];
  }
}

void sub_10009CD84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009CD94(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    id v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)long long v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[MADComputeServiceClientHandler] XPC connection invalidated", v10, 2u);
    }
  }
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 16);
  *(void *)(v4 + 16) = 0;

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v7 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained cancelAllRequests];
    os_log_type_t v8 = (void *)v7[1];
    v7[1] = 0;

    uint64_t v9 = +[VCPClientManager sharedManager];
    [v9 removeClientHandler:v7];
  }
}

void sub_10009CE88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009CEA4(id a1, NSError *a2)
{
  id v2 = a2;
  if ((int)MediaAnalysisLogLevel() >= 3)
  {
    os_log_type_t v3 = VCPLogInstance();
    os_log_type_t v4 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v3, v4))
    {
      int v5 = 138412290;
      id v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "[MADComputeServiceClientHandler] Connecting client proxy error %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_10009CF70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009CFE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009D258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_10009D538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_10009DA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  _Unwind_Resume(a1);
}

id sub_10009DB60(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:requestID:", *(void *)(a1 + 40));
}

void sub_10009DB74(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  long long v10 = v9;
  if (*(void *)(*(void *)(a1 + 32) + 16))
  {
    if (v9)
    {
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        long long v11 = VCPLogInstance();
        os_log_type_t v12 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v11, v12))
        {
          *(_DWORD *)long long buf = 138412290;
          long long v27 = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "[MADComputeServiceClientHandler] Entering results handler group with error ... %@", buf, 0xCu);
        }
      }
      dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48));
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      id v15 = *(void **)(v14 + 16);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_10009DEA4;
      v24[3] = &unk_10021C3E0;
      v24[4] = v14;
      [v15 handleResults:0 assetRepresentation:v7 requestID:v13 error:v10 acknowledgement:v24];
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        uint64_t v18 = VCPLogInstance();
        os_log_type_t v19 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v18, v19))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "[MADComputeServiceClientHandler] Entering results handler group ...", buf, 2u);
        }
      }
      dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48));
      id v20 = *(void **)(*(void *)(a1 + 32) + 16);
      id v25 = v8;
      long long v21 = +[NSArray arrayWithObjects:&v25 count:1];
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_10009DF98;
      v23[3] = &unk_10021C3E0;
      uint64_t v22 = *(void *)(a1 + 40);
      v23[4] = *(void *)(a1 + 32);
      [v20 handleResults:v21 assetRepresentation:v7 requestID:v22 error:0 acknowledgement:v23];
    }
  }
  else if ((int)MediaAnalysisLogLevel() >= 6)
  {
    id v16 = VCPLogInstance();
    os_log_type_t v17 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v16, v17))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[MADComputeServiceClientHandler] No remote proxy; exit resultHandler",
        buf,
        2u);
    }
  }
}

void sub_10009DE68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009DEA4(uint64_t a1, int a2)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    os_log_type_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      CFStringRef v6 = @"NO";
      if (a2) {
        CFStringRef v6 = @"YES";
      }
      int v7 = 138412290;
      CFStringRef v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MADComputeServiceClientHandler] Received acknowledgement response %@", (uint8_t *)&v7, 0xCu);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48));
}

void sub_10009DF98(uint64_t a1, int a2)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    os_log_type_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      CFStringRef v6 = @"NO";
      if (a2) {
        CFStringRef v6 = @"YES";
      }
      int v7 = 138412290;
      CFStringRef v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MADComputeServiceClientHandler] Received acknowledgement response %@", (uint8_t *)&v7, 0xCu);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48));
}

void sub_10009E08C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    os_log_type_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      *(_WORD *)os_log_type_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MADComputeServiceClientHandler] Waiting for results handler group ...", v19, 2u);
    }
  }
  dispatch_group_wait(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48), 0xFFFFFFFFFFFFFFFFLL);
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    CFStringRef v6 = VCPLogInstance();
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)os_log_type_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[MADComputeServiceClientHandler] All results handler calls have returned", v19, 2u);
    }
  }
  [*(id *)(a1 + 40) timeIntervalSinceNow];
  double v9 = v8;
  v20[0] = VCPAnalytics7458FieldKeyRequestQoS;
  qos_class_t v10 = qos_class_self();
  long long v11 = VCPMAQoSDescription(v10);
  v21[0] = v11;
  v20[1] = VCPAnalytics7458FieldKeyRequestCount;
  os_log_type_t v12 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 48) count]);
  v21[1] = v12;
  v21[2] = @"MACS-URL";
  v20[2] = VCPAnalytics7458FieldKeyRequestType;
  v20[3] = VCPAnalytics7458FieldKeyAssetCount;
  uint64_t v13 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 56) count]);
  v21[3] = v13;
  void v20[4] = VCPAnalytics7458FieldKeyClient;
  CFStringRef v14 = *(const __CFString **)(*(void *)(a1 + 32) + 24);
  if (!v14) {
    CFStringRef v14 = @"Unknown";
  }
  void v21[4] = v14;
  v20[5] = VCPAnalytics7458FieldKeyProcessingTime;
  id v15 = +[NSNumber numberWithDouble:-v9];
  v21[5] = v15;
  v20[6] = VCPAnalytics7458FieldKeyError;
  id v16 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v3 code]);
  v21[6] = v16;
  os_log_type_t v17 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:7];

  uint64_t v18 = +[VCPMADCoreAnalyticsManager sharedManager];
  [v18 sendEvent:VCPAnalytics7458EventServiceRequest withAnalytics:v17];

  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_10009E394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10009E410(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10009E778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,void *a34,void *a35)
{
  _Unwind_Resume(a1);
}

id sub_10009E830(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:requestID:", *(void *)(a1 + 40));
}

void sub_10009E844(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  qos_class_t v10 = v9;
  if (*(void *)(*(void *)(a1 + 32) + 16))
  {
    if (v9)
    {
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        long long v11 = VCPLogInstance();
        os_log_type_t v12 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v11, v12))
        {
          *(_DWORD *)long long buf = 138412290;
          long long v27 = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "[MADComputeServiceClientHandler] Entering results handler group with error ... %@", buf, 0xCu);
        }
      }
      dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48));
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      id v15 = *(void **)(v14 + 16);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_10009EB74;
      v24[3] = &unk_10021C3E0;
      v24[4] = v14;
      [v15 handleResults:0 assetRepresentation:v7 requestID:v13 error:v10 acknowledgement:v24];
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        uint64_t v18 = VCPLogInstance();
        os_log_type_t v19 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v18, v19))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "[MADComputeServiceClientHandler] Entering results handler group ...", buf, 2u);
        }
      }
      dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48));
      id v20 = *(void **)(*(void *)(a1 + 32) + 16);
      id v25 = v8;
      long long v21 = +[NSArray arrayWithObjects:&v25 count:1];
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_10009EC68;
      v23[3] = &unk_10021C3E0;
      uint64_t v22 = *(void *)(a1 + 40);
      v23[4] = *(void *)(a1 + 32);
      [v20 handleResults:v21 assetRepresentation:v7 requestID:v22 error:0 acknowledgement:v23];
    }
  }
  else if ((int)MediaAnalysisLogLevel() >= 6)
  {
    id v16 = VCPLogInstance();
    os_log_type_t v17 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v16, v17))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[MADComputeServiceClientHandler] No remote proxy; exit resultHandler",
        buf,
        2u);
    }
  }
}

void sub_10009EB38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009EB74(uint64_t a1, int a2)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    os_log_type_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      CFStringRef v6 = @"NO";
      if (a2) {
        CFStringRef v6 = @"YES";
      }
      int v7 = 138412290;
      CFStringRef v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MADComputeServiceClientHandler] Received acknowledgement response %@", (uint8_t *)&v7, 0xCu);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48));
}

void sub_10009EC68(uint64_t a1, int a2)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    os_log_type_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      CFStringRef v6 = @"NO";
      if (a2) {
        CFStringRef v6 = @"YES";
      }
      int v7 = 138412290;
      CFStringRef v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MADComputeServiceClientHandler] Received acknowledgement response %@", (uint8_t *)&v7, 0xCu);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48));
}

void sub_10009ED5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    os_log_type_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      *(_WORD *)os_log_type_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MADComputeServiceClientHandler] Waiting for results handler group ...", v19, 2u);
    }
  }
  dispatch_group_wait(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48), 0xFFFFFFFFFFFFFFFFLL);
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    CFStringRef v6 = VCPLogInstance();
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)os_log_type_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[MADComputeServiceClientHandler] All results handler calls have returned", v19, 2u);
    }
  }
  [*(id *)(a1 + 40) timeIntervalSinceNow];
  double v9 = v8;
  v20[0] = VCPAnalytics7458FieldKeyRequestQoS;
  qos_class_t v10 = qos_class_self();
  long long v11 = VCPMAQoSDescription(v10);
  v21[0] = v11;
  v20[1] = VCPAnalytics7458FieldKeyRequestCount;
  os_log_type_t v12 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 48) count]);
  v21[1] = v12;
  v21[2] = @"MACS-Photos";
  v20[2] = VCPAnalytics7458FieldKeyRequestType;
  v20[3] = VCPAnalytics7458FieldKeyAssetCount;
  uint64_t v13 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 56) count]);
  v21[3] = v13;
  void v20[4] = VCPAnalytics7458FieldKeyClient;
  CFStringRef v14 = *(const __CFString **)(*(void *)(a1 + 32) + 24);
  if (!v14) {
    CFStringRef v14 = @"Unknown";
  }
  void v21[4] = v14;
  v20[5] = VCPAnalytics7458FieldKeyProcessingTime;
  id v15 = +[NSNumber numberWithDouble:-v9];
  v21[5] = v15;
  v20[6] = VCPAnalytics7458FieldKeyError;
  id v16 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v3 code]);
  v21[6] = v16;
  os_log_type_t v17 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:7];

  uint64_t v18 = +[VCPMADCoreAnalyticsManager sharedManager];
  [v18 sendEvent:VCPAnalytics7458EventServiceRequest withAnalytics:v17];

  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_10009F064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10009F0E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10009F38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  os_log_type_t v17 = v15;

  _Unwind_Resume(a1);
}

void sub_10009F5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009F960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  _Unwind_Resume(a1);
}

id sub_10009F9F8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:requestID:", *(void *)(a1 + 40));
}

void sub_10009FA0C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  qos_class_t v10 = v9;
  if (*(void *)(*(void *)(a1 + 32) + 16))
  {
    if (v9)
    {
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        long long v11 = VCPLogInstance();
        os_log_type_t v12 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v11, v12))
        {
          *(_DWORD *)long long buf = 138412290;
          long long v27 = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "[MADComputeServiceClientHandler] Entering results handler group with error ... %@", buf, 0xCu);
        }
      }
      dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48));
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      id v15 = *(void **)(v14 + 16);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_10009FD3C;
      v24[3] = &unk_10021C3E0;
      v24[4] = v14;
      [v15 handleResults:0 assetRepresentation:v7 requestID:v13 error:v10 acknowledgement:v24];
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        uint64_t v18 = VCPLogInstance();
        os_log_type_t v19 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v18, v19))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "[MADComputeServiceClientHandler] Entering results handler group ...", buf, 2u);
        }
      }
      dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48));
      id v20 = *(void **)(*(void *)(a1 + 32) + 16);
      id v25 = v8;
      long long v21 = +[NSArray arrayWithObjects:&v25 count:1];
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_10009FE30;
      v23[3] = &unk_10021C3E0;
      uint64_t v22 = *(void *)(a1 + 40);
      v23[4] = *(void *)(a1 + 32);
      [v20 handleResults:v21 assetRepresentation:v7 requestID:v22 error:0 acknowledgement:v23];
    }
  }
  else if ((int)MediaAnalysisLogLevel() >= 6)
  {
    id v16 = VCPLogInstance();
    os_log_type_t v17 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v16, v17))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[MADComputeServiceClientHandler] No remote proxy; exit resultHandler",
        buf,
        2u);
    }
  }
}

void sub_10009FD00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009FD3C(uint64_t a1, int a2)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    os_log_type_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      CFStringRef v6 = @"NO";
      if (a2) {
        CFStringRef v6 = @"YES";
      }
      int v7 = 138412290;
      CFStringRef v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MADComputeServiceClientHandler] Received acknowledgement response %@", (uint8_t *)&v7, 0xCu);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48));
}

void sub_10009FE30(uint64_t a1, int a2)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    os_log_type_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      CFStringRef v6 = @"NO";
      if (a2) {
        CFStringRef v6 = @"YES";
      }
      int v7 = 138412290;
      CFStringRef v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MADComputeServiceClientHandler] Received acknowledgement response %@", (uint8_t *)&v7, 0xCu);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48));
}

void sub_10009FF24(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    os_log_type_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MADComputeServiceClientHandler] Waiting for results handler group ...", v17, 2u);
    }
  }
  dispatch_group_wait(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48), 0xFFFFFFFFFFFFFFFFLL);
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    CFStringRef v6 = VCPLogInstance();
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[MADComputeServiceClientHandler] All results handler calls have returned", v17, 2u);
    }
  }
  [*(id *)(a1 + 40) timeIntervalSinceNow];
  double v9 = v8;
  v18[0] = VCPAnalytics7458FieldKeyRequestQoS;
  qos_class_t v10 = qos_class_self();
  long long v11 = VCPMAQoSDescription(v10);
  v19[0] = v11;
  v19[1] = @"MACS-Resume";
  v18[1] = VCPAnalytics7458FieldKeyRequestType;
  v18[2] = VCPAnalytics7458FieldKeyClient;
  CFStringRef v12 = *(const __CFString **)(*(void *)(a1 + 32) + 24);
  if (!v12) {
    CFStringRef v12 = @"Unknown";
  }
  v19[2] = v12;
  v18[3] = VCPAnalytics7458FieldKeyProcessingTime;
  uint64_t v13 = +[NSNumber numberWithDouble:-v9];
  v19[3] = v13;
  v18[4] = VCPAnalytics7458FieldKeyError;
  uint64_t v14 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v3 code]);
  v19[4] = v14;
  id v15 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:5];

  id v16 = +[VCPMADCoreAnalyticsManager sharedManager];
  [v16 sendEvent:VCPAnalytics7458EventServiceRequest withAnalytics:v15];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000A01B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000A0218(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A04AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A06F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A086C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A0A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A0CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000A111C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A121C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A13B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A1708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A1934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A19CC(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 160);
  uint64_t v3 = *(void *)(a1 + 168);
  int v4 = 138412546;
  uint64_t v5 = v2;
  __int16 v6 = 2112;
  uint64_t v7 = v3;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "%@[%@] Task must be MADPhotosAssetProcessingTask!", (uint8_t *)&v4, 0x16u);
}

void sub_1000A1B68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A1C08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A1F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1000A1FCC(void *a1)
{
  id v2 = +[PHAssetChangeRequest changeRequestForAsset:a1[4]];
  [v2 setVariationSuggestionStates:a1[5] forVariationType:1];
  [v2 setVariationSuggestionStates:a1[6] forVariationType:3];
}

void sub_1000A203C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000A2490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1000A3428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000A36AC(uint64_t a1)
{
  id v2 = +[VCPWatchdog sharedWatchdog];
  [v2 pet];

  uint64_t v3 = [*(id *)(a1 + 32) cancel];
  uint64_t v4 = v3[2]();

  return v4;
}

void sub_1000A3710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3724(uint64_t a1)
{
  id v2 = +[VCPWatchdog sharedWatchdog];
  [v2 pet];

  uint64_t v3 = [*(id *)(a1 + 32) cancel];
  uint64_t v4 = v3[2]();

  return v4;
}

void sub_1000A3788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000A379C(uint64_t a1)
{
  id v2 = +[VCPWatchdog sharedWatchdog];
  [v2 pet];

  uint64_t v3 = [*(id *)(a1 + 32) cancel];
  uint64_t v4 = v3[2]();

  return v4;
}

void sub_1000A3800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A395C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A3A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000A48B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,void *a33)
{
  _Unwind_Resume(a1);
}

void sub_1000A4B30(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a1[5];
  id v10 = v3;
  __int16 v6 = [v3 localIdentifier];
  uint64_t v7 = [v5 objectForKeyedSubscript:v6];
  objc_msgSend(v4, "updateStatsFlags:forPHAsset:withDatabase:", objc_msgSend(v7, "statsFlags"), v10, a1[6]);

  double v8 = (void *)a1[7];
  double v9 = [v10 localIdentifier];
  [v8 removeObject:v9];
}

void sub_1000A4BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1000A4C14(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000A4CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A51DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A5984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1000A5AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A5C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

VCPBackgroundProcessingMetrics *sub_1000A5C6C(uint64_t a1)
{
  id v1 = [[VCPBackgroundProcessingMetrics alloc] initWithPhotoLibrary:*(void *)(a1 + 32)];
  return v1;
}

void sub_1000A6320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A66A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A6CF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A6DF8()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  id v1 = (void *)qword_1002525D0;
  qword_1002525D0 = (uint64_t)v0;
}

void sub_1000A6FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000A7024(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A70D4()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  id v1 = (void *)qword_1002525E0;
  qword_1002525E0 = (uint64_t)v0;
}

void sub_1000A76AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v43 - 176), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1000A77B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000A77C0(uint64_t a1)
{
}

void sub_1000A77C8(uint64_t a1, double a2)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2048;
      double v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ %.2f%% complete", (uint8_t *)&v7, 0x16u);
    }
  }
}

uint64_t sub_1000A78A8(void *a1)
{
  [*(id *)(*(void *)(a1[6] + 8) + 40) stop];
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    id v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = a1[4];
      [*(id *)(*(void *)(a1[6] + 8) + 40) elapsedTimeSeconds];
      int v12 = 138412546;
      uint64_t v13 = v4;
      __int16 v14 = 2048;
      uint64_t v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%@ Ran for %0.6fs", (uint8_t *)&v12, 0x16u);
    }
  }
  uint64_t v6 = *(void *)(a1[7] + 8);
  int v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0;

  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v8 = VCPLogInstance();
    os_log_type_t v9 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = a1[4];
      int v12 = 138412290;
      uint64_t v13 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%@ Finished background processing", (uint8_t *)&v12, 0xCu);
    }
  }
  return (*(uint64_t (**)(void))(a1[5] + 16))();
}

void sub_1000A7A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000A7A54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A7EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A80AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A8178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A82E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)VCPVideoFramesCaptionTask;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_1000A8894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000A8950(id a1)
{
  return 0;
}

void sub_1000A8AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

VIService *__cdecl sub_1000A8BE0(id a1)
{
  id v1 = objc_alloc_init((Class)VIService);
  return (VIService *)v1;
}

void sub_1000A8EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A9020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000A90E4(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 24);
  os_log_type_t v3 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 40) requestID]);
  [v2 removeObjectForKey:v3];

  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = [*(id *)(a1 + 40) task];
      id v7 = (id)objc_opt_class();
      id v8 = [*(id *)(a1 + 40) requestID];
      uint64_t v9 = *(void *)(a1 + 48);
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
      int v14 = 138413058;
      id v15 = v7;
      __int16 v16 = 2048;
      id v17 = v8;
      __int16 v18 = 1024;
      int v19 = v9;
      __int16 v20 = 2112;
      uint64_t v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[QueuingScheduler] Completed task %@ (MADRequestID %lu, VCPMADTaskID %u) for client %@", (uint8_t *)&v14, 0x26u);
    }
  }
  do
  {
    id result = [*(id *)(*(void *)(a1 + 32) + 16) count];
    if (!result) {
      break;
    }
    int v12 = *(id **)(a1 + 32);
    uint64_t v13 = [v12[2] objectAtIndexedSubscript:0];
    LOBYTE(v12) = [v12 scheduleTask:v13];

    id result = [*(id *)(*(void *)(a1 + 32) + 16) removeObjectAtIndex:0];
  }
  while ((v12 & 1) == 0);
  return result;
}

void sub_1000A9294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A990C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, id a18)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a18);

  _Unwind_Resume(a1);
}

void sub_1000A9A60(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained) {
    [WeakRetained completeTaskWithInfo:*(void *)(a1 + 32) madTaskID:a2];
  }
}

void sub_1000A9AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000A9CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A9D34(uint64_t a1)
{
  id v2 = [[MADServiceTaskInformation alloc] initWithTask:*(void *)(a1 + 32) requestID:*(void *)(a1 + 56) schedulingErrorHandler:*(void *)(a1 + 48)];
  id v3 = [*(id *)(*(void *)(a1 + 40) + 24) count];
  if (v3 >= [(id)objc_opt_class() scheduledRequestLimit])
  {
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      uint64_t v10 = VCPLogInstance();
      os_log_type_t v11 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v10, v11))
      {
        int v12 = [(MADServiceTaskInformation *)v2 task];
        id v13 = (id)objc_opt_class();
        unint64_t v14 = [(MADServiceTaskInformation *)v2 requestID];
        uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8);
        int v16 = 138412802;
        id v17 = v13;
        __int16 v18 = 2048;
        unint64_t v19 = v14;
        __int16 v20 = 2112;
        uint64_t v21 = v15;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "[QueuingScheduler] Queuing foreground task %@ (MADRequestID %lu) for client %@ to pending list", (uint8_t *)&v16, 0x20u);
      }
    }
    [*(id *)(*(void *)(a1 + 40) + 16) addObject:v2];
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      uint64_t v4 = VCPLogInstance();
      os_log_type_t v5 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = [(MADServiceTaskInformation *)v2 task];
        id v7 = (id)objc_opt_class();
        unint64_t v8 = [(MADServiceTaskInformation *)v2 requestID];
        uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
        int v16 = 138412802;
        id v17 = v7;
        __int16 v18 = 2048;
        unint64_t v19 = v8;
        __int16 v20 = 2112;
        uint64_t v21 = v9;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "[QueuingScheduler] Submitting foreground task %@ (MADRequestID %lu) for client %@ for scheduling", (uint8_t *)&v16, 0x20u);
      }
    }
    [*(id *)(a1 + 40) scheduleTask:v2];
  }
}

void sub_1000A9F64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AA0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000AA0EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000AA0FC(uint64_t a1)
{
}

void sub_1000AA104(void *a1)
{
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    id v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = a1[6];
      os_log_type_t v5 = *(void **)(a1[4] + 8);
      int v26 = 134218242;
      uint64_t v27 = v4;
      __int16 v28 = 2112;
      NSErrorUserInfoKey v29 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[QueuingScheduler] Cancelling task (MADRequestID %lu) for client %@", (uint8_t *)&v26, 0x16u);
    }
  }
  uint64_t v6 = *(void **)(a1[4] + 24);
  id v7 = +[NSNumber numberWithUnsignedInteger:a1[6]];
  unint64_t v8 = [v6 objectForKeyedSubscript:v7];

  if (v8)
  {
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      uint64_t v9 = VCPLogInstance();
      os_log_type_t v10 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = a1[6];
        int v12 = [v8 scheduledTaskID];
        uint64_t v13 = *(void *)(a1[4] + 8);
        int v26 = 134218498;
        uint64_t v27 = v11;
        __int16 v28 = 2112;
        NSErrorUserInfoKey v29 = v12;
        __int16 v30 = 2112;
        uint64_t v31 = v13;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "[QueuingScheduler] Attempting to cancel task (MADRequestID %lu, VCPMADTaskID %@) for client %@", (uint8_t *)&v26, 0x20u);
      }
    }
    uint64_t v14 = [v8 scheduledTaskID];
    uint64_t v15 = *(void *)(a1[5] + 8);
    int v16 = *(NSObject **)(v15 + 40);
    *(void *)(v15 + 40) = v14;
  }
  else
  {
    for (unint64_t i = 0; i < (unint64_t)[*(id *)(a1[4] + 16) count]; ++i)
    {
      __int16 v18 = [*(id *)(a1[4] + 16) objectAtIndexedSubscript:i];
      BOOL v19 = [v18 requestID] == (id)a1[6];

      if (v19)
      {
        [*(id *)(a1[4] + 16) removeObjectAtIndex:i];
        if ((int)MediaAnalysisLogLevel() < 7) {
          goto LABEL_12;
        }
        int v16 = VCPLogInstance();
        os_log_type_t v20 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v16, v20))
        {
          uint64_t v24 = a1[6];
          id v25 = *(void **)(a1[4] + 8);
          int v26 = 134218242;
          uint64_t v27 = v24;
          __int16 v28 = 2112;
          NSErrorUserInfoKey v29 = v25;
          long long v23 = "[QueuingScheduler] Removed task (MADRequestID %lu) for client %@ from pending list";
          goto LABEL_23;
        }
        goto LABEL_11;
      }
    }
    if ((int)MediaAnalysisLogLevel() < 4) {
      goto LABEL_12;
    }
    int v16 = VCPLogInstance();
    os_log_type_t v20 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v16, v20))
    {
      uint64_t v21 = a1[6];
      uint64_t v22 = *(void **)(a1[4] + 8);
      int v26 = 134218242;
      uint64_t v27 = v21;
      __int16 v28 = 2112;
      NSErrorUserInfoKey v29 = v22;
      long long v23 = "[QueuingScheduler] Task (MADRequestID %lu) for client %@ already finished or cancelled, unable to cancel";
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v16, v20, v23, (uint8_t *)&v26, 0x16u);
    }
  }
LABEL_11:

LABEL_12:
}

void sub_1000AA430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AA6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29,char a30)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

id sub_1000AA6F8(void *a1)
{
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    id v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = *(void *)(a1[4] + 8);
      int v9 = 138412290;
      uint64_t v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[QueuingScheduler] Cancelling all tasks for client %@", (uint8_t *)&v9, 0xCu);
    }
  }
  uint64_t v5 = [*(id *)(a1[4] + 24) allValues];
  uint64_t v6 = *(void *)(a1[5] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  *(void *)(*(void *)(a1[6] + 8) + 24) += [*(id *)(a1[4] + 16) count];
  return [*(id *)(a1[4] + 16) removeAllObjects];
}

id sub_1000AA8C0(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) count];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

id sub_1000AA9A4(uint64_t a1)
{
  id v2 = (char *)[*(id *)(*(void *)(a1 + 32) + 16) count];
  id result = [*(id *)(*(void *)(a1 + 32) + 24) count];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = &v2[(void)result];
  return result;
}

void sub_1000AAB30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AAC00()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  id v1 = (void *)qword_1002525F0;
  qword_1002525F0 = (uint64_t)v0;
}

uint64_t sub_1000AB5BC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000AB678;
  block[3] = &unk_10021C738;
  id v5 = *(id *)(a1 + 32);
  if (qword_100252600 != -1) {
    dispatch_once(&qword_100252600, block);
  }
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();

  return v2;
}

void sub_1000AB678(uint64_t a1)
{
  uint64_t v2 = +[MADComputeServiceBackgroundSystemTask sharedTask];
  id v7 = 0;
  [v2 submitTask:&v7];
  id v3 = v7;

  if (v3 && (int)MediaAnalysisLogLevel() >= 3)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v9 = v6;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Failed to submit the BGST task with error: %@", buf, 0x16u);
    }
  }
}

uint64_t sub_1000AB784(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 code];
  uint64_t v4 = *(uint64_t (**)(uint64_t, id))(v2 + 16);
  return v4(v2, v3);
}

void sub_1000AC250(uint64_t a1)
{
  uint64_t v2 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  id v3 = *(void **)(*(void *)(a1 + 32) + 56);
  uint64_t v4 = [*(id *)(a1 + 40) localIdentifier];
  [v3 setObject:v2 forKeyedSubscript:v4];

  uint64_t v5 = +[NSDate now];
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 64);
  *(void *)(v6 + 64) = v5;
}

void sub_1000AC3CC(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(_DWORD *)(*(void *)(a1 + 32) + 72);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 56);
  id v3 = [*(id *)(a1 + 40) localIdentifier];
  [v2 removeObjectForKey:v3];

  uint64_t v4 = +[NSDate now];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 64);
  *(void *)(v5 + 64) = v4;

  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v7 = VCPLogInstance();
    os_log_type_t v8 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v7, v8))
    {
      unsigned int v9 = [*(id *)(*(void *)(a1 + 32) + 56) count];
      v10[0] = 67109120;
      v10[1] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[FaceCrop] %d downloads pending", (uint8_t *)v10, 8u);
    }
  }
}

void sub_1000AC5C0(uint64_t a1)
{
  id v3 = +[NSDate now];
  [v3 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 64)];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
}

void sub_1000AC6CC(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 72) = *(_DWORD *)(a1 + 40);
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      unsigned int v4 = [*(id *)(*(void *)(a1 + 32) + 56) count];
      int v5 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)long long buf = 67109376;
      unsigned int v19 = v4;
      __int16 v20 = 1024;
      int v21 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[FaceCrop][Download] Canceling %d download requests (%d)", buf, 0xEu);
    }
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v6 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 56), "allValues", 0);
  id v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        int v12 = +[PHAssetResourceManager defaultManager];
        objc_msgSend(v12, "cancelDataRequest:", objc_msgSend(v11, "intValue"));
      }
      id v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v8);
  }
}

void sub_1000ACF78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[VCPWatchdog sharedWatchdog];
  [v7 pet];

  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = [*(id *)(a1 + 40) asset];
  id v10 = [v8 removeDownloadRequestIDForAsset:v9];

  if (v6)
  {
    if (v10)
    {
      id v11 = *(void **)(a1 + 40);
      uint64_t v12 = (uint64_t)v10;
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        long long v13 = VCPLogInstance();
        os_log_type_t v14 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v13, v14))
        {
          long long v15 = [*(id *)(a1 + 40) asset];
          long long v16 = [v15 localIdentifier];
          id v17 = [v6 description];
          int v18 = 138412546;
          unsigned int v19 = v16;
          __int16 v20 = 2112;
          int v21 = v17;
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "[FaceCrop][Download][%@] Failed to download resource (%@)", (uint8_t *)&v18, 0x16u);
        }
      }
      id v11 = *(void **)(a1 + 40);
      uint64_t v12 = 4294943494;
    }
    [v11 setStatus:v12];
  }
  else
  {
    [*(id *)(a1 + 40) setDownloadURL:v5];
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 40));
}

void sub_1000AD818(uint8_t *a1, void *a2, void *a3, NSObject *a4)
{
  id v7 = [a2 localIdentifier];
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_fault_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_FAULT, "[FaceCrop] Failed to query asset for face %@; skip",
    a1,
    0xCu);
}

void sub_1000ADA68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000ADAD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000ADBA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000ADC0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000ADEA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000ADFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000AE124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AE734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_1000AE858(uint64_t a1)
{
  return [*(id *)(a1 + 32) start];
}

id sub_1000AE860(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000AEA30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AEAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AEECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

id sub_1000AEF54(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCanceled];
  if (!v1)
  {
    uint64_t v2 = +[VCPWatchdog sharedWatchdog];
    [v2 pet];
LABEL_6:

    return v1;
  }
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Canceling MADProgressManager", v5, 2u);
    }
    goto LABEL_6;
  }
  return v1;
}

void sub_1000AF00C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AF194()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  id v1 = (void *)qword_100252608;
  qword_100252608 = (uint64_t)v0;
}

void sub_1000AF314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AF32C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000AF33C(uint64_t a1)
{
}

void sub_1000AF344(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 16) objectForKeyedSubscript:a1[5]];
  uint64_t v3 = *(void *)(a1[7] + 8);
  unsigned int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (!*(void *)(*(void *)(a1[7] + 8) + 40))
  {
    uint64_t v5 = +[VCPDatabaseWriter databaseForPhotoLibrary:a1[6]];
    uint64_t v6 = *(void *)(a1[7] + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    uint64_t v8 = *(void *)(*(void *)(a1[7] + 8) + 40);
    uint64_t v9 = a1[5];
    id v10 = *(void **)(a1[4] + 16);
    [v10 setObject:v8 forKeyedSubscript:v9];
  }
}

void sub_1000AF598(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 16) objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (v2)
  {
    [*(id *)(*(void *)(a1 + 32) + 16) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      uint64_t v3 = VCPLogInstance();
      os_log_type_t v4 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = *(void *)(a1 + 40);
        int v6 = 138412290;
        uint64_t v7 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "[VCPDatabaseManager] Releasing shared database for %@", (uint8_t *)&v6, 0xCu);
      }
    }
  }
}

void sub_1000AF808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AF8AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AFA14(_Unwind_Exception *a1)
{
}

void sub_1000AFD0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AFFAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B0048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B00D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B0248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)MADPhotosFaceAssetProcessingTask;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1000B041C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B06CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000B0B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000B0CB4(uint64_t a1)
{
  uint64_t v2 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 144);
  os_log_type_t v4 = [*(id *)(a1 + 40) localIdentifier];
  [v3 setObject:v2 forKeyedSubscript:v4];

  uint64_t v5 = +[NSDate now];
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 152);
  *(void *)(v6 + 152) = v5;
}

void sub_1000B0D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B0E4C(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(_DWORD *)(*(void *)(a1 + 32) + 160);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 144);
  uint64_t v3 = [*(id *)(a1 + 40) localIdentifier];
  [v2 removeObjectForKey:v3];

  uint64_t v4 = +[NSDate now];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 152);
  *(void *)(v5 + 152) = v4;

  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v7 = VCPLogInstance();
    os_log_type_t v8 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v7, v8))
    {
      unsigned int v9 = [*(id *)(*(void *)(a1 + 32) + 144) count];
      v10[0] = 67109120;
      v10[1] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[Face] %d downloads pending", (uint8_t *)v10, 8u);
    }
  }
}

void sub_1000B0F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B105C(uint64_t a1)
{
  id v3 = +[NSDate now];
  [v3 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 152)];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
}

void sub_1000B10CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000B117C(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 160) = *(_DWORD *)(a1 + 40);
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      unsigned int v4 = [*(id *)(*(void *)(a1 + 32) + 144) count];
      int v5 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)long long buf = 67109376;
      unsigned int v18 = v4;
      __int16 v19 = 1024;
      int v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[Face][Download] Canceling %d download requests (%d)", buf, 0xEu);
    }
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v6 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 144), "allValues", 0);
  id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v13;
    do
    {
      for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v6);
        }
        id v10 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        id v11 = +[PHAssetResourceManager defaultManager];
        objc_msgSend(v11, "cancelDataRequest:", objc_msgSend(v10, "intValue"));
      }
      id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }
}

void sub_1000B1348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B1DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1000B1FAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[VCPWatchdog sharedWatchdog];
  [v7 pet];

  uint64_t v8 = *(void **)(a1 + 32);
  unsigned int v9 = [*(id *)(a1 + 40) asset];
  uint64_t v10 = (uint64_t)[v8 removeDownloadRequestIDForAsset:v9];

  if (v6)
  {
    if (!v10)
    {
      if (objc_msgSend(v6, "mad_isDownloadThrottling"))
      {
        if ((int)MediaAnalysisLogLevel() < 3)
        {
          uint64_t v10 = 4294943488;
          goto LABEL_16;
        }
        id v11 = VCPLogInstance();
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          long long v13 = [*(id *)(a1 + 40) asset];
          long long v14 = [v13 localIdentifier];
          long long v15 = [v6 description];
          int v20 = 138412546;
          int v21 = v14;
          __int16 v22 = 2112;
          long long v23 = v15;
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "[Face][Download][%@] Resource download throttled (%@)", (uint8_t *)&v20, 0x16u);
        }
        uint64_t v10 = 4294943488;
      }
      else
      {
        if ((int)MediaAnalysisLogLevel() < 3)
        {
          uint64_t v10 = 4294943494;
          goto LABEL_16;
        }
        id v11 = VCPLogInstance();
        os_log_type_t v16 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v16))
        {
          id v17 = [*(id *)(a1 + 40) asset];
          unsigned int v18 = [v17 localIdentifier];
          __int16 v19 = [v6 description];
          int v20 = 138412546;
          int v21 = v18;
          __int16 v22 = 2112;
          long long v23 = v19;
          _os_log_impl((void *)&_mh_execute_header, v11, v16, "[Face][Download][%@] Resource download failed (%@)", (uint8_t *)&v20, 0x16u);
        }
        uint64_t v10 = 4294943494;
      }
    }
LABEL_16:
    [*(id *)(a1 + 40) setStatus:v10];
    goto LABEL_17;
  }
  [*(id *)(a1 + 40) setDownloadURL:v5];
LABEL_17:
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 128));
}

void sub_1000B2228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B23F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000B2D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1000B34FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

id sub_1000B3608(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  os_log_type_t v3 = *(void **)(a1 + 40);
  unsigned int v4 = [v3 downloadResource];
  id v5 = [*(id *)(a1 + 40) downloadURL];
  [v2 _asyncAnalysisWithAssetEntry:v3 resource:v4 resourceURL:v5 isBestResource:1];

  id v6 = [*(id *)(a1 + 40) downloadURL];
  +[PHAssetResourceManager vcp_flushResourceURL:v6];

  id v7 = *(void **)(a1 + 40);
  return [v7 setDownloadURL:0];
}

void sub_1000B36BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B36DC(void *a1)
{
  id v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  os_log_type_t v3 = (void *)a1[6];
  id v4 = [v3 privateFileURL];
  objc_msgSend(v1, "_asyncAnalysisWithAssetEntry:resource:resourceURL:isBestResource:", v2, v3);
}

void sub_1000B3750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000B3B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B4A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  _Unwind_Resume(a1);
}

void sub_1000B56D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1000B5878(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 64);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v11;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void *)(*((void *)&v10 + 1) + 8 * (void)v5);
        uint64_t v8 = *(void **)(a1 + 32);
        uint64_t v9 = 0;
        [v8 _publishEntry:v6 faceLocalIdentifiers:&v9];
        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v3);
  }
}

void sub_1000B599C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B59C0(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_1000B5A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000B5BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000B5C20(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) cancelBlock];
  if (v2)
  {
    id v3 = (void *)v2;
    uint64_t v4 = [*(id *)(a1 + 32) cancelBlock];
    char v5 = v4[2]();

    if (v5) {
      return 1;
    }
  }
  id v7 = +[VCPWatchdog sharedWatchdog];
  [v7 pet];

  return 0;
}

void sub_1000B5CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B5E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B5EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B6294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1000B648C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B66F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B6AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B6C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000B6CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000B6D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000B71CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1000B7590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000B7908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B815C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000B8564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B8854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B88B8(id a1)
{
  id v1 = objc_alloc_init(VCPMADQoSManager);
  uint64_t v2 = (void *)qword_100252638;
  qword_100252638 = (uint64_t)v1;
}

void sub_1000B8B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B8DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B9020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B915C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B916C(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1000B934C;
  v7[3] = &unk_10021C948;
  uint64_t v1 = *(void *)(a1 + 40);
  v7[4] = *(void *)(a1 + 32);
  void v7[5] = v1;
  uint64_t v2 = objc_retainBlock(v7);
  if (notify_register_dispatch("com.apple.das.clas.startDutyCycling", &dword_10025264C, (dispatch_queue_t)&_dispatch_main_q, v2))
  {
    if ((int)MediaAnalysisLogLevel() >= 4)
    {
      id v3 = VCPLogInstance();
      os_log_type_t v4 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v3, v4))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "[DAS QoS] Failed to register for notifications", buf, 2u);
      }
    }
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      char v5 = VCPLogInstance();
      os_log_type_t v6 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v5, v6))
      {
        *(_DWORD *)long long buf = 67109120;
        int v9 = dword_10025264C;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "[DAS QoS] Registered for notifications (%d)", buf, 8u);
      }
    }
    ((void (*)(void *, void))v2[2])(v2, dword_10025264C);
  }
}

void sub_1000B9328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B934C(uint64_t a1, int token)
{
  uint64_t state64 = 0;
  if (dword_10025264C == token)
  {
    BOOL v4 = notify_get_state(token, &state64) == 0;
    int v5 = MediaAnalysisLogLevel();
    if (v4)
    {
      if (v5 >= 6)
      {
        long long v10 = VCPLogInstance();
        os_log_type_t v11 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v10, v11))
        {
          long long v12 = "Background";
          if (!state64) {
            long long v12 = "Utility";
          }
          *(_DWORD *)long long buf = 136315394;
          int v21 = v12;
          __int16 v22 = 1024;
          int v23 = token;
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "[DAS QoS] QoS updated to %s (%d)", buf, 0x12u);
        }
      }
      uint64_t v13 = atomic_load(&dword_100252648);
      if (v13)
      {
        long long v14 = [(id)objc_opt_class() sharedManager];
        [v14 _reportQoSChange:v13 withTaskID:*(void *)(a1 + 40)];

        if (state64) {
          unsigned int v15 = 9;
        }
        else {
          unsigned int v15 = 17;
        }
        atomic_store(v15, &dword_100252648);
        atomic_store(1u, byte_100252658);
      }
      else
      {
        if (state64) {
          unsigned int v16 = 9;
        }
        else {
          unsigned int v16 = 17;
        }
        atomic_store(v16, &dword_100252648);
        id v17 = [(id)objc_opt_class() sharedManager];
        uint64_t v18 = atomic_load(&dword_100252648);
        [v17 _reportStartingQoS:v18 withTaskID:*(void *)(a1 + 40)];
      }
    }
    else if (v5 >= 4)
    {
      os_log_type_t v6 = VCPLogInstance();
      os_log_type_t v7 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v6, v7))
      {
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v21) = token;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "[DAS QoS] Failed to query backoff interval (%d)", buf, 8u);
      }
    }
  }
  else if ((int)MediaAnalysisLogLevel() >= 4)
  {
    uint64_t v8 = VCPLogInstance();
    os_log_type_t v9 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v8, v9))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v21) = token;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[DAS QoS] Recieved notification for unknown token (%d)", buf, 8u);
    }
  }
}

void sub_1000B95D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B9AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000B9B9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000B9E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B9E4C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = mach_absolute_time();
  uint64_t v3 = *(void *)(a1 + 32);
  LODWORD(v4) = *(_DWORD *)(v3 + 28);
  double v5 = (double)((v2 - *(void *)(a1 + 48)) * *(unsigned int *)(v3 + 24)) / (double)v4 / 1000000000.0;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    os_log_type_t v6 = VCPLogInstance();
    os_log_type_t v7 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = VCPTaskIDDescription(*(void *)(a1 + 56));
      os_log_type_t v9 = VCPMAQoSDescription(*(_DWORD *)(a1 + 64));
      *(_DWORD *)long long buf = 138413058;
      uint64_t v19 = VCPAnalyticsEventDasDutyCycleTaskKey;
      __int16 v20 = 2112;
      int v21 = v8;
      __int16 v22 = 2112;
      int v23 = v9;
      __int16 v24 = 2048;
      double v25 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[DAS QoS] %@: %@ - %@: %.2f", buf, 0x2Au);
    }
  }
  long long v10 = +[VCPMADCoreAnalyticsManager sharedManager];
  uint64_t v15 = VCPAnalyticsFieldKeyTaskName;
  os_log_type_t v11 = VCPTaskIDDescription(*(void *)(a1 + 56));
  v17[0] = v11;
  uint64_t v16 = VCPAnalyticsFieldKeyQoS;
  long long v12 = VCPMAQoSDescription(*(_DWORD *)(a1 + 64));
  uint64_t v13 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v5, v15, v16, VCPAnalyticsFieldKeyDuration, v11, v12);
  v17[2] = v13;
  long long v14 = +[NSDictionary dictionaryWithObjects:v17 forKeys:&v15 count:3];
  [v10 sendEvent:VCPAnalyticsEventDasDutyCycleTaskKey withAnalytics:v14];
}

void sub_1000BA084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BA234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000BA25C(id a1)
{
  return 0;
}

void sub_1000BA328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BADD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1000BB2B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BBD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,char a31)
{
  _Block_object_dispose((const void *)(v38 - 208), 8);
  _Block_object_dispose(&a31, 8);

  _Unwind_Resume(a1);
}

id sub_1000BBEBC(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 path];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1000BBF00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000BBF10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000BBF20(uint64_t a1)
{
}

void sub_1000BBF28(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      os_log_type_t v6 = VCPLogInstance();
      os_log_type_t v7 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v6, v7))
      {
        LOWORD(v13) = 0;
        uint64_t v8 = "  Successfully encrypted intermediate backup file";
        os_log_type_t v9 = v6;
        os_log_type_t v10 = v7;
        uint32_t v11 = 2;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v13, v11);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else if ((int)MediaAnalysisLogLevel() >= 3)
  {
    os_log_type_t v6 = VCPLogInstance();
    os_log_type_t v12 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v6, v12))
    {
      int v13 = 138412290;
      id v14 = v5;
      uint64_t v8 = "  Failed to encrypt intermediate backup file (%@); backup failed";
      os_log_type_t v9 = v6;
      os_log_type_t v10 = v12;
      uint32_t v11 = 12;
      goto LABEL_8;
    }
LABEL_9:
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_1000BC080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BC1B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BC4CC(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1000BC59C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BC60C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BC670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BC6FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BC884(_Unwind_Exception *a1)
{
  os_log_type_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1000BC940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BCCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1000BCD8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_type_t v7 = *(void **)(a1 + 32);
  CFStringRef v11 = @"Gating description";
  id v12 = v6;
  uint64_t v8 = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
  id v9 = [v5 integerValue];
  os_log_type_t v10 = [*(id *)(a1 + 40) localIdentifier];
  [v7 saveGatingResult:v8 forVariationType:v9 assetIdentifier:v10];
}

void sub_1000BCE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BCEA8(uint64_t a1)
{
  id v2 = +[PHAssetChangeRequest changeRequestForAsset:*(void *)(a1 + 32)];
  objc_msgSend(v2, "setVariationSuggestionStates:forVariationType:", objc_msgSend(*(id *)(a1 + 40), "vcp_loopSugestionState"), 1);
  objc_msgSend(v2, "setVariationSuggestionStates:forVariationType:", objc_msgSend(*(id *)(a1 + 40), "vcp_longExposureSugestionState"), 3);
}

void sub_1000BCF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000BCFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)VCPEffectsAssetProcessingTask;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1000BD2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000BD390(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 48));
  return v1 & 1;
}

void sub_1000BD5B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BD758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BD8C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BDA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)VCPCompoundMADTask;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_1000BDB98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BDDF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BDFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000BE19C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = [a3 code];
  id v5 = *(uint64_t (**)(uint64_t, id))(v3 + 16);
  return v5(v3, v4);
}

void sub_1000BE454(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BE470(uint64_t a1, double a2)
{
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    id v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      int v7 = 134217984;
      double v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Unified] Pre-Analysis progress: %.2f%%", (uint8_t *)&v7, 0xCu);
    }
  }
  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 16) + 16))(*(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) * 0.2);
}

uint64_t sub_1000BE580(uint64_t a1, int a2)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    id v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      CFStringRef v6 = @"interrupted";
      if (!a2) {
        CFStringRef v6 = @"finished";
      }
      int v8 = 138412546;
      CFStringRef v9 = v6;
      __int16 v10 = 1024;
      int v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Pre-Analysis %@ (%d)", (uint8_t *)&v8, 0x12u);
    }
  }
  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 16) + 16))(*(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) * 0.2);
}

id sub_1000BE6A0(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

id sub_1000BEB2C(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

void sub_1000BEC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BECC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BF9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  _Unwind_Resume(a1);
}

void sub_1000BFC28(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ -> %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_1000BFD08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BFE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BFF28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C0010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C01B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C0344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000C0374(void *a1)
{
  id v2 = VCPTransactionWithName(@"VCPFaceProcessingChangeBatch-publish");
  uint64_t v3 = mach_absolute_time();
  id v4 = VCPSignPostLog();
  os_signpost_id_t v5 = os_signpost_id_generate(v4);

  uint64_t v6 = VCPSignPostLog();
  int v7 = v6;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_BEGIN, v5, "VCPFaceProcessingPersistChanges", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  uint64_t v8 = a1[4];
  __int16 v9 = *(void **)(v8 + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000C053C;
  v12[3] = &unk_100219FC8;
  v12[4] = v8;
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = [v9 performChangesAndWait:v12 error:a1[6]];
  id v10 = VCPSignPostLog();
  int v11 = v10;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_INTERVAL_END, v5, "VCPFaceProcessingPersistChanges", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  if (v3)
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
}

void sub_1000C0518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000C053C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _publishPendingChanges];
}

void sub_1000C0664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C0708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C0834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C08B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C0ACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C0B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000C0C94(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000C0CA4(uint64_t a1)
{
}

void sub_1000C0CAC(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 8) objectForKeyedSubscript:a1[5]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000C0EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C0ED4(uint64_t a1)
{
  id v2 = +[VCPFaceProcessingResource resourceWithResource:*(void *)(a1 + 48) resourceURL:*(void *)(a1 + 56) isBestResource:*(unsigned __int8 *)(a1 + 68) requestDownload:*(unsigned __int8 *)(a1 + 69) downloadStatus:*(unsigned int *)(a1 + 64)];
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "setObject:forKeyedSubscript:");
}

void sub_1000C0F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000C0FCC(uint64_t a1)
{
  uint64_t v2 = +[NSDate now];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 80);
  *(void *)(v3 + 80) = v2;

  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    os_signpost_id_t v5 = VCPLogInstance();
    os_log_type_t v6 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 80);
      int v8 = 138412290;
      uint64_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Update lastest download timestamp %@", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_1000C1138(uint64_t a1)
{
  uint64_t v2 = +[NSDate now];
  [v2 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 80)];
  double v4 = v3;

  if (v4 > 60.0)
  {
    if ((int)MediaAnalysisLogLevel() >= 4)
    {
      os_signpost_id_t v5 = VCPLogInstance();
      os_log_type_t v6 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = +[NSDate now];
        [v7 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 80)];
        int v9 = 134217984;
        uint64_t v10 = v8;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "File-based download timed-out %.2f", (uint8_t *)&v9, 0xCu);
      }
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 24) = 1;
  }
}

void sub_1000C1268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C1A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000C1B24(id a1)
{
  return 0;
}

uint64_t sub_1000C1B2C(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = +[VCPWatchdog sharedWatchdog];
    [v2 pet];
  }
  return v1;
}

void sub_1000C1B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000C1B90()
{
  uint64_t v4 = 0;
  os_signpost_id_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)qword_100252670;
  uint64_t v7 = qword_100252670;
  if (!qword_100252670)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000CA95C;
    v3[3] = &unk_100219E10;
    v3[4] = &v4;
    sub_1000CA95C((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000C1C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000C1C74(uint64_t a1)
{
  uint64_t v2 = +[MADGDUtilities sharedInstance];
  double v3 = *(void **)(a1 + 32);
  uint64_t v4 = v3[17];
  uint64_t v5 = v3[19];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1000C1DA8;
  v7[3] = &unk_100219D98;
  uint64_t v8 = v3;
  [v2 syncVisualUnderstandingService:v4 withPhotosLibrary:v5 cancelOrExtendTimeoutBlock:v7];

  [*(id *)(a1 + 40) stop];
  uint64_t v6 = +[VCPMADCoreAnalyticsManager sharedManager];
  [*(id *)(a1 + 40) elapsedTimeSeconds];
  objc_msgSend(v6, "accumulateDoubleValue:forField:andEvent:", @"FaceVUSyncElapsedTimeInSeconds", @"com.apple.mediaanalysisd.FaceAnalysisRunSession");
}

void sub_1000C1D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_1000C1DA8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = +[VCPWatchdog sharedWatchdog];
    [v2 pet];
  }
  return v1;
}

void sub_1000C1DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C1E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C1EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VCPFaceProcessingTask;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1000C2188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C2240(_Unwind_Exception *a1)
{
}

void sub_1000C289C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C3274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1000C3548(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(v2 + 72);
  *(void *)(v2 + 72) = v3 + 1;
  uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 88) objectAtIndexedSubscript:v3 % *(void *)(*(void *)(a1 + 32) + 80)];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000C361C;
  block[3] = &unk_10021BF68;
  uint64_t v5 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v7 = v5;
  id v8 = *(id *)(a1 + 48);
  dispatch_async(v4, block);
}

void sub_1000C361C(uint64_t a1)
{
  unint64_t v3 = +[VCPWatchdog sharedWatchdog];
  [v3 pet];

  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v15 = 0;
  LODWORD(v3) = [v4 _detectAsset:v5 withResults:&v15 andBatchContext:*(void *)(a1 + 48)];
  id v6 = v15;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 96);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_1000C375C;
  v10[3] = &unk_10021CBA0;
  void v10[4] = v7;
  id v11 = v6;
  int v14 = (int)v3;
  id v12 = *(id *)(a1 + 40);
  id v13 = *(id *)(a1 + 48);
  id v9 = v6;
  dispatch_sync(v8, v10);
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 56));
}

void sub_1000C374C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000C375C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processDetectionResults:*(void *)(a1 + 40) withDetectionStatus:*(unsigned int *)(a1 + 64) asset:*(void *)(a1 + 48) andBatchContext:*(void *)(a1 + 56)];
}

void sub_1000C3B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v18 = v16;

  _Unwind_Resume(a1);
}

void sub_1000C45A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Unwind_Resume(a1);
}

id sub_1000C47C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

id sub_1000C47D0(uint64_t a1)
{
  uint64_t v2 = +[VCPWatchdog sharedWatchdog];
  [v2 pet];

  unint64_t v3 = *(void **)(a1 + 32);
  return [v3 updateLastestDownloadTimestamp];
}

void sub_1000C4820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C4830(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v12 = 0;
  id v13 = 0;
  unsigned int v4 = [*(id *)(a1 + 32) _copyResourceFromURL:v3 toURL:&v13 forAsset:*(void *)(a1 + 40) error:&v12];
  id v5 = v13;
  id v6 = v12;
  if (v4)
  {
    id v8 = *(void **)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    int v9 = *(unsigned __int8 *)(a1 + 64);
    uint64_t v10 = [*(id *)(a1 + 40) localIdentifier];
    [v8 storeResource:v7 resourceURL:v5 isBestResource:v9 != 0 requestDownload:1 downloadStatus:0 forLocalIdentifier:v10];

    id v11 = +[VCPMADCoreAnalyticsManager sharedManager];
    [v11 accumulateInt64Value:1 forField:@"NumbeOfResourceDownloads" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
  }
}

void sub_1000C493C(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1000C496C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = v3;
  if (v3)
  {
    unsigned int v5 = objc_msgSend(v3, "mad_isDownloadThrottling");
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = *(unsigned __int8 *)(a1 + 64);
    int v9 = [*(id *)(a1 + 48) localIdentifier];
    uint64_t v10 = v5 ? 4294943488 : 4294966371;
    [v6 storeResource:v7 resourceURL:0 isBestResource:v8 != 0 requestDownload:1 downloadStatus:v10 forLocalIdentifier:v9];

    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      id v11 = VCPLogInstance();
      os_log_type_t v12 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v11, v12))
      {
        id v13 = [*(id *)(a1 + 48) localIdentifier];
        uint64_t v14 = *(void *)(a1 + 40);
        int v15 = 138412802;
        uint64_t v16 = v13;
        __int16 v17 = 2112;
        uint64_t v18 = v14;
        __int16 v19 = 2112;
        __int16 v20 = v4;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%@] Failed to download resource %@ - %@", (uint8_t *)&v15, 0x20u);
      }
    }
  }
  [*(id *)(a1 + 56) _asyncAnalyzeAsset:*(void *)(a1 + 48) andBatchContext:*(void *)(a1 + 32)];
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 56) + 48));
}

void sub_1000C4AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C5014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000C50E8(id a1, NSString *a2, NSNumber *a3, BOOL *a4)
{
  unsigned int v5 = a2;
  id v6 = a3;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v7 = VCPLogInstance();
    os_log_type_t v8 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v7, v8))
    {
      int v10 = 138412546;
      id v11 = v5;
      __int16 v12 = 2112;
      id v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%@] Cancelling download (ID:%@)", (uint8_t *)&v10, 0x16u);
    }
  }
  int v9 = +[PHAssetResourceManager defaultManager];
  objc_msgSend(v9, "cancelDataRequest:", -[NSNumber intValue](v6, "intValue"));
}

void sub_1000C51FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C54EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1000C5778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000C57D4(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = VCPPromotePersons();
}

void sub_1000C587C(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_1000C58CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1000C58E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000C5AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000C5B54(uint64_t a1)
{
  id v3 = [objc_alloc((Class)VCPPhotosPersistenceDelegate) initWithPhotoLibrary:*(void *)(*(void *)(a1 + 32) + 152)];
  id v4 = [objc_alloc((Class)PNPetPromoterWrapper) initWithLibrary:*(void *)(*(void *)(a1 + 32) + 152) andDelegate:v3];
  uint64_t v5 = mach_absolute_time();
  id v6 = VCPSignPostLog();
  os_signpost_id_t v7 = os_signpost_id_generate(v6);

  os_log_type_t v8 = VCPSignPostLog();
  int v9 = v8;
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "MADPhotosPersonProcessingTaskPromotePet", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  *(void *)long long buf = 0;
  __int16 v22 = buf;
  uint64_t v23 = 0x3032000000;
  __int16 v24 = sub_1000C0C94;
  double v25 = sub_1000C0CA4;
  id v26 = +[NSDate distantPast];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1000C5E18;
  void v16[3] = &unk_10021CCA0;
  int v10 = dispatch_queue_create("MADPetPromotingProgress", 0);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  __int16 v17 = v10;
  uint64_t v18 = v11;
  __int16 v19 = buf;
  uint64_t v20 = v12;
  [v4 promoteUnverifiedPetsWithUpdateBlock:v16];
  id v13 = VCPSignPostLog();
  uint64_t v14 = v13;
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
  {
    *(_WORD *)int v15 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, v7, "MADPhotosPersonProcessingTaskPromotePet", (const char *)&unk_1001F3BD3, v15, 2u);
  }

  if (v5)
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }

  _Block_object_dispose(buf, 8);
}

void sub_1000C5DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1000C5E18(uint64_t a1, unsigned char *a2, double a3)
{
  if (a3 >= 0.0)
  {
    uint64_t v5 = *(NSObject **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000C5F54;
    block[3] = &unk_10021CC78;
    void block[4] = *(void *)(a1 + 48);
    *(double *)&void block[5] = a3;
    dispatch_async(v5, block);
  }
  if ([*(id *)(a1 + 40) isCancelled])
  {
    *a2 = 1;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = -128;
    if ((int)MediaAnalysisLogLevel() < 6) {
      return;
    }
    id v6 = VCPLogInstance();
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)os_log_type_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Cancelling Pet Promoting", v8, 2u);
    }
  }
  else
  {
    id v6 = +[VCPWatchdog sharedWatchdog];
    [v6 pet];
  }
}

void sub_1000C5F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C5F54(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) timeIntervalSinceNow];
  if (v2 < -5.0)
  {
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      id v3 = VCPLogInstance();
      os_log_type_t v4 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = *(void *)(a1 + 40);
        int v9 = 134217984;
        uint64_t v10 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "Pet Promoting progress: %.2f%%", (uint8_t *)&v9, 0xCu);
      }
    }
    uint64_t v6 = +[NSDate now];
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    os_log_type_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
}

void sub_1000C7EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25,void *a26,void *a27,void *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,void *a47,void *a48,void *a49,uint64_t a50,void *a51,void *a52)
{
  _Block_object_dispose((const void *)(v56 - 240), 8);
  _Unwind_Resume(a1);
}

id sub_1000C8380(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    double v2 = +[VCPWatchdog sharedWatchdog];
    [v2 pet];
  }
  return v1;
}

void sub_1000C83CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000C83DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    os_log_type_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      [v3 fractionCompleted];
      int v10 = 138412546;
      uint64_t v11 = v6;
      __int16 v12 = 2048;
      double v13 = (float)(v7 * 100.0);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Gallery updating - %.2f%%", (uint8_t *)&v10, 0x16u);
    }
  }
  int v8 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();

  return v8 ^ 1u;
}

void sub_1000C84F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000C851C(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_log_type_t v4 = +[VCPWatchdog sharedWatchdog];
  [v4 pet];

  uint64_t v21 = 0;
  __int16 v22 = &v21;
  uint64_t v23 = 0x2050000000;
  os_log_type_t v5 = (void *)qword_100252690;
  uint64_t v24 = qword_100252690;
  if (!qword_100252690)
  {
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_1000CABD4;
    id v26 = &unk_100219E10;
    uint64_t v27 = &v21;
    sub_1000CABD4((uint64_t)buf);
    os_log_type_t v5 = (void *)v22[3];
  }
  id v6 = v5;
  _Block_object_dispose(&v21, 8);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    float v7 = objc_msgSend(v3, "entityIdentifier", v21);
    int v8 = [v7 stringValue];

    [*(id *)(a1 + 32) addObject:v8];
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      int v9 = VCPLogInstance();
      os_log_type_t v10 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = *(void *)(a1 + 40);
        id v12 = [v3 updateType];
        *(_DWORD *)long long buf = 138412802;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v12;
        *(_WORD *)&buf[22] = 2112;
        id v26 = v8;
        double v13 = "%@ Detected observation update (%lu) for %@";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v9, v10, v13, buf, 0x20u);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  uint64_t v21 = 0;
  __int16 v22 = &v21;
  uint64_t v23 = 0x2050000000;
  uint64_t v14 = (void *)qword_100252698;
  uint64_t v24 = qword_100252698;
  if (!qword_100252698)
  {
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_1000CAC2C;
    id v26 = &unk_100219E10;
    uint64_t v27 = &v21;
    sub_1000CAC2C((uint64_t)buf);
    uint64_t v14 = (void *)v22[3];
  }
  id v15 = v14;
  _Block_object_dispose(&v21, 8);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v16 = objc_msgSend(v3, "entityIdentifier", v21);
    int v8 = [v16 stringValue];

    [*(id *)(a1 + 32) addObject:v8];
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      int v9 = VCPLogInstance();
      os_log_type_t v10 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v17 = *(void *)(a1 + 40);
        id v18 = [v3 updateType];
        *(_DWORD *)long long buf = 138412802;
        *(void *)&uint8_t buf[4] = v17;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v18;
        *(_WORD *)&buf[22] = 2112;
        id v26 = v8;
        double v13 = "%@ Detected entity update (%lu) for %@";
        goto LABEL_13;
      }
LABEL_14:
    }
LABEL_15:
  }
  unsigned int v19 = objc_msgSend(*(id *)(a1 + 48), "isCancelled", v21);

  return v19 ^ 1;
}

void sub_1000C8870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000C8904(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v55 = a3;
  id v56 = a4;
  id v57 = a5;
  uint64_t v10 = mach_absolute_time();
  uint64_t v11 = VCPSignPostLog();
  os_signpost_id_t v12 = os_signpost_id_generate(v11);

  double v13 = VCPSignPostLog();
  uint64_t v14 = v13;
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_BEGIN, v12, "GalleryUpdate_updatePhotosWithEntityBlock", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  id v15 = +[VCPWatchdog sharedWatchdog];
  [v15 pet];

  ++*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = [v9 stringValue];
  id v54 = +[NSString stringWithFormat:@"%@[%@][%lu]", v16, v17, *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24)];

  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v18 = VCPLogInstance();
    os_log_type_t v19 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = [v57 count];
      *(_DWORD *)long long buf = 138412546;
      long long v62 = v54;
      __int16 v63 = 2048;
      id v64 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%@ Receiving Photos with %lu face observations ... ", buf, 0x16u);
    }
  }
  if (!*(void *)(a1 + 40)
    || (uint64_t v21 = *(void **)(a1 + 48),
        [v9 stringValue],
        __int16 v22 = objc_claimAutoreleasedReturnValue(),
        LOBYTE(v21) = [v21 containsObject:v22],
        v22,
        (v21 & 1) != 0))
  {
LABEL_10:
    uint64_t v24 = +[MADGDUtilities sharedInstance];
    unsigned int v25 = objc_msgSend(*(id *)(*(void *)(a1 + 64) + 152), "vcp_isSyndicationLibrary");
    uint64_t v26 = *(void *)(a1 + 64);
    uint64_t v27 = *(void *)(v26 + 152);
    uint64_t v28 = *(void *)(v26 + 136);
    if (v25)
    {
      uint64_t v29 = *(void *)(a1 + 80);
      id v59 = 0;
      unsigned __int8 v30 = [v24 updatePersonWithSyndicationLibrary:v27 service:v28 entityIdentifier:v9 entityClass:v55 observationIDs:v57 taggedPersonUUID:v56 cancelOrExtendTimeoutBlock:v29 error:&v59];
      id v31 = v59;
      if (v30)
      {
        if ((int)MediaAnalysisLogLevel() < 7) {
          goto LABEL_35;
        }
        __int16 v32 = VCPLogInstance();
        os_log_type_t v33 = VCPLogToOSLogType[7];
        if (!os_log_type_enabled(v32, v33)) {
          goto LABEL_34;
        }
        *(_DWORD *)long long buf = 138412290;
        long long v62 = v54;
        long long v34 = "%@ Updated Syndication Library";
        goto LABEL_19;
      }
      if ((int)MediaAnalysisLogLevel() < 3) {
        goto LABEL_35;
      }
      __int16 v32 = VCPLogInstance();
      os_log_type_t v48 = VCPLogToOSLogType[3];
      if (!os_log_type_enabled(v32, v48)) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 138412546;
      long long v62 = v54;
      __int16 v63 = 2112;
      id v64 = v31;
      long long v34 = "%@ Failed to update Syndication Library - %@";
    }
    else
    {
      uint64_t v35 = *(void *)(a1 + 72);
      uint64_t v36 = *(void *)(a1 + 80);
      id v58 = 0;
      unsigned __int8 v37 = [v24 updatePersonWithPhotosLibrary:v27 service:v28 entityIdentifier:v9 entityClass:v55 observationIDs:v57 taggedPersonUUID:v56 keyFaceLocalIdentifiers:v35 cancelOrExtendTimeoutBlock:v36 error:&v58];
      id v31 = v58;
      if (v37)
      {
        if ((int)MediaAnalysisLogLevel() < 7) {
          goto LABEL_35;
        }
        __int16 v32 = VCPLogInstance();
        os_log_type_t v33 = VCPLogToOSLogType[7];
        if (!os_log_type_enabled(v32, v33)) {
          goto LABEL_34;
        }
        *(_DWORD *)long long buf = 138412290;
        long long v62 = v54;
        long long v34 = "%@ Updated Photos";
LABEL_19:
        uint64_t v38 = v32;
        os_log_type_t v39 = v33;
        uint32_t v40 = 12;
LABEL_33:
        _os_log_impl((void *)&_mh_execute_header, v38, v39, v34, buf, v40);
        goto LABEL_34;
      }
      if ((int)MediaAnalysisLogLevel() < 3) {
        goto LABEL_35;
      }
      __int16 v32 = VCPLogInstance();
      os_log_type_t v48 = VCPLogToOSLogType[3];
      if (!os_log_type_enabled(v32, v48))
      {
LABEL_34:

LABEL_35:
        uint64_t v49 = VCPSignPostLog();
        os_log_type_t v50 = v49;
        if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v49))
        {
          *(_WORD *)long long buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v50, OS_SIGNPOST_INTERVAL_END, v12, "GalleryUpdate_updatePhotosWithEntityBlock", (const char *)&unk_1001F3BD3, buf, 2u);
        }

        if (v10)
        {
          mach_absolute_time();
          VCPPerformance_LogMeasurement();
        }
        unsigned int v47 = [*(id *)(a1 + 64) isCancelled];

        goto LABEL_41;
      }
      *(_DWORD *)long long buf = 138412546;
      long long v62 = v54;
      __int16 v63 = 2112;
      id v64 = v31;
      long long v34 = "%@ Failed to update Photos - %@";
    }
    uint64_t v38 = v32;
    os_log_type_t v39 = v48;
    uint32_t v40 = 22;
    goto LABEL_33;
  }
  os_log_type_t v41 = [v9 stringValue];
  id v60 = v41;
  uint64_t v42 = +[NSArray arrayWithObjects:&v60 count:1];
  uint64_t v43 = +[PHPerson fetchPersonsWithMdIDs:v42 options:*(void *)(a1 + 56)];
  BOOL v44 = [v43 count] == 0;

  if (v44)
  {
    if ((int)MediaAnalysisLogLevel() >= 5)
    {
      uint64_t v52 = VCPLogInstance();
      os_log_type_t v53 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v52, v53))
      {
        *(_DWORD *)long long buf = 138412290;
        long long v62 = v54;
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "%@ Person not in Photos DB (should be according to bookmark)", buf, 0xCu);
      }
    }
    goto LABEL_10;
  }
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v45 = VCPLogInstance();
    os_log_type_t v46 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v45, v46))
    {
      *(_DWORD *)long long buf = 138412290;
      long long v62 = v54;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "%@ Person already in Photos DB; skip updating", buf, 0xCu);
    }
  }
  unsigned int v47 = [*(id *)(a1 + 64) isCancelled];
LABEL_41:

  return v47 ^ 1;
}

void sub_1000C8FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000C9098(uint64_t a1, float a2)
{
  unsigned int v4 = [*(id *)(a1 + 32) isCancelled];
  if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
  {
    os_log_type_t v5 = +[VCPWatchdog sharedWatchdog];
    [v5 pet];
  }
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    id v6 = VCPLogInstance();
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      int v10 = 138412802;
      uint64_t v11 = v8;
      __int16 v12 = 2048;
      double v13 = a2 * 100.0;
      __int16 v14 = 1024;
      unsigned int v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%@ VUWGallery plugin update progress: %.2f%%, isCancelled %d", (uint8_t *)&v10, 0x1Cu);
    }
  }
  return v4 ^ 1;
}

void sub_1000C91CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C9350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C939C(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    double v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v2, v3))
    {
      *(_DWORD *)long long buf = 138412290;
      CFStringRef v55 = @"[PublishDetectionAndProcessPerson]";
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%@ Start to publish", buf, 0xCu);
    }
  }
  unsigned int v4 = [*(id *)(a1 + 32) changeBatch];
  id v53 = 0;
  unsigned __int8 v5 = [v4 publishWithError:&v53];
  id v6 = v53;

  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    os_log_type_t v7 = VCPLogInstance();
    os_log_type_t v8 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v7, v8))
    {
      *(_DWORD *)long long buf = 138412290;
      CFStringRef v55 = @"[PublishDetectionAndProcessPerson]";
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%@ Finished publish", buf, 0xCu);
    }
  }
  if ((v5 & 1) == 0)
  {
    unsigned int v9 = [v6 code];
    if (v9 == -128)
    {
      uint64_t v16 = *(void **)(a1 + 40);
      uint64_t v17 = [*(id *)(a1 + 32) processedAssets];
      id v18 = [*(id *)(a1 + 32) processingStatusMap];
      [v16 _recoverAttemptsForAssets:v17 withProcessingStatusMap:v18];

      unsigned int v9 = -128;
      goto LABEL_21;
    }
    if (v9) {
      goto LABEL_21;
    }
  }
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  int v10 = [*(id *)(a1 + 32) processedAssets];
  id v11 = [v10 countByEnumeratingWithState:&v49 objects:v58 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v50;
    do
    {
      for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v50 != v12) {
          objc_enumerationMutation(v10);
        }
        __int16 v14 = *(void **)(*(void *)(a1 + 40) + 160);
        unsigned int v15 = [*(id *)(*((void *)&v49 + 1) + 8 * i) localIdentifier];
        [v14 removeProcessingStatusForLocalIdentifier:v15 andTaskID:3];
      }
      id v11 = [v10 countByEnumeratingWithState:&v49 objects:v58 count:16];
    }
    while (v11);
  }

  [*(id *)(*(void *)(a1 + 40) + 160) commit];
  unsigned int v9 = 0;
LABEL_21:
  *(_DWORD *)(*(void *)(a1 + 40) + 120) = v9;
  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472;
  v48[2] = sub_1000CA024;
  v48[3] = &unk_100219D98;
  v48[4] = *(void *)(a1 + 40);
  os_log_type_t v19 = objc_retainBlock(v48);
  id v20 = +[VCPMADCoreAnalyticsManager sharedManager];
  uint64_t v21 = *(void *)(a1 + 40);
  unsigned int v22 = *(_DWORD *)(v21 + 120);
  if (!v22)
  {
    unsigned int v27 = objc_msgSend(*(id *)(v21 + 152), "mad_useVUGallery");
    uint64_t v28 = *(void **)(*(void *)(a1 + 40) + 152);
    if (v27)
    {
      if (!objc_msgSend(v28, "vcp_isSyndicationLibrary") || (_os_feature_enabled_impl() & 1) != 0)
      {
        id v29 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 152), "mad_countOfUnclusteredFaces");
        if ((int)MediaAnalysisLogLevel() >= 7)
        {
          unsigned __int8 v30 = VCPLogInstance();
          os_log_type_t v31 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v30, v31))
          {
            *(_DWORD *)long long buf = 138412546;
            CFStringRef v55 = @"[PublishDetectionAndProcessPerson]";
            __int16 v56 = 2048;
            id v57 = v29;
            _os_log_impl((void *)&_mh_execute_header, v30, v31, "%@ Found %lu unclustered faces", buf, 0x16u);
          }
        }
        if (v29 >= (id)+[MADGDUtilities clusterFaceCountThreshold])
        {
          [*(id *)(*(void *)(a1 + 40) + 160) cacheCurrentFaceProgress];
          if (([*(id *)(a1 + 40) isCancelled] & 1) == 0)
          {
            unsigned int v22 = [*(id *)(a1 + 40) processFaceCrops];
            if (!v22)
            {
              unsigned int v22 = [*(id *)(a1 + 40) processGalleryPersons:0];
              if (v22 && (int)MediaAnalysisLogLevel() >= 3)
              {
                uint64_t v23 = VCPLogInstance();
                os_log_type_t v24 = VCPLogToOSLogType[3];
                if (!os_log_type_enabled(v23, v24)) {
                  goto LABEL_26;
                }
                *(_DWORD *)long long buf = 138412546;
                CFStringRef v55 = @"[PublishDetectionAndProcessPerson]";
                __int16 v56 = 1024;
                LODWORD(v57) = 0;
                uint64_t v26 = "%@ Failed to process persons (%d)";
                goto LABEL_25;
              }
              goto LABEL_44;
            }
            if ((int)MediaAnalysisLogLevel() < 3) {
              goto LABEL_44;
            }
            uint64_t v23 = VCPLogInstance();
            os_log_type_t v24 = VCPLogToOSLogType[3];
            if (!os_log_type_enabled(v23, v24)) {
              goto LABEL_26;
            }
LABEL_39:
            *(_DWORD *)long long buf = 138412546;
            CFStringRef v55 = @"[PublishDetectionAndProcessPerson]";
            __int16 v56 = 1024;
            LODWORD(v57) = 0;
            uint64_t v26 = "%@ Failed to process facecrops (%d)";
            goto LABEL_25;
          }
          goto LABEL_43;
        }
      }
      goto LABEL_41;
    }
    if (objc_msgSend(v28, "vcp_isSyndicationLibrary")) {
      goto LABEL_41;
    }
    if ([*(id *)(a1 + 40) isCancelled]) {
      goto LABEL_43;
    }
    unsigned int v22 = [*(id *)(a1 + 40) processFaceCrops];
    if (v22)
    {
      if ((int)MediaAnalysisLogLevel() < 3) {
        goto LABEL_44;
      }
      uint64_t v23 = VCPLogInstance();
      os_log_type_t v24 = VCPLogToOSLogType[3];
      if (!os_log_type_enabled(v23, v24)) {
        goto LABEL_26;
      }
      goto LABEL_39;
    }
    if ([*(id *)(a1 + 40) isCancelled])
    {
LABEL_43:
      unsigned int v22 = -128;
      goto LABEL_44;
    }
    if (!objc_msgSend(*(id *)(*(void *)(a1 + 40) + 152), "mad_countOfUnclusteredFaces"))
    {
LABEL_41:
      unsigned int v22 = 0;
      goto LABEL_44;
    }
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      __int16 v32 = VCPLogInstance();
      os_log_type_t v33 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v32, v33))
      {
        id v34 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 152), "mad_countOfUnclusteredFaces");
        *(_DWORD *)long long buf = 138412546;
        CFStringRef v55 = @"[PublishDetectionAndProcessPerson]";
        __int16 v56 = 2048;
        id v57 = v34;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "%@ countOfUnclusteredFaces: %lu", buf, 0x16u);
      }
    }
    uint64_t v23 = objc_alloc_init((Class)VCPTimeMeasurement);
    [v23 start];
    unsigned int v22 = [*(id *)(*(void *)(a1 + 40) + 32) clusterFacesIfNecessary];
    if (v22)
    {
      if ((int)MediaAnalysisLogLevel() < 3) {
        goto LABEL_26;
      }
      uint64_t v35 = VCPLogInstance();
      os_log_type_t v36 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v35, v36))
      {
        *(_DWORD *)long long buf = 138412546;
        CFStringRef v55 = @"[PublishDetectionAndProcessPerson]";
        __int16 v56 = 1024;
        LODWORD(v57) = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "%@ Failed to cluster faces (%d)", buf, 0x12u);
      }
LABEL_86:

      goto LABEL_26;
    }
    [v23 stop];
    unsigned __int8 v37 = +[VCPMADCoreAnalyticsManager sharedManager];
    [v23 elapsedTimeSeconds];
    objc_msgSend(v37, "accumulateDoubleValue:forField:andEvent:", @"FaceClusteringElapsedTimeInSeconds", @"com.apple.mediaanalysisd.FaceAnalysisRunSession");

    [v20 accumulateInt64Value:1 forField:@"NumberOfClusterEvents" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
    if ([*(id *)(*(void *)(a1 + 40) + 32) clustererState] == (id)30) {
      goto LABEL_64;
    }
    if ([*(id *)(a1 + 40) isCancelled])
    {
      unsigned int v22 = -128;
      goto LABEL_26;
    }
    if (![*(id *)(*(void *)(a1 + 40) + 152) countOfDirtyFaceGroups])
    {
LABEL_64:
      unsigned int v22 = 0;
      goto LABEL_26;
    }
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      uint64_t v38 = VCPLogInstance();
      os_log_type_t type = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v38, type))
      {
        id v39 = [*(id *)(*(void *)(a1 + 40) + 152) countOfDirtyFaceGroups];
        *(_DWORD *)long long buf = 138412546;
        CFStringRef v55 = @"[PublishDetectionAndProcessPerson]";
        __int16 v56 = 2048;
        id v57 = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, type, "%@ countOfDirtyFaceGroups: %lu", buf, 0x16u);
      }
    }
    typea = objc_alloc_init((Class)VCPTimeMeasurement);
    [typea start];
    unsigned int v22 = VCPBuildPersons();
    if (v22)
    {
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        uint32_t v40 = VCPLogInstance();
        os_log_type_t v41 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v40, v41))
        {
          *(_DWORD *)long long buf = 138412546;
          CFStringRef v55 = @"[PublishDetectionAndProcessPerson]";
          __int16 v56 = 1024;
          LODWORD(v57) = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "%@ Failed to build person (%d)", buf, 0x12u);
        }
LABEL_84:
      }
    }
    else
    {
      [typea stop];
      uint64_t v42 = +[VCPMADCoreAnalyticsManager sharedManager];
      [typea elapsedTimeSeconds];
      objc_msgSend(v42, "accumulateDoubleValue:forField:andEvent:", @"PersonBuildingElapsedTimeInSeconds", @"com.apple.mediaanalysisd.FaceAnalysisRunSession");

      [v20 accumulateInt64Value:1 forField:@"NumberOfPersonBuildingEvents" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
      if (([*(id *)(a1 + 40) isCancelled] & 1) == 0)
      {
        uint32_t v40 = objc_alloc_init((Class)VCPTimeMeasurement);
        [v40 start];
        unsigned int v22 = VCPPromotePersons();
        if (v22)
        {
          if ((int)MediaAnalysisLogLevel() >= 3)
          {
            uint64_t v43 = VCPLogInstance();
            os_log_type_t v44 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v43, v44))
            {
              *(_DWORD *)long long buf = 138412546;
              CFStringRef v55 = @"[PublishDetectionAndProcessPerson]";
              __int16 v56 = 1024;
              LODWORD(v57) = 0;
              _os_log_impl((void *)&_mh_execute_header, v43, v44, "%@ Failed to promote person (%d)", buf, 0x12u);
            }
          }
        }
        else
        {
          [v40 stop];
          uint64_t v45 = +[VCPMADCoreAnalyticsManager sharedManager];
          [v40 elapsedTimeSeconds];
          objc_msgSend(v45, "accumulateDoubleValue:forField:andEvent:", @"PersonPromotingElapsedTimeInSeconds", @"com.apple.mediaanalysisd.FaceAnalysisRunSession");

          [v20 accumulateInt64Value:1 forField:@"NumberOfPersonPromotingEvents" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
        }
        goto LABEL_84;
      }
      unsigned int v22 = -128;
    }
    uint64_t v35 = typea;
    goto LABEL_86;
  }
  if ((int)MediaAnalysisLogLevel() >= 3)
  {
    uint64_t v23 = VCPLogInstance();
    os_log_type_t v24 = VCPLogToOSLogType[3];
    if (!os_log_type_enabled(v23, v24))
    {
LABEL_26:

      goto LABEL_44;
    }
    int v25 = *(_DWORD *)(*(void *)(a1 + 40) + 120);
    *(_DWORD *)long long buf = 138412546;
    CFStringRef v55 = @"[PublishDetectionAndProcessPerson]";
    __int16 v56 = 1024;
    LODWORD(v57) = v25;
    uint64_t v26 = "%@ Failed to publish detection results (%d)";
LABEL_25:
    _os_log_impl((void *)&_mh_execute_header, v23, v24, v26, buf, 0x12u);
    goto LABEL_26;
  }
LABEL_44:
  *(_DWORD *)(*(void *)(a1 + 40) + 120) = v22;
}

void sub_1000C9E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1000C9FC0(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_1000CA010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1000CA024(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000CA680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1000CA7B0(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_1000CA800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1000CA814(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000CA95C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("GDVUEntityRecognitionClient");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252670 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_1000CAC84();
    sub_1000CA9B4();
  }
}

void sub_1000CA9B4()
{
  v1[0] = 0;
  if (!qword_100252678)
  {
    v1[1] = _NSConcreteStackBlock;
    v1[2] = 3221225472;
    v1[3] = sub_1000CAAB0;
    v1[4] = &unk_100219838;
    v1[5] = v1;
    long long v2 = off_10021CDA0;
    uint64_t v3 = 0;
    qword_100252678 = _sl_dlopen();
  }
  id v0 = (void *)v1[0];
  if (!qword_100252678)
  {
    id v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_1000CAAB0()
{
  uint64_t result = _sl_dlopen();
  qword_100252678 = result;
  return result;
}

Class sub_1000CAB24(uint64_t a1)
{
  sub_1000CA9B4();
  Class result = objc_getClass("GDVUVisualUnderstandingService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252680 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_1000CACAC();
    return (Class)sub_1000CAB7C(v3);
  }
  return result;
}

Class sub_1000CAB7C(uint64_t a1)
{
  sub_1000CA9B4();
  Class result = objc_getClass("GDVUChangeBookmark");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252688 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_1000CACD4();
    return sub_1000CABD4(v3);
  }
  return result;
}

Class sub_1000CABD4(uint64_t a1)
{
  sub_1000CA9B4();
  Class result = objc_getClass("GDVUObservationUpdate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252690 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_1000CACFC();
    return (Class)sub_1000CAC2C(v3);
  }
  return result;
}

Class sub_1000CAC2C(uint64_t a1)
{
  sub_1000CA9B4();
  Class result = objc_getClass("GDVUEntityUpdate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252698 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_1000CAD24();
    return (Class)sub_1000CAC84();
  }
  return result;
}

uint64_t sub_1000CAC84()
{
  uint64_t v0 = abort_report_np();
  return sub_1000CACAC(v0);
}

uint64_t sub_1000CACAC()
{
  uint64_t v0 = abort_report_np();
  return sub_1000CACD4(v0);
}

uint64_t sub_1000CACD4()
{
  return sub_1000CACFC();
}

uint64_t sub_1000CACFC()
{
  uint64_t v0 = abort_report_np();
  return sub_1000CAD24(v0);
}

VCPFaceLibraryProcessingTask *sub_1000CAD24()
{
  uint64_t v0 = (VCPFaceLibraryProcessingTask *)abort_report_np();
  return [(VCPFaceLibraryProcessingTask *)v0 init];
}

void sub_1000CAFB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000CAFF0(id a1)
{
  return 0;
}

void sub_1000CB0B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CB138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPFaceLibraryProcessingTask;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1000CB458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_sync_exit(v16);

  _Unwind_Resume(a1);
}

uint64_t sub_1000CB4EC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  long long v2 = WeakRetained;
  if (WeakRetained) {
    uint64_t v3 = (uint64_t)[WeakRetained isCancelled];
  }
  else {
    uint64_t v3 = 1;
  }

  return v3;
}

void sub_1000CB534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CBC48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000CBDC4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) processAssets:*(void *)(*(void *)(a1 + 40) + 40)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void sub_1000CC350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_1000CC45C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) processAssets:*(void *)(*(void *)(a1 + 40) + 40)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void sub_1000CC984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000CCA68(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 48) + 16))(a2 * 0.400000006 + 40.0);
}

void sub_1000CD0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1000CD454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000CD4D0(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 48) + 16))(a2 * 0.100000001 + 80.0);
}

void sub_1000CD98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000CDA80(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) processAssets:*(void *)(*(void *)(a1 + 40) + 40)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void sub_1000CE0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000CE194(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 48) + 16))(a2 * 0.300000012 + 10.0);
}

void sub_1000CE5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1000CEC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1000CF0C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000CF198(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    long long v2 = +[VCPWatchdog sharedWatchdog];
    [v2 pet];
  }
  return v1;
}

void sub_1000CF1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CF30C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CF328(id a1, int a2)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v3 = VCPLogInstance();
    os_log_type_t v4 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v3, v4))
    {
      CFStringRef v5 = @"interrupted";
      if (!a2) {
        CFStringRef v5 = @"finished";
      }
      int v6 = 138412546;
      CFStringRef v7 = v5;
      __int16 v8 = 1024;
      int v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "[FaceLibraryProcessing] Pre Analysis %@ (%d)", (uint8_t *)&v6, 0x12u);
    }
  }
}

uint64_t sub_1000CF410(uint64_t a1, double a2)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    os_log_type_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      int v7 = 134217984;
      double v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[FaceLibraryProcessing] Pre Analysis progress: %.2f%%", (uint8_t *)&v7, 0xCu);
    }
  }
  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 48) + 16))(a2 * 0.100000001 + 0.0);
}

id sub_1000CF504(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000CF6B8(_Unwind_Exception *a1)
{
  os_log_type_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1000CF854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CFBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

id sub_1000CFC4C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) processFaceCrops];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1000CFFE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000D0038(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000D0040(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
  {
    id v1 = +[VCPWatchdog sharedWatchdog];
    [v1 pet];
  }
}

void sub_1000D00AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D0348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000D03A0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) clusterFaces];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1000D0738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10, void *a11, uint64_t a12, ...)
{
  va_start(va, a12);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D07BC(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_1000D080C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1000D0820(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000D0828(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = VCPBuildPersons();
}

void sub_1000D0DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000D0E88(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    long long v2 = +[VCPWatchdog sharedWatchdog];
    [v2 pet];
  }
  return v1;
}

void sub_1000D0ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D18A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1000D1A00(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_1000D1A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1000D1A64(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

id sub_1000D1A6C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    long long v2 = +[VCPWatchdog sharedWatchdog];
    [v2 pet];
  }
  return v1;
}

void sub_1000D1AB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D2038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

id sub_1000D2130(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000D2138(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
  {
    id v1 = +[VCPWatchdog sharedWatchdog];
    [v1 pet];
  }
}

void sub_1000D21A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1000D21B8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    long long v2 = +[VCPWatchdog sharedWatchdog];
    [v2 pet];
  }
  return v1;
}

void sub_1000D2204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D2778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_1000D2874(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000D287C(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
  {
    id v1 = +[VCPWatchdog sharedWatchdog];
    [v1 pet];
  }
}

void sub_1000D28E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1000D28FC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    long long v2 = +[VCPWatchdog sharedWatchdog];
    [v2 pet];
  }
  return v1;
}

void sub_1000D2948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D2E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000D2F4C(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 48) + 16))(a2 * 0.100000001 + 90.0);
}

uint64_t VCPPhotosVisualSearchAlgorithmVersion()
{
  if (qword_1002526A0 != -1) {
    dispatch_once(&qword_1002526A0, &stru_10021CEC8);
  }
  return dword_100252128;
}

void sub_1000D3038(id a1)
{
  unsigned int v1 = +[VIService parseFlowCacheVersion];
  dword_100252128 |= v1;
}

uint64_t VCPPhotosSceneProcessingVersionInternal()
{
  return 100;
}

uint64_t MediaAnalysisTypesUpdatedSince(unsigned int a1, void *a2)
{
  id v3 = a2;
  os_log_type_t v4 = v3;
  if ((int)a1 < 43)
  {
    uint64_t v5 = 0x7FFFFFFFFFFFFLL;
    goto LABEL_52;
  }
  uint64_t v6 = 0x440040000;
  if (a1 >= 0x2D) {
    uint64_t v6 = 0;
  }
  if (a1 >= 0x2E) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v6 | 0x400040000;
  }
  if (a1 <= 0x32 && [v3 isVideo]) {
    v7 |= 0x40000008uLL;
  }
  uint64_t v8 = v7 | 0x200008;
  if (a1 >= 0x34) {
    uint64_t v8 = v7;
  }
  if (a1 >= 0x35) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = v8 | 0x4000;
  }
  if (a1 <= 0x37)
  {
    unsigned int v10 = objc_msgSend(v4, "vcp_isVideoSlowmo");
    uint64_t v11 = 16392;
    if (v10) {
      uint64_t v11 = 2113560;
    }
    v9 |= v11;
LABEL_23:
    if ([v4 isVideo]) {
      v9 |= MediaAnalysisTypeRequiredForMoviePersistence;
    }
    goto LABEL_26;
  }
  if (a1 == 56) {
    v9 |= 8uLL;
  }
  if (a1 <= 0x39) {
    goto LABEL_23;
  }
  if (a1 == 58)
  {
LABEL_26:
    unsigned int v12 = [v4 isVideo];
    uint64_t v13 = v9 | 0x4000;
    if (!v12) {
      uint64_t v13 = v9;
    }
    uint64_t v14 = v13 | 0x40040000;
    goto LABEL_29;
  }
  if (a1 >= 0x3E) {
    uint64_t v14 = v9;
  }
  else {
    uint64_t v14 = v9 | 0x40040000;
  }
  if (a1 <= 0x3E)
  {
LABEL_29:
    if (objc_msgSend(v4, "vcp_isLivePhoto")) {
      v14 |= 0x40000uLL;
    }
  }
  uint64_t v15 = v14 | 0x1080000000000;
  if (a1 >= 0x40) {
    uint64_t v15 = v14;
  }
  if (a1 >= 0x44) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = v15 | 0x3280000000000;
  }
  if (a1 <= 0x44
    && (([v4 isVideo] & 1) != 0 || objc_msgSend(v4, "vcp_isLivePhoto")))
  {
    v16 |= 0x280000000000uLL;
  }
  if (a1 >= 0x46) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = v16 | 0x3280000000000;
  }
  if ([v4 isVideo])
  {
    uint64_t v17 = MediaAnalysisTypeRequiredForMoviePersistence;
    if ((MediaAnalysisTypeRequiredForMoviePersistence & v5) == 0) {
      uint64_t v17 = 0;
    }
    v5 |= v17;
  }
  if (a1 >= 0x47 && (int)MediaAnalysisLogLevel() >= 4)
  {
    id v18 = VCPLogInstance();
    os_log_type_t v19 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v18, v19))
    {
      v21[0] = 67109120;
      v21[1] = a1;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Unknown Media Analysis version specified (%d)", (uint8_t *)v21, 8u);
    }
  }
LABEL_52:

  return v5;
}

void sub_1000D32F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id MediaAnalysisResultsUpdatedSince(unsigned int a1, void *a2)
{
  id v3 = a2;
  os_log_type_t v4 = +[NSMutableSet set];
  if ((int)a1 <= 42)
  {
    MediaAnalysisResultsKeysForAnalysisTypes(0x7FFFFFFFFFFFFLL);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_29;
  }
  if (a1 <= 0x2C)
  {
    uint64_t v6 = MediaAnalysisResultsKeysForAnalysisTypes(0x440040000);
    [v4 unionSet:v6];

LABEL_6:
    uint64_t v7 = MediaAnalysisResultsKeysForAnalysisTypes(0x400040000);
    [v4 unionSet:v7];

    goto LABEL_7;
  }
  if (a1 == 45) {
    goto LABEL_6;
  }
  if (a1 <= 0x32)
  {
LABEL_7:
    if ([v3 isVideo])
    {
      uint64_t v8 = MediaAnalysisResultsKeysForAnalysisTypes(1073741832);
      [v4 unionSet:v8];
    }
    goto LABEL_9;
  }
  if (a1 == 51)
  {
LABEL_9:
    uint64_t v9 = MediaAnalysisResultsKeysForAnalysisTypes(2097160);
    [v4 unionSet:v9];

LABEL_10:
    unsigned int v10 = MediaAnalysisResultsKeysForAnalysisTypes(0x4000);
    [v4 unionSet:v10];

    goto LABEL_11;
  }
  if (a1 <= 0x34) {
    goto LABEL_10;
  }
  if (a1 <= 0x37)
  {
LABEL_11:
    uint64_t v11 = MediaAnalysisResultsKeysForAnalysisTypes(16392);
    [v4 unionSet:v11];

    if (objc_msgSend(v3, "vcp_isVideoSlowmo"))
    {
      unsigned int v12 = MediaAnalysisResultsKeysForAnalysisTypes(2097168);
      [v4 unionSet:v12];
    }
    goto LABEL_13;
  }
  if (a1 == 56)
  {
LABEL_13:
    uint64_t v13 = MediaAnalysisResultsKeysForAnalysisTypes(8);
    [v4 unionSet:v13];

LABEL_14:
    uint64_t v14 = MediaAnalysisResultsKeysForAnalysisTypes(MediaAnalysisTypeRequiredForMoviePersistence);
    [v4 unionSet:v14];

    goto LABEL_15;
  }
  if (a1 <= 0x39) {
    goto LABEL_14;
  }
  if (a1 == 58)
  {
LABEL_15:
    if ([v3 isVideo])
    {
      uint64_t v15 = MediaAnalysisResultsKeysForAnalysisTypes(0x4000);
      [v4 unionSet:v15];
    }
    goto LABEL_17;
  }
  if (a1 <= 0x3D)
  {
LABEL_17:
    uint64_t v16 = MediaAnalysisResultsKeysForAnalysisTypes(1074003968);
    [v4 unionSet:v16];

    goto LABEL_18;
  }
  if (a1 == 62)
  {
LABEL_18:
    if (objc_msgSend(v3, "vcp_isLivePhoto"))
    {
      uint64_t v17 = MediaAnalysisResultsKeysForAnalysisTypes(0x40000);
      [v4 unionSet:v17];
    }
    goto LABEL_20;
  }
  if (a1 <= 0x3F)
  {
LABEL_20:
    id v18 = MediaAnalysisResultsKeysForAnalysisTypes(0x1080000000000);
    [v4 unionSet:v18];

LABEL_21:
    os_log_type_t v19 = MediaAnalysisResultsKeysForAnalysisTypes(0x3000000000000);
    [v4 unionSet:v19];

    id v20 = MediaAnalysisResultsKeysForAnalysisTypes(0x280000000000);
    [v4 unionSet:v20];

LABEL_22:
    uint64_t v21 = MediaAnalysisResultsKeysForAnalysisTypes(0x3000000000000);
    [v4 unionSet:v21];

    unsigned int v22 = MediaAnalysisResultsKeysForAnalysisTypes(0x280000000000);
    [v4 unionSet:v22];

LABEL_23:
    uint64_t v23 = MediaAnalysisResultsKeysForAnalysisTypes(0x3000000000000);
    [v4 unionSet:v23];

    os_log_type_t v24 = MediaAnalysisResultsKeysForAnalysisTypes(0x280000000000);
    [v4 unionSet:v24];

LABEL_24:
    if (([v3 isVideo] & 1) != 0 || objc_msgSend(v3, "vcp_isLivePhoto"))
    {
      int v25 = MediaAnalysisResultsKeysForAnalysisTypes(0x280000000000);
      [v4 unionSet:v25];
    }
    goto LABEL_27;
  }
  if (a1 <= 0x41) {
    goto LABEL_21;
  }
  if (a1 == 66) {
    goto LABEL_22;
  }
  if (a1 <= 0x43) {
    goto LABEL_23;
  }
  if (a1 == 68) {
    goto LABEL_24;
  }
  if (a1 > 0x45)
  {
    if (a1 != 70 && (int)MediaAnalysisLogLevel() >= 4)
    {
      unsigned __int8 v30 = VCPLogInstance();
      os_log_type_t v31 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v30, v31))
      {
        v32[0] = 67109120;
        v32[1] = a1;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unknown Media Analysis version specified (%d)", (uint8_t *)v32, 8u);
      }
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v26 = MediaAnalysisResultsKeysForAnalysisTypes(0x3000000000000);
  [v4 unionSet:v26];

  unsigned int v27 = MediaAnalysisResultsKeysForAnalysisTypes(0x280000000000);
  [v4 unionSet:v27];

LABEL_28:
  id v5 = v4;
LABEL_29:
  uint64_t v28 = v5;

  return v28;
}

void sub_1000D37F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id MediaAnalysisResultsKeysForAnalysisTypes(uint64_t a1)
{
  long long v2 = +[NSMutableSet set];
  id v3 = v2;
  if ((a1 & 0x10) != 0)
  {
    [v2 addObject:@"VoiceResults"];
    [v3 addObject:@"UtteranceResults"];
  }
  if ((a1 & 0x200000) != 0)
  {
    [v3 addObject:@"ApplauseResults"];
    [v3 addObject:@"BabbleResults"];
    [v3 addObject:@"CheeringResults"];
    [v3 addObject:@"LaughterResults"];
    [v3 addObject:@"MusicResults"];
  }
  if ((a1 & 0x400000000) != 0) {
    [v3 addObject:@"AudioQualityResults"];
  }
  if ((a1 & 0x800000000000) != 0) {
    [v3 addObject:@"AudioEmbeddingResults"];
  }
  if ((a1 & 0x20000000000) != 0) {
    [v3 addObject:@"SoundClassificationResults"];
  }
  if ((a1 & 0x8000000) != 0) {
    [v3 addObject:@"SongResults"];
  }
  if ((a1 & 0x400000) != 0)
  {
    [v3 addObject:@"HumanPoseResults"];
    [v3 addObject:@"HumanActionResults"];
    [v3 addObject:@"HumanPoseInternalResults"];
  }
  if ((a1 & 0x40000000) != 0)
  {
    [v3 addObject:@"HumanActionClassificationResults"];
    [v3 addObject:@"HumanPoseInternalResults"];
  }
  if ((a1 & 0x100000000) != 0)
  {
    [v3 addObject:@"VideoCaptionResults"];
    [v3 addObject:@"ImageCaptionResults"];
  }
  if ((a1 & 0x2000000000000) != 0) {
    [v3 addObject:@"MiCaImageCaptionResults"];
  }
  if ((a1 & 0x200000000000) != 0)
  {
    [v3 addObject:@"MiCaVideoCaptionResults"];
    [v3 addObject:@"VideoSegmentCaptionResults"];
    [v3 addObject:@"VideoCaptionPreferenceResults"];
  }
  if ((a1 & 0x800000) != 0) {
    [v3 addObject:@"LoudnessResults"];
  }
  if ((a1 & 0x14000000) != 0) {
    [v3 addObject:@"VideoStabilizationResults"];
  }
  if ((a1 & 0x20000000) != 0) {
    [v3 addObject:@"InterpolationResults"];
  }
  if ((a1 & 0x4000000000) != 0) {
    [v3 addObject:@"SettlingEffectResults"];
  }
  if ((a1 & 0x10000000000) != 0) {
    [v3 addObject:@"PathConstraintsStabilizationResults"];
  }
  if ((a1 & 0xC) != 0)
  {
    [v3 addObject:@"FaceResults"];
    [v3 addObject:@"ShotTypeResults"];
  }
  if ((a1 & 8) != 0)
  {
    [v3 addObject:@"FacePrintResults"];
    [v3 addObject:@"TorsoResults"];
  }
  if ((a1 & 0xC0) != 0)
  {
    [v3 addObject:@"SceneResults"];
    [v3 addObject:@"QualityResults"];
    [v3 addObject:@"CameraMotionResults"];
    [v3 addObject:@"SubjectMotionResults"];
    [v3 addObject:@"FineSubjectMotionResults"];
    [v3 addObject:@"SubtleMotionResults"];
    [v3 addObject:@"OrientationResults"];
    [v3 addObject:@"PreEncodeResults"];
    [v3 addObject:@"IrisSharpnessResults"];
    [v3 addObject:@"MovingObjectsResults"];
    [v3 addObject:@"ObstructionResults"];
    [v3 addObject:@"InterestingnessResults"];
  }
  if ((a1 & 0x200000000) != 0)
  {
    [v3 addObject:@"MLQualityResults"];
    [v3 addObject:@"MLCameraMotionResults"];
  }
  if ((a1 & 0x100) != 0) {
    [v3 addObject:@"JunkResults"];
  }
  if ((a1 & 0x200) != 0) {
    [v3 addObject:@"BlurResults"];
  }
  if ((a1 & 0x80000) != 0) {
    [v3 addObject:@"ExposureResults"];
  }
  if ((a1 & 0x800) != 0)
  {
    [v3 addObject:@"FeatureVectorResults"];
    [v3 addObject:@"SceneprintResults"];
    [v3 addObject:@"DistanceResults"];
  }
  if ((a1 & 0x1000) != 0) {
    [v3 addObject:@"SaliencyResults"];
  }
  if ((a1 & 0x2000) != 0) {
    [v3 addObject:@"CompositionResults"];
  }
  if ((a1 & 0x4000) != 0) {
    [v3 addObject:@"ClassificationResults"];
  }
  if ((a1 & 0x8000) != 0) {
    [v3 addObject:@"ActivityLevelResults"];
  }
  if ((a1 & 0x20000) != 0)
  {
    [v3 addObject:@"PetsResults"];
    [v3 addObject:@"PetsFaceResults"];
  }
  if ((a1 & 0x2000000000) != 0)
  {
    [v3 addObject:@"PetsKeypointsResults"];
    [v3 addObject:@"PetsActionResults"];
  }
  if ((a1 & 0x40000) != 0)
  {
    [v3 addObject:@"MovieSummaryResults"];
    [v3 addObject:@"MovieHighlightResults"];
    [v3 addObject:@"KeyFrameResourceResults"];
    [v3 addObject:@"MovieHighlightScoreResults"];
    [v3 addObject:@"SettlingEffectsGatingResults"];
    [v3 addObject:@"AnimatedStickerResults"];
  }
  if ((a1 & 0x1000000) != 0)
  {
    [v3 addObject:@"KeyFrameResults"];
    [v3 addObject:@"KeyFrameStillResults"];
  }
  if ((a1 & 0x100000) != 0) {
    [v3 addObject:@"LivePhotoEffectsResults"];
  }
  if ((a1 & 0x800000000) != 0) {
    [v3 addObject:@"ParallaxResults"];
  }
  if ((a1 & 0x8000000000) != 0) {
    [v3 addObject:@"WallpaperExportResults"];
  }
  if ((a1 & 0x400000000000) != 0) {
    [v3 addObject:@"WatchFaceResults"];
  }
  if ((a1 & 0x1000000000) != 0) {
    [v3 addObject:@"FaceQualityResults"];
  }
  if ((a1 & 0x2000000) != 0) {
    [v3 addObject:@"HandsResults"];
  }
  if ((a1 & 0x80000000) != 0) {
    [v3 addObject:@"IrisRecommendResults"];
  }
  if ((a1 & 0x40000000000) != 0) {
    [v3 addObject:@"SafetyResults"];
  }
  if ((a1 & 0x1000000000000) != 0) {
    [v3 addObject:@"ImageEmbeddingResults"];
  }
  if ((a1 & 0x80000000000) != 0)
  {
    [v3 addObject:@"VideoEmbeddingResults"];
    [v3 addObject:@"SummarizedEmbeddingResults"];
    [v3 addObject:@"AudioFusedVideoEmbeddingResults"];
    [v3 addObject:@"AdaptiveSegmentResults"];
  }
  id v4 = v3;

  return v4;
}

void sub_1000D3E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id MediaAnalysisResultsKeyToType(void *a1)
{
  id v1 = a1;
  if (qword_1002526B0 != -1) {
    dispatch_once(&qword_1002526B0, &stru_10021D140);
  }
  long long v2 = [(id)qword_1002526A8 objectForKey:v1];
  id v3 = v2;
  if (v2) {
    id v4 = [v2 integerValue];
  }
  else {
    id v4 = 0;
  }

  return v4;
}

void sub_1000D3F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D3F3C(id a1)
{
  v3[0] = @"FaceResults";
  v3[1] = @"ShotTypeResults";
  v4[0] = &off_10022E2C0;
  v4[1] = &off_10022E2D8;
  v3[2] = @"VoiceResults";
  v3[3] = @"SceneResults";
  v4[2] = &off_10022E2F0;
  v4[3] = &off_10022E308;
  v3[4] = @"QualityResults";
  void v3[5] = @"CameraMotionResults";
  v4[4] = &off_10022E320;
  v4[5] = &off_10022E338;
  v3[6] = @"SubjectMotionResults";
  v3[7] = @"JunkResults";
  void v4[6] = &off_10022E350;
  v4[7] = &off_10022E368;
  v3[8] = @"BlurResults";
  v3[9] = @"ExposureResults";
  v4[8] = &off_10022E380;
  v4[9] = &off_10022E398;
  v3[10] = @"FeatureVectorResults";
  v3[11] = @"DistanceResults";
  v4[10] = &off_10022E3B0;
  v4[11] = &off_10022E3C8;
  v3[12] = @"PreEncodeResults";
  v3[13] = @"FineSubjectMotionResults";
  v4[12] = &off_10022E3E0;
  v4[13] = &off_10022E3F8;
  v3[14] = @"SubtleMotionResults";
  v3[15] = @"OrientationResults";
  v4[14] = &off_10022E410;
  v4[15] = &off_10022E428;
  v3[16] = @"IrisSharpnessResults";
  v3[17] = @"MovingObjectsResults";
  v4[16] = &off_10022E440;
  v4[17] = &off_10022E458;
  v3[18] = @"ObstructionResults";
  v3[19] = @"SaliencyResults";
  v4[18] = &off_10022E470;
  v4[19] = &off_10022E488;
  v3[20] = @"CompositionResults";
  v3[21] = @"ClassificationResults";
  v4[20] = &off_10022E4A0;
  v4[21] = &off_10022E4B8;
  v3[22] = @"InterestingnessResults";
  v3[23] = @"IrisRecommendResults";
  v4[22] = &off_10022E4D0;
  v4[23] = &off_10022E4E8;
  v3[24] = @"MusicResults";
  v3[25] = @"UtteranceResults";
  v4[24] = &off_10022E500;
  v4[25] = &off_10022E518;
  v3[26] = @"ActivityLevelResults";
  v3[27] = @"FacePrintResults";
  v4[26] = &off_10022E530;
  v4[27] = &off_10022E548;
  v3[28] = @"PetsResults";
  v3[29] = @"PetsFaceResults";
  v4[28] = &off_10022E560;
  v4[29] = &off_10022E578;
  v3[30] = @"PetsKeypointsResults";
  v3[31] = @"PetsActionResults";
  v4[30] = &off_10022E590;
  v4[31] = &off_10022E5A8;
  v3[32] = @"MovieSummaryResults";
  v3[33] = @"MovieHighlightResults";
  v4[32] = &off_10022E5C0;
  v4[33] = &off_10022E5D8;
  v3[34] = @"MovieHighlightScoreResults";
  v3[35] = @"SettlingEffectsGatingResults";
  v4[34] = &off_10022E5F0;
  v4[35] = &off_10022E608;
  v3[36] = @"AnimatedStickerResults";
  v3[37] = @"KeyFrameResults";
  v4[36] = &off_10022E620;
  v4[37] = &off_10022E638;
  v3[38] = @"LivePhotoEffectsResults";
  v3[39] = @"ParallaxResults";
  v4[38] = &off_10022E650;
  v4[39] = &off_10022E668;
  v3[40] = @"WallpaperExportResults";
  v3[41] = @"WatchFaceResults";
  v4[40] = &off_10022E680;
  v4[41] = &off_10022E698;
  v3[42] = @"FaceQualityResults";
  v3[43] = @"ApplauseResults";
  v4[42] = &off_10022E6B0;
  v4[43] = &off_10022E6C8;
  v3[44] = @"BabbleResults";
  v3[45] = @"CheeringResults";
  v4[44] = &off_10022E6E0;
  v4[45] = &off_10022E6F8;
  v3[46] = @"LaughterResults";
  v3[47] = @"AudioQualityResults";
  v4[46] = &off_10022E710;
  v4[47] = &off_10022E728;
  v3[48] = @"AudioEmbeddingResults";
  v3[49] = @"SoundClassificationResults";
  v4[48] = &off_10022E740;
  v4[49] = &off_10022E758;
  v3[50] = @"HumanPoseResults";
  v3[51] = @"HumanPoseInternalResults";
  v4[50] = &off_10022E770;
  v4[51] = &off_10022E788;
  v3[52] = @"HumanActionResults";
  v3[53] = @"LoudnessResults";
  v4[52] = &off_10022E7A0;
  v4[53] = &off_10022E7B8;
  v3[54] = @"KeyFrameResourceResults";
  v3[55] = @"SceneprintResults";
  v4[54] = &off_10022E7D0;
  v4[55] = &off_10022E7E8;
  v3[56] = @"KeyFrameStillResults";
  v3[57] = @"HandsResults";
  v4[56] = &off_10022E800;
  v4[57] = &off_10022E140;
  v3[58] = @"VideoStabilizationResults";
  v3[59] = @"SongResults";
  v4[58] = &off_10022E818;
  v4[59] = &off_10022E830;
  v3[60] = @"HumanActionClassificationResults";
  v3[61] = @"VideoCaptionResults";
  v4[60] = &off_10022E848;
  v4[61] = &off_10022E860;
  v3[62] = @"VideoCaptionPreferenceResults";
  v3[63] = @"ImageCaptionResults";
  v4[62] = &off_10022E878;
  v4[63] = &off_10022E890;
  v3[64] = @"MiCaVideoCaptionResults";
  v4[64] = &off_10022E8A8;
  v3[65] = @"VideoSegmentCaptionResults";
  v4[65] = &off_10022E8C0;
  v3[66] = @"MiCaImageCaptionResults";
  v4[66] = &off_10022E8D8;
  v3[67] = @"PriorityResults";
  v4[67] = &off_10022E8F0;
  v3[68] = @"InterpolationResults";
  v4[68] = &off_10022E908;
  v3[69] = @"SettlingEffectResults";
  v4[69] = &off_10022E920;
  v3[70] = @"PathConstraintsStabilizationResults";
  v4[70] = &off_10022E938;
  v3[71] = @"SafetyResults";
  v4[71] = &off_10022E950;
  v3[72] = @"TorsoResults";
  v4[72] = &off_10022E968;
  v3[73] = @"ImageEmbeddingResults";
  v4[73] = &off_10022E980;
  v3[74] = @"VideoEmbeddingResults";
  v4[74] = &off_10022E998;
  v3[75] = @"SummarizedEmbeddingResults";
  v4[75] = &off_10022E9B0;
  v3[76] = @"AudioFusedVideoEmbeddingResults";
  v4[76] = &off_10022E9C8;
  v3[77] = @"AdaptiveSegmentResults";
  v4[77] = &off_10022E9E0;
  uint64_t v1 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:78];
  long long v2 = (void *)qword_1002526A8;
  qword_1002526A8 = v1;
}

__CFString *MediaAnalysisResultsTypeToKey(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x52) {
    return 0;
  }
  else {
    return off_10021D450[a1 - 1];
  }
}

uint64_t MediaAnalysisFlagsForTypes(char a1)
{
  uint64_t v1 = 62;
  if ((a1 & 0xC) == 0) {
    uint64_t v1 = 0;
  }
  if ((a1 & 0xC0) != 0) {
    return v1 | 0x3FFC0;
  }
  else {
    return v1;
  }
}

__CFString *MediaAnalysisTypeShortDescription(uint64_t a1)
{
  if (!a1)
  {
    id v5 = &stru_10021F768;
    goto LABEL_90;
  }
  long long v2 = +[NSMutableString string];
  id v3 = v2;
  if ((a1 & 8) != 0)
  {
    CFStringRef v4 = @"F";
  }
  else
  {
    if ((a1 & 4) == 0) {
      goto LABEL_8;
    }
    CFStringRef v4 = @"f";
  }
  [v2 appendString:v4];
LABEL_8:
  if ((a1 & 0x10) != 0) {
    [v3 appendString:@"v"];
  }
  if ((a1 & 0x80) != 0)
  {
    CFStringRef v6 = @"S";
    goto LABEL_14;
  }
  if ((a1 & 0x40) != 0)
  {
    CFStringRef v6 = @"s";
LABEL_14:
    [v3 appendString:v6];
  }
  if ((a1 & 0x100) != 0) {
    [v3 appendString:@"j"];
  }
  if ((a1 & 0x200) != 0) {
    [v3 appendString:@"b"];
  }
  if ((a1 & 0x80000) != 0) {
    [v3 appendString:@"x"];
  }
  if ((a1 & 0x400) != 0) {
    [v3 appendString:@"d"];
  }
  if ((a1 & 0x800) != 0) {
    [v3 appendString:@"V"];
  }
  if ((a1 & 0x1000) != 0) {
    [v3 appendString:@"i"];
  }
  if ((a1 & 0x2000) != 0) {
    [v3 appendString:@"c"];
  }
  if ((a1 & 0x4000) != 0) {
    [v3 appendString:@"C"];
  }
  if ((a1 & 0x8000) != 0) {
    [v3 appendString:@"t"];
  }
  if ((a1 & 0x10000) != 0) {
    [v3 appendString:@"q"];
  }
  if ((a1 & 0x20000) != 0) {
    [v3 appendString:@"e"];
  }
  if ((a1 & 0x2000000000) != 0) {
    [v3 appendString:@"K"];
  }
  if ((a1 & 0x40000) != 0) {
    [v3 appendString:@"H"];
  }
  if ((a1 & 0x100000) != 0) {
    [v3 appendString:@"E"];
  }
  if ((a1 & 0x800000000) != 0) {
    [v3 appendString:@"p"];
  }
  if ((a1 & 0x1000000000) != 0) {
    [v3 appendString:@"w"];
  }
  if ((a1 & 0x200000) != 0) {
    [v3 appendString:@"u"];
  }
  if ((a1 & 0x400000) != 0) {
    [v3 appendString:@"y"];
  }
  if ((a1 & 0x800000) != 0) {
    [v3 appendString:@"l"];
  }
  if ((a1 & 0x2000000) != 0) {
    [v3 appendString:@"z"];
  }
  if ((a1 & 0x4000000) != 0) {
    [v3 appendString:@"P"];
  }
  if ((a1 & 0x10000000) != 0) {
    [v3 appendString:@"G"];
  }
  if ((MediaAnalysisTypeGyroAnalytics & a1) != 0) {
    [v3 appendString:@"A"];
  }
  if ((a1 & 0x200000000) != 0) {
    [v3 appendString:@"O"];
  }
  if ((a1 & 0x8000000) != 0) {
    [v3 appendString:@"g"];
  }
  if ((a1 & 0x20000000) != 0) {
    [v3 appendString:@"I"];
  }
  if ((a1 & 0x40000000) != 0) {
    [v3 appendString:@"Y"];
  }
  if ((a1 & 0x80000000) != 0) {
    [v3 appendString:@"R"];
  }
  if ((a1 & 0x100000000) != 0) {
    [v3 appendString:@"U"];
  }
  if ((a1 & 0x400000000) != 0) {
    [v3 appendString:@"Q"];
  }
  if ((a1 & 0x20000000000) != 0) {
    [v3 appendString:@"L"];
  }
  if ((a1 & 0x40000000000) != 0) {
    [v3 appendString:@"T"];
  }
  if ((a1 & 0x1000000000000) != 0) {
    [v3 appendString:@"m"];
  }
  if ((a1 & 0x80000000000) != 0) {
    [v3 appendString:@"M"];
  }
  if ((a1 & 0x800000000000) != 0) {
    [v3 appendString:@"D"];
  }
  if ((a1 & 0x2000000000000) != 0) {
    [v3 appendString:@"n"];
  }
  if ((a1 & 0x200000000000) != 0) {
    [v3 appendString:@"N"];
  }
  id v5 = v3;

LABEL_90:
  return v5;
}

void sub_1000D4A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *MediaAnalysisTypeDescription(uint64_t a1)
{
  if (!a1)
  {
    id v5 = @"None";
    goto LABEL_99;
  }
  long long v2 = +[NSMutableString string];
  id v3 = v2;
  if ((a1 & 8) != 0)
  {
    CFStringRef v4 = @"Full Face, ";
  }
  else
  {
    if ((a1 & 4) == 0) {
      goto LABEL_8;
    }
    CFStringRef v4 = @"Face, ";
  }
  [v2 appendString:v4];
LABEL_8:
  if ((a1 & 0x10) != 0) {
    [v3 appendString:@"Voice, "];
  }
  if ((a1 & 0x80) != 0)
  {
    CFStringRef v6 = @"Full Scene, ";
    goto LABEL_14;
  }
  if ((a1 & 0x40) != 0)
  {
    CFStringRef v6 = @"Scene, ";
LABEL_14:
    [v3 appendString:v6];
  }
  if ((a1 & 0x100) != 0) {
    [v3 appendString:@"Junk, "];
  }
  if ((a1 & 0x200) != 0) {
    [v3 appendString:@"Blur, "];
  }
  if ((a1 & 0x80000) != 0) {
    [v3 appendString:@"Exposure, "];
  }
  if ((a1 & 0x400) != 0) {
    [v3 appendString:@"Distance, "];
  }
  if ((a1 & 0x800) != 0) {
    [v3 appendString:@"Feature, "];
  }
  if ((a1 & 0x1000) != 0) {
    [v3 appendString:@"Saliency, "];
  }
  if ((a1 & 0x2000) != 0) {
    [v3 appendString:@"Composition, "];
  }
  if ((a1 & 0x4000) != 0) {
    [v3 appendString:@"Classification, "];
  }
  if ((a1 & 0x8000) != 0) {
    [v3 appendString:@"ActivityLevel, "];
  }
  if ((a1 & 0x10000) != 0) {
    [v3 appendString:@"CurationScore, "];
  }
  if ((a1 & 0x20000) != 0) {
    [v3 appendString:@"Pets, "];
  }
  if ((a1 & 0x2000000000) != 0) {
    [v3 appendString:@"PetsPose, "];
  }
  if ((a1 & 0x40000) != 0) {
    [v3 appendString:@"MovieCuration, "];
  }
  if ((a1 & 0x100000) != 0) {
    [v3 appendString:@"Effects, "];
  }
  if ((a1 & 0x800000000) != 0) {
    [v3 appendString:@"Parallax, "];
  }
  if ((a1 & 0x8000000000) != 0) {
    [v3 appendString:@"Wallpaper Export, "];
  }
  if ((a1 & 0x1000000000) != 0) {
    [v3 appendString:@"Face Quality, "];
  }
  if ((a1 & 0x200000) != 0) {
    [v3 appendString:@"Audio Classification, "];
  }
  if ((a1 & 0x400000) != 0) {
    [v3 appendString:@"Human pose, "];
  }
  if ((a1 & 0x800000) != 0) {
    [v3 appendString:@"Loudness Measure, "];
  }
  if ((a1 & 0x2000000) != 0) {
    [v3 appendString:@"Hands, "];
  }
  if ((a1 & 0x4000000) != 0) {
    [v3 appendString:@"Video Stabilization Pixel, "];
  }
  if ((a1 & 0x10000000) != 0) {
    [v3 appendString:@"Video Stabilization Gyro, "];
  }
  if ((MediaAnalysisTypeGyroAnalytics & a1) != 0) {
    [v3 appendString:@"Gyro Analytics, "];
  }
  if ((a1 & 0x200000000) != 0) {
    [v3 appendString:@"ML Video Attributes, "];
  }
  if ((a1 & 0x8000000) != 0) {
    [v3 appendString:@"Song detection, "];
  }
  if ((a1 & 0x20000000) != 0) {
    [v3 appendString:@"Video Interpolation, "];
  }
  if ((a1 & 0x4000000000) != 0) {
    [v3 appendString:@"Settling effect, "];
  }
  if ((a1 & 0x10000000000) != 0) {
    [v3 appendString:@"Path constraint stabilization, "];
  }
  if ((a1 & 0x40000000) != 0) {
    [v3 appendString:@"Human action, "];
  }
  if ((a1 & 0x80000000) != 0) {
    [v3 appendString:@"Iris Recommendation, "];
  }
  if ((a1 & 0x100000000) != 0) {
    [v3 appendString:@"AX Caption, "];
  }
  if ((a1 & 0x2000000000000) != 0) {
    [v3 appendString:@"Image Caption, "];
  }
  if ((a1 & 0x200000000000) != 0) {
    [v3 appendString:@"Video Caption, "];
  }
  if ((a1 & 0x400000000) != 0) {
    [v3 appendString:@"Audio Quality, "];
  }
  if ((a1 & 0x20000000000) != 0) {
    [v3 appendString:@"Sound Classification, "];
  }
  if ((a1 & 0x40000000000) != 0) {
    [v3 appendString:@"Safety, "];
  }
  if ((a1 & 0x1000000000000) != 0) {
    [v3 appendString:@"Image MUBackbone, "];
  }
  if ((a1 & 0x80000000000) != 0) {
    [v3 appendString:@"Video MUBackbone, "];
  }
  if ((a1 & 0x800000000000) != 0) {
    [v3 appendString:@"Audio Embedding, "];
  }
  if ([v3 length])
  {
    objc_msgSend(v3, "substringToIndex:", (char *)objc_msgSend(v3, "length") - 2);
    id v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v5 = @"Unknown";
  }

LABEL_99:
  return v5;
}

void sub_1000D4EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id MediaAnalysisStripInternalResultsFromAnalysis(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    long long v2 = +[NSMutableDictionary dictionaryWithDictionary:v1];
    id v3 = objc_msgSend(v2, "vcp_results");
    CFStringRef v4 = +[NSMutableDictionary dictionaryWithDictionary:v3];

    unint64_t v5 = (unint64_t)objc_msgSend(v2, "vcp_types");
    [v4 removeObjectForKey:@"PreEncodeResults"];
    [v4 removeObjectForKey:@"FeatureVectorResults"];
    [v4 removeObjectForKey:@"SceneprintResults"];
    [v2 removeObjectForKey:@"metadataRanges"];
    [v2 removeObjectForKey:@"statsFlags"];
    if ([v4 count]) {
      objc_msgSend(v2, "vcp_setResults:", v4);
    }
    objc_msgSend(v2, "vcp_setTypes:", v5 & 0xFFFFFFFFFFFFF7FFLL);
  }
  else
  {
    long long v2 = 0;
  }

  return v2;
}

void sub_1000D4FCC(_Unwind_Exception *a1)
{
  CFStringRef v4 = v3;

  _Unwind_Resume(a1);
}

id MediaAnalysisStripKeyframeResourceResultsFromAnalysis(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    long long v2 = +[NSMutableDictionary dictionaryWithDictionary:v1];
    id v3 = objc_msgSend(v2, "vcp_results");
    CFStringRef v4 = +[NSMutableDictionary dictionaryWithDictionary:v3];

    [v4 removeObjectForKey:@"KeyFrameResourceResults"];
    [v2 removeObjectForKey:@"metadataRanges"];
    if ([v4 count]) {
      objc_msgSend(v2, "vcp_setResults:", v4);
    }
  }
  else
  {
    long long v2 = 0;
  }

  return v2;
}

void sub_1000D50D0(_Unwind_Exception *a1)
{
  CFStringRef v4 = v3;

  _Unwind_Resume(a1);
}

void MediaAnalysisPurgeResources()
{
  id v0 = +[VCPSharedInstanceManager sharedManager];
  [v0 reset];
}

void sub_1000D5158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

__CFString *VCPTaskIDDescription(uint64_t a1)
{
  uint64_t v3 = a1 - 1;
  CFStringRef v4 = @"MediaAnalysis";
  switch(v3)
  {
    case 0:
      goto LABEL_10;
    case 1:
      CFStringRef v4 = @"SceneAnalysis";
      return v4;
    case 2:
      CFStringRef v4 = @"FaceAnalysis";
      return v4;
    case 3:
      CFStringRef v4 = @"EffectsAnalysis";
      return v4;
    case 4:
      CFStringRef v4 = @"Sceneprint";
      return v4;
    case 5:
      CFStringRef v4 = @"VideoStabilization";
      return v4;
    case 6:
      CFStringRef v4 = @"MultiWorkerAnalysis";
      return v4;
    case 7:
      CFStringRef v4 = @"QuickFaceIdentification";
      return v4;
    case 8:
      goto LABEL_9;
    case 9:
      CFStringRef v4 = @"OCRAnalysis";
      return v4;
    case 10:
      CFStringRef v4 = @"MovieHighlightProcessing";
      return v4;
    case 11:
      CFStringRef v4 = @"VisualSearchAnalysis";
      return v4;
    case 12:
      CFStringRef v4 = @"FilesystemAnalysis";
      return v4;
    case 13:
      CFStringRef v4 = @"FilesystemVideoAnalysis";
      return v4;
    case 14:
      CFStringRef v4 = @"VideoCaptionAnalysis";
      return v4;
    case 15:
      CFStringRef v4 = @"PECAnalysis";
      return v4;
    case 16:
      CFStringRef v4 = @"SpotlightImageAnalysis";
      return v4;
    case 17:
      CFStringRef v4 = @"SpotlightMovieAnalysis";
      return v4;
    default:
      if (a1 == 255)
      {
        CFStringRef v4 = @"FullImageAnalysis";
      }
      else
      {
LABEL_9:
        CFStringRef v4 = +[NSString stringWithFormat:@"Unknown(%lu)", a1];
LABEL_10:
      }
      return v4;
  }
}

uint64_t PHMediaProcessingTaskIDForVCPTaskID(uint64_t result)
{
  switch(result)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return result;
    default:
      if (result == 0x7FFFFFFF) {
        uint64_t v1 = 0x7FFFFFFFLL;
      }
      else {
        uint64_t v1 = 0;
      }
      if (result == 255) {
        id result = 17;
      }
      else {
        id result = v1;
      }
      break;
  }
  return result;
}

uint64_t VCPVersionForTask(uint64_t a1)
{
  uint64_t v2 = a1 - 1;
  uint64_t result = 8;
  switch(v2)
  {
    case 0:
      return 70;
    case 1:
      return 100;
    case 2:
      if (_os_feature_enabled_impl()) {
        return 15;
      }
      else {
        return 11;
      }
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
      goto LABEL_5;
    case 9:
      return result;
    case 11:
      if (qword_1002526A0 != -1) {
        dispatch_once(&qword_1002526A0, &stru_10021CEC8);
      }
      return dword_100252128 | 0x10000u;
    default:
      if (a1 == 16) {
        return 5;
      }
LABEL_5:
      if ((int)MediaAnalysisLogLevel() >= 4)
      {
        CFStringRef v4 = VCPLogInstance();
        os_log_type_t v5 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v4, v5))
        {
          CFStringRef v6 = VCPTaskIDDescription(a1);
          int v7 = 138412802;
          uint64_t v8 = v6;
          __int16 v9 = 1024;
          int v10 = a1;
          __int16 v11 = 1024;
          int v12 = 70;
          _os_log_impl((void *)&_mh_execute_header, v4, v5, "VCPVersionForTask not implemented for %@ (%d); using MediaAnalysisVersion (%d)",
            (uint8_t *)&v7,
            0x18u);
        }
      }
      return 70;
  }
}

void sub_1000D55FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id VCPSpecialLabelToExtendedSceneClassificationID(void *a1)
{
  id v1 = a1;
  if (qword_1002526C0 != -1) {
    dispatch_once(&qword_1002526C0, &stru_10021D180);
  }
  uint64_t v2 = [(id)qword_1002526B8 objectForKeyedSubscript:v1];

  return v2;
}

void sub_1000D56C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D56D0(id a1)
{
  v3[0] = @"autobahn-nature";
  v3[1] = @"autobahn-city";
  v4[0] = &off_10022E9F8;
  v4[1] = &off_10022EA10;
  v3[2] = @"autobahn-citynatureish";
  v3[3] = @"otgx_csfbtu_gfnbmf";
  v4[2] = &off_10022EA28;
  v4[3] = &off_10022EA40;
  v3[4] = @"otgx_csfbtu_nbmf";
  void v3[5] = @"otgx_cvuupdlt";
  v4[4] = &off_10022EA58;
  v4[5] = &off_10022EA70;
  v3[6] = @"otgx_hfojubmt_gfnbmf";
  v3[7] = @"otgx_hfojubmt_nbmf";
  void v4[6] = &off_10022EA88;
  v4[7] = &off_10022EAA0;
  v3[8] = @"otgx_opof";
  v3[9] = @"otgx_voefsxfbs";
  v4[8] = &off_10022EAB8;
  v4[9] = &off_10022EAD0;
  v3[10] = SCMLImageClassificationLabelNSFWAny;
  v3[11] = SCMLImageClassificationLabelNSFWExplicit;
  v4[10] = &off_10022EAE8;
  v4[11] = &off_10022EB00;
  v3[12] = @"otgx_hfojubmt";
  v3[13] = VNRecognizeDocumentElementIdentifierDocument;
  v4[12] = &off_10022EB18;
  v4[13] = &off_10022EB30;
  v3[14] = VNRecognizeDocumentElementIdentifierText;
  v3[15] = VNRecognizeDocumentElementIdentifierQRCode;
  v4[14] = &off_10022EB48;
  v4[15] = &off_10022EB60;
  v3[16] = VNRecognizeDocumentElementIdentifierAppCode;
  v3[17] = @"meme_document_check_or_checkbook";
  v4[16] = &off_10022EB78;
  v4[17] = &off_10022EB90;
  v3[18] = @"meme_curation_meme";
  v3[19] = @"meme_curation_screenshot";
  v4[18] = &off_10022EBA8;
  v4[19] = &off_10022EBC0;
  v3[20] = @"meme_document_boarding_pass";
  v3[21] = @"meme_document_currency_or_bill";
  v4[20] = &off_10022EBD8;
  v4[21] = &off_10022EBF0;
  v3[22] = @"meme_document_driving_license";
  v3[23] = @"meme_document_office_badge";
  v4[22] = &off_10022EC08;
  v4[23] = &off_10022EC20;
  v3[24] = @"meme_document_passport";
  v3[25] = @"meme_document_receipt";
  v4[24] = &off_10022EC38;
  v4[25] = &off_10022EC50;
  v3[26] = @"meme_document_social_security_number";
  v3[27] = @"meme_hier_negative";
  v4[26] = &off_10022EC68;
  v4[27] = &off_10022EC80;
  v3[28] = @"meme_hier_document";
  v3[29] = @"meme_hier_curation";
  v4[28] = &off_10022EC98;
  v4[29] = &off_10022ECB0;
  v3[30] = @"meme_negative";
  v3[31] = @"meme_document";
  v4[30] = &off_10022EC80;
  v4[31] = &off_10022EC98;
  v3[32] = @"meme_screenshot_etc";
  v3[33] = VN2DSYD77FUMKqtcogofprEd;
  v4[32] = &off_10022ECB0;
  v4[33] = &off_10022ECC8;
  v3[34] = VN4MFjUmPIIWefw2ZktBTwVB;
  v3[35] = VN6XNMvaRunPpzWjGa9uUHD6;
  v4[34] = &off_10022ECE0;
  v4[35] = &off_10022ECF8;
  v3[36] = VN3FNQUJVIs2puI1uPc9mxh7;
  v3[37] = VNSY8t4EoTztuqIL02g8uVA0;
  v4[36] = &off_10022ED10;
  v4[37] = &off_10022ED28;
  v3[38] = VN4QuphG8kE4qDaDycivBkX5;
  v3[39] = VN7gQUejje8mmnE9GSTsVBVV;
  v4[38] = &off_10022ED40;
  v4[39] = &off_10022ED58;
  v3[40] = VNa9xpOJNvRoaW9plFGZ9Eo0;
  v3[41] = VN2vIWnsZbk4Su55oeWfKDq1;
  v4[40] = &off_10022ED70;
  v4[41] = &off_10022ED88;
  v3[42] = VNmNJnu0xlW8CZXt6hJ7Rpb0;
  v3[43] = VN35FOB1QhtSfYGRIJvTgtTq;
  v4[42] = &off_10022EDA0;
  v4[43] = &off_10022EDB8;
  v3[44] = VN6ZsEIQ9ri2eF1vhsxw5COm;
  v3[45] = VNPotentialLandmarkIdentifier;
  v4[44] = &off_10022EDD0;
  v4[45] = &off_10022EDE8;
  v3[46] = VN62b042cc67e0a7d589ecdb58232fe23d;
  v3[47] = VN9bdc36cda32be948a5089e37392596ec;
  v4[46] = &off_10022EE00;
  v4[47] = &off_10022EE18;
  v3[48] = VN81aedeb999c79d74e79af7f1c922cf97;
  v3[49] = VN9f5b8e9dc1b3c824d79372f87b072ee3;
  v4[48] = &off_10022EE30;
  v4[49] = &off_10022EE48;
  v3[50] = VNbe5c67b06e95370f5a7b67b13e73637c;
  v3[51] = VN220a6626eb3cb51295a4e250ad9da319;
  v4[50] = &off_10022EE60;
  v4[51] = &off_10022EE78;
  v3[52] = VN0af6454e97767772ce64a19ddaf61f0c;
  v3[53] = VNeeab04670e53ebeb25150a31963a1aa6;
  v4[52] = &off_10022EE90;
  v4[53] = &off_10022EEA8;
  v3[54] = VNa0c07362d05e1dafb35b96d20d5ce42d;
  v3[55] = VN79a8f83d9d55eb4eb2c9695902c47b53;
  v4[54] = &off_10022EEC0;
  v4[55] = &off_10022EED8;
  v3[56] = VNacdca02f0900c2cb198193f3eec7b6c9;
  v3[57] = @"hier_text_document";
  v4[56] = &off_10022EEF0;
  v4[57] = &off_10022EF08;
  v3[58] = @"hier_tragic_failure";
  v3[59] = @"tragic_failure";
  v4[58] = &off_10022EF20;
  v4[59] = &off_10022EF38;
  v3[60] = @"screenshot";
  v3[61] = @"bad_framing";
  v4[60] = &off_10022EF50;
  v4[61] = &off_10022EF68;
  v3[62] = @"bad_lighting";
  v3[63] = @"blurry";
  v4[62] = &off_10022EF80;
  v4[63] = &off_10022EF98;
  v3[64] = @"food_or_drink";
  v4[64] = &off_10022EFB0;
  v3[65] = @"junk_other";
  v4[65] = &off_10022EFC8;
  v3[66] = @"medical_reference";
  v4[66] = &off_10022EFE0;
  v3[67] = @"negative";
  v4[67] = &off_10022EFF8;
  v3[68] = @"receipt_or_document";
  v4[68] = &off_10022F010;
  v3[69] = @"repair_reference";
  v4[69] = &off_10022F028;
  v3[70] = @"shopping_reference";
  v4[70] = &off_10022F040;
  v3[71] = @"utility_reference";
  v4[71] = &off_10022F058;
  v3[72] = @"junk_negative";
  v4[72] = &off_10022F070;
  v3[73] = @"hier_negative";
  v4[73] = &off_10022F070;
  v3[74] = @"junk_non_memorable";
  v4[74] = &off_10022F088;
  v3[75] = @"hier_non_memorable";
  v4[75] = &off_10022F088;
  v3[76] = @"junk_poor_quality";
  v4[76] = &off_10022F0A0;
  v3[77] = @"hier_poor_quality";
  v4[77] = &off_10022F0A0;
  void v3[78] = @"junk";
  void v4[78] = &off_10022F0B8;
  uint64_t v1 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:79];
  uint64_t v2 = (void *)qword_1002526B8;
  qword_1002526B8 = v1;
}

id VCPHumanActionOperatingPointFromActionID(void *a1)
{
  id v1 = a1;
  if (qword_1002526D0 != -1) {
    dispatch_once(&qword_1002526D0, &stru_10021D1A0);
  }
  uint64_t v2 = [(id)qword_1002526C8 objectForKeyedSubscript:v1];

  return v2;
}

void sub_1000D5EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D5F08(id a1)
{
  id v1 = (void *)qword_1002526C8;
  qword_1002526C8 = (uint64_t)&off_100230918;
}

CFStringRef VCPProcessingStatusDescription(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  CFStringRef result = @"Running";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      CFStringRef result = @"No Resource";
      break;
    case 2:
      CFStringRef result = @"Soft Failure";
      break;
    case 3:
      CFStringRef result = @"Hard Failure";
      break;
    case 4:
      CFStringRef result = @"Duplicate Failure";
      break;
    case 5:
      CFStringRef result = @"Upload Failure";
      break;
    case 6:
      CFStringRef result = @"Download Throttled";
      break;
    default:
      if (@"Running" == (__CFString *)0x7FFF) {
        CFStringRef result = @"Done";
      }
      else {
        CFStringRef result = @"Undefined";
      }
      break;
  }
  return result;
}

CFStringRef MADPersonProcessingStatusDescription(uint64_t a1)
{
  CFStringRef v1 = @"Undefined";
  if (a1 == 1) {
    CFStringRef v1 = @"Need to update Photos";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"Clean";
  }
}

id MediaAnalysisStripOutdatedAnalysis(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  os_log_type_t v5 = v4;
  id v6 = 0;
  if (v3 && v4)
  {
    if (objc_msgSend(v4, "vcp_version") == 70)
    {
      id v6 = v5;
      goto LABEL_35;
    }
    if ((int)objc_msgSend(v5, "vcp_version") >= 70)
    {
      if ((int)MediaAnalysisLogLevel() >= 4)
      {
        int v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v7, v8))
        {
          __int16 v9 = [v3 localIdentifier];
          *(_DWORD *)long long buf = 138412546;
          os_log_type_t v41 = v9;
          __int16 v42 = 1024;
          unsigned int v43 = objc_msgSend(v5, "vcp_version");
          _os_log_impl((void *)&_mh_execute_header, v7, v8, "  [%@] Unknown analysis version %d; discarding",
            buf,
            0x12u);
        }
      }
LABEL_34:
      id v6 = 0;
      goto LABEL_35;
    }
    uint64_t v10 = MediaAnalysisTypesUpdatedSince(objc_msgSend(v5, "vcp_version"), v3);
    unint64_t v11 = (unint64_t)objc_msgSend(v5, "vcp_types");
    unint64_t v12 = (unint64_t)objc_msgSend(v5, "vcp_flags");
    uint64_t v13 = 62;
    if ((v10 & 0xC) == 0) {
      uint64_t v13 = 0;
    }
    if ((v10 & 0xC0) != 0) {
      uint64_t v14 = v13 | 0x3FFC0;
    }
    else {
      uint64_t v14 = v13;
    }
    objc_msgSend(v5, "vcp_quality");
    unint64_t v16 = v11 & ~v10;
    if (!v16) {
      goto LABEL_34;
    }
    double v17 = v15;
    unint64_t v18 = v12 & ~v14;
    if (objc_msgSend(v3, "vcp_isLivePhoto") && (VCPMAFullAnalysisTypesLivePhoto & v16) == 0
      || [v3 isVideo] && (VCPMAFullAnalysisTypesMovie & v16) == 0)
    {
      v18 &= ~0x20000000uLL;
    }
    uint64_t v34 = v16;
    os_log_type_t v19 = +[NSMutableDictionary dictionary];
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v20 = MediaAnalysisResultsKeysForAnalysisTypes(v34);
    unint64_t v33 = v18;
    id v21 = [v20 countByEnumeratingWithState:&v35 objects:v39 count:16];
    if (v21)
    {
      uint64_t v22 = *(void *)v36;
      do
      {
        for (unint64_t i = 0; i != v21; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v36 != v22) {
            objc_enumerationMutation(v20);
          }
          uint64_t v24 = *(void *)(*((void *)&v35 + 1) + 8 * i);
          int v25 = objc_msgSend(v5, "vcp_results");
          uint64_t v26 = [v25 objectForKey:v24];

          if (v26) {
            [v19 setObject:v26 forKey:v24];
          }
        }
        id v21 = [v20 countByEnumeratingWithState:&v35 objects:v39 count:16];
      }
      while (v21);
    }

    id v6 = +[NSMutableDictionary dictionary];
    [v6 setObject:&off_10022F0D0 forKey:@"version"];
    unsigned int v27 = objc_msgSend(v5, "vcp_dateModified");
    [v6 setObject:v27 forKey:@"dateModified"];

    uint64_t v28 = objc_msgSend(v5, "vcp_dateAnalyzed");
    [v6 setObject:v28 forKey:@"dateAnalyzed"];

    id v29 = +[NSNumber numberWithUnsignedLongLong:v34];
    [v6 setObject:v29 forKey:@"performedAnalysisTypes"];

    unsigned __int8 v30 = +[NSNumber numberWithUnsignedLongLong:v33];
    [v6 setObject:v30 forKey:@"flags"];

    [v6 setObject:v19 forKey:@"metadataRanges"];
    if ((int)objc_msgSend(v5, "vcp_version") >= 3 && v17 != -1.0)
    {
      os_log_type_t v31 = +[NSNumber numberWithDouble:v17];
      [v6 setObject:v31 forKey:@"quality"];
    }
  }
LABEL_35:

  return v6;
}

void sub_1000D643C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef VCPMAQoSDescription(int a1)
{
  if (a1 > 20)
  {
    switch(a1)
    {
      case 21:
        return @"Default";
      case 33:
        return @"UserInteractive";
      case 25:
        return @"UserInitiated";
    }
  }
  else
  {
    switch(a1)
    {
      case 0:
        return @"Unspecified";
      case 9:
        return @"Background";
      case 17:
        return @"Utility";
    }
  }
  return @"Unknown";
}

uint64_t VCPMADUnifiedBackgroundProcessing()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1002526E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1002526E0))
  {
    byte_1002526D8 = DeviceHasANE();
    __cxa_guard_release(&qword_1002526E0);
  }
  return byte_1002526D8;
}

void sub_1000D6600(_Unwind_Exception *a1)
{
}

float VCPPersonFaceVIPMatchingThreshold()
{
  return 0.5;
}

CFStringRef VCPVersionKeyForTask(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  CFStringRef result = 0;
  switch(v1)
  {
    case 0:
      CFStringRef result = @"MediaAnalysisVersion";
      break;
    case 1:
      CFStringRef result = @"SceneAnalysisVersion";
      break;
    case 2:
      CFStringRef result = @"FaceAnalysisVersion";
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
      return result;
    case 9:
      CFStringRef result = @"OCRAnalysisVersion";
      break;
    case 11:
      CFStringRef result = @"VisualSearchAnalysisVersion";
      break;
    default:
      CFStringRef result = 0;
      break;
  }
  return result;
}

CFStringRef VCPStartTimestampKeyForTask(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  CFStringRef result = 0;
  switch(v1)
  {
    case 0:
      CFStringRef result = @"LatestVersionTimeStamp";
      break;
    case 1:
      CFStringRef result = @"LatestSceneAnalysisVersionTimestamp";
      break;
    case 2:
      CFStringRef result = @"LatestFaceAnalysisVersionTimestamp";
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
      return result;
    case 9:
      CFStringRef result = @"LatestOCRAnalysisVersionTimestamp";
      break;
    case 11:
      CFStringRef result = @"LatestVisualSearchAnalysisVersionTimestamp";
      break;
    default:
      CFStringRef result = 0;
      break;
  }
  return result;
}

CFStringRef VCPCompleteTimestampKeyForTask(uint64_t a1, int a2)
{
  uint64_t v2 = a1 - 1;
  if (a2)
  {
    CFStringRef result = 0;
    switch(v2)
    {
      case 0:
        CFStringRef result = @"MediaAnalysisCompleteWithFailureTimestamp";
        break;
      case 1:
        CFStringRef result = @"SceneAnalysisCompleteWithFailureTimestamp";
        break;
      case 2:
        CFStringRef result = @"FaceAnalysisCompleteWithFailureTimestamp";
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
        return result;
      case 9:
        CFStringRef result = @"OCRAnalysisCompleteWithFailureTimestamp";
        break;
      case 11:
        CFStringRef result = @"VisualSearchAnalysisCompleteWithFailureTimestamp";
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
    CFStringRef result = 0;
    switch(v2)
    {
      case 0:
        CFStringRef result = @"MediaAnalysisCompleteTimestamp";
        break;
      case 1:
        CFStringRef result = @"SceneAnalysisCompleteTimestamp";
        break;
      case 2:
        CFStringRef result = @"FaceAnalysisCompleteTimestamp";
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
        return result;
      case 9:
        CFStringRef result = @"OCRAnalysisCompleteTimestamp";
        break;
      case 11:
        CFStringRef result = @"VisualSearchAnalysisCompleteTimestamp";
        break;
      default:
LABEL_6:
        CFStringRef result = 0;
        break;
    }
  }
  return result;
}

CFStringRef VCPPercentCompleteTimestampKeyForTask(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a1 - 1;
  if (a3)
  {
    CFStringRef result = 0;
    switch(v3)
    {
      case 0:
        CFStringRef v5 = @"MediaAnalysisComplete99WithFailureTimestamp";
        CFStringRef v6 = @"MediaAnalysisCompleteWithFailureTimestamp";
        CFStringRef v7 = @"MediaAnalysisComplete50WithFailureTimestamp";
        goto LABEL_28;
      case 1:
        CFStringRef v5 = @"SceneAnalysisComplete99WithFailureTimestamp";
        CFStringRef v6 = @"SceneAnalysisCompleteWithFailureTimestamp";
        CFStringRef v7 = @"SceneAnalysisComplete50WithFailureTimestamp";
        goto LABEL_28;
      case 2:
        CFStringRef v5 = @"FaceAnalysisComplete99WithFailureTimestamp";
        CFStringRef v6 = @"FaceAnalysisCompleteWithFailureTimestamp";
        CFStringRef v7 = @"FaceAnalysisComplete50WithFailureTimestamp";
        goto LABEL_28;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
        return result;
      case 9:
        CFStringRef v5 = @"OCRAnalysisComplete99WithFailureTimestamp";
        CFStringRef v6 = @"OCRAnalysisCompleteWithFailureTimestamp";
        CFStringRef v7 = @"OCRAnalysisComplete50WithFailureTimestamp";
        goto LABEL_28;
      case 11:
        CFStringRef v5 = @"VisualSearchAnalysisComplete99WithFailureTimestamp";
        CFStringRef v6 = @"VisualSearchAnalysisCompleteWithFailureTimestamp";
        CFStringRef v7 = @"VisualSearchAnalysisComplete50WithFailureTimestamp";
        goto LABEL_28;
      default:
        CFStringRef v5 = @"PECAnalysisComplete99WithFailureTimestamp";
        CFStringRef v8 = @"PECAnalysisCompleteWithFailureTimestamp";
        CFStringRef v9 = @"PECAnalysisComplete50WithFailureTimestamp";
        if (a2 != 50) {
          CFStringRef v9 = 0;
        }
        if (a2 != 90) {
          CFStringRef v8 = v9;
        }
        if (a2 != 99) {
          CFStringRef v5 = v8;
        }
        goto LABEL_19;
    }
  }
  else
  {
    CFStringRef result = 0;
    switch(v3)
    {
      case 0:
        CFStringRef v5 = @"MediaAnalysisComplete99Timestamp";
        CFStringRef v6 = @"MediaAnalysisCompleteTimestamp";
        CFStringRef v7 = @"MediaAnalysisComplete50Timestamp";
        goto LABEL_28;
      case 1:
        CFStringRef v5 = @"SceneAnalysisComplete99Timestamp";
        CFStringRef v6 = @"SceneAnalysisCompleteTimestamp";
        CFStringRef v7 = @"SceneAnalysisComplete50Timestamp";
        goto LABEL_28;
      case 2:
        CFStringRef v5 = @"FaceAnalysisComplete99Timestamp";
        CFStringRef v6 = @"FaceAnalysisCompleteTimestamp";
        CFStringRef v7 = @"FaceAnalysisComplete50Timestamp";
        goto LABEL_28;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
        return result;
      case 9:
        CFStringRef v5 = @"OCRAnalysisComplete99Timestamp";
        CFStringRef v6 = @"OCRAnalysisCompleteTimestamp";
        CFStringRef v7 = @"OCRAnalysisComplete50Timestamp";
        goto LABEL_28;
      case 11:
        CFStringRef v5 = @"VisualSearchAnalysisComplete99Timestamp";
        CFStringRef v6 = @"VisualSearchAnalysisCompleteTimestamp";
        CFStringRef v7 = @"VisualSearchAnalysisComplete50Timestamp";
LABEL_28:
        if (a2 != 50) {
          CFStringRef v7 = 0;
        }
        if (a2 != 90) {
          CFStringRef v6 = v7;
        }
        BOOL v12 = a2 == 99;
        break;
      default:
        CFStringRef v5 = @"PECAnalysisComplete99Timestamp";
        CFStringRef v10 = @"PECAnalysisCompleteTimestamp";
        CFStringRef v11 = @"PECAnalysisComplete50Timestamp";
        if (a2 != 50) {
          CFStringRef v11 = 0;
        }
        if (a2 != 90) {
          CFStringRef v10 = v11;
        }
        if (a2 != 99) {
          CFStringRef v5 = v10;
        }
LABEL_19:
        CFStringRef v6 = 0;
        BOOL v12 = 0;
        break;
    }
    if (v12) {
      return v5;
    }
    else {
      return v6;
    }
  }
}

CFStringRef VCPProgressPercentageKeyForTask(uint64_t a1, int a2)
{
  uint64_t v2 = a1 - 1;
  if (a2)
  {
    CFStringRef result = 0;
    switch(v2)
    {
      case 0:
        CFStringRef result = @"MediaAnalysisProgressPercentageWithFailure";
        break;
      case 1:
        CFStringRef result = @"SceneAnalysisProgressPercentageWithFailure";
        break;
      case 2:
        CFStringRef result = @"FaceAnalysisProgressPercentageWithFailure";
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
        return result;
      case 9:
        CFStringRef result = @"OCRAnalysisProgressPercentageWithFailure";
        break;
      case 11:
        CFStringRef result = @"VisualSearchAnalysisProgressPercentageWithFailure";
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
    CFStringRef result = 0;
    switch(v2)
    {
      case 0:
        CFStringRef result = @"MediaAnalysisProgressPercentage";
        break;
      case 1:
        CFStringRef result = @"SceneAnalysisProgressPercentage";
        break;
      case 2:
        CFStringRef result = @"FaceAnalysisProgressPercentage";
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
        return result;
      case 9:
        CFStringRef result = @"OCRAnalysisProgressPercentage";
        break;
      case 11:
        CFStringRef result = @"VisualSearchAnalysisProgressPercentage";
        break;
      default:
LABEL_6:
        CFStringRef result = 0;
        break;
    }
  }
  return result;
}

CFStringRef VCPBGSTCheckpointTimestampKeyForTask(uint64_t a1, int a2)
{
  uint64_t v2 = a1 - 1;
  if (a2)
  {
    CFStringRef result = 0;
    switch(v2)
    {
      case 0:
        CFStringRef result = @"MediaAnalysisCheckpointWithFailureReportedTimestamp";
        break;
      case 1:
        CFStringRef result = @"SceneAnalysisCheckpointWithFailureReportedTimestamp";
        break;
      case 2:
        CFStringRef result = @"FaceAnalysisCheckpointWithFailureReportedTimestamp";
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
        return result;
      case 9:
        CFStringRef result = @"OCRAnalysisCheckpointWithFailureReportedTimestamp";
        break;
      case 11:
        CFStringRef result = @"VisualSearchAnalysisCheckpointWithFailureReportedTimestamp";
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
    CFStringRef result = 0;
    switch(v2)
    {
      case 0:
        CFStringRef result = @"MediaAnalysisCheckpointReportedTimestamp";
        break;
      case 1:
        CFStringRef result = @"SceneAnalysisCheckpointReportedTimestamp";
        break;
      case 2:
        CFStringRef result = @"FaceAnalysisCheckpointReportedTimestamp";
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
        return result;
      case 9:
        CFStringRef result = @"OCRAnalysisCheckpointReportedTimestamp";
        break;
      case 11:
        CFStringRef result = @"VisualSearchAnalysisCheckpointReportedTimestamp";
        break;
      default:
LABEL_6:
        CFStringRef result = 0;
        break;
    }
  }
  return result;
}

CFStringRef VCPPhotosDatabaseSyncTimestampKeyForTask(uint64_t a1)
{
  if (a1 == 1) {
    return @"LatestMediaAnalysisPhotosDatabaseSyncTimestamp";
  }
  else {
    return 0;
  }
}

CFStringRef VCPRequestBGSTProgressReportKeyForTask(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  CFStringRef result = 0;
  switch(v1)
  {
    case 0:
      CFStringRef result = @"MediaAnalysisRequestBGSTProgressReport";
      break;
    case 1:
      CFStringRef result = @"SceneAnalysisRequestBGSTProgressReport";
      break;
    case 2:
      CFStringRef result = @"FaceAnalysisRequestBGSTProgressReport";
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
      return result;
    case 9:
      CFStringRef result = @"OCRAnalysisRequestBGSTProgressReport";
      break;
    case 11:
      CFStringRef result = @"VisualSearchAnalysisRequestBGSTProgressReport";
      break;
    default:
      CFStringRef result = 0;
      break;
  }
  return result;
}

CFStringRef VCPLastBGSTProgressReportAttemptKeyForTask(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  CFStringRef result = 0;
  switch(v1)
  {
    case 0:
      CFStringRef result = @"MediaAnalysisLastBGSTProgressReportAttempt";
      break;
    case 1:
      CFStringRef result = @"SceneAnalysisLastBGSTProgressReportAttempt";
      break;
    case 2:
      CFStringRef result = @"FaceAnalysisLastBGSTProgressReportAttempt";
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
      return result;
    case 9:
      CFStringRef result = @"OCRAnalysisLastBGSTProgressReportAttempt";
      break;
    case 11:
      CFStringRef result = @"VisualSearchAnalysisLastBGSTProgressReportAttempt";
      break;
    default:
      CFStringRef result = 0;
      break;
  }
  return result;
}

uint64_t MADCheckBackUpVersion(unint64_t a1)
{
  return (a1 < 0xB) & (0x40Eu >> a1);
}

double MADRetryBackoffTime(unint64_t a1)
{
  uint64_t v1 = 5;
  if (a1 < 5) {
    uint64_t v1 = a1;
  }
  return dbl_1001F21D0[v1];
}

id MediaAnalysisJSONStringFromObject(void *a1)
{
  uint64_t v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      uint64_t v2 = VCPLogInstance();
      os_log_type_t v3 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v2, v3))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, v3, "Converting dictionary to json data", buf, 2u);
      }
    }
    [v1 enumerateKeysAndObjectsUsingBlock:&stru_10021D358];
  }
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    id v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v4, v5))
    {
      *(_DWORD *)long long buf = 138412290;
      double v15 = v1;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Converting to json data %@", buf, 0xCu);
    }
  }
  if (+[NSJSONSerialization isValidJSONObject:v1])
  {
    id v13 = 0;
    CFStringRef v6 = +[NSJSONSerialization dataWithJSONObject:v1 options:1 error:&v13];
    CFStringRef v7 = v13;
    if (v6)
    {
      id v8 = [objc_alloc((Class)NSString) initWithData:v6 encoding:4];
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        CFStringRef v10 = VCPLogInstance();
        os_log_type_t v11 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v10, v11))
        {
          *(_DWORD *)long long buf = 138412290;
          double v15 = v7;
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error parsing JSON output: %@", buf, 0xCu);
        }
      }
      id v8 = 0;
    }
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() < 3)
    {
      id v8 = 0;
      goto LABEL_26;
    }
    CFStringRef v7 = VCPLogInstance();
    os_log_type_t v9 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v7, v9))
    {
      *(_DWORD *)long long buf = 138412290;
      double v15 = v1;
      _os_log_impl((void *)&_mh_execute_header, v7, v9, "Input is not valid JSON-able object - %@", buf, 0xCu);
    }
    id v8 = 0;
  }

LABEL_26:
  return v8;
}

void sub_1000D7320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D7360(id a1, id a2, id a3, BOOL *a4)
{
  id v5 = a2;
  id v6 = a3;
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    CFStringRef v7 = VCPLogInstance();
    os_log_type_t v8 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v7, v8))
    {
      int v11 = 138412290;
      id v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "-> key %@", (uint8_t *)&v11, 0xCu);
    }
  }
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    os_log_type_t v9 = VCPLogInstance();
    os_log_type_t v10 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v9, v10))
    {
      int v11 = 138412290;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "-> value %@", (uint8_t *)&v11, 0xCu);
    }
  }
}

void sub_1000D74A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef MADErrorStringFromCode(unint64_t a1)
{
  if (a1 > 0x63) {
    return @"Invalid";
  }
  else {
    return *(&off_10021D6E8 + a1);
  }
}

void sub_1000D76D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000D76F8(id a1)
{
  return 0;
}

id sub_1000D7700(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    (*(void (**)(void))(v1 + 16))();
  }
  id result = VCPIsRemoteIOSTask();
  if ((result & 1) == 0)
  {
    return +[VCPMADPECSingleRequestProcessingTask reschedule];
  }
  return result;
}

void sub_1000D77F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D788C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPMADPECSingleRequestProcessingTask;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1000D7A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D7D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D81F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1000D8574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D8C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1000D9054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D91BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D92F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D96B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000D9E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  _Unwind_Resume(a1);
}

void sub_1000D9FCC(uint64_t a1)
{
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id obj = *(id *)(a1 + 32);
  id v32 = [obj countByEnumeratingWithState:&v40 objects:v47 count:16];
  if (v32)
  {
    uint64_t v31 = *(void *)v41;
    os_log_type_t v27 = VCPLogToOSLogType[6];
    os_log_type_t v28 = VCPLogToOSLogType[4];
    os_log_type_t type = VCPLogToOSLogType[7];
    do
    {
      for (unint64_t i = 0; i != v32; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v41 != v31) {
          objc_enumerationMutation(obj);
        }
        uint64_t v1 = *(void **)(*((void *)&v40 + 1) + 8 * i);
        if ([v1 status] != -128)
        {
          if ([v1 status]) {
            [v1 setVersion:0x7FFFLL];
          }
          uint64_t v2 = [v1 asset];
          long long v35 = +[PHAssetChangeRequest changeRequestForAsset:v2];

          os_log_type_t v3 = [v1 result];
          BOOL v4 = [v3 count] == 0;

          if (!v4)
          {
            long long v38 = 0u;
            long long v39 = 0u;
            long long v36 = 0u;
            long long v37 = 0u;
            id v5 = [v1 result];
            id v6 = [v5 countByEnumeratingWithState:&v36 objects:v46 count:16];
            if (v6)
            {
              uint64_t v7 = *(void *)v37;
              do
              {
                for (j = 0; j != v6; j = (char *)j + 1)
                {
                  if (*(void *)v37 != v7) {
                    objc_enumerationMutation(v5);
                  }
                  os_log_type_t v9 = *(void **)(*((void *)&v36 + 1) + 8 * (void)j);
                  id v10 = [v9 integerValue];
                  int v11 = [v1 result];
                  id v12 = [v11 objectForKeyedSubscript:v9];
                  id v13 = +[NSSet setWithArray:v12];

                  LOWORD(v12) = (unsigned __int16)[v1 version];
                  uint64_t v14 = [v1 asset];
                  double v15 = [v14 adjustmentVersion];
                  [v35 setSceneClassifications:v13 ofType:v10 version:(__int16)v12 timestamp:v15];
                }
                id v6 = [v5 countByEnumeratingWithState:&v36 objects:v46 count:16];
              }
              while (v6);
            }
            goto LABEL_31;
          }
          if ([v1 version] == 0x7FFF)
          {
            if ((int)MediaAnalysisLogLevel() >= 7)
            {
              unint64_t v16 = VCPLogInstance();
              if (os_log_type_enabled(v16, type))
              {
                double v17 = [v1 asset];
                unint64_t v18 = [v17 localIdentifier];
                *(_DWORD *)long long buf = 138412290;
                uint64_t v45 = v18;
                _os_log_impl((void *)&_mh_execute_header, v16, type, "[PECSingleRequest][%@] Persisting failure version", buf, 0xCu);
              }
              goto LABEL_29;
            }
LABEL_30:
            signed __int16 v25 = (unsigned __int16)[v1 version];
            id v5 = [v1 asset];
            uint64_t v26 = [v5 adjustmentVersion];
            [v35 setSceneClassifications:0 ofType:5 version:v25 timestamp:v26];

LABEL_31:
            goto LABEL_32;
          }
          os_log_type_t v19 = [v1 result];
          BOOL v20 = v19 == 0;

          if (v20)
          {
            if ((int)MediaAnalysisLogLevel() < 6) {
              goto LABEL_30;
            }
            unint64_t v16 = VCPLogInstance();
            if (os_log_type_enabled(v16, v27))
            {
              uint64_t v23 = [v1 asset];
              uint64_t v24 = [v23 localIdentifier];
              *(_DWORD *)long long buf = 138412290;
              uint64_t v45 = v24;
              _os_log_impl((void *)&_mh_execute_header, v16, v27, "[PECSingleRequest][%@] Ineligible VI domains or no VI domains", buf, 0xCu);
            }
          }
          else
          {
            if ((int)MediaAnalysisLogLevel() < 4) {
              goto LABEL_30;
            }
            unint64_t v16 = VCPLogInstance();
            if (os_log_type_enabled(v16, v28))
            {
              id v21 = [v1 asset];
              uint64_t v22 = [v21 localIdentifier];
              *(_DWORD *)long long buf = 138412290;
              uint64_t v45 = v22;
              _os_log_impl((void *)&_mh_execute_header, v16, v28, "[PECSingleRequest][%@] VISearchResult had no CSUSearchableKnowledgeObjects", buf, 0xCu);
            }
          }
LABEL_29:

          goto LABEL_30;
        }
LABEL_32:
      }
      id v32 = [obj countByEnumeratingWithState:&v40 objects:v47 count:16];
    }
    while (v32);
  }
}

void sub_1000DA4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1000DA5D4(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_1000DA624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000DB8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,id a62,uint64_t a63)
{
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose((const void *)(v66 - 176), 8);

  sub_100004484(&a64);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DBC74(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000DBC84(uint64_t a1)
{
}

void sub_1000DBC8C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  int v11 = VCPSignPostLog();
  id v12 = v11;
  os_signpost_id_t v13 = *(void *)(a1 + 64);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LOWORD(v22) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_END, v13, "VIService_PECParsing", (const char *)&unk_1001F3BD3, (uint8_t *)&v22, 2u);
  }

  if (*(void *)(a1 + 72))
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  if (v10)
  {
    if ((int)MediaAnalysisLogLevel() >= 4)
    {
      uint64_t v14 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v14, v15))
      {
        unint64_t v16 = [*(id *)(a1 + 32) asset];
        double v17 = [v16 localIdentifier];
        int v22 = 138412546;
        uint64_t v23 = v17;
        __int16 v24 = 2112;
        id v25 = v10;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "[PECSingleRequest][%@] getEncryptedSearchDomainsWithVisualQuery failed (%@)", (uint8_t *)&v22, 0x16u);
      }
    }
    [*(id *)(a1 + 32) setStatus:4294967278];
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      unint64_t v18 = VCPLogInstance();
      os_log_type_t v19 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v18, v19))
      {
        BOOL v20 = [*(id *)(a1 + 32) asset];
        id v21 = [v20 localIdentifier];
        int v22 = 138412290;
        uint64_t v23 = v21;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "[PECSingleRequest][%@] getEncryptedSearchDomainsWithVisualQuery completed", (uint8_t *)&v22, 0xCu);
      }
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a3);
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 24));
}

void sub_1000DBF1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000DBF78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = VCPSignPostLog();
  id v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 64);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    LOWORD(v27) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "VIService_ServerSearchVISearch", (const char *)&unk_1001F3BD3, (uint8_t *)&v27, 2u);
  }

  if (*(void *)(a1 + 72))
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  if (v6)
  {
    if (MADIsPECUnsupportedDomainError(v6))
    {
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        id v10 = VCPLogInstance();
        os_log_type_t v11 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v10, v11))
        {
          id v12 = [*(id *)(a1 + 32) asset];
          os_signpost_id_t v13 = [v12 localIdentifier];
          uint64_t v14 = *(void *)(a1 + 40);
          int v27 = 138412546;
          os_log_type_t v28 = v13;
          __int16 v29 = 2112;
          uint64_t v30 = v14;
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "[PECSingleRequest][%@][%@] encryptedSearchWithParsedVisualQuery found unsupported encrypted search domain", (uint8_t *)&v27, 0x16u);
        }
      }
      [*(id *)(a1 + 32) setVersion:5];
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() >= 4)
      {
        int v22 = VCPLogInstance();
        os_log_type_t v23 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v22, v23))
        {
          __int16 v24 = [*(id *)(a1 + 32) asset];
          id v25 = [v24 localIdentifier];
          uint64_t v26 = *(void *)(a1 + 40);
          int v27 = 138412802;
          os_log_type_t v28 = v25;
          __int16 v29 = 2112;
          uint64_t v30 = v26;
          __int16 v31 = 2112;
          id v32 = v6;
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "[PECSingleRequest][%@][%@] encryptedSearchWithParsedVisualQuery failed (%@)", (uint8_t *)&v27, 0x20u);
        }
      }
      [*(id *)(a1 + 32) setStatus:4294967278];
    }
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      os_log_type_t v15 = VCPLogInstance();
      os_log_type_t v16 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v15, v16))
      {
        double v17 = [*(id *)(a1 + 32) asset];
        unint64_t v18 = [v17 localIdentifier];
        uint64_t v19 = *(void *)(a1 + 40);
        int v27 = 138412546;
        os_log_type_t v28 = v18;
        __int16 v29 = 2112;
        uint64_t v30 = v19;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "[PECSingleRequest][%@][%@] encryptedSearchWithParsedVisualQuery completed", (uint8_t *)&v27, 0x16u);
      }
    }
    [*(id *)(a1 + 32) setVersion:5];
    BOOL v20 = [*(id *)(*(void *)(a1 + 48) + 48) objectForKeyedSubscript:*(void *)(a1 + 40)];
    id v21 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", (char *)[v20 integerValue] + 1);
    [*(id *)(*(void *)(a1 + 48) + 48) setObject:v21 forKeyedSubscript:*(void *)(a1 + 40)];

    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v5];
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 24));
}

void sub_1000DC304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000DD5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27)
{
  _Unwind_Resume(a1);
}

void sub_1000DD9E0(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mediaanalysisd.MADScopedWatchdog", 0);
  uint64_t v2 = (void *)qword_1002526F0;
  qword_1002526F0 = (uint64_t)v1;
}

void sub_1000DDA20(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v2, v3))
    {
      v5[0] = 67109120;
      v5[1] = qword_1002526F8;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[MADScopedWatchdog] incrementing reference count %u", (uint8_t *)v5, 8u);
    }
  }
  if (!qword_1002526F8++) {
    [*(id *)(*(void *)(a1 + 32) + 8) enable];
  }
}

void sub_1000DDBA4(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v2, v3))
    {
      v4[0] = 67109120;
      v4[1] = qword_1002526F8;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[MADScopedWatchdog] decrementing reference count %u", (uint8_t *)v4, 8u);
    }
  }
  if (!--qword_1002526F8) {
    [*(id *)(*(void *)(a1 + 32) + 8) disable];
  }
}

void sub_1000DDDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000DDE00(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v4 code]);
}

void sub_1000DDE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000DDEFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000DE244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1000DE2D0(uint64_t a1, double a2)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2048;
      double v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Download progress: %.2f", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_1000DE3B0(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%@ Downloaded resource received", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_1000DE47C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      uint64_t v4 = VCPLogInstance();
      os_log_type_t v5 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        int v13 = 138412546;
        uint64_t v14 = v6;
        __int16 v15 = 2112;
        id v16 = v3;
        int v7 = "%@ Failed to download - %@";
        uint64_t v8 = v4;
        os_log_type_t v9 = v5;
        uint32_t v10 = 22;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, (uint8_t *)&v13, v10);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v11 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v11))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v13 = 138412290;
      uint64_t v14 = v12;
      int v7 = "%@ Download completed";
      uint64_t v8 = v4;
      os_log_type_t v9 = v11;
      uint32_t v10 = 12;
      goto LABEL_8;
    }
LABEL_9:
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 40) + 16));
}

void sub_1000DE5DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000DFE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,_Unwind_Exception *exception_objecta,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  _Unwind_Resume(a1);
}

id sub_1000E0234(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

void sub_1000E023C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = [a3 localIdentifier];
  objc_msgSend(v3, "addObject:");
}

void sub_1000E0294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1000E02A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

id sub_1000E02B4(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCanceled];
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = +[VCPWatchdog sharedWatchdog];
    [v2 pet];
  }
  return v1;
}

void sub_1000E0300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000E0310(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [*(id *)(a1 + 32) isCanceled];
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    os_log_type_t v5 = VCPLogInstance();
    os_log_type_t v6 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      [v3 fractionCompleted];
      double v9 = (float)(v8 * 100.0);
      CFStringRef v10 = @"NO";
      int v13 = 138412802;
      uint64_t v14 = v7;
      if (v4) {
        CFStringRef v10 = @"YES";
      }
      __int16 v15 = 2048;
      double v16 = v9;
      __int16 v17 = 2112;
      CFStringRef v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%@ Gallery updating - %.2f%%, cancelling: %@", (uint8_t *)&v13, 0x20u);
    }
  }
  if ((v4 & 1) == 0)
  {
    os_log_type_t v11 = +[VCPWatchdog sharedWatchdog];
    [v11 pet];
  }
  return v4 ^ 1;
}

void sub_1000E0464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000E0498(uint64_t a1, float a2)
{
  unsigned int v4 = [*(id *)(a1 + 32) isCanceled];
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    os_log_type_t v5 = VCPLogInstance();
    os_log_type_t v6 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      int v11 = 138412802;
      uint64_t v12 = v7;
      if (v4) {
        CFStringRef v8 = @"YES";
      }
      else {
        CFStringRef v8 = @"NO";
      }
      __int16 v13 = 2048;
      double v14 = a2 * 100.0;
      __int16 v15 = 2112;
      CFStringRef v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%@ VUWGallery plugin updating: %.2f%%, cancelling: %@", (uint8_t *)&v11, 0x20u);
    }
  }
  if ((v4 & 1) == 0)
  {
    double v9 = +[VCPWatchdog sharedWatchdog];
    [v9 pet];
  }
  return v4 ^ 1;
}

void sub_1000E05DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E0648(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("GDVUVisualUnderstandingService");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252700 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_1000CACAC();
    sub_1000E06A0();
  }
}

void sub_1000E06A0()
{
  v1[0] = 0;
  if (!qword_100252708)
  {
    v1[1] = _NSConcreteStackBlock;
    v1[2] = 3221225472;
    v1[3] = sub_1000E079C;
    v1[4] = &unk_100219838;
    v1[5] = v1;
    long long v2 = off_10021DB08;
    uint64_t v3 = 0;
    qword_100252708 = _sl_dlopen();
  }
  id v0 = (void *)v1[0];
  if (!qword_100252708)
  {
    id v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_1000E079C()
{
  uint64_t result = _sl_dlopen();
  qword_100252708 = result;
  return result;
}

VCPFaceAssetProcessingTask *sub_1000E0810(uint64_t a1)
{
  sub_1000E06A0();
  uint64_t result = (VCPFaceAssetProcessingTask *)objc_getClass("GDVUEntityRecognitionClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252710 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = (VCPFaceAssetProcessingTask *)sub_1000CAC84();
    return [(VCPFaceAssetProcessingTask *)v3 initWithAssets:v5 andProgressHandler:v6 andCompletionHandler:v7];
  }
  return result;
}

void sub_1000E09E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000E0A38(id a1)
{
  return 0;
}

void sub_1000E0ACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E0E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000E101C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E138C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E204C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27)
{
  _Unwind_Resume(a1);
}

id sub_1000E22AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) start];
}

void sub_1000E28C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1000E2B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E2BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E2E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000E320C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000E468C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  _Block_object_dispose((const void *)(v71 - 224), 8);
  _Block_object_dispose(&a69, 8);

  _Block_object_dispose((const void *)(v71 - 176), 8);
  sub_100004484((const void **)&STACK[0x218]);

  _Unwind_Resume(a1);
}

uint64_t sub_1000E4AE0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000E4AF0(uint64_t a1)
{
}

void sub_1000E4AF8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  int v11 = VCPSignPostLog();
  uint64_t v12 = v11;
  os_signpost_id_t v13 = *(void *)(a1 + 64);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LOWORD(v22) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_END, v13, "VIService_PECParsing", (const char *)&unk_1001F3BD3, (uint8_t *)&v22, 2u);
  }

  if (*(void *)(a1 + 72))
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  if (v10)
  {
    if ((int)MediaAnalysisLogLevel() >= 4)
    {
      double v14 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v14, v15))
      {
        CFStringRef v16 = [*(id *)(a1 + 32) asset];
        __int16 v17 = [v16 localIdentifier];
        int v22 = 138412546;
        os_log_type_t v23 = v17;
        __int16 v24 = 2112;
        id v25 = v10;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "[PEC][%@] getEncryptedSearchDomainsWithVisualQuery failed (%@)", (uint8_t *)&v22, 0x16u);
      }
    }
    [*(id *)(a1 + 32) setStatus:4294967278];
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      CFStringRef v18 = VCPLogInstance();
      os_log_type_t v19 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v18, v19))
      {
        BOOL v20 = [*(id *)(a1 + 32) asset];
        id v21 = [v20 localIdentifier];
        int v22 = 138412290;
        os_log_type_t v23 = v21;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "[PEC][%@] getEncryptedSearchDomainsWithVisualQuery completed", (uint8_t *)&v22, 0xCu);
      }
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a3);
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 48));
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 40) + 56));
}

void sub_1000E4D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E4DF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = VCPSignPostLog();
  id v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 64);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    LOWORD(v25) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "VIService_PECVISearch", (const char *)&unk_1001F3BD3, (uint8_t *)&v25, 2u);
  }

  if (*(void *)(a1 + 72))
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  if (v6)
  {
    if (MADIsPECUnsupportedDomainError(v6))
    {
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        id v10 = VCPLogInstance();
        os_log_type_t v11 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v10, v11))
        {
          uint64_t v12 = [*(id *)(a1 + 32) asset];
          os_signpost_id_t v13 = [v12 localIdentifier];
          uint64_t v14 = *(void *)(a1 + 40);
          int v25 = 138412546;
          uint64_t v26 = v13;
          __int16 v27 = 2112;
          uint64_t v28 = v14;
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "[PEC][%@][%@] encryptedSearchWithParsedVisualQuery found unsupported encrypted search domain", (uint8_t *)&v25, 0x16u);
        }
      }
      [*(id *)(a1 + 32) setVersion:5];
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() >= 4)
      {
        BOOL v20 = VCPLogInstance();
        os_log_type_t v21 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v20, v21))
        {
          int v22 = [*(id *)(a1 + 32) asset];
          os_log_type_t v23 = [v22 localIdentifier];
          uint64_t v24 = *(void *)(a1 + 40);
          int v25 = 138412802;
          uint64_t v26 = v23;
          __int16 v27 = 2112;
          uint64_t v28 = v24;
          __int16 v29 = 2112;
          id v30 = v6;
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "[PEC][%@][%@] encryptedSearchWithParsedVisualQuery failed (%@)", (uint8_t *)&v25, 0x20u);
        }
      }
      [*(id *)(a1 + 32) setStatus:4294967278];
    }
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      os_log_type_t v15 = VCPLogInstance();
      os_log_type_t v16 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v15, v16))
      {
        __int16 v17 = [*(id *)(a1 + 32) asset];
        CFStringRef v18 = [v17 localIdentifier];
        uint64_t v19 = *(void *)(a1 + 40);
        int v25 = 138412546;
        uint64_t v26 = v18;
        __int16 v27 = 2112;
        uint64_t v28 = v19;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "[PEC][%@][%@] encryptedSearchWithParsedVisualQuery completed", (uint8_t *)&v25, 0x16u);
      }
    }
    [*(id *)(a1 + 32) setVersion:5];
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v5];
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 48));
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 48) + 56));
}

void sub_1000E514C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E5514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1000E5CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1000E5E4C(uint64_t a1)
{
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id obj = *(id *)(*(void *)(a1 + 32) + 8);
  id v34 = [obj countByEnumeratingWithState:&v42 objects:v49 count:16];
  if (v34)
  {
    uint64_t v33 = *(void *)v43;
    os_log_type_t v30 = VCPLogToOSLogType[4];
    os_log_type_t type = VCPLogToOSLogType[7];
    *(void *)&long long v1 = 138412290;
    long long v29 = v1;
    do
    {
      for (unint64_t i = 0; i != v34; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v43 != v33) {
          objc_enumerationMutation(obj);
        }
        long long v2 = *(void **)(*((void *)&v42 + 1) + 8 * i);
        if ([v2 status] != -128)
        {
          if ([v2 status]) {
            [v2 setVersion:0x7FFFLL];
          }
          uint64_t v3 = objc_msgSend(v2, "asset", v29);
          long long v37 = +[PHAssetChangeRequest changeRequestForAsset:v3];

          SEL v4 = [v2 result];
          BOOL v5 = [v4 count] == 0;

          if (!v5)
          {
            long long v40 = 0u;
            long long v41 = 0u;
            long long v38 = 0u;
            long long v39 = 0u;
            id v6 = [v2 result];
            id v7 = [v6 countByEnumeratingWithState:&v38 objects:v48 count:16];
            if (v7)
            {
              uint64_t v8 = *(void *)v39;
              do
              {
                for (j = 0; j != v7; j = (char *)j + 1)
                {
                  if (*(void *)v39 != v8) {
                    objc_enumerationMutation(v6);
                  }
                  id v10 = *(void **)(*((void *)&v38 + 1) + 8 * (void)j);
                  id v11 = [v10 integerValue];
                  uint64_t v12 = [v2 result];
                  os_signpost_id_t v13 = [v12 objectForKeyedSubscript:v10];
                  uint64_t v14 = +[NSSet setWithArray:v13];

                  signed __int16 v15 = (unsigned __int16)[v2 version];
                  os_log_type_t v16 = [v2 asset];
                  __int16 v17 = [v16 adjustmentVersion];
                  [v37 setSceneClassifications:v14 ofType:v11 version:v15 timestamp:v17];
                }
                id v7 = [v6 countByEnumeratingWithState:&v38 objects:v48 count:16];
              }
              while (v7);
            }
            goto LABEL_31;
          }
          if ([v2 version] == 0x7FFF)
          {
            if ((int)MediaAnalysisLogLevel() >= 7)
            {
              CFStringRef v18 = VCPLogInstance();
              if (os_log_type_enabled(v18, type))
              {
                uint64_t v19 = [v2 asset];
                BOOL v20 = [v19 localIdentifier];
                *(_DWORD *)long long buf = v29;
                unsigned int v47 = v20;
                _os_log_impl((void *)&_mh_execute_header, v18, type, "[PEC][%@] Persisting failure version", buf, 0xCu);
              }
              goto LABEL_29;
            }
LABEL_30:
            signed __int16 v27 = (unsigned __int16)[v2 version];
            id v6 = [v2 asset];
            uint64_t v28 = [v6 adjustmentVersion];
            [v37 setSceneClassifications:0 ofType:5 version:v27 timestamp:v28];

LABEL_31:
            goto LABEL_32;
          }
          os_log_type_t v21 = [v2 result];
          BOOL v22 = v21 == 0;

          if (v22)
          {
            if ((int)MediaAnalysisLogLevel() < 4) {
              goto LABEL_30;
            }
            CFStringRef v18 = VCPLogInstance();
            if (os_log_type_enabled(v18, v30))
            {
              int v25 = [v2 asset];
              uint64_t v26 = [v25 localIdentifier];
              *(_DWORD *)long long buf = v29;
              unsigned int v47 = v26;
              _os_log_impl((void *)&_mh_execute_header, v18, v30, "[PEC][%@] Ineligible VI domains or no VI domains", buf, 0xCu);
            }
          }
          else
          {
            if ((int)MediaAnalysisLogLevel() < 4) {
              goto LABEL_30;
            }
            CFStringRef v18 = VCPLogInstance();
            if (os_log_type_enabled(v18, v30))
            {
              os_log_type_t v23 = [v2 asset];
              uint64_t v24 = [v23 localIdentifier];
              *(_DWORD *)long long buf = v29;
              unsigned int v47 = v24;
              _os_log_impl((void *)&_mh_execute_header, v18, v30, "[PEC][%@] VISearchResult had no CSUSearchableKnowledgeObjects", buf, 0xCu);
            }
          }
LABEL_29:

          goto LABEL_30;
        }
LABEL_32:
      }
      id v34 = [obj countByEnumeratingWithState:&v42 objects:v49 count:16];
    }
    while (v34);
  }
}

void sub_1000E6348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1000E6460(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_1000E64B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000E6740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1000E67A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && [v3 containsObject:MOSettingsGroupNameUserSafety])
  {
    id v5 = objc_alloc_init((Class)MOEffectiveSettingsStore);
    id v6 = [v5 userSafety];
    id v7 = [v6 scanningPolicy];
    [WeakRetained setScanningPolicy:v7];

    if ((int)MediaAnalysisLogLevel() >= 5)
    {
      uint64_t v8 = VCPLogInstance();
      os_log_type_t v9 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v8, v9))
      {
        id v10 = [WeakRetained scanningPolicy];
        int v11 = 138412290;
        uint64_t v12 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "[UserSafety] Updated scanning policy (%@)", (uint8_t *)&v11, 0xCu);
      }
    }
  }
}

void sub_1000E68FC(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1000E69DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

MADUserSafetySettings *__cdecl sub_1000E69F8(id a1)
{
  id v1 = objc_alloc_init(MADUserSafetySettings);
  return v1;
}

void sub_1000E6D9C(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);

  sub_100004484((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1000E6F38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E7064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  sub_100004484((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1000E730C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E75C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E8B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000E8B24(id a1)
{
  return 0;
}

void sub_1000E8BE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E8C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPLibraryProcessingTask;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1000E9020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E9424(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E9498(id a1, int a2)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    id v3 = VCPLogInstance();
    os_log_type_t v4 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v3, v4))
    {
      CFStringRef v5 = @"interrupted";
      if (!a2) {
        CFStringRef v5 = @"finished";
      }
      int v6 = 138412546;
      CFStringRef v7 = v5;
      __int16 v8 = 1024;
      int v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Pre Analysis %@ (%d)", (uint8_t *)&v6, 0x12u);
    }
  }
}

uint64_t sub_1000E9580(uint64_t a1, double a2)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    os_log_type_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      int v7 = 134217984;
      double v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Pre Analysis progress: %.2f%%", (uint8_t *)&v7, 0xCu);
    }
  }
  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 32) + 16))(a2 * 0.1);
}

id sub_1000E9670(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000E9678(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  if ([*(id *)(a1 + 32) isCancelled])
  {
    *a4 = 1;
  }
  else if ([v7 isReadyForAnalysis])
  {
    if ((int)MediaAnalysisLogLevel() >= 5)
    {
      double v8 = VCPLogInstance();
      os_log_type_t v9 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v8, v9))
      {
        id v10 = [v7 photoLibraryURL];
        int v11 = [v10 path];
        *(_DWORD *)long long buf = 138412290;
        long long v39 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Processing Library %@ for full analysis", buf, 0xCu);
      }
    }
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_1000E9AEC;
    v37[3] = &unk_100219D98;
    v37[4] = *(void *)(a1 + 32);
    uint64_t v12 = objc_retainBlock(v37);
    +[VCPAnalysisProgressQuery reportProgressForPhotoLibrary:v7 taskID:1 logMessage:@"Checking progress before task" cancelOrExtendTimeoutBlock:v12];
    id v13 = objc_alloc_init((Class)VCPTimeMeasurement);
    [v13 start];
    uint64_t v14 = +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:v7];
    signed __int16 v15 = [*(id *)(a1 + 32) createTaskBacklogForPhotoLibrary:v7 withDatabase:v14];
    id v16 = [v15 count];
    if (v16)
    {
      id v17 = [*(id *)(*(void *)(a1 + 32) + 16) count];
      signed __int16 v27 = _NSConcreteStackBlock;
      uint64_t v28 = 3221225472;
      long long v29 = sub_1000E9B48;
      os_log_type_t v30 = &unk_10021DC78;
      uint64_t v35 = *(void *)(a1 + 48);
      double v36 = 90.0 / (double)(unint64_t)v16 / (double)(unint64_t)v17;
      uint64_t v18 = *(void *)(a1 + 40);
      uint64_t v31 = *(void *)(a1 + 32);
      uint64_t v33 = v18;
      uint64_t v34 = a3;
      id v19 = v7;
      id v32 = v19;
      [v15 enumerateObjectsUsingBlock:&v27];
      BOOL v20 = +[VCPBackgroundProcessingMetrics sharedMetricsWithPhotoLibrary:v19];
      [v20 persist];

      [v14 flush];
      [v13 stop];
      [v13 elapsedTimeSeconds];
      BOOL v22 = +[NSString stringWithFormat:@"Checking progress after task (%.2f seconds)", v21, v27, v28, v29, v30, v31];
      +[VCPAnalysisProgressQuery reportProgressForPhotoLibrary:v19 taskID:1 logMessage:v22 cancelOrExtendTimeoutBlock:v12];
      MediaAnalysisDaemonReleaseSharedDataStores(v19);
    }
  }
  else if ((int)MediaAnalysisLogLevel() >= 5)
  {
    os_log_type_t v23 = VCPLogInstance();
    os_log_type_t v24 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v23, v24))
    {
      int v25 = [v7 photoLibraryURL];
      uint64_t v26 = [v25 path];
      *(_DWORD *)long long buf = 138412290;
      long long v39 = v26;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Photo Library is not ready for analysis (%@); skipping library",
        buf,
        0xCu);
    }
  }
}

void sub_1000E9A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000E9AEC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    long long v2 = +[VCPWatchdog sharedWatchdog];
    [v2 pet];
  }
  return v1;
}

void sub_1000E9B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E9B48(uint64_t a1, void *a2, unint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  double v8 = (double)*(unint64_t *)(a1 + 56) * *(double *)(a1 + 64) + 10.0 + (double)a3 * *(double *)(a1 + 72);
  (*(void (**)(double))(*(void *)(*(void *)(a1 + 32) + 32) + 16))(v8);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1000E9FB8;
  v22[3] = &unk_10021AD50;
  void v22[4] = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 72);
  *(double *)&void v22[5] = v8;
  v22[6] = v9;
  id v10 = objc_retainBlock(v22);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  _DWORD v21[2] = sub_1000EA0B4;
  v21[3] = &unk_100219D98;
  void v21[4] = *(void *)(a1 + 32);
  [v7 setCancel:v21];
  [v7 setProgressHandler:v10];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    int v11 = &VCPAnalyticsFieldUnifiedFullTaskTimestamp;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      int v11 = &VCPAnalyticsFieldResumePausedTaskTimestamp;
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        int v11 = &VCPAnalyticsFieldFailedAssetTaskTimestamp;
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          int v11 = &VCPAnalyticsFieldMediaTypeTaskTimestamp;
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            uint64_t v12 = 0;
            goto LABEL_13;
          }
          int v11 = &VCPAnalyticsFieldResultsSynchronizationTaskTimestamp;
        }
      }
    }
  }
  uint64_t v12 = *v11;
  if (v12)
  {
    id v13 = +[VCPMADCoreAnalyticsManager sharedManager];
    uint64_t v14 = +[VCPLogManager dateFormatter];
    signed __int16 v15 = +[NSDate now];
    id v16 = [v14 stringFromDate:v15];
    [v13 setValue:v16 forField:v12 andEvent:@"com.apple.mediaanalysisd.FullAnalysisRunSession"];
  }
LABEL_13:
  [v7 start];
  if ([v7 error] == -128)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v7 error];
    *a4 = 1;
  }
  else if ([v7 error])
  {
    if ((int)MediaAnalysisLogLevel() >= 5)
    {
      id v17 = VCPLogInstance();
      os_log_type_t v18 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v17, v18))
      {
        id v19 = [*(id *)(a1 + 40) photoLibraryURL];
        BOOL v20 = [v19 path];
        *(_DWORD *)long long buf = 138412290;
        os_log_type_t v24 = v20;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Error analyzing library %@", buf, 0xCu);
      }
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = -18;
  }
}

void sub_1000E9F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000E9FB8(uint64_t a1, double a2)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    os_log_type_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      int v7 = 134217984;
      double v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Media Analysis task progress: %.2f%%", (uint8_t *)&v7, 0xCu);
    }
  }
  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 32) + 16))(*(double *)(a1 + 40) + *(double *)(a1 + 48) * a2 / 100.0);
}

id sub_1000EA0B4(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000EA1B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EA234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EA550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EA7D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EAA88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EABB0()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  id v1 = (void *)qword_100252718;
  qword_100252718 = (uint64_t)v0;
}

uint64_t sub_1000EB1F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000EB334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000EB368(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v4 code]);
}

void sub_1000EB3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000EB548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

id sub_1000EB57C(uint64_t a1, double a2)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    id v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      int v6 = [(id)objc_opt_class() name];
      int v8 = 138412546;
      uint64_t v9 = v6;
      __int16 v10 = 2048;
      double v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@] Pre Analysis progress: %.2f%%", (uint8_t *)&v8, 0x16u);
    }
  }
  return [*(id *)(a1 + 40) setCompletedUnitCount:(uint64_t)a2];
}

void sub_1000EB67C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EB694(id a1, int a2)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    id v3 = VCPLogInstance();
    os_log_type_t v4 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v3, v4))
    {
      CFStringRef v5 = @"interrupted";
      if (!a2) {
        CFStringRef v5 = @"finished";
      }
      int v6 = 138412546;
      CFStringRef v7 = v5;
      __int16 v8 = 1024;
      int v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Pre Analysis %@ (%d)", (uint8_t *)&v6, 0x12u);
    }
  }
}

id sub_1000EB77C(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

void sub_1000EBC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1000EC2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1000ECA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1000ED174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1000ED69C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000ED758(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) cancelBlock];
  if (v2)
  {
    id v3 = (void *)v2;
    os_log_type_t v4 = [*(id *)(a1 + 32) cancelBlock];
    char v5 = v4[2]();

    if (v5) {
      return 1;
    }
  }
  CFStringRef v7 = +[VCPWatchdog sharedWatchdog];
  [v7 pet];

  return 0;
}

void sub_1000ED7E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EE060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  _Unwind_Resume(a1);
}

void sub_1000EE1BC(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      os_log_type_t v4 = [(id)objc_opt_class() name];
      [*(id *)(a1 + 40) fractionCompleted];
      int v8 = 138412546;
      int v9 = v4;
      __int16 v10 = 2048;
      double v11 = v5 * 100.0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%@] Progress: %0.2f%%", (uint8_t *)&v8, 0x16u);
    }
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 36);
  if (v6)
  {
    [*(id *)(a1 + 40) fractionCompleted];
    (*(void (**)(uint64_t, double))(v6 + 16))(v6, v7 * 100.0);
  }
}

void sub_1000EE2F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EE5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  sub_100004484((const void **)va);
  sub_100004484((const void **)(v6 - 40));

  _Unwind_Resume(a1);
}

void sub_1000EE73C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EEB7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

VIService *__cdecl sub_1000EEC64(id a1)
{
  id v1 = objc_alloc_init((Class)VIService);
  return (VIService *)v1;
}

void sub_1000EF288(_Unwind_Exception *a1)
{
  double v7 = v6;

  _Unwind_Resume(a1);
}

SCMLHandler *__cdecl sub_1000EF308(id a1)
{
  id v1 = objc_alloc((Class)SCMLHandler);
  uint64_t v15 = SCMLUseAnyAvailableDevice;
  id v16 = &__kCFBooleanTrue;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
  id v10 = 0;
  id v3 = [v1 initWithOptions:v2 error:&v10];
  id v4 = v10;

  if (v4 && (int)MediaAnalysisLogLevel() >= 3)
  {
    double v5 = VCPLogInstance();
    os_log_type_t v6 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (id)objc_opt_class();
      int v8 = [v4 description];
      *(_DWORD *)long long buf = 138412546;
      id v12 = v7;
      __int16 v13 = 2112;
      uint64_t v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "[VCPMADSceneLibraryProcessingTask] Failed to create %@: %@", buf, 0x16u);
    }
  }

  return (SCMLHandler *)v3;
}

void sub_1000EF494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EF57C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EF5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  id v10 = v9;

  a9.super_class = (Class)VCPMADSceneLibraryProcessingTask;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1000EFAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000EFB40(uint64_t a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v7;
    do
    {
      id v4 = 0;
      do
      {
        if (*(void *)v7 != v3) {
          objc_enumerationMutation(v1);
        }
        double v5 = +[PHAssetChangeRequest changeRequestForAsset:](PHAssetChangeRequest, "changeRequestForAsset:", *(void *)(*((void *)&v6 + 1) + 8 * (void)v4), (void)v6);
        [v5 setImageEmbeddingVersion:70];

        id v4 = (char *)v4 + 1;
      }
      while (v2 != v4);
      id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v2);
  }
}

void sub_1000EFC50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F06B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_1000F10C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,void *a24,uint64_t a25,void *a26,void *a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_1000F1224(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_1000F1274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000F13EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F236C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  os_log_type_t v24 = v22;
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1000F23C4(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    id v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)long long v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[BG Service] XPC connection interrupted", v6, 2u);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  double v5 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained handleLostConnection];
  }
}

void sub_1000F246C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F247C(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    id v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)long long v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[BG Service] XPC connection invalidated", v6, 2u);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  double v5 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained handleLostConnection];
  }
}

void sub_1000F2524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F258C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F262C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1000F27D8(id a1)
{
  uint32_t v1 = notify_register_check((const char *)[@"com.apple.mediaanalysisd.serviceProcessID" UTF8String], &dword_100252730);
  int v2 = MediaAnalysisLogLevel();
  if (v1)
  {
    if (v2 < 3) {
      return;
    }
    os_log_type_t v3 = VCPLogInstance();
    os_log_type_t v4 = VCPLogToOSLogType[3];
    if (!os_log_type_enabled(v3, v4)) {
      goto LABEL_9;
    }
    int v9 = 67109120;
    int v10 = v1;
    double v5 = "[BG Service] Failed to register for service pid notify token (%d)";
    long long v6 = v3;
    os_log_type_t v7 = v4;
    goto LABEL_8;
  }
  if (v2 < 7) {
    return;
  }
  os_log_type_t v3 = VCPLogInstance();
  os_log_type_t v8 = VCPLogToOSLogType[7];
  if (os_log_type_enabled(v3, v8))
  {
    int v9 = 67109120;
    int v10 = dword_100252730;
    double v5 = "[BG Service] Register service pid notification token(%d)";
    long long v6 = v3;
    os_log_type_t v7 = v8;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v6, v7, v5, (uint8_t *)&v9, 8u);
  }
LABEL_9:
}

void sub_1000F375C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&STACK[0x200], 8);
  _Block_object_dispose((const void *)(v73 - 176), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1000F3990(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000F39A0(uint64_t a1)
{
}

void sub_1000F39A8(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    int v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)os_log_type_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[BG Service] Updating scheduling history session log", v4, 2u);
    }
  }
  VCPCoreAnalyticsSessionLogDatabaseUpdate(*(void *)(a1 + 40), *(void **)(a1 + 32), 0, -1.0);
}

void sub_1000F3A44(uint64_t a1, uint64_t a2)
{
  [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) destroy];
  if (!a2)
  {
    int v10 = [*(id *)(*(void *)(a1 + 32) + 8) remoteObjectProxy];
    [v10 updateProgress:100.0];

    if ((int)MediaAnalysisLogLevel() < 5)
    {
      long long v6 = 0;
      goto LABEL_16;
    }
    os_log_type_t v7 = VCPLogInstance();
    os_log_type_t v11 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v7, v11))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v11, "[BG Service] Processing completed", buf, 2u);
    }
    long long v6 = 0;
    goto LABEL_14;
  }
  if (a2 == -128)
  {
    NSErrorUserInfoKey v21 = NSLocalizedDescriptionKey;
    os_log_type_t v4 = +[NSString stringWithFormat:@"[BG Service] Processing canceled"];
    BOOL v22 = v4;
    double v5 = +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
    long long v6 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-128 userInfo:v5];

    if ((int)MediaAnalysisLogLevel() >= 5)
    {
      os_log_type_t v7 = VCPLogInstance();
      os_log_type_t v8 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v7, v8))
      {
        *(_WORD *)long long buf = 0;
        int v9 = "[BG Service] Processing canceled";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v7, v8, v9, buf, 2u);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
  }
  else
  {
    NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
    id v12 = +[NSString stringWithFormat:@"[BG Service] Processing failed (%d)", a2];
    BOOL v20 = v12;
    __int16 v13 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
    long long v6 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-128 userInfo:v13];

    if ((int)MediaAnalysisLogLevel() >= 4)
    {
      os_log_type_t v7 = VCPLogInstance();
      os_log_type_t v8 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v7, v8))
      {
        *(_WORD *)long long buf = 0;
        int v9 = "[BG Service] Processing failed";
        goto LABEL_13;
      }
LABEL_14:
    }
  }
LABEL_16:
  [*(id *)(a1 + 40) timeIntervalSinceNow];
  double v15 = v14;
  [*(id *)(a1 + 48) destroy];
  double v16 = -v15;
  VCPCoreAnalyticsSessionLogDatabaseUpdate(*(void *)(a1 + 72), *(void **)(a1 + 40), a2, v16);
  VCPCoreAnalyticsReportEventDasScheduling(*(void *)(a1 + 72), a2, v16);
  VCPCoreAnalyticsSendAllAnalysisSession();
  id v17 = +[VCPMADQoSManager sharedManager];
  [v17 disable];

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000F3D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F3E14(uint64_t a1, int a2, double a3)
{
  atomic_store(*(unint64_t *)&a3, (unint64_t *)(*(void *)(a1 + 32) + 24));
  if (a2)
  {
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      os_log_type_t v4 = VCPLogInstance();
      os_log_type_t v5 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v4, v5))
      {
        *(_WORD *)int v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "[BG Service] Updating scheduling history session log", v9, 2u);
      }
    }
    VCPCoreAnalyticsSessionLogDatabaseUpdate(*(void *)(a1 + 56), *(void **)(a1 + 40), 0, -1.0);
    uint64_t v6 = +[NSDate now];
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    os_log_type_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
}

BOOL sub_1000F3EF4(id a1)
{
  return 0;
}

BOOL sub_1000F3EFC(id a1)
{
  return 0;
}

uint64_t sub_1000F3F04(uint64_t result, double a2)
{
  return result;
}

BOOL sub_1000F3F20(id a1)
{
  return 0;
}

uint64_t sub_1000F3F28(uint64_t result, double a2)
{
  return result;
}

BOOL sub_1000F3F44(id a1)
{
  return 0;
}

uint64_t sub_1000F3F4C(uint64_t result, double a2)
{
  return result;
}

BOOL sub_1000F3F68(id a1)
{
  return 0;
}

BOOL sub_1000F3F70(id a1)
{
  return 0;
}

BOOL sub_1000F3F78(id a1)
{
  return 0;
}

uint64_t sub_1000F3F80(uint64_t result, double a2)
{
  return result;
}

BOOL sub_1000F3F9C(id a1)
{
  return 0;
}

uint64_t sub_1000F3FA4(uint64_t result, double a2)
{
  return result;
}

void sub_1000F3FC0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v4 code]);
}

void sub_1000F4020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000F4034(id a1)
{
  return 0;
}

BOOL sub_1000F403C(id a1)
{
  return 0;
}

uint64_t sub_1000F4044(uint64_t result, double a2)
{
  return result;
}

uint64_t sub_1000F4060(uint64_t result, double a2)
{
  return result;
}

BOOL sub_1000F407C(id a1)
{
  return 0;
}

void sub_1000F4084(uint64_t a1)
{
  int v2 = [*(id *)(*(void *)(a1 + 32) + 8) remoteObjectProxy];
  double v3 = COERCE_DOUBLE(atomic_load((unint64_t *)(*(void *)(a1 + 32) + 24)));
  id v4 = v2;
  [v2 updateProgress:v3];
}

void sub_1000F40F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000F410C(uint64_t a1)
{
  id v2 = +[VCPMADTaskScheduler sharedInstance];
  atomic_store([v2 addForegroundTask:*(void *)(a1 + 40) withQoS:17], (unsigned int *)(*(void *)(a1 + 32) + 16));
}

void sub_1000F417C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000F42AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F4368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000F559C(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(void, double))(*(void *)(*(void *)(a1 + 32) + 32) + 16))(*(void *)(*(void *)(a1 + 32) + 32), *(double *)(a1 + 40) + a2 / *(double *)(a1 + 48));
}

id sub_1000F55C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

uint64_t sub_1000F55D4(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(void, double))(*(void *)(*(void *)(a1 + 32) + 32) + 16))(*(void *)(*(void *)(a1 + 32) + 32), *(double *)(a1 + 40) + a2 / *(double *)(a1 + 48));
}

id sub_1000F5600(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

uint64_t sub_1000F560C(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(void, double))(*(void *)(*(void *)(a1 + 32) + 32) + 16))(*(void *)(*(void *)(a1 + 32) + 32), *(double *)(a1 + 40) + a2 / *(double *)(a1 + 48));
}

id sub_1000F5638(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

uint64_t sub_1000F5644(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(void, double))(*(void *)(*(void *)(a1 + 32) + 32) + 16))(*(void *)(*(void *)(a1 + 32) + 32), *(double *)(a1 + 40) + a2 / *(double *)(a1 + 48));
}

id sub_1000F5670(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

uint64_t sub_1000F5678(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(void, double))(*(void *)(*(void *)(a1 + 32) + 32) + 16))(*(void *)(*(void *)(a1 + 32) + 32), *(double *)(a1 + 40) + a2 / *(double *)(a1 + 48));
}

id sub_1000F56A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

void sub_1000F580C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F58B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F5B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F5BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F5ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000F62C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F65DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F69D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000F78FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,const void *a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_100004484(&a57);
  _Block_object_dispose((const void *)(v69 - 192), 8);

  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1000F7BD8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000F7BE8(uint64_t a1)
{
}

void sub_1000F7BF0(uint64_t a1)
{
  id v2 = VCPSignPostLog();
  os_signpost_id_t v3 = os_signpost_id_generate(v2);

  id v4 = VCPSignPostLog();
  os_log_type_t v5 = v4;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_BEGIN, v3, "VCPStickerGating", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  int v24 = 0;
  uint64_t v6 = [*(id *)(a1 + 32) asset];
  BOOL v7 = ((unint64_t)[v6 mediaSubtypes] & 4) == 0;

  if (v7)
  {
    double v8 = 1.0;
    double v9 = 0.0;
    double v10 = 0.0;
    double v11 = 1.0;
  }
  else
  {
    [*(id *)(a1 + 40) _computeRegionOfInterest:*(void *)(a1 + 48) orientation:*(unsigned int *)(a1 + 56)];
    double v9 = v12;
    double v10 = v13;
    double v8 = v14;
    double v11 = v15;
  }
  v27.origin.double x = v9;
  v27.origin.double y = v10;
  v27.size.double width = v8;
  v27.size.double height = v11;
  if (CGRectIsNull(v27)) {
    uint64_t v16 = 4294967278;
  }
  else {
    uint64_t v16 = (uint64_t)objc_msgSend(*(id *)(a1 + 40), "_calculateStickerScore:orientation:regionOfInterest:stickerScore:", *(void *)(a1 + 48), *(unsigned int *)(a1 + 56), &v24, v9, v10, v8, v11);
  }
  [*(id *)(a1 + 32) setStickerStatus:v16];
  if ([*(id *)(a1 + 32) stickerStatus])
  {
    if ((int)MediaAnalysisLogLevel() >= 4)
    {
      os_log_type_t v18 = VCPLogInstance();
      os_log_type_t v19 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v18, v19))
      {
        BOOL v20 = [*(id *)(a1 + 32) asset];
        NSErrorUserInfoKey v21 = [v20 localIdentifier];
        *(_DWORD *)long long buf = 138412290;
        uint64_t v26 = v21;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "[VisualSearch][%@] Processing failed (StaticStickerScore)", buf, 0xCu);
      }
    }
  }
  else
  {
    LODWORD(v17) = v24;
    [*(id *)(a1 + 32) setStickerScore:v17];
    [*(id *)(a1 + 32) setStickerAlgorithmVersion:1];
  }
  BOOL v22 = VCPSignPostLog();
  os_log_type_t v23 = v22;
  if (v3 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v22))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_INTERVAL_END, v3, "VCPStickerGating", (const char *)&unk_1001F3BD3, buf, 2u);
  }
}

void sub_1000F7E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFTypeRef sub_1000F7EB8(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

const void **sub_1000F7ED0(uint64_t a1)
{
  return sub_100004484((const void **)(a1 + 48));
}

void sub_1000F7ED8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v40 = a2;
  id v41 = a3;
  id v42 = a4;
  BOOL v7 = VCPSignPostLog();
  double v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 80);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "VIService_VisualSearchGating", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  if (*(void *)(a1 + 88))
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  if (v42)
  {
    if ((int)MediaAnalysisLogLevel() >= 4)
    {
      double v10 = VCPLogInstance();
      os_log_type_t v11 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v10, v11))
      {
        double v12 = [*(id *)(a1 + 32) asset];
        double v13 = [v12 localIdentifier];
        *(_DWORD *)long long buf = 138412546;
        id v57 = v13;
        __int16 v58 = 2112;
        id v59 = v42;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "[VisualSearch][%@] Processing failed (%@)", buf, 0x16u);
      }
    }
    objc_msgSend(*(id *)(a1 + 32), "setVisualSearchStatus:", 4294967278, v40);
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      double v14 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = [*(id *)(a1 + 32) asset];
        double v17 = [v16 localIdentifier];
        *(_DWORD *)long long buf = 138412290;
        id v57 = v17;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "[VisualSearch][%@] Processing completed", buf, 0xCu);
      }
    }
    [*(id *)(a1 + 32) setVersion:VCPPhotosVisualSearchAlgorithmVersion()];
    [*(id *)(a1 + 32) setResult:v41];
    ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    id v18 = objc_alloc_init((Class)NSMutableSet);
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    os_log_type_t v19 = [v40 visualUnderstanding];
    id obj = [v19 imageRegions];

    id v20 = [obj countByEnumeratingWithState:&v52 objects:v62 count:16];
    if (v20)
    {
      uint64_t v21 = *(void *)v53;
      do
      {
        for (unint64_t i = 0; i != v20; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v53 != v21) {
            objc_enumerationMutation(obj);
          }
          os_log_type_t v23 = *(void **)(*((void *)&v52 + 1) + 8 * i);
          long long v48 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          int v24 = objc_msgSend(v23, "domainInfo", v40);
          id v25 = [v24 countByEnumeratingWithState:&v48 objects:v61 count:16];
          if (v25)
          {
            uint64_t v26 = *(void *)v49;
            do
            {
              for (j = 0; j != v25; j = (char *)j + 1)
              {
                if (*(void *)v49 != v26) {
                  objc_enumerationMutation(v24);
                }
                uint64_t v28 = [*(id *)(*((void *)&v48 + 1) + 8 * (void)j) domainKey];
                [v18 addObject:v28];
              }
              id v25 = [v24 countByEnumeratingWithState:&v48 objects:v61 count:16];
            }
            while (v25);
          }
        }
        id v20 = [obj countByEnumeratingWithState:&v52 objects:v62 count:16];
      }
      while (v20);
    }

    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    id v29 = v18;
    id v30 = [v29 countByEnumeratingWithState:&v44 objects:v60 count:16];
    if (v30)
    {
      uint64_t v31 = *(void *)v45;
      do
      {
        for (k = 0; k != v30; k = (char *)k + 1)
        {
          if (*(void *)v45 != v31) {
            objc_enumerationMutation(v29);
          }
          uint64_t v33 = *(void *)(*((void *)&v44 + 1) + 8 * (void)k);
          uint64_t v34 = objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), "objectForKeyedSubscript:", v33, v40);
          uint64_t v35 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", (char *)[v34 integerValue] + 1);
          [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setObject:v35 forKeyedSubscript:v33];
        }
        id v30 = [v29 countByEnumeratingWithState:&v44 objects:v60 count:16];
      }
      while (v30);
    }

    if ([v29 count]) {
      ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
    }
    if ((MADAnyEncryptedSearchDomains(v29) & 1) == 0)
    {
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        double v36 = VCPLogInstance();
        os_log_type_t v37 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v36, v37))
        {
          long long v38 = [*(id *)(a1 + 32) asset];
          long long v39 = [v38 localIdentifier];
          *(_DWORD *)long long buf = 138412290;
          id v57 = v39;
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "[VisualSearch][%@] No encryptedSearchDomains, setting PEC version", buf, 0xCu);
        }
      }
      objc_msgSend(*(id *)(a1 + 32), "setPecVersion:", 5, v40);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1000F8498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1000F8D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1000F8E9C(uint64_t a1)
{
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id obj = *(id *)(*(void *)(a1 + 32) + 8);
  id v1 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v1)
  {
    uint64_t v2 = *(void *)v30;
    do
    {
      os_signpost_id_t v3 = 0;
      do
      {
        if (*(void *)v30 != v2) {
          objc_enumerationMutation(obj);
        }
        id v4 = *(void **)(*((void *)&v29 + 1) + 8 * (void)v3);
        if (![v4 status])
        {
          uint64_t v6 = [v4 asset];
          BOOL v7 = +[PHAssetChangeRequest changeRequestForAsset:v6];

          if (([v4 analysisTypes] & 2) != 0
            && ![v4 visualSearchStatus])
          {
            id v18 = [v4 result];
            signed int v19 = [v4 version];
            id v20 = [v4 asset];
            uint64_t v21 = [v20 adjustmentVersion];
            [v7 setVisualSearchData:v18 algorithmVersion:v19 adjustmentVersion:v21];

            char v8 = 1;
          }
          else
          {
            char v8 = 0;
          }
          if (([v4 analysisTypes] & 4) == 0
            || [v4 stickerStatus]
            || [v4 stickerAlgorithmVersion] == -1)
          {
            if ((v8 & 1) == 0)
            {
              char v9 = 0;
              goto LABEL_14;
            }
          }
          else
          {
            [v4 stickerScore];
            int v23 = v22;
            signed int v24 = [v4 stickerAlgorithmVersion];
            LODWORD(v25) = v23;
            [v7 setStickerConfidenceScore:v24 stickerAlgorithmVersion:v25];
            if (v8) {
              goto LABEL_21;
            }
            char v9 = 1;
LABEL_14:
            uint64_t v28 = [v4 asset];
            if (objc_msgSend(v28, "vcp_needsVisualSearchProcessing"))
            {
              double v10 = v28;
              goto LABEL_23;
            }
            if (v9)
            {

LABEL_21:
              double v13 = [v4 asset];
              unsigned int v14 = objc_msgSend(v13, "mad_isEligibleForComputeSync");

              if (v14)
              {
                double v10 = [v4 asset];
                objc_msgSend(v7, "setLocalAnalysisStage:", objc_msgSend(v10, "mad_analysisStageAfterCompletingAnalysis:", 12));
LABEL_23:
              }
LABEL_24:
              if ((int)[v4 pecVersion] >= 1)
              {
                signed __int16 v15 = (unsigned __int16)[v4 pecVersion];
                uint64_t v16 = [v4 asset];
                double v17 = [v16 adjustmentVersion];
                [v7 setSceneClassifications:0 ofType:5 version:v15 timestamp:v17];
              }
              goto LABEL_27;
            }
          }
          os_log_type_t v11 = [v4 asset];
          unsigned __int8 v12 = objc_msgSend(v11, "vcp_needsStickerGatingProcessing");

          if ((v8 & 1) == 0) {
          if ((v12 & 1) == 0)
          }
            goto LABEL_21;
          goto LABEL_24;
        }
LABEL_27:
        os_signpost_id_t v3 = (char *)v3 + 1;
      }
      while (v1 != v3);
      id v26 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
      id v1 = v26;
    }
    while (v26);
  }
}

void sub_1000F91D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1000F9290(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_1000F92E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000F944C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F9540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F98D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FB23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24)
{
  sub_100004484((const void **)&STACK[0x208]);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FB720(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000FB730(uint64_t a1)
{
}

intptr_t sub_1000FB738(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8);
  id obj = *(id *)(v4 + 40);
  unsigned __int8 v5 = [v2 performRequests:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v5;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1000FB7AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [v6 doubleValue];
  if (v7 >= 0.00999999978)
  {
    char v8 = VCPSpecialLabelToExtendedSceneClassificationID(v5);
    char v9 = v8;
    if (v8)
    {
      id v10 = [v8 longLongValue];
      [v6 doubleValue];
      os_log_type_t v11 = +[PHSceneClassification vcp_instanceWithExtendedSceneIdentifier:confidence:](PHSceneClassification, "vcp_instanceWithExtendedSceneIdentifier:confidence:", v10);
      if (v11) {
        [*(id *)(a1 + 32) addObject:v11];
      }
    }
    else if ((int)MediaAnalysisLogLevel() >= 3)
    {
      unsigned __int8 v12 = VCPLogInstance();
      os_log_type_t v13 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v12, v13))
      {
        unsigned int v14 = [*(id *)(a1 + 40) logPrefix];
        int v15 = 138412546;
        uint64_t v16 = v14;
        __int16 v17 = 2112;
        id v18 = v5;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%@][Process] Unsupported observation label in VCPSpecialLabelToExtendedSceneClassificationID %@", (uint8_t *)&v15, 0x16u);
      }
    }
  }
}

void sub_1000FB928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FBD90(_Unwind_Exception *a1)
{
  double v7 = v4;

  _Unwind_Resume(a1);
}

void sub_1000FBF2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FC3E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000FC450(uint64_t a1)
{
  return [*(id *)(a1 + 32) processWithImageBackboneAnalyzer:*(void *)(*(void *)(a1 + 40) + 8) commSafetyHandler:*(void *)(*(void *)(a1 + 40) + 48) requestQueue:*(void *)(*(void *)(a1 + 40) + 40) cancelBlock:*(void *)(*(void *)(a1 + 40) + 56)];
}

void sub_1000FC544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FC700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FC7BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FC954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000FC984(id a1)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v1 = VCPLogInstance();
    os_log_type_t v2 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v1, v2))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "[MAD BG Service] XPC connection interrupted", v3, 2u);
    }
  }
}

void sub_1000FCA04(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    os_log_type_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)double v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[MAD BG Service] XPC connection invalidated", v7, 2u);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = (void *)*((void *)WeakRetained + 2);
    *((void *)WeakRetained + 2) = 0;
  }
}

void sub_1000FCB98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FD2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v42 - 256), 8);

  _Block_object_dispose((const void *)(v42 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FD3F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000FD400(uint64_t a1)
{
}

void sub_1000FD408(id a1, NSError *a2)
{
  if ((int)MediaAnalysisLogLevel() >= 4)
  {
    os_log_type_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[MAD BG Service] Error connecting to wake background analysis service", v4, 2u);
    }
  }
}

intptr_t sub_1000FD488(uint64_t a1, int a2)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      v7[0] = 67109120;
      v7[1] = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MAD BG Service] Waked; proceed to service daemon (%d) processing ...",
        (uint8_t *)v7,
        8u);
    }
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000FD558(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 4)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v4, v5))
    {
      id v6 = [v3 description];
      int v7 = 138412290;
      char v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MAD BG Service] Connection to background analysis service failed (%@)", (uint8_t *)&v7, 0xCu);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000FD64C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FD674(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if ([v3 code] == (id)-128)
    {
      if ((int)MediaAnalysisLogLevel() >= 5)
      {
        os_log_type_t v5 = VCPLogInstance();
        os_log_type_t v6 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v5, v6))
        {
          int v7 = [v4 description];
          int v16 = 138412290;
          __int16 v17 = v7;
          _os_log_impl((void *)&_mh_execute_header, v5, v6, "[MAD BG Service] Processing canceled (%@)", (uint8_t *)&v16, 0xCu);
        }
LABEL_14:
      }
    }
    else if ((int)MediaAnalysisLogLevel() >= 4)
    {
      os_log_type_t v5 = VCPLogInstance();
      os_log_type_t v11 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v5, v11))
      {
        unsigned __int8 v12 = [v4 description];
        int v16 = 138412290;
        __int16 v17 = v12;
        _os_log_impl((void *)&_mh_execute_header, v5, v11, "[MAD BG Service] Processing failed (%@)", (uint8_t *)&v16, 0xCu);
      }
      goto LABEL_14;
    }
    id v13 = [v4 copy];
    uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
    int v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;

    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
    goto LABEL_16;
  }
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    char v8 = VCPLogInstance();
    os_log_type_t v9 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v8, v9))
    {
      LOWORD(v16) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[MAD BG Service] Processing completed", (uint8_t *)&v16, 2u);
    }
  }
  id v10 = [*(id *)(a1 + 32) completionHandler];
  v10[2](v10, 0, 0);

LABEL_16:
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
  if (*(void *)(*(void *)(a1 + 32) + 8) == 16 && _os_feature_enabled_impl()) {
    +[VCPMADPECSingleRequestProcessingTask reschedule];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000FD8F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FD930(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isCanceled])
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
    int v3 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v3 + 1;
    if (!v3 || (int)MediaAnalysisLogLevel() >= 7)
    {
      uint64_t v4 = VCPLogInstance();
      os_log_type_t v5 = v4;
      uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
      int v7 = *(_DWORD *)(v6 + 24);
      *(_DWORD *)(v6 + 24) = v7 + 1;
      uint64_t v8 = 7;
      if (!v7) {
        uint64_t v8 = 5;
      }
      os_log_type_t v9 = VCPLogToOSLogType[v8];
      if (os_log_type_enabled(v4, v9))
      {
        uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
        v13[0] = 67109120;
        v13[1] = v10;
        _os_log_impl((void *)&_mh_execute_header, v5, v9, "[MAD BG Service] Canceling (activity %d) ...", (uint8_t *)v13, 8u);
      }
    }
    os_log_type_t v11 = [*(id *)(a1 + 32) connection];
    unsigned __int8 v12 = [v11 remoteObjectProxyWithErrorHandler:&stru_10021E118];
    [v12 cancelActivity];
  }
}

void sub_1000FDA7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FDAA0(id a1, NSError *a2)
{
  if ((int)MediaAnalysisLogLevel() >= 4)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[MAD BG Service] Error connecting to background analysis service", v4, 2u);
    }
  }
}

uint64_t sub_1000FDC9C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = [a3 code];
  os_log_type_t v5 = *(uint64_t (**)(uint64_t, id))(v3 + 16);
  return v5(v3, v4);
}

void sub_1000FE4DC(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      id v4 = [(id)objc_opt_class() name];
      [*(id *)(a1 + 40) fractionCompleted];
      int v8 = 138412546;
      os_log_type_t v9 = v4;
      __int16 v10 = 2048;
      double v11 = v5 * 100.0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%@] Progress: %0.2f%%", (uint8_t *)&v8, 0x16u);
    }
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 44);
  if (v6)
  {
    [*(id *)(a1 + 40) fractionCompleted];
    (*(void (**)(uint64_t, double))(v6 + 16))(v6, v7 * 100.0);
  }
}

void sub_1000FE830(id a1)
{
  id v1 = objc_alloc_init(VCPMADProcessingJobManager);
  uint64_t v2 = (void *)qword_100252740;
  qword_100252740 = (uint64_t)v1;
}

void sub_1000FEC40(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 8);
  id v7 = a4;
  id v8 = a3;
  id v9 = [v6 objectForKeyedSubscript:a2];
  [v9 scheduleJob:v7 toDispatchGroup:v8];
}

void sub_1000FEDF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FEE98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FF0D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FF168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FF3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000FF790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000FFBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  int v15 = v13;

  _Unwind_Resume(a1);
}

void sub_1000FFD78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FFF64(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100100C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100100F94(uint64_t a1)
{
  uint64_t v2 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  os_log_type_t v3 = *(void **)(*(void *)(a1 + 32) + 56);
  id v4 = [*(id *)(a1 + 40) localIdentifier];
  [v3 setObject:v2 forKeyedSubscript:v4];

  uint64_t v5 = +[NSDate now];
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 64);
  *(void *)(v6 + 64) = v5;
}

void sub_10010102C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100101114(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(_DWORD *)(*(void *)(a1 + 32) + 72);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 56);
  os_log_type_t v3 = [*(id *)(a1 + 40) localIdentifier];
  [v2 removeObjectForKey:v3];

  uint64_t v4 = +[NSDate now];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 64);
  *(void *)(v5 + 64) = v4;

  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v7 = VCPLogInstance();
    os_log_type_t v8 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v7, v8))
    {
      unsigned int v9 = [*(id *)(*(void *)(a1 + 32) + 56) count];
      v10[0] = 67109120;
      v10[1] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[OCR] %d downloads pending", (uint8_t *)v10, 8u);
    }
  }
}

void sub_10010123C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100101304(uint64_t a1)
{
  id v3 = +[NSDate now];
  [v3 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 64)];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
}

void sub_10010136C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10010140C(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 72) = *(_DWORD *)(a1 + 40);
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      unsigned int v4 = [*(id *)(*(void *)(a1 + 32) + 56) count];
      int v5 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)long long buf = 67109376;
      unsigned int v18 = v4;
      __int16 v19 = 1024;
      int v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[OCR] Canceling %d download requests (%d)", buf, 0xEu);
    }
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v6 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 56), "allValues", 0);
  id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v13;
    do
    {
      for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v6);
        }
        __int16 v10 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        double v11 = +[PHAssetResourceManager defaultManager];
        objc_msgSend(v11, "cancelDataRequest:", objc_msgSend(v10, "intValue"));
      }
      id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }
}

void sub_1001015C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100102100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29)
{
  _Unwind_Resume(a1);
}

void sub_1001022B0(void *a1)
{
  id v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  os_log_type_t v3 = (void *)a1[6];
  id v4 = [v3 privateFileURL];
  objc_msgSend(v1, "processAssetEntry:resource:resourceURL:", v2, v3);
}

void sub_10010231C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100102330(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[VCPWatchdog sharedWatchdog];
  [v7 pet];

  uint64_t v8 = *(void **)(a1 + 32);
  unsigned int v9 = [*(id *)(a1 + 40) asset];
  uint64_t v10 = (uint64_t)[v8 removeDownloadRequestIDForAsset:v9];

  if (v6)
  {
    if (!v10)
    {
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        double v11 = VCPLogInstance();
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          long long v13 = [*(id *)(a1 + 40) asset];
          long long v14 = [v13 localIdentifier];
          long long v15 = [v6 description];
          *(_DWORD *)long long buf = 138412546;
          signed int v24 = v14;
          __int16 v25 = 2112;
          id v26 = v15;
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "[OCR][%@] Failed to download resource (%@)", buf, 0x16u);
        }
      }
      if (objc_msgSend(v6, "mad_isDownloadThrottling")) {
        uint64_t v10 = 4294943488;
      }
      else {
        uint64_t v10 = 4294943494;
      }
    }
    [*(id *)(a1 + 40) setStatus:v10];
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 32);
    __int16 v17 = *(NSObject **)(v16 + 80);
    unsigned int v18 = *(NSObject **)(v16 + 88);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1001025D0;
    v19[3] = &unk_10021C098;
    v19[4] = v16;
    id v20 = *(id *)(a1 + 40);
    id v21 = *(id *)(a1 + 48);
    id v22 = v5;
    dispatch_group_async(v17, v18, v19);
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 40));
}

void sub_100102580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001025D0(uint64_t a1)
{
  [*(id *)(a1 + 32) processAssetEntry:*(void *)(a1 + 40) resource:*(void *)(a1 + 48) resourceURL:*(void *)(a1 + 56)];
  uint64_t v2 = *(void *)(a1 + 56);
  return +[PHAssetResourceManager vcp_flushResourceURL:v2];
}

void sub_100102DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_100102F24(uint64_t a1)
{
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id obj = *(id *)(*(void *)(a1 + 32) + 8);
  id v1 = [obj countByEnumeratingWithState:&v24 objects:v30 count:16];
  if (v1)
  {
    uint64_t v23 = *(void *)v25;
    os_log_type_t type = VCPLogToOSLogType[6];
    *(void *)&long long v2 = 138412290;
    long long v20 = v2;
    do
    {
      for (unint64_t i = 0; i != v1; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v25 != v23) {
          objc_enumerationMutation(obj);
        }
        id v4 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        if (![v4 status])
        {
          if ([v4 isAnalysisCompleteFromComputeSync])
          {
            if ((int)MediaAnalysisLogLevel() < 6) {
              goto LABEL_16;
            }
            id v6 = VCPLogInstance();
            if (os_log_type_enabled(v6, type))
            {
              id v7 = [v4 asset];
              uint64_t v8 = [v7 localIdentifier];
              *(_DWORD *)long long buf = v20;
              long long v29 = v8;
              _os_log_impl((void *)&_mh_execute_header, v6, type, "   [%@] Analysis already complete from compute sync ingestion; skip publishing",
                buf,
                0xCu);
            }
            goto LABEL_15;
          }
          if ([v4 version] != 0x7FFF
            || ([v4 asset],
                unsigned int v9 = objc_claimAutoreleasedReturnValue(),
                [v9 characterRecognitionProperties],
                uint64_t v10 = objc_claimAutoreleasedReturnValue(),
                BOOL v11 = [v10 algorithmVersion] == 0,
                v10,
                v9,
                v11))
          {
            os_log_type_t v12 = objc_msgSend(v4, "asset", v20);
            id v6 = +[PHAssetChangeRequest changeRequestForAsset:v12];

            long long v13 = [v4 ocrData];
            long long v14 = [v4 mrcData];
            signed int v15 = [v4 version];
            uint64_t v16 = [v4 asset];
            __int16 v17 = [v16 adjustmentVersion];
            [v6 setCharacterRecognitionData:v13 machineReadableCodeData:v14 algorithmVersion:v15 adjustmentVersion:v17];

            unsigned int v18 = [v4 asset];
            LODWORD(v16) = objc_msgSend(v18, "mad_isEligibleForComputeSync");

            if (v16)
            {
              __int16 v19 = [v4 asset];
              -[NSObject setLocalAnalysisStage:](v6, "setLocalAnalysisStage:", objc_msgSend(v19, "mad_analysisStageAfterCompletingAnalysis:", 10));
            }
LABEL_15:
          }
        }
LABEL_16:
      }
      id v1 = [obj countByEnumeratingWithState:&v24 objects:v30 count:16];
    }
    while (v1);
  }
}

void sub_100103230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1001032EC(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_10010333C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001034DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100103588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001037F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100103890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100103A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100103D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1001041E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100104600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100104958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001059A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,const void *a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_100004484(&a57);
  _Block_object_dispose((const void *)(v69 - 192), 8);

  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_100105CC4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100105CD4(uint64_t a1)
{
}

void sub_100105CDC(uint64_t a1)
{
  long long v2 = VCPSignPostLog();
  os_signpost_id_t v3 = os_signpost_id_generate(v2);

  id v4 = VCPSignPostLog();
  id v5 = v4;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_BEGIN, v3, "VCPStickerGating", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  int v24 = 0;
  id v6 = [*(id *)(a1 + 32) asset];
  BOOL v7 = ((unint64_t)[v6 mediaSubtypes] & 4) == 0;

  if (v7)
  {
    double v8 = 1.0;
    double v9 = 0.0;
    double v10 = 0.0;
    double v11 = 1.0;
  }
  else
  {
    [*(id *)(a1 + 40) _computeRegionOfInterest:*(void *)(a1 + 48) orientation:*(unsigned int *)(a1 + 56)];
    double v9 = v12;
    double v10 = v13;
    double v8 = v14;
    double v11 = v15;
  }
  v27.origin.double x = v9;
  v27.origin.double y = v10;
  v27.size.double width = v8;
  v27.size.double height = v11;
  if (CGRectIsNull(v27)) {
    uint64_t v16 = 4294967278;
  }
  else {
    uint64_t v16 = (uint64_t)objc_msgSend(*(id *)(a1 + 40), "_calculateStickerScore:orientation:regionOfInterest:stickerScore:", *(void *)(a1 + 48), *(unsigned int *)(a1 + 56), &v24, v9, v10, v8, v11);
  }
  [*(id *)(a1 + 32) setStickerStatus:v16];
  if ([*(id *)(a1 + 32) stickerStatus])
  {
    if ((int)MediaAnalysisLogLevel() >= 4)
    {
      unsigned int v18 = VCPLogInstance();
      os_log_type_t v19 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v18, v19))
      {
        long long v20 = [*(id *)(a1 + 32) asset];
        id v21 = [v20 localIdentifier];
        *(_DWORD *)long long buf = 138412290;
        long long v26 = v21;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "[VisualSearch][%@] Processing failed (StaticStickerScore)", buf, 0xCu);
      }
    }
  }
  else
  {
    LODWORD(v17) = v24;
    [*(id *)(a1 + 32) setStickerScore:v17];
    [*(id *)(a1 + 32) setStickerAlgorithmVersion:1];
  }
  id v22 = VCPSignPostLog();
  uint64_t v23 = v22;
  if (v3 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v22))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_INTERVAL_END, v3, "VCPStickerGating", (const char *)&unk_1001F3BD3, buf, 2u);
  }
}

void sub_100105F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100105FA4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v40 = a2;
  id v41 = a3;
  id v42 = a4;
  BOOL v7 = VCPSignPostLog();
  double v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 80);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "VIService_VisualSearchGating", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  if (*(void *)(a1 + 88))
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
  if (v42)
  {
    if ((int)MediaAnalysisLogLevel() >= 4)
    {
      double v10 = VCPLogInstance();
      os_log_type_t v11 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v10, v11))
      {
        double v12 = [*(id *)(a1 + 32) asset];
        double v13 = [v12 localIdentifier];
        *(_DWORD *)long long buf = 138412546;
        id v57 = v13;
        __int16 v58 = 2112;
        id v59 = v42;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "[VisualSearch][%@] Processing failed (%@)", buf, 0x16u);
      }
    }
    objc_msgSend(*(id *)(a1 + 32), "setVisualSearchStatus:", 4294967278, v40);
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      double v14 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = [*(id *)(a1 + 32) asset];
        double v17 = [v16 localIdentifier];
        *(_DWORD *)long long buf = 138412290;
        id v57 = v17;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "[VisualSearch][%@] Processing completed", buf, 0xCu);
      }
    }
    [*(id *)(a1 + 32) setVersion:VCPPhotosVisualSearchAlgorithmVersion()];
    [*(id *)(a1 + 32) setResult:v41];
    ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    id v18 = objc_alloc_init((Class)NSMutableSet);
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    os_log_type_t v19 = [v40 visualUnderstanding];
    id obj = [v19 imageRegions];

    id v20 = [obj countByEnumeratingWithState:&v52 objects:v62 count:16];
    if (v20)
    {
      uint64_t v21 = *(void *)v53;
      do
      {
        for (unint64_t i = 0; i != v20; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v53 != v21) {
            objc_enumerationMutation(obj);
          }
          uint64_t v23 = *(void **)(*((void *)&v52 + 1) + 8 * i);
          long long v48 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          int v24 = objc_msgSend(v23, "domainInfo", v40);
          id v25 = [v24 countByEnumeratingWithState:&v48 objects:v61 count:16];
          if (v25)
          {
            uint64_t v26 = *(void *)v49;
            do
            {
              for (j = 0; j != v25; j = (char *)j + 1)
              {
                if (*(void *)v49 != v26) {
                  objc_enumerationMutation(v24);
                }
                uint64_t v28 = [*(id *)(*((void *)&v48 + 1) + 8 * (void)j) domainKey];
                [v18 addObject:v28];
              }
              id v25 = [v24 countByEnumeratingWithState:&v48 objects:v61 count:16];
            }
            while (v25);
          }
        }
        id v20 = [obj countByEnumeratingWithState:&v52 objects:v62 count:16];
      }
      while (v20);
    }

    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    id v29 = v18;
    id v30 = [v29 countByEnumeratingWithState:&v44 objects:v60 count:16];
    if (v30)
    {
      uint64_t v31 = *(void *)v45;
      do
      {
        for (k = 0; k != v30; k = (char *)k + 1)
        {
          if (*(void *)v45 != v31) {
            objc_enumerationMutation(v29);
          }
          uint64_t v33 = *(void *)(*((void *)&v44 + 1) + 8 * (void)k);
          uint64_t v34 = objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), "objectForKeyedSubscript:", v33, v40);
          uint64_t v35 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", (char *)[v34 integerValue] + 1);
          [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setObject:v35 forKeyedSubscript:v33];
        }
        id v30 = [v29 countByEnumeratingWithState:&v44 objects:v60 count:16];
      }
      while (v30);
    }

    if ([v29 count]) {
      ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
    }
    if ((MADAnyEncryptedSearchDomains(v29) & 1) == 0)
    {
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        double v36 = VCPLogInstance();
        os_log_type_t v37 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v36, v37))
        {
          long long v38 = [*(id *)(a1 + 32) asset];
          long long v39 = [v38 localIdentifier];
          *(_DWORD *)long long buf = 138412290;
          id v57 = v39;
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "[VisualSearch][%@] No encryptedSearchDomains, setting PEC version", buf, 0xCu);
        }
      }
      objc_msgSend(*(id *)(a1 + 32), "setPecVersion:", 5, v40);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100106564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_100106FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_100107150(uint64_t a1)
{
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id obj = *(id *)(*(void *)(a1 + 32) + 56);
  id v1 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
  if (v1)
  {
    uint64_t v2 = *(void *)v31;
    do
    {
      os_signpost_id_t v3 = 0;
      do
      {
        if (*(void *)v31 != v2) {
          objc_enumerationMutation(obj);
        }
        id v4 = *(void **)(*((void *)&v30 + 1) + 8 * (void)v3);
        if (![v4 status])
        {
          id v6 = [v4 asset];
          BOOL v7 = +[PHAssetChangeRequest changeRequestForAsset:v6];

          if (([v4 analysisTypes] & 2) != 0
            && ![v4 visualSearchStatus])
          {
            uint64_t v16 = [v4 result];
            signed int v17 = [v4 version];
            id v18 = [v4 asset];
            os_log_type_t v19 = [v18 adjustmentVersion];
            [v7 setVisualSearchData:v16 algorithmVersion:v17 adjustmentVersion:v19];

            char v8 = 1;
          }
          else
          {
            char v8 = 0;
          }
          if (([v4 analysisTypes] & 4) == 0
            || [v4 stickerStatus]
            || [v4 stickerAlgorithmVersion] == -1)
          {
            if ((v8 & 1) == 0)
            {
              char v9 = 0;
              goto LABEL_14;
            }
          }
          else
          {
            [v4 stickerScore];
            int v21 = v20;
            signed int v22 = [v4 stickerAlgorithmVersion];
            LODWORD(v23) = v21;
            [v7 setStickerConfidenceScore:v22 stickerAlgorithmVersion:v23];
            if (v8) {
              goto LABEL_21;
            }
            char v9 = 1;
LABEL_14:
            id v29 = [v4 asset];
            if (objc_msgSend(v29, "vcp_needsVisualSearchProcessing"))
            {
              double v10 = v29;
              goto LABEL_29;
            }
            if (v9)
            {

LABEL_21:
              double v13 = [v4 asset];
              unsigned int v14 = objc_msgSend(v13, "mad_isEligibleForComputeSync");

              if (v14)
              {
                os_log_type_t v15 = [v4 asset];
                double v10 = objc_msgSend(v15, "mad_refetchAsset");

                if (v10)
                {
                  objc_msgSend(v7, "setLocalAnalysisStage:", objc_msgSend(v10, "mad_analysisStageAfterCompletingAnalysis:", 12));
                }
                else
                {
                  int v24 = [v4 asset];
                  objc_msgSend(v7, "setLocalAnalysisStage:", objc_msgSend(v24, "mad_analysisStageAfterCompletingAnalysis:", 12));
                }
LABEL_29:
              }
LABEL_30:
              if ((int)[v4 pecVersion] >= 1)
              {
                signed __int16 v25 = (unsigned __int16)[v4 pecVersion];
                uint64_t v26 = [v4 asset];
                CGRect v27 = [v26 adjustmentVersion];
                [v7 setSceneClassifications:0 ofType:5 version:v25 timestamp:v27];
              }
              goto LABEL_33;
            }
          }
          os_log_type_t v11 = [v4 asset];
          unsigned __int8 v12 = objc_msgSend(v11, "vcp_needsStickerGatingProcessing");

          if ((v8 & 1) == 0) {
          if ((v12 & 1) == 0)
          }
            goto LABEL_21;
          goto LABEL_30;
        }
LABEL_33:
        os_signpost_id_t v3 = (char *)v3 + 1;
      }
      while (v1 != v3);
      id v1 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
    }
    while (v1);
  }
}

void sub_1001074D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1001075A8(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_1001075F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100107B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_100108AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_10010A058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,void *a37)
{
  _Unwind_Resume(a1);
}

void sub_10010A32C(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_10010A37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10010A970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void MADBMSendDomainSpecificAssetCounts(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v48 = objc_alloc((Class)BMPerBatchDomainSpecificAssetCounts);
  __int16 v63 = +[NSNumber numberWithUnsignedInteger:a1];
  id v64 = +[NSNumber numberWithUnsignedInteger:a2];
  long long v44 = [v5 objectForKeyedSubscript:kVIDomainArt];
  long long v62 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v44 integerValue]);
  long long v43 = [v5 objectForKeyedSubscript:kVIDomainNature];
  long long v61 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v43 integerValue]);
  id v42 = [v5 objectForKeyedSubscript:kVIDomainAnimals];
  id v60 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v42 integerValue]);
  id v41 = [v5 objectForKeyedSubscript:kVIDomainBirds];
  __int16 v58 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v41 integerValue]);
  id v40 = [v5 objectForKeyedSubscript:kVIDomainInsects];
  id v59 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v40 integerValue]);
  long long v39 = [v5 objectForKeyedSubscript:kVIDomainReptiles];
  id v57 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v39 integerValue]);
  long long v38 = [v5 objectForKeyedSubscript:kVIDomainMammals];
  __int16 v56 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v38 integerValue]);
  os_log_type_t v37 = [v5 objectForKeyedSubscript:kVIDomainLandmark];
  long long v55 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v37 integerValue]);
  double v36 = [v5 objectForKeyedSubscript:kVIDomainNaturalLandmark];
  long long v54 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v36 integerValue]);
  uint64_t v35 = [v5 objectForKeyedSubscript:kVIDomainMedia];
  long long v53 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v35 integerValue]);
  uint64_t v34 = [v5 objectForKeyedSubscript:kVIDomainBook];
  long long v52 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v34 integerValue]);
  long long v33 = [v5 objectForKeyedSubscript:kVIDomainAlbum];
  long long v50 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v33 integerValue]);
  long long v32 = [v5 objectForKeyedSubscript:kVIDomainCats];
  long long v47 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v32 integerValue]);
  long long v31 = [v5 objectForKeyedSubscript:kVIDomainDogs];
  long long v51 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v31 integerValue]);
  long long v30 = [v5 objectForKeyedSubscript:kVIDomainApparel];
  long long v46 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v30 integerValue]);
  id v29 = [v5 objectForKeyedSubscript:kVIDomainFood];
  int v24 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v29 integerValue]);
  uint64_t v28 = [v5 objectForKeyedSubscript:kVIDomainStorefront];
  long long v45 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v28 integerValue]);
  CGRect v27 = [v5 objectForKeyedSubscript:kVIDomainSignSymbol];
  signed int v22 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v27 integerValue]);
  uint64_t v26 = [v5 objectForKeyedSubscript:kVIDomainLaundryCareSymbol];
  int v20 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v26 integerValue]);
  signed __int16 v25 = [v5 objectForKeyedSubscript:kVIDomainAutoSymbol];
  id v18 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v25 integerValue]);
  double v23 = [v5 objectForKeyedSubscript:kVIDomainBrandLogoSymbol];
  id v6 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v23 integerValue]);
  int v21 = [v5 objectForKeyedSubscript:kVIDomainObject2D];
  BOOL v7 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v21 integerValue]);
  os_log_type_t v19 = [v5 objectForKeyedSubscript:kVIDomainBarcodeDetection];
  char v8 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v19 integerValue]);
  char v9 = [v5 objectForKeyedSubscript:kVIDomainSculpture];
  double v10 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v9 integerValue]);
  os_log_type_t v11 = [v5 objectForKeyedSubscript:kVIDomainSkyline];

  unsigned __int8 v12 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v11 integerValue]);
  id v49 = objc_msgSend(v48, "initWithParsedAssetCount:anyDomainAssetCount:artAssetCount:natureAssetCount:animalsAssetCount:birdsAssetCount:insectsAssetCount:reptilesAssetCount:mammalsAssetCount:landmarkAssetCount:naturalLandmarkAssetCount:mediaAssetCount:bookAssetCount:albumAssetCount:catsAssetCount:dogsAssetCount:apparelAssetCount:foodAssetCount:storefrontAssetCount:signSymbolAssetCount:laundryCareSymbolAssetCount:autoSymbolAssetCount:brandLogoSymbolAssetCount:object2DAssetCount:barcodeDetectionAssetCount:sculptureAssetCount:skylineAssetCount:", v63, v64, v62, v61, v60, v58, v59, v57, v56, v55, v54, v53, v52,
          v50,
          v47,
          v51,
          v46,
          v24,
          v45,
          v22,
          v20,
          v18,
          v6,
          v7,
          v8,
          v10,
          v12);

  double v13 = BiomeLibrary();
  unsigned int v14 = [v13 MediaAnalysis];
  os_log_type_t v15 = [v14 VisualSearch];
  uint64_t v16 = [v15 Processing];

  signed int v17 = [v16 source];
  [v17 sendEvent:v49];
}

void MADBMSendPECProcessedCounts(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v95 = objc_alloc((Class)BMPECProcessed);
  uint64_t v109 = kVIDomainArt;
  v81 = objc_msgSend(v4, "objectForKeyedSubscript:");
  v134 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v81 integerValue]);
  uint64_t v5 = kVIDomainNature;
  v80 = [v4 objectForKeyedSubscript:kVIDomainNature];
  v135 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v80 integerValue]);
  uint64_t v6 = kVIDomainAnimals;
  long long v79 = [v4 objectForKeyedSubscript:kVIDomainAnimals];
  v132 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v79 integerValue]);
  uint64_t v7 = kVIDomainBirds;
  long long v78 = [v4 objectForKeyedSubscript:kVIDomainBirds];
  v133 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v78 integerValue]);
  uint64_t v8 = kVIDomainInsects;
  id v77 = [v4 objectForKeyedSubscript:kVIDomainInsects];
  v129 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v77 integerValue]);
  uint64_t v104 = kVIDomainReptiles;
  __int16 v76 = objc_msgSend(v4, "objectForKeyedSubscript:");
  v131 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v76 integerValue]);
  uint64_t v101 = kVIDomainMammals;
  id v75 = objc_msgSend(v4, "objectForKeyedSubscript:");
  v130 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v75 integerValue]);
  uint64_t v99 = kVIDomainLandmark;
  __int16 v74 = objc_msgSend(v4, "objectForKeyedSubscript:");
  v127 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v74 integerValue]);
  uint64_t v97 = kVIDomainNaturalLandmark;
  uint64_t v73 = objc_msgSend(v4, "objectForKeyedSubscript:");
  v128 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v73 integerValue]);
  uint64_t v93 = kVIDomainMedia;
  __int16 v72 = objc_msgSend(v4, "objectForKeyedSubscript:");
  v125 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v72 integerValue]);
  uint64_t v91 = kVIDomainBook;
  uint64_t v71 = objc_msgSend(v4, "objectForKeyedSubscript:");
  v126 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v71 integerValue]);
  uint64_t v88 = kVIDomainAlbum;
  v70 = objc_msgSend(v4, "objectForKeyedSubscript:");
  v123 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v70 integerValue]);
  uint64_t v86 = kVIDomainCats;
  uint64_t v69 = objc_msgSend(v4, "objectForKeyedSubscript:");
  v124 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v69 integerValue]);
  uint64_t v84 = kVIDomainDogs;
  long long v68 = objc_msgSend(v4, "objectForKeyedSubscript:");
  v121 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v68 integerValue]);
  uint64_t v82 = kVIDomainApparel;
  long long v67 = objc_msgSend(v4, "objectForKeyedSubscript:");
  v122 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v67 integerValue]);
  uint64_t v46 = kVIDomainFood;
  uint64_t v66 = objc_msgSend(v4, "objectForKeyedSubscript:");
  v119 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v66 integerValue]);
  uint64_t v44 = kVIDomainStorefront;
  id v65 = objc_msgSend(v4, "objectForKeyedSubscript:");
  v120 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v65 integerValue]);
  uint64_t v42 = kVIDomainSignSymbol;
  id v64 = objc_msgSend(v4, "objectForKeyedSubscript:");
  v117 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v64 integerValue]);
  uint64_t v40 = kVIDomainLaundryCareSymbol;
  __int16 v63 = objc_msgSend(v4, "objectForKeyedSubscript:");
  v118 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v63 integerValue]);
  long long v62 = [v4 objectForKeyedSubscript:kVIDomainAutoSymbol];
  v115 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v62 integerValue]);
  uint64_t v9 = kVIDomainBrandLogoSymbol;
  long long v61 = [v4 objectForKeyedSubscript:kVIDomainBrandLogoSymbol];
  v116 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v61 integerValue]);
  uint64_t v37 = kVIDomainObject2D;
  id v60 = objc_msgSend(v4, "objectForKeyedSubscript:");
  v113 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v60 integerValue]);
  uint64_t v36 = kVIDomainBarcodeDetection;
  id v59 = objc_msgSend(v4, "objectForKeyedSubscript:");
  v114 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v59 integerValue]);
  uint64_t v35 = kVIDomainSculpture;
  __int16 v58 = objc_msgSend(v4, "objectForKeyedSubscript:");
  v111 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v58 integerValue]);
  uint64_t v34 = kVIDomainSkyline;
  id v57 = objc_msgSend(v4, "objectForKeyedSubscript:");

  v112 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v57 integerValue]);
  __int16 v56 = [v3 objectForKeyedSubscript:v109];
  v108 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v56 integerValue]);
  long long v55 = [v3 objectForKeyedSubscript:v5];
  v110 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v55 integerValue]);
  long long v54 = [v3 objectForKeyedSubscript:v6];
  v106 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v54 integerValue]);
  long long v53 = [v3 objectForKeyedSubscript:v7];
  v107 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v53 integerValue]);
  long long v52 = [v3 objectForKeyedSubscript:v8];
  v103 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v52 integerValue]);
  long long v51 = [v3 objectForKeyedSubscript:v104];
  v105 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v51 integerValue]);
  long long v50 = [v3 objectForKeyedSubscript:v101];
  v102 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v50 integerValue]);
  id v49 = [v3 objectForKeyedSubscript:v99];
  v100 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v49 integerValue]);
  id v48 = [v3 objectForKeyedSubscript:v97];
  v98 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v48 integerValue]);
  long long v39 = [v3 objectForKeyedSubscript:v93];
  v94 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v39 integerValue]);
  long long v33 = [v3 objectForKeyedSubscript:v91];
  v90 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v33 integerValue]);
  long long v32 = [v3 objectForKeyedSubscript:v88];
  v92 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v32 integerValue]);
  long long v31 = [v3 objectForKeyedSubscript:v86];
  v87 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v31 integerValue]);
  long long v30 = [v3 objectForKeyedSubscript:v84];
  uint64_t v28 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v30 integerValue]);
  id v29 = [v3 objectForKeyedSubscript:v82];
  v89 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v29 integerValue]);
  long long v47 = [v3 objectForKeyedSubscript:v46];
  v85 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v47 integerValue]);
  long long v45 = [v3 objectForKeyedSubscript:v44];
  signed __int16 v25 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v45 integerValue]);
  long long v43 = [v3 objectForKeyedSubscript:v42];
  v83 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v43 integerValue]);
  id v41 = [v3 objectForKeyedSubscript:v40];
  int v24 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v41 integerValue]);
  CGRect v27 = [v3 objectForKeyedSubscript:v9];
  double v23 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v27 integerValue]);
  uint64_t v26 = [v3 objectForKeyedSubscript:v9];
  signed int v22 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v26 integerValue]);
  long long v38 = [v3 objectForKeyedSubscript:v37];
  double v10 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v38 integerValue]);
  os_log_type_t v11 = [v3 objectForKeyedSubscript:v36];
  unsigned __int8 v12 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v11 integerValue]);
  double v13 = [v3 objectForKeyedSubscript:v35];
  unsigned int v14 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v13 integerValue]);
  os_log_type_t v15 = [v3 objectForKeyedSubscript:v34];

  uint64_t v16 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v15 integerValue]);
  id v96 = objc_msgSend(v95, "initWithArtAssetProcessedCount:natureAssetProcessedCount:animalsAssetProcessedCount:birdsAssetProcessedCount:insectsAssetProcessedCount:reptilesAssetProcessedCount:mammalsAssetProcessedCount:landmarkAssetProcessedCount:naturalLandmarkProcessedAssetCount:mediaAssetProcessedCount:bookAssetProcessedCount:albumAssetProcessedCount:catsAssetProcessedCount:dogsAssetProcessedCount:apparelAssetProcessedCount:foodAssetProcessedCount:storefrontAssetProcessedCount:signSymbolAssetProcessedCount:laundryCareSymbolAssetProcessedCount:autoSymbolAssetProcessedCount:brandLogoSymbolAssetProcessedCount:object2DAssetProcessedCount:barcodeDetectionAssetProcessedCount:sculptureAssetProcessedCount:skylineAssetProcessedCount:artAssetSuccessesCount:natureAssetSuccessesCount:animalsAssetSuccessesCount:birdsAssetSuccessesCount:insectsAssetSuccessesCount:reptilesAssetSuccessesCount:mammalsAssetSuccessesCount:landmarkAssetSuccessesCount:naturalLandmarkSuccessesAssetCount:mediaAssetSuccessesCount:bookAssetSuccessesCount:albumAssetSuccessesCount:catsAssetSuccessesCount:dogsAssetSuccessesCount:apparelAssetSuccessesCount:foodAssetSuccessesCount:storefrontAssetSuccessesCount:signSymbolAssetSuccessesCount:laundryCareSymbolAssetSuccessesCount:autoSymbolAssetSuccessesCount:brandLogoSymbolAssetSuccessesCount:object2DAssetSuccessesCount:barcodeDetectionAssetSuccessesCount:sculptureAssetSuccessesCount:skylineAssetSuccessesCount:", v134, v135, v132, v133, v129,
          v131,
          v130,
          v127,
          v128,
          v125,
          v126,
          v123,
          v124,
          v121,
          v122,
          v119,
          v120,
          v117,
          v118,
          v115,
          v116,
          v113,
          v114,
          v111,
          v112,
          v108,
          v110,
          v106,
          v107,
          v103,
          v105,
          v102,
          v100,
          v98,
          v94,
          v90,
          v92,
          v87,
          v28,
          v89,
          v85,
          v25,
          v83,
          v24,
          v23,
          v22,
          v10,
          v12,
          v14,
          v16);

  signed int v17 = BiomeLibrary();
  id v18 = [v17 MediaAnalysis];
  os_log_type_t v19 = [v18 PEC];
  int v20 = [v19 Processing];

  int v21 = [v20 source];
  [v21 sendEvent:v96];
}

void sub_10010C35C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010C3DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010CD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,void *a24,void *a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_10010DBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10010DE0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010E040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010E120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010E1C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010E250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010E57C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010E7D8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v6 = VCPLogInstance();
    os_log_type_t v7 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v6, v7))
    {
      int v14 = 138412290;
      id v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Checking whether %@ Photo Library is in known libraries", (uint8_t *)&v14, 0xCu);
    }
  }
  uint64_t v8 = +[PHPhotoLibrary wellKnownPhotoLibraryURLForIdentifier:a2];
  uint64_t v9 = [v8 path];

  if (v9)
  {
    if (([*(id *)(*(void *)(a1 + 32) + 24) containsObject:v9] & 1) == 0)
    {
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        double v10 = VCPLogInstance();
        os_log_type_t v11 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v10, v11))
        {
          int v14 = 138412546;
          id v15 = v5;
          __int16 v16 = 2112;
          signed int v17 = v9;
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Adding %@ Photo Library (%@) to known libraries", (uint8_t *)&v14, 0x16u);
        }
      }
      [*(id *)(*(void *)(a1 + 32) + 24) addObject:v9];
      [*(id *)(a1 + 32) persistPhotoLibraries];
    }
  }
  else if ((int)MediaAnalysisLogLevel() >= 4)
  {
    unsigned __int8 v12 = VCPLogInstance();
    os_log_type_t v13 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v12, v13))
    {
      int v14 = 138412290;
      id v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "No %@ Photo Library present", (uint8_t *)&v14, 0xCu);
    }
  }
}

void sub_10010EA44(id a1)
{
  id v1 = +[NSUserDefaults standardUserDefaults];
  id v5 = [v1 persistentDomainForName:@"com.apple.mediaanalysisd"];

  uint64_t v2 = [v5 objectForKey:@"PhotoLibraries"];
  +[PHPhotoLibrary enableMultiLibraryMode];
  id v3 = [[VCPPhotoLibraryManager alloc] initWithPhotoLibraryPaths:v2];
  id v4 = (void *)qword_100252748;
  qword_100252748 = (uint64_t)v3;
}

uint64_t sub_10010EC24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10010EC34(uint64_t a1)
{
}

void sub_10010EC3C(uint64_t a1)
{
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 24);
  id v3 = [v2 countByEnumeratingWithState:&v25 objects:v33 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v26;
    os_log_type_t v22 = VCPLogToOSLogType[4];
    os_log_type_t type = VCPLogToOSLogType[7];
    id v21 = v2;
    do
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v25 + 1) + 8 * i);
        uint64_t v8 = [*(id *)(*(void *)(a1 + 32) + 16) objectForKeyedSubscript:v7];

        if (!v8)
        {
          if ((int)MediaAnalysisLogLevel() >= 7)
          {
            uint64_t v9 = VCPLogInstance();
            if (os_log_type_enabled(v9, type))
            {
              *(_DWORD *)long long buf = 138412290;
              uint64_t v30 = v7;
              _os_log_impl((void *)&_mh_execute_header, v9, type, "Opening Photo Library at path %@", buf, 0xCu);
            }
          }
          double v10 = +[NSURL fileURLWithPath:v7];
          id v11 = [objc_alloc((Class)PHPhotoLibrary) initWithPhotoLibraryURL:v10];
          id v24 = 0;
          unsigned int v12 = objc_msgSend(v11, "vcp_openAndWaitWithUpgrade:error:", 0, &v24);
          id v13 = v24;
          if (v12)
          {
            [*(id *)(*(void *)(a1 + 32) + 16) setObject:v11 forKeyedSubscript:v7];
          }
          else if ((int)MediaAnalysisLogLevel() >= 4)
          {
            int v14 = VCPLogInstance();
            if (os_log_type_enabled(v14, v22))
            {
              id v15 = [v13 description];
              *(_DWORD *)long long buf = 138412546;
              uint64_t v30 = v7;
              __int16 v31 = 2112;
              long long v32 = v15;
              _os_log_impl((void *)&_mh_execute_header, v14, v22, "Failed to open Photo Library at path %@ (%@)", buf, 0x16u);

              id v2 = v21;
            }
          }
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v25 objects:v33 count:16];
    }
    while (v4);
  }

  __int16 v16 = [*(id *)(*(void *)(a1 + 32) + 16) allValues];
  uint64_t v17 = [v16 sortedArrayUsingComparator:&stru_10021E270];
  uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8);
  os_log_type_t v19 = *(void **)(v18 + 40);
  *(void *)(v18 + 40) = v17;
}

int64_t sub_10010EF24(id a1, PHPhotoLibrary *a2, PHPhotoLibrary *a3)
{
  id v4 = a2;
  uint64_t v5 = a3;
  if ([(PHPhotoLibrary *)v4 isSystemPhotoLibrary])
  {
LABEL_5:
    int64_t v6 = -1;
    goto LABEL_6;
  }
  if (([(PHPhotoLibrary *)v5 isSystemPhotoLibrary] & 1) == 0)
  {
    if (([(PHPhotoLibrary *)v5 vcp_isSyndicationLibrary] & 1) == 0)
    {
      int64_t v6 = [(PHPhotoLibrary *)v4 vcp_isSyndicationLibrary];
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int64_t v6 = 1;
LABEL_6:

  return v6;
}

void sub_10010F334(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) path];
  uint64_t v4 = [*(id *)(*(void *)(a1 + 40) + 16) objectForKeyedSubscript:v3];
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  int64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      uint64_t v7 = VCPLogInstance();
      os_log_type_t v8 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v7, v8))
      {
        *(_DWORD *)long long buf = 138412290;
        id v24 = v3;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Opening Photo Library at path %@", buf, 0xCu);
      }
    }
    id v9 = [objc_alloc((Class)PHPhotoLibrary) initWithPhotoLibraryURL:*(void *)(a1 + 32)];
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
    id v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    unsigned int v12 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    id v22 = 0;
    unsigned int v13 = objc_msgSend(v12, "vcp_openAndWaitWithUpgrade:error:", 0, &v22);
    id v14 = v22;
    if (v13)
    {
      [*(id *)(*(void *)(a1 + 40) + 16) setObject:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) forKeyedSubscript:v3];
      if (([*(id *)(*(void *)(a1 + 40) + 24) containsObject:v3] & 1) == 0)
      {
        if ((int)MediaAnalysisLogLevel() >= 7)
        {
          id v15 = VCPLogInstance();
          os_log_type_t v16 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v15, v16))
          {
            *(_DWORD *)long long buf = 138412290;
            id v24 = v3;
            _os_log_impl((void *)&_mh_execute_header, v15, v16, "Adding Photo Library (%@) to known libraries", buf, 0xCu);
          }
        }
        [*(id *)(*(void *)(a1 + 40) + 24) addObject:v3];
        [*(id *)(a1 + 40) persistPhotoLibraries];
      }
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() >= 4)
      {
        uint64_t v17 = VCPLogInstance();
        os_log_type_t v18 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v17, v18))
        {
          os_log_type_t v19 = [v14 description];
          *(_DWORD *)long long buf = 138412546;
          id v24 = v3;
          __int16 v25 = 2112;
          long long v26 = v19;
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to open Photo Library at path %@ (%@)", buf, 0x16u);
        }
      }
      uint64_t v20 = *(void *)(*(void *)(a1 + 48) + 8);
      id v21 = *(void **)(v20 + 40);
      *(void *)(v20 + 40) = 0;
    }
  }
}

void sub_10010F6FC()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  id v1 = (void *)qword_100252758;
  qword_100252758 = (uint64_t)v0;
}

void sub_10010FD34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001100FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v41 - 200), 8);

  _Block_object_dispose((const void *)(v41 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001101C8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001101D8(uint64_t a1)
{
}

void sub_1001101E0(uint64_t a1, double a2)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2048;
      double v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@] %.2f%% complete", (uint8_t *)&v7, 0x16u);
    }
  }
}

uint64_t sub_1001102C0(void *a1, uint64_t a2)
{
  [*(id *)(*(void *)(a1[7] + 8) + 40) stop];
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = a1[4];
      [*(id *)(*(void *)(a1[7] + 8) + 40) elapsedTimeSeconds];
      CFStringRef v8 = @"interrupted";
      int v22 = 138413058;
      uint64_t v23 = v6;
      __int16 v24 = 2112;
      if (!a2) {
        CFStringRef v8 = @"finished";
      }
      CFStringRef v25 = v8;
      __int16 v26 = 2048;
      uint64_t v27 = v7;
      __int16 v28 = 1024;
      int v29 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@] BackgroundSystemTask %@ after %0.6fs (%d)", (uint8_t *)&v22, 0x26u);
    }
  }
  if ([(id)objc_opt_class() taskID])
  {
    __int16 v9 = +[PHPhotoLibrary vcp_defaultPhotoLibrary];
    double v10 = +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:v9];

    id v11 = [(id)objc_opt_class() taskID];
    uint64_t v12 = *(void *)(*(void *)(a1[8] + 8) + 40);
    [*(id *)(*(void *)(a1[7] + 8) + 40) elapsedTimeSeconds];
    objc_msgSend(v10, "updateSchedulingHistoryForActivityID:startTime:duration:exitStatus:sessionLog:", v11, v12, a2, 0);
    [v10 commit];
    id v13 = [(id)objc_opt_class() taskID];
    [*(id *)(*(void *)(a1[7] + 8) + 40) elapsedTimeSeconds];
    VCPCoreAnalyticsReportEventDasScheduling((uint64_t)v13, a2, v14);
  }
  if (a2 != -128 && a2)
  {
    id v15 = VCPLogInstance();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT)) {
      sub_100111250((uint64_t)a1, a2, v15);
    }
  }
  uint64_t v16 = *(void *)(a1[9] + 8);
  uint64_t v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = 0;

  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    os_log_type_t v18 = VCPLogInstance();
    os_log_type_t v19 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = a1[4];
      int v22 = 138412290;
      uint64_t v23 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%@] Finished background processing", (uint8_t *)&v22, 0xCu);
    }
  }
  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_100110578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001105A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100110808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_100110854(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v33 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Entering BGST task launch handler.", buf, 0xCu);
    }
  }
  atomic_store(0, (unsigned __int8 *)(*(void *)(a1 + 40) + 9));
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_100110CFC;
  v30[3] = &unk_100219D70;
  int8x16_t v24 = *(int8x16_t *)(a1 + 32);
  id v7 = (id)v24.i64[0];
  int8x16_t v31 = vextq_s8(v24, v24, 8uLL);
  [v3 setExpirationHandler:v30];
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_100110DDC;
  v29[3] = &unk_100219D98;
  v29[4] = *(void *)(a1 + 40);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  void v25[2] = sub_100110DF8;
  v25[3] = &unk_10021E310;
  CFStringRef v8 = objc_retainBlock(v29);
  id v28 = v8;
  id v26 = *(id *)(a1 + 32);
  id v9 = v3;
  id v27 = v9;
  double v10 = objc_retainBlock(v25);
  if (+[VCPDeviceInformation isHomePod])
  {
    if ((int)MediaAnalysisLogLevel() >= 5)
    {
      id v11 = VCPLogInstance();
      os_log_type_t v12 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v33 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "%@[HomePod] Set xpc transaction exit clean", buf, 0xCu);
      }
    }
    xpc_transaction_exit_clean();
  }
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    double v14 = VCPLogInstance();
    os_log_type_t v15 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v33 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%@ Running background processing", buf, 0xCu);
    }
  }
  [*(id *)(a1 + 40) executeWith:v8 completionHandler:v10];
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    os_log_type_t v18 = VCPLogInstance();
    os_log_type_t v19 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v33 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%@ Submitted background processing task", buf, 0xCu);
    }
  }
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v21 = VCPLogInstance();
    os_log_type_t v22 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v33 = v23;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%@ Exiting BGST task launch handler.", buf, 0xCu);
    }
  }
}

void sub_100110C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_100110CFC(uint64_t a1)
{
  atomic_store(1u, (unsigned __int8 *)(*(void *)(a1 + 32) + 9));
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%@ Cancelling by expirationHandler", (uint8_t *)&v5, 0xCu);
    }
  }
}

uint64_t sub_100110DDC(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 9));
  return v1 & 1;
}

void sub_100110DF8(uint64_t a1, int a2)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 48) + 16))())
  {
    if ((int)MediaAnalysisLogLevel() >= 5)
    {
      uint64_t v4 = VCPLogInstance();
      os_log_type_t v5 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v35 = v6;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Task is cancelled by DAS", buf, 0xCu);
      }
    }
    id v7 = *(void **)(a1 + 40);
    id v33 = 0;
    unsigned int v8 = [v7 setTaskExpiredWithRetryAfter:&v33 error:0.0];
    id v9 = v33;
    if (v8)
    {
      if ((int)MediaAnalysisLogLevel() >= 5)
      {
        double v10 = VCPLogInstance();
        os_log_type_t v11 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v10, v11))
        {
          uint64_t v12 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138412290;
          uint64_t v35 = v12;
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "%@ Request retry after 0 seconds", buf, 0xCu);
        }
      }
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        id v26 = VCPLogInstance();
        os_log_type_t v27 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138412546;
          uint64_t v35 = v28;
          __int16 v36 = 2112;
          id v37 = v9;
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "%@ Failed to expire task - %@", buf, 0x16u);
        }
      }
      [*(id *)(a1 + 40) setTaskCompleted];
    }
  }
  else
  {
    int v13 = MediaAnalysisLogLevel();
    if (a2 == -128)
    {
      if (v13 >= 5)
      {
        double v14 = VCPLogInstance();
        os_log_type_t v15 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138412290;
          uint64_t v35 = v16;
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "%@ Task is cancelled", buf, 0xCu);
        }
      }
      uint64_t v17 = *(void **)(a1 + 40);
      id v32 = 0;
      unsigned int v18 = [v17 setTaskExpiredWithRetryAfter:&v32 error:300.0];
      id v19 = v32;
      if (v18)
      {
        if ((int)MediaAnalysisLogLevel() >= 5)
        {
          uint64_t v20 = VCPLogInstance();
          os_log_type_t v21 = VCPLogToOSLogType[5];
          if (os_log_type_enabled(v20, v21))
          {
            uint64_t v22 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 138412546;
            uint64_t v35 = v22;
            __int16 v36 = 1024;
            LODWORD(v37) = 300;
            _os_log_impl((void *)&_mh_execute_header, v20, v21, "%@ Request retry after %d seconds", buf, 0x12u);
          }
        }
      }
      else
      {
        if ((int)MediaAnalysisLogLevel() >= 3)
        {
          int v29 = VCPLogInstance();
          os_log_type_t v30 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v29, v30))
          {
            uint64_t v31 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = 138412546;
            uint64_t v35 = v31;
            __int16 v36 = 2112;
            id v37 = v19;
            _os_log_impl((void *)&_mh_execute_header, v29, v30, "%@ Failed to expire task - %@", buf, 0x16u);
          }
        }
        [*(id *)(a1 + 40) setTaskCompleted];
      }
    }
    else
    {
      if (v13 >= 5)
      {
        uint64_t v23 = VCPLogInstance();
        os_log_type_t v24 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v23, v24))
        {
          uint64_t v25 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138412546;
          uint64_t v35 = v25;
          __int16 v36 = 1024;
          LODWORD(v37) = a2;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "%@ Task is completed (%d)", buf, 0x12u);
        }
      }
      [*(id *)(a1 + 40) setTaskCompleted];
    }
  }
}

void sub_100111224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100111250(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 1024;
  int v7 = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "[%@] BackgroundSystemTask failed (%d)", (uint8_t *)&v4, 0x12u);
}

void sub_100112A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100112A6C(id a1)
{
  return 0;
}

void sub_100112B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100113034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28)
{
  _Block_object_dispose((const void *)(v35 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100113158(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  unsigned int v8 = [v7 localIdentifier];
  if (v8)
  {
    [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:v8];
  }
  else if ((int)MediaAnalysisLogLevel() >= 4)
  {
    id v9 = VCPLogInstance();
    os_log_type_t v10 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v9, v10))
    {
      os_log_type_t v11 = [v7 error];
      int v12 = 138412546;
      id v13 = v5;
      __int16 v14 = 2112;
      os_log_type_t v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "  Failed to fetch local identifier for cloud identifier %@ (%@); skipping entry",
        (uint8_t *)&v12,
        0x16u);
    }
  }
}

void sub_1001132A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001132EC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) count];
  if (result)
  {
    uint64_t v3 = 0;
    os_log_type_t v4 = VCPLogToOSLogType[4];
    os_log_type_t v5 = VCPLogToOSLogType[7];
    while (1)
    {
      int v7 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v3];
      if (objc_msgSend(v7, "vcp_needsProcessingForTask:", *(void *)(*(void *)(a1 + 40) + 24))) {
        break;
      }
      if ((int)MediaAnalysisLogLevel() >= 4)
      {
        os_log_type_t v10 = VCPLogInstance();
        if (os_log_type_enabled(v10, v4))
        {
          id v13 = [v7 localIdentifier];
          *(_DWORD *)long long buf = 138412290;
          uint64_t v17 = v13;
          _os_log_impl((void *)&_mh_execute_header, v10, v4, "  [%@] Asset already has analysis results; skipping entry",
            buf,
            0xCu);
        }
        goto LABEL_17;
      }
LABEL_18:

      id result = [*(id *)(a1 + 32) count];
      if (++v3 >= (unint64_t)result) {
        return result;
      }
    }
    unsigned int v8 = *(void **)(a1 + 48);
    id v9 = [v7 localIdentifier];
    os_log_type_t v10 = [v8 objectForKeyedSubscript:v9];

    if (v10)
    {
      [v10 persistToPhotosAsset:v7];
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        os_log_type_t v11 = VCPLogInstance();
        if (os_log_type_enabled(v11, v5))
        {
          int v12 = [v7 localIdentifier];
          *(_DWORD *)long long buf = 138412290;
          uint64_t v17 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, v5, "  [%@] Restored asset from backup", buf, 0xCu);
        }
      }
      ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    }
    else if ((int)MediaAnalysisLogLevel() >= 4)
    {
      __int16 v14 = VCPLogInstance();
      if (os_log_type_enabled(v14, v4))
      {
        os_log_type_t v15 = [v7 localIdentifier];
        *(_DWORD *)long long buf = 138412290;
        uint64_t v17 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, v4, "  [%@] Failed to find matching asset from backup; skipping entry",
          buf,
          0xCu);
      }
    }
LABEL_17:

    goto LABEL_18;
  }
  return result;
}

void sub_100113570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100113D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_10011443C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1001146C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100115068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1001154BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  os_log_type_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VCPMovieChangeEntry;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1001161CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1001168C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100116A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100116AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100116BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100116C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  os_log_type_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VCPPhotosAssetChangeManager;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100116FF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100117810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_100117FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_100118F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,void *a31,void *a32)
{
  _Unwind_Resume(a1);
}

void sub_10011A76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_10011D074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *a31,void *a32,_Unwind_Exception *exception_objecta,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,void *a40,void *a41)
{
  _Unwind_Resume(a1);
}

id sub_10011D7F4(uint64_t a1)
{
  return +[PHFaceChangeRequest deleteFaces:*(void *)(a1 + 32)];
}

void sub_10011DD14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10011E250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10011E620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10011E67C(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  id v1 = *(id *)(*(void *)(a1 + 32) + 16);
  id v2 = [v1 countByEnumeratingWithState:&v5 objects:v9 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v6;
    do
    {
      os_log_type_t v4 = 0;
      do
      {
        if (*(void *)v6 != v3) {
          objc_enumerationMutation(v1);
        }
        objc_msgSend(*(id *)(*((void *)&v5 + 1) + 8 * (void)v4), "publish", (void)v5);
        os_log_type_t v4 = (char *)v4 + 1;
      }
      while (v2 != v4);
      id v2 = [v1 countByEnumeratingWithState:&v5 objects:v9 count:16];
    }
    while (v2);
  }
}

void sub_10011E76C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10011E854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10011EAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10011EB44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10011EBE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10011ECC8(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 48));
  if (v2)
  {
    os_log_type_t v21 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    dispatch_semaphore_signal(v21);
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 5)
    {
      uint64_t v3 = VCPLogInstance();
      os_log_type_t v4 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v3, v4))
      {
        unsigned int v5 = [*(id *)(a1 + 40) count];
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v26) = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "[Sticker] Publishing %d results", buf, 8u);
      }
    }
    long long v6 = VCPSignPostLog();
    os_signpost_id_t v7 = os_signpost_id_generate(v6);

    long long v8 = VCPSignPostLog();
    id v9 = v8;
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "MADStickerScore_Persist", (const char *)&unk_1001F3BD3, buf, 2u);
    }

    os_log_type_t v10 = *(void **)(*(void *)(a1 + 32) + 8);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_10011F080;
    v23[3] = &unk_100219FC8;
    id v24 = *(id *)(a1 + 40);
    id v22 = 0;
    unsigned __int8 v11 = [v10 performChangesAndWait:v23 error:&v22];
    id v12 = v22;
    id v13 = VCPSignPostLog();
    __int16 v14 = v13;
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, v7, "MADStickerScore_Persist", (const char *)&unk_1001F3BD3, buf, 2u);
    }

    if ((v11 & 1) == 0)
    {
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        os_log_type_t v15 = VCPLogInstance();
        os_log_type_t v16 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v17 = [v12 description];
          *(_DWORD *)long long buf = 138412290;
          id v26 = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "[Sticker] Failed to persist results (%@)", buf, 0xCu);
        }
      }
      atomic_store(1u, (unsigned __int8 *)(*(void *)(a1 + 32) + 48));
      id v18 = [v12 copy];
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v20 = *(void **)(v19 + 56);
      *(void *)(v19 + 56) = v18;
    }
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 24));
  }
}

void sub_10011F030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10011F080(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v10;
    do
    {
      for (unint64_t i = 0; i != v2; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v3) {
          objc_enumerationMutation(v1);
        }
        unsigned int v5 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        long long v6 = objc_msgSend(v5, "asset", (void)v9);
        os_signpost_id_t v7 = +[PHAssetChangeRequest changeRequestForAsset:v6];

        [v5 stickerScore];
        *(float *)&double v8 = v8;
        [v7 setStickerConfidenceScore:1 stickerAlgorithmVersion:v8];
      }
      id v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v2);
  }
}

void sub_10011F1C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10011FE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,void *a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,const void *a30)
{
  sub_100004484(&a30);
  _Unwind_Resume(a1);
}

void sub_100120404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001206CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100120790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012083C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100120B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100120BD8(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_100120C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100120C3C(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_100120C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001226C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100122A64(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) cancelBlock];
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    os_log_type_t v4 = [*(id *)(a1 + 32) cancelBlock];
    char v5 = v4[2]();

    if (v5) {
      return 1;
    }
  }
  os_signpost_id_t v7 = +[VCPWatchdog sharedWatchdog];
  [v7 pet];

  return 0;
}

void sub_100122AF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100122B18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100122B28(uint64_t a1)
{
}

void sub_100122B30(uint64_t a1, unsigned char *a2, float a3)
{
  if (a3 >= 0.0)
  {
    char v5 = *(NSObject **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100122D00;
    block[3] = &unk_10021A170;
    long long v13 = *(_OWORD *)(a1 + 40);
    float v14 = a3;
    dispatch_async(v5, block);
  }
  long long v6 = [*(id *)(a1 + 40) cancelBlock];
  if (v6
    && ([*(id *)(a1 + 40) cancelBlock],
        os_signpost_id_t v7 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue(),
        int v8 = v7[2](),
        v7,
        v6,
        v8))
  {
    *a2 = 1;
    if ((int)MediaAnalysisLogLevel() < 6) {
      return;
    }
    long long v9 = VCPLogInstance();
    os_log_type_t v10 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 104);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v16 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%@ Cancelling Person Promoting", buf, 0xCu);
    }
  }
  else
  {
    long long v9 = +[VCPWatchdog sharedWatchdog];
    [v9 pet];
  }
}

void sub_100122CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100122D00(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) timeIntervalSinceNow];
  if (v2 < -5.0)
  {
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      uint64_t v3 = VCPLogInstance();
      os_log_type_t v4 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 104);
        double v6 = *(float *)(a1 + 48);
        int v10 = 138412546;
        uint64_t v11 = v5;
        __int16 v12 = 2048;
        double v13 = v6;
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "%@ Person Promoting progress: %.2f%%", (uint8_t *)&v10, 0x16u);
      }
    }
    uint64_t v7 = +[NSDate now];
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    long long v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
}

uint64_t sub_100122E28(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) cancelBlock];
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    os_log_type_t v4 = [*(id *)(a1 + 32) cancelBlock];
    char v5 = v4[2]();

    if (v5) {
      return 1;
    }
  }
  uint64_t v7 = +[VCPWatchdog sharedWatchdog];
  [v7 pet];

  return 0;
}

void sub_100122EB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100123454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10012350C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) cancelBlock];
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    os_log_type_t v4 = [*(id *)(a1 + 32) cancelBlock];
    char v5 = v4[2]();

    if (v5) {
      return 1;
    }
  }
  uint64_t v7 = +[VCPWatchdog sharedWatchdog];
  [v7 pet];

  return 0;
}

void sub_10012359C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001235C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    os_log_type_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 104);
      [v3 fractionCompleted];
      int v10 = 138412546;
      uint64_t v11 = v6;
      __int16 v12 = 2048;
      double v13 = (float)(v7 * 100.0);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Gallery updating - %.2f%%", (uint8_t *)&v10, 0x16u);
    }
  }
  int v8 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();

  return v8 ^ 1u;
}

void sub_1001236E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001254D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,void *a28,void *a29,void *a30,uint64_t a31,void *a32,void *a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,void *a58,void *a59,void *a60,void *a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&STACK[0x270], 8);
  _Block_object_dispose((const void *)(v65 - 256), 8);

  _Block_object_dispose(&a63, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10012596C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) cancelBlock];
  if (v2)
  {
    id v3 = (void *)v2;
    os_log_type_t v4 = [*(id *)(a1 + 32) cancelBlock];
    char v5 = v4[2]();

    if (v5) {
      return 1;
    }
  }
  float v7 = +[VCPWatchdog sharedWatchdog];
  [v7 pet];

  return 0;
}

void sub_1001259FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100125A20(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_log_type_t v4 = +[VCPWatchdog sharedWatchdog];
  [v4 pet];

  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x2050000000;
  char v5 = (void *)qword_100252778;
  uint64_t v27 = qword_100252778;
  if (!qword_100252778)
  {
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_100129C30;
    int v29 = &unk_100219E10;
    os_log_type_t v30 = &v24;
    sub_100129C30((uint64_t)buf);
    char v5 = (void *)v25[3];
  }
  id v6 = v5;
  _Block_object_dispose(&v24, 8);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    float v7 = objc_msgSend(v3, "entityIdentifier", v24);
    int v8 = [v7 stringValue];

    [*(id *)(a1 + 32) addObject:v8];
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      long long v9 = VCPLogInstance();
      os_log_type_t v10 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 104);
        id v12 = [v3 updateType];
        *(_DWORD *)long long buf = 138412802;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v12;
        *(_WORD *)&buf[22] = 2112;
        int v29 = v8;
        double v13 = "%@ Detected observation update (%lu) for %@";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v9, v10, v13, buf, 0x20u);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x2050000000;
  float v14 = (void *)qword_100252780;
  uint64_t v27 = qword_100252780;
  if (!qword_100252780)
  {
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_100129C88;
    int v29 = &unk_100219E10;
    os_log_type_t v30 = &v24;
    sub_100129C88((uint64_t)buf);
    float v14 = (void *)v25[3];
  }
  id v15 = v14;
  _Block_object_dispose(&v24, 8);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v16 = objc_msgSend(v3, "entityIdentifier", v24);
    int v8 = [v16 stringValue];

    [*(id *)(a1 + 32) addObject:v8];
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      long long v9 = VCPLogInstance();
      os_log_type_t v10 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 104);
        id v18 = [v3 updateType];
        *(_DWORD *)long long buf = 138412802;
        *(void *)&uint8_t buf[4] = v17;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v18;
        *(_WORD *)&buf[22] = 2112;
        int v29 = v8;
        double v13 = "%@ Detected entity update (%lu) for %@";
        goto LABEL_13;
      }
LABEL_14:
    }
LABEL_15:
  }
  uint64_t v19 = objc_msgSend(*(id *)(a1 + 40), "cancelBlock", v24);
  if (v19)
  {
    uint64_t v20 = [*(id *)(a1 + 40) cancelBlock];
    int v21 = v20[2]();

    uint64_t v22 = v21 ^ 1u;
  }
  else
  {
    uint64_t v22 = 1;
  }

  return v22;
}

void sub_100125DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100125E74(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v57 = a3;
  id v58 = a4;
  id v59 = a5;
  uint64_t v10 = mach_absolute_time();
  uint64_t v11 = VCPSignPostLog();
  os_signpost_id_t v12 = os_signpost_id_generate(v11);

  double v13 = VCPSignPostLog();
  float v14 = v13;
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_BEGIN, v12, "GalleryUpdate_updatePhotosWithEntityBlock", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  id v15 = +[VCPWatchdog sharedWatchdog];
  [v15 pet];

  ++*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
  uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 104);
  uint64_t v17 = [v9 stringValue];
  __int16 v56 = +[NSString stringWithFormat:@"%@[%@][%lu]", v16, v17, *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)];

  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v18 = VCPLogInstance();
    os_log_type_t v19 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = [v59 count];
      *(_DWORD *)long long buf = 138412546;
      id v64 = v56;
      __int16 v65 = 2048;
      id v66 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%@ Receiving Photos with %lu face observations ... ", buf, 0x16u);
    }
  }
  if (!*(void *)(a1 + 40)
    || (int v21 = *(void **)(a1 + 48),
        [v9 stringValue],
        uint64_t v22 = objc_claimAutoreleasedReturnValue(),
        LOBYTE(v21) = [v21 containsObject:v22],
        v22,
        (v21 & 1) != 0))
  {
LABEL_10:
    uint64_t v24 = +[MADGDUtilities sharedInstance];
    unsigned int v25 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "vcp_isSyndicationLibrary");
    uint64_t v26 = *(void *)(a1 + 32);
    uint64_t v27 = *(void *)(v26 + 24);
    uint64_t v28 = *(void *)(v26 + 64);
    if (v25)
    {
      uint64_t v29 = *(void *)(a1 + 72);
      id v61 = 0;
      unsigned __int8 v30 = [v24 updatePersonWithSyndicationLibrary:v27 service:v28 entityIdentifier:v9 entityClass:v57 observationIDs:v59 taggedPersonUUID:v58 cancelOrExtendTimeoutBlock:v29 error:&v61];
      id v31 = v61;
      if (v30)
      {
        if ((int)MediaAnalysisLogLevel() < 6) {
          goto LABEL_36;
        }
        id v32 = VCPLogInstance();
        os_log_type_t v33 = VCPLogToOSLogType[6];
        if (!os_log_type_enabled(v32, v33)) {
          goto LABEL_35;
        }
        *(_DWORD *)long long buf = 138412290;
        id v64 = v56;
        uint64_t v34 = "%@ Updated Syndication Library";
        goto LABEL_19;
      }
      if ((int)MediaAnalysisLogLevel() < 3) {
        goto LABEL_36;
      }
      id v32 = VCPLogInstance();
      os_log_type_t v49 = VCPLogToOSLogType[3];
      if (!os_log_type_enabled(v32, v49)) {
        goto LABEL_35;
      }
      *(_DWORD *)long long buf = 138412546;
      id v64 = v56;
      __int16 v65 = 2112;
      id v66 = v31;
      uint64_t v34 = "%@ Failed to update Syndication Library - %@";
    }
    else
    {
      uint64_t v35 = *(void *)(a1 + 64);
      uint64_t v36 = *(void *)(a1 + 72);
      id v60 = 0;
      unsigned __int8 v37 = [v24 updatePersonWithPhotosLibrary:v27 service:v28 entityIdentifier:v9 entityClass:v57 observationIDs:v59 taggedPersonUUID:v58 keyFaceLocalIdentifiers:v35 cancelOrExtendTimeoutBlock:v36 error:&v60];
      id v31 = v60;
      if (v37)
      {
        if ((int)MediaAnalysisLogLevel() < 6) {
          goto LABEL_36;
        }
        id v32 = VCPLogInstance();
        os_log_type_t v33 = VCPLogToOSLogType[6];
        if (!os_log_type_enabled(v32, v33)) {
          goto LABEL_35;
        }
        *(_DWORD *)long long buf = 138412290;
        id v64 = v56;
        uint64_t v34 = "%@ Updated Photos";
LABEL_19:
        long long v38 = v32;
        os_log_type_t v39 = v33;
        uint32_t v40 = 12;
LABEL_34:
        _os_log_impl((void *)&_mh_execute_header, v38, v39, v34, buf, v40);
        goto LABEL_35;
      }
      if ((int)MediaAnalysisLogLevel() < 3) {
        goto LABEL_36;
      }
      id v32 = VCPLogInstance();
      os_log_type_t v49 = VCPLogToOSLogType[3];
      if (!os_log_type_enabled(v32, v49))
      {
LABEL_35:

LABEL_36:
        long long v50 = VCPSignPostLog();
        long long v51 = v50;
        if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v50))
        {
          *(_WORD *)long long buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v51, OS_SIGNPOST_INTERVAL_END, v12, "GalleryUpdate_updatePhotosWithEntityBlock", (const char *)&unk_1001F3BD3, buf, 2u);
        }

        if (v10)
        {
          mach_absolute_time();
          VCPPerformance_LogMeasurement();
        }
        long long v47 = [*(id *)(a1 + 32) cancelBlock];
        if (v47)
        {
          long long v52 = [*(id *)(a1 + 32) cancelBlock];
          int v48 = v52[2]();
        }
        else
        {
          int v48 = 0;
        }
        goto LABEL_44;
      }
      *(_DWORD *)long long buf = 138412546;
      id v64 = v56;
      __int16 v65 = 2112;
      id v66 = v31;
      uint64_t v34 = "%@ Failed to update Photos - %@";
    }
    long long v38 = v32;
    os_log_type_t v39 = v49;
    uint32_t v40 = 22;
    goto LABEL_34;
  }
  uint64_t v41 = [v9 stringValue];
  long long v62 = v41;
  uint64_t v42 = +[NSArray arrayWithObjects:&v62 count:1];
  long long v43 = +[PHPerson fetchPersonsWithMdIDs:v42 options:*(void *)(a1 + 56)];
  BOOL v44 = [v43 count] == 0;

  if (v44)
  {
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      long long v54 = VCPLogInstance();
      os_log_type_t v55 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v54, v55))
      {
        *(_DWORD *)long long buf = 138412290;
        id v64 = v56;
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "%@ Person not in Photos DB (should be according to bookmark)", buf, 0xCu);
      }
    }
    goto LABEL_10;
  }
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    long long v45 = VCPLogInstance();
    os_log_type_t v46 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v45, v46))
    {
      *(_DWORD *)long long buf = 138412290;
      id v64 = v56;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "%@ Person already in Photos DB; skip updating", buf, 0xCu);
    }
  }
  id v31 = [*(id *)(a1 + 32) cancelBlock];
  if (!v31)
  {
    int v48 = 0;
    goto LABEL_45;
  }
  long long v47 = [*(id *)(a1 + 32) cancelBlock];
  int v48 = v47[2]();
LABEL_44:

LABEL_45:
  return v48 ^ 1u;
}

void sub_1001265A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1001266C0(uint64_t a1, unsigned char *a2, float a3)
{
  if (a3 >= 0.0)
  {
    char v5 = *(NSObject **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100126890;
    block[3] = &unk_10021A170;
    long long v13 = *(_OWORD *)(a1 + 40);
    float v14 = a3;
    dispatch_async(v5, block);
  }
  id v6 = [*(id *)(a1 + 40) cancelBlock];
  if (v6
    && ([*(id *)(a1 + 40) cancelBlock],
        float v7 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue(),
        int v8 = v7[2](),
        v7,
        v6,
        v8))
  {
    *a2 = 1;
    if ((int)MediaAnalysisLogLevel() < 6) {
      return;
    }
    id v9 = VCPLogInstance();
    os_log_type_t v10 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 104);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v16 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%@ Cancelling Person Promoting", buf, 0xCu);
    }
  }
  else
  {
    id v9 = +[VCPWatchdog sharedWatchdog];
    [v9 pet];
  }
}

void sub_100126868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100126890(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) timeIntervalSinceNow];
  if (v2 < -5.0)
  {
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      id v3 = VCPLogInstance();
      os_log_type_t v4 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 104);
        double v6 = *(float *)(a1 + 48);
        int v10 = 138412546;
        uint64_t v11 = v5;
        __int16 v12 = 2048;
        double v13 = v6;
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "%@ Person Promoting progress: %.2f%%", (uint8_t *)&v10, 0x16u);
      }
    }
    uint64_t v7 = +[NSDate now];
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
}

void sub_1001269B8(uint64_t a1, unsigned char *a2, double a3)
{
  if (a3 >= 0.0)
  {
    uint64_t v5 = *(NSObject **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100126B88;
    block[3] = &unk_10021CB30;
    long long v13 = *(_OWORD *)(a1 + 40);
    double v14 = a3;
    dispatch_async(v5, block);
  }
  double v6 = [*(id *)(a1 + 40) cancelBlock];
  if (v6
    && ([*(id *)(a1 + 40) cancelBlock],
        uint64_t v7 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue(),
        int v8 = v7[2](),
        v7,
        v6,
        v8))
  {
    *a2 = 1;
    if ((int)MediaAnalysisLogLevel() < 6) {
      return;
    }
    id v9 = VCPLogInstance();
    os_log_type_t v10 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 104);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v16 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%@ Cancelling Pet Promoting", buf, 0xCu);
    }
  }
  else
  {
    id v9 = +[VCPWatchdog sharedWatchdog];
    [v9 pet];
  }
}

void sub_100126B60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100126B88(void *a1)
{
  [*(id *)(*(void *)(a1[5] + 8) + 40) timeIntervalSinceNow];
  if (v2 < -5.0)
  {
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      id v3 = VCPLogInstance();
      os_log_type_t v4 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = *(void *)(a1[4] + 104);
        uint64_t v6 = a1[6];
        int v10 = 138412546;
        uint64_t v11 = v5;
        __int16 v12 = 2048;
        uint64_t v13 = v6;
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "%@ Pet Promoting progress: %.2f%%", (uint8_t *)&v10, 0x16u);
      }
    }
    uint64_t v7 = +[NSDate now];
    uint64_t v8 = *(void *)(a1[5] + 8);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
}

void sub_1001288F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100128C58(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) cancelBlock];
  if (v2)
  {
    id v3 = (void *)v2;
    os_log_type_t v4 = [*(id *)(a1 + 32) cancelBlock];
    char v5 = v4[2]();

    if (v5) {
      return 1;
    }
  }
  uint64_t v7 = +[VCPWatchdog sharedWatchdog];
  [v7 pet];

  return 0;
}

void sub_100128CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100128D0C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) cancelBlock];
  if (v2)
  {
    id v3 = (void *)v2;
    os_log_type_t v4 = [*(id *)(a1 + 32) cancelBlock];
    char v5 = v4[2]();

    if (v5) {
      return 1;
    }
  }
  uint64_t v7 = +[VCPWatchdog sharedWatchdog];
  [v7 pet];

  return 0;
}

void sub_100128D9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100128DC0(uint64_t a1, float a2)
{
  os_log_type_t v4 = [*(id *)(a1 + 32) cancelBlock];
  if (v4
    && ([*(id *)(a1 + 32) cancelBlock],
        char v5 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue(),
        char v6 = v5[2](),
        v5,
        v4,
        (v6 & 1) != 0))
  {
    int v7 = 1;
  }
  else
  {
    uint64_t v8 = +[VCPWatchdog sharedWatchdog];
    [v8 pet];

    int v7 = 0;
  }
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    id v9 = VCPLogInstance();
    os_log_type_t v10 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 104);
      int v13 = 138412802;
      uint64_t v14 = v11;
      __int16 v15 = 2048;
      double v16 = a2 * 100.0;
      __int16 v17 = 1024;
      int v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%@ VUWGallery plugin update progress: %.2f%%, isCancelled %d", (uint8_t *)&v13, 0x1Cu);
    }
  }
  return v7 ^ 1u;
}

void sub_100128F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001297D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100129A68(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("GDVUChangeBookmark");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252768 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_1000CACD4();
    sub_100129AC0();
  }
}

void sub_100129AC0()
{
  v1[0] = 0;
  if (!qword_100252770)
  {
    v1[1] = _NSConcreteStackBlock;
    v1[2] = 3221225472;
    v1[3] = sub_100129BBC;
    v1[4] = &unk_100219838;
    v1[5] = v1;
    long long v2 = off_10021E510;
    uint64_t v3 = 0;
    qword_100252770 = _sl_dlopen();
  }
  id v0 = (void *)v1[0];
  if (!qword_100252770)
  {
    id v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_100129BBC()
{
  uint64_t result = _sl_dlopen();
  qword_100252770 = result;
  return result;
}

Class sub_100129C30(uint64_t a1)
{
  sub_100129AC0();
  Class result = objc_getClass("GDVUObservationUpdate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252778 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_1000CACFC();
    return (Class)sub_100129C88(v3);
  }
  return result;
}

MADProgressManager *sub_100129C88(uint64_t a1)
{
  sub_100129AC0();
  Class result = (MADProgressManager *)objc_getClass("GDVUEntityUpdate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252780 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_1000CAD24();
    return [(MADProgressManager *)v3 initWithPhotoLibrary:v5];
  }
  return result;
}

void sub_100129D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100129FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012A7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_10012AC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  uint64_t v23 = v21;

  _Unwind_Resume(a1);
}

void sub_10012B53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29)
{
  _Unwind_Resume(a1);
}

void sub_10012BD00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012BFA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012C17C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012C454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10012C994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012CCAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012D088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012D70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10012DBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_10012DE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10012E314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_10012E5DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10012E5FC(id a1)
{
  return 0;
}

void sub_10012E6A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012E728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VCPPhotosMaintenanceProcessingTask;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_10012EE2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012FA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,void *a33)
{
  _Unwind_Resume(a1);
}

void sub_10013065C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,char a31)
{
  _Block_object_dispose((const void *)(v38 - 208), 8);
  _Block_object_dispose(&a31, 8);

  _Unwind_Resume(a1);
}

id sub_1001307F4(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 path];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_100130838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100130848(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100130858(uint64_t a1)
{
}

void sub_100130860(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      char v6 = VCPLogInstance();
      os_log_type_t v7 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v6, v7))
      {
        LOWORD(v13) = 0;
        uint64_t v8 = "  Successfully encrypted intermediate backup file";
        id v9 = v6;
        os_log_type_t v10 = v7;
        uint32_t v11 = 2;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v13, v11);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else if ((int)MediaAnalysisLogLevel() >= 3)
  {
    char v6 = VCPLogInstance();
    os_log_type_t v12 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v6, v12))
    {
      int v13 = 138412290;
      id v14 = v5;
      uint64_t v8 = "  Failed to encrypt intermediate backup file (%@); backup failed";
      id v9 = v6;
      os_log_type_t v10 = v12;
      uint32_t v11 = 12;
      goto LABEL_8;
    }
LABEL_9:
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_1001309B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100130C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100130CC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && ((*(uint64_t (**)(void))(v1 + 16))() & 1) != 0) {
    return 1;
  }
  uint64_t v3 = +[VCPWatchdog sharedWatchdog];
  [v3 pet];

  return 0;
}

void sub_100130D1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100131678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Unwind_Resume(a1);
}

id sub_100131804(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    long long v2 = +[VCPWatchdog sharedWatchdog];
    [v2 pet];
  }
  return v1;
}

void sub_100131850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100131860(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    long long v2 = +[VCPWatchdog sharedWatchdog];
    [v2 pet];
  }
  return v1;
}

void sub_1001318AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001318BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_100131A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100131C00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100132140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100132414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100132484(uint64_t a1)
{
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v17 objects:v27 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v18;
    os_log_type_t type = VCPLogToOSLogType[7];
    do
    {
      for (unint64_t i = 0; i != v2; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v3) {
          objc_enumerationMutation(obj);
        }
        id v5 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        os_log_type_t v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
        signed __int16 v8 = (unsigned __int16)[v7 intValue];

        id v9 = [*(id *)(a1 + 40) _computeSyncPayloadForAsset:v5 fromDatabase:*(void *)(a1 + 48)];
        os_log_type_t v10 = +[PHAssetChangeRequest changeRequestForAsset:v5];
        int v11 = v8;
        [v10 setLocalAnalysisStage:v8];
        [v10 setComputeSyncMediaAnalysisPayload:v9];
        if ((int)MediaAnalysisLogLevel() >= 7)
        {
          os_log_type_t v12 = VCPLogInstance();
          if (os_log_type_enabled(v12, type))
          {
            int v13 = [v5 localIdentifier];
            unsigned int v14 = [v9 length];
            *(_DWORD *)long long buf = 138412802;
            uint64_t v22 = v13;
            __int16 v23 = 1024;
            int v24 = v11;
            __int16 v25 = 1024;
            unsigned int v26 = v14;
            _os_log_impl((void *)&_mh_execute_header, v12, type, "[ComputeSync|Backfill][%@] Publish analysis stage (%d) and compute sync payload (%d bytes)", buf, 0x18u);
          }
        }
      }
      id v2 = [obj countByEnumeratingWithState:&v17 objects:v27 count:16];
    }
    while (v2);
  }
}

void sub_1001326A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_100132D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_10013307C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1001330D8(uint64_t a1)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v11 objects:v19 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v12;
    os_log_type_t v4 = VCPLogToOSLogType[7];
    do
    {
      for (unint64_t i = 0; i != v2; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v3) {
          objc_enumerationMutation(v1);
        }
        char v6 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        signed __int16 v8 = +[PHAssetChangeRequest changeRequestForAsset:v6];
        [v8 setVideoEmbeddingVersion:70];
        if ((int)MediaAnalysisLogLevel() >= 7)
        {
          id v9 = VCPLogInstance();
          if (os_log_type_enabled(v9, v4))
          {
            os_log_type_t v10 = [v6 localIdentifier];
            *(_DWORD *)long long buf = 138412546;
            double v16 = v10;
            __int16 v17 = 1024;
            int v18 = 70;
            _os_log_impl((void *)&_mh_execute_header, v9, v4, "[VideoEmbedding|Backfill][%@] Publish video embedding version (v%d)", buf, 0x12u);
          }
        }
      }
      id v2 = [v1 countByEnumeratingWithState:&v11 objects:v19 count:16];
    }
    while (v2);
  }
}

void sub_100133298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100133834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_100133A94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100133AC4(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    id v2 = +[VCPWatchdog sharedWatchdog];
    [v2 pet];
  }
  return v1;
}

void sub_100133B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100133CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001350E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

id sub_100135284(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_10013530C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("GDVUVisualUnderstandingService");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252788 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_1000CACAC();
    sub_100135364();
  }
}

void sub_100135364()
{
  v1[0] = 0;
  if (!qword_100252790)
  {
    v1[1] = _NSConcreteStackBlock;
    v1[2] = 3221225472;
    v1[3] = sub_100135460;
    v1[4] = &unk_100219838;
    v1[5] = v1;
    long long v2 = off_10021E568;
    uint64_t v3 = 0;
    qword_100252790 = _sl_dlopen();
  }
  id v0 = (void *)v1[0];
  if (!qword_100252790)
  {
    id v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_100135460()
{
  uint64_t result = _sl_dlopen();
  qword_100252790 = result;
  return result;
}

void sub_1001354D4(uint64_t a1)
{
  sub_100135364();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("GDVUEntityRecognitionClient");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252798 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    long long v2 = (void *)sub_1000CAC84();
    +[PHAssetResourceManager vcp_reportDownloadBytes:v4 taskID:v5];
  }
}

void sub_100135DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id obj)
{
  _Block_object_dispose((const void *)(v13 - 160), 8);
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100135E50(uint64_t a1, double a2)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    unint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2048;
      double v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@] Download progress: %.2f", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_100135F30(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = MediaAnalysisLogLevel();
  if (v3)
  {
    if (v4 >= 3)
    {
      os_log_type_t v5 = VCPLogInstance();
      os_log_type_t v6 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = [v3 description];
        int v13 = 138412546;
        uint64_t v14 = v7;
        __int16 v15 = 2112;
        double v16 = v8;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%@] Failed to download asset resource (%@)", (uint8_t *)&v13, 0x16u);
      }
    }
    if (objc_msgSend(v3, "mad_isDownloadThrottling")) {
      int v9 = -23808;
    }
    else {
      int v9 = -23802;
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v9;
  }
  else
  {
    if (v4 >= 7)
    {
      double v10 = VCPLogInstance();
      os_log_type_t v11 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        int v13 = 138412290;
        uint64_t v14 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%@] Successfully downloaded asset resource", (uint8_t *)&v13, 0xCu);
      }
    }
    objc_msgSend(*(id *)(a1 + 64), "vcp_reportDownloadBytes:taskID:", objc_msgSend(*(id *)(a1 + 40), "length"), *(void *)(a1 + 72));
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

id sub_1001360E4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendData:a2];
}

void sub_1001366E0(uint64_t a1)
{
  long long v2 = +[MADStateHandler sharedStateHandler];
  objc_msgSend(v2, "addBreadcrumb:", @"Publishing batch size %lu", objc_msgSend(*(id *)(a1 + 32), "count"));

  unsigned int v3 = [*(id *)(a1 + 32) publish];
  if (v3)
  {
    unsigned int v4 = v3;
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      os_log_type_t v5 = VCPLogInstance();
      os_log_type_t v6 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v10 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to publish batch: %@", buf, 0xCu);
      }
    }
    *(_DWORD *)(*(void *)(a1 + 40) + 24) = v4;
  }
  uint64_t v8 = +[MADStateHandler sharedStateHandler];
  objc_msgSend(v8, "addBreadcrumb:", @"Finished publishing batch size %lu", objc_msgSend(*(id *)(a1 + 32), "count"));
}

void sub_1001372C8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 232), 8);
  _Unwind_Resume(a1);
}

id sub_10013731C(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

id sub_100137324(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

id sub_10013732C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _processAssetsInBatch:*(void *)(a1 + 40)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

id sub_100137364(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _processAssetsInBatch:*(void *)(a1 + 40)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

id sub_10013739C(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

id sub_1001373A4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _processAssetsInBatch:*(void *)(a1 + 40)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

CFStringRef VCPCoreAnalyticsFieldForFull(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  switch(a4)
  {
    case 0:
      if (a1)
      {
        CFStringRef result = @"UnifiedImageOnlyEvaluationStepSeconds";
      }
      else if (a2 == 1 && a3 == 8)
      {
        CFStringRef result = @"UnifiedLivePhotoEvaluationStepSeconds";
      }
      else
      {
        if (a2 != 2) {
          goto LABEL_37;
        }
        CFStringRef result = @"UnifiedMovieEvaluationStepSeconds";
      }
      break;
    case 1:
      if (a1)
      {
        CFStringRef result = @"UnifiedImageOnlyDownloadStepSeconds";
      }
      else if (a2 == 1 && a3 == 8)
      {
        CFStringRef result = @"UnifiedLivePhotoDownloadStepSeconds";
      }
      else
      {
        if (a2 != 2) {
          goto LABEL_37;
        }
        CFStringRef result = @"UnifiedMovieDownloadStepSeconds";
      }
      break;
    case 2:
      if (a1)
      {
        CFStringRef result = @"UnifiedImageOnlyPrepareStepSeconds";
      }
      else if (a2 == 1 && a3 == 8)
      {
        CFStringRef result = @"UnifiedLivePhotoPrepareStepSeconds";
      }
      else
      {
        if (a2 != 2) {
          goto LABEL_37;
        }
        CFStringRef result = @"UnifiedMoviePrepareStepSeconds";
      }
      break;
    case 3:
      if (a1)
      {
        CFStringRef result = @"UnifiedImageOnlyProcessStepSeconds";
      }
      else if (a2 == 1 && a3 == 8)
      {
        CFStringRef result = @"UnifiedLivePhotoProcessStepSeconds";
      }
      else
      {
        if (a2 != 2) {
          goto LABEL_37;
        }
        CFStringRef result = @"UnifiedMovieProcessStepSeconds";
      }
      break;
    case 4:
      if (a1)
      {
        CFStringRef result = @"UnifiedImageOnlyPublishStepSeconds";
      }
      else if (a2 == 1 && a3 == 8)
      {
        CFStringRef result = @"UnifiedLivePhotoPublishStepSeconds";
      }
      else
      {
        if (a2 != 2) {
          goto LABEL_37;
        }
        CFStringRef result = @"UnifiedMoviePublishStepSeconds";
      }
      break;
    default:
LABEL_37:
      uint64_t v10 = v4;
      uint64_t v11 = v5;
      if ((int)MediaAnalysisLogLevel() >= 4)
      {
        uint64_t v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v7, v8))
        {
          *(_WORD *)int v9 = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, v8, "[VCPPhotosCoreAnalytics] Could not determine analysis step field name", v9, 2u);
        }
      }
      CFStringRef result = 0;
      break;
  }
  return result;
}

void VCPCoreAnalyticsQoSReportSpeed(void *a1, double a2)
{
  id v3 = a1;
  if (v3)
  {
    uint64_t v4 = +[VCPMADCoreAnalyticsManager sharedManager];
    v10[0] = v3;
    v9[0] = VCPAnalyticsFieldKeyTaskName;
    v9[1] = VCPAnalyticsFieldKeyQoS;
    qos_class_t v5 = qos_class_self();
    os_log_type_t v6 = VCPMAQoSDescription(v5);
    v10[1] = v6;
    v9[2] = VCPAnalyticsFieldKeyAvgSpeed;
    uint64_t v7 = +[NSNumber numberWithDouble:a2];
    _DWORD v10[2] = v7;
    os_log_type_t v8 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:3];
    [v4 sendEvent:VCPAnalyticsEventDasDutyCycleTaskKey withAnalytics:v8];
  }
}

void sub_1001378AC(_Unwind_Exception *a1)
{
  os_log_type_t v6 = v4;

  _Unwind_Resume(a1);
}

void VCPCoreAnalyticsReportEventFullAnalysisOverallProgress(void *a1)
{
  id v88 = a1;
  if ([v88 isSystemPhotoLibrary])
  {
    v87 = @"/var/mobile/Media/PhotoData/Photos.sqlite";
  }
  else
  {
    uint64_t v1 = [v88 photoLibraryURL];
    long long v2 = [v1 path];
    v87 = [v2 stringByAppendingPathComponent:@"database/Photos.sqlite"];
  }
  id v3 = +[NSFileManager defaultManager];
  uint64_t v4 = [v3 attributesOfItemAtPath:v87 error:0];
  id v5 = [v4 fileSize];

  if ([v88 isCloudPhotoLibraryEnabled])
  {
    CFStringRef v6 = @"iCPL";
LABEL_8:
    uint64_t v84 = (void *)v6;
    goto LABEL_10;
  }
  if ([v88 isSystemPhotoLibrary])
  {
    CFStringRef v6 = @"SPL";
    goto LABEL_8;
  }
  uint64_t v84 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"wellKnown_%ld", [v88 wellKnownPhotoLibraryIdentifier]);
LABEL_10:
  __int16 v72 = +[NSPredicate predicateWithFormat:@"kindSubtype == %d", 2];
  unint64_t v7 = (unint64_t)objc_msgSend(v88, "vcp_assetCountWithInternalPredicate:forTaskID:");
  uint64_t v71 = +[NSPredicate predicateWithFormat:@"kind == %d", 1];
  unint64_t v8 = (unint64_t)objc_msgSend(v88, "vcp_assetCountWithInternalPredicate:forTaskID:");
  v70 = +[NSPredicate predicateWithFormat:@"kind == %d && kindSubtype != %d", 0, 2];
  unint64_t v9 = (unint64_t)objc_msgSend(v88, "vcp_assetCountWithInternalPredicate:forTaskID:");
  uint64_t v10 = +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:v88];
  uint64_t v11 = (char *)[v10 valueForKey:@"NumberOfTimesScheduledWithPendingAnalysisInLatestVersion"];
  id v12 = [v10 valueForKey:@"NumberOfTimesScheduledWithoutPendingAnalysisInLatestVersion"];
  id v13 = [v10 valueForKey:@"NumberOfTimesScheduledDatabaseCreation"];
  id v14 = [v10 valueForKey:@"TotalAnalyzingTimeDatabaseCreation"];
  uint64_t v86 = [v10 creationDate];
  id v77 = v12;
  long long v79 = v11;
  uint64_t v74 = (uint64_t)v14;
  id v75 = v13;
  __int16 v15 = +[NSCalendar currentCalendar];
  double v16 = +[NSDate now];
  __int16 v17 = [v15 components:16 fromDate:v86 toDate:v16 options:0];

  long long v67 = v17;
  uint64_t v82 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%ld", [v17 day]);
  int v18 = VCPStartTimestampKeyForTask(1);
  id v19 = [v10 valueForKey:v18];

  v85 = +[NSDate dateWithTimeIntervalSinceReferenceDate:(double)(uint64_t)v19];
  long long v20 = +[NSCalendar currentCalendar];
  int v21 = +[NSDate now];
  uint64_t v22 = [v20 components:16 fromDate:v85 toDate:v21 options:0];

  id v66 = v22;
  v83 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%d", [v22 day]);
  uint64_t v89 = 0;
  [v10 getBlacklistSizeForThreshold:2 size:&v89];
  unint64_t v73 = (unint64_t)v5;
  id v23 = +[PHAsset vcp_fullAnalysisTypesForAssetType:1];
  int v24 = [v10 getAssetCountMatchingAllFlags:1];
  id v25 = [v10 getAssetCountMatchingStatsFlags:1 andAnalysisTypes:v23];
  unint64_t v26 = (unint64_t)+[PHAsset vcp_fullAnalysisTypesForAssetType:2];
  uint64_t v27 = [v10 getAssetCountMatchingAllFlags:2];
  id v28 = [v10 getAssetCountMatchingStatsFlags:2 andAnalysisTypes:v26 & 0xFFFFFFFFFFEFFFFFLL];
  id v29 = +[PHAsset vcp_fullAnalysisTypesForAssetType:4];
  unsigned __int8 v30 = [v10 getAssetCountMatchingAllFlags:4];
  id v31 = [v10 getAssetCountMatchingStatsFlags:4 andAnalysisTypes:v29];
  if (v7) {
    unint64_t v32 = 100 * (uint64_t)v28 / v7;
  }
  else {
    unint64_t v32 = 100;
  }
  unint64_t v33 = 100;
  if (v32 >= 0x64) {
    unint64_t v34 = 100;
  }
  else {
    unint64_t v34 = v32;
  }
  if (v9) {
    unint64_t v33 = 100 * (uint64_t)v25 / v9;
  }
  unint64_t v35 = 100;
  if (v33 >= 0x64) {
    unint64_t v33 = 100;
  }
  unint64_t v68 = v33;
  if (v8) {
    unint64_t v35 = 100 * (uint64_t)v31 / v8;
  }
  unint64_t v36 = 100;
  if (v35 >= 0x64) {
    unint64_t v35 = 100;
  }
  unint64_t v69 = v35;
  if (v7) {
    unint64_t v36 = 100 * (v27 - (unsigned char *)v28) / v7;
  }
  if ((float)v36 <= 100.0) {
    float v37 = (float)v36;
  }
  else {
    float v37 = 100.0;
  }
  if (v9) {
    unint64_t v38 = 100 * (v24 - (unsigned char *)v25) / v9;
  }
  else {
    unint64_t v38 = 100;
  }
  if ((float)v38 <= 100.0) {
    float v39 = (float)v38;
  }
  else {
    float v39 = 100.0;
  }
  if (v8) {
    unint64_t v40 = 100 * (v30 - (unsigned char *)v31) / v8;
  }
  else {
    unint64_t v40 = 100;
  }
  if ((float)v40 <= 100.0) {
    float v41 = (float)v40;
  }
  else {
    float v41 = 100.0;
  }
  v81 = +[VCPMADCoreAnalyticsManager sharedManager];
  v90[0] = @"BlacklistedAssetsCount";
  id v64 = +[NSNumber numberWithUnsignedLong:v89];
  v91[0] = v64;
  v90[1] = @"CurrentAnalysisVersion";
  __int16 v65 = +[NSString stringWithFormat:@"%d", 70];
  v91[1] = v65;
  v90[2] = @"DatabaseSize";
  __int16 v63 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", (unint64_t)[v10 sizeBytes] >> 20);
  v91[2] = v63;
  v91[3] = v83;
  v90[3] = @"DaysSinceCurrentAnalysisVersionEstablished";
  v90[4] = @"DaysSinceDatabaseEstablished";
  v91[4] = v82;
  v91[5] = v84;
  v90[5] = @"LibraryType";
  v90[6] = @"NumLivePhotosFullResource";
  long long v62 = +[NSNumber numberWithUnsignedInteger:v7];
  v91[6] = v62;
  v90[7] = @"NumMoviesFullResource";
  id v61 = +[NSNumber numberWithUnsignedInteger:v8];
  v91[7] = v61;
  v90[8] = @"NumPhotosFullResource";
  uint64_t v42 = +[NSNumber numberWithUnsignedInteger:v9];
  long long v43 = &v79[(void)v77];
  v80 = (void *)v42;
  v91[8] = v42;
  v90[9] = @"NumScheduleSinceCurrentAnalysisVersionEstablished";
  long long v78 = +[NSNumber numberWithLongLong:v43];
  v91[9] = v78;
  v90[10] = @"NumScheduleSinceDatabaseEstablished";
  uint64_t v44 = +[NSNumber numberWithLongLong:v75];
  *(float *)&double v45 = (float)v34;
  __int16 v76 = (void *)v44;
  v91[10] = v44;
  v90[11] = @"PercentageLivePhotoFullResource";
  uint64_t v46 = +[NSNumber numberWithFloat:v45];
  *(float *)&double v47 = fmaxf(v37, 0.0);
  id v60 = (void *)v46;
  v91[11] = v46;
  v90[12] = @"PercentageLivePhotoPartialResource";
  int v48 = +[NSNumber numberWithFloat:v47];
  *(float *)&double v49 = (float)v69;
  v91[12] = v48;
  v90[13] = @"PercentageMovieFullResource";
  long long v50 = +[NSNumber numberWithFloat:v49];
  v91[13] = v50;
  v90[14] = @"PercentageMoviePartialResource";
  long long v51 = +[NSNumber numberWithFloat:COERCE_DOUBLE((unint64_t)COERCE_UNSIGNED_INT(fmaxf(v41, 0.0)))];
  *(float *)&double v52 = (float)v68;
  v91[14] = v51;
  v90[15] = @"PercentagePhotoFullResource";
  long long v53 = +[NSNumber numberWithFloat:v52];
  *(float *)&double v54 = fmaxf(v39, 0.0);
  v91[15] = v53;
  v90[16] = @"PercentagePhotoPartialResource";
  os_log_type_t v55 = +[NSNumber numberWithFloat:v54];
  v91[16] = v55;
  v90[17] = @"PhotoLibraryScale";
  __int16 v56 = objc_msgSend(v88, "vcp_libraryScaleShortDescription");
  v91[17] = v56;
  v90[18] = @"PhotosLibraryDatabaseSize";
  id v57 = +[NSNumber numberWithUnsignedLongLong:v73 >> 20];
  v91[18] = v57;
  v90[19] = @"TotalAnalyzingTimeInMinutes";
  id v58 = +[NSNumber numberWithDouble:(double)v74 / 60.0];
  v91[19] = v58;
  id v59 = +[NSDictionary dictionaryWithObjects:v91 forKeys:v90 count:20];
  [v81 sendEvent:@"com.apple.mediaanalysisd.fullanalysisoverallprogress" withAnalytics:v59];
}

void sub_10013826C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_Unwind_Exception *exception_object,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  _Unwind_Resume(a1);
}

uint64_t VCPCoreAnalyticsReportEventBackgroundDailyReportForActivity(void *a1, uint64_t a2, void *a3)
{
  v155 = a1;
  id v147 = a3;
  id v5 = VCPSignPostLog();
  os_signpost_id_t v6 = os_signpost_id_generate(v5);

  unint64_t v7 = VCPSignPostLog();
  unint64_t v8 = v7;
  unint64_t v137 = v6 - 1;
  os_signpost_id_t spid = v6;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_BEGIN, v6, "VCPAnalyticsEventBackgroundDailyReport", "%d", buf, 8u);
  }
  uint64_t v154 = a2;

  unint64_t v9 = v147;
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v10 = VCPLogInstance();
    os_log_type_t v11 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v10, v11))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Starting daily report for activity %d", buf, 8u);
    }

    unint64_t v9 = v147;
  }
  v153 = +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:v9];
  id v12 = objc_msgSend(v9, "vcp_assetCountForTaskID:", a2);
  id v13 = objc_msgSend(v9, "vcp_processedAssetCountForTaskID:", a2);
  int v14 = [v153 queryAssetCountForTaskID:a2];
  if (!v155 || (v155[2]() & 1) == 0)
  {
    double v16 = VCPStartTimestampKeyForTask(a2);
    *(void *)os_log_type_t type = v13;
    uint64_t v145 = (uint64_t)v12;
    id v17 = [v153 valueForKey:v16];

    id v18 = [v153 valueForKey:@"OSVersionUpdateTimestamp"];
    v148 = +[NSDate dateWithTimeIntervalSinceReferenceDate:(double)(uint64_t)v17];
    v139 = +[NSDate dateWithTimeIntervalSinceReferenceDate:(double)(uint64_t)v18];
    if (v17)
    {
      id v19 = +[NSCalendar currentCalendar];
      long long v20 = +[NSDate now];
      int v21 = [v19 components:16 fromDate:v148 toDate:v20 options:0];
      uint64_t v140 = (uint64_t)[v21 day];

      if (v18)
      {
LABEL_13:
        uint64_t v22 = +[NSCalendar currentCalendar];
        id v23 = +[NSDate now];
        int v24 = [v22 components:16 fromDate:v139 toDate:v23 options:0];
        uint64_t v135 = (uint64_t)[v24 day];

LABEL_16:
        id v25 = VCPPercentCompleteTimestampKeyForTask(v154, 50, 1);
        id v26 = [v153 valueForKey:v25];

        uint64_t v27 = VCPPercentCompleteTimestampKeyForTask(v154, 90, 1);
        id v28 = [v153 valueForKey:v27];

        id v29 = VCPPercentCompleteTimestampKeyForTask(v154, 99, 1);
        id v30 = [v153 valueForKey:v29];

        v142 = +[NSDate dateWithTimeIntervalSinceReferenceDate:(double)(uint64_t)v26];
        v143 = +[NSDate dateWithTimeIntervalSinceReferenceDate:(double)(uint64_t)v28];
        v144 = +[NSDate dateWithTimeIntervalSinceReferenceDate:(double)(uint64_t)v30];
        id v31 = +[NSCalendar currentCalendar];
        unint64_t v32 = [v31 components:16 fromDate:v148 toDate:v142 options:0];
        id v33 = [v32 day];

        if ((uint64_t)v33 < 0) {
          uint64_t v34 = -1;
        }
        else {
          uint64_t v34 = (uint64_t)v33;
        }
        uint64_t v133 = v34;
        unint64_t v35 = +[NSCalendar currentCalendar];
        unint64_t v36 = [v35 components:16 fromDate:v148 toDate:v143 options:0];
        id v37 = [v36 day];

        if ((uint64_t)v37 < 0) {
          uint64_t v38 = -1;
        }
        else {
          uint64_t v38 = (uint64_t)v37;
        }
        uint64_t v131 = v38;
        float v39 = +[NSCalendar currentCalendar];
        unint64_t v40 = [v39 components:16 fromDate:v148 toDate:v144 options:0];
        id v41 = [v40 day];

        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        uint64_t v127 = v14;
        uint64_t v45 = *(void *)type + v14;
        uint64_t v46 = (v145 - v45) & ~((v145 - v45) >> 63);
        uint64_t v129 = v45 & ~(v45 >> 63);
        double v47 = (float)v145;
        double v48 = (float)*(uint64_t *)type * 100.0 / v47;
        double v49 = 100.0 - v48;
        double v50 = (float)v14 * 100.0 / v47;
        if ((uint64_t)v41 < 0) {
          uint64_t v51 = -1;
        }
        else {
          uint64_t v51 = (uint64_t)v41;
        }
        uint64_t v124 = v46;
        uint64_t v125 = v51;
        *(void *)long long buf = 0;
        double v171 = 0.0;
        double v172 = 0.0;
        id v162 = 0;
        while (1)
        {
          id v156 = +[NSDate dateWithTimeIntervalSinceNow:(double)qword_1001F2268[v44]];
          if (v155)
          {
            if (v155[2]()) {
              break;
            }
          }
          uint64_t v15 = (uint64_t)[v153 querySchedulingHistoryRecords:&v162 forActivityID:v154 sinceDate:v156];
          if (v155)
          {
            if (v155[2]()) {
              break;
            }
          }
          if (v15)
          {
            if ((int)MediaAnalysisLogLevel() >= 3)
            {
              v94 = VCPLogInstance();
              os_log_type_t v95 = VCPLogToOSLogType[3];
              if (os_log_type_enabled(v94, v95))
              {
                *(_DWORD *)v163 = 67109376;
                *(_DWORD *)v164 = v15;
                *(_WORD *)&v164[4] = 1024;
                *(_DWORD *)&v164[6] = v154;
                _os_log_impl((void *)&_mh_execute_header, v94, v95, "Trying querySchedulingHistoryRecords from DB returned err %d for activity %d", v163, 0xEu);
              }
            }
            goto LABEL_94;
          }
          for (unint64_t i = 0; i < (unint64_t)[v162 count]; ++i)
          {
            double v54 = [v162 objectAtIndexedSubscript:i];
            [v54 duration];
            if (v55 < 0.0) {
              double v55 = 0.0;
            }
            *(double *)&buf[8 * v44] = v55 + *(double *)&buf[8 * v44];
            if (v44) {
              BOOL v56 = 0;
            }
            else {
              BOOL v56 = [v54 exitStatus] == -18;
            }

            v42 += v44 == 0;
            v43 += v56;
          }

          if (++v44 == 3)
          {
            v168[0] = @"ActivityID";
            v117 = +[NSNumber numberWithUnsignedInteger:v154];
            v169[0] = v117;
            v168[1] = @"AttemptedCount";
            v123 = +[NSNumber numberWithLongLong:v129];
            v169[1] = v123;
            v168[2] = @"AttemptedCountInteger";
            v130 = +[NSNumber numberWithLongLong:v129];
            v169[2] = v130;
            v168[3] = @"AttemptedPercentage";
            v122 = +[NSNumber numberWithDouble:v48 - v50];
            v169[3] = v122;
            v168[4] = @"CrashCount";
            v121 = +[NSNumber numberWithLongLong:v43];
            v169[4] = v121;
            v168[5] = @"CrashCountInteger";
            v120 = +[NSNumber numberWithLongLong:v43];
            v169[5] = v120;
            v168[6] = @"DaysSinceOSUpdate";
            v119 = +[NSNumber numberWithLongLong:v135];
            v169[6] = v119;
            v168[7] = @"DaysSinceVersionUpdate";
            v118 = +[NSNumber numberWithLongLong:v140];
            v169[7] = v118;
            v168[8] = @"DaysToComplete50";
            v141 = +[NSNumber numberWithLongLong:v133];
            v169[8] = v141;
            v168[9] = @"DaysToComplete90";
            v132 = +[NSNumber numberWithLongLong:v131];
            v169[9] = v132;
            v168[10] = @"DaysToComplete99";
            v126 = +[NSNumber numberWithLongLong:v125];
            v169[10] = v126;
            v168[11] = @"FailedCount";
            v116 = +[NSNumber numberWithLongLong:v127];
            v169[11] = v116;
            v168[12] = @"FailedCountInteger";
            v128 = +[NSNumber numberWithLongLong:v127];
            v169[12] = v128;
            v168[13] = @"FailedPercentage";
            v136 = +[NSNumber numberWithDouble:v50];
            v169[13] = v136;
            v168[14] = @"InvokedTimes";
            v115 = +[NSNumber numberWithLongLong:v42];
            v169[14] = v115;
            v168[15] = @"InvokedTimesInteger";
            v114 = +[NSNumber numberWithLongLong:v42];
            v169[15] = v114;
            v168[16] = @"ProcessedCount";
            v134 = +[NSNumber numberWithLongLong:*(void *)type];
            v169[16] = v134;
            v168[17] = @"ProcessedCountInteger";
            typec = +[NSNumber numberWithLongLong:*(void *)type];
            v169[17] = typec;
            v168[18] = @"ProcessedPercentage";
            v113 = +[NSNumber numberWithDouble:v48];
            v169[18] = v113;
            v168[19] = @"RunTime1DayInteger";
            double v57 = *(double *)buf;
            v112 = +[NSNumber numberWithDouble:*(double *)buf];
            v169[19] = v112;
            v168[20] = @"RunTime1WeekInteger";
            v111 = +[NSNumber numberWithDouble:v171];
            v169[20] = v111;
            v168[21] = @"RunTime1MonthInteger";
            id v58 = +[NSNumber numberWithDouble:v172];
            v169[21] = v58;
            v169[22] = @"?";
            v168[22] = @"SampleAssetSubtype";
            v168[23] = @"SampleAssetType";
            v168[24] = @"SampleCodec";
            v168[25] = @"SampleHeight";
            v169[23] = &off_10022F3E8;
            v169[24] = @"?";
            v169[25] = &off_10022F3E8;
            v169[26] = @"?";
            v168[26] = @"SampleUTType";
            v168[27] = @"SampleWidth";
            v169[27] = &off_10022F3E8;
            v168[28] = @"TotalCount";
            id v59 = +[NSNumber numberWithLongLong:v145];
            v169[28] = v59;
            v168[29] = @"TotalCountInteger";
            id v60 = +[NSNumber numberWithLongLong:v145];
            v169[29] = v60;
            v168[30] = @"TotalRunTime";
            id v61 = +[NSNumber numberWithDouble:v57];
            v169[30] = v61;
            v168[31] = @"TotalRunTimeInteger";
            long long v62 = +[NSNumber numberWithDouble:v57];
            v169[31] = v62;
            v168[32] = @"UnprocessedCount";
            __int16 v63 = +[NSNumber numberWithLongLong:v124];
            v169[32] = v63;
            v168[33] = @"UnprocessedCountInteger";
            id v64 = +[NSNumber numberWithLongLong:v124];
            v169[33] = v64;
            v168[34] = @"UnprocessedPercentage";
            __int16 v65 = +[NSNumber numberWithDouble:v49];
            v169[34] = v65;
            id v66 = +[NSDictionary dictionaryWithObjects:v169 forKeys:v168 count:35];
            id v156 = [v66 mutableCopy];

            id v161 = 0;
            long long v67 = +[NSDate dateWithTimeIntervalSinceNow:-86400.0];
            unsigned int v68 = [v153 fetchProcessingErrorCodeCounts:&v161 withTaskID:v154 sinceDate:v67 additionalPredicates:0];

            if (v68 && (int)MediaAnalysisLogLevel() >= 3)
            {
              unint64_t v69 = VCPLogInstance();
              os_log_type_t v70 = VCPLogToOSLogType[3];
              if (os_log_type_enabled(v69, v70))
              {
                *(_DWORD *)v163 = 67109376;
                *(_DWORD *)v164 = v68;
                *(_WORD *)&v164[4] = 1024;
                *(_DWORD *)&v164[6] = v154;
                _os_log_impl((void *)&_mh_execute_header, v69, v70, "Trying fetchProcessingErrorCodeCounts from DB returned err %d for activity %d", v163, 0xEu);
              }
            }
            v146 = +[NSMutableArray array];
            long long v159 = 0u;
            long long v160 = 0u;
            long long v157 = 0u;
            long long v158 = 0u;
            id v71 = v161;
            id v72 = [v71 countByEnumeratingWithState:&v157 objects:v167 count:16];
            if (v72)
            {
              uint64_t v73 = *(void *)v158;
              os_log_type_t typea = VCPLogToOSLogType[3];
              do
              {
                uint64_t v74 = 0;
                do
                {
                  if (*(void *)v158 != v73) {
                    objc_enumerationMutation(v71);
                  }
                  id v75 = *(void **)(*((void *)&v157 + 1) + 8 * (void)v74);
                  if ([v75 intValue] && objc_msgSend(v75, "intValue") != 98)
                  {
                    long long v78 = [MADErrorDescriptor alloc];
                    long long v79 = v78;
                    if (v78)
                    {
                      v80 = v78;
                      signed int v81 = [v75 intValue];
                      uint64_t v82 = [v161 objectForKey:v75];
                      v83 = [(MADErrorDescriptor *)v80 initWithErrorCode:v81 count:(int)[v82 intValue] errorLine:0];
                      [v146 addObject:v83];

                      int v77 = 0;
                      goto LABEL_59;
                    }
                    if ((int)MediaAnalysisLogLevel() < 3)
                    {
                      int v77 = 20;
                    }
                    else
                    {
                      uint64_t v82 = VCPLogInstance();
                      if (os_log_type_enabled(v82, typea))
                      {
                        *(_DWORD *)v163 = 67109120;
                        *(_DWORD *)v164 = v154;
                        _os_log_impl((void *)&_mh_execute_header, v82, typea, "Failed to alloc MADErrorDescriptor during fail retrieval for activity %d", v163, 8u);
                      }
                      int v77 = 20;
LABEL_59:
                    }
                    goto LABEL_61;
                  }
                  int v77 = 21;
LABEL_61:
                  if (v77 != 21 && v77) {
                    goto LABEL_67;
                  }
                  uint64_t v74 = (char *)v74 + 1;
                }
                while (v72 != v74);
                id v84 = [v71 countByEnumeratingWithState:&v157 objects:v167 count:16];
                id v72 = v84;
              }
              while (v84);
            }
LABEL_67:

            typeb = [v146 sortedArrayUsingComparator:&stru_10021E8E0];
            v85 = +[NSMutableArray array];
            for (unint64_t j = 0; ; ++j)
            {
              unint64_t v87 = (unint64_t)[typeb count];
              unint64_t v88 = v87 >= 3 ? 3 : v87;
              if (j >= v88) {
                break;
              }
              v90 = [typeb objectAtIndexedSubscript:j];
              uint64_t v91 = MADErrorStringFromCode((unint64_t)[v90 errorCode]);
              v92 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v90 count]);
              uint64_t v93 = +[NSString stringWithFormat:@"%@/%@", v91, v92];

              [v85 addObject:v93];
            }
            while ((unint64_t)[v85 count] <= 2)
            {
              id v96 = +[NSNull null];
              [v85 addObject:v96];
            }
            v166[0] = @"Top1Failure";
            v166[1] = @"Top2Failure";
            v166[2] = @"Top3Failure";
            uint64_t v97 = +[NSArray arrayWithObjects:v166 count:3];
            os_log_type_t v98 = VCPLogToOSLogType[5];
            for (uint64_t k = 1; k != 4; ++k)
            {
              uint64_t v101 = [v85 objectAtIndexedSubscript:k - 1];
              v102 = [v97 objectAtIndexedSubscript:k - 1];
              [v156 setObject:v101 forKey:v102];

              if ((int)MediaAnalysisLogLevel() >= 5)
              {
                v103 = VCPLogInstance();
                if (os_log_type_enabled(v103, v98))
                {
                  uint64_t v104 = [v85 objectAtIndexedSubscript:k - 1];
                  *(_DWORD *)v163 = 134218242;
                  *(void *)v164 = k;
                  *(_WORD *)&v164[8] = 2112;
                  v165 = v104;
                  _os_log_impl((void *)&_mh_execute_header, v103, v98, "Reporting daily top%lld Failure: %@", v163, 0x16u);
                }
              }
            }
            v105 = +[VCPMADCoreAnalyticsManager sharedManager];
            [v105 sendEvent:@"com.apple.mediaanalysisd.background.dailyreport" withAnalytics:v156];

            int v106 = v154;
            if ((int)MediaAnalysisLogLevel() >= 5)
            {
              v107 = VCPLogInstance();
              if (os_log_type_enabled(v107, v98))
              {
                *(_DWORD *)v163 = 67109120;
                *(_DWORD *)v164 = v154;
                _os_log_impl((void *)&_mh_execute_header, v107, v98, "Finished daily report for activity %d", v163, 8u);
              }

              int v106 = v154;
            }
            v108 = VCPSignPostLog();
            uint64_t v109 = v108;
            if (v137 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v108))
            {
              *(_DWORD *)v163 = 67109120;
              *(_DWORD *)v164 = v106;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v109, OS_SIGNPOST_INTERVAL_END, spid, "VCPAnalyticsEventBackgroundDailyReport", "%d", v163, 8u);
            }

            uint64_t v15 = 0;
LABEL_94:

            goto LABEL_95;
          }
        }
        uint64_t v15 = 4294967168;
        goto LABEL_94;
      }
    }
    else
    {
      uint64_t v140 = -1;
      if (v18) {
        goto LABEL_13;
      }
    }
    uint64_t v135 = -1;
    goto LABEL_16;
  }
  uint64_t v15 = 4294967168;
LABEL_95:

  return v15;
}

void sub_100139804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *a39,void *a40,uint64_t a41,void *a42,void *a43,uint64_t a44,void *a45,uint64_t a46,void *a47,void *a48)
{
  _Unwind_Resume(a1);
}

int64_t sub_100139CA0(id a1, MADErrorDescriptor *a2, MADErrorDescriptor *a3)
{
  return [(MADErrorDescriptor *)a3 compareByCount:a2];
}

uint64_t VCPCoreAnalyticsReportEventBackgroundDailyReport(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = 0;
  do
  {
    uint64_t v7 = VCPCoreAnalyticsReportEventBackgroundDailyReportForActivity(v3, qword_1001F2280[v5], v4);
    if (v7) {
      break;
    }
  }
  while (v5++ != 6);

  return v7;
}

void sub_100139D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void VCPCoreAnalyticsReportEventDasScheduling(uint64_t a1, uint64_t a2, double a3)
{
  id v30 = VCPTaskIDDescription(a1);
  unint64_t v32 = VCPVersionKeyForTask(a1);
  id v31 = VCPStartTimestampKeyForTask(a1);
  if (v32 && v31)
  {
    uint64_t v27 = +[PHPhotoLibrary vcp_defaultPhotoLibrary];
    int v24 = +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:](VCPDatabaseManager, "sharedDatabaseForPhotoLibrary:");
    id v6 = [v24 valueForKey:v32];
    id v28 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", (double)(uint64_t)[v24 valueForKey:v31]);
    uint64_t v7 = +[NSCalendar currentCalendar];
    unint64_t v8 = +[NSDate now];
    id v26 = [v7 components:16 fromDate:v28 toDate:v8 options:0];

    unint64_t v9 = objc_alloc_init(VCPSystemMonitor);
    [(VCPSystemMonitor *)v9 enable];
    id v29 = [(VCPSystemMonitor *)v9 checkFullyCharged];
    id v25 = +[VCPMADCoreAnalyticsManager sharedManager];
    v34[0] = v30;
    v33[0] = @"Activity";
    v33[1] = @"Duration";
    uint64_t v22 = +[NSNumber numberWithDouble:a3];
    v34[1] = v22;
    v33[2] = @"ExitStatus";
    id v23 = +[NSNumber numberWithInt:a2];
    v34[2] = v23;
    v33[3] = @"NumberOfAssets";
    int v21 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v27, "vcp_assetCountForTaskID:", a1));
    v34[3] = v21;
    v33[4] = @"PluggedIn";
    long long v20 = +[NSNumber numberWithInteger:[(VCPSystemMonitor *)v9 checkPluggedIn]];
    v34[4] = v20;
    v33[5] = @"FullyCharged";
    uint64_t v10 = [v29 objectForKeyedSubscript:@"FullyCharged"];
    os_log_type_t v11 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v10 BOOLValue]);
    v34[5] = v11;
    v33[6] = @"IsCharging";
    id v12 = [v29 objectForKeyedSubscript:@"IsCharging"];
    id v13 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v12 BOOLValue]);
    id v14 = v6;
    v34[6] = v13;
    v33[7] = @"ScreenLocked";
    uint64_t v15 = +[NSNumber numberWithInteger:[(VCPSystemMonitor *)v9 checkScreenLocked]];
    v34[7] = v15;
    v33[8] = @"ThermalPressure";
    double v16 = +[NSNumber numberWithUnsignedLongLong:[(VCPSystemMonitor *)v9 checkThermalPressure]];
    v34[8] = v16;
    v33[9] = @"ActivityAnalysisVersion";
    id v17 = +[NSNumber numberWithLongLong:v14];
    v34[9] = v17;
    v33[10] = @"ActivityAnalysisVersionDaysSinceEstablished";
    id v18 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v26 day]);
    v34[10] = v18;
    id v19 = +[NSDictionary dictionaryWithObjects:v34 forKeys:v33 count:11];
    [v25 sendEvent:@"com.apple.mediaanalysisd.das.scheduling" withAnalytics:v19];
  }
}

void sub_10013A1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

id VCPCoreAnalyticsDiscretizeValueToIntervalStart(NSNumber *a1, NSArray *a2)
{
  id v3 = a1;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v4 = [(NSArray *)a2 reverseObjectEnumerator];
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v12;
    while (2)
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v4);
        }
        unint64_t v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        int v9 = [(NSNumber *)v3 intValue];
        if (v9 >= (int)[v8 intValue])
        {
          id v5 = v8;
          goto LABEL_11;
        }
      }
      id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v5;
}

void sub_10013A47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void VCPCoreAnalyticsReportEventAnalysisProgress(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = a1;
  if (qword_1002527C0 != -1) {
    dispatch_once(&qword_1002527C0, &stru_10021E900);
  }
  uint64_t v10 = +[NSNumber numberWithInteger:a2];
  uint64_t v11 = VCPCoreAnalyticsDiscretizeValueToIntervalStart(v10, (NSArray *)qword_1002527A0);

  long long v12 = &off_10022F820;
  if (v11) {
    long long v13 = (_UNKNOWN **)v11;
  }
  else {
    long long v13 = &off_10022F820;
  }
  long long v14 = +[NSNumber numberWithInteger:a3];
  uint64_t v15 = VCPCoreAnalyticsDiscretizeValueToIntervalStart(v14, (NSArray *)qword_1002527A8);

  if (v15) {
    long long v12 = (_UNKNOWN **)v15;
  }
  double v16 = +[NSNumber numberWithUnsignedInteger:a4];
  id v17 = VCPCoreAnalyticsDiscretizeValueToIntervalStart(v16, (NSArray *)qword_1002527B0);

  if (v17)
  {
    id v18 = +[NSNumber numberWithUnsignedInteger:a5];
    id v19 = VCPCoreAnalyticsDiscretizeValueToIntervalStart(v18, (NSArray *)qword_1002527B8);

    if (v19)
    {
      long long v20 = +[VCPMADCoreAnalyticsManager sharedManager];
      v26[0] = v9;
      v25[0] = @"AnalysisType";
      v25[1] = @"DaysSinceStart";
      int v21 = +[NSNumber numberWithInteger:a2];
      v26[1] = v21;
      v26[2] = v13;
      void v25[2] = @"DaysSinceStartDiscrete";
      v25[3] = @"DaysToComplete";
      uint64_t v22 = +[NSNumber numberWithInteger:a3];
      void v26[3] = v22;
      v26[4] = v12;
      void v25[4] = @"DaysToCompleteDiscrete";
      v25[5] = @"ProgressPercentage";
      id v23 = +[NSNumber numberWithUnsignedInteger:a4];
      v26[5] = v23;
      v26[6] = v17;
      v25[6] = @"ProgressPercentageDiscrete";
      v25[7] = @"AllowedAssetsCountDiscrete";
      v26[7] = v19;
      int v24 = +[NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:8];
      [v20 sendEvent:@"com.apple.mediaanalysisd.analysisprogress" withAnalytics:v24];
    }
  }
}

void sub_10013A73C(_Unwind_Exception *a1)
{
  uint64_t v11 = v4;

  _Unwind_Resume(a1);
}

void sub_10013A7F4(id a1)
{
  uint64_t v1 = (void *)qword_1002527A0;
  qword_1002527A0 = (uint64_t)&off_100230620;

  long long v2 = (void *)qword_1002527A8;
  qword_1002527A8 = (uint64_t)&off_100230638;

  id v3 = (void *)qword_1002527B0;
  qword_1002527B0 = (uint64_t)&off_100230650;

  id v4 = (void *)qword_1002527B8;
  qword_1002527B8 = (uint64_t)&off_100230668;
}

void VCPCoreAnalyticsReportEventMomentsDeferredProcessing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, void *a8, double a9)
{
  id v17 = a5;
  id v18 = a6;
  id v19 = a8;
  long long v20 = +[NSDate now];
  [v20 timeIntervalSince1970];
  double v22 = v21;

  if (v22 < a9)
  {
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      VCPLogInstance();
      id v23 = (VCPSystemMonitor *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(&v23->super, v24))
      {
        *(_DWORD *)long long buf = 134218240;
        double v53 = a9;
        __int16 v54 = 2048;
        double v55 = v22;
        id v25 = "[Moments] Processing start time (%f) > end time (%f), skipping CoreAnalytics report";
LABEL_18:
        p_super = &v23->super;
        os_log_type_t v32 = v24;
        uint32_t v33 = 22;
LABEL_23:
        _os_log_impl((void *)&_mh_execute_header, p_super, v32, v25, buf, v33);
        goto LABEL_24;
      }
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  if (!v17)
  {
    if ((int)MediaAnalysisLogLevel() < 3) {
      goto LABEL_25;
    }
    VCPLogInstance();
    id v23 = (VCPSystemMonitor *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v28 = VCPLogToOSLogType[3];
    if (!os_log_type_enabled(&v23->super, v28)) {
      goto LABEL_24;
    }
    *(_WORD *)long long buf = 0;
    id v25 = "[Moments] No request date, skipping CoreAnalytics report";
    goto LABEL_22;
  }
  [v17 timeIntervalSince1970];
  double v27 = v26;
  if (v26 <= a9)
  {
    if (v18)
    {
      [v18 timeIntervalSince1970];
      double v30 = v29;
      if (v29 <= a9)
      {
        id v23 = objc_alloc_init(VCPSystemMonitor);
        [(VCPSystemMonitor *)v23 enable];
        unint64_t v34 = [(VCPSystemMonitor *)v23 checkPluggedIn];
        if (v34 <= 1)
        {
          unint64_t v48 = v34;
          double v49 = +[VCPMADCoreAnalyticsManager sharedManager];
          v50[0] = @"NumRequestedAssets";
          double v47 = +[NSNumber numberWithInteger:a1];
          v51[0] = v47;
          v50[1] = @"NumActualProcessedAssets";
          uint64_t v46 = +[NSNumber numberWithInteger:a2];
          v51[1] = v46;
          v50[2] = @"NumAlreadyProcessedAssets";
          uint64_t v45 = +[NSNumber numberWithInteger:a3];
          v51[2] = v45;
          v50[3] = @"NumPendingAssets";
          uint64_t v44 = +[NSNumber numberWithInteger:a4];
          v51[3] = v44;
          v50[4] = @"AnalysisDuration";
          uint64_t v43 = +[NSNumber numberWithInteger:(uint64_t)(v22 - a9)];
          void v51[4] = v43;
          void v50[5] = @"ProcessingDeferredDuration";
          id v37 = +[NSNumber numberWithInteger:(uint64_t)(a9 - v27)];
          v51[5] = v37;
          v50[6] = @"NumDaysSinceEarliestAssetModificationDate";
          uint64_t v38 = +[NSNumber numberWithInteger:(uint64_t)((a9 - v30) / 86400.0)];
          v51[6] = v38;
          v50[7] = @"AnalysisType";
          float v39 = +[NSNumber numberWithUnsignedInteger:a7];
          v51[7] = v39;
          v50[8] = @"IsOnBattery";
          unint64_t v40 = +[NSNumber numberWithBool:v48 != 1];
          v51[8] = v40;
          v50[9] = @"LibraryScale";
          id v41 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v19, "vcp_libraryScale"));
          v51[9] = v41;
          uint64_t v42 = +[NSDictionary dictionaryWithObjects:v51 forKeys:v50 count:10];
          [v49 sendEvent:@"com.apple.mediaanalysisd.MomentsDeferredProcessing" withAnalytics:v42];
        }
        else
        {
          if ((int)MediaAnalysisLogLevel() < 3) {
            goto LABEL_24;
          }
          unint64_t v35 = VCPLogInstance();
          os_log_type_t v36 = VCPLogToOSLogType[3];
          double v49 = v35;
          if (os_log_type_enabled(v35, v36))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v35, v36, "[Moments] Failed to query if device is on battery, skipping CoreAnalytics report", buf, 2u);
          }
        }

        goto LABEL_24;
      }
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        VCPLogInstance();
        id v23 = (VCPSystemMonitor *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(&v23->super, v24))
        {
          *(_DWORD *)long long buf = 134218240;
          double v53 = v30;
          __int16 v54 = 2048;
          double v55 = a9;
          id v25 = "[Moments] Earliest asset modification time (%f) > processing start time (%f), skipping CoreAnalytics report";
          goto LABEL_18;
        }
        goto LABEL_24;
      }
      goto LABEL_25;
    }
    if ((int)MediaAnalysisLogLevel() < 3) {
      goto LABEL_25;
    }
    VCPLogInstance();
    id v23 = (VCPSystemMonitor *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v28 = VCPLogToOSLogType[3];
    if (!os_log_type_enabled(&v23->super, v28)) {
      goto LABEL_24;
    }
    *(_WORD *)long long buf = 0;
    id v25 = "[Moments] No earliest asset modification date, skipping CoreAnalytics report";
LABEL_22:
    p_super = &v23->super;
    os_log_type_t v32 = v28;
    uint32_t v33 = 2;
    goto LABEL_23;
  }
  if ((int)MediaAnalysisLogLevel() >= 3)
  {
    VCPLogInstance();
    id v23 = (VCPSystemMonitor *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v24 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(&v23->super, v24))
    {
      *(_DWORD *)long long buf = 134218240;
      double v53 = v27;
      __int16 v54 = 2048;
      double v55 = a9;
      id v25 = "[Moments] Request time (%f) > processing start time (%f), skipping CoreAnalytics report";
      goto LABEL_18;
    }
LABEL_24:
  }
LABEL_25:
}

void sub_10013AE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object, uint64_t a16)
{
  _Unwind_Resume(a1);
}

CFStringRef VCPCoreAnalyticsSessionEventName(uint64_t a1)
{
  uint64_t v2 = a1 - 1;
  CFStringRef result = @"com.apple.mediaanalysisd.SceneAnalysisRunSession";
  switch(v2)
  {
    case 0:
      CFStringRef result = @"com.apple.mediaanalysisd.FullAnalysisRunSession";
      break;
    case 1:
      return result;
    case 2:
      CFStringRef result = @"com.apple.mediaanalysisd.FaceAnalysisRunSession";
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
      goto LABEL_5;
    case 9:
      CFStringRef result = @"com.apple.mediaanalysisd.OCRAnalysisRunSession";
      break;
    case 11:
      CFStringRef result = @"com.apple.mediaanalysisd.VisualSearchAnalysisRunSession";
      break;
    default:
      if (a1 == 16)
      {
        CFStringRef result = @"com.apple.mediaanalysisd.PECAnalysisRunSession";
      }
      else
      {
LABEL_5:
        if ((int)MediaAnalysisLogLevel() >= 3)
        {
          id v4 = VCPLogInstance();
          os_log_type_t v5 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v4, v5))
          {
            uint64_t v6 = VCPTaskIDDescription(a1);
            int v7 = 138412290;
            unint64_t v8 = v6;
            _os_log_impl((void *)&_mh_execute_header, v4, v5, "[CAM] No session event for %@", (uint8_t *)&v7, 0xCu);
          }
        }
        CFStringRef result = 0;
      }
      break;
  }
  return result;
}

void sub_10013B084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id VCPCoreAnalyticsSessionAnalyticData()
{
  id v19 = +[NSMutableDictionary dictionary];
  id v0 = +[VCPMADCoreAnalyticsManager sharedManager];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v1 = [&off_100230680 countByEnumeratingWithState:&v20 objects:v26 count:16];
  if (v1)
  {
    uint64_t v3 = *(void *)v21;
    os_log_type_t v4 = VCPLogToOSLogType[7];
    *(void *)&long long v2 = 138412290;
    long long v18 = v2;
    do
    {
      for (unint64_t i = 0; i != v1; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v3) {
          objc_enumerationMutation(&off_100230680);
        }
        uint64_t v6 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        unint64_t v8 = VCPTaskIDDescription([v6 unsignedIntValue]);
        if ((int)MediaAnalysisLogLevel() >= 7)
        {
          id v9 = VCPLogInstance();
          if (os_log_type_enabled(v9, v4))
          {
            *(_DWORD *)long long buf = v18;
            id v25 = v8;
            _os_log_impl((void *)&_mh_execute_header, v9, v4, "[CAM] Fetching session analytic data for %@", buf, 0xCu);
          }
        }
        uint64_t v10 = VCPCoreAnalyticsSessionEventName(objc_msgSend(v6, "unsignedIntValue", v18));
        uint64_t v11 = [v0 fetchSessionEvent:v10];
        if (v11)
        {
          [v19 setObject:v11 forKeyedSubscript:v8];
          if ((int)MediaAnalysisLogLevel() >= 7)
          {
            long long v12 = VCPLogInstance();
            if (os_log_type_enabled(v12, v4))
            {
              *(_DWORD *)long long buf = v18;
              id v25 = v11;
              _os_log_impl((void *)&_mh_execute_header, v12, v4, "[CAM] Fetched session analytic data - %@", buf, 0xCu);
            }
          }
        }
      }
      id v1 = [&off_100230680 countByEnumeratingWithState:&v20 objects:v26 count:16];
    }
    while (v1);
  }
  long long v13 = +[VCPLogManager dateFormatterDateTime];
  long long v14 = +[NSDate now];
  uint64_t v15 = [v13 stringFromDate:v14];
  [v19 setObject:v15 forKeyedSubscript:@"timestamp"];

  double v16 = +[NSNumber numberWithInt:getpid()];
  [v19 setObject:v16 forKeyedSubscript:@"PID"];

  return v19;
}

void sub_10013B3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void VCPCoreAnalyticsSessionLogDatabaseUpdate(uint64_t a1, void *a2, unsigned int a3, double a4)
{
  id v7 = a2;
  os_log_type_t v32 = +[NSString stringWithFormat:@"[CAM][TaskID-%d]", a1];
  unint64_t v8 = VCPCoreAnalyticsSessionAnalyticData();
  uint64_t v9 = +[PHPhotoLibrary vcp_defaultPhotoLibrary];
  unsigned int v31 = a3;
  uint64_t v10 = +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:v9];

  id v34 = 0;
  [v10 querySchedulingHistoryRecords:&v34 forActivityID:a1 sinceDate:v7];
  id v11 = v34;
  long long v12 = [v11 firstObject];
  LOBYTE(v9) = v12 == 0;

  if ((v9 & 1) == 0)
  {
    long long v13 = [v11 firstObject];
    long long v14 = [v13 sessionLog];
    uint64_t v15 = [v14 dataUsingEncoding:4];

    if (!v15)
    {
LABEL_11:

      goto LABEL_12;
    }
    id v33 = 0;
    double v16 = +[NSJSONSerialization JSONObjectWithData:v15 options:0 error:&v33];
    id v30 = v33;
    if (v16)
    {
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        id v17 = VCPLogInstance();
        os_log_type_t v18 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v17, v18))
        {
          os_log_type_t v28 = [v11 firstObject];
          id v19 = [v28 sessionLog];
          *(_DWORD *)long long buf = 138412802;
          os_log_type_t v36 = v32;
          __int16 v37 = 2112;
          uint64_t v38 = v19;
          __int16 v39 = 2112;
          unint64_t v40 = v8;
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "%@ Merging existing session log %@ with new session log %@", buf, 0x20u);
        }
      }
      long long v20 = [v16 mutableCopy];
      [v20 addEntriesFromDictionary:v8];
      long long v21 = v8;
      unint64_t v8 = v20;
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() < 4) {
        goto LABEL_10;
      }
      long long v21 = VCPLogInstance();
      os_log_type_t v26 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v21, v26))
      {
        double v29 = [v11 firstObject];
        double v27 = [v29 sessionLog];
        *(_DWORD *)long long buf = 138412546;
        os_log_type_t v36 = v32;
        __int16 v37 = 2112;
        uint64_t v38 = v27;
        _os_log_impl((void *)&_mh_execute_header, v21, v26, "%@ Failed to parse existing session log %@; ignoring",
          buf,
          0x16u);
      }
    }

LABEL_10:
    goto LABEL_11;
  }
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v15 = VCPLogInstance();
    os_log_type_t v25 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v15, v25))
    {
      *(_DWORD *)long long buf = 138412290;
      os_log_type_t v36 = v32;
      _os_log_impl((void *)&_mh_execute_header, v15, v25, "%@ No existing session log", buf, 0xCu);
    }
    goto LABEL_11;
  }
LABEL_12:
  long long v22 = MediaAnalysisJSONStringFromObject(v8);
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    long long v23 = VCPLogInstance();
    os_log_type_t v24 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v23, v24))
    {
      *(_DWORD *)long long buf = 138412546;
      os_log_type_t v36 = v32;
      __int16 v37 = 2112;
      uint64_t v38 = v22;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%@ Saving session log %@", buf, 0x16u);
    }
  }
  [v10 updateSchedulingHistoryForActivityID:a1 startTime:v7 duration:v31 exitStatus:v22 sessionLog:a4];
  [v10 commit];
}

void sub_10013B8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void VCPCoreAnalyticsSendAllAnalysisSession()
{
  id v0 = +[VCPMADCoreAnalyticsManager sharedManager];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v1 = [&off_100230698 countByEnumeratingWithState:&v13 objects:v21 count:16];
  if (v1)
  {
    uint64_t v3 = *(void *)v14;
    os_log_type_t v4 = VCPLogToOSLogType[7];
    *(void *)&long long v2 = 138412546;
    long long v12 = v2;
    do
    {
      os_log_type_t v5 = 0;
      do
      {
        if (*(void *)v14 != v3) {
          objc_enumerationMutation(&off_100230698);
        }
        uint64_t v6 = *(void **)(*((void *)&v13 + 1) + 8 * (void)v5);
        unint64_t v8 = VCPCoreAnalyticsSessionEventName([v6 unsignedIntValue]);
        uint64_t v9 = [v0 fetchSessionEvent:v8];
        if (v9)
        {
          if ((int)MediaAnalysisLogLevel() >= 7)
          {
            uint64_t v10 = VCPLogInstance();
            if (os_log_type_enabled(v10, v4))
            {
              id v11 = VCPTaskIDDescription([v6 unsignedIntValue]);
              *(_DWORD *)long long buf = v12;
              os_log_type_t v18 = v11;
              __int16 v19 = 2112;
              long long v20 = v8;
              _os_log_impl((void *)&_mh_execute_header, v10, v4, "[CAM] Sending session event for %@ - %@", buf, 0x16u);
            }
          }
          objc_msgSend(v0, "sendSessionEvent:", v8, v12);
        }

        os_log_type_t v5 = (char *)v5 + 1;
      }
      while (v1 != v5);
      id v1 = [&off_100230698 countByEnumeratingWithState:&v13 objects:v21 count:16];
    }
    while (v1);
  }
}

void sub_10013BBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013BCF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013BDE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013BF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)VCPRequestSuggestedPersonsTask;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_10013C244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10013C2B8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCanceled];
  if ((v1 & 1) == 0)
  {
    long long v2 = +[VCPWatchdog sharedWatchdog];
    [v2 pet];
  }
  return v1;
}

void sub_10013C304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013C478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013C53C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013C6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)VCPRequestUpdateKeyFacesOfPersonsTask;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_10013C964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10013C9CC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCanceled];
  if ((v1 & 1) == 0)
  {
    long long v2 = +[VCPWatchdog sharedWatchdog];
    [v2 pet];
  }
  return v1;
}

void sub_10013CA18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013CB64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013CC20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013CD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)VCPRequestFaceCandidatesforKeyFaceForPersonTask;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_10013CFE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013D164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013D200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013D368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)VCPRequestResetPersonsTask;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_10013D7DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013D96C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013DA08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013DB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)VCPRequestResetFaceClassificationModelTask;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_10013DDC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013DF30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013DFCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013E134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)VCPResetPetClassificationModelTask;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_10013E384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013E518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013E5D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013E740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)VCPRequestSuggestedMePersonIdentifierTask;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_10013E994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013EB20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013EBCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013ED34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)VCPRequestPersonPromoterStatusTask;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_10013EFD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013F160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013F1FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013F364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)VCPRequestClusterCacheValidationTask;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_10013F614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10013F67C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCanceled];
  if ((v1 & 1) == 0)
  {
    long long v2 = +[VCPWatchdog sharedWatchdog];
    [v2 pet];
  }
  return v1;
}

void sub_10013F6C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013F7E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013F880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013F9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)VCPRequestResetFaceClusteringStateTask;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_10013FE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10013FF7C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t v2 = 0;
    while (1)
    {
      if ([*(id *)(a1 + 40) isCanceled]) {
        break;
      }
      os_log_type_t v4 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v2];
      os_log_type_t v5 = +[PHFaceChangeRequest changeRequestForFace:v4];

      [v5 setVuObservationID:0];
      if (++v2 >= (unint64_t)[*(id *)(a1 + 32) count]) {
        return;
      }
    }
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      uint64_t v6 = VCPLogInstance();
      os_log_type_t v7 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v6, v7))
      {
        *(_WORD *)unint64_t v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "[ResetFaceClusteringState] Cancelled", v8, 2u);
      }
    }
  }
}

void sub_1001400A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001400BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    os_log_type_t v4 = +[NSFileManager defaultManager];
    os_log_type_t v5 = [v3 path];
    unsigned int v6 = [v4 fileExistsAtPath:v5];

    if (v6)
    {
      if ((int)MediaAnalysisLogLevel() >= 6)
      {
        os_log_type_t v7 = VCPLogInstance();
        os_log_type_t v8 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v7, v8))
        {
          *(_DWORD *)long long buf = 138412290;
          id v16 = v3;
          _os_log_impl((void *)&_mh_execute_header, v7, v8, "[ResetFaceClusteringState] Dropping %@", buf, 0xCu);
        }
      }
      uint64_t v9 = +[NSFileManager defaultManager];
      id v14 = 0;
      unsigned __int8 v10 = [v9 removeItemAtURL:v3 error:&v14];
      id v11 = v14;

      if ((v10 & 1) == 0)
      {
        if ((int)MediaAnalysisLogLevel() >= 3)
        {
          long long v12 = VCPLogInstance();
          os_log_type_t v13 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v12, v13))
          {
            *(_DWORD *)long long buf = 138412546;
            id v16 = v3;
            __int16 v17 = 2112;
            id v18 = v11;
            _os_log_impl((void *)&_mh_execute_header, v12, v13, "[ResetFaceClusteringState] Failed to remove %@ - %@", buf, 0x16u);
          }
        }
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -18;
      }
    }
  }
}

void sub_10014029C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001403F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100140494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001405FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)VCPRequestReclusterFacesTask;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_1001408A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100140904(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_100140954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_100140968(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

void sub_100140AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100140B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100140CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)VCPRequestRebuildPersonsTask;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_100140FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100141014(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_100141064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_100141078(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

void sub_1001411C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100141DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_10014275C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10014296C()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  id v1 = (void *)qword_1002527C8;
  qword_1002527C8 = (uint64_t)v0;
}

void sub_100142BEC(id a1)
{
  byte_1002527E0 = 1;
}

uint64_t sub_100143124()
{
  uint64_t v2 = 0;
  id v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = qword_1002527F0;
  uint64_t v5 = qword_1002527F0;
  if (!qword_1002527F0)
  {
    long long v6 = *(_OWORD *)off_10021E9C8;
    long long v7 = *(_OWORD *)&off_10021E9D8;
    v3[3] = _sl_dlopen();
    qword_1002527F0 = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_100143234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10014324C(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002527F0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1001432DC()
{
  uint64_t v0 = sub_100143124();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void sub_1001433B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100143790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100143B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100143C1C(uint64_t a1, void *a2)
{
  id v39 = a2;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  id obj = *(id *)(a1 + 32);
  id v3 = [obj countByEnumeratingWithState:&v43 objects:v54 count:16];
  if (v3)
  {
    uint64_t v40 = *(void *)v44;
    os_log_type_t v5 = VCPLogToOSLogType[7];
    os_log_type_t type = VCPLogToOSLogType[3];
    *(void *)&long long v4 = 138413058;
    long long v36 = v4;
    do
    {
      for (unint64_t i = 0; i != v3; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v44 != v40) {
          objc_enumerationMutation(obj);
        }
        long long v7 = *(void **)(*((void *)&v43 + 1) + 8 * i);
        if ((int)MediaAnalysisLogLevel() >= 7)
        {
          uint64_t v9 = VCPLogInstance();
          if (os_log_type_enabled(v9, v5))
          {
            uint64_t v10 = *(void *)(a1 + 40);
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v10;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v7;
            _os_log_impl((void *)&_mh_execute_header, v9, v5, "%@ Detected face %@", buf, 0x16u);
          }
        }
        id v11 = objc_msgSend(v7, "imageprintWrapper", v36);
        long long v12 = [v11 data];
        os_log_type_t v13 = +[VCPFaceIDModel faceObservationFromFaceprintData:v12];

        if (v13)
        {
          uint64_t v47 = 0;
          unint64_t v48 = &v47;
          uint64_t v49 = 0x2050000000;
          id v14 = (void *)qword_100252810;
          uint64_t v50 = qword_100252810;
          if (!qword_100252810)
          {
            *(void *)long long buf = _NSConcreteStackBlock;
            *(void *)&uint8_t buf[8] = 3221225472;
            *(void *)&uint8_t buf[16] = sub_100146244;
            double v52 = &unk_100219E10;
            v53[0] = &v47;
            sub_100146244((uint64_t)buf);
            id v14 = (void *)v48[3];
          }
          long long v15 = v14;
          _Block_object_dispose(&v47, 8);
          id v16 = objc_alloc_init(v15);
          [v16 setAsset:*(void *)(a1 + 48)];
          uint64_t v47 = 0;
          id v42 = 0;
          LOBYTE(v15) = [v39 addWithObservation:v13 context:v16 priority:1 at:0 output:&v47 error:&v42];
          id v17 = v42;
          if (v15)
          {
            if ((int)MediaAnalysisLogLevel() >= 7)
            {
              id v18 = VCPLogInstance();
              if (os_log_type_enabled(v18, v5))
              {
                uint64_t v19 = *(void *)(a1 + 40);
                *(_DWORD *)long long buf = 138412546;
                *(void *)&uint8_t buf[4] = v19;
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v47;
                _os_log_impl((void *)&_mh_execute_header, v18, v5, "%@ Added VNFaceObservation %lu to VUGallery", buf, 0x16u);
              }
            }
            uint64_t v20 = *(void *)(a1 + 56);
            uint64_t v21 = 2 * (*(unsigned char *)(a1 + 64) == 0);
            id v41 = v17;
            unsigned __int8 v22 = [v39 tag:v47 with:v20 type:v21 error:&v41];
            id v23 = v41;

            if (v22)
            {
              if ((int)MediaAnalysisLogLevel() >= 7)
              {
                os_log_type_t v24 = VCPLogInstance();
                if (os_log_type_enabled(v24, v5))
                {
                  uint64_t v25 = *(void *)(a1 + 40);
                  os_log_type_t v26 = *(void **)(a1 + 56);
                  CFStringRef v27 = @"YES";
                  if (!*(unsigned char *)(a1 + 64)) {
                    CFStringRef v27 = @"NO";
                  }
                  *(_DWORD *)long long buf = v36;
                  *(void *)&uint8_t buf[4] = v25;
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v47;
                  *(_WORD *)&buf[22] = 2112;
                  double v52 = v26;
                  LOWORD(v53[0]) = 2112;
                  *(void *)((char *)v53 + 2) = v27;
                  os_log_type_t v28 = v24;
                  os_log_type_t v29 = v5;
                  id v30 = "%@ Tagged VNFaceObservation %lu with person %@ to VUGallery (Confirmed: %@)";
LABEL_33:
                  _os_log_impl((void *)&_mh_execute_header, v28, v29, v30, buf, 0x2Au);
                }
                goto LABEL_34;
              }
LABEL_36:
              id v17 = v23;
LABEL_37:

              goto LABEL_38;
            }
            if ((int)MediaAnalysisLogLevel() < 3) {
              goto LABEL_36;
            }
            os_log_type_t v24 = VCPLogInstance();
            if (os_log_type_enabled(v24, type))
            {
              uint64_t v33 = *(void *)(a1 + 40);
              id v34 = *(void **)(a1 + 56);
              *(_DWORD *)long long buf = v36;
              *(void *)&uint8_t buf[4] = v33;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v47;
              *(_WORD *)&buf[22] = 2112;
              double v52 = v34;
              LOWORD(v53[0]) = 2112;
              *(void *)((char *)v53 + 2) = v23;
              os_log_type_t v28 = v24;
              os_log_type_t v29 = type;
              id v30 = "%@ Failed to tag VNFaceObservation %lu with person %@ to VUGallery - %@";
              goto LABEL_33;
            }
LABEL_34:
            id v17 = v23;
          }
          else
          {
            if ((int)MediaAnalysisLogLevel() < 3) {
              goto LABEL_37;
            }
            os_log_type_t v24 = VCPLogInstance();
            if (os_log_type_enabled(v24, type))
            {
              uint64_t v32 = *(void *)(a1 + 40);
              *(_DWORD *)long long buf = 138412546;
              *(void *)&uint8_t buf[4] = v32;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v17;
              _os_log_impl((void *)&_mh_execute_header, v24, type, "%@ Failed to add VNFaceObservation to VUGallery - %@", buf, 0x16u);
            }
          }

          goto LABEL_37;
        }
        if ((int)MediaAnalysisLogLevel() < 3) {
          goto LABEL_39;
        }
        id v16 = VCPLogInstance();
        if (os_log_type_enabled(v16, type))
        {
          uint64_t v31 = *(void *)(a1 + 40);
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v31;
          _os_log_impl((void *)&_mh_execute_header, v16, type, "%@ Failed to create VNFaceObservation; ignoring",
            buf,
            0xCu);
        }
LABEL_38:

LABEL_39:
      }
      id v3 = [obj countByEnumeratingWithState:&v43 objects:v54 count:16];
    }
    while (v3);
  }

  return 0;
}

void sub_1001441EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_100144684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100144A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100144AFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = v3;
  if (v3)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_100144C58;
    v8[3] = &unk_10021EA18;
    v8[4] = *(void *)(a1 + 32);
    [v3 enumerateObjectsUsingBlock:v8];
  }
  else if ((int)MediaAnalysisLogLevel() >= 3)
  {
    os_log_type_t v5 = VCPLogInstance();
    os_log_type_t v6 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%@ Cannot fetch Home Person FaceCrop", buf, 0xCu);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_100144C38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100144C58(uint64_t a1, void *a2, unsigned char *a3)
{
  id v9 = a2;
  os_log_type_t v5 = [*(id *)(a1 + 32) cancelBlock];
  if (v5
    && ([*(id *)(a1 + 32) cancelBlock],
        os_log_type_t v6 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue(),
        int v7 = v6[2](),
        v6,
        v5,
        v7))
  {
    *a3 = 1;
  }
  else
  {
    os_log_type_t v8 = +[VCPWatchdog sharedWatchdog];
    [v8 pet];

    [*(id *)(a1 + 32) _processFaceCrop:v9];
  }
}

void sub_100144D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100145784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50)
{
  _Unwind_Resume(a1);
}

void sub_100145950(uint64_t a1)
{
}

void sub_100145958(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && (int)MediaAnalysisLogLevel() >= 3)
  {
    long long v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Error refreshing home data - %@", (uint8_t *)&v7, 0x16u);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100145A44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100145A60(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v26 = a1;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v29 objects:v39 count:16];
  uint64_t v6 = 0;
  if (v4)
  {
    uint64_t v7 = *(void *)v30;
    os_log_type_t v8 = VCPLogToOSLogType[7];
    os_log_type_t type = VCPLogToOSLogType[3];
    *(void *)&long long v5 = 138412802;
    long long v24 = v5;
    do
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v30 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void *)(*((void *)&v29 + 1) + 8 * i);
        long long v12 = +[VCPWatchdog sharedWatchdog];
        [v12 pet];

        if ((int)MediaAnalysisLogLevel() >= 7)
        {
          os_log_type_t v13 = VCPLogInstance();
          if (os_log_type_enabled(v13, v8))
          {
            uint64_t v14 = *(void *)(v26 + 40);
            *(_DWORD *)long long buf = 138412546;
            uint64_t v34 = v14;
            __int16 v35 = 2112;
            uint64_t v36 = v10;
            _os_log_impl((void *)&_mh_execute_header, v13, v8, "%@ Removing FaceCrop %@ ...", buf, 0x16u);
          }
        }
        id v28 = 0;
        unsigned int v15 = objc_msgSend(v3, "removeWithAsset:error:", v10, &v28, v24);
        id v16 = v28;
        if (v15)
        {
          ++v6;
        }
        else if ((int)MediaAnalysisLogLevel() >= 3)
        {
          id v17 = VCPLogInstance();
          if (os_log_type_enabled(v17, type))
          {
            uint64_t v18 = *(void *)(v26 + 40);
            *(_DWORD *)long long buf = v24;
            uint64_t v34 = v18;
            __int16 v35 = 2112;
            uint64_t v36 = v10;
            __int16 v37 = 2112;
            id v38 = v16;
            _os_log_impl((void *)&_mh_execute_header, v17, type, "%@ Failed to remove FaceCrop %@ from Gallery - %@; ignore",
              buf,
              0x20u);
          }
        }
      }
      id v4 = [obj countByEnumeratingWithState:&v29 objects:v39 count:16];
    }
    while (v4);
  }

  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v19 = VCPLogInstance();
    os_log_type_t v20 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = *(void *)(v26 + 40);
      id v22 = [*(id *)(v26 + 32) count];
      *(_DWORD *)long long buf = 138412802;
      uint64_t v34 = v21;
      __int16 v35 = 2048;
      uint64_t v36 = v6;
      __int16 v37 = 2048;
      id v38 = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%@ Removed %lu (out of %lu) FaceCrop(s) from Gallery", buf, 0x20u);
    }
  }
  return 0;
}

void sub_100145D74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100145DDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      [v3 fractionCompleted];
      int v14 = 138412546;
      uint64_t v15 = v6;
      __int16 v16 = 2048;
      double v17 = (float)(v7 * 100.0);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Gallery updating - %.2f%%", (uint8_t *)&v14, 0x16u);
    }
  }
  os_log_type_t v8 = [*(id *)(a1 + 40) cancelBlock];
  if (v8
    && ([*(id *)(a1 + 40) cancelBlock],
        __int16 v9 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue(),
        char v10 = v9[2](),
        v9,
        v8,
        (v10 & 1) != 0))
  {
    uint64_t v11 = 0;
  }
  else
  {
    long long v12 = +[VCPWatchdog sharedWatchdog];
    [v12 pet];

    uint64_t v11 = 1;
  }

  return v11;
}

void sub_100145F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100146024(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("GDVUVisualUnderstandingService");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1002527F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_1000CACAC();
    sub_10014607C();
  }
}

void sub_10014607C()
{
  v1[0] = 0;
  if (!qword_100252800)
  {
    v1[1] = _NSConcreteStackBlock;
    v1[2] = 3221225472;
    v1[3] = sub_100146178;
    v1[4] = &unk_100219838;
    v1[5] = v1;
    long long v2 = off_10021EAB0;
    uint64_t v3 = 0;
    qword_100252800 = _sl_dlopen();
  }
  uint64_t v0 = (void *)v1[0];
  if (!qword_100252800)
  {
    uint64_t v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_100146178()
{
  uint64_t result = _sl_dlopen();
  qword_100252800 = result;
  return result;
}

Class sub_1001461EC(uint64_t a1)
{
  sub_10014607C();
  Class result = objc_getClass("GDVUEntityRecognitionClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252808 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_1000CAC84();
    return (Class)sub_100146244(v3);
  }
  return result;
}

Class sub_100146244(uint64_t a1)
{
  sub_10014607C();
  Class result = objc_getClass("GDVUContext");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252810 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_10014634C();
    return (Class)sub_10014629C(v3);
  }
  return result;
}

Class sub_10014629C(uint64_t a1)
{
  sub_1001432DC();
  Class result = objc_getClass("HMMutableHomeManagerConfiguration");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252818 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_100146374();
    return (Class)sub_1001462F4(v3);
  }
  return result;
}

Class sub_1001462F4(uint64_t a1)
{
  sub_1001432DC();
  Class result = objc_getClass("HMHomeManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252820 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_10014639C();
    return (Class)sub_10014634C();
  }
  return result;
}

uint64_t sub_10014634C()
{
  uint64_t v0 = abort_report_np();
  return sub_100146374(v0);
}

uint64_t sub_100146374()
{
  uint64_t v0 = abort_report_np();
  return sub_10014639C(v0);
}

MADSpotlightMovieProcessingTask *sub_10014639C()
{
  uint64_t v0 = (MADSpotlightMovieProcessingTask *)abort_report_np();
  return [(MADSpotlightMovieProcessingTask *)v0 initWithCancelBlock:v2 progressHandler:v3 andCompletionHandler:v4];
}

void sub_1001465B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1001465F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v4 code]);
}

void sub_100146650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001466E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001468F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100146918(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) publish];
  if (v2)
  {
    unsigned int v3 = v2;
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      id v4 = VCPLogInstance();
      os_log_type_t v5 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        int v13 = 138412290;
        uint64_t v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to publish batch: %@", (uint8_t *)&v13, 0xCu);
      }
    }
    *(_DWORD *)(*(void *)(a1 + 40) + 24) = v3;
  }
  else
  {
    *(void *)(*(void *)(a1 + 40) + 32) += [*(id *)(a1 + 32) count];
    float v7 = *(unint64_t **)(a1 + 40);
    double v8 = 100.0;
    double v9 = (double)v7[5];
    v10.n128_f64[0] = (double)v7[4] * 100.0 / v9;
    if (v10.n128_f64[0] < 100.0) {
      double v8 = (double)v7[4] * 100.0 / v9;
    }
    BOOL v11 = v10.n128_f64[0] > 0.0;
    v10.n128_u64[0] = 0;
    if (v11) {
      v10.n128_f64[0] = v8;
    }
    long long v12 = *(void (**)(__n128))(v7[6] + 16);
    v12(v10);
  }
}

void sub_100146EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100146F74(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _processAssetsInBatch:*(void *)(a1 + 40)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void sub_1001472DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100147704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100147AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100147B90(uint64_t a1, void *a2)
{
  id v39 = a2;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  id obj = *(id *)(a1 + 32);
  id v3 = [obj countByEnumeratingWithState:&v43 objects:v54 count:16];
  if (v3)
  {
    uint64_t v40 = *(void *)v44;
    os_log_type_t v5 = VCPLogToOSLogType[7];
    os_log_type_t type = VCPLogToOSLogType[3];
    *(void *)&long long v4 = 138413058;
    long long v36 = v4;
    do
    {
      for (unint64_t i = 0; i != v3; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v44 != v40) {
          objc_enumerationMutation(obj);
        }
        float v7 = *(void **)(*((void *)&v43 + 1) + 8 * i);
        if ((int)MediaAnalysisLogLevel() >= 7)
        {
          double v9 = VCPLogInstance();
          if (os_log_type_enabled(v9, v5))
          {
            uint64_t v10 = *(void *)(a1 + 40);
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v10;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v7;
            _os_log_impl((void *)&_mh_execute_header, v9, v5, "%@ Detected face %@", buf, 0x16u);
          }
        }
        BOOL v11 = objc_msgSend(v7, "imageprintWrapper", v36);
        long long v12 = [v11 data];
        int v13 = +[VCPFaceIDModel faceObservationFromFaceprintData:v12];

        if (v13)
        {
          uint64_t v47 = 0;
          unint64_t v48 = &v47;
          uint64_t v49 = 0x2050000000;
          uint64_t v14 = (void *)qword_100252840;
          uint64_t v50 = qword_100252840;
          if (!qword_100252840)
          {
            *(void *)long long buf = _NSConcreteStackBlock;
            *(void *)&uint8_t buf[8] = 3221225472;
            *(void *)&uint8_t buf[16] = sub_10014AB08;
            double v52 = &unk_100219E10;
            v53[0] = &v47;
            sub_10014AB08((uint64_t)buf);
            uint64_t v14 = (void *)v48[3];
          }
          uint64_t v15 = v14;
          _Block_object_dispose(&v47, 8);
          __int16 v16 = objc_alloc_init(v15);
          [v16 setAsset:*(void *)(a1 + 48)];
          uint64_t v47 = 0;
          id v42 = 0;
          LOBYTE(v15) = [v39 addWithObservation:v13 context:v16 priority:1 at:0 output:&v47 error:&v42];
          id v17 = v42;
          if (v15)
          {
            if ((int)MediaAnalysisLogLevel() >= 7)
            {
              uint64_t v18 = VCPLogInstance();
              if (os_log_type_enabled(v18, v5))
              {
                uint64_t v19 = *(void *)(a1 + 40);
                *(_DWORD *)long long buf = 138412546;
                *(void *)&uint8_t buf[4] = v19;
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v47;
                _os_log_impl((void *)&_mh_execute_header, v18, v5, "%@ Added VNFaceObservation %lu to VUGallery", buf, 0x16u);
              }
            }
            uint64_t v20 = *(void *)(a1 + 56);
            uint64_t v21 = 2 * (*(unsigned char *)(a1 + 64) == 0);
            id v41 = v17;
            unsigned __int8 v22 = [v39 tag:v47 with:v20 type:v21 error:&v41];
            id v23 = v41;

            if (v22)
            {
              if ((int)MediaAnalysisLogLevel() >= 7)
              {
                long long v24 = VCPLogInstance();
                if (os_log_type_enabled(v24, v5))
                {
                  uint64_t v25 = *(void *)(a1 + 40);
                  uint64_t v26 = *(void **)(a1 + 56);
                  CFStringRef v27 = @"YES";
                  if (!*(unsigned char *)(a1 + 64)) {
                    CFStringRef v27 = @"NO";
                  }
                  *(_DWORD *)long long buf = v36;
                  *(void *)&uint8_t buf[4] = v25;
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v47;
                  *(_WORD *)&buf[22] = 2112;
                  double v52 = v26;
                  LOWORD(v53[0]) = 2112;
                  *(void *)((char *)v53 + 2) = v27;
                  id v28 = v24;
                  os_log_type_t v29 = v5;
                  long long v30 = "%@ Tagged VNFaceObservation %lu with contact %@ to VUGallery (Confirmed: %@)";
LABEL_33:
                  _os_log_impl((void *)&_mh_execute_header, v28, v29, v30, buf, 0x2Au);
                }
                goto LABEL_34;
              }
LABEL_36:
              id v17 = v23;
LABEL_37:

              goto LABEL_38;
            }
            if ((int)MediaAnalysisLogLevel() < 3) {
              goto LABEL_36;
            }
            long long v24 = VCPLogInstance();
            if (os_log_type_enabled(v24, type))
            {
              uint64_t v33 = *(void *)(a1 + 40);
              uint64_t v34 = *(void **)(a1 + 56);
              *(_DWORD *)long long buf = v36;
              *(void *)&uint8_t buf[4] = v33;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v47;
              *(_WORD *)&buf[22] = 2112;
              double v52 = v34;
              LOWORD(v53[0]) = 2112;
              *(void *)((char *)v53 + 2) = v23;
              id v28 = v24;
              os_log_type_t v29 = type;
              long long v30 = "%@ Failed to tag VNFaceObservation %lu with contact %@ to VUGallery - %@";
              goto LABEL_33;
            }
LABEL_34:
            id v17 = v23;
          }
          else
          {
            if ((int)MediaAnalysisLogLevel() < 3) {
              goto LABEL_37;
            }
            long long v24 = VCPLogInstance();
            if (os_log_type_enabled(v24, type))
            {
              uint64_t v32 = *(void *)(a1 + 40);
              *(_DWORD *)long long buf = 138412546;
              *(void *)&uint8_t buf[4] = v32;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v17;
              _os_log_impl((void *)&_mh_execute_header, v24, type, "%@ Failed to add VNFaceObservation to VUGallery - %@", buf, 0x16u);
            }
          }

          goto LABEL_37;
        }
        if ((int)MediaAnalysisLogLevel() < 3) {
          goto LABEL_39;
        }
        __int16 v16 = VCPLogInstance();
        if (os_log_type_enabled(v16, type))
        {
          uint64_t v31 = *(void *)(a1 + 40);
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v31;
          _os_log_impl((void *)&_mh_execute_header, v16, type, "%@ Failed to create VNFaceObservation; ignoring",
            buf,
            0xCu);
        }
LABEL_38:

LABEL_39:
      }
      id v3 = [obj countByEnumeratingWithState:&v43 objects:v54 count:16];
    }
    while (v3);
  }

  return 0;
}

void sub_100148160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1001486DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001494D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_1001496E4()
{
  uint64_t v4 = 0;
  os_log_type_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_100252858;
  uint64_t v7 = qword_100252858;
  if (!qword_100252858)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10014AD18;
    v3[3] = &unk_100219E10;
    v3[4] = &v4;
    sub_10014AD18((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1001497B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10014A148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  _Unwind_Resume(a1);
}

id sub_10014A318(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

uint64_t sub_10014A324(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v26 = a1;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v29 objects:v39 count:16];
  uint64_t v6 = 0;
  if (v4)
  {
    uint64_t v7 = *(void *)v30;
    os_log_type_t v8 = VCPLogToOSLogType[7];
    os_log_type_t type = VCPLogToOSLogType[3];
    *(void *)&long long v5 = 138412802;
    long long v24 = v5;
    do
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v30 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void *)(*((void *)&v29 + 1) + 8 * i);
        long long v12 = +[VCPWatchdog sharedWatchdog];
        [v12 pet];

        if ((int)MediaAnalysisLogLevel() >= 7)
        {
          int v13 = VCPLogInstance();
          if (os_log_type_enabled(v13, v8))
          {
            uint64_t v14 = *(void *)(v26 + 40);
            *(_DWORD *)long long buf = 138412546;
            uint64_t v34 = v14;
            __int16 v35 = 2112;
            uint64_t v36 = v10;
            _os_log_impl((void *)&_mh_execute_header, v13, v8, "%@ Removing asset %@ ...", buf, 0x16u);
          }
        }
        id v28 = 0;
        unsigned int v15 = objc_msgSend(v3, "removeWithAsset:error:", v10, &v28, v24);
        id v16 = v28;
        if (v15)
        {
          ++v6;
        }
        else if ((int)MediaAnalysisLogLevel() >= 3)
        {
          id v17 = VCPLogInstance();
          if (os_log_type_enabled(v17, type))
          {
            uint64_t v18 = *(void *)(v26 + 40);
            *(_DWORD *)long long buf = v24;
            uint64_t v34 = v18;
            __int16 v35 = 2112;
            uint64_t v36 = v10;
            __int16 v37 = 2112;
            id v38 = v16;
            _os_log_impl((void *)&_mh_execute_header, v17, type, "%@ Failed to remove asset %@ from Gallery - %@; ignore",
              buf,
              0x20u);
          }
        }
      }
      id v4 = [obj countByEnumeratingWithState:&v29 objects:v39 count:16];
    }
    while (v4);
  }

  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v19 = VCPLogInstance();
    os_log_type_t v20 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = *(void *)(v26 + 40);
      id v22 = [*(id *)(v26 + 32) count];
      *(_DWORD *)long long buf = 138412802;
      uint64_t v34 = v21;
      __int16 v35 = 2048;
      uint64_t v36 = v6;
      __int16 v37 = 2048;
      id v38 = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%@ Removed %lu (out of %lu) asset(s) from Gallery", buf, 0x20u);
    }
  }
  return 0;
}

void sub_10014A638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10014A6A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      [v3 fractionCompleted];
      int v14 = 138412546;
      uint64_t v15 = v6;
      __int16 v16 = 2048;
      double v17 = (float)(v7 * 100.0);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Gallery updating - %.2f%%", (uint8_t *)&v14, 0x16u);
    }
  }
  os_log_type_t v8 = [*(id *)(a1 + 40) cancelBlock];
  if (v8
    && ([*(id *)(a1 + 40) cancelBlock],
        double v9 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue(),
        char v10 = v9[2](),
        v9,
        v8,
        (v10 & 1) != 0))
  {
    uint64_t v11 = 0;
  }
  else
  {
    long long v12 = +[VCPWatchdog sharedWatchdog];
    [v12 pet];

    uint64_t v11 = 1;
  }

  return v11;
}

void sub_10014A80C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10014A8E8(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("GDVUVisualUnderstandingService");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252828 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_1000CACAC();
    sub_10014A940();
  }
}

void sub_10014A940()
{
  v1[0] = 0;
  if (!qword_100252830)
  {
    v1[1] = _NSConcreteStackBlock;
    v1[2] = 3221225472;
    v1[3] = sub_10014AA3C;
    v1[4] = &unk_100219838;
    v1[5] = v1;
    long long v2 = off_10021EAF0;
    uint64_t v3 = 0;
    qword_100252830 = _sl_dlopen();
  }
  uint64_t v0 = (void *)v1[0];
  if (!qword_100252830)
  {
    uint64_t v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_10014AA3C()
{
  uint64_t result = _sl_dlopen();
  qword_100252830 = result;
  return result;
}

Class sub_10014AAB0(uint64_t a1)
{
  sub_10014A940();
  Class result = objc_getClass("GDVUEntityRecognitionClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252838 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_1000CAC84();
    return (Class)sub_10014AB08(v3);
  }
  return result;
}

Class sub_10014AB08(uint64_t a1)
{
  sub_10014A940();
  Class result = objc_getClass("GDVUContext");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252840 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_10014634C();
    return (Class)sub_10014AB60(v3);
  }
  return result;
}

Class sub_10014AB60(uint64_t a1)
{
  v4[0] = 0;
  if (!qword_100252850)
  {
    v4[1] = _NSConcreteStackBlock;
    _DWORD v4[2] = 3221225472;
    v4[3] = sub_10014ACA4;
    v4[4] = &unk_100219838;
    v4[5] = v4;
    long long v5 = off_10021EB08;
    uint64_t v6 = 0;
    qword_100252850 = _sl_dlopen();
    id v2 = (id)v4[0];
    if (!qword_100252850)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("PRSPosterArchiver");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    id v2 = sub_10014AED0();
LABEL_8:
    free(v2);
  }
  qword_100252848 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10014ACA4()
{
  uint64_t result = _sl_dlopen();
  qword_100252850 = result;
  return result;
}

Class sub_10014AD18(uint64_t a1)
{
  v4[0] = 0;
  if (!qword_100252860)
  {
    v4[1] = _NSConcreteStackBlock;
    _DWORD v4[2] = 3221225472;
    v4[3] = sub_10014AE5C;
    v4[4] = &unk_100219838;
    v4[5] = v4;
    long long v5 = off_10021EB20;
    uint64_t v6 = 0;
    qword_100252860 = _sl_dlopen();
    id v2 = (id)v4[0];
    if (!qword_100252860)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("PISegmentationLoader");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    id v2 = sub_10014AEF8();
LABEL_8:
    free(v2);
  }
  qword_100252858 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10014AE5C()
{
  uint64_t result = _sl_dlopen();
  qword_100252860 = result;
  return result;
}

id sub_10014AED0()
{
  return sub_10014AEF8();
}

id sub_10014AEF8()
{
  uint64_t v0 = (void *)abort_report_np();
  return +[VCPAutoBugCapture timeoutSubTypeForKnownTimeoutRisk:v2];
}

void sub_10014B2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10014B338(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v29 = 0;
  long long v30 = &v29;
  uint64_t v31 = 0x2020000000;
  id v4 = (void *)qword_100252878;
  uint64_t v32 = qword_100252878;
  if (!qword_100252878)
  {
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_10014BA58;
    *(void *)&unsigned char buf[24] = &unk_10021EB68;
    uint64_t v34 = &v29;
    long long v5 = (void *)sub_10014B8E4();
    uint64_t v6 = dlsym(v5, "kSymptomDiagnosticReplySuccess");
    *(void *)(v34[1] + 24) = v6;
    qword_100252878 = *(void *)(v34[1] + 24);
    id v4 = (void *)v30[3];
  }
  _Block_object_dispose(&v29, 8);
  if (!v4) {
    goto LABEL_30;
  }
  float v7 = objc_msgSend(v3, "objectForKeyedSubscript:", *v4, v29);
  unsigned int v8 = [v7 BOOLValue];

  if (v8)
  {
    if ((int)MediaAnalysisLogLevel() >= 5)
    {
      double v9 = VCPLogInstance();
      os_log_type_t v10 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "[VCPAutoBugCapture] %@ crash was reported", buf, 0xCu);
      }
LABEL_23:

      goto LABEL_24;
    }
    goto LABEL_24;
  }
  uint64_t v29 = 0;
  long long v30 = &v29;
  uint64_t v31 = 0x2020000000;
  long long v12 = (void *)qword_100252880;
  uint64_t v32 = qword_100252880;
  if (!qword_100252880)
  {
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_10014BAA8;
    *(void *)&unsigned char buf[24] = &unk_10021EB68;
    uint64_t v34 = &v29;
    int v13 = (void *)sub_10014B8E4();
    int v14 = dlsym(v13, "kSymptomDiagnosticReplyReason");
    *(void *)(v34[1] + 24) = v14;
    qword_100252880 = *(void *)(v34[1] + 24);
    long long v12 = (void *)v30[3];
  }
  _Block_object_dispose(&v29, 8);
  if (!v12) {
    goto LABEL_30;
  }
  uint64_t v15 = objc_msgSend(v3, "objectForKeyedSubscript:", *v12, v29);
  id v16 = [v15 unsignedIntegerValue];

  uint64_t v29 = 0;
  long long v30 = &v29;
  uint64_t v31 = 0x2020000000;
  double v17 = (_DWORD *)qword_100252888;
  uint64_t v32 = qword_100252888;
  if (!qword_100252888)
  {
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_10014BAF8;
    *(void *)&unsigned char buf[24] = &unk_10021EB68;
    uint64_t v34 = &v29;
    uint64_t v18 = (void *)sub_10014B8E4();
    uint64_t v19 = dlsym(v18, "kSymptomDiagnosticErrorDailyLimitExceeded");
    *(void *)(v34[1] + 24) = v19;
    qword_100252888 = *(void *)(v34[1] + 24);
    double v17 = (_DWORD *)v30[3];
  }
  _Block_object_dispose(&v29, 8);
  if (!v17) {
    goto LABEL_30;
  }
  if (v16 == (id)(int)*v17) {
    goto LABEL_20;
  }
  uint64_t v29 = 0;
  long long v30 = &v29;
  uint64_t v31 = 0x2020000000;
  os_log_type_t v20 = (_DWORD *)qword_100252890;
  uint64_t v32 = qword_100252890;
  if (!qword_100252890)
  {
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_10014BB48;
    *(void *)&unsigned char buf[24] = &unk_10021EB68;
    uint64_t v34 = &v29;
    uint64_t v21 = (void *)sub_10014B8E4();
    id v22 = dlsym(v21, "kSymptomDiagnosticErrorRandomizedSuppression");
    *(void *)(v34[1] + 24) = v22;
    qword_100252890 = *(void *)(v34[1] + 24);
    os_log_type_t v20 = (_DWORD *)v30[3];
  }
  _Block_object_dispose(&v29, 8);
  if (!v20)
  {
LABEL_30:
    sub_10014BB98();
    __break(1u);
  }
  if (v16 == (id)(int)*v20)
  {
LABEL_20:
    if ((int)MediaAnalysisLogLevel() >= 5)
    {
      double v9 = VCPLogInstance();
      os_log_type_t v23 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v9, v23))
      {
        uint64_t v24 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v24;
        _os_log_impl((void *)&_mh_execute_header, v9, v23, "[VCPAutoBugCapture] %@ crash report was rate-limited (Expected non-report)", buf, 0xCu);
      }
      goto LABEL_23;
    }
LABEL_24:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    goto LABEL_25;
  }
  if ((int)MediaAnalysisLogLevel() >= 3)
  {
    uint64_t v25 = VCPLogInstance();
    os_log_type_t v26 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = *(void *)(a1 + 32);
      uint64_t v28 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412802;
      *(void *)&uint8_t buf[4] = v27;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v16;
      *(_WORD *)&buf[18] = 2112;
      *(void *)&buf[20] = v28;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "[VCPAutoBugCapture] Failed to report %@ crash. reason: %d, signature: %@", buf, 0x1Cu);
    }
  }
LABEL_25:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_10014B860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

Class sub_10014B88C(uint64_t a1)
{
  sub_10014B8E4();
  Class result = objc_getClass("SDRDiagnosticReporter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252868 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_10014BBBC();
    return (Class)sub_10014B8E4();
  }
  return result;
}

uint64_t sub_10014B8E4()
{
  v3[0] = 0;
  if (!qword_100252870)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = 3221225472;
    v3[3] = sub_10014B9E4;
    v3[4] = &unk_100219838;
    void v3[5] = v3;
    long long v4 = off_10021EB88;
    uint64_t v5 = 0;
    qword_100252870 = _sl_dlopen();
  }
  uint64_t v0 = qword_100252870;
  SEL v1 = (void *)v3[0];
  if (!qword_100252870)
  {
    SEL v1 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v3[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t sub_10014B9E4()
{
  uint64_t result = _sl_dlopen();
  qword_100252870 = result;
  return result;
}

void *sub_10014BA58(uint64_t a1)
{
  unint64_t v2 = (void *)sub_10014B8E4();
  uint64_t result = dlsym(v2, "kSymptomDiagnosticReplySuccess");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100252878 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10014BAA8(uint64_t a1)
{
  unint64_t v2 = (void *)sub_10014B8E4();
  uint64_t result = dlsym(v2, "kSymptomDiagnosticReplyReason");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100252880 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10014BAF8(uint64_t a1)
{
  unint64_t v2 = (void *)sub_10014B8E4();
  uint64_t result = dlsym(v2, "kSymptomDiagnosticErrorDailyLimitExceeded");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100252888 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10014BB48(uint64_t a1)
{
  unint64_t v2 = (void *)sub_10014B8E4();
  uint64_t result = dlsym(v2, "kSymptomDiagnosticErrorRandomizedSuppression");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100252890 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10014BB98()
{
  dlerror();
  uint64_t v0 = abort_report_np();
  return sub_10014BBBC(v0);
}

MADGDUtilities *sub_10014BBBC()
{
  uint64_t v0 = (MADGDUtilities *)abort_report_np();
  return [(MADGDUtilities *)v0 init];
}

MADGDUtilities *__cdecl sub_10014BCEC(id a1)
{
  SEL v1 = objc_alloc_init(MADGDUtilities);
  return v1;
}

void sub_10014BD34(id a1)
{
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    SEL v1 = VCPLogInstance();
    os_log_type_t v2 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v1, v2))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "[MADGDUtilities] Flushing operation queue ...", v3, 2u);
    }
  }
}

uint64_t sub_10014BFB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v22 = a1;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v27 objects:v35 count:16];
  if (v4)
  {
    id v5 = v4;
    id v6 = 0;
    float v7 = 0;
    uint64_t v8 = *(void *)v28;
    os_log_type_t type = VCPLogToOSLogType[7];
    os_log_type_t v24 = VCPLogToOSLogType[3];
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        os_log_type_t v10 = v6;
        if (*(void *)v28 != v8) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        id v13 = [v11 integerValue];
        id v26 = v6;
        unsigned int v14 = [v3 remove:v13 error:&v26];
        id v6 = v26;

        int v15 = MediaAnalysisLogLevel();
        if (v14)
        {
          if (v15 >= 7)
          {
            id v16 = VCPLogInstance();
            if (os_log_type_enabled(v16, type))
            {
              *(_DWORD *)long long buf = 138412290;
              uint64_t v32 = v11;
              _os_log_impl((void *)&_mh_execute_header, v16, type, "[GallerySync] Removing %@ ...", buf, 0xCu);
            }
          }
          ++v7;
        }
        else if (v15 >= 3)
        {
          double v17 = VCPLogInstance();
          if (os_log_type_enabled(v17, v24))
          {
            *(_DWORD *)long long buf = 138412546;
            uint64_t v32 = v11;
            __int16 v33 = 2112;
            id v34 = v6;
            _os_log_impl((void *)&_mh_execute_header, v17, v24, "[GallerySync] Failed to remove observationID %@ from Gallery - %@", buf, 0x16u);
          }
        }
      }
      id v5 = [obj countByEnumeratingWithState:&v27 objects:v35 count:16];
    }
    while (v5);
  }
  else
  {
    id v6 = 0;
    float v7 = 0;
  }

  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v18 = VCPLogInstance();
    os_log_type_t v19 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = [*(id *)(v22 + 32) count];
      *(_DWORD *)long long buf = 134218240;
      uint64_t v32 = v7;
      __int16 v33 = 2048;
      id v34 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[GallerySync] Removed %lu (out of %lu) observation(s) from Gallery", buf, 0x16u);
    }
  }
  return 0;
}

id sub_10014C448(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) count];
  if (result)
  {
    unint64_t v4 = 0;
    os_log_type_t v5 = VCPLogToOSLogType[7];
    *(void *)&long long v3 = 138412546;
    long long v13 = v3;
    do
    {
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        id v6 = VCPLogInstance();
        if (os_log_type_enabled(v6, v5))
        {
          float v7 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v4];
          uint64_t v8 = [v7 localIdentifier];
          double v9 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v4];
          id v10 = [v9 vuObservationID];
          *(_DWORD *)long long buf = v13;
          int v15 = v8;
          __int16 v16 = 2048;
          id v17 = v10;
          _os_log_impl((void *)&_mh_execute_header, v6, v5, "[GallerySync] Reset face %@ observationID %lu", buf, 0x16u);
        }
      }
      uint64_t v11 = objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v4, v13);
      long long v12 = +[PHFaceChangeRequest changeRequestForFace:v11];
      [v12 setVuObservationID:0];

      ++v4;
      id result = [*(id *)(a1 + 32) count];
    }
    while (v4 < (unint64_t)result);
  }
  return result;
}

void sub_10014CA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose((const void *)(v30 - 176), 8);
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10014CA6C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10014CA7C(uint64_t a1)
{
}

void sub_10014CA84(void *a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  id v6 = +[VCPWatchdog sharedWatchdog];
  [v6 pet];

  uint64_t v7 = a1[5];
  if (v7 && (*(unsigned int (**)(void))(v7 + 16))())
  {
    uint64_t v8 = *(void *)(a1[6] + 8);
    int v9 = -128;
LABEL_15:
    *(_DWORD *)(v8 + 24) = v9;
    *a3 = 1;
    goto LABEL_16;
  }
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v10 = VCPLogInstance();
    os_log_type_t v11 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = a1[4];
      int v24 = 138412546;
      uint64_t v25 = v12;
      __int16 v26 = 2112;
      id v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%@ Evaluating Change %@", (uint8_t *)&v24, 0x16u);
    }
  }
  if (([v5 hasIncrementalChanges] & 1) == 0)
  {
    if ((int)MediaAnalysisLogLevel() >= 5)
    {
      uint64_t v21 = VCPLogInstance();
      os_log_type_t v22 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = a1[4];
        int v24 = 138412546;
        uint64_t v25 = v23;
        __int16 v26 = 2112;
        id v27 = v5;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "%@ Non-incremental change (%@); falling back to full scan",
          (uint8_t *)&v24,
          0x16u);
      }
    }
    uint64_t v8 = *(void *)(a1[6] + 8);
    int v9 = -23801;
    goto LABEL_15;
  }
  uint64_t v13 = [v5 changeToken];
  uint64_t v14 = *(void *)(a1[7] + 8);
  int v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v13;

  __int16 v16 = [v5 changedLocalIdentifiersForEntityClass:objc_opt_class()];
  id v17 = *(void **)(*(void *)(a1[8] + 8) + 40);
  uint64_t v18 = [v16 objectForKeyedSubscript:PHInsertedLocalIdentifiersKey];
  [v17 unionSet:v18];

  os_log_type_t v19 = *(void **)(*(void *)(a1[8] + 8) + 40);
  id v20 = [v16 objectForKeyedSubscript:PHUpdatedLocalIdentifiersKey];
  [v19 unionSet:v20];

LABEL_16:
}

void sub_10014CD04(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    unint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Changed person %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_10014D094(uint64_t a1)
{
  id v3 = +[PHPersonDeleteRequest deleteRequestsForObjects:*(void *)(a1 + 32) ofType:objc_opt_class() forSelector:*(void *)(a1 + 40)];
  if ([v3 count])
  {
    unint64_t v1 = 0;
    do
    {
      os_log_type_t v2 = [v3 objectAtIndexedSubscript:v1];
      [v2 setForce:1];

      ++v1;
    }
    while (v1 < (unint64_t)[v3 count]);
  }
}

void sub_10014D2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10014D2F0(uint64_t a1)
{
  unint64_t v1 = objc_msgSend(*(id *)(a1 + 32), "vcp_description");
  v498 = +[NSString stringWithFormat:@"[GallerySync][%@]", v1];

  uint64_t v2 = a1;
  if (!*(unsigned char *)(*(void *)(a1 + 40) + 16))
  {
    id v458 = objc_alloc_init((Class)VCPTimeMeasurement);
    [v458 start];
    uint64_t v5 = *(void *)(a1 + 56);
    if (v5 && (*(unsigned int (**)(void))(v5 + 16))())
    {
      if ((int)MediaAnalysisLogLevel() < 6)
      {
LABEL_534:

        goto LABEL_535;
      }
      uint64_t v6 = VCPLogInstance();
      os_log_type_t v7 = VCPLogToOSLogType[6];
      uint64_t v8 = v6;
      if (os_log_type_enabled(v6, v7))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v498;
        _os_log_impl((void *)&_mh_execute_header, v8, v7, "%@ Cancelled", buf, 0xCu);
      }
LABEL_533:

      goto LABEL_534;
    }
    v464 = +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:*(void *)(a1 + 32)];
    id v9 = -[NSObject valueForKey:](v464, "valueForKey:");
    double v10 = (double)(uint64_t)v9;
    v447 = +[NSDate dateWithTimeIntervalSinceReferenceDate:(double)(uint64_t)v9];
    if (v9)
    {
      os_log_type_t v11 = +[NSDate now];
      [v11 timeIntervalSinceReferenceDate];
      BOOL v13 = v12 - v10 >= 43200.0;
    }
    else
    {
      BOOL v13 = 1;
    }
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      uint64_t v14 = VCPLogInstance();
      os_log_type_t v15 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v14, v15))
      {
        if (v13) {
          CFStringRef v16 = @"Yes";
        }
        else {
          CFStringRef v16 = @"No";
        }
        id v17 = +[VCPLogManager dateFormatter];
        id v18 = [v17 stringFromDate:v447];
        *(_DWORD *)long long buf = 138412802;
        *(void *)&uint8_t buf[4] = v498;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v16;
        *(_WORD *)&buf[22] = 2112;
        *(void *)&unsigned char buf[24] = v18;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "%@ Deep sync needed: %@ (last sync date: %@", buf, 0x20u);
      }
    }
    uint64_t v440 = mach_absolute_time();
    os_log_type_t v19 = VCPSignPostLog();
    os_signpost_id_t spid = os_signpost_id_generate(v19);

    id v20 = VCPSignPostLog();
    uint64_t v21 = v20;
    if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_INTERVAL_BEGIN, spid, "GallerySync_EndToEnd", (const char *)&unk_1001F3BD3, buf, 2u);
    }

    id v543 = 0;
    [v464 queryChangeToken:&v543 forTaskID:3 andChangeTokenType:3];
    id v462 = v543;
    v446 = [*(id *)(a1 + 32) currentToken];
    if (v462)
    {
      if ((int)MediaAnalysisLogLevel() >= 6)
      {
        os_log_type_t v22 = VCPLogInstance();
        os_log_type_t v23 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v22, v23))
        {
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v498;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v462;
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "%@ Person update change token present (%@)", buf, 0x16u);
        }
      }
      uint64_t v25 = *(void *)(a1 + 32);
      int v24 = *(void **)(a1 + 40);
      id v542 = 0;
      id v541 = 0;
      unsigned int v26 = [v24 _fetchChangedPersonSinceChangeToken:v462 photosLibrary:v25 changedPersonLocalIdentifiers:&v542 latestChangeToken:&v541 cancelOrExtendTimeoutBlock:*(void *)(a1 + 56)];
      id v449 = v542;
      id v445 = v541;
      BOOL v27 = v26 != 0;
    }
    else
    {
      id v449 = 0;
      id v445 = 0;
      BOOL v27 = 1;
    }
    BOOL v457 = v27;
    uint64_t v28 = a1;
    uint64_t v29 = *(void *)(a1 + 56);
    if (v29)
    {
      int v30 = (*(uint64_t (**)(void))(v29 + 16))();
      uint64_t v28 = a1;
      if (v30)
      {
        if ((int)MediaAnalysisLogLevel() < 6)
        {
LABEL_532:

          uint64_t v8 = v464;
          goto LABEL_533;
        }
        uint64_t v31 = VCPLogInstance();
        os_log_type_t v32 = VCPLogToOSLogType[6];
        __int16 v33 = v31;
        if (os_log_type_enabled(v31, v32))
        {
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v498;
          _os_log_impl((void *)&_mh_execute_header, v33, v32, "%@ Cancelled", buf, 0xCu);
        }
LABEL_531:

        goto LABEL_532;
      }
    }
    v470 = objc_msgSend(*(id *)(v28 + 32), "mad_allFacesFetchOptions");
    v561[0] = PHFacePropertySetIdentifier;
    v561[1] = PHFacePropertySetCore;
    v561[2] = PHFacePropertySetClustering;
    v561[3] = PHFacePropertySetPersonBuilder;
    id v34 = +[NSArray arrayWithObjects:v561 count:4];
    [v470 setFetchPropertySets:v34];

    if (!v13) {
      goto LABEL_248;
    }
    objc_msgSend(*(id *)(a1 + 32), "mad_allPersonsFetchOptionsWithDetectionTypes:andVerifiedTypes:", 0, &off_1002306E0);
    os_log_t oslog = (os_log_t)objc_claimAutoreleasedReturnValue();
    __int16 v35 = +[NSPredicate predicateWithFormat:@"faceCount = 0"];
    uint64_t v36 = [oslog predicate];

    if (v36)
    {
      __int16 v37 = [oslog predicate];
      v560[0] = v37;
      v560[1] = v35;
      id v38 = +[NSArray arrayWithObjects:v560 count:2];
      uint64_t v39 = +[NSCompoundPredicate andPredicateWithSubpredicates:v38];

      uint64_t v40 = (void *)v39;
    }
    else
    {
      uint64_t v40 = v35;
    }
    v490 = v40;
    -[NSObject setPredicate:](oslog, "setPredicate:");
    if (v457)
    {
      id v41 = +[MADStateHandler sharedStateHandler];
      [v41 addBreadcrumb:@"[GallerySync] Fetching 0-face unverified persons with fetchOptions: %@", oslog];

      id v42 = +[PHPerson fetchPersonsWithOptions:oslog];
      long long v43 = +[MADStateHandler sharedStateHandler];
      objc_msgSend(v43, "addBreadcrumb:", @"[GallerySync] Fetched %lu 0-face unverified persons", objc_msgSend(v42, "count"));
    }
    else
    {
      id v42 = 0;
    }
    if ([v42 count])
    {
      uint64_t v478 = mach_absolute_time();
      long long v44 = VCPSignPostLog();
      os_signpost_id_t v481 = os_signpost_id_generate(v44);

      long long v45 = VCPSignPostLog();
      long long v46 = v45;
      if (v481 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v45))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v46, OS_SIGNPOST_INTERVAL_BEGIN, v481, "GallerySync_removeZeroFaceUnverifiedPersons", (const char *)&unk_1001F3BD3, buf, 2u);
      }

      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        uint64_t v47 = VCPLogInstance();
        os_log_type_t v48 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v47, v48))
        {
          id v49 = [v42 count];
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = @"[GallerySync_UnverifiedPerson]";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v49;
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "%@ Checking %lu 0-face unverified persons", buf, 0x16u);
        }
      }
      uint64_t v50 = +[MADStateHandler sharedStateHandler];
      [v50 addBreadcrumb:@"%@ Checking %lu 0-face unverified persons", @"[GallerySync_UnverifiedPerson]", objc_msgSend(v42, "count")];

      uint64_t v51 = +[NSMutableArray array];
      uint64_t v52 = 0;
      if ([v42 count])
      {
        uint64_t v53 = 0;
        os_log_type_t v54 = VCPLogToOSLogType[7];
        while (1)
        {
          uint64_t v56 = *(void *)(a1 + 56);
          if (v56)
          {
            if ((*(unsigned int (**)(void))(v56 + 16))()) {
              break;
            }
          }
          double v57 = [v42 objectAtIndexedSubscript:v53];
          id v58 = +[PHFace fetchFacesForPerson:v57 options:v470];
          BOOL v59 = [v58 count] == 0;

          if (v59)
          {
            [v51 addObject:v57];
            ++v52;
            if ((unint64_t)[v51 count] >= 0x3E8)
            {
              [*(id *)(a1 + 40) _deleteUnverifiedPersonsWithZeroFaces:v51];
              [v51 removeAllObjects];
            }
          }
          else if ((int)MediaAnalysisLogLevel() >= 7)
          {
            id v60 = VCPLogInstance();
            if (os_log_type_enabled(v60, v54))
            {
              id v61 = [v57 localIdentifier];
              *(_DWORD *)long long buf = 138412546;
              *(void *)&uint8_t buf[4] = @"[GallerySync_UnverifiedPerson]";
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v61;
              _os_log_impl((void *)&_mh_execute_header, v60, v54, "%@ Ignoring unverified person %@ (has face)", buf, 0x16u);
            }
          }

          if (++v53 >= (unint64_t)[v42 count]) {
            goto LABEL_64;
          }
        }
        if ((int)MediaAnalysisLogLevel() >= 6)
        {
          long long v157 = VCPLogInstance();
          os_log_type_t v158 = VCPLogToOSLogType[6];
          if (os_log_type_enabled(v157, v158))
          {
            *(_DWORD *)long long buf = 138412290;
            *(void *)&uint8_t buf[4] = @"[GallerySync_UnverifiedPerson]";
            _os_log_impl((void *)&_mh_execute_header, v157, v158, "%@ Cancelled", buf, 0xCu);
          }
        }
        goto LABEL_192;
      }
LABEL_64:
      if ([v51 count])
      {
        [*(id *)(a1 + 40) _deleteUnverifiedPersonsWithZeroFaces:v51];
        [v51 removeAllObjects];
      }
      if (v52)
      {
        if ((int)MediaAnalysisLogLevel() >= 5)
        {
          long long v62 = VCPLogInstance();
          os_log_type_t v63 = VCPLogToOSLogType[5];
          if (os_log_type_enabled(v62, v63))
          {
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = @"[GallerySync_UnverifiedPerson]";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v52;
            _os_log_impl((void *)&_mh_execute_header, v62, v63, "%@ Deleted %lu 0-face unverified persons", buf, 0x16u);
          }
        }
        id v64 = +[MADStateHandler sharedStateHandler];
        [v64 addBreadcrumb:@"%@ Deleted %lu 0-face unverified persons", @"[GallerySync_UnverifiedPerson]", v52];
      }
      __int16 v65 = VCPSignPostLog();
      id v66 = v65;
      if (v481 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v65))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v66, OS_SIGNPOST_INTERVAL_END, v481, "GallerySync_removeZeroFaceUnverifiedPersons", (const char *)&unk_1001F3BD3, buf, 2u);
      }

      if (v478)
      {
        mach_absolute_time();
        VCPPerformance_LogMeasurement();
      }
      uint64_t v67 = *(void *)(a1 + 56);
      if (v67 && (*(unsigned int (**)(void))(v67 + 16))())
      {
        if ((int)MediaAnalysisLogLevel() >= 6)
        {
          unsigned int v68 = VCPLogInstance();
          os_log_type_t v69 = VCPLogToOSLogType[6];
          if (os_log_type_enabled(v68, v69))
          {
            *(_DWORD *)long long buf = 138412290;
            *(void *)&uint8_t buf[4] = @"[GallerySync_UnverifiedPerson]";
            _os_log_impl((void *)&_mh_execute_header, v68, v69, "%@ Cancelled", buf, 0xCu);
          }
        }
LABEL_192:

LABEL_530:
        __int16 v33 = v470;
        goto LABEL_531;
      }
    }

    os_signpost_id_t v450 = mach_absolute_time();
    os_log_type_t v70 = VCPSignPostLog();
    os_signpost_id_t v454 = os_signpost_id_generate(v70);

    id v71 = VCPSignPostLog();
    id v72 = v71;
    if (v454 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v71))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v72, OS_SIGNPOST_INTERVAL_BEGIN, v454, "GallerySync_loadObservationIDFromPhotos", (const char *)&unk_1001F3BD3, buf, 2u);
    }

    uint64_t v73 = +[MADStateHandler sharedStateHandler];
    [v73 addBreadcrumb:@"[GallerySync] Reset vuObservationIDs to all unknown vuObservationIDs from Photos DB"];

    v467 = objc_msgSend(*(id *)(a1 + 32), "mad_allFacesFetchOptions");
    uint64_t v74 = +[NSPredicate predicateWithFormat:@"vuObservationID != 0"];
    [v467 setInternalPredicate:v74];

    v491 = +[PHFace fetchFacesWithOptions:v467];
    v471 = +[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", [v491 count]);
    if ([v491 count])
    {
      unint64_t v75 = 0;
      do
      {
        int v77 = [v491 objectAtIndexedSubscript:v75];
        long long v78 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v77 vuObservationID]);
        [v471 addObject:v78];

        ++v75;
      }
      while (v75 < (unint64_t)[v491 count]);
    }
    v463 = objc_msgSend(*(id *)(a1 + 32), "mad_allPersonsFetchOptions");
    long long v79 = +[NSPredicate predicateWithFormat:@"verifiedType = %ld", -2];
    [v463 setPredicate:v79];

    v479 = +[PHPerson fetchPersonsWithOptions:v463];
    os_log_t osloga = +[NSMutableSet set];
    if ([v479 count])
    {
      os_signpost_id_t v482 = 0;
      os_log_type_t v80 = VCPLogToOSLogType[7];
      do
      {
        uint64_t v81 = *(void *)(a1 + 56);
        if (v81 && (*(unsigned int (**)(void))(v81 + 16))())
        {
          if ((int)MediaAnalysisLogLevel() >= 6)
          {
            uint64_t v154 = VCPLogInstance();
            os_log_type_t v155 = VCPLogToOSLogType[6];
            if (os_log_type_enabled(v154, v155))
            {
              *(_DWORD *)long long buf = 138412290;
              *(void *)&uint8_t buf[4] = v498;
              _os_log_impl((void *)&_mh_execute_header, v154, v155, "%@ Cancelled", buf, 0xCu);
            }
          }
          int v156 = 1;
          goto LABEL_242;
        }
        v486 = [v479 objectAtIndexedSubscript:v482];
        if ((int)MediaAnalysisLogLevel() >= 7)
        {
          uint64_t v82 = VCPLogInstance();
          if (os_log_type_enabled(v82, v80))
          {
            v83 = [v486 localIdentifier];
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v498;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v83;
            _os_log_impl((void *)&_mh_execute_header, v82, v80, "%@ Checking tombstone person %@ to collect all connecting faces to remove", buf, 0x16u);
          }
        }
        id v84 = +[PHFace fetchFacesForPerson:v486 options:v467];
        if ([v84 count])
        {
          unint64_t v85 = 0;
          do
          {
            unint64_t v87 = [v84 objectAtIndexedSubscript:v85];
            if ((int)MediaAnalysisLogLevel() >= 7)
            {
              unint64_t v88 = VCPLogInstance();
              if (os_log_type_enabled(v88, v80))
              {
                uint64_t v89 = [v87 localIdentifier];
                id v90 = [v87 vuObservationID];
                uint64_t v91 = [v87 personLocalIdentifier];
                *(_DWORD *)long long buf = 138413058;
                *(void *)&uint8_t buf[4] = v498;
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v89;
                *(_WORD *)&buf[22] = 2048;
                *(void *)&unsigned char buf[24] = v90;
                *(_WORD *)&unsigned char buf[32] = 2112;
                *(void *)&buf[34] = v91;
                _os_log_impl((void *)&_mh_execute_header, v88, v80, "%@ Face %@ (%lu) for tombstone person %@", buf, 0x2Au);
              }
            }
            v92 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v87 vuObservationID]);
            [osloga addObject:v92];

            ++v85;
          }
          while (v85 < (unint64_t)[v84 count]);
        }

        ++v482;
      }
      while (v482 < (unint64_t)[v479 count]);
    }
    uint64_t v93 = VCPSignPostLog();
    v94 = v93;
    if (v454 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v93))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v94, OS_SIGNPOST_INTERVAL_END, v454, "GallerySync_loadObservationIDFromPhotos", (const char *)&unk_1001F3BD3, buf, 2u);
    }

    if (v450)
    {
      mach_absolute_time();
      VCPPerformance_LogMeasurement();
    }
    os_log_type_t v95 = +[MADStateHandler sharedStateHandler];
    [v95 addBreadcrumb:@"[GallerySync] Finished resetting vuObservationIDs to all unknown vuObservationIDs from Photos DB"];

    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    *(void *)&unsigned char buf[24] = sub_10014CA6C;
    *(void *)&unsigned char buf[32] = sub_10014CA7C;
    *(void *)&buf[40] = +[NSMutableSet set];
    uint64_t v96 = mach_absolute_time();
    uint64_t v97 = VCPSignPostLog();
    os_signpost_id_t v98 = os_signpost_id_generate(v97);

    uint64_t v99 = VCPSignPostLog();
    v100 = v99;
    if (v98 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v99))
    {
      *(_WORD *)v551 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v100, OS_SIGNPOST_INTERVAL_BEGIN, v98, "GallerySync_loadUnassignedObservationIDFromGallery", (const char *)&unk_1001F3BD3, v551, 2u);
    }

    uint64_t v101 = [*(id *)(a1 + 48) gallery];
    v495 = [v101 unassignedObservations];

    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      v102 = VCPLogInstance();
      os_log_type_t v103 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v102, v103))
      {
        id v104 = [v495 count];
        *(_DWORD *)v551 = 138412546;
        CFStringRef v552 = v498;
        __int16 v553 = 2048;
        uint64_t v554 = (uint64_t)v104;
        _os_log_impl((void *)&_mh_execute_header, v102, v103, "%@ Dicovered %lu unassigned observations", v551, 0x16u);
      }
    }
    id v487 = [v495 mutableCopy];
    [v487 minusSet:v471];
    if ([v487 count])
    {
      [*(id *)(*(void *)&buf[8] + 40) unionSet:v487];
      if ((int)MediaAnalysisLogLevel() >= 5)
      {
        v105 = VCPLogInstance();
        os_log_type_t v106 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v105, v106))
        {
          id v107 = [v487 count];
          *(_DWORD *)v551 = 138412546;
          CFStringRef v552 = v498;
          __int16 v553 = 2048;
          uint64_t v554 = (uint64_t)v107;
          _os_log_impl((void *)&_mh_execute_header, v105, v106, "%@ Dicovered %lu unassigned observations also unknown to Photos", v551, 0x16u);
        }
      }
    }
    if ([v495 count]) {
      [v471 minusSet:v495];
    }
    v108 = VCPSignPostLog();
    uint64_t v109 = v108;
    if (v98 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v108))
    {
      *(_WORD *)v551 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v109, OS_SIGNPOST_INTERVAL_END, v98, "GallerySync_loadUnassignedObservationIDFromGallery", (const char *)&unk_1001F3BD3, v551, 2u);
    }

    if (v96)
    {
      mach_absolute_time();
      VCPPerformance_LogMeasurement();
    }
    uint64_t v110 = mach_absolute_time();
    v111 = VCPSignPostLog();
    os_signpost_id_t v112 = os_signpost_id_generate(v111);

    v113 = VCPSignPostLog();
    v114 = v113;
    if (v112 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v113))
    {
      *(_WORD *)v551 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v114, OS_SIGNPOST_INTERVAL_BEGIN, v112, "GallerySync_checkUnknownObservationIDs", (const char *)&unk_1001F3BD3, v551, 2u);
    }

    v540[0] = 0;
    v540[1] = v540;
    v540[2] = 0x2020000000;
    v540[3] = 0;
    [*(id *)(*(void *)&buf[8] + 40) unionSet:osloga];
    v115 = +[MADStateHandler sharedStateHandler];
    [v115 addBreadcrumb:@"[GallerySync] Checking unknown observation ids"];

    v533[0] = _NSConcreteStackBlock;
    v533[1] = 3221225472;
    v533[2] = sub_1001523F8;
    v533[3] = &unk_10021ECA8;
    v538 = v540;
    id v537 = *(id *)(a1 + 56);
    CFStringRef v442 = v498;
    v534 = (__CFString *)v442;
    v535 = v470;
    v539 = buf;
    id v459 = v471;
    id v536 = v459;
    contextb = objc_retainBlock(v533);
    v116 = *(void **)(a1 + 48);
    id v532 = 0;
    v483 = [v116 entitiesFor:0 error:&v532 body:contextb];
    id v455 = v532;
    if (!v483)
    {
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        v148 = VCPLogInstance();
        os_log_type_t v149 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v148, v149))
        {
          *(_DWORD *)v551 = 138412546;
          CFStringRef v552 = v442;
          __int16 v553 = 2112;
          uint64_t v554 = (uint64_t)v455;
          v150 = "%@ Failed to sync - %@";
          v151 = v148;
          os_log_type_t v152 = v149;
          uint32_t v153 = 22;
          goto LABEL_180;
        }
LABEL_181:
      }
LABEL_239:
      int v156 = 1;
      goto LABEL_241;
    }
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      v117 = VCPLogInstance();
      os_log_type_t v118 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v117, v118))
      {
        *(_DWORD *)v551 = 138412546;
        CFStringRef v552 = v442;
        __int16 v553 = 2112;
        uint64_t v554 = (uint64_t)v483;
        _os_log_impl((void *)&_mh_execute_header, v117, v118, "%@ Sync to gallery at ChangeBookmark - %@", v551, 0x16u);
      }
    }
    v119 = +[MADStateHandler sharedStateHandler];
    [v119 addBreadcrumb:@"[GallerySync] Finished checking unknown observation ids"];

    v120 = VCPSignPostLog();
    v121 = v120;
    if (v112 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v120))
    {
      *(_WORD *)v551 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v121, OS_SIGNPOST_INTERVAL_END, v112, "GallerySync_checkUnknownObservationIDs", (const char *)&unk_1001F3BD3, v551, 2u);
    }

    if (v110)
    {
      mach_absolute_time();
      VCPPerformance_LogMeasurement();
    }
    if ([*(id *)(*(void *)&buf[8] + 40) count])
    {
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        v122 = VCPLogInstance();
        os_log_type_t v123 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v122, v123))
        {
          id v124 = [*(id *)(*(void *)&buf[8] + 40) count];
          *(_DWORD *)v551 = 138412546;
          CFStringRef v552 = @"[GallerySync_ObservationRemove]";
          __int16 v553 = 2048;
          uint64_t v554 = (uint64_t)v124;
          _os_log_impl((void *)&_mh_execute_header, v122, v123, "%@ Removing %lu observation(s) from Gallery", v551, 0x16u);
        }
      }
      uint64_t v125 = +[MADStateHandler sharedStateHandler];
      [v125 addBreadcrumb:@"%@ Removing %lu observation(s) from Gallery", @"[GallerySync_ObservationRemove]", objc_msgSend(*(id *)(*(void *)&buf[8] + 40), "count")];

      os_signpost_id_t v434 = mach_absolute_time();
      v126 = VCPSignPostLog();
      os_signpost_id_t v451 = os_signpost_id_generate(v126);

      uint64_t v127 = VCPSignPostLog();
      v128 = v127;
      if (v451 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v127))
      {
        *(_WORD *)v551 = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v128, OS_SIGNPOST_INTERVAL_BEGIN, v451, "GallerySync_removeUnknownObservationIDsFromGallery", (const char *)&unk_1001F3BD3, v551, 2u);
      }

      uint64_t v129 = +[NSMutableArray array];
      long long v530 = 0u;
      long long v531 = 0u;
      long long v528 = 0u;
      long long v529 = 0u;
      id v130 = *(id *)(*(void *)&buf[8] + 40);
      id v131 = [v130 countByEnumeratingWithState:&v528 objects:v559 count:16];
      if (v131)
      {
        uint64_t v132 = *(void *)v529;
        os_log_type_t v133 = VCPLogToOSLogType[6];
        while (2)
        {
          for (unint64_t i = 0; i != v131; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v529 != v132) {
              objc_enumerationMutation(v130);
            }
            uint64_t v135 = *(void *)(*((void *)&v528 + 1) + 8 * i);
            uint64_t v137 = *(void *)(a1 + 56);
            if (v137 && (*(unsigned int (**)(void))(v137 + 16))())
            {
              if ((int)MediaAnalysisLogLevel() >= 6)
              {
                v138 = VCPLogInstance();
                if (os_log_type_enabled(v138, v133))
                {
                  *(_DWORD *)v551 = 138412290;
                  CFStringRef v552 = @"[GallerySync_ObservationRemove]";
                  _os_log_impl((void *)&_mh_execute_header, v138, v133, "%@ Cancelled", v551, 0xCu);
                }
              }
              int v139 = 0;
            }
            else
            {
              [v129 addObject:v135];
              if ((unint64_t)[v129 count] >= 0x3E9)
              {
                uint64_t v140 = *(void **)(a1 + 40);
                v141 = [*(id *)(a1 + 48) gallery];
                [v140 _removeObservationIDs:v129 fromGallery:v141];

                [v129 removeAllObjects];
              }
              int v139 = 1;
            }
            if (!v139)
            {

              int v147 = 0;
              goto LABEL_194;
            }
          }
          id v131 = [v130 countByEnumeratingWithState:&v528 objects:v559 count:16];
          if (v131) {
            continue;
          }
          break;
        }
      }

      if ([v129 count])
      {
        v142 = *(void **)(a1 + 40);
        v143 = [*(id *)(a1 + 48) gallery];
        [v142 _removeObservationIDs:v129 fromGallery:v143];

        [v129 removeAllObjects];
      }
      v144 = +[MADStateHandler sharedStateHandler];
      [v144 addBreadcrumb:@"%@ Finished removing %lu observation(s) from Gallery", @"[GallerySync_ObservationRemove]", objc_msgSend(*(id *)(*(void *)&buf[8] + 40), "count")];

      uint64_t v145 = VCPSignPostLog();
      v146 = v145;
      if (v451 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v145))
      {
        *(_WORD *)v551 = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v146, OS_SIGNPOST_INTERVAL_END, v451, "GallerySync_removeUnknownObservationIDsFromGallery", (const char *)&unk_1001F3BD3, v551, 2u);
      }

      if (v434)
      {
        mach_absolute_time();
        VCPPerformance_LogMeasurement();
      }
      int v147 = 1;
LABEL_194:

      if (!v147) {
        goto LABEL_239;
      }
    }
    [v459 unionSet:osloga];
    if (![v459 count]) {
      goto LABEL_234;
    }
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      long long v159 = VCPLogInstance();
      os_log_type_t v160 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v159, v160))
      {
        id v161 = [v459 count];
        *(_DWORD *)v551 = 138412546;
        CFStringRef v552 = @"[GallerySync_ObservationReset]";
        __int16 v553 = 2048;
        uint64_t v554 = (uint64_t)v161;
        _os_log_impl((void *)&_mh_execute_header, v159, v160, "%@ Resetting %lu vuObservationID(s) in Photos", v551, 0x16u);
      }
    }
    id v162 = +[MADStateHandler sharedStateHandler];
    [v162 addBreadcrumb:@"%@ Resetting %lu vuObservationID(s) in Photos", @"[GallerySync_ObservationReset]", objc_msgSend(v459, "count")];

    uint64_t v429 = mach_absolute_time();
    v163 = VCPSignPostLog();
    os_signpost_id_t v435 = os_signpost_id_generate(v163);

    v164 = VCPSignPostLog();
    v165 = v164;
    if (v435 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v164))
    {
      *(_WORD *)v551 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v165, OS_SIGNPOST_INTERVAL_BEGIN, v435, "GallerySync_resetVuObservationIDsInPhotos", (const char *)&unk_1001F3BD3, v551, 2u);
    }

    v166 = [v459 allObjects];
    unint64_t v167 = 0;
    os_log_type_t typea = VCPLogToOSLogType[6];
    os_log_type_t v168 = VCPLogToOSLogType[7];
    os_log_type_t v452 = VCPLogToOSLogType[5];
    while (1)
    {
      unint64_t v169 = v167;
      id v170 = [v166 count];
      if (v167 >= (unint64_t)v170) {
        break;
      }
      uint64_t v172 = *(void *)(a1 + 56);
      if (v172 && (*(unsigned int (**)(void))(v172 + 16))())
      {
        if ((int)MediaAnalysisLogLevel() < 6)
        {
          char v174 = 0;
          goto LABEL_225;
        }
        v173 = VCPLogInstance();
        if (os_log_type_enabled(v173, typea))
        {
          *(_DWORD *)v551 = 138412290;
          CFStringRef v552 = @"[GallerySync_ObservationReset]";
          _os_log_impl((void *)&_mh_execute_header, v173, typea, "%@ Cancelled", v551, 0xCu);
        }
        char v174 = 0;
      }
      else
      {
        v175 = (char *)[v166 count];
        if ((unint64_t)&v175[-v167] >= 0x3E8) {
          uint64_t v176 = 1000;
        }
        else {
          uint64_t v176 = (uint64_t)&v175[-v167];
        }
        if ((int)MediaAnalysisLogLevel() >= 7)
        {
          v177 = VCPLogInstance();
          if (os_log_type_enabled(v177, v168))
          {
            *(_DWORD *)v551 = 138413058;
            CFStringRef v552 = @"[GallerySync_ObservationReset]";
            __int16 v553 = 2048;
            uint64_t v554 = v176;
            __int16 v555 = 2048;
            unint64_t v556 = v169;
            __int16 v557 = 2048;
            unint64_t v558 = v176 + v169;
            _os_log_impl((void *)&_mh_execute_header, v177, v168, "%@ Reset %lu vuObservationIDsInPhotos[%lu:%lu]", v551, 0x2Au);
          }
        }
        v173 = objc_msgSend(v166, "subarrayWithRange:", v169, v176);
        v178 = +[PHFace fetchFacesWithVuObservationIDs:v173 options:v467];
        id v179 = [v178 count];
        if (v179 != [v173 count] && (int)MediaAnalysisLogLevel() >= 5)
        {
          v180 = VCPLogInstance();
          if (os_log_type_enabled(v180, v452))
          {
            id v181 = [v178 count];
            id v182 = [v173 count];
            *(_DWORD *)v551 = 138412802;
            CFStringRef v552 = @"[GallerySync_ObservationReset]";
            __int16 v553 = 2048;
            uint64_t v554 = (uint64_t)v181;
            __int16 v555 = 2048;
            unint64_t v556 = (unint64_t)v182;
            _os_log_impl((void *)&_mh_execute_header, v180, v452, "%@ Fetched %lu faces from Photos (expected %lu)", v551, 0x20u);
          }
        }
        [*(id *)(a1 + 40) _resetObservationIDForFaces:v178 fromPhotoLibrary:*(void *)(a1 + 32)];

        unint64_t v167 = v176 + v169;
        char v174 = 1;
      }

LABEL_225:
      if ((v174 & 1) == 0) {
        goto LABEL_233;
      }
    }
    v183 = +[MADStateHandler sharedStateHandler];
    [v183 addBreadcrumb:@"%@ Finished resetting %lu vuObservationID(s) in Photos", @"[GallerySync_ObservationReset]", objc_msgSend(v459, "count")];

    v184 = VCPSignPostLog();
    v185 = v184;
    if (v435 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v184))
    {
      *(_WORD *)v551 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v185, OS_SIGNPOST_INTERVAL_END, v435, "GallerySync_resetVuObservationIDsInPhotos", (const char *)&unk_1001F3BD3, v551, 2u);
    }

    if (v429)
    {
      mach_absolute_time();
      VCPPerformance_LogMeasurement();
    }
LABEL_233:

    if (v169 < (unint64_t)v170) {
      goto LABEL_239;
    }
LABEL_234:
    uint64_t v186 = *(void *)(a1 + 56);
    if (v186 && (*(unsigned int (**)(void))(v186 + 16))())
    {
      if ((int)MediaAnalysisLogLevel() >= 6)
      {
        v148 = VCPLogInstance();
        os_log_type_t v187 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v148, v187))
        {
          *(_DWORD *)v551 = 138412290;
          CFStringRef v552 = v442;
          v150 = "%@ Cancelled";
          v151 = v148;
          os_log_type_t v152 = v187;
          uint32_t v153 = 12;
LABEL_180:
          _os_log_impl((void *)&_mh_execute_header, v151, v152, v150, v551, v153);
        }
        goto LABEL_181;
      }
      goto LABEL_239;
    }
    int v156 = 0;
LABEL_241:

    _Block_object_dispose(v540, 8);
    _Block_object_dispose(buf, 8);

LABEL_242:
    if (v156) {
      goto LABEL_530;
    }
    v189 = +[NSDate now];
    [v189 timeIntervalSinceReferenceDate];
    [v464 setValue:(uint64_t)v190 forKey:@"VUDeepSyncTimestamp"];

    [v464 commit];
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      v191 = VCPLogInstance();
      os_log_type_t v192 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v191, v192))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v191, v192, "[GallerySync] Updated deep sync date", buf, 2u);
      }
    }
LABEL_248:
    typeb = objc_msgSend(*(id *)(a1 + 32), "mad_allPersonsFetchOptionsWithDetectionTypes:andVerifiedTypes:", 0, &off_1002306F8);
    if (v457)
    {
      contextc = +[PHPerson fetchPersonsWithOptions:typeb];
    }
    else
    {
      v193 = [v449 allObjects];
      contextc = +[PHPerson fetchPersonsWithLocalIdentifiers:v193 options:typeb];
    }
    if (![contextc count]) {
      goto LABEL_311;
    }
    v194 = +[MADStateHandler sharedStateHandler];
    [v194 addBreadcrumb:@"%@ Checking %lu verified persons for visible reject faces", @"[GallerySync_VerifiedPerson]", objc_msgSend(contextc, "count")];

    uint64_t v468 = mach_absolute_time();
    v195 = VCPSignPostLog();
    os_signpost_id_t v465 = os_signpost_id_generate(v195);

    v196 = VCPSignPostLog();
    v197 = v196;
    if (v465 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v196))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v197, OS_SIGNPOST_INTERVAL_BEGIN, v465, "GallerySync_loadVisibleRejectFaces", (const char *)&unk_1001F3BD3, buf, 2u);
    }

    v472 = objc_msgSend(*(id *)(a1 + 32), "mad_allFacesFetchOptions");
    [v472 setIncludeNonvisibleFaces:0];
    os_log_t oslogb = +[NSMutableDictionary dictionary];
    if (![contextc count])
    {
      uint64_t v198 = 0;
      goto LABEL_283;
    }
    uint64_t v488 = 0;
    uint64_t v198 = 0;
    os_log_type_t v496 = VCPLogToOSLogType[3];
    while (2)
    {
      uint64_t v199 = *(void *)(a1 + 56);
      if (!v199 || !(*(unsigned int (**)(void))(v199 + 16))())
      {
        v492 = [contextc objectAtIndexedSubscript:v488];
        id v200 = objc_alloc((Class)NSUUID);
        v201 = [v492 uuid];
        id v202 = [v200 initWithUUIDString:v201];

        if (v202)
        {
          v203 = +[PHFace fetchRejectedFacesForPerson:v492 options:v472];
          if ([v203 count])
          {
            unint64_t v204 = 0;
            do
            {
              v206 = [v203 objectAtIndexedSubscript:v204];
              id v207 = [v206 vuObservationID];
              if (v207)
              {
                v208 = +[NSNumber numberWithInteger:v207];
                v209 = [oslogb objectForKeyedSubscript:v208];
                BOOL v210 = v209 == 0;

                if (v210)
                {
                  v211 = +[NSMutableSet set];
                  v212 = +[NSNumber numberWithInteger:v207];
                  [oslogb setObject:v211 forKeyedSubscript:v212];
                }
                v213 = +[NSNumber numberWithInteger:v207];
                v214 = [oslogb objectForKeyedSubscript:v213];
                [v214 addObject:v202];

                ++v198;
              }
              else if ((int)MediaAnalysisLogLevel() >= 3)
              {
                v215 = VCPLogInstance();
                if (os_log_type_enabled(v215, v496))
                {
                  v216 = [v206 localIdentifier];
                  *(_DWORD *)long long buf = 138412546;
                  *(void *)&uint8_t buf[4] = @"[GallerySync_VerifiedPerson]";
                  *(_WORD *)&buf[12] = 2112;
                  *(void *)&buf[14] = v216;
                  _os_log_impl((void *)&_mh_execute_header, v215, v496, "%@ Reject face %@ does not have ObservationID; ignore",
                    buf,
                    0x16u);
                }
              }

              ++v204;
            }
            while (v204 < (unint64_t)[v203 count]);
          }
          goto LABEL_271;
        }
        if ((int)MediaAnalysisLogLevel() >= 3)
        {
          v203 = VCPLogInstance();
          if (os_log_type_enabled(v203, v496))
          {
            v217 = [v492 localIdentifier];
            *(_DWORD *)long long buf = 138412802;
            *(void *)&uint8_t buf[4] = @"[GallerySync_VerifiedPerson]";
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v217;
            *(_WORD *)&buf[22] = 2112;
            *(void *)&unsigned char buf[24] = v492;
            _os_log_impl((void *)&_mh_execute_header, v203, v496, "%@ Invalid person identification %@ for person %@; ignore",
              buf,
              0x20u);
          }
LABEL_271:
        }
        if (++v488 >= (unint64_t)[contextc count]) {
          goto LABEL_283;
        }
        continue;
      }
      break;
    }
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      v218 = VCPLogInstance();
      os_log_type_t v219 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v218, v219))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = @"[GallerySync_VerifiedPerson]";
        _os_log_impl((void *)&_mh_execute_header, v218, v219, "%@ Cancelled", buf, 0xCu);
      }
    }
LABEL_283:
    v220 = +[MADStateHandler sharedStateHandler];
    [v220 addBreadcrumb:@"%@ Finished checking %lu verified persons for visible reject faces", @"[GallerySync_VerifiedPerson]", objc_msgSend(contextc, "count")];

    v221 = VCPSignPostLog();
    v222 = v221;
    if (v465 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v221))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v222, OS_SIGNPOST_INTERVAL_END, v465, "GallerySync_loadVisibleRejectFaces", (const char *)&unk_1001F3BD3, buf, 2u);
    }

    if (v468)
    {
      mach_absolute_time();
      VCPPerformance_LogMeasurement();
    }
    if ([oslogb count])
    {
      uint64_t v224 = mach_absolute_time();
      v225 = VCPSignPostLog();
      os_signpost_id_t v226 = os_signpost_id_generate(v225);

      v227 = VCPSignPostLog();
      v228 = v227;
      if (v226 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v227))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v228, OS_SIGNPOST_INTERVAL_BEGIN, v226, "GallerySync_tagVisibleRejectFaces", (const char *)&unk_1001F3BD3, buf, 2u);
      }

      v229 = +[MADStateHandler sharedStateHandler];
      [v229 addBreadcrumb:@"%@ Tagging %lu visible reject faces", @"[GallerySync_VerifiedPerson]", -[NSObject count](oslogb, "count")];

      v522[0] = _NSConcreteStackBlock;
      v522[1] = 3221225472;
      v522[2] = sub_100152900;
      v522[3] = &unk_10021ECF8;
      v230 = oslogb;
      v523 = v230;
      id v525 = *(id *)(a1 + 56);
      v524 = @"[GallerySync_VerifiedPerson]";
      BOOL v527 = v457;
      uint64_t v526 = v198;
      v231 = objc_retainBlock(v522);
      v232 = +[MADStateHandler sharedStateHandler];
      [v232 addBreadcrumb:@"%@ Finished tagging %lu visible reject faces", @"[GallerySync_VerifiedPerson]", -[NSObject count](v230, "count")];

      v233 = [*(id *)(a1 + 48) gallery];
      id v521 = 0;
      unsigned __int8 v234 = [v233 mutateAndReturnError:&v521 handler:v231];
      id v235 = v521;

      if ((v234 & 1) == 0 && (int)MediaAnalysisLogLevel() >= 3)
      {
        v236 = VCPLogInstance();
        os_log_type_t v237 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v236, v237))
        {
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = @"[GallerySync_VerifiedPerson]";
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v235;
          _os_log_impl((void *)&_mh_execute_header, v236, v237, "%@ Failed to tag reject faces in Gallery - %@", buf, 0x16u);
        }
      }
      v238 = VCPSignPostLog();
      v239 = v238;
      if (v226 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v238))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v239, OS_SIGNPOST_INTERVAL_END, v226, "GallerySync_tagVisibleRejectFaces", (const char *)&unk_1001F3BD3, buf, 2u);
      }

      if (v224)
      {
        mach_absolute_time();
        VCPPerformance_LogMeasurement();
      }
    }
    uint64_t v240 = *(void *)(a1 + 56);
    if (v240 && (*(unsigned int (**)(void))(v240 + 16))())
    {
      if ((int)MediaAnalysisLogLevel() >= 6)
      {
        v241 = VCPLogInstance();
        os_log_type_t v242 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v241, v242))
        {
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = @"[GallerySync_VerifiedPerson]";
          _os_log_impl((void *)&_mh_execute_header, v241, v242, "%@ Cancelled", buf, 0xCu);
        }
      }
      goto LABEL_529;
    }

LABEL_311:
    uint64_t v243 = mach_absolute_time();
    v244 = VCPSignPostLog();
    os_signpost_id_t v245 = os_signpost_id_generate(v244);

    v246 = VCPSignPostLog();
    v247 = v246;
    if (v245 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v246))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v247, OS_SIGNPOST_INTERVAL_BEGIN, v245, "GallerySync_loadFacecropFaceObservationIDFromPhotos", (const char *)&unk_1001F3BD3, buf, 2u);
    }

    v443 = objc_msgSend(*(id *)(a1 + 32), "mad_allFacesFetchOptions");
    v248 = +[NSPredicate predicateWithFormat:@"vuObservationID != 0 && (trainingType = %d || trainingType = %d || trainingType = %d)", 1, 2, 5];
    [v443 setInternalPredicate:v248];

    v249 = +[MADStateHandler sharedStateHandler];
    [v249 addBreadcrumb:@"[GallerySync] Fetching face crops with fetchOptions: %@", v443];

    v489 = +[PHFace fetchFacesWithOptions:v443];
    v250 = +[MADStateHandler sharedStateHandler];
    objc_msgSend(v250, "addBreadcrumb:", @"[GallerySync] Fetched %lu face crops", objc_msgSend(v489, "count"));

    v497 = +[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", [v489 count]);
    if ([v489 count])
    {
      unint64_t v251 = 0;
      do
      {
        v253 = [v489 objectAtIndexedSubscript:v251];
        v254 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v253 vuObservationID]);
        [v497 addObject:v254];

        ++v251;
      }
      while (v251 < (unint64_t)[v489 count]);
    }
    v255 = VCPSignPostLog();
    v256 = v255;
    if (v245 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v255))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v256, OS_SIGNPOST_INTERVAL_END, v245, "GallerySync_loadFacecropFaceObservationIDFromPhotos", (const char *)&unk_1001F3BD3, buf, 2u);
    }

    if (v243)
    {
      mach_absolute_time();
      VCPPerformance_LogMeasurement();
    }
    v432 = [*(id *)(a1 + 32) librarySpecificFetchOptions];
    v469 = +[PHFaceCrop fetchFaceCropsWithOptions:v432];
    if ([v469 count])
    {
      v257 = +[MADStateHandler sharedStateHandler];
      [v257 addBreadcrumb:@"%@ Checking %lu face crops", @"[GallerySync_FaceCrop]", objc_msgSend(v469, "count")];

      uint64_t v428 = mach_absolute_time();
      v258 = VCPSignPostLog();
      os_signpost_id_t v427 = os_signpost_id_generate(v258);

      v259 = VCPSignPostLog();
      v260 = v259;
      if (v427 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v259))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v260, OS_SIGNPOST_INTERVAL_BEGIN, v427, "GallerySync_loadFaceCrops", (const char *)&unk_1001F3BD3, buf, 2u);
      }

      v436 = +[NSMutableDictionary dictionary];
      v433 = +[NSMutableDictionary dictionary];
      v431 = +[NSMutableDictionary dictionary];
      v426 = +[NSMutableDictionary dictionary];
      v441 = objc_msgSend(*(id *)(a1 + 32), "mad_allPersonsFetchOptionsWithDetectionTypes:andVerifiedTypes:", 0, &off_100230710);
      if ([v469 count])
      {
        unint64_t v473 = 0;
        os_log_type_t v453 = VCPLogToOSLogType[3];
        os_log_type_t v493 = VCPLogToOSLogType[7];
        os_log_type_t v423 = VCPLogToOSLogType[6];
        do
        {
          uint64_t v261 = *(void *)(a1 + 56);
          if (v261 && (*(unsigned int (**)(void))(v261 + 16))())
          {
            if ((int)MediaAnalysisLogLevel() >= 6)
            {
              v355 = VCPLogInstance();
              if (os_log_type_enabled(v355, v423))
              {
                *(_DWORD *)long long buf = 138412290;
                *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                _os_log_impl((void *)&_mh_execute_header, v355, v423, "%@ Cancelled", buf, 0xCu);
              }
            }
            break;
          }
          v485 = [v469 objectAtIndexedSubscript:v473];
          v262 = +[PHFace fetchFacesForFaceCrop:v485 options:v470];
          v263 = [v262 firstObject];
          v264 = v263;
          if (v263)
          {
            if ([v263 vuObservationID])
            {
              v265 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v264 vuObservationID]);
              [v497 removeObject:v265];
            }
            if ((unint64_t)[v262 count] >= 2)
            {
              if ((int)MediaAnalysisLogLevel() >= 3)
              {
                v266 = VCPLogInstance();
                if (os_log_type_enabled(v266, v453))
                {
                  v267 = [v485 localIdentifier];
                  *(_DWORD *)long long buf = 138412546;
                  *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                  *(_WORD *)&buf[12] = 2112;
                  *(void *)&buf[14] = v267;
                  _os_log_impl((void *)&_mh_execute_header, v266, v453, "%@ Fetched multiple faces for faceCrop %@; prefer the first one with vuObservationID",
                    buf,
                    0x16u);
                }
              }
              if ([v262 count])
              {
                unint64_t v268 = 0;
                do
                {
                  v270 = [v262 objectAtIndexedSubscript:v268];
                  if (![v264 vuObservationID] && objc_msgSend(v270, "vuObservationID"))
                  {
                    id v271 = v270;

                    v264 = v271;
                  }
                  v272 = [v264 localIdentifier];
                  v273 = [v270 localIdentifier];
                  unsigned int v274 = [v272 isEqualToString:v273];

                  if ((int)MediaAnalysisLogLevel() >= 7)
                  {
                    v275 = VCPLogInstance();
                    if (os_log_type_enabled(v275, v493))
                    {
                      v276 = [v270 localIdentifier];
                      id v277 = [v270 vuObservationID];
                      unsigned int v278 = [v270 trainingType];
                      *(_DWORD *)long long buf = 138413314;
                      CFStringRef v279 = @"ignored";
                      if (v274) {
                        CFStringRef v279 = @"preferred";
                      }
                      *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                      *(_WORD *)&buf[12] = 2112;
                      *(void *)&buf[14] = v276;
                      *(_WORD *)&buf[22] = 2048;
                      *(void *)&unsigned char buf[24] = v277;
                      *(_WORD *)&unsigned char buf[32] = 1024;
                      *(_DWORD *)&buf[34] = v278;
                      *(_WORD *)&buf[38] = 2112;
                      *(void *)&buf[40] = v279;
                      _os_log_impl((void *)&_mh_execute_header, v275, v493, "%@ --> multiple face %@ (%ld)(trainingType:%d) - %@", buf, 0x30u);
                    }
                  }
                  if ([v270 vuObservationID])
                  {
                    v280 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v270 vuObservationID]);
                    [v497 removeObject:v280];
                  }
                  ++v268;
                }
                while (v268 < (unint64_t)[v262 count]);
              }
            }
            id v461 = [v264 vuObservationID];
            if (v461)
            {
              os_log_t oslogc = +[PHPerson fetchPersonForFaceCrop:v485 options:v441];
              if ([oslogc count])
              {
                v480 = [oslogc firstObject];
                if ((unint64_t)[oslogc count] >= 2)
                {
                  if ((int)MediaAnalysisLogLevel() >= 3)
                  {
                    v281 = VCPLogInstance();
                    if (os_log_type_enabled(v281, v453))
                    {
                      v282 = [v485 localIdentifier];
                      *(_DWORD *)long long buf = 138412546;
                      *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                      *(_WORD *)&buf[12] = 2112;
                      *(void *)&buf[14] = v282;
                      _os_log_impl((void *)&_mh_execute_header, v281, v453, "%@ Fetched multiple people for faceCrop %@; prefer the first one",
                        buf,
                        0x16u);
                    }
                  }
                  if ([oslogc count])
                  {
                    unint64_t v283 = 0;
                    do
                    {
                      v285 = [v480 localIdentifier];
                      v286 = [oslogc objectAtIndexedSubscript:v283];
                      v287 = [v286 localIdentifier];
                      unsigned int v288 = [v285 isEqualToString:v287];

                      if ((int)MediaAnalysisLogLevel() >= 7)
                      {
                        v289 = VCPLogInstance();
                        if (os_log_type_enabled(v289, v493))
                        {
                          v290 = [oslogc objectAtIndexedSubscript:v283];
                          v291 = [v290 localIdentifier];
                          v292 = [oslogc objectAtIndexedSubscript:v283];
                          uint64_t v293 = [v292 mdID];
                          v294 = (void *)v293;
                          *(_DWORD *)long long buf = 138413058;
                          CFStringRef v295 = @"ignored";
                          if (v288) {
                            CFStringRef v295 = @"preferred";
                          }
                          *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                          *(_WORD *)&buf[12] = 2112;
                          *(void *)&buf[14] = v291;
                          *(_WORD *)&buf[22] = 2112;
                          *(void *)&unsigned char buf[24] = v293;
                          *(_WORD *)&unsigned char buf[32] = 2112;
                          *(void *)&buf[34] = v295;
                          _os_log_impl((void *)&_mh_execute_header, v289, v493, "%@ --> person %@ (%@) - %@", buf, 0x2Au);
                        }
                      }
                      ++v283;
                    }
                    while (v283 < (unint64_t)[oslogc count]);
                  }
                }
                if (v457
                  || ([v480 localIdentifier],
                      v296 = objc_claimAutoreleasedReturnValue(),
                      unsigned __int8 v297 = [v449 containsObject:v296],
                      v296,
                      (v297 & 1) != 0))
                {
                  if ([v480 type] == (id)-1 && objc_msgSend(v480, "verifiedType") == (id)2)
                  {
                    if ((int)MediaAnalysisLogLevel() >= 6)
                    {
                      v298 = VCPLogInstance();
                      if (os_log_type_enabled(v298, v423))
                      {
                        v299 = [v480 localIdentifier];
                        v300 = [v480 mdID];
                        v301 = [v485 localIdentifier];
                        v302 = [v264 localIdentifier];
                        *(_DWORD *)long long buf = 138413570;
                        *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                        *(_WORD *)&buf[12] = 2112;
                        *(void *)&buf[14] = v299;
                        *(_WORD *)&buf[22] = 2112;
                        *(void *)&unsigned char buf[24] = v300;
                        *(_WORD *)&unsigned char buf[32] = 2112;
                        *(void *)&buf[34] = v301;
                        *(_WORD *)&buf[42] = 2112;
                        *(void *)&buf[44] = v302;
                        __int16 v545 = 2048;
                        id v546 = v461;
                        _os_log_impl((void *)&_mh_execute_header, v298, v423, "%@ Hidden Graph-Verified person %@-%@ facecrop %@ face %@-%ld", buf, 0x3Eu);
                      }
                    }
                    v303 = +[NSNumber numberWithInteger:v461];
                    [v426 setObject:v264 forKeyedSubscript:v303];
                  }
                  unsigned int v304 = [v264 trainingType];
                  unsigned int v305 = v304;
                  switch(v304)
                  {
                    case 5u:
LABEL_380:
                      v306 = [v480 localIdentifier];
                      v307 = [v264 personLocalIdentifier];
                      unsigned __int8 v308 = [v306 isEqualToString:v307];

                      if ((v308 & 1) == 0 && (int)MediaAnalysisLogLevel() >= 3)
                      {
                        v309 = VCPLogInstance();
                        if (os_log_type_enabled(v309, v453))
                        {
                          v310 = [v485 localIdentifier];
                          v311 = [v480 localIdentifier];
                          v312 = [v480 mdID];
                          v313 = [v264 localIdentifier];
                          v314 = [v264 personLocalIdentifier];
                          v315 = [v480 localIdentifier];
                          *(_DWORD *)long long buf = 138414082;
                          *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                          *(_WORD *)&buf[12] = 2112;
                          *(void *)&buf[14] = v310;
                          *(_WORD *)&buf[22] = 2112;
                          *(void *)&unsigned char buf[24] = v311;
                          *(_WORD *)&unsigned char buf[32] = 2112;
                          *(void *)&buf[34] = v312;
                          *(_WORD *)&buf[42] = 2112;
                          *(void *)&buf[44] = v313;
                          __int16 v545 = 2048;
                          id v546 = v461;
                          __int16 v547 = 2112;
                          v548 = v314;
                          __int16 v549 = 2112;
                          v550 = v315;
                          _os_log_impl((void *)&_mh_execute_header, v309, v453, "%@ Mismatch confirmed faceCrop(%@).person (%@-%@) vs. faceCropFace(%@-%ld).person (%@); tag "
                            "with faceCrop.person %@",
                            buf,
                            0x52u);
                        }
                      }
                      v316 = [v480 localIdentifier];
                      v456 = +[PHObject uuidFromLocalIdentifier:v316];

                      id v317 = [objc_alloc((Class)NSUUID) initWithUUIDString:v456];
                      if (v317)
                      {
                        v318 = +[NSNumber numberWithInteger:v461];
                        if (v305 == 1) {
                          v319 = v436;
                        }
                        else {
                          v319 = v433;
                        }
                        [v319 setObject:v317 forKeyedSubscript:v318];

                        goto LABEL_438;
                      }
                      if ((int)MediaAnalysisLogLevel() < 3) {
                        goto LABEL_438;
                      }
                      v349 = VCPLogInstance();
                      if (os_log_type_enabled(v349, v453))
                      {
                        v350 = [v480 localIdentifier];
                        v351 = [v264 localIdentifier];
                        *(_DWORD *)long long buf = 138412802;
                        *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                        *(_WORD *)&buf[12] = 2112;
                        *(void *)&buf[14] = v350;
                        *(_WORD *)&buf[22] = 2112;
                        *(void *)&unsigned char buf[24] = v351;
                        _os_log_impl((void *)&_mh_execute_header, v349, v453, "%@ Invalid UUID for confirmed person %@ for training face %@", buf, 0x20u);
                      }
                      break;
                    case 2u:
                      v456 = +[PHPerson fetchRejectedPersonsForFace:v264 options:v441];
                      v424 = [v456 firstObject];
                      if (v424)
                      {
                        if ((unint64_t)[v456 count] >= 2)
                        {
                          if ((int)MediaAnalysisLogLevel() >= 3)
                          {
                            v325 = VCPLogInstance();
                            if (os_log_type_enabled(v325, v453))
                            {
                              v326 = [v264 localIdentifier];
                              *(_DWORD *)long long buf = 138412802;
                              *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                              *(_WORD *)&buf[12] = 2112;
                              *(void *)&buf[14] = v326;
                              *(_WORD *)&buf[22] = 2048;
                              *(void *)&unsigned char buf[24] = v461;
                              _os_log_impl((void *)&_mh_execute_header, v325, v453, "%@ Found multiple rejected people for training face %@-%lu; tag with faceCrop.rejectPerson",
                                buf,
                                0x20u);
                            }
                          }
                          if ([v456 count])
                          {
                            unint64_t v327 = 0;
                            do
                            {
                              if ((int)MediaAnalysisLogLevel() >= 7)
                              {
                                v329 = VCPLogInstance();
                                if (os_log_type_enabled(v329, v493))
                                {
                                  v330 = [v456 objectAtIndexedSubscript:v327];
                                  v331 = [v330 localIdentifier];
                                  v332 = [v456 objectAtIndexedSubscript:v327];
                                  v333 = [v332 mdID];
                                  *(_DWORD *)long long buf = 138412802;
                                  *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                                  *(_WORD *)&buf[12] = 2112;
                                  *(void *)&buf[14] = v331;
                                  *(_WORD *)&buf[22] = 2112;
                                  *(void *)&unsigned char buf[24] = v333;
                                  _os_log_impl((void *)&_mh_execute_header, v329, v493, "%@ --> reject person %@ (%@)", buf, 0x20u);
                                }
                              }
                              ++v327;
                            }
                            while (v327 < (unint64_t)[v456 count]);
                          }
                        }
                        v334 = [v480 localIdentifier];
                        v335 = [v424 localIdentifier];
                        unsigned __int8 v336 = [v334 isEqualToString:v335];

                        if ((v336 & 1) == 0 && (int)MediaAnalysisLogLevel() >= 3)
                        {
                          v337 = VCPLogInstance();
                          if (os_log_type_enabled(v337, v453))
                          {
                            v338 = [v485 localIdentifier];
                            v339 = [v480 localIdentifier];
                            v340 = [v480 mdID];
                            v341 = [v264 localIdentifier];
                            v342 = [v424 localIdentifier];
                            v343 = [v424 mdID];
                            *(_DWORD *)long long buf = 138414082;
                            *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                            *(_WORD *)&buf[12] = 2112;
                            *(void *)&buf[14] = v338;
                            *(_WORD *)&buf[22] = 2112;
                            *(void *)&unsigned char buf[24] = v339;
                            *(_WORD *)&unsigned char buf[32] = 2112;
                            *(void *)&buf[34] = v340;
                            *(_WORD *)&buf[42] = 2112;
                            *(void *)&buf[44] = v341;
                            __int16 v545 = 2048;
                            id v546 = v461;
                            __int16 v547 = 2112;
                            v548 = v342;
                            __int16 v549 = 2112;
                            v550 = v343;
                            _os_log_impl((void *)&_mh_execute_header, v337, v453, "%@ Mismatch rejected faceCrop(%@).rejectPerson (%@-%@) vs. faceCropFace(%@-%ld).rejectPerson (%@-%@); correct with faceCrop.rejectPerson",
                              buf,
                              0x52u);
                          }
                        }
                        v344 = [v480 localIdentifier];
                        v345 = +[PHObject uuidFromLocalIdentifier:v344];

                        id v346 = [objc_alloc((Class)NSUUID) initWithUUIDString:v345];
                        if (v346)
                        {
                          v347 = +[NSNumber numberWithInteger:v461];
                          [v431 setObject:v346 forKeyedSubscript:v347];
                          goto LABEL_425;
                        }
                        if ((int)MediaAnalysisLogLevel() >= 3)
                        {
                          v347 = VCPLogInstance();
                          if (os_log_type_enabled(v347, v453))
                          {
                            v353 = [v480 localIdentifier];
                            v354 = [v264 localIdentifier];
                            *(_DWORD *)long long buf = 138413058;
                            *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                            *(_WORD *)&buf[12] = 2112;
                            *(void *)&buf[14] = v353;
                            *(_WORD *)&buf[22] = 2112;
                            *(void *)&unsigned char buf[24] = v354;
                            *(_WORD *)&unsigned char buf[32] = 2048;
                            *(void *)&buf[34] = v461;
                            _os_log_impl((void *)&_mh_execute_header, v347, v453, "%@ Invalid UUID for rejected person %@ for training face %@-%ld", buf, 0x2Au);
                          }
LABEL_425:
                        }
                        goto LABEL_439;
                      }
                      if ((int)MediaAnalysisLogLevel() < 3) {
                        goto LABEL_438;
                      }
                      v349 = VCPLogInstance();
                      if (os_log_type_enabled(v349, v453))
                      {
                        v352 = [v264 localIdentifier];
                        *(_DWORD *)long long buf = 138412802;
                        *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                        *(_WORD *)&buf[12] = 2112;
                        *(void *)&buf[14] = v352;
                        *(_WORD *)&buf[22] = 2048;
                        *(void *)&unsigned char buf[24] = v461;
                        _os_log_impl((void *)&_mh_execute_header, v349, v453, "%@ Failed to find rejected person for training face %@-%lu", buf, 0x20u);
                      }
                      break;
                    case 1u:
                      goto LABEL_380;
                    default:
                      if ((int)MediaAnalysisLogLevel() >= 6)
                      {
                        v456 = VCPLogInstance();
                        if (os_log_type_enabled(v456, v423))
                        {
                          v348 = [v264 localIdentifier];
                          *(_DWORD *)long long buf = 138413058;
                          *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = v305;
                          *(_WORD *)&buf[18] = 2112;
                          *(void *)&buf[20] = v348;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = v461;
                          _os_log_impl((void *)&_mh_execute_header, v456, v423, "%@ Ignored face training type %d for training face %@ (ObservationID %ld)", buf, 0x26u);
                        }
                        goto LABEL_438;
                      }
                      goto LABEL_439;
                  }

                  goto LABEL_438;
                }
                if ((int)MediaAnalysisLogLevel() >= 7)
                {
                  v456 = VCPLogInstance();
                  if (os_log_type_enabled(v456, v493))
                  {
                    v324 = [v485 localIdentifier];
                    *(_DWORD *)long long buf = 138412546;
                    *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                    *(_WORD *)&buf[12] = 2112;
                    *(void *)&buf[14] = v324;
                    _os_log_impl((void *)&_mh_execute_header, v456, v493, "%@ Ignoring unchanged person %@ during incremental sync", buf, 0x16u);
                  }
LABEL_438:
                }
LABEL_439:
              }
              else if ((int)MediaAnalysisLogLevel() >= 3)
              {
                v322 = VCPLogInstance();
                if (os_log_type_enabled(v322, v453))
                {
                  v323 = [v485 localIdentifier];
                  *(_DWORD *)long long buf = 138412546;
                  *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                  *(_WORD *)&buf[12] = 2112;
                  *(void *)&buf[14] = v323;
                  _os_log_impl((void *)&_mh_execute_header, v322, v453, "%@ Failed to find person for PHFaceCrop %@; ignore",
                    buf,
                    0x16u);
                }
              }
LABEL_440:

              goto LABEL_441;
            }
            if ((int)MediaAnalysisLogLevel() >= 3)
            {
              VCPLogInstance();
              os_log_t oslogc = (os_log_t)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(oslogc, v453))
              {
                v321 = [v264 localIdentifier];
                *(_DWORD *)long long buf = 138412546;
                *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v321;
                _os_log_impl((void *)&_mh_execute_header, oslogc, v453, "%@ FaceCrop face %@ does not have valid ObservationID; ignore",
                  buf,
                  0x16u);
              }
              goto LABEL_440;
            }
          }
          else
          {
            if ((int)MediaAnalysisLogLevel() >= 3)
            {
              VCPLogInstance();
              os_log_t oslogc = (os_log_t)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(oslogc, v453))
              {
                v320 = [v485 localIdentifier];
                *(_DWORD *)long long buf = 138412546;
                *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v320;
                _os_log_impl((void *)&_mh_execute_header, oslogc, v453, "%@ Failed to fetch face for faceCrop %@; ignore",
                  buf,
                  0x16u);
              }
              v264 = 0;
              goto LABEL_440;
            }
            v264 = 0;
          }
LABEL_441:

          ++v473;
        }
        while (v473 < (unint64_t)[v469 count]);
      }
      v356 = (char *)[v436 count];
      id v357 = [v433 count];
      unint64_t v358 = (unint64_t)[v431 count];
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        v359 = VCPLogInstance();
        os_log_type_t v360 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v359, v360))
        {
          id v361 = [v436 count];
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v361;
          _os_log_impl((void *)&_mh_execute_header, v359, v360, "%@ %lu user verified person tags", buf, 0x16u);
        }
      }
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        v362 = VCPLogInstance();
        os_log_type_t v363 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v362, v363))
        {
          id v364 = [v433 count];
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v364;
          _os_log_impl((void *)&_mh_execute_header, v362, v363, "%@ %lu graph verified person tags", buf, 0x16u);
        }
      }
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        v365 = VCPLogInstance();
        os_log_type_t v366 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v365, v366))
        {
          id v367 = [v431 count];
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v367;
          _os_log_impl((void *)&_mh_execute_header, v365, v366, "%@ %lu rejected person tags", buf, 0x16u);
        }
      }
      v368 = +[MADStateHandler sharedStateHandler];
      [v368 addBreadcrumb:@"%@ Found %lu user verified tags, %lu graph verified tags, %lu rejected tags", @"[GallerySync_FaceCrop]", objc_msgSend(v436, "count"), objc_msgSend(v433, "count"), objc_msgSend(v431, "count")];

      v369 = VCPSignPostLog();
      v370 = v369;
      if (v427 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v369))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v370, OS_SIGNPOST_INTERVAL_END, v427, "GallerySync_loadFaceCrops", (const char *)&unk_1001F3BD3, buf, 2u);
      }

      if (v428)
      {
        mach_absolute_time();
        VCPPerformance_LogMeasurement();
      }
      os_log_t oslogd = (os_log_t)mach_absolute_time();
      v371 = VCPSignPostLog();
      os_signpost_id_t v372 = os_signpost_id_generate(v371);

      v373 = VCPSignPostLog();
      v374 = v373;
      if (v372 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v373))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v374, OS_SIGNPOST_INTERVAL_BEGIN, v372, "GallerySync_tagFaceCrops", (const char *)&unk_1001F3BD3, buf, 2u);
      }

      v375 = +[MADStateHandler sharedStateHandler];
      v376 = &v356[(void)v357 + v358];
      [v375 addBreadcrumb:@"%@ Tagging %lu face crops", @"[GallerySync_FaceCrop]", v376];

      v510[0] = _NSConcreteStackBlock;
      v510[1] = 3221225472;
      v510[2] = sub_100152E48;
      v510[3] = &unk_10021EDC0;
      id v377 = v426;
      id v511 = v377;
      id v519 = *(id *)(a1 + 56);
      v512 = @"[GallerySync_FaceCrop]";
      id v513 = *(id *)(a1 + 32);
      id v378 = v436;
      id v514 = v378;
      id v379 = v433;
      id v515 = v379;
      id v380 = v431;
      id v516 = v380;
      id v517 = v469;
      v520 = v376;
      id v518 = v497;
      v381 = objc_retainBlock(v510);
      v382 = +[MADStateHandler sharedStateHandler];
      [v382 addBreadcrumb:@"%@ Finished tagging %lu face crops", @"[GallerySync_FaceCrop]", v376];

      v383 = [*(id *)(a1 + 48) gallery];
      id v509 = 0;
      unsigned __int8 v384 = [v383 mutateAndReturnError:&v509 handler:v381];
      id v385 = v509;

      if ((v384 & 1) == 0 && (int)MediaAnalysisLogLevel() >= 3)
      {
        v386 = VCPLogInstance();
        os_log_type_t v387 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v386, v387))
        {
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v385;
          _os_log_impl((void *)&_mh_execute_header, v386, v387, "%@ Failed to tag training faces in Gallery - %@", buf, 0x16u);
        }
      }
      v388 = VCPSignPostLog();
      v389 = v388;
      if (v372 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v388))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v389, OS_SIGNPOST_INTERVAL_END, v372, "GallerySync_tagFaceCrops", (const char *)&unk_1001F3BD3, buf, 2u);
      }

      if (oslogd)
      {
        mach_absolute_time();
        VCPPerformance_LogMeasurement();
      }
    }
    if (v457)
    {
      if (v446)
      {
        [v464 setChangeToken:v446 forTaskID:3 andChangeTokenType:3];
        [v464 commit];
        if ((int)MediaAnalysisLogLevel() < 6) {
          goto LABEL_499;
        }
        v390 = VCPLogInstance();
        os_log_type_t v391 = VCPLogToOSLogType[6];
        if (!os_log_type_enabled(v390, v391)) {
          goto LABEL_498;
        }
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v498;
        v392 = "%@ Set PHPersistentChangeToken for Gallery sync";
      }
      else
      {
        if ((int)MediaAnalysisLogLevel() < 5) {
          goto LABEL_499;
        }
        v390 = VCPLogInstance();
        os_log_type_t v391 = VCPLogToOSLogType[5];
        if (!os_log_type_enabled(v390, v391)) {
          goto LABEL_498;
        }
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v498;
        v392 = "%@ Full-scan returned without change token; skip setting";
      }
    }
    else if (v445)
    {
      [v464 updateChangeToken:v445 forTaskID:3 andChangeTokenType:3];
      [v464 commit];
      if ((int)MediaAnalysisLogLevel() < 6) {
        goto LABEL_499;
      }
      v390 = VCPLogInstance();
      os_log_type_t v391 = VCPLogToOSLogType[6];
      if (!os_log_type_enabled(v390, v391)) {
        goto LABEL_498;
      }
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v498;
      v392 = "%@ Updated PHPersistentChangeToken for Gallery sync";
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() < 5) {
        goto LABEL_499;
      }
      v390 = VCPLogInstance();
      os_log_type_t v391 = VCPLogToOSLogType[5];
      if (!os_log_type_enabled(v390, v391))
      {
LABEL_498:

LABEL_499:
        *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
        *(unsigned char *)(*(void *)(a1 + 40) + 16) = 1;
        id v393 = [v464 valueForKey:@"MADPersonProcessingStatus"];
        v394 = [*(id *)(a1 + 48) gallery];
        unsigned __int8 v395 = [v394 ready];
        if (v393) {
          char v396 = 1;
        }
        else {
          char v396 = v395;
        }

        if (v396)
        {
          if ((int)MediaAnalysisLogLevel() < 7)
          {
LABEL_523:
            [v458 stop];
            v419 = VCPSignPostLog();
            v420 = v419;
            if (spid - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v419))
            {
              *(_WORD *)long long buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v420, OS_SIGNPOST_INTERVAL_END, spid, "GallerySync_EndToEnd", (const char *)&unk_1001F3BD3, buf, 2u);
            }

            if (v440)
            {
              mach_absolute_time();
              VCPPerformance_LogMeasurement();
            }
            v421 = +[VCPMADCoreAnalyticsManager sharedManager];
            [v421 accumulateInt64Value:1 forField:@"NumberOfFaceVUSyncEvents" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];

            v422 = +[VCPMADCoreAnalyticsManager sharedManager];
            [v458 elapsedTimeSeconds];
            objc_msgSend(v422, "accumulateDoubleValue:forField:andEvent:", @"TotalAnalyzingTimeInSeconds", @"com.apple.mediaanalysisd.FaceAnalysisRunSession");

LABEL_529:
            goto LABEL_530;
          }
          v397 = VCPLogInstance();
          os_log_type_t v398 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v397, v398))
          {
            MADPersonProcessingStatusDescription((uint64_t)v393);
            id v399 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v498;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v399;
            _os_log_impl((void *)&_mh_execute_header, v397, v398, "%@ Gallery is ready (Person processing state: %@); skip updating",
              buf,
              0x16u);
          }
LABEL_522:

          goto LABEL_523;
        }
        v400 = VCPSignPostLog();
        os_signpost_id_t v401 = os_signpost_id_generate(v400);

        v402 = VCPSignPostLog();
        v403 = v402;
        if (v401 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v402))
        {
          *(_WORD *)long long buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v403, OS_SIGNPOST_INTERVAL_BEGIN, v401, "GallerySync_Update", (const char *)&unk_1001F3BD3, buf, 2u);
        }

        v404 = +[MADStateHandler sharedStateHandler];
        [v404 addBreadcrumb:@"%@ Updating VU Gallery", v498];

        v405 = [*(id *)(a1 + 48) gallery];
        id v508 = 0;
        v505[0] = _NSConcreteStackBlock;
        v505[1] = 3221225472;
        v505[2] = sub_100154588;
        v505[3] = &unk_10021EDE8;
        v406 = v498;
        v506 = v406;
        id v507 = *(id *)(a1 + 56);
        unsigned int v407 = [v405 updateAndReturnError:&v508 progressHandler:v505];
        v397 = v508;

        v408 = +[MADStateHandler sharedStateHandler];
        [v408 addBreadcrumb:@"%@ Finished updating VU Gallery", v406];

        int v409 = MediaAnalysisLogLevel();
        if (v407)
        {
          if (v409 < 7) {
            goto LABEL_518;
          }
          v410 = VCPLogInstance();
          os_log_type_t v411 = VCPLogToOSLogType[7];
          if (!os_log_type_enabled(v410, v411)) {
            goto LABEL_517;
          }
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v406;
          v412 = "%@ Gallery updated!";
          v413 = v410;
          os_log_type_t v414 = v411;
          uint32_t v415 = 12;
        }
        else
        {
          if (v409 < 3) {
            goto LABEL_518;
          }
          v410 = VCPLogInstance();
          os_log_type_t v416 = VCPLogToOSLogType[3];
          if (!os_log_type_enabled(v410, v416))
          {
LABEL_517:

LABEL_518:
            v417 = VCPSignPostLog();
            v418 = v417;
            if (v401 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v417))
            {
              *(_WORD *)long long buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v418, OS_SIGNPOST_INTERVAL_END, v401, "GallerySync_Update", (const char *)&unk_1001F3BD3, buf, 2u);
            }

            goto LABEL_522;
          }
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v406;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v397;
          v412 = "%@ Failed to update gallery - %@";
          v413 = v410;
          os_log_type_t v414 = v416;
          uint32_t v415 = 22;
        }
        _os_log_impl((void *)&_mh_execute_header, v413, v414, v412, buf, v415);
        goto LABEL_517;
      }
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v498;
      v392 = "%@ Incremental-scan returned without change token; skip updating";
    }
    _os_log_impl((void *)&_mh_execute_header, v390, v391, v392, buf, 0xCu);
    goto LABEL_498;
  }
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v3 = VCPLogInstance();
    os_log_type_t v4 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v3, v4))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v498;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%@ Current session already synced; skip re-syncing", buf, 0xCu);
    }

    uint64_t v2 = a1;
  }
  *(unsigned char *)(*(void *)(*(void *)(v2 + 64) + 8) + 24) = 1;
LABEL_535:
}

void sub_100152308(_Unwind_Exception *a1)
{
}

uint64_t sub_1001523F8(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v43 = a3;
  id v42 = a4;
  id v10 = a5;
  ++*(void *)(*(void *)(a1[8] + 8) + 24);
  os_log_type_t v11 = [v9 stringValue];
  long long v45 = +[NSString stringWithFormat:@"[GallerySync][%@][%lu]", v11, *(void *)(*(void *)(a1[8] + 8) + 24)];

  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    double v12 = VCPLogInstance();
    os_log_type_t v13 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v12, v13))
    {
      *(_DWORD *)long long buf = 138412546;
      uint64_t v51 = v45;
      __int16 v52 = 2048;
      id v53 = [v10 count];
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%@ Checking Photos with %lu face observations ... ", buf, 0x16u);
    }
  }
  id v44 = v9;
  if ([v10 count])
  {
    unint64_t v14 = 0;
    os_log_type_t type = VCPLogToOSLogType[7];
    os_log_type_t v15 = (void **)&ADClientSetValueForScalarKey_ptr;
    long long v46 = v10;
    while (1)
    {
      uint64_t v17 = a1[7];
      if (v17)
      {
        if ((*(unsigned int (**)(void))(v17 + 16))()) {
          break;
        }
      }
      id v18 = (char *)[v10 count];
      if ((unint64_t)&v18[-v14] >= 0x3E8) {
        uint64_t v19 = 1000;
      }
      else {
        uint64_t v19 = (uint64_t)&v18[-v14];
      }
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        id v20 = VCPLogInstance();
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)long long buf = 138413058;
          uint64_t v51 = v45;
          __int16 v52 = 2048;
          id v53 = (id)v19;
          __int16 v54 = 2048;
          unint64_t v55 = v14;
          __int16 v56 = 2048;
          unint64_t v57 = v19 + v14;
          _os_log_impl((void *)&_mh_execute_header, v20, type, "%@ Checking Photos with %lu faceObservationIDs[%lu:%lu]", buf, 0x2Au);
        }
      }
      uint64_t v48 = v19;
      uint64_t v21 = objc_msgSend(v10, "subarrayWithRange:", v14, v19);
      os_log_type_t v22 = +[PHFace fetchFacesWithVuObservationIDs:v21 options:a1[5]];
      id v23 = [v22 count];
      if (v23 != [v21 count] && (int)MediaAnalysisLogLevel() >= 7)
      {
        int v24 = VCPLogInstance();
        if (os_log_type_enabled(v24, type))
        {
          id v25 = [v22 count];
          id v26 = [v21 count];
          *(_DWORD *)long long buf = 138412802;
          uint64_t v51 = v45;
          __int16 v52 = 2048;
          id v53 = v25;
          __int16 v54 = 2048;
          unint64_t v55 = (unint64_t)v26;
          _os_log_impl((void *)&_mh_execute_header, v24, type, "%@ Found %lu out of %lu faces from Photos", buf, 0x20u);
        }
      }
      context = v16;
      BOOL v27 = a1;
      uint64_t v28 = v15;
      uint64_t v29 = [v15[402] set];
      if ([v22 count])
      {
        unint64_t v30 = 0;
        do
        {
          uint64_t v31 = [v22 objectAtIndexedSubscript:v30];
          os_log_type_t v32 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v31 vuObservationID]);
          [v29 addObject:v32];

          ++v30;
        }
        while (v30 < (unint64_t)[v22 count]);
      }
      os_log_type_t v15 = v28;
      __int16 v33 = [v28[402] setWithArray:v21];
      [v33 minusSet:v29];
      a1 = v27;
      [*(id *)(*(void *)(v27[9] + 8) + 40) unionSet:v33];
      [(id)v27[6] minusSet:v29];
      v14 += v48;

      id v10 = v46;
      if (v14 >= (unint64_t)[v46 count]) {
        goto LABEL_25;
      }
    }
    __int16 v37 = v43;
    uint64_t v36 = v44;
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      id v38 = VCPLogInstance();
      os_log_type_t v39 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (void *)a1[4];
        *(_DWORD *)long long buf = 138412290;
        uint64_t v51 = v40;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "%@ Cancelled", buf, 0xCu);
      }
    }
    uint64_t v35 = 0;
  }
  else
  {
LABEL_25:
    uint64_t v34 = a1[7];
    if (v34) {
      uint64_t v35 = (*(unsigned int (**)(void))(v34 + 16))() ^ 1;
    }
    else {
      uint64_t v35 = 1;
    }
    __int16 v37 = v43;
    uint64_t v36 = v44;
  }

  return v35;
}

uint64_t sub_100152900(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2020000000;
  uint64_t v21 = 0;
  os_log_type_t v4 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100152ADC;
  v12[3] = &unk_10021ECD0;
  id v15 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 40);
  char v17 = *(unsigned char *)(a1 + 64);
  id v5 = v3;
  id v14 = v5;
  CFStringRef v16 = &v18;
  [v4 enumerateKeysAndObjectsUsingBlock:v12];
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v6 = VCPLogInstance();
    os_log_type_t v7 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = v19[3];
      uint64_t v10 = *(void *)(a1 + 56);
      *(_DWORD *)long long buf = 138412802;
      uint64_t v23 = v8;
      __int16 v24 = 2048;
      uint64_t v25 = v9;
      __int16 v26 = 2048;
      uint64_t v27 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%@ Tagged %lu (out of %lu) reject observation(s) in Gallery", buf, 0x20u);
    }
  }
  _Block_object_dispose(&v18, 8);

  return 0;
}

void sub_100152AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100152ADC(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10 && (*(unsigned int (**)(void))(v10 + 16))())
  {
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      os_log_type_t v11 = VCPLogInstance();
      os_log_type_t v12 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v41 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "%@ Cancelled", buf, 0xCu);
      }
    }
    *a4 = 1;
  }
  else
  {
    if (*(unsigned char *)(a1 + 64))
    {
      id v14 = *(void **)(a1 + 40);
      id v39 = 0;
      objc_msgSend(v14, "untag:error:", objc_msgSend(v7, "integerValue"), &v39);
      id v15 = v39;
    }
    else
    {
      id v15 = 0;
    }
    unint64_t v30 = v9;
    id v31 = v8;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v16 = v8;
    id v17 = [v16 countByEnumeratingWithState:&v35 objects:v48 count:16];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = *(void *)v36;
      os_log_type_t type = VCPLogToOSLogType[7];
      os_log_type_t v33 = VCPLogToOSLogType[3];
      do
      {
        for (unint64_t i = 0; i != v18; unint64_t i = (char *)i + 1)
        {
          uint64_t v21 = v15;
          if (*(void *)v36 != v19) {
            objc_enumerationMutation(v16);
          }
          uint64_t v22 = *(void *)(*((void *)&v35 + 1) + 8 * i);
          uint64_t v23 = *(void **)(a1 + 40);
          id v24 = objc_msgSend(v7, "integerValue", v30, v31);
          id v34 = v15;
          LOBYTE(v23) = [v23 tag:v24 with:v22 type:1 error:&v34];
          id v15 = v34;

          int v25 = MediaAnalysisLogLevel();
          if (v23)
          {
            if (v25 >= 7)
            {
              __int16 v26 = VCPLogInstance();
              if (os_log_type_enabled(v26, type))
              {
                uint64_t v27 = *(void *)(a1 + 32);
                *(_DWORD *)long long buf = 138412802;
                uint64_t v41 = v27;
                __int16 v42 = 2112;
                id v43 = v7;
                __int16 v44 = 2112;
                uint64_t v45 = v22;
                _os_log_impl((void *)&_mh_execute_header, v26, type, "%@ Tagged rejecting face %@ to person %@", buf, 0x20u);
              }
            }
            ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
          }
          else if (v25 >= 3)
          {
            uint64_t v28 = VCPLogInstance();
            if (os_log_type_enabled(v28, v33))
            {
              uint64_t v29 = *(void *)(a1 + 32);
              *(_DWORD *)long long buf = 138413058;
              uint64_t v41 = v29;
              __int16 v42 = 2112;
              id v43 = v7;
              __int16 v44 = 2112;
              uint64_t v45 = v22;
              __int16 v46 = 2112;
              id v47 = v15;
              _os_log_impl((void *)&_mh_execute_header, v28, v33, "%@ Failed to tag rejecting face %@ to person %@ - %@", buf, 0x2Au);
            }
          }
        }
        id v18 = [v16 countByEnumeratingWithState:&v35 objects:v48 count:16];
      }
      while (v18);
    }

    uint64_t v9 = v30;
    id v8 = v31;
  }
}

uint64_t sub_100152E48(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v77 = 0;
  long long v78 = &v77;
  uint64_t v79 = 0x2020000000;
  uint64_t v80 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = &v73;
  uint64_t v75 = 0x2020000000;
  uint64_t v76 = 0;
  if ([*(id *)(a1 + 32) count])
  {
    v67[0] = _NSConcreteStackBlock;
    v67[1] = 3221225472;
    v67[2] = sub_100153574;
    v67[3] = &unk_10021ED48;
    id v68 = *(id *)(a1 + 32);
    id v71 = *(id *)(a1 + 96);
    id v69 = *(id *)(a1 + 40);
    id v70 = v3;
    id v72 = &v73;
    id v5 = objc_retainBlock(v67);
    uint64_t v6 = *(void **)(a1 + 48);
    id v66 = 0;
    unsigned int v7 = [v6 performChangesAndWait:v5 error:&v66];
    id v8 = v66;
    if (v7)
    {
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        uint64_t v9 = VCPLogInstance();
        os_log_type_t v10 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = v74[3];
          uint64_t v12 = *(void *)(a1 + 40);
          id v13 = [*(id *)(a1 + 32) count];
          *(_DWORD *)long long buf = 138412802;
          *(void *)&uint8_t buf[4] = v12;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v11;
          *(_WORD *)&buf[22] = 2048;
          id v88 = v13;
          id v14 = "%@ Remove %lu (out of %lu) observations for hidden Graph-Verified person";
          id v15 = v9;
          os_log_type_t v16 = v10;
          uint32_t v17 = 32;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v15, v16, v14, buf, v17);
          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else if ((int)MediaAnalysisLogLevel() >= 3)
    {
      uint64_t v9 = VCPLogInstance();
      os_log_type_t v18 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v9, v18))
      {
        uint64_t v19 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v19;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v8;
        id v14 = "%@ Failed to remove observations for hidden Graph-Verified person - %@";
        id v15 = v9;
        os_log_type_t v16 = v18;
        uint32_t v17 = 22;
        goto LABEL_9;
      }
LABEL_10:
    }
  }
  uint64_t v20 = *(void **)(a1 + 56);
  v61[0] = _NSConcreteStackBlock;
  v61[1] = 3221225472;
  v61[2] = sub_100153984;
  v61[3] = &unk_10021ED70;
  id v64 = *(id *)(a1 + 96);
  id v62 = *(id *)(a1 + 40);
  id v21 = v3;
  id v63 = v21;
  __int16 v65 = &v77;
  [v20 enumerateKeysAndObjectsUsingBlock:v61];
  uint64_t v22 = *(void **)(a1 + 64);
  v56[0] = _NSConcreteStackBlock;
  v56[1] = 3221225472;
  v56[2] = sub_100153C90;
  v56[3] = &unk_10021ED70;
  id v59 = *(id *)(a1 + 96);
  id v57 = *(id *)(a1 + 40);
  id v23 = v21;
  id v58 = v23;
  id v60 = &v77;
  [v22 enumerateKeysAndObjectsUsingBlock:v56];
  id v24 = *(void **)(a1 + 72);
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472;
  v51[2] = sub_100153F9C;
  v51[3] = &unk_10021ED70;
  id v54 = *(id *)(a1 + 96);
  id v52 = *(id *)(a1 + 40);
  id v25 = v23;
  id v53 = v25;
  unint64_t v55 = &v77;
  [v24 enumerateKeysAndObjectsUsingBlock:v51];
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    __int16 v26 = VCPLogInstance();
    os_log_type_t v27 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = *(void *)(a1 + 40);
      uint64_t v29 = v78[3];
      id v30 = [*(id *)(a1 + 80) count];
      uint64_t v31 = *(void *)(a1 + 104);
      *(_DWORD *)long long buf = 138413058;
      *(void *)&uint8_t buf[4] = v28;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v29;
      *(_WORD *)&buf[22] = 2048;
      id v88 = v30;
      __int16 v89 = 2048;
      uint64_t v90 = v31;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%@ Tagged %lu (out of %lu valid among %lu faceCrops) observations in Gallery", buf, 0x2Au);
    }
  }
  if ([*(id *)(a1 + 88) count])
  {
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2020000000;
    id v88 = 0;
    if ((int)MediaAnalysisLogLevel() >= 4)
    {
      os_log_type_t v32 = VCPLogInstance();
      os_log_type_t v33 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = *(void *)(a1 + 40);
        id v35 = [*(id *)(a1 + 88) count];
        *(_DWORD *)uint64_t v81 = 138412546;
        uint64_t v82 = v34;
        __int16 v83 = 2048;
        id v84 = v35;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "%@ Found %lu orphan faces without facecrop; untagging from VUGallery ...",
          v81,
          0x16u);
      }
    }
    id v43 = _NSConcreteStackBlock;
    uint64_t v44 = 3221225472;
    uint64_t v45 = sub_1001542CC;
    __int16 v46 = &unk_10021ED98;
    long long v36 = *(void **)(a1 + 88);
    id v49 = *(id *)(a1 + 96);
    id v47 = *(id *)(a1 + 40);
    id v48 = v25;
    uint64_t v50 = buf;
    [v36 enumerateObjectsUsingBlock:&v43];
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      long long v37 = VCPLogInstance();
      os_log_type_t v38 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = *(void *)(a1 + 40);
        uint64_t v40 = *(void **)(*(void *)&buf[8] + 24);
        id v41 = objc_msgSend(*(id *)(a1 + 88), "count", v43, v44, v45, v46, v47);
        *(_DWORD *)uint64_t v81 = 138412802;
        uint64_t v82 = v39;
        __int16 v83 = 2048;
        id v84 = v40;
        __int16 v85 = 2048;
        id v86 = v41;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "%@ Untagged %lu (out of %lu) orphan training faces in Gallery", v81, 0x20u);
      }
    }
    _Block_object_dispose(buf, 8);
  }

  _Block_object_dispose(&v73, 8);
  _Block_object_dispose(&v77, 8);

  return 0;
}

void sub_10015350C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose((const void *)(v51 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_100153574(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100153634;
  v5[3] = &unk_10021ED20;
  id v8 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 40);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 64);
  id v7 = v3;
  uint64_t v9 = v4;
  [v2 enumerateKeysAndObjectsUsingBlock:v5];
}

void sub_100153634(void *a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a1[6];
  if (!v9 || !(*(unsigned int (**)(void))(v9 + 16))())
  {
    if ([v7 integerValue])
    {
      if (v8)
      {
        id v13 = (void *)a1[5];
        id v27 = 0;
        unsigned int v14 = objc_msgSend(v13, "remove:error:", objc_msgSend(v7, "integerValue"), &v27);
        id v15 = v27;
        int v16 = MediaAnalysisLogLevel();
        if (v14)
        {
          if (v16 >= 7)
          {
            uint32_t v17 = VCPLogInstance();
            os_log_type_t v18 = VCPLogToOSLogType[7];
            if (os_log_type_enabled(v17, v18))
            {
              uint64_t v19 = a1[4];
              *(_DWORD *)long long buf = 138412546;
              uint64_t v29 = v19;
              __int16 v30 = 2112;
              id v31 = v7;
              _os_log_impl((void *)&_mh_execute_header, v17, v18, "%@ Removing %@ ...", buf, 0x16u);
            }
          }
          uint64_t v20 = +[PHFaceChangeRequest changeRequestForFace:v8];
          [v20 setVuObservationID:-1];
          ++*(void *)(*(void *)(a1[7] + 8) + 24);
        }
        else
        {
          if (v16 < 3) {
            goto LABEL_27;
          }
          uint64_t v20 = VCPLogInstance();
          os_log_type_t v25 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v20, v25))
          {
            uint64_t v26 = a1[4];
            *(_DWORD *)long long buf = 138412802;
            uint64_t v29 = v26;
            __int16 v30 = 2112;
            id v31 = v7;
            __int16 v32 = 2112;
            os_log_type_t v33 = v15;
            _os_log_impl((void *)&_mh_execute_header, v20, v25, "%@ Failed to remove observationID %@ from Gallery - %@", buf, 0x20u);
          }
        }

LABEL_27:
        goto LABEL_28;
      }
      if ((int)MediaAnalysisLogLevel() < 3) {
        goto LABEL_28;
      }
      id v15 = VCPLogInstance();
      os_log_type_t v21 = VCPLogToOSLogType[3];
      if (!os_log_type_enabled(v15, v21)) {
        goto LABEL_27;
      }
      uint64_t v24 = a1[4];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v29 = v24;
      id v23 = "%@ invalid facecrop face for hidden person";
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() < 3) {
        goto LABEL_28;
      }
      id v15 = VCPLogInstance();
      os_log_type_t v21 = VCPLogToOSLogType[3];
      if (!os_log_type_enabled(v15, v21)) {
        goto LABEL_27;
      }
      uint64_t v22 = a1[4];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v29 = v22;
      id v23 = "%@ vuObservationID = 0 for face to hidden person";
    }
    _os_log_impl((void *)&_mh_execute_header, v15, v21, v23, buf, 0xCu);
    goto LABEL_27;
  }
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    os_log_type_t v10 = VCPLogInstance();
    os_log_type_t v11 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = a1[4];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v29 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%@ Cancelled", buf, 0xCu);
    }
  }
  *a4 = 1;
LABEL_28:
}

void sub_100153984(void *a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v10 = a1[6];
  if (!v10 || !(*(unsigned int (**)(void))(v10 + 16))())
  {
    id v14 = [v7 integerValue];
    if (v14)
    {
      id v15 = v14;
      int v16 = (void *)a1[5];
      id v28 = 0;
      unsigned __int8 v17 = [v16 tag:v15 with:v8 type:0 error:&v28];
      os_log_type_t v18 = v28;
      int v19 = MediaAnalysisLogLevel();
      if (v17)
      {
        if (v19 >= 7)
        {
          uint64_t v20 = VCPLogInstance();
          os_log_type_t v21 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v20, v21))
          {
            uint64_t v22 = a1[4];
            *(_DWORD *)long long buf = 138412802;
            uint64_t v30 = v22;
            __int16 v31 = 2048;
            id v32 = v15;
            __int16 v33 = 2112;
            id v34 = v8;
            _os_log_impl((void *)&_mh_execute_header, v20, v21, "%@ Tagged user confirmed training face %ld to person %@", buf, 0x20u);
          }
        }
        ++*(void *)(*(void *)(a1[7] + 8) + 24);
      }
      else if (v19 >= 3)
      {
        os_log_type_t v25 = VCPLogInstance();
        os_log_type_t v26 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = a1[4];
          *(_DWORD *)long long buf = 138413058;
          uint64_t v30 = v27;
          __int16 v31 = 2048;
          id v32 = v15;
          __int16 v33 = 2112;
          id v34 = v8;
          __int16 v35 = 2112;
          long long v36 = v18;
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "%@ Failed to tag user confirmed training face %ld to person %@ - %@", buf, 0x2Au);
        }
      }
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() < 3) {
        goto LABEL_23;
      }
      os_log_type_t v18 = VCPLogInstance();
      os_log_type_t v23 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v18, v23))
      {
        uint64_t v24 = a1[4];
        *(_DWORD *)long long buf = 138412546;
        uint64_t v30 = v24;
        __int16 v31 = 2112;
        id v32 = v8;
        _os_log_impl((void *)&_mh_execute_header, v18, v23, "%@ vuObservationID = 0 for user confirmed training face to person %@", buf, 0x16u);
      }
    }

    goto LABEL_23;
  }
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    os_log_type_t v11 = VCPLogInstance();
    os_log_type_t v12 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = a1[4];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v30 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%@ Cancelled", buf, 0xCu);
    }
  }
  *a4 = 1;
LABEL_23:
}

void sub_100153C90(void *a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v10 = a1[6];
  if (!v10 || !(*(unsigned int (**)(void))(v10 + 16))())
  {
    id v14 = [v7 integerValue];
    if (v14)
    {
      id v15 = v14;
      int v16 = (void *)a1[5];
      id v28 = 0;
      unsigned __int8 v17 = [v16 tag:v15 with:v8 type:2 error:&v28];
      os_log_type_t v18 = v28;
      int v19 = MediaAnalysisLogLevel();
      if (v17)
      {
        if (v19 >= 7)
        {
          uint64_t v20 = VCPLogInstance();
          os_log_type_t v21 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v20, v21))
          {
            uint64_t v22 = a1[4];
            *(_DWORD *)long long buf = 138412802;
            uint64_t v30 = v22;
            __int16 v31 = 2048;
            id v32 = v15;
            __int16 v33 = 2112;
            id v34 = v8;
            _os_log_impl((void *)&_mh_execute_header, v20, v21, "%@ Tagged graph confirmed training face %ld to person %@", buf, 0x20u);
          }
        }
        ++*(void *)(*(void *)(a1[7] + 8) + 24);
      }
      else if (v19 >= 3)
      {
        os_log_type_t v25 = VCPLogInstance();
        os_log_type_t v26 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = a1[4];
          *(_DWORD *)long long buf = 138413058;
          uint64_t v30 = v27;
          __int16 v31 = 2048;
          id v32 = v15;
          __int16 v33 = 2112;
          id v34 = v8;
          __int16 v35 = 2112;
          long long v36 = v18;
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "%@ Failed to tag graph confirmed training face %ld to person %@ - %@", buf, 0x2Au);
        }
      }
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() < 3) {
        goto LABEL_23;
      }
      os_log_type_t v18 = VCPLogInstance();
      os_log_type_t v23 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v18, v23))
      {
        uint64_t v24 = a1[4];
        *(_DWORD *)long long buf = 138412546;
        uint64_t v30 = v24;
        __int16 v31 = 2112;
        id v32 = v8;
        _os_log_impl((void *)&_mh_execute_header, v18, v23, "%@ vuObservationID = 0 for graph confirmed training face to person %@", buf, 0x16u);
      }
    }

    goto LABEL_23;
  }
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    os_log_type_t v11 = VCPLogInstance();
    os_log_type_t v12 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = a1[4];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v30 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%@ Cancelled", buf, 0xCu);
    }
  }
  *a4 = 1;
LABEL_23:
}

void sub_100153F9C(void *a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v10 = a1[6];
  if (!v10 || !(*(unsigned int (**)(void))(v10 + 16))())
  {
    id v14 = [v7 integerValue];
    if (v14)
    {
      id v15 = v14;
      int v16 = (void *)a1[5];
      id v31 = 0;
      [v16 untag:v15 error:&v31];
      id v17 = v31;
      os_log_type_t v18 = (void *)a1[5];
      id v30 = v17;
      unsigned __int8 v19 = [v18 tag:v15 with:v8 type:1 error:&v30];
      uint64_t v20 = v30;

      int v21 = MediaAnalysisLogLevel();
      if (v19)
      {
        if (v21 >= 7)
        {
          uint64_t v22 = VCPLogInstance();
          os_log_type_t v23 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v22, v23))
          {
            uint64_t v24 = a1[4];
            *(_DWORD *)long long buf = 138412802;
            uint64_t v33 = v24;
            __int16 v34 = 2048;
            id v35 = v15;
            __int16 v36 = 2112;
            id v37 = v8;
            _os_log_impl((void *)&_mh_execute_header, v22, v23, "%@ Tagged rejected training face %ld to person %@", buf, 0x20u);
          }
        }
        ++*(void *)(*(void *)(a1[7] + 8) + 24);
      }
      else if (v21 >= 3)
      {
        uint64_t v27 = VCPLogInstance();
        os_log_type_t v28 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = a1[4];
          *(_DWORD *)long long buf = 138413058;
          uint64_t v33 = v29;
          __int16 v34 = 2048;
          id v35 = v15;
          __int16 v36 = 2112;
          id v37 = v8;
          __int16 v38 = 2112;
          uint64_t v39 = v20;
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "%@ Failed to tag rejected training face %ld to person %@ - %@", buf, 0x2Au);
        }
      }
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() < 3) {
        goto LABEL_23;
      }
      uint64_t v20 = VCPLogInstance();
      os_log_type_t v25 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v20, v25))
      {
        uint64_t v26 = a1[4];
        *(_DWORD *)long long buf = 138412546;
        uint64_t v33 = v26;
        __int16 v34 = 2112;
        id v35 = v8;
        _os_log_impl((void *)&_mh_execute_header, v20, v25, "%@ vuObservationID = 0 for rejected training face to person %@", buf, 0x16u);
      }
    }

    goto LABEL_23;
  }
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    os_log_type_t v11 = VCPLogInstance();
    os_log_type_t v12 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = a1[4];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v33 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%@ Cancelled", buf, 0xCu);
    }
  }
  *a4 = 1;
LABEL_23:
}

void sub_1001542CC(void *a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  uint64_t v6 = a1[6];
  if (!v6 || !(*(unsigned int (**)(void))(v6 + 16))())
  {
    id v10 = [v5 integerValue];
    if (v10)
    {
      id v11 = v10;
      os_log_type_t v12 = (void *)a1[5];
      id v24 = 0;
      unsigned __int8 v13 = [v12 untag:v11 error:&v24];
      id v14 = v24;
      int v15 = MediaAnalysisLogLevel();
      if (v13)
      {
        if (v15 >= 7)
        {
          int v16 = VCPLogInstance();
          os_log_type_t v17 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v16, v17))
          {
            uint64_t v18 = a1[4];
            *(_DWORD *)long long buf = 138412546;
            uint64_t v26 = v18;
            __int16 v27 = 2048;
            id v28 = v11;
            _os_log_impl((void *)&_mh_execute_header, v16, v17, "%@ Untagged orphan training face %ld", buf, 0x16u);
          }
        }
        ++*(void *)(*(void *)(a1[7] + 8) + 24);
      }
      else if (v15 >= 3)
      {
        int v21 = VCPLogInstance();
        os_log_type_t v22 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = a1[4];
          *(_DWORD *)long long buf = 138412802;
          uint64_t v26 = v23;
          __int16 v27 = 2048;
          id v28 = v11;
          __int16 v29 = 2112;
          id v30 = v14;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%@ Failed to untag orphan training face %ld - %@", buf, 0x20u);
        }
      }
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() < 3) {
        goto LABEL_23;
      }
      id v14 = VCPLogInstance();
      os_log_type_t v19 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v14, v19))
      {
        uint64_t v20 = a1[4];
        *(_DWORD *)long long buf = 138412290;
        uint64_t v26 = v20;
        _os_log_impl((void *)&_mh_execute_header, v14, v19, "%@ vuObservationID = 0 for orphan face", buf, 0xCu);
      }
    }

    goto LABEL_23;
  }
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    id v7 = VCPLogInstance();
    os_log_type_t v8 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = a1[4];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v26 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%@ Cancelled", buf, 0xCu);
    }
  }
  *a3 = 1;
LABEL_23:
}

uint64_t sub_100154588(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      [v3 fractionCompleted];
      int v12 = 138412546;
      uint64_t v13 = v6;
      __int16 v14 = 2048;
      double v15 = (float)(v7 * 100.0);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Gallery updating - %.2f%%", (uint8_t *)&v12, 0x16u);
    }
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8 && ((*(uint64_t (**)(void))(v8 + 16))() & 1) != 0)
  {
    uint64_t v9 = 0;
  }
  else
  {
    id v10 = +[VCPWatchdog sharedWatchdog];
    [v10 pet];

    uint64_t v9 = 1;
  }

  return v9;
}

void sub_100154BD0(uint64_t a1, unsigned char *a2)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100154DB0;
  v12[3] = &unk_10021EE38;
  id v13 = *(id *)(a1 + 32);
  id v14 = *(id *)(a1 + 40);
  id v18 = *(id *)(a1 + 80);
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 64);
  uint64_t v4 = objc_retainBlock(v12);
  os_log_type_t v5 = *(void **)(a1 + 72);
  id v11 = 0;
  unsigned __int8 v6 = [v5 mutateAndReturnError:&v11 handler:v4];
  id v7 = v11;
  if ((v6 & 1) == 0)
  {
    *a2 = 1;
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      uint64_t v8 = VCPLogInstance();
      os_log_type_t v9 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v20 = v10;
        __int16 v21 = 2112;
        id v22 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "%@ Failed to add faces to Gallery %@; rollback Photos persistence transaction",
          buf,
          0x16u);
      }
    }
  }
}

uint64_t sub_100154DB0(uint64_t a1, void *a2)
{
  id v120 = a2;
  uint64_t v109 = objc_msgSend(*(id *)(a1 + 32), "mad_allPersonsFetchOptions");
  if (![*(id *)(a1 + 40) count])
  {
    uint64_t v113 = 0;
    goto LABEL_132;
  }
  uint64_t v113 = 0;
  uint64_t v3 = 0;
  os_log_type_t v110 = VCPLogToOSLogType[5];
  os_log_type_t type = VCPLogToOSLogType[7];
  v108 = (void *)VNAnimalFaceIdentifierDogFace;
  id v107 = (void *)VNAnimalFaceIdentifierCatFace;
  os_log_type_t v114 = VCPLogToOSLogType[3];
  os_log_type_t v115 = VCPLogToOSLogType[4];
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 72);
    if (v4)
    {
      if ((*(unsigned int (**)(void))(v4 + 16))()) {
        break;
      }
    }
    os_log_type_t v5 = [*(id *)(a1 + 40) objectAtIndexedSubscript:v3];
    unsigned int v6 = [v5 detectionType];
    id v7 = @"Animal";
    if (v6 == 1) {
      id v7 = @"Human";
    }
    id v124 = v7;
    uint64_t v8 = *(void *)(a1 + 48);
    os_log_type_t v9 = [v5 localIdentifier];
    os_log_type_t v123 = +[NSString stringWithFormat:@"%@[%@][%@]", v8, v124, v9];

    uint64_t v130 = 0;
    uint64_t v10 = *(void **)(a1 + 56);
    id v11 = [v5 uuid];
    int v12 = [v10 objectForKeyedSubscript:v11];

    if (v12)
    {
      uint64_t v131 = 0;
      uint64_t v132 = &v131;
      uint64_t v133 = 0x2050000000;
      id v13 = (void *)qword_100252898;
      uint64_t v134 = qword_100252898;
      if (!qword_100252898)
      {
        *(void *)long long buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = sub_10015AB18;
        *(void *)&unsigned char buf[24] = &unk_10021EB68;
        v136[0] = &v131;
        sub_10015AB18((uint64_t)buf);
        id v13 = (void *)v132[3];
      }
      id v14 = v13;
      _Block_object_dispose(&v131, 8);
      id v125 = objc_alloc_init(v14);
      id v15 = objc_alloc((Class)NSUUID);
      id v16 = [v12 uuid];
      id v17 = [v15 initWithUUIDString:v16];
      [v125 setAsset:v17];

      id v18 = *(void **)(a1 + 64);
      os_log_type_t v19 = [v12 uuid];
      uint64_t v20 = [v18 objectForKeyedSubscript:v19];

      if (v20)
      {
        id v21 = objc_alloc((Class)NSUUID);
        id v22 = *(void **)(a1 + 64);
        uint64_t v23 = [v12 uuid];
        id v24 = [v22 objectForKeyedSubscript:v23];
        id v25 = [v21 initWithUUIDString:v24];
        [v125 setMoment:v25];

        goto LABEL_12;
      }
      if ((int)MediaAnalysisLogLevel() >= 5)
      {
        uint64_t v23 = VCPLogInstance();
        if (os_log_type_enabled(v23, v110))
        {
          id v31 = [v12 localIdentifier];
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v123;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v31;
          _os_log_impl((void *)&_mh_execute_header, v23, v110, "%@ asset %@ does not have a moment", buf, 0x16u);
        }
LABEL_12:
      }
      uint64_t v26 = [v12 importProperties];
      BOOL v27 = [v26 importedBy] == (id)2;

      if (v27)
      {
        [v125 setSource:1];
      }
      else
      {
        __int16 v29 = [v12 importProperties];
        BOOL v30 = [v29 importedBy] == (id)1;

        if (v30) {
          [v125 setSource:2];
        }
        else {
          [v125 setSource:3];
        }
      }
      goto LABEL_26;
    }
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      id v28 = VCPLogInstance();
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v123;
        _os_log_impl((void *)&_mh_execute_header, v28, type, "%@ Face does not have assocated asset", buf, 0xCu);
      }
    }
    id v125 = 0;
LABEL_26:
    id v32 = [v5 faceClusteringProperties];
    uint64_t v33 = [v32 faceprint];

    if (!v33)
    {
      if ((int)MediaAnalysisLogLevel() >= 4)
      {
        uint64_t v39 = VCPLogInstance();
        if (os_log_type_enabled(v39, v115))
        {
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v123;
          uint64_t v40 = v39;
          os_log_type_t v41 = v115;
          __int16 v42 = "%@ Failed to obtain PHFaceprint; skip";
          goto LABEL_60;
        }
        goto LABEL_61;
      }
LABEL_62:
      id v122 = 0;
      goto LABEL_121;
    }
    if ([v5 detectionType] == 1)
    {
      __int16 v34 = [v33 faceprintData];
      id v35 = +[VCPFaceIDModel faceObservationFromFaceprintData:v34];

      if (!v35)
      {
        if ((int)MediaAnalysisLogLevel() >= 4)
        {
          uint64_t v39 = VCPLogInstance();
          if (os_log_type_enabled(v39, v115))
          {
            *(_DWORD *)long long buf = 138412290;
            *(void *)&uint8_t buf[4] = v123;
            uint64_t v40 = v39;
            os_log_type_t v41 = v115;
            __int16 v42 = "%@ Failed to create VNFaceObservation; ignoring";
            goto LABEL_60;
          }
          goto LABEL_61;
        }
        goto LABEL_62;
      }
      [v5 quality];
      __int16 v36 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
      [v35 setValue:v36 forKey:@"faceCaptureQuality"];

      [v5 duration];
      if (v37 <= 0.0) {
        unsigned int v38 = objc_msgSend(*(id *)(a1 + 32), "vcp_isSyndicationLibrary");
      }
      else {
        unsigned int v38 = 1;
      }
      id v129 = 0;
      unsigned __int8 v63 = [v120 addWithObservation:v35 context:v125 priority:v38 at:0 output:&v130 error:&v129];
      id v122 = v129;

      if ((v63 & 1) == 0) {
        goto LABEL_80;
      }
    }
    else
    {
      if ([v5 detectionType] != 3 && objc_msgSend(v5, "detectionType") != 4)
      {
        id v122 = 0;
LABEL_80:
        if ((int)MediaAnalysisLogLevel() >= 3)
        {
          uint64_t v39 = VCPLogInstance();
          if (os_log_type_enabled(v39, v114))
          {
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v123;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v122;
            uint64_t v76 = v39;
            os_log_type_t v77 = v114;
            long long v78 = "%@ Failed to add face - %@; ignoring";
            uint32_t v79 = 22;
            goto LABEL_86;
          }
          goto LABEL_120;
        }
        goto LABEL_121;
      }
      id v43 = [v33 faceprintData];
      uint64_t v44 = +[VCPFaceIDModel animalObservationFromAnimalprintData:v43];

      if (!v44)
      {
        if ((int)MediaAnalysisLogLevel() >= 4)
        {
          uint64_t v39 = VCPLogInstance();
          if (os_log_type_enabled(v39, v115))
          {
            *(_DWORD *)long long buf = 138412290;
            *(void *)&uint8_t buf[4] = v123;
            uint64_t v40 = v39;
            os_log_type_t v41 = v115;
            __int16 v42 = "%@ Failed to create VNAnimalObservation; ignoring";
LABEL_60:
            _os_log_impl((void *)&_mh_execute_header, v40, v41, v42, buf, 0xCu);
          }
LABEL_61:
          id v122 = 0;
          goto LABEL_120;
        }
        goto LABEL_62;
      }
      uint64_t v45 = +[NSMutableArray array];
      unsigned int v46 = [v5 detectionType];
      [v5 bodyWidth];
      if (v47 != 0.0)
      {
        VNAnimalIdentifier v48 = VNAnimalIdentifierDog;
        if (v46 != 3) {
          VNAnimalIdentifier v48 = VNAnimalIdentifierCat;
        }
        id v49 = v48;
        id v50 = objc_alloc((Class)VNClassificationObservation);
        LODWORD(v51) = 1.0;
        id v52 = [v50 initWithRequestRevision:0 identifier:v49 confidence:v51];

        [v45 addObject:v52];
      }
      [v5 size];
      if (v53 != 0.0)
      {
        id v54 = v108;
        if (v46 != 3) {
          id v54 = v107;
        }
        id v55 = v54;
        id v56 = objc_alloc((Class)VNClassificationObservation);
        LODWORD(v57) = 1.0;
        id v58 = [v56 initWithRequestRevision:0 identifier:v55 confidence:v57];

        [v45 addObject:v58];
      }
      [v44 setValue:v45 forKey:@"labels"];
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        id v59 = VCPLogInstance();
        if (os_log_type_enabled(v59, type))
        {
          id v60 = [v44 labels];
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v123;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v60;
          _os_log_impl((void *)&_mh_execute_header, v59, type, "%@ Set animalObservation labels %@ to Gallery", buf, 0x16u);
        }
      }
      [v5 duration];
      if (v61 <= 0.0) {
        unsigned int v62 = objc_msgSend(*(id *)(a1 + 32), "vcp_isSyndicationLibrary");
      }
      else {
        unsigned int v62 = 1;
      }
      id v128 = 0;
      unsigned int v64 = [v120 addWithObservation:v44 context:v125 priority:v62 at:0 output:&v130 error:&v128];
      id v122 = v128;

      if (!v64) {
        goto LABEL_80;
      }
    }
    if (v130)
    {
      uint64_t v39 = +[PHFaceChangeRequest changeRequestForFace:v5];
      [v39 setVuObservationID:v130];
      if ((int)MediaAnalysisLogLevel() >= 7)
      {
        __int16 v65 = VCPLogInstance();
        if (os_log_type_enabled(v65, type))
        {
          unsigned int v66 = [v5 trainingType];
          *(_DWORD *)long long buf = 138412802;
          *(void *)&uint8_t buf[4] = v123;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v66;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v130;
          _os_log_impl((void *)&_mh_execute_header, v65, type, "%@ Added face (trainingType:%d) with ObservationID %ld", buf, 0x1Cu);
        }
      }
      ++v113;
      if ([v5 trainingType] == 1
        || [v5 trainingType] == 3
        || [v5 trainingType] == 5)
      {
        uint64_t v67 = [v5 personLocalIdentifier];
        v119 = +[PHObject uuidFromLocalIdentifier:v67];

        id v68 = [objc_alloc((Class)NSUUID) initWithUUIDString:v119];
        if (v68)
        {
          unsigned int v69 = [v5 trainingType];
          id v127 = 0;
          unsigned __int8 v70 = [v120 tag:v130 with:v68 type:2 * (v69 == 5) error:&v127];
          id v71 = v127;
          int v72 = MediaAnalysisLogLevel();
          if (v70)
          {
            if (v72 >= 7)
            {
              log = VCPLogInstance();
              if (os_log_type_enabled(log, type))
              {
                uint64_t v73 = v130;
                uint64_t v74 = [v5 personLocalIdentifier];
                *(_DWORD *)long long buf = 138412802;
                *(void *)&uint8_t buf[4] = v123;
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v73;
                *(_WORD *)&buf[22] = 2112;
                *(void *)&unsigned char buf[24] = v74;
                _os_log_impl((void *)&_mh_execute_header, log, type, "%@ Tagged confirming face (%ld) to person %@", buf, 0x20u);
              }
              uint64_t v75 = log;
              goto LABEL_116;
            }
          }
          else if (v72 >= 3)
          {
            uint64_t v75 = VCPLogInstance();
            if (os_log_type_enabled(v75, v114))
            {
              uint64_t v81 = v130;
              uint64_t v82 = [v5 personLocalIdentifier];
              *(_DWORD *)long long buf = 138413058;
              *(void *)&uint8_t buf[4] = v123;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v81;
              *(_WORD *)&buf[22] = 2112;
              *(void *)&unsigned char buf[24] = v82;
              LOWORD(v136[0]) = 2112;
              *(void *)((char *)v136 + 2) = v71;
              __int16 v83 = (void *)v82;
              _os_log_impl((void *)&_mh_execute_header, v75, v114, "%@ Failed to tag confirming face (%ld) to person %@ - %@", buf, 0x2Au);
            }
LABEL_116:
          }
LABEL_117:
        }
        else if ((int)MediaAnalysisLogLevel() >= 3)
        {
          id v71 = VCPLogInstance();
          if (os_log_type_enabled(v71, v114))
          {
            uint64_t v80 = [v5 personLocalIdentifier];
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v123;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v80;
            _os_log_impl((void *)&_mh_execute_header, v71, v114, "%@ Invalid confirming person identification %@ for face", buf, 0x16u);
          }
          goto LABEL_117;
        }
LABEL_118:

        goto LABEL_119;
      }
      if ([v5 trainingType] != 2 && objc_msgSend(v5, "trainingType") != 4) {
        goto LABEL_120;
      }
      v119 = +[PHPerson fetchRejectedPersonsForFace:v5 options:v109];
      if (![v119 count])
      {
        if ((int)MediaAnalysisLogLevel() >= 3)
        {
          id v68 = VCPLogInstance();
          if (os_log_type_enabled(v68, v114))
          {
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v123;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v130;
            _os_log_impl((void *)&_mh_execute_header, v68, v114, "%@ Failed to find reject person for face (%ld)", buf, 0x16u);
          }
          goto LABEL_118;
        }
LABEL_119:

        goto LABEL_120;
      }
      if (![v119 count]) {
        goto LABEL_119;
      }
      uint64_t v84 = 0;
      while (2)
      {
        __int16 v85 = [v119 objectAtIndexedSubscript:v84];
        id v86 = [v85 uuid];
        os_log_t loga = +[PHObject uuidFromLocalIdentifier:v86];

        id v87 = [objc_alloc((Class)NSUUID) initWithUUIDString:loga];
        if (v87)
        {
          id v126 = 0;
          unsigned __int8 v88 = [v120 tag:v130 with:v87 type:1 error:&v126];
          os_log_t oslog = (os_log_t)v126;
          int v89 = MediaAnalysisLogLevel();
          if (v88)
          {
            if (v89 >= 7)
            {
              os_log_type_t v106 = VCPLogInstance();
              if (os_log_type_enabled(v106, type))
              {
                uint64_t v90 = v130;
                uint64_t v91 = [v5 personLocalIdentifier];
                *(_DWORD *)long long buf = 138412802;
                *(void *)&uint8_t buf[4] = v123;
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v90;
                *(_WORD *)&buf[22] = 2112;
                *(void *)&unsigned char buf[24] = v91;
                _os_log_impl((void *)&_mh_execute_header, v106, type, "%@ Tagged rejecting face (%ld) to person %@", buf, 0x20u);
              }
              v92 = v106;
              goto LABEL_111;
            }
          }
          else if (v89 >= 3)
          {
            v92 = VCPLogInstance();
            if (os_log_type_enabled(v92, v114))
            {
              uint64_t v95 = v130;
              uint64_t v96 = [v5 personLocalIdentifier];
              *(_DWORD *)long long buf = 138413058;
              *(void *)&uint8_t buf[4] = v123;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v95;
              *(_WORD *)&buf[22] = 2112;
              *(void *)&unsigned char buf[24] = v96;
              LOWORD(v136[0]) = 2112;
              *(void *)((char *)v136 + 2) = oslog;
              uint64_t v97 = (void *)v96;
              _os_log_impl((void *)&_mh_execute_header, v92, v114, "%@ Failed to tag rejecting face (%ld) to person %@ - %@", buf, 0x2Au);
            }
LABEL_111:
          }
LABEL_112:
        }
        else if ((int)MediaAnalysisLogLevel() >= 3)
        {
          VCPLogInstance();
          os_log_t oslog = (os_log_t)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(oslog, v114))
          {
            uint64_t v93 = [v119 objectAtIndexedSubscript:v84];
            v94 = [v93 localIdentifier];
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v123;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v94;
            _os_log_impl((void *)&_mh_execute_header, oslog, v114, "%@ Invalid rejecting person identification %@ for face", buf, 0x16u);
          }
          goto LABEL_112;
        }

        if (++v84 >= (unint64_t)[v119 count]) {
          goto LABEL_119;
        }
        continue;
      }
    }
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      uint64_t v39 = VCPLogInstance();
      if (os_log_type_enabled(v39, v114))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v123;
        uint64_t v76 = v39;
        os_log_type_t v77 = v114;
        long long v78 = "%@ Failed to add face with ObservationID = 0; ignoring";
        uint32_t v79 = 12;
LABEL_86:
        _os_log_impl((void *)&_mh_execute_header, v76, v77, v78, buf, v79);
      }
LABEL_120:
    }
LABEL_121:

    if (++v3 >= (unint64_t)[*(id *)(a1 + 40) count]) {
      goto LABEL_132;
    }
  }
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    os_signpost_id_t v98 = VCPLogInstance();
    os_log_type_t v99 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v100;
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "%@ Cancelled during adding faces to Gallery; skip remaining faces",
        buf,
        0xCu);
    }
  }
LABEL_132:
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v101 = VCPLogInstance();
    os_log_type_t v102 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v101, v102))
    {
      uint64_t v103 = *(void *)(a1 + 48);
      id v104 = [*(id *)(a1 + 40) count];
      *(_DWORD *)long long buf = 138412802;
      *(void *)&uint8_t buf[4] = v103;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v113;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&unsigned char buf[24] = v104;
      _os_log_impl((void *)&_mh_execute_header, v101, v102, "%@ Added %lu of %lu face(s) to Gallery", buf, 0x20u);
    }
  }
  return 0;
}

void sub_100155F80(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_100156148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10015616C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) firstObject];
  uint64_t v3 = [v2 photoLibrary];

  uint64_t v4 = objc_msgSend(v3, "vcp_description");
  os_log_type_t v5 = +[NSString stringWithFormat:@"[GalleryFace][%@]", v4];

  id v6 = [*(id *)(a1 + 32) count];
  int v7 = MediaAnalysisLogLevel();
  if (v6)
  {
    if (v7 >= 6)
    {
      uint64_t v8 = VCPLogInstance();
      os_log_type_t v9 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v8, v9))
      {
        id v10 = [*(id *)(a1 + 32) count];
        *(_DWORD *)long long buf = 138412546;
        id v35 = v5;
        __int16 v36 = 2048;
        id v37 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "%@ Preparing to add %lu faces to Gallery", buf, 0x16u);
      }
    }
    uint64_t v11 = +[NSMutableArray array];
    if (![*(id *)(a1 + 32) count])
    {
LABEL_12:
      if ([v11 count])
      {
        uint64_t v20 = *(void **)(a1 + 40);
        uint64_t v21 = *(void *)(a1 + 48);
        uint64_t v22 = *(void *)(a1 + 56);
        uint64_t v23 = *(void *)(*(void *)(a1 + 64) + 8);
        id v32 = *(id *)(v23 + 40);
        unsigned __int8 v24 = [v20 _addFacesWithFaceBatch:v11 gallery:v21 cancelOrExtendTimeoutBlock:v22 error:&v32];
        objc_storeStrong((id *)(v23 + 40), v32);
        if ((v24 & 1) == 0)
        {
          if ((int)MediaAnalysisLogLevel() >= 3)
          {
            uint64_t v26 = VCPLogInstance();
            os_log_type_t v27 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v26, v27))
            {
              id v28 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
              *(_DWORD *)long long buf = 138412546;
              id v35 = v5;
              __int16 v36 = 2112;
              id v37 = v28;
              _os_log_impl((void *)&_mh_execute_header, v26, v27, "%@ Failed to add faces (last batch) to Gallery - %@", buf, 0x16u);
            }
          }
          goto LABEL_28;
        }
        [v11 removeAllObjects];
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
      goto LABEL_28;
    }
    uint64_t v12 = 0;
    while (1)
    {
      id v14 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v12];
      [v11 addObject:v14];

      if ((unint64_t)[v11 count] >= 0x3E9)
      {
        id v15 = *(void **)(a1 + 40);
        uint64_t v16 = *(void *)(a1 + 48);
        uint64_t v17 = *(void *)(a1 + 56);
        uint64_t v18 = *(void *)(*(void *)(a1 + 64) + 8);
        id obj = *(id *)(v18 + 40);
        unsigned __int8 v19 = [v15 _addFacesWithFaceBatch:v11 gallery:v16 cancelOrExtendTimeoutBlock:v17 error:&obj];
        objc_storeStrong((id *)(v18 + 40), obj);
        if ((v19 & 1) == 0)
        {
          if ((int)MediaAnalysisLogLevel() >= 3)
          {
            __int16 v29 = VCPLogInstance();
            os_log_type_t v30 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v29, v30))
            {
              id v31 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
              *(_DWORD *)long long buf = 138412546;
              id v35 = v5;
              __int16 v36 = 2112;
              id v37 = v31;
              _os_log_impl((void *)&_mh_execute_header, v29, v30, "%@ Failed to add faces to Gallery - %@", buf, 0x16u);
            }
          }
          goto LABEL_28;
        }
        [v11 removeAllObjects];
      }
      if (++v12 >= (unint64_t)[*(id *)(a1 + 32) count]) {
        goto LABEL_12;
      }
    }
  }
  if (v7 >= 7)
  {
    uint64_t v11 = VCPLogInstance();
    os_log_type_t v25 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v11, v25))
    {
      *(_DWORD *)long long buf = 138412290;
      id v35 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, v25, "%@ No face to add to Gallery; skip", buf, 0xCu);
    }
LABEL_28:
  }
}

void sub_100156644(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100156850;
    v11[3] = &unk_10021EC08;
    id v12 = *(id *)(a1 + 32);
    uint64_t v2 = objc_retainBlock(v11);
    uint64_t v3 = *(void **)(a1 + 40);
    id v10 = 0;
    unsigned __int8 v4 = [v3 mutateAndReturnError:&v10 handler:v2];
    id v5 = v10;
    if (v4)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        uint64_t v8 = VCPLogInstance();
        os_log_type_t v9 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v8, v9))
        {
          *(_DWORD *)long long buf = 138412290;
          id v14 = v5;
          _os_log_impl((void *)&_mh_execute_header, v8, v9, "[GalleryFace] Failed to delete faces from Gallery %@", buf, 0xCu);
        }
      }
      if (*(void *)(a1 + 56)) {
        **(void **)(a1 + 56) = [v5 copy];
      }
    }
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      id v6 = VCPLogInstance();
      os_log_type_t v7 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v6, v7))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "[GalleryFace] No face to remove to Gallery; skip", buf, 2u);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
}

uint64_t sub_100156850(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v19 = a1;
  +[PHAsset uuidsFromLocalIdentifiers:*(void *)(a1 + 32)];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v4 = [obj countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)v24;
    os_log_type_t type = VCPLogToOSLogType[3];
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v24 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void *)(*((void *)&v23 + 1) + 8 * i);
        id v11 = [objc_alloc((Class)NSUUID) initWithUUIDString:v9];
        id v22 = 0;
        unsigned int v12 = [v3 removeWithAsset:v11 error:&v22];
        id v13 = v22;

        if (v12)
        {
          ++v6;
        }
        else if ((int)MediaAnalysisLogLevel() >= 3)
        {
          id v14 = VCPLogInstance();
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)long long buf = 138412546;
            uint64_t v28 = v9;
            __int16 v29 = 2112;
            id v30 = v13;
            _os_log_impl((void *)&_mh_execute_header, v14, type, "[GalleryFace] Failed to remove observations with asset (uuid:%@) from Gallery - %@; ignore",
              buf,
              0x16u);
          }
        }
      }
      id v5 = [obj countByEnumeratingWithState:&v23 objects:v31 count:16];
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 0;
  }

  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v15 = VCPLogInstance();
    os_log_type_t v16 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = [*(id *)(v19 + 32) count];
      *(_DWORD *)long long buf = 134218240;
      uint64_t v28 = v6;
      __int16 v29 = 2048;
      id v30 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "[GalleryFace] Removed observation(s) with %lu (out of %lu) asset(s) from Gallery", buf, 0x16u);
    }
  }
  return 0;
}

void sub_100157284(uint64_t a1)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v14 objects:v22 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v15;
    os_log_type_t v7 = VCPLogToOSLogType[6];
    *(void *)&long long v4 = 138412546;
    long long v13 = v4;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v9 = *(void *)(*((void *)&v14 + 1) + 8 * (void)v8);
        if ((int)MediaAnalysisLogLevel() >= 6)
        {
          id v10 = VCPLogInstance();
          if (os_log_type_enabled(v10, v7))
          {
            uint64_t v11 = *(void *)(a1 + 40);
            *(_DWORD *)long long buf = v13;
            uint64_t v19 = v11;
            __int16 v20 = 2112;
            uint64_t v21 = v9;
            _os_log_impl((void *)&_mh_execute_header, v10, v7, "[VUDedupe] Dedupping graph-verified persons %@ for user-verified person %@", buf, 0x16u);
          }
        }
        id v12 = +[PHPersonChangeRequest changeRequestForDedupingGraphPersons:withUserVerifiedPerson:](PHPersonChangeRequest, "changeRequestForDedupingGraphPersons:withUserVerifiedPerson:", *(void *)(a1 + 40), v9, v13, (void)v14);
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v5 != v8);
      id v5 = [v2 countByEnumeratingWithState:&v14 objects:v22 count:16];
    }
    while (v5);
  }
}

id sub_100157420(uint64_t a1)
{
  return +[PHPersonChangeRequest changeRequestForDedupingGraphPersons:*(void *)(a1 + 32)];
}

void sub_100157638(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 96);
  if (!v1 || !(*(unsigned int (**)(void))(v1 + 16))())
  {
    v189 = [*(id *)(a1 + 32) stringValue];
    id v2 = *(void **)(a1 + 40);
    id v3 = [sub_10015968C() person];
    LODWORD(v2) = [v2 isEqual:v3];

    CFStringRef v4 = @"Animal";
    int v186 = (int)v2;
    if (v2) {
      CFStringRef v4 = @"Human";
    }
    double v190 = +[NSString stringWithFormat:@"[GalleryUpdate][%@][%@]", v4, v189];
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      id v5 = VCPLogInstance();
      os_log_type_t v6 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v5, v6))
      {
        os_log_type_t v7 = [*(id *)(a1 + 48) count];
        *(_DWORD *)long long buf = 138412546;
        id v244 = v190;
        __int16 v245 = 2048;
        v246 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "%@ Updating Photos with %lu face observations ... ", buf, 0x16u);
      }
    }
    id v185 = [objc_alloc((Class)VCPPhotosPersistenceDelegate) initWithPhotoLibrary:*(void *)(a1 + 56)];
    os_log_type_t v192 = objc_msgSend(*(id *)(a1 + 56), "mad_allPersonsFetchOptions");
    if (v186) {
      uint64_t v8 = &off_100230728;
    }
    else {
      uint64_t v8 = &off_100230740;
    }
    [v192 setIncludedDetectionTypes:v8];
    uint64_t v9 = +[NSPredicate predicateWithFormat:@"verifiedType != %ld", -2];
    [v192 setPredicate:v9];

    v254 = v189;
    id v10 = +[NSArray arrayWithObjects:&v254 count:1];
    v188 = +[PHPerson fetchPersonsWithMdIDs:v10 options:v192];

    v191 = [v188 firstObject];
    if ((unint64_t)[v188 count] >= 2 && (int)MediaAnalysisLogLevel() >= 3)
    {
      uint64_t v11 = VCPLogInstance();
      os_log_type_t v12 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v11, v12))
      {
        long long v13 = [v188 count];
        long long v14 = [v191 localIdentifier];
        *(_DWORD *)long long buf = 138413058;
        id v244 = v190;
        __int16 v245 = 2048;
        v246 = v13;
        __int16 v247 = 2112;
        v248 = v188;
        __int16 v249 = 2112;
        v250 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "%@ Photos has %lu connected person %@; prefer first %@",
          buf,
          0x2Au);
      }
    }
    id v15 = *(id *)(a1 + 64);
    if (v15) {
      goto LABEL_48;
    }
    v183 = objc_msgSend(*(id *)(a1 + 56), "mad_allFacesFetchOptions");
    id v181 = +[PHFace fetchFacesWithVuObservationIDs:*(void *)(a1 + 48) options:v183];
    v178 = [*(id *)(a1 + 56) librarySpecificFetchOptions];
    uint64_t v176 = +[PHFaceCrop fetchFaceCropByFaceLocalIdentifierForFaces:v181 fetchOptions:v178];
    long long v16 = +[NSMutableSet set];
    os_log_t oslog = +[NSMutableSet set];
    [v176 allValues];
    long long v230 = 0u;
    long long v231 = 0u;
    long long v228 = 0u;
    long long v229 = 0u;
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    id v18 = [v17 countByEnumeratingWithState:&v228 objects:v253 count:16];
    if (!v18) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)v229;
    while (1)
    {
      for (unint64_t i = 0; i != v18; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v229 != v19) {
          objc_enumerationMutation(v17);
        }
        uint64_t v21 = *(void **)(*((void *)&v228 + 1) + 8 * i);
        if ([v21 type] == 1)
        {
          long long v23 = objc_msgSend(*(id *)(a1 + 56), "mad_allPersonsFetchOptions");
          long long v24 = +[PHPerson fetchPersonForFaceCrop:v21 options:v23];
          if ([v24 count])
          {
            long long v25 = [v24 firstObject];
            if ([v25 verifiedType] == (id)1)
            {
              long long v26 = [v25 localIdentifier];
              [v16 addObject:v26];
              goto LABEL_31;
            }
            if ([v25 verifiedType] == (id)2)
            {
              long long v26 = [v25 localIdentifier];
              [oslog addObject:v26];
LABEL_31:
            }
          }
        }
      }
      id v18 = [v17 countByEnumeratingWithState:&v228 objects:v253 count:16];
      if (!v18)
      {
LABEL_36:

        v226[0] = _NSConcreteStackBlock;
        v226[1] = 3221225472;
        v226[2] = sub_100159770;
        v226[3] = &unk_10021EC58;
        id v27 = v190;
        id v227 = v27;
        [v16 enumerateObjectsUsingBlock:v226];
        v224[0] = _NSConcreteStackBlock;
        v224[1] = 3221225472;
        v224[2] = sub_100159850;
        v224[3] = &unk_10021EC58;
        id v28 = v27;
        id v225 = v28;
        [oslog enumerateObjectsUsingBlock:v224];
        if ([v16 count])
        {
          __int16 v29 = [v16 anyObject];
          uint64_t v30 = +[PHPerson uuidFromLocalIdentifier:v29];
          goto LABEL_40;
        }
        if (oslog)
        {
          __int16 v29 = [oslog anyObject];
          uint64_t v30 = +[PHPerson uuidFromLocalIdentifier:v29];
LABEL_40:
          id v31 = v30;

          if (v31)
          {
            id v32 = [objc_alloc((Class)NSUUID) initWithUUIDString:v31];
            if ((int)MediaAnalysisLogLevel() >= 3)
            {
              uint64_t v33 = VCPLogInstance();
              os_log_type_t v34 = VCPLogToOSLogType[3];
              if (os_log_type_enabled(v33, v34))
              {
                *(_DWORD *)long long buf = 138412546;
                id v244 = v28;
                __int16 v245 = 2112;
                v246 = v31;
                _os_log_impl((void *)&_mh_execute_header, v33, v34, "%@ VU does not provide a tag, but observations contain tagged person %@, MAD will use it", buf, 0x16u);
              }
            }
LABEL_47:

            id v15 = v32;
            if (!v32)
            {
              v184 = 0;
              goto LABEL_60;
            }
LABEL_48:
            v184 = v15;
            id v35 = [v15 UUIDString];
            __int16 v36 = +[PHPerson localIdentifierWithUUID:v35];

            if (!v191)
            {
              v241 = v36;
              VNAnimalIdentifier v48 = +[NSArray arrayWithObjects:&v241 count:1];
              id v49 = +[PHPerson fetchPersonsWithLocalIdentifiers:v48 options:v192];
              id v50 = [v49 firstObject];

              if (v50)
              {
                id v47 = v50;
LABEL_58:
                v191 = v47;

                goto LABEL_59;
              }
              if ((int)MediaAnalysisLogLevel() >= 3)
              {
                os_log_t osloga = VCPLogInstance();
                os_log_type_t v130 = VCPLogToOSLogType[3];
                uint64_t v131 = osloga;
                if (os_log_type_enabled(osloga, v130))
                {
LABEL_174:
                  *(_DWORD *)long long buf = 138412546;
                  id v244 = v190;
                  __int16 v245 = 2112;
                  v246 = v36;
                  _os_log_impl((void *)&_mh_execute_header, v131, v130, "%@ tagged Person (%@) does not exist!", buf, 0x16u);
                }
LABEL_165:
              }
LABEL_166:

              goto LABEL_167;
            }
            id v37 = [v191 localIdentifier];
            unsigned __int8 v38 = [v37 isEqualToString:v36];

            if ((v38 & 1) == 0)
            {
              if ((int)MediaAnalysisLogLevel() >= 5)
              {
                uint64_t v39 = VCPLogInstance();
                os_log_type_t v40 = VCPLogToOSLogType[5];
                if (os_log_type_enabled(v39, v40))
                {
                  os_log_type_t v41 = [v191 localIdentifier];
                  __int16 v42 = [v191 localIdentifier];
                  *(_DWORD *)long long buf = 138413314;
                  id v244 = v190;
                  __int16 v245 = 2112;
                  v246 = v41;
                  __int16 v247 = 2112;
                  v248 = v36;
                  __int16 v249 = 2112;
                  v250 = v42;
                  __int16 v251 = 2112;
                  v252 = v36;
                  _os_log_impl((void *)&_mh_execute_header, v39, v40, "%@ mdID Person (%@) is not tagged person (%@); Merge %@ to %@",
                    buf,
                    0x34u);
                }
              }
              os_log_type_t v242 = v36;
              id v43 = +[NSArray arrayWithObjects:&v242 count:1];
              uint64_t v44 = +[PHPerson fetchPersonsWithLocalIdentifiers:v43 options:v192];
              uint64_t v45 = [v44 firstObject];

              if (v45)
              {
                id v46 = v45;

                id v47 = v46;
                goto LABEL_58;
              }
              if ((int)MediaAnalysisLogLevel() >= 3)
              {
                os_log_t osloga = VCPLogInstance();
                os_log_type_t v130 = VCPLogToOSLogType[3];
                uint64_t v131 = osloga;
                if (os_log_type_enabled(osloga, v130)) {
                  goto LABEL_174;
                }
                goto LABEL_165;
              }
              goto LABEL_166;
            }
LABEL_59:

LABEL_60:
            __int16 v36 = objc_msgSend(*(id *)(a1 + 56), "mad_allFacesFetchOptions");
            double v51 = +[NSPredicate predicateWithFormat:@"nameSource != %ld", 3];
            [v36 setInternalPredicate:v51];

            os_log_t osloga = [v36 copy];
            [osloga setShouldPrefetchCount:1];
            if (v186) {
              id v52 = &off_100230758;
            }
            else {
              id v52 = &off_100230770;
            }
            [v36 setIncludedDetectionTypes:v52];
            double v53 = +[PHFace fetchFacesWithVuObservationIDs:*(void *)(a1 + 48) options:v36];
            if (![v53 count])
            {
              if ((int)MediaAnalysisLogLevel() >= 4)
              {
                id v60 = VCPLogInstance();
                os_log_type_t v61 = VCPLogToOSLogType[4];
                if (os_log_type_enabled(v60, v61))
                {
                  unsigned int v62 = [*(id *)(a1 + 48) count];
                  *(_DWORD *)long long buf = 138412546;
                  id v244 = v190;
                  __int16 v245 = 2048;
                  v246 = v62;
                  _os_log_impl((void *)&_mh_execute_header, v60, v61, "%@ Failed to fetched face (expected: %lu)", buf, 0x16u);
                }
                goto LABEL_163;
              }
LABEL_164:

              goto LABEL_165;
            }
            id v54 = [v53 count];
            if (v54 != [*(id *)(a1 + 48) count] && (int)MediaAnalysisLogLevel() >= 4)
            {
              id v55 = VCPLogInstance();
              os_log_type_t v56 = VCPLogToOSLogType[4];
              if (os_log_type_enabled(v55, v56))
              {
                double v57 = [v53 count];
                id v58 = [*(id *)(a1 + 48) count];
                *(_DWORD *)long long buf = 138412802;
                id v244 = v190;
                __int16 v245 = 2048;
                v246 = v57;
                __int16 v247 = 2048;
                v248 = v58;
                _os_log_impl((void *)&_mh_execute_header, v55, v56, "%@ Fetched %lu faces (expected: %lu); ignoring missed faces",
                  buf,
                  0x20u);
              }
            }
            if (v186)
            {
              __int16 v59 = 1;
              goto LABEL_94;
            }
            long long v222 = 0u;
            long long v223 = 0u;
            long long v220 = 0u;
            long long v221 = 0u;
            id v63 = v53;
            unsigned int v64 = 0;
            __int16 v65 = 0;
            id v66 = [v63 countByEnumeratingWithState:&v220 objects:v240 count:16];
            if (v66)
            {
              uint64_t v67 = *(void *)v221;
              do
              {
                for (unint64_t j = 0; j != v66; unint64_t j = (char *)j + 1)
                {
                  if (*(void *)v221 != v67) {
                    objc_enumerationMutation(v63);
                  }
                  unsigned int v69 = *(void **)(*((void *)&v220 + 1) + 8 * (void)j);
                  if ([v69 detectionType] == 3)
                  {
                    __int16 v65 = ((char *)v65 + 1);
                  }
                  else if ([v69 detectionType] == 4)
                  {
                    unsigned int v64 = ((char *)v64 + 1);
                  }
                }
                id v66 = [v63 countByEnumeratingWithState:&v220 objects:v240 count:16];
              }
              while (v66);
            }

            if ((int)MediaAnalysisLogLevel() >= 6)
            {
              unsigned __int8 v70 = VCPLogInstance();
              os_log_type_t v71 = VCPLogToOSLogType[6];
              if (os_log_type_enabled(v70, v71))
              {
                *(_DWORD *)long long buf = 138412802;
                id v244 = v190;
                __int16 v245 = 2048;
                v246 = v65;
                __int16 v247 = 2048;
                v248 = v64;
                _os_log_impl((void *)&_mh_execute_header, v70, v71, "%@ Count observations when fetching faces: Dog: %lu, Cat: %lu", buf, 0x20u);
              }
            }
            if (v65 > v64)
            {
              __int16 v59 = 3;
              goto LABEL_94;
            }
            if (v65 >= v64)
            {
              uint64_t v209 = 0;
              uint64_t v132 = *(void **)(a1 + 72);
              uint64_t v133 = *(void *)(a1 + 32);
              id v219 = 0;
              unsigned int v134 = [v132 keyObservationFor:v133 output:&v209 error:&v219];
              uint64_t v135 = v219;
              if (v134)
              {
                v136 = +[NSNumber numberWithInteger:v209];
                v239 = v136;
                uint64_t v137 = +[NSArray arrayWithObjects:&v239 count:1];
                v138 = +[PHFace fetchFacesWithVuObservationIDs:v137 options:v36];
                int v139 = [v138 firstObject];

                if (v139)
                {
                  unsigned __int16 v179 = (unsigned __int16)[v139 detectionType];
                }
                else
                {
                  if ((int)MediaAnalysisLogLevel() >= 3)
                  {
                    os_log_type_t v152 = VCPLogInstance();
                    os_log_type_t v153 = VCPLogToOSLogType[3];
                    if (os_log_type_enabled(v152, v153))
                    {
                      *(_DWORD *)long long buf = 138412290;
                      id v244 = v190;
                      _os_log_impl((void *)&_mh_execute_header, v152, v153, "%@ Failed to fetch key face from Photos DB.Use detection type from the first observation IDs in fetchedFacesWithObservationIDs", buf, 0xCu);
                    }
                  }
                  uint64_t v154 = [v63 firstObject];
                  unsigned __int16 v179 = (unsigned __int16)[v154 detectionType];
                }
              }
              else
              {
                if ((int)MediaAnalysisLogLevel() >= 3)
                {
                  uint64_t v140 = VCPLogInstance();
                  os_log_type_t v141 = VCPLogToOSLogType[3];
                  if (os_log_type_enabled(v140, v141))
                  {
                    *(_DWORD *)long long buf = 138412546;
                    id v244 = v190;
                    __int16 v245 = 2112;
                    v246 = v135;
                    _os_log_impl((void *)&_mh_execute_header, v140, v141, "%@ Failed to get key observation from VU with error: %@.Use detection type from the first observation IDs in fetchedFacesWithObservationIDs", buf, 0x16u);
                  }
                }
                int v139 = [v63 firstObject];
                unsigned __int16 v179 = (unsigned __int16)[v139 detectionType];
              }
            }
            else
            {
              __int16 v59 = 4;
LABEL_94:
              unsigned __int16 v179 = v59;
            }
            id v60 = +[NSMutableArray array];
            if ([v53 count])
            {
              unint64_t v72 = 0;
              os_log_type_t v73 = VCPLogToOSLogType[3];
              do
              {
                uint64_t v75 = [v53 objectAtIndexedSubscript:v72];
                if ([v75 trainingType] != 5
                  && [v75 trainingType] != 1)
                {
                  goto LABEL_102;
                }
                uint64_t v76 = [v75 personLocalIdentifier];
                BOOL v77 = v76 == 0;

                if (v77)
                {
                  if ((int)MediaAnalysisLogLevel() < 3) {
                    goto LABEL_102;
                  }
                  long long v78 = VCPLogInstance();
                  if (os_log_type_enabled(v78, v73))
                  {
                    uint32_t v79 = [v75 localIdentifier];
                    *(_DWORD *)long long buf = 138412546;
                    id v244 = v190;
                    __int16 v245 = 2112;
                    v246 = v79;
                    _os_log_impl((void *)&_mh_execute_header, v78, v73, "%@ training face (%@) with no personLocalIdentifier; skipping",
                      buf,
                      0x16u);
                  }
                }
                else
                {
                  long long v78 = [v75 personLocalIdentifier];
                  [v60 addObject:v78];
                }

LABEL_102:
                ++v72;
              }
              while (v72 < (unint64_t)[v53 count]);
            }
            if ([v60 count])
            {
              uint64_t v80 = +[PHPerson fetchPersonsWithLocalIdentifiers:v60 options:v192];
              id v81 = [v80 count];
              if (v81 != [v60 count] && (int)MediaAnalysisLogLevel() >= 3)
              {
                uint64_t v82 = VCPLogInstance();
                os_log_type_t v83 = VCPLogToOSLogType[3];
                if (os_log_type_enabled(v82, v83))
                {
                  uint64_t v84 = [v80 count];
                  __int16 v85 = [v60 count];
                  *(_DWORD *)long long buf = 138412802;
                  id v244 = v190;
                  __int16 v245 = 2048;
                  v246 = v84;
                  __int16 v247 = 2048;
                  v248 = v85;
                  _os_log_impl((void *)&_mh_execute_header, v82, v83, "%@ Retrived %lu (out of %lu) tagged person to merge; ignoring missed person(s)",
                    buf,
                    0x20u);
                }
              }
            }
            else
            {
              uint64_t v80 = 0;
            }
            if ([v53 count])
            {
              id v86 = [v53 fetchedObjects];
              id v87 = +[NSSet setWithArray:v86];
            }
            else
            {
              id v86 = +[NSSet set];
              id v87 = v86;
            }

            os_log_type_t v187 = +[PHFace fetchFacesForPerson:v191 options:v36];
            if ([v187 count])
            {
              id v88 = [v187 fetchedObjects];
              id v182 = +[NSSet setWithArray:v88];
            }
            else
            {
              id v88 = +[NSSet set];
              id v182 = v88;
            }

            id v89 = [v87 mutableCopy];
            if ([*(id *)(a1 + 80) count])
            {
              uint64_t v90 = +[NSMutableSet set];
              v215[0] = _NSConcreteStackBlock;
              v215[1] = 3221225472;
              v215[2] = sub_100159930;
              v215[3] = &unk_10021EED8;
              id v216 = *(id *)(a1 + 80);
              id v91 = v90;
              id v217 = v91;
              id v218 = v190;
              [v89 enumerateObjectsUsingBlock:v215];
              [v89 minusSet:v91];
            }
            v92 = v191;
            if (v191)
            {
              [v89 minusSet:v182];
              v92 = v191;
            }
            uint64_t v209 = 0;
            BOOL v210 = &v209;
            uint64_t v211 = 0x3032000000;
            v212 = sub_10014CA6C;
            v213 = sub_10014CA7C;
            id v214 = [v92 localIdentifier];
            v201[0] = _NSConcreteStackBlock;
            v201[1] = 3221225472;
            v201[2] = sub_100159A60;
            v201[3] = &unk_10021EF00;
            id v93 = v191;
            id v202 = v93;
            id v94 = v189;
            id v203 = v94;
            id v207 = &v209;
            id v173 = v190;
            id v204 = v173;
            id v177 = v80;
            id v205 = v177;
            id v95 = v89;
            id v206 = v95;
            unsigned __int16 v208 = v179;
            v180 = objc_retainBlock(v201);
            id v96 = [v95 count];
            if (v191 && !v96)
            {
              uint64_t v97 = [v93 mdID];
              unsigned __int8 v98 = [v97 isEqualToString:v94];

              if (v98) {
                goto LABEL_127;
              }
LABEL_131:
              if ((int)MediaAnalysisLogLevel() >= 6)
              {
                os_log_type_t v102 = VCPLogInstance();
                os_log_type_t v103 = VCPLogToOSLogType[6];
                if (os_log_type_enabled(v102, v103))
                {
                  id v104 = v87;
                  v105 = v210[5];
                  os_log_type_t v106 = [v95 count];
                  id v107 = [v93 mdID];
                  *(_DWORD *)long long buf = 138413058;
                  id v244 = v173;
                  __int16 v245 = 2112;
                  v246 = v105;
                  __int16 v247 = 2048;
                  v248 = v106;
                  __int16 v249 = 2112;
                  v250 = v107;
                  _os_log_impl((void *)&_mh_execute_header, v102, v103, "%@ Person %@ (%lu faces) (%@) needs update", buf, 0x2Au);

                  id v87 = v104;
                }
              }
              v108 = *(void **)(a1 + 56);
              id v200 = 0;
              unsigned __int8 v109 = [v108 performChangesAndWait:v180 error:&v200];
              os_log_type_t v99 = v200;
              if (v109)
              {
LABEL_136:

                goto LABEL_137;
              }
              if ((int)MediaAnalysisLogLevel() >= 3)
              {
                id v125 = VCPLogInstance();
                os_log_type_t v126 = VCPLogToOSLogType[3];
                if (os_log_type_enabled(v125, v126))
                {
                  id v127 = v210[5];
                  *(_DWORD *)long long buf = 138412802;
                  id v244 = v173;
                  __int16 v245 = 2112;
                  v246 = v127;
                  __int16 v247 = 2112;
                  v248 = v99;
                  _os_log_impl((void *)&_mh_execute_header, v125, v126, "%@ Failed to update person %@ - %@", buf, 0x20u);
                }
              }
              if (*(void *)(a1 + 112))
              {
                NSErrorUserInfoKey v237 = NSLocalizedDescriptionKey;
                id v128 = +[NSString stringWithFormat:@"Failed to update person %@ - %@", v210[5], v99];
                v238 = v128;
                id v129 = +[NSDictionary dictionaryWithObjects:&v238 forKeys:&v237 count:1];
                **(void **)(a1 + 112) = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-18 userInfo:v129];
              }
LABEL_162:

              _Block_object_dispose(&v209, 8);
LABEL_163:

              goto LABEL_164;
            }
            if (v96) {
              goto LABEL_131;
            }
LABEL_127:
            if ((int)MediaAnalysisLogLevel() >= 7)
            {
              os_log_type_t v99 = VCPLogInstance();
              os_log_type_t v100 = VCPLogToOSLogType[7];
              if (os_log_type_enabled(v99, v100))
              {
                uint64_t v101 = v210[5];
                *(_DWORD *)long long buf = 138412546;
                id v244 = v173;
                __int16 v245 = 2112;
                v246 = v101;
                _os_log_impl((void *)&_mh_execute_header, v99, v100, "%@ Person %@ is up-to-date", buf, 0x16u);
              }
              goto LABEL_136;
            }
LABEL_137:
            uint64_t v110 = v210[5];
            if (!v110)
            {
LABEL_154:
              *(unsigned char *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = 1;
              goto LABEL_162;
            }
            [*(id *)(a1 + 88) _dedupeGraphVerifiedPersonsForPerson:v110 photoLibrary:*(void *)(a1 + 56)];
            uint64_t v171 = mach_absolute_time();
            v111 = VCPSignPostLog();
            os_signpost_id_t spid = os_signpost_id_generate(v111);

            os_signpost_id_t v112 = VCPSignPostLog();
            uint64_t v113 = v112;
            if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v112))
            {
              *(_WORD *)long long buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v113, OS_SIGNPOST_INTERVAL_BEGIN, spid, "GalleryUpdate_UpdateKeyface", (const char *)&unk_1001F3BD3, buf, 2u);
            }

            if ((int)MediaAnalysisLogLevel() >= 7)
            {
              os_log_type_t v114 = VCPLogInstance();
              os_log_type_t v115 = VCPLogToOSLogType[7];
              if (os_log_type_enabled(v114, v115))
              {
                v116 = v210[5];
                *(_DWORD *)long long buf = 138412546;
                id v244 = v173;
                __int16 v245 = 2112;
                v246 = v116;
                _os_log_impl((void *)&_mh_execute_header, v114, v115, "%@ Checking key face for person %@ ... ", buf, 0x16u);
              }
            }
            id v117 = [v192 copy];
            [v117 setIncludeTorsoOnlyPerson:0];
            uint64_t v172 = v117;
            uint64_t v236 = v210[5];
            os_log_type_t v118 = +[NSArray arrayWithObjects:&v236 count:1];
            v119 = +[PHPerson fetchPersonsWithLocalIdentifiers:v118 options:v117];
            v175 = [v119 firstObject];

            id v120 = objc_msgSend(*(id *)(a1 + 56), "mad_allFacesFetchOptions");
            [v120 setIncludeNonvisibleFaces:0];
            [v120 setFetchLimit:1];
            if (!v175
              || [v175 verifiedType]
              || (+[PHFace fetchKeyFaceForPerson:options:](PHFace, "fetchKeyFaceForPerson:options:", v175, v120), v121 = objc_claimAutoreleasedReturnValue(), BOOL v122 = [v121 count] == 0, v121, !v122))
            {
LABEL_148:
              os_log_type_t v123 = VCPSignPostLog();
              id v124 = v123;
              if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v123))
              {
                *(_WORD *)long long buf = 0;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v124, OS_SIGNPOST_INTERVAL_END, spid, "GalleryUpdate_UpdateKeyface", (const char *)&unk_1001F3BD3, buf, 2u);
              }

              if (v171)
              {
                mach_absolute_time();
                VCPPerformance_LogMeasurement();
              }

              goto LABEL_154;
            }
            v142 = [v185 bestRepresentativeFaceForPerson:v175 qualityMeasureByFace:0 candidateFaces:0 cancelOrExtendTimeoutBlock:*(void *)(a1 + 96)];
            if (v142)
            {
              v143 = *(void **)(a1 + 56);
              v197[0] = _NSConcreteStackBlock;
              v197[1] = 3221225472;
              v197[2] = sub_10015A058;
              v197[3] = &unk_100219D00;
              id v198 = v175;
              id v144 = v142;
              id v199 = v144;
              id v196 = 0;
              unsigned int v169 = [v143 performChangesAndWait:v197 error:&v196];
              os_log_type_t v168 = v196;
              if (v169)
              {
                if ((int)MediaAnalysisLogLevel() >= 7)
                {
                  uint64_t v145 = VCPLogInstance();
                  os_log_type_t v146 = VCPLogToOSLogType[7];
                  if (os_log_type_enabled(v145, v146))
                  {
                    v166 = [v144 localIdentifier];
                    int v147 = [v144 vuObservationID];
                    v148 = (void *)v210[5];
                    *(_DWORD *)long long buf = 138413058;
                    id v244 = v173;
                    __int16 v245 = 2112;
                    v246 = v166;
                    __int16 v247 = 2048;
                    v248 = v147;
                    __int16 v249 = 2112;
                    v250 = v148;
                    _os_log_impl((void *)&_mh_execute_header, v145, v146, "%@ Set key face %@-%ld for person %@", buf, 0x2Au);
                  }
                }
                os_log_type_t v149 = [v144 localIdentifier];

                if (v149)
                {
                  v150 = *(void **)(a1 + 80);
                  v151 = [v144 localIdentifier];
                  [v150 addObject:v151];
                  goto LABEL_209;
                }
              }
              else
              {
                if ((int)MediaAnalysisLogLevel() >= 3)
                {
                  os_log_type_t v160 = VCPLogInstance();
                  os_log_type_t v161 = VCPLogToOSLogType[3];
                  if (os_log_type_enabled(v160, v161))
                  {
                    unint64_t v167 = [v144 localIdentifier];
                    id v162 = [v144 vuObservationID];
                    v163 = (void *)v210[5];
                    *(_DWORD *)long long buf = 138413314;
                    id v244 = v173;
                    __int16 v245 = 2112;
                    v246 = v167;
                    __int16 v247 = 2048;
                    v248 = v162;
                    __int16 v249 = 2112;
                    v250 = v163;
                    __int16 v251 = 2112;
                    v252 = v168;
                    _os_log_impl((void *)&_mh_execute_header, v160, v161, "%@ Failed to set key face %@-%ld  for person %@ - %@", buf, 0x34u);
                  }
                }
                if (*(void *)(a1 + 112))
                {
                  NSErrorUserInfoKey v234 = NSLocalizedDescriptionKey;
                  v151 = [v144 localIdentifier];
                  id v164 = [v144 vuObservationID];
                  char v174 = +[NSString stringWithFormat:@"Failed to set key face %@-%ld for person %@ - %@", v151, v164, v210[5], v168];
                  id v235 = v174;
                  v165 = +[NSDictionary dictionaryWithObjects:&v235 forKeys:&v234 count:1];
                  **(void **)(a1 + 112) = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-18 userInfo:v165];

LABEL_209:
                }
              }

              if (v169) {
                goto LABEL_148;
              }
            }
            else
            {
              if ((int)MediaAnalysisLogLevel() >= 3)
              {
                os_log_type_t v155 = VCPLogInstance();
                os_log_type_t v156 = VCPLogToOSLogType[3];
                if (os_log_type_enabled(v155, v156))
                {
                  long long v157 = v210[5];
                  *(_DWORD *)long long buf = 138412546;
                  id v244 = v173;
                  __int16 v245 = 2112;
                  v246 = v157;
                  _os_log_impl((void *)&_mh_execute_header, v155, v156, "%@ Failed to load key face for person %@", buf, 0x16u);
                }
              }
              if (*(void *)(a1 + 112))
              {
                NSErrorUserInfoKey v232 = NSLocalizedDescriptionKey;
                os_log_type_t v158 = +[NSString stringWithFormat:@"Failed to load key face for person %@", v210[5]];
                v233 = v158;
                long long v159 = +[NSDictionary dictionaryWithObjects:&v233 forKeys:&v232 count:1];
                **(void **)(a1 + 112) = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-18 userInfo:v159];
              }
            }

            goto LABEL_162;
          }
        }
        else
        {
          id v31 = 0;
        }
        id v32 = 0;
        goto LABEL_47;
      }
    }
  }
  if (!*(void *)(a1 + 112)) {
    return;
  }
  NSErrorUserInfoKey v255 = NSLocalizedDescriptionKey;
  v189 = +[NSString stringWithFormat:@"Update person with photosLibrary cancelled ..."];
  v256 = v189;
  double v190 = +[NSDictionary dictionaryWithObjects:&v256 forKeys:&v255 count:1];
  **(void **)(a1 + 112) = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-128 userInfo:v190];
LABEL_167:
}

void sub_10015961C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

id sub_10015968C()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1002528A8;
  uint64_t v7 = qword_1002528A8;
  if (!qword_1002528A8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10015ACE0;
    v3[3] = &unk_10021EB68;
    v3[4] = &v4;
    sub_10015ACE0((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100159758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100159770(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ tagged person (user) %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_100159850(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ tagged person (graph) %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_100159930(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  os_log_type_t v5 = [v3 localIdentifier];
  LODWORD(v4) = [v4 containsObject:v5];

  if (v4)
  {
    [*(id *)(a1 + 40) addObject:v3];
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      uint64_t v6 = VCPLogInstance();
      os_log_type_t v7 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = *(void *)(a1 + 48);
        __int16 v9 = [v3 localIdentifier];
        int v10 = 138412546;
        uint64_t v11 = v8;
        __int16 v12 = 2112;
        long long v13 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "%@ Ignoring key face %@ from facesToAdd", (uint8_t *)&v10, 0x16u);
      }
    }
  }
}

void sub_100159A60(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  id v3 = VCPSignPostLog();
  os_signpost_id_t v4 = os_signpost_id_generate(v3);

  os_log_type_t v5 = VCPSignPostLog();
  uint64_t v6 = v5;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_BEGIN, v4, "GalleryUpdate_personChangeBlock", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  if (*(void *)(a1 + 32))
  {
    os_log_type_t v7 = +[PHPersonChangeRequest changeRequestForPerson:](PHPersonChangeRequest, "changeRequestForPerson:");
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      uint64_t v8 = VCPLogInstance();
      os_log_type_t v9 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = *(void *)(a1 + 48);
        uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v48 = v10;
        __int16 v49 = 2112;
        *(void *)id v50 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "%@ The person (%@) exists, updating ...", buf, 0x16u);
      }
    }
    __int16 v12 = [*(id *)(a1 + 32) mdID];
    unsigned __int8 v13 = [v12 isEqualToString:*(void *)(a1 + 40)];

    if ((v13 & 1) == 0)
    {
      if ((int)MediaAnalysisLogLevel() >= 3)
      {
        long long v14 = VCPLogInstance();
        os_log_type_t v15 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = *(void *)(a1 + 48);
          uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
          id v18 = [*(id *)(a1 + 32) mdID];
          uint64_t v19 = *(void **)(a1 + 40);
          *(_DWORD *)long long buf = 138413058;
          uint64_t v48 = v16;
          __int16 v49 = 2112;
          *(void *)id v50 = v17;
          *(_WORD *)&v50[8] = 2112;
          *(void *)&void v50[10] = v18;
          __int16 v51 = 2112;
          id v52 = v19;
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "%@ Person %@:%@ mismatches %@; update Photos with mdID",
            buf,
            0x2Au);
        }
      }
      [v7 setMdID:*(void *)(a1 + 40)];
    }
    if ([*(id *)(a1 + 56) count])
    {
      if ((int)MediaAnalysisLogLevel() >= 6)
      {
        __int16 v20 = VCPLogInstance();
        os_log_type_t v21 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v46 = *(void *)(a1 + 48);
          id v22 = [*(id *)(a1 + 56) count];
          long long v23 = [*(id *)(a1 + 32) localIdentifier];
          long long v24 = [*(id *)(a1 + 32) mdID];
          id v25 = [*(id *)(a1 + 32) verifiedType];
          *(_DWORD *)long long buf = 138413314;
          uint64_t v48 = v46;
          __int16 v49 = 2048;
          *(void *)id v50 = v22;
          *(_WORD *)&v50[8] = 2112;
          *(void *)&void v50[10] = v23;
          __int16 v51 = 2112;
          id v52 = v24;
          __int16 v53 = 2048;
          id v54 = v25;
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "%@ Merging %lu persons to person %@(%@)(VerifyType-%ld)", buf, 0x34u);
        }
      }
      [v7 mergePersons:*(void *)(a1 + 56)];
    }
  }
  else
  {
    os_log_type_t v7 = +[PHPersonChangeRequest creationRequestForPerson];
    [v7 setMdID:*(void *)(a1 + 40)];
    [v7 setVerifiedType:0];
    long long v26 = [v7 placeholderForCreatedPerson];
    uint64_t v27 = [v26 localIdentifier];
    uint64_t v28 = *(void *)(*(void *)(a1 + 72) + 8);
    __int16 v29 = *(void **)(v28 + 40);
    *(void *)(v28 + 40) = v27;

    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      uint64_t v30 = VCPLogInstance();
      os_log_type_t v31 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = *(void *)(a1 + 48);
        uint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v48 = v32;
        __int16 v49 = 2112;
        *(void *)id v50 = v33;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "%@ Creating new person (%@)", buf, 0x16u);
      }
    }
  }
  if ([*(id *)(a1 + 64) count]) {
    [v7 addFaces:*(void *)(a1 + 64)];
  }
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    os_log_type_t v34 = VCPLogInstance();
    os_log_type_t v35 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = *(void *)(a1 + 48);
      id v37 = [*(id *)(a1 + 64) count];
      uint64_t v38 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
      *(_DWORD *)long long buf = 138412802;
      uint64_t v48 = v36;
      __int16 v49 = 2048;
      *(void *)id v50 = v37;
      *(_WORD *)&v50[8] = 2112;
      *(void *)&void v50[10] = v38;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "%@ Add %lu faces for the person (%@)", buf, 0x20u);
    }
  }
  [v7 setDetectionType:*(__int16 *)(a1 + 80)];
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v39 = VCPLogInstance();
    os_log_type_t v40 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = *(void *)(a1 + 48);
      unsigned int v42 = [v7 detectionType];
      uint64_t v43 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
      *(_DWORD *)long long buf = 138412802;
      uint64_t v48 = v41;
      __int16 v49 = 1024;
      *(_DWORD *)id v50 = v42;
      *(_WORD *)&v50[4] = 2112;
      *(void *)&v50[6] = v43;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "%@ Set detectionType = %d for this person (%@)", buf, 0x1Cu);
    }
  }
  uint64_t v44 = VCPSignPostLog();
  uint64_t v45 = v44;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v44))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v45, OS_SIGNPOST_INTERVAL_END, v4, "GalleryUpdate_personChangeBlock", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  if (v2)
  {
    mach_absolute_time();
    VCPPerformance_LogMeasurement();
  }
}

void sub_10015A058(uint64_t a1)
{
  id v2 = +[PHPersonChangeRequest changeRequestForPerson:*(void *)(a1 + 32)];
  [v2 setKeyFace:*(void *)(a1 + 40) forCluster:0];
}

void sub_10015A250(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && (*(unsigned int (**)(void))(v2 + 16))())
  {
    if (!*(void *)(a1 + 88)) {
      return;
    }
    NSErrorUserInfoKey v48 = NSLocalizedDescriptionKey;
    id v3 = +[NSString stringWithFormat:@"Update person with photosLibrary cancelled ..."];
    __int16 v49 = v3;
    os_signpost_id_t v4 = +[NSDictionary dictionaryWithObjects:&v49 forKeys:&v48 count:1];
    **(void **)(a1 + 8_Block_object_dispose(&STACK[0x410], 8) = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-128 userInfo:v4];
  }
  else
  {
    id v3 = [*(id *)(a1 + 32) stringValue];
    os_log_type_t v5 = *(void **)(a1 + 40);
    uint64_t v6 = [sub_10015968C() person];
    LODWORD(v5) = [v5 isEqual:v6];

    CFStringRef v7 = @"Animal";
    if (v5) {
      CFStringRef v7 = @"Human";
    }
    os_signpost_id_t v4 = +[NSString stringWithFormat:@"[GalleryUpdateSyndication][%@][%@]", v7, v3];
    if (*(void *)(a1 + 48))
    {
      uint64_t v8 = objc_msgSend(*(id *)(a1 + 64), "mad_allFacesFetchOptions");
      os_log_type_t v9 = +[PHFace fetchFacesWithVuObservationIDs:*(void *)(a1 + 56) options:v8];
      id v10 = [v9 count];
      if (v10 != [*(id *)(a1 + 56) count] && (int)MediaAnalysisLogLevel() >= 6)
      {
        uint64_t v11 = VCPLogInstance();
        os_log_type_t v12 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v11, v12))
        {
          id v13 = [v9 count];
          id v14 = [*(id *)(a1 + 56) count];
          uint64_t v15 = *(void *)(a1 + 48);
          *(_DWORD *)long long buf = 138413314;
          uint64_t v39 = v4;
          __int16 v40 = 2048;
          id v41 = v13;
          __int16 v42 = 2048;
          id v43 = v14;
          __int16 v44 = 2112;
          uint64_t v45 = v3;
          __int16 v46 = 2112;
          uint64_t v47 = v15;
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "%@ Fetched %lu faces (expected %lu) for entity %@ (%@)", buf, 0x34u);
        }
      }
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472;
      v33[2] = sub_10015A7B8;
      v33[3] = &unk_100219D00;
      id v16 = v9;
      id v34 = v16;
      id v35 = *(id *)(a1 + 48);
      uint64_t v17 = objc_retainBlock(v33);
      id v18 = *(void **)(a1 + 64);
      id v32 = 0;
      unsigned int v19 = [v18 performChangesAndWait:v17 error:&v32];
      id v20 = v32;
      int v21 = MediaAnalysisLogLevel();
      if (v19)
      {
        if (v21 >= 6)
        {
          id v22 = VCPLogInstance();
          os_log_type_t v23 = VCPLogToOSLogType[6];
          if (os_log_type_enabled(v22, v23))
          {
            *(_DWORD *)long long buf = 138412290;
            uint64_t v39 = v4;
            _os_log_impl((void *)&_mh_execute_header, v22, v23, "%@ Successfully persisted identification results", buf, 0xCu);
          }
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
      }
      else
      {
        if (v21 >= 3)
        {
          uint64_t v27 = VCPLogInstance();
          os_log_type_t v28 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v27, v28))
          {
            *(_DWORD *)long long buf = 138412546;
            uint64_t v39 = v4;
            __int16 v40 = 2112;
            id v41 = v20;
            _os_log_impl((void *)&_mh_execute_header, v27, v28, "%@ Failed to persist identification results - %@", buf, 0x16u);
          }
        }
        if (*(void *)(a1 + 88))
        {
          NSErrorUserInfoKey v36 = NSLocalizedDescriptionKey;
          +[NSString stringWithFormat:@"Failed to update face to person %@ in Syndicatin Library - %@", *(void *)(a1 + 48), v20];
          v29 = os_log_type_t v31 = v8;
          id v37 = v29;
          uint64_t v30 = +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];
          **(void **)(a1 + 8_Block_object_dispose(&STACK[0x410], 8) = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-18 userInfo:v30];

          uint64_t v8 = v31;
        }
      }
    }
    else
    {
      if ((int)MediaAnalysisLogLevel() >= 6)
      {
        long long v24 = VCPLogInstance();
        os_log_type_t v25 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v24, v25))
        {
          id v26 = [*(id *)(a1 + 56) count];
          *(_DWORD *)long long buf = 138412802;
          uint64_t v39 = v4;
          __int16 v40 = 2048;
          id v41 = v26;
          __int16 v42 = 2112;
          id v43 = v3;
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "%@ %lu faces in Syndication clustered to entity %@ without tag; Ignoring",
            buf,
            0x20u);
        }
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
    }
  }
}

id sub_10015A7B8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) count];
  if (result)
  {
    for (unint64_t i = 0; i < (unint64_t)result; ++i)
    {
      os_log_type_t v5 = [*(id *)(a1 + 32) objectAtIndexedSubscript:i];
      uint64_t v6 = +[PHFaceChangeRequest changeRequestForFace:v5];
      CFStringRef v7 = [*(id *)(a1 + 40) UUIDString];
      [v6 associateFaceWithPersonUUID:v7];

      [v6 setNameSource:6];
      id result = [*(id *)(a1 + 32) count];
    }
  }
  return result;
}

void sub_10015AB18(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("GDVUContext");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252898 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_10014634C();
    sub_10015AB70();
  }
}

void sub_10015AB70()
{
  v1[0] = 0;
  if (!qword_1002528A0)
  {
    v1[1] = _NSConcreteStackBlock;
    v1[2] = 3221225472;
    v1[3] = sub_10015AC6C;
    v1[4] = &unk_100219838;
    v1[5] = v1;
    long long v2 = off_10021EF70;
    uint64_t v3 = 0;
    qword_1002528A0 = _sl_dlopen();
  }
  uint64_t v0 = (void *)v1[0];
  if (!qword_1002528A0)
  {
    uint64_t v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_10015AC6C()
{
  uint64_t result = _sl_dlopen();
  qword_1002528A0 = result;
  return result;
}

Class sub_10015ACE0(uint64_t a1)
{
  sub_10015AB70();
  Class result = objc_getClass("GDVUEntityClass");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1002528A8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_10015AD38();
    return (Class)sub_10015AD38();
  }
  return result;
}

id sub_10015AD38()
{
  uint64_t v0 = (void *)abort_report_np();
  return +[VCPResumePausedAnalysisTask taskWithPhotoLibrary:v2];
}

void sub_10015ADB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015B7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10015B8C8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10015B8D8(uint64_t a1)
{
}

void sub_10015B8E0(void *a1)
{
  id v2 = (void *)a1[4];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10015B980;
  v6[3] = &unk_100219D98;
  v6[4] = a1[5];
  uint64_t v3 = [v2 analyzeAsset:v6 streamed:0];
  uint64_t v4 = *(void *)(a1[6] + 8);
  os_log_type_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

uint64_t sub_10015B980(uint64_t a1)
{
  id v2 = +[VCPWatchdog sharedWatchdog];
  [v2 pet];

  uint64_t v3 = [*(id *)(a1 + 32) cancel];
  uint64_t v4 = v3[2]();

  return v4;
}

void sub_10015B9E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10015B9F8(uint64_t a1)
{
  SEL v1 = [*(id *)(a1 + 32) cancel];
  uint64_t v2 = v1[2]();

  return v2;
}

void sub_10015BA3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015CD2C()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  SEL v1 = (void *)qword_1002528B0;
  qword_1002528B0 = (uint64_t)v0;
}

void sub_10015CF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10015CF68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10015D7DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    [*(id *)(*(void *)(a1 + 32) + 16) addObject:v3];
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 24);
    os_log_type_t v5 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v3 taskID]);
    [v4 addObject:v5];
  }
  else if ((int)MediaAnalysisLogLevel() >= 4)
  {
    uint64_t v6 = VCPLogInstance();
    os_log_type_t v7 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = objc_opt_class();
      uint64_t v11 = a1 + 40;
      os_log_type_t v9 = *(void **)(a1 + 40);
      uint64_t v10 = *(void *)(v11 + 8);
      id v12 = v8;
      id v13 = [v9 photoLibraryURL];
      id v14 = [v13 path];
      int v15 = 138412802;
      id v16 = v8;
      __int16 v17 = 2048;
      uint64_t v18 = v10;
      __int16 v19 = 2112;
      id v20 = v14;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%@] Failed to create task provider (type %lu) for Library %@; skipping",
        (uint8_t *)&v15,
        0x20u);
    }
  }
}

int64_t sub_10015D968(id a1, MADTaskProvider *a2, MADTaskProvider *a3)
{
  uint64_t v4 = a2;
  os_log_type_t v5 = a3;
  id v6 = [(MADTaskProvider *)v4 priority];
  if (v6 > (id)[(MADTaskProvider *)v5 priority])
  {
LABEL_5:
    int64_t v8 = -1;
    goto LABEL_6;
  }
  id v7 = [(MADTaskProvider *)v4 priority];
  if (v7 >= (id)[(MADTaskProvider *)v5 priority])
  {
    id v9 = [(MADTaskProvider *)v4 iterations];
    if (v9 <= (id)[(MADTaskProvider *)v5 iterations])
    {
      id v11 = [(MADTaskProvider *)v4 iterations];
      int64_t v8 = v11 < (id)[(MADTaskProvider *)v5 iterations];
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int64_t v8 = 1;
LABEL_6:

  return v8;
}

void sub_10015DE00(uint64_t a1)
{
  uint64_t v2 = VCPSignPostLog();
  os_signpost_id_t v3 = os_signpost_id_generate(v2);

  uint64_t v4 = VCPSignPostLog();
  os_log_type_t v5 = v4;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_BEGIN, v3, "MADTaskCoordinator_Prepare", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  id v6 = +[MADStateHandler sharedStateHandler];
  id v7 = [*(id *)(a1 + 32) logDescription];
  [v6 addBreadcrumb:@"[%@] Preparing assets", v7];

  [*(id *)(a1 + 40) prepare];
  int64_t v8 = +[MADStateHandler sharedStateHandler];
  id v9 = [*(id *)(a1 + 32) logDescription];
  [v8 addBreadcrumb:@"[%@] Finished preparing assets", v9];

  uint64_t v10 = VCPSignPostLog();
  id v11 = v10;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_INTERVAL_END, v3, "MADTaskCoordinator_Prepare", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 80), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 72));
  dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 48) + 48));
  uint64_t v12 = *(void *)(a1 + 48);
  id v13 = *(NSObject **)(v12 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10015E340;
  block[3] = &unk_10021C738;
  void block[4] = v12;
  dispatch_async(v13, block);
  id v14 = VCPSignPostLog();
  os_signpost_id_t v15 = os_signpost_id_generate(v14);

  id v16 = VCPSignPostLog();
  __int16 v17 = v16;
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_INTERVAL_BEGIN, v15, "MADTaskCoordinator_Process", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  uint64_t v18 = +[MADStateHandler sharedStateHandler];
  __int16 v19 = [*(id *)(a1 + 32) logDescription];
  [v18 addBreadcrumb:@"[%@] Processing assets", v19];

  [*(id *)(a1 + 40) process];
  id v20 = +[MADStateHandler sharedStateHandler];
  int v21 = [*(id *)(a1 + 32) logDescription];
  [v20 addBreadcrumb:@"[%@] Finished processing assets", v21];

  id v22 = VCPSignPostLog();
  os_log_type_t v23 = v22;
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v22))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_INTERVAL_END, v15, "MADTaskCoordinator_Process", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 88), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 80));
  long long v24 = VCPSignPostLog();
  os_signpost_id_t v25 = os_signpost_id_generate(v24);

  id v26 = VCPSignPostLog();
  uint64_t v27 = v26;
  if (v25 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v26))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, OS_SIGNPOST_INTERVAL_BEGIN, v25, "MADTaskCoordinator_Publish", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  os_log_type_t v28 = +[MADStateHandler sharedStateHandler];
  __int16 v29 = [*(id *)(a1 + 32) logDescription];
  [v28 addBreadcrumb:@"[%@] Publishing assets", v29];

  [*(id *)(a1 + 40) publish];
  uint64_t v30 = +[MADStateHandler sharedStateHandler];
  os_log_type_t v31 = [*(id *)(a1 + 32) logDescription];
  [v30 addBreadcrumb:@"[%@] Publishing assets", v31];

  id v32 = VCPSignPostLog();
  uint64_t v33 = v32;
  if (v25 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v32))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_INTERVAL_END, v25, "MADTaskCoordinator_Publish", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 88));
  [*(id *)(a1 + 32) retireTask:*(void *)(a1 + 40)];
  dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 48) + 48));
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 48) + 56));
  uint64_t v34 = *(void *)(a1 + 48);
  id v35 = *(NSObject **)(v34 + 40);
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472;
  v36[2] = sub_10015E348;
  v36[3] = &unk_10021C738;
  v36[4] = v34;
  dispatch_async(v35, v36);
}

id sub_10015E340(uint64_t a1)
{
  return [*(id *)(a1 + 32) evaluateScheduling];
}

id sub_10015E348(uint64_t a1)
{
  return [*(id *)(a1 + 32) evaluateScheduling];
}

void sub_10015E6BC(uint64_t a1)
{
  uint64_t v2 = VCPSignPostLog();
  os_signpost_id_t v3 = os_signpost_id_generate(v2);

  uint64_t v4 = VCPSignPostLog();
  os_log_type_t v5 = v4;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_BEGIN, v3, "MADTaskCoordinator_Prepare", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  id v6 = +[MADStateHandler sharedStateHandler];
  id v7 = [*(id *)(a1 + 32) logDescription];
  [v6 addBreadcrumb:@"[%@] Preparing assets", v7];

  [*(id *)(a1 + 40) prepare];
  int64_t v8 = +[MADStateHandler sharedStateHandler];
  id v9 = [*(id *)(a1 + 32) logDescription];
  [v8 addBreadcrumb:@"[%@] Finished preparing assets", v9];

  uint64_t v10 = VCPSignPostLog();
  id v11 = v10;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_INTERVAL_END, v3, "MADTaskCoordinator_Prepare", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  uint64_t v12 = VCPSignPostLog();
  os_signpost_id_t v13 = os_signpost_id_generate(v12);

  id v14 = VCPSignPostLog();
  os_signpost_id_t v15 = v14;
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_INTERVAL_BEGIN, v13, "MADTaskCoordinator_Download", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  id v16 = +[MADStateHandler sharedStateHandler];
  __int16 v17 = [*(id *)(a1 + 32) logDescription];
  [v16 addBreadcrumb:@"[%@] Downloading assets", v17];

  [*(id *)(a1 + 40) download];
  uint64_t v18 = +[MADStateHandler sharedStateHandler];
  __int16 v19 = [*(id *)(a1 + 32) logDescription];
  [v18 addBreadcrumb:@"[%@] Finished downloading assets", v19];

  id v20 = VCPSignPostLog();
  int v21 = v20;
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_INTERVAL_END, v13, "MADTaskCoordinator_Download", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 120), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 112));
  dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 48) + 48));
  uint64_t v22 = *(void *)(a1 + 48);
  os_log_type_t v23 = *(NSObject **)(v22 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10015ED64;
  block[3] = &unk_10021C738;
  void block[4] = v22;
  dispatch_async(v23, block);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 80), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 120));
  long long v24 = VCPSignPostLog();
  os_signpost_id_t v25 = os_signpost_id_generate(v24);

  id v26 = VCPSignPostLog();
  uint64_t v27 = v26;
  if (v25 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v26))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, OS_SIGNPOST_INTERVAL_BEGIN, v25, "MADTaskCoordinator_Process", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  os_log_type_t v28 = +[MADStateHandler sharedStateHandler];
  __int16 v29 = [*(id *)(a1 + 32) logDescription];
  [v28 addBreadcrumb:@"[%@] Processing assets", v29];

  [*(id *)(a1 + 40) process];
  uint64_t v30 = +[MADStateHandler sharedStateHandler];
  os_log_type_t v31 = [*(id *)(a1 + 32) logDescription];
  [v30 addBreadcrumb:@"[%@] Finished processing assets", v31];

  id v32 = VCPSignPostLog();
  uint64_t v33 = v32;
  if (v25 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v32))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_INTERVAL_END, v25, "MADTaskCoordinator_Process", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 88), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 80));
  uint64_t v34 = VCPSignPostLog();
  os_signpost_id_t v35 = os_signpost_id_generate(v34);

  NSErrorUserInfoKey v36 = VCPSignPostLog();
  id v37 = v36;
  if (v35 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v36))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v37, OS_SIGNPOST_INTERVAL_BEGIN, v35, "MADTaskCoordinator_Publish", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  uint64_t v38 = +[MADStateHandler sharedStateHandler];
  uint64_t v39 = [*(id *)(a1 + 32) logDescription];
  [v38 addBreadcrumb:@"[%@] Publishing assets", v39];

  [*(id *)(a1 + 40) publish];
  __int16 v40 = +[MADStateHandler sharedStateHandler];
  id v41 = [*(id *)(a1 + 32) logDescription];
  [v40 addBreadcrumb:@"[%@] Finished publishing assets", v41];

  __int16 v42 = VCPSignPostLog();
  id v43 = v42;
  if (v35 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v42))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v43, OS_SIGNPOST_INTERVAL_END, v35, "MADTaskCoordinator_Publish", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 88));
  [*(id *)(a1 + 32) retireTask:*(void *)(a1 + 40)];
  dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 48) + 48));
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 48) + 56));
  uint64_t v44 = *(void *)(a1 + 48);
  uint64_t v45 = *(NSObject **)(v44 + 40);
  v46[0] = _NSConcreteStackBlock;
  v46[1] = 3221225472;
  v46[2] = sub_10015ED6C;
  v46[3] = &unk_10021C738;
  v46[4] = v44;
  dispatch_async(v45, v46);
}

id sub_10015ED64(uint64_t a1)
{
  return [*(id *)(a1 + 32) evaluateScheduling];
}

id sub_10015ED6C(uint64_t a1)
{
  return [*(id *)(a1 + 32) evaluateScheduling];
}

void sub_10015F054(uint64_t a1)
{
  uint64_t v2 = VCPSignPostLog();
  os_signpost_id_t v3 = os_signpost_id_generate(v2);

  uint64_t v4 = VCPSignPostLog();
  os_log_type_t v5 = v4;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_BEGIN, v3, "MADTaskCoordinator_ClusterProcess", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  id v6 = +[MADStateHandler sharedStateHandler];
  id v7 = [*(id *)(a1 + 32) logDescription];
  [v6 addBreadcrumb:@"[%@] Processing cluster task", v7];

  [*(id *)(a1 + 40) process];
  int64_t v8 = +[MADStateHandler sharedStateHandler];
  id v9 = [*(id *)(a1 + 32) logDescription];
  [v8 addBreadcrumb:@"[%@] Finished processing cluster task", v9];

  uint64_t v10 = VCPSignPostLog();
  id v11 = v10;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_INTERVAL_END, v3, "MADTaskCoordinator_ClusterProcess", (const char *)&unk_1001F3BD3, buf, 2u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 144));
  [*(id *)(a1 + 32) retireTask:*(void *)(a1 + 40)];
  dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 48) + 48));
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 48) + 56));
  uint64_t v12 = *(void *)(a1 + 48);
  os_signpost_id_t v13 = *(NSObject **)(v12 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10015F260;
  block[3] = &unk_10021C738;
  void block[4] = v12;
  dispatch_async(v13, block);
}

id sub_10015F260(uint64_t a1)
{
  return [*(id *)(a1 + 32) evaluateScheduling];
}

id sub_10015F850(uint64_t a1)
{
  return [*(id *)(a1 + 32) evaluateScheduling];
}

void sub_10015F9E4()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  SEL v1 = (void *)qword_1002528C0;
  qword_1002528C0 = (uint64_t)v0;
}

void sub_1001600A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);

  _Block_object_dispose((const void *)(v42 - 224), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001601E0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001601F0(uint64_t a1)
{
}

void sub_1001601F8(uint64_t a1, double a2)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2048;
      double v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ %.2f%% complete", (uint8_t *)&v7, 0x16u);
    }
  }
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
}

void sub_1001602E4(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  [*(id *)(*(void *)(a1[6] + 8) + 40) stop];
  int v5 = [v4 code];
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v6 = VCPLogInstance();
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = a1[4];
      [*(id *)(*(void *)(a1[6] + 8) + 40) elapsedTimeSeconds];
      CFStringRef v10 = @"interrupted";
      int v17 = 138413058;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      if (!v5) {
        CFStringRef v10 = @"finished";
      }
      CFStringRef v20 = v10;
      __int16 v21 = 2048;
      uint64_t v22 = v9;
      __int16 v23 = 1024;
      int v24 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%@ Processing %@ after %0.6fs (%d)", (uint8_t *)&v17, 0x26u);
    }
  }
  if (v5 != -128 && v5)
  {
    id v11 = VCPLogInstance();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT)) {
      sub_100160528((uint64_t)a1, v5, v11);
    }
  }
  uint64_t v12 = *(void *)(a1[7] + 8);
  os_signpost_id_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = 0;

  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    id v14 = VCPLogInstance();
    os_log_type_t v15 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = a1[4];
      int v17 = 138412290;
      uint64_t v18 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%@ Exiting processing task ...", (uint8_t *)&v17, 0xCu);
    }
  }
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_1001604F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100160528(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 1024;
  int v7 = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "%@ Processing failed (%d)", (uint8_t *)&v4, 0x12u);
}

void sub_10016065C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001606C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100160868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016091C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MADSpotlightImageAssetEntry;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100160AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100160ADC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100160AEC(uint64_t a1)
{
}

void sub_100160AF4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  }
  else if ((int)MediaAnalysisLogLevel() >= 3)
  {
    uint64_t v8 = VCPLogInstance();
    os_log_type_t v9 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v8, v9))
    {
      CFStringRef v10 = [*(id *)(a1 + 32) logPrefix];
      int v11 = 138412546;
      uint64_t v12 = v10;
      __int16 v13 = 2112;
      id v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%@][Process] Failed to obtain blastdoor media metadata: %@", (uint8_t *)&v11, 0x16u);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_100160C24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016107C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10016115C()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)qword_1002528D0;
  uint64_t v7 = qword_1002528D0;
  if (!qword_1002528D0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100163BFC;
    v3[3] = &unk_100219E10;
    v3[4] = &v4;
    sub_100163BFC((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100161228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const void **sub_100161240(CGImage *a1, CVPixelBufferRef *a2)
{
  *a2 = 0;
  Propertdouble y = (__IOSurface *)CGImageGetProperty();
  if (Property)
  {
    Class result = (const void **)CVPixelBufferCreateWithIOSurface(0, Property, 0, a2);
    if (!result) {
      return result;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.a) = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "[CGImage->CVPixelBuffer] Failed to create CVPixelBuffer with existing IOSurface", (uint8_t *)&buf, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG))
  {
    sub_100163F2C();
  }
  *a2 = 0;
  unint64_t Width = CGImageGetWidth(a1);
  unint64_t Height = CGImageGetHeight(a1);
  long long v8 = *(_OWORD *)&CGAffineTransformIdentity.c;
  *(_OWORD *)&buf.a = *(_OWORD *)&CGAffineTransformIdentity.a;
  *(_OWORD *)&buf.CGContextRef c = v8;
  *(_OWORD *)&buf.tdouble x = *(_OWORD *)&CGAffineTransformIdentity.tx;
  CFTypeRef cf = 0;
  ColorSpace = CGImageGetColorSpace(a1);
  CFStringRef v10 = ColorSpace;
  OSType v11 = 1111970369;
  if (ColorSpace)
  {
    if (CGColorSpaceSupportsOutput(ColorSpace))
    {
      size_t NumberOfComponents = CGColorSpaceGetNumberOfComponents(v10);
      if (NumberOfComponents == 1) {
        uint32_t v13 = 0;
      }
      else {
        uint32_t v13 = 8194;
      }
      if (NumberOfComponents == 1) {
        OSType v11 = 1278226488;
      }
      else {
        OSType v11 = 1111970369;
      }
    }
    else
    {
      uint32_t v13 = 8194;
    }
    if (CGColorSpaceSupportsOutput(v10) && !CGColorSpaceUsesExtendedRange(v10)) {
      goto LABEL_20;
    }
  }
  else
  {
    uint32_t v13 = 8194;
  }
  CFStringRef v10 = CGColorSpaceCreateWithName(kCGColorSpaceSRGB);
  CFTypeRef cf = v10;
  v45.a = 0.0;
  sub_100004484((const void **)&v45);
LABEL_20:
  value = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryRef pixelBufferAttributes = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(pixelBufferAttributes, kCVPixelBufferIOSurfacePropertiesKey, value);
  CVPixelBufferRef pixelBufferOut = 0;
  CVPixelBufferCreate(0, Width, Height, v11, pixelBufferAttributes, &pixelBufferOut);
  if (pixelBufferOut)
  {
    CVBufferSetAttachment(pixelBufferOut, kCVImageBufferCGColorSpaceKey, v10, kCVAttachmentMode_ShouldPropagate);
    LODWORD(v47) = 0;
    CVPixelBufferRef pixelBuffer = pixelBufferOut;
    CVPixelBufferLockFlags unlockFlags = 0;
    if (pixelBufferOut)
    {
      uint64_t v14 = CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
      LODWORD(v47) = v14;
      if (!v14
        || os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)
        && sub_100163EA0((uint64_t)&pixelBuffer, v14, &v47))
      {
        BaseAddress = CVPixelBufferGetBaseAddress(pixelBufferOut);
        size_t v16 = CVPixelBufferGetWidth(pixelBufferOut);
        size_t v17 = CVPixelBufferGetHeight(pixelBufferOut);
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBufferOut);
        __int16 v19 = CGBitmapContextCreate(BaseAddress, v16, v17, 8uLL, BytesPerRow, v10, v13);
        CGContextRef c = v19;
        if (v19)
        {
          CGAffineTransform v45 = buf;
          CGContextConcatCTM(v19, &v45);
          v55.size.double width = (double)Width;
          v55.size.double height = (double)Height;
          v55.origin.double x = 0.0;
          v55.origin.double y = 0.0;
          CGContextDrawImage(c, v55, a1);
          if (!sub_10002ABAC(&v47))
          {
            CFStringRef v20 = pixelBufferOut;
            if (pixelBufferOut) {
              CFStringRef v20 = (__CVBuffer *)CFRetain(pixelBufferOut);
            }
            *a2 = v20;
          }
        }
        else
        {
          BOOL v37 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
          if (v37) {
            sub_100163E64(v37, v38, v39, v40, v41, v42, v43, v44);
          }
        }
        sub_100004484((const void **)&c);
        if (pixelBuffer
          && !v47
          && CVPixelBufferUnlockBaseAddress(pixelBuffer, unlockFlags)
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_100163DF0();
        }
      }
    }
    else
    {
      BOOL v29 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
      if (v29) {
        sub_10003036C(v29, v30, v31, v32, v33, v34, v35, v36);
      }
    }
  }
  else
  {
    BOOL v21 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v21) {
      sub_100163DB4(v21, v22, v23, v24, v25, v26, v27, v28);
    }
  }
  sub_100004484((const void **)&pixelBufferOut);
  sub_100004484((const void **)&pixelBufferAttributes);
  sub_100004484((const void **)&value);
  return sub_100004484(&cf);
}

void sub_10016164C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va5, a7);
  va_start(va4, a7);
  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  long long v8 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v14 = va_arg(va3, const void *);
  va_copy(va4, va3);
  size_t v16 = va_arg(va4, const void *);
  va_copy(va5, va4);
  uint64_t v18 = va_arg(va5, const void *);
  sub_100004484((const void **)va);
  sub_10002AC60((uint64_t)va1);
  sub_100004484((const void **)va2);
  sub_100004484((const void **)va3);
  sub_100004484((const void **)va4);
  sub_100004484((const void **)va5);
  _Unwind_Resume(a1);
}

void sub_100161A44(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

uint64_t sub_100161AE8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4_Block_object_dispose(&STACK[0x410], 8) = *(void *)(a2 + 48);
  *(void *)(a2 + 4_Block_object_dispose(&STACK[0x410], 8) = 0;
  return result;
}

const void **sub_100161AF8(uint64_t a1)
{
  return sub_100004484((const void **)(a1 + 48));
}

void sub_100161B00(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = v5;
    long long v8 = [v7 image];
    id v9 = [v8 cgImage];

    if (v9)
    {
      uint64_t v10 = [v7 image];
      OSType v11 = (CGImage *)[v10 cgImage];
      uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
      os_log_type_t v15 = *(const void **)(v12 + 48);
      uint64_t v14 = (CVPixelBufferRef *)(v12 + 48);
      uint64_t v13 = v15;
      if (v15)
      {
        CFRelease(v13);
        CVPixelBufferRef *v14 = 0;
      }
      sub_100161240(v11, v14);

      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
    }
    else if ((int)MediaAnalysisLogLevel() >= 3)
    {
      uint64_t v18 = VCPLogInstance();
      os_log_type_t v19 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v18, v19))
      {
        CFStringRef v20 = [*(id *)(a1 + 32) logPrefix];
        int v21 = 138412290;
        uint64_t v22 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%@][Process] Failed to obtain cgImage from preview video", (uint8_t *)&v21, 0xCu);
      }
    }
LABEL_13:

    goto LABEL_14;
  }
  if ((int)MediaAnalysisLogLevel() >= 3)
  {
    uint64_t v7 = VCPLogInstance();
    os_log_type_t v16 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v7, v16))
    {
      size_t v17 = [*(id *)(a1 + 32) logPrefix];
      int v21 = 138412546;
      uint64_t v22 = v17;
      __int16 v23 = 2112;
      id v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, v16, "[%@][Process] Failed to obtain blastdoor thumbnail: %@", (uint8_t *)&v21, 0x16u);
    }
    goto LABEL_13;
  }
LABEL_14:
}

void sub_100161D04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100162230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001623FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016262C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001629F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100162B64(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100163588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&a61, 8);
  _Unwind_Resume(a1);
}

void sub_100163824(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      uint64_t v4 = VCPLogInstance();
      os_log_type_t v5 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v4, v5))
      {
        id v6 = [*(id *)(a1 + 32) logPrefix];
        uint64_t v7 = [*(id *)(a1 + 40) objectForKeyedSubscript:*(void *)(a1 + 48)];
        uint64_t v8 = *(void *)(a1 + 48);
        *(_DWORD *)CGAffineTransform buf = 138413058;
        uint64_t v36 = v6;
        __int16 v37 = 2112;
        uint64_t v38 = v7;
        __int16 v39 = 2112;
        uint64_t v40 = v8;
        __int16 v41 = 2112;
        id v42 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@][Publish] Failed to add CSSearchableItem array %@ to index %@ (%@)\n", buf, 0x2Au);
      }
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = -18;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v9 = [*(id *)(a1 + 40) objectForKeyedSubscript:*(void *)(a1 + 48)];
    id v10 = [v9 countByEnumeratingWithState:&v29 objects:v34 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v30;
      do
      {
        for (unint64_t i = 0; i != v10; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v30 != v11) {
            objc_enumerationMutation(v9);
          }
          uint64_t v13 = *(void **)(a1 + 56);
          uint64_t v14 = [*(id *)(*((void *)&v29 + 1) + 8 * i) uniqueIdentifier];
          [v13 addObject:v14];
        }
        id v10 = [v9 countByEnumeratingWithState:&v29 objects:v34 count:16];
      }
      while (v10);
    }
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      os_log_type_t v15 = VCPLogInstance();
      os_log_type_t v16 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v15, v16))
      {
        size_t v17 = [*(id *)(a1 + 32) logPrefix];
        uint64_t v18 = [*(id *)(a1 + 40) objectForKeyedSubscript:*(void *)(a1 + 48)];
        uint64_t v19 = *(void *)(a1 + 48);
        *(_DWORD *)CGAffineTransform buf = 138412802;
        uint64_t v36 = v17;
        __int16 v37 = 2112;
        uint64_t v38 = v18;
        __int16 v39 = 2112;
        uint64_t v40 = v19;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%@][Publish] Successfully add CSSearchableItem array %@ to index %@\n", buf, 0x20u);
      }
    }
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v9 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", *(void *)(a1 + 48), 0);
    id v20 = [v9 countByEnumeratingWithState:&v25 objects:v33 count:16];
    if (v20)
    {
      uint64_t v21 = *(void *)v26;
      do
      {
        for (unint64_t j = 0; j != v20; unint64_t j = (char *)j + 1)
        {
          if (*(void *)v26 != v21) {
            objc_enumerationMutation(v9);
          }
          __int16 v23 = *(void **)(a1 + 64);
          id v24 = [*(id *)(*((void *)&v25 + 1) + 8 * (void)j) uniqueIdentifier];
          [v23 addObject:v24];
        }
        id v20 = [v9 countByEnumeratingWithState:&v25 objects:v33 count:16];
      }
      while (v20);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

void sub_100163B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class sub_100163BFC(uint64_t a1)
{
  v4[0] = 0;
  if (!qword_1002528D8)
  {
    v4[1] = _NSConcreteStackBlock;
    _DWORD v4[2] = 3221225472;
    v4[3] = sub_100163D40;
    v4[4] = &unk_100219838;
    v4[5] = v4;
    long long v5 = off_10021F090;
    uint64_t v6 = 0;
    qword_1002528D8 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_1002528D8)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("IMMediaAnalysisBlastDoorInterface");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)sub_100163F74();
LABEL_8:
    free(v2);
  }
  qword_1002528D0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100163D40()
{
  uint64_t result = _sl_dlopen();
  qword_1002528D8 = result;
  return result;
}

void sub_100163DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100163DF0()
{
  sub_1000302A0();
  sub_1000302B8((void *)&_mh_execute_header, &_os_log_default, v0, "Failed to unlock CVPixelBuffer (%p, %d)", v1, v2, v3, v4, v5);
}

void sub_100163E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

BOOL sub_100163EA0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  sub_1000302A0();
  sub_1000302B8((void *)&_mh_execute_header, &_os_log_default, v4, "Failed to lock CVPixelBuffer (%p, %d)", v5, v6, v7, v8, v10);
  return *a3 == 0;
}

void sub_100163F2C()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG, "[CGImage->CVPixelBuffer] CGImage not IOSurface backed", v0, 2u);
}

unint64_t sub_100163F74()
{
  uint64_t v0 = (void *)abort_report_np();
  return +[MADTaskProvider taskID];
}

void sub_10016414C()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  SEL v1 = (void *)qword_1002528E0;
  qword_1002528E0 = (uint64_t)v0;
}

id sub_100164314(uint64_t a1)
{
  if ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 16) count] >= 0x64) {
    [*(id *)(*(void *)(a1 + 32) + 16) removeObjectAtIndex:0];
  }
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 16);
  return [v3 addObject:v2];
}

void sub_1001643E4(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      unsigned int v4 = [*(id *)(*(void *)(a1 + 32) + 16) count];
      *(_DWORD *)CGAffineTransform buf = 67109120;
      LODWORD(v1_Block_object_dispose(&STACK[0x410], 8) = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[MADStateHandler] Dumping %u breadcrumbs...", buf, 8u);
    }
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v5 = *(id *)(*(void *)(a1 + 32) + 16);
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v19 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v14;
    os_log_type_t v9 = VCPLogToOSLogType[5];
    do
    {
      for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v11 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        if ((int)MediaAnalysisLogLevel() >= 5)
        {
          uint64_t v12 = VCPLogInstance();
          if (os_log_type_enabled(v12, v9))
          {
            *(_DWORD *)CGAffineTransform buf = 138412290;
            uint64_t v18 = v11;
            _os_log_impl((void *)&_mh_execute_header, v12, v9, "[MADStateHandler]\t%@", buf, 0xCu);
          }
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v13 objects:v19 count:16];
    }
    while (v7);
  }
}

void sub_10016463C(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 24) = *(void *)(a1 + 40);
  uint64_t v2 = +[NSDate now];
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned int v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = v2;
}

void sub_100164704(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 24) = 0;
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
}

void *sub_1001647CC(void *result)
{
  uint64_t v1 = result;
  if (result[6])
  {
    uint64_t result = *(id *)(result[4] + 32);
    *(void *)void v1[6] = result;
  }
  *(void *)(*(void *)(v1[5] + 8) + 24) = *(void *)(v1[4] + 24);
  return result;
}

void sub_100164868(id a1)
{
  uint64_t v1 = +[VCPLogManager dateFormatter];
  uint64_t v2 = (void *)qword_1002528F8;
  qword_1002528F8 = v1;
}

void sub_1001649E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint8_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VCPSystemMonitor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1001650B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001650D8(id a1)
{
  CFTypeRef v2 = IOPSCopyPowerSourcesInfo();
  active = (const void *)IOPSGetActiveBattery();
  byte_100252900 = IOPSGetPowerSourceDescription(v2, active) != 0;
  sub_100004484(&v2);
}

void sub_100165130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100004484((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1001654F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001658F0(uint64_t a1)
{
  return [*(id *)(a1 + 32) checkPluggedIn];
}

id sub_1001658F8(uint64_t a1)
{
  return [*(id *)(a1 + 32) checkScreenLocked];
}

id sub_100165900(uint64_t a1)
{
  return [*(id *)(a1 + 32) checkFullyCharged];
}

id sub_100165924(uint64_t a1)
{
  return [*(id *)(a1 + 32) checkThermalPressure];
}

id sub_10016592C(uint64_t a1)
{
  return [*(id *)(a1 + 32) checkFreeSpace];
}

void sub_100165A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100165AC0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v4 code]);
}

void sub_100165B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100165BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100166048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_1001660B4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) isCanceled];
  if (v2)
  {
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      uint64_t v3 = VCPLogInstance();
      os_log_type_t v4 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = *(void *)(a1 + 40);
        int v8 = 138412290;
        uint64_t v9 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "%@ Canceling ...", (uint8_t *)&v8, 0xCu);
      }
    }
  }
  else
  {
    id v6 = +[VCPWatchdog sharedWatchdog];
    [v6 pet];
  }
  return v2;
}

void sub_1001661B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001661C8(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_100166218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001662D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100166344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001663A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint8_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)MADSpotlightMovieAssetEntry;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1001664EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001668E4(_Unwind_Exception *a1)
{
  id v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1001669A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100166C14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100166FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001674FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001675F0(uint64_t a1)
{
  [*(id *)(a1 + 32) processAssetEntry:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 48);
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v5 = v3[7];
  uint64_t v4 = v3[8];
  uint64_t v7 = v3[4];
  uint64_t v6 = v3[5];
  return [v2 processWithImageBackboneAnalyzer:v6 commSafetyHandler:v4 requestQueue:v5 cancelBlock:v7];
}

void sub_100167AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_100167D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v18 = v17;

  _Unwind_Resume(a1);
}

void sub_100167D6C(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  [v5 doubleValue];
  if (v6 >= 0.00999999978)
  {
    id v7 = objc_alloc((Class)PHSceneClassification);
    id v8 = [v10 longLongValue];
    [v5 doubleValue];
    id v9 = objc_msgSend(v7, "initWithExtendedSceneIdentifier:confidence:boundingBox:startTime:duration:classificationType:", v8, 0);
    if (v9) {
      [*(id *)(a1 + 32) addObject:v9];
    }
  }
}

void sub_100167E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100168438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_100168CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_100169074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100169664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_100169DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016A2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10016AAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10016B670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

void sub_10016B930(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      uint64_t v4 = VCPLogInstance();
      os_log_type_t v5 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v4, v5))
      {
        double v6 = [*(id *)(a1 + 32) logPrefix];
        id v7 = [*(id *)(a1 + 40) objectForKeyedSubscript:*(void *)(a1 + 48)];
        uint64_t v8 = *(void *)(a1 + 48);
        *(_DWORD *)CGAffineTransform buf = 138413058;
        uint64_t v36 = v6;
        __int16 v37 = 2112;
        uint64_t v38 = v7;
        __int16 v39 = 2112;
        uint64_t v40 = v8;
        __int16 v41 = 2112;
        id v42 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@][Publish] Failed to add CSSearchableItem array %@ to index %@ (%@)\n", buf, 0x2Au);
      }
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = -18;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v9 = [*(id *)(a1 + 40) objectForKeyedSubscript:*(void *)(a1 + 48)];
    id v10 = [v9 countByEnumeratingWithState:&v29 objects:v34 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v30;
      do
      {
        for (unint64_t i = 0; i != v10; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v30 != v11) {
            objc_enumerationMutation(v9);
          }
          long long v13 = *(void **)(a1 + 56);
          long long v14 = [*(id *)(*((void *)&v29 + 1) + 8 * i) uniqueIdentifier];
          [v13 addObject:v14];
        }
        id v10 = [v9 countByEnumeratingWithState:&v29 objects:v34 count:16];
      }
      while (v10);
    }
  }
  else
  {
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      long long v15 = VCPLogInstance();
      os_log_type_t v16 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v15, v16))
      {
        size_t v17 = [*(id *)(a1 + 32) logPrefix];
        uint64_t v18 = [*(id *)(a1 + 40) objectForKeyedSubscript:*(void *)(a1 + 48)];
        uint64_t v19 = *(void *)(a1 + 48);
        *(_DWORD *)CGAffineTransform buf = 138412802;
        uint64_t v36 = v17;
        __int16 v37 = 2112;
        uint64_t v38 = v18;
        __int16 v39 = 2112;
        uint64_t v40 = v19;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%@][Publish] Successfully add CSSearchableItem array %@ to index %@\n", buf, 0x20u);
      }
    }
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v9 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", *(void *)(a1 + 48), 0);
    id v20 = [v9 countByEnumeratingWithState:&v25 objects:v33 count:16];
    if (v20)
    {
      uint64_t v21 = *(void *)v26;
      do
      {
        for (unint64_t j = 0; j != v20; unint64_t j = (char *)j + 1)
        {
          if (*(void *)v26 != v21) {
            objc_enumerationMutation(v9);
          }
          __int16 v23 = *(void **)(a1 + 64);
          id v24 = [*(id *)(*((void *)&v25 + 1) + 8 * (void)j) uniqueIdentifier];
          [v23 addObject:v24];
        }
        id v20 = [v9 countByEnumeratingWithState:&v25 objects:v33 count:16];
      }
      while (v20);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

void sub_10016BC80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016C354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

id sub_10016C374()
{
  uint64_t v4 = 0;
  os_log_type_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)qword_100252910;
  uint64_t v7 = qword_100252910;
  if (!qword_100252910)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10016D478;
    v3[3] = &unk_10021EB68;
    v3[4] = &v4;
    sub_10016D478((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10016C440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10016C458(uint64_t a1)
{
  id v2 = +[MADGDUtilities sharedInstance];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 208);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10016C564;
  v6[3] = &unk_1002198A8;
  id v7 = *(id *)(a1 + 56);
  [v2 syncVisualUnderstandingService:v4 withPhotosLibrary:v3 cancelOrExtendTimeoutBlock:v6];

  [*(id *)(a1 + 48) stop];
  os_log_type_t v5 = +[VCPMADCoreAnalyticsManager sharedManager];
  [*(id *)(a1 + 48) elapsedTimeSeconds];
  objc_msgSend(v5, "accumulateDoubleValue:forField:andEvent:", @"FaceVUSyncElapsedTimeInSeconds", @"com.apple.mediaanalysisd.FaceAnalysisRunSession");
}

uint64_t sub_10016C564(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && ((*(uint64_t (**)(void))(v1 + 16))() & 1) != 0) {
    return 1;
  }
  uint64_t v3 = +[VCPWatchdog sharedWatchdog];
  [v3 pet];

  return 0;
}

uint64_t sub_10016C5C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && ((*(uint64_t (**)(void))(v1 + 16))() & 1) != 0) {
    return 1;
  }
  uint64_t v3 = +[VCPWatchdog sharedWatchdog];
  [v3 pet];

  return 0;
}

void sub_10016CAD8(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 200) = *(void *)(a1 + 40) == 0;
  if (*(unsigned char *)(*(void *)(a1 + 32) + 200) && (int)MediaAnalysisLogLevel() >= 6)
  {
    id v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 176);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%@ Asset processing done", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_10016CCA0(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 201) = *(void *)(a1 + 40) == 0;
  if (*(unsigned char *)(*(void *)(a1 + 32) + 201) && (int)MediaAnalysisLogLevel() >= 6)
  {
    id v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 176);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%@ Download asset processing done", (uint8_t *)&v5, 0xCu);
    }
  }
}

uint64_t sub_10016CE90(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10016CEA0(uint64_t a1)
{
}

void sub_10016CEA8(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 176);
      int v28 = 138412290;
      uint64_t v29 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%@ Checking next cluster processing task", (uint8_t *)&v28, 0xCu);
    }
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v5 + 201))
  {
    unsigned __int8 v6 = 0;
  }
  else
  {
    id v7 = +[VCPInternetReachability sharedInstance];
    unsigned __int8 v6 = [v7 hasWifiOrEthernetConnection];

    uint64_t v5 = *(void *)(a1 + 32);
  }
  if (*(unsigned char *)(v5 + 200) && (v6 & 1) == 0 && !*(void *)(v5 + 152))
  {
    *(void *)(v5 + 152) = 20;
    uint64_t v5 = *(void *)(a1 + 32);
  }
  uint64_t v8 = *(void *)(v5 + 152);
  if (v8 == 20 || v8 == 10)
  {
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      id v10 = VCPLogInstance();
      os_log_type_t v11 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        uint64_t v13 = *(void *)(v12 + 176);
        uint64_t v14 = *(void *)(v12 + 152);
        int v28 = 138412546;
        uint64_t v29 = v13;
        __int16 v30 = 2048;
        uint64_t v31 = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "%@ Scheduling person processing (%lu)", (uint8_t *)&v28, 0x16u);
      }
    }
    unsigned int v15 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 136), "mad_useVUGallery");
    os_log_type_t v16 = *(void **)(a1 + 32);
    uint64_t v17 = v16[17];
    uint64_t v18 = v16[19];
    uint64_t v19 = v16[18];
    if (v15) {
      +[MADPhotosPersonProcessingTask taskWithPhotoLibrary:v17 requirement:v18 understandingService:v16[26] andContext:v19];
    }
    else {
    uint64_t v20 = +[MADPhotosPersonProcessingTask taskWithPhotoLibrary:v17 requirement:v18 faceClusterer:v16[21] andContext:v19];
    }
    uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v22 = *(void **)(v21 + 40);
    *(void *)(v21 + 40) = v20;

    *(void *)(*(void *)(a1 + 32) + 152) = 30;
    if ((int)MediaAnalysisLogLevel() >= 6)
    {
      __int16 v23 = VCPLogInstance();
      os_log_type_t v24 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = *(void *)(a1 + 32);
        uint64_t v26 = *(void *)(v25 + 176);
        uint64_t v27 = *(void *)(v25 + 152);
        int v28 = 138412546;
        uint64_t v29 = v26;
        __int16 v30 = 2048;
        uint64_t v31 = v27;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "%@ Scheduled person processing (%lu)", (uint8_t *)&v28, 0x16u);
      }
    }
  }
}

void sub_10016D260(uint64_t a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (*(unsigned char *)(v2 + 201))
    {
      LOBYTE(v3) = 1;
    }
    else
    {
      uint64_t v4 = +[VCPInternetReachability sharedInstance];
      unsigned int v3 = [v4 hasWifiOrEthernetConnection] ^ 1;

      uint64_t v2 = *(void *)(a1 + 40);
    }
    uint64_t v5 = 10;
    if (((*(unsigned char *)(v2 + 200) != 0) & v3) != 0) {
      uint64_t v5 = 20;
    }
    *(void *)(v2 + 152) = v5;
    if ((int)MediaAnalysisLogLevel() >= 7)
    {
      unsigned __int8 v6 = VCPLogInstance();
      os_log_type_t v7 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = *(void *)(a1 + 40);
        uint64_t v9 = *(void *)(v8 + 176);
        uint64_t v10 = *(void *)(v8 + 152);
        int v11 = 138412546;
        uint64_t v12 = v9;
        __int16 v13 = 2048;
        uint64_t v14 = v10;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "%@ Retiring asset processing task; call for person processing (%lu)",
          (uint8_t *)&v11,
          0x16u);
      }
    }
  }
}

void sub_10016D478(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("GDVUEntityRecognitionClient");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252910 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_1000CAC84();
    sub_10016D4D0();
  }
}

void sub_10016D4D0()
{
  v1[0] = 0;
  if (!qword_100252918)
  {
    v1[1] = _NSConcreteStackBlock;
    v1[2] = 3221225472;
    v1[3] = sub_10016D5CC;
    v1[4] = &unk_100219838;
    v1[5] = v1;
    long long v2 = off_10021F1B0;
    uint64_t v3 = 0;
    qword_100252918 = _sl_dlopen();
  }
  id v0 = (void *)v1[0];
  if (!qword_100252918)
  {
    id v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_10016D5CC()
{
  uint64_t result = _sl_dlopen();
  qword_100252918 = result;
  return result;
}

Class sub_10016D640(uint64_t a1)
{
  sub_10016D4D0();
  Class result = objc_getClass("GDVUVisualUnderstandingService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100252920 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = (void *)sub_1000CACAC();
    return (Class)+[MADDatabaseRestoreFastPassBackgroundSystemTask identifier];
  }
  return result;
}

void sub_10016D820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_10016D850(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v4 code]);
}

void sub_10016D8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10016D94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016DBD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10016DC44(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

void sub_10016DF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_10016E00C(uint64_t a1, double a2)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v4 = VCPLogInstance();
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2048;
      double v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Download progress: %.2f", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_10016E0EC(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    long long v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%@ Downloaded resource received", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_10016E1B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if ((int)MediaAnalysisLogLevel() >= 3)
    {
      uint64_t v4 = VCPLogInstance();
      os_log_type_t v5 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        int v13 = 138412546;
        uint64_t v14 = v6;
        __int16 v15 = 2112;
        id v16 = v3;
        int v7 = "%@ Failed to download - %@";
        uint64_t v8 = v4;
        os_log_type_t v9 = v5;
        uint32_t v10 = 22;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, (uint8_t *)&v13, v10);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v11 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v11))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v13 = 138412290;
      uint64_t v14 = v12;
      int v7 = "%@ Download completed";
      uint64_t v8 = v4;
      os_log_type_t v9 = v11;
      uint32_t v10 = 12;
      goto LABEL_8;
    }
LABEL_9:
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 40) + 16));
}

void sub_10016E318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016F528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

id sub_10016F7F8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _requestAssetResource:*(void *)(a1 + 40)];
}

void sub_100173838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100173848(id a1)
{
  return 0;
}

void sub_100173A84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100173AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100173CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100173F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100174CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100174E34(id a1)
{
  id v1 = +[VCPWatchdog sharedWatchdog];
  [v1 pet];
}

void sub_100174E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100174E98(uint64_t a1, float a2)
{
  uint64_t v4 = [*(id *)(a1 + 32) cancelBlock];
  if (v4
    && ([*(id *)(a1 + 32) cancelBlock],
        os_log_type_t v5 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue(),
        char v6 = v5[2](),
        v5,
        v4,
        (v6 & 1) != 0))
  {
    int v7 = 1;
  }
  else
  {
    uint64_t v8 = +[VCPWatchdog sharedWatchdog];
    [v8 pet];

    int v7 = 0;
  }
  if ((int)MediaAnalysisLogLevel() >= 6)
  {
    os_log_type_t v9 = VCPLogInstance();
    os_log_type_t v10 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v9, v10))
    {
      int v12 = 134218240;
      double v13 = a2 * 100.0;
      __int16 v14 = 1024;
      int v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "[FullCluster] Gallery update progress: %.2f%%, isCancelled %d", (uint8_t *)&v12, 0x12u);
    }
  }
  return v7 ^ 1u;
}

void sub_100174FF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001752DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_100175320(id a1)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    id v1 = VCPLogInstance();
    os_log_type_t v2 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v1, v2))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Real-time analysis server XPC connection interrupted", v3, 2u);
    }
  }
}

void sub_1001753A0(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    os_log_type_t v2 = VCPLogInstance();
    os_log_type_t v3 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)char v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Real-time analysis server XPC connection invalidated", v6, 2u);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    os_log_type_t v5 = +[VCPClientManager sharedManager];
    [v5 removeClientHandler:WeakRetained];
  }
}

void sub_100175460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001754D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001759E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ADClientSetValueForScalarKey()
{
  return _ADClientSetValueForScalarKey();
}

uint64_t BiomeLibrary()
{
  return _BiomeLibrary();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppBooleanValue(key, applicationID, keyExistsAndHasValidFormat);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

void CFRunLoopRun(void)
{
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return _CGBitmapContextCreate(data, width, height, bitsPerComponent, bytesPerRow, space, bitmapInfo);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return _CGColorSpaceCreateWithName(name);
}

size_t CGColorSpaceGetNumberOfComponents(CGColorSpaceRef space)
{
  return _CGColorSpaceGetNumberOfComponents(space);
}

BOOL CGColorSpaceSupportsOutput(CGColorSpaceRef space)
{
  return _CGColorSpaceSupportsOutput(space);
}

BOOL CGColorSpaceUsesExtendedRange(CGColorSpaceRef space)
{
  return _CGColorSpaceUsesExtendedRange(space);
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return _CGImageGetColorSpace(image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return _CGImageGetHeight(image);
}

uint64_t CGImageGetProperty()
{
  return _CGImageGetProperty();
}

size_t CGImageGetWidth(CGImageRef image)
{
  return _CGImageGetWidth(image);
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  return _CGRectGetMaxX(rect);
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  return _CGRectGetMaxY(rect);
}

CGFloat CGRectGetMinX(CGRect rect)
{
  return _CGRectGetMinX(rect);
}

CGFloat CGRectGetMinY(CGRect rect)
{
  return _CGRectGetMinY(rect);
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  return _CGRectIntersection(r1, r2);
}

BOOL CGRectIsNull(CGRect rect)
{
  return _CGRectIsNull(rect);
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  return _CGRectUnion(r1, r2);
}

CVImageBufferRef CMSampleBufferGetImageBuffer(CMSampleBufferRef sbuf)
{
  return _CMSampleBufferGetImageBuffer(sbuf);
}

CMTime *__cdecl CMTimeAdd(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return _CMTimeAdd(retstr, lhs, rhs);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return _CMTimeCompare(time1, time2);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  return _CMTimeGetSeconds(time);
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return _CMTimeMakeFromDictionary(retstr, dictionaryRepresentation);
}

CMTime *__cdecl CMTimeMultiply(CMTime *__return_ptr retstr, CMTime *time, int32_t multiplier)
{
  return _CMTimeMultiply(retstr, time, multiplier);
}

CMTime *__cdecl CMTimeMultiplyByRatio(CMTime *__return_ptr retstr, CMTime *time, int32_t multiplier, int32_t divisor)
{
  return _CMTimeMultiplyByRatio(retstr, time, multiplier, divisor);
}

CMTimeRange *__cdecl CMTimeRangeMakeFromDictionary(CMTimeRange *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return _CMTimeRangeMakeFromDictionary(retstr, dictionaryRepresentation);
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return _CVPixelBufferCreate(allocator, width, height, pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithIOSurface(CFAllocatorRef allocator, IOSurfaceRef surface, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return _CVPixelBufferCreateWithIOSurface(allocator, surface, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetBaseAddress(pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetBytesPerRow(pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetHeight(pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetWidth(pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return _CVPixelBufferLockBaseAddress(pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return _CVPixelBufferUnlockBaseAddress(pixelBuffer, unlockFlags);
}

uint64_t DeviceHasANE()
{
  return _DeviceHasANE();
}

uint64_t DeviceWithGreymatterSupport()
{
  return _DeviceWithGreymatterSupport();
}

uint64_t FigSandboxRegisterURLWithProcess()
{
  return _FigSandboxRegisterURLWithProcess();
}

CFTypeRef IOPSCopyPowerSourcesInfo(void)
{
  return _IOPSCopyPowerSourcesInfo();
}

uint64_t IOPSGetActiveBattery()
{
  return _IOPSGetActiveBattery();
}

uint64_t IOPSGetPercentRemaining()
{
  return _IOPSGetPercentRemaining();
}

CFDictionaryRef IOPSGetPowerSourceDescription(CFTypeRef blob, CFTypeRef ps)
{
  return _IOPSGetPowerSourceDescription(blob, ps);
}

CFTimeInterval IOPSGetTimeRemainingEstimate(void)
{
  return _IOPSGetTimeRemainingEstimate();
}

uint64_t MADPLLogBackgroundStaticStickerScoring()
{
  return _MADPLLogBackgroundStaticStickerScoring();
}

uint64_t MADPLLogMomentsDeferredProcessing()
{
  return _MADPLLogMomentsDeferredProcessing();
}

uint64_t MADPLLogOnDemandStaticStickerScoring()
{
  return _MADPLLogOnDemandStaticStickerScoring();
}

uint64_t MADPersonPromoterHasProcessedForLibrary()
{
  return _MADPersonPromoterHasProcessedForLibrary();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return _MKBDeviceUnlockedSinceBoot();
}

uint64_t MediaAnalysisEnableDatabaseLog()
{
  return _MediaAnalysisEnableDatabaseLog();
}

uint64_t MediaAnalysisInsertMissingResultsFromDegradedAnalysis()
{
  return _MediaAnalysisInsertMissingResultsFromDegradedAnalysis();
}

uint64_t MediaAnalysisLogLevel()
{
  return _MediaAnalysisLogLevel();
}

uint64_t MediaAnalysisMergeAnalysis()
{
  return _MediaAnalysisMergeAnalysis();
}

uint64_t MediaAnalysisResultsTypesForAnalysisTypes()
{
  return _MediaAnalysisResultsTypesForAnalysisTypes();
}

NSRect NSRectFromString(NSString *aString)
{
  return _NSRectFromString(aString);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return _NSSelectorFromString(aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *__cdecl NSStringFromRect(NSRect aRect)
{
  return _NSStringFromRect(aRect);
}

NSString *NSTemporaryDirectory(void)
{
  return _NSTemporaryDirectory();
}

uint64_t PFCachingArchiveIndexSetSkipChecksumValidation()
{
  return _PFCachingArchiveIndexSetSkipChecksumValidation();
}

uint64_t PHAssetMediaAnalysisDataWithColorNormalizationDictionaryAndRevision()
{
  return _PHAssetMediaAnalysisDataWithColorNormalizationDictionaryAndRevision();
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return _SecTaskCopySigningIdentifier(task, error);
}

uint64_t SecTaskCopyTeamIdentifier()
{
  return _SecTaskCopyTeamIdentifier();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return _SecTaskCopyValueForEntitlement(task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

uint64_t VCPBuildPersons()
{
  return _VCPBuildPersons();
}

uint64_t VCPFetchPersonPromoterClusterForEvaluation()
{
  return _VCPFetchPersonPromoterClusterForEvaluation();
}

uint64_t VCPLogInstance()
{
  return _VCPLogInstance();
}

uint64_t VCPMAIsAppleInternal()
{
  return _VCPMAIsAppleInternal();
}

uint64_t VCPPerformance_LogMeasurement()
{
  return _VCPPerformance_LogMeasurement();
}

uint64_t VCPPerformance_QueryMeasurements()
{
  return _VCPPerformance_QueryMeasurements();
}

uint64_t VCPPerformance_ReportSummary()
{
  return _VCPPerformance_ReportSummary();
}

uint64_t VCPPromotePersons()
{
  return _VCPPromotePersons();
}

uint64_t VCPSignPostLog()
{
  return _VCPSignPostLog();
}

uint64_t VIAnalyticsLogCacheHitWithContext()
{
  return _VIAnalyticsLogCacheHitWithContext();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFURLAttachSecurityScopeToFileURL()
{
  return __CFURLAttachSecurityScopeToFileURL();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void std::terminate(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return ___cxa_begin_catch(a1);
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return ___cxa_guard_acquire((uint64_t *)a1);
}

void __cxa_guard_release(__guard *a1)
{
}

double __exp10(double a1)
{
  return ___exp10(a1);
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint64_t abort_report_np()
{
  return _abort_report_np();
}

unsigned int alarm(unsigned int a1)
{
  return _alarm(a1);
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

size_t compression_decode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return _compression_decode_buffer(dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, algorithm);
}

size_t compression_decode_scratch_buffer_size(compression_algorithm algorithm)
{
  return _compression_decode_scratch_buffer_size(algorithm);
}

size_t compression_encode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return _compression_encode_buffer(dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, algorithm);
}

size_t compression_encode_scratch_buffer_size(compression_algorithm algorithm)
{
  return _compression_encode_scratch_buffer_size(algorithm);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return _dispatch_block_create(flags, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return _dispatch_group_wait(group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

char *dlerror(void)
{
  return _dlerror();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

void exit(int a1)
{
}

void free(void *a1)
{
}

pid_t getpid(void)
{
  return _getpid();
}

kern_return_t host_check_multiuser_mode(host_t host, uint32_t *multiuser_mode)
{
  return _host_check_multiuser_mode(host, multiuser_mode);
}

long double log10(long double __x)
{
  return _log10(__x);
}

long double log2(long double __x)
{
  return _log2(__x);
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

mach_port_t mach_host_self(void)
{
  return _mach_host_self();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return _notify_set_state(token, state64);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return _os_signpost_enabled(log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return _os_signpost_id_generate(log);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

uint64_t os_variant_is_darwinos()
{
  return _os_variant_is_darwinos();
}

int posix_spawnattr_init(posix_spawnattr_t *a1)
{
  return _posix_spawnattr_init(a1);
}

uint64_t posix_spawnattr_set_qos_clamp_np()
{
  return _posix_spawnattr_set_qos_clamp_np();
}

int posix_spawnattr_setflags(posix_spawnattr_t *a1, __int16 a2)
{
  return _posix_spawnattr_setflags(a1, a2);
}

int posix_spawnp(pid_t *a1, const char *a2, const posix_spawn_file_actions_t *a3, const posix_spawnattr_t *a4, char *const __argv[], char *const __envp[])
{
  return _posix_spawnp(a1, a2, a3, a4, __argv, __envp);
}

long double pow(long double __x, long double __y)
{
  return _pow(__x, __y);
}

uint64_t proc_set_cpumon_defaults()
{
  return _proc_set_cpumon_defaults();
}

uint64_t proc_set_cpumon_params()
{
  return _proc_set_cpumon_params();
}

int pthread_threadid_np(pthread_t a1, __uint64_t *a2)
{
  return _pthread_threadid_np(a1, a2);
}

qos_class_t qos_class_self(void)
{
  return _qos_class_self();
}

uint64_t sandbox_check_by_audit_token()
{
  return _sandbox_check_by_audit_token();
}

uint64_t sandbox_extension_consume()
{
  return _sandbox_extension_consume();
}

uint64_t sandbox_extension_issue_file()
{
  return _sandbox_extension_issue_file();
}

uint64_t sandbox_extension_release()
{
  return _sandbox_extension_release();
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_blob(a1, a2, a3, n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return _sqlite3_bind_double(a1, a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return _sqlite3_bind_int(a1, a2, a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return _sqlite3_bind_int64(a1, a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return _sqlite3_bind_null(a1, a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_text(a1, a2, a3, a4, a5);
}

int sqlite3_busy_handler(sqlite3 *a1, int (__cdecl *a2)(void *, int), void *a3)
{
  return _sqlite3_busy_handler(a1, a2, a3);
}

int sqlite3_close(sqlite3 *a1)
{
  return _sqlite3_close(a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_blob(a1, iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_bytes(a1, iCol);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_double(a1, iCol);
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int(a1, iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int64(a1, iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_text(a1, iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_type(a1, iCol);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return _sqlite3_exec(a1, sql, callback, a4, errmsg);
}

char *__cdecl sqlite3_expanded_sql(sqlite3_stmt *pStmt)
{
  return _sqlite3_expanded_sql(pStmt);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return _sqlite3_finalize(pStmt);
}

void sqlite3_free(void *a1)
{
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  return _sqlite3_last_insert_rowid(a1);
}

int sqlite3_open(const char *filename, sqlite3 **ppDb)
{
  return _sqlite3_open(filename, ppDb);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return _sqlite3_prepare_v2(db, zSql, nByte, ppStmt, pzTail);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return _sqlite3_step(a1);
}

int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb)
{
  return _sqlite3_wal_checkpoint(db, zDb);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

vImage_Error vImageScale_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return _vImageScale_ARGB8888(src, dest, tempBuffer, flags);
}

vImage_Error vImageScale_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return _vImageScale_Planar8(src, dest, tempBuffer, flags);
}

uint64_t xpc_transaction_exit_clean()
{
  return _xpc_transaction_exit_clean();
}

uint64_t xpc_transactions_enable()
{
  return _xpc_transactions_enable();
}

id objc_msgSend_MediaAnalysis(void *a1, const char *a2, ...)
{
  return [a1 MediaAnalysis];
}

id objc_msgSend_PEC(void *a1, const char *a2, ...)
{
  return [a1 PEC];
}

id objc_msgSend_Processing(void *a1, const char *a2, ...)
{
  return [a1 Processing];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return [a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return [a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return [a1 UUIDString];
}

id objc_msgSend_VisualSearch(void *a1, const char *a2, ...)
{
  return [a1 VisualSearch];
}

id objc_msgSend__allProcessingTypes(void *a1, const char *a2, ...)
{
  return [a1 _allProcessingTypes];
}

id objc_msgSend__allowConcurrentFaceProcessing(void *a1, const char *a2, ...)
{
  return [a1 _allowConcurrentFaceProcessing];
}

id objc_msgSend__allowConcurrentSceneProcessing(void *a1, const char *a2, ...)
{
  return [a1 _allowConcurrentSceneProcessing];
}

id objc_msgSend__allowProcessingCapturedFace(void *a1, const char *a2, ...)
{
  return [a1 _allowProcessingCapturedFace];
}

id objc_msgSend__analysisSpecificFetchPropertySets(void *a1, const char *a2, ...)
{
  return [a1 _analysisSpecificFetchPropertySets];
}

id objc_msgSend__cameraFaceOnly(void *a1, const char *a2, ...)
{
  return [a1 _cameraFaceOnly];
}

id objc_msgSend__cleanupHardFailures(void *a1, const char *a2, ...)
{
  return [a1 _cleanupHardFailures];
}

id objc_msgSend__collectAndReportAnalysisProgress(void *a1, const char *a2, ...)
{
  return [a1 _collectAndReportAnalysisProgress];
}

id objc_msgSend__collectAndReportProgress(void *a1, const char *a2, ...)
{
  return [a1 _collectAndReportProgress];
}

id objc_msgSend__concurrentBlurExposureRotationQueueCount(void *a1, const char *a2, ...)
{
  return [a1 _concurrentBlurExposureRotationQueueCount];
}

id objc_msgSend__concurrentFaceAnalysis(void *a1, const char *a2, ...)
{
  return [a1 _concurrentFaceAnalysis];
}

id objc_msgSend__concurrentFaceProcessing(void *a1, const char *a2, ...)
{
  return [a1 _concurrentFaceProcessing];
}

id objc_msgSend__concurrentFaceProcessingThreadCount(void *a1, const char *a2, ...)
{
  return [a1 _concurrentFaceProcessingThreadCount];
}

id objc_msgSend__concurrentFaceStagings(void *a1, const char *a2, ...)
{
  return [a1 _concurrentFaceStagings];
}

id objc_msgSend__concurrentQueueCount(void *a1, const char *a2, ...)
{
  return [a1 _concurrentQueueCount];
}

id objc_msgSend__concurrentSceneNetQueueCount(void *a1, const char *a2, ...)
{
  return [a1 _concurrentSceneNetQueueCount];
}

id objc_msgSend__dispatchAssetEntries(void *a1, const char *a2, ...)
{
  return [a1 _dispatchAssetEntries];
}

id objc_msgSend__partialAnalysisURL(void *a1, const char *a2, ...)
{
  return [a1 _partialAnalysisURL];
}

id objc_msgSend__performBackup(void *a1, const char *a2, ...)
{
  return [a1 _performBackup];
}

id objc_msgSend__performRestore(void *a1, const char *a2, ...)
{
  return [a1 _performRestore];
}

id objc_msgSend__prepare(void *a1, const char *a2, ...)
{
  return [a1 _prepare];
}

id objc_msgSend__prepareFaceAssetProcessingTask(void *a1, const char *a2, ...)
{
  return [a1 _prepareFaceAssetProcessingTask];
}

id objc_msgSend__prepareSceneAssetProcessingTask(void *a1, const char *a2, ...)
{
  return [a1 _prepareSceneAssetProcessingTask];
}

id objc_msgSend__process(void *a1, const char *a2, ...)
{
  return [a1 _process];
}

id objc_msgSend__processAssets(void *a1, const char *a2, ...)
{
  return [a1 _processAssets];
}

id objc_msgSend__processAssetsSerially(void *a1, const char *a2, ...)
{
  return [a1 _processAssetsSerially];
}

id objc_msgSend__processEntries(void *a1, const char *a2, ...)
{
  return [a1 _processEntries];
}

id objc_msgSend__processVideoAssetURLs(void *a1, const char *a2, ...)
{
  return [a1 _processVideoAssetURLs];
}

id objc_msgSend__processVideoLocalIdentifiers(void *a1, const char *a2, ...)
{
  return [a1 _processVideoLocalIdentifiers];
}

id objc_msgSend__processVideoRequests(void *a1, const char *a2, ...)
{
  return [a1 _processVideoRequests];
}

id objc_msgSend__publish(void *a1, const char *a2, ...)
{
  return [a1 _publish];
}

id objc_msgSend__removeTemporaryDownloadDirectory(void *a1, const char *a2, ...)
{
  return [a1 _removeTemporaryDownloadDirectory];
}

id objc_msgSend__reportCoreAnalyticsForSession(void *a1, const char *a2, ...)
{
  return [a1 _reportCoreAnalyticsForSession];
}

id objc_msgSend__reportEventPostCapturesProcessing(void *a1, const char *a2, ...)
{
  return [a1 _reportEventPostCapturesProcessing];
}

id objc_msgSend__resetChangeTokenAndProcessingStatusForFaceProcessing(void *a1, const char *a2, ...)
{
  return [a1 _resetChangeTokenAndProcessingStatusForFaceProcessing];
}

id objc_msgSend__resetCurrentFaceProgress(void *a1, const char *a2, ...)
{
  return [a1 _resetCurrentFaceProgress];
}

id objc_msgSend__resetEmbeddingClusteringProgress(void *a1, const char *a2, ...)
{
  return [a1 _resetEmbeddingClusteringProgress];
}

id objc_msgSend__resetFieldsPostCapturesProcessing(void *a1, const char *a2, ...)
{
  return [a1 _resetFieldsPostCapturesProcessing];
}

id objc_msgSend__resumePausedVideoAnalysis(void *a1, const char *a2, ...)
{
  return [a1 _resumePausedVideoAnalysis];
}

id objc_msgSend__schedule(void *a1, const char *a2, ...)
{
  return [a1 _schedule];
}

id objc_msgSend__shouldPerformBackup(void *a1, const char *a2, ...)
{
  return [a1 _shouldPerformBackup];
}

id objc_msgSend__updateAnalysisInfoOnAnalysisVersionChange(void *a1, const char *a2, ...)
{
  return [a1 _updateAnalysisInfoOnAnalysisVersionChange];
}

id objc_msgSend__updateOperatingSystemVersion(void *a1, const char *a2, ...)
{
  return [a1 _updateOperatingSystemVersion];
}

id objc_msgSend__updateVIPModels(void *a1, const char *a2, ...)
{
  return [a1 _updateVIPModels];
}

id objc_msgSend__videoAnalysisTypes(void *a1, const char *a2, ...)
{
  return [a1 _videoAnalysisTypes];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return [a1 absoluteString];
}

id objc_msgSend_acceptableCropRect(void *a1, const char *a2, ...)
{
  return [a1 acceptableCropRect];
}

id objc_msgSend_acceptableResources(void *a1, const char *a2, ...)
{
  return [a1 acceptableResources];
}

id objc_msgSend_actionClassifications(void *a1, const char *a2, ...)
{
  return [a1 actionClassifications];
}

id objc_msgSend_activityDelayInSeconds(void *a1, const char *a2, ...)
{
  return [a1 activityDelayInSeconds];
}

id objc_msgSend_activityScore(void *a1, const char *a2, ...)
{
  return [a1 activityScore];
}

id objc_msgSend_adjusted(void *a1, const char *a2, ...)
{
  return [a1 adjusted];
}

id objc_msgSend_adjustmentKeys(void *a1, const char *a2, ...)
{
  return [a1 adjustmentKeys];
}

id objc_msgSend_adjustmentTimestamp(void *a1, const char *a2, ...)
{
  return [a1 adjustmentTimestamp];
}

id objc_msgSend_adjustmentVersion(void *a1, const char *a2, ...)
{
  return [a1 adjustmentVersion];
}

id objc_msgSend_adjustmentsRequest(void *a1, const char *a2, ...)
{
  return [a1 adjustmentsRequest];
}

id objc_msgSend_aestheticScore(void *a1, const char *a2, ...)
{
  return [a1 aestheticScore];
}

id objc_msgSend_aestheticsRequest(void *a1, const char *a2, ...)
{
  return [a1 aestheticsRequest];
}

id objc_msgSend_algorithmVersion(void *a1, const char *a2, ...)
{
  return [a1 algorithmVersion];
}

id objc_msgSend_allApplications(void *a1, const char *a2, ...)
{
  return [a1 allApplications];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return [a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return [a1 allObjects];
}

id objc_msgSend_allPhotoLibraries(void *a1, const char *a2, ...)
{
  return [a1 allPhotoLibraries];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return [a1 allValues];
}

id objc_msgSend_allowStreaming(void *a1, const char *a2, ...)
{
  return [a1 allowStreaming];
}

id objc_msgSend_allowedClasses(void *a1, const char *a2, ...)
{
  return [a1 allowedClasses];
}

id objc_msgSend_allowedClients(void *a1, const char *a2, ...)
{
  return [a1 allowedClients];
}

id objc_msgSend_allowedRestoreTasks(void *a1, const char *a2, ...)
{
  return [a1 allowedRestoreTasks];
}

id objc_msgSend_analysis(void *a1, const char *a2, ...)
{
  return [a1 analysis];
}

id objc_msgSend_analysisResults(void *a1, const char *a2, ...)
{
  return [a1 analysisResults];
}

id objc_msgSend_analysisType(void *a1, const char *a2, ...)
{
  return [a1 analysisType];
}

id objc_msgSend_analysisTypes(void *a1, const char *a2, ...)
{
  return [a1 analysisTypes];
}

id objc_msgSend_analyzedDegraded(void *a1, const char *a2, ...)
{
  return [a1 analyzedDegraded];
}

id objc_msgSend_analyzedMovies(void *a1, const char *a2, ...)
{
  return [a1 analyzedMovies];
}

id objc_msgSend_analyzedPhotos(void *a1, const char *a2, ...)
{
  return [a1 analyzedPhotos];
}

id objc_msgSend_analyzedUndegraded(void *a1, const char *a2, ...)
{
  return [a1 analyzedUndegraded];
}

id objc_msgSend_animatedStickerTimeRange(void *a1, const char *a2, ...)
{
  return [a1 animatedStickerTimeRange];
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return [a1 anyObject];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return [a1 array];
}

id objc_msgSend_asset(void *a1, const char *a2, ...)
{
  return [a1 asset];
}

id objc_msgSend_assetCloudIdentifier(void *a1, const char *a2, ...)
{
  return [a1 assetCloudIdentifier];
}

id objc_msgSend_assetDirectory(void *a1, const char *a2, ...)
{
  return [a1 assetDirectory];
}

id objc_msgSend_assetEntries(void *a1, const char *a2, ...)
{
  return [a1 assetEntries];
}

id objc_msgSend_assetFetchCount(void *a1, const char *a2, ...)
{
  return [a1 assetFetchCount];
}

id objc_msgSend_assetIdentifier(void *a1, const char *a2, ...)
{
  return [a1 assetIdentifier];
}

id objc_msgSend_assetLocalIdentifier(void *a1, const char *a2, ...)
{
  return [a1 assetLocalIdentifier];
}

id objc_msgSend_assetLocalIdentifiers(void *a1, const char *a2, ...)
{
  return [a1 assetLocalIdentifiers];
}

id objc_msgSend_assetPriorities(void *a1, const char *a2, ...)
{
  return [a1 assetPriorities];
}

id objc_msgSend_assetURL(void *a1, const char *a2, ...)
{
  return [a1 assetURL];
}

id objc_msgSend_assetURLExtension(void *a1, const char *a2, ...)
{
  return [a1 assetURLExtension];
}

id objc_msgSend_assets(void *a1, const char *a2, ...)
{
  return [a1 assets];
}

id objc_msgSend_assetsDownloadAllowed(void *a1, const char *a2, ...)
{
  return [a1 assetsDownloadAllowed];
}

id objc_msgSend_assetsdClient(void *a1, const char *a2, ...)
{
  return [a1 assetsdClient];
}

id objc_msgSend_asyncCacheRequestIdealDimension(void *a1, const char *a2, ...)
{
  return [a1 asyncCacheRequestIdealDimension];
}

id objc_msgSend_asyncLoadSharedPhotoFormatsObjects(void *a1, const char *a2, ...)
{
  return [a1 asyncLoadSharedPhotoFormatsObjects];
}

id objc_msgSend_attemptCount(void *a1, const char *a2, ...)
{
  return [a1 attemptCount];
}

id objc_msgSend_attempts(void *a1, const char *a2, ...)
{
  return [a1 attempts];
}

id objc_msgSend_attributeSet(void *a1, const char *a2, ...)
{
  return [a1 attributeSet];
}

id objc_msgSend_audioClassification(void *a1, const char *a2, ...)
{
  return [a1 audioClassification];
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return [a1 auditToken];
}

id objc_msgSend_autoCancellable(void *a1, const char *a2, ...)
{
  return [a1 autoCancellable];
}

id objc_msgSend_background(void *a1, const char *a2, ...)
{
  return [a1 background];
}

id objc_msgSend_backgroundLayer(void *a1, const char *a2, ...)
{
  return [a1 backgroundLayer];
}

id objc_msgSend_batchAssetCount(void *a1, const char *a2, ...)
{
  return [a1 batchAssetCount];
}

id objc_msgSend_beginTransaction(void *a1, const char *a2, ...)
{
  return [a1 beginTransaction];
}

id objc_msgSend_bestPlaybackRect(void *a1, const char *a2, ...)
{
  return [a1 bestPlaybackRect];
}

id objc_msgSend_blurExposureRotationCompleted(void *a1, const char *a2, ...)
{
  return [a1 blurExposureRotationCompleted];
}

id objc_msgSend_blurrinessScore(void *a1, const char *a2, ...)
{
  return [a1 blurrinessScore];
}

id objc_msgSend_bodyCenterX(void *a1, const char *a2, ...)
{
  return [a1 bodyCenterX];
}

id objc_msgSend_bodyCenterY(void *a1, const char *a2, ...)
{
  return [a1 bodyCenterY];
}

id objc_msgSend_bodyHeight(void *a1, const char *a2, ...)
{
  return [a1 bodyHeight];
}

id objc_msgSend_bodyWidth(void *a1, const char *a2, ...)
{
  return [a1 bodyWidth];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return [a1 BOOLValue];
}

id objc_msgSend_boundingBox(void *a1, const char *a2, ...)
{
  return [a1 boundingBox];
}

id objc_msgSend_buddyCheckRequired(void *a1, const char *a2, ...)
{
  return [a1 buddyCheckRequired];
}

id objc_msgSend_bundleID(void *a1, const char *a2, ...)
{
  return [a1 bundleID];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return [a1 bundleIdentifier];
}

id objc_msgSend_bypassDownload(void *a1, const char *a2, ...)
{
  return [a1 bypassDownload];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return [a1 bytes];
}

id objc_msgSend_cacheCurrentFaceProgress(void *a1, const char *a2, ...)
{
  return [a1 cacheCurrentFaceProgress];
}

id objc_msgSend_cacheMediaAnalysisImagePriority1Progress(void *a1, const char *a2, ...)
{
  return [a1 cacheMediaAnalysisImagePriority1Progress];
}

id objc_msgSend_cachesResources(void *a1, const char *a2, ...)
{
  return [a1 cachesResources];
}

id objc_msgSend_callStackSymbols(void *a1, const char *a2, ...)
{
  return [a1 callStackSymbols];
}

id objc_msgSend_canPublishLivePhotoVariationSuggestion(void *a1, const char *a2, ...)
{
  return [a1 canPublishLivePhotoVariationSuggestion];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return [a1 cancel];
}

id objc_msgSend_cancelActivity(void *a1, const char *a2, ...)
{
  return [a1 cancelActivity];
}

id objc_msgSend_cancelAllRequests(void *a1, const char *a2, ...)
{
  return [a1 cancelAllRequests];
}

id objc_msgSend_cancelAllTasks(void *a1, const char *a2, ...)
{
  return [a1 cancelAllTasks];
}

id objc_msgSend_cancelBackgroundTasks(void *a1, const char *a2, ...)
{
  return [a1 cancelBackgroundTasks];
}

id objc_msgSend_cancelBlock(void *a1, const char *a2, ...)
{
  return [a1 cancelBlock];
}

id objc_msgSend_centerX(void *a1, const char *a2, ...)
{
  return [a1 centerX];
}

id objc_msgSend_centerY(void *a1, const char *a2, ...)
{
  return [a1 centerY];
}

id objc_msgSend_cgImage(void *a1, const char *a2, ...)
{
  return [a1 cgImage];
}

id objc_msgSend_changeBatch(void *a1, const char *a2, ...)
{
  return [a1 changeBatch];
}

id objc_msgSend_changeCount(void *a1, const char *a2, ...)
{
  return [a1 changeCount];
}

id objc_msgSend_changeToken(void *a1, const char *a2, ...)
{
  return [a1 changeToken];
}

id objc_msgSend_characterRecognitionProperties(void *a1, const char *a2, ...)
{
  return [a1 characterRecognitionProperties];
}

id objc_msgSend_checkAndMarkPriorityAssets(void *a1, const char *a2, ...)
{
  return [a1 checkAndMarkPriorityAssets];
}

id objc_msgSend_checkFullyCharged(void *a1, const char *a2, ...)
{
  return [a1 checkFullyCharged];
}

id objc_msgSend_checkPluggedIn(void *a1, const char *a2, ...)
{
  return [a1 checkPluggedIn];
}

id objc_msgSend_checkScreenLocked(void *a1, const char *a2, ...)
{
  return [a1 checkScreenLocked];
}

id objc_msgSend_checkThermalPressure(void *a1, const char *a2, ...)
{
  return [a1 checkThermalPressure];
}

id objc_msgSend_cityNatureRequest(void *a1, const char *a2, ...)
{
  return [a1 cityNatureRequest];
}

id objc_msgSend_classificationRequest(void *a1, const char *a2, ...)
{
  return [a1 classificationRequest];
}

id objc_msgSend_classifyImageRequest(void *a1, const char *a2, ...)
{
  return [a1 classifyImageRequest];
}

id objc_msgSend_classifyVIPPets(void *a1, const char *a2, ...)
{
  return [a1 classifyVIPPets];
}

id objc_msgSend_clearPrioritizedAssets(void *a1, const char *a2, ...)
{
  return [a1 clearPrioritizedAssets];
}

id objc_msgSend_close(void *a1, const char *a2, ...)
{
  return [a1 close];
}

id objc_msgSend_closeDatabase(void *a1, const char *a2, ...)
{
  return [a1 closeDatabase];
}

id objc_msgSend_clusterFaceCountThreshold(void *a1, const char *a2, ...)
{
  return [a1 clusterFaceCountThreshold];
}

id objc_msgSend_clusterFaces(void *a1, const char *a2, ...)
{
  return [a1 clusterFaces];
}

id objc_msgSend_clusterFacesIfNecessary(void *a1, const char *a2, ...)
{
  return [a1 clusterFacesIfNecessary];
}

id objc_msgSend_clusterIncludeTorsoOnlyFaces(void *a1, const char *a2, ...)
{
  return [a1 clusterIncludeTorsoOnlyFaces];
}

id objc_msgSend_clustererState(void *a1, const char *a2, ...)
{
  return [a1 clustererState];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return [a1 code];
}

id objc_msgSend_colorNormalizationData(void *a1, const char *a2, ...)
{
  return [a1 colorNormalizationData];
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return [a1 commit];
}

id objc_msgSend_commitTransaction(void *a1, const char *a2, ...)
{
  return [a1 commitTransaction];
}

id objc_msgSend_completeSceneProcessing(void *a1, const char *a2, ...)
{
  return [a1 completeSceneProcessing];
}

id objc_msgSend_completedLocalIdentifiersFromComputeSync(void *a1, const char *a2, ...)
{
  return [a1 completedLocalIdentifiersFromComputeSync];
}

id objc_msgSend_completedUnitCount(void *a1, const char *a2, ...)
{
  return [a1 completedUnitCount];
}

id objc_msgSend_completionHandler(void *a1, const char *a2, ...)
{
  return [a1 completionHandler];
}

id objc_msgSend_compressor(void *a1, const char *a2, ...)
{
  return [a1 compressor];
}

id objc_msgSend_concurrentAssetCount(void *a1, const char *a2, ...)
{
  return [a1 concurrentAssetCount];
}

id objc_msgSend_confidence(void *a1, const char *a2, ...)
{
  return [a1 confidence];
}

id objc_msgSend_confidenceValue(void *a1, const char *a2, ...)
{
  return [a1 confidenceValue];
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return [a1 connection];
}

id objc_msgSend_consumeSandboxExtension(void *a1, const char *a2, ...)
{
  return [a1 consumeSandboxExtension];
}

id objc_msgSend_contacts(void *a1, const char *a2, ...)
{
  return [a1 contacts];
}

id objc_msgSend_contentAnalysis(void *a1, const char *a2, ...)
{
  return [a1 contentAnalysis];
}

id objc_msgSend_contentRating(void *a1, const char *a2, ...)
{
  return [a1 contentRating];
}

id objc_msgSend_coordinate(void *a1, const char *a2, ...)
{
  return [a1 coordinate];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return [a1 copy];
}

id objc_msgSend_copyNextSampleBuffer(void *a1, const char *a2, ...)
{
  return [a1 copyNextSampleBuffer];
}

id objc_msgSend_cost(void *a1, const char *a2, ...)
{
  return [a1 cost];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return [a1 count];
}

id objc_msgSend_countOfDirtyFaceGroups(void *a1, const char *a2, ...)
{
  return [a1 countOfDirtyFaceGroups];
}

id objc_msgSend_countOfFaceCropsToBeGenerated(void *a1, const char *a2, ...)
{
  return [a1 countOfFaceCropsToBeGenerated];
}

id objc_msgSend_countOfUnprocessedFaceCrops(void *a1, const char *a2, ...)
{
  return [a1 countOfUnprocessedFaceCrops];
}

id objc_msgSend_creationDate(void *a1, const char *a2, ...)
{
  return [a1 creationDate];
}

id objc_msgSend_creationRequestForFace(void *a1, const char *a2, ...)
{
  return [a1 creationRequestForFace];
}

id objc_msgSend_creationRequestForPerson(void *a1, const char *a2, ...)
{
  return [a1 creationRequestForPerson];
}

id objc_msgSend_curationScore(void *a1, const char *a2, ...)
{
  return [a1 curationScore];
}

id objc_msgSend_currentAssetPriority(void *a1, const char *a2, ...)
{
  return [a1 currentAssetPriority];
}

id objc_msgSend_currentAttemptDate(void *a1, const char *a2, ...)
{
  return [a1 currentAttemptDate];
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return [a1 currentCalendar];
}

id objc_msgSend_currentOutstandingTasks(void *a1, const char *a2, ...)
{
  return [a1 currentOutstandingTasks];
}

id objc_msgSend_currentPendingTasks(void *a1, const char *a2, ...)
{
  return [a1 currentPendingTasks];
}

id objc_msgSend_currentProcessingVersion(void *a1, const char *a2, ...)
{
  return [a1 currentProcessingVersion];
}

id objc_msgSend_currentScheduleDelay(void *a1, const char *a2, ...)
{
  return [a1 currentScheduleDelay];
}

id objc_msgSend_currentToken(void *a1, const char *a2, ...)
{
  return [a1 currentToken];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return [a1 data];
}

id objc_msgSend_dataLength(void *a1, const char *a2, ...)
{
  return [a1 dataLength];
}

id objc_msgSend_dataRepresentation(void *a1, const char *a2, ...)
{
  return [a1 dataRepresentation];
}

id objc_msgSend_database(void *a1, const char *a2, ...)
{
  return [a1 database];
}

id objc_msgSend_databaseDirectoryURL(void *a1, const char *a2, ...)
{
  return [a1 databaseDirectoryURL];
}

id objc_msgSend_databaseUUID(void *a1, const char *a2, ...)
{
  return [a1 databaseUUID];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return [a1 date];
}

id objc_msgSend_dateFormatter(void *a1, const char *a2, ...)
{
  return [a1 dateFormatter];
}

id objc_msgSend_dateFormatterDateTime(void *a1, const char *a2, ...)
{
  return [a1 dateFormatterDateTime];
}

id objc_msgSend_day(void *a1, const char *a2, ...)
{
  return [a1 day];
}

id objc_msgSend_decompressor(void *a1, const char *a2, ...)
{
  return [a1 decompressor];
}

id objc_msgSend_defaultANEDevice(void *a1, const char *a2, ...)
{
  return [a1 defaultANEDevice];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return [a1 defaultManager];
}

id objc_msgSend_defaultPhotoLibrary(void *a1, const char *a2, ...)
{
  return [a1 defaultPhotoLibrary];
}

id objc_msgSend_defaultPrivateConfiguration(void *a1, const char *a2, ...)
{
  return [a1 defaultPrivateConfiguration];
}

id objc_msgSend_defaultProcessingVersion(void *a1, const char *a2, ...)
{
  return [a1 defaultProcessingVersion];
}

id objc_msgSend_defaultRevisionNumber(void *a1, const char *a2, ...)
{
  return [a1 defaultRevisionNumber];
}

id objc_msgSend_deferredProcessingNeeded(void *a1, const char *a2, ...)
{
  return [a1 deferredProcessingNeeded];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return [a1 description];
}

id objc_msgSend_descriptorData(void *a1, const char *a2, ...)
{
  return [a1 descriptorData];
}

id objc_msgSend_destroy(void *a1, const char *a2, ...)
{
  return [a1 destroy];
}

id objc_msgSend_detectedFaces(void *a1, const char *a2, ...)
{
  return [a1 detectedFaces];
}

id objc_msgSend_detectedPersons(void *a1, const char *a2, ...)
{
  return [a1 detectedPersons];
}

id objc_msgSend_detectionType(void *a1, const char *a2, ...)
{
  return [a1 detectionType];
}

id objc_msgSend_detectors(void *a1, const char *a2, ...)
{
  return [a1 detectors];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return [a1 dictionary];
}

id objc_msgSend_didUpdateHomes(void *a1, const char *a2, ...)
{
  return [a1 didUpdateHomes];
}

id objc_msgSend_disable(void *a1, const char *a2, ...)
{
  return [a1 disable];
}

id objc_msgSend_disablePhotosPostCaptureProcessing(void *a1, const char *a2, ...)
{
  return [a1 disablePhotosPostCaptureProcessing];
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return [a1 distantPast];
}

id objc_msgSend_documentRequest(void *a1, const char *a2, ...)
{
  return [a1 documentRequest];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return [a1 domain];
}

id objc_msgSend_domainInfo(void *a1, const char *a2, ...)
{
  return [a1 domainInfo];
}

id objc_msgSend_domainKey(void *a1, const char *a2, ...)
{
  return [a1 domainKey];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return [a1 doubleValue];
}

id objc_msgSend_download(void *a1, const char *a2, ...)
{
  return [a1 download];
}

id objc_msgSend_downloadInactiveTimeInterval(void *a1, const char *a2, ...)
{
  return [a1 downloadInactiveTimeInterval];
}

id objc_msgSend_downloadRequests(void *a1, const char *a2, ...)
{
  return [a1 downloadRequests];
}

id objc_msgSend_downloadResource(void *a1, const char *a2, ...)
{
  return [a1 downloadResource];
}

id objc_msgSend_downloadStatus(void *a1, const char *a2, ...)
{
  return [a1 downloadStatus];
}

id objc_msgSend_downloadTimedout(void *a1, const char *a2, ...)
{
  return [a1 downloadTimedout];
}

id objc_msgSend_downloadURL(void *a1, const char *a2, ...)
{
  return [a1 downloadURL];
}

id objc_msgSend_downloadedData(void *a1, const char *a2, ...)
{
  return [a1 downloadedData];
}

id objc_msgSend_duplicateMatchingAlternateFeature(void *a1, const char *a2, ...)
{
  return [a1 duplicateMatchingAlternateFeature];
}

id objc_msgSend_duplicateMatchingFeature(void *a1, const char *a2, ...)
{
  return [a1 duplicateMatchingFeature];
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return [a1 duration];
}

id objc_msgSend_elapsedTimeSeconds(void *a1, const char *a2, ...)
{
  return [a1 elapsedTimeSeconds];
}

id objc_msgSend_elementCount(void *a1, const char *a2, ...)
{
  return [a1 elementCount];
}

id objc_msgSend_elementType(void *a1, const char *a2, ...)
{
  return [a1 elementType];
}

id objc_msgSend_embeddingResults(void *a1, const char *a2, ...)
{
  return [a1 embeddingResults];
}

id objc_msgSend_embeddingVersion(void *a1, const char *a2, ...)
{
  return [a1 embeddingVersion];
}

id objc_msgSend_embeddings(void *a1, const char *a2, ...)
{
  return [a1 embeddings];
}

id objc_msgSend_enable(void *a1, const char *a2, ...)
{
  return [a1 enable];
}

id objc_msgSend_enableMultiLibraryMode(void *a1, const char *a2, ...)
{
  return [a1 enableMultiLibraryMode];
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return [a1 enabled];
}

id objc_msgSend_enabledByDefault(void *a1, const char *a2, ...)
{
  return [a1 enabledByDefault];
}

id objc_msgSend_entityIdentifier(void *a1, const char *a2, ...)
{
  return [a1 entityIdentifier];
}

id objc_msgSend_entityUniqueIdentifier(void *a1, const char *a2, ...)
{
  return [a1 entityUniqueIdentifier];
}

id objc_msgSend_entryCount(void *a1, const char *a2, ...)
{
  return [a1 entryCount];
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return [a1 error];
}

id objc_msgSend_errorCode(void *a1, const char *a2, ...)
{
  return [a1 errorCode];
}

id objc_msgSend_errorLine(void *a1, const char *a2, ...)
{
  return [a1 errorLine];
}

id objc_msgSend_existingAnalysis(void *a1, const char *a2, ...)
{
  return [a1 existingAnalysis];
}

id objc_msgSend_exists(void *a1, const char *a2, ...)
{
  return [a1 exists];
}

id objc_msgSend_exitKnownTimeoutRisk(void *a1, const char *a2, ...)
{
  return [a1 exitKnownTimeoutRisk];
}

id objc_msgSend_exitStatus(void *a1, const char *a2, ...)
{
  return [a1 exitStatus];
}

id objc_msgSend_expectedClasses(void *a1, const char *a2, ...)
{
  return [a1 expectedClasses];
}

id objc_msgSend_expectedDuration(void *a1, const char *a2, ...)
{
  return [a1 expectedDuration];
}

id objc_msgSend_exportToLegacyDictionary(void *a1, const char *a2, ...)
{
  return [a1 exportToLegacyDictionary];
}

id objc_msgSend_exportedInterface(void *a1, const char *a2, ...)
{
  return [a1 exportedInterface];
}

id objc_msgSend_exposureScore(void *a1, const char *a2, ...)
{
  return [a1 exposureScore];
}

id objc_msgSend_extendedSceneClassId(void *a1, const char *a2, ...)
{
  return [a1 extendedSceneClassId];
}

id objc_msgSend_extendedSceneIdentifier(void *a1, const char *a2, ...)
{
  return [a1 extendedSceneIdentifier];
}

id objc_msgSend_externalPowerRequired(void *a1, const char *a2, ...)
{
  return [a1 externalPowerRequired];
}

id objc_msgSend_faceAdjustmentVersion(void *a1, const char *a2, ...)
{
  return [a1 faceAdjustmentVersion];
}

id objc_msgSend_faceAnalysisVersion(void *a1, const char *a2, ...)
{
  return [a1 faceAnalysisVersion];
}

id objc_msgSend_faceClusteringProperties(void *a1, const char *a2, ...)
{
  return [a1 faceClusteringProperties];
}

id objc_msgSend_faceCrop(void *a1, const char *a2, ...)
{
  return [a1 faceCrop];
}

id objc_msgSend_faceprint(void *a1, const char *a2, ...)
{
  return [a1 faceprint];
}

id objc_msgSend_faceprintData(void *a1, const char *a2, ...)
{
  return [a1 faceprintData];
}

id objc_msgSend_faces(void *a1, const char *a2, ...)
{
  return [a1 faces];
}

id objc_msgSend_failureScore(void *a1, const char *a2, ...)
{
  return [a1 failureScore];
}

id objc_msgSend_familyName(void *a1, const char *a2, ...)
{
  return [a1 familyName];
}

id objc_msgSend_featureCodes(void *a1, const char *a2, ...)
{
  return [a1 featureCodes];
}

id objc_msgSend_fetchPropertySetsIfNeeded(void *a1, const char *a2, ...)
{
  return [a1 fetchPropertySetsIfNeeded];
}

id objc_msgSend_fetchedObjects(void *a1, const char *a2, ...)
{
  return [a1 fetchedObjects];
}

id objc_msgSend_filePath(void *a1, const char *a2, ...)
{
  return [a1 filePath];
}

id objc_msgSend_fileSize(void *a1, const char *a2, ...)
{
  return [a1 fileSize];
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return [a1 fileSystemRepresentation];
}

id objc_msgSend_fingerprintHashes(void *a1, const char *a2, ...)
{
  return [a1 fingerprintHashes];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return [a1 firstObject];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return [a1 floatValue];
}

id objc_msgSend_flush(void *a1, const char *a2, ...)
{
  return [a1 flush];
}

id objc_msgSend_flushWAL(void *a1, const char *a2, ...)
{
  return [a1 flushWAL];
}

id objc_msgSend_fractionCompleted(void *a1, const char *a2, ...)
{
  return [a1 fractionCompleted];
}

id objc_msgSend_frequentProgressReporting(void *a1, const char *a2, ...)
{
  return [a1 frequentProgressReporting];
}

id objc_msgSend_gallery(void *a1, const char *a2, ...)
{
  return [a1 gallery];
}

id objc_msgSend_gatherAvailableRequests(void *a1, const char *a2, ...)
{
  return [a1 gatherAvailableRequests];
}

id objc_msgSend_getJobScheduler(void *a1, const char *a2, ...)
{
  return [a1 getJobScheduler];
}

id objc_msgSend_getObject(void *a1, const char *a2, ...)
{
  return [a1 getObject];
}

id objc_msgSend_getTranscript(void *a1, const char *a2, ...)
{
  return [a1 getTranscript];
}

id objc_msgSend_getUnifiedEmbeddingVersion(void *a1, const char *a2, ...)
{
  return [a1 getUnifiedEmbeddingVersion];
}

id objc_msgSend_givenName(void *a1, const char *a2, ...)
{
  return [a1 givenName];
}

id objc_msgSend_globalSession(void *a1, const char *a2, ...)
{
  return [a1 globalSession];
}

id objc_msgSend_groupingIdentifier(void *a1, const char *a2, ...)
{
  return [a1 groupingIdentifier];
}

id objc_msgSend_handleLostConnection(void *a1, const char *a2, ...)
{
  return [a1 handleLostConnection];
}

id objc_msgSend_harmoniousColorScore(void *a1, const char *a2, ...)
{
  return [a1 harmoniousColorScore];
}

id objc_msgSend_hasAdjustments(void *a1, const char *a2, ...)
{
  return [a1 hasAdjustments];
}

id objc_msgSend_hasBytesAvailable(void *a1, const char *a2, ...)
{
  return [a1 hasBytesAvailable];
}

id objc_msgSend_hasIncrementalChanges(void *a1, const char *a2, ...)
{
  return [a1 hasIncrementalChanges];
}

id objc_msgSend_hasMigration(void *a1, const char *a2, ...)
{
  return [a1 hasMigration];
}

id objc_msgSend_hasOutstandingTransactions(void *a1, const char *a2, ...)
{
  return [a1 hasOutstandingTransactions];
}

id objc_msgSend_hasPanorama(void *a1, const char *a2, ...)
{
  return [a1 hasPanorama];
}

id objc_msgSend_hasWifiOrEthernetConnection(void *a1, const char *a2, ...)
{
  return [a1 hasWifiOrEthernetConnection];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return [a1 hash];
}

id objc_msgSend_hashData(void *a1, const char *a2, ...)
{
  return [a1 hashData];
}

id objc_msgSend_header(void *a1, const char *a2, ...)
{
  return [a1 header];
}

id objc_msgSend_highPrecisionThreshold(void *a1, const char *a2, ...)
{
  return [a1 highPrecisionThreshold];
}

id objc_msgSend_highRecallThreshold(void *a1, const char *a2, ...)
{
  return [a1 highRecallThreshold];
}

id objc_msgSend_homekit(void *a1, const char *a2, ...)
{
  return [a1 homekit];
}

id objc_msgSend_homes(void *a1, const char *a2, ...)
{
  return [a1 homes];
}

id objc_msgSend_iconicScore(void *a1, const char *a2, ...)
{
  return [a1 iconicScore];
}

id objc_msgSend_idType(void *a1, const char *a2, ...)
{
  return [a1 idType];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return [a1 identifier];
}

id objc_msgSend_image(void *a1, const char *a2, ...)
{
  return [a1 image];
}

id objc_msgSend_imageCaptionVersion(void *a1, const char *a2, ...)
{
  return [a1 imageCaptionVersion];
}

id objc_msgSend_imageEmbeddingVersion(void *a1, const char *a2, ...)
{
  return [a1 imageEmbeddingVersion];
}

id objc_msgSend_imageOnly(void *a1, const char *a2, ...)
{
  return [a1 imageOnly];
}

id objc_msgSend_imageRegions(void *a1, const char *a2, ...)
{
  return [a1 imageRegions];
}

id objc_msgSend_imagefingerprintsRequest(void *a1, const char *a2, ...)
{
  return [a1 imagefingerprintsRequest];
}

id objc_msgSend_imageprintWrapper(void *a1, const char *a2, ...)
{
  return [a1 imageprintWrapper];
}

id objc_msgSend_immersivenessScore(void *a1, const char *a2, ...)
{
  return [a1 immersivenessScore];
}

id objc_msgSend_importProperties(void *a1, const char *a2, ...)
{
  return [a1 importProperties];
}

id objc_msgSend_importedBy(void *a1, const char *a2, ...)
{
  return [a1 importedBy];
}

id objc_msgSend_inProcessAssetBudget(void *a1, const char *a2, ...)
{
  return [a1 inProcessAssetBudget];
}

id objc_msgSend_includeCN(void *a1, const char *a2, ...)
{
  return [a1 includeCN];
}

id objc_msgSend_includeDMF(void *a1, const char *a2, ...)
{
  return [a1 includeDMF];
}

id objc_msgSend_includeDO(void *a1, const char *a2, ...)
{
  return [a1 includeDO];
}

id objc_msgSend_includeDocument(void *a1, const char *a2, ...)
{
  return [a1 includeDocument];
}

id objc_msgSend_includeIVS(void *a1, const char *a2, ...)
{
  return [a1 includeIVS];
}

id objc_msgSend_includeJunk(void *a1, const char *a2, ...)
{
  return [a1 includeJunk];
}

id objc_msgSend_includeLM(void *a1, const char *a2, ...)
{
  return [a1 includeLM];
}

id objc_msgSend_includeMeme(void *a1, const char *a2, ...)
{
  return [a1 includeMeme];
}

id objc_msgSend_includeNSFW(void *a1, const char *a2, ...)
{
  return [a1 includeNSFW];
}

id objc_msgSend_includePA(void *a1, const char *a2, ...)
{
  return [a1 includePA];
}

id objc_msgSend_includeRotation(void *a1, const char *a2, ...)
{
  return [a1 includeRotation];
}

id objc_msgSend_includeSDG(void *a1, const char *a2, ...)
{
  return [a1 includeSDG];
}

id objc_msgSend_includeSE(void *a1, const char *a2, ...)
{
  return [a1 includeSE];
}

id objc_msgSend_includeSO(void *a1, const char *a2, ...)
{
  return [a1 includeSO];
}

id objc_msgSend_includeWP(void *a1, const char *a2, ...)
{
  return [a1 includeWP];
}

id objc_msgSend_increaseProcessedJobCountByOne(void *a1, const char *a2, ...)
{
  return [a1 increaseProcessedJobCountByOne];
}

id objc_msgSend_inexpensiveNetworkConnectivityRequired(void *a1, const char *a2, ...)
{
  return [a1 inexpensiveNetworkConnectivityRequired];
}

id objc_msgSend_inputFeatureName(void *a1, const char *a2, ...)
{
  return [a1 inputFeatureName];
}

id objc_msgSend_inputSize(void *a1, const char *a2, ...)
{
  return [a1 inputSize];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return [a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return [a1 integerValue];
}

id objc_msgSend_interestingSubjectScore(void *a1, const char *a2, ...)
{
  return [a1 interestingSubjectScore];
}

id objc_msgSend_interrupt(void *a1, const char *a2, ...)
{
  return [a1 interrupt];
}

id objc_msgSend_interruptBackgroundTasks(void *a1, const char *a2, ...)
{
  return [a1 interruptBackgroundTasks];
}

id objc_msgSend_interval(void *a1, const char *a2, ...)
{
  return [a1 interval];
}

id objc_msgSend_intrusiveObjectPresenceScore(void *a1, const char *a2, ...)
{
  return [a1 intrusiveObjectPresenceScore];
}

id objc_msgSend_isAnalysisCompleteFromComputeSync(void *a1, const char *a2, ...)
{
  return [a1 isAnalysisCompleteFromComputeSync];
}

id objc_msgSend_isAnalysisFromComputeSync(void *a1, const char *a2, ...)
{
  return [a1 isAnalysisFromComputeSync];
}

id objc_msgSend_isBestResource(void *a1, const char *a2, ...)
{
  return [a1 isBestResource];
}

id objc_msgSend_isCanceled(void *a1, const char *a2, ...)
{
  return [a1 isCanceled];
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return [a1 isCancelled];
}

id objc_msgSend_isCaptionOTAEnabled(void *a1, const char *a2, ...)
{
  return [a1 isCaptionOTAEnabled];
}

id objc_msgSend_isCloudPhotoLibraryEnabled(void *a1, const char *a2, ...)
{
  return [a1 isCloudPhotoLibraryEnabled];
}

id objc_msgSend_isCompressed(void *a1, const char *a2, ...)
{
  return [a1 isCompressed];
}

id objc_msgSend_isDegraded(void *a1, const char *a2, ...)
{
  return [a1 isDegraded];
}

id objc_msgSend_isDeletePending(void *a1, const char *a2, ...)
{
  return [a1 isDeletePending];
}

id objc_msgSend_isExecuting(void *a1, const char *a2, ...)
{
  return [a1 isExecuting];
}

id objc_msgSend_isFaceClassificationEnabled(void *a1, const char *a2, ...)
{
  return [a1 isFaceClassificationEnabled];
}

id objc_msgSend_isFinished(void *a1, const char *a2, ...)
{
  return [a1 isFinished];
}

id objc_msgSend_isHidden(void *a1, const char *a2, ...)
{
  return [a1 isHidden];
}

id objc_msgSend_isHomePod(void *a1, const char *a2, ...)
{
  return [a1 isHomePod];
}

id objc_msgSend_isLocallyAvailable(void *a1, const char *a2, ...)
{
  return [a1 isLocallyAvailable];
}

id objc_msgSend_isMUBackboneEnabled(void *a1, const char *a2, ...)
{
  return [a1 isMUBackboneEnabled];
}

id objc_msgSend_isMovieAsset(void *a1, const char *a2, ...)
{
  return [a1 isMovieAsset];
}

id objc_msgSend_isPerFrameAnalysisEnabled(void *a1, const char *a2, ...)
{
  return [a1 isPerFrameAnalysisEnabled];
}

id objc_msgSend_isPhoto(void *a1, const char *a2, ...)
{
  return [a1 isPhoto];
}

id objc_msgSend_isPrimary(void *a1, const char *a2, ...)
{
  return [a1 isPrimary];
}

id objc_msgSend_isReadyForAnalysis(void *a1, const char *a2, ...)
{
  return [a1 isReadyForAnalysis];
}

id objc_msgSend_isReadyForAnalysisCPLInitialDownloadCompleted(void *a1, const char *a2, ...)
{
  return [a1 isReadyForAnalysisCPLInitialDownloadCompleted];
}

id objc_msgSend_isScreenshot(void *a1, const char *a2, ...)
{
  return [a1 isScreenshot];
}

id objc_msgSend_isSystemPhotoLibrary(void *a1, const char *a2, ...)
{
  return [a1 isSystemPhotoLibrary];
}

id objc_msgSend_isTrashed(void *a1, const char *a2, ...)
{
  return [a1 isTrashed];
}

id objc_msgSend_isVideo(void *a1, const char *a2, ...)
{
  return [a1 isVideo];
}

id objc_msgSend_iterations(void *a1, const char *a2, ...)
{
  return [a1 iterations];
}

id objc_msgSend_junkImageRequest(void *a1, const char *a2, ...)
{
  return [a1 junkImageRequest];
}

id objc_msgSend_keyFrameTime(void *a1, const char *a2, ...)
{
  return [a1 keyFrameTime];
}

id objc_msgSend_labels(void *a1, const char *a2, ...)
{
  return [a1 labels];
}

id objc_msgSend_landmarkRequest(void *a1, const char *a2, ...)
{
  return [a1 landmarkRequest];
}

id objc_msgSend_lastAttemptDate(void *a1, const char *a2, ...)
{
  return [a1 lastAttemptDate];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return [a1 lastPathComponent];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return [a1 length];
}

id objc_msgSend_libraryInternalClient(void *a1, const char *a2, ...)
{
  return [a1 libraryInternalClient];
}

id objc_msgSend_librarySpecificFetchOptions(void *a1, const char *a2, ...)
{
  return [a1 librarySpecificFetchOptions];
}

id objc_msgSend_livelyColorScore(void *a1, const char *a2, ...)
{
  return [a1 livelyColorScore];
}

id objc_msgSend_loadMetrics(void *a1, const char *a2, ...)
{
  return [a1 loadMetrics];
}

id objc_msgSend_loadPersonsModelAndInitializeFaceAnalyzerWrapper(void *a1, const char *a2, ...)
{
  return [a1 loadPersonsModelAndInitializeFaceAnalyzerWrapper];
}

id objc_msgSend_localAnalysisStage(void *a1, const char *a2, ...)
{
  return [a1 localAnalysisStage];
}

id objc_msgSend_localIdentifier(void *a1, const char *a2, ...)
{
  return [a1 localIdentifier];
}

id objc_msgSend_localizedLabelDictionary(void *a1, const char *a2, ...)
{
  return [a1 localizedLabelDictionary];
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return [a1 location];
}

id objc_msgSend_logDescription(void *a1, const char *a2, ...)
{
  return [a1 logDescription];
}

id objc_msgSend_logPrefix(void *a1, const char *a2, ...)
{
  return [a1 logPrefix];
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return [a1 longLongValue];
}

id objc_msgSend_longValue(void *a1, const char *a2, ...)
{
  return [a1 longValue];
}

id objc_msgSend_lowKeyLightingScore(void *a1, const char *a2, ...)
{
  return [a1 lowKeyLightingScore];
}

id objc_msgSend_lowLight(void *a1, const char *a2, ...)
{
  return [a1 lowLight];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return [a1 lowercaseString];
}

id objc_msgSend_main(void *a1, const char *a2, ...)
{
  return [a1 main];
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return [a1 mainBundle];
}

id objc_msgSend_mainInternal(void *a1, const char *a2, ...)
{
  return [a1 mainInternal];
}

id objc_msgSend_mapAvailableRequestsToResolution(void *a1, const char *a2, ...)
{
  return [a1 mapAvailableRequestsToResolution];
}

id objc_msgSend_markIgnoredAssetsAsProcessed(void *a1, const char *a2, ...)
{
  return [a1 markIgnoredAssetsAsProcessed];
}

id objc_msgSend_master(void *a1, const char *a2, ...)
{
  return [a1 master];
}

id objc_msgSend_maxSizeBytes(void *a1, const char *a2, ...)
{
  return [a1 maxSizeBytes];
}

id objc_msgSend_mdID(void *a1, const char *a2, ...)
{
  return [a1 mdID];
}

id objc_msgSend_media(void *a1, const char *a2, ...)
{
  return [a1 media];
}

id objc_msgSend_mediaAnalysisImageVersion(void *a1, const char *a2, ...)
{
  return [a1 mediaAnalysisImageVersion];
}

id objc_msgSend_mediaAnalysisProperties(void *a1, const char *a2, ...)
{
  return [a1 mediaAnalysisProperties];
}

id objc_msgSend_mediaAnalysisTimeStamp(void *a1, const char *a2, ...)
{
  return [a1 mediaAnalysisTimeStamp];
}

id objc_msgSend_mediaAnalysisVersion(void *a1, const char *a2, ...)
{
  return [a1 mediaAnalysisVersion];
}

id objc_msgSend_mediaSubtypes(void *a1, const char *a2, ...)
{
  return [a1 mediaSubtypes];
}

id objc_msgSend_mediaType(void *a1, const char *a2, ...)
{
  return [a1 mediaType];
}

id objc_msgSend_mediaTypePredicatesString(void *a1, const char *a2, ...)
{
  return [a1 mediaTypePredicatesString];
}

id objc_msgSend_memeRequest(void *a1, const char *a2, ...)
{
  return [a1 memeRequest];
}

id objc_msgSend_memorySpecificFetchOptions(void *a1, const char *a2, ...)
{
  return [a1 memorySpecificFetchOptions];
}

id objc_msgSend_mode(void *a1, const char *a2, ...)
{
  return [a1 mode];
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return [a1 model];
}

id objc_msgSend_modelURL(void *a1, const char *a2, ...)
{
  return [a1 modelURL];
}

id objc_msgSend_mrcData(void *a1, const char *a2, ...)
{
  return [a1 mrcData];
}

id objc_msgSend_multiArrayValue(void *a1, const char *a2, ...)
{
  return [a1 multiArrayValue];
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return [a1 mutableBytes];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return [a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return [a1 name];
}

id objc_msgSend_narrowedBoundingBox(void *a1, const char *a2, ...)
{
  return [a1 narrowedBoundingBox];
}

id objc_msgSend_needDownload(void *a1, const char *a2, ...)
{
  return [a1 needDownload];
}

id objc_msgSend_needsEmbeddingProcessing(void *a1, const char *a2, ...)
{
  return [a1 needsEmbeddingProcessing];
}

id objc_msgSend_needsOCRProcessing(void *a1, const char *a2, ...)
{
  return [a1 needsOCRProcessing];
}

id objc_msgSend_needsSceneProcessing(void *a1, const char *a2, ...)
{
  return [a1 needsSceneProcessing];
}

id objc_msgSend_networkConnectivityRequired(void *a1, const char *a2, ...)
{
  return [a1 networkConnectivityRequired];
}

id objc_msgSend_networkId(void *a1, const char *a2, ...)
{
  return [a1 networkId];
}

id objc_msgSend_newFaceCropsToBeGeneratedFetchOptions(void *a1, const char *a2, ...)
{
  return [a1 newFaceCropsToBeGeneratedFetchOptions];
}

id objc_msgSend_nextAssetProcessingTask(void *a1, const char *a2, ...)
{
  return [a1 nextAssetProcessingTask];
}

id objc_msgSend_nextClusterProcessingTask(void *a1, const char *a2, ...)
{
  return [a1 nextClusterProcessingTask];
}

id objc_msgSend_nextDownloadAssetProcessingTask(void *a1, const char *a2, ...)
{
  return [a1 nextDownloadAssetProcessingTask];
}

id objc_msgSend_noiseScore(void *a1, const char *a2, ...)
{
  return [a1 noiseScore];
}

id objc_msgSend_notifyServicePID(void *a1, const char *a2, ...)
{
  return [a1 notifyServicePID];
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return [a1 now];
}

id objc_msgSend_nsfwClassifications(void *a1, const char *a2, ...)
{
  return [a1 nsfwClassifications];
}

id objc_msgSend_nsfwRequest(void *a1, const char *a2, ...)
{
  return [a1 nsfwRequest];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return [a1 null];
}

id objc_msgSend_numAssetsUnanalyzedWithResources(void *a1, const char *a2, ...)
{
  return [a1 numAssetsUnanalyzedWithResources];
}

id objc_msgSend_numAssetsUnanalyzedWithoutResources(void *a1, const char *a2, ...)
{
  return [a1 numAssetsUnanalyzedWithoutResources];
}

id objc_msgSend_numExistingAssetsNotUpdatedWithResources(void *a1, const char *a2, ...)
{
  return [a1 numExistingAssetsNotUpdatedWithResources];
}

id objc_msgSend_numExistingAssetsNotUpdatedWithoutResources(void *a1, const char *a2, ...)
{
  return [a1 numExistingAssetsNotUpdatedWithoutResources];
}

id objc_msgSend_numExistingAssetsUnanalyzedWithResources(void *a1, const char *a2, ...)
{
  return [a1 numExistingAssetsUnanalyzedWithResources];
}

id objc_msgSend_numExistingAssetsUnanalyzedWithoutResources(void *a1, const char *a2, ...)
{
  return [a1 numExistingAssetsUnanalyzedWithoutResources];
}

id objc_msgSend_numNewAssetsUnanalyzedWithResources(void *a1, const char *a2, ...)
{
  return [a1 numNewAssetsUnanalyzedWithResources];
}

id objc_msgSend_numNewAssetsUnanalyzedWithoutResources(void *a1, const char *a2, ...)
{
  return [a1 numNewAssetsUnanalyzedWithoutResources];
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return [a1 object];
}

id objc_msgSend_objectID(void *a1, const char *a2, ...)
{
  return [a1 objectID];
}

id objc_msgSend_objectRequest(void *a1, const char *a2, ...)
{
  return [a1 objectRequest];
}

id objc_msgSend_objectSaliencyRects(void *a1, const char *a2, ...)
{
  return [a1 objectSaliencyRects];
}

id objc_msgSend_ocrData(void *a1, const char *a2, ...)
{
  return [a1 ocrData];
}

id objc_msgSend_ocrObservation(void *a1, const char *a2, ...)
{
  return [a1 ocrObservation];
}

id objc_msgSend_ocrVersion(void *a1, const char *a2, ...)
{
  return [a1 ocrVersion];
}

id objc_msgSend_open(void *a1, const char *a2, ...)
{
  return [a1 open];
}

id objc_msgSend_openDatabase(void *a1, const char *a2, ...)
{
  return [a1 openDatabase];
}

id objc_msgSend_operatingSystemVersion(void *a1, const char *a2, ...)
{
  return [a1 operatingSystemVersion];
}

id objc_msgSend_optInPersonCount(void *a1, const char *a2, ...)
{
  return [a1 optInPersonCount];
}

id objc_msgSend_outputFeatureName(void *a1, const char *a2, ...)
{
  return [a1 outputFeatureName];
}

id objc_msgSend_overallAestheticScore(void *a1, const char *a2, ...)
{
  return [a1 overallAestheticScore];
}

id objc_msgSend_p1AssetCount(void *a1, const char *a2, ...)
{
  return [a1 p1AssetCount];
}

id objc_msgSend_parseFlowCacheVersion(void *a1, const char *a2, ...)
{
  return [a1 parseFlowCacheVersion];
}

id objc_msgSend_partialAnalysis(void *a1, const char *a2, ...)
{
  return [a1 partialAnalysis];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return [a1 path];
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return [a1 pathExtension];
}

id objc_msgSend_payload(void *a1, const char *a2, ...)
{
  return [a1 payload];
}

id objc_msgSend_pecVersion(void *a1, const char *a2, ...)
{
  return [a1 pecVersion];
}

id objc_msgSend_persist(void *a1, const char *a2, ...)
{
  return [a1 persist];
}

id objc_msgSend_persistPhotoLibraries(void *a1, const char *a2, ...)
{
  return [a1 persistPhotoLibraries];
}

id objc_msgSend_person(void *a1, const char *a2, ...)
{
  return [a1 person];
}

id objc_msgSend_personLocalIdentifier(void *a1, const char *a2, ...)
{
  return [a1 personLocalIdentifier];
}

id objc_msgSend_personManager(void *a1, const char *a2, ...)
{
  return [a1 personManager];
}

id objc_msgSend_personManagerSettings(void *a1, const char *a2, ...)
{
  return [a1 personManagerSettings];
}

id objc_msgSend_personUUID(void *a1, const char *a2, ...)
{
  return [a1 personUUID];
}

id objc_msgSend_pet(void *a1, const char *a2, ...)
{
  return [a1 pet];
}

id objc_msgSend_petClassificationThreshold(void *a1, const char *a2, ...)
{
  return [a1 petClassificationThreshold];
}

id objc_msgSend_photoLibrary(void *a1, const char *a2, ...)
{
  return [a1 photoLibrary];
}

id objc_msgSend_photoLibraryURL(void *a1, const char *a2, ...)
{
  return [a1 photoLibraryURL];
}

id objc_msgSend_photos(void *a1, const char *a2, ...)
{
  return [a1 photos];
}

id objc_msgSend_photosActivitiesEnabled(void *a1, const char *a2, ...)
{
  return [a1 photosActivitiesEnabled];
}

id objc_msgSend_photosChangeManager(void *a1, const char *a2, ...)
{
  return [a1 photosChangeManager];
}

id objc_msgSend_photosCharacterRecognitionAnalysisVersion(void *a1, const char *a2, ...)
{
  return [a1 photosCharacterRecognitionAnalysisVersion];
}

id objc_msgSend_photosMediaProcessingTaskID(void *a1, const char *a2, ...)
{
  return [a1 photosMediaProcessingTaskID];
}

id objc_msgSend_photosSceneAnalysisVersion(void *a1, const char *a2, ...)
{
  return [a1 photosSceneAnalysisVersion];
}

id objc_msgSend_photosSceneClassifications(void *a1, const char *a2, ...)
{
  return [a1 photosSceneClassifications];
}

id objc_msgSend_pixelHeight(void *a1, const char *a2, ...)
{
  return [a1 pixelHeight];
}

id objc_msgSend_pixelWidth(void *a1, const char *a2, ...)
{
  return [a1 pixelWidth];
}

id objc_msgSend_placeholderForCreatedFace(void *a1, const char *a2, ...)
{
  return [a1 placeholderForCreatedFace];
}

id objc_msgSend_placeholderForCreatedPerson(void *a1, const char *a2, ...)
{
  return [a1 placeholderForCreatedPerson];
}

id objc_msgSend_pleasantCameraTiltScore(void *a1, const char *a2, ...)
{
  return [a1 pleasantCameraTiltScore];
}

id objc_msgSend_pleasantCompositionScore(void *a1, const char *a2, ...)
{
  return [a1 pleasantCompositionScore];
}

id objc_msgSend_pleasantLightingScore(void *a1, const char *a2, ...)
{
  return [a1 pleasantLightingScore];
}

id objc_msgSend_pleasantPatternScore(void *a1, const char *a2, ...)
{
  return [a1 pleasantPatternScore];
}

id objc_msgSend_pleasantPerspectiveScore(void *a1, const char *a2, ...)
{
  return [a1 pleasantPerspectiveScore];
}

id objc_msgSend_pleasantPostProcessingScore(void *a1, const char *a2, ...)
{
  return [a1 pleasantPostProcessingScore];
}

id objc_msgSend_pleasantReflectionsScore(void *a1, const char *a2, ...)
{
  return [a1 pleasantReflectionsScore];
}

id objc_msgSend_pleasantSymmetryScore(void *a1, const char *a2, ...)
{
  return [a1 pleasantSymmetryScore];
}

id objc_msgSend_policy(void *a1, const char *a2, ...)
{
  return [a1 policy];
}

id objc_msgSend_portraitLayerStack(void *a1, const char *a2, ...)
{
  return [a1 portraitLayerStack];
}

id objc_msgSend_posterArchiveData(void *a1, const char *a2, ...)
{
  return [a1 posterArchiveData];
}

id objc_msgSend_predicate(void *a1, const char *a2, ...)
{
  return [a1 predicate];
}

id objc_msgSend_predicateForAllFeaturedStateEnabledSuggestionTypesForWallpaper(void *a1, const char *a2, ...)
{
  return [a1 predicateForAllFeaturedStateEnabledSuggestionTypesForWallpaper];
}

id objc_msgSend_predictedPersonUniqueIdentifier(void *a1, const char *a2, ...)
{
  return [a1 predictedPersonUniqueIdentifier];
}

id objc_msgSend_preferredCropRect(void *a1, const char *a2, ...)
{
  return [a1 preferredCropRect];
}

id objc_msgSend_preferredFilenameExtension(void *a1, const char *a2, ...)
{
  return [a1 preferredFilenameExtension];
}

id objc_msgSend_prepare(void *a1, const char *a2, ...)
{
  return [a1 prepare];
}

id objc_msgSend_previousAttempts(void *a1, const char *a2, ...)
{
  return [a1 previousAttempts];
}

id objc_msgSend_previousErrorCode(void *a1, const char *a2, ...)
{
  return [a1 previousErrorCode];
}

id objc_msgSend_previousErrorLine(void *a1, const char *a2, ...)
{
  return [a1 previousErrorLine];
}

id objc_msgSend_previousStatus(void *a1, const char *a2, ...)
{
  return [a1 previousStatus];
}

id objc_msgSend_prioritizeWallpaperSuggestion(void *a1, const char *a2, ...)
{
  return [a1 prioritizeWallpaperSuggestion];
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return [a1 priority];
}

id objc_msgSend_priorityAnalysis(void *a1, const char *a2, ...)
{
  return [a1 priorityAnalysis];
}

id objc_msgSend_privateFileURL(void *a1, const char *a2, ...)
{
  return [a1 privateFileURL];
}

id objc_msgSend_probableRotationDirection(void *a1, const char *a2, ...)
{
  return [a1 probableRotationDirection];
}

id objc_msgSend_probableRotationDirectionConfidence(void *a1, const char *a2, ...)
{
  return [a1 probableRotationDirectionConfidence];
}

id objc_msgSend_process(void *a1, const char *a2, ...)
{
  return [a1 process];
}

id objc_msgSend_processFaceCrops(void *a1, const char *a2, ...)
{
  return [a1 processFaceCrops];
}

id objc_msgSend_processGallery(void *a1, const char *a2, ...)
{
  return [a1 processGallery];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return [a1 processInfo];
}

id objc_msgSend_processLegacy(void *a1, const char *a2, ...)
{
  return [a1 processLegacy];
}

id objc_msgSend_processPendingBatch(void *a1, const char *a2, ...)
{
  return [a1 processPendingBatch];
}

id objc_msgSend_processedAssets(void *a1, const char *a2, ...)
{
  return [a1 processedAssets];
}

id objc_msgSend_processingInterval(void *a1, const char *a2, ...)
{
  return [a1 processingInterval];
}

id objc_msgSend_processingStatusMap(void *a1, const char *a2, ...)
{
  return [a1 processingStatusMap];
}

id objc_msgSend_processingStatusTaskID(void *a1, const char *a2, ...)
{
  return [a1 processingStatusTaskID];
}

id objc_msgSend_processingTaskIdentifiers(void *a1, const char *a2, ...)
{
  return [a1 processingTaskIdentifiers];
}

id objc_msgSend_producedResultIdentifiers(void *a1, const char *a2, ...)
{
  return [a1 producedResultIdentifiers];
}

id objc_msgSend_progressHandler(void *a1, const char *a2, ...)
{
  return [a1 progressHandler];
}

id objc_msgSend_promotePersons(void *a1, const char *a2, ...)
{
  return [a1 promotePersons];
}

id objc_msgSend_promotePets(void *a1, const char *a2, ...)
{
  return [a1 promotePets];
}

id objc_msgSend_providerBundleIdentifier(void *a1, const char *a2, ...)
{
  return [a1 providerBundleIdentifier];
}

id objc_msgSend_publish(void *a1, const char *a2, ...)
{
  return [a1 publish];
}

id objc_msgSend_publishEntries(void *a1, const char *a2, ...)
{
  return [a1 publishEntries];
}

id objc_msgSend_publishPendingChanges(void *a1, const char *a2, ...)
{
  return [a1 publishPendingChanges];
}

id objc_msgSend_purgeAllResources(void *a1, const char *a2, ...)
{
  return [a1 purgeAllResources];
}

id objc_msgSend_purgeCachedModels(void *a1, const char *a2, ...)
{
  return [a1 purgeCachedModels];
}

id objc_msgSend_qid(void *a1, const char *a2, ...)
{
  return [a1 qid];
}

id objc_msgSend_qos(void *a1, const char *a2, ...)
{
  return [a1 qos];
}

id objc_msgSend_qosArray(void *a1, const char *a2, ...)
{
  return [a1 qosArray];
}

id objc_msgSend_quality(void *a1, const char *a2, ...)
{
  return [a1 quality];
}

id objc_msgSend_queryHighlightCount(void *a1, const char *a2, ...)
{
  return [a1 queryHighlightCount];
}

id objc_msgSend_queryMediaAnalysisImagePriority1ProgressPercentage(void *a1, const char *a2, ...)
{
  return [a1 queryMediaAnalysisImagePriority1ProgressPercentage];
}

id objc_msgSend_queryMemoryCount(void *a1, const char *a2, ...)
{
  return [a1 queryMemoryCount];
}

id objc_msgSend_queryWallpaperSuggestionCount(void *a1, const char *a2, ...)
{
  return [a1 queryWallpaperSuggestionCount];
}

id objc_msgSend_queueName(void *a1, const char *a2, ...)
{
  return [a1 queueName];
}

id objc_msgSend_queues(void *a1, const char *a2, ...)
{
  return [a1 queues];
}

id objc_msgSend_quickClassificationFaceAdjustmentVersion(void *a1, const char *a2, ...)
{
  return [a1 quickClassificationFaceAdjustmentVersion];
}

id objc_msgSend_rateLimitConfigurationName(void *a1, const char *a2, ...)
{
  return [a1 rateLimitConfigurationName];
}

id objc_msgSend_rawPixelHeight(void *a1, const char *a2, ...)
{
  return [a1 rawPixelHeight];
}

id objc_msgSend_rawPixelWidth(void *a1, const char *a2, ...)
{
  return [a1 rawPixelWidth];
}

id objc_msgSend_ready(void *a1, const char *a2, ...)
{
  return [a1 ready];
}

id objc_msgSend_recommended(void *a1, const char *a2, ...)
{
  return [a1 recommended];
}

id objc_msgSend_recommended1Sec(void *a1, const char *a2, ...)
{
  return [a1 recommended1Sec];
}

id objc_msgSend_recommended2Sec(void *a1, const char *a2, ...)
{
  return [a1 recommended2Sec];
}

id objc_msgSend_recommended3Sec(void *a1, const char *a2, ...)
{
  return [a1 recommended3Sec];
}

id objc_msgSend_recommendedSec(void *a1, const char *a2, ...)
{
  return [a1 recommendedSec];
}

id objc_msgSend_recommendedState(void *a1, const char *a2, ...)
{
  return [a1 recommendedState];
}

id objc_msgSend_refinedRegions(void *a1, const char *a2, ...)
{
  return [a1 refinedRegions];
}

id objc_msgSend_regionOfInterest(void *a1, const char *a2, ...)
{
  return [a1 regionOfInterest];
}

id objc_msgSend_regionOfInterestResults(void *a1, const char *a2, ...)
{
  return [a1 regionOfInterestResults];
}

id objc_msgSend_registerPhotosTasks(void *a1, const char *a2, ...)
{
  return [a1 registerPhotosTasks];
}

id objc_msgSend_registerTask(void *a1, const char *a2, ...)
{
  return [a1 registerTask];
}

id objc_msgSend_releaseCachedResources(void *a1, const char *a2, ...)
{
  return [a1 releaseCachedResources];
}

id objc_msgSend_remoteObjectInterface(void *a1, const char *a2, ...)
{
  return [a1 remoteObjectInterface];
}

id objc_msgSend_remoteObjectProxy(void *a1, const char *a2, ...)
{
  return [a1 remoteObjectProxy];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return [a1 removeAllObjects];
}

id objc_msgSend_removeProgressEntriesBeyondLimits(void *a1, const char *a2, ...)
{
  return [a1 removeProgressEntriesBeyondLimits];
}

id objc_msgSend_reportDatabaseCorruption(void *a1, const char *a2, ...)
{
  return [a1 reportDatabaseCorruption];
}

id objc_msgSend_reportMetrics(void *a1, const char *a2, ...)
{
  return [a1 reportMetrics];
}

id objc_msgSend_requestData(void *a1, const char *a2, ...)
{
  return [a1 requestData];
}

id objc_msgSend_requestDate(void *a1, const char *a2, ...)
{
  return [a1 requestDate];
}

id objc_msgSend_requestDownload(void *a1, const char *a2, ...)
{
  return [a1 requestDownload];
}

id objc_msgSend_requestID(void *a1, const char *a2, ...)
{
  return [a1 requestID];
}

id objc_msgSend_requiresProgressQuery(void *a1, const char *a2, ...)
{
  return [a1 requiresProgressQuery];
}

id objc_msgSend_reschedule(void *a1, const char *a2, ...)
{
  return [a1 reschedule];
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return [a1 reset];
}

id objc_msgSend_resetBackgroundAnalysisMetrics(void *a1, const char *a2, ...)
{
  return [a1 resetBackgroundAnalysisMetrics];
}

id objc_msgSend_resetDailyBackgroundAnalysisMetrics(void *a1, const char *a2, ...)
{
  return [a1 resetDailyBackgroundAnalysisMetrics];
}

id objc_msgSend_resetInterruption(void *a1, const char *a2, ...)
{
  return [a1 resetInterruption];
}

id objc_msgSend_resetPendingBatch(void *a1, const char *a2, ...)
{
  return [a1 resetPendingBatch];
}

id objc_msgSend_resource(void *a1, const char *a2, ...)
{
  return [a1 resource];
}

id objc_msgSend_resourceIntensive(void *a1, const char *a2, ...)
{
  return [a1 resourceIntensive];
}

id objc_msgSend_resourceRequirement(void *a1, const char *a2, ...)
{
  return [a1 resourceRequirement];
}

id objc_msgSend_resourceURL(void *a1, const char *a2, ...)
{
  return [a1 resourceURL];
}

id objc_msgSend_result(void *a1, const char *a2, ...)
{
  return [a1 result];
}

id objc_msgSend_resultDirectoryURL(void *a1, const char *a2, ...)
{
  return [a1 resultDirectoryURL];
}

id objc_msgSend_resultDirectoryURLExtension(void *a1, const char *a2, ...)
{
  return [a1 resultDirectoryURLExtension];
}

id objc_msgSend_resultItems(void *a1, const char *a2, ...)
{
  return [a1 resultItems];
}

id objc_msgSend_results(void *a1, const char *a2, ...)
{
  return [a1 results];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return [a1 resume];
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return [a1 reverseObjectEnumerator];
}

id objc_msgSend_revision(void *a1, const char *a2, ...)
{
  return [a1 revision];
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return [a1 run];
}

id objc_msgSend_runFragmentLevelAnalysis(void *a1, const char *a2, ...)
{
  return [a1 runFragmentLevelAnalysis];
}

id objc_msgSend_runFrameLevelAnalysis(void *a1, const char *a2, ...)
{
  return [a1 runFrameLevelAnalysis];
}

id objc_msgSend_saliencyObjectnessRequest(void *a1, const char *a2, ...)
{
  return [a1 saliencyObjectnessRequest];
}

id objc_msgSend_saliencyRequest(void *a1, const char *a2, ...)
{
  return [a1 saliencyRequest];
}

id objc_msgSend_salientObjects(void *a1, const char *a2, ...)
{
  return [a1 salientObjects];
}

id objc_msgSend_sandboxToken(void *a1, const char *a2, ...)
{
  return [a1 sandboxToken];
}

id objc_msgSend_scanningPolicy(void *a1, const char *a2, ...)
{
  return [a1 scanningPolicy];
}

id objc_msgSend_sceneAnalysisProperties(void *a1, const char *a2, ...)
{
  return [a1 sceneAnalysisProperties];
}

id objc_msgSend_sceneAnalysisVersion(void *a1, const char *a2, ...)
{
  return [a1 sceneAnalysisVersion];
}

id objc_msgSend_sceneClassifications(void *a1, const char *a2, ...)
{
  return [a1 sceneClassifications];
}

id objc_msgSend_sceneIdentifier(void *a1, const char *a2, ...)
{
  return [a1 sceneIdentifier];
}

id objc_msgSend_sceneType(void *a1, const char *a2, ...)
{
  return [a1 sceneType];
}

id objc_msgSend_sceneVersion(void *a1, const char *a2, ...)
{
  return [a1 sceneVersion];
}

id objc_msgSend_scenenetCompleted(void *a1, const char *a2, ...)
{
  return [a1 scenenetCompleted];
}

id objc_msgSend_sceneprintData(void *a1, const char *a2, ...)
{
  return [a1 sceneprintData];
}

id objc_msgSend_sceneprintRequest(void *a1, const char *a2, ...)
{
  return [a1 sceneprintRequest];
}

id objc_msgSend_sceneprints(void *a1, const char *a2, ...)
{
  return [a1 sceneprints];
}

id objc_msgSend_scheduleNextAssetProcessingTask(void *a1, const char *a2, ...)
{
  return [a1 scheduleNextAssetProcessingTask];
}

id objc_msgSend_scheduleNextClusterProcessingTask(void *a1, const char *a2, ...)
{
  return [a1 scheduleNextClusterProcessingTask];
}

id objc_msgSend_scheduleNextDownloadAssetProcessingTask(void *a1, const char *a2, ...)
{
  return [a1 scheduleNextDownloadAssetProcessingTask];
}

id objc_msgSend_scheduledRequestLimit(void *a1, const char *a2, ...)
{
  return [a1 scheduledRequestLimit];
}

id objc_msgSend_scheduledTaskID(void *a1, const char *a2, ...)
{
  return [a1 scheduledTaskID];
}

id objc_msgSend_schedulingErrorHandler(void *a1, const char *a2, ...)
{
  return [a1 schedulingErrorHandler];
}

id objc_msgSend_scoresForLabels(void *a1, const char *a2, ...)
{
  return [a1 scoresForLabels];
}

id objc_msgSend_searchThreshold(void *a1, const char *a2, ...)
{
  return [a1 searchThreshold];
}

id objc_msgSend_searchableKnowledgeObject(void *a1, const char *a2, ...)
{
  return [a1 searchableKnowledgeObject];
}

id objc_msgSend_semanticRequest(void *a1, const char *a2, ...)
{
  return [a1 semanticRequest];
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return [a1 serviceName];
}

id objc_msgSend_services(void *a1, const char *a2, ...)
{
  return [a1 services];
}

id objc_msgSend_sessionLog(void *a1, const char *a2, ...)
{
  return [a1 sessionLog];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return [a1 set];
}

id objc_msgSend_setTaskCompleted(void *a1, const char *a2, ...)
{
  return [a1 setTaskCompleted];
}

id objc_msgSend_sharedCPUMonitor(void *a1, const char *a2, ...)
{
  return [a1 sharedCPUMonitor];
}

id objc_msgSend_sharedContext(void *a1, const char *a2, ...)
{
  return [a1 sharedContext];
}

id objc_msgSend_sharedDataCollection(void *a1, const char *a2, ...)
{
  return [a1 sharedDataCollection];
}

id objc_msgSend_sharedDatabaseManager(void *a1, const char *a2, ...)
{
  return [a1 sharedDatabaseManager];
}

id objc_msgSend_sharedImageManager(void *a1, const char *a2, ...)
{
  return [a1 sharedImageManager];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return [a1 sharedInstance];
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return [a1 sharedManager];
}

id objc_msgSend_sharedScheduler(void *a1, const char *a2, ...)
{
  return [a1 sharedScheduler];
}

id objc_msgSend_sharedSettings(void *a1, const char *a2, ...)
{
  return [a1 sharedSettings];
}

id objc_msgSend_sharedStateHandler(void *a1, const char *a2, ...)
{
  return [a1 sharedStateHandler];
}

id objc_msgSend_sharedTask(void *a1, const char *a2, ...)
{
  return [a1 sharedTask];
}

id objc_msgSend_sharedWatchdog(void *a1, const char *a2, ...)
{
  return [a1 sharedWatchdog];
}

id objc_msgSend_sharplyFocusedSubjectScore(void *a1, const char *a2, ...)
{
  return [a1 sharplyFocusedSubjectScore];
}

id objc_msgSend_sharpnessRevision(void *a1, const char *a2, ...)
{
  return [a1 sharpnessRevision];
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return [a1 size];
}

id objc_msgSend_sizeBytes(void *a1, const char *a2, ...)
{
  return [a1 sizeBytes];
}

id objc_msgSend_sizeValue(void *a1, const char *a2, ...)
{
  return [a1 sizeValue];
}

id objc_msgSend_skipGallerySyncing(void *a1, const char *a2, ...)
{
  return [a1 skipGallerySyncing];
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return [a1 source];
}

id objc_msgSend_sourceHeight(void *a1, const char *a2, ...)
{
  return [a1 sourceHeight];
}

id objc_msgSend_sourceIdentifier(void *a1, const char *a2, ...)
{
  return [a1 sourceIdentifier];
}

id objc_msgSend_sourcePixelBuffer(void *a1, const char *a2, ...)
{
  return [a1 sourcePixelBuffer];
}

id objc_msgSend_sourceType(void *a1, const char *a2, ...)
{
  return [a1 sourceType];
}

id objc_msgSend_sourceWidth(void *a1, const char *a2, ...)
{
  return [a1 sourceWidth];
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return [a1 standardUserDefaults];
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return [a1 start];
}

id objc_msgSend_startAccessingSecurityScopedResource(void *a1, const char *a2, ...)
{
  return [a1 startAccessingSecurityScopedResource];
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return [a1 startDate];
}

id objc_msgSend_startReading(void *a1, const char *a2, ...)
{
  return [a1 startReading];
}

id objc_msgSend_started(void *a1, const char *a2, ...)
{
  return [a1 started];
}

id objc_msgSend_statsFlags(void *a1, const char *a2, ...)
{
  return [a1 statsFlags];
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return [a1 status];
}

id objc_msgSend_stickerAlgorithmVersion(void *a1, const char *a2, ...)
{
  return [a1 stickerAlgorithmVersion];
}

id objc_msgSend_stickerConfidenceScore(void *a1, const char *a2, ...)
{
  return [a1 stickerConfidenceScore];
}

id objc_msgSend_stickerScore(void *a1, const char *a2, ...)
{
  return [a1 stickerScore];
}

id objc_msgSend_stickerStatus(void *a1, const char *a2, ...)
{
  return [a1 stickerStatus];
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return [a1 stop];
}

id objc_msgSend_stopAccessingSecurityScopedResource(void *a1, const char *a2, ...)
{
  return [a1 stopAccessingSecurityScopedResource];
}

id objc_msgSend_streamStatus(void *a1, const char *a2, ...)
{
  return [a1 streamStatus];
}

id objc_msgSend_streamingAllowed(void *a1, const char *a2, ...)
{
  return [a1 streamingAllowed];
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return [a1 string];
}

id objc_msgSend_stringByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return [a1 stringByDeletingLastPathComponent];
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return [a1 stringValue];
}

id objc_msgSend_submitPhotosTasks(void *a1, const char *a2, ...)
{
  return [a1 submitPhotosTasks];
}

id objc_msgSend_subpath(void *a1, const char *a2, ...)
{
  return [a1 subpath];
}

id objc_msgSend_summarizedEmbeddings(void *a1, const char *a2, ...)
{
  return [a1 summarizedEmbeddings];
}

id objc_msgSend_summaryTimeRange(void *a1, const char *a2, ...)
{
  return [a1 summaryTimeRange];
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return [a1 synchronize];
}

id objc_msgSend_synchronizePhotosDatabaseForProcessedAssets(void *a1, const char *a2, ...)
{
  return [a1 synchronizePhotosDatabaseForProcessedAssets];
}

id objc_msgSend_syndication(void *a1, const char *a2, ...)
{
  return [a1 syndication];
}

id objc_msgSend_systemDataStore(void *a1, const char *a2, ...)
{
  return [a1 systemDataStore];
}

id objc_msgSend_systemPhotoLibraryURL(void *a1, const char *a2, ...)
{
  return [a1 systemPhotoLibraryURL];
}

id objc_msgSend_systemUptime(void *a1, const char *a2, ...)
{
  return [a1 systemUptime];
}

id objc_msgSend_tabooRequest(void *a1, const char *a2, ...)
{
  return [a1 tabooRequest];
}

id objc_msgSend_task(void *a1, const char *a2, ...)
{
  return [a1 task];
}

id objc_msgSend_taskGracePeriod(void *a1, const char *a2, ...)
{
  return [a1 taskGracePeriod];
}

id objc_msgSend_taskGroup(void *a1, const char *a2, ...)
{
  return [a1 taskGroup];
}

id objc_msgSend_taskID(void *a1, const char *a2, ...)
{
  return [a1 taskID];
}

id objc_msgSend_taskName(void *a1, const char *a2, ...)
{
  return [a1 taskName];
}

id objc_msgSend_taskPriority(void *a1, const char *a2, ...)
{
  return [a1 taskPriority];
}

id objc_msgSend_taskUUID(void *a1, const char *a2, ...)
{
  return [a1 taskUUID];
}

id objc_msgSend_tastefullyBlurredScore(void *a1, const char *a2, ...)
{
  return [a1 tastefullyBlurredScore];
}

id objc_msgSend_textContentPieces(void *a1, const char *a2, ...)
{
  return [a1 textContentPieces];
}

id objc_msgSend_thumbnailImageData(void *a1, const char *a2, ...)
{
  return [a1 thumbnailImageData];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timeRange(void *a1, const char *a2, ...)
{
  return [a1 timeRange];
}

id objc_msgSend_timeRangeResults(void *a1, const char *a2, ...)
{
  return [a1 timeRangeResults];
}

id objc_msgSend_timerangeEmbeddings(void *a1, const char *a2, ...)
{
  return [a1 timerangeEmbeddings];
}

id objc_msgSend_torsoprint(void *a1, const char *a2, ...)
{
  return [a1 torsoprint];
}

id objc_msgSend_trainingType(void *a1, const char *a2, ...)
{
  return [a1 trainingType];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return [a1 type];
}

id objc_msgSend_typeIdentifier(void *a1, const char *a2, ...)
{
  return [a1 typeIdentifier];
}

id objc_msgSend_types(void *a1, const char *a2, ...)
{
  return [a1 types];
}

id objc_msgSend_unassignedObservations(void *a1, const char *a2, ...)
{
  return [a1 unassignedObservations];
}

id objc_msgSend_underlyingErrors(void *a1, const char *a2, ...)
{
  return [a1 underlyingErrors];
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return [a1 uniqueIdentifier];
}

id objc_msgSend_unprocessedAssets(void *a1, const char *a2, ...)
{
  return [a1 unprocessedAssets];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedLongLongValue];
}

id objc_msgSend_updateLastestDownloadTimestamp(void *a1, const char *a2, ...)
{
  return [a1 updateLastestDownloadTimestamp];
}

id objc_msgSend_updateTask(void *a1, const char *a2, ...)
{
  return [a1 updateTask];
}

id objc_msgSend_updateType(void *a1, const char *a2, ...)
{
  return [a1 updateType];
}

id objc_msgSend_url(void *a1, const char *a2, ...)
{
  return [a1 url];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return [a1 userInfo];
}

id objc_msgSend_userSafety(void *a1, const char *a2, ...)
{
  return [a1 userSafety];
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return [a1 uuid];
}

id objc_msgSend_variationCache(void *a1, const char *a2, ...)
{
  return [a1 variationCache];
}

id objc_msgSend_verifiedType(void *a1, const char *a2, ...)
{
  return [a1 verifiedType];
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return [a1 version];
}

id objc_msgSend_videoCaptionVersion(void *a1, const char *a2, ...)
{
  return [a1 videoCaptionVersion];
}

id objc_msgSend_videoScore(void *a1, const char *a2, ...)
{
  return [a1 videoScore];
}

id objc_msgSend_visionRequest(void *a1, const char *a2, ...)
{
  return [a1 visionRequest];
}

id objc_msgSend_visualSearchData(void *a1, const char *a2, ...)
{
  return [a1 visualSearchData];
}

id objc_msgSend_visualSearchProperties(void *a1, const char *a2, ...)
{
  return [a1 visualSearchProperties];
}

id objc_msgSend_visualSearchStatus(void *a1, const char *a2, ...)
{
  return [a1 visualSearchStatus];
}

id objc_msgSend_visualUnderstanding(void *a1, const char *a2, ...)
{
  return [a1 visualUnderstanding];
}

id objc_msgSend_vuObservationID(void *a1, const char *a2, ...)
{
  return [a1 vuObservationID];
}

id objc_msgSend_waitForPublishing(void *a1, const char *a2, ...)
{
  return [a1 waitForPublishing];
}

id objc_msgSend_wallpaper(void *a1, const char *a2, ...)
{
  return [a1 wallpaper];
}

id objc_msgSend_wallpaperScore(void *a1, const char *a2, ...)
{
  return [a1 wallpaperScore];
}

id objc_msgSend_wellChosenBackgroundScore(void *a1, const char *a2, ...)
{
  return [a1 wellChosenBackgroundScore];
}

id objc_msgSend_wellChosenSubjectScore(void *a1, const char *a2, ...)
{
  return [a1 wellChosenSubjectScore];
}

id objc_msgSend_wellFramedSubjectScore(void *a1, const char *a2, ...)
{
  return [a1 wellFramedSubjectScore];
}

id objc_msgSend_wellKnownPhotoLibraryIdentifier(void *a1, const char *a2, ...)
{
  return [a1 wellKnownPhotoLibraryIdentifier];
}

id objc_msgSend_wellTimedShotScore(void *a1, const char *a2, ...)
{
  return [a1 wellTimedShotScore];
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToURL:options:error:");
}